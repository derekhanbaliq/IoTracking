
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010c4c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000200  20000000  00010c4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004f10  20000200  00010e4c  00030200  2**2
                  ALLOC
  3 .stack        00002000  20005110  00015d5c  00030200  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006f24a  00000000  00000000  00030281  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007669  00000000  00000000  0009f4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000bdfd  00000000  00000000  000a6b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001f70  00000000  00000000  000b2931  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001d00  00000000  00000000  000b48a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012f82  00000000  00000000  000b65a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000241d8  00000000  00000000  000c9523  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000ae977  00000000  00000000  000ed6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000079c0  00000000  00000000  0019c074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	10 71 00 20 d5 bf 00 00 cd c0 00 00 cd c0 00 00     .q. ............
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	69 57 00 00 00 00 00 00 00 00 00 00 91 58 00 00     iW...........X..
      3c:	d9 58 00 00 cd c0 00 00 cd c0 00 00 cd c0 00 00     .X..............

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      4c:	c9 9c 00 00 f9 98 00 00 cd c0 00 00 cd c0 00 00     ................
		if (time.hour == 0) {
      5c:	cd c0 00 00 cd c0 00 00 6d a3 00 00 85 a3 00 00     ........m.......
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	9d a3 00 00 b5 a3 00 00 cd a3 00 00 e5 a3 00 00     ................
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      7c:	1d bf 00 00 31 bf 00 00 45 bf 00 00 0d 36 00 00     ....1...E....6..
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      8c:	21 36 00 00 35 36 00 00 00 00 00 00 00 00 00 00     !6..56..........
      9c:	cd c0 00 00 cd c0 00 00 cd c0 00 00 cd c0 00 00     ................
			alarm.time.hour = alarm.time.hour % 12;
      ac:	cd c0 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	20000200 	.word	0x20000200
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	00010c4c 	.word	0x00010c4c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000204 	.word	0x20000204
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	00010c4c 	.word	0x00010c4c
     10c:	00010c4c 	.word	0x00010c4c
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	681b      	ldr	r3, [r3, #0]
     120:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     122:	68fb      	ldr	r3, [r7, #12]
     124:	69db      	ldr	r3, [r3, #28]
     126:	2207      	movs	r2, #7
     128:	4013      	ands	r3, r2
     12a:	1e5a      	subs	r2, r3, #1
     12c:	4193      	sbcs	r3, r2
     12e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
     130:	0018      	movs	r0, r3
     132:	46bd      	mov	sp, r7
     134:	b004      	add	sp, #16
     136:	bd80      	pop	{r7, pc}

00000138 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
     138:	b580      	push	{r7, lr}
     13a:	b082      	sub	sp, #8
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     140:	46c0      	nop			; (mov r8, r8)
     142:	687b      	ldr	r3, [r7, #4]
     144:	0018      	movs	r0, r3
     146:	4b04      	ldr	r3, [pc, #16]	; (158 <_i2c_master_wait_for_sync+0x20>)
     148:	4798      	blx	r3
     14a:	1e03      	subs	r3, r0, #0
     14c:	d1f9      	bne.n	142 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
     14e:	46c0      	nop			; (mov r8, r8)
     150:	46bd      	mov	sp, r7
     152:	b002      	add	sp, #8
     154:	bd80      	pop	{r7, pc}
     156:	46c0      	nop			; (mov r8, r8)
     158:	00000115 	.word	0x00000115

0000015c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     15c:	b580      	push	{r7, lr}
     15e:	b084      	sub	sp, #16
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     164:	687b      	ldr	r3, [r7, #4]
     166:	681b      	ldr	r3, [r3, #0]
     168:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     16a:	68fb      	ldr	r3, [r7, #12]
     16c:	681b      	ldr	r3, [r3, #0]
     16e:	011b      	lsls	r3, r3, #4
     170:	0fdb      	lsrs	r3, r3, #31
     172:	b2db      	uxtb	r3, r3
     174:	001a      	movs	r2, r3
     176:	230b      	movs	r3, #11
     178:	18fb      	adds	r3, r7, r3
     17a:	1e51      	subs	r1, r2, #1
     17c:	418a      	sbcs	r2, r1
     17e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     180:	2308      	movs	r3, #8
     182:	18fb      	adds	r3, r7, r3
     184:	687a      	ldr	r2, [r7, #4]
     186:	8b52      	ldrh	r2, [r2, #26]
     188:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     18a:	687b      	ldr	r3, [r7, #4]
     18c:	8b9b      	ldrh	r3, [r3, #28]
     18e:	b29a      	uxth	r2, r3
     190:	2308      	movs	r3, #8
     192:	18fb      	adds	r3, r7, r3
     194:	2108      	movs	r1, #8
     196:	1879      	adds	r1, r7, r1
     198:	8809      	ldrh	r1, [r1, #0]
     19a:	1a8a      	subs	r2, r1, r2
     19c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     19e:	687b      	ldr	r3, [r7, #4]
     1a0:	8b9b      	ldrh	r3, [r3, #28]
     1a2:	b29b      	uxth	r3, r3
     1a4:	3b01      	subs	r3, #1
     1a6:	b29a      	uxth	r2, r3
     1a8:	687b      	ldr	r3, [r7, #4]
     1aa:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
     1ac:	230b      	movs	r3, #11
     1ae:	18fb      	adds	r3, r7, r3
     1b0:	781b      	ldrb	r3, [r3, #0]
     1b2:	2b00      	cmp	r3, #0
     1b4:	d010      	beq.n	1d8 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	7adb      	ldrb	r3, [r3, #11]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d01c      	beq.n	1f8 <_i2c_master_read+0x9c>
     1be:	687b      	ldr	r3, [r7, #4]
     1c0:	8b9b      	ldrh	r3, [r3, #28]
     1c2:	b29b      	uxth	r3, r3
     1c4:	2b01      	cmp	r3, #1
     1c6:	d117      	bne.n	1f8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     1c8:	68fb      	ldr	r3, [r7, #12]
     1ca:	685b      	ldr	r3, [r3, #4]
     1cc:	2280      	movs	r2, #128	; 0x80
     1ce:	02d2      	lsls	r2, r2, #11
     1d0:	431a      	orrs	r2, r3
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	e00f      	b.n	1f8 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
     1d8:	687b      	ldr	r3, [r7, #4]
     1da:	7adb      	ldrb	r3, [r3, #11]
     1dc:	2b00      	cmp	r3, #0
     1de:	d00b      	beq.n	1f8 <_i2c_master_read+0x9c>
     1e0:	687b      	ldr	r3, [r7, #4]
     1e2:	8b9b      	ldrh	r3, [r3, #28]
     1e4:	b29b      	uxth	r3, r3
     1e6:	2b00      	cmp	r3, #0
     1e8:	d106      	bne.n	1f8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	685b      	ldr	r3, [r3, #4]
     1ee:	2280      	movs	r2, #128	; 0x80
     1f0:	02d2      	lsls	r2, r2, #11
     1f2:	431a      	orrs	r2, r3
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
     1f8:	687b      	ldr	r3, [r7, #4]
     1fa:	8b9b      	ldrh	r3, [r3, #28]
     1fc:	b29b      	uxth	r3, r3
     1fe:	2b00      	cmp	r3, #0
     200:	d10e      	bne.n	220 <_i2c_master_read+0xc4>
		if (module->send_stop) {
     202:	687b      	ldr	r3, [r7, #4]
     204:	7a9b      	ldrb	r3, [r3, #10]
     206:	2b00      	cmp	r3, #0
     208:	d00a      	beq.n	220 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	0018      	movs	r0, r3
     20e:	4b0e      	ldr	r3, [pc, #56]	; (248 <_i2c_master_read+0xec>)
     210:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     212:	68fb      	ldr	r3, [r7, #12]
     214:	685b      	ldr	r3, [r3, #4]
     216:	22c0      	movs	r2, #192	; 0xc0
     218:	0292      	lsls	r2, r2, #10
     21a:	431a      	orrs	r2, r3
     21c:	68fb      	ldr	r3, [r7, #12]
     21e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     220:	687b      	ldr	r3, [r7, #4]
     222:	0018      	movs	r0, r3
     224:	4b08      	ldr	r3, [pc, #32]	; (248 <_i2c_master_read+0xec>)
     226:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     228:	687b      	ldr	r3, [r7, #4]
     22a:	6a1a      	ldr	r2, [r3, #32]
     22c:	2308      	movs	r3, #8
     22e:	18fb      	adds	r3, r7, r3
     230:	881b      	ldrh	r3, [r3, #0]
     232:	18d3      	adds	r3, r2, r3
     234:	68fa      	ldr	r2, [r7, #12]
     236:	2128      	movs	r1, #40	; 0x28
     238:	5c52      	ldrb	r2, [r2, r1]
     23a:	b2d2      	uxtb	r2, r2
     23c:	701a      	strb	r2, [r3, #0]
}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46bd      	mov	sp, r7
     242:	b004      	add	sp, #16
     244:	bd80      	pop	{r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	00000139 	.word	0x00000139

0000024c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     24c:	b580      	push	{r7, lr}
     24e:	b084      	sub	sp, #16
     250:	af00      	add	r7, sp, #0
     252:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     254:	687b      	ldr	r3, [r7, #4]
     256:	681b      	ldr	r3, [r3, #0]
     258:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     25a:	68fb      	ldr	r3, [r7, #12]
     25c:	8b5b      	ldrh	r3, [r3, #26]
     25e:	b29b      	uxth	r3, r3
     260:	001a      	movs	r2, r3
     262:	2304      	movs	r3, #4
     264:	4013      	ands	r3, r2
     266:	d004      	beq.n	272 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     268:	687b      	ldr	r3, [r7, #4]
     26a:	2225      	movs	r2, #37	; 0x25
     26c:	211e      	movs	r1, #30
     26e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
     270:	e024      	b.n	2bc <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
     272:	230a      	movs	r3, #10
     274:	18fb      	adds	r3, r7, r3
     276:	687a      	ldr	r2, [r7, #4]
     278:	8b52      	ldrh	r2, [r2, #26]
     27a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	8b9b      	ldrh	r3, [r3, #28]
     280:	b29a      	uxth	r2, r3
     282:	230a      	movs	r3, #10
     284:	18fb      	adds	r3, r7, r3
     286:	210a      	movs	r1, #10
     288:	1879      	adds	r1, r7, r1
     28a:	8809      	ldrh	r1, [r1, #0]
     28c:	1a8a      	subs	r2, r1, r2
     28e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
     290:	687b      	ldr	r3, [r7, #4]
     292:	8b9b      	ldrh	r3, [r3, #28]
     294:	b29b      	uxth	r3, r3
     296:	3b01      	subs	r3, #1
     298:	b29a      	uxth	r2, r3
     29a:	687b      	ldr	r3, [r7, #4]
     29c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
     29e:	687b      	ldr	r3, [r7, #4]
     2a0:	0018      	movs	r0, r3
     2a2:	4b08      	ldr	r3, [pc, #32]	; (2c4 <_i2c_master_write+0x78>)
     2a4:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     2a6:	687b      	ldr	r3, [r7, #4]
     2a8:	6a1a      	ldr	r2, [r3, #32]
     2aa:	230a      	movs	r3, #10
     2ac:	18fb      	adds	r3, r7, r3
     2ae:	881b      	ldrh	r3, [r3, #0]
     2b0:	18d3      	adds	r3, r2, r3
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	b2d9      	uxtb	r1, r3
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	2228      	movs	r2, #40	; 0x28
     2ba:	5499      	strb	r1, [r3, r2]
}
     2bc:	46bd      	mov	sp, r7
     2be:	b004      	add	sp, #16
     2c0:	bd80      	pop	{r7, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	00000139 	.word	0x00000139

000002c8 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
     2c8:	b580      	push	{r7, lr}
     2ca:	b084      	sub	sp, #16
     2cc:	af00      	add	r7, sp, #0
     2ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     2d6:	68fb      	ldr	r3, [r7, #12]
     2d8:	7e1b      	ldrb	r3, [r3, #24]
     2da:	b2db      	uxtb	r3, r3
     2dc:	001a      	movs	r2, r3
     2de:	2301      	movs	r3, #1
     2e0:	4013      	ands	r3, r2
     2e2:	d02b      	beq.n	33c <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	2201      	movs	r2, #1
     2e8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     2ea:	68fb      	ldr	r3, [r7, #12]
     2ec:	8b5b      	ldrh	r3, [r3, #26]
     2ee:	b29b      	uxth	r3, r3
     2f0:	001a      	movs	r2, r3
     2f2:	2302      	movs	r3, #2
     2f4:	4013      	ands	r3, r2
     2f6:	d004      	beq.n	302 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
     2f8:	687b      	ldr	r3, [r7, #4]
     2fa:	2225      	movs	r2, #37	; 0x25
     2fc:	2141      	movs	r1, #65	; 0x41
     2fe:	5499      	strb	r1, [r3, r2]
     300:	e01c      	b.n	33c <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     302:	68fb      	ldr	r3, [r7, #12]
     304:	8b5b      	ldrh	r3, [r3, #26]
     306:	b29b      	uxth	r3, r3
     308:	001a      	movs	r2, r3
     30a:	2304      	movs	r3, #4
     30c:	4013      	ands	r3, r2
     30e:	d015      	beq.n	33c <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     310:	687b      	ldr	r3, [r7, #4]
     312:	2225      	movs	r2, #37	; 0x25
     314:	2118      	movs	r1, #24
     316:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
     318:	687b      	ldr	r3, [r7, #4]
     31a:	2200      	movs	r2, #0
     31c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
     31e:	687b      	ldr	r3, [r7, #4]
     320:	7a9b      	ldrb	r3, [r3, #10]
     322:	2b00      	cmp	r3, #0
     324:	d00a      	beq.n	33c <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
     326:	687b      	ldr	r3, [r7, #4]
     328:	0018      	movs	r0, r3
     32a:	4b13      	ldr	r3, [pc, #76]	; (378 <_i2c_master_async_address_response+0xb0>)
     32c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     32e:	68fb      	ldr	r3, [r7, #12]
     330:	685b      	ldr	r3, [r3, #4]
     332:	22c0      	movs	r2, #192	; 0xc0
     334:	0292      	lsls	r2, r2, #10
     336:	431a      	orrs	r2, r3
     338:	68fb      	ldr	r3, [r7, #12]
     33a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	8b9b      	ldrh	r3, [r3, #28]
     340:	b29a      	uxth	r2, r3
     342:	687b      	ldr	r3, [r7, #4]
     344:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
     346:	687b      	ldr	r3, [r7, #4]
     348:	2225      	movs	r2, #37	; 0x25
     34a:	5c9b      	ldrb	r3, [r3, r2]
     34c:	b2db      	uxtb	r3, r3
     34e:	2b05      	cmp	r3, #5
     350:	d10e      	bne.n	370 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     352:	687b      	ldr	r3, [r7, #4]
     354:	2224      	movs	r2, #36	; 0x24
     356:	5c9b      	ldrb	r3, [r3, r2]
     358:	b2db      	uxtb	r3, r3
     35a:	2b00      	cmp	r3, #0
     35c:	d104      	bne.n	368 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
     35e:	687b      	ldr	r3, [r7, #4]
     360:	0018      	movs	r0, r3
     362:	4b06      	ldr	r3, [pc, #24]	; (37c <_i2c_master_async_address_response+0xb4>)
     364:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
     366:	e003      	b.n	370 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
     368:	687b      	ldr	r3, [r7, #4]
     36a:	0018      	movs	r0, r3
     36c:	4b04      	ldr	r3, [pc, #16]	; (380 <_i2c_master_async_address_response+0xb8>)
     36e:	4798      	blx	r3
}
     370:	46c0      	nop			; (mov r8, r8)
     372:	46bd      	mov	sp, r7
     374:	b004      	add	sp, #16
     376:	bd80      	pop	{r7, pc}
     378:	00000139 	.word	0x00000139
     37c:	0000024d 	.word	0x0000024d
     380:	0000015d 	.word	0x0000015d

00000384 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
     384:	b580      	push	{r7, lr}
     386:	b084      	sub	sp, #16
     388:	af00      	add	r7, sp, #0
     38a:	60f8      	str	r0, [r7, #12]
     38c:	60b9      	str	r1, [r7, #8]
     38e:	1dfb      	adds	r3, r7, #7
     390:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
     392:	1dfb      	adds	r3, r7, #7
     394:	781b      	ldrb	r3, [r3, #0]
     396:	68fa      	ldr	r2, [r7, #12]
     398:	3302      	adds	r3, #2
     39a:	009b      	lsls	r3, r3, #2
     39c:	18d3      	adds	r3, r2, r3
     39e:	3304      	adds	r3, #4
     3a0:	68ba      	ldr	r2, [r7, #8]
     3a2:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
     3a4:	68fb      	ldr	r3, [r7, #12]
     3a6:	7e1b      	ldrb	r3, [r3, #24]
     3a8:	b2db      	uxtb	r3, r3
     3aa:	b25a      	sxtb	r2, r3
     3ac:	1dfb      	adds	r3, r7, #7
     3ae:	781b      	ldrb	r3, [r3, #0]
     3b0:	2101      	movs	r1, #1
     3b2:	4099      	lsls	r1, r3
     3b4:	000b      	movs	r3, r1
     3b6:	b25b      	sxtb	r3, r3
     3b8:	4313      	orrs	r3, r2
     3ba:	b25b      	sxtb	r3, r3
     3bc:	b2da      	uxtb	r2, r3
     3be:	68fb      	ldr	r3, [r7, #12]
     3c0:	761a      	strb	r2, [r3, #24]
}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	46bd      	mov	sp, r7
     3c6:	b004      	add	sp, #16
     3c8:	bd80      	pop	{r7, pc}
	...

000003cc <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     3cc:	b590      	push	{r4, r7, lr}
     3ce:	b087      	sub	sp, #28
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
     3d4:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     3d6:	687b      	ldr	r3, [r7, #4]
     3d8:	681b      	ldr	r3, [r3, #0]
     3da:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     3dc:	683b      	ldr	r3, [r7, #0]
     3de:	685a      	ldr	r2, [r3, #4]
     3e0:	687b      	ldr	r3, [r7, #4]
     3e2:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     3e4:	683b      	ldr	r3, [r7, #0]
     3e6:	885a      	ldrh	r2, [r3, #2]
     3e8:	687b      	ldr	r3, [r7, #4]
     3ea:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	2224      	movs	r2, #36	; 0x24
     3f0:	2101      	movs	r1, #1
     3f2:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	2225      	movs	r2, #37	; 0x25
     3f8:	2105      	movs	r1, #5
     3fa:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     3fc:	693b      	ldr	r3, [r7, #16]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	011b      	lsls	r3, r3, #4
     402:	0fdb      	lsrs	r3, r3, #31
     404:	b2db      	uxtb	r3, r3
     406:	001a      	movs	r2, r3
     408:	230f      	movs	r3, #15
     40a:	18fb      	adds	r3, r7, r3
     40c:	1e51      	subs	r1, r2, #1
     40e:	418a      	sbcs	r2, r1
     410:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     412:	683b      	ldr	r3, [r7, #0]
     414:	7a5b      	ldrb	r3, [r3, #9]
     416:	2b00      	cmp	r3, #0
     418:	d006      	beq.n	428 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     41a:	683b      	ldr	r3, [r7, #0]
     41c:	7a9a      	ldrb	r2, [r3, #10]
     41e:	687b      	ldr	r3, [r7, #4]
     420:	0011      	movs	r1, r2
     422:	0018      	movs	r0, r3
     424:	4b3b      	ldr	r3, [pc, #236]	; (514 <_i2c_master_read_packet+0x148>)
     426:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     428:	230f      	movs	r3, #15
     42a:	18fb      	adds	r3, r7, r3
     42c:	781b      	ldrb	r3, [r3, #0]
     42e:	2b00      	cmp	r3, #0
     430:	d00b      	beq.n	44a <_i2c_master_read_packet+0x7e>
     432:	683b      	ldr	r3, [r7, #0]
     434:	885b      	ldrh	r3, [r3, #2]
     436:	2b01      	cmp	r3, #1
     438:	d107      	bne.n	44a <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     43a:	693b      	ldr	r3, [r7, #16]
     43c:	685b      	ldr	r3, [r3, #4]
     43e:	2280      	movs	r2, #128	; 0x80
     440:	02d2      	lsls	r2, r2, #11
     442:	431a      	orrs	r2, r3
     444:	693b      	ldr	r3, [r7, #16]
     446:	605a      	str	r2, [r3, #4]
     448:	e005      	b.n	456 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     44a:	693b      	ldr	r3, [r7, #16]
     44c:	685b      	ldr	r3, [r3, #4]
     44e:	4a32      	ldr	r2, [pc, #200]	; (518 <_i2c_master_read_packet+0x14c>)
     450:	401a      	ands	r2, r3
     452:	693b      	ldr	r3, [r7, #16]
     454:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
     456:	683b      	ldr	r3, [r7, #0]
     458:	7a1b      	ldrb	r3, [r3, #8]
     45a:	2b00      	cmp	r3, #0
     45c:	d045      	beq.n	4ea <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     45e:	683b      	ldr	r3, [r7, #0]
     460:	881b      	ldrh	r3, [r3, #0]
     462:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     464:	683b      	ldr	r3, [r7, #0]
     466:	7a5b      	ldrb	r3, [r3, #9]
     468:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     46a:	4313      	orrs	r3, r2
     46c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     46e:	2380      	movs	r3, #128	; 0x80
     470:	021b      	lsls	r3, r3, #8
     472:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
     474:	693b      	ldr	r3, [r7, #16]
     476:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     478:	2317      	movs	r3, #23
     47a:	18fc      	adds	r4, r7, r3
     47c:	687b      	ldr	r3, [r7, #4]
     47e:	0018      	movs	r0, r3
     480:	4b26      	ldr	r3, [pc, #152]	; (51c <_i2c_master_read_packet+0x150>)
     482:	4798      	blx	r3
     484:	0003      	movs	r3, r0
     486:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     488:	693b      	ldr	r3, [r7, #16]
     48a:	685b      	ldr	r3, [r3, #4]
     48c:	4a22      	ldr	r2, [pc, #136]	; (518 <_i2c_master_read_packet+0x14c>)
     48e:	401a      	ands	r2, r3
     490:	693b      	ldr	r3, [r7, #16]
     492:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     494:	2317      	movs	r3, #23
     496:	18fb      	adds	r3, r7, r3
     498:	781b      	ldrb	r3, [r3, #0]
     49a:	2b00      	cmp	r3, #0
     49c:	d107      	bne.n	4ae <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
     49e:	2317      	movs	r3, #23
     4a0:	18fc      	adds	r4, r7, r3
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	0018      	movs	r0, r3
     4a6:	4b1e      	ldr	r3, [pc, #120]	; (520 <_i2c_master_read_packet+0x154>)
     4a8:	4798      	blx	r3
     4aa:	0003      	movs	r3, r0
     4ac:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
     4ae:	2317      	movs	r3, #23
     4b0:	18fb      	adds	r3, r7, r3
     4b2:	781b      	ldrb	r3, [r3, #0]
     4b4:	2b00      	cmp	r3, #0
     4b6:	d114      	bne.n	4e2 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
     4b8:	693b      	ldr	r3, [r7, #16]
     4ba:	2203      	movs	r2, #3
     4bc:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     4be:	683b      	ldr	r3, [r7, #0]
     4c0:	881b      	ldrh	r3, [r3, #0]
     4c2:	0a1b      	lsrs	r3, r3, #8
     4c4:	b29b      	uxth	r3, r3
     4c6:	2278      	movs	r2, #120	; 0x78
     4c8:	4313      	orrs	r3, r2
     4ca:	b29b      	uxth	r3, r3
     4cc:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     4ce:	683b      	ldr	r3, [r7, #0]
     4d0:	7a5b      	ldrb	r3, [r3, #9]
     4d2:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     4d4:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     4d6:	2201      	movs	r2, #1
     4d8:	4313      	orrs	r3, r2
     4da:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     4dc:	693b      	ldr	r3, [r7, #16]
     4de:	625a      	str	r2, [r3, #36]	; 0x24
     4e0:	e012      	b.n	508 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
     4e2:	2317      	movs	r3, #23
     4e4:	18fb      	adds	r3, r7, r3
     4e6:	781b      	ldrb	r3, [r3, #0]
     4e8:	e00f      	b.n	50a <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     4ea:	693b      	ldr	r3, [r7, #16]
     4ec:	2203      	movs	r2, #3
     4ee:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     4f0:	683b      	ldr	r3, [r7, #0]
     4f2:	881b      	ldrh	r3, [r3, #0]
     4f4:	005b      	lsls	r3, r3, #1
     4f6:	2201      	movs	r2, #1
     4f8:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     4fa:	683b      	ldr	r3, [r7, #0]
     4fc:	7a5b      	ldrb	r3, [r3, #9]
     4fe:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     500:	4313      	orrs	r3, r2
     502:	001a      	movs	r2, r3
     504:	693b      	ldr	r3, [r7, #16]
     506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     508:	2300      	movs	r3, #0
}
     50a:	0018      	movs	r0, r3
     50c:	46bd      	mov	sp, r7
     50e:	b007      	add	sp, #28
     510:	bd90      	pop	{r4, r7, pc}
     512:	46c0      	nop			; (mov r8, r8)
     514:	000035b9 	.word	0x000035b9
     518:	fffbffff 	.word	0xfffbffff
     51c:	0000355b 	.word	0x0000355b
     520:	000034fd 	.word	0x000034fd

00000524 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     524:	b580      	push	{r7, lr}
     526:	b082      	sub	sp, #8
     528:	af00      	add	r7, sp, #0
     52a:	6078      	str	r0, [r7, #4]
     52c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     52e:	687b      	ldr	r3, [r7, #4]
     530:	8b9b      	ldrh	r3, [r3, #28]
     532:	b29b      	uxth	r3, r3
     534:	2b00      	cmp	r3, #0
     536:	d001      	beq.n	53c <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
     538:	2305      	movs	r3, #5
     53a:	e00c      	b.n	556 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
     53c:	687b      	ldr	r3, [r7, #4]
     53e:	2201      	movs	r2, #1
     540:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     542:	687b      	ldr	r3, [r7, #4]
     544:	2201      	movs	r2, #1
     546:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
     548:	683a      	ldr	r2, [r7, #0]
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	0011      	movs	r1, r2
     54e:	0018      	movs	r0, r3
     550:	4b03      	ldr	r3, [pc, #12]	; (560 <i2c_master_read_packet_job+0x3c>)
     552:	4798      	blx	r3
     554:	0003      	movs	r3, r0
}
     556:	0018      	movs	r0, r3
     558:	46bd      	mov	sp, r7
     55a:	b002      	add	sp, #8
     55c:	bd80      	pop	{r7, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	000003cd 	.word	0x000003cd

00000564 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     564:	b580      	push	{r7, lr}
     566:	b084      	sub	sp, #16
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
     56c:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     56e:	687b      	ldr	r3, [r7, #4]
     570:	681b      	ldr	r3, [r3, #0]
     572:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     574:	683b      	ldr	r3, [r7, #0]
     576:	7a5b      	ldrb	r3, [r3, #9]
     578:	2b00      	cmp	r3, #0
     57a:	d006      	beq.n	58a <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     57c:	683b      	ldr	r3, [r7, #0]
     57e:	7a9a      	ldrb	r2, [r3, #10]
     580:	687b      	ldr	r3, [r7, #4]
     582:	0011      	movs	r1, r2
     584:	0018      	movs	r0, r3
     586:	4b1e      	ldr	r3, [pc, #120]	; (600 <_i2c_master_write_packet+0x9c>)
     588:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     58a:	68fb      	ldr	r3, [r7, #12]
     58c:	685b      	ldr	r3, [r3, #4]
     58e:	4a1d      	ldr	r2, [pc, #116]	; (604 <_i2c_master_write_packet+0xa0>)
     590:	401a      	ands	r2, r3
     592:	68fb      	ldr	r3, [r7, #12]
     594:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     596:	683b      	ldr	r3, [r7, #0]
     598:	685a      	ldr	r2, [r3, #4]
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
     59e:	683b      	ldr	r3, [r7, #0]
     5a0:	885a      	ldrh	r2, [r3, #2]
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	2224      	movs	r2, #36	; 0x24
     5aa:	2100      	movs	r1, #0
     5ac:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	2225      	movs	r2, #37	; 0x25
     5b2:	2105      	movs	r1, #5
     5b4:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     5b6:	68fb      	ldr	r3, [r7, #12]
     5b8:	2203      	movs	r2, #3
     5ba:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     5bc:	683b      	ldr	r3, [r7, #0]
     5be:	7a1b      	ldrb	r3, [r3, #8]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d00d      	beq.n	5e0 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5c4:	683b      	ldr	r3, [r7, #0]
     5c6:	881b      	ldrh	r3, [r3, #0]
     5c8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5ca:	683b      	ldr	r3, [r7, #0]
     5cc:	7a5b      	ldrb	r3, [r3, #9]
     5ce:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5d0:	4313      	orrs	r3, r2
     5d2:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     5d4:	2380      	movs	r3, #128	; 0x80
     5d6:	021b      	lsls	r3, r3, #8
     5d8:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5da:	68fb      	ldr	r3, [r7, #12]
     5dc:	625a      	str	r2, [r3, #36]	; 0x24
     5de:	e009      	b.n	5f4 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5e0:	683b      	ldr	r3, [r7, #0]
     5e2:	881b      	ldrh	r3, [r3, #0]
     5e4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     5e6:	683b      	ldr	r3, [r7, #0]
     5e8:	7a5b      	ldrb	r3, [r3, #9]
     5ea:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     5ec:	4313      	orrs	r3, r2
     5ee:	001a      	movs	r2, r3
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
     5f4:	2300      	movs	r3, #0
}
     5f6:	0018      	movs	r0, r3
     5f8:	46bd      	mov	sp, r7
     5fa:	b004      	add	sp, #16
     5fc:	bd80      	pop	{r7, pc}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	000035b9 	.word	0x000035b9
     604:	fffbffff 	.word	0xfffbffff

00000608 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     608:	b580      	push	{r7, lr}
     60a:	b082      	sub	sp, #8
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
     610:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     612:	687b      	ldr	r3, [r7, #4]
     614:	8b9b      	ldrh	r3, [r3, #28]
     616:	b29b      	uxth	r3, r3
     618:	2b00      	cmp	r3, #0
     61a:	d001      	beq.n	620 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
     61c:	2305      	movs	r3, #5
     61e:	e00c      	b.n	63a <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
     620:	687b      	ldr	r3, [r7, #4]
     622:	2201      	movs	r2, #1
     624:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
     626:	687b      	ldr	r3, [r7, #4]
     628:	2201      	movs	r2, #1
     62a:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
     62c:	683a      	ldr	r2, [r7, #0]
     62e:	687b      	ldr	r3, [r7, #4]
     630:	0011      	movs	r1, r2
     632:	0018      	movs	r0, r3
     634:	4b03      	ldr	r3, [pc, #12]	; (644 <i2c_master_write_packet_job+0x3c>)
     636:	4798      	blx	r3
     638:	0003      	movs	r3, r0
}
     63a:	0018      	movs	r0, r3
     63c:	46bd      	mov	sp, r7
     63e:	b002      	add	sp, #8
     640:	bd80      	pop	{r7, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	00000565 	.word	0x00000565

00000648 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     648:	b580      	push	{r7, lr}
     64a:	b086      	sub	sp, #24
     64c:	af00      	add	r7, sp, #0
     64e:	0002      	movs	r2, r0
     650:	1dfb      	adds	r3, r7, #7
     652:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
     654:	1dfb      	adds	r3, r7, #7
     656:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
     658:	4b93      	ldr	r3, [pc, #588]	; (8a8 <_i2c_master_interrupt_handler+0x260>)
     65a:	0092      	lsls	r2, r2, #2
     65c:	58d3      	ldr	r3, [r2, r3]
     65e:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     660:	697b      	ldr	r3, [r7, #20]
     662:	681b      	ldr	r3, [r3, #0]
     664:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     666:	693b      	ldr	r3, [r7, #16]
     668:	681b      	ldr	r3, [r3, #0]
     66a:	011b      	lsls	r3, r3, #4
     66c:	0fdb      	lsrs	r3, r3, #31
     66e:	b2db      	uxtb	r3, r3
     670:	001a      	movs	r2, r3
     672:	230f      	movs	r3, #15
     674:	18fb      	adds	r3, r7, r3
     676:	1e51      	subs	r1, r2, #1
     678:	418a      	sbcs	r2, r1
     67a:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     67c:	230e      	movs	r3, #14
     67e:	18fb      	adds	r3, r7, r3
     680:	697a      	ldr	r2, [r7, #20]
     682:	7e52      	ldrb	r2, [r2, #25]
     684:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
     686:	697b      	ldr	r3, [r7, #20]
     688:	7e1b      	ldrb	r3, [r3, #24]
     68a:	b2da      	uxtb	r2, r3
     68c:	230e      	movs	r3, #14
     68e:	18fb      	adds	r3, r7, r3
     690:	210e      	movs	r1, #14
     692:	1879      	adds	r1, r7, r1
     694:	7809      	ldrb	r1, [r1, #0]
     696:	400a      	ands	r2, r1
     698:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     69a:	697b      	ldr	r3, [r7, #20]
     69c:	8b5b      	ldrh	r3, [r3, #26]
     69e:	b29b      	uxth	r3, r3
     6a0:	2b00      	cmp	r3, #0
     6a2:	d109      	bne.n	6b8 <_i2c_master_interrupt_handler+0x70>
     6a4:	697b      	ldr	r3, [r7, #20]
     6a6:	8b9b      	ldrh	r3, [r3, #28]
     6a8:	b29b      	uxth	r3, r3
     6aa:	2b00      	cmp	r3, #0
     6ac:	d004      	beq.n	6b8 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
     6ae:	697b      	ldr	r3, [r7, #20]
     6b0:	0018      	movs	r0, r3
     6b2:	4b7e      	ldr	r3, [pc, #504]	; (8ac <_i2c_master_interrupt_handler+0x264>)
     6b4:	4798      	blx	r3
     6b6:	e070      	b.n	79a <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     6b8:	697b      	ldr	r3, [r7, #20]
     6ba:	8b5b      	ldrh	r3, [r3, #26]
     6bc:	b29b      	uxth	r3, r3
     6be:	2b00      	cmp	r3, #0
     6c0:	d039      	beq.n	736 <_i2c_master_interrupt_handler+0xee>
     6c2:	697b      	ldr	r3, [r7, #20]
     6c4:	8b9b      	ldrh	r3, [r3, #28]
     6c6:	b29b      	uxth	r3, r3
     6c8:	2b00      	cmp	r3, #0
     6ca:	d134      	bne.n	736 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
     6cc:	697b      	ldr	r3, [r7, #20]
     6ce:	2225      	movs	r2, #37	; 0x25
     6d0:	5c9b      	ldrb	r3, [r3, r2]
     6d2:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     6d4:	2b05      	cmp	r3, #5
     6d6:	d12e      	bne.n	736 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     6d8:	697b      	ldr	r3, [r7, #20]
     6da:	2224      	movs	r2, #36	; 0x24
     6dc:	5c9b      	ldrb	r3, [r3, r2]
     6de:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     6e0:	2b00      	cmp	r3, #0
     6e2:	d128      	bne.n	736 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     6e4:	693b      	ldr	r3, [r7, #16]
     6e6:	2203      	movs	r2, #3
     6e8:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     6ea:	697b      	ldr	r3, [r7, #20]
     6ec:	2200      	movs	r2, #0
     6ee:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     6f0:	697b      	ldr	r3, [r7, #20]
     6f2:	2225      	movs	r2, #37	; 0x25
     6f4:	2100      	movs	r1, #0
     6f6:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
     6f8:	697b      	ldr	r3, [r7, #20]
     6fa:	7a9b      	ldrb	r3, [r3, #10]
     6fc:	2b00      	cmp	r3, #0
     6fe:	d00b      	beq.n	718 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
     700:	697b      	ldr	r3, [r7, #20]
     702:	0018      	movs	r0, r3
     704:	4b6a      	ldr	r3, [pc, #424]	; (8b0 <_i2c_master_interrupt_handler+0x268>)
     706:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     708:	693b      	ldr	r3, [r7, #16]
     70a:	685b      	ldr	r3, [r3, #4]
     70c:	22c0      	movs	r2, #192	; 0xc0
     70e:	0292      	lsls	r2, r2, #10
     710:	431a      	orrs	r2, r3
     712:	693b      	ldr	r3, [r7, #16]
     714:	605a      	str	r2, [r3, #4]
     716:	e002      	b.n	71e <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     718:	693b      	ldr	r3, [r7, #16]
     71a:	2201      	movs	r2, #1
     71c:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     71e:	230e      	movs	r3, #14
     720:	18fb      	adds	r3, r7, r3
     722:	781b      	ldrb	r3, [r3, #0]
     724:	2201      	movs	r2, #1
     726:	4013      	ands	r3, r2
     728:	d037      	beq.n	79a <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     72a:	697b      	ldr	r3, [r7, #20]
     72c:	68db      	ldr	r3, [r3, #12]
     72e:	697a      	ldr	r2, [r7, #20]
     730:	0010      	movs	r0, r2
     732:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     734:	e031      	b.n	79a <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     736:	697b      	ldr	r3, [r7, #20]
     738:	8b5b      	ldrh	r3, [r3, #26]
     73a:	b29b      	uxth	r3, r3
     73c:	2b00      	cmp	r3, #0
     73e:	d02c      	beq.n	79a <_i2c_master_interrupt_handler+0x152>
     740:	697b      	ldr	r3, [r7, #20]
     742:	8b9b      	ldrh	r3, [r3, #28]
     744:	b29b      	uxth	r3, r3
     746:	2b00      	cmp	r3, #0
     748:	d027      	beq.n	79a <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     74a:	693b      	ldr	r3, [r7, #16]
     74c:	8b5b      	ldrh	r3, [r3, #26]
     74e:	b29b      	uxth	r3, r3
     750:	001a      	movs	r2, r3
     752:	2320      	movs	r3, #32
     754:	4013      	ands	r3, r2
     756:	d111      	bne.n	77c <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     758:	230f      	movs	r3, #15
     75a:	18fb      	adds	r3, r7, r3
     75c:	781b      	ldrb	r3, [r3, #0]
     75e:	2201      	movs	r2, #1
     760:	4053      	eors	r3, r2
     762:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     764:	2b00      	cmp	r3, #0
     766:	d104      	bne.n	772 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     768:	697b      	ldr	r3, [r7, #20]
     76a:	8b9b      	ldrh	r3, [r3, #28]
     76c:	b29b      	uxth	r3, r3
     76e:	2b01      	cmp	r3, #1
     770:	d004      	beq.n	77c <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
     772:	697b      	ldr	r3, [r7, #20]
     774:	2225      	movs	r2, #37	; 0x25
     776:	2141      	movs	r1, #65	; 0x41
     778:	5499      	strb	r1, [r3, r2]
     77a:	e00e      	b.n	79a <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     77c:	697b      	ldr	r3, [r7, #20]
     77e:	2224      	movs	r2, #36	; 0x24
     780:	5c9b      	ldrb	r3, [r3, r2]
     782:	b2db      	uxtb	r3, r3
     784:	2b00      	cmp	r3, #0
     786:	d104      	bne.n	792 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
     788:	697b      	ldr	r3, [r7, #20]
     78a:	0018      	movs	r0, r3
     78c:	4b49      	ldr	r3, [pc, #292]	; (8b4 <_i2c_master_interrupt_handler+0x26c>)
     78e:	4798      	blx	r3
     790:	e003      	b.n	79a <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
     792:	697b      	ldr	r3, [r7, #20]
     794:	0018      	movs	r0, r3
     796:	4b48      	ldr	r3, [pc, #288]	; (8b8 <_i2c_master_interrupt_handler+0x270>)
     798:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     79a:	697b      	ldr	r3, [r7, #20]
     79c:	8b5b      	ldrh	r3, [r3, #26]
     79e:	b29b      	uxth	r3, r3
     7a0:	2b00      	cmp	r3, #0
     7a2:	d047      	beq.n	834 <_i2c_master_interrupt_handler+0x1ec>
     7a4:	697b      	ldr	r3, [r7, #20]
     7a6:	8b9b      	ldrh	r3, [r3, #28]
     7a8:	b29b      	uxth	r3, r3
     7aa:	2b00      	cmp	r3, #0
     7ac:	d142      	bne.n	834 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
     7ae:	697b      	ldr	r3, [r7, #20]
     7b0:	2225      	movs	r2, #37	; 0x25
     7b2:	5c9b      	ldrb	r3, [r3, r2]
     7b4:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7b6:	2b05      	cmp	r3, #5
     7b8:	d13c      	bne.n	834 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     7ba:	697b      	ldr	r3, [r7, #20]
     7bc:	2224      	movs	r2, #36	; 0x24
     7be:	5c9b      	ldrb	r3, [r3, r2]
     7c0:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
     7c2:	2b01      	cmp	r3, #1
     7c4:	d136      	bne.n	834 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     7c6:	693b      	ldr	r3, [r7, #16]
     7c8:	7e1b      	ldrb	r3, [r3, #24]
     7ca:	b2db      	uxtb	r3, r3
     7cc:	001a      	movs	r2, r3
     7ce:	2302      	movs	r3, #2
     7d0:	4013      	ands	r3, r2
     7d2:	d002      	beq.n	7da <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     7d4:	693b      	ldr	r3, [r7, #16]
     7d6:	2202      	movs	r2, #2
     7d8:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
     7da:	693b      	ldr	r3, [r7, #16]
     7dc:	2203      	movs	r2, #3
     7de:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
     7e0:	697b      	ldr	r3, [r7, #20]
     7e2:	2200      	movs	r2, #0
     7e4:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
     7e6:	697b      	ldr	r3, [r7, #20]
     7e8:	2225      	movs	r2, #37	; 0x25
     7ea:	2100      	movs	r1, #0
     7ec:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     7ee:	230e      	movs	r3, #14
     7f0:	18fb      	adds	r3, r7, r3
     7f2:	781b      	ldrb	r3, [r3, #0]
     7f4:	2202      	movs	r2, #2
     7f6:	4013      	ands	r3, r2
     7f8:	d00b      	beq.n	812 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     7fa:	697b      	ldr	r3, [r7, #20]
     7fc:	2224      	movs	r2, #36	; 0x24
     7fe:	5c9b      	ldrb	r3, [r3, r2]
     800:	b2db      	uxtb	r3, r3
     802:	2b01      	cmp	r3, #1
     804:	d105      	bne.n	812 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     806:	697b      	ldr	r3, [r7, #20]
     808:	691b      	ldr	r3, [r3, #16]
     80a:	697a      	ldr	r2, [r7, #20]
     80c:	0010      	movs	r0, r2
     80e:	4798      	blx	r3
     810:	e010      	b.n	834 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     812:	230e      	movs	r3, #14
     814:	18fb      	adds	r3, r7, r3
     816:	781b      	ldrb	r3, [r3, #0]
     818:	2201      	movs	r2, #1
     81a:	4013      	ands	r3, r2
     81c:	d00a      	beq.n	834 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     81e:	697b      	ldr	r3, [r7, #20]
     820:	2224      	movs	r2, #36	; 0x24
     822:	5c9b      	ldrb	r3, [r3, r2]
     824:	b2db      	uxtb	r3, r3
     826:	2b00      	cmp	r3, #0
     828:	d104      	bne.n	834 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     82a:	697b      	ldr	r3, [r7, #20]
     82c:	68db      	ldr	r3, [r3, #12]
     82e:	697a      	ldr	r2, [r7, #20]
     830:	0010      	movs	r0, r2
     832:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     834:	697b      	ldr	r3, [r7, #20]
     836:	2225      	movs	r2, #37	; 0x25
     838:	5c9b      	ldrb	r3, [r3, r2]
     83a:	b2db      	uxtb	r3, r3
     83c:	2b05      	cmp	r3, #5
     83e:	d02e      	beq.n	89e <_i2c_master_interrupt_handler+0x256>
     840:	697b      	ldr	r3, [r7, #20]
     842:	2225      	movs	r2, #37	; 0x25
     844:	5c9b      	ldrb	r3, [r3, r2]
     846:	b2db      	uxtb	r3, r3
     848:	2b00      	cmp	r3, #0
     84a:	d028      	beq.n	89e <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     84c:	693b      	ldr	r3, [r7, #16]
     84e:	2203      	movs	r2, #3
     850:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     852:	697b      	ldr	r3, [r7, #20]
     854:	2200      	movs	r2, #0
     856:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
     858:	697b      	ldr	r3, [r7, #20]
     85a:	2200      	movs	r2, #0
     85c:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     85e:	697b      	ldr	r3, [r7, #20]
     860:	2225      	movs	r2, #37	; 0x25
     862:	5c9b      	ldrb	r3, [r3, r2]
     864:	b2db      	uxtb	r3, r3
     866:	2b41      	cmp	r3, #65	; 0x41
     868:	d00e      	beq.n	888 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
     86a:	697b      	ldr	r3, [r7, #20]
     86c:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     86e:	2b00      	cmp	r3, #0
     870:	d00a      	beq.n	888 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
     872:	697b      	ldr	r3, [r7, #20]
     874:	0018      	movs	r0, r3
     876:	4b0e      	ldr	r3, [pc, #56]	; (8b0 <_i2c_master_interrupt_handler+0x268>)
     878:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     87a:	693b      	ldr	r3, [r7, #16]
     87c:	685b      	ldr	r3, [r3, #4]
     87e:	22e0      	movs	r2, #224	; 0xe0
     880:	02d2      	lsls	r2, r2, #11
     882:	431a      	orrs	r2, r3
     884:	693b      	ldr	r3, [r7, #16]
     886:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     888:	230e      	movs	r3, #14
     88a:	18fb      	adds	r3, r7, r3
     88c:	781b      	ldrb	r3, [r3, #0]
     88e:	2204      	movs	r2, #4
     890:	4013      	ands	r3, r2
     892:	d004      	beq.n	89e <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     894:	697b      	ldr	r3, [r7, #20]
     896:	695b      	ldr	r3, [r3, #20]
     898:	697a      	ldr	r2, [r7, #20]
     89a:	0010      	movs	r0, r2
     89c:	4798      	blx	r3
		}
	}
}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	46bd      	mov	sp, r7
     8a2:	b006      	add	sp, #24
     8a4:	bd80      	pop	{r7, pc}
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	20004fa8 	.word	0x20004fa8
     8ac:	000002c9 	.word	0x000002c9
     8b0:	00000139 	.word	0x00000139
     8b4:	0000024d 	.word	0x0000024d
     8b8:	0000015d 	.word	0x0000015d

000008bc <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
     8bc:	b580      	push	{r7, lr}
     8be:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     8c0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     8c4:	4b02      	ldr	r3, [pc, #8]	; (8d0 <NVIC_SystemReset+0x14>)
     8c6:	4a03      	ldr	r2, [pc, #12]	; (8d4 <NVIC_SystemReset+0x18>)
     8c8:	60da      	str	r2, [r3, #12]
     8ca:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
     8ce:	e7fe      	b.n	8ce <NVIC_SystemReset+0x12>
     8d0:	e000ed00 	.word	0xe000ed00
     8d4:	05fa0004 	.word	0x05fa0004

000008d8 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
     8d8:	b580      	push	{r7, lr}
     8da:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
     8dc:	4b02      	ldr	r3, [pc, #8]	; (8e8 <system_reset+0x10>)
     8de:	4798      	blx	r3
}
     8e0:	46c0      	nop			; (mov r8, r8)
     8e2:	46bd      	mov	sp, r7
     8e4:	bd80      	pop	{r7, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	000008bd 	.word	0x000008bd

000008ec <vCommandConsoleTask>:
/******************************************************************************
* CLI Thread
******************************************************************************/

void vCommandConsoleTask( void *pvParameters )
{
     8ec:	b580      	push	{r7, lr}
     8ee:	b086      	sub	sp, #24
     8f0:	af00      	add	r7, sp, #0
     8f2:	6078      	str	r0, [r7, #4]
//REGISTER COMMANDS HERE

FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
     8f4:	4b95      	ldr	r3, [pc, #596]	; (b4c <vCommandConsoleTask+0x260>)
     8f6:	0018      	movs	r0, r3
     8f8:	4b95      	ldr	r3, [pc, #596]	; (b50 <vCommandConsoleTask+0x264>)
     8fa:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xClearScreen );
     8fc:	4b95      	ldr	r3, [pc, #596]	; (b54 <vCommandConsoleTask+0x268>)
     8fe:	0018      	movs	r0, r3
     900:	4b93      	ldr	r3, [pc, #588]	; (b50 <vCommandConsoleTask+0x264>)
     902:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xResetCommand );
     904:	4b94      	ldr	r3, [pc, #592]	; (b58 <vCommandConsoleTask+0x26c>)
     906:	0018      	movs	r0, r3
     908:	4b91      	ldr	r3, [pc, #580]	; (b50 <vCommandConsoleTask+0x264>)
     90a:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
     90c:	4b93      	ldr	r3, [pc, #588]	; (b5c <vCommandConsoleTask+0x270>)
     90e:	0018      	movs	r0, r3
     910:	4b8f      	ldr	r3, [pc, #572]	; (b50 <vCommandConsoleTask+0x264>)
     912:	4798      	blx	r3

uint8_t cRxedChar[2], cInputIndex = 0;
     914:	2317      	movs	r3, #23
     916:	18fb      	adds	r3, r7, r3
     918:	2200      	movs	r2, #0
     91a:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
     91c:	4b90      	ldr	r3, [pc, #576]	; (b60 <vCommandConsoleTask+0x274>)
     91e:	0018      	movs	r0, r3
     920:	4b90      	ldr	r3, [pc, #576]	; (b64 <vCommandConsoleTask+0x278>)
     922:	4798      	blx	r3

	//Any semaphores/mutexes/etc you needed to be initialized, you can do them here
	cliCharReadySemaphore = xSemaphoreCreateBinary();
     924:	2203      	movs	r2, #3
     926:	2100      	movs	r1, #0
     928:	2001      	movs	r0, #1
     92a:	4b8f      	ldr	r3, [pc, #572]	; (b68 <vCommandConsoleTask+0x27c>)
     92c:	4798      	blx	r3
     92e:	0002      	movs	r2, r0
     930:	4b8e      	ldr	r3, [pc, #568]	; (b6c <vCommandConsoleTask+0x280>)
     932:	601a      	str	r2, [r3, #0]
	if(cliCharReadySemaphore == NULL)
     934:	4b8d      	ldr	r3, [pc, #564]	; (b6c <vCommandConsoleTask+0x280>)
     936:	681b      	ldr	r3, [r3, #0]
     938:	2b00      	cmp	r3, #0
     93a:	d107      	bne.n	94c <vCommandConsoleTask+0x60>
	{
		LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
     93c:	4b8c      	ldr	r3, [pc, #560]	; (b70 <vCommandConsoleTask+0x284>)
     93e:	0019      	movs	r1, r3
     940:	2003      	movs	r0, #3
     942:	4b8c      	ldr	r3, [pc, #560]	; (b74 <vCommandConsoleTask+0x288>)
     944:	4798      	blx	r3
		vTaskSuspend( NULL );
     946:	2000      	movs	r0, #0
     948:	4b8b      	ldr	r3, [pc, #556]	; (b78 <vCommandConsoleTask+0x28c>)
     94a:	4798      	blx	r3


    for( ;; )
    {

	FreeRTOS_read(&cRxedChar[0]);
     94c:	230c      	movs	r3, #12
     94e:	18fb      	adds	r3, r7, r3
     950:	0018      	movs	r0, r3
     952:	4b8a      	ldr	r3, [pc, #552]	; (b7c <vCommandConsoleTask+0x290>)
     954:	4798      	blx	r3

	if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
     956:	230c      	movs	r3, #12
     958:	18fb      	adds	r3, r7, r3
     95a:	781b      	ldrb	r3, [r3, #0]
     95c:	2b0a      	cmp	r3, #10
     95e:	d004      	beq.n	96a <vCommandConsoleTask+0x7e>
     960:	230c      	movs	r3, #12
     962:	18fb      	adds	r3, r7, r3
     964:	781b      	ldrb	r3, [r3, #0]
     966:	2b0d      	cmp	r3, #13
     968:	d137      	bne.n	9da <vCommandConsoleTask+0xee>
        {
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString("\r\n");
     96a:	4b85      	ldr	r3, [pc, #532]	; (b80 <vCommandConsoleTask+0x294>)
     96c:	0018      	movs	r0, r3
     96e:	4b7d      	ldr	r3, [pc, #500]	; (b64 <vCommandConsoleTask+0x278>)
     970:	4798      	blx	r3
			//Copy for last command
			isEscapeCode = false; pcEscapeCodePos = 0;
     972:	4b84      	ldr	r3, [pc, #528]	; (b84 <vCommandConsoleTask+0x298>)
     974:	2200      	movs	r2, #0
     976:	701a      	strb	r2, [r3, #0]
     978:	4b83      	ldr	r3, [pc, #524]	; (b88 <vCommandConsoleTask+0x29c>)
     97a:	2200      	movs	r2, #0
     97c:	701a      	strb	r2, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
     97e:	4983      	ldr	r1, [pc, #524]	; (b8c <vCommandConsoleTask+0x2a0>)
     980:	4b83      	ldr	r3, [pc, #524]	; (b90 <vCommandConsoleTask+0x2a4>)
     982:	2231      	movs	r2, #49	; 0x31
     984:	0018      	movs	r0, r3
     986:	4b83      	ldr	r3, [pc, #524]	; (b94 <vCommandConsoleTask+0x2a8>)
     988:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
     98a:	4b81      	ldr	r3, [pc, #516]	; (b90 <vCommandConsoleTask+0x2a4>)
     98c:	2231      	movs	r2, #49	; 0x31
     98e:	2100      	movs	r1, #0
     990:	5499      	strb	r1, [r3, r2]
            do
            {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
     992:	4981      	ldr	r1, [pc, #516]	; (b98 <vCommandConsoleTask+0x2ac>)
     994:	4b7d      	ldr	r3, [pc, #500]	; (b8c <vCommandConsoleTask+0x2a0>)
     996:	2264      	movs	r2, #100	; 0x64
     998:	0018      	movs	r0, r3
     99a:	4b80      	ldr	r3, [pc, #512]	; (b9c <vCommandConsoleTask+0x2b0>)
     99c:	4798      	blx	r3
     99e:	0003      	movs	r3, r0
     9a0:	613b      	str	r3, [r7, #16]
                              );

                /* Write the output generated by the command interpreter to the
                console. */
				//Ensure it is null terminated
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
     9a2:	4b7d      	ldr	r3, [pc, #500]	; (b98 <vCommandConsoleTask+0x2ac>)
     9a4:	2263      	movs	r2, #99	; 0x63
     9a6:	2100      	movs	r1, #0
     9a8:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
     9aa:	4b7b      	ldr	r3, [pc, #492]	; (b98 <vCommandConsoleTask+0x2ac>)
     9ac:	0018      	movs	r0, r3
     9ae:	4b6d      	ldr	r3, [pc, #436]	; (b64 <vCommandConsoleTask+0x278>)
     9b0:	4798      	blx	r3

            } while( xMoreDataToFollow != pdFALSE );
     9b2:	693b      	ldr	r3, [r7, #16]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d1ec      	bne.n	992 <vCommandConsoleTask+0xa6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
     9b8:	2317      	movs	r3, #23
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	2200      	movs	r2, #0
     9be:	701a      	strb	r2, [r3, #0]
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
     9c0:	4b72      	ldr	r3, [pc, #456]	; (b8c <vCommandConsoleTask+0x2a0>)
     9c2:	2232      	movs	r2, #50	; 0x32
     9c4:	2100      	movs	r1, #0
     9c6:	0018      	movs	r0, r3
     9c8:	4b75      	ldr	r3, [pc, #468]	; (ba0 <vCommandConsoleTask+0x2b4>)
     9ca:	4798      	blx	r3
			memset( pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
     9cc:	4b72      	ldr	r3, [pc, #456]	; (b98 <vCommandConsoleTask+0x2ac>)
     9ce:	2264      	movs	r2, #100	; 0x64
     9d0:	2100      	movs	r1, #0
     9d2:	0018      	movs	r0, r3
     9d4:	4b72      	ldr	r3, [pc, #456]	; (ba0 <vCommandConsoleTask+0x2b4>)
     9d6:	4798      	blx	r3
     9d8:	e0b6      	b.n	b48 <vCommandConsoleTask+0x25c>
        {
		            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */
		
			if (true == isEscapeCode) {
     9da:	4b6a      	ldr	r3, [pc, #424]	; (b84 <vCommandConsoleTask+0x298>)
     9dc:	781b      	ldrb	r3, [r3, #0]
     9de:	2b00      	cmp	r3, #0
     9e0:	d059      	beq.n	a96 <vCommandConsoleTask+0x1aa>

				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
     9e2:	4b69      	ldr	r3, [pc, #420]	; (b88 <vCommandConsoleTask+0x29c>)
     9e4:	781b      	ldrb	r3, [r3, #0]
     9e6:	2b03      	cmp	r3, #3
     9e8:	d80c      	bhi.n	a04 <vCommandConsoleTask+0x118>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
     9ea:	4b67      	ldr	r3, [pc, #412]	; (b88 <vCommandConsoleTask+0x29c>)
     9ec:	781b      	ldrb	r3, [r3, #0]
     9ee:	1c5a      	adds	r2, r3, #1
     9f0:	b2d1      	uxtb	r1, r2
     9f2:	4a65      	ldr	r2, [pc, #404]	; (b88 <vCommandConsoleTask+0x29c>)
     9f4:	7011      	strb	r1, [r2, #0]
     9f6:	001a      	movs	r2, r3
     9f8:	230c      	movs	r3, #12
     9fa:	18fb      	adds	r3, r7, r3
     9fc:	7819      	ldrb	r1, [r3, #0]
     9fe:	4b69      	ldr	r3, [pc, #420]	; (ba4 <vCommandConsoleTask+0x2b8>)
     a00:	5499      	strb	r1, [r3, r2]
     a02:	e005      	b.n	a10 <vCommandConsoleTask+0x124>
				}
				else {
					isEscapeCode = false; pcEscapeCodePos = 0;
     a04:	4b5f      	ldr	r3, [pc, #380]	; (b84 <vCommandConsoleTask+0x298>)
     a06:	2200      	movs	r2, #0
     a08:	701a      	strb	r2, [r3, #0]
     a0a:	4b5f      	ldr	r3, [pc, #380]	; (b88 <vCommandConsoleTask+0x29c>)
     a0c:	2200      	movs	r2, #0
     a0e:	701a      	strb	r2, [r3, #0]
				}
			
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
     a10:	4b5d      	ldr	r3, [pc, #372]	; (b88 <vCommandConsoleTask+0x29c>)
     a12:	781b      	ldrb	r3, [r3, #0]
     a14:	2b01      	cmp	r3, #1
     a16:	d999      	bls.n	94c <vCommandConsoleTask+0x60>
				
					// UP ARROW SHOW LAST COMMAND
					if(strcasecmp(pcEscapeCodes, "oa"))	{
     a18:	4a63      	ldr	r2, [pc, #396]	; (ba8 <vCommandConsoleTask+0x2bc>)
     a1a:	4b62      	ldr	r3, [pc, #392]	; (ba4 <vCommandConsoleTask+0x2b8>)
     a1c:	0011      	movs	r1, r2
     a1e:	0018      	movs	r0, r3
     a20:	4b62      	ldr	r3, [pc, #392]	; (bac <vCommandConsoleTask+0x2c0>)
     a22:	4798      	blx	r3
     a24:	1e03      	subs	r3, r0, #0
     a26:	d02f      	beq.n	a88 <vCommandConsoleTask+0x19c>
                            /// Delete current line and add prompt (">")
                            sprintf(pcInputString, "%c[2K\r>", 27);
     a28:	4961      	ldr	r1, [pc, #388]	; (bb0 <vCommandConsoleTask+0x2c4>)
     a2a:	4b58      	ldr	r3, [pc, #352]	; (b8c <vCommandConsoleTask+0x2a0>)
     a2c:	221b      	movs	r2, #27
     a2e:	0018      	movs	r0, r3
     a30:	4b60      	ldr	r3, [pc, #384]	; (bb4 <vCommandConsoleTask+0x2c8>)
     a32:	4798      	blx	r3
				            SerialConsoleWriteString((char*)pcInputString);
     a34:	4b55      	ldr	r3, [pc, #340]	; (b8c <vCommandConsoleTask+0x2a0>)
     a36:	0018      	movs	r0, r3
     a38:	4b4a      	ldr	r3, [pc, #296]	; (b64 <vCommandConsoleTask+0x278>)
     a3a:	4798      	blx	r3
                            /// Clear input buffer
                            cInputIndex = 0;
     a3c:	2317      	movs	r3, #23
     a3e:	18fb      	adds	r3, r7, r3
     a40:	2200      	movs	r2, #0
     a42:	701a      	strb	r2, [r3, #0]
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
     a44:	4b51      	ldr	r3, [pc, #324]	; (b8c <vCommandConsoleTask+0x2a0>)
     a46:	2232      	movs	r2, #50	; 0x32
     a48:	2100      	movs	r1, #0
     a4a:	0018      	movs	r0, r3
     a4c:	4b54      	ldr	r3, [pc, #336]	; (ba0 <vCommandConsoleTask+0x2b4>)
     a4e:	4798      	blx	r3
                        /// Send last command
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
     a50:	494f      	ldr	r1, [pc, #316]	; (b90 <vCommandConsoleTask+0x2a4>)
     a52:	4b4e      	ldr	r3, [pc, #312]	; (b8c <vCommandConsoleTask+0x2a0>)
     a54:	2231      	movs	r2, #49	; 0x31
     a56:	0018      	movs	r0, r3
     a58:	4b4e      	ldr	r3, [pc, #312]	; (b94 <vCommandConsoleTask+0x2a8>)
     a5a:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
     a5c:	4b4b      	ldr	r3, [pc, #300]	; (b8c <vCommandConsoleTask+0x2a0>)
     a5e:	0018      	movs	r0, r3
     a60:	4b55      	ldr	r3, [pc, #340]	; (bb8 <vCommandConsoleTask+0x2cc>)
     a62:	4798      	blx	r3
     a64:	0003      	movs	r3, r0
     a66:	2b30      	cmp	r3, #48	; 0x30
     a68:	d806      	bhi.n	a78 <vCommandConsoleTask+0x18c>
     a6a:	4b49      	ldr	r3, [pc, #292]	; (b90 <vCommandConsoleTask+0x2a4>)
     a6c:	0018      	movs	r0, r3
     a6e:	4b52      	ldr	r3, [pc, #328]	; (bb8 <vCommandConsoleTask+0x2cc>)
     a70:	4798      	blx	r3
     a72:	0003      	movs	r3, r0
     a74:	b2da      	uxtb	r2, r3
     a76:	e000      	b.n	a7a <vCommandConsoleTask+0x18e>
     a78:	2231      	movs	r2, #49	; 0x31
     a7a:	2317      	movs	r3, #23
     a7c:	18fb      	adds	r3, r7, r3
     a7e:	701a      	strb	r2, [r3, #0]
						SerialConsoleWriteString(pcInputString);
     a80:	4b42      	ldr	r3, [pc, #264]	; (b8c <vCommandConsoleTask+0x2a0>)
     a82:	0018      	movs	r0, r3
     a84:	4b37      	ldr	r3, [pc, #220]	; (b64 <vCommandConsoleTask+0x278>)
     a86:	4798      	blx	r3
					}
				
					isEscapeCode = false; pcEscapeCodePos = 0;
     a88:	4b3e      	ldr	r3, [pc, #248]	; (b84 <vCommandConsoleTask+0x298>)
     a8a:	2200      	movs	r2, #0
     a8c:	701a      	strb	r2, [r3, #0]
     a8e:	4b3e      	ldr	r3, [pc, #248]	; (b88 <vCommandConsoleTask+0x29c>)
     a90:	2200      	movs	r2, #0
     a92:	701a      	strb	r2, [r3, #0]
     a94:	e75a      	b.n	94c <vCommandConsoleTask+0x60>
			}
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if( cRxedChar[0] == '\r' )
     a96:	230c      	movs	r3, #12
     a98:	18fb      	adds	r3, r7, r3
     a9a:	781b      	ldrb	r3, [r3, #0]
     a9c:	2b0d      	cmp	r3, #13
     a9e:	d100      	bne.n	aa2 <vCommandConsoleTask+0x1b6>
     aa0:	e754      	b.n	94c <vCommandConsoleTask+0x60>
            {
                /* Ignore carriage returns. */
            }
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
     aa2:	230c      	movs	r3, #12
     aa4:	18fb      	adds	r3, r7, r3
     aa6:	781b      	ldrb	r3, [r3, #0]
     aa8:	2b08      	cmp	r3, #8
     aaa:	d004      	beq.n	ab6 <vCommandConsoleTask+0x1ca>
     aac:	230c      	movs	r3, #12
     aae:	18fb      	adds	r3, r7, r3
     ab0:	781b      	ldrb	r3, [r3, #0]
     ab2:	2b7f      	cmp	r3, #127	; 0x7f
     ab4:	d11c      	bne.n	af0 <vCommandConsoleTask+0x204>
            {
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
     ab6:	2308      	movs	r3, #8
     ab8:	18fb      	adds	r3, r7, r3
     aba:	4a40      	ldr	r2, [pc, #256]	; (bbc <vCommandConsoleTask+0x2d0>)
     abc:	6812      	ldr	r2, [r2, #0]
     abe:	601a      	str	r2, [r3, #0]
				SerialConsoleWriteString(erase);
     ac0:	2308      	movs	r3, #8
     ac2:	18fb      	adds	r3, r7, r3
     ac4:	0018      	movs	r0, r3
     ac6:	4b27      	ldr	r3, [pc, #156]	; (b64 <vCommandConsoleTask+0x278>)
     ac8:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
     aca:	2317      	movs	r3, #23
     acc:	18fb      	adds	r3, r7, r3
     ace:	781b      	ldrb	r3, [r3, #0]
     ad0:	2b00      	cmp	r3, #0
     ad2:	d038      	beq.n	b46 <vCommandConsoleTask+0x25a>
                {
                    cInputIndex--;
     ad4:	2317      	movs	r3, #23
     ad6:	18fb      	adds	r3, r7, r3
     ad8:	781a      	ldrb	r2, [r3, #0]
     ada:	2317      	movs	r3, #23
     adc:	18fb      	adds	r3, r7, r3
     ade:	3a01      	subs	r2, #1
     ae0:	701a      	strb	r2, [r3, #0]
                    pcInputString[ cInputIndex ] = 0;
     ae2:	2317      	movs	r3, #23
     ae4:	18fb      	adds	r3, r7, r3
     ae6:	781b      	ldrb	r3, [r3, #0]
     ae8:	4a28      	ldr	r2, [pc, #160]	; (b8c <vCommandConsoleTask+0x2a0>)
     aea:	2100      	movs	r1, #0
     aec:	54d1      	strb	r1, [r2, r3]
            {
     aee:	e02a      	b.n	b46 <vCommandConsoleTask+0x25a>
                }
            }
			// ESC
			else if( cRxedChar[0] == ASCII_ESC) {
     af0:	230c      	movs	r3, #12
     af2:	18fb      	adds	r3, r7, r3
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	2b1b      	cmp	r3, #27
     af8:	d106      	bne.n	b08 <vCommandConsoleTask+0x21c>
				isEscapeCode = true; //Next characters will be code arguments
     afa:	4b22      	ldr	r3, [pc, #136]	; (b84 <vCommandConsoleTask+0x298>)
     afc:	2201      	movs	r2, #1
     afe:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
     b00:	4b21      	ldr	r3, [pc, #132]	; (b88 <vCommandConsoleTask+0x29c>)
     b02:	2200      	movs	r2, #0
     b04:	701a      	strb	r2, [r3, #0]
     b06:	e721      	b.n	94c <vCommandConsoleTask+0x60>
            {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
     b08:	2317      	movs	r3, #23
     b0a:	18fb      	adds	r3, r7, r3
     b0c:	781b      	ldrb	r3, [r3, #0]
     b0e:	2b31      	cmp	r3, #49	; 0x31
     b10:	d80f      	bhi.n	b32 <vCommandConsoleTask+0x246>
                {
                    pcInputString[ cInputIndex ] = cRxedChar[0];
     b12:	2317      	movs	r3, #23
     b14:	18fb      	adds	r3, r7, r3
     b16:	781b      	ldrb	r3, [r3, #0]
     b18:	220c      	movs	r2, #12
     b1a:	18ba      	adds	r2, r7, r2
     b1c:	7812      	ldrb	r2, [r2, #0]
     b1e:	b251      	sxtb	r1, r2
     b20:	4a1a      	ldr	r2, [pc, #104]	; (b8c <vCommandConsoleTask+0x2a0>)
     b22:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
     b24:	2317      	movs	r3, #23
     b26:	18fb      	adds	r3, r7, r3
     b28:	781a      	ldrb	r2, [r3, #0]
     b2a:	2317      	movs	r3, #23
     b2c:	18fb      	adds	r3, r7, r3
     b2e:	3201      	adds	r2, #1
     b30:	701a      	strb	r2, [r3, #0]
                }

					//Order Echo
					cRxedChar[1] = 0;
     b32:	230c      	movs	r3, #12
     b34:	18fb      	adds	r3, r7, r3
     b36:	2200      	movs	r2, #0
     b38:	705a      	strb	r2, [r3, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
     b3a:	230c      	movs	r3, #12
     b3c:	18fb      	adds	r3, r7, r3
     b3e:	0018      	movs	r0, r3
     b40:	4b08      	ldr	r3, [pc, #32]	; (b64 <vCommandConsoleTask+0x278>)
     b42:	4798      	blx	r3
     b44:	e702      	b.n	94c <vCommandConsoleTask+0x60>
            {
     b46:	46c0      	nop			; (mov r8, r8)
	FreeRTOS_read(&cRxedChar[0]);
     b48:	e700      	b.n	94c <vCommandConsoleTask+0x60>
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	0000efa4 	.word	0x0000efa4
     b50:	00003701 	.word	0x00003701
     b54:	0000efd4 	.word	0x0000efd4
     b58:	0000efb4 	.word	0x0000efb4
     b5c:	0000efc4 	.word	0x0000efc4
     b60:	0000ed08 	.word	0x0000ed08
     b64:	000093b9 	.word	0x000093b9
     b68:	00005b15 	.word	0x00005b15
     b6c:	200038a8 	.word	0x200038a8
     b70:	0000ee0c 	.word	0x0000ee0c
     b74:	000094a5 	.word	0x000094a5
     b78:	000078f5 	.word	0x000078f5
     b7c:	00000bc1 	.word	0x00000bc1
     b80:	0000ee2c 	.word	0x0000ee2c
     b84:	2000022c 	.word	0x2000022c
     b88:	2000022d 	.word	0x2000022d
     b8c:	20000264 	.word	0x20000264
     b90:	20000230 	.word	0x20000230
     b94:	0000e4a9 	.word	0x0000e4a9
     b98:	20000298 	.word	0x20000298
     b9c:	00003771 	.word	0x00003771
     ba0:	0000e20f 	.word	0x0000e20f
     ba4:	200002fc 	.word	0x200002fc
     ba8:	0000ee30 	.word	0x0000ee30
     bac:	0000e43d 	.word	0x0000e43d
     bb0:	0000ee34 	.word	0x0000ee34
     bb4:	0000e3f9 	.word	0x0000e3f9
     bb8:	0000e479 	.word	0x0000e479
     bbc:	0000ee3c 	.word	0x0000ee3c

00000bc0 <FreeRTOS_read>:
* @brief		This function block the thread unless we received a character
* @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
* @note
*****************************************************************************/
static void FreeRTOS_read(char* character)
{
     bc0:	b580      	push	{r7, lr}
     bc2:	b084      	sub	sp, #16
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]


//We check if there are more characters in the buffer that arrived since the last time
//This function returns -1 if the buffer is empty, other value otherwise
int ret = SerialConsoleReadCharacter(character);
     bc8:	687b      	ldr	r3, [r7, #4]
     bca:	0018      	movs	r0, r3
     bcc:	4b0b      	ldr	r3, [pc, #44]	; (bfc <FreeRTOS_read+0x3c>)
     bce:	4798      	blx	r3
     bd0:	0003      	movs	r3, r0
     bd2:	60fb      	str	r3, [r7, #12]


if(ret == -1)
     bd4:	68fb      	ldr	r3, [r7, #12]
     bd6:	3301      	adds	r3, #1
     bd8:	d10b      	bne.n	bf2 <FreeRTOS_read+0x32>
{
	//there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
	xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
     bda:	4b09      	ldr	r3, [pc, #36]	; (c00 <FreeRTOS_read+0x40>)
     bdc:	681a      	ldr	r2, [r3, #0]
     bde:	2301      	movs	r3, #1
     be0:	425b      	negs	r3, r3
     be2:	0019      	movs	r1, r3
     be4:	0010      	movs	r0, r2
     be6:	4b07      	ldr	r3, [pc, #28]	; (c04 <FreeRTOS_read+0x44>)
     be8:	4798      	blx	r3

	//If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
	SerialConsoleReadCharacter(character);
     bea:	687b      	ldr	r3, [r7, #4]
     bec:	0018      	movs	r0, r3
     bee:	4b03      	ldr	r3, [pc, #12]	; (bfc <FreeRTOS_read+0x3c>)
     bf0:	4798      	blx	r3
}


}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	46bd      	mov	sp, r7
     bf6:	b004      	add	sp, #16
     bf8:	bd80      	pop	{r7, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	00009455 	.word	0x00009455
     c00:	200038a8 	.word	0x200038a8
     c04:	00006acd 	.word	0x00006acd

00000c08 <CliCharReadySemaphoreGiveFromISR>:
* @brief		Give cliCharReadySemaphore binary semaphore from an ISR
* @details		
* @note
*****************************************************************************/
void CliCharReadySemaphoreGiveFromISR(void)
{
     c08:	b580      	push	{r7, lr}
     c0a:	af00      	add	r7, sp, #0
	static BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
     c0c:	4b0a      	ldr	r3, [pc, #40]	; (c38 <CliCharReadySemaphoreGiveFromISR+0x30>)
     c0e:	2200      	movs	r2, #0
     c10:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR( cliCharReadySemaphore, &xHigherPriorityTaskWoken );
     c12:	4b0a      	ldr	r3, [pc, #40]	; (c3c <CliCharReadySemaphoreGiveFromISR+0x34>)
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	4a08      	ldr	r2, [pc, #32]	; (c38 <CliCharReadySemaphoreGiveFromISR+0x30>)
     c18:	0011      	movs	r1, r2
     c1a:	0018      	movs	r0, r3
     c1c:	4b08      	ldr	r3, [pc, #32]	; (c40 <CliCharReadySemaphoreGiveFromISR+0x38>)
     c1e:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     c20:	4b05      	ldr	r3, [pc, #20]	; (c38 <CliCharReadySemaphoreGiveFromISR+0x30>)
     c22:	681b      	ldr	r3, [r3, #0]
     c24:	2b00      	cmp	r3, #0
     c26:	d003      	beq.n	c30 <CliCharReadySemaphoreGiveFromISR+0x28>
     c28:	4b06      	ldr	r3, [pc, #24]	; (c44 <CliCharReadySemaphoreGiveFromISR+0x3c>)
     c2a:	2280      	movs	r2, #128	; 0x80
     c2c:	0552      	lsls	r2, r2, #21
     c2e:	601a      	str	r2, [r3, #0]
}
     c30:	46c0      	nop			; (mov r8, r8)
     c32:	46bd      	mov	sp, r7
     c34:	bd80      	pop	{r7, pc}
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	20000300 	.word	0x20000300
     c3c:	200038a8 	.word	0x200038a8
     c40:	00006445 	.word	0x00006445
     c44:	e000ed04 	.word	0xe000ed04

00000c48 <CLI_GetImuData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     c48:	b5b0      	push	{r4, r5, r7, lr}
     c4a:	b088      	sub	sp, #32
     c4c:	af02      	add	r7, sp, #8
     c4e:	60f8      	str	r0, [r7, #12]
     c50:	60b9      	str	r1, [r7, #8]
     c52:	607a      	str	r2, [r7, #4]
static int16_t  data_raw_acceleration[3];
static int16_t  data_raw_angular_rate;
static float acceleration_mg[3];
uint8_t reg;
stmdev_ctx_t *dev_ctx = GetImuStruct();
     c54:	4b30      	ldr	r3, [pc, #192]	; (d18 <CLI_GetImuData+0xd0>)
     c56:	4798      	blx	r3
     c58:	0003      	movs	r3, r0
     c5a:	617b      	str	r3, [r7, #20]


/* Read output only if new xl value is available */
lsm6dso_xl_flag_data_ready_get(GetImuStruct(), &reg);
     c5c:	4b2e      	ldr	r3, [pc, #184]	; (d18 <CLI_GetImuData+0xd0>)
     c5e:	4798      	blx	r3
     c60:	0002      	movs	r2, r0
     c62:	2313      	movs	r3, #19
     c64:	18fb      	adds	r3, r7, r3
     c66:	0019      	movs	r1, r3
     c68:	0010      	movs	r0, r2
     c6a:	4b2c      	ldr	r3, [pc, #176]	; (d1c <CLI_GetImuData+0xd4>)
     c6c:	4798      	blx	r3

if(reg){
     c6e:	2313      	movs	r3, #19
     c70:	18fb      	adds	r3, r7, r3
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	2b00      	cmp	r3, #0
     c76:	d043      	beq.n	d00 <CLI_GetImuData+0xb8>
	//original used raw_angular_rate, which is wrong. changed to data_raw_acceleration
	memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
     c78:	4b29      	ldr	r3, [pc, #164]	; (d20 <CLI_GetImuData+0xd8>)
     c7a:	2206      	movs	r2, #6
     c7c:	2100      	movs	r1, #0
     c7e:	0018      	movs	r0, r3
     c80:	4b28      	ldr	r3, [pc, #160]	; (d24 <CLI_GetImuData+0xdc>)
     c82:	4798      	blx	r3
      //lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
      lsm6dso_acceleration_raw_get(GetImuStruct(), data_raw_acceleration);
     c84:	4b24      	ldr	r3, [pc, #144]	; (d18 <CLI_GetImuData+0xd0>)
     c86:	4798      	blx	r3
     c88:	0002      	movs	r2, r0
     c8a:	4b25      	ldr	r3, [pc, #148]	; (d20 <CLI_GetImuData+0xd8>)
     c8c:	0019      	movs	r1, r3
     c8e:	0010      	movs	r0, r2
     c90:	4b25      	ldr	r3, [pc, #148]	; (d28 <CLI_GetImuData+0xe0>)
     c92:	4798      	blx	r3
      
	  acceleration_mg[0] =
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
     c94:	4b22      	ldr	r3, [pc, #136]	; (d20 <CLI_GetImuData+0xd8>)
     c96:	2200      	movs	r2, #0
     c98:	5e9b      	ldrsh	r3, [r3, r2]
     c9a:	0018      	movs	r0, r3
     c9c:	4b23      	ldr	r3, [pc, #140]	; (d2c <CLI_GetImuData+0xe4>)
     c9e:	4798      	blx	r3
     ca0:	1c02      	adds	r2, r0, #0
	  acceleration_mg[0] =
     ca2:	4b23      	ldr	r3, [pc, #140]	; (d30 <CLI_GetImuData+0xe8>)
     ca4:	601a      	str	r2, [r3, #0]
      acceleration_mg[1] =
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
     ca6:	4b1e      	ldr	r3, [pc, #120]	; (d20 <CLI_GetImuData+0xd8>)
     ca8:	2202      	movs	r2, #2
     caa:	5e9b      	ldrsh	r3, [r3, r2]
     cac:	0018      	movs	r0, r3
     cae:	4b1f      	ldr	r3, [pc, #124]	; (d2c <CLI_GetImuData+0xe4>)
     cb0:	4798      	blx	r3
     cb2:	1c02      	adds	r2, r0, #0
      acceleration_mg[1] =
     cb4:	4b1e      	ldr	r3, [pc, #120]	; (d30 <CLI_GetImuData+0xe8>)
     cb6:	605a      	str	r2, [r3, #4]
      acceleration_mg[2] =
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
     cb8:	4b19      	ldr	r3, [pc, #100]	; (d20 <CLI_GetImuData+0xd8>)
     cba:	2204      	movs	r2, #4
     cbc:	5e9b      	ldrsh	r3, [r3, r2]
     cbe:	0018      	movs	r0, r3
     cc0:	4b1a      	ldr	r3, [pc, #104]	; (d2c <CLI_GetImuData+0xe4>)
     cc2:	4798      	blx	r3
     cc4:	1c02      	adds	r2, r0, #0
      acceleration_mg[2] =
     cc6:	4b1a      	ldr	r3, [pc, #104]	; (d30 <CLI_GetImuData+0xe8>)
     cc8:	609a      	str	r2, [r3, #8]

	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
	(int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
     cca:	4b19      	ldr	r3, [pc, #100]	; (d30 <CLI_GetImuData+0xe8>)
     ccc:	681a      	ldr	r2, [r3, #0]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
     cce:	4b19      	ldr	r3, [pc, #100]	; (d34 <CLI_GetImuData+0xec>)
     cd0:	1c10      	adds	r0, r2, #0
     cd2:	4798      	blx	r3
     cd4:	0005      	movs	r5, r0
	(int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
     cd6:	4b16      	ldr	r3, [pc, #88]	; (d30 <CLI_GetImuData+0xe8>)
     cd8:	685a      	ldr	r2, [r3, #4]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
     cda:	4b16      	ldr	r3, [pc, #88]	; (d34 <CLI_GetImuData+0xec>)
     cdc:	1c10      	adds	r0, r2, #0
     cde:	4798      	blx	r3
     ce0:	0004      	movs	r4, r0
	(int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
     ce2:	4b13      	ldr	r3, [pc, #76]	; (d30 <CLI_GetImuData+0xe8>)
     ce4:	689a      	ldr	r2, [r3, #8]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
     ce6:	4b13      	ldr	r3, [pc, #76]	; (d34 <CLI_GetImuData+0xec>)
     ce8:	1c10      	adds	r0, r2, #0
     cea:	4798      	blx	r3
     cec:	0003      	movs	r3, r0
     cee:	4a12      	ldr	r2, [pc, #72]	; (d38 <CLI_GetImuData+0xf0>)
     cf0:	68b9      	ldr	r1, [r7, #8]
     cf2:	68f8      	ldr	r0, [r7, #12]
     cf4:	9301      	str	r3, [sp, #4]
     cf6:	9400      	str	r4, [sp, #0]
     cf8:	002b      	movs	r3, r5
     cfa:	4c10      	ldr	r4, [pc, #64]	; (d3c <CLI_GetImuData+0xf4>)
     cfc:	47a0      	blx	r4
     cfe:	e005      	b.n	d0c <CLI_GetImuData+0xc4>
}else
{
	snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
     d00:	4a0f      	ldr	r2, [pc, #60]	; (d40 <CLI_GetImuData+0xf8>)
     d02:	68b9      	ldr	r1, [r7, #8]
     d04:	68fb      	ldr	r3, [r7, #12]
     d06:	0018      	movs	r0, r3
     d08:	4b0c      	ldr	r3, [pc, #48]	; (d3c <CLI_GetImuData+0xf4>)
     d0a:	4798      	blx	r3
}
return pdFALSE;
     d0c:	2300      	movs	r3, #0
}
     d0e:	0018      	movs	r0, r3
     d10:	46bd      	mov	sp, r7
     d12:	b006      	add	sp, #24
     d14:	bdb0      	pop	{r4, r5, r7, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	000025e1 	.word	0x000025e1
     d1c:	00001fcd 	.word	0x00001fcd
     d20:	20000304 	.word	0x20000304
     d24:	0000e20f 	.word	0x0000e20f
     d28:	00002009 	.word	0x00002009
     d2c:	0000185d 	.word	0x0000185d
     d30:	2000030c 	.word	0x2000030c
     d34:	0000c7b1 	.word	0x0000c7b1
     d38:	0000ee40 	.word	0x0000ee40
     d3c:	0000e395 	.word	0x0000e395
     d40:	0000ee64 	.word	0x0000ee64

00000d44 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     d44:	b590      	push	{r4, r7, lr}
     d46:	b087      	sub	sp, #28
     d48:	af00      	add	r7, sp, #0
     d4a:	60f8      	str	r0, [r7, #12]
     d4c:	60b9      	str	r1, [r7, #8]
     d4e:	607a      	str	r2, [r7, #4]
	char clearScreen = ASCII_ESC;
     d50:	2317      	movs	r3, #23
     d52:	18fb      	adds	r3, r7, r3
     d54:	221b      	movs	r2, #27
     d56:	701a      	strb	r2, [r3, #0]
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
     d58:	2317      	movs	r3, #23
     d5a:	18fb      	adds	r3, r7, r3
     d5c:	781b      	ldrb	r3, [r3, #0]
     d5e:	4a08      	ldr	r2, [pc, #32]	; (d80 <xCliClearTerminalScreen+0x3c>)
     d60:	4808      	ldr	r0, [pc, #32]	; (d84 <xCliClearTerminalScreen+0x40>)
     d62:	210f      	movs	r1, #15
     d64:	4c08      	ldr	r4, [pc, #32]	; (d88 <xCliClearTerminalScreen+0x44>)
     d66:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
     d68:	4a06      	ldr	r2, [pc, #24]	; (d84 <xCliClearTerminalScreen+0x40>)
     d6a:	68b9      	ldr	r1, [r7, #8]
     d6c:	68fb      	ldr	r3, [r7, #12]
     d6e:	0018      	movs	r0, r3
     d70:	4b05      	ldr	r3, [pc, #20]	; (d88 <xCliClearTerminalScreen+0x44>)
     d72:	4798      	blx	r3
	return pdFALSE;
     d74:	2300      	movs	r3, #0
}
     d76:	0018      	movs	r0, r3
     d78:	46bd      	mov	sp, r7
     d7a:	b007      	add	sp, #28
     d7c:	bd90      	pop	{r4, r7, pc}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	0000ee78 	.word	0x0000ee78
     d84:	2000021c 	.word	0x2000021c
     d88:	0000e395 	.word	0x0000e395

00000d8c <CLI_ResetDevice>:


//Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     d8c:	b590      	push	{r4, r7, lr}
     d8e:	b087      	sub	sp, #28
     d90:	af00      	add	r7, sp, #0
     d92:	60f8      	str	r0, [r7, #12]
     d94:	60b9      	str	r1, [r7, #8]
     d96:	607a      	str	r2, [r7, #4]
	for (int i = 0; i<=15; i++) {
     d98:	2300      	movs	r3, #0
     d9a:	617b      	str	r3, [r7, #20]
     d9c:	e00b      	b.n	db6 <CLI_ResetDevice+0x2a>
		SeesawSetLed(i, 0, 0, 0);
     d9e:	697b      	ldr	r3, [r7, #20]
     da0:	b2d8      	uxtb	r0, r3
     da2:	2300      	movs	r3, #0
     da4:	2200      	movs	r2, #0
     da6:	2100      	movs	r1, #0
     da8:	4c08      	ldr	r4, [pc, #32]	; (dcc <CLI_ResetDevice+0x40>)
     daa:	47a0      	blx	r4
		SeesawOrderLedUpdate();
     dac:	4b08      	ldr	r3, [pc, #32]	; (dd0 <CLI_ResetDevice+0x44>)
     dae:	4798      	blx	r3
	for (int i = 0; i<=15; i++) {
     db0:	697b      	ldr	r3, [r7, #20]
     db2:	3301      	adds	r3, #1
     db4:	617b      	str	r3, [r7, #20]
     db6:	697b      	ldr	r3, [r7, #20]
     db8:	2b0f      	cmp	r3, #15
     dba:	ddf0      	ble.n	d9e <CLI_ResetDevice+0x12>
	}
	system_reset();
     dbc:	4b05      	ldr	r3, [pc, #20]	; (dd4 <CLI_ResetDevice+0x48>)
     dbe:	4798      	blx	r3
	//remove all on LEDs
	
	return pdFALSE;
     dc0:	2300      	movs	r3, #0
}
     dc2:	0018      	movs	r0, r3
     dc4:	46bd      	mov	sp, r7
     dc6:	b007      	add	sp, #28
     dc8:	bd90      	pop	{r4, r7, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	000029b9 	.word	0x000029b9
     dd0:	00002a8d 	.word	0x00002a8d
     dd4:	000008d9 	.word	0x000008d9

00000dd8 <CLI_NeotrellisSetLed>:
int Gval;
int Bval;
//int array to hold the ints from the command
int arr[10];
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     dd8:	b5b0      	push	{r4, r5, r7, lr}
     dda:	b08c      	sub	sp, #48	; 0x30
     ddc:	af04      	add	r7, sp, #16
     dde:	60f8      	str	r0, [r7, #12]
     de0:	60b9      	str	r1, [r7, #8]
     de2:	607a      	str	r2, [r7, #4]
	//snprintf(pcWriteBuffer,xWriteBufferLen, "Students to fill out!");
	//SerialConsoleWriteString(pcWriteBuffer);
	//add string to check buffer to get commands
	snprintf(stringCheckbuffer, xWriteBufferLen, "%s\r\n", pcCommandString);
     de4:	687b      	ldr	r3, [r7, #4]
     de6:	4a67      	ldr	r2, [pc, #412]	; (f84 <CLI_NeotrellisSetLed+0x1ac>)
     de8:	68b9      	ldr	r1, [r7, #8]
     dea:	4867      	ldr	r0, [pc, #412]	; (f88 <CLI_NeotrellisSetLed+0x1b0>)
     dec:	4c67      	ldr	r4, [pc, #412]	; (f8c <CLI_NeotrellisSetLed+0x1b4>)
     dee:	47a0      	blx	r4
	SerialConsoleWriteString(stringCheckbuffer);
     df0:	4b65      	ldr	r3, [pc, #404]	; (f88 <CLI_NeotrellisSetLed+0x1b0>)
     df2:	0018      	movs	r0, r3
     df4:	4b66      	ldr	r3, [pc, #408]	; (f90 <CLI_NeotrellisSetLed+0x1b8>)
     df6:	4798      	blx	r3

	char *p = stringCheckbuffer;
     df8:	4b63      	ldr	r3, [pc, #396]	; (f88 <CLI_NeotrellisSetLed+0x1b0>)
     dfa:	617b      	str	r3, [r7, #20]
	int i=0;
     dfc:	2300      	movs	r3, #0
     dfe:	61fb      	str	r3, [r7, #28]
	//loop through char p to get all ints
	while (*p) {
     e00:	e034      	b.n	e6c <CLI_NeotrellisSetLed+0x94>
		if (isdigit(*p)) {
     e02:	4b64      	ldr	r3, [pc, #400]	; (f94 <CLI_NeotrellisSetLed+0x1bc>)
     e04:	4798      	blx	r3
     e06:	0002      	movs	r2, r0
     e08:	697b      	ldr	r3, [r7, #20]
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	3301      	adds	r3, #1
     e0e:	18d3      	adds	r3, r2, r3
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	001a      	movs	r2, r3
     e14:	2304      	movs	r3, #4
     e16:	4013      	ands	r3, r2
     e18:	d01b      	beq.n	e52 <CLI_NeotrellisSetLed+0x7a>
			//extract int from string
			int val = strtol(p, &p, 10);
     e1a:	697b      	ldr	r3, [r7, #20]
     e1c:	2214      	movs	r2, #20
     e1e:	18b9      	adds	r1, r7, r2
     e20:	220a      	movs	r2, #10
     e22:	0018      	movs	r0, r3
     e24:	4b5c      	ldr	r3, [pc, #368]	; (f98 <CLI_NeotrellisSetLed+0x1c0>)
     e26:	4798      	blx	r3
     e28:	0003      	movs	r3, r0
     e2a:	61bb      	str	r3, [r7, #24]
			arr[i] = val;
     e2c:	4b5b      	ldr	r3, [pc, #364]	; (f9c <CLI_NeotrellisSetLed+0x1c4>)
     e2e:	69fa      	ldr	r2, [r7, #28]
     e30:	0092      	lsls	r2, r2, #2
     e32:	69b9      	ldr	r1, [r7, #24]
     e34:	50d1      	str	r1, [r2, r3]
			i++;
     e36:	69fb      	ldr	r3, [r7, #28]
     e38:	3301      	adds	r3, #1
     e3a:	61fb      	str	r3, [r7, #28]
			snprintf(checkerprint,64, "current p pointer #: %i\r\n", p);
     e3c:	697b      	ldr	r3, [r7, #20]
     e3e:	4a58      	ldr	r2, [pc, #352]	; (fa0 <CLI_NeotrellisSetLed+0x1c8>)
     e40:	4858      	ldr	r0, [pc, #352]	; (fa4 <CLI_NeotrellisSetLed+0x1cc>)
     e42:	2140      	movs	r1, #64	; 0x40
     e44:	4c51      	ldr	r4, [pc, #324]	; (f8c <CLI_NeotrellisSetLed+0x1b4>)
     e46:	47a0      	blx	r4
			SerialConsoleWriteString(checkerprint);
     e48:	4b56      	ldr	r3, [pc, #344]	; (fa4 <CLI_NeotrellisSetLed+0x1cc>)
     e4a:	0018      	movs	r0, r3
     e4c:	4b50      	ldr	r3, [pc, #320]	; (f90 <CLI_NeotrellisSetLed+0x1b8>)
     e4e:	4798      	blx	r3
     e50:	e00c      	b.n	e6c <CLI_NeotrellisSetLed+0x94>
			} 
		else {
			p++;
     e52:	697b      	ldr	r3, [r7, #20]
     e54:	3301      	adds	r3, #1
     e56:	617b      	str	r3, [r7, #20]
			snprintf(checkerprint,64, "current p pointer #: %i\r\n", p);
     e58:	697b      	ldr	r3, [r7, #20]
     e5a:	4a51      	ldr	r2, [pc, #324]	; (fa0 <CLI_NeotrellisSetLed+0x1c8>)
     e5c:	4851      	ldr	r0, [pc, #324]	; (fa4 <CLI_NeotrellisSetLed+0x1cc>)
     e5e:	2140      	movs	r1, #64	; 0x40
     e60:	4c4a      	ldr	r4, [pc, #296]	; (f8c <CLI_NeotrellisSetLed+0x1b4>)
     e62:	47a0      	blx	r4
			SerialConsoleWriteString(checkerprint);
     e64:	4b4f      	ldr	r3, [pc, #316]	; (fa4 <CLI_NeotrellisSetLed+0x1cc>)
     e66:	0018      	movs	r0, r3
     e68:	4b49      	ldr	r3, [pc, #292]	; (f90 <CLI_NeotrellisSetLed+0x1b8>)
     e6a:	4798      	blx	r3
	while (*p) {
     e6c:	697b      	ldr	r3, [r7, #20]
     e6e:	781b      	ldrb	r3, [r3, #0]
     e70:	2b00      	cmp	r3, #0
     e72:	d1c6      	bne.n	e02 <CLI_NeotrellisSetLed+0x2a>
		}
	}
	//save extracted ints into respective vars
	ledID = arr[0];
     e74:	4b49      	ldr	r3, [pc, #292]	; (f9c <CLI_NeotrellisSetLed+0x1c4>)
     e76:	681a      	ldr	r2, [r3, #0]
     e78:	4b4b      	ldr	r3, [pc, #300]	; (fa8 <CLI_NeotrellisSetLed+0x1d0>)
     e7a:	601a      	str	r2, [r3, #0]
	Rval = arr[1];
     e7c:	4b47      	ldr	r3, [pc, #284]	; (f9c <CLI_NeotrellisSetLed+0x1c4>)
     e7e:	685a      	ldr	r2, [r3, #4]
     e80:	4b4a      	ldr	r3, [pc, #296]	; (fac <CLI_NeotrellisSetLed+0x1d4>)
     e82:	601a      	str	r2, [r3, #0]
	Gval = arr[2];
     e84:	4b45      	ldr	r3, [pc, #276]	; (f9c <CLI_NeotrellisSetLed+0x1c4>)
     e86:	689a      	ldr	r2, [r3, #8]
     e88:	4b49      	ldr	r3, [pc, #292]	; (fb0 <CLI_NeotrellisSetLed+0x1d8>)
     e8a:	601a      	str	r2, [r3, #0]
	Bval = arr[3];
     e8c:	4b43      	ldr	r3, [pc, #268]	; (f9c <CLI_NeotrellisSetLed+0x1c4>)
     e8e:	68da      	ldr	r2, [r3, #12]
     e90:	4b48      	ldr	r3, [pc, #288]	; (fb4 <CLI_NeotrellisSetLed+0x1dc>)
     e92:	601a      	str	r2, [r3, #0]
	snprintf(checkerprint,64, "the saved param is: %i %i %i %i\r\n", ledID, Rval, Gval, Bval);
     e94:	4b44      	ldr	r3, [pc, #272]	; (fa8 <CLI_NeotrellisSetLed+0x1d0>)
     e96:	681d      	ldr	r5, [r3, #0]
     e98:	4b44      	ldr	r3, [pc, #272]	; (fac <CLI_NeotrellisSetLed+0x1d4>)
     e9a:	681a      	ldr	r2, [r3, #0]
     e9c:	4b44      	ldr	r3, [pc, #272]	; (fb0 <CLI_NeotrellisSetLed+0x1d8>)
     e9e:	6819      	ldr	r1, [r3, #0]
     ea0:	4b44      	ldr	r3, [pc, #272]	; (fb4 <CLI_NeotrellisSetLed+0x1dc>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	4c44      	ldr	r4, [pc, #272]	; (fb8 <CLI_NeotrellisSetLed+0x1e0>)
     ea6:	483f      	ldr	r0, [pc, #252]	; (fa4 <CLI_NeotrellisSetLed+0x1cc>)
     ea8:	9302      	str	r3, [sp, #8]
     eaa:	9101      	str	r1, [sp, #4]
     eac:	9200      	str	r2, [sp, #0]
     eae:	002b      	movs	r3, r5
     eb0:	0022      	movs	r2, r4
     eb2:	2140      	movs	r1, #64	; 0x40
     eb4:	4c35      	ldr	r4, [pc, #212]	; (f8c <CLI_NeotrellisSetLed+0x1b4>)
     eb6:	47a0      	blx	r4
	SerialConsoleWriteString(checkerprint);
     eb8:	4b3a      	ldr	r3, [pc, #232]	; (fa4 <CLI_NeotrellisSetLed+0x1cc>)
     eba:	0018      	movs	r0, r3
     ebc:	4b34      	ldr	r3, [pc, #208]	; (f90 <CLI_NeotrellisSetLed+0x1b8>)
     ebe:	4798      	blx	r3
	//do checker to see if any of the ints are out of bounds
	if (ledID < 0 && ledID > 15) {
     ec0:	4b39      	ldr	r3, [pc, #228]	; (fa8 <CLI_NeotrellisSetLed+0x1d0>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	2b00      	cmp	r3, #0
     ec6:	da0e      	bge.n	ee6 <CLI_NeotrellisSetLed+0x10e>
     ec8:	4b37      	ldr	r3, [pc, #220]	; (fa8 <CLI_NeotrellisSetLed+0x1d0>)
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	2b0f      	cmp	r3, #15
     ece:	dd0a      	ble.n	ee6 <CLI_NeotrellisSetLed+0x10e>
		snprintf(pcWriteBuffer,xWriteBufferLen, "LED ID (int) out of bounds! Need to be 0 to 15. \r\n");
     ed0:	4a3a      	ldr	r2, [pc, #232]	; (fbc <CLI_NeotrellisSetLed+0x1e4>)
     ed2:	68b9      	ldr	r1, [r7, #8]
     ed4:	68fb      	ldr	r3, [r7, #12]
     ed6:	0018      	movs	r0, r3
     ed8:	4b2c      	ldr	r3, [pc, #176]	; (f8c <CLI_NeotrellisSetLed+0x1b4>)
     eda:	4798      	blx	r3
		SerialConsoleWriteString(pcWriteBuffer);
     edc:	68fb      	ldr	r3, [r7, #12]
     ede:	0018      	movs	r0, r3
     ee0:	4b2b      	ldr	r3, [pc, #172]	; (f90 <CLI_NeotrellisSetLed+0x1b8>)
     ee2:	4798      	blx	r3
     ee4:	e048      	b.n	f78 <CLI_NeotrellisSetLed+0x1a0>
	}
	else if (Rval < 0 && Rval > 255) {
     ee6:	4b31      	ldr	r3, [pc, #196]	; (fac <CLI_NeotrellisSetLed+0x1d4>)
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	2b00      	cmp	r3, #0
     eec:	da0e      	bge.n	f0c <CLI_NeotrellisSetLed+0x134>
     eee:	4b2f      	ldr	r3, [pc, #188]	; (fac <CLI_NeotrellisSetLed+0x1d4>)
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	2bff      	cmp	r3, #255	; 0xff
     ef4:	dd0a      	ble.n	f0c <CLI_NeotrellisSetLed+0x134>
		snprintf(pcWriteBuffer,xWriteBufferLen, "R value (int) out of bounds! Need to be 0 to 255. \r\n");
     ef6:	4a32      	ldr	r2, [pc, #200]	; (fc0 <CLI_NeotrellisSetLed+0x1e8>)
     ef8:	68b9      	ldr	r1, [r7, #8]
     efa:	68fb      	ldr	r3, [r7, #12]
     efc:	0018      	movs	r0, r3
     efe:	4b23      	ldr	r3, [pc, #140]	; (f8c <CLI_NeotrellisSetLed+0x1b4>)
     f00:	4798      	blx	r3
		SerialConsoleWriteString(pcWriteBuffer);
     f02:	68fb      	ldr	r3, [r7, #12]
     f04:	0018      	movs	r0, r3
     f06:	4b22      	ldr	r3, [pc, #136]	; (f90 <CLI_NeotrellisSetLed+0x1b8>)
     f08:	4798      	blx	r3
     f0a:	e035      	b.n	f78 <CLI_NeotrellisSetLed+0x1a0>
	}
	else if (Gval < 0 && Gval > 255) {
     f0c:	4b28      	ldr	r3, [pc, #160]	; (fb0 <CLI_NeotrellisSetLed+0x1d8>)
     f0e:	681b      	ldr	r3, [r3, #0]
     f10:	2b00      	cmp	r3, #0
     f12:	da0e      	bge.n	f32 <CLI_NeotrellisSetLed+0x15a>
     f14:	4b26      	ldr	r3, [pc, #152]	; (fb0 <CLI_NeotrellisSetLed+0x1d8>)
     f16:	681b      	ldr	r3, [r3, #0]
     f18:	2bff      	cmp	r3, #255	; 0xff
     f1a:	dd0a      	ble.n	f32 <CLI_NeotrellisSetLed+0x15a>
		snprintf(pcWriteBuffer,xWriteBufferLen, "G value (int) out of bounds! Need to be 0 to 255. \r\n");
     f1c:	4a29      	ldr	r2, [pc, #164]	; (fc4 <CLI_NeotrellisSetLed+0x1ec>)
     f1e:	68b9      	ldr	r1, [r7, #8]
     f20:	68fb      	ldr	r3, [r7, #12]
     f22:	0018      	movs	r0, r3
     f24:	4b19      	ldr	r3, [pc, #100]	; (f8c <CLI_NeotrellisSetLed+0x1b4>)
     f26:	4798      	blx	r3
		SerialConsoleWriteString(pcWriteBuffer);
     f28:	68fb      	ldr	r3, [r7, #12]
     f2a:	0018      	movs	r0, r3
     f2c:	4b18      	ldr	r3, [pc, #96]	; (f90 <CLI_NeotrellisSetLed+0x1b8>)
     f2e:	4798      	blx	r3
     f30:	e022      	b.n	f78 <CLI_NeotrellisSetLed+0x1a0>
	}
	else if (Bval < 0 && Bval > 255) {
     f32:	4b20      	ldr	r3, [pc, #128]	; (fb4 <CLI_NeotrellisSetLed+0x1dc>)
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	2b00      	cmp	r3, #0
     f38:	da0e      	bge.n	f58 <CLI_NeotrellisSetLed+0x180>
     f3a:	4b1e      	ldr	r3, [pc, #120]	; (fb4 <CLI_NeotrellisSetLed+0x1dc>)
     f3c:	681b      	ldr	r3, [r3, #0]
     f3e:	2bff      	cmp	r3, #255	; 0xff
     f40:	dd0a      	ble.n	f58 <CLI_NeotrellisSetLed+0x180>
		snprintf(pcWriteBuffer,xWriteBufferLen, "B value (int) out of bounds! Need to be 0 to 255. \r\n");
     f42:	4a21      	ldr	r2, [pc, #132]	; (fc8 <CLI_NeotrellisSetLed+0x1f0>)
     f44:	68b9      	ldr	r1, [r7, #8]
     f46:	68fb      	ldr	r3, [r7, #12]
     f48:	0018      	movs	r0, r3
     f4a:	4b10      	ldr	r3, [pc, #64]	; (f8c <CLI_NeotrellisSetLed+0x1b4>)
     f4c:	4798      	blx	r3
		SerialConsoleWriteString(pcWriteBuffer);
     f4e:	68fb      	ldr	r3, [r7, #12]
     f50:	0018      	movs	r0, r3
     f52:	4b0f      	ldr	r3, [pc, #60]	; (f90 <CLI_NeotrellisSetLed+0x1b8>)
     f54:	4798      	blx	r3
     f56:	e00f      	b.n	f78 <CLI_NeotrellisSetLed+0x1a0>
	}
	//if not out of bounds, set the LED accordingly
	else {
		SeesawSetLed(ledID, Rval, Gval, Bval);
     f58:	4b13      	ldr	r3, [pc, #76]	; (fa8 <CLI_NeotrellisSetLed+0x1d0>)
     f5a:	681b      	ldr	r3, [r3, #0]
     f5c:	b2d8      	uxtb	r0, r3
     f5e:	4b13      	ldr	r3, [pc, #76]	; (fac <CLI_NeotrellisSetLed+0x1d4>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	b2d9      	uxtb	r1, r3
     f64:	4b12      	ldr	r3, [pc, #72]	; (fb0 <CLI_NeotrellisSetLed+0x1d8>)
     f66:	681b      	ldr	r3, [r3, #0]
     f68:	b2da      	uxtb	r2, r3
     f6a:	4b12      	ldr	r3, [pc, #72]	; (fb4 <CLI_NeotrellisSetLed+0x1dc>)
     f6c:	681b      	ldr	r3, [r3, #0]
     f6e:	b2db      	uxtb	r3, r3
     f70:	4c16      	ldr	r4, [pc, #88]	; (fcc <CLI_NeotrellisSetLed+0x1f4>)
     f72:	47a0      	blx	r4
		SeesawOrderLedUpdate();
     f74:	4b16      	ldr	r3, [pc, #88]	; (fd0 <CLI_NeotrellisSetLed+0x1f8>)
     f76:	4798      	blx	r3
	}


	return pdFALSE;
     f78:	2300      	movs	r3, #0
}
     f7a:	0018      	movs	r0, r3
     f7c:	46bd      	mov	sp, r7
     f7e:	b008      	add	sp, #32
     f80:	bdb0      	pop	{r4, r5, r7, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	0000ee80 	.word	0x0000ee80
     f88:	200038ac 	.word	0x200038ac
     f8c:	0000e395 	.word	0x0000e395
     f90:	000093b9 	.word	0x000093b9
     f94:	0000e1a9 	.word	0x0000e1a9
     f98:	0000e5e1 	.word	0x0000e5e1
     f9c:	20003878 	.word	0x20003878
     fa0:	0000ee88 	.word	0x0000ee88
     fa4:	200038f4 	.word	0x200038f4
     fa8:	200038a0 	.word	0x200038a0
     fac:	200038ec 	.word	0x200038ec
     fb0:	200038f0 	.word	0x200038f0
     fb4:	200038a4 	.word	0x200038a4
     fb8:	0000eea4 	.word	0x0000eea4
     fbc:	0000eec8 	.word	0x0000eec8
     fc0:	0000eefc 	.word	0x0000eefc
     fc4:	0000ef34 	.word	0x0000ef34
     fc8:	0000ef6c 	.word	0x0000ef6c
     fcc:	000029b9 	.word	0x000029b9
     fd0:	00002a8d 	.word	0x00002a8d

00000fd4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     fd4:	b580      	push	{r7, lr}
     fd6:	b082      	sub	sp, #8
     fd8:	af00      	add	r7, sp, #0
     fda:	0002      	movs	r2, r0
     fdc:	1dfb      	adds	r3, r7, #7
     fde:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     fe0:	4b06      	ldr	r3, [pc, #24]	; (ffc <system_interrupt_enable+0x28>)
     fe2:	1dfa      	adds	r2, r7, #7
     fe4:	7812      	ldrb	r2, [r2, #0]
     fe6:	0011      	movs	r1, r2
     fe8:	221f      	movs	r2, #31
     fea:	400a      	ands	r2, r1
     fec:	2101      	movs	r1, #1
     fee:	4091      	lsls	r1, r2
     ff0:	000a      	movs	r2, r1
     ff2:	601a      	str	r2, [r3, #0]
}
     ff4:	46c0      	nop			; (mov r8, r8)
     ff6:	46bd      	mov	sp, r7
     ff8:	b002      	add	sp, #8
     ffa:	bd80      	pop	{r7, pc}
     ffc:	e000e100 	.word	0xe000e100

00001000 <i2c_master_is_syncing>:
{
    1000:	b580      	push	{r7, lr}
    1002:	b084      	sub	sp, #16
    1004:	af00      	add	r7, sp, #0
    1006:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    100e:	68fb      	ldr	r3, [r7, #12]
    1010:	69db      	ldr	r3, [r3, #28]
    1012:	2207      	movs	r2, #7
    1014:	4013      	ands	r3, r2
    1016:	1e5a      	subs	r2, r3, #1
    1018:	4193      	sbcs	r3, r2
    101a:	b2db      	uxtb	r3, r3
}
    101c:	0018      	movs	r0, r3
    101e:	46bd      	mov	sp, r7
    1020:	b004      	add	sp, #16
    1022:	bd80      	pop	{r7, pc}

00001024 <_i2c_master_wait_for_sync>:
{
    1024:	b580      	push	{r7, lr}
    1026:	b082      	sub	sp, #8
    1028:	af00      	add	r7, sp, #0
    102a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    102c:	46c0      	nop			; (mov r8, r8)
    102e:	687b      	ldr	r3, [r7, #4]
    1030:	0018      	movs	r0, r3
    1032:	4b04      	ldr	r3, [pc, #16]	; (1044 <_i2c_master_wait_for_sync+0x20>)
    1034:	4798      	blx	r3
    1036:	1e03      	subs	r3, r0, #0
    1038:	d1f9      	bne.n	102e <_i2c_master_wait_for_sync+0xa>
}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	46bd      	mov	sp, r7
    103e:	b002      	add	sp, #8
    1040:	bd80      	pop	{r7, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	00001001 	.word	0x00001001

00001048 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    1048:	b580      	push	{r7, lr}
    104a:	b082      	sub	sp, #8
    104c:	af00      	add	r7, sp, #0
    104e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1050:	687b      	ldr	r3, [r7, #4]
    1052:	2264      	movs	r2, #100	; 0x64
    1054:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	4a1b      	ldr	r2, [pc, #108]	; (10c8 <i2c_master_get_config_defaults+0x80>)
    105a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    105c:	687b      	ldr	r3, [r7, #4]
    105e:	2200      	movs	r2, #0
    1060:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1062:	687b      	ldr	r3, [r7, #4]
    1064:	2200      	movs	r2, #0
    1066:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	2200      	movs	r2, #0
    106c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    106e:	687b      	ldr	r3, [r7, #4]
    1070:	2280      	movs	r2, #128	; 0x80
    1072:	0392      	lsls	r2, r2, #14
    1074:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	2201      	movs	r2, #1
    107a:	4252      	negs	r2, r2
    107c:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    107e:	687b      	ldr	r3, [r7, #4]
    1080:	2201      	movs	r2, #1
    1082:	4252      	negs	r2, r2
    1084:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1086:	687b      	ldr	r3, [r7, #4]
    1088:	2200      	movs	r2, #0
    108a:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    108c:	687b      	ldr	r3, [r7, #4]
    108e:	2200      	movs	r2, #0
    1090:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	2224      	movs	r2, #36	; 0x24
    1096:	2100      	movs	r1, #0
    1098:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    109a:	687b      	ldr	r3, [r7, #4]
    109c:	2200      	movs	r2, #0
    109e:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    10a0:	687b      	ldr	r3, [r7, #4]
    10a2:	222c      	movs	r2, #44	; 0x2c
    10a4:	2100      	movs	r1, #0
    10a6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    10a8:	687b      	ldr	r3, [r7, #4]
    10aa:	222d      	movs	r2, #45	; 0x2d
    10ac:	2100      	movs	r1, #0
    10ae:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    10b0:	687b      	ldr	r3, [r7, #4]
    10b2:	222e      	movs	r2, #46	; 0x2e
    10b4:	2100      	movs	r1, #0
    10b6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	22d7      	movs	r2, #215	; 0xd7
    10bc:	861a      	strh	r2, [r3, #48]	; 0x30
}
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	46bd      	mov	sp, r7
    10c2:	b002      	add	sp, #8
    10c4:	bd80      	pop	{r7, pc}
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	00000d48 	.word	0x00000d48

000010cc <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    10cc:	b580      	push	{r7, lr}
    10ce:	b084      	sub	sp, #16
    10d0:	af00      	add	r7, sp, #0
    10d2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10d4:	687b      	ldr	r3, [r7, #4]
    10d6:	681b      	ldr	r3, [r3, #0]
    10d8:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    10da:	2300      	movs	r3, #0
    10dc:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	0018      	movs	r0, r3
    10e2:	4b14      	ldr	r3, [pc, #80]	; (1134 <i2c_master_enable+0x68>)
    10e4:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    10e6:	68bb      	ldr	r3, [r7, #8]
    10e8:	681b      	ldr	r3, [r3, #0]
    10ea:	2202      	movs	r2, #2
    10ec:	431a      	orrs	r2, r3
    10ee:	68bb      	ldr	r3, [r7, #8]
    10f0:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    10f2:	687b      	ldr	r3, [r7, #4]
    10f4:	681b      	ldr	r3, [r3, #0]
    10f6:	0018      	movs	r0, r3
    10f8:	4b0f      	ldr	r3, [pc, #60]	; (1138 <i2c_master_enable+0x6c>)
    10fa:	4798      	blx	r3
    10fc:	0003      	movs	r3, r0
    10fe:	0018      	movs	r0, r3
    1100:	4b0e      	ldr	r3, [pc, #56]	; (113c <i2c_master_enable+0x70>)
    1102:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1104:	e00c      	b.n	1120 <i2c_master_enable+0x54>
		timeout_counter++;
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	3301      	adds	r3, #1
    110a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    110c:	687b      	ldr	r3, [r7, #4]
    110e:	88db      	ldrh	r3, [r3, #6]
    1110:	001a      	movs	r2, r3
    1112:	68fb      	ldr	r3, [r7, #12]
    1114:	429a      	cmp	r2, r3
    1116:	d803      	bhi.n	1120 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1118:	68bb      	ldr	r3, [r7, #8]
    111a:	2210      	movs	r2, #16
    111c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    111e:	e006      	b.n	112e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1120:	68bb      	ldr	r3, [r7, #8]
    1122:	8b5b      	ldrh	r3, [r3, #26]
    1124:	b29b      	uxth	r3, r3
    1126:	001a      	movs	r2, r3
    1128:	2310      	movs	r3, #16
    112a:	4013      	ands	r3, r2
    112c:	d0eb      	beq.n	1106 <i2c_master_enable+0x3a>
		}
	}
}
    112e:	46bd      	mov	sp, r7
    1130:	b004      	add	sp, #16
    1132:	bd80      	pop	{r7, pc}
    1134:	00001025 	.word	0x00001025
    1138:	0000a329 	.word	0x0000a329
    113c:	00000fd5 	.word	0x00000fd5

00001140 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    1140:	b580      	push	{r7, lr}
    1142:	b082      	sub	sp, #8
    1144:	af00      	add	r7, sp, #0
    1146:	6078      	str	r0, [r7, #4]
    1148:	000a      	movs	r2, r1
    114a:	1cfb      	adds	r3, r7, #3
    114c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    114e:	687b      	ldr	r3, [r7, #4]
    1150:	7e5b      	ldrb	r3, [r3, #25]
    1152:	b2db      	uxtb	r3, r3
    1154:	b25a      	sxtb	r2, r3
    1156:	1cfb      	adds	r3, r7, #3
    1158:	781b      	ldrb	r3, [r3, #0]
    115a:	2101      	movs	r1, #1
    115c:	4099      	lsls	r1, r3
    115e:	000b      	movs	r3, r1
    1160:	b25b      	sxtb	r3, r3
    1162:	4313      	orrs	r3, r2
    1164:	b25b      	sxtb	r3, r3
    1166:	b2da      	uxtb	r2, r3
    1168:	687b      	ldr	r3, [r7, #4]
    116a:	765a      	strb	r2, [r3, #25]
}
    116c:	46c0      	nop			; (mov r8, r8)
    116e:	46bd      	mov	sp, r7
    1170:	b002      	add	sp, #8
    1172:	bd80      	pop	{r7, pc}

00001174 <I2cDriverConfigureSensorBus>:
char checkerPrint[64]; //<variable to hold print statements
/******************************************************************************
* Forward Declarations
******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
    1174:	b590      	push	{r4, r7, lr}
    1176:	b091      	sub	sp, #68	; 0x44
    1178:	af00      	add	r7, sp, #0
	int32_t error = STATUS_OK;
    117a:	2300      	movs	r3, #0
    117c:	63fb      	str	r3, [r7, #60]	; 0x3c
	status_code_genare_t errCodeAsf = STATUS_OK;
    117e:	233a      	movs	r3, #58	; 0x3a
    1180:	18fb      	adds	r3, r7, r3
    1182:	2200      	movs	r2, #0
    1184:	701a      	strb	r2, [r3, #0]
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    1186:	1d3b      	adds	r3, r7, #4
    1188:	0018      	movs	r0, r3
    118a:	4b21      	ldr	r3, [pc, #132]	; (1210 <I2cDriverConfigureSensorBus+0x9c>)
    118c:	4798      	blx	r3
	
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    118e:	1d3b      	adds	r3, r7, #4
    1190:	4a20      	ldr	r2, [pc, #128]	; (1214 <I2cDriverConfigureSensorBus+0xa0>)
    1192:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    1194:	1d3b      	adds	r3, r7, #4
    1196:	4a20      	ldr	r2, [pc, #128]	; (1218 <I2cDriverConfigureSensorBus+0xa4>)
    1198:	621a      	str	r2, [r3, #32]
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 1000;
    119a:	1d3b      	adds	r3, r7, #4
    119c:	22fa      	movs	r2, #250	; 0xfa
    119e:	0092      	lsls	r2, r2, #2
    11a0:	82da      	strh	r2, [r3, #22]
	/* Initialize and enable device with config. Try three times to initialize */
	
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
    11a2:	233b      	movs	r3, #59	; 0x3b
    11a4:	18fb      	adds	r3, r7, r3
    11a6:	2203      	movs	r2, #3
    11a8:	701a      	strb	r2, [r3, #0]
    11aa:	e01e      	b.n	11ea <I2cDriverConfigureSensorBus+0x76>
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    11ac:	233a      	movs	r3, #58	; 0x3a
    11ae:	18fc      	adds	r4, r7, r3
    11b0:	1d3a      	adds	r2, r7, #4
    11b2:	491a      	ldr	r1, [pc, #104]	; (121c <I2cDriverConfigureSensorBus+0xa8>)
    11b4:	4b1a      	ldr	r3, [pc, #104]	; (1220 <I2cDriverConfigureSensorBus+0xac>)
    11b6:	0018      	movs	r0, r3
    11b8:	4b1a      	ldr	r3, [pc, #104]	; (1224 <I2cDriverConfigureSensorBus+0xb0>)
    11ba:	4798      	blx	r3
    11bc:	0003      	movs	r3, r0
    11be:	7023      	strb	r3, [r4, #0]
		if(STATUS_OK == errCodeAsf){
    11c0:	233a      	movs	r3, #58	; 0x3a
    11c2:	18fb      	adds	r3, r7, r3
    11c4:	781b      	ldrb	r3, [r3, #0]
    11c6:	2b00      	cmp	r3, #0
    11c8:	d104      	bne.n	11d4 <I2cDriverConfigureSensorBus+0x60>
			error = errCodeAsf;
    11ca:	233a      	movs	r3, #58	; 0x3a
    11cc:	18fb      	adds	r3, r7, r3
    11ce:	781b      	ldrb	r3, [r3, #0]
    11d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
    11d2:	e00f      	b.n	11f4 <I2cDriverConfigureSensorBus+0x80>
			}else{
			i2c_master_reset(&i2cSensorBusInstance);
    11d4:	4b12      	ldr	r3, [pc, #72]	; (1220 <I2cDriverConfigureSensorBus+0xac>)
    11d6:	0018      	movs	r0, r3
    11d8:	4b13      	ldr	r3, [pc, #76]	; (1228 <I2cDriverConfigureSensorBus+0xb4>)
    11da:	4798      	blx	r3
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
    11dc:	233b      	movs	r3, #59	; 0x3b
    11de:	18fb      	adds	r3, r7, r3
    11e0:	781a      	ldrb	r2, [r3, #0]
    11e2:	233b      	movs	r3, #59	; 0x3b
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	3a01      	subs	r2, #1
    11e8:	701a      	strb	r2, [r3, #0]
    11ea:	233b      	movs	r3, #59	; 0x3b
    11ec:	18fb      	adds	r3, r7, r3
    11ee:	781b      	ldrb	r3, [r3, #0]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d1db      	bne.n	11ac <I2cDriverConfigureSensorBus+0x38>
		}
	}
	
	if(STATUS_OK != error) goto exit;
    11f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    11f6:	2b00      	cmp	r3, #0
    11f8:	d104      	bne.n	1204 <I2cDriverConfigureSensorBus+0x90>
	
	i2c_master_enable(&i2cSensorBusInstance);
    11fa:	4b09      	ldr	r3, [pc, #36]	; (1220 <I2cDriverConfigureSensorBus+0xac>)
    11fc:	0018      	movs	r0, r3
    11fe:	4b0b      	ldr	r3, [pc, #44]	; (122c <I2cDriverConfigureSensorBus+0xb8>)
    1200:	4798      	blx	r3
    1202:	e000      	b.n	1206 <I2cDriverConfigureSensorBus+0x92>
	if(STATUS_OK != error) goto exit;
    1204:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
    1206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    1208:	0018      	movs	r0, r3
    120a:	46bd      	mov	sp, r7
    120c:	b011      	add	sp, #68	; 0x44
    120e:	bd90      	pop	{r4, r7, pc}
    1210:	00001049 	.word	0x00001049
    1214:	00080002 	.word	0x00080002
    1218:	00090002 	.word	0x00090002
    121c:	42000800 	.word	0x42000800
    1220:	20003938 	.word	0x20003938
    1224:	00003361 	.word	0x00003361
    1228:	00003495 	.word	0x00003495
    122c:	000010cd 	.word	0x000010cd

00001230 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
    1230:	b580      	push	{r7, lr}
    1232:	b084      	sub	sp, #16
    1234:	af00      	add	r7, sp, #0
    1236:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
    1238:	4b0e      	ldr	r3, [pc, #56]	; (1274 <I2cSensorsTxComplete+0x44>)
    123a:	2200      	movs	r2, #0
    123c:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;			
    123e:	4b0d      	ldr	r3, [pc, #52]	; (1274 <I2cSensorsTxComplete+0x44>)
    1240:	2201      	movs	r2, #1
    1242:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    1244:	2300      	movs	r3, #0
    1246:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    1248:	4b0b      	ldr	r3, [pc, #44]	; (1278 <I2cSensorsTxComplete+0x48>)
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	220c      	movs	r2, #12
    124e:	18ba      	adds	r2, r7, r2
    1250:	0011      	movs	r1, r2
    1252:	0018      	movs	r0, r3
    1254:	4b09      	ldr	r3, [pc, #36]	; (127c <I2cSensorsTxComplete+0x4c>)
    1256:	4798      	blx	r3
	sensorTransmitError = false;
    1258:	4b09      	ldr	r3, [pc, #36]	; (1280 <I2cSensorsTxComplete+0x50>)
    125a:	2200      	movs	r2, #0
    125c:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    125e:	68fb      	ldr	r3, [r7, #12]
    1260:	2b00      	cmp	r3, #0
    1262:	d003      	beq.n	126c <I2cSensorsTxComplete+0x3c>
    1264:	4b07      	ldr	r3, [pc, #28]	; (1284 <I2cSensorsTxComplete+0x54>)
    1266:	2280      	movs	r2, #128	; 0x80
    1268:	0552      	lsls	r2, r2, #21
    126a:	601a      	str	r2, [r3, #0]
}
    126c:	46c0      	nop			; (mov r8, r8)
    126e:	46bd      	mov	sp, r7
    1270:	b004      	add	sp, #16
    1272:	bd80      	pop	{r7, pc}
    1274:	2000031c 	.word	0x2000031c
    1278:	20003960 	.word	0x20003960
    127c:	00006445 	.word	0x00006445
    1280:	20000318 	.word	0x20000318
    1284:	e000ed04 	.word	0xe000ed04

00001288 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
    1288:	b580      	push	{r7, lr}
    128a:	b084      	sub	sp, #16
    128c:	af00      	add	r7, sp, #0
    128e:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
    1290:	4b0e      	ldr	r3, [pc, #56]	; (12cc <I2cSensorsRxComplete+0x44>)
    1292:	2200      	movs	r2, #0
    1294:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;
    1296:	4b0d      	ldr	r3, [pc, #52]	; (12cc <I2cSensorsRxComplete+0x44>)
    1298:	2201      	movs	r2, #1
    129a:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    129c:	2300      	movs	r3, #0
    129e:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    12a0:	4b0b      	ldr	r3, [pc, #44]	; (12d0 <I2cSensorsRxComplete+0x48>)
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	220c      	movs	r2, #12
    12a6:	18ba      	adds	r2, r7, r2
    12a8:	0011      	movs	r1, r2
    12aa:	0018      	movs	r0, r3
    12ac:	4b09      	ldr	r3, [pc, #36]	; (12d4 <I2cSensorsRxComplete+0x4c>)
    12ae:	4798      	blx	r3
	sensorTransmitError = false;
    12b0:	4b09      	ldr	r3, [pc, #36]	; (12d8 <I2cSensorsRxComplete+0x50>)
    12b2:	2200      	movs	r2, #0
    12b4:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    12b6:	68fb      	ldr	r3, [r7, #12]
    12b8:	2b00      	cmp	r3, #0
    12ba:	d003      	beq.n	12c4 <I2cSensorsRxComplete+0x3c>
    12bc:	4b07      	ldr	r3, [pc, #28]	; (12dc <I2cSensorsRxComplete+0x54>)
    12be:	2280      	movs	r2, #128	; 0x80
    12c0:	0552      	lsls	r2, r2, #21
    12c2:	601a      	str	r2, [r3, #0]
}
    12c4:	46c0      	nop			; (mov r8, r8)
    12c6:	46bd      	mov	sp, r7
    12c8:	b004      	add	sp, #16
    12ca:	bd80      	pop	{r7, pc}
    12cc:	2000031c 	.word	0x2000031c
    12d0:	20003960 	.word	0x20003960
    12d4:	00006445 	.word	0x00006445
    12d8:	20000318 	.word	0x20000318
    12dc:	e000ed04 	.word	0xe000ed04

000012e0 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
    12e0:	b580      	push	{r7, lr}
    12e2:	b084      	sub	sp, #16
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
    12e8:	4b0e      	ldr	r3, [pc, #56]	; (1324 <I2cSensorsError+0x44>)
    12ea:	2200      	movs	r2, #0
    12ec:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.txDoneFlag = true;
    12ee:	4b0d      	ldr	r3, [pc, #52]	; (1324 <I2cSensorsError+0x44>)
    12f0:	2201      	movs	r2, #1
    12f2:	605a      	str	r2, [r3, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    12f4:	2300      	movs	r3, #0
    12f6:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    12f8:	4b0b      	ldr	r3, [pc, #44]	; (1328 <I2cSensorsError+0x48>)
    12fa:	681b      	ldr	r3, [r3, #0]
    12fc:	220c      	movs	r2, #12
    12fe:	18ba      	adds	r2, r7, r2
    1300:	0011      	movs	r1, r2
    1302:	0018      	movs	r0, r3
    1304:	4b09      	ldr	r3, [pc, #36]	; (132c <I2cSensorsError+0x4c>)
    1306:	4798      	blx	r3
	sensorTransmitError = false;
    1308:	4b09      	ldr	r3, [pc, #36]	; (1330 <I2cSensorsError+0x50>)
    130a:	2200      	movs	r2, #0
    130c:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    130e:	68fb      	ldr	r3, [r7, #12]
    1310:	2b00      	cmp	r3, #0
    1312:	d003      	beq.n	131c <I2cSensorsError+0x3c>
    1314:	4b07      	ldr	r3, [pc, #28]	; (1334 <I2cSensorsError+0x54>)
    1316:	2280      	movs	r2, #128	; 0x80
    1318:	0552      	lsls	r2, r2, #21
    131a:	601a      	str	r2, [r3, #0]
}
    131c:	46c0      	nop			; (mov r8, r8)
    131e:	46bd      	mov	sp, r7
    1320:	b004      	add	sp, #16
    1322:	bd80      	pop	{r7, pc}
    1324:	2000031c 	.word	0x2000031c
    1328:	20003960 	.word	0x20003960
    132c:	00006445 	.word	0x00006445
    1330:	20000318 	.word	0x20000318
    1334:	e000ed04 	.word	0xe000ed04

00001338 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
    1338:	b580      	push	{r7, lr}
    133a:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    133c:	4911      	ldr	r1, [pc, #68]	; (1384 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
    133e:	4b12      	ldr	r3, [pc, #72]	; (1388 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1340:	2200      	movs	r2, #0
    1342:	0018      	movs	r0, r3
    1344:	4b11      	ldr	r3, [pc, #68]	; (138c <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1346:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    1348:	4b0f      	ldr	r3, [pc, #60]	; (1388 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    134a:	2100      	movs	r1, #0
    134c:	0018      	movs	r0, r3
    134e:	4b10      	ldr	r3, [pc, #64]	; (1390 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1350:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    1352:	4910      	ldr	r1, [pc, #64]	; (1394 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
    1354:	4b0c      	ldr	r3, [pc, #48]	; (1388 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1356:	2201      	movs	r2, #1
    1358:	0018      	movs	r0, r3
    135a:	4b0c      	ldr	r3, [pc, #48]	; (138c <I2cDriverRegisterSensorBusCallbacks+0x54>)
    135c:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
    135e:	4b0a      	ldr	r3, [pc, #40]	; (1388 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1360:	2101      	movs	r1, #1
    1362:	0018      	movs	r0, r3
    1364:	4b0a      	ldr	r3, [pc, #40]	; (1390 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    1366:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
    1368:	490b      	ldr	r1, [pc, #44]	; (1398 <I2cDriverRegisterSensorBusCallbacks+0x60>)
    136a:	4b07      	ldr	r3, [pc, #28]	; (1388 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    136c:	2202      	movs	r2, #2
    136e:	0018      	movs	r0, r3
    1370:	4b06      	ldr	r3, [pc, #24]	; (138c <I2cDriverRegisterSensorBusCallbacks+0x54>)
    1372:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
    1374:	4b04      	ldr	r3, [pc, #16]	; (1388 <I2cDriverRegisterSensorBusCallbacks+0x50>)
    1376:	2102      	movs	r1, #2
    1378:	0018      	movs	r0, r3
    137a:	4b05      	ldr	r3, [pc, #20]	; (1390 <I2cDriverRegisterSensorBusCallbacks+0x58>)
    137c:	4798      	blx	r3
}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	46bd      	mov	sp, r7
    1382:	bd80      	pop	{r7, pc}
    1384:	00001231 	.word	0x00001231
    1388:	20003938 	.word	0x20003938
    138c:	00000385 	.word	0x00000385
    1390:	00001141 	.word	0x00001141
    1394:	00001289 	.word	0x00001289
    1398:	000012e1 	.word	0x000012e1

0000139c <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
    139c:	b580      	push	{r7, lr}
    139e:	b082      	sub	sp, #8
    13a0:	af00      	add	r7, sp, #0
	
	int32_t error = STATUS_OK;
    13a2:	2300      	movs	r3, #0
    13a4:	607b      	str	r3, [r7, #4]


	error = I2cDriverConfigureSensorBus();
    13a6:	4b14      	ldr	r3, [pc, #80]	; (13f8 <I2cInitializeDriver+0x5c>)
    13a8:	4798      	blx	r3
    13aa:	0003      	movs	r3, r0
    13ac:	607b      	str	r3, [r7, #4]
	if(STATUS_OK != error) goto exit;
    13ae:	687b      	ldr	r3, [r7, #4]
    13b0:	2b00      	cmp	r3, #0
    13b2:	d11a      	bne.n	13ea <I2cInitializeDriver+0x4e>
	
	I2cDriverRegisterSensorBusCallbacks();
    13b4:	4b11      	ldr	r3, [pc, #68]	; (13fc <I2cInitializeDriver+0x60>)
    13b6:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
    13b8:	2001      	movs	r0, #1
    13ba:	4b11      	ldr	r3, [pc, #68]	; (1400 <I2cInitializeDriver+0x64>)
    13bc:	4798      	blx	r3
    13be:	0002      	movs	r2, r0
    13c0:	4b10      	ldr	r3, [pc, #64]	; (1404 <I2cInitializeDriver+0x68>)
    13c2:	601a      	str	r2, [r3, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    13c4:	2203      	movs	r2, #3
    13c6:	2100      	movs	r1, #0
    13c8:	2001      	movs	r0, #1
    13ca:	4b0f      	ldr	r3, [pc, #60]	; (1408 <I2cInitializeDriver+0x6c>)
    13cc:	4798      	blx	r3
    13ce:	0002      	movs	r2, r0
    13d0:	4b0e      	ldr	r3, [pc, #56]	; (140c <I2cInitializeDriver+0x70>)
    13d2:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    13d4:	4b0b      	ldr	r3, [pc, #44]	; (1404 <I2cInitializeDriver+0x68>)
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	2b00      	cmp	r3, #0
    13da:	d003      	beq.n	13e4 <I2cInitializeDriver+0x48>
    13dc:	4b0b      	ldr	r3, [pc, #44]	; (140c <I2cInitializeDriver+0x70>)
    13de:	681b      	ldr	r3, [r3, #0]
    13e0:	2b00      	cmp	r3, #0
    13e2:	d103      	bne.n	13ec <I2cInitializeDriver+0x50>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
    13e4:	2306      	movs	r3, #6
    13e6:	607b      	str	r3, [r7, #4]
		goto exit;
    13e8:	e000      	b.n	13ec <I2cInitializeDriver+0x50>
	if(STATUS_OK != error) goto exit;
    13ea:	46c0      	nop			; (mov r8, r8)
	}

	exit:
	return error;		
    13ec:	687b      	ldr	r3, [r7, #4]
}
    13ee:	0018      	movs	r0, r3
    13f0:	46bd      	mov	sp, r7
    13f2:	b002      	add	sp, #8
    13f4:	bd80      	pop	{r7, pc}
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	00001175 	.word	0x00001175
    13fc:	00001339 	.word	0x00001339
    1400:	00005d7d 	.word	0x00005d7d
    1404:	20003934 	.word	0x20003934
    1408:	00005b15 	.word	0x00005b15
    140c:	20003960 	.word	0x20003960

00001410 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
    1410:	b590      	push	{r4, r7, lr}
    1412:	b089      	sub	sp, #36	; 0x24
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
    1418:	2300      	movs	r3, #0
    141a:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
    141c:	2300      	movs	r3, #0
    141e:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
    1420:	2300      	movs	r3, #0
    1422:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
    1424:	2300      	movs	r3, #0
    1426:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	2b00      	cmp	r3, #0
    142c:	d003      	beq.n	1436 <I2cWriteData+0x26>
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	685b      	ldr	r3, [r3, #4]
    1432:	2b00      	cmp	r3, #0
    1434:	d103      	bne.n	143e <I2cWriteData+0x2e>
		error = ERR_INVALID_ARG;
    1436:	2308      	movs	r3, #8
    1438:	425b      	negs	r3, r3
    143a:	61fb      	str	r3, [r7, #28]
		goto exit;
    143c:	e01f      	b.n	147e <I2cWriteData+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	781b      	ldrb	r3, [r3, #0]
    1442:	b29a      	uxth	r2, r3
    1444:	4b10      	ldr	r3, [pc, #64]	; (1488 <I2cWriteData+0x78>)
    1446:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	685a      	ldr	r2, [r3, #4]
    144c:	4b0e      	ldr	r3, [pc, #56]	; (1488 <I2cWriteData+0x78>)
    144e:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	89da      	ldrh	r2, [r3, #14]
    1454:	4b0c      	ldr	r3, [pc, #48]	; (1488 <I2cWriteData+0x78>)
    1456:	805a      	strh	r2, [r3, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    1458:	230f      	movs	r3, #15
    145a:	18fc      	adds	r4, r7, r3
    145c:	4a0a      	ldr	r2, [pc, #40]	; (1488 <I2cWriteData+0x78>)
    145e:	4b0b      	ldr	r3, [pc, #44]	; (148c <I2cWriteData+0x7c>)
    1460:	0011      	movs	r1, r2
    1462:	0018      	movs	r0, r3
    1464:	4b0a      	ldr	r3, [pc, #40]	; (1490 <I2cWriteData+0x80>)
    1466:	4798      	blx	r3
    1468:	0003      	movs	r3, r0
    146a:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
    146c:	230f      	movs	r3, #15
    146e:	18fb      	adds	r3, r7, r3
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	2b00      	cmp	r3, #0
    1474:	d003      	beq.n	147e <I2cWriteData+0x6e>
	{
		error = ERROR_IO;
    1476:	2306      	movs	r3, #6
    1478:	425b      	negs	r3, r3
    147a:	61fb      	str	r3, [r7, #28]
		goto exit;
    147c:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
    147e:	69fb      	ldr	r3, [r7, #28]
}
    1480:	0018      	movs	r0, r3
    1482:	46bd      	mov	sp, r7
    1484:	b009      	add	sp, #36	; 0x24
    1486:	bd90      	pop	{r4, r7, pc}
    1488:	200039a4 	.word	0x200039a4
    148c:	20003938 	.word	0x20003938
    1490:	00000609 	.word	0x00000609

00001494 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
    1494:	b590      	push	{r4, r7, lr}
    1496:	b089      	sub	sp, #36	; 0x24
    1498:	af00      	add	r7, sp, #0
    149a:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
    149c:	2300      	movs	r3, #0
    149e:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
    14a0:	2300      	movs	r3, #0
    14a2:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
    14a4:	2300      	movs	r3, #0
    14a6:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
    14a8:	2300      	movs	r3, #0
    14aa:	613b      	str	r3, [r7, #16]
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    14ac:	687b      	ldr	r3, [r7, #4]
    14ae:	2b00      	cmp	r3, #0
    14b0:	d003      	beq.n	14ba <I2cReadData+0x26>
    14b2:	687b      	ldr	r3, [r7, #4]
    14b4:	685b      	ldr	r3, [r3, #4]
    14b6:	2b00      	cmp	r3, #0
    14b8:	d103      	bne.n	14c2 <I2cReadData+0x2e>
		error = ERR_INVALID_ARG;
    14ba:	2308      	movs	r3, #8
    14bc:	425b      	negs	r3, r3
    14be:	61fb      	str	r3, [r7, #28]
		goto exit;
    14c0:	e01f      	b.n	1502 <I2cReadData+0x6e>
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	b29a      	uxth	r2, r3
    14c8:	4b10      	ldr	r3, [pc, #64]	; (150c <I2cReadData+0x78>)
    14ca:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = data->msgIn;
    14cc:	687b      	ldr	r3, [r7, #4]
    14ce:	689a      	ldr	r2, [r3, #8]
    14d0:	4b0e      	ldr	r3, [pc, #56]	; (150c <I2cReadData+0x78>)
    14d2:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenIn;
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	899a      	ldrh	r2, [r3, #12]
    14d8:	4b0c      	ldr	r3, [pc, #48]	; (150c <I2cReadData+0x78>)
    14da:	805a      	strh	r2, [r3, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    14dc:	230f      	movs	r3, #15
    14de:	18fc      	adds	r4, r7, r3
    14e0:	4a0a      	ldr	r2, [pc, #40]	; (150c <I2cReadData+0x78>)
    14e2:	4b0b      	ldr	r3, [pc, #44]	; (1510 <I2cReadData+0x7c>)
    14e4:	0011      	movs	r1, r2
    14e6:	0018      	movs	r0, r3
    14e8:	4b0a      	ldr	r3, [pc, #40]	; (1514 <I2cReadData+0x80>)
    14ea:	4798      	blx	r3
    14ec:	0003      	movs	r3, r0
    14ee:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
    14f0:	230f      	movs	r3, #15
    14f2:	18fb      	adds	r3, r7, r3
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d003      	beq.n	1502 <I2cReadData+0x6e>
	{
		error = ERROR_IO;
    14fa:	2306      	movs	r3, #6
    14fc:	425b      	negs	r3, r3
    14fe:	61fb      	str	r3, [r7, #28]
		goto exit;
    1500:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
    1502:	69fb      	ldr	r3, [r7, #28]
}
    1504:	0018      	movs	r0, r3
    1506:	46bd      	mov	sp, r7
    1508:	b009      	add	sp, #36	; 0x24
    150a:	bd90      	pop	{r4, r7, pc}
    150c:	200039a4 	.word	0x200039a4
    1510:	20003938 	.word	0x20003938
    1514:	00000525 	.word	0x00000525

00001518 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
    1518:	b590      	push	{r4, r7, lr}
    151a:	b083      	sub	sp, #12
    151c:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
    151e:	2300      	movs	r3, #0
    1520:	607b      	str	r3, [r7, #4]
	//give semaphore back
	if(xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
    1522:	4b09      	ldr	r3, [pc, #36]	; (1548 <I2cFreeMutex+0x30>)
    1524:	6818      	ldr	r0, [r3, #0]
    1526:	2300      	movs	r3, #0
    1528:	2200      	movs	r2, #0
    152a:	2100      	movs	r1, #0
    152c:	4c07      	ldr	r4, [pc, #28]	; (154c <I2cFreeMutex+0x34>)
    152e:	47a0      	blx	r4
    1530:	0003      	movs	r3, r0
    1532:	2b01      	cmp	r3, #1
    1534:	d002      	beq.n	153c <I2cFreeMutex+0x24>
		{
			error = ERROR_NOT_INITIALIZED;
    1536:	2314      	movs	r3, #20
    1538:	425b      	negs	r3, r3
    153a:	607b      	str	r3, [r7, #4]
		}
	return error;
    153c:	687b      	ldr	r3, [r7, #4]

}
    153e:	0018      	movs	r0, r3
    1540:	46bd      	mov	sp, r7
    1542:	b003      	add	sp, #12
    1544:	bd90      	pop	{r4, r7, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	20003934 	.word	0x20003934
    154c:	00005dbd 	.word	0x00005dbd

00001550 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
    1550:	b580      	push	{r7, lr}
    1552:	b084      	sub	sp, #16
    1554:	af00      	add	r7, sp, #0
    1556:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
    1558:	2300      	movs	r3, #0
    155a:	60fb      	str	r3, [r7, #12]
	//use semaphoreTake to get sensorI2c
	if(xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE)
    155c:	4b08      	ldr	r3, [pc, #32]	; (1580 <I2cGetMutex+0x30>)
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	687a      	ldr	r2, [r7, #4]
    1562:	0011      	movs	r1, r2
    1564:	0018      	movs	r0, r3
    1566:	4b07      	ldr	r3, [pc, #28]	; (1584 <I2cGetMutex+0x34>)
    1568:	4798      	blx	r3
    156a:	0003      	movs	r3, r0
    156c:	2b01      	cmp	r3, #1
    156e:	d002      	beq.n	1576 <I2cGetMutex+0x26>
		{
			error = ERROR_NOT_READY;
    1570:	231d      	movs	r3, #29
    1572:	425b      	negs	r3, r3
    1574:	60fb      	str	r3, [r7, #12]
		}
	return error;
    1576:	68fb      	ldr	r3, [r7, #12]
	
}
    1578:	0018      	movs	r0, r3
    157a:	46bd      	mov	sp, r7
    157c:	b004      	add	sp, #16
    157e:	bd80      	pop	{r7, pc}
    1580:	20003934 	.word	0x20003934
    1584:	00006acd 	.word	0x00006acd

00001588 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle){
    1588:	b580      	push	{r7, lr}
    158a:	b084      	sub	sp, #16
    158c:	af00      	add	r7, sp, #0
    158e:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
    1590:	2300      	movs	r3, #0
    1592:	60fb      	str	r3, [r7, #12]
	*handle = sensorI2cSemaphoreHandle;
    1594:	4b04      	ldr	r3, [pc, #16]	; (15a8 <I2cGetSemaphoreHandle+0x20>)
    1596:	681a      	ldr	r2, [r3, #0]
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	601a      	str	r2, [r3, #0]
	return error;
    159c:	68fb      	ldr	r3, [r7, #12]
}
    159e:	0018      	movs	r0, r3
    15a0:	46bd      	mov	sp, r7
    15a2:	b004      	add	sp, #16
    15a4:	bd80      	pop	{r7, pc}
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	20003960 	.word	0x20003960

000015ac <I2cGetTaskErrorStatus>:
 * @brief       Sets the error state of the latest I2C bus transaction for a given I2C data, which holds which physical I2C bus we are using.
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static uint8_t I2cGetTaskErrorStatus(void){
    15ac:	b580      	push	{r7, lr}
    15ae:	af00      	add	r7, sp, #0
	 return sensorTransmitError;
    15b0:	4b02      	ldr	r3, [pc, #8]	; (15bc <I2cGetTaskErrorStatus+0x10>)
    15b2:	781b      	ldrb	r3, [r3, #0]
 }
    15b4:	0018      	movs	r0, r3
    15b6:	46bd      	mov	sp, r7
    15b8:	bd80      	pop	{r7, pc}
    15ba:	46c0      	nop			; (mov r8, r8)
    15bc:	20000318 	.word	0x20000318

000015c0 <I2cSetTaskErrorStatus>:
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static void I2cSetTaskErrorStatus(uint8_t value){
    15c0:	b580      	push	{r7, lr}
    15c2:	b082      	sub	sp, #8
    15c4:	af00      	add	r7, sp, #0
    15c6:	0002      	movs	r2, r0
    15c8:	1dfb      	adds	r3, r7, #7
    15ca:	701a      	strb	r2, [r3, #0]
	sensorTransmitError = value;
    15cc:	4b03      	ldr	r3, [pc, #12]	; (15dc <I2cSetTaskErrorStatus+0x1c>)
    15ce:	1dfa      	adds	r2, r7, #7
    15d0:	7812      	ldrb	r2, [r2, #0]
    15d2:	701a      	strb	r2, [r3, #0]
 }
    15d4:	46c0      	nop			; (mov r8, r8)
    15d6:	46bd      	mov	sp, r7
    15d8:	b002      	add	sp, #8
    15da:	bd80      	pop	{r7, pc}
    15dc:	20000318 	.word	0x20000318

000015e0 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
    15e0:	b580      	push	{r7, lr}
    15e2:	b084      	sub	sp, #16
    15e4:	af00      	add	r7, sp, #0
    15e6:	6078      	str	r0, [r7, #4]
    15e8:	6039      	str	r1, [r7, #0]

int32_t error = ERROR_NONE;
    15ea:	2300      	movs	r3, #0
    15ec:	60fb      	str	r3, [r7, #12]
SemaphoreHandle_t semHandle = NULL;
    15ee:	2300      	movs	r3, #0
    15f0:	60bb      	str	r3, [r7, #8]


//---0. Get Mutex
error = I2cGetMutex(xMaxBlockTime); //Students to fill out
    15f2:	683b      	ldr	r3, [r7, #0]
    15f4:	0018      	movs	r0, r3
    15f6:	4b27      	ldr	r3, [pc, #156]	; (1694 <I2cWriteDataWait+0xb4>)
    15f8:	4798      	blx	r3
    15fa:	0003      	movs	r3, r0
    15fc:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
    15fe:	68fb      	ldr	r3, [r7, #12]
    1600:	2b00      	cmp	r3, #0
    1602:	d138      	bne.n	1676 <I2cWriteDataWait+0x96>


//---1. Get Semaphore Handle
error = 0;I2cGetSemaphoreHandle(&semHandle);
    1604:	2300      	movs	r3, #0
    1606:	60fb      	str	r3, [r7, #12]
    1608:	2308      	movs	r3, #8
    160a:	18fb      	adds	r3, r7, r3
    160c:	0018      	movs	r0, r3
    160e:	4b22      	ldr	r3, [pc, #136]	; (1698 <I2cWriteDataWait+0xb8>)
    1610:	4798      	blx	r3
if(ERROR_NONE != error) goto exit;
    1612:	68fb      	ldr	r3, [r7, #12]
    1614:	2b00      	cmp	r3, #0
    1616:	d130      	bne.n	167a <I2cWriteDataWait+0x9a>

//---2. Initiate sending data

error = I2cWriteData(data);
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	0018      	movs	r0, r3
    161c:	4b1f      	ldr	r3, [pc, #124]	; (169c <I2cWriteDataWait+0xbc>)
    161e:	4798      	blx	r3
    1620:	0003      	movs	r3, r0
    1622:	60fb      	str	r3, [r7, #12]
if (ERROR_NONE != error){
    1624:	68fb      	ldr	r3, [r7, #12]
    1626:	2b00      	cmp	r3, #0
    1628:	d12a      	bne.n	1680 <I2cWriteDataWait+0xa0>
	goto exitError0;
}

//---2. Wait for binary semaphore to tell us that we are done!
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
    162a:	68bb      	ldr	r3, [r7, #8]
    162c:	683a      	ldr	r2, [r7, #0]
    162e:	0011      	movs	r1, r2
    1630:	0018      	movs	r0, r3
    1632:	4b1b      	ldr	r3, [pc, #108]	; (16a0 <I2cWriteDataWait+0xc0>)
    1634:	4798      	blx	r3
    1636:	0003      	movs	r3, r0
    1638:	2b01      	cmp	r3, #1
    163a:	d111      	bne.n	1660 <I2cWriteDataWait+0x80>
	/* The transmission ended as expected. We now delay until the I2C sensor is finished */
	if(I2cGetTaskErrorStatus()){
    163c:	4b19      	ldr	r3, [pc, #100]	; (16a4 <I2cWriteDataWait+0xc4>)
    163e:	4798      	blx	r3
    1640:	1e03      	subs	r3, r0, #0
    1642:	d011      	beq.n	1668 <I2cWriteDataWait+0x88>
		I2cSetTaskErrorStatus(false);
    1644:	2000      	movs	r0, #0
    1646:	4b18      	ldr	r3, [pc, #96]	; (16a8 <I2cWriteDataWait+0xc8>)
    1648:	4798      	blx	r3
		if(error != ERROR_NONE){
    164a:	68fb      	ldr	r3, [r7, #12]
    164c:	2b00      	cmp	r3, #0
    164e:	d003      	beq.n	1658 <I2cWriteDataWait+0x78>
    		error = ERROR_I2C_HANG_RESET;
    1650:	2321      	movs	r3, #33	; 0x21
    1652:	425b      	negs	r3, r3
    1654:	60fb      	str	r3, [r7, #12]
    	}else{
    		error = ERROR_ABORTED;
		}
		goto exitError0;
    1656:	e014      	b.n	1682 <I2cWriteDataWait+0xa2>
    		error = ERROR_ABORTED;
    1658:	2303      	movs	r3, #3
    165a:	425b      	negs	r3, r3
    165c:	60fb      	str	r3, [r7, #12]
		goto exitError0;
    165e:	e010      	b.n	1682 <I2cWriteDataWait+0xa2>
	}
}else{
	/* The call to ulTaskNotifyTake() timed out. */
	error = ERR_TIMEOUT;
    1660:	2303      	movs	r3, #3
    1662:	425b      	negs	r3, r3
    1664:	60fb      	str	r3, [r7, #12]
	goto exitError0;
    1666:	e00c      	b.n	1682 <I2cWriteDataWait+0xa2>
}

//---8. Release Mutex
error |= I2cFreeMutex();
    1668:	4b10      	ldr	r3, [pc, #64]	; (16ac <I2cWriteDataWait+0xcc>)
    166a:	4798      	blx	r3
    166c:	0002      	movs	r2, r0
    166e:	68fb      	ldr	r3, [r7, #12]
    1670:	4313      	orrs	r3, r2
    1672:	60fb      	str	r3, [r7, #12]
    1674:	e002      	b.n	167c <I2cWriteDataWait+0x9c>
if(ERROR_NONE != error) goto exit;
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	e000      	b.n	167c <I2cWriteDataWait+0x9c>
if(ERROR_NONE != error) goto exit;
    167a:	46c0      	nop			; (mov r8, r8)

exit:
return error;
    167c:	68fb      	ldr	r3, [r7, #12]
    167e:	e005      	b.n	168c <I2cWriteDataWait+0xac>
	goto exitError0;
    1680:	46c0      	nop			; (mov r8, r8)

exitError0:
error = I2cFreeMutex();
    1682:	4b0a      	ldr	r3, [pc, #40]	; (16ac <I2cWriteDataWait+0xcc>)
    1684:	4798      	blx	r3
    1686:	0003      	movs	r3, r0
    1688:	60fb      	str	r3, [r7, #12]

return error;
    168a:	68fb      	ldr	r3, [r7, #12]

}
    168c:	0018      	movs	r0, r3
    168e:	46bd      	mov	sp, r7
    1690:	b004      	add	sp, #16
    1692:	bd80      	pop	{r7, pc}
    1694:	00001551 	.word	0x00001551
    1698:	00001589 	.word	0x00001589
    169c:	00001411 	.word	0x00001411
    16a0:	00006acd 	.word	0x00006acd
    16a4:	000015ad 	.word	0x000015ad
    16a8:	000015c1 	.word	0x000015c1
    16ac:	00001519 	.word	0x00001519

000016b0 <I2cReadDataWait>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/

int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
    16b0:	b580      	push	{r7, lr}
    16b2:	b086      	sub	sp, #24
    16b4:	af00      	add	r7, sp, #0
    16b6:	60f8      	str	r0, [r7, #12]
    16b8:	60b9      	str	r1, [r7, #8]
    16ba:	607a      	str	r2, [r7, #4]
	int32_t error = ERROR_NONE;
    16bc:	2300      	movs	r3, #0
    16be:	617b      	str	r3, [r7, #20]
	SemaphoreHandle_t semHandle = NULL;
    16c0:	2300      	movs	r3, #0
    16c2:	613b      	str	r3, [r7, #16]

	//first WRITE the incoming data
	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime); //Students to fill out
    16c4:	687b      	ldr	r3, [r7, #4]
    16c6:	0018      	movs	r0, r3
    16c8:	4b39      	ldr	r3, [pc, #228]	; (17b0 <I2cReadDataWait+0x100>)
    16ca:	4798      	blx	r3
    16cc:	0003      	movs	r3, r0
    16ce:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
    16d0:	697b      	ldr	r3, [r7, #20]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d15d      	bne.n	1792 <I2cReadDataWait+0xe2>


	//---1. Get Semaphore Handle
	error = 0;I2cGetSemaphoreHandle(&semHandle);
    16d6:	2300      	movs	r3, #0
    16d8:	617b      	str	r3, [r7, #20]
    16da:	2310      	movs	r3, #16
    16dc:	18fb      	adds	r3, r7, r3
    16de:	0018      	movs	r0, r3
    16e0:	4b34      	ldr	r3, [pc, #208]	; (17b4 <I2cReadDataWait+0x104>)
    16e2:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
    16e4:	697b      	ldr	r3, [r7, #20]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d155      	bne.n	1796 <I2cReadDataWait+0xe6>

	//---2. Initiate sending data

	error = I2cWriteData(data);
    16ea:	68fb      	ldr	r3, [r7, #12]
    16ec:	0018      	movs	r0, r3
    16ee:	4b32      	ldr	r3, [pc, #200]	; (17b8 <I2cReadDataWait+0x108>)
    16f0:	4798      	blx	r3
    16f2:	0003      	movs	r3, r0
    16f4:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
    16f6:	697b      	ldr	r3, [r7, #20]
    16f8:	2b00      	cmp	r3, #0
    16fa:	d14f      	bne.n	179c <I2cReadDataWait+0xec>
		goto exitError0;
	}

	//---2. Wait for binary semaphore to tell us that we are done!
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
    16fc:	693b      	ldr	r3, [r7, #16]
    16fe:	687a      	ldr	r2, [r7, #4]
    1700:	0011      	movs	r1, r2
    1702:	0018      	movs	r0, r3
    1704:	4b2d      	ldr	r3, [pc, #180]	; (17bc <I2cReadDataWait+0x10c>)
    1706:	4798      	blx	r3
    1708:	0003      	movs	r3, r0
    170a:	2b01      	cmp	r3, #1
    170c:	d111      	bne.n	1732 <I2cReadDataWait+0x82>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
    170e:	4b2c      	ldr	r3, [pc, #176]	; (17c0 <I2cReadDataWait+0x110>)
    1710:	4798      	blx	r3
    1712:	1e03      	subs	r3, r0, #0
    1714:	d011      	beq.n	173a <I2cReadDataWait+0x8a>
			I2cSetTaskErrorStatus(false);
    1716:	2000      	movs	r0, #0
    1718:	4b2a      	ldr	r3, [pc, #168]	; (17c4 <I2cReadDataWait+0x114>)
    171a:	4798      	blx	r3
			if(error != ERROR_NONE){
    171c:	697b      	ldr	r3, [r7, #20]
    171e:	2b00      	cmp	r3, #0
    1720:	d003      	beq.n	172a <I2cReadDataWait+0x7a>
				error = ERROR_I2C_HANG_RESET;
    1722:	2321      	movs	r3, #33	; 0x21
    1724:	425b      	negs	r3, r3
    1726:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
    1728:	e039      	b.n	179e <I2cReadDataWait+0xee>
				error = ERROR_ABORTED;
    172a:	2303      	movs	r3, #3
    172c:	425b      	negs	r3, r3
    172e:	617b      	str	r3, [r7, #20]
			goto exitError0;
    1730:	e035      	b.n	179e <I2cReadDataWait+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
    1732:	2303      	movs	r3, #3
    1734:	425b      	negs	r3, r3
    1736:	617b      	str	r3, [r7, #20]
		goto exitError0;
    1738:	e031      	b.n	179e <I2cReadDataWait+0xee>
	}
	//then read the data to handle it properly
	error = I2cReadData(data);
    173a:	68fb      	ldr	r3, [r7, #12]
    173c:	0018      	movs	r0, r3
    173e:	4b22      	ldr	r3, [pc, #136]	; (17c8 <I2cReadDataWait+0x118>)
    1740:	4798      	blx	r3
    1742:	0003      	movs	r3, r0
    1744:	617b      	str	r3, [r7, #20]
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
    1746:	693b      	ldr	r3, [r7, #16]
    1748:	687a      	ldr	r2, [r7, #4]
    174a:	0011      	movs	r1, r2
    174c:	0018      	movs	r0, r3
    174e:	4b1b      	ldr	r3, [pc, #108]	; (17bc <I2cReadDataWait+0x10c>)
    1750:	4798      	blx	r3
    1752:	0003      	movs	r3, r0
    1754:	2b01      	cmp	r3, #1
    1756:	d111      	bne.n	177c <I2cReadDataWait+0xcc>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
    1758:	4b19      	ldr	r3, [pc, #100]	; (17c0 <I2cReadDataWait+0x110>)
    175a:	4798      	blx	r3
    175c:	1e03      	subs	r3, r0, #0
    175e:	d011      	beq.n	1784 <I2cReadDataWait+0xd4>
			I2cSetTaskErrorStatus(false);
    1760:	2000      	movs	r0, #0
    1762:	4b18      	ldr	r3, [pc, #96]	; (17c4 <I2cReadDataWait+0x114>)
    1764:	4798      	blx	r3
			if(error != ERROR_NONE){
    1766:	697b      	ldr	r3, [r7, #20]
    1768:	2b00      	cmp	r3, #0
    176a:	d003      	beq.n	1774 <I2cReadDataWait+0xc4>
				error = ERROR_I2C_HANG_RESET;
    176c:	2321      	movs	r3, #33	; 0x21
    176e:	425b      	negs	r3, r3
    1770:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
    1772:	e014      	b.n	179e <I2cReadDataWait+0xee>
				error = ERROR_ABORTED;
    1774:	2303      	movs	r3, #3
    1776:	425b      	negs	r3, r3
    1778:	617b      	str	r3, [r7, #20]
			goto exitError0;
    177a:	e010      	b.n	179e <I2cReadDataWait+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
    177c:	2303      	movs	r3, #3
    177e:	425b      	negs	r3, r3
    1780:	617b      	str	r3, [r7, #20]
		goto exitError0;
    1782:	e00c      	b.n	179e <I2cReadDataWait+0xee>
	}
	//---8. Release Mutex once done
	error |= I2cFreeMutex();
    1784:	4b11      	ldr	r3, [pc, #68]	; (17cc <I2cReadDataWait+0x11c>)
    1786:	4798      	blx	r3
    1788:	0002      	movs	r2, r0
    178a:	697b      	ldr	r3, [r7, #20]
    178c:	4313      	orrs	r3, r2
    178e:	617b      	str	r3, [r7, #20]
    1790:	e002      	b.n	1798 <I2cReadDataWait+0xe8>
	if(ERROR_NONE != error) goto exit;
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	e000      	b.n	1798 <I2cReadDataWait+0xe8>
	if(ERROR_NONE != error) goto exit;
    1796:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
    1798:	697b      	ldr	r3, [r7, #20]
    179a:	e005      	b.n	17a8 <I2cReadDataWait+0xf8>
		goto exitError0;
    179c:	46c0      	nop			; (mov r8, r8)

	exitError0:
	error = I2cFreeMutex();
    179e:	4b0b      	ldr	r3, [pc, #44]	; (17cc <I2cReadDataWait+0x11c>)
    17a0:	4798      	blx	r3
    17a2:	0003      	movs	r3, r0
    17a4:	617b      	str	r3, [r7, #20]

	return error;
    17a6:	697b      	ldr	r3, [r7, #20]


}
    17a8:	0018      	movs	r0, r3
    17aa:	46bd      	mov	sp, r7
    17ac:	b006      	add	sp, #24
    17ae:	bd80      	pop	{r7, pc}
    17b0:	00001551 	.word	0x00001551
    17b4:	00001589 	.word	0x00001589
    17b8:	00001411 	.word	0x00001411
    17bc:	00006acd 	.word	0x00006acd
    17c0:	000015ad 	.word	0x000015ad
    17c4:	000015c1 	.word	0x000015c1
    17c8:	00001495 	.word	0x00001495
    17cc:	00001519 	.word	0x00001519

000017d0 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
    17d0:	b5b0      	push	{r4, r5, r7, lr}
    17d2:	b086      	sub	sp, #24
    17d4:	af00      	add	r7, sp, #0
    17d6:	60f8      	str	r0, [r7, #12]
    17d8:	0008      	movs	r0, r1
    17da:	607a      	str	r2, [r7, #4]
    17dc:	0019      	movs	r1, r3
    17de:	230b      	movs	r3, #11
    17e0:	18fb      	adds	r3, r7, r3
    17e2:	1c02      	adds	r2, r0, #0
    17e4:	701a      	strb	r2, [r3, #0]
    17e6:	2308      	movs	r3, #8
    17e8:	18fb      	adds	r3, r7, r3
    17ea:	1c0a      	adds	r2, r1, #0
    17ec:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	685c      	ldr	r4, [r3, #4]
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	6898      	ldr	r0, [r3, #8]
    17f6:	2308      	movs	r3, #8
    17f8:	18fb      	adds	r3, r7, r3
    17fa:	881d      	ldrh	r5, [r3, #0]
    17fc:	687a      	ldr	r2, [r7, #4]
    17fe:	230b      	movs	r3, #11
    1800:	18fb      	adds	r3, r7, r3
    1802:	7819      	ldrb	r1, [r3, #0]
    1804:	002b      	movs	r3, r5
    1806:	47a0      	blx	r4
    1808:	0003      	movs	r3, r0
    180a:	617b      	str	r3, [r7, #20]

  return ret;
    180c:	697b      	ldr	r3, [r7, #20]
}
    180e:	0018      	movs	r0, r3
    1810:	46bd      	mov	sp, r7
    1812:	b006      	add	sp, #24
    1814:	bdb0      	pop	{r4, r5, r7, pc}

00001816 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
    1816:	b5b0      	push	{r4, r5, r7, lr}
    1818:	b086      	sub	sp, #24
    181a:	af00      	add	r7, sp, #0
    181c:	60f8      	str	r0, [r7, #12]
    181e:	0008      	movs	r0, r1
    1820:	607a      	str	r2, [r7, #4]
    1822:	0019      	movs	r1, r3
    1824:	230b      	movs	r3, #11
    1826:	18fb      	adds	r3, r7, r3
    1828:	1c02      	adds	r2, r0, #0
    182a:	701a      	strb	r2, [r3, #0]
    182c:	2308      	movs	r3, #8
    182e:	18fb      	adds	r3, r7, r3
    1830:	1c0a      	adds	r2, r1, #0
    1832:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
    1834:	68fb      	ldr	r3, [r7, #12]
    1836:	681c      	ldr	r4, [r3, #0]
    1838:	68fb      	ldr	r3, [r7, #12]
    183a:	6898      	ldr	r0, [r3, #8]
    183c:	2308      	movs	r3, #8
    183e:	18fb      	adds	r3, r7, r3
    1840:	881d      	ldrh	r5, [r3, #0]
    1842:	687a      	ldr	r2, [r7, #4]
    1844:	230b      	movs	r3, #11
    1846:	18fb      	adds	r3, r7, r3
    1848:	7819      	ldrb	r1, [r3, #0]
    184a:	002b      	movs	r3, r5
    184c:	47a0      	blx	r4
    184e:	0003      	movs	r3, r0
    1850:	617b      	str	r3, [r7, #20]

  return ret;
    1852:	697b      	ldr	r3, [r7, #20]
}
    1854:	0018      	movs	r0, r3
    1856:	46bd      	mov	sp, r7
    1858:	b006      	add	sp, #24
    185a:	bdb0      	pop	{r4, r5, r7, pc}

0000185c <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
    185c:	b580      	push	{r7, lr}
    185e:	b082      	sub	sp, #8
    1860:	af00      	add	r7, sp, #0
    1862:	0002      	movs	r2, r0
    1864:	1dbb      	adds	r3, r7, #6
    1866:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
    1868:	1dbb      	adds	r3, r7, #6
    186a:	2200      	movs	r2, #0
    186c:	5e9a      	ldrsh	r2, [r3, r2]
    186e:	4b06      	ldr	r3, [pc, #24]	; (1888 <lsm6dso_from_fs2_to_mg+0x2c>)
    1870:	0010      	movs	r0, r2
    1872:	4798      	blx	r3
    1874:	1c02      	adds	r2, r0, #0
    1876:	4b05      	ldr	r3, [pc, #20]	; (188c <lsm6dso_from_fs2_to_mg+0x30>)
    1878:	4905      	ldr	r1, [pc, #20]	; (1890 <lsm6dso_from_fs2_to_mg+0x34>)
    187a:	1c10      	adds	r0, r2, #0
    187c:	4798      	blx	r3
    187e:	1c03      	adds	r3, r0, #0
}
    1880:	1c18      	adds	r0, r3, #0
    1882:	46bd      	mov	sp, r7
    1884:	b002      	add	sp, #8
    1886:	bd80      	pop	{r7, pc}
    1888:	0000c7f1 	.word	0x0000c7f1
    188c:	0000c571 	.word	0x0000c571
    1890:	3d79db23 	.word	0x3d79db23

00001894 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
    1894:	b590      	push	{r4, r7, lr}
    1896:	b085      	sub	sp, #20
    1898:	af00      	add	r7, sp, #0
    189a:	6078      	str	r0, [r7, #4]
    189c:	000a      	movs	r2, r1
    189e:	1cfb      	adds	r3, r7, #3
    18a0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    18a2:	2308      	movs	r3, #8
    18a4:	18fa      	adds	r2, r7, r3
    18a6:	6878      	ldr	r0, [r7, #4]
    18a8:	2301      	movs	r3, #1
    18aa:	2110      	movs	r1, #16
    18ac:	4c12      	ldr	r4, [pc, #72]	; (18f8 <lsm6dso_xl_full_scale_set+0x64>)
    18ae:	47a0      	blx	r4
    18b0:	0003      	movs	r3, r0
    18b2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    18b4:	68fb      	ldr	r3, [r7, #12]
    18b6:	2b00      	cmp	r3, #0
    18b8:	d119      	bne.n	18ee <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
    18ba:	1cfb      	adds	r3, r7, #3
    18bc:	781b      	ldrb	r3, [r3, #0]
    18be:	2203      	movs	r2, #3
    18c0:	4013      	ands	r3, r2
    18c2:	b2da      	uxtb	r2, r3
    18c4:	2308      	movs	r3, #8
    18c6:	18fb      	adds	r3, r7, r3
    18c8:	2103      	movs	r1, #3
    18ca:	400a      	ands	r2, r1
    18cc:	0090      	lsls	r0, r2, #2
    18ce:	781a      	ldrb	r2, [r3, #0]
    18d0:	210c      	movs	r1, #12
    18d2:	438a      	bics	r2, r1
    18d4:	1c11      	adds	r1, r2, #0
    18d6:	1c02      	adds	r2, r0, #0
    18d8:	430a      	orrs	r2, r1
    18da:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    18dc:	2308      	movs	r3, #8
    18de:	18fa      	adds	r2, r7, r3
    18e0:	6878      	ldr	r0, [r7, #4]
    18e2:	2301      	movs	r3, #1
    18e4:	2110      	movs	r1, #16
    18e6:	4c05      	ldr	r4, [pc, #20]	; (18fc <lsm6dso_xl_full_scale_set+0x68>)
    18e8:	47a0      	blx	r4
    18ea:	0003      	movs	r3, r0
    18ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    18ee:	68fb      	ldr	r3, [r7, #12]
}
    18f0:	0018      	movs	r0, r3
    18f2:	46bd      	mov	sp, r7
    18f4:	b005      	add	sp, #20
    18f6:	bd90      	pop	{r4, r7, pc}
    18f8:	000017d1 	.word	0x000017d1
    18fc:	00001817 	.word	0x00001817

00001900 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
    1900:	b590      	push	{r4, r7, lr}
    1902:	b087      	sub	sp, #28
    1904:	af00      	add	r7, sp, #0
    1906:	6078      	str	r0, [r7, #4]
    1908:	000a      	movs	r2, r1
    190a:	1cfb      	adds	r3, r7, #3
    190c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
    190e:	2317      	movs	r3, #23
    1910:	18fb      	adds	r3, r7, r3
    1912:	1cfa      	adds	r2, r7, #3
    1914:	7812      	ldrb	r2, [r2, #0]
    1916:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    1918:	230c      	movs	r3, #12
    191a:	18fa      	adds	r2, r7, r3
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	0011      	movs	r1, r2
    1920:	0018      	movs	r0, r3
    1922:	4ba4      	ldr	r3, [pc, #656]	; (1bb4 <lsm6dso_xl_data_rate_set+0x2b4>)
    1924:	4798      	blx	r3
    1926:	0003      	movs	r3, r0
    1928:	613b      	str	r3, [r7, #16]

  if (ret == 0)
    192a:	693b      	ldr	r3, [r7, #16]
    192c:	2b00      	cmp	r3, #0
    192e:	d000      	beq.n	1932 <lsm6dso_xl_data_rate_set+0x32>
    1930:	e113      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1932:	230c      	movs	r3, #12
    1934:	18fb      	adds	r3, r7, r3
    1936:	781b      	ldrb	r3, [r3, #0]
    1938:	07db      	lsls	r3, r3, #31
    193a:	0fdb      	lsrs	r3, r3, #31
    193c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    193e:	230c      	movs	r3, #12
    1940:	18fb      	adds	r3, r7, r3
    1942:	781b      	ldrb	r3, [r3, #0]
    1944:	079b      	lsls	r3, r3, #30
    1946:	0fdb      	lsrs	r3, r3, #31
    1948:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    194a:	4313      	orrs	r3, r2
    194c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    194e:	230c      	movs	r3, #12
    1950:	18fb      	adds	r3, r7, r3
    1952:	781b      	ldrb	r3, [r3, #0]
    1954:	075b      	lsls	r3, r3, #29
    1956:	0fdb      	lsrs	r3, r3, #31
    1958:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    195a:	4313      	orrs	r3, r2
    195c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    195e:	230c      	movs	r3, #12
    1960:	18fb      	adds	r3, r7, r3
    1962:	781b      	ldrb	r3, [r3, #0]
    1964:	071b      	lsls	r3, r3, #28
    1966:	0fdb      	lsrs	r3, r3, #31
    1968:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    196a:	4313      	orrs	r3, r2
    196c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    196e:	230c      	movs	r3, #12
    1970:	18fb      	adds	r3, r7, r3
    1972:	781b      	ldrb	r3, [r3, #0]
    1974:	06db      	lsls	r3, r3, #27
    1976:	0fdb      	lsrs	r3, r3, #31
    1978:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    197a:	4313      	orrs	r3, r2
    197c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    197e:	230c      	movs	r3, #12
    1980:	18fb      	adds	r3, r7, r3
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	069b      	lsls	r3, r3, #26
    1986:	0fdb      	lsrs	r3, r3, #31
    1988:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    198a:	4313      	orrs	r3, r2
    198c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    198e:	230c      	movs	r3, #12
    1990:	18fb      	adds	r3, r7, r3
    1992:	781b      	ldrb	r3, [r3, #0]
    1994:	065b      	lsls	r3, r3, #25
    1996:	0fdb      	lsrs	r3, r3, #31
    1998:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    199a:	4313      	orrs	r3, r2
    199c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    199e:	230c      	movs	r3, #12
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	061b      	lsls	r3, r3, #24
    19a6:	0fdb      	lsrs	r3, r3, #31
    19a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    19aa:	4313      	orrs	r3, r2
    19ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    19ae:	230c      	movs	r3, #12
    19b0:	18fb      	adds	r3, r7, r3
    19b2:	785b      	ldrb	r3, [r3, #1]
    19b4:	07db      	lsls	r3, r3, #31
    19b6:	0fdb      	lsrs	r3, r3, #31
    19b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    19ba:	4313      	orrs	r3, r2
    19bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    19be:	230c      	movs	r3, #12
    19c0:	18fb      	adds	r3, r7, r3
    19c2:	785b      	ldrb	r3, [r3, #1]
    19c4:	079b      	lsls	r3, r3, #30
    19c6:	0fdb      	lsrs	r3, r3, #31
    19c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    19ca:	4313      	orrs	r3, r2
    19cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    19ce:	230c      	movs	r3, #12
    19d0:	18fb      	adds	r3, r7, r3
    19d2:	785b      	ldrb	r3, [r3, #1]
    19d4:	075b      	lsls	r3, r3, #29
    19d6:	0fdb      	lsrs	r3, r3, #31
    19d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    19da:	4313      	orrs	r3, r2
    19dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    19de:	230c      	movs	r3, #12
    19e0:	18fb      	adds	r3, r7, r3
    19e2:	785b      	ldrb	r3, [r3, #1]
    19e4:	071b      	lsls	r3, r3, #28
    19e6:	0fdb      	lsrs	r3, r3, #31
    19e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    19ea:	4313      	orrs	r3, r2
    19ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    19ee:	230c      	movs	r3, #12
    19f0:	18fb      	adds	r3, r7, r3
    19f2:	785b      	ldrb	r3, [r3, #1]
    19f4:	06db      	lsls	r3, r3, #27
    19f6:	0fdb      	lsrs	r3, r3, #31
    19f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    19fa:	4313      	orrs	r3, r2
    19fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    19fe:	230c      	movs	r3, #12
    1a00:	18fb      	adds	r3, r7, r3
    1a02:	785b      	ldrb	r3, [r3, #1]
    1a04:	069b      	lsls	r3, r3, #26
    1a06:	0fdb      	lsrs	r3, r3, #31
    1a08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    1a0a:	4313      	orrs	r3, r2
    1a0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    1a0e:	230c      	movs	r3, #12
    1a10:	18fb      	adds	r3, r7, r3
    1a12:	785b      	ldrb	r3, [r3, #1]
    1a14:	065b      	lsls	r3, r3, #25
    1a16:	0fdb      	lsrs	r3, r3, #31
    1a18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    1a1a:	4313      	orrs	r3, r2
    1a1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    1a1e:	230c      	movs	r3, #12
    1a20:	18fb      	adds	r3, r7, r3
    1a22:	785b      	ldrb	r3, [r3, #1]
    1a24:	061b      	lsls	r3, r3, #24
    1a26:	0fdb      	lsrs	r3, r3, #31
    1a28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    1a2a:	4313      	orrs	r3, r2
    1a2c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1a2e:	2b01      	cmp	r3, #1
    1a30:	d000      	beq.n	1a34 <lsm6dso_xl_data_rate_set+0x134>
    1a32:	e092      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    1a34:	230b      	movs	r3, #11
    1a36:	18fa      	adds	r2, r7, r3
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	0011      	movs	r1, r2
    1a3c:	0018      	movs	r0, r3
    1a3e:	4b5e      	ldr	r3, [pc, #376]	; (1bb8 <lsm6dso_xl_data_rate_set+0x2b8>)
    1a40:	4798      	blx	r3
    1a42:	0003      	movs	r3, r0
    1a44:	613b      	str	r3, [r7, #16]

      if (ret == 0)
    1a46:	693b      	ldr	r3, [r7, #16]
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d000      	beq.n	1a4e <lsm6dso_xl_data_rate_set+0x14e>
    1a4c:	e085      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
    1a4e:	230b      	movs	r3, #11
    1a50:	18fb      	adds	r3, r7, r3
    1a52:	781b      	ldrb	r3, [r3, #0]
    1a54:	2b01      	cmp	r3, #1
    1a56:	d017      	beq.n	1a88 <lsm6dso_xl_data_rate_set+0x188>
    1a58:	dc02      	bgt.n	1a60 <lsm6dso_xl_data_rate_set+0x160>
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d005      	beq.n	1a6a <lsm6dso_xl_data_rate_set+0x16a>
    1a5e:	e076      	b.n	1b4e <lsm6dso_xl_data_rate_set+0x24e>
    1a60:	2b02      	cmp	r3, #2
    1a62:	d029      	beq.n	1ab8 <lsm6dso_xl_data_rate_set+0x1b8>
    1a64:	2b03      	cmp	r3, #3
    1a66:	d048      	beq.n	1afa <lsm6dso_xl_data_rate_set+0x1fa>
    1a68:	e071      	b.n	1b4e <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
    1a6a:	1cfb      	adds	r3, r7, #3
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	2b00      	cmp	r3, #0
    1a70:	d104      	bne.n	1a7c <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    1a72:	2317      	movs	r3, #23
    1a74:	18fb      	adds	r3, r7, r3
    1a76:	2201      	movs	r2, #1
    1a78:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    1a7a:	e06e      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
    1a7c:	2317      	movs	r3, #23
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	1cfa      	adds	r2, r7, #3
    1a82:	7812      	ldrb	r2, [r2, #0]
    1a84:	701a      	strb	r2, [r3, #0]
            break;
    1a86:	e068      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    1a88:	1cfb      	adds	r3, r7, #3
    1a8a:	781b      	ldrb	r3, [r3, #0]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d104      	bne.n	1a9a <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
    1a90:	2317      	movs	r3, #23
    1a92:	18fb      	adds	r3, r7, r3
    1a94:	2202      	movs	r2, #2
    1a96:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    1a98:	e05f      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    1a9a:	1cfb      	adds	r3, r7, #3
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	2b01      	cmp	r3, #1
    1aa0:	d104      	bne.n	1aac <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
    1aa2:	2317      	movs	r3, #23
    1aa4:	18fb      	adds	r3, r7, r3
    1aa6:	2202      	movs	r2, #2
    1aa8:	701a      	strb	r2, [r3, #0]
            break;
    1aaa:	e056      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
    1aac:	2317      	movs	r3, #23
    1aae:	18fb      	adds	r3, r7, r3
    1ab0:	1cfa      	adds	r2, r7, #3
    1ab2:	7812      	ldrb	r2, [r2, #0]
    1ab4:	701a      	strb	r2, [r3, #0]
            break;
    1ab6:	e050      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    1ab8:	1cfb      	adds	r3, r7, #3
    1aba:	781b      	ldrb	r3, [r3, #0]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d104      	bne.n	1aca <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    1ac0:	2317      	movs	r3, #23
    1ac2:	18fb      	adds	r3, r7, r3
    1ac4:	2203      	movs	r2, #3
    1ac6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    1ac8:	e047      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    1aca:	1cfb      	adds	r3, r7, #3
    1acc:	781b      	ldrb	r3, [r3, #0]
    1ace:	2b01      	cmp	r3, #1
    1ad0:	d104      	bne.n	1adc <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    1ad2:	2317      	movs	r3, #23
    1ad4:	18fb      	adds	r3, r7, r3
    1ad6:	2203      	movs	r2, #3
    1ad8:	701a      	strb	r2, [r3, #0]
            break;
    1ada:	e03e      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
    1adc:	1cfb      	adds	r3, r7, #3
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	2b02      	cmp	r3, #2
    1ae2:	d104      	bne.n	1aee <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
    1ae4:	2317      	movs	r3, #23
    1ae6:	18fb      	adds	r3, r7, r3
    1ae8:	2203      	movs	r2, #3
    1aea:	701a      	strb	r2, [r3, #0]
            break;
    1aec:	e035      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
    1aee:	2317      	movs	r3, #23
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	1cfa      	adds	r2, r7, #3
    1af4:	7812      	ldrb	r2, [r2, #0]
    1af6:	701a      	strb	r2, [r3, #0]
            break;
    1af8:	e02f      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
    1afa:	1cfb      	adds	r3, r7, #3
    1afc:	781b      	ldrb	r3, [r3, #0]
    1afe:	2b00      	cmp	r3, #0
    1b00:	d104      	bne.n	1b0c <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    1b02:	2317      	movs	r3, #23
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	2204      	movs	r2, #4
    1b08:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
    1b0a:	e026      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
    1b0c:	1cfb      	adds	r3, r7, #3
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	2b01      	cmp	r3, #1
    1b12:	d104      	bne.n	1b1e <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    1b14:	2317      	movs	r3, #23
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	2204      	movs	r2, #4
    1b1a:	701a      	strb	r2, [r3, #0]
            break;
    1b1c:	e01d      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
    1b1e:	1cfb      	adds	r3, r7, #3
    1b20:	781b      	ldrb	r3, [r3, #0]
    1b22:	2b02      	cmp	r3, #2
    1b24:	d104      	bne.n	1b30 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    1b26:	2317      	movs	r3, #23
    1b28:	18fb      	adds	r3, r7, r3
    1b2a:	2204      	movs	r2, #4
    1b2c:	701a      	strb	r2, [r3, #0]
            break;
    1b2e:	e014      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
    1b30:	1cfb      	adds	r3, r7, #3
    1b32:	781b      	ldrb	r3, [r3, #0]
    1b34:	2b03      	cmp	r3, #3
    1b36:	d104      	bne.n	1b42 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
    1b38:	2317      	movs	r3, #23
    1b3a:	18fb      	adds	r3, r7, r3
    1b3c:	2204      	movs	r2, #4
    1b3e:	701a      	strb	r2, [r3, #0]
            break;
    1b40:	e00b      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
    1b42:	2317      	movs	r3, #23
    1b44:	18fb      	adds	r3, r7, r3
    1b46:	1cfa      	adds	r2, r7, #3
    1b48:	7812      	ldrb	r2, [r2, #0]
    1b4a:	701a      	strb	r2, [r3, #0]
            break;
    1b4c:	e005      	b.n	1b5a <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
    1b4e:	2317      	movs	r3, #23
    1b50:	18fb      	adds	r3, r7, r3
    1b52:	1cfa      	adds	r2, r7, #3
    1b54:	7812      	ldrb	r2, [r2, #0]
    1b56:	701a      	strb	r2, [r3, #0]
            break;
    1b58:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
    1b5a:	693b      	ldr	r3, [r7, #16]
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d108      	bne.n	1b72 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    1b60:	2308      	movs	r3, #8
    1b62:	18fa      	adds	r2, r7, r3
    1b64:	6878      	ldr	r0, [r7, #4]
    1b66:	2301      	movs	r3, #1
    1b68:	2110      	movs	r1, #16
    1b6a:	4c14      	ldr	r4, [pc, #80]	; (1bbc <lsm6dso_xl_data_rate_set+0x2bc>)
    1b6c:	47a0      	blx	r4
    1b6e:	0003      	movs	r3, r0
    1b70:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
    1b72:	693b      	ldr	r3, [r7, #16]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d118      	bne.n	1baa <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
    1b78:	2317      	movs	r3, #23
    1b7a:	18fb      	adds	r3, r7, r3
    1b7c:	781b      	ldrb	r3, [r3, #0]
    1b7e:	220f      	movs	r2, #15
    1b80:	4013      	ands	r3, r2
    1b82:	b2da      	uxtb	r2, r3
    1b84:	2308      	movs	r3, #8
    1b86:	18fb      	adds	r3, r7, r3
    1b88:	0110      	lsls	r0, r2, #4
    1b8a:	781a      	ldrb	r2, [r3, #0]
    1b8c:	210f      	movs	r1, #15
    1b8e:	400a      	ands	r2, r1
    1b90:	1c11      	adds	r1, r2, #0
    1b92:	1c02      	adds	r2, r0, #0
    1b94:	430a      	orrs	r2, r1
    1b96:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    1b98:	2308      	movs	r3, #8
    1b9a:	18fa      	adds	r2, r7, r3
    1b9c:	6878      	ldr	r0, [r7, #4]
    1b9e:	2301      	movs	r3, #1
    1ba0:	2110      	movs	r1, #16
    1ba2:	4c07      	ldr	r4, [pc, #28]	; (1bc0 <lsm6dso_xl_data_rate_set+0x2c0>)
    1ba4:	47a0      	blx	r4
    1ba6:	0003      	movs	r3, r0
    1ba8:	613b      	str	r3, [r7, #16]
  }

  return ret;
    1baa:	693b      	ldr	r3, [r7, #16]
}
    1bac:	0018      	movs	r0, r3
    1bae:	46bd      	mov	sp, r7
    1bb0:	b007      	add	sp, #28
    1bb2:	bd90      	pop	{r4, r7, pc}
    1bb4:	000023dd 	.word	0x000023dd
    1bb8:	00002431 	.word	0x00002431
    1bbc:	000017d1 	.word	0x000017d1
    1bc0:	00001817 	.word	0x00001817

00001bc4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
    1bc4:	b590      	push	{r4, r7, lr}
    1bc6:	b085      	sub	sp, #20
    1bc8:	af00      	add	r7, sp, #0
    1bca:	6078      	str	r0, [r7, #4]
    1bcc:	000a      	movs	r2, r1
    1bce:	1cfb      	adds	r3, r7, #3
    1bd0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    1bd2:	2308      	movs	r3, #8
    1bd4:	18fa      	adds	r2, r7, r3
    1bd6:	6878      	ldr	r0, [r7, #4]
    1bd8:	2301      	movs	r3, #1
    1bda:	2111      	movs	r1, #17
    1bdc:	4c12      	ldr	r4, [pc, #72]	; (1c28 <lsm6dso_gy_full_scale_set+0x64>)
    1bde:	47a0      	blx	r4
    1be0:	0003      	movs	r3, r0
    1be2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    1be4:	68fb      	ldr	r3, [r7, #12]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d119      	bne.n	1c1e <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
    1bea:	1cfb      	adds	r3, r7, #3
    1bec:	781b      	ldrb	r3, [r3, #0]
    1bee:	2207      	movs	r2, #7
    1bf0:	4013      	ands	r3, r2
    1bf2:	b2da      	uxtb	r2, r3
    1bf4:	2308      	movs	r3, #8
    1bf6:	18fb      	adds	r3, r7, r3
    1bf8:	2107      	movs	r1, #7
    1bfa:	400a      	ands	r2, r1
    1bfc:	1890      	adds	r0, r2, r2
    1bfe:	781a      	ldrb	r2, [r3, #0]
    1c00:	210e      	movs	r1, #14
    1c02:	438a      	bics	r2, r1
    1c04:	1c11      	adds	r1, r2, #0
    1c06:	1c02      	adds	r2, r0, #0
    1c08:	430a      	orrs	r2, r1
    1c0a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    1c0c:	2308      	movs	r3, #8
    1c0e:	18fa      	adds	r2, r7, r3
    1c10:	6878      	ldr	r0, [r7, #4]
    1c12:	2301      	movs	r3, #1
    1c14:	2111      	movs	r1, #17
    1c16:	4c05      	ldr	r4, [pc, #20]	; (1c2c <lsm6dso_gy_full_scale_set+0x68>)
    1c18:	47a0      	blx	r4
    1c1a:	0003      	movs	r3, r0
    1c1c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    1c1e:	68fb      	ldr	r3, [r7, #12]
}
    1c20:	0018      	movs	r0, r3
    1c22:	46bd      	mov	sp, r7
    1c24:	b005      	add	sp, #20
    1c26:	bd90      	pop	{r4, r7, pc}
    1c28:	000017d1 	.word	0x000017d1
    1c2c:	00001817 	.word	0x00001817

00001c30 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
    1c30:	b590      	push	{r4, r7, lr}
    1c32:	b087      	sub	sp, #28
    1c34:	af00      	add	r7, sp, #0
    1c36:	6078      	str	r0, [r7, #4]
    1c38:	000a      	movs	r2, r1
    1c3a:	1cfb      	adds	r3, r7, #3
    1c3c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
    1c3e:	2317      	movs	r3, #23
    1c40:	18fb      	adds	r3, r7, r3
    1c42:	1cfa      	adds	r2, r7, #3
    1c44:	7812      	ldrb	r2, [r2, #0]
    1c46:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    1c48:	230c      	movs	r3, #12
    1c4a:	18fa      	adds	r2, r7, r3
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	0011      	movs	r1, r2
    1c50:	0018      	movs	r0, r3
    1c52:	4ba4      	ldr	r3, [pc, #656]	; (1ee4 <lsm6dso_gy_data_rate_set+0x2b4>)
    1c54:	4798      	blx	r3
    1c56:	0003      	movs	r3, r0
    1c58:	613b      	str	r3, [r7, #16]

  if (ret == 0)
    1c5a:	693b      	ldr	r3, [r7, #16]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d000      	beq.n	1c62 <lsm6dso_gy_data_rate_set+0x32>
    1c60:	e113      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1c62:	230c      	movs	r3, #12
    1c64:	18fb      	adds	r3, r7, r3
    1c66:	781b      	ldrb	r3, [r3, #0]
    1c68:	07db      	lsls	r3, r3, #31
    1c6a:	0fdb      	lsrs	r3, r3, #31
    1c6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    1c6e:	230c      	movs	r3, #12
    1c70:	18fb      	adds	r3, r7, r3
    1c72:	781b      	ldrb	r3, [r3, #0]
    1c74:	079b      	lsls	r3, r3, #30
    1c76:	0fdb      	lsrs	r3, r3, #31
    1c78:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1c7a:	4313      	orrs	r3, r2
    1c7c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    1c7e:	230c      	movs	r3, #12
    1c80:	18fb      	adds	r3, r7, r3
    1c82:	781b      	ldrb	r3, [r3, #0]
    1c84:	075b      	lsls	r3, r3, #29
    1c86:	0fdb      	lsrs	r3, r3, #31
    1c88:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
    1c8a:	4313      	orrs	r3, r2
    1c8c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    1c8e:	230c      	movs	r3, #12
    1c90:	18fb      	adds	r3, r7, r3
    1c92:	781b      	ldrb	r3, [r3, #0]
    1c94:	071b      	lsls	r3, r3, #28
    1c96:	0fdb      	lsrs	r3, r3, #31
    1c98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    1c9a:	4313      	orrs	r3, r2
    1c9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    1c9e:	230c      	movs	r3, #12
    1ca0:	18fb      	adds	r3, r7, r3
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	06db      	lsls	r3, r3, #27
    1ca6:	0fdb      	lsrs	r3, r3, #31
    1ca8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
    1caa:	4313      	orrs	r3, r2
    1cac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    1cae:	230c      	movs	r3, #12
    1cb0:	18fb      	adds	r3, r7, r3
    1cb2:	781b      	ldrb	r3, [r3, #0]
    1cb4:	069b      	lsls	r3, r3, #26
    1cb6:	0fdb      	lsrs	r3, r3, #31
    1cb8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
    1cba:	4313      	orrs	r3, r2
    1cbc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    1cbe:	230c      	movs	r3, #12
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	781b      	ldrb	r3, [r3, #0]
    1cc4:	065b      	lsls	r3, r3, #25
    1cc6:	0fdb      	lsrs	r3, r3, #31
    1cc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    1cca:	4313      	orrs	r3, r2
    1ccc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    1cce:	230c      	movs	r3, #12
    1cd0:	18fb      	adds	r3, r7, r3
    1cd2:	781b      	ldrb	r3, [r3, #0]
    1cd4:	061b      	lsls	r3, r3, #24
    1cd6:	0fdb      	lsrs	r3, r3, #31
    1cd8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    1cda:	4313      	orrs	r3, r2
    1cdc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    1cde:	230c      	movs	r3, #12
    1ce0:	18fb      	adds	r3, r7, r3
    1ce2:	785b      	ldrb	r3, [r3, #1]
    1ce4:	07db      	lsls	r3, r3, #31
    1ce6:	0fdb      	lsrs	r3, r3, #31
    1ce8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
    1cea:	4313      	orrs	r3, r2
    1cec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    1cee:	230c      	movs	r3, #12
    1cf0:	18fb      	adds	r3, r7, r3
    1cf2:	785b      	ldrb	r3, [r3, #1]
    1cf4:	079b      	lsls	r3, r3, #30
    1cf6:	0fdb      	lsrs	r3, r3, #31
    1cf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
    1cfa:	4313      	orrs	r3, r2
    1cfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    1cfe:	230c      	movs	r3, #12
    1d00:	18fb      	adds	r3, r7, r3
    1d02:	785b      	ldrb	r3, [r3, #1]
    1d04:	075b      	lsls	r3, r3, #29
    1d06:	0fdb      	lsrs	r3, r3, #31
    1d08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
    1d0a:	4313      	orrs	r3, r2
    1d0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    1d0e:	230c      	movs	r3, #12
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	785b      	ldrb	r3, [r3, #1]
    1d14:	071b      	lsls	r3, r3, #28
    1d16:	0fdb      	lsrs	r3, r3, #31
    1d18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
    1d1a:	4313      	orrs	r3, r2
    1d1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    1d1e:	230c      	movs	r3, #12
    1d20:	18fb      	adds	r3, r7, r3
    1d22:	785b      	ldrb	r3, [r3, #1]
    1d24:	06db      	lsls	r3, r3, #27
    1d26:	0fdb      	lsrs	r3, r3, #31
    1d28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
    1d2a:	4313      	orrs	r3, r2
    1d2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    1d2e:	230c      	movs	r3, #12
    1d30:	18fb      	adds	r3, r7, r3
    1d32:	785b      	ldrb	r3, [r3, #1]
    1d34:	069b      	lsls	r3, r3, #26
    1d36:	0fdb      	lsrs	r3, r3, #31
    1d38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
    1d3a:	4313      	orrs	r3, r2
    1d3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    1d3e:	230c      	movs	r3, #12
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	785b      	ldrb	r3, [r3, #1]
    1d44:	065b      	lsls	r3, r3, #25
    1d46:	0fdb      	lsrs	r3, r3, #31
    1d48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
    1d4a:	4313      	orrs	r3, r2
    1d4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    1d4e:	230c      	movs	r3, #12
    1d50:	18fb      	adds	r3, r7, r3
    1d52:	785b      	ldrb	r3, [r3, #1]
    1d54:	061b      	lsls	r3, r3, #24
    1d56:	0fdb      	lsrs	r3, r3, #31
    1d58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
    1d5a:	4313      	orrs	r3, r2
    1d5c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1d5e:	2b01      	cmp	r3, #1
    1d60:	d000      	beq.n	1d64 <lsm6dso_gy_data_rate_set+0x134>
    1d62:	e092      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    1d64:	230b      	movs	r3, #11
    1d66:	18fa      	adds	r2, r7, r3
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	0011      	movs	r1, r2
    1d6c:	0018      	movs	r0, r3
    1d6e:	4b5e      	ldr	r3, [pc, #376]	; (1ee8 <lsm6dso_gy_data_rate_set+0x2b8>)
    1d70:	4798      	blx	r3
    1d72:	0003      	movs	r3, r0
    1d74:	613b      	str	r3, [r7, #16]

      if (ret == 0)
    1d76:	693b      	ldr	r3, [r7, #16]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d000      	beq.n	1d7e <lsm6dso_gy_data_rate_set+0x14e>
    1d7c:	e085      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
    1d7e:	230b      	movs	r3, #11
    1d80:	18fb      	adds	r3, r7, r3
    1d82:	781b      	ldrb	r3, [r3, #0]
    1d84:	2b01      	cmp	r3, #1
    1d86:	d017      	beq.n	1db8 <lsm6dso_gy_data_rate_set+0x188>
    1d88:	dc02      	bgt.n	1d90 <lsm6dso_gy_data_rate_set+0x160>
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d005      	beq.n	1d9a <lsm6dso_gy_data_rate_set+0x16a>
    1d8e:	e076      	b.n	1e7e <lsm6dso_gy_data_rate_set+0x24e>
    1d90:	2b02      	cmp	r3, #2
    1d92:	d029      	beq.n	1de8 <lsm6dso_gy_data_rate_set+0x1b8>
    1d94:	2b03      	cmp	r3, #3
    1d96:	d048      	beq.n	1e2a <lsm6dso_gy_data_rate_set+0x1fa>
    1d98:	e071      	b.n	1e7e <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
    1d9a:	1cfb      	adds	r3, r7, #3
    1d9c:	781b      	ldrb	r3, [r3, #0]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d104      	bne.n	1dac <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    1da2:	2317      	movs	r3, #23
    1da4:	18fb      	adds	r3, r7, r3
    1da6:	2201      	movs	r2, #1
    1da8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    1daa:	e06e      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    1dac:	2317      	movs	r3, #23
    1dae:	18fb      	adds	r3, r7, r3
    1db0:	1cfa      	adds	r2, r7, #3
    1db2:	7812      	ldrb	r2, [r2, #0]
    1db4:	701a      	strb	r2, [r3, #0]
            break;
    1db6:	e068      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    1db8:	1cfb      	adds	r3, r7, #3
    1dba:	781b      	ldrb	r3, [r3, #0]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d104      	bne.n	1dca <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
    1dc0:	2317      	movs	r3, #23
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	2202      	movs	r2, #2
    1dc6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    1dc8:	e05f      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    1dca:	1cfb      	adds	r3, r7, #3
    1dcc:	781b      	ldrb	r3, [r3, #0]
    1dce:	2b01      	cmp	r3, #1
    1dd0:	d104      	bne.n	1ddc <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
    1dd2:	2317      	movs	r3, #23
    1dd4:	18fb      	adds	r3, r7, r3
    1dd6:	2202      	movs	r2, #2
    1dd8:	701a      	strb	r2, [r3, #0]
            break;
    1dda:	e056      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    1ddc:	2317      	movs	r3, #23
    1dde:	18fb      	adds	r3, r7, r3
    1de0:	1cfa      	adds	r2, r7, #3
    1de2:	7812      	ldrb	r2, [r2, #0]
    1de4:	701a      	strb	r2, [r3, #0]
            break;
    1de6:	e050      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    1de8:	1cfb      	adds	r3, r7, #3
    1dea:	781b      	ldrb	r3, [r3, #0]
    1dec:	2b00      	cmp	r3, #0
    1dee:	d104      	bne.n	1dfa <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    1df0:	2317      	movs	r3, #23
    1df2:	18fb      	adds	r3, r7, r3
    1df4:	2203      	movs	r2, #3
    1df6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    1df8:	e047      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    1dfa:	1cfb      	adds	r3, r7, #3
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	2b01      	cmp	r3, #1
    1e00:	d104      	bne.n	1e0c <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    1e02:	2317      	movs	r3, #23
    1e04:	18fb      	adds	r3, r7, r3
    1e06:	2203      	movs	r2, #3
    1e08:	701a      	strb	r2, [r3, #0]
            break;
    1e0a:	e03e      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
    1e0c:	1cfb      	adds	r3, r7, #3
    1e0e:	781b      	ldrb	r3, [r3, #0]
    1e10:	2b02      	cmp	r3, #2
    1e12:	d104      	bne.n	1e1e <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
    1e14:	2317      	movs	r3, #23
    1e16:	18fb      	adds	r3, r7, r3
    1e18:	2203      	movs	r2, #3
    1e1a:	701a      	strb	r2, [r3, #0]
            break;
    1e1c:	e035      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    1e1e:	2317      	movs	r3, #23
    1e20:	18fb      	adds	r3, r7, r3
    1e22:	1cfa      	adds	r2, r7, #3
    1e24:	7812      	ldrb	r2, [r2, #0]
    1e26:	701a      	strb	r2, [r3, #0]
            break;
    1e28:	e02f      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
    1e2a:	1cfb      	adds	r3, r7, #3
    1e2c:	781b      	ldrb	r3, [r3, #0]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d104      	bne.n	1e3c <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    1e32:	2317      	movs	r3, #23
    1e34:	18fb      	adds	r3, r7, r3
    1e36:	2204      	movs	r2, #4
    1e38:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
    1e3a:	e026      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
    1e3c:	1cfb      	adds	r3, r7, #3
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	2b01      	cmp	r3, #1
    1e42:	d104      	bne.n	1e4e <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    1e44:	2317      	movs	r3, #23
    1e46:	18fb      	adds	r3, r7, r3
    1e48:	2204      	movs	r2, #4
    1e4a:	701a      	strb	r2, [r3, #0]
            break;
    1e4c:	e01d      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
    1e4e:	1cfb      	adds	r3, r7, #3
    1e50:	781b      	ldrb	r3, [r3, #0]
    1e52:	2b02      	cmp	r3, #2
    1e54:	d104      	bne.n	1e60 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    1e56:	2317      	movs	r3, #23
    1e58:	18fb      	adds	r3, r7, r3
    1e5a:	2204      	movs	r2, #4
    1e5c:	701a      	strb	r2, [r3, #0]
            break;
    1e5e:	e014      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
    1e60:	1cfb      	adds	r3, r7, #3
    1e62:	781b      	ldrb	r3, [r3, #0]
    1e64:	2b03      	cmp	r3, #3
    1e66:	d104      	bne.n	1e72 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
    1e68:	2317      	movs	r3, #23
    1e6a:	18fb      	adds	r3, r7, r3
    1e6c:	2204      	movs	r2, #4
    1e6e:	701a      	strb	r2, [r3, #0]
            break;
    1e70:	e00b      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
    1e72:	2317      	movs	r3, #23
    1e74:	18fb      	adds	r3, r7, r3
    1e76:	1cfa      	adds	r2, r7, #3
    1e78:	7812      	ldrb	r2, [r2, #0]
    1e7a:	701a      	strb	r2, [r3, #0]
            break;
    1e7c:	e005      	b.n	1e8a <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
    1e7e:	2317      	movs	r3, #23
    1e80:	18fb      	adds	r3, r7, r3
    1e82:	1cfa      	adds	r2, r7, #3
    1e84:	7812      	ldrb	r2, [r2, #0]
    1e86:	701a      	strb	r2, [r3, #0]
            break;
    1e88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
    1e8a:	693b      	ldr	r3, [r7, #16]
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d108      	bne.n	1ea2 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    1e90:	2308      	movs	r3, #8
    1e92:	18fa      	adds	r2, r7, r3
    1e94:	6878      	ldr	r0, [r7, #4]
    1e96:	2301      	movs	r3, #1
    1e98:	2111      	movs	r1, #17
    1e9a:	4c14      	ldr	r4, [pc, #80]	; (1eec <lsm6dso_gy_data_rate_set+0x2bc>)
    1e9c:	47a0      	blx	r4
    1e9e:	0003      	movs	r3, r0
    1ea0:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
    1ea2:	693b      	ldr	r3, [r7, #16]
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d118      	bne.n	1eda <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
    1ea8:	2317      	movs	r3, #23
    1eaa:	18fb      	adds	r3, r7, r3
    1eac:	781b      	ldrb	r3, [r3, #0]
    1eae:	220f      	movs	r2, #15
    1eb0:	4013      	ands	r3, r2
    1eb2:	b2da      	uxtb	r2, r3
    1eb4:	2308      	movs	r3, #8
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	0110      	lsls	r0, r2, #4
    1eba:	781a      	ldrb	r2, [r3, #0]
    1ebc:	210f      	movs	r1, #15
    1ebe:	400a      	ands	r2, r1
    1ec0:	1c11      	adds	r1, r2, #0
    1ec2:	1c02      	adds	r2, r0, #0
    1ec4:	430a      	orrs	r2, r1
    1ec6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    1ec8:	2308      	movs	r3, #8
    1eca:	18fa      	adds	r2, r7, r3
    1ecc:	6878      	ldr	r0, [r7, #4]
    1ece:	2301      	movs	r3, #1
    1ed0:	2111      	movs	r1, #17
    1ed2:	4c07      	ldr	r4, [pc, #28]	; (1ef0 <lsm6dso_gy_data_rate_set+0x2c0>)
    1ed4:	47a0      	blx	r4
    1ed6:	0003      	movs	r3, r0
    1ed8:	613b      	str	r3, [r7, #16]
  }

  return ret;
    1eda:	693b      	ldr	r3, [r7, #16]
}
    1edc:	0018      	movs	r0, r3
    1ede:	46bd      	mov	sp, r7
    1ee0:	b007      	add	sp, #28
    1ee2:	bd90      	pop	{r4, r7, pc}
    1ee4:	000023dd 	.word	0x000023dd
    1ee8:	00002431 	.word	0x00002431
    1eec:	000017d1 	.word	0x000017d1
    1ef0:	00001817 	.word	0x00001817

00001ef4 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
    1ef4:	b590      	push	{r4, r7, lr}
    1ef6:	b085      	sub	sp, #20
    1ef8:	af00      	add	r7, sp, #0
    1efa:	6078      	str	r0, [r7, #4]
    1efc:	000a      	movs	r2, r1
    1efe:	1cfb      	adds	r3, r7, #3
    1f00:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    1f02:	2308      	movs	r3, #8
    1f04:	18fa      	adds	r2, r7, r3
    1f06:	6878      	ldr	r0, [r7, #4]
    1f08:	2301      	movs	r3, #1
    1f0a:	2112      	movs	r1, #18
    1f0c:	4c12      	ldr	r4, [pc, #72]	; (1f58 <lsm6dso_block_data_update_set+0x64>)
    1f0e:	47a0      	blx	r4
    1f10:	0003      	movs	r3, r0
    1f12:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    1f14:	68fb      	ldr	r3, [r7, #12]
    1f16:	2b00      	cmp	r3, #0
    1f18:	d119      	bne.n	1f4e <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
    1f1a:	1cfb      	adds	r3, r7, #3
    1f1c:	781b      	ldrb	r3, [r3, #0]
    1f1e:	2201      	movs	r2, #1
    1f20:	4013      	ands	r3, r2
    1f22:	b2da      	uxtb	r2, r3
    1f24:	2308      	movs	r3, #8
    1f26:	18fb      	adds	r3, r7, r3
    1f28:	2101      	movs	r1, #1
    1f2a:	400a      	ands	r2, r1
    1f2c:	0190      	lsls	r0, r2, #6
    1f2e:	781a      	ldrb	r2, [r3, #0]
    1f30:	2140      	movs	r1, #64	; 0x40
    1f32:	438a      	bics	r2, r1
    1f34:	1c11      	adds	r1, r2, #0
    1f36:	1c02      	adds	r2, r0, #0
    1f38:	430a      	orrs	r2, r1
    1f3a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    1f3c:	2308      	movs	r3, #8
    1f3e:	18fa      	adds	r2, r7, r3
    1f40:	6878      	ldr	r0, [r7, #4]
    1f42:	2301      	movs	r3, #1
    1f44:	2112      	movs	r1, #18
    1f46:	4c05      	ldr	r4, [pc, #20]	; (1f5c <lsm6dso_block_data_update_set+0x68>)
    1f48:	47a0      	blx	r4
    1f4a:	0003      	movs	r3, r0
    1f4c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    1f4e:	68fb      	ldr	r3, [r7, #12]
}
    1f50:	0018      	movs	r0, r3
    1f52:	46bd      	mov	sp, r7
    1f54:	b005      	add	sp, #20
    1f56:	bd90      	pop	{r4, r7, pc}
    1f58:	000017d1 	.word	0x000017d1
    1f5c:	00001817 	.word	0x00001817

00001f60 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
    1f60:	b590      	push	{r4, r7, lr}
    1f62:	b085      	sub	sp, #20
    1f64:	af00      	add	r7, sp, #0
    1f66:	6078      	str	r0, [r7, #4]
    1f68:	000a      	movs	r2, r1
    1f6a:	1cfb      	adds	r3, r7, #3
    1f6c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    1f6e:	2308      	movs	r3, #8
    1f70:	18fa      	adds	r2, r7, r3
    1f72:	6878      	ldr	r0, [r7, #4]
    1f74:	2301      	movs	r3, #1
    1f76:	2115      	movs	r1, #21
    1f78:	4c12      	ldr	r4, [pc, #72]	; (1fc4 <lsm6dso_xl_offset_weight_set+0x64>)
    1f7a:	47a0      	blx	r4
    1f7c:	0003      	movs	r3, r0
    1f7e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    1f80:	68fb      	ldr	r3, [r7, #12]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d119      	bne.n	1fba <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
    1f86:	1cfb      	adds	r3, r7, #3
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	2201      	movs	r2, #1
    1f8c:	4013      	ands	r3, r2
    1f8e:	b2da      	uxtb	r2, r3
    1f90:	2308      	movs	r3, #8
    1f92:	18fb      	adds	r3, r7, r3
    1f94:	2101      	movs	r1, #1
    1f96:	400a      	ands	r2, r1
    1f98:	00d0      	lsls	r0, r2, #3
    1f9a:	781a      	ldrb	r2, [r3, #0]
    1f9c:	2108      	movs	r1, #8
    1f9e:	438a      	bics	r2, r1
    1fa0:	1c11      	adds	r1, r2, #0
    1fa2:	1c02      	adds	r2, r0, #0
    1fa4:	430a      	orrs	r2, r1
    1fa6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
    1fa8:	2308      	movs	r3, #8
    1faa:	18fa      	adds	r2, r7, r3
    1fac:	6878      	ldr	r0, [r7, #4]
    1fae:	2301      	movs	r3, #1
    1fb0:	2115      	movs	r1, #21
    1fb2:	4c05      	ldr	r4, [pc, #20]	; (1fc8 <lsm6dso_xl_offset_weight_set+0x68>)
    1fb4:	47a0      	blx	r4
    1fb6:	0003      	movs	r3, r0
    1fb8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    1fba:	68fb      	ldr	r3, [r7, #12]
}
    1fbc:	0018      	movs	r0, r3
    1fbe:	46bd      	mov	sp, r7
    1fc0:	b005      	add	sp, #20
    1fc2:	bd90      	pop	{r4, r7, pc}
    1fc4:	000017d1 	.word	0x000017d1
    1fc8:	00001817 	.word	0x00001817

00001fcc <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
    1fcc:	b590      	push	{r4, r7, lr}
    1fce:	b085      	sub	sp, #20
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
    1fd4:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
    1fd6:	2308      	movs	r3, #8
    1fd8:	18fa      	adds	r2, r7, r3
    1fda:	6878      	ldr	r0, [r7, #4]
    1fdc:	2301      	movs	r3, #1
    1fde:	211e      	movs	r1, #30
    1fe0:	4c08      	ldr	r4, [pc, #32]	; (2004 <STACK_SIZE+0x4>)
    1fe2:	47a0      	blx	r4
    1fe4:	0003      	movs	r3, r0
    1fe6:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
    1fe8:	2308      	movs	r3, #8
    1fea:	18fb      	adds	r3, r7, r3
    1fec:	781b      	ldrb	r3, [r3, #0]
    1fee:	07db      	lsls	r3, r3, #31
    1ff0:	0fdb      	lsrs	r3, r3, #31
    1ff2:	b2db      	uxtb	r3, r3
    1ff4:	001a      	movs	r2, r3
    1ff6:	683b      	ldr	r3, [r7, #0]
    1ff8:	701a      	strb	r2, [r3, #0]

  return ret;
    1ffa:	68fb      	ldr	r3, [r7, #12]
}
    1ffc:	0018      	movs	r0, r3
    1ffe:	46bd      	mov	sp, r7
    2000:	b005      	add	sp, #20
    2002:	bd90      	pop	{r4, r7, pc}
    2004:	000017d1 	.word	0x000017d1

00002008 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
    2008:	b590      	push	{r4, r7, lr}
    200a:	b087      	sub	sp, #28
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
    2010:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    2012:	230c      	movs	r3, #12
    2014:	18fa      	adds	r2, r7, r3
    2016:	6878      	ldr	r0, [r7, #4]
    2018:	2306      	movs	r3, #6
    201a:	2128      	movs	r1, #40	; 0x28
    201c:	4c26      	ldr	r4, [pc, #152]	; (20b8 <lsm6dso_acceleration_raw_get+0xb0>)
    201e:	47a0      	blx	r4
    2020:	0003      	movs	r3, r0
    2022:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
    2024:	230c      	movs	r3, #12
    2026:	18fb      	adds	r3, r7, r3
    2028:	785b      	ldrb	r3, [r3, #1]
    202a:	b21a      	sxth	r2, r3
    202c:	683b      	ldr	r3, [r7, #0]
    202e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    2030:	683b      	ldr	r3, [r7, #0]
    2032:	2200      	movs	r2, #0
    2034:	5e9b      	ldrsh	r3, [r3, r2]
    2036:	b29b      	uxth	r3, r3
    2038:	021b      	lsls	r3, r3, #8
    203a:	b29a      	uxth	r2, r3
    203c:	230c      	movs	r3, #12
    203e:	18fb      	adds	r3, r7, r3
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	b29b      	uxth	r3, r3
    2044:	18d3      	adds	r3, r2, r3
    2046:	b29b      	uxth	r3, r3
    2048:	b21a      	sxth	r2, r3
    204a:	683b      	ldr	r3, [r7, #0]
    204c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
    204e:	683b      	ldr	r3, [r7, #0]
    2050:	3302      	adds	r3, #2
    2052:	220c      	movs	r2, #12
    2054:	18ba      	adds	r2, r7, r2
    2056:	78d2      	ldrb	r2, [r2, #3]
    2058:	b212      	sxth	r2, r2
    205a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    205c:	683b      	ldr	r3, [r7, #0]
    205e:	3302      	adds	r3, #2
    2060:	683a      	ldr	r2, [r7, #0]
    2062:	3202      	adds	r2, #2
    2064:	2100      	movs	r1, #0
    2066:	5e52      	ldrsh	r2, [r2, r1]
    2068:	b292      	uxth	r2, r2
    206a:	0212      	lsls	r2, r2, #8
    206c:	b291      	uxth	r1, r2
    206e:	220c      	movs	r2, #12
    2070:	18ba      	adds	r2, r7, r2
    2072:	7892      	ldrb	r2, [r2, #2]
    2074:	b292      	uxth	r2, r2
    2076:	188a      	adds	r2, r1, r2
    2078:	b292      	uxth	r2, r2
    207a:	b212      	sxth	r2, r2
    207c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
    207e:	683b      	ldr	r3, [r7, #0]
    2080:	3304      	adds	r3, #4
    2082:	220c      	movs	r2, #12
    2084:	18ba      	adds	r2, r7, r2
    2086:	7952      	ldrb	r2, [r2, #5]
    2088:	b212      	sxth	r2, r2
    208a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    208c:	683b      	ldr	r3, [r7, #0]
    208e:	3304      	adds	r3, #4
    2090:	683a      	ldr	r2, [r7, #0]
    2092:	3204      	adds	r2, #4
    2094:	2100      	movs	r1, #0
    2096:	5e52      	ldrsh	r2, [r2, r1]
    2098:	b292      	uxth	r2, r2
    209a:	0212      	lsls	r2, r2, #8
    209c:	b291      	uxth	r1, r2
    209e:	220c      	movs	r2, #12
    20a0:	18ba      	adds	r2, r7, r2
    20a2:	7912      	ldrb	r2, [r2, #4]
    20a4:	b292      	uxth	r2, r2
    20a6:	188a      	adds	r2, r1, r2
    20a8:	b292      	uxth	r2, r2
    20aa:	b212      	sxth	r2, r2
    20ac:	801a      	strh	r2, [r3, #0]

  return ret;
    20ae:	697b      	ldr	r3, [r7, #20]
}
    20b0:	0018      	movs	r0, r3
    20b2:	46bd      	mov	sp, r7
    20b4:	b007      	add	sp, #28
    20b6:	bd90      	pop	{r4, r7, pc}
    20b8:	000017d1 	.word	0x000017d1

000020bc <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
    20bc:	b590      	push	{r4, r7, lr}
    20be:	b085      	sub	sp, #20
    20c0:	af00      	add	r7, sp, #0
    20c2:	6078      	str	r0, [r7, #4]
    20c4:	000a      	movs	r2, r1
    20c6:	1cfb      	adds	r3, r7, #3
    20c8:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    20ca:	2308      	movs	r3, #8
    20cc:	18fa      	adds	r2, r7, r3
    20ce:	6878      	ldr	r0, [r7, #4]
    20d0:	2301      	movs	r3, #1
    20d2:	2101      	movs	r1, #1
    20d4:	4c11      	ldr	r4, [pc, #68]	; (211c <lsm6dso_mem_bank_set+0x60>)
    20d6:	47a0      	blx	r4
    20d8:	0003      	movs	r3, r0
    20da:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    20dc:	68fb      	ldr	r3, [r7, #12]
    20de:	2b00      	cmp	r3, #0
    20e0:	d117      	bne.n	2112 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
    20e2:	1cfb      	adds	r3, r7, #3
    20e4:	781b      	ldrb	r3, [r3, #0]
    20e6:	2203      	movs	r2, #3
    20e8:	4013      	ands	r3, r2
    20ea:	b2da      	uxtb	r2, r3
    20ec:	2308      	movs	r3, #8
    20ee:	18fb      	adds	r3, r7, r3
    20f0:	0190      	lsls	r0, r2, #6
    20f2:	781a      	ldrb	r2, [r3, #0]
    20f4:	213f      	movs	r1, #63	; 0x3f
    20f6:	400a      	ands	r2, r1
    20f8:	1c11      	adds	r1, r2, #0
    20fa:	1c02      	adds	r2, r0, #0
    20fc:	430a      	orrs	r2, r1
    20fe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
    2100:	2308      	movs	r3, #8
    2102:	18fa      	adds	r2, r7, r3
    2104:	6878      	ldr	r0, [r7, #4]
    2106:	2301      	movs	r3, #1
    2108:	2101      	movs	r1, #1
    210a:	4c05      	ldr	r4, [pc, #20]	; (2120 <lsm6dso_mem_bank_set+0x64>)
    210c:	47a0      	blx	r4
    210e:	0003      	movs	r3, r0
    2110:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    2112:	68fb      	ldr	r3, [r7, #12]
}
    2114:	0018      	movs	r0, r3
    2116:	46bd      	mov	sp, r7
    2118:	b005      	add	sp, #20
    211a:	bd90      	pop	{r4, r7, pc}
    211c:	000017d1 	.word	0x000017d1
    2120:	00001817 	.word	0x00001817

00002124 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
    2124:	b590      	push	{r4, r7, lr}
    2126:	b085      	sub	sp, #20
    2128:	af00      	add	r7, sp, #0
    212a:	6078      	str	r0, [r7, #4]
    212c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
    212e:	683a      	ldr	r2, [r7, #0]
    2130:	6878      	ldr	r0, [r7, #4]
    2132:	2301      	movs	r3, #1
    2134:	210f      	movs	r1, #15
    2136:	4c04      	ldr	r4, [pc, #16]	; (2148 <lsm6dso_device_id_get+0x24>)
    2138:	47a0      	blx	r4
    213a:	0003      	movs	r3, r0
    213c:	60fb      	str	r3, [r7, #12]

  return ret;
    213e:	68fb      	ldr	r3, [r7, #12]
}
    2140:	0018      	movs	r0, r3
    2142:	46bd      	mov	sp, r7
    2144:	b005      	add	sp, #20
    2146:	bd90      	pop	{r4, r7, pc}
    2148:	000017d1 	.word	0x000017d1

0000214c <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
    214c:	b590      	push	{r4, r7, lr}
    214e:	b085      	sub	sp, #20
    2150:	af00      	add	r7, sp, #0
    2152:	6078      	str	r0, [r7, #4]
    2154:	000a      	movs	r2, r1
    2156:	1cfb      	adds	r3, r7, #3
    2158:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    215a:	2308      	movs	r3, #8
    215c:	18fa      	adds	r2, r7, r3
    215e:	6878      	ldr	r0, [r7, #4]
    2160:	2301      	movs	r3, #1
    2162:	2112      	movs	r1, #18
    2164:	4c12      	ldr	r4, [pc, #72]	; (21b0 <lsm6dso_reset_set+0x64>)
    2166:	47a0      	blx	r4
    2168:	0003      	movs	r3, r0
    216a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    216c:	68fb      	ldr	r3, [r7, #12]
    216e:	2b00      	cmp	r3, #0
    2170:	d119      	bne.n	21a6 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
    2172:	1cfb      	adds	r3, r7, #3
    2174:	781b      	ldrb	r3, [r3, #0]
    2176:	2201      	movs	r2, #1
    2178:	4013      	ands	r3, r2
    217a:	b2da      	uxtb	r2, r3
    217c:	2308      	movs	r3, #8
    217e:	18fb      	adds	r3, r7, r3
    2180:	2101      	movs	r1, #1
    2182:	400a      	ands	r2, r1
    2184:	0010      	movs	r0, r2
    2186:	781a      	ldrb	r2, [r3, #0]
    2188:	2101      	movs	r1, #1
    218a:	438a      	bics	r2, r1
    218c:	1c11      	adds	r1, r2, #0
    218e:	1c02      	adds	r2, r0, #0
    2190:	430a      	orrs	r2, r1
    2192:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    2194:	2308      	movs	r3, #8
    2196:	18fa      	adds	r2, r7, r3
    2198:	6878      	ldr	r0, [r7, #4]
    219a:	2301      	movs	r3, #1
    219c:	2112      	movs	r1, #18
    219e:	4c05      	ldr	r4, [pc, #20]	; (21b4 <lsm6dso_reset_set+0x68>)
    21a0:	47a0      	blx	r4
    21a2:	0003      	movs	r3, r0
    21a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    21a6:	68fb      	ldr	r3, [r7, #12]
}
    21a8:	0018      	movs	r0, r3
    21aa:	46bd      	mov	sp, r7
    21ac:	b005      	add	sp, #20
    21ae:	bd90      	pop	{r4, r7, pc}
    21b0:	000017d1 	.word	0x000017d1
    21b4:	00001817 	.word	0x00001817

000021b8 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
    21b8:	b590      	push	{r4, r7, lr}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
    21c0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
    21c2:	2308      	movs	r3, #8
    21c4:	18fa      	adds	r2, r7, r3
    21c6:	6878      	ldr	r0, [r7, #4]
    21c8:	2301      	movs	r3, #1
    21ca:	2112      	movs	r1, #18
    21cc:	4c08      	ldr	r4, [pc, #32]	; (21f0 <lsm6dso_reset_get+0x38>)
    21ce:	47a0      	blx	r4
    21d0:	0003      	movs	r3, r0
    21d2:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
    21d4:	2308      	movs	r3, #8
    21d6:	18fb      	adds	r3, r7, r3
    21d8:	781b      	ldrb	r3, [r3, #0]
    21da:	07db      	lsls	r3, r3, #31
    21dc:	0fdb      	lsrs	r3, r3, #31
    21de:	b2db      	uxtb	r3, r3
    21e0:	001a      	movs	r2, r3
    21e2:	683b      	ldr	r3, [r7, #0]
    21e4:	701a      	strb	r2, [r3, #0]

  return ret;
    21e6:	68fb      	ldr	r3, [r7, #12]
}
    21e8:	0018      	movs	r0, r3
    21ea:	46bd      	mov	sp, r7
    21ec:	b005      	add	sp, #20
    21ee:	bd90      	pop	{r4, r7, pc}
    21f0:	000017d1 	.word	0x000017d1

000021f4 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
    21f4:	b590      	push	{r4, r7, lr}
    21f6:	b085      	sub	sp, #20
    21f8:	af00      	add	r7, sp, #0
    21fa:	6078      	str	r0, [r7, #4]
    21fc:	000a      	movs	r2, r1
    21fe:	1cfb      	adds	r3, r7, #3
    2200:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    2202:	2308      	movs	r3, #8
    2204:	18fa      	adds	r2, r7, r3
    2206:	6878      	ldr	r0, [r7, #4]
    2208:	2301      	movs	r3, #1
    220a:	2110      	movs	r1, #16
    220c:	4c12      	ldr	r4, [pc, #72]	; (2258 <lsm6dso_xl_filter_lp2_set+0x64>)
    220e:	47a0      	blx	r4
    2210:	0003      	movs	r3, r0
    2212:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    2214:	68fb      	ldr	r3, [r7, #12]
    2216:	2b00      	cmp	r3, #0
    2218:	d119      	bne.n	224e <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
    221a:	1cfb      	adds	r3, r7, #3
    221c:	781b      	ldrb	r3, [r3, #0]
    221e:	2201      	movs	r2, #1
    2220:	4013      	ands	r3, r2
    2222:	b2da      	uxtb	r2, r3
    2224:	2308      	movs	r3, #8
    2226:	18fb      	adds	r3, r7, r3
    2228:	2101      	movs	r1, #1
    222a:	400a      	ands	r2, r1
    222c:	1890      	adds	r0, r2, r2
    222e:	781a      	ldrb	r2, [r3, #0]
    2230:	2102      	movs	r1, #2
    2232:	438a      	bics	r2, r1
    2234:	1c11      	adds	r1, r2, #0
    2236:	1c02      	adds	r2, r0, #0
    2238:	430a      	orrs	r2, r1
    223a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    223c:	2308      	movs	r3, #8
    223e:	18fa      	adds	r2, r7, r3
    2240:	6878      	ldr	r0, [r7, #4]
    2242:	2301      	movs	r3, #1
    2244:	2110      	movs	r1, #16
    2246:	4c05      	ldr	r4, [pc, #20]	; (225c <lsm6dso_xl_filter_lp2_set+0x68>)
    2248:	47a0      	blx	r4
    224a:	0003      	movs	r3, r0
    224c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    224e:	68fb      	ldr	r3, [r7, #12]
}
    2250:	0018      	movs	r0, r3
    2252:	46bd      	mov	sp, r7
    2254:	b005      	add	sp, #20
    2256:	bd90      	pop	{r4, r7, pc}
    2258:	000017d1 	.word	0x000017d1
    225c:	00001817 	.word	0x00001817

00002260 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
    2260:	b590      	push	{r4, r7, lr}
    2262:	b085      	sub	sp, #20
    2264:	af00      	add	r7, sp, #0
    2266:	6078      	str	r0, [r7, #4]
    2268:	000a      	movs	r2, r1
    226a:	1cfb      	adds	r3, r7, #3
    226c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    226e:	2308      	movs	r3, #8
    2270:	18fa      	adds	r2, r7, r3
    2272:	6878      	ldr	r0, [r7, #4]
    2274:	2301      	movs	r3, #1
    2276:	2117      	movs	r1, #23
    2278:	4c25      	ldr	r4, [pc, #148]	; (2310 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
    227a:	47a0      	blx	r4
    227c:	0003      	movs	r3, r0
    227e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    2280:	68fb      	ldr	r3, [r7, #12]
    2282:	2b00      	cmp	r3, #0
    2284:	d13f      	bne.n	2306 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
    2286:	1cfb      	adds	r3, r7, #3
    2288:	781b      	ldrb	r3, [r3, #0]
    228a:	091b      	lsrs	r3, r3, #4
    228c:	b2db      	uxtb	r3, r3
    228e:	1c1a      	adds	r2, r3, #0
    2290:	2301      	movs	r3, #1
    2292:	4013      	ands	r3, r2
    2294:	b2da      	uxtb	r2, r3
    2296:	2308      	movs	r3, #8
    2298:	18fb      	adds	r3, r7, r3
    229a:	2101      	movs	r1, #1
    229c:	400a      	ands	r2, r1
    229e:	0090      	lsls	r0, r2, #2
    22a0:	781a      	ldrb	r2, [r3, #0]
    22a2:	2104      	movs	r1, #4
    22a4:	438a      	bics	r2, r1
    22a6:	1c11      	adds	r1, r2, #0
    22a8:	1c02      	adds	r2, r0, #0
    22aa:	430a      	orrs	r2, r1
    22ac:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    22ae:	1cfb      	adds	r3, r7, #3
    22b0:	781b      	ldrb	r3, [r3, #0]
    22b2:	095b      	lsrs	r3, r3, #5
    22b4:	b2db      	uxtb	r3, r3
    22b6:	1c1a      	adds	r2, r3, #0
    22b8:	2301      	movs	r3, #1
    22ba:	4013      	ands	r3, r2
    22bc:	b2da      	uxtb	r2, r3
    22be:	2308      	movs	r3, #8
    22c0:	18fb      	adds	r3, r7, r3
    22c2:	2101      	movs	r1, #1
    22c4:	400a      	ands	r2, r1
    22c6:	0110      	lsls	r0, r2, #4
    22c8:	781a      	ldrb	r2, [r3, #0]
    22ca:	2110      	movs	r1, #16
    22cc:	438a      	bics	r2, r1
    22ce:	1c11      	adds	r1, r2, #0
    22d0:	1c02      	adds	r2, r0, #0
    22d2:	430a      	orrs	r2, r1
    22d4:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
    22d6:	1cfb      	adds	r3, r7, #3
    22d8:	781b      	ldrb	r3, [r3, #0]
    22da:	2207      	movs	r2, #7
    22dc:	4013      	ands	r3, r2
    22de:	b2da      	uxtb	r2, r3
    22e0:	2308      	movs	r3, #8
    22e2:	18fb      	adds	r3, r7, r3
    22e4:	0150      	lsls	r0, r2, #5
    22e6:	781a      	ldrb	r2, [r3, #0]
    22e8:	211f      	movs	r1, #31
    22ea:	400a      	ands	r2, r1
    22ec:	1c11      	adds	r1, r2, #0
    22ee:	1c02      	adds	r2, r0, #0
    22f0:	430a      	orrs	r2, r1
    22f2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    22f4:	2308      	movs	r3, #8
    22f6:	18fa      	adds	r2, r7, r3
    22f8:	6878      	ldr	r0, [r7, #4]
    22fa:	2301      	movs	r3, #1
    22fc:	2117      	movs	r1, #23
    22fe:	4c05      	ldr	r4, [pc, #20]	; (2314 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
    2300:	47a0      	blx	r4
    2302:	0003      	movs	r3, r0
    2304:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    2306:	68fb      	ldr	r3, [r7, #12]
}
    2308:	0018      	movs	r0, r3
    230a:	46bd      	mov	sp, r7
    230c:	b005      	add	sp, #20
    230e:	bd90      	pop	{r4, r7, pc}
    2310:	000017d1 	.word	0x000017d1
    2314:	00001817 	.word	0x00001817

00002318 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
    2318:	b590      	push	{r4, r7, lr}
    231a:	b087      	sub	sp, #28
    231c:	af00      	add	r7, sp, #0
    231e:	6078      	str	r0, [r7, #4]
    2320:	000a      	movs	r2, r1
    2322:	1cfb      	adds	r3, r7, #3
    2324:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    2326:	230c      	movs	r3, #12
    2328:	18fa      	adds	r2, r7, r3
    232a:	6878      	ldr	r0, [r7, #4]
    232c:	2301      	movs	r3, #1
    232e:	2118      	movs	r1, #24
    2330:	4c28      	ldr	r4, [pc, #160]	; (23d4 <lsm6dso_i3c_disable_set+0xbc>)
    2332:	47a0      	blx	r4
    2334:	0003      	movs	r3, r0
    2336:	617b      	str	r3, [r7, #20]

  if (ret == 0)
    2338:	697b      	ldr	r3, [r7, #20]
    233a:	2b00      	cmp	r3, #0
    233c:	d11c      	bne.n	2378 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    233e:	1cfb      	adds	r3, r7, #3
    2340:	781b      	ldrb	r3, [r3, #0]
    2342:	09db      	lsrs	r3, r3, #7
    2344:	b2db      	uxtb	r3, r3
    2346:	1c1a      	adds	r2, r3, #0
    2348:	2301      	movs	r3, #1
    234a:	4013      	ands	r3, r2
    234c:	b2da      	uxtb	r2, r3
    234e:	230c      	movs	r3, #12
    2350:	18fb      	adds	r3, r7, r3
    2352:	2101      	movs	r1, #1
    2354:	400a      	ands	r2, r1
    2356:	1890      	adds	r0, r2, r2
    2358:	781a      	ldrb	r2, [r3, #0]
    235a:	2102      	movs	r1, #2
    235c:	438a      	bics	r2, r1
    235e:	1c11      	adds	r1, r2, #0
    2360:	1c02      	adds	r2, r0, #0
    2362:	430a      	orrs	r2, r1
    2364:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    2366:	230c      	movs	r3, #12
    2368:	18fa      	adds	r2, r7, r3
    236a:	6878      	ldr	r0, [r7, #4]
    236c:	2301      	movs	r3, #1
    236e:	2118      	movs	r1, #24
    2370:	4c19      	ldr	r4, [pc, #100]	; (23d8 <lsm6dso_i3c_disable_set+0xc0>)
    2372:	47a0      	blx	r4
    2374:	0003      	movs	r3, r0
    2376:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
    2378:	697b      	ldr	r3, [r7, #20]
    237a:	2b00      	cmp	r3, #0
    237c:	d108      	bne.n	2390 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    237e:	2310      	movs	r3, #16
    2380:	18fa      	adds	r2, r7, r3
    2382:	6878      	ldr	r0, [r7, #4]
    2384:	2301      	movs	r3, #1
    2386:	2162      	movs	r1, #98	; 0x62
    2388:	4c12      	ldr	r4, [pc, #72]	; (23d4 <lsm6dso_i3c_disable_set+0xbc>)
    238a:	47a0      	blx	r4
    238c:	0003      	movs	r3, r0
    238e:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
    2390:	697b      	ldr	r3, [r7, #20]
    2392:	2b00      	cmp	r3, #0
    2394:	d119      	bne.n	23ca <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    2396:	1cfb      	adds	r3, r7, #3
    2398:	781b      	ldrb	r3, [r3, #0]
    239a:	2203      	movs	r2, #3
    239c:	4013      	ands	r3, r2
    239e:	b2da      	uxtb	r2, r3
    23a0:	2310      	movs	r3, #16
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	2103      	movs	r1, #3
    23a6:	400a      	ands	r2, r1
    23a8:	00d0      	lsls	r0, r2, #3
    23aa:	781a      	ldrb	r2, [r3, #0]
    23ac:	2118      	movs	r1, #24
    23ae:	438a      	bics	r2, r1
    23b0:	1c11      	adds	r1, r2, #0
    23b2:	1c02      	adds	r2, r0, #0
    23b4:	430a      	orrs	r2, r1
    23b6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    23b8:	2310      	movs	r3, #16
    23ba:	18fa      	adds	r2, r7, r3
    23bc:	6878      	ldr	r0, [r7, #4]
    23be:	2301      	movs	r3, #1
    23c0:	2162      	movs	r1, #98	; 0x62
    23c2:	4c05      	ldr	r4, [pc, #20]	; (23d8 <lsm6dso_i3c_disable_set+0xc0>)
    23c4:	47a0      	blx	r4
    23c6:	0003      	movs	r3, r0
    23c8:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
    23ca:	697b      	ldr	r3, [r7, #20]
}
    23cc:	0018      	movs	r0, r3
    23ce:	46bd      	mov	sp, r7
    23d0:	b007      	add	sp, #28
    23d2:	bd90      	pop	{r4, r7, pc}
    23d4:	000017d1 	.word	0x000017d1
    23d8:	00001817 	.word	0x00001817

000023dc <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
    23dc:	b590      	push	{r4, r7, lr}
    23de:	b085      	sub	sp, #20
    23e0:	af00      	add	r7, sp, #0
    23e2:	6078      	str	r0, [r7, #4]
    23e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	2102      	movs	r1, #2
    23ea:	0018      	movs	r0, r3
    23ec:	4b0e      	ldr	r3, [pc, #56]	; (2428 <lsm6dso_fsm_enable_get+0x4c>)
    23ee:	4798      	blx	r3
    23f0:	0003      	movs	r3, r0
    23f2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    23f4:	68fb      	ldr	r3, [r7, #12]
    23f6:	2b00      	cmp	r3, #0
    23f8:	d107      	bne.n	240a <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    23fa:	683a      	ldr	r2, [r7, #0]
    23fc:	6878      	ldr	r0, [r7, #4]
    23fe:	2302      	movs	r3, #2
    2400:	2146      	movs	r1, #70	; 0x46
    2402:	4c0a      	ldr	r4, [pc, #40]	; (242c <lsm6dso_fsm_enable_get+0x50>)
    2404:	47a0      	blx	r4
    2406:	0003      	movs	r3, r0
    2408:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
    240a:	68fb      	ldr	r3, [r7, #12]
    240c:	2b00      	cmp	r3, #0
    240e:	d106      	bne.n	241e <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	2100      	movs	r1, #0
    2414:	0018      	movs	r0, r3
    2416:	4b04      	ldr	r3, [pc, #16]	; (2428 <lsm6dso_fsm_enable_get+0x4c>)
    2418:	4798      	blx	r3
    241a:	0003      	movs	r3, r0
    241c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    241e:	68fb      	ldr	r3, [r7, #12]
}
    2420:	0018      	movs	r0, r3
    2422:	46bd      	mov	sp, r7
    2424:	b005      	add	sp, #20
    2426:	bd90      	pop	{r4, r7, pc}
    2428:	000020bd 	.word	0x000020bd
    242c:	000017d1 	.word	0x000017d1

00002430 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
    2430:	b590      	push	{r4, r7, lr}
    2432:	b085      	sub	sp, #20
    2434:	af00      	add	r7, sp, #0
    2436:	6078      	str	r0, [r7, #4]
    2438:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	2102      	movs	r1, #2
    243e:	0018      	movs	r0, r3
    2440:	4b21      	ldr	r3, [pc, #132]	; (24c8 <lsm6dso_fsm_data_rate_get+0x98>)
    2442:	4798      	blx	r3
    2444:	0003      	movs	r3, r0
    2446:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
    2448:	68fb      	ldr	r3, [r7, #12]
    244a:	2b00      	cmp	r3, #0
    244c:	d108      	bne.n	2460 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    244e:	2308      	movs	r3, #8
    2450:	18fa      	adds	r2, r7, r3
    2452:	6878      	ldr	r0, [r7, #4]
    2454:	2301      	movs	r3, #1
    2456:	215f      	movs	r1, #95	; 0x5f
    2458:	4c1c      	ldr	r4, [pc, #112]	; (24cc <lsm6dso_fsm_data_rate_get+0x9c>)
    245a:	47a0      	blx	r4
    245c:	0003      	movs	r3, r0
    245e:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
    2460:	68fb      	ldr	r3, [r7, #12]
    2462:	2b00      	cmp	r3, #0
    2464:	d12b      	bne.n	24be <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
    2466:	2308      	movs	r3, #8
    2468:	18fb      	adds	r3, r7, r3
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	06db      	lsls	r3, r3, #27
    246e:	0f9b      	lsrs	r3, r3, #30
    2470:	b2db      	uxtb	r3, r3
    2472:	2b01      	cmp	r3, #1
    2474:	d00c      	beq.n	2490 <lsm6dso_fsm_data_rate_get+0x60>
    2476:	dc02      	bgt.n	247e <lsm6dso_fsm_data_rate_get+0x4e>
    2478:	2b00      	cmp	r3, #0
    247a:	d005      	beq.n	2488 <lsm6dso_fsm_data_rate_get+0x58>
    247c:	e014      	b.n	24a8 <lsm6dso_fsm_data_rate_get+0x78>
    247e:	2b02      	cmp	r3, #2
    2480:	d00a      	beq.n	2498 <lsm6dso_fsm_data_rate_get+0x68>
    2482:	2b03      	cmp	r3, #3
    2484:	d00c      	beq.n	24a0 <lsm6dso_fsm_data_rate_get+0x70>
    2486:	e00f      	b.n	24a8 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
    2488:	683b      	ldr	r3, [r7, #0]
    248a:	2200      	movs	r2, #0
    248c:	701a      	strb	r2, [r3, #0]
        break;
    248e:	e00f      	b.n	24b0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
    2490:	683b      	ldr	r3, [r7, #0]
    2492:	2201      	movs	r2, #1
    2494:	701a      	strb	r2, [r3, #0]
        break;
    2496:	e00b      	b.n	24b0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
    2498:	683b      	ldr	r3, [r7, #0]
    249a:	2202      	movs	r2, #2
    249c:	701a      	strb	r2, [r3, #0]
        break;
    249e:	e007      	b.n	24b0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
    24a0:	683b      	ldr	r3, [r7, #0]
    24a2:	2203      	movs	r2, #3
    24a4:	701a      	strb	r2, [r3, #0]
        break;
    24a6:	e003      	b.n	24b0 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
    24a8:	683b      	ldr	r3, [r7, #0]
    24aa:	2200      	movs	r2, #0
    24ac:	701a      	strb	r2, [r3, #0]
        break;
    24ae:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	2100      	movs	r1, #0
    24b4:	0018      	movs	r0, r3
    24b6:	4b04      	ldr	r3, [pc, #16]	; (24c8 <lsm6dso_fsm_data_rate_get+0x98>)
    24b8:	4798      	blx	r3
    24ba:	0003      	movs	r3, r0
    24bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
    24be:	68fb      	ldr	r3, [r7, #12]
}
    24c0:	0018      	movs	r0, r3
    24c2:	46bd      	mov	sp, r7
    24c4:	b005      	add	sp, #20
    24c6:	bd90      	pop	{r4, r7, pc}
    24c8:	000020bd 	.word	0x000020bd
    24cc:	000017d1 	.word	0x000017d1

000024d0 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
    24d0:	b580      	push	{r7, lr}
    24d2:	b086      	sub	sp, #24
    24d4:	af00      	add	r7, sp, #0
    24d6:	60f8      	str	r0, [r7, #12]
    24d8:	0008      	movs	r0, r1
    24da:	607a      	str	r2, [r7, #4]
    24dc:	0019      	movs	r1, r3
    24de:	230b      	movs	r3, #11
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	1c02      	adds	r2, r0, #0
    24e4:	701a      	strb	r2, [r3, #0]
    24e6:	2308      	movs	r3, #8
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	1c0a      	adds	r2, r1, #0
    24ec:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
    24ee:	2300      	movs	r3, #0
    24f0:	613b      	str	r3, [r7, #16]
	
	msgOutImu[0] = reg;
    24f2:	4b19      	ldr	r3, [pc, #100]	; (2558 <platform_write+0x88>)
    24f4:	220b      	movs	r2, #11
    24f6:	18ba      	adds	r2, r7, r2
    24f8:	7812      	ldrb	r2, [r2, #0]
    24fa:	701a      	strb	r2, [r3, #0]
	//loop through bufp to get message
 	for(int i = 0; i < len; i++)
    24fc:	2300      	movs	r3, #0
    24fe:	617b      	str	r3, [r7, #20]
    2500:	e00a      	b.n	2518 <platform_write+0x48>
 	{
 		msgOutImu[i+1] = bufp[i];
    2502:	697b      	ldr	r3, [r7, #20]
    2504:	3301      	adds	r3, #1
    2506:	697a      	ldr	r2, [r7, #20]
    2508:	6879      	ldr	r1, [r7, #4]
    250a:	188a      	adds	r2, r1, r2
    250c:	7811      	ldrb	r1, [r2, #0]
    250e:	4a12      	ldr	r2, [pc, #72]	; (2558 <platform_write+0x88>)
    2510:	54d1      	strb	r1, [r2, r3]
 	for(int i = 0; i < len; i++)
    2512:	697b      	ldr	r3, [r7, #20]
    2514:	3301      	adds	r3, #1
    2516:	617b      	str	r3, [r7, #20]
    2518:	2308      	movs	r3, #8
    251a:	18fb      	adds	r3, r7, r3
    251c:	881a      	ldrh	r2, [r3, #0]
    251e:	697b      	ldr	r3, [r7, #20]
    2520:	429a      	cmp	r2, r3
    2522:	dcee      	bgt.n	2502 <platform_write+0x32>
 	}
	//save individual data as part of the IMU_DATA struct
	imuData.address = LSM6DSO_I2C_ADD_H;
    2524:	4b0d      	ldr	r3, [pc, #52]	; (255c <platform_write+0x8c>)
    2526:	226b      	movs	r2, #107	; 0x6b
    2528:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = 1+len;
    252a:	2308      	movs	r3, #8
    252c:	18fb      	adds	r3, r7, r3
    252e:	881b      	ldrh	r3, [r3, #0]
    2530:	3301      	adds	r3, #1
    2532:	b29a      	uxth	r2, r3
    2534:	4b09      	ldr	r3, [pc, #36]	; (255c <platform_write+0x8c>)
    2536:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
    2538:	4b08      	ldr	r3, [pc, #32]	; (255c <platform_write+0x8c>)
    253a:	4a07      	ldr	r2, [pc, #28]	; (2558 <platform_write+0x88>)
    253c:	605a      	str	r2, [r3, #4]
	//write the imudata struct object
	error = I2cWriteDataWait(&imuData, 100);
    253e:	4b07      	ldr	r3, [pc, #28]	; (255c <platform_write+0x8c>)
    2540:	2164      	movs	r1, #100	; 0x64
    2542:	0018      	movs	r0, r3
    2544:	4b06      	ldr	r3, [pc, #24]	; (2560 <platform_write+0x90>)
    2546:	4798      	blx	r3
    2548:	0003      	movs	r3, r0
    254a:	613b      	str	r3, [r7, #16]
	return error;
    254c:	693b      	ldr	r3, [r7, #16]

}
    254e:	0018      	movs	r0, r3
    2550:	46bd      	mov	sp, r7
    2552:	b006      	add	sp, #24
    2554:	bd80      	pop	{r7, pc}
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	200039b0 	.word	0x200039b0
    255c:	200039f0 	.word	0x200039f0
    2560:	000015e1 	.word	0x000015e1

00002564 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
    2564:	b580      	push	{r7, lr}
    2566:	b086      	sub	sp, #24
    2568:	af00      	add	r7, sp, #0
    256a:	60f8      	str	r0, [r7, #12]
    256c:	0008      	movs	r0, r1
    256e:	607a      	str	r2, [r7, #4]
    2570:	0019      	movs	r1, r3
    2572:	230b      	movs	r3, #11
    2574:	18fb      	adds	r3, r7, r3
    2576:	1c02      	adds	r2, r0, #0
    2578:	701a      	strb	r2, [r3, #0]
    257a:	2308      	movs	r3, #8
    257c:	18fb      	adds	r3, r7, r3
    257e:	1c0a      	adds	r2, r1, #0
    2580:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
    2582:	2300      	movs	r3, #0
    2584:	617b      	str	r3, [r7, #20]
	//asssemble the message being read
	imuData.address = LSM6DSO_I2C_ADD_H;
    2586:	4b13      	ldr	r3, [pc, #76]	; (25d4 <platform_read+0x70>)
    2588:	226b      	movs	r2, #107	; 0x6b
    258a:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
    258c:	4b11      	ldr	r3, [pc, #68]	; (25d4 <platform_read+0x70>)
    258e:	2208      	movs	r2, #8
    2590:	18ba      	adds	r2, r7, r2
    2592:	8812      	ldrh	r2, [r2, #0]
    2594:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
    2596:	4b0f      	ldr	r3, [pc, #60]	; (25d4 <platform_read+0x70>)
    2598:	687a      	ldr	r2, [r7, #4]
    259a:	609a      	str	r2, [r3, #8]
	//clear our outwards message
	imuData.lenOut = 1;
    259c:	4b0d      	ldr	r3, [pc, #52]	; (25d4 <platform_read+0x70>)
    259e:	2201      	movs	r2, #1
    25a0:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
    25a2:	4b0d      	ldr	r3, [pc, #52]	; (25d8 <platform_read+0x74>)
    25a4:	220b      	movs	r2, #11
    25a6:	18ba      	adds	r2, r7, r2
    25a8:	7812      	ldrb	r2, [r2, #0]
    25aa:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
    25ac:	4b0a      	ldr	r3, [pc, #40]	; (25d8 <platform_read+0x74>)
    25ae:	2200      	movs	r2, #0
    25b0:	705a      	strb	r2, [r3, #1]
	imuData.msgOut = &msgOutImu;
    25b2:	4b08      	ldr	r3, [pc, #32]	; (25d4 <platform_read+0x70>)
    25b4:	4a08      	ldr	r2, [pc, #32]	; (25d8 <platform_read+0x74>)
    25b6:	605a      	str	r2, [r3, #4]
	//read the imudata struct
	error = I2cReadDataWait(&imuData, 5, 100);
    25b8:	4b06      	ldr	r3, [pc, #24]	; (25d4 <platform_read+0x70>)
    25ba:	2264      	movs	r2, #100	; 0x64
    25bc:	2105      	movs	r1, #5
    25be:	0018      	movs	r0, r3
    25c0:	4b06      	ldr	r3, [pc, #24]	; (25dc <platform_read+0x78>)
    25c2:	4798      	blx	r3
    25c4:	0003      	movs	r3, r0
    25c6:	617b      	str	r3, [r7, #20]
	
	return error;
    25c8:	697b      	ldr	r3, [r7, #20]

}
    25ca:	0018      	movs	r0, r3
    25cc:	46bd      	mov	sp, r7
    25ce:	b006      	add	sp, #24
    25d0:	bd80      	pop	{r7, pc}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	200039f0 	.word	0x200039f0
    25d8:	200039b0 	.word	0x200039b0
    25dc:	000016b1 	.word	0x000016b1

000025e0 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	af00      	add	r7, sp, #0
return &dev_ctx;
    25e4:	4b01      	ldr	r3, [pc, #4]	; (25ec <GetImuStruct+0xc>)
}
    25e6:	0018      	movs	r0, r3
    25e8:	46bd      	mov	sp, r7
    25ea:	bd80      	pop	{r7, pc}
    25ec:	20000000 	.word	0x20000000

000025f0 <InitImu>:



int32_t InitImu(void)
{
    25f0:	b580      	push	{r7, lr}
    25f2:	b082      	sub	sp, #8
    25f4:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
    25f6:	2300      	movs	r3, #0
    25f8:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
    25fa:	4b23      	ldr	r3, [pc, #140]	; (2688 <InitImu+0x98>)
    25fc:	2101      	movs	r1, #1
    25fe:	0018      	movs	r0, r3
    2600:	4b22      	ldr	r3, [pc, #136]	; (268c <InitImu+0x9c>)
    2602:	4798      	blx	r3
    2604:	0003      	movs	r3, r0
    2606:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
    2608:	1cfa      	adds	r2, r7, #3
    260a:	4b1f      	ldr	r3, [pc, #124]	; (2688 <InitImu+0x98>)
    260c:	0011      	movs	r1, r2
    260e:	0018      	movs	r0, r3
    2610:	4b1f      	ldr	r3, [pc, #124]	; (2690 <InitImu+0xa0>)
    2612:	4798      	blx	r3
    2614:	0002      	movs	r2, r0
    2616:	687b      	ldr	r3, [r7, #4]
    2618:	4313      	orrs	r3, r2
    261a:	607b      	str	r3, [r7, #4]
  } while (rst);
    261c:	1cfb      	adds	r3, r7, #3
    261e:	781b      	ldrb	r3, [r3, #0]
    2620:	2b00      	cmp	r3, #0
    2622:	d1f1      	bne.n	2608 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    2624:	4b18      	ldr	r3, [pc, #96]	; (2688 <InitImu+0x98>)
    2626:	2180      	movs	r1, #128	; 0x80
    2628:	0018      	movs	r0, r3
    262a:	4b1a      	ldr	r3, [pc, #104]	; (2694 <InitImu+0xa4>)
    262c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    262e:	4b16      	ldr	r3, [pc, #88]	; (2688 <InitImu+0x98>)
    2630:	2101      	movs	r1, #1
    2632:	0018      	movs	r0, r3
    2634:	4b18      	ldr	r3, [pc, #96]	; (2698 <InitImu+0xa8>)
    2636:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    2638:	4b13      	ldr	r3, [pc, #76]	; (2688 <InitImu+0x98>)
    263a:	2100      	movs	r1, #0
    263c:	0018      	movs	r0, r3
    263e:	4b17      	ldr	r3, [pc, #92]	; (269c <InitImu+0xac>)
    2640:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
    2642:	4b11      	ldr	r3, [pc, #68]	; (2688 <InitImu+0x98>)
    2644:	2101      	movs	r1, #1
    2646:	0018      	movs	r0, r3
    2648:	4b15      	ldr	r3, [pc, #84]	; (26a0 <InitImu+0xb0>)
    264a:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
    264c:	4b0e      	ldr	r3, [pc, #56]	; (2688 <InitImu+0x98>)
    264e:	2101      	movs	r1, #1
    2650:	0018      	movs	r0, r3
    2652:	4b14      	ldr	r3, [pc, #80]	; (26a4 <InitImu+0xb4>)
    2654:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    2656:	4b0c      	ldr	r3, [pc, #48]	; (2688 <InitImu+0x98>)
    2658:	2100      	movs	r1, #0
    265a:	0018      	movs	r0, r3
    265c:	4b12      	ldr	r3, [pc, #72]	; (26a8 <InitImu+0xb8>)
    265e:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    2660:	4b09      	ldr	r3, [pc, #36]	; (2688 <InitImu+0x98>)
    2662:	2106      	movs	r1, #6
    2664:	0018      	movs	r0, r3
    2666:	4b11      	ldr	r3, [pc, #68]	; (26ac <InitImu+0xbc>)
    2668:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    266a:	4b07      	ldr	r3, [pc, #28]	; (2688 <InitImu+0x98>)
    266c:	2104      	movs	r1, #4
    266e:	0018      	movs	r0, r3
    2670:	4b0f      	ldr	r3, [pc, #60]	; (26b0 <InitImu+0xc0>)
    2672:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    2674:	4b04      	ldr	r3, [pc, #16]	; (2688 <InitImu+0x98>)
    2676:	2101      	movs	r1, #1
    2678:	0018      	movs	r0, r3
    267a:	4b0e      	ldr	r3, [pc, #56]	; (26b4 <InitImu+0xc4>)
    267c:	4798      	blx	r3

  return error;
    267e:	687b      	ldr	r3, [r7, #4]
}
    2680:	0018      	movs	r0, r3
    2682:	46bd      	mov	sp, r7
    2684:	b002      	add	sp, #8
    2686:	bd80      	pop	{r7, pc}
    2688:	20000000 	.word	0x20000000
    268c:	0000214d 	.word	0x0000214d
    2690:	000021b9 	.word	0x000021b9
    2694:	00002319 	.word	0x00002319
    2698:	00001ef5 	.word	0x00001ef5
    269c:	00001f61 	.word	0x00001f61
    26a0:	00001901 	.word	0x00001901
    26a4:	00001c31 	.word	0x00001c31
    26a8:	00001895 	.word	0x00001895
    26ac:	00001bc5 	.word	0x00001bc5
    26b0:	00002261 	.word	0x00002261
    26b4:	000021f5 	.word	0x000021f5

000026b8 <InitializeSeesaw>:
                				
* @return		Returns 0 if no errors.
* @note         
*****************************************************************************/
int InitializeSeesaw(void)
{
    26b8:	b590      	push	{r4, r7, lr}
    26ba:	b083      	sub	sp, #12
    26bc:	af00      	add	r7, sp, #0
	uint8_t readData[2];
	seesawData.address = NEO_TRELLIS_ADDR;
    26be:	4b40      	ldr	r3, [pc, #256]	; (27c0 <InitializeSeesaw+0x108>)
    26c0:	222e      	movs	r2, #46	; 0x2e
    26c2:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgBaseGetHWID;
    26c4:	4b3e      	ldr	r3, [pc, #248]	; (27c0 <InitializeSeesaw+0x108>)
    26c6:	4a3f      	ldr	r2, [pc, #252]	; (27c4 <InitializeSeesaw+0x10c>)
    26c8:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
    26ca:	4b3d      	ldr	r3, [pc, #244]	; (27c0 <InitializeSeesaw+0x108>)
    26cc:	2202      	movs	r2, #2
    26ce:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = &readData;
    26d0:	4b3b      	ldr	r3, [pc, #236]	; (27c0 <InitializeSeesaw+0x108>)
    26d2:	003a      	movs	r2, r7
    26d4:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = 1;
    26d6:	4b3a      	ldr	r3, [pc, #232]	; (27c0 <InitializeSeesaw+0x108>)
    26d8:	2201      	movs	r2, #1
    26da:	819a      	strh	r2, [r3, #12]

	//Check if device is on the line - it should answer with its HW ID

	int error = I2cReadDataWait(&seesawData, 0, 100);
    26dc:	4b38      	ldr	r3, [pc, #224]	; (27c0 <InitializeSeesaw+0x108>)
    26de:	2264      	movs	r2, #100	; 0x64
    26e0:	2100      	movs	r1, #0
    26e2:	0018      	movs	r0, r3
    26e4:	4b38      	ldr	r3, [pc, #224]	; (27c8 <InitializeSeesaw+0x110>)
    26e6:	4798      	blx	r3
    26e8:	0003      	movs	r3, r0
    26ea:	607b      	str	r3, [r7, #4]

	if(ERROR_NONE != error)
    26ec:	687b      	ldr	r3, [r7, #4]
    26ee:	2b00      	cmp	r3, #0
    26f0:	d00e      	beq.n	2710 <InitializeSeesaw+0x58>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    26f2:	4b36      	ldr	r3, [pc, #216]	; (27cc <InitializeSeesaw+0x114>)
    26f4:	0018      	movs	r0, r3
    26f6:	4b36      	ldr	r3, [pc, #216]	; (27d0 <InitializeSeesaw+0x118>)
    26f8:	4798      	blx	r3
		snprintf(seesawPrint, 64, "Our error inside seesaw is: %d\r\n", error);
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	4a35      	ldr	r2, [pc, #212]	; (27d4 <InitializeSeesaw+0x11c>)
    26fe:	4836      	ldr	r0, [pc, #216]	; (27d8 <InitializeSeesaw+0x120>)
    2700:	2140      	movs	r1, #64	; 0x40
    2702:	4c36      	ldr	r4, [pc, #216]	; (27dc <InitializeSeesaw+0x124>)
    2704:	47a0      	blx	r4
		SerialConsoleWriteString(seesawPrint);
    2706:	4b34      	ldr	r3, [pc, #208]	; (27d8 <InitializeSeesaw+0x120>)
    2708:	0018      	movs	r0, r3
    270a:	4b31      	ldr	r3, [pc, #196]	; (27d0 <InitializeSeesaw+0x118>)
    270c:	4798      	blx	r3
    270e:	e011      	b.n	2734 <InitializeSeesaw+0x7c>
	}
	else
	{
		if(readData[0] != SEESAW_HW_ID_CODE )
    2710:	003b      	movs	r3, r7
    2712:	781b      	ldrb	r3, [r3, #0]
    2714:	2b55      	cmp	r3, #85	; 0x55
    2716:	d009      	beq.n	272c <InitializeSeesaw+0x74>
		{
			SerialConsoleWriteString("Error\r\n");
    2718:	4b31      	ldr	r3, [pc, #196]	; (27e0 <InitializeSeesaw+0x128>)
    271a:	0018      	movs	r0, r3
    271c:	4b2c      	ldr	r3, [pc, #176]	; (27d0 <InitializeSeesaw+0x118>)
    271e:	4798      	blx	r3
			SerialConsoleWriteString("No seesaw ID \r\n");
    2720:	4b30      	ldr	r3, [pc, #192]	; (27e4 <InitializeSeesaw+0x12c>)
    2722:	0018      	movs	r0, r3
    2724:	4b2a      	ldr	r3, [pc, #168]	; (27d0 <InitializeSeesaw+0x118>)
    2726:	4798      	blx	r3
			return 1;
    2728:	2301      	movs	r3, #1
    272a:	e044      	b.n	27b6 <InitializeSeesaw+0xfe>
		}
		else
		{
		SerialConsoleWriteString("Found Seesaw!\r\n");
    272c:	4b2e      	ldr	r3, [pc, #184]	; (27e8 <InitializeSeesaw+0x130>)
    272e:	0018      	movs	r0, r3
    2730:	4b27      	ldr	r3, [pc, #156]	; (27d0 <InitializeSeesaw+0x118>)
    2732:	4798      	blx	r3
		}
	}

	//Tell the Seesaw which pins to use
	seesawData.msgOut = &msgNeopixelPin;
    2734:	4b22      	ldr	r3, [pc, #136]	; (27c0 <InitializeSeesaw+0x108>)
    2736:	4a2d      	ldr	r2, [pc, #180]	; (27ec <InitializeSeesaw+0x134>)
    2738:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
    273a:	4b21      	ldr	r3, [pc, #132]	; (27c0 <InitializeSeesaw+0x108>)
    273c:	2203      	movs	r2, #3
    273e:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
    2740:	4b1f      	ldr	r3, [pc, #124]	; (27c0 <InitializeSeesaw+0x108>)
    2742:	2164      	movs	r1, #100	; 0x64
    2744:	0018      	movs	r0, r3
    2746:	4b2a      	ldr	r3, [pc, #168]	; (27f0 <InitializeSeesaw+0x138>)
    2748:	4798      	blx	r3
    274a:	0003      	movs	r3, r0
    274c:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	2b00      	cmp	r3, #0
    2752:	d003      	beq.n	275c <InitializeSeesaw+0xa4>
	{
		SerialConsoleWriteString("Could not write Seesaw pin!\r\n");
    2754:	4b27      	ldr	r3, [pc, #156]	; (27f4 <InitializeSeesaw+0x13c>)
    2756:	0018      	movs	r0, r3
    2758:	4b1d      	ldr	r3, [pc, #116]	; (27d0 <InitializeSeesaw+0x118>)
    275a:	4798      	blx	r3
	}

	//Set seesaw Neopixel speed
	seesawData.msgOut = &msgNeopixelSpeed;
    275c:	4b18      	ldr	r3, [pc, #96]	; (27c0 <InitializeSeesaw+0x108>)
    275e:	4a26      	ldr	r2, [pc, #152]	; (27f8 <InitializeSeesaw+0x140>)
    2760:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
    2762:	4b17      	ldr	r3, [pc, #92]	; (27c0 <InitializeSeesaw+0x108>)
    2764:	2203      	movs	r2, #3
    2766:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
    2768:	4b15      	ldr	r3, [pc, #84]	; (27c0 <InitializeSeesaw+0x108>)
    276a:	2164      	movs	r1, #100	; 0x64
    276c:	0018      	movs	r0, r3
    276e:	4b20      	ldr	r3, [pc, #128]	; (27f0 <InitializeSeesaw+0x138>)
    2770:	4798      	blx	r3
    2772:	0003      	movs	r3, r0
    2774:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	2b00      	cmp	r3, #0
    277a:	d003      	beq.n	2784 <InitializeSeesaw+0xcc>
	{
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!\r\n");
    277c:	4b1f      	ldr	r3, [pc, #124]	; (27fc <InitializeSeesaw+0x144>)
    277e:	0018      	movs	r0, r3
    2780:	4b13      	ldr	r3, [pc, #76]	; (27d0 <InitializeSeesaw+0x118>)
    2782:	4798      	blx	r3
	}

	//Set seesaw Neopixel number of devices
	seesawData.msgOut = &msgNeopixelBufLength;
    2784:	4b0e      	ldr	r3, [pc, #56]	; (27c0 <InitializeSeesaw+0x108>)
    2786:	4a1e      	ldr	r2, [pc, #120]	; (2800 <InitializeSeesaw+0x148>)
    2788:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
    278a:	4b0d      	ldr	r3, [pc, #52]	; (27c0 <InitializeSeesaw+0x108>)
    278c:	2204      	movs	r2, #4
    278e:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
    2790:	4b0b      	ldr	r3, [pc, #44]	; (27c0 <InitializeSeesaw+0x108>)
    2792:	2164      	movs	r1, #100	; 0x64
    2794:	0018      	movs	r0, r3
    2796:	4b16      	ldr	r3, [pc, #88]	; (27f0 <InitializeSeesaw+0x138>)
    2798:	4798      	blx	r3
    279a:	0003      	movs	r3, r0
    279c:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	2b00      	cmp	r3, #0
    27a2:	d003      	beq.n	27ac <InitializeSeesaw+0xf4>
	{
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices\r\n");
    27a4:	4b17      	ldr	r3, [pc, #92]	; (2804 <InitializeSeesaw+0x14c>)
    27a6:	0018      	movs	r0, r3
    27a8:	4b09      	ldr	r3, [pc, #36]	; (27d0 <InitializeSeesaw+0x118>)
    27aa:	4798      	blx	r3
	}

	SeesawTurnOnLedTest();
    27ac:	4b16      	ldr	r3, [pc, #88]	; (2808 <InitializeSeesaw+0x150>)
    27ae:	4798      	blx	r3


	SeesawInitializeKeypad();
    27b0:	4b16      	ldr	r3, [pc, #88]	; (280c <InitializeSeesaw+0x154>)
    27b2:	4798      	blx	r3
	return error;
    27b4:	687b      	ldr	r3, [r7, #4]

}
    27b6:	0018      	movs	r0, r3
    27b8:	46bd      	mov	sp, r7
    27ba:	b003      	add	sp, #12
    27bc:	bd90      	pop	{r4, r7, pc}
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	20003a40 	.word	0x20003a40
    27c4:	0000efe4 	.word	0x0000efe4
    27c8:	000016b1 	.word	0x000016b1
    27cc:	0000effc 	.word	0x0000effc
    27d0:	000093b9 	.word	0x000093b9
    27d4:	0000f01c 	.word	0x0000f01c
    27d8:	20003a00 	.word	0x20003a00
    27dc:	0000e395 	.word	0x0000e395
    27e0:	0000f040 	.word	0x0000f040
    27e4:	0000f048 	.word	0x0000f048
    27e8:	0000f058 	.word	0x0000f058
    27ec:	0000efe8 	.word	0x0000efe8
    27f0:	000015e1 	.word	0x000015e1
    27f4:	0000f068 	.word	0x0000f068
    27f8:	0000efec 	.word	0x0000efec
    27fc:	0000f088 	.word	0x0000f088
    2800:	0000eff0 	.word	0x0000eff0
    2804:	0000f0b0 	.word	0x0000f0b0
    2808:	00002bbd 	.word	0x00002bbd
    280c:	00002acd 	.word	0x00002acd

00002810 <SeesawGetKeypadCount>:
* @details 	Assumes Seesaw is already initialized
                				
* @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
* @note         
*****************************************************************************/
uint8_t SeesawGetKeypadCount(void) {
    2810:	b580      	push	{r7, lr}
    2812:	b082      	sub	sp, #8
    2814:	af00      	add	r7, sp, #0
	uint8_t count = 0;
    2816:	1cfb      	adds	r3, r7, #3
    2818:	2200      	movs	r2, #0
    281a:	701a      	strb	r2, [r3, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
    281c:	4b11      	ldr	r3, [pc, #68]	; (2864 <SeesawGetKeypadCount+0x54>)
    281e:	222e      	movs	r2, #46	; 0x2e
    2820:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgKeypadGetCount;
    2822:	4b10      	ldr	r3, [pc, #64]	; (2864 <SeesawGetKeypadCount+0x54>)
    2824:	4a10      	ldr	r2, [pc, #64]	; (2868 <SeesawGetKeypadCount+0x58>)
    2826:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgKeypadGetCount);
    2828:	4b0e      	ldr	r3, [pc, #56]	; (2864 <SeesawGetKeypadCount+0x54>)
    282a:	2202      	movs	r2, #2
    282c:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = &count;
    282e:	4b0d      	ldr	r3, [pc, #52]	; (2864 <SeesawGetKeypadCount+0x54>)
    2830:	1cfa      	adds	r2, r7, #3
    2832:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = 1;
    2834:	4b0b      	ldr	r3, [pc, #44]	; (2864 <SeesawGetKeypadCount+0x54>)
    2836:	2201      	movs	r2, #1
    2838:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
    283a:	4b0a      	ldr	r3, [pc, #40]	; (2864 <SeesawGetKeypadCount+0x54>)
    283c:	2264      	movs	r2, #100	; 0x64
    283e:	2100      	movs	r1, #0
    2840:	0018      	movs	r0, r3
    2842:	4b0a      	ldr	r3, [pc, #40]	; (286c <SeesawGetKeypadCount+0x5c>)
    2844:	4798      	blx	r3
    2846:	0003      	movs	r3, r0
    2848:	607b      	str	r3, [r7, #4]

	if(ERROR_NONE != error)
    284a:	687b      	ldr	r3, [r7, #4]
    284c:	2b00      	cmp	r3, #0
    284e:	d003      	beq.n	2858 <SeesawGetKeypadCount+0x48>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!\r\n");
    2850:	4b07      	ldr	r3, [pc, #28]	; (2870 <SeesawGetKeypadCount+0x60>)
    2852:	0018      	movs	r0, r3
    2854:	4b07      	ldr	r3, [pc, #28]	; (2874 <SeesawGetKeypadCount+0x64>)
    2856:	4798      	blx	r3
	}
	return count;
    2858:	1cfb      	adds	r3, r7, #3
    285a:	781b      	ldrb	r3, [r3, #0]
}
    285c:	0018      	movs	r0, r3
    285e:	46bd      	mov	sp, r7
    2860:	b002      	add	sp, #8
    2862:	bd80      	pop	{r7, pc}
    2864:	20003a40 	.word	0x20003a40
    2868:	0000eff8 	.word	0x0000eff8
    286c:	000016b1 	.word	0x000016b1
    2870:	0000f0e4 	.word	0x0000f0e4
    2874:	000093b9 	.word	0x000093b9

00002878 <SeesawReadKeypad>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*****************************************************************************/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
	{
    2878:	b580      	push	{r7, lr}
    287a:	b084      	sub	sp, #16
    287c:	af00      	add	r7, sp, #0
    287e:	6078      	str	r0, [r7, #4]
    2880:	000a      	movs	r2, r1
    2882:	1cfb      	adds	r3, r7, #3
    2884:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
    2886:	2308      	movs	r3, #8
    2888:	18fb      	adds	r3, r7, r3
    288a:	4a14      	ldr	r2, [pc, #80]	; (28dc <SeesawReadKeypad+0x64>)
    288c:	8812      	ldrh	r2, [r2, #0]
    288e:	801a      	strh	r2, [r3, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
    2890:	4b13      	ldr	r3, [pc, #76]	; (28e0 <SeesawReadKeypad+0x68>)
    2892:	222e      	movs	r2, #46	; 0x2e
    2894:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &cmd;
    2896:	4b12      	ldr	r3, [pc, #72]	; (28e0 <SeesawReadKeypad+0x68>)
    2898:	2208      	movs	r2, #8
    289a:	18ba      	adds	r2, r7, r2
    289c:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
    289e:	4b10      	ldr	r3, [pc, #64]	; (28e0 <SeesawReadKeypad+0x68>)
    28a0:	2202      	movs	r2, #2
    28a2:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = buffer;
    28a4:	4b0e      	ldr	r3, [pc, #56]	; (28e0 <SeesawReadKeypad+0x68>)
    28a6:	687a      	ldr	r2, [r7, #4]
    28a8:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = count;
    28aa:	1cfb      	adds	r3, r7, #3
    28ac:	781b      	ldrb	r3, [r3, #0]
    28ae:	b29a      	uxth	r2, r3
    28b0:	4b0b      	ldr	r3, [pc, #44]	; (28e0 <SeesawReadKeypad+0x68>)
    28b2:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
    28b4:	4b0a      	ldr	r3, [pc, #40]	; (28e0 <SeesawReadKeypad+0x68>)
    28b6:	2264      	movs	r2, #100	; 0x64
    28b8:	2100      	movs	r1, #0
    28ba:	0018      	movs	r0, r3
    28bc:	4b09      	ldr	r3, [pc, #36]	; (28e4 <SeesawReadKeypad+0x6c>)
    28be:	4798      	blx	r3
    28c0:	0003      	movs	r3, r0
    28c2:	60fb      	str	r3, [r7, #12]

	if(ERROR_NONE != error)
    28c4:	68fb      	ldr	r3, [r7, #12]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d003      	beq.n	28d2 <SeesawReadKeypad+0x5a>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!\r\n");
    28ca:	4b07      	ldr	r3, [pc, #28]	; (28e8 <SeesawReadKeypad+0x70>)
    28cc:	0018      	movs	r0, r3
    28ce:	4b07      	ldr	r3, [pc, #28]	; (28ec <SeesawReadKeypad+0x74>)
    28d0:	4798      	blx	r3
	}
	return error;
    28d2:	68fb      	ldr	r3, [r7, #12]
}
    28d4:	0018      	movs	r0, r3
    28d6:	46bd      	mov	sp, r7
    28d8:	b004      	add	sp, #16
    28da:	bd80      	pop	{r7, pc}
    28dc:	0000f104 	.word	0x0000f104
    28e0:	20003a40 	.word	0x20003a40
    28e4:	000016b1 	.word	0x000016b1
    28e8:	0000f0e4 	.word	0x0000f0e4
    28ec:	000093b9 	.word	0x000093b9

000028f0 <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
    28f0:	b590      	push	{r4, r7, lr}
    28f2:	b087      	sub	sp, #28
    28f4:	af00      	add	r7, sp, #0
    28f6:	0004      	movs	r4, r0
    28f8:	0008      	movs	r0, r1
    28fa:	0011      	movs	r1, r2
    28fc:	1dfb      	adds	r3, r7, #7
    28fe:	1c22      	adds	r2, r4, #0
    2900:	701a      	strb	r2, [r3, #0]
    2902:	1dbb      	adds	r3, r7, #6
    2904:	1c02      	adds	r2, r0, #0
    2906:	701a      	strb	r2, [r3, #0]
    2908:	1d7b      	adds	r3, r7, #5
    290a:	1c0a      	adds	r2, r1, #0
    290c:	701a      	strb	r2, [r3, #0]
	union keyState ks;
	ks.bit.STATE = enable;
    290e:	2310      	movs	r3, #16
    2910:	18fb      	adds	r3, r7, r3
    2912:	1d7a      	adds	r2, r7, #5
    2914:	7812      	ldrb	r2, [r2, #0]
    2916:	2101      	movs	r1, #1
    2918:	0010      	movs	r0, r2
    291a:	4008      	ands	r0, r1
    291c:	781a      	ldrb	r2, [r3, #0]
    291e:	2101      	movs	r1, #1
    2920:	438a      	bics	r2, r1
    2922:	1c11      	adds	r1, r2, #0
    2924:	1c02      	adds	r2, r0, #0
    2926:	430a      	orrs	r2, r1
    2928:	701a      	strb	r2, [r3, #0]
	ks.bit.ACTIVE = (1 << edge);
    292a:	1dbb      	adds	r3, r7, #6
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	2201      	movs	r2, #1
    2930:	409a      	lsls	r2, r3
    2932:	0013      	movs	r3, r2
    2934:	b2db      	uxtb	r3, r3
    2936:	1c1a      	adds	r2, r3, #0
    2938:	230f      	movs	r3, #15
    293a:	4013      	ands	r3, r2
    293c:	b2da      	uxtb	r2, r3
    293e:	2310      	movs	r3, #16
    2940:	18fb      	adds	r3, r7, r3
    2942:	210f      	movs	r1, #15
    2944:	400a      	ands	r2, r1
    2946:	1890      	adds	r0, r2, r2
    2948:	781a      	ldrb	r2, [r3, #0]
    294a:	211e      	movs	r1, #30
    294c:	438a      	bics	r2, r1
    294e:	1c11      	adds	r1, r2, #0
    2950:	1c02      	adds	r2, r0, #0
    2952:	430a      	orrs	r2, r1
    2954:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
    2956:	230c      	movs	r3, #12
    2958:	18fb      	adds	r3, r7, r3
    295a:	2210      	movs	r2, #16
    295c:	701a      	strb	r2, [r3, #0]
    295e:	230c      	movs	r3, #12
    2960:	18fb      	adds	r3, r7, r3
    2962:	2201      	movs	r2, #1
    2964:	705a      	strb	r2, [r3, #1]
    2966:	230c      	movs	r3, #12
    2968:	18fb      	adds	r3, r7, r3
    296a:	1dfa      	adds	r2, r7, #7
    296c:	7812      	ldrb	r2, [r2, #0]
    296e:	709a      	strb	r2, [r3, #2]
    2970:	2310      	movs	r3, #16
    2972:	18fb      	adds	r3, r7, r3
    2974:	781a      	ldrb	r2, [r3, #0]
    2976:	230c      	movs	r3, #12
    2978:	18fb      	adds	r3, r7, r3
    297a:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
    297c:	4b0c      	ldr	r3, [pc, #48]	; (29b0 <SeesawActivateKey+0xc0>)
    297e:	222e      	movs	r2, #46	; 0x2e
    2980:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &cmd;
    2982:	4b0b      	ldr	r3, [pc, #44]	; (29b0 <SeesawActivateKey+0xc0>)
    2984:	220c      	movs	r2, #12
    2986:	18ba      	adds	r2, r7, r2
    2988:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
    298a:	4b09      	ldr	r3, [pc, #36]	; (29b0 <SeesawActivateKey+0xc0>)
    298c:	2204      	movs	r2, #4
    298e:	81da      	strh	r2, [r3, #14]
	seesawData.lenIn = 0;
    2990:	4b07      	ldr	r3, [pc, #28]	; (29b0 <SeesawActivateKey+0xc0>)
    2992:	2200      	movs	r2, #0
    2994:	819a      	strh	r2, [r3, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    2996:	4b06      	ldr	r3, [pc, #24]	; (29b0 <SeesawActivateKey+0xc0>)
    2998:	2164      	movs	r1, #100	; 0x64
    299a:	0018      	movs	r0, r3
    299c:	4b05      	ldr	r3, [pc, #20]	; (29b4 <SeesawActivateKey+0xc4>)
    299e:	4798      	blx	r3
    29a0:	0003      	movs	r3, r0
    29a2:	617b      	str	r3, [r7, #20]
	return error;
    29a4:	697b      	ldr	r3, [r7, #20]
}
    29a6:	0018      	movs	r0, r3
    29a8:	46bd      	mov	sp, r7
    29aa:	b007      	add	sp, #28
    29ac:	bd90      	pop	{r4, r7, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	20003a40 	.word	0x20003a40
    29b4:	000015e1 	.word	0x000015e1

000029b8 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
    29b8:	b5b0      	push	{r4, r5, r7, lr}
    29ba:	b088      	sub	sp, #32
    29bc:	af00      	add	r7, sp, #0
    29be:	0005      	movs	r5, r0
    29c0:	000c      	movs	r4, r1
    29c2:	0010      	movs	r0, r2
    29c4:	0019      	movs	r1, r3
    29c6:	1dfb      	adds	r3, r7, #7
    29c8:	1c2a      	adds	r2, r5, #0
    29ca:	701a      	strb	r2, [r3, #0]
    29cc:	1dbb      	adds	r3, r7, #6
    29ce:	1c22      	adds	r2, r4, #0
    29d0:	701a      	strb	r2, [r3, #0]
    29d2:	1d7b      	adds	r3, r7, #5
    29d4:	1c02      	adds	r2, r0, #0
    29d6:	701a      	strb	r2, [r3, #0]
    29d8:	1d3b      	adds	r3, r7, #4
    29da:	1c0a      	adds	r2, r1, #0
    29dc:	701a      	strb	r2, [r3, #0]
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
    29de:	2310      	movs	r3, #16
    29e0:	18fb      	adds	r3, r7, r3
    29e2:	220e      	movs	r2, #14
    29e4:	701a      	strb	r2, [r3, #0]
    29e6:	2310      	movs	r3, #16
    29e8:	18fb      	adds	r3, r7, r3
    29ea:	2204      	movs	r2, #4
    29ec:	705a      	strb	r2, [r3, #1]
    29ee:	2310      	movs	r3, #16
    29f0:	18fb      	adds	r3, r7, r3
    29f2:	2200      	movs	r2, #0
    29f4:	709a      	strb	r2, [r3, #2]
    29f6:	2310      	movs	r3, #16
    29f8:	18fb      	adds	r3, r7, r3
    29fa:	2200      	movs	r2, #0
    29fc:	70da      	strb	r2, [r3, #3]
    29fe:	2310      	movs	r3, #16
    2a00:	18fb      	adds	r3, r7, r3
    2a02:	1d7a      	adds	r2, r7, #5
    2a04:	7812      	ldrb	r2, [r2, #0]
    2a06:	711a      	strb	r2, [r3, #4]
    2a08:	2310      	movs	r3, #16
    2a0a:	18fb      	adds	r3, r7, r3
    2a0c:	1dba      	adds	r2, r7, #6
    2a0e:	7812      	ldrb	r2, [r2, #0]
    2a10:	715a      	strb	r2, [r3, #5]
    2a12:	2310      	movs	r3, #16
    2a14:	18fb      	adds	r3, r7, r3
    2a16:	1d3a      	adds	r2, r7, #4
    2a18:	7812      	ldrb	r2, [r2, #0]
    2a1a:	719a      	strb	r2, [r3, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
    2a1c:	230c      	movs	r3, #12
    2a1e:	18fb      	adds	r3, r7, r3
    2a20:	4a17      	ldr	r2, [pc, #92]	; (2a80 <SeesawSetLed+0xc8>)
    2a22:	8812      	ldrh	r2, [r2, #0]
    2a24:	801a      	strh	r2, [r3, #0]

	uint16_t offset = 3 * key; //RGB LED
    2a26:	1dfb      	adds	r3, r7, #7
    2a28:	781b      	ldrb	r3, [r3, #0]
    2a2a:	b29b      	uxth	r3, r3
    2a2c:	221e      	movs	r2, #30
    2a2e:	18ba      	adds	r2, r7, r2
    2a30:	1c19      	adds	r1, r3, #0
    2a32:	1c0b      	adds	r3, r1, #0
    2a34:	18db      	adds	r3, r3, r3
    2a36:	185b      	adds	r3, r3, r1
    2a38:	8013      	strh	r3, [r2, #0]
	write_buffer1[2] = (offset >> 8);
    2a3a:	231e      	movs	r3, #30
    2a3c:	18fb      	adds	r3, r7, r3
    2a3e:	881b      	ldrh	r3, [r3, #0]
    2a40:	0a1b      	lsrs	r3, r3, #8
    2a42:	b29b      	uxth	r3, r3
    2a44:	b2da      	uxtb	r2, r3
    2a46:	2310      	movs	r3, #16
    2a48:	18fb      	adds	r3, r7, r3
    2a4a:	709a      	strb	r2, [r3, #2]
	write_buffer1[3] = (offset);
    2a4c:	231e      	movs	r3, #30
    2a4e:	18fb      	adds	r3, r7, r3
    2a50:	881b      	ldrh	r3, [r3, #0]
    2a52:	b2da      	uxtb	r2, r3
    2a54:	2310      	movs	r3, #16
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	70da      	strb	r2, [r3, #3]

	seesawData.msgOut = &write_buffer1;
    2a5a:	4b0a      	ldr	r3, [pc, #40]	; (2a84 <SeesawSetLed+0xcc>)
    2a5c:	2210      	movs	r2, #16
    2a5e:	18ba      	adds	r2, r7, r2
    2a60:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(write_buffer1);
    2a62:	4b08      	ldr	r3, [pc, #32]	; (2a84 <SeesawSetLed+0xcc>)
    2a64:	2207      	movs	r2, #7
    2a66:	81da      	strh	r2, [r3, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    2a68:	4b06      	ldr	r3, [pc, #24]	; (2a84 <SeesawSetLed+0xcc>)
    2a6a:	2164      	movs	r1, #100	; 0x64
    2a6c:	0018      	movs	r0, r3
    2a6e:	4b06      	ldr	r3, [pc, #24]	; (2a88 <SeesawSetLed+0xd0>)
    2a70:	4798      	blx	r3
    2a72:	0003      	movs	r3, r0
    2a74:	61bb      	str	r3, [r7, #24]
	return error;
    2a76:	69bb      	ldr	r3, [r7, #24]

}
    2a78:	0018      	movs	r0, r3
    2a7a:	46bd      	mov	sp, r7
    2a7c:	b008      	add	sp, #32
    2a7e:	bdb0      	pop	{r4, r5, r7, pc}
    2a80:	0000f108 	.word	0x0000f108
    2a84:	20003a40 	.word	0x20003a40
    2a88:	000015e1 	.word	0x000015e1

00002a8c <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
    2a8c:	b580      	push	{r7, lr}
    2a8e:	b082      	sub	sp, #8
    2a90:	af00      	add	r7, sp, #0
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
    2a92:	003b      	movs	r3, r7
    2a94:	4a0a      	ldr	r2, [pc, #40]	; (2ac0 <SeesawOrderLedUpdate+0x34>)
    2a96:	8812      	ldrh	r2, [r2, #0]
    2a98:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
    2a9a:	4b0a      	ldr	r3, [pc, #40]	; (2ac4 <SeesawOrderLedUpdate+0x38>)
    2a9c:	003a      	movs	r2, r7
    2a9e:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(orderBuffer);
    2aa0:	4b08      	ldr	r3, [pc, #32]	; (2ac4 <SeesawOrderLedUpdate+0x38>)
    2aa2:	2202      	movs	r2, #2
    2aa4:	81da      	strh	r2, [r3, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    2aa6:	4b07      	ldr	r3, [pc, #28]	; (2ac4 <SeesawOrderLedUpdate+0x38>)
    2aa8:	2164      	movs	r1, #100	; 0x64
    2aaa:	0018      	movs	r0, r3
    2aac:	4b06      	ldr	r3, [pc, #24]	; (2ac8 <SeesawOrderLedUpdate+0x3c>)
    2aae:	4798      	blx	r3
    2ab0:	0003      	movs	r3, r0
    2ab2:	607b      	str	r3, [r7, #4]
	return error;
    2ab4:	687b      	ldr	r3, [r7, #4]
}
    2ab6:	0018      	movs	r0, r3
    2ab8:	46bd      	mov	sp, r7
    2aba:	b002      	add	sp, #8
    2abc:	bd80      	pop	{r7, pc}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	0000f108 	.word	0x0000f108
    2ac4:	20003a40 	.word	0x20003a40
    2ac8:	000015e1 	.word	0x000015e1

00002acc <SeesawInitializeKeypad>:
/*****************************************************************************************
*  @brief     Activates a given key on the keypad
*  @return     Returns any error code found when executing task.
****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
    2acc:	b580      	push	{r7, lr}
    2ace:	b082      	sub	sp, #8
    2ad0:	af00      	add	r7, sp, #0
	seesawData.address = NEO_TRELLIS_ADDR;
    2ad2:	4b33      	ldr	r3, [pc, #204]	; (2ba0 <SeesawInitializeKeypad+0xd4>)
    2ad4:	222e      	movs	r2, #46	; 0x2e
    2ad6:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
    2ad8:	4b31      	ldr	r3, [pc, #196]	; (2ba0 <SeesawInitializeKeypad+0xd4>)
    2ada:	4a32      	ldr	r2, [pc, #200]	; (2ba4 <SeesawInitializeKeypad+0xd8>)
    2adc:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
    2ade:	4b30      	ldr	r3, [pc, #192]	; (2ba0 <SeesawInitializeKeypad+0xd4>)
    2ae0:	2203      	movs	r2, #3
    2ae2:	81da      	strh	r2, [r3, #14]
	seesawData.lenIn = 0;
    2ae4:	4b2e      	ldr	r3, [pc, #184]	; (2ba0 <SeesawInitializeKeypad+0xd4>)
    2ae6:	2200      	movs	r2, #0
    2ae8:	819a      	strh	r2, [r3, #12]

	int32_t error = I2cWriteDataWait(&seesawData, 100);
    2aea:	4b2d      	ldr	r3, [pc, #180]	; (2ba0 <SeesawInitializeKeypad+0xd4>)
    2aec:	2164      	movs	r1, #100	; 0x64
    2aee:	0018      	movs	r0, r3
    2af0:	4b2d      	ldr	r3, [pc, #180]	; (2ba8 <SeesawInitializeKeypad+0xdc>)
    2af2:	4798      	blx	r3
    2af4:	0003      	movs	r3, r0
    2af6:	603b      	str	r3, [r7, #0]
	if(ERROR_NONE != error)
    2af8:	683b      	ldr	r3, [r7, #0]
    2afa:	2b00      	cmp	r3, #0
    2afc:	d003      	beq.n	2b06 <SeesawInitializeKeypad+0x3a>
	{
		SerialConsoleWriteString("Could not initialize Keypad!\r\n");
    2afe:	4b2b      	ldr	r3, [pc, #172]	; (2bac <SeesawInitializeKeypad+0xe0>)
    2b00:	0018      	movs	r0, r3
    2b02:	4b2b      	ldr	r3, [pc, #172]	; (2bb0 <SeesawInitializeKeypad+0xe4>)
    2b04:	4798      	blx	r3
	}

	//Initialize all buttons to register an event for both press and release
	for(int i=0; i<16; i++){
    2b06:	2300      	movs	r3, #0
    2b08:	607b      	str	r3, [r7, #4]
    2b0a:	e041      	b.n	2b90 <SeesawInitializeKeypad+0xc4>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    2b0c:	687b      	ldr	r3, [r7, #4]
    2b0e:	2b00      	cmp	r3, #0
    2b10:	da00      	bge.n	2b14 <SeesawInitializeKeypad+0x48>
    2b12:	3303      	adds	r3, #3
    2b14:	109b      	asrs	r3, r3, #2
    2b16:	b2db      	uxtb	r3, r3
    2b18:	00db      	lsls	r3, r3, #3
    2b1a:	b2da      	uxtb	r2, r3
    2b1c:	687b      	ldr	r3, [r7, #4]
    2b1e:	4925      	ldr	r1, [pc, #148]	; (2bb4 <SeesawInitializeKeypad+0xe8>)
    2b20:	400b      	ands	r3, r1
    2b22:	d504      	bpl.n	2b2e <SeesawInitializeKeypad+0x62>
    2b24:	3b01      	subs	r3, #1
    2b26:	2104      	movs	r1, #4
    2b28:	4249      	negs	r1, r1
    2b2a:	430b      	orrs	r3, r1
    2b2c:	3301      	adds	r3, #1
    2b2e:	b2db      	uxtb	r3, r3
    2b30:	18d3      	adds	r3, r2, r3
    2b32:	b2db      	uxtb	r3, r3
    2b34:	2201      	movs	r2, #1
    2b36:	2103      	movs	r1, #3
    2b38:	0018      	movs	r0, r3
    2b3a:	4b1f      	ldr	r3, [pc, #124]	; (2bb8 <SeesawInitializeKeypad+0xec>)
    2b3c:	4798      	blx	r3
    2b3e:	0003      	movs	r3, r0
    2b40:	603b      	str	r3, [r7, #0]
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
    2b42:	687b      	ldr	r3, [r7, #4]
    2b44:	2b00      	cmp	r3, #0
    2b46:	da00      	bge.n	2b4a <SeesawInitializeKeypad+0x7e>
    2b48:	3303      	adds	r3, #3
    2b4a:	109b      	asrs	r3, r3, #2
    2b4c:	b2db      	uxtb	r3, r3
    2b4e:	00db      	lsls	r3, r3, #3
    2b50:	b2da      	uxtb	r2, r3
    2b52:	687b      	ldr	r3, [r7, #4]
    2b54:	4917      	ldr	r1, [pc, #92]	; (2bb4 <SeesawInitializeKeypad+0xe8>)
    2b56:	400b      	ands	r3, r1
    2b58:	d504      	bpl.n	2b64 <SeesawInitializeKeypad+0x98>
    2b5a:	3b01      	subs	r3, #1
    2b5c:	2104      	movs	r1, #4
    2b5e:	4249      	negs	r1, r1
    2b60:	430b      	orrs	r3, r1
    2b62:	3301      	adds	r3, #1
    2b64:	b2db      	uxtb	r3, r3
    2b66:	18d3      	adds	r3, r2, r3
    2b68:	b2db      	uxtb	r3, r3
    2b6a:	2201      	movs	r2, #1
    2b6c:	2102      	movs	r1, #2
    2b6e:	0018      	movs	r0, r3
    2b70:	4b11      	ldr	r3, [pc, #68]	; (2bb8 <SeesawInitializeKeypad+0xec>)
    2b72:	4798      	blx	r3
    2b74:	0002      	movs	r2, r0
    2b76:	683b      	ldr	r3, [r7, #0]
    2b78:	4313      	orrs	r3, r2
    2b7a:	603b      	str	r3, [r7, #0]
		if(ERROR_NONE != error)
    2b7c:	683b      	ldr	r3, [r7, #0]
    2b7e:	2b00      	cmp	r3, #0
    2b80:	d003      	beq.n	2b8a <SeesawInitializeKeypad+0xbe>
		{
			SerialConsoleWriteString("Could not initialize Keypad!\r\n");
    2b82:	4b0a      	ldr	r3, [pc, #40]	; (2bac <SeesawInitializeKeypad+0xe0>)
    2b84:	0018      	movs	r0, r3
    2b86:	4b0a      	ldr	r3, [pc, #40]	; (2bb0 <SeesawInitializeKeypad+0xe4>)
    2b88:	4798      	blx	r3
	for(int i=0; i<16; i++){
    2b8a:	687b      	ldr	r3, [r7, #4]
    2b8c:	3301      	adds	r3, #1
    2b8e:	607b      	str	r3, [r7, #4]
    2b90:	687b      	ldr	r3, [r7, #4]
    2b92:	2b0f      	cmp	r3, #15
    2b94:	ddba      	ble.n	2b0c <SeesawInitializeKeypad+0x40>
		}
	}
}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	46bd      	mov	sp, r7
    2b9a:	b002      	add	sp, #8
    2b9c:	bd80      	pop	{r7, pc}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	20003a40 	.word	0x20003a40
    2ba4:	0000eff4 	.word	0x0000eff4
    2ba8:	000015e1 	.word	0x000015e1
    2bac:	0000f10c 	.word	0x0000f10c
    2bb0:	000093b9 	.word	0x000093b9
    2bb4:	80000003 	.word	0x80000003
    2bb8:	000028f1 	.word	0x000028f1

00002bbc <SeesawTurnOnLedTest>:


static void SeesawTurnOnLedTest(void)
{
    2bbc:	b5b0      	push	{r4, r5, r7, lr}
    2bbe:	af00      	add	r7, sp, #0
	SeesawSetLed(15, 255, 255, 255);
    2bc0:	23ff      	movs	r3, #255	; 0xff
    2bc2:	22ff      	movs	r2, #255	; 0xff
    2bc4:	21ff      	movs	r1, #255	; 0xff
    2bc6:	200f      	movs	r0, #15
    2bc8:	4c09      	ldr	r4, [pc, #36]	; (2bf0 <SeesawTurnOnLedTest+0x34>)
    2bca:	47a0      	blx	r4
	SeesawOrderLedUpdate();
    2bcc:	4b09      	ldr	r3, [pc, #36]	; (2bf4 <SeesawTurnOnLedTest+0x38>)
    2bce:	4798      	blx	r3
	vTaskDelay(400);
    2bd0:	23c8      	movs	r3, #200	; 0xc8
    2bd2:	005b      	lsls	r3, r3, #1
    2bd4:	0018      	movs	r0, r3
    2bd6:	4b08      	ldr	r3, [pc, #32]	; (2bf8 <SeesawTurnOnLedTest+0x3c>)
    2bd8:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
    2bda:	2300      	movs	r3, #0
    2bdc:	2200      	movs	r2, #0
    2bde:	2100      	movs	r1, #0
    2be0:	200f      	movs	r0, #15
    2be2:	4c03      	ldr	r4, [pc, #12]	; (2bf0 <SeesawTurnOnLedTest+0x34>)
    2be4:	47a0      	blx	r4
	SeesawOrderLedUpdate();
    2be6:	4b03      	ldr	r3, [pc, #12]	; (2bf4 <SeesawTurnOnLedTest+0x38>)
    2be8:	4798      	blx	r3
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	46bd      	mov	sp, r7
    2bee:	bdb0      	pop	{r4, r5, r7, pc}
    2bf0:	000029b9 	.word	0x000029b9
    2bf4:	00002a8d 	.word	0x00002a8d
    2bf8:	00007815 	.word	0x00007815

00002bfc <vUiHandlerTask>:

char UiPrintBuf[64];
uint8_t SeesawEventBuf[64];

void vUiHandlerTask( void *pvParameters )
{
    2bfc:	b590      	push	{r4, r7, lr}
    2bfe:	b089      	sub	sp, #36	; 0x24
    2c00:	af00      	add	r7, sp, #0
    2c02:	6078      	str	r0, [r7, #4]
	//Do initialization code here
	SerialConsoleWriteString("UI Task Started!");
    2c04:	4b54      	ldr	r3, [pc, #336]	; (2d58 <vUiHandlerTask+0x15c>)
    2c06:	0018      	movs	r0, r3
    2c08:	4b54      	ldr	r3, [pc, #336]	; (2d5c <vUiHandlerTask+0x160>)
    2c0a:	4798      	blx	r3
	uiState = UI_STATE_HANDLE_BUTTONS;
    2c0c:	4b54      	ldr	r3, [pc, #336]	; (2d60 <vUiHandlerTask+0x164>)
    2c0e:	2200      	movs	r2, #0
    2c10:	701a      	strb	r2, [r3, #0]

	TickType_t startTime = xTaskGetTickCount();
    2c12:	4b54      	ldr	r3, [pc, #336]	; (2d64 <vUiHandlerTask+0x168>)
    2c14:	4798      	blx	r3
    2c16:	0003      	movs	r3, r0
    2c18:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		static uint8_t curr_cnt = 0;
		static uint8_t prev_cnt = 0;
	
		switch(uiState)
    2c1a:	4b51      	ldr	r3, [pc, #324]	; (2d60 <vUiHandlerTask+0x164>)
    2c1c:	781b      	ldrb	r3, [r3, #0]
    2c1e:	2b01      	cmp	r3, #1
    2c20:	d100      	bne.n	2c24 <vUiHandlerTask+0x28>
    2c22:	e090      	b.n	2d46 <vUiHandlerTask+0x14a>
    2c24:	2b02      	cmp	r3, #2
    2c26:	d100      	bne.n	2c2a <vUiHandlerTask+0x2e>
    2c28:	e08f      	b.n	2d4a <vUiHandlerTask+0x14e>
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d000      	beq.n	2c30 <vUiHandlerTask+0x34>
    2c2e:	e086      	b.n	2d3e <vUiHandlerTask+0x142>
		{
			case(UI_STATE_HANDLE_BUTTONS):
			{
				//Do the handle buttons code here!
			
				curr_cnt = SeesawGetKeypadCount();
    2c30:	4b4d      	ldr	r3, [pc, #308]	; (2d68 <vUiHandlerTask+0x16c>)
    2c32:	4798      	blx	r3
    2c34:	0003      	movs	r3, r0
    2c36:	001a      	movs	r2, r3
    2c38:	4b4c      	ldr	r3, [pc, #304]	; (2d6c <vUiHandlerTask+0x170>)
    2c3a:	701a      	strb	r2, [r3, #0]
				//snprintf(UiPrintBuf, 64, "curr count is: %d\r\n", curr_cnt);
				//SerialConsoleWriteString(UiPrintBuf);
			
				if(xTaskGetTickCount() - startTime > 200)
    2c3c:	4b49      	ldr	r3, [pc, #292]	; (2d64 <vUiHandlerTask+0x168>)
    2c3e:	4798      	blx	r3
    2c40:	0002      	movs	r2, r0
    2c42:	69fb      	ldr	r3, [r7, #28]
    2c44:	1ad3      	subs	r3, r2, r3
    2c46:	2bc8      	cmp	r3, #200	; 0xc8
    2c48:	d800      	bhi.n	2c4c <vUiHandlerTask+0x50>
    2c4a:	e080      	b.n	2d4e <vUiHandlerTask+0x152>
				{
					startTime = xTaskGetTickCount(); //Save tick time for next round
    2c4c:	4b45      	ldr	r3, [pc, #276]	; (2d64 <vUiHandlerTask+0x168>)
    2c4e:	4798      	blx	r3
    2c50:	0003      	movs	r3, r0
    2c52:	61fb      	str	r3, [r7, #28]
				
					//snprintf(UiPrintBuf, 64, "delta count is: %d\r\n", curr_cnt);
					//SerialConsoleWriteString(UiPrintBuf);
				
					if (curr_cnt != 0)
    2c54:	4b45      	ldr	r3, [pc, #276]	; (2d6c <vUiHandlerTask+0x170>)
    2c56:	781b      	ldrb	r3, [r3, #0]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d100      	bne.n	2c5e <vUiHandlerTask+0x62>
    2c5c:	e077      	b.n	2d4e <vUiHandlerTask+0x152>
					{
						int readKeypadError = SeesawReadKeypad(SeesawEventBuf, curr_cnt);
    2c5e:	4b43      	ldr	r3, [pc, #268]	; (2d6c <vUiHandlerTask+0x170>)
    2c60:	781a      	ldrb	r2, [r3, #0]
    2c62:	4b43      	ldr	r3, [pc, #268]	; (2d70 <vUiHandlerTask+0x174>)
    2c64:	0011      	movs	r1, r2
    2c66:	0018      	movs	r0, r3
    2c68:	4b42      	ldr	r3, [pc, #264]	; (2d74 <vUiHandlerTask+0x178>)
    2c6a:	4798      	blx	r3
    2c6c:	0003      	movs	r3, r0
    2c6e:	617b      	str	r3, [r7, #20]
						//SerialConsoleWriteString(UiPrintBuf);

						//SerialConsoleWriteString(SeesawEventBuf);
						//SerialConsoleWriteString("\r\n");
						
						int i = 0;
    2c70:	2300      	movs	r3, #0
    2c72:	61bb      	str	r3, [r7, #24]
						while(SeesawEventBuf[i] != NULL)
    2c74:	e059      	b.n	2d2a <vUiHandlerTask+0x12e>
						{
							uint8_t byte = SeesawEventBuf[i];
    2c76:	2313      	movs	r3, #19
    2c78:	18fb      	adds	r3, r7, r3
    2c7a:	493d      	ldr	r1, [pc, #244]	; (2d70 <vUiHandlerTask+0x174>)
    2c7c:	69ba      	ldr	r2, [r7, #24]
    2c7e:	188a      	adds	r2, r1, r2
    2c80:	7812      	ldrb	r2, [r2, #0]
    2c82:	701a      	strb	r2, [r3, #0]
							
							uint8_t num = (byte & 0b11111100) >> 2; //get first 6 bits
    2c84:	2312      	movs	r3, #18
    2c86:	18fb      	adds	r3, r7, r3
    2c88:	2213      	movs	r2, #19
    2c8a:	18ba      	adds	r2, r7, r2
    2c8c:	7812      	ldrb	r2, [r2, #0]
    2c8e:	0892      	lsrs	r2, r2, #2
    2c90:	701a      	strb	r2, [r3, #0]
							uint8_t press = byte & 0b00000011; //get last 2 bits
    2c92:	2311      	movs	r3, #17
    2c94:	18fb      	adds	r3, r7, r3
    2c96:	2213      	movs	r2, #19
    2c98:	18ba      	adds	r2, r7, r2
    2c9a:	7812      	ldrb	r2, [r2, #0]
    2c9c:	2103      	movs	r1, #3
    2c9e:	400a      	ands	r2, r1
    2ca0:	701a      	strb	r2, [r3, #0]
							
							int real_num = NEO_TRELLIS_SEESAW_KEY(num);
    2ca2:	2312      	movs	r3, #18
    2ca4:	18fb      	adds	r3, r7, r3
    2ca6:	781b      	ldrb	r3, [r3, #0]
    2ca8:	08db      	lsrs	r3, r3, #3
    2caa:	b2db      	uxtb	r3, r3
    2cac:	009a      	lsls	r2, r3, #2
    2cae:	2312      	movs	r3, #18
    2cb0:	18fb      	adds	r3, r7, r3
    2cb2:	781b      	ldrb	r3, [r3, #0]
    2cb4:	2107      	movs	r1, #7
    2cb6:	400b      	ands	r3, r1
    2cb8:	18d3      	adds	r3, r2, r3
    2cba:	60fb      	str	r3, [r7, #12]
							snprintf(UiPrintBuf, 64, "real key number is: %04x\r\n", real_num);
    2cbc:	68fb      	ldr	r3, [r7, #12]
    2cbe:	4a2e      	ldr	r2, [pc, #184]	; (2d78 <vUiHandlerTask+0x17c>)
    2cc0:	482e      	ldr	r0, [pc, #184]	; (2d7c <vUiHandlerTask+0x180>)
    2cc2:	2140      	movs	r1, #64	; 0x40
    2cc4:	4c2e      	ldr	r4, [pc, #184]	; (2d80 <vUiHandlerTask+0x184>)
    2cc6:	47a0      	blx	r4
							SerialConsoleWriteString(UiPrintBuf);
    2cc8:	4b2c      	ldr	r3, [pc, #176]	; (2d7c <vUiHandlerTask+0x180>)
    2cca:	0018      	movs	r0, r3
    2ccc:	4b23      	ldr	r3, [pc, #140]	; (2d5c <vUiHandlerTask+0x160>)
    2cce:	4798      	blx	r3
							
							if(press == 0b11)
    2cd0:	2311      	movs	r3, #17
    2cd2:	18fb      	adds	r3, r7, r3
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	2b03      	cmp	r3, #3
    2cd8:	d10d      	bne.n	2cf6 <vUiHandlerTask+0xfa>
							{
								SerialConsoleWriteString("pressed!!!\r\n");
    2cda:	4b2a      	ldr	r3, [pc, #168]	; (2d84 <vUiHandlerTask+0x188>)
    2cdc:	0018      	movs	r0, r3
    2cde:	4b1f      	ldr	r3, [pc, #124]	; (2d5c <vUiHandlerTask+0x160>)
    2ce0:	4798      	blx	r3
								SeesawSetLed(real_num, 255, 0, 0);
    2ce2:	68fb      	ldr	r3, [r7, #12]
    2ce4:	b2d8      	uxtb	r0, r3
    2ce6:	2300      	movs	r3, #0
    2ce8:	2200      	movs	r2, #0
    2cea:	21ff      	movs	r1, #255	; 0xff
    2cec:	4c26      	ldr	r4, [pc, #152]	; (2d88 <vUiHandlerTask+0x18c>)
    2cee:	47a0      	blx	r4
								SeesawOrderLedUpdate();
    2cf0:	4b26      	ldr	r3, [pc, #152]	; (2d8c <vUiHandlerTask+0x190>)
    2cf2:	4798      	blx	r3
    2cf4:	e016      	b.n	2d24 <vUiHandlerTask+0x128>
							}
							else if(press == 0b10)
    2cf6:	2311      	movs	r3, #17
    2cf8:	18fb      	adds	r3, r7, r3
    2cfa:	781b      	ldrb	r3, [r3, #0]
    2cfc:	2b02      	cmp	r3, #2
    2cfe:	d10d      	bne.n	2d1c <vUiHandlerTask+0x120>
							{
								SerialConsoleWriteString("unpressed!!!\r\n");
    2d00:	4b23      	ldr	r3, [pc, #140]	; (2d90 <vUiHandlerTask+0x194>)
    2d02:	0018      	movs	r0, r3
    2d04:	4b15      	ldr	r3, [pc, #84]	; (2d5c <vUiHandlerTask+0x160>)
    2d06:	4798      	blx	r3
								SeesawSetLed(real_num, 0, 0, 0);
    2d08:	68fb      	ldr	r3, [r7, #12]
    2d0a:	b2d8      	uxtb	r0, r3
    2d0c:	2300      	movs	r3, #0
    2d0e:	2200      	movs	r2, #0
    2d10:	2100      	movs	r1, #0
    2d12:	4c1d      	ldr	r4, [pc, #116]	; (2d88 <vUiHandlerTask+0x18c>)
    2d14:	47a0      	blx	r4
								SeesawOrderLedUpdate();
    2d16:	4b1d      	ldr	r3, [pc, #116]	; (2d8c <vUiHandlerTask+0x190>)
    2d18:	4798      	blx	r3
    2d1a:	e003      	b.n	2d24 <vUiHandlerTask+0x128>
							}
							else
							{
								SerialConsoleWriteString("What the deuce?\r\n");
    2d1c:	4b1d      	ldr	r3, [pc, #116]	; (2d94 <vUiHandlerTask+0x198>)
    2d1e:	0018      	movs	r0, r3
    2d20:	4b0e      	ldr	r3, [pc, #56]	; (2d5c <vUiHandlerTask+0x160>)
    2d22:	4798      	blx	r3
							}
							
							i++;
    2d24:	69bb      	ldr	r3, [r7, #24]
    2d26:	3301      	adds	r3, #1
    2d28:	61bb      	str	r3, [r7, #24]
						while(SeesawEventBuf[i] != NULL)
    2d2a:	4a11      	ldr	r2, [pc, #68]	; (2d70 <vUiHandlerTask+0x174>)
    2d2c:	69bb      	ldr	r3, [r7, #24]
    2d2e:	18d3      	adds	r3, r2, r3
    2d30:	781b      	ldrb	r3, [r3, #0]
    2d32:	2b00      	cmp	r3, #0
    2d34:	d19f      	bne.n	2c76 <vUiHandlerTask+0x7a>
						}
					
						curr_cnt = 0;
    2d36:	4b0d      	ldr	r3, [pc, #52]	; (2d6c <vUiHandlerTask+0x170>)
    2d38:	2200      	movs	r2, #0
    2d3a:	701a      	strb	r2, [r3, #0]
					}
				}
				
				break;
    2d3c:	e007      	b.n	2d4e <vUiHandlerTask+0x152>
			//Ignore me as well
				break;
			}

		default: //In case of unforseen error, it is always good to sent state machine to an initial state.
			uiState = UI_STATE_HANDLE_BUTTONS;
    2d3e:	4b08      	ldr	r3, [pc, #32]	; (2d60 <vUiHandlerTask+0x164>)
    2d40:	2200      	movs	r2, #0
    2d42:	701a      	strb	r2, [r3, #0]
		break;
    2d44:	e004      	b.n	2d50 <vUiHandlerTask+0x154>
				break;
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	e002      	b.n	2d50 <vUiHandlerTask+0x154>
				break;
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	e000      	b.n	2d50 <vUiHandlerTask+0x154>
				break;
    2d4e:	46c0      	nop			; (mov r8, r8)
	}

	//After execution, you can put a thread to sleep for some time.
	vTaskDelay(50);
    2d50:	2032      	movs	r0, #50	; 0x32
    2d52:	4b11      	ldr	r3, [pc, #68]	; (2d98 <vUiHandlerTask+0x19c>)
    2d54:	4798      	blx	r3
	{
    2d56:	e760      	b.n	2c1a <vUiHandlerTask+0x1e>
    2d58:	0000f12c 	.word	0x0000f12c
    2d5c:	000093b9 	.word	0x000093b9
    2d60:	20003ad0 	.word	0x20003ad0
    2d64:	00007c61 	.word	0x00007c61
    2d68:	00002811 	.word	0x00002811
    2d6c:	20000330 	.word	0x20000330
    2d70:	20003a50 	.word	0x20003a50
    2d74:	00002879 	.word	0x00002879
    2d78:	0000f140 	.word	0x0000f140
    2d7c:	20003a90 	.word	0x20003a90
    2d80:	0000e395 	.word	0x0000e395
    2d84:	0000f15c 	.word	0x0000f15c
    2d88:	000029b9 	.word	0x000029b9
    2d8c:	00002a8d 	.word	0x00002a8d
    2d90:	0000f16c 	.word	0x0000f16c
    2d94:	0000f17c 	.word	0x0000f17c
    2d98:	00007815 	.word	0x00007815

00002d9c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2d9c:	b580      	push	{r7, lr}
    2d9e:	b082      	sub	sp, #8
    2da0:	af00      	add	r7, sp, #0
    2da2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	2200      	movs	r2, #0
    2da8:	701a      	strb	r2, [r3, #0]
}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	46bd      	mov	sp, r7
    2dae:	b002      	add	sp, #8
    2db0:	bd80      	pop	{r7, pc}
	...

00002db4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    2db4:	b580      	push	{r7, lr}
    2db6:	b082      	sub	sp, #8
    2db8:	af00      	add	r7, sp, #0
    2dba:	0002      	movs	r2, r0
    2dbc:	6039      	str	r1, [r7, #0]
    2dbe:	1dfb      	adds	r3, r7, #7
    2dc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2dc2:	1dfb      	adds	r3, r7, #7
    2dc4:	781b      	ldrb	r3, [r3, #0]
    2dc6:	2b01      	cmp	r3, #1
    2dc8:	d00a      	beq.n	2de0 <system_apb_clock_set_mask+0x2c>
    2dca:	2b02      	cmp	r3, #2
    2dcc:	d00f      	beq.n	2dee <system_apb_clock_set_mask+0x3a>
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d114      	bne.n	2dfc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2dd2:	4b0e      	ldr	r3, [pc, #56]	; (2e0c <system_apb_clock_set_mask+0x58>)
    2dd4:	4a0d      	ldr	r2, [pc, #52]	; (2e0c <system_apb_clock_set_mask+0x58>)
    2dd6:	6991      	ldr	r1, [r2, #24]
    2dd8:	683a      	ldr	r2, [r7, #0]
    2dda:	430a      	orrs	r2, r1
    2ddc:	619a      	str	r2, [r3, #24]
			break;
    2dde:	e00f      	b.n	2e00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    2de0:	4b0a      	ldr	r3, [pc, #40]	; (2e0c <system_apb_clock_set_mask+0x58>)
    2de2:	4a0a      	ldr	r2, [pc, #40]	; (2e0c <system_apb_clock_set_mask+0x58>)
    2de4:	69d1      	ldr	r1, [r2, #28]
    2de6:	683a      	ldr	r2, [r7, #0]
    2de8:	430a      	orrs	r2, r1
    2dea:	61da      	str	r2, [r3, #28]
			break;
    2dec:	e008      	b.n	2e00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2dee:	4b07      	ldr	r3, [pc, #28]	; (2e0c <system_apb_clock_set_mask+0x58>)
    2df0:	4a06      	ldr	r2, [pc, #24]	; (2e0c <system_apb_clock_set_mask+0x58>)
    2df2:	6a11      	ldr	r1, [r2, #32]
    2df4:	683a      	ldr	r2, [r7, #0]
    2df6:	430a      	orrs	r2, r1
    2df8:	621a      	str	r2, [r3, #32]
			break;
    2dfa:	e001      	b.n	2e00 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2dfc:	2317      	movs	r3, #23
    2dfe:	e000      	b.n	2e02 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    2e00:	2300      	movs	r3, #0
}
    2e02:	0018      	movs	r0, r3
    2e04:	46bd      	mov	sp, r7
    2e06:	b002      	add	sp, #8
    2e08:	bd80      	pop	{r7, pc}
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	40000400 	.word	0x40000400

00002e10 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b082      	sub	sp, #8
    2e14:	af00      	add	r7, sp, #0
    2e16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	2280      	movs	r2, #128	; 0x80
    2e1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	2200      	movs	r2, #0
    2e22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	2201      	movs	r2, #1
    2e28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	2200      	movs	r2, #0
    2e2e:	70da      	strb	r2, [r3, #3]
}
    2e30:	46c0      	nop			; (mov r8, r8)
    2e32:	46bd      	mov	sp, r7
    2e34:	b002      	add	sp, #8
    2e36:	bd80      	pop	{r7, pc}

00002e38 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2e38:	b580      	push	{r7, lr}
    2e3a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2e3c:	4b05      	ldr	r3, [pc, #20]	; (2e54 <system_is_debugger_present+0x1c>)
    2e3e:	789b      	ldrb	r3, [r3, #2]
    2e40:	b2db      	uxtb	r3, r3
    2e42:	001a      	movs	r2, r3
    2e44:	2302      	movs	r3, #2
    2e46:	4013      	ands	r3, r2
    2e48:	1e5a      	subs	r2, r3, #1
    2e4a:	4193      	sbcs	r3, r2
    2e4c:	b2db      	uxtb	r3, r3
}
    2e4e:	0018      	movs	r0, r3
    2e50:	46bd      	mov	sp, r7
    2e52:	bd80      	pop	{r7, pc}
    2e54:	41002000 	.word	0x41002000

00002e58 <system_interrupt_enter_critical_section>:
{
    2e58:	b580      	push	{r7, lr}
    2e5a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2e5c:	4b02      	ldr	r3, [pc, #8]	; (2e68 <system_interrupt_enter_critical_section+0x10>)
    2e5e:	4798      	blx	r3
}
    2e60:	46c0      	nop			; (mov r8, r8)
    2e62:	46bd      	mov	sp, r7
    2e64:	bd80      	pop	{r7, pc}
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	0000964d 	.word	0x0000964d

00002e6c <system_interrupt_leave_critical_section>:
{
    2e6c:	b580      	push	{r7, lr}
    2e6e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2e70:	4b02      	ldr	r3, [pc, #8]	; (2e7c <system_interrupt_leave_critical_section+0x10>)
    2e72:	4798      	blx	r3
}
    2e74:	46c0      	nop			; (mov r8, r8)
    2e76:	46bd      	mov	sp, r7
    2e78:	bd80      	pop	{r7, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	000096a1 	.word	0x000096a1

00002e80 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    2e80:	b580      	push	{r7, lr}
    2e82:	b082      	sub	sp, #8
    2e84:	af00      	add	r7, sp, #0
    2e86:	0002      	movs	r2, r0
    2e88:	1dfb      	adds	r3, r7, #7
    2e8a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e8c:	4a07      	ldr	r2, [pc, #28]	; (2eac <system_interrupt_disable+0x2c>)
    2e8e:	1dfb      	adds	r3, r7, #7
    2e90:	781b      	ldrb	r3, [r3, #0]
    2e92:	0019      	movs	r1, r3
    2e94:	231f      	movs	r3, #31
    2e96:	400b      	ands	r3, r1
    2e98:	2101      	movs	r1, #1
    2e9a:	4099      	lsls	r1, r3
    2e9c:	000b      	movs	r3, r1
    2e9e:	0019      	movs	r1, r3
    2ea0:	2380      	movs	r3, #128	; 0x80
    2ea2:	50d1      	str	r1, [r2, r3]
}
    2ea4:	46c0      	nop			; (mov r8, r8)
    2ea6:	46bd      	mov	sp, r7
    2ea8:	b002      	add	sp, #8
    2eaa:	bd80      	pop	{r7, pc}
    2eac:	e000e100 	.word	0xe000e100

00002eb0 <i2c_master_is_syncing>:
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	b084      	sub	sp, #16
    2eb4:	af00      	add	r7, sp, #0
    2eb6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	681b      	ldr	r3, [r3, #0]
    2ebc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2ebe:	68fb      	ldr	r3, [r7, #12]
    2ec0:	69db      	ldr	r3, [r3, #28]
    2ec2:	2207      	movs	r2, #7
    2ec4:	4013      	ands	r3, r2
    2ec6:	1e5a      	subs	r2, r3, #1
    2ec8:	4193      	sbcs	r3, r2
    2eca:	b2db      	uxtb	r3, r3
}
    2ecc:	0018      	movs	r0, r3
    2ece:	46bd      	mov	sp, r7
    2ed0:	b004      	add	sp, #16
    2ed2:	bd80      	pop	{r7, pc}

00002ed4 <_i2c_master_wait_for_sync>:
{
    2ed4:	b580      	push	{r7, lr}
    2ed6:	b082      	sub	sp, #8
    2ed8:	af00      	add	r7, sp, #0
    2eda:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    2edc:	46c0      	nop			; (mov r8, r8)
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	0018      	movs	r0, r3
    2ee2:	4b04      	ldr	r3, [pc, #16]	; (2ef4 <_i2c_master_wait_for_sync+0x20>)
    2ee4:	4798      	blx	r3
    2ee6:	1e03      	subs	r3, r0, #0
    2ee8:	d1f9      	bne.n	2ede <_i2c_master_wait_for_sync+0xa>
}
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	46bd      	mov	sp, r7
    2eee:	b002      	add	sp, #8
    2ef0:	bd80      	pop	{r7, pc}
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	00002eb1 	.word	0x00002eb1

00002ef8 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    2ef8:	b580      	push	{r7, lr}
    2efa:	b084      	sub	sp, #16
    2efc:	af00      	add	r7, sp, #0
    2efe:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	681b      	ldr	r3, [r3, #0]
    2f04:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	681b      	ldr	r3, [r3, #0]
    2f0a:	0018      	movs	r0, r3
    2f0c:	4b0d      	ldr	r3, [pc, #52]	; (2f44 <i2c_master_disable+0x4c>)
    2f0e:	4798      	blx	r3
    2f10:	0003      	movs	r3, r0
    2f12:	0018      	movs	r0, r3
    2f14:	4b0c      	ldr	r3, [pc, #48]	; (2f48 <i2c_master_disable+0x50>)
    2f16:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2f18:	687b      	ldr	r3, [r7, #4]
    2f1a:	0018      	movs	r0, r3
    2f1c:	4b0b      	ldr	r3, [pc, #44]	; (2f4c <i2c_master_disable+0x54>)
    2f1e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    2f20:	68fb      	ldr	r3, [r7, #12]
    2f22:	2283      	movs	r2, #131	; 0x83
    2f24:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    2f26:	68fb      	ldr	r3, [r7, #12]
    2f28:	2283      	movs	r2, #131	; 0x83
    2f2a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2f2c:	68fb      	ldr	r3, [r7, #12]
    2f2e:	681b      	ldr	r3, [r3, #0]
    2f30:	2202      	movs	r2, #2
    2f32:	4393      	bics	r3, r2
    2f34:	001a      	movs	r2, r3
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	601a      	str	r2, [r3, #0]

}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	46bd      	mov	sp, r7
    2f3e:	b004      	add	sp, #16
    2f40:	bd80      	pop	{r7, pc}
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	0000a329 	.word	0x0000a329
    2f48:	00002e81 	.word	0x00002e81
    2f4c:	00002ed5 	.word	0x00002ed5

00002f50 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    2f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f52:	b097      	sub	sp, #92	; 0x5c
    2f54:	af00      	add	r7, sp, #0
    2f56:	6178      	str	r0, [r7, #20]
    2f58:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    2f5a:	2300      	movs	r3, #0
    2f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    2f5e:	2300      	movs	r3, #0
    2f60:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    2f62:	2300      	movs	r3, #0
    2f64:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    2f66:	233b      	movs	r3, #59	; 0x3b
    2f68:	2210      	movs	r2, #16
    2f6a:	4694      	mov	ip, r2
    2f6c:	44bc      	add	ip, r7
    2f6e:	4463      	add	r3, ip
    2f70:	2200      	movs	r2, #0
    2f72:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2f74:	697b      	ldr	r3, [r7, #20]
    2f76:	681b      	ldr	r3, [r3, #0]
    2f78:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    2f7a:	697b      	ldr	r3, [r7, #20]
    2f7c:	681b      	ldr	r3, [r3, #0]
    2f7e:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    2f80:	2323      	movs	r3, #35	; 0x23
    2f82:	2210      	movs	r2, #16
    2f84:	18ba      	adds	r2, r7, r2
    2f86:	18d4      	adds	r4, r2, r3
    2f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f8a:	0018      	movs	r0, r3
    2f8c:	4bc0      	ldr	r3, [pc, #768]	; (3290 <_i2c_master_set_config+0x340>)
    2f8e:	4798      	blx	r3
    2f90:	0003      	movs	r3, r0
    2f92:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2f94:	230c      	movs	r3, #12
    2f96:	2210      	movs	r2, #16
    2f98:	4694      	mov	ip, r2
    2f9a:	44bc      	add	ip, r7
    2f9c:	4463      	add	r3, ip
    2f9e:	0018      	movs	r0, r3
    2fa0:	4bbc      	ldr	r3, [pc, #752]	; (3294 <_i2c_master_set_config+0x344>)
    2fa2:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    2fa4:	693b      	ldr	r3, [r7, #16]
    2fa6:	69db      	ldr	r3, [r3, #28]
    2fa8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    2faa:	693b      	ldr	r3, [r7, #16]
    2fac:	6a1b      	ldr	r3, [r3, #32]
    2fae:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    2fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d106      	bne.n	2fc4 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    2fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2fb8:	2100      	movs	r1, #0
    2fba:	0018      	movs	r0, r3
    2fbc:	4bb6      	ldr	r3, [pc, #728]	; (3298 <_i2c_master_set_config+0x348>)
    2fbe:	4798      	blx	r3
    2fc0:	0003      	movs	r3, r0
    2fc2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    2fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2fc6:	b2da      	uxtb	r2, r3
    2fc8:	230c      	movs	r3, #12
    2fca:	2110      	movs	r1, #16
    2fcc:	468c      	mov	ip, r1
    2fce:	44bc      	add	ip, r7
    2fd0:	4463      	add	r3, ip
    2fd2:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2fd4:	230c      	movs	r3, #12
    2fd6:	2210      	movs	r2, #16
    2fd8:	4694      	mov	ip, r2
    2fda:	44bc      	add	ip, r7
    2fdc:	4463      	add	r3, ip
    2fde:	2202      	movs	r2, #2
    2fe0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    2fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2fe4:	0c1b      	lsrs	r3, r3, #16
    2fe6:	b2db      	uxtb	r3, r3
    2fe8:	220c      	movs	r2, #12
    2fea:	2110      	movs	r1, #16
    2fec:	468c      	mov	ip, r1
    2fee:	44bc      	add	ip, r7
    2ff0:	4462      	add	r2, ip
    2ff2:	0011      	movs	r1, r2
    2ff4:	0018      	movs	r0, r3
    2ff6:	4ba9      	ldr	r3, [pc, #676]	; (329c <_i2c_master_set_config+0x34c>)
    2ff8:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    2ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d106      	bne.n	300e <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3002:	2101      	movs	r1, #1
    3004:	0018      	movs	r0, r3
    3006:	4ba4      	ldr	r3, [pc, #656]	; (3298 <_i2c_master_set_config+0x348>)
    3008:	4798      	blx	r3
    300a:	0003      	movs	r3, r0
    300c:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    300e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3010:	b2da      	uxtb	r2, r3
    3012:	230c      	movs	r3, #12
    3014:	2110      	movs	r1, #16
    3016:	468c      	mov	ip, r1
    3018:	44bc      	add	ip, r7
    301a:	4463      	add	r3, ip
    301c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    301e:	230c      	movs	r3, #12
    3020:	2210      	movs	r2, #16
    3022:	4694      	mov	ip, r2
    3024:	44bc      	add	ip, r7
    3026:	4463      	add	r3, ip
    3028:	2202      	movs	r2, #2
    302a:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    302c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    302e:	0c1b      	lsrs	r3, r3, #16
    3030:	b2db      	uxtb	r3, r3
    3032:	220c      	movs	r2, #12
    3034:	2110      	movs	r1, #16
    3036:	468c      	mov	ip, r1
    3038:	44bc      	add	ip, r7
    303a:	4462      	add	r2, ip
    303c:	0011      	movs	r1, r2
    303e:	0018      	movs	r0, r3
    3040:	4b96      	ldr	r3, [pc, #600]	; (329c <_i2c_master_set_config+0x34c>)
    3042:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3044:	693b      	ldr	r3, [r7, #16]
    3046:	8a9a      	ldrh	r2, [r3, #20]
    3048:	697b      	ldr	r3, [r7, #20]
    304a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    304c:	693b      	ldr	r3, [r7, #16]
    304e:	8ada      	ldrh	r2, [r3, #22]
    3050:	697b      	ldr	r3, [r7, #20]
    3052:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3054:	693b      	ldr	r3, [r7, #16]
    3056:	7e1b      	ldrb	r3, [r3, #24]
    3058:	2b00      	cmp	r3, #0
    305a:	d103      	bne.n	3064 <_i2c_master_set_config+0x114>
    305c:	4b90      	ldr	r3, [pc, #576]	; (32a0 <_i2c_master_set_config+0x350>)
    305e:	4798      	blx	r3
    3060:	1e03      	subs	r3, r0, #0
    3062:	d002      	beq.n	306a <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3064:	2380      	movs	r3, #128	; 0x80
    3066:	657b      	str	r3, [r7, #84]	; 0x54
    3068:	e001      	b.n	306e <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    306a:	2300      	movs	r3, #0
    306c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    306e:	693b      	ldr	r3, [r7, #16]
    3070:	691b      	ldr	r3, [r3, #16]
    3072:	2b00      	cmp	r3, #0
    3074:	d004      	beq.n	3080 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    3076:	693b      	ldr	r3, [r7, #16]
    3078:	691b      	ldr	r3, [r3, #16]
    307a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    307c:	4313      	orrs	r3, r2
    307e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    3080:	693b      	ldr	r3, [r7, #16]
    3082:	689b      	ldr	r3, [r3, #8]
    3084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3086:	4313      	orrs	r3, r2
    3088:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    308a:	693b      	ldr	r3, [r7, #16]
    308c:	2224      	movs	r2, #36	; 0x24
    308e:	5c9b      	ldrb	r3, [r3, r2]
    3090:	2b00      	cmp	r3, #0
    3092:	d004      	beq.n	309e <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3096:	2280      	movs	r2, #128	; 0x80
    3098:	05d2      	lsls	r2, r2, #23
    309a:	4313      	orrs	r3, r2
    309c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    309e:	693b      	ldr	r3, [r7, #16]
    30a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30a2:	2b00      	cmp	r3, #0
    30a4:	d004      	beq.n	30b0 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    30a6:	693b      	ldr	r3, [r7, #16]
    30a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    30ac:	4313      	orrs	r3, r2
    30ae:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    30b0:	693b      	ldr	r3, [r7, #16]
    30b2:	222c      	movs	r2, #44	; 0x2c
    30b4:	5c9b      	ldrb	r3, [r3, r2]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d105      	bne.n	30c6 <_i2c_master_set_config+0x176>
    30ba:	693b      	ldr	r3, [r7, #16]
    30bc:	689a      	ldr	r2, [r3, #8]
    30be:	2380      	movs	r3, #128	; 0x80
    30c0:	049b      	lsls	r3, r3, #18
    30c2:	429a      	cmp	r2, r3
    30c4:	d104      	bne.n	30d0 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    30c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    30c8:	2280      	movs	r2, #128	; 0x80
    30ca:	0512      	lsls	r2, r2, #20
    30cc:	4313      	orrs	r3, r2
    30ce:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    30d0:	693b      	ldr	r3, [r7, #16]
    30d2:	222d      	movs	r2, #45	; 0x2d
    30d4:	5c9b      	ldrb	r3, [r3, r2]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d004      	beq.n	30e4 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    30da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    30dc:	2280      	movs	r2, #128	; 0x80
    30de:	0412      	lsls	r2, r2, #16
    30e0:	4313      	orrs	r3, r2
    30e2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    30e4:	693b      	ldr	r3, [r7, #16]
    30e6:	222e      	movs	r2, #46	; 0x2e
    30e8:	5c9b      	ldrb	r3, [r3, r2]
    30ea:	2b00      	cmp	r3, #0
    30ec:	d004      	beq.n	30f8 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    30ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    30f0:	2280      	movs	r2, #128	; 0x80
    30f2:	03d2      	lsls	r2, r2, #15
    30f4:	4313      	orrs	r3, r2
    30f6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    30f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    30fa:	681a      	ldr	r2, [r3, #0]
    30fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    30fe:	431a      	orrs	r2, r3
    3100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3102:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3106:	2280      	movs	r2, #128	; 0x80
    3108:	0052      	lsls	r2, r2, #1
    310a:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    310c:	2323      	movs	r3, #35	; 0x23
    310e:	2210      	movs	r2, #16
    3110:	4694      	mov	ip, r2
    3112:	44bc      	add	ip, r7
    3114:	4463      	add	r3, ip
    3116:	781b      	ldrb	r3, [r3, #0]
    3118:	3314      	adds	r3, #20
    311a:	b2db      	uxtb	r3, r3
    311c:	0018      	movs	r0, r3
    311e:	4b61      	ldr	r3, [pc, #388]	; (32a4 <_i2c_master_set_config+0x354>)
    3120:	4798      	blx	r3
    3122:	0003      	movs	r3, r0
    3124:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    3126:	693b      	ldr	r3, [r7, #16]
    3128:	681b      	ldr	r3, [r3, #0]
    312a:	22fa      	movs	r2, #250	; 0xfa
    312c:	0092      	lsls	r2, r2, #2
    312e:	4353      	muls	r3, r2
    3130:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3132:	693b      	ldr	r3, [r7, #16]
    3134:	685b      	ldr	r3, [r3, #4]
    3136:	22fa      	movs	r2, #250	; 0xfa
    3138:	0092      	lsls	r2, r2, #2
    313a:	4353      	muls	r3, r2
    313c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    313e:	693b      	ldr	r3, [r7, #16]
    3140:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    3142:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    3144:	4b58      	ldr	r3, [pc, #352]	; (32a8 <_i2c_master_set_config+0x358>)
    3146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3148:	4798      	blx	r3
    314a:	0005      	movs	r5, r0
    314c:	000e      	movs	r6, r1
    314e:	4b56      	ldr	r3, [pc, #344]	; (32a8 <_i2c_master_set_config+0x358>)
    3150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3152:	4798      	blx	r3
    3154:	60b8      	str	r0, [r7, #8]
    3156:	60f9      	str	r1, [r7, #12]
    3158:	4b53      	ldr	r3, [pc, #332]	; (32a8 <_i2c_master_set_config+0x358>)
    315a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    315c:	4798      	blx	r3
    315e:	4c53      	ldr	r4, [pc, #332]	; (32ac <_i2c_master_set_config+0x35c>)
    3160:	4a53      	ldr	r2, [pc, #332]	; (32b0 <_i2c_master_set_config+0x360>)
    3162:	4b54      	ldr	r3, [pc, #336]	; (32b4 <_i2c_master_set_config+0x364>)
    3164:	47a0      	blx	r4
    3166:	0003      	movs	r3, r0
    3168:	000c      	movs	r4, r1
    316a:	603b      	str	r3, [r7, #0]
    316c:	607c      	str	r4, [r7, #4]
    316e:	4b4e      	ldr	r3, [pc, #312]	; (32a8 <_i2c_master_set_config+0x358>)
    3170:	6a38      	ldr	r0, [r7, #32]
    3172:	4798      	blx	r3
    3174:	0002      	movs	r2, r0
    3176:	000b      	movs	r3, r1
    3178:	4c4c      	ldr	r4, [pc, #304]	; (32ac <_i2c_master_set_config+0x35c>)
    317a:	6838      	ldr	r0, [r7, #0]
    317c:	6879      	ldr	r1, [r7, #4]
    317e:	47a0      	blx	r4
    3180:	0003      	movs	r3, r0
    3182:	000c      	movs	r4, r1
    3184:	0018      	movs	r0, r3
    3186:	0021      	movs	r1, r4
    3188:	4c4b      	ldr	r4, [pc, #300]	; (32b8 <_i2c_master_set_config+0x368>)
    318a:	2200      	movs	r2, #0
    318c:	4b4b      	ldr	r3, [pc, #300]	; (32bc <_i2c_master_set_config+0x36c>)
    318e:	47a0      	blx	r4
    3190:	0003      	movs	r3, r0
    3192:	000c      	movs	r4, r1
    3194:	001a      	movs	r2, r3
    3196:	0023      	movs	r3, r4
    3198:	4c44      	ldr	r4, [pc, #272]	; (32ac <_i2c_master_set_config+0x35c>)
    319a:	68b8      	ldr	r0, [r7, #8]
    319c:	68f9      	ldr	r1, [r7, #12]
    319e:	47a0      	blx	r4
    31a0:	0003      	movs	r3, r0
    31a2:	000c      	movs	r4, r1
    31a4:	001a      	movs	r2, r3
    31a6:	0023      	movs	r3, r4
    31a8:	4c45      	ldr	r4, [pc, #276]	; (32c0 <_i2c_master_set_config+0x370>)
    31aa:	0028      	movs	r0, r5
    31ac:	0031      	movs	r1, r6
    31ae:	47a0      	blx	r4
    31b0:	0003      	movs	r3, r0
    31b2:	000c      	movs	r4, r1
    31b4:	001d      	movs	r5, r3
    31b6:	0026      	movs	r6, r4
    31b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31ba:	005a      	lsls	r2, r3, #1
    31bc:	4b3a      	ldr	r3, [pc, #232]	; (32a8 <_i2c_master_set_config+0x358>)
    31be:	0010      	movs	r0, r2
    31c0:	4798      	blx	r3
    31c2:	0002      	movs	r2, r0
    31c4:	000b      	movs	r3, r1
    31c6:	4c3c      	ldr	r4, [pc, #240]	; (32b8 <_i2c_master_set_config+0x368>)
    31c8:	0028      	movs	r0, r5
    31ca:	0031      	movs	r1, r6
    31cc:	47a0      	blx	r4
    31ce:	0003      	movs	r3, r0
    31d0:	000c      	movs	r4, r1
    31d2:	0018      	movs	r0, r3
    31d4:	0021      	movs	r1, r4
    31d6:	4c3a      	ldr	r4, [pc, #232]	; (32c0 <_i2c_master_set_config+0x370>)
    31d8:	2200      	movs	r2, #0
    31da:	4b3a      	ldr	r3, [pc, #232]	; (32c4 <_i2c_master_set_config+0x374>)
    31dc:	47a0      	blx	r4
    31de:	0003      	movs	r3, r0
    31e0:	000c      	movs	r4, r1
    31e2:	001d      	movs	r5, r3
    31e4:	0026      	movs	r6, r4
    31e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31e8:	005a      	lsls	r2, r3, #1
    31ea:	4b2f      	ldr	r3, [pc, #188]	; (32a8 <_i2c_master_set_config+0x358>)
    31ec:	0010      	movs	r0, r2
    31ee:	4798      	blx	r3
    31f0:	0002      	movs	r2, r0
    31f2:	000b      	movs	r3, r1
    31f4:	4c34      	ldr	r4, [pc, #208]	; (32c8 <_i2c_master_set_config+0x378>)
    31f6:	0028      	movs	r0, r5
    31f8:	0031      	movs	r1, r6
    31fa:	47a0      	blx	r4
    31fc:	0003      	movs	r3, r0
    31fe:	000c      	movs	r4, r1
    3200:	0019      	movs	r1, r3
    3202:	0022      	movs	r2, r4
    3204:	4b31      	ldr	r3, [pc, #196]	; (32cc <_i2c_master_set_config+0x37c>)
    3206:	0008      	movs	r0, r1
    3208:	0011      	movs	r1, r2
    320a:	4798      	blx	r3
    320c:	0003      	movs	r3, r0
    320e:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    3210:	693b      	ldr	r3, [r7, #16]
    3212:	689a      	ldr	r2, [r3, #8]
    3214:	2380      	movs	r3, #128	; 0x80
    3216:	049b      	lsls	r3, r3, #18
    3218:	429a      	cmp	r2, r3
    321a:	d16a      	bne.n	32f2 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    321c:	4b22      	ldr	r3, [pc, #136]	; (32a8 <_i2c_master_set_config+0x358>)
    321e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3220:	4798      	blx	r3
    3222:	4c25      	ldr	r4, [pc, #148]	; (32b8 <_i2c_master_set_config+0x368>)
    3224:	0002      	movs	r2, r0
    3226:	000b      	movs	r3, r1
    3228:	47a0      	blx	r4
    322a:	0003      	movs	r3, r0
    322c:	000c      	movs	r4, r1
    322e:	001d      	movs	r5, r3
    3230:	0026      	movs	r6, r4
    3232:	4b1d      	ldr	r3, [pc, #116]	; (32a8 <_i2c_master_set_config+0x358>)
    3234:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3236:	4798      	blx	r3
    3238:	4c1c      	ldr	r4, [pc, #112]	; (32ac <_i2c_master_set_config+0x35c>)
    323a:	2200      	movs	r2, #0
    323c:	4b24      	ldr	r3, [pc, #144]	; (32d0 <_i2c_master_set_config+0x380>)
    323e:	47a0      	blx	r4
    3240:	0003      	movs	r3, r0
    3242:	000c      	movs	r4, r1
    3244:	001a      	movs	r2, r3
    3246:	0023      	movs	r3, r4
    3248:	4c1f      	ldr	r4, [pc, #124]	; (32c8 <_i2c_master_set_config+0x378>)
    324a:	0028      	movs	r0, r5
    324c:	0031      	movs	r1, r6
    324e:	47a0      	blx	r4
    3250:	0003      	movs	r3, r0
    3252:	000c      	movs	r4, r1
    3254:	0018      	movs	r0, r3
    3256:	0021      	movs	r1, r4
    3258:	4c19      	ldr	r4, [pc, #100]	; (32c0 <_i2c_master_set_config+0x370>)
    325a:	2200      	movs	r2, #0
    325c:	4b19      	ldr	r3, [pc, #100]	; (32c4 <_i2c_master_set_config+0x374>)
    325e:	47a0      	blx	r4
    3260:	0003      	movs	r3, r0
    3262:	000c      	movs	r4, r1
    3264:	0019      	movs	r1, r3
    3266:	0022      	movs	r2, r4
    3268:	4b18      	ldr	r3, [pc, #96]	; (32cc <_i2c_master_set_config+0x37c>)
    326a:	0008      	movs	r0, r1
    326c:	0011      	movs	r1, r2
    326e:	4798      	blx	r3
    3270:	0003      	movs	r3, r0
    3272:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    3274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3276:	2b00      	cmp	r3, #0
    3278:	d02e      	beq.n	32d8 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    327a:	4b16      	ldr	r3, [pc, #88]	; (32d4 <_i2c_master_set_config+0x384>)
    327c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    327e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3280:	4798      	blx	r3
    3282:	0003      	movs	r3, r0
    3284:	1e9a      	subs	r2, r3, #2
    3286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3288:	1ad3      	subs	r3, r2, r3
    328a:	653b      	str	r3, [r7, #80]	; 0x50
    328c:	e031      	b.n	32f2 <_i2c_master_set_config+0x3a2>
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	0000a259 	.word	0x0000a259
    3294:	00002e11 	.word	0x00002e11
    3298:	0000a09d 	.word	0x0000a09d
    329c:	0000be95 	.word	0x0000be95
    32a0:	00002e39 	.word	0x00002e39
    32a4:	0000bc59 	.word	0x0000bc59
    32a8:	0000e0ad 	.word	0x0000e0ad
    32ac:	0000d519 	.word	0x0000d519
    32b0:	e826d695 	.word	0xe826d695
    32b4:	3e112e0b 	.word	0x3e112e0b
    32b8:	0000c891 	.word	0x0000c891
    32bc:	40240000 	.word	0x40240000
    32c0:	0000da19 	.word	0x0000da19
    32c4:	3ff00000 	.word	0x3ff00000
    32c8:	0000ceb1 	.word	0x0000ceb1
    32cc:	0000e045 	.word	0x0000e045
    32d0:	40080000 	.word	0x40080000
    32d4:	0000c405 	.word	0x0000c405
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    32d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32da:	005a      	lsls	r2, r3, #1
    32dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32de:	18d3      	adds	r3, r2, r3
    32e0:	1e5a      	subs	r2, r3, #1
    32e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    32e4:	0059      	lsls	r1, r3, #1
    32e6:	4b1d      	ldr	r3, [pc, #116]	; (335c <_i2c_master_set_config+0x40c>)
    32e8:	0010      	movs	r0, r2
    32ea:	4798      	blx	r3
    32ec:	0003      	movs	r3, r0
    32ee:	3b01      	subs	r3, #1
    32f0:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    32f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    32f4:	2bff      	cmp	r3, #255	; 0xff
    32f6:	dc08      	bgt.n	330a <_i2c_master_set_config+0x3ba>
    32f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    32fa:	2b00      	cmp	r3, #0
    32fc:	db05      	blt.n	330a <_i2c_master_set_config+0x3ba>
    32fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3300:	2bff      	cmp	r3, #255	; 0xff
    3302:	dc02      	bgt.n	330a <_i2c_master_set_config+0x3ba>
    3304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3306:	2b00      	cmp	r3, #0
    3308:	da06      	bge.n	3318 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    330a:	233b      	movs	r3, #59	; 0x3b
    330c:	2210      	movs	r2, #16
    330e:	4694      	mov	ip, r2
    3310:	44bc      	add	ip, r7
    3312:	4463      	add	r3, ip
    3314:	2240      	movs	r2, #64	; 0x40
    3316:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    3318:	233b      	movs	r3, #59	; 0x3b
    331a:	2210      	movs	r2, #16
    331c:	4694      	mov	ip, r2
    331e:	44bc      	add	ip, r7
    3320:	4463      	add	r3, ip
    3322:	781b      	ldrb	r3, [r3, #0]
    3324:	2b40      	cmp	r3, #64	; 0x40
    3326:	d00e      	beq.n	3346 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    332a:	22ff      	movs	r2, #255	; 0xff
    332c:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    332e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3330:	041b      	lsls	r3, r3, #16
    3332:	0019      	movs	r1, r3
    3334:	23ff      	movs	r3, #255	; 0xff
    3336:	041b      	lsls	r3, r3, #16
    3338:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    333a:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    333c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    333e:	0612      	lsls	r2, r2, #24
    3340:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3344:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    3346:	233b      	movs	r3, #59	; 0x3b
    3348:	2210      	movs	r2, #16
    334a:	4694      	mov	ip, r2
    334c:	44bc      	add	ip, r7
    334e:	4463      	add	r3, ip
    3350:	781b      	ldrb	r3, [r3, #0]
}
    3352:	0018      	movs	r0, r3
    3354:	46bd      	mov	sp, r7
    3356:	b017      	add	sp, #92	; 0x5c
    3358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	0000c405 	.word	0x0000c405

00003360 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3360:	b590      	push	{r4, r7, lr}
    3362:	b08b      	sub	sp, #44	; 0x2c
    3364:	af00      	add	r7, sp, #0
    3366:	60f8      	str	r0, [r7, #12]
    3368:	60b9      	str	r1, [r7, #8]
    336a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    336c:	68fb      	ldr	r3, [r7, #12]
    336e:	68ba      	ldr	r2, [r7, #8]
    3370:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3372:	68fb      	ldr	r3, [r7, #12]
    3374:	681b      	ldr	r3, [r3, #0]
    3376:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3378:	68fb      	ldr	r3, [r7, #12]
    337a:	681b      	ldr	r3, [r3, #0]
    337c:	0018      	movs	r0, r3
    337e:	4b3b      	ldr	r3, [pc, #236]	; (346c <i2c_master_init+0x10c>)
    3380:	4798      	blx	r3
    3382:	0003      	movs	r3, r0
    3384:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3386:	6a3b      	ldr	r3, [r7, #32]
    3388:	3302      	adds	r3, #2
    338a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    338c:	6a3b      	ldr	r3, [r7, #32]
    338e:	3314      	adds	r3, #20
    3390:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3392:	2201      	movs	r2, #1
    3394:	69fb      	ldr	r3, [r7, #28]
    3396:	409a      	lsls	r2, r3
    3398:	0013      	movs	r3, r2
    339a:	0019      	movs	r1, r3
    339c:	2002      	movs	r0, #2
    339e:	4b34      	ldr	r3, [pc, #208]	; (3470 <i2c_master_init+0x110>)
    33a0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    33a2:	2314      	movs	r3, #20
    33a4:	18fb      	adds	r3, r7, r3
    33a6:	0018      	movs	r0, r3
    33a8:	4b32      	ldr	r3, [pc, #200]	; (3474 <i2c_master_init+0x114>)
    33aa:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    33ac:	687b      	ldr	r3, [r7, #4]
    33ae:	7b1a      	ldrb	r2, [r3, #12]
    33b0:	2314      	movs	r3, #20
    33b2:	18fb      	adds	r3, r7, r3
    33b4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    33b6:	69bb      	ldr	r3, [r7, #24]
    33b8:	b2db      	uxtb	r3, r3
    33ba:	2214      	movs	r2, #20
    33bc:	18ba      	adds	r2, r7, r2
    33be:	0011      	movs	r1, r2
    33c0:	0018      	movs	r0, r3
    33c2:	4b2d      	ldr	r3, [pc, #180]	; (3478 <i2c_master_init+0x118>)
    33c4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    33c6:	69bb      	ldr	r3, [r7, #24]
    33c8:	b2db      	uxtb	r3, r3
    33ca:	0018      	movs	r0, r3
    33cc:	4b2b      	ldr	r3, [pc, #172]	; (347c <i2c_master_init+0x11c>)
    33ce:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	7b1b      	ldrb	r3, [r3, #12]
    33d4:	2100      	movs	r1, #0
    33d6:	0018      	movs	r0, r3
    33d8:	4b29      	ldr	r3, [pc, #164]	; (3480 <i2c_master_init+0x120>)
    33da:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    33dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33de:	681b      	ldr	r3, [r3, #0]
    33e0:	2202      	movs	r2, #2
    33e2:	4013      	ands	r3, r2
    33e4:	d001      	beq.n	33ea <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    33e6:	231c      	movs	r3, #28
    33e8:	e03b      	b.n	3462 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    33ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    33ec:	681b      	ldr	r3, [r3, #0]
    33ee:	2201      	movs	r2, #1
    33f0:	4013      	ands	r3, r2
    33f2:	d001      	beq.n	33f8 <i2c_master_init+0x98>
		return STATUS_BUSY;
    33f4:	2305      	movs	r3, #5
    33f6:	e034      	b.n	3462 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    33f8:	68fb      	ldr	r3, [r7, #12]
    33fa:	681b      	ldr	r3, [r3, #0]
    33fc:	2217      	movs	r2, #23
    33fe:	18bc      	adds	r4, r7, r2
    3400:	0018      	movs	r0, r3
    3402:	4b1a      	ldr	r3, [pc, #104]	; (346c <i2c_master_init+0x10c>)
    3404:	4798      	blx	r3
    3406:	0003      	movs	r3, r0
    3408:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    340a:	4a1e      	ldr	r2, [pc, #120]	; (3484 <i2c_master_init+0x124>)
    340c:	2317      	movs	r3, #23
    340e:	18fb      	adds	r3, r7, r3
    3410:	781b      	ldrb	r3, [r3, #0]
    3412:	0011      	movs	r1, r2
    3414:	0018      	movs	r0, r3
    3416:	4b1c      	ldr	r3, [pc, #112]	; (3488 <i2c_master_init+0x128>)
    3418:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    341a:	2317      	movs	r3, #23
    341c:	18fb      	adds	r3, r7, r3
    341e:	781a      	ldrb	r2, [r3, #0]
    3420:	4b1a      	ldr	r3, [pc, #104]	; (348c <i2c_master_init+0x12c>)
    3422:	0092      	lsls	r2, r2, #2
    3424:	68f9      	ldr	r1, [r7, #12]
    3426:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    3428:	68fb      	ldr	r3, [r7, #12]
    342a:	2200      	movs	r2, #0
    342c:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    342e:	68fb      	ldr	r3, [r7, #12]
    3430:	2200      	movs	r2, #0
    3432:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    3434:	68fb      	ldr	r3, [r7, #12]
    3436:	2200      	movs	r2, #0
    3438:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    343a:	68fb      	ldr	r3, [r7, #12]
    343c:	2200      	movs	r2, #0
    343e:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    3440:	68fb      	ldr	r3, [r7, #12]
    3442:	2225      	movs	r2, #37	; 0x25
    3444:	2100      	movs	r1, #0
    3446:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    3448:	68fb      	ldr	r3, [r7, #12]
    344a:	2200      	movs	r2, #0
    344c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3450:	2214      	movs	r2, #20
    3452:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    3454:	687a      	ldr	r2, [r7, #4]
    3456:	68fb      	ldr	r3, [r7, #12]
    3458:	0011      	movs	r1, r2
    345a:	0018      	movs	r0, r3
    345c:	4b0c      	ldr	r3, [pc, #48]	; (3490 <i2c_master_init+0x130>)
    345e:	4798      	blx	r3
    3460:	0003      	movs	r3, r0
}
    3462:	0018      	movs	r0, r3
    3464:	46bd      	mov	sp, r7
    3466:	b00b      	add	sp, #44	; 0x2c
    3468:	bd90      	pop	{r4, r7, pc}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	0000a259 	.word	0x0000a259
    3470:	00002db5 	.word	0x00002db5
    3474:	00002d9d 	.word	0x00002d9d
    3478:	0000bb35 	.word	0x0000bb35
    347c:	0000bb79 	.word	0x0000bb79
    3480:	0000a011 	.word	0x0000a011
    3484:	00000649 	.word	0x00000649
    3488:	0000a2bd 	.word	0x0000a2bd
    348c:	20004fa8 	.word	0x20004fa8
    3490:	00002f51 	.word	0x00002f51

00003494 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    3494:	b580      	push	{r7, lr}
    3496:	b084      	sub	sp, #16
    3498:	af00      	add	r7, sp, #0
    349a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    349c:	687b      	ldr	r3, [r7, #4]
    349e:	681b      	ldr	r3, [r3, #0]
    34a0:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    34a2:	687b      	ldr	r3, [r7, #4]
    34a4:	0018      	movs	r0, r3
    34a6:	4b0f      	ldr	r3, [pc, #60]	; (34e4 <i2c_master_reset+0x50>)
    34a8:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    34aa:	687b      	ldr	r3, [r7, #4]
    34ac:	0018      	movs	r0, r3
    34ae:	4b0e      	ldr	r3, [pc, #56]	; (34e8 <i2c_master_reset+0x54>)
    34b0:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
    34b2:	4b0e      	ldr	r3, [pc, #56]	; (34ec <i2c_master_reset+0x58>)
    34b4:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	0018      	movs	r0, r3
    34bc:	4b0c      	ldr	r3, [pc, #48]	; (34f0 <i2c_master_reset+0x5c>)
    34be:	4798      	blx	r3
    34c0:	0003      	movs	r3, r0
    34c2:	0018      	movs	r0, r3
    34c4:	4b0b      	ldr	r3, [pc, #44]	; (34f4 <i2c_master_reset+0x60>)
    34c6:	4798      	blx	r3
	system_interrupt_leave_critical_section();
    34c8:	4b0b      	ldr	r3, [pc, #44]	; (34f8 <i2c_master_reset+0x64>)
    34ca:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	0018      	movs	r0, r3
    34d0:	4b04      	ldr	r3, [pc, #16]	; (34e4 <i2c_master_reset+0x50>)
    34d2:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    34d4:	68fb      	ldr	r3, [r7, #12]
    34d6:	2201      	movs	r2, #1
    34d8:	601a      	str	r2, [r3, #0]
}
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	46bd      	mov	sp, r7
    34de:	b004      	add	sp, #16
    34e0:	bd80      	pop	{r7, pc}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	00002ed5 	.word	0x00002ed5
    34e8:	00002ef9 	.word	0x00002ef9
    34ec:	00002e59 	.word	0x00002e59
    34f0:	0000a329 	.word	0x0000a329
    34f4:	0000bcb1 	.word	0x0000bcb1
    34f8:	00002e6d 	.word	0x00002e6d

000034fc <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    34fc:	b580      	push	{r7, lr}
    34fe:	b084      	sub	sp, #16
    3500:	af00      	add	r7, sp, #0
    3502:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	681b      	ldr	r3, [r3, #0]
    3508:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    350a:	68fb      	ldr	r3, [r7, #12]
    350c:	7e1b      	ldrb	r3, [r3, #24]
    350e:	b2db      	uxtb	r3, r3
    3510:	001a      	movs	r2, r3
    3512:	2302      	movs	r3, #2
    3514:	4013      	ands	r3, r2
    3516:	d00b      	beq.n	3530 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3518:	68fb      	ldr	r3, [r7, #12]
    351a:	2202      	movs	r2, #2
    351c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    351e:	68fb      	ldr	r3, [r7, #12]
    3520:	8b5b      	ldrh	r3, [r3, #26]
    3522:	b29b      	uxth	r3, r3
    3524:	001a      	movs	r2, r3
    3526:	2302      	movs	r3, #2
    3528:	4013      	ands	r3, r2
    352a:	d011      	beq.n	3550 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    352c:	2341      	movs	r3, #65	; 0x41
    352e:	e010      	b.n	3552 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3530:	68fb      	ldr	r3, [r7, #12]
    3532:	8b5b      	ldrh	r3, [r3, #26]
    3534:	b29b      	uxth	r3, r3
    3536:	001a      	movs	r2, r3
    3538:	2304      	movs	r3, #4
    353a:	4013      	ands	r3, r2
    353c:	d008      	beq.n	3550 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    353e:	68fb      	ldr	r3, [r7, #12]
    3540:	685b      	ldr	r3, [r3, #4]
    3542:	22c0      	movs	r2, #192	; 0xc0
    3544:	0292      	lsls	r2, r2, #10
    3546:	431a      	orrs	r2, r3
    3548:	68fb      	ldr	r3, [r7, #12]
    354a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    354c:	2318      	movs	r3, #24
    354e:	e000      	b.n	3552 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    3550:	2300      	movs	r3, #0
}
    3552:	0018      	movs	r0, r3
    3554:	46bd      	mov	sp, r7
    3556:	b004      	add	sp, #16
    3558:	bd80      	pop	{r7, pc}

0000355a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    355a:	b580      	push	{r7, lr}
    355c:	b084      	sub	sp, #16
    355e:	af00      	add	r7, sp, #0
    3560:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3568:	230e      	movs	r3, #14
    356a:	18fb      	adds	r3, r7, r3
    356c:	2200      	movs	r2, #0
    356e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3570:	e00f      	b.n	3592 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3572:	230e      	movs	r3, #14
    3574:	18fb      	adds	r3, r7, r3
    3576:	220e      	movs	r2, #14
    3578:	18ba      	adds	r2, r7, r2
    357a:	8812      	ldrh	r2, [r2, #0]
    357c:	3201      	adds	r2, #1
    357e:	801a      	strh	r2, [r3, #0]
    3580:	687b      	ldr	r3, [r7, #4]
    3582:	891b      	ldrh	r3, [r3, #8]
    3584:	220e      	movs	r2, #14
    3586:	18ba      	adds	r2, r7, r2
    3588:	8812      	ldrh	r2, [r2, #0]
    358a:	429a      	cmp	r2, r3
    358c:	d301      	bcc.n	3592 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    358e:	2312      	movs	r3, #18
    3590:	e00e      	b.n	35b0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3592:	68bb      	ldr	r3, [r7, #8]
    3594:	7e1b      	ldrb	r3, [r3, #24]
    3596:	b2db      	uxtb	r3, r3
    3598:	001a      	movs	r2, r3
    359a:	2301      	movs	r3, #1
    359c:	4013      	ands	r3, r2
    359e:	d106      	bne.n	35ae <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    35a0:	68bb      	ldr	r3, [r7, #8]
    35a2:	7e1b      	ldrb	r3, [r3, #24]
    35a4:	b2db      	uxtb	r3, r3
    35a6:	001a      	movs	r2, r3
    35a8:	2302      	movs	r3, #2
    35aa:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    35ac:	d0e1      	beq.n	3572 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    35ae:	2300      	movs	r3, #0
}
    35b0:	0018      	movs	r0, r3
    35b2:	46bd      	mov	sp, r7
    35b4:	b004      	add	sp, #16
    35b6:	bd80      	pop	{r7, pc}

000035b8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    35b8:	b590      	push	{r4, r7, lr}
    35ba:	b085      	sub	sp, #20
    35bc:	af00      	add	r7, sp, #0
    35be:	6078      	str	r0, [r7, #4]
    35c0:	000a      	movs	r2, r1
    35c2:	1cfb      	adds	r3, r7, #3
    35c4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    35cc:	68fb      	ldr	r3, [r7, #12]
    35ce:	685b      	ldr	r3, [r3, #4]
    35d0:	2280      	movs	r2, #128	; 0x80
    35d2:	02d2      	lsls	r2, r2, #11
    35d4:	431a      	orrs	r2, r3
    35d6:	68fb      	ldr	r3, [r7, #12]
    35d8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    35da:	1cfb      	adds	r3, r7, #3
    35dc:	781a      	ldrb	r2, [r3, #0]
    35de:	68fb      	ldr	r3, [r7, #12]
    35e0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    35e2:	230b      	movs	r3, #11
    35e4:	18fc      	adds	r4, r7, r3
    35e6:	687b      	ldr	r3, [r7, #4]
    35e8:	0018      	movs	r0, r3
    35ea:	4b07      	ldr	r3, [pc, #28]	; (3608 <_i2c_master_send_hs_master_code+0x50>)
    35ec:	4798      	blx	r3
    35ee:	0003      	movs	r3, r0
    35f0:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    35f2:	68fb      	ldr	r3, [r7, #12]
    35f4:	2201      	movs	r2, #1
    35f6:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    35f8:	230b      	movs	r3, #11
    35fa:	18fb      	adds	r3, r7, r3
    35fc:	781b      	ldrb	r3, [r3, #0]
}
    35fe:	0018      	movs	r0, r3
    3600:	46bd      	mov	sp, r7
    3602:	b005      	add	sp, #20
    3604:	bd90      	pop	{r4, r7, pc}
    3606:	46c0      	nop			; (mov r8, r8)
    3608:	0000355b 	.word	0x0000355b

0000360c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    360c:	b580      	push	{r7, lr}
    360e:	af00      	add	r7, sp, #0
    3610:	2000      	movs	r0, #0
    3612:	4b02      	ldr	r3, [pc, #8]	; (361c <TC3_Handler+0x10>)
    3614:	4798      	blx	r3
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	46bd      	mov	sp, r7
    361a:	bd80      	pop	{r7, pc}
    361c:	00003649 	.word	0x00003649

00003620 <TC4_Handler>:
    3620:	b580      	push	{r7, lr}
    3622:	af00      	add	r7, sp, #0
    3624:	2001      	movs	r0, #1
    3626:	4b02      	ldr	r3, [pc, #8]	; (3630 <TC4_Handler+0x10>)
    3628:	4798      	blx	r3
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	46bd      	mov	sp, r7
    362e:	bd80      	pop	{r7, pc}
    3630:	00003649 	.word	0x00003649

00003634 <TC5_Handler>:
    3634:	b580      	push	{r7, lr}
    3636:	af00      	add	r7, sp, #0
    3638:	2002      	movs	r0, #2
    363a:	4b02      	ldr	r3, [pc, #8]	; (3644 <TC5_Handler+0x10>)
    363c:	4798      	blx	r3
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	46bd      	mov	sp, r7
    3642:	bd80      	pop	{r7, pc}
    3644:	00003649 	.word	0x00003649

00003648 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    3648:	b580      	push	{r7, lr}
    364a:	b084      	sub	sp, #16
    364c:	af00      	add	r7, sp, #0
    364e:	0002      	movs	r2, r0
    3650:	1dfb      	adds	r3, r7, #7
    3652:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    3654:	1dfb      	adds	r3, r7, #7
    3656:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    3658:	4b28      	ldr	r3, [pc, #160]	; (36fc <_tc_interrupt_handler+0xb4>)
    365a:	0092      	lsls	r2, r2, #2
    365c:	58d3      	ldr	r3, [r2, r3]
    365e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3660:	68fb      	ldr	r3, [r7, #12]
    3662:	681b      	ldr	r3, [r3, #0]
    3664:	7b9b      	ldrb	r3, [r3, #14]
    3666:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    3668:	68fa      	ldr	r2, [r7, #12]
    366a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    366c:	4013      	ands	r3, r2
    366e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3674:	230b      	movs	r3, #11
    3676:	18fb      	adds	r3, r7, r3
    3678:	400a      	ands	r2, r1
    367a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    367c:	230b      	movs	r3, #11
    367e:	18fb      	adds	r3, r7, r3
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	2201      	movs	r2, #1
    3684:	4013      	ands	r3, r2
    3686:	d008      	beq.n	369a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    3688:	68fb      	ldr	r3, [r7, #12]
    368a:	689b      	ldr	r3, [r3, #8]
    368c:	68fa      	ldr	r2, [r7, #12]
    368e:	0010      	movs	r0, r2
    3690:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3692:	68fb      	ldr	r3, [r7, #12]
    3694:	681b      	ldr	r3, [r3, #0]
    3696:	2201      	movs	r2, #1
    3698:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    369a:	230b      	movs	r3, #11
    369c:	18fb      	adds	r3, r7, r3
    369e:	781b      	ldrb	r3, [r3, #0]
    36a0:	2202      	movs	r2, #2
    36a2:	4013      	ands	r3, r2
    36a4:	d008      	beq.n	36b8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    36a6:	68fb      	ldr	r3, [r7, #12]
    36a8:	68db      	ldr	r3, [r3, #12]
    36aa:	68fa      	ldr	r2, [r7, #12]
    36ac:	0010      	movs	r0, r2
    36ae:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    36b0:	68fb      	ldr	r3, [r7, #12]
    36b2:	681b      	ldr	r3, [r3, #0]
    36b4:	2202      	movs	r2, #2
    36b6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    36b8:	230b      	movs	r3, #11
    36ba:	18fb      	adds	r3, r7, r3
    36bc:	781b      	ldrb	r3, [r3, #0]
    36be:	2210      	movs	r2, #16
    36c0:	4013      	ands	r3, r2
    36c2:	d008      	beq.n	36d6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    36c4:	68fb      	ldr	r3, [r7, #12]
    36c6:	691b      	ldr	r3, [r3, #16]
    36c8:	68fa      	ldr	r2, [r7, #12]
    36ca:	0010      	movs	r0, r2
    36cc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    36ce:	68fb      	ldr	r3, [r7, #12]
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	2210      	movs	r2, #16
    36d4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    36d6:	230b      	movs	r3, #11
    36d8:	18fb      	adds	r3, r7, r3
    36da:	781b      	ldrb	r3, [r3, #0]
    36dc:	2220      	movs	r2, #32
    36de:	4013      	ands	r3, r2
    36e0:	d008      	beq.n	36f4 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    36e2:	68fb      	ldr	r3, [r7, #12]
    36e4:	695b      	ldr	r3, [r3, #20]
    36e6:	68fa      	ldr	r2, [r7, #12]
    36e8:	0010      	movs	r0, r2
    36ea:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    36ec:	68fb      	ldr	r3, [r7, #12]
    36ee:	681b      	ldr	r3, [r3, #0]
    36f0:	2220      	movs	r2, #32
    36f2:	739a      	strb	r2, [r3, #14]
	}
}
    36f4:	46c0      	nop			; (mov r8, r8)
    36f6:	46bd      	mov	sp, r7
    36f8:	b004      	add	sp, #16
    36fa:	bd80      	pop	{r7, pc}
    36fc:	20003ad4 	.word	0x20003ad4

00003700 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
    3700:	b580      	push	{r7, lr}
    3702:	b084      	sub	sp, #16
    3704:	af00      	add	r7, sp, #0
    3706:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
    3708:	2300      	movs	r3, #0
    370a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
    370c:	687b      	ldr	r3, [r7, #4]
    370e:	2b00      	cmp	r3, #0
    3710:	d101      	bne.n	3716 <FreeRTOS_CLIRegisterCommand+0x16>
    3712:	b672      	cpsid	i
    3714:	e7fe      	b.n	3714 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    3716:	2008      	movs	r0, #8
    3718:	4b11      	ldr	r3, [pc, #68]	; (3760 <FreeRTOS_CLIRegisterCommand+0x60>)
    371a:	4798      	blx	r3
    371c:	0003      	movs	r3, r0
    371e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
    3720:	68bb      	ldr	r3, [r7, #8]
    3722:	2b00      	cmp	r3, #0
    3724:	d101      	bne.n	372a <FreeRTOS_CLIRegisterCommand+0x2a>
    3726:	b672      	cpsid	i
    3728:	e7fe      	b.n	3728 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
    372a:	68bb      	ldr	r3, [r7, #8]
    372c:	2b00      	cmp	r3, #0
    372e:	d012      	beq.n	3756 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
    3730:	4b0c      	ldr	r3, [pc, #48]	; (3764 <FreeRTOS_CLIRegisterCommand+0x64>)
    3732:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    3734:	68bb      	ldr	r3, [r7, #8]
    3736:	687a      	ldr	r2, [r7, #4]
    3738:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
    373a:	68bb      	ldr	r3, [r7, #8]
    373c:	2200      	movs	r2, #0
    373e:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
    3740:	4b09      	ldr	r3, [pc, #36]	; (3768 <FreeRTOS_CLIRegisterCommand+0x68>)
    3742:	681b      	ldr	r3, [r3, #0]
    3744:	68ba      	ldr	r2, [r7, #8]
    3746:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
    3748:	4b07      	ldr	r3, [pc, #28]	; (3768 <FreeRTOS_CLIRegisterCommand+0x68>)
    374a:	68ba      	ldr	r2, [r7, #8]
    374c:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
    374e:	4b07      	ldr	r3, [pc, #28]	; (376c <FreeRTOS_CLIRegisterCommand+0x6c>)
    3750:	4798      	blx	r3

		xReturn = pdPASS;
    3752:	2301      	movs	r3, #1
    3754:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    3756:	68fb      	ldr	r3, [r7, #12]
}
    3758:	0018      	movs	r0, r3
    375a:	46bd      	mov	sp, r7
    375c:	b004      	add	sp, #16
    375e:	bd80      	pop	{r7, pc}
    3760:	00005961 	.word	0x00005961
    3764:	00005829 	.word	0x00005829
    3768:	20000014 	.word	0x20000014
    376c:	0000584d 	.word	0x0000584d

00003770 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
    3770:	b580      	push	{r7, lr}
    3772:	b088      	sub	sp, #32
    3774:	af00      	add	r7, sp, #0
    3776:	60f8      	str	r0, [r7, #12]
    3778:	60b9      	str	r1, [r7, #8]
    377a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
    377c:	2301      	movs	r3, #1
    377e:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
    3780:	4b3d      	ldr	r3, [pc, #244]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    3782:	681b      	ldr	r3, [r3, #0]
    3784:	2b00      	cmp	r3, #0
    3786:	d144      	bne.n	3812 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    3788:	4b3b      	ldr	r3, [pc, #236]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    378a:	4a3c      	ldr	r2, [pc, #240]	; (387c <FreeRTOS_CLIProcessCommand+0x10c>)
    378c:	601a      	str	r2, [r3, #0]
    378e:	e03a      	b.n	3806 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    3790:	4b39      	ldr	r3, [pc, #228]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    3792:	681b      	ldr	r3, [r3, #0]
    3794:	681b      	ldr	r3, [r3, #0]
    3796:	681b      	ldr	r3, [r3, #0]
    3798:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    379a:	69bb      	ldr	r3, [r7, #24]
    379c:	0018      	movs	r0, r3
    379e:	4b38      	ldr	r3, [pc, #224]	; (3880 <FreeRTOS_CLIProcessCommand+0x110>)
    37a0:	4798      	blx	r3
    37a2:	0003      	movs	r3, r0
    37a4:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    37a6:	68fa      	ldr	r2, [r7, #12]
    37a8:	697b      	ldr	r3, [r7, #20]
    37aa:	18d3      	adds	r3, r2, r3
    37ac:	781b      	ldrb	r3, [r3, #0]
    37ae:	2b20      	cmp	r3, #32
    37b0:	d005      	beq.n	37be <FreeRTOS_CLIProcessCommand+0x4e>
    37b2:	68fa      	ldr	r2, [r7, #12]
    37b4:	697b      	ldr	r3, [r7, #20]
    37b6:	18d3      	adds	r3, r2, r3
    37b8:	781b      	ldrb	r3, [r3, #0]
    37ba:	2b00      	cmp	r3, #0
    37bc:	d11e      	bne.n	37fc <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    37be:	697a      	ldr	r2, [r7, #20]
    37c0:	69b9      	ldr	r1, [r7, #24]
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	0018      	movs	r0, r3
    37c6:	4b2f      	ldr	r3, [pc, #188]	; (3884 <FreeRTOS_CLIProcessCommand+0x114>)
    37c8:	4798      	blx	r3
    37ca:	1e03      	subs	r3, r0, #0
    37cc:	d116      	bne.n	37fc <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    37ce:	4b2a      	ldr	r3, [pc, #168]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	681b      	ldr	r3, [r3, #0]
    37d4:	7b1b      	ldrb	r3, [r3, #12]
    37d6:	b25b      	sxtb	r3, r3
    37d8:	2b00      	cmp	r3, #0
    37da:	db19      	blt.n	3810 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
    37dc:	68fb      	ldr	r3, [r7, #12]
    37de:	0018      	movs	r0, r3
    37e0:	4b29      	ldr	r3, [pc, #164]	; (3888 <FreeRTOS_CLIProcessCommand+0x118>)
    37e2:	4798      	blx	r3
    37e4:	0003      	movs	r3, r0
    37e6:	001a      	movs	r2, r3
    37e8:	4b23      	ldr	r3, [pc, #140]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    37ea:	681b      	ldr	r3, [r3, #0]
    37ec:	681b      	ldr	r3, [r3, #0]
    37ee:	7b1b      	ldrb	r3, [r3, #12]
    37f0:	b25b      	sxtb	r3, r3
    37f2:	429a      	cmp	r2, r3
    37f4:	d00c      	beq.n	3810 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
    37f6:	2300      	movs	r3, #0
    37f8:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
    37fa:	e009      	b.n	3810 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    37fc:	4b1e      	ldr	r3, [pc, #120]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	685a      	ldr	r2, [r3, #4]
    3802:	4b1d      	ldr	r3, [pc, #116]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    3804:	601a      	str	r2, [r3, #0]
    3806:	4b1c      	ldr	r3, [pc, #112]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    3808:	681b      	ldr	r3, [r3, #0]
    380a:	2b00      	cmp	r3, #0
    380c:	d1c0      	bne.n	3790 <FreeRTOS_CLIProcessCommand+0x20>
    380e:	e000      	b.n	3812 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
    3810:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    3812:	4b19      	ldr	r3, [pc, #100]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    3814:	681b      	ldr	r3, [r3, #0]
    3816:	2b00      	cmp	r3, #0
    3818:	d00c      	beq.n	3834 <FreeRTOS_CLIProcessCommand+0xc4>
    381a:	69fb      	ldr	r3, [r7, #28]
    381c:	2b00      	cmp	r3, #0
    381e:	d109      	bne.n	3834 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    3820:	687a      	ldr	r2, [r7, #4]
    3822:	491a      	ldr	r1, [pc, #104]	; (388c <FreeRTOS_CLIProcessCommand+0x11c>)
    3824:	68bb      	ldr	r3, [r7, #8]
    3826:	0018      	movs	r0, r3
    3828:	4b19      	ldr	r3, [pc, #100]	; (3890 <FreeRTOS_CLIProcessCommand+0x120>)
    382a:	4798      	blx	r3
		pxCommand = NULL;
    382c:	4b12      	ldr	r3, [pc, #72]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    382e:	2200      	movs	r2, #0
    3830:	601a      	str	r2, [r3, #0]
    3832:	e01c      	b.n	386e <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
    3834:	4b10      	ldr	r3, [pc, #64]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    3836:	681b      	ldr	r3, [r3, #0]
    3838:	2b00      	cmp	r3, #0
    383a:	d010      	beq.n	385e <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    383c:	4b0e      	ldr	r3, [pc, #56]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    383e:	681b      	ldr	r3, [r3, #0]
    3840:	681b      	ldr	r3, [r3, #0]
    3842:	689b      	ldr	r3, [r3, #8]
    3844:	68fa      	ldr	r2, [r7, #12]
    3846:	6879      	ldr	r1, [r7, #4]
    3848:	68b8      	ldr	r0, [r7, #8]
    384a:	4798      	blx	r3
    384c:	0003      	movs	r3, r0
    384e:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
    3850:	69fb      	ldr	r3, [r7, #28]
    3852:	2b00      	cmp	r3, #0
    3854:	d10b      	bne.n	386e <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
    3856:	4b08      	ldr	r3, [pc, #32]	; (3878 <FreeRTOS_CLIProcessCommand+0x108>)
    3858:	2200      	movs	r2, #0
    385a:	601a      	str	r2, [r3, #0]
    385c:	e007      	b.n	386e <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    385e:	687a      	ldr	r2, [r7, #4]
    3860:	490c      	ldr	r1, [pc, #48]	; (3894 <FreeRTOS_CLIProcessCommand+0x124>)
    3862:	68bb      	ldr	r3, [r7, #8]
    3864:	0018      	movs	r0, r3
    3866:	4b0a      	ldr	r3, [pc, #40]	; (3890 <FreeRTOS_CLIProcessCommand+0x120>)
    3868:	4798      	blx	r3
		xReturn = pdFALSE;
    386a:	2300      	movs	r3, #0
    386c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
    386e:	69fb      	ldr	r3, [r7, #28]
}
    3870:	0018      	movs	r0, r3
    3872:	46bd      	mov	sp, r7
    3874:	b008      	add	sp, #32
    3876:	bd80      	pop	{r7, pc}
    3878:	20000334 	.word	0x20000334
    387c:	2000000c 	.word	0x2000000c
    3880:	0000e479 	.word	0x0000e479
    3884:	0000e487 	.word	0x0000e487
    3888:	000038f9 	.word	0x000038f9
    388c:	0000f1c8 	.word	0x0000f1c8
    3890:	0000e4a9 	.word	0x0000e4a9
    3894:	0000f220 	.word	0x0000f220

00003898 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    3898:	b580      	push	{r7, lr}
    389a:	b086      	sub	sp, #24
    389c:	af00      	add	r7, sp, #0
    389e:	60f8      	str	r0, [r7, #12]
    38a0:	60b9      	str	r1, [r7, #8]
    38a2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    38a4:	4b11      	ldr	r3, [pc, #68]	; (38ec <prvHelpCommand+0x54>)
    38a6:	681b      	ldr	r3, [r3, #0]
    38a8:	2b00      	cmp	r3, #0
    38aa:	d102      	bne.n	38b2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
    38ac:	4b0f      	ldr	r3, [pc, #60]	; (38ec <prvHelpCommand+0x54>)
    38ae:	4a10      	ldr	r2, [pc, #64]	; (38f0 <prvHelpCommand+0x58>)
    38b0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    38b2:	4b0e      	ldr	r3, [pc, #56]	; (38ec <prvHelpCommand+0x54>)
    38b4:	681b      	ldr	r3, [r3, #0]
    38b6:	681b      	ldr	r3, [r3, #0]
    38b8:	6859      	ldr	r1, [r3, #4]
    38ba:	68ba      	ldr	r2, [r7, #8]
    38bc:	68fb      	ldr	r3, [r7, #12]
    38be:	0018      	movs	r0, r3
    38c0:	4b0c      	ldr	r3, [pc, #48]	; (38f4 <prvHelpCommand+0x5c>)
    38c2:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    38c4:	4b09      	ldr	r3, [pc, #36]	; (38ec <prvHelpCommand+0x54>)
    38c6:	681b      	ldr	r3, [r3, #0]
    38c8:	685a      	ldr	r2, [r3, #4]
    38ca:	4b08      	ldr	r3, [pc, #32]	; (38ec <prvHelpCommand+0x54>)
    38cc:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
    38ce:	4b07      	ldr	r3, [pc, #28]	; (38ec <prvHelpCommand+0x54>)
    38d0:	681b      	ldr	r3, [r3, #0]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d102      	bne.n	38dc <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
    38d6:	2300      	movs	r3, #0
    38d8:	617b      	str	r3, [r7, #20]
    38da:	e001      	b.n	38e0 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
    38dc:	2301      	movs	r3, #1
    38de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    38e0:	697b      	ldr	r3, [r7, #20]
}
    38e2:	0018      	movs	r0, r3
    38e4:	46bd      	mov	sp, r7
    38e6:	b006      	add	sp, #24
    38e8:	bd80      	pop	{r7, pc}
    38ea:	46c0      	nop			; (mov r8, r8)
    38ec:	20000338 	.word	0x20000338
    38f0:	2000000c 	.word	0x2000000c
    38f4:	0000e4a9 	.word	0x0000e4a9

000038f8 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
    38f8:	b580      	push	{r7, lr}
    38fa:	b084      	sub	sp, #16
    38fc:	af00      	add	r7, sp, #0
    38fe:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
    3900:	230f      	movs	r3, #15
    3902:	18fb      	adds	r3, r7, r3
    3904:	2200      	movs	r2, #0
    3906:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
    3908:	2300      	movs	r3, #0
    390a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    390c:	e018      	b.n	3940 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
    390e:	687b      	ldr	r3, [r7, #4]
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	2b20      	cmp	r3, #32
    3914:	d10f      	bne.n	3936 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
    3916:	68bb      	ldr	r3, [r7, #8]
    3918:	2b01      	cmp	r3, #1
    391a:	d00e      	beq.n	393a <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
    391c:	230f      	movs	r3, #15
    391e:	18fb      	adds	r3, r7, r3
    3920:	781b      	ldrb	r3, [r3, #0]
    3922:	b25b      	sxtb	r3, r3
    3924:	b2db      	uxtb	r3, r3
    3926:	3301      	adds	r3, #1
    3928:	b2da      	uxtb	r2, r3
    392a:	230f      	movs	r3, #15
    392c:	18fb      	adds	r3, r7, r3
    392e:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
    3930:	2301      	movs	r3, #1
    3932:	60bb      	str	r3, [r7, #8]
    3934:	e001      	b.n	393a <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
    3936:	2300      	movs	r3, #0
    3938:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
    393a:	687b      	ldr	r3, [r7, #4]
    393c:	3301      	adds	r3, #1
    393e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
    3940:	687b      	ldr	r3, [r7, #4]
    3942:	781b      	ldrb	r3, [r3, #0]
    3944:	2b00      	cmp	r3, #0
    3946:	d1e2      	bne.n	390e <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    3948:	68bb      	ldr	r3, [r7, #8]
    394a:	2b01      	cmp	r3, #1
    394c:	d109      	bne.n	3962 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
    394e:	230f      	movs	r3, #15
    3950:	18fb      	adds	r3, r7, r3
    3952:	781b      	ldrb	r3, [r3, #0]
    3954:	b25b      	sxtb	r3, r3
    3956:	b2db      	uxtb	r3, r3
    3958:	3b01      	subs	r3, #1
    395a:	b2da      	uxtb	r2, r3
    395c:	230f      	movs	r3, #15
    395e:	18fb      	adds	r3, r7, r3
    3960:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
    3962:	230f      	movs	r3, #15
    3964:	18fb      	adds	r3, r7, r3
    3966:	781b      	ldrb	r3, [r3, #0]
    3968:	b25b      	sxtb	r3, r3
}
    396a:	0018      	movs	r0, r3
    396c:	46bd      	mov	sp, r7
    396e:	b004      	add	sp, #16
    3970:	bd80      	pop	{r7, pc}
	...

00003974 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
    3974:	b580      	push	{r7, lr}
    3976:	b082      	sub	sp, #8
    3978:	af00      	add	r7, sp, #0
    397a:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
    397c:	687b      	ldr	r3, [r7, #4]
    397e:	0018      	movs	r0, r3
    3980:	4b03      	ldr	r3, [pc, #12]	; (3990 <prvTraceGetQueueNumber+0x1c>)
    3982:	4798      	blx	r3
    3984:	0003      	movs	r3, r0
}
    3986:	0018      	movs	r0, r3
    3988:	46bd      	mov	sp, r7
    398a:	b002      	add	sp, #8
    398c:	bd80      	pop	{r7, pc}
    398e:	46c0      	nop			; (mov r8, r8)
    3990:	00006f85 	.word	0x00006f85

00003994 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    3994:	b580      	push	{r7, lr}
    3996:	b082      	sub	sp, #8
    3998:	af00      	add	r7, sp, #0
    399a:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	0018      	movs	r0, r3
    39a0:	4b03      	ldr	r3, [pc, #12]	; (39b0 <prvTraceGetQueueType+0x1c>)
    39a2:	4798      	blx	r3
    39a4:	0003      	movs	r3, r0
}
    39a6:	0018      	movs	r0, r3
    39a8:	46bd      	mov	sp, r7
    39aa:	b002      	add	sp, #8
    39ac:	bd80      	pop	{r7, pc}
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	00006fb1 	.word	0x00006fb1

000039b4 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    39b4:	b580      	push	{r7, lr}
    39b6:	b082      	sub	sp, #8
    39b8:	af00      	add	r7, sp, #0
    39ba:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    39bc:	687b      	ldr	r3, [r7, #4]
    39be:	0018      	movs	r0, r3
    39c0:	4b03      	ldr	r3, [pc, #12]	; (39d0 <prvTraceGetTaskNumberLow16+0x1c>)
    39c2:	4798      	blx	r3
    39c4:	0003      	movs	r3, r0
    39c6:	b29b      	uxth	r3, r3
}
    39c8:	0018      	movs	r0, r3
    39ca:	46bd      	mov	sp, r7
    39cc:	b002      	add	sp, #8
    39ce:	bd80      	pop	{r7, pc}
    39d0:	00008295 	.word	0x00008295

000039d4 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    39d4:	b580      	push	{r7, lr}
    39d6:	b082      	sub	sp, #8
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    39dc:	687b      	ldr	r3, [r7, #4]
    39de:	0018      	movs	r0, r3
    39e0:	4b04      	ldr	r3, [pc, #16]	; (39f4 <prvTraceGetTaskNumberHigh16+0x20>)
    39e2:	4798      	blx	r3
    39e4:	0003      	movs	r3, r0
    39e6:	0c1b      	lsrs	r3, r3, #16
    39e8:	b29b      	uxth	r3, r3
}
    39ea:	0018      	movs	r0, r3
    39ec:	46bd      	mov	sp, r7
    39ee:	b002      	add	sp, #8
    39f0:	bd80      	pop	{r7, pc}
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	00008295 	.word	0x00008295

000039f8 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    39f8:	b580      	push	{r7, lr}
    39fa:	b082      	sub	sp, #8
    39fc:	af00      	add	r7, sp, #0
    39fe:	6078      	str	r0, [r7, #4]
    3a00:	000a      	movs	r2, r1
    3a02:	1cbb      	adds	r3, r7, #2
    3a04:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    3a06:	687b      	ldr	r3, [r7, #4]
    3a08:	0018      	movs	r0, r3
    3a0a:	4b08      	ldr	r3, [pc, #32]	; (3a2c <prvTraceSetTaskNumberLow16+0x34>)
    3a0c:	4798      	blx	r3
    3a0e:	0003      	movs	r3, r0
    3a10:	0c1b      	lsrs	r3, r3, #16
    3a12:	041a      	lsls	r2, r3, #16
    3a14:	1cbb      	adds	r3, r7, #2
    3a16:	881b      	ldrh	r3, [r3, #0]
    3a18:	431a      	orrs	r2, r3
    3a1a:	687b      	ldr	r3, [r7, #4]
    3a1c:	0011      	movs	r1, r2
    3a1e:	0018      	movs	r0, r3
    3a20:	4b03      	ldr	r3, [pc, #12]	; (3a30 <prvTraceSetTaskNumberLow16+0x38>)
    3a22:	4798      	blx	r3
}
    3a24:	46c0      	nop			; (mov r8, r8)
    3a26:	46bd      	mov	sp, r7
    3a28:	b002      	add	sp, #8
    3a2a:	bd80      	pop	{r7, pc}
    3a2c:	00008295 	.word	0x00008295
    3a30:	000082bd 	.word	0x000082bd

00003a34 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    3a34:	b580      	push	{r7, lr}
    3a36:	b082      	sub	sp, #8
    3a38:	af00      	add	r7, sp, #0
    3a3a:	6078      	str	r0, [r7, #4]
    3a3c:	000a      	movs	r2, r1
    3a3e:	1cbb      	adds	r3, r7, #2
    3a40:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    3a42:	687b      	ldr	r3, [r7, #4]
    3a44:	0018      	movs	r0, r3
    3a46:	4b09      	ldr	r3, [pc, #36]	; (3a6c <prvTraceSetTaskNumberHigh16+0x38>)
    3a48:	4798      	blx	r3
    3a4a:	0003      	movs	r3, r0
    3a4c:	041b      	lsls	r3, r3, #16
    3a4e:	0c1a      	lsrs	r2, r3, #16
    3a50:	1cbb      	adds	r3, r7, #2
    3a52:	881b      	ldrh	r3, [r3, #0]
    3a54:	041b      	lsls	r3, r3, #16
    3a56:	431a      	orrs	r2, r3
    3a58:	687b      	ldr	r3, [r7, #4]
    3a5a:	0011      	movs	r1, r2
    3a5c:	0018      	movs	r0, r3
    3a5e:	4b04      	ldr	r3, [pc, #16]	; (3a70 <prvTraceSetTaskNumberHigh16+0x3c>)
    3a60:	4798      	blx	r3
}
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	46bd      	mov	sp, r7
    3a66:	b002      	add	sp, #8
    3a68:	bd80      	pop	{r7, pc}
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	00008295 	.word	0x00008295
    3a70:	000082bd 	.word	0x000082bd

00003a74 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    3a74:	b580      	push	{r7, lr}
    3a76:	b082      	sub	sp, #8
    3a78:	af00      	add	r7, sp, #0
    3a7a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    3a7c:	687b      	ldr	r3, [r7, #4]
    3a7e:	0018      	movs	r0, r3
    3a80:	4b03      	ldr	r3, [pc, #12]	; (3a90 <prvTraceGetQueueNumberLow16+0x1c>)
    3a82:	4798      	blx	r3
    3a84:	0003      	movs	r3, r0
    3a86:	b29b      	uxth	r3, r3
}
    3a88:	0018      	movs	r0, r3
    3a8a:	46bd      	mov	sp, r7
    3a8c:	b002      	add	sp, #8
    3a8e:	bd80      	pop	{r7, pc}
    3a90:	00003975 	.word	0x00003975

00003a94 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    3a94:	b580      	push	{r7, lr}
    3a96:	b082      	sub	sp, #8
    3a98:	af00      	add	r7, sp, #0
    3a9a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    3a9c:	687b      	ldr	r3, [r7, #4]
    3a9e:	0018      	movs	r0, r3
    3aa0:	4b04      	ldr	r3, [pc, #16]	; (3ab4 <prvTraceGetQueueNumberHigh16+0x20>)
    3aa2:	4798      	blx	r3
    3aa4:	0003      	movs	r3, r0
    3aa6:	0c1b      	lsrs	r3, r3, #16
    3aa8:	b29b      	uxth	r3, r3
}
    3aaa:	0018      	movs	r0, r3
    3aac:	46bd      	mov	sp, r7
    3aae:	b002      	add	sp, #8
    3ab0:	bd80      	pop	{r7, pc}
    3ab2:	46c0      	nop			; (mov r8, r8)
    3ab4:	00003975 	.word	0x00003975

00003ab8 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    3ab8:	b580      	push	{r7, lr}
    3aba:	b082      	sub	sp, #8
    3abc:	af00      	add	r7, sp, #0
    3abe:	6078      	str	r0, [r7, #4]
    3ac0:	000a      	movs	r2, r1
    3ac2:	1cbb      	adds	r3, r7, #2
    3ac4:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    3ac6:	687b      	ldr	r3, [r7, #4]
    3ac8:	0018      	movs	r0, r3
    3aca:	4b08      	ldr	r3, [pc, #32]	; (3aec <prvTraceSetQueueNumberLow16+0x34>)
    3acc:	4798      	blx	r3
    3ace:	0003      	movs	r3, r0
    3ad0:	0c1b      	lsrs	r3, r3, #16
    3ad2:	041a      	lsls	r2, r3, #16
    3ad4:	1cbb      	adds	r3, r7, #2
    3ad6:	881b      	ldrh	r3, [r3, #0]
    3ad8:	431a      	orrs	r2, r3
    3ada:	687b      	ldr	r3, [r7, #4]
    3adc:	0011      	movs	r1, r2
    3ade:	0018      	movs	r0, r3
    3ae0:	4b03      	ldr	r3, [pc, #12]	; (3af0 <prvTraceSetQueueNumberLow16+0x38>)
    3ae2:	4798      	blx	r3
}
    3ae4:	46c0      	nop			; (mov r8, r8)
    3ae6:	46bd      	mov	sp, r7
    3ae8:	b002      	add	sp, #8
    3aea:	bd80      	pop	{r7, pc}
    3aec:	00003975 	.word	0x00003975
    3af0:	00006f99 	.word	0x00006f99

00003af4 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    3af4:	b580      	push	{r7, lr}
    3af6:	b082      	sub	sp, #8
    3af8:	af00      	add	r7, sp, #0
    3afa:	6078      	str	r0, [r7, #4]
    3afc:	000a      	movs	r2, r1
    3afe:	1cbb      	adds	r3, r7, #2
    3b00:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    3b02:	687b      	ldr	r3, [r7, #4]
    3b04:	0018      	movs	r0, r3
    3b06:	4b09      	ldr	r3, [pc, #36]	; (3b2c <prvTraceSetQueueNumberHigh16+0x38>)
    3b08:	4798      	blx	r3
    3b0a:	0003      	movs	r3, r0
    3b0c:	041b      	lsls	r3, r3, #16
    3b0e:	0c1a      	lsrs	r2, r3, #16
    3b10:	1cbb      	adds	r3, r7, #2
    3b12:	881b      	ldrh	r3, [r3, #0]
    3b14:	041b      	lsls	r3, r3, #16
    3b16:	431a      	orrs	r2, r3
    3b18:	687b      	ldr	r3, [r7, #4]
    3b1a:	0011      	movs	r1, r2
    3b1c:	0018      	movs	r0, r3
    3b1e:	4b04      	ldr	r3, [pc, #16]	; (3b30 <prvTraceSetQueueNumberHigh16+0x3c>)
    3b20:	4798      	blx	r3
}
    3b22:	46c0      	nop			; (mov r8, r8)
    3b24:	46bd      	mov	sp, r7
    3b26:	b002      	add	sp, #8
    3b28:	bd80      	pop	{r7, pc}
    3b2a:	46c0      	nop			; (mov r8, r8)
    3b2c:	00003975 	.word	0x00003975
    3b30:	00006f99 	.word	0x00006f99

00003b34 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    3b34:	b580      	push	{r7, lr}
    3b36:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
    3b38:	4b02      	ldr	r3, [pc, #8]	; (3b44 <prvTraceGetCurrentTaskHandle+0x10>)
    3b3a:	4798      	blx	r3
    3b3c:	0003      	movs	r3, r0
}
    3b3e:	0018      	movs	r0, r3
    3b40:	46bd      	mov	sp, r7
    3b42:	bd80      	pop	{r7, pc}
    3b44:	00008471 	.word	0x00008471

00003b48 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    3b48:	b580      	push	{r7, lr}
    3b4a:	b082      	sub	sp, #8
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
    3b50:	4b0d      	ldr	r3, [pc, #52]	; (3b88 <vTraceEnable+0x40>)
    3b52:	4798      	blx	r3

	if (startOption == TRC_START)
    3b54:	687b      	ldr	r3, [r7, #4]
    3b56:	2b01      	cmp	r3, #1
    3b58:	d102      	bne.n	3b60 <vTraceEnable+0x18>
	{
		vTraceStart();
    3b5a:	4b0c      	ldr	r3, [pc, #48]	; (3b8c <vTraceEnable+0x44>)
    3b5c:	4798      	blx	r3
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    3b5e:	e00e      	b.n	3b7e <vTraceEnable+0x36>
	else if (startOption == TRC_START_AWAIT_HOST)
    3b60:	687b      	ldr	r3, [r7, #4]
    3b62:	2b02      	cmp	r3, #2
    3b64:	d104      	bne.n	3b70 <vTraceEnable+0x28>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    3b66:	4b0a      	ldr	r3, [pc, #40]	; (3b90 <vTraceEnable+0x48>)
    3b68:	0018      	movs	r0, r3
    3b6a:	4b0a      	ldr	r3, [pc, #40]	; (3b94 <vTraceEnable+0x4c>)
    3b6c:	4798      	blx	r3
}
    3b6e:	e006      	b.n	3b7e <vTraceEnable+0x36>
	else if (startOption != TRC_INIT)
    3b70:	687b      	ldr	r3, [r7, #4]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d003      	beq.n	3b7e <vTraceEnable+0x36>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    3b76:	4b08      	ldr	r3, [pc, #32]	; (3b98 <vTraceEnable+0x50>)
    3b78:	0018      	movs	r0, r3
    3b7a:	4b06      	ldr	r3, [pc, #24]	; (3b94 <vTraceEnable+0x4c>)
    3b7c:	4798      	blx	r3
}
    3b7e:	46c0      	nop			; (mov r8, r8)
    3b80:	46bd      	mov	sp, r7
    3b82:	b002      	add	sp, #8
    3b84:	bd80      	pop	{r7, pc}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	00004a19 	.word	0x00004a19
    3b8c:	00003f91 	.word	0x00003f91
    3b90:	0000f280 	.word	0x0000f280
    3b94:	000050c5 	.word	0x000050c5
    3b98:	0000f2c0 	.word	0x0000f2c0

00003b9c <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    3b9c:	b580      	push	{r7, lr}
    3b9e:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    3ba0:	4b60      	ldr	r3, [pc, #384]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3ba2:	681b      	ldr	r3, [r3, #0]
    3ba4:	2209      	movs	r2, #9
    3ba6:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    3ba8:	4b5e      	ldr	r3, [pc, #376]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3baa:	681b      	ldr	r3, [r3, #0]
    3bac:	2264      	movs	r2, #100	; 0x64
    3bae:	210a      	movs	r1, #10
    3bb0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    3bb2:	4b5c      	ldr	r3, [pc, #368]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3bb4:	681b      	ldr	r3, [r3, #0]
    3bb6:	2265      	movs	r2, #101	; 0x65
    3bb8:	210a      	movs	r1, #10
    3bba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    3bbc:	4b59      	ldr	r3, [pc, #356]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	2266      	movs	r2, #102	; 0x66
    3bc2:	210a      	movs	r1, #10
    3bc4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    3bc6:	4b57      	ldr	r3, [pc, #348]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3bc8:	681b      	ldr	r3, [r3, #0]
    3bca:	2267      	movs	r2, #103	; 0x67
    3bcc:	210f      	movs	r1, #15
    3bce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    3bd0:	4b54      	ldr	r3, [pc, #336]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	2268      	movs	r2, #104	; 0x68
    3bd6:	2105      	movs	r1, #5
    3bd8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    3bda:	4b52      	ldr	r3, [pc, #328]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3bdc:	681b      	ldr	r3, [r3, #0]
    3bde:	2269      	movs	r2, #105	; 0x69
    3be0:	2105      	movs	r1, #5
    3be2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    3be4:	4b4f      	ldr	r3, [pc, #316]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	226a      	movs	r2, #106	; 0x6a
    3bea:	2105      	movs	r1, #5
    3bec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    3bee:	4b4d      	ldr	r3, [pc, #308]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3bf0:	681b      	ldr	r3, [r3, #0]
    3bf2:	226b      	movs	r2, #107	; 0x6b
    3bf4:	2105      	movs	r1, #5
    3bf6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    3bf8:	4b4a      	ldr	r3, [pc, #296]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	226c      	movs	r2, #108	; 0x6c
    3bfe:	2105      	movs	r1, #5
    3c00:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    3c02:	4b48      	ldr	r3, [pc, #288]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c04:	681b      	ldr	r3, [r3, #0]
    3c06:	2270      	movs	r2, #112	; 0x70
    3c08:	210f      	movs	r1, #15
    3c0a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    3c0c:	4b45      	ldr	r3, [pc, #276]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c0e:	681b      	ldr	r3, [r3, #0]
    3c10:	2271      	movs	r2, #113	; 0x71
    3c12:	210f      	movs	r1, #15
    3c14:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    3c16:	4b43      	ldr	r3, [pc, #268]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	2272      	movs	r2, #114	; 0x72
    3c1c:	210f      	movs	r1, #15
    3c1e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    3c20:	4b40      	ldr	r3, [pc, #256]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c22:	681b      	ldr	r3, [r3, #0]
    3c24:	2273      	movs	r2, #115	; 0x73
    3c26:	210f      	movs	r1, #15
    3c28:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    3c2a:	4b3e      	ldr	r3, [pc, #248]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c2c:	681b      	ldr	r3, [r3, #0]
    3c2e:	2274      	movs	r2, #116	; 0x74
    3c30:	210f      	movs	r1, #15
    3c32:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    3c34:	4b3b      	ldr	r3, [pc, #236]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c36:	681b      	ldr	r3, [r3, #0]
    3c38:	2275      	movs	r2, #117	; 0x75
    3c3a:	210f      	movs	r1, #15
    3c3c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    3c3e:	4b39      	ldr	r3, [pc, #228]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c40:	681b      	ldr	r3, [r3, #0]
    3c42:	2276      	movs	r2, #118	; 0x76
    3c44:	210f      	movs	r1, #15
    3c46:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    3c48:	4b36      	ldr	r3, [pc, #216]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c4a:	681b      	ldr	r3, [r3, #0]
    3c4c:	2277      	movs	r2, #119	; 0x77
    3c4e:	210f      	movs	r1, #15
    3c50:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    3c52:	4b34      	ldr	r3, [pc, #208]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c54:	681b      	ldr	r3, [r3, #0]
    3c56:	2278      	movs	r2, #120	; 0x78
    3c58:	210f      	movs	r1, #15
    3c5a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    3c5c:	4b31      	ldr	r3, [pc, #196]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c5e:	681b      	ldr	r3, [r3, #0]
    3c60:	227c      	movs	r2, #124	; 0x7c
    3c62:	2110      	movs	r1, #16
    3c64:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    3c66:	4b2f      	ldr	r3, [pc, #188]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c68:	681b      	ldr	r3, [r3, #0]
    3c6a:	227d      	movs	r2, #125	; 0x7d
    3c6c:	2110      	movs	r1, #16
    3c6e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    3c70:	4b2c      	ldr	r3, [pc, #176]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c72:	681b      	ldr	r3, [r3, #0]
    3c74:	227e      	movs	r2, #126	; 0x7e
    3c76:	2110      	movs	r1, #16
    3c78:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    3c7a:	4b2a      	ldr	r3, [pc, #168]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c7c:	681b      	ldr	r3, [r3, #0]
    3c7e:	227f      	movs	r2, #127	; 0x7f
    3c80:	2113      	movs	r1, #19
    3c82:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    3c84:	4b27      	ldr	r3, [pc, #156]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c86:	681b      	ldr	r3, [r3, #0]
    3c88:	2280      	movs	r2, #128	; 0x80
    3c8a:	2111      	movs	r1, #17
    3c8c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    3c8e:	4b25      	ldr	r3, [pc, #148]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c90:	681b      	ldr	r3, [r3, #0]
    3c92:	2281      	movs	r2, #129	; 0x81
    3c94:	2110      	movs	r1, #16
    3c96:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    3c98:	4b22      	ldr	r3, [pc, #136]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3c9a:	681b      	ldr	r3, [r3, #0]
    3c9c:	2282      	movs	r2, #130	; 0x82
    3c9e:	2113      	movs	r1, #19
    3ca0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    3ca2:	4b20      	ldr	r3, [pc, #128]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3ca4:	681b      	ldr	r3, [r3, #0]
    3ca6:	2283      	movs	r2, #131	; 0x83
    3ca8:	2113      	movs	r1, #19
    3caa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    3cac:	4b1d      	ldr	r3, [pc, #116]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	2284      	movs	r2, #132	; 0x84
    3cb2:	2113      	movs	r1, #19
    3cb4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    3cb6:	4b1b      	ldr	r3, [pc, #108]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3cb8:	681b      	ldr	r3, [r3, #0]
    3cba:	2288      	movs	r2, #136	; 0x88
    3cbc:	2100      	movs	r1, #0
    3cbe:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    3cc0:	4b18      	ldr	r3, [pc, #96]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	228a      	movs	r2, #138	; 0x8a
    3cc6:	21a0      	movs	r1, #160	; 0xa0
    3cc8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    3cca:	4b16      	ldr	r3, [pc, #88]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	228c      	movs	r2, #140	; 0x8c
    3cd0:	21a0      	movs	r1, #160	; 0xa0
    3cd2:	0049      	lsls	r1, r1, #1
    3cd4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    3cd6:	4b13      	ldr	r3, [pc, #76]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	228e      	movs	r2, #142	; 0x8e
    3cdc:	21f0      	movs	r1, #240	; 0xf0
    3cde:	0049      	lsls	r1, r1, #1
    3ce0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    3ce2:	4b10      	ldr	r3, [pc, #64]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3ce4:	681b      	ldr	r3, [r3, #0]
    3ce6:	2290      	movs	r2, #144	; 0x90
    3ce8:	490f      	ldr	r1, [pc, #60]	; (3d28 <vTraceInitObjectPropertyTable+0x18c>)
    3cea:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    3cec:	4b0d      	ldr	r3, [pc, #52]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3cee:	681b      	ldr	r3, [r3, #0]
    3cf0:	2292      	movs	r2, #146	; 0x92
    3cf2:	490e      	ldr	r1, [pc, #56]	; (3d2c <vTraceInitObjectPropertyTable+0x190>)
    3cf4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    3cf6:	4b0b      	ldr	r3, [pc, #44]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3cf8:	681b      	ldr	r3, [r3, #0]
    3cfa:	2294      	movs	r2, #148	; 0x94
    3cfc:	490c      	ldr	r1, [pc, #48]	; (3d30 <vTraceInitObjectPropertyTable+0x194>)
    3cfe:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    3d00:	4b08      	ldr	r3, [pc, #32]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3d02:	681b      	ldr	r3, [r3, #0]
    3d04:	2296      	movs	r2, #150	; 0x96
    3d06:	490b      	ldr	r1, [pc, #44]	; (3d34 <vTraceInitObjectPropertyTable+0x198>)
    3d08:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    3d0a:	4b06      	ldr	r3, [pc, #24]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3d0c:	681b      	ldr	r3, [r3, #0]
    3d0e:	2298      	movs	r2, #152	; 0x98
    3d10:	218c      	movs	r1, #140	; 0x8c
    3d12:	00c9      	lsls	r1, r1, #3
    3d14:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    3d16:	4b03      	ldr	r3, [pc, #12]	; (3d24 <vTraceInitObjectPropertyTable+0x188>)
    3d18:	681b      	ldr	r3, [r3, #0]
    3d1a:	4a07      	ldr	r2, [pc, #28]	; (3d38 <vTraceInitObjectPropertyTable+0x19c>)
    3d1c:	661a      	str	r2, [r3, #96]	; 0x60
}
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	46bd      	mov	sp, r7
    3d22:	bd80      	pop	{r7, pc}
    3d24:	200003f8 	.word	0x200003f8
    3d28:	000002fd 	.word	0x000002fd
    3d2c:	00000352 	.word	0x00000352
    3d30:	000003a2 	.word	0x000003a2
    3d34:	00000401 	.word	0x00000401
    3d38:	000004bf 	.word	0x000004bf

00003d3c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    3d40:	4b2e      	ldr	r3, [pc, #184]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d42:	2200      	movs	r2, #0
    3d44:	825a      	strh	r2, [r3, #18]
    3d46:	4b2d      	ldr	r3, [pc, #180]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d48:	8a5a      	ldrh	r2, [r3, #18]
    3d4a:	4b2c      	ldr	r3, [pc, #176]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d4c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    3d4e:	4b2b      	ldr	r3, [pc, #172]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d50:	220a      	movs	r2, #10
    3d52:	829a      	strh	r2, [r3, #20]
    3d54:	4b29      	ldr	r3, [pc, #164]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d56:	8a9a      	ldrh	r2, [r3, #20]
    3d58:	4b28      	ldr	r3, [pc, #160]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d5a:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    3d5c:	4b27      	ldr	r3, [pc, #156]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d5e:	2214      	movs	r2, #20
    3d60:	82da      	strh	r2, [r3, #22]
    3d62:	4b26      	ldr	r3, [pc, #152]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d64:	8ada      	ldrh	r2, [r3, #22]
    3d66:	4b25      	ldr	r3, [pc, #148]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d68:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    3d6a:	4b24      	ldr	r3, [pc, #144]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d6c:	221e      	movs	r2, #30
    3d6e:	831a      	strh	r2, [r3, #24]
    3d70:	4b22      	ldr	r3, [pc, #136]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d72:	8b1a      	ldrh	r2, [r3, #24]
    3d74:	4b21      	ldr	r3, [pc, #132]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d76:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    3d78:	4b20      	ldr	r3, [pc, #128]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d7a:	222d      	movs	r2, #45	; 0x2d
    3d7c:	835a      	strh	r2, [r3, #26]
    3d7e:	4b1f      	ldr	r3, [pc, #124]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d80:	8b5a      	ldrh	r2, [r3, #26]
    3d82:	4b1e      	ldr	r3, [pc, #120]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d84:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    3d86:	4b1d      	ldr	r3, [pc, #116]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d88:	2232      	movs	r2, #50	; 0x32
    3d8a:	839a      	strh	r2, [r3, #28]
    3d8c:	4b1b      	ldr	r3, [pc, #108]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d8e:	8b9a      	ldrh	r2, [r3, #28]
    3d90:	4b1a      	ldr	r3, [pc, #104]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d92:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    3d94:	4b19      	ldr	r3, [pc, #100]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d96:	2237      	movs	r2, #55	; 0x37
    3d98:	83da      	strh	r2, [r3, #30]
    3d9a:	4b18      	ldr	r3, [pc, #96]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3d9c:	8bda      	ldrh	r2, [r3, #30]
    3d9e:	4b17      	ldr	r3, [pc, #92]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3da0:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    3da2:	4b16      	ldr	r3, [pc, #88]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3da4:	223c      	movs	r2, #60	; 0x3c
    3da6:	841a      	strh	r2, [r3, #32]
    3da8:	4b14      	ldr	r3, [pc, #80]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3daa:	8c1a      	ldrh	r2, [r3, #32]
    3dac:	4b13      	ldr	r3, [pc, #76]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dae:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    3db0:	4b12      	ldr	r3, [pc, #72]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3db2:	2241      	movs	r2, #65	; 0x41
    3db4:	845a      	strh	r2, [r3, #34]	; 0x22
    3db6:	4b11      	ldr	r3, [pc, #68]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3db8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    3dba:	4b10      	ldr	r3, [pc, #64]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dbc:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    3dbe:	4b0f      	ldr	r3, [pc, #60]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dc0:	2209      	movs	r2, #9
    3dc2:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    3dc4:	4b0d      	ldr	r3, [pc, #52]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dc6:	2213      	movs	r2, #19
    3dc8:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    3dca:	4b0c      	ldr	r3, [pc, #48]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dcc:	221d      	movs	r2, #29
    3dce:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    3dd0:	4b0a      	ldr	r3, [pc, #40]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dd2:	222c      	movs	r2, #44	; 0x2c
    3dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    3dd6:	4b09      	ldr	r3, [pc, #36]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dd8:	2231      	movs	r2, #49	; 0x31
    3dda:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    3ddc:	4b07      	ldr	r3, [pc, #28]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dde:	2236      	movs	r2, #54	; 0x36
    3de0:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    3de2:	4b06      	ldr	r3, [pc, #24]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3de4:	223b      	movs	r2, #59	; 0x3b
    3de6:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    3de8:	4b04      	ldr	r3, [pc, #16]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3dea:	2240      	movs	r2, #64	; 0x40
    3dec:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    3dee:	4b03      	ldr	r3, [pc, #12]	; (3dfc <vTraceInitObjectHandleStack+0xc0>)
    3df0:	2245      	movs	r2, #69	; 0x45
    3df2:	869a      	strh	r2, [r3, #52]	; 0x34
}
    3df4:	46c0      	nop			; (mov r8, r8)
    3df6:	46bd      	mov	sp, r7
    3df8:	bd80      	pop	{r7, pc}
    3dfa:	46c0      	nop			; (mov r8, r8)
    3dfc:	20000368 	.word	0x20000368

00003e00 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
    3e00:	b580      	push	{r7, lr}
    3e02:	b082      	sub	sp, #8
    3e04:	af00      	add	r7, sp, #0
    3e06:	0002      	movs	r2, r0
    3e08:	1dfb      	adds	r3, r7, #7
    3e0a:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
    3e0c:	1dfb      	adds	r3, r7, #7
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	2b08      	cmp	r3, #8
    3e12:	d816      	bhi.n	3e42 <pszTraceGetErrorNotEnoughHandles+0x42>
    3e14:	009a      	lsls	r2, r3, #2
    3e16:	4b0d      	ldr	r3, [pc, #52]	; (3e4c <pszTraceGetErrorNotEnoughHandles+0x4c>)
    3e18:	18d3      	adds	r3, r2, r3
    3e1a:	681b      	ldr	r3, [r3, #0]
    3e1c:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    3e1e:	4b0c      	ldr	r3, [pc, #48]	; (3e50 <pszTraceGetErrorNotEnoughHandles+0x50>)
    3e20:	e010      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    3e22:	4b0c      	ldr	r3, [pc, #48]	; (3e54 <pszTraceGetErrorNotEnoughHandles+0x54>)
    3e24:	e00e      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    3e26:	4b0c      	ldr	r3, [pc, #48]	; (3e58 <pszTraceGetErrorNotEnoughHandles+0x58>)
    3e28:	e00c      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    3e2a:	4b0c      	ldr	r3, [pc, #48]	; (3e5c <pszTraceGetErrorNotEnoughHandles+0x5c>)
    3e2c:	e00a      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    3e2e:	4b0c      	ldr	r3, [pc, #48]	; (3e60 <pszTraceGetErrorNotEnoughHandles+0x60>)
    3e30:	e008      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    3e32:	4b0c      	ldr	r3, [pc, #48]	; (3e64 <pszTraceGetErrorNotEnoughHandles+0x64>)
    3e34:	e006      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    3e36:	4b0c      	ldr	r3, [pc, #48]	; (3e68 <pszTraceGetErrorNotEnoughHandles+0x68>)
    3e38:	e004      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    3e3a:	4b0c      	ldr	r3, [pc, #48]	; (3e6c <pszTraceGetErrorNotEnoughHandles+0x6c>)
    3e3c:	e002      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    3e3e:	4b0c      	ldr	r3, [pc, #48]	; (3e70 <pszTraceGetErrorNotEnoughHandles+0x70>)
    3e40:	e000      	b.n	3e44 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    3e42:	4b0c      	ldr	r3, [pc, #48]	; (3e74 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
    3e44:	0018      	movs	r0, r3
    3e46:	46bd      	mov	sp, r7
    3e48:	b002      	add	sp, #8
    3e4a:	bd80      	pop	{r7, pc}
    3e4c:	0000f5f4 	.word	0x0000f5f4
    3e50:	0000f2f4 	.word	0x0000f2f4
    3e54:	0000f33c 	.word	0x0000f33c
    3e58:	0000f384 	.word	0x0000f384
    3e5c:	0000f3d8 	.word	0x0000f3d8
    3e60:	0000f424 	.word	0x0000f424
    3e64:	0000f470 	.word	0x0000f470
    3e68:	0000f4bc 	.word	0x0000f4bc
    3e6c:	0000f510 	.word	0x0000f510
    3e70:	0000f568 	.word	0x0000f568
    3e74:	0000f5c4 	.word	0x0000f5c4

00003e78 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
    3e78:	b590      	push	{r4, r7, lr}
    3e7a:	b087      	sub	sp, #28
    3e7c:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
    3e7e:	2317      	movs	r3, #23
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	2200      	movs	r2, #0
    3e84:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
    3e86:	4b36      	ldr	r3, [pc, #216]	; (3f60 <uiTraceStart+0xe8>)
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d10b      	bne.n	3ea6 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    3e8e:	4b34      	ldr	r3, [pc, #208]	; (3f60 <uiTraceStart+0xe8>)
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	2b00      	cmp	r3, #0
    3e94:	d105      	bne.n	3ea2 <uiTraceStart+0x2a>
    3e96:	4b33      	ldr	r3, [pc, #204]	; (3f64 <uiTraceStart+0xec>)
    3e98:	0018      	movs	r0, r3
    3e9a:	4b33      	ldr	r3, [pc, #204]	; (3f68 <uiTraceStart+0xf0>)
    3e9c:	4798      	blx	r3
    3e9e:	2300      	movs	r3, #0
    3ea0:	e059      	b.n	3f56 <uiTraceStart+0xde>
		return 0;
    3ea2:	2300      	movs	r3, #0
    3ea4:	e057      	b.n	3f56 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
    3ea6:	4b2e      	ldr	r3, [pc, #184]	; (3f60 <uiTraceStart+0xe8>)
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3eac:	2b01      	cmp	r3, #1
    3eae:	d101      	bne.n	3eb4 <uiTraceStart+0x3c>
		return 1; /* Already running */
    3eb0:	2301      	movs	r3, #1
    3eb2:	e050      	b.n	3f56 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
    3eb4:	4b2d      	ldr	r3, [pc, #180]	; (3f6c <uiTraceStart+0xf4>)
    3eb6:	681b      	ldr	r3, [r3, #0]
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d149      	bne.n	3f50 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3ebc:	f3ef 8310 	mrs	r3, PRIMASK
    3ec0:	60bb      	str	r3, [r7, #8]
  return(result);
    3ec2:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
    3ec4:	613b      	str	r3, [r7, #16]
    3ec6:	2301      	movs	r3, #1
    3ec8:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3eca:	68fb      	ldr	r3, [r7, #12]
    3ecc:	f383 8810 	msr	PRIMASK, r3
    3ed0:	4b27      	ldr	r3, [pc, #156]	; (3f70 <uiTraceStart+0xf8>)
    3ed2:	681b      	ldr	r3, [r3, #0]
    3ed4:	1c5a      	adds	r2, r3, #1
    3ed6:	4b26      	ldr	r3, [pc, #152]	; (3f70 <uiTraceStart+0xf8>)
    3ed8:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
    3eda:	4b21      	ldr	r3, [pc, #132]	; (3f60 <uiTraceStart+0xe8>)
    3edc:	681b      	ldr	r3, [r3, #0]
    3ede:	2201      	movs	r2, #1
    3ee0:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    3ee2:	4b24      	ldr	r3, [pc, #144]	; (3f74 <uiTraceStart+0xfc>)
    3ee4:	4798      	blx	r3
    3ee6:	0003      	movs	r3, r0
    3ee8:	0018      	movs	r0, r3
    3eea:	4b23      	ldr	r3, [pc, #140]	; (3f78 <uiTraceStart+0x100>)
    3eec:	4798      	blx	r3
    3eee:	0003      	movs	r3, r0
    3ef0:	001a      	movs	r2, r3
    3ef2:	2317      	movs	r3, #23
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
    3ef8:	2317      	movs	r3, #23
    3efa:	18fb      	adds	r3, r7, r3
    3efc:	781b      	ldrb	r3, [r3, #0]
    3efe:	2b00      	cmp	r3, #0
    3f00:	d116      	bne.n	3f30 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    3f02:	2317      	movs	r3, #23
    3f04:	18fc      	adds	r4, r7, r3
    3f06:	2003      	movs	r0, #3
    3f08:	4b1c      	ldr	r3, [pc, #112]	; (3f7c <uiTraceStart+0x104>)
    3f0a:	4798      	blx	r3
    3f0c:	0003      	movs	r3, r0
    3f0e:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    3f10:	4a1b      	ldr	r2, [pc, #108]	; (3f80 <uiTraceStart+0x108>)
    3f12:	2317      	movs	r3, #23
    3f14:	18fb      	adds	r3, r7, r3
    3f16:	781b      	ldrb	r3, [r3, #0]
    3f18:	0019      	movs	r1, r3
    3f1a:	2003      	movs	r0, #3
    3f1c:	4b19      	ldr	r3, [pc, #100]	; (3f84 <uiTraceStart+0x10c>)
    3f1e:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    3f20:	2317      	movs	r3, #23
    3f22:	18fb      	adds	r3, r7, r3
    3f24:	781b      	ldrb	r3, [r3, #0]
    3f26:	2200      	movs	r2, #0
    3f28:	0019      	movs	r1, r3
    3f2a:	2003      	movs	r0, #3
    3f2c:	4b16      	ldr	r3, [pc, #88]	; (3f88 <uiTraceStart+0x110>)
    3f2e:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    3f30:	2317      	movs	r3, #23
    3f32:	18fb      	adds	r3, r7, r3
    3f34:	781b      	ldrb	r3, [r3, #0]
    3f36:	0018      	movs	r0, r3
    3f38:	4b14      	ldr	r3, [pc, #80]	; (3f8c <uiTraceStart+0x114>)
    3f3a:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    3f3c:	4b0c      	ldr	r3, [pc, #48]	; (3f70 <uiTraceStart+0xf8>)
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	1e5a      	subs	r2, r3, #1
    3f42:	4b0b      	ldr	r3, [pc, #44]	; (3f70 <uiTraceStart+0xf8>)
    3f44:	601a      	str	r2, [r3, #0]
    3f46:	693b      	ldr	r3, [r7, #16]
    3f48:	607b      	str	r3, [r7, #4]
    3f4a:	687b      	ldr	r3, [r7, #4]
    3f4c:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
    3f50:	4b03      	ldr	r3, [pc, #12]	; (3f60 <uiTraceStart+0xe8>)
    3f52:	681b      	ldr	r3, [r3, #0]
    3f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
    3f56:	0018      	movs	r0, r3
    3f58:	46bd      	mov	sp, r7
    3f5a:	b007      	add	sp, #28
    3f5c:	bd90      	pop	{r4, r7, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	200003f8 	.word	0x200003f8
    3f64:	0000f618 	.word	0x0000f618
    3f68:	000050c5 	.word	0x000050c5
    3f6c:	20000358 	.word	0x20000358
    3f70:	20000350 	.word	0x20000350
    3f74:	00003b35 	.word	0x00003b35
    3f78:	000039b5 	.word	0x000039b5
    3f7c:	00004da9 	.word	0x00004da9
    3f80:	0000f65c 	.word	0x0000f65c
    3f84:	00004fd9 	.word	0x00004fd9
    3f88:	00004739 	.word	0x00004739
    3f8c:	00004621 	.word	0x00004621

00003f90 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
    3f90:	b580      	push	{r7, lr}
    3f92:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
    3f94:	4b02      	ldr	r3, [pc, #8]	; (3fa0 <vTraceStart+0x10>)
    3f96:	4798      	blx	r3
}
    3f98:	46c0      	nop			; (mov r8, r8)
    3f9a:	46bd      	mov	sp, r7
    3f9c:	bd80      	pop	{r7, pc}
    3f9e:	46c0      	nop			; (mov r8, r8)
    3fa0:	00003e79 	.word	0x00003e79

00003fa4 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
    3fa4:	b580      	push	{r7, lr}
    3fa6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
    3fa8:	4b08      	ldr	r3, [pc, #32]	; (3fcc <vTraceStop+0x28>)
    3faa:	681b      	ldr	r3, [r3, #0]
    3fac:	2b00      	cmp	r3, #0
    3fae:	d003      	beq.n	3fb8 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
    3fb0:	4b06      	ldr	r3, [pc, #24]	; (3fcc <vTraceStop+0x28>)
    3fb2:	681b      	ldr	r3, [r3, #0]
    3fb4:	2200      	movs	r2, #0
    3fb6:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    3fb8:	4b05      	ldr	r3, [pc, #20]	; (3fd0 <vTraceStop+0x2c>)
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d002      	beq.n	3fc6 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    3fc0:	4b03      	ldr	r3, [pc, #12]	; (3fd0 <vTraceStop+0x2c>)
    3fc2:	681b      	ldr	r3, [r3, #0]
    3fc4:	4798      	blx	r3
	}
}
    3fc6:	46c0      	nop			; (mov r8, r8)
    3fc8:	46bd      	mov	sp, r7
    3fca:	bd80      	pop	{r7, pc}
    3fcc:	200003f8 	.word	0x200003f8
    3fd0:	20000360 	.word	0x20000360

00003fd4 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
    3fd4:	b590      	push	{r4, r7, lr}
    3fd6:	b089      	sub	sp, #36	; 0x24
    3fd8:	af00      	add	r7, sp, #0
    3fda:	0002      	movs	r2, r0
    3fdc:	1dfb      	adds	r3, r7, #7
    3fde:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
    3fe0:	1dfb      	adds	r3, r7, #7
    3fe2:	781b      	ldrb	r3, [r3, #0]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	d057      	beq.n	4098 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
    3fe8:	4b2e      	ldr	r3, [pc, #184]	; (40a4 <prvTraceStoreTaskReady+0xd0>)
    3fea:	681b      	ldr	r3, [r3, #0]
    3fec:	2b00      	cmp	r3, #0
    3fee:	d055      	beq.n	409c <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    3ff0:	1dfb      	adds	r3, r7, #7
    3ff2:	781b      	ldrb	r3, [r3, #0]
    3ff4:	2b0f      	cmp	r3, #15
    3ff6:	d904      	bls.n	4002 <prvTraceStoreTaskReady+0x2e>
    3ff8:	4b2b      	ldr	r3, [pc, #172]	; (40a8 <prvTraceStoreTaskReady+0xd4>)
    3ffa:	0018      	movs	r0, r3
    3ffc:	4b2b      	ldr	r3, [pc, #172]	; (40ac <prvTraceStoreTaskReady+0xd8>)
    3ffe:	4798      	blx	r3
    4000:	e04d      	b.n	409e <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
    4002:	4b2b      	ldr	r3, [pc, #172]	; (40b0 <prvTraceStoreTaskReady+0xdc>)
    4004:	681b      	ldr	r3, [r3, #0]
    4006:	2b00      	cmp	r3, #0
    4008:	d004      	beq.n	4014 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    400a:	4b2a      	ldr	r3, [pc, #168]	; (40b4 <prvTraceStoreTaskReady+0xe0>)
    400c:	0018      	movs	r0, r3
    400e:	4b27      	ldr	r3, [pc, #156]	; (40ac <prvTraceStoreTaskReady+0xd8>)
    4010:	4798      	blx	r3
		return;
    4012:	e044      	b.n	409e <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4014:	f3ef 8310 	mrs	r3, PRIMASK
    4018:	60fb      	str	r3, [r7, #12]
  return(result);
    401a:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
    401c:	61fb      	str	r3, [r7, #28]
    401e:	2301      	movs	r3, #1
    4020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4022:	693b      	ldr	r3, [r7, #16]
    4024:	f383 8810 	msr	PRIMASK, r3
    4028:	4b21      	ldr	r3, [pc, #132]	; (40b0 <prvTraceStoreTaskReady+0xdc>)
    402a:	681b      	ldr	r3, [r3, #0]
    402c:	1c5a      	adds	r2, r3, #1
    402e:	4b20      	ldr	r3, [pc, #128]	; (40b0 <prvTraceStoreTaskReady+0xdc>)
    4030:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    4032:	4b21      	ldr	r3, [pc, #132]	; (40b8 <prvTraceStoreTaskReady+0xe4>)
    4034:	681b      	ldr	r3, [r3, #0]
    4036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4038:	2b00      	cmp	r3, #0
    403a:	d022      	beq.n	4082 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    403c:	231a      	movs	r3, #26
    403e:	18fc      	adds	r4, r7, r3
    4040:	4b1e      	ldr	r3, [pc, #120]	; (40bc <prvTraceStoreTaskReady+0xe8>)
    4042:	0018      	movs	r0, r3
    4044:	4b1e      	ldr	r3, [pc, #120]	; (40c0 <prvTraceStoreTaskReady+0xec>)
    4046:	4798      	blx	r3
    4048:	0003      	movs	r3, r0
    404a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
    404c:	2319      	movs	r3, #25
    404e:	18fb      	adds	r3, r7, r3
    4050:	1dfa      	adds	r2, r7, #7
    4052:	7812      	ldrb	r2, [r2, #0]
    4054:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    4056:	4b1b      	ldr	r3, [pc, #108]	; (40c4 <prvTraceStoreTaskReady+0xf0>)
    4058:	4798      	blx	r3
    405a:	0003      	movs	r3, r0
    405c:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
    405e:	697b      	ldr	r3, [r7, #20]
    4060:	2b00      	cmp	r3, #0
    4062:	d00e      	beq.n	4082 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
    4064:	697b      	ldr	r3, [r7, #20]
    4066:	2202      	movs	r2, #2
    4068:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
    406a:	697b      	ldr	r3, [r7, #20]
    406c:	221a      	movs	r2, #26
    406e:	18ba      	adds	r2, r7, r2
    4070:	8812      	ldrh	r2, [r2, #0]
    4072:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
    4074:	697b      	ldr	r3, [r7, #20]
    4076:	2219      	movs	r2, #25
    4078:	18ba      	adds	r2, r7, r2
    407a:	7812      	ldrb	r2, [r2, #0]
    407c:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    407e:	4b12      	ldr	r3, [pc, #72]	; (40c8 <prvTraceStoreTaskReady+0xf4>)
    4080:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    4082:	4b0b      	ldr	r3, [pc, #44]	; (40b0 <prvTraceStoreTaskReady+0xdc>)
    4084:	681b      	ldr	r3, [r3, #0]
    4086:	1e5a      	subs	r2, r3, #1
    4088:	4b09      	ldr	r3, [pc, #36]	; (40b0 <prvTraceStoreTaskReady+0xdc>)
    408a:	601a      	str	r2, [r3, #0]
    408c:	69fb      	ldr	r3, [r7, #28]
    408e:	60bb      	str	r3, [r7, #8]
    4090:	68bb      	ldr	r3, [r7, #8]
    4092:	f383 8810 	msr	PRIMASK, r3
    4096:	e002      	b.n	409e <prvTraceStoreTaskReady+0xca>
		return;
    4098:	46c0      	nop			; (mov r8, r8)
    409a:	e000      	b.n	409e <prvTraceStoreTaskReady+0xca>
		return;
    409c:	46c0      	nop			; (mov r8, r8)
}
    409e:	46bd      	mov	sp, r7
    40a0:	b009      	add	sp, #36	; 0x24
    40a2:	bd90      	pop	{r4, r7, pc}
    40a4:	20000020 	.word	0x20000020
    40a8:	0000f9c4 	.word	0x0000f9c4
    40ac:	000050c5 	.word	0x000050c5
    40b0:	20000350 	.word	0x20000350
    40b4:	0000fa04 	.word	0x0000fa04
    40b8:	200003f8 	.word	0x200003f8
    40bc:	0000ffff 	.word	0x0000ffff
    40c0:	000052cd 	.word	0x000052cd
    40c4:	00004c79 	.word	0x00004c79
    40c8:	00005275 	.word	0x00005275

000040cc <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b08e      	sub	sp, #56	; 0x38
    40d0:	af00      	add	r7, sp, #0
    40d2:	60f8      	str	r0, [r7, #12]
    40d4:	60b9      	str	r1, [r7, #8]
    40d6:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
    40d8:	4b48      	ldr	r3, [pc, #288]	; (41fc <vTraceStoreMemMangEvent+0x130>)
    40da:	681b      	ldr	r3, [r3, #0]
    40dc:	2b00      	cmp	r3, #0
    40de:	d100      	bne.n	40e2 <vTraceStoreMemMangEvent+0x16>
    40e0:	e088      	b.n	41f4 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	2b00      	cmp	r3, #0
    40e6:	da03      	bge.n	40f0 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	425b      	negs	r3, r3
    40ec:	637b      	str	r3, [r7, #52]	; 0x34
    40ee:	e001      	b.n	40f4 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
    40f0:	687b      	ldr	r3, [r7, #4]
    40f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40f4:	f3ef 8310 	mrs	r3, PRIMASK
    40f8:	61bb      	str	r3, [r7, #24]
  return(result);
    40fa:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
    40fc:	633b      	str	r3, [r7, #48]	; 0x30
    40fe:	2301      	movs	r3, #1
    4100:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4102:	69fb      	ldr	r3, [r7, #28]
    4104:	f383 8810 	msr	PRIMASK, r3
    4108:	4b3d      	ldr	r3, [pc, #244]	; (4200 <vTraceStoreMemMangEvent+0x134>)
    410a:	681b      	ldr	r3, [r3, #0]
    410c:	1c5a      	adds	r2, r3, #1
    410e:	4b3c      	ldr	r3, [pc, #240]	; (4200 <vTraceStoreMemMangEvent+0x134>)
    4110:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
    4112:	68bb      	ldr	r3, [r7, #8]
    4114:	2b00      	cmp	r3, #0
    4116:	d005      	beq.n	4124 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
    4118:	4b3a      	ldr	r3, [pc, #232]	; (4204 <vTraceStoreMemMangEvent+0x138>)
    411a:	681a      	ldr	r2, [r3, #0]
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	18d2      	adds	r2, r2, r3
    4120:	4b38      	ldr	r3, [pc, #224]	; (4204 <vTraceStoreMemMangEvent+0x138>)
    4122:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
    4124:	4b35      	ldr	r3, [pc, #212]	; (41fc <vTraceStoreMemMangEvent+0x130>)
    4126:	681b      	ldr	r3, [r3, #0]
    4128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    412a:	2b00      	cmp	r3, #0
    412c:	d057      	beq.n	41de <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    412e:	20ff      	movs	r0, #255	; 0xff
    4130:	4b35      	ldr	r3, [pc, #212]	; (4208 <vTraceStoreMemMangEvent+0x13c>)
    4132:	4798      	blx	r3
    4134:	0003      	movs	r3, r0
    4136:	001a      	movs	r2, r3
    4138:	232f      	movs	r3, #47	; 0x2f
    413a:	18fb      	adds	r3, r7, r3
    413c:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4140:	4a32      	ldr	r2, [pc, #200]	; (420c <vTraceStoreMemMangEvent+0x140>)
    4142:	0019      	movs	r1, r3
    4144:	0010      	movs	r0, r2
    4146:	4b32      	ldr	r3, [pc, #200]	; (4210 <vTraceStoreMemMangEvent+0x144>)
    4148:	4798      	blx	r3
    414a:	0002      	movs	r2, r0
    414c:	232c      	movs	r3, #44	; 0x2c
    414e:	18fb      	adds	r3, r7, r3
    4150:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    4152:	4b30      	ldr	r3, [pc, #192]	; (4214 <vTraceStoreMemMangEvent+0x148>)
    4154:	4798      	blx	r3
    4156:	0003      	movs	r3, r0
    4158:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
    415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    415c:	2b00      	cmp	r3, #0
    415e:	d03e      	beq.n	41de <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
    4160:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4162:	222f      	movs	r2, #47	; 0x2f
    4164:	18ba      	adds	r2, r7, r2
    4166:	7812      	ldrb	r2, [r2, #0]
    4168:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    416c:	2200      	movs	r2, #0
    416e:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
    4170:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4172:	222c      	movs	r2, #44	; 0x2c
    4174:	18ba      	adds	r2, r7, r2
    4176:	8812      	ldrh	r2, [r2, #0]
    4178:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    417a:	4b27      	ldr	r3, [pc, #156]	; (4218 <vTraceStoreMemMangEvent+0x14c>)
    417c:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    417e:	68bb      	ldr	r3, [r7, #8]
    4180:	4a22      	ldr	r2, [pc, #136]	; (420c <vTraceStoreMemMangEvent+0x140>)
    4182:	0019      	movs	r1, r3
    4184:	0010      	movs	r0, r2
    4186:	4b22      	ldr	r3, [pc, #136]	; (4210 <vTraceStoreMemMangEvent+0x144>)
    4188:	4798      	blx	r3
    418a:	0002      	movs	r2, r0
    418c:	2326      	movs	r3, #38	; 0x26
    418e:	18fb      	adds	r3, r7, r3
    4190:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
    4192:	2325      	movs	r3, #37	; 0x25
    4194:	18fb      	adds	r3, r7, r3
    4196:	2200      	movs	r2, #0
    4198:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    419a:	4b1e      	ldr	r3, [pc, #120]	; (4214 <vTraceStoreMemMangEvent+0x148>)
    419c:	4798      	blx	r3
    419e:	0003      	movs	r3, r0
    41a0:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
    41a2:	6a3b      	ldr	r3, [r7, #32]
    41a4:	2b00      	cmp	r3, #0
    41a6:	d01a      	beq.n	41de <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
    41a8:	6a3b      	ldr	r3, [r7, #32]
    41aa:	2226      	movs	r2, #38	; 0x26
    41ac:	18ba      	adds	r2, r7, r2
    41ae:	8812      	ldrh	r2, [r2, #0]
    41b0:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
    41b2:	6a3b      	ldr	r3, [r7, #32]
    41b4:	2225      	movs	r2, #37	; 0x25
    41b6:	18ba      	adds	r2, r7, r2
    41b8:	7812      	ldrb	r2, [r2, #0]
    41ba:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    41bc:	68fb      	ldr	r3, [r7, #12]
    41be:	b2db      	uxtb	r3, r3
    41c0:	3301      	adds	r3, #1
    41c2:	b2da      	uxtb	r2, r3
    41c4:	6a3b      	ldr	r3, [r7, #32]
    41c6:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
    41c8:	68fb      	ldr	r3, [r7, #12]
    41ca:	b2da      	uxtb	r2, r3
    41cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    41ce:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
    41d0:	4b11      	ldr	r3, [pc, #68]	; (4218 <vTraceStoreMemMangEvent+0x14c>)
    41d2:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    41d4:	4b09      	ldr	r3, [pc, #36]	; (41fc <vTraceStoreMemMangEvent+0x130>)
    41d6:	681b      	ldr	r3, [r3, #0]
    41d8:	4a0a      	ldr	r2, [pc, #40]	; (4204 <vTraceStoreMemMangEvent+0x138>)
    41da:	6812      	ldr	r2, [r2, #0]
    41dc:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
    41de:	4b08      	ldr	r3, [pc, #32]	; (4200 <vTraceStoreMemMangEvent+0x134>)
    41e0:	681b      	ldr	r3, [r3, #0]
    41e2:	1e5a      	subs	r2, r3, #1
    41e4:	4b06      	ldr	r3, [pc, #24]	; (4200 <vTraceStoreMemMangEvent+0x134>)
    41e6:	601a      	str	r2, [r3, #0]
    41e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    41ea:	617b      	str	r3, [r7, #20]
    41ec:	697b      	ldr	r3, [r7, #20]
    41ee:	f383 8810 	msr	PRIMASK, r3
    41f2:	e000      	b.n	41f6 <vTraceStoreMemMangEvent+0x12a>
		return;
    41f4:	46c0      	nop			; (mov r8, r8)
}
    41f6:	46bd      	mov	sp, r7
    41f8:	b00e      	add	sp, #56	; 0x38
    41fa:	bd80      	pop	{r7, pc}
    41fc:	200003f8 	.word	0x200003f8
    4200:	20000350 	.word	0x20000350
    4204:	20000364 	.word	0x20000364
    4208:	000052cd 	.word	0x000052cd
    420c:	0000ffff 	.word	0x0000ffff
    4210:	00004499 	.word	0x00004499
    4214:	00004c79 	.word	0x00004c79
    4218:	00005275 	.word	0x00005275

0000421c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
    421c:	b590      	push	{r4, r7, lr}
    421e:	b08b      	sub	sp, #44	; 0x2c
    4220:	af00      	add	r7, sp, #0
    4222:	60f8      	str	r0, [r7, #12]
    4224:	607a      	str	r2, [r7, #4]
    4226:	230b      	movs	r3, #11
    4228:	18fb      	adds	r3, r7, r3
    422a:	1c0a      	adds	r2, r1, #0
    422c:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    422e:	68fb      	ldr	r3, [r7, #12]
    4230:	2bfe      	cmp	r3, #254	; 0xfe
    4232:	d904      	bls.n	423e <prvTraceStoreKernelCall+0x22>
    4234:	4b39      	ldr	r3, [pc, #228]	; (431c <prvTraceStoreKernelCall+0x100>)
    4236:	0018      	movs	r0, r3
    4238:	4b39      	ldr	r3, [pc, #228]	; (4320 <prvTraceStoreKernelCall+0x104>)
    423a:	4798      	blx	r3
    423c:	e06b      	b.n	4316 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    423e:	230b      	movs	r3, #11
    4240:	18fb      	adds	r3, r7, r3
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	2b08      	cmp	r3, #8
    4246:	d904      	bls.n	4252 <prvTraceStoreKernelCall+0x36>
    4248:	4b36      	ldr	r3, [pc, #216]	; (4324 <prvTraceStoreKernelCall+0x108>)
    424a:	0018      	movs	r0, r3
    424c:	4b34      	ldr	r3, [pc, #208]	; (4320 <prvTraceStoreKernelCall+0x104>)
    424e:	4798      	blx	r3
    4250:	e061      	b.n	4316 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    4252:	4b35      	ldr	r3, [pc, #212]	; (4328 <prvTraceStoreKernelCall+0x10c>)
    4254:	681a      	ldr	r2, [r3, #0]
    4256:	230b      	movs	r3, #11
    4258:	18fb      	adds	r3, r7, r3
    425a:	781b      	ldrb	r3, [r3, #0]
    425c:	2164      	movs	r1, #100	; 0x64
    425e:	18d3      	adds	r3, r2, r3
    4260:	185b      	adds	r3, r3, r1
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	001a      	movs	r2, r3
    4266:	687b      	ldr	r3, [r7, #4]
    4268:	429a      	cmp	r2, r3
    426a:	d204      	bcs.n	4276 <prvTraceStoreKernelCall+0x5a>
    426c:	4b2f      	ldr	r3, [pc, #188]	; (432c <prvTraceStoreKernelCall+0x110>)
    426e:	0018      	movs	r0, r3
    4270:	4b2b      	ldr	r3, [pc, #172]	; (4320 <prvTraceStoreKernelCall+0x104>)
    4272:	4798      	blx	r3
    4274:	e04f      	b.n	4316 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
    4276:	4b2e      	ldr	r3, [pc, #184]	; (4330 <prvTraceStoreKernelCall+0x114>)
    4278:	681b      	ldr	r3, [r3, #0]
    427a:	2b00      	cmp	r3, #0
    427c:	d004      	beq.n	4288 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    427e:	4b2d      	ldr	r3, [pc, #180]	; (4334 <prvTraceStoreKernelCall+0x118>)
    4280:	0018      	movs	r0, r3
    4282:	4b27      	ldr	r3, [pc, #156]	; (4320 <prvTraceStoreKernelCall+0x104>)
    4284:	4798      	blx	r3
		return;
    4286:	e046      	b.n	4316 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
    4288:	4b2b      	ldr	r3, [pc, #172]	; (4338 <prvTraceStoreKernelCall+0x11c>)
    428a:	781b      	ldrb	r3, [r3, #0]
    428c:	2b00      	cmp	r3, #0
    428e:	d041      	beq.n	4314 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4290:	f3ef 8310 	mrs	r3, PRIMASK
    4294:	617b      	str	r3, [r7, #20]
  return(result);
    4296:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
    4298:	627b      	str	r3, [r7, #36]	; 0x24
    429a:	2301      	movs	r3, #1
    429c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    429e:	69bb      	ldr	r3, [r7, #24]
    42a0:	f383 8810 	msr	PRIMASK, r3
    42a4:	4b22      	ldr	r3, [pc, #136]	; (4330 <prvTraceStoreKernelCall+0x114>)
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	1c5a      	adds	r2, r3, #1
    42aa:	4b21      	ldr	r3, [pc, #132]	; (4330 <prvTraceStoreKernelCall+0x114>)
    42ac:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    42ae:	4b1e      	ldr	r3, [pc, #120]	; (4328 <prvTraceStoreKernelCall+0x10c>)
    42b0:	681b      	ldr	r3, [r3, #0]
    42b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    42b4:	2b00      	cmp	r3, #0
    42b6:	d022      	beq.n	42fe <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    42b8:	2322      	movs	r3, #34	; 0x22
    42ba:	18fc      	adds	r4, r7, r3
    42bc:	4b1f      	ldr	r3, [pc, #124]	; (433c <prvTraceStoreKernelCall+0x120>)
    42be:	0018      	movs	r0, r3
    42c0:	4b1f      	ldr	r3, [pc, #124]	; (4340 <prvTraceStoreKernelCall+0x124>)
    42c2:	4798      	blx	r3
    42c4:	0003      	movs	r3, r0
    42c6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    42c8:	2321      	movs	r3, #33	; 0x21
    42ca:	18fb      	adds	r3, r7, r3
    42cc:	687a      	ldr	r2, [r7, #4]
    42ce:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    42d0:	4b1c      	ldr	r3, [pc, #112]	; (4344 <prvTraceStoreKernelCall+0x128>)
    42d2:	4798      	blx	r3
    42d4:	0003      	movs	r3, r0
    42d6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    42d8:	69fb      	ldr	r3, [r7, #28]
    42da:	2b00      	cmp	r3, #0
    42dc:	d00f      	beq.n	42fe <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
    42de:	69fb      	ldr	r3, [r7, #28]
    42e0:	2222      	movs	r2, #34	; 0x22
    42e2:	18ba      	adds	r2, r7, r2
    42e4:	8812      	ldrh	r2, [r2, #0]
    42e6:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	b2da      	uxtb	r2, r3
    42ec:	69fb      	ldr	r3, [r7, #28]
    42ee:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    42f0:	69fb      	ldr	r3, [r7, #28]
    42f2:	2221      	movs	r2, #33	; 0x21
    42f4:	18ba      	adds	r2, r7, r2
    42f6:	7812      	ldrb	r2, [r2, #0]
    42f8:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
    42fa:	4b13      	ldr	r3, [pc, #76]	; (4348 <prvTraceStoreKernelCall+0x12c>)
    42fc:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    42fe:	4b0c      	ldr	r3, [pc, #48]	; (4330 <prvTraceStoreKernelCall+0x114>)
    4300:	681b      	ldr	r3, [r3, #0]
    4302:	1e5a      	subs	r2, r3, #1
    4304:	4b0a      	ldr	r3, [pc, #40]	; (4330 <prvTraceStoreKernelCall+0x114>)
    4306:	601a      	str	r2, [r3, #0]
    4308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    430a:	613b      	str	r3, [r7, #16]
    430c:	693b      	ldr	r3, [r7, #16]
    430e:	f383 8810 	msr	PRIMASK, r3
    4312:	e000      	b.n	4316 <prvTraceStoreKernelCall+0xfa>
		return;
    4314:	46c0      	nop			; (mov r8, r8)
}
    4316:	46bd      	mov	sp, r7
    4318:	b00b      	add	sp, #44	; 0x2c
    431a:	bd90      	pop	{r4, r7, pc}
    431c:	0000fa74 	.word	0x0000fa74
    4320:	000050c5 	.word	0x000050c5
    4324:	0000faac 	.word	0x0000faac
    4328:	200003f8 	.word	0x200003f8
    432c:	0000faf4 	.word	0x0000faf4
    4330:	20000350 	.word	0x20000350
    4334:	0000fb3c 	.word	0x0000fb3c
    4338:	2000035c 	.word	0x2000035c
    433c:	0000ffff 	.word	0x0000ffff
    4340:	000052cd 	.word	0x000052cd
    4344:	00004c79 	.word	0x00004c79
    4348:	00005275 	.word	0x00005275

0000434c <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
    434c:	b580      	push	{r7, lr}
    434e:	b08a      	sub	sp, #40	; 0x28
    4350:	af00      	add	r7, sp, #0
    4352:	60f8      	str	r0, [r7, #12]
    4354:	607a      	str	r2, [r7, #4]
    4356:	603b      	str	r3, [r7, #0]
    4358:	230b      	movs	r3, #11
    435a:	18fb      	adds	r3, r7, r3
    435c:	1c0a      	adds	r2, r1, #0
    435e:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    4360:	68fb      	ldr	r3, [r7, #12]
    4362:	2bfe      	cmp	r3, #254	; 0xfe
    4364:	d904      	bls.n	4370 <prvTraceStoreKernelCallWithParam+0x24>
    4366:	4b40      	ldr	r3, [pc, #256]	; (4468 <prvTraceStoreKernelCallWithParam+0x11c>)
    4368:	0018      	movs	r0, r3
    436a:	4b40      	ldr	r3, [pc, #256]	; (446c <prvTraceStoreKernelCallWithParam+0x120>)
    436c:	4798      	blx	r3
    436e:	e077      	b.n	4460 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    4370:	230b      	movs	r3, #11
    4372:	18fb      	adds	r3, r7, r3
    4374:	781b      	ldrb	r3, [r3, #0]
    4376:	2b08      	cmp	r3, #8
    4378:	d904      	bls.n	4384 <prvTraceStoreKernelCallWithParam+0x38>
    437a:	4b3d      	ldr	r3, [pc, #244]	; (4470 <prvTraceStoreKernelCallWithParam+0x124>)
    437c:	0018      	movs	r0, r3
    437e:	4b3b      	ldr	r3, [pc, #236]	; (446c <prvTraceStoreKernelCallWithParam+0x120>)
    4380:	4798      	blx	r3
    4382:	e06d      	b.n	4460 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    4384:	4b3b      	ldr	r3, [pc, #236]	; (4474 <prvTraceStoreKernelCallWithParam+0x128>)
    4386:	681a      	ldr	r2, [r3, #0]
    4388:	230b      	movs	r3, #11
    438a:	18fb      	adds	r3, r7, r3
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	2164      	movs	r1, #100	; 0x64
    4390:	18d3      	adds	r3, r2, r3
    4392:	185b      	adds	r3, r3, r1
    4394:	781b      	ldrb	r3, [r3, #0]
    4396:	001a      	movs	r2, r3
    4398:	687b      	ldr	r3, [r7, #4]
    439a:	429a      	cmp	r2, r3
    439c:	d204      	bcs.n	43a8 <prvTraceStoreKernelCallWithParam+0x5c>
    439e:	4b36      	ldr	r3, [pc, #216]	; (4478 <prvTraceStoreKernelCallWithParam+0x12c>)
    43a0:	0018      	movs	r0, r3
    43a2:	4b32      	ldr	r3, [pc, #200]	; (446c <prvTraceStoreKernelCallWithParam+0x120>)
    43a4:	4798      	blx	r3
    43a6:	e05b      	b.n	4460 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
    43a8:	4b34      	ldr	r3, [pc, #208]	; (447c <prvTraceStoreKernelCallWithParam+0x130>)
    43aa:	681b      	ldr	r3, [r3, #0]
    43ac:	2b00      	cmp	r3, #0
    43ae:	d004      	beq.n	43ba <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    43b0:	4b33      	ldr	r3, [pc, #204]	; (4480 <prvTraceStoreKernelCallWithParam+0x134>)
    43b2:	0018      	movs	r0, r3
    43b4:	4b2d      	ldr	r3, [pc, #180]	; (446c <prvTraceStoreKernelCallWithParam+0x120>)
    43b6:	4798      	blx	r3
		return;
    43b8:	e052      	b.n	4460 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    43ba:	f3ef 8310 	mrs	r3, PRIMASK
    43be:	617b      	str	r3, [r7, #20]
  return(result);
    43c0:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
    43c2:	627b      	str	r3, [r7, #36]	; 0x24
    43c4:	2301      	movs	r3, #1
    43c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    43c8:	69bb      	ldr	r3, [r7, #24]
    43ca:	f383 8810 	msr	PRIMASK, r3
    43ce:	4b2b      	ldr	r3, [pc, #172]	; (447c <prvTraceStoreKernelCallWithParam+0x130>)
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	1c5a      	adds	r2, r3, #1
    43d4:	4b29      	ldr	r3, [pc, #164]	; (447c <prvTraceStoreKernelCallWithParam+0x130>)
    43d6:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    43d8:	4b26      	ldr	r3, [pc, #152]	; (4474 <prvTraceStoreKernelCallWithParam+0x128>)
    43da:	681b      	ldr	r3, [r3, #0]
    43dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    43de:	2b00      	cmp	r3, #0
    43e0:	d034      	beq.n	444c <prvTraceStoreKernelCallWithParam+0x100>
    43e2:	4b28      	ldr	r3, [pc, #160]	; (4484 <prvTraceStoreKernelCallWithParam+0x138>)
    43e4:	781b      	ldrb	r3, [r3, #0]
    43e6:	2b00      	cmp	r3, #0
    43e8:	d030      	beq.n	444c <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    43ea:	20ff      	movs	r0, #255	; 0xff
    43ec:	4b26      	ldr	r3, [pc, #152]	; (4488 <prvTraceStoreKernelCallWithParam+0x13c>)
    43ee:	4798      	blx	r3
    43f0:	0003      	movs	r3, r0
    43f2:	001a      	movs	r2, r3
    43f4:	2323      	movs	r3, #35	; 0x23
    43f6:	18fb      	adds	r3, r7, r3
    43f8:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    43fa:	683b      	ldr	r3, [r7, #0]
    43fc:	0019      	movs	r1, r3
    43fe:	20ff      	movs	r0, #255	; 0xff
    4400:	4b22      	ldr	r3, [pc, #136]	; (448c <prvTraceStoreKernelCallWithParam+0x140>)
    4402:	4798      	blx	r3
    4404:	0002      	movs	r2, r0
    4406:	2322      	movs	r3, #34	; 0x22
    4408:	18fb      	adds	r3, r7, r3
    440a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
    440c:	2321      	movs	r3, #33	; 0x21
    440e:	18fb      	adds	r3, r7, r3
    4410:	687a      	ldr	r2, [r7, #4]
    4412:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    4414:	4b1e      	ldr	r3, [pc, #120]	; (4490 <prvTraceStoreKernelCallWithParam+0x144>)
    4416:	4798      	blx	r3
    4418:	0003      	movs	r3, r0
    441a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
    441c:	69fb      	ldr	r3, [r7, #28]
    441e:	2b00      	cmp	r3, #0
    4420:	d014      	beq.n	444c <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
    4422:	69fb      	ldr	r3, [r7, #28]
    4424:	2223      	movs	r2, #35	; 0x23
    4426:	18ba      	adds	r2, r7, r2
    4428:	7812      	ldrb	r2, [r2, #0]
    442a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
    442c:	68fb      	ldr	r3, [r7, #12]
    442e:	b2da      	uxtb	r2, r3
    4430:	69fb      	ldr	r3, [r7, #28]
    4432:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
    4434:	69fb      	ldr	r3, [r7, #28]
    4436:	2221      	movs	r2, #33	; 0x21
    4438:	18ba      	adds	r2, r7, r2
    443a:	7812      	ldrb	r2, [r2, #0]
    443c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
    443e:	69fb      	ldr	r3, [r7, #28]
    4440:	2222      	movs	r2, #34	; 0x22
    4442:	18ba      	adds	r2, r7, r2
    4444:	7812      	ldrb	r2, [r2, #0]
    4446:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
    4448:	4b12      	ldr	r3, [pc, #72]	; (4494 <prvTraceStoreKernelCallWithParam+0x148>)
    444a:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    444c:	4b0b      	ldr	r3, [pc, #44]	; (447c <prvTraceStoreKernelCallWithParam+0x130>)
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	1e5a      	subs	r2, r3, #1
    4452:	4b0a      	ldr	r3, [pc, #40]	; (447c <prvTraceStoreKernelCallWithParam+0x130>)
    4454:	601a      	str	r2, [r3, #0]
    4456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4458:	613b      	str	r3, [r7, #16]
    445a:	693b      	ldr	r3, [r7, #16]
    445c:	f383 8810 	msr	PRIMASK, r3
}
    4460:	46bd      	mov	sp, r7
    4462:	b00a      	add	sp, #40	; 0x28
    4464:	bd80      	pop	{r7, pc}
    4466:	46c0      	nop			; (mov r8, r8)
    4468:	0000fb74 	.word	0x0000fb74
    446c:	000050c5 	.word	0x000050c5
    4470:	0000fbb4 	.word	0x0000fbb4
    4474:	200003f8 	.word	0x200003f8
    4478:	0000fc04 	.word	0x0000fc04
    447c:	20000350 	.word	0x20000350
    4480:	0000fc54 	.word	0x0000fc54
    4484:	2000035c 	.word	0x2000035c
    4488:	000052cd 	.word	0x000052cd
    448c:	00004499 	.word	0x00004499
    4490:	00004c79 	.word	0x00004c79
    4494:	00005275 	.word	0x00005275

00004498 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
    4498:	b580      	push	{r7, lr}
    449a:	b084      	sub	sp, #16
    449c:	af00      	add	r7, sp, #0
    449e:	6078      	str	r0, [r7, #4]
    44a0:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	2bff      	cmp	r3, #255	; 0xff
    44a6:	d009      	beq.n	44bc <prvTraceGetParam+0x24>
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	4a19      	ldr	r2, [pc, #100]	; (4510 <prvTraceGetParam+0x78>)
    44ac:	4293      	cmp	r3, r2
    44ae:	d005      	beq.n	44bc <prvTraceGetParam+0x24>
    44b0:	4b18      	ldr	r3, [pc, #96]	; (4514 <prvTraceGetParam+0x7c>)
    44b2:	0018      	movs	r0, r3
    44b4:	4b18      	ldr	r3, [pc, #96]	; (4518 <prvTraceGetParam+0x80>)
    44b6:	4798      	blx	r3
    44b8:	683b      	ldr	r3, [r7, #0]
    44ba:	e024      	b.n	4506 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
    44bc:	683a      	ldr	r2, [r7, #0]
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	429a      	cmp	r2, r3
    44c2:	d801      	bhi.n	44c8 <prvTraceGetParam+0x30>
	{
		return param;
    44c4:	683b      	ldr	r3, [r7, #0]
    44c6:	e01e      	b.n	4506 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    44c8:	4b14      	ldr	r3, [pc, #80]	; (451c <prvTraceGetParam+0x84>)
    44ca:	4798      	blx	r3
    44cc:	0003      	movs	r3, r0
    44ce:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
    44d0:	68fb      	ldr	r3, [r7, #12]
    44d2:	2b00      	cmp	r3, #0
    44d4:	d014      	beq.n	4500 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
    44d6:	68fb      	ldr	r3, [r7, #12]
    44d8:	2201      	movs	r2, #1
    44da:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	43db      	mvns	r3, r3
    44e0:	683a      	ldr	r2, [r7, #0]
    44e2:	4013      	ands	r3, r2
    44e4:	0a1b      	lsrs	r3, r3, #8
    44e6:	b2da      	uxtb	r2, r3
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	43db      	mvns	r3, r3
    44f0:	683a      	ldr	r2, [r7, #0]
    44f2:	4013      	ands	r3, r2
    44f4:	0c1b      	lsrs	r3, r3, #16
    44f6:	b29a      	uxth	r2, r3
    44f8:	68fb      	ldr	r3, [r7, #12]
    44fa:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    44fc:	4b08      	ldr	r3, [pc, #32]	; (4520 <prvTraceGetParam+0x88>)
    44fe:	4798      	blx	r3
		}

		return param & param_max;
    4500:	683b      	ldr	r3, [r7, #0]
    4502:	687a      	ldr	r2, [r7, #4]
    4504:	4013      	ands	r3, r2
	}
}
    4506:	0018      	movs	r0, r3
    4508:	46bd      	mov	sp, r7
    450a:	b004      	add	sp, #16
    450c:	bd80      	pop	{r7, pc}
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	0000ffff 	.word	0x0000ffff
    4514:	0000fc8c 	.word	0x0000fc8c
    4518:	000050c5 	.word	0x000050c5
    451c:	00004c79 	.word	0x00004c79
    4520:	00005275 	.word	0x00005275

00004524 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
    4524:	b580      	push	{r7, lr}
    4526:	b08a      	sub	sp, #40	; 0x28
    4528:	af00      	add	r7, sp, #0
    452a:	6078      	str	r0, [r7, #4]
    452c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
    452e:	2326      	movs	r3, #38	; 0x26
    4530:	18fb      	adds	r3, r7, r3
    4532:	2200      	movs	r2, #0
    4534:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    4536:	687b      	ldr	r3, [r7, #4]
    4538:	2bfe      	cmp	r3, #254	; 0xfe
    453a:	d904      	bls.n	4546 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
    453c:	4b2d      	ldr	r3, [pc, #180]	; (45f4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
    453e:	0018      	movs	r0, r3
    4540:	4b2d      	ldr	r3, [pc, #180]	; (45f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    4542:	4798      	blx	r3
    4544:	e053      	b.n	45ee <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
    4546:	4b2d      	ldr	r3, [pc, #180]	; (45fc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    4548:	681b      	ldr	r3, [r3, #0]
    454a:	2b00      	cmp	r3, #0
    454c:	d004      	beq.n	4558 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    454e:	4b2c      	ldr	r3, [pc, #176]	; (4600 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
    4550:	0018      	movs	r0, r3
    4552:	4b29      	ldr	r3, [pc, #164]	; (45f8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
    4554:	4798      	blx	r3
		return;
    4556:	e04a      	b.n	45ee <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4558:	f3ef 8310 	mrs	r3, PRIMASK
    455c:	613b      	str	r3, [r7, #16]
  return(result);
    455e:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
    4560:	623b      	str	r3, [r7, #32]
    4562:	2301      	movs	r3, #1
    4564:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4566:	697b      	ldr	r3, [r7, #20]
    4568:	f383 8810 	msr	PRIMASK, r3
    456c:	4b23      	ldr	r3, [pc, #140]	; (45fc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	1c5a      	adds	r2, r3, #1
    4572:	4b22      	ldr	r3, [pc, #136]	; (45fc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    4574:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    4576:	4b23      	ldr	r3, [pc, #140]	; (4604 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    457c:	2b00      	cmp	r3, #0
    457e:	d02c      	beq.n	45da <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
    4580:	4b21      	ldr	r3, [pc, #132]	; (4608 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	2b00      	cmp	r3, #0
    4586:	d028      	beq.n	45da <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    4588:	20ff      	movs	r0, #255	; 0xff
    458a:	4b20      	ldr	r3, [pc, #128]	; (460c <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
    458c:	4798      	blx	r3
    458e:	0003      	movs	r3, r0
    4590:	001a      	movs	r2, r3
    4592:	231f      	movs	r3, #31
    4594:	18fb      	adds	r3, r7, r3
    4596:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    4598:	683b      	ldr	r3, [r7, #0]
    459a:	4a1d      	ldr	r2, [pc, #116]	; (4610 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
    459c:	0019      	movs	r1, r3
    459e:	0010      	movs	r0, r2
    45a0:	4b1c      	ldr	r3, [pc, #112]	; (4614 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
    45a2:	4798      	blx	r3
    45a4:	0002      	movs	r2, r0
    45a6:	2326      	movs	r3, #38	; 0x26
    45a8:	18fb      	adds	r3, r7, r3
    45aa:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    45ac:	4b1a      	ldr	r3, [pc, #104]	; (4618 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
    45ae:	4798      	blx	r3
    45b0:	0003      	movs	r3, r0
    45b2:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
    45b4:	69bb      	ldr	r3, [r7, #24]
    45b6:	2b00      	cmp	r3, #0
    45b8:	d00f      	beq.n	45da <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
    45ba:	69bb      	ldr	r3, [r7, #24]
    45bc:	221f      	movs	r2, #31
    45be:	18ba      	adds	r2, r7, r2
    45c0:	7812      	ldrb	r2, [r2, #0]
    45c2:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	b2da      	uxtb	r2, r3
    45c8:	69bb      	ldr	r3, [r7, #24]
    45ca:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
    45cc:	69bb      	ldr	r3, [r7, #24]
    45ce:	2226      	movs	r2, #38	; 0x26
    45d0:	18ba      	adds	r2, r7, r2
    45d2:	8812      	ldrh	r2, [r2, #0]
    45d4:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
    45d6:	4b11      	ldr	r3, [pc, #68]	; (461c <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
    45d8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
    45da:	4b08      	ldr	r3, [pc, #32]	; (45fc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    45dc:	681b      	ldr	r3, [r3, #0]
    45de:	1e5a      	subs	r2, r3, #1
    45e0:	4b06      	ldr	r3, [pc, #24]	; (45fc <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
    45e2:	601a      	str	r2, [r3, #0]
    45e4:	6a3b      	ldr	r3, [r7, #32]
    45e6:	60fb      	str	r3, [r7, #12]
    45e8:	68fb      	ldr	r3, [r7, #12]
    45ea:	f383 8810 	msr	PRIMASK, r3
}
    45ee:	46bd      	mov	sp, r7
    45f0:	b00a      	add	sp, #40	; 0x28
    45f2:	bd80      	pop	{r7, pc}
    45f4:	0000fcc8 	.word	0x0000fcc8
    45f8:	000050c5 	.word	0x000050c5
    45fc:	20000350 	.word	0x20000350
    4600:	0000fd20 	.word	0x0000fd20
    4604:	200003f8 	.word	0x200003f8
    4608:	2000035c 	.word	0x2000035c
    460c:	000052cd 	.word	0x000052cd
    4610:	0000ffff 	.word	0x0000ffff
    4614:	00004499 	.word	0x00004499
    4618:	00004c79 	.word	0x00004c79
    461c:	00005275 	.word	0x00005275

00004620 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
    4620:	b590      	push	{r4, r7, lr}
    4622:	b089      	sub	sp, #36	; 0x24
    4624:	af00      	add	r7, sp, #0
    4626:	0002      	movs	r2, r0
    4628:	1dfb      	adds	r3, r7, #7
    462a:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    462c:	1dfb      	adds	r3, r7, #7
    462e:	781b      	ldrb	r3, [r3, #0]
    4630:	2b0f      	cmp	r3, #15
    4632:	d904      	bls.n	463e <prvTraceStoreTaskswitch+0x1e>
    4634:	4b34      	ldr	r3, [pc, #208]	; (4708 <prvTraceStoreTaskswitch+0xe8>)
    4636:	0018      	movs	r0, r3
    4638:	4b34      	ldr	r3, [pc, #208]	; (470c <prvTraceStoreTaskswitch+0xec>)
    463a:	4798      	blx	r3
    463c:	e061      	b.n	4702 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    463e:	f3ef 8310 	mrs	r3, PRIMASK
    4642:	60fb      	str	r3, [r7, #12]
  return(result);
    4644:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    4646:	61fb      	str	r3, [r7, #28]
    4648:	2301      	movs	r3, #1
    464a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    464c:	693b      	ldr	r3, [r7, #16]
    464e:	f383 8810 	msr	PRIMASK, r3
    4652:	4b2f      	ldr	r3, [pc, #188]	; (4710 <prvTraceStoreTaskswitch+0xf0>)
    4654:	681b      	ldr	r3, [r3, #0]
    4656:	1c5a      	adds	r2, r3, #1
    4658:	4b2d      	ldr	r3, [pc, #180]	; (4710 <prvTraceStoreTaskswitch+0xf0>)
    465a:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    465c:	4b2d      	ldr	r3, [pc, #180]	; (4714 <prvTraceStoreTaskswitch+0xf4>)
    465e:	781b      	ldrb	r3, [r3, #0]
    4660:	1dfa      	adds	r2, r7, #7
    4662:	7812      	ldrb	r2, [r2, #0]
    4664:	429a      	cmp	r2, r3
    4666:	d042      	beq.n	46ee <prvTraceStoreTaskswitch+0xce>
    4668:	4b2b      	ldr	r3, [pc, #172]	; (4718 <prvTraceStoreTaskswitch+0xf8>)
    466a:	681b      	ldr	r3, [r3, #0]
    466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    466e:	2b00      	cmp	r3, #0
    4670:	d03d      	beq.n	46ee <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
    4672:	4b2a      	ldr	r3, [pc, #168]	; (471c <prvTraceStoreTaskswitch+0xfc>)
    4674:	2200      	movs	r2, #0
    4676:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    4678:	231a      	movs	r3, #26
    467a:	18fc      	adds	r4, r7, r3
    467c:	4b28      	ldr	r3, [pc, #160]	; (4720 <prvTraceStoreTaskswitch+0x100>)
    467e:	0018      	movs	r0, r3
    4680:	4b28      	ldr	r3, [pc, #160]	; (4724 <prvTraceStoreTaskswitch+0x104>)
    4682:	4798      	blx	r3
    4684:	0003      	movs	r3, r0
    4686:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
    4688:	4b22      	ldr	r3, [pc, #136]	; (4714 <prvTraceStoreTaskswitch+0xf4>)
    468a:	1dfa      	adds	r2, r7, #7
    468c:	7812      	ldrb	r2, [r2, #0]
    468e:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
    4690:	2319      	movs	r3, #25
    4692:	18fb      	adds	r3, r7, r3
    4694:	4a1f      	ldr	r2, [pc, #124]	; (4714 <prvTraceStoreTaskswitch+0xf4>)
    4696:	7812      	ldrb	r2, [r2, #0]
    4698:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    469a:	4b23      	ldr	r3, [pc, #140]	; (4728 <prvTraceStoreTaskswitch+0x108>)
    469c:	4798      	blx	r3
    469e:	0003      	movs	r3, r0
    46a0:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
    46a2:	697b      	ldr	r3, [r7, #20]
    46a4:	2b00      	cmp	r3, #0
    46a6:	d022      	beq.n	46ee <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    46a8:	4b1a      	ldr	r3, [pc, #104]	; (4714 <prvTraceStoreTaskswitch+0xf4>)
    46aa:	781b      	ldrb	r3, [r3, #0]
    46ac:	0019      	movs	r1, r3
    46ae:	2003      	movs	r0, #3
    46b0:	4b1e      	ldr	r3, [pc, #120]	; (472c <prvTraceStoreTaskswitch+0x10c>)
    46b2:	4798      	blx	r3
    46b4:	0003      	movs	r3, r0
    46b6:	2b01      	cmp	r3, #1
    46b8:	d103      	bne.n	46c2 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
    46ba:	697b      	ldr	r3, [r7, #20]
    46bc:	2207      	movs	r2, #7
    46be:	701a      	strb	r2, [r3, #0]
    46c0:	e002      	b.n	46c8 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
    46c2:	697b      	ldr	r3, [r7, #20]
    46c4:	2206      	movs	r2, #6
    46c6:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
    46c8:	697b      	ldr	r3, [r7, #20]
    46ca:	221a      	movs	r2, #26
    46cc:	18ba      	adds	r2, r7, r2
    46ce:	8812      	ldrh	r2, [r2, #0]
    46d0:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
    46d2:	697b      	ldr	r3, [r7, #20]
    46d4:	2219      	movs	r2, #25
    46d6:	18ba      	adds	r2, r7, r2
    46d8:	7812      	ldrb	r2, [r2, #0]
    46da:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
    46dc:	4b0d      	ldr	r3, [pc, #52]	; (4714 <prvTraceStoreTaskswitch+0xf4>)
    46de:	781b      	ldrb	r3, [r3, #0]
    46e0:	2201      	movs	r2, #1
    46e2:	0019      	movs	r1, r3
    46e4:	2003      	movs	r0, #3
    46e6:	4b12      	ldr	r3, [pc, #72]	; (4730 <prvTraceStoreTaskswitch+0x110>)
    46e8:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
    46ea:	4b12      	ldr	r3, [pc, #72]	; (4734 <prvTraceStoreTaskswitch+0x114>)
    46ec:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    46ee:	4b08      	ldr	r3, [pc, #32]	; (4710 <prvTraceStoreTaskswitch+0xf0>)
    46f0:	681b      	ldr	r3, [r3, #0]
    46f2:	1e5a      	subs	r2, r3, #1
    46f4:	4b06      	ldr	r3, [pc, #24]	; (4710 <prvTraceStoreTaskswitch+0xf0>)
    46f6:	601a      	str	r2, [r3, #0]
    46f8:	69fb      	ldr	r3, [r7, #28]
    46fa:	60bb      	str	r3, [r7, #8]
    46fc:	68bb      	ldr	r3, [r7, #8]
    46fe:	f383 8810 	msr	PRIMASK, r3
}
    4702:	46bd      	mov	sp, r7
    4704:	b009      	add	sp, #36	; 0x24
    4706:	bd90      	pop	{r4, r7, pc}
    4708:	0000fd58 	.word	0x0000fd58
    470c:	000050c5 	.word	0x000050c5
    4710:	20000350 	.word	0x20000350
    4714:	2000035c 	.word	0x2000035c
    4718:	200003f8 	.word	0x200003f8
    471c:	2000033c 	.word	0x2000033c
    4720:	0000ffff 	.word	0x0000ffff
    4724:	000052cd 	.word	0x000052cd
    4728:	00004c79 	.word	0x00004c79
    472c:	0000491d 	.word	0x0000491d
    4730:	00004879 	.word	0x00004879
    4734:	00005275 	.word	0x00005275

00004738 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
    4738:	b590      	push	{r4, r7, lr}
    473a:	b083      	sub	sp, #12
    473c:	af00      	add	r7, sp, #0
    473e:	0004      	movs	r4, r0
    4740:	0008      	movs	r0, r1
    4742:	0011      	movs	r1, r2
    4744:	1dfb      	adds	r3, r7, #7
    4746:	1c22      	adds	r2, r4, #0
    4748:	701a      	strb	r2, [r3, #0]
    474a:	1dbb      	adds	r3, r7, #6
    474c:	1c02      	adds	r2, r0, #0
    474e:	701a      	strb	r2, [r3, #0]
    4750:	1d7b      	adds	r3, r7, #5
    4752:	1c0a      	adds	r2, r1, #0
    4754:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    4756:	1dfb      	adds	r3, r7, #7
    4758:	781b      	ldrb	r3, [r3, #0]
    475a:	2b08      	cmp	r3, #8
    475c:	d904      	bls.n	4768 <prvTraceSetPriorityProperty+0x30>
    475e:	4b1a      	ldr	r3, [pc, #104]	; (47c8 <prvTraceSetPriorityProperty+0x90>)
    4760:	0018      	movs	r0, r3
    4762:	4b1a      	ldr	r3, [pc, #104]	; (47cc <prvTraceSetPriorityProperty+0x94>)
    4764:	4798      	blx	r3
    4766:	e02c      	b.n	47c2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4768:	4b19      	ldr	r3, [pc, #100]	; (47d0 <prvTraceSetPriorityProperty+0x98>)
    476a:	681a      	ldr	r2, [r3, #0]
    476c:	1dfb      	adds	r3, r7, #7
    476e:	781b      	ldrb	r3, [r3, #0]
    4770:	2164      	movs	r1, #100	; 0x64
    4772:	18d3      	adds	r3, r2, r3
    4774:	185b      	adds	r3, r3, r1
    4776:	781b      	ldrb	r3, [r3, #0]
    4778:	1dba      	adds	r2, r7, #6
    477a:	7812      	ldrb	r2, [r2, #0]
    477c:	429a      	cmp	r2, r3
    477e:	d904      	bls.n	478a <prvTraceSetPriorityProperty+0x52>
    4780:	4b14      	ldr	r3, [pc, #80]	; (47d4 <prvTraceSetPriorityProperty+0x9c>)
    4782:	0018      	movs	r0, r3
    4784:	4b11      	ldr	r3, [pc, #68]	; (47cc <prvTraceSetPriorityProperty+0x94>)
    4786:	4798      	blx	r3
    4788:	e01b      	b.n	47c2 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    478a:	4b11      	ldr	r3, [pc, #68]	; (47d0 <prvTraceSetPriorityProperty+0x98>)
    478c:	681c      	ldr	r4, [r3, #0]
    478e:	1dfb      	adds	r3, r7, #7
    4790:	781a      	ldrb	r2, [r3, #0]
    4792:	1dbb      	adds	r3, r7, #6
    4794:	781b      	ldrb	r3, [r3, #0]
    4796:	0011      	movs	r1, r2
    4798:	0018      	movs	r0, r3
    479a:	4b0f      	ldr	r3, [pc, #60]	; (47d8 <prvTraceSetPriorityProperty+0xa0>)
    479c:	4798      	blx	r3
    479e:	0003      	movs	r3, r0
    47a0:	0018      	movs	r0, r3
    47a2:	4b0b      	ldr	r3, [pc, #44]	; (47d0 <prvTraceSetPriorityProperty+0x98>)
    47a4:	681a      	ldr	r2, [r3, #0]
    47a6:	1dfb      	adds	r3, r7, #7
    47a8:	781b      	ldrb	r3, [r3, #0]
    47aa:	2170      	movs	r1, #112	; 0x70
    47ac:	18d3      	adds	r3, r2, r3
    47ae:	185b      	adds	r3, r3, r1
    47b0:	781b      	ldrb	r3, [r3, #0]
    47b2:	18c3      	adds	r3, r0, r3
    47b4:	3301      	adds	r3, #1
    47b6:	229c      	movs	r2, #156	; 0x9c
    47b8:	18e3      	adds	r3, r4, r3
    47ba:	189b      	adds	r3, r3, r2
    47bc:	1d7a      	adds	r2, r7, #5
    47be:	7812      	ldrb	r2, [r2, #0]
    47c0:	701a      	strb	r2, [r3, #0]
}
    47c2:	46bd      	mov	sp, r7
    47c4:	b003      	add	sp, #12
    47c6:	bd90      	pop	{r4, r7, pc}
    47c8:	0000feec 	.word	0x0000feec
    47cc:	000050c5 	.word	0x000050c5
    47d0:	200003f8 	.word	0x200003f8
    47d4:	0000ff38 	.word	0x0000ff38
    47d8:	00004cd1 	.word	0x00004cd1

000047dc <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
    47dc:	b590      	push	{r4, r7, lr}
    47de:	b083      	sub	sp, #12
    47e0:	af00      	add	r7, sp, #0
    47e2:	0002      	movs	r2, r0
    47e4:	1dfb      	adds	r3, r7, #7
    47e6:	701a      	strb	r2, [r3, #0]
    47e8:	1dbb      	adds	r3, r7, #6
    47ea:	1c0a      	adds	r2, r1, #0
    47ec:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    47ee:	1dfb      	adds	r3, r7, #7
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	2b08      	cmp	r3, #8
    47f4:	d905      	bls.n	4802 <prvTraceGetPriorityProperty+0x26>
    47f6:	4b1b      	ldr	r3, [pc, #108]	; (4864 <prvTraceGetPriorityProperty+0x88>)
    47f8:	0018      	movs	r0, r3
    47fa:	4b1b      	ldr	r3, [pc, #108]	; (4868 <prvTraceGetPriorityProperty+0x8c>)
    47fc:	4798      	blx	r3
    47fe:	2300      	movs	r3, #0
    4800:	e02b      	b.n	485a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4802:	4b1a      	ldr	r3, [pc, #104]	; (486c <prvTraceGetPriorityProperty+0x90>)
    4804:	681a      	ldr	r2, [r3, #0]
    4806:	1dfb      	adds	r3, r7, #7
    4808:	781b      	ldrb	r3, [r3, #0]
    480a:	2164      	movs	r1, #100	; 0x64
    480c:	18d3      	adds	r3, r2, r3
    480e:	185b      	adds	r3, r3, r1
    4810:	781b      	ldrb	r3, [r3, #0]
    4812:	1dba      	adds	r2, r7, #6
    4814:	7812      	ldrb	r2, [r2, #0]
    4816:	429a      	cmp	r2, r3
    4818:	d905      	bls.n	4826 <prvTraceGetPriorityProperty+0x4a>
    481a:	4b15      	ldr	r3, [pc, #84]	; (4870 <prvTraceGetPriorityProperty+0x94>)
    481c:	0018      	movs	r0, r3
    481e:	4b12      	ldr	r3, [pc, #72]	; (4868 <prvTraceGetPriorityProperty+0x8c>)
    4820:	4798      	blx	r3
    4822:	2300      	movs	r3, #0
    4824:	e019      	b.n	485a <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    4826:	4b11      	ldr	r3, [pc, #68]	; (486c <prvTraceGetPriorityProperty+0x90>)
    4828:	681c      	ldr	r4, [r3, #0]
    482a:	1dfb      	adds	r3, r7, #7
    482c:	781a      	ldrb	r2, [r3, #0]
    482e:	1dbb      	adds	r3, r7, #6
    4830:	781b      	ldrb	r3, [r3, #0]
    4832:	0011      	movs	r1, r2
    4834:	0018      	movs	r0, r3
    4836:	4b0f      	ldr	r3, [pc, #60]	; (4874 <prvTraceGetPriorityProperty+0x98>)
    4838:	4798      	blx	r3
    483a:	0003      	movs	r3, r0
    483c:	0018      	movs	r0, r3
    483e:	4b0b      	ldr	r3, [pc, #44]	; (486c <prvTraceGetPriorityProperty+0x90>)
    4840:	681a      	ldr	r2, [r3, #0]
    4842:	1dfb      	adds	r3, r7, #7
    4844:	781b      	ldrb	r3, [r3, #0]
    4846:	2170      	movs	r1, #112	; 0x70
    4848:	18d3      	adds	r3, r2, r3
    484a:	185b      	adds	r3, r3, r1
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	18c3      	adds	r3, r0, r3
    4850:	3301      	adds	r3, #1
    4852:	229c      	movs	r2, #156	; 0x9c
    4854:	18e3      	adds	r3, r4, r3
    4856:	189b      	adds	r3, r3, r2
    4858:	781b      	ldrb	r3, [r3, #0]
}
    485a:	0018      	movs	r0, r3
    485c:	46bd      	mov	sp, r7
    485e:	b003      	add	sp, #12
    4860:	bd90      	pop	{r4, r7, pc}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	0000ff78 	.word	0x0000ff78
    4868:	000050c5 	.word	0x000050c5
    486c:	200003f8 	.word	0x200003f8
    4870:	0000ffc4 	.word	0x0000ffc4
    4874:	00004cd1 	.word	0x00004cd1

00004878 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
    4878:	b590      	push	{r4, r7, lr}
    487a:	b083      	sub	sp, #12
    487c:	af00      	add	r7, sp, #0
    487e:	0004      	movs	r4, r0
    4880:	0008      	movs	r0, r1
    4882:	0011      	movs	r1, r2
    4884:	1dfb      	adds	r3, r7, #7
    4886:	1c22      	adds	r2, r4, #0
    4888:	701a      	strb	r2, [r3, #0]
    488a:	1dbb      	adds	r3, r7, #6
    488c:	1c02      	adds	r2, r0, #0
    488e:	701a      	strb	r2, [r3, #0]
    4890:	1d7b      	adds	r3, r7, #5
    4892:	1c0a      	adds	r2, r1, #0
    4894:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    4896:	1dfb      	adds	r3, r7, #7
    4898:	781b      	ldrb	r3, [r3, #0]
    489a:	2b08      	cmp	r3, #8
    489c:	d904      	bls.n	48a8 <prvTraceSetObjectState+0x30>
    489e:	4b1a      	ldr	r3, [pc, #104]	; (4908 <prvTraceSetObjectState+0x90>)
    48a0:	0018      	movs	r0, r3
    48a2:	4b1a      	ldr	r3, [pc, #104]	; (490c <prvTraceSetObjectState+0x94>)
    48a4:	4798      	blx	r3
    48a6:	e02b      	b.n	4900 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    48a8:	4b19      	ldr	r3, [pc, #100]	; (4910 <prvTraceSetObjectState+0x98>)
    48aa:	681a      	ldr	r2, [r3, #0]
    48ac:	1dfb      	adds	r3, r7, #7
    48ae:	781b      	ldrb	r3, [r3, #0]
    48b0:	2164      	movs	r1, #100	; 0x64
    48b2:	18d3      	adds	r3, r2, r3
    48b4:	185b      	adds	r3, r3, r1
    48b6:	781b      	ldrb	r3, [r3, #0]
    48b8:	1dba      	adds	r2, r7, #6
    48ba:	7812      	ldrb	r2, [r2, #0]
    48bc:	429a      	cmp	r2, r3
    48be:	d904      	bls.n	48ca <prvTraceSetObjectState+0x52>
    48c0:	4b14      	ldr	r3, [pc, #80]	; (4914 <prvTraceSetObjectState+0x9c>)
    48c2:	0018      	movs	r0, r3
    48c4:	4b11      	ldr	r3, [pc, #68]	; (490c <prvTraceSetObjectState+0x94>)
    48c6:	4798      	blx	r3
    48c8:	e01a      	b.n	4900 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    48ca:	4b11      	ldr	r3, [pc, #68]	; (4910 <prvTraceSetObjectState+0x98>)
    48cc:	681c      	ldr	r4, [r3, #0]
    48ce:	1dfb      	adds	r3, r7, #7
    48d0:	781a      	ldrb	r2, [r3, #0]
    48d2:	1dbb      	adds	r3, r7, #6
    48d4:	781b      	ldrb	r3, [r3, #0]
    48d6:	0011      	movs	r1, r2
    48d8:	0018      	movs	r0, r3
    48da:	4b0f      	ldr	r3, [pc, #60]	; (4918 <prvTraceSetObjectState+0xa0>)
    48dc:	4798      	blx	r3
    48de:	0003      	movs	r3, r0
    48e0:	0018      	movs	r0, r3
    48e2:	4b0b      	ldr	r3, [pc, #44]	; (4910 <prvTraceSetObjectState+0x98>)
    48e4:	681a      	ldr	r2, [r3, #0]
    48e6:	1dfb      	adds	r3, r7, #7
    48e8:	781b      	ldrb	r3, [r3, #0]
    48ea:	2170      	movs	r1, #112	; 0x70
    48ec:	18d3      	adds	r3, r2, r3
    48ee:	185b      	adds	r3, r3, r1
    48f0:	781b      	ldrb	r3, [r3, #0]
    48f2:	18c3      	adds	r3, r0, r3
    48f4:	229c      	movs	r2, #156	; 0x9c
    48f6:	18e3      	adds	r3, r4, r3
    48f8:	189b      	adds	r3, r3, r2
    48fa:	1d7a      	adds	r2, r7, #5
    48fc:	7812      	ldrb	r2, [r2, #0]
    48fe:	701a      	strb	r2, [r3, #0]
}
    4900:	46bd      	mov	sp, r7
    4902:	b003      	add	sp, #12
    4904:	bd90      	pop	{r4, r7, pc}
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	00010004 	.word	0x00010004
    490c:	000050c5 	.word	0x000050c5
    4910:	200003f8 	.word	0x200003f8
    4914:	00010048 	.word	0x00010048
    4918:	00004cd1 	.word	0x00004cd1

0000491c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
    491c:	b590      	push	{r4, r7, lr}
    491e:	b083      	sub	sp, #12
    4920:	af00      	add	r7, sp, #0
    4922:	0002      	movs	r2, r0
    4924:	1dfb      	adds	r3, r7, #7
    4926:	701a      	strb	r2, [r3, #0]
    4928:	1dbb      	adds	r3, r7, #6
    492a:	1c0a      	adds	r2, r1, #0
    492c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    492e:	1dfb      	adds	r3, r7, #7
    4930:	781b      	ldrb	r3, [r3, #0]
    4932:	2b08      	cmp	r3, #8
    4934:	d905      	bls.n	4942 <prvTraceGetObjectState+0x26>
    4936:	4b1a      	ldr	r3, [pc, #104]	; (49a0 <prvTraceGetObjectState+0x84>)
    4938:	0018      	movs	r0, r3
    493a:	4b1a      	ldr	r3, [pc, #104]	; (49a4 <prvTraceGetObjectState+0x88>)
    493c:	4798      	blx	r3
    493e:	2300      	movs	r3, #0
    4940:	e02a      	b.n	4998 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    4942:	4b19      	ldr	r3, [pc, #100]	; (49a8 <prvTraceGetObjectState+0x8c>)
    4944:	681a      	ldr	r2, [r3, #0]
    4946:	1dfb      	adds	r3, r7, #7
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	2164      	movs	r1, #100	; 0x64
    494c:	18d3      	adds	r3, r2, r3
    494e:	185b      	adds	r3, r3, r1
    4950:	781b      	ldrb	r3, [r3, #0]
    4952:	1dba      	adds	r2, r7, #6
    4954:	7812      	ldrb	r2, [r2, #0]
    4956:	429a      	cmp	r2, r3
    4958:	d905      	bls.n	4966 <prvTraceGetObjectState+0x4a>
    495a:	4b14      	ldr	r3, [pc, #80]	; (49ac <prvTraceGetObjectState+0x90>)
    495c:	0018      	movs	r0, r3
    495e:	4b11      	ldr	r3, [pc, #68]	; (49a4 <prvTraceGetObjectState+0x88>)
    4960:	4798      	blx	r3
    4962:	2300      	movs	r3, #0
    4964:	e018      	b.n	4998 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    4966:	4b10      	ldr	r3, [pc, #64]	; (49a8 <prvTraceGetObjectState+0x8c>)
    4968:	681c      	ldr	r4, [r3, #0]
    496a:	1dfb      	adds	r3, r7, #7
    496c:	781a      	ldrb	r2, [r3, #0]
    496e:	1dbb      	adds	r3, r7, #6
    4970:	781b      	ldrb	r3, [r3, #0]
    4972:	0011      	movs	r1, r2
    4974:	0018      	movs	r0, r3
    4976:	4b0e      	ldr	r3, [pc, #56]	; (49b0 <prvTraceGetObjectState+0x94>)
    4978:	4798      	blx	r3
    497a:	0003      	movs	r3, r0
    497c:	0018      	movs	r0, r3
    497e:	4b0a      	ldr	r3, [pc, #40]	; (49a8 <prvTraceGetObjectState+0x8c>)
    4980:	681a      	ldr	r2, [r3, #0]
    4982:	1dfb      	adds	r3, r7, #7
    4984:	781b      	ldrb	r3, [r3, #0]
    4986:	2170      	movs	r1, #112	; 0x70
    4988:	18d3      	adds	r3, r2, r3
    498a:	185b      	adds	r3, r3, r1
    498c:	781b      	ldrb	r3, [r3, #0]
    498e:	18c3      	adds	r3, r0, r3
    4990:	229c      	movs	r2, #156	; 0x9c
    4992:	18e3      	adds	r3, r4, r3
    4994:	189b      	adds	r3, r3, r2
    4996:	781b      	ldrb	r3, [r3, #0]
}
    4998:	0018      	movs	r0, r3
    499a:	46bd      	mov	sp, r7
    499c:	b003      	add	sp, #12
    499e:	bd90      	pop	{r4, r7, pc}
    49a0:	00010084 	.word	0x00010084
    49a4:	000050c5 	.word	0x000050c5
    49a8:	200003f8 	.word	0x200003f8
    49ac:	000100c8 	.word	0x000100c8
    49b0:	00004cd1 	.word	0x00004cd1

000049b4 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
    49b4:	b590      	push	{r4, r7, lr}
    49b6:	b083      	sub	sp, #12
    49b8:	af00      	add	r7, sp, #0
    49ba:	0002      	movs	r2, r0
    49bc:	1dfb      	adds	r3, r7, #7
    49be:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    49c0:	4b11      	ldr	r3, [pc, #68]	; (4a08 <prvTraceSetTaskInstanceFinished+0x54>)
    49c2:	681b      	ldr	r3, [r3, #0]
    49c4:	2267      	movs	r2, #103	; 0x67
    49c6:	5c9b      	ldrb	r3, [r3, r2]
    49c8:	1dfa      	adds	r2, r7, #7
    49ca:	7812      	ldrb	r2, [r2, #0]
    49cc:	429a      	cmp	r2, r3
    49ce:	d904      	bls.n	49da <prvTraceSetTaskInstanceFinished+0x26>
    49d0:	4b0e      	ldr	r3, [pc, #56]	; (4a0c <prvTraceSetTaskInstanceFinished+0x58>)
    49d2:	0018      	movs	r0, r3
    49d4:	4b0e      	ldr	r3, [pc, #56]	; (4a10 <prvTraceSetTaskInstanceFinished+0x5c>)
    49d6:	4798      	blx	r3
    49d8:	e013      	b.n	4a02 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    49da:	4b0b      	ldr	r3, [pc, #44]	; (4a08 <prvTraceSetTaskInstanceFinished+0x54>)
    49dc:	681c      	ldr	r4, [r3, #0]
    49de:	1dfb      	adds	r3, r7, #7
    49e0:	781b      	ldrb	r3, [r3, #0]
    49e2:	2103      	movs	r1, #3
    49e4:	0018      	movs	r0, r3
    49e6:	4b0b      	ldr	r3, [pc, #44]	; (4a14 <prvTraceSetTaskInstanceFinished+0x60>)
    49e8:	4798      	blx	r3
    49ea:	0003      	movs	r3, r0
    49ec:	0019      	movs	r1, r3
    49ee:	4b06      	ldr	r3, [pc, #24]	; (4a08 <prvTraceSetTaskInstanceFinished+0x54>)
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	2273      	movs	r2, #115	; 0x73
    49f4:	5c9b      	ldrb	r3, [r3, r2]
    49f6:	18cb      	adds	r3, r1, r3
    49f8:	229c      	movs	r2, #156	; 0x9c
    49fa:	18e3      	adds	r3, r4, r3
    49fc:	189b      	adds	r3, r3, r2
    49fe:	2200      	movs	r2, #0
    4a00:	701a      	strb	r2, [r3, #0]
#endif
}
    4a02:	46bd      	mov	sp, r7
    4a04:	b003      	add	sp, #12
    4a06:	bd90      	pop	{r4, r7, pc}
    4a08:	200003f8 	.word	0x200003f8
    4a0c:	00010104 	.word	0x00010104
    4a10:	000050c5 	.word	0x000050c5
    4a14:	00004cd1 	.word	0x00004cd1

00004a18 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
    4a18:	b580      	push	{r7, lr}
    4a1a:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
    4a1c:	4b75      	ldr	r3, [pc, #468]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a1e:	681b      	ldr	r3, [r3, #0]
    4a20:	2b00      	cmp	r3, #0
    4a22:	d103      	bne.n	4a2c <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
    4a24:	4b73      	ldr	r3, [pc, #460]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a26:	4a74      	ldr	r2, [pc, #464]	; (4bf8 <prvTraceInitTraceData+0x1e0>)
    4a28:	601a      	str	r2, [r3, #0]
    4a2a:	e006      	b.n	4a3a <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
    4a2c:	4b71      	ldr	r3, [pc, #452]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	781b      	ldrb	r3, [r3, #0]
    4a32:	b2db      	uxtb	r3, r3
    4a34:	2b01      	cmp	r3, #1
    4a36:	d100      	bne.n	4a3a <prvTraceInitTraceData+0x22>
    4a38:	e0d8      	b.n	4bec <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
    4a3a:	4b70      	ldr	r3, [pc, #448]	; (4bfc <prvTraceInitTraceData+0x1e4>)
    4a3c:	681a      	ldr	r2, [r3, #0]
    4a3e:	4b70      	ldr	r3, [pc, #448]	; (4c00 <prvTraceInitTraceData+0x1e8>)
    4a40:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    4a42:	4b6c      	ldr	r3, [pc, #432]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a44:	681b      	ldr	r3, [r3, #0]
    4a46:	4a6f      	ldr	r2, [pc, #444]	; (4c04 <prvTraceInitTraceData+0x1ec>)
    4a48:	2100      	movs	r1, #0
    4a4a:	0018      	movs	r0, r3
    4a4c:	4b6e      	ldr	r3, [pc, #440]	; (4c08 <prvTraceInitTraceData+0x1f0>)
    4a4e:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    4a50:	4b68      	ldr	r3, [pc, #416]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a52:	681b      	ldr	r3, [r3, #0]
    4a54:	4a6d      	ldr	r2, [pc, #436]	; (4c0c <prvTraceInitTraceData+0x1f4>)
    4a56:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    4a58:	4b66      	ldr	r3, [pc, #408]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a5a:	681b      	ldr	r3, [r3, #0]
    4a5c:	2205      	movs	r2, #5
    4a5e:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    4a60:	4b64      	ldr	r3, [pc, #400]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a62:	681b      	ldr	r3, [r3, #0]
    4a64:	2200      	movs	r2, #0
    4a66:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    4a68:	4b62      	ldr	r3, [pc, #392]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a6a:	681b      	ldr	r3, [r3, #0]
    4a6c:	4a65      	ldr	r2, [pc, #404]	; (4c04 <prvTraceInitTraceData+0x1ec>)
    4a6e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    4a70:	4b60      	ldr	r3, [pc, #384]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a72:	681b      	ldr	r3, [r3, #0]
    4a74:	22c8      	movs	r2, #200	; 0xc8
    4a76:	0052      	lsls	r2, r2, #1
    4a78:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    4a7a:	4b5e      	ldr	r3, [pc, #376]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a7c:	681b      	ldr	r3, [r3, #0]
    4a7e:	4a64      	ldr	r2, [pc, #400]	; (4c10 <prvTraceInitTraceData+0x1f8>)
    4a80:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    4a82:	4b5c      	ldr	r3, [pc, #368]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	2200      	movs	r2, #0
    4a88:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    4a8a:	4b5a      	ldr	r3, [pc, #360]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	2200      	movs	r2, #0
    4a90:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
    4a92:	4b60      	ldr	r3, [pc, #384]	; (4c14 <prvTraceInitTraceData+0x1fc>)
    4a94:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    4a96:	4b57      	ldr	r3, [pc, #348]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4a98:	681b      	ldr	r3, [r3, #0]
    4a9a:	4a5f      	ldr	r2, [pc, #380]	; (4c18 <prvTraceInitTraceData+0x200>)
    4a9c:	495f      	ldr	r1, [pc, #380]	; (4c1c <prvTraceInitTraceData+0x204>)
    4a9e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    4aa0:	4b54      	ldr	r3, [pc, #336]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4aa2:	681a      	ldr	r2, [r3, #0]
    4aa4:	23ac      	movs	r3, #172	; 0xac
    4aa6:	00db      	lsls	r3, r3, #3
    4aa8:	21c8      	movs	r1, #200	; 0xc8
    4aaa:	0089      	lsls	r1, r1, #2
    4aac:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    4aae:	4b51      	ldr	r3, [pc, #324]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4ab0:	681b      	ldr	r3, [r3, #0]
    4ab2:	4a5b      	ldr	r2, [pc, #364]	; (4c20 <prvTraceInitTraceData+0x208>)
    4ab4:	2101      	movs	r1, #1
    4ab6:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    4ab8:	4b4e      	ldr	r3, [pc, #312]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4aba:	681a      	ldr	r2, [r3, #0]
    4abc:	2391      	movs	r3, #145	; 0x91
    4abe:	011b      	lsls	r3, r3, #4
    4ac0:	4958      	ldr	r1, [pc, #352]	; (4c24 <prvTraceInitTraceData+0x20c>)
    4ac2:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    4ac4:	4b4b      	ldr	r3, [pc, #300]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4ac6:	681b      	ldr	r3, [r3, #0]
    4ac8:	4a57      	ldr	r2, [pc, #348]	; (4c28 <prvTraceInitTraceData+0x210>)
    4aca:	4694      	mov	ip, r2
    4acc:	4463      	add	r3, ip
    4ace:	4957      	ldr	r1, [pc, #348]	; (4c2c <prvTraceInitTraceData+0x214>)
    4ad0:	2250      	movs	r2, #80	; 0x50
    4ad2:	0018      	movs	r0, r3
    4ad4:	4b56      	ldr	r3, [pc, #344]	; (4c30 <prvTraceInitTraceData+0x218>)
    4ad6:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    4ad8:	4b46      	ldr	r3, [pc, #280]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4ada:	681b      	ldr	r3, [r3, #0]
    4adc:	4a55      	ldr	r2, [pc, #340]	; (4c34 <prvTraceInitTraceData+0x21c>)
    4ade:	4956      	ldr	r1, [pc, #344]	; (4c38 <prvTraceInitTraceData+0x220>)
    4ae0:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    4ae2:	4b44      	ldr	r3, [pc, #272]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	4a55      	ldr	r2, [pc, #340]	; (4c3c <prvTraceInitTraceData+0x224>)
    4ae8:	210a      	movs	r1, #10
    4aea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    4aec:	4b41      	ldr	r3, [pc, #260]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	4a53      	ldr	r2, [pc, #332]	; (4c40 <prvTraceInitTraceData+0x228>)
    4af2:	210b      	movs	r1, #11
    4af4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    4af6:	4b3f      	ldr	r3, [pc, #252]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	4a52      	ldr	r2, [pc, #328]	; (4c44 <prvTraceInitTraceData+0x22c>)
    4afc:	210c      	movs	r1, #12
    4afe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    4b00:	4b3c      	ldr	r3, [pc, #240]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	4a50      	ldr	r2, [pc, #320]	; (4c48 <prvTraceInitTraceData+0x230>)
    4b06:	210d      	movs	r1, #13
    4b08:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    4b0a:	4b3a      	ldr	r3, [pc, #232]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b0c:	681a      	ldr	r2, [r3, #0]
    4b0e:	23fb      	movs	r3, #251	; 0xfb
    4b10:	011b      	lsls	r3, r3, #4
    4b12:	2171      	movs	r1, #113	; 0x71
    4b14:	54d1      	strb	r1, [r2, r3]
	RecorderDataPtr->endmarker5 = 0x72;
    4b16:	4b37      	ldr	r3, [pc, #220]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	4a4c      	ldr	r2, [pc, #304]	; (4c4c <prvTraceInitTraceData+0x234>)
    4b1c:	2172      	movs	r1, #114	; 0x72
    4b1e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    4b20:	4b34      	ldr	r3, [pc, #208]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	4a4a      	ldr	r2, [pc, #296]	; (4c50 <prvTraceInitTraceData+0x238>)
    4b26:	2173      	movs	r1, #115	; 0x73
    4b28:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    4b2a:	4b32      	ldr	r3, [pc, #200]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b2c:	681b      	ldr	r3, [r3, #0]
    4b2e:	4a49      	ldr	r2, [pc, #292]	; (4c54 <prvTraceInitTraceData+0x23c>)
    4b30:	2174      	movs	r1, #116	; 0x74
    4b32:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    4b34:	4b2f      	ldr	r3, [pc, #188]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	4a47      	ldr	r2, [pc, #284]	; (4c58 <prvTraceInitTraceData+0x240>)
    4b3a:	21f1      	movs	r1, #241	; 0xf1
    4b3c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    4b3e:	4b2d      	ldr	r3, [pc, #180]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b40:	681b      	ldr	r3, [r3, #0]
    4b42:	4a46      	ldr	r2, [pc, #280]	; (4c5c <prvTraceInitTraceData+0x244>)
    4b44:	21f2      	movs	r1, #242	; 0xf2
    4b46:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    4b48:	4b2a      	ldr	r3, [pc, #168]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b4a:	681b      	ldr	r3, [r3, #0]
    4b4c:	4a44      	ldr	r2, [pc, #272]	; (4c60 <prvTraceInitTraceData+0x248>)
    4b4e:	21f3      	movs	r1, #243	; 0xf3
    4b50:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    4b52:	4b28      	ldr	r3, [pc, #160]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	4a43      	ldr	r2, [pc, #268]	; (4c64 <prvTraceInitTraceData+0x24c>)
    4b58:	21f4      	movs	r1, #244	; 0xf4
    4b5a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
    4b5c:	4b42      	ldr	r3, [pc, #264]	; (4c68 <prvTraceInitTraceData+0x250>)
    4b5e:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
    4b60:	4b24      	ldr	r3, [pc, #144]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b62:	681b      	ldr	r3, [r3, #0]
    4b64:	22f4      	movs	r2, #244	; 0xf4
    4b66:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    4b68:	4b22      	ldr	r3, [pc, #136]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b6a:	681b      	ldr	r3, [r3, #0]
    4b6c:	22f3      	movs	r2, #243	; 0xf3
    4b6e:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    4b70:	4b20      	ldr	r3, [pc, #128]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	22f2      	movs	r2, #242	; 0xf2
    4b76:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    4b78:	4b1e      	ldr	r3, [pc, #120]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b7a:	681b      	ldr	r3, [r3, #0]
    4b7c:	22f1      	movs	r2, #241	; 0xf1
    4b7e:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    4b80:	4b1c      	ldr	r3, [pc, #112]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	2274      	movs	r2, #116	; 0x74
    4b86:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    4b88:	4b1a      	ldr	r3, [pc, #104]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b8a:	681b      	ldr	r3, [r3, #0]
    4b8c:	2273      	movs	r2, #115	; 0x73
    4b8e:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    4b90:	4b18      	ldr	r3, [pc, #96]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	2272      	movs	r2, #114	; 0x72
    4b96:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    4b98:	4b16      	ldr	r3, [pc, #88]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	2271      	movs	r2, #113	; 0x71
    4b9e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    4ba0:	4b14      	ldr	r3, [pc, #80]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4ba2:	681b      	ldr	r3, [r3, #0]
    4ba4:	2204      	movs	r2, #4
    4ba6:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    4ba8:	4b12      	ldr	r3, [pc, #72]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4baa:	681b      	ldr	r3, [r3, #0]
    4bac:	2203      	movs	r2, #3
    4bae:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    4bb0:	4b10      	ldr	r3, [pc, #64]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4bb2:	681b      	ldr	r3, [r3, #0]
    4bb4:	2202      	movs	r2, #2
    4bb6:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    4bb8:	4b0e      	ldr	r3, [pc, #56]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4bba:	681b      	ldr	r3, [r3, #0]
    4bbc:	2201      	movs	r2, #1
    4bbe:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
    4bc0:	4b2a      	ldr	r3, [pc, #168]	; (4c6c <prvTraceInitTraceData+0x254>)
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	2b00      	cmp	r3, #0
    4bc6:	d012      	beq.n	4bee <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    4bc8:	4b0a      	ldr	r3, [pc, #40]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4bca:	681b      	ldr	r3, [r3, #0]
    4bcc:	4a16      	ldr	r2, [pc, #88]	; (4c28 <prvTraceInitTraceData+0x210>)
    4bce:	1898      	adds	r0, r3, r2
    4bd0:	4b26      	ldr	r3, [pc, #152]	; (4c6c <prvTraceInitTraceData+0x254>)
    4bd2:	681b      	ldr	r3, [r3, #0]
    4bd4:	2250      	movs	r2, #80	; 0x50
    4bd6:	0019      	movs	r1, r3
    4bd8:	4b15      	ldr	r3, [pc, #84]	; (4c30 <prvTraceInitTraceData+0x218>)
    4bda:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    4bdc:	4b05      	ldr	r3, [pc, #20]	; (4bf4 <prvTraceInitTraceData+0x1dc>)
    4bde:	681b      	ldr	r3, [r3, #0]
    4be0:	4a23      	ldr	r2, [pc, #140]	; (4c70 <prvTraceInitTraceData+0x258>)
    4be2:	2101      	movs	r1, #1
    4be4:	5099      	str	r1, [r3, r2]
		vTraceStop();
    4be6:	4b23      	ldr	r3, [pc, #140]	; (4c74 <prvTraceInitTraceData+0x25c>)
    4be8:	4798      	blx	r3
    4bea:	e000      	b.n	4bee <prvTraceInitTraceData+0x1d6>
			return;
    4bec:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
    4bee:	46bd      	mov	sp, r7
    4bf0:	bd80      	pop	{r7, pc}
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	200003f8 	.word	0x200003f8
    4bf8:	20003ae0 	.word	0x20003ae0
    4bfc:	e000e018 	.word	0xe000e018
    4c00:	20004a98 	.word	0x20004a98
    4c04:	00000fb8 	.word	0x00000fb8
    4c08:	0000e20f 	.word	0x0000e20f
    4c0c:	00001aa1 	.word	0x00001aa1
    4c10:	f0f0f0f0 	.word	0xf0f0f0f0
    4c14:	00003b9d 	.word	0x00003b9d
    4c18:	0000055c 	.word	0x0000055c
    4c1c:	f1f1f1f1 	.word	0xf1f1f1f1
    4c20:	00000564 	.word	0x00000564
    4c24:	f2f2f2f2 	.word	0xf2f2f2f2
    4c28:	00000914 	.word	0x00000914
    4c2c:	0001014c 	.word	0x0001014c
    4c30:	00004f91 	.word	0x00004f91
    4c34:	00000964 	.word	0x00000964
    4c38:	f3f3f3f3 	.word	0xf3f3f3f3
    4c3c:	00000fac 	.word	0x00000fac
    4c40:	00000fad 	.word	0x00000fad
    4c44:	00000fae 	.word	0x00000fae
    4c48:	00000faf 	.word	0x00000faf
    4c4c:	00000fb1 	.word	0x00000fb1
    4c50:	00000fb2 	.word	0x00000fb2
    4c54:	00000fb3 	.word	0x00000fb3
    4c58:	00000fb4 	.word	0x00000fb4
    4c5c:	00000fb5 	.word	0x00000fb5
    4c60:	00000fb6 	.word	0x00000fb6
    4c64:	00000fb7 	.word	0x00000fb7
    4c68:	00003d3d 	.word	0x00003d3d
    4c6c:	20000358 	.word	0x20000358
    4c70:	0000090c 	.word	0x0000090c
    4c74:	00003fa5 	.word	0x00003fa5

00004c78 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
    4c78:	b580      	push	{r7, lr}
    4c7a:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
    4c7c:	4b10      	ldr	r3, [pc, #64]	; (4cc0 <prvTraceNextFreeEventBufferSlot+0x48>)
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4c82:	2b00      	cmp	r3, #0
    4c84:	d101      	bne.n	4c8a <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
    4c86:	2300      	movs	r3, #0
    4c88:	e016      	b.n	4cb8 <prvTraceNextFreeEventBufferSlot+0x40>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    4c8a:	4b0d      	ldr	r3, [pc, #52]	; (4cc0 <prvTraceNextFreeEventBufferSlot+0x48>)
    4c8c:	681b      	ldr	r3, [r3, #0]
    4c8e:	69da      	ldr	r2, [r3, #28]
    4c90:	2390      	movs	r3, #144	; 0x90
    4c92:	33ff      	adds	r3, #255	; 0xff
    4c94:	429a      	cmp	r2, r3
    4c96:	d905      	bls.n	4ca4 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
    4c98:	4b0a      	ldr	r3, [pc, #40]	; (4cc4 <prvTraceNextFreeEventBufferSlot+0x4c>)
    4c9a:	0018      	movs	r0, r3
    4c9c:	4b0a      	ldr	r3, [pc, #40]	; (4cc8 <prvTraceNextFreeEventBufferSlot+0x50>)
    4c9e:	4798      	blx	r3
		return NULL;
    4ca0:	2300      	movs	r3, #0
    4ca2:	e009      	b.n	4cb8 <prvTraceNextFreeEventBufferSlot+0x40>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    4ca4:	4b06      	ldr	r3, [pc, #24]	; (4cc0 <prvTraceNextFreeEventBufferSlot+0x48>)
    4ca6:	681a      	ldr	r2, [r3, #0]
    4ca8:	4b05      	ldr	r3, [pc, #20]	; (4cc0 <prvTraceNextFreeEventBufferSlot+0x48>)
    4caa:	681b      	ldr	r3, [r3, #0]
    4cac:	69db      	ldr	r3, [r3, #28]
    4cae:	009b      	lsls	r3, r3, #2
    4cb0:	4906      	ldr	r1, [pc, #24]	; (4ccc <prvTraceNextFreeEventBufferSlot+0x54>)
    4cb2:	468c      	mov	ip, r1
    4cb4:	4463      	add	r3, ip
    4cb6:	18d3      	adds	r3, r2, r3
}
    4cb8:	0018      	movs	r0, r3
    4cba:	46bd      	mov	sp, r7
    4cbc:	bd80      	pop	{r7, pc}
    4cbe:	46c0      	nop			; (mov r8, r8)
    4cc0:	200003f8 	.word	0x200003f8
    4cc4:	00010160 	.word	0x00010160
    4cc8:	000050c5 	.word	0x000050c5
    4ccc:	00000968 	.word	0x00000968

00004cd0 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
    4cd0:	b580      	push	{r7, lr}
    4cd2:	b082      	sub	sp, #8
    4cd4:	af00      	add	r7, sp, #0
    4cd6:	0002      	movs	r2, r0
    4cd8:	1dfb      	adds	r3, r7, #7
    4cda:	701a      	strb	r2, [r3, #0]
    4cdc:	1dbb      	adds	r3, r7, #6
    4cde:	1c0a      	adds	r2, r1, #0
    4ce0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    4ce2:	1dbb      	adds	r3, r7, #6
    4ce4:	781b      	ldrb	r3, [r3, #0]
    4ce6:	2b08      	cmp	r3, #8
    4ce8:	d905      	bls.n	4cf6 <uiIndexOfObject+0x26>
    4cea:	4b2a      	ldr	r3, [pc, #168]	; (4d94 <uiIndexOfObject+0xc4>)
    4cec:	0018      	movs	r0, r3
    4cee:	4b2a      	ldr	r3, [pc, #168]	; (4d98 <uiIndexOfObject+0xc8>)
    4cf0:	4798      	blx	r3
    4cf2:	2300      	movs	r3, #0
    4cf4:	e049      	b.n	4d8a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    4cf6:	1dfb      	adds	r3, r7, #7
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d00b      	beq.n	4d16 <uiIndexOfObject+0x46>
    4cfe:	4b27      	ldr	r3, [pc, #156]	; (4d9c <uiIndexOfObject+0xcc>)
    4d00:	681a      	ldr	r2, [r3, #0]
    4d02:	1dbb      	adds	r3, r7, #6
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	2164      	movs	r1, #100	; 0x64
    4d08:	18d3      	adds	r3, r2, r3
    4d0a:	185b      	adds	r3, r3, r1
    4d0c:	781b      	ldrb	r3, [r3, #0]
    4d0e:	1dfa      	adds	r2, r7, #7
    4d10:	7812      	ldrb	r2, [r2, #0]
    4d12:	429a      	cmp	r2, r3
    4d14:	d905      	bls.n	4d22 <uiIndexOfObject+0x52>
    4d16:	4b22      	ldr	r3, [pc, #136]	; (4da0 <uiIndexOfObject+0xd0>)
    4d18:	0018      	movs	r0, r3
    4d1a:	4b1f      	ldr	r3, [pc, #124]	; (4d98 <uiIndexOfObject+0xc8>)
    4d1c:	4798      	blx	r3
    4d1e:	2300      	movs	r3, #0
    4d20:	e033      	b.n	4d8a <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    4d22:	1dbb      	adds	r3, r7, #6
    4d24:	781b      	ldrb	r3, [r3, #0]
    4d26:	2b08      	cmp	r3, #8
    4d28:	d82a      	bhi.n	4d80 <uiIndexOfObject+0xb0>
    4d2a:	1dfb      	adds	r3, r7, #7
    4d2c:	781b      	ldrb	r3, [r3, #0]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d026      	beq.n	4d80 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
    4d32:	4b1a      	ldr	r3, [pc, #104]	; (4d9c <uiIndexOfObject+0xcc>)
    4d34:	681a      	ldr	r2, [r3, #0]
    4d36:	1dbb      	adds	r3, r7, #6
    4d38:	781b      	ldrb	r3, [r3, #0]
    4d3a:	2164      	movs	r1, #100	; 0x64
    4d3c:	18d3      	adds	r3, r2, r3
    4d3e:	185b      	adds	r3, r3, r1
    4d40:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
    4d42:	1dfa      	adds	r2, r7, #7
    4d44:	7812      	ldrb	r2, [r2, #0]
    4d46:	429a      	cmp	r2, r3
    4d48:	d81a      	bhi.n	4d80 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    4d4a:	4b14      	ldr	r3, [pc, #80]	; (4d9c <uiIndexOfObject+0xcc>)
    4d4c:	681a      	ldr	r2, [r3, #0]
    4d4e:	1dbb      	adds	r3, r7, #6
    4d50:	781b      	ldrb	r3, [r3, #0]
    4d52:	3340      	adds	r3, #64	; 0x40
    4d54:	005b      	lsls	r3, r3, #1
    4d56:	18d3      	adds	r3, r2, r3
    4d58:	3308      	adds	r3, #8
    4d5a:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    4d5c:	4b0f      	ldr	r3, [pc, #60]	; (4d9c <uiIndexOfObject+0xcc>)
    4d5e:	6819      	ldr	r1, [r3, #0]
    4d60:	1dbb      	adds	r3, r7, #6
    4d62:	781b      	ldrb	r3, [r3, #0]
    4d64:	207c      	movs	r0, #124	; 0x7c
    4d66:	18cb      	adds	r3, r1, r3
    4d68:	181b      	adds	r3, r3, r0
    4d6a:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    4d6c:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    4d6e:	1df9      	adds	r1, r7, #7
    4d70:	7809      	ldrb	r1, [r1, #0]
    4d72:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    4d74:	b289      	uxth	r1, r1
    4d76:	434b      	muls	r3, r1
    4d78:	b29b      	uxth	r3, r3
    4d7a:	18d3      	adds	r3, r2, r3
    4d7c:	b29b      	uxth	r3, r3
    4d7e:	e004      	b.n	4d8a <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
    4d80:	4b08      	ldr	r3, [pc, #32]	; (4da4 <uiIndexOfObject+0xd4>)
    4d82:	0018      	movs	r0, r3
    4d84:	4b04      	ldr	r3, [pc, #16]	; (4d98 <uiIndexOfObject+0xc8>)
    4d86:	4798      	blx	r3
	return 0;
    4d88:	2300      	movs	r3, #0
}
    4d8a:	0018      	movs	r0, r3
    4d8c:	46bd      	mov	sp, r7
    4d8e:	b002      	add	sp, #8
    4d90:	bd80      	pop	{r7, pc}
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	00010188 	.word	0x00010188
    4d98:	000050c5 	.word	0x000050c5
    4d9c:	200003f8 	.word	0x200003f8
    4da0:	000101c8 	.word	0x000101c8
    4da4:	00010208 	.word	0x00010208

00004da8 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b088      	sub	sp, #32
    4dac:	af00      	add	r7, sp, #0
    4dae:	0002      	movs	r2, r0
    4db0:	1dfb      	adds	r3, r7, #7
    4db2:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    4db4:	4b5a      	ldr	r3, [pc, #360]	; (4f20 <prvTraceGetObjectHandle+0x178>)
    4db6:	681b      	ldr	r3, [r3, #0]
    4db8:	2b00      	cmp	r3, #0
    4dba:	d105      	bne.n	4dc8 <prvTraceGetObjectHandle+0x20>
    4dbc:	4b59      	ldr	r3, [pc, #356]	; (4f24 <prvTraceGetObjectHandle+0x17c>)
    4dbe:	0018      	movs	r0, r3
    4dc0:	4b59      	ldr	r3, [pc, #356]	; (4f28 <prvTraceGetObjectHandle+0x180>)
    4dc2:	4798      	blx	r3
    4dc4:	2300      	movs	r3, #0
    4dc6:	e0a7      	b.n	4f18 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    4dc8:	1dfb      	adds	r3, r7, #7
    4dca:	781b      	ldrb	r3, [r3, #0]
    4dcc:	2b08      	cmp	r3, #8
    4dce:	d905      	bls.n	4ddc <prvTraceGetObjectHandle+0x34>
    4dd0:	4b56      	ldr	r3, [pc, #344]	; (4f2c <prvTraceGetObjectHandle+0x184>)
    4dd2:	0018      	movs	r0, r3
    4dd4:	4b54      	ldr	r3, [pc, #336]	; (4f28 <prvTraceGetObjectHandle+0x180>)
    4dd6:	4798      	blx	r3
    4dd8:	2300      	movs	r3, #0
    4dda:	e09d      	b.n	4f18 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4ddc:	f3ef 8310 	mrs	r3, PRIMASK
    4de0:	60fb      	str	r3, [r7, #12]
  return(result);
    4de2:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
    4de4:	61bb      	str	r3, [r7, #24]
    4de6:	2301      	movs	r3, #1
    4de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4dea:	693b      	ldr	r3, [r7, #16]
    4dec:	f383 8810 	msr	PRIMASK, r3
    4df0:	4b4f      	ldr	r3, [pc, #316]	; (4f30 <prvTraceGetObjectHandle+0x188>)
    4df2:	681b      	ldr	r3, [r3, #0]
    4df4:	1c5a      	adds	r2, r3, #1
    4df6:	4b4e      	ldr	r3, [pc, #312]	; (4f30 <prvTraceGetObjectHandle+0x188>)
    4df8:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    4dfa:	1dfb      	adds	r3, r7, #7
    4dfc:	781a      	ldrb	r2, [r3, #0]
    4dfe:	4b4d      	ldr	r3, [pc, #308]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4e00:	0052      	lsls	r2, r2, #1
    4e02:	5ad3      	ldrh	r3, [r2, r3]
    4e04:	001a      	movs	r2, r3
    4e06:	4b4c      	ldr	r3, [pc, #304]	; (4f38 <prvTraceGetObjectHandle+0x190>)
    4e08:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    4e0a:	4b4b      	ldr	r3, [pc, #300]	; (4f38 <prvTraceGetObjectHandle+0x190>)
    4e0c:	681b      	ldr	r3, [r3, #0]
    4e0e:	4a49      	ldr	r2, [pc, #292]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4e10:	2148      	movs	r1, #72	; 0x48
    4e12:	18d3      	adds	r3, r2, r3
    4e14:	185b      	adds	r3, r3, r1
    4e16:	781b      	ldrb	r3, [r3, #0]
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d117      	bne.n	4e4c <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
    4e1c:	4b46      	ldr	r3, [pc, #280]	; (4f38 <prvTraceGetObjectHandle+0x190>)
    4e1e:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    4e20:	4b45      	ldr	r3, [pc, #276]	; (4f38 <prvTraceGetObjectHandle+0x190>)
    4e22:	681b      	ldr	r3, [r3, #0]
    4e24:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    4e26:	1dfb      	adds	r3, r7, #7
    4e28:	781b      	ldrb	r3, [r3, #0]
    4e2a:	4842      	ldr	r0, [pc, #264]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4e2c:	3308      	adds	r3, #8
    4e2e:	005b      	lsls	r3, r3, #1
    4e30:	18c3      	adds	r3, r0, r3
    4e32:	3302      	adds	r3, #2
    4e34:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
    4e36:	b2db      	uxtb	r3, r3
    4e38:	1acb      	subs	r3, r1, r3
    4e3a:	b2db      	uxtb	r3, r3
    4e3c:	3301      	adds	r3, #1
    4e3e:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
    4e40:	4b3c      	ldr	r3, [pc, #240]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4e42:	2148      	movs	r1, #72	; 0x48
    4e44:	189b      	adds	r3, r3, r2
    4e46:	185b      	adds	r3, r3, r1
    4e48:	1c02      	adds	r2, r0, #0
    4e4a:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
    4e4c:	4b3a      	ldr	r3, [pc, #232]	; (4f38 <prvTraceGetObjectHandle+0x190>)
    4e4e:	681a      	ldr	r2, [r3, #0]
    4e50:	231f      	movs	r3, #31
    4e52:	18fb      	adds	r3, r7, r3
    4e54:	4937      	ldr	r1, [pc, #220]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4e56:	2048      	movs	r0, #72	; 0x48
    4e58:	188a      	adds	r2, r1, r2
    4e5a:	1812      	adds	r2, r2, r0
    4e5c:	7812      	ldrb	r2, [r2, #0]
    4e5e:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    4e60:	1dfb      	adds	r3, r7, #7
    4e62:	781a      	ldrb	r2, [r3, #0]
    4e64:	4b33      	ldr	r3, [pc, #204]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4e66:	0052      	lsls	r2, r2, #1
    4e68:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    4e6a:	1dfb      	adds	r3, r7, #7
    4e6c:	781b      	ldrb	r3, [r3, #0]
    4e6e:	4931      	ldr	r1, [pc, #196]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4e70:	3310      	adds	r3, #16
    4e72:	005b      	lsls	r3, r3, #1
    4e74:	18cb      	adds	r3, r1, r3
    4e76:	3304      	adds	r3, #4
    4e78:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    4e7a:	429a      	cmp	r2, r3
    4e7c:	d90d      	bls.n	4e9a <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    4e7e:	1dfb      	adds	r3, r7, #7
    4e80:	781b      	ldrb	r3, [r3, #0]
    4e82:	0018      	movs	r0, r3
    4e84:	4b2d      	ldr	r3, [pc, #180]	; (4f3c <prvTraceGetObjectHandle+0x194>)
    4e86:	4798      	blx	r3
    4e88:	0003      	movs	r3, r0
    4e8a:	0018      	movs	r0, r3
    4e8c:	4b26      	ldr	r3, [pc, #152]	; (4f28 <prvTraceGetObjectHandle+0x180>)
    4e8e:	4798      	blx	r3
		handle = 0;
    4e90:	231f      	movs	r3, #31
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	2200      	movs	r2, #0
    4e96:	701a      	strb	r2, [r3, #0]
    4e98:	e031      	b.n	4efe <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    4e9a:	1dfb      	adds	r3, r7, #7
    4e9c:	781b      	ldrb	r3, [r3, #0]
    4e9e:	4a25      	ldr	r2, [pc, #148]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4ea0:	0059      	lsls	r1, r3, #1
    4ea2:	5a8a      	ldrh	r2, [r1, r2]
    4ea4:	3201      	adds	r2, #1
    4ea6:	b291      	uxth	r1, r2
    4ea8:	4a22      	ldr	r2, [pc, #136]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4eaa:	005b      	lsls	r3, r3, #1
    4eac:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    4eae:	1dfb      	adds	r3, r7, #7
    4eb0:	781a      	ldrb	r2, [r3, #0]
    4eb2:	4b20      	ldr	r3, [pc, #128]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4eb4:	0052      	lsls	r2, r2, #1
    4eb6:	5ad3      	ldrh	r3, [r2, r3]
    4eb8:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
    4eba:	1dfb      	adds	r3, r7, #7
    4ebc:	781b      	ldrb	r3, [r3, #0]
    4ebe:	4a1d      	ldr	r2, [pc, #116]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4ec0:	3308      	adds	r3, #8
    4ec2:	005b      	lsls	r3, r3, #1
    4ec4:	18d3      	adds	r3, r2, r3
    4ec6:	3302      	adds	r3, #2
    4ec8:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    4eca:	1acb      	subs	r3, r1, r3
    4ecc:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    4ece:	1dfb      	adds	r3, r7, #7
    4ed0:	781b      	ldrb	r3, [r3, #0]
    4ed2:	4a18      	ldr	r2, [pc, #96]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4ed4:	3318      	adds	r3, #24
    4ed6:	005b      	lsls	r3, r3, #1
    4ed8:	18d3      	adds	r3, r2, r3
    4eda:	3306      	adds	r3, #6
    4edc:	881b      	ldrh	r3, [r3, #0]
    4ede:	001a      	movs	r2, r3
		if (hndCount >
    4ee0:	697b      	ldr	r3, [r7, #20]
    4ee2:	429a      	cmp	r2, r3
    4ee4:	da0b      	bge.n	4efe <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    4ee6:	1dfb      	adds	r3, r7, #7
    4ee8:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
    4eea:	697a      	ldr	r2, [r7, #20]
    4eec:	b2d2      	uxtb	r2, r2
    4eee:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    4ef0:	4a10      	ldr	r2, [pc, #64]	; (4f34 <prvTraceGetObjectHandle+0x18c>)
    4ef2:	3318      	adds	r3, #24
    4ef4:	005b      	lsls	r3, r3, #1
    4ef6:	18d3      	adds	r3, r2, r3
    4ef8:	3306      	adds	r3, #6
    4efa:	1c0a      	adds	r2, r1, #0
    4efc:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
    4efe:	4b0c      	ldr	r3, [pc, #48]	; (4f30 <prvTraceGetObjectHandle+0x188>)
    4f00:	681b      	ldr	r3, [r3, #0]
    4f02:	1e5a      	subs	r2, r3, #1
    4f04:	4b0a      	ldr	r3, [pc, #40]	; (4f30 <prvTraceGetObjectHandle+0x188>)
    4f06:	601a      	str	r2, [r3, #0]
    4f08:	69bb      	ldr	r3, [r7, #24]
    4f0a:	60bb      	str	r3, [r7, #8]
    4f0c:	68bb      	ldr	r3, [r7, #8]
    4f0e:	f383 8810 	msr	PRIMASK, r3

	return handle;
    4f12:	231f      	movs	r3, #31
    4f14:	18fb      	adds	r3, r7, r3
    4f16:	781b      	ldrb	r3, [r3, #0]
}
    4f18:	0018      	movs	r0, r3
    4f1a:	46bd      	mov	sp, r7
    4f1c:	b008      	add	sp, #32
    4f1e:	bd80      	pop	{r7, pc}
    4f20:	200003f8 	.word	0x200003f8
    4f24:	0000f668 	.word	0x0000f668
    4f28:	000050c5 	.word	0x000050c5
    4f2c:	00010248 	.word	0x00010248
    4f30:	20000350 	.word	0x20000350
    4f34:	20000368 	.word	0x20000368
    4f38:	200003fc 	.word	0x200003fc
    4f3c:	00003e01 	.word	0x00003e01

00004f40 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
    4f40:	b590      	push	{r4, r7, lr}
    4f42:	b085      	sub	sp, #20
    4f44:	af00      	add	r7, sp, #0
    4f46:	0002      	movs	r2, r0
    4f48:	1dfb      	adds	r3, r7, #7
    4f4a:	701a      	strb	r2, [r3, #0]
    4f4c:	1dbb      	adds	r3, r7, #6
    4f4e:	1c0a      	adds	r2, r1, #0
    4f50:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    4f52:	230e      	movs	r3, #14
    4f54:	18fc      	adds	r4, r7, r3
    4f56:	1dfb      	adds	r3, r7, #7
    4f58:	781a      	ldrb	r2, [r3, #0]
    4f5a:	1dbb      	adds	r3, r7, #6
    4f5c:	781b      	ldrb	r3, [r3, #0]
    4f5e:	0011      	movs	r1, r2
    4f60:	0018      	movs	r0, r3
    4f62:	4b09      	ldr	r3, [pc, #36]	; (4f88 <prvMarkObjectAsUsed+0x48>)
    4f64:	4798      	blx	r3
    4f66:	0003      	movs	r3, r0
    4f68:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    4f6a:	4b08      	ldr	r3, [pc, #32]	; (4f8c <prvMarkObjectAsUsed+0x4c>)
    4f6c:	681a      	ldr	r2, [r3, #0]
    4f6e:	230e      	movs	r3, #14
    4f70:	18fb      	adds	r3, r7, r3
    4f72:	881b      	ldrh	r3, [r3, #0]
    4f74:	219c      	movs	r1, #156	; 0x9c
    4f76:	18d3      	adds	r3, r2, r3
    4f78:	185b      	adds	r3, r3, r1
    4f7a:	2201      	movs	r2, #1
    4f7c:	701a      	strb	r2, [r3, #0]
}
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	46bd      	mov	sp, r7
    4f82:	b005      	add	sp, #20
    4f84:	bd90      	pop	{r4, r7, pc}
    4f86:	46c0      	nop			; (mov r8, r8)
    4f88:	00004cd1 	.word	0x00004cd1
    4f8c:	200003f8 	.word	0x200003f8

00004f90 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    4f90:	b580      	push	{r7, lr}
    4f92:	b086      	sub	sp, #24
    4f94:	af00      	add	r7, sp, #0
    4f96:	60f8      	str	r0, [r7, #12]
    4f98:	60b9      	str	r1, [r7, #8]
    4f9a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    4f9c:	2300      	movs	r3, #0
    4f9e:	617b      	str	r3, [r7, #20]
    4fa0:	e010      	b.n	4fc4 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
    4fa2:	68fa      	ldr	r2, [r7, #12]
    4fa4:	697b      	ldr	r3, [r7, #20]
    4fa6:	18d3      	adds	r3, r2, r3
    4fa8:	68b9      	ldr	r1, [r7, #8]
    4faa:	697a      	ldr	r2, [r7, #20]
    4fac:	188a      	adds	r2, r1, r2
    4fae:	7812      	ldrb	r2, [r2, #0]
    4fb0:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
    4fb2:	68ba      	ldr	r2, [r7, #8]
    4fb4:	697b      	ldr	r3, [r7, #20]
    4fb6:	18d3      	adds	r3, r2, r3
    4fb8:	781b      	ldrb	r3, [r3, #0]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d007      	beq.n	4fce <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
    4fbe:	697b      	ldr	r3, [r7, #20]
    4fc0:	3301      	adds	r3, #1
    4fc2:	617b      	str	r3, [r7, #20]
    4fc4:	697a      	ldr	r2, [r7, #20]
    4fc6:	687b      	ldr	r3, [r7, #4]
    4fc8:	429a      	cmp	r2, r3
    4fca:	d3ea      	bcc.n	4fa2 <prvStrncpy+0x12>
			break;
	}
}
    4fcc:	e000      	b.n	4fd0 <prvStrncpy+0x40>
			break;
    4fce:	46c0      	nop			; (mov r8, r8)
}
    4fd0:	46c0      	nop			; (mov r8, r8)
    4fd2:	46bd      	mov	sp, r7
    4fd4:	b006      	add	sp, #24
    4fd6:	bd80      	pop	{r7, pc}

00004fd8 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
    4fd8:	b580      	push	{r7, lr}
    4fda:	b082      	sub	sp, #8
    4fdc:	af00      	add	r7, sp, #0
    4fde:	603a      	str	r2, [r7, #0]
    4fe0:	1dfb      	adds	r3, r7, #7
    4fe2:	1c02      	adds	r2, r0, #0
    4fe4:	701a      	strb	r2, [r3, #0]
    4fe6:	1dbb      	adds	r3, r7, #6
    4fe8:	1c0a      	adds	r2, r1, #0
    4fea:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    4fec:	683b      	ldr	r3, [r7, #0]
    4fee:	2b00      	cmp	r3, #0
    4ff0:	d104      	bne.n	4ffc <prvTraceSetObjectName+0x24>
    4ff2:	4b2a      	ldr	r3, [pc, #168]	; (509c <prvTraceSetObjectName+0xc4>)
    4ff4:	0018      	movs	r0, r3
    4ff6:	4b2a      	ldr	r3, [pc, #168]	; (50a0 <prvTraceSetObjectName+0xc8>)
    4ff8:	4798      	blx	r3
    4ffa:	e04b      	b.n	5094 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
    4ffc:	1dfb      	adds	r3, r7, #7
    4ffe:	781b      	ldrb	r3, [r3, #0]
    5000:	2b08      	cmp	r3, #8
    5002:	d904      	bls.n	500e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    5004:	4b27      	ldr	r3, [pc, #156]	; (50a4 <prvTraceSetObjectName+0xcc>)
    5006:	0018      	movs	r0, r3
    5008:	4b25      	ldr	r3, [pc, #148]	; (50a0 <prvTraceSetObjectName+0xc8>)
    500a:	4798      	blx	r3
		return;
    500c:	e042      	b.n	5094 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
    500e:	1dbb      	adds	r3, r7, #6
    5010:	781b      	ldrb	r3, [r3, #0]
    5012:	2b00      	cmp	r3, #0
    5014:	d104      	bne.n	5020 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    5016:	4b24      	ldr	r3, [pc, #144]	; (50a8 <prvTraceSetObjectName+0xd0>)
    5018:	0018      	movs	r0, r3
    501a:	4b21      	ldr	r3, [pc, #132]	; (50a0 <prvTraceSetObjectName+0xc8>)
    501c:	4798      	blx	r3
		return;
    501e:	e039      	b.n	5094 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    5020:	4b22      	ldr	r3, [pc, #136]	; (50ac <prvTraceSetObjectName+0xd4>)
    5022:	681a      	ldr	r2, [r3, #0]
    5024:	1dfb      	adds	r3, r7, #7
    5026:	781b      	ldrb	r3, [r3, #0]
    5028:	2164      	movs	r1, #100	; 0x64
    502a:	18d3      	adds	r3, r2, r3
    502c:	185b      	adds	r3, r3, r1
    502e:	781b      	ldrb	r3, [r3, #0]
    5030:	1dba      	adds	r2, r7, #6
    5032:	7812      	ldrb	r2, [r2, #0]
    5034:	429a      	cmp	r2, r3
    5036:	d909      	bls.n	504c <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    5038:	1dfb      	adds	r3, r7, #7
    503a:	781b      	ldrb	r3, [r3, #0]
    503c:	0018      	movs	r0, r3
    503e:	4b1c      	ldr	r3, [pc, #112]	; (50b0 <prvTraceSetObjectName+0xd8>)
    5040:	4798      	blx	r3
    5042:	0003      	movs	r3, r0
    5044:	0018      	movs	r0, r3
    5046:	4b16      	ldr	r3, [pc, #88]	; (50a0 <prvTraceSetObjectName+0xc8>)
    5048:	4798      	blx	r3
    504a:	e023      	b.n	5094 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
    504c:	1dfb      	adds	r3, r7, #7
    504e:	781a      	ldrb	r2, [r3, #0]
    5050:	1dbb      	adds	r3, r7, #6
    5052:	781b      	ldrb	r3, [r3, #0]
    5054:	0011      	movs	r1, r2
    5056:	0018      	movs	r0, r3
    5058:	4b16      	ldr	r3, [pc, #88]	; (50b4 <prvTraceSetObjectName+0xdc>)
    505a:	4798      	blx	r3
    505c:	0003      	movs	r3, r0
    505e:	001a      	movs	r2, r3
    5060:	4b15      	ldr	r3, [pc, #84]	; (50b8 <prvTraceSetObjectName+0xe0>)
    5062:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
    5064:	4b15      	ldr	r3, [pc, #84]	; (50bc <prvTraceSetObjectName+0xe4>)
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	2b00      	cmp	r3, #0
    506a:	d113      	bne.n	5094 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    506c:	4b0f      	ldr	r3, [pc, #60]	; (50ac <prvTraceSetObjectName+0xd4>)
    506e:	681a      	ldr	r2, [r3, #0]
    5070:	4b11      	ldr	r3, [pc, #68]	; (50b8 <prvTraceSetObjectName+0xe0>)
    5072:	881b      	ldrh	r3, [r3, #0]
    5074:	3398      	adds	r3, #152	; 0x98
    5076:	18d3      	adds	r3, r2, r3
    5078:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    507a:	4b0c      	ldr	r3, [pc, #48]	; (50ac <prvTraceSetObjectName+0xd4>)
    507c:	681a      	ldr	r2, [r3, #0]
    507e:	1dfb      	adds	r3, r7, #7
    5080:	781b      	ldrb	r3, [r3, #0]
    5082:	2170      	movs	r1, #112	; 0x70
    5084:	18d3      	adds	r3, r2, r3
    5086:	185b      	adds	r3, r3, r1
    5088:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    508a:	001a      	movs	r2, r3
    508c:	683b      	ldr	r3, [r7, #0]
    508e:	0019      	movs	r1, r3
    5090:	4b0b      	ldr	r3, [pc, #44]	; (50c0 <prvTraceSetObjectName+0xe8>)
    5092:	4798      	blx	r3
		}
	}
}
    5094:	46bd      	mov	sp, r7
    5096:	b002      	add	sp, #8
    5098:	bd80      	pop	{r7, pc}
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	0001034c 	.word	0x0001034c
    50a0:	000050c5 	.word	0x000050c5
    50a4:	00010380 	.word	0x00010380
    50a8:	000103b0 	.word	0x000103b0
    50ac:	200003f8 	.word	0x200003f8
    50b0:	00003e01 	.word	0x00003e01
    50b4:	00004cd1 	.word	0x00004cd1
    50b8:	20000400 	.word	0x20000400
    50bc:	20000358 	.word	0x20000358
    50c0:	00004f91 	.word	0x00004f91

000050c4 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    50c4:	b580      	push	{r7, lr}
    50c6:	b082      	sub	sp, #8
    50c8:	af00      	add	r7, sp, #0
    50ca:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    50cc:	4b11      	ldr	r3, [pc, #68]	; (5114 <prvTraceError+0x50>)
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	2b00      	cmp	r3, #0
    50d2:	d001      	beq.n	50d8 <prvTraceError+0x14>
	{
		vTraceStop();
    50d4:	4b10      	ldr	r3, [pc, #64]	; (5118 <prvTraceError+0x54>)
    50d6:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    50d8:	4b10      	ldr	r3, [pc, #64]	; (511c <prvTraceError+0x58>)
    50da:	681b      	ldr	r3, [r3, #0]
    50dc:	2b00      	cmp	r3, #0
    50de:	d115      	bne.n	510c <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
    50e0:	4b0e      	ldr	r3, [pc, #56]	; (511c <prvTraceError+0x58>)
    50e2:	687a      	ldr	r2, [r7, #4]
    50e4:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
    50e6:	4b0b      	ldr	r3, [pc, #44]	; (5114 <prvTraceError+0x50>)
    50e8:	681b      	ldr	r3, [r3, #0]
    50ea:	2b00      	cmp	r3, #0
    50ec:	d00e      	beq.n	510c <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    50ee:	4b09      	ldr	r3, [pc, #36]	; (5114 <prvTraceError+0x50>)
    50f0:	681b      	ldr	r3, [r3, #0]
    50f2:	4a0b      	ldr	r2, [pc, #44]	; (5120 <prvTraceError+0x5c>)
    50f4:	1898      	adds	r0, r3, r2
    50f6:	4b09      	ldr	r3, [pc, #36]	; (511c <prvTraceError+0x58>)
    50f8:	681b      	ldr	r3, [r3, #0]
    50fa:	2250      	movs	r2, #80	; 0x50
    50fc:	0019      	movs	r1, r3
    50fe:	4b09      	ldr	r3, [pc, #36]	; (5124 <prvTraceError+0x60>)
    5100:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    5102:	4b04      	ldr	r3, [pc, #16]	; (5114 <prvTraceError+0x50>)
    5104:	681b      	ldr	r3, [r3, #0]
    5106:	4a08      	ldr	r2, [pc, #32]	; (5128 <prvTraceError+0x64>)
    5108:	2101      	movs	r1, #1
    510a:	5099      	str	r1, [r3, r2]
		}
	}
}
    510c:	46c0      	nop			; (mov r8, r8)
    510e:	46bd      	mov	sp, r7
    5110:	b002      	add	sp, #8
    5112:	bd80      	pop	{r7, pc}
    5114:	200003f8 	.word	0x200003f8
    5118:	00003fa5 	.word	0x00003fa5
    511c:	20000358 	.word	0x20000358
    5120:	00000914 	.word	0x00000914
    5124:	00004f91 	.word	0x00004f91
    5128:	0000090c 	.word	0x0000090c

0000512c <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    512c:	b580      	push	{r7, lr}
    512e:	b086      	sub	sp, #24
    5130:	af00      	add	r7, sp, #0
    5132:	0002      	movs	r2, r0
    5134:	1dfb      	adds	r3, r7, #7
    5136:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
    5138:	2300      	movs	r3, #0
    513a:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
    513c:	2300      	movs	r3, #0
    513e:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    5140:	1dfb      	adds	r3, r7, #7
    5142:	781b      	ldrb	r3, [r3, #0]
    5144:	2b00      	cmp	r3, #0
    5146:	d000      	beq.n	514a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    5148:	e081      	b.n	524e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x122>
    514a:	4b45      	ldr	r3, [pc, #276]	; (5260 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x134>)
    514c:	0018      	movs	r0, r3
    514e:	4b45      	ldr	r3, [pc, #276]	; (5264 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x138>)
    5150:	4798      	blx	r3
    5152:	e082      	b.n	525a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    5154:	4b44      	ldr	r3, [pc, #272]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    5156:	681b      	ldr	r3, [r3, #0]
    5158:	69da      	ldr	r2, [r3, #28]
    515a:	697b      	ldr	r3, [r7, #20]
    515c:	18d3      	adds	r3, r2, r3
    515e:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    5160:	4b41      	ldr	r3, [pc, #260]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    5162:	681a      	ldr	r2, [r3, #0]
    5164:	693b      	ldr	r3, [r7, #16]
    5166:	009b      	lsls	r3, r3, #2
    5168:	4940      	ldr	r1, [pc, #256]	; (526c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x140>)
    516a:	18d3      	adds	r3, r2, r3
    516c:	185b      	adds	r3, r3, r1
    516e:	781b      	ldrb	r3, [r3, #0]
    5170:	2b98      	cmp	r3, #152	; 0x98
    5172:	d931      	bls.n	51d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
    5174:	4b3c      	ldr	r3, [pc, #240]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    5176:	681a      	ldr	r2, [r3, #0]
    5178:	693b      	ldr	r3, [r7, #16]
    517a:	009b      	lsls	r3, r3, #2
    517c:	493b      	ldr	r1, [pc, #236]	; (526c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x140>)
    517e:	18d3      	adds	r3, r2, r3
    5180:	185b      	adds	r3, r3, r1
    5182:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    5184:	2ba7      	cmp	r3, #167	; 0xa7
    5186:	d827      	bhi.n	51d8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    5188:	4b37      	ldr	r3, [pc, #220]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    518a:	681a      	ldr	r2, [r3, #0]
    518c:	693b      	ldr	r3, [r7, #16]
    518e:	009b      	lsls	r3, r3, #2
    5190:	4936      	ldr	r1, [pc, #216]	; (526c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x140>)
    5192:	18d3      	adds	r3, r2, r3
    5194:	185b      	adds	r3, r3, r1
    5196:	781a      	ldrb	r2, [r3, #0]
    5198:	230f      	movs	r3, #15
    519a:	18fb      	adds	r3, r7, r3
    519c:	3268      	adds	r2, #104	; 0x68
    519e:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    51a0:	230f      	movs	r3, #15
    51a2:	18fb      	adds	r3, r7, r3
    51a4:	781a      	ldrb	r2, [r3, #0]
    51a6:	693b      	ldr	r3, [r7, #16]
    51a8:	18d2      	adds	r2, r2, r3
    51aa:	4b2f      	ldr	r3, [pc, #188]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    51ac:	681b      	ldr	r3, [r3, #0]
    51ae:	699b      	ldr	r3, [r3, #24]
    51b0:	429a      	cmp	r2, r3
    51b2:	d248      	bcs.n	5246 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x11a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    51b4:	4b2c      	ldr	r3, [pc, #176]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    51b6:	681a      	ldr	r2, [r3, #0]
    51b8:	693b      	ldr	r3, [r7, #16]
    51ba:	009b      	lsls	r3, r3, #2
    51bc:	492b      	ldr	r1, [pc, #172]	; (526c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x140>)
    51be:	468c      	mov	ip, r1
    51c0:	4463      	add	r3, ip
    51c2:	18d0      	adds	r0, r2, r3
    51c4:	230f      	movs	r3, #15
    51c6:	18fb      	adds	r3, r7, r3
    51c8:	781b      	ldrb	r3, [r3, #0]
    51ca:	3301      	adds	r3, #1
    51cc:	009b      	lsls	r3, r3, #2
    51ce:	001a      	movs	r2, r3
    51d0:	2100      	movs	r1, #0
    51d2:	4b27      	ldr	r3, [pc, #156]	; (5270 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    51d4:	4798      	blx	r3
		{
    51d6:	e036      	b.n	5246 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x11a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    51d8:	4b23      	ldr	r3, [pc, #140]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    51da:	681a      	ldr	r2, [r3, #0]
    51dc:	693b      	ldr	r3, [r7, #16]
    51de:	009b      	lsls	r3, r3, #2
    51e0:	4922      	ldr	r1, [pc, #136]	; (526c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x140>)
    51e2:	18d3      	adds	r3, r2, r3
    51e4:	185b      	adds	r3, r3, r1
    51e6:	781b      	ldrb	r3, [r3, #0]
    51e8:	2b01      	cmp	r3, #1
    51ea:	d12d      	bne.n	5248 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x11c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
    51ec:	693b      	ldr	r3, [r7, #16]
    51ee:	1c5a      	adds	r2, r3, #1
    51f0:	4b1d      	ldr	r3, [pc, #116]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    51f2:	681b      	ldr	r3, [r3, #0]
    51f4:	699b      	ldr	r3, [r3, #24]
    51f6:	429a      	cmp	r2, r3
    51f8:	d20d      	bcs.n	5216 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xea>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    51fa:	4b1b      	ldr	r3, [pc, #108]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    51fc:	681a      	ldr	r2, [r3, #0]
    51fe:	693b      	ldr	r3, [r7, #16]
    5200:	009b      	lsls	r3, r3, #2
    5202:	491a      	ldr	r1, [pc, #104]	; (526c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x140>)
    5204:	468c      	mov	ip, r1
    5206:	4463      	add	r3, ip
    5208:	18d3      	adds	r3, r2, r3
    520a:	2208      	movs	r2, #8
    520c:	2100      	movs	r1, #0
    520e:	0018      	movs	r0, r3
    5210:	4b17      	ldr	r3, [pc, #92]	; (5270 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    5212:	4798      	blx	r3
    5214:	e018      	b.n	5248 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x11c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    5216:	4b14      	ldr	r3, [pc, #80]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    5218:	681b      	ldr	r3, [r3, #0]
    521a:	4a14      	ldr	r2, [pc, #80]	; (526c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x140>)
    521c:	4694      	mov	ip, r2
    521e:	4463      	add	r3, ip
    5220:	2204      	movs	r2, #4
    5222:	2100      	movs	r1, #0
    5224:	0018      	movs	r0, r3
    5226:	4b12      	ldr	r3, [pc, #72]	; (5270 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    5228:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    522a:	4b0f      	ldr	r3, [pc, #60]	; (5268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13c>)
    522c:	681a      	ldr	r2, [r3, #0]
    522e:	693b      	ldr	r3, [r7, #16]
    5230:	009b      	lsls	r3, r3, #2
    5232:	490e      	ldr	r1, [pc, #56]	; (526c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x140>)
    5234:	468c      	mov	ip, r1
    5236:	4463      	add	r3, ip
    5238:	18d3      	adds	r3, r2, r3
    523a:	2204      	movs	r2, #4
    523c:	2100      	movs	r1, #0
    523e:	0018      	movs	r0, r3
    5240:	4b0b      	ldr	r3, [pc, #44]	; (5270 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
    5242:	4798      	blx	r3
    5244:	e000      	b.n	5248 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x11c>
		{
    5246:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
    5248:	697b      	ldr	r3, [r7, #20]
    524a:	3301      	adds	r3, #1
    524c:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
    524e:	1dfb      	adds	r3, r7, #7
    5250:	781a      	ldrb	r2, [r3, #0]
    5252:	697b      	ldr	r3, [r7, #20]
    5254:	429a      	cmp	r2, r3
    5256:	d900      	bls.n	525a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12e>
    5258:	e77c      	b.n	5154 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
    525a:	46bd      	mov	sp, r7
    525c:	b006      	add	sp, #24
    525e:	bd80      	pop	{r7, pc}
    5260:	00010410 	.word	0x00010410
    5264:	000050c5 	.word	0x000050c5
    5268:	200003f8 	.word	0x200003f8
    526c:	00000968 	.word	0x00000968
    5270:	0000e20f 	.word	0x0000e20f

00005274 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    5274:	b580      	push	{r7, lr}
    5276:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
    5278:	4b12      	ldr	r3, [pc, #72]	; (52c4 <prvTraceUpdateCounters+0x50>)
    527a:	681b      	ldr	r3, [r3, #0]
    527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    527e:	2b00      	cmp	r3, #0
    5280:	d01c      	beq.n	52bc <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    5282:	4b10      	ldr	r3, [pc, #64]	; (52c4 <prvTraceUpdateCounters+0x50>)
    5284:	681b      	ldr	r3, [r3, #0]
    5286:	695a      	ldr	r2, [r3, #20]
    5288:	3201      	adds	r2, #1
    528a:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    528c:	4b0d      	ldr	r3, [pc, #52]	; (52c4 <prvTraceUpdateCounters+0x50>)
    528e:	681b      	ldr	r3, [r3, #0]
    5290:	69da      	ldr	r2, [r3, #28]
    5292:	3201      	adds	r2, #1
    5294:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    5296:	4b0b      	ldr	r3, [pc, #44]	; (52c4 <prvTraceUpdateCounters+0x50>)
    5298:	681b      	ldr	r3, [r3, #0]
    529a:	69da      	ldr	r2, [r3, #28]
    529c:	2390      	movs	r3, #144	; 0x90
    529e:	33ff      	adds	r3, #255	; 0xff
    52a0:	429a      	cmp	r2, r3
    52a2:	d907      	bls.n	52b4 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    52a4:	4b07      	ldr	r3, [pc, #28]	; (52c4 <prvTraceUpdateCounters+0x50>)
    52a6:	681b      	ldr	r3, [r3, #0]
    52a8:	2201      	movs	r2, #1
    52aa:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    52ac:	4b05      	ldr	r3, [pc, #20]	; (52c4 <prvTraceUpdateCounters+0x50>)
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	2200      	movs	r2, #0
    52b2:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    52b4:	2001      	movs	r0, #1
    52b6:	4b04      	ldr	r3, [pc, #16]	; (52c8 <prvTraceUpdateCounters+0x54>)
    52b8:	4798      	blx	r3
    52ba:	e000      	b.n	52be <prvTraceUpdateCounters+0x4a>
		return;
    52bc:	46c0      	nop			; (mov r8, r8)
#endif
}
    52be:	46bd      	mov	sp, r7
    52c0:	bd80      	pop	{r7, pc}
    52c2:	46c0      	nop			; (mov r8, r8)
    52c4:	200003f8 	.word	0x200003f8
    52c8:	0000512d 	.word	0x0000512d

000052cc <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
    52cc:	b5b0      	push	{r4, r5, r7, lr}
    52ce:	b086      	sub	sp, #24
    52d0:	af00      	add	r7, sp, #0
    52d2:	0002      	movs	r2, r0
    52d4:	1dbb      	adds	r3, r7, #6
    52d6:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
    52d8:	2300      	movs	r3, #0
    52da:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
    52dc:	2300      	movs	r3, #0
    52de:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
    52e0:	2300      	movs	r3, #0
    52e2:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    52e4:	1dbb      	adds	r3, r7, #6
    52e6:	881b      	ldrh	r3, [r3, #0]
    52e8:	2bff      	cmp	r3, #255	; 0xff
    52ea:	d00a      	beq.n	5302 <prvTraceGetDTS+0x36>
    52ec:	1dbb      	adds	r3, r7, #6
    52ee:	881b      	ldrh	r3, [r3, #0]
    52f0:	4a60      	ldr	r2, [pc, #384]	; (5474 <prvTraceGetDTS+0x1a8>)
    52f2:	4293      	cmp	r3, r2
    52f4:	d005      	beq.n	5302 <prvTraceGetDTS+0x36>
    52f6:	4b60      	ldr	r3, [pc, #384]	; (5478 <prvTraceGetDTS+0x1ac>)
    52f8:	0018      	movs	r0, r3
    52fa:	4b60      	ldr	r3, [pc, #384]	; (547c <prvTraceGetDTS+0x1b0>)
    52fc:	4798      	blx	r3
    52fe:	2300      	movs	r3, #0
    5300:	e0b3      	b.n	546a <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
    5302:	4b5f      	ldr	r3, [pc, #380]	; (5480 <prvTraceGetDTS+0x1b4>)
    5304:	681b      	ldr	r3, [r3, #0]
    5306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5308:	2b00      	cmp	r3, #0
    530a:	d118      	bne.n	533e <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
    530c:	4b5d      	ldr	r3, [pc, #372]	; (5484 <prvTraceGetDTS+0x1b8>)
    530e:	681b      	ldr	r3, [r3, #0]
    5310:	2b00      	cmp	r3, #0
    5312:	d006      	beq.n	5322 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    5314:	4b5a      	ldr	r3, [pc, #360]	; (5480 <prvTraceGetDTS+0x1b4>)
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	4a5a      	ldr	r2, [pc, #360]	; (5484 <prvTraceGetDTS+0x1b8>)
    531a:	6812      	ldr	r2, [r2, #0]
    531c:	0892      	lsrs	r2, r2, #2
    531e:	625a      	str	r2, [r3, #36]	; 0x24
    5320:	e00d      	b.n	533e <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    5322:	4b59      	ldr	r3, [pc, #356]	; (5488 <prvTraceGetDTS+0x1bc>)
    5324:	681a      	ldr	r2, [r3, #0]
    5326:	4b59      	ldr	r3, [pc, #356]	; (548c <prvTraceGetDTS+0x1c0>)
    5328:	681b      	ldr	r3, [r3, #0]
    532a:	429a      	cmp	r2, r3
    532c:	d007      	beq.n	533e <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    532e:	4b54      	ldr	r3, [pc, #336]	; (5480 <prvTraceGetDTS+0x1b4>)
    5330:	681c      	ldr	r4, [r3, #0]
    5332:	2000      	movs	r0, #0
    5334:	4b56      	ldr	r3, [pc, #344]	; (5490 <prvTraceGetDTS+0x1c4>)
    5336:	4798      	blx	r3
    5338:	0003      	movs	r3, r0
    533a:	089b      	lsrs	r3, r3, #2
    533c:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
    533e:	230c      	movs	r3, #12
    5340:	18fb      	adds	r3, r7, r3
    5342:	0018      	movs	r0, r3
    5344:	4b53      	ldr	r3, [pc, #332]	; (5494 <prvTraceGetDTS+0x1c8>)
    5346:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
    5348:	68fa      	ldr	r2, [r7, #12]
    534a:	4b53      	ldr	r3, [pc, #332]	; (5498 <prvTraceGetDTS+0x1cc>)
    534c:	681b      	ldr	r3, [r3, #0]
    534e:	1ad3      	subs	r3, r2, r3
    5350:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
    5352:	68fa      	ldr	r2, [r7, #12]
    5354:	4b50      	ldr	r3, [pc, #320]	; (5498 <prvTraceGetDTS+0x1cc>)
    5356:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
    5358:	4b49      	ldr	r3, [pc, #292]	; (5480 <prvTraceGetDTS+0x1b4>)
    535a:	681b      	ldr	r3, [r3, #0]
    535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    535e:	2b00      	cmp	r3, #0
    5360:	d044      	beq.n	53ec <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
    5362:	4b47      	ldr	r3, [pc, #284]	; (5480 <prvTraceGetDTS+0x1b4>)
    5364:	681b      	ldr	r3, [r3, #0]
    5366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5368:	693b      	ldr	r3, [r7, #16]
    536a:	429a      	cmp	r2, r3
    536c:	d21e      	bcs.n	53ac <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    536e:	4b44      	ldr	r3, [pc, #272]	; (5480 <prvTraceGetDTS+0x1b4>)
    5370:	681c      	ldr	r4, [r3, #0]
    5372:	4b43      	ldr	r3, [pc, #268]	; (5480 <prvTraceGetDTS+0x1b4>)
    5374:	681b      	ldr	r3, [r3, #0]
    5376:	6add      	ldr	r5, [r3, #44]	; 0x2c
    5378:	4b41      	ldr	r3, [pc, #260]	; (5480 <prvTraceGetDTS+0x1b4>)
    537a:	681b      	ldr	r3, [r3, #0]
    537c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    537e:	4b47      	ldr	r3, [pc, #284]	; (549c <prvTraceGetDTS+0x1d0>)
    5380:	0011      	movs	r1, r2
    5382:	6938      	ldr	r0, [r7, #16]
    5384:	4798      	blx	r3
    5386:	0003      	movs	r3, r0
    5388:	18eb      	adds	r3, r5, r3
    538a:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    538c:	4b3c      	ldr	r3, [pc, #240]	; (5480 <prvTraceGetDTS+0x1b4>)
    538e:	681c      	ldr	r4, [r3, #0]
    5390:	4b3b      	ldr	r3, [pc, #236]	; (5480 <prvTraceGetDTS+0x1b4>)
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    5396:	4b3a      	ldr	r3, [pc, #232]	; (5480 <prvTraceGetDTS+0x1b4>)
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    539c:	693a      	ldr	r2, [r7, #16]
    539e:	4b40      	ldr	r3, [pc, #256]	; (54a0 <prvTraceGetDTS+0x1d4>)
    53a0:	0010      	movs	r0, r2
    53a2:	4798      	blx	r3
    53a4:	000b      	movs	r3, r1
    53a6:	18eb      	adds	r3, r5, r3
    53a8:	62a3      	str	r3, [r4, #40]	; 0x28
    53aa:	e007      	b.n	53bc <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
    53ac:	4b34      	ldr	r3, [pc, #208]	; (5480 <prvTraceGetDTS+0x1b4>)
    53ae:	681b      	ldr	r3, [r3, #0]
    53b0:	4a33      	ldr	r2, [pc, #204]	; (5480 <prvTraceGetDTS+0x1b4>)
    53b2:	6812      	ldr	r2, [r2, #0]
    53b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    53b6:	693a      	ldr	r2, [r7, #16]
    53b8:	188a      	adds	r2, r1, r2
    53ba:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    53bc:	4b30      	ldr	r3, [pc, #192]	; (5480 <prvTraceGetDTS+0x1b4>)
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    53c2:	4b2f      	ldr	r3, [pc, #188]	; (5480 <prvTraceGetDTS+0x1b4>)
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    53c8:	429a      	cmp	r2, r3
    53ca:	d313      	bcc.n	53f4 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
    53cc:	4b2c      	ldr	r3, [pc, #176]	; (5480 <prvTraceGetDTS+0x1b4>)
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53d2:	3201      	adds	r2, #1
    53d4:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    53d6:	4b2a      	ldr	r3, [pc, #168]	; (5480 <prvTraceGetDTS+0x1b4>)
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	4a29      	ldr	r2, [pc, #164]	; (5480 <prvTraceGetDTS+0x1b4>)
    53dc:	6812      	ldr	r2, [r2, #0]
    53de:	6a91      	ldr	r1, [r2, #40]	; 0x28
    53e0:	4a27      	ldr	r2, [pc, #156]	; (5480 <prvTraceGetDTS+0x1b4>)
    53e2:	6812      	ldr	r2, [r2, #0]
    53e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    53e6:	1a8a      	subs	r2, r1, r2
    53e8:	629a      	str	r2, [r3, #40]	; 0x28
    53ea:	e003      	b.n	53f4 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
    53ec:	4b24      	ldr	r3, [pc, #144]	; (5480 <prvTraceGetDTS+0x1b4>)
    53ee:	681b      	ldr	r3, [r3, #0]
    53f0:	68fa      	ldr	r2, [r7, #12]
    53f2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
    53f4:	1dbb      	adds	r3, r7, #6
    53f6:	881a      	ldrh	r2, [r3, #0]
    53f8:	693b      	ldr	r3, [r7, #16]
    53fa:	429a      	cmp	r2, r3
    53fc:	d22f      	bcs.n	545e <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    53fe:	4b29      	ldr	r3, [pc, #164]	; (54a4 <prvTraceGetDTS+0x1d8>)
    5400:	4798      	blx	r3
    5402:	0003      	movs	r3, r0
    5404:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
    5406:	697b      	ldr	r3, [r7, #20]
    5408:	2b00      	cmp	r3, #0
    540a:	d028      	beq.n	545e <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
    540c:	1dbb      	adds	r3, r7, #6
    540e:	881b      	ldrh	r3, [r3, #0]
    5410:	4a18      	ldr	r2, [pc, #96]	; (5474 <prvTraceGetDTS+0x1a8>)
    5412:	4293      	cmp	r3, r2
    5414:	d10b      	bne.n	542e <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
    5416:	697b      	ldr	r3, [r7, #20]
    5418:	22a9      	movs	r2, #169	; 0xa9
    541a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    541c:	693b      	ldr	r3, [r7, #16]
    541e:	0c1b      	lsrs	r3, r3, #16
    5420:	b29a      	uxth	r2, r3
    5422:	697b      	ldr	r3, [r7, #20]
    5424:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
    5426:	697b      	ldr	r3, [r7, #20]
    5428:	2200      	movs	r2, #0
    542a:	705a      	strb	r2, [r3, #1]
    542c:	e015      	b.n	545a <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
    542e:	1dbb      	adds	r3, r7, #6
    5430:	881b      	ldrh	r3, [r3, #0]
    5432:	2bff      	cmp	r3, #255	; 0xff
    5434:	d10d      	bne.n	5452 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
    5436:	697b      	ldr	r3, [r7, #20]
    5438:	22a8      	movs	r2, #168	; 0xa8
    543a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    543c:	693b      	ldr	r3, [r7, #16]
    543e:	0a1b      	lsrs	r3, r3, #8
    5440:	b29a      	uxth	r2, r3
    5442:	697b      	ldr	r3, [r7, #20]
    5444:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    5446:	693b      	ldr	r3, [r7, #16]
    5448:	0e1b      	lsrs	r3, r3, #24
    544a:	b2da      	uxtb	r2, r3
    544c:	697b      	ldr	r3, [r7, #20]
    544e:	705a      	strb	r2, [r3, #1]
    5450:	e003      	b.n	545a <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    5452:	4b15      	ldr	r3, [pc, #84]	; (54a8 <prvTraceGetDTS+0x1dc>)
    5454:	0018      	movs	r0, r3
    5456:	4b09      	ldr	r3, [pc, #36]	; (547c <prvTraceGetDTS+0x1b0>)
    5458:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
    545a:	4b14      	ldr	r3, [pc, #80]	; (54ac <prvTraceGetDTS+0x1e0>)
    545c:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
    545e:	693b      	ldr	r3, [r7, #16]
    5460:	b29b      	uxth	r3, r3
    5462:	1dba      	adds	r2, r7, #6
    5464:	8812      	ldrh	r2, [r2, #0]
    5466:	4013      	ands	r3, r2
    5468:	b29b      	uxth	r3, r3
}
    546a:	0018      	movs	r0, r3
    546c:	46bd      	mov	sp, r7
    546e:	b006      	add	sp, #24
    5470:	bdb0      	pop	{r4, r5, r7, pc}
    5472:	46c0      	nop			; (mov r8, r8)
    5474:	0000ffff 	.word	0x0000ffff
    5478:	00010468 	.word	0x00010468
    547c:	000050c5 	.word	0x000050c5
    5480:	200003f8 	.word	0x200003f8
    5484:	20000354 	.word	0x20000354
    5488:	e000e018 	.word	0xe000e018
    548c:	20004a98 	.word	0x20004a98
    5490:	0000ba5d 	.word	0x0000ba5d
    5494:	000054b1 	.word	0x000054b1
    5498:	20000404 	.word	0x20000404
    549c:	0000c405 	.word	0x0000c405
    54a0:	0000c511 	.word	0x0000c511
    54a4:	00004c79 	.word	0x00004c79
    54a8:	000104a8 	.word	0x000104a8
    54ac:	00005275 	.word	0x00005275

000054b0 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    54b0:	b580      	push	{r7, lr}
    54b2:	b084      	sub	sp, #16
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
    54b8:	2300      	movs	r3, #0
    54ba:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
    54bc:	2300      	movs	r3, #0
    54be:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    54c0:	4b2d      	ldr	r3, [pc, #180]	; (5578 <prvTracePortGetTimeStamp+0xc8>)
    54c2:	681b      	ldr	r3, [r3, #0]
    54c4:	2b01      	cmp	r3, #1
    54c6:	d107      	bne.n	54d8 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
    54c8:	687b      	ldr	r3, [r7, #4]
    54ca:	2b00      	cmp	r3, #0
    54cc:	d04f      	beq.n	556e <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
    54ce:	4b2b      	ldr	r3, [pc, #172]	; (557c <prvTracePortGetTimeStamp+0xcc>)
    54d0:	681a      	ldr	r2, [r3, #0]
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	601a      	str	r2, [r3, #0]
		return;
    54d6:	e04a      	b.n	556e <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    54d8:	4b29      	ldr	r3, [pc, #164]	; (5580 <prvTracePortGetTimeStamp+0xd0>)
    54da:	681a      	ldr	r2, [r3, #0]
    54dc:	4b29      	ldr	r3, [pc, #164]	; (5584 <prvTracePortGetTimeStamp+0xd4>)
    54de:	681b      	ldr	r3, [r3, #0]
    54e0:	1ad3      	subs	r3, r2, r3
    54e2:	3301      	adds	r3, #1
    54e4:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    54e6:	4b28      	ldr	r3, [pc, #160]	; (5588 <prvTracePortGetTimeStamp+0xd8>)
    54e8:	681a      	ldr	r2, [r3, #0]
    54ea:	4b28      	ldr	r3, [pc, #160]	; (558c <prvTracePortGetTimeStamp+0xdc>)
    54ec:	681b      	ldr	r3, [r3, #0]
    54ee:	1ad3      	subs	r3, r2, r3
    54f0:	3b01      	subs	r3, #1
    54f2:	2b00      	cmp	r3, #0
    54f4:	db03      	blt.n	54fe <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
    54f6:	4b24      	ldr	r3, [pc, #144]	; (5588 <prvTracePortGetTimeStamp+0xd8>)
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	60fb      	str	r3, [r7, #12]
    54fc:	e002      	b.n	5504 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
    54fe:	4b23      	ldr	r3, [pc, #140]	; (558c <prvTracePortGetTimeStamp+0xdc>)
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    5504:	4b20      	ldr	r3, [pc, #128]	; (5588 <prvTracePortGetTimeStamp+0xd8>)
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	68fa      	ldr	r2, [r7, #12]
    550a:	429a      	cmp	r2, r3
    550c:	d107      	bne.n	551e <prvTracePortGetTimeStamp+0x6e>
    550e:	4b20      	ldr	r3, [pc, #128]	; (5590 <prvTracePortGetTimeStamp+0xe0>)
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	68ba      	ldr	r2, [r7, #8]
    5514:	429a      	cmp	r2, r3
    5516:	d202      	bcs.n	551e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    5518:	68fb      	ldr	r3, [r7, #12]
    551a:	3301      	adds	r3, #1
    551c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    551e:	687b      	ldr	r3, [r7, #4]
    5520:	2b00      	cmp	r3, #0
    5522:	d016      	beq.n	5552 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    5524:	4b16      	ldr	r3, [pc, #88]	; (5580 <prvTracePortGetTimeStamp+0xd0>)
    5526:	681b      	ldr	r3, [r3, #0]
    5528:	3301      	adds	r3, #1
    552a:	089b      	lsrs	r3, r3, #2
    552c:	68fa      	ldr	r2, [r7, #12]
    552e:	435a      	muls	r2, r3
    5530:	4b12      	ldr	r3, [pc, #72]	; (557c <prvTracePortGetTimeStamp+0xcc>)
    5532:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    5534:	4b12      	ldr	r3, [pc, #72]	; (5580 <prvTracePortGetTimeStamp+0xd0>)
    5536:	681b      	ldr	r3, [r3, #0]
    5538:	3301      	adds	r3, #1
    553a:	2203      	movs	r2, #3
    553c:	4013      	ands	r3, r2
    553e:	68fa      	ldr	r2, [r7, #12]
    5540:	435a      	muls	r2, r3
    5542:	68bb      	ldr	r3, [r7, #8]
    5544:	18d3      	adds	r3, r2, r3
    5546:	089a      	lsrs	r2, r3, #2
    5548:	4b0c      	ldr	r3, [pc, #48]	; (557c <prvTracePortGetTimeStamp+0xcc>)
    554a:	681b      	ldr	r3, [r3, #0]
    554c:	18d2      	adds	r2, r2, r3
    554e:	4b0b      	ldr	r3, [pc, #44]	; (557c <prvTracePortGetTimeStamp+0xcc>)
    5550:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    5552:	4b0d      	ldr	r3, [pc, #52]	; (5588 <prvTracePortGetTimeStamp+0xd8>)
    5554:	68fa      	ldr	r2, [r7, #12]
    5556:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	2b00      	cmp	r3, #0
    555c:	d003      	beq.n	5566 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
    555e:	4b07      	ldr	r3, [pc, #28]	; (557c <prvTracePortGetTimeStamp+0xcc>)
    5560:	681a      	ldr	r2, [r3, #0]
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    5566:	4b0a      	ldr	r3, [pc, #40]	; (5590 <prvTracePortGetTimeStamp+0xe0>)
    5568:	68ba      	ldr	r2, [r7, #8]
    556a:	601a      	str	r2, [r3, #0]
    556c:	e000      	b.n	5570 <prvTracePortGetTimeStamp+0xc0>
		return;
    556e:	46c0      	nop			; (mov r8, r8)
}
    5570:	46bd      	mov	sp, r7
    5572:	b004      	add	sp, #16
    5574:	bd80      	pop	{r7, pc}
    5576:	46c0      	nop			; (mov r8, r8)
    5578:	20000344 	.word	0x20000344
    557c:	20000348 	.word	0x20000348
    5580:	e000e014 	.word	0xe000e014
    5584:	e000e018 	.word	0xe000e018
    5588:	20000408 	.word	0x20000408
    558c:	20000340 	.word	0x20000340
    5590:	2000040c 	.word	0x2000040c

00005594 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    5594:	b580      	push	{r7, lr}
    5596:	b082      	sub	sp, #8
    5598:	af00      	add	r7, sp, #0
    559a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    559c:	687b      	ldr	r3, [r7, #4]
    559e:	3308      	adds	r3, #8
    55a0:	001a      	movs	r2, r3
    55a2:	687b      	ldr	r3, [r7, #4]
    55a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    55a6:	687b      	ldr	r3, [r7, #4]
    55a8:	2201      	movs	r2, #1
    55aa:	4252      	negs	r2, r2
    55ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    55ae:	687b      	ldr	r3, [r7, #4]
    55b0:	3308      	adds	r3, #8
    55b2:	001a      	movs	r2, r3
    55b4:	687b      	ldr	r3, [r7, #4]
    55b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	3308      	adds	r3, #8
    55bc:	001a      	movs	r2, r3
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    55c2:	687b      	ldr	r3, [r7, #4]
    55c4:	2200      	movs	r2, #0
    55c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    55c8:	46c0      	nop			; (mov r8, r8)
    55ca:	46bd      	mov	sp, r7
    55cc:	b002      	add	sp, #8
    55ce:	bd80      	pop	{r7, pc}

000055d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    55d0:	b580      	push	{r7, lr}
    55d2:	b082      	sub	sp, #8
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	2200      	movs	r2, #0
    55dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    55de:	46c0      	nop			; (mov r8, r8)
    55e0:	46bd      	mov	sp, r7
    55e2:	b002      	add	sp, #8
    55e4:	bd80      	pop	{r7, pc}

000055e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    55e6:	b580      	push	{r7, lr}
    55e8:	b084      	sub	sp, #16
    55ea:	af00      	add	r7, sp, #0
    55ec:	6078      	str	r0, [r7, #4]
    55ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	685b      	ldr	r3, [r3, #4]
    55f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    55f6:	683b      	ldr	r3, [r7, #0]
    55f8:	68fa      	ldr	r2, [r7, #12]
    55fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	689a      	ldr	r2, [r3, #8]
    5600:	683b      	ldr	r3, [r7, #0]
    5602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    5604:	68fb      	ldr	r3, [r7, #12]
    5606:	689b      	ldr	r3, [r3, #8]
    5608:	683a      	ldr	r2, [r7, #0]
    560a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    560c:	68fb      	ldr	r3, [r7, #12]
    560e:	683a      	ldr	r2, [r7, #0]
    5610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    5612:	683b      	ldr	r3, [r7, #0]
    5614:	687a      	ldr	r2, [r7, #4]
    5616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	681b      	ldr	r3, [r3, #0]
    561c:	1c5a      	adds	r2, r3, #1
    561e:	687b      	ldr	r3, [r7, #4]
    5620:	601a      	str	r2, [r3, #0]
}
    5622:	46c0      	nop			; (mov r8, r8)
    5624:	46bd      	mov	sp, r7
    5626:	b004      	add	sp, #16
    5628:	bd80      	pop	{r7, pc}

0000562a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    562a:	b580      	push	{r7, lr}
    562c:	b084      	sub	sp, #16
    562e:	af00      	add	r7, sp, #0
    5630:	6078      	str	r0, [r7, #4]
    5632:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    5634:	683b      	ldr	r3, [r7, #0]
    5636:	681b      	ldr	r3, [r3, #0]
    5638:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    563a:	68bb      	ldr	r3, [r7, #8]
    563c:	3301      	adds	r3, #1
    563e:	d103      	bne.n	5648 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	691b      	ldr	r3, [r3, #16]
    5644:	60fb      	str	r3, [r7, #12]
    5646:	e00c      	b.n	5662 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    5648:	687b      	ldr	r3, [r7, #4]
    564a:	3308      	adds	r3, #8
    564c:	60fb      	str	r3, [r7, #12]
    564e:	e002      	b.n	5656 <vListInsert+0x2c>
    5650:	68fb      	ldr	r3, [r7, #12]
    5652:	685b      	ldr	r3, [r3, #4]
    5654:	60fb      	str	r3, [r7, #12]
    5656:	68fb      	ldr	r3, [r7, #12]
    5658:	685b      	ldr	r3, [r3, #4]
    565a:	681a      	ldr	r2, [r3, #0]
    565c:	68bb      	ldr	r3, [r7, #8]
    565e:	429a      	cmp	r2, r3
    5660:	d9f6      	bls.n	5650 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    5662:	68fb      	ldr	r3, [r7, #12]
    5664:	685a      	ldr	r2, [r3, #4]
    5666:	683b      	ldr	r3, [r7, #0]
    5668:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    566a:	683b      	ldr	r3, [r7, #0]
    566c:	685b      	ldr	r3, [r3, #4]
    566e:	683a      	ldr	r2, [r7, #0]
    5670:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    5672:	683b      	ldr	r3, [r7, #0]
    5674:	68fa      	ldr	r2, [r7, #12]
    5676:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    5678:	68fb      	ldr	r3, [r7, #12]
    567a:	683a      	ldr	r2, [r7, #0]
    567c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    567e:	683b      	ldr	r3, [r7, #0]
    5680:	687a      	ldr	r2, [r7, #4]
    5682:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    5684:	687b      	ldr	r3, [r7, #4]
    5686:	681b      	ldr	r3, [r3, #0]
    5688:	1c5a      	adds	r2, r3, #1
    568a:	687b      	ldr	r3, [r7, #4]
    568c:	601a      	str	r2, [r3, #0]
}
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	46bd      	mov	sp, r7
    5692:	b004      	add	sp, #16
    5694:	bd80      	pop	{r7, pc}

00005696 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    5696:	b580      	push	{r7, lr}
    5698:	b084      	sub	sp, #16
    569a:	af00      	add	r7, sp, #0
    569c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    569e:	687b      	ldr	r3, [r7, #4]
    56a0:	691b      	ldr	r3, [r3, #16]
    56a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	685b      	ldr	r3, [r3, #4]
    56a8:	687a      	ldr	r2, [r7, #4]
    56aa:	6892      	ldr	r2, [r2, #8]
    56ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    56ae:	687b      	ldr	r3, [r7, #4]
    56b0:	689b      	ldr	r3, [r3, #8]
    56b2:	687a      	ldr	r2, [r7, #4]
    56b4:	6852      	ldr	r2, [r2, #4]
    56b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    56b8:	68fb      	ldr	r3, [r7, #12]
    56ba:	685a      	ldr	r2, [r3, #4]
    56bc:	687b      	ldr	r3, [r7, #4]
    56be:	429a      	cmp	r2, r3
    56c0:	d103      	bne.n	56ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    56c2:	687b      	ldr	r3, [r7, #4]
    56c4:	689a      	ldr	r2, [r3, #8]
    56c6:	68fb      	ldr	r3, [r7, #12]
    56c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	2200      	movs	r2, #0
    56ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    56d0:	68fb      	ldr	r3, [r7, #12]
    56d2:	681b      	ldr	r3, [r3, #0]
    56d4:	1e5a      	subs	r2, r3, #1
    56d6:	68fb      	ldr	r3, [r7, #12]
    56d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    56da:	68fb      	ldr	r3, [r7, #12]
    56dc:	681b      	ldr	r3, [r3, #0]
}
    56de:	0018      	movs	r0, r3
    56e0:	46bd      	mov	sp, r7
    56e2:	b004      	add	sp, #16
    56e4:	bd80      	pop	{r7, pc}
	...

000056e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    56e8:	b580      	push	{r7, lr}
    56ea:	b084      	sub	sp, #16
    56ec:	af00      	add	r7, sp, #0
    56ee:	60f8      	str	r0, [r7, #12]
    56f0:	60b9      	str	r1, [r7, #8]
    56f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    56f4:	68fb      	ldr	r3, [r7, #12]
    56f6:	3b04      	subs	r3, #4
    56f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	2280      	movs	r2, #128	; 0x80
    56fe:	0452      	lsls	r2, r2, #17
    5700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5702:	68fb      	ldr	r3, [r7, #12]
    5704:	3b04      	subs	r3, #4
    5706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    5708:	68ba      	ldr	r2, [r7, #8]
    570a:	68fb      	ldr	r3, [r7, #12]
    570c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    570e:	68fb      	ldr	r3, [r7, #12]
    5710:	3b04      	subs	r3, #4
    5712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    5714:	4a08      	ldr	r2, [pc, #32]	; (5738 <pxPortInitialiseStack+0x50>)
    5716:	68fb      	ldr	r3, [r7, #12]
    5718:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    571a:	68fb      	ldr	r3, [r7, #12]
    571c:	3b14      	subs	r3, #20
    571e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    5720:	687a      	ldr	r2, [r7, #4]
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    5726:	68fb      	ldr	r3, [r7, #12]
    5728:	3b20      	subs	r3, #32
    572a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    572c:	68fb      	ldr	r3, [r7, #12]
}
    572e:	0018      	movs	r0, r3
    5730:	46bd      	mov	sp, r7
    5732:	b004      	add	sp, #16
    5734:	bd80      	pop	{r7, pc}
    5736:	46c0      	nop			; (mov r8, r8)
    5738:	0000573d 	.word	0x0000573d

0000573c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    573c:	b580      	push	{r7, lr}
    573e:	b082      	sub	sp, #8
    5740:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
    5742:	2300      	movs	r3, #0
    5744:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    5746:	4b07      	ldr	r3, [pc, #28]	; (5764 <prvTaskExitError+0x28>)
    5748:	681b      	ldr	r3, [r3, #0]
    574a:	3301      	adds	r3, #1
    574c:	d001      	beq.n	5752 <prvTaskExitError+0x16>
    574e:	b672      	cpsid	i
    5750:	e7fe      	b.n	5750 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    5752:	b672      	cpsid	i
	while( ulDummy == 0 )
    5754:	46c0      	nop			; (mov r8, r8)
    5756:	687b      	ldr	r3, [r7, #4]
    5758:	2b00      	cmp	r3, #0
    575a:	d0fc      	beq.n	5756 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    575c:	46c0      	nop			; (mov r8, r8)
    575e:	46bd      	mov	sp, r7
    5760:	b002      	add	sp, #8
    5762:	bd80      	pop	{r7, pc}
    5764:	20000028 	.word	0x20000028

00005768 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    5768:	b580      	push	{r7, lr}
    576a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    576c:	46c0      	nop			; (mov r8, r8)
    576e:	46bd      	mov	sp, r7
    5770:	bd80      	pop	{r7, pc}
	...

00005780 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    5780:	4a0b      	ldr	r2, [pc, #44]	; (57b0 <pxCurrentTCBConst2>)
    5782:	6813      	ldr	r3, [r2, #0]
    5784:	6818      	ldr	r0, [r3, #0]
    5786:	3020      	adds	r0, #32
    5788:	f380 8809 	msr	PSP, r0
    578c:	2002      	movs	r0, #2
    578e:	f380 8814 	msr	CONTROL, r0
    5792:	f3bf 8f6f 	isb	sy
    5796:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    5798:	46ae      	mov	lr, r5
    579a:	bc08      	pop	{r3}
    579c:	bc04      	pop	{r2}
    579e:	b662      	cpsie	i
    57a0:	4718      	bx	r3
    57a2:	46c0      	nop			; (mov r8, r8)
    57a4:	46c0      	nop			; (mov r8, r8)
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	46c0      	nop			; (mov r8, r8)
    57aa:	46c0      	nop			; (mov r8, r8)
    57ac:	46c0      	nop			; (mov r8, r8)
    57ae:	46c0      	nop			; (mov r8, r8)

000057b0 <pxCurrentTCBConst2>:
    57b0:	200036e0 	.word	0x200036e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    57b4:	46c0      	nop			; (mov r8, r8)
    57b6:	46c0      	nop			; (mov r8, r8)

000057b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    57b8:	b580      	push	{r7, lr}
    57ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    57bc:	4b0e      	ldr	r3, [pc, #56]	; (57f8 <xPortStartScheduler+0x40>)
    57be:	4a0e      	ldr	r2, [pc, #56]	; (57f8 <xPortStartScheduler+0x40>)
    57c0:	6812      	ldr	r2, [r2, #0]
    57c2:	21ff      	movs	r1, #255	; 0xff
    57c4:	0409      	lsls	r1, r1, #16
    57c6:	430a      	orrs	r2, r1
    57c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    57ca:	4b0b      	ldr	r3, [pc, #44]	; (57f8 <xPortStartScheduler+0x40>)
    57cc:	4a0a      	ldr	r2, [pc, #40]	; (57f8 <xPortStartScheduler+0x40>)
    57ce:	6812      	ldr	r2, [r2, #0]
    57d0:	21ff      	movs	r1, #255	; 0xff
    57d2:	0609      	lsls	r1, r1, #24
    57d4:	430a      	orrs	r2, r1
    57d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    57d8:	4b08      	ldr	r3, [pc, #32]	; (57fc <xPortStartScheduler+0x44>)
    57da:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    57dc:	4b08      	ldr	r3, [pc, #32]	; (5800 <xPortStartScheduler+0x48>)
    57de:	2200      	movs	r2, #0
    57e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    57e2:	4b08      	ldr	r3, [pc, #32]	; (5804 <xPortStartScheduler+0x4c>)
    57e4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    57e6:	4b08      	ldr	r3, [pc, #32]	; (5808 <xPortStartScheduler+0x50>)
    57e8:	4798      	blx	r3
	prvTaskExitError();
    57ea:	4b08      	ldr	r3, [pc, #32]	; (580c <xPortStartScheduler+0x54>)
    57ec:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    57ee:	2300      	movs	r3, #0
}
    57f0:	0018      	movs	r0, r3
    57f2:	46bd      	mov	sp, r7
    57f4:	bd80      	pop	{r7, pc}
    57f6:	46c0      	nop			; (mov r8, r8)
    57f8:	e000ed20 	.word	0xe000ed20
    57fc:	00005919 	.word	0x00005919
    5800:	20000028 	.word	0x20000028
    5804:	00005781 	.word	0x00005781
    5808:	00007e6d 	.word	0x00007e6d
    580c:	0000573d 	.word	0x0000573d

00005810 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    5810:	b580      	push	{r7, lr}
    5812:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    5814:	4b03      	ldr	r3, [pc, #12]	; (5824 <vPortYield+0x14>)
    5816:	2280      	movs	r2, #128	; 0x80
    5818:	0552      	lsls	r2, r2, #21
    581a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
    581c:	46c0      	nop			; (mov r8, r8)
    581e:	46bd      	mov	sp, r7
    5820:	bd80      	pop	{r7, pc}
    5822:	46c0      	nop			; (mov r8, r8)
    5824:	e000ed04 	.word	0xe000ed04

00005828 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5828:	b580      	push	{r7, lr}
    582a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    582c:	b672      	cpsid	i
    uxCriticalNesting++;
    582e:	4b06      	ldr	r3, [pc, #24]	; (5848 <vPortEnterCritical+0x20>)
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	1c5a      	adds	r2, r3, #1
    5834:	4b04      	ldr	r3, [pc, #16]	; (5848 <vPortEnterCritical+0x20>)
    5836:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    5838:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    583c:	f3bf 8f6f 	isb	sy
}
    5840:	46c0      	nop			; (mov r8, r8)
    5842:	46bd      	mov	sp, r7
    5844:	bd80      	pop	{r7, pc}
    5846:	46c0      	nop			; (mov r8, r8)
    5848:	20000028 	.word	0x20000028

0000584c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    584c:	b580      	push	{r7, lr}
    584e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    5850:	4b09      	ldr	r3, [pc, #36]	; (5878 <vPortExitCritical+0x2c>)
    5852:	681b      	ldr	r3, [r3, #0]
    5854:	2b00      	cmp	r3, #0
    5856:	d101      	bne.n	585c <vPortExitCritical+0x10>
    5858:	b672      	cpsid	i
    585a:	e7fe      	b.n	585a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    585c:	4b06      	ldr	r3, [pc, #24]	; (5878 <vPortExitCritical+0x2c>)
    585e:	681b      	ldr	r3, [r3, #0]
    5860:	1e5a      	subs	r2, r3, #1
    5862:	4b05      	ldr	r3, [pc, #20]	; (5878 <vPortExitCritical+0x2c>)
    5864:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    5866:	4b04      	ldr	r3, [pc, #16]	; (5878 <vPortExitCritical+0x2c>)
    5868:	681b      	ldr	r3, [r3, #0]
    586a:	2b00      	cmp	r3, #0
    586c:	d100      	bne.n	5870 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    586e:	b662      	cpsie	i
    }
}
    5870:	46c0      	nop			; (mov r8, r8)
    5872:	46bd      	mov	sp, r7
    5874:	bd80      	pop	{r7, pc}
    5876:	46c0      	nop			; (mov r8, r8)
    5878:	20000028 	.word	0x20000028

0000587c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    587c:	f3ef 8010 	mrs	r0, PRIMASK
    5880:	b672      	cpsid	i
    5882:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    5884:	46c0      	nop			; (mov r8, r8)
    5886:	0018      	movs	r0, r3

00005888 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
    5888:	f380 8810 	msr	PRIMASK, r0
    588c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
    588e:	46c0      	nop			; (mov r8, r8)

00005890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5890:	f3ef 8009 	mrs	r0, PSP
    5894:	4b0e      	ldr	r3, [pc, #56]	; (58d0 <pxCurrentTCBConst>)
    5896:	681a      	ldr	r2, [r3, #0]
    5898:	3820      	subs	r0, #32
    589a:	6010      	str	r0, [r2, #0]
    589c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    589e:	4644      	mov	r4, r8
    58a0:	464d      	mov	r5, r9
    58a2:	4656      	mov	r6, sl
    58a4:	465f      	mov	r7, fp
    58a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    58a8:	b508      	push	{r3, lr}
    58aa:	b672      	cpsid	i
    58ac:	f002 fade 	bl	7e6c <vTaskSwitchContext>
    58b0:	b662      	cpsie	i
    58b2:	bc0c      	pop	{r2, r3}
    58b4:	6811      	ldr	r1, [r2, #0]
    58b6:	6808      	ldr	r0, [r1, #0]
    58b8:	3010      	adds	r0, #16
    58ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    58bc:	46a0      	mov	r8, r4
    58be:	46a9      	mov	r9, r5
    58c0:	46b2      	mov	sl, r6
    58c2:	46bb      	mov	fp, r7
    58c4:	f380 8809 	msr	PSP, r0
    58c8:	3820      	subs	r0, #32
    58ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    58cc:	4718      	bx	r3
    58ce:	46c0      	nop			; (mov r8, r8)

000058d0 <pxCurrentTCBConst>:
    58d0:	200036e0 	.word	0x200036e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    58d4:	46c0      	nop			; (mov r8, r8)
    58d6:	46c0      	nop			; (mov r8, r8)

000058d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    58d8:	b580      	push	{r7, lr}
    58da:	b082      	sub	sp, #8
    58dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    58de:	4b0a      	ldr	r3, [pc, #40]	; (5908 <SysTick_Handler+0x30>)
    58e0:	4798      	blx	r3
    58e2:	0003      	movs	r3, r0
    58e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    58e6:	4b09      	ldr	r3, [pc, #36]	; (590c <SysTick_Handler+0x34>)
    58e8:	4798      	blx	r3
    58ea:	1e03      	subs	r3, r0, #0
    58ec:	d003      	beq.n	58f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    58ee:	4b08      	ldr	r3, [pc, #32]	; (5910 <SysTick_Handler+0x38>)
    58f0:	2280      	movs	r2, #128	; 0x80
    58f2:	0552      	lsls	r2, r2, #21
    58f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    58f6:	687b      	ldr	r3, [r7, #4]
    58f8:	0018      	movs	r0, r3
    58fa:	4b06      	ldr	r3, [pc, #24]	; (5914 <SysTick_Handler+0x3c>)
    58fc:	4798      	blx	r3
}
    58fe:	46c0      	nop			; (mov r8, r8)
    5900:	46bd      	mov	sp, r7
    5902:	b002      	add	sp, #8
    5904:	bd80      	pop	{r7, pc}
    5906:	46c0      	nop			; (mov r8, r8)
    5908:	0000587d 	.word	0x0000587d
    590c:	00007c7d 	.word	0x00007c7d
    5910:	e000ed04 	.word	0xe000ed04
    5914:	00005889 	.word	0x00005889

00005918 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5918:	b5b0      	push	{r4, r5, r7, lr}
    591a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    591c:	4b0b      	ldr	r3, [pc, #44]	; (594c <prvSetupTimerInterrupt+0x34>)
    591e:	2200      	movs	r2, #0
    5920:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    5922:	4b0b      	ldr	r3, [pc, #44]	; (5950 <prvSetupTimerInterrupt+0x38>)
    5924:	2200      	movs	r2, #0
    5926:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5928:	4c0a      	ldr	r4, [pc, #40]	; (5954 <prvSetupTimerInterrupt+0x3c>)
    592a:	2000      	movs	r0, #0
    592c:	4b0a      	ldr	r3, [pc, #40]	; (5958 <prvSetupTimerInterrupt+0x40>)
    592e:	4798      	blx	r3
    5930:	4b0a      	ldr	r3, [pc, #40]	; (595c <prvSetupTimerInterrupt+0x44>)
    5932:	22fa      	movs	r2, #250	; 0xfa
    5934:	0091      	lsls	r1, r2, #2
    5936:	4798      	blx	r3
    5938:	0003      	movs	r3, r0
    593a:	3b01      	subs	r3, #1
    593c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    593e:	4b03      	ldr	r3, [pc, #12]	; (594c <prvSetupTimerInterrupt+0x34>)
    5940:	2207      	movs	r2, #7
    5942:	601a      	str	r2, [r3, #0]
}
    5944:	46c0      	nop			; (mov r8, r8)
    5946:	46bd      	mov	sp, r7
    5948:	bdb0      	pop	{r4, r5, r7, pc}
    594a:	46c0      	nop			; (mov r8, r8)
    594c:	e000e010 	.word	0xe000e010
    5950:	e000e018 	.word	0xe000e018
    5954:	e000e014 	.word	0xe000e014
    5958:	0000ba5d 	.word	0x0000ba5d
    595c:	0000c405 	.word	0x0000c405

00005960 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5960:	b580      	push	{r7, lr}
    5962:	b084      	sub	sp, #16
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    5968:	2300      	movs	r3, #0
    596a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	2207      	movs	r2, #7
    5970:	4013      	ands	r3, r2
    5972:	d004      	beq.n	597e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5974:	687b      	ldr	r3, [r7, #4]
    5976:	2207      	movs	r2, #7
    5978:	4393      	bics	r3, r2
    597a:	3308      	adds	r3, #8
    597c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    597e:	4b21      	ldr	r3, [pc, #132]	; (5a04 <pvPortMalloc+0xa4>)
    5980:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    5982:	4b21      	ldr	r3, [pc, #132]	; (5a08 <pvPortMalloc+0xa8>)
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	2b00      	cmp	r3, #0
    5988:	d105      	bne.n	5996 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    598a:	4b20      	ldr	r3, [pc, #128]	; (5a0c <pvPortMalloc+0xac>)
    598c:	2207      	movs	r2, #7
    598e:	4393      	bics	r3, r2
    5990:	001a      	movs	r2, r3
    5992:	4b1d      	ldr	r3, [pc, #116]	; (5a08 <pvPortMalloc+0xa8>)
    5994:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    5996:	4b1e      	ldr	r3, [pc, #120]	; (5a10 <pvPortMalloc+0xb0>)
    5998:	681a      	ldr	r2, [r3, #0]
    599a:	687b      	ldr	r3, [r7, #4]
    599c:	18d3      	adds	r3, r2, r3
    599e:	4a1d      	ldr	r2, [pc, #116]	; (5a14 <pvPortMalloc+0xb4>)
    59a0:	4293      	cmp	r3, r2
    59a2:	d813      	bhi.n	59cc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    59a4:	4b1a      	ldr	r3, [pc, #104]	; (5a10 <pvPortMalloc+0xb0>)
    59a6:	681a      	ldr	r2, [r3, #0]
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	18d2      	adds	r2, r2, r3
    59ac:	4b18      	ldr	r3, [pc, #96]	; (5a10 <pvPortMalloc+0xb0>)
    59ae:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    59b0:	429a      	cmp	r2, r3
    59b2:	d90b      	bls.n	59cc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    59b4:	4b14      	ldr	r3, [pc, #80]	; (5a08 <pvPortMalloc+0xa8>)
    59b6:	681a      	ldr	r2, [r3, #0]
    59b8:	4b15      	ldr	r3, [pc, #84]	; (5a10 <pvPortMalloc+0xb0>)
    59ba:	681b      	ldr	r3, [r3, #0]
    59bc:	18d3      	adds	r3, r2, r3
    59be:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    59c0:	4b13      	ldr	r3, [pc, #76]	; (5a10 <pvPortMalloc+0xb0>)
    59c2:	681a      	ldr	r2, [r3, #0]
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	18d2      	adds	r2, r2, r3
    59c8:	4b11      	ldr	r3, [pc, #68]	; (5a10 <pvPortMalloc+0xb0>)
    59ca:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    59cc:	68fb      	ldr	r3, [r7, #12]
    59ce:	2b00      	cmp	r3, #0
    59d0:	d006      	beq.n	59e0 <pvPortMalloc+0x80>
    59d2:	68fb      	ldr	r3, [r7, #12]
    59d4:	687a      	ldr	r2, [r7, #4]
    59d6:	0019      	movs	r1, r3
    59d8:	2094      	movs	r0, #148	; 0x94
    59da:	4b0f      	ldr	r3, [pc, #60]	; (5a18 <pvPortMalloc+0xb8>)
    59dc:	4798      	blx	r3
    59de:	e005      	b.n	59ec <pvPortMalloc+0x8c>
    59e0:	68fb      	ldr	r3, [r7, #12]
    59e2:	687a      	ldr	r2, [r7, #4]
    59e4:	0019      	movs	r1, r3
    59e6:	20e8      	movs	r0, #232	; 0xe8
    59e8:	4b0b      	ldr	r3, [pc, #44]	; (5a18 <pvPortMalloc+0xb8>)
    59ea:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    59ec:	4b0b      	ldr	r3, [pc, #44]	; (5a1c <pvPortMalloc+0xbc>)
    59ee:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    59f0:	68fb      	ldr	r3, [r7, #12]
    59f2:	2b00      	cmp	r3, #0
    59f4:	d101      	bne.n	59fa <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    59f6:	4b0a      	ldr	r3, [pc, #40]	; (5a20 <pvPortMalloc+0xc0>)
    59f8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    59fa:	68fb      	ldr	r3, [r7, #12]
}
    59fc:	0018      	movs	r0, r3
    59fe:	46bd      	mov	sp, r7
    5a00:	b004      	add	sp, #16
    5a02:	bd80      	pop	{r7, pc}
    5a04:	00007ad9 	.word	0x00007ad9
    5a08:	200036dc 	.word	0x200036dc
    5a0c:	20000418 	.word	0x20000418
    5a10:	200036d8 	.word	0x200036d8
    5a14:	000032bf 	.word	0x000032bf
    5a18:	000040cd 	.word	0x000040cd
    5a1c:	00007af1 	.word	0x00007af1
    5a20:	0000c3d5 	.word	0x0000c3d5

00005a24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5a24:	b580      	push	{r7, lr}
    5a26:	b082      	sub	sp, #8
    5a28:	af00      	add	r7, sp, #0
    5a2a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d001      	beq.n	5a36 <vPortFree+0x12>
    5a32:	b672      	cpsid	i
    5a34:	e7fe      	b.n	5a34 <vPortFree+0x10>
}
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	46bd      	mov	sp, r7
    5a3a:	b002      	add	sp, #8
    5a3c:	bd80      	pop	{r7, pc}
	...

00005a40 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5a40:	b580      	push	{r7, lr}
    5a42:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    5a44:	4b03      	ldr	r3, [pc, #12]	; (5a54 <xPortGetFreeHeapSize+0x14>)
    5a46:	681b      	ldr	r3, [r3, #0]
    5a48:	22cb      	movs	r2, #203	; 0xcb
    5a4a:	0192      	lsls	r2, r2, #6
    5a4c:	1ad3      	subs	r3, r2, r3
}
    5a4e:	0018      	movs	r0, r3
    5a50:	46bd      	mov	sp, r7
    5a52:	bd80      	pop	{r7, pc}
    5a54:	200036d8 	.word	0x200036d8

00005a58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    5a58:	b580      	push	{r7, lr}
    5a5a:	b084      	sub	sp, #16
    5a5c:	af00      	add	r7, sp, #0
    5a5e:	6078      	str	r0, [r7, #4]
    5a60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5a62:	687b      	ldr	r3, [r7, #4]
    5a64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    5a66:	68fb      	ldr	r3, [r7, #12]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d101      	bne.n	5a70 <xQueueGenericReset+0x18>
    5a6c:	b672      	cpsid	i
    5a6e:	e7fe      	b.n	5a6e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    5a70:	4b23      	ldr	r3, [pc, #140]	; (5b00 <xQueueGenericReset+0xa8>)
    5a72:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    5a74:	68fb      	ldr	r3, [r7, #12]
    5a76:	681a      	ldr	r2, [r3, #0]
    5a78:	68fb      	ldr	r3, [r7, #12]
    5a7a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    5a7c:	68fb      	ldr	r3, [r7, #12]
    5a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a80:	434b      	muls	r3, r1
    5a82:	18d2      	adds	r2, r2, r3
    5a84:	68fb      	ldr	r3, [r7, #12]
    5a86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    5a88:	68fb      	ldr	r3, [r7, #12]
    5a8a:	2200      	movs	r2, #0
    5a8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    5a8e:	68fb      	ldr	r3, [r7, #12]
    5a90:	681a      	ldr	r2, [r3, #0]
    5a92:	68fb      	ldr	r3, [r7, #12]
    5a94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    5a96:	68fb      	ldr	r3, [r7, #12]
    5a98:	681a      	ldr	r2, [r3, #0]
    5a9a:	68fb      	ldr	r3, [r7, #12]
    5a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5a9e:	1e59      	subs	r1, r3, #1
    5aa0:	68fb      	ldr	r3, [r7, #12]
    5aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5aa4:	434b      	muls	r3, r1
    5aa6:	18d2      	adds	r2, r2, r3
    5aa8:	68fb      	ldr	r3, [r7, #12]
    5aaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	2244      	movs	r2, #68	; 0x44
    5ab0:	21ff      	movs	r1, #255	; 0xff
    5ab2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    5ab4:	68fb      	ldr	r3, [r7, #12]
    5ab6:	2245      	movs	r2, #69	; 0x45
    5ab8:	21ff      	movs	r1, #255	; 0xff
    5aba:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    5abc:	683b      	ldr	r3, [r7, #0]
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d10d      	bne.n	5ade <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5ac2:	68fb      	ldr	r3, [r7, #12]
    5ac4:	691b      	ldr	r3, [r3, #16]
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d013      	beq.n	5af2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    5aca:	68fb      	ldr	r3, [r7, #12]
    5acc:	3310      	adds	r3, #16
    5ace:	0018      	movs	r0, r3
    5ad0:	4b0c      	ldr	r3, [pc, #48]	; (5b04 <xQueueGenericReset+0xac>)
    5ad2:	4798      	blx	r3
    5ad4:	1e03      	subs	r3, r0, #0
    5ad6:	d00c      	beq.n	5af2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    5ad8:	4b0b      	ldr	r3, [pc, #44]	; (5b08 <xQueueGenericReset+0xb0>)
    5ada:	4798      	blx	r3
    5adc:	e009      	b.n	5af2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    5ade:	68fb      	ldr	r3, [r7, #12]
    5ae0:	3310      	adds	r3, #16
    5ae2:	0018      	movs	r0, r3
    5ae4:	4b09      	ldr	r3, [pc, #36]	; (5b0c <xQueueGenericReset+0xb4>)
    5ae6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    5ae8:	68fb      	ldr	r3, [r7, #12]
    5aea:	3324      	adds	r3, #36	; 0x24
    5aec:	0018      	movs	r0, r3
    5aee:	4b07      	ldr	r3, [pc, #28]	; (5b0c <xQueueGenericReset+0xb4>)
    5af0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    5af2:	4b07      	ldr	r3, [pc, #28]	; (5b10 <xQueueGenericReset+0xb8>)
    5af4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    5af6:	2301      	movs	r3, #1
}
    5af8:	0018      	movs	r0, r3
    5afa:	46bd      	mov	sp, r7
    5afc:	b004      	add	sp, #16
    5afe:	bd80      	pop	{r7, pc}
    5b00:	00005829 	.word	0x00005829
    5b04:	000080b1 	.word	0x000080b1
    5b08:	00005811 	.word	0x00005811
    5b0c:	00005595 	.word	0x00005595
    5b10:	0000584d 	.word	0x0000584d

00005b14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    5b14:	b590      	push	{r4, r7, lr}
    5b16:	b08b      	sub	sp, #44	; 0x2c
    5b18:	af02      	add	r7, sp, #8
    5b1a:	60f8      	str	r0, [r7, #12]
    5b1c:	60b9      	str	r1, [r7, #8]
    5b1e:	1dfb      	adds	r3, r7, #7
    5b20:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    5b22:	68fb      	ldr	r3, [r7, #12]
    5b24:	2b00      	cmp	r3, #0
    5b26:	d101      	bne.n	5b2c <xQueueGenericCreate+0x18>
    5b28:	b672      	cpsid	i
    5b2a:	e7fe      	b.n	5b2a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    5b2c:	68bb      	ldr	r3, [r7, #8]
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d102      	bne.n	5b38 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    5b32:	2300      	movs	r3, #0
    5b34:	61fb      	str	r3, [r7, #28]
    5b36:	e003      	b.n	5b40 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5b38:	68fb      	ldr	r3, [r7, #12]
    5b3a:	68ba      	ldr	r2, [r7, #8]
    5b3c:	4353      	muls	r3, r2
    5b3e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    5b40:	69fb      	ldr	r3, [r7, #28]
    5b42:	3354      	adds	r3, #84	; 0x54
    5b44:	0018      	movs	r0, r3
    5b46:	4b19      	ldr	r3, [pc, #100]	; (5bac <xQueueGenericCreate+0x98>)
    5b48:	4798      	blx	r3
    5b4a:	0003      	movs	r3, r0
    5b4c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    5b4e:	69bb      	ldr	r3, [r7, #24]
    5b50:	2b00      	cmp	r3, #0
    5b52:	d00d      	beq.n	5b70 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    5b54:	69bb      	ldr	r3, [r7, #24]
    5b56:	3354      	adds	r3, #84	; 0x54
    5b58:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    5b5a:	1dfb      	adds	r3, r7, #7
    5b5c:	781c      	ldrb	r4, [r3, #0]
    5b5e:	697a      	ldr	r2, [r7, #20]
    5b60:	68b9      	ldr	r1, [r7, #8]
    5b62:	68f8      	ldr	r0, [r7, #12]
    5b64:	69bb      	ldr	r3, [r7, #24]
    5b66:	9300      	str	r3, [sp, #0]
    5b68:	0023      	movs	r3, r4
    5b6a:	4c11      	ldr	r4, [pc, #68]	; (5bb0 <xQueueGenericCreate+0x9c>)
    5b6c:	47a0      	blx	r4
    5b6e:	e017      	b.n	5ba0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
    5b70:	4b10      	ldr	r3, [pc, #64]	; (5bb4 <xQueueGenericCreate+0xa0>)
    5b72:	4798      	blx	r3
    5b74:	0003      	movs	r3, r0
    5b76:	0018      	movs	r0, r3
    5b78:	4b0f      	ldr	r3, [pc, #60]	; (5bb8 <xQueueGenericCreate+0xa4>)
    5b7a:	4798      	blx	r3
    5b7c:	0003      	movs	r3, r0
    5b7e:	001a      	movs	r2, r3
    5b80:	4b0e      	ldr	r3, [pc, #56]	; (5bbc <xQueueGenericCreate+0xa8>)
    5b82:	881b      	ldrh	r3, [r3, #0]
    5b84:	4013      	ands	r3, r2
    5b86:	b29b      	uxth	r3, r3
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d009      	beq.n	5ba0 <xQueueGenericCreate+0x8c>
    5b8c:	1dfb      	adds	r3, r7, #7
    5b8e:	781b      	ldrb	r3, [r3, #0]
    5b90:	4a0b      	ldr	r2, [pc, #44]	; (5bc0 <xQueueGenericCreate+0xac>)
    5b92:	5cd3      	ldrb	r3, [r2, r3]
    5b94:	3340      	adds	r3, #64	; 0x40
    5b96:	b2db      	uxtb	r3, r3
    5b98:	2100      	movs	r1, #0
    5b9a:	0018      	movs	r0, r3
    5b9c:	4b09      	ldr	r3, [pc, #36]	; (5bc4 <xQueueGenericCreate+0xb0>)
    5b9e:	4798      	blx	r3
		}

		return pxNewQueue;
    5ba0:	69bb      	ldr	r3, [r7, #24]
	}
    5ba2:	0018      	movs	r0, r3
    5ba4:	46bd      	mov	sp, r7
    5ba6:	b009      	add	sp, #36	; 0x24
    5ba8:	bd90      	pop	{r4, r7, pc}
    5baa:	46c0      	nop			; (mov r8, r8)
    5bac:	00005961 	.word	0x00005961
    5bb0:	00005bc9 	.word	0x00005bc9
    5bb4:	00003b35 	.word	0x00003b35
    5bb8:	000039d5 	.word	0x000039d5
    5bbc:	20000024 	.word	0x20000024
    5bc0:	20000018 	.word	0x20000018
    5bc4:	00004525 	.word	0x00004525

00005bc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    5bc8:	b5b0      	push	{r4, r5, r7, lr}
    5bca:	b084      	sub	sp, #16
    5bcc:	af00      	add	r7, sp, #0
    5bce:	60f8      	str	r0, [r7, #12]
    5bd0:	60b9      	str	r1, [r7, #8]
    5bd2:	607a      	str	r2, [r7, #4]
    5bd4:	001a      	movs	r2, r3
    5bd6:	1cfb      	adds	r3, r7, #3
    5bd8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    5bda:	68bb      	ldr	r3, [r7, #8]
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d103      	bne.n	5be8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    5be0:	6a3b      	ldr	r3, [r7, #32]
    5be2:	6a3a      	ldr	r2, [r7, #32]
    5be4:	601a      	str	r2, [r3, #0]
    5be6:	e002      	b.n	5bee <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    5be8:	6a3b      	ldr	r3, [r7, #32]
    5bea:	687a      	ldr	r2, [r7, #4]
    5bec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    5bee:	6a3b      	ldr	r3, [r7, #32]
    5bf0:	68fa      	ldr	r2, [r7, #12]
    5bf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    5bf4:	6a3b      	ldr	r3, [r7, #32]
    5bf6:	68ba      	ldr	r2, [r7, #8]
    5bf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    5bfa:	6a3b      	ldr	r3, [r7, #32]
    5bfc:	2101      	movs	r1, #1
    5bfe:	0018      	movs	r0, r3
    5c00:	4b41      	ldr	r3, [pc, #260]	; (5d08 <prvInitialiseNewQueue+0x140>)
    5c02:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    5c04:	6a3b      	ldr	r3, [r7, #32]
    5c06:	1cfa      	adds	r2, r7, #3
    5c08:	2150      	movs	r1, #80	; 0x50
    5c0a:	7812      	ldrb	r2, [r2, #0]
    5c0c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    5c0e:	6a3b      	ldr	r3, [r7, #32]
    5c10:	2200      	movs	r2, #0
    5c12:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    5c14:	6a3b      	ldr	r3, [r7, #32]
    5c16:	0018      	movs	r0, r3
    5c18:	4b3c      	ldr	r3, [pc, #240]	; (5d0c <prvInitialiseNewQueue+0x144>)
    5c1a:	4798      	blx	r3
    5c1c:	0003      	movs	r3, r0
    5c1e:	001a      	movs	r2, r3
    5c20:	4b3b      	ldr	r3, [pc, #236]	; (5d10 <prvInitialiseNewQueue+0x148>)
    5c22:	5c9b      	ldrb	r3, [r3, r2]
    5c24:	0018      	movs	r0, r3
    5c26:	4b3b      	ldr	r3, [pc, #236]	; (5d14 <prvInitialiseNewQueue+0x14c>)
    5c28:	4798      	blx	r3
    5c2a:	0003      	movs	r3, r0
    5c2c:	b29a      	uxth	r2, r3
    5c2e:	6a3b      	ldr	r3, [r7, #32]
    5c30:	0011      	movs	r1, r2
    5c32:	0018      	movs	r0, r3
    5c34:	4b38      	ldr	r3, [pc, #224]	; (5d18 <prvInitialiseNewQueue+0x150>)
    5c36:	4798      	blx	r3
    5c38:	4b38      	ldr	r3, [pc, #224]	; (5d1c <prvInitialiseNewQueue+0x154>)
    5c3a:	881a      	ldrh	r2, [r3, #0]
    5c3c:	6a3b      	ldr	r3, [r7, #32]
    5c3e:	0011      	movs	r1, r2
    5c40:	0018      	movs	r0, r3
    5c42:	4b37      	ldr	r3, [pc, #220]	; (5d20 <prvInitialiseNewQueue+0x158>)
    5c44:	4798      	blx	r3
    5c46:	6a3b      	ldr	r3, [r7, #32]
    5c48:	0018      	movs	r0, r3
    5c4a:	4b30      	ldr	r3, [pc, #192]	; (5d0c <prvInitialiseNewQueue+0x144>)
    5c4c:	4798      	blx	r3
    5c4e:	0003      	movs	r3, r0
    5c50:	001a      	movs	r2, r3
    5c52:	4b2f      	ldr	r3, [pc, #188]	; (5d10 <prvInitialiseNewQueue+0x148>)
    5c54:	5c9c      	ldrb	r4, [r3, r2]
    5c56:	6a3b      	ldr	r3, [r7, #32]
    5c58:	0018      	movs	r0, r3
    5c5a:	4b32      	ldr	r3, [pc, #200]	; (5d24 <prvInitialiseNewQueue+0x15c>)
    5c5c:	4798      	blx	r3
    5c5e:	0003      	movs	r3, r0
    5c60:	b2db      	uxtb	r3, r3
    5c62:	0019      	movs	r1, r3
    5c64:	0020      	movs	r0, r4
    5c66:	4b30      	ldr	r3, [pc, #192]	; (5d28 <prvInitialiseNewQueue+0x160>)
    5c68:	4798      	blx	r3
    5c6a:	4b30      	ldr	r3, [pc, #192]	; (5d2c <prvInitialiseNewQueue+0x164>)
    5c6c:	4798      	blx	r3
    5c6e:	0003      	movs	r3, r0
    5c70:	0018      	movs	r0, r3
    5c72:	4b2f      	ldr	r3, [pc, #188]	; (5d30 <prvInitialiseNewQueue+0x168>)
    5c74:	4798      	blx	r3
    5c76:	0003      	movs	r3, r0
    5c78:	001a      	movs	r2, r3
    5c7a:	4b2e      	ldr	r3, [pc, #184]	; (5d34 <prvInitialiseNewQueue+0x16c>)
    5c7c:	881b      	ldrh	r3, [r3, #0]
    5c7e:	4013      	ands	r3, r2
    5c80:	b29b      	uxth	r3, r3
    5c82:	2b00      	cmp	r3, #0
    5c84:	d029      	beq.n	5cda <prvInitialiseNewQueue+0x112>
    5c86:	6a3b      	ldr	r3, [r7, #32]
    5c88:	0018      	movs	r0, r3
    5c8a:	4b2b      	ldr	r3, [pc, #172]	; (5d38 <prvInitialiseNewQueue+0x170>)
    5c8c:	4798      	blx	r3
    5c8e:	0003      	movs	r3, r0
    5c90:	001a      	movs	r2, r3
    5c92:	4b28      	ldr	r3, [pc, #160]	; (5d34 <prvInitialiseNewQueue+0x16c>)
    5c94:	881b      	ldrh	r3, [r3, #0]
    5c96:	4013      	ands	r3, r2
    5c98:	b29b      	uxth	r3, r3
    5c9a:	2b00      	cmp	r3, #0
    5c9c:	d01d      	beq.n	5cda <prvInitialiseNewQueue+0x112>
    5c9e:	6a3b      	ldr	r3, [r7, #32]
    5ca0:	0018      	movs	r0, r3
    5ca2:	4b1a      	ldr	r3, [pc, #104]	; (5d0c <prvInitialiseNewQueue+0x144>)
    5ca4:	4798      	blx	r3
    5ca6:	0003      	movs	r3, r0
    5ca8:	001a      	movs	r2, r3
    5caa:	4b19      	ldr	r3, [pc, #100]	; (5d10 <prvInitialiseNewQueue+0x148>)
    5cac:	5c9b      	ldrb	r3, [r3, r2]
    5cae:	3318      	adds	r3, #24
    5cb0:	b2db      	uxtb	r3, r3
    5cb2:	001d      	movs	r5, r3
    5cb4:	6a3b      	ldr	r3, [r7, #32]
    5cb6:	0018      	movs	r0, r3
    5cb8:	4b14      	ldr	r3, [pc, #80]	; (5d0c <prvInitialiseNewQueue+0x144>)
    5cba:	4798      	blx	r3
    5cbc:	0003      	movs	r3, r0
    5cbe:	001a      	movs	r2, r3
    5cc0:	4b13      	ldr	r3, [pc, #76]	; (5d10 <prvInitialiseNewQueue+0x148>)
    5cc2:	5c9c      	ldrb	r4, [r3, r2]
    5cc4:	6a3b      	ldr	r3, [r7, #32]
    5cc6:	0018      	movs	r0, r3
    5cc8:	4b16      	ldr	r3, [pc, #88]	; (5d24 <prvInitialiseNewQueue+0x15c>)
    5cca:	4798      	blx	r3
    5ccc:	0003      	movs	r3, r0
    5cce:	b2db      	uxtb	r3, r3
    5cd0:	001a      	movs	r2, r3
    5cd2:	0021      	movs	r1, r4
    5cd4:	0028      	movs	r0, r5
    5cd6:	4b19      	ldr	r3, [pc, #100]	; (5d3c <prvInitialiseNewQueue+0x174>)
    5cd8:	4798      	blx	r3
    5cda:	6a3b      	ldr	r3, [r7, #32]
    5cdc:	0018      	movs	r0, r3
    5cde:	4b0b      	ldr	r3, [pc, #44]	; (5d0c <prvInitialiseNewQueue+0x144>)
    5ce0:	4798      	blx	r3
    5ce2:	0003      	movs	r3, r0
    5ce4:	001a      	movs	r2, r3
    5ce6:	4b0a      	ldr	r3, [pc, #40]	; (5d10 <prvInitialiseNewQueue+0x148>)
    5ce8:	5c9c      	ldrb	r4, [r3, r2]
    5cea:	6a3b      	ldr	r3, [r7, #32]
    5cec:	0018      	movs	r0, r3
    5cee:	4b0d      	ldr	r3, [pc, #52]	; (5d24 <prvInitialiseNewQueue+0x15c>)
    5cf0:	4798      	blx	r3
    5cf2:	0003      	movs	r3, r0
    5cf4:	b2db      	uxtb	r3, r3
    5cf6:	2200      	movs	r2, #0
    5cf8:	0019      	movs	r1, r3
    5cfa:	0020      	movs	r0, r4
    5cfc:	4b10      	ldr	r3, [pc, #64]	; (5d40 <prvInitialiseNewQueue+0x178>)
    5cfe:	4798      	blx	r3
}
    5d00:	46c0      	nop			; (mov r8, r8)
    5d02:	46bd      	mov	sp, r7
    5d04:	b004      	add	sp, #16
    5d06:	bdb0      	pop	{r4, r5, r7, pc}
    5d08:	00005a59 	.word	0x00005a59
    5d0c:	00003995 	.word	0x00003995
    5d10:	20000018 	.word	0x20000018
    5d14:	00004da9 	.word	0x00004da9
    5d18:	00003ab9 	.word	0x00003ab9
    5d1c:	20000026 	.word	0x20000026
    5d20:	00003af5 	.word	0x00003af5
    5d24:	00003a75 	.word	0x00003a75
    5d28:	00004f41 	.word	0x00004f41
    5d2c:	00003b35 	.word	0x00003b35
    5d30:	000039d5 	.word	0x000039d5
    5d34:	20000024 	.word	0x20000024
    5d38:	00003a95 	.word	0x00003a95
    5d3c:	0000421d 	.word	0x0000421d
    5d40:	00004879 	.word	0x00004879

00005d44 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    5d44:	b590      	push	{r4, r7, lr}
    5d46:	b083      	sub	sp, #12
    5d48:	af00      	add	r7, sp, #0
    5d4a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    5d4c:	687b      	ldr	r3, [r7, #4]
    5d4e:	2b00      	cmp	r3, #0
    5d50:	d00e      	beq.n	5d70 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    5d52:	687b      	ldr	r3, [r7, #4]
    5d54:	2200      	movs	r2, #0
    5d56:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	2200      	movs	r2, #0
    5d5c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    5d5e:	687b      	ldr	r3, [r7, #4]
    5d60:	2200      	movs	r2, #0
    5d62:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    5d64:	6878      	ldr	r0, [r7, #4]
    5d66:	2300      	movs	r3, #0
    5d68:	2200      	movs	r2, #0
    5d6a:	2100      	movs	r1, #0
    5d6c:	4c02      	ldr	r4, [pc, #8]	; (5d78 <prvInitialiseMutex+0x34>)
    5d6e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    5d70:	46c0      	nop			; (mov r8, r8)
    5d72:	46bd      	mov	sp, r7
    5d74:	b003      	add	sp, #12
    5d76:	bd90      	pop	{r4, r7, pc}
    5d78:	00005dbd 	.word	0x00005dbd

00005d7c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    5d7c:	b580      	push	{r7, lr}
    5d7e:	b086      	sub	sp, #24
    5d80:	af00      	add	r7, sp, #0
    5d82:	0002      	movs	r2, r0
    5d84:	1dfb      	adds	r3, r7, #7
    5d86:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    5d88:	2301      	movs	r3, #1
    5d8a:	617b      	str	r3, [r7, #20]
    5d8c:	2300      	movs	r3, #0
    5d8e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    5d90:	1dfb      	adds	r3, r7, #7
    5d92:	781a      	ldrb	r2, [r3, #0]
    5d94:	6939      	ldr	r1, [r7, #16]
    5d96:	697b      	ldr	r3, [r7, #20]
    5d98:	0018      	movs	r0, r3
    5d9a:	4b06      	ldr	r3, [pc, #24]	; (5db4 <xQueueCreateMutex+0x38>)
    5d9c:	4798      	blx	r3
    5d9e:	0003      	movs	r3, r0
    5da0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    5da2:	68fb      	ldr	r3, [r7, #12]
    5da4:	0018      	movs	r0, r3
    5da6:	4b04      	ldr	r3, [pc, #16]	; (5db8 <xQueueCreateMutex+0x3c>)
    5da8:	4798      	blx	r3

		return pxNewQueue;
    5daa:	68fb      	ldr	r3, [r7, #12]
	}
    5dac:	0018      	movs	r0, r3
    5dae:	46bd      	mov	sp, r7
    5db0:	b006      	add	sp, #24
    5db2:	bd80      	pop	{r7, pc}
    5db4:	00005b15 	.word	0x00005b15
    5db8:	00005d45 	.word	0x00005d45

00005dbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    5dbc:	b5b0      	push	{r4, r5, r7, lr}
    5dbe:	b08a      	sub	sp, #40	; 0x28
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	60f8      	str	r0, [r7, #12]
    5dc4:	60b9      	str	r1, [r7, #8]
    5dc6:	607a      	str	r2, [r7, #4]
    5dc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    5dca:	2300      	movs	r3, #0
    5dcc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    5dce:	68fb      	ldr	r3, [r7, #12]
    5dd0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    5dd2:	6a3b      	ldr	r3, [r7, #32]
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d101      	bne.n	5ddc <xQueueGenericSend+0x20>
    5dd8:	b672      	cpsid	i
    5dda:	e7fe      	b.n	5dda <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    5ddc:	68bb      	ldr	r3, [r7, #8]
    5dde:	2b00      	cmp	r3, #0
    5de0:	d103      	bne.n	5dea <xQueueGenericSend+0x2e>
    5de2:	6a3b      	ldr	r3, [r7, #32]
    5de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5de6:	2b00      	cmp	r3, #0
    5de8:	d101      	bne.n	5dee <xQueueGenericSend+0x32>
    5dea:	2301      	movs	r3, #1
    5dec:	e000      	b.n	5df0 <xQueueGenericSend+0x34>
    5dee:	2300      	movs	r3, #0
    5df0:	2b00      	cmp	r3, #0
    5df2:	d101      	bne.n	5df8 <xQueueGenericSend+0x3c>
    5df4:	b672      	cpsid	i
    5df6:	e7fe      	b.n	5df6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    5df8:	683b      	ldr	r3, [r7, #0]
    5dfa:	2b02      	cmp	r3, #2
    5dfc:	d103      	bne.n	5e06 <xQueueGenericSend+0x4a>
    5dfe:	6a3b      	ldr	r3, [r7, #32]
    5e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5e02:	2b01      	cmp	r3, #1
    5e04:	d101      	bne.n	5e0a <xQueueGenericSend+0x4e>
    5e06:	2301      	movs	r3, #1
    5e08:	e000      	b.n	5e0c <xQueueGenericSend+0x50>
    5e0a:	2300      	movs	r3, #0
    5e0c:	2b00      	cmp	r3, #0
    5e0e:	d101      	bne.n	5e14 <xQueueGenericSend+0x58>
    5e10:	b672      	cpsid	i
    5e12:	e7fe      	b.n	5e12 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    5e14:	4bbc      	ldr	r3, [pc, #752]	; (6108 <xQueueGenericSend+0x34c>)
    5e16:	4798      	blx	r3
    5e18:	1e03      	subs	r3, r0, #0
    5e1a:	d102      	bne.n	5e22 <xQueueGenericSend+0x66>
    5e1c:	687b      	ldr	r3, [r7, #4]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d101      	bne.n	5e26 <xQueueGenericSend+0x6a>
    5e22:	2301      	movs	r3, #1
    5e24:	e000      	b.n	5e28 <xQueueGenericSend+0x6c>
    5e26:	2300      	movs	r3, #0
    5e28:	2b00      	cmp	r3, #0
    5e2a:	d101      	bne.n	5e30 <xQueueGenericSend+0x74>
    5e2c:	b672      	cpsid	i
    5e2e:	e7fe      	b.n	5e2e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5e30:	4bb6      	ldr	r3, [pc, #728]	; (610c <xQueueGenericSend+0x350>)
    5e32:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    5e34:	6a3b      	ldr	r3, [r7, #32]
    5e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5e38:	6a3b      	ldr	r3, [r7, #32]
    5e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5e3c:	429a      	cmp	r2, r3
    5e3e:	d303      	bcc.n	5e48 <xQueueGenericSend+0x8c>
    5e40:	683b      	ldr	r3, [r7, #0]
    5e42:	2b02      	cmp	r3, #2
    5e44:	d000      	beq.n	5e48 <xQueueGenericSend+0x8c>
    5e46:	e08e      	b.n	5f66 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
    5e48:	4bb1      	ldr	r3, [pc, #708]	; (6110 <xQueueGenericSend+0x354>)
    5e4a:	4798      	blx	r3
    5e4c:	0003      	movs	r3, r0
    5e4e:	0018      	movs	r0, r3
    5e50:	4bb0      	ldr	r3, [pc, #704]	; (6114 <xQueueGenericSend+0x358>)
    5e52:	4798      	blx	r3
    5e54:	0003      	movs	r3, r0
    5e56:	001a      	movs	r2, r3
    5e58:	4baf      	ldr	r3, [pc, #700]	; (6118 <xQueueGenericSend+0x35c>)
    5e5a:	881b      	ldrh	r3, [r3, #0]
    5e5c:	4013      	ands	r3, r2
    5e5e:	b29b      	uxth	r3, r3
    5e60:	2b00      	cmp	r3, #0
    5e62:	d02e      	beq.n	5ec2 <xQueueGenericSend+0x106>
    5e64:	6a3b      	ldr	r3, [r7, #32]
    5e66:	0018      	movs	r0, r3
    5e68:	4bac      	ldr	r3, [pc, #688]	; (611c <xQueueGenericSend+0x360>)
    5e6a:	4798      	blx	r3
    5e6c:	0003      	movs	r3, r0
    5e6e:	001a      	movs	r2, r3
    5e70:	4ba9      	ldr	r3, [pc, #676]	; (6118 <xQueueGenericSend+0x35c>)
    5e72:	881b      	ldrh	r3, [r3, #0]
    5e74:	4013      	ands	r3, r2
    5e76:	b29b      	uxth	r3, r3
    5e78:	2b00      	cmp	r3, #0
    5e7a:	d022      	beq.n	5ec2 <xQueueGenericSend+0x106>
    5e7c:	683b      	ldr	r3, [r7, #0]
    5e7e:	2b00      	cmp	r3, #0
    5e80:	d10b      	bne.n	5e9a <xQueueGenericSend+0xde>
    5e82:	6a3b      	ldr	r3, [r7, #32]
    5e84:	0018      	movs	r0, r3
    5e86:	4ba6      	ldr	r3, [pc, #664]	; (6120 <xQueueGenericSend+0x364>)
    5e88:	4798      	blx	r3
    5e8a:	0003      	movs	r3, r0
    5e8c:	001a      	movs	r2, r3
    5e8e:	4ba5      	ldr	r3, [pc, #660]	; (6124 <xQueueGenericSend+0x368>)
    5e90:	5c9b      	ldrb	r3, [r3, r2]
    5e92:	3320      	adds	r3, #32
    5e94:	b2db      	uxtb	r3, r3
    5e96:	001d      	movs	r5, r3
    5e98:	e000      	b.n	5e9c <xQueueGenericSend+0xe0>
    5e9a:	2525      	movs	r5, #37	; 0x25
    5e9c:	6a3b      	ldr	r3, [r7, #32]
    5e9e:	0018      	movs	r0, r3
    5ea0:	4b9f      	ldr	r3, [pc, #636]	; (6120 <xQueueGenericSend+0x364>)
    5ea2:	4798      	blx	r3
    5ea4:	0003      	movs	r3, r0
    5ea6:	001a      	movs	r2, r3
    5ea8:	4b9e      	ldr	r3, [pc, #632]	; (6124 <xQueueGenericSend+0x368>)
    5eaa:	5c9c      	ldrb	r4, [r3, r2]
    5eac:	6a3b      	ldr	r3, [r7, #32]
    5eae:	0018      	movs	r0, r3
    5eb0:	4b9d      	ldr	r3, [pc, #628]	; (6128 <xQueueGenericSend+0x36c>)
    5eb2:	4798      	blx	r3
    5eb4:	0003      	movs	r3, r0
    5eb6:	b2db      	uxtb	r3, r3
    5eb8:	001a      	movs	r2, r3
    5eba:	0021      	movs	r1, r4
    5ebc:	0028      	movs	r0, r5
    5ebe:	4b9b      	ldr	r3, [pc, #620]	; (612c <xQueueGenericSend+0x370>)
    5ec0:	4798      	blx	r3
    5ec2:	6a3b      	ldr	r3, [r7, #32]
    5ec4:	0018      	movs	r0, r3
    5ec6:	4b96      	ldr	r3, [pc, #600]	; (6120 <xQueueGenericSend+0x364>)
    5ec8:	4798      	blx	r3
    5eca:	0003      	movs	r3, r0
    5ecc:	001a      	movs	r2, r3
    5ece:	4b95      	ldr	r3, [pc, #596]	; (6124 <xQueueGenericSend+0x368>)
    5ed0:	5c9c      	ldrb	r4, [r3, r2]
    5ed2:	6a3b      	ldr	r3, [r7, #32]
    5ed4:	0018      	movs	r0, r3
    5ed6:	4b94      	ldr	r3, [pc, #592]	; (6128 <xQueueGenericSend+0x36c>)
    5ed8:	4798      	blx	r3
    5eda:	0003      	movs	r3, r0
    5edc:	b2dd      	uxtb	r5, r3
    5ede:	6a3b      	ldr	r3, [r7, #32]
    5ee0:	0018      	movs	r0, r3
    5ee2:	4b8f      	ldr	r3, [pc, #572]	; (6120 <xQueueGenericSend+0x364>)
    5ee4:	4798      	blx	r3
    5ee6:	0003      	movs	r3, r0
    5ee8:	001a      	movs	r2, r3
    5eea:	4b8e      	ldr	r3, [pc, #568]	; (6124 <xQueueGenericSend+0x368>)
    5eec:	5c9b      	ldrb	r3, [r3, r2]
    5eee:	2b02      	cmp	r3, #2
    5ef0:	d005      	beq.n	5efe <xQueueGenericSend+0x142>
    5ef2:	6a3b      	ldr	r3, [r7, #32]
    5ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5ef6:	b2db      	uxtb	r3, r3
    5ef8:	3301      	adds	r3, #1
    5efa:	b2db      	uxtb	r3, r3
    5efc:	e000      	b.n	5f00 <xQueueGenericSend+0x144>
    5efe:	2300      	movs	r3, #0
    5f00:	001a      	movs	r2, r3
    5f02:	0029      	movs	r1, r5
    5f04:	0020      	movs	r0, r4
    5f06:	4b8a      	ldr	r3, [pc, #552]	; (6130 <xQueueGenericSend+0x374>)
    5f08:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5f0a:	683a      	ldr	r2, [r7, #0]
    5f0c:	68b9      	ldr	r1, [r7, #8]
    5f0e:	6a3b      	ldr	r3, [r7, #32]
    5f10:	0018      	movs	r0, r3
    5f12:	4b88      	ldr	r3, [pc, #544]	; (6134 <xQueueGenericSend+0x378>)
    5f14:	4798      	blx	r3
    5f16:	0003      	movs	r3, r0
    5f18:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    5f1a:	6a3b      	ldr	r3, [r7, #32]
    5f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d00a      	beq.n	5f38 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    5f22:	683a      	ldr	r2, [r7, #0]
    5f24:	6a3b      	ldr	r3, [r7, #32]
    5f26:	0011      	movs	r1, r2
    5f28:	0018      	movs	r0, r3
    5f2a:	4b83      	ldr	r3, [pc, #524]	; (6138 <xQueueGenericSend+0x37c>)
    5f2c:	4798      	blx	r3
    5f2e:	1e03      	subs	r3, r0, #0
    5f30:	d015      	beq.n	5f5e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    5f32:	4b82      	ldr	r3, [pc, #520]	; (613c <xQueueGenericSend+0x380>)
    5f34:	4798      	blx	r3
    5f36:	e012      	b.n	5f5e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5f38:	6a3b      	ldr	r3, [r7, #32]
    5f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	d009      	beq.n	5f54 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5f40:	6a3b      	ldr	r3, [r7, #32]
    5f42:	3324      	adds	r3, #36	; 0x24
    5f44:	0018      	movs	r0, r3
    5f46:	4b7e      	ldr	r3, [pc, #504]	; (6140 <xQueueGenericSend+0x384>)
    5f48:	4798      	blx	r3
    5f4a:	1e03      	subs	r3, r0, #0
    5f4c:	d007      	beq.n	5f5e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    5f4e:	4b7b      	ldr	r3, [pc, #492]	; (613c <xQueueGenericSend+0x380>)
    5f50:	4798      	blx	r3
    5f52:	e004      	b.n	5f5e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    5f54:	69fb      	ldr	r3, [r7, #28]
    5f56:	2b00      	cmp	r3, #0
    5f58:	d001      	beq.n	5f5e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    5f5a:	4b78      	ldr	r3, [pc, #480]	; (613c <xQueueGenericSend+0x380>)
    5f5c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    5f5e:	4b79      	ldr	r3, [pc, #484]	; (6144 <xQueueGenericSend+0x388>)
    5f60:	4798      	blx	r3
				return pdPASS;
    5f62:	2301      	movs	r3, #1
    5f64:	e142      	b.n	61ec <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    5f66:	687b      	ldr	r3, [r7, #4]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d140      	bne.n	5fee <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5f6c:	4b75      	ldr	r3, [pc, #468]	; (6144 <xQueueGenericSend+0x388>)
    5f6e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    5f70:	4b67      	ldr	r3, [pc, #412]	; (6110 <xQueueGenericSend+0x354>)
    5f72:	4798      	blx	r3
    5f74:	0003      	movs	r3, r0
    5f76:	0018      	movs	r0, r3
    5f78:	4b66      	ldr	r3, [pc, #408]	; (6114 <xQueueGenericSend+0x358>)
    5f7a:	4798      	blx	r3
    5f7c:	0003      	movs	r3, r0
    5f7e:	001a      	movs	r2, r3
    5f80:	4b65      	ldr	r3, [pc, #404]	; (6118 <xQueueGenericSend+0x35c>)
    5f82:	881b      	ldrh	r3, [r3, #0]
    5f84:	4013      	ands	r3, r2
    5f86:	b29b      	uxth	r3, r3
    5f88:	2b00      	cmp	r3, #0
    5f8a:	d02e      	beq.n	5fea <xQueueGenericSend+0x22e>
    5f8c:	6a3b      	ldr	r3, [r7, #32]
    5f8e:	0018      	movs	r0, r3
    5f90:	4b62      	ldr	r3, [pc, #392]	; (611c <xQueueGenericSend+0x360>)
    5f92:	4798      	blx	r3
    5f94:	0003      	movs	r3, r0
    5f96:	001a      	movs	r2, r3
    5f98:	4b5f      	ldr	r3, [pc, #380]	; (6118 <xQueueGenericSend+0x35c>)
    5f9a:	881b      	ldrh	r3, [r3, #0]
    5f9c:	4013      	ands	r3, r2
    5f9e:	b29b      	uxth	r3, r3
    5fa0:	2b00      	cmp	r3, #0
    5fa2:	d022      	beq.n	5fea <xQueueGenericSend+0x22e>
    5fa4:	683b      	ldr	r3, [r7, #0]
    5fa6:	2b00      	cmp	r3, #0
    5fa8:	d10b      	bne.n	5fc2 <xQueueGenericSend+0x206>
    5faa:	6a3b      	ldr	r3, [r7, #32]
    5fac:	0018      	movs	r0, r3
    5fae:	4b5c      	ldr	r3, [pc, #368]	; (6120 <xQueueGenericSend+0x364>)
    5fb0:	4798      	blx	r3
    5fb2:	0003      	movs	r3, r0
    5fb4:	001a      	movs	r2, r3
    5fb6:	4b5b      	ldr	r3, [pc, #364]	; (6124 <xQueueGenericSend+0x368>)
    5fb8:	5c9b      	ldrb	r3, [r3, r2]
    5fba:	3348      	adds	r3, #72	; 0x48
    5fbc:	b2db      	uxtb	r3, r3
    5fbe:	001d      	movs	r5, r3
    5fc0:	e000      	b.n	5fc4 <xQueueGenericSend+0x208>
    5fc2:	254d      	movs	r5, #77	; 0x4d
    5fc4:	6a3b      	ldr	r3, [r7, #32]
    5fc6:	0018      	movs	r0, r3
    5fc8:	4b55      	ldr	r3, [pc, #340]	; (6120 <xQueueGenericSend+0x364>)
    5fca:	4798      	blx	r3
    5fcc:	0003      	movs	r3, r0
    5fce:	001a      	movs	r2, r3
    5fd0:	4b54      	ldr	r3, [pc, #336]	; (6124 <xQueueGenericSend+0x368>)
    5fd2:	5c9c      	ldrb	r4, [r3, r2]
    5fd4:	6a3b      	ldr	r3, [r7, #32]
    5fd6:	0018      	movs	r0, r3
    5fd8:	4b53      	ldr	r3, [pc, #332]	; (6128 <xQueueGenericSend+0x36c>)
    5fda:	4798      	blx	r3
    5fdc:	0003      	movs	r3, r0
    5fde:	b2db      	uxtb	r3, r3
    5fe0:	001a      	movs	r2, r3
    5fe2:	0021      	movs	r1, r4
    5fe4:	0028      	movs	r0, r5
    5fe6:	4b51      	ldr	r3, [pc, #324]	; (612c <xQueueGenericSend+0x370>)
    5fe8:	4798      	blx	r3
					return errQUEUE_FULL;
    5fea:	2300      	movs	r3, #0
    5fec:	e0fe      	b.n	61ec <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
    5fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ff0:	2b00      	cmp	r3, #0
    5ff2:	d106      	bne.n	6002 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    5ff4:	2314      	movs	r3, #20
    5ff6:	18fb      	adds	r3, r7, r3
    5ff8:	0018      	movs	r0, r3
    5ffa:	4b53      	ldr	r3, [pc, #332]	; (6148 <xQueueGenericSend+0x38c>)
    5ffc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    5ffe:	2301      	movs	r3, #1
    6000:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    6002:	4b50      	ldr	r3, [pc, #320]	; (6144 <xQueueGenericSend+0x388>)
    6004:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6006:	4b51      	ldr	r3, [pc, #324]	; (614c <xQueueGenericSend+0x390>)
    6008:	4798      	blx	r3
		prvLockQueue( pxQueue );
    600a:	4b40      	ldr	r3, [pc, #256]	; (610c <xQueueGenericSend+0x350>)
    600c:	4798      	blx	r3
    600e:	6a3b      	ldr	r3, [r7, #32]
    6010:	2244      	movs	r2, #68	; 0x44
    6012:	5c9b      	ldrb	r3, [r3, r2]
    6014:	b25b      	sxtb	r3, r3
    6016:	3301      	adds	r3, #1
    6018:	d103      	bne.n	6022 <xQueueGenericSend+0x266>
    601a:	6a3b      	ldr	r3, [r7, #32]
    601c:	2244      	movs	r2, #68	; 0x44
    601e:	2100      	movs	r1, #0
    6020:	5499      	strb	r1, [r3, r2]
    6022:	6a3b      	ldr	r3, [r7, #32]
    6024:	2245      	movs	r2, #69	; 0x45
    6026:	5c9b      	ldrb	r3, [r3, r2]
    6028:	b25b      	sxtb	r3, r3
    602a:	3301      	adds	r3, #1
    602c:	d103      	bne.n	6036 <xQueueGenericSend+0x27a>
    602e:	6a3b      	ldr	r3, [r7, #32]
    6030:	2245      	movs	r2, #69	; 0x45
    6032:	2100      	movs	r1, #0
    6034:	5499      	strb	r1, [r3, r2]
    6036:	4b43      	ldr	r3, [pc, #268]	; (6144 <xQueueGenericSend+0x388>)
    6038:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    603a:	1d3a      	adds	r2, r7, #4
    603c:	2314      	movs	r3, #20
    603e:	18fb      	adds	r3, r7, r3
    6040:	0011      	movs	r1, r2
    6042:	0018      	movs	r0, r3
    6044:	4b42      	ldr	r3, [pc, #264]	; (6150 <xQueueGenericSend+0x394>)
    6046:	4798      	blx	r3
    6048:	1e03      	subs	r3, r0, #0
    604a:	d000      	beq.n	604e <xQueueGenericSend+0x292>
    604c:	e08a      	b.n	6164 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    604e:	6a3b      	ldr	r3, [r7, #32]
    6050:	0018      	movs	r0, r3
    6052:	4b40      	ldr	r3, [pc, #256]	; (6154 <xQueueGenericSend+0x398>)
    6054:	4798      	blx	r3
    6056:	1e03      	subs	r3, r0, #0
    6058:	d04f      	beq.n	60fa <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    605a:	4b2d      	ldr	r3, [pc, #180]	; (6110 <xQueueGenericSend+0x354>)
    605c:	4798      	blx	r3
    605e:	0003      	movs	r3, r0
    6060:	0018      	movs	r0, r3
    6062:	4b2c      	ldr	r3, [pc, #176]	; (6114 <xQueueGenericSend+0x358>)
    6064:	4798      	blx	r3
    6066:	0003      	movs	r3, r0
    6068:	001a      	movs	r2, r3
    606a:	4b2b      	ldr	r3, [pc, #172]	; (6118 <xQueueGenericSend+0x35c>)
    606c:	881b      	ldrh	r3, [r3, #0]
    606e:	4013      	ands	r3, r2
    6070:	b29b      	uxth	r3, r3
    6072:	2b00      	cmp	r3, #0
    6074:	d02e      	beq.n	60d4 <xQueueGenericSend+0x318>
    6076:	6a3b      	ldr	r3, [r7, #32]
    6078:	0018      	movs	r0, r3
    607a:	4b28      	ldr	r3, [pc, #160]	; (611c <xQueueGenericSend+0x360>)
    607c:	4798      	blx	r3
    607e:	0003      	movs	r3, r0
    6080:	001a      	movs	r2, r3
    6082:	4b25      	ldr	r3, [pc, #148]	; (6118 <xQueueGenericSend+0x35c>)
    6084:	881b      	ldrh	r3, [r3, #0]
    6086:	4013      	ands	r3, r2
    6088:	b29b      	uxth	r3, r3
    608a:	2b00      	cmp	r3, #0
    608c:	d022      	beq.n	60d4 <xQueueGenericSend+0x318>
    608e:	683b      	ldr	r3, [r7, #0]
    6090:	2b00      	cmp	r3, #0
    6092:	d10b      	bne.n	60ac <xQueueGenericSend+0x2f0>
    6094:	6a3b      	ldr	r3, [r7, #32]
    6096:	0018      	movs	r0, r3
    6098:	4b21      	ldr	r3, [pc, #132]	; (6120 <xQueueGenericSend+0x364>)
    609a:	4798      	blx	r3
    609c:	0003      	movs	r3, r0
    609e:	001a      	movs	r2, r3
    60a0:	4b20      	ldr	r3, [pc, #128]	; (6124 <xQueueGenericSend+0x368>)
    60a2:	5c9b      	ldrb	r3, [r3, r2]
    60a4:	3370      	adds	r3, #112	; 0x70
    60a6:	b2db      	uxtb	r3, r3
    60a8:	001d      	movs	r5, r3
    60aa:	e000      	b.n	60ae <xQueueGenericSend+0x2f2>
    60ac:	2575      	movs	r5, #117	; 0x75
    60ae:	6a3b      	ldr	r3, [r7, #32]
    60b0:	0018      	movs	r0, r3
    60b2:	4b1b      	ldr	r3, [pc, #108]	; (6120 <xQueueGenericSend+0x364>)
    60b4:	4798      	blx	r3
    60b6:	0003      	movs	r3, r0
    60b8:	001a      	movs	r2, r3
    60ba:	4b1a      	ldr	r3, [pc, #104]	; (6124 <xQueueGenericSend+0x368>)
    60bc:	5c9c      	ldrb	r4, [r3, r2]
    60be:	6a3b      	ldr	r3, [r7, #32]
    60c0:	0018      	movs	r0, r3
    60c2:	4b19      	ldr	r3, [pc, #100]	; (6128 <xQueueGenericSend+0x36c>)
    60c4:	4798      	blx	r3
    60c6:	0003      	movs	r3, r0
    60c8:	b2db      	uxtb	r3, r3
    60ca:	001a      	movs	r2, r3
    60cc:	0021      	movs	r1, r4
    60ce:	0028      	movs	r0, r5
    60d0:	4b16      	ldr	r3, [pc, #88]	; (612c <xQueueGenericSend+0x370>)
    60d2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    60d4:	6a3b      	ldr	r3, [r7, #32]
    60d6:	3310      	adds	r3, #16
    60d8:	687a      	ldr	r2, [r7, #4]
    60da:	0011      	movs	r1, r2
    60dc:	0018      	movs	r0, r3
    60de:	4b1e      	ldr	r3, [pc, #120]	; (6158 <xQueueGenericSend+0x39c>)
    60e0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    60e2:	6a3b      	ldr	r3, [r7, #32]
    60e4:	0018      	movs	r0, r3
    60e6:	4b1d      	ldr	r3, [pc, #116]	; (615c <xQueueGenericSend+0x3a0>)
    60e8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    60ea:	4b1d      	ldr	r3, [pc, #116]	; (6160 <xQueueGenericSend+0x3a4>)
    60ec:	4798      	blx	r3
    60ee:	1e03      	subs	r3, r0, #0
    60f0:	d000      	beq.n	60f4 <xQueueGenericSend+0x338>
    60f2:	e69d      	b.n	5e30 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    60f4:	4b11      	ldr	r3, [pc, #68]	; (613c <xQueueGenericSend+0x380>)
    60f6:	4798      	blx	r3
    60f8:	e69a      	b.n	5e30 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    60fa:	6a3b      	ldr	r3, [r7, #32]
    60fc:	0018      	movs	r0, r3
    60fe:	4b17      	ldr	r3, [pc, #92]	; (615c <xQueueGenericSend+0x3a0>)
    6100:	4798      	blx	r3
				( void ) xTaskResumeAll();
    6102:	4b17      	ldr	r3, [pc, #92]	; (6160 <xQueueGenericSend+0x3a4>)
    6104:	4798      	blx	r3
    6106:	e693      	b.n	5e30 <xQueueGenericSend+0x74>
    6108:	0000848d 	.word	0x0000848d
    610c:	00005829 	.word	0x00005829
    6110:	00003b35 	.word	0x00003b35
    6114:	000039d5 	.word	0x000039d5
    6118:	20000024 	.word	0x20000024
    611c:	00003a95 	.word	0x00003a95
    6120:	00003995 	.word	0x00003995
    6124:	20000018 	.word	0x20000018
    6128:	00003a75 	.word	0x00003a75
    612c:	0000421d 	.word	0x0000421d
    6130:	00004879 	.word	0x00004879
    6134:	00006ff5 	.word	0x00006ff5
    6138:	000072f9 	.word	0x000072f9
    613c:	00005811 	.word	0x00005811
    6140:	000080b1 	.word	0x000080b1
    6144:	0000584d 	.word	0x0000584d
    6148:	000081ad 	.word	0x000081ad
    614c:	00007ad9 	.word	0x00007ad9
    6150:	000081d5 	.word	0x000081d5
    6154:	00007249 	.word	0x00007249
    6158:	00007f8d 	.word	0x00007f8d
    615c:	00007125 	.word	0x00007125
    6160:	00007af1 	.word	0x00007af1
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    6164:	6a3b      	ldr	r3, [r7, #32]
    6166:	0018      	movs	r0, r3
    6168:	4b22      	ldr	r3, [pc, #136]	; (61f4 <xQueueGenericSend+0x438>)
    616a:	4798      	blx	r3
			( void ) xTaskResumeAll();
    616c:	4b22      	ldr	r3, [pc, #136]	; (61f8 <xQueueGenericSend+0x43c>)
    616e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
    6170:	4b22      	ldr	r3, [pc, #136]	; (61fc <xQueueGenericSend+0x440>)
    6172:	4798      	blx	r3
    6174:	0003      	movs	r3, r0
    6176:	0018      	movs	r0, r3
    6178:	4b21      	ldr	r3, [pc, #132]	; (6200 <xQueueGenericSend+0x444>)
    617a:	4798      	blx	r3
    617c:	0003      	movs	r3, r0
    617e:	001a      	movs	r2, r3
    6180:	4b20      	ldr	r3, [pc, #128]	; (6204 <xQueueGenericSend+0x448>)
    6182:	881b      	ldrh	r3, [r3, #0]
    6184:	4013      	ands	r3, r2
    6186:	b29b      	uxth	r3, r3
    6188:	2b00      	cmp	r3, #0
    618a:	d02e      	beq.n	61ea <xQueueGenericSend+0x42e>
    618c:	6a3b      	ldr	r3, [r7, #32]
    618e:	0018      	movs	r0, r3
    6190:	4b1d      	ldr	r3, [pc, #116]	; (6208 <xQueueGenericSend+0x44c>)
    6192:	4798      	blx	r3
    6194:	0003      	movs	r3, r0
    6196:	001a      	movs	r2, r3
    6198:	4b1a      	ldr	r3, [pc, #104]	; (6204 <xQueueGenericSend+0x448>)
    619a:	881b      	ldrh	r3, [r3, #0]
    619c:	4013      	ands	r3, r2
    619e:	b29b      	uxth	r3, r3
    61a0:	2b00      	cmp	r3, #0
    61a2:	d022      	beq.n	61ea <xQueueGenericSend+0x42e>
    61a4:	683b      	ldr	r3, [r7, #0]
    61a6:	2b00      	cmp	r3, #0
    61a8:	d10b      	bne.n	61c2 <xQueueGenericSend+0x406>
    61aa:	6a3b      	ldr	r3, [r7, #32]
    61ac:	0018      	movs	r0, r3
    61ae:	4b17      	ldr	r3, [pc, #92]	; (620c <xQueueGenericSend+0x450>)
    61b0:	4798      	blx	r3
    61b2:	0003      	movs	r3, r0
    61b4:	001a      	movs	r2, r3
    61b6:	4b16      	ldr	r3, [pc, #88]	; (6210 <xQueueGenericSend+0x454>)
    61b8:	5c9b      	ldrb	r3, [r3, r2]
    61ba:	3348      	adds	r3, #72	; 0x48
    61bc:	b2db      	uxtb	r3, r3
    61be:	001d      	movs	r5, r3
    61c0:	e000      	b.n	61c4 <xQueueGenericSend+0x408>
    61c2:	254d      	movs	r5, #77	; 0x4d
    61c4:	6a3b      	ldr	r3, [r7, #32]
    61c6:	0018      	movs	r0, r3
    61c8:	4b10      	ldr	r3, [pc, #64]	; (620c <xQueueGenericSend+0x450>)
    61ca:	4798      	blx	r3
    61cc:	0003      	movs	r3, r0
    61ce:	001a      	movs	r2, r3
    61d0:	4b0f      	ldr	r3, [pc, #60]	; (6210 <xQueueGenericSend+0x454>)
    61d2:	5c9c      	ldrb	r4, [r3, r2]
    61d4:	6a3b      	ldr	r3, [r7, #32]
    61d6:	0018      	movs	r0, r3
    61d8:	4b0e      	ldr	r3, [pc, #56]	; (6214 <xQueueGenericSend+0x458>)
    61da:	4798      	blx	r3
    61dc:	0003      	movs	r3, r0
    61de:	b2db      	uxtb	r3, r3
    61e0:	001a      	movs	r2, r3
    61e2:	0021      	movs	r1, r4
    61e4:	0028      	movs	r0, r5
    61e6:	4b0c      	ldr	r3, [pc, #48]	; (6218 <xQueueGenericSend+0x45c>)
    61e8:	4798      	blx	r3
			return errQUEUE_FULL;
    61ea:	2300      	movs	r3, #0
		}
	}
}
    61ec:	0018      	movs	r0, r3
    61ee:	46bd      	mov	sp, r7
    61f0:	b00a      	add	sp, #40	; 0x28
    61f2:	bdb0      	pop	{r4, r5, r7, pc}
    61f4:	00007125 	.word	0x00007125
    61f8:	00007af1 	.word	0x00007af1
    61fc:	00003b35 	.word	0x00003b35
    6200:	000039d5 	.word	0x000039d5
    6204:	20000024 	.word	0x20000024
    6208:	00003a95 	.word	0x00003a95
    620c:	00003995 	.word	0x00003995
    6210:	20000018 	.word	0x20000018
    6214:	00003a75 	.word	0x00003a75
    6218:	0000421d 	.word	0x0000421d

0000621c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    621c:	b5b0      	push	{r4, r5, r7, lr}
    621e:	b088      	sub	sp, #32
    6220:	af00      	add	r7, sp, #0
    6222:	60f8      	str	r0, [r7, #12]
    6224:	60b9      	str	r1, [r7, #8]
    6226:	607a      	str	r2, [r7, #4]
    6228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    622a:	68fb      	ldr	r3, [r7, #12]
    622c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    622e:	69bb      	ldr	r3, [r7, #24]
    6230:	2b00      	cmp	r3, #0
    6232:	d101      	bne.n	6238 <xQueueGenericSendFromISR+0x1c>
    6234:	b672      	cpsid	i
    6236:	e7fe      	b.n	6236 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6238:	68bb      	ldr	r3, [r7, #8]
    623a:	2b00      	cmp	r3, #0
    623c:	d103      	bne.n	6246 <xQueueGenericSendFromISR+0x2a>
    623e:	69bb      	ldr	r3, [r7, #24]
    6240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6242:	2b00      	cmp	r3, #0
    6244:	d101      	bne.n	624a <xQueueGenericSendFromISR+0x2e>
    6246:	2301      	movs	r3, #1
    6248:	e000      	b.n	624c <xQueueGenericSendFromISR+0x30>
    624a:	2300      	movs	r3, #0
    624c:	2b00      	cmp	r3, #0
    624e:	d101      	bne.n	6254 <xQueueGenericSendFromISR+0x38>
    6250:	b672      	cpsid	i
    6252:	e7fe      	b.n	6252 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6254:	683b      	ldr	r3, [r7, #0]
    6256:	2b02      	cmp	r3, #2
    6258:	d103      	bne.n	6262 <xQueueGenericSendFromISR+0x46>
    625a:	69bb      	ldr	r3, [r7, #24]
    625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    625e:	2b01      	cmp	r3, #1
    6260:	d101      	bne.n	6266 <xQueueGenericSendFromISR+0x4a>
    6262:	2301      	movs	r3, #1
    6264:	e000      	b.n	6268 <xQueueGenericSendFromISR+0x4c>
    6266:	2300      	movs	r3, #0
    6268:	2b00      	cmp	r3, #0
    626a:	d101      	bne.n	6270 <xQueueGenericSendFromISR+0x54>
    626c:	b672      	cpsid	i
    626e:	e7fe      	b.n	626e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6270:	4b68      	ldr	r3, [pc, #416]	; (6414 <xQueueGenericSendFromISR+0x1f8>)
    6272:	4798      	blx	r3
    6274:	0003      	movs	r3, r0
    6276:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    6278:	69bb      	ldr	r3, [r7, #24]
    627a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    627c:	69bb      	ldr	r3, [r7, #24]
    627e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6280:	429a      	cmp	r2, r3
    6282:	d303      	bcc.n	628c <xQueueGenericSendFromISR+0x70>
    6284:	683b      	ldr	r3, [r7, #0]
    6286:	2b02      	cmp	r3, #2
    6288:	d000      	beq.n	628c <xQueueGenericSendFromISR+0x70>
    628a:	e088      	b.n	639e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    628c:	2313      	movs	r3, #19
    628e:	18fb      	adds	r3, r7, r3
    6290:	69ba      	ldr	r2, [r7, #24]
    6292:	2145      	movs	r1, #69	; 0x45
    6294:	5c52      	ldrb	r2, [r2, r1]
    6296:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    6298:	69bb      	ldr	r3, [r7, #24]
    629a:	0018      	movs	r0, r3
    629c:	4b5e      	ldr	r3, [pc, #376]	; (6418 <xQueueGenericSendFromISR+0x1fc>)
    629e:	4798      	blx	r3
    62a0:	0003      	movs	r3, r0
    62a2:	001a      	movs	r2, r3
    62a4:	4b5d      	ldr	r3, [pc, #372]	; (641c <xQueueGenericSendFromISR+0x200>)
    62a6:	881b      	ldrh	r3, [r3, #0]
    62a8:	4013      	ands	r3, r2
    62aa:	b29b      	uxth	r3, r3
    62ac:	2b00      	cmp	r3, #0
    62ae:	d022      	beq.n	62f6 <xQueueGenericSendFromISR+0xda>
    62b0:	683b      	ldr	r3, [r7, #0]
    62b2:	2b00      	cmp	r3, #0
    62b4:	d10b      	bne.n	62ce <xQueueGenericSendFromISR+0xb2>
    62b6:	69bb      	ldr	r3, [r7, #24]
    62b8:	0018      	movs	r0, r3
    62ba:	4b59      	ldr	r3, [pc, #356]	; (6420 <xQueueGenericSendFromISR+0x204>)
    62bc:	4798      	blx	r3
    62be:	0003      	movs	r3, r0
    62c0:	001a      	movs	r2, r3
    62c2:	4b58      	ldr	r3, [pc, #352]	; (6424 <xQueueGenericSendFromISR+0x208>)
    62c4:	5c9b      	ldrb	r3, [r3, r2]
    62c6:	3330      	adds	r3, #48	; 0x30
    62c8:	b2db      	uxtb	r3, r3
    62ca:	001d      	movs	r5, r3
    62cc:	e000      	b.n	62d0 <xQueueGenericSendFromISR+0xb4>
    62ce:	2535      	movs	r5, #53	; 0x35
    62d0:	69bb      	ldr	r3, [r7, #24]
    62d2:	0018      	movs	r0, r3
    62d4:	4b52      	ldr	r3, [pc, #328]	; (6420 <xQueueGenericSendFromISR+0x204>)
    62d6:	4798      	blx	r3
    62d8:	0003      	movs	r3, r0
    62da:	001a      	movs	r2, r3
    62dc:	4b51      	ldr	r3, [pc, #324]	; (6424 <xQueueGenericSendFromISR+0x208>)
    62de:	5c9c      	ldrb	r4, [r3, r2]
    62e0:	69bb      	ldr	r3, [r7, #24]
    62e2:	0018      	movs	r0, r3
    62e4:	4b50      	ldr	r3, [pc, #320]	; (6428 <xQueueGenericSendFromISR+0x20c>)
    62e6:	4798      	blx	r3
    62e8:	0003      	movs	r3, r0
    62ea:	b2db      	uxtb	r3, r3
    62ec:	001a      	movs	r2, r3
    62ee:	0021      	movs	r1, r4
    62f0:	0028      	movs	r0, r5
    62f2:	4b4e      	ldr	r3, [pc, #312]	; (642c <xQueueGenericSendFromISR+0x210>)
    62f4:	4798      	blx	r3
    62f6:	69bb      	ldr	r3, [r7, #24]
    62f8:	0018      	movs	r0, r3
    62fa:	4b49      	ldr	r3, [pc, #292]	; (6420 <xQueueGenericSendFromISR+0x204>)
    62fc:	4798      	blx	r3
    62fe:	0003      	movs	r3, r0
    6300:	001a      	movs	r2, r3
    6302:	4b48      	ldr	r3, [pc, #288]	; (6424 <xQueueGenericSendFromISR+0x208>)
    6304:	5c9c      	ldrb	r4, [r3, r2]
    6306:	69bb      	ldr	r3, [r7, #24]
    6308:	0018      	movs	r0, r3
    630a:	4b47      	ldr	r3, [pc, #284]	; (6428 <xQueueGenericSendFromISR+0x20c>)
    630c:	4798      	blx	r3
    630e:	0003      	movs	r3, r0
    6310:	b2d9      	uxtb	r1, r3
    6312:	69bb      	ldr	r3, [r7, #24]
    6314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6316:	b2db      	uxtb	r3, r3
    6318:	3301      	adds	r3, #1
    631a:	b2db      	uxtb	r3, r3
    631c:	001a      	movs	r2, r3
    631e:	0020      	movs	r0, r4
    6320:	4b43      	ldr	r3, [pc, #268]	; (6430 <xQueueGenericSendFromISR+0x214>)
    6322:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6324:	683a      	ldr	r2, [r7, #0]
    6326:	68b9      	ldr	r1, [r7, #8]
    6328:	69bb      	ldr	r3, [r7, #24]
    632a:	0018      	movs	r0, r3
    632c:	4b41      	ldr	r3, [pc, #260]	; (6434 <xQueueGenericSendFromISR+0x218>)
    632e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    6330:	2313      	movs	r3, #19
    6332:	18fb      	adds	r3, r7, r3
    6334:	781b      	ldrb	r3, [r3, #0]
    6336:	b25b      	sxtb	r3, r3
    6338:	3301      	adds	r3, #1
    633a:	d124      	bne.n	6386 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    633c:	69bb      	ldr	r3, [r7, #24]
    633e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6340:	2b00      	cmp	r3, #0
    6342:	d00e      	beq.n	6362 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    6344:	683a      	ldr	r2, [r7, #0]
    6346:	69bb      	ldr	r3, [r7, #24]
    6348:	0011      	movs	r1, r2
    634a:	0018      	movs	r0, r3
    634c:	4b3a      	ldr	r3, [pc, #232]	; (6438 <xQueueGenericSendFromISR+0x21c>)
    634e:	4798      	blx	r3
    6350:	1e03      	subs	r3, r0, #0
    6352:	d021      	beq.n	6398 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    6354:	687b      	ldr	r3, [r7, #4]
    6356:	2b00      	cmp	r3, #0
    6358:	d01e      	beq.n	6398 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    635a:	687b      	ldr	r3, [r7, #4]
    635c:	2201      	movs	r2, #1
    635e:	601a      	str	r2, [r3, #0]
    6360:	e01a      	b.n	6398 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6362:	69bb      	ldr	r3, [r7, #24]
    6364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6366:	2b00      	cmp	r3, #0
    6368:	d016      	beq.n	6398 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    636a:	69bb      	ldr	r3, [r7, #24]
    636c:	3324      	adds	r3, #36	; 0x24
    636e:	0018      	movs	r0, r3
    6370:	4b32      	ldr	r3, [pc, #200]	; (643c <xQueueGenericSendFromISR+0x220>)
    6372:	4798      	blx	r3
    6374:	1e03      	subs	r3, r0, #0
    6376:	d00f      	beq.n	6398 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    6378:	687b      	ldr	r3, [r7, #4]
    637a:	2b00      	cmp	r3, #0
    637c:	d00c      	beq.n	6398 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    637e:	687b      	ldr	r3, [r7, #4]
    6380:	2201      	movs	r2, #1
    6382:	601a      	str	r2, [r3, #0]
    6384:	e008      	b.n	6398 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    6386:	2313      	movs	r3, #19
    6388:	18fb      	adds	r3, r7, r3
    638a:	781b      	ldrb	r3, [r3, #0]
    638c:	3301      	adds	r3, #1
    638e:	b2db      	uxtb	r3, r3
    6390:	b259      	sxtb	r1, r3
    6392:	69bb      	ldr	r3, [r7, #24]
    6394:	2245      	movs	r2, #69	; 0x45
    6396:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    6398:	2301      	movs	r3, #1
    639a:	61fb      	str	r3, [r7, #28]
		{
    639c:	e030      	b.n	6400 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    639e:	69bb      	ldr	r3, [r7, #24]
    63a0:	0018      	movs	r0, r3
    63a2:	4b1d      	ldr	r3, [pc, #116]	; (6418 <xQueueGenericSendFromISR+0x1fc>)
    63a4:	4798      	blx	r3
    63a6:	0003      	movs	r3, r0
    63a8:	001a      	movs	r2, r3
    63aa:	4b1c      	ldr	r3, [pc, #112]	; (641c <xQueueGenericSendFromISR+0x200>)
    63ac:	881b      	ldrh	r3, [r3, #0]
    63ae:	4013      	ands	r3, r2
    63b0:	b29b      	uxth	r3, r3
    63b2:	2b00      	cmp	r3, #0
    63b4:	d022      	beq.n	63fc <xQueueGenericSendFromISR+0x1e0>
    63b6:	683b      	ldr	r3, [r7, #0]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d10b      	bne.n	63d4 <xQueueGenericSendFromISR+0x1b8>
    63bc:	69bb      	ldr	r3, [r7, #24]
    63be:	0018      	movs	r0, r3
    63c0:	4b17      	ldr	r3, [pc, #92]	; (6420 <xQueueGenericSendFromISR+0x204>)
    63c2:	4798      	blx	r3
    63c4:	0003      	movs	r3, r0
    63c6:	001a      	movs	r2, r3
    63c8:	4b16      	ldr	r3, [pc, #88]	; (6424 <xQueueGenericSendFromISR+0x208>)
    63ca:	5c9b      	ldrb	r3, [r3, r2]
    63cc:	3358      	adds	r3, #88	; 0x58
    63ce:	b2db      	uxtb	r3, r3
    63d0:	001d      	movs	r5, r3
    63d2:	e000      	b.n	63d6 <xQueueGenericSendFromISR+0x1ba>
    63d4:	255d      	movs	r5, #93	; 0x5d
    63d6:	69bb      	ldr	r3, [r7, #24]
    63d8:	0018      	movs	r0, r3
    63da:	4b11      	ldr	r3, [pc, #68]	; (6420 <xQueueGenericSendFromISR+0x204>)
    63dc:	4798      	blx	r3
    63de:	0003      	movs	r3, r0
    63e0:	001a      	movs	r2, r3
    63e2:	4b10      	ldr	r3, [pc, #64]	; (6424 <xQueueGenericSendFromISR+0x208>)
    63e4:	5c9c      	ldrb	r4, [r3, r2]
    63e6:	69bb      	ldr	r3, [r7, #24]
    63e8:	0018      	movs	r0, r3
    63ea:	4b0f      	ldr	r3, [pc, #60]	; (6428 <xQueueGenericSendFromISR+0x20c>)
    63ec:	4798      	blx	r3
    63ee:	0003      	movs	r3, r0
    63f0:	b2db      	uxtb	r3, r3
    63f2:	001a      	movs	r2, r3
    63f4:	0021      	movs	r1, r4
    63f6:	0028      	movs	r0, r5
    63f8:	4b0c      	ldr	r3, [pc, #48]	; (642c <xQueueGenericSendFromISR+0x210>)
    63fa:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    63fc:	2300      	movs	r3, #0
    63fe:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    6400:	697b      	ldr	r3, [r7, #20]
    6402:	0018      	movs	r0, r3
    6404:	4b0e      	ldr	r3, [pc, #56]	; (6440 <xQueueGenericSendFromISR+0x224>)
    6406:	4798      	blx	r3

	return xReturn;
    6408:	69fb      	ldr	r3, [r7, #28]
}
    640a:	0018      	movs	r0, r3
    640c:	46bd      	mov	sp, r7
    640e:	b008      	add	sp, #32
    6410:	bdb0      	pop	{r4, r5, r7, pc}
    6412:	46c0      	nop			; (mov r8, r8)
    6414:	0000587d 	.word	0x0000587d
    6418:	00003a95 	.word	0x00003a95
    641c:	20000024 	.word	0x20000024
    6420:	00003995 	.word	0x00003995
    6424:	20000018 	.word	0x20000018
    6428:	00003a75 	.word	0x00003a75
    642c:	0000421d 	.word	0x0000421d
    6430:	00004879 	.word	0x00004879
    6434:	00006ff5 	.word	0x00006ff5
    6438:	000072f9 	.word	0x000072f9
    643c:	000080b1 	.word	0x000080b1
    6440:	00005889 	.word	0x00005889

00006444 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    6444:	b580      	push	{r7, lr}
    6446:	b082      	sub	sp, #8
    6448:	af00      	add	r7, sp, #0
    644a:	6078      	str	r0, [r7, #4]
    644c:	6039      	str	r1, [r7, #0]
    644e:	6839      	ldr	r1, [r7, #0]
    6450:	687b      	ldr	r3, [r7, #4]
    6452:	2200      	movs	r2, #0
    6454:	0018      	movs	r0, r3
    6456:	4b03      	ldr	r3, [pc, #12]	; (6464 <xQueueGiveFromISR+0x20>)
    6458:	4798      	blx	r3
    645a:	0003      	movs	r3, r0
    645c:	0018      	movs	r0, r3
    645e:	46bd      	mov	sp, r7
    6460:	b002      	add	sp, #8
    6462:	bd80      	pop	{r7, pc}
    6464:	00006469 	.word	0x00006469

00006468 <MyWrapper>:
{
    6468:	b5b0      	push	{r4, r5, r7, lr}
    646a:	b08a      	sub	sp, #40	; 0x28
    646c:	af00      	add	r7, sp, #0
    646e:	60f8      	str	r0, [r7, #12]
    6470:	60b9      	str	r1, [r7, #8]
    6472:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6474:	68fb      	ldr	r3, [r7, #12]
    6476:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    6478:	6a3b      	ldr	r3, [r7, #32]
    647a:	2b00      	cmp	r3, #0
    647c:	d101      	bne.n	6482 <MyWrapper+0x1a>
    647e:	b672      	cpsid	i
    6480:	e7fe      	b.n	6480 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    6482:	6a3b      	ldr	r3, [r7, #32]
    6484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6486:	2b00      	cmp	r3, #0
    6488:	d001      	beq.n	648e <MyWrapper+0x26>
    648a:	b672      	cpsid	i
    648c:	e7fe      	b.n	648c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    648e:	6a3b      	ldr	r3, [r7, #32]
    6490:	681b      	ldr	r3, [r3, #0]
    6492:	2b00      	cmp	r3, #0
    6494:	d103      	bne.n	649e <MyWrapper+0x36>
    6496:	6a3b      	ldr	r3, [r7, #32]
    6498:	685b      	ldr	r3, [r3, #4]
    649a:	2b00      	cmp	r3, #0
    649c:	d101      	bne.n	64a2 <MyWrapper+0x3a>
    649e:	2301      	movs	r3, #1
    64a0:	e000      	b.n	64a4 <MyWrapper+0x3c>
    64a2:	2300      	movs	r3, #0
    64a4:	2b00      	cmp	r3, #0
    64a6:	d101      	bne.n	64ac <MyWrapper+0x44>
    64a8:	b672      	cpsid	i
    64aa:	e7fe      	b.n	64aa <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    64ac:	4b66      	ldr	r3, [pc, #408]	; (6648 <MyWrapper+0x1e0>)
    64ae:	4798      	blx	r3
    64b0:	0003      	movs	r3, r0
    64b2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    64b4:	6a3b      	ldr	r3, [r7, #32]
    64b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    64b8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    64ba:	6a3b      	ldr	r3, [r7, #32]
    64bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    64be:	69bb      	ldr	r3, [r7, #24]
    64c0:	429a      	cmp	r2, r3
    64c2:	d800      	bhi.n	64c6 <MyWrapper+0x5e>
    64c4:	e085      	b.n	65d2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    64c6:	2317      	movs	r3, #23
    64c8:	18fb      	adds	r3, r7, r3
    64ca:	6a3a      	ldr	r2, [r7, #32]
    64cc:	2145      	movs	r1, #69	; 0x45
    64ce:	5c52      	ldrb	r2, [r2, r1]
    64d0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    64d2:	6a3b      	ldr	r3, [r7, #32]
    64d4:	0018      	movs	r0, r3
    64d6:	4b5d      	ldr	r3, [pc, #372]	; (664c <MyWrapper+0x1e4>)
    64d8:	4798      	blx	r3
    64da:	0003      	movs	r3, r0
    64dc:	001a      	movs	r2, r3
    64de:	4b5c      	ldr	r3, [pc, #368]	; (6650 <MyWrapper+0x1e8>)
    64e0:	881b      	ldrh	r3, [r3, #0]
    64e2:	4013      	ands	r3, r2
    64e4:	b29b      	uxth	r3, r3
    64e6:	2b00      	cmp	r3, #0
    64e8:	d022      	beq.n	6530 <MyWrapper+0xc8>
    64ea:	687b      	ldr	r3, [r7, #4]
    64ec:	2b00      	cmp	r3, #0
    64ee:	d10b      	bne.n	6508 <MyWrapper+0xa0>
    64f0:	6a3b      	ldr	r3, [r7, #32]
    64f2:	0018      	movs	r0, r3
    64f4:	4b57      	ldr	r3, [pc, #348]	; (6654 <MyWrapper+0x1ec>)
    64f6:	4798      	blx	r3
    64f8:	0003      	movs	r3, r0
    64fa:	001a      	movs	r2, r3
    64fc:	4b56      	ldr	r3, [pc, #344]	; (6658 <MyWrapper+0x1f0>)
    64fe:	5c9b      	ldrb	r3, [r3, r2]
    6500:	3330      	adds	r3, #48	; 0x30
    6502:	b2db      	uxtb	r3, r3
    6504:	001d      	movs	r5, r3
    6506:	e000      	b.n	650a <MyWrapper+0xa2>
    6508:	2535      	movs	r5, #53	; 0x35
    650a:	6a3b      	ldr	r3, [r7, #32]
    650c:	0018      	movs	r0, r3
    650e:	4b51      	ldr	r3, [pc, #324]	; (6654 <MyWrapper+0x1ec>)
    6510:	4798      	blx	r3
    6512:	0003      	movs	r3, r0
    6514:	001a      	movs	r2, r3
    6516:	4b50      	ldr	r3, [pc, #320]	; (6658 <MyWrapper+0x1f0>)
    6518:	5c9c      	ldrb	r4, [r3, r2]
    651a:	6a3b      	ldr	r3, [r7, #32]
    651c:	0018      	movs	r0, r3
    651e:	4b4f      	ldr	r3, [pc, #316]	; (665c <MyWrapper+0x1f4>)
    6520:	4798      	blx	r3
    6522:	0003      	movs	r3, r0
    6524:	b2db      	uxtb	r3, r3
    6526:	001a      	movs	r2, r3
    6528:	0021      	movs	r1, r4
    652a:	0028      	movs	r0, r5
    652c:	4b4c      	ldr	r3, [pc, #304]	; (6660 <MyWrapper+0x1f8>)
    652e:	4798      	blx	r3
    6530:	6a3b      	ldr	r3, [r7, #32]
    6532:	0018      	movs	r0, r3
    6534:	4b47      	ldr	r3, [pc, #284]	; (6654 <MyWrapper+0x1ec>)
    6536:	4798      	blx	r3
    6538:	0003      	movs	r3, r0
    653a:	001a      	movs	r2, r3
    653c:	4b46      	ldr	r3, [pc, #280]	; (6658 <MyWrapper+0x1f0>)
    653e:	5c9c      	ldrb	r4, [r3, r2]
    6540:	6a3b      	ldr	r3, [r7, #32]
    6542:	0018      	movs	r0, r3
    6544:	4b45      	ldr	r3, [pc, #276]	; (665c <MyWrapper+0x1f4>)
    6546:	4798      	blx	r3
    6548:	0003      	movs	r3, r0
    654a:	b2d9      	uxtb	r1, r3
    654c:	6a3b      	ldr	r3, [r7, #32]
    654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6550:	b2db      	uxtb	r3, r3
    6552:	3301      	adds	r3, #1
    6554:	b2db      	uxtb	r3, r3
    6556:	001a      	movs	r2, r3
    6558:	0020      	movs	r0, r4
    655a:	4b42      	ldr	r3, [pc, #264]	; (6664 <MyWrapper+0x1fc>)
    655c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    655e:	69bb      	ldr	r3, [r7, #24]
    6560:	1c5a      	adds	r2, r3, #1
    6562:	6a3b      	ldr	r3, [r7, #32]
    6564:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    6566:	2317      	movs	r3, #23
    6568:	18fb      	adds	r3, r7, r3
    656a:	781b      	ldrb	r3, [r3, #0]
    656c:	b25b      	sxtb	r3, r3
    656e:	3301      	adds	r3, #1
    6570:	d123      	bne.n	65ba <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    6572:	6a3b      	ldr	r3, [r7, #32]
    6574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6576:	2b00      	cmp	r3, #0
    6578:	d00d      	beq.n	6596 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    657a:	6a3b      	ldr	r3, [r7, #32]
    657c:	2100      	movs	r1, #0
    657e:	0018      	movs	r0, r3
    6580:	4b39      	ldr	r3, [pc, #228]	; (6668 <MyWrapper+0x200>)
    6582:	4798      	blx	r3
    6584:	1e03      	subs	r3, r0, #0
    6586:	d021      	beq.n	65cc <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    6588:	68bb      	ldr	r3, [r7, #8]
    658a:	2b00      	cmp	r3, #0
    658c:	d01e      	beq.n	65cc <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    658e:	68bb      	ldr	r3, [r7, #8]
    6590:	2201      	movs	r2, #1
    6592:	601a      	str	r2, [r3, #0]
    6594:	e01a      	b.n	65cc <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6596:	6a3b      	ldr	r3, [r7, #32]
    6598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    659a:	2b00      	cmp	r3, #0
    659c:	d016      	beq.n	65cc <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    659e:	6a3b      	ldr	r3, [r7, #32]
    65a0:	3324      	adds	r3, #36	; 0x24
    65a2:	0018      	movs	r0, r3
    65a4:	4b31      	ldr	r3, [pc, #196]	; (666c <MyWrapper+0x204>)
    65a6:	4798      	blx	r3
    65a8:	1e03      	subs	r3, r0, #0
    65aa:	d00f      	beq.n	65cc <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    65ac:	68bb      	ldr	r3, [r7, #8]
    65ae:	2b00      	cmp	r3, #0
    65b0:	d00c      	beq.n	65cc <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    65b2:	68bb      	ldr	r3, [r7, #8]
    65b4:	2201      	movs	r2, #1
    65b6:	601a      	str	r2, [r3, #0]
    65b8:	e008      	b.n	65cc <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    65ba:	2317      	movs	r3, #23
    65bc:	18fb      	adds	r3, r7, r3
    65be:	781b      	ldrb	r3, [r3, #0]
    65c0:	3301      	adds	r3, #1
    65c2:	b2db      	uxtb	r3, r3
    65c4:	b259      	sxtb	r1, r3
    65c6:	6a3b      	ldr	r3, [r7, #32]
    65c8:	2245      	movs	r2, #69	; 0x45
    65ca:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    65cc:	2301      	movs	r3, #1
    65ce:	627b      	str	r3, [r7, #36]	; 0x24
    65d0:	e030      	b.n	6634 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    65d2:	6a3b      	ldr	r3, [r7, #32]
    65d4:	0018      	movs	r0, r3
    65d6:	4b1d      	ldr	r3, [pc, #116]	; (664c <MyWrapper+0x1e4>)
    65d8:	4798      	blx	r3
    65da:	0003      	movs	r3, r0
    65dc:	001a      	movs	r2, r3
    65de:	4b1c      	ldr	r3, [pc, #112]	; (6650 <MyWrapper+0x1e8>)
    65e0:	881b      	ldrh	r3, [r3, #0]
    65e2:	4013      	ands	r3, r2
    65e4:	b29b      	uxth	r3, r3
    65e6:	2b00      	cmp	r3, #0
    65e8:	d022      	beq.n	6630 <MyWrapper+0x1c8>
    65ea:	687b      	ldr	r3, [r7, #4]
    65ec:	2b00      	cmp	r3, #0
    65ee:	d10b      	bne.n	6608 <MyWrapper+0x1a0>
    65f0:	6a3b      	ldr	r3, [r7, #32]
    65f2:	0018      	movs	r0, r3
    65f4:	4b17      	ldr	r3, [pc, #92]	; (6654 <MyWrapper+0x1ec>)
    65f6:	4798      	blx	r3
    65f8:	0003      	movs	r3, r0
    65fa:	001a      	movs	r2, r3
    65fc:	4b16      	ldr	r3, [pc, #88]	; (6658 <MyWrapper+0x1f0>)
    65fe:	5c9b      	ldrb	r3, [r3, r2]
    6600:	3358      	adds	r3, #88	; 0x58
    6602:	b2db      	uxtb	r3, r3
    6604:	001d      	movs	r5, r3
    6606:	e000      	b.n	660a <MyWrapper+0x1a2>
    6608:	255d      	movs	r5, #93	; 0x5d
    660a:	6a3b      	ldr	r3, [r7, #32]
    660c:	0018      	movs	r0, r3
    660e:	4b11      	ldr	r3, [pc, #68]	; (6654 <MyWrapper+0x1ec>)
    6610:	4798      	blx	r3
    6612:	0003      	movs	r3, r0
    6614:	001a      	movs	r2, r3
    6616:	4b10      	ldr	r3, [pc, #64]	; (6658 <MyWrapper+0x1f0>)
    6618:	5c9c      	ldrb	r4, [r3, r2]
    661a:	6a3b      	ldr	r3, [r7, #32]
    661c:	0018      	movs	r0, r3
    661e:	4b0f      	ldr	r3, [pc, #60]	; (665c <MyWrapper+0x1f4>)
    6620:	4798      	blx	r3
    6622:	0003      	movs	r3, r0
    6624:	b2db      	uxtb	r3, r3
    6626:	001a      	movs	r2, r3
    6628:	0021      	movs	r1, r4
    662a:	0028      	movs	r0, r5
    662c:	4b0c      	ldr	r3, [pc, #48]	; (6660 <MyWrapper+0x1f8>)
    662e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    6630:	2300      	movs	r3, #0
    6632:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    6634:	69fb      	ldr	r3, [r7, #28]
    6636:	0018      	movs	r0, r3
    6638:	4b0d      	ldr	r3, [pc, #52]	; (6670 <MyWrapper+0x208>)
    663a:	4798      	blx	r3

	return xReturn;
    663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    663e:	0018      	movs	r0, r3
    6640:	46bd      	mov	sp, r7
    6642:	b00a      	add	sp, #40	; 0x28
    6644:	bdb0      	pop	{r4, r5, r7, pc}
    6646:	46c0      	nop			; (mov r8, r8)
    6648:	0000587d 	.word	0x0000587d
    664c:	00003a95 	.word	0x00003a95
    6650:	20000024 	.word	0x20000024
    6654:	00003995 	.word	0x00003995
    6658:	20000018 	.word	0x20000018
    665c:	00003a75 	.word	0x00003a75
    6660:	0000421d 	.word	0x0000421d
    6664:	00004879 	.word	0x00004879
    6668:	000072f9 	.word	0x000072f9
    666c:	000080b1 	.word	0x000080b1
    6670:	00005889 	.word	0x00005889

00006674 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    6674:	b5b0      	push	{r4, r5, r7, lr}
    6676:	b08a      	sub	sp, #40	; 0x28
    6678:	af00      	add	r7, sp, #0
    667a:	60f8      	str	r0, [r7, #12]
    667c:	60b9      	str	r1, [r7, #8]
    667e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    6680:	2300      	movs	r3, #0
    6682:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6684:	68fb      	ldr	r3, [r7, #12]
    6686:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    6688:	6a3b      	ldr	r3, [r7, #32]
    668a:	2b00      	cmp	r3, #0
    668c:	d101      	bne.n	6692 <xQueueReceive+0x1e>
    668e:	b672      	cpsid	i
    6690:	e7fe      	b.n	6690 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6692:	68bb      	ldr	r3, [r7, #8]
    6694:	2b00      	cmp	r3, #0
    6696:	d103      	bne.n	66a0 <xQueueReceive+0x2c>
    6698:	6a3b      	ldr	r3, [r7, #32]
    669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    669c:	2b00      	cmp	r3, #0
    669e:	d101      	bne.n	66a4 <xQueueReceive+0x30>
    66a0:	2301      	movs	r3, #1
    66a2:	e000      	b.n	66a6 <xQueueReceive+0x32>
    66a4:	2300      	movs	r3, #0
    66a6:	2b00      	cmp	r3, #0
    66a8:	d101      	bne.n	66ae <xQueueReceive+0x3a>
    66aa:	b672      	cpsid	i
    66ac:	e7fe      	b.n	66ac <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    66ae:	4bbf      	ldr	r3, [pc, #764]	; (69ac <xQueueReceive+0x338>)
    66b0:	4798      	blx	r3
    66b2:	1e03      	subs	r3, r0, #0
    66b4:	d102      	bne.n	66bc <xQueueReceive+0x48>
    66b6:	687b      	ldr	r3, [r7, #4]
    66b8:	2b00      	cmp	r3, #0
    66ba:	d101      	bne.n	66c0 <xQueueReceive+0x4c>
    66bc:	2301      	movs	r3, #1
    66be:	e000      	b.n	66c2 <xQueueReceive+0x4e>
    66c0:	2300      	movs	r3, #0
    66c2:	2b00      	cmp	r3, #0
    66c4:	d101      	bne.n	66ca <xQueueReceive+0x56>
    66c6:	b672      	cpsid	i
    66c8:	e7fe      	b.n	66c8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    66ca:	4bb9      	ldr	r3, [pc, #740]	; (69b0 <xQueueReceive+0x33c>)
    66cc:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    66ce:	6a3b      	ldr	r3, [r7, #32]
    66d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    66d2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    66d4:	69fb      	ldr	r3, [r7, #28]
    66d6:	2b00      	cmp	r3, #0
    66d8:	d100      	bne.n	66dc <xQueueReceive+0x68>
    66da:	e07d      	b.n	67d8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    66dc:	68ba      	ldr	r2, [r7, #8]
    66de:	6a3b      	ldr	r3, [r7, #32]
    66e0:	0011      	movs	r1, r2
    66e2:	0018      	movs	r0, r3
    66e4:	4bb3      	ldr	r3, [pc, #716]	; (69b4 <xQueueReceive+0x340>)
    66e6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    66e8:	4bb3      	ldr	r3, [pc, #716]	; (69b8 <xQueueReceive+0x344>)
    66ea:	4798      	blx	r3
    66ec:	0003      	movs	r3, r0
    66ee:	0018      	movs	r0, r3
    66f0:	4bb2      	ldr	r3, [pc, #712]	; (69bc <xQueueReceive+0x348>)
    66f2:	4798      	blx	r3
    66f4:	0003      	movs	r3, r0
    66f6:	001a      	movs	r2, r3
    66f8:	4bb1      	ldr	r3, [pc, #708]	; (69c0 <xQueueReceive+0x34c>)
    66fa:	881b      	ldrh	r3, [r3, #0]
    66fc:	4013      	ands	r3, r2
    66fe:	b29b      	uxth	r3, r3
    6700:	2b00      	cmp	r3, #0
    6702:	d029      	beq.n	6758 <xQueueReceive+0xe4>
    6704:	6a3b      	ldr	r3, [r7, #32]
    6706:	0018      	movs	r0, r3
    6708:	4bae      	ldr	r3, [pc, #696]	; (69c4 <xQueueReceive+0x350>)
    670a:	4798      	blx	r3
    670c:	0003      	movs	r3, r0
    670e:	001a      	movs	r2, r3
    6710:	4bab      	ldr	r3, [pc, #684]	; (69c0 <xQueueReceive+0x34c>)
    6712:	881b      	ldrh	r3, [r3, #0]
    6714:	4013      	ands	r3, r2
    6716:	b29b      	uxth	r3, r3
    6718:	2b00      	cmp	r3, #0
    671a:	d01d      	beq.n	6758 <xQueueReceive+0xe4>
    671c:	6a3b      	ldr	r3, [r7, #32]
    671e:	0018      	movs	r0, r3
    6720:	4ba9      	ldr	r3, [pc, #676]	; (69c8 <xQueueReceive+0x354>)
    6722:	4798      	blx	r3
    6724:	0003      	movs	r3, r0
    6726:	001a      	movs	r2, r3
    6728:	4ba8      	ldr	r3, [pc, #672]	; (69cc <xQueueReceive+0x358>)
    672a:	5c9b      	ldrb	r3, [r3, r2]
    672c:	3328      	adds	r3, #40	; 0x28
    672e:	b2db      	uxtb	r3, r3
    6730:	001d      	movs	r5, r3
    6732:	6a3b      	ldr	r3, [r7, #32]
    6734:	0018      	movs	r0, r3
    6736:	4ba4      	ldr	r3, [pc, #656]	; (69c8 <xQueueReceive+0x354>)
    6738:	4798      	blx	r3
    673a:	0003      	movs	r3, r0
    673c:	001a      	movs	r2, r3
    673e:	4ba3      	ldr	r3, [pc, #652]	; (69cc <xQueueReceive+0x358>)
    6740:	5c9c      	ldrb	r4, [r3, r2]
    6742:	6a3b      	ldr	r3, [r7, #32]
    6744:	0018      	movs	r0, r3
    6746:	4ba2      	ldr	r3, [pc, #648]	; (69d0 <xQueueReceive+0x35c>)
    6748:	4798      	blx	r3
    674a:	0003      	movs	r3, r0
    674c:	b2db      	uxtb	r3, r3
    674e:	001a      	movs	r2, r3
    6750:	0021      	movs	r1, r4
    6752:	0028      	movs	r0, r5
    6754:	4b9f      	ldr	r3, [pc, #636]	; (69d4 <xQueueReceive+0x360>)
    6756:	4798      	blx	r3
    6758:	6a3b      	ldr	r3, [r7, #32]
    675a:	0018      	movs	r0, r3
    675c:	4b9a      	ldr	r3, [pc, #616]	; (69c8 <xQueueReceive+0x354>)
    675e:	4798      	blx	r3
    6760:	0003      	movs	r3, r0
    6762:	001a      	movs	r2, r3
    6764:	4b99      	ldr	r3, [pc, #612]	; (69cc <xQueueReceive+0x358>)
    6766:	5c9c      	ldrb	r4, [r3, r2]
    6768:	6a3b      	ldr	r3, [r7, #32]
    676a:	0018      	movs	r0, r3
    676c:	4b98      	ldr	r3, [pc, #608]	; (69d0 <xQueueReceive+0x35c>)
    676e:	4798      	blx	r3
    6770:	0003      	movs	r3, r0
    6772:	b2dd      	uxtb	r5, r3
    6774:	6a3b      	ldr	r3, [r7, #32]
    6776:	0018      	movs	r0, r3
    6778:	4b93      	ldr	r3, [pc, #588]	; (69c8 <xQueueReceive+0x354>)
    677a:	4798      	blx	r3
    677c:	0003      	movs	r3, r0
    677e:	001a      	movs	r2, r3
    6780:	4b92      	ldr	r3, [pc, #584]	; (69cc <xQueueReceive+0x358>)
    6782:	5c9b      	ldrb	r3, [r3, r2]
    6784:	2b02      	cmp	r3, #2
    6786:	d108      	bne.n	679a <xQueueReceive+0x126>
    6788:	4b8b      	ldr	r3, [pc, #556]	; (69b8 <xQueueReceive+0x344>)
    678a:	4798      	blx	r3
    678c:	0003      	movs	r3, r0
    678e:	0018      	movs	r0, r3
    6790:	4b91      	ldr	r3, [pc, #580]	; (69d8 <xQueueReceive+0x364>)
    6792:	4798      	blx	r3
    6794:	0003      	movs	r3, r0
    6796:	b2db      	uxtb	r3, r3
    6798:	e004      	b.n	67a4 <xQueueReceive+0x130>
    679a:	6a3b      	ldr	r3, [r7, #32]
    679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    679e:	b2db      	uxtb	r3, r3
    67a0:	3b01      	subs	r3, #1
    67a2:	b2db      	uxtb	r3, r3
    67a4:	001a      	movs	r2, r3
    67a6:	0029      	movs	r1, r5
    67a8:	0020      	movs	r0, r4
    67aa:	4b8c      	ldr	r3, [pc, #560]	; (69dc <xQueueReceive+0x368>)
    67ac:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    67ae:	69fb      	ldr	r3, [r7, #28]
    67b0:	1e5a      	subs	r2, r3, #1
    67b2:	6a3b      	ldr	r3, [r7, #32]
    67b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    67b6:	6a3b      	ldr	r3, [r7, #32]
    67b8:	691b      	ldr	r3, [r3, #16]
    67ba:	2b00      	cmp	r3, #0
    67bc:	d008      	beq.n	67d0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    67be:	6a3b      	ldr	r3, [r7, #32]
    67c0:	3310      	adds	r3, #16
    67c2:	0018      	movs	r0, r3
    67c4:	4b86      	ldr	r3, [pc, #536]	; (69e0 <xQueueReceive+0x36c>)
    67c6:	4798      	blx	r3
    67c8:	1e03      	subs	r3, r0, #0
    67ca:	d001      	beq.n	67d0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
    67cc:	4b85      	ldr	r3, [pc, #532]	; (69e4 <xQueueReceive+0x370>)
    67ce:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    67d0:	4b85      	ldr	r3, [pc, #532]	; (69e8 <xQueueReceive+0x374>)
    67d2:	4798      	blx	r3
				return pdPASS;
    67d4:	2301      	movs	r3, #1
    67d6:	e15f      	b.n	6a98 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	2b00      	cmp	r3, #0
    67dc:	d13b      	bne.n	6856 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    67de:	4b82      	ldr	r3, [pc, #520]	; (69e8 <xQueueReceive+0x374>)
    67e0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    67e2:	4b75      	ldr	r3, [pc, #468]	; (69b8 <xQueueReceive+0x344>)
    67e4:	4798      	blx	r3
    67e6:	0003      	movs	r3, r0
    67e8:	0018      	movs	r0, r3
    67ea:	4b74      	ldr	r3, [pc, #464]	; (69bc <xQueueReceive+0x348>)
    67ec:	4798      	blx	r3
    67ee:	0003      	movs	r3, r0
    67f0:	001a      	movs	r2, r3
    67f2:	4b73      	ldr	r3, [pc, #460]	; (69c0 <xQueueReceive+0x34c>)
    67f4:	881b      	ldrh	r3, [r3, #0]
    67f6:	4013      	ands	r3, r2
    67f8:	b29b      	uxth	r3, r3
    67fa:	2b00      	cmp	r3, #0
    67fc:	d029      	beq.n	6852 <xQueueReceive+0x1de>
    67fe:	6a3b      	ldr	r3, [r7, #32]
    6800:	0018      	movs	r0, r3
    6802:	4b70      	ldr	r3, [pc, #448]	; (69c4 <xQueueReceive+0x350>)
    6804:	4798      	blx	r3
    6806:	0003      	movs	r3, r0
    6808:	001a      	movs	r2, r3
    680a:	4b6d      	ldr	r3, [pc, #436]	; (69c0 <xQueueReceive+0x34c>)
    680c:	881b      	ldrh	r3, [r3, #0]
    680e:	4013      	ands	r3, r2
    6810:	b29b      	uxth	r3, r3
    6812:	2b00      	cmp	r3, #0
    6814:	d01d      	beq.n	6852 <xQueueReceive+0x1de>
    6816:	6a3b      	ldr	r3, [r7, #32]
    6818:	0018      	movs	r0, r3
    681a:	4b6b      	ldr	r3, [pc, #428]	; (69c8 <xQueueReceive+0x354>)
    681c:	4798      	blx	r3
    681e:	0003      	movs	r3, r0
    6820:	001a      	movs	r2, r3
    6822:	4b6a      	ldr	r3, [pc, #424]	; (69cc <xQueueReceive+0x358>)
    6824:	5c9b      	ldrb	r3, [r3, r2]
    6826:	3350      	adds	r3, #80	; 0x50
    6828:	b2db      	uxtb	r3, r3
    682a:	001d      	movs	r5, r3
    682c:	6a3b      	ldr	r3, [r7, #32]
    682e:	0018      	movs	r0, r3
    6830:	4b65      	ldr	r3, [pc, #404]	; (69c8 <xQueueReceive+0x354>)
    6832:	4798      	blx	r3
    6834:	0003      	movs	r3, r0
    6836:	001a      	movs	r2, r3
    6838:	4b64      	ldr	r3, [pc, #400]	; (69cc <xQueueReceive+0x358>)
    683a:	5c9c      	ldrb	r4, [r3, r2]
    683c:	6a3b      	ldr	r3, [r7, #32]
    683e:	0018      	movs	r0, r3
    6840:	4b63      	ldr	r3, [pc, #396]	; (69d0 <xQueueReceive+0x35c>)
    6842:	4798      	blx	r3
    6844:	0003      	movs	r3, r0
    6846:	b2db      	uxtb	r3, r3
    6848:	001a      	movs	r2, r3
    684a:	0021      	movs	r1, r4
    684c:	0028      	movs	r0, r5
    684e:	4b61      	ldr	r3, [pc, #388]	; (69d4 <xQueueReceive+0x360>)
    6850:	4798      	blx	r3
					return errQUEUE_EMPTY;
    6852:	2300      	movs	r3, #0
    6854:	e120      	b.n	6a98 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
    6856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6858:	2b00      	cmp	r3, #0
    685a:	d106      	bne.n	686a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    685c:	2314      	movs	r3, #20
    685e:	18fb      	adds	r3, r7, r3
    6860:	0018      	movs	r0, r3
    6862:	4b62      	ldr	r3, [pc, #392]	; (69ec <xQueueReceive+0x378>)
    6864:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    6866:	2301      	movs	r3, #1
    6868:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    686a:	4b5f      	ldr	r3, [pc, #380]	; (69e8 <xQueueReceive+0x374>)
    686c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    686e:	4b60      	ldr	r3, [pc, #384]	; (69f0 <xQueueReceive+0x37c>)
    6870:	4798      	blx	r3
		prvLockQueue( pxQueue );
    6872:	4b4f      	ldr	r3, [pc, #316]	; (69b0 <xQueueReceive+0x33c>)
    6874:	4798      	blx	r3
    6876:	6a3b      	ldr	r3, [r7, #32]
    6878:	2244      	movs	r2, #68	; 0x44
    687a:	5c9b      	ldrb	r3, [r3, r2]
    687c:	b25b      	sxtb	r3, r3
    687e:	3301      	adds	r3, #1
    6880:	d103      	bne.n	688a <xQueueReceive+0x216>
    6882:	6a3b      	ldr	r3, [r7, #32]
    6884:	2244      	movs	r2, #68	; 0x44
    6886:	2100      	movs	r1, #0
    6888:	5499      	strb	r1, [r3, r2]
    688a:	6a3b      	ldr	r3, [r7, #32]
    688c:	2245      	movs	r2, #69	; 0x45
    688e:	5c9b      	ldrb	r3, [r3, r2]
    6890:	b25b      	sxtb	r3, r3
    6892:	3301      	adds	r3, #1
    6894:	d103      	bne.n	689e <xQueueReceive+0x22a>
    6896:	6a3b      	ldr	r3, [r7, #32]
    6898:	2245      	movs	r2, #69	; 0x45
    689a:	2100      	movs	r1, #0
    689c:	5499      	strb	r1, [r3, r2]
    689e:	4b52      	ldr	r3, [pc, #328]	; (69e8 <xQueueReceive+0x374>)
    68a0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    68a2:	1d3a      	adds	r2, r7, #4
    68a4:	2314      	movs	r3, #20
    68a6:	18fb      	adds	r3, r7, r3
    68a8:	0011      	movs	r1, r2
    68aa:	0018      	movs	r0, r3
    68ac:	4b51      	ldr	r3, [pc, #324]	; (69f4 <xQueueReceive+0x380>)
    68ae:	4798      	blx	r3
    68b0:	1e03      	subs	r3, r0, #0
    68b2:	d000      	beq.n	68b6 <xQueueReceive+0x242>
    68b4:	e0aa      	b.n	6a0c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    68b6:	6a3b      	ldr	r3, [r7, #32]
    68b8:	0018      	movs	r0, r3
    68ba:	4b4f      	ldr	r3, [pc, #316]	; (69f8 <xQueueReceive+0x384>)
    68bc:	4798      	blx	r3
    68be:	1e03      	subs	r3, r0, #0
    68c0:	d06d      	beq.n	699e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    68c2:	4b3d      	ldr	r3, [pc, #244]	; (69b8 <xQueueReceive+0x344>)
    68c4:	4798      	blx	r3
    68c6:	0003      	movs	r3, r0
    68c8:	0018      	movs	r0, r3
    68ca:	4b3c      	ldr	r3, [pc, #240]	; (69bc <xQueueReceive+0x348>)
    68cc:	4798      	blx	r3
    68ce:	0003      	movs	r3, r0
    68d0:	001a      	movs	r2, r3
    68d2:	4b3b      	ldr	r3, [pc, #236]	; (69c0 <xQueueReceive+0x34c>)
    68d4:	881b      	ldrh	r3, [r3, #0]
    68d6:	4013      	ands	r3, r2
    68d8:	b29b      	uxth	r3, r3
    68da:	2b00      	cmp	r3, #0
    68dc:	d029      	beq.n	6932 <xQueueReceive+0x2be>
    68de:	6a3b      	ldr	r3, [r7, #32]
    68e0:	0018      	movs	r0, r3
    68e2:	4b38      	ldr	r3, [pc, #224]	; (69c4 <xQueueReceive+0x350>)
    68e4:	4798      	blx	r3
    68e6:	0003      	movs	r3, r0
    68e8:	001a      	movs	r2, r3
    68ea:	4b35      	ldr	r3, [pc, #212]	; (69c0 <xQueueReceive+0x34c>)
    68ec:	881b      	ldrh	r3, [r3, #0]
    68ee:	4013      	ands	r3, r2
    68f0:	b29b      	uxth	r3, r3
    68f2:	2b00      	cmp	r3, #0
    68f4:	d01d      	beq.n	6932 <xQueueReceive+0x2be>
    68f6:	6a3b      	ldr	r3, [r7, #32]
    68f8:	0018      	movs	r0, r3
    68fa:	4b33      	ldr	r3, [pc, #204]	; (69c8 <xQueueReceive+0x354>)
    68fc:	4798      	blx	r3
    68fe:	0003      	movs	r3, r0
    6900:	001a      	movs	r2, r3
    6902:	4b32      	ldr	r3, [pc, #200]	; (69cc <xQueueReceive+0x358>)
    6904:	5c9b      	ldrb	r3, [r3, r2]
    6906:	3368      	adds	r3, #104	; 0x68
    6908:	b2db      	uxtb	r3, r3
    690a:	001d      	movs	r5, r3
    690c:	6a3b      	ldr	r3, [r7, #32]
    690e:	0018      	movs	r0, r3
    6910:	4b2d      	ldr	r3, [pc, #180]	; (69c8 <xQueueReceive+0x354>)
    6912:	4798      	blx	r3
    6914:	0003      	movs	r3, r0
    6916:	001a      	movs	r2, r3
    6918:	4b2c      	ldr	r3, [pc, #176]	; (69cc <xQueueReceive+0x358>)
    691a:	5c9c      	ldrb	r4, [r3, r2]
    691c:	6a3b      	ldr	r3, [r7, #32]
    691e:	0018      	movs	r0, r3
    6920:	4b2b      	ldr	r3, [pc, #172]	; (69d0 <xQueueReceive+0x35c>)
    6922:	4798      	blx	r3
    6924:	0003      	movs	r3, r0
    6926:	b2db      	uxtb	r3, r3
    6928:	001a      	movs	r2, r3
    692a:	0021      	movs	r1, r4
    692c:	0028      	movs	r0, r5
    692e:	4b29      	ldr	r3, [pc, #164]	; (69d4 <xQueueReceive+0x360>)
    6930:	4798      	blx	r3
    6932:	6a3b      	ldr	r3, [r7, #32]
    6934:	0018      	movs	r0, r3
    6936:	4b24      	ldr	r3, [pc, #144]	; (69c8 <xQueueReceive+0x354>)
    6938:	4798      	blx	r3
    693a:	0003      	movs	r3, r0
    693c:	001a      	movs	r2, r3
    693e:	4b23      	ldr	r3, [pc, #140]	; (69cc <xQueueReceive+0x358>)
    6940:	5c9b      	ldrb	r3, [r3, r2]
    6942:	2b02      	cmp	r3, #2
    6944:	d018      	beq.n	6978 <xQueueReceive+0x304>
    6946:	4b1c      	ldr	r3, [pc, #112]	; (69b8 <xQueueReceive+0x344>)
    6948:	4798      	blx	r3
    694a:	0003      	movs	r3, r0
    694c:	0018      	movs	r0, r3
    694e:	4b1b      	ldr	r3, [pc, #108]	; (69bc <xQueueReceive+0x348>)
    6950:	4798      	blx	r3
    6952:	0003      	movs	r3, r0
    6954:	001a      	movs	r2, r3
    6956:	4b1a      	ldr	r3, [pc, #104]	; (69c0 <xQueueReceive+0x34c>)
    6958:	881b      	ldrh	r3, [r3, #0]
    695a:	4013      	ands	r3, r2
    695c:	b29b      	uxth	r3, r3
    695e:	2b00      	cmp	r3, #0
    6960:	d00a      	beq.n	6978 <xQueueReceive+0x304>
    6962:	4b15      	ldr	r3, [pc, #84]	; (69b8 <xQueueReceive+0x344>)
    6964:	4798      	blx	r3
    6966:	0003      	movs	r3, r0
    6968:	0018      	movs	r0, r3
    696a:	4b1b      	ldr	r3, [pc, #108]	; (69d8 <xQueueReceive+0x364>)
    696c:	4798      	blx	r3
    696e:	0003      	movs	r3, r0
    6970:	b2db      	uxtb	r3, r3
    6972:	0018      	movs	r0, r3
    6974:	4b21      	ldr	r3, [pc, #132]	; (69fc <xQueueReceive+0x388>)
    6976:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6978:	6a3b      	ldr	r3, [r7, #32]
    697a:	3324      	adds	r3, #36	; 0x24
    697c:	687a      	ldr	r2, [r7, #4]
    697e:	0011      	movs	r1, r2
    6980:	0018      	movs	r0, r3
    6982:	4b1f      	ldr	r3, [pc, #124]	; (6a00 <xQueueReceive+0x38c>)
    6984:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    6986:	6a3b      	ldr	r3, [r7, #32]
    6988:	0018      	movs	r0, r3
    698a:	4b1e      	ldr	r3, [pc, #120]	; (6a04 <xQueueReceive+0x390>)
    698c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    698e:	4b1e      	ldr	r3, [pc, #120]	; (6a08 <xQueueReceive+0x394>)
    6990:	4798      	blx	r3
    6992:	1e03      	subs	r3, r0, #0
    6994:	d000      	beq.n	6998 <xQueueReceive+0x324>
    6996:	e698      	b.n	66ca <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
    6998:	4b12      	ldr	r3, [pc, #72]	; (69e4 <xQueueReceive+0x370>)
    699a:	4798      	blx	r3
    699c:	e695      	b.n	66ca <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    699e:	6a3b      	ldr	r3, [r7, #32]
    69a0:	0018      	movs	r0, r3
    69a2:	4b18      	ldr	r3, [pc, #96]	; (6a04 <xQueueReceive+0x390>)
    69a4:	4798      	blx	r3
				( void ) xTaskResumeAll();
    69a6:	4b18      	ldr	r3, [pc, #96]	; (6a08 <xQueueReceive+0x394>)
    69a8:	4798      	blx	r3
    69aa:	e68e      	b.n	66ca <xQueueReceive+0x56>
    69ac:	0000848d 	.word	0x0000848d
    69b0:	00005829 	.word	0x00005829
    69b4:	000070d5 	.word	0x000070d5
    69b8:	00003b35 	.word	0x00003b35
    69bc:	000039d5 	.word	0x000039d5
    69c0:	20000024 	.word	0x20000024
    69c4:	00003a95 	.word	0x00003a95
    69c8:	00003995 	.word	0x00003995
    69cc:	20000018 	.word	0x20000018
    69d0:	00003a75 	.word	0x00003a75
    69d4:	0000421d 	.word	0x0000421d
    69d8:	000039b5 	.word	0x000039b5
    69dc:	00004879 	.word	0x00004879
    69e0:	000080b1 	.word	0x000080b1
    69e4:	00005811 	.word	0x00005811
    69e8:	0000584d 	.word	0x0000584d
    69ec:	000081ad 	.word	0x000081ad
    69f0:	00007ad9 	.word	0x00007ad9
    69f4:	000081d5 	.word	0x000081d5
    69f8:	00007215 	.word	0x00007215
    69fc:	000049b5 	.word	0x000049b5
    6a00:	00007f8d 	.word	0x00007f8d
    6a04:	00007125 	.word	0x00007125
    6a08:	00007af1 	.word	0x00007af1
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    6a0c:	6a3b      	ldr	r3, [r7, #32]
    6a0e:	0018      	movs	r0, r3
    6a10:	4b23      	ldr	r3, [pc, #140]	; (6aa0 <xQueueReceive+0x42c>)
    6a12:	4798      	blx	r3
			( void ) xTaskResumeAll();
    6a14:	4b23      	ldr	r3, [pc, #140]	; (6aa4 <xQueueReceive+0x430>)
    6a16:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6a18:	6a3b      	ldr	r3, [r7, #32]
    6a1a:	0018      	movs	r0, r3
    6a1c:	4b22      	ldr	r3, [pc, #136]	; (6aa8 <xQueueReceive+0x434>)
    6a1e:	4798      	blx	r3
    6a20:	1e03      	subs	r3, r0, #0
    6a22:	d100      	bne.n	6a26 <xQueueReceive+0x3b2>
    6a24:	e651      	b.n	66ca <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    6a26:	4b21      	ldr	r3, [pc, #132]	; (6aac <xQueueReceive+0x438>)
    6a28:	4798      	blx	r3
    6a2a:	0003      	movs	r3, r0
    6a2c:	0018      	movs	r0, r3
    6a2e:	4b20      	ldr	r3, [pc, #128]	; (6ab0 <xQueueReceive+0x43c>)
    6a30:	4798      	blx	r3
    6a32:	0003      	movs	r3, r0
    6a34:	001a      	movs	r2, r3
    6a36:	4b1f      	ldr	r3, [pc, #124]	; (6ab4 <xQueueReceive+0x440>)
    6a38:	881b      	ldrh	r3, [r3, #0]
    6a3a:	4013      	ands	r3, r2
    6a3c:	b29b      	uxth	r3, r3
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d029      	beq.n	6a96 <xQueueReceive+0x422>
    6a42:	6a3b      	ldr	r3, [r7, #32]
    6a44:	0018      	movs	r0, r3
    6a46:	4b1c      	ldr	r3, [pc, #112]	; (6ab8 <xQueueReceive+0x444>)
    6a48:	4798      	blx	r3
    6a4a:	0003      	movs	r3, r0
    6a4c:	001a      	movs	r2, r3
    6a4e:	4b19      	ldr	r3, [pc, #100]	; (6ab4 <xQueueReceive+0x440>)
    6a50:	881b      	ldrh	r3, [r3, #0]
    6a52:	4013      	ands	r3, r2
    6a54:	b29b      	uxth	r3, r3
    6a56:	2b00      	cmp	r3, #0
    6a58:	d01d      	beq.n	6a96 <xQueueReceive+0x422>
    6a5a:	6a3b      	ldr	r3, [r7, #32]
    6a5c:	0018      	movs	r0, r3
    6a5e:	4b17      	ldr	r3, [pc, #92]	; (6abc <xQueueReceive+0x448>)
    6a60:	4798      	blx	r3
    6a62:	0003      	movs	r3, r0
    6a64:	001a      	movs	r2, r3
    6a66:	4b16      	ldr	r3, [pc, #88]	; (6ac0 <xQueueReceive+0x44c>)
    6a68:	5c9b      	ldrb	r3, [r3, r2]
    6a6a:	3350      	adds	r3, #80	; 0x50
    6a6c:	b2db      	uxtb	r3, r3
    6a6e:	001d      	movs	r5, r3
    6a70:	6a3b      	ldr	r3, [r7, #32]
    6a72:	0018      	movs	r0, r3
    6a74:	4b11      	ldr	r3, [pc, #68]	; (6abc <xQueueReceive+0x448>)
    6a76:	4798      	blx	r3
    6a78:	0003      	movs	r3, r0
    6a7a:	001a      	movs	r2, r3
    6a7c:	4b10      	ldr	r3, [pc, #64]	; (6ac0 <xQueueReceive+0x44c>)
    6a7e:	5c9c      	ldrb	r4, [r3, r2]
    6a80:	6a3b      	ldr	r3, [r7, #32]
    6a82:	0018      	movs	r0, r3
    6a84:	4b0f      	ldr	r3, [pc, #60]	; (6ac4 <xQueueReceive+0x450>)
    6a86:	4798      	blx	r3
    6a88:	0003      	movs	r3, r0
    6a8a:	b2db      	uxtb	r3, r3
    6a8c:	001a      	movs	r2, r3
    6a8e:	0021      	movs	r1, r4
    6a90:	0028      	movs	r0, r5
    6a92:	4b0d      	ldr	r3, [pc, #52]	; (6ac8 <xQueueReceive+0x454>)
    6a94:	4798      	blx	r3
				return errQUEUE_EMPTY;
    6a96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    6a98:	0018      	movs	r0, r3
    6a9a:	46bd      	mov	sp, r7
    6a9c:	b00a      	add	sp, #40	; 0x28
    6a9e:	bdb0      	pop	{r4, r5, r7, pc}
    6aa0:	00007125 	.word	0x00007125
    6aa4:	00007af1 	.word	0x00007af1
    6aa8:	00007215 	.word	0x00007215
    6aac:	00003b35 	.word	0x00003b35
    6ab0:	000039d5 	.word	0x000039d5
    6ab4:	20000024 	.word	0x20000024
    6ab8:	00003a95 	.word	0x00003a95
    6abc:	00003995 	.word	0x00003995
    6ac0:	20000018 	.word	0x20000018
    6ac4:	00003a75 	.word	0x00003a75
    6ac8:	0000421d 	.word	0x0000421d

00006acc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
    6acc:	b5b0      	push	{r4, r5, r7, lr}
    6ace:	b08a      	sub	sp, #40	; 0x28
    6ad0:	af00      	add	r7, sp, #0
    6ad2:	6078      	str	r0, [r7, #4]
    6ad4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    6ad6:	2300      	movs	r3, #0
    6ad8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6ada:	687b      	ldr	r3, [r7, #4]
    6adc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
    6ade:	2300      	movs	r3, #0
    6ae0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    6ae2:	69fb      	ldr	r3, [r7, #28]
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d101      	bne.n	6aec <xQueueSemaphoreTake+0x20>
    6ae8:	b672      	cpsid	i
    6aea:	e7fe      	b.n	6aea <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    6aec:	69fb      	ldr	r3, [r7, #28]
    6aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6af0:	2b00      	cmp	r3, #0
    6af2:	d001      	beq.n	6af8 <xQueueSemaphoreTake+0x2c>
    6af4:	b672      	cpsid	i
    6af6:	e7fe      	b.n	6af6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    6af8:	4bcb      	ldr	r3, [pc, #812]	; (6e28 <xQueueSemaphoreTake+0x35c>)
    6afa:	4798      	blx	r3
    6afc:	1e03      	subs	r3, r0, #0
    6afe:	d102      	bne.n	6b06 <xQueueSemaphoreTake+0x3a>
    6b00:	683b      	ldr	r3, [r7, #0]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d101      	bne.n	6b0a <xQueueSemaphoreTake+0x3e>
    6b06:	2301      	movs	r3, #1
    6b08:	e000      	b.n	6b0c <xQueueSemaphoreTake+0x40>
    6b0a:	2300      	movs	r3, #0
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d101      	bne.n	6b14 <xQueueSemaphoreTake+0x48>
    6b10:	b672      	cpsid	i
    6b12:	e7fe      	b.n	6b12 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    6b14:	4bc5      	ldr	r3, [pc, #788]	; (6e2c <xQueueSemaphoreTake+0x360>)
    6b16:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    6b18:	69fb      	ldr	r3, [r7, #28]
    6b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6b1c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    6b1e:	69bb      	ldr	r3, [r7, #24]
    6b20:	2b00      	cmp	r3, #0
    6b22:	d100      	bne.n	6b26 <xQueueSemaphoreTake+0x5a>
    6b24:	e080      	b.n	6c28 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
    6b26:	4bc2      	ldr	r3, [pc, #776]	; (6e30 <xQueueSemaphoreTake+0x364>)
    6b28:	4798      	blx	r3
    6b2a:	0003      	movs	r3, r0
    6b2c:	0018      	movs	r0, r3
    6b2e:	4bc1      	ldr	r3, [pc, #772]	; (6e34 <xQueueSemaphoreTake+0x368>)
    6b30:	4798      	blx	r3
    6b32:	0003      	movs	r3, r0
    6b34:	001a      	movs	r2, r3
    6b36:	4bc0      	ldr	r3, [pc, #768]	; (6e38 <xQueueSemaphoreTake+0x36c>)
    6b38:	881b      	ldrh	r3, [r3, #0]
    6b3a:	4013      	ands	r3, r2
    6b3c:	b29b      	uxth	r3, r3
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d029      	beq.n	6b96 <xQueueSemaphoreTake+0xca>
    6b42:	69fb      	ldr	r3, [r7, #28]
    6b44:	0018      	movs	r0, r3
    6b46:	4bbd      	ldr	r3, [pc, #756]	; (6e3c <xQueueSemaphoreTake+0x370>)
    6b48:	4798      	blx	r3
    6b4a:	0003      	movs	r3, r0
    6b4c:	001a      	movs	r2, r3
    6b4e:	4bba      	ldr	r3, [pc, #744]	; (6e38 <xQueueSemaphoreTake+0x36c>)
    6b50:	881b      	ldrh	r3, [r3, #0]
    6b52:	4013      	ands	r3, r2
    6b54:	b29b      	uxth	r3, r3
    6b56:	2b00      	cmp	r3, #0
    6b58:	d01d      	beq.n	6b96 <xQueueSemaphoreTake+0xca>
    6b5a:	69fb      	ldr	r3, [r7, #28]
    6b5c:	0018      	movs	r0, r3
    6b5e:	4bb8      	ldr	r3, [pc, #736]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6b60:	4798      	blx	r3
    6b62:	0003      	movs	r3, r0
    6b64:	001a      	movs	r2, r3
    6b66:	4bb7      	ldr	r3, [pc, #732]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6b68:	5c9b      	ldrb	r3, [r3, r2]
    6b6a:	3328      	adds	r3, #40	; 0x28
    6b6c:	b2db      	uxtb	r3, r3
    6b6e:	001d      	movs	r5, r3
    6b70:	69fb      	ldr	r3, [r7, #28]
    6b72:	0018      	movs	r0, r3
    6b74:	4bb2      	ldr	r3, [pc, #712]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6b76:	4798      	blx	r3
    6b78:	0003      	movs	r3, r0
    6b7a:	001a      	movs	r2, r3
    6b7c:	4bb1      	ldr	r3, [pc, #708]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6b7e:	5c9c      	ldrb	r4, [r3, r2]
    6b80:	69fb      	ldr	r3, [r7, #28]
    6b82:	0018      	movs	r0, r3
    6b84:	4bb0      	ldr	r3, [pc, #704]	; (6e48 <xQueueSemaphoreTake+0x37c>)
    6b86:	4798      	blx	r3
    6b88:	0003      	movs	r3, r0
    6b8a:	b2db      	uxtb	r3, r3
    6b8c:	001a      	movs	r2, r3
    6b8e:	0021      	movs	r1, r4
    6b90:	0028      	movs	r0, r5
    6b92:	4bae      	ldr	r3, [pc, #696]	; (6e4c <xQueueSemaphoreTake+0x380>)
    6b94:	4798      	blx	r3
    6b96:	69fb      	ldr	r3, [r7, #28]
    6b98:	0018      	movs	r0, r3
    6b9a:	4ba9      	ldr	r3, [pc, #676]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6b9c:	4798      	blx	r3
    6b9e:	0003      	movs	r3, r0
    6ba0:	001a      	movs	r2, r3
    6ba2:	4ba8      	ldr	r3, [pc, #672]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6ba4:	5c9c      	ldrb	r4, [r3, r2]
    6ba6:	69fb      	ldr	r3, [r7, #28]
    6ba8:	0018      	movs	r0, r3
    6baa:	4ba7      	ldr	r3, [pc, #668]	; (6e48 <xQueueSemaphoreTake+0x37c>)
    6bac:	4798      	blx	r3
    6bae:	0003      	movs	r3, r0
    6bb0:	b2dd      	uxtb	r5, r3
    6bb2:	69fb      	ldr	r3, [r7, #28]
    6bb4:	0018      	movs	r0, r3
    6bb6:	4ba2      	ldr	r3, [pc, #648]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6bb8:	4798      	blx	r3
    6bba:	0003      	movs	r3, r0
    6bbc:	001a      	movs	r2, r3
    6bbe:	4ba1      	ldr	r3, [pc, #644]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6bc0:	5c9b      	ldrb	r3, [r3, r2]
    6bc2:	2b02      	cmp	r3, #2
    6bc4:	d108      	bne.n	6bd8 <xQueueSemaphoreTake+0x10c>
    6bc6:	4b9a      	ldr	r3, [pc, #616]	; (6e30 <xQueueSemaphoreTake+0x364>)
    6bc8:	4798      	blx	r3
    6bca:	0003      	movs	r3, r0
    6bcc:	0018      	movs	r0, r3
    6bce:	4ba0      	ldr	r3, [pc, #640]	; (6e50 <xQueueSemaphoreTake+0x384>)
    6bd0:	4798      	blx	r3
    6bd2:	0003      	movs	r3, r0
    6bd4:	b2db      	uxtb	r3, r3
    6bd6:	e004      	b.n	6be2 <xQueueSemaphoreTake+0x116>
    6bd8:	69fb      	ldr	r3, [r7, #28]
    6bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6bdc:	b2db      	uxtb	r3, r3
    6bde:	3b01      	subs	r3, #1
    6be0:	b2db      	uxtb	r3, r3
    6be2:	001a      	movs	r2, r3
    6be4:	0029      	movs	r1, r5
    6be6:	0020      	movs	r0, r4
    6be8:	4b9a      	ldr	r3, [pc, #616]	; (6e54 <xQueueSemaphoreTake+0x388>)
    6bea:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    6bec:	69bb      	ldr	r3, [r7, #24]
    6bee:	1e5a      	subs	r2, r3, #1
    6bf0:	69fb      	ldr	r3, [r7, #28]
    6bf2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    6bf4:	69fb      	ldr	r3, [r7, #28]
    6bf6:	681b      	ldr	r3, [r3, #0]
    6bf8:	2b00      	cmp	r3, #0
    6bfa:	d104      	bne.n	6c06 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    6bfc:	4b96      	ldr	r3, [pc, #600]	; (6e58 <xQueueSemaphoreTake+0x38c>)
    6bfe:	4798      	blx	r3
    6c00:	0002      	movs	r2, r0
    6c02:	69fb      	ldr	r3, [r7, #28]
    6c04:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6c06:	69fb      	ldr	r3, [r7, #28]
    6c08:	691b      	ldr	r3, [r3, #16]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	d008      	beq.n	6c20 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6c0e:	69fb      	ldr	r3, [r7, #28]
    6c10:	3310      	adds	r3, #16
    6c12:	0018      	movs	r0, r3
    6c14:	4b91      	ldr	r3, [pc, #580]	; (6e5c <xQueueSemaphoreTake+0x390>)
    6c16:	4798      	blx	r3
    6c18:	1e03      	subs	r3, r0, #0
    6c1a:	d001      	beq.n	6c20 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
    6c1c:	4b90      	ldr	r3, [pc, #576]	; (6e60 <xQueueSemaphoreTake+0x394>)
    6c1e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    6c20:	4b90      	ldr	r3, [pc, #576]	; (6e64 <xQueueSemaphoreTake+0x398>)
    6c22:	4798      	blx	r3
				return pdPASS;
    6c24:	2301      	movs	r3, #1
    6c26:	e18b      	b.n	6f40 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    6c28:	683b      	ldr	r3, [r7, #0]
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	d140      	bne.n	6cb0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
    6c2e:	6a3b      	ldr	r3, [r7, #32]
    6c30:	2b00      	cmp	r3, #0
    6c32:	d001      	beq.n	6c38 <xQueueSemaphoreTake+0x16c>
    6c34:	b672      	cpsid	i
    6c36:	e7fe      	b.n	6c36 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
    6c38:	4b8a      	ldr	r3, [pc, #552]	; (6e64 <xQueueSemaphoreTake+0x398>)
    6c3a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    6c3c:	4b7c      	ldr	r3, [pc, #496]	; (6e30 <xQueueSemaphoreTake+0x364>)
    6c3e:	4798      	blx	r3
    6c40:	0003      	movs	r3, r0
    6c42:	0018      	movs	r0, r3
    6c44:	4b7b      	ldr	r3, [pc, #492]	; (6e34 <xQueueSemaphoreTake+0x368>)
    6c46:	4798      	blx	r3
    6c48:	0003      	movs	r3, r0
    6c4a:	001a      	movs	r2, r3
    6c4c:	4b7a      	ldr	r3, [pc, #488]	; (6e38 <xQueueSemaphoreTake+0x36c>)
    6c4e:	881b      	ldrh	r3, [r3, #0]
    6c50:	4013      	ands	r3, r2
    6c52:	b29b      	uxth	r3, r3
    6c54:	2b00      	cmp	r3, #0
    6c56:	d029      	beq.n	6cac <xQueueSemaphoreTake+0x1e0>
    6c58:	69fb      	ldr	r3, [r7, #28]
    6c5a:	0018      	movs	r0, r3
    6c5c:	4b77      	ldr	r3, [pc, #476]	; (6e3c <xQueueSemaphoreTake+0x370>)
    6c5e:	4798      	blx	r3
    6c60:	0003      	movs	r3, r0
    6c62:	001a      	movs	r2, r3
    6c64:	4b74      	ldr	r3, [pc, #464]	; (6e38 <xQueueSemaphoreTake+0x36c>)
    6c66:	881b      	ldrh	r3, [r3, #0]
    6c68:	4013      	ands	r3, r2
    6c6a:	b29b      	uxth	r3, r3
    6c6c:	2b00      	cmp	r3, #0
    6c6e:	d01d      	beq.n	6cac <xQueueSemaphoreTake+0x1e0>
    6c70:	69fb      	ldr	r3, [r7, #28]
    6c72:	0018      	movs	r0, r3
    6c74:	4b72      	ldr	r3, [pc, #456]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6c76:	4798      	blx	r3
    6c78:	0003      	movs	r3, r0
    6c7a:	001a      	movs	r2, r3
    6c7c:	4b71      	ldr	r3, [pc, #452]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6c7e:	5c9b      	ldrb	r3, [r3, r2]
    6c80:	3350      	adds	r3, #80	; 0x50
    6c82:	b2db      	uxtb	r3, r3
    6c84:	001d      	movs	r5, r3
    6c86:	69fb      	ldr	r3, [r7, #28]
    6c88:	0018      	movs	r0, r3
    6c8a:	4b6d      	ldr	r3, [pc, #436]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6c8c:	4798      	blx	r3
    6c8e:	0003      	movs	r3, r0
    6c90:	001a      	movs	r2, r3
    6c92:	4b6c      	ldr	r3, [pc, #432]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6c94:	5c9c      	ldrb	r4, [r3, r2]
    6c96:	69fb      	ldr	r3, [r7, #28]
    6c98:	0018      	movs	r0, r3
    6c9a:	4b6b      	ldr	r3, [pc, #428]	; (6e48 <xQueueSemaphoreTake+0x37c>)
    6c9c:	4798      	blx	r3
    6c9e:	0003      	movs	r3, r0
    6ca0:	b2db      	uxtb	r3, r3
    6ca2:	001a      	movs	r2, r3
    6ca4:	0021      	movs	r1, r4
    6ca6:	0028      	movs	r0, r5
    6ca8:	4b68      	ldr	r3, [pc, #416]	; (6e4c <xQueueSemaphoreTake+0x380>)
    6caa:	4798      	blx	r3
					return errQUEUE_EMPTY;
    6cac:	2300      	movs	r3, #0
    6cae:	e147      	b.n	6f40 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
    6cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d106      	bne.n	6cc4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    6cb6:	230c      	movs	r3, #12
    6cb8:	18fb      	adds	r3, r7, r3
    6cba:	0018      	movs	r0, r3
    6cbc:	4b6a      	ldr	r3, [pc, #424]	; (6e68 <xQueueSemaphoreTake+0x39c>)
    6cbe:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    6cc0:	2301      	movs	r3, #1
    6cc2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    6cc4:	4b67      	ldr	r3, [pc, #412]	; (6e64 <xQueueSemaphoreTake+0x398>)
    6cc6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
    6cc8:	4b68      	ldr	r3, [pc, #416]	; (6e6c <xQueueSemaphoreTake+0x3a0>)
    6cca:	4798      	blx	r3
		prvLockQueue( pxQueue );
    6ccc:	4b57      	ldr	r3, [pc, #348]	; (6e2c <xQueueSemaphoreTake+0x360>)
    6cce:	4798      	blx	r3
    6cd0:	69fb      	ldr	r3, [r7, #28]
    6cd2:	2244      	movs	r2, #68	; 0x44
    6cd4:	5c9b      	ldrb	r3, [r3, r2]
    6cd6:	b25b      	sxtb	r3, r3
    6cd8:	3301      	adds	r3, #1
    6cda:	d103      	bne.n	6ce4 <xQueueSemaphoreTake+0x218>
    6cdc:	69fb      	ldr	r3, [r7, #28]
    6cde:	2244      	movs	r2, #68	; 0x44
    6ce0:	2100      	movs	r1, #0
    6ce2:	5499      	strb	r1, [r3, r2]
    6ce4:	69fb      	ldr	r3, [r7, #28]
    6ce6:	2245      	movs	r2, #69	; 0x45
    6ce8:	5c9b      	ldrb	r3, [r3, r2]
    6cea:	b25b      	sxtb	r3, r3
    6cec:	3301      	adds	r3, #1
    6cee:	d103      	bne.n	6cf8 <xQueueSemaphoreTake+0x22c>
    6cf0:	69fb      	ldr	r3, [r7, #28]
    6cf2:	2245      	movs	r2, #69	; 0x45
    6cf4:	2100      	movs	r1, #0
    6cf6:	5499      	strb	r1, [r3, r2]
    6cf8:	4b5a      	ldr	r3, [pc, #360]	; (6e64 <xQueueSemaphoreTake+0x398>)
    6cfa:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6cfc:	003a      	movs	r2, r7
    6cfe:	230c      	movs	r3, #12
    6d00:	18fb      	adds	r3, r7, r3
    6d02:	0011      	movs	r1, r2
    6d04:	0018      	movs	r0, r3
    6d06:	4b5a      	ldr	r3, [pc, #360]	; (6e70 <xQueueSemaphoreTake+0x3a4>)
    6d08:	4798      	blx	r3
    6d0a:	1e03      	subs	r3, r0, #0
    6d0c:	d000      	beq.n	6d10 <xQueueSemaphoreTake+0x244>
    6d0e:	e0bd      	b.n	6e8c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6d10:	69fb      	ldr	r3, [r7, #28]
    6d12:	0018      	movs	r0, r3
    6d14:	4b57      	ldr	r3, [pc, #348]	; (6e74 <xQueueSemaphoreTake+0x3a8>)
    6d16:	4798      	blx	r3
    6d18:	1e03      	subs	r3, r0, #0
    6d1a:	d100      	bne.n	6d1e <xQueueSemaphoreTake+0x252>
    6d1c:	e07c      	b.n	6e18 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    6d1e:	4b44      	ldr	r3, [pc, #272]	; (6e30 <xQueueSemaphoreTake+0x364>)
    6d20:	4798      	blx	r3
    6d22:	0003      	movs	r3, r0
    6d24:	0018      	movs	r0, r3
    6d26:	4b43      	ldr	r3, [pc, #268]	; (6e34 <xQueueSemaphoreTake+0x368>)
    6d28:	4798      	blx	r3
    6d2a:	0003      	movs	r3, r0
    6d2c:	001a      	movs	r2, r3
    6d2e:	4b42      	ldr	r3, [pc, #264]	; (6e38 <xQueueSemaphoreTake+0x36c>)
    6d30:	881b      	ldrh	r3, [r3, #0]
    6d32:	4013      	ands	r3, r2
    6d34:	b29b      	uxth	r3, r3
    6d36:	2b00      	cmp	r3, #0
    6d38:	d029      	beq.n	6d8e <xQueueSemaphoreTake+0x2c2>
    6d3a:	69fb      	ldr	r3, [r7, #28]
    6d3c:	0018      	movs	r0, r3
    6d3e:	4b3f      	ldr	r3, [pc, #252]	; (6e3c <xQueueSemaphoreTake+0x370>)
    6d40:	4798      	blx	r3
    6d42:	0003      	movs	r3, r0
    6d44:	001a      	movs	r2, r3
    6d46:	4b3c      	ldr	r3, [pc, #240]	; (6e38 <xQueueSemaphoreTake+0x36c>)
    6d48:	881b      	ldrh	r3, [r3, #0]
    6d4a:	4013      	ands	r3, r2
    6d4c:	b29b      	uxth	r3, r3
    6d4e:	2b00      	cmp	r3, #0
    6d50:	d01d      	beq.n	6d8e <xQueueSemaphoreTake+0x2c2>
    6d52:	69fb      	ldr	r3, [r7, #28]
    6d54:	0018      	movs	r0, r3
    6d56:	4b3a      	ldr	r3, [pc, #232]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6d58:	4798      	blx	r3
    6d5a:	0003      	movs	r3, r0
    6d5c:	001a      	movs	r2, r3
    6d5e:	4b39      	ldr	r3, [pc, #228]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6d60:	5c9b      	ldrb	r3, [r3, r2]
    6d62:	3368      	adds	r3, #104	; 0x68
    6d64:	b2db      	uxtb	r3, r3
    6d66:	001d      	movs	r5, r3
    6d68:	69fb      	ldr	r3, [r7, #28]
    6d6a:	0018      	movs	r0, r3
    6d6c:	4b34      	ldr	r3, [pc, #208]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6d6e:	4798      	blx	r3
    6d70:	0003      	movs	r3, r0
    6d72:	001a      	movs	r2, r3
    6d74:	4b33      	ldr	r3, [pc, #204]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6d76:	5c9c      	ldrb	r4, [r3, r2]
    6d78:	69fb      	ldr	r3, [r7, #28]
    6d7a:	0018      	movs	r0, r3
    6d7c:	4b32      	ldr	r3, [pc, #200]	; (6e48 <xQueueSemaphoreTake+0x37c>)
    6d7e:	4798      	blx	r3
    6d80:	0003      	movs	r3, r0
    6d82:	b2db      	uxtb	r3, r3
    6d84:	001a      	movs	r2, r3
    6d86:	0021      	movs	r1, r4
    6d88:	0028      	movs	r0, r5
    6d8a:	4b30      	ldr	r3, [pc, #192]	; (6e4c <xQueueSemaphoreTake+0x380>)
    6d8c:	4798      	blx	r3
    6d8e:	69fb      	ldr	r3, [r7, #28]
    6d90:	0018      	movs	r0, r3
    6d92:	4b2b      	ldr	r3, [pc, #172]	; (6e40 <xQueueSemaphoreTake+0x374>)
    6d94:	4798      	blx	r3
    6d96:	0003      	movs	r3, r0
    6d98:	001a      	movs	r2, r3
    6d9a:	4b2a      	ldr	r3, [pc, #168]	; (6e44 <xQueueSemaphoreTake+0x378>)
    6d9c:	5c9b      	ldrb	r3, [r3, r2]
    6d9e:	2b02      	cmp	r3, #2
    6da0:	d018      	beq.n	6dd4 <xQueueSemaphoreTake+0x308>
    6da2:	4b23      	ldr	r3, [pc, #140]	; (6e30 <xQueueSemaphoreTake+0x364>)
    6da4:	4798      	blx	r3
    6da6:	0003      	movs	r3, r0
    6da8:	0018      	movs	r0, r3
    6daa:	4b22      	ldr	r3, [pc, #136]	; (6e34 <xQueueSemaphoreTake+0x368>)
    6dac:	4798      	blx	r3
    6dae:	0003      	movs	r3, r0
    6db0:	001a      	movs	r2, r3
    6db2:	4b21      	ldr	r3, [pc, #132]	; (6e38 <xQueueSemaphoreTake+0x36c>)
    6db4:	881b      	ldrh	r3, [r3, #0]
    6db6:	4013      	ands	r3, r2
    6db8:	b29b      	uxth	r3, r3
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d00a      	beq.n	6dd4 <xQueueSemaphoreTake+0x308>
    6dbe:	4b1c      	ldr	r3, [pc, #112]	; (6e30 <xQueueSemaphoreTake+0x364>)
    6dc0:	4798      	blx	r3
    6dc2:	0003      	movs	r3, r0
    6dc4:	0018      	movs	r0, r3
    6dc6:	4b22      	ldr	r3, [pc, #136]	; (6e50 <xQueueSemaphoreTake+0x384>)
    6dc8:	4798      	blx	r3
    6dca:	0003      	movs	r3, r0
    6dcc:	b2db      	uxtb	r3, r3
    6dce:	0018      	movs	r0, r3
    6dd0:	4b29      	ldr	r3, [pc, #164]	; (6e78 <xQueueSemaphoreTake+0x3ac>)
    6dd2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    6dd4:	69fb      	ldr	r3, [r7, #28]
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d10a      	bne.n	6df2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
    6ddc:	4b13      	ldr	r3, [pc, #76]	; (6e2c <xQueueSemaphoreTake+0x360>)
    6dde:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    6de0:	69fb      	ldr	r3, [r7, #28]
    6de2:	685b      	ldr	r3, [r3, #4]
    6de4:	0018      	movs	r0, r3
    6de6:	4b25      	ldr	r3, [pc, #148]	; (6e7c <xQueueSemaphoreTake+0x3b0>)
    6de8:	4798      	blx	r3
    6dea:	0003      	movs	r3, r0
    6dec:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
    6dee:	4b1d      	ldr	r3, [pc, #116]	; (6e64 <xQueueSemaphoreTake+0x398>)
    6df0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    6df2:	69fb      	ldr	r3, [r7, #28]
    6df4:	3324      	adds	r3, #36	; 0x24
    6df6:	683a      	ldr	r2, [r7, #0]
    6df8:	0011      	movs	r1, r2
    6dfa:	0018      	movs	r0, r3
    6dfc:	4b20      	ldr	r3, [pc, #128]	; (6e80 <xQueueSemaphoreTake+0x3b4>)
    6dfe:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    6e00:	69fb      	ldr	r3, [r7, #28]
    6e02:	0018      	movs	r0, r3
    6e04:	4b1f      	ldr	r3, [pc, #124]	; (6e84 <xQueueSemaphoreTake+0x3b8>)
    6e06:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    6e08:	4b1f      	ldr	r3, [pc, #124]	; (6e88 <xQueueSemaphoreTake+0x3bc>)
    6e0a:	4798      	blx	r3
    6e0c:	1e03      	subs	r3, r0, #0
    6e0e:	d000      	beq.n	6e12 <xQueueSemaphoreTake+0x346>
    6e10:	e680      	b.n	6b14 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
    6e12:	4b13      	ldr	r3, [pc, #76]	; (6e60 <xQueueSemaphoreTake+0x394>)
    6e14:	4798      	blx	r3
    6e16:	e67d      	b.n	6b14 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
    6e18:	69fb      	ldr	r3, [r7, #28]
    6e1a:	0018      	movs	r0, r3
    6e1c:	4b19      	ldr	r3, [pc, #100]	; (6e84 <xQueueSemaphoreTake+0x3b8>)
    6e1e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    6e20:	4b19      	ldr	r3, [pc, #100]	; (6e88 <xQueueSemaphoreTake+0x3bc>)
    6e22:	4798      	blx	r3
    6e24:	e676      	b.n	6b14 <xQueueSemaphoreTake+0x48>
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	0000848d 	.word	0x0000848d
    6e2c:	00005829 	.word	0x00005829
    6e30:	00003b35 	.word	0x00003b35
    6e34:	000039d5 	.word	0x000039d5
    6e38:	20000024 	.word	0x20000024
    6e3c:	00003a95 	.word	0x00003a95
    6e40:	00003995 	.word	0x00003995
    6e44:	20000018 	.word	0x20000018
    6e48:	00003a75 	.word	0x00003a75
    6e4c:	0000421d 	.word	0x0000421d
    6e50:	000039b5 	.word	0x000039b5
    6e54:	00004879 	.word	0x00004879
    6e58:	00008959 	.word	0x00008959
    6e5c:	000080b1 	.word	0x000080b1
    6e60:	00005811 	.word	0x00005811
    6e64:	0000584d 	.word	0x0000584d
    6e68:	000081ad 	.word	0x000081ad
    6e6c:	00007ad9 	.word	0x00007ad9
    6e70:	000081d5 	.word	0x000081d5
    6e74:	00007215 	.word	0x00007215
    6e78:	000049b5 	.word	0x000049b5
    6e7c:	000084c5 	.word	0x000084c5
    6e80:	00007f8d 	.word	0x00007f8d
    6e84:	00007125 	.word	0x00007125
    6e88:	00007af1 	.word	0x00007af1
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
    6e8c:	69fb      	ldr	r3, [r7, #28]
    6e8e:	0018      	movs	r0, r3
    6e90:	4b2d      	ldr	r3, [pc, #180]	; (6f48 <xQueueSemaphoreTake+0x47c>)
    6e92:	4798      	blx	r3
			( void ) xTaskResumeAll();
    6e94:	4b2d      	ldr	r3, [pc, #180]	; (6f4c <xQueueSemaphoreTake+0x480>)
    6e96:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6e98:	69fb      	ldr	r3, [r7, #28]
    6e9a:	0018      	movs	r0, r3
    6e9c:	4b2c      	ldr	r3, [pc, #176]	; (6f50 <xQueueSemaphoreTake+0x484>)
    6e9e:	4798      	blx	r3
    6ea0:	1e03      	subs	r3, r0, #0
    6ea2:	d100      	bne.n	6ea6 <xQueueSemaphoreTake+0x3da>
    6ea4:	e636      	b.n	6b14 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
    6ea6:	6a3b      	ldr	r3, [r7, #32]
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	d010      	beq.n	6ece <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
    6eac:	4b29      	ldr	r3, [pc, #164]	; (6f54 <xQueueSemaphoreTake+0x488>)
    6eae:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    6eb0:	69fb      	ldr	r3, [r7, #28]
    6eb2:	0018      	movs	r0, r3
    6eb4:	4b28      	ldr	r3, [pc, #160]	; (6f58 <xQueueSemaphoreTake+0x48c>)
    6eb6:	4798      	blx	r3
    6eb8:	0003      	movs	r3, r0
    6eba:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    6ebc:	69fb      	ldr	r3, [r7, #28]
    6ebe:	685b      	ldr	r3, [r3, #4]
    6ec0:	697a      	ldr	r2, [r7, #20]
    6ec2:	0011      	movs	r1, r2
    6ec4:	0018      	movs	r0, r3
    6ec6:	4b25      	ldr	r3, [pc, #148]	; (6f5c <xQueueSemaphoreTake+0x490>)
    6ec8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    6eca:	4b25      	ldr	r3, [pc, #148]	; (6f60 <xQueueSemaphoreTake+0x494>)
    6ecc:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
    6ece:	4b25      	ldr	r3, [pc, #148]	; (6f64 <xQueueSemaphoreTake+0x498>)
    6ed0:	4798      	blx	r3
    6ed2:	0003      	movs	r3, r0
    6ed4:	0018      	movs	r0, r3
    6ed6:	4b24      	ldr	r3, [pc, #144]	; (6f68 <xQueueSemaphoreTake+0x49c>)
    6ed8:	4798      	blx	r3
    6eda:	0003      	movs	r3, r0
    6edc:	001a      	movs	r2, r3
    6ede:	4b23      	ldr	r3, [pc, #140]	; (6f6c <xQueueSemaphoreTake+0x4a0>)
    6ee0:	881b      	ldrh	r3, [r3, #0]
    6ee2:	4013      	ands	r3, r2
    6ee4:	b29b      	uxth	r3, r3
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	d029      	beq.n	6f3e <xQueueSemaphoreTake+0x472>
    6eea:	69fb      	ldr	r3, [r7, #28]
    6eec:	0018      	movs	r0, r3
    6eee:	4b20      	ldr	r3, [pc, #128]	; (6f70 <xQueueSemaphoreTake+0x4a4>)
    6ef0:	4798      	blx	r3
    6ef2:	0003      	movs	r3, r0
    6ef4:	001a      	movs	r2, r3
    6ef6:	4b1d      	ldr	r3, [pc, #116]	; (6f6c <xQueueSemaphoreTake+0x4a0>)
    6ef8:	881b      	ldrh	r3, [r3, #0]
    6efa:	4013      	ands	r3, r2
    6efc:	b29b      	uxth	r3, r3
    6efe:	2b00      	cmp	r3, #0
    6f00:	d01d      	beq.n	6f3e <xQueueSemaphoreTake+0x472>
    6f02:	69fb      	ldr	r3, [r7, #28]
    6f04:	0018      	movs	r0, r3
    6f06:	4b1b      	ldr	r3, [pc, #108]	; (6f74 <xQueueSemaphoreTake+0x4a8>)
    6f08:	4798      	blx	r3
    6f0a:	0003      	movs	r3, r0
    6f0c:	001a      	movs	r2, r3
    6f0e:	4b1a      	ldr	r3, [pc, #104]	; (6f78 <xQueueSemaphoreTake+0x4ac>)
    6f10:	5c9b      	ldrb	r3, [r3, r2]
    6f12:	3350      	adds	r3, #80	; 0x50
    6f14:	b2db      	uxtb	r3, r3
    6f16:	001d      	movs	r5, r3
    6f18:	69fb      	ldr	r3, [r7, #28]
    6f1a:	0018      	movs	r0, r3
    6f1c:	4b15      	ldr	r3, [pc, #84]	; (6f74 <xQueueSemaphoreTake+0x4a8>)
    6f1e:	4798      	blx	r3
    6f20:	0003      	movs	r3, r0
    6f22:	001a      	movs	r2, r3
    6f24:	4b14      	ldr	r3, [pc, #80]	; (6f78 <xQueueSemaphoreTake+0x4ac>)
    6f26:	5c9c      	ldrb	r4, [r3, r2]
    6f28:	69fb      	ldr	r3, [r7, #28]
    6f2a:	0018      	movs	r0, r3
    6f2c:	4b13      	ldr	r3, [pc, #76]	; (6f7c <xQueueSemaphoreTake+0x4b0>)
    6f2e:	4798      	blx	r3
    6f30:	0003      	movs	r3, r0
    6f32:	b2db      	uxtb	r3, r3
    6f34:	001a      	movs	r2, r3
    6f36:	0021      	movs	r1, r4
    6f38:	0028      	movs	r0, r5
    6f3a:	4b11      	ldr	r3, [pc, #68]	; (6f80 <xQueueSemaphoreTake+0x4b4>)
    6f3c:	4798      	blx	r3
				return errQUEUE_EMPTY;
    6f3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    6f40:	0018      	movs	r0, r3
    6f42:	46bd      	mov	sp, r7
    6f44:	b00a      	add	sp, #40	; 0x28
    6f46:	bdb0      	pop	{r4, r5, r7, pc}
    6f48:	00007125 	.word	0x00007125
    6f4c:	00007af1 	.word	0x00007af1
    6f50:	00007215 	.word	0x00007215
    6f54:	00005829 	.word	0x00005829
    6f58:	00006fc7 	.word	0x00006fc7
    6f5c:	000087bd 	.word	0x000087bd
    6f60:	0000584d 	.word	0x0000584d
    6f64:	00003b35 	.word	0x00003b35
    6f68:	000039d5 	.word	0x000039d5
    6f6c:	20000024 	.word	0x20000024
    6f70:	00003a95 	.word	0x00003a95
    6f74:	00003995 	.word	0x00003995
    6f78:	20000018 	.word	0x20000018
    6f7c:	00003a75 	.word	0x00003a75
    6f80:	0000421d 	.word	0x0000421d

00006f84 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
    6f84:	b580      	push	{r7, lr}
    6f86:	b082      	sub	sp, #8
    6f88:	af00      	add	r7, sp, #0
    6f8a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
    6f90:	0018      	movs	r0, r3
    6f92:	46bd      	mov	sp, r7
    6f94:	b002      	add	sp, #8
    6f96:	bd80      	pop	{r7, pc}

00006f98 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
    6f98:	b580      	push	{r7, lr}
    6f9a:	b082      	sub	sp, #8
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	6078      	str	r0, [r7, #4]
    6fa0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    6fa2:	687b      	ldr	r3, [r7, #4]
    6fa4:	683a      	ldr	r2, [r7, #0]
    6fa6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
    6fa8:	46c0      	nop			; (mov r8, r8)
    6faa:	46bd      	mov	sp, r7
    6fac:	b002      	add	sp, #8
    6fae:	bd80      	pop	{r7, pc}

00006fb0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	b082      	sub	sp, #8
    6fb4:	af00      	add	r7, sp, #0
    6fb6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    6fb8:	687b      	ldr	r3, [r7, #4]
    6fba:	2250      	movs	r2, #80	; 0x50
    6fbc:	5c9b      	ldrb	r3, [r3, r2]
	}
    6fbe:	0018      	movs	r0, r3
    6fc0:	46bd      	mov	sp, r7
    6fc2:	b002      	add	sp, #8
    6fc4:	bd80      	pop	{r7, pc}

00006fc6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
    6fc6:	b580      	push	{r7, lr}
    6fc8:	b084      	sub	sp, #16
    6fca:	af00      	add	r7, sp, #0
    6fcc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	d006      	beq.n	6fe4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    6fd6:	687b      	ldr	r3, [r7, #4]
    6fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6fda:	681b      	ldr	r3, [r3, #0]
    6fdc:	2205      	movs	r2, #5
    6fde:	1ad3      	subs	r3, r2, r3
    6fe0:	60fb      	str	r3, [r7, #12]
    6fe2:	e001      	b.n	6fe8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    6fe4:	2300      	movs	r3, #0
    6fe6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
    6fe8:	68fb      	ldr	r3, [r7, #12]
	}
    6fea:	0018      	movs	r0, r3
    6fec:	46bd      	mov	sp, r7
    6fee:	b004      	add	sp, #16
    6ff0:	bd80      	pop	{r7, pc}
	...

00006ff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b086      	sub	sp, #24
    6ff8:	af00      	add	r7, sp, #0
    6ffa:	60f8      	str	r0, [r7, #12]
    6ffc:	60b9      	str	r1, [r7, #8]
    6ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    7000:	2300      	movs	r3, #0
    7002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7004:	68fb      	ldr	r3, [r7, #12]
    7006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    700a:	68fb      	ldr	r3, [r7, #12]
    700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    700e:	2b00      	cmp	r3, #0
    7010:	d10e      	bne.n	7030 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7012:	68fb      	ldr	r3, [r7, #12]
    7014:	681b      	ldr	r3, [r3, #0]
    7016:	2b00      	cmp	r3, #0
    7018:	d14e      	bne.n	70b8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    701a:	68fb      	ldr	r3, [r7, #12]
    701c:	685b      	ldr	r3, [r3, #4]
    701e:	0018      	movs	r0, r3
    7020:	4b2a      	ldr	r3, [pc, #168]	; (70cc <prvCopyDataToQueue+0xd8>)
    7022:	4798      	blx	r3
    7024:	0003      	movs	r3, r0
    7026:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    7028:	68fb      	ldr	r3, [r7, #12]
    702a:	2200      	movs	r2, #0
    702c:	605a      	str	r2, [r3, #4]
    702e:	e043      	b.n	70b8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	2b00      	cmp	r3, #0
    7034:	d119      	bne.n	706a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    7036:	68fb      	ldr	r3, [r7, #12]
    7038:	6898      	ldr	r0, [r3, #8]
    703a:	68fb      	ldr	r3, [r7, #12]
    703c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    703e:	68bb      	ldr	r3, [r7, #8]
    7040:	0019      	movs	r1, r3
    7042:	4b23      	ldr	r3, [pc, #140]	; (70d0 <prvCopyDataToQueue+0xdc>)
    7044:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    7046:	68fb      	ldr	r3, [r7, #12]
    7048:	689a      	ldr	r2, [r3, #8]
    704a:	68fb      	ldr	r3, [r7, #12]
    704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    704e:	18d2      	adds	r2, r2, r3
    7050:	68fb      	ldr	r3, [r7, #12]
    7052:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7054:	68fb      	ldr	r3, [r7, #12]
    7056:	689a      	ldr	r2, [r3, #8]
    7058:	68fb      	ldr	r3, [r7, #12]
    705a:	685b      	ldr	r3, [r3, #4]
    705c:	429a      	cmp	r2, r3
    705e:	d32b      	bcc.n	70b8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    7060:	68fb      	ldr	r3, [r7, #12]
    7062:	681a      	ldr	r2, [r3, #0]
    7064:	68fb      	ldr	r3, [r7, #12]
    7066:	609a      	str	r2, [r3, #8]
    7068:	e026      	b.n	70b8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    706a:	68fb      	ldr	r3, [r7, #12]
    706c:	68d8      	ldr	r0, [r3, #12]
    706e:	68fb      	ldr	r3, [r7, #12]
    7070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7072:	68bb      	ldr	r3, [r7, #8]
    7074:	0019      	movs	r1, r3
    7076:	4b16      	ldr	r3, [pc, #88]	; (70d0 <prvCopyDataToQueue+0xdc>)
    7078:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    707a:	68fb      	ldr	r3, [r7, #12]
    707c:	68da      	ldr	r2, [r3, #12]
    707e:	68fb      	ldr	r3, [r7, #12]
    7080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7082:	425b      	negs	r3, r3
    7084:	18d2      	adds	r2, r2, r3
    7086:	68fb      	ldr	r3, [r7, #12]
    7088:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    708a:	68fb      	ldr	r3, [r7, #12]
    708c:	68da      	ldr	r2, [r3, #12]
    708e:	68fb      	ldr	r3, [r7, #12]
    7090:	681b      	ldr	r3, [r3, #0]
    7092:	429a      	cmp	r2, r3
    7094:	d207      	bcs.n	70a6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    7096:	68fb      	ldr	r3, [r7, #12]
    7098:	685a      	ldr	r2, [r3, #4]
    709a:	68fb      	ldr	r3, [r7, #12]
    709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    709e:	425b      	negs	r3, r3
    70a0:	18d2      	adds	r2, r2, r3
    70a2:	68fb      	ldr	r3, [r7, #12]
    70a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    70a6:	687b      	ldr	r3, [r7, #4]
    70a8:	2b02      	cmp	r3, #2
    70aa:	d105      	bne.n	70b8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    70ac:	693b      	ldr	r3, [r7, #16]
    70ae:	2b00      	cmp	r3, #0
    70b0:	d002      	beq.n	70b8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    70b2:	693b      	ldr	r3, [r7, #16]
    70b4:	3b01      	subs	r3, #1
    70b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    70b8:	693b      	ldr	r3, [r7, #16]
    70ba:	1c5a      	adds	r2, r3, #1
    70bc:	68fb      	ldr	r3, [r7, #12]
    70be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    70c0:	697b      	ldr	r3, [r7, #20]
}
    70c2:	0018      	movs	r0, r3
    70c4:	46bd      	mov	sp, r7
    70c6:	b006      	add	sp, #24
    70c8:	bd80      	pop	{r7, pc}
    70ca:	46c0      	nop			; (mov r8, r8)
    70cc:	00008655 	.word	0x00008655
    70d0:	0000e1fd 	.word	0x0000e1fd

000070d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    70d4:	b580      	push	{r7, lr}
    70d6:	b082      	sub	sp, #8
    70d8:	af00      	add	r7, sp, #0
    70da:	6078      	str	r0, [r7, #4]
    70dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    70e2:	2b00      	cmp	r3, #0
    70e4:	d018      	beq.n	7118 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	68da      	ldr	r2, [r3, #12]
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    70ee:	18d2      	adds	r2, r2, r3
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    70f4:	687b      	ldr	r3, [r7, #4]
    70f6:	68da      	ldr	r2, [r3, #12]
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	685b      	ldr	r3, [r3, #4]
    70fc:	429a      	cmp	r2, r3
    70fe:	d303      	bcc.n	7108 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    7100:	687b      	ldr	r3, [r7, #4]
    7102:	681a      	ldr	r2, [r3, #0]
    7104:	687b      	ldr	r3, [r7, #4]
    7106:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    7108:	687b      	ldr	r3, [r7, #4]
    710a:	68d9      	ldr	r1, [r3, #12]
    710c:	687b      	ldr	r3, [r7, #4]
    710e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7110:	683b      	ldr	r3, [r7, #0]
    7112:	0018      	movs	r0, r3
    7114:	4b02      	ldr	r3, [pc, #8]	; (7120 <prvCopyDataFromQueue+0x4c>)
    7116:	4798      	blx	r3
	}
}
    7118:	46c0      	nop			; (mov r8, r8)
    711a:	46bd      	mov	sp, r7
    711c:	b002      	add	sp, #8
    711e:	bd80      	pop	{r7, pc}
    7120:	0000e1fd 	.word	0x0000e1fd

00007124 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    7124:	b580      	push	{r7, lr}
    7126:	b084      	sub	sp, #16
    7128:	af00      	add	r7, sp, #0
    712a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    712c:	4b34      	ldr	r3, [pc, #208]	; (7200 <prvUnlockQueue+0xdc>)
    712e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    7130:	230f      	movs	r3, #15
    7132:	18fb      	adds	r3, r7, r3
    7134:	687a      	ldr	r2, [r7, #4]
    7136:	2145      	movs	r1, #69	; 0x45
    7138:	5c52      	ldrb	r2, [r2, r1]
    713a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    713c:	e022      	b.n	7184 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    713e:	687b      	ldr	r3, [r7, #4]
    7140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7142:	2b00      	cmp	r3, #0
    7144:	d009      	beq.n	715a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    7146:	687b      	ldr	r3, [r7, #4]
    7148:	2100      	movs	r1, #0
    714a:	0018      	movs	r0, r3
    714c:	4b2d      	ldr	r3, [pc, #180]	; (7204 <prvUnlockQueue+0xe0>)
    714e:	4798      	blx	r3
    7150:	1e03      	subs	r3, r0, #0
    7152:	d00f      	beq.n	7174 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    7154:	4b2c      	ldr	r3, [pc, #176]	; (7208 <prvUnlockQueue+0xe4>)
    7156:	4798      	blx	r3
    7158:	e00c      	b.n	7174 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    715a:	687b      	ldr	r3, [r7, #4]
    715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    715e:	2b00      	cmp	r3, #0
    7160:	d017      	beq.n	7192 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7162:	687b      	ldr	r3, [r7, #4]
    7164:	3324      	adds	r3, #36	; 0x24
    7166:	0018      	movs	r0, r3
    7168:	4b28      	ldr	r3, [pc, #160]	; (720c <prvUnlockQueue+0xe8>)
    716a:	4798      	blx	r3
    716c:	1e03      	subs	r3, r0, #0
    716e:	d001      	beq.n	7174 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    7170:	4b25      	ldr	r3, [pc, #148]	; (7208 <prvUnlockQueue+0xe4>)
    7172:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    7174:	230f      	movs	r3, #15
    7176:	18fb      	adds	r3, r7, r3
    7178:	781b      	ldrb	r3, [r3, #0]
    717a:	3b01      	subs	r3, #1
    717c:	b2da      	uxtb	r2, r3
    717e:	230f      	movs	r3, #15
    7180:	18fb      	adds	r3, r7, r3
    7182:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    7184:	230f      	movs	r3, #15
    7186:	18fb      	adds	r3, r7, r3
    7188:	781b      	ldrb	r3, [r3, #0]
    718a:	b25b      	sxtb	r3, r3
    718c:	2b00      	cmp	r3, #0
    718e:	dcd6      	bgt.n	713e <prvUnlockQueue+0x1a>
    7190:	e000      	b.n	7194 <prvUnlockQueue+0x70>
						break;
    7192:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    7194:	687b      	ldr	r3, [r7, #4]
    7196:	2245      	movs	r2, #69	; 0x45
    7198:	21ff      	movs	r1, #255	; 0xff
    719a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    719c:	4b1c      	ldr	r3, [pc, #112]	; (7210 <prvUnlockQueue+0xec>)
    719e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    71a0:	4b17      	ldr	r3, [pc, #92]	; (7200 <prvUnlockQueue+0xdc>)
    71a2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    71a4:	230e      	movs	r3, #14
    71a6:	18fb      	adds	r3, r7, r3
    71a8:	687a      	ldr	r2, [r7, #4]
    71aa:	2144      	movs	r1, #68	; 0x44
    71ac:	5c52      	ldrb	r2, [r2, r1]
    71ae:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    71b0:	e014      	b.n	71dc <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    71b2:	687b      	ldr	r3, [r7, #4]
    71b4:	691b      	ldr	r3, [r3, #16]
    71b6:	2b00      	cmp	r3, #0
    71b8:	d017      	beq.n	71ea <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	3310      	adds	r3, #16
    71be:	0018      	movs	r0, r3
    71c0:	4b12      	ldr	r3, [pc, #72]	; (720c <prvUnlockQueue+0xe8>)
    71c2:	4798      	blx	r3
    71c4:	1e03      	subs	r3, r0, #0
    71c6:	d001      	beq.n	71cc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    71c8:	4b0f      	ldr	r3, [pc, #60]	; (7208 <prvUnlockQueue+0xe4>)
    71ca:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    71cc:	230e      	movs	r3, #14
    71ce:	18fb      	adds	r3, r7, r3
    71d0:	781b      	ldrb	r3, [r3, #0]
    71d2:	3b01      	subs	r3, #1
    71d4:	b2da      	uxtb	r2, r3
    71d6:	230e      	movs	r3, #14
    71d8:	18fb      	adds	r3, r7, r3
    71da:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    71dc:	230e      	movs	r3, #14
    71de:	18fb      	adds	r3, r7, r3
    71e0:	781b      	ldrb	r3, [r3, #0]
    71e2:	b25b      	sxtb	r3, r3
    71e4:	2b00      	cmp	r3, #0
    71e6:	dce4      	bgt.n	71b2 <prvUnlockQueue+0x8e>
    71e8:	e000      	b.n	71ec <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
    71ea:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	2244      	movs	r2, #68	; 0x44
    71f0:	21ff      	movs	r1, #255	; 0xff
    71f2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    71f4:	4b06      	ldr	r3, [pc, #24]	; (7210 <prvUnlockQueue+0xec>)
    71f6:	4798      	blx	r3
}
    71f8:	46c0      	nop			; (mov r8, r8)
    71fa:	46bd      	mov	sp, r7
    71fc:	b004      	add	sp, #16
    71fe:	bd80      	pop	{r7, pc}
    7200:	00005829 	.word	0x00005829
    7204:	000072f9 	.word	0x000072f9
    7208:	00008281 	.word	0x00008281
    720c:	000080b1 	.word	0x000080b1
    7210:	0000584d 	.word	0x0000584d

00007214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    7214:	b580      	push	{r7, lr}
    7216:	b084      	sub	sp, #16
    7218:	af00      	add	r7, sp, #0
    721a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    721c:	4b08      	ldr	r3, [pc, #32]	; (7240 <prvIsQueueEmpty+0x2c>)
    721e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    7220:	687b      	ldr	r3, [r7, #4]
    7222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7224:	2b00      	cmp	r3, #0
    7226:	d102      	bne.n	722e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    7228:	2301      	movs	r3, #1
    722a:	60fb      	str	r3, [r7, #12]
    722c:	e001      	b.n	7232 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    722e:	2300      	movs	r3, #0
    7230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    7232:	4b04      	ldr	r3, [pc, #16]	; (7244 <prvIsQueueEmpty+0x30>)
    7234:	4798      	blx	r3

	return xReturn;
    7236:	68fb      	ldr	r3, [r7, #12]
}
    7238:	0018      	movs	r0, r3
    723a:	46bd      	mov	sp, r7
    723c:	b004      	add	sp, #16
    723e:	bd80      	pop	{r7, pc}
    7240:	00005829 	.word	0x00005829
    7244:	0000584d 	.word	0x0000584d

00007248 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    7248:	b580      	push	{r7, lr}
    724a:	b084      	sub	sp, #16
    724c:	af00      	add	r7, sp, #0
    724e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    7250:	4b09      	ldr	r3, [pc, #36]	; (7278 <prvIsQueueFull+0x30>)
    7252:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    725c:	429a      	cmp	r2, r3
    725e:	d102      	bne.n	7266 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    7260:	2301      	movs	r3, #1
    7262:	60fb      	str	r3, [r7, #12]
    7264:	e001      	b.n	726a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    7266:	2300      	movs	r3, #0
    7268:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    726a:	4b04      	ldr	r3, [pc, #16]	; (727c <prvIsQueueFull+0x34>)
    726c:	4798      	blx	r3

	return xReturn;
    726e:	68fb      	ldr	r3, [r7, #12]
}
    7270:	0018      	movs	r0, r3
    7272:	46bd      	mov	sp, r7
    7274:	b004      	add	sp, #16
    7276:	bd80      	pop	{r7, pc}
    7278:	00005829 	.word	0x00005829
    727c:	0000584d 	.word	0x0000584d

00007280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    7280:	b580      	push	{r7, lr}
    7282:	b086      	sub	sp, #24
    7284:	af00      	add	r7, sp, #0
    7286:	60f8      	str	r0, [r7, #12]
    7288:	60b9      	str	r1, [r7, #8]
    728a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    728c:	68fb      	ldr	r3, [r7, #12]
    728e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    7290:	4b15      	ldr	r3, [pc, #84]	; (72e8 <vQueueWaitForMessageRestricted+0x68>)
    7292:	4798      	blx	r3
    7294:	697b      	ldr	r3, [r7, #20]
    7296:	2244      	movs	r2, #68	; 0x44
    7298:	5c9b      	ldrb	r3, [r3, r2]
    729a:	b25b      	sxtb	r3, r3
    729c:	3301      	adds	r3, #1
    729e:	d103      	bne.n	72a8 <vQueueWaitForMessageRestricted+0x28>
    72a0:	697b      	ldr	r3, [r7, #20]
    72a2:	2244      	movs	r2, #68	; 0x44
    72a4:	2100      	movs	r1, #0
    72a6:	5499      	strb	r1, [r3, r2]
    72a8:	697b      	ldr	r3, [r7, #20]
    72aa:	2245      	movs	r2, #69	; 0x45
    72ac:	5c9b      	ldrb	r3, [r3, r2]
    72ae:	b25b      	sxtb	r3, r3
    72b0:	3301      	adds	r3, #1
    72b2:	d103      	bne.n	72bc <vQueueWaitForMessageRestricted+0x3c>
    72b4:	697b      	ldr	r3, [r7, #20]
    72b6:	2245      	movs	r2, #69	; 0x45
    72b8:	2100      	movs	r1, #0
    72ba:	5499      	strb	r1, [r3, r2]
    72bc:	4b0b      	ldr	r3, [pc, #44]	; (72ec <vQueueWaitForMessageRestricted+0x6c>)
    72be:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    72c0:	697b      	ldr	r3, [r7, #20]
    72c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    72c4:	2b00      	cmp	r3, #0
    72c6:	d106      	bne.n	72d6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    72c8:	697b      	ldr	r3, [r7, #20]
    72ca:	3324      	adds	r3, #36	; 0x24
    72cc:	687a      	ldr	r2, [r7, #4]
    72ce:	68b9      	ldr	r1, [r7, #8]
    72d0:	0018      	movs	r0, r3
    72d2:	4b07      	ldr	r3, [pc, #28]	; (72f0 <vQueueWaitForMessageRestricted+0x70>)
    72d4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    72d6:	697b      	ldr	r3, [r7, #20]
    72d8:	0018      	movs	r0, r3
    72da:	4b06      	ldr	r3, [pc, #24]	; (72f4 <vQueueWaitForMessageRestricted+0x74>)
    72dc:	4798      	blx	r3
	}
    72de:	46c0      	nop			; (mov r8, r8)
    72e0:	46bd      	mov	sp, r7
    72e2:	b006      	add	sp, #24
    72e4:	bd80      	pop	{r7, pc}
    72e6:	46c0      	nop			; (mov r8, r8)
    72e8:	00005829 	.word	0x00005829
    72ec:	0000584d 	.word	0x0000584d
    72f0:	00007fd1 	.word	0x00007fd1
    72f4:	00007125 	.word	0x00007125

000072f8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    72f8:	b5b0      	push	{r4, r5, r7, lr}
    72fa:	b086      	sub	sp, #24
    72fc:	af00      	add	r7, sp, #0
    72fe:	6078      	str	r0, [r7, #4]
    7300:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7306:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    7308:	2300      	movs	r3, #0
    730a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    730c:	693b      	ldr	r3, [r7, #16]
    730e:	2b00      	cmp	r3, #0
    7310:	d101      	bne.n	7316 <prvNotifyQueueSetContainer+0x1e>
    7312:	b672      	cpsid	i
    7314:	e7fe      	b.n	7314 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    7316:	693b      	ldr	r3, [r7, #16]
    7318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    731a:	693b      	ldr	r3, [r7, #16]
    731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    731e:	429a      	cmp	r2, r3
    7320:	d301      	bcc.n	7326 <prvNotifyQueueSetContainer+0x2e>
    7322:	b672      	cpsid	i
    7324:	e7fe      	b.n	7324 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    7326:	693b      	ldr	r3, [r7, #16]
    7328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    732a:	693b      	ldr	r3, [r7, #16]
    732c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    732e:	429a      	cmp	r2, r3
    7330:	d300      	bcc.n	7334 <prvNotifyQueueSetContainer+0x3c>
    7332:	e08b      	b.n	744c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    7334:	230f      	movs	r3, #15
    7336:	18fb      	adds	r3, r7, r3
    7338:	693a      	ldr	r2, [r7, #16]
    733a:	2145      	movs	r1, #69	; 0x45
    733c:	5c52      	ldrb	r2, [r2, r1]
    733e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
    7340:	4b45      	ldr	r3, [pc, #276]	; (7458 <prvNotifyQueueSetContainer+0x160>)
    7342:	4798      	blx	r3
    7344:	0003      	movs	r3, r0
    7346:	0018      	movs	r0, r3
    7348:	4b44      	ldr	r3, [pc, #272]	; (745c <prvNotifyQueueSetContainer+0x164>)
    734a:	4798      	blx	r3
    734c:	0003      	movs	r3, r0
    734e:	001a      	movs	r2, r3
    7350:	4b43      	ldr	r3, [pc, #268]	; (7460 <prvNotifyQueueSetContainer+0x168>)
    7352:	881b      	ldrh	r3, [r3, #0]
    7354:	4013      	ands	r3, r2
    7356:	b29b      	uxth	r3, r3
    7358:	2b00      	cmp	r3, #0
    735a:	d02e      	beq.n	73ba <prvNotifyQueueSetContainer+0xc2>
    735c:	693b      	ldr	r3, [r7, #16]
    735e:	0018      	movs	r0, r3
    7360:	4b40      	ldr	r3, [pc, #256]	; (7464 <prvNotifyQueueSetContainer+0x16c>)
    7362:	4798      	blx	r3
    7364:	0003      	movs	r3, r0
    7366:	001a      	movs	r2, r3
    7368:	4b3d      	ldr	r3, [pc, #244]	; (7460 <prvNotifyQueueSetContainer+0x168>)
    736a:	881b      	ldrh	r3, [r3, #0]
    736c:	4013      	ands	r3, r2
    736e:	b29b      	uxth	r3, r3
    7370:	2b00      	cmp	r3, #0
    7372:	d022      	beq.n	73ba <prvNotifyQueueSetContainer+0xc2>
    7374:	683b      	ldr	r3, [r7, #0]
    7376:	2b00      	cmp	r3, #0
    7378:	d10b      	bne.n	7392 <prvNotifyQueueSetContainer+0x9a>
    737a:	693b      	ldr	r3, [r7, #16]
    737c:	0018      	movs	r0, r3
    737e:	4b3a      	ldr	r3, [pc, #232]	; (7468 <prvNotifyQueueSetContainer+0x170>)
    7380:	4798      	blx	r3
    7382:	0003      	movs	r3, r0
    7384:	001a      	movs	r2, r3
    7386:	4b39      	ldr	r3, [pc, #228]	; (746c <prvNotifyQueueSetContainer+0x174>)
    7388:	5c9b      	ldrb	r3, [r3, r2]
    738a:	3320      	adds	r3, #32
    738c:	b2db      	uxtb	r3, r3
    738e:	001d      	movs	r5, r3
    7390:	e000      	b.n	7394 <prvNotifyQueueSetContainer+0x9c>
    7392:	2525      	movs	r5, #37	; 0x25
    7394:	693b      	ldr	r3, [r7, #16]
    7396:	0018      	movs	r0, r3
    7398:	4b33      	ldr	r3, [pc, #204]	; (7468 <prvNotifyQueueSetContainer+0x170>)
    739a:	4798      	blx	r3
    739c:	0003      	movs	r3, r0
    739e:	001a      	movs	r2, r3
    73a0:	4b32      	ldr	r3, [pc, #200]	; (746c <prvNotifyQueueSetContainer+0x174>)
    73a2:	5c9c      	ldrb	r4, [r3, r2]
    73a4:	693b      	ldr	r3, [r7, #16]
    73a6:	0018      	movs	r0, r3
    73a8:	4b31      	ldr	r3, [pc, #196]	; (7470 <prvNotifyQueueSetContainer+0x178>)
    73aa:	4798      	blx	r3
    73ac:	0003      	movs	r3, r0
    73ae:	b2db      	uxtb	r3, r3
    73b0:	001a      	movs	r2, r3
    73b2:	0021      	movs	r1, r4
    73b4:	0028      	movs	r0, r5
    73b6:	4b2f      	ldr	r3, [pc, #188]	; (7474 <prvNotifyQueueSetContainer+0x17c>)
    73b8:	4798      	blx	r3
    73ba:	693b      	ldr	r3, [r7, #16]
    73bc:	0018      	movs	r0, r3
    73be:	4b2a      	ldr	r3, [pc, #168]	; (7468 <prvNotifyQueueSetContainer+0x170>)
    73c0:	4798      	blx	r3
    73c2:	0003      	movs	r3, r0
    73c4:	001a      	movs	r2, r3
    73c6:	4b29      	ldr	r3, [pc, #164]	; (746c <prvNotifyQueueSetContainer+0x174>)
    73c8:	5c9c      	ldrb	r4, [r3, r2]
    73ca:	693b      	ldr	r3, [r7, #16]
    73cc:	0018      	movs	r0, r3
    73ce:	4b28      	ldr	r3, [pc, #160]	; (7470 <prvNotifyQueueSetContainer+0x178>)
    73d0:	4798      	blx	r3
    73d2:	0003      	movs	r3, r0
    73d4:	b2dd      	uxtb	r5, r3
    73d6:	693b      	ldr	r3, [r7, #16]
    73d8:	0018      	movs	r0, r3
    73da:	4b23      	ldr	r3, [pc, #140]	; (7468 <prvNotifyQueueSetContainer+0x170>)
    73dc:	4798      	blx	r3
    73de:	0003      	movs	r3, r0
    73e0:	001a      	movs	r2, r3
    73e2:	4b22      	ldr	r3, [pc, #136]	; (746c <prvNotifyQueueSetContainer+0x174>)
    73e4:	5c9b      	ldrb	r3, [r3, r2]
    73e6:	2b02      	cmp	r3, #2
    73e8:	d005      	beq.n	73f6 <prvNotifyQueueSetContainer+0xfe>
    73ea:	693b      	ldr	r3, [r7, #16]
    73ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    73ee:	b2db      	uxtb	r3, r3
    73f0:	3301      	adds	r3, #1
    73f2:	b2db      	uxtb	r3, r3
    73f4:	e000      	b.n	73f8 <prvNotifyQueueSetContainer+0x100>
    73f6:	2300      	movs	r3, #0
    73f8:	001a      	movs	r2, r3
    73fa:	0029      	movs	r1, r5
    73fc:	0020      	movs	r0, r4
    73fe:	4b1e      	ldr	r3, [pc, #120]	; (7478 <prvNotifyQueueSetContainer+0x180>)
    7400:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    7402:	683a      	ldr	r2, [r7, #0]
    7404:	1d39      	adds	r1, r7, #4
    7406:	693b      	ldr	r3, [r7, #16]
    7408:	0018      	movs	r0, r3
    740a:	4b1c      	ldr	r3, [pc, #112]	; (747c <prvNotifyQueueSetContainer+0x184>)
    740c:	4798      	blx	r3
    740e:	0003      	movs	r3, r0
    7410:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    7412:	230f      	movs	r3, #15
    7414:	18fb      	adds	r3, r7, r3
    7416:	781b      	ldrb	r3, [r3, #0]
    7418:	b25b      	sxtb	r3, r3
    741a:	3301      	adds	r3, #1
    741c:	d10d      	bne.n	743a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    741e:	693b      	ldr	r3, [r7, #16]
    7420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7422:	2b00      	cmp	r3, #0
    7424:	d012      	beq.n	744c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    7426:	693b      	ldr	r3, [r7, #16]
    7428:	3324      	adds	r3, #36	; 0x24
    742a:	0018      	movs	r0, r3
    742c:	4b14      	ldr	r3, [pc, #80]	; (7480 <prvNotifyQueueSetContainer+0x188>)
    742e:	4798      	blx	r3
    7430:	1e03      	subs	r3, r0, #0
    7432:	d00b      	beq.n	744c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    7434:	2301      	movs	r3, #1
    7436:	617b      	str	r3, [r7, #20]
    7438:	e008      	b.n	744c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    743a:	230f      	movs	r3, #15
    743c:	18fb      	adds	r3, r7, r3
    743e:	781b      	ldrb	r3, [r3, #0]
    7440:	3301      	adds	r3, #1
    7442:	b2db      	uxtb	r3, r3
    7444:	b259      	sxtb	r1, r3
    7446:	693b      	ldr	r3, [r7, #16]
    7448:	2245      	movs	r2, #69	; 0x45
    744a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    744c:	697b      	ldr	r3, [r7, #20]
	}
    744e:	0018      	movs	r0, r3
    7450:	46bd      	mov	sp, r7
    7452:	b006      	add	sp, #24
    7454:	bdb0      	pop	{r4, r5, r7, pc}
    7456:	46c0      	nop			; (mov r8, r8)
    7458:	00003b35 	.word	0x00003b35
    745c:	000039d5 	.word	0x000039d5
    7460:	20000024 	.word	0x20000024
    7464:	00003a95 	.word	0x00003a95
    7468:	00003995 	.word	0x00003995
    746c:	20000018 	.word	0x20000018
    7470:	00003a75 	.word	0x00003a75
    7474:	0000421d 	.word	0x0000421d
    7478:	00004879 	.word	0x00004879
    747c:	00006ff5 	.word	0x00006ff5
    7480:	000080b1 	.word	0x000080b1

00007484 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    7484:	b590      	push	{r4, r7, lr}
    7486:	b08d      	sub	sp, #52	; 0x34
    7488:	af04      	add	r7, sp, #16
    748a:	60f8      	str	r0, [r7, #12]
    748c:	60b9      	str	r1, [r7, #8]
    748e:	603b      	str	r3, [r7, #0]
    7490:	1dbb      	adds	r3, r7, #6
    7492:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7494:	1dbb      	adds	r3, r7, #6
    7496:	881b      	ldrh	r3, [r3, #0]
    7498:	009b      	lsls	r3, r3, #2
    749a:	0018      	movs	r0, r3
    749c:	4b1d      	ldr	r3, [pc, #116]	; (7514 <xTaskCreate+0x90>)
    749e:	4798      	blx	r3
    74a0:	0003      	movs	r3, r0
    74a2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    74a4:	697b      	ldr	r3, [r7, #20]
    74a6:	2b00      	cmp	r3, #0
    74a8:	d010      	beq.n	74cc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    74aa:	2054      	movs	r0, #84	; 0x54
    74ac:	4b19      	ldr	r3, [pc, #100]	; (7514 <xTaskCreate+0x90>)
    74ae:	4798      	blx	r3
    74b0:	0003      	movs	r3, r0
    74b2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    74b4:	69fb      	ldr	r3, [r7, #28]
    74b6:	2b00      	cmp	r3, #0
    74b8:	d003      	beq.n	74c2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    74ba:	69fb      	ldr	r3, [r7, #28]
    74bc:	697a      	ldr	r2, [r7, #20]
    74be:	631a      	str	r2, [r3, #48]	; 0x30
    74c0:	e006      	b.n	74d0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    74c2:	697b      	ldr	r3, [r7, #20]
    74c4:	0018      	movs	r0, r3
    74c6:	4b14      	ldr	r3, [pc, #80]	; (7518 <xTaskCreate+0x94>)
    74c8:	4798      	blx	r3
    74ca:	e001      	b.n	74d0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    74cc:	2300      	movs	r3, #0
    74ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    74d0:	69fb      	ldr	r3, [r7, #28]
    74d2:	2b00      	cmp	r3, #0
    74d4:	d016      	beq.n	7504 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    74d6:	1dbb      	adds	r3, r7, #6
    74d8:	881a      	ldrh	r2, [r3, #0]
    74da:	683c      	ldr	r4, [r7, #0]
    74dc:	68b9      	ldr	r1, [r7, #8]
    74de:	68f8      	ldr	r0, [r7, #12]
    74e0:	2300      	movs	r3, #0
    74e2:	9303      	str	r3, [sp, #12]
    74e4:	69fb      	ldr	r3, [r7, #28]
    74e6:	9302      	str	r3, [sp, #8]
    74e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    74ea:	9301      	str	r3, [sp, #4]
    74ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    74ee:	9300      	str	r3, [sp, #0]
    74f0:	0023      	movs	r3, r4
    74f2:	4c0a      	ldr	r4, [pc, #40]	; (751c <xTaskCreate+0x98>)
    74f4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    74f6:	69fb      	ldr	r3, [r7, #28]
    74f8:	0018      	movs	r0, r3
    74fa:	4b09      	ldr	r3, [pc, #36]	; (7520 <xTaskCreate+0x9c>)
    74fc:	4798      	blx	r3
			xReturn = pdPASS;
    74fe:	2301      	movs	r3, #1
    7500:	61bb      	str	r3, [r7, #24]
    7502:	e002      	b.n	750a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    7504:	2301      	movs	r3, #1
    7506:	425b      	negs	r3, r3
    7508:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    750a:	69bb      	ldr	r3, [r7, #24]
	}
    750c:	0018      	movs	r0, r3
    750e:	46bd      	mov	sp, r7
    7510:	b009      	add	sp, #36	; 0x24
    7512:	bd90      	pop	{r4, r7, pc}
    7514:	00005961 	.word	0x00005961
    7518:	00005a25 	.word	0x00005a25
    751c:	00007525 	.word	0x00007525
    7520:	00007635 	.word	0x00007635

00007524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    7524:	b580      	push	{r7, lr}
    7526:	b086      	sub	sp, #24
    7528:	af00      	add	r7, sp, #0
    752a:	60f8      	str	r0, [r7, #12]
    752c:	60b9      	str	r1, [r7, #8]
    752e:	607a      	str	r2, [r7, #4]
    7530:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    7532:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7534:	6b18      	ldr	r0, [r3, #48]	; 0x30
    7536:	687b      	ldr	r3, [r7, #4]
    7538:	009b      	lsls	r3, r3, #2
    753a:	001a      	movs	r2, r3
    753c:	21a5      	movs	r1, #165	; 0xa5
    753e:	4b39      	ldr	r3, [pc, #228]	; (7624 <prvInitialiseNewTask+0x100>)
    7540:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    7542:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7546:	687b      	ldr	r3, [r7, #4]
    7548:	4937      	ldr	r1, [pc, #220]	; (7628 <prvInitialiseNewTask+0x104>)
    754a:	468c      	mov	ip, r1
    754c:	4463      	add	r3, ip
    754e:	009b      	lsls	r3, r3, #2
    7550:	18d3      	adds	r3, r2, r3
    7552:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    7554:	693b      	ldr	r3, [r7, #16]
    7556:	2207      	movs	r2, #7
    7558:	4393      	bics	r3, r2
    755a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    755c:	693b      	ldr	r3, [r7, #16]
    755e:	2207      	movs	r2, #7
    7560:	4013      	ands	r3, r2
    7562:	d001      	beq.n	7568 <prvInitialiseNewTask+0x44>
    7564:	b672      	cpsid	i
    7566:	e7fe      	b.n	7566 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7568:	2300      	movs	r3, #0
    756a:	617b      	str	r3, [r7, #20]
    756c:	e013      	b.n	7596 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    756e:	68ba      	ldr	r2, [r7, #8]
    7570:	697b      	ldr	r3, [r7, #20]
    7572:	18d3      	adds	r3, r2, r3
    7574:	7818      	ldrb	r0, [r3, #0]
    7576:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7578:	2134      	movs	r1, #52	; 0x34
    757a:	697b      	ldr	r3, [r7, #20]
    757c:	18d3      	adds	r3, r2, r3
    757e:	185b      	adds	r3, r3, r1
    7580:	1c02      	adds	r2, r0, #0
    7582:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    7584:	68ba      	ldr	r2, [r7, #8]
    7586:	697b      	ldr	r3, [r7, #20]
    7588:	18d3      	adds	r3, r2, r3
    758a:	781b      	ldrb	r3, [r3, #0]
    758c:	2b00      	cmp	r3, #0
    758e:	d006      	beq.n	759e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7590:	697b      	ldr	r3, [r7, #20]
    7592:	3301      	adds	r3, #1
    7594:	617b      	str	r3, [r7, #20]
    7596:	697b      	ldr	r3, [r7, #20]
    7598:	2b07      	cmp	r3, #7
    759a:	d9e8      	bls.n	756e <prvInitialiseNewTask+0x4a>
    759c:	e000      	b.n	75a0 <prvInitialiseNewTask+0x7c>
		{
			break;
    759e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    75a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75a2:	223b      	movs	r2, #59	; 0x3b
    75a4:	2100      	movs	r1, #0
    75a6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    75a8:	6a3b      	ldr	r3, [r7, #32]
    75aa:	2b04      	cmp	r3, #4
    75ac:	d901      	bls.n	75b2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    75ae:	2304      	movs	r3, #4
    75b0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    75b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75b4:	6a3a      	ldr	r2, [r7, #32]
    75b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    75b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75ba:	6a3a      	ldr	r2, [r7, #32]
    75bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    75be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75c0:	2200      	movs	r2, #0
    75c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    75c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75c6:	3304      	adds	r3, #4
    75c8:	0018      	movs	r0, r3
    75ca:	4b18      	ldr	r3, [pc, #96]	; (762c <prvInitialiseNewTask+0x108>)
    75cc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    75ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75d0:	3318      	adds	r3, #24
    75d2:	0018      	movs	r0, r3
    75d4:	4b15      	ldr	r3, [pc, #84]	; (762c <prvInitialiseNewTask+0x108>)
    75d6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    75d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75da:	6aba      	ldr	r2, [r7, #40]	; 0x28
    75dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    75de:	6a3b      	ldr	r3, [r7, #32]
    75e0:	2205      	movs	r2, #5
    75e2:	1ad2      	subs	r2, r2, r3
    75e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    75e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    75ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    75ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75f0:	2200      	movs	r2, #0
    75f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    75f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75f6:	2250      	movs	r2, #80	; 0x50
    75f8:	2100      	movs	r1, #0
    75fa:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    75fc:	683a      	ldr	r2, [r7, #0]
    75fe:	68f9      	ldr	r1, [r7, #12]
    7600:	693b      	ldr	r3, [r7, #16]
    7602:	0018      	movs	r0, r3
    7604:	4b0a      	ldr	r3, [pc, #40]	; (7630 <prvInitialiseNewTask+0x10c>)
    7606:	4798      	blx	r3
    7608:	0002      	movs	r2, r0
    760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    760c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7610:	2b00      	cmp	r3, #0
    7612:	d002      	beq.n	761a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    7614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7616:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7618:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    761a:	46c0      	nop			; (mov r8, r8)
    761c:	46bd      	mov	sp, r7
    761e:	b006      	add	sp, #24
    7620:	bd80      	pop	{r7, pc}
    7622:	46c0      	nop			; (mov r8, r8)
    7624:	0000e20f 	.word	0x0000e20f
    7628:	3fffffff 	.word	0x3fffffff
    762c:	000055d1 	.word	0x000055d1
    7630:	000056e9 	.word	0x000056e9

00007634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    7634:	b580      	push	{r7, lr}
    7636:	b082      	sub	sp, #8
    7638:	af00      	add	r7, sp, #0
    763a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    763c:	4b5e      	ldr	r3, [pc, #376]	; (77b8 <prvAddNewTaskToReadyList+0x184>)
    763e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    7640:	4b5e      	ldr	r3, [pc, #376]	; (77bc <prvAddNewTaskToReadyList+0x188>)
    7642:	681b      	ldr	r3, [r3, #0]
    7644:	1c5a      	adds	r2, r3, #1
    7646:	4b5d      	ldr	r3, [pc, #372]	; (77bc <prvAddNewTaskToReadyList+0x188>)
    7648:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    764a:	4b5d      	ldr	r3, [pc, #372]	; (77c0 <prvAddNewTaskToReadyList+0x18c>)
    764c:	681b      	ldr	r3, [r3, #0]
    764e:	2b00      	cmp	r3, #0
    7650:	d109      	bne.n	7666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    7652:	4b5b      	ldr	r3, [pc, #364]	; (77c0 <prvAddNewTaskToReadyList+0x18c>)
    7654:	687a      	ldr	r2, [r7, #4]
    7656:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    7658:	4b58      	ldr	r3, [pc, #352]	; (77bc <prvAddNewTaskToReadyList+0x188>)
    765a:	681b      	ldr	r3, [r3, #0]
    765c:	2b01      	cmp	r3, #1
    765e:	d110      	bne.n	7682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    7660:	4b58      	ldr	r3, [pc, #352]	; (77c4 <prvAddNewTaskToReadyList+0x190>)
    7662:	4798      	blx	r3
    7664:	e00d      	b.n	7682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    7666:	4b58      	ldr	r3, [pc, #352]	; (77c8 <prvAddNewTaskToReadyList+0x194>)
    7668:	681b      	ldr	r3, [r3, #0]
    766a:	2b00      	cmp	r3, #0
    766c:	d109      	bne.n	7682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    766e:	4b54      	ldr	r3, [pc, #336]	; (77c0 <prvAddNewTaskToReadyList+0x18c>)
    7670:	681b      	ldr	r3, [r3, #0]
    7672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7674:	687b      	ldr	r3, [r7, #4]
    7676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7678:	429a      	cmp	r2, r3
    767a:	d802      	bhi.n	7682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    767c:	4b50      	ldr	r3, [pc, #320]	; (77c0 <prvAddNewTaskToReadyList+0x18c>)
    767e:	687a      	ldr	r2, [r7, #4]
    7680:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    7682:	4b52      	ldr	r3, [pc, #328]	; (77cc <prvAddNewTaskToReadyList+0x198>)
    7684:	681b      	ldr	r3, [r3, #0]
    7686:	1c5a      	adds	r2, r3, #1
    7688:	4b50      	ldr	r3, [pc, #320]	; (77cc <prvAddNewTaskToReadyList+0x198>)
    768a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    768c:	4b4f      	ldr	r3, [pc, #316]	; (77cc <prvAddNewTaskToReadyList+0x198>)
    768e:	681a      	ldr	r2, [r3, #0]
    7690:	687b      	ldr	r3, [r7, #4]
    7692:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
    7694:	687b      	ldr	r3, [r7, #4]
    7696:	2b00      	cmp	r3, #0
    7698:	d04e      	beq.n	7738 <prvAddNewTaskToReadyList+0x104>
    769a:	2003      	movs	r0, #3
    769c:	4b4c      	ldr	r3, [pc, #304]	; (77d0 <prvAddNewTaskToReadyList+0x19c>)
    769e:	4798      	blx	r3
    76a0:	0003      	movs	r3, r0
    76a2:	b29a      	uxth	r2, r3
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	0011      	movs	r1, r2
    76a8:	0018      	movs	r0, r3
    76aa:	4b4a      	ldr	r3, [pc, #296]	; (77d4 <prvAddNewTaskToReadyList+0x1a0>)
    76ac:	4798      	blx	r3
    76ae:	4b4a      	ldr	r3, [pc, #296]	; (77d8 <prvAddNewTaskToReadyList+0x1a4>)
    76b0:	881a      	ldrh	r2, [r3, #0]
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	0011      	movs	r1, r2
    76b6:	0018      	movs	r0, r3
    76b8:	4b48      	ldr	r3, [pc, #288]	; (77dc <prvAddNewTaskToReadyList+0x1a8>)
    76ba:	4798      	blx	r3
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	0018      	movs	r0, r3
    76c0:	4b47      	ldr	r3, [pc, #284]	; (77e0 <prvAddNewTaskToReadyList+0x1ac>)
    76c2:	4798      	blx	r3
    76c4:	0003      	movs	r3, r0
    76c6:	b2d9      	uxtb	r1, r3
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	3334      	adds	r3, #52	; 0x34
    76cc:	001a      	movs	r2, r3
    76ce:	2003      	movs	r0, #3
    76d0:	4b44      	ldr	r3, [pc, #272]	; (77e4 <prvAddNewTaskToReadyList+0x1b0>)
    76d2:	4798      	blx	r3
    76d4:	687b      	ldr	r3, [r7, #4]
    76d6:	0018      	movs	r0, r3
    76d8:	4b41      	ldr	r3, [pc, #260]	; (77e0 <prvAddNewTaskToReadyList+0x1ac>)
    76da:	4798      	blx	r3
    76dc:	0003      	movs	r3, r0
    76de:	b2d9      	uxtb	r1, r3
    76e0:	687b      	ldr	r3, [r7, #4]
    76e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    76e4:	b2db      	uxtb	r3, r3
    76e6:	001a      	movs	r2, r3
    76e8:	2003      	movs	r0, #3
    76ea:	4b3f      	ldr	r3, [pc, #252]	; (77e8 <prvAddNewTaskToReadyList+0x1b4>)
    76ec:	4798      	blx	r3
    76ee:	4b3f      	ldr	r3, [pc, #252]	; (77ec <prvAddNewTaskToReadyList+0x1b8>)
    76f0:	4798      	blx	r3
    76f2:	0003      	movs	r3, r0
    76f4:	0018      	movs	r0, r3
    76f6:	4b3e      	ldr	r3, [pc, #248]	; (77f0 <prvAddNewTaskToReadyList+0x1bc>)
    76f8:	4798      	blx	r3
    76fa:	0003      	movs	r3, r0
    76fc:	001a      	movs	r2, r3
    76fe:	4b3d      	ldr	r3, [pc, #244]	; (77f4 <prvAddNewTaskToReadyList+0x1c0>)
    7700:	881b      	ldrh	r3, [r3, #0]
    7702:	4013      	ands	r3, r2
    7704:	b29b      	uxth	r3, r3
    7706:	2b00      	cmp	r3, #0
    7708:	d016      	beq.n	7738 <prvAddNewTaskToReadyList+0x104>
    770a:	687b      	ldr	r3, [r7, #4]
    770c:	0018      	movs	r0, r3
    770e:	4b38      	ldr	r3, [pc, #224]	; (77f0 <prvAddNewTaskToReadyList+0x1bc>)
    7710:	4798      	blx	r3
    7712:	0003      	movs	r3, r0
    7714:	001a      	movs	r2, r3
    7716:	4b37      	ldr	r3, [pc, #220]	; (77f4 <prvAddNewTaskToReadyList+0x1c0>)
    7718:	881b      	ldrh	r3, [r3, #0]
    771a:	4013      	ands	r3, r2
    771c:	b29b      	uxth	r3, r3
    771e:	2b00      	cmp	r3, #0
    7720:	d00a      	beq.n	7738 <prvAddNewTaskToReadyList+0x104>
    7722:	687b      	ldr	r3, [r7, #4]
    7724:	0018      	movs	r0, r3
    7726:	4b2e      	ldr	r3, [pc, #184]	; (77e0 <prvAddNewTaskToReadyList+0x1ac>)
    7728:	4798      	blx	r3
    772a:	0003      	movs	r3, r0
    772c:	b2db      	uxtb	r3, r3
    772e:	001a      	movs	r2, r3
    7730:	2103      	movs	r1, #3
    7732:	201b      	movs	r0, #27
    7734:	4b30      	ldr	r3, [pc, #192]	; (77f8 <prvAddNewTaskToReadyList+0x1c4>)
    7736:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
    7738:	687b      	ldr	r3, [r7, #4]
    773a:	0018      	movs	r0, r3
    773c:	4b2c      	ldr	r3, [pc, #176]	; (77f0 <prvAddNewTaskToReadyList+0x1bc>)
    773e:	4798      	blx	r3
    7740:	0003      	movs	r3, r0
    7742:	001a      	movs	r2, r3
    7744:	4b2b      	ldr	r3, [pc, #172]	; (77f4 <prvAddNewTaskToReadyList+0x1c0>)
    7746:	881b      	ldrh	r3, [r3, #0]
    7748:	4013      	ands	r3, r2
    774a:	b29b      	uxth	r3, r3
    774c:	2b00      	cmp	r3, #0
    774e:	d008      	beq.n	7762 <prvAddNewTaskToReadyList+0x12e>
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	0018      	movs	r0, r3
    7754:	4b22      	ldr	r3, [pc, #136]	; (77e0 <prvAddNewTaskToReadyList+0x1ac>)
    7756:	4798      	blx	r3
    7758:	0003      	movs	r3, r0
    775a:	b2db      	uxtb	r3, r3
    775c:	0018      	movs	r0, r3
    775e:	4b27      	ldr	r3, [pc, #156]	; (77fc <prvAddNewTaskToReadyList+0x1c8>)
    7760:	4798      	blx	r3
    7762:	687b      	ldr	r3, [r7, #4]
    7764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7766:	4b26      	ldr	r3, [pc, #152]	; (7800 <prvAddNewTaskToReadyList+0x1cc>)
    7768:	681b      	ldr	r3, [r3, #0]
    776a:	429a      	cmp	r2, r3
    776c:	d903      	bls.n	7776 <prvAddNewTaskToReadyList+0x142>
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7772:	4b23      	ldr	r3, [pc, #140]	; (7800 <prvAddNewTaskToReadyList+0x1cc>)
    7774:	601a      	str	r2, [r3, #0]
    7776:	687b      	ldr	r3, [r7, #4]
    7778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    777a:	0013      	movs	r3, r2
    777c:	009b      	lsls	r3, r3, #2
    777e:	189b      	adds	r3, r3, r2
    7780:	009b      	lsls	r3, r3, #2
    7782:	4a20      	ldr	r2, [pc, #128]	; (7804 <prvAddNewTaskToReadyList+0x1d0>)
    7784:	189a      	adds	r2, r3, r2
    7786:	687b      	ldr	r3, [r7, #4]
    7788:	3304      	adds	r3, #4
    778a:	0019      	movs	r1, r3
    778c:	0010      	movs	r0, r2
    778e:	4b1e      	ldr	r3, [pc, #120]	; (7808 <prvAddNewTaskToReadyList+0x1d4>)
    7790:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    7792:	4b1e      	ldr	r3, [pc, #120]	; (780c <prvAddNewTaskToReadyList+0x1d8>)
    7794:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    7796:	4b0c      	ldr	r3, [pc, #48]	; (77c8 <prvAddNewTaskToReadyList+0x194>)
    7798:	681b      	ldr	r3, [r3, #0]
    779a:	2b00      	cmp	r3, #0
    779c:	d008      	beq.n	77b0 <prvAddNewTaskToReadyList+0x17c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    779e:	4b08      	ldr	r3, [pc, #32]	; (77c0 <prvAddNewTaskToReadyList+0x18c>)
    77a0:	681b      	ldr	r3, [r3, #0]
    77a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77a4:	687b      	ldr	r3, [r7, #4]
    77a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    77a8:	429a      	cmp	r2, r3
    77aa:	d201      	bcs.n	77b0 <prvAddNewTaskToReadyList+0x17c>
		{
			taskYIELD_IF_USING_PREEMPTION();
    77ac:	4b18      	ldr	r3, [pc, #96]	; (7810 <prvAddNewTaskToReadyList+0x1dc>)
    77ae:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    77b0:	46c0      	nop			; (mov r8, r8)
    77b2:	46bd      	mov	sp, r7
    77b4:	b002      	add	sp, #8
    77b6:	bd80      	pop	{r7, pc}
    77b8:	00005829 	.word	0x00005829
    77bc:	200037b8 	.word	0x200037b8
    77c0:	200036e0 	.word	0x200036e0
    77c4:	00008309 	.word	0x00008309
    77c8:	200037c4 	.word	0x200037c4
    77cc:	200037d4 	.word	0x200037d4
    77d0:	00004da9 	.word	0x00004da9
    77d4:	000039f9 	.word	0x000039f9
    77d8:	20000026 	.word	0x20000026
    77dc:	00003a35 	.word	0x00003a35
    77e0:	000039b5 	.word	0x000039b5
    77e4:	00004fd9 	.word	0x00004fd9
    77e8:	00004739 	.word	0x00004739
    77ec:	00003b35 	.word	0x00003b35
    77f0:	000039d5 	.word	0x000039d5
    77f4:	20000024 	.word	0x20000024
    77f8:	0000421d 	.word	0x0000421d
    77fc:	00003fd5 	.word	0x00003fd5
    7800:	200037c0 	.word	0x200037c0
    7804:	200036e4 	.word	0x200036e4
    7808:	000055e7 	.word	0x000055e7
    780c:	0000584d 	.word	0x0000584d
    7810:	00005811 	.word	0x00005811

00007814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    7814:	b580      	push	{r7, lr}
    7816:	b084      	sub	sp, #16
    7818:	af00      	add	r7, sp, #0
    781a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    781c:	2300      	movs	r3, #0
    781e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    7820:	687b      	ldr	r3, [r7, #4]
    7822:	2b00      	cmp	r3, #0
    7824:	d045      	beq.n	78b2 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    7826:	4b27      	ldr	r3, [pc, #156]	; (78c4 <vTaskDelay+0xb0>)
    7828:	681b      	ldr	r3, [r3, #0]
    782a:	2b00      	cmp	r3, #0
    782c:	d001      	beq.n	7832 <vTaskDelay+0x1e>
    782e:	b672      	cpsid	i
    7830:	e7fe      	b.n	7830 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    7832:	4b25      	ldr	r3, [pc, #148]	; (78c8 <vTaskDelay+0xb4>)
    7834:	4798      	blx	r3
			{
				traceTASK_DELAY();
    7836:	4b25      	ldr	r3, [pc, #148]	; (78cc <vTaskDelay+0xb8>)
    7838:	681b      	ldr	r3, [r3, #0]
    783a:	0018      	movs	r0, r3
    783c:	4b24      	ldr	r3, [pc, #144]	; (78d0 <vTaskDelay+0xbc>)
    783e:	4798      	blx	r3
    7840:	0003      	movs	r3, r0
    7842:	001a      	movs	r2, r3
    7844:	4b23      	ldr	r3, [pc, #140]	; (78d4 <vTaskDelay+0xc0>)
    7846:	881b      	ldrh	r3, [r3, #0]
    7848:	4013      	ands	r3, r2
    784a:	b29b      	uxth	r3, r3
    784c:	2b00      	cmp	r3, #0
    784e:	d00e      	beq.n	786e <vTaskDelay+0x5a>
    7850:	687b      	ldr	r3, [r7, #4]
    7852:	0019      	movs	r1, r3
    7854:	2089      	movs	r0, #137	; 0x89
    7856:	4b20      	ldr	r3, [pc, #128]	; (78d8 <vTaskDelay+0xc4>)
    7858:	4798      	blx	r3
    785a:	4b1c      	ldr	r3, [pc, #112]	; (78cc <vTaskDelay+0xb8>)
    785c:	681b      	ldr	r3, [r3, #0]
    785e:	0018      	movs	r0, r3
    7860:	4b1e      	ldr	r3, [pc, #120]	; (78dc <vTaskDelay+0xc8>)
    7862:	4798      	blx	r3
    7864:	0003      	movs	r3, r0
    7866:	b2db      	uxtb	r3, r3
    7868:	0018      	movs	r0, r3
    786a:	4b1d      	ldr	r3, [pc, #116]	; (78e0 <vTaskDelay+0xcc>)
    786c:	4798      	blx	r3
    786e:	4b1d      	ldr	r3, [pc, #116]	; (78e4 <vTaskDelay+0xd0>)
    7870:	4798      	blx	r3
    7872:	0003      	movs	r3, r0
    7874:	0018      	movs	r0, r3
    7876:	4b16      	ldr	r3, [pc, #88]	; (78d0 <vTaskDelay+0xbc>)
    7878:	4798      	blx	r3
    787a:	0003      	movs	r3, r0
    787c:	001a      	movs	r2, r3
    787e:	4b15      	ldr	r3, [pc, #84]	; (78d4 <vTaskDelay+0xc0>)
    7880:	881b      	ldrh	r3, [r3, #0]
    7882:	4013      	ands	r3, r2
    7884:	b29b      	uxth	r3, r3
    7886:	2b00      	cmp	r3, #0
    7888:	d00a      	beq.n	78a0 <vTaskDelay+0x8c>
    788a:	4b16      	ldr	r3, [pc, #88]	; (78e4 <vTaskDelay+0xd0>)
    788c:	4798      	blx	r3
    788e:	0003      	movs	r3, r0
    7890:	0018      	movs	r0, r3
    7892:	4b12      	ldr	r3, [pc, #72]	; (78dc <vTaskDelay+0xc8>)
    7894:	4798      	blx	r3
    7896:	0003      	movs	r3, r0
    7898:	b2db      	uxtb	r3, r3
    789a:	0018      	movs	r0, r3
    789c:	4b10      	ldr	r3, [pc, #64]	; (78e0 <vTaskDelay+0xcc>)
    789e:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    78a0:	687b      	ldr	r3, [r7, #4]
    78a2:	2100      	movs	r1, #0
    78a4:	0018      	movs	r0, r3
    78a6:	4b10      	ldr	r3, [pc, #64]	; (78e8 <vTaskDelay+0xd4>)
    78a8:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    78aa:	4b10      	ldr	r3, [pc, #64]	; (78ec <vTaskDelay+0xd8>)
    78ac:	4798      	blx	r3
    78ae:	0003      	movs	r3, r0
    78b0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    78b2:	68fb      	ldr	r3, [r7, #12]
    78b4:	2b00      	cmp	r3, #0
    78b6:	d101      	bne.n	78bc <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
    78b8:	4b0d      	ldr	r3, [pc, #52]	; (78f0 <vTaskDelay+0xdc>)
    78ba:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    78bc:	46c0      	nop			; (mov r8, r8)
    78be:	46bd      	mov	sp, r7
    78c0:	b004      	add	sp, #16
    78c2:	bd80      	pop	{r7, pc}
    78c4:	200037e0 	.word	0x200037e0
    78c8:	00007ad9 	.word	0x00007ad9
    78cc:	200036e0 	.word	0x200036e0
    78d0:	000039d5 	.word	0x000039d5
    78d4:	20000024 	.word	0x20000024
    78d8:	00004525 	.word	0x00004525
    78dc:	000039b5 	.word	0x000039b5
    78e0:	000049b5 	.word	0x000049b5
    78e4:	00003b35 	.word	0x00003b35
    78e8:	0000897d 	.word	0x0000897d
    78ec:	00007af1 	.word	0x00007af1
    78f0:	00005811 	.word	0x00005811

000078f4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    78f4:	b580      	push	{r7, lr}
    78f6:	b084      	sub	sp, #16
    78f8:	af00      	add	r7, sp, #0
    78fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    78fc:	4b42      	ldr	r3, [pc, #264]	; (7a08 <vTaskSuspend+0x114>)
    78fe:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    7900:	687b      	ldr	r3, [r7, #4]
    7902:	2b00      	cmp	r3, #0
    7904:	d102      	bne.n	790c <vTaskSuspend+0x18>
    7906:	4b41      	ldr	r3, [pc, #260]	; (7a0c <vTaskSuspend+0x118>)
    7908:	681b      	ldr	r3, [r3, #0]
    790a:	e000      	b.n	790e <vTaskSuspend+0x1a>
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
    7910:	4b3f      	ldr	r3, [pc, #252]	; (7a10 <vTaskSuspend+0x11c>)
    7912:	4798      	blx	r3
    7914:	0003      	movs	r3, r0
    7916:	0018      	movs	r0, r3
    7918:	4b3e      	ldr	r3, [pc, #248]	; (7a14 <vTaskSuspend+0x120>)
    791a:	4798      	blx	r3
    791c:	0003      	movs	r3, r0
    791e:	001a      	movs	r2, r3
    7920:	4b3d      	ldr	r3, [pc, #244]	; (7a18 <vTaskSuspend+0x124>)
    7922:	881b      	ldrh	r3, [r3, #0]
    7924:	4013      	ands	r3, r2
    7926:	b29b      	uxth	r3, r3
    7928:	2b00      	cmp	r3, #0
    792a:	d016      	beq.n	795a <vTaskSuspend+0x66>
    792c:	68fb      	ldr	r3, [r7, #12]
    792e:	0018      	movs	r0, r3
    7930:	4b38      	ldr	r3, [pc, #224]	; (7a14 <vTaskSuspend+0x120>)
    7932:	4798      	blx	r3
    7934:	0003      	movs	r3, r0
    7936:	001a      	movs	r2, r3
    7938:	4b37      	ldr	r3, [pc, #220]	; (7a18 <vTaskSuspend+0x124>)
    793a:	881b      	ldrh	r3, [r3, #0]
    793c:	4013      	ands	r3, r2
    793e:	b29b      	uxth	r3, r3
    7940:	2b00      	cmp	r3, #0
    7942:	d00a      	beq.n	795a <vTaskSuspend+0x66>
    7944:	68fb      	ldr	r3, [r7, #12]
    7946:	0018      	movs	r0, r3
    7948:	4b34      	ldr	r3, [pc, #208]	; (7a1c <vTaskSuspend+0x128>)
    794a:	4798      	blx	r3
    794c:	0003      	movs	r3, r0
    794e:	b2db      	uxtb	r3, r3
    7950:	001a      	movs	r2, r3
    7952:	2103      	movs	r1, #3
    7954:	208a      	movs	r0, #138	; 0x8a
    7956:	4b32      	ldr	r3, [pc, #200]	; (7a20 <vTaskSuspend+0x12c>)
    7958:	4798      	blx	r3
    795a:	68fb      	ldr	r3, [r7, #12]
    795c:	0018      	movs	r0, r3
    795e:	4b2f      	ldr	r3, [pc, #188]	; (7a1c <vTaskSuspend+0x128>)
    7960:	4798      	blx	r3
    7962:	0003      	movs	r3, r0
    7964:	b2db      	uxtb	r3, r3
    7966:	0018      	movs	r0, r3
    7968:	4b2e      	ldr	r3, [pc, #184]	; (7a24 <vTaskSuspend+0x130>)
    796a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    796c:	68fb      	ldr	r3, [r7, #12]
    796e:	3304      	adds	r3, #4
    7970:	0018      	movs	r0, r3
    7972:	4b2d      	ldr	r3, [pc, #180]	; (7a28 <vTaskSuspend+0x134>)
    7974:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    7976:	68fb      	ldr	r3, [r7, #12]
    7978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    797a:	2b00      	cmp	r3, #0
    797c:	d004      	beq.n	7988 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    797e:	68fb      	ldr	r3, [r7, #12]
    7980:	3318      	adds	r3, #24
    7982:	0018      	movs	r0, r3
    7984:	4b28      	ldr	r3, [pc, #160]	; (7a28 <vTaskSuspend+0x134>)
    7986:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    7988:	68fb      	ldr	r3, [r7, #12]
    798a:	1d1a      	adds	r2, r3, #4
    798c:	4b27      	ldr	r3, [pc, #156]	; (7a2c <vTaskSuspend+0x138>)
    798e:	0011      	movs	r1, r2
    7990:	0018      	movs	r0, r3
    7992:	4b27      	ldr	r3, [pc, #156]	; (7a30 <vTaskSuspend+0x13c>)
    7994:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    7996:	68fb      	ldr	r3, [r7, #12]
    7998:	2250      	movs	r2, #80	; 0x50
    799a:	5c9b      	ldrb	r3, [r3, r2]
    799c:	b2db      	uxtb	r3, r3
    799e:	2b01      	cmp	r3, #1
    79a0:	d103      	bne.n	79aa <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    79a2:	68fb      	ldr	r3, [r7, #12]
    79a4:	2250      	movs	r2, #80	; 0x50
    79a6:	2100      	movs	r1, #0
    79a8:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
    79aa:	4b22      	ldr	r3, [pc, #136]	; (7a34 <vTaskSuspend+0x140>)
    79ac:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
    79ae:	4b22      	ldr	r3, [pc, #136]	; (7a38 <vTaskSuspend+0x144>)
    79b0:	681b      	ldr	r3, [r3, #0]
    79b2:	2b00      	cmp	r3, #0
    79b4:	d005      	beq.n	79c2 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    79b6:	4b14      	ldr	r3, [pc, #80]	; (7a08 <vTaskSuspend+0x114>)
    79b8:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
    79ba:	4b20      	ldr	r3, [pc, #128]	; (7a3c <vTaskSuspend+0x148>)
    79bc:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
    79be:	4b1d      	ldr	r3, [pc, #116]	; (7a34 <vTaskSuspend+0x140>)
    79c0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    79c2:	4b12      	ldr	r3, [pc, #72]	; (7a0c <vTaskSuspend+0x118>)
    79c4:	681b      	ldr	r3, [r3, #0]
    79c6:	68fa      	ldr	r2, [r7, #12]
    79c8:	429a      	cmp	r2, r3
    79ca:	d118      	bne.n	79fe <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
    79cc:	4b1a      	ldr	r3, [pc, #104]	; (7a38 <vTaskSuspend+0x144>)
    79ce:	681b      	ldr	r3, [r3, #0]
    79d0:	2b00      	cmp	r3, #0
    79d2:	d008      	beq.n	79e6 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    79d4:	4b1a      	ldr	r3, [pc, #104]	; (7a40 <vTaskSuspend+0x14c>)
    79d6:	681b      	ldr	r3, [r3, #0]
    79d8:	2b00      	cmp	r3, #0
    79da:	d001      	beq.n	79e0 <vTaskSuspend+0xec>
    79dc:	b672      	cpsid	i
    79de:	e7fe      	b.n	79de <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
    79e0:	4b18      	ldr	r3, [pc, #96]	; (7a44 <vTaskSuspend+0x150>)
    79e2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    79e4:	e00b      	b.n	79fe <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    79e6:	4b11      	ldr	r3, [pc, #68]	; (7a2c <vTaskSuspend+0x138>)
    79e8:	681a      	ldr	r2, [r3, #0]
    79ea:	4b17      	ldr	r3, [pc, #92]	; (7a48 <vTaskSuspend+0x154>)
    79ec:	681b      	ldr	r3, [r3, #0]
    79ee:	429a      	cmp	r2, r3
    79f0:	d103      	bne.n	79fa <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
    79f2:	4b06      	ldr	r3, [pc, #24]	; (7a0c <vTaskSuspend+0x118>)
    79f4:	2200      	movs	r2, #0
    79f6:	601a      	str	r2, [r3, #0]
	}
    79f8:	e001      	b.n	79fe <vTaskSuspend+0x10a>
					vTaskSwitchContext();
    79fa:	4b14      	ldr	r3, [pc, #80]	; (7a4c <vTaskSuspend+0x158>)
    79fc:	4798      	blx	r3
	}
    79fe:	46c0      	nop			; (mov r8, r8)
    7a00:	46bd      	mov	sp, r7
    7a02:	b004      	add	sp, #16
    7a04:	bd80      	pop	{r7, pc}
    7a06:	46c0      	nop			; (mov r8, r8)
    7a08:	00005829 	.word	0x00005829
    7a0c:	200036e0 	.word	0x200036e0
    7a10:	00003b35 	.word	0x00003b35
    7a14:	000039d5 	.word	0x000039d5
    7a18:	20000024 	.word	0x20000024
    7a1c:	000039b5 	.word	0x000039b5
    7a20:	0000421d 	.word	0x0000421d
    7a24:	000049b5 	.word	0x000049b5
    7a28:	00005697 	.word	0x00005697
    7a2c:	200037a4 	.word	0x200037a4
    7a30:	000055e7 	.word	0x000055e7
    7a34:	0000584d 	.word	0x0000584d
    7a38:	200037c4 	.word	0x200037c4
    7a3c:	00008429 	.word	0x00008429
    7a40:	200037e0 	.word	0x200037e0
    7a44:	00005811 	.word	0x00005811
    7a48:	200037b8 	.word	0x200037b8
    7a4c:	00007e6d 	.word	0x00007e6d

00007a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    7a50:	b590      	push	{r4, r7, lr}
    7a52:	b085      	sub	sp, #20
    7a54:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    7a56:	23fa      	movs	r3, #250	; 0xfa
    7a58:	005a      	lsls	r2, r3, #1
    7a5a:	4916      	ldr	r1, [pc, #88]	; (7ab4 <vTaskStartScheduler+0x64>)
    7a5c:	4816      	ldr	r0, [pc, #88]	; (7ab8 <vTaskStartScheduler+0x68>)
    7a5e:	4b17      	ldr	r3, [pc, #92]	; (7abc <vTaskStartScheduler+0x6c>)
    7a60:	9301      	str	r3, [sp, #4]
    7a62:	2300      	movs	r3, #0
    7a64:	9300      	str	r3, [sp, #0]
    7a66:	2300      	movs	r3, #0
    7a68:	4c15      	ldr	r4, [pc, #84]	; (7ac0 <vTaskStartScheduler+0x70>)
    7a6a:	47a0      	blx	r4
    7a6c:	0003      	movs	r3, r0
    7a6e:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    7a70:	687b      	ldr	r3, [r7, #4]
    7a72:	2b01      	cmp	r3, #1
    7a74:	d103      	bne.n	7a7e <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    7a76:	4b13      	ldr	r3, [pc, #76]	; (7ac4 <vTaskStartScheduler+0x74>)
    7a78:	4798      	blx	r3
    7a7a:	0003      	movs	r3, r0
    7a7c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    7a7e:	687b      	ldr	r3, [r7, #4]
    7a80:	2b01      	cmp	r3, #1
    7a82:	d10d      	bne.n	7aa0 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    7a84:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    7a86:	4b10      	ldr	r3, [pc, #64]	; (7ac8 <vTaskStartScheduler+0x78>)
    7a88:	2201      	movs	r2, #1
    7a8a:	4252      	negs	r2, r2
    7a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    7a8e:	4b0f      	ldr	r3, [pc, #60]	; (7acc <vTaskStartScheduler+0x7c>)
    7a90:	2201      	movs	r2, #1
    7a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    7a94:	4b0e      	ldr	r3, [pc, #56]	; (7ad0 <vTaskStartScheduler+0x80>)
    7a96:	2200      	movs	r2, #0
    7a98:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    7a9a:	4b0e      	ldr	r3, [pc, #56]	; (7ad4 <vTaskStartScheduler+0x84>)
    7a9c:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    7a9e:	e004      	b.n	7aaa <vTaskStartScheduler+0x5a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    7aa0:	687b      	ldr	r3, [r7, #4]
    7aa2:	3301      	adds	r3, #1
    7aa4:	d101      	bne.n	7aaa <vTaskStartScheduler+0x5a>
    7aa6:	b672      	cpsid	i
    7aa8:	e7fe      	b.n	7aa8 <vTaskStartScheduler+0x58>
}
    7aaa:	46c0      	nop			; (mov r8, r8)
    7aac:	46bd      	mov	sp, r7
    7aae:	b003      	add	sp, #12
    7ab0:	bd90      	pop	{r4, r7, pc}
    7ab2:	46c0      	nop			; (mov r8, r8)
    7ab4:	00010694 	.word	0x00010694
    7ab8:	000082e1 	.word	0x000082e1
    7abc:	200037dc 	.word	0x200037dc
    7ac0:	00007485 	.word	0x00007485
    7ac4:	00008a31 	.word	0x00008a31
    7ac8:	200037d8 	.word	0x200037d8
    7acc:	200037c4 	.word	0x200037c4
    7ad0:	200037bc 	.word	0x200037bc
    7ad4:	000057b9 	.word	0x000057b9

00007ad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    7ad8:	b580      	push	{r7, lr}
    7ada:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    7adc:	4b03      	ldr	r3, [pc, #12]	; (7aec <vTaskSuspendAll+0x14>)
    7ade:	681b      	ldr	r3, [r3, #0]
    7ae0:	1c5a      	adds	r2, r3, #1
    7ae2:	4b02      	ldr	r3, [pc, #8]	; (7aec <vTaskSuspendAll+0x14>)
    7ae4:	601a      	str	r2, [r3, #0]
}
    7ae6:	46c0      	nop			; (mov r8, r8)
    7ae8:	46bd      	mov	sp, r7
    7aea:	bd80      	pop	{r7, pc}
    7aec:	200037e0 	.word	0x200037e0

00007af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    7af0:	b580      	push	{r7, lr}
    7af2:	b084      	sub	sp, #16
    7af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    7af6:	2300      	movs	r3, #0
    7af8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    7afa:	2300      	movs	r3, #0
    7afc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    7afe:	4b45      	ldr	r3, [pc, #276]	; (7c14 <xTaskResumeAll+0x124>)
    7b00:	681b      	ldr	r3, [r3, #0]
    7b02:	2b00      	cmp	r3, #0
    7b04:	d101      	bne.n	7b0a <xTaskResumeAll+0x1a>
    7b06:	b672      	cpsid	i
    7b08:	e7fe      	b.n	7b08 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    7b0a:	4b43      	ldr	r3, [pc, #268]	; (7c18 <xTaskResumeAll+0x128>)
    7b0c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    7b0e:	4b41      	ldr	r3, [pc, #260]	; (7c14 <xTaskResumeAll+0x124>)
    7b10:	681b      	ldr	r3, [r3, #0]
    7b12:	1e5a      	subs	r2, r3, #1
    7b14:	4b3f      	ldr	r3, [pc, #252]	; (7c14 <xTaskResumeAll+0x124>)
    7b16:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7b18:	4b3e      	ldr	r3, [pc, #248]	; (7c14 <xTaskResumeAll+0x124>)
    7b1a:	681b      	ldr	r3, [r3, #0]
    7b1c:	2b00      	cmp	r3, #0
    7b1e:	d000      	beq.n	7b22 <xTaskResumeAll+0x32>
    7b20:	e071      	b.n	7c06 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    7b22:	4b3e      	ldr	r3, [pc, #248]	; (7c1c <xTaskResumeAll+0x12c>)
    7b24:	681b      	ldr	r3, [r3, #0]
    7b26:	2b00      	cmp	r3, #0
    7b28:	d100      	bne.n	7b2c <xTaskResumeAll+0x3c>
    7b2a:	e06c      	b.n	7c06 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7b2c:	e044      	b.n	7bb8 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    7b2e:	4b3c      	ldr	r3, [pc, #240]	; (7c20 <xTaskResumeAll+0x130>)
    7b30:	68db      	ldr	r3, [r3, #12]
    7b32:	68db      	ldr	r3, [r3, #12]
    7b34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7b36:	68fb      	ldr	r3, [r7, #12]
    7b38:	3318      	adds	r3, #24
    7b3a:	0018      	movs	r0, r3
    7b3c:	4b39      	ldr	r3, [pc, #228]	; (7c24 <xTaskResumeAll+0x134>)
    7b3e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7b40:	68fb      	ldr	r3, [r7, #12]
    7b42:	3304      	adds	r3, #4
    7b44:	0018      	movs	r0, r3
    7b46:	4b37      	ldr	r3, [pc, #220]	; (7c24 <xTaskResumeAll+0x134>)
    7b48:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    7b4a:	68fb      	ldr	r3, [r7, #12]
    7b4c:	0018      	movs	r0, r3
    7b4e:	4b36      	ldr	r3, [pc, #216]	; (7c28 <xTaskResumeAll+0x138>)
    7b50:	4798      	blx	r3
    7b52:	0003      	movs	r3, r0
    7b54:	001a      	movs	r2, r3
    7b56:	4b35      	ldr	r3, [pc, #212]	; (7c2c <xTaskResumeAll+0x13c>)
    7b58:	881b      	ldrh	r3, [r3, #0]
    7b5a:	4013      	ands	r3, r2
    7b5c:	b29b      	uxth	r3, r3
    7b5e:	2b00      	cmp	r3, #0
    7b60:	d008      	beq.n	7b74 <xTaskResumeAll+0x84>
    7b62:	68fb      	ldr	r3, [r7, #12]
    7b64:	0018      	movs	r0, r3
    7b66:	4b32      	ldr	r3, [pc, #200]	; (7c30 <xTaskResumeAll+0x140>)
    7b68:	4798      	blx	r3
    7b6a:	0003      	movs	r3, r0
    7b6c:	b2db      	uxtb	r3, r3
    7b6e:	0018      	movs	r0, r3
    7b70:	4b30      	ldr	r3, [pc, #192]	; (7c34 <xTaskResumeAll+0x144>)
    7b72:	4798      	blx	r3
    7b74:	68fb      	ldr	r3, [r7, #12]
    7b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b78:	4b2f      	ldr	r3, [pc, #188]	; (7c38 <xTaskResumeAll+0x148>)
    7b7a:	681b      	ldr	r3, [r3, #0]
    7b7c:	429a      	cmp	r2, r3
    7b7e:	d903      	bls.n	7b88 <xTaskResumeAll+0x98>
    7b80:	68fb      	ldr	r3, [r7, #12]
    7b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b84:	4b2c      	ldr	r3, [pc, #176]	; (7c38 <xTaskResumeAll+0x148>)
    7b86:	601a      	str	r2, [r3, #0]
    7b88:	68fb      	ldr	r3, [r7, #12]
    7b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b8c:	0013      	movs	r3, r2
    7b8e:	009b      	lsls	r3, r3, #2
    7b90:	189b      	adds	r3, r3, r2
    7b92:	009b      	lsls	r3, r3, #2
    7b94:	4a29      	ldr	r2, [pc, #164]	; (7c3c <xTaskResumeAll+0x14c>)
    7b96:	189a      	adds	r2, r3, r2
    7b98:	68fb      	ldr	r3, [r7, #12]
    7b9a:	3304      	adds	r3, #4
    7b9c:	0019      	movs	r1, r3
    7b9e:	0010      	movs	r0, r2
    7ba0:	4b27      	ldr	r3, [pc, #156]	; (7c40 <xTaskResumeAll+0x150>)
    7ba2:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7ba4:	68fb      	ldr	r3, [r7, #12]
    7ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ba8:	4b26      	ldr	r3, [pc, #152]	; (7c44 <xTaskResumeAll+0x154>)
    7baa:	681b      	ldr	r3, [r3, #0]
    7bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7bae:	429a      	cmp	r2, r3
    7bb0:	d302      	bcc.n	7bb8 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
    7bb2:	4b25      	ldr	r3, [pc, #148]	; (7c48 <xTaskResumeAll+0x158>)
    7bb4:	2201      	movs	r2, #1
    7bb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7bb8:	4b19      	ldr	r3, [pc, #100]	; (7c20 <xTaskResumeAll+0x130>)
    7bba:	681b      	ldr	r3, [r3, #0]
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	d1b6      	bne.n	7b2e <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    7bc0:	68fb      	ldr	r3, [r7, #12]
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	d001      	beq.n	7bca <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    7bc6:	4b21      	ldr	r3, [pc, #132]	; (7c4c <xTaskResumeAll+0x15c>)
    7bc8:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    7bca:	4b21      	ldr	r3, [pc, #132]	; (7c50 <xTaskResumeAll+0x160>)
    7bcc:	681b      	ldr	r3, [r3, #0]
    7bce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    7bd0:	687b      	ldr	r3, [r7, #4]
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d00f      	beq.n	7bf6 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    7bd6:	4b1f      	ldr	r3, [pc, #124]	; (7c54 <xTaskResumeAll+0x164>)
    7bd8:	4798      	blx	r3
    7bda:	1e03      	subs	r3, r0, #0
    7bdc:	d002      	beq.n	7be4 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
    7bde:	4b1a      	ldr	r3, [pc, #104]	; (7c48 <xTaskResumeAll+0x158>)
    7be0:	2201      	movs	r2, #1
    7be2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	3b01      	subs	r3, #1
    7be8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    7bea:	687b      	ldr	r3, [r7, #4]
    7bec:	2b00      	cmp	r3, #0
    7bee:	d1f2      	bne.n	7bd6 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
    7bf0:	4b17      	ldr	r3, [pc, #92]	; (7c50 <xTaskResumeAll+0x160>)
    7bf2:	2200      	movs	r2, #0
    7bf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    7bf6:	4b14      	ldr	r3, [pc, #80]	; (7c48 <xTaskResumeAll+0x158>)
    7bf8:	681b      	ldr	r3, [r3, #0]
    7bfa:	2b00      	cmp	r3, #0
    7bfc:	d003      	beq.n	7c06 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    7bfe:	2301      	movs	r3, #1
    7c00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    7c02:	4b15      	ldr	r3, [pc, #84]	; (7c58 <xTaskResumeAll+0x168>)
    7c04:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    7c06:	4b15      	ldr	r3, [pc, #84]	; (7c5c <xTaskResumeAll+0x16c>)
    7c08:	4798      	blx	r3

	return xAlreadyYielded;
    7c0a:	68bb      	ldr	r3, [r7, #8]
}
    7c0c:	0018      	movs	r0, r3
    7c0e:	46bd      	mov	sp, r7
    7c10:	b004      	add	sp, #16
    7c12:	bd80      	pop	{r7, pc}
    7c14:	200037e0 	.word	0x200037e0
    7c18:	00005829 	.word	0x00005829
    7c1c:	200037b8 	.word	0x200037b8
    7c20:	20003778 	.word	0x20003778
    7c24:	00005697 	.word	0x00005697
    7c28:	000039d5 	.word	0x000039d5
    7c2c:	20000024 	.word	0x20000024
    7c30:	000039b5 	.word	0x000039b5
    7c34:	00003fd5 	.word	0x00003fd5
    7c38:	200037c0 	.word	0x200037c0
    7c3c:	200036e4 	.word	0x200036e4
    7c40:	000055e7 	.word	0x000055e7
    7c44:	200036e0 	.word	0x200036e0
    7c48:	200037cc 	.word	0x200037cc
    7c4c:	00008429 	.word	0x00008429
    7c50:	200037c8 	.word	0x200037c8
    7c54:	00007c7d 	.word	0x00007c7d
    7c58:	00005811 	.word	0x00005811
    7c5c:	0000584d 	.word	0x0000584d

00007c60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    7c60:	b580      	push	{r7, lr}
    7c62:	b082      	sub	sp, #8
    7c64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    7c66:	4b04      	ldr	r3, [pc, #16]	; (7c78 <xTaskGetTickCount+0x18>)
    7c68:	681b      	ldr	r3, [r3, #0]
    7c6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    7c6c:	687b      	ldr	r3, [r7, #4]
}
    7c6e:	0018      	movs	r0, r3
    7c70:	46bd      	mov	sp, r7
    7c72:	b002      	add	sp, #8
    7c74:	bd80      	pop	{r7, pc}
    7c76:	46c0      	nop			; (mov r8, r8)
    7c78:	200037bc 	.word	0x200037bc

00007c7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    7c7c:	b580      	push	{r7, lr}
    7c7e:	b086      	sub	sp, #24
    7c80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    7c82:	2300      	movs	r3, #0
    7c84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    7c86:	4b64      	ldr	r3, [pc, #400]	; (7e18 <xTaskIncrementTick+0x19c>)
    7c88:	681b      	ldr	r3, [r3, #0]
    7c8a:	2b01      	cmp	r3, #1
    7c8c:	d003      	beq.n	7c96 <xTaskIncrementTick+0x1a>
    7c8e:	4b63      	ldr	r3, [pc, #396]	; (7e1c <xTaskIncrementTick+0x1a0>)
    7c90:	681b      	ldr	r3, [r3, #0]
    7c92:	2b00      	cmp	r3, #0
    7c94:	d107      	bne.n	7ca6 <xTaskIncrementTick+0x2a>
    7c96:	4b62      	ldr	r3, [pc, #392]	; (7e20 <xTaskIncrementTick+0x1a4>)
    7c98:	681b      	ldr	r3, [r3, #0]
    7c9a:	1c5a      	adds	r2, r3, #1
    7c9c:	4b60      	ldr	r3, [pc, #384]	; (7e20 <xTaskIncrementTick+0x1a4>)
    7c9e:	601a      	str	r2, [r3, #0]
    7ca0:	2000      	movs	r0, #0
    7ca2:	4b60      	ldr	r3, [pc, #384]	; (7e24 <xTaskIncrementTick+0x1a8>)
    7ca4:	4798      	blx	r3
    7ca6:	4b5c      	ldr	r3, [pc, #368]	; (7e18 <xTaskIncrementTick+0x19c>)
    7ca8:	681b      	ldr	r3, [r3, #0]
    7caa:	2b00      	cmp	r3, #0
    7cac:	d106      	bne.n	7cbc <xTaskIncrementTick+0x40>
    7cae:	4b5e      	ldr	r3, [pc, #376]	; (7e28 <xTaskIncrementTick+0x1ac>)
    7cb0:	681b      	ldr	r3, [r3, #0]
    7cb2:	3301      	adds	r3, #1
    7cb4:	0019      	movs	r1, r3
    7cb6:	2003      	movs	r0, #3
    7cb8:	4b5c      	ldr	r3, [pc, #368]	; (7e2c <xTaskIncrementTick+0x1b0>)
    7cba:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7cbc:	4b56      	ldr	r3, [pc, #344]	; (7e18 <xTaskIncrementTick+0x19c>)
    7cbe:	681b      	ldr	r3, [r3, #0]
    7cc0:	2b00      	cmp	r3, #0
    7cc2:	d000      	beq.n	7cc6 <xTaskIncrementTick+0x4a>
    7cc4:	e098      	b.n	7df8 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    7cc6:	4b58      	ldr	r3, [pc, #352]	; (7e28 <xTaskIncrementTick+0x1ac>)
    7cc8:	681b      	ldr	r3, [r3, #0]
    7cca:	3301      	adds	r3, #1
    7ccc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    7cce:	4b56      	ldr	r3, [pc, #344]	; (7e28 <xTaskIncrementTick+0x1ac>)
    7cd0:	693a      	ldr	r2, [r7, #16]
    7cd2:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    7cd4:	693b      	ldr	r3, [r7, #16]
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d117      	bne.n	7d0a <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
    7cda:	4b55      	ldr	r3, [pc, #340]	; (7e30 <xTaskIncrementTick+0x1b4>)
    7cdc:	681b      	ldr	r3, [r3, #0]
    7cde:	681b      	ldr	r3, [r3, #0]
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d001      	beq.n	7ce8 <xTaskIncrementTick+0x6c>
    7ce4:	b672      	cpsid	i
    7ce6:	e7fe      	b.n	7ce6 <xTaskIncrementTick+0x6a>
    7ce8:	4b51      	ldr	r3, [pc, #324]	; (7e30 <xTaskIncrementTick+0x1b4>)
    7cea:	681b      	ldr	r3, [r3, #0]
    7cec:	60fb      	str	r3, [r7, #12]
    7cee:	4b51      	ldr	r3, [pc, #324]	; (7e34 <xTaskIncrementTick+0x1b8>)
    7cf0:	681a      	ldr	r2, [r3, #0]
    7cf2:	4b4f      	ldr	r3, [pc, #316]	; (7e30 <xTaskIncrementTick+0x1b4>)
    7cf4:	601a      	str	r2, [r3, #0]
    7cf6:	4b4f      	ldr	r3, [pc, #316]	; (7e34 <xTaskIncrementTick+0x1b8>)
    7cf8:	68fa      	ldr	r2, [r7, #12]
    7cfa:	601a      	str	r2, [r3, #0]
    7cfc:	4b4e      	ldr	r3, [pc, #312]	; (7e38 <xTaskIncrementTick+0x1bc>)
    7cfe:	681b      	ldr	r3, [r3, #0]
    7d00:	1c5a      	adds	r2, r3, #1
    7d02:	4b4d      	ldr	r3, [pc, #308]	; (7e38 <xTaskIncrementTick+0x1bc>)
    7d04:	601a      	str	r2, [r3, #0]
    7d06:	4b4d      	ldr	r3, [pc, #308]	; (7e3c <xTaskIncrementTick+0x1c0>)
    7d08:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    7d0a:	4b4d      	ldr	r3, [pc, #308]	; (7e40 <xTaskIncrementTick+0x1c4>)
    7d0c:	681b      	ldr	r3, [r3, #0]
    7d0e:	693a      	ldr	r2, [r7, #16]
    7d10:	429a      	cmp	r2, r3
    7d12:	d363      	bcc.n	7ddc <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    7d14:	4b46      	ldr	r3, [pc, #280]	; (7e30 <xTaskIncrementTick+0x1b4>)
    7d16:	681b      	ldr	r3, [r3, #0]
    7d18:	681b      	ldr	r3, [r3, #0]
    7d1a:	2b00      	cmp	r3, #0
    7d1c:	d101      	bne.n	7d22 <xTaskIncrementTick+0xa6>
    7d1e:	2301      	movs	r3, #1
    7d20:	e000      	b.n	7d24 <xTaskIncrementTick+0xa8>
    7d22:	2300      	movs	r3, #0
    7d24:	2b00      	cmp	r3, #0
    7d26:	d004      	beq.n	7d32 <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7d28:	4b45      	ldr	r3, [pc, #276]	; (7e40 <xTaskIncrementTick+0x1c4>)
    7d2a:	2201      	movs	r2, #1
    7d2c:	4252      	negs	r2, r2
    7d2e:	601a      	str	r2, [r3, #0]
					break;
    7d30:	e054      	b.n	7ddc <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    7d32:	4b3f      	ldr	r3, [pc, #252]	; (7e30 <xTaskIncrementTick+0x1b4>)
    7d34:	681b      	ldr	r3, [r3, #0]
    7d36:	68db      	ldr	r3, [r3, #12]
    7d38:	68db      	ldr	r3, [r3, #12]
    7d3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    7d3c:	68bb      	ldr	r3, [r7, #8]
    7d3e:	685b      	ldr	r3, [r3, #4]
    7d40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    7d42:	693a      	ldr	r2, [r7, #16]
    7d44:	687b      	ldr	r3, [r7, #4]
    7d46:	429a      	cmp	r2, r3
    7d48:	d203      	bcs.n	7d52 <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    7d4a:	4b3d      	ldr	r3, [pc, #244]	; (7e40 <xTaskIncrementTick+0x1c4>)
    7d4c:	687a      	ldr	r2, [r7, #4]
    7d4e:	601a      	str	r2, [r3, #0]
						break;
    7d50:	e044      	b.n	7ddc <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7d52:	68bb      	ldr	r3, [r7, #8]
    7d54:	3304      	adds	r3, #4
    7d56:	0018      	movs	r0, r3
    7d58:	4b3a      	ldr	r3, [pc, #232]	; (7e44 <xTaskIncrementTick+0x1c8>)
    7d5a:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    7d5c:	68bb      	ldr	r3, [r7, #8]
    7d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7d60:	2b00      	cmp	r3, #0
    7d62:	d004      	beq.n	7d6e <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7d64:	68bb      	ldr	r3, [r7, #8]
    7d66:	3318      	adds	r3, #24
    7d68:	0018      	movs	r0, r3
    7d6a:	4b36      	ldr	r3, [pc, #216]	; (7e44 <xTaskIncrementTick+0x1c8>)
    7d6c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    7d6e:	68bb      	ldr	r3, [r7, #8]
    7d70:	0018      	movs	r0, r3
    7d72:	4b35      	ldr	r3, [pc, #212]	; (7e48 <xTaskIncrementTick+0x1cc>)
    7d74:	4798      	blx	r3
    7d76:	0003      	movs	r3, r0
    7d78:	001a      	movs	r2, r3
    7d7a:	4b34      	ldr	r3, [pc, #208]	; (7e4c <xTaskIncrementTick+0x1d0>)
    7d7c:	881b      	ldrh	r3, [r3, #0]
    7d7e:	4013      	ands	r3, r2
    7d80:	b29b      	uxth	r3, r3
    7d82:	2b00      	cmp	r3, #0
    7d84:	d008      	beq.n	7d98 <xTaskIncrementTick+0x11c>
    7d86:	68bb      	ldr	r3, [r7, #8]
    7d88:	0018      	movs	r0, r3
    7d8a:	4b31      	ldr	r3, [pc, #196]	; (7e50 <xTaskIncrementTick+0x1d4>)
    7d8c:	4798      	blx	r3
    7d8e:	0003      	movs	r3, r0
    7d90:	b2db      	uxtb	r3, r3
    7d92:	0018      	movs	r0, r3
    7d94:	4b2f      	ldr	r3, [pc, #188]	; (7e54 <xTaskIncrementTick+0x1d8>)
    7d96:	4798      	blx	r3
    7d98:	68bb      	ldr	r3, [r7, #8]
    7d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d9c:	4b2e      	ldr	r3, [pc, #184]	; (7e58 <xTaskIncrementTick+0x1dc>)
    7d9e:	681b      	ldr	r3, [r3, #0]
    7da0:	429a      	cmp	r2, r3
    7da2:	d903      	bls.n	7dac <xTaskIncrementTick+0x130>
    7da4:	68bb      	ldr	r3, [r7, #8]
    7da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7da8:	4b2b      	ldr	r3, [pc, #172]	; (7e58 <xTaskIncrementTick+0x1dc>)
    7daa:	601a      	str	r2, [r3, #0]
    7dac:	68bb      	ldr	r3, [r7, #8]
    7dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7db0:	0013      	movs	r3, r2
    7db2:	009b      	lsls	r3, r3, #2
    7db4:	189b      	adds	r3, r3, r2
    7db6:	009b      	lsls	r3, r3, #2
    7db8:	4a28      	ldr	r2, [pc, #160]	; (7e5c <xTaskIncrementTick+0x1e0>)
    7dba:	189a      	adds	r2, r3, r2
    7dbc:	68bb      	ldr	r3, [r7, #8]
    7dbe:	3304      	adds	r3, #4
    7dc0:	0019      	movs	r1, r3
    7dc2:	0010      	movs	r0, r2
    7dc4:	4b26      	ldr	r3, [pc, #152]	; (7e60 <xTaskIncrementTick+0x1e4>)
    7dc6:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7dc8:	68bb      	ldr	r3, [r7, #8]
    7dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7dcc:	4b25      	ldr	r3, [pc, #148]	; (7e64 <xTaskIncrementTick+0x1e8>)
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7dd2:	429a      	cmp	r2, r3
    7dd4:	d39e      	bcc.n	7d14 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
    7dd6:	2301      	movs	r3, #1
    7dd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    7dda:	e79b      	b.n	7d14 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    7ddc:	4b21      	ldr	r3, [pc, #132]	; (7e64 <xTaskIncrementTick+0x1e8>)
    7dde:	681b      	ldr	r3, [r3, #0]
    7de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7de2:	491e      	ldr	r1, [pc, #120]	; (7e5c <xTaskIncrementTick+0x1e0>)
    7de4:	0013      	movs	r3, r2
    7de6:	009b      	lsls	r3, r3, #2
    7de8:	189b      	adds	r3, r3, r2
    7dea:	009b      	lsls	r3, r3, #2
    7dec:	585b      	ldr	r3, [r3, r1]
    7dee:	2b01      	cmp	r3, #1
    7df0:	d907      	bls.n	7e02 <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
    7df2:	2301      	movs	r3, #1
    7df4:	617b      	str	r3, [r7, #20]
    7df6:	e004      	b.n	7e02 <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    7df8:	4b08      	ldr	r3, [pc, #32]	; (7e1c <xTaskIncrementTick+0x1a0>)
    7dfa:	681b      	ldr	r3, [r3, #0]
    7dfc:	1c5a      	adds	r2, r3, #1
    7dfe:	4b07      	ldr	r3, [pc, #28]	; (7e1c <xTaskIncrementTick+0x1a0>)
    7e00:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    7e02:	4b19      	ldr	r3, [pc, #100]	; (7e68 <xTaskIncrementTick+0x1ec>)
    7e04:	681b      	ldr	r3, [r3, #0]
    7e06:	2b00      	cmp	r3, #0
    7e08:	d001      	beq.n	7e0e <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
    7e0a:	2301      	movs	r3, #1
    7e0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    7e0e:	697b      	ldr	r3, [r7, #20]
}
    7e10:	0018      	movs	r0, r3
    7e12:	46bd      	mov	sp, r7
    7e14:	b006      	add	sp, #24
    7e16:	bd80      	pop	{r7, pc}
    7e18:	200037e0 	.word	0x200037e0
    7e1c:	200037c8 	.word	0x200037c8
    7e20:	20000340 	.word	0x20000340
    7e24:	000054b1 	.word	0x000054b1
    7e28:	200037bc 	.word	0x200037bc
    7e2c:	00004525 	.word	0x00004525
    7e30:	20003770 	.word	0x20003770
    7e34:	20003774 	.word	0x20003774
    7e38:	200037d0 	.word	0x200037d0
    7e3c:	00008429 	.word	0x00008429
    7e40:	200037d8 	.word	0x200037d8
    7e44:	00005697 	.word	0x00005697
    7e48:	000039d5 	.word	0x000039d5
    7e4c:	20000024 	.word	0x20000024
    7e50:	000039b5 	.word	0x000039b5
    7e54:	00003fd5 	.word	0x00003fd5
    7e58:	200037c0 	.word	0x200037c0
    7e5c:	200036e4 	.word	0x200036e4
    7e60:	000055e7 	.word	0x000055e7
    7e64:	200036e0 	.word	0x200036e0
    7e68:	200037cc 	.word	0x200037cc

00007e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    7e6c:	b580      	push	{r7, lr}
    7e6e:	b082      	sub	sp, #8
    7e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    7e72:	4b3a      	ldr	r3, [pc, #232]	; (7f5c <vTaskSwitchContext+0xf0>)
    7e74:	681b      	ldr	r3, [r3, #0]
    7e76:	2b00      	cmp	r3, #0
    7e78:	d003      	beq.n	7e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    7e7a:	4b39      	ldr	r3, [pc, #228]	; (7f60 <vTaskSwitchContext+0xf4>)
    7e7c:	2201      	movs	r2, #1
    7e7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    7e80:	e067      	b.n	7f52 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
    7e82:	4b37      	ldr	r3, [pc, #220]	; (7f60 <vTaskSwitchContext+0xf4>)
    7e84:	2200      	movs	r2, #0
    7e86:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    7e88:	4b36      	ldr	r3, [pc, #216]	; (7f64 <vTaskSwitchContext+0xf8>)
    7e8a:	681b      	ldr	r3, [r3, #0]
    7e8c:	681a      	ldr	r2, [r3, #0]
    7e8e:	4b35      	ldr	r3, [pc, #212]	; (7f64 <vTaskSwitchContext+0xf8>)
    7e90:	681b      	ldr	r3, [r3, #0]
    7e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7e94:	429a      	cmp	r2, r3
    7e96:	d808      	bhi.n	7eaa <vTaskSwitchContext+0x3e>
    7e98:	4b32      	ldr	r3, [pc, #200]	; (7f64 <vTaskSwitchContext+0xf8>)
    7e9a:	681a      	ldr	r2, [r3, #0]
    7e9c:	4b31      	ldr	r3, [pc, #196]	; (7f64 <vTaskSwitchContext+0xf8>)
    7e9e:	681b      	ldr	r3, [r3, #0]
    7ea0:	3334      	adds	r3, #52	; 0x34
    7ea2:	0019      	movs	r1, r3
    7ea4:	0010      	movs	r0, r2
    7ea6:	4b30      	ldr	r3, [pc, #192]	; (7f68 <vTaskSwitchContext+0xfc>)
    7ea8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7eaa:	4b30      	ldr	r3, [pc, #192]	; (7f6c <vTaskSwitchContext+0x100>)
    7eac:	681b      	ldr	r3, [r3, #0]
    7eae:	607b      	str	r3, [r7, #4]
    7eb0:	e007      	b.n	7ec2 <vTaskSwitchContext+0x56>
    7eb2:	687b      	ldr	r3, [r7, #4]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d101      	bne.n	7ebc <vTaskSwitchContext+0x50>
    7eb8:	b672      	cpsid	i
    7eba:	e7fe      	b.n	7eba <vTaskSwitchContext+0x4e>
    7ebc:	687b      	ldr	r3, [r7, #4]
    7ebe:	3b01      	subs	r3, #1
    7ec0:	607b      	str	r3, [r7, #4]
    7ec2:	492b      	ldr	r1, [pc, #172]	; (7f70 <vTaskSwitchContext+0x104>)
    7ec4:	687a      	ldr	r2, [r7, #4]
    7ec6:	0013      	movs	r3, r2
    7ec8:	009b      	lsls	r3, r3, #2
    7eca:	189b      	adds	r3, r3, r2
    7ecc:	009b      	lsls	r3, r3, #2
    7ece:	585b      	ldr	r3, [r3, r1]
    7ed0:	2b00      	cmp	r3, #0
    7ed2:	d0ee      	beq.n	7eb2 <vTaskSwitchContext+0x46>
    7ed4:	687a      	ldr	r2, [r7, #4]
    7ed6:	0013      	movs	r3, r2
    7ed8:	009b      	lsls	r3, r3, #2
    7eda:	189b      	adds	r3, r3, r2
    7edc:	009b      	lsls	r3, r3, #2
    7ede:	4a24      	ldr	r2, [pc, #144]	; (7f70 <vTaskSwitchContext+0x104>)
    7ee0:	189b      	adds	r3, r3, r2
    7ee2:	603b      	str	r3, [r7, #0]
    7ee4:	683b      	ldr	r3, [r7, #0]
    7ee6:	685b      	ldr	r3, [r3, #4]
    7ee8:	685a      	ldr	r2, [r3, #4]
    7eea:	683b      	ldr	r3, [r7, #0]
    7eec:	605a      	str	r2, [r3, #4]
    7eee:	683b      	ldr	r3, [r7, #0]
    7ef0:	685a      	ldr	r2, [r3, #4]
    7ef2:	683b      	ldr	r3, [r7, #0]
    7ef4:	3308      	adds	r3, #8
    7ef6:	429a      	cmp	r2, r3
    7ef8:	d104      	bne.n	7f04 <vTaskSwitchContext+0x98>
    7efa:	683b      	ldr	r3, [r7, #0]
    7efc:	685b      	ldr	r3, [r3, #4]
    7efe:	685a      	ldr	r2, [r3, #4]
    7f00:	683b      	ldr	r3, [r7, #0]
    7f02:	605a      	str	r2, [r3, #4]
    7f04:	683b      	ldr	r3, [r7, #0]
    7f06:	685b      	ldr	r3, [r3, #4]
    7f08:	68da      	ldr	r2, [r3, #12]
    7f0a:	4b16      	ldr	r3, [pc, #88]	; (7f64 <vTaskSwitchContext+0xf8>)
    7f0c:	601a      	str	r2, [r3, #0]
    7f0e:	4b17      	ldr	r3, [pc, #92]	; (7f6c <vTaskSwitchContext+0x100>)
    7f10:	687a      	ldr	r2, [r7, #4]
    7f12:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
    7f14:	4b17      	ldr	r3, [pc, #92]	; (7f74 <vTaskSwitchContext+0x108>)
    7f16:	2201      	movs	r2, #1
    7f18:	601a      	str	r2, [r3, #0]
    7f1a:	4b17      	ldr	r3, [pc, #92]	; (7f78 <vTaskSwitchContext+0x10c>)
    7f1c:	4798      	blx	r3
    7f1e:	0003      	movs	r3, r0
    7f20:	0018      	movs	r0, r3
    7f22:	4b16      	ldr	r3, [pc, #88]	; (7f7c <vTaskSwitchContext+0x110>)
    7f24:	4798      	blx	r3
    7f26:	0003      	movs	r3, r0
    7f28:	001a      	movs	r2, r3
    7f2a:	4b15      	ldr	r3, [pc, #84]	; (7f80 <vTaskSwitchContext+0x114>)
    7f2c:	881b      	ldrh	r3, [r3, #0]
    7f2e:	4013      	ands	r3, r2
    7f30:	b29b      	uxth	r3, r3
    7f32:	2b00      	cmp	r3, #0
    7f34:	d00a      	beq.n	7f4c <vTaskSwitchContext+0xe0>
    7f36:	4b10      	ldr	r3, [pc, #64]	; (7f78 <vTaskSwitchContext+0x10c>)
    7f38:	4798      	blx	r3
    7f3a:	0003      	movs	r3, r0
    7f3c:	0018      	movs	r0, r3
    7f3e:	4b11      	ldr	r3, [pc, #68]	; (7f84 <vTaskSwitchContext+0x118>)
    7f40:	4798      	blx	r3
    7f42:	0003      	movs	r3, r0
    7f44:	b2db      	uxtb	r3, r3
    7f46:	0018      	movs	r0, r3
    7f48:	4b0f      	ldr	r3, [pc, #60]	; (7f88 <vTaskSwitchContext+0x11c>)
    7f4a:	4798      	blx	r3
    7f4c:	4b09      	ldr	r3, [pc, #36]	; (7f74 <vTaskSwitchContext+0x108>)
    7f4e:	2202      	movs	r2, #2
    7f50:	601a      	str	r2, [r3, #0]
}
    7f52:	46c0      	nop			; (mov r8, r8)
    7f54:	46bd      	mov	sp, r7
    7f56:	b002      	add	sp, #8
    7f58:	bd80      	pop	{r7, pc}
    7f5a:	46c0      	nop			; (mov r8, r8)
    7f5c:	200037e0 	.word	0x200037e0
    7f60:	200037cc 	.word	0x200037cc
    7f64:	200036e0 	.word	0x200036e0
    7f68:	0000c3ed 	.word	0x0000c3ed
    7f6c:	200037c0 	.word	0x200037c0
    7f70:	200036e4 	.word	0x200036e4
    7f74:	2000034c 	.word	0x2000034c
    7f78:	00003b35 	.word	0x00003b35
    7f7c:	000039d5 	.word	0x000039d5
    7f80:	20000024 	.word	0x20000024
    7f84:	000039b5 	.word	0x000039b5
    7f88:	00004621 	.word	0x00004621

00007f8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b082      	sub	sp, #8
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
    7f94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    7f96:	687b      	ldr	r3, [r7, #4]
    7f98:	2b00      	cmp	r3, #0
    7f9a:	d101      	bne.n	7fa0 <vTaskPlaceOnEventList+0x14>
    7f9c:	b672      	cpsid	i
    7f9e:	e7fe      	b.n	7f9e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    7fa0:	4b08      	ldr	r3, [pc, #32]	; (7fc4 <vTaskPlaceOnEventList+0x38>)
    7fa2:	681b      	ldr	r3, [r3, #0]
    7fa4:	3318      	adds	r3, #24
    7fa6:	001a      	movs	r2, r3
    7fa8:	687b      	ldr	r3, [r7, #4]
    7faa:	0011      	movs	r1, r2
    7fac:	0018      	movs	r0, r3
    7fae:	4b06      	ldr	r3, [pc, #24]	; (7fc8 <vTaskPlaceOnEventList+0x3c>)
    7fb0:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    7fb2:	683b      	ldr	r3, [r7, #0]
    7fb4:	2101      	movs	r1, #1
    7fb6:	0018      	movs	r0, r3
    7fb8:	4b04      	ldr	r3, [pc, #16]	; (7fcc <vTaskPlaceOnEventList+0x40>)
    7fba:	4798      	blx	r3
}
    7fbc:	46c0      	nop			; (mov r8, r8)
    7fbe:	46bd      	mov	sp, r7
    7fc0:	b002      	add	sp, #8
    7fc2:	bd80      	pop	{r7, pc}
    7fc4:	200036e0 	.word	0x200036e0
    7fc8:	0000562b 	.word	0x0000562b
    7fcc:	0000897d 	.word	0x0000897d

00007fd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    7fd0:	b580      	push	{r7, lr}
    7fd2:	b084      	sub	sp, #16
    7fd4:	af00      	add	r7, sp, #0
    7fd6:	60f8      	str	r0, [r7, #12]
    7fd8:	60b9      	str	r1, [r7, #8]
    7fda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    7fdc:	68fb      	ldr	r3, [r7, #12]
    7fde:	2b00      	cmp	r3, #0
    7fe0:	d101      	bne.n	7fe6 <vTaskPlaceOnEventListRestricted+0x16>
    7fe2:	b672      	cpsid	i
    7fe4:	e7fe      	b.n	7fe4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    7fe6:	4b28      	ldr	r3, [pc, #160]	; (8088 <vTaskPlaceOnEventListRestricted+0xb8>)
    7fe8:	681b      	ldr	r3, [r3, #0]
    7fea:	3318      	adds	r3, #24
    7fec:	001a      	movs	r2, r3
    7fee:	68fb      	ldr	r3, [r7, #12]
    7ff0:	0011      	movs	r1, r2
    7ff2:	0018      	movs	r0, r3
    7ff4:	4b25      	ldr	r3, [pc, #148]	; (808c <vTaskPlaceOnEventListRestricted+0xbc>)
    7ff6:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    7ff8:	687b      	ldr	r3, [r7, #4]
    7ffa:	2b00      	cmp	r3, #0
    7ffc:	d002      	beq.n	8004 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    7ffe:	2301      	movs	r3, #1
    8000:	425b      	negs	r3, r3
    8002:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    8004:	4b20      	ldr	r3, [pc, #128]	; (8088 <vTaskPlaceOnEventListRestricted+0xb8>)
    8006:	681b      	ldr	r3, [r3, #0]
    8008:	0018      	movs	r0, r3
    800a:	4b21      	ldr	r3, [pc, #132]	; (8090 <vTaskPlaceOnEventListRestricted+0xc0>)
    800c:	4798      	blx	r3
    800e:	0003      	movs	r3, r0
    8010:	001a      	movs	r2, r3
    8012:	4b20      	ldr	r3, [pc, #128]	; (8094 <vTaskPlaceOnEventListRestricted+0xc4>)
    8014:	881b      	ldrh	r3, [r3, #0]
    8016:	4013      	ands	r3, r2
    8018:	b29b      	uxth	r3, r3
    801a:	2b00      	cmp	r3, #0
    801c:	d011      	beq.n	8042 <vTaskPlaceOnEventListRestricted+0x72>
    801e:	4b1e      	ldr	r3, [pc, #120]	; (8098 <vTaskPlaceOnEventListRestricted+0xc8>)
    8020:	681a      	ldr	r2, [r3, #0]
    8022:	68bb      	ldr	r3, [r7, #8]
    8024:	18d3      	adds	r3, r2, r3
    8026:	0019      	movs	r1, r3
    8028:	2088      	movs	r0, #136	; 0x88
    802a:	4b1c      	ldr	r3, [pc, #112]	; (809c <vTaskPlaceOnEventListRestricted+0xcc>)
    802c:	4798      	blx	r3
    802e:	4b16      	ldr	r3, [pc, #88]	; (8088 <vTaskPlaceOnEventListRestricted+0xb8>)
    8030:	681b      	ldr	r3, [r3, #0]
    8032:	0018      	movs	r0, r3
    8034:	4b1a      	ldr	r3, [pc, #104]	; (80a0 <vTaskPlaceOnEventListRestricted+0xd0>)
    8036:	4798      	blx	r3
    8038:	0003      	movs	r3, r0
    803a:	b2db      	uxtb	r3, r3
    803c:	0018      	movs	r0, r3
    803e:	4b19      	ldr	r3, [pc, #100]	; (80a4 <vTaskPlaceOnEventListRestricted+0xd4>)
    8040:	4798      	blx	r3
    8042:	4b19      	ldr	r3, [pc, #100]	; (80a8 <vTaskPlaceOnEventListRestricted+0xd8>)
    8044:	4798      	blx	r3
    8046:	0003      	movs	r3, r0
    8048:	0018      	movs	r0, r3
    804a:	4b11      	ldr	r3, [pc, #68]	; (8090 <vTaskPlaceOnEventListRestricted+0xc0>)
    804c:	4798      	blx	r3
    804e:	0003      	movs	r3, r0
    8050:	001a      	movs	r2, r3
    8052:	4b10      	ldr	r3, [pc, #64]	; (8094 <vTaskPlaceOnEventListRestricted+0xc4>)
    8054:	881b      	ldrh	r3, [r3, #0]
    8056:	4013      	ands	r3, r2
    8058:	b29b      	uxth	r3, r3
    805a:	2b00      	cmp	r3, #0
    805c:	d00a      	beq.n	8074 <vTaskPlaceOnEventListRestricted+0xa4>
    805e:	4b12      	ldr	r3, [pc, #72]	; (80a8 <vTaskPlaceOnEventListRestricted+0xd8>)
    8060:	4798      	blx	r3
    8062:	0003      	movs	r3, r0
    8064:	0018      	movs	r0, r3
    8066:	4b0e      	ldr	r3, [pc, #56]	; (80a0 <vTaskPlaceOnEventListRestricted+0xd0>)
    8068:	4798      	blx	r3
    806a:	0003      	movs	r3, r0
    806c:	b2db      	uxtb	r3, r3
    806e:	0018      	movs	r0, r3
    8070:	4b0c      	ldr	r3, [pc, #48]	; (80a4 <vTaskPlaceOnEventListRestricted+0xd4>)
    8072:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    8074:	687a      	ldr	r2, [r7, #4]
    8076:	68bb      	ldr	r3, [r7, #8]
    8078:	0011      	movs	r1, r2
    807a:	0018      	movs	r0, r3
    807c:	4b0b      	ldr	r3, [pc, #44]	; (80ac <vTaskPlaceOnEventListRestricted+0xdc>)
    807e:	4798      	blx	r3
	}
    8080:	46c0      	nop			; (mov r8, r8)
    8082:	46bd      	mov	sp, r7
    8084:	b004      	add	sp, #16
    8086:	bd80      	pop	{r7, pc}
    8088:	200036e0 	.word	0x200036e0
    808c:	000055e7 	.word	0x000055e7
    8090:	000039d5 	.word	0x000039d5
    8094:	20000024 	.word	0x20000024
    8098:	200037bc 	.word	0x200037bc
    809c:	00004525 	.word	0x00004525
    80a0:	000039b5 	.word	0x000039b5
    80a4:	000049b5 	.word	0x000049b5
    80a8:	00003b35 	.word	0x00003b35
    80ac:	0000897d 	.word	0x0000897d

000080b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    80b0:	b580      	push	{r7, lr}
    80b2:	b084      	sub	sp, #16
    80b4:	af00      	add	r7, sp, #0
    80b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    80b8:	687b      	ldr	r3, [r7, #4]
    80ba:	68db      	ldr	r3, [r3, #12]
    80bc:	68db      	ldr	r3, [r3, #12]
    80be:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    80c0:	68bb      	ldr	r3, [r7, #8]
    80c2:	2b00      	cmp	r3, #0
    80c4:	d101      	bne.n	80ca <xTaskRemoveFromEventList+0x1a>
    80c6:	b672      	cpsid	i
    80c8:	e7fe      	b.n	80c8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    80ca:	68bb      	ldr	r3, [r7, #8]
    80cc:	3318      	adds	r3, #24
    80ce:	0018      	movs	r0, r3
    80d0:	4b2a      	ldr	r3, [pc, #168]	; (817c <xTaskRemoveFromEventList+0xcc>)
    80d2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    80d4:	4b2a      	ldr	r3, [pc, #168]	; (8180 <xTaskRemoveFromEventList+0xd0>)
    80d6:	681b      	ldr	r3, [r3, #0]
    80d8:	2b00      	cmp	r3, #0
    80da:	d132      	bne.n	8142 <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    80dc:	68bb      	ldr	r3, [r7, #8]
    80de:	3304      	adds	r3, #4
    80e0:	0018      	movs	r0, r3
    80e2:	4b26      	ldr	r3, [pc, #152]	; (817c <xTaskRemoveFromEventList+0xcc>)
    80e4:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    80e6:	68bb      	ldr	r3, [r7, #8]
    80e8:	0018      	movs	r0, r3
    80ea:	4b26      	ldr	r3, [pc, #152]	; (8184 <xTaskRemoveFromEventList+0xd4>)
    80ec:	4798      	blx	r3
    80ee:	0003      	movs	r3, r0
    80f0:	001a      	movs	r2, r3
    80f2:	4b25      	ldr	r3, [pc, #148]	; (8188 <xTaskRemoveFromEventList+0xd8>)
    80f4:	881b      	ldrh	r3, [r3, #0]
    80f6:	4013      	ands	r3, r2
    80f8:	b29b      	uxth	r3, r3
    80fa:	2b00      	cmp	r3, #0
    80fc:	d008      	beq.n	8110 <xTaskRemoveFromEventList+0x60>
    80fe:	68bb      	ldr	r3, [r7, #8]
    8100:	0018      	movs	r0, r3
    8102:	4b22      	ldr	r3, [pc, #136]	; (818c <xTaskRemoveFromEventList+0xdc>)
    8104:	4798      	blx	r3
    8106:	0003      	movs	r3, r0
    8108:	b2db      	uxtb	r3, r3
    810a:	0018      	movs	r0, r3
    810c:	4b20      	ldr	r3, [pc, #128]	; (8190 <xTaskRemoveFromEventList+0xe0>)
    810e:	4798      	blx	r3
    8110:	68bb      	ldr	r3, [r7, #8]
    8112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8114:	4b1f      	ldr	r3, [pc, #124]	; (8194 <xTaskRemoveFromEventList+0xe4>)
    8116:	681b      	ldr	r3, [r3, #0]
    8118:	429a      	cmp	r2, r3
    811a:	d903      	bls.n	8124 <xTaskRemoveFromEventList+0x74>
    811c:	68bb      	ldr	r3, [r7, #8]
    811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8120:	4b1c      	ldr	r3, [pc, #112]	; (8194 <xTaskRemoveFromEventList+0xe4>)
    8122:	601a      	str	r2, [r3, #0]
    8124:	68bb      	ldr	r3, [r7, #8]
    8126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8128:	0013      	movs	r3, r2
    812a:	009b      	lsls	r3, r3, #2
    812c:	189b      	adds	r3, r3, r2
    812e:	009b      	lsls	r3, r3, #2
    8130:	4a19      	ldr	r2, [pc, #100]	; (8198 <xTaskRemoveFromEventList+0xe8>)
    8132:	189a      	adds	r2, r3, r2
    8134:	68bb      	ldr	r3, [r7, #8]
    8136:	3304      	adds	r3, #4
    8138:	0019      	movs	r1, r3
    813a:	0010      	movs	r0, r2
    813c:	4b17      	ldr	r3, [pc, #92]	; (819c <xTaskRemoveFromEventList+0xec>)
    813e:	4798      	blx	r3
    8140:	e007      	b.n	8152 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    8142:	68bb      	ldr	r3, [r7, #8]
    8144:	3318      	adds	r3, #24
    8146:	001a      	movs	r2, r3
    8148:	4b15      	ldr	r3, [pc, #84]	; (81a0 <xTaskRemoveFromEventList+0xf0>)
    814a:	0011      	movs	r1, r2
    814c:	0018      	movs	r0, r3
    814e:	4b13      	ldr	r3, [pc, #76]	; (819c <xTaskRemoveFromEventList+0xec>)
    8150:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    8152:	68bb      	ldr	r3, [r7, #8]
    8154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8156:	4b13      	ldr	r3, [pc, #76]	; (81a4 <xTaskRemoveFromEventList+0xf4>)
    8158:	681b      	ldr	r3, [r3, #0]
    815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    815c:	429a      	cmp	r2, r3
    815e:	d905      	bls.n	816c <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    8160:	2301      	movs	r3, #1
    8162:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    8164:	4b10      	ldr	r3, [pc, #64]	; (81a8 <xTaskRemoveFromEventList+0xf8>)
    8166:	2201      	movs	r2, #1
    8168:	601a      	str	r2, [r3, #0]
    816a:	e001      	b.n	8170 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
    816c:	2300      	movs	r3, #0
    816e:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    8170:	68fb      	ldr	r3, [r7, #12]
}
    8172:	0018      	movs	r0, r3
    8174:	46bd      	mov	sp, r7
    8176:	b004      	add	sp, #16
    8178:	bd80      	pop	{r7, pc}
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	00005697 	.word	0x00005697
    8180:	200037e0 	.word	0x200037e0
    8184:	000039d5 	.word	0x000039d5
    8188:	20000024 	.word	0x20000024
    818c:	000039b5 	.word	0x000039b5
    8190:	00003fd5 	.word	0x00003fd5
    8194:	200037c0 	.word	0x200037c0
    8198:	200036e4 	.word	0x200036e4
    819c:	000055e7 	.word	0x000055e7
    81a0:	20003778 	.word	0x20003778
    81a4:	200036e0 	.word	0x200036e0
    81a8:	200037cc 	.word	0x200037cc

000081ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    81ac:	b580      	push	{r7, lr}
    81ae:	b082      	sub	sp, #8
    81b0:	af00      	add	r7, sp, #0
    81b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    81b4:	4b05      	ldr	r3, [pc, #20]	; (81cc <vTaskInternalSetTimeOutState+0x20>)
    81b6:	681a      	ldr	r2, [r3, #0]
    81b8:	687b      	ldr	r3, [r7, #4]
    81ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    81bc:	4b04      	ldr	r3, [pc, #16]	; (81d0 <vTaskInternalSetTimeOutState+0x24>)
    81be:	681a      	ldr	r2, [r3, #0]
    81c0:	687b      	ldr	r3, [r7, #4]
    81c2:	605a      	str	r2, [r3, #4]
}
    81c4:	46c0      	nop			; (mov r8, r8)
    81c6:	46bd      	mov	sp, r7
    81c8:	b002      	add	sp, #8
    81ca:	bd80      	pop	{r7, pc}
    81cc:	200037d0 	.word	0x200037d0
    81d0:	200037bc 	.word	0x200037bc

000081d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    81d4:	b580      	push	{r7, lr}
    81d6:	b086      	sub	sp, #24
    81d8:	af00      	add	r7, sp, #0
    81da:	6078      	str	r0, [r7, #4]
    81dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    81de:	687b      	ldr	r3, [r7, #4]
    81e0:	2b00      	cmp	r3, #0
    81e2:	d101      	bne.n	81e8 <xTaskCheckForTimeOut+0x14>
    81e4:	b672      	cpsid	i
    81e6:	e7fe      	b.n	81e6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    81e8:	683b      	ldr	r3, [r7, #0]
    81ea:	2b00      	cmp	r3, #0
    81ec:	d101      	bne.n	81f2 <xTaskCheckForTimeOut+0x1e>
    81ee:	b672      	cpsid	i
    81f0:	e7fe      	b.n	81f0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    81f2:	4b1e      	ldr	r3, [pc, #120]	; (826c <xTaskCheckForTimeOut+0x98>)
    81f4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    81f6:	4b1e      	ldr	r3, [pc, #120]	; (8270 <xTaskCheckForTimeOut+0x9c>)
    81f8:	681b      	ldr	r3, [r3, #0]
    81fa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    81fc:	687b      	ldr	r3, [r7, #4]
    81fe:	685b      	ldr	r3, [r3, #4]
    8200:	693a      	ldr	r2, [r7, #16]
    8202:	1ad3      	subs	r3, r2, r3
    8204:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    8206:	683b      	ldr	r3, [r7, #0]
    8208:	681b      	ldr	r3, [r3, #0]
    820a:	3301      	adds	r3, #1
    820c:	d102      	bne.n	8214 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    820e:	2300      	movs	r3, #0
    8210:	617b      	str	r3, [r7, #20]
    8212:	e024      	b.n	825e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    8214:	687b      	ldr	r3, [r7, #4]
    8216:	681a      	ldr	r2, [r3, #0]
    8218:	4b16      	ldr	r3, [pc, #88]	; (8274 <xTaskCheckForTimeOut+0xa0>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	429a      	cmp	r2, r3
    821e:	d007      	beq.n	8230 <xTaskCheckForTimeOut+0x5c>
    8220:	687b      	ldr	r3, [r7, #4]
    8222:	685a      	ldr	r2, [r3, #4]
    8224:	693b      	ldr	r3, [r7, #16]
    8226:	429a      	cmp	r2, r3
    8228:	d802      	bhi.n	8230 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    822a:	2301      	movs	r3, #1
    822c:	617b      	str	r3, [r7, #20]
    822e:	e016      	b.n	825e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    8230:	683b      	ldr	r3, [r7, #0]
    8232:	681a      	ldr	r2, [r3, #0]
    8234:	68fb      	ldr	r3, [r7, #12]
    8236:	429a      	cmp	r2, r3
    8238:	d90c      	bls.n	8254 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    823a:	683b      	ldr	r3, [r7, #0]
    823c:	681a      	ldr	r2, [r3, #0]
    823e:	68fb      	ldr	r3, [r7, #12]
    8240:	1ad2      	subs	r2, r2, r3
    8242:	683b      	ldr	r3, [r7, #0]
    8244:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    8246:	687b      	ldr	r3, [r7, #4]
    8248:	0018      	movs	r0, r3
    824a:	4b0b      	ldr	r3, [pc, #44]	; (8278 <xTaskCheckForTimeOut+0xa4>)
    824c:	4798      	blx	r3
			xReturn = pdFALSE;
    824e:	2300      	movs	r3, #0
    8250:	617b      	str	r3, [r7, #20]
    8252:	e004      	b.n	825e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
    8254:	683b      	ldr	r3, [r7, #0]
    8256:	2200      	movs	r2, #0
    8258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    825a:	2301      	movs	r3, #1
    825c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    825e:	4b07      	ldr	r3, [pc, #28]	; (827c <xTaskCheckForTimeOut+0xa8>)
    8260:	4798      	blx	r3

	return xReturn;
    8262:	697b      	ldr	r3, [r7, #20]
}
    8264:	0018      	movs	r0, r3
    8266:	46bd      	mov	sp, r7
    8268:	b006      	add	sp, #24
    826a:	bd80      	pop	{r7, pc}
    826c:	00005829 	.word	0x00005829
    8270:	200037bc 	.word	0x200037bc
    8274:	200037d0 	.word	0x200037d0
    8278:	000081ad 	.word	0x000081ad
    827c:	0000584d 	.word	0x0000584d

00008280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    8280:	b580      	push	{r7, lr}
    8282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    8284:	4b02      	ldr	r3, [pc, #8]	; (8290 <vTaskMissedYield+0x10>)
    8286:	2201      	movs	r2, #1
    8288:	601a      	str	r2, [r3, #0]
}
    828a:	46c0      	nop			; (mov r8, r8)
    828c:	46bd      	mov	sp, r7
    828e:	bd80      	pop	{r7, pc}
    8290:	200037cc 	.word	0x200037cc

00008294 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
    8294:	b580      	push	{r7, lr}
    8296:	b084      	sub	sp, #16
    8298:	af00      	add	r7, sp, #0
    829a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	2b00      	cmp	r3, #0
    82a0:	d005      	beq.n	82ae <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    82a2:	687b      	ldr	r3, [r7, #4]
    82a4:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    82a6:	68bb      	ldr	r3, [r7, #8]
    82a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    82aa:	60fb      	str	r3, [r7, #12]
    82ac:	e001      	b.n	82b2 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
    82ae:	2300      	movs	r3, #0
    82b0:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
    82b2:	68fb      	ldr	r3, [r7, #12]
	}
    82b4:	0018      	movs	r0, r3
    82b6:	46bd      	mov	sp, r7
    82b8:	b004      	add	sp, #16
    82ba:	bd80      	pop	{r7, pc}

000082bc <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
    82bc:	b580      	push	{r7, lr}
    82be:	b084      	sub	sp, #16
    82c0:	af00      	add	r7, sp, #0
    82c2:	6078      	str	r0, [r7, #4]
    82c4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
    82c6:	687b      	ldr	r3, [r7, #4]
    82c8:	2b00      	cmp	r3, #0
    82ca:	d004      	beq.n	82d6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    82cc:	687b      	ldr	r3, [r7, #4]
    82ce:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    82d0:	68fb      	ldr	r3, [r7, #12]
    82d2:	683a      	ldr	r2, [r7, #0]
    82d4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	46bd      	mov	sp, r7
    82da:	b004      	add	sp, #16
    82dc:	bd80      	pop	{r7, pc}
	...

000082e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    82e0:	b580      	push	{r7, lr}
    82e2:	b082      	sub	sp, #8
    82e4:	af00      	add	r7, sp, #0
    82e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    82e8:	4b04      	ldr	r3, [pc, #16]	; (82fc <prvIdleTask+0x1c>)
    82ea:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    82ec:	4b04      	ldr	r3, [pc, #16]	; (8300 <prvIdleTask+0x20>)
    82ee:	681b      	ldr	r3, [r3, #0]
    82f0:	2b01      	cmp	r3, #1
    82f2:	d9f9      	bls.n	82e8 <prvIdleTask+0x8>
			{
				taskYIELD();
    82f4:	4b03      	ldr	r3, [pc, #12]	; (8304 <prvIdleTask+0x24>)
    82f6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    82f8:	e7f6      	b.n	82e8 <prvIdleTask+0x8>
    82fa:	46c0      	nop			; (mov r8, r8)
    82fc:	00008395 	.word	0x00008395
    8300:	200036e4 	.word	0x200036e4
    8304:	00005811 	.word	0x00005811

00008308 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    8308:	b580      	push	{r7, lr}
    830a:	b082      	sub	sp, #8
    830c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    830e:	2300      	movs	r3, #0
    8310:	607b      	str	r3, [r7, #4]
    8312:	e00c      	b.n	832e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    8314:	687a      	ldr	r2, [r7, #4]
    8316:	0013      	movs	r3, r2
    8318:	009b      	lsls	r3, r3, #2
    831a:	189b      	adds	r3, r3, r2
    831c:	009b      	lsls	r3, r3, #2
    831e:	4a14      	ldr	r2, [pc, #80]	; (8370 <prvInitialiseTaskLists+0x68>)
    8320:	189b      	adds	r3, r3, r2
    8322:	0018      	movs	r0, r3
    8324:	4b13      	ldr	r3, [pc, #76]	; (8374 <prvInitialiseTaskLists+0x6c>)
    8326:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    8328:	687b      	ldr	r3, [r7, #4]
    832a:	3301      	adds	r3, #1
    832c:	607b      	str	r3, [r7, #4]
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	2b04      	cmp	r3, #4
    8332:	d9ef      	bls.n	8314 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    8334:	4b10      	ldr	r3, [pc, #64]	; (8378 <prvInitialiseTaskLists+0x70>)
    8336:	0018      	movs	r0, r3
    8338:	4b0e      	ldr	r3, [pc, #56]	; (8374 <prvInitialiseTaskLists+0x6c>)
    833a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    833c:	4b0f      	ldr	r3, [pc, #60]	; (837c <prvInitialiseTaskLists+0x74>)
    833e:	0018      	movs	r0, r3
    8340:	4b0c      	ldr	r3, [pc, #48]	; (8374 <prvInitialiseTaskLists+0x6c>)
    8342:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    8344:	4b0e      	ldr	r3, [pc, #56]	; (8380 <prvInitialiseTaskLists+0x78>)
    8346:	0018      	movs	r0, r3
    8348:	4b0a      	ldr	r3, [pc, #40]	; (8374 <prvInitialiseTaskLists+0x6c>)
    834a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    834c:	4b0d      	ldr	r3, [pc, #52]	; (8384 <prvInitialiseTaskLists+0x7c>)
    834e:	0018      	movs	r0, r3
    8350:	4b08      	ldr	r3, [pc, #32]	; (8374 <prvInitialiseTaskLists+0x6c>)
    8352:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    8354:	4b0c      	ldr	r3, [pc, #48]	; (8388 <prvInitialiseTaskLists+0x80>)
    8356:	0018      	movs	r0, r3
    8358:	4b06      	ldr	r3, [pc, #24]	; (8374 <prvInitialiseTaskLists+0x6c>)
    835a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    835c:	4b0b      	ldr	r3, [pc, #44]	; (838c <prvInitialiseTaskLists+0x84>)
    835e:	4a06      	ldr	r2, [pc, #24]	; (8378 <prvInitialiseTaskLists+0x70>)
    8360:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    8362:	4b0b      	ldr	r3, [pc, #44]	; (8390 <prvInitialiseTaskLists+0x88>)
    8364:	4a05      	ldr	r2, [pc, #20]	; (837c <prvInitialiseTaskLists+0x74>)
    8366:	601a      	str	r2, [r3, #0]
}
    8368:	46c0      	nop			; (mov r8, r8)
    836a:	46bd      	mov	sp, r7
    836c:	b002      	add	sp, #8
    836e:	bd80      	pop	{r7, pc}
    8370:	200036e4 	.word	0x200036e4
    8374:	00005595 	.word	0x00005595
    8378:	20003748 	.word	0x20003748
    837c:	2000375c 	.word	0x2000375c
    8380:	20003778 	.word	0x20003778
    8384:	2000378c 	.word	0x2000378c
    8388:	200037a4 	.word	0x200037a4
    838c:	20003770 	.word	0x20003770
    8390:	20003774 	.word	0x20003774

00008394 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    8394:	b580      	push	{r7, lr}
    8396:	b082      	sub	sp, #8
    8398:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    839a:	e01a      	b.n	83d2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
    839c:	4b11      	ldr	r3, [pc, #68]	; (83e4 <prvCheckTasksWaitingTermination+0x50>)
    839e:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    83a0:	4b11      	ldr	r3, [pc, #68]	; (83e8 <prvCheckTasksWaitingTermination+0x54>)
    83a2:	68db      	ldr	r3, [r3, #12]
    83a4:	68db      	ldr	r3, [r3, #12]
    83a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    83a8:	687b      	ldr	r3, [r7, #4]
    83aa:	3304      	adds	r3, #4
    83ac:	0018      	movs	r0, r3
    83ae:	4b0f      	ldr	r3, [pc, #60]	; (83ec <prvCheckTasksWaitingTermination+0x58>)
    83b0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    83b2:	4b0f      	ldr	r3, [pc, #60]	; (83f0 <prvCheckTasksWaitingTermination+0x5c>)
    83b4:	681b      	ldr	r3, [r3, #0]
    83b6:	1e5a      	subs	r2, r3, #1
    83b8:	4b0d      	ldr	r3, [pc, #52]	; (83f0 <prvCheckTasksWaitingTermination+0x5c>)
    83ba:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    83bc:	4b0d      	ldr	r3, [pc, #52]	; (83f4 <prvCheckTasksWaitingTermination+0x60>)
    83be:	681b      	ldr	r3, [r3, #0]
    83c0:	1e5a      	subs	r2, r3, #1
    83c2:	4b0c      	ldr	r3, [pc, #48]	; (83f4 <prvCheckTasksWaitingTermination+0x60>)
    83c4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    83c6:	4b0c      	ldr	r3, [pc, #48]	; (83f8 <prvCheckTasksWaitingTermination+0x64>)
    83c8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
    83ca:	687b      	ldr	r3, [r7, #4]
    83cc:	0018      	movs	r0, r3
    83ce:	4b0b      	ldr	r3, [pc, #44]	; (83fc <prvCheckTasksWaitingTermination+0x68>)
    83d0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    83d2:	4b08      	ldr	r3, [pc, #32]	; (83f4 <prvCheckTasksWaitingTermination+0x60>)
    83d4:	681b      	ldr	r3, [r3, #0]
    83d6:	2b00      	cmp	r3, #0
    83d8:	d1e0      	bne.n	839c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    83da:	46c0      	nop			; (mov r8, r8)
    83dc:	46bd      	mov	sp, r7
    83de:	b002      	add	sp, #8
    83e0:	bd80      	pop	{r7, pc}
    83e2:	46c0      	nop			; (mov r8, r8)
    83e4:	00005829 	.word	0x00005829
    83e8:	2000378c 	.word	0x2000378c
    83ec:	00005697 	.word	0x00005697
    83f0:	200037b8 	.word	0x200037b8
    83f4:	200037a0 	.word	0x200037a0
    83f8:	0000584d 	.word	0x0000584d
    83fc:	00008401 	.word	0x00008401

00008400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    8400:	b580      	push	{r7, lr}
    8402:	b082      	sub	sp, #8
    8404:	af00      	add	r7, sp, #0
    8406:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    8408:	687b      	ldr	r3, [r7, #4]
    840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    840c:	0018      	movs	r0, r3
    840e:	4b05      	ldr	r3, [pc, #20]	; (8424 <prvDeleteTCB+0x24>)
    8410:	4798      	blx	r3
			vPortFree( pxTCB );
    8412:	687b      	ldr	r3, [r7, #4]
    8414:	0018      	movs	r0, r3
    8416:	4b03      	ldr	r3, [pc, #12]	; (8424 <prvDeleteTCB+0x24>)
    8418:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    841a:	46c0      	nop			; (mov r8, r8)
    841c:	46bd      	mov	sp, r7
    841e:	b002      	add	sp, #8
    8420:	bd80      	pop	{r7, pc}
    8422:	46c0      	nop			; (mov r8, r8)
    8424:	00005a25 	.word	0x00005a25

00008428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    8428:	b580      	push	{r7, lr}
    842a:	b082      	sub	sp, #8
    842c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    842e:	4b0e      	ldr	r3, [pc, #56]	; (8468 <prvResetNextTaskUnblockTime+0x40>)
    8430:	681b      	ldr	r3, [r3, #0]
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	2b00      	cmp	r3, #0
    8436:	d101      	bne.n	843c <prvResetNextTaskUnblockTime+0x14>
    8438:	2301      	movs	r3, #1
    843a:	e000      	b.n	843e <prvResetNextTaskUnblockTime+0x16>
    843c:	2300      	movs	r3, #0
    843e:	2b00      	cmp	r3, #0
    8440:	d004      	beq.n	844c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    8442:	4b0a      	ldr	r3, [pc, #40]	; (846c <prvResetNextTaskUnblockTime+0x44>)
    8444:	2201      	movs	r2, #1
    8446:	4252      	negs	r2, r2
    8448:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    844a:	e008      	b.n	845e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    844c:	4b06      	ldr	r3, [pc, #24]	; (8468 <prvResetNextTaskUnblockTime+0x40>)
    844e:	681b      	ldr	r3, [r3, #0]
    8450:	68db      	ldr	r3, [r3, #12]
    8452:	68db      	ldr	r3, [r3, #12]
    8454:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    8456:	687b      	ldr	r3, [r7, #4]
    8458:	685a      	ldr	r2, [r3, #4]
    845a:	4b04      	ldr	r3, [pc, #16]	; (846c <prvResetNextTaskUnblockTime+0x44>)
    845c:	601a      	str	r2, [r3, #0]
}
    845e:	46c0      	nop			; (mov r8, r8)
    8460:	46bd      	mov	sp, r7
    8462:	b002      	add	sp, #8
    8464:	bd80      	pop	{r7, pc}
    8466:	46c0      	nop			; (mov r8, r8)
    8468:	20003770 	.word	0x20003770
    846c:	200037d8 	.word	0x200037d8

00008470 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    8470:	b580      	push	{r7, lr}
    8472:	b082      	sub	sp, #8
    8474:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    8476:	4b04      	ldr	r3, [pc, #16]	; (8488 <xTaskGetCurrentTaskHandle+0x18>)
    8478:	681b      	ldr	r3, [r3, #0]
    847a:	607b      	str	r3, [r7, #4]

		return xReturn;
    847c:	687b      	ldr	r3, [r7, #4]
	}
    847e:	0018      	movs	r0, r3
    8480:	46bd      	mov	sp, r7
    8482:	b002      	add	sp, #8
    8484:	bd80      	pop	{r7, pc}
    8486:	46c0      	nop			; (mov r8, r8)
    8488:	200036e0 	.word	0x200036e0

0000848c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    848c:	b580      	push	{r7, lr}
    848e:	b082      	sub	sp, #8
    8490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    8492:	4b0a      	ldr	r3, [pc, #40]	; (84bc <xTaskGetSchedulerState+0x30>)
    8494:	681b      	ldr	r3, [r3, #0]
    8496:	2b00      	cmp	r3, #0
    8498:	d102      	bne.n	84a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    849a:	2301      	movs	r3, #1
    849c:	607b      	str	r3, [r7, #4]
    849e:	e008      	b.n	84b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    84a0:	4b07      	ldr	r3, [pc, #28]	; (84c0 <xTaskGetSchedulerState+0x34>)
    84a2:	681b      	ldr	r3, [r3, #0]
    84a4:	2b00      	cmp	r3, #0
    84a6:	d102      	bne.n	84ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    84a8:	2302      	movs	r3, #2
    84aa:	607b      	str	r3, [r7, #4]
    84ac:	e001      	b.n	84b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    84ae:	2300      	movs	r3, #0
    84b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    84b2:	687b      	ldr	r3, [r7, #4]
	}
    84b4:	0018      	movs	r0, r3
    84b6:	46bd      	mov	sp, r7
    84b8:	b002      	add	sp, #8
    84ba:	bd80      	pop	{r7, pc}
    84bc:	200037c4 	.word	0x200037c4
    84c0:	200037e0 	.word	0x200037e0

000084c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    84c4:	b590      	push	{r4, r7, lr}
    84c6:	b085      	sub	sp, #20
    84c8:	af00      	add	r7, sp, #0
    84ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
    84cc:	687b      	ldr	r3, [r7, #4]
    84ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    84d0:	2300      	movs	r3, #0
    84d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
    84d4:	687b      	ldr	r3, [r7, #4]
    84d6:	2b00      	cmp	r3, #0
    84d8:	d100      	bne.n	84dc <xTaskPriorityInherit+0x18>
    84da:	e09d      	b.n	8618 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    84dc:	68bb      	ldr	r3, [r7, #8]
    84de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    84e0:	4b50      	ldr	r3, [pc, #320]	; (8624 <xTaskPriorityInherit+0x160>)
    84e2:	681b      	ldr	r3, [r3, #0]
    84e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    84e6:	429a      	cmp	r2, r3
    84e8:	d300      	bcc.n	84ec <xTaskPriorityInherit+0x28>
    84ea:	e08c      	b.n	8606 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    84ec:	68bb      	ldr	r3, [r7, #8]
    84ee:	699b      	ldr	r3, [r3, #24]
    84f0:	2b00      	cmp	r3, #0
    84f2:	db06      	blt.n	8502 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    84f4:	4b4b      	ldr	r3, [pc, #300]	; (8624 <xTaskPriorityInherit+0x160>)
    84f6:	681b      	ldr	r3, [r3, #0]
    84f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    84fa:	2205      	movs	r2, #5
    84fc:	1ad2      	subs	r2, r2, r3
    84fe:	68bb      	ldr	r3, [r7, #8]
    8500:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    8502:	68bb      	ldr	r3, [r7, #8]
    8504:	6959      	ldr	r1, [r3, #20]
    8506:	68bb      	ldr	r3, [r7, #8]
    8508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    850a:	0013      	movs	r3, r2
    850c:	009b      	lsls	r3, r3, #2
    850e:	189b      	adds	r3, r3, r2
    8510:	009b      	lsls	r3, r3, #2
    8512:	4a45      	ldr	r2, [pc, #276]	; (8628 <xTaskPriorityInherit+0x164>)
    8514:	189b      	adds	r3, r3, r2
    8516:	4299      	cmp	r1, r3
    8518:	d101      	bne.n	851e <xTaskPriorityInherit+0x5a>
    851a:	2301      	movs	r3, #1
    851c:	e000      	b.n	8520 <xTaskPriorityInherit+0x5c>
    851e:	2300      	movs	r3, #0
    8520:	2b00      	cmp	r3, #0
    8522:	d037      	beq.n	8594 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8524:	68bb      	ldr	r3, [r7, #8]
    8526:	3304      	adds	r3, #4
    8528:	0018      	movs	r0, r3
    852a:	4b40      	ldr	r3, [pc, #256]	; (862c <xTaskPriorityInherit+0x168>)
    852c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    852e:	4b3d      	ldr	r3, [pc, #244]	; (8624 <xTaskPriorityInherit+0x160>)
    8530:	681b      	ldr	r3, [r3, #0]
    8532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8534:	68bb      	ldr	r3, [r7, #8]
    8536:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    8538:	68bb      	ldr	r3, [r7, #8]
    853a:	0018      	movs	r0, r3
    853c:	4b3c      	ldr	r3, [pc, #240]	; (8630 <xTaskPriorityInherit+0x16c>)
    853e:	4798      	blx	r3
    8540:	0003      	movs	r3, r0
    8542:	001a      	movs	r2, r3
    8544:	4b3b      	ldr	r3, [pc, #236]	; (8634 <xTaskPriorityInherit+0x170>)
    8546:	881b      	ldrh	r3, [r3, #0]
    8548:	4013      	ands	r3, r2
    854a:	b29b      	uxth	r3, r3
    854c:	2b00      	cmp	r3, #0
    854e:	d008      	beq.n	8562 <xTaskPriorityInherit+0x9e>
    8550:	68bb      	ldr	r3, [r7, #8]
    8552:	0018      	movs	r0, r3
    8554:	4b38      	ldr	r3, [pc, #224]	; (8638 <xTaskPriorityInherit+0x174>)
    8556:	4798      	blx	r3
    8558:	0003      	movs	r3, r0
    855a:	b2db      	uxtb	r3, r3
    855c:	0018      	movs	r0, r3
    855e:	4b37      	ldr	r3, [pc, #220]	; (863c <xTaskPriorityInherit+0x178>)
    8560:	4798      	blx	r3
    8562:	68bb      	ldr	r3, [r7, #8]
    8564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8566:	4b36      	ldr	r3, [pc, #216]	; (8640 <xTaskPriorityInherit+0x17c>)
    8568:	681b      	ldr	r3, [r3, #0]
    856a:	429a      	cmp	r2, r3
    856c:	d903      	bls.n	8576 <xTaskPriorityInherit+0xb2>
    856e:	68bb      	ldr	r3, [r7, #8]
    8570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8572:	4b33      	ldr	r3, [pc, #204]	; (8640 <xTaskPriorityInherit+0x17c>)
    8574:	601a      	str	r2, [r3, #0]
    8576:	68bb      	ldr	r3, [r7, #8]
    8578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    857a:	0013      	movs	r3, r2
    857c:	009b      	lsls	r3, r3, #2
    857e:	189b      	adds	r3, r3, r2
    8580:	009b      	lsls	r3, r3, #2
    8582:	4a29      	ldr	r2, [pc, #164]	; (8628 <xTaskPriorityInherit+0x164>)
    8584:	189a      	adds	r2, r3, r2
    8586:	68bb      	ldr	r3, [r7, #8]
    8588:	3304      	adds	r3, #4
    858a:	0019      	movs	r1, r3
    858c:	0010      	movs	r0, r2
    858e:	4b2d      	ldr	r3, [pc, #180]	; (8644 <xTaskPriorityInherit+0x180>)
    8590:	4798      	blx	r3
    8592:	e004      	b.n	859e <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    8594:	4b23      	ldr	r3, [pc, #140]	; (8624 <xTaskPriorityInherit+0x160>)
    8596:	681b      	ldr	r3, [r3, #0]
    8598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    859a:	68bb      	ldr	r3, [r7, #8]
    859c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    859e:	68bb      	ldr	r3, [r7, #8]
    85a0:	0018      	movs	r0, r3
    85a2:	4b23      	ldr	r3, [pc, #140]	; (8630 <xTaskPriorityInherit+0x16c>)
    85a4:	4798      	blx	r3
    85a6:	0003      	movs	r3, r0
    85a8:	001a      	movs	r2, r3
    85aa:	4b22      	ldr	r3, [pc, #136]	; (8634 <xTaskPriorityInherit+0x170>)
    85ac:	881b      	ldrh	r3, [r3, #0]
    85ae:	4013      	ands	r3, r2
    85b0:	b29b      	uxth	r3, r3
    85b2:	2b00      	cmp	r3, #0
    85b4:	d024      	beq.n	8600 <xTaskPriorityInherit+0x13c>
    85b6:	68bb      	ldr	r3, [r7, #8]
    85b8:	0018      	movs	r0, r3
    85ba:	4b1f      	ldr	r3, [pc, #124]	; (8638 <xTaskPriorityInherit+0x174>)
    85bc:	4798      	blx	r3
    85be:	0003      	movs	r3, r0
    85c0:	b2db      	uxtb	r3, r3
    85c2:	001c      	movs	r4, r3
    85c4:	68bb      	ldr	r3, [r7, #8]
    85c6:	0018      	movs	r0, r3
    85c8:	4b1b      	ldr	r3, [pc, #108]	; (8638 <xTaskPriorityInherit+0x174>)
    85ca:	4798      	blx	r3
    85cc:	0003      	movs	r3, r0
    85ce:	b2db      	uxtb	r3, r3
    85d0:	0019      	movs	r1, r3
    85d2:	2003      	movs	r0, #3
    85d4:	4b1c      	ldr	r3, [pc, #112]	; (8648 <xTaskPriorityInherit+0x184>)
    85d6:	4798      	blx	r3
    85d8:	0003      	movs	r3, r0
    85da:	0022      	movs	r2, r4
    85dc:	2103      	movs	r1, #3
    85de:	208e      	movs	r0, #142	; 0x8e
    85e0:	4c1a      	ldr	r4, [pc, #104]	; (864c <xTaskPriorityInherit+0x188>)
    85e2:	47a0      	blx	r4
    85e4:	68bb      	ldr	r3, [r7, #8]
    85e6:	0018      	movs	r0, r3
    85e8:	4b13      	ldr	r3, [pc, #76]	; (8638 <xTaskPriorityInherit+0x174>)
    85ea:	4798      	blx	r3
    85ec:	0003      	movs	r3, r0
    85ee:	b2d9      	uxtb	r1, r3
    85f0:	4b0c      	ldr	r3, [pc, #48]	; (8624 <xTaskPriorityInherit+0x160>)
    85f2:	681b      	ldr	r3, [r3, #0]
    85f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    85f6:	b2db      	uxtb	r3, r3
    85f8:	001a      	movs	r2, r3
    85fa:	2003      	movs	r0, #3
    85fc:	4b14      	ldr	r3, [pc, #80]	; (8650 <xTaskPriorityInherit+0x18c>)
    85fe:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
    8600:	2301      	movs	r3, #1
    8602:	60fb      	str	r3, [r7, #12]
    8604:	e008      	b.n	8618 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    8606:	68bb      	ldr	r3, [r7, #8]
    8608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    860a:	4b06      	ldr	r3, [pc, #24]	; (8624 <xTaskPriorityInherit+0x160>)
    860c:	681b      	ldr	r3, [r3, #0]
    860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8610:	429a      	cmp	r2, r3
    8612:	d201      	bcs.n	8618 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
    8614:	2301      	movs	r3, #1
    8616:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8618:	68fb      	ldr	r3, [r7, #12]
	}
    861a:	0018      	movs	r0, r3
    861c:	46bd      	mov	sp, r7
    861e:	b005      	add	sp, #20
    8620:	bd90      	pop	{r4, r7, pc}
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	200036e0 	.word	0x200036e0
    8628:	200036e4 	.word	0x200036e4
    862c:	00005697 	.word	0x00005697
    8630:	000039d5 	.word	0x000039d5
    8634:	20000024 	.word	0x20000024
    8638:	000039b5 	.word	0x000039b5
    863c:	00003fd5 	.word	0x00003fd5
    8640:	200037c0 	.word	0x200037c0
    8644:	000055e7 	.word	0x000055e7
    8648:	000047dd 	.word	0x000047dd
    864c:	0000434d 	.word	0x0000434d
    8650:	00004739 	.word	0x00004739

00008654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    8654:	b590      	push	{r4, r7, lr}
    8656:	b085      	sub	sp, #20
    8658:	af00      	add	r7, sp, #0
    865a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    8660:	2300      	movs	r3, #0
    8662:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    8664:	687b      	ldr	r3, [r7, #4]
    8666:	2b00      	cmp	r3, #0
    8668:	d100      	bne.n	866c <xTaskPriorityDisinherit+0x18>
    866a:	e089      	b.n	8780 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    866c:	4b47      	ldr	r3, [pc, #284]	; (878c <xTaskPriorityDisinherit+0x138>)
    866e:	681b      	ldr	r3, [r3, #0]
    8670:	68ba      	ldr	r2, [r7, #8]
    8672:	429a      	cmp	r2, r3
    8674:	d001      	beq.n	867a <xTaskPriorityDisinherit+0x26>
    8676:	b672      	cpsid	i
    8678:	e7fe      	b.n	8678 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
    867a:	68bb      	ldr	r3, [r7, #8]
    867c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    867e:	2b00      	cmp	r3, #0
    8680:	d101      	bne.n	8686 <xTaskPriorityDisinherit+0x32>
    8682:	b672      	cpsid	i
    8684:	e7fe      	b.n	8684 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
    8686:	68bb      	ldr	r3, [r7, #8]
    8688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    868a:	1e5a      	subs	r2, r3, #1
    868c:	68bb      	ldr	r3, [r7, #8]
    868e:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    8690:	68bb      	ldr	r3, [r7, #8]
    8692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8694:	68bb      	ldr	r3, [r7, #8]
    8696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8698:	429a      	cmp	r2, r3
    869a:	d071      	beq.n	8780 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    869c:	68bb      	ldr	r3, [r7, #8]
    869e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    86a0:	2b00      	cmp	r3, #0
    86a2:	d16d      	bne.n	8780 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    86a4:	68bb      	ldr	r3, [r7, #8]
    86a6:	3304      	adds	r3, #4
    86a8:	0018      	movs	r0, r3
    86aa:	4b39      	ldr	r3, [pc, #228]	; (8790 <xTaskPriorityDisinherit+0x13c>)
    86ac:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    86ae:	68bb      	ldr	r3, [r7, #8]
    86b0:	0018      	movs	r0, r3
    86b2:	4b38      	ldr	r3, [pc, #224]	; (8794 <xTaskPriorityDisinherit+0x140>)
    86b4:	4798      	blx	r3
    86b6:	0003      	movs	r3, r0
    86b8:	001a      	movs	r2, r3
    86ba:	4b37      	ldr	r3, [pc, #220]	; (8798 <xTaskPriorityDisinherit+0x144>)
    86bc:	881b      	ldrh	r3, [r3, #0]
    86be:	4013      	ands	r3, r2
    86c0:	b29b      	uxth	r3, r3
    86c2:	2b00      	cmp	r3, #0
    86c4:	d023      	beq.n	870e <xTaskPriorityDisinherit+0xba>
    86c6:	68bb      	ldr	r3, [r7, #8]
    86c8:	0018      	movs	r0, r3
    86ca:	4b34      	ldr	r3, [pc, #208]	; (879c <xTaskPriorityDisinherit+0x148>)
    86cc:	4798      	blx	r3
    86ce:	0003      	movs	r3, r0
    86d0:	b2db      	uxtb	r3, r3
    86d2:	001c      	movs	r4, r3
    86d4:	68bb      	ldr	r3, [r7, #8]
    86d6:	0018      	movs	r0, r3
    86d8:	4b30      	ldr	r3, [pc, #192]	; (879c <xTaskPriorityDisinherit+0x148>)
    86da:	4798      	blx	r3
    86dc:	0003      	movs	r3, r0
    86de:	b2db      	uxtb	r3, r3
    86e0:	0019      	movs	r1, r3
    86e2:	2003      	movs	r0, #3
    86e4:	4b2e      	ldr	r3, [pc, #184]	; (87a0 <xTaskPriorityDisinherit+0x14c>)
    86e6:	4798      	blx	r3
    86e8:	0003      	movs	r3, r0
    86ea:	0022      	movs	r2, r4
    86ec:	2103      	movs	r1, #3
    86ee:	208f      	movs	r0, #143	; 0x8f
    86f0:	4c2c      	ldr	r4, [pc, #176]	; (87a4 <xTaskPriorityDisinherit+0x150>)
    86f2:	47a0      	blx	r4
    86f4:	68bb      	ldr	r3, [r7, #8]
    86f6:	0018      	movs	r0, r3
    86f8:	4b28      	ldr	r3, [pc, #160]	; (879c <xTaskPriorityDisinherit+0x148>)
    86fa:	4798      	blx	r3
    86fc:	0003      	movs	r3, r0
    86fe:	b2d9      	uxtb	r1, r3
    8700:	68bb      	ldr	r3, [r7, #8]
    8702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8704:	b2db      	uxtb	r3, r3
    8706:	001a      	movs	r2, r3
    8708:	2003      	movs	r0, #3
    870a:	4b27      	ldr	r3, [pc, #156]	; (87a8 <xTaskPriorityDisinherit+0x154>)
    870c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    870e:	68bb      	ldr	r3, [r7, #8]
    8710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    8712:	68bb      	ldr	r3, [r7, #8]
    8714:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8716:	68bb      	ldr	r3, [r7, #8]
    8718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    871a:	2205      	movs	r2, #5
    871c:	1ad2      	subs	r2, r2, r3
    871e:	68bb      	ldr	r3, [r7, #8]
    8720:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    8722:	68bb      	ldr	r3, [r7, #8]
    8724:	0018      	movs	r0, r3
    8726:	4b1b      	ldr	r3, [pc, #108]	; (8794 <xTaskPriorityDisinherit+0x140>)
    8728:	4798      	blx	r3
    872a:	0003      	movs	r3, r0
    872c:	001a      	movs	r2, r3
    872e:	4b1a      	ldr	r3, [pc, #104]	; (8798 <xTaskPriorityDisinherit+0x144>)
    8730:	881b      	ldrh	r3, [r3, #0]
    8732:	4013      	ands	r3, r2
    8734:	b29b      	uxth	r3, r3
    8736:	2b00      	cmp	r3, #0
    8738:	d008      	beq.n	874c <xTaskPriorityDisinherit+0xf8>
    873a:	68bb      	ldr	r3, [r7, #8]
    873c:	0018      	movs	r0, r3
    873e:	4b17      	ldr	r3, [pc, #92]	; (879c <xTaskPriorityDisinherit+0x148>)
    8740:	4798      	blx	r3
    8742:	0003      	movs	r3, r0
    8744:	b2db      	uxtb	r3, r3
    8746:	0018      	movs	r0, r3
    8748:	4b18      	ldr	r3, [pc, #96]	; (87ac <xTaskPriorityDisinherit+0x158>)
    874a:	4798      	blx	r3
    874c:	68bb      	ldr	r3, [r7, #8]
    874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8750:	4b17      	ldr	r3, [pc, #92]	; (87b0 <xTaskPriorityDisinherit+0x15c>)
    8752:	681b      	ldr	r3, [r3, #0]
    8754:	429a      	cmp	r2, r3
    8756:	d903      	bls.n	8760 <xTaskPriorityDisinherit+0x10c>
    8758:	68bb      	ldr	r3, [r7, #8]
    875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    875c:	4b14      	ldr	r3, [pc, #80]	; (87b0 <xTaskPriorityDisinherit+0x15c>)
    875e:	601a      	str	r2, [r3, #0]
    8760:	68bb      	ldr	r3, [r7, #8]
    8762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8764:	0013      	movs	r3, r2
    8766:	009b      	lsls	r3, r3, #2
    8768:	189b      	adds	r3, r3, r2
    876a:	009b      	lsls	r3, r3, #2
    876c:	4a11      	ldr	r2, [pc, #68]	; (87b4 <xTaskPriorityDisinherit+0x160>)
    876e:	189a      	adds	r2, r3, r2
    8770:	68bb      	ldr	r3, [r7, #8]
    8772:	3304      	adds	r3, #4
    8774:	0019      	movs	r1, r3
    8776:	0010      	movs	r0, r2
    8778:	4b0f      	ldr	r3, [pc, #60]	; (87b8 <xTaskPriorityDisinherit+0x164>)
    877a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    877c:	2301      	movs	r3, #1
    877e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8780:	68fb      	ldr	r3, [r7, #12]
	}
    8782:	0018      	movs	r0, r3
    8784:	46bd      	mov	sp, r7
    8786:	b005      	add	sp, #20
    8788:	bd90      	pop	{r4, r7, pc}
    878a:	46c0      	nop			; (mov r8, r8)
    878c:	200036e0 	.word	0x200036e0
    8790:	00005697 	.word	0x00005697
    8794:	000039d5 	.word	0x000039d5
    8798:	20000024 	.word	0x20000024
    879c:	000039b5 	.word	0x000039b5
    87a0:	000047dd 	.word	0x000047dd
    87a4:	0000434d 	.word	0x0000434d
    87a8:	00004739 	.word	0x00004739
    87ac:	00003fd5 	.word	0x00003fd5
    87b0:	200037c0 	.word	0x200037c0
    87b4:	200036e4 	.word	0x200036e4
    87b8:	000055e7 	.word	0x000055e7

000087bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
    87bc:	b590      	push	{r4, r7, lr}
    87be:	b087      	sub	sp, #28
    87c0:	af00      	add	r7, sp, #0
    87c2:	6078      	str	r0, [r7, #4]
    87c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    87c6:	687b      	ldr	r3, [r7, #4]
    87c8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    87ca:	2301      	movs	r3, #1
    87cc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	2b00      	cmp	r3, #0
    87d2:	d100      	bne.n	87d6 <vTaskPriorityDisinheritAfterTimeout+0x1a>
    87d4:	e0a4      	b.n	8920 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
    87d6:	693b      	ldr	r3, [r7, #16]
    87d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    87da:	2b00      	cmp	r3, #0
    87dc:	d101      	bne.n	87e2 <vTaskPriorityDisinheritAfterTimeout+0x26>
    87de:	b672      	cpsid	i
    87e0:	e7fe      	b.n	87e0 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    87e2:	693b      	ldr	r3, [r7, #16]
    87e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    87e6:	683b      	ldr	r3, [r7, #0]
    87e8:	429a      	cmp	r2, r3
    87ea:	d202      	bcs.n	87f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
    87ec:	683b      	ldr	r3, [r7, #0]
    87ee:	617b      	str	r3, [r7, #20]
    87f0:	e002      	b.n	87f8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
    87f2:	693b      	ldr	r3, [r7, #16]
    87f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    87f6:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
    87f8:	693b      	ldr	r3, [r7, #16]
    87fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    87fc:	697b      	ldr	r3, [r7, #20]
    87fe:	429a      	cmp	r2, r3
    8800:	d100      	bne.n	8804 <vTaskPriorityDisinheritAfterTimeout+0x48>
    8802:	e08d      	b.n	8920 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    8804:	693b      	ldr	r3, [r7, #16]
    8806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8808:	68fb      	ldr	r3, [r7, #12]
    880a:	429a      	cmp	r2, r3
    880c:	d000      	beq.n	8810 <vTaskPriorityDisinheritAfterTimeout+0x54>
    880e:	e087      	b.n	8920 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
    8810:	4b45      	ldr	r3, [pc, #276]	; (8928 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
    8812:	681b      	ldr	r3, [r3, #0]
    8814:	693a      	ldr	r2, [r7, #16]
    8816:	429a      	cmp	r2, r3
    8818:	d101      	bne.n	881e <vTaskPriorityDisinheritAfterTimeout+0x62>
    881a:	b672      	cpsid	i
    881c:	e7fe      	b.n	881c <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    881e:	693b      	ldr	r3, [r7, #16]
    8820:	0018      	movs	r0, r3
    8822:	4b42      	ldr	r3, [pc, #264]	; (892c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    8824:	4798      	blx	r3
    8826:	0003      	movs	r3, r0
    8828:	001a      	movs	r2, r3
    882a:	4b41      	ldr	r3, [pc, #260]	; (8930 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    882c:	881b      	ldrh	r3, [r3, #0]
    882e:	4013      	ands	r3, r2
    8830:	b29b      	uxth	r3, r3
    8832:	2b00      	cmp	r3, #0
    8834:	d023      	beq.n	887e <vTaskPriorityDisinheritAfterTimeout+0xc2>
    8836:	693b      	ldr	r3, [r7, #16]
    8838:	0018      	movs	r0, r3
    883a:	4b3e      	ldr	r3, [pc, #248]	; (8934 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    883c:	4798      	blx	r3
    883e:	0003      	movs	r3, r0
    8840:	b2db      	uxtb	r3, r3
    8842:	001c      	movs	r4, r3
    8844:	693b      	ldr	r3, [r7, #16]
    8846:	0018      	movs	r0, r3
    8848:	4b3a      	ldr	r3, [pc, #232]	; (8934 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    884a:	4798      	blx	r3
    884c:	0003      	movs	r3, r0
    884e:	b2db      	uxtb	r3, r3
    8850:	0019      	movs	r1, r3
    8852:	2003      	movs	r0, #3
    8854:	4b38      	ldr	r3, [pc, #224]	; (8938 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
    8856:	4798      	blx	r3
    8858:	0003      	movs	r3, r0
    885a:	0022      	movs	r2, r4
    885c:	2103      	movs	r1, #3
    885e:	208f      	movs	r0, #143	; 0x8f
    8860:	4c36      	ldr	r4, [pc, #216]	; (893c <vTaskPriorityDisinheritAfterTimeout+0x180>)
    8862:	47a0      	blx	r4
    8864:	693b      	ldr	r3, [r7, #16]
    8866:	0018      	movs	r0, r3
    8868:	4b32      	ldr	r3, [pc, #200]	; (8934 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    886a:	4798      	blx	r3
    886c:	0003      	movs	r3, r0
    886e:	b2d9      	uxtb	r1, r3
    8870:	693b      	ldr	r3, [r7, #16]
    8872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8874:	b2db      	uxtb	r3, r3
    8876:	001a      	movs	r2, r3
    8878:	2003      	movs	r0, #3
    887a:	4b31      	ldr	r3, [pc, #196]	; (8940 <vTaskPriorityDisinheritAfterTimeout+0x184>)
    887c:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    887e:	693b      	ldr	r3, [r7, #16]
    8880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8882:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
    8884:	693b      	ldr	r3, [r7, #16]
    8886:	697a      	ldr	r2, [r7, #20]
    8888:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    888a:	693b      	ldr	r3, [r7, #16]
    888c:	699b      	ldr	r3, [r3, #24]
    888e:	2b00      	cmp	r3, #0
    8890:	db04      	blt.n	889c <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8892:	697b      	ldr	r3, [r7, #20]
    8894:	2205      	movs	r2, #5
    8896:	1ad2      	subs	r2, r2, r3
    8898:	693b      	ldr	r3, [r7, #16]
    889a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    889c:	693b      	ldr	r3, [r7, #16]
    889e:	6959      	ldr	r1, [r3, #20]
    88a0:	68ba      	ldr	r2, [r7, #8]
    88a2:	0013      	movs	r3, r2
    88a4:	009b      	lsls	r3, r3, #2
    88a6:	189b      	adds	r3, r3, r2
    88a8:	009b      	lsls	r3, r3, #2
    88aa:	4a26      	ldr	r2, [pc, #152]	; (8944 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    88ac:	189b      	adds	r3, r3, r2
    88ae:	4299      	cmp	r1, r3
    88b0:	d101      	bne.n	88b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    88b2:	2301      	movs	r3, #1
    88b4:	e000      	b.n	88b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
    88b6:	2300      	movs	r3, #0
    88b8:	2b00      	cmp	r3, #0
    88ba:	d031      	beq.n	8920 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    88bc:	693b      	ldr	r3, [r7, #16]
    88be:	3304      	adds	r3, #4
    88c0:	0018      	movs	r0, r3
    88c2:	4b21      	ldr	r3, [pc, #132]	; (8948 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
    88c4:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
    88c6:	693b      	ldr	r3, [r7, #16]
    88c8:	0018      	movs	r0, r3
    88ca:	4b18      	ldr	r3, [pc, #96]	; (892c <vTaskPriorityDisinheritAfterTimeout+0x170>)
    88cc:	4798      	blx	r3
    88ce:	0003      	movs	r3, r0
    88d0:	001a      	movs	r2, r3
    88d2:	4b17      	ldr	r3, [pc, #92]	; (8930 <vTaskPriorityDisinheritAfterTimeout+0x174>)
    88d4:	881b      	ldrh	r3, [r3, #0]
    88d6:	4013      	ands	r3, r2
    88d8:	b29b      	uxth	r3, r3
    88da:	2b00      	cmp	r3, #0
    88dc:	d008      	beq.n	88f0 <vTaskPriorityDisinheritAfterTimeout+0x134>
    88de:	693b      	ldr	r3, [r7, #16]
    88e0:	0018      	movs	r0, r3
    88e2:	4b14      	ldr	r3, [pc, #80]	; (8934 <vTaskPriorityDisinheritAfterTimeout+0x178>)
    88e4:	4798      	blx	r3
    88e6:	0003      	movs	r3, r0
    88e8:	b2db      	uxtb	r3, r3
    88ea:	0018      	movs	r0, r3
    88ec:	4b17      	ldr	r3, [pc, #92]	; (894c <vTaskPriorityDisinheritAfterTimeout+0x190>)
    88ee:	4798      	blx	r3
    88f0:	693b      	ldr	r3, [r7, #16]
    88f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    88f4:	4b16      	ldr	r3, [pc, #88]	; (8950 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    88f6:	681b      	ldr	r3, [r3, #0]
    88f8:	429a      	cmp	r2, r3
    88fa:	d903      	bls.n	8904 <vTaskPriorityDisinheritAfterTimeout+0x148>
    88fc:	693b      	ldr	r3, [r7, #16]
    88fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8900:	4b13      	ldr	r3, [pc, #76]	; (8950 <vTaskPriorityDisinheritAfterTimeout+0x194>)
    8902:	601a      	str	r2, [r3, #0]
    8904:	693b      	ldr	r3, [r7, #16]
    8906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8908:	0013      	movs	r3, r2
    890a:	009b      	lsls	r3, r3, #2
    890c:	189b      	adds	r3, r3, r2
    890e:	009b      	lsls	r3, r3, #2
    8910:	4a0c      	ldr	r2, [pc, #48]	; (8944 <vTaskPriorityDisinheritAfterTimeout+0x188>)
    8912:	189a      	adds	r2, r3, r2
    8914:	693b      	ldr	r3, [r7, #16]
    8916:	3304      	adds	r3, #4
    8918:	0019      	movs	r1, r3
    891a:	0010      	movs	r0, r2
    891c:	4b0d      	ldr	r3, [pc, #52]	; (8954 <vTaskPriorityDisinheritAfterTimeout+0x198>)
    891e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8920:	46c0      	nop			; (mov r8, r8)
    8922:	46bd      	mov	sp, r7
    8924:	b007      	add	sp, #28
    8926:	bd90      	pop	{r4, r7, pc}
    8928:	200036e0 	.word	0x200036e0
    892c:	000039d5 	.word	0x000039d5
    8930:	20000024 	.word	0x20000024
    8934:	000039b5 	.word	0x000039b5
    8938:	000047dd 	.word	0x000047dd
    893c:	0000434d 	.word	0x0000434d
    8940:	00004739 	.word	0x00004739
    8944:	200036e4 	.word	0x200036e4
    8948:	00005697 	.word	0x00005697
    894c:	00003fd5 	.word	0x00003fd5
    8950:	200037c0 	.word	0x200037c0
    8954:	000055e7 	.word	0x000055e7

00008958 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    8958:	b580      	push	{r7, lr}
    895a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    895c:	4b06      	ldr	r3, [pc, #24]	; (8978 <pvTaskIncrementMutexHeldCount+0x20>)
    895e:	681b      	ldr	r3, [r3, #0]
    8960:	2b00      	cmp	r3, #0
    8962:	d004      	beq.n	896e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    8964:	4b04      	ldr	r3, [pc, #16]	; (8978 <pvTaskIncrementMutexHeldCount+0x20>)
    8966:	681b      	ldr	r3, [r3, #0]
    8968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    896a:	3201      	adds	r2, #1
    896c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
    896e:	4b02      	ldr	r3, [pc, #8]	; (8978 <pvTaskIncrementMutexHeldCount+0x20>)
    8970:	681b      	ldr	r3, [r3, #0]
	}
    8972:	0018      	movs	r0, r3
    8974:	46bd      	mov	sp, r7
    8976:	bd80      	pop	{r7, pc}
    8978:	200036e0 	.word	0x200036e0

0000897c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    897c:	b580      	push	{r7, lr}
    897e:	b084      	sub	sp, #16
    8980:	af00      	add	r7, sp, #0
    8982:	6078      	str	r0, [r7, #4]
    8984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    8986:	4b21      	ldr	r3, [pc, #132]	; (8a0c <prvAddCurrentTaskToDelayedList+0x90>)
    8988:	681b      	ldr	r3, [r3, #0]
    898a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    898c:	4b20      	ldr	r3, [pc, #128]	; (8a10 <prvAddCurrentTaskToDelayedList+0x94>)
    898e:	681b      	ldr	r3, [r3, #0]
    8990:	3304      	adds	r3, #4
    8992:	0018      	movs	r0, r3
    8994:	4b1f      	ldr	r3, [pc, #124]	; (8a14 <prvAddCurrentTaskToDelayedList+0x98>)
    8996:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    8998:	687b      	ldr	r3, [r7, #4]
    899a:	3301      	adds	r3, #1
    899c:	d10b      	bne.n	89b6 <prvAddCurrentTaskToDelayedList+0x3a>
    899e:	683b      	ldr	r3, [r7, #0]
    89a0:	2b00      	cmp	r3, #0
    89a2:	d008      	beq.n	89b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    89a4:	4b1a      	ldr	r3, [pc, #104]	; (8a10 <prvAddCurrentTaskToDelayedList+0x94>)
    89a6:	681b      	ldr	r3, [r3, #0]
    89a8:	1d1a      	adds	r2, r3, #4
    89aa:	4b1b      	ldr	r3, [pc, #108]	; (8a18 <prvAddCurrentTaskToDelayedList+0x9c>)
    89ac:	0011      	movs	r1, r2
    89ae:	0018      	movs	r0, r3
    89b0:	4b1a      	ldr	r3, [pc, #104]	; (8a1c <prvAddCurrentTaskToDelayedList+0xa0>)
    89b2:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    89b4:	e026      	b.n	8a04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    89b6:	68fa      	ldr	r2, [r7, #12]
    89b8:	687b      	ldr	r3, [r7, #4]
    89ba:	18d3      	adds	r3, r2, r3
    89bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    89be:	4b14      	ldr	r3, [pc, #80]	; (8a10 <prvAddCurrentTaskToDelayedList+0x94>)
    89c0:	681b      	ldr	r3, [r3, #0]
    89c2:	68ba      	ldr	r2, [r7, #8]
    89c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    89c6:	68ba      	ldr	r2, [r7, #8]
    89c8:	68fb      	ldr	r3, [r7, #12]
    89ca:	429a      	cmp	r2, r3
    89cc:	d209      	bcs.n	89e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    89ce:	4b14      	ldr	r3, [pc, #80]	; (8a20 <prvAddCurrentTaskToDelayedList+0xa4>)
    89d0:	681a      	ldr	r2, [r3, #0]
    89d2:	4b0f      	ldr	r3, [pc, #60]	; (8a10 <prvAddCurrentTaskToDelayedList+0x94>)
    89d4:	681b      	ldr	r3, [r3, #0]
    89d6:	3304      	adds	r3, #4
    89d8:	0019      	movs	r1, r3
    89da:	0010      	movs	r0, r2
    89dc:	4b11      	ldr	r3, [pc, #68]	; (8a24 <prvAddCurrentTaskToDelayedList+0xa8>)
    89de:	4798      	blx	r3
}
    89e0:	e010      	b.n	8a04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    89e2:	4b11      	ldr	r3, [pc, #68]	; (8a28 <prvAddCurrentTaskToDelayedList+0xac>)
    89e4:	681a      	ldr	r2, [r3, #0]
    89e6:	4b0a      	ldr	r3, [pc, #40]	; (8a10 <prvAddCurrentTaskToDelayedList+0x94>)
    89e8:	681b      	ldr	r3, [r3, #0]
    89ea:	3304      	adds	r3, #4
    89ec:	0019      	movs	r1, r3
    89ee:	0010      	movs	r0, r2
    89f0:	4b0c      	ldr	r3, [pc, #48]	; (8a24 <prvAddCurrentTaskToDelayedList+0xa8>)
    89f2:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    89f4:	4b0d      	ldr	r3, [pc, #52]	; (8a2c <prvAddCurrentTaskToDelayedList+0xb0>)
    89f6:	681b      	ldr	r3, [r3, #0]
    89f8:	68ba      	ldr	r2, [r7, #8]
    89fa:	429a      	cmp	r2, r3
    89fc:	d202      	bcs.n	8a04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    89fe:	4b0b      	ldr	r3, [pc, #44]	; (8a2c <prvAddCurrentTaskToDelayedList+0xb0>)
    8a00:	68ba      	ldr	r2, [r7, #8]
    8a02:	601a      	str	r2, [r3, #0]
}
    8a04:	46c0      	nop			; (mov r8, r8)
    8a06:	46bd      	mov	sp, r7
    8a08:	b004      	add	sp, #16
    8a0a:	bd80      	pop	{r7, pc}
    8a0c:	200037bc 	.word	0x200037bc
    8a10:	200036e0 	.word	0x200036e0
    8a14:	00005697 	.word	0x00005697
    8a18:	200037a4 	.word	0x200037a4
    8a1c:	000055e7 	.word	0x000055e7
    8a20:	20003774 	.word	0x20003774
    8a24:	0000562b 	.word	0x0000562b
    8a28:	20003770 	.word	0x20003770
    8a2c:	200037d8 	.word	0x200037d8

00008a30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    8a30:	b590      	push	{r4, r7, lr}
    8a32:	b085      	sub	sp, #20
    8a34:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    8a36:	2300      	movs	r3, #0
    8a38:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    8a3a:	4b0e      	ldr	r3, [pc, #56]	; (8a74 <xTimerCreateTimerTask+0x44>)
    8a3c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    8a3e:	4b0e      	ldr	r3, [pc, #56]	; (8a78 <xTimerCreateTimerTask+0x48>)
    8a40:	681b      	ldr	r3, [r3, #0]
    8a42:	2b00      	cmp	r3, #0
    8a44:	d00b      	beq.n	8a5e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    8a46:	490d      	ldr	r1, [pc, #52]	; (8a7c <xTimerCreateTimerTask+0x4c>)
    8a48:	480d      	ldr	r0, [pc, #52]	; (8a80 <xTimerCreateTimerTask+0x50>)
    8a4a:	4b0e      	ldr	r3, [pc, #56]	; (8a84 <xTimerCreateTimerTask+0x54>)
    8a4c:	9301      	str	r3, [sp, #4]
    8a4e:	2302      	movs	r3, #2
    8a50:	9300      	str	r3, [sp, #0]
    8a52:	2300      	movs	r3, #0
    8a54:	2280      	movs	r2, #128	; 0x80
    8a56:	4c0c      	ldr	r4, [pc, #48]	; (8a88 <xTimerCreateTimerTask+0x58>)
    8a58:	47a0      	blx	r4
    8a5a:	0003      	movs	r3, r0
    8a5c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    8a5e:	687b      	ldr	r3, [r7, #4]
    8a60:	2b00      	cmp	r3, #0
    8a62:	d101      	bne.n	8a68 <xTimerCreateTimerTask+0x38>
    8a64:	b672      	cpsid	i
    8a66:	e7fe      	b.n	8a66 <xTimerCreateTimerTask+0x36>
	return xReturn;
    8a68:	687b      	ldr	r3, [r7, #4]
}
    8a6a:	0018      	movs	r0, r3
    8a6c:	46bd      	mov	sp, r7
    8a6e:	b003      	add	sp, #12
    8a70:	bd90      	pop	{r4, r7, pc}
    8a72:	46c0      	nop			; (mov r8, r8)
    8a74:	00008f79 	.word	0x00008f79
    8a78:	20003814 	.word	0x20003814
    8a7c:	0001069c 	.word	0x0001069c
    8a80:	00008bb1 	.word	0x00008bb1
    8a84:	20003818 	.word	0x20003818
    8a88:	00007485 	.word	0x00007485

00008a8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    8a8c:	b590      	push	{r4, r7, lr}
    8a8e:	b089      	sub	sp, #36	; 0x24
    8a90:	af00      	add	r7, sp, #0
    8a92:	60f8      	str	r0, [r7, #12]
    8a94:	60b9      	str	r1, [r7, #8]
    8a96:	607a      	str	r2, [r7, #4]
    8a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    8a9a:	2300      	movs	r3, #0
    8a9c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    8a9e:	68fb      	ldr	r3, [r7, #12]
    8aa0:	2b00      	cmp	r3, #0
    8aa2:	d101      	bne.n	8aa8 <xTimerGenericCommand+0x1c>
    8aa4:	b672      	cpsid	i
    8aa6:	e7fe      	b.n	8aa6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    8aa8:	4b1e      	ldr	r3, [pc, #120]	; (8b24 <xTimerGenericCommand+0x98>)
    8aaa:	681b      	ldr	r3, [r3, #0]
    8aac:	2b00      	cmp	r3, #0
    8aae:	d033      	beq.n	8b18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    8ab0:	2310      	movs	r3, #16
    8ab2:	18fb      	adds	r3, r7, r3
    8ab4:	68ba      	ldr	r2, [r7, #8]
    8ab6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    8ab8:	2310      	movs	r3, #16
    8aba:	18fb      	adds	r3, r7, r3
    8abc:	687a      	ldr	r2, [r7, #4]
    8abe:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    8ac0:	2310      	movs	r3, #16
    8ac2:	18fb      	adds	r3, r7, r3
    8ac4:	68fa      	ldr	r2, [r7, #12]
    8ac6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    8ac8:	68bb      	ldr	r3, [r7, #8]
    8aca:	2b05      	cmp	r3, #5
    8acc:	dc1a      	bgt.n	8b04 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    8ace:	4b16      	ldr	r3, [pc, #88]	; (8b28 <xTimerGenericCommand+0x9c>)
    8ad0:	4798      	blx	r3
    8ad2:	0003      	movs	r3, r0
    8ad4:	2b02      	cmp	r3, #2
    8ad6:	d10a      	bne.n	8aee <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    8ad8:	4b12      	ldr	r3, [pc, #72]	; (8b24 <xTimerGenericCommand+0x98>)
    8ada:	6818      	ldr	r0, [r3, #0]
    8adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    8ade:	2310      	movs	r3, #16
    8ae0:	18f9      	adds	r1, r7, r3
    8ae2:	2300      	movs	r3, #0
    8ae4:	4c11      	ldr	r4, [pc, #68]	; (8b2c <xTimerGenericCommand+0xa0>)
    8ae6:	47a0      	blx	r4
    8ae8:	0003      	movs	r3, r0
    8aea:	61fb      	str	r3, [r7, #28]
    8aec:	e014      	b.n	8b18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    8aee:	4b0d      	ldr	r3, [pc, #52]	; (8b24 <xTimerGenericCommand+0x98>)
    8af0:	6818      	ldr	r0, [r3, #0]
    8af2:	2310      	movs	r3, #16
    8af4:	18f9      	adds	r1, r7, r3
    8af6:	2300      	movs	r3, #0
    8af8:	2200      	movs	r2, #0
    8afa:	4c0c      	ldr	r4, [pc, #48]	; (8b2c <xTimerGenericCommand+0xa0>)
    8afc:	47a0      	blx	r4
    8afe:	0003      	movs	r3, r0
    8b00:	61fb      	str	r3, [r7, #28]
    8b02:	e009      	b.n	8b18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    8b04:	4b07      	ldr	r3, [pc, #28]	; (8b24 <xTimerGenericCommand+0x98>)
    8b06:	6818      	ldr	r0, [r3, #0]
    8b08:	683a      	ldr	r2, [r7, #0]
    8b0a:	2310      	movs	r3, #16
    8b0c:	18f9      	adds	r1, r7, r3
    8b0e:	2300      	movs	r3, #0
    8b10:	4c07      	ldr	r4, [pc, #28]	; (8b30 <xTimerGenericCommand+0xa4>)
    8b12:	47a0      	blx	r4
    8b14:	0003      	movs	r3, r0
    8b16:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    8b18:	69fb      	ldr	r3, [r7, #28]
}
    8b1a:	0018      	movs	r0, r3
    8b1c:	46bd      	mov	sp, r7
    8b1e:	b009      	add	sp, #36	; 0x24
    8b20:	bd90      	pop	{r4, r7, pc}
    8b22:	46c0      	nop			; (mov r8, r8)
    8b24:	20003814 	.word	0x20003814
    8b28:	0000848d 	.word	0x0000848d
    8b2c:	00005dbd 	.word	0x00005dbd
    8b30:	0000621d 	.word	0x0000621d

00008b34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    8b34:	b590      	push	{r4, r7, lr}
    8b36:	b087      	sub	sp, #28
    8b38:	af02      	add	r7, sp, #8
    8b3a:	6078      	str	r0, [r7, #4]
    8b3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    8b3e:	4b18      	ldr	r3, [pc, #96]	; (8ba0 <prvProcessExpiredTimer+0x6c>)
    8b40:	681b      	ldr	r3, [r3, #0]
    8b42:	68db      	ldr	r3, [r3, #12]
    8b44:	68db      	ldr	r3, [r3, #12]
    8b46:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8b48:	68fb      	ldr	r3, [r7, #12]
    8b4a:	3304      	adds	r3, #4
    8b4c:	0018      	movs	r0, r3
    8b4e:	4b15      	ldr	r3, [pc, #84]	; (8ba4 <prvProcessExpiredTimer+0x70>)
    8b50:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    8b52:	68fb      	ldr	r3, [r7, #12]
    8b54:	69db      	ldr	r3, [r3, #28]
    8b56:	2b01      	cmp	r3, #1
    8b58:	d119      	bne.n	8b8e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    8b5a:	68fb      	ldr	r3, [r7, #12]
    8b5c:	699a      	ldr	r2, [r3, #24]
    8b5e:	687b      	ldr	r3, [r7, #4]
    8b60:	18d1      	adds	r1, r2, r3
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	683a      	ldr	r2, [r7, #0]
    8b66:	68f8      	ldr	r0, [r7, #12]
    8b68:	4c0f      	ldr	r4, [pc, #60]	; (8ba8 <prvProcessExpiredTimer+0x74>)
    8b6a:	47a0      	blx	r4
    8b6c:	1e03      	subs	r3, r0, #0
    8b6e:	d00e      	beq.n	8b8e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    8b70:	687a      	ldr	r2, [r7, #4]
    8b72:	68f8      	ldr	r0, [r7, #12]
    8b74:	2300      	movs	r3, #0
    8b76:	9300      	str	r3, [sp, #0]
    8b78:	2300      	movs	r3, #0
    8b7a:	2100      	movs	r1, #0
    8b7c:	4c0b      	ldr	r4, [pc, #44]	; (8bac <prvProcessExpiredTimer+0x78>)
    8b7e:	47a0      	blx	r4
    8b80:	0003      	movs	r3, r0
    8b82:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    8b84:	68bb      	ldr	r3, [r7, #8]
    8b86:	2b00      	cmp	r3, #0
    8b88:	d101      	bne.n	8b8e <prvProcessExpiredTimer+0x5a>
    8b8a:	b672      	cpsid	i
    8b8c:	e7fe      	b.n	8b8c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    8b8e:	68fb      	ldr	r3, [r7, #12]
    8b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b92:	68fa      	ldr	r2, [r7, #12]
    8b94:	0010      	movs	r0, r2
    8b96:	4798      	blx	r3
}
    8b98:	46c0      	nop			; (mov r8, r8)
    8b9a:	46bd      	mov	sp, r7
    8b9c:	b005      	add	sp, #20
    8b9e:	bd90      	pop	{r4, r7, pc}
    8ba0:	2000380c 	.word	0x2000380c
    8ba4:	00005697 	.word	0x00005697
    8ba8:	00008d19 	.word	0x00008d19
    8bac:	00008a8d 	.word	0x00008a8d

00008bb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b084      	sub	sp, #16
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
    8bb8:	4b08      	ldr	r3, [pc, #32]	; (8bdc <prvTimerTask+0x2c>)
    8bba:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    8bbc:	2308      	movs	r3, #8
    8bbe:	18fb      	adds	r3, r7, r3
    8bc0:	0018      	movs	r0, r3
    8bc2:	4b07      	ldr	r3, [pc, #28]	; (8be0 <prvTimerTask+0x30>)
    8bc4:	4798      	blx	r3
    8bc6:	0003      	movs	r3, r0
    8bc8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    8bca:	68ba      	ldr	r2, [r7, #8]
    8bcc:	68fb      	ldr	r3, [r7, #12]
    8bce:	0011      	movs	r1, r2
    8bd0:	0018      	movs	r0, r3
    8bd2:	4b04      	ldr	r3, [pc, #16]	; (8be4 <prvTimerTask+0x34>)
    8bd4:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    8bd6:	4b04      	ldr	r3, [pc, #16]	; (8be8 <prvTimerTask+0x38>)
    8bd8:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    8bda:	e7ef      	b.n	8bbc <prvTimerTask+0xc>
    8bdc:	0000c1dd 	.word	0x0000c1dd
    8be0:	00008c91 	.word	0x00008c91
    8be4:	00008bed 	.word	0x00008bed
    8be8:	00008da1 	.word	0x00008da1

00008bec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    8bec:	b580      	push	{r7, lr}
    8bee:	b084      	sub	sp, #16
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	6078      	str	r0, [r7, #4]
    8bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    8bf6:	4b1e      	ldr	r3, [pc, #120]	; (8c70 <prvProcessTimerOrBlockTask+0x84>)
    8bf8:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    8bfa:	2308      	movs	r3, #8
    8bfc:	18fb      	adds	r3, r7, r3
    8bfe:	0018      	movs	r0, r3
    8c00:	4b1c      	ldr	r3, [pc, #112]	; (8c74 <prvProcessTimerOrBlockTask+0x88>)
    8c02:	4798      	blx	r3
    8c04:	0003      	movs	r3, r0
    8c06:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    8c08:	68bb      	ldr	r3, [r7, #8]
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d129      	bne.n	8c62 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    8c0e:	683b      	ldr	r3, [r7, #0]
    8c10:	2b00      	cmp	r3, #0
    8c12:	d10c      	bne.n	8c2e <prvProcessTimerOrBlockTask+0x42>
    8c14:	687a      	ldr	r2, [r7, #4]
    8c16:	68fb      	ldr	r3, [r7, #12]
    8c18:	429a      	cmp	r2, r3
    8c1a:	d808      	bhi.n	8c2e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    8c1c:	4b16      	ldr	r3, [pc, #88]	; (8c78 <prvProcessTimerOrBlockTask+0x8c>)
    8c1e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    8c20:	68fa      	ldr	r2, [r7, #12]
    8c22:	687b      	ldr	r3, [r7, #4]
    8c24:	0011      	movs	r1, r2
    8c26:	0018      	movs	r0, r3
    8c28:	4b14      	ldr	r3, [pc, #80]	; (8c7c <prvProcessTimerOrBlockTask+0x90>)
    8c2a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    8c2c:	e01b      	b.n	8c66 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
    8c2e:	683b      	ldr	r3, [r7, #0]
    8c30:	2b00      	cmp	r3, #0
    8c32:	d006      	beq.n	8c42 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    8c34:	4b12      	ldr	r3, [pc, #72]	; (8c80 <prvProcessTimerOrBlockTask+0x94>)
    8c36:	681b      	ldr	r3, [r3, #0]
    8c38:	681b      	ldr	r3, [r3, #0]
    8c3a:	425a      	negs	r2, r3
    8c3c:	4153      	adcs	r3, r2
    8c3e:	b2db      	uxtb	r3, r3
    8c40:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    8c42:	4b10      	ldr	r3, [pc, #64]	; (8c84 <prvProcessTimerOrBlockTask+0x98>)
    8c44:	6818      	ldr	r0, [r3, #0]
    8c46:	687a      	ldr	r2, [r7, #4]
    8c48:	68fb      	ldr	r3, [r7, #12]
    8c4a:	1ad3      	subs	r3, r2, r3
    8c4c:	683a      	ldr	r2, [r7, #0]
    8c4e:	0019      	movs	r1, r3
    8c50:	4b0d      	ldr	r3, [pc, #52]	; (8c88 <prvProcessTimerOrBlockTask+0x9c>)
    8c52:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    8c54:	4b08      	ldr	r3, [pc, #32]	; (8c78 <prvProcessTimerOrBlockTask+0x8c>)
    8c56:	4798      	blx	r3
    8c58:	1e03      	subs	r3, r0, #0
    8c5a:	d104      	bne.n	8c66 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    8c5c:	4b0b      	ldr	r3, [pc, #44]	; (8c8c <prvProcessTimerOrBlockTask+0xa0>)
    8c5e:	4798      	blx	r3
}
    8c60:	e001      	b.n	8c66 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
    8c62:	4b05      	ldr	r3, [pc, #20]	; (8c78 <prvProcessTimerOrBlockTask+0x8c>)
    8c64:	4798      	blx	r3
}
    8c66:	46c0      	nop			; (mov r8, r8)
    8c68:	46bd      	mov	sp, r7
    8c6a:	b004      	add	sp, #16
    8c6c:	bd80      	pop	{r7, pc}
    8c6e:	46c0      	nop			; (mov r8, r8)
    8c70:	00007ad9 	.word	0x00007ad9
    8c74:	00008cd1 	.word	0x00008cd1
    8c78:	00007af1 	.word	0x00007af1
    8c7c:	00008b35 	.word	0x00008b35
    8c80:	20003810 	.word	0x20003810
    8c84:	20003814 	.word	0x20003814
    8c88:	00007281 	.word	0x00007281
    8c8c:	00005811 	.word	0x00005811

00008c90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    8c90:	b580      	push	{r7, lr}
    8c92:	b084      	sub	sp, #16
    8c94:	af00      	add	r7, sp, #0
    8c96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    8c98:	4b0c      	ldr	r3, [pc, #48]	; (8ccc <prvGetNextExpireTime+0x3c>)
    8c9a:	681b      	ldr	r3, [r3, #0]
    8c9c:	681b      	ldr	r3, [r3, #0]
    8c9e:	425a      	negs	r2, r3
    8ca0:	4153      	adcs	r3, r2
    8ca2:	b2db      	uxtb	r3, r3
    8ca4:	001a      	movs	r2, r3
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    8caa:	687b      	ldr	r3, [r7, #4]
    8cac:	681b      	ldr	r3, [r3, #0]
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d105      	bne.n	8cbe <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    8cb2:	4b06      	ldr	r3, [pc, #24]	; (8ccc <prvGetNextExpireTime+0x3c>)
    8cb4:	681b      	ldr	r3, [r3, #0]
    8cb6:	68db      	ldr	r3, [r3, #12]
    8cb8:	681b      	ldr	r3, [r3, #0]
    8cba:	60fb      	str	r3, [r7, #12]
    8cbc:	e001      	b.n	8cc2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    8cbe:	2300      	movs	r3, #0
    8cc0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    8cc2:	68fb      	ldr	r3, [r7, #12]
}
    8cc4:	0018      	movs	r0, r3
    8cc6:	46bd      	mov	sp, r7
    8cc8:	b004      	add	sp, #16
    8cca:	bd80      	pop	{r7, pc}
    8ccc:	2000380c 	.word	0x2000380c

00008cd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    8cd0:	b580      	push	{r7, lr}
    8cd2:	b084      	sub	sp, #16
    8cd4:	af00      	add	r7, sp, #0
    8cd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    8cd8:	4b0c      	ldr	r3, [pc, #48]	; (8d0c <prvSampleTimeNow+0x3c>)
    8cda:	4798      	blx	r3
    8cdc:	0003      	movs	r3, r0
    8cde:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    8ce0:	4b0b      	ldr	r3, [pc, #44]	; (8d10 <prvSampleTimeNow+0x40>)
    8ce2:	681b      	ldr	r3, [r3, #0]
    8ce4:	68fa      	ldr	r2, [r7, #12]
    8ce6:	429a      	cmp	r2, r3
    8ce8:	d205      	bcs.n	8cf6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    8cea:	4b0a      	ldr	r3, [pc, #40]	; (8d14 <prvSampleTimeNow+0x44>)
    8cec:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    8cee:	687b      	ldr	r3, [r7, #4]
    8cf0:	2201      	movs	r2, #1
    8cf2:	601a      	str	r2, [r3, #0]
    8cf4:	e002      	b.n	8cfc <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    8cf6:	687b      	ldr	r3, [r7, #4]
    8cf8:	2200      	movs	r2, #0
    8cfa:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    8cfc:	4b04      	ldr	r3, [pc, #16]	; (8d10 <prvSampleTimeNow+0x40>)
    8cfe:	68fa      	ldr	r2, [r7, #12]
    8d00:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    8d02:	68fb      	ldr	r3, [r7, #12]
}
    8d04:	0018      	movs	r0, r3
    8d06:	46bd      	mov	sp, r7
    8d08:	b004      	add	sp, #16
    8d0a:	bd80      	pop	{r7, pc}
    8d0c:	00007c61 	.word	0x00007c61
    8d10:	2000381c 	.word	0x2000381c
    8d14:	00008eb9 	.word	0x00008eb9

00008d18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    8d18:	b580      	push	{r7, lr}
    8d1a:	b086      	sub	sp, #24
    8d1c:	af00      	add	r7, sp, #0
    8d1e:	60f8      	str	r0, [r7, #12]
    8d20:	60b9      	str	r1, [r7, #8]
    8d22:	607a      	str	r2, [r7, #4]
    8d24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    8d26:	2300      	movs	r3, #0
    8d28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    8d2a:	68fb      	ldr	r3, [r7, #12]
    8d2c:	68ba      	ldr	r2, [r7, #8]
    8d2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    8d30:	68fb      	ldr	r3, [r7, #12]
    8d32:	68fa      	ldr	r2, [r7, #12]
    8d34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    8d36:	68ba      	ldr	r2, [r7, #8]
    8d38:	687b      	ldr	r3, [r7, #4]
    8d3a:	429a      	cmp	r2, r3
    8d3c:	d812      	bhi.n	8d64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8d3e:	687a      	ldr	r2, [r7, #4]
    8d40:	683b      	ldr	r3, [r7, #0]
    8d42:	1ad2      	subs	r2, r2, r3
    8d44:	68fb      	ldr	r3, [r7, #12]
    8d46:	699b      	ldr	r3, [r3, #24]
    8d48:	429a      	cmp	r2, r3
    8d4a:	d302      	bcc.n	8d52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    8d4c:	2301      	movs	r3, #1
    8d4e:	617b      	str	r3, [r7, #20]
    8d50:	e01b      	b.n	8d8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    8d52:	4b10      	ldr	r3, [pc, #64]	; (8d94 <prvInsertTimerInActiveList+0x7c>)
    8d54:	681a      	ldr	r2, [r3, #0]
    8d56:	68fb      	ldr	r3, [r7, #12]
    8d58:	3304      	adds	r3, #4
    8d5a:	0019      	movs	r1, r3
    8d5c:	0010      	movs	r0, r2
    8d5e:	4b0e      	ldr	r3, [pc, #56]	; (8d98 <prvInsertTimerInActiveList+0x80>)
    8d60:	4798      	blx	r3
    8d62:	e012      	b.n	8d8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    8d64:	687a      	ldr	r2, [r7, #4]
    8d66:	683b      	ldr	r3, [r7, #0]
    8d68:	429a      	cmp	r2, r3
    8d6a:	d206      	bcs.n	8d7a <prvInsertTimerInActiveList+0x62>
    8d6c:	68ba      	ldr	r2, [r7, #8]
    8d6e:	683b      	ldr	r3, [r7, #0]
    8d70:	429a      	cmp	r2, r3
    8d72:	d302      	bcc.n	8d7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    8d74:	2301      	movs	r3, #1
    8d76:	617b      	str	r3, [r7, #20]
    8d78:	e007      	b.n	8d8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    8d7a:	4b08      	ldr	r3, [pc, #32]	; (8d9c <prvInsertTimerInActiveList+0x84>)
    8d7c:	681a      	ldr	r2, [r3, #0]
    8d7e:	68fb      	ldr	r3, [r7, #12]
    8d80:	3304      	adds	r3, #4
    8d82:	0019      	movs	r1, r3
    8d84:	0010      	movs	r0, r2
    8d86:	4b04      	ldr	r3, [pc, #16]	; (8d98 <prvInsertTimerInActiveList+0x80>)
    8d88:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    8d8a:	697b      	ldr	r3, [r7, #20]
}
    8d8c:	0018      	movs	r0, r3
    8d8e:	46bd      	mov	sp, r7
    8d90:	b006      	add	sp, #24
    8d92:	bd80      	pop	{r7, pc}
    8d94:	20003810 	.word	0x20003810
    8d98:	0000562b 	.word	0x0000562b
    8d9c:	2000380c 	.word	0x2000380c

00008da0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    8da0:	b590      	push	{r4, r7, lr}
    8da2:	b08b      	sub	sp, #44	; 0x2c
    8da4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    8da6:	e068      	b.n	8e7a <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    8da8:	2308      	movs	r3, #8
    8daa:	18fb      	adds	r3, r7, r3
    8dac:	681b      	ldr	r3, [r3, #0]
    8dae:	2b00      	cmp	r3, #0
    8db0:	db63      	blt.n	8e7a <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    8db2:	2308      	movs	r3, #8
    8db4:	18fb      	adds	r3, r7, r3
    8db6:	689b      	ldr	r3, [r3, #8]
    8db8:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    8dba:	69fb      	ldr	r3, [r7, #28]
    8dbc:	695b      	ldr	r3, [r3, #20]
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d004      	beq.n	8dcc <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8dc2:	69fb      	ldr	r3, [r7, #28]
    8dc4:	3304      	adds	r3, #4
    8dc6:	0018      	movs	r0, r3
    8dc8:	4b33      	ldr	r3, [pc, #204]	; (8e98 <prvProcessReceivedCommands+0xf8>)
    8dca:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    8dcc:	1d3b      	adds	r3, r7, #4
    8dce:	0018      	movs	r0, r3
    8dd0:	4b32      	ldr	r3, [pc, #200]	; (8e9c <prvProcessReceivedCommands+0xfc>)
    8dd2:	4798      	blx	r3
    8dd4:	0003      	movs	r3, r0
    8dd6:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    8dd8:	2308      	movs	r3, #8
    8dda:	18fb      	adds	r3, r7, r3
    8ddc:	681b      	ldr	r3, [r3, #0]
    8dde:	2b09      	cmp	r3, #9
    8de0:	d84a      	bhi.n	8e78 <prvProcessReceivedCommands+0xd8>
    8de2:	009a      	lsls	r2, r3, #2
    8de4:	4b2e      	ldr	r3, [pc, #184]	; (8ea0 <prvProcessReceivedCommands+0x100>)
    8de6:	18d3      	adds	r3, r2, r3
    8de8:	681b      	ldr	r3, [r3, #0]
    8dea:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    8dec:	2308      	movs	r3, #8
    8dee:	18fb      	adds	r3, r7, r3
    8df0:	685a      	ldr	r2, [r3, #4]
    8df2:	69fb      	ldr	r3, [r7, #28]
    8df4:	699b      	ldr	r3, [r3, #24]
    8df6:	18d1      	adds	r1, r2, r3
    8df8:	2308      	movs	r3, #8
    8dfa:	18fb      	adds	r3, r7, r3
    8dfc:	685b      	ldr	r3, [r3, #4]
    8dfe:	69ba      	ldr	r2, [r7, #24]
    8e00:	69f8      	ldr	r0, [r7, #28]
    8e02:	4c28      	ldr	r4, [pc, #160]	; (8ea4 <prvProcessReceivedCommands+0x104>)
    8e04:	47a0      	blx	r4
    8e06:	1e03      	subs	r3, r0, #0
    8e08:	d037      	beq.n	8e7a <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    8e0a:	69fb      	ldr	r3, [r7, #28]
    8e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e0e:	69fa      	ldr	r2, [r7, #28]
    8e10:	0010      	movs	r0, r2
    8e12:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    8e14:	69fb      	ldr	r3, [r7, #28]
    8e16:	69db      	ldr	r3, [r3, #28]
    8e18:	2b01      	cmp	r3, #1
    8e1a:	d12e      	bne.n	8e7a <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    8e1c:	2308      	movs	r3, #8
    8e1e:	18fb      	adds	r3, r7, r3
    8e20:	685a      	ldr	r2, [r3, #4]
    8e22:	69fb      	ldr	r3, [r7, #28]
    8e24:	699b      	ldr	r3, [r3, #24]
    8e26:	18d2      	adds	r2, r2, r3
    8e28:	69f8      	ldr	r0, [r7, #28]
    8e2a:	2300      	movs	r3, #0
    8e2c:	9300      	str	r3, [sp, #0]
    8e2e:	2300      	movs	r3, #0
    8e30:	2100      	movs	r1, #0
    8e32:	4c1d      	ldr	r4, [pc, #116]	; (8ea8 <prvProcessReceivedCommands+0x108>)
    8e34:	47a0      	blx	r4
    8e36:	0003      	movs	r3, r0
    8e38:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    8e3a:	697b      	ldr	r3, [r7, #20]
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d11c      	bne.n	8e7a <prvProcessReceivedCommands+0xda>
    8e40:	b672      	cpsid	i
    8e42:	e7fe      	b.n	8e42 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    8e44:	2308      	movs	r3, #8
    8e46:	18fb      	adds	r3, r7, r3
    8e48:	685a      	ldr	r2, [r3, #4]
    8e4a:	69fb      	ldr	r3, [r7, #28]
    8e4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    8e4e:	69fb      	ldr	r3, [r7, #28]
    8e50:	699b      	ldr	r3, [r3, #24]
    8e52:	2b00      	cmp	r3, #0
    8e54:	d101      	bne.n	8e5a <prvProcessReceivedCommands+0xba>
    8e56:	b672      	cpsid	i
    8e58:	e7fe      	b.n	8e58 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    8e5a:	69fb      	ldr	r3, [r7, #28]
    8e5c:	699a      	ldr	r2, [r3, #24]
    8e5e:	69bb      	ldr	r3, [r7, #24]
    8e60:	18d1      	adds	r1, r2, r3
    8e62:	69bb      	ldr	r3, [r7, #24]
    8e64:	69ba      	ldr	r2, [r7, #24]
    8e66:	69f8      	ldr	r0, [r7, #28]
    8e68:	4c0e      	ldr	r4, [pc, #56]	; (8ea4 <prvProcessReceivedCommands+0x104>)
    8e6a:	47a0      	blx	r4
					break;
    8e6c:	e005      	b.n	8e7a <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    8e6e:	69fb      	ldr	r3, [r7, #28]
    8e70:	0018      	movs	r0, r3
    8e72:	4b0e      	ldr	r3, [pc, #56]	; (8eac <prvProcessReceivedCommands+0x10c>)
    8e74:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    8e76:	e000      	b.n	8e7a <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    8e78:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    8e7a:	4b0d      	ldr	r3, [pc, #52]	; (8eb0 <prvProcessReceivedCommands+0x110>)
    8e7c:	681b      	ldr	r3, [r3, #0]
    8e7e:	2208      	movs	r2, #8
    8e80:	18b9      	adds	r1, r7, r2
    8e82:	2200      	movs	r2, #0
    8e84:	0018      	movs	r0, r3
    8e86:	4b0b      	ldr	r3, [pc, #44]	; (8eb4 <prvProcessReceivedCommands+0x114>)
    8e88:	4798      	blx	r3
    8e8a:	1e03      	subs	r3, r0, #0
    8e8c:	d18c      	bne.n	8da8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    8e8e:	46c0      	nop			; (mov r8, r8)
    8e90:	46bd      	mov	sp, r7
    8e92:	b009      	add	sp, #36	; 0x24
    8e94:	bd90      	pop	{r4, r7, pc}
    8e96:	46c0      	nop			; (mov r8, r8)
    8e98:	00005697 	.word	0x00005697
    8e9c:	00008cd1 	.word	0x00008cd1
    8ea0:	000106a4 	.word	0x000106a4
    8ea4:	00008d19 	.word	0x00008d19
    8ea8:	00008a8d 	.word	0x00008a8d
    8eac:	00005a25 	.word	0x00005a25
    8eb0:	20003814 	.word	0x20003814
    8eb4:	00006675 	.word	0x00006675

00008eb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    8eb8:	b590      	push	{r4, r7, lr}
    8eba:	b089      	sub	sp, #36	; 0x24
    8ebc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    8ebe:	e03e      	b.n	8f3e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    8ec0:	4b28      	ldr	r3, [pc, #160]	; (8f64 <prvSwitchTimerLists+0xac>)
    8ec2:	681b      	ldr	r3, [r3, #0]
    8ec4:	68db      	ldr	r3, [r3, #12]
    8ec6:	681b      	ldr	r3, [r3, #0]
    8ec8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    8eca:	4b26      	ldr	r3, [pc, #152]	; (8f64 <prvSwitchTimerLists+0xac>)
    8ecc:	681b      	ldr	r3, [r3, #0]
    8ece:	68db      	ldr	r3, [r3, #12]
    8ed0:	68db      	ldr	r3, [r3, #12]
    8ed2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8ed4:	693b      	ldr	r3, [r7, #16]
    8ed6:	3304      	adds	r3, #4
    8ed8:	0018      	movs	r0, r3
    8eda:	4b23      	ldr	r3, [pc, #140]	; (8f68 <prvSwitchTimerLists+0xb0>)
    8edc:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    8ede:	693b      	ldr	r3, [r7, #16]
    8ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ee2:	693a      	ldr	r2, [r7, #16]
    8ee4:	0010      	movs	r0, r2
    8ee6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    8ee8:	693b      	ldr	r3, [r7, #16]
    8eea:	69db      	ldr	r3, [r3, #28]
    8eec:	2b01      	cmp	r3, #1
    8eee:	d126      	bne.n	8f3e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    8ef0:	693b      	ldr	r3, [r7, #16]
    8ef2:	699a      	ldr	r2, [r3, #24]
    8ef4:	697b      	ldr	r3, [r7, #20]
    8ef6:	18d3      	adds	r3, r2, r3
    8ef8:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    8efa:	68fa      	ldr	r2, [r7, #12]
    8efc:	697b      	ldr	r3, [r7, #20]
    8efe:	429a      	cmp	r2, r3
    8f00:	d90e      	bls.n	8f20 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    8f02:	693b      	ldr	r3, [r7, #16]
    8f04:	68fa      	ldr	r2, [r7, #12]
    8f06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    8f08:	693b      	ldr	r3, [r7, #16]
    8f0a:	693a      	ldr	r2, [r7, #16]
    8f0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    8f0e:	4b15      	ldr	r3, [pc, #84]	; (8f64 <prvSwitchTimerLists+0xac>)
    8f10:	681a      	ldr	r2, [r3, #0]
    8f12:	693b      	ldr	r3, [r7, #16]
    8f14:	3304      	adds	r3, #4
    8f16:	0019      	movs	r1, r3
    8f18:	0010      	movs	r0, r2
    8f1a:	4b14      	ldr	r3, [pc, #80]	; (8f6c <prvSwitchTimerLists+0xb4>)
    8f1c:	4798      	blx	r3
    8f1e:	e00e      	b.n	8f3e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    8f20:	697a      	ldr	r2, [r7, #20]
    8f22:	6938      	ldr	r0, [r7, #16]
    8f24:	2300      	movs	r3, #0
    8f26:	9300      	str	r3, [sp, #0]
    8f28:	2300      	movs	r3, #0
    8f2a:	2100      	movs	r1, #0
    8f2c:	4c10      	ldr	r4, [pc, #64]	; (8f70 <prvSwitchTimerLists+0xb8>)
    8f2e:	47a0      	blx	r4
    8f30:	0003      	movs	r3, r0
    8f32:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    8f34:	68bb      	ldr	r3, [r7, #8]
    8f36:	2b00      	cmp	r3, #0
    8f38:	d101      	bne.n	8f3e <prvSwitchTimerLists+0x86>
    8f3a:	b672      	cpsid	i
    8f3c:	e7fe      	b.n	8f3c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    8f3e:	4b09      	ldr	r3, [pc, #36]	; (8f64 <prvSwitchTimerLists+0xac>)
    8f40:	681b      	ldr	r3, [r3, #0]
    8f42:	681b      	ldr	r3, [r3, #0]
    8f44:	2b00      	cmp	r3, #0
    8f46:	d1bb      	bne.n	8ec0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    8f48:	4b06      	ldr	r3, [pc, #24]	; (8f64 <prvSwitchTimerLists+0xac>)
    8f4a:	681b      	ldr	r3, [r3, #0]
    8f4c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    8f4e:	4b09      	ldr	r3, [pc, #36]	; (8f74 <prvSwitchTimerLists+0xbc>)
    8f50:	681a      	ldr	r2, [r3, #0]
    8f52:	4b04      	ldr	r3, [pc, #16]	; (8f64 <prvSwitchTimerLists+0xac>)
    8f54:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    8f56:	4b07      	ldr	r3, [pc, #28]	; (8f74 <prvSwitchTimerLists+0xbc>)
    8f58:	687a      	ldr	r2, [r7, #4]
    8f5a:	601a      	str	r2, [r3, #0]
}
    8f5c:	46c0      	nop			; (mov r8, r8)
    8f5e:	46bd      	mov	sp, r7
    8f60:	b007      	add	sp, #28
    8f62:	bd90      	pop	{r4, r7, pc}
    8f64:	2000380c 	.word	0x2000380c
    8f68:	00005697 	.word	0x00005697
    8f6c:	0000562b 	.word	0x0000562b
    8f70:	00008a8d 	.word	0x00008a8d
    8f74:	20003810 	.word	0x20003810

00008f78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    8f78:	b580      	push	{r7, lr}
    8f7a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    8f7c:	4b10      	ldr	r3, [pc, #64]	; (8fc0 <prvCheckForValidListAndQueue+0x48>)
    8f7e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    8f80:	4b10      	ldr	r3, [pc, #64]	; (8fc4 <prvCheckForValidListAndQueue+0x4c>)
    8f82:	681b      	ldr	r3, [r3, #0]
    8f84:	2b00      	cmp	r3, #0
    8f86:	d115      	bne.n	8fb4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    8f88:	4b0f      	ldr	r3, [pc, #60]	; (8fc8 <prvCheckForValidListAndQueue+0x50>)
    8f8a:	0018      	movs	r0, r3
    8f8c:	4b0f      	ldr	r3, [pc, #60]	; (8fcc <prvCheckForValidListAndQueue+0x54>)
    8f8e:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    8f90:	4b0f      	ldr	r3, [pc, #60]	; (8fd0 <prvCheckForValidListAndQueue+0x58>)
    8f92:	0018      	movs	r0, r3
    8f94:	4b0d      	ldr	r3, [pc, #52]	; (8fcc <prvCheckForValidListAndQueue+0x54>)
    8f96:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    8f98:	4b0e      	ldr	r3, [pc, #56]	; (8fd4 <prvCheckForValidListAndQueue+0x5c>)
    8f9a:	4a0b      	ldr	r2, [pc, #44]	; (8fc8 <prvCheckForValidListAndQueue+0x50>)
    8f9c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    8f9e:	4b0e      	ldr	r3, [pc, #56]	; (8fd8 <prvCheckForValidListAndQueue+0x60>)
    8fa0:	4a0b      	ldr	r2, [pc, #44]	; (8fd0 <prvCheckForValidListAndQueue+0x58>)
    8fa2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    8fa4:	2200      	movs	r2, #0
    8fa6:	210c      	movs	r1, #12
    8fa8:	2002      	movs	r0, #2
    8faa:	4b0c      	ldr	r3, [pc, #48]	; (8fdc <prvCheckForValidListAndQueue+0x64>)
    8fac:	4798      	blx	r3
    8fae:	0002      	movs	r2, r0
    8fb0:	4b04      	ldr	r3, [pc, #16]	; (8fc4 <prvCheckForValidListAndQueue+0x4c>)
    8fb2:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8fb4:	4b0a      	ldr	r3, [pc, #40]	; (8fe0 <prvCheckForValidListAndQueue+0x68>)
    8fb6:	4798      	blx	r3
}
    8fb8:	46c0      	nop			; (mov r8, r8)
    8fba:	46bd      	mov	sp, r7
    8fbc:	bd80      	pop	{r7, pc}
    8fbe:	46c0      	nop			; (mov r8, r8)
    8fc0:	00005829 	.word	0x00005829
    8fc4:	20003814 	.word	0x20003814
    8fc8:	200037e4 	.word	0x200037e4
    8fcc:	00005595 	.word	0x00005595
    8fd0:	200037f8 	.word	0x200037f8
    8fd4:	2000380c 	.word	0x2000380c
    8fd8:	20003810 	.word	0x20003810
    8fdc:	00005b15 	.word	0x00005b15
    8fe0:	0000584d 	.word	0x0000584d

00008fe4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    8fe4:	b580      	push	{r7, lr}
    8fe6:	b082      	sub	sp, #8
    8fe8:	af00      	add	r7, sp, #0
    8fea:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	7c1b      	ldrb	r3, [r3, #16]
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d00b      	beq.n	900c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    8ff4:	687b      	ldr	r3, [r7, #4]
    8ff6:	689b      	ldr	r3, [r3, #8]
    8ff8:	1c5a      	adds	r2, r3, #1
    8ffa:	687b      	ldr	r3, [r7, #4]
    8ffc:	68d9      	ldr	r1, [r3, #12]
    8ffe:	4b10      	ldr	r3, [pc, #64]	; (9040 <advance_pointer+0x5c>)
    9000:	0010      	movs	r0, r2
    9002:	4798      	blx	r3
    9004:	000b      	movs	r3, r1
    9006:	001a      	movs	r2, r3
    9008:	687b      	ldr	r3, [r7, #4]
    900a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    900c:	687b      	ldr	r3, [r7, #4]
    900e:	685b      	ldr	r3, [r3, #4]
    9010:	1c5a      	adds	r2, r3, #1
    9012:	687b      	ldr	r3, [r7, #4]
    9014:	68d9      	ldr	r1, [r3, #12]
    9016:	4b0a      	ldr	r3, [pc, #40]	; (9040 <advance_pointer+0x5c>)
    9018:	0010      	movs	r0, r2
    901a:	4798      	blx	r3
    901c:	000b      	movs	r3, r1
    901e:	001a      	movs	r2, r3
    9020:	687b      	ldr	r3, [r7, #4]
    9022:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    9024:	687b      	ldr	r3, [r7, #4]
    9026:	685a      	ldr	r2, [r3, #4]
    9028:	687b      	ldr	r3, [r7, #4]
    902a:	689b      	ldr	r3, [r3, #8]
    902c:	1ad3      	subs	r3, r2, r3
    902e:	425a      	negs	r2, r3
    9030:	4153      	adcs	r3, r2
    9032:	b2da      	uxtb	r2, r3
    9034:	687b      	ldr	r3, [r7, #4]
    9036:	741a      	strb	r2, [r3, #16]
 }
    9038:	46c0      	nop			; (mov r8, r8)
    903a:	46bd      	mov	sp, r7
    903c:	b002      	add	sp, #8
    903e:	bd80      	pop	{r7, pc}
    9040:	0000c511 	.word	0x0000c511

00009044 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
    9044:	b580      	push	{r7, lr}
    9046:	b082      	sub	sp, #8
    9048:	af00      	add	r7, sp, #0
    904a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
    904c:	687b      	ldr	r3, [r7, #4]
    904e:	2200      	movs	r2, #0
    9050:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    9052:	687b      	ldr	r3, [r7, #4]
    9054:	689b      	ldr	r3, [r3, #8]
    9056:	1c5a      	adds	r2, r3, #1
    9058:	687b      	ldr	r3, [r7, #4]
    905a:	68d9      	ldr	r1, [r3, #12]
    905c:	4b05      	ldr	r3, [pc, #20]	; (9074 <retreat_pointer+0x30>)
    905e:	0010      	movs	r0, r2
    9060:	4798      	blx	r3
    9062:	000b      	movs	r3, r1
    9064:	001a      	movs	r2, r3
    9066:	687b      	ldr	r3, [r7, #4]
    9068:	609a      	str	r2, [r3, #8]
 }
    906a:	46c0      	nop			; (mov r8, r8)
    906c:	46bd      	mov	sp, r7
    906e:	b002      	add	sp, #8
    9070:	bd80      	pop	{r7, pc}
    9072:	46c0      	nop			; (mov r8, r8)
    9074:	0000c511 	.word	0x0000c511

00009078 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    9078:	b580      	push	{r7, lr}
    907a:	b084      	sub	sp, #16
    907c:	af00      	add	r7, sp, #0
    907e:	6078      	str	r0, [r7, #4]
    9080:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    9082:	2014      	movs	r0, #20
    9084:	4b09      	ldr	r3, [pc, #36]	; (90ac <circular_buf_init+0x34>)
    9086:	4798      	blx	r3
    9088:	0003      	movs	r3, r0
    908a:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    908c:	68fb      	ldr	r3, [r7, #12]
    908e:	687a      	ldr	r2, [r7, #4]
    9090:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
    9092:	68fb      	ldr	r3, [r7, #12]
    9094:	683a      	ldr	r2, [r7, #0]
    9096:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
    9098:	68fb      	ldr	r3, [r7, #12]
    909a:	0018      	movs	r0, r3
    909c:	4b04      	ldr	r3, [pc, #16]	; (90b0 <circular_buf_init+0x38>)
    909e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
    90a0:	68fb      	ldr	r3, [r7, #12]
 }
    90a2:	0018      	movs	r0, r3
    90a4:	46bd      	mov	sp, r7
    90a6:	b004      	add	sp, #16
    90a8:	bd80      	pop	{r7, pc}
    90aa:	46c0      	nop			; (mov r8, r8)
    90ac:	0000e1c5 	.word	0x0000e1c5
    90b0:	000090b5 	.word	0x000090b5

000090b4 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
    90b4:	b580      	push	{r7, lr}
    90b6:	b082      	sub	sp, #8
    90b8:	af00      	add	r7, sp, #0
    90ba:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
    90bc:	687b      	ldr	r3, [r7, #4]
    90be:	2200      	movs	r2, #0
    90c0:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
    90c2:	687b      	ldr	r3, [r7, #4]
    90c4:	2200      	movs	r2, #0
    90c6:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
    90c8:	687b      	ldr	r3, [r7, #4]
    90ca:	2200      	movs	r2, #0
    90cc:	741a      	strb	r2, [r3, #16]
 }
    90ce:	46c0      	nop			; (mov r8, r8)
    90d0:	46bd      	mov	sp, r7
    90d2:	b002      	add	sp, #8
    90d4:	bd80      	pop	{r7, pc}
	...

000090d8 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    90d8:	b580      	push	{r7, lr}
    90da:	b082      	sub	sp, #8
    90dc:	af00      	add	r7, sp, #0
    90de:	6078      	str	r0, [r7, #4]
    90e0:	000a      	movs	r2, r1
    90e2:	1cfb      	adds	r3, r7, #3
    90e4:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    90e6:	687b      	ldr	r3, [r7, #4]
    90e8:	681a      	ldr	r2, [r3, #0]
    90ea:	687b      	ldr	r3, [r7, #4]
    90ec:	685b      	ldr	r3, [r3, #4]
    90ee:	18d3      	adds	r3, r2, r3
    90f0:	1cfa      	adds	r2, r7, #3
    90f2:	7812      	ldrb	r2, [r2, #0]
    90f4:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
    90f6:	687b      	ldr	r3, [r7, #4]
    90f8:	0018      	movs	r0, r3
    90fa:	4b03      	ldr	r3, [pc, #12]	; (9108 <circular_buf_put+0x30>)
    90fc:	4798      	blx	r3
 }
    90fe:	46c0      	nop			; (mov r8, r8)
    9100:	46bd      	mov	sp, r7
    9102:	b002      	add	sp, #8
    9104:	bd80      	pop	{r7, pc}
    9106:	46c0      	nop			; (mov r8, r8)
    9108:	00008fe5 	.word	0x00008fe5

0000910c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
    910c:	b580      	push	{r7, lr}
    910e:	b084      	sub	sp, #16
    9110:	af00      	add	r7, sp, #0
    9112:	6078      	str	r0, [r7, #4]
    9114:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
    9116:	2301      	movs	r3, #1
    9118:	425b      	negs	r3, r3
    911a:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
    911c:	687b      	ldr	r3, [r7, #4]
    911e:	0018      	movs	r0, r3
    9120:	4b0d      	ldr	r3, [pc, #52]	; (9158 <circular_buf_get+0x4c>)
    9122:	4798      	blx	r3
    9124:	0003      	movs	r3, r0
    9126:	001a      	movs	r2, r3
    9128:	2301      	movs	r3, #1
    912a:	4053      	eors	r3, r2
    912c:	b2db      	uxtb	r3, r3
    912e:	2b00      	cmp	r3, #0
    9130:	d00d      	beq.n	914e <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
    9132:	687b      	ldr	r3, [r7, #4]
    9134:	681a      	ldr	r2, [r3, #0]
    9136:	687b      	ldr	r3, [r7, #4]
    9138:	689b      	ldr	r3, [r3, #8]
    913a:	18d3      	adds	r3, r2, r3
    913c:	781a      	ldrb	r2, [r3, #0]
    913e:	683b      	ldr	r3, [r7, #0]
    9140:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
    9142:	687b      	ldr	r3, [r7, #4]
    9144:	0018      	movs	r0, r3
    9146:	4b05      	ldr	r3, [pc, #20]	; (915c <circular_buf_get+0x50>)
    9148:	4798      	blx	r3

		 r = 0;
    914a:	2300      	movs	r3, #0
    914c:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
    914e:	68fb      	ldr	r3, [r7, #12]
 }
    9150:	0018      	movs	r0, r3
    9152:	46bd      	mov	sp, r7
    9154:	b004      	add	sp, #16
    9156:	bd80      	pop	{r7, pc}
    9158:	00009161 	.word	0x00009161
    915c:	00009045 	.word	0x00009045

00009160 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
    9160:	b580      	push	{r7, lr}
    9162:	b082      	sub	sp, #8
    9164:	af00      	add	r7, sp, #0
    9166:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    9168:	687b      	ldr	r3, [r7, #4]
    916a:	7c1b      	ldrb	r3, [r3, #16]
    916c:	2201      	movs	r2, #1
    916e:	4053      	eors	r3, r2
    9170:	b2db      	uxtb	r3, r3
    9172:	2b00      	cmp	r3, #0
    9174:	d007      	beq.n	9186 <circular_buf_empty+0x26>
    9176:	687b      	ldr	r3, [r7, #4]
    9178:	685a      	ldr	r2, [r3, #4]
    917a:	687b      	ldr	r3, [r7, #4]
    917c:	689b      	ldr	r3, [r3, #8]
    917e:	429a      	cmp	r2, r3
    9180:	d101      	bne.n	9186 <circular_buf_empty+0x26>
    9182:	2301      	movs	r3, #1
    9184:	e000      	b.n	9188 <circular_buf_empty+0x28>
    9186:	2300      	movs	r3, #0
    9188:	1c1a      	adds	r2, r3, #0
    918a:	2301      	movs	r3, #1
    918c:	4013      	ands	r3, r2
    918e:	b2db      	uxtb	r3, r3
 }
    9190:	0018      	movs	r0, r3
    9192:	46bd      	mov	sp, r7
    9194:	b002      	add	sp, #8
    9196:	bd80      	pop	{r7, pc}

00009198 <system_interrupt_enable>:
{
    9198:	b580      	push	{r7, lr}
    919a:	b082      	sub	sp, #8
    919c:	af00      	add	r7, sp, #0
    919e:	0002      	movs	r2, r0
    91a0:	1dfb      	adds	r3, r7, #7
    91a2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    91a4:	4b06      	ldr	r3, [pc, #24]	; (91c0 <system_interrupt_enable+0x28>)
    91a6:	1dfa      	adds	r2, r7, #7
    91a8:	7812      	ldrb	r2, [r2, #0]
    91aa:	0011      	movs	r1, r2
    91ac:	221f      	movs	r2, #31
    91ae:	400a      	ands	r2, r1
    91b0:	2101      	movs	r1, #1
    91b2:	4091      	lsls	r1, r2
    91b4:	000a      	movs	r2, r1
    91b6:	601a      	str	r2, [r3, #0]
}
    91b8:	46c0      	nop			; (mov r8, r8)
    91ba:	46bd      	mov	sp, r7
    91bc:	b002      	add	sp, #8
    91be:	bd80      	pop	{r7, pc}
    91c0:	e000e100 	.word	0xe000e100

000091c4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    91c4:	b580      	push	{r7, lr}
    91c6:	b084      	sub	sp, #16
    91c8:	af00      	add	r7, sp, #0
    91ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    91cc:	687b      	ldr	r3, [r7, #4]
    91ce:	681b      	ldr	r3, [r3, #0]
    91d0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    91d2:	68fb      	ldr	r3, [r7, #12]
    91d4:	69db      	ldr	r3, [r3, #28]
    91d6:	1e5a      	subs	r2, r3, #1
    91d8:	4193      	sbcs	r3, r2
    91da:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    91dc:	0018      	movs	r0, r3
    91de:	46bd      	mov	sp, r7
    91e0:	b004      	add	sp, #16
    91e2:	bd80      	pop	{r7, pc}

000091e4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    91e4:	b580      	push	{r7, lr}
    91e6:	b082      	sub	sp, #8
    91e8:	af00      	add	r7, sp, #0
    91ea:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    91ec:	46c0      	nop			; (mov r8, r8)
    91ee:	687b      	ldr	r3, [r7, #4]
    91f0:	0018      	movs	r0, r3
    91f2:	4b04      	ldr	r3, [pc, #16]	; (9204 <_usart_wait_for_sync+0x20>)
    91f4:	4798      	blx	r3
    91f6:	1e03      	subs	r3, r0, #0
    91f8:	d1f9      	bne.n	91ee <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    91fa:	46c0      	nop			; (mov r8, r8)
    91fc:	46bd      	mov	sp, r7
    91fe:	b002      	add	sp, #8
    9200:	bd80      	pop	{r7, pc}
    9202:	46c0      	nop			; (mov r8, r8)
    9204:	000091c5 	.word	0x000091c5

00009208 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    9208:	b580      	push	{r7, lr}
    920a:	b082      	sub	sp, #8
    920c:	af00      	add	r7, sp, #0
    920e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9210:	687b      	ldr	r3, [r7, #4]
    9212:	2280      	movs	r2, #128	; 0x80
    9214:	05d2      	lsls	r2, r2, #23
    9216:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    9218:	687b      	ldr	r3, [r7, #4]
    921a:	2200      	movs	r2, #0
    921c:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    921e:	687b      	ldr	r3, [r7, #4]
    9220:	22ff      	movs	r2, #255	; 0xff
    9222:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    9224:	687b      	ldr	r3, [r7, #4]
    9226:	2200      	movs	r2, #0
    9228:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    922a:	687b      	ldr	r3, [r7, #4]
    922c:	2200      	movs	r2, #0
    922e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    9230:	687b      	ldr	r3, [r7, #4]
    9232:	2296      	movs	r2, #150	; 0x96
    9234:	0192      	lsls	r2, r2, #6
    9236:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	2224      	movs	r2, #36	; 0x24
    923c:	2101      	movs	r1, #1
    923e:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    9240:	687b      	ldr	r3, [r7, #4]
    9242:	2225      	movs	r2, #37	; 0x25
    9244:	2101      	movs	r1, #1
    9246:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    9248:	687b      	ldr	r3, [r7, #4]
    924a:	2226      	movs	r2, #38	; 0x26
    924c:	2100      	movs	r1, #0
    924e:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	2227      	movs	r2, #39	; 0x27
    9254:	2100      	movs	r1, #0
    9256:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    9258:	687b      	ldr	r3, [r7, #4]
    925a:	2200      	movs	r2, #0
    925c:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    925e:	687b      	ldr	r3, [r7, #4]
    9260:	2288      	movs	r2, #136	; 0x88
    9262:	0352      	lsls	r2, r2, #13
    9264:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    9266:	687b      	ldr	r3, [r7, #4]
    9268:	222c      	movs	r2, #44	; 0x2c
    926a:	2100      	movs	r1, #0
    926c:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    926e:	687b      	ldr	r3, [r7, #4]
    9270:	222d      	movs	r2, #45	; 0x2d
    9272:	2100      	movs	r1, #0
    9274:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    9276:	687b      	ldr	r3, [r7, #4]
    9278:	2200      	movs	r2, #0
    927a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    927c:	687b      	ldr	r3, [r7, #4]
    927e:	2200      	movs	r2, #0
    9280:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	2200      	movs	r2, #0
    9286:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    9288:	687b      	ldr	r3, [r7, #4]
    928a:	2200      	movs	r2, #0
    928c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    928e:	687b      	ldr	r3, [r7, #4]
    9290:	2200      	movs	r2, #0
    9292:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	2200      	movs	r2, #0
    9298:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    929a:	687b      	ldr	r3, [r7, #4]
    929c:	2200      	movs	r2, #0
    929e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	2200      	movs	r2, #0
    92a4:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    92a6:	687b      	ldr	r3, [r7, #4]
    92a8:	2200      	movs	r2, #0
    92aa:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	2200      	movs	r2, #0
    92b0:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    92b2:	687b      	ldr	r3, [r7, #4]
    92b4:	2213      	movs	r2, #19
    92b6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    92b8:	687b      	ldr	r3, [r7, #4]
    92ba:	2200      	movs	r2, #0
    92bc:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    92be:	46c0      	nop			; (mov r8, r8)
    92c0:	46bd      	mov	sp, r7
    92c2:	b002      	add	sp, #8
    92c4:	bd80      	pop	{r7, pc}
	...

000092c8 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    92c8:	b580      	push	{r7, lr}
    92ca:	b084      	sub	sp, #16
    92cc:	af00      	add	r7, sp, #0
    92ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	681b      	ldr	r3, [r3, #0]
    92d4:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	681b      	ldr	r3, [r3, #0]
    92da:	0018      	movs	r0, r3
    92dc:	4b09      	ldr	r3, [pc, #36]	; (9304 <usart_enable+0x3c>)
    92de:	4798      	blx	r3
    92e0:	0003      	movs	r3, r0
    92e2:	0018      	movs	r0, r3
    92e4:	4b08      	ldr	r3, [pc, #32]	; (9308 <usart_enable+0x40>)
    92e6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	0018      	movs	r0, r3
    92ec:	4b07      	ldr	r3, [pc, #28]	; (930c <usart_enable+0x44>)
    92ee:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    92f0:	68fb      	ldr	r3, [r7, #12]
    92f2:	681b      	ldr	r3, [r3, #0]
    92f4:	2202      	movs	r2, #2
    92f6:	431a      	orrs	r2, r3
    92f8:	68fb      	ldr	r3, [r7, #12]
    92fa:	601a      	str	r2, [r3, #0]
}
    92fc:	46c0      	nop			; (mov r8, r8)
    92fe:	46bd      	mov	sp, r7
    9300:	b004      	add	sp, #16
    9302:	bd80      	pop	{r7, pc}
    9304:	0000a329 	.word	0x0000a329
    9308:	00009199 	.word	0x00009199
    930c:	000091e5 	.word	0x000091e5

00009310 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    9310:	b580      	push	{r7, lr}
    9312:	b082      	sub	sp, #8
    9314:	af00      	add	r7, sp, #0
    9316:	6078      	str	r0, [r7, #4]
    9318:	000a      	movs	r2, r1
    931a:	1cfb      	adds	r3, r7, #3
    931c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	2231      	movs	r2, #49	; 0x31
    9322:	5c9b      	ldrb	r3, [r3, r2]
    9324:	b25a      	sxtb	r2, r3
    9326:	1cfb      	adds	r3, r7, #3
    9328:	781b      	ldrb	r3, [r3, #0]
    932a:	2101      	movs	r1, #1
    932c:	4099      	lsls	r1, r3
    932e:	000b      	movs	r3, r1
    9330:	b25b      	sxtb	r3, r3
    9332:	4313      	orrs	r3, r2
    9334:	b25b      	sxtb	r3, r3
    9336:	b2d9      	uxtb	r1, r3
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	2231      	movs	r2, #49	; 0x31
    933c:	5499      	strb	r1, [r3, r2]

}
    933e:	46c0      	nop			; (mov r8, r8)
    9340:	46bd      	mov	sp, r7
    9342:	b002      	add	sp, #8
    9344:	bd80      	pop	{r7, pc}
	...

00009348 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole(void)
{
    9348:	b580      	push	{r7, lr}
    934a:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    934c:	2380      	movs	r3, #128	; 0x80
    934e:	009a      	lsls	r2, r3, #2
    9350:	4b0f      	ldr	r3, [pc, #60]	; (9390 <InitializeSerialConsole+0x48>)
    9352:	0011      	movs	r1, r2
    9354:	0018      	movs	r0, r3
    9356:	4b0f      	ldr	r3, [pc, #60]	; (9394 <InitializeSerialConsole+0x4c>)
    9358:	4798      	blx	r3
    935a:	0002      	movs	r2, r0
    935c:	4b0e      	ldr	r3, [pc, #56]	; (9398 <InitializeSerialConsole+0x50>)
    935e:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    9360:	2380      	movs	r3, #128	; 0x80
    9362:	009a      	lsls	r2, r3, #2
    9364:	4b0d      	ldr	r3, [pc, #52]	; (939c <InitializeSerialConsole+0x54>)
    9366:	0011      	movs	r1, r2
    9368:	0018      	movs	r0, r3
    936a:	4b0a      	ldr	r3, [pc, #40]	; (9394 <InitializeSerialConsole+0x4c>)
    936c:	4798      	blx	r3
    936e:	0002      	movs	r2, r0
    9370:	4b0b      	ldr	r3, [pc, #44]	; (93a0 <InitializeSerialConsole+0x58>)
    9372:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
    9374:	4b0b      	ldr	r3, [pc, #44]	; (93a4 <InitializeSerialConsole+0x5c>)
    9376:	4798      	blx	r3
	configure_usart_callbacks();
    9378:	4b0b      	ldr	r3, [pc, #44]	; (93a8 <InitializeSerialConsole+0x60>)
    937a:	4798      	blx	r3
	
	
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    937c:	490b      	ldr	r1, [pc, #44]	; (93ac <InitializeSerialConsole+0x64>)
    937e:	4b0c      	ldr	r3, [pc, #48]	; (93b0 <InitializeSerialConsole+0x68>)
    9380:	2201      	movs	r2, #1
    9382:	0018      	movs	r0, r3
    9384:	4b0b      	ldr	r3, [pc, #44]	; (93b4 <InitializeSerialConsole+0x6c>)
    9386:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
    9388:	46c0      	nop			; (mov r8, r8)
    938a:	46bd      	mov	sp, r7
    938c:	bd80      	pop	{r7, pc}
    938e:	46c0      	nop			; (mov r8, r8)
    9390:	20004d58 	.word	0x20004d58
    9394:	00009079 	.word	0x00009079
    9398:	20004b50 	.word	0x20004b50
    939c:	20004b58 	.word	0x20004b58
    93a0:	20004f5c 	.word	0x20004f5c
    93a4:	000094fd 	.word	0x000094fd
    93a8:	00009575 	.word	0x00009575
    93ac:	20004b54 	.word	0x20004b54
    93b0:	20004b1c 	.word	0x20004b1c
    93b4:	0000ac1d 	.word	0x0000ac1d

000093b8 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be thread safe.
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
    93b8:	b580      	push	{r7, lr}
    93ba:	b084      	sub	sp, #16
    93bc:	af00      	add	r7, sp, #0
    93be:	6078      	str	r0, [r7, #4]
vTaskSuspendAll();
    93c0:	4b1a      	ldr	r3, [pc, #104]	; (942c <SerialConsoleWriteString+0x74>)
    93c2:	4798      	blx	r3
	if(string != NULL)
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	2b00      	cmp	r3, #0
    93c8:	d02a      	beq.n	9420 <SerialConsoleWriteString+0x68>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
    93ca:	2300      	movs	r3, #0
    93cc:	60fb      	str	r3, [r7, #12]
    93ce:	e00b      	b.n	93e8 <SerialConsoleWriteString+0x30>
		{
			circular_buf_put(cbufTx, string[iter]);
    93d0:	4b17      	ldr	r3, [pc, #92]	; (9430 <SerialConsoleWriteString+0x78>)
    93d2:	6818      	ldr	r0, [r3, #0]
    93d4:	687a      	ldr	r2, [r7, #4]
    93d6:	68fb      	ldr	r3, [r7, #12]
    93d8:	18d3      	adds	r3, r2, r3
    93da:	781b      	ldrb	r3, [r3, #0]
    93dc:	0019      	movs	r1, r3
    93de:	4b15      	ldr	r3, [pc, #84]	; (9434 <SerialConsoleWriteString+0x7c>)
    93e0:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
    93e2:	68fb      	ldr	r3, [r7, #12]
    93e4:	3301      	adds	r3, #1
    93e6:	60fb      	str	r3, [r7, #12]
    93e8:	687b      	ldr	r3, [r7, #4]
    93ea:	0018      	movs	r0, r3
    93ec:	4b12      	ldr	r3, [pc, #72]	; (9438 <SerialConsoleWriteString+0x80>)
    93ee:	4798      	blx	r3
    93f0:	0002      	movs	r2, r0
    93f2:	68fb      	ldr	r3, [r7, #12]
    93f4:	429a      	cmp	r2, r3
    93f6:	d8eb      	bhi.n	93d0 <SerialConsoleWriteString+0x18>
		}

		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    93f8:	4b10      	ldr	r3, [pc, #64]	; (943c <SerialConsoleWriteString+0x84>)
    93fa:	2101      	movs	r1, #1
    93fc:	0018      	movs	r0, r3
    93fe:	4b10      	ldr	r3, [pc, #64]	; (9440 <SerialConsoleWriteString+0x88>)
    9400:	4798      	blx	r3
    9402:	1e03      	subs	r3, r0, #0
    9404:	d10c      	bne.n	9420 <SerialConsoleWriteString+0x68>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    9406:	4b0a      	ldr	r3, [pc, #40]	; (9430 <SerialConsoleWriteString+0x78>)
    9408:	681b      	ldr	r3, [r3, #0]
    940a:	4a0e      	ldr	r2, [pc, #56]	; (9444 <SerialConsoleWriteString+0x8c>)
    940c:	0011      	movs	r1, r2
    940e:	0018      	movs	r0, r3
    9410:	4b0d      	ldr	r3, [pc, #52]	; (9448 <SerialConsoleWriteString+0x90>)
    9412:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    9414:	490b      	ldr	r1, [pc, #44]	; (9444 <SerialConsoleWriteString+0x8c>)
    9416:	4b09      	ldr	r3, [pc, #36]	; (943c <SerialConsoleWriteString+0x84>)
    9418:	2201      	movs	r2, #1
    941a:	0018      	movs	r0, r3
    941c:	4b0b      	ldr	r3, [pc, #44]	; (944c <SerialConsoleWriteString+0x94>)
    941e:	4798      	blx	r3
		}
	}
xTaskResumeAll();
    9420:	4b0b      	ldr	r3, [pc, #44]	; (9450 <SerialConsoleWriteString+0x98>)
    9422:	4798      	blx	r3
}
    9424:	46c0      	nop			; (mov r8, r8)
    9426:	46bd      	mov	sp, r7
    9428:	b004      	add	sp, #16
    942a:	bd80      	pop	{r7, pc}
    942c:	00007ad9 	.word	0x00007ad9
    9430:	20004f5c 	.word	0x20004f5c
    9434:	000090d9 	.word	0x000090d9
    9438:	0000e479 	.word	0x0000e479
    943c:	20004b1c 	.word	0x20004b1c
    9440:	0000ac65 	.word	0x0000ac65
    9444:	20004f58 	.word	0x20004f58
    9448:	0000910d 	.word	0x0000910d
    944c:	0000abd5 	.word	0x0000abd5
    9450:	00007af1 	.word	0x00007af1

00009454 <SerialConsoleReadCharacter>:
* @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
* @return		Returns -1 if there are no characters in the buffer
* @note			Use to receive characters from the RX buffer (FIFO)
*****************************************************************************/
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
    9454:	b580      	push	{r7, lr}
    9456:	b084      	sub	sp, #16
    9458:	af00      	add	r7, sp, #0
    945a:	6078      	str	r0, [r7, #4]
	vTaskSuspendAll();
    945c:	4b08      	ldr	r3, [pc, #32]	; (9480 <SerialConsoleReadCharacter+0x2c>)
    945e:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
    9460:	4b08      	ldr	r3, [pc, #32]	; (9484 <SerialConsoleReadCharacter+0x30>)
    9462:	681b      	ldr	r3, [r3, #0]
    9464:	687a      	ldr	r2, [r7, #4]
    9466:	0011      	movs	r1, r2
    9468:	0018      	movs	r0, r3
    946a:	4b07      	ldr	r3, [pc, #28]	; (9488 <SerialConsoleReadCharacter+0x34>)
    946c:	4798      	blx	r3
    946e:	0003      	movs	r3, r0
    9470:	60fb      	str	r3, [r7, #12]
	xTaskResumeAll();
    9472:	4b06      	ldr	r3, [pc, #24]	; (948c <SerialConsoleReadCharacter+0x38>)
    9474:	4798      	blx	r3
	return a;
    9476:	68fb      	ldr	r3, [r7, #12]

}
    9478:	0018      	movs	r0, r3
    947a:	46bd      	mov	sp, r7
    947c:	b004      	add	sp, #16
    947e:	bd80      	pop	{r7, pc}
    9480:	00007ad9 	.word	0x00007ad9
    9484:	20004b50 	.word	0x20004b50
    9488:	0000910d 	.word	0x0000910d
    948c:	00007af1 	.word	0x00007af1

00009490 <getLogLevel>:
* @return		Returns the current debug level of the system.
* @note
*****************************************************************************/

enum eDebugLogLevels getLogLevel(void)
{
    9490:	b580      	push	{r7, lr}
    9492:	af00      	add	r7, sp, #0
return currentDebugLevel;
    9494:	4b02      	ldr	r3, [pc, #8]	; (94a0 <getLogLevel+0x10>)
    9496:	781b      	ldrb	r3, [r3, #0]
}
    9498:	0018      	movs	r0, r3
    949a:	46bd      	mov	sp, r7
    949c:	bd80      	pop	{r7, pc}
    949e:	46c0      	nop			; (mov r8, r8)
    94a0:	20003820 	.word	0x20003820

000094a4 <LogMessage>:
* @fn			LogMessage (Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    94a4:	b40e      	push	{r1, r2, r3}
    94a6:	b590      	push	{r4, r7, lr}
    94a8:	b084      	sub	sp, #16
    94aa:	af00      	add	r7, sp, #0
    94ac:	0002      	movs	r2, r0
    94ae:	1dfb      	adds	r3, r7, #7
    94b0:	701a      	strb	r2, [r3, #0]

if(getLogLevel() <= level){
    94b2:	4b0e      	ldr	r3, [pc, #56]	; (94ec <LogMessage+0x48>)
    94b4:	4798      	blx	r3
    94b6:	0003      	movs	r3, r0
    94b8:	001a      	movs	r2, r3
    94ba:	1dfb      	adds	r3, r7, #7
    94bc:	781b      	ldrb	r3, [r3, #0]
    94be:	4293      	cmp	r3, r2
    94c0:	d30c      	bcc.n	94dc <LogMessage+0x38>
	va_list ap;
	va_start(ap, format);
    94c2:	2320      	movs	r3, #32
    94c4:	18fb      	adds	r3, r7, r3
    94c6:	60fb      	str	r3, [r7, #12]
	vsnprintf(debugBuffer, 127, format, ap);
    94c8:	68fb      	ldr	r3, [r7, #12]
    94ca:	69fa      	ldr	r2, [r7, #28]
    94cc:	4808      	ldr	r0, [pc, #32]	; (94f0 <LogMessage+0x4c>)
    94ce:	217f      	movs	r1, #127	; 0x7f
    94d0:	4c08      	ldr	r4, [pc, #32]	; (94f4 <LogMessage+0x50>)
    94d2:	47a0      	blx	r4
	SerialConsoleWriteString(debugBuffer);
    94d4:	4b06      	ldr	r3, [pc, #24]	; (94f0 <LogMessage+0x4c>)
    94d6:	0018      	movs	r0, r3
    94d8:	4b07      	ldr	r3, [pc, #28]	; (94f8 <LogMessage+0x54>)
    94da:	4798      	blx	r3
	va_end(ap);
}
};
    94dc:	46c0      	nop			; (mov r8, r8)
    94de:	46bd      	mov	sp, r7
    94e0:	b004      	add	sp, #16
    94e2:	bc90      	pop	{r4, r7}
    94e4:	bc08      	pop	{r3}
    94e6:	b003      	add	sp, #12
    94e8:	4718      	bx	r3
    94ea:	46c0      	nop			; (mov r8, r8)
    94ec:	00009491 	.word	0x00009491
    94f0:	20004a9c 	.word	0x20004a9c
    94f4:	0000e661 	.word	0x0000e661
    94f8:	000093b9 	.word	0x000093b9

000094fc <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
    94fc:	b580      	push	{r7, lr}
    94fe:	b090      	sub	sp, #64	; 0x40
    9500:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    9502:	003b      	movs	r3, r7
    9504:	0018      	movs	r0, r3
    9506:	4b14      	ldr	r3, [pc, #80]	; (9558 <configure_usart+0x5c>)
    9508:	4798      	blx	r3

	config_usart.baudrate    = 115200;
    950a:	003b      	movs	r3, r7
    950c:	22e1      	movs	r2, #225	; 0xe1
    950e:	0252      	lsls	r2, r2, #9
    9510:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    9512:	003b      	movs	r3, r7
    9514:	22c4      	movs	r2, #196	; 0xc4
    9516:	0392      	lsls	r2, r2, #14
    9518:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    951a:	003b      	movs	r3, r7
    951c:	2201      	movs	r2, #1
    951e:	4252      	negs	r2, r2
    9520:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    9522:	003b      	movs	r3, r7
    9524:	2201      	movs	r2, #1
    9526:	4252      	negs	r2, r2
    9528:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    952a:	003b      	movs	r3, r7
    952c:	4a0b      	ldr	r2, [pc, #44]	; (955c <configure_usart+0x60>)
    952e:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    9530:	003b      	movs	r3, r7
    9532:	4a0b      	ldr	r2, [pc, #44]	; (9560 <configure_usart+0x64>)
    9534:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
    9536:	46c0      	nop			; (mov r8, r8)
    9538:	003a      	movs	r2, r7
    953a:	490a      	ldr	r1, [pc, #40]	; (9564 <configure_usart+0x68>)
    953c:	4b0a      	ldr	r3, [pc, #40]	; (9568 <configure_usart+0x6c>)
    953e:	0018      	movs	r0, r3
    9540:	4b0a      	ldr	r3, [pc, #40]	; (956c <configure_usart+0x70>)
    9542:	4798      	blx	r3
    9544:	1e03      	subs	r3, r0, #0
    9546:	d1f7      	bne.n	9538 <configure_usart+0x3c>
					  &config_usart) != STATUS_OK) 
	{

	}
	
	usart_enable(&usart_instance);
    9548:	4b07      	ldr	r3, [pc, #28]	; (9568 <configure_usart+0x6c>)
    954a:	0018      	movs	r0, r3
    954c:	4b08      	ldr	r3, [pc, #32]	; (9570 <configure_usart+0x74>)
    954e:	4798      	blx	r3
}
    9550:	46c0      	nop			; (mov r8, r8)
    9552:	46bd      	mov	sp, r7
    9554:	b010      	add	sp, #64	; 0x40
    9556:	bd80      	pop	{r7, pc}
    9558:	00009209 	.word	0x00009209
    955c:	002a0003 	.word	0x002a0003
    9560:	002b0003 	.word	0x002b0003
    9564:	42001800 	.word	0x42001800
    9568:	20004b1c 	.word	0x20004b1c
    956c:	0000a7d9 	.word	0x0000a7d9
    9570:	000092c9 	.word	0x000092c9

00009574 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
    9574:	b580      	push	{r7, lr}
    9576:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
    9578:	490c      	ldr	r1, [pc, #48]	; (95ac <configure_usart_callbacks+0x38>)
    957a:	4b0d      	ldr	r3, [pc, #52]	; (95b0 <configure_usart_callbacks+0x3c>)
    957c:	2200      	movs	r2, #0
    957e:	0018      	movs	r0, r3
    9580:	4b0c      	ldr	r3, [pc, #48]	; (95b4 <configure_usart_callbacks+0x40>)
    9582:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    9584:	490c      	ldr	r1, [pc, #48]	; (95b8 <configure_usart_callbacks+0x44>)
    9586:	4b0a      	ldr	r3, [pc, #40]	; (95b0 <configure_usart_callbacks+0x3c>)
    9588:	2201      	movs	r2, #1
    958a:	0018      	movs	r0, r3
    958c:	4b09      	ldr	r3, [pc, #36]	; (95b4 <configure_usart_callbacks+0x40>)
    958e:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    9590:	4b07      	ldr	r3, [pc, #28]	; (95b0 <configure_usart_callbacks+0x3c>)
    9592:	2100      	movs	r1, #0
    9594:	0018      	movs	r0, r3
    9596:	4b09      	ldr	r3, [pc, #36]	; (95bc <configure_usart_callbacks+0x48>)
    9598:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    959a:	4b05      	ldr	r3, [pc, #20]	; (95b0 <configure_usart_callbacks+0x3c>)
    959c:	2101      	movs	r1, #1
    959e:	0018      	movs	r0, r3
    95a0:	4b06      	ldr	r3, [pc, #24]	; (95bc <configure_usart_callbacks+0x48>)
    95a2:	4798      	blx	r3
}
    95a4:	46c0      	nop			; (mov r8, r8)
    95a6:	46bd      	mov	sp, r7
    95a8:	bd80      	pop	{r7, pc}
    95aa:	46c0      	nop			; (mov r8, r8)
    95ac:	00009609 	.word	0x00009609
    95b0:	20004b1c 	.word	0x20004b1c
    95b4:	0000ab8d 	.word	0x0000ab8d
    95b8:	000095c1 	.word	0x000095c1
    95bc:	00009311 	.word	0x00009311

000095c0 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
    95c0:	b580      	push	{r7, lr}
    95c2:	b082      	sub	sp, #8
    95c4:	af00      	add	r7, sp, #0
    95c6:	6078      	str	r0, [r7, #4]

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    95c8:	4b09      	ldr	r3, [pc, #36]	; (95f0 <usart_read_callback+0x30>)
    95ca:	681a      	ldr	r2, [r3, #0]
    95cc:	4b09      	ldr	r3, [pc, #36]	; (95f4 <usart_read_callback+0x34>)
    95ce:	781b      	ldrb	r3, [r3, #0]
    95d0:	0019      	movs	r1, r3
    95d2:	0010      	movs	r0, r2
    95d4:	4b08      	ldr	r3, [pc, #32]	; (95f8 <usart_read_callback+0x38>)
    95d6:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    95d8:	4906      	ldr	r1, [pc, #24]	; (95f4 <usart_read_callback+0x34>)
    95da:	4b08      	ldr	r3, [pc, #32]	; (95fc <usart_read_callback+0x3c>)
    95dc:	2201      	movs	r2, #1
    95de:	0018      	movs	r0, r3
    95e0:	4b07      	ldr	r3, [pc, #28]	; (9600 <usart_read_callback+0x40>)
    95e2:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR(); //Give binary semaphore
    95e4:	4b07      	ldr	r3, [pc, #28]	; (9604 <usart_read_callback+0x44>)
    95e6:	4798      	blx	r3
	
}
    95e8:	46c0      	nop			; (mov r8, r8)
    95ea:	46bd      	mov	sp, r7
    95ec:	b002      	add	sp, #8
    95ee:	bd80      	pop	{r7, pc}
    95f0:	20004b50 	.word	0x20004b50
    95f4:	20004b54 	.word	0x20004b54
    95f8:	000090d9 	.word	0x000090d9
    95fc:	20004b1c 	.word	0x20004b1c
    9600:	0000ac1d 	.word	0x0000ac1d
    9604:	00000c09 	.word	0x00000c09

00009608 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    9608:	b580      	push	{r7, lr}
    960a:	b082      	sub	sp, #8
    960c:	af00      	add	r7, sp, #0
    960e:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    9610:	4b09      	ldr	r3, [pc, #36]	; (9638 <usart_write_callback+0x30>)
    9612:	681b      	ldr	r3, [r3, #0]
    9614:	4a09      	ldr	r2, [pc, #36]	; (963c <usart_write_callback+0x34>)
    9616:	0011      	movs	r1, r2
    9618:	0018      	movs	r0, r3
    961a:	4b09      	ldr	r3, [pc, #36]	; (9640 <usart_write_callback+0x38>)
    961c:	4798      	blx	r3
    961e:	0003      	movs	r3, r0
    9620:	3301      	adds	r3, #1
    9622:	d005      	beq.n	9630 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    9624:	4905      	ldr	r1, [pc, #20]	; (963c <usart_write_callback+0x34>)
    9626:	4b07      	ldr	r3, [pc, #28]	; (9644 <usart_write_callback+0x3c>)
    9628:	2201      	movs	r2, #1
    962a:	0018      	movs	r0, r3
    962c:	4b06      	ldr	r3, [pc, #24]	; (9648 <usart_write_callback+0x40>)
    962e:	4798      	blx	r3
	}
	
}
    9630:	46c0      	nop			; (mov r8, r8)
    9632:	46bd      	mov	sp, r7
    9634:	b002      	add	sp, #8
    9636:	bd80      	pop	{r7, pc}
    9638:	20004f5c 	.word	0x20004f5c
    963c:	20004f58 	.word	0x20004f58
    9640:	0000910d 	.word	0x0000910d
    9644:	20004b1c 	.word	0x20004b1c
    9648:	0000abd5 	.word	0x0000abd5

0000964c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    964c:	b580      	push	{r7, lr}
    964e:	b082      	sub	sp, #8
    9650:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    9652:	4b10      	ldr	r3, [pc, #64]	; (9694 <cpu_irq_enter_critical+0x48>)
    9654:	681b      	ldr	r3, [r3, #0]
    9656:	2b00      	cmp	r3, #0
    9658:	d112      	bne.n	9680 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    965a:	f3ef 8310 	mrs	r3, PRIMASK
    965e:	607b      	str	r3, [r7, #4]
  return(result);
    9660:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    9662:	2b00      	cmp	r3, #0
    9664:	d109      	bne.n	967a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    9666:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    9668:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    966c:	4b0a      	ldr	r3, [pc, #40]	; (9698 <cpu_irq_enter_critical+0x4c>)
    966e:	2200      	movs	r2, #0
    9670:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    9672:	4b0a      	ldr	r3, [pc, #40]	; (969c <cpu_irq_enter_critical+0x50>)
    9674:	2201      	movs	r2, #1
    9676:	701a      	strb	r2, [r3, #0]
    9678:	e002      	b.n	9680 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    967a:	4b08      	ldr	r3, [pc, #32]	; (969c <cpu_irq_enter_critical+0x50>)
    967c:	2200      	movs	r2, #0
    967e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    9680:	4b04      	ldr	r3, [pc, #16]	; (9694 <cpu_irq_enter_critical+0x48>)
    9682:	681b      	ldr	r3, [r3, #0]
    9684:	1c5a      	adds	r2, r3, #1
    9686:	4b03      	ldr	r3, [pc, #12]	; (9694 <cpu_irq_enter_critical+0x48>)
    9688:	601a      	str	r2, [r3, #0]
}
    968a:	46c0      	nop			; (mov r8, r8)
    968c:	46bd      	mov	sp, r7
    968e:	b002      	add	sp, #8
    9690:	bd80      	pop	{r7, pc}
    9692:	46c0      	nop			; (mov r8, r8)
    9694:	20003824 	.word	0x20003824
    9698:	2000002c 	.word	0x2000002c
    969c:	20003828 	.word	0x20003828

000096a0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    96a0:	b580      	push	{r7, lr}
    96a2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    96a4:	4b0b      	ldr	r3, [pc, #44]	; (96d4 <cpu_irq_leave_critical+0x34>)
    96a6:	681b      	ldr	r3, [r3, #0]
    96a8:	1e5a      	subs	r2, r3, #1
    96aa:	4b0a      	ldr	r3, [pc, #40]	; (96d4 <cpu_irq_leave_critical+0x34>)
    96ac:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    96ae:	4b09      	ldr	r3, [pc, #36]	; (96d4 <cpu_irq_leave_critical+0x34>)
    96b0:	681b      	ldr	r3, [r3, #0]
    96b2:	2b00      	cmp	r3, #0
    96b4:	d10a      	bne.n	96cc <cpu_irq_leave_critical+0x2c>
    96b6:	4b08      	ldr	r3, [pc, #32]	; (96d8 <cpu_irq_leave_critical+0x38>)
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	b2db      	uxtb	r3, r3
    96bc:	2b00      	cmp	r3, #0
    96be:	d005      	beq.n	96cc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    96c0:	4b06      	ldr	r3, [pc, #24]	; (96dc <cpu_irq_leave_critical+0x3c>)
    96c2:	2201      	movs	r2, #1
    96c4:	701a      	strb	r2, [r3, #0]
    96c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    96ca:	b662      	cpsie	i
	}
}
    96cc:	46c0      	nop			; (mov r8, r8)
    96ce:	46bd      	mov	sp, r7
    96d0:	bd80      	pop	{r7, pc}
    96d2:	46c0      	nop			; (mov r8, r8)
    96d4:	20003824 	.word	0x20003824
    96d8:	20003828 	.word	0x20003828
    96dc:	2000002c 	.word	0x2000002c

000096e0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    96e0:	b580      	push	{r7, lr}
    96e2:	b084      	sub	sp, #16
    96e4:	af00      	add	r7, sp, #0
    96e6:	0002      	movs	r2, r0
    96e8:	1dfb      	adds	r3, r7, #7
    96ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    96ec:	230f      	movs	r3, #15
    96ee:	18fb      	adds	r3, r7, r3
    96f0:	1dfa      	adds	r2, r7, #7
    96f2:	7812      	ldrb	r2, [r2, #0]
    96f4:	09d2      	lsrs	r2, r2, #7
    96f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    96f8:	230e      	movs	r3, #14
    96fa:	18fb      	adds	r3, r7, r3
    96fc:	1dfa      	adds	r2, r7, #7
    96fe:	7812      	ldrb	r2, [r2, #0]
    9700:	0952      	lsrs	r2, r2, #5
    9702:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9704:	4b0d      	ldr	r3, [pc, #52]	; (973c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9706:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    9708:	230f      	movs	r3, #15
    970a:	18fb      	adds	r3, r7, r3
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	2b00      	cmp	r3, #0
    9710:	d10f      	bne.n	9732 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9712:	230f      	movs	r3, #15
    9714:	18fb      	adds	r3, r7, r3
    9716:	781b      	ldrb	r3, [r3, #0]
    9718:	009b      	lsls	r3, r3, #2
    971a:	2210      	movs	r2, #16
    971c:	4694      	mov	ip, r2
    971e:	44bc      	add	ip, r7
    9720:	4463      	add	r3, ip
    9722:	3b08      	subs	r3, #8
    9724:	681a      	ldr	r2, [r3, #0]
    9726:	230e      	movs	r3, #14
    9728:	18fb      	adds	r3, r7, r3
    972a:	781b      	ldrb	r3, [r3, #0]
    972c:	01db      	lsls	r3, r3, #7
    972e:	18d3      	adds	r3, r2, r3
    9730:	e000      	b.n	9734 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    9732:	2300      	movs	r3, #0
	}
}
    9734:	0018      	movs	r0, r3
    9736:	46bd      	mov	sp, r7
    9738:	b004      	add	sp, #16
    973a:	bd80      	pop	{r7, pc}
    973c:	41004400 	.word	0x41004400

00009740 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9740:	b580      	push	{r7, lr}
    9742:	b082      	sub	sp, #8
    9744:	af00      	add	r7, sp, #0
    9746:	0002      	movs	r2, r0
    9748:	1dfb      	adds	r3, r7, #7
    974a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    974c:	1dfb      	adds	r3, r7, #7
    974e:	781b      	ldrb	r3, [r3, #0]
    9750:	0018      	movs	r0, r3
    9752:	4b03      	ldr	r3, [pc, #12]	; (9760 <port_get_group_from_gpio_pin+0x20>)
    9754:	4798      	blx	r3
    9756:	0003      	movs	r3, r0
}
    9758:	0018      	movs	r0, r3
    975a:	46bd      	mov	sp, r7
    975c:	b002      	add	sp, #8
    975e:	bd80      	pop	{r7, pc}
    9760:	000096e1 	.word	0x000096e1

00009764 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    9764:	b580      	push	{r7, lr}
    9766:	b082      	sub	sp, #8
    9768:	af00      	add	r7, sp, #0
    976a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	2200      	movs	r2, #0
    9770:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    9772:	687b      	ldr	r3, [r7, #4]
    9774:	2201      	movs	r2, #1
    9776:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    9778:	687b      	ldr	r3, [r7, #4]
    977a:	2200      	movs	r2, #0
    977c:	709a      	strb	r2, [r3, #2]
}
    977e:	46c0      	nop			; (mov r8, r8)
    9780:	46bd      	mov	sp, r7
    9782:	b002      	add	sp, #8
    9784:	bd80      	pop	{r7, pc}
	...

00009788 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    9788:	b580      	push	{r7, lr}
    978a:	b084      	sub	sp, #16
    978c:	af00      	add	r7, sp, #0
    978e:	0002      	movs	r2, r0
    9790:	1dfb      	adds	r3, r7, #7
    9792:	701a      	strb	r2, [r3, #0]
    9794:	1dbb      	adds	r3, r7, #6
    9796:	1c0a      	adds	r2, r1, #0
    9798:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    979a:	1dfb      	adds	r3, r7, #7
    979c:	781b      	ldrb	r3, [r3, #0]
    979e:	0018      	movs	r0, r3
    97a0:	4b0d      	ldr	r3, [pc, #52]	; (97d8 <port_pin_set_output_level+0x50>)
    97a2:	4798      	blx	r3
    97a4:	0003      	movs	r3, r0
    97a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    97a8:	1dfb      	adds	r3, r7, #7
    97aa:	781b      	ldrb	r3, [r3, #0]
    97ac:	221f      	movs	r2, #31
    97ae:	4013      	ands	r3, r2
    97b0:	2201      	movs	r2, #1
    97b2:	409a      	lsls	r2, r3
    97b4:	0013      	movs	r3, r2
    97b6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    97b8:	1dbb      	adds	r3, r7, #6
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	2b00      	cmp	r3, #0
    97be:	d003      	beq.n	97c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    97c0:	68fb      	ldr	r3, [r7, #12]
    97c2:	68ba      	ldr	r2, [r7, #8]
    97c4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    97c6:	e002      	b.n	97ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    97c8:	68fb      	ldr	r3, [r7, #12]
    97ca:	68ba      	ldr	r2, [r7, #8]
    97cc:	615a      	str	r2, [r3, #20]
}
    97ce:	46c0      	nop			; (mov r8, r8)
    97d0:	46bd      	mov	sp, r7
    97d2:	b004      	add	sp, #16
    97d4:	bd80      	pop	{r7, pc}
    97d6:	46c0      	nop			; (mov r8, r8)
    97d8:	00009741 	.word	0x00009741

000097dc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    97dc:	b580      	push	{r7, lr}
    97de:	b082      	sub	sp, #8
    97e0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    97e2:	1d3b      	adds	r3, r7, #4
    97e4:	0018      	movs	r0, r3
    97e6:	4b0e      	ldr	r3, [pc, #56]	; (9820 <system_board_init+0x44>)
    97e8:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    97ea:	1d3b      	adds	r3, r7, #4
    97ec:	2201      	movs	r2, #1
    97ee:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    97f0:	1d3b      	adds	r3, r7, #4
    97f2:	0019      	movs	r1, r3
    97f4:	2017      	movs	r0, #23
    97f6:	4b0b      	ldr	r3, [pc, #44]	; (9824 <system_board_init+0x48>)
    97f8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    97fa:	2101      	movs	r1, #1
    97fc:	2017      	movs	r0, #23
    97fe:	4b0a      	ldr	r3, [pc, #40]	; (9828 <system_board_init+0x4c>)
    9800:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    9802:	1d3b      	adds	r3, r7, #4
    9804:	2200      	movs	r2, #0
    9806:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    9808:	1d3b      	adds	r3, r7, #4
    980a:	2201      	movs	r2, #1
    980c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    980e:	1d3b      	adds	r3, r7, #4
    9810:	0019      	movs	r1, r3
    9812:	2037      	movs	r0, #55	; 0x37
    9814:	4b03      	ldr	r3, [pc, #12]	; (9824 <system_board_init+0x48>)
    9816:	4798      	blx	r3
}
    9818:	46c0      	nop			; (mov r8, r8)
    981a:	46bd      	mov	sp, r7
    981c:	b002      	add	sp, #8
    981e:	bd80      	pop	{r7, pc}
    9820:	00009765 	.word	0x00009765
    9824:	00009bb9 	.word	0x00009bb9
    9828:	00009789 	.word	0x00009789

0000982c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    982c:	b580      	push	{r7, lr}
    982e:	b084      	sub	sp, #16
    9830:	af00      	add	r7, sp, #0
    9832:	0002      	movs	r2, r0
    9834:	1dfb      	adds	r3, r7, #7
    9836:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    9838:	230f      	movs	r3, #15
    983a:	18fb      	adds	r3, r7, r3
    983c:	1dfa      	adds	r2, r7, #7
    983e:	7812      	ldrb	r2, [r2, #0]
    9840:	0952      	lsrs	r2, r2, #5
    9842:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    9844:	230f      	movs	r3, #15
    9846:	18fb      	adds	r3, r7, r3
    9848:	781b      	ldrb	r3, [r3, #0]
    984a:	2b00      	cmp	r3, #0
    984c:	d10c      	bne.n	9868 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    984e:	4b09      	ldr	r3, [pc, #36]	; (9874 <_extint_get_eic_from_channel+0x48>)
    9850:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    9852:	230f      	movs	r3, #15
    9854:	18fb      	adds	r3, r7, r3
    9856:	781b      	ldrb	r3, [r3, #0]
    9858:	009b      	lsls	r3, r3, #2
    985a:	2210      	movs	r2, #16
    985c:	4694      	mov	ip, r2
    985e:	44bc      	add	ip, r7
    9860:	4463      	add	r3, ip
    9862:	3b08      	subs	r3, #8
    9864:	681b      	ldr	r3, [r3, #0]
    9866:	e000      	b.n	986a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    9868:	2300      	movs	r3, #0
	}
}
    986a:	0018      	movs	r0, r3
    986c:	46bd      	mov	sp, r7
    986e:	b004      	add	sp, #16
    9870:	bd80      	pop	{r7, pc}
    9872:	46c0      	nop			; (mov r8, r8)
    9874:	40001800 	.word	0x40001800

00009878 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    9878:	b580      	push	{r7, lr}
    987a:	b084      	sub	sp, #16
    987c:	af00      	add	r7, sp, #0
    987e:	0002      	movs	r2, r0
    9880:	1dfb      	adds	r3, r7, #7
    9882:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    9884:	1dfb      	adds	r3, r7, #7
    9886:	781b      	ldrb	r3, [r3, #0]
    9888:	0018      	movs	r0, r3
    988a:	4b0b      	ldr	r3, [pc, #44]	; (98b8 <extint_chan_is_detected+0x40>)
    988c:	4798      	blx	r3
    988e:	0003      	movs	r3, r0
    9890:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    9892:	1dfb      	adds	r3, r7, #7
    9894:	781b      	ldrb	r3, [r3, #0]
    9896:	221f      	movs	r2, #31
    9898:	4013      	ands	r3, r2
    989a:	2201      	movs	r2, #1
    989c:	409a      	lsls	r2, r3
    989e:	0013      	movs	r3, r2
    98a0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    98a2:	68fb      	ldr	r3, [r7, #12]
    98a4:	691b      	ldr	r3, [r3, #16]
    98a6:	68ba      	ldr	r2, [r7, #8]
    98a8:	4013      	ands	r3, r2
    98aa:	1e5a      	subs	r2, r3, #1
    98ac:	4193      	sbcs	r3, r2
    98ae:	b2db      	uxtb	r3, r3
}
    98b0:	0018      	movs	r0, r3
    98b2:	46bd      	mov	sp, r7
    98b4:	b004      	add	sp, #16
    98b6:	bd80      	pop	{r7, pc}
    98b8:	0000982d 	.word	0x0000982d

000098bc <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    98bc:	b580      	push	{r7, lr}
    98be:	b084      	sub	sp, #16
    98c0:	af00      	add	r7, sp, #0
    98c2:	0002      	movs	r2, r0
    98c4:	1dfb      	adds	r3, r7, #7
    98c6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    98c8:	1dfb      	adds	r3, r7, #7
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	0018      	movs	r0, r3
    98ce:	4b09      	ldr	r3, [pc, #36]	; (98f4 <extint_chan_clear_detected+0x38>)
    98d0:	4798      	blx	r3
    98d2:	0003      	movs	r3, r0
    98d4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    98d6:	1dfb      	adds	r3, r7, #7
    98d8:	781b      	ldrb	r3, [r3, #0]
    98da:	221f      	movs	r2, #31
    98dc:	4013      	ands	r3, r2
    98de:	2201      	movs	r2, #1
    98e0:	409a      	lsls	r2, r3
    98e2:	0013      	movs	r3, r2
    98e4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    98e6:	68fb      	ldr	r3, [r7, #12]
    98e8:	68ba      	ldr	r2, [r7, #8]
    98ea:	611a      	str	r2, [r3, #16]
}
    98ec:	46c0      	nop			; (mov r8, r8)
    98ee:	46bd      	mov	sp, r7
    98f0:	b004      	add	sp, #16
    98f2:	bd80      	pop	{r7, pc}
    98f4:	0000982d 	.word	0x0000982d

000098f8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    98f8:	b580      	push	{r7, lr}
    98fa:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    98fc:	4b15      	ldr	r3, [pc, #84]	; (9954 <EIC_Handler+0x5c>)
    98fe:	2200      	movs	r2, #0
    9900:	701a      	strb	r2, [r3, #0]
    9902:	e020      	b.n	9946 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    9904:	4b13      	ldr	r3, [pc, #76]	; (9954 <EIC_Handler+0x5c>)
    9906:	781b      	ldrb	r3, [r3, #0]
    9908:	0018      	movs	r0, r3
    990a:	4b13      	ldr	r3, [pc, #76]	; (9958 <EIC_Handler+0x60>)
    990c:	4798      	blx	r3
    990e:	1e03      	subs	r3, r0, #0
    9910:	d013      	beq.n	993a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    9912:	4b10      	ldr	r3, [pc, #64]	; (9954 <EIC_Handler+0x5c>)
    9914:	781b      	ldrb	r3, [r3, #0]
    9916:	0018      	movs	r0, r3
    9918:	4b10      	ldr	r3, [pc, #64]	; (995c <EIC_Handler+0x64>)
    991a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    991c:	4b0d      	ldr	r3, [pc, #52]	; (9954 <EIC_Handler+0x5c>)
    991e:	781b      	ldrb	r3, [r3, #0]
    9920:	001a      	movs	r2, r3
    9922:	4b0f      	ldr	r3, [pc, #60]	; (9960 <EIC_Handler+0x68>)
    9924:	0092      	lsls	r2, r2, #2
    9926:	58d3      	ldr	r3, [r2, r3]
    9928:	2b00      	cmp	r3, #0
    992a:	d006      	beq.n	993a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    992c:	4b09      	ldr	r3, [pc, #36]	; (9954 <EIC_Handler+0x5c>)
    992e:	781b      	ldrb	r3, [r3, #0]
    9930:	001a      	movs	r2, r3
    9932:	4b0b      	ldr	r3, [pc, #44]	; (9960 <EIC_Handler+0x68>)
    9934:	0092      	lsls	r2, r2, #2
    9936:	58d3      	ldr	r3, [r2, r3]
    9938:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    993a:	4b06      	ldr	r3, [pc, #24]	; (9954 <EIC_Handler+0x5c>)
    993c:	781b      	ldrb	r3, [r3, #0]
    993e:	3301      	adds	r3, #1
    9940:	b2da      	uxtb	r2, r3
    9942:	4b04      	ldr	r3, [pc, #16]	; (9954 <EIC_Handler+0x5c>)
    9944:	701a      	strb	r2, [r3, #0]
    9946:	4b03      	ldr	r3, [pc, #12]	; (9954 <EIC_Handler+0x5c>)
    9948:	781b      	ldrb	r3, [r3, #0]
    994a:	2b0f      	cmp	r3, #15
    994c:	d9da      	bls.n	9904 <EIC_Handler+0xc>
			}
		}
	}
}
    994e:	46c0      	nop			; (mov r8, r8)
    9950:	46bd      	mov	sp, r7
    9952:	bd80      	pop	{r7, pc}
    9954:	20004f60 	.word	0x20004f60
    9958:	00009879 	.word	0x00009879
    995c:	000098bd 	.word	0x000098bd
    9960:	20004f64 	.word	0x20004f64

00009964 <system_gclk_chan_get_config_defaults>:
{
    9964:	b580      	push	{r7, lr}
    9966:	b082      	sub	sp, #8
    9968:	af00      	add	r7, sp, #0
    996a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	2200      	movs	r2, #0
    9970:	701a      	strb	r2, [r3, #0]
}
    9972:	46c0      	nop			; (mov r8, r8)
    9974:	46bd      	mov	sp, r7
    9976:	b002      	add	sp, #8
    9978:	bd80      	pop	{r7, pc}
	...

0000997c <system_apb_clock_set_mask>:
{
    997c:	b580      	push	{r7, lr}
    997e:	b082      	sub	sp, #8
    9980:	af00      	add	r7, sp, #0
    9982:	0002      	movs	r2, r0
    9984:	6039      	str	r1, [r7, #0]
    9986:	1dfb      	adds	r3, r7, #7
    9988:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    998a:	1dfb      	adds	r3, r7, #7
    998c:	781b      	ldrb	r3, [r3, #0]
    998e:	2b01      	cmp	r3, #1
    9990:	d00a      	beq.n	99a8 <system_apb_clock_set_mask+0x2c>
    9992:	2b02      	cmp	r3, #2
    9994:	d00f      	beq.n	99b6 <system_apb_clock_set_mask+0x3a>
    9996:	2b00      	cmp	r3, #0
    9998:	d114      	bne.n	99c4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    999a:	4b0e      	ldr	r3, [pc, #56]	; (99d4 <system_apb_clock_set_mask+0x58>)
    999c:	4a0d      	ldr	r2, [pc, #52]	; (99d4 <system_apb_clock_set_mask+0x58>)
    999e:	6991      	ldr	r1, [r2, #24]
    99a0:	683a      	ldr	r2, [r7, #0]
    99a2:	430a      	orrs	r2, r1
    99a4:	619a      	str	r2, [r3, #24]
			break;
    99a6:	e00f      	b.n	99c8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    99a8:	4b0a      	ldr	r3, [pc, #40]	; (99d4 <system_apb_clock_set_mask+0x58>)
    99aa:	4a0a      	ldr	r2, [pc, #40]	; (99d4 <system_apb_clock_set_mask+0x58>)
    99ac:	69d1      	ldr	r1, [r2, #28]
    99ae:	683a      	ldr	r2, [r7, #0]
    99b0:	430a      	orrs	r2, r1
    99b2:	61da      	str	r2, [r3, #28]
			break;
    99b4:	e008      	b.n	99c8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    99b6:	4b07      	ldr	r3, [pc, #28]	; (99d4 <system_apb_clock_set_mask+0x58>)
    99b8:	4a06      	ldr	r2, [pc, #24]	; (99d4 <system_apb_clock_set_mask+0x58>)
    99ba:	6a11      	ldr	r1, [r2, #32]
    99bc:	683a      	ldr	r2, [r7, #0]
    99be:	430a      	orrs	r2, r1
    99c0:	621a      	str	r2, [r3, #32]
			break;
    99c2:	e001      	b.n	99c8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    99c4:	2317      	movs	r3, #23
    99c6:	e000      	b.n	99ca <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    99c8:	2300      	movs	r3, #0
}
    99ca:	0018      	movs	r0, r3
    99cc:	46bd      	mov	sp, r7
    99ce:	b002      	add	sp, #8
    99d0:	bd80      	pop	{r7, pc}
    99d2:	46c0      	nop			; (mov r8, r8)
    99d4:	40000400 	.word	0x40000400

000099d8 <system_interrupt_enable>:
{
    99d8:	b580      	push	{r7, lr}
    99da:	b082      	sub	sp, #8
    99dc:	af00      	add	r7, sp, #0
    99de:	0002      	movs	r2, r0
    99e0:	1dfb      	adds	r3, r7, #7
    99e2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    99e4:	4b06      	ldr	r3, [pc, #24]	; (9a00 <system_interrupt_enable+0x28>)
    99e6:	1dfa      	adds	r2, r7, #7
    99e8:	7812      	ldrb	r2, [r2, #0]
    99ea:	0011      	movs	r1, r2
    99ec:	221f      	movs	r2, #31
    99ee:	400a      	ands	r2, r1
    99f0:	2101      	movs	r1, #1
    99f2:	4091      	lsls	r1, r2
    99f4:	000a      	movs	r2, r1
    99f6:	601a      	str	r2, [r3, #0]
}
    99f8:	46c0      	nop			; (mov r8, r8)
    99fa:	46bd      	mov	sp, r7
    99fc:	b002      	add	sp, #8
    99fe:	bd80      	pop	{r7, pc}
    9a00:	e000e100 	.word	0xe000e100

00009a04 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    9a04:	b580      	push	{r7, lr}
    9a06:	b082      	sub	sp, #8
    9a08:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    9a0a:	4b0f      	ldr	r3, [pc, #60]	; (9a48 <extint_is_syncing+0x44>)
    9a0c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9a0e:	2300      	movs	r3, #0
    9a10:	607b      	str	r3, [r7, #4]
    9a12:	e011      	b.n	9a38 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    9a14:	687b      	ldr	r3, [r7, #4]
    9a16:	009b      	lsls	r3, r3, #2
    9a18:	2208      	movs	r2, #8
    9a1a:	4694      	mov	ip, r2
    9a1c:	44bc      	add	ip, r7
    9a1e:	4463      	add	r3, ip
    9a20:	3b08      	subs	r3, #8
    9a22:	681b      	ldr	r3, [r3, #0]
    9a24:	785b      	ldrb	r3, [r3, #1]
    9a26:	b2db      	uxtb	r3, r3
    9a28:	b25b      	sxtb	r3, r3
    9a2a:	2b00      	cmp	r3, #0
    9a2c:	da01      	bge.n	9a32 <extint_is_syncing+0x2e>
			return true;
    9a2e:	2301      	movs	r3, #1
    9a30:	e006      	b.n	9a40 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9a32:	687b      	ldr	r3, [r7, #4]
    9a34:	3301      	adds	r3, #1
    9a36:	607b      	str	r3, [r7, #4]
    9a38:	687b      	ldr	r3, [r7, #4]
    9a3a:	2b00      	cmp	r3, #0
    9a3c:	d0ea      	beq.n	9a14 <extint_is_syncing+0x10>
		}
	}
	return false;
    9a3e:	2300      	movs	r3, #0
}
    9a40:	0018      	movs	r0, r3
    9a42:	46bd      	mov	sp, r7
    9a44:	b002      	add	sp, #8
    9a46:	bd80      	pop	{r7, pc}
    9a48:	40001800 	.word	0x40001800

00009a4c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    9a4c:	b580      	push	{r7, lr}
    9a4e:	b084      	sub	sp, #16
    9a50:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    9a52:	4b2d      	ldr	r3, [pc, #180]	; (9b08 <_system_extint_init+0xbc>)
    9a54:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    9a56:	2140      	movs	r1, #64	; 0x40
    9a58:	2000      	movs	r0, #0
    9a5a:	4b2c      	ldr	r3, [pc, #176]	; (9b0c <_system_extint_init+0xc0>)
    9a5c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    9a5e:	003b      	movs	r3, r7
    9a60:	0018      	movs	r0, r3
    9a62:	4b2b      	ldr	r3, [pc, #172]	; (9b10 <_system_extint_init+0xc4>)
    9a64:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    9a66:	003b      	movs	r3, r7
    9a68:	2200      	movs	r2, #0
    9a6a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    9a6c:	003b      	movs	r3, r7
    9a6e:	0019      	movs	r1, r3
    9a70:	2005      	movs	r0, #5
    9a72:	4b28      	ldr	r3, [pc, #160]	; (9b14 <_system_extint_init+0xc8>)
    9a74:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    9a76:	2005      	movs	r0, #5
    9a78:	4b27      	ldr	r3, [pc, #156]	; (9b18 <_system_extint_init+0xcc>)
    9a7a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9a7c:	2300      	movs	r3, #0
    9a7e:	60fb      	str	r3, [r7, #12]
    9a80:	e018      	b.n	9ab4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    9a82:	68fb      	ldr	r3, [r7, #12]
    9a84:	009b      	lsls	r3, r3, #2
    9a86:	2210      	movs	r2, #16
    9a88:	4694      	mov	ip, r2
    9a8a:	44bc      	add	ip, r7
    9a8c:	4463      	add	r3, ip
    9a8e:	3b0c      	subs	r3, #12
    9a90:	681a      	ldr	r2, [r3, #0]
    9a92:	68fb      	ldr	r3, [r7, #12]
    9a94:	009b      	lsls	r3, r3, #2
    9a96:	2110      	movs	r1, #16
    9a98:	468c      	mov	ip, r1
    9a9a:	44bc      	add	ip, r7
    9a9c:	4463      	add	r3, ip
    9a9e:	3b0c      	subs	r3, #12
    9aa0:	681b      	ldr	r3, [r3, #0]
    9aa2:	781b      	ldrb	r3, [r3, #0]
    9aa4:	b2db      	uxtb	r3, r3
    9aa6:	2101      	movs	r1, #1
    9aa8:	430b      	orrs	r3, r1
    9aaa:	b2db      	uxtb	r3, r3
    9aac:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9aae:	68fb      	ldr	r3, [r7, #12]
    9ab0:	3301      	adds	r3, #1
    9ab2:	60fb      	str	r3, [r7, #12]
    9ab4:	68fb      	ldr	r3, [r7, #12]
    9ab6:	2b00      	cmp	r3, #0
    9ab8:	d0e3      	beq.n	9a82 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    9aba:	46c0      	nop			; (mov r8, r8)
    9abc:	4b17      	ldr	r3, [pc, #92]	; (9b1c <_system_extint_init+0xd0>)
    9abe:	4798      	blx	r3
    9ac0:	1e03      	subs	r3, r0, #0
    9ac2:	d1fb      	bne.n	9abc <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    9ac4:	230b      	movs	r3, #11
    9ac6:	18fb      	adds	r3, r7, r3
    9ac8:	2200      	movs	r2, #0
    9aca:	701a      	strb	r2, [r3, #0]
    9acc:	e00d      	b.n	9aea <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    9ace:	230b      	movs	r3, #11
    9ad0:	18fb      	adds	r3, r7, r3
    9ad2:	781a      	ldrb	r2, [r3, #0]
    9ad4:	4b12      	ldr	r3, [pc, #72]	; (9b20 <_system_extint_init+0xd4>)
    9ad6:	0092      	lsls	r2, r2, #2
    9ad8:	2100      	movs	r1, #0
    9ada:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    9adc:	230b      	movs	r3, #11
    9ade:	18fb      	adds	r3, r7, r3
    9ae0:	781a      	ldrb	r2, [r3, #0]
    9ae2:	230b      	movs	r3, #11
    9ae4:	18fb      	adds	r3, r7, r3
    9ae6:	3201      	adds	r2, #1
    9ae8:	701a      	strb	r2, [r3, #0]
    9aea:	230b      	movs	r3, #11
    9aec:	18fb      	adds	r3, r7, r3
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	2b0f      	cmp	r3, #15
    9af2:	d9ec      	bls.n	9ace <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    9af4:	2004      	movs	r0, #4
    9af6:	4b0b      	ldr	r3, [pc, #44]	; (9b24 <_system_extint_init+0xd8>)
    9af8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    9afa:	4b0b      	ldr	r3, [pc, #44]	; (9b28 <_system_extint_init+0xdc>)
    9afc:	4798      	blx	r3
}
    9afe:	46c0      	nop			; (mov r8, r8)
    9b00:	46bd      	mov	sp, r7
    9b02:	b004      	add	sp, #16
    9b04:	bd80      	pop	{r7, pc}
    9b06:	46c0      	nop			; (mov r8, r8)
    9b08:	40001800 	.word	0x40001800
    9b0c:	0000997d 	.word	0x0000997d
    9b10:	00009965 	.word	0x00009965
    9b14:	0000bb35 	.word	0x0000bb35
    9b18:	0000bb79 	.word	0x0000bb79
    9b1c:	00009a05 	.word	0x00009a05
    9b20:	20004f64 	.word	0x20004f64
    9b24:	000099d9 	.word	0x000099d9
    9b28:	00009b2d 	.word	0x00009b2d

00009b2c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    9b2c:	b580      	push	{r7, lr}
    9b2e:	b082      	sub	sp, #8
    9b30:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    9b32:	4b15      	ldr	r3, [pc, #84]	; (9b88 <_extint_enable+0x5c>)
    9b34:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9b36:	2300      	movs	r3, #0
    9b38:	607b      	str	r3, [r7, #4]
    9b3a:	e018      	b.n	9b6e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    9b3c:	687b      	ldr	r3, [r7, #4]
    9b3e:	009b      	lsls	r3, r3, #2
    9b40:	2208      	movs	r2, #8
    9b42:	4694      	mov	ip, r2
    9b44:	44bc      	add	ip, r7
    9b46:	4463      	add	r3, ip
    9b48:	3b08      	subs	r3, #8
    9b4a:	681a      	ldr	r2, [r3, #0]
    9b4c:	687b      	ldr	r3, [r7, #4]
    9b4e:	009b      	lsls	r3, r3, #2
    9b50:	2108      	movs	r1, #8
    9b52:	468c      	mov	ip, r1
    9b54:	44bc      	add	ip, r7
    9b56:	4463      	add	r3, ip
    9b58:	3b08      	subs	r3, #8
    9b5a:	681b      	ldr	r3, [r3, #0]
    9b5c:	781b      	ldrb	r3, [r3, #0]
    9b5e:	b2db      	uxtb	r3, r3
    9b60:	2102      	movs	r1, #2
    9b62:	430b      	orrs	r3, r1
    9b64:	b2db      	uxtb	r3, r3
    9b66:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9b68:	687b      	ldr	r3, [r7, #4]
    9b6a:	3301      	adds	r3, #1
    9b6c:	607b      	str	r3, [r7, #4]
    9b6e:	687b      	ldr	r3, [r7, #4]
    9b70:	2b00      	cmp	r3, #0
    9b72:	d0e3      	beq.n	9b3c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    9b74:	46c0      	nop			; (mov r8, r8)
    9b76:	4b05      	ldr	r3, [pc, #20]	; (9b8c <_extint_enable+0x60>)
    9b78:	4798      	blx	r3
    9b7a:	1e03      	subs	r3, r0, #0
    9b7c:	d1fb      	bne.n	9b76 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    9b7e:	46c0      	nop			; (mov r8, r8)
    9b80:	46bd      	mov	sp, r7
    9b82:	b002      	add	sp, #8
    9b84:	bd80      	pop	{r7, pc}
    9b86:	46c0      	nop			; (mov r8, r8)
    9b88:	40001800 	.word	0x40001800
    9b8c:	00009a05 	.word	0x00009a05

00009b90 <system_pinmux_get_config_defaults>:
{
    9b90:	b580      	push	{r7, lr}
    9b92:	b082      	sub	sp, #8
    9b94:	af00      	add	r7, sp, #0
    9b96:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9b98:	687b      	ldr	r3, [r7, #4]
    9b9a:	2280      	movs	r2, #128	; 0x80
    9b9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9b9e:	687b      	ldr	r3, [r7, #4]
    9ba0:	2200      	movs	r2, #0
    9ba2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9ba4:	687b      	ldr	r3, [r7, #4]
    9ba6:	2201      	movs	r2, #1
    9ba8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9baa:	687b      	ldr	r3, [r7, #4]
    9bac:	2200      	movs	r2, #0
    9bae:	70da      	strb	r2, [r3, #3]
}
    9bb0:	46c0      	nop			; (mov r8, r8)
    9bb2:	46bd      	mov	sp, r7
    9bb4:	b002      	add	sp, #8
    9bb6:	bd80      	pop	{r7, pc}

00009bb8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    9bb8:	b580      	push	{r7, lr}
    9bba:	b084      	sub	sp, #16
    9bbc:	af00      	add	r7, sp, #0
    9bbe:	0002      	movs	r2, r0
    9bc0:	6039      	str	r1, [r7, #0]
    9bc2:	1dfb      	adds	r3, r7, #7
    9bc4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    9bc6:	230c      	movs	r3, #12
    9bc8:	18fb      	adds	r3, r7, r3
    9bca:	0018      	movs	r0, r3
    9bcc:	4b10      	ldr	r3, [pc, #64]	; (9c10 <port_pin_set_config+0x58>)
    9bce:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    9bd0:	230c      	movs	r3, #12
    9bd2:	18fb      	adds	r3, r7, r3
    9bd4:	2280      	movs	r2, #128	; 0x80
    9bd6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    9bd8:	683b      	ldr	r3, [r7, #0]
    9bda:	781a      	ldrb	r2, [r3, #0]
    9bdc:	230c      	movs	r3, #12
    9bde:	18fb      	adds	r3, r7, r3
    9be0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    9be2:	683b      	ldr	r3, [r7, #0]
    9be4:	785a      	ldrb	r2, [r3, #1]
    9be6:	230c      	movs	r3, #12
    9be8:	18fb      	adds	r3, r7, r3
    9bea:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    9bec:	683b      	ldr	r3, [r7, #0]
    9bee:	789a      	ldrb	r2, [r3, #2]
    9bf0:	230c      	movs	r3, #12
    9bf2:	18fb      	adds	r3, r7, r3
    9bf4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    9bf6:	230c      	movs	r3, #12
    9bf8:	18fa      	adds	r2, r7, r3
    9bfa:	1dfb      	adds	r3, r7, #7
    9bfc:	781b      	ldrb	r3, [r3, #0]
    9bfe:	0011      	movs	r1, r2
    9c00:	0018      	movs	r0, r3
    9c02:	4b04      	ldr	r3, [pc, #16]	; (9c14 <port_pin_set_config+0x5c>)
    9c04:	4798      	blx	r3
}
    9c06:	46c0      	nop			; (mov r8, r8)
    9c08:	46bd      	mov	sp, r7
    9c0a:	b004      	add	sp, #16
    9c0c:	bd80      	pop	{r7, pc}
    9c0e:	46c0      	nop			; (mov r8, r8)
    9c10:	00009b91 	.word	0x00009b91
    9c14:	0000be95 	.word	0x0000be95

00009c18 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    9c18:	b580      	push	{r7, lr}
    9c1a:	b086      	sub	sp, #24
    9c1c:	af00      	add	r7, sp, #0
    9c1e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    9c20:	4b28      	ldr	r3, [pc, #160]	; (9cc4 <_rtc_interrupt_handler+0xac>)
    9c22:	687a      	ldr	r2, [r7, #4]
    9c24:	0092      	lsls	r2, r2, #2
    9c26:	58d3      	ldr	r3, [r2, r3]
    9c28:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    9c2a:	697b      	ldr	r3, [r7, #20]
    9c2c:	681b      	ldr	r3, [r3, #0]
    9c2e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    9c30:	230e      	movs	r3, #14
    9c32:	18fb      	adds	r3, r7, r3
    9c34:	697a      	ldr	r2, [r7, #20]
    9c36:	8a52      	ldrh	r2, [r2, #18]
    9c38:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    9c3a:	697b      	ldr	r3, [r7, #20]
    9c3c:	8a1b      	ldrh	r3, [r3, #16]
    9c3e:	b29a      	uxth	r2, r3
    9c40:	230e      	movs	r3, #14
    9c42:	18fb      	adds	r3, r7, r3
    9c44:	210e      	movs	r1, #14
    9c46:	1879      	adds	r1, r7, r1
    9c48:	8809      	ldrh	r1, [r1, #0]
    9c4a:	400a      	ands	r2, r1
    9c4c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    9c4e:	693b      	ldr	r3, [r7, #16]
    9c50:	7a1b      	ldrb	r3, [r3, #8]
    9c52:	b2da      	uxtb	r2, r3
    9c54:	230c      	movs	r3, #12
    9c56:	18fb      	adds	r3, r7, r3
    9c58:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    9c5a:	693b      	ldr	r3, [r7, #16]
    9c5c:	79db      	ldrb	r3, [r3, #7]
    9c5e:	b2db      	uxtb	r3, r3
    9c60:	b29a      	uxth	r2, r3
    9c62:	230c      	movs	r3, #12
    9c64:	18fb      	adds	r3, r7, r3
    9c66:	210c      	movs	r1, #12
    9c68:	1879      	adds	r1, r7, r1
    9c6a:	8809      	ldrh	r1, [r1, #0]
    9c6c:	400a      	ands	r2, r1
    9c6e:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    9c70:	230c      	movs	r3, #12
    9c72:	18fb      	adds	r3, r7, r3
    9c74:	881b      	ldrh	r3, [r3, #0]
    9c76:	2280      	movs	r2, #128	; 0x80
    9c78:	4013      	ands	r3, r2
    9c7a:	d00c      	beq.n	9c96 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    9c7c:	230e      	movs	r3, #14
    9c7e:	18fb      	adds	r3, r7, r3
    9c80:	881b      	ldrh	r3, [r3, #0]
    9c82:	2202      	movs	r2, #2
    9c84:	4013      	ands	r3, r2
    9c86:	d002      	beq.n	9c8e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    9c88:	697b      	ldr	r3, [r7, #20]
    9c8a:	68db      	ldr	r3, [r3, #12]
    9c8c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    9c8e:	693b      	ldr	r3, [r7, #16]
    9c90:	2280      	movs	r2, #128	; 0x80
    9c92:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    9c94:	e011      	b.n	9cba <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    9c96:	230c      	movs	r3, #12
    9c98:	18fb      	adds	r3, r7, r3
    9c9a:	881b      	ldrh	r3, [r3, #0]
    9c9c:	2201      	movs	r2, #1
    9c9e:	4013      	ands	r3, r2
    9ca0:	d00b      	beq.n	9cba <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    9ca2:	230e      	movs	r3, #14
    9ca4:	18fb      	adds	r3, r7, r3
    9ca6:	881b      	ldrh	r3, [r3, #0]
    9ca8:	2201      	movs	r2, #1
    9caa:	4013      	ands	r3, r2
    9cac:	d002      	beq.n	9cb4 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    9cae:	697b      	ldr	r3, [r7, #20]
    9cb0:	689b      	ldr	r3, [r3, #8]
    9cb2:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    9cb4:	693b      	ldr	r3, [r7, #16]
    9cb6:	2201      	movs	r2, #1
    9cb8:	721a      	strb	r2, [r3, #8]
}
    9cba:	46c0      	nop			; (mov r8, r8)
    9cbc:	46bd      	mov	sp, r7
    9cbe:	b006      	add	sp, #24
    9cc0:	bd80      	pop	{r7, pc}
    9cc2:	46c0      	nop			; (mov r8, r8)
    9cc4:	20004fa4 	.word	0x20004fa4

00009cc8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    9cc8:	b580      	push	{r7, lr}
    9cca:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    9ccc:	2000      	movs	r0, #0
    9cce:	4b02      	ldr	r3, [pc, #8]	; (9cd8 <RTC_Handler+0x10>)
    9cd0:	4798      	blx	r3
}
    9cd2:	46c0      	nop			; (mov r8, r8)
    9cd4:	46bd      	mov	sp, r7
    9cd6:	bd80      	pop	{r7, pc}
    9cd8:	00009c19 	.word	0x00009c19

00009cdc <system_gclk_chan_get_config_defaults>:
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b082      	sub	sp, #8
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	2200      	movs	r2, #0
    9ce8:	701a      	strb	r2, [r3, #0]
}
    9cea:	46c0      	nop			; (mov r8, r8)
    9cec:	46bd      	mov	sp, r7
    9cee:	b002      	add	sp, #8
    9cf0:	bd80      	pop	{r7, pc}

00009cf2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    9cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cf4:	b08d      	sub	sp, #52	; 0x34
    9cf6:	af00      	add	r7, sp, #0
    9cf8:	60b8      	str	r0, [r7, #8]
    9cfa:	60f9      	str	r1, [r7, #12]
    9cfc:	603a      	str	r2, [r7, #0]
    9cfe:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    9d00:	2300      	movs	r3, #0
    9d02:	2400      	movs	r4, #0
    9d04:	623b      	str	r3, [r7, #32]
    9d06:	627c      	str	r4, [r7, #36]	; 0x24
    9d08:	2300      	movs	r3, #0
    9d0a:	2400      	movs	r4, #0
    9d0c:	61bb      	str	r3, [r7, #24]
    9d0e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    9d10:	233f      	movs	r3, #63	; 0x3f
    9d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    9d14:	e053      	b.n	9dbe <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    9d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d18:	3b20      	subs	r3, #32
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	db04      	blt.n	9d28 <long_division+0x36>
    9d1e:	2201      	movs	r2, #1
    9d20:	409a      	lsls	r2, r3
    9d22:	0013      	movs	r3, r2
    9d24:	617b      	str	r3, [r7, #20]
    9d26:	e00b      	b.n	9d40 <long_division+0x4e>
    9d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d2a:	2220      	movs	r2, #32
    9d2c:	1ad3      	subs	r3, r2, r3
    9d2e:	2201      	movs	r2, #1
    9d30:	40da      	lsrs	r2, r3
    9d32:	0013      	movs	r3, r2
    9d34:	2100      	movs	r1, #0
    9d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9d38:	4091      	lsls	r1, r2
    9d3a:	000a      	movs	r2, r1
    9d3c:	4313      	orrs	r3, r2
    9d3e:	617b      	str	r3, [r7, #20]
    9d40:	2201      	movs	r2, #1
    9d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d44:	409a      	lsls	r2, r3
    9d46:	0013      	movs	r3, r2
    9d48:	613b      	str	r3, [r7, #16]

		r = r << 1;
    9d4a:	69bb      	ldr	r3, [r7, #24]
    9d4c:	69fc      	ldr	r4, [r7, #28]
    9d4e:	18db      	adds	r3, r3, r3
    9d50:	4164      	adcs	r4, r4
    9d52:	61bb      	str	r3, [r7, #24]
    9d54:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    9d56:	68bb      	ldr	r3, [r7, #8]
    9d58:	693a      	ldr	r2, [r7, #16]
    9d5a:	401a      	ands	r2, r3
    9d5c:	0015      	movs	r5, r2
    9d5e:	68fb      	ldr	r3, [r7, #12]
    9d60:	697a      	ldr	r2, [r7, #20]
    9d62:	401a      	ands	r2, r3
    9d64:	0016      	movs	r6, r2
    9d66:	002b      	movs	r3, r5
    9d68:	4333      	orrs	r3, r6
    9d6a:	d007      	beq.n	9d7c <long_division+0x8a>
			r |= 0x01;
    9d6c:	69bb      	ldr	r3, [r7, #24]
    9d6e:	2201      	movs	r2, #1
    9d70:	4313      	orrs	r3, r2
    9d72:	61bb      	str	r3, [r7, #24]
    9d74:	69fb      	ldr	r3, [r7, #28]
    9d76:	2200      	movs	r2, #0
    9d78:	4313      	orrs	r3, r2
    9d7a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    9d7c:	687a      	ldr	r2, [r7, #4]
    9d7e:	69fb      	ldr	r3, [r7, #28]
    9d80:	429a      	cmp	r2, r3
    9d82:	d819      	bhi.n	9db8 <long_division+0xc6>
    9d84:	687a      	ldr	r2, [r7, #4]
    9d86:	69fb      	ldr	r3, [r7, #28]
    9d88:	429a      	cmp	r2, r3
    9d8a:	d103      	bne.n	9d94 <long_division+0xa2>
    9d8c:	683a      	ldr	r2, [r7, #0]
    9d8e:	69bb      	ldr	r3, [r7, #24]
    9d90:	429a      	cmp	r2, r3
    9d92:	d811      	bhi.n	9db8 <long_division+0xc6>
			r = r - d;
    9d94:	69b9      	ldr	r1, [r7, #24]
    9d96:	69fa      	ldr	r2, [r7, #28]
    9d98:	683b      	ldr	r3, [r7, #0]
    9d9a:	687c      	ldr	r4, [r7, #4]
    9d9c:	1ac9      	subs	r1, r1, r3
    9d9e:	41a2      	sbcs	r2, r4
    9da0:	000b      	movs	r3, r1
    9da2:	0014      	movs	r4, r2
    9da4:	61bb      	str	r3, [r7, #24]
    9da6:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    9da8:	6a3a      	ldr	r2, [r7, #32]
    9daa:	693b      	ldr	r3, [r7, #16]
    9dac:	4313      	orrs	r3, r2
    9dae:	623b      	str	r3, [r7, #32]
    9db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9db2:	697b      	ldr	r3, [r7, #20]
    9db4:	4313      	orrs	r3, r2
    9db6:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    9db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9dba:	3b01      	subs	r3, #1
    9dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    9dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	daa8      	bge.n	9d16 <long_division+0x24>
		}
	}

	return q;
    9dc4:	6a3b      	ldr	r3, [r7, #32]
    9dc6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    9dc8:	0018      	movs	r0, r3
    9dca:	0021      	movs	r1, r4
    9dcc:	46bd      	mov	sp, r7
    9dce:	b00d      	add	sp, #52	; 0x34
    9dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009dd2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    9dd2:	b580      	push	{r7, lr}
    9dd4:	b086      	sub	sp, #24
    9dd6:	af00      	add	r7, sp, #0
    9dd8:	60f8      	str	r0, [r7, #12]
    9dda:	60b9      	str	r1, [r7, #8]
    9ddc:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    9dde:	2316      	movs	r3, #22
    9de0:	18fb      	adds	r3, r7, r3
    9de2:	2200      	movs	r2, #0
    9de4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    9de6:	68bb      	ldr	r3, [r7, #8]
    9de8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    9dea:	68bb      	ldr	r3, [r7, #8]
    9dec:	085a      	lsrs	r2, r3, #1
    9dee:	68fb      	ldr	r3, [r7, #12]
    9df0:	429a      	cmp	r2, r3
    9df2:	d201      	bcs.n	9df8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9df4:	2340      	movs	r3, #64	; 0x40
    9df6:	e026      	b.n	9e46 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    9df8:	68bb      	ldr	r3, [r7, #8]
    9dfa:	085b      	lsrs	r3, r3, #1
    9dfc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    9dfe:	e00a      	b.n	9e16 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    9e00:	693a      	ldr	r2, [r7, #16]
    9e02:	68fb      	ldr	r3, [r7, #12]
    9e04:	1ad3      	subs	r3, r2, r3
    9e06:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    9e08:	2316      	movs	r3, #22
    9e0a:	18fb      	adds	r3, r7, r3
    9e0c:	881a      	ldrh	r2, [r3, #0]
    9e0e:	2316      	movs	r3, #22
    9e10:	18fb      	adds	r3, r7, r3
    9e12:	3201      	adds	r2, #1
    9e14:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    9e16:	693a      	ldr	r2, [r7, #16]
    9e18:	68fb      	ldr	r3, [r7, #12]
    9e1a:	429a      	cmp	r2, r3
    9e1c:	d2f0      	bcs.n	9e00 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    9e1e:	2316      	movs	r3, #22
    9e20:	18fb      	adds	r3, r7, r3
    9e22:	2216      	movs	r2, #22
    9e24:	18ba      	adds	r2, r7, r2
    9e26:	8812      	ldrh	r2, [r2, #0]
    9e28:	3a01      	subs	r2, #1
    9e2a:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    9e2c:	2316      	movs	r3, #22
    9e2e:	18fb      	adds	r3, r7, r3
    9e30:	881b      	ldrh	r3, [r3, #0]
    9e32:	2bff      	cmp	r3, #255	; 0xff
    9e34:	d901      	bls.n	9e3a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9e36:	2340      	movs	r3, #64	; 0x40
    9e38:	e005      	b.n	9e46 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    9e3a:	687b      	ldr	r3, [r7, #4]
    9e3c:	2216      	movs	r2, #22
    9e3e:	18ba      	adds	r2, r7, r2
    9e40:	8812      	ldrh	r2, [r2, #0]
    9e42:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    9e44:	2300      	movs	r3, #0
	}
}
    9e46:	0018      	movs	r0, r3
    9e48:	46bd      	mov	sp, r7
    9e4a:	b006      	add	sp, #24
    9e4c:	bd80      	pop	{r7, pc}
	...

00009e50 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    9e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e52:	b0a1      	sub	sp, #132	; 0x84
    9e54:	af00      	add	r7, sp, #0
    9e56:	64f8      	str	r0, [r7, #76]	; 0x4c
    9e58:	64b9      	str	r1, [r7, #72]	; 0x48
    9e5a:	647a      	str	r2, [r7, #68]	; 0x44
    9e5c:	2243      	movs	r2, #67	; 0x43
    9e5e:	18ba      	adds	r2, r7, r2
    9e60:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    9e62:	2300      	movs	r3, #0
    9e64:	2400      	movs	r4, #0
    9e66:	673b      	str	r3, [r7, #112]	; 0x70
    9e68:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    9e6a:	2300      	movs	r3, #0
    9e6c:	2400      	movs	r4, #0
    9e6e:	66bb      	str	r3, [r7, #104]	; 0x68
    9e70:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    9e72:	2300      	movs	r3, #0
    9e74:	2400      	movs	r4, #0
    9e76:	67bb      	str	r3, [r7, #120]	; 0x78
    9e78:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    9e7a:	2300      	movs	r3, #0
    9e7c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    9e7e:	2358      	movs	r3, #88	; 0x58
    9e80:	2240      	movs	r2, #64	; 0x40
    9e82:	4694      	mov	ip, r2
    9e84:	44bc      	add	ip, r7
    9e86:	4463      	add	r3, ip
    9e88:	781a      	ldrb	r2, [r3, #0]
    9e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9e8c:	435a      	muls	r2, r3
    9e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9e90:	429a      	cmp	r2, r3
    9e92:	d901      	bls.n	9e98 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9e94:	2340      	movs	r3, #64	; 0x40
    9e96:	e0b3      	b.n	a000 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    9e98:	2343      	movs	r3, #67	; 0x43
    9e9a:	18fb      	adds	r3, r7, r3
    9e9c:	781b      	ldrb	r3, [r3, #0]
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d13d      	bne.n	9f1e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    9ea2:	2358      	movs	r3, #88	; 0x58
    9ea4:	2240      	movs	r2, #64	; 0x40
    9ea6:	4694      	mov	ip, r2
    9ea8:	44bc      	add	ip, r7
    9eaa:	4463      	add	r3, ip
    9eac:	781b      	ldrb	r3, [r3, #0]
    9eae:	b2db      	uxtb	r3, r3
    9eb0:	613b      	str	r3, [r7, #16]
    9eb2:	2300      	movs	r3, #0
    9eb4:	617b      	str	r3, [r7, #20]
    9eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9eb8:	60bb      	str	r3, [r7, #8]
    9eba:	2300      	movs	r3, #0
    9ebc:	60fb      	str	r3, [r7, #12]
    9ebe:	4c52      	ldr	r4, [pc, #328]	; (a008 <_sercom_get_async_baud_val+0x1b8>)
    9ec0:	68ba      	ldr	r2, [r7, #8]
    9ec2:	68fb      	ldr	r3, [r7, #12]
    9ec4:	6938      	ldr	r0, [r7, #16]
    9ec6:	6979      	ldr	r1, [r7, #20]
    9ec8:	47a0      	blx	r4
    9eca:	0003      	movs	r3, r0
    9ecc:	000c      	movs	r4, r1
    9ece:	001b      	movs	r3, r3
    9ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
    9ed2:	2300      	movs	r3, #0
    9ed4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    9ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9ed8:	603b      	str	r3, [r7, #0]
    9eda:	2300      	movs	r3, #0
    9edc:	607b      	str	r3, [r7, #4]
    9ede:	6db8      	ldr	r0, [r7, #88]	; 0x58
    9ee0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    9ee2:	683a      	ldr	r2, [r7, #0]
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	4c49      	ldr	r4, [pc, #292]	; (a00c <_sercom_get_async_baud_val+0x1bc>)
    9ee8:	47a0      	blx	r4
    9eea:	0003      	movs	r3, r0
    9eec:	000c      	movs	r4, r1
    9eee:	673b      	str	r3, [r7, #112]	; 0x70
    9ef0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    9ef2:	2100      	movs	r1, #0
    9ef4:	2201      	movs	r2, #1
    9ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    9ef8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    9efa:	1ac9      	subs	r1, r1, r3
    9efc:	41a2      	sbcs	r2, r4
    9efe:	000b      	movs	r3, r1
    9f00:	0014      	movs	r4, r2
    9f02:	66bb      	str	r3, [r7, #104]	; 0x68
    9f04:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    9f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    9f08:	0c1b      	lsrs	r3, r3, #16
    9f0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    9f0c:	0416      	lsls	r6, r2, #16
    9f0e:	431e      	orrs	r6, r3
    9f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    9f12:	041d      	lsls	r5, r3, #16
    9f14:	0033      	movs	r3, r6
    9f16:	67bb      	str	r3, [r7, #120]	; 0x78
    9f18:	2300      	movs	r3, #0
    9f1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    9f1c:	e06a      	b.n	9ff4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    9f1e:	2343      	movs	r3, #67	; 0x43
    9f20:	18fb      	adds	r3, r7, r3
    9f22:	781b      	ldrb	r3, [r3, #0]
    9f24:	2b01      	cmp	r3, #1
    9f26:	d165      	bne.n	9ff4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    9f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9f2a:	633b      	str	r3, [r7, #48]	; 0x30
    9f2c:	2300      	movs	r3, #0
    9f2e:	637b      	str	r3, [r7, #52]	; 0x34
    9f30:	2358      	movs	r3, #88	; 0x58
    9f32:	2240      	movs	r2, #64	; 0x40
    9f34:	4694      	mov	ip, r2
    9f36:	44bc      	add	ip, r7
    9f38:	4463      	add	r3, ip
    9f3a:	781b      	ldrb	r3, [r3, #0]
    9f3c:	b2db      	uxtb	r3, r3
    9f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    9f40:	2300      	movs	r3, #0
    9f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    9f44:	4c30      	ldr	r4, [pc, #192]	; (a008 <_sercom_get_async_baud_val+0x1b8>)
    9f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
    9f4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    9f4e:	47a0      	blx	r4
    9f50:	0003      	movs	r3, r0
    9f52:	000c      	movs	r4, r1
    9f54:	65bb      	str	r3, [r7, #88]	; 0x58
    9f56:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    9f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9f5a:	623b      	str	r3, [r7, #32]
    9f5c:	2300      	movs	r3, #0
    9f5e:	627b      	str	r3, [r7, #36]	; 0x24
    9f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9f62:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    9f64:	001a      	movs	r2, r3
    9f66:	0023      	movs	r3, r4
    9f68:	6a38      	ldr	r0, [r7, #32]
    9f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9f6c:	4c27      	ldr	r4, [pc, #156]	; (a00c <_sercom_get_async_baud_val+0x1bc>)
    9f6e:	47a0      	blx	r4
    9f70:	0003      	movs	r3, r0
    9f72:	000c      	movs	r4, r1
    9f74:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    9f76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    9f78:	2380      	movs	r3, #128	; 0x80
    9f7a:	019b      	lsls	r3, r3, #6
    9f7c:	429a      	cmp	r2, r3
    9f7e:	d901      	bls.n	9f84 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9f80:	2340      	movs	r3, #64	; 0x40
    9f82:	e03d      	b.n	a000 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    9f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9f86:	61bb      	str	r3, [r7, #24]
    9f88:	2300      	movs	r3, #0
    9f8a:	61fb      	str	r3, [r7, #28]
    9f8c:	69b9      	ldr	r1, [r7, #24]
    9f8e:	69fa      	ldr	r2, [r7, #28]
    9f90:	000b      	movs	r3, r1
    9f92:	0f5b      	lsrs	r3, r3, #29
    9f94:	0010      	movs	r0, r2
    9f96:	00c0      	lsls	r0, r0, #3
    9f98:	63f8      	str	r0, [r7, #60]	; 0x3c
    9f9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    9f9c:	4318      	orrs	r0, r3
    9f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    9fa0:	000b      	movs	r3, r1
    9fa2:	00db      	lsls	r3, r3, #3
    9fa4:	63bb      	str	r3, [r7, #56]	; 0x38
    9fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9fa8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    9faa:	001a      	movs	r2, r3
    9fac:	0023      	movs	r3, r4
    9fae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    9fb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    9fb2:	4c16      	ldr	r4, [pc, #88]	; (a00c <_sercom_get_async_baud_val+0x1bc>)
    9fb4:	47a0      	blx	r4
    9fb6:	0003      	movs	r3, r0
    9fb8:	000c      	movs	r4, r1
    9fba:	65bb      	str	r3, [r7, #88]	; 0x58
    9fbc:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    9fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9fc0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    9fc2:	b2d9      	uxtb	r1, r3
    9fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9fc6:	b2db      	uxtb	r3, r3
    9fc8:	00db      	lsls	r3, r3, #3
    9fca:	b2da      	uxtb	r2, r3
    9fcc:	2317      	movs	r3, #23
    9fce:	2040      	movs	r0, #64	; 0x40
    9fd0:	4684      	mov	ip, r0
    9fd2:	44bc      	add	ip, r7
    9fd4:	4463      	add	r3, ip
    9fd6:	1a8a      	subs	r2, r1, r2
    9fd8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    9fda:	2317      	movs	r3, #23
    9fdc:	2240      	movs	r2, #64	; 0x40
    9fde:	4694      	mov	ip, r2
    9fe0:	44bc      	add	ip, r7
    9fe2:	4463      	add	r3, ip
    9fe4:	781b      	ldrb	r3, [r3, #0]
    9fe6:	035b      	lsls	r3, r3, #13
    9fe8:	001a      	movs	r2, r3
    9fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    9fec:	4313      	orrs	r3, r2
    9fee:	67bb      	str	r3, [r7, #120]	; 0x78
    9ff0:	2300      	movs	r3, #0
    9ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    9ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    9ff6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    9ff8:	b29a      	uxth	r2, r3
    9ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9ffc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    9ffe:	2300      	movs	r3, #0
}
    a000:	0018      	movs	r0, r3
    a002:	46bd      	mov	sp, r7
    a004:	b021      	add	sp, #132	; 0x84
    a006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a008:	0000c51d 	.word	0x0000c51d
    a00c:	00009cf3 	.word	0x00009cf3

0000a010 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    a010:	b580      	push	{r7, lr}
    a012:	b084      	sub	sp, #16
    a014:	af00      	add	r7, sp, #0
    a016:	0002      	movs	r2, r0
    a018:	1dfb      	adds	r3, r7, #7
    a01a:	701a      	strb	r2, [r3, #0]
    a01c:	1dbb      	adds	r3, r7, #6
    a01e:	1c0a      	adds	r2, r1, #0
    a020:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    a022:	4b1a      	ldr	r3, [pc, #104]	; (a08c <sercom_set_gclk_generator+0x7c>)
    a024:	781b      	ldrb	r3, [r3, #0]
    a026:	2201      	movs	r2, #1
    a028:	4053      	eors	r3, r2
    a02a:	b2db      	uxtb	r3, r3
    a02c:	2b00      	cmp	r3, #0
    a02e:	d103      	bne.n	a038 <sercom_set_gclk_generator+0x28>
    a030:	1dbb      	adds	r3, r7, #6
    a032:	781b      	ldrb	r3, [r3, #0]
    a034:	2b00      	cmp	r3, #0
    a036:	d01b      	beq.n	a070 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a038:	230c      	movs	r3, #12
    a03a:	18fb      	adds	r3, r7, r3
    a03c:	0018      	movs	r0, r3
    a03e:	4b14      	ldr	r3, [pc, #80]	; (a090 <sercom_set_gclk_generator+0x80>)
    a040:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    a042:	230c      	movs	r3, #12
    a044:	18fb      	adds	r3, r7, r3
    a046:	1dfa      	adds	r2, r7, #7
    a048:	7812      	ldrb	r2, [r2, #0]
    a04a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    a04c:	230c      	movs	r3, #12
    a04e:	18fb      	adds	r3, r7, r3
    a050:	0019      	movs	r1, r3
    a052:	2013      	movs	r0, #19
    a054:	4b0f      	ldr	r3, [pc, #60]	; (a094 <sercom_set_gclk_generator+0x84>)
    a056:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    a058:	2013      	movs	r0, #19
    a05a:	4b0f      	ldr	r3, [pc, #60]	; (a098 <sercom_set_gclk_generator+0x88>)
    a05c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    a05e:	4b0b      	ldr	r3, [pc, #44]	; (a08c <sercom_set_gclk_generator+0x7c>)
    a060:	1dfa      	adds	r2, r7, #7
    a062:	7812      	ldrb	r2, [r2, #0]
    a064:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    a066:	4b09      	ldr	r3, [pc, #36]	; (a08c <sercom_set_gclk_generator+0x7c>)
    a068:	2201      	movs	r2, #1
    a06a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    a06c:	2300      	movs	r3, #0
    a06e:	e008      	b.n	a082 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    a070:	4b06      	ldr	r3, [pc, #24]	; (a08c <sercom_set_gclk_generator+0x7c>)
    a072:	785b      	ldrb	r3, [r3, #1]
    a074:	1dfa      	adds	r2, r7, #7
    a076:	7812      	ldrb	r2, [r2, #0]
    a078:	429a      	cmp	r2, r3
    a07a:	d101      	bne.n	a080 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    a07c:	2300      	movs	r3, #0
    a07e:	e000      	b.n	a082 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    a080:	231d      	movs	r3, #29
}
    a082:	0018      	movs	r0, r3
    a084:	46bd      	mov	sp, r7
    a086:	b004      	add	sp, #16
    a088:	bd80      	pop	{r7, pc}
    a08a:	46c0      	nop			; (mov r8, r8)
    a08c:	2000382c 	.word	0x2000382c
    a090:	00009cdd 	.word	0x00009cdd
    a094:	0000bb35 	.word	0x0000bb35
    a098:	0000bb79 	.word	0x0000bb79

0000a09c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    a09c:	b580      	push	{r7, lr}
    a09e:	b082      	sub	sp, #8
    a0a0:	af00      	add	r7, sp, #0
    a0a2:	6078      	str	r0, [r7, #4]
    a0a4:	000a      	movs	r2, r1
    a0a6:	1cfb      	adds	r3, r7, #3
    a0a8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    a0aa:	687b      	ldr	r3, [r7, #4]
    a0ac:	4a4d      	ldr	r2, [pc, #308]	; (a1e4 <_sercom_get_default_pad+0x148>)
    a0ae:	4293      	cmp	r3, r2
    a0b0:	d03f      	beq.n	a132 <_sercom_get_default_pad+0x96>
    a0b2:	4a4c      	ldr	r2, [pc, #304]	; (a1e4 <_sercom_get_default_pad+0x148>)
    a0b4:	4293      	cmp	r3, r2
    a0b6:	d806      	bhi.n	a0c6 <_sercom_get_default_pad+0x2a>
    a0b8:	4a4b      	ldr	r2, [pc, #300]	; (a1e8 <_sercom_get_default_pad+0x14c>)
    a0ba:	4293      	cmp	r3, r2
    a0bc:	d00f      	beq.n	a0de <_sercom_get_default_pad+0x42>
    a0be:	4a4b      	ldr	r2, [pc, #300]	; (a1ec <_sercom_get_default_pad+0x150>)
    a0c0:	4293      	cmp	r3, r2
    a0c2:	d021      	beq.n	a108 <_sercom_get_default_pad+0x6c>
    a0c4:	e089      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a0c6:	4a4a      	ldr	r2, [pc, #296]	; (a1f0 <_sercom_get_default_pad+0x154>)
    a0c8:	4293      	cmp	r3, r2
    a0ca:	d100      	bne.n	a0ce <_sercom_get_default_pad+0x32>
    a0cc:	e05b      	b.n	a186 <_sercom_get_default_pad+0xea>
    a0ce:	4a49      	ldr	r2, [pc, #292]	; (a1f4 <_sercom_get_default_pad+0x158>)
    a0d0:	4293      	cmp	r3, r2
    a0d2:	d100      	bne.n	a0d6 <_sercom_get_default_pad+0x3a>
    a0d4:	e06c      	b.n	a1b0 <_sercom_get_default_pad+0x114>
    a0d6:	4a48      	ldr	r2, [pc, #288]	; (a1f8 <_sercom_get_default_pad+0x15c>)
    a0d8:	4293      	cmp	r3, r2
    a0da:	d03f      	beq.n	a15c <_sercom_get_default_pad+0xc0>
    a0dc:	e07d      	b.n	a1da <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a0de:	1cfb      	adds	r3, r7, #3
    a0e0:	781b      	ldrb	r3, [r3, #0]
    a0e2:	2b01      	cmp	r3, #1
    a0e4:	d00a      	beq.n	a0fc <_sercom_get_default_pad+0x60>
    a0e6:	dc02      	bgt.n	a0ee <_sercom_get_default_pad+0x52>
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	d005      	beq.n	a0f8 <_sercom_get_default_pad+0x5c>
    a0ec:	e075      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a0ee:	2b02      	cmp	r3, #2
    a0f0:	d006      	beq.n	a100 <_sercom_get_default_pad+0x64>
    a0f2:	2b03      	cmp	r3, #3
    a0f4:	d006      	beq.n	a104 <_sercom_get_default_pad+0x68>
    a0f6:	e070      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a0f8:	4b40      	ldr	r3, [pc, #256]	; (a1fc <_sercom_get_default_pad+0x160>)
    a0fa:	e06f      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a0fc:	4b40      	ldr	r3, [pc, #256]	; (a200 <_sercom_get_default_pad+0x164>)
    a0fe:	e06d      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a100:	4b40      	ldr	r3, [pc, #256]	; (a204 <_sercom_get_default_pad+0x168>)
    a102:	e06b      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a104:	4b40      	ldr	r3, [pc, #256]	; (a208 <_sercom_get_default_pad+0x16c>)
    a106:	e069      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a108:	1cfb      	adds	r3, r7, #3
    a10a:	781b      	ldrb	r3, [r3, #0]
    a10c:	2b01      	cmp	r3, #1
    a10e:	d00a      	beq.n	a126 <_sercom_get_default_pad+0x8a>
    a110:	dc02      	bgt.n	a118 <_sercom_get_default_pad+0x7c>
    a112:	2b00      	cmp	r3, #0
    a114:	d005      	beq.n	a122 <_sercom_get_default_pad+0x86>
    a116:	e060      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a118:	2b02      	cmp	r3, #2
    a11a:	d006      	beq.n	a12a <_sercom_get_default_pad+0x8e>
    a11c:	2b03      	cmp	r3, #3
    a11e:	d006      	beq.n	a12e <_sercom_get_default_pad+0x92>
    a120:	e05b      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a122:	2303      	movs	r3, #3
    a124:	e05a      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a126:	4b39      	ldr	r3, [pc, #228]	; (a20c <_sercom_get_default_pad+0x170>)
    a128:	e058      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a12a:	4b39      	ldr	r3, [pc, #228]	; (a210 <_sercom_get_default_pad+0x174>)
    a12c:	e056      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a12e:	4b39      	ldr	r3, [pc, #228]	; (a214 <_sercom_get_default_pad+0x178>)
    a130:	e054      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a132:	1cfb      	adds	r3, r7, #3
    a134:	781b      	ldrb	r3, [r3, #0]
    a136:	2b01      	cmp	r3, #1
    a138:	d00a      	beq.n	a150 <_sercom_get_default_pad+0xb4>
    a13a:	dc02      	bgt.n	a142 <_sercom_get_default_pad+0xa6>
    a13c:	2b00      	cmp	r3, #0
    a13e:	d005      	beq.n	a14c <_sercom_get_default_pad+0xb0>
    a140:	e04b      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a142:	2b02      	cmp	r3, #2
    a144:	d006      	beq.n	a154 <_sercom_get_default_pad+0xb8>
    a146:	2b03      	cmp	r3, #3
    a148:	d006      	beq.n	a158 <_sercom_get_default_pad+0xbc>
    a14a:	e046      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a14c:	4b32      	ldr	r3, [pc, #200]	; (a218 <_sercom_get_default_pad+0x17c>)
    a14e:	e045      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a150:	4b32      	ldr	r3, [pc, #200]	; (a21c <_sercom_get_default_pad+0x180>)
    a152:	e043      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a154:	4b32      	ldr	r3, [pc, #200]	; (a220 <_sercom_get_default_pad+0x184>)
    a156:	e041      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a158:	4b32      	ldr	r3, [pc, #200]	; (a224 <_sercom_get_default_pad+0x188>)
    a15a:	e03f      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a15c:	1cfb      	adds	r3, r7, #3
    a15e:	781b      	ldrb	r3, [r3, #0]
    a160:	2b01      	cmp	r3, #1
    a162:	d00a      	beq.n	a17a <_sercom_get_default_pad+0xde>
    a164:	dc02      	bgt.n	a16c <_sercom_get_default_pad+0xd0>
    a166:	2b00      	cmp	r3, #0
    a168:	d005      	beq.n	a176 <_sercom_get_default_pad+0xda>
    a16a:	e036      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a16c:	2b02      	cmp	r3, #2
    a16e:	d006      	beq.n	a17e <_sercom_get_default_pad+0xe2>
    a170:	2b03      	cmp	r3, #3
    a172:	d006      	beq.n	a182 <_sercom_get_default_pad+0xe6>
    a174:	e031      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a176:	4b2c      	ldr	r3, [pc, #176]	; (a228 <_sercom_get_default_pad+0x18c>)
    a178:	e030      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a17a:	4b2c      	ldr	r3, [pc, #176]	; (a22c <_sercom_get_default_pad+0x190>)
    a17c:	e02e      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a17e:	4b2c      	ldr	r3, [pc, #176]	; (a230 <_sercom_get_default_pad+0x194>)
    a180:	e02c      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a182:	4b2c      	ldr	r3, [pc, #176]	; (a234 <_sercom_get_default_pad+0x198>)
    a184:	e02a      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a186:	1cfb      	adds	r3, r7, #3
    a188:	781b      	ldrb	r3, [r3, #0]
    a18a:	2b01      	cmp	r3, #1
    a18c:	d00a      	beq.n	a1a4 <_sercom_get_default_pad+0x108>
    a18e:	dc02      	bgt.n	a196 <_sercom_get_default_pad+0xfa>
    a190:	2b00      	cmp	r3, #0
    a192:	d005      	beq.n	a1a0 <_sercom_get_default_pad+0x104>
    a194:	e021      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a196:	2b02      	cmp	r3, #2
    a198:	d006      	beq.n	a1a8 <_sercom_get_default_pad+0x10c>
    a19a:	2b03      	cmp	r3, #3
    a19c:	d006      	beq.n	a1ac <_sercom_get_default_pad+0x110>
    a19e:	e01c      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a1a0:	4b25      	ldr	r3, [pc, #148]	; (a238 <_sercom_get_default_pad+0x19c>)
    a1a2:	e01b      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a1a4:	4b25      	ldr	r3, [pc, #148]	; (a23c <_sercom_get_default_pad+0x1a0>)
    a1a6:	e019      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a1a8:	4b25      	ldr	r3, [pc, #148]	; (a240 <_sercom_get_default_pad+0x1a4>)
    a1aa:	e017      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a1ac:	4b25      	ldr	r3, [pc, #148]	; (a244 <_sercom_get_default_pad+0x1a8>)
    a1ae:	e015      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a1b0:	1cfb      	adds	r3, r7, #3
    a1b2:	781b      	ldrb	r3, [r3, #0]
    a1b4:	2b01      	cmp	r3, #1
    a1b6:	d00a      	beq.n	a1ce <_sercom_get_default_pad+0x132>
    a1b8:	dc02      	bgt.n	a1c0 <_sercom_get_default_pad+0x124>
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d005      	beq.n	a1ca <_sercom_get_default_pad+0x12e>
    a1be:	e00c      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a1c0:	2b02      	cmp	r3, #2
    a1c2:	d006      	beq.n	a1d2 <_sercom_get_default_pad+0x136>
    a1c4:	2b03      	cmp	r3, #3
    a1c6:	d006      	beq.n	a1d6 <_sercom_get_default_pad+0x13a>
    a1c8:	e007      	b.n	a1da <_sercom_get_default_pad+0x13e>
    a1ca:	4b1f      	ldr	r3, [pc, #124]	; (a248 <_sercom_get_default_pad+0x1ac>)
    a1cc:	e006      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a1ce:	4b1f      	ldr	r3, [pc, #124]	; (a24c <_sercom_get_default_pad+0x1b0>)
    a1d0:	e004      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a1d2:	4b1f      	ldr	r3, [pc, #124]	; (a250 <_sercom_get_default_pad+0x1b4>)
    a1d4:	e002      	b.n	a1dc <_sercom_get_default_pad+0x140>
    a1d6:	4b1f      	ldr	r3, [pc, #124]	; (a254 <_sercom_get_default_pad+0x1b8>)
    a1d8:	e000      	b.n	a1dc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    a1da:	2300      	movs	r3, #0
}
    a1dc:	0018      	movs	r0, r3
    a1de:	46bd      	mov	sp, r7
    a1e0:	b002      	add	sp, #8
    a1e2:	bd80      	pop	{r7, pc}
    a1e4:	42001000 	.word	0x42001000
    a1e8:	42000800 	.word	0x42000800
    a1ec:	42000c00 	.word	0x42000c00
    a1f0:	42001800 	.word	0x42001800
    a1f4:	42001c00 	.word	0x42001c00
    a1f8:	42001400 	.word	0x42001400
    a1fc:	00040003 	.word	0x00040003
    a200:	00050003 	.word	0x00050003
    a204:	00060003 	.word	0x00060003
    a208:	00070003 	.word	0x00070003
    a20c:	00010003 	.word	0x00010003
    a210:	001e0003 	.word	0x001e0003
    a214:	001f0003 	.word	0x001f0003
    a218:	00080003 	.word	0x00080003
    a21c:	00090003 	.word	0x00090003
    a220:	000a0003 	.word	0x000a0003
    a224:	000b0003 	.word	0x000b0003
    a228:	00100003 	.word	0x00100003
    a22c:	00110003 	.word	0x00110003
    a230:	00120003 	.word	0x00120003
    a234:	00130003 	.word	0x00130003
    a238:	000c0003 	.word	0x000c0003
    a23c:	000d0003 	.word	0x000d0003
    a240:	000e0003 	.word	0x000e0003
    a244:	000f0003 	.word	0x000f0003
    a248:	00160003 	.word	0x00160003
    a24c:	00170003 	.word	0x00170003
    a250:	00180003 	.word	0x00180003
    a254:	00190003 	.word	0x00190003

0000a258 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    a258:	b590      	push	{r4, r7, lr}
    a25a:	b08b      	sub	sp, #44	; 0x2c
    a25c:	af00      	add	r7, sp, #0
    a25e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    a260:	230c      	movs	r3, #12
    a262:	18fb      	adds	r3, r7, r3
    a264:	4a0f      	ldr	r2, [pc, #60]	; (a2a4 <_sercom_get_sercom_inst_index+0x4c>)
    a266:	ca13      	ldmia	r2!, {r0, r1, r4}
    a268:	c313      	stmia	r3!, {r0, r1, r4}
    a26a:	ca13      	ldmia	r2!, {r0, r1, r4}
    a26c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a26e:	2300      	movs	r3, #0
    a270:	627b      	str	r3, [r7, #36]	; 0x24
    a272:	e00e      	b.n	a292 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    a274:	230c      	movs	r3, #12
    a276:	18fb      	adds	r3, r7, r3
    a278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a27a:	0092      	lsls	r2, r2, #2
    a27c:	58d3      	ldr	r3, [r2, r3]
    a27e:	001a      	movs	r2, r3
    a280:	687b      	ldr	r3, [r7, #4]
    a282:	429a      	cmp	r2, r3
    a284:	d102      	bne.n	a28c <_sercom_get_sercom_inst_index+0x34>
			return i;
    a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a288:	b2db      	uxtb	r3, r3
    a28a:	e006      	b.n	a29a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a28e:	3301      	adds	r3, #1
    a290:	627b      	str	r3, [r7, #36]	; 0x24
    a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a294:	2b05      	cmp	r3, #5
    a296:	d9ed      	bls.n	a274 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    a298:	2300      	movs	r3, #0
}
    a29a:	0018      	movs	r0, r3
    a29c:	46bd      	mov	sp, r7
    a29e:	b00b      	add	sp, #44	; 0x2c
    a2a0:	bd90      	pop	{r4, r7, pc}
    a2a2:	46c0      	nop			; (mov r8, r8)
    a2a4:	000106cc 	.word	0x000106cc

0000a2a8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    a2a8:	b580      	push	{r7, lr}
    a2aa:	b082      	sub	sp, #8
    a2ac:	af00      	add	r7, sp, #0
    a2ae:	0002      	movs	r2, r0
    a2b0:	1dfb      	adds	r3, r7, #7
    a2b2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    a2b4:	46c0      	nop			; (mov r8, r8)
    a2b6:	46bd      	mov	sp, r7
    a2b8:	b002      	add	sp, #8
    a2ba:	bd80      	pop	{r7, pc}

0000a2bc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    a2bc:	b580      	push	{r7, lr}
    a2be:	b084      	sub	sp, #16
    a2c0:	af00      	add	r7, sp, #0
    a2c2:	0002      	movs	r2, r0
    a2c4:	6039      	str	r1, [r7, #0]
    a2c6:	1dfb      	adds	r3, r7, #7
    a2c8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    a2ca:	4b13      	ldr	r3, [pc, #76]	; (a318 <_sercom_set_handler+0x5c>)
    a2cc:	781b      	ldrb	r3, [r3, #0]
    a2ce:	2201      	movs	r2, #1
    a2d0:	4053      	eors	r3, r2
    a2d2:	b2db      	uxtb	r3, r3
    a2d4:	2b00      	cmp	r3, #0
    a2d6:	d015      	beq.n	a304 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a2d8:	2300      	movs	r3, #0
    a2da:	60fb      	str	r3, [r7, #12]
    a2dc:	e00c      	b.n	a2f8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    a2de:	4b0f      	ldr	r3, [pc, #60]	; (a31c <_sercom_set_handler+0x60>)
    a2e0:	68fa      	ldr	r2, [r7, #12]
    a2e2:	0092      	lsls	r2, r2, #2
    a2e4:	490e      	ldr	r1, [pc, #56]	; (a320 <_sercom_set_handler+0x64>)
    a2e6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    a2e8:	4b0e      	ldr	r3, [pc, #56]	; (a324 <_sercom_set_handler+0x68>)
    a2ea:	68fa      	ldr	r2, [r7, #12]
    a2ec:	0092      	lsls	r2, r2, #2
    a2ee:	2100      	movs	r1, #0
    a2f0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a2f2:	68fb      	ldr	r3, [r7, #12]
    a2f4:	3301      	adds	r3, #1
    a2f6:	60fb      	str	r3, [r7, #12]
    a2f8:	68fb      	ldr	r3, [r7, #12]
    a2fa:	2b05      	cmp	r3, #5
    a2fc:	d9ef      	bls.n	a2de <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    a2fe:	4b06      	ldr	r3, [pc, #24]	; (a318 <_sercom_set_handler+0x5c>)
    a300:	2201      	movs	r2, #1
    a302:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    a304:	1dfb      	adds	r3, r7, #7
    a306:	781a      	ldrb	r2, [r3, #0]
    a308:	4b04      	ldr	r3, [pc, #16]	; (a31c <_sercom_set_handler+0x60>)
    a30a:	0092      	lsls	r2, r2, #2
    a30c:	6839      	ldr	r1, [r7, #0]
    a30e:	50d1      	str	r1, [r2, r3]
}
    a310:	46c0      	nop			; (mov r8, r8)
    a312:	46bd      	mov	sp, r7
    a314:	b004      	add	sp, #16
    a316:	bd80      	pop	{r7, pc}
    a318:	2000382e 	.word	0x2000382e
    a31c:	20003830 	.word	0x20003830
    a320:	0000a2a9 	.word	0x0000a2a9
    a324:	20004fa8 	.word	0x20004fa8

0000a328 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    a328:	b590      	push	{r4, r7, lr}
    a32a:	b085      	sub	sp, #20
    a32c:	af00      	add	r7, sp, #0
    a32e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    a330:	2308      	movs	r3, #8
    a332:	18fb      	adds	r3, r7, r3
    a334:	4a0b      	ldr	r2, [pc, #44]	; (a364 <_sercom_get_interrupt_vector+0x3c>)
    a336:	6811      	ldr	r1, [r2, #0]
    a338:	6019      	str	r1, [r3, #0]
    a33a:	8892      	ldrh	r2, [r2, #4]
    a33c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    a33e:	230f      	movs	r3, #15
    a340:	18fc      	adds	r4, r7, r3
    a342:	687b      	ldr	r3, [r7, #4]
    a344:	0018      	movs	r0, r3
    a346:	4b08      	ldr	r3, [pc, #32]	; (a368 <_sercom_get_interrupt_vector+0x40>)
    a348:	4798      	blx	r3
    a34a:	0003      	movs	r3, r0
    a34c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    a34e:	230f      	movs	r3, #15
    a350:	18fb      	adds	r3, r7, r3
    a352:	781b      	ldrb	r3, [r3, #0]
    a354:	2208      	movs	r2, #8
    a356:	18ba      	adds	r2, r7, r2
    a358:	5cd3      	ldrb	r3, [r2, r3]
    a35a:	b25b      	sxtb	r3, r3
}
    a35c:	0018      	movs	r0, r3
    a35e:	46bd      	mov	sp, r7
    a360:	b005      	add	sp, #20
    a362:	bd90      	pop	{r4, r7, pc}
    a364:	000106e4 	.word	0x000106e4
    a368:	0000a259 	.word	0x0000a259

0000a36c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    a36c:	b580      	push	{r7, lr}
    a36e:	af00      	add	r7, sp, #0
    a370:	4b03      	ldr	r3, [pc, #12]	; (a380 <SERCOM0_Handler+0x14>)
    a372:	681b      	ldr	r3, [r3, #0]
    a374:	2000      	movs	r0, #0
    a376:	4798      	blx	r3
    a378:	46c0      	nop			; (mov r8, r8)
    a37a:	46bd      	mov	sp, r7
    a37c:	bd80      	pop	{r7, pc}
    a37e:	46c0      	nop			; (mov r8, r8)
    a380:	20003830 	.word	0x20003830

0000a384 <SERCOM1_Handler>:
    a384:	b580      	push	{r7, lr}
    a386:	af00      	add	r7, sp, #0
    a388:	4b03      	ldr	r3, [pc, #12]	; (a398 <SERCOM1_Handler+0x14>)
    a38a:	685b      	ldr	r3, [r3, #4]
    a38c:	2001      	movs	r0, #1
    a38e:	4798      	blx	r3
    a390:	46c0      	nop			; (mov r8, r8)
    a392:	46bd      	mov	sp, r7
    a394:	bd80      	pop	{r7, pc}
    a396:	46c0      	nop			; (mov r8, r8)
    a398:	20003830 	.word	0x20003830

0000a39c <SERCOM2_Handler>:
    a39c:	b580      	push	{r7, lr}
    a39e:	af00      	add	r7, sp, #0
    a3a0:	4b03      	ldr	r3, [pc, #12]	; (a3b0 <SERCOM2_Handler+0x14>)
    a3a2:	689b      	ldr	r3, [r3, #8]
    a3a4:	2002      	movs	r0, #2
    a3a6:	4798      	blx	r3
    a3a8:	46c0      	nop			; (mov r8, r8)
    a3aa:	46bd      	mov	sp, r7
    a3ac:	bd80      	pop	{r7, pc}
    a3ae:	46c0      	nop			; (mov r8, r8)
    a3b0:	20003830 	.word	0x20003830

0000a3b4 <SERCOM3_Handler>:
    a3b4:	b580      	push	{r7, lr}
    a3b6:	af00      	add	r7, sp, #0
    a3b8:	4b03      	ldr	r3, [pc, #12]	; (a3c8 <SERCOM3_Handler+0x14>)
    a3ba:	68db      	ldr	r3, [r3, #12]
    a3bc:	2003      	movs	r0, #3
    a3be:	4798      	blx	r3
    a3c0:	46c0      	nop			; (mov r8, r8)
    a3c2:	46bd      	mov	sp, r7
    a3c4:	bd80      	pop	{r7, pc}
    a3c6:	46c0      	nop			; (mov r8, r8)
    a3c8:	20003830 	.word	0x20003830

0000a3cc <SERCOM4_Handler>:
    a3cc:	b580      	push	{r7, lr}
    a3ce:	af00      	add	r7, sp, #0
    a3d0:	4b03      	ldr	r3, [pc, #12]	; (a3e0 <SERCOM4_Handler+0x14>)
    a3d2:	691b      	ldr	r3, [r3, #16]
    a3d4:	2004      	movs	r0, #4
    a3d6:	4798      	blx	r3
    a3d8:	46c0      	nop			; (mov r8, r8)
    a3da:	46bd      	mov	sp, r7
    a3dc:	bd80      	pop	{r7, pc}
    a3de:	46c0      	nop			; (mov r8, r8)
    a3e0:	20003830 	.word	0x20003830

0000a3e4 <SERCOM5_Handler>:
    a3e4:	b580      	push	{r7, lr}
    a3e6:	af00      	add	r7, sp, #0
    a3e8:	4b03      	ldr	r3, [pc, #12]	; (a3f8 <SERCOM5_Handler+0x14>)
    a3ea:	695b      	ldr	r3, [r3, #20]
    a3ec:	2005      	movs	r0, #5
    a3ee:	4798      	blx	r3
    a3f0:	46c0      	nop			; (mov r8, r8)
    a3f2:	46bd      	mov	sp, r7
    a3f4:	bd80      	pop	{r7, pc}
    a3f6:	46c0      	nop			; (mov r8, r8)
    a3f8:	20003830 	.word	0x20003830

0000a3fc <system_gclk_chan_get_config_defaults>:
{
    a3fc:	b580      	push	{r7, lr}
    a3fe:	b082      	sub	sp, #8
    a400:	af00      	add	r7, sp, #0
    a402:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a404:	687b      	ldr	r3, [r7, #4]
    a406:	2200      	movs	r2, #0
    a408:	701a      	strb	r2, [r3, #0]
}
    a40a:	46c0      	nop			; (mov r8, r8)
    a40c:	46bd      	mov	sp, r7
    a40e:	b002      	add	sp, #8
    a410:	bd80      	pop	{r7, pc}
	...

0000a414 <system_apb_clock_set_mask>:
{
    a414:	b580      	push	{r7, lr}
    a416:	b082      	sub	sp, #8
    a418:	af00      	add	r7, sp, #0
    a41a:	0002      	movs	r2, r0
    a41c:	6039      	str	r1, [r7, #0]
    a41e:	1dfb      	adds	r3, r7, #7
    a420:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a422:	1dfb      	adds	r3, r7, #7
    a424:	781b      	ldrb	r3, [r3, #0]
    a426:	2b01      	cmp	r3, #1
    a428:	d00a      	beq.n	a440 <system_apb_clock_set_mask+0x2c>
    a42a:	2b02      	cmp	r3, #2
    a42c:	d00f      	beq.n	a44e <system_apb_clock_set_mask+0x3a>
    a42e:	2b00      	cmp	r3, #0
    a430:	d114      	bne.n	a45c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    a432:	4b0e      	ldr	r3, [pc, #56]	; (a46c <system_apb_clock_set_mask+0x58>)
    a434:	4a0d      	ldr	r2, [pc, #52]	; (a46c <system_apb_clock_set_mask+0x58>)
    a436:	6991      	ldr	r1, [r2, #24]
    a438:	683a      	ldr	r2, [r7, #0]
    a43a:	430a      	orrs	r2, r1
    a43c:	619a      	str	r2, [r3, #24]
			break;
    a43e:	e00f      	b.n	a460 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    a440:	4b0a      	ldr	r3, [pc, #40]	; (a46c <system_apb_clock_set_mask+0x58>)
    a442:	4a0a      	ldr	r2, [pc, #40]	; (a46c <system_apb_clock_set_mask+0x58>)
    a444:	69d1      	ldr	r1, [r2, #28]
    a446:	683a      	ldr	r2, [r7, #0]
    a448:	430a      	orrs	r2, r1
    a44a:	61da      	str	r2, [r3, #28]
			break;
    a44c:	e008      	b.n	a460 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    a44e:	4b07      	ldr	r3, [pc, #28]	; (a46c <system_apb_clock_set_mask+0x58>)
    a450:	4a06      	ldr	r2, [pc, #24]	; (a46c <system_apb_clock_set_mask+0x58>)
    a452:	6a11      	ldr	r1, [r2, #32]
    a454:	683a      	ldr	r2, [r7, #0]
    a456:	430a      	orrs	r2, r1
    a458:	621a      	str	r2, [r3, #32]
			break;
    a45a:	e001      	b.n	a460 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    a45c:	2317      	movs	r3, #23
    a45e:	e000      	b.n	a462 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    a460:	2300      	movs	r3, #0
}
    a462:	0018      	movs	r0, r3
    a464:	46bd      	mov	sp, r7
    a466:	b002      	add	sp, #8
    a468:	bd80      	pop	{r7, pc}
    a46a:	46c0      	nop			; (mov r8, r8)
    a46c:	40000400 	.word	0x40000400

0000a470 <system_pinmux_get_config_defaults>:
{
    a470:	b580      	push	{r7, lr}
    a472:	b082      	sub	sp, #8
    a474:	af00      	add	r7, sp, #0
    a476:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a478:	687b      	ldr	r3, [r7, #4]
    a47a:	2280      	movs	r2, #128	; 0x80
    a47c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a47e:	687b      	ldr	r3, [r7, #4]
    a480:	2200      	movs	r2, #0
    a482:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a484:	687b      	ldr	r3, [r7, #4]
    a486:	2201      	movs	r2, #1
    a488:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a48a:	687b      	ldr	r3, [r7, #4]
    a48c:	2200      	movs	r2, #0
    a48e:	70da      	strb	r2, [r3, #3]
}
    a490:	46c0      	nop			; (mov r8, r8)
    a492:	46bd      	mov	sp, r7
    a494:	b002      	add	sp, #8
    a496:	bd80      	pop	{r7, pc}

0000a498 <system_is_debugger_present>:
{
    a498:	b580      	push	{r7, lr}
    a49a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    a49c:	4b05      	ldr	r3, [pc, #20]	; (a4b4 <system_is_debugger_present+0x1c>)
    a49e:	789b      	ldrb	r3, [r3, #2]
    a4a0:	b2db      	uxtb	r3, r3
    a4a2:	001a      	movs	r2, r3
    a4a4:	2302      	movs	r3, #2
    a4a6:	4013      	ands	r3, r2
    a4a8:	1e5a      	subs	r2, r3, #1
    a4aa:	4193      	sbcs	r3, r2
    a4ac:	b2db      	uxtb	r3, r3
}
    a4ae:	0018      	movs	r0, r3
    a4b0:	46bd      	mov	sp, r7
    a4b2:	bd80      	pop	{r7, pc}
    a4b4:	41002000 	.word	0x41002000

0000a4b8 <usart_is_syncing>:
{
    a4b8:	b580      	push	{r7, lr}
    a4ba:	b084      	sub	sp, #16
    a4bc:	af00      	add	r7, sp, #0
    a4be:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    a4c0:	687b      	ldr	r3, [r7, #4]
    a4c2:	681b      	ldr	r3, [r3, #0]
    a4c4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    a4c6:	68fb      	ldr	r3, [r7, #12]
    a4c8:	69db      	ldr	r3, [r3, #28]
    a4ca:	1e5a      	subs	r2, r3, #1
    a4cc:	4193      	sbcs	r3, r2
    a4ce:	b2db      	uxtb	r3, r3
}
    a4d0:	0018      	movs	r0, r3
    a4d2:	46bd      	mov	sp, r7
    a4d4:	b004      	add	sp, #16
    a4d6:	bd80      	pop	{r7, pc}

0000a4d8 <_usart_wait_for_sync>:
{
    a4d8:	b580      	push	{r7, lr}
    a4da:	b082      	sub	sp, #8
    a4dc:	af00      	add	r7, sp, #0
    a4de:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    a4e0:	46c0      	nop			; (mov r8, r8)
    a4e2:	687b      	ldr	r3, [r7, #4]
    a4e4:	0018      	movs	r0, r3
    a4e6:	4b04      	ldr	r3, [pc, #16]	; (a4f8 <_usart_wait_for_sync+0x20>)
    a4e8:	4798      	blx	r3
    a4ea:	1e03      	subs	r3, r0, #0
    a4ec:	d1f9      	bne.n	a4e2 <_usart_wait_for_sync+0xa>
}
    a4ee:	46c0      	nop			; (mov r8, r8)
    a4f0:	46bd      	mov	sp, r7
    a4f2:	b002      	add	sp, #8
    a4f4:	bd80      	pop	{r7, pc}
    a4f6:	46c0      	nop			; (mov r8, r8)
    a4f8:	0000a4b9 	.word	0x0000a4b9

0000a4fc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    a4fc:	b5b0      	push	{r4, r5, r7, lr}
    a4fe:	b08c      	sub	sp, #48	; 0x30
    a500:	af02      	add	r7, sp, #8
    a502:	6078      	str	r0, [r7, #4]
    a504:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a506:	687b      	ldr	r3, [r7, #4]
    a508:	681b      	ldr	r3, [r3, #0]
    a50a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a50c:	687b      	ldr	r3, [r7, #4]
    a50e:	681b      	ldr	r3, [r3, #0]
    a510:	0018      	movs	r0, r3
    a512:	4bab      	ldr	r3, [pc, #684]	; (a7c0 <_usart_set_config+0x2c4>)
    a514:	4798      	blx	r3
    a516:	0003      	movs	r3, r0
    a518:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a51a:	697b      	ldr	r3, [r7, #20]
    a51c:	3314      	adds	r3, #20
    a51e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    a520:	2300      	movs	r3, #0
    a522:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    a524:	2300      	movs	r3, #0
    a526:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    a528:	230a      	movs	r3, #10
    a52a:	18fb      	adds	r3, r7, r3
    a52c:	2200      	movs	r2, #0
    a52e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a530:	231f      	movs	r3, #31
    a532:	18fb      	adds	r3, r7, r3
    a534:	2200      	movs	r2, #0
    a536:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    a538:	231e      	movs	r3, #30
    a53a:	18fb      	adds	r3, r7, r3
    a53c:	2210      	movs	r2, #16
    a53e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    a540:	683b      	ldr	r3, [r7, #0]
    a542:	8a1b      	ldrh	r3, [r3, #16]
    a544:	2280      	movs	r2, #128	; 0x80
    a546:	01d2      	lsls	r2, r2, #7
    a548:	4293      	cmp	r3, r2
    a54a:	d01c      	beq.n	a586 <_usart_set_config+0x8a>
    a54c:	2280      	movs	r2, #128	; 0x80
    a54e:	01d2      	lsls	r2, r2, #7
    a550:	4293      	cmp	r3, r2
    a552:	dc06      	bgt.n	a562 <_usart_set_config+0x66>
    a554:	2b00      	cmp	r3, #0
    a556:	d00d      	beq.n	a574 <_usart_set_config+0x78>
    a558:	2280      	movs	r2, #128	; 0x80
    a55a:	0192      	lsls	r2, r2, #6
    a55c:	4293      	cmp	r3, r2
    a55e:	d024      	beq.n	a5aa <_usart_set_config+0xae>
    a560:	e035      	b.n	a5ce <_usart_set_config+0xd2>
    a562:	22c0      	movs	r2, #192	; 0xc0
    a564:	01d2      	lsls	r2, r2, #7
    a566:	4293      	cmp	r3, r2
    a568:	d028      	beq.n	a5bc <_usart_set_config+0xc0>
    a56a:	2280      	movs	r2, #128	; 0x80
    a56c:	0212      	lsls	r2, r2, #8
    a56e:	4293      	cmp	r3, r2
    a570:	d012      	beq.n	a598 <_usart_set_config+0x9c>
    a572:	e02c      	b.n	a5ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a574:	231f      	movs	r3, #31
    a576:	18fb      	adds	r3, r7, r3
    a578:	2200      	movs	r2, #0
    a57a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    a57c:	231e      	movs	r3, #30
    a57e:	18fb      	adds	r3, r7, r3
    a580:	2210      	movs	r2, #16
    a582:	701a      	strb	r2, [r3, #0]
			break;
    a584:	e023      	b.n	a5ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a586:	231f      	movs	r3, #31
    a588:	18fb      	adds	r3, r7, r3
    a58a:	2200      	movs	r2, #0
    a58c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    a58e:	231e      	movs	r3, #30
    a590:	18fb      	adds	r3, r7, r3
    a592:	2208      	movs	r2, #8
    a594:	701a      	strb	r2, [r3, #0]
			break;
    a596:	e01a      	b.n	a5ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a598:	231f      	movs	r3, #31
    a59a:	18fb      	adds	r3, r7, r3
    a59c:	2200      	movs	r2, #0
    a59e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    a5a0:	231e      	movs	r3, #30
    a5a2:	18fb      	adds	r3, r7, r3
    a5a4:	2203      	movs	r2, #3
    a5a6:	701a      	strb	r2, [r3, #0]
			break;
    a5a8:	e011      	b.n	a5ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    a5aa:	231f      	movs	r3, #31
    a5ac:	18fb      	adds	r3, r7, r3
    a5ae:	2201      	movs	r2, #1
    a5b0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    a5b2:	231e      	movs	r3, #30
    a5b4:	18fb      	adds	r3, r7, r3
    a5b6:	2210      	movs	r2, #16
    a5b8:	701a      	strb	r2, [r3, #0]
			break;
    a5ba:	e008      	b.n	a5ce <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    a5bc:	231f      	movs	r3, #31
    a5be:	18fb      	adds	r3, r7, r3
    a5c0:	2201      	movs	r2, #1
    a5c2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    a5c4:	231e      	movs	r3, #30
    a5c6:	18fb      	adds	r3, r7, r3
    a5c8:	2208      	movs	r2, #8
    a5ca:	701a      	strb	r2, [r3, #0]
			break;
    a5cc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    a5ce:	683b      	ldr	r3, [r7, #0]
    a5d0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    a5d2:	683b      	ldr	r3, [r7, #0]
    a5d4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    a5d6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    a5d8:	683b      	ldr	r3, [r7, #0]
    a5da:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    a5dc:	4313      	orrs	r3, r2
		config->sample_rate |
    a5de:	683a      	ldr	r2, [r7, #0]
    a5e0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    a5e2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    a5e4:	683a      	ldr	r2, [r7, #0]
    a5e6:	7e12      	ldrb	r2, [r2, #24]
    a5e8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    a5ea:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    a5ec:	683a      	ldr	r2, [r7, #0]
    a5ee:	2126      	movs	r1, #38	; 0x26
    a5f0:	5c52      	ldrb	r2, [r2, r1]
    a5f2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    a5f4:	4313      	orrs	r3, r2
    a5f6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    a5f8:	231d      	movs	r3, #29
    a5fa:	18fb      	adds	r3, r7, r3
    a5fc:	2200      	movs	r2, #0
    a5fe:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    a600:	683b      	ldr	r3, [r7, #0]
    a602:	685b      	ldr	r3, [r3, #4]
    a604:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    a606:	68fb      	ldr	r3, [r7, #12]
    a608:	2b00      	cmp	r3, #0
    a60a:	d01e      	beq.n	a64a <_usart_set_config+0x14e>
    a60c:	2280      	movs	r2, #128	; 0x80
    a60e:	0552      	lsls	r2, r2, #21
    a610:	4293      	cmp	r3, r2
    a612:	d14f      	bne.n	a6b4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    a614:	683b      	ldr	r3, [r7, #0]
    a616:	2227      	movs	r2, #39	; 0x27
    a618:	5c9b      	ldrb	r3, [r3, r2]
    a61a:	2201      	movs	r2, #1
    a61c:	4053      	eors	r3, r2
    a61e:	b2db      	uxtb	r3, r3
    a620:	2b00      	cmp	r3, #0
    a622:	d046      	beq.n	a6b2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    a624:	683b      	ldr	r3, [r7, #0]
    a626:	6a1d      	ldr	r5, [r3, #32]
    a628:	693b      	ldr	r3, [r7, #16]
    a62a:	b2db      	uxtb	r3, r3
    a62c:	0018      	movs	r0, r3
    a62e:	4b65      	ldr	r3, [pc, #404]	; (a7c4 <_usart_set_config+0x2c8>)
    a630:	4798      	blx	r3
    a632:	0001      	movs	r1, r0
    a634:	231d      	movs	r3, #29
    a636:	18fc      	adds	r4, r7, r3
    a638:	230a      	movs	r3, #10
    a63a:	18fb      	adds	r3, r7, r3
    a63c:	001a      	movs	r2, r3
    a63e:	0028      	movs	r0, r5
    a640:	4b61      	ldr	r3, [pc, #388]	; (a7c8 <_usart_set_config+0x2cc>)
    a642:	4798      	blx	r3
    a644:	0003      	movs	r3, r0
    a646:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    a648:	e033      	b.n	a6b2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    a64a:	683b      	ldr	r3, [r7, #0]
    a64c:	2227      	movs	r2, #39	; 0x27
    a64e:	5c9b      	ldrb	r3, [r3, r2]
    a650:	2b00      	cmp	r3, #0
    a652:	d014      	beq.n	a67e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    a654:	683b      	ldr	r3, [r7, #0]
    a656:	6a18      	ldr	r0, [r3, #32]
    a658:	683b      	ldr	r3, [r7, #0]
    a65a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    a65c:	231d      	movs	r3, #29
    a65e:	18fc      	adds	r4, r7, r3
    a660:	231f      	movs	r3, #31
    a662:	18fb      	adds	r3, r7, r3
    a664:	781d      	ldrb	r5, [r3, #0]
    a666:	230a      	movs	r3, #10
    a668:	18fa      	adds	r2, r7, r3
    a66a:	231e      	movs	r3, #30
    a66c:	18fb      	adds	r3, r7, r3
    a66e:	781b      	ldrb	r3, [r3, #0]
    a670:	9300      	str	r3, [sp, #0]
    a672:	002b      	movs	r3, r5
    a674:	4d55      	ldr	r5, [pc, #340]	; (a7cc <_usart_set_config+0x2d0>)
    a676:	47a8      	blx	r5
    a678:	0003      	movs	r3, r0
    a67a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    a67c:	e01a      	b.n	a6b4 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    a67e:	683b      	ldr	r3, [r7, #0]
    a680:	6a1d      	ldr	r5, [r3, #32]
    a682:	693b      	ldr	r3, [r7, #16]
    a684:	b2db      	uxtb	r3, r3
    a686:	0018      	movs	r0, r3
    a688:	4b4e      	ldr	r3, [pc, #312]	; (a7c4 <_usart_set_config+0x2c8>)
    a68a:	4798      	blx	r3
				status_code =
    a68c:	231d      	movs	r3, #29
    a68e:	18fc      	adds	r4, r7, r3
    a690:	231f      	movs	r3, #31
    a692:	18fb      	adds	r3, r7, r3
    a694:	7819      	ldrb	r1, [r3, #0]
    a696:	230a      	movs	r3, #10
    a698:	18fa      	adds	r2, r7, r3
    a69a:	231e      	movs	r3, #30
    a69c:	18fb      	adds	r3, r7, r3
    a69e:	781b      	ldrb	r3, [r3, #0]
    a6a0:	9300      	str	r3, [sp, #0]
    a6a2:	000b      	movs	r3, r1
    a6a4:	0001      	movs	r1, r0
    a6a6:	0028      	movs	r0, r5
    a6a8:	4d48      	ldr	r5, [pc, #288]	; (a7cc <_usart_set_config+0x2d0>)
    a6aa:	47a8      	blx	r5
    a6ac:	0003      	movs	r3, r0
    a6ae:	7023      	strb	r3, [r4, #0]
			break;
    a6b0:	e000      	b.n	a6b4 <_usart_set_config+0x1b8>
			break;
    a6b2:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    a6b4:	231d      	movs	r3, #29
    a6b6:	18fb      	adds	r3, r7, r3
    a6b8:	781b      	ldrb	r3, [r3, #0]
    a6ba:	2b00      	cmp	r3, #0
    a6bc:	d003      	beq.n	a6c6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    a6be:	231d      	movs	r3, #29
    a6c0:	18fb      	adds	r3, r7, r3
    a6c2:	781b      	ldrb	r3, [r3, #0]
    a6c4:	e077      	b.n	a7b6 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    a6c6:	683b      	ldr	r3, [r7, #0]
    a6c8:	7e5b      	ldrb	r3, [r3, #25]
    a6ca:	2b00      	cmp	r3, #0
    a6cc:	d003      	beq.n	a6d6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    a6ce:	683b      	ldr	r3, [r7, #0]
    a6d0:	7e9a      	ldrb	r2, [r3, #26]
    a6d2:	69bb      	ldr	r3, [r7, #24]
    a6d4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a6d6:	687b      	ldr	r3, [r7, #4]
    a6d8:	0018      	movs	r0, r3
    a6da:	4b3d      	ldr	r3, [pc, #244]	; (a7d0 <_usart_set_config+0x2d4>)
    a6dc:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    a6de:	230a      	movs	r3, #10
    a6e0:	18fb      	adds	r3, r7, r3
    a6e2:	881a      	ldrh	r2, [r3, #0]
    a6e4:	69bb      	ldr	r3, [r7, #24]
    a6e6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    a6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a6ea:	68fb      	ldr	r3, [r7, #12]
    a6ec:	4313      	orrs	r3, r2
    a6ee:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    a6f0:	683b      	ldr	r3, [r7, #0]
    a6f2:	2227      	movs	r2, #39	; 0x27
    a6f4:	5c9b      	ldrb	r3, [r3, r2]
    a6f6:	2201      	movs	r2, #1
    a6f8:	4053      	eors	r3, r2
    a6fa:	b2db      	uxtb	r3, r3
    a6fc:	2b00      	cmp	r3, #0
    a6fe:	d003      	beq.n	a708 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a702:	2204      	movs	r2, #4
    a704:	4313      	orrs	r3, r2
    a706:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    a708:	683b      	ldr	r3, [r7, #0]
    a70a:	7e5b      	ldrb	r3, [r3, #25]
    a70c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    a70e:	683b      	ldr	r3, [r7, #0]
    a710:	7f1b      	ldrb	r3, [r3, #28]
    a712:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    a714:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    a716:	683b      	ldr	r3, [r7, #0]
    a718:	7f5b      	ldrb	r3, [r3, #29]
    a71a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    a71c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    a71e:	683b      	ldr	r3, [r7, #0]
    a720:	2124      	movs	r1, #36	; 0x24
    a722:	5c5b      	ldrb	r3, [r3, r1]
    a724:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    a726:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    a728:	683b      	ldr	r3, [r7, #0]
    a72a:	2125      	movs	r1, #37	; 0x25
    a72c:	5c5b      	ldrb	r3, [r3, r1]
    a72e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    a730:	4313      	orrs	r3, r2
	ctrlb =  
    a732:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    a734:	683b      	ldr	r3, [r7, #0]
    a736:	7a9b      	ldrb	r3, [r3, #10]
    a738:	001a      	movs	r2, r3
    a73a:	6a3b      	ldr	r3, [r7, #32]
    a73c:	4313      	orrs	r3, r2
    a73e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    a740:	683b      	ldr	r3, [r7, #0]
    a742:	7adb      	ldrb	r3, [r3, #11]
    a744:	001a      	movs	r2, r3
    a746:	6a3b      	ldr	r3, [r7, #32]
    a748:	4313      	orrs	r3, r2
    a74a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    a74c:	683b      	ldr	r3, [r7, #0]
    a74e:	891b      	ldrh	r3, [r3, #8]
    a750:	2bff      	cmp	r3, #255	; 0xff
    a752:	d00b      	beq.n	a76c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a756:	2280      	movs	r2, #128	; 0x80
    a758:	0452      	lsls	r2, r2, #17
    a75a:	4313      	orrs	r3, r2
    a75c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    a75e:	683b      	ldr	r3, [r7, #0]
    a760:	891b      	ldrh	r3, [r3, #8]
    a762:	001a      	movs	r2, r3
    a764:	6a3b      	ldr	r3, [r7, #32]
    a766:	4313      	orrs	r3, r2
    a768:	623b      	str	r3, [r7, #32]
    a76a:	e008      	b.n	a77e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    a76c:	683b      	ldr	r3, [r7, #0]
    a76e:	7edb      	ldrb	r3, [r3, #27]
    a770:	2b00      	cmp	r3, #0
    a772:	d004      	beq.n	a77e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a776:	2280      	movs	r2, #128	; 0x80
    a778:	04d2      	lsls	r2, r2, #19
    a77a:	4313      	orrs	r3, r2
    a77c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    a77e:	683b      	ldr	r3, [r7, #0]
    a780:	222c      	movs	r2, #44	; 0x2c
    a782:	5c9b      	ldrb	r3, [r3, r2]
    a784:	2b00      	cmp	r3, #0
    a786:	d103      	bne.n	a790 <_usart_set_config+0x294>
    a788:	4b12      	ldr	r3, [pc, #72]	; (a7d4 <_usart_set_config+0x2d8>)
    a78a:	4798      	blx	r3
    a78c:	1e03      	subs	r3, r0, #0
    a78e:	d003      	beq.n	a798 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a792:	2280      	movs	r2, #128	; 0x80
    a794:	4313      	orrs	r3, r2
    a796:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a798:	687b      	ldr	r3, [r7, #4]
    a79a:	0018      	movs	r0, r3
    a79c:	4b0c      	ldr	r3, [pc, #48]	; (a7d0 <_usart_set_config+0x2d4>)
    a79e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    a7a0:	69bb      	ldr	r3, [r7, #24]
    a7a2:	6a3a      	ldr	r2, [r7, #32]
    a7a4:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a7a6:	687b      	ldr	r3, [r7, #4]
    a7a8:	0018      	movs	r0, r3
    a7aa:	4b09      	ldr	r3, [pc, #36]	; (a7d0 <_usart_set_config+0x2d4>)
    a7ac:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    a7ae:	69bb      	ldr	r3, [r7, #24]
    a7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a7b2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    a7b4:	2300      	movs	r3, #0
}
    a7b6:	0018      	movs	r0, r3
    a7b8:	46bd      	mov	sp, r7
    a7ba:	b00a      	add	sp, #40	; 0x28
    a7bc:	bdb0      	pop	{r4, r5, r7, pc}
    a7be:	46c0      	nop			; (mov r8, r8)
    a7c0:	0000a259 	.word	0x0000a259
    a7c4:	0000bc59 	.word	0x0000bc59
    a7c8:	00009dd3 	.word	0x00009dd3
    a7cc:	00009e51 	.word	0x00009e51
    a7d0:	0000a4d9 	.word	0x0000a4d9
    a7d4:	0000a499 	.word	0x0000a499

0000a7d8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    a7d8:	b590      	push	{r4, r7, lr}
    a7da:	b093      	sub	sp, #76	; 0x4c
    a7dc:	af00      	add	r7, sp, #0
    a7de:	60f8      	str	r0, [r7, #12]
    a7e0:	60b9      	str	r1, [r7, #8]
    a7e2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    a7e4:	233b      	movs	r3, #59	; 0x3b
    a7e6:	18fb      	adds	r3, r7, r3
    a7e8:	2200      	movs	r2, #0
    a7ea:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    a7ec:	68fb      	ldr	r3, [r7, #12]
    a7ee:	68ba      	ldr	r2, [r7, #8]
    a7f0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a7f2:	68fb      	ldr	r3, [r7, #12]
    a7f4:	681b      	ldr	r3, [r3, #0]
    a7f6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a7f8:	68fb      	ldr	r3, [r7, #12]
    a7fa:	681b      	ldr	r3, [r3, #0]
    a7fc:	0018      	movs	r0, r3
    a7fe:	4b86      	ldr	r3, [pc, #536]	; (aa18 <usart_init+0x240>)
    a800:	4798      	blx	r3
    a802:	0003      	movs	r3, r0
    a804:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a808:	3302      	adds	r3, #2
    a80a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a80e:	3314      	adds	r3, #20
    a810:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    a812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a814:	681b      	ldr	r3, [r3, #0]
    a816:	2201      	movs	r2, #1
    a818:	4013      	ands	r3, r2
    a81a:	d001      	beq.n	a820 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    a81c:	2305      	movs	r3, #5
    a81e:	e0f6      	b.n	aa0e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    a820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a822:	681b      	ldr	r3, [r3, #0]
    a824:	2202      	movs	r2, #2
    a826:	4013      	ands	r3, r2
    a828:	d001      	beq.n	a82e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    a82a:	231c      	movs	r3, #28
    a82c:	e0ef      	b.n	aa0e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    a82e:	2201      	movs	r2, #1
    a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a832:	409a      	lsls	r2, r3
    a834:	0013      	movs	r3, r2
    a836:	0019      	movs	r1, r3
    a838:	2002      	movs	r0, #2
    a83a:	4b78      	ldr	r3, [pc, #480]	; (aa1c <usart_init+0x244>)
    a83c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a83e:	2324      	movs	r3, #36	; 0x24
    a840:	18fb      	adds	r3, r7, r3
    a842:	0018      	movs	r0, r3
    a844:	4b76      	ldr	r3, [pc, #472]	; (aa20 <usart_init+0x248>)
    a846:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    a848:	687b      	ldr	r3, [r7, #4]
    a84a:	222d      	movs	r2, #45	; 0x2d
    a84c:	5c9a      	ldrb	r2, [r3, r2]
    a84e:	2324      	movs	r3, #36	; 0x24
    a850:	18fb      	adds	r3, r7, r3
    a852:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a856:	b2db      	uxtb	r3, r3
    a858:	2224      	movs	r2, #36	; 0x24
    a85a:	18ba      	adds	r2, r7, r2
    a85c:	0011      	movs	r1, r2
    a85e:	0018      	movs	r0, r3
    a860:	4b70      	ldr	r3, [pc, #448]	; (aa24 <usart_init+0x24c>)
    a862:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a866:	b2db      	uxtb	r3, r3
    a868:	0018      	movs	r0, r3
    a86a:	4b6f      	ldr	r3, [pc, #444]	; (aa28 <usart_init+0x250>)
    a86c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    a86e:	687b      	ldr	r3, [r7, #4]
    a870:	222d      	movs	r2, #45	; 0x2d
    a872:	5c9b      	ldrb	r3, [r3, r2]
    a874:	2100      	movs	r1, #0
    a876:	0018      	movs	r0, r3
    a878:	4b6c      	ldr	r3, [pc, #432]	; (aa2c <usart_init+0x254>)
    a87a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    a87c:	687b      	ldr	r3, [r7, #4]
    a87e:	7ada      	ldrb	r2, [r3, #11]
    a880:	68fb      	ldr	r3, [r7, #12]
    a882:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	2224      	movs	r2, #36	; 0x24
    a888:	5c9a      	ldrb	r2, [r3, r2]
    a88a:	68fb      	ldr	r3, [r7, #12]
    a88c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    a88e:	687b      	ldr	r3, [r7, #4]
    a890:	2225      	movs	r2, #37	; 0x25
    a892:	5c9a      	ldrb	r2, [r3, r2]
    a894:	68fb      	ldr	r3, [r7, #12]
    a896:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    a898:	687b      	ldr	r3, [r7, #4]
    a89a:	7eda      	ldrb	r2, [r3, #27]
    a89c:	68fb      	ldr	r3, [r7, #12]
    a89e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    a8a0:	687b      	ldr	r3, [r7, #4]
    a8a2:	7f1a      	ldrb	r2, [r3, #28]
    a8a4:	68fb      	ldr	r3, [r7, #12]
    a8a6:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    a8a8:	233b      	movs	r3, #59	; 0x3b
    a8aa:	18fc      	adds	r4, r7, r3
    a8ac:	687a      	ldr	r2, [r7, #4]
    a8ae:	68fb      	ldr	r3, [r7, #12]
    a8b0:	0011      	movs	r1, r2
    a8b2:	0018      	movs	r0, r3
    a8b4:	4b5e      	ldr	r3, [pc, #376]	; (aa30 <usart_init+0x258>)
    a8b6:	4798      	blx	r3
    a8b8:	0003      	movs	r3, r0
    a8ba:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    a8bc:	233b      	movs	r3, #59	; 0x3b
    a8be:	18fb      	adds	r3, r7, r3
    a8c0:	781b      	ldrb	r3, [r3, #0]
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d003      	beq.n	a8ce <usart_init+0xf6>
		return status_code;
    a8c6:	233b      	movs	r3, #59	; 0x3b
    a8c8:	18fb      	adds	r3, r7, r3
    a8ca:	781b      	ldrb	r3, [r3, #0]
    a8cc:	e09f      	b.n	aa0e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    a8ce:	2320      	movs	r3, #32
    a8d0:	18fb      	adds	r3, r7, r3
    a8d2:	0018      	movs	r0, r3
    a8d4:	4b57      	ldr	r3, [pc, #348]	; (aa34 <usart_init+0x25c>)
    a8d6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a8d8:	2320      	movs	r3, #32
    a8da:	18fb      	adds	r3, r7, r3
    a8dc:	2200      	movs	r2, #0
    a8de:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    a8e0:	2320      	movs	r3, #32
    a8e2:	18fb      	adds	r3, r7, r3
    a8e4:	2200      	movs	r2, #0
    a8e6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    a8ec:	2310      	movs	r3, #16
    a8ee:	18fb      	adds	r3, r7, r3
    a8f0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    a8f2:	687b      	ldr	r3, [r7, #4]
    a8f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    a8f6:	2310      	movs	r3, #16
    a8f8:	18fb      	adds	r3, r7, r3
    a8fa:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    a900:	2310      	movs	r3, #16
    a902:	18fb      	adds	r3, r7, r3
    a904:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    a90a:	2310      	movs	r3, #16
    a90c:	18fb      	adds	r3, r7, r3
    a90e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a910:	2347      	movs	r3, #71	; 0x47
    a912:	18fb      	adds	r3, r7, r3
    a914:	2200      	movs	r2, #0
    a916:	701a      	strb	r2, [r3, #0]
    a918:	e02c      	b.n	a974 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    a91a:	2347      	movs	r3, #71	; 0x47
    a91c:	18fb      	adds	r3, r7, r3
    a91e:	781a      	ldrb	r2, [r3, #0]
    a920:	2310      	movs	r3, #16
    a922:	18fb      	adds	r3, r7, r3
    a924:	0092      	lsls	r2, r2, #2
    a926:	58d3      	ldr	r3, [r2, r3]
    a928:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    a92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a92c:	2b00      	cmp	r3, #0
    a92e:	d109      	bne.n	a944 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    a930:	2347      	movs	r3, #71	; 0x47
    a932:	18fb      	adds	r3, r7, r3
    a934:	781a      	ldrb	r2, [r3, #0]
    a936:	68bb      	ldr	r3, [r7, #8]
    a938:	0011      	movs	r1, r2
    a93a:	0018      	movs	r0, r3
    a93c:	4b3e      	ldr	r3, [pc, #248]	; (aa38 <usart_init+0x260>)
    a93e:	4798      	blx	r3
    a940:	0003      	movs	r3, r0
    a942:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    a944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a946:	3301      	adds	r3, #1
    a948:	d00d      	beq.n	a966 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    a94a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a94c:	b2da      	uxtb	r2, r3
    a94e:	2320      	movs	r3, #32
    a950:	18fb      	adds	r3, r7, r3
    a952:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    a954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a956:	0c1b      	lsrs	r3, r3, #16
    a958:	b2db      	uxtb	r3, r3
    a95a:	2220      	movs	r2, #32
    a95c:	18ba      	adds	r2, r7, r2
    a95e:	0011      	movs	r1, r2
    a960:	0018      	movs	r0, r3
    a962:	4b36      	ldr	r3, [pc, #216]	; (aa3c <usart_init+0x264>)
    a964:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    a966:	2347      	movs	r3, #71	; 0x47
    a968:	18fb      	adds	r3, r7, r3
    a96a:	781a      	ldrb	r2, [r3, #0]
    a96c:	2347      	movs	r3, #71	; 0x47
    a96e:	18fb      	adds	r3, r7, r3
    a970:	3201      	adds	r2, #1
    a972:	701a      	strb	r2, [r3, #0]
    a974:	2347      	movs	r3, #71	; 0x47
    a976:	18fb      	adds	r3, r7, r3
    a978:	781b      	ldrb	r3, [r3, #0]
    a97a:	2b03      	cmp	r3, #3
    a97c:	d9cd      	bls.n	a91a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    a97e:	2300      	movs	r3, #0
    a980:	63fb      	str	r3, [r7, #60]	; 0x3c
    a982:	e00a      	b.n	a99a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    a984:	68fa      	ldr	r2, [r7, #12]
    a986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a988:	3302      	adds	r3, #2
    a98a:	009b      	lsls	r3, r3, #2
    a98c:	18d3      	adds	r3, r2, r3
    a98e:	3304      	adds	r3, #4
    a990:	2200      	movs	r2, #0
    a992:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    a994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a996:	3301      	adds	r3, #1
    a998:	63fb      	str	r3, [r7, #60]	; 0x3c
    a99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a99c:	2b05      	cmp	r3, #5
    a99e:	d9f1      	bls.n	a984 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    a9a0:	68fb      	ldr	r3, [r7, #12]
    a9a2:	2200      	movs	r2, #0
    a9a4:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    a9a6:	68fb      	ldr	r3, [r7, #12]
    a9a8:	2200      	movs	r2, #0
    a9aa:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    a9ac:	68fb      	ldr	r3, [r7, #12]
    a9ae:	2200      	movs	r2, #0
    a9b0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    a9b2:	68fb      	ldr	r3, [r7, #12]
    a9b4:	2200      	movs	r2, #0
    a9b6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    a9b8:	68fb      	ldr	r3, [r7, #12]
    a9ba:	2230      	movs	r2, #48	; 0x30
    a9bc:	2100      	movs	r1, #0
    a9be:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    a9c0:	68fb      	ldr	r3, [r7, #12]
    a9c2:	2231      	movs	r2, #49	; 0x31
    a9c4:	2100      	movs	r1, #0
    a9c6:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    a9c8:	68fb      	ldr	r3, [r7, #12]
    a9ca:	2232      	movs	r2, #50	; 0x32
    a9cc:	2100      	movs	r1, #0
    a9ce:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    a9d0:	68fb      	ldr	r3, [r7, #12]
    a9d2:	2233      	movs	r2, #51	; 0x33
    a9d4:	2100      	movs	r1, #0
    a9d6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    a9d8:	68fb      	ldr	r3, [r7, #12]
    a9da:	681b      	ldr	r3, [r3, #0]
    a9dc:	2227      	movs	r2, #39	; 0x27
    a9de:	18bc      	adds	r4, r7, r2
    a9e0:	0018      	movs	r0, r3
    a9e2:	4b0d      	ldr	r3, [pc, #52]	; (aa18 <usart_init+0x240>)
    a9e4:	4798      	blx	r3
    a9e6:	0003      	movs	r3, r0
    a9e8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    a9ea:	4a15      	ldr	r2, [pc, #84]	; (aa40 <usart_init+0x268>)
    a9ec:	2327      	movs	r3, #39	; 0x27
    a9ee:	18fb      	adds	r3, r7, r3
    a9f0:	781b      	ldrb	r3, [r3, #0]
    a9f2:	0011      	movs	r1, r2
    a9f4:	0018      	movs	r0, r3
    a9f6:	4b13      	ldr	r3, [pc, #76]	; (aa44 <usart_init+0x26c>)
    a9f8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    a9fa:	2327      	movs	r3, #39	; 0x27
    a9fc:	18fb      	adds	r3, r7, r3
    a9fe:	781a      	ldrb	r2, [r3, #0]
    aa00:	4b11      	ldr	r3, [pc, #68]	; (aa48 <usart_init+0x270>)
    aa02:	0092      	lsls	r2, r2, #2
    aa04:	68f9      	ldr	r1, [r7, #12]
    aa06:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    aa08:	233b      	movs	r3, #59	; 0x3b
    aa0a:	18fb      	adds	r3, r7, r3
    aa0c:	781b      	ldrb	r3, [r3, #0]
}
    aa0e:	0018      	movs	r0, r3
    aa10:	46bd      	mov	sp, r7
    aa12:	b013      	add	sp, #76	; 0x4c
    aa14:	bd90      	pop	{r4, r7, pc}
    aa16:	46c0      	nop			; (mov r8, r8)
    aa18:	0000a259 	.word	0x0000a259
    aa1c:	0000a415 	.word	0x0000a415
    aa20:	0000a3fd 	.word	0x0000a3fd
    aa24:	0000bb35 	.word	0x0000bb35
    aa28:	0000bb79 	.word	0x0000bb79
    aa2c:	0000a011 	.word	0x0000a011
    aa30:	0000a4fd 	.word	0x0000a4fd
    aa34:	0000a471 	.word	0x0000a471
    aa38:	0000a09d 	.word	0x0000a09d
    aa3c:	0000be95 	.word	0x0000be95
    aa40:	0000acb5 	.word	0x0000acb5
    aa44:	0000a2bd 	.word	0x0000a2bd
    aa48:	20004fa8 	.word	0x20004fa8

0000aa4c <system_interrupt_enter_critical_section>:
{
    aa4c:	b580      	push	{r7, lr}
    aa4e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    aa50:	4b02      	ldr	r3, [pc, #8]	; (aa5c <system_interrupt_enter_critical_section+0x10>)
    aa52:	4798      	blx	r3
}
    aa54:	46c0      	nop			; (mov r8, r8)
    aa56:	46bd      	mov	sp, r7
    aa58:	bd80      	pop	{r7, pc}
    aa5a:	46c0      	nop			; (mov r8, r8)
    aa5c:	0000964d 	.word	0x0000964d

0000aa60 <system_interrupt_leave_critical_section>:
{
    aa60:	b580      	push	{r7, lr}
    aa62:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    aa64:	4b02      	ldr	r3, [pc, #8]	; (aa70 <system_interrupt_leave_critical_section+0x10>)
    aa66:	4798      	blx	r3
}
    aa68:	46c0      	nop			; (mov r8, r8)
    aa6a:	46bd      	mov	sp, r7
    aa6c:	bd80      	pop	{r7, pc}
    aa6e:	46c0      	nop			; (mov r8, r8)
    aa70:	000096a1 	.word	0x000096a1

0000aa74 <usart_is_syncing>:
{
    aa74:	b580      	push	{r7, lr}
    aa76:	b084      	sub	sp, #16
    aa78:	af00      	add	r7, sp, #0
    aa7a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    aa7c:	687b      	ldr	r3, [r7, #4]
    aa7e:	681b      	ldr	r3, [r3, #0]
    aa80:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    aa82:	68fb      	ldr	r3, [r7, #12]
    aa84:	69db      	ldr	r3, [r3, #28]
    aa86:	1e5a      	subs	r2, r3, #1
    aa88:	4193      	sbcs	r3, r2
    aa8a:	b2db      	uxtb	r3, r3
}
    aa8c:	0018      	movs	r0, r3
    aa8e:	46bd      	mov	sp, r7
    aa90:	b004      	add	sp, #16
    aa92:	bd80      	pop	{r7, pc}

0000aa94 <_usart_wait_for_sync>:
{
    aa94:	b580      	push	{r7, lr}
    aa96:	b082      	sub	sp, #8
    aa98:	af00      	add	r7, sp, #0
    aa9a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    aa9c:	46c0      	nop			; (mov r8, r8)
    aa9e:	687b      	ldr	r3, [r7, #4]
    aaa0:	0018      	movs	r0, r3
    aaa2:	4b04      	ldr	r3, [pc, #16]	; (aab4 <_usart_wait_for_sync+0x20>)
    aaa4:	4798      	blx	r3
    aaa6:	1e03      	subs	r3, r0, #0
    aaa8:	d1f9      	bne.n	aa9e <_usart_wait_for_sync+0xa>
}
    aaaa:	46c0      	nop			; (mov r8, r8)
    aaac:	46bd      	mov	sp, r7
    aaae:	b002      	add	sp, #8
    aab0:	bd80      	pop	{r7, pc}
    aab2:	46c0      	nop			; (mov r8, r8)
    aab4:	0000aa75 	.word	0x0000aa75

0000aab8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    aab8:	b580      	push	{r7, lr}
    aaba:	b086      	sub	sp, #24
    aabc:	af00      	add	r7, sp, #0
    aabe:	60f8      	str	r0, [r7, #12]
    aac0:	60b9      	str	r1, [r7, #8]
    aac2:	1dbb      	adds	r3, r7, #6
    aac4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    aac6:	68fb      	ldr	r3, [r7, #12]
    aac8:	681b      	ldr	r3, [r3, #0]
    aaca:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    aacc:	4b0f      	ldr	r3, [pc, #60]	; (ab0c <_usart_write_buffer+0x54>)
    aace:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    aad0:	68fb      	ldr	r3, [r7, #12]
    aad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    aad4:	b29b      	uxth	r3, r3
    aad6:	2b00      	cmp	r3, #0
    aad8:	d003      	beq.n	aae2 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    aada:	4b0d      	ldr	r3, [pc, #52]	; (ab10 <_usart_write_buffer+0x58>)
    aadc:	4798      	blx	r3
		return STATUS_BUSY;
    aade:	2305      	movs	r3, #5
    aae0:	e010      	b.n	ab04 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    aae2:	68fb      	ldr	r3, [r7, #12]
    aae4:	1dba      	adds	r2, r7, #6
    aae6:	8812      	ldrh	r2, [r2, #0]
    aae8:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    aaea:	4b09      	ldr	r3, [pc, #36]	; (ab10 <_usart_write_buffer+0x58>)
    aaec:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    aaee:	68fb      	ldr	r3, [r7, #12]
    aaf0:	68ba      	ldr	r2, [r7, #8]
    aaf2:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    aaf4:	68fb      	ldr	r3, [r7, #12]
    aaf6:	2233      	movs	r2, #51	; 0x33
    aaf8:	2105      	movs	r1, #5
    aafa:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    aafc:	697b      	ldr	r3, [r7, #20]
    aafe:	2201      	movs	r2, #1
    ab00:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    ab02:	2300      	movs	r3, #0
}
    ab04:	0018      	movs	r0, r3
    ab06:	46bd      	mov	sp, r7
    ab08:	b006      	add	sp, #24
    ab0a:	bd80      	pop	{r7, pc}
    ab0c:	0000aa4d 	.word	0x0000aa4d
    ab10:	0000aa61 	.word	0x0000aa61

0000ab14 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    ab14:	b580      	push	{r7, lr}
    ab16:	b086      	sub	sp, #24
    ab18:	af00      	add	r7, sp, #0
    ab1a:	60f8      	str	r0, [r7, #12]
    ab1c:	60b9      	str	r1, [r7, #8]
    ab1e:	1dbb      	adds	r3, r7, #6
    ab20:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ab22:	68fb      	ldr	r3, [r7, #12]
    ab24:	681b      	ldr	r3, [r3, #0]
    ab26:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    ab28:	4b16      	ldr	r3, [pc, #88]	; (ab84 <_usart_read_buffer+0x70>)
    ab2a:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    ab2c:	68fb      	ldr	r3, [r7, #12]
    ab2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    ab30:	b29b      	uxth	r3, r3
    ab32:	2b00      	cmp	r3, #0
    ab34:	d003      	beq.n	ab3e <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    ab36:	4b14      	ldr	r3, [pc, #80]	; (ab88 <_usart_read_buffer+0x74>)
    ab38:	4798      	blx	r3
		return STATUS_BUSY;
    ab3a:	2305      	movs	r3, #5
    ab3c:	e01e      	b.n	ab7c <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    ab3e:	68fb      	ldr	r3, [r7, #12]
    ab40:	1dba      	adds	r2, r7, #6
    ab42:	8812      	ldrh	r2, [r2, #0]
    ab44:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    ab46:	4b10      	ldr	r3, [pc, #64]	; (ab88 <_usart_read_buffer+0x74>)
    ab48:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    ab4a:	68fb      	ldr	r3, [r7, #12]
    ab4c:	68ba      	ldr	r2, [r7, #8]
    ab4e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    ab50:	68fb      	ldr	r3, [r7, #12]
    ab52:	2232      	movs	r2, #50	; 0x32
    ab54:	2105      	movs	r1, #5
    ab56:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    ab58:	697b      	ldr	r3, [r7, #20]
    ab5a:	2204      	movs	r2, #4
    ab5c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    ab5e:	68fb      	ldr	r3, [r7, #12]
    ab60:	7a1b      	ldrb	r3, [r3, #8]
    ab62:	2b00      	cmp	r3, #0
    ab64:	d002      	beq.n	ab6c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    ab66:	697b      	ldr	r3, [r7, #20]
    ab68:	2220      	movs	r2, #32
    ab6a:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    ab6c:	68fb      	ldr	r3, [r7, #12]
    ab6e:	7a5b      	ldrb	r3, [r3, #9]
    ab70:	2b00      	cmp	r3, #0
    ab72:	d002      	beq.n	ab7a <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    ab74:	697b      	ldr	r3, [r7, #20]
    ab76:	2208      	movs	r2, #8
    ab78:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    ab7a:	2300      	movs	r3, #0
}
    ab7c:	0018      	movs	r0, r3
    ab7e:	46bd      	mov	sp, r7
    ab80:	b006      	add	sp, #24
    ab82:	bd80      	pop	{r7, pc}
    ab84:	0000aa4d 	.word	0x0000aa4d
    ab88:	0000aa61 	.word	0x0000aa61

0000ab8c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    ab8c:	b580      	push	{r7, lr}
    ab8e:	b084      	sub	sp, #16
    ab90:	af00      	add	r7, sp, #0
    ab92:	60f8      	str	r0, [r7, #12]
    ab94:	60b9      	str	r1, [r7, #8]
    ab96:	1dfb      	adds	r3, r7, #7
    ab98:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    ab9a:	1dfb      	adds	r3, r7, #7
    ab9c:	781b      	ldrb	r3, [r3, #0]
    ab9e:	68fa      	ldr	r2, [r7, #12]
    aba0:	3302      	adds	r3, #2
    aba2:	009b      	lsls	r3, r3, #2
    aba4:	18d3      	adds	r3, r2, r3
    aba6:	3304      	adds	r3, #4
    aba8:	68ba      	ldr	r2, [r7, #8]
    abaa:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    abac:	68fb      	ldr	r3, [r7, #12]
    abae:	2230      	movs	r2, #48	; 0x30
    abb0:	5c9b      	ldrb	r3, [r3, r2]
    abb2:	b25a      	sxtb	r2, r3
    abb4:	1dfb      	adds	r3, r7, #7
    abb6:	781b      	ldrb	r3, [r3, #0]
    abb8:	2101      	movs	r1, #1
    abba:	4099      	lsls	r1, r3
    abbc:	000b      	movs	r3, r1
    abbe:	b25b      	sxtb	r3, r3
    abc0:	4313      	orrs	r3, r2
    abc2:	b25b      	sxtb	r3, r3
    abc4:	b2d9      	uxtb	r1, r3
    abc6:	68fb      	ldr	r3, [r7, #12]
    abc8:	2230      	movs	r2, #48	; 0x30
    abca:	5499      	strb	r1, [r3, r2]
}
    abcc:	46c0      	nop			; (mov r8, r8)
    abce:	46bd      	mov	sp, r7
    abd0:	b004      	add	sp, #16
    abd2:	bd80      	pop	{r7, pc}

0000abd4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    abd4:	b580      	push	{r7, lr}
    abd6:	b084      	sub	sp, #16
    abd8:	af00      	add	r7, sp, #0
    abda:	60f8      	str	r0, [r7, #12]
    abdc:	60b9      	str	r1, [r7, #8]
    abde:	1dbb      	adds	r3, r7, #6
    abe0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    abe2:	1dbb      	adds	r3, r7, #6
    abe4:	881b      	ldrh	r3, [r3, #0]
    abe6:	2b00      	cmp	r3, #0
    abe8:	d101      	bne.n	abee <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    abea:	2317      	movs	r3, #23
    abec:	e010      	b.n	ac10 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    abee:	68fb      	ldr	r3, [r7, #12]
    abf0:	79db      	ldrb	r3, [r3, #7]
    abf2:	2201      	movs	r2, #1
    abf4:	4053      	eors	r3, r2
    abf6:	b2db      	uxtb	r3, r3
    abf8:	2b00      	cmp	r3, #0
    abfa:	d001      	beq.n	ac00 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    abfc:	231c      	movs	r3, #28
    abfe:	e007      	b.n	ac10 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    ac00:	1dbb      	adds	r3, r7, #6
    ac02:	881a      	ldrh	r2, [r3, #0]
    ac04:	68b9      	ldr	r1, [r7, #8]
    ac06:	68fb      	ldr	r3, [r7, #12]
    ac08:	0018      	movs	r0, r3
    ac0a:	4b03      	ldr	r3, [pc, #12]	; (ac18 <usart_write_buffer_job+0x44>)
    ac0c:	4798      	blx	r3
    ac0e:	0003      	movs	r3, r0
}
    ac10:	0018      	movs	r0, r3
    ac12:	46bd      	mov	sp, r7
    ac14:	b004      	add	sp, #16
    ac16:	bd80      	pop	{r7, pc}
    ac18:	0000aab9 	.word	0x0000aab9

0000ac1c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    ac1c:	b580      	push	{r7, lr}
    ac1e:	b084      	sub	sp, #16
    ac20:	af00      	add	r7, sp, #0
    ac22:	60f8      	str	r0, [r7, #12]
    ac24:	60b9      	str	r1, [r7, #8]
    ac26:	1dbb      	adds	r3, r7, #6
    ac28:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    ac2a:	1dbb      	adds	r3, r7, #6
    ac2c:	881b      	ldrh	r3, [r3, #0]
    ac2e:	2b00      	cmp	r3, #0
    ac30:	d101      	bne.n	ac36 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    ac32:	2317      	movs	r3, #23
    ac34:	e010      	b.n	ac58 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    ac36:	68fb      	ldr	r3, [r7, #12]
    ac38:	799b      	ldrb	r3, [r3, #6]
    ac3a:	2201      	movs	r2, #1
    ac3c:	4053      	eors	r3, r2
    ac3e:	b2db      	uxtb	r3, r3
    ac40:	2b00      	cmp	r3, #0
    ac42:	d001      	beq.n	ac48 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    ac44:	231c      	movs	r3, #28
    ac46:	e007      	b.n	ac58 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    ac48:	1dbb      	adds	r3, r7, #6
    ac4a:	881a      	ldrh	r2, [r3, #0]
    ac4c:	68b9      	ldr	r1, [r7, #8]
    ac4e:	68fb      	ldr	r3, [r7, #12]
    ac50:	0018      	movs	r0, r3
    ac52:	4b03      	ldr	r3, [pc, #12]	; (ac60 <usart_read_buffer_job+0x44>)
    ac54:	4798      	blx	r3
    ac56:	0003      	movs	r3, r0
}
    ac58:	0018      	movs	r0, r3
    ac5a:	46bd      	mov	sp, r7
    ac5c:	b004      	add	sp, #16
    ac5e:	bd80      	pop	{r7, pc}
    ac60:	0000ab15 	.word	0x0000ab15

0000ac64 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    ac64:	b580      	push	{r7, lr}
    ac66:	b084      	sub	sp, #16
    ac68:	af00      	add	r7, sp, #0
    ac6a:	6078      	str	r0, [r7, #4]
    ac6c:	000a      	movs	r2, r1
    ac6e:	1cfb      	adds	r3, r7, #3
    ac70:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    ac72:	1cfb      	adds	r3, r7, #3
    ac74:	781b      	ldrb	r3, [r3, #0]
    ac76:	2b00      	cmp	r3, #0
    ac78:	d002      	beq.n	ac80 <usart_get_job_status+0x1c>
    ac7a:	2b01      	cmp	r3, #1
    ac7c:	d007      	beq.n	ac8e <usart_get_job_status+0x2a>
    ac7e:	e00d      	b.n	ac9c <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    ac80:	230f      	movs	r3, #15
    ac82:	18fb      	adds	r3, r7, r3
    ac84:	687a      	ldr	r2, [r7, #4]
    ac86:	2132      	movs	r1, #50	; 0x32
    ac88:	5c52      	ldrb	r2, [r2, r1]
    ac8a:	701a      	strb	r2, [r3, #0]
			break;
    ac8c:	e00b      	b.n	aca6 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    ac8e:	230f      	movs	r3, #15
    ac90:	18fb      	adds	r3, r7, r3
    ac92:	687a      	ldr	r2, [r7, #4]
    ac94:	2133      	movs	r1, #51	; 0x33
    ac96:	5c52      	ldrb	r2, [r2, r1]
    ac98:	701a      	strb	r2, [r3, #0]
			break;
    ac9a:	e004      	b.n	aca6 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    ac9c:	230f      	movs	r3, #15
    ac9e:	18fb      	adds	r3, r7, r3
    aca0:	2217      	movs	r2, #23
    aca2:	701a      	strb	r2, [r3, #0]
			break;
    aca4:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    aca6:	230f      	movs	r3, #15
    aca8:	18fb      	adds	r3, r7, r3
    acaa:	781b      	ldrb	r3, [r3, #0]
}
    acac:	0018      	movs	r0, r3
    acae:	46bd      	mov	sp, r7
    acb0:	b004      	add	sp, #16
    acb2:	bd80      	pop	{r7, pc}

0000acb4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    acb4:	b580      	push	{r7, lr}
    acb6:	b088      	sub	sp, #32
    acb8:	af00      	add	r7, sp, #0
    acba:	0002      	movs	r2, r0
    acbc:	1dfb      	adds	r3, r7, #7
    acbe:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    acc0:	1dfb      	adds	r3, r7, #7
    acc2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    acc4:	4ba3      	ldr	r3, [pc, #652]	; (af54 <_usart_interrupt_handler+0x2a0>)
    acc6:	0092      	lsls	r2, r2, #2
    acc8:	58d3      	ldr	r3, [r2, r3]
    acca:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    accc:	69bb      	ldr	r3, [r7, #24]
    acce:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    acd0:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    acd2:	69bb      	ldr	r3, [r7, #24]
    acd4:	0018      	movs	r0, r3
    acd6:	4ba0      	ldr	r3, [pc, #640]	; (af58 <_usart_interrupt_handler+0x2a4>)
    acd8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    acda:	697b      	ldr	r3, [r7, #20]
    acdc:	7e1b      	ldrb	r3, [r3, #24]
    acde:	b2da      	uxtb	r2, r3
    ace0:	2312      	movs	r3, #18
    ace2:	18fb      	adds	r3, r7, r3
    ace4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    ace6:	697b      	ldr	r3, [r7, #20]
    ace8:	7d9b      	ldrb	r3, [r3, #22]
    acea:	b2db      	uxtb	r3, r3
    acec:	b29a      	uxth	r2, r3
    acee:	2312      	movs	r3, #18
    acf0:	18fb      	adds	r3, r7, r3
    acf2:	2112      	movs	r1, #18
    acf4:	1879      	adds	r1, r7, r1
    acf6:	8809      	ldrh	r1, [r1, #0]
    acf8:	400a      	ands	r2, r1
    acfa:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    acfc:	69bb      	ldr	r3, [r7, #24]
    acfe:	2230      	movs	r2, #48	; 0x30
    ad00:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    ad02:	69ba      	ldr	r2, [r7, #24]
    ad04:	2131      	movs	r1, #49	; 0x31
    ad06:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    ad08:	4013      	ands	r3, r2
    ad0a:	b2da      	uxtb	r2, r3
    ad0c:	2310      	movs	r3, #16
    ad0e:	18fb      	adds	r3, r7, r3
    ad10:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    ad12:	2312      	movs	r3, #18
    ad14:	18fb      	adds	r3, r7, r3
    ad16:	881b      	ldrh	r3, [r3, #0]
    ad18:	2201      	movs	r2, #1
    ad1a:	4013      	ands	r3, r2
    ad1c:	d044      	beq.n	ada8 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    ad1e:	69bb      	ldr	r3, [r7, #24]
    ad20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    ad22:	b29b      	uxth	r3, r3
    ad24:	2b00      	cmp	r3, #0
    ad26:	d03c      	beq.n	ada2 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    ad28:	69bb      	ldr	r3, [r7, #24]
    ad2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ad2c:	781b      	ldrb	r3, [r3, #0]
    ad2e:	b2da      	uxtb	r2, r3
    ad30:	231c      	movs	r3, #28
    ad32:	18fb      	adds	r3, r7, r3
    ad34:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    ad36:	69bb      	ldr	r3, [r7, #24]
    ad38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ad3a:	1c5a      	adds	r2, r3, #1
    ad3c:	69bb      	ldr	r3, [r7, #24]
    ad3e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    ad40:	69bb      	ldr	r3, [r7, #24]
    ad42:	795b      	ldrb	r3, [r3, #5]
    ad44:	2b01      	cmp	r3, #1
    ad46:	d113      	bne.n	ad70 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    ad48:	69bb      	ldr	r3, [r7, #24]
    ad4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ad4c:	781b      	ldrb	r3, [r3, #0]
    ad4e:	b2db      	uxtb	r3, r3
    ad50:	021b      	lsls	r3, r3, #8
    ad52:	b21a      	sxth	r2, r3
    ad54:	231c      	movs	r3, #28
    ad56:	18fb      	adds	r3, r7, r3
    ad58:	2100      	movs	r1, #0
    ad5a:	5e5b      	ldrsh	r3, [r3, r1]
    ad5c:	4313      	orrs	r3, r2
    ad5e:	b21a      	sxth	r2, r3
    ad60:	231c      	movs	r3, #28
    ad62:	18fb      	adds	r3, r7, r3
    ad64:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    ad66:	69bb      	ldr	r3, [r7, #24]
    ad68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ad6a:	1c5a      	adds	r2, r3, #1
    ad6c:	69bb      	ldr	r3, [r7, #24]
    ad6e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    ad70:	231c      	movs	r3, #28
    ad72:	18fb      	adds	r3, r7, r3
    ad74:	881b      	ldrh	r3, [r3, #0]
    ad76:	05db      	lsls	r3, r3, #23
    ad78:	0ddb      	lsrs	r3, r3, #23
    ad7a:	b29a      	uxth	r2, r3
    ad7c:	697b      	ldr	r3, [r7, #20]
    ad7e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    ad80:	69bb      	ldr	r3, [r7, #24]
    ad82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    ad84:	b29b      	uxth	r3, r3
    ad86:	3b01      	subs	r3, #1
    ad88:	b29b      	uxth	r3, r3
    ad8a:	69ba      	ldr	r2, [r7, #24]
    ad8c:	1c19      	adds	r1, r3, #0
    ad8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
    ad90:	2b00      	cmp	r3, #0
    ad92:	d109      	bne.n	ada8 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    ad94:	697b      	ldr	r3, [r7, #20]
    ad96:	2201      	movs	r2, #1
    ad98:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    ad9a:	697b      	ldr	r3, [r7, #20]
    ad9c:	2202      	movs	r2, #2
    ad9e:	759a      	strb	r2, [r3, #22]
    ada0:	e002      	b.n	ada8 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    ada2:	697b      	ldr	r3, [r7, #20]
    ada4:	2201      	movs	r2, #1
    ada6:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    ada8:	2312      	movs	r3, #18
    adaa:	18fb      	adds	r3, r7, r3
    adac:	881b      	ldrh	r3, [r3, #0]
    adae:	2202      	movs	r2, #2
    adb0:	4013      	ands	r3, r2
    adb2:	d011      	beq.n	add8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    adb4:	697b      	ldr	r3, [r7, #20]
    adb6:	2202      	movs	r2, #2
    adb8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    adba:	69bb      	ldr	r3, [r7, #24]
    adbc:	2233      	movs	r2, #51	; 0x33
    adbe:	2100      	movs	r1, #0
    adc0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    adc2:	2310      	movs	r3, #16
    adc4:	18fb      	adds	r3, r7, r3
    adc6:	881b      	ldrh	r3, [r3, #0]
    adc8:	2201      	movs	r2, #1
    adca:	4013      	ands	r3, r2
    adcc:	d004      	beq.n	add8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    adce:	69bb      	ldr	r3, [r7, #24]
    add0:	68db      	ldr	r3, [r3, #12]
    add2:	69ba      	ldr	r2, [r7, #24]
    add4:	0010      	movs	r0, r2
    add6:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    add8:	2312      	movs	r3, #18
    adda:	18fb      	adds	r3, r7, r3
    addc:	881b      	ldrh	r3, [r3, #0]
    adde:	2204      	movs	r2, #4
    ade0:	4013      	ands	r3, r2
    ade2:	d100      	bne.n	ade6 <_usart_interrupt_handler+0x132>
    ade4:	e0bd      	b.n	af62 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    ade6:	69bb      	ldr	r3, [r7, #24]
    ade8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    adea:	b29b      	uxth	r3, r3
    adec:	2b00      	cmp	r3, #0
    adee:	d100      	bne.n	adf2 <_usart_interrupt_handler+0x13e>
    adf0:	e0b4      	b.n	af5c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    adf2:	697b      	ldr	r3, [r7, #20]
    adf4:	8b5b      	ldrh	r3, [r3, #26]
    adf6:	b29b      	uxth	r3, r3
    adf8:	b2da      	uxtb	r2, r3
    adfa:	231f      	movs	r3, #31
    adfc:	18fb      	adds	r3, r7, r3
    adfe:	213f      	movs	r1, #63	; 0x3f
    ae00:	400a      	ands	r2, r1
    ae02:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    ae04:	231f      	movs	r3, #31
    ae06:	18fb      	adds	r3, r7, r3
    ae08:	781b      	ldrb	r3, [r3, #0]
    ae0a:	2208      	movs	r2, #8
    ae0c:	4013      	ands	r3, r2
    ae0e:	d007      	beq.n	ae20 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    ae10:	231f      	movs	r3, #31
    ae12:	18fb      	adds	r3, r7, r3
    ae14:	221f      	movs	r2, #31
    ae16:	18ba      	adds	r2, r7, r2
    ae18:	7812      	ldrb	r2, [r2, #0]
    ae1a:	2108      	movs	r1, #8
    ae1c:	438a      	bics	r2, r1
    ae1e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    ae20:	231f      	movs	r3, #31
    ae22:	18fb      	adds	r3, r7, r3
    ae24:	781b      	ldrb	r3, [r3, #0]
    ae26:	2b00      	cmp	r3, #0
    ae28:	d050      	beq.n	aecc <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    ae2a:	231f      	movs	r3, #31
    ae2c:	18fb      	adds	r3, r7, r3
    ae2e:	781b      	ldrb	r3, [r3, #0]
    ae30:	2202      	movs	r2, #2
    ae32:	4013      	ands	r3, r2
    ae34:	d007      	beq.n	ae46 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    ae36:	69bb      	ldr	r3, [r7, #24]
    ae38:	2232      	movs	r2, #50	; 0x32
    ae3a:	211a      	movs	r1, #26
    ae3c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    ae3e:	697b      	ldr	r3, [r7, #20]
    ae40:	2202      	movs	r2, #2
    ae42:	835a      	strh	r2, [r3, #26]
    ae44:	e036      	b.n	aeb4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    ae46:	231f      	movs	r3, #31
    ae48:	18fb      	adds	r3, r7, r3
    ae4a:	781b      	ldrb	r3, [r3, #0]
    ae4c:	2204      	movs	r2, #4
    ae4e:	4013      	ands	r3, r2
    ae50:	d007      	beq.n	ae62 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    ae52:	69bb      	ldr	r3, [r7, #24]
    ae54:	2232      	movs	r2, #50	; 0x32
    ae56:	211e      	movs	r1, #30
    ae58:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    ae5a:	697b      	ldr	r3, [r7, #20]
    ae5c:	2204      	movs	r2, #4
    ae5e:	835a      	strh	r2, [r3, #26]
    ae60:	e028      	b.n	aeb4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    ae62:	231f      	movs	r3, #31
    ae64:	18fb      	adds	r3, r7, r3
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	2201      	movs	r2, #1
    ae6a:	4013      	ands	r3, r2
    ae6c:	d007      	beq.n	ae7e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    ae6e:	69bb      	ldr	r3, [r7, #24]
    ae70:	2232      	movs	r2, #50	; 0x32
    ae72:	2113      	movs	r1, #19
    ae74:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    ae76:	697b      	ldr	r3, [r7, #20]
    ae78:	2201      	movs	r2, #1
    ae7a:	835a      	strh	r2, [r3, #26]
    ae7c:	e01a      	b.n	aeb4 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    ae7e:	231f      	movs	r3, #31
    ae80:	18fb      	adds	r3, r7, r3
    ae82:	781b      	ldrb	r3, [r3, #0]
    ae84:	2210      	movs	r2, #16
    ae86:	4013      	ands	r3, r2
    ae88:	d007      	beq.n	ae9a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    ae8a:	69bb      	ldr	r3, [r7, #24]
    ae8c:	2232      	movs	r2, #50	; 0x32
    ae8e:	2142      	movs	r1, #66	; 0x42
    ae90:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    ae92:	697b      	ldr	r3, [r7, #20]
    ae94:	2210      	movs	r2, #16
    ae96:	835a      	strh	r2, [r3, #26]
    ae98:	e00c      	b.n	aeb4 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    ae9a:	231f      	movs	r3, #31
    ae9c:	18fb      	adds	r3, r7, r3
    ae9e:	781b      	ldrb	r3, [r3, #0]
    aea0:	2220      	movs	r2, #32
    aea2:	4013      	ands	r3, r2
    aea4:	d006      	beq.n	aeb4 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    aea6:	69bb      	ldr	r3, [r7, #24]
    aea8:	2232      	movs	r2, #50	; 0x32
    aeaa:	2141      	movs	r1, #65	; 0x41
    aeac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    aeae:	697b      	ldr	r3, [r7, #20]
    aeb0:	2220      	movs	r2, #32
    aeb2:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    aeb4:	2310      	movs	r3, #16
    aeb6:	18fb      	adds	r3, r7, r3
    aeb8:	881b      	ldrh	r3, [r3, #0]
    aeba:	2204      	movs	r2, #4
    aebc:	4013      	ands	r3, r2
				if (callback_status
    aebe:	d050      	beq.n	af62 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    aec0:	69bb      	ldr	r3, [r7, #24]
    aec2:	695b      	ldr	r3, [r3, #20]
    aec4:	69ba      	ldr	r2, [r7, #24]
    aec6:	0010      	movs	r0, r2
    aec8:	4798      	blx	r3
    aeca:	e04a      	b.n	af62 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    aecc:	697b      	ldr	r3, [r7, #20]
    aece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    aed0:	b29a      	uxth	r2, r3
    aed2:	230e      	movs	r3, #14
    aed4:	18fb      	adds	r3, r7, r3
    aed6:	05d2      	lsls	r2, r2, #23
    aed8:	0dd2      	lsrs	r2, r2, #23
    aeda:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    aedc:	69bb      	ldr	r3, [r7, #24]
    aede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aee0:	220e      	movs	r2, #14
    aee2:	18ba      	adds	r2, r7, r2
    aee4:	8812      	ldrh	r2, [r2, #0]
    aee6:	b2d2      	uxtb	r2, r2
    aee8:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    aeea:	69bb      	ldr	r3, [r7, #24]
    aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aeee:	1c5a      	adds	r2, r3, #1
    aef0:	69bb      	ldr	r3, [r7, #24]
    aef2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    aef4:	69bb      	ldr	r3, [r7, #24]
    aef6:	795b      	ldrb	r3, [r3, #5]
    aef8:	2b01      	cmp	r3, #1
    aefa:	d10d      	bne.n	af18 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    aefc:	69bb      	ldr	r3, [r7, #24]
    aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af00:	220e      	movs	r2, #14
    af02:	18ba      	adds	r2, r7, r2
    af04:	8812      	ldrh	r2, [r2, #0]
    af06:	0a12      	lsrs	r2, r2, #8
    af08:	b292      	uxth	r2, r2
    af0a:	b2d2      	uxtb	r2, r2
    af0c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    af0e:	69bb      	ldr	r3, [r7, #24]
    af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af12:	1c5a      	adds	r2, r3, #1
    af14:	69bb      	ldr	r3, [r7, #24]
    af16:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    af18:	69bb      	ldr	r3, [r7, #24]
    af1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    af1c:	b29b      	uxth	r3, r3
    af1e:	3b01      	subs	r3, #1
    af20:	b29b      	uxth	r3, r3
    af22:	69ba      	ldr	r2, [r7, #24]
    af24:	1c19      	adds	r1, r3, #0
    af26:	8591      	strh	r1, [r2, #44]	; 0x2c
    af28:	2b00      	cmp	r3, #0
    af2a:	d11a      	bne.n	af62 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    af2c:	697b      	ldr	r3, [r7, #20]
    af2e:	2204      	movs	r2, #4
    af30:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    af32:	69bb      	ldr	r3, [r7, #24]
    af34:	2232      	movs	r2, #50	; 0x32
    af36:	2100      	movs	r1, #0
    af38:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    af3a:	2310      	movs	r3, #16
    af3c:	18fb      	adds	r3, r7, r3
    af3e:	881b      	ldrh	r3, [r3, #0]
    af40:	2202      	movs	r2, #2
    af42:	4013      	ands	r3, r2
					if (callback_status
    af44:	d00d      	beq.n	af62 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    af46:	69bb      	ldr	r3, [r7, #24]
    af48:	691b      	ldr	r3, [r3, #16]
    af4a:	69ba      	ldr	r2, [r7, #24]
    af4c:	0010      	movs	r0, r2
    af4e:	4798      	blx	r3
    af50:	e007      	b.n	af62 <_usart_interrupt_handler+0x2ae>
    af52:	46c0      	nop			; (mov r8, r8)
    af54:	20004fa8 	.word	0x20004fa8
    af58:	0000aa95 	.word	0x0000aa95
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    af5c:	697b      	ldr	r3, [r7, #20]
    af5e:	2204      	movs	r2, #4
    af60:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    af62:	2312      	movs	r3, #18
    af64:	18fb      	adds	r3, r7, r3
    af66:	881b      	ldrh	r3, [r3, #0]
    af68:	2210      	movs	r2, #16
    af6a:	4013      	ands	r3, r2
    af6c:	d010      	beq.n	af90 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    af6e:	697b      	ldr	r3, [r7, #20]
    af70:	2210      	movs	r2, #16
    af72:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    af74:	697b      	ldr	r3, [r7, #20]
    af76:	2210      	movs	r2, #16
    af78:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    af7a:	2310      	movs	r3, #16
    af7c:	18fb      	adds	r3, r7, r3
    af7e:	881b      	ldrh	r3, [r3, #0]
    af80:	2210      	movs	r2, #16
    af82:	4013      	ands	r3, r2
    af84:	d004      	beq.n	af90 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    af86:	69bb      	ldr	r3, [r7, #24]
    af88:	69db      	ldr	r3, [r3, #28]
    af8a:	69ba      	ldr	r2, [r7, #24]
    af8c:	0010      	movs	r0, r2
    af8e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    af90:	2312      	movs	r3, #18
    af92:	18fb      	adds	r3, r7, r3
    af94:	881b      	ldrh	r3, [r3, #0]
    af96:	2220      	movs	r2, #32
    af98:	4013      	ands	r3, r2
    af9a:	d010      	beq.n	afbe <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    af9c:	697b      	ldr	r3, [r7, #20]
    af9e:	2220      	movs	r2, #32
    afa0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    afa2:	697b      	ldr	r3, [r7, #20]
    afa4:	2220      	movs	r2, #32
    afa6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    afa8:	2310      	movs	r3, #16
    afaa:	18fb      	adds	r3, r7, r3
    afac:	881b      	ldrh	r3, [r3, #0]
    afae:	2208      	movs	r2, #8
    afb0:	4013      	ands	r3, r2
    afb2:	d004      	beq.n	afbe <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    afb4:	69bb      	ldr	r3, [r7, #24]
    afb6:	699b      	ldr	r3, [r3, #24]
    afb8:	69ba      	ldr	r2, [r7, #24]
    afba:	0010      	movs	r0, r2
    afbc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    afbe:	2312      	movs	r3, #18
    afc0:	18fb      	adds	r3, r7, r3
    afc2:	881b      	ldrh	r3, [r3, #0]
    afc4:	2208      	movs	r2, #8
    afc6:	4013      	ands	r3, r2
    afc8:	d010      	beq.n	afec <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    afca:	697b      	ldr	r3, [r7, #20]
    afcc:	2208      	movs	r2, #8
    afce:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    afd0:	697b      	ldr	r3, [r7, #20]
    afd2:	2208      	movs	r2, #8
    afd4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    afd6:	2310      	movs	r3, #16
    afd8:	18fb      	adds	r3, r7, r3
    afda:	881b      	ldrh	r3, [r3, #0]
    afdc:	2220      	movs	r2, #32
    afde:	4013      	ands	r3, r2
    afe0:	d004      	beq.n	afec <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    afe2:	69bb      	ldr	r3, [r7, #24]
    afe4:	6a1b      	ldr	r3, [r3, #32]
    afe6:	69ba      	ldr	r2, [r7, #24]
    afe8:	0010      	movs	r0, r2
    afea:	4798      	blx	r3
		}
	}
#endif
}
    afec:	46c0      	nop			; (mov r8, r8)
    afee:	46bd      	mov	sp, r7
    aff0:	b008      	add	sp, #32
    aff2:	bd80      	pop	{r7, pc}

0000aff4 <system_gclk_gen_get_config_defaults>:
{
    aff4:	b580      	push	{r7, lr}
    aff6:	b082      	sub	sp, #8
    aff8:	af00      	add	r7, sp, #0
    affa:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    affc:	687b      	ldr	r3, [r7, #4]
    affe:	2201      	movs	r2, #1
    b000:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    b002:	687b      	ldr	r3, [r7, #4]
    b004:	2200      	movs	r2, #0
    b006:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    b008:	687b      	ldr	r3, [r7, #4]
    b00a:	2206      	movs	r2, #6
    b00c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    b00e:	687b      	ldr	r3, [r7, #4]
    b010:	2200      	movs	r2, #0
    b012:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    b014:	687b      	ldr	r3, [r7, #4]
    b016:	2200      	movs	r2, #0
    b018:	725a      	strb	r2, [r3, #9]
}
    b01a:	46c0      	nop			; (mov r8, r8)
    b01c:	46bd      	mov	sp, r7
    b01e:	b002      	add	sp, #8
    b020:	bd80      	pop	{r7, pc}

0000b022 <system_gclk_chan_get_config_defaults>:
{
    b022:	b580      	push	{r7, lr}
    b024:	b082      	sub	sp, #8
    b026:	af00      	add	r7, sp, #0
    b028:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    b02a:	687b      	ldr	r3, [r7, #4]
    b02c:	2200      	movs	r2, #0
    b02e:	701a      	strb	r2, [r3, #0]
}
    b030:	46c0      	nop			; (mov r8, r8)
    b032:	46bd      	mov	sp, r7
    b034:	b002      	add	sp, #8
    b036:	bd80      	pop	{r7, pc}

0000b038 <system_clock_source_osc8m_get_config_defaults>:
{
    b038:	b580      	push	{r7, lr}
    b03a:	b082      	sub	sp, #8
    b03c:	af00      	add	r7, sp, #0
    b03e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    b040:	687b      	ldr	r3, [r7, #4]
    b042:	2203      	movs	r2, #3
    b044:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    b046:	687b      	ldr	r3, [r7, #4]
    b048:	2200      	movs	r2, #0
    b04a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    b04c:	687b      	ldr	r3, [r7, #4]
    b04e:	2201      	movs	r2, #1
    b050:	709a      	strb	r2, [r3, #2]
}
    b052:	46c0      	nop			; (mov r8, r8)
    b054:	46bd      	mov	sp, r7
    b056:	b002      	add	sp, #8
    b058:	bd80      	pop	{r7, pc}
	...

0000b05c <system_cpu_clock_set_divider>:
{
    b05c:	b580      	push	{r7, lr}
    b05e:	b082      	sub	sp, #8
    b060:	af00      	add	r7, sp, #0
    b062:	0002      	movs	r2, r0
    b064:	1dfb      	adds	r3, r7, #7
    b066:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    b068:	4a03      	ldr	r2, [pc, #12]	; (b078 <system_cpu_clock_set_divider+0x1c>)
    b06a:	1dfb      	adds	r3, r7, #7
    b06c:	781b      	ldrb	r3, [r3, #0]
    b06e:	7213      	strb	r3, [r2, #8]
}
    b070:	46c0      	nop			; (mov r8, r8)
    b072:	46bd      	mov	sp, r7
    b074:	b002      	add	sp, #8
    b076:	bd80      	pop	{r7, pc}
    b078:	40000400 	.word	0x40000400

0000b07c <system_apb_clock_set_divider>:
{
    b07c:	b580      	push	{r7, lr}
    b07e:	b082      	sub	sp, #8
    b080:	af00      	add	r7, sp, #0
    b082:	0002      	movs	r2, r0
    b084:	1dfb      	adds	r3, r7, #7
    b086:	701a      	strb	r2, [r3, #0]
    b088:	1dbb      	adds	r3, r7, #6
    b08a:	1c0a      	adds	r2, r1, #0
    b08c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b08e:	1dfb      	adds	r3, r7, #7
    b090:	781b      	ldrb	r3, [r3, #0]
    b092:	2b01      	cmp	r3, #1
    b094:	d008      	beq.n	b0a8 <system_apb_clock_set_divider+0x2c>
    b096:	2b02      	cmp	r3, #2
    b098:	d00b      	beq.n	b0b2 <system_apb_clock_set_divider+0x36>
    b09a:	2b00      	cmp	r3, #0
    b09c:	d10e      	bne.n	b0bc <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    b09e:	4a0b      	ldr	r2, [pc, #44]	; (b0cc <system_apb_clock_set_divider+0x50>)
    b0a0:	1dbb      	adds	r3, r7, #6
    b0a2:	781b      	ldrb	r3, [r3, #0]
    b0a4:	7253      	strb	r3, [r2, #9]
			break;
    b0a6:	e00b      	b.n	b0c0 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    b0a8:	4a08      	ldr	r2, [pc, #32]	; (b0cc <system_apb_clock_set_divider+0x50>)
    b0aa:	1dbb      	adds	r3, r7, #6
    b0ac:	781b      	ldrb	r3, [r3, #0]
    b0ae:	7293      	strb	r3, [r2, #10]
			break;
    b0b0:	e006      	b.n	b0c0 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    b0b2:	4a06      	ldr	r2, [pc, #24]	; (b0cc <system_apb_clock_set_divider+0x50>)
    b0b4:	1dbb      	adds	r3, r7, #6
    b0b6:	781b      	ldrb	r3, [r3, #0]
    b0b8:	72d3      	strb	r3, [r2, #11]
			break;
    b0ba:	e001      	b.n	b0c0 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    b0bc:	2317      	movs	r3, #23
    b0be:	e000      	b.n	b0c2 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    b0c0:	2300      	movs	r3, #0
}
    b0c2:	0018      	movs	r0, r3
    b0c4:	46bd      	mov	sp, r7
    b0c6:	b002      	add	sp, #8
    b0c8:	bd80      	pop	{r7, pc}
    b0ca:	46c0      	nop			; (mov r8, r8)
    b0cc:	40000400 	.word	0x40000400

0000b0d0 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
    b0d0:	b580      	push	{r7, lr}
    b0d2:	b082      	sub	sp, #8
    b0d4:	af00      	add	r7, sp, #0
    b0d6:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	2201      	movs	r2, #1
    b0dc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
    b0de:	687b      	ldr	r3, [r7, #4]
    b0e0:	2200      	movs	r2, #0
    b0e2:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
    b0e4:	687b      	ldr	r3, [r7, #4]
    b0e6:	2200      	movs	r2, #0
    b0e8:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
    b0ea:	687b      	ldr	r3, [r7, #4]
    b0ec:	2200      	movs	r2, #0
    b0ee:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
    b0f0:	687b      	ldr	r3, [r7, #4]
    b0f2:	2200      	movs	r2, #0
    b0f4:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
    b0f6:	687b      	ldr	r3, [r7, #4]
    b0f8:	4a0a      	ldr	r2, [pc, #40]	; (b124 <system_clock_source_dpll_get_config_defaults+0x54>)
    b0fa:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
    b0fc:	687b      	ldr	r3, [r7, #4]
    b0fe:	2280      	movs	r2, #128	; 0x80
    b100:	0212      	lsls	r2, r2, #8
    b102:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
    b104:	687b      	ldr	r3, [r7, #4]
    b106:	2201      	movs	r2, #1
    b108:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    b10a:	687b      	ldr	r3, [r7, #4]
    b10c:	2200      	movs	r2, #0
    b10e:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    b110:	687b      	ldr	r3, [r7, #4]
    b112:	2200      	movs	r2, #0
    b114:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    b116:	687b      	ldr	r3, [r7, #4]
    b118:	2200      	movs	r2, #0
    b11a:	749a      	strb	r2, [r3, #18]
};
    b11c:	46c0      	nop			; (mov r8, r8)
    b11e:	46bd      	mov	sp, r7
    b120:	b002      	add	sp, #8
    b122:	bd80      	pop	{r7, pc}
    b124:	02dc6c00 	.word	0x02dc6c00

0000b128 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    b128:	b580      	push	{r7, lr}
    b12a:	b082      	sub	sp, #8
    b12c:	af00      	add	r7, sp, #0
    b12e:	0002      	movs	r2, r0
    b130:	1dfb      	adds	r3, r7, #7
    b132:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    b134:	4a08      	ldr	r2, [pc, #32]	; (b158 <system_flash_set_waitstates+0x30>)
    b136:	1dfb      	adds	r3, r7, #7
    b138:	781b      	ldrb	r3, [r3, #0]
    b13a:	210f      	movs	r1, #15
    b13c:	400b      	ands	r3, r1
    b13e:	b2d9      	uxtb	r1, r3
    b140:	6853      	ldr	r3, [r2, #4]
    b142:	200f      	movs	r0, #15
    b144:	4001      	ands	r1, r0
    b146:	0049      	lsls	r1, r1, #1
    b148:	201e      	movs	r0, #30
    b14a:	4383      	bics	r3, r0
    b14c:	430b      	orrs	r3, r1
    b14e:	6053      	str	r3, [r2, #4]
}
    b150:	46c0      	nop			; (mov r8, r8)
    b152:	46bd      	mov	sp, r7
    b154:	b002      	add	sp, #8
    b156:	bd80      	pop	{r7, pc}
    b158:	41004000 	.word	0x41004000

0000b15c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    b15c:	b580      	push	{r7, lr}
    b15e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    b160:	46c0      	nop			; (mov r8, r8)
    b162:	4b04      	ldr	r3, [pc, #16]	; (b174 <_system_dfll_wait_for_sync+0x18>)
    b164:	68db      	ldr	r3, [r3, #12]
    b166:	2210      	movs	r2, #16
    b168:	4013      	ands	r3, r2
    b16a:	d0fa      	beq.n	b162 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    b16c:	46c0      	nop			; (mov r8, r8)
    b16e:	46bd      	mov	sp, r7
    b170:	bd80      	pop	{r7, pc}
    b172:	46c0      	nop			; (mov r8, r8)
    b174:	40000800 	.word	0x40000800

0000b178 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    b178:	b580      	push	{r7, lr}
    b17a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    b17c:	4b0c      	ldr	r3, [pc, #48]	; (b1b0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b17e:	2202      	movs	r2, #2
    b180:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    b182:	4b0c      	ldr	r3, [pc, #48]	; (b1b4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    b184:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    b186:	4a0a      	ldr	r2, [pc, #40]	; (b1b0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b188:	4b0b      	ldr	r3, [pc, #44]	; (b1b8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b18a:	689b      	ldr	r3, [r3, #8]
    b18c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    b18e:	4a08      	ldr	r2, [pc, #32]	; (b1b0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b190:	4b09      	ldr	r3, [pc, #36]	; (b1b8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b192:	685b      	ldr	r3, [r3, #4]
    b194:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    b196:	4b06      	ldr	r3, [pc, #24]	; (b1b0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b198:	2200      	movs	r2, #0
    b19a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    b19c:	4b05      	ldr	r3, [pc, #20]	; (b1b4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    b19e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    b1a0:	4a03      	ldr	r2, [pc, #12]	; (b1b0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    b1a2:	4b05      	ldr	r3, [pc, #20]	; (b1b8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    b1a4:	681b      	ldr	r3, [r3, #0]
    b1a6:	b29b      	uxth	r3, r3
    b1a8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    b1aa:	46c0      	nop			; (mov r8, r8)
    b1ac:	46bd      	mov	sp, r7
    b1ae:	bd80      	pop	{r7, pc}
    b1b0:	40000800 	.word	0x40000800
    b1b4:	0000b15d 	.word	0x0000b15d
    b1b8:	20003848 	.word	0x20003848

0000b1bc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    b1bc:	b580      	push	{r7, lr}
    b1be:	b082      	sub	sp, #8
    b1c0:	af00      	add	r7, sp, #0
    b1c2:	0002      	movs	r2, r0
    b1c4:	1dfb      	adds	r3, r7, #7
    b1c6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    b1c8:	1dfb      	adds	r3, r7, #7
    b1ca:	781b      	ldrb	r3, [r3, #0]
    b1cc:	2b08      	cmp	r3, #8
    b1ce:	d841      	bhi.n	b254 <system_clock_source_get_hz+0x98>
    b1d0:	009a      	lsls	r2, r3, #2
    b1d2:	4b23      	ldr	r3, [pc, #140]	; (b260 <system_clock_source_get_hz+0xa4>)
    b1d4:	18d3      	adds	r3, r2, r3
    b1d6:	681b      	ldr	r3, [r3, #0]
    b1d8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    b1da:	4b22      	ldr	r3, [pc, #136]	; (b264 <system_clock_source_get_hz+0xa8>)
    b1dc:	691b      	ldr	r3, [r3, #16]
    b1de:	e03a      	b.n	b256 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    b1e0:	4b21      	ldr	r3, [pc, #132]	; (b268 <system_clock_source_get_hz+0xac>)
    b1e2:	6a1b      	ldr	r3, [r3, #32]
    b1e4:	059b      	lsls	r3, r3, #22
    b1e6:	0f9b      	lsrs	r3, r3, #30
    b1e8:	b2db      	uxtb	r3, r3
    b1ea:	001a      	movs	r2, r3
    b1ec:	4b1f      	ldr	r3, [pc, #124]	; (b26c <system_clock_source_get_hz+0xb0>)
    b1ee:	40d3      	lsrs	r3, r2
    b1f0:	e031      	b.n	b256 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    b1f2:	2380      	movs	r3, #128	; 0x80
    b1f4:	021b      	lsls	r3, r3, #8
    b1f6:	e02e      	b.n	b256 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    b1f8:	2380      	movs	r3, #128	; 0x80
    b1fa:	021b      	lsls	r3, r3, #8
    b1fc:	e02b      	b.n	b256 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    b1fe:	4b19      	ldr	r3, [pc, #100]	; (b264 <system_clock_source_get_hz+0xa8>)
    b200:	695b      	ldr	r3, [r3, #20]
    b202:	e028      	b.n	b256 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    b204:	4b17      	ldr	r3, [pc, #92]	; (b264 <system_clock_source_get_hz+0xa8>)
    b206:	681b      	ldr	r3, [r3, #0]
    b208:	2202      	movs	r2, #2
    b20a:	4013      	ands	r3, r2
    b20c:	d101      	bne.n	b212 <system_clock_source_get_hz+0x56>
			return 0;
    b20e:	2300      	movs	r3, #0
    b210:	e021      	b.n	b256 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    b212:	4b17      	ldr	r3, [pc, #92]	; (b270 <system_clock_source_get_hz+0xb4>)
    b214:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    b216:	4b13      	ldr	r3, [pc, #76]	; (b264 <system_clock_source_get_hz+0xa8>)
    b218:	681b      	ldr	r3, [r3, #0]
    b21a:	2224      	movs	r2, #36	; 0x24
    b21c:	4013      	ands	r3, r2
    b21e:	2b04      	cmp	r3, #4
    b220:	d109      	bne.n	b236 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    b222:	2000      	movs	r0, #0
    b224:	4b13      	ldr	r3, [pc, #76]	; (b274 <system_clock_source_get_hz+0xb8>)
    b226:	4798      	blx	r3
    b228:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    b22a:	4b0e      	ldr	r3, [pc, #56]	; (b264 <system_clock_source_get_hz+0xa8>)
    b22c:	689b      	ldr	r3, [r3, #8]
    b22e:	041b      	lsls	r3, r3, #16
    b230:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    b232:	4353      	muls	r3, r2
    b234:	e00f      	b.n	b256 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    b236:	4b10      	ldr	r3, [pc, #64]	; (b278 <system_clock_source_get_hz+0xbc>)
    b238:	e00d      	b.n	b256 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    b23a:	4a0b      	ldr	r2, [pc, #44]	; (b268 <system_clock_source_get_hz+0xac>)
    b23c:	2350      	movs	r3, #80	; 0x50
    b23e:	5cd3      	ldrb	r3, [r2, r3]
    b240:	b2db      	uxtb	r3, r3
    b242:	001a      	movs	r2, r3
    b244:	2304      	movs	r3, #4
    b246:	4013      	ands	r3, r2
    b248:	d101      	bne.n	b24e <system_clock_source_get_hz+0x92>
			return 0;
    b24a:	2300      	movs	r3, #0
    b24c:	e003      	b.n	b256 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    b24e:	4b05      	ldr	r3, [pc, #20]	; (b264 <system_clock_source_get_hz+0xa8>)
    b250:	68db      	ldr	r3, [r3, #12]
    b252:	e000      	b.n	b256 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    b254:	2300      	movs	r3, #0
	}
}
    b256:	0018      	movs	r0, r3
    b258:	46bd      	mov	sp, r7
    b25a:	b002      	add	sp, #8
    b25c:	bd80      	pop	{r7, pc}
    b25e:	46c0      	nop			; (mov r8, r8)
    b260:	000106ec 	.word	0x000106ec
    b264:	20003848 	.word	0x20003848
    b268:	40000800 	.word	0x40000800
    b26c:	007a1200 	.word	0x007a1200
    b270:	0000b15d 	.word	0x0000b15d
    b274:	0000bc59 	.word	0x0000bc59
    b278:	02dc6c00 	.word	0x02dc6c00

0000b27c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    b27c:	b580      	push	{r7, lr}
    b27e:	b084      	sub	sp, #16
    b280:	af00      	add	r7, sp, #0
    b282:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    b284:	4b1a      	ldr	r3, [pc, #104]	; (b2f0 <system_clock_source_osc8m_set_config+0x74>)
    b286:	6a1b      	ldr	r3, [r3, #32]
    b288:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    b28a:	687b      	ldr	r3, [r7, #4]
    b28c:	781b      	ldrb	r3, [r3, #0]
    b28e:	1c1a      	adds	r2, r3, #0
    b290:	2303      	movs	r3, #3
    b292:	4013      	ands	r3, r2
    b294:	b2da      	uxtb	r2, r3
    b296:	230d      	movs	r3, #13
    b298:	18fb      	adds	r3, r7, r3
    b29a:	2103      	movs	r1, #3
    b29c:	400a      	ands	r2, r1
    b29e:	0010      	movs	r0, r2
    b2a0:	781a      	ldrb	r2, [r3, #0]
    b2a2:	2103      	movs	r1, #3
    b2a4:	438a      	bics	r2, r1
    b2a6:	1c11      	adds	r1, r2, #0
    b2a8:	1c02      	adds	r2, r0, #0
    b2aa:	430a      	orrs	r2, r1
    b2ac:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    b2ae:	687b      	ldr	r3, [r7, #4]
    b2b0:	789a      	ldrb	r2, [r3, #2]
    b2b2:	230c      	movs	r3, #12
    b2b4:	18fb      	adds	r3, r7, r3
    b2b6:	01d0      	lsls	r0, r2, #7
    b2b8:	781a      	ldrb	r2, [r3, #0]
    b2ba:	217f      	movs	r1, #127	; 0x7f
    b2bc:	400a      	ands	r2, r1
    b2be:	1c11      	adds	r1, r2, #0
    b2c0:	1c02      	adds	r2, r0, #0
    b2c2:	430a      	orrs	r2, r1
    b2c4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    b2c6:	687b      	ldr	r3, [r7, #4]
    b2c8:	785a      	ldrb	r2, [r3, #1]
    b2ca:	230c      	movs	r3, #12
    b2cc:	18fb      	adds	r3, r7, r3
    b2ce:	2101      	movs	r1, #1
    b2d0:	400a      	ands	r2, r1
    b2d2:	0190      	lsls	r0, r2, #6
    b2d4:	781a      	ldrb	r2, [r3, #0]
    b2d6:	2140      	movs	r1, #64	; 0x40
    b2d8:	438a      	bics	r2, r1
    b2da:	1c11      	adds	r1, r2, #0
    b2dc:	1c02      	adds	r2, r0, #0
    b2de:	430a      	orrs	r2, r1
    b2e0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    b2e2:	4b03      	ldr	r3, [pc, #12]	; (b2f0 <system_clock_source_osc8m_set_config+0x74>)
    b2e4:	68fa      	ldr	r2, [r7, #12]
    b2e6:	621a      	str	r2, [r3, #32]
}
    b2e8:	46c0      	nop			; (mov r8, r8)
    b2ea:	46bd      	mov	sp, r7
    b2ec:	b004      	add	sp, #16
    b2ee:	bd80      	pop	{r7, pc}
    b2f0:	40000800 	.word	0x40000800

0000b2f4 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    b2f4:	b580      	push	{r7, lr}
    b2f6:	b086      	sub	sp, #24
    b2f8:	af00      	add	r7, sp, #0
    b2fa:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    b2fc:	687b      	ldr	r3, [r7, #4]
    b2fe:	68db      	ldr	r3, [r3, #12]
    b300:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    b302:	687b      	ldr	r3, [r7, #4]
    b304:	7d1b      	ldrb	r3, [r3, #20]
    b306:	2b01      	cmp	r3, #1
    b308:	d10a      	bne.n	b320 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
    b30a:	687b      	ldr	r3, [r7, #4]
    b30c:	8a1b      	ldrh	r3, [r3, #16]
    b30e:	3301      	adds	r3, #1
    b310:	005b      	lsls	r3, r3, #1
    b312:	001a      	movs	r2, r3
    b314:	4b36      	ldr	r3, [pc, #216]	; (b3f0 <system_clock_source_dpll_set_config+0xfc>)
    b316:	0011      	movs	r1, r2
    b318:	6978      	ldr	r0, [r7, #20]
    b31a:	4798      	blx	r3
    b31c:	0003      	movs	r3, r0
    b31e:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    b320:	687b      	ldr	r3, [r7, #4]
    b322:	689b      	ldr	r3, [r3, #8]
    b324:	011a      	lsls	r2, r3, #4
    b326:	4b32      	ldr	r3, [pc, #200]	; (b3f0 <system_clock_source_dpll_set_config+0xfc>)
    b328:	6979      	ldr	r1, [r7, #20]
    b32a:	0010      	movs	r0, r2
    b32c:	4798      	blx	r3
    b32e:	0003      	movs	r3, r0
    b330:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
    b332:	693b      	ldr	r3, [r7, #16]
    b334:	b2da      	uxtb	r2, r3
    b336:	230f      	movs	r3, #15
    b338:	18fb      	adds	r3, r7, r3
    b33a:	210f      	movs	r1, #15
    b33c:	400a      	ands	r2, r1
    b33e:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
    b340:	693b      	ldr	r3, [r7, #16]
    b342:	091b      	lsrs	r3, r3, #4
    b344:	3b01      	subs	r3, #1
    b346:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
    b348:	492a      	ldr	r1, [pc, #168]	; (b3f4 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    b34a:	687b      	ldr	r3, [r7, #4]
    b34c:	781b      	ldrb	r3, [r3, #0]
    b34e:	01db      	lsls	r3, r3, #7
    b350:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    b352:	687b      	ldr	r3, [r7, #4]
    b354:	785b      	ldrb	r3, [r3, #1]
    b356:	019b      	lsls	r3, r3, #6
    b358:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    b35a:	4313      	orrs	r3, r2
    b35c:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
    b35e:	2344      	movs	r3, #68	; 0x44
    b360:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
    b362:	4b24      	ldr	r3, [pc, #144]	; (b3f4 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    b364:	220f      	movs	r2, #15
    b366:	18ba      	adds	r2, r7, r2
    b368:	7812      	ldrb	r2, [r2, #0]
    b36a:	0412      	lsls	r2, r2, #16
    b36c:	0011      	movs	r1, r2
    b36e:	22f0      	movs	r2, #240	; 0xf0
    b370:	0312      	lsls	r2, r2, #12
    b372:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    b374:	693a      	ldr	r2, [r7, #16]
    b376:	0512      	lsls	r2, r2, #20
    b378:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    b37a:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
    b37c:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
    b37e:	4b1d      	ldr	r3, [pc, #116]	; (b3f4 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    b380:	687a      	ldr	r2, [r7, #4]
    b382:	8a12      	ldrh	r2, [r2, #16]
    b384:	0412      	lsls	r2, r2, #16
    b386:	0011      	movs	r1, r2
    b388:	4a1b      	ldr	r2, [pc, #108]	; (b3f8 <system_clock_source_dpll_set_config+0x104>)
    b38a:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    b38c:	687a      	ldr	r2, [r7, #4]
    b38e:	7892      	ldrb	r2, [r2, #2]
    b390:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    b392:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    b394:	687a      	ldr	r2, [r7, #4]
    b396:	7cd2      	ldrb	r2, [r2, #19]
    b398:	0212      	lsls	r2, r2, #8
    b39a:	0010      	movs	r0, r2
    b39c:	22e0      	movs	r2, #224	; 0xe0
    b39e:	00d2      	lsls	r2, r2, #3
    b3a0:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    b3a2:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    b3a4:	687a      	ldr	r2, [r7, #4]
    b3a6:	7d12      	ldrb	r2, [r2, #20]
    b3a8:	0112      	lsls	r2, r2, #4
    b3aa:	0010      	movs	r0, r2
    b3ac:	2230      	movs	r2, #48	; 0x30
    b3ae:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    b3b0:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    b3b2:	687a      	ldr	r2, [r7, #4]
    b3b4:	78d2      	ldrb	r2, [r2, #3]
    b3b6:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    b3b8:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    b3ba:	687a      	ldr	r2, [r7, #4]
    b3bc:	7912      	ldrb	r2, [r2, #4]
    b3be:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    b3c0:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    b3c2:	687a      	ldr	r2, [r7, #4]
    b3c4:	7c92      	ldrb	r2, [r2, #18]
    b3c6:	0010      	movs	r0, r2
    b3c8:	2203      	movs	r2, #3
    b3ca:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    b3cc:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
    b3ce:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    b3d0:	693b      	ldr	r3, [r7, #16]
    b3d2:	3301      	adds	r3, #1
    b3d4:	011a      	lsls	r2, r3, #4
    b3d6:	230f      	movs	r3, #15
    b3d8:	18fb      	adds	r3, r7, r3
    b3da:	781b      	ldrb	r3, [r3, #0]
    b3dc:	18d3      	adds	r3, r2, r3
    b3de:	697a      	ldr	r2, [r7, #20]
    b3e0:	4353      	muls	r3, r2
    b3e2:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
    b3e4:	4b05      	ldr	r3, [pc, #20]	; (b3fc <system_clock_source_dpll_set_config+0x108>)
    b3e6:	60da      	str	r2, [r3, #12]
}
    b3e8:	46c0      	nop			; (mov r8, r8)
    b3ea:	46bd      	mov	sp, r7
    b3ec:	b006      	add	sp, #24
    b3ee:	bd80      	pop	{r7, pc}
    b3f0:	0000c405 	.word	0x0000c405
    b3f4:	40000800 	.word	0x40000800
    b3f8:	07ff0000 	.word	0x07ff0000
    b3fc:	20003848 	.word	0x20003848

0000b400 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    b400:	b580      	push	{r7, lr}
    b402:	b082      	sub	sp, #8
    b404:	af00      	add	r7, sp, #0
    b406:	0002      	movs	r2, r0
    b408:	1dfb      	adds	r3, r7, #7
    b40a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    b40c:	1dfb      	adds	r3, r7, #7
    b40e:	781b      	ldrb	r3, [r3, #0]
    b410:	2b08      	cmp	r3, #8
    b412:	d83b      	bhi.n	b48c <system_clock_source_enable+0x8c>
    b414:	009a      	lsls	r2, r3, #2
    b416:	4b21      	ldr	r3, [pc, #132]	; (b49c <system_clock_source_enable+0x9c>)
    b418:	18d3      	adds	r3, r2, r3
    b41a:	681b      	ldr	r3, [r3, #0]
    b41c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    b41e:	4b20      	ldr	r3, [pc, #128]	; (b4a0 <system_clock_source_enable+0xa0>)
    b420:	4a1f      	ldr	r2, [pc, #124]	; (b4a0 <system_clock_source_enable+0xa0>)
    b422:	6a12      	ldr	r2, [r2, #32]
    b424:	2102      	movs	r1, #2
    b426:	430a      	orrs	r2, r1
    b428:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    b42a:	2300      	movs	r3, #0
    b42c:	e031      	b.n	b492 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    b42e:	4b1c      	ldr	r3, [pc, #112]	; (b4a0 <system_clock_source_enable+0xa0>)
    b430:	4a1b      	ldr	r2, [pc, #108]	; (b4a0 <system_clock_source_enable+0xa0>)
    b432:	6992      	ldr	r2, [r2, #24]
    b434:	2102      	movs	r1, #2
    b436:	430a      	orrs	r2, r1
    b438:	619a      	str	r2, [r3, #24]
		break;
    b43a:	e029      	b.n	b490 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    b43c:	4a18      	ldr	r2, [pc, #96]	; (b4a0 <system_clock_source_enable+0xa0>)
    b43e:	4b18      	ldr	r3, [pc, #96]	; (b4a0 <system_clock_source_enable+0xa0>)
    b440:	8a1b      	ldrh	r3, [r3, #16]
    b442:	b29b      	uxth	r3, r3
    b444:	2102      	movs	r1, #2
    b446:	430b      	orrs	r3, r1
    b448:	b29b      	uxth	r3, r3
    b44a:	8213      	strh	r3, [r2, #16]
		break;
    b44c:	e020      	b.n	b490 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    b44e:	4a14      	ldr	r2, [pc, #80]	; (b4a0 <system_clock_source_enable+0xa0>)
    b450:	4b13      	ldr	r3, [pc, #76]	; (b4a0 <system_clock_source_enable+0xa0>)
    b452:	8a9b      	ldrh	r3, [r3, #20]
    b454:	b29b      	uxth	r3, r3
    b456:	2102      	movs	r1, #2
    b458:	430b      	orrs	r3, r1
    b45a:	b29b      	uxth	r3, r3
    b45c:	8293      	strh	r3, [r2, #20]
		break;
    b45e:	e017      	b.n	b490 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    b460:	4b10      	ldr	r3, [pc, #64]	; (b4a4 <system_clock_source_enable+0xa4>)
    b462:	681b      	ldr	r3, [r3, #0]
    b464:	2202      	movs	r2, #2
    b466:	431a      	orrs	r2, r3
    b468:	4b0e      	ldr	r3, [pc, #56]	; (b4a4 <system_clock_source_enable+0xa4>)
    b46a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    b46c:	4b0e      	ldr	r3, [pc, #56]	; (b4a8 <system_clock_source_enable+0xa8>)
    b46e:	4798      	blx	r3
		break;
    b470:	e00e      	b.n	b490 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    b472:	4a0b      	ldr	r2, [pc, #44]	; (b4a0 <system_clock_source_enable+0xa0>)
    b474:	490a      	ldr	r1, [pc, #40]	; (b4a0 <system_clock_source_enable+0xa0>)
    b476:	2344      	movs	r3, #68	; 0x44
    b478:	5ccb      	ldrb	r3, [r1, r3]
    b47a:	b2db      	uxtb	r3, r3
    b47c:	2102      	movs	r1, #2
    b47e:	430b      	orrs	r3, r1
    b480:	b2d9      	uxtb	r1, r3
    b482:	2344      	movs	r3, #68	; 0x44
    b484:	54d1      	strb	r1, [r2, r3]
		break;
    b486:	e003      	b.n	b490 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    b488:	2300      	movs	r3, #0
    b48a:	e002      	b.n	b492 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b48c:	2317      	movs	r3, #23
    b48e:	e000      	b.n	b492 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    b490:	2300      	movs	r3, #0
}
    b492:	0018      	movs	r0, r3
    b494:	46bd      	mov	sp, r7
    b496:	b002      	add	sp, #8
    b498:	bd80      	pop	{r7, pc}
    b49a:	46c0      	nop			; (mov r8, r8)
    b49c:	00010710 	.word	0x00010710
    b4a0:	40000800 	.word	0x40000800
    b4a4:	20003848 	.word	0x20003848
    b4a8:	0000b179 	.word	0x0000b179

0000b4ac <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    b4ac:	b580      	push	{r7, lr}
    b4ae:	b084      	sub	sp, #16
    b4b0:	af00      	add	r7, sp, #0
    b4b2:	0002      	movs	r2, r0
    b4b4:	1dfb      	adds	r3, r7, #7
    b4b6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    b4b8:	2300      	movs	r3, #0
    b4ba:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    b4bc:	1dfb      	adds	r3, r7, #7
    b4be:	781b      	ldrb	r3, [r3, #0]
    b4c0:	2b08      	cmp	r3, #8
    b4c2:	d821      	bhi.n	b508 <system_clock_source_is_ready+0x5c>
    b4c4:	009a      	lsls	r2, r3, #2
    b4c6:	4b18      	ldr	r3, [pc, #96]	; (b528 <system_clock_source_is_ready+0x7c>)
    b4c8:	18d3      	adds	r3, r2, r3
    b4ca:	681b      	ldr	r3, [r3, #0]
    b4cc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    b4ce:	2308      	movs	r3, #8
    b4d0:	60fb      	str	r3, [r7, #12]
		break;
    b4d2:	e01b      	b.n	b50c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    b4d4:	2304      	movs	r3, #4
    b4d6:	60fb      	str	r3, [r7, #12]
		break;
    b4d8:	e018      	b.n	b50c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    b4da:	2301      	movs	r3, #1
    b4dc:	60fb      	str	r3, [r7, #12]
		break;
    b4de:	e015      	b.n	b50c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    b4e0:	2302      	movs	r3, #2
    b4e2:	60fb      	str	r3, [r7, #12]
		break;
    b4e4:	e012      	b.n	b50c <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    b4e6:	2310      	movs	r3, #16
    b4e8:	60fb      	str	r3, [r7, #12]
		}
		break;
    b4ea:	e00f      	b.n	b50c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    b4ec:	4a0f      	ldr	r2, [pc, #60]	; (b52c <system_clock_source_is_ready+0x80>)
    b4ee:	2350      	movs	r3, #80	; 0x50
    b4f0:	5cd3      	ldrb	r3, [r2, r3]
    b4f2:	b2db      	uxtb	r3, r3
    b4f4:	001a      	movs	r2, r3
    b4f6:	2303      	movs	r3, #3
    b4f8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    b4fa:	3b03      	subs	r3, #3
    b4fc:	425a      	negs	r2, r3
    b4fe:	4153      	adcs	r3, r2
    b500:	b2db      	uxtb	r3, r3
    b502:	e00c      	b.n	b51e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    b504:	2301      	movs	r3, #1
    b506:	e00a      	b.n	b51e <system_clock_source_is_ready+0x72>

	default:
		return false;
    b508:	2300      	movs	r3, #0
    b50a:	e008      	b.n	b51e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    b50c:	4b07      	ldr	r3, [pc, #28]	; (b52c <system_clock_source_is_ready+0x80>)
    b50e:	68db      	ldr	r3, [r3, #12]
    b510:	68fa      	ldr	r2, [r7, #12]
    b512:	401a      	ands	r2, r3
    b514:	68fb      	ldr	r3, [r7, #12]
    b516:	1ad3      	subs	r3, r2, r3
    b518:	425a      	negs	r2, r3
    b51a:	4153      	adcs	r3, r2
    b51c:	b2db      	uxtb	r3, r3
}
    b51e:	0018      	movs	r0, r3
    b520:	46bd      	mov	sp, r7
    b522:	b004      	add	sp, #16
    b524:	bd80      	pop	{r7, pc}
    b526:	46c0      	nop			; (mov r8, r8)
    b528:	00010734 	.word	0x00010734
    b52c:	40000800 	.word	0x40000800

0000b530 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    b530:	b580      	push	{r7, lr}
    b532:	b082      	sub	sp, #8
    b534:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    b536:	003b      	movs	r3, r7
    b538:	2203      	movs	r2, #3
    b53a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    b53c:	2300      	movs	r3, #0
    b53e:	607b      	str	r3, [r7, #4]
    b540:	e009      	b.n	b556 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    b542:	687b      	ldr	r3, [r7, #4]
    b544:	b2db      	uxtb	r3, r3
    b546:	003a      	movs	r2, r7
    b548:	0011      	movs	r1, r2
    b54a:	0018      	movs	r0, r3
    b54c:	4b05      	ldr	r3, [pc, #20]	; (b564 <_switch_peripheral_gclk+0x34>)
    b54e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	3301      	adds	r3, #1
    b554:	607b      	str	r3, [r7, #4]
    b556:	687b      	ldr	r3, [r7, #4]
    b558:	2b24      	cmp	r3, #36	; 0x24
    b55a:	d9f2      	bls.n	b542 <_switch_peripheral_gclk+0x12>
	}
}
    b55c:	46c0      	nop			; (mov r8, r8)
    b55e:	46bd      	mov	sp, r7
    b560:	b002      	add	sp, #8
    b562:	bd80      	pop	{r7, pc}
    b564:	0000bb35 	.word	0x0000bb35

0000b568 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    b568:	b580      	push	{r7, lr}
    b56a:	b0a6      	sub	sp, #152	; 0x98
    b56c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    b56e:	4b92      	ldr	r3, [pc, #584]	; (b7b8 <system_clock_init+0x250>)
    b570:	22c2      	movs	r2, #194	; 0xc2
    b572:	00d2      	lsls	r2, r2, #3
    b574:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    b576:	2003      	movs	r0, #3
    b578:	4b90      	ldr	r3, [pc, #576]	; (b7bc <system_clock_init+0x254>)
    b57a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    b57c:	4b90      	ldr	r3, [pc, #576]	; (b7c0 <system_clock_init+0x258>)
    b57e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    b580:	2394      	movs	r3, #148	; 0x94
    b582:	18fb      	adds	r3, r7, r3
    b584:	0018      	movs	r0, r3
    b586:	4b8f      	ldr	r3, [pc, #572]	; (b7c4 <system_clock_init+0x25c>)
    b588:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    b58a:	2394      	movs	r3, #148	; 0x94
    b58c:	18fb      	adds	r3, r7, r3
    b58e:	2200      	movs	r2, #0
    b590:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    b592:	2394      	movs	r3, #148	; 0x94
    b594:	18fb      	adds	r3, r7, r3
    b596:	2201      	movs	r2, #1
    b598:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    b59a:	2394      	movs	r3, #148	; 0x94
    b59c:	18fb      	adds	r3, r7, r3
    b59e:	2200      	movs	r2, #0
    b5a0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    b5a2:	2394      	movs	r3, #148	; 0x94
    b5a4:	18fb      	adds	r3, r7, r3
    b5a6:	0018      	movs	r0, r3
    b5a8:	4b87      	ldr	r3, [pc, #540]	; (b7c8 <system_clock_init+0x260>)
    b5aa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    b5ac:	2006      	movs	r0, #6
    b5ae:	4b87      	ldr	r3, [pc, #540]	; (b7cc <system_clock_init+0x264>)
    b5b0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    b5b2:	4b87      	ldr	r3, [pc, #540]	; (b7d0 <system_clock_init+0x268>)
    b5b4:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    b5b6:	2360      	movs	r3, #96	; 0x60
    b5b8:	18fb      	adds	r3, r7, r3
    b5ba:	0018      	movs	r0, r3
    b5bc:	4b85      	ldr	r3, [pc, #532]	; (b7d4 <system_clock_init+0x26c>)
    b5be:	4798      	blx	r3
    b5c0:	2360      	movs	r3, #96	; 0x60
    b5c2:	18fb      	adds	r3, r7, r3
    b5c4:	2206      	movs	r2, #6
    b5c6:	701a      	strb	r2, [r3, #0]
    b5c8:	2360      	movs	r3, #96	; 0x60
    b5ca:	18fb      	adds	r3, r7, r3
    b5cc:	2208      	movs	r2, #8
    b5ce:	605a      	str	r2, [r3, #4]
    b5d0:	2360      	movs	r3, #96	; 0x60
    b5d2:	18fb      	adds	r3, r7, r3
    b5d4:	2200      	movs	r2, #0
    b5d6:	721a      	strb	r2, [r3, #8]
    b5d8:	2360      	movs	r3, #96	; 0x60
    b5da:	18fb      	adds	r3, r7, r3
    b5dc:	2200      	movs	r2, #0
    b5de:	725a      	strb	r2, [r3, #9]
    b5e0:	2360      	movs	r3, #96	; 0x60
    b5e2:	18fb      	adds	r3, r7, r3
    b5e4:	0019      	movs	r1, r3
    b5e6:	2001      	movs	r0, #1
    b5e8:	4b7b      	ldr	r3, [pc, #492]	; (b7d8 <system_clock_init+0x270>)
    b5ea:	4798      	blx	r3
    b5ec:	2001      	movs	r0, #1
    b5ee:	4b7b      	ldr	r3, [pc, #492]	; (b7dc <system_clock_init+0x274>)
    b5f0:	4798      	blx	r3
    b5f2:	2354      	movs	r3, #84	; 0x54
    b5f4:	18fb      	adds	r3, r7, r3
    b5f6:	0018      	movs	r0, r3
    b5f8:	4b76      	ldr	r3, [pc, #472]	; (b7d4 <system_clock_init+0x26c>)
    b5fa:	4798      	blx	r3
    b5fc:	2354      	movs	r3, #84	; 0x54
    b5fe:	18fb      	adds	r3, r7, r3
    b600:	2203      	movs	r2, #3
    b602:	701a      	strb	r2, [r3, #0]
    b604:	2354      	movs	r3, #84	; 0x54
    b606:	18fb      	adds	r3, r7, r3
    b608:	2201      	movs	r2, #1
    b60a:	605a      	str	r2, [r3, #4]
    b60c:	2354      	movs	r3, #84	; 0x54
    b60e:	18fb      	adds	r3, r7, r3
    b610:	2201      	movs	r2, #1
    b612:	721a      	strb	r2, [r3, #8]
    b614:	2354      	movs	r3, #84	; 0x54
    b616:	18fb      	adds	r3, r7, r3
    b618:	2200      	movs	r2, #0
    b61a:	725a      	strb	r2, [r3, #9]
    b61c:	2354      	movs	r3, #84	; 0x54
    b61e:	18fb      	adds	r3, r7, r3
    b620:	0019      	movs	r1, r3
    b622:	2002      	movs	r0, #2
    b624:	4b6c      	ldr	r3, [pc, #432]	; (b7d8 <system_clock_init+0x270>)
    b626:	4798      	blx	r3
    b628:	2002      	movs	r0, #2
    b62a:	4b6c      	ldr	r3, [pc, #432]	; (b7dc <system_clock_init+0x274>)
    b62c:	4798      	blx	r3
    b62e:	233c      	movs	r3, #60	; 0x3c
    b630:	18fb      	adds	r3, r7, r3
    b632:	0018      	movs	r0, r3
    b634:	4b67      	ldr	r3, [pc, #412]	; (b7d4 <system_clock_init+0x26c>)
    b636:	4798      	blx	r3
    b638:	233c      	movs	r3, #60	; 0x3c
    b63a:	18fb      	adds	r3, r7, r3
    b63c:	2203      	movs	r2, #3
    b63e:	701a      	strb	r2, [r3, #0]
    b640:	233c      	movs	r3, #60	; 0x3c
    b642:	18fb      	adds	r3, r7, r3
    b644:	2220      	movs	r2, #32
    b646:	605a      	str	r2, [r3, #4]
    b648:	233c      	movs	r3, #60	; 0x3c
    b64a:	18fb      	adds	r3, r7, r3
    b64c:	2200      	movs	r2, #0
    b64e:	721a      	strb	r2, [r3, #8]
    b650:	233c      	movs	r3, #60	; 0x3c
    b652:	18fb      	adds	r3, r7, r3
    b654:	2200      	movs	r2, #0
    b656:	725a      	strb	r2, [r3, #9]
    b658:	233c      	movs	r3, #60	; 0x3c
    b65a:	18fb      	adds	r3, r7, r3
    b65c:	0019      	movs	r1, r3
    b65e:	2004      	movs	r0, #4
    b660:	4b5d      	ldr	r3, [pc, #372]	; (b7d8 <system_clock_init+0x270>)
    b662:	4798      	blx	r3
    b664:	2004      	movs	r0, #4
    b666:	4b5d      	ldr	r3, [pc, #372]	; (b7dc <system_clock_init+0x274>)
    b668:	4798      	blx	r3
    b66a:	2330      	movs	r3, #48	; 0x30
    b66c:	18fb      	adds	r3, r7, r3
    b66e:	0018      	movs	r0, r3
    b670:	4b58      	ldr	r3, [pc, #352]	; (b7d4 <system_clock_init+0x26c>)
    b672:	4798      	blx	r3
    b674:	2330      	movs	r3, #48	; 0x30
    b676:	18fb      	adds	r3, r7, r3
    b678:	2206      	movs	r2, #6
    b67a:	701a      	strb	r2, [r3, #0]
    b67c:	2330      	movs	r3, #48	; 0x30
    b67e:	18fb      	adds	r3, r7, r3
    b680:	2201      	movs	r2, #1
    b682:	605a      	str	r2, [r3, #4]
    b684:	2330      	movs	r3, #48	; 0x30
    b686:	18fb      	adds	r3, r7, r3
    b688:	2200      	movs	r2, #0
    b68a:	721a      	strb	r2, [r3, #8]
    b68c:	2330      	movs	r3, #48	; 0x30
    b68e:	18fb      	adds	r3, r7, r3
    b690:	2200      	movs	r2, #0
    b692:	725a      	strb	r2, [r3, #9]
    b694:	2330      	movs	r3, #48	; 0x30
    b696:	18fb      	adds	r3, r7, r3
    b698:	0019      	movs	r1, r3
    b69a:	2005      	movs	r0, #5
    b69c:	4b4e      	ldr	r3, [pc, #312]	; (b7d8 <system_clock_init+0x270>)
    b69e:	4798      	blx	r3
    b6a0:	2005      	movs	r0, #5
    b6a2:	4b4e      	ldr	r3, [pc, #312]	; (b7dc <system_clock_init+0x274>)
    b6a4:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
    b6a6:	2390      	movs	r3, #144	; 0x90
    b6a8:	18fb      	adds	r3, r7, r3
    b6aa:	0018      	movs	r0, r3
    b6ac:	4b4c      	ldr	r3, [pc, #304]	; (b7e0 <system_clock_init+0x278>)
    b6ae:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    b6b0:	2390      	movs	r3, #144	; 0x90
    b6b2:	18fb      	adds	r3, r7, r3
    b6b4:	2201      	movs	r2, #1
    b6b6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    b6b8:	2390      	movs	r3, #144	; 0x90
    b6ba:	18fb      	adds	r3, r7, r3
    b6bc:	0019      	movs	r1, r3
    b6be:	2001      	movs	r0, #1
    b6c0:	4b48      	ldr	r3, [pc, #288]	; (b7e4 <system_clock_init+0x27c>)
    b6c2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    b6c4:	2001      	movs	r0, #1
    b6c6:	4b48      	ldr	r3, [pc, #288]	; (b7e8 <system_clock_init+0x280>)
    b6c8:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
    b6ca:	2378      	movs	r3, #120	; 0x78
    b6cc:	18fb      	adds	r3, r7, r3
    b6ce:	0018      	movs	r0, r3
    b6d0:	4b46      	ldr	r3, [pc, #280]	; (b7ec <system_clock_init+0x284>)
    b6d2:	4798      	blx	r3

	dpll_config.on_demand        = false;
    b6d4:	2378      	movs	r3, #120	; 0x78
    b6d6:	18fb      	adds	r3, r7, r3
    b6d8:	2200      	movs	r2, #0
    b6da:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    b6dc:	2378      	movs	r3, #120	; 0x78
    b6de:	18fb      	adds	r3, r7, r3
    b6e0:	2200      	movs	r2, #0
    b6e2:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
    b6e4:	2378      	movs	r3, #120	; 0x78
    b6e6:	18fb      	adds	r3, r7, r3
    b6e8:	2200      	movs	r2, #0
    b6ea:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
    b6ec:	2378      	movs	r3, #120	; 0x78
    b6ee:	18fb      	adds	r3, r7, r3
    b6f0:	2200      	movs	r2, #0
    b6f2:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
    b6f4:	2378      	movs	r3, #120	; 0x78
    b6f6:	18fb      	adds	r3, r7, r3
    b6f8:	2200      	movs	r2, #0
    b6fa:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
    b6fc:	2378      	movs	r3, #120	; 0x78
    b6fe:	18fb      	adds	r3, r7, r3
    b700:	2200      	movs	r2, #0
    b702:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
    b704:	2378      	movs	r3, #120	; 0x78
    b706:	18fb      	adds	r3, r7, r3
    b708:	2200      	movs	r2, #0
    b70a:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    b70c:	2378      	movs	r3, #120	; 0x78
    b70e:	18fb      	adds	r3, r7, r3
    b710:	2202      	movs	r2, #2
    b712:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    b714:	2378      	movs	r3, #120	; 0x78
    b716:	18fb      	adds	r3, r7, r3
    b718:	4a35      	ldr	r2, [pc, #212]	; (b7f0 <system_clock_init+0x288>)
    b71a:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
    b71c:	2378      	movs	r3, #120	; 0x78
    b71e:	18fb      	adds	r3, r7, r3
    b720:	2201      	movs	r2, #1
    b722:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
    b724:	2378      	movs	r3, #120	; 0x78
    b726:	18fb      	adds	r3, r7, r3
    b728:	4a32      	ldr	r2, [pc, #200]	; (b7f4 <system_clock_init+0x28c>)
    b72a:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
    b72c:	2378      	movs	r3, #120	; 0x78
    b72e:	18fb      	adds	r3, r7, r3
    b730:	0018      	movs	r0, r3
    b732:	4b31      	ldr	r3, [pc, #196]	; (b7f8 <system_clock_init+0x290>)
    b734:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    b736:	2008      	movs	r0, #8
    b738:	4b24      	ldr	r3, [pc, #144]	; (b7cc <system_clock_init+0x264>)
    b73a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    b73c:	46c0      	nop			; (mov r8, r8)
    b73e:	2008      	movs	r0, #8
    b740:	4b2e      	ldr	r3, [pc, #184]	; (b7fc <system_clock_init+0x294>)
    b742:	4798      	blx	r3
    b744:	0003      	movs	r3, r0
    b746:	001a      	movs	r2, r3
    b748:	2301      	movs	r3, #1
    b74a:	4053      	eors	r3, r2
    b74c:	b2db      	uxtb	r3, r3
    b74e:	2b00      	cmp	r3, #0
    b750:	d1f5      	bne.n	b73e <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    b752:	4919      	ldr	r1, [pc, #100]	; (b7b8 <system_clock_init+0x250>)
    b754:	2244      	movs	r2, #68	; 0x44
    b756:	5c8b      	ldrb	r3, [r1, r2]
    b758:	2080      	movs	r0, #128	; 0x80
    b75a:	4240      	negs	r0, r0
    b75c:	4303      	orrs	r3, r0
    b75e:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    b760:	2000      	movs	r0, #0
    b762:	4b27      	ldr	r3, [pc, #156]	; (b800 <system_clock_init+0x298>)
    b764:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    b766:	2100      	movs	r1, #0
    b768:	2000      	movs	r0, #0
    b76a:	4b26      	ldr	r3, [pc, #152]	; (b804 <system_clock_init+0x29c>)
    b76c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    b76e:	2100      	movs	r1, #0
    b770:	2001      	movs	r0, #1
    b772:	4b24      	ldr	r3, [pc, #144]	; (b804 <system_clock_init+0x29c>)
    b774:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    b776:	2100      	movs	r1, #0
    b778:	2002      	movs	r0, #2
    b77a:	4b22      	ldr	r3, [pc, #136]	; (b804 <system_clock_init+0x29c>)
    b77c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    b77e:	003b      	movs	r3, r7
    b780:	0018      	movs	r0, r3
    b782:	4b14      	ldr	r3, [pc, #80]	; (b7d4 <system_clock_init+0x26c>)
    b784:	4798      	blx	r3
    b786:	003b      	movs	r3, r7
    b788:	2208      	movs	r2, #8
    b78a:	701a      	strb	r2, [r3, #0]
    b78c:	003b      	movs	r3, r7
    b78e:	2201      	movs	r2, #1
    b790:	605a      	str	r2, [r3, #4]
    b792:	003b      	movs	r3, r7
    b794:	2200      	movs	r2, #0
    b796:	721a      	strb	r2, [r3, #8]
    b798:	003b      	movs	r3, r7
    b79a:	2201      	movs	r2, #1
    b79c:	725a      	strb	r2, [r3, #9]
    b79e:	003b      	movs	r3, r7
    b7a0:	0019      	movs	r1, r3
    b7a2:	2000      	movs	r0, #0
    b7a4:	4b0c      	ldr	r3, [pc, #48]	; (b7d8 <system_clock_init+0x270>)
    b7a6:	4798      	blx	r3
    b7a8:	2000      	movs	r0, #0
    b7aa:	4b0c      	ldr	r3, [pc, #48]	; (b7dc <system_clock_init+0x274>)
    b7ac:	4798      	blx	r3
#endif
}
    b7ae:	46c0      	nop			; (mov r8, r8)
    b7b0:	46bd      	mov	sp, r7
    b7b2:	b026      	add	sp, #152	; 0x98
    b7b4:	bd80      	pop	{r7, pc}
    b7b6:	46c0      	nop			; (mov r8, r8)
    b7b8:	40000800 	.word	0x40000800
    b7bc:	0000b129 	.word	0x0000b129
    b7c0:	0000b531 	.word	0x0000b531
    b7c4:	0000b039 	.word	0x0000b039
    b7c8:	0000b27d 	.word	0x0000b27d
    b7cc:	0000b401 	.word	0x0000b401
    b7d0:	0000b8ad 	.word	0x0000b8ad
    b7d4:	0000aff5 	.word	0x0000aff5
    b7d8:	0000b8dd 	.word	0x0000b8dd
    b7dc:	0000ba01 	.word	0x0000ba01
    b7e0:	0000b023 	.word	0x0000b023
    b7e4:	0000bb35 	.word	0x0000bb35
    b7e8:	0000bb79 	.word	0x0000bb79
    b7ec:	0000b0d1 	.word	0x0000b0d1
    b7f0:	000f4240 	.word	0x000f4240
    b7f4:	02dc6c00 	.word	0x02dc6c00
    b7f8:	0000b2f5 	.word	0x0000b2f5
    b7fc:	0000b4ad 	.word	0x0000b4ad
    b800:	0000b05d 	.word	0x0000b05d
    b804:	0000b07d 	.word	0x0000b07d

0000b808 <system_apb_clock_set_mask>:
{
    b808:	b580      	push	{r7, lr}
    b80a:	b082      	sub	sp, #8
    b80c:	af00      	add	r7, sp, #0
    b80e:	0002      	movs	r2, r0
    b810:	6039      	str	r1, [r7, #0]
    b812:	1dfb      	adds	r3, r7, #7
    b814:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b816:	1dfb      	adds	r3, r7, #7
    b818:	781b      	ldrb	r3, [r3, #0]
    b81a:	2b01      	cmp	r3, #1
    b81c:	d00a      	beq.n	b834 <system_apb_clock_set_mask+0x2c>
    b81e:	2b02      	cmp	r3, #2
    b820:	d00f      	beq.n	b842 <system_apb_clock_set_mask+0x3a>
    b822:	2b00      	cmp	r3, #0
    b824:	d114      	bne.n	b850 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    b826:	4b0e      	ldr	r3, [pc, #56]	; (b860 <system_apb_clock_set_mask+0x58>)
    b828:	4a0d      	ldr	r2, [pc, #52]	; (b860 <system_apb_clock_set_mask+0x58>)
    b82a:	6991      	ldr	r1, [r2, #24]
    b82c:	683a      	ldr	r2, [r7, #0]
    b82e:	430a      	orrs	r2, r1
    b830:	619a      	str	r2, [r3, #24]
			break;
    b832:	e00f      	b.n	b854 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    b834:	4b0a      	ldr	r3, [pc, #40]	; (b860 <system_apb_clock_set_mask+0x58>)
    b836:	4a0a      	ldr	r2, [pc, #40]	; (b860 <system_apb_clock_set_mask+0x58>)
    b838:	69d1      	ldr	r1, [r2, #28]
    b83a:	683a      	ldr	r2, [r7, #0]
    b83c:	430a      	orrs	r2, r1
    b83e:	61da      	str	r2, [r3, #28]
			break;
    b840:	e008      	b.n	b854 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    b842:	4b07      	ldr	r3, [pc, #28]	; (b860 <system_apb_clock_set_mask+0x58>)
    b844:	4a06      	ldr	r2, [pc, #24]	; (b860 <system_apb_clock_set_mask+0x58>)
    b846:	6a11      	ldr	r1, [r2, #32]
    b848:	683a      	ldr	r2, [r7, #0]
    b84a:	430a      	orrs	r2, r1
    b84c:	621a      	str	r2, [r3, #32]
			break;
    b84e:	e001      	b.n	b854 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    b850:	2317      	movs	r3, #23
    b852:	e000      	b.n	b856 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    b854:	2300      	movs	r3, #0
}
    b856:	0018      	movs	r0, r3
    b858:	46bd      	mov	sp, r7
    b85a:	b002      	add	sp, #8
    b85c:	bd80      	pop	{r7, pc}
    b85e:	46c0      	nop			; (mov r8, r8)
    b860:	40000400 	.word	0x40000400

0000b864 <system_interrupt_enter_critical_section>:
{
    b864:	b580      	push	{r7, lr}
    b866:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    b868:	4b02      	ldr	r3, [pc, #8]	; (b874 <system_interrupt_enter_critical_section+0x10>)
    b86a:	4798      	blx	r3
}
    b86c:	46c0      	nop			; (mov r8, r8)
    b86e:	46bd      	mov	sp, r7
    b870:	bd80      	pop	{r7, pc}
    b872:	46c0      	nop			; (mov r8, r8)
    b874:	0000964d 	.word	0x0000964d

0000b878 <system_interrupt_leave_critical_section>:
{
    b878:	b580      	push	{r7, lr}
    b87a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    b87c:	4b02      	ldr	r3, [pc, #8]	; (b888 <system_interrupt_leave_critical_section+0x10>)
    b87e:	4798      	blx	r3
}
    b880:	46c0      	nop			; (mov r8, r8)
    b882:	46bd      	mov	sp, r7
    b884:	bd80      	pop	{r7, pc}
    b886:	46c0      	nop			; (mov r8, r8)
    b888:	000096a1 	.word	0x000096a1

0000b88c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    b88c:	b580      	push	{r7, lr}
    b88e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b890:	4b05      	ldr	r3, [pc, #20]	; (b8a8 <system_gclk_is_syncing+0x1c>)
    b892:	785b      	ldrb	r3, [r3, #1]
    b894:	b2db      	uxtb	r3, r3
    b896:	b25b      	sxtb	r3, r3
    b898:	2b00      	cmp	r3, #0
    b89a:	da01      	bge.n	b8a0 <system_gclk_is_syncing+0x14>
		return true;
    b89c:	2301      	movs	r3, #1
    b89e:	e000      	b.n	b8a2 <system_gclk_is_syncing+0x16>
	}

	return false;
    b8a0:	2300      	movs	r3, #0
}
    b8a2:	0018      	movs	r0, r3
    b8a4:	46bd      	mov	sp, r7
    b8a6:	bd80      	pop	{r7, pc}
    b8a8:	40000c00 	.word	0x40000c00

0000b8ac <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    b8ac:	b580      	push	{r7, lr}
    b8ae:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    b8b0:	2108      	movs	r1, #8
    b8b2:	2000      	movs	r0, #0
    b8b4:	4b07      	ldr	r3, [pc, #28]	; (b8d4 <system_gclk_init+0x28>)
    b8b6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    b8b8:	4b07      	ldr	r3, [pc, #28]	; (b8d8 <system_gclk_init+0x2c>)
    b8ba:	2201      	movs	r2, #1
    b8bc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    b8be:	46c0      	nop			; (mov r8, r8)
    b8c0:	4b05      	ldr	r3, [pc, #20]	; (b8d8 <system_gclk_init+0x2c>)
    b8c2:	781b      	ldrb	r3, [r3, #0]
    b8c4:	b2db      	uxtb	r3, r3
    b8c6:	001a      	movs	r2, r3
    b8c8:	2301      	movs	r3, #1
    b8ca:	4013      	ands	r3, r2
    b8cc:	d1f8      	bne.n	b8c0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    b8ce:	46c0      	nop			; (mov r8, r8)
    b8d0:	46bd      	mov	sp, r7
    b8d2:	bd80      	pop	{r7, pc}
    b8d4:	0000b809 	.word	0x0000b809
    b8d8:	40000c00 	.word	0x40000c00

0000b8dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    b8dc:	b580      	push	{r7, lr}
    b8de:	b086      	sub	sp, #24
    b8e0:	af00      	add	r7, sp, #0
    b8e2:	0002      	movs	r2, r0
    b8e4:	6039      	str	r1, [r7, #0]
    b8e6:	1dfb      	adds	r3, r7, #7
    b8e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    b8ea:	1dfb      	adds	r3, r7, #7
    b8ec:	781b      	ldrb	r3, [r3, #0]
    b8ee:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    b8f0:	1dfb      	adds	r3, r7, #7
    b8f2:	781b      	ldrb	r3, [r3, #0]
    b8f4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    b8f6:	683b      	ldr	r3, [r7, #0]
    b8f8:	781b      	ldrb	r3, [r3, #0]
    b8fa:	021b      	lsls	r3, r3, #8
    b8fc:	001a      	movs	r2, r3
    b8fe:	697b      	ldr	r3, [r7, #20]
    b900:	4313      	orrs	r3, r2
    b902:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    b904:	683b      	ldr	r3, [r7, #0]
    b906:	785b      	ldrb	r3, [r3, #1]
    b908:	2b00      	cmp	r3, #0
    b90a:	d004      	beq.n	b916 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    b90c:	697b      	ldr	r3, [r7, #20]
    b90e:	2280      	movs	r2, #128	; 0x80
    b910:	02d2      	lsls	r2, r2, #11
    b912:	4313      	orrs	r3, r2
    b914:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    b916:	683b      	ldr	r3, [r7, #0]
    b918:	7a5b      	ldrb	r3, [r3, #9]
    b91a:	2b00      	cmp	r3, #0
    b91c:	d004      	beq.n	b928 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    b91e:	697b      	ldr	r3, [r7, #20]
    b920:	2280      	movs	r2, #128	; 0x80
    b922:	0312      	lsls	r2, r2, #12
    b924:	4313      	orrs	r3, r2
    b926:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    b928:	683b      	ldr	r3, [r7, #0]
    b92a:	685b      	ldr	r3, [r3, #4]
    b92c:	2b01      	cmp	r3, #1
    b92e:	d92c      	bls.n	b98a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    b930:	683b      	ldr	r3, [r7, #0]
    b932:	685a      	ldr	r2, [r3, #4]
    b934:	683b      	ldr	r3, [r7, #0]
    b936:	685b      	ldr	r3, [r3, #4]
    b938:	3b01      	subs	r3, #1
    b93a:	4013      	ands	r3, r2
    b93c:	d11a      	bne.n	b974 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    b93e:	2300      	movs	r3, #0
    b940:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    b942:	2302      	movs	r3, #2
    b944:	60bb      	str	r3, [r7, #8]
    b946:	e005      	b.n	b954 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    b948:	68fb      	ldr	r3, [r7, #12]
    b94a:	3301      	adds	r3, #1
    b94c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    b94e:	68bb      	ldr	r3, [r7, #8]
    b950:	005b      	lsls	r3, r3, #1
    b952:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    b954:	683b      	ldr	r3, [r7, #0]
    b956:	685a      	ldr	r2, [r3, #4]
    b958:	68bb      	ldr	r3, [r7, #8]
    b95a:	429a      	cmp	r2, r3
    b95c:	d8f4      	bhi.n	b948 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    b95e:	68fb      	ldr	r3, [r7, #12]
    b960:	021b      	lsls	r3, r3, #8
    b962:	693a      	ldr	r2, [r7, #16]
    b964:	4313      	orrs	r3, r2
    b966:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    b968:	697b      	ldr	r3, [r7, #20]
    b96a:	2280      	movs	r2, #128	; 0x80
    b96c:	0352      	lsls	r2, r2, #13
    b96e:	4313      	orrs	r3, r2
    b970:	617b      	str	r3, [r7, #20]
    b972:	e00a      	b.n	b98a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    b974:	683b      	ldr	r3, [r7, #0]
    b976:	685b      	ldr	r3, [r3, #4]
    b978:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    b97a:	693a      	ldr	r2, [r7, #16]
    b97c:	4313      	orrs	r3, r2
    b97e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    b980:	697b      	ldr	r3, [r7, #20]
    b982:	2280      	movs	r2, #128	; 0x80
    b984:	0292      	lsls	r2, r2, #10
    b986:	4313      	orrs	r3, r2
    b988:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    b98a:	683b      	ldr	r3, [r7, #0]
    b98c:	7a1b      	ldrb	r3, [r3, #8]
    b98e:	2b00      	cmp	r3, #0
    b990:	d004      	beq.n	b99c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    b992:	697b      	ldr	r3, [r7, #20]
    b994:	2280      	movs	r2, #128	; 0x80
    b996:	0392      	lsls	r2, r2, #14
    b998:	4313      	orrs	r3, r2
    b99a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    b99c:	46c0      	nop			; (mov r8, r8)
    b99e:	4b13      	ldr	r3, [pc, #76]	; (b9ec <system_gclk_gen_set_config+0x110>)
    b9a0:	4798      	blx	r3
    b9a2:	1e03      	subs	r3, r0, #0
    b9a4:	d1fb      	bne.n	b99e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    b9a6:	4b12      	ldr	r3, [pc, #72]	; (b9f0 <system_gclk_gen_set_config+0x114>)
    b9a8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    b9aa:	4a12      	ldr	r2, [pc, #72]	; (b9f4 <system_gclk_gen_set_config+0x118>)
    b9ac:	1dfb      	adds	r3, r7, #7
    b9ae:	781b      	ldrb	r3, [r3, #0]
    b9b0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    b9b2:	46c0      	nop			; (mov r8, r8)
    b9b4:	4b0d      	ldr	r3, [pc, #52]	; (b9ec <system_gclk_gen_set_config+0x110>)
    b9b6:	4798      	blx	r3
    b9b8:	1e03      	subs	r3, r0, #0
    b9ba:	d1fb      	bne.n	b9b4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    b9bc:	4b0e      	ldr	r3, [pc, #56]	; (b9f8 <system_gclk_gen_set_config+0x11c>)
    b9be:	693a      	ldr	r2, [r7, #16]
    b9c0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    b9c2:	46c0      	nop			; (mov r8, r8)
    b9c4:	4b09      	ldr	r3, [pc, #36]	; (b9ec <system_gclk_gen_set_config+0x110>)
    b9c6:	4798      	blx	r3
    b9c8:	1e03      	subs	r3, r0, #0
    b9ca:	d1fb      	bne.n	b9c4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    b9cc:	4b0a      	ldr	r3, [pc, #40]	; (b9f8 <system_gclk_gen_set_config+0x11c>)
    b9ce:	4a0a      	ldr	r2, [pc, #40]	; (b9f8 <system_gclk_gen_set_config+0x11c>)
    b9d0:	6851      	ldr	r1, [r2, #4]
    b9d2:	2280      	movs	r2, #128	; 0x80
    b9d4:	0252      	lsls	r2, r2, #9
    b9d6:	4011      	ands	r1, r2
    b9d8:	697a      	ldr	r2, [r7, #20]
    b9da:	430a      	orrs	r2, r1
    b9dc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    b9de:	4b07      	ldr	r3, [pc, #28]	; (b9fc <system_gclk_gen_set_config+0x120>)
    b9e0:	4798      	blx	r3
}
    b9e2:	46c0      	nop			; (mov r8, r8)
    b9e4:	46bd      	mov	sp, r7
    b9e6:	b006      	add	sp, #24
    b9e8:	bd80      	pop	{r7, pc}
    b9ea:	46c0      	nop			; (mov r8, r8)
    b9ec:	0000b88d 	.word	0x0000b88d
    b9f0:	0000b865 	.word	0x0000b865
    b9f4:	40000c08 	.word	0x40000c08
    b9f8:	40000c00 	.word	0x40000c00
    b9fc:	0000b879 	.word	0x0000b879

0000ba00 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    ba00:	b580      	push	{r7, lr}
    ba02:	b082      	sub	sp, #8
    ba04:	af00      	add	r7, sp, #0
    ba06:	0002      	movs	r2, r0
    ba08:	1dfb      	adds	r3, r7, #7
    ba0a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    ba0c:	46c0      	nop			; (mov r8, r8)
    ba0e:	4b0e      	ldr	r3, [pc, #56]	; (ba48 <system_gclk_gen_enable+0x48>)
    ba10:	4798      	blx	r3
    ba12:	1e03      	subs	r3, r0, #0
    ba14:	d1fb      	bne.n	ba0e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ba16:	4b0d      	ldr	r3, [pc, #52]	; (ba4c <system_gclk_gen_enable+0x4c>)
    ba18:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ba1a:	4a0d      	ldr	r2, [pc, #52]	; (ba50 <system_gclk_gen_enable+0x50>)
    ba1c:	1dfb      	adds	r3, r7, #7
    ba1e:	781b      	ldrb	r3, [r3, #0]
    ba20:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ba22:	46c0      	nop			; (mov r8, r8)
    ba24:	4b08      	ldr	r3, [pc, #32]	; (ba48 <system_gclk_gen_enable+0x48>)
    ba26:	4798      	blx	r3
    ba28:	1e03      	subs	r3, r0, #0
    ba2a:	d1fb      	bne.n	ba24 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    ba2c:	4b09      	ldr	r3, [pc, #36]	; (ba54 <system_gclk_gen_enable+0x54>)
    ba2e:	4a09      	ldr	r2, [pc, #36]	; (ba54 <system_gclk_gen_enable+0x54>)
    ba30:	6852      	ldr	r2, [r2, #4]
    ba32:	2180      	movs	r1, #128	; 0x80
    ba34:	0249      	lsls	r1, r1, #9
    ba36:	430a      	orrs	r2, r1
    ba38:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    ba3a:	4b07      	ldr	r3, [pc, #28]	; (ba58 <system_gclk_gen_enable+0x58>)
    ba3c:	4798      	blx	r3
}
    ba3e:	46c0      	nop			; (mov r8, r8)
    ba40:	46bd      	mov	sp, r7
    ba42:	b002      	add	sp, #8
    ba44:	bd80      	pop	{r7, pc}
    ba46:	46c0      	nop			; (mov r8, r8)
    ba48:	0000b88d 	.word	0x0000b88d
    ba4c:	0000b865 	.word	0x0000b865
    ba50:	40000c04 	.word	0x40000c04
    ba54:	40000c00 	.word	0x40000c00
    ba58:	0000b879 	.word	0x0000b879

0000ba5c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    ba5c:	b580      	push	{r7, lr}
    ba5e:	b086      	sub	sp, #24
    ba60:	af00      	add	r7, sp, #0
    ba62:	0002      	movs	r2, r0
    ba64:	1dfb      	adds	r3, r7, #7
    ba66:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    ba68:	46c0      	nop			; (mov r8, r8)
    ba6a:	4b2a      	ldr	r3, [pc, #168]	; (bb14 <system_gclk_gen_get_hz+0xb8>)
    ba6c:	4798      	blx	r3
    ba6e:	1e03      	subs	r3, r0, #0
    ba70:	d1fb      	bne.n	ba6a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ba72:	4b29      	ldr	r3, [pc, #164]	; (bb18 <system_gclk_gen_get_hz+0xbc>)
    ba74:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ba76:	4a29      	ldr	r2, [pc, #164]	; (bb1c <system_gclk_gen_get_hz+0xc0>)
    ba78:	1dfb      	adds	r3, r7, #7
    ba7a:	781b      	ldrb	r3, [r3, #0]
    ba7c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ba7e:	46c0      	nop			; (mov r8, r8)
    ba80:	4b24      	ldr	r3, [pc, #144]	; (bb14 <system_gclk_gen_get_hz+0xb8>)
    ba82:	4798      	blx	r3
    ba84:	1e03      	subs	r3, r0, #0
    ba86:	d1fb      	bne.n	ba80 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    ba88:	4b25      	ldr	r3, [pc, #148]	; (bb20 <system_gclk_gen_get_hz+0xc4>)
    ba8a:	685b      	ldr	r3, [r3, #4]
    ba8c:	04db      	lsls	r3, r3, #19
    ba8e:	0edb      	lsrs	r3, r3, #27
    ba90:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    ba92:	0018      	movs	r0, r3
    ba94:	4b23      	ldr	r3, [pc, #140]	; (bb24 <system_gclk_gen_get_hz+0xc8>)
    ba96:	4798      	blx	r3
    ba98:	0003      	movs	r3, r0
    ba9a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ba9c:	4a1f      	ldr	r2, [pc, #124]	; (bb1c <system_gclk_gen_get_hz+0xc0>)
    ba9e:	1dfb      	adds	r3, r7, #7
    baa0:	781b      	ldrb	r3, [r3, #0]
    baa2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    baa4:	4b1e      	ldr	r3, [pc, #120]	; (bb20 <system_gclk_gen_get_hz+0xc4>)
    baa6:	685b      	ldr	r3, [r3, #4]
    baa8:	02db      	lsls	r3, r3, #11
    baaa:	0fdb      	lsrs	r3, r3, #31
    baac:	b2da      	uxtb	r2, r3
    baae:	2313      	movs	r3, #19
    bab0:	18fb      	adds	r3, r7, r3
    bab2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    bab4:	4a1c      	ldr	r2, [pc, #112]	; (bb28 <system_gclk_gen_get_hz+0xcc>)
    bab6:	1dfb      	adds	r3, r7, #7
    bab8:	781b      	ldrb	r3, [r3, #0]
    baba:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    babc:	46c0      	nop			; (mov r8, r8)
    babe:	4b15      	ldr	r3, [pc, #84]	; (bb14 <system_gclk_gen_get_hz+0xb8>)
    bac0:	4798      	blx	r3
    bac2:	1e03      	subs	r3, r0, #0
    bac4:	d1fb      	bne.n	babe <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    bac6:	4b16      	ldr	r3, [pc, #88]	; (bb20 <system_gclk_gen_get_hz+0xc4>)
    bac8:	689b      	ldr	r3, [r3, #8]
    baca:	021b      	lsls	r3, r3, #8
    bacc:	0c1b      	lsrs	r3, r3, #16
    bace:	b29b      	uxth	r3, r3
    bad0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    bad2:	4b16      	ldr	r3, [pc, #88]	; (bb2c <system_gclk_gen_get_hz+0xd0>)
    bad4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    bad6:	2313      	movs	r3, #19
    bad8:	18fb      	adds	r3, r7, r3
    bada:	781b      	ldrb	r3, [r3, #0]
    badc:	2b00      	cmp	r3, #0
    bade:	d109      	bne.n	baf4 <system_gclk_gen_get_hz+0x98>
    bae0:	68fb      	ldr	r3, [r7, #12]
    bae2:	2b01      	cmp	r3, #1
    bae4:	d906      	bls.n	baf4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    bae6:	4b12      	ldr	r3, [pc, #72]	; (bb30 <system_gclk_gen_get_hz+0xd4>)
    bae8:	68f9      	ldr	r1, [r7, #12]
    baea:	6978      	ldr	r0, [r7, #20]
    baec:	4798      	blx	r3
    baee:	0003      	movs	r3, r0
    baf0:	617b      	str	r3, [r7, #20]
    baf2:	e00a      	b.n	bb0a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    baf4:	2313      	movs	r3, #19
    baf6:	18fb      	adds	r3, r7, r3
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	2b00      	cmp	r3, #0
    bafc:	d005      	beq.n	bb0a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    bafe:	68fb      	ldr	r3, [r7, #12]
    bb00:	3301      	adds	r3, #1
    bb02:	697a      	ldr	r2, [r7, #20]
    bb04:	40da      	lsrs	r2, r3
    bb06:	0013      	movs	r3, r2
    bb08:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    bb0a:	697b      	ldr	r3, [r7, #20]
}
    bb0c:	0018      	movs	r0, r3
    bb0e:	46bd      	mov	sp, r7
    bb10:	b006      	add	sp, #24
    bb12:	bd80      	pop	{r7, pc}
    bb14:	0000b88d 	.word	0x0000b88d
    bb18:	0000b865 	.word	0x0000b865
    bb1c:	40000c04 	.word	0x40000c04
    bb20:	40000c00 	.word	0x40000c00
    bb24:	0000b1bd 	.word	0x0000b1bd
    bb28:	40000c08 	.word	0x40000c08
    bb2c:	0000b879 	.word	0x0000b879
    bb30:	0000c405 	.word	0x0000c405

0000bb34 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    bb34:	b580      	push	{r7, lr}
    bb36:	b084      	sub	sp, #16
    bb38:	af00      	add	r7, sp, #0
    bb3a:	0002      	movs	r2, r0
    bb3c:	6039      	str	r1, [r7, #0]
    bb3e:	1dfb      	adds	r3, r7, #7
    bb40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    bb42:	1dfb      	adds	r3, r7, #7
    bb44:	781b      	ldrb	r3, [r3, #0]
    bb46:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    bb48:	683b      	ldr	r3, [r7, #0]
    bb4a:	781b      	ldrb	r3, [r3, #0]
    bb4c:	021b      	lsls	r3, r3, #8
    bb4e:	001a      	movs	r2, r3
    bb50:	68fb      	ldr	r3, [r7, #12]
    bb52:	4313      	orrs	r3, r2
    bb54:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    bb56:	1dfb      	adds	r3, r7, #7
    bb58:	781b      	ldrb	r3, [r3, #0]
    bb5a:	0018      	movs	r0, r3
    bb5c:	4b04      	ldr	r3, [pc, #16]	; (bb70 <system_gclk_chan_set_config+0x3c>)
    bb5e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    bb60:	4b04      	ldr	r3, [pc, #16]	; (bb74 <system_gclk_chan_set_config+0x40>)
    bb62:	68fa      	ldr	r2, [r7, #12]
    bb64:	b292      	uxth	r2, r2
    bb66:	805a      	strh	r2, [r3, #2]
}
    bb68:	46c0      	nop			; (mov r8, r8)
    bb6a:	46bd      	mov	sp, r7
    bb6c:	b004      	add	sp, #16
    bb6e:	bd80      	pop	{r7, pc}
    bb70:	0000bbc1 	.word	0x0000bbc1
    bb74:	40000c00 	.word	0x40000c00

0000bb78 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    bb78:	b580      	push	{r7, lr}
    bb7a:	b082      	sub	sp, #8
    bb7c:	af00      	add	r7, sp, #0
    bb7e:	0002      	movs	r2, r0
    bb80:	1dfb      	adds	r3, r7, #7
    bb82:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    bb84:	4b0a      	ldr	r3, [pc, #40]	; (bbb0 <system_gclk_chan_enable+0x38>)
    bb86:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bb88:	4a0a      	ldr	r2, [pc, #40]	; (bbb4 <system_gclk_chan_enable+0x3c>)
    bb8a:	1dfb      	adds	r3, r7, #7
    bb8c:	781b      	ldrb	r3, [r3, #0]
    bb8e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    bb90:	4909      	ldr	r1, [pc, #36]	; (bbb8 <system_gclk_chan_enable+0x40>)
    bb92:	4b09      	ldr	r3, [pc, #36]	; (bbb8 <system_gclk_chan_enable+0x40>)
    bb94:	885b      	ldrh	r3, [r3, #2]
    bb96:	b29b      	uxth	r3, r3
    bb98:	2280      	movs	r2, #128	; 0x80
    bb9a:	01d2      	lsls	r2, r2, #7
    bb9c:	4313      	orrs	r3, r2
    bb9e:	b29b      	uxth	r3, r3
    bba0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    bba2:	4b06      	ldr	r3, [pc, #24]	; (bbbc <system_gclk_chan_enable+0x44>)
    bba4:	4798      	blx	r3
}
    bba6:	46c0      	nop			; (mov r8, r8)
    bba8:	46bd      	mov	sp, r7
    bbaa:	b002      	add	sp, #8
    bbac:	bd80      	pop	{r7, pc}
    bbae:	46c0      	nop			; (mov r8, r8)
    bbb0:	0000b865 	.word	0x0000b865
    bbb4:	40000c02 	.word	0x40000c02
    bbb8:	40000c00 	.word	0x40000c00
    bbbc:	0000b879 	.word	0x0000b879

0000bbc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    bbc0:	b580      	push	{r7, lr}
    bbc2:	b084      	sub	sp, #16
    bbc4:	af00      	add	r7, sp, #0
    bbc6:	0002      	movs	r2, r0
    bbc8:	1dfb      	adds	r3, r7, #7
    bbca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    bbcc:	4b1c      	ldr	r3, [pc, #112]	; (bc40 <system_gclk_chan_disable+0x80>)
    bbce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bbd0:	4a1c      	ldr	r2, [pc, #112]	; (bc44 <system_gclk_chan_disable+0x84>)
    bbd2:	1dfb      	adds	r3, r7, #7
    bbd4:	781b      	ldrb	r3, [r3, #0]
    bbd6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    bbd8:	4b1b      	ldr	r3, [pc, #108]	; (bc48 <system_gclk_chan_disable+0x88>)
    bbda:	885b      	ldrh	r3, [r3, #2]
    bbdc:	051b      	lsls	r3, r3, #20
    bbde:	0f1b      	lsrs	r3, r3, #28
    bbe0:	b2db      	uxtb	r3, r3
    bbe2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    bbe4:	4a18      	ldr	r2, [pc, #96]	; (bc48 <system_gclk_chan_disable+0x88>)
    bbe6:	8853      	ldrh	r3, [r2, #2]
    bbe8:	4918      	ldr	r1, [pc, #96]	; (bc4c <system_gclk_chan_disable+0x8c>)
    bbea:	400b      	ands	r3, r1
    bbec:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    bbee:	4a16      	ldr	r2, [pc, #88]	; (bc48 <system_gclk_chan_disable+0x88>)
    bbf0:	4b15      	ldr	r3, [pc, #84]	; (bc48 <system_gclk_chan_disable+0x88>)
    bbf2:	885b      	ldrh	r3, [r3, #2]
    bbf4:	b29b      	uxth	r3, r3
    bbf6:	4916      	ldr	r1, [pc, #88]	; (bc50 <system_gclk_chan_disable+0x90>)
    bbf8:	400b      	ands	r3, r1
    bbfa:	b29b      	uxth	r3, r3
    bbfc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    bbfe:	46c0      	nop			; (mov r8, r8)
    bc00:	4b11      	ldr	r3, [pc, #68]	; (bc48 <system_gclk_chan_disable+0x88>)
    bc02:	885b      	ldrh	r3, [r3, #2]
    bc04:	b29b      	uxth	r3, r3
    bc06:	001a      	movs	r2, r3
    bc08:	2380      	movs	r3, #128	; 0x80
    bc0a:	01db      	lsls	r3, r3, #7
    bc0c:	4013      	ands	r3, r2
    bc0e:	d1f7      	bne.n	bc00 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    bc10:	4a0d      	ldr	r2, [pc, #52]	; (bc48 <system_gclk_chan_disable+0x88>)
    bc12:	68fb      	ldr	r3, [r7, #12]
    bc14:	b2db      	uxtb	r3, r3
    bc16:	1c19      	adds	r1, r3, #0
    bc18:	230f      	movs	r3, #15
    bc1a:	400b      	ands	r3, r1
    bc1c:	b2d9      	uxtb	r1, r3
    bc1e:	8853      	ldrh	r3, [r2, #2]
    bc20:	1c08      	adds	r0, r1, #0
    bc22:	210f      	movs	r1, #15
    bc24:	4001      	ands	r1, r0
    bc26:	0208      	lsls	r0, r1, #8
    bc28:	4908      	ldr	r1, [pc, #32]	; (bc4c <system_gclk_chan_disable+0x8c>)
    bc2a:	400b      	ands	r3, r1
    bc2c:	1c19      	adds	r1, r3, #0
    bc2e:	1c03      	adds	r3, r0, #0
    bc30:	430b      	orrs	r3, r1
    bc32:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    bc34:	4b07      	ldr	r3, [pc, #28]	; (bc54 <system_gclk_chan_disable+0x94>)
    bc36:	4798      	blx	r3
}
    bc38:	46c0      	nop			; (mov r8, r8)
    bc3a:	46bd      	mov	sp, r7
    bc3c:	b004      	add	sp, #16
    bc3e:	bd80      	pop	{r7, pc}
    bc40:	0000b865 	.word	0x0000b865
    bc44:	40000c02 	.word	0x40000c02
    bc48:	40000c00 	.word	0x40000c00
    bc4c:	fffff0ff 	.word	0xfffff0ff
    bc50:	ffffbfff 	.word	0xffffbfff
    bc54:	0000b879 	.word	0x0000b879

0000bc58 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    bc58:	b580      	push	{r7, lr}
    bc5a:	b084      	sub	sp, #16
    bc5c:	af00      	add	r7, sp, #0
    bc5e:	0002      	movs	r2, r0
    bc60:	1dfb      	adds	r3, r7, #7
    bc62:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    bc64:	4b0d      	ldr	r3, [pc, #52]	; (bc9c <system_gclk_chan_get_hz+0x44>)
    bc66:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bc68:	4a0d      	ldr	r2, [pc, #52]	; (bca0 <system_gclk_chan_get_hz+0x48>)
    bc6a:	1dfb      	adds	r3, r7, #7
    bc6c:	781b      	ldrb	r3, [r3, #0]
    bc6e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    bc70:	4b0c      	ldr	r3, [pc, #48]	; (bca4 <system_gclk_chan_get_hz+0x4c>)
    bc72:	885b      	ldrh	r3, [r3, #2]
    bc74:	051b      	lsls	r3, r3, #20
    bc76:	0f1b      	lsrs	r3, r3, #28
    bc78:	b2da      	uxtb	r2, r3
    bc7a:	230f      	movs	r3, #15
    bc7c:	18fb      	adds	r3, r7, r3
    bc7e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    bc80:	4b09      	ldr	r3, [pc, #36]	; (bca8 <system_gclk_chan_get_hz+0x50>)
    bc82:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    bc84:	230f      	movs	r3, #15
    bc86:	18fb      	adds	r3, r7, r3
    bc88:	781b      	ldrb	r3, [r3, #0]
    bc8a:	0018      	movs	r0, r3
    bc8c:	4b07      	ldr	r3, [pc, #28]	; (bcac <system_gclk_chan_get_hz+0x54>)
    bc8e:	4798      	blx	r3
    bc90:	0003      	movs	r3, r0
}
    bc92:	0018      	movs	r0, r3
    bc94:	46bd      	mov	sp, r7
    bc96:	b004      	add	sp, #16
    bc98:	bd80      	pop	{r7, pc}
    bc9a:	46c0      	nop			; (mov r8, r8)
    bc9c:	0000b865 	.word	0x0000b865
    bca0:	40000c02 	.word	0x40000c02
    bca4:	40000c00 	.word	0x40000c00
    bca8:	0000b879 	.word	0x0000b879
    bcac:	0000ba5d 	.word	0x0000ba5d

0000bcb0 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
    bcb0:	b580      	push	{r7, lr}
    bcb2:	b084      	sub	sp, #16
    bcb4:	af00      	add	r7, sp, #0
    bcb6:	0002      	movs	r2, r0
    bcb8:	1dfb      	adds	r3, r7, #7
    bcba:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
    bcbc:	230f      	movs	r3, #15
    bcbe:	18fb      	adds	r3, r7, r3
    bcc0:	2200      	movs	r2, #0
    bcc2:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    bcc4:	1dfb      	adds	r3, r7, #7
    bcc6:	781b      	ldrb	r3, [r3, #0]
    bcc8:	2b7f      	cmp	r3, #127	; 0x7f
    bcca:	d80b      	bhi.n	bce4 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
    bccc:	4a13      	ldr	r2, [pc, #76]	; (bd1c <system_interrupt_clear_pending+0x6c>)
    bcce:	1dfb      	adds	r3, r7, #7
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	b25b      	sxtb	r3, r3
    bcd4:	2101      	movs	r1, #1
    bcd6:	4099      	lsls	r1, r3
    bcd8:	000b      	movs	r3, r1
    bcda:	0019      	movs	r1, r3
    bcdc:	23c0      	movs	r3, #192	; 0xc0
    bcde:	005b      	lsls	r3, r3, #1
    bce0:	50d1      	str	r1, [r2, r3]
    bce2:	e014      	b.n	bd0e <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
    bce4:	1dfb      	adds	r3, r7, #7
    bce6:	781b      	ldrb	r3, [r3, #0]
    bce8:	b25b      	sxtb	r3, r3
    bcea:	330e      	adds	r3, #14
    bcec:	d101      	bne.n	bcf2 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
    bcee:	2317      	movs	r3, #23
    bcf0:	e010      	b.n	bd14 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    bcf2:	1dfb      	adds	r3, r7, #7
    bcf4:	781b      	ldrb	r3, [r3, #0]
    bcf6:	b25b      	sxtb	r3, r3
    bcf8:	3301      	adds	r3, #1
    bcfa:	d104      	bne.n	bd06 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    bcfc:	4b08      	ldr	r3, [pc, #32]	; (bd20 <system_interrupt_clear_pending+0x70>)
    bcfe:	2280      	movs	r2, #128	; 0x80
    bd00:	0492      	lsls	r2, r2, #18
    bd02:	605a      	str	r2, [r3, #4]
    bd04:	e003      	b.n	bd0e <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
    bd06:	230f      	movs	r3, #15
    bd08:	18fb      	adds	r3, r7, r3
    bd0a:	2217      	movs	r2, #23
    bd0c:	701a      	strb	r2, [r3, #0]
	}

	return status;
    bd0e:	230f      	movs	r3, #15
    bd10:	18fb      	adds	r3, r7, r3
    bd12:	781b      	ldrb	r3, [r3, #0]
}
    bd14:	0018      	movs	r0, r3
    bd16:	46bd      	mov	sp, r7
    bd18:	b004      	add	sp, #16
    bd1a:	bd80      	pop	{r7, pc}
    bd1c:	e000e100 	.word	0xe000e100
    bd20:	e000ed00 	.word	0xe000ed00

0000bd24 <system_pinmux_get_group_from_gpio_pin>:
{
    bd24:	b580      	push	{r7, lr}
    bd26:	b084      	sub	sp, #16
    bd28:	af00      	add	r7, sp, #0
    bd2a:	0002      	movs	r2, r0
    bd2c:	1dfb      	adds	r3, r7, #7
    bd2e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    bd30:	230f      	movs	r3, #15
    bd32:	18fb      	adds	r3, r7, r3
    bd34:	1dfa      	adds	r2, r7, #7
    bd36:	7812      	ldrb	r2, [r2, #0]
    bd38:	09d2      	lsrs	r2, r2, #7
    bd3a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    bd3c:	230e      	movs	r3, #14
    bd3e:	18fb      	adds	r3, r7, r3
    bd40:	1dfa      	adds	r2, r7, #7
    bd42:	7812      	ldrb	r2, [r2, #0]
    bd44:	0952      	lsrs	r2, r2, #5
    bd46:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    bd48:	4b0d      	ldr	r3, [pc, #52]	; (bd80 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    bd4a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    bd4c:	230f      	movs	r3, #15
    bd4e:	18fb      	adds	r3, r7, r3
    bd50:	781b      	ldrb	r3, [r3, #0]
    bd52:	2b00      	cmp	r3, #0
    bd54:	d10f      	bne.n	bd76 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    bd56:	230f      	movs	r3, #15
    bd58:	18fb      	adds	r3, r7, r3
    bd5a:	781b      	ldrb	r3, [r3, #0]
    bd5c:	009b      	lsls	r3, r3, #2
    bd5e:	2210      	movs	r2, #16
    bd60:	4694      	mov	ip, r2
    bd62:	44bc      	add	ip, r7
    bd64:	4463      	add	r3, ip
    bd66:	3b08      	subs	r3, #8
    bd68:	681a      	ldr	r2, [r3, #0]
    bd6a:	230e      	movs	r3, #14
    bd6c:	18fb      	adds	r3, r7, r3
    bd6e:	781b      	ldrb	r3, [r3, #0]
    bd70:	01db      	lsls	r3, r3, #7
    bd72:	18d3      	adds	r3, r2, r3
    bd74:	e000      	b.n	bd78 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    bd76:	2300      	movs	r3, #0
}
    bd78:	0018      	movs	r0, r3
    bd7a:	46bd      	mov	sp, r7
    bd7c:	b004      	add	sp, #16
    bd7e:	bd80      	pop	{r7, pc}
    bd80:	41004400 	.word	0x41004400

0000bd84 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    bd84:	b580      	push	{r7, lr}
    bd86:	b088      	sub	sp, #32
    bd88:	af00      	add	r7, sp, #0
    bd8a:	60f8      	str	r0, [r7, #12]
    bd8c:	60b9      	str	r1, [r7, #8]
    bd8e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    bd90:	2300      	movs	r3, #0
    bd92:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    bd94:	687b      	ldr	r3, [r7, #4]
    bd96:	78db      	ldrb	r3, [r3, #3]
    bd98:	2201      	movs	r2, #1
    bd9a:	4053      	eors	r3, r2
    bd9c:	b2db      	uxtb	r3, r3
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d035      	beq.n	be0e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    bda2:	687b      	ldr	r3, [r7, #4]
    bda4:	781b      	ldrb	r3, [r3, #0]
    bda6:	2b80      	cmp	r3, #128	; 0x80
    bda8:	d00b      	beq.n	bdc2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    bdaa:	69fb      	ldr	r3, [r7, #28]
    bdac:	2280      	movs	r2, #128	; 0x80
    bdae:	0252      	lsls	r2, r2, #9
    bdb0:	4313      	orrs	r3, r2
    bdb2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    bdb4:	687b      	ldr	r3, [r7, #4]
    bdb6:	781b      	ldrb	r3, [r3, #0]
    bdb8:	061b      	lsls	r3, r3, #24
    bdba:	001a      	movs	r2, r3
    bdbc:	69fb      	ldr	r3, [r7, #28]
    bdbe:	4313      	orrs	r3, r2
    bdc0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    bdc2:	687b      	ldr	r3, [r7, #4]
    bdc4:	785b      	ldrb	r3, [r3, #1]
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	d003      	beq.n	bdd2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    bdca:	687b      	ldr	r3, [r7, #4]
    bdcc:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    bdce:	2b02      	cmp	r3, #2
    bdd0:	d110      	bne.n	bdf4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    bdd2:	69fb      	ldr	r3, [r7, #28]
    bdd4:	2280      	movs	r2, #128	; 0x80
    bdd6:	0292      	lsls	r2, r2, #10
    bdd8:	4313      	orrs	r3, r2
    bdda:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    bddc:	687b      	ldr	r3, [r7, #4]
    bdde:	789b      	ldrb	r3, [r3, #2]
    bde0:	2b00      	cmp	r3, #0
    bde2:	d004      	beq.n	bdee <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    bde4:	69fb      	ldr	r3, [r7, #28]
    bde6:	2280      	movs	r2, #128	; 0x80
    bde8:	02d2      	lsls	r2, r2, #11
    bdea:	4313      	orrs	r3, r2
    bdec:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    bdee:	68fb      	ldr	r3, [r7, #12]
    bdf0:	68ba      	ldr	r2, [r7, #8]
    bdf2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    bdf4:	687b      	ldr	r3, [r7, #4]
    bdf6:	785b      	ldrb	r3, [r3, #1]
    bdf8:	2b01      	cmp	r3, #1
    bdfa:	d003      	beq.n	be04 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    bdfc:	687b      	ldr	r3, [r7, #4]
    bdfe:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    be00:	2b02      	cmp	r3, #2
    be02:	d107      	bne.n	be14 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    be04:	69fb      	ldr	r3, [r7, #28]
    be06:	4a22      	ldr	r2, [pc, #136]	; (be90 <_system_pinmux_config+0x10c>)
    be08:	4013      	ands	r3, r2
    be0a:	61fb      	str	r3, [r7, #28]
    be0c:	e002      	b.n	be14 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    be0e:	68fb      	ldr	r3, [r7, #12]
    be10:	68ba      	ldr	r2, [r7, #8]
    be12:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    be14:	68bb      	ldr	r3, [r7, #8]
    be16:	041b      	lsls	r3, r3, #16
    be18:	0c1b      	lsrs	r3, r3, #16
    be1a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    be1c:	68bb      	ldr	r3, [r7, #8]
    be1e:	0c1b      	lsrs	r3, r3, #16
    be20:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    be22:	69ba      	ldr	r2, [r7, #24]
    be24:	69fb      	ldr	r3, [r7, #28]
    be26:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    be28:	22a0      	movs	r2, #160	; 0xa0
    be2a:	05d2      	lsls	r2, r2, #23
    be2c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    be2e:	68fb      	ldr	r3, [r7, #12]
    be30:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    be32:	697a      	ldr	r2, [r7, #20]
    be34:	69fb      	ldr	r3, [r7, #28]
    be36:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    be38:	22d0      	movs	r2, #208	; 0xd0
    be3a:	0612      	lsls	r2, r2, #24
    be3c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    be3e:	68fb      	ldr	r3, [r7, #12]
    be40:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    be42:	687b      	ldr	r3, [r7, #4]
    be44:	78db      	ldrb	r3, [r3, #3]
    be46:	2201      	movs	r2, #1
    be48:	4053      	eors	r3, r2
    be4a:	b2db      	uxtb	r3, r3
    be4c:	2b00      	cmp	r3, #0
    be4e:	d01a      	beq.n	be86 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    be50:	69fa      	ldr	r2, [r7, #28]
    be52:	2380      	movs	r3, #128	; 0x80
    be54:	02db      	lsls	r3, r3, #11
    be56:	4013      	ands	r3, r2
    be58:	d00a      	beq.n	be70 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    be5a:	687b      	ldr	r3, [r7, #4]
    be5c:	789b      	ldrb	r3, [r3, #2]
    be5e:	2b01      	cmp	r3, #1
    be60:	d103      	bne.n	be6a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    be62:	68fb      	ldr	r3, [r7, #12]
    be64:	68ba      	ldr	r2, [r7, #8]
    be66:	619a      	str	r2, [r3, #24]
    be68:	e002      	b.n	be70 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    be6a:	68fb      	ldr	r3, [r7, #12]
    be6c:	68ba      	ldr	r2, [r7, #8]
    be6e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    be70:	687b      	ldr	r3, [r7, #4]
    be72:	785b      	ldrb	r3, [r3, #1]
    be74:	2b01      	cmp	r3, #1
    be76:	d003      	beq.n	be80 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    be78:	687b      	ldr	r3, [r7, #4]
    be7a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    be7c:	2b02      	cmp	r3, #2
    be7e:	d102      	bne.n	be86 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    be80:	68fb      	ldr	r3, [r7, #12]
    be82:	68ba      	ldr	r2, [r7, #8]
    be84:	609a      	str	r2, [r3, #8]
		}
	}
}
    be86:	46c0      	nop			; (mov r8, r8)
    be88:	46bd      	mov	sp, r7
    be8a:	b008      	add	sp, #32
    be8c:	bd80      	pop	{r7, pc}
    be8e:	46c0      	nop			; (mov r8, r8)
    be90:	fffbffff 	.word	0xfffbffff

0000be94 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    be94:	b580      	push	{r7, lr}
    be96:	b084      	sub	sp, #16
    be98:	af00      	add	r7, sp, #0
    be9a:	0002      	movs	r2, r0
    be9c:	6039      	str	r1, [r7, #0]
    be9e:	1dfb      	adds	r3, r7, #7
    bea0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    bea2:	1dfb      	adds	r3, r7, #7
    bea4:	781b      	ldrb	r3, [r3, #0]
    bea6:	0018      	movs	r0, r3
    bea8:	4b0a      	ldr	r3, [pc, #40]	; (bed4 <system_pinmux_pin_set_config+0x40>)
    beaa:	4798      	blx	r3
    beac:	0003      	movs	r3, r0
    beae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    beb0:	1dfb      	adds	r3, r7, #7
    beb2:	781b      	ldrb	r3, [r3, #0]
    beb4:	221f      	movs	r2, #31
    beb6:	4013      	ands	r3, r2
    beb8:	2201      	movs	r2, #1
    beba:	409a      	lsls	r2, r3
    bebc:	0013      	movs	r3, r2
    bebe:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    bec0:	683a      	ldr	r2, [r7, #0]
    bec2:	68b9      	ldr	r1, [r7, #8]
    bec4:	68fb      	ldr	r3, [r7, #12]
    bec6:	0018      	movs	r0, r3
    bec8:	4b03      	ldr	r3, [pc, #12]	; (bed8 <system_pinmux_pin_set_config+0x44>)
    beca:	4798      	blx	r3
}
    becc:	46c0      	nop			; (mov r8, r8)
    bece:	46bd      	mov	sp, r7
    bed0:	b004      	add	sp, #16
    bed2:	bd80      	pop	{r7, pc}
    bed4:	0000bd25 	.word	0x0000bd25
    bed8:	0000bd85 	.word	0x0000bd85

0000bedc <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    bedc:	b580      	push	{r7, lr}
    bede:	af00      	add	r7, sp, #0
	return;
    bee0:	46c0      	nop			; (mov r8, r8)
}
    bee2:	46bd      	mov	sp, r7
    bee4:	bd80      	pop	{r7, pc}
	...

0000bee8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    bee8:	b580      	push	{r7, lr}
    beea:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    beec:	4b06      	ldr	r3, [pc, #24]	; (bf08 <system_init+0x20>)
    beee:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    bef0:	4b06      	ldr	r3, [pc, #24]	; (bf0c <system_init+0x24>)
    bef2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    bef4:	4b06      	ldr	r3, [pc, #24]	; (bf10 <system_init+0x28>)
    bef6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    bef8:	4b06      	ldr	r3, [pc, #24]	; (bf14 <system_init+0x2c>)
    befa:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    befc:	4b06      	ldr	r3, [pc, #24]	; (bf18 <system_init+0x30>)
    befe:	4798      	blx	r3
}
    bf00:	46c0      	nop			; (mov r8, r8)
    bf02:	46bd      	mov	sp, r7
    bf04:	bd80      	pop	{r7, pc}
    bf06:	46c0      	nop			; (mov r8, r8)
    bf08:	0000b569 	.word	0x0000b569
    bf0c:	000097dd 	.word	0x000097dd
    bf10:	0000bedd 	.word	0x0000bedd
    bf14:	00009a4d 	.word	0x00009a4d
    bf18:	0000bedd 	.word	0x0000bedd

0000bf1c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    bf1c:	b580      	push	{r7, lr}
    bf1e:	af00      	add	r7, sp, #0
    bf20:	2000      	movs	r0, #0
    bf22:	4b02      	ldr	r3, [pc, #8]	; (bf2c <TCC0_Handler+0x10>)
    bf24:	4798      	blx	r3
    bf26:	46c0      	nop			; (mov r8, r8)
    bf28:	46bd      	mov	sp, r7
    bf2a:	bd80      	pop	{r7, pc}
    bf2c:	0000bf59 	.word	0x0000bf59

0000bf30 <TCC1_Handler>:
    bf30:	b580      	push	{r7, lr}
    bf32:	af00      	add	r7, sp, #0
    bf34:	2001      	movs	r0, #1
    bf36:	4b02      	ldr	r3, [pc, #8]	; (bf40 <TCC1_Handler+0x10>)
    bf38:	4798      	blx	r3
    bf3a:	46c0      	nop			; (mov r8, r8)
    bf3c:	46bd      	mov	sp, r7
    bf3e:	bd80      	pop	{r7, pc}
    bf40:	0000bf59 	.word	0x0000bf59

0000bf44 <TCC2_Handler>:
    bf44:	b580      	push	{r7, lr}
    bf46:	af00      	add	r7, sp, #0
    bf48:	2002      	movs	r0, #2
    bf4a:	4b02      	ldr	r3, [pc, #8]	; (bf54 <TCC2_Handler+0x10>)
    bf4c:	4798      	blx	r3
    bf4e:	46c0      	nop			; (mov r8, r8)
    bf50:	46bd      	mov	sp, r7
    bf52:	bd80      	pop	{r7, pc}
    bf54:	0000bf59 	.word	0x0000bf59

0000bf58 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    bf58:	b580      	push	{r7, lr}
    bf5a:	b086      	sub	sp, #24
    bf5c:	af00      	add	r7, sp, #0
    bf5e:	0002      	movs	r2, r0
    bf60:	1dfb      	adds	r3, r7, #7
    bf62:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    bf64:	1dfb      	adds	r3, r7, #7
    bf66:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    bf68:	4b18      	ldr	r3, [pc, #96]	; (bfcc <_tcc_interrupt_handler+0x74>)
    bf6a:	0092      	lsls	r2, r2, #2
    bf6c:	58d3      	ldr	r3, [r2, r3]
    bf6e:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    bf70:	693b      	ldr	r3, [r7, #16]
    bf72:	681b      	ldr	r3, [r3, #0]
    bf74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    bf76:	693b      	ldr	r3, [r7, #16]
    bf78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    bf7a:	401a      	ands	r2, r3
			module->enable_callback_mask);
    bf7c:	693b      	ldr	r3, [r7, #16]
    bf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    bf80:	4013      	ands	r3, r2
    bf82:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bf84:	2300      	movs	r3, #0
    bf86:	617b      	str	r3, [r7, #20]
    bf88:	e019      	b.n	bfbe <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    bf8a:	4b11      	ldr	r3, [pc, #68]	; (bfd0 <_tcc_interrupt_handler+0x78>)
    bf8c:	697a      	ldr	r2, [r7, #20]
    bf8e:	0092      	lsls	r2, r2, #2
    bf90:	58d3      	ldr	r3, [r2, r3]
    bf92:	68fa      	ldr	r2, [r7, #12]
    bf94:	4013      	ands	r3, r2
    bf96:	d00f      	beq.n	bfb8 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    bf98:	693a      	ldr	r2, [r7, #16]
    bf9a:	697b      	ldr	r3, [r7, #20]
    bf9c:	009b      	lsls	r3, r3, #2
    bf9e:	18d3      	adds	r3, r2, r3
    bfa0:	3304      	adds	r3, #4
    bfa2:	681b      	ldr	r3, [r3, #0]
    bfa4:	693a      	ldr	r2, [r7, #16]
    bfa6:	0010      	movs	r0, r2
    bfa8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    bfaa:	693b      	ldr	r3, [r7, #16]
    bfac:	681b      	ldr	r3, [r3, #0]
    bfae:	4a08      	ldr	r2, [pc, #32]	; (bfd0 <_tcc_interrupt_handler+0x78>)
    bfb0:	6979      	ldr	r1, [r7, #20]
    bfb2:	0089      	lsls	r1, r1, #2
    bfb4:	588a      	ldr	r2, [r1, r2]
    bfb6:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bfb8:	697b      	ldr	r3, [r7, #20]
    bfba:	3301      	adds	r3, #1
    bfbc:	617b      	str	r3, [r7, #20]
    bfbe:	697b      	ldr	r3, [r7, #20]
    bfc0:	2b0b      	cmp	r3, #11
    bfc2:	dde2      	ble.n	bf8a <_tcc_interrupt_handler+0x32>
		}
	}
}
    bfc4:	46c0      	nop			; (mov r8, r8)
    bfc6:	46bd      	mov	sp, r7
    bfc8:	b006      	add	sp, #24
    bfca:	bd80      	pop	{r7, pc}
    bfcc:	20004fc0 	.word	0x20004fc0
    bfd0:	00010758 	.word	0x00010758

0000bfd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    bfd4:	b580      	push	{r7, lr}
    bfd6:	b082      	sub	sp, #8
    bfd8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    bfda:	4b2f      	ldr	r3, [pc, #188]	; (c098 <Reset_Handler+0xc4>)
    bfdc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    bfde:	4b2f      	ldr	r3, [pc, #188]	; (c09c <Reset_Handler+0xc8>)
    bfe0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    bfe2:	687a      	ldr	r2, [r7, #4]
    bfe4:	683b      	ldr	r3, [r7, #0]
    bfe6:	429a      	cmp	r2, r3
    bfe8:	d00c      	beq.n	c004 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    bfea:	e007      	b.n	bffc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    bfec:	683b      	ldr	r3, [r7, #0]
    bfee:	1d1a      	adds	r2, r3, #4
    bff0:	603a      	str	r2, [r7, #0]
    bff2:	687a      	ldr	r2, [r7, #4]
    bff4:	1d11      	adds	r1, r2, #4
    bff6:	6079      	str	r1, [r7, #4]
    bff8:	6812      	ldr	r2, [r2, #0]
    bffa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    bffc:	683a      	ldr	r2, [r7, #0]
    bffe:	4b28      	ldr	r3, [pc, #160]	; (c0a0 <Reset_Handler+0xcc>)
    c000:	429a      	cmp	r2, r3
    c002:	d3f3      	bcc.n	bfec <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    c004:	4b27      	ldr	r3, [pc, #156]	; (c0a4 <Reset_Handler+0xd0>)
    c006:	603b      	str	r3, [r7, #0]
    c008:	e004      	b.n	c014 <Reset_Handler+0x40>
                *pDest++ = 0;
    c00a:	683b      	ldr	r3, [r7, #0]
    c00c:	1d1a      	adds	r2, r3, #4
    c00e:	603a      	str	r2, [r7, #0]
    c010:	2200      	movs	r2, #0
    c012:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    c014:	683a      	ldr	r2, [r7, #0]
    c016:	4b24      	ldr	r3, [pc, #144]	; (c0a8 <Reset_Handler+0xd4>)
    c018:	429a      	cmp	r2, r3
    c01a:	d3f6      	bcc.n	c00a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    c01c:	4b23      	ldr	r3, [pc, #140]	; (c0ac <Reset_Handler+0xd8>)
    c01e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    c020:	4b23      	ldr	r3, [pc, #140]	; (c0b0 <Reset_Handler+0xdc>)
    c022:	687a      	ldr	r2, [r7, #4]
    c024:	21ff      	movs	r1, #255	; 0xff
    c026:	438a      	bics	r2, r1
    c028:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    c02a:	4a22      	ldr	r2, [pc, #136]	; (c0b4 <Reset_Handler+0xe0>)
    c02c:	2390      	movs	r3, #144	; 0x90
    c02e:	005b      	lsls	r3, r3, #1
    c030:	2102      	movs	r1, #2
    c032:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    c034:	4a20      	ldr	r2, [pc, #128]	; (c0b8 <Reset_Handler+0xe4>)
    c036:	78d3      	ldrb	r3, [r2, #3]
    c038:	2103      	movs	r1, #3
    c03a:	438b      	bics	r3, r1
    c03c:	1c19      	adds	r1, r3, #0
    c03e:	2302      	movs	r3, #2
    c040:	430b      	orrs	r3, r1
    c042:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    c044:	4a1c      	ldr	r2, [pc, #112]	; (c0b8 <Reset_Handler+0xe4>)
    c046:	78d3      	ldrb	r3, [r2, #3]
    c048:	210c      	movs	r1, #12
    c04a:	438b      	bics	r3, r1
    c04c:	1c19      	adds	r1, r3, #0
    c04e:	2308      	movs	r3, #8
    c050:	430b      	orrs	r3, r1
    c052:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    c054:	4a19      	ldr	r2, [pc, #100]	; (c0bc <Reset_Handler+0xe8>)
    c056:	7b93      	ldrb	r3, [r2, #14]
    c058:	2130      	movs	r1, #48	; 0x30
    c05a:	438b      	bics	r3, r1
    c05c:	1c19      	adds	r1, r3, #0
    c05e:	2320      	movs	r3, #32
    c060:	430b      	orrs	r3, r1
    c062:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    c064:	4a15      	ldr	r2, [pc, #84]	; (c0bc <Reset_Handler+0xe8>)
    c066:	7b93      	ldrb	r3, [r2, #14]
    c068:	210c      	movs	r1, #12
    c06a:	438b      	bics	r3, r1
    c06c:	1c19      	adds	r1, r3, #0
    c06e:	2308      	movs	r3, #8
    c070:	430b      	orrs	r3, r1
    c072:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    c074:	4a11      	ldr	r2, [pc, #68]	; (c0bc <Reset_Handler+0xe8>)
    c076:	7b93      	ldrb	r3, [r2, #14]
    c078:	2103      	movs	r1, #3
    c07a:	438b      	bics	r3, r1
    c07c:	1c19      	adds	r1, r3, #0
    c07e:	2302      	movs	r3, #2
    c080:	430b      	orrs	r3, r1
    c082:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    c084:	4a0e      	ldr	r2, [pc, #56]	; (c0c0 <Reset_Handler+0xec>)
    c086:	6853      	ldr	r3, [r2, #4]
    c088:	2180      	movs	r1, #128	; 0x80
    c08a:	430b      	orrs	r3, r1
    c08c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    c08e:	4b0d      	ldr	r3, [pc, #52]	; (c0c4 <Reset_Handler+0xf0>)
    c090:	4798      	blx	r3

        /* Branch to main function */
        main();
    c092:	4b0d      	ldr	r3, [pc, #52]	; (c0c8 <Reset_Handler+0xf4>)
    c094:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    c096:	e7fe      	b.n	c096 <Reset_Handler+0xc2>
    c098:	00010c4c 	.word	0x00010c4c
    c09c:	20000000 	.word	0x20000000
    c0a0:	20000200 	.word	0x20000200
    c0a4:	20000200 	.word	0x20000200
    c0a8:	20005110 	.word	0x20005110
    c0ac:	00000000 	.word	0x00000000
    c0b0:	e000ed00 	.word	0xe000ed00
    c0b4:	41007000 	.word	0x41007000
    c0b8:	41005000 	.word	0x41005000
    c0bc:	41004800 	.word	0x41004800
    c0c0:	41004000 	.word	0x41004000
    c0c4:	0000e159 	.word	0x0000e159
    c0c8:	0000c1ad 	.word	0x0000c1ad

0000c0cc <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
    c0cc:	b580      	push	{r7, lr}
    c0ce:	af00      	add	r7, sp, #0
  __asm volatile (
    c0d0:	2004      	movs	r0, #4
    c0d2:	4671      	mov	r1, lr
    c0d4:	4208      	tst	r0, r1
    c0d6:	d002      	beq.n	c0de <_MSP>
    c0d8:	f3ef 8009 	mrs	r0, PSP
    c0dc:	e001      	b.n	c0e2 <_HALT>

0000c0de <_MSP>:
    c0de:	f3ef 8008 	mrs	r0, MSP

0000c0e2 <_HALT>:
    c0e2:	6941      	ldr	r1, [r0, #20]
    c0e4:	e004      	b.n	c0f0 <HardFault_HandlerC>
    c0e6:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
    c0e8:	46c0      	nop			; (mov r8, r8)
    c0ea:	46bd      	mov	sp, r7
    c0ec:	bd80      	pop	{r7, pc}
	...

0000c0f0 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
    c0f0:	b580      	push	{r7, lr}
    c0f2:	b090      	sub	sp, #64	; 0x40
    c0f4:	af00      	add	r7, sp, #0
    c0f6:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
    c0f8:	687b      	ldr	r3, [r7, #4]
    c0fa:	681b      	ldr	r3, [r3, #0]
    c0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
    c0fe:	687b      	ldr	r3, [r7, #4]
    c100:	685b      	ldr	r3, [r3, #4]
    c102:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
    c104:	687b      	ldr	r3, [r7, #4]
    c106:	689b      	ldr	r3, [r3, #8]
    c108:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
    c10a:	687b      	ldr	r3, [r7, #4]
    c10c:	68db      	ldr	r3, [r3, #12]
    c10e:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
    c110:	687b      	ldr	r3, [r7, #4]
    c112:	691b      	ldr	r3, [r3, #16]
    c114:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
    c116:	687b      	ldr	r3, [r7, #4]
    c118:	695b      	ldr	r3, [r3, #20]
    c11a:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
    c11c:	687b      	ldr	r3, [r7, #4]
    c11e:	699b      	ldr	r3, [r3, #24]
    c120:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
    c122:	687b      	ldr	r3, [r7, #4]
    c124:	69db      	ldr	r3, [r3, #28]
    c126:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
    c128:	4b0b      	ldr	r3, [pc, #44]	; (c158 <HardFault_HandlerC+0x68>)
    c12a:	681b      	ldr	r3, [r3, #0]
    c12c:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
    c12e:	4b0b      	ldr	r3, [pc, #44]	; (c15c <HardFault_HandlerC+0x6c>)
    c130:	681b      	ldr	r3, [r3, #0]
    c132:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
    c134:	4b0a      	ldr	r3, [pc, #40]	; (c160 <HardFault_HandlerC+0x70>)
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
    c13a:	4b0a      	ldr	r3, [pc, #40]	; (c164 <HardFault_HandlerC+0x74>)
    c13c:	681b      	ldr	r3, [r3, #0]
    c13e:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
    c140:	4b09      	ldr	r3, [pc, #36]	; (c168 <HardFault_HandlerC+0x78>)
    c142:	681b      	ldr	r3, [r3, #0]
    c144:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
    c146:	4b09      	ldr	r3, [pc, #36]	; (c16c <HardFault_HandlerC+0x7c>)
    c148:	681b      	ldr	r3, [r3, #0]
    c14a:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
    c14c:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
    c14e:	46c0      	nop			; (mov r8, r8)
    c150:	46bd      	mov	sp, r7
    c152:	b010      	add	sp, #64	; 0x40
    c154:	bd80      	pop	{r7, pc}
    c156:	46c0      	nop			; (mov r8, r8)
    c158:	e000ed28 	.word	0xe000ed28
    c15c:	e000ed2c 	.word	0xe000ed2c
    c160:	e000ed30 	.word	0xe000ed30
    c164:	e000ed3c 	.word	0xe000ed3c
    c168:	e000ed34 	.word	0xe000ed34
    c16c:	e000ed38 	.word	0xe000ed38

0000c170 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    c170:	b580      	push	{r7, lr}
    c172:	b084      	sub	sp, #16
    c174:	af00      	add	r7, sp, #0
    c176:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    c178:	4b0a      	ldr	r3, [pc, #40]	; (c1a4 <_sbrk+0x34>)
    c17a:	681b      	ldr	r3, [r3, #0]
    c17c:	2b00      	cmp	r3, #0
    c17e:	d102      	bne.n	c186 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    c180:	4b08      	ldr	r3, [pc, #32]	; (c1a4 <_sbrk+0x34>)
    c182:	4a09      	ldr	r2, [pc, #36]	; (c1a8 <_sbrk+0x38>)
    c184:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    c186:	4b07      	ldr	r3, [pc, #28]	; (c1a4 <_sbrk+0x34>)
    c188:	681b      	ldr	r3, [r3, #0]
    c18a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    c18c:	4b05      	ldr	r3, [pc, #20]	; (c1a4 <_sbrk+0x34>)
    c18e:	681a      	ldr	r2, [r3, #0]
    c190:	687b      	ldr	r3, [r7, #4]
    c192:	18d2      	adds	r2, r2, r3
    c194:	4b03      	ldr	r3, [pc, #12]	; (c1a4 <_sbrk+0x34>)
    c196:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    c198:	68fb      	ldr	r3, [r7, #12]
}
    c19a:	0018      	movs	r0, r3
    c19c:	46bd      	mov	sp, r7
    c19e:	b004      	add	sp, #16
    c1a0:	bd80      	pop	{r7, pc}
    c1a2:	46c0      	nop			; (mov r8, r8)
    c1a4:	20003860 	.word	0x20003860
    c1a8:	20007110 	.word	0x20007110

0000c1ac <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    c1ac:	b580      	push	{r7, lr}
    c1ae:	af00      	add	r7, sp, #0
	/* Initialize the board. */
	system_init();
    c1b0:	4b06      	ldr	r3, [pc, #24]	; (c1cc <main+0x20>)
    c1b2:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
    c1b4:	4b06      	ldr	r3, [pc, #24]	; (c1d0 <main+0x24>)
    c1b6:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
    c1b8:	2001      	movs	r0, #1
    c1ba:	4b06      	ldr	r3, [pc, #24]	; (c1d4 <main+0x28>)
    c1bc:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
    c1be:	4b06      	ldr	r3, [pc, #24]	; (c1d8 <main+0x2c>)
    c1c0:	4798      	blx	r3

	return 0; //Will not get here
    c1c2:	2300      	movs	r3, #0
}
    c1c4:	0018      	movs	r0, r3
    c1c6:	46bd      	mov	sp, r7
    c1c8:	bd80      	pop	{r7, pc}
    c1ca:	46c0      	nop			; (mov r8, r8)
    c1cc:	0000bee9 	.word	0x0000bee9
    c1d0:	00009349 	.word	0x00009349
    c1d4:	00003b49 	.word	0x00003b49
    c1d8:	00007a51 	.word	0x00007a51

0000c1dc <vApplicationDaemonTaskStartupHook>:
* @param[in]        None
* @return           None
*****************************************************************************/
volatile uint8_t data[256];
void vApplicationDaemonTaskStartupHook(void)
{
    c1dc:	b590      	push	{r4, r7, lr}
    c1de:	b083      	sub	sp, #12
    c1e0:	af00      	add	r7, sp, #0

SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
    c1e2:	4b2e      	ldr	r3, [pc, #184]	; (c29c <vApplicationDaemonTaskStartupHook+0xc0>)
    c1e4:	0018      	movs	r0, r3
    c1e6:	4b2e      	ldr	r3, [pc, #184]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c1e8:	4798      	blx	r3

//Initialize HW that needs FreeRTOS Initialization
SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
    c1ea:	4b2e      	ldr	r3, [pc, #184]	; (c2a4 <vApplicationDaemonTaskStartupHook+0xc8>)
    c1ec:	0018      	movs	r0, r3
    c1ee:	4b2c      	ldr	r3, [pc, #176]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c1f0:	4798      	blx	r3
	if (I2cInitializeDriver() != STATUS_OK)
    c1f2:	4b2d      	ldr	r3, [pc, #180]	; (c2a8 <vApplicationDaemonTaskStartupHook+0xcc>)
    c1f4:	4798      	blx	r3
    c1f6:	1e03      	subs	r3, r0, #0
    c1f8:	d004      	beq.n	c204 <vApplicationDaemonTaskStartupHook+0x28>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
    c1fa:	4b2c      	ldr	r3, [pc, #176]	; (c2ac <vApplicationDaemonTaskStartupHook+0xd0>)
    c1fc:	0018      	movs	r0, r3
    c1fe:	4b28      	ldr	r3, [pc, #160]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c200:	4798      	blx	r3
    c202:	e003      	b.n	c20c <vApplicationDaemonTaskStartupHook+0x30>
	}
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
    c204:	4b2a      	ldr	r3, [pc, #168]	; (c2b0 <vApplicationDaemonTaskStartupHook+0xd4>)
    c206:	0018      	movs	r0, r3
    c208:	4b25      	ldr	r3, [pc, #148]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c20a:	4798      	blx	r3
	}

	if(0 != InitializeSeesaw())
    c20c:	4b29      	ldr	r3, [pc, #164]	; (c2b4 <vApplicationDaemonTaskStartupHook+0xd8>)
    c20e:	4798      	blx	r3
    c210:	1e03      	subs	r3, r0, #0
    c212:	d004      	beq.n	c21e <vApplicationDaemonTaskStartupHook+0x42>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    c214:	4b28      	ldr	r3, [pc, #160]	; (c2b8 <vApplicationDaemonTaskStartupHook+0xdc>)
    c216:	0018      	movs	r0, r3
    c218:	4b21      	ldr	r3, [pc, #132]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c21a:	4798      	blx	r3
    c21c:	e003      	b.n	c226 <vApplicationDaemonTaskStartupHook+0x4a>
	}	
	else
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
    c21e:	4b27      	ldr	r3, [pc, #156]	; (c2bc <vApplicationDaemonTaskStartupHook+0xe0>)
    c220:	0018      	movs	r0, r3
    c222:	4b1f      	ldr	r3, [pc, #124]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c224:	4798      	blx	r3
	}

	uint8_t whoamI = 0;
    c226:	1dfb      	adds	r3, r7, #7
    c228:	2200      	movs	r2, #0
    c22a:	701a      	strb	r2, [r3, #0]
	(lsm6dso_device_id_get(GetImuStruct(), &whoamI));
    c22c:	4b24      	ldr	r3, [pc, #144]	; (c2c0 <vApplicationDaemonTaskStartupHook+0xe4>)
    c22e:	4798      	blx	r3
    c230:	0002      	movs	r2, r0
    c232:	1dfb      	adds	r3, r7, #7
    c234:	0019      	movs	r1, r3
    c236:	0010      	movs	r0, r2
    c238:	4b22      	ldr	r3, [pc, #136]	; (c2c4 <vApplicationDaemonTaskStartupHook+0xe8>)
    c23a:	4798      	blx	r3
	
	snprintf(bufferPrint, 64, "the IMU ID is: %d\r\n", whoamI);
    c23c:	1dfb      	adds	r3, r7, #7
    c23e:	781b      	ldrb	r3, [r3, #0]
    c240:	4a21      	ldr	r2, [pc, #132]	; (c2c8 <vApplicationDaemonTaskStartupHook+0xec>)
    c242:	4822      	ldr	r0, [pc, #136]	; (c2cc <vApplicationDaemonTaskStartupHook+0xf0>)
    c244:	2140      	movs	r1, #64	; 0x40
    c246:	4c22      	ldr	r4, [pc, #136]	; (c2d0 <vApplicationDaemonTaskStartupHook+0xf4>)
    c248:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
    c24a:	4b20      	ldr	r3, [pc, #128]	; (c2cc <vApplicationDaemonTaskStartupHook+0xf0>)
    c24c:	0018      	movs	r0, r3
    c24e:	4b14      	ldr	r3, [pc, #80]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c250:	4798      	blx	r3
	
	if (whoamI != LSM6DSO_ID){
    c252:	1dfb      	adds	r3, r7, #7
    c254:	781b      	ldrb	r3, [r3, #0]
    c256:	2b6c      	cmp	r3, #108	; 0x6c
    c258:	d004      	beq.n	c264 <vApplicationDaemonTaskStartupHook+0x88>
		SerialConsoleWriteString("Cannot find IMU!\r\n");
    c25a:	4b1e      	ldr	r3, [pc, #120]	; (c2d4 <vApplicationDaemonTaskStartupHook+0xf8>)
    c25c:	0018      	movs	r0, r3
    c25e:	4b10      	ldr	r3, [pc, #64]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c260:	4798      	blx	r3
    c262:	e010      	b.n	c286 <vApplicationDaemonTaskStartupHook+0xaa>
	}
	else
	{
		SerialConsoleWriteString("IMU found!\r\n");
    c264:	4b1c      	ldr	r3, [pc, #112]	; (c2d8 <vApplicationDaemonTaskStartupHook+0xfc>)
    c266:	0018      	movs	r0, r3
    c268:	4b0d      	ldr	r3, [pc, #52]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c26a:	4798      	blx	r3
		if(InitImu() == 0)
    c26c:	4b1b      	ldr	r3, [pc, #108]	; (c2dc <vApplicationDaemonTaskStartupHook+0x100>)
    c26e:	4798      	blx	r3
    c270:	1e03      	subs	r3, r0, #0
    c272:	d104      	bne.n	c27e <vApplicationDaemonTaskStartupHook+0xa2>
		{
			SerialConsoleWriteString("IMU initialized!\r\n");
    c274:	4b1a      	ldr	r3, [pc, #104]	; (c2e0 <vApplicationDaemonTaskStartupHook+0x104>)
    c276:	0018      	movs	r0, r3
    c278:	4b09      	ldr	r3, [pc, #36]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c27a:	4798      	blx	r3
    c27c:	e003      	b.n	c286 <vApplicationDaemonTaskStartupHook+0xaa>
		}
		else
		{
			SerialConsoleWriteString("Could not initialize IMU\r\n");
    c27e:	4b19      	ldr	r3, [pc, #100]	; (c2e4 <vApplicationDaemonTaskStartupHook+0x108>)
    c280:	0018      	movs	r0, r3
    c282:	4b07      	ldr	r3, [pc, #28]	; (c2a0 <vApplicationDaemonTaskStartupHook+0xc4>)
    c284:	4798      	blx	r3
		}
	}
	

	StartTasks();
    c286:	4b18      	ldr	r3, [pc, #96]	; (c2e8 <vApplicationDaemonTaskStartupHook+0x10c>)
    c288:	4798      	blx	r3

	vTaskSuspend(daemonTaskHandle);
    c28a:	4b18      	ldr	r3, [pc, #96]	; (c2ec <vApplicationDaemonTaskStartupHook+0x110>)
    c28c:	681b      	ldr	r3, [r3, #0]
    c28e:	0018      	movs	r0, r3
    c290:	4b17      	ldr	r3, [pc, #92]	; (c2f0 <vApplicationDaemonTaskStartupHook+0x114>)
    c292:	4798      	blx	r3
}
    c294:	46c0      	nop			; (mov r8, r8)
    c296:	46bd      	mov	sp, r7
    c298:	b003      	add	sp, #12
    c29a:	bd90      	pop	{r4, r7, pc}
    c29c:	00010788 	.word	0x00010788
    c2a0:	000093b9 	.word	0x000093b9
    c2a4:	000107ac 	.word	0x000107ac
    c2a8:	0000139d 	.word	0x0000139d
    c2ac:	000107c4 	.word	0x000107c4
    c2b0:	000107e8 	.word	0x000107e8
    c2b4:	000026b9 	.word	0x000026b9
    c2b8:	00010804 	.word	0x00010804
    c2bc:	00010824 	.word	0x00010824
    c2c0:	000025e1 	.word	0x000025e1
    c2c4:	00002125 	.word	0x00002125
    c2c8:	0001083c 	.word	0x0001083c
    c2cc:	200050cc 	.word	0x200050cc
    c2d0:	0000e395 	.word	0x0000e395
    c2d4:	00010850 	.word	0x00010850
    c2d8:	00010864 	.word	0x00010864
    c2dc:	000025f1 	.word	0x000025f1
    c2e0:	00010874 	.word	0x00010874
    c2e4:	00010888 	.word	0x00010888
    c2e8:	0000c2f5 	.word	0x0000c2f5
    c2ec:	20003868 	.word	0x20003868
    c2f0:	000078f5 	.word	0x000078f5

0000c2f4 <StartTasks>:
* @details
* @param[in]        None
* @return           None
*****************************************************************************/
static void StartTasks(void)
{
    c2f4:	b590      	push	{r4, r7, lr}
    c2f6:	b083      	sub	sp, #12
    c2f8:	af02      	add	r7, sp, #8

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
    c2fa:	4b26      	ldr	r3, [pc, #152]	; (c394 <StartTasks+0xa0>)
    c2fc:	4798      	blx	r3
    c2fe:	0003      	movs	r3, r0
    c300:	4a25      	ldr	r2, [pc, #148]	; (c398 <StartTasks+0xa4>)
    c302:	4826      	ldr	r0, [pc, #152]	; (c39c <StartTasks+0xa8>)
    c304:	2140      	movs	r1, #64	; 0x40
    c306:	4c26      	ldr	r4, [pc, #152]	; (c3a0 <StartTasks+0xac>)
    c308:	47a0      	blx	r4
SerialConsoleWriteString(bufferPrint);
    c30a:	4b24      	ldr	r3, [pc, #144]	; (c39c <StartTasks+0xa8>)
    c30c:	0018      	movs	r0, r3
    c30e:	4b25      	ldr	r3, [pc, #148]	; (c3a4 <StartTasks+0xb0>)
    c310:	4798      	blx	r3

//Initialize Tasks here

if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
    c312:	23c8      	movs	r3, #200	; 0xc8
    c314:	005a      	lsls	r2, r3, #1
    c316:	4924      	ldr	r1, [pc, #144]	; (c3a8 <StartTasks+0xb4>)
    c318:	4824      	ldr	r0, [pc, #144]	; (c3ac <StartTasks+0xb8>)
    c31a:	4b25      	ldr	r3, [pc, #148]	; (c3b0 <StartTasks+0xbc>)
    c31c:	9301      	str	r3, [sp, #4]
    c31e:	2304      	movs	r3, #4
    c320:	9300      	str	r3, [sp, #0]
    c322:	2300      	movs	r3, #0
    c324:	4c23      	ldr	r4, [pc, #140]	; (c3b4 <StartTasks+0xc0>)
    c326:	47a0      	blx	r4
    c328:	0003      	movs	r3, r0
    c32a:	2b01      	cmp	r3, #1
    c32c:	d003      	beq.n	c336 <StartTasks+0x42>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
    c32e:	4b22      	ldr	r3, [pc, #136]	; (c3b8 <StartTasks+0xc4>)
    c330:	0018      	movs	r0, r3
    c332:	4b1c      	ldr	r3, [pc, #112]	; (c3a4 <StartTasks+0xb0>)
    c334:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
    c336:	4b17      	ldr	r3, [pc, #92]	; (c394 <StartTasks+0xa0>)
    c338:	4798      	blx	r3
    c33a:	0003      	movs	r3, r0
    c33c:	4a1f      	ldr	r2, [pc, #124]	; (c3bc <StartTasks+0xc8>)
    c33e:	4817      	ldr	r0, [pc, #92]	; (c39c <StartTasks+0xa8>)
    c340:	2140      	movs	r1, #64	; 0x40
    c342:	4c17      	ldr	r4, [pc, #92]	; (c3a0 <StartTasks+0xac>)
    c344:	47a0      	blx	r4
SerialConsoleWriteString(bufferPrint);
    c346:	4b15      	ldr	r3, [pc, #84]	; (c39c <StartTasks+0xa8>)
    c348:	0018      	movs	r0, r3
    c34a:	4b16      	ldr	r3, [pc, #88]	; (c3a4 <StartTasks+0xb0>)
    c34c:	4798      	blx	r3



if(xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
    c34e:	2380      	movs	r3, #128	; 0x80
    c350:	005a      	lsls	r2, r3, #1
    c352:	491b      	ldr	r1, [pc, #108]	; (c3c0 <StartTasks+0xcc>)
    c354:	481b      	ldr	r0, [pc, #108]	; (c3c4 <StartTasks+0xd0>)
    c356:	4b1c      	ldr	r3, [pc, #112]	; (c3c8 <StartTasks+0xd4>)
    c358:	9301      	str	r3, [sp, #4]
    c35a:	2303      	movs	r3, #3
    c35c:	9300      	str	r3, [sp, #0]
    c35e:	2300      	movs	r3, #0
    c360:	4c14      	ldr	r4, [pc, #80]	; (c3b4 <StartTasks+0xc0>)
    c362:	47a0      	blx	r4
    c364:	0003      	movs	r3, r0
    c366:	2b01      	cmp	r3, #1
    c368:	d003      	beq.n	c372 <StartTasks+0x7e>
	SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
    c36a:	4b18      	ldr	r3, [pc, #96]	; (c3cc <StartTasks+0xd8>)
    c36c:	0018      	movs	r0, r3
    c36e:	4b0d      	ldr	r3, [pc, #52]	; (c3a4 <StartTasks+0xb0>)
    c370:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
    c372:	4b08      	ldr	r3, [pc, #32]	; (c394 <StartTasks+0xa0>)
    c374:	4798      	blx	r3
    c376:	0003      	movs	r3, r0
    c378:	4a15      	ldr	r2, [pc, #84]	; (c3d0 <StartTasks+0xdc>)
    c37a:	4808      	ldr	r0, [pc, #32]	; (c39c <StartTasks+0xa8>)
    c37c:	2140      	movs	r1, #64	; 0x40
    c37e:	4c08      	ldr	r4, [pc, #32]	; (c3a0 <StartTasks+0xac>)
    c380:	47a0      	blx	r4
SerialConsoleWriteString(bufferPrint);
    c382:	4b06      	ldr	r3, [pc, #24]	; (c39c <StartTasks+0xa8>)
    c384:	0018      	movs	r0, r3
    c386:	4b07      	ldr	r3, [pc, #28]	; (c3a4 <StartTasks+0xb0>)
    c388:	4798      	blx	r3
}
    c38a:	46c0      	nop			; (mov r8, r8)
    c38c:	46bd      	mov	sp, r7
    c38e:	b001      	add	sp, #4
    c390:	bd90      	pop	{r4, r7, pc}
    c392:	46c0      	nop			; (mov r8, r8)
    c394:	00005a41 	.word	0x00005a41
    c398:	000108a4 	.word	0x000108a4
    c39c:	200050cc 	.word	0x200050cc
    c3a0:	0000e395 	.word	0x0000e395
    c3a4:	000093b9 	.word	0x000093b9
    c3a8:	000108c8 	.word	0x000108c8
    c3ac:	000008ed 	.word	0x000008ed
    c3b0:	20003864 	.word	0x20003864
    c3b4:	00007485 	.word	0x00007485
    c3b8:	000108d4 	.word	0x000108d4
    c3bc:	00010900 	.word	0x00010900
    c3c0:	00010920 	.word	0x00010920
    c3c4:	00002bfd 	.word	0x00002bfd
    c3c8:	2000386c 	.word	0x2000386c
    c3cc:	00010928 	.word	0x00010928
    c3d0:	00010954 	.word	0x00010954

0000c3d4 <vApplicationMallocFailedHook>:




void vApplicationMallocFailedHook(void)
{
    c3d4:	b580      	push	{r7, lr}
    c3d6:	af00      	add	r7, sp, #0
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
    c3d8:	4b02      	ldr	r3, [pc, #8]	; (c3e4 <vApplicationMallocFailedHook+0x10>)
    c3da:	0018      	movs	r0, r3
    c3dc:	4b02      	ldr	r3, [pc, #8]	; (c3e8 <vApplicationMallocFailedHook+0x14>)
    c3de:	4798      	blx	r3
while(1);
    c3e0:	e7fe      	b.n	c3e0 <vApplicationMallocFailedHook+0xc>
    c3e2:	46c0      	nop			; (mov r8, r8)
    c3e4:	00010978 	.word	0x00010978
    c3e8:	000093b9 	.word	0x000093b9

0000c3ec <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void)
{
    c3ec:	b580      	push	{r7, lr}
    c3ee:	af00      	add	r7, sp, #0
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
    c3f0:	4b02      	ldr	r3, [pc, #8]	; (c3fc <vApplicationStackOverflowHook+0x10>)
    c3f2:	0018      	movs	r0, r3
    c3f4:	4b02      	ldr	r3, [pc, #8]	; (c400 <vApplicationStackOverflowHook+0x14>)
    c3f6:	4798      	blx	r3
while(1);
    c3f8:	e7fe      	b.n	c3f8 <vApplicationStackOverflowHook+0xc>
    c3fa:	46c0      	nop			; (mov r8, r8)
    c3fc:	000109a4 	.word	0x000109a4
    c400:	000093b9 	.word	0x000093b9

0000c404 <__udivsi3>:
    c404:	2200      	movs	r2, #0
    c406:	0843      	lsrs	r3, r0, #1
    c408:	428b      	cmp	r3, r1
    c40a:	d374      	bcc.n	c4f6 <__udivsi3+0xf2>
    c40c:	0903      	lsrs	r3, r0, #4
    c40e:	428b      	cmp	r3, r1
    c410:	d35f      	bcc.n	c4d2 <__udivsi3+0xce>
    c412:	0a03      	lsrs	r3, r0, #8
    c414:	428b      	cmp	r3, r1
    c416:	d344      	bcc.n	c4a2 <__udivsi3+0x9e>
    c418:	0b03      	lsrs	r3, r0, #12
    c41a:	428b      	cmp	r3, r1
    c41c:	d328      	bcc.n	c470 <__udivsi3+0x6c>
    c41e:	0c03      	lsrs	r3, r0, #16
    c420:	428b      	cmp	r3, r1
    c422:	d30d      	bcc.n	c440 <__udivsi3+0x3c>
    c424:	22ff      	movs	r2, #255	; 0xff
    c426:	0209      	lsls	r1, r1, #8
    c428:	ba12      	rev	r2, r2
    c42a:	0c03      	lsrs	r3, r0, #16
    c42c:	428b      	cmp	r3, r1
    c42e:	d302      	bcc.n	c436 <__udivsi3+0x32>
    c430:	1212      	asrs	r2, r2, #8
    c432:	0209      	lsls	r1, r1, #8
    c434:	d065      	beq.n	c502 <__udivsi3+0xfe>
    c436:	0b03      	lsrs	r3, r0, #12
    c438:	428b      	cmp	r3, r1
    c43a:	d319      	bcc.n	c470 <__udivsi3+0x6c>
    c43c:	e000      	b.n	c440 <__udivsi3+0x3c>
    c43e:	0a09      	lsrs	r1, r1, #8
    c440:	0bc3      	lsrs	r3, r0, #15
    c442:	428b      	cmp	r3, r1
    c444:	d301      	bcc.n	c44a <__udivsi3+0x46>
    c446:	03cb      	lsls	r3, r1, #15
    c448:	1ac0      	subs	r0, r0, r3
    c44a:	4152      	adcs	r2, r2
    c44c:	0b83      	lsrs	r3, r0, #14
    c44e:	428b      	cmp	r3, r1
    c450:	d301      	bcc.n	c456 <__udivsi3+0x52>
    c452:	038b      	lsls	r3, r1, #14
    c454:	1ac0      	subs	r0, r0, r3
    c456:	4152      	adcs	r2, r2
    c458:	0b43      	lsrs	r3, r0, #13
    c45a:	428b      	cmp	r3, r1
    c45c:	d301      	bcc.n	c462 <__udivsi3+0x5e>
    c45e:	034b      	lsls	r3, r1, #13
    c460:	1ac0      	subs	r0, r0, r3
    c462:	4152      	adcs	r2, r2
    c464:	0b03      	lsrs	r3, r0, #12
    c466:	428b      	cmp	r3, r1
    c468:	d301      	bcc.n	c46e <__udivsi3+0x6a>
    c46a:	030b      	lsls	r3, r1, #12
    c46c:	1ac0      	subs	r0, r0, r3
    c46e:	4152      	adcs	r2, r2
    c470:	0ac3      	lsrs	r3, r0, #11
    c472:	428b      	cmp	r3, r1
    c474:	d301      	bcc.n	c47a <__udivsi3+0x76>
    c476:	02cb      	lsls	r3, r1, #11
    c478:	1ac0      	subs	r0, r0, r3
    c47a:	4152      	adcs	r2, r2
    c47c:	0a83      	lsrs	r3, r0, #10
    c47e:	428b      	cmp	r3, r1
    c480:	d301      	bcc.n	c486 <__udivsi3+0x82>
    c482:	028b      	lsls	r3, r1, #10
    c484:	1ac0      	subs	r0, r0, r3
    c486:	4152      	adcs	r2, r2
    c488:	0a43      	lsrs	r3, r0, #9
    c48a:	428b      	cmp	r3, r1
    c48c:	d301      	bcc.n	c492 <__udivsi3+0x8e>
    c48e:	024b      	lsls	r3, r1, #9
    c490:	1ac0      	subs	r0, r0, r3
    c492:	4152      	adcs	r2, r2
    c494:	0a03      	lsrs	r3, r0, #8
    c496:	428b      	cmp	r3, r1
    c498:	d301      	bcc.n	c49e <__udivsi3+0x9a>
    c49a:	020b      	lsls	r3, r1, #8
    c49c:	1ac0      	subs	r0, r0, r3
    c49e:	4152      	adcs	r2, r2
    c4a0:	d2cd      	bcs.n	c43e <__udivsi3+0x3a>
    c4a2:	09c3      	lsrs	r3, r0, #7
    c4a4:	428b      	cmp	r3, r1
    c4a6:	d301      	bcc.n	c4ac <__udivsi3+0xa8>
    c4a8:	01cb      	lsls	r3, r1, #7
    c4aa:	1ac0      	subs	r0, r0, r3
    c4ac:	4152      	adcs	r2, r2
    c4ae:	0983      	lsrs	r3, r0, #6
    c4b0:	428b      	cmp	r3, r1
    c4b2:	d301      	bcc.n	c4b8 <__udivsi3+0xb4>
    c4b4:	018b      	lsls	r3, r1, #6
    c4b6:	1ac0      	subs	r0, r0, r3
    c4b8:	4152      	adcs	r2, r2
    c4ba:	0943      	lsrs	r3, r0, #5
    c4bc:	428b      	cmp	r3, r1
    c4be:	d301      	bcc.n	c4c4 <__udivsi3+0xc0>
    c4c0:	014b      	lsls	r3, r1, #5
    c4c2:	1ac0      	subs	r0, r0, r3
    c4c4:	4152      	adcs	r2, r2
    c4c6:	0903      	lsrs	r3, r0, #4
    c4c8:	428b      	cmp	r3, r1
    c4ca:	d301      	bcc.n	c4d0 <__udivsi3+0xcc>
    c4cc:	010b      	lsls	r3, r1, #4
    c4ce:	1ac0      	subs	r0, r0, r3
    c4d0:	4152      	adcs	r2, r2
    c4d2:	08c3      	lsrs	r3, r0, #3
    c4d4:	428b      	cmp	r3, r1
    c4d6:	d301      	bcc.n	c4dc <__udivsi3+0xd8>
    c4d8:	00cb      	lsls	r3, r1, #3
    c4da:	1ac0      	subs	r0, r0, r3
    c4dc:	4152      	adcs	r2, r2
    c4de:	0883      	lsrs	r3, r0, #2
    c4e0:	428b      	cmp	r3, r1
    c4e2:	d301      	bcc.n	c4e8 <__udivsi3+0xe4>
    c4e4:	008b      	lsls	r3, r1, #2
    c4e6:	1ac0      	subs	r0, r0, r3
    c4e8:	4152      	adcs	r2, r2
    c4ea:	0843      	lsrs	r3, r0, #1
    c4ec:	428b      	cmp	r3, r1
    c4ee:	d301      	bcc.n	c4f4 <__udivsi3+0xf0>
    c4f0:	004b      	lsls	r3, r1, #1
    c4f2:	1ac0      	subs	r0, r0, r3
    c4f4:	4152      	adcs	r2, r2
    c4f6:	1a41      	subs	r1, r0, r1
    c4f8:	d200      	bcs.n	c4fc <__udivsi3+0xf8>
    c4fa:	4601      	mov	r1, r0
    c4fc:	4152      	adcs	r2, r2
    c4fe:	4610      	mov	r0, r2
    c500:	4770      	bx	lr
    c502:	e7ff      	b.n	c504 <__udivsi3+0x100>
    c504:	b501      	push	{r0, lr}
    c506:	2000      	movs	r0, #0
    c508:	f000 f806 	bl	c518 <__aeabi_idiv0>
    c50c:	bd02      	pop	{r1, pc}
    c50e:	46c0      	nop			; (mov r8, r8)

0000c510 <__aeabi_uidivmod>:
    c510:	2900      	cmp	r1, #0
    c512:	d0f7      	beq.n	c504 <__udivsi3+0x100>
    c514:	e776      	b.n	c404 <__udivsi3>
    c516:	4770      	bx	lr

0000c518 <__aeabi_idiv0>:
    c518:	4770      	bx	lr
    c51a:	46c0      	nop			; (mov r8, r8)

0000c51c <__aeabi_lmul>:
    c51c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c51e:	46ce      	mov	lr, r9
    c520:	4647      	mov	r7, r8
    c522:	0415      	lsls	r5, r2, #16
    c524:	0c2d      	lsrs	r5, r5, #16
    c526:	002e      	movs	r6, r5
    c528:	b580      	push	{r7, lr}
    c52a:	0407      	lsls	r7, r0, #16
    c52c:	0c14      	lsrs	r4, r2, #16
    c52e:	0c3f      	lsrs	r7, r7, #16
    c530:	4699      	mov	r9, r3
    c532:	0c03      	lsrs	r3, r0, #16
    c534:	437e      	muls	r6, r7
    c536:	435d      	muls	r5, r3
    c538:	4367      	muls	r7, r4
    c53a:	4363      	muls	r3, r4
    c53c:	197f      	adds	r7, r7, r5
    c53e:	0c34      	lsrs	r4, r6, #16
    c540:	19e4      	adds	r4, r4, r7
    c542:	469c      	mov	ip, r3
    c544:	42a5      	cmp	r5, r4
    c546:	d903      	bls.n	c550 <__aeabi_lmul+0x34>
    c548:	2380      	movs	r3, #128	; 0x80
    c54a:	025b      	lsls	r3, r3, #9
    c54c:	4698      	mov	r8, r3
    c54e:	44c4      	add	ip, r8
    c550:	464b      	mov	r3, r9
    c552:	4351      	muls	r1, r2
    c554:	4343      	muls	r3, r0
    c556:	0436      	lsls	r6, r6, #16
    c558:	0c36      	lsrs	r6, r6, #16
    c55a:	0c25      	lsrs	r5, r4, #16
    c55c:	0424      	lsls	r4, r4, #16
    c55e:	4465      	add	r5, ip
    c560:	19a4      	adds	r4, r4, r6
    c562:	1859      	adds	r1, r3, r1
    c564:	1949      	adds	r1, r1, r5
    c566:	0020      	movs	r0, r4
    c568:	bc0c      	pop	{r2, r3}
    c56a:	4690      	mov	r8, r2
    c56c:	4699      	mov	r9, r3
    c56e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c570 <__aeabi_fmul>:
    c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c572:	4657      	mov	r7, sl
    c574:	464e      	mov	r6, r9
    c576:	4645      	mov	r5, r8
    c578:	46de      	mov	lr, fp
    c57a:	b5e0      	push	{r5, r6, r7, lr}
    c57c:	0247      	lsls	r7, r0, #9
    c57e:	0046      	lsls	r6, r0, #1
    c580:	4688      	mov	r8, r1
    c582:	0a7f      	lsrs	r7, r7, #9
    c584:	0e36      	lsrs	r6, r6, #24
    c586:	0fc4      	lsrs	r4, r0, #31
    c588:	2e00      	cmp	r6, #0
    c58a:	d047      	beq.n	c61c <__aeabi_fmul+0xac>
    c58c:	2eff      	cmp	r6, #255	; 0xff
    c58e:	d024      	beq.n	c5da <__aeabi_fmul+0x6a>
    c590:	00fb      	lsls	r3, r7, #3
    c592:	2780      	movs	r7, #128	; 0x80
    c594:	04ff      	lsls	r7, r7, #19
    c596:	431f      	orrs	r7, r3
    c598:	2300      	movs	r3, #0
    c59a:	4699      	mov	r9, r3
    c59c:	469a      	mov	sl, r3
    c59e:	3e7f      	subs	r6, #127	; 0x7f
    c5a0:	4643      	mov	r3, r8
    c5a2:	025d      	lsls	r5, r3, #9
    c5a4:	0058      	lsls	r0, r3, #1
    c5a6:	0fdb      	lsrs	r3, r3, #31
    c5a8:	0a6d      	lsrs	r5, r5, #9
    c5aa:	0e00      	lsrs	r0, r0, #24
    c5ac:	4698      	mov	r8, r3
    c5ae:	d043      	beq.n	c638 <__aeabi_fmul+0xc8>
    c5b0:	28ff      	cmp	r0, #255	; 0xff
    c5b2:	d03b      	beq.n	c62c <__aeabi_fmul+0xbc>
    c5b4:	00eb      	lsls	r3, r5, #3
    c5b6:	2580      	movs	r5, #128	; 0x80
    c5b8:	2200      	movs	r2, #0
    c5ba:	04ed      	lsls	r5, r5, #19
    c5bc:	431d      	orrs	r5, r3
    c5be:	387f      	subs	r0, #127	; 0x7f
    c5c0:	1836      	adds	r6, r6, r0
    c5c2:	1c73      	adds	r3, r6, #1
    c5c4:	4641      	mov	r1, r8
    c5c6:	469b      	mov	fp, r3
    c5c8:	464b      	mov	r3, r9
    c5ca:	4061      	eors	r1, r4
    c5cc:	4313      	orrs	r3, r2
    c5ce:	2b0f      	cmp	r3, #15
    c5d0:	d864      	bhi.n	c69c <__aeabi_fmul+0x12c>
    c5d2:	4875      	ldr	r0, [pc, #468]	; (c7a8 <__aeabi_fmul+0x238>)
    c5d4:	009b      	lsls	r3, r3, #2
    c5d6:	58c3      	ldr	r3, [r0, r3]
    c5d8:	469f      	mov	pc, r3
    c5da:	2f00      	cmp	r7, #0
    c5dc:	d142      	bne.n	c664 <__aeabi_fmul+0xf4>
    c5de:	2308      	movs	r3, #8
    c5e0:	4699      	mov	r9, r3
    c5e2:	3b06      	subs	r3, #6
    c5e4:	26ff      	movs	r6, #255	; 0xff
    c5e6:	469a      	mov	sl, r3
    c5e8:	e7da      	b.n	c5a0 <__aeabi_fmul+0x30>
    c5ea:	4641      	mov	r1, r8
    c5ec:	2a02      	cmp	r2, #2
    c5ee:	d028      	beq.n	c642 <__aeabi_fmul+0xd2>
    c5f0:	2a03      	cmp	r2, #3
    c5f2:	d100      	bne.n	c5f6 <__aeabi_fmul+0x86>
    c5f4:	e0ce      	b.n	c794 <__aeabi_fmul+0x224>
    c5f6:	2a01      	cmp	r2, #1
    c5f8:	d000      	beq.n	c5fc <__aeabi_fmul+0x8c>
    c5fa:	e0ac      	b.n	c756 <__aeabi_fmul+0x1e6>
    c5fc:	4011      	ands	r1, r2
    c5fe:	2000      	movs	r0, #0
    c600:	2200      	movs	r2, #0
    c602:	b2cc      	uxtb	r4, r1
    c604:	0240      	lsls	r0, r0, #9
    c606:	05d2      	lsls	r2, r2, #23
    c608:	0a40      	lsrs	r0, r0, #9
    c60a:	07e4      	lsls	r4, r4, #31
    c60c:	4310      	orrs	r0, r2
    c60e:	4320      	orrs	r0, r4
    c610:	bc3c      	pop	{r2, r3, r4, r5}
    c612:	4690      	mov	r8, r2
    c614:	4699      	mov	r9, r3
    c616:	46a2      	mov	sl, r4
    c618:	46ab      	mov	fp, r5
    c61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c61c:	2f00      	cmp	r7, #0
    c61e:	d115      	bne.n	c64c <__aeabi_fmul+0xdc>
    c620:	2304      	movs	r3, #4
    c622:	4699      	mov	r9, r3
    c624:	3b03      	subs	r3, #3
    c626:	2600      	movs	r6, #0
    c628:	469a      	mov	sl, r3
    c62a:	e7b9      	b.n	c5a0 <__aeabi_fmul+0x30>
    c62c:	20ff      	movs	r0, #255	; 0xff
    c62e:	2202      	movs	r2, #2
    c630:	2d00      	cmp	r5, #0
    c632:	d0c5      	beq.n	c5c0 <__aeabi_fmul+0x50>
    c634:	2203      	movs	r2, #3
    c636:	e7c3      	b.n	c5c0 <__aeabi_fmul+0x50>
    c638:	2d00      	cmp	r5, #0
    c63a:	d119      	bne.n	c670 <__aeabi_fmul+0x100>
    c63c:	2000      	movs	r0, #0
    c63e:	2201      	movs	r2, #1
    c640:	e7be      	b.n	c5c0 <__aeabi_fmul+0x50>
    c642:	2401      	movs	r4, #1
    c644:	22ff      	movs	r2, #255	; 0xff
    c646:	400c      	ands	r4, r1
    c648:	2000      	movs	r0, #0
    c64a:	e7db      	b.n	c604 <__aeabi_fmul+0x94>
    c64c:	0038      	movs	r0, r7
    c64e:	f001 fd65 	bl	e11c <__clzsi2>
    c652:	2676      	movs	r6, #118	; 0x76
    c654:	1f43      	subs	r3, r0, #5
    c656:	409f      	lsls	r7, r3
    c658:	2300      	movs	r3, #0
    c65a:	4276      	negs	r6, r6
    c65c:	1a36      	subs	r6, r6, r0
    c65e:	4699      	mov	r9, r3
    c660:	469a      	mov	sl, r3
    c662:	e79d      	b.n	c5a0 <__aeabi_fmul+0x30>
    c664:	230c      	movs	r3, #12
    c666:	4699      	mov	r9, r3
    c668:	3b09      	subs	r3, #9
    c66a:	26ff      	movs	r6, #255	; 0xff
    c66c:	469a      	mov	sl, r3
    c66e:	e797      	b.n	c5a0 <__aeabi_fmul+0x30>
    c670:	0028      	movs	r0, r5
    c672:	f001 fd53 	bl	e11c <__clzsi2>
    c676:	1f43      	subs	r3, r0, #5
    c678:	409d      	lsls	r5, r3
    c67a:	2376      	movs	r3, #118	; 0x76
    c67c:	425b      	negs	r3, r3
    c67e:	1a18      	subs	r0, r3, r0
    c680:	2200      	movs	r2, #0
    c682:	e79d      	b.n	c5c0 <__aeabi_fmul+0x50>
    c684:	2080      	movs	r0, #128	; 0x80
    c686:	2400      	movs	r4, #0
    c688:	03c0      	lsls	r0, r0, #15
    c68a:	22ff      	movs	r2, #255	; 0xff
    c68c:	e7ba      	b.n	c604 <__aeabi_fmul+0x94>
    c68e:	003d      	movs	r5, r7
    c690:	4652      	mov	r2, sl
    c692:	e7ab      	b.n	c5ec <__aeabi_fmul+0x7c>
    c694:	003d      	movs	r5, r7
    c696:	0021      	movs	r1, r4
    c698:	4652      	mov	r2, sl
    c69a:	e7a7      	b.n	c5ec <__aeabi_fmul+0x7c>
    c69c:	0c3b      	lsrs	r3, r7, #16
    c69e:	469c      	mov	ip, r3
    c6a0:	042a      	lsls	r2, r5, #16
    c6a2:	0c12      	lsrs	r2, r2, #16
    c6a4:	0c2b      	lsrs	r3, r5, #16
    c6a6:	0014      	movs	r4, r2
    c6a8:	4660      	mov	r0, ip
    c6aa:	4665      	mov	r5, ip
    c6ac:	043f      	lsls	r7, r7, #16
    c6ae:	0c3f      	lsrs	r7, r7, #16
    c6b0:	437c      	muls	r4, r7
    c6b2:	4342      	muls	r2, r0
    c6b4:	435d      	muls	r5, r3
    c6b6:	437b      	muls	r3, r7
    c6b8:	0c27      	lsrs	r7, r4, #16
    c6ba:	189b      	adds	r3, r3, r2
    c6bc:	18ff      	adds	r7, r7, r3
    c6be:	42ba      	cmp	r2, r7
    c6c0:	d903      	bls.n	c6ca <__aeabi_fmul+0x15a>
    c6c2:	2380      	movs	r3, #128	; 0x80
    c6c4:	025b      	lsls	r3, r3, #9
    c6c6:	469c      	mov	ip, r3
    c6c8:	4465      	add	r5, ip
    c6ca:	0424      	lsls	r4, r4, #16
    c6cc:	043a      	lsls	r2, r7, #16
    c6ce:	0c24      	lsrs	r4, r4, #16
    c6d0:	1912      	adds	r2, r2, r4
    c6d2:	0193      	lsls	r3, r2, #6
    c6d4:	1e5c      	subs	r4, r3, #1
    c6d6:	41a3      	sbcs	r3, r4
    c6d8:	0c3f      	lsrs	r7, r7, #16
    c6da:	0e92      	lsrs	r2, r2, #26
    c6dc:	197d      	adds	r5, r7, r5
    c6de:	431a      	orrs	r2, r3
    c6e0:	01ad      	lsls	r5, r5, #6
    c6e2:	4315      	orrs	r5, r2
    c6e4:	012b      	lsls	r3, r5, #4
    c6e6:	d504      	bpl.n	c6f2 <__aeabi_fmul+0x182>
    c6e8:	2301      	movs	r3, #1
    c6ea:	465e      	mov	r6, fp
    c6ec:	086a      	lsrs	r2, r5, #1
    c6ee:	401d      	ands	r5, r3
    c6f0:	4315      	orrs	r5, r2
    c6f2:	0032      	movs	r2, r6
    c6f4:	327f      	adds	r2, #127	; 0x7f
    c6f6:	2a00      	cmp	r2, #0
    c6f8:	dd25      	ble.n	c746 <__aeabi_fmul+0x1d6>
    c6fa:	076b      	lsls	r3, r5, #29
    c6fc:	d004      	beq.n	c708 <__aeabi_fmul+0x198>
    c6fe:	230f      	movs	r3, #15
    c700:	402b      	ands	r3, r5
    c702:	2b04      	cmp	r3, #4
    c704:	d000      	beq.n	c708 <__aeabi_fmul+0x198>
    c706:	3504      	adds	r5, #4
    c708:	012b      	lsls	r3, r5, #4
    c70a:	d503      	bpl.n	c714 <__aeabi_fmul+0x1a4>
    c70c:	0032      	movs	r2, r6
    c70e:	4b27      	ldr	r3, [pc, #156]	; (c7ac <__aeabi_fmul+0x23c>)
    c710:	3280      	adds	r2, #128	; 0x80
    c712:	401d      	ands	r5, r3
    c714:	2afe      	cmp	r2, #254	; 0xfe
    c716:	dc94      	bgt.n	c642 <__aeabi_fmul+0xd2>
    c718:	2401      	movs	r4, #1
    c71a:	01a8      	lsls	r0, r5, #6
    c71c:	0a40      	lsrs	r0, r0, #9
    c71e:	b2d2      	uxtb	r2, r2
    c720:	400c      	ands	r4, r1
    c722:	e76f      	b.n	c604 <__aeabi_fmul+0x94>
    c724:	2080      	movs	r0, #128	; 0x80
    c726:	03c0      	lsls	r0, r0, #15
    c728:	4207      	tst	r7, r0
    c72a:	d007      	beq.n	c73c <__aeabi_fmul+0x1cc>
    c72c:	4205      	tst	r5, r0
    c72e:	d105      	bne.n	c73c <__aeabi_fmul+0x1cc>
    c730:	4328      	orrs	r0, r5
    c732:	0240      	lsls	r0, r0, #9
    c734:	0a40      	lsrs	r0, r0, #9
    c736:	4644      	mov	r4, r8
    c738:	22ff      	movs	r2, #255	; 0xff
    c73a:	e763      	b.n	c604 <__aeabi_fmul+0x94>
    c73c:	4338      	orrs	r0, r7
    c73e:	0240      	lsls	r0, r0, #9
    c740:	0a40      	lsrs	r0, r0, #9
    c742:	22ff      	movs	r2, #255	; 0xff
    c744:	e75e      	b.n	c604 <__aeabi_fmul+0x94>
    c746:	2401      	movs	r4, #1
    c748:	1aa3      	subs	r3, r4, r2
    c74a:	2b1b      	cmp	r3, #27
    c74c:	dd05      	ble.n	c75a <__aeabi_fmul+0x1ea>
    c74e:	400c      	ands	r4, r1
    c750:	2200      	movs	r2, #0
    c752:	2000      	movs	r0, #0
    c754:	e756      	b.n	c604 <__aeabi_fmul+0x94>
    c756:	465e      	mov	r6, fp
    c758:	e7cb      	b.n	c6f2 <__aeabi_fmul+0x182>
    c75a:	002a      	movs	r2, r5
    c75c:	2020      	movs	r0, #32
    c75e:	40da      	lsrs	r2, r3
    c760:	1ac3      	subs	r3, r0, r3
    c762:	409d      	lsls	r5, r3
    c764:	002b      	movs	r3, r5
    c766:	1e5d      	subs	r5, r3, #1
    c768:	41ab      	sbcs	r3, r5
    c76a:	4313      	orrs	r3, r2
    c76c:	075a      	lsls	r2, r3, #29
    c76e:	d004      	beq.n	c77a <__aeabi_fmul+0x20a>
    c770:	220f      	movs	r2, #15
    c772:	401a      	ands	r2, r3
    c774:	2a04      	cmp	r2, #4
    c776:	d000      	beq.n	c77a <__aeabi_fmul+0x20a>
    c778:	3304      	adds	r3, #4
    c77a:	015a      	lsls	r2, r3, #5
    c77c:	d504      	bpl.n	c788 <__aeabi_fmul+0x218>
    c77e:	2401      	movs	r4, #1
    c780:	2201      	movs	r2, #1
    c782:	400c      	ands	r4, r1
    c784:	2000      	movs	r0, #0
    c786:	e73d      	b.n	c604 <__aeabi_fmul+0x94>
    c788:	2401      	movs	r4, #1
    c78a:	019b      	lsls	r3, r3, #6
    c78c:	0a58      	lsrs	r0, r3, #9
    c78e:	400c      	ands	r4, r1
    c790:	2200      	movs	r2, #0
    c792:	e737      	b.n	c604 <__aeabi_fmul+0x94>
    c794:	2080      	movs	r0, #128	; 0x80
    c796:	2401      	movs	r4, #1
    c798:	03c0      	lsls	r0, r0, #15
    c79a:	4328      	orrs	r0, r5
    c79c:	0240      	lsls	r0, r0, #9
    c79e:	0a40      	lsrs	r0, r0, #9
    c7a0:	400c      	ands	r4, r1
    c7a2:	22ff      	movs	r2, #255	; 0xff
    c7a4:	e72e      	b.n	c604 <__aeabi_fmul+0x94>
    c7a6:	46c0      	nop			; (mov r8, r8)
    c7a8:	000109cc 	.word	0x000109cc
    c7ac:	f7ffffff 	.word	0xf7ffffff

0000c7b0 <__aeabi_f2iz>:
    c7b0:	0241      	lsls	r1, r0, #9
    c7b2:	0043      	lsls	r3, r0, #1
    c7b4:	0fc2      	lsrs	r2, r0, #31
    c7b6:	0a49      	lsrs	r1, r1, #9
    c7b8:	0e1b      	lsrs	r3, r3, #24
    c7ba:	2000      	movs	r0, #0
    c7bc:	2b7e      	cmp	r3, #126	; 0x7e
    c7be:	dd0d      	ble.n	c7dc <__aeabi_f2iz+0x2c>
    c7c0:	2b9d      	cmp	r3, #157	; 0x9d
    c7c2:	dc0c      	bgt.n	c7de <__aeabi_f2iz+0x2e>
    c7c4:	2080      	movs	r0, #128	; 0x80
    c7c6:	0400      	lsls	r0, r0, #16
    c7c8:	4301      	orrs	r1, r0
    c7ca:	2b95      	cmp	r3, #149	; 0x95
    c7cc:	dc0a      	bgt.n	c7e4 <__aeabi_f2iz+0x34>
    c7ce:	2096      	movs	r0, #150	; 0x96
    c7d0:	1ac3      	subs	r3, r0, r3
    c7d2:	40d9      	lsrs	r1, r3
    c7d4:	4248      	negs	r0, r1
    c7d6:	2a00      	cmp	r2, #0
    c7d8:	d100      	bne.n	c7dc <__aeabi_f2iz+0x2c>
    c7da:	0008      	movs	r0, r1
    c7dc:	4770      	bx	lr
    c7de:	4b03      	ldr	r3, [pc, #12]	; (c7ec <__aeabi_f2iz+0x3c>)
    c7e0:	18d0      	adds	r0, r2, r3
    c7e2:	e7fb      	b.n	c7dc <__aeabi_f2iz+0x2c>
    c7e4:	3b96      	subs	r3, #150	; 0x96
    c7e6:	4099      	lsls	r1, r3
    c7e8:	e7f4      	b.n	c7d4 <__aeabi_f2iz+0x24>
    c7ea:	46c0      	nop			; (mov r8, r8)
    c7ec:	7fffffff 	.word	0x7fffffff

0000c7f0 <__aeabi_i2f>:
    c7f0:	b570      	push	{r4, r5, r6, lr}
    c7f2:	2800      	cmp	r0, #0
    c7f4:	d030      	beq.n	c858 <__aeabi_i2f+0x68>
    c7f6:	17c3      	asrs	r3, r0, #31
    c7f8:	18c4      	adds	r4, r0, r3
    c7fa:	405c      	eors	r4, r3
    c7fc:	0fc5      	lsrs	r5, r0, #31
    c7fe:	0020      	movs	r0, r4
    c800:	f001 fc8c 	bl	e11c <__clzsi2>
    c804:	239e      	movs	r3, #158	; 0x9e
    c806:	1a1b      	subs	r3, r3, r0
    c808:	2b96      	cmp	r3, #150	; 0x96
    c80a:	dc0d      	bgt.n	c828 <__aeabi_i2f+0x38>
    c80c:	2296      	movs	r2, #150	; 0x96
    c80e:	1ad2      	subs	r2, r2, r3
    c810:	4094      	lsls	r4, r2
    c812:	002a      	movs	r2, r5
    c814:	0264      	lsls	r4, r4, #9
    c816:	0a64      	lsrs	r4, r4, #9
    c818:	b2db      	uxtb	r3, r3
    c81a:	0264      	lsls	r4, r4, #9
    c81c:	05db      	lsls	r3, r3, #23
    c81e:	0a60      	lsrs	r0, r4, #9
    c820:	07d2      	lsls	r2, r2, #31
    c822:	4318      	orrs	r0, r3
    c824:	4310      	orrs	r0, r2
    c826:	bd70      	pop	{r4, r5, r6, pc}
    c828:	2b99      	cmp	r3, #153	; 0x99
    c82a:	dc19      	bgt.n	c860 <__aeabi_i2f+0x70>
    c82c:	2299      	movs	r2, #153	; 0x99
    c82e:	1ad2      	subs	r2, r2, r3
    c830:	2a00      	cmp	r2, #0
    c832:	dd29      	ble.n	c888 <__aeabi_i2f+0x98>
    c834:	4094      	lsls	r4, r2
    c836:	0022      	movs	r2, r4
    c838:	4c14      	ldr	r4, [pc, #80]	; (c88c <__aeabi_i2f+0x9c>)
    c83a:	4014      	ands	r4, r2
    c83c:	0751      	lsls	r1, r2, #29
    c83e:	d004      	beq.n	c84a <__aeabi_i2f+0x5a>
    c840:	210f      	movs	r1, #15
    c842:	400a      	ands	r2, r1
    c844:	2a04      	cmp	r2, #4
    c846:	d000      	beq.n	c84a <__aeabi_i2f+0x5a>
    c848:	3404      	adds	r4, #4
    c84a:	0162      	lsls	r2, r4, #5
    c84c:	d413      	bmi.n	c876 <__aeabi_i2f+0x86>
    c84e:	01a4      	lsls	r4, r4, #6
    c850:	0a64      	lsrs	r4, r4, #9
    c852:	b2db      	uxtb	r3, r3
    c854:	002a      	movs	r2, r5
    c856:	e7e0      	b.n	c81a <__aeabi_i2f+0x2a>
    c858:	2200      	movs	r2, #0
    c85a:	2300      	movs	r3, #0
    c85c:	2400      	movs	r4, #0
    c85e:	e7dc      	b.n	c81a <__aeabi_i2f+0x2a>
    c860:	2205      	movs	r2, #5
    c862:	0021      	movs	r1, r4
    c864:	1a12      	subs	r2, r2, r0
    c866:	40d1      	lsrs	r1, r2
    c868:	22b9      	movs	r2, #185	; 0xb9
    c86a:	1ad2      	subs	r2, r2, r3
    c86c:	4094      	lsls	r4, r2
    c86e:	1e62      	subs	r2, r4, #1
    c870:	4194      	sbcs	r4, r2
    c872:	430c      	orrs	r4, r1
    c874:	e7da      	b.n	c82c <__aeabi_i2f+0x3c>
    c876:	4b05      	ldr	r3, [pc, #20]	; (c88c <__aeabi_i2f+0x9c>)
    c878:	002a      	movs	r2, r5
    c87a:	401c      	ands	r4, r3
    c87c:	239f      	movs	r3, #159	; 0x9f
    c87e:	01a4      	lsls	r4, r4, #6
    c880:	1a1b      	subs	r3, r3, r0
    c882:	0a64      	lsrs	r4, r4, #9
    c884:	b2db      	uxtb	r3, r3
    c886:	e7c8      	b.n	c81a <__aeabi_i2f+0x2a>
    c888:	0022      	movs	r2, r4
    c88a:	e7d5      	b.n	c838 <__aeabi_i2f+0x48>
    c88c:	fbffffff 	.word	0xfbffffff

0000c890 <__aeabi_dadd>:
    c890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c892:	4645      	mov	r5, r8
    c894:	46de      	mov	lr, fp
    c896:	4657      	mov	r7, sl
    c898:	464e      	mov	r6, r9
    c89a:	030c      	lsls	r4, r1, #12
    c89c:	b5e0      	push	{r5, r6, r7, lr}
    c89e:	004e      	lsls	r6, r1, #1
    c8a0:	0fc9      	lsrs	r1, r1, #31
    c8a2:	4688      	mov	r8, r1
    c8a4:	000d      	movs	r5, r1
    c8a6:	0a61      	lsrs	r1, r4, #9
    c8a8:	0f44      	lsrs	r4, r0, #29
    c8aa:	430c      	orrs	r4, r1
    c8ac:	00c7      	lsls	r7, r0, #3
    c8ae:	0319      	lsls	r1, r3, #12
    c8b0:	0058      	lsls	r0, r3, #1
    c8b2:	0fdb      	lsrs	r3, r3, #31
    c8b4:	469b      	mov	fp, r3
    c8b6:	0a4b      	lsrs	r3, r1, #9
    c8b8:	0f51      	lsrs	r1, r2, #29
    c8ba:	430b      	orrs	r3, r1
    c8bc:	0d76      	lsrs	r6, r6, #21
    c8be:	0d40      	lsrs	r0, r0, #21
    c8c0:	0019      	movs	r1, r3
    c8c2:	00d2      	lsls	r2, r2, #3
    c8c4:	45d8      	cmp	r8, fp
    c8c6:	d100      	bne.n	c8ca <__aeabi_dadd+0x3a>
    c8c8:	e0ae      	b.n	ca28 <__aeabi_dadd+0x198>
    c8ca:	1a35      	subs	r5, r6, r0
    c8cc:	2d00      	cmp	r5, #0
    c8ce:	dc00      	bgt.n	c8d2 <__aeabi_dadd+0x42>
    c8d0:	e0f6      	b.n	cac0 <__aeabi_dadd+0x230>
    c8d2:	2800      	cmp	r0, #0
    c8d4:	d10f      	bne.n	c8f6 <__aeabi_dadd+0x66>
    c8d6:	4313      	orrs	r3, r2
    c8d8:	d100      	bne.n	c8dc <__aeabi_dadd+0x4c>
    c8da:	e0db      	b.n	ca94 <__aeabi_dadd+0x204>
    c8dc:	1e6b      	subs	r3, r5, #1
    c8de:	2b00      	cmp	r3, #0
    c8e0:	d000      	beq.n	c8e4 <__aeabi_dadd+0x54>
    c8e2:	e137      	b.n	cb54 <__aeabi_dadd+0x2c4>
    c8e4:	1aba      	subs	r2, r7, r2
    c8e6:	4297      	cmp	r7, r2
    c8e8:	41bf      	sbcs	r7, r7
    c8ea:	1a64      	subs	r4, r4, r1
    c8ec:	427f      	negs	r7, r7
    c8ee:	1be4      	subs	r4, r4, r7
    c8f0:	2601      	movs	r6, #1
    c8f2:	0017      	movs	r7, r2
    c8f4:	e024      	b.n	c940 <__aeabi_dadd+0xb0>
    c8f6:	4bc6      	ldr	r3, [pc, #792]	; (cc10 <__aeabi_dadd+0x380>)
    c8f8:	429e      	cmp	r6, r3
    c8fa:	d04d      	beq.n	c998 <__aeabi_dadd+0x108>
    c8fc:	2380      	movs	r3, #128	; 0x80
    c8fe:	041b      	lsls	r3, r3, #16
    c900:	4319      	orrs	r1, r3
    c902:	2d38      	cmp	r5, #56	; 0x38
    c904:	dd00      	ble.n	c908 <__aeabi_dadd+0x78>
    c906:	e107      	b.n	cb18 <__aeabi_dadd+0x288>
    c908:	2d1f      	cmp	r5, #31
    c90a:	dd00      	ble.n	c90e <__aeabi_dadd+0x7e>
    c90c:	e138      	b.n	cb80 <__aeabi_dadd+0x2f0>
    c90e:	2020      	movs	r0, #32
    c910:	1b43      	subs	r3, r0, r5
    c912:	469a      	mov	sl, r3
    c914:	000b      	movs	r3, r1
    c916:	4650      	mov	r0, sl
    c918:	4083      	lsls	r3, r0
    c91a:	4699      	mov	r9, r3
    c91c:	0013      	movs	r3, r2
    c91e:	4648      	mov	r0, r9
    c920:	40eb      	lsrs	r3, r5
    c922:	4318      	orrs	r0, r3
    c924:	0003      	movs	r3, r0
    c926:	4650      	mov	r0, sl
    c928:	4082      	lsls	r2, r0
    c92a:	1e50      	subs	r0, r2, #1
    c92c:	4182      	sbcs	r2, r0
    c92e:	40e9      	lsrs	r1, r5
    c930:	431a      	orrs	r2, r3
    c932:	1aba      	subs	r2, r7, r2
    c934:	1a61      	subs	r1, r4, r1
    c936:	4297      	cmp	r7, r2
    c938:	41a4      	sbcs	r4, r4
    c93a:	0017      	movs	r7, r2
    c93c:	4264      	negs	r4, r4
    c93e:	1b0c      	subs	r4, r1, r4
    c940:	0223      	lsls	r3, r4, #8
    c942:	d562      	bpl.n	ca0a <__aeabi_dadd+0x17a>
    c944:	0264      	lsls	r4, r4, #9
    c946:	0a65      	lsrs	r5, r4, #9
    c948:	2d00      	cmp	r5, #0
    c94a:	d100      	bne.n	c94e <__aeabi_dadd+0xbe>
    c94c:	e0df      	b.n	cb0e <__aeabi_dadd+0x27e>
    c94e:	0028      	movs	r0, r5
    c950:	f001 fbe4 	bl	e11c <__clzsi2>
    c954:	0003      	movs	r3, r0
    c956:	3b08      	subs	r3, #8
    c958:	2b1f      	cmp	r3, #31
    c95a:	dd00      	ble.n	c95e <__aeabi_dadd+0xce>
    c95c:	e0d2      	b.n	cb04 <__aeabi_dadd+0x274>
    c95e:	2220      	movs	r2, #32
    c960:	003c      	movs	r4, r7
    c962:	1ad2      	subs	r2, r2, r3
    c964:	409d      	lsls	r5, r3
    c966:	40d4      	lsrs	r4, r2
    c968:	409f      	lsls	r7, r3
    c96a:	4325      	orrs	r5, r4
    c96c:	429e      	cmp	r6, r3
    c96e:	dd00      	ble.n	c972 <__aeabi_dadd+0xe2>
    c970:	e0c4      	b.n	cafc <__aeabi_dadd+0x26c>
    c972:	1b9e      	subs	r6, r3, r6
    c974:	1c73      	adds	r3, r6, #1
    c976:	2b1f      	cmp	r3, #31
    c978:	dd00      	ble.n	c97c <__aeabi_dadd+0xec>
    c97a:	e0f1      	b.n	cb60 <__aeabi_dadd+0x2d0>
    c97c:	2220      	movs	r2, #32
    c97e:	0038      	movs	r0, r7
    c980:	0029      	movs	r1, r5
    c982:	1ad2      	subs	r2, r2, r3
    c984:	40d8      	lsrs	r0, r3
    c986:	4091      	lsls	r1, r2
    c988:	4097      	lsls	r7, r2
    c98a:	002c      	movs	r4, r5
    c98c:	4301      	orrs	r1, r0
    c98e:	1e78      	subs	r0, r7, #1
    c990:	4187      	sbcs	r7, r0
    c992:	40dc      	lsrs	r4, r3
    c994:	2600      	movs	r6, #0
    c996:	430f      	orrs	r7, r1
    c998:	077b      	lsls	r3, r7, #29
    c99a:	d009      	beq.n	c9b0 <__aeabi_dadd+0x120>
    c99c:	230f      	movs	r3, #15
    c99e:	403b      	ands	r3, r7
    c9a0:	2b04      	cmp	r3, #4
    c9a2:	d005      	beq.n	c9b0 <__aeabi_dadd+0x120>
    c9a4:	1d3b      	adds	r3, r7, #4
    c9a6:	42bb      	cmp	r3, r7
    c9a8:	41bf      	sbcs	r7, r7
    c9aa:	427f      	negs	r7, r7
    c9ac:	19e4      	adds	r4, r4, r7
    c9ae:	001f      	movs	r7, r3
    c9b0:	0223      	lsls	r3, r4, #8
    c9b2:	d52c      	bpl.n	ca0e <__aeabi_dadd+0x17e>
    c9b4:	4b96      	ldr	r3, [pc, #600]	; (cc10 <__aeabi_dadd+0x380>)
    c9b6:	3601      	adds	r6, #1
    c9b8:	429e      	cmp	r6, r3
    c9ba:	d100      	bne.n	c9be <__aeabi_dadd+0x12e>
    c9bc:	e09a      	b.n	caf4 <__aeabi_dadd+0x264>
    c9be:	4645      	mov	r5, r8
    c9c0:	4b94      	ldr	r3, [pc, #592]	; (cc14 <__aeabi_dadd+0x384>)
    c9c2:	08ff      	lsrs	r7, r7, #3
    c9c4:	401c      	ands	r4, r3
    c9c6:	0760      	lsls	r0, r4, #29
    c9c8:	0576      	lsls	r6, r6, #21
    c9ca:	0264      	lsls	r4, r4, #9
    c9cc:	4307      	orrs	r7, r0
    c9ce:	0b24      	lsrs	r4, r4, #12
    c9d0:	0d76      	lsrs	r6, r6, #21
    c9d2:	2100      	movs	r1, #0
    c9d4:	0324      	lsls	r4, r4, #12
    c9d6:	0b23      	lsrs	r3, r4, #12
    c9d8:	0d0c      	lsrs	r4, r1, #20
    c9da:	4a8f      	ldr	r2, [pc, #572]	; (cc18 <__aeabi_dadd+0x388>)
    c9dc:	0524      	lsls	r4, r4, #20
    c9de:	431c      	orrs	r4, r3
    c9e0:	4014      	ands	r4, r2
    c9e2:	0533      	lsls	r3, r6, #20
    c9e4:	4323      	orrs	r3, r4
    c9e6:	005b      	lsls	r3, r3, #1
    c9e8:	07ed      	lsls	r5, r5, #31
    c9ea:	085b      	lsrs	r3, r3, #1
    c9ec:	432b      	orrs	r3, r5
    c9ee:	0038      	movs	r0, r7
    c9f0:	0019      	movs	r1, r3
    c9f2:	bc3c      	pop	{r2, r3, r4, r5}
    c9f4:	4690      	mov	r8, r2
    c9f6:	4699      	mov	r9, r3
    c9f8:	46a2      	mov	sl, r4
    c9fa:	46ab      	mov	fp, r5
    c9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c9fe:	4664      	mov	r4, ip
    ca00:	4304      	orrs	r4, r0
    ca02:	d100      	bne.n	ca06 <__aeabi_dadd+0x176>
    ca04:	e211      	b.n	ce2a <__aeabi_dadd+0x59a>
    ca06:	0004      	movs	r4, r0
    ca08:	4667      	mov	r7, ip
    ca0a:	077b      	lsls	r3, r7, #29
    ca0c:	d1c6      	bne.n	c99c <__aeabi_dadd+0x10c>
    ca0e:	4645      	mov	r5, r8
    ca10:	0760      	lsls	r0, r4, #29
    ca12:	08ff      	lsrs	r7, r7, #3
    ca14:	4307      	orrs	r7, r0
    ca16:	08e4      	lsrs	r4, r4, #3
    ca18:	4b7d      	ldr	r3, [pc, #500]	; (cc10 <__aeabi_dadd+0x380>)
    ca1a:	429e      	cmp	r6, r3
    ca1c:	d030      	beq.n	ca80 <__aeabi_dadd+0x1f0>
    ca1e:	0324      	lsls	r4, r4, #12
    ca20:	0576      	lsls	r6, r6, #21
    ca22:	0b24      	lsrs	r4, r4, #12
    ca24:	0d76      	lsrs	r6, r6, #21
    ca26:	e7d4      	b.n	c9d2 <__aeabi_dadd+0x142>
    ca28:	1a33      	subs	r3, r6, r0
    ca2a:	469a      	mov	sl, r3
    ca2c:	2b00      	cmp	r3, #0
    ca2e:	dd78      	ble.n	cb22 <__aeabi_dadd+0x292>
    ca30:	2800      	cmp	r0, #0
    ca32:	d031      	beq.n	ca98 <__aeabi_dadd+0x208>
    ca34:	4876      	ldr	r0, [pc, #472]	; (cc10 <__aeabi_dadd+0x380>)
    ca36:	4286      	cmp	r6, r0
    ca38:	d0ae      	beq.n	c998 <__aeabi_dadd+0x108>
    ca3a:	2080      	movs	r0, #128	; 0x80
    ca3c:	0400      	lsls	r0, r0, #16
    ca3e:	4301      	orrs	r1, r0
    ca40:	4653      	mov	r3, sl
    ca42:	2b38      	cmp	r3, #56	; 0x38
    ca44:	dc00      	bgt.n	ca48 <__aeabi_dadd+0x1b8>
    ca46:	e0e9      	b.n	cc1c <__aeabi_dadd+0x38c>
    ca48:	430a      	orrs	r2, r1
    ca4a:	1e51      	subs	r1, r2, #1
    ca4c:	418a      	sbcs	r2, r1
    ca4e:	2100      	movs	r1, #0
    ca50:	19d2      	adds	r2, r2, r7
    ca52:	42ba      	cmp	r2, r7
    ca54:	41bf      	sbcs	r7, r7
    ca56:	1909      	adds	r1, r1, r4
    ca58:	427c      	negs	r4, r7
    ca5a:	0017      	movs	r7, r2
    ca5c:	190c      	adds	r4, r1, r4
    ca5e:	0223      	lsls	r3, r4, #8
    ca60:	d5d3      	bpl.n	ca0a <__aeabi_dadd+0x17a>
    ca62:	4b6b      	ldr	r3, [pc, #428]	; (cc10 <__aeabi_dadd+0x380>)
    ca64:	3601      	adds	r6, #1
    ca66:	429e      	cmp	r6, r3
    ca68:	d100      	bne.n	ca6c <__aeabi_dadd+0x1dc>
    ca6a:	e13a      	b.n	cce2 <__aeabi_dadd+0x452>
    ca6c:	2001      	movs	r0, #1
    ca6e:	4b69      	ldr	r3, [pc, #420]	; (cc14 <__aeabi_dadd+0x384>)
    ca70:	401c      	ands	r4, r3
    ca72:	087b      	lsrs	r3, r7, #1
    ca74:	4007      	ands	r7, r0
    ca76:	431f      	orrs	r7, r3
    ca78:	07e0      	lsls	r0, r4, #31
    ca7a:	4307      	orrs	r7, r0
    ca7c:	0864      	lsrs	r4, r4, #1
    ca7e:	e78b      	b.n	c998 <__aeabi_dadd+0x108>
    ca80:	0023      	movs	r3, r4
    ca82:	433b      	orrs	r3, r7
    ca84:	d100      	bne.n	ca88 <__aeabi_dadd+0x1f8>
    ca86:	e1cb      	b.n	ce20 <__aeabi_dadd+0x590>
    ca88:	2280      	movs	r2, #128	; 0x80
    ca8a:	0312      	lsls	r2, r2, #12
    ca8c:	4314      	orrs	r4, r2
    ca8e:	0324      	lsls	r4, r4, #12
    ca90:	0b24      	lsrs	r4, r4, #12
    ca92:	e79e      	b.n	c9d2 <__aeabi_dadd+0x142>
    ca94:	002e      	movs	r6, r5
    ca96:	e77f      	b.n	c998 <__aeabi_dadd+0x108>
    ca98:	0008      	movs	r0, r1
    ca9a:	4310      	orrs	r0, r2
    ca9c:	d100      	bne.n	caa0 <__aeabi_dadd+0x210>
    ca9e:	e0b4      	b.n	cc0a <__aeabi_dadd+0x37a>
    caa0:	1e58      	subs	r0, r3, #1
    caa2:	2800      	cmp	r0, #0
    caa4:	d000      	beq.n	caa8 <__aeabi_dadd+0x218>
    caa6:	e0de      	b.n	cc66 <__aeabi_dadd+0x3d6>
    caa8:	18ba      	adds	r2, r7, r2
    caaa:	42ba      	cmp	r2, r7
    caac:	419b      	sbcs	r3, r3
    caae:	1864      	adds	r4, r4, r1
    cab0:	425b      	negs	r3, r3
    cab2:	18e4      	adds	r4, r4, r3
    cab4:	0017      	movs	r7, r2
    cab6:	2601      	movs	r6, #1
    cab8:	0223      	lsls	r3, r4, #8
    caba:	d5a6      	bpl.n	ca0a <__aeabi_dadd+0x17a>
    cabc:	2602      	movs	r6, #2
    cabe:	e7d5      	b.n	ca6c <__aeabi_dadd+0x1dc>
    cac0:	2d00      	cmp	r5, #0
    cac2:	d16e      	bne.n	cba2 <__aeabi_dadd+0x312>
    cac4:	1c70      	adds	r0, r6, #1
    cac6:	0540      	lsls	r0, r0, #21
    cac8:	0d40      	lsrs	r0, r0, #21
    caca:	2801      	cmp	r0, #1
    cacc:	dc00      	bgt.n	cad0 <__aeabi_dadd+0x240>
    cace:	e0f9      	b.n	ccc4 <__aeabi_dadd+0x434>
    cad0:	1ab8      	subs	r0, r7, r2
    cad2:	4684      	mov	ip, r0
    cad4:	4287      	cmp	r7, r0
    cad6:	4180      	sbcs	r0, r0
    cad8:	1ae5      	subs	r5, r4, r3
    cada:	4240      	negs	r0, r0
    cadc:	1a2d      	subs	r5, r5, r0
    cade:	0228      	lsls	r0, r5, #8
    cae0:	d400      	bmi.n	cae4 <__aeabi_dadd+0x254>
    cae2:	e089      	b.n	cbf8 <__aeabi_dadd+0x368>
    cae4:	1bd7      	subs	r7, r2, r7
    cae6:	42ba      	cmp	r2, r7
    cae8:	4192      	sbcs	r2, r2
    caea:	1b1c      	subs	r4, r3, r4
    caec:	4252      	negs	r2, r2
    caee:	1aa5      	subs	r5, r4, r2
    caf0:	46d8      	mov	r8, fp
    caf2:	e729      	b.n	c948 <__aeabi_dadd+0xb8>
    caf4:	4645      	mov	r5, r8
    caf6:	2400      	movs	r4, #0
    caf8:	2700      	movs	r7, #0
    cafa:	e76a      	b.n	c9d2 <__aeabi_dadd+0x142>
    cafc:	4c45      	ldr	r4, [pc, #276]	; (cc14 <__aeabi_dadd+0x384>)
    cafe:	1af6      	subs	r6, r6, r3
    cb00:	402c      	ands	r4, r5
    cb02:	e749      	b.n	c998 <__aeabi_dadd+0x108>
    cb04:	003d      	movs	r5, r7
    cb06:	3828      	subs	r0, #40	; 0x28
    cb08:	4085      	lsls	r5, r0
    cb0a:	2700      	movs	r7, #0
    cb0c:	e72e      	b.n	c96c <__aeabi_dadd+0xdc>
    cb0e:	0038      	movs	r0, r7
    cb10:	f001 fb04 	bl	e11c <__clzsi2>
    cb14:	3020      	adds	r0, #32
    cb16:	e71d      	b.n	c954 <__aeabi_dadd+0xc4>
    cb18:	430a      	orrs	r2, r1
    cb1a:	1e51      	subs	r1, r2, #1
    cb1c:	418a      	sbcs	r2, r1
    cb1e:	2100      	movs	r1, #0
    cb20:	e707      	b.n	c932 <__aeabi_dadd+0xa2>
    cb22:	2b00      	cmp	r3, #0
    cb24:	d000      	beq.n	cb28 <__aeabi_dadd+0x298>
    cb26:	e0f3      	b.n	cd10 <__aeabi_dadd+0x480>
    cb28:	1c70      	adds	r0, r6, #1
    cb2a:	0543      	lsls	r3, r0, #21
    cb2c:	0d5b      	lsrs	r3, r3, #21
    cb2e:	2b01      	cmp	r3, #1
    cb30:	dc00      	bgt.n	cb34 <__aeabi_dadd+0x2a4>
    cb32:	e0ad      	b.n	cc90 <__aeabi_dadd+0x400>
    cb34:	4b36      	ldr	r3, [pc, #216]	; (cc10 <__aeabi_dadd+0x380>)
    cb36:	4298      	cmp	r0, r3
    cb38:	d100      	bne.n	cb3c <__aeabi_dadd+0x2ac>
    cb3a:	e0d1      	b.n	cce0 <__aeabi_dadd+0x450>
    cb3c:	18ba      	adds	r2, r7, r2
    cb3e:	42ba      	cmp	r2, r7
    cb40:	41bf      	sbcs	r7, r7
    cb42:	1864      	adds	r4, r4, r1
    cb44:	427f      	negs	r7, r7
    cb46:	19e4      	adds	r4, r4, r7
    cb48:	07e7      	lsls	r7, r4, #31
    cb4a:	0852      	lsrs	r2, r2, #1
    cb4c:	4317      	orrs	r7, r2
    cb4e:	0864      	lsrs	r4, r4, #1
    cb50:	0006      	movs	r6, r0
    cb52:	e721      	b.n	c998 <__aeabi_dadd+0x108>
    cb54:	482e      	ldr	r0, [pc, #184]	; (cc10 <__aeabi_dadd+0x380>)
    cb56:	4285      	cmp	r5, r0
    cb58:	d100      	bne.n	cb5c <__aeabi_dadd+0x2cc>
    cb5a:	e093      	b.n	cc84 <__aeabi_dadd+0x3f4>
    cb5c:	001d      	movs	r5, r3
    cb5e:	e6d0      	b.n	c902 <__aeabi_dadd+0x72>
    cb60:	0029      	movs	r1, r5
    cb62:	3e1f      	subs	r6, #31
    cb64:	40f1      	lsrs	r1, r6
    cb66:	2b20      	cmp	r3, #32
    cb68:	d100      	bne.n	cb6c <__aeabi_dadd+0x2dc>
    cb6a:	e08d      	b.n	cc88 <__aeabi_dadd+0x3f8>
    cb6c:	2240      	movs	r2, #64	; 0x40
    cb6e:	1ad3      	subs	r3, r2, r3
    cb70:	409d      	lsls	r5, r3
    cb72:	432f      	orrs	r7, r5
    cb74:	1e7d      	subs	r5, r7, #1
    cb76:	41af      	sbcs	r7, r5
    cb78:	2400      	movs	r4, #0
    cb7a:	430f      	orrs	r7, r1
    cb7c:	2600      	movs	r6, #0
    cb7e:	e744      	b.n	ca0a <__aeabi_dadd+0x17a>
    cb80:	002b      	movs	r3, r5
    cb82:	0008      	movs	r0, r1
    cb84:	3b20      	subs	r3, #32
    cb86:	40d8      	lsrs	r0, r3
    cb88:	0003      	movs	r3, r0
    cb8a:	2d20      	cmp	r5, #32
    cb8c:	d100      	bne.n	cb90 <__aeabi_dadd+0x300>
    cb8e:	e07d      	b.n	cc8c <__aeabi_dadd+0x3fc>
    cb90:	2040      	movs	r0, #64	; 0x40
    cb92:	1b45      	subs	r5, r0, r5
    cb94:	40a9      	lsls	r1, r5
    cb96:	430a      	orrs	r2, r1
    cb98:	1e51      	subs	r1, r2, #1
    cb9a:	418a      	sbcs	r2, r1
    cb9c:	2100      	movs	r1, #0
    cb9e:	431a      	orrs	r2, r3
    cba0:	e6c7      	b.n	c932 <__aeabi_dadd+0xa2>
    cba2:	2e00      	cmp	r6, #0
    cba4:	d050      	beq.n	cc48 <__aeabi_dadd+0x3b8>
    cba6:	4e1a      	ldr	r6, [pc, #104]	; (cc10 <__aeabi_dadd+0x380>)
    cba8:	42b0      	cmp	r0, r6
    cbaa:	d057      	beq.n	cc5c <__aeabi_dadd+0x3cc>
    cbac:	2680      	movs	r6, #128	; 0x80
    cbae:	426b      	negs	r3, r5
    cbb0:	4699      	mov	r9, r3
    cbb2:	0436      	lsls	r6, r6, #16
    cbb4:	4334      	orrs	r4, r6
    cbb6:	464b      	mov	r3, r9
    cbb8:	2b38      	cmp	r3, #56	; 0x38
    cbba:	dd00      	ble.n	cbbe <__aeabi_dadd+0x32e>
    cbbc:	e0d6      	b.n	cd6c <__aeabi_dadd+0x4dc>
    cbbe:	2b1f      	cmp	r3, #31
    cbc0:	dd00      	ble.n	cbc4 <__aeabi_dadd+0x334>
    cbc2:	e135      	b.n	ce30 <__aeabi_dadd+0x5a0>
    cbc4:	2620      	movs	r6, #32
    cbc6:	1af5      	subs	r5, r6, r3
    cbc8:	0026      	movs	r6, r4
    cbca:	40ae      	lsls	r6, r5
    cbcc:	46b2      	mov	sl, r6
    cbce:	003e      	movs	r6, r7
    cbd0:	40de      	lsrs	r6, r3
    cbd2:	46ac      	mov	ip, r5
    cbd4:	0035      	movs	r5, r6
    cbd6:	4656      	mov	r6, sl
    cbd8:	432e      	orrs	r6, r5
    cbda:	4665      	mov	r5, ip
    cbdc:	40af      	lsls	r7, r5
    cbde:	1e7d      	subs	r5, r7, #1
    cbe0:	41af      	sbcs	r7, r5
    cbe2:	40dc      	lsrs	r4, r3
    cbe4:	4337      	orrs	r7, r6
    cbe6:	1bd7      	subs	r7, r2, r7
    cbe8:	42ba      	cmp	r2, r7
    cbea:	4192      	sbcs	r2, r2
    cbec:	1b0c      	subs	r4, r1, r4
    cbee:	4252      	negs	r2, r2
    cbf0:	1aa4      	subs	r4, r4, r2
    cbf2:	0006      	movs	r6, r0
    cbf4:	46d8      	mov	r8, fp
    cbf6:	e6a3      	b.n	c940 <__aeabi_dadd+0xb0>
    cbf8:	4664      	mov	r4, ip
    cbfa:	4667      	mov	r7, ip
    cbfc:	432c      	orrs	r4, r5
    cbfe:	d000      	beq.n	cc02 <__aeabi_dadd+0x372>
    cc00:	e6a2      	b.n	c948 <__aeabi_dadd+0xb8>
    cc02:	2500      	movs	r5, #0
    cc04:	2600      	movs	r6, #0
    cc06:	2700      	movs	r7, #0
    cc08:	e706      	b.n	ca18 <__aeabi_dadd+0x188>
    cc0a:	001e      	movs	r6, r3
    cc0c:	e6c4      	b.n	c998 <__aeabi_dadd+0x108>
    cc0e:	46c0      	nop			; (mov r8, r8)
    cc10:	000007ff 	.word	0x000007ff
    cc14:	ff7fffff 	.word	0xff7fffff
    cc18:	800fffff 	.word	0x800fffff
    cc1c:	2b1f      	cmp	r3, #31
    cc1e:	dc63      	bgt.n	cce8 <__aeabi_dadd+0x458>
    cc20:	2020      	movs	r0, #32
    cc22:	1ac3      	subs	r3, r0, r3
    cc24:	0008      	movs	r0, r1
    cc26:	4098      	lsls	r0, r3
    cc28:	469c      	mov	ip, r3
    cc2a:	4683      	mov	fp, r0
    cc2c:	4653      	mov	r3, sl
    cc2e:	0010      	movs	r0, r2
    cc30:	40d8      	lsrs	r0, r3
    cc32:	0003      	movs	r3, r0
    cc34:	4658      	mov	r0, fp
    cc36:	4318      	orrs	r0, r3
    cc38:	4663      	mov	r3, ip
    cc3a:	409a      	lsls	r2, r3
    cc3c:	1e53      	subs	r3, r2, #1
    cc3e:	419a      	sbcs	r2, r3
    cc40:	4653      	mov	r3, sl
    cc42:	4302      	orrs	r2, r0
    cc44:	40d9      	lsrs	r1, r3
    cc46:	e703      	b.n	ca50 <__aeabi_dadd+0x1c0>
    cc48:	0026      	movs	r6, r4
    cc4a:	433e      	orrs	r6, r7
    cc4c:	d006      	beq.n	cc5c <__aeabi_dadd+0x3cc>
    cc4e:	43eb      	mvns	r3, r5
    cc50:	4699      	mov	r9, r3
    cc52:	2b00      	cmp	r3, #0
    cc54:	d0c7      	beq.n	cbe6 <__aeabi_dadd+0x356>
    cc56:	4e94      	ldr	r6, [pc, #592]	; (cea8 <__aeabi_dadd+0x618>)
    cc58:	42b0      	cmp	r0, r6
    cc5a:	d1ac      	bne.n	cbb6 <__aeabi_dadd+0x326>
    cc5c:	000c      	movs	r4, r1
    cc5e:	0017      	movs	r7, r2
    cc60:	0006      	movs	r6, r0
    cc62:	46d8      	mov	r8, fp
    cc64:	e698      	b.n	c998 <__aeabi_dadd+0x108>
    cc66:	4b90      	ldr	r3, [pc, #576]	; (cea8 <__aeabi_dadd+0x618>)
    cc68:	459a      	cmp	sl, r3
    cc6a:	d00b      	beq.n	cc84 <__aeabi_dadd+0x3f4>
    cc6c:	4682      	mov	sl, r0
    cc6e:	e6e7      	b.n	ca40 <__aeabi_dadd+0x1b0>
    cc70:	2800      	cmp	r0, #0
    cc72:	d000      	beq.n	cc76 <__aeabi_dadd+0x3e6>
    cc74:	e09e      	b.n	cdb4 <__aeabi_dadd+0x524>
    cc76:	0018      	movs	r0, r3
    cc78:	4310      	orrs	r0, r2
    cc7a:	d100      	bne.n	cc7e <__aeabi_dadd+0x3ee>
    cc7c:	e0e9      	b.n	ce52 <__aeabi_dadd+0x5c2>
    cc7e:	001c      	movs	r4, r3
    cc80:	0017      	movs	r7, r2
    cc82:	46d8      	mov	r8, fp
    cc84:	4e88      	ldr	r6, [pc, #544]	; (cea8 <__aeabi_dadd+0x618>)
    cc86:	e687      	b.n	c998 <__aeabi_dadd+0x108>
    cc88:	2500      	movs	r5, #0
    cc8a:	e772      	b.n	cb72 <__aeabi_dadd+0x2e2>
    cc8c:	2100      	movs	r1, #0
    cc8e:	e782      	b.n	cb96 <__aeabi_dadd+0x306>
    cc90:	0023      	movs	r3, r4
    cc92:	433b      	orrs	r3, r7
    cc94:	2e00      	cmp	r6, #0
    cc96:	d000      	beq.n	cc9a <__aeabi_dadd+0x40a>
    cc98:	e0ab      	b.n	cdf2 <__aeabi_dadd+0x562>
    cc9a:	2b00      	cmp	r3, #0
    cc9c:	d100      	bne.n	cca0 <__aeabi_dadd+0x410>
    cc9e:	e0e7      	b.n	ce70 <__aeabi_dadd+0x5e0>
    cca0:	000b      	movs	r3, r1
    cca2:	4313      	orrs	r3, r2
    cca4:	d100      	bne.n	cca8 <__aeabi_dadd+0x418>
    cca6:	e677      	b.n	c998 <__aeabi_dadd+0x108>
    cca8:	18ba      	adds	r2, r7, r2
    ccaa:	42ba      	cmp	r2, r7
    ccac:	41bf      	sbcs	r7, r7
    ccae:	1864      	adds	r4, r4, r1
    ccb0:	427f      	negs	r7, r7
    ccb2:	19e4      	adds	r4, r4, r7
    ccb4:	0223      	lsls	r3, r4, #8
    ccb6:	d400      	bmi.n	ccba <__aeabi_dadd+0x42a>
    ccb8:	e0f2      	b.n	cea0 <__aeabi_dadd+0x610>
    ccba:	4b7c      	ldr	r3, [pc, #496]	; (ceac <__aeabi_dadd+0x61c>)
    ccbc:	0017      	movs	r7, r2
    ccbe:	401c      	ands	r4, r3
    ccc0:	0006      	movs	r6, r0
    ccc2:	e669      	b.n	c998 <__aeabi_dadd+0x108>
    ccc4:	0020      	movs	r0, r4
    ccc6:	4338      	orrs	r0, r7
    ccc8:	2e00      	cmp	r6, #0
    ccca:	d1d1      	bne.n	cc70 <__aeabi_dadd+0x3e0>
    cccc:	2800      	cmp	r0, #0
    ccce:	d15b      	bne.n	cd88 <__aeabi_dadd+0x4f8>
    ccd0:	001c      	movs	r4, r3
    ccd2:	4314      	orrs	r4, r2
    ccd4:	d100      	bne.n	ccd8 <__aeabi_dadd+0x448>
    ccd6:	e0a8      	b.n	ce2a <__aeabi_dadd+0x59a>
    ccd8:	001c      	movs	r4, r3
    ccda:	0017      	movs	r7, r2
    ccdc:	46d8      	mov	r8, fp
    ccde:	e65b      	b.n	c998 <__aeabi_dadd+0x108>
    cce0:	0006      	movs	r6, r0
    cce2:	2400      	movs	r4, #0
    cce4:	2700      	movs	r7, #0
    cce6:	e697      	b.n	ca18 <__aeabi_dadd+0x188>
    cce8:	4650      	mov	r0, sl
    ccea:	000b      	movs	r3, r1
    ccec:	3820      	subs	r0, #32
    ccee:	40c3      	lsrs	r3, r0
    ccf0:	4699      	mov	r9, r3
    ccf2:	4653      	mov	r3, sl
    ccf4:	2b20      	cmp	r3, #32
    ccf6:	d100      	bne.n	ccfa <__aeabi_dadd+0x46a>
    ccf8:	e095      	b.n	ce26 <__aeabi_dadd+0x596>
    ccfa:	2340      	movs	r3, #64	; 0x40
    ccfc:	4650      	mov	r0, sl
    ccfe:	1a1b      	subs	r3, r3, r0
    cd00:	4099      	lsls	r1, r3
    cd02:	430a      	orrs	r2, r1
    cd04:	1e51      	subs	r1, r2, #1
    cd06:	418a      	sbcs	r2, r1
    cd08:	464b      	mov	r3, r9
    cd0a:	2100      	movs	r1, #0
    cd0c:	431a      	orrs	r2, r3
    cd0e:	e69f      	b.n	ca50 <__aeabi_dadd+0x1c0>
    cd10:	2e00      	cmp	r6, #0
    cd12:	d130      	bne.n	cd76 <__aeabi_dadd+0x4e6>
    cd14:	0026      	movs	r6, r4
    cd16:	433e      	orrs	r6, r7
    cd18:	d067      	beq.n	cdea <__aeabi_dadd+0x55a>
    cd1a:	43db      	mvns	r3, r3
    cd1c:	469a      	mov	sl, r3
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d01c      	beq.n	cd5c <__aeabi_dadd+0x4cc>
    cd22:	4e61      	ldr	r6, [pc, #388]	; (cea8 <__aeabi_dadd+0x618>)
    cd24:	42b0      	cmp	r0, r6
    cd26:	d060      	beq.n	cdea <__aeabi_dadd+0x55a>
    cd28:	4653      	mov	r3, sl
    cd2a:	2b38      	cmp	r3, #56	; 0x38
    cd2c:	dd00      	ble.n	cd30 <__aeabi_dadd+0x4a0>
    cd2e:	e096      	b.n	ce5e <__aeabi_dadd+0x5ce>
    cd30:	2b1f      	cmp	r3, #31
    cd32:	dd00      	ble.n	cd36 <__aeabi_dadd+0x4a6>
    cd34:	e09f      	b.n	ce76 <__aeabi_dadd+0x5e6>
    cd36:	2620      	movs	r6, #32
    cd38:	1af3      	subs	r3, r6, r3
    cd3a:	0026      	movs	r6, r4
    cd3c:	409e      	lsls	r6, r3
    cd3e:	469c      	mov	ip, r3
    cd40:	46b3      	mov	fp, r6
    cd42:	4653      	mov	r3, sl
    cd44:	003e      	movs	r6, r7
    cd46:	40de      	lsrs	r6, r3
    cd48:	0033      	movs	r3, r6
    cd4a:	465e      	mov	r6, fp
    cd4c:	431e      	orrs	r6, r3
    cd4e:	4663      	mov	r3, ip
    cd50:	409f      	lsls	r7, r3
    cd52:	1e7b      	subs	r3, r7, #1
    cd54:	419f      	sbcs	r7, r3
    cd56:	4653      	mov	r3, sl
    cd58:	40dc      	lsrs	r4, r3
    cd5a:	4337      	orrs	r7, r6
    cd5c:	18bf      	adds	r7, r7, r2
    cd5e:	4297      	cmp	r7, r2
    cd60:	4192      	sbcs	r2, r2
    cd62:	1864      	adds	r4, r4, r1
    cd64:	4252      	negs	r2, r2
    cd66:	18a4      	adds	r4, r4, r2
    cd68:	0006      	movs	r6, r0
    cd6a:	e678      	b.n	ca5e <__aeabi_dadd+0x1ce>
    cd6c:	4327      	orrs	r7, r4
    cd6e:	1e7c      	subs	r4, r7, #1
    cd70:	41a7      	sbcs	r7, r4
    cd72:	2400      	movs	r4, #0
    cd74:	e737      	b.n	cbe6 <__aeabi_dadd+0x356>
    cd76:	4e4c      	ldr	r6, [pc, #304]	; (cea8 <__aeabi_dadd+0x618>)
    cd78:	42b0      	cmp	r0, r6
    cd7a:	d036      	beq.n	cdea <__aeabi_dadd+0x55a>
    cd7c:	2680      	movs	r6, #128	; 0x80
    cd7e:	425b      	negs	r3, r3
    cd80:	0436      	lsls	r6, r6, #16
    cd82:	469a      	mov	sl, r3
    cd84:	4334      	orrs	r4, r6
    cd86:	e7cf      	b.n	cd28 <__aeabi_dadd+0x498>
    cd88:	0018      	movs	r0, r3
    cd8a:	4310      	orrs	r0, r2
    cd8c:	d100      	bne.n	cd90 <__aeabi_dadd+0x500>
    cd8e:	e603      	b.n	c998 <__aeabi_dadd+0x108>
    cd90:	1ab8      	subs	r0, r7, r2
    cd92:	4684      	mov	ip, r0
    cd94:	4567      	cmp	r7, ip
    cd96:	41ad      	sbcs	r5, r5
    cd98:	1ae0      	subs	r0, r4, r3
    cd9a:	426d      	negs	r5, r5
    cd9c:	1b40      	subs	r0, r0, r5
    cd9e:	0205      	lsls	r5, r0, #8
    cda0:	d400      	bmi.n	cda4 <__aeabi_dadd+0x514>
    cda2:	e62c      	b.n	c9fe <__aeabi_dadd+0x16e>
    cda4:	1bd7      	subs	r7, r2, r7
    cda6:	42ba      	cmp	r2, r7
    cda8:	4192      	sbcs	r2, r2
    cdaa:	1b1c      	subs	r4, r3, r4
    cdac:	4252      	negs	r2, r2
    cdae:	1aa4      	subs	r4, r4, r2
    cdb0:	46d8      	mov	r8, fp
    cdb2:	e5f1      	b.n	c998 <__aeabi_dadd+0x108>
    cdb4:	0018      	movs	r0, r3
    cdb6:	4310      	orrs	r0, r2
    cdb8:	d100      	bne.n	cdbc <__aeabi_dadd+0x52c>
    cdba:	e763      	b.n	cc84 <__aeabi_dadd+0x3f4>
    cdbc:	08f8      	lsrs	r0, r7, #3
    cdbe:	0767      	lsls	r7, r4, #29
    cdc0:	4307      	orrs	r7, r0
    cdc2:	2080      	movs	r0, #128	; 0x80
    cdc4:	08e4      	lsrs	r4, r4, #3
    cdc6:	0300      	lsls	r0, r0, #12
    cdc8:	4204      	tst	r4, r0
    cdca:	d008      	beq.n	cdde <__aeabi_dadd+0x54e>
    cdcc:	08dd      	lsrs	r5, r3, #3
    cdce:	4205      	tst	r5, r0
    cdd0:	d105      	bne.n	cdde <__aeabi_dadd+0x54e>
    cdd2:	08d2      	lsrs	r2, r2, #3
    cdd4:	0759      	lsls	r1, r3, #29
    cdd6:	4311      	orrs	r1, r2
    cdd8:	000f      	movs	r7, r1
    cdda:	002c      	movs	r4, r5
    cddc:	46d8      	mov	r8, fp
    cdde:	0f7b      	lsrs	r3, r7, #29
    cde0:	00e4      	lsls	r4, r4, #3
    cde2:	431c      	orrs	r4, r3
    cde4:	00ff      	lsls	r7, r7, #3
    cde6:	4e30      	ldr	r6, [pc, #192]	; (cea8 <__aeabi_dadd+0x618>)
    cde8:	e5d6      	b.n	c998 <__aeabi_dadd+0x108>
    cdea:	000c      	movs	r4, r1
    cdec:	0017      	movs	r7, r2
    cdee:	0006      	movs	r6, r0
    cdf0:	e5d2      	b.n	c998 <__aeabi_dadd+0x108>
    cdf2:	2b00      	cmp	r3, #0
    cdf4:	d038      	beq.n	ce68 <__aeabi_dadd+0x5d8>
    cdf6:	000b      	movs	r3, r1
    cdf8:	4313      	orrs	r3, r2
    cdfa:	d100      	bne.n	cdfe <__aeabi_dadd+0x56e>
    cdfc:	e742      	b.n	cc84 <__aeabi_dadd+0x3f4>
    cdfe:	08f8      	lsrs	r0, r7, #3
    ce00:	0767      	lsls	r7, r4, #29
    ce02:	4307      	orrs	r7, r0
    ce04:	2080      	movs	r0, #128	; 0x80
    ce06:	08e4      	lsrs	r4, r4, #3
    ce08:	0300      	lsls	r0, r0, #12
    ce0a:	4204      	tst	r4, r0
    ce0c:	d0e7      	beq.n	cdde <__aeabi_dadd+0x54e>
    ce0e:	08cb      	lsrs	r3, r1, #3
    ce10:	4203      	tst	r3, r0
    ce12:	d1e4      	bne.n	cdde <__aeabi_dadd+0x54e>
    ce14:	08d2      	lsrs	r2, r2, #3
    ce16:	0749      	lsls	r1, r1, #29
    ce18:	4311      	orrs	r1, r2
    ce1a:	000f      	movs	r7, r1
    ce1c:	001c      	movs	r4, r3
    ce1e:	e7de      	b.n	cdde <__aeabi_dadd+0x54e>
    ce20:	2700      	movs	r7, #0
    ce22:	2400      	movs	r4, #0
    ce24:	e5d5      	b.n	c9d2 <__aeabi_dadd+0x142>
    ce26:	2100      	movs	r1, #0
    ce28:	e76b      	b.n	cd02 <__aeabi_dadd+0x472>
    ce2a:	2500      	movs	r5, #0
    ce2c:	2700      	movs	r7, #0
    ce2e:	e5f3      	b.n	ca18 <__aeabi_dadd+0x188>
    ce30:	464e      	mov	r6, r9
    ce32:	0025      	movs	r5, r4
    ce34:	3e20      	subs	r6, #32
    ce36:	40f5      	lsrs	r5, r6
    ce38:	464b      	mov	r3, r9
    ce3a:	002e      	movs	r6, r5
    ce3c:	2b20      	cmp	r3, #32
    ce3e:	d02d      	beq.n	ce9c <__aeabi_dadd+0x60c>
    ce40:	2540      	movs	r5, #64	; 0x40
    ce42:	1aed      	subs	r5, r5, r3
    ce44:	40ac      	lsls	r4, r5
    ce46:	4327      	orrs	r7, r4
    ce48:	1e7c      	subs	r4, r7, #1
    ce4a:	41a7      	sbcs	r7, r4
    ce4c:	2400      	movs	r4, #0
    ce4e:	4337      	orrs	r7, r6
    ce50:	e6c9      	b.n	cbe6 <__aeabi_dadd+0x356>
    ce52:	2480      	movs	r4, #128	; 0x80
    ce54:	2500      	movs	r5, #0
    ce56:	0324      	lsls	r4, r4, #12
    ce58:	4e13      	ldr	r6, [pc, #76]	; (cea8 <__aeabi_dadd+0x618>)
    ce5a:	2700      	movs	r7, #0
    ce5c:	e5dc      	b.n	ca18 <__aeabi_dadd+0x188>
    ce5e:	4327      	orrs	r7, r4
    ce60:	1e7c      	subs	r4, r7, #1
    ce62:	41a7      	sbcs	r7, r4
    ce64:	2400      	movs	r4, #0
    ce66:	e779      	b.n	cd5c <__aeabi_dadd+0x4cc>
    ce68:	000c      	movs	r4, r1
    ce6a:	0017      	movs	r7, r2
    ce6c:	4e0e      	ldr	r6, [pc, #56]	; (cea8 <__aeabi_dadd+0x618>)
    ce6e:	e593      	b.n	c998 <__aeabi_dadd+0x108>
    ce70:	000c      	movs	r4, r1
    ce72:	0017      	movs	r7, r2
    ce74:	e590      	b.n	c998 <__aeabi_dadd+0x108>
    ce76:	4656      	mov	r6, sl
    ce78:	0023      	movs	r3, r4
    ce7a:	3e20      	subs	r6, #32
    ce7c:	40f3      	lsrs	r3, r6
    ce7e:	4699      	mov	r9, r3
    ce80:	4653      	mov	r3, sl
    ce82:	2b20      	cmp	r3, #32
    ce84:	d00e      	beq.n	cea4 <__aeabi_dadd+0x614>
    ce86:	2340      	movs	r3, #64	; 0x40
    ce88:	4656      	mov	r6, sl
    ce8a:	1b9b      	subs	r3, r3, r6
    ce8c:	409c      	lsls	r4, r3
    ce8e:	4327      	orrs	r7, r4
    ce90:	1e7c      	subs	r4, r7, #1
    ce92:	41a7      	sbcs	r7, r4
    ce94:	464b      	mov	r3, r9
    ce96:	2400      	movs	r4, #0
    ce98:	431f      	orrs	r7, r3
    ce9a:	e75f      	b.n	cd5c <__aeabi_dadd+0x4cc>
    ce9c:	2400      	movs	r4, #0
    ce9e:	e7d2      	b.n	ce46 <__aeabi_dadd+0x5b6>
    cea0:	0017      	movs	r7, r2
    cea2:	e5b2      	b.n	ca0a <__aeabi_dadd+0x17a>
    cea4:	2400      	movs	r4, #0
    cea6:	e7f2      	b.n	ce8e <__aeabi_dadd+0x5fe>
    cea8:	000007ff 	.word	0x000007ff
    ceac:	ff7fffff 	.word	0xff7fffff

0000ceb0 <__aeabi_ddiv>:
    ceb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ceb2:	4657      	mov	r7, sl
    ceb4:	4645      	mov	r5, r8
    ceb6:	46de      	mov	lr, fp
    ceb8:	464e      	mov	r6, r9
    ceba:	b5e0      	push	{r5, r6, r7, lr}
    cebc:	004c      	lsls	r4, r1, #1
    cebe:	030e      	lsls	r6, r1, #12
    cec0:	b087      	sub	sp, #28
    cec2:	4683      	mov	fp, r0
    cec4:	4692      	mov	sl, r2
    cec6:	001d      	movs	r5, r3
    cec8:	4680      	mov	r8, r0
    ceca:	0b36      	lsrs	r6, r6, #12
    cecc:	0d64      	lsrs	r4, r4, #21
    cece:	0fcf      	lsrs	r7, r1, #31
    ced0:	2c00      	cmp	r4, #0
    ced2:	d04f      	beq.n	cf74 <__aeabi_ddiv+0xc4>
    ced4:	4b6f      	ldr	r3, [pc, #444]	; (d094 <__aeabi_ddiv+0x1e4>)
    ced6:	429c      	cmp	r4, r3
    ced8:	d035      	beq.n	cf46 <__aeabi_ddiv+0x96>
    ceda:	2380      	movs	r3, #128	; 0x80
    cedc:	0f42      	lsrs	r2, r0, #29
    cede:	041b      	lsls	r3, r3, #16
    cee0:	00f6      	lsls	r6, r6, #3
    cee2:	4313      	orrs	r3, r2
    cee4:	4333      	orrs	r3, r6
    cee6:	4699      	mov	r9, r3
    cee8:	00c3      	lsls	r3, r0, #3
    ceea:	4698      	mov	r8, r3
    ceec:	4b6a      	ldr	r3, [pc, #424]	; (d098 <__aeabi_ddiv+0x1e8>)
    ceee:	2600      	movs	r6, #0
    cef0:	469c      	mov	ip, r3
    cef2:	2300      	movs	r3, #0
    cef4:	4464      	add	r4, ip
    cef6:	9303      	str	r3, [sp, #12]
    cef8:	032b      	lsls	r3, r5, #12
    cefa:	0b1b      	lsrs	r3, r3, #12
    cefc:	469b      	mov	fp, r3
    cefe:	006b      	lsls	r3, r5, #1
    cf00:	0fed      	lsrs	r5, r5, #31
    cf02:	4650      	mov	r0, sl
    cf04:	0d5b      	lsrs	r3, r3, #21
    cf06:	9501      	str	r5, [sp, #4]
    cf08:	d05e      	beq.n	cfc8 <__aeabi_ddiv+0x118>
    cf0a:	4a62      	ldr	r2, [pc, #392]	; (d094 <__aeabi_ddiv+0x1e4>)
    cf0c:	4293      	cmp	r3, r2
    cf0e:	d053      	beq.n	cfb8 <__aeabi_ddiv+0x108>
    cf10:	465a      	mov	r2, fp
    cf12:	00d1      	lsls	r1, r2, #3
    cf14:	2280      	movs	r2, #128	; 0x80
    cf16:	0f40      	lsrs	r0, r0, #29
    cf18:	0412      	lsls	r2, r2, #16
    cf1a:	4302      	orrs	r2, r0
    cf1c:	430a      	orrs	r2, r1
    cf1e:	4693      	mov	fp, r2
    cf20:	4652      	mov	r2, sl
    cf22:	00d1      	lsls	r1, r2, #3
    cf24:	4a5c      	ldr	r2, [pc, #368]	; (d098 <__aeabi_ddiv+0x1e8>)
    cf26:	4694      	mov	ip, r2
    cf28:	2200      	movs	r2, #0
    cf2a:	4463      	add	r3, ip
    cf2c:	0038      	movs	r0, r7
    cf2e:	4068      	eors	r0, r5
    cf30:	4684      	mov	ip, r0
    cf32:	9002      	str	r0, [sp, #8]
    cf34:	1ae4      	subs	r4, r4, r3
    cf36:	4316      	orrs	r6, r2
    cf38:	2e0f      	cmp	r6, #15
    cf3a:	d900      	bls.n	cf3e <__aeabi_ddiv+0x8e>
    cf3c:	e0b4      	b.n	d0a8 <__aeabi_ddiv+0x1f8>
    cf3e:	4b57      	ldr	r3, [pc, #348]	; (d09c <__aeabi_ddiv+0x1ec>)
    cf40:	00b6      	lsls	r6, r6, #2
    cf42:	599b      	ldr	r3, [r3, r6]
    cf44:	469f      	mov	pc, r3
    cf46:	0003      	movs	r3, r0
    cf48:	4333      	orrs	r3, r6
    cf4a:	4699      	mov	r9, r3
    cf4c:	d16c      	bne.n	d028 <__aeabi_ddiv+0x178>
    cf4e:	2300      	movs	r3, #0
    cf50:	4698      	mov	r8, r3
    cf52:	3302      	adds	r3, #2
    cf54:	2608      	movs	r6, #8
    cf56:	9303      	str	r3, [sp, #12]
    cf58:	e7ce      	b.n	cef8 <__aeabi_ddiv+0x48>
    cf5a:	46cb      	mov	fp, r9
    cf5c:	4641      	mov	r1, r8
    cf5e:	9a03      	ldr	r2, [sp, #12]
    cf60:	9701      	str	r7, [sp, #4]
    cf62:	2a02      	cmp	r2, #2
    cf64:	d165      	bne.n	d032 <__aeabi_ddiv+0x182>
    cf66:	9b01      	ldr	r3, [sp, #4]
    cf68:	4c4a      	ldr	r4, [pc, #296]	; (d094 <__aeabi_ddiv+0x1e4>)
    cf6a:	469c      	mov	ip, r3
    cf6c:	2300      	movs	r3, #0
    cf6e:	2200      	movs	r2, #0
    cf70:	4698      	mov	r8, r3
    cf72:	e06b      	b.n	d04c <__aeabi_ddiv+0x19c>
    cf74:	0003      	movs	r3, r0
    cf76:	4333      	orrs	r3, r6
    cf78:	4699      	mov	r9, r3
    cf7a:	d04e      	beq.n	d01a <__aeabi_ddiv+0x16a>
    cf7c:	2e00      	cmp	r6, #0
    cf7e:	d100      	bne.n	cf82 <__aeabi_ddiv+0xd2>
    cf80:	e1bc      	b.n	d2fc <__aeabi_ddiv+0x44c>
    cf82:	0030      	movs	r0, r6
    cf84:	f001 f8ca 	bl	e11c <__clzsi2>
    cf88:	0003      	movs	r3, r0
    cf8a:	3b0b      	subs	r3, #11
    cf8c:	2b1c      	cmp	r3, #28
    cf8e:	dd00      	ble.n	cf92 <__aeabi_ddiv+0xe2>
    cf90:	e1ac      	b.n	d2ec <__aeabi_ddiv+0x43c>
    cf92:	221d      	movs	r2, #29
    cf94:	1ad3      	subs	r3, r2, r3
    cf96:	465a      	mov	r2, fp
    cf98:	0001      	movs	r1, r0
    cf9a:	40da      	lsrs	r2, r3
    cf9c:	3908      	subs	r1, #8
    cf9e:	408e      	lsls	r6, r1
    cfa0:	0013      	movs	r3, r2
    cfa2:	4333      	orrs	r3, r6
    cfa4:	4699      	mov	r9, r3
    cfa6:	465b      	mov	r3, fp
    cfa8:	408b      	lsls	r3, r1
    cfaa:	4698      	mov	r8, r3
    cfac:	2300      	movs	r3, #0
    cfae:	4c3c      	ldr	r4, [pc, #240]	; (d0a0 <__aeabi_ddiv+0x1f0>)
    cfb0:	2600      	movs	r6, #0
    cfb2:	1a24      	subs	r4, r4, r0
    cfb4:	9303      	str	r3, [sp, #12]
    cfb6:	e79f      	b.n	cef8 <__aeabi_ddiv+0x48>
    cfb8:	4651      	mov	r1, sl
    cfba:	465a      	mov	r2, fp
    cfbc:	4311      	orrs	r1, r2
    cfbe:	d129      	bne.n	d014 <__aeabi_ddiv+0x164>
    cfc0:	2200      	movs	r2, #0
    cfc2:	4693      	mov	fp, r2
    cfc4:	3202      	adds	r2, #2
    cfc6:	e7b1      	b.n	cf2c <__aeabi_ddiv+0x7c>
    cfc8:	4659      	mov	r1, fp
    cfca:	4301      	orrs	r1, r0
    cfcc:	d01e      	beq.n	d00c <__aeabi_ddiv+0x15c>
    cfce:	465b      	mov	r3, fp
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	d100      	bne.n	cfd6 <__aeabi_ddiv+0x126>
    cfd4:	e19e      	b.n	d314 <__aeabi_ddiv+0x464>
    cfd6:	4658      	mov	r0, fp
    cfd8:	f001 f8a0 	bl	e11c <__clzsi2>
    cfdc:	0003      	movs	r3, r0
    cfde:	3b0b      	subs	r3, #11
    cfe0:	2b1c      	cmp	r3, #28
    cfe2:	dd00      	ble.n	cfe6 <__aeabi_ddiv+0x136>
    cfe4:	e18f      	b.n	d306 <__aeabi_ddiv+0x456>
    cfe6:	0002      	movs	r2, r0
    cfe8:	4659      	mov	r1, fp
    cfea:	3a08      	subs	r2, #8
    cfec:	4091      	lsls	r1, r2
    cfee:	468b      	mov	fp, r1
    cff0:	211d      	movs	r1, #29
    cff2:	1acb      	subs	r3, r1, r3
    cff4:	4651      	mov	r1, sl
    cff6:	40d9      	lsrs	r1, r3
    cff8:	000b      	movs	r3, r1
    cffa:	4659      	mov	r1, fp
    cffc:	430b      	orrs	r3, r1
    cffe:	4651      	mov	r1, sl
    d000:	469b      	mov	fp, r3
    d002:	4091      	lsls	r1, r2
    d004:	4b26      	ldr	r3, [pc, #152]	; (d0a0 <__aeabi_ddiv+0x1f0>)
    d006:	2200      	movs	r2, #0
    d008:	1a1b      	subs	r3, r3, r0
    d00a:	e78f      	b.n	cf2c <__aeabi_ddiv+0x7c>
    d00c:	2300      	movs	r3, #0
    d00e:	2201      	movs	r2, #1
    d010:	469b      	mov	fp, r3
    d012:	e78b      	b.n	cf2c <__aeabi_ddiv+0x7c>
    d014:	4651      	mov	r1, sl
    d016:	2203      	movs	r2, #3
    d018:	e788      	b.n	cf2c <__aeabi_ddiv+0x7c>
    d01a:	2300      	movs	r3, #0
    d01c:	4698      	mov	r8, r3
    d01e:	3301      	adds	r3, #1
    d020:	2604      	movs	r6, #4
    d022:	2400      	movs	r4, #0
    d024:	9303      	str	r3, [sp, #12]
    d026:	e767      	b.n	cef8 <__aeabi_ddiv+0x48>
    d028:	2303      	movs	r3, #3
    d02a:	46b1      	mov	r9, r6
    d02c:	9303      	str	r3, [sp, #12]
    d02e:	260c      	movs	r6, #12
    d030:	e762      	b.n	cef8 <__aeabi_ddiv+0x48>
    d032:	2a03      	cmp	r2, #3
    d034:	d100      	bne.n	d038 <__aeabi_ddiv+0x188>
    d036:	e25c      	b.n	d4f2 <__aeabi_ddiv+0x642>
    d038:	9b01      	ldr	r3, [sp, #4]
    d03a:	2a01      	cmp	r2, #1
    d03c:	d000      	beq.n	d040 <__aeabi_ddiv+0x190>
    d03e:	e1e4      	b.n	d40a <__aeabi_ddiv+0x55a>
    d040:	4013      	ands	r3, r2
    d042:	469c      	mov	ip, r3
    d044:	2300      	movs	r3, #0
    d046:	2400      	movs	r4, #0
    d048:	2200      	movs	r2, #0
    d04a:	4698      	mov	r8, r3
    d04c:	2100      	movs	r1, #0
    d04e:	0312      	lsls	r2, r2, #12
    d050:	0b13      	lsrs	r3, r2, #12
    d052:	0d0a      	lsrs	r2, r1, #20
    d054:	0512      	lsls	r2, r2, #20
    d056:	431a      	orrs	r2, r3
    d058:	0523      	lsls	r3, r4, #20
    d05a:	4c12      	ldr	r4, [pc, #72]	; (d0a4 <__aeabi_ddiv+0x1f4>)
    d05c:	4640      	mov	r0, r8
    d05e:	4022      	ands	r2, r4
    d060:	4313      	orrs	r3, r2
    d062:	4662      	mov	r2, ip
    d064:	005b      	lsls	r3, r3, #1
    d066:	07d2      	lsls	r2, r2, #31
    d068:	085b      	lsrs	r3, r3, #1
    d06a:	4313      	orrs	r3, r2
    d06c:	0019      	movs	r1, r3
    d06e:	b007      	add	sp, #28
    d070:	bc3c      	pop	{r2, r3, r4, r5}
    d072:	4690      	mov	r8, r2
    d074:	4699      	mov	r9, r3
    d076:	46a2      	mov	sl, r4
    d078:	46ab      	mov	fp, r5
    d07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d07c:	2300      	movs	r3, #0
    d07e:	2280      	movs	r2, #128	; 0x80
    d080:	469c      	mov	ip, r3
    d082:	0312      	lsls	r2, r2, #12
    d084:	4698      	mov	r8, r3
    d086:	4c03      	ldr	r4, [pc, #12]	; (d094 <__aeabi_ddiv+0x1e4>)
    d088:	e7e0      	b.n	d04c <__aeabi_ddiv+0x19c>
    d08a:	2300      	movs	r3, #0
    d08c:	4c01      	ldr	r4, [pc, #4]	; (d094 <__aeabi_ddiv+0x1e4>)
    d08e:	2200      	movs	r2, #0
    d090:	4698      	mov	r8, r3
    d092:	e7db      	b.n	d04c <__aeabi_ddiv+0x19c>
    d094:	000007ff 	.word	0x000007ff
    d098:	fffffc01 	.word	0xfffffc01
    d09c:	00010a0c 	.word	0x00010a0c
    d0a0:	fffffc0d 	.word	0xfffffc0d
    d0a4:	800fffff 	.word	0x800fffff
    d0a8:	45d9      	cmp	r9, fp
    d0aa:	d900      	bls.n	d0ae <__aeabi_ddiv+0x1fe>
    d0ac:	e139      	b.n	d322 <__aeabi_ddiv+0x472>
    d0ae:	d100      	bne.n	d0b2 <__aeabi_ddiv+0x202>
    d0b0:	e134      	b.n	d31c <__aeabi_ddiv+0x46c>
    d0b2:	2300      	movs	r3, #0
    d0b4:	4646      	mov	r6, r8
    d0b6:	464d      	mov	r5, r9
    d0b8:	469a      	mov	sl, r3
    d0ba:	3c01      	subs	r4, #1
    d0bc:	465b      	mov	r3, fp
    d0be:	0e0a      	lsrs	r2, r1, #24
    d0c0:	021b      	lsls	r3, r3, #8
    d0c2:	431a      	orrs	r2, r3
    d0c4:	020b      	lsls	r3, r1, #8
    d0c6:	0c17      	lsrs	r7, r2, #16
    d0c8:	9303      	str	r3, [sp, #12]
    d0ca:	0413      	lsls	r3, r2, #16
    d0cc:	0c1b      	lsrs	r3, r3, #16
    d0ce:	0039      	movs	r1, r7
    d0d0:	0028      	movs	r0, r5
    d0d2:	4690      	mov	r8, r2
    d0d4:	9301      	str	r3, [sp, #4]
    d0d6:	f7ff f995 	bl	c404 <__udivsi3>
    d0da:	0002      	movs	r2, r0
    d0dc:	9b01      	ldr	r3, [sp, #4]
    d0de:	4683      	mov	fp, r0
    d0e0:	435a      	muls	r2, r3
    d0e2:	0028      	movs	r0, r5
    d0e4:	0039      	movs	r1, r7
    d0e6:	4691      	mov	r9, r2
    d0e8:	f7ff fa12 	bl	c510 <__aeabi_uidivmod>
    d0ec:	0c35      	lsrs	r5, r6, #16
    d0ee:	0409      	lsls	r1, r1, #16
    d0f0:	430d      	orrs	r5, r1
    d0f2:	45a9      	cmp	r9, r5
    d0f4:	d90d      	bls.n	d112 <__aeabi_ddiv+0x262>
    d0f6:	465b      	mov	r3, fp
    d0f8:	4445      	add	r5, r8
    d0fa:	3b01      	subs	r3, #1
    d0fc:	45a8      	cmp	r8, r5
    d0fe:	d900      	bls.n	d102 <__aeabi_ddiv+0x252>
    d100:	e13a      	b.n	d378 <__aeabi_ddiv+0x4c8>
    d102:	45a9      	cmp	r9, r5
    d104:	d800      	bhi.n	d108 <__aeabi_ddiv+0x258>
    d106:	e137      	b.n	d378 <__aeabi_ddiv+0x4c8>
    d108:	2302      	movs	r3, #2
    d10a:	425b      	negs	r3, r3
    d10c:	469c      	mov	ip, r3
    d10e:	4445      	add	r5, r8
    d110:	44e3      	add	fp, ip
    d112:	464b      	mov	r3, r9
    d114:	1aeb      	subs	r3, r5, r3
    d116:	0039      	movs	r1, r7
    d118:	0018      	movs	r0, r3
    d11a:	9304      	str	r3, [sp, #16]
    d11c:	f7ff f972 	bl	c404 <__udivsi3>
    d120:	9b01      	ldr	r3, [sp, #4]
    d122:	0005      	movs	r5, r0
    d124:	4343      	muls	r3, r0
    d126:	0039      	movs	r1, r7
    d128:	9804      	ldr	r0, [sp, #16]
    d12a:	4699      	mov	r9, r3
    d12c:	f7ff f9f0 	bl	c510 <__aeabi_uidivmod>
    d130:	0433      	lsls	r3, r6, #16
    d132:	0409      	lsls	r1, r1, #16
    d134:	0c1b      	lsrs	r3, r3, #16
    d136:	430b      	orrs	r3, r1
    d138:	4599      	cmp	r9, r3
    d13a:	d909      	bls.n	d150 <__aeabi_ddiv+0x2a0>
    d13c:	4443      	add	r3, r8
    d13e:	1e6a      	subs	r2, r5, #1
    d140:	4598      	cmp	r8, r3
    d142:	d900      	bls.n	d146 <__aeabi_ddiv+0x296>
    d144:	e11a      	b.n	d37c <__aeabi_ddiv+0x4cc>
    d146:	4599      	cmp	r9, r3
    d148:	d800      	bhi.n	d14c <__aeabi_ddiv+0x29c>
    d14a:	e117      	b.n	d37c <__aeabi_ddiv+0x4cc>
    d14c:	3d02      	subs	r5, #2
    d14e:	4443      	add	r3, r8
    d150:	464a      	mov	r2, r9
    d152:	1a9b      	subs	r3, r3, r2
    d154:	465a      	mov	r2, fp
    d156:	0412      	lsls	r2, r2, #16
    d158:	432a      	orrs	r2, r5
    d15a:	9903      	ldr	r1, [sp, #12]
    d15c:	4693      	mov	fp, r2
    d15e:	0c10      	lsrs	r0, r2, #16
    d160:	0c0a      	lsrs	r2, r1, #16
    d162:	4691      	mov	r9, r2
    d164:	0409      	lsls	r1, r1, #16
    d166:	465a      	mov	r2, fp
    d168:	0c09      	lsrs	r1, r1, #16
    d16a:	464e      	mov	r6, r9
    d16c:	000d      	movs	r5, r1
    d16e:	0412      	lsls	r2, r2, #16
    d170:	0c12      	lsrs	r2, r2, #16
    d172:	4345      	muls	r5, r0
    d174:	9105      	str	r1, [sp, #20]
    d176:	4351      	muls	r1, r2
    d178:	4372      	muls	r2, r6
    d17a:	4370      	muls	r0, r6
    d17c:	1952      	adds	r2, r2, r5
    d17e:	0c0e      	lsrs	r6, r1, #16
    d180:	18b2      	adds	r2, r6, r2
    d182:	4295      	cmp	r5, r2
    d184:	d903      	bls.n	d18e <__aeabi_ddiv+0x2de>
    d186:	2580      	movs	r5, #128	; 0x80
    d188:	026d      	lsls	r5, r5, #9
    d18a:	46ac      	mov	ip, r5
    d18c:	4460      	add	r0, ip
    d18e:	0c15      	lsrs	r5, r2, #16
    d190:	0409      	lsls	r1, r1, #16
    d192:	0412      	lsls	r2, r2, #16
    d194:	0c09      	lsrs	r1, r1, #16
    d196:	1828      	adds	r0, r5, r0
    d198:	1852      	adds	r2, r2, r1
    d19a:	4283      	cmp	r3, r0
    d19c:	d200      	bcs.n	d1a0 <__aeabi_ddiv+0x2f0>
    d19e:	e0ce      	b.n	d33e <__aeabi_ddiv+0x48e>
    d1a0:	d100      	bne.n	d1a4 <__aeabi_ddiv+0x2f4>
    d1a2:	e0c8      	b.n	d336 <__aeabi_ddiv+0x486>
    d1a4:	1a1d      	subs	r5, r3, r0
    d1a6:	4653      	mov	r3, sl
    d1a8:	1a9e      	subs	r6, r3, r2
    d1aa:	45b2      	cmp	sl, r6
    d1ac:	4192      	sbcs	r2, r2
    d1ae:	4252      	negs	r2, r2
    d1b0:	1aab      	subs	r3, r5, r2
    d1b2:	469a      	mov	sl, r3
    d1b4:	4598      	cmp	r8, r3
    d1b6:	d100      	bne.n	d1ba <__aeabi_ddiv+0x30a>
    d1b8:	e117      	b.n	d3ea <__aeabi_ddiv+0x53a>
    d1ba:	0039      	movs	r1, r7
    d1bc:	0018      	movs	r0, r3
    d1be:	f7ff f921 	bl	c404 <__udivsi3>
    d1c2:	9b01      	ldr	r3, [sp, #4]
    d1c4:	0005      	movs	r5, r0
    d1c6:	4343      	muls	r3, r0
    d1c8:	0039      	movs	r1, r7
    d1ca:	4650      	mov	r0, sl
    d1cc:	9304      	str	r3, [sp, #16]
    d1ce:	f7ff f99f 	bl	c510 <__aeabi_uidivmod>
    d1d2:	9804      	ldr	r0, [sp, #16]
    d1d4:	040b      	lsls	r3, r1, #16
    d1d6:	0c31      	lsrs	r1, r6, #16
    d1d8:	4319      	orrs	r1, r3
    d1da:	4288      	cmp	r0, r1
    d1dc:	d909      	bls.n	d1f2 <__aeabi_ddiv+0x342>
    d1de:	4441      	add	r1, r8
    d1e0:	1e6b      	subs	r3, r5, #1
    d1e2:	4588      	cmp	r8, r1
    d1e4:	d900      	bls.n	d1e8 <__aeabi_ddiv+0x338>
    d1e6:	e107      	b.n	d3f8 <__aeabi_ddiv+0x548>
    d1e8:	4288      	cmp	r0, r1
    d1ea:	d800      	bhi.n	d1ee <__aeabi_ddiv+0x33e>
    d1ec:	e104      	b.n	d3f8 <__aeabi_ddiv+0x548>
    d1ee:	3d02      	subs	r5, #2
    d1f0:	4441      	add	r1, r8
    d1f2:	9b04      	ldr	r3, [sp, #16]
    d1f4:	1acb      	subs	r3, r1, r3
    d1f6:	0018      	movs	r0, r3
    d1f8:	0039      	movs	r1, r7
    d1fa:	9304      	str	r3, [sp, #16]
    d1fc:	f7ff f902 	bl	c404 <__udivsi3>
    d200:	9b01      	ldr	r3, [sp, #4]
    d202:	4682      	mov	sl, r0
    d204:	4343      	muls	r3, r0
    d206:	0039      	movs	r1, r7
    d208:	9804      	ldr	r0, [sp, #16]
    d20a:	9301      	str	r3, [sp, #4]
    d20c:	f7ff f980 	bl	c510 <__aeabi_uidivmod>
    d210:	9801      	ldr	r0, [sp, #4]
    d212:	040b      	lsls	r3, r1, #16
    d214:	0431      	lsls	r1, r6, #16
    d216:	0c09      	lsrs	r1, r1, #16
    d218:	4319      	orrs	r1, r3
    d21a:	4288      	cmp	r0, r1
    d21c:	d90d      	bls.n	d23a <__aeabi_ddiv+0x38a>
    d21e:	4653      	mov	r3, sl
    d220:	4441      	add	r1, r8
    d222:	3b01      	subs	r3, #1
    d224:	4588      	cmp	r8, r1
    d226:	d900      	bls.n	d22a <__aeabi_ddiv+0x37a>
    d228:	e0e8      	b.n	d3fc <__aeabi_ddiv+0x54c>
    d22a:	4288      	cmp	r0, r1
    d22c:	d800      	bhi.n	d230 <__aeabi_ddiv+0x380>
    d22e:	e0e5      	b.n	d3fc <__aeabi_ddiv+0x54c>
    d230:	2302      	movs	r3, #2
    d232:	425b      	negs	r3, r3
    d234:	469c      	mov	ip, r3
    d236:	4441      	add	r1, r8
    d238:	44e2      	add	sl, ip
    d23a:	9b01      	ldr	r3, [sp, #4]
    d23c:	042d      	lsls	r5, r5, #16
    d23e:	1ace      	subs	r6, r1, r3
    d240:	4651      	mov	r1, sl
    d242:	4329      	orrs	r1, r5
    d244:	9d05      	ldr	r5, [sp, #20]
    d246:	464f      	mov	r7, r9
    d248:	002a      	movs	r2, r5
    d24a:	040b      	lsls	r3, r1, #16
    d24c:	0c08      	lsrs	r0, r1, #16
    d24e:	0c1b      	lsrs	r3, r3, #16
    d250:	435a      	muls	r2, r3
    d252:	4345      	muls	r5, r0
    d254:	437b      	muls	r3, r7
    d256:	4378      	muls	r0, r7
    d258:	195b      	adds	r3, r3, r5
    d25a:	0c17      	lsrs	r7, r2, #16
    d25c:	18fb      	adds	r3, r7, r3
    d25e:	429d      	cmp	r5, r3
    d260:	d903      	bls.n	d26a <__aeabi_ddiv+0x3ba>
    d262:	2580      	movs	r5, #128	; 0x80
    d264:	026d      	lsls	r5, r5, #9
    d266:	46ac      	mov	ip, r5
    d268:	4460      	add	r0, ip
    d26a:	0c1d      	lsrs	r5, r3, #16
    d26c:	0412      	lsls	r2, r2, #16
    d26e:	041b      	lsls	r3, r3, #16
    d270:	0c12      	lsrs	r2, r2, #16
    d272:	1828      	adds	r0, r5, r0
    d274:	189b      	adds	r3, r3, r2
    d276:	4286      	cmp	r6, r0
    d278:	d200      	bcs.n	d27c <__aeabi_ddiv+0x3cc>
    d27a:	e093      	b.n	d3a4 <__aeabi_ddiv+0x4f4>
    d27c:	d100      	bne.n	d280 <__aeabi_ddiv+0x3d0>
    d27e:	e08e      	b.n	d39e <__aeabi_ddiv+0x4ee>
    d280:	2301      	movs	r3, #1
    d282:	4319      	orrs	r1, r3
    d284:	4ba0      	ldr	r3, [pc, #640]	; (d508 <__aeabi_ddiv+0x658>)
    d286:	18e3      	adds	r3, r4, r3
    d288:	2b00      	cmp	r3, #0
    d28a:	dc00      	bgt.n	d28e <__aeabi_ddiv+0x3de>
    d28c:	e099      	b.n	d3c2 <__aeabi_ddiv+0x512>
    d28e:	074a      	lsls	r2, r1, #29
    d290:	d000      	beq.n	d294 <__aeabi_ddiv+0x3e4>
    d292:	e09e      	b.n	d3d2 <__aeabi_ddiv+0x522>
    d294:	465a      	mov	r2, fp
    d296:	01d2      	lsls	r2, r2, #7
    d298:	d506      	bpl.n	d2a8 <__aeabi_ddiv+0x3f8>
    d29a:	465a      	mov	r2, fp
    d29c:	4b9b      	ldr	r3, [pc, #620]	; (d50c <__aeabi_ddiv+0x65c>)
    d29e:	401a      	ands	r2, r3
    d2a0:	2380      	movs	r3, #128	; 0x80
    d2a2:	4693      	mov	fp, r2
    d2a4:	00db      	lsls	r3, r3, #3
    d2a6:	18e3      	adds	r3, r4, r3
    d2a8:	4a99      	ldr	r2, [pc, #612]	; (d510 <__aeabi_ddiv+0x660>)
    d2aa:	4293      	cmp	r3, r2
    d2ac:	dd68      	ble.n	d380 <__aeabi_ddiv+0x4d0>
    d2ae:	2301      	movs	r3, #1
    d2b0:	9a02      	ldr	r2, [sp, #8]
    d2b2:	4c98      	ldr	r4, [pc, #608]	; (d514 <__aeabi_ddiv+0x664>)
    d2b4:	401a      	ands	r2, r3
    d2b6:	2300      	movs	r3, #0
    d2b8:	4694      	mov	ip, r2
    d2ba:	4698      	mov	r8, r3
    d2bc:	2200      	movs	r2, #0
    d2be:	e6c5      	b.n	d04c <__aeabi_ddiv+0x19c>
    d2c0:	2280      	movs	r2, #128	; 0x80
    d2c2:	464b      	mov	r3, r9
    d2c4:	0312      	lsls	r2, r2, #12
    d2c6:	4213      	tst	r3, r2
    d2c8:	d00a      	beq.n	d2e0 <__aeabi_ddiv+0x430>
    d2ca:	465b      	mov	r3, fp
    d2cc:	4213      	tst	r3, r2
    d2ce:	d106      	bne.n	d2de <__aeabi_ddiv+0x42e>
    d2d0:	431a      	orrs	r2, r3
    d2d2:	0312      	lsls	r2, r2, #12
    d2d4:	0b12      	lsrs	r2, r2, #12
    d2d6:	46ac      	mov	ip, r5
    d2d8:	4688      	mov	r8, r1
    d2da:	4c8e      	ldr	r4, [pc, #568]	; (d514 <__aeabi_ddiv+0x664>)
    d2dc:	e6b6      	b.n	d04c <__aeabi_ddiv+0x19c>
    d2de:	464b      	mov	r3, r9
    d2e0:	431a      	orrs	r2, r3
    d2e2:	0312      	lsls	r2, r2, #12
    d2e4:	0b12      	lsrs	r2, r2, #12
    d2e6:	46bc      	mov	ip, r7
    d2e8:	4c8a      	ldr	r4, [pc, #552]	; (d514 <__aeabi_ddiv+0x664>)
    d2ea:	e6af      	b.n	d04c <__aeabi_ddiv+0x19c>
    d2ec:	0003      	movs	r3, r0
    d2ee:	465a      	mov	r2, fp
    d2f0:	3b28      	subs	r3, #40	; 0x28
    d2f2:	409a      	lsls	r2, r3
    d2f4:	2300      	movs	r3, #0
    d2f6:	4691      	mov	r9, r2
    d2f8:	4698      	mov	r8, r3
    d2fa:	e657      	b.n	cfac <__aeabi_ddiv+0xfc>
    d2fc:	4658      	mov	r0, fp
    d2fe:	f000 ff0d 	bl	e11c <__clzsi2>
    d302:	3020      	adds	r0, #32
    d304:	e640      	b.n	cf88 <__aeabi_ddiv+0xd8>
    d306:	0003      	movs	r3, r0
    d308:	4652      	mov	r2, sl
    d30a:	3b28      	subs	r3, #40	; 0x28
    d30c:	409a      	lsls	r2, r3
    d30e:	2100      	movs	r1, #0
    d310:	4693      	mov	fp, r2
    d312:	e677      	b.n	d004 <__aeabi_ddiv+0x154>
    d314:	f000 ff02 	bl	e11c <__clzsi2>
    d318:	3020      	adds	r0, #32
    d31a:	e65f      	b.n	cfdc <__aeabi_ddiv+0x12c>
    d31c:	4588      	cmp	r8, r1
    d31e:	d200      	bcs.n	d322 <__aeabi_ddiv+0x472>
    d320:	e6c7      	b.n	d0b2 <__aeabi_ddiv+0x202>
    d322:	464b      	mov	r3, r9
    d324:	07de      	lsls	r6, r3, #31
    d326:	085d      	lsrs	r5, r3, #1
    d328:	4643      	mov	r3, r8
    d32a:	085b      	lsrs	r3, r3, #1
    d32c:	431e      	orrs	r6, r3
    d32e:	4643      	mov	r3, r8
    d330:	07db      	lsls	r3, r3, #31
    d332:	469a      	mov	sl, r3
    d334:	e6c2      	b.n	d0bc <__aeabi_ddiv+0x20c>
    d336:	2500      	movs	r5, #0
    d338:	4592      	cmp	sl, r2
    d33a:	d300      	bcc.n	d33e <__aeabi_ddiv+0x48e>
    d33c:	e733      	b.n	d1a6 <__aeabi_ddiv+0x2f6>
    d33e:	9e03      	ldr	r6, [sp, #12]
    d340:	4659      	mov	r1, fp
    d342:	46b4      	mov	ip, r6
    d344:	44e2      	add	sl, ip
    d346:	45b2      	cmp	sl, r6
    d348:	41ad      	sbcs	r5, r5
    d34a:	426d      	negs	r5, r5
    d34c:	4445      	add	r5, r8
    d34e:	18eb      	adds	r3, r5, r3
    d350:	3901      	subs	r1, #1
    d352:	4598      	cmp	r8, r3
    d354:	d207      	bcs.n	d366 <__aeabi_ddiv+0x4b6>
    d356:	4298      	cmp	r0, r3
    d358:	d900      	bls.n	d35c <__aeabi_ddiv+0x4ac>
    d35a:	e07f      	b.n	d45c <__aeabi_ddiv+0x5ac>
    d35c:	d100      	bne.n	d360 <__aeabi_ddiv+0x4b0>
    d35e:	e0bc      	b.n	d4da <__aeabi_ddiv+0x62a>
    d360:	1a1d      	subs	r5, r3, r0
    d362:	468b      	mov	fp, r1
    d364:	e71f      	b.n	d1a6 <__aeabi_ddiv+0x2f6>
    d366:	4598      	cmp	r8, r3
    d368:	d1fa      	bne.n	d360 <__aeabi_ddiv+0x4b0>
    d36a:	9d03      	ldr	r5, [sp, #12]
    d36c:	4555      	cmp	r5, sl
    d36e:	d9f2      	bls.n	d356 <__aeabi_ddiv+0x4a6>
    d370:	4643      	mov	r3, r8
    d372:	468b      	mov	fp, r1
    d374:	1a1d      	subs	r5, r3, r0
    d376:	e716      	b.n	d1a6 <__aeabi_ddiv+0x2f6>
    d378:	469b      	mov	fp, r3
    d37a:	e6ca      	b.n	d112 <__aeabi_ddiv+0x262>
    d37c:	0015      	movs	r5, r2
    d37e:	e6e7      	b.n	d150 <__aeabi_ddiv+0x2a0>
    d380:	465a      	mov	r2, fp
    d382:	08c9      	lsrs	r1, r1, #3
    d384:	0752      	lsls	r2, r2, #29
    d386:	430a      	orrs	r2, r1
    d388:	055b      	lsls	r3, r3, #21
    d38a:	4690      	mov	r8, r2
    d38c:	0d5c      	lsrs	r4, r3, #21
    d38e:	465a      	mov	r2, fp
    d390:	2301      	movs	r3, #1
    d392:	9902      	ldr	r1, [sp, #8]
    d394:	0252      	lsls	r2, r2, #9
    d396:	4019      	ands	r1, r3
    d398:	0b12      	lsrs	r2, r2, #12
    d39a:	468c      	mov	ip, r1
    d39c:	e656      	b.n	d04c <__aeabi_ddiv+0x19c>
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d100      	bne.n	d3a4 <__aeabi_ddiv+0x4f4>
    d3a2:	e76f      	b.n	d284 <__aeabi_ddiv+0x3d4>
    d3a4:	4446      	add	r6, r8
    d3a6:	1e4a      	subs	r2, r1, #1
    d3a8:	45b0      	cmp	r8, r6
    d3aa:	d929      	bls.n	d400 <__aeabi_ddiv+0x550>
    d3ac:	0011      	movs	r1, r2
    d3ae:	4286      	cmp	r6, r0
    d3b0:	d000      	beq.n	d3b4 <__aeabi_ddiv+0x504>
    d3b2:	e765      	b.n	d280 <__aeabi_ddiv+0x3d0>
    d3b4:	9a03      	ldr	r2, [sp, #12]
    d3b6:	4293      	cmp	r3, r2
    d3b8:	d000      	beq.n	d3bc <__aeabi_ddiv+0x50c>
    d3ba:	e761      	b.n	d280 <__aeabi_ddiv+0x3d0>
    d3bc:	e762      	b.n	d284 <__aeabi_ddiv+0x3d4>
    d3be:	2101      	movs	r1, #1
    d3c0:	4249      	negs	r1, r1
    d3c2:	2001      	movs	r0, #1
    d3c4:	1ac2      	subs	r2, r0, r3
    d3c6:	2a38      	cmp	r2, #56	; 0x38
    d3c8:	dd21      	ble.n	d40e <__aeabi_ddiv+0x55e>
    d3ca:	9b02      	ldr	r3, [sp, #8]
    d3cc:	4003      	ands	r3, r0
    d3ce:	469c      	mov	ip, r3
    d3d0:	e638      	b.n	d044 <__aeabi_ddiv+0x194>
    d3d2:	220f      	movs	r2, #15
    d3d4:	400a      	ands	r2, r1
    d3d6:	2a04      	cmp	r2, #4
    d3d8:	d100      	bne.n	d3dc <__aeabi_ddiv+0x52c>
    d3da:	e75b      	b.n	d294 <__aeabi_ddiv+0x3e4>
    d3dc:	000a      	movs	r2, r1
    d3de:	1d11      	adds	r1, r2, #4
    d3e0:	4291      	cmp	r1, r2
    d3e2:	4192      	sbcs	r2, r2
    d3e4:	4252      	negs	r2, r2
    d3e6:	4493      	add	fp, r2
    d3e8:	e754      	b.n	d294 <__aeabi_ddiv+0x3e4>
    d3ea:	4b47      	ldr	r3, [pc, #284]	; (d508 <__aeabi_ddiv+0x658>)
    d3ec:	18e3      	adds	r3, r4, r3
    d3ee:	2b00      	cmp	r3, #0
    d3f0:	dde5      	ble.n	d3be <__aeabi_ddiv+0x50e>
    d3f2:	2201      	movs	r2, #1
    d3f4:	4252      	negs	r2, r2
    d3f6:	e7f2      	b.n	d3de <__aeabi_ddiv+0x52e>
    d3f8:	001d      	movs	r5, r3
    d3fa:	e6fa      	b.n	d1f2 <__aeabi_ddiv+0x342>
    d3fc:	469a      	mov	sl, r3
    d3fe:	e71c      	b.n	d23a <__aeabi_ddiv+0x38a>
    d400:	42b0      	cmp	r0, r6
    d402:	d839      	bhi.n	d478 <__aeabi_ddiv+0x5c8>
    d404:	d06e      	beq.n	d4e4 <__aeabi_ddiv+0x634>
    d406:	0011      	movs	r1, r2
    d408:	e73a      	b.n	d280 <__aeabi_ddiv+0x3d0>
    d40a:	9302      	str	r3, [sp, #8]
    d40c:	e73a      	b.n	d284 <__aeabi_ddiv+0x3d4>
    d40e:	2a1f      	cmp	r2, #31
    d410:	dc3c      	bgt.n	d48c <__aeabi_ddiv+0x5dc>
    d412:	2320      	movs	r3, #32
    d414:	1a9b      	subs	r3, r3, r2
    d416:	000c      	movs	r4, r1
    d418:	4658      	mov	r0, fp
    d41a:	4099      	lsls	r1, r3
    d41c:	4098      	lsls	r0, r3
    d41e:	1e4b      	subs	r3, r1, #1
    d420:	4199      	sbcs	r1, r3
    d422:	465b      	mov	r3, fp
    d424:	40d4      	lsrs	r4, r2
    d426:	40d3      	lsrs	r3, r2
    d428:	4320      	orrs	r0, r4
    d42a:	4308      	orrs	r0, r1
    d42c:	001a      	movs	r2, r3
    d42e:	0743      	lsls	r3, r0, #29
    d430:	d009      	beq.n	d446 <__aeabi_ddiv+0x596>
    d432:	230f      	movs	r3, #15
    d434:	4003      	ands	r3, r0
    d436:	2b04      	cmp	r3, #4
    d438:	d005      	beq.n	d446 <__aeabi_ddiv+0x596>
    d43a:	0001      	movs	r1, r0
    d43c:	1d08      	adds	r0, r1, #4
    d43e:	4288      	cmp	r0, r1
    d440:	419b      	sbcs	r3, r3
    d442:	425b      	negs	r3, r3
    d444:	18d2      	adds	r2, r2, r3
    d446:	0213      	lsls	r3, r2, #8
    d448:	d53a      	bpl.n	d4c0 <__aeabi_ddiv+0x610>
    d44a:	2301      	movs	r3, #1
    d44c:	9a02      	ldr	r2, [sp, #8]
    d44e:	2401      	movs	r4, #1
    d450:	401a      	ands	r2, r3
    d452:	2300      	movs	r3, #0
    d454:	4694      	mov	ip, r2
    d456:	4698      	mov	r8, r3
    d458:	2200      	movs	r2, #0
    d45a:	e5f7      	b.n	d04c <__aeabi_ddiv+0x19c>
    d45c:	2102      	movs	r1, #2
    d45e:	4249      	negs	r1, r1
    d460:	468c      	mov	ip, r1
    d462:	9d03      	ldr	r5, [sp, #12]
    d464:	44e3      	add	fp, ip
    d466:	46ac      	mov	ip, r5
    d468:	44e2      	add	sl, ip
    d46a:	45aa      	cmp	sl, r5
    d46c:	41ad      	sbcs	r5, r5
    d46e:	426d      	negs	r5, r5
    d470:	4445      	add	r5, r8
    d472:	18ed      	adds	r5, r5, r3
    d474:	1a2d      	subs	r5, r5, r0
    d476:	e696      	b.n	d1a6 <__aeabi_ddiv+0x2f6>
    d478:	1e8a      	subs	r2, r1, #2
    d47a:	9903      	ldr	r1, [sp, #12]
    d47c:	004d      	lsls	r5, r1, #1
    d47e:	428d      	cmp	r5, r1
    d480:	4189      	sbcs	r1, r1
    d482:	4249      	negs	r1, r1
    d484:	4441      	add	r1, r8
    d486:	1876      	adds	r6, r6, r1
    d488:	9503      	str	r5, [sp, #12]
    d48a:	e78f      	b.n	d3ac <__aeabi_ddiv+0x4fc>
    d48c:	201f      	movs	r0, #31
    d48e:	4240      	negs	r0, r0
    d490:	1ac3      	subs	r3, r0, r3
    d492:	4658      	mov	r0, fp
    d494:	40d8      	lsrs	r0, r3
    d496:	0003      	movs	r3, r0
    d498:	2a20      	cmp	r2, #32
    d49a:	d028      	beq.n	d4ee <__aeabi_ddiv+0x63e>
    d49c:	2040      	movs	r0, #64	; 0x40
    d49e:	465d      	mov	r5, fp
    d4a0:	1a82      	subs	r2, r0, r2
    d4a2:	4095      	lsls	r5, r2
    d4a4:	4329      	orrs	r1, r5
    d4a6:	1e4a      	subs	r2, r1, #1
    d4a8:	4191      	sbcs	r1, r2
    d4aa:	4319      	orrs	r1, r3
    d4ac:	2307      	movs	r3, #7
    d4ae:	2200      	movs	r2, #0
    d4b0:	400b      	ands	r3, r1
    d4b2:	d009      	beq.n	d4c8 <__aeabi_ddiv+0x618>
    d4b4:	230f      	movs	r3, #15
    d4b6:	2200      	movs	r2, #0
    d4b8:	400b      	ands	r3, r1
    d4ba:	0008      	movs	r0, r1
    d4bc:	2b04      	cmp	r3, #4
    d4be:	d1bd      	bne.n	d43c <__aeabi_ddiv+0x58c>
    d4c0:	0001      	movs	r1, r0
    d4c2:	0753      	lsls	r3, r2, #29
    d4c4:	0252      	lsls	r2, r2, #9
    d4c6:	0b12      	lsrs	r2, r2, #12
    d4c8:	08c9      	lsrs	r1, r1, #3
    d4ca:	4319      	orrs	r1, r3
    d4cc:	2301      	movs	r3, #1
    d4ce:	4688      	mov	r8, r1
    d4d0:	9902      	ldr	r1, [sp, #8]
    d4d2:	2400      	movs	r4, #0
    d4d4:	4019      	ands	r1, r3
    d4d6:	468c      	mov	ip, r1
    d4d8:	e5b8      	b.n	d04c <__aeabi_ddiv+0x19c>
    d4da:	4552      	cmp	r2, sl
    d4dc:	d8be      	bhi.n	d45c <__aeabi_ddiv+0x5ac>
    d4de:	468b      	mov	fp, r1
    d4e0:	2500      	movs	r5, #0
    d4e2:	e660      	b.n	d1a6 <__aeabi_ddiv+0x2f6>
    d4e4:	9d03      	ldr	r5, [sp, #12]
    d4e6:	429d      	cmp	r5, r3
    d4e8:	d3c6      	bcc.n	d478 <__aeabi_ddiv+0x5c8>
    d4ea:	0011      	movs	r1, r2
    d4ec:	e762      	b.n	d3b4 <__aeabi_ddiv+0x504>
    d4ee:	2500      	movs	r5, #0
    d4f0:	e7d8      	b.n	d4a4 <__aeabi_ddiv+0x5f4>
    d4f2:	2280      	movs	r2, #128	; 0x80
    d4f4:	465b      	mov	r3, fp
    d4f6:	0312      	lsls	r2, r2, #12
    d4f8:	431a      	orrs	r2, r3
    d4fa:	9b01      	ldr	r3, [sp, #4]
    d4fc:	0312      	lsls	r2, r2, #12
    d4fe:	0b12      	lsrs	r2, r2, #12
    d500:	469c      	mov	ip, r3
    d502:	4688      	mov	r8, r1
    d504:	4c03      	ldr	r4, [pc, #12]	; (d514 <__aeabi_ddiv+0x664>)
    d506:	e5a1      	b.n	d04c <__aeabi_ddiv+0x19c>
    d508:	000003ff 	.word	0x000003ff
    d50c:	feffffff 	.word	0xfeffffff
    d510:	000007fe 	.word	0x000007fe
    d514:	000007ff 	.word	0x000007ff

0000d518 <__aeabi_dmul>:
    d518:	b5f0      	push	{r4, r5, r6, r7, lr}
    d51a:	4657      	mov	r7, sl
    d51c:	4645      	mov	r5, r8
    d51e:	46de      	mov	lr, fp
    d520:	464e      	mov	r6, r9
    d522:	b5e0      	push	{r5, r6, r7, lr}
    d524:	030c      	lsls	r4, r1, #12
    d526:	4698      	mov	r8, r3
    d528:	004e      	lsls	r6, r1, #1
    d52a:	0b23      	lsrs	r3, r4, #12
    d52c:	b087      	sub	sp, #28
    d52e:	0007      	movs	r7, r0
    d530:	4692      	mov	sl, r2
    d532:	469b      	mov	fp, r3
    d534:	0d76      	lsrs	r6, r6, #21
    d536:	0fcd      	lsrs	r5, r1, #31
    d538:	2e00      	cmp	r6, #0
    d53a:	d06b      	beq.n	d614 <__aeabi_dmul+0xfc>
    d53c:	4b6d      	ldr	r3, [pc, #436]	; (d6f4 <__aeabi_dmul+0x1dc>)
    d53e:	429e      	cmp	r6, r3
    d540:	d035      	beq.n	d5ae <__aeabi_dmul+0x96>
    d542:	2480      	movs	r4, #128	; 0x80
    d544:	465b      	mov	r3, fp
    d546:	0f42      	lsrs	r2, r0, #29
    d548:	0424      	lsls	r4, r4, #16
    d54a:	00db      	lsls	r3, r3, #3
    d54c:	4314      	orrs	r4, r2
    d54e:	431c      	orrs	r4, r3
    d550:	00c3      	lsls	r3, r0, #3
    d552:	4699      	mov	r9, r3
    d554:	4b68      	ldr	r3, [pc, #416]	; (d6f8 <__aeabi_dmul+0x1e0>)
    d556:	46a3      	mov	fp, r4
    d558:	469c      	mov	ip, r3
    d55a:	2300      	movs	r3, #0
    d55c:	2700      	movs	r7, #0
    d55e:	4466      	add	r6, ip
    d560:	9302      	str	r3, [sp, #8]
    d562:	4643      	mov	r3, r8
    d564:	031c      	lsls	r4, r3, #12
    d566:	005a      	lsls	r2, r3, #1
    d568:	0fdb      	lsrs	r3, r3, #31
    d56a:	4650      	mov	r0, sl
    d56c:	0b24      	lsrs	r4, r4, #12
    d56e:	0d52      	lsrs	r2, r2, #21
    d570:	4698      	mov	r8, r3
    d572:	d100      	bne.n	d576 <__aeabi_dmul+0x5e>
    d574:	e076      	b.n	d664 <__aeabi_dmul+0x14c>
    d576:	4b5f      	ldr	r3, [pc, #380]	; (d6f4 <__aeabi_dmul+0x1dc>)
    d578:	429a      	cmp	r2, r3
    d57a:	d06d      	beq.n	d658 <__aeabi_dmul+0x140>
    d57c:	2380      	movs	r3, #128	; 0x80
    d57e:	0f41      	lsrs	r1, r0, #29
    d580:	041b      	lsls	r3, r3, #16
    d582:	430b      	orrs	r3, r1
    d584:	495c      	ldr	r1, [pc, #368]	; (d6f8 <__aeabi_dmul+0x1e0>)
    d586:	00e4      	lsls	r4, r4, #3
    d588:	468c      	mov	ip, r1
    d58a:	431c      	orrs	r4, r3
    d58c:	00c3      	lsls	r3, r0, #3
    d58e:	2000      	movs	r0, #0
    d590:	4462      	add	r2, ip
    d592:	4641      	mov	r1, r8
    d594:	18b6      	adds	r6, r6, r2
    d596:	4069      	eors	r1, r5
    d598:	1c72      	adds	r2, r6, #1
    d59a:	9101      	str	r1, [sp, #4]
    d59c:	4694      	mov	ip, r2
    d59e:	4307      	orrs	r7, r0
    d5a0:	2f0f      	cmp	r7, #15
    d5a2:	d900      	bls.n	d5a6 <__aeabi_dmul+0x8e>
    d5a4:	e0b0      	b.n	d708 <__aeabi_dmul+0x1f0>
    d5a6:	4a55      	ldr	r2, [pc, #340]	; (d6fc <__aeabi_dmul+0x1e4>)
    d5a8:	00bf      	lsls	r7, r7, #2
    d5aa:	59d2      	ldr	r2, [r2, r7]
    d5ac:	4697      	mov	pc, r2
    d5ae:	465b      	mov	r3, fp
    d5b0:	4303      	orrs	r3, r0
    d5b2:	4699      	mov	r9, r3
    d5b4:	d000      	beq.n	d5b8 <__aeabi_dmul+0xa0>
    d5b6:	e087      	b.n	d6c8 <__aeabi_dmul+0x1b0>
    d5b8:	2300      	movs	r3, #0
    d5ba:	469b      	mov	fp, r3
    d5bc:	3302      	adds	r3, #2
    d5be:	2708      	movs	r7, #8
    d5c0:	9302      	str	r3, [sp, #8]
    d5c2:	e7ce      	b.n	d562 <__aeabi_dmul+0x4a>
    d5c4:	4642      	mov	r2, r8
    d5c6:	9201      	str	r2, [sp, #4]
    d5c8:	2802      	cmp	r0, #2
    d5ca:	d067      	beq.n	d69c <__aeabi_dmul+0x184>
    d5cc:	2803      	cmp	r0, #3
    d5ce:	d100      	bne.n	d5d2 <__aeabi_dmul+0xba>
    d5d0:	e20e      	b.n	d9f0 <__aeabi_dmul+0x4d8>
    d5d2:	2801      	cmp	r0, #1
    d5d4:	d000      	beq.n	d5d8 <__aeabi_dmul+0xc0>
    d5d6:	e162      	b.n	d89e <__aeabi_dmul+0x386>
    d5d8:	2300      	movs	r3, #0
    d5da:	2400      	movs	r4, #0
    d5dc:	2200      	movs	r2, #0
    d5de:	4699      	mov	r9, r3
    d5e0:	9901      	ldr	r1, [sp, #4]
    d5e2:	4001      	ands	r1, r0
    d5e4:	b2cd      	uxtb	r5, r1
    d5e6:	2100      	movs	r1, #0
    d5e8:	0312      	lsls	r2, r2, #12
    d5ea:	0d0b      	lsrs	r3, r1, #20
    d5ec:	0b12      	lsrs	r2, r2, #12
    d5ee:	051b      	lsls	r3, r3, #20
    d5f0:	4313      	orrs	r3, r2
    d5f2:	4a43      	ldr	r2, [pc, #268]	; (d700 <__aeabi_dmul+0x1e8>)
    d5f4:	0524      	lsls	r4, r4, #20
    d5f6:	4013      	ands	r3, r2
    d5f8:	431c      	orrs	r4, r3
    d5fa:	0064      	lsls	r4, r4, #1
    d5fc:	07ed      	lsls	r5, r5, #31
    d5fe:	0864      	lsrs	r4, r4, #1
    d600:	432c      	orrs	r4, r5
    d602:	4648      	mov	r0, r9
    d604:	0021      	movs	r1, r4
    d606:	b007      	add	sp, #28
    d608:	bc3c      	pop	{r2, r3, r4, r5}
    d60a:	4690      	mov	r8, r2
    d60c:	4699      	mov	r9, r3
    d60e:	46a2      	mov	sl, r4
    d610:	46ab      	mov	fp, r5
    d612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d614:	4303      	orrs	r3, r0
    d616:	4699      	mov	r9, r3
    d618:	d04f      	beq.n	d6ba <__aeabi_dmul+0x1a2>
    d61a:	465b      	mov	r3, fp
    d61c:	2b00      	cmp	r3, #0
    d61e:	d100      	bne.n	d622 <__aeabi_dmul+0x10a>
    d620:	e189      	b.n	d936 <__aeabi_dmul+0x41e>
    d622:	4658      	mov	r0, fp
    d624:	f000 fd7a 	bl	e11c <__clzsi2>
    d628:	0003      	movs	r3, r0
    d62a:	3b0b      	subs	r3, #11
    d62c:	2b1c      	cmp	r3, #28
    d62e:	dd00      	ble.n	d632 <__aeabi_dmul+0x11a>
    d630:	e17a      	b.n	d928 <__aeabi_dmul+0x410>
    d632:	221d      	movs	r2, #29
    d634:	1ad3      	subs	r3, r2, r3
    d636:	003a      	movs	r2, r7
    d638:	0001      	movs	r1, r0
    d63a:	465c      	mov	r4, fp
    d63c:	40da      	lsrs	r2, r3
    d63e:	3908      	subs	r1, #8
    d640:	408c      	lsls	r4, r1
    d642:	0013      	movs	r3, r2
    d644:	408f      	lsls	r7, r1
    d646:	4323      	orrs	r3, r4
    d648:	469b      	mov	fp, r3
    d64a:	46b9      	mov	r9, r7
    d64c:	2300      	movs	r3, #0
    d64e:	4e2d      	ldr	r6, [pc, #180]	; (d704 <__aeabi_dmul+0x1ec>)
    d650:	2700      	movs	r7, #0
    d652:	1a36      	subs	r6, r6, r0
    d654:	9302      	str	r3, [sp, #8]
    d656:	e784      	b.n	d562 <__aeabi_dmul+0x4a>
    d658:	4653      	mov	r3, sl
    d65a:	4323      	orrs	r3, r4
    d65c:	d12a      	bne.n	d6b4 <__aeabi_dmul+0x19c>
    d65e:	2400      	movs	r4, #0
    d660:	2002      	movs	r0, #2
    d662:	e796      	b.n	d592 <__aeabi_dmul+0x7a>
    d664:	4653      	mov	r3, sl
    d666:	4323      	orrs	r3, r4
    d668:	d020      	beq.n	d6ac <__aeabi_dmul+0x194>
    d66a:	2c00      	cmp	r4, #0
    d66c:	d100      	bne.n	d670 <__aeabi_dmul+0x158>
    d66e:	e157      	b.n	d920 <__aeabi_dmul+0x408>
    d670:	0020      	movs	r0, r4
    d672:	f000 fd53 	bl	e11c <__clzsi2>
    d676:	0003      	movs	r3, r0
    d678:	3b0b      	subs	r3, #11
    d67a:	2b1c      	cmp	r3, #28
    d67c:	dd00      	ble.n	d680 <__aeabi_dmul+0x168>
    d67e:	e149      	b.n	d914 <__aeabi_dmul+0x3fc>
    d680:	211d      	movs	r1, #29
    d682:	1acb      	subs	r3, r1, r3
    d684:	4651      	mov	r1, sl
    d686:	0002      	movs	r2, r0
    d688:	40d9      	lsrs	r1, r3
    d68a:	4653      	mov	r3, sl
    d68c:	3a08      	subs	r2, #8
    d68e:	4094      	lsls	r4, r2
    d690:	4093      	lsls	r3, r2
    d692:	430c      	orrs	r4, r1
    d694:	4a1b      	ldr	r2, [pc, #108]	; (d704 <__aeabi_dmul+0x1ec>)
    d696:	1a12      	subs	r2, r2, r0
    d698:	2000      	movs	r0, #0
    d69a:	e77a      	b.n	d592 <__aeabi_dmul+0x7a>
    d69c:	2501      	movs	r5, #1
    d69e:	9b01      	ldr	r3, [sp, #4]
    d6a0:	4c14      	ldr	r4, [pc, #80]	; (d6f4 <__aeabi_dmul+0x1dc>)
    d6a2:	401d      	ands	r5, r3
    d6a4:	2300      	movs	r3, #0
    d6a6:	2200      	movs	r2, #0
    d6a8:	4699      	mov	r9, r3
    d6aa:	e79c      	b.n	d5e6 <__aeabi_dmul+0xce>
    d6ac:	2400      	movs	r4, #0
    d6ae:	2200      	movs	r2, #0
    d6b0:	2001      	movs	r0, #1
    d6b2:	e76e      	b.n	d592 <__aeabi_dmul+0x7a>
    d6b4:	4653      	mov	r3, sl
    d6b6:	2003      	movs	r0, #3
    d6b8:	e76b      	b.n	d592 <__aeabi_dmul+0x7a>
    d6ba:	2300      	movs	r3, #0
    d6bc:	469b      	mov	fp, r3
    d6be:	3301      	adds	r3, #1
    d6c0:	2704      	movs	r7, #4
    d6c2:	2600      	movs	r6, #0
    d6c4:	9302      	str	r3, [sp, #8]
    d6c6:	e74c      	b.n	d562 <__aeabi_dmul+0x4a>
    d6c8:	2303      	movs	r3, #3
    d6ca:	4681      	mov	r9, r0
    d6cc:	270c      	movs	r7, #12
    d6ce:	9302      	str	r3, [sp, #8]
    d6d0:	e747      	b.n	d562 <__aeabi_dmul+0x4a>
    d6d2:	2280      	movs	r2, #128	; 0x80
    d6d4:	2300      	movs	r3, #0
    d6d6:	2500      	movs	r5, #0
    d6d8:	0312      	lsls	r2, r2, #12
    d6da:	4699      	mov	r9, r3
    d6dc:	4c05      	ldr	r4, [pc, #20]	; (d6f4 <__aeabi_dmul+0x1dc>)
    d6de:	e782      	b.n	d5e6 <__aeabi_dmul+0xce>
    d6e0:	465c      	mov	r4, fp
    d6e2:	464b      	mov	r3, r9
    d6e4:	9802      	ldr	r0, [sp, #8]
    d6e6:	e76f      	b.n	d5c8 <__aeabi_dmul+0xb0>
    d6e8:	465c      	mov	r4, fp
    d6ea:	464b      	mov	r3, r9
    d6ec:	9501      	str	r5, [sp, #4]
    d6ee:	9802      	ldr	r0, [sp, #8]
    d6f0:	e76a      	b.n	d5c8 <__aeabi_dmul+0xb0>
    d6f2:	46c0      	nop			; (mov r8, r8)
    d6f4:	000007ff 	.word	0x000007ff
    d6f8:	fffffc01 	.word	0xfffffc01
    d6fc:	00010a4c 	.word	0x00010a4c
    d700:	800fffff 	.word	0x800fffff
    d704:	fffffc0d 	.word	0xfffffc0d
    d708:	464a      	mov	r2, r9
    d70a:	4649      	mov	r1, r9
    d70c:	0c17      	lsrs	r7, r2, #16
    d70e:	0c1a      	lsrs	r2, r3, #16
    d710:	041b      	lsls	r3, r3, #16
    d712:	0c1b      	lsrs	r3, r3, #16
    d714:	0408      	lsls	r0, r1, #16
    d716:	0019      	movs	r1, r3
    d718:	0c00      	lsrs	r0, r0, #16
    d71a:	4341      	muls	r1, r0
    d71c:	0015      	movs	r5, r2
    d71e:	4688      	mov	r8, r1
    d720:	0019      	movs	r1, r3
    d722:	437d      	muls	r5, r7
    d724:	4379      	muls	r1, r7
    d726:	9503      	str	r5, [sp, #12]
    d728:	4689      	mov	r9, r1
    d72a:	0029      	movs	r1, r5
    d72c:	0015      	movs	r5, r2
    d72e:	4345      	muls	r5, r0
    d730:	444d      	add	r5, r9
    d732:	9502      	str	r5, [sp, #8]
    d734:	4645      	mov	r5, r8
    d736:	0c2d      	lsrs	r5, r5, #16
    d738:	46aa      	mov	sl, r5
    d73a:	9d02      	ldr	r5, [sp, #8]
    d73c:	4455      	add	r5, sl
    d73e:	45a9      	cmp	r9, r5
    d740:	d906      	bls.n	d750 <__aeabi_dmul+0x238>
    d742:	468a      	mov	sl, r1
    d744:	2180      	movs	r1, #128	; 0x80
    d746:	0249      	lsls	r1, r1, #9
    d748:	4689      	mov	r9, r1
    d74a:	44ca      	add	sl, r9
    d74c:	4651      	mov	r1, sl
    d74e:	9103      	str	r1, [sp, #12]
    d750:	0c29      	lsrs	r1, r5, #16
    d752:	9104      	str	r1, [sp, #16]
    d754:	4641      	mov	r1, r8
    d756:	0409      	lsls	r1, r1, #16
    d758:	042d      	lsls	r5, r5, #16
    d75a:	0c09      	lsrs	r1, r1, #16
    d75c:	4688      	mov	r8, r1
    d75e:	0029      	movs	r1, r5
    d760:	0c25      	lsrs	r5, r4, #16
    d762:	0424      	lsls	r4, r4, #16
    d764:	4441      	add	r1, r8
    d766:	0c24      	lsrs	r4, r4, #16
    d768:	9105      	str	r1, [sp, #20]
    d76a:	0021      	movs	r1, r4
    d76c:	4341      	muls	r1, r0
    d76e:	4688      	mov	r8, r1
    d770:	0021      	movs	r1, r4
    d772:	4379      	muls	r1, r7
    d774:	468a      	mov	sl, r1
    d776:	4368      	muls	r0, r5
    d778:	4641      	mov	r1, r8
    d77a:	4450      	add	r0, sl
    d77c:	4681      	mov	r9, r0
    d77e:	0c08      	lsrs	r0, r1, #16
    d780:	4448      	add	r0, r9
    d782:	436f      	muls	r7, r5
    d784:	4582      	cmp	sl, r0
    d786:	d903      	bls.n	d790 <__aeabi_dmul+0x278>
    d788:	2180      	movs	r1, #128	; 0x80
    d78a:	0249      	lsls	r1, r1, #9
    d78c:	4689      	mov	r9, r1
    d78e:	444f      	add	r7, r9
    d790:	0c01      	lsrs	r1, r0, #16
    d792:	4689      	mov	r9, r1
    d794:	0039      	movs	r1, r7
    d796:	4449      	add	r1, r9
    d798:	9102      	str	r1, [sp, #8]
    d79a:	4641      	mov	r1, r8
    d79c:	040f      	lsls	r7, r1, #16
    d79e:	9904      	ldr	r1, [sp, #16]
    d7a0:	0c3f      	lsrs	r7, r7, #16
    d7a2:	4688      	mov	r8, r1
    d7a4:	0400      	lsls	r0, r0, #16
    d7a6:	19c0      	adds	r0, r0, r7
    d7a8:	4480      	add	r8, r0
    d7aa:	4641      	mov	r1, r8
    d7ac:	9104      	str	r1, [sp, #16]
    d7ae:	4659      	mov	r1, fp
    d7b0:	0c0f      	lsrs	r7, r1, #16
    d7b2:	0409      	lsls	r1, r1, #16
    d7b4:	0c09      	lsrs	r1, r1, #16
    d7b6:	4688      	mov	r8, r1
    d7b8:	4359      	muls	r1, r3
    d7ba:	468a      	mov	sl, r1
    d7bc:	0039      	movs	r1, r7
    d7be:	4351      	muls	r1, r2
    d7c0:	4689      	mov	r9, r1
    d7c2:	4641      	mov	r1, r8
    d7c4:	434a      	muls	r2, r1
    d7c6:	4651      	mov	r1, sl
    d7c8:	0c09      	lsrs	r1, r1, #16
    d7ca:	468b      	mov	fp, r1
    d7cc:	437b      	muls	r3, r7
    d7ce:	18d2      	adds	r2, r2, r3
    d7d0:	445a      	add	r2, fp
    d7d2:	4293      	cmp	r3, r2
    d7d4:	d903      	bls.n	d7de <__aeabi_dmul+0x2c6>
    d7d6:	2380      	movs	r3, #128	; 0x80
    d7d8:	025b      	lsls	r3, r3, #9
    d7da:	469b      	mov	fp, r3
    d7dc:	44d9      	add	r9, fp
    d7de:	4651      	mov	r1, sl
    d7e0:	0409      	lsls	r1, r1, #16
    d7e2:	0c09      	lsrs	r1, r1, #16
    d7e4:	468a      	mov	sl, r1
    d7e6:	4641      	mov	r1, r8
    d7e8:	4361      	muls	r1, r4
    d7ea:	437c      	muls	r4, r7
    d7ec:	0c13      	lsrs	r3, r2, #16
    d7ee:	0412      	lsls	r2, r2, #16
    d7f0:	444b      	add	r3, r9
    d7f2:	4452      	add	r2, sl
    d7f4:	46a1      	mov	r9, r4
    d7f6:	468a      	mov	sl, r1
    d7f8:	003c      	movs	r4, r7
    d7fa:	4641      	mov	r1, r8
    d7fc:	436c      	muls	r4, r5
    d7fe:	434d      	muls	r5, r1
    d800:	4651      	mov	r1, sl
    d802:	444d      	add	r5, r9
    d804:	0c0f      	lsrs	r7, r1, #16
    d806:	197d      	adds	r5, r7, r5
    d808:	45a9      	cmp	r9, r5
    d80a:	d903      	bls.n	d814 <__aeabi_dmul+0x2fc>
    d80c:	2180      	movs	r1, #128	; 0x80
    d80e:	0249      	lsls	r1, r1, #9
    d810:	4688      	mov	r8, r1
    d812:	4444      	add	r4, r8
    d814:	9f04      	ldr	r7, [sp, #16]
    d816:	9903      	ldr	r1, [sp, #12]
    d818:	46b8      	mov	r8, r7
    d81a:	4441      	add	r1, r8
    d81c:	468b      	mov	fp, r1
    d81e:	4583      	cmp	fp, r0
    d820:	4180      	sbcs	r0, r0
    d822:	4241      	negs	r1, r0
    d824:	4688      	mov	r8, r1
    d826:	4651      	mov	r1, sl
    d828:	0408      	lsls	r0, r1, #16
    d82a:	042f      	lsls	r7, r5, #16
    d82c:	0c00      	lsrs	r0, r0, #16
    d82e:	183f      	adds	r7, r7, r0
    d830:	4658      	mov	r0, fp
    d832:	9902      	ldr	r1, [sp, #8]
    d834:	1810      	adds	r0, r2, r0
    d836:	4689      	mov	r9, r1
    d838:	4290      	cmp	r0, r2
    d83a:	4192      	sbcs	r2, r2
    d83c:	444f      	add	r7, r9
    d83e:	46ba      	mov	sl, r7
    d840:	4252      	negs	r2, r2
    d842:	4699      	mov	r9, r3
    d844:	4693      	mov	fp, r2
    d846:	44c2      	add	sl, r8
    d848:	44d1      	add	r9, sl
    d84a:	44cb      	add	fp, r9
    d84c:	428f      	cmp	r7, r1
    d84e:	41bf      	sbcs	r7, r7
    d850:	45c2      	cmp	sl, r8
    d852:	4189      	sbcs	r1, r1
    d854:	4599      	cmp	r9, r3
    d856:	419b      	sbcs	r3, r3
    d858:	4593      	cmp	fp, r2
    d85a:	4192      	sbcs	r2, r2
    d85c:	427f      	negs	r7, r7
    d85e:	4249      	negs	r1, r1
    d860:	0c2d      	lsrs	r5, r5, #16
    d862:	4252      	negs	r2, r2
    d864:	430f      	orrs	r7, r1
    d866:	425b      	negs	r3, r3
    d868:	4313      	orrs	r3, r2
    d86a:	197f      	adds	r7, r7, r5
    d86c:	18ff      	adds	r7, r7, r3
    d86e:	465b      	mov	r3, fp
    d870:	193c      	adds	r4, r7, r4
    d872:	0ddb      	lsrs	r3, r3, #23
    d874:	9a05      	ldr	r2, [sp, #20]
    d876:	0264      	lsls	r4, r4, #9
    d878:	431c      	orrs	r4, r3
    d87a:	0243      	lsls	r3, r0, #9
    d87c:	4313      	orrs	r3, r2
    d87e:	1e5d      	subs	r5, r3, #1
    d880:	41ab      	sbcs	r3, r5
    d882:	465a      	mov	r2, fp
    d884:	0dc0      	lsrs	r0, r0, #23
    d886:	4303      	orrs	r3, r0
    d888:	0252      	lsls	r2, r2, #9
    d88a:	4313      	orrs	r3, r2
    d88c:	01e2      	lsls	r2, r4, #7
    d88e:	d556      	bpl.n	d93e <__aeabi_dmul+0x426>
    d890:	2001      	movs	r0, #1
    d892:	085a      	lsrs	r2, r3, #1
    d894:	4003      	ands	r3, r0
    d896:	4313      	orrs	r3, r2
    d898:	07e2      	lsls	r2, r4, #31
    d89a:	4313      	orrs	r3, r2
    d89c:	0864      	lsrs	r4, r4, #1
    d89e:	485a      	ldr	r0, [pc, #360]	; (da08 <__aeabi_dmul+0x4f0>)
    d8a0:	4460      	add	r0, ip
    d8a2:	2800      	cmp	r0, #0
    d8a4:	dd4d      	ble.n	d942 <__aeabi_dmul+0x42a>
    d8a6:	075a      	lsls	r2, r3, #29
    d8a8:	d009      	beq.n	d8be <__aeabi_dmul+0x3a6>
    d8aa:	220f      	movs	r2, #15
    d8ac:	401a      	ands	r2, r3
    d8ae:	2a04      	cmp	r2, #4
    d8b0:	d005      	beq.n	d8be <__aeabi_dmul+0x3a6>
    d8b2:	1d1a      	adds	r2, r3, #4
    d8b4:	429a      	cmp	r2, r3
    d8b6:	419b      	sbcs	r3, r3
    d8b8:	425b      	negs	r3, r3
    d8ba:	18e4      	adds	r4, r4, r3
    d8bc:	0013      	movs	r3, r2
    d8be:	01e2      	lsls	r2, r4, #7
    d8c0:	d504      	bpl.n	d8cc <__aeabi_dmul+0x3b4>
    d8c2:	2080      	movs	r0, #128	; 0x80
    d8c4:	4a51      	ldr	r2, [pc, #324]	; (da0c <__aeabi_dmul+0x4f4>)
    d8c6:	00c0      	lsls	r0, r0, #3
    d8c8:	4014      	ands	r4, r2
    d8ca:	4460      	add	r0, ip
    d8cc:	4a50      	ldr	r2, [pc, #320]	; (da10 <__aeabi_dmul+0x4f8>)
    d8ce:	4290      	cmp	r0, r2
    d8d0:	dd00      	ble.n	d8d4 <__aeabi_dmul+0x3bc>
    d8d2:	e6e3      	b.n	d69c <__aeabi_dmul+0x184>
    d8d4:	2501      	movs	r5, #1
    d8d6:	08db      	lsrs	r3, r3, #3
    d8d8:	0762      	lsls	r2, r4, #29
    d8da:	431a      	orrs	r2, r3
    d8dc:	0264      	lsls	r4, r4, #9
    d8de:	9b01      	ldr	r3, [sp, #4]
    d8e0:	4691      	mov	r9, r2
    d8e2:	0b22      	lsrs	r2, r4, #12
    d8e4:	0544      	lsls	r4, r0, #21
    d8e6:	0d64      	lsrs	r4, r4, #21
    d8e8:	401d      	ands	r5, r3
    d8ea:	e67c      	b.n	d5e6 <__aeabi_dmul+0xce>
    d8ec:	2280      	movs	r2, #128	; 0x80
    d8ee:	4659      	mov	r1, fp
    d8f0:	0312      	lsls	r2, r2, #12
    d8f2:	4211      	tst	r1, r2
    d8f4:	d008      	beq.n	d908 <__aeabi_dmul+0x3f0>
    d8f6:	4214      	tst	r4, r2
    d8f8:	d106      	bne.n	d908 <__aeabi_dmul+0x3f0>
    d8fa:	4322      	orrs	r2, r4
    d8fc:	0312      	lsls	r2, r2, #12
    d8fe:	0b12      	lsrs	r2, r2, #12
    d900:	4645      	mov	r5, r8
    d902:	4699      	mov	r9, r3
    d904:	4c43      	ldr	r4, [pc, #268]	; (da14 <__aeabi_dmul+0x4fc>)
    d906:	e66e      	b.n	d5e6 <__aeabi_dmul+0xce>
    d908:	465b      	mov	r3, fp
    d90a:	431a      	orrs	r2, r3
    d90c:	0312      	lsls	r2, r2, #12
    d90e:	0b12      	lsrs	r2, r2, #12
    d910:	4c40      	ldr	r4, [pc, #256]	; (da14 <__aeabi_dmul+0x4fc>)
    d912:	e668      	b.n	d5e6 <__aeabi_dmul+0xce>
    d914:	0003      	movs	r3, r0
    d916:	4654      	mov	r4, sl
    d918:	3b28      	subs	r3, #40	; 0x28
    d91a:	409c      	lsls	r4, r3
    d91c:	2300      	movs	r3, #0
    d91e:	e6b9      	b.n	d694 <__aeabi_dmul+0x17c>
    d920:	f000 fbfc 	bl	e11c <__clzsi2>
    d924:	3020      	adds	r0, #32
    d926:	e6a6      	b.n	d676 <__aeabi_dmul+0x15e>
    d928:	0003      	movs	r3, r0
    d92a:	3b28      	subs	r3, #40	; 0x28
    d92c:	409f      	lsls	r7, r3
    d92e:	2300      	movs	r3, #0
    d930:	46bb      	mov	fp, r7
    d932:	4699      	mov	r9, r3
    d934:	e68a      	b.n	d64c <__aeabi_dmul+0x134>
    d936:	f000 fbf1 	bl	e11c <__clzsi2>
    d93a:	3020      	adds	r0, #32
    d93c:	e674      	b.n	d628 <__aeabi_dmul+0x110>
    d93e:	46b4      	mov	ip, r6
    d940:	e7ad      	b.n	d89e <__aeabi_dmul+0x386>
    d942:	2501      	movs	r5, #1
    d944:	1a2a      	subs	r2, r5, r0
    d946:	2a38      	cmp	r2, #56	; 0x38
    d948:	dd06      	ble.n	d958 <__aeabi_dmul+0x440>
    d94a:	9b01      	ldr	r3, [sp, #4]
    d94c:	2400      	movs	r4, #0
    d94e:	401d      	ands	r5, r3
    d950:	2300      	movs	r3, #0
    d952:	2200      	movs	r2, #0
    d954:	4699      	mov	r9, r3
    d956:	e646      	b.n	d5e6 <__aeabi_dmul+0xce>
    d958:	2a1f      	cmp	r2, #31
    d95a:	dc21      	bgt.n	d9a0 <__aeabi_dmul+0x488>
    d95c:	2520      	movs	r5, #32
    d95e:	0020      	movs	r0, r4
    d960:	1aad      	subs	r5, r5, r2
    d962:	001e      	movs	r6, r3
    d964:	40ab      	lsls	r3, r5
    d966:	40a8      	lsls	r0, r5
    d968:	40d6      	lsrs	r6, r2
    d96a:	1e5d      	subs	r5, r3, #1
    d96c:	41ab      	sbcs	r3, r5
    d96e:	4330      	orrs	r0, r6
    d970:	4318      	orrs	r0, r3
    d972:	40d4      	lsrs	r4, r2
    d974:	0743      	lsls	r3, r0, #29
    d976:	d009      	beq.n	d98c <__aeabi_dmul+0x474>
    d978:	230f      	movs	r3, #15
    d97a:	4003      	ands	r3, r0
    d97c:	2b04      	cmp	r3, #4
    d97e:	d005      	beq.n	d98c <__aeabi_dmul+0x474>
    d980:	0003      	movs	r3, r0
    d982:	1d18      	adds	r0, r3, #4
    d984:	4298      	cmp	r0, r3
    d986:	419b      	sbcs	r3, r3
    d988:	425b      	negs	r3, r3
    d98a:	18e4      	adds	r4, r4, r3
    d98c:	0223      	lsls	r3, r4, #8
    d98e:	d521      	bpl.n	d9d4 <__aeabi_dmul+0x4bc>
    d990:	2501      	movs	r5, #1
    d992:	9b01      	ldr	r3, [sp, #4]
    d994:	2401      	movs	r4, #1
    d996:	401d      	ands	r5, r3
    d998:	2300      	movs	r3, #0
    d99a:	2200      	movs	r2, #0
    d99c:	4699      	mov	r9, r3
    d99e:	e622      	b.n	d5e6 <__aeabi_dmul+0xce>
    d9a0:	251f      	movs	r5, #31
    d9a2:	0021      	movs	r1, r4
    d9a4:	426d      	negs	r5, r5
    d9a6:	1a28      	subs	r0, r5, r0
    d9a8:	40c1      	lsrs	r1, r0
    d9aa:	0008      	movs	r0, r1
    d9ac:	2a20      	cmp	r2, #32
    d9ae:	d01d      	beq.n	d9ec <__aeabi_dmul+0x4d4>
    d9b0:	355f      	adds	r5, #95	; 0x5f
    d9b2:	1aaa      	subs	r2, r5, r2
    d9b4:	4094      	lsls	r4, r2
    d9b6:	4323      	orrs	r3, r4
    d9b8:	1e5c      	subs	r4, r3, #1
    d9ba:	41a3      	sbcs	r3, r4
    d9bc:	2507      	movs	r5, #7
    d9be:	4303      	orrs	r3, r0
    d9c0:	401d      	ands	r5, r3
    d9c2:	2200      	movs	r2, #0
    d9c4:	2d00      	cmp	r5, #0
    d9c6:	d009      	beq.n	d9dc <__aeabi_dmul+0x4c4>
    d9c8:	220f      	movs	r2, #15
    d9ca:	2400      	movs	r4, #0
    d9cc:	401a      	ands	r2, r3
    d9ce:	0018      	movs	r0, r3
    d9d0:	2a04      	cmp	r2, #4
    d9d2:	d1d6      	bne.n	d982 <__aeabi_dmul+0x46a>
    d9d4:	0003      	movs	r3, r0
    d9d6:	0765      	lsls	r5, r4, #29
    d9d8:	0264      	lsls	r4, r4, #9
    d9da:	0b22      	lsrs	r2, r4, #12
    d9dc:	08db      	lsrs	r3, r3, #3
    d9de:	432b      	orrs	r3, r5
    d9e0:	2501      	movs	r5, #1
    d9e2:	4699      	mov	r9, r3
    d9e4:	9b01      	ldr	r3, [sp, #4]
    d9e6:	2400      	movs	r4, #0
    d9e8:	401d      	ands	r5, r3
    d9ea:	e5fc      	b.n	d5e6 <__aeabi_dmul+0xce>
    d9ec:	2400      	movs	r4, #0
    d9ee:	e7e2      	b.n	d9b6 <__aeabi_dmul+0x49e>
    d9f0:	2280      	movs	r2, #128	; 0x80
    d9f2:	2501      	movs	r5, #1
    d9f4:	0312      	lsls	r2, r2, #12
    d9f6:	4322      	orrs	r2, r4
    d9f8:	9901      	ldr	r1, [sp, #4]
    d9fa:	0312      	lsls	r2, r2, #12
    d9fc:	0b12      	lsrs	r2, r2, #12
    d9fe:	400d      	ands	r5, r1
    da00:	4699      	mov	r9, r3
    da02:	4c04      	ldr	r4, [pc, #16]	; (da14 <__aeabi_dmul+0x4fc>)
    da04:	e5ef      	b.n	d5e6 <__aeabi_dmul+0xce>
    da06:	46c0      	nop			; (mov r8, r8)
    da08:	000003ff 	.word	0x000003ff
    da0c:	feffffff 	.word	0xfeffffff
    da10:	000007fe 	.word	0x000007fe
    da14:	000007ff 	.word	0x000007ff

0000da18 <__aeabi_dsub>:
    da18:	b5f0      	push	{r4, r5, r6, r7, lr}
    da1a:	4646      	mov	r6, r8
    da1c:	46d6      	mov	lr, sl
    da1e:	464f      	mov	r7, r9
    da20:	030c      	lsls	r4, r1, #12
    da22:	b5c0      	push	{r6, r7, lr}
    da24:	0fcd      	lsrs	r5, r1, #31
    da26:	004e      	lsls	r6, r1, #1
    da28:	0a61      	lsrs	r1, r4, #9
    da2a:	0f44      	lsrs	r4, r0, #29
    da2c:	430c      	orrs	r4, r1
    da2e:	00c1      	lsls	r1, r0, #3
    da30:	0058      	lsls	r0, r3, #1
    da32:	0d40      	lsrs	r0, r0, #21
    da34:	4684      	mov	ip, r0
    da36:	468a      	mov	sl, r1
    da38:	000f      	movs	r7, r1
    da3a:	0319      	lsls	r1, r3, #12
    da3c:	0f50      	lsrs	r0, r2, #29
    da3e:	0a49      	lsrs	r1, r1, #9
    da40:	4301      	orrs	r1, r0
    da42:	48c6      	ldr	r0, [pc, #792]	; (dd5c <__aeabi_dsub+0x344>)
    da44:	0d76      	lsrs	r6, r6, #21
    da46:	46a8      	mov	r8, r5
    da48:	0fdb      	lsrs	r3, r3, #31
    da4a:	00d2      	lsls	r2, r2, #3
    da4c:	4584      	cmp	ip, r0
    da4e:	d100      	bne.n	da52 <__aeabi_dsub+0x3a>
    da50:	e0d8      	b.n	dc04 <__aeabi_dsub+0x1ec>
    da52:	2001      	movs	r0, #1
    da54:	4043      	eors	r3, r0
    da56:	42ab      	cmp	r3, r5
    da58:	d100      	bne.n	da5c <__aeabi_dsub+0x44>
    da5a:	e0a6      	b.n	dbaa <__aeabi_dsub+0x192>
    da5c:	4660      	mov	r0, ip
    da5e:	1a35      	subs	r5, r6, r0
    da60:	2d00      	cmp	r5, #0
    da62:	dc00      	bgt.n	da66 <__aeabi_dsub+0x4e>
    da64:	e105      	b.n	dc72 <__aeabi_dsub+0x25a>
    da66:	2800      	cmp	r0, #0
    da68:	d110      	bne.n	da8c <__aeabi_dsub+0x74>
    da6a:	000b      	movs	r3, r1
    da6c:	4313      	orrs	r3, r2
    da6e:	d100      	bne.n	da72 <__aeabi_dsub+0x5a>
    da70:	e0d7      	b.n	dc22 <__aeabi_dsub+0x20a>
    da72:	1e6b      	subs	r3, r5, #1
    da74:	2b00      	cmp	r3, #0
    da76:	d000      	beq.n	da7a <__aeabi_dsub+0x62>
    da78:	e14b      	b.n	dd12 <__aeabi_dsub+0x2fa>
    da7a:	4653      	mov	r3, sl
    da7c:	1a9f      	subs	r7, r3, r2
    da7e:	45ba      	cmp	sl, r7
    da80:	4180      	sbcs	r0, r0
    da82:	1a64      	subs	r4, r4, r1
    da84:	4240      	negs	r0, r0
    da86:	1a24      	subs	r4, r4, r0
    da88:	2601      	movs	r6, #1
    da8a:	e01e      	b.n	daca <__aeabi_dsub+0xb2>
    da8c:	4bb3      	ldr	r3, [pc, #716]	; (dd5c <__aeabi_dsub+0x344>)
    da8e:	429e      	cmp	r6, r3
    da90:	d048      	beq.n	db24 <__aeabi_dsub+0x10c>
    da92:	2380      	movs	r3, #128	; 0x80
    da94:	041b      	lsls	r3, r3, #16
    da96:	4319      	orrs	r1, r3
    da98:	2d38      	cmp	r5, #56	; 0x38
    da9a:	dd00      	ble.n	da9e <__aeabi_dsub+0x86>
    da9c:	e119      	b.n	dcd2 <__aeabi_dsub+0x2ba>
    da9e:	2d1f      	cmp	r5, #31
    daa0:	dd00      	ble.n	daa4 <__aeabi_dsub+0x8c>
    daa2:	e14c      	b.n	dd3e <__aeabi_dsub+0x326>
    daa4:	2320      	movs	r3, #32
    daa6:	000f      	movs	r7, r1
    daa8:	1b5b      	subs	r3, r3, r5
    daaa:	0010      	movs	r0, r2
    daac:	409a      	lsls	r2, r3
    daae:	409f      	lsls	r7, r3
    dab0:	40e8      	lsrs	r0, r5
    dab2:	1e53      	subs	r3, r2, #1
    dab4:	419a      	sbcs	r2, r3
    dab6:	40e9      	lsrs	r1, r5
    dab8:	4307      	orrs	r7, r0
    daba:	4317      	orrs	r7, r2
    dabc:	4653      	mov	r3, sl
    dabe:	1bdf      	subs	r7, r3, r7
    dac0:	1a61      	subs	r1, r4, r1
    dac2:	45ba      	cmp	sl, r7
    dac4:	41a4      	sbcs	r4, r4
    dac6:	4264      	negs	r4, r4
    dac8:	1b0c      	subs	r4, r1, r4
    daca:	0223      	lsls	r3, r4, #8
    dacc:	d400      	bmi.n	dad0 <__aeabi_dsub+0xb8>
    dace:	e0c5      	b.n	dc5c <__aeabi_dsub+0x244>
    dad0:	0264      	lsls	r4, r4, #9
    dad2:	0a65      	lsrs	r5, r4, #9
    dad4:	2d00      	cmp	r5, #0
    dad6:	d100      	bne.n	dada <__aeabi_dsub+0xc2>
    dad8:	e0f6      	b.n	dcc8 <__aeabi_dsub+0x2b0>
    dada:	0028      	movs	r0, r5
    dadc:	f000 fb1e 	bl	e11c <__clzsi2>
    dae0:	0003      	movs	r3, r0
    dae2:	3b08      	subs	r3, #8
    dae4:	2b1f      	cmp	r3, #31
    dae6:	dd00      	ble.n	daea <__aeabi_dsub+0xd2>
    dae8:	e0e9      	b.n	dcbe <__aeabi_dsub+0x2a6>
    daea:	2220      	movs	r2, #32
    daec:	003c      	movs	r4, r7
    daee:	1ad2      	subs	r2, r2, r3
    daf0:	409d      	lsls	r5, r3
    daf2:	40d4      	lsrs	r4, r2
    daf4:	409f      	lsls	r7, r3
    daf6:	4325      	orrs	r5, r4
    daf8:	429e      	cmp	r6, r3
    dafa:	dd00      	ble.n	dafe <__aeabi_dsub+0xe6>
    dafc:	e0db      	b.n	dcb6 <__aeabi_dsub+0x29e>
    dafe:	1b9e      	subs	r6, r3, r6
    db00:	1c73      	adds	r3, r6, #1
    db02:	2b1f      	cmp	r3, #31
    db04:	dd00      	ble.n	db08 <__aeabi_dsub+0xf0>
    db06:	e10a      	b.n	dd1e <__aeabi_dsub+0x306>
    db08:	2220      	movs	r2, #32
    db0a:	0038      	movs	r0, r7
    db0c:	1ad2      	subs	r2, r2, r3
    db0e:	0029      	movs	r1, r5
    db10:	4097      	lsls	r7, r2
    db12:	002c      	movs	r4, r5
    db14:	4091      	lsls	r1, r2
    db16:	40d8      	lsrs	r0, r3
    db18:	1e7a      	subs	r2, r7, #1
    db1a:	4197      	sbcs	r7, r2
    db1c:	40dc      	lsrs	r4, r3
    db1e:	2600      	movs	r6, #0
    db20:	4301      	orrs	r1, r0
    db22:	430f      	orrs	r7, r1
    db24:	077b      	lsls	r3, r7, #29
    db26:	d009      	beq.n	db3c <__aeabi_dsub+0x124>
    db28:	230f      	movs	r3, #15
    db2a:	403b      	ands	r3, r7
    db2c:	2b04      	cmp	r3, #4
    db2e:	d005      	beq.n	db3c <__aeabi_dsub+0x124>
    db30:	1d3b      	adds	r3, r7, #4
    db32:	42bb      	cmp	r3, r7
    db34:	41bf      	sbcs	r7, r7
    db36:	427f      	negs	r7, r7
    db38:	19e4      	adds	r4, r4, r7
    db3a:	001f      	movs	r7, r3
    db3c:	0223      	lsls	r3, r4, #8
    db3e:	d525      	bpl.n	db8c <__aeabi_dsub+0x174>
    db40:	4b86      	ldr	r3, [pc, #536]	; (dd5c <__aeabi_dsub+0x344>)
    db42:	3601      	adds	r6, #1
    db44:	429e      	cmp	r6, r3
    db46:	d100      	bne.n	db4a <__aeabi_dsub+0x132>
    db48:	e0af      	b.n	dcaa <__aeabi_dsub+0x292>
    db4a:	4b85      	ldr	r3, [pc, #532]	; (dd60 <__aeabi_dsub+0x348>)
    db4c:	2501      	movs	r5, #1
    db4e:	401c      	ands	r4, r3
    db50:	4643      	mov	r3, r8
    db52:	0762      	lsls	r2, r4, #29
    db54:	08ff      	lsrs	r7, r7, #3
    db56:	0264      	lsls	r4, r4, #9
    db58:	0576      	lsls	r6, r6, #21
    db5a:	4317      	orrs	r7, r2
    db5c:	0b24      	lsrs	r4, r4, #12
    db5e:	0d76      	lsrs	r6, r6, #21
    db60:	401d      	ands	r5, r3
    db62:	2100      	movs	r1, #0
    db64:	0324      	lsls	r4, r4, #12
    db66:	0b23      	lsrs	r3, r4, #12
    db68:	0d0c      	lsrs	r4, r1, #20
    db6a:	4a7e      	ldr	r2, [pc, #504]	; (dd64 <__aeabi_dsub+0x34c>)
    db6c:	0524      	lsls	r4, r4, #20
    db6e:	431c      	orrs	r4, r3
    db70:	4014      	ands	r4, r2
    db72:	0533      	lsls	r3, r6, #20
    db74:	4323      	orrs	r3, r4
    db76:	005b      	lsls	r3, r3, #1
    db78:	07ed      	lsls	r5, r5, #31
    db7a:	085b      	lsrs	r3, r3, #1
    db7c:	432b      	orrs	r3, r5
    db7e:	0038      	movs	r0, r7
    db80:	0019      	movs	r1, r3
    db82:	bc1c      	pop	{r2, r3, r4}
    db84:	4690      	mov	r8, r2
    db86:	4699      	mov	r9, r3
    db88:	46a2      	mov	sl, r4
    db8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db8c:	2501      	movs	r5, #1
    db8e:	4643      	mov	r3, r8
    db90:	0762      	lsls	r2, r4, #29
    db92:	08ff      	lsrs	r7, r7, #3
    db94:	4317      	orrs	r7, r2
    db96:	08e4      	lsrs	r4, r4, #3
    db98:	401d      	ands	r5, r3
    db9a:	4b70      	ldr	r3, [pc, #448]	; (dd5c <__aeabi_dsub+0x344>)
    db9c:	429e      	cmp	r6, r3
    db9e:	d036      	beq.n	dc0e <__aeabi_dsub+0x1f6>
    dba0:	0324      	lsls	r4, r4, #12
    dba2:	0576      	lsls	r6, r6, #21
    dba4:	0b24      	lsrs	r4, r4, #12
    dba6:	0d76      	lsrs	r6, r6, #21
    dba8:	e7db      	b.n	db62 <__aeabi_dsub+0x14a>
    dbaa:	4663      	mov	r3, ip
    dbac:	1af3      	subs	r3, r6, r3
    dbae:	2b00      	cmp	r3, #0
    dbb0:	dc00      	bgt.n	dbb4 <__aeabi_dsub+0x19c>
    dbb2:	e094      	b.n	dcde <__aeabi_dsub+0x2c6>
    dbb4:	4660      	mov	r0, ip
    dbb6:	2800      	cmp	r0, #0
    dbb8:	d035      	beq.n	dc26 <__aeabi_dsub+0x20e>
    dbba:	4868      	ldr	r0, [pc, #416]	; (dd5c <__aeabi_dsub+0x344>)
    dbbc:	4286      	cmp	r6, r0
    dbbe:	d0b1      	beq.n	db24 <__aeabi_dsub+0x10c>
    dbc0:	2780      	movs	r7, #128	; 0x80
    dbc2:	043f      	lsls	r7, r7, #16
    dbc4:	4339      	orrs	r1, r7
    dbc6:	2b38      	cmp	r3, #56	; 0x38
    dbc8:	dc00      	bgt.n	dbcc <__aeabi_dsub+0x1b4>
    dbca:	e0fd      	b.n	ddc8 <__aeabi_dsub+0x3b0>
    dbcc:	430a      	orrs	r2, r1
    dbce:	0017      	movs	r7, r2
    dbd0:	2100      	movs	r1, #0
    dbd2:	1e7a      	subs	r2, r7, #1
    dbd4:	4197      	sbcs	r7, r2
    dbd6:	4457      	add	r7, sl
    dbd8:	4557      	cmp	r7, sl
    dbda:	4180      	sbcs	r0, r0
    dbdc:	1909      	adds	r1, r1, r4
    dbde:	4244      	negs	r4, r0
    dbe0:	190c      	adds	r4, r1, r4
    dbe2:	0223      	lsls	r3, r4, #8
    dbe4:	d53a      	bpl.n	dc5c <__aeabi_dsub+0x244>
    dbe6:	4b5d      	ldr	r3, [pc, #372]	; (dd5c <__aeabi_dsub+0x344>)
    dbe8:	3601      	adds	r6, #1
    dbea:	429e      	cmp	r6, r3
    dbec:	d100      	bne.n	dbf0 <__aeabi_dsub+0x1d8>
    dbee:	e14b      	b.n	de88 <__aeabi_dsub+0x470>
    dbf0:	2201      	movs	r2, #1
    dbf2:	4b5b      	ldr	r3, [pc, #364]	; (dd60 <__aeabi_dsub+0x348>)
    dbf4:	401c      	ands	r4, r3
    dbf6:	087b      	lsrs	r3, r7, #1
    dbf8:	4017      	ands	r7, r2
    dbfa:	431f      	orrs	r7, r3
    dbfc:	07e2      	lsls	r2, r4, #31
    dbfe:	4317      	orrs	r7, r2
    dc00:	0864      	lsrs	r4, r4, #1
    dc02:	e78f      	b.n	db24 <__aeabi_dsub+0x10c>
    dc04:	0008      	movs	r0, r1
    dc06:	4310      	orrs	r0, r2
    dc08:	d000      	beq.n	dc0c <__aeabi_dsub+0x1f4>
    dc0a:	e724      	b.n	da56 <__aeabi_dsub+0x3e>
    dc0c:	e721      	b.n	da52 <__aeabi_dsub+0x3a>
    dc0e:	0023      	movs	r3, r4
    dc10:	433b      	orrs	r3, r7
    dc12:	d100      	bne.n	dc16 <__aeabi_dsub+0x1fe>
    dc14:	e1b9      	b.n	df8a <__aeabi_dsub+0x572>
    dc16:	2280      	movs	r2, #128	; 0x80
    dc18:	0312      	lsls	r2, r2, #12
    dc1a:	4314      	orrs	r4, r2
    dc1c:	0324      	lsls	r4, r4, #12
    dc1e:	0b24      	lsrs	r4, r4, #12
    dc20:	e79f      	b.n	db62 <__aeabi_dsub+0x14a>
    dc22:	002e      	movs	r6, r5
    dc24:	e77e      	b.n	db24 <__aeabi_dsub+0x10c>
    dc26:	0008      	movs	r0, r1
    dc28:	4310      	orrs	r0, r2
    dc2a:	d100      	bne.n	dc2e <__aeabi_dsub+0x216>
    dc2c:	e0ca      	b.n	ddc4 <__aeabi_dsub+0x3ac>
    dc2e:	1e58      	subs	r0, r3, #1
    dc30:	4684      	mov	ip, r0
    dc32:	2800      	cmp	r0, #0
    dc34:	d000      	beq.n	dc38 <__aeabi_dsub+0x220>
    dc36:	e0e7      	b.n	de08 <__aeabi_dsub+0x3f0>
    dc38:	4452      	add	r2, sl
    dc3a:	4552      	cmp	r2, sl
    dc3c:	4180      	sbcs	r0, r0
    dc3e:	1864      	adds	r4, r4, r1
    dc40:	4240      	negs	r0, r0
    dc42:	1824      	adds	r4, r4, r0
    dc44:	0017      	movs	r7, r2
    dc46:	2601      	movs	r6, #1
    dc48:	0223      	lsls	r3, r4, #8
    dc4a:	d507      	bpl.n	dc5c <__aeabi_dsub+0x244>
    dc4c:	2602      	movs	r6, #2
    dc4e:	e7cf      	b.n	dbf0 <__aeabi_dsub+0x1d8>
    dc50:	4664      	mov	r4, ip
    dc52:	432c      	orrs	r4, r5
    dc54:	d100      	bne.n	dc58 <__aeabi_dsub+0x240>
    dc56:	e1b3      	b.n	dfc0 <__aeabi_dsub+0x5a8>
    dc58:	002c      	movs	r4, r5
    dc5a:	4667      	mov	r7, ip
    dc5c:	077b      	lsls	r3, r7, #29
    dc5e:	d000      	beq.n	dc62 <__aeabi_dsub+0x24a>
    dc60:	e762      	b.n	db28 <__aeabi_dsub+0x110>
    dc62:	0763      	lsls	r3, r4, #29
    dc64:	08ff      	lsrs	r7, r7, #3
    dc66:	431f      	orrs	r7, r3
    dc68:	2501      	movs	r5, #1
    dc6a:	4643      	mov	r3, r8
    dc6c:	08e4      	lsrs	r4, r4, #3
    dc6e:	401d      	ands	r5, r3
    dc70:	e793      	b.n	db9a <__aeabi_dsub+0x182>
    dc72:	2d00      	cmp	r5, #0
    dc74:	d178      	bne.n	dd68 <__aeabi_dsub+0x350>
    dc76:	1c75      	adds	r5, r6, #1
    dc78:	056d      	lsls	r5, r5, #21
    dc7a:	0d6d      	lsrs	r5, r5, #21
    dc7c:	2d01      	cmp	r5, #1
    dc7e:	dc00      	bgt.n	dc82 <__aeabi_dsub+0x26a>
    dc80:	e0f2      	b.n	de68 <__aeabi_dsub+0x450>
    dc82:	4650      	mov	r0, sl
    dc84:	1a80      	subs	r0, r0, r2
    dc86:	4582      	cmp	sl, r0
    dc88:	41bf      	sbcs	r7, r7
    dc8a:	1a65      	subs	r5, r4, r1
    dc8c:	427f      	negs	r7, r7
    dc8e:	1bed      	subs	r5, r5, r7
    dc90:	4684      	mov	ip, r0
    dc92:	0228      	lsls	r0, r5, #8
    dc94:	d400      	bmi.n	dc98 <__aeabi_dsub+0x280>
    dc96:	e08c      	b.n	ddb2 <__aeabi_dsub+0x39a>
    dc98:	4650      	mov	r0, sl
    dc9a:	1a17      	subs	r7, r2, r0
    dc9c:	42ba      	cmp	r2, r7
    dc9e:	4192      	sbcs	r2, r2
    dca0:	1b0c      	subs	r4, r1, r4
    dca2:	4255      	negs	r5, r2
    dca4:	1b65      	subs	r5, r4, r5
    dca6:	4698      	mov	r8, r3
    dca8:	e714      	b.n	dad4 <__aeabi_dsub+0xbc>
    dcaa:	2501      	movs	r5, #1
    dcac:	4643      	mov	r3, r8
    dcae:	2400      	movs	r4, #0
    dcb0:	401d      	ands	r5, r3
    dcb2:	2700      	movs	r7, #0
    dcb4:	e755      	b.n	db62 <__aeabi_dsub+0x14a>
    dcb6:	4c2a      	ldr	r4, [pc, #168]	; (dd60 <__aeabi_dsub+0x348>)
    dcb8:	1af6      	subs	r6, r6, r3
    dcba:	402c      	ands	r4, r5
    dcbc:	e732      	b.n	db24 <__aeabi_dsub+0x10c>
    dcbe:	003d      	movs	r5, r7
    dcc0:	3828      	subs	r0, #40	; 0x28
    dcc2:	4085      	lsls	r5, r0
    dcc4:	2700      	movs	r7, #0
    dcc6:	e717      	b.n	daf8 <__aeabi_dsub+0xe0>
    dcc8:	0038      	movs	r0, r7
    dcca:	f000 fa27 	bl	e11c <__clzsi2>
    dcce:	3020      	adds	r0, #32
    dcd0:	e706      	b.n	dae0 <__aeabi_dsub+0xc8>
    dcd2:	430a      	orrs	r2, r1
    dcd4:	0017      	movs	r7, r2
    dcd6:	2100      	movs	r1, #0
    dcd8:	1e7a      	subs	r2, r7, #1
    dcda:	4197      	sbcs	r7, r2
    dcdc:	e6ee      	b.n	dabc <__aeabi_dsub+0xa4>
    dcde:	2b00      	cmp	r3, #0
    dce0:	d000      	beq.n	dce4 <__aeabi_dsub+0x2cc>
    dce2:	e0e5      	b.n	deb0 <__aeabi_dsub+0x498>
    dce4:	1c73      	adds	r3, r6, #1
    dce6:	469c      	mov	ip, r3
    dce8:	055b      	lsls	r3, r3, #21
    dcea:	0d5b      	lsrs	r3, r3, #21
    dcec:	2b01      	cmp	r3, #1
    dcee:	dc00      	bgt.n	dcf2 <__aeabi_dsub+0x2da>
    dcf0:	e09f      	b.n	de32 <__aeabi_dsub+0x41a>
    dcf2:	4b1a      	ldr	r3, [pc, #104]	; (dd5c <__aeabi_dsub+0x344>)
    dcf4:	459c      	cmp	ip, r3
    dcf6:	d100      	bne.n	dcfa <__aeabi_dsub+0x2e2>
    dcf8:	e0c5      	b.n	de86 <__aeabi_dsub+0x46e>
    dcfa:	4452      	add	r2, sl
    dcfc:	4552      	cmp	r2, sl
    dcfe:	4180      	sbcs	r0, r0
    dd00:	1864      	adds	r4, r4, r1
    dd02:	4240      	negs	r0, r0
    dd04:	1824      	adds	r4, r4, r0
    dd06:	07e7      	lsls	r7, r4, #31
    dd08:	0852      	lsrs	r2, r2, #1
    dd0a:	4317      	orrs	r7, r2
    dd0c:	0864      	lsrs	r4, r4, #1
    dd0e:	4666      	mov	r6, ip
    dd10:	e708      	b.n	db24 <__aeabi_dsub+0x10c>
    dd12:	4812      	ldr	r0, [pc, #72]	; (dd5c <__aeabi_dsub+0x344>)
    dd14:	4285      	cmp	r5, r0
    dd16:	d100      	bne.n	dd1a <__aeabi_dsub+0x302>
    dd18:	e085      	b.n	de26 <__aeabi_dsub+0x40e>
    dd1a:	001d      	movs	r5, r3
    dd1c:	e6bc      	b.n	da98 <__aeabi_dsub+0x80>
    dd1e:	0029      	movs	r1, r5
    dd20:	3e1f      	subs	r6, #31
    dd22:	40f1      	lsrs	r1, r6
    dd24:	2b20      	cmp	r3, #32
    dd26:	d100      	bne.n	dd2a <__aeabi_dsub+0x312>
    dd28:	e07f      	b.n	de2a <__aeabi_dsub+0x412>
    dd2a:	2240      	movs	r2, #64	; 0x40
    dd2c:	1ad3      	subs	r3, r2, r3
    dd2e:	409d      	lsls	r5, r3
    dd30:	432f      	orrs	r7, r5
    dd32:	1e7d      	subs	r5, r7, #1
    dd34:	41af      	sbcs	r7, r5
    dd36:	2400      	movs	r4, #0
    dd38:	430f      	orrs	r7, r1
    dd3a:	2600      	movs	r6, #0
    dd3c:	e78e      	b.n	dc5c <__aeabi_dsub+0x244>
    dd3e:	002b      	movs	r3, r5
    dd40:	000f      	movs	r7, r1
    dd42:	3b20      	subs	r3, #32
    dd44:	40df      	lsrs	r7, r3
    dd46:	2d20      	cmp	r5, #32
    dd48:	d071      	beq.n	de2e <__aeabi_dsub+0x416>
    dd4a:	2340      	movs	r3, #64	; 0x40
    dd4c:	1b5d      	subs	r5, r3, r5
    dd4e:	40a9      	lsls	r1, r5
    dd50:	430a      	orrs	r2, r1
    dd52:	1e51      	subs	r1, r2, #1
    dd54:	418a      	sbcs	r2, r1
    dd56:	2100      	movs	r1, #0
    dd58:	4317      	orrs	r7, r2
    dd5a:	e6af      	b.n	dabc <__aeabi_dsub+0xa4>
    dd5c:	000007ff 	.word	0x000007ff
    dd60:	ff7fffff 	.word	0xff7fffff
    dd64:	800fffff 	.word	0x800fffff
    dd68:	2e00      	cmp	r6, #0
    dd6a:	d03e      	beq.n	ddea <__aeabi_dsub+0x3d2>
    dd6c:	4eb3      	ldr	r6, [pc, #716]	; (e03c <__aeabi_dsub+0x624>)
    dd6e:	45b4      	cmp	ip, r6
    dd70:	d045      	beq.n	ddfe <__aeabi_dsub+0x3e6>
    dd72:	2680      	movs	r6, #128	; 0x80
    dd74:	0436      	lsls	r6, r6, #16
    dd76:	426d      	negs	r5, r5
    dd78:	4334      	orrs	r4, r6
    dd7a:	2d38      	cmp	r5, #56	; 0x38
    dd7c:	dd00      	ble.n	dd80 <__aeabi_dsub+0x368>
    dd7e:	e0a8      	b.n	ded2 <__aeabi_dsub+0x4ba>
    dd80:	2d1f      	cmp	r5, #31
    dd82:	dd00      	ble.n	dd86 <__aeabi_dsub+0x36e>
    dd84:	e11f      	b.n	dfc6 <__aeabi_dsub+0x5ae>
    dd86:	2620      	movs	r6, #32
    dd88:	0027      	movs	r7, r4
    dd8a:	4650      	mov	r0, sl
    dd8c:	1b76      	subs	r6, r6, r5
    dd8e:	40b7      	lsls	r7, r6
    dd90:	40e8      	lsrs	r0, r5
    dd92:	4307      	orrs	r7, r0
    dd94:	4650      	mov	r0, sl
    dd96:	40b0      	lsls	r0, r6
    dd98:	1e46      	subs	r6, r0, #1
    dd9a:	41b0      	sbcs	r0, r6
    dd9c:	40ec      	lsrs	r4, r5
    dd9e:	4338      	orrs	r0, r7
    dda0:	1a17      	subs	r7, r2, r0
    dda2:	42ba      	cmp	r2, r7
    dda4:	4192      	sbcs	r2, r2
    dda6:	1b0c      	subs	r4, r1, r4
    dda8:	4252      	negs	r2, r2
    ddaa:	1aa4      	subs	r4, r4, r2
    ddac:	4666      	mov	r6, ip
    ddae:	4698      	mov	r8, r3
    ddb0:	e68b      	b.n	daca <__aeabi_dsub+0xb2>
    ddb2:	4664      	mov	r4, ip
    ddb4:	4667      	mov	r7, ip
    ddb6:	432c      	orrs	r4, r5
    ddb8:	d000      	beq.n	ddbc <__aeabi_dsub+0x3a4>
    ddba:	e68b      	b.n	dad4 <__aeabi_dsub+0xbc>
    ddbc:	2500      	movs	r5, #0
    ddbe:	2600      	movs	r6, #0
    ddc0:	2700      	movs	r7, #0
    ddc2:	e6ea      	b.n	db9a <__aeabi_dsub+0x182>
    ddc4:	001e      	movs	r6, r3
    ddc6:	e6ad      	b.n	db24 <__aeabi_dsub+0x10c>
    ddc8:	2b1f      	cmp	r3, #31
    ddca:	dc60      	bgt.n	de8e <__aeabi_dsub+0x476>
    ddcc:	2720      	movs	r7, #32
    ddce:	1af8      	subs	r0, r7, r3
    ddd0:	000f      	movs	r7, r1
    ddd2:	4684      	mov	ip, r0
    ddd4:	4087      	lsls	r7, r0
    ddd6:	0010      	movs	r0, r2
    ddd8:	40d8      	lsrs	r0, r3
    ddda:	4307      	orrs	r7, r0
    dddc:	4660      	mov	r0, ip
    ddde:	4082      	lsls	r2, r0
    dde0:	1e50      	subs	r0, r2, #1
    dde2:	4182      	sbcs	r2, r0
    dde4:	40d9      	lsrs	r1, r3
    dde6:	4317      	orrs	r7, r2
    dde8:	e6f5      	b.n	dbd6 <__aeabi_dsub+0x1be>
    ddea:	0026      	movs	r6, r4
    ddec:	4650      	mov	r0, sl
    ddee:	4306      	orrs	r6, r0
    ddf0:	d005      	beq.n	ddfe <__aeabi_dsub+0x3e6>
    ddf2:	43ed      	mvns	r5, r5
    ddf4:	2d00      	cmp	r5, #0
    ddf6:	d0d3      	beq.n	dda0 <__aeabi_dsub+0x388>
    ddf8:	4e90      	ldr	r6, [pc, #576]	; (e03c <__aeabi_dsub+0x624>)
    ddfa:	45b4      	cmp	ip, r6
    ddfc:	d1bd      	bne.n	dd7a <__aeabi_dsub+0x362>
    ddfe:	000c      	movs	r4, r1
    de00:	0017      	movs	r7, r2
    de02:	4666      	mov	r6, ip
    de04:	4698      	mov	r8, r3
    de06:	e68d      	b.n	db24 <__aeabi_dsub+0x10c>
    de08:	488c      	ldr	r0, [pc, #560]	; (e03c <__aeabi_dsub+0x624>)
    de0a:	4283      	cmp	r3, r0
    de0c:	d00b      	beq.n	de26 <__aeabi_dsub+0x40e>
    de0e:	4663      	mov	r3, ip
    de10:	e6d9      	b.n	dbc6 <__aeabi_dsub+0x1ae>
    de12:	2d00      	cmp	r5, #0
    de14:	d000      	beq.n	de18 <__aeabi_dsub+0x400>
    de16:	e096      	b.n	df46 <__aeabi_dsub+0x52e>
    de18:	0008      	movs	r0, r1
    de1a:	4310      	orrs	r0, r2
    de1c:	d100      	bne.n	de20 <__aeabi_dsub+0x408>
    de1e:	e0e2      	b.n	dfe6 <__aeabi_dsub+0x5ce>
    de20:	000c      	movs	r4, r1
    de22:	0017      	movs	r7, r2
    de24:	4698      	mov	r8, r3
    de26:	4e85      	ldr	r6, [pc, #532]	; (e03c <__aeabi_dsub+0x624>)
    de28:	e67c      	b.n	db24 <__aeabi_dsub+0x10c>
    de2a:	2500      	movs	r5, #0
    de2c:	e780      	b.n	dd30 <__aeabi_dsub+0x318>
    de2e:	2100      	movs	r1, #0
    de30:	e78e      	b.n	dd50 <__aeabi_dsub+0x338>
    de32:	0023      	movs	r3, r4
    de34:	4650      	mov	r0, sl
    de36:	4303      	orrs	r3, r0
    de38:	2e00      	cmp	r6, #0
    de3a:	d000      	beq.n	de3e <__aeabi_dsub+0x426>
    de3c:	e0a8      	b.n	df90 <__aeabi_dsub+0x578>
    de3e:	2b00      	cmp	r3, #0
    de40:	d100      	bne.n	de44 <__aeabi_dsub+0x42c>
    de42:	e0de      	b.n	e002 <__aeabi_dsub+0x5ea>
    de44:	000b      	movs	r3, r1
    de46:	4313      	orrs	r3, r2
    de48:	d100      	bne.n	de4c <__aeabi_dsub+0x434>
    de4a:	e66b      	b.n	db24 <__aeabi_dsub+0x10c>
    de4c:	4452      	add	r2, sl
    de4e:	4552      	cmp	r2, sl
    de50:	4180      	sbcs	r0, r0
    de52:	1864      	adds	r4, r4, r1
    de54:	4240      	negs	r0, r0
    de56:	1824      	adds	r4, r4, r0
    de58:	0017      	movs	r7, r2
    de5a:	0223      	lsls	r3, r4, #8
    de5c:	d400      	bmi.n	de60 <__aeabi_dsub+0x448>
    de5e:	e6fd      	b.n	dc5c <__aeabi_dsub+0x244>
    de60:	4b77      	ldr	r3, [pc, #476]	; (e040 <__aeabi_dsub+0x628>)
    de62:	4666      	mov	r6, ip
    de64:	401c      	ands	r4, r3
    de66:	e65d      	b.n	db24 <__aeabi_dsub+0x10c>
    de68:	0025      	movs	r5, r4
    de6a:	4650      	mov	r0, sl
    de6c:	4305      	orrs	r5, r0
    de6e:	2e00      	cmp	r6, #0
    de70:	d1cf      	bne.n	de12 <__aeabi_dsub+0x3fa>
    de72:	2d00      	cmp	r5, #0
    de74:	d14f      	bne.n	df16 <__aeabi_dsub+0x4fe>
    de76:	000c      	movs	r4, r1
    de78:	4314      	orrs	r4, r2
    de7a:	d100      	bne.n	de7e <__aeabi_dsub+0x466>
    de7c:	e0a0      	b.n	dfc0 <__aeabi_dsub+0x5a8>
    de7e:	000c      	movs	r4, r1
    de80:	0017      	movs	r7, r2
    de82:	4698      	mov	r8, r3
    de84:	e64e      	b.n	db24 <__aeabi_dsub+0x10c>
    de86:	4666      	mov	r6, ip
    de88:	2400      	movs	r4, #0
    de8a:	2700      	movs	r7, #0
    de8c:	e685      	b.n	db9a <__aeabi_dsub+0x182>
    de8e:	001f      	movs	r7, r3
    de90:	0008      	movs	r0, r1
    de92:	3f20      	subs	r7, #32
    de94:	40f8      	lsrs	r0, r7
    de96:	0007      	movs	r7, r0
    de98:	2b20      	cmp	r3, #32
    de9a:	d100      	bne.n	de9e <__aeabi_dsub+0x486>
    de9c:	e08e      	b.n	dfbc <__aeabi_dsub+0x5a4>
    de9e:	2040      	movs	r0, #64	; 0x40
    dea0:	1ac3      	subs	r3, r0, r3
    dea2:	4099      	lsls	r1, r3
    dea4:	430a      	orrs	r2, r1
    dea6:	1e51      	subs	r1, r2, #1
    dea8:	418a      	sbcs	r2, r1
    deaa:	2100      	movs	r1, #0
    deac:	4317      	orrs	r7, r2
    deae:	e692      	b.n	dbd6 <__aeabi_dsub+0x1be>
    deb0:	2e00      	cmp	r6, #0
    deb2:	d114      	bne.n	dede <__aeabi_dsub+0x4c6>
    deb4:	0026      	movs	r6, r4
    deb6:	4650      	mov	r0, sl
    deb8:	4306      	orrs	r6, r0
    deba:	d062      	beq.n	df82 <__aeabi_dsub+0x56a>
    debc:	43db      	mvns	r3, r3
    debe:	2b00      	cmp	r3, #0
    dec0:	d15c      	bne.n	df7c <__aeabi_dsub+0x564>
    dec2:	1887      	adds	r7, r0, r2
    dec4:	4297      	cmp	r7, r2
    dec6:	4192      	sbcs	r2, r2
    dec8:	1864      	adds	r4, r4, r1
    deca:	4252      	negs	r2, r2
    decc:	18a4      	adds	r4, r4, r2
    dece:	4666      	mov	r6, ip
    ded0:	e687      	b.n	dbe2 <__aeabi_dsub+0x1ca>
    ded2:	4650      	mov	r0, sl
    ded4:	4320      	orrs	r0, r4
    ded6:	1e44      	subs	r4, r0, #1
    ded8:	41a0      	sbcs	r0, r4
    deda:	2400      	movs	r4, #0
    dedc:	e760      	b.n	dda0 <__aeabi_dsub+0x388>
    dede:	4e57      	ldr	r6, [pc, #348]	; (e03c <__aeabi_dsub+0x624>)
    dee0:	45b4      	cmp	ip, r6
    dee2:	d04e      	beq.n	df82 <__aeabi_dsub+0x56a>
    dee4:	2680      	movs	r6, #128	; 0x80
    dee6:	0436      	lsls	r6, r6, #16
    dee8:	425b      	negs	r3, r3
    deea:	4334      	orrs	r4, r6
    deec:	2b38      	cmp	r3, #56	; 0x38
    deee:	dd00      	ble.n	def2 <__aeabi_dsub+0x4da>
    def0:	e07f      	b.n	dff2 <__aeabi_dsub+0x5da>
    def2:	2b1f      	cmp	r3, #31
    def4:	dd00      	ble.n	def8 <__aeabi_dsub+0x4e0>
    def6:	e08b      	b.n	e010 <__aeabi_dsub+0x5f8>
    def8:	2620      	movs	r6, #32
    defa:	0027      	movs	r7, r4
    defc:	4650      	mov	r0, sl
    defe:	1af6      	subs	r6, r6, r3
    df00:	40b7      	lsls	r7, r6
    df02:	40d8      	lsrs	r0, r3
    df04:	4307      	orrs	r7, r0
    df06:	4650      	mov	r0, sl
    df08:	40b0      	lsls	r0, r6
    df0a:	1e46      	subs	r6, r0, #1
    df0c:	41b0      	sbcs	r0, r6
    df0e:	4307      	orrs	r7, r0
    df10:	40dc      	lsrs	r4, r3
    df12:	18bf      	adds	r7, r7, r2
    df14:	e7d6      	b.n	dec4 <__aeabi_dsub+0x4ac>
    df16:	000d      	movs	r5, r1
    df18:	4315      	orrs	r5, r2
    df1a:	d100      	bne.n	df1e <__aeabi_dsub+0x506>
    df1c:	e602      	b.n	db24 <__aeabi_dsub+0x10c>
    df1e:	4650      	mov	r0, sl
    df20:	1a80      	subs	r0, r0, r2
    df22:	4582      	cmp	sl, r0
    df24:	41bf      	sbcs	r7, r7
    df26:	1a65      	subs	r5, r4, r1
    df28:	427f      	negs	r7, r7
    df2a:	1bed      	subs	r5, r5, r7
    df2c:	4684      	mov	ip, r0
    df2e:	0228      	lsls	r0, r5, #8
    df30:	d400      	bmi.n	df34 <__aeabi_dsub+0x51c>
    df32:	e68d      	b.n	dc50 <__aeabi_dsub+0x238>
    df34:	4650      	mov	r0, sl
    df36:	1a17      	subs	r7, r2, r0
    df38:	42ba      	cmp	r2, r7
    df3a:	4192      	sbcs	r2, r2
    df3c:	1b0c      	subs	r4, r1, r4
    df3e:	4252      	negs	r2, r2
    df40:	1aa4      	subs	r4, r4, r2
    df42:	4698      	mov	r8, r3
    df44:	e5ee      	b.n	db24 <__aeabi_dsub+0x10c>
    df46:	000d      	movs	r5, r1
    df48:	4315      	orrs	r5, r2
    df4a:	d100      	bne.n	df4e <__aeabi_dsub+0x536>
    df4c:	e76b      	b.n	de26 <__aeabi_dsub+0x40e>
    df4e:	4650      	mov	r0, sl
    df50:	0767      	lsls	r7, r4, #29
    df52:	08c0      	lsrs	r0, r0, #3
    df54:	4307      	orrs	r7, r0
    df56:	2080      	movs	r0, #128	; 0x80
    df58:	08e4      	lsrs	r4, r4, #3
    df5a:	0300      	lsls	r0, r0, #12
    df5c:	4204      	tst	r4, r0
    df5e:	d007      	beq.n	df70 <__aeabi_dsub+0x558>
    df60:	08cd      	lsrs	r5, r1, #3
    df62:	4205      	tst	r5, r0
    df64:	d104      	bne.n	df70 <__aeabi_dsub+0x558>
    df66:	002c      	movs	r4, r5
    df68:	4698      	mov	r8, r3
    df6a:	08d7      	lsrs	r7, r2, #3
    df6c:	0749      	lsls	r1, r1, #29
    df6e:	430f      	orrs	r7, r1
    df70:	0f7b      	lsrs	r3, r7, #29
    df72:	00e4      	lsls	r4, r4, #3
    df74:	431c      	orrs	r4, r3
    df76:	00ff      	lsls	r7, r7, #3
    df78:	4e30      	ldr	r6, [pc, #192]	; (e03c <__aeabi_dsub+0x624>)
    df7a:	e5d3      	b.n	db24 <__aeabi_dsub+0x10c>
    df7c:	4e2f      	ldr	r6, [pc, #188]	; (e03c <__aeabi_dsub+0x624>)
    df7e:	45b4      	cmp	ip, r6
    df80:	d1b4      	bne.n	deec <__aeabi_dsub+0x4d4>
    df82:	000c      	movs	r4, r1
    df84:	0017      	movs	r7, r2
    df86:	4666      	mov	r6, ip
    df88:	e5cc      	b.n	db24 <__aeabi_dsub+0x10c>
    df8a:	2700      	movs	r7, #0
    df8c:	2400      	movs	r4, #0
    df8e:	e5e8      	b.n	db62 <__aeabi_dsub+0x14a>
    df90:	2b00      	cmp	r3, #0
    df92:	d039      	beq.n	e008 <__aeabi_dsub+0x5f0>
    df94:	000b      	movs	r3, r1
    df96:	4313      	orrs	r3, r2
    df98:	d100      	bne.n	df9c <__aeabi_dsub+0x584>
    df9a:	e744      	b.n	de26 <__aeabi_dsub+0x40e>
    df9c:	08c0      	lsrs	r0, r0, #3
    df9e:	0767      	lsls	r7, r4, #29
    dfa0:	4307      	orrs	r7, r0
    dfa2:	2080      	movs	r0, #128	; 0x80
    dfa4:	08e4      	lsrs	r4, r4, #3
    dfa6:	0300      	lsls	r0, r0, #12
    dfa8:	4204      	tst	r4, r0
    dfaa:	d0e1      	beq.n	df70 <__aeabi_dsub+0x558>
    dfac:	08cb      	lsrs	r3, r1, #3
    dfae:	4203      	tst	r3, r0
    dfb0:	d1de      	bne.n	df70 <__aeabi_dsub+0x558>
    dfb2:	08d7      	lsrs	r7, r2, #3
    dfb4:	0749      	lsls	r1, r1, #29
    dfb6:	430f      	orrs	r7, r1
    dfb8:	001c      	movs	r4, r3
    dfba:	e7d9      	b.n	df70 <__aeabi_dsub+0x558>
    dfbc:	2100      	movs	r1, #0
    dfbe:	e771      	b.n	dea4 <__aeabi_dsub+0x48c>
    dfc0:	2500      	movs	r5, #0
    dfc2:	2700      	movs	r7, #0
    dfc4:	e5e9      	b.n	db9a <__aeabi_dsub+0x182>
    dfc6:	002e      	movs	r6, r5
    dfc8:	0027      	movs	r7, r4
    dfca:	3e20      	subs	r6, #32
    dfcc:	40f7      	lsrs	r7, r6
    dfce:	2d20      	cmp	r5, #32
    dfd0:	d02f      	beq.n	e032 <__aeabi_dsub+0x61a>
    dfd2:	2640      	movs	r6, #64	; 0x40
    dfd4:	1b75      	subs	r5, r6, r5
    dfd6:	40ac      	lsls	r4, r5
    dfd8:	4650      	mov	r0, sl
    dfda:	4320      	orrs	r0, r4
    dfdc:	1e44      	subs	r4, r0, #1
    dfde:	41a0      	sbcs	r0, r4
    dfe0:	2400      	movs	r4, #0
    dfe2:	4338      	orrs	r0, r7
    dfe4:	e6dc      	b.n	dda0 <__aeabi_dsub+0x388>
    dfe6:	2480      	movs	r4, #128	; 0x80
    dfe8:	2500      	movs	r5, #0
    dfea:	0324      	lsls	r4, r4, #12
    dfec:	4e13      	ldr	r6, [pc, #76]	; (e03c <__aeabi_dsub+0x624>)
    dfee:	2700      	movs	r7, #0
    dff0:	e5d3      	b.n	db9a <__aeabi_dsub+0x182>
    dff2:	4650      	mov	r0, sl
    dff4:	4320      	orrs	r0, r4
    dff6:	0007      	movs	r7, r0
    dff8:	1e78      	subs	r0, r7, #1
    dffa:	4187      	sbcs	r7, r0
    dffc:	2400      	movs	r4, #0
    dffe:	18bf      	adds	r7, r7, r2
    e000:	e760      	b.n	dec4 <__aeabi_dsub+0x4ac>
    e002:	000c      	movs	r4, r1
    e004:	0017      	movs	r7, r2
    e006:	e58d      	b.n	db24 <__aeabi_dsub+0x10c>
    e008:	000c      	movs	r4, r1
    e00a:	0017      	movs	r7, r2
    e00c:	4e0b      	ldr	r6, [pc, #44]	; (e03c <__aeabi_dsub+0x624>)
    e00e:	e589      	b.n	db24 <__aeabi_dsub+0x10c>
    e010:	001e      	movs	r6, r3
    e012:	0027      	movs	r7, r4
    e014:	3e20      	subs	r6, #32
    e016:	40f7      	lsrs	r7, r6
    e018:	2b20      	cmp	r3, #32
    e01a:	d00c      	beq.n	e036 <__aeabi_dsub+0x61e>
    e01c:	2640      	movs	r6, #64	; 0x40
    e01e:	1af3      	subs	r3, r6, r3
    e020:	409c      	lsls	r4, r3
    e022:	4650      	mov	r0, sl
    e024:	4320      	orrs	r0, r4
    e026:	1e44      	subs	r4, r0, #1
    e028:	41a0      	sbcs	r0, r4
    e02a:	4307      	orrs	r7, r0
    e02c:	2400      	movs	r4, #0
    e02e:	18bf      	adds	r7, r7, r2
    e030:	e748      	b.n	dec4 <__aeabi_dsub+0x4ac>
    e032:	2400      	movs	r4, #0
    e034:	e7d0      	b.n	dfd8 <__aeabi_dsub+0x5c0>
    e036:	2400      	movs	r4, #0
    e038:	e7f3      	b.n	e022 <__aeabi_dsub+0x60a>
    e03a:	46c0      	nop			; (mov r8, r8)
    e03c:	000007ff 	.word	0x000007ff
    e040:	ff7fffff 	.word	0xff7fffff

0000e044 <__aeabi_d2iz>:
    e044:	b530      	push	{r4, r5, lr}
    e046:	4d13      	ldr	r5, [pc, #76]	; (e094 <__aeabi_d2iz+0x50>)
    e048:	030a      	lsls	r2, r1, #12
    e04a:	004b      	lsls	r3, r1, #1
    e04c:	0b12      	lsrs	r2, r2, #12
    e04e:	0d5b      	lsrs	r3, r3, #21
    e050:	0fc9      	lsrs	r1, r1, #31
    e052:	2400      	movs	r4, #0
    e054:	42ab      	cmp	r3, r5
    e056:	dd10      	ble.n	e07a <__aeabi_d2iz+0x36>
    e058:	4c0f      	ldr	r4, [pc, #60]	; (e098 <__aeabi_d2iz+0x54>)
    e05a:	42a3      	cmp	r3, r4
    e05c:	dc0f      	bgt.n	e07e <__aeabi_d2iz+0x3a>
    e05e:	2480      	movs	r4, #128	; 0x80
    e060:	4d0e      	ldr	r5, [pc, #56]	; (e09c <__aeabi_d2iz+0x58>)
    e062:	0364      	lsls	r4, r4, #13
    e064:	4322      	orrs	r2, r4
    e066:	1aed      	subs	r5, r5, r3
    e068:	2d1f      	cmp	r5, #31
    e06a:	dd0b      	ble.n	e084 <__aeabi_d2iz+0x40>
    e06c:	480c      	ldr	r0, [pc, #48]	; (e0a0 <__aeabi_d2iz+0x5c>)
    e06e:	1ac3      	subs	r3, r0, r3
    e070:	40da      	lsrs	r2, r3
    e072:	4254      	negs	r4, r2
    e074:	2900      	cmp	r1, #0
    e076:	d100      	bne.n	e07a <__aeabi_d2iz+0x36>
    e078:	0014      	movs	r4, r2
    e07a:	0020      	movs	r0, r4
    e07c:	bd30      	pop	{r4, r5, pc}
    e07e:	4b09      	ldr	r3, [pc, #36]	; (e0a4 <__aeabi_d2iz+0x60>)
    e080:	18cc      	adds	r4, r1, r3
    e082:	e7fa      	b.n	e07a <__aeabi_d2iz+0x36>
    e084:	4c08      	ldr	r4, [pc, #32]	; (e0a8 <__aeabi_d2iz+0x64>)
    e086:	40e8      	lsrs	r0, r5
    e088:	46a4      	mov	ip, r4
    e08a:	4463      	add	r3, ip
    e08c:	409a      	lsls	r2, r3
    e08e:	4302      	orrs	r2, r0
    e090:	e7ef      	b.n	e072 <__aeabi_d2iz+0x2e>
    e092:	46c0      	nop			; (mov r8, r8)
    e094:	000003fe 	.word	0x000003fe
    e098:	0000041d 	.word	0x0000041d
    e09c:	00000433 	.word	0x00000433
    e0a0:	00000413 	.word	0x00000413
    e0a4:	7fffffff 	.word	0x7fffffff
    e0a8:	fffffbed 	.word	0xfffffbed

0000e0ac <__aeabi_ui2d>:
    e0ac:	b510      	push	{r4, lr}
    e0ae:	1e04      	subs	r4, r0, #0
    e0b0:	d028      	beq.n	e104 <__aeabi_ui2d+0x58>
    e0b2:	f000 f833 	bl	e11c <__clzsi2>
    e0b6:	4b15      	ldr	r3, [pc, #84]	; (e10c <__aeabi_ui2d+0x60>)
    e0b8:	4a15      	ldr	r2, [pc, #84]	; (e110 <__aeabi_ui2d+0x64>)
    e0ba:	1a1b      	subs	r3, r3, r0
    e0bc:	1ad2      	subs	r2, r2, r3
    e0be:	2a1f      	cmp	r2, #31
    e0c0:	dd15      	ble.n	e0ee <__aeabi_ui2d+0x42>
    e0c2:	4a14      	ldr	r2, [pc, #80]	; (e114 <__aeabi_ui2d+0x68>)
    e0c4:	1ad2      	subs	r2, r2, r3
    e0c6:	4094      	lsls	r4, r2
    e0c8:	2200      	movs	r2, #0
    e0ca:	0324      	lsls	r4, r4, #12
    e0cc:	055b      	lsls	r3, r3, #21
    e0ce:	0b24      	lsrs	r4, r4, #12
    e0d0:	0d5b      	lsrs	r3, r3, #21
    e0d2:	2100      	movs	r1, #0
    e0d4:	0010      	movs	r0, r2
    e0d6:	0324      	lsls	r4, r4, #12
    e0d8:	0d0a      	lsrs	r2, r1, #20
    e0da:	0b24      	lsrs	r4, r4, #12
    e0dc:	0512      	lsls	r2, r2, #20
    e0de:	4322      	orrs	r2, r4
    e0e0:	4c0d      	ldr	r4, [pc, #52]	; (e118 <__aeabi_ui2d+0x6c>)
    e0e2:	051b      	lsls	r3, r3, #20
    e0e4:	4022      	ands	r2, r4
    e0e6:	4313      	orrs	r3, r2
    e0e8:	005b      	lsls	r3, r3, #1
    e0ea:	0859      	lsrs	r1, r3, #1
    e0ec:	bd10      	pop	{r4, pc}
    e0ee:	0021      	movs	r1, r4
    e0f0:	4091      	lsls	r1, r2
    e0f2:	000a      	movs	r2, r1
    e0f4:	210b      	movs	r1, #11
    e0f6:	1a08      	subs	r0, r1, r0
    e0f8:	40c4      	lsrs	r4, r0
    e0fa:	055b      	lsls	r3, r3, #21
    e0fc:	0324      	lsls	r4, r4, #12
    e0fe:	0b24      	lsrs	r4, r4, #12
    e100:	0d5b      	lsrs	r3, r3, #21
    e102:	e7e6      	b.n	e0d2 <__aeabi_ui2d+0x26>
    e104:	2300      	movs	r3, #0
    e106:	2400      	movs	r4, #0
    e108:	2200      	movs	r2, #0
    e10a:	e7e2      	b.n	e0d2 <__aeabi_ui2d+0x26>
    e10c:	0000041e 	.word	0x0000041e
    e110:	00000433 	.word	0x00000433
    e114:	00000413 	.word	0x00000413
    e118:	800fffff 	.word	0x800fffff

0000e11c <__clzsi2>:
    e11c:	211c      	movs	r1, #28
    e11e:	2301      	movs	r3, #1
    e120:	041b      	lsls	r3, r3, #16
    e122:	4298      	cmp	r0, r3
    e124:	d301      	bcc.n	e12a <__clzsi2+0xe>
    e126:	0c00      	lsrs	r0, r0, #16
    e128:	3910      	subs	r1, #16
    e12a:	0a1b      	lsrs	r3, r3, #8
    e12c:	4298      	cmp	r0, r3
    e12e:	d301      	bcc.n	e134 <__clzsi2+0x18>
    e130:	0a00      	lsrs	r0, r0, #8
    e132:	3908      	subs	r1, #8
    e134:	091b      	lsrs	r3, r3, #4
    e136:	4298      	cmp	r0, r3
    e138:	d301      	bcc.n	e13e <__clzsi2+0x22>
    e13a:	0900      	lsrs	r0, r0, #4
    e13c:	3904      	subs	r1, #4
    e13e:	a202      	add	r2, pc, #8	; (adr r2, e148 <__clzsi2+0x2c>)
    e140:	5c10      	ldrb	r0, [r2, r0]
    e142:	1840      	adds	r0, r0, r1
    e144:	4770      	bx	lr
    e146:	46c0      	nop			; (mov r8, r8)
    e148:	02020304 	.word	0x02020304
    e14c:	01010101 	.word	0x01010101
	...

0000e158 <__libc_init_array>:
    e158:	b570      	push	{r4, r5, r6, lr}
    e15a:	2600      	movs	r6, #0
    e15c:	4d0c      	ldr	r5, [pc, #48]	; (e190 <__libc_init_array+0x38>)
    e15e:	4c0d      	ldr	r4, [pc, #52]	; (e194 <__libc_init_array+0x3c>)
    e160:	1b64      	subs	r4, r4, r5
    e162:	10a4      	asrs	r4, r4, #2
    e164:	42a6      	cmp	r6, r4
    e166:	d109      	bne.n	e17c <__libc_init_array+0x24>
    e168:	2600      	movs	r6, #0
    e16a:	f002 fd5f 	bl	10c2c <_init>
    e16e:	4d0a      	ldr	r5, [pc, #40]	; (e198 <__libc_init_array+0x40>)
    e170:	4c0a      	ldr	r4, [pc, #40]	; (e19c <__libc_init_array+0x44>)
    e172:	1b64      	subs	r4, r4, r5
    e174:	10a4      	asrs	r4, r4, #2
    e176:	42a6      	cmp	r6, r4
    e178:	d105      	bne.n	e186 <__libc_init_array+0x2e>
    e17a:	bd70      	pop	{r4, r5, r6, pc}
    e17c:	00b3      	lsls	r3, r6, #2
    e17e:	58eb      	ldr	r3, [r5, r3]
    e180:	4798      	blx	r3
    e182:	3601      	adds	r6, #1
    e184:	e7ee      	b.n	e164 <__libc_init_array+0xc>
    e186:	00b3      	lsls	r3, r6, #2
    e188:	58eb      	ldr	r3, [r5, r3]
    e18a:	4798      	blx	r3
    e18c:	3601      	adds	r6, #1
    e18e:	e7f2      	b.n	e176 <__libc_init_array+0x1e>
    e190:	00010c38 	.word	0x00010c38
    e194:	00010c38 	.word	0x00010c38
    e198:	00010c38 	.word	0x00010c38
    e19c:	00010c3c 	.word	0x00010c3c

0000e1a0 <__locale_ctype_ptr_l>:
    e1a0:	30ec      	adds	r0, #236	; 0xec
    e1a2:	6800      	ldr	r0, [r0, #0]
    e1a4:	4770      	bx	lr
	...

0000e1a8 <__locale_ctype_ptr>:
    e1a8:	4b04      	ldr	r3, [pc, #16]	; (e1bc <__locale_ctype_ptr+0x14>)
    e1aa:	681b      	ldr	r3, [r3, #0]
    e1ac:	6a1b      	ldr	r3, [r3, #32]
    e1ae:	2b00      	cmp	r3, #0
    e1b0:	d100      	bne.n	e1b4 <__locale_ctype_ptr+0xc>
    e1b2:	4b03      	ldr	r3, [pc, #12]	; (e1c0 <__locale_ctype_ptr+0x18>)
    e1b4:	33ec      	adds	r3, #236	; 0xec
    e1b6:	6818      	ldr	r0, [r3, #0]
    e1b8:	4770      	bx	lr
    e1ba:	46c0      	nop			; (mov r8, r8)
    e1bc:	20000030 	.word	0x20000030
    e1c0:	20000094 	.word	0x20000094

0000e1c4 <malloc>:
    e1c4:	b510      	push	{r4, lr}
    e1c6:	4b03      	ldr	r3, [pc, #12]	; (e1d4 <malloc+0x10>)
    e1c8:	0001      	movs	r1, r0
    e1ca:	6818      	ldr	r0, [r3, #0]
    e1cc:	f000 f872 	bl	e2b4 <_malloc_r>
    e1d0:	bd10      	pop	{r4, pc}
    e1d2:	46c0      	nop			; (mov r8, r8)
    e1d4:	20000030 	.word	0x20000030

0000e1d8 <__ascii_mbtowc>:
    e1d8:	b082      	sub	sp, #8
    e1da:	2900      	cmp	r1, #0
    e1dc:	d100      	bne.n	e1e0 <__ascii_mbtowc+0x8>
    e1de:	a901      	add	r1, sp, #4
    e1e0:	1e10      	subs	r0, r2, #0
    e1e2:	d006      	beq.n	e1f2 <__ascii_mbtowc+0x1a>
    e1e4:	2b00      	cmp	r3, #0
    e1e6:	d006      	beq.n	e1f6 <__ascii_mbtowc+0x1e>
    e1e8:	7813      	ldrb	r3, [r2, #0]
    e1ea:	600b      	str	r3, [r1, #0]
    e1ec:	7810      	ldrb	r0, [r2, #0]
    e1ee:	1e43      	subs	r3, r0, #1
    e1f0:	4198      	sbcs	r0, r3
    e1f2:	b002      	add	sp, #8
    e1f4:	4770      	bx	lr
    e1f6:	2002      	movs	r0, #2
    e1f8:	4240      	negs	r0, r0
    e1fa:	e7fa      	b.n	e1f2 <__ascii_mbtowc+0x1a>

0000e1fc <memcpy>:
    e1fc:	2300      	movs	r3, #0
    e1fe:	b510      	push	{r4, lr}
    e200:	429a      	cmp	r2, r3
    e202:	d100      	bne.n	e206 <memcpy+0xa>
    e204:	bd10      	pop	{r4, pc}
    e206:	5ccc      	ldrb	r4, [r1, r3]
    e208:	54c4      	strb	r4, [r0, r3]
    e20a:	3301      	adds	r3, #1
    e20c:	e7f8      	b.n	e200 <memcpy+0x4>

0000e20e <memset>:
    e20e:	0003      	movs	r3, r0
    e210:	1882      	adds	r2, r0, r2
    e212:	4293      	cmp	r3, r2
    e214:	d100      	bne.n	e218 <memset+0xa>
    e216:	4770      	bx	lr
    e218:	7019      	strb	r1, [r3, #0]
    e21a:	3301      	adds	r3, #1
    e21c:	e7f9      	b.n	e212 <memset+0x4>
	...

0000e220 <_free_r>:
    e220:	b570      	push	{r4, r5, r6, lr}
    e222:	0005      	movs	r5, r0
    e224:	2900      	cmp	r1, #0
    e226:	d010      	beq.n	e24a <_free_r+0x2a>
    e228:	1f0c      	subs	r4, r1, #4
    e22a:	6823      	ldr	r3, [r4, #0]
    e22c:	2b00      	cmp	r3, #0
    e22e:	da00      	bge.n	e232 <_free_r+0x12>
    e230:	18e4      	adds	r4, r4, r3
    e232:	0028      	movs	r0, r5
    e234:	f000 fa2c 	bl	e690 <__malloc_lock>
    e238:	4a1d      	ldr	r2, [pc, #116]	; (e2b0 <_free_r+0x90>)
    e23a:	6813      	ldr	r3, [r2, #0]
    e23c:	2b00      	cmp	r3, #0
    e23e:	d105      	bne.n	e24c <_free_r+0x2c>
    e240:	6063      	str	r3, [r4, #4]
    e242:	6014      	str	r4, [r2, #0]
    e244:	0028      	movs	r0, r5
    e246:	f000 fa24 	bl	e692 <__malloc_unlock>
    e24a:	bd70      	pop	{r4, r5, r6, pc}
    e24c:	42a3      	cmp	r3, r4
    e24e:	d909      	bls.n	e264 <_free_r+0x44>
    e250:	6821      	ldr	r1, [r4, #0]
    e252:	1860      	adds	r0, r4, r1
    e254:	4283      	cmp	r3, r0
    e256:	d1f3      	bne.n	e240 <_free_r+0x20>
    e258:	6818      	ldr	r0, [r3, #0]
    e25a:	685b      	ldr	r3, [r3, #4]
    e25c:	1841      	adds	r1, r0, r1
    e25e:	6021      	str	r1, [r4, #0]
    e260:	e7ee      	b.n	e240 <_free_r+0x20>
    e262:	0013      	movs	r3, r2
    e264:	685a      	ldr	r2, [r3, #4]
    e266:	2a00      	cmp	r2, #0
    e268:	d001      	beq.n	e26e <_free_r+0x4e>
    e26a:	42a2      	cmp	r2, r4
    e26c:	d9f9      	bls.n	e262 <_free_r+0x42>
    e26e:	6819      	ldr	r1, [r3, #0]
    e270:	1858      	adds	r0, r3, r1
    e272:	42a0      	cmp	r0, r4
    e274:	d10b      	bne.n	e28e <_free_r+0x6e>
    e276:	6820      	ldr	r0, [r4, #0]
    e278:	1809      	adds	r1, r1, r0
    e27a:	1858      	adds	r0, r3, r1
    e27c:	6019      	str	r1, [r3, #0]
    e27e:	4282      	cmp	r2, r0
    e280:	d1e0      	bne.n	e244 <_free_r+0x24>
    e282:	6810      	ldr	r0, [r2, #0]
    e284:	6852      	ldr	r2, [r2, #4]
    e286:	1841      	adds	r1, r0, r1
    e288:	6019      	str	r1, [r3, #0]
    e28a:	605a      	str	r2, [r3, #4]
    e28c:	e7da      	b.n	e244 <_free_r+0x24>
    e28e:	42a0      	cmp	r0, r4
    e290:	d902      	bls.n	e298 <_free_r+0x78>
    e292:	230c      	movs	r3, #12
    e294:	602b      	str	r3, [r5, #0]
    e296:	e7d5      	b.n	e244 <_free_r+0x24>
    e298:	6821      	ldr	r1, [r4, #0]
    e29a:	1860      	adds	r0, r4, r1
    e29c:	4282      	cmp	r2, r0
    e29e:	d103      	bne.n	e2a8 <_free_r+0x88>
    e2a0:	6810      	ldr	r0, [r2, #0]
    e2a2:	6852      	ldr	r2, [r2, #4]
    e2a4:	1841      	adds	r1, r0, r1
    e2a6:	6021      	str	r1, [r4, #0]
    e2a8:	6062      	str	r2, [r4, #4]
    e2aa:	605c      	str	r4, [r3, #4]
    e2ac:	e7ca      	b.n	e244 <_free_r+0x24>
    e2ae:	46c0      	nop			; (mov r8, r8)
    e2b0:	20003870 	.word	0x20003870

0000e2b4 <_malloc_r>:
    e2b4:	2303      	movs	r3, #3
    e2b6:	b570      	push	{r4, r5, r6, lr}
    e2b8:	1ccd      	adds	r5, r1, #3
    e2ba:	439d      	bics	r5, r3
    e2bc:	3508      	adds	r5, #8
    e2be:	0006      	movs	r6, r0
    e2c0:	2d0c      	cmp	r5, #12
    e2c2:	d21e      	bcs.n	e302 <_malloc_r+0x4e>
    e2c4:	250c      	movs	r5, #12
    e2c6:	42a9      	cmp	r1, r5
    e2c8:	d81d      	bhi.n	e306 <_malloc_r+0x52>
    e2ca:	0030      	movs	r0, r6
    e2cc:	f000 f9e0 	bl	e690 <__malloc_lock>
    e2d0:	4a25      	ldr	r2, [pc, #148]	; (e368 <_malloc_r+0xb4>)
    e2d2:	6814      	ldr	r4, [r2, #0]
    e2d4:	0021      	movs	r1, r4
    e2d6:	2900      	cmp	r1, #0
    e2d8:	d119      	bne.n	e30e <_malloc_r+0x5a>
    e2da:	4c24      	ldr	r4, [pc, #144]	; (e36c <_malloc_r+0xb8>)
    e2dc:	6823      	ldr	r3, [r4, #0]
    e2de:	2b00      	cmp	r3, #0
    e2e0:	d103      	bne.n	e2ea <_malloc_r+0x36>
    e2e2:	0030      	movs	r0, r6
    e2e4:	f000 f844 	bl	e370 <_sbrk_r>
    e2e8:	6020      	str	r0, [r4, #0]
    e2ea:	0029      	movs	r1, r5
    e2ec:	0030      	movs	r0, r6
    e2ee:	f000 f83f 	bl	e370 <_sbrk_r>
    e2f2:	1c43      	adds	r3, r0, #1
    e2f4:	d12c      	bne.n	e350 <_malloc_r+0x9c>
    e2f6:	230c      	movs	r3, #12
    e2f8:	0030      	movs	r0, r6
    e2fa:	6033      	str	r3, [r6, #0]
    e2fc:	f000 f9c9 	bl	e692 <__malloc_unlock>
    e300:	e003      	b.n	e30a <_malloc_r+0x56>
    e302:	2d00      	cmp	r5, #0
    e304:	dadf      	bge.n	e2c6 <_malloc_r+0x12>
    e306:	230c      	movs	r3, #12
    e308:	6033      	str	r3, [r6, #0]
    e30a:	2000      	movs	r0, #0
    e30c:	bd70      	pop	{r4, r5, r6, pc}
    e30e:	680b      	ldr	r3, [r1, #0]
    e310:	1b5b      	subs	r3, r3, r5
    e312:	d41a      	bmi.n	e34a <_malloc_r+0x96>
    e314:	2b0b      	cmp	r3, #11
    e316:	d903      	bls.n	e320 <_malloc_r+0x6c>
    e318:	600b      	str	r3, [r1, #0]
    e31a:	18cc      	adds	r4, r1, r3
    e31c:	6025      	str	r5, [r4, #0]
    e31e:	e003      	b.n	e328 <_malloc_r+0x74>
    e320:	428c      	cmp	r4, r1
    e322:	d10e      	bne.n	e342 <_malloc_r+0x8e>
    e324:	6863      	ldr	r3, [r4, #4]
    e326:	6013      	str	r3, [r2, #0]
    e328:	0030      	movs	r0, r6
    e32a:	f000 f9b2 	bl	e692 <__malloc_unlock>
    e32e:	0020      	movs	r0, r4
    e330:	2207      	movs	r2, #7
    e332:	300b      	adds	r0, #11
    e334:	1d23      	adds	r3, r4, #4
    e336:	4390      	bics	r0, r2
    e338:	1ac3      	subs	r3, r0, r3
    e33a:	d0e7      	beq.n	e30c <_malloc_r+0x58>
    e33c:	425a      	negs	r2, r3
    e33e:	50e2      	str	r2, [r4, r3]
    e340:	e7e4      	b.n	e30c <_malloc_r+0x58>
    e342:	684b      	ldr	r3, [r1, #4]
    e344:	6063      	str	r3, [r4, #4]
    e346:	000c      	movs	r4, r1
    e348:	e7ee      	b.n	e328 <_malloc_r+0x74>
    e34a:	000c      	movs	r4, r1
    e34c:	6849      	ldr	r1, [r1, #4]
    e34e:	e7c2      	b.n	e2d6 <_malloc_r+0x22>
    e350:	2303      	movs	r3, #3
    e352:	1cc4      	adds	r4, r0, #3
    e354:	439c      	bics	r4, r3
    e356:	42a0      	cmp	r0, r4
    e358:	d0e0      	beq.n	e31c <_malloc_r+0x68>
    e35a:	1a21      	subs	r1, r4, r0
    e35c:	0030      	movs	r0, r6
    e35e:	f000 f807 	bl	e370 <_sbrk_r>
    e362:	1c43      	adds	r3, r0, #1
    e364:	d1da      	bne.n	e31c <_malloc_r+0x68>
    e366:	e7c6      	b.n	e2f6 <_malloc_r+0x42>
    e368:	20003870 	.word	0x20003870
    e36c:	20003874 	.word	0x20003874

0000e370 <_sbrk_r>:
    e370:	2300      	movs	r3, #0
    e372:	b570      	push	{r4, r5, r6, lr}
    e374:	4c06      	ldr	r4, [pc, #24]	; (e390 <_sbrk_r+0x20>)
    e376:	0005      	movs	r5, r0
    e378:	0008      	movs	r0, r1
    e37a:	6023      	str	r3, [r4, #0]
    e37c:	f7fd fef8 	bl	c170 <_sbrk>
    e380:	1c43      	adds	r3, r0, #1
    e382:	d103      	bne.n	e38c <_sbrk_r+0x1c>
    e384:	6823      	ldr	r3, [r4, #0]
    e386:	2b00      	cmp	r3, #0
    e388:	d000      	beq.n	e38c <_sbrk_r+0x1c>
    e38a:	602b      	str	r3, [r5, #0]
    e38c:	bd70      	pop	{r4, r5, r6, pc}
    e38e:	46c0      	nop			; (mov r8, r8)
    e390:	2000510c 	.word	0x2000510c

0000e394 <sniprintf>:
    e394:	b40c      	push	{r2, r3}
    e396:	b530      	push	{r4, r5, lr}
    e398:	4b16      	ldr	r3, [pc, #88]	; (e3f4 <sniprintf+0x60>)
    e39a:	b09d      	sub	sp, #116	; 0x74
    e39c:	1e0c      	subs	r4, r1, #0
    e39e:	681d      	ldr	r5, [r3, #0]
    e3a0:	da08      	bge.n	e3b4 <sniprintf+0x20>
    e3a2:	238b      	movs	r3, #139	; 0x8b
    e3a4:	2001      	movs	r0, #1
    e3a6:	602b      	str	r3, [r5, #0]
    e3a8:	4240      	negs	r0, r0
    e3aa:	b01d      	add	sp, #116	; 0x74
    e3ac:	bc30      	pop	{r4, r5}
    e3ae:	bc08      	pop	{r3}
    e3b0:	b002      	add	sp, #8
    e3b2:	4718      	bx	r3
    e3b4:	2382      	movs	r3, #130	; 0x82
    e3b6:	a902      	add	r1, sp, #8
    e3b8:	009b      	lsls	r3, r3, #2
    e3ba:	818b      	strh	r3, [r1, #12]
    e3bc:	2300      	movs	r3, #0
    e3be:	9002      	str	r0, [sp, #8]
    e3c0:	6108      	str	r0, [r1, #16]
    e3c2:	429c      	cmp	r4, r3
    e3c4:	d000      	beq.n	e3c8 <sniprintf+0x34>
    e3c6:	1e63      	subs	r3, r4, #1
    e3c8:	608b      	str	r3, [r1, #8]
    e3ca:	614b      	str	r3, [r1, #20]
    e3cc:	2301      	movs	r3, #1
    e3ce:	425b      	negs	r3, r3
    e3d0:	81cb      	strh	r3, [r1, #14]
    e3d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    e3d4:	ab21      	add	r3, sp, #132	; 0x84
    e3d6:	0028      	movs	r0, r5
    e3d8:	9301      	str	r3, [sp, #4]
    e3da:	f000 f9bd 	bl	e758 <_svfiprintf_r>
    e3de:	1c43      	adds	r3, r0, #1
    e3e0:	da01      	bge.n	e3e6 <sniprintf+0x52>
    e3e2:	238b      	movs	r3, #139	; 0x8b
    e3e4:	602b      	str	r3, [r5, #0]
    e3e6:	2c00      	cmp	r4, #0
    e3e8:	d0df      	beq.n	e3aa <sniprintf+0x16>
    e3ea:	2300      	movs	r3, #0
    e3ec:	9a02      	ldr	r2, [sp, #8]
    e3ee:	7013      	strb	r3, [r2, #0]
    e3f0:	e7db      	b.n	e3aa <sniprintf+0x16>
    e3f2:	46c0      	nop			; (mov r8, r8)
    e3f4:	20000030 	.word	0x20000030

0000e3f8 <siprintf>:
    e3f8:	b40e      	push	{r1, r2, r3}
    e3fa:	b510      	push	{r4, lr}
    e3fc:	b09d      	sub	sp, #116	; 0x74
    e3fe:	a902      	add	r1, sp, #8
    e400:	9002      	str	r0, [sp, #8]
    e402:	6108      	str	r0, [r1, #16]
    e404:	480b      	ldr	r0, [pc, #44]	; (e434 <siprintf+0x3c>)
    e406:	2482      	movs	r4, #130	; 0x82
    e408:	6088      	str	r0, [r1, #8]
    e40a:	6148      	str	r0, [r1, #20]
    e40c:	2001      	movs	r0, #1
    e40e:	4240      	negs	r0, r0
    e410:	ab1f      	add	r3, sp, #124	; 0x7c
    e412:	81c8      	strh	r0, [r1, #14]
    e414:	4808      	ldr	r0, [pc, #32]	; (e438 <siprintf+0x40>)
    e416:	cb04      	ldmia	r3!, {r2}
    e418:	00a4      	lsls	r4, r4, #2
    e41a:	6800      	ldr	r0, [r0, #0]
    e41c:	9301      	str	r3, [sp, #4]
    e41e:	818c      	strh	r4, [r1, #12]
    e420:	f000 f99a 	bl	e758 <_svfiprintf_r>
    e424:	2300      	movs	r3, #0
    e426:	9a02      	ldr	r2, [sp, #8]
    e428:	7013      	strb	r3, [r2, #0]
    e42a:	b01d      	add	sp, #116	; 0x74
    e42c:	bc10      	pop	{r4}
    e42e:	bc08      	pop	{r3}
    e430:	b003      	add	sp, #12
    e432:	4718      	bx	r3
    e434:	7fffffff 	.word	0x7fffffff
    e438:	20000030 	.word	0x20000030

0000e43c <strcasecmp>:
    e43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e43e:	0007      	movs	r7, r0
    e440:	000e      	movs	r6, r1
    e442:	783c      	ldrb	r4, [r7, #0]
    e444:	f7ff feb0 	bl	e1a8 <__locale_ctype_ptr>
    e448:	2203      	movs	r2, #3
    e44a:	1900      	adds	r0, r0, r4
    e44c:	7843      	ldrb	r3, [r0, #1]
    e44e:	4013      	ands	r3, r2
    e450:	2b01      	cmp	r3, #1
    e452:	d100      	bne.n	e456 <strcasecmp+0x1a>
    e454:	3420      	adds	r4, #32
    e456:	7835      	ldrb	r5, [r6, #0]
    e458:	f7ff fea6 	bl	e1a8 <__locale_ctype_ptr>
    e45c:	2203      	movs	r2, #3
    e45e:	1940      	adds	r0, r0, r5
    e460:	7843      	ldrb	r3, [r0, #1]
    e462:	4013      	ands	r3, r2
    e464:	2b01      	cmp	r3, #1
    e466:	d100      	bne.n	e46a <strcasecmp+0x2e>
    e468:	3520      	adds	r5, #32
    e46a:	1b60      	subs	r0, r4, r5
    e46c:	d103      	bne.n	e476 <strcasecmp+0x3a>
    e46e:	3701      	adds	r7, #1
    e470:	3601      	adds	r6, #1
    e472:	2d00      	cmp	r5, #0
    e474:	d1e5      	bne.n	e442 <strcasecmp+0x6>
    e476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e478 <strlen>:
    e478:	2300      	movs	r3, #0
    e47a:	5cc2      	ldrb	r2, [r0, r3]
    e47c:	3301      	adds	r3, #1
    e47e:	2a00      	cmp	r2, #0
    e480:	d1fb      	bne.n	e47a <strlen+0x2>
    e482:	1e58      	subs	r0, r3, #1
    e484:	4770      	bx	lr

0000e486 <strncmp>:
    e486:	2300      	movs	r3, #0
    e488:	b530      	push	{r4, r5, lr}
    e48a:	429a      	cmp	r2, r3
    e48c:	d00a      	beq.n	e4a4 <strncmp+0x1e>
    e48e:	3a01      	subs	r2, #1
    e490:	5cc4      	ldrb	r4, [r0, r3]
    e492:	5ccd      	ldrb	r5, [r1, r3]
    e494:	42ac      	cmp	r4, r5
    e496:	d104      	bne.n	e4a2 <strncmp+0x1c>
    e498:	429a      	cmp	r2, r3
    e49a:	d002      	beq.n	e4a2 <strncmp+0x1c>
    e49c:	3301      	adds	r3, #1
    e49e:	2c00      	cmp	r4, #0
    e4a0:	d1f6      	bne.n	e490 <strncmp+0xa>
    e4a2:	1b63      	subs	r3, r4, r5
    e4a4:	0018      	movs	r0, r3
    e4a6:	bd30      	pop	{r4, r5, pc}

0000e4a8 <strncpy>:
    e4a8:	b570      	push	{r4, r5, r6, lr}
    e4aa:	0004      	movs	r4, r0
    e4ac:	2a00      	cmp	r2, #0
    e4ae:	d100      	bne.n	e4b2 <strncpy+0xa>
    e4b0:	bd70      	pop	{r4, r5, r6, pc}
    e4b2:	780d      	ldrb	r5, [r1, #0]
    e4b4:	1e56      	subs	r6, r2, #1
    e4b6:	1c63      	adds	r3, r4, #1
    e4b8:	7025      	strb	r5, [r4, #0]
    e4ba:	3101      	adds	r1, #1
    e4bc:	2d00      	cmp	r5, #0
    e4be:	d105      	bne.n	e4cc <strncpy+0x24>
    e4c0:	18a4      	adds	r4, r4, r2
    e4c2:	429c      	cmp	r4, r3
    e4c4:	d0f4      	beq.n	e4b0 <strncpy+0x8>
    e4c6:	701d      	strb	r5, [r3, #0]
    e4c8:	3301      	adds	r3, #1
    e4ca:	e7fa      	b.n	e4c2 <strncpy+0x1a>
    e4cc:	001c      	movs	r4, r3
    e4ce:	0032      	movs	r2, r6
    e4d0:	e7ec      	b.n	e4ac <strncpy+0x4>
	...

0000e4d4 <_strtol_l.isra.0>:
    e4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4d6:	001f      	movs	r7, r3
    e4d8:	000e      	movs	r6, r1
    e4da:	b087      	sub	sp, #28
    e4dc:	9005      	str	r0, [sp, #20]
    e4de:	9103      	str	r1, [sp, #12]
    e4e0:	9202      	str	r2, [sp, #8]
    e4e2:	980c      	ldr	r0, [sp, #48]	; 0x30
    e4e4:	7834      	ldrb	r4, [r6, #0]
    e4e6:	f7ff fe5b 	bl	e1a0 <__locale_ctype_ptr_l>
    e4ea:	2208      	movs	r2, #8
    e4ec:	1900      	adds	r0, r0, r4
    e4ee:	7843      	ldrb	r3, [r0, #1]
    e4f0:	1c75      	adds	r5, r6, #1
    e4f2:	4013      	ands	r3, r2
    e4f4:	d10c      	bne.n	e510 <_strtol_l.isra.0+0x3c>
    e4f6:	2c2d      	cmp	r4, #45	; 0x2d
    e4f8:	d10c      	bne.n	e514 <_strtol_l.isra.0+0x40>
    e4fa:	3301      	adds	r3, #1
    e4fc:	782c      	ldrb	r4, [r5, #0]
    e4fe:	9301      	str	r3, [sp, #4]
    e500:	1cb5      	adds	r5, r6, #2
    e502:	2f00      	cmp	r7, #0
    e504:	d00c      	beq.n	e520 <_strtol_l.isra.0+0x4c>
    e506:	2f10      	cmp	r7, #16
    e508:	d114      	bne.n	e534 <_strtol_l.isra.0+0x60>
    e50a:	2c30      	cmp	r4, #48	; 0x30
    e50c:	d00a      	beq.n	e524 <_strtol_l.isra.0+0x50>
    e50e:	e011      	b.n	e534 <_strtol_l.isra.0+0x60>
    e510:	002e      	movs	r6, r5
    e512:	e7e6      	b.n	e4e2 <_strtol_l.isra.0+0xe>
    e514:	9301      	str	r3, [sp, #4]
    e516:	2c2b      	cmp	r4, #43	; 0x2b
    e518:	d1f3      	bne.n	e502 <_strtol_l.isra.0+0x2e>
    e51a:	782c      	ldrb	r4, [r5, #0]
    e51c:	1cb5      	adds	r5, r6, #2
    e51e:	e7f0      	b.n	e502 <_strtol_l.isra.0+0x2e>
    e520:	2c30      	cmp	r4, #48	; 0x30
    e522:	d12f      	bne.n	e584 <_strtol_l.isra.0+0xb0>
    e524:	2220      	movs	r2, #32
    e526:	782b      	ldrb	r3, [r5, #0]
    e528:	4393      	bics	r3, r2
    e52a:	2b58      	cmp	r3, #88	; 0x58
    e52c:	d151      	bne.n	e5d2 <_strtol_l.isra.0+0xfe>
    e52e:	2710      	movs	r7, #16
    e530:	786c      	ldrb	r4, [r5, #1]
    e532:	3502      	adds	r5, #2
    e534:	9b01      	ldr	r3, [sp, #4]
    e536:	4a29      	ldr	r2, [pc, #164]	; (e5dc <_strtol_l.isra.0+0x108>)
    e538:	0039      	movs	r1, r7
    e53a:	189e      	adds	r6, r3, r2
    e53c:	0030      	movs	r0, r6
    e53e:	f7fd ffe7 	bl	c510 <__aeabi_uidivmod>
    e542:	0030      	movs	r0, r6
    e544:	9104      	str	r1, [sp, #16]
    e546:	0039      	movs	r1, r7
    e548:	f7fd ff5c 	bl	c404 <__udivsi3>
    e54c:	2101      	movs	r1, #1
    e54e:	2300      	movs	r3, #0
    e550:	4249      	negs	r1, r1
    e552:	0002      	movs	r2, r0
    e554:	468c      	mov	ip, r1
    e556:	0018      	movs	r0, r3
    e558:	0021      	movs	r1, r4
    e55a:	3930      	subs	r1, #48	; 0x30
    e55c:	2909      	cmp	r1, #9
    e55e:	d813      	bhi.n	e588 <_strtol_l.isra.0+0xb4>
    e560:	000c      	movs	r4, r1
    e562:	42a7      	cmp	r7, r4
    e564:	dd1c      	ble.n	e5a0 <_strtol_l.isra.0+0xcc>
    e566:	1c59      	adds	r1, r3, #1
    e568:	d009      	beq.n	e57e <_strtol_l.isra.0+0xaa>
    e56a:	4663      	mov	r3, ip
    e56c:	4282      	cmp	r2, r0
    e56e:	d306      	bcc.n	e57e <_strtol_l.isra.0+0xaa>
    e570:	d102      	bne.n	e578 <_strtol_l.isra.0+0xa4>
    e572:	9904      	ldr	r1, [sp, #16]
    e574:	42a1      	cmp	r1, r4
    e576:	db02      	blt.n	e57e <_strtol_l.isra.0+0xaa>
    e578:	2301      	movs	r3, #1
    e57a:	4378      	muls	r0, r7
    e57c:	1820      	adds	r0, r4, r0
    e57e:	782c      	ldrb	r4, [r5, #0]
    e580:	3501      	adds	r5, #1
    e582:	e7e9      	b.n	e558 <_strtol_l.isra.0+0x84>
    e584:	270a      	movs	r7, #10
    e586:	e7d5      	b.n	e534 <_strtol_l.isra.0+0x60>
    e588:	0021      	movs	r1, r4
    e58a:	3941      	subs	r1, #65	; 0x41
    e58c:	2919      	cmp	r1, #25
    e58e:	d801      	bhi.n	e594 <_strtol_l.isra.0+0xc0>
    e590:	3c37      	subs	r4, #55	; 0x37
    e592:	e7e6      	b.n	e562 <_strtol_l.isra.0+0x8e>
    e594:	0021      	movs	r1, r4
    e596:	3961      	subs	r1, #97	; 0x61
    e598:	2919      	cmp	r1, #25
    e59a:	d801      	bhi.n	e5a0 <_strtol_l.isra.0+0xcc>
    e59c:	3c57      	subs	r4, #87	; 0x57
    e59e:	e7e0      	b.n	e562 <_strtol_l.isra.0+0x8e>
    e5a0:	1c5a      	adds	r2, r3, #1
    e5a2:	d108      	bne.n	e5b6 <_strtol_l.isra.0+0xe2>
    e5a4:	9a05      	ldr	r2, [sp, #20]
    e5a6:	3323      	adds	r3, #35	; 0x23
    e5a8:	6013      	str	r3, [r2, #0]
    e5aa:	9b02      	ldr	r3, [sp, #8]
    e5ac:	0030      	movs	r0, r6
    e5ae:	2b00      	cmp	r3, #0
    e5b0:	d10b      	bne.n	e5ca <_strtol_l.isra.0+0xf6>
    e5b2:	b007      	add	sp, #28
    e5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5b6:	9a01      	ldr	r2, [sp, #4]
    e5b8:	2a00      	cmp	r2, #0
    e5ba:	d000      	beq.n	e5be <_strtol_l.isra.0+0xea>
    e5bc:	4240      	negs	r0, r0
    e5be:	9a02      	ldr	r2, [sp, #8]
    e5c0:	2a00      	cmp	r2, #0
    e5c2:	d0f6      	beq.n	e5b2 <_strtol_l.isra.0+0xde>
    e5c4:	9a03      	ldr	r2, [sp, #12]
    e5c6:	2b00      	cmp	r3, #0
    e5c8:	d000      	beq.n	e5cc <_strtol_l.isra.0+0xf8>
    e5ca:	1e6a      	subs	r2, r5, #1
    e5cc:	9b02      	ldr	r3, [sp, #8]
    e5ce:	601a      	str	r2, [r3, #0]
    e5d0:	e7ef      	b.n	e5b2 <_strtol_l.isra.0+0xde>
    e5d2:	2430      	movs	r4, #48	; 0x30
    e5d4:	2f00      	cmp	r7, #0
    e5d6:	d1ad      	bne.n	e534 <_strtol_l.isra.0+0x60>
    e5d8:	3708      	adds	r7, #8
    e5da:	e7ab      	b.n	e534 <_strtol_l.isra.0+0x60>
    e5dc:	7fffffff 	.word	0x7fffffff

0000e5e0 <strtol>:
    e5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e5e2:	0013      	movs	r3, r2
    e5e4:	4a06      	ldr	r2, [pc, #24]	; (e600 <strtol+0x20>)
    e5e6:	0005      	movs	r5, r0
    e5e8:	6810      	ldr	r0, [r2, #0]
    e5ea:	6a04      	ldr	r4, [r0, #32]
    e5ec:	2c00      	cmp	r4, #0
    e5ee:	d100      	bne.n	e5f2 <strtol+0x12>
    e5f0:	4c04      	ldr	r4, [pc, #16]	; (e604 <strtol+0x24>)
    e5f2:	000a      	movs	r2, r1
    e5f4:	9400      	str	r4, [sp, #0]
    e5f6:	0029      	movs	r1, r5
    e5f8:	f7ff ff6c 	bl	e4d4 <_strtol_l.isra.0>
    e5fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e5fe:	46c0      	nop			; (mov r8, r8)
    e600:	20000030 	.word	0x20000030
    e604:	20000094 	.word	0x20000094

0000e608 <_vsniprintf_r>:
    e608:	b530      	push	{r4, r5, lr}
    e60a:	0014      	movs	r4, r2
    e60c:	b09b      	sub	sp, #108	; 0x6c
    e60e:	0005      	movs	r5, r0
    e610:	001a      	movs	r2, r3
    e612:	2c00      	cmp	r4, #0
    e614:	da05      	bge.n	e622 <_vsniprintf_r+0x1a>
    e616:	238b      	movs	r3, #139	; 0x8b
    e618:	6003      	str	r3, [r0, #0]
    e61a:	2001      	movs	r0, #1
    e61c:	4240      	negs	r0, r0
    e61e:	b01b      	add	sp, #108	; 0x6c
    e620:	bd30      	pop	{r4, r5, pc}
    e622:	2382      	movs	r3, #130	; 0x82
    e624:	4668      	mov	r0, sp
    e626:	009b      	lsls	r3, r3, #2
    e628:	8183      	strh	r3, [r0, #12]
    e62a:	2300      	movs	r3, #0
    e62c:	9100      	str	r1, [sp, #0]
    e62e:	9104      	str	r1, [sp, #16]
    e630:	429c      	cmp	r4, r3
    e632:	d000      	beq.n	e636 <_vsniprintf_r+0x2e>
    e634:	1e63      	subs	r3, r4, #1
    e636:	9302      	str	r3, [sp, #8]
    e638:	9305      	str	r3, [sp, #20]
    e63a:	2301      	movs	r3, #1
    e63c:	4669      	mov	r1, sp
    e63e:	425b      	negs	r3, r3
    e640:	81cb      	strh	r3, [r1, #14]
    e642:	0028      	movs	r0, r5
    e644:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e646:	f000 f887 	bl	e758 <_svfiprintf_r>
    e64a:	1c43      	adds	r3, r0, #1
    e64c:	da01      	bge.n	e652 <_vsniprintf_r+0x4a>
    e64e:	238b      	movs	r3, #139	; 0x8b
    e650:	602b      	str	r3, [r5, #0]
    e652:	2c00      	cmp	r4, #0
    e654:	d0e3      	beq.n	e61e <_vsniprintf_r+0x16>
    e656:	2300      	movs	r3, #0
    e658:	9a00      	ldr	r2, [sp, #0]
    e65a:	7013      	strb	r3, [r2, #0]
    e65c:	e7df      	b.n	e61e <_vsniprintf_r+0x16>
	...

0000e660 <vsniprintf>:
    e660:	b507      	push	{r0, r1, r2, lr}
    e662:	9300      	str	r3, [sp, #0]
    e664:	0013      	movs	r3, r2
    e666:	000a      	movs	r2, r1
    e668:	0001      	movs	r1, r0
    e66a:	4802      	ldr	r0, [pc, #8]	; (e674 <vsniprintf+0x14>)
    e66c:	6800      	ldr	r0, [r0, #0]
    e66e:	f7ff ffcb 	bl	e608 <_vsniprintf_r>
    e672:	bd0e      	pop	{r1, r2, r3, pc}
    e674:	20000030 	.word	0x20000030

0000e678 <__ascii_wctomb>:
    e678:	1e0b      	subs	r3, r1, #0
    e67a:	d004      	beq.n	e686 <__ascii_wctomb+0xe>
    e67c:	2aff      	cmp	r2, #255	; 0xff
    e67e:	d904      	bls.n	e68a <__ascii_wctomb+0x12>
    e680:	238a      	movs	r3, #138	; 0x8a
    e682:	6003      	str	r3, [r0, #0]
    e684:	3b8b      	subs	r3, #139	; 0x8b
    e686:	0018      	movs	r0, r3
    e688:	4770      	bx	lr
    e68a:	700a      	strb	r2, [r1, #0]
    e68c:	2301      	movs	r3, #1
    e68e:	e7fa      	b.n	e686 <__ascii_wctomb+0xe>

0000e690 <__malloc_lock>:
    e690:	4770      	bx	lr

0000e692 <__malloc_unlock>:
    e692:	4770      	bx	lr

0000e694 <__ssputs_r>:
    e694:	b5f0      	push	{r4, r5, r6, r7, lr}
    e696:	688e      	ldr	r6, [r1, #8]
    e698:	b085      	sub	sp, #20
    e69a:	0007      	movs	r7, r0
    e69c:	000c      	movs	r4, r1
    e69e:	9203      	str	r2, [sp, #12]
    e6a0:	9301      	str	r3, [sp, #4]
    e6a2:	429e      	cmp	r6, r3
    e6a4:	d839      	bhi.n	e71a <__ssputs_r+0x86>
    e6a6:	2390      	movs	r3, #144	; 0x90
    e6a8:	898a      	ldrh	r2, [r1, #12]
    e6aa:	00db      	lsls	r3, r3, #3
    e6ac:	421a      	tst	r2, r3
    e6ae:	d034      	beq.n	e71a <__ssputs_r+0x86>
    e6b0:	2503      	movs	r5, #3
    e6b2:	6909      	ldr	r1, [r1, #16]
    e6b4:	6823      	ldr	r3, [r4, #0]
    e6b6:	1a5b      	subs	r3, r3, r1
    e6b8:	9302      	str	r3, [sp, #8]
    e6ba:	6963      	ldr	r3, [r4, #20]
    e6bc:	9802      	ldr	r0, [sp, #8]
    e6be:	435d      	muls	r5, r3
    e6c0:	0feb      	lsrs	r3, r5, #31
    e6c2:	195d      	adds	r5, r3, r5
    e6c4:	9b01      	ldr	r3, [sp, #4]
    e6c6:	106d      	asrs	r5, r5, #1
    e6c8:	3301      	adds	r3, #1
    e6ca:	181b      	adds	r3, r3, r0
    e6cc:	42ab      	cmp	r3, r5
    e6ce:	d900      	bls.n	e6d2 <__ssputs_r+0x3e>
    e6d0:	001d      	movs	r5, r3
    e6d2:	0553      	lsls	r3, r2, #21
    e6d4:	d532      	bpl.n	e73c <__ssputs_r+0xa8>
    e6d6:	0029      	movs	r1, r5
    e6d8:	0038      	movs	r0, r7
    e6da:	f7ff fdeb 	bl	e2b4 <_malloc_r>
    e6de:	1e06      	subs	r6, r0, #0
    e6e0:	d109      	bne.n	e6f6 <__ssputs_r+0x62>
    e6e2:	230c      	movs	r3, #12
    e6e4:	603b      	str	r3, [r7, #0]
    e6e6:	2340      	movs	r3, #64	; 0x40
    e6e8:	2001      	movs	r0, #1
    e6ea:	89a2      	ldrh	r2, [r4, #12]
    e6ec:	4240      	negs	r0, r0
    e6ee:	4313      	orrs	r3, r2
    e6f0:	81a3      	strh	r3, [r4, #12]
    e6f2:	b005      	add	sp, #20
    e6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6f6:	9a02      	ldr	r2, [sp, #8]
    e6f8:	6921      	ldr	r1, [r4, #16]
    e6fa:	f7ff fd7f 	bl	e1fc <memcpy>
    e6fe:	89a3      	ldrh	r3, [r4, #12]
    e700:	4a14      	ldr	r2, [pc, #80]	; (e754 <__ssputs_r+0xc0>)
    e702:	401a      	ands	r2, r3
    e704:	2380      	movs	r3, #128	; 0x80
    e706:	4313      	orrs	r3, r2
    e708:	81a3      	strh	r3, [r4, #12]
    e70a:	9b02      	ldr	r3, [sp, #8]
    e70c:	6126      	str	r6, [r4, #16]
    e70e:	18f6      	adds	r6, r6, r3
    e710:	6026      	str	r6, [r4, #0]
    e712:	6165      	str	r5, [r4, #20]
    e714:	9e01      	ldr	r6, [sp, #4]
    e716:	1aed      	subs	r5, r5, r3
    e718:	60a5      	str	r5, [r4, #8]
    e71a:	9b01      	ldr	r3, [sp, #4]
    e71c:	42b3      	cmp	r3, r6
    e71e:	d200      	bcs.n	e722 <__ssputs_r+0x8e>
    e720:	001e      	movs	r6, r3
    e722:	0032      	movs	r2, r6
    e724:	9903      	ldr	r1, [sp, #12]
    e726:	6820      	ldr	r0, [r4, #0]
    e728:	f000 faad 	bl	ec86 <memmove>
    e72c:	68a3      	ldr	r3, [r4, #8]
    e72e:	2000      	movs	r0, #0
    e730:	1b9b      	subs	r3, r3, r6
    e732:	60a3      	str	r3, [r4, #8]
    e734:	6823      	ldr	r3, [r4, #0]
    e736:	199e      	adds	r6, r3, r6
    e738:	6026      	str	r6, [r4, #0]
    e73a:	e7da      	b.n	e6f2 <__ssputs_r+0x5e>
    e73c:	002a      	movs	r2, r5
    e73e:	0038      	movs	r0, r7
    e740:	f000 fab3 	bl	ecaa <_realloc_r>
    e744:	1e06      	subs	r6, r0, #0
    e746:	d1e0      	bne.n	e70a <__ssputs_r+0x76>
    e748:	6921      	ldr	r1, [r4, #16]
    e74a:	0038      	movs	r0, r7
    e74c:	f7ff fd68 	bl	e220 <_free_r>
    e750:	e7c7      	b.n	e6e2 <__ssputs_r+0x4e>
    e752:	46c0      	nop			; (mov r8, r8)
    e754:	fffffb7f 	.word	0xfffffb7f

0000e758 <_svfiprintf_r>:
    e758:	b5f0      	push	{r4, r5, r6, r7, lr}
    e75a:	b09f      	sub	sp, #124	; 0x7c
    e75c:	9002      	str	r0, [sp, #8]
    e75e:	9305      	str	r3, [sp, #20]
    e760:	898b      	ldrh	r3, [r1, #12]
    e762:	000f      	movs	r7, r1
    e764:	0016      	movs	r6, r2
    e766:	061b      	lsls	r3, r3, #24
    e768:	d511      	bpl.n	e78e <_svfiprintf_r+0x36>
    e76a:	690b      	ldr	r3, [r1, #16]
    e76c:	2b00      	cmp	r3, #0
    e76e:	d10e      	bne.n	e78e <_svfiprintf_r+0x36>
    e770:	2140      	movs	r1, #64	; 0x40
    e772:	f7ff fd9f 	bl	e2b4 <_malloc_r>
    e776:	6038      	str	r0, [r7, #0]
    e778:	6138      	str	r0, [r7, #16]
    e77a:	2800      	cmp	r0, #0
    e77c:	d105      	bne.n	e78a <_svfiprintf_r+0x32>
    e77e:	230c      	movs	r3, #12
    e780:	9a02      	ldr	r2, [sp, #8]
    e782:	3801      	subs	r0, #1
    e784:	6013      	str	r3, [r2, #0]
    e786:	b01f      	add	sp, #124	; 0x7c
    e788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e78a:	2340      	movs	r3, #64	; 0x40
    e78c:	617b      	str	r3, [r7, #20]
    e78e:	2300      	movs	r3, #0
    e790:	ad06      	add	r5, sp, #24
    e792:	616b      	str	r3, [r5, #20]
    e794:	3320      	adds	r3, #32
    e796:	766b      	strb	r3, [r5, #25]
    e798:	3310      	adds	r3, #16
    e79a:	76ab      	strb	r3, [r5, #26]
    e79c:	0034      	movs	r4, r6
    e79e:	7823      	ldrb	r3, [r4, #0]
    e7a0:	2b00      	cmp	r3, #0
    e7a2:	d147      	bne.n	e834 <_svfiprintf_r+0xdc>
    e7a4:	1ba3      	subs	r3, r4, r6
    e7a6:	9304      	str	r3, [sp, #16]
    e7a8:	d00d      	beq.n	e7c6 <_svfiprintf_r+0x6e>
    e7aa:	1ba3      	subs	r3, r4, r6
    e7ac:	0032      	movs	r2, r6
    e7ae:	0039      	movs	r1, r7
    e7b0:	9802      	ldr	r0, [sp, #8]
    e7b2:	f7ff ff6f 	bl	e694 <__ssputs_r>
    e7b6:	1c43      	adds	r3, r0, #1
    e7b8:	d100      	bne.n	e7bc <_svfiprintf_r+0x64>
    e7ba:	e0b5      	b.n	e928 <_svfiprintf_r+0x1d0>
    e7bc:	696a      	ldr	r2, [r5, #20]
    e7be:	9b04      	ldr	r3, [sp, #16]
    e7c0:	4694      	mov	ip, r2
    e7c2:	4463      	add	r3, ip
    e7c4:	616b      	str	r3, [r5, #20]
    e7c6:	7823      	ldrb	r3, [r4, #0]
    e7c8:	2b00      	cmp	r3, #0
    e7ca:	d100      	bne.n	e7ce <_svfiprintf_r+0x76>
    e7cc:	e0ac      	b.n	e928 <_svfiprintf_r+0x1d0>
    e7ce:	2201      	movs	r2, #1
    e7d0:	2300      	movs	r3, #0
    e7d2:	4252      	negs	r2, r2
    e7d4:	606a      	str	r2, [r5, #4]
    e7d6:	a902      	add	r1, sp, #8
    e7d8:	3254      	adds	r2, #84	; 0x54
    e7da:	1852      	adds	r2, r2, r1
    e7dc:	3401      	adds	r4, #1
    e7de:	602b      	str	r3, [r5, #0]
    e7e0:	60eb      	str	r3, [r5, #12]
    e7e2:	60ab      	str	r3, [r5, #8]
    e7e4:	7013      	strb	r3, [r2, #0]
    e7e6:	65ab      	str	r3, [r5, #88]	; 0x58
    e7e8:	4e58      	ldr	r6, [pc, #352]	; (e94c <_svfiprintf_r+0x1f4>)
    e7ea:	2205      	movs	r2, #5
    e7ec:	7821      	ldrb	r1, [r4, #0]
    e7ee:	0030      	movs	r0, r6
    e7f0:	f000 fa3e 	bl	ec70 <memchr>
    e7f4:	1c62      	adds	r2, r4, #1
    e7f6:	2800      	cmp	r0, #0
    e7f8:	d120      	bne.n	e83c <_svfiprintf_r+0xe4>
    e7fa:	6829      	ldr	r1, [r5, #0]
    e7fc:	06cb      	lsls	r3, r1, #27
    e7fe:	d504      	bpl.n	e80a <_svfiprintf_r+0xb2>
    e800:	2353      	movs	r3, #83	; 0x53
    e802:	ae02      	add	r6, sp, #8
    e804:	3020      	adds	r0, #32
    e806:	199b      	adds	r3, r3, r6
    e808:	7018      	strb	r0, [r3, #0]
    e80a:	070b      	lsls	r3, r1, #28
    e80c:	d504      	bpl.n	e818 <_svfiprintf_r+0xc0>
    e80e:	2353      	movs	r3, #83	; 0x53
    e810:	202b      	movs	r0, #43	; 0x2b
    e812:	ae02      	add	r6, sp, #8
    e814:	199b      	adds	r3, r3, r6
    e816:	7018      	strb	r0, [r3, #0]
    e818:	7823      	ldrb	r3, [r4, #0]
    e81a:	2b2a      	cmp	r3, #42	; 0x2a
    e81c:	d016      	beq.n	e84c <_svfiprintf_r+0xf4>
    e81e:	2000      	movs	r0, #0
    e820:	210a      	movs	r1, #10
    e822:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e824:	7822      	ldrb	r2, [r4, #0]
    e826:	3a30      	subs	r2, #48	; 0x30
    e828:	2a09      	cmp	r2, #9
    e82a:	d955      	bls.n	e8d8 <_svfiprintf_r+0x180>
    e82c:	2800      	cmp	r0, #0
    e82e:	d015      	beq.n	e85c <_svfiprintf_r+0x104>
    e830:	9309      	str	r3, [sp, #36]	; 0x24
    e832:	e013      	b.n	e85c <_svfiprintf_r+0x104>
    e834:	2b25      	cmp	r3, #37	; 0x25
    e836:	d0b5      	beq.n	e7a4 <_svfiprintf_r+0x4c>
    e838:	3401      	adds	r4, #1
    e83a:	e7b0      	b.n	e79e <_svfiprintf_r+0x46>
    e83c:	2301      	movs	r3, #1
    e83e:	1b80      	subs	r0, r0, r6
    e840:	4083      	lsls	r3, r0
    e842:	6829      	ldr	r1, [r5, #0]
    e844:	0014      	movs	r4, r2
    e846:	430b      	orrs	r3, r1
    e848:	602b      	str	r3, [r5, #0]
    e84a:	e7cd      	b.n	e7e8 <_svfiprintf_r+0x90>
    e84c:	9b05      	ldr	r3, [sp, #20]
    e84e:	1d18      	adds	r0, r3, #4
    e850:	681b      	ldr	r3, [r3, #0]
    e852:	9005      	str	r0, [sp, #20]
    e854:	2b00      	cmp	r3, #0
    e856:	db39      	blt.n	e8cc <_svfiprintf_r+0x174>
    e858:	9309      	str	r3, [sp, #36]	; 0x24
    e85a:	0014      	movs	r4, r2
    e85c:	7823      	ldrb	r3, [r4, #0]
    e85e:	2b2e      	cmp	r3, #46	; 0x2e
    e860:	d10b      	bne.n	e87a <_svfiprintf_r+0x122>
    e862:	7863      	ldrb	r3, [r4, #1]
    e864:	1c62      	adds	r2, r4, #1
    e866:	2b2a      	cmp	r3, #42	; 0x2a
    e868:	d13e      	bne.n	e8e8 <_svfiprintf_r+0x190>
    e86a:	9b05      	ldr	r3, [sp, #20]
    e86c:	3402      	adds	r4, #2
    e86e:	1d1a      	adds	r2, r3, #4
    e870:	681b      	ldr	r3, [r3, #0]
    e872:	9205      	str	r2, [sp, #20]
    e874:	2b00      	cmp	r3, #0
    e876:	db34      	blt.n	e8e2 <_svfiprintf_r+0x18a>
    e878:	9307      	str	r3, [sp, #28]
    e87a:	4e35      	ldr	r6, [pc, #212]	; (e950 <_svfiprintf_r+0x1f8>)
    e87c:	7821      	ldrb	r1, [r4, #0]
    e87e:	2203      	movs	r2, #3
    e880:	0030      	movs	r0, r6
    e882:	f000 f9f5 	bl	ec70 <memchr>
    e886:	2800      	cmp	r0, #0
    e888:	d006      	beq.n	e898 <_svfiprintf_r+0x140>
    e88a:	2340      	movs	r3, #64	; 0x40
    e88c:	1b80      	subs	r0, r0, r6
    e88e:	4083      	lsls	r3, r0
    e890:	682a      	ldr	r2, [r5, #0]
    e892:	3401      	adds	r4, #1
    e894:	4313      	orrs	r3, r2
    e896:	602b      	str	r3, [r5, #0]
    e898:	7821      	ldrb	r1, [r4, #0]
    e89a:	2206      	movs	r2, #6
    e89c:	482d      	ldr	r0, [pc, #180]	; (e954 <_svfiprintf_r+0x1fc>)
    e89e:	1c66      	adds	r6, r4, #1
    e8a0:	7629      	strb	r1, [r5, #24]
    e8a2:	f000 f9e5 	bl	ec70 <memchr>
    e8a6:	2800      	cmp	r0, #0
    e8a8:	d046      	beq.n	e938 <_svfiprintf_r+0x1e0>
    e8aa:	4b2b      	ldr	r3, [pc, #172]	; (e958 <_svfiprintf_r+0x200>)
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	d12f      	bne.n	e910 <_svfiprintf_r+0x1b8>
    e8b0:	6829      	ldr	r1, [r5, #0]
    e8b2:	9b05      	ldr	r3, [sp, #20]
    e8b4:	2207      	movs	r2, #7
    e8b6:	05c9      	lsls	r1, r1, #23
    e8b8:	d528      	bpl.n	e90c <_svfiprintf_r+0x1b4>
    e8ba:	189b      	adds	r3, r3, r2
    e8bc:	4393      	bics	r3, r2
    e8be:	3308      	adds	r3, #8
    e8c0:	9305      	str	r3, [sp, #20]
    e8c2:	696b      	ldr	r3, [r5, #20]
    e8c4:	9a03      	ldr	r2, [sp, #12]
    e8c6:	189b      	adds	r3, r3, r2
    e8c8:	616b      	str	r3, [r5, #20]
    e8ca:	e767      	b.n	e79c <_svfiprintf_r+0x44>
    e8cc:	425b      	negs	r3, r3
    e8ce:	60eb      	str	r3, [r5, #12]
    e8d0:	2302      	movs	r3, #2
    e8d2:	430b      	orrs	r3, r1
    e8d4:	602b      	str	r3, [r5, #0]
    e8d6:	e7c0      	b.n	e85a <_svfiprintf_r+0x102>
    e8d8:	434b      	muls	r3, r1
    e8da:	3401      	adds	r4, #1
    e8dc:	189b      	adds	r3, r3, r2
    e8de:	2001      	movs	r0, #1
    e8e0:	e7a0      	b.n	e824 <_svfiprintf_r+0xcc>
    e8e2:	2301      	movs	r3, #1
    e8e4:	425b      	negs	r3, r3
    e8e6:	e7c7      	b.n	e878 <_svfiprintf_r+0x120>
    e8e8:	2300      	movs	r3, #0
    e8ea:	0014      	movs	r4, r2
    e8ec:	200a      	movs	r0, #10
    e8ee:	001a      	movs	r2, r3
    e8f0:	606b      	str	r3, [r5, #4]
    e8f2:	7821      	ldrb	r1, [r4, #0]
    e8f4:	3930      	subs	r1, #48	; 0x30
    e8f6:	2909      	cmp	r1, #9
    e8f8:	d903      	bls.n	e902 <_svfiprintf_r+0x1aa>
    e8fa:	2b00      	cmp	r3, #0
    e8fc:	d0bd      	beq.n	e87a <_svfiprintf_r+0x122>
    e8fe:	9207      	str	r2, [sp, #28]
    e900:	e7bb      	b.n	e87a <_svfiprintf_r+0x122>
    e902:	4342      	muls	r2, r0
    e904:	3401      	adds	r4, #1
    e906:	1852      	adds	r2, r2, r1
    e908:	2301      	movs	r3, #1
    e90a:	e7f2      	b.n	e8f2 <_svfiprintf_r+0x19a>
    e90c:	3307      	adds	r3, #7
    e90e:	e7d5      	b.n	e8bc <_svfiprintf_r+0x164>
    e910:	ab05      	add	r3, sp, #20
    e912:	9300      	str	r3, [sp, #0]
    e914:	003a      	movs	r2, r7
    e916:	4b11      	ldr	r3, [pc, #68]	; (e95c <_svfiprintf_r+0x204>)
    e918:	0029      	movs	r1, r5
    e91a:	9802      	ldr	r0, [sp, #8]
    e91c:	e000      	b.n	e920 <_svfiprintf_r+0x1c8>
    e91e:	bf00      	nop
    e920:	9003      	str	r0, [sp, #12]
    e922:	9b03      	ldr	r3, [sp, #12]
    e924:	3301      	adds	r3, #1
    e926:	d1cc      	bne.n	e8c2 <_svfiprintf_r+0x16a>
    e928:	89bb      	ldrh	r3, [r7, #12]
    e92a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e92c:	065b      	lsls	r3, r3, #25
    e92e:	d400      	bmi.n	e932 <_svfiprintf_r+0x1da>
    e930:	e729      	b.n	e786 <_svfiprintf_r+0x2e>
    e932:	2001      	movs	r0, #1
    e934:	4240      	negs	r0, r0
    e936:	e726      	b.n	e786 <_svfiprintf_r+0x2e>
    e938:	ab05      	add	r3, sp, #20
    e93a:	9300      	str	r3, [sp, #0]
    e93c:	003a      	movs	r2, r7
    e93e:	4b07      	ldr	r3, [pc, #28]	; (e95c <_svfiprintf_r+0x204>)
    e940:	0029      	movs	r1, r5
    e942:	9802      	ldr	r0, [sp, #8]
    e944:	f000 f87a 	bl	ea3c <_printf_i>
    e948:	e7ea      	b.n	e920 <_svfiprintf_r+0x1c8>
    e94a:	46c0      	nop			; (mov r8, r8)
    e94c:	00010bf8 	.word	0x00010bf8
    e950:	00010bfe 	.word	0x00010bfe
    e954:	00010c02 	.word	0x00010c02
    e958:	00000000 	.word	0x00000000
    e95c:	0000e695 	.word	0x0000e695

0000e960 <_printf_common>:
    e960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e962:	0015      	movs	r5, r2
    e964:	9301      	str	r3, [sp, #4]
    e966:	688a      	ldr	r2, [r1, #8]
    e968:	690b      	ldr	r3, [r1, #16]
    e96a:	9000      	str	r0, [sp, #0]
    e96c:	000c      	movs	r4, r1
    e96e:	4293      	cmp	r3, r2
    e970:	da00      	bge.n	e974 <_printf_common+0x14>
    e972:	0013      	movs	r3, r2
    e974:	0022      	movs	r2, r4
    e976:	602b      	str	r3, [r5, #0]
    e978:	3243      	adds	r2, #67	; 0x43
    e97a:	7812      	ldrb	r2, [r2, #0]
    e97c:	2a00      	cmp	r2, #0
    e97e:	d001      	beq.n	e984 <_printf_common+0x24>
    e980:	3301      	adds	r3, #1
    e982:	602b      	str	r3, [r5, #0]
    e984:	6823      	ldr	r3, [r4, #0]
    e986:	069b      	lsls	r3, r3, #26
    e988:	d502      	bpl.n	e990 <_printf_common+0x30>
    e98a:	682b      	ldr	r3, [r5, #0]
    e98c:	3302      	adds	r3, #2
    e98e:	602b      	str	r3, [r5, #0]
    e990:	2706      	movs	r7, #6
    e992:	6823      	ldr	r3, [r4, #0]
    e994:	401f      	ands	r7, r3
    e996:	d027      	beq.n	e9e8 <_printf_common+0x88>
    e998:	0023      	movs	r3, r4
    e99a:	3343      	adds	r3, #67	; 0x43
    e99c:	781b      	ldrb	r3, [r3, #0]
    e99e:	1e5a      	subs	r2, r3, #1
    e9a0:	4193      	sbcs	r3, r2
    e9a2:	6822      	ldr	r2, [r4, #0]
    e9a4:	0692      	lsls	r2, r2, #26
    e9a6:	d430      	bmi.n	ea0a <_printf_common+0xaa>
    e9a8:	0022      	movs	r2, r4
    e9aa:	9901      	ldr	r1, [sp, #4]
    e9ac:	3243      	adds	r2, #67	; 0x43
    e9ae:	9800      	ldr	r0, [sp, #0]
    e9b0:	9e08      	ldr	r6, [sp, #32]
    e9b2:	47b0      	blx	r6
    e9b4:	1c43      	adds	r3, r0, #1
    e9b6:	d025      	beq.n	ea04 <_printf_common+0xa4>
    e9b8:	2306      	movs	r3, #6
    e9ba:	6820      	ldr	r0, [r4, #0]
    e9bc:	682a      	ldr	r2, [r5, #0]
    e9be:	68e1      	ldr	r1, [r4, #12]
    e9c0:	4003      	ands	r3, r0
    e9c2:	2500      	movs	r5, #0
    e9c4:	2b04      	cmp	r3, #4
    e9c6:	d103      	bne.n	e9d0 <_printf_common+0x70>
    e9c8:	1a8d      	subs	r5, r1, r2
    e9ca:	43eb      	mvns	r3, r5
    e9cc:	17db      	asrs	r3, r3, #31
    e9ce:	401d      	ands	r5, r3
    e9d0:	68a3      	ldr	r3, [r4, #8]
    e9d2:	6922      	ldr	r2, [r4, #16]
    e9d4:	4293      	cmp	r3, r2
    e9d6:	dd01      	ble.n	e9dc <_printf_common+0x7c>
    e9d8:	1a9b      	subs	r3, r3, r2
    e9da:	18ed      	adds	r5, r5, r3
    e9dc:	2700      	movs	r7, #0
    e9de:	42bd      	cmp	r5, r7
    e9e0:	d120      	bne.n	ea24 <_printf_common+0xc4>
    e9e2:	2000      	movs	r0, #0
    e9e4:	e010      	b.n	ea08 <_printf_common+0xa8>
    e9e6:	3701      	adds	r7, #1
    e9e8:	68e3      	ldr	r3, [r4, #12]
    e9ea:	682a      	ldr	r2, [r5, #0]
    e9ec:	1a9b      	subs	r3, r3, r2
    e9ee:	429f      	cmp	r7, r3
    e9f0:	dad2      	bge.n	e998 <_printf_common+0x38>
    e9f2:	0022      	movs	r2, r4
    e9f4:	2301      	movs	r3, #1
    e9f6:	3219      	adds	r2, #25
    e9f8:	9901      	ldr	r1, [sp, #4]
    e9fa:	9800      	ldr	r0, [sp, #0]
    e9fc:	9e08      	ldr	r6, [sp, #32]
    e9fe:	47b0      	blx	r6
    ea00:	1c43      	adds	r3, r0, #1
    ea02:	d1f0      	bne.n	e9e6 <_printf_common+0x86>
    ea04:	2001      	movs	r0, #1
    ea06:	4240      	negs	r0, r0
    ea08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ea0a:	2030      	movs	r0, #48	; 0x30
    ea0c:	18e1      	adds	r1, r4, r3
    ea0e:	3143      	adds	r1, #67	; 0x43
    ea10:	7008      	strb	r0, [r1, #0]
    ea12:	0021      	movs	r1, r4
    ea14:	1c5a      	adds	r2, r3, #1
    ea16:	3145      	adds	r1, #69	; 0x45
    ea18:	7809      	ldrb	r1, [r1, #0]
    ea1a:	18a2      	adds	r2, r4, r2
    ea1c:	3243      	adds	r2, #67	; 0x43
    ea1e:	3302      	adds	r3, #2
    ea20:	7011      	strb	r1, [r2, #0]
    ea22:	e7c1      	b.n	e9a8 <_printf_common+0x48>
    ea24:	0022      	movs	r2, r4
    ea26:	2301      	movs	r3, #1
    ea28:	321a      	adds	r2, #26
    ea2a:	9901      	ldr	r1, [sp, #4]
    ea2c:	9800      	ldr	r0, [sp, #0]
    ea2e:	9e08      	ldr	r6, [sp, #32]
    ea30:	47b0      	blx	r6
    ea32:	1c43      	adds	r3, r0, #1
    ea34:	d0e6      	beq.n	ea04 <_printf_common+0xa4>
    ea36:	3701      	adds	r7, #1
    ea38:	e7d1      	b.n	e9de <_printf_common+0x7e>
	...

0000ea3c <_printf_i>:
    ea3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea3e:	b08b      	sub	sp, #44	; 0x2c
    ea40:	9206      	str	r2, [sp, #24]
    ea42:	000a      	movs	r2, r1
    ea44:	3243      	adds	r2, #67	; 0x43
    ea46:	9307      	str	r3, [sp, #28]
    ea48:	9005      	str	r0, [sp, #20]
    ea4a:	9204      	str	r2, [sp, #16]
    ea4c:	7e0a      	ldrb	r2, [r1, #24]
    ea4e:	000c      	movs	r4, r1
    ea50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ea52:	2a6e      	cmp	r2, #110	; 0x6e
    ea54:	d100      	bne.n	ea58 <_printf_i+0x1c>
    ea56:	e08f      	b.n	eb78 <_printf_i+0x13c>
    ea58:	d817      	bhi.n	ea8a <_printf_i+0x4e>
    ea5a:	2a63      	cmp	r2, #99	; 0x63
    ea5c:	d02c      	beq.n	eab8 <_printf_i+0x7c>
    ea5e:	d808      	bhi.n	ea72 <_printf_i+0x36>
    ea60:	2a00      	cmp	r2, #0
    ea62:	d100      	bne.n	ea66 <_printf_i+0x2a>
    ea64:	e099      	b.n	eb9a <_printf_i+0x15e>
    ea66:	2a58      	cmp	r2, #88	; 0x58
    ea68:	d054      	beq.n	eb14 <_printf_i+0xd8>
    ea6a:	0026      	movs	r6, r4
    ea6c:	3642      	adds	r6, #66	; 0x42
    ea6e:	7032      	strb	r2, [r6, #0]
    ea70:	e029      	b.n	eac6 <_printf_i+0x8a>
    ea72:	2a64      	cmp	r2, #100	; 0x64
    ea74:	d001      	beq.n	ea7a <_printf_i+0x3e>
    ea76:	2a69      	cmp	r2, #105	; 0x69
    ea78:	d1f7      	bne.n	ea6a <_printf_i+0x2e>
    ea7a:	6821      	ldr	r1, [r4, #0]
    ea7c:	681a      	ldr	r2, [r3, #0]
    ea7e:	0608      	lsls	r0, r1, #24
    ea80:	d523      	bpl.n	eaca <_printf_i+0x8e>
    ea82:	1d11      	adds	r1, r2, #4
    ea84:	6019      	str	r1, [r3, #0]
    ea86:	6815      	ldr	r5, [r2, #0]
    ea88:	e025      	b.n	ead6 <_printf_i+0x9a>
    ea8a:	2a73      	cmp	r2, #115	; 0x73
    ea8c:	d100      	bne.n	ea90 <_printf_i+0x54>
    ea8e:	e088      	b.n	eba2 <_printf_i+0x166>
    ea90:	d808      	bhi.n	eaa4 <_printf_i+0x68>
    ea92:	2a6f      	cmp	r2, #111	; 0x6f
    ea94:	d029      	beq.n	eaea <_printf_i+0xae>
    ea96:	2a70      	cmp	r2, #112	; 0x70
    ea98:	d1e7      	bne.n	ea6a <_printf_i+0x2e>
    ea9a:	2220      	movs	r2, #32
    ea9c:	6809      	ldr	r1, [r1, #0]
    ea9e:	430a      	orrs	r2, r1
    eaa0:	6022      	str	r2, [r4, #0]
    eaa2:	e003      	b.n	eaac <_printf_i+0x70>
    eaa4:	2a75      	cmp	r2, #117	; 0x75
    eaa6:	d020      	beq.n	eaea <_printf_i+0xae>
    eaa8:	2a78      	cmp	r2, #120	; 0x78
    eaaa:	d1de      	bne.n	ea6a <_printf_i+0x2e>
    eaac:	0022      	movs	r2, r4
    eaae:	2178      	movs	r1, #120	; 0x78
    eab0:	3245      	adds	r2, #69	; 0x45
    eab2:	7011      	strb	r1, [r2, #0]
    eab4:	4a6c      	ldr	r2, [pc, #432]	; (ec68 <_printf_i+0x22c>)
    eab6:	e030      	b.n	eb1a <_printf_i+0xde>
    eab8:	000e      	movs	r6, r1
    eaba:	681a      	ldr	r2, [r3, #0]
    eabc:	3642      	adds	r6, #66	; 0x42
    eabe:	1d11      	adds	r1, r2, #4
    eac0:	6019      	str	r1, [r3, #0]
    eac2:	6813      	ldr	r3, [r2, #0]
    eac4:	7033      	strb	r3, [r6, #0]
    eac6:	2301      	movs	r3, #1
    eac8:	e079      	b.n	ebbe <_printf_i+0x182>
    eaca:	0649      	lsls	r1, r1, #25
    eacc:	d5d9      	bpl.n	ea82 <_printf_i+0x46>
    eace:	1d11      	adds	r1, r2, #4
    ead0:	6019      	str	r1, [r3, #0]
    ead2:	2300      	movs	r3, #0
    ead4:	5ed5      	ldrsh	r5, [r2, r3]
    ead6:	2d00      	cmp	r5, #0
    ead8:	da03      	bge.n	eae2 <_printf_i+0xa6>
    eada:	232d      	movs	r3, #45	; 0x2d
    eadc:	9a04      	ldr	r2, [sp, #16]
    eade:	426d      	negs	r5, r5
    eae0:	7013      	strb	r3, [r2, #0]
    eae2:	4b62      	ldr	r3, [pc, #392]	; (ec6c <_printf_i+0x230>)
    eae4:	270a      	movs	r7, #10
    eae6:	9303      	str	r3, [sp, #12]
    eae8:	e02f      	b.n	eb4a <_printf_i+0x10e>
    eaea:	6820      	ldr	r0, [r4, #0]
    eaec:	6819      	ldr	r1, [r3, #0]
    eaee:	0605      	lsls	r5, r0, #24
    eaf0:	d503      	bpl.n	eafa <_printf_i+0xbe>
    eaf2:	1d08      	adds	r0, r1, #4
    eaf4:	6018      	str	r0, [r3, #0]
    eaf6:	680d      	ldr	r5, [r1, #0]
    eaf8:	e005      	b.n	eb06 <_printf_i+0xca>
    eafa:	0640      	lsls	r0, r0, #25
    eafc:	d5f9      	bpl.n	eaf2 <_printf_i+0xb6>
    eafe:	680d      	ldr	r5, [r1, #0]
    eb00:	1d08      	adds	r0, r1, #4
    eb02:	6018      	str	r0, [r3, #0]
    eb04:	b2ad      	uxth	r5, r5
    eb06:	4b59      	ldr	r3, [pc, #356]	; (ec6c <_printf_i+0x230>)
    eb08:	2708      	movs	r7, #8
    eb0a:	9303      	str	r3, [sp, #12]
    eb0c:	2a6f      	cmp	r2, #111	; 0x6f
    eb0e:	d018      	beq.n	eb42 <_printf_i+0x106>
    eb10:	270a      	movs	r7, #10
    eb12:	e016      	b.n	eb42 <_printf_i+0x106>
    eb14:	3145      	adds	r1, #69	; 0x45
    eb16:	700a      	strb	r2, [r1, #0]
    eb18:	4a54      	ldr	r2, [pc, #336]	; (ec6c <_printf_i+0x230>)
    eb1a:	9203      	str	r2, [sp, #12]
    eb1c:	681a      	ldr	r2, [r3, #0]
    eb1e:	6821      	ldr	r1, [r4, #0]
    eb20:	1d10      	adds	r0, r2, #4
    eb22:	6018      	str	r0, [r3, #0]
    eb24:	6815      	ldr	r5, [r2, #0]
    eb26:	0608      	lsls	r0, r1, #24
    eb28:	d522      	bpl.n	eb70 <_printf_i+0x134>
    eb2a:	07cb      	lsls	r3, r1, #31
    eb2c:	d502      	bpl.n	eb34 <_printf_i+0xf8>
    eb2e:	2320      	movs	r3, #32
    eb30:	4319      	orrs	r1, r3
    eb32:	6021      	str	r1, [r4, #0]
    eb34:	2710      	movs	r7, #16
    eb36:	2d00      	cmp	r5, #0
    eb38:	d103      	bne.n	eb42 <_printf_i+0x106>
    eb3a:	2320      	movs	r3, #32
    eb3c:	6822      	ldr	r2, [r4, #0]
    eb3e:	439a      	bics	r2, r3
    eb40:	6022      	str	r2, [r4, #0]
    eb42:	0023      	movs	r3, r4
    eb44:	2200      	movs	r2, #0
    eb46:	3343      	adds	r3, #67	; 0x43
    eb48:	701a      	strb	r2, [r3, #0]
    eb4a:	6863      	ldr	r3, [r4, #4]
    eb4c:	60a3      	str	r3, [r4, #8]
    eb4e:	2b00      	cmp	r3, #0
    eb50:	db5c      	blt.n	ec0c <_printf_i+0x1d0>
    eb52:	2204      	movs	r2, #4
    eb54:	6821      	ldr	r1, [r4, #0]
    eb56:	4391      	bics	r1, r2
    eb58:	6021      	str	r1, [r4, #0]
    eb5a:	2d00      	cmp	r5, #0
    eb5c:	d158      	bne.n	ec10 <_printf_i+0x1d4>
    eb5e:	9e04      	ldr	r6, [sp, #16]
    eb60:	2b00      	cmp	r3, #0
    eb62:	d064      	beq.n	ec2e <_printf_i+0x1f2>
    eb64:	0026      	movs	r6, r4
    eb66:	9b03      	ldr	r3, [sp, #12]
    eb68:	3642      	adds	r6, #66	; 0x42
    eb6a:	781b      	ldrb	r3, [r3, #0]
    eb6c:	7033      	strb	r3, [r6, #0]
    eb6e:	e05e      	b.n	ec2e <_printf_i+0x1f2>
    eb70:	0648      	lsls	r0, r1, #25
    eb72:	d5da      	bpl.n	eb2a <_printf_i+0xee>
    eb74:	b2ad      	uxth	r5, r5
    eb76:	e7d8      	b.n	eb2a <_printf_i+0xee>
    eb78:	6809      	ldr	r1, [r1, #0]
    eb7a:	681a      	ldr	r2, [r3, #0]
    eb7c:	0608      	lsls	r0, r1, #24
    eb7e:	d505      	bpl.n	eb8c <_printf_i+0x150>
    eb80:	1d11      	adds	r1, r2, #4
    eb82:	6019      	str	r1, [r3, #0]
    eb84:	6813      	ldr	r3, [r2, #0]
    eb86:	6962      	ldr	r2, [r4, #20]
    eb88:	601a      	str	r2, [r3, #0]
    eb8a:	e006      	b.n	eb9a <_printf_i+0x15e>
    eb8c:	0649      	lsls	r1, r1, #25
    eb8e:	d5f7      	bpl.n	eb80 <_printf_i+0x144>
    eb90:	1d11      	adds	r1, r2, #4
    eb92:	6019      	str	r1, [r3, #0]
    eb94:	6813      	ldr	r3, [r2, #0]
    eb96:	8aa2      	ldrh	r2, [r4, #20]
    eb98:	801a      	strh	r2, [r3, #0]
    eb9a:	2300      	movs	r3, #0
    eb9c:	9e04      	ldr	r6, [sp, #16]
    eb9e:	6123      	str	r3, [r4, #16]
    eba0:	e054      	b.n	ec4c <_printf_i+0x210>
    eba2:	681a      	ldr	r2, [r3, #0]
    eba4:	1d11      	adds	r1, r2, #4
    eba6:	6019      	str	r1, [r3, #0]
    eba8:	6816      	ldr	r6, [r2, #0]
    ebaa:	2100      	movs	r1, #0
    ebac:	6862      	ldr	r2, [r4, #4]
    ebae:	0030      	movs	r0, r6
    ebb0:	f000 f85e 	bl	ec70 <memchr>
    ebb4:	2800      	cmp	r0, #0
    ebb6:	d001      	beq.n	ebbc <_printf_i+0x180>
    ebb8:	1b80      	subs	r0, r0, r6
    ebba:	6060      	str	r0, [r4, #4]
    ebbc:	6863      	ldr	r3, [r4, #4]
    ebbe:	6123      	str	r3, [r4, #16]
    ebc0:	2300      	movs	r3, #0
    ebc2:	9a04      	ldr	r2, [sp, #16]
    ebc4:	7013      	strb	r3, [r2, #0]
    ebc6:	e041      	b.n	ec4c <_printf_i+0x210>
    ebc8:	6923      	ldr	r3, [r4, #16]
    ebca:	0032      	movs	r2, r6
    ebcc:	9906      	ldr	r1, [sp, #24]
    ebce:	9805      	ldr	r0, [sp, #20]
    ebd0:	9d07      	ldr	r5, [sp, #28]
    ebd2:	47a8      	blx	r5
    ebd4:	1c43      	adds	r3, r0, #1
    ebd6:	d043      	beq.n	ec60 <_printf_i+0x224>
    ebd8:	6823      	ldr	r3, [r4, #0]
    ebda:	2500      	movs	r5, #0
    ebdc:	079b      	lsls	r3, r3, #30
    ebde:	d40f      	bmi.n	ec00 <_printf_i+0x1c4>
    ebe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ebe2:	68e0      	ldr	r0, [r4, #12]
    ebe4:	4298      	cmp	r0, r3
    ebe6:	da3d      	bge.n	ec64 <_printf_i+0x228>
    ebe8:	0018      	movs	r0, r3
    ebea:	e03b      	b.n	ec64 <_printf_i+0x228>
    ebec:	0022      	movs	r2, r4
    ebee:	2301      	movs	r3, #1
    ebf0:	3219      	adds	r2, #25
    ebf2:	9906      	ldr	r1, [sp, #24]
    ebf4:	9805      	ldr	r0, [sp, #20]
    ebf6:	9e07      	ldr	r6, [sp, #28]
    ebf8:	47b0      	blx	r6
    ebfa:	1c43      	adds	r3, r0, #1
    ebfc:	d030      	beq.n	ec60 <_printf_i+0x224>
    ebfe:	3501      	adds	r5, #1
    ec00:	68e3      	ldr	r3, [r4, #12]
    ec02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ec04:	1a9b      	subs	r3, r3, r2
    ec06:	429d      	cmp	r5, r3
    ec08:	dbf0      	blt.n	ebec <_printf_i+0x1b0>
    ec0a:	e7e9      	b.n	ebe0 <_printf_i+0x1a4>
    ec0c:	2d00      	cmp	r5, #0
    ec0e:	d0a9      	beq.n	eb64 <_printf_i+0x128>
    ec10:	9e04      	ldr	r6, [sp, #16]
    ec12:	0028      	movs	r0, r5
    ec14:	0039      	movs	r1, r7
    ec16:	f7fd fc7b 	bl	c510 <__aeabi_uidivmod>
    ec1a:	9b03      	ldr	r3, [sp, #12]
    ec1c:	3e01      	subs	r6, #1
    ec1e:	5c5b      	ldrb	r3, [r3, r1]
    ec20:	0028      	movs	r0, r5
    ec22:	7033      	strb	r3, [r6, #0]
    ec24:	0039      	movs	r1, r7
    ec26:	f7fd fbed 	bl	c404 <__udivsi3>
    ec2a:	1e05      	subs	r5, r0, #0
    ec2c:	d1f1      	bne.n	ec12 <_printf_i+0x1d6>
    ec2e:	2f08      	cmp	r7, #8
    ec30:	d109      	bne.n	ec46 <_printf_i+0x20a>
    ec32:	6823      	ldr	r3, [r4, #0]
    ec34:	07db      	lsls	r3, r3, #31
    ec36:	d506      	bpl.n	ec46 <_printf_i+0x20a>
    ec38:	6863      	ldr	r3, [r4, #4]
    ec3a:	6922      	ldr	r2, [r4, #16]
    ec3c:	4293      	cmp	r3, r2
    ec3e:	dc02      	bgt.n	ec46 <_printf_i+0x20a>
    ec40:	2330      	movs	r3, #48	; 0x30
    ec42:	3e01      	subs	r6, #1
    ec44:	7033      	strb	r3, [r6, #0]
    ec46:	9b04      	ldr	r3, [sp, #16]
    ec48:	1b9b      	subs	r3, r3, r6
    ec4a:	6123      	str	r3, [r4, #16]
    ec4c:	9b07      	ldr	r3, [sp, #28]
    ec4e:	aa09      	add	r2, sp, #36	; 0x24
    ec50:	9300      	str	r3, [sp, #0]
    ec52:	0021      	movs	r1, r4
    ec54:	9b06      	ldr	r3, [sp, #24]
    ec56:	9805      	ldr	r0, [sp, #20]
    ec58:	f7ff fe82 	bl	e960 <_printf_common>
    ec5c:	1c43      	adds	r3, r0, #1
    ec5e:	d1b3      	bne.n	ebc8 <_printf_i+0x18c>
    ec60:	2001      	movs	r0, #1
    ec62:	4240      	negs	r0, r0
    ec64:	b00b      	add	sp, #44	; 0x2c
    ec66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec68:	00010c1a 	.word	0x00010c1a
    ec6c:	00010c09 	.word	0x00010c09

0000ec70 <memchr>:
    ec70:	b2c9      	uxtb	r1, r1
    ec72:	1882      	adds	r2, r0, r2
    ec74:	4290      	cmp	r0, r2
    ec76:	d101      	bne.n	ec7c <memchr+0xc>
    ec78:	2000      	movs	r0, #0
    ec7a:	4770      	bx	lr
    ec7c:	7803      	ldrb	r3, [r0, #0]
    ec7e:	428b      	cmp	r3, r1
    ec80:	d0fb      	beq.n	ec7a <memchr+0xa>
    ec82:	3001      	adds	r0, #1
    ec84:	e7f6      	b.n	ec74 <memchr+0x4>

0000ec86 <memmove>:
    ec86:	b510      	push	{r4, lr}
    ec88:	4288      	cmp	r0, r1
    ec8a:	d902      	bls.n	ec92 <memmove+0xc>
    ec8c:	188b      	adds	r3, r1, r2
    ec8e:	4298      	cmp	r0, r3
    ec90:	d308      	bcc.n	eca4 <memmove+0x1e>
    ec92:	2300      	movs	r3, #0
    ec94:	429a      	cmp	r2, r3
    ec96:	d007      	beq.n	eca8 <memmove+0x22>
    ec98:	5ccc      	ldrb	r4, [r1, r3]
    ec9a:	54c4      	strb	r4, [r0, r3]
    ec9c:	3301      	adds	r3, #1
    ec9e:	e7f9      	b.n	ec94 <memmove+0xe>
    eca0:	5c8b      	ldrb	r3, [r1, r2]
    eca2:	5483      	strb	r3, [r0, r2]
    eca4:	3a01      	subs	r2, #1
    eca6:	d2fb      	bcs.n	eca0 <memmove+0x1a>
    eca8:	bd10      	pop	{r4, pc}

0000ecaa <_realloc_r>:
    ecaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecac:	0007      	movs	r7, r0
    ecae:	000d      	movs	r5, r1
    ecb0:	0016      	movs	r6, r2
    ecb2:	2900      	cmp	r1, #0
    ecb4:	d105      	bne.n	ecc2 <_realloc_r+0x18>
    ecb6:	0011      	movs	r1, r2
    ecb8:	f7ff fafc 	bl	e2b4 <_malloc_r>
    ecbc:	0004      	movs	r4, r0
    ecbe:	0020      	movs	r0, r4
    ecc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ecc2:	2a00      	cmp	r2, #0
    ecc4:	d103      	bne.n	ecce <_realloc_r+0x24>
    ecc6:	f7ff faab 	bl	e220 <_free_r>
    ecca:	0034      	movs	r4, r6
    eccc:	e7f7      	b.n	ecbe <_realloc_r+0x14>
    ecce:	f000 f812 	bl	ecf6 <_malloc_usable_size_r>
    ecd2:	002c      	movs	r4, r5
    ecd4:	4286      	cmp	r6, r0
    ecd6:	d9f2      	bls.n	ecbe <_realloc_r+0x14>
    ecd8:	0031      	movs	r1, r6
    ecda:	0038      	movs	r0, r7
    ecdc:	f7ff faea 	bl	e2b4 <_malloc_r>
    ece0:	1e04      	subs	r4, r0, #0
    ece2:	d0ec      	beq.n	ecbe <_realloc_r+0x14>
    ece4:	0029      	movs	r1, r5
    ece6:	0032      	movs	r2, r6
    ece8:	f7ff fa88 	bl	e1fc <memcpy>
    ecec:	0029      	movs	r1, r5
    ecee:	0038      	movs	r0, r7
    ecf0:	f7ff fa96 	bl	e220 <_free_r>
    ecf4:	e7e3      	b.n	ecbe <_realloc_r+0x14>

0000ecf6 <_malloc_usable_size_r>:
    ecf6:	1f0b      	subs	r3, r1, #4
    ecf8:	681b      	ldr	r3, [r3, #0]
    ecfa:	1f18      	subs	r0, r3, #4
    ecfc:	2b00      	cmp	r3, #0
    ecfe:	da01      	bge.n	ed04 <_malloc_usable_size_r+0xe>
    ed00:	580b      	ldr	r3, [r1, r0]
    ed02:	18c0      	adds	r0, r0, r3
    ed04:	4770      	bx	lr
    ed06:	0000      	movs	r0, r0
    ed08:	65657246 	.word	0x65657246
    ed0c:	534f5452 	.word	0x534f5452
    ed10:	494c4320 	.word	0x494c4320
    ed14:	540a0d2e 	.word	0x540a0d2e
    ed18:	20657079 	.word	0x20657079
    ed1c:	706c6548 	.word	0x706c6548
    ed20:	206f7420 	.word	0x206f7420
    ed24:	77656976 	.word	0x77656976
    ed28:	6c206120 	.word	0x6c206120
    ed2c:	20747369 	.word	0x20747369
    ed30:	7220666f 	.word	0x7220666f
    ed34:	73696765 	.word	0x73696765
    ed38:	65726574 	.word	0x65726574
    ed3c:	6f632064 	.word	0x6f632064
    ed40:	6e616d6d 	.word	0x6e616d6d
    ed44:	0d2e7364 	.word	0x0d2e7364
    ed48:	0000000a 	.word	0x0000000a
    ed4c:	00756d69 	.word	0x00756d69
    ed50:	3a756d69 	.word	0x3a756d69
    ed54:	74655220 	.word	0x74655220
    ed58:	736e7275 	.word	0x736e7275
    ed5c:	76206120 	.word	0x76206120
    ed60:	65756c61 	.word	0x65756c61
    ed64:	6f726620 	.word	0x6f726620
    ed68:	6874206d 	.word	0x6874206d
    ed6c:	4d492065 	.word	0x4d492065
    ed70:	000a0d55 	.word	0x000a0d55
    ed74:	65736572 	.word	0x65736572
    ed78:	00000074 	.word	0x00000074
    ed7c:	65736572 	.word	0x65736572
    ed80:	52203a74 	.word	0x52203a74
    ed84:	74657365 	.word	0x74657365
    ed88:	68742073 	.word	0x68742073
    ed8c:	65642065 	.word	0x65642065
    ed90:	65636976 	.word	0x65636976
    ed94:	00000a0d 	.word	0x00000a0d
    ed98:	0064656c 	.word	0x0064656c
    ed9c:	2064656c 	.word	0x2064656c
    eda0:	79656b5b 	.word	0x79656b5b
    eda4:	5d6d756e 	.word	0x5d6d756e
    eda8:	5b5d525b 	.word	0x5b5d525b
    edac:	425b5d47 	.word	0x425b5d47
    edb0:	53203a5d 	.word	0x53203a5d
    edb4:	20737465 	.word	0x20737465
    edb8:	20656874 	.word	0x20656874
    edbc:	65766967 	.word	0x65766967
    edc0:	454c206e 	.word	0x454c206e
    edc4:	6f742044 	.word	0x6f742044
    edc8:	65687420 	.word	0x65687420
    edcc:	76696720 	.word	0x76696720
    edd0:	52206e65 	.word	0x52206e65
    edd4:	422c472c 	.word	0x422c472c
    edd8:	6c617620 	.word	0x6c617620
    eddc:	2e736575 	.word	0x2e736575
    ede0:	00000a0d 	.word	0x00000a0d
    ede4:	00736c63 	.word	0x00736c63
    ede8:	3a736c63 	.word	0x3a736c63
    edec:	656c4320 	.word	0x656c4320
    edf0:	20737261 	.word	0x20737261
    edf4:	20656874 	.word	0x20656874
    edf8:	6d726574 	.word	0x6d726574
    edfc:	6c616e69 	.word	0x6c616e69
    ee00:	72637320 	.word	0x72637320
    ee04:	0d6e6565 	.word	0x0d6e6565
    ee08:	0000000a 	.word	0x0000000a
    ee0c:	6c756f43 	.word	0x6c756f43
    ee10:	6f6e2064 	.word	0x6f6e2064
    ee14:	6c612074 	.word	0x6c612074
    ee18:	61636f6c 	.word	0x61636f6c
    ee1c:	73206574 	.word	0x73206574
    ee20:	70616d65 	.word	0x70616d65
    ee24:	65726f68 	.word	0x65726f68
    ee28:	00000a0d 	.word	0x00000a0d
    ee2c:	00000a0d 	.word	0x00000a0d
    ee30:	0000616f 	.word	0x0000616f
    ee34:	325b6325 	.word	0x325b6325
    ee38:	003e0d4b 	.word	0x003e0d4b
    ee3c:	00082008 	.word	0x00082008
    ee40:	65636341 	.word	0x65636341
    ee44:	6172656c 	.word	0x6172656c
    ee48:	6e6f6974 	.word	0x6e6f6974
    ee4c:	676d5b20 	.word	0x676d5b20
    ee50:	20583a5d 	.word	0x20583a5d
    ee54:	59096425 	.word	0x59096425
    ee58:	09642520 	.word	0x09642520
    ee5c:	6425205a 	.word	0x6425205a
    ee60:	00000a0d 	.word	0x00000a0d
    ee64:	64206f4e 	.word	0x64206f4e
    ee68:	20617461 	.word	0x20617461
    ee6c:	64616572 	.word	0x64616572
    ee70:	0d202179 	.word	0x0d202179
    ee74:	0000000a 	.word	0x0000000a
    ee78:	325b6325 	.word	0x325b6325
    ee7c:	0000004a 	.word	0x0000004a
    ee80:	0a0d7325 	.word	0x0a0d7325
    ee84:	00000000 	.word	0x00000000
    ee88:	72727563 	.word	0x72727563
    ee8c:	20746e65 	.word	0x20746e65
    ee90:	6f702070 	.word	0x6f702070
    ee94:	65746e69 	.word	0x65746e69
    ee98:	3a232072 	.word	0x3a232072
    ee9c:	0d692520 	.word	0x0d692520
    eea0:	0000000a 	.word	0x0000000a
    eea4:	20656874 	.word	0x20656874
    eea8:	65766173 	.word	0x65766173
    eeac:	61702064 	.word	0x61702064
    eeb0:	206d6172 	.word	0x206d6172
    eeb4:	203a7369 	.word	0x203a7369
    eeb8:	25206925 	.word	0x25206925
    eebc:	69252069 	.word	0x69252069
    eec0:	0d692520 	.word	0x0d692520
    eec4:	0000000a 	.word	0x0000000a
    eec8:	2044454c 	.word	0x2044454c
    eecc:	28204449 	.word	0x28204449
    eed0:	29746e69 	.word	0x29746e69
    eed4:	74756f20 	.word	0x74756f20
    eed8:	20666f20 	.word	0x20666f20
    eedc:	6e756f62 	.word	0x6e756f62
    eee0:	20217364 	.word	0x20217364
    eee4:	6465654e 	.word	0x6465654e
    eee8:	206f7420 	.word	0x206f7420
    eeec:	30206562 	.word	0x30206562
    eef0:	206f7420 	.word	0x206f7420
    eef4:	202e3531 	.word	0x202e3531
    eef8:	00000a0d 	.word	0x00000a0d
    eefc:	61762052 	.word	0x61762052
    ef00:	2065756c 	.word	0x2065756c
    ef04:	746e6928 	.word	0x746e6928
    ef08:	756f2029 	.word	0x756f2029
    ef0c:	666f2074 	.word	0x666f2074
    ef10:	756f6220 	.word	0x756f6220
    ef14:	2173646e 	.word	0x2173646e
    ef18:	65654e20 	.word	0x65654e20
    ef1c:	6f742064 	.word	0x6f742064
    ef20:	20656220 	.word	0x20656220
    ef24:	6f742030 	.word	0x6f742030
    ef28:	35353220 	.word	0x35353220
    ef2c:	0a0d202e 	.word	0x0a0d202e
    ef30:	00000000 	.word	0x00000000
    ef34:	61762047 	.word	0x61762047
    ef38:	2065756c 	.word	0x2065756c
    ef3c:	746e6928 	.word	0x746e6928
    ef40:	756f2029 	.word	0x756f2029
    ef44:	666f2074 	.word	0x666f2074
    ef48:	756f6220 	.word	0x756f6220
    ef4c:	2173646e 	.word	0x2173646e
    ef50:	65654e20 	.word	0x65654e20
    ef54:	6f742064 	.word	0x6f742064
    ef58:	20656220 	.word	0x20656220
    ef5c:	6f742030 	.word	0x6f742030
    ef60:	35353220 	.word	0x35353220
    ef64:	0a0d202e 	.word	0x0a0d202e
    ef68:	00000000 	.word	0x00000000
    ef6c:	61762042 	.word	0x61762042
    ef70:	2065756c 	.word	0x2065756c
    ef74:	746e6928 	.word	0x746e6928
    ef78:	756f2029 	.word	0x756f2029
    ef7c:	666f2074 	.word	0x666f2074
    ef80:	756f6220 	.word	0x756f6220
    ef84:	2173646e 	.word	0x2173646e
    ef88:	65654e20 	.word	0x65654e20
    ef8c:	6f742064 	.word	0x6f742064
    ef90:	20656220 	.word	0x20656220
    ef94:	6f742030 	.word	0x6f742030
    ef98:	35353220 	.word	0x35353220
    ef9c:	0a0d202e 	.word	0x0a0d202e
    efa0:	00000000 	.word	0x00000000

0000efa4 <xImuGetCommand>:
    efa4:	0000ed4c 0000ed50 00000c49 00000000     L...P...I.......

0000efb4 <xResetCommand>:
    efb4:	0000ed74 0000ed7c 00000d8d 00000000     t...|...........

0000efc4 <xNeotrellisTurnLEDCommand>:
    efc4:	0000ed98 0000ed9c 00000dd9 00000004     ................

0000efd4 <xClearScreen>:
    efd4:	0000ede4 0000ede8 00000d45 00000000     ........E.......

0000efe4 <msgBaseGetHWID>:
    efe4:	00000100                                ....

0000efe8 <msgNeopixelPin>:
    efe8:	0003010e                                ....

0000efec <msgNeopixelSpeed>:
    efec:	0001020e                                ....

0000eff0 <msgNeopixelBufLength>:
    eff0:	3000030e                                ...0

0000eff4 <msgKeypadEnableInt>:
    eff4:	00010210                                ....

0000eff8 <msgKeypadGetCount>:
    eff8:	00000410 6f727245 6e692072 61697469     ....Error initia
    f008:	697a696c 5320676e 61736565 0a0d2177     lizing Seesaw!..
    f018:	00000000 2072754f 6f727265 6e692072     ....Our error in
    f028:	65646973 65657320 20776173 203a7369     side seesaw is: 
    f038:	0a0d6425 00000000 6f727245 000a0d72     %d......Error...
    f048:	73206f4e 61736565 44492077 000a0d20     No seesaw ID ...
    f058:	6e756f46 65532064 77617365 000a0d21     Found Seesaw!...
    f068:	6c756f43 6f6e2064 72772074 20657469     Could not write 
    f078:	73656553 70207761 0d216e69 0000000a     Seesaw pin!.....
    f088:	6c756f43 6f6e2064 65732074 65732074     Could not set se
    f098:	77617365 6f654e20 65786970 7073206c     esaw Neopixel sp
    f0a8:	21646565 00000a0d 6c756f43 6f6e2064     eed!....Could no
    f0b8:	65732074 65732074 77617365 6f654e20     t set seesaw Neo
    f0c8:	65786970 756e206c 7265626d 20666f20     pixel number of 
    f0d8:	69766564 0d736563 0000000a 6f727245     devices.....Erro
    f0e8:	65722072 6e696461 65532067 77617365     r reading Seesaw
    f0f8:	756f6320 2173746e 00000a0d 00001010      counts!........
    f108:	0000050e 6c756f43 6f6e2064 6e692074     ....Could not in
    f118:	61697469 657a696c 79654b20 21646170     itialize Keypad!
    f128:	00000a0d 54204955 206b7361 72617453     ....UI Task Star
    f138:	21646574 00000000 6c616572 79656b20     ted!....real key
    f148:	6d756e20 20726562 203a7369 78343025      number is: %04x
    f158:	00000a0d 73657270 21646573 0a0d2121     ....pressed!!!..
    f168:	00000000 72706e75 65737365 21212164     ....unpressed!!!
    f178:	00000a0d 74616857 65687420 75656420     ....What the deu
    f188:	0d3f6563 0000000a 706c6568 00000000     ce?.....help....
    f198:	65680a0d 0d3a706c 694c200a 20737473     ..help:.. Lists 
    f1a8:	206c6c61 20656874 69676572 72657473     all the register
    f1b8:	63206465 616d6d6f 0d73646e 000a0d0a     ed commands.....
    f1c8:	6f636e49 63657272 6f632074 6e616d6d     Incorrect comman
    f1d8:	61702064 656d6172 28726574 202e2973     d parameter(s). 
    f1e8:	746e4520 22207265 706c6568 6f742022      Enter "help" to
    f1f8:	65697620 20612077 7473696c 20666f20      view a list of 
    f208:	69617661 6c62616c 6f632065 6e616d6d     available comman
    f218:	0d2e7364 000a0d0a 6d6d6f43 20646e61     ds......Command 
    f228:	20746f6e 6f636572 73696e67 202e6465     not recognised. 
    f238:	746e4520 27207265 706c6568 6f742027      Enter 'help' to
    f248:	65697620 20612077 7473696c 20666f20      view a list of 
    f258:	69617661 6c62616c 6f632065 6e616d6d     available comman
    f268:	0d2e7364 000a0d0a                       ds......

0000f270 <xHelpCommand>:
    f270:	0000f190 0000f198 00003899 00000000     .........8......
    f280:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
    f290:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
    f2a0:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
    f2b0:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
    f2c0:	78656e55 74636570 61206465 6d756772     Unexpected argum
    f2d0:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
    f2e0:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
    f2f0:	00296564 20746f4e 756f6e65 54206867     de).Not enough T
    f300:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
    f310:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
    f320:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
    f330:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
    f340:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
    f350:	2d207365 636e6920 73616572 52542065     es - increase TR
    f360:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
    f370:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    f380:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
    f390:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
    f3a0:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    f3b0:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
    f3c0:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
    f3d0:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
    f3e0:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
    f3f0:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    f400:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
    f410:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    f420:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
    f430:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
    f440:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
    f450:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
    f460:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
    f470:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
    f480:	6e616820 73656c64 69202d20 6572636e      handles - incre
    f490:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
    f4a0:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
    f4b0:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
    f4c0:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
    f4d0:	61682050 656c646e 202d2073 72636e69     P handles - incr
    f4e0:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
    f4f0:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
    f500:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
    f510:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
    f520:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
    f530:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
    f540:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
    f550:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
    f560:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
    f570:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
    f580:	6e616820 73656c64 69202d20 6572636e      handles - incre
    f590:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
    f5a0:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
    f5b0:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    f5c0:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
    f5d0:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
    f5e0:	64696c61 6a626f20 63746365 7373616c     alid objectclass
    f5f0:	00000021 00003e2e 00003e26 00003e2a     !....>..&>..*>..
    f600:	00003e1e 00003e22 00003e32 00003e36     .>..">..2>..6>..
    f610:	00003e3a 00003e3e 43415254 53415f45     :>..>>..TRACE_AS
    f620:	54524553 6552203a 64726f63 6e207265     SERT: Recorder n
    f630:	6920746f 6974696e 7a696c61 202e6465     ot initialized. 
    f640:	20657355 61725476 6e456563 656c6261     Use vTraceEnable
    f650:	69202928 6574736e 00216461 61747328     () instead!.(sta
    f660:	70757472 00000029 43415254 53415f45     rtup)...TRACE_AS
    f670:	54524553 6552203a 64726f63 6e207265     SERT: Recorder n
    f680:	6920746f 6974696e 7a696c61 202c6465     ot initialized, 
    f690:	6c6c6163 72547620 45656361 6c62616e     call vTraceEnabl
    f6a0:	20292865 73726966 00002174 43415254     e() first!..TRAC
    f6b0:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
    f6c0:	49746553 72505253 7265706f 73656974     SetISRProperties
    f6d0:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
    f6e0:	20726f66 646e6168 0000656c 43415254     for handle..TRAC
    f6f0:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
    f700:	49746553 72505253 7265706f 73656974     SetISRProperties
    f710:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
    f720:	61725476 74536563 4965726f 65425253     vTraceStoreISRBe
    f730:	206e6967 6572202d 64726f63 62207265     gin - recorder b
    f740:	21797375 65655320 646f6320 6f632065     usy! See code co
    f750:	6e656d6d 00002e74 43415254 53415f45     mment...TRACE_AS
    f760:	54524553 5476203a 65636172 726f7453     SERT: vTraceStor
    f770:	52534965 69676542 49203a6e 6c61766e     eISRBegin: Inval
    f780:	49206469 68205253 6c646e61 4e282065     id ISR handle (N
    f790:	294c4c55 00000000 43415254 53415f45     ULL)....TRACE_AS
    f7a0:	54524553 5476203a 65636172 726f7453     SERT: vTraceStor
    f7b0:	52534965 69676542 49203a6e 6c61766e     eISRBegin: Inval
    f7c0:	49206469 68205253 6c646e61 3e282065     id ISR handle (>
    f7d0:	53494e20 00002952 206f6f54 796e616d      NISR)..Too many
    f7e0:	73656e20 20646574 65746e69 70757272      nested interrup
    f7f0:	00217374 61725476 74536563 4965726f     ts!.vTraceStoreI
    f800:	6e455253 202d2064 6f636572 72656472     SREnd - recorder
    f810:	73756220 53202179 63206565 2065646f      busy! See code 
    f820:	6d6d6f63 2e746e65 00000000 616d6e55     comment.....Unma
    f830:	65686374 61632064 74206c6c 5476206f     tched call to vT
    f840:	65636172 726f7453 52534965 20646e45     raceStoreISREnd 
    f850:	53496e28 74636152 20657669 30203d3d     (nISRactive == 0
    f860:	7865202c 74636570 3e206465 00293020     , expected > 0).
    f870:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
    f880:	49657469 3a38746e 66756220 20726566     iteInt8: buffer 
    f890:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
    f8a0:	54524553 7277203a 49657469 3631746e     SERT: writeInt16
    f8b0:	7562203a 72656666 203d3d20 4c4c554e     : buffer == NULL
    f8c0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    f8d0:	7277203a 49657469 3233746e 7562203a     : writeInt32: bu
    f8e0:	72656666 203d3d20 4c4c554e 00000000     ffer == NULL....
    f8f0:	61725476 72506563 46746e69 54202d20     vTracePrintF - T
    f900:	6d206f6f 20796e61 75677261 746e656d     oo many argument
    f910:	6d202c73 31207861 6c612035 65776f6c     s, max 15 allowe
    f920:	00002164 61725476 72506563 46746e69     d!..vTracePrintF
    f930:	54202d20 6c206f6f 65677261 67726120      - Too large arg
    f940:	6e656d75 202c7374 2078616d 62203233     uments, max 32 b
    f950:	20657479 6f6c6c61 21646577 00000000     yte allowed!....
    f960:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
    f970:	65636172 69725056 3a46746e 726f6620     raceVPrintF: for
    f980:	5374616d 3d207274 554e203d 00004c4c     matStr == NULL..
    f990:	43415254 53415f45 54524553 5478203a     TRACE_ASSERT: xT
    f9a0:	65636172 69676552 72657473 69727453     raceRegisterStri
    f9b0:	203a676e 6562616c 3d3d206c 4c554e20     ng: label == NUL
    f9c0:	0000004c 43415254 53415f45 54524553     L...TRACE_ASSERT
    f9d0:	7270203a 61725476 74536563 5465726f     : prvTraceStoreT
    f9e0:	526b7361 79646165 6e49203a 696c6176     askReady: Invali
    f9f0:	61762064 2065756c 20726f66 646e6168     d value for hand
    fa00:	0000656c 6f636552 72656472 73756220     le..Recorder bus
    fa10:	202d2079 68676968 69727020 7469726f     y - high priorit
    fa20:	53492079 73752052 20676e69 63737973     y ISR using sysc
    fa30:	3f6c6c61 29312820 00000000 43415254     all? (1)....TRAC
    fa40:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    fa50:	74536563 4c65726f 6f50776f 3a726577     ceStoreLowPower:
    fa60:	766e4920 64696c61 616c6620 61762067      Invalid flag va
    fa70:	0065756c 43415254 53415f45 54524553     lue.TRACE_ASSERT
    fa80:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
    fa90:	656e7265 6c61436c 65203a6c 65646f63     ernelCall: ecode
    faa0:	203d3e20 46467830 00000000 43415254      >= 0xFF....TRAC
    fab0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    fac0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
    fad0:	6f203a6c 63656a62 616c4374 3e207373     l: objectClass >
    fae0:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    faf0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    fb00:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
    fb10:	656e7265 6c61436c 49203a6c 6c61766e     ernelCall: Inval
    fb20:	76206469 65756c61 726f6620 6a626f20     id value for obj
    fb30:	4e746365 65626d75 00000072 6f636552     ectNumber...Reco
    fb40:	72656472 73756220 202d2079 68676968     rder busy - high
    fb50:	69727020 7469726f 53492079 73752052      priority ISR us
    fb60:	20676e69 63737973 3f6c6c61 29322820     ing syscall? (2)
    fb70:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    fb80:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
    fb90:	656e7265 6c61436c 7469576c 72615068     ernelCallWithPar
    fba0:	203a6d61 63747665 2065646f 30203d3e     am: evtcode >= 0
    fbb0:	00464678 43415254 53415f45 54524553     xFF.TRACE_ASSERT
    fbc0:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
    fbd0:	656e7265 6c61436c 7469576c 72615068     ernelCallWithPar
    fbe0:	203a6d61 656a626f 6c437463 20737361     am: objectClass 
    fbf0:	54203d3e 45434152 4c434e5f 45535341     >= TRACE_NCLASSE
    fc00:	00000053 43415254 53415f45 54524553     S...TRACE_ASSERT
    fc10:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
    fc20:	656e7265 6c61436c 7469576c 72615068     ernelCallWithPar
    fc30:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
    fc40:	6f662065 626f2072 7463656a 626d754e     e for objectNumb
    fc50:	00007265 6f636552 72656472 73756220     er..Recorder bus
    fc60:	202d2079 68676968 69727020 7469726f     y - high priorit
    fc70:	53492079 73752052 20676e69 63737973     y ISR using sysc
    fc80:	3f6c6c61 29332820 00000000 43415254     all? (3)....TRAC
    fc90:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    fca0:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
    fcb0:	2064696c 756c6176 6f662065 61702072     lid value for pa
    fcc0:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
    fcd0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    fce0:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    fcf0:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
    fd00:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
    fd10:	726f6620 74766520 65646f63 00000000      for evtcode....
    fd20:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    fd30:	68676968 69727020 7469726f 53492079     high priority IS
    fd40:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    fd50:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
    fd60:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    fd70:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
    fd80:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    fd90:	73617420 61685f6b 656c646e 00000000      task_handle....
    fda0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    fdb0:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
    fdc0:	6d614e74 436e4f65 65736f6c 6e657645     tNameOnCloseEven
    fdd0:	6f203a74 63656a62 616c6374 3e207373     t: objectclass >
    fde0:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    fdf0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    fe00:	7270203a 61725476 74536563 4f65726f     : prvTraceStoreO
    fe10:	63656a62 6d614e74 436e4f65 65736f6c     bjectNameOnClose
    fe20:	6e657645 49203a74 6c61766e 76206469     Event: Invalid v
    fe30:	65756c61 726f6620 6e616820 00656c64     alue for handle.
    fe40:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    fe50:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
    fe60:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
    fe70:	76456573 3a746e65 6a626f20 63746365     seEvent: objectc
    fe80:	7373616c 203d3e20 43415254 434e5f45     lass >= TRACE_NC
    fe90:	5353414c 00005345 43415254 53415f45     LASSES..TRACE_AS
    fea0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    feb0:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
    fec0:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
    fed0:	766e4920 64696c61 6c617620 66206575      Invalid value f
    fee0:	6820726f 6c646e61 00000065 43415254     or handle...TRAC
    fef0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    ff00:	65536563 69725074 7469726f 6f725079     ceSetPriorityPro
    ff10:	74726570 6f203a79 63656a62 616c6374     perty: objectcla
    ff20:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
    ff30:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
    ff40:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
    ff50:	69725074 7469726f 6f725079 74726570     tPriorityPropert
    ff60:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
    ff70:	726f6620 00646920 43415254 53415f45      for id.TRACE_AS
    ff80:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
    ff90:	69725074 7469726f 6f725079 74726570     tPriorityPropert
    ffa0:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
    ffb0:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    ffc0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    ffd0:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
    ffe0:	7469726f 6f725079 74726570 49203a79     orityProperty: I
    fff0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   10000:	00646920 43415254 53415f45 54524553      id.TRACE_ASSERT
   10010:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   10020:	53746365 65746174 626f203a 7463656a     ectState: object
   10030:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
   10040:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
   10050:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   10060:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
   10070:	696c6176 61762064 2065756c 20726f66     valid value for 
   10080:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
   10090:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
   100a0:	53746365 65746174 626f203a 7463656a     ectState: object
   100b0:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
   100c0:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
   100d0:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   100e0:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
   100f0:	696c6176 61762064 2065756c 20726f66     valid value for 
   10100:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
   10110:	7270203a 61725476 65536563 73615474     : prvTraceSetTas
   10120:	736e496b 636e6174 6e694665 65687369     kInstanceFinishe
   10130:	49203a64 6c61766e 76206469 65756c61     d: Invalid value
   10140:	726f6620 6e616820 00656c64 63617254      for handle.Trac
   10150:	65522065 64726f63 44207265 006f6d65     e Recorder Demo.
   10160:	65747441 2074706d 69206f74 7865646e     Attempt to index
   10170:	74756f20 65646973 65766520 6220746e      outside event b
   10180:	65666675 00002172 43415254 53415f45     uffer!..TRACE_AS
   10190:	54524553 6975203a 65646e49 4f664f78     SERT: uiIndexOfO
   101a0:	63656a62 49203a74 6c61766e 76206469     bject: Invalid v
   101b0:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   101c0:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   101d0:	54524553 6975203a 65646e49 4f664f78     SERT: uiIndexOfO
   101e0:	63656a62 49203a74 6c61766e 76206469     bject: Invalid v
   101f0:	65756c61 726f6620 6a626f20 68746365     alue for objecth
   10200:	6c646e61 00000065 656a624f 74207463     andle...Object t
   10210:	656c6261 6f6f6c20 2070756b 68746977     able lookup with
   10220:	766e6920 64696c61 6a626f20 20746365      invalid object 
   10230:	646e6168 6f20656c 626f2072 7463656a     handle or object
   10240:	616c6320 00217373 43415254 53415f45      class!.TRACE_AS
   10250:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   10260:	6a624f74 48746365 6c646e61 49203a65     tObjectHandle: I
   10270:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   10280:	6a626f20 63746365 7373616c 00000000      objectclass....
   10290:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   102a0:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   102b0:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   102c0:	756c6176 6f662065 626f2072 7463656a     value for object
   102d0:	73616c63 00000073 43415254 53415f45     class...TRACE_AS
   102e0:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   102f0:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   10300:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   10310:	61682072 656c646e 00000000 65747441     r handle....Atte
   10320:	2074706d 66206f74 20656572 65726f6d     mpt to free more
   10330:	6e616820 73656c64 61687420 6c61206e      handles than al
   10340:	61636f6c 21646574 00000000 43415254     located!....TRAC
   10350:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   10360:	65536563 6a624f74 4e746365 3a656d61     ceSetObjectName:
   10370:	6d616e20 3d3d2065 4c554e20 0000004c      name == NULL...
   10380:	656c6c49 206c6167 656a626f 63207463     Illegal object c
   10390:	7373616c 206e6920 54767270 65636172     lass in prvTrace
   103a0:	4f746553 63656a62 6d614e74 00000065     SetObjectName...
   103b0:	656c6c49 206c6167 646e6168 2820656c     Illegal handle (
   103c0:	69202930 7270206e 61725476 65536563     0) in prvTraceSe
   103d0:	6a624f74 4e746365 2e656d61 00000000     tObjectName.....
   103e0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   103f0:	61725476 704f6563 79536e65 6c6f626d     vTraceOpenSymbol
   10400:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   10410:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   10420:	65684376 61446b63 6f546174 764f6542     vCheckDataToBeOv
   10430:	72777265 65747469 726f466e 746c754d     erwrittenForMult
   10440:	746e4569 76457972 73746e65 6f6e203a     iEntryEvents: no
   10450:	746e4566 73656972 68436f54 206b6365     fEntriesToCheck 
   10460:	30203d3d 00000000 43415254 53415f45     == 0....TRACE_AS
   10470:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   10480:	53544474 6e49203a 696c6176 61762064     tDTS: Invalid va
   10490:	2065756c 20726f66 61726170 616d5f6d     lue for param_ma
   104a0:	53544478 00000000 20646142 61726170     xDTS....Bad para
   104b0:	616d5f6d 53544478 206e6920 54767270     m_maxDTS in prvT
   104c0:	65636172 44746547 00005354 43415254     raceGetDTS..TRAC
   104d0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   104e0:	6f4c6563 70756b6f 626d7953 61546c6f     ceLookupSymbolTa
   104f0:	45656c62 7972746e 616e203a 3d20656d     bleEntry: name =
   10500:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   10510:	54524553 7270203a 61725476 6f4c6563     SERT: prvTraceLo
   10520:	70756b6f 626d7953 61546c6f 45656c62     okupSymbolTableE
   10530:	7972746e 656c203a 3d3d206e 00003020     ntry: len == 0..
   10540:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   10550:	61725476 72436563 65746165 626d7953     vTraceCreateSymb
   10560:	61546c6f 45656c62 7972746e 616e203a     olTableEntry: na
   10570:	3d20656d 554e203d 00004c4c 43415254     me == NULL..TRAC
   10580:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   10590:	72436563 65746165 626d7953 61546c6f     ceCreateSymbolTa
   105a0:	45656c62 7972746e 656c203a 3d3d206e     bleEntry: len ==
   105b0:	00003020 626d7953 74206c6f 656c6261      0..Symbol table
   105c0:	6c756620 49202e6c 6572636e 20657361      full. Increase 
   105d0:	5f435254 5f474643 424d5953 545f4c4f     TRC_CFG_SYMBOL_T
   105e0:	454c4241 5a49535f 6e692045 63727420     ABLE_SIZE in trc
   105f0:	666e6f43 682e6769 00000000 43415254     Config.h....TRAC
   10600:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   10610:	65476563 65684374 75736b63 70203a6d     ceGetChecksum: p
   10620:	656d616e 203d3d20 4c4c554e 00000000     name == NULL....
   10630:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   10640:	61725476 65476563 65684374 75736b63     vTraceGetChecksu
   10650:	70203a6d 20637263 4e203d3d 004c4c55     m: pcrc == NULL.
   10660:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   10670:	61725476 65476563 65684374 75736b63     vTraceGetChecksu
   10680:	70203a6d 676e656c 3d206874 554e203d     m: plength == NU
   10690:	00004c4c 454c4449 00000000 20726d54     LL..IDLE....Tmr 
   106a0:	00637653 00008dec 00008dec 00008dec     Svc.............
   106b0:	00008e7a 00008e44 00008e6e 00008dec     z...D...n.......
   106c0:	00008dec 00008e7a 00008e44 42000800     ....z...D......B
   106d0:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   106e0:	42001c00 0c0b0a09 00000e0d 0000b1da     ...B............
   106f0:	0000b254 0000b254 0000b1f8 0000b1f2     T...T...........
   10700:	0000b1fe 0000b1e0 0000b204 0000b23a     ............:...
   10710:	0000b43c 0000b48c 0000b48c 0000b488     <...............
   10720:	0000b42e 0000b44e 0000b41e 0000b460     ....N.......`...
   10730:	0000b472 0000b4da 0000b508 0000b508     r...............
   10740:	0000b504 0000b4d4 0000b4e0 0000b4ce     ................
   10750:	0000b4e6 0000b4ec                       ........

00010758 <_tcc_intflag>:
   10758:	00000001 00000002 00000004 00000008     ................
   10768:	00001000 00002000 00004000 00008000     ..... ...@......
   10778:	00010000 00020000 00040000 00080000     ................
   10788:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
   10798:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
   107a8:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
   107b8:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
   107c8:	6e692072 61697469 697a696c 4920676e     r initializing I
   107d8:	44204332 65766972 0a0d2172 00000000     2C Driver!......
   107e8:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
   107f8:	76697244 0d217265 0000000a 6f727245     Driver!.....Erro
   10808:	6e692072 61697469 697a696c 5320676e     r initializing S
   10818:	61736565 0a0d2177 00000000 74696e49     eesaw!......Init
   10828:	696c6169 2064657a 73656553 0d217761     ialized Seesaw!.
   10838:	0000000a 20656874 20554d49 69204449     ....the IMU ID i
   10848:	25203a73 000a0d64 6e6e6143 6620746f     s: %d...Cannot f
   10858:	20646e69 21554d49 00000a0d 20554d49     ind IMU!....IMU 
   10868:	6e756f66 0a0d2164 00000000 20554d49     found!......IMU 
   10878:	74696e69 696c6169 2164657a 00000a0d     initialized!....
   10888:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   10898:	657a696c 554d4920 00000a0d 70616548     lize IMU....Heap
   108a8:	66656220 2065726f 72617473 676e6974      before starting
   108b8:	73617420 203a736b 0a0d6425 00000000      tasks: %d......
   108c8:	5f494c43 4b534154 00000000 3a525245     CLI_TASK....ERR:
   108d8:	494c4320 73617420 6f63206b 20646c75      CLI task could 
   108e8:	20746f6e 69206562 6974696e 7a696c61     not be initializ
   108f8:	0d216465 0000000a 70616548 74666120     ed!.....Heap aft
   10908:	73207265 74726174 20676e69 3a494c43     er starting CLI:
   10918:	0d642520 0000000a 54204955 006b7361      %d.....UI Task.
   10928:	3a525245 20495520 6b736174 756f6320     ERR: UI task cou
   10938:	6e20646c 6220746f 6e692065 61697469     ld not be initia
   10948:	657a696c 0a0d2164 00000000 70616548     lized!......Heap
   10958:	74666120 73207265 74726174 20676e69      after starting 
   10968:	54204955 3a6b7361 0d642520 0000000a     UI Task: %d.....
   10978:	6f727245 6e6f2072 6d656d20 2079726f     Error on memory 
   10988:	6f6c6c61 69746163 6f206e6f 5246206e     allocation on FR
   10998:	54524545 0d21534f 0000000a 6f727245     EERTOS!.....Erro
   109a8:	6e6f2072 61747320 6f206b63 66726576     r on stack overf
   109b8:	20776f6c 46206e6f 52454552 21534f54     low on FREERTOS!
   109c8:	00000a0d 0000c69c 0000c5ec 0000c5ec     ................
   109d8:	0000c5ea 0000c68e 0000c68e 0000c684     ................
   109e8:	0000c5ea 0000c68e 0000c684 0000c68e     ................
   109f8:	0000c5ea 0000c694 0000c694 0000c694     ................
   10a08:	0000c724 0000d0a8 0000d08a 0000d044     $...........D...
   10a18:	0000cf62 0000d044 0000d07c 0000d044     b...D...|...D...
   10a28:	0000cf62 0000d08a 0000d08a 0000d07c     b...........|...
   10a38:	0000cf62 0000cf5a 0000cf5a 0000cf5a     b...Z...Z...Z...
   10a48:	0000d2c0 0000d708 0000d5c8 0000d5c8     ................
   10a58:	0000d5c4 0000d6e0 0000d6e0 0000d6d2     ................
   10a68:	0000d5c4 0000d6e0 0000d6d2 0000d6e0     ................
   10a78:	0000d5c4 0000d6e8 0000d6e8 0000d6e8     ................
   10a88:	0000d8ec 4f500043 00584953 2000002e              ....C.POSIX...

00010a96 <_ctype_>:
   10a96:	20202000 20202020 28282020 20282828     .         ((((( 
   10aa6:	20202020 20202020 20202020 20202020                     
   10ab6:	10108820 10101010 10101010 10101010      ...............
   10ac6:	04040410 04040404 10040404 10101010     ................
   10ad6:	41411010 41414141 01010101 01010101     ..AAAAAA........
   10ae6:	01010101 01010101 01010101 10101010     ................
   10af6:	42421010 42424242 02020202 02020202     ..BBBBBB........
   10b06:	02020202 02020202 02020202 10101010     ................
   10b16:	00000020 00000000 00000000 00000000      ...............
	...

00010b98 <__sf_fake_stderr>:
	...

00010bb8 <__sf_fake_stdin>:
	...

00010bd8 <__sf_fake_stdout>:
	...
   10bf8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   10c08:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   10c18:	31300046 35343332 39383736 64636261     F.0123456789abcd
   10c28:	00006665                                ef..

00010c2c <_init>:
   10c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c2e:	46c0      	nop			; (mov r8, r8)
   10c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c32:	bc08      	pop	{r3}
   10c34:	469e      	mov	lr, r3
   10c36:	4770      	bx	lr

00010c38 <__init_array_start>:
   10c38:	000000dd 	.word	0x000000dd

00010c3c <_fini>:
   10c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c3e:	46c0      	nop			; (mov r8, r8)
   10c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c42:	bc08      	pop	{r3}
   10c44:	469e      	mov	lr, r3
   10c46:	4770      	bx	lr

00010c48 <__fini_array_start>:
   10c48:	000000b5 	.word	0x000000b5
