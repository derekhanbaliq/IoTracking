
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
<<<<<<< Updated upstream
  0 .text         0000ac74  00000000  00000000  00010000  2**4
=======
  0 .text         0000ac78  00000000  00000000  00010000  2**4
>>>>>>> parent of 79ffb95 (comment)
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000200  20000000  0000ac78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004d44  20000200  0000ae78  00020200  2**2
                  ALLOC
<<<<<<< HEAD
  3 .stack        00002004  20004f44  0000fbb8  00020200  2**0
=======
  0 .text         0000aca4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000200  20000000  0000aca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004d84  20000200  0000aea4  00020200  2**2
                  ALLOC
  3 .stack        00002004  20004f84  0000fc28  00020200  2**0
>>>>>>> Stashed changes
=======
  3 .stack        00002004  20004f44  0000fbbc  00020200  2**0
>>>>>>> parent of 79ffb95 (comment)
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
<<<<<<< Updated upstream
  6 .debug_info   0006d559  00000000  00000000  00020281  2**0
=======
  6 .debug_info   0006d54b  00000000  00000000  00020281  2**0
>>>>>>> parent of 79ffb95 (comment)
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000088f3  00000000  00000000  0008d7cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000234ad  00000000  00000000  000960bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001b10  00000000  00000000  000b956c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001ef0  00000000  00000000  000bb07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012e6e  00000000  00000000  000bcf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002372b  00000000  00000000  000cfdda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000ae005  00000000  00000000  000f3505  2**0
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< HEAD
 14 .debug_frame  00005b4c  00000000  00000000  001a14f8  2**2
=======
  6 .debug_info   0006d5c1  00000000  00000000  00020281  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008919  00000000  00000000  0008d842  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000234c0  00000000  00000000  0009615b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001b10  00000000  00000000  000b961b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001ef0  00000000  00000000  000bb12b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012e6f  00000000  00000000  000bd01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002436a  00000000  00000000  000cfe8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000ae03d  00000000  00000000  000f41f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005b54  00000000  00000000  001a2234  2**2
>>>>>>> Stashed changes
=======
 14 .debug_frame  00005b4c  00000000  00000000  001a150c  2**2
>>>>>>> parent of 79ffb95 (comment)
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	88 6f 00 20 2d 6c 00 00 11 6c 00 00 11 6c 00 00     .o. -l...l...l..
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	65 2e 00 00 00 00 00 00 00 00 00 00 41 2f 00 00     e...........A/..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	85 2f 00 00 11 6c 00 00 11 6c 00 00 11 6c 00 00     ./...l...l...l..
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	e1 59 00 00 e5 58 00 00 11 6c 00 00 11 6c 00 00     .Y...X...l...l..
			time.hour = 12;
      5c:	11 6c 00 00 11 6c 00 00 09 5e 00 00 19 5e 00 00     .l...l...^...^..
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	29 5e 00 00 39 5e 00 00 49 5e 00 00 59 5e 00 00     )^..9^..I^..Y^..
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	e1 6b 00 00 f1 6b 00 00 01 6c 00 00 ad 1a 00 00     .k...k...l......

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	bd 1a 00 00 cd 1a 00 00 00 00 00 00 00 00 00 00     ................
		if (time.pm == 1) {
      9c:	11 6c 00 00 11 6c 00 00 11 6c 00 00 11 6c 00 00     .l...l...l...l..
			time.pm = 0;
      ac:	11 6c 00 00 00 00 00 00                             .l......

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	20000200 	.word	0x20000200
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
<<<<<<< HEAD
<<<<<<< Updated upstream
      d8:	0000ac74 	.word	0x0000ac74
=======
      d8:	0000aca4 	.word	0x0000aca4
>>>>>>> Stashed changes
=======
      d8:	0000ac78 	.word	0x0000ac78
>>>>>>> parent of 79ffb95 (comment)

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000204 	.word	0x20000204
<<<<<<< HEAD
<<<<<<< Updated upstream
     108:	0000ac74 	.word	0x0000ac74
     10c:	0000ac74 	.word	0x0000ac74
=======
     108:	0000aca4 	.word	0x0000aca4
     10c:	0000aca4 	.word	0x0000aca4
>>>>>>> Stashed changes
=======
     108:	0000ac78 	.word	0x0000ac78
     10c:	0000ac78 	.word	0x0000ac78
>>>>>>> parent of 79ffb95 (comment)
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     120:	b570      	push	{r4, r5, r6, lr}
     122:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     124:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     126:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     128:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     12a:	8b83      	ldrh	r3, [r0, #28]
     12c:	1aed      	subs	r5, r5, r3
     12e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     130:	8b83      	ldrh	r3, [r0, #28]
     132:	3b01      	subs	r3, #1
     134:	b29b      	uxth	r3, r3
     136:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     138:	0113      	lsls	r3, r2, #4
     13a:	d51d      	bpl.n	178 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     13c:	7ac3      	ldrb	r3, [r0, #11]
     13e:	2b00      	cmp	r3, #0
     140:	d003      	beq.n	14a <_i2c_master_read+0x2a>
     142:	8b83      	ldrh	r3, [r0, #28]
     144:	b29b      	uxth	r3, r3
     146:	2b01      	cmp	r3, #1
     148:	d010      	beq.n	16c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     14a:	8ba3      	ldrh	r3, [r4, #28]
     14c:	b29b      	uxth	r3, r3
     14e:	2b00      	cmp	r3, #0
     150:	d102      	bne.n	158 <_i2c_master_read+0x38>
		if (module->send_stop) {
     152:	7aa3      	ldrb	r3, [r4, #10]
     154:	2b00      	cmp	r3, #0
     156:	d11c      	bne.n	192 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     158:	0020      	movs	r0, r4
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <_i2c_master_read+0x84>)
     15c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     15e:	6a23      	ldr	r3, [r4, #32]
     160:	195d      	adds	r5, r3, r5
     162:	2328      	movs	r3, #40	; 0x28
     164:	5cf3      	ldrb	r3, [r6, r3]
     166:	b2db      	uxtb	r3, r3
     168:	702b      	strb	r3, [r5, #0]
}
     16a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     16c:	6872      	ldr	r2, [r6, #4]
     16e:	2380      	movs	r3, #128	; 0x80
     170:	02db      	lsls	r3, r3, #11
     172:	4313      	orrs	r3, r2
     174:	6073      	str	r3, [r6, #4]
     176:	e7e8      	b.n	14a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     178:	7ac3      	ldrb	r3, [r0, #11]
     17a:	2b00      	cmp	r3, #0
     17c:	d0e5      	beq.n	14a <_i2c_master_read+0x2a>
     17e:	8b83      	ldrh	r3, [r0, #28]
     180:	b29b      	uxth	r3, r3
     182:	2b00      	cmp	r3, #0
     184:	d1e1      	bne.n	14a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     186:	6872      	ldr	r2, [r6, #4]
     188:	2380      	movs	r3, #128	; 0x80
     18a:	02db      	lsls	r3, r3, #11
     18c:	4313      	orrs	r3, r2
     18e:	6073      	str	r3, [r6, #4]
     190:	e7db      	b.n	14a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     192:	0020      	movs	r0, r4
     194:	4b03      	ldr	r3, [pc, #12]	; (1a4 <_i2c_master_read+0x84>)
     196:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     198:	6872      	ldr	r2, [r6, #4]
     19a:	23c0      	movs	r3, #192	; 0xc0
     19c:	029b      	lsls	r3, r3, #10
     19e:	4313      	orrs	r3, r2
     1a0:	6073      	str	r3, [r6, #4]
     1a2:	e7d9      	b.n	158 <_i2c_master_read+0x38>
     1a4:	00000115 	.word	0x00000115

000001a8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ac:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     1ae:	8b6b      	ldrh	r3, [r5, #26]
     1b0:	075b      	lsls	r3, r3, #29
     1b2:	d503      	bpl.n	1bc <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     1b4:	221e      	movs	r2, #30
     1b6:	2325      	movs	r3, #37	; 0x25
     1b8:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     1ba:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     1bc:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     1be:	8b83      	ldrh	r3, [r0, #28]
     1c0:	1af6      	subs	r6, r6, r3
     1c2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     1c4:	8b83      	ldrh	r3, [r0, #28]
     1c6:	3b01      	subs	r3, #1
     1c8:	b29b      	uxth	r3, r3
     1ca:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <_i2c_master_write+0x38>)
     1ce:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     1d0:	6a23      	ldr	r3, [r4, #32]
     1d2:	199e      	adds	r6, r3, r6
     1d4:	7833      	ldrb	r3, [r6, #0]
     1d6:	b2db      	uxtb	r3, r3
     1d8:	2228      	movs	r2, #40	; 0x28
     1da:	54ab      	strb	r3, [r5, r2]
     1dc:	e7ed      	b.n	1ba <_i2c_master_write+0x12>
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	00000115 	.word	0x00000115

000001e4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
     1e6:	0005      	movs	r5, r0
     1e8:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ea:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     1ec:	7a4b      	ldrb	r3, [r1, #9]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d11a      	bne.n	228 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     1f2:	6873      	ldr	r3, [r6, #4]
     1f4:	4a13      	ldr	r2, [pc, #76]	; (244 <_i2c_master_write_packet+0x60>)
     1f6:	4013      	ands	r3, r2
     1f8:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     1fa:	6863      	ldr	r3, [r4, #4]
     1fc:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     1fe:	8863      	ldrh	r3, [r4, #2]
     200:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     202:	2200      	movs	r2, #0
     204:	2324      	movs	r3, #36	; 0x24
     206:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     208:	3205      	adds	r2, #5
     20a:	3301      	adds	r3, #1
     20c:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     20e:	3b22      	subs	r3, #34	; 0x22
     210:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     212:	7a23      	ldrb	r3, [r4, #8]
     214:	2b00      	cmp	r3, #0
     216:	d10b      	bne.n	230 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     218:	8823      	ldrh	r3, [r4, #0]
     21a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     21c:	7a62      	ldrb	r2, [r4, #9]
     21e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     220:	4313      	orrs	r3, r2
     222:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     224:	2000      	movs	r0, #0
     226:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     228:	7a89      	ldrb	r1, [r1, #10]
     22a:	4b07      	ldr	r3, [pc, #28]	; (248 <_i2c_master_write_packet+0x64>)
     22c:	4798      	blx	r3
     22e:	e7e0      	b.n	1f2 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     230:	8823      	ldrh	r3, [r4, #0]
     232:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     234:	7a62      	ldrb	r2, [r4, #9]
     236:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     238:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0212      	lsls	r2, r2, #8
     23e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     240:	6273      	str	r3, [r6, #36]	; 0x24
     242:	e7ef      	b.n	224 <_i2c_master_write_packet+0x40>
     244:	fffbffff 	.word	0xfffbffff
     248:	00001a29 	.word	0x00001a29

0000024c <_i2c_master_read_packet>:
{
     24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     24e:	0005      	movs	r5, r0
     250:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     252:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
     254:	684b      	ldr	r3, [r1, #4]
     256:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     258:	884b      	ldrh	r3, [r1, #2]
     25a:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     25c:	2201      	movs	r2, #1
     25e:	2324      	movs	r3, #36	; 0x24
     260:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     262:	3204      	adds	r2, #4
     264:	3301      	adds	r3, #1
     266:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     268:	6837      	ldr	r7, [r6, #0]
     26a:	013f      	lsls	r7, r7, #4
     26c:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
     26e:	7a4b      	ldrb	r3, [r1, #9]
     270:	2b00      	cmp	r3, #0
     272:	d117      	bne.n	2a4 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
     274:	2f00      	cmp	r7, #0
     276:	d002      	beq.n	27e <_i2c_master_read_packet+0x32>
     278:	8863      	ldrh	r3, [r4, #2]
     27a:	2b01      	cmp	r3, #1
     27c:	d016      	beq.n	2ac <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     27e:	6873      	ldr	r3, [r6, #4]
     280:	4a20      	ldr	r2, [pc, #128]	; (304 <_i2c_master_read_packet+0xb8>)
     282:	4013      	ands	r3, r2
     284:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
     286:	7a23      	ldrb	r3, [r4, #8]
     288:	2b00      	cmp	r3, #0
     28a:	d115      	bne.n	2b8 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
     28c:	2303      	movs	r3, #3
     28e:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     290:	8823      	ldrh	r3, [r4, #0]
     292:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     294:	7a62      	ldrb	r2, [r4, #9]
     296:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     298:	4313      	orrs	r3, r2
     29a:	2201      	movs	r2, #1
     29c:	4313      	orrs	r3, r2
     29e:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
     2a0:	2000      	movs	r0, #0
}
     2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     2a4:	7a89      	ldrb	r1, [r1, #10]
     2a6:	4b18      	ldr	r3, [pc, #96]	; (308 <_i2c_master_read_packet+0xbc>)
     2a8:	4798      	blx	r3
     2aa:	e7e3      	b.n	274 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     2ac:	6872      	ldr	r2, [r6, #4]
     2ae:	2380      	movs	r3, #128	; 0x80
     2b0:	02db      	lsls	r3, r3, #11
     2b2:	4313      	orrs	r3, r2
     2b4:	6073      	str	r3, [r6, #4]
     2b6:	e7e6      	b.n	286 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     2b8:	8823      	ldrh	r3, [r4, #0]
     2ba:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2bc:	7a62      	ldrb	r2, [r4, #9]
     2be:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     2c0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2c2:	2280      	movs	r2, #128	; 0x80
     2c4:	0212      	lsls	r2, r2, #8
     2c6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     2c8:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     2ca:	0028      	movs	r0, r5
     2cc:	4b0f      	ldr	r3, [pc, #60]	; (30c <_i2c_master_read_packet+0xc0>)
     2ce:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     2d0:	6873      	ldr	r3, [r6, #4]
     2d2:	4a0c      	ldr	r2, [pc, #48]	; (304 <_i2c_master_read_packet+0xb8>)
     2d4:	4013      	ands	r3, r2
     2d6:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     2d8:	2800      	cmp	r0, #0
     2da:	d1e2      	bne.n	2a2 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     2dc:	0028      	movs	r0, r5
     2de:	4b0c      	ldr	r3, [pc, #48]	; (310 <_i2c_master_read_packet+0xc4>)
     2e0:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     2e2:	2800      	cmp	r0, #0
     2e4:	d1dd      	bne.n	2a2 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     2e6:	2303      	movs	r3, #3
     2e8:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     2ea:	8823      	ldrh	r3, [r4, #0]
     2ec:	0a1b      	lsrs	r3, r3, #8
     2ee:	2278      	movs	r2, #120	; 0x78
     2f0:	4313      	orrs	r3, r2
     2f2:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     2f4:	7a62      	ldrb	r2, [r4, #9]
     2f6:	0392      	lsls	r2, r2, #14
     2f8:	2101      	movs	r1, #1
     2fa:	430a      	orrs	r2, r1
     2fc:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     2fe:	6273      	str	r3, [r6, #36]	; 0x24
     300:	e7cf      	b.n	2a2 <_i2c_master_read_packet+0x56>
     302:	46c0      	nop			; (mov r8, r8)
     304:	fffbffff 	.word	0xfffbffff
     308:	00001a29 	.word	0x00001a29
     30c:	000019fd 	.word	0x000019fd
     310:	000019cd 	.word	0x000019cd

00000314 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     314:	1c93      	adds	r3, r2, #2
     316:	009b      	lsls	r3, r3, #2
     318:	18c3      	adds	r3, r0, r3
     31a:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     31c:	7e03      	ldrb	r3, [r0, #24]
     31e:	2101      	movs	r1, #1
     320:	4091      	lsls	r1, r2
     322:	430b      	orrs	r3, r1
     324:	b2db      	uxtb	r3, r3
     326:	7603      	strb	r3, [r0, #24]
}
     328:	4770      	bx	lr
	...

0000032c <i2c_master_read_packet_job>:
{
     32c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
     32e:	8b83      	ldrh	r3, [r0, #28]
     330:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     332:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     334:	2b00      	cmp	r3, #0
     336:	d001      	beq.n	33c <i2c_master_read_packet_job+0x10>
}
     338:	0010      	movs	r0, r2
     33a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     33c:	3301      	adds	r3, #1
     33e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     340:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     342:	4b02      	ldr	r3, [pc, #8]	; (34c <i2c_master_read_packet_job+0x20>)
     344:	4798      	blx	r3
     346:	0002      	movs	r2, r0
     348:	e7f6      	b.n	338 <i2c_master_read_packet_job+0xc>
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	0000024d 	.word	0x0000024d

00000350 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     350:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     352:	8b83      	ldrh	r3, [r0, #28]
     354:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     356:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     358:	2b00      	cmp	r3, #0
     35a:	d001      	beq.n	360 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     35c:	0010      	movs	r0, r2
     35e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     360:	3301      	adds	r3, #1
     362:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     364:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     366:	4b02      	ldr	r3, [pc, #8]	; (370 <i2c_master_write_packet_job+0x20>)
     368:	4798      	blx	r3
     36a:	0002      	movs	r2, r0
     36c:	e7f6      	b.n	35c <i2c_master_write_packet_job+0xc>
     36e:	46c0      	nop			; (mov r8, r8)
     370:	000001e5 	.word	0x000001e5

00000374 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     374:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     376:	0080      	lsls	r0, r0, #2
     378:	4b75      	ldr	r3, [pc, #468]	; (550 <_i2c_master_interrupt_handler+0x1dc>)
     37a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     37c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     37e:	682b      	ldr	r3, [r5, #0]
     380:	011b      	lsls	r3, r3, #4
     382:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     384:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     386:	7e26      	ldrb	r6, [r4, #24]
     388:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     38a:	8b63      	ldrh	r3, [r4, #26]
     38c:	b29b      	uxth	r3, r3
     38e:	2b00      	cmp	r3, #0
     390:	d103      	bne.n	39a <_i2c_master_interrupt_handler+0x26>
     392:	8ba3      	ldrh	r3, [r4, #28]
     394:	b29b      	uxth	r3, r3
     396:	2b00      	cmp	r3, #0
     398:	d123      	bne.n	3e2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     39a:	8b63      	ldrh	r3, [r4, #26]
     39c:	b29b      	uxth	r3, r3
     39e:	2b00      	cmp	r3, #0
     3a0:	d008      	beq.n	3b4 <_i2c_master_interrupt_handler+0x40>
     3a2:	8ba3      	ldrh	r3, [r4, #28]
     3a4:	b29b      	uxth	r3, r3
     3a6:	2b00      	cmp	r3, #0
     3a8:	d104      	bne.n	3b4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     3aa:	3325      	adds	r3, #37	; 0x25
     3ac:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     3ae:	2b05      	cmp	r3, #5
     3b0:	d100      	bne.n	3b4 <_i2c_master_interrupt_handler+0x40>
     3b2:	e06d      	b.n	490 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     3b4:	8b63      	ldrh	r3, [r4, #26]
     3b6:	b29b      	uxth	r3, r3
     3b8:	2b00      	cmp	r3, #0
     3ba:	d024      	beq.n	406 <_i2c_master_interrupt_handler+0x92>
     3bc:	8ba3      	ldrh	r3, [r4, #28]
     3be:	b29b      	uxth	r3, r3
     3c0:	2b00      	cmp	r3, #0
     3c2:	d020      	beq.n	406 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     3c4:	8b6b      	ldrh	r3, [r5, #26]
     3c6:	069b      	lsls	r3, r3, #26
     3c8:	d500      	bpl.n	3cc <_i2c_master_interrupt_handler+0x58>
     3ca:	e081      	b.n	4d0 <_i2c_master_interrupt_handler+0x15c>
     3cc:	2a00      	cmp	r2, #0
     3ce:	d004      	beq.n	3da <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     3d0:	8ba3      	ldrh	r3, [r4, #28]
     3d2:	b29b      	uxth	r3, r3
     3d4:	2b01      	cmp	r3, #1
     3d6:	d100      	bne.n	3da <_i2c_master_interrupt_handler+0x66>
     3d8:	e07a      	b.n	4d0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     3da:	2241      	movs	r2, #65	; 0x41
     3dc:	2325      	movs	r3, #37	; 0x25
     3de:	54e2      	strb	r2, [r4, r3]
     3e0:	e011      	b.n	406 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     3e2:	7e2b      	ldrb	r3, [r5, #24]
     3e4:	07db      	lsls	r3, r3, #31
     3e6:	d507      	bpl.n	3f8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     3e8:	2301      	movs	r3, #1
     3ea:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     3ec:	8b6b      	ldrh	r3, [r5, #26]
     3ee:	079b      	lsls	r3, r3, #30
     3f0:	d52e      	bpl.n	450 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     3f2:	2241      	movs	r2, #65	; 0x41
     3f4:	2325      	movs	r3, #37	; 0x25
     3f6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     3f8:	8ba3      	ldrh	r3, [r4, #28]
     3fa:	b29b      	uxth	r3, r3
     3fc:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     3fe:	2325      	movs	r3, #37	; 0x25
     400:	5ce3      	ldrb	r3, [r4, r3]
     402:	2b05      	cmp	r3, #5
     404:	d038      	beq.n	478 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     406:	8b63      	ldrh	r3, [r4, #26]
     408:	b29b      	uxth	r3, r3
     40a:	2b00      	cmp	r3, #0
     40c:	d007      	beq.n	41e <_i2c_master_interrupt_handler+0xaa>
     40e:	8ba3      	ldrh	r3, [r4, #28]
     410:	b29b      	uxth	r3, r3
     412:	2b00      	cmp	r3, #0
     414:	d103      	bne.n	41e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     416:	3325      	adds	r3, #37	; 0x25
     418:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     41a:	2b05      	cmp	r3, #5
     41c:	d064      	beq.n	4e8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     41e:	2325      	movs	r3, #37	; 0x25
     420:	5ce3      	ldrb	r3, [r4, r3]
     422:	2b05      	cmp	r3, #5
     424:	d013      	beq.n	44e <_i2c_master_interrupt_handler+0xda>
     426:	2325      	movs	r3, #37	; 0x25
     428:	5ce3      	ldrb	r3, [r4, r3]
     42a:	2b00      	cmp	r3, #0
     42c:	d00f      	beq.n	44e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     42e:	2303      	movs	r3, #3
     430:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     432:	2300      	movs	r3, #0
     434:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     436:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     438:	3325      	adds	r3, #37	; 0x25
     43a:	5ce3      	ldrb	r3, [r4, r3]
     43c:	2b41      	cmp	r3, #65	; 0x41
     43e:	d003      	beq.n	448 <_i2c_master_interrupt_handler+0xd4>
     440:	7aa3      	ldrb	r3, [r4, #10]
     442:	2b00      	cmp	r3, #0
     444:	d000      	beq.n	448 <_i2c_master_interrupt_handler+0xd4>
     446:	e075      	b.n	534 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     448:	0773      	lsls	r3, r6, #29
     44a:	d500      	bpl.n	44e <_i2c_master_interrupt_handler+0xda>
     44c:	e07b      	b.n	546 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     44e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     450:	8b6b      	ldrh	r3, [r5, #26]
     452:	075b      	lsls	r3, r3, #29
     454:	d5d0      	bpl.n	3f8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     456:	2218      	movs	r2, #24
     458:	2325      	movs	r3, #37	; 0x25
     45a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     45c:	2300      	movs	r3, #0
     45e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     460:	7aa3      	ldrb	r3, [r4, #10]
     462:	2b00      	cmp	r3, #0
     464:	d0c8      	beq.n	3f8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     466:	0020      	movs	r0, r4
     468:	4b3a      	ldr	r3, [pc, #232]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     46a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     46c:	686a      	ldr	r2, [r5, #4]
     46e:	23c0      	movs	r3, #192	; 0xc0
     470:	029b      	lsls	r3, r3, #10
     472:	4313      	orrs	r3, r2
     474:	606b      	str	r3, [r5, #4]
     476:	e7bf      	b.n	3f8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     478:	331f      	adds	r3, #31
     47a:	5ce3      	ldrb	r3, [r4, r3]
     47c:	2b00      	cmp	r3, #0
     47e:	d003      	beq.n	488 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     480:	0020      	movs	r0, r4
     482:	4b35      	ldr	r3, [pc, #212]	; (558 <_i2c_master_interrupt_handler+0x1e4>)
     484:	4798      	blx	r3
     486:	e7be      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     488:	0020      	movs	r0, r4
     48a:	4b34      	ldr	r3, [pc, #208]	; (55c <_i2c_master_interrupt_handler+0x1e8>)
     48c:	4798      	blx	r3
     48e:	e7ba      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     490:	331f      	adds	r3, #31
     492:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     494:	2b00      	cmp	r3, #0
     496:	d000      	beq.n	49a <_i2c_master_interrupt_handler+0x126>
     498:	e78c      	b.n	3b4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     49a:	3303      	adds	r3, #3
     49c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     49e:	2300      	movs	r3, #0
     4a0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     4a2:	3325      	adds	r3, #37	; 0x25
     4a4:	2200      	movs	r2, #0
     4a6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     4a8:	7aa3      	ldrb	r3, [r4, #10]
     4aa:	2b00      	cmp	r3, #0
     4ac:	d107      	bne.n	4be <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     4ae:	2301      	movs	r3, #1
     4b0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     4b2:	07f3      	lsls	r3, r6, #31
     4b4:	d5a7      	bpl.n	406 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     4b6:	68e3      	ldr	r3, [r4, #12]
     4b8:	0020      	movs	r0, r4
     4ba:	4798      	blx	r3
     4bc:	e7a3      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     4be:	0020      	movs	r0, r4
     4c0:	4b24      	ldr	r3, [pc, #144]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     4c2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     4c4:	686a      	ldr	r2, [r5, #4]
     4c6:	23c0      	movs	r3, #192	; 0xc0
     4c8:	029b      	lsls	r3, r3, #10
     4ca:	4313      	orrs	r3, r2
     4cc:	606b      	str	r3, [r5, #4]
     4ce:	e7f0      	b.n	4b2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     4d0:	2324      	movs	r3, #36	; 0x24
     4d2:	5ce3      	ldrb	r3, [r4, r3]
     4d4:	2b00      	cmp	r3, #0
     4d6:	d103      	bne.n	4e0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     4d8:	0020      	movs	r0, r4
     4da:	4b20      	ldr	r3, [pc, #128]	; (55c <_i2c_master_interrupt_handler+0x1e8>)
     4dc:	4798      	blx	r3
     4de:	e792      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     4e0:	0020      	movs	r0, r4
     4e2:	4b1d      	ldr	r3, [pc, #116]	; (558 <_i2c_master_interrupt_handler+0x1e4>)
     4e4:	4798      	blx	r3
     4e6:	e78e      	b.n	406 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     4e8:	331f      	adds	r3, #31
     4ea:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     4ec:	2b01      	cmp	r3, #1
     4ee:	d196      	bne.n	41e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     4f0:	7e2b      	ldrb	r3, [r5, #24]
     4f2:	079b      	lsls	r3, r3, #30
     4f4:	d501      	bpl.n	4fa <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     4f6:	2302      	movs	r3, #2
     4f8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     4fa:	2303      	movs	r3, #3
     4fc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     4fe:	2300      	movs	r3, #0
     500:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     502:	3325      	adds	r3, #37	; 0x25
     504:	2200      	movs	r2, #0
     506:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     508:	07b3      	lsls	r3, r6, #30
     50a:	d503      	bpl.n	514 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     50c:	2324      	movs	r3, #36	; 0x24
     50e:	5ce3      	ldrb	r3, [r4, r3]
     510:	2b01      	cmp	r3, #1
     512:	d00b      	beq.n	52c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     514:	07f3      	lsls	r3, r6, #31
     516:	d400      	bmi.n	51a <_i2c_master_interrupt_handler+0x1a6>
     518:	e781      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     51a:	2324      	movs	r3, #36	; 0x24
     51c:	5ce3      	ldrb	r3, [r4, r3]
     51e:	2b00      	cmp	r3, #0
     520:	d000      	beq.n	524 <_i2c_master_interrupt_handler+0x1b0>
     522:	e77c      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     524:	68e3      	ldr	r3, [r4, #12]
     526:	0020      	movs	r0, r4
     528:	4798      	blx	r3
     52a:	e778      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     52c:	6923      	ldr	r3, [r4, #16]
     52e:	0020      	movs	r0, r4
     530:	4798      	blx	r3
     532:	e774      	b.n	41e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     534:	0020      	movs	r0, r4
     536:	4b07      	ldr	r3, [pc, #28]	; (554 <_i2c_master_interrupt_handler+0x1e0>)
     538:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     53a:	686a      	ldr	r2, [r5, #4]
     53c:	23e0      	movs	r3, #224	; 0xe0
     53e:	02db      	lsls	r3, r3, #11
     540:	4313      	orrs	r3, r2
     542:	606b      	str	r3, [r5, #4]
     544:	e780      	b.n	448 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     546:	6963      	ldr	r3, [r4, #20]
     548:	0020      	movs	r0, r4
     54a:	4798      	blx	r3
}
     54c:	e77f      	b.n	44e <_i2c_master_interrupt_handler+0xda>
     54e:	46c0      	nop			; (mov r8, r8)
     550:	20004e1c 	.word	0x20004e1c
     554:	00000115 	.word	0x00000115
     558:	00000121 	.word	0x00000121
     55c:	000001a9 	.word	0x000001a9

00000560 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     560:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     564:	4a02      	ldr	r2, [pc, #8]	; (570 <CLI_ResetDevice+0x10>)
     566:	4b03      	ldr	r3, [pc, #12]	; (574 <CLI_ResetDevice+0x14>)
     568:	60da      	str	r2, [r3, #12]
     56a:	f3bf 8f4f 	dsb	sy
     56e:	e7fe      	b.n	56e <CLI_ResetDevice+0xe>
     570:	05fa0004 	.word	0x05fa0004
     574:	e000ed00 	.word	0xe000ed00

00000578 <CLI_GetImuData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     578:	b5f0      	push	{r4, r5, r6, r7, lr}
     57a:	b087      	sub	sp, #28
     57c:	9002      	str	r0, [sp, #8]
     57e:	000e      	movs	r6, r1
static int16_t  data_raw_acceleration[3];
static int16_t  data_raw_angular_rate;
static float acceleration_mg[3];
uint8_t reg;
stmdev_ctx_t *dev_ctx = GetImuStruct();
     580:	4b1f      	ldr	r3, [pc, #124]	; (600 <CLI_GetImuData+0x88>)
     582:	4798      	blx	r3
     584:	9004      	str	r0, [sp, #16]


/* Read output only if new xl value is available */
lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
     586:	240f      	movs	r4, #15
     588:	ab02      	add	r3, sp, #8
     58a:	469c      	mov	ip, r3
     58c:	4464      	add	r4, ip
     58e:	0021      	movs	r1, r4
     590:	4b1c      	ldr	r3, [pc, #112]	; (604 <CLI_GetImuData+0x8c>)
     592:	4798      	blx	r3

if(reg){
     594:	7823      	ldrb	r3, [r4, #0]
     596:	2b00      	cmp	r3, #0
     598:	d107      	bne.n	5aa <CLI_GetImuData+0x32>

	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
	(int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
}else
{
	snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
     59a:	4a1b      	ldr	r2, [pc, #108]	; (608 <CLI_GetImuData+0x90>)
     59c:	0031      	movs	r1, r6
     59e:	9802      	ldr	r0, [sp, #8]
     5a0:	4b1a      	ldr	r3, [pc, #104]	; (60c <CLI_GetImuData+0x94>)
     5a2:	4798      	blx	r3
}
return pdFALSE;
}
     5a4:	2000      	movs	r0, #0
     5a6:	b007      	add	sp, #28
     5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
     5aa:	2206      	movs	r2, #6
     5ac:	2100      	movs	r1, #0
     5ae:	2000      	movs	r0, #0
     5b0:	4b17      	ldr	r3, [pc, #92]	; (610 <CLI_GetImuData+0x98>)
     5b2:	4798      	blx	r3
      lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
     5b4:	4c17      	ldr	r4, [pc, #92]	; (614 <CLI_GetImuData+0x9c>)
     5b6:	0021      	movs	r1, r4
     5b8:	a804      	add	r0, sp, #16
     5ba:	4b17      	ldr	r3, [pc, #92]	; (618 <CLI_GetImuData+0xa0>)
     5bc:	4798      	blx	r3
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
     5be:	2300      	movs	r3, #0
     5c0:	5ee0      	ldrsh	r0, [r4, r3]
     5c2:	4f16      	ldr	r7, [pc, #88]	; (61c <CLI_GetImuData+0xa4>)
     5c4:	47b8      	blx	r7
      acceleration_mg[0] =
     5c6:	4d16      	ldr	r5, [pc, #88]	; (620 <CLI_GetImuData+0xa8>)
     5c8:	6028      	str	r0, [r5, #0]
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
     5ca:	2302      	movs	r3, #2
     5cc:	5ee0      	ldrsh	r0, [r4, r3]
     5ce:	47b8      	blx	r7
      acceleration_mg[1] =
     5d0:	6068      	str	r0, [r5, #4]
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
     5d2:	2304      	movs	r3, #4
     5d4:	5ee0      	ldrsh	r0, [r4, r3]
     5d6:	47b8      	blx	r7
     5d8:	1c04      	adds	r4, r0, #0
      acceleration_mg[2] =
     5da:	60a8      	str	r0, [r5, #8]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
     5dc:	4f11      	ldr	r7, [pc, #68]	; (624 <CLI_GetImuData+0xac>)
     5de:	6828      	ldr	r0, [r5, #0]
     5e0:	47b8      	blx	r7
     5e2:	9003      	str	r0, [sp, #12]
     5e4:	1c20      	adds	r0, r4, #0
     5e6:	47b8      	blx	r7
     5e8:	9001      	str	r0, [sp, #4]
     5ea:	6868      	ldr	r0, [r5, #4]
     5ec:	47b8      	blx	r7
     5ee:	9000      	str	r0, [sp, #0]
     5f0:	9b03      	ldr	r3, [sp, #12]
     5f2:	4a0d      	ldr	r2, [pc, #52]	; (628 <CLI_GetImuData+0xb0>)
     5f4:	0031      	movs	r1, r6
     5f6:	9802      	ldr	r0, [sp, #8]
     5f8:	4c04      	ldr	r4, [pc, #16]	; (60c <CLI_GetImuData+0x94>)
     5fa:	47a0      	blx	r4
     5fc:	e7d2      	b.n	5a4 <CLI_GetImuData+0x2c>
     5fe:	46c0      	nop			; (mov r8, r8)
<<<<<<< HEAD
<<<<<<< Updated upstream
     600:	000012fd 	.word	0x000012fd
     604:	00000e49 	.word	0x00000e49
=======
     600:	00001319 	.word	0x00001319
     604:	00000e65 	.word	0x00000e65
>>>>>>> parent of 79ffb95 (comment)
     608:	0000973c 	.word	0x0000973c
     60c:	00008e99 	.word	0x00008e99
     610:	00008d13 	.word	0x00008d13
     614:	20000238 	.word	0x20000238
<<<<<<< HEAD
     618:	00000e6d 	.word	0x00000e6d
     61c:	00000d2d 	.word	0x00000d2d
=======
     600:	00001341 	.word	0x00001341
     604:	00000e8d 	.word	0x00000e8d
     608:	0000975c 	.word	0x0000975c
     60c:	00008eb9 	.word	0x00008eb9
     610:	00008d33 	.word	0x00008d33
     614:	20000238 	.word	0x20000238
     618:	00000eb1 	.word	0x00000eb1
     61c:	00000d71 	.word	0x00000d71
>>>>>>> Stashed changes
=======
     618:	00000e89 	.word	0x00000e89
     61c:	00000d49 	.word	0x00000d49
>>>>>>> parent of 79ffb95 (comment)
     620:	2000021c 	.word	0x2000021c
     624:	0000731d 	.word	0x0000731d
     628:	00009738 	.word	0x00009738

0000062c <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     62e:	0006      	movs	r6, r0
     630:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
     632:	4d06      	ldr	r5, [pc, #24]	; (64c <xCliClearTerminalScreen+0x20>)
     634:	231b      	movs	r3, #27
     636:	4a06      	ldr	r2, [pc, #24]	; (650 <xCliClearTerminalScreen+0x24>)
     638:	210f      	movs	r1, #15
     63a:	0028      	movs	r0, r5
     63c:	4c05      	ldr	r4, [pc, #20]	; (654 <xCliClearTerminalScreen+0x28>)
     63e:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
     640:	002a      	movs	r2, r5
     642:	0039      	movs	r1, r7
     644:	0030      	movs	r0, r6
     646:	47a0      	blx	r4
	return pdFALSE;
}
     648:	2000      	movs	r0, #0
     64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     64c:	20000228 	.word	0x20000228
     650:	000098c8 	.word	0x000098c8
     654:	00008eb9 	.word	0x00008eb9

00000658 <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     658:	b510      	push	{r4, lr}
	snprintf(pcWriteBuffer,xWriteBufferLen, "Students to fill out!");
     65a:	4a02      	ldr	r2, [pc, #8]	; (664 <CLI_NeotrellisSetLed+0xc>)
     65c:	4b02      	ldr	r3, [pc, #8]	; (668 <CLI_NeotrellisSetLed+0x10>)
     65e:	4798      	blx	r3
	//How do you get parameters? check link in comments!
	//Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: key, R, G, B.
	return pdFALSE;
}
     660:	2000      	movs	r0, #0
     662:	bd10      	pop	{r4, pc}
     664:	00009770 	.word	0x00009770
     668:	00008eb9 	.word	0x00008eb9

0000066c <vCommandConsoleTask>:
{
     66c:	b5f0      	push	{r4, r5, r6, r7, lr}
     66e:	46d6      	mov	lr, sl
     670:	464f      	mov	r7, r9
     672:	b580      	push	{r7, lr}
     674:	b083      	sub	sp, #12
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
     676:	4866      	ldr	r0, [pc, #408]	; (810 <vCommandConsoleTask+0x1a4>)
     678:	4c66      	ldr	r4, [pc, #408]	; (814 <vCommandConsoleTask+0x1a8>)
     67a:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
     67c:	4866      	ldr	r0, [pc, #408]	; (818 <vCommandConsoleTask+0x1ac>)
     67e:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
     680:	4866      	ldr	r0, [pc, #408]	; (81c <vCommandConsoleTask+0x1b0>)
     682:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
     684:	4866      	ldr	r0, [pc, #408]	; (820 <vCommandConsoleTask+0x1b4>)
     686:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
     688:	4866      	ldr	r0, [pc, #408]	; (824 <vCommandConsoleTask+0x1b8>)
     68a:	4b67      	ldr	r3, [pc, #412]	; (828 <vCommandConsoleTask+0x1bc>)
     68c:	4798      	blx	r3
	cliCharReadySemaphore = xSemaphoreCreateBinary();
     68e:	2203      	movs	r2, #3
     690:	2100      	movs	r1, #0
     692:	2001      	movs	r0, #1
     694:	4b65      	ldr	r3, [pc, #404]	; (82c <vCommandConsoleTask+0x1c0>)
     696:	4798      	blx	r3
     698:	4b65      	ldr	r3, [pc, #404]	; (830 <vCommandConsoleTask+0x1c4>)
     69a:	6018      	str	r0, [r3, #0]
	if(cliCharReadySemaphore == NULL)
     69c:	2800      	cmp	r0, #0
     69e:	d106      	bne.n	6ae <vCommandConsoleTask+0x42>
		LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
     6a0:	4964      	ldr	r1, [pc, #400]	; (834 <vCommandConsoleTask+0x1c8>)
     6a2:	3003      	adds	r0, #3
     6a4:	4b64      	ldr	r3, [pc, #400]	; (838 <vCommandConsoleTask+0x1cc>)
     6a6:	4798      	blx	r3
		vTaskSuspend( NULL );
     6a8:	2000      	movs	r0, #0
     6aa:	4b64      	ldr	r3, [pc, #400]	; (83c <vCommandConsoleTask+0x1d0>)
     6ac:	4798      	blx	r3
            cInputIndex = 0;
     6ae:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
     6b0:	4b63      	ldr	r3, [pc, #396]	; (840 <vCommandConsoleTask+0x1d4>)
     6b2:	4699      	mov	r9, r3
	xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
     6b4:	4b5e      	ldr	r3, [pc, #376]	; (830 <vCommandConsoleTask+0x1c4>)
     6b6:	469a      	mov	sl, r3
     6b8:	e033      	b.n	722 <vCommandConsoleTask+0xb6>
     6ba:	2101      	movs	r1, #1
     6bc:	4249      	negs	r1, r1
     6be:	4653      	mov	r3, sl
     6c0:	6818      	ldr	r0, [r3, #0]
     6c2:	4b60      	ldr	r3, [pc, #384]	; (844 <vCommandConsoleTask+0x1d8>)
     6c4:	4798      	blx	r3
	SerialConsoleReadCharacter(character);
     6c6:	a801      	add	r0, sp, #4
     6c8:	4b5d      	ldr	r3, [pc, #372]	; (840 <vCommandConsoleTask+0x1d4>)
     6ca:	4798      	blx	r3
     6cc:	e02d      	b.n	72a <vCommandConsoleTask+0xbe>
            SerialConsoleWriteString("\r\n");
     6ce:	485e      	ldr	r0, [pc, #376]	; (848 <vCommandConsoleTask+0x1dc>)
     6d0:	4b55      	ldr	r3, [pc, #340]	; (828 <vCommandConsoleTask+0x1bc>)
     6d2:	4798      	blx	r3
			isEscapeCode = false; pcEscapeCodePos = 0;
     6d4:	2400      	movs	r4, #0
     6d6:	4b5d      	ldr	r3, [pc, #372]	; (84c <vCommandConsoleTask+0x1e0>)
     6d8:	701c      	strb	r4, [r3, #0]
     6da:	4b5d      	ldr	r3, [pc, #372]	; (850 <vCommandConsoleTask+0x1e4>)
     6dc:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
     6de:	4d5d      	ldr	r5, [pc, #372]	; (854 <vCommandConsoleTask+0x1e8>)
     6e0:	2231      	movs	r2, #49	; 0x31
     6e2:	495d      	ldr	r1, [pc, #372]	; (858 <vCommandConsoleTask+0x1ec>)
     6e4:	0028      	movs	r0, r5
     6e6:	4b5d      	ldr	r3, [pc, #372]	; (85c <vCommandConsoleTask+0x1f0>)
     6e8:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
     6ea:	2331      	movs	r3, #49	; 0x31
     6ec:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
     6ee:	4c5c      	ldr	r4, [pc, #368]	; (860 <vCommandConsoleTask+0x1f4>)
     6f0:	4e59      	ldr	r6, [pc, #356]	; (858 <vCommandConsoleTask+0x1ec>)
     6f2:	4f5c      	ldr	r7, [pc, #368]	; (864 <vCommandConsoleTask+0x1f8>)
     6f4:	2264      	movs	r2, #100	; 0x64
     6f6:	0021      	movs	r1, r4
     6f8:	0030      	movs	r0, r6
     6fa:	47b8      	blx	r7
     6fc:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
     6fe:	2200      	movs	r2, #0
     700:	2363      	movs	r3, #99	; 0x63
     702:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
     704:	0020      	movs	r0, r4
     706:	4b48      	ldr	r3, [pc, #288]	; (828 <vCommandConsoleTask+0x1bc>)
     708:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
     70a:	2d00      	cmp	r5, #0
     70c:	d1f2      	bne.n	6f4 <vCommandConsoleTask+0x88>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
     70e:	2232      	movs	r2, #50	; 0x32
     710:	2100      	movs	r1, #0
     712:	4851      	ldr	r0, [pc, #324]	; (858 <vCommandConsoleTask+0x1ec>)
     714:	4c54      	ldr	r4, [pc, #336]	; (868 <vCommandConsoleTask+0x1fc>)
     716:	47a0      	blx	r4
			memset( pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
     718:	2264      	movs	r2, #100	; 0x64
     71a:	2100      	movs	r1, #0
     71c:	4850      	ldr	r0, [pc, #320]	; (860 <vCommandConsoleTask+0x1f4>)
     71e:	47a0      	blx	r4
            cInputIndex = 0;
     720:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
     722:	a801      	add	r0, sp, #4
     724:	47c8      	blx	r9
if(ret == -1)
     726:	1c43      	adds	r3, r0, #1
     728:	d0c7      	beq.n	6ba <vCommandConsoleTask+0x4e>
	if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
     72a:	466b      	mov	r3, sp
     72c:	791b      	ldrb	r3, [r3, #4]
     72e:	2b0a      	cmp	r3, #10
     730:	d0cd      	beq.n	6ce <vCommandConsoleTask+0x62>
     732:	2b0d      	cmp	r3, #13
     734:	d0cb      	beq.n	6ce <vCommandConsoleTask+0x62>
			if (true == isEscapeCode) {
     736:	4a45      	ldr	r2, [pc, #276]	; (84c <vCommandConsoleTask+0x1e0>)
     738:	7812      	ldrb	r2, [r2, #0]
     73a:	2a00      	cmp	r2, #0
     73c:	d03f      	beq.n	7be <vCommandConsoleTask+0x152>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
     73e:	4a44      	ldr	r2, [pc, #272]	; (850 <vCommandConsoleTask+0x1e4>)
     740:	7812      	ldrb	r2, [r2, #0]
     742:	2a03      	cmp	r2, #3
     744:	d813      	bhi.n	76e <vCommandConsoleTask+0x102>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
     746:	1c51      	adds	r1, r2, #1
     748:	b2c9      	uxtb	r1, r1
     74a:	4841      	ldr	r0, [pc, #260]	; (850 <vCommandConsoleTask+0x1e4>)
     74c:	7001      	strb	r1, [r0, #0]
     74e:	4847      	ldr	r0, [pc, #284]	; (86c <vCommandConsoleTask+0x200>)
     750:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
     752:	2901      	cmp	r1, #1
     754:	d9e5      	bls.n	722 <vCommandConsoleTask+0xb6>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
     756:	4946      	ldr	r1, [pc, #280]	; (870 <vCommandConsoleTask+0x204>)
     758:	4844      	ldr	r0, [pc, #272]	; (86c <vCommandConsoleTask+0x200>)
     75a:	4b46      	ldr	r3, [pc, #280]	; (874 <vCommandConsoleTask+0x208>)
     75c:	4798      	blx	r3
     75e:	2800      	cmp	r0, #0
     760:	d10b      	bne.n	77a <vCommandConsoleTask+0x10e>
					isEscapeCode = false; pcEscapeCodePos = 0;
     762:	2300      	movs	r3, #0
     764:	4a39      	ldr	r2, [pc, #228]	; (84c <vCommandConsoleTask+0x1e0>)
     766:	7013      	strb	r3, [r2, #0]
     768:	4a39      	ldr	r2, [pc, #228]	; (850 <vCommandConsoleTask+0x1e4>)
     76a:	7013      	strb	r3, [r2, #0]
     76c:	e7d9      	b.n	722 <vCommandConsoleTask+0xb6>
					isEscapeCode = false; pcEscapeCodePos = 0;
     76e:	2300      	movs	r3, #0
     770:	4a36      	ldr	r2, [pc, #216]	; (84c <vCommandConsoleTask+0x1e0>)
     772:	7013      	strb	r3, [r2, #0]
     774:	4a36      	ldr	r2, [pc, #216]	; (850 <vCommandConsoleTask+0x1e4>)
     776:	7013      	strb	r3, [r2, #0]
     778:	e7d3      	b.n	722 <vCommandConsoleTask+0xb6>
                            sprintf(pcInputString, "%c[2K\r>", 27);
     77a:	4c37      	ldr	r4, [pc, #220]	; (858 <vCommandConsoleTask+0x1ec>)
     77c:	221b      	movs	r2, #27
     77e:	493e      	ldr	r1, [pc, #248]	; (878 <vCommandConsoleTask+0x20c>)
     780:	0020      	movs	r0, r4
     782:	4b3e      	ldr	r3, [pc, #248]	; (87c <vCommandConsoleTask+0x210>)
     784:	4798      	blx	r3
				            SerialConsoleWriteString((char*)pcInputString);
     786:	0020      	movs	r0, r4
     788:	4b27      	ldr	r3, [pc, #156]	; (828 <vCommandConsoleTask+0x1bc>)
     78a:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
     78c:	2232      	movs	r2, #50	; 0x32
     78e:	2100      	movs	r1, #0
     790:	0020      	movs	r0, r4
     792:	4b35      	ldr	r3, [pc, #212]	; (868 <vCommandConsoleTask+0x1fc>)
     794:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
     796:	2231      	movs	r2, #49	; 0x31
     798:	492e      	ldr	r1, [pc, #184]	; (854 <vCommandConsoleTask+0x1e8>)
     79a:	0020      	movs	r0, r4
     79c:	4b2f      	ldr	r3, [pc, #188]	; (85c <vCommandConsoleTask+0x1f0>)
     79e:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
     7a0:	0020      	movs	r0, r4
     7a2:	4b37      	ldr	r3, [pc, #220]	; (880 <vCommandConsoleTask+0x214>)
     7a4:	4798      	blx	r3
     7a6:	2431      	movs	r4, #49	; 0x31
     7a8:	2830      	cmp	r0, #48	; 0x30
     7aa:	d803      	bhi.n	7b4 <vCommandConsoleTask+0x148>
     7ac:	4829      	ldr	r0, [pc, #164]	; (854 <vCommandConsoleTask+0x1e8>)
     7ae:	4b34      	ldr	r3, [pc, #208]	; (880 <vCommandConsoleTask+0x214>)
     7b0:	4798      	blx	r3
     7b2:	0004      	movs	r4, r0
     7b4:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
     7b6:	4828      	ldr	r0, [pc, #160]	; (858 <vCommandConsoleTask+0x1ec>)
     7b8:	4b1b      	ldr	r3, [pc, #108]	; (828 <vCommandConsoleTask+0x1bc>)
     7ba:	4798      	blx	r3
     7bc:	e7d1      	b.n	762 <vCommandConsoleTask+0xf6>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
     7be:	2b08      	cmp	r3, #8
     7c0:	d010      	beq.n	7e4 <vCommandConsoleTask+0x178>
     7c2:	2b7f      	cmp	r3, #127	; 0x7f
     7c4:	d00e      	beq.n	7e4 <vCommandConsoleTask+0x178>
			else if( cRxedChar[0] == ASCII_ESC) {
     7c6:	2b1b      	cmp	r3, #27
     7c8:	d01a      	beq.n	800 <vCommandConsoleTask+0x194>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
     7ca:	2c31      	cmp	r4, #49	; 0x31
     7cc:	d803      	bhi.n	7d6 <vCommandConsoleTask+0x16a>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
     7ce:	4a22      	ldr	r2, [pc, #136]	; (858 <vCommandConsoleTask+0x1ec>)
     7d0:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
     7d2:	3401      	adds	r4, #1
     7d4:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
     7d6:	2300      	movs	r3, #0
     7d8:	466a      	mov	r2, sp
     7da:	7153      	strb	r3, [r2, #5]
					SerialConsoleWriteString(&cRxedChar[0]);
     7dc:	a801      	add	r0, sp, #4
     7de:	4b12      	ldr	r3, [pc, #72]	; (828 <vCommandConsoleTask+0x1bc>)
     7e0:	4798      	blx	r3
     7e2:	e79e      	b.n	722 <vCommandConsoleTask+0xb6>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
     7e4:	4b27      	ldr	r3, [pc, #156]	; (884 <vCommandConsoleTask+0x218>)
     7e6:	681b      	ldr	r3, [r3, #0]
     7e8:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
     7ea:	4668      	mov	r0, sp
     7ec:	4b0e      	ldr	r3, [pc, #56]	; (828 <vCommandConsoleTask+0x1bc>)
     7ee:	4798      	blx	r3
                if( cInputIndex > 0 )
     7f0:	2c00      	cmp	r4, #0
     7f2:	d096      	beq.n	722 <vCommandConsoleTask+0xb6>
                    cInputIndex--;
     7f4:	3c01      	subs	r4, #1
     7f6:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
     7f8:	2200      	movs	r2, #0
     7fa:	4b17      	ldr	r3, [pc, #92]	; (858 <vCommandConsoleTask+0x1ec>)
     7fc:	551a      	strb	r2, [r3, r4]
            {
     7fe:	e790      	b.n	722 <vCommandConsoleTask+0xb6>
				isEscapeCode = true; //Next characters will be code arguments
     800:	2201      	movs	r2, #1
     802:	4b12      	ldr	r3, [pc, #72]	; (84c <vCommandConsoleTask+0x1e0>)
     804:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
     806:	2200      	movs	r2, #0
     808:	4b11      	ldr	r3, [pc, #68]	; (850 <vCommandConsoleTask+0x1e4>)
     80a:	701a      	strb	r2, [r3, #0]
     80c:	e789      	b.n	722 <vCommandConsoleTask+0xb6>
     80e:	46c0      	nop			; (mov r8, r8)
     810:	000098d0 	.word	0x000098d0
     814:	00001b15 	.word	0x00001b15
     818:	000098b8 	.word	0x000098b8
     81c:	000098f0 	.word	0x000098f0
     820:	000098e0 	.word	0x000098e0
     824:	00009848 	.word	0x00009848
     828:	0000574d 	.word	0x0000574d
     82c:	00003369 	.word	0x00003369
     830:	20003864 	.word	0x20003864
<<<<<<< Updated upstream
     834:	0000986c 	.word	0x0000986c
     838:	000057dd 	.word	0x000057dd
     83c:	00004aa9 	.word	0x00004aa9
     840:	000057b1 	.word	0x000057b1
     844:	00003e2d 	.word	0x00003e2d
<<<<<<< HEAD
     848:	0000aa50 	.word	0x0000aa50
=======
     834:	0000988c 	.word	0x0000988c
     838:	000057fd 	.word	0x000057fd
     83c:	00004ac9 	.word	0x00004ac9
     840:	000057d1 	.word	0x000057d1
     844:	00003e4d 	.word	0x00003e4d
     848:	0000aa80 	.word	0x0000aa80
>>>>>>> Stashed changes
=======
     848:	0000aa54 	.word	0x0000aa54
>>>>>>> parent of 79ffb95 (comment)
     84c:	2000023e 	.word	0x2000023e
     850:	2000023f 	.word	0x2000023f
     854:	20000278 	.word	0x20000278
     858:	20000244 	.word	0x20000244
     85c:	00008fcd 	.word	0x00008fcd
     860:	200002ac 	.word	0x200002ac
     864:	00001b59 	.word	0x00001b59
     868:	00008d33 	.word	0x00008d33
     86c:	20000240 	.word	0x20000240
     870:	000098ac 	.word	0x000098ac
     874:	00008f61 	.word	0x00008f61
     878:	000098b0 	.word	0x000098b0
     87c:	00008f1d 	.word	0x00008f1d
     880:	00008f9d 	.word	0x00008f9d
     884:	00009734 	.word	0x00009734

00000888 <CliCharReadySemaphoreGiveFromISR>:
{
     888:	b510      	push	{r4, lr}
	xHigherPriorityTaskWoken = pdFALSE;
     88a:	4c08      	ldr	r4, [pc, #32]	; (8ac <CliCharReadySemaphoreGiveFromISR+0x24>)
     88c:	2300      	movs	r3, #0
     88e:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR( cliCharReadySemaphore, &xHigherPriorityTaskWoken );
     890:	4b07      	ldr	r3, [pc, #28]	; (8b0 <CliCharReadySemaphoreGiveFromISR+0x28>)
     892:	6818      	ldr	r0, [r3, #0]
     894:	0021      	movs	r1, r4
     896:	4b07      	ldr	r3, [pc, #28]	; (8b4 <CliCharReadySemaphoreGiveFromISR+0x2c>)
     898:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     89a:	6823      	ldr	r3, [r4, #0]
     89c:	2b00      	cmp	r3, #0
     89e:	d003      	beq.n	8a8 <CliCharReadySemaphoreGiveFromISR+0x20>
     8a0:	2280      	movs	r2, #128	; 0x80
     8a2:	0552      	lsls	r2, r2, #21
     8a4:	4b04      	ldr	r3, [pc, #16]	; (8b8 <CliCharReadySemaphoreGiveFromISR+0x30>)
     8a6:	601a      	str	r2, [r3, #0]
}
     8a8:	bd10      	pop	{r4, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	20000310 	.word	0x20000310
     8b0:	20003864 	.word	0x20003864
     8b4:	00003b31 	.word	0x00003b31
     8b8:	e000ed04 	.word	0xe000ed04

000008bc <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
     8bc:	b510      	push	{r4, lr}
     8be:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
     8c0:	4b0a      	ldr	r3, [pc, #40]	; (8ec <I2cSensorsTxComplete+0x30>)
     8c2:	2400      	movs	r4, #0
     8c4:	701c      	strb	r4, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;			
     8c6:	2201      	movs	r2, #1
     8c8:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     8ca:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     8cc:	4b08      	ldr	r3, [pc, #32]	; (8f0 <I2cSensorsTxComplete+0x34>)
     8ce:	6818      	ldr	r0, [r3, #0]
     8d0:	a901      	add	r1, sp, #4
     8d2:	4b08      	ldr	r3, [pc, #32]	; (8f4 <I2cSensorsTxComplete+0x38>)
     8d4:	4798      	blx	r3
	sensorTransmitError = false;
     8d6:	4b08      	ldr	r3, [pc, #32]	; (8f8 <I2cSensorsTxComplete+0x3c>)
     8d8:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     8da:	9b01      	ldr	r3, [sp, #4]
     8dc:	2b00      	cmp	r3, #0
     8de:	d003      	beq.n	8e8 <I2cSensorsTxComplete+0x2c>
     8e0:	2280      	movs	r2, #128	; 0x80
     8e2:	0552      	lsls	r2, r2, #21
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <I2cSensorsTxComplete+0x40>)
     8e6:	601a      	str	r2, [r3, #0]
}
     8e8:	b002      	add	sp, #8
     8ea:	bd10      	pop	{r4, pc}
     8ec:	20000314 	.word	0x20000314
     8f0:	20003894 	.word	0x20003894
     8f4:	00003b31 	.word	0x00003b31
     8f8:	20000328 	.word	0x20000328
     8fc:	e000ed04 	.word	0xe000ed04

00000900 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
     900:	b510      	push	{r4, lr}
     902:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
     904:	4b0a      	ldr	r3, [pc, #40]	; (930 <I2cSensorsRxComplete+0x30>)
     906:	2400      	movs	r4, #0
     908:	701c      	strb	r4, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;
     90a:	2201      	movs	r2, #1
     90c:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     90e:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     910:	4b08      	ldr	r3, [pc, #32]	; (934 <I2cSensorsRxComplete+0x34>)
     912:	6818      	ldr	r0, [r3, #0]
     914:	a901      	add	r1, sp, #4
     916:	4b08      	ldr	r3, [pc, #32]	; (938 <I2cSensorsRxComplete+0x38>)
     918:	4798      	blx	r3
	sensorTransmitError = false;
     91a:	4b08      	ldr	r3, [pc, #32]	; (93c <I2cSensorsRxComplete+0x3c>)
     91c:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     91e:	9b01      	ldr	r3, [sp, #4]
     920:	2b00      	cmp	r3, #0
     922:	d003      	beq.n	92c <I2cSensorsRxComplete+0x2c>
     924:	2280      	movs	r2, #128	; 0x80
     926:	0552      	lsls	r2, r2, #21
     928:	4b05      	ldr	r3, [pc, #20]	; (940 <I2cSensorsRxComplete+0x40>)
     92a:	601a      	str	r2, [r3, #0]
}
     92c:	b002      	add	sp, #8
     92e:	bd10      	pop	{r4, pc}
     930:	20000314 	.word	0x20000314
     934:	20003894 	.word	0x20003894
     938:	00003b31 	.word	0x00003b31
     93c:	20000328 	.word	0x20000328
     940:	e000ed04 	.word	0xe000ed04

00000944 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
     944:	b510      	push	{r4, lr}
     946:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
     948:	4b0a      	ldr	r3, [pc, #40]	; (974 <I2cSensorsError+0x30>)
     94a:	2400      	movs	r4, #0
     94c:	701c      	strb	r4, [r3, #0]
	I2cSensorBusState.txDoneFlag = true;
     94e:	2201      	movs	r2, #1
     950:	605a      	str	r2, [r3, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     952:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     954:	4b08      	ldr	r3, [pc, #32]	; (978 <I2cSensorsError+0x34>)
     956:	6818      	ldr	r0, [r3, #0]
     958:	a901      	add	r1, sp, #4
     95a:	4b08      	ldr	r3, [pc, #32]	; (97c <I2cSensorsError+0x38>)
     95c:	4798      	blx	r3
	sensorTransmitError = false;
     95e:	4b08      	ldr	r3, [pc, #32]	; (980 <I2cSensorsError+0x3c>)
     960:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     962:	9b01      	ldr	r3, [sp, #4]
     964:	2b00      	cmp	r3, #0
     966:	d003      	beq.n	970 <I2cSensorsError+0x2c>
     968:	2280      	movs	r2, #128	; 0x80
     96a:	0552      	lsls	r2, r2, #21
     96c:	4b05      	ldr	r3, [pc, #20]	; (984 <I2cSensorsError+0x40>)
     96e:	601a      	str	r2, [r3, #0]
}
     970:	b002      	add	sp, #8
     972:	bd10      	pop	{r4, pc}
     974:	20000314 	.word	0x20000314
     978:	20003894 	.word	0x20003894
     97c:	00003b31 	.word	0x00003b31
     980:	20000328 	.word	0x20000328
     984:	e000ed04 	.word	0xe000ed04

00000988 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
     988:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
     98a:	4c0c      	ldr	r4, [pc, #48]	; (9bc <I2cDriverRegisterSensorBusCallbacks+0x34>)
     98c:	2200      	movs	r2, #0
     98e:	490c      	ldr	r1, [pc, #48]	; (9c0 <I2cDriverRegisterSensorBusCallbacks+0x38>)
     990:	0020      	movs	r0, r4
     992:	4d0c      	ldr	r5, [pc, #48]	; (9c4 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
     994:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     996:	7e63      	ldrb	r3, [r4, #25]
     998:	2201      	movs	r2, #1
     99a:	4313      	orrs	r3, r2
     99c:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
     99e:	490a      	ldr	r1, [pc, #40]	; (9c8 <I2cDriverRegisterSensorBusCallbacks+0x40>)
     9a0:	0020      	movs	r0, r4
     9a2:	47a8      	blx	r5
     9a4:	7e63      	ldrb	r3, [r4, #25]
     9a6:	2202      	movs	r2, #2
     9a8:	4313      	orrs	r3, r2
     9aa:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
     9ac:	4907      	ldr	r1, [pc, #28]	; (9cc <I2cDriverRegisterSensorBusCallbacks+0x44>)
     9ae:	0020      	movs	r0, r4
     9b0:	47a8      	blx	r5
     9b2:	7e63      	ldrb	r3, [r4, #25]
     9b4:	2204      	movs	r2, #4
     9b6:	4313      	orrs	r3, r2
     9b8:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
     9ba:	bd70      	pop	{r4, r5, r6, pc}
     9bc:	2000386c 	.word	0x2000386c
     9c0:	000008bd 	.word	0x000008bd
     9c4:	00000315 	.word	0x00000315
     9c8:	00000901 	.word	0x00000901
     9cc:	00000945 	.word	0x00000945

000009d0 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
     9d0:	b570      	push	{r4, r5, r6, lr}
     9d2:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     9d4:	ab01      	add	r3, sp, #4
     9d6:	2264      	movs	r2, #100	; 0x64
     9d8:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     9da:	4a33      	ldr	r2, [pc, #204]	; (aa8 <I2cInitializeDriver+0xd8>)
     9dc:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     9de:	2200      	movs	r2, #0
     9e0:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     9e2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     9e4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     9e6:	2180      	movs	r1, #128	; 0x80
     9e8:	0389      	lsls	r1, r1, #14
     9ea:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     9ec:	2101      	movs	r1, #1
     9ee:	4249      	negs	r1, r1
     9f0:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     9f2:	3125      	adds	r1, #37	; 0x25
     9f4:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     9f6:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     9f8:	3108      	adds	r1, #8
     9fa:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     9fc:	3101      	adds	r1, #1
     9fe:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
     a00:	3101      	adds	r1, #1
     a02:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     a04:	32d7      	adds	r2, #215	; 0xd7
     a06:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
     a08:	4a28      	ldr	r2, [pc, #160]	; (aac <I2cInitializeDriver+0xdc>)
     a0a:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     a0c:	4a28      	ldr	r2, [pc, #160]	; (ab0 <I2cInitializeDriver+0xe0>)
     a0e:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
     a10:	22fa      	movs	r2, #250	; 0xfa
     a12:	0092      	lsls	r2, r2, #2
     a14:	82da      	strh	r2, [r3, #22]
     a16:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
     a18:	4d26      	ldr	r5, [pc, #152]	; (ab4 <I2cInitializeDriver+0xe4>)
     a1a:	4e27      	ldr	r6, [pc, #156]	; (ab8 <I2cInitializeDriver+0xe8>)
     a1c:	aa01      	add	r2, sp, #4
     a1e:	4927      	ldr	r1, [pc, #156]	; (abc <I2cInitializeDriver+0xec>)
     a20:	0028      	movs	r0, r5
     a22:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
     a24:	2800      	cmp	r0, #0
     a26:	d006      	beq.n	a36 <I2cInitializeDriver+0x66>
			i2c_master_reset(&i2cSensorBusInstance);
     a28:	4822      	ldr	r0, [pc, #136]	; (ab4 <I2cInitializeDriver+0xe4>)
     a2a:	4b25      	ldr	r3, [pc, #148]	; (ac0 <I2cInitializeDriver+0xf0>)
     a2c:	4798      	blx	r3
     a2e:	3c01      	subs	r4, #1
     a30:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
     a32:	2c00      	cmp	r4, #0
     a34:	d1f2      	bne.n	a1c <I2cInitializeDriver+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     a36:	4b1f      	ldr	r3, [pc, #124]	; (ab4 <I2cInitializeDriver+0xe4>)
     a38:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     a3a:	2207      	movs	r2, #7
     a3c:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     a3e:	421a      	tst	r2, r3
     a40:	d1fc      	bne.n	a3c <I2cInitializeDriver+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     a42:	6823      	ldr	r3, [r4, #0]
     a44:	2202      	movs	r2, #2
     a46:	4313      	orrs	r3, r2
     a48:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     a4a:	4d1a      	ldr	r5, [pc, #104]	; (ab4 <I2cInitializeDriver+0xe4>)
     a4c:	6828      	ldr	r0, [r5, #0]
     a4e:	4b1d      	ldr	r3, [pc, #116]	; (ac4 <I2cInitializeDriver+0xf4>)
     a50:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a52:	231f      	movs	r3, #31
     a54:	4018      	ands	r0, r3
     a56:	3b1e      	subs	r3, #30
     a58:	4083      	lsls	r3, r0
     a5a:	4a1b      	ldr	r2, [pc, #108]	; (ac8 <I2cInitializeDriver+0xf8>)
     a5c:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     a5e:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     a60:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     a62:	2110      	movs	r1, #16
     a64:	8b62      	ldrh	r2, [r4, #26]
     a66:	420a      	tst	r2, r1
     a68:	d104      	bne.n	a74 <I2cInitializeDriver+0xa4>
		timeout_counter++;
     a6a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     a6c:	4283      	cmp	r3, r0
     a6e:	d3f9      	bcc.n	a64 <I2cInitializeDriver+0x94>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     a70:	2310      	movs	r3, #16
     a72:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
     a74:	4b15      	ldr	r3, [pc, #84]	; (acc <I2cInitializeDriver+0xfc>)
     a76:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
     a78:	2001      	movs	r0, #1
     a7a:	4b15      	ldr	r3, [pc, #84]	; (ad0 <I2cInitializeDriver+0x100>)
     a7c:	4798      	blx	r3
     a7e:	4c15      	ldr	r4, [pc, #84]	; (ad4 <I2cInitializeDriver+0x104>)
     a80:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
     a82:	2203      	movs	r2, #3
     a84:	2100      	movs	r1, #0
     a86:	2001      	movs	r0, #1
     a88:	4b13      	ldr	r3, [pc, #76]	; (ad8 <I2cInitializeDriver+0x108>)
     a8a:	4798      	blx	r3
     a8c:	4b13      	ldr	r3, [pc, #76]	; (adc <I2cInitializeDriver+0x10c>)
     a8e:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
     a90:	6823      	ldr	r3, [r4, #0]
     a92:	2b00      	cmp	r3, #0
     a94:	d004      	beq.n	aa0 <I2cInitializeDriver+0xd0>
	error = I2cDriverConfigureSensorBus();
     a96:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
     a98:	2800      	cmp	r0, #0
     a9a:	d102      	bne.n	aa2 <I2cInitializeDriver+0xd2>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
     a9c:	3306      	adds	r3, #6
     a9e:	e000      	b.n	aa2 <I2cInitializeDriver+0xd2>
     aa0:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
     aa2:	0018      	movs	r0, r3
     aa4:	b00e      	add	sp, #56	; 0x38
     aa6:	bd70      	pop	{r4, r5, r6, pc}
     aa8:	00000d48 	.word	0x00000d48
     aac:	00080002 	.word	0x00080002
     ab0:	00090002 	.word	0x00090002
     ab4:	2000386c 	.word	0x2000386c
     ab8:	0000165d 	.word	0x0000165d
     abc:	42000800 	.word	0x42000800
     ac0:	00001955 	.word	0x00001955
     ac4:	00005dd9 	.word	0x00005dd9
     ac8:	e000e100 	.word	0xe000e100
     acc:	00000989 	.word	0x00000989
     ad0:	000037cd 	.word	0x000037cd
     ad4:	20003868 	.word	0x20003868
     ad8:	00003369 	.word	0x00003369
     adc:	20003894 	.word	0x20003894

00000ae0 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
     ae0:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
     ae2:	2800      	cmp	r0, #0
     ae4:	d012      	beq.n	b0c <I2cWriteData+0x2c>
     ae6:	6843      	ldr	r3, [r0, #4]
     ae8:	2b00      	cmp	r3, #0
     aea:	d012      	beq.n	b12 <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
     aec:	490a      	ldr	r1, [pc, #40]	; (b18 <I2cWriteData+0x38>)
     aee:	7802      	ldrb	r2, [r0, #0]
     af0:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
     af2:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
     af4:	89c3      	ldrh	r3, [r0, #14]
     af6:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
     af8:	4808      	ldr	r0, [pc, #32]	; (b1c <I2cWriteData+0x3c>)
     afa:	4b09      	ldr	r3, [pc, #36]	; (b20 <I2cWriteData+0x40>)
     afc:	4798      	blx	r3
	int32_t error = ERROR_NONE;
     afe:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
     b00:	2800      	cmp	r0, #0
     b02:	d101      	bne.n	b08 <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
     b04:	0018      	movs	r0, r3
     b06:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
     b08:	3b06      	subs	r3, #6
     b0a:	e7fb      	b.n	b04 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
     b0c:	2308      	movs	r3, #8
     b0e:	425b      	negs	r3, r3
     b10:	e7f8      	b.n	b04 <I2cWriteData+0x24>
     b12:	2308      	movs	r3, #8
     b14:	425b      	negs	r3, r3
     b16:	e7f5      	b.n	b04 <I2cWriteData+0x24>
     b18:	200038d8 	.word	0x200038d8
     b1c:	2000386c 	.word	0x2000386c
     b20:	00000351 	.word	0x00000351

00000b24 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
     b24:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
     b26:	2800      	cmp	r0, #0
     b28:	d013      	beq.n	b52 <I2cReadData+0x2e>
     b2a:	6843      	ldr	r3, [r0, #4]
     b2c:	2b00      	cmp	r3, #0
     b2e:	d013      	beq.n	b58 <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
     b30:	490b      	ldr	r1, [pc, #44]	; (b60 <I2cReadData+0x3c>)
     b32:	7803      	ldrb	r3, [r0, #0]
     b34:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
     b36:	6883      	ldr	r3, [r0, #8]
     b38:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
     b3a:	8983      	ldrh	r3, [r0, #12]
     b3c:	804b      	strh	r3, [r1, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
     b3e:	4809      	ldr	r0, [pc, #36]	; (b64 <I2cReadData+0x40>)
     b40:	4b09      	ldr	r3, [pc, #36]	; (b68 <I2cReadData+0x44>)
     b42:	4798      	blx	r3
	int32_t error = ERROR_NONE;
     b44:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
     b46:	2800      	cmp	r0, #0
     b48:	d101      	bne.n	b4e <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
     b4a:	0018      	movs	r0, r3
     b4c:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
     b4e:	3b06      	subs	r3, #6
     b50:	e7fb      	b.n	b4a <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
     b52:	2308      	movs	r3, #8
     b54:	425b      	negs	r3, r3
     b56:	e7f8      	b.n	b4a <I2cReadData+0x26>
     b58:	2308      	movs	r3, #8
     b5a:	425b      	negs	r3, r3
     b5c:	e7f5      	b.n	b4a <I2cReadData+0x26>
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	200038d8 	.word	0x200038d8
     b64:	2000386c 	.word	0x2000386c
     b68:	0000032d 	.word	0x0000032d

00000b6c <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
     b6c:	b570      	push	{r4, r5, r6, lr}
	
	int32_t error = ERROR_NONE;
	
	//students to fill out. Check what the function has to return
	
	if(I2cSensorBusState.i2cState == I2C_BUS_READY)
     b6e:	4b0d      	ldr	r3, [pc, #52]	; (ba4 <I2cFreeMutex+0x38>)
     b70:	781b      	ldrb	r3, [r3, #0]
     b72:	2b00      	cmp	r3, #0
     b74:	d112      	bne.n	b9c <I2cFreeMutex+0x30>
	{
		if(xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
     b76:	4b0c      	ldr	r3, [pc, #48]	; (ba8 <I2cFreeMutex+0x3c>)
     b78:	6818      	ldr	r0, [r3, #0]
     b7a:	2300      	movs	r3, #0
     b7c:	2200      	movs	r2, #0
     b7e:	2100      	movs	r1, #0
     b80:	4c0a      	ldr	r4, [pc, #40]	; (bac <I2cFreeMutex+0x40>)
     b82:	47a0      	blx	r4
	int32_t error = ERROR_NONE;
     b84:	2400      	movs	r4, #0
		if(xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE)
     b86:	2801      	cmp	r0, #1
     b88:	d101      	bne.n	b8e <I2cFreeMutex+0x22>
		error = ERROR_NOT_INITIALIZED;
	}
	//SerialConsoleWriteString("hello");
	//SerialConsoleWriteString(error);
	return error;
}
     b8a:	0020      	movs	r0, r4
     b8c:	bd70      	pop	{r4, r5, r6, pc}
			SerialConsoleWriteString("failed in semaphoregive");
     b8e:	4808      	ldr	r0, [pc, #32]	; (bb0 <I2cFreeMutex+0x44>)
     b90:	4d08      	ldr	r5, [pc, #32]	; (bb4 <I2cFreeMutex+0x48>)
     b92:	47a8      	blx	r5
			SerialConsoleWriteString(error);
     b94:	3c1e      	subs	r4, #30
     b96:	0020      	movs	r0, r4
     b98:	47a8      	blx	r5
     b9a:	e7f6      	b.n	b8a <I2cFreeMutex+0x1e>
		error = ERROR_NOT_INITIALIZED;
     b9c:	2414      	movs	r4, #20
     b9e:	4264      	negs	r4, r4
     ba0:	e7f3      	b.n	b8a <I2cFreeMutex+0x1e>
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	20000314 	.word	0x20000314
     ba8:	20003868 	.word	0x20003868
     bac:	000034a5 	.word	0x000034a5
     bb0:	00009900 	.word	0x00009900
     bb4:	0000574d 	.word	0x0000574d

00000bb8 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
     bb8:	b510      	push	{r4, lr}
	
	int32_t error = ERROR_NONE;
	
	//students to fill out. Check what the function has to return
	
	if(xSemaphoreTake(sensorI2cMutexHandle, portMAX_DELAY) != pdTRUE)
     bba:	4b06      	ldr	r3, [pc, #24]	; (bd4 <I2cGetMutex+0x1c>)
     bbc:	6818      	ldr	r0, [r3, #0]
     bbe:	2101      	movs	r1, #1
     bc0:	4249      	negs	r1, r1
     bc2:	4b05      	ldr	r3, [pc, #20]	; (bd8 <I2cGetMutex+0x20>)
     bc4:	4798      	blx	r3
	int32_t error = ERROR_NONE;
     bc6:	2300      	movs	r3, #0
	if(xSemaphoreTake(sensorI2cMutexHandle, portMAX_DELAY) != pdTRUE)
     bc8:	2801      	cmp	r0, #1
     bca:	d101      	bne.n	bd0 <I2cGetMutex+0x18>
	{
		error = ERROR_NOT_READY;
	}
	
	return error;
}
     bcc:	0018      	movs	r0, r3
     bce:	bd10      	pop	{r4, pc}
		error = ERROR_NOT_READY;
     bd0:	3b1d      	subs	r3, #29
     bd2:	e7fb      	b.n	bcc <I2cGetMutex+0x14>
     bd4:	20003868 	.word	0x20003868
     bd8:	00003e4d 	.word	0x00003e4d

00000bdc <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
     bdc:	b570      	push	{r4, r5, r6, lr}
     bde:	0005      	movs	r5, r0
     be0:	000c      	movs	r4, r1
int32_t error = ERROR_NONE;
SemaphoreHandle_t semHandle = NULL;


//---0. Get Mutex
error = I2cGetMutex(xMaxBlockTime); //Students to fill out
     be2:	0008      	movs	r0, r1
     be4:	4b0f      	ldr	r3, [pc, #60]	; (c24 <I2cWriteDataWait+0x48>)
     be6:	4798      	blx	r3
if(ERROR_NONE != error) goto exit;
     be8:	2800      	cmp	r0, #0
     bea:	d000      	beq.n	bee <I2cWriteDataWait+0x12>
exitError0:
error = I2cFreeMutex();

return error;

}
     bec:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorI2cSemaphoreHandle;
     bee:	4b0e      	ldr	r3, [pc, #56]	; (c28 <I2cWriteDataWait+0x4c>)
     bf0:	681e      	ldr	r6, [r3, #0]
error = I2cWriteData(data);
     bf2:	0028      	movs	r0, r5
     bf4:	4b0d      	ldr	r3, [pc, #52]	; (c2c <I2cWriteDataWait+0x50>)
     bf6:	4798      	blx	r3
if (ERROR_NONE != error){
     bf8:	2800      	cmp	r0, #0
     bfa:	d105      	bne.n	c08 <I2cWriteDataWait+0x2c>
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
     bfc:	0021      	movs	r1, r4
     bfe:	0030      	movs	r0, r6
     c00:	4b0b      	ldr	r3, [pc, #44]	; (c30 <I2cWriteDataWait+0x54>)
     c02:	4798      	blx	r3
     c04:	2801      	cmp	r0, #1
     c06:	d002      	beq.n	c0e <I2cWriteDataWait+0x32>
error = I2cFreeMutex();
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <I2cWriteDataWait+0x58>)
     c0a:	4798      	blx	r3
return error;
     c0c:	e7ee      	b.n	bec <I2cWriteDataWait+0x10>
	 return sensorTransmitError;
     c0e:	4b0a      	ldr	r3, [pc, #40]	; (c38 <I2cWriteDataWait+0x5c>)
	if(I2cGetTaskErrorStatus()){
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	2b00      	cmp	r3, #0
     c14:	d003      	beq.n	c1e <I2cWriteDataWait+0x42>
	sensorTransmitError = value;
     c16:	2200      	movs	r2, #0
     c18:	4b07      	ldr	r3, [pc, #28]	; (c38 <I2cWriteDataWait+0x5c>)
     c1a:	701a      	strb	r2, [r3, #0]
     c1c:	e7f4      	b.n	c08 <I2cWriteDataWait+0x2c>
error |= I2cFreeMutex();
     c1e:	4b05      	ldr	r3, [pc, #20]	; (c34 <I2cWriteDataWait+0x58>)
     c20:	4798      	blx	r3
     c22:	e7e3      	b.n	bec <I2cWriteDataWait+0x10>
     c24:	00000bb9 	.word	0x00000bb9
     c28:	20003894 	.word	0x20003894
     c2c:	00000ae1 	.word	0x00000ae1
     c30:	00003e4d 	.word	0x00003e4d
     c34:	00000b6d 	.word	0x00000b6d
     c38:	20000328 	.word	0x20000328

00000c3c <I2cReadDataWait>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
char checker[64];
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
<<<<<<< Updated upstream
     c28:	b570      	push	{r4, r5, r6, lr}
<<<<<<< HEAD
     c2a:	0005      	movs	r5, r0
     c2c:	0014      	movs	r4, r2
=======
     c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c3e:	b083      	sub	sp, #12
     c40:	9001      	str	r0, [sp, #4]
     c42:	0016      	movs	r6, r2
>>>>>>> Stashed changes
=======
     c2a:	0006      	movs	r6, r0
     c2c:	0015      	movs	r5, r2
>>>>>>> parent of 79ffb95 (comment)
	SemaphoreHandle_t semHandle = NULL;
	
	//STUDENTS FILL

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
<<<<<<< Updated upstream
     c2e:	0010      	movs	r0, r2
     c30:	4b13      	ldr	r3, [pc, #76]	; (c80 <I2cReadDataWait+0x58>)
     c32:	4798      	blx	r3
     c34:	1e04      	subs	r4, r0, #0
	if(ERROR_NONE != error)
<<<<<<< HEAD
     c34:	2800      	cmp	r0, #0
     c36:	d000      	beq.n	c3a <I2cReadDataWait+0x12>
=======
     c44:	0010      	movs	r0, r2
     c46:	4b17      	ldr	r3, [pc, #92]	; (ca4 <I2cReadDataWait+0x68>)
     c48:	4798      	blx	r3
     c4a:	0004      	movs	r4, r0
	snprintf(checker, 64, "Our error in I2cReadDataWrite is: %d\r\n", error);
     c4c:	4d16      	ldr	r5, [pc, #88]	; (ca8 <I2cReadDataWait+0x6c>)
     c4e:	0003      	movs	r3, r0
     c50:	4a16      	ldr	r2, [pc, #88]	; (cac <I2cReadDataWait+0x70>)
     c52:	2140      	movs	r1, #64	; 0x40
     c54:	0028      	movs	r0, r5
     c56:	4f16      	ldr	r7, [pc, #88]	; (cb0 <I2cReadDataWait+0x74>)
     c58:	47b8      	blx	r7
	SerialConsoleWriteString(checker);
     c5a:	0028      	movs	r0, r5
     c5c:	4b15      	ldr	r3, [pc, #84]	; (cb4 <I2cReadDataWait+0x78>)
     c5e:	4798      	blx	r3

	if(ERROR_NONE != error)
     c60:	2c00      	cmp	r4, #0
     c62:	d002      	beq.n	c6a <I2cReadDataWait+0x2e>
>>>>>>> Stashed changes
=======
     c36:	d001      	beq.n	c3c <I2cReadDataWait+0x14>
>>>>>>> parent of 79ffb95 (comment)
	return error;

	exitError0:
	error = I2cFreeMutex();
	return error;
}
<<<<<<< HEAD
<<<<<<< Updated upstream
     c38:	bd70      	pop	{r4, r5, r6, pc}
=======
     c38:	0020      	movs	r0, r4
     c3a:	bd70      	pop	{r4, r5, r6, pc}
>>>>>>> parent of 79ffb95 (comment)
	*handle = sensorI2cSemaphoreHandle;
     c3c:	4b11      	ldr	r3, [pc, #68]	; (c84 <I2cReadDataWait+0x5c>)
     c3e:	681c      	ldr	r4, [r3, #0]
	error = I2cReadData(data);
     c40:	0030      	movs	r0, r6
     c42:	4b11      	ldr	r3, [pc, #68]	; (c88 <I2cReadDataWait+0x60>)
     c44:	4798      	blx	r3
	if (ERROR_NONE != error)
     c46:	2800      	cmp	r0, #0
     c48:	d105      	bne.n	c56 <I2cReadDataWait+0x2e>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
     c4a:	0029      	movs	r1, r5
     c4c:	0020      	movs	r0, r4
     c4e:	4b0f      	ldr	r3, [pc, #60]	; (c8c <I2cReadDataWait+0x64>)
     c50:	4798      	blx	r3
     c52:	2801      	cmp	r0, #1
     c54:	d003      	beq.n	c5e <I2cReadDataWait+0x36>
	error = I2cFreeMutex();
     c56:	4b0e      	ldr	r3, [pc, #56]	; (c90 <I2cReadDataWait+0x68>)
     c58:	4798      	blx	r3
     c5a:	0004      	movs	r4, r0
	return error;
     c5c:	e7ec      	b.n	c38 <I2cReadDataWait+0x10>
	 return sensorTransmitError;
     c5e:	4b0d      	ldr	r3, [pc, #52]	; (c94 <I2cReadDataWait+0x6c>)
		if(I2cGetTaskErrorStatus()){
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d003      	beq.n	c6e <I2cReadDataWait+0x46>
	sensorTransmitError = value;
     c66:	2200      	movs	r2, #0
     c68:	4b0a      	ldr	r3, [pc, #40]	; (c94 <I2cReadDataWait+0x6c>)
     c6a:	701a      	strb	r2, [r3, #0]
     c6c:	e7f3      	b.n	c56 <I2cReadDataWait+0x2e>
	SerialConsoleWriteString("previous is good\r\n");
     c6e:	480a      	ldr	r0, [pc, #40]	; (c98 <I2cReadDataWait+0x70>)
     c70:	4d0a      	ldr	r5, [pc, #40]	; (c9c <I2cReadDataWait+0x74>)
     c72:	47a8      	blx	r5
	error |= I2cFreeMutex();
<<<<<<< HEAD
     c6a:	4b05      	ldr	r3, [pc, #20]	; (c80 <I2cReadDataWait+0x58>)
     c6c:	4798      	blx	r3
     c6e:	e7e3      	b.n	c38 <I2cReadDataWait+0x10>
     c70:	00000ba5 	.word	0x00000ba5
     c74:	20003894 	.word	0x20003894
     c78:	00000b25 	.word	0x00000b25
     c7c:	00003e2d 	.word	0x00003e2d
     c80:	00000b6d 	.word	0x00000b6d
     c84:	20000328 	.word	0x20000328

00000c88 <platform_read>:
=======
     c64:	0020      	movs	r0, r4
     c66:	b003      	add	sp, #12
     c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
     c6a:	4b13      	ldr	r3, [pc, #76]	; (cb8 <I2cReadDataWait+0x7c>)
     c6c:	681c      	ldr	r4, [r3, #0]
	error = I2cReadData(data);
     c6e:	9801      	ldr	r0, [sp, #4]
     c70:	4b12      	ldr	r3, [pc, #72]	; (cbc <I2cReadDataWait+0x80>)
     c72:	4798      	blx	r3
	if (ERROR_NONE != error)
     c74:	2800      	cmp	r0, #0
     c76:	d105      	bne.n	c84 <I2cReadDataWait+0x48>
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
     c78:	0031      	movs	r1, r6
     c7a:	0020      	movs	r0, r4
     c7c:	4b10      	ldr	r3, [pc, #64]	; (cc0 <I2cReadDataWait+0x84>)
     c7e:	4798      	blx	r3
     c80:	2801      	cmp	r0, #1
     c82:	d003      	beq.n	c8c <I2cReadDataWait+0x50>
	error = I2cFreeMutex();
     c84:	4b0f      	ldr	r3, [pc, #60]	; (cc4 <I2cReadDataWait+0x88>)
     c86:	4798      	blx	r3
     c88:	0004      	movs	r4, r0
	return error;
     c8a:	e7eb      	b.n	c64 <I2cReadDataWait+0x28>
	 return sensorTransmitError;
     c8c:	4b0e      	ldr	r3, [pc, #56]	; (cc8 <I2cReadDataWait+0x8c>)
		if(I2cGetTaskErrorStatus()){
     c8e:	781b      	ldrb	r3, [r3, #0]
     c90:	2b00      	cmp	r3, #0
     c92:	d003      	beq.n	c9c <I2cReadDataWait+0x60>
	sensorTransmitError = value;
     c94:	2200      	movs	r2, #0
     c96:	4b0c      	ldr	r3, [pc, #48]	; (cc8 <I2cReadDataWait+0x8c>)
     c98:	701a      	strb	r2, [r3, #0]
     c9a:	e7f3      	b.n	c84 <I2cReadDataWait+0x48>
	error |= I2cFreeMutex();
     c9c:	4b09      	ldr	r3, [pc, #36]	; (cc4 <I2cReadDataWait+0x88>)
     c9e:	4798      	blx	r3
     ca0:	0004      	movs	r4, r0
     ca2:	e7df      	b.n	c64 <I2cReadDataWait+0x28>
     ca4:	00000bb9 	.word	0x00000bb9
     ca8:	20003898 	.word	0x20003898
     cac:	00009918 	.word	0x00009918
     cb0:	00008eb9 	.word	0x00008eb9
     cb4:	0000574d 	.word	0x0000574d
     cb8:	20003894 	.word	0x20003894
     cbc:	00000b25 	.word	0x00000b25
     cc0:	00003e4d 	.word	0x00003e4d
     cc4:	00000b6d 	.word	0x00000b6d
     cc8:	20000328 	.word	0x20000328

00000ccc <platform_read>:
>>>>>>> Stashed changes
=======
     c74:	4b06      	ldr	r3, [pc, #24]	; (c90 <I2cReadDataWait+0x68>)
     c76:	4798      	blx	r3
     c78:	0004      	movs	r4, r0
	SerialConsoleWriteString("what's the deuce?\r\n");
     c7a:	4809      	ldr	r0, [pc, #36]	; (ca0 <I2cReadDataWait+0x78>)
     c7c:	47a8      	blx	r5
     c7e:	e7db      	b.n	c38 <I2cReadDataWait+0x10>
     c80:	00000ba5 	.word	0x00000ba5
     c84:	20003894 	.word	0x20003894
     c88:	00000b25 	.word	0x00000b25
     c8c:	00003e2d 	.word	0x00003e2d
     c90:	00000b6d 	.word	0x00000b6d
     c94:	20000328 	.word	0x20000328
     c98:	000098e0 	.word	0x000098e0
     c9c:	0000572d 	.word	0x0000572d
     ca0:	000098f4 	.word	0x000098f4

00000ca4 <platform_read>:
>>>>>>> parent of 79ffb95 (comment)
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
<<<<<<< HEAD
<<<<<<< Updated upstream
     c88:	b510      	push	{r4, lr}
=======
     ccc:	b510      	push	{r4, lr}
>>>>>>> Stashed changes
=======
     ca4:	b510      	push	{r4, lr}
>>>>>>> parent of 79ffb95 (comment)
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?

	int32_t error = ERROR_NONE;
	
	imuData.address = reg;
<<<<<<< HEAD
<<<<<<< Updated upstream
     c8a:	480e      	ldr	r0, [pc, #56]	; (cc4 <platform_read+0x3c>)
     c8c:	7001      	strb	r1, [r0, #0]
=======
     ca6:	480e      	ldr	r0, [pc, #56]	; (ce0 <platform_read+0x3c>)
     ca8:	7001      	strb	r1, [r0, #0]
>>>>>>> parent of 79ffb95 (comment)
	imuData.lenIn = len;
     caa:	8183      	strh	r3, [r0, #12]
	
	imuData.msgIn = *bufp;
     cac:	7814      	ldrb	r4, [r2, #0]
     cae:	6084      	str	r4, [r0, #8]
	imuData.lenOut = 1 + len;
     cb0:	1c5c      	adds	r4, r3, #1
     cb2:	81c4      	strh	r4, [r0, #14]
	
	msgOutImu[0] = reg;
     cb4:	480b      	ldr	r0, [pc, #44]	; (ce4 <platform_read+0x40>)
     cb6:	7001      	strb	r1, [r0, #0]
	for(int i = 0; i < len; i++)
     cb8:	2b00      	cmp	r3, #0
     cba:	dd07      	ble.n	ccc <platform_read+0x28>
     cbc:	490a      	ldr	r1, [pc, #40]	; (ce8 <platform_read+0x44>)
     cbe:	18cb      	adds	r3, r1, r3
	{
		msgOutImu[i+1] = bufp[i];
     cc0:	7810      	ldrb	r0, [r2, #0]
     cc2:	7008      	strb	r0, [r1, #0]
     cc4:	3201      	adds	r2, #1
     cc6:	3101      	adds	r1, #1
	for(int i = 0; i < len; i++)
     cc8:	4299      	cmp	r1, r3
     cca:	d1f9      	bne.n	cc0 <platform_read+0x1c>
	}
	imuData.msgOut = msgOutImu;
     ccc:	4804      	ldr	r0, [pc, #16]	; (ce0 <platform_read+0x3c>)
     cce:	4b05      	ldr	r3, [pc, #20]	; (ce4 <platform_read+0x40>)
     cd0:	6043      	str	r3, [r0, #4]

	error = I2cReadDataWait(&imuData, 50, portMAX_DELAY);
     cd2:	2201      	movs	r2, #1
     cd4:	4252      	negs	r2, r2
     cd6:	2132      	movs	r1, #50	; 0x32
     cd8:	4b04      	ldr	r3, [pc, #16]	; (cec <platform_read+0x48>)
     cda:	4798      	blx	r3
	
	return error;
}
     cdc:	bd10      	pop	{r4, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	200038e4 	.word	0x200038e4
     ce4:	200038a4 	.word	0x200038a4
     ce8:	200038a5 	.word	0x200038a5
     cec:	00000c29 	.word	0x00000c29

00000cf0 <platform_write>:
{
     cf0:	b570      	push	{r4, r5, r6, lr}
	msgOutImu[0] = reg;
     cf2:	480b      	ldr	r0, [pc, #44]	; (d20 <platform_write+0x30>)
     cf4:	7001      	strb	r1, [r0, #0]
	for(int i = 0; i < len; i++)
     cf6:	2b00      	cmp	r3, #0
     cf8:	dd07      	ble.n	d0a <platform_write+0x1a>
     cfa:	480a      	ldr	r0, [pc, #40]	; (d24 <platform_write+0x34>)
     cfc:	18c5      	adds	r5, r0, r3
		msgOutImu[i+1] = bufp[i];
     cfe:	7814      	ldrb	r4, [r2, #0]
     d00:	7004      	strb	r4, [r0, #0]
     d02:	3201      	adds	r2, #1
     d04:	3001      	adds	r0, #1
	for(int i = 0; i < len; i++)
     d06:	42a8      	cmp	r0, r5
     d08:	d1f9      	bne.n	cfe <platform_write+0xe>
	imuData.address = reg;
     d0a:	4807      	ldr	r0, [pc, #28]	; (d28 <platform_write+0x38>)
     d0c:	7001      	strb	r1, [r0, #0]
	imuData.lenOut = 1+len;
     d0e:	3301      	adds	r3, #1
     d10:	81c3      	strh	r3, [r0, #14]
	imuData.msgOut = msgOutImu;
     d12:	4b03      	ldr	r3, [pc, #12]	; (d20 <platform_write+0x30>)
     d14:	6043      	str	r3, [r0, #4]
	error = I2cWriteDataWait(&imuData, portMAX_DELAY);
     d16:	2101      	movs	r1, #1
     d18:	4249      	negs	r1, r1
     d1a:	4b04      	ldr	r3, [pc, #16]	; (d2c <platform_write+0x3c>)
     d1c:	4798      	blx	r3
}
     d1e:	bd70      	pop	{r4, r5, r6, pc}
     d20:	200038a4 	.word	0x200038a4
     d24:	200038a5 	.word	0x200038a5
     d28:	200038e4 	.word	0x200038e4
     d2c:	00000bc9 	.word	0x00000bc9

00000d30 <lsm6dso_read_reg>:
{
     d30:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
     d32:	6885      	ldr	r5, [r0, #8]
     d34:	6844      	ldr	r4, [r0, #4]
     d36:	0028      	movs	r0, r5
     d38:	47a0      	blx	r4
}
     d3a:	bd70      	pop	{r4, r5, r6, pc}

00000d3c <lsm6dso_write_reg>:
{
     d3c:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
     d3e:	6885      	ldr	r5, [r0, #8]
     d40:	6804      	ldr	r4, [r0, #0]
     d42:	0028      	movs	r0, r5
     d44:	47a0      	blx	r4
}
     d46:	bd70      	pop	{r4, r5, r6, pc}

00000d48 <lsm6dso_from_fs2_to_mg>:
{
     d48:	b510      	push	{r4, lr}
  return ((float_t)lsb) * 0.061f;
     d4a:	4b03      	ldr	r3, [pc, #12]	; (d58 <lsm6dso_from_fs2_to_mg+0x10>)
     d4c:	4798      	blx	r3
     d4e:	4903      	ldr	r1, [pc, #12]	; (d5c <lsm6dso_from_fs2_to_mg+0x14>)
     d50:	4b03      	ldr	r3, [pc, #12]	; (d60 <lsm6dso_from_fs2_to_mg+0x18>)
     d52:	4798      	blx	r3
}
     d54:	bd10      	pop	{r4, pc}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	0000733d 	.word	0x0000733d
     d5c:	3d79db23 	.word	0x3d79db23
     d60:	000070bd 	.word	0x000070bd

00000d64 <lsm6dso_xl_full_scale_set>:
{
     d64:	b570      	push	{r4, r5, r6, lr}
     d66:	b082      	sub	sp, #8
     d68:	0004      	movs	r4, r0
     d6a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     d6c:	2301      	movs	r3, #1
     d6e:	aa01      	add	r2, sp, #4
     d70:	2110      	movs	r1, #16
     d72:	4e0a      	ldr	r6, [pc, #40]	; (d9c <lsm6dso_xl_full_scale_set+0x38>)
     d74:	47b0      	blx	r6
  if (ret == 0)
     d76:	2800      	cmp	r0, #0
     d78:	d001      	beq.n	d7e <lsm6dso_xl_full_scale_set+0x1a>
}
     d7a:	b002      	add	sp, #8
     d7c:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_xl = (uint8_t) val;
     d7e:	aa01      	add	r2, sp, #4
     d80:	2103      	movs	r1, #3
     d82:	4029      	ands	r1, r5
     d84:	008b      	lsls	r3, r1, #2
     d86:	7811      	ldrb	r1, [r2, #0]
     d88:	300c      	adds	r0, #12
     d8a:	4381      	bics	r1, r0
     d8c:	4319      	orrs	r1, r3
     d8e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     d90:	2301      	movs	r3, #1
     d92:	2110      	movs	r1, #16
     d94:	0020      	movs	r0, r4
     d96:	4c02      	ldr	r4, [pc, #8]	; (da0 <lsm6dso_xl_full_scale_set+0x3c>)
     d98:	47a0      	blx	r4
  return ret;
     d9a:	e7ee      	b.n	d7a <lsm6dso_xl_full_scale_set+0x16>
     d9c:	00000d31 	.word	0x00000d31
     da0:	00000d3d 	.word	0x00000d3d

00000da4 <lsm6dso_gy_full_scale_set>:
{
     da4:	b570      	push	{r4, r5, r6, lr}
     da6:	b082      	sub	sp, #8
     da8:	0004      	movs	r4, r0
     daa:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
     dac:	2301      	movs	r3, #1
     dae:	aa01      	add	r2, sp, #4
     db0:	2111      	movs	r1, #17
     db2:	4e0a      	ldr	r6, [pc, #40]	; (ddc <lsm6dso_gy_full_scale_set+0x38>)
     db4:	47b0      	blx	r6
  if (ret == 0)
     db6:	2800      	cmp	r0, #0
     db8:	d001      	beq.n	dbe <lsm6dso_gy_full_scale_set+0x1a>
}
     dba:	b002      	add	sp, #8
     dbc:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_g = (uint8_t) val;
     dbe:	aa01      	add	r2, sp, #4
     dc0:	2107      	movs	r1, #7
     dc2:	4029      	ands	r1, r5
     dc4:	004b      	lsls	r3, r1, #1
     dc6:	7811      	ldrb	r1, [r2, #0]
     dc8:	300e      	adds	r0, #14
     dca:	4381      	bics	r1, r0
     dcc:	4319      	orrs	r1, r3
     dce:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
     dd0:	2301      	movs	r3, #1
     dd2:	2111      	movs	r1, #17
     dd4:	0020      	movs	r0, r4
     dd6:	4c02      	ldr	r4, [pc, #8]	; (de0 <lsm6dso_gy_full_scale_set+0x3c>)
     dd8:	47a0      	blx	r4
  return ret;
     dda:	e7ee      	b.n	dba <lsm6dso_gy_full_scale_set+0x16>
     ddc:	00000d31 	.word	0x00000d31
     de0:	00000d3d 	.word	0x00000d3d

00000de4 <lsm6dso_block_data_update_set>:
{
     de4:	b570      	push	{r4, r5, r6, lr}
     de6:	b082      	sub	sp, #8
     de8:	0004      	movs	r4, r0
     dea:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     dec:	2301      	movs	r3, #1
     dee:	aa01      	add	r2, sp, #4
     df0:	2112      	movs	r1, #18
     df2:	4e0a      	ldr	r6, [pc, #40]	; (e1c <lsm6dso_block_data_update_set+0x38>)
     df4:	47b0      	blx	r6
  if (ret == 0)
     df6:	2800      	cmp	r0, #0
     df8:	d001      	beq.n	dfe <lsm6dso_block_data_update_set+0x1a>
}
     dfa:	b002      	add	sp, #8
     dfc:	bd70      	pop	{r4, r5, r6, pc}
    reg.bdu = val;
     dfe:	aa01      	add	r2, sp, #4
     e00:	2101      	movs	r1, #1
     e02:	4029      	ands	r1, r5
     e04:	018b      	lsls	r3, r1, #6
     e06:	7811      	ldrb	r1, [r2, #0]
     e08:	3040      	adds	r0, #64	; 0x40
     e0a:	4381      	bics	r1, r0
     e0c:	4319      	orrs	r1, r3
     e0e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     e10:	2301      	movs	r3, #1
     e12:	2112      	movs	r1, #18
     e14:	0020      	movs	r0, r4
     e16:	4c02      	ldr	r4, [pc, #8]	; (e20 <lsm6dso_block_data_update_set+0x3c>)
     e18:	47a0      	blx	r4
  return ret;
     e1a:	e7ee      	b.n	dfa <lsm6dso_block_data_update_set+0x16>
     e1c:	00000d31 	.word	0x00000d31
     e20:	00000d3d 	.word	0x00000d3d

00000e24 <lsm6dso_xl_offset_weight_set>:
{
     e24:	b570      	push	{r4, r5, r6, lr}
     e26:	b082      	sub	sp, #8
     e28:	0004      	movs	r4, r0
     e2a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
     e2c:	2301      	movs	r3, #1
     e2e:	aa01      	add	r2, sp, #4
     e30:	2115      	movs	r1, #21
     e32:	4e0a      	ldr	r6, [pc, #40]	; (e5c <lsm6dso_xl_offset_weight_set+0x38>)
     e34:	47b0      	blx	r6
  if (ret == 0)
     e36:	2800      	cmp	r0, #0
     e38:	d001      	beq.n	e3e <lsm6dso_xl_offset_weight_set+0x1a>
}
     e3a:	b002      	add	sp, #8
     e3c:	bd70      	pop	{r4, r5, r6, pc}
    reg.usr_off_w = (uint8_t)val;
     e3e:	aa01      	add	r2, sp, #4
     e40:	2101      	movs	r1, #1
     e42:	4029      	ands	r1, r5
     e44:	00cb      	lsls	r3, r1, #3
     e46:	7811      	ldrb	r1, [r2, #0]
     e48:	3008      	adds	r0, #8
     e4a:	4381      	bics	r1, r0
     e4c:	4319      	orrs	r1, r3
     e4e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
     e50:	2301      	movs	r3, #1
     e52:	2115      	movs	r1, #21
     e54:	0020      	movs	r0, r4
     e56:	4c02      	ldr	r4, [pc, #8]	; (e60 <lsm6dso_xl_offset_weight_set+0x3c>)
     e58:	47a0      	blx	r4
  return ret;
     e5a:	e7ee      	b.n	e3a <lsm6dso_xl_offset_weight_set+0x16>
     e5c:	00000d31 	.word	0x00000d31
     e60:	00000d3d 	.word	0x00000d3d

00000e64 <lsm6dso_xl_flag_data_ready_get>:
{
     e64:	b570      	push	{r4, r5, r6, lr}
     e66:	b082      	sub	sp, #8
     e68:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
     e6a:	ac01      	add	r4, sp, #4
     e6c:	2301      	movs	r3, #1
     e6e:	0022      	movs	r2, r4
     e70:	211e      	movs	r1, #30
     e72:	4e04      	ldr	r6, [pc, #16]	; (e84 <lsm6dso_xl_flag_data_ready_get+0x20>)
     e74:	47b0      	blx	r6
  *val = reg.xlda;
     e76:	7823      	ldrb	r3, [r4, #0]
     e78:	07db      	lsls	r3, r3, #31
     e7a:	0fdb      	lsrs	r3, r3, #31
     e7c:	702b      	strb	r3, [r5, #0]
}
     e7e:	b002      	add	sp, #8
     e80:	bd70      	pop	{r4, r5, r6, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	00000d31 	.word	0x00000d31

00000e88 <lsm6dso_acceleration_raw_get>:
{
     e88:	b530      	push	{r4, r5, lr}
     e8a:	b083      	sub	sp, #12
     e8c:	000c      	movs	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
     e8e:	2306      	movs	r3, #6
     e90:	466a      	mov	r2, sp
     e92:	2128      	movs	r1, #40	; 0x28
     e94:	4d0a      	ldr	r5, [pc, #40]	; (ec0 <lsm6dso_acceleration_raw_get+0x38>)
     e96:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
     e98:	466b      	mov	r3, sp
     e9a:	785a      	ldrb	r2, [r3, #1]
     e9c:	0212      	lsls	r2, r2, #8
     e9e:	781b      	ldrb	r3, [r3, #0]
     ea0:	189b      	adds	r3, r3, r2
     ea2:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
     ea4:	466b      	mov	r3, sp
     ea6:	78da      	ldrb	r2, [r3, #3]
     ea8:	0212      	lsls	r2, r2, #8
     eaa:	789b      	ldrb	r3, [r3, #2]
     eac:	189b      	adds	r3, r3, r2
     eae:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
     eb0:	466b      	mov	r3, sp
     eb2:	795a      	ldrb	r2, [r3, #5]
     eb4:	0212      	lsls	r2, r2, #8
     eb6:	791b      	ldrb	r3, [r3, #4]
     eb8:	189b      	adds	r3, r3, r2
     eba:	80a3      	strh	r3, [r4, #4]
}
     ebc:	b003      	add	sp, #12
     ebe:	bd30      	pop	{r4, r5, pc}
     ec0:	00000d31 	.word	0x00000d31

00000ec4 <lsm6dso_mem_bank_set>:
{
     ec4:	b570      	push	{r4, r5, r6, lr}
     ec6:	b082      	sub	sp, #8
     ec8:	0004      	movs	r4, r0
     eca:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
     ecc:	2301      	movs	r3, #1
     ece:	aa01      	add	r2, sp, #4
     ed0:	2101      	movs	r1, #1
     ed2:	4e09      	ldr	r6, [pc, #36]	; (ef8 <lsm6dso_mem_bank_set+0x34>)
     ed4:	47b0      	blx	r6
  if (ret == 0)
     ed6:	2800      	cmp	r0, #0
     ed8:	d001      	beq.n	ede <lsm6dso_mem_bank_set+0x1a>
}
     eda:	b002      	add	sp, #8
     edc:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
     ede:	aa01      	add	r2, sp, #4
     ee0:	01ad      	lsls	r5, r5, #6
     ee2:	7813      	ldrb	r3, [r2, #0]
     ee4:	213f      	movs	r1, #63	; 0x3f
     ee6:	4019      	ands	r1, r3
     ee8:	4329      	orrs	r1, r5
     eea:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
     eec:	2301      	movs	r3, #1
     eee:	2101      	movs	r1, #1
     ef0:	0020      	movs	r0, r4
     ef2:	4c02      	ldr	r4, [pc, #8]	; (efc <lsm6dso_mem_bank_set+0x38>)
     ef4:	47a0      	blx	r4
  return ret;
     ef6:	e7f0      	b.n	eda <lsm6dso_mem_bank_set+0x16>
     ef8:	00000d31 	.word	0x00000d31
     efc:	00000d3d 	.word	0x00000d3d

00000f00 <lsm6dso_device_id_get>:
{
     f00:	b510      	push	{r4, lr}
     f02:	000a      	movs	r2, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
     f04:	2301      	movs	r3, #1
     f06:	210f      	movs	r1, #15
     f08:	4c01      	ldr	r4, [pc, #4]	; (f10 <lsm6dso_device_id_get+0x10>)
     f0a:	47a0      	blx	r4
}
     f0c:	bd10      	pop	{r4, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	00000d31 	.word	0x00000d31

00000f14 <lsm6dso_reset_set>:
{
     f14:	b570      	push	{r4, r5, r6, lr}
     f16:	b082      	sub	sp, #8
     f18:	0004      	movs	r4, r0
     f1a:	000e      	movs	r6, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     f1c:	2301      	movs	r3, #1
     f1e:	aa01      	add	r2, sp, #4
     f20:	2112      	movs	r1, #18
     f22:	4d09      	ldr	r5, [pc, #36]	; (f48 <lsm6dso_reset_set+0x34>)
     f24:	47a8      	blx	r5
  if (ret == 0)
     f26:	2800      	cmp	r0, #0
     f28:	d001      	beq.n	f2e <lsm6dso_reset_set+0x1a>
}
     f2a:	b002      	add	sp, #8
     f2c:	bd70      	pop	{r4, r5, r6, pc}
    reg.sw_reset = val;
     f2e:	aa01      	add	r2, sp, #4
     f30:	2101      	movs	r1, #1
     f32:	400e      	ands	r6, r1
     f34:	7811      	ldrb	r1, [r2, #0]
     f36:	2301      	movs	r3, #1
     f38:	4399      	bics	r1, r3
     f3a:	4331      	orrs	r1, r6
     f3c:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     f3e:	2112      	movs	r1, #18
     f40:	0020      	movs	r0, r4
     f42:	4c02      	ldr	r4, [pc, #8]	; (f4c <lsm6dso_reset_set+0x38>)
     f44:	47a0      	blx	r4
  return ret;
     f46:	e7f0      	b.n	f2a <lsm6dso_reset_set+0x16>
     f48:	00000d31 	.word	0x00000d31
     f4c:	00000d3d 	.word	0x00000d3d

00000f50 <lsm6dso_reset_get>:
{
     f50:	b570      	push	{r4, r5, r6, lr}
     f52:	b082      	sub	sp, #8
     f54:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     f56:	ac01      	add	r4, sp, #4
     f58:	2301      	movs	r3, #1
     f5a:	0022      	movs	r2, r4
     f5c:	2112      	movs	r1, #18
     f5e:	4e04      	ldr	r6, [pc, #16]	; (f70 <lsm6dso_reset_get+0x20>)
     f60:	47b0      	blx	r6
  *val = reg.sw_reset;
     f62:	7823      	ldrb	r3, [r4, #0]
     f64:	07db      	lsls	r3, r3, #31
     f66:	0fdb      	lsrs	r3, r3, #31
     f68:	702b      	strb	r3, [r5, #0]
}
     f6a:	b002      	add	sp, #8
     f6c:	bd70      	pop	{r4, r5, r6, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00000d31 	.word	0x00000d31

00000f74 <lsm6dso_xl_filter_lp2_set>:
{
     f74:	b570      	push	{r4, r5, r6, lr}
     f76:	b082      	sub	sp, #8
     f78:	0004      	movs	r4, r0
     f7a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     f7c:	2301      	movs	r3, #1
     f7e:	aa01      	add	r2, sp, #4
     f80:	2110      	movs	r1, #16
     f82:	4e0a      	ldr	r6, [pc, #40]	; (fac <lsm6dso_xl_filter_lp2_set+0x38>)
     f84:	47b0      	blx	r6
  if (ret == 0)
     f86:	2800      	cmp	r0, #0
     f88:	d001      	beq.n	f8e <lsm6dso_xl_filter_lp2_set+0x1a>
}
     f8a:	b002      	add	sp, #8
     f8c:	bd70      	pop	{r4, r5, r6, pc}
    reg.lpf2_xl_en = val;
     f8e:	aa01      	add	r2, sp, #4
     f90:	2101      	movs	r1, #1
     f92:	4029      	ands	r1, r5
     f94:	004b      	lsls	r3, r1, #1
     f96:	7811      	ldrb	r1, [r2, #0]
     f98:	3002      	adds	r0, #2
     f9a:	4381      	bics	r1, r0
     f9c:	4319      	orrs	r1, r3
     f9e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     fa0:	2301      	movs	r3, #1
     fa2:	2110      	movs	r1, #16
     fa4:	0020      	movs	r0, r4
     fa6:	4c02      	ldr	r4, [pc, #8]	; (fb0 <lsm6dso_xl_filter_lp2_set+0x3c>)
     fa8:	47a0      	blx	r4
  return ret;
     faa:	e7ee      	b.n	f8a <lsm6dso_xl_filter_lp2_set+0x16>
     fac:	00000d31 	.word	0x00000d31
     fb0:	00000d3d 	.word	0x00000d3d

00000fb4 <lsm6dso_xl_hp_path_on_out_set>:
{
     fb4:	b570      	push	{r4, r5, r6, lr}
     fb6:	b082      	sub	sp, #8
     fb8:	0004      	movs	r4, r0
     fba:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
     fbc:	2301      	movs	r3, #1
     fbe:	aa01      	add	r2, sp, #4
     fc0:	2117      	movs	r1, #23
     fc2:	4e10      	ldr	r6, [pc, #64]	; (1004 <lsm6dso_xl_hp_path_on_out_set+0x50>)
     fc4:	47b0      	blx	r6
  if (ret == 0)
     fc6:	2800      	cmp	r0, #0
     fc8:	d001      	beq.n	fce <lsm6dso_xl_hp_path_on_out_set+0x1a>
}
     fca:	b002      	add	sp, #8
     fcc:	bd70      	pop	{r4, r5, r6, pc}
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
     fce:	aa01      	add	r2, sp, #4
     fd0:	092b      	lsrs	r3, r5, #4
     fd2:	2101      	movs	r1, #1
     fd4:	400b      	ands	r3, r1
     fd6:	0098      	lsls	r0, r3, #2
     fd8:	7813      	ldrb	r3, [r2, #0]
     fda:	2604      	movs	r6, #4
     fdc:	43b3      	bics	r3, r6
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
     fde:	096e      	lsrs	r6, r5, #5
     fe0:	4031      	ands	r1, r6
     fe2:	0109      	lsls	r1, r1, #4
     fe4:	4303      	orrs	r3, r0
     fe6:	2010      	movs	r0, #16
     fe8:	4383      	bics	r3, r0
    reg.hpcf_xl = (uint8_t)val & 0x07U;
     fea:	016d      	lsls	r5, r5, #5
     fec:	430b      	orrs	r3, r1
     fee:	211f      	movs	r1, #31
     ff0:	400b      	ands	r3, r1
     ff2:	431d      	orrs	r5, r3
     ff4:	7015      	strb	r5, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
     ff6:	2301      	movs	r3, #1
     ff8:	3908      	subs	r1, #8
     ffa:	0020      	movs	r0, r4
     ffc:	4c02      	ldr	r4, [pc, #8]	; (1008 <lsm6dso_xl_hp_path_on_out_set+0x54>)
     ffe:	47a0      	blx	r4
  return ret;
    1000:	e7e3      	b.n	fca <lsm6dso_xl_hp_path_on_out_set+0x16>
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	00000d31 	.word	0x00000d31
    1008:	00000d3d 	.word	0x00000d3d

0000100c <lsm6dso_i3c_disable_set>:
{
    100c:	b570      	push	{r4, r5, r6, lr}
    100e:	b082      	sub	sp, #8
    1010:	0004      	movs	r4, r0
    1012:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    1014:	2301      	movs	r3, #1
    1016:	466a      	mov	r2, sp
    1018:	2118      	movs	r1, #24
    101a:	4e16      	ldr	r6, [pc, #88]	; (1074 <lsm6dso_i3c_disable_set+0x68>)
    101c:	47b0      	blx	r6
  if (ret == 0)
    101e:	2800      	cmp	r0, #0
    1020:	d001      	beq.n	1026 <lsm6dso_i3c_disable_set+0x1a>
}
    1022:	b002      	add	sp, #8
    1024:	bd70      	pop	{r4, r5, r6, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    1026:	09ea      	lsrs	r2, r5, #7
    1028:	0052      	lsls	r2, r2, #1
    102a:	466b      	mov	r3, sp
    102c:	781b      	ldrb	r3, [r3, #0]
    102e:	2102      	movs	r1, #2
    1030:	438b      	bics	r3, r1
    1032:	4313      	orrs	r3, r2
    1034:	466a      	mov	r2, sp
    1036:	7013      	strb	r3, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    1038:	2301      	movs	r3, #1
    103a:	3116      	adds	r1, #22
    103c:	0020      	movs	r0, r4
    103e:	4e0e      	ldr	r6, [pc, #56]	; (1078 <lsm6dso_i3c_disable_set+0x6c>)
    1040:	47b0      	blx	r6
  if (ret == 0)
    1042:	2800      	cmp	r0, #0
    1044:	d1ed      	bne.n	1022 <lsm6dso_i3c_disable_set+0x16>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    1046:	2301      	movs	r3, #1
    1048:	aa01      	add	r2, sp, #4
    104a:	2162      	movs	r1, #98	; 0x62
    104c:	0020      	movs	r0, r4
    104e:	4e09      	ldr	r6, [pc, #36]	; (1074 <lsm6dso_i3c_disable_set+0x68>)
    1050:	47b0      	blx	r6
  if (ret == 0)
    1052:	2800      	cmp	r0, #0
    1054:	d1e5      	bne.n	1022 <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    1056:	aa01      	add	r2, sp, #4
    1058:	2103      	movs	r1, #3
    105a:	4029      	ands	r1, r5
    105c:	00cb      	lsls	r3, r1, #3
    105e:	7811      	ldrb	r1, [r2, #0]
    1060:	3018      	adds	r0, #24
    1062:	4381      	bics	r1, r0
    1064:	4319      	orrs	r1, r3
    1066:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    1068:	2301      	movs	r3, #1
    106a:	2162      	movs	r1, #98	; 0x62
    106c:	0020      	movs	r0, r4
    106e:	4c02      	ldr	r4, [pc, #8]	; (1078 <lsm6dso_i3c_disable_set+0x6c>)
    1070:	47a0      	blx	r4
  return ret;
    1072:	e7d6      	b.n	1022 <lsm6dso_i3c_disable_set+0x16>
    1074:	00000d31 	.word	0x00000d31
    1078:	00000d3d 	.word	0x00000d3d

0000107c <lsm6dso_fsm_enable_get>:
{
    107c:	b570      	push	{r4, r5, r6, lr}
    107e:	0004      	movs	r4, r0
    1080:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    1082:	2102      	movs	r1, #2
    1084:	4b08      	ldr	r3, [pc, #32]	; (10a8 <lsm6dso_fsm_enable_get+0x2c>)
    1086:	4798      	blx	r3
  if (ret == 0)
    1088:	2800      	cmp	r0, #0
    108a:	d000      	beq.n	108e <lsm6dso_fsm_enable_get+0x12>
}
    108c:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    108e:	2302      	movs	r3, #2
    1090:	002a      	movs	r2, r5
    1092:	2146      	movs	r1, #70	; 0x46
    1094:	0020      	movs	r0, r4
    1096:	4d05      	ldr	r5, [pc, #20]	; (10ac <lsm6dso_fsm_enable_get+0x30>)
    1098:	47a8      	blx	r5
  if (ret == 0)
    109a:	2800      	cmp	r0, #0
    109c:	d1f6      	bne.n	108c <lsm6dso_fsm_enable_get+0x10>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    109e:	2100      	movs	r1, #0
    10a0:	0020      	movs	r0, r4
    10a2:	4b01      	ldr	r3, [pc, #4]	; (10a8 <lsm6dso_fsm_enable_get+0x2c>)
    10a4:	4798      	blx	r3
  return ret;
    10a6:	e7f1      	b.n	108c <lsm6dso_fsm_enable_get+0x10>
    10a8:	00000ec5 	.word	0x00000ec5
    10ac:	00000d31 	.word	0x00000d31

000010b0 <lsm6dso_fsm_data_rate_get>:
{
    10b0:	b570      	push	{r4, r5, r6, lr}
    10b2:	b082      	sub	sp, #8
    10b4:	0004      	movs	r4, r0
    10b6:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    10b8:	2102      	movs	r1, #2
    10ba:	4b17      	ldr	r3, [pc, #92]	; (1118 <lsm6dso_fsm_data_rate_get+0x68>)
    10bc:	4798      	blx	r3
  if (ret == 0)
    10be:	2800      	cmp	r0, #0
    10c0:	d001      	beq.n	10c6 <lsm6dso_fsm_data_rate_get+0x16>
}
    10c2:	b002      	add	sp, #8
    10c4:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    10c6:	2301      	movs	r3, #1
    10c8:	aa01      	add	r2, sp, #4
    10ca:	215f      	movs	r1, #95	; 0x5f
    10cc:	0020      	movs	r0, r4
    10ce:	4e13      	ldr	r6, [pc, #76]	; (111c <lsm6dso_fsm_data_rate_get+0x6c>)
    10d0:	47b0      	blx	r6
  if (ret == 0)
    10d2:	2800      	cmp	r0, #0
    10d4:	d1f5      	bne.n	10c2 <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
    10d6:	ab01      	add	r3, sp, #4
    10d8:	781b      	ldrb	r3, [r3, #0]
    10da:	06db      	lsls	r3, r3, #27
    10dc:	0f9b      	lsrs	r3, r3, #30
    10de:	b2da      	uxtb	r2, r3
    10e0:	2a01      	cmp	r2, #1
    10e2:	d00f      	beq.n	1104 <lsm6dso_fsm_data_rate_get+0x54>
    10e4:	2a00      	cmp	r2, #0
    10e6:	d006      	beq.n	10f6 <lsm6dso_fsm_data_rate_get+0x46>
    10e8:	2a02      	cmp	r2, #2
    10ea:	d00e      	beq.n	110a <lsm6dso_fsm_data_rate_get+0x5a>
    10ec:	2a03      	cmp	r2, #3
    10ee:	d00f      	beq.n	1110 <lsm6dso_fsm_data_rate_get+0x60>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    10f0:	2300      	movs	r3, #0
    10f2:	702b      	strb	r3, [r5, #0]
        break;
    10f4:	e001      	b.n	10fa <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    10f6:	2300      	movs	r3, #0
    10f8:	702b      	strb	r3, [r5, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    10fa:	2100      	movs	r1, #0
    10fc:	0020      	movs	r0, r4
    10fe:	4b06      	ldr	r3, [pc, #24]	; (1118 <lsm6dso_fsm_data_rate_get+0x68>)
    1100:	4798      	blx	r3
  return ret;
    1102:	e7de      	b.n	10c2 <lsm6dso_fsm_data_rate_get+0x12>
        *val = LSM6DSO_ODR_FSM_26Hz;
    1104:	2301      	movs	r3, #1
    1106:	702b      	strb	r3, [r5, #0]
        break;
    1108:	e7f7      	b.n	10fa <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_52Hz;
    110a:	2302      	movs	r3, #2
    110c:	702b      	strb	r3, [r5, #0]
        break;
    110e:	e7f4      	b.n	10fa <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_104Hz;
    1110:	2303      	movs	r3, #3
    1112:	702b      	strb	r3, [r5, #0]
        break;
    1114:	e7f1      	b.n	10fa <lsm6dso_fsm_data_rate_get+0x4a>
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	00000ec5 	.word	0x00000ec5
    111c:	00000d31 	.word	0x00000d31

00001120 <lsm6dso_xl_data_rate_set>:
{
    1120:	b570      	push	{r4, r5, r6, lr}
    1122:	b082      	sub	sp, #8
    1124:	0004      	movs	r4, r0
    1126:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    1128:	a901      	add	r1, sp, #4
    112a:	4b38      	ldr	r3, [pc, #224]	; (120c <lsm6dso_xl_data_rate_set+0xec>)
    112c:	4798      	blx	r3
  if (ret == 0)
    112e:	2800      	cmp	r0, #0
    1130:	d142      	bne.n	11b8 <lsm6dso_xl_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1132:	a901      	add	r1, sp, #4
    1134:	780a      	ldrb	r2, [r1, #0]
    1136:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    1138:	0793      	lsls	r3, r2, #30
    113a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    113c:	0753      	lsls	r3, r2, #29
    113e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    1140:	0710      	lsls	r0, r2, #28
    1142:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    1144:	06d0      	lsls	r0, r2, #27
    1146:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    1148:	0693      	lsls	r3, r2, #26
    114a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    114c:	0653      	lsls	r3, r2, #25
    114e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    1150:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    1152:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    1154:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    1156:	784a      	ldrb	r2, [r1, #1]
    1158:	07d1      	lsls	r1, r2, #31
    115a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    115c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    115e:	0791      	lsls	r1, r2, #30
    1160:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    1162:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    1164:	0751      	lsls	r1, r2, #29
    1166:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    1168:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    116a:	0711      	lsls	r1, r2, #28
    116c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    116e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    1170:	06d1      	lsls	r1, r2, #27
    1172:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    1174:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    1176:	0691      	lsls	r1, r2, #26
    1178:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    117a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    117c:	0651      	lsls	r1, r2, #25
    117e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    1180:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    1182:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    1184:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1186:	b2db      	uxtb	r3, r3
    1188:	2b01      	cmp	r3, #1
    118a:	d017      	beq.n	11bc <lsm6dso_xl_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    118c:	2301      	movs	r3, #1
    118e:	466a      	mov	r2, sp
    1190:	2110      	movs	r1, #16
    1192:	0020      	movs	r0, r4
    1194:	4e1e      	ldr	r6, [pc, #120]	; (1210 <lsm6dso_xl_data_rate_set+0xf0>)
    1196:	47b0      	blx	r6
  if (ret == 0)
    1198:	2800      	cmp	r0, #0
    119a:	d10d      	bne.n	11b8 <lsm6dso_xl_data_rate_set+0x98>
    reg.odr_xl = (uint8_t) odr_xl;
    119c:	012b      	lsls	r3, r5, #4
    119e:	466a      	mov	r2, sp
    11a0:	7812      	ldrb	r2, [r2, #0]
    11a2:	250f      	movs	r5, #15
    11a4:	4015      	ands	r5, r2
    11a6:	431d      	orrs	r5, r3
    11a8:	466b      	mov	r3, sp
    11aa:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    11ac:	2301      	movs	r3, #1
    11ae:	466a      	mov	r2, sp
    11b0:	2110      	movs	r1, #16
    11b2:	0020      	movs	r0, r4
    11b4:	4c17      	ldr	r4, [pc, #92]	; (1214 <lsm6dso_xl_data_rate_set+0xf4>)
    11b6:	47a0      	blx	r4
}
    11b8:	b002      	add	sp, #8
    11ba:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    11bc:	466b      	mov	r3, sp
    11be:	1cd9      	adds	r1, r3, #3
    11c0:	0020      	movs	r0, r4
    11c2:	4b15      	ldr	r3, [pc, #84]	; (1218 <lsm6dso_xl_data_rate_set+0xf8>)
    11c4:	4798      	blx	r3
      if (ret == 0)
    11c6:	2800      	cmp	r0, #0
    11c8:	d1f6      	bne.n	11b8 <lsm6dso_xl_data_rate_set+0x98>
        switch (fsm_odr)
    11ca:	466b      	mov	r3, sp
    11cc:	3303      	adds	r3, #3
    11ce:	781b      	ldrb	r3, [r3, #0]
    11d0:	2b01      	cmp	r3, #1
    11d2:	d00f      	beq.n	11f4 <lsm6dso_xl_data_rate_set+0xd4>
    11d4:	2b00      	cmp	r3, #0
    11d6:	d009      	beq.n	11ec <lsm6dso_xl_data_rate_set+0xcc>
    11d8:	2b02      	cmp	r3, #2
    11da:	d011      	beq.n	1200 <lsm6dso_xl_data_rate_set+0xe0>
    11dc:	2b03      	cmp	r3, #3
    11de:	d1d5      	bne.n	118c <lsm6dso_xl_data_rate_set+0x6c>
    11e0:	1c2b      	adds	r3, r5, #0
    11e2:	2d03      	cmp	r5, #3
    11e4:	d800      	bhi.n	11e8 <lsm6dso_xl_data_rate_set+0xc8>
    11e6:	2304      	movs	r3, #4
    11e8:	b2dd      	uxtb	r5, r3
    11ea:	e7cf      	b.n	118c <lsm6dso_xl_data_rate_set+0x6c>
            if (val == LSM6DSO_XL_ODR_OFF)
    11ec:	2d00      	cmp	r5, #0
    11ee:	d1cd      	bne.n	118c <lsm6dso_xl_data_rate_set+0x6c>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    11f0:	2501      	movs	r5, #1
    11f2:	e7cb      	b.n	118c <lsm6dso_xl_data_rate_set+0x6c>
    11f4:	1c2b      	adds	r3, r5, #0
    11f6:	2d01      	cmp	r5, #1
    11f8:	d800      	bhi.n	11fc <lsm6dso_xl_data_rate_set+0xdc>
    11fa:	2302      	movs	r3, #2
    11fc:	b2dd      	uxtb	r5, r3
    11fe:	e7c5      	b.n	118c <lsm6dso_xl_data_rate_set+0x6c>
    1200:	1c2b      	adds	r3, r5, #0
    1202:	2d02      	cmp	r5, #2
    1204:	d800      	bhi.n	1208 <lsm6dso_xl_data_rate_set+0xe8>
    1206:	2303      	movs	r3, #3
    1208:	b2dd      	uxtb	r5, r3
    120a:	e7bf      	b.n	118c <lsm6dso_xl_data_rate_set+0x6c>
    120c:	0000107d 	.word	0x0000107d
    1210:	00000d31 	.word	0x00000d31
    1214:	00000d3d 	.word	0x00000d3d
    1218:	000010b1 	.word	0x000010b1

0000121c <lsm6dso_gy_data_rate_set>:
{
    121c:	b570      	push	{r4, r5, r6, lr}
    121e:	b082      	sub	sp, #8
    1220:	0004      	movs	r4, r0
    1222:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    1224:	a901      	add	r1, sp, #4
    1226:	4b38      	ldr	r3, [pc, #224]	; (1308 <lsm6dso_gy_data_rate_set+0xec>)
    1228:	4798      	blx	r3
  if (ret == 0)
    122a:	2800      	cmp	r0, #0
    122c:	d142      	bne.n	12b4 <lsm6dso_gy_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    122e:	a901      	add	r1, sp, #4
    1230:	780a      	ldrb	r2, [r1, #0]
    1232:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    1234:	0793      	lsls	r3, r2, #30
    1236:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    1238:	0753      	lsls	r3, r2, #29
    123a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    123c:	0710      	lsls	r0, r2, #28
    123e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    1240:	06d0      	lsls	r0, r2, #27
    1242:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    1244:	0693      	lsls	r3, r2, #26
    1246:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    1248:	0653      	lsls	r3, r2, #25
    124a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    124c:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    124e:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    1250:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    1252:	784a      	ldrb	r2, [r1, #1]
    1254:	07d1      	lsls	r1, r2, #31
    1256:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    1258:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    125a:	0791      	lsls	r1, r2, #30
    125c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    125e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    1260:	0751      	lsls	r1, r2, #29
    1262:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    1264:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    1266:	0711      	lsls	r1, r2, #28
    1268:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    126a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    126c:	06d1      	lsls	r1, r2, #27
    126e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    1270:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    1272:	0691      	lsls	r1, r2, #26
    1274:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    1276:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    1278:	0651      	lsls	r1, r2, #25
    127a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    127c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    127e:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    1280:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1282:	b2db      	uxtb	r3, r3
    1284:	2b01      	cmp	r3, #1
    1286:	d017      	beq.n	12b8 <lsm6dso_gy_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    1288:	2301      	movs	r3, #1
    128a:	466a      	mov	r2, sp
    128c:	2111      	movs	r1, #17
    128e:	0020      	movs	r0, r4
    1290:	4e1e      	ldr	r6, [pc, #120]	; (130c <lsm6dso_gy_data_rate_set+0xf0>)
    1292:	47b0      	blx	r6
  if (ret == 0)
    1294:	2800      	cmp	r0, #0
    1296:	d10d      	bne.n	12b4 <lsm6dso_gy_data_rate_set+0x98>
    reg.odr_g = (uint8_t) odr_gy;
    1298:	012b      	lsls	r3, r5, #4
    129a:	466a      	mov	r2, sp
    129c:	7812      	ldrb	r2, [r2, #0]
    129e:	250f      	movs	r5, #15
    12a0:	4015      	ands	r5, r2
    12a2:	431d      	orrs	r5, r3
    12a4:	466b      	mov	r3, sp
    12a6:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    12a8:	2301      	movs	r3, #1
    12aa:	466a      	mov	r2, sp
    12ac:	2111      	movs	r1, #17
    12ae:	0020      	movs	r0, r4
    12b0:	4c17      	ldr	r4, [pc, #92]	; (1310 <lsm6dso_gy_data_rate_set+0xf4>)
    12b2:	47a0      	blx	r4
}
    12b4:	b002      	add	sp, #8
    12b6:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    12b8:	466b      	mov	r3, sp
    12ba:	1cd9      	adds	r1, r3, #3
    12bc:	0020      	movs	r0, r4
    12be:	4b15      	ldr	r3, [pc, #84]	; (1314 <lsm6dso_gy_data_rate_set+0xf8>)
    12c0:	4798      	blx	r3
      if (ret == 0)
    12c2:	2800      	cmp	r0, #0
    12c4:	d1f6      	bne.n	12b4 <lsm6dso_gy_data_rate_set+0x98>
        switch (fsm_odr)
    12c6:	466b      	mov	r3, sp
    12c8:	3303      	adds	r3, #3
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	2b01      	cmp	r3, #1
    12ce:	d00f      	beq.n	12f0 <lsm6dso_gy_data_rate_set+0xd4>
    12d0:	2b00      	cmp	r3, #0
    12d2:	d009      	beq.n	12e8 <lsm6dso_gy_data_rate_set+0xcc>
    12d4:	2b02      	cmp	r3, #2
    12d6:	d011      	beq.n	12fc <lsm6dso_gy_data_rate_set+0xe0>
    12d8:	2b03      	cmp	r3, #3
    12da:	d1d5      	bne.n	1288 <lsm6dso_gy_data_rate_set+0x6c>
    12dc:	1c2b      	adds	r3, r5, #0
    12de:	2d03      	cmp	r5, #3
    12e0:	d800      	bhi.n	12e4 <lsm6dso_gy_data_rate_set+0xc8>
    12e2:	2304      	movs	r3, #4
    12e4:	b2dd      	uxtb	r5, r3
    12e6:	e7cf      	b.n	1288 <lsm6dso_gy_data_rate_set+0x6c>
            if (val == LSM6DSO_GY_ODR_OFF)
    12e8:	2d00      	cmp	r5, #0
    12ea:	d1cd      	bne.n	1288 <lsm6dso_gy_data_rate_set+0x6c>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
<<<<<<< HEAD
    12d0:	2501      	movs	r5, #1
    12d2:	e7cb      	b.n	126c <lsm6dso_gy_data_rate_set+0x6c>
    12d4:	1c2b      	adds	r3, r5, #0
    12d6:	2d01      	cmp	r5, #1
    12d8:	d800      	bhi.n	12dc <lsm6dso_gy_data_rate_set+0xdc>
    12da:	2302      	movs	r3, #2
    12dc:	b2dd      	uxtb	r5, r3
    12de:	e7c5      	b.n	126c <lsm6dso_gy_data_rate_set+0x6c>
    12e0:	1c2b      	adds	r3, r5, #0
    12e2:	2d02      	cmp	r5, #2
    12e4:	d800      	bhi.n	12e8 <lsm6dso_gy_data_rate_set+0xe8>
    12e6:	2303      	movs	r3, #3
    12e8:	b2dd      	uxtb	r5, r3
    12ea:	e7bf      	b.n	126c <lsm6dso_gy_data_rate_set+0x6c>
    12ec:	00001061 	.word	0x00001061
    12f0:	00000d15 	.word	0x00000d15
    12f4:	00000d21 	.word	0x00000d21
    12f8:	00001095 	.word	0x00001095

000012fc <GetImuStruct>:
=======
     cce:	480e      	ldr	r0, [pc, #56]	; (d08 <platform_read+0x3c>)
     cd0:	7001      	strb	r1, [r0, #0]
	imuData.lenIn = len;
     cd2:	8183      	strh	r3, [r0, #12]
	
	imuData.msgIn = *bufp;
     cd4:	7814      	ldrb	r4, [r2, #0]
     cd6:	6084      	str	r4, [r0, #8]
	imuData.lenOut = 1 + len;
     cd8:	1c5c      	adds	r4, r3, #1
     cda:	81c4      	strh	r4, [r0, #14]
	
	msgOutImu[0] = reg;
     cdc:	480b      	ldr	r0, [pc, #44]	; (d0c <platform_read+0x40>)
     cde:	7001      	strb	r1, [r0, #0]
	for(int i = 0; i < len; i++)
     ce0:	2b00      	cmp	r3, #0
     ce2:	dd07      	ble.n	cf4 <platform_read+0x28>
     ce4:	490a      	ldr	r1, [pc, #40]	; (d10 <platform_read+0x44>)
     ce6:	18cb      	adds	r3, r1, r3
	{
		msgOutImu[i+1] = bufp[i];
     ce8:	7810      	ldrb	r0, [r2, #0]
     cea:	7008      	strb	r0, [r1, #0]
     cec:	3201      	adds	r2, #1
     cee:	3101      	adds	r1, #1
	for(int i = 0; i < len; i++)
     cf0:	4299      	cmp	r1, r3
     cf2:	d1f9      	bne.n	ce8 <platform_read+0x1c>
	}
	imuData.msgOut = msgOutImu;
     cf4:	4804      	ldr	r0, [pc, #16]	; (d08 <platform_read+0x3c>)
     cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <platform_read+0x40>)
     cf8:	6043      	str	r3, [r0, #4]

	error = I2cReadDataWait(&imuData, 50, portMAX_DELAY);
     cfa:	2201      	movs	r2, #1
     cfc:	4252      	negs	r2, r2
     cfe:	2132      	movs	r1, #50	; 0x32
     d00:	4b04      	ldr	r3, [pc, #16]	; (d14 <platform_read+0x48>)
     d02:	4798      	blx	r3
	
	return error;
}
     d04:	bd10      	pop	{r4, pc}
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	20003924 	.word	0x20003924
     d0c:	200038e4 	.word	0x200038e4
     d10:	200038e5 	.word	0x200038e5
     d14:	00000c3d 	.word	0x00000c3d

00000d18 <platform_write>:
{
     d18:	b570      	push	{r4, r5, r6, lr}
	msgOutImu[0] = reg;
     d1a:	480b      	ldr	r0, [pc, #44]	; (d48 <platform_write+0x30>)
     d1c:	7001      	strb	r1, [r0, #0]
	for(int i = 0; i < len; i++)
     d1e:	2b00      	cmp	r3, #0
     d20:	dd07      	ble.n	d32 <platform_write+0x1a>
     d22:	480a      	ldr	r0, [pc, #40]	; (d4c <platform_write+0x34>)
     d24:	18c5      	adds	r5, r0, r3
		msgOutImu[i+1] = bufp[i];
     d26:	7814      	ldrb	r4, [r2, #0]
     d28:	7004      	strb	r4, [r0, #0]
     d2a:	3201      	adds	r2, #1
     d2c:	3001      	adds	r0, #1
	for(int i = 0; i < len; i++)
     d2e:	42a8      	cmp	r0, r5
     d30:	d1f9      	bne.n	d26 <platform_write+0xe>
	imuData.address = reg;
     d32:	4807      	ldr	r0, [pc, #28]	; (d50 <platform_write+0x38>)
     d34:	7001      	strb	r1, [r0, #0]
	imuData.lenOut = 1+len;
     d36:	3301      	adds	r3, #1
     d38:	81c3      	strh	r3, [r0, #14]
	imuData.msgOut = msgOutImu;
     d3a:	4b03      	ldr	r3, [pc, #12]	; (d48 <platform_write+0x30>)
     d3c:	6043      	str	r3, [r0, #4]
	error = I2cWriteDataWait(&imuData, portMAX_DELAY);
     d3e:	2101      	movs	r1, #1
     d40:	4249      	negs	r1, r1
     d42:	4b04      	ldr	r3, [pc, #16]	; (d54 <platform_write+0x3c>)
     d44:	4798      	blx	r3
}
     d46:	bd70      	pop	{r4, r5, r6, pc}
     d48:	200038e4 	.word	0x200038e4
     d4c:	200038e5 	.word	0x200038e5
     d50:	20003924 	.word	0x20003924
     d54:	00000bdd 	.word	0x00000bdd

00000d58 <lsm6dso_read_reg>:
{
     d58:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
     d5a:	6885      	ldr	r5, [r0, #8]
     d5c:	6844      	ldr	r4, [r0, #4]
     d5e:	0028      	movs	r0, r5
     d60:	47a0      	blx	r4
}
     d62:	bd70      	pop	{r4, r5, r6, pc}

00000d64 <lsm6dso_write_reg>:
{
     d64:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
     d66:	6885      	ldr	r5, [r0, #8]
     d68:	6804      	ldr	r4, [r0, #0]
     d6a:	0028      	movs	r0, r5
     d6c:	47a0      	blx	r4
}
     d6e:	bd70      	pop	{r4, r5, r6, pc}

00000d70 <lsm6dso_from_fs2_to_mg>:
{
     d70:	b510      	push	{r4, lr}
  return ((float_t)lsb) * 0.061f;
     d72:	4b03      	ldr	r3, [pc, #12]	; (d80 <lsm6dso_from_fs2_to_mg+0x10>)
     d74:	4798      	blx	r3
     d76:	4903      	ldr	r1, [pc, #12]	; (d84 <lsm6dso_from_fs2_to_mg+0x14>)
     d78:	4b03      	ldr	r3, [pc, #12]	; (d88 <lsm6dso_from_fs2_to_mg+0x18>)
     d7a:	4798      	blx	r3
}
     d7c:	bd10      	pop	{r4, pc}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	0000735d 	.word	0x0000735d
     d84:	3d79db23 	.word	0x3d79db23
     d88:	000070dd 	.word	0x000070dd

00000d8c <lsm6dso_xl_full_scale_set>:
{
     d8c:	b570      	push	{r4, r5, r6, lr}
     d8e:	b082      	sub	sp, #8
     d90:	0004      	movs	r4, r0
     d92:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     d94:	2301      	movs	r3, #1
     d96:	aa01      	add	r2, sp, #4
     d98:	2110      	movs	r1, #16
     d9a:	4e0a      	ldr	r6, [pc, #40]	; (dc4 <lsm6dso_xl_full_scale_set+0x38>)
     d9c:	47b0      	blx	r6
  if (ret == 0)
     d9e:	2800      	cmp	r0, #0
     da0:	d001      	beq.n	da6 <lsm6dso_xl_full_scale_set+0x1a>
}
     da2:	b002      	add	sp, #8
     da4:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_xl = (uint8_t) val;
     da6:	aa01      	add	r2, sp, #4
     da8:	2103      	movs	r1, #3
     daa:	4029      	ands	r1, r5
     dac:	008b      	lsls	r3, r1, #2
     dae:	7811      	ldrb	r1, [r2, #0]
     db0:	300c      	adds	r0, #12
     db2:	4381      	bics	r1, r0
     db4:	4319      	orrs	r1, r3
     db6:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     db8:	2301      	movs	r3, #1
     dba:	2110      	movs	r1, #16
     dbc:	0020      	movs	r0, r4
     dbe:	4c02      	ldr	r4, [pc, #8]	; (dc8 <lsm6dso_xl_full_scale_set+0x3c>)
     dc0:	47a0      	blx	r4
  return ret;
     dc2:	e7ee      	b.n	da2 <lsm6dso_xl_full_scale_set+0x16>
     dc4:	00000d59 	.word	0x00000d59
     dc8:	00000d65 	.word	0x00000d65

00000dcc <lsm6dso_gy_full_scale_set>:
{
     dcc:	b570      	push	{r4, r5, r6, lr}
     dce:	b082      	sub	sp, #8
     dd0:	0004      	movs	r4, r0
     dd2:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
     dd4:	2301      	movs	r3, #1
     dd6:	aa01      	add	r2, sp, #4
     dd8:	2111      	movs	r1, #17
     dda:	4e0a      	ldr	r6, [pc, #40]	; (e04 <lsm6dso_gy_full_scale_set+0x38>)
     ddc:	47b0      	blx	r6
  if (ret == 0)
     dde:	2800      	cmp	r0, #0
     de0:	d001      	beq.n	de6 <lsm6dso_gy_full_scale_set+0x1a>
}
     de2:	b002      	add	sp, #8
     de4:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_g = (uint8_t) val;
     de6:	aa01      	add	r2, sp, #4
     de8:	2107      	movs	r1, #7
     dea:	4029      	ands	r1, r5
     dec:	004b      	lsls	r3, r1, #1
     dee:	7811      	ldrb	r1, [r2, #0]
     df0:	300e      	adds	r0, #14
     df2:	4381      	bics	r1, r0
     df4:	4319      	orrs	r1, r3
     df6:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
     df8:	2301      	movs	r3, #1
     dfa:	2111      	movs	r1, #17
     dfc:	0020      	movs	r0, r4
     dfe:	4c02      	ldr	r4, [pc, #8]	; (e08 <lsm6dso_gy_full_scale_set+0x3c>)
     e00:	47a0      	blx	r4
  return ret;
     e02:	e7ee      	b.n	de2 <lsm6dso_gy_full_scale_set+0x16>
     e04:	00000d59 	.word	0x00000d59
     e08:	00000d65 	.word	0x00000d65

00000e0c <lsm6dso_block_data_update_set>:
{
     e0c:	b570      	push	{r4, r5, r6, lr}
     e0e:	b082      	sub	sp, #8
     e10:	0004      	movs	r4, r0
     e12:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     e14:	2301      	movs	r3, #1
     e16:	aa01      	add	r2, sp, #4
     e18:	2112      	movs	r1, #18
     e1a:	4e0a      	ldr	r6, [pc, #40]	; (e44 <lsm6dso_block_data_update_set+0x38>)
     e1c:	47b0      	blx	r6
  if (ret == 0)
     e1e:	2800      	cmp	r0, #0
     e20:	d001      	beq.n	e26 <lsm6dso_block_data_update_set+0x1a>
}
     e22:	b002      	add	sp, #8
     e24:	bd70      	pop	{r4, r5, r6, pc}
    reg.bdu = val;
     e26:	aa01      	add	r2, sp, #4
     e28:	2101      	movs	r1, #1
     e2a:	4029      	ands	r1, r5
     e2c:	018b      	lsls	r3, r1, #6
     e2e:	7811      	ldrb	r1, [r2, #0]
     e30:	3040      	adds	r0, #64	; 0x40
     e32:	4381      	bics	r1, r0
     e34:	4319      	orrs	r1, r3
     e36:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     e38:	2301      	movs	r3, #1
     e3a:	2112      	movs	r1, #18
     e3c:	0020      	movs	r0, r4
     e3e:	4c02      	ldr	r4, [pc, #8]	; (e48 <lsm6dso_block_data_update_set+0x3c>)
     e40:	47a0      	blx	r4
  return ret;
     e42:	e7ee      	b.n	e22 <lsm6dso_block_data_update_set+0x16>
     e44:	00000d59 	.word	0x00000d59
     e48:	00000d65 	.word	0x00000d65

00000e4c <lsm6dso_xl_offset_weight_set>:
{
     e4c:	b570      	push	{r4, r5, r6, lr}
     e4e:	b082      	sub	sp, #8
     e50:	0004      	movs	r4, r0
     e52:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
     e54:	2301      	movs	r3, #1
     e56:	aa01      	add	r2, sp, #4
     e58:	2115      	movs	r1, #21
     e5a:	4e0a      	ldr	r6, [pc, #40]	; (e84 <lsm6dso_xl_offset_weight_set+0x38>)
     e5c:	47b0      	blx	r6
  if (ret == 0)
     e5e:	2800      	cmp	r0, #0
     e60:	d001      	beq.n	e66 <lsm6dso_xl_offset_weight_set+0x1a>
}
     e62:	b002      	add	sp, #8
     e64:	bd70      	pop	{r4, r5, r6, pc}
    reg.usr_off_w = (uint8_t)val;
     e66:	aa01      	add	r2, sp, #4
     e68:	2101      	movs	r1, #1
     e6a:	4029      	ands	r1, r5
     e6c:	00cb      	lsls	r3, r1, #3
     e6e:	7811      	ldrb	r1, [r2, #0]
     e70:	3008      	adds	r0, #8
     e72:	4381      	bics	r1, r0
     e74:	4319      	orrs	r1, r3
     e76:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
     e78:	2301      	movs	r3, #1
     e7a:	2115      	movs	r1, #21
     e7c:	0020      	movs	r0, r4
     e7e:	4c02      	ldr	r4, [pc, #8]	; (e88 <lsm6dso_xl_offset_weight_set+0x3c>)
     e80:	47a0      	blx	r4
  return ret;
     e82:	e7ee      	b.n	e62 <lsm6dso_xl_offset_weight_set+0x16>
     e84:	00000d59 	.word	0x00000d59
     e88:	00000d65 	.word	0x00000d65

00000e8c <lsm6dso_xl_flag_data_ready_get>:
{
     e8c:	b570      	push	{r4, r5, r6, lr}
     e8e:	b082      	sub	sp, #8
     e90:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
     e92:	ac01      	add	r4, sp, #4
     e94:	2301      	movs	r3, #1
     e96:	0022      	movs	r2, r4
     e98:	211e      	movs	r1, #30
     e9a:	4e04      	ldr	r6, [pc, #16]	; (eac <lsm6dso_xl_flag_data_ready_get+0x20>)
     e9c:	47b0      	blx	r6
  *val = reg.xlda;
     e9e:	7823      	ldrb	r3, [r4, #0]
     ea0:	07db      	lsls	r3, r3, #31
     ea2:	0fdb      	lsrs	r3, r3, #31
     ea4:	702b      	strb	r3, [r5, #0]
}
     ea6:	b002      	add	sp, #8
     ea8:	bd70      	pop	{r4, r5, r6, pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	00000d59 	.word	0x00000d59

00000eb0 <lsm6dso_acceleration_raw_get>:
{
     eb0:	b530      	push	{r4, r5, lr}
     eb2:	b083      	sub	sp, #12
     eb4:	000c      	movs	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
     eb6:	2306      	movs	r3, #6
     eb8:	466a      	mov	r2, sp
     eba:	2128      	movs	r1, #40	; 0x28
     ebc:	4d0a      	ldr	r5, [pc, #40]	; (ee8 <lsm6dso_acceleration_raw_get+0x38>)
     ebe:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
     ec0:	466b      	mov	r3, sp
     ec2:	785a      	ldrb	r2, [r3, #1]
     ec4:	0212      	lsls	r2, r2, #8
     ec6:	781b      	ldrb	r3, [r3, #0]
     ec8:	189b      	adds	r3, r3, r2
     eca:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
     ecc:	466b      	mov	r3, sp
     ece:	78da      	ldrb	r2, [r3, #3]
     ed0:	0212      	lsls	r2, r2, #8
     ed2:	789b      	ldrb	r3, [r3, #2]
     ed4:	189b      	adds	r3, r3, r2
     ed6:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
     ed8:	466b      	mov	r3, sp
     eda:	795a      	ldrb	r2, [r3, #5]
     edc:	0212      	lsls	r2, r2, #8
     ede:	791b      	ldrb	r3, [r3, #4]
     ee0:	189b      	adds	r3, r3, r2
     ee2:	80a3      	strh	r3, [r4, #4]
}
     ee4:	b003      	add	sp, #12
     ee6:	bd30      	pop	{r4, r5, pc}
     ee8:	00000d59 	.word	0x00000d59

00000eec <lsm6dso_mem_bank_set>:
{
     eec:	b570      	push	{r4, r5, r6, lr}
     eee:	b082      	sub	sp, #8
     ef0:	0004      	movs	r4, r0
     ef2:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
     ef4:	2301      	movs	r3, #1
     ef6:	aa01      	add	r2, sp, #4
     ef8:	2101      	movs	r1, #1
     efa:	4e09      	ldr	r6, [pc, #36]	; (f20 <lsm6dso_mem_bank_set+0x34>)
     efc:	47b0      	blx	r6
  if (ret == 0)
     efe:	2800      	cmp	r0, #0
     f00:	d001      	beq.n	f06 <lsm6dso_mem_bank_set+0x1a>
}
     f02:	b002      	add	sp, #8
     f04:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
     f06:	aa01      	add	r2, sp, #4
     f08:	01ad      	lsls	r5, r5, #6
     f0a:	7813      	ldrb	r3, [r2, #0]
     f0c:	213f      	movs	r1, #63	; 0x3f
     f0e:	4019      	ands	r1, r3
     f10:	4329      	orrs	r1, r5
     f12:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
     f14:	2301      	movs	r3, #1
     f16:	2101      	movs	r1, #1
     f18:	0020      	movs	r0, r4
     f1a:	4c02      	ldr	r4, [pc, #8]	; (f24 <lsm6dso_mem_bank_set+0x38>)
     f1c:	47a0      	blx	r4
  return ret;
     f1e:	e7f0      	b.n	f02 <lsm6dso_mem_bank_set+0x16>
     f20:	00000d59 	.word	0x00000d59
     f24:	00000d65 	.word	0x00000d65

00000f28 <lsm6dso_device_id_get>:
{
     f28:	b510      	push	{r4, lr}
     f2a:	000a      	movs	r2, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
     f2c:	2301      	movs	r3, #1
     f2e:	210f      	movs	r1, #15
     f30:	4c01      	ldr	r4, [pc, #4]	; (f38 <lsm6dso_device_id_get+0x10>)
     f32:	47a0      	blx	r4
}
     f34:	bd10      	pop	{r4, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	00000d59 	.word	0x00000d59

00000f3c <lsm6dso_reset_set>:
{
     f3c:	b570      	push	{r4, r5, r6, lr}
     f3e:	b082      	sub	sp, #8
     f40:	0004      	movs	r4, r0
     f42:	000e      	movs	r6, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     f44:	2301      	movs	r3, #1
     f46:	aa01      	add	r2, sp, #4
     f48:	2112      	movs	r1, #18
     f4a:	4d09      	ldr	r5, [pc, #36]	; (f70 <lsm6dso_reset_set+0x34>)
     f4c:	47a8      	blx	r5
  if (ret == 0)
     f4e:	2800      	cmp	r0, #0
     f50:	d001      	beq.n	f56 <lsm6dso_reset_set+0x1a>
}
     f52:	b002      	add	sp, #8
     f54:	bd70      	pop	{r4, r5, r6, pc}
    reg.sw_reset = val;
     f56:	aa01      	add	r2, sp, #4
     f58:	2101      	movs	r1, #1
     f5a:	400e      	ands	r6, r1
     f5c:	7811      	ldrb	r1, [r2, #0]
     f5e:	2301      	movs	r3, #1
     f60:	4399      	bics	r1, r3
     f62:	4331      	orrs	r1, r6
     f64:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     f66:	2112      	movs	r1, #18
     f68:	0020      	movs	r0, r4
     f6a:	4c02      	ldr	r4, [pc, #8]	; (f74 <lsm6dso_reset_set+0x38>)
     f6c:	47a0      	blx	r4
  return ret;
     f6e:	e7f0      	b.n	f52 <lsm6dso_reset_set+0x16>
     f70:	00000d59 	.word	0x00000d59
     f74:	00000d65 	.word	0x00000d65

00000f78 <lsm6dso_reset_get>:
{
     f78:	b570      	push	{r4, r5, r6, lr}
     f7a:	b082      	sub	sp, #8
     f7c:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     f7e:	ac01      	add	r4, sp, #4
     f80:	2301      	movs	r3, #1
     f82:	0022      	movs	r2, r4
     f84:	2112      	movs	r1, #18
     f86:	4e04      	ldr	r6, [pc, #16]	; (f98 <lsm6dso_reset_get+0x20>)
     f88:	47b0      	blx	r6
  *val = reg.sw_reset;
     f8a:	7823      	ldrb	r3, [r4, #0]
     f8c:	07db      	lsls	r3, r3, #31
     f8e:	0fdb      	lsrs	r3, r3, #31
     f90:	702b      	strb	r3, [r5, #0]
}
     f92:	b002      	add	sp, #8
     f94:	bd70      	pop	{r4, r5, r6, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00000d59 	.word	0x00000d59

00000f9c <lsm6dso_xl_filter_lp2_set>:
{
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	b082      	sub	sp, #8
     fa0:	0004      	movs	r4, r0
     fa2:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     fa4:	2301      	movs	r3, #1
     fa6:	aa01      	add	r2, sp, #4
     fa8:	2110      	movs	r1, #16
     faa:	4e0a      	ldr	r6, [pc, #40]	; (fd4 <lsm6dso_xl_filter_lp2_set+0x38>)
     fac:	47b0      	blx	r6
  if (ret == 0)
     fae:	2800      	cmp	r0, #0
     fb0:	d001      	beq.n	fb6 <lsm6dso_xl_filter_lp2_set+0x1a>
}
     fb2:	b002      	add	sp, #8
     fb4:	bd70      	pop	{r4, r5, r6, pc}
    reg.lpf2_xl_en = val;
     fb6:	aa01      	add	r2, sp, #4
     fb8:	2101      	movs	r1, #1
     fba:	4029      	ands	r1, r5
     fbc:	004b      	lsls	r3, r1, #1
     fbe:	7811      	ldrb	r1, [r2, #0]
     fc0:	3002      	adds	r0, #2
     fc2:	4381      	bics	r1, r0
     fc4:	4319      	orrs	r1, r3
     fc6:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     fc8:	2301      	movs	r3, #1
     fca:	2110      	movs	r1, #16
     fcc:	0020      	movs	r0, r4
     fce:	4c02      	ldr	r4, [pc, #8]	; (fd8 <lsm6dso_xl_filter_lp2_set+0x3c>)
     fd0:	47a0      	blx	r4
  return ret;
     fd2:	e7ee      	b.n	fb2 <lsm6dso_xl_filter_lp2_set+0x16>
     fd4:	00000d59 	.word	0x00000d59
     fd8:	00000d65 	.word	0x00000d65

00000fdc <lsm6dso_xl_hp_path_on_out_set>:
{
     fdc:	b570      	push	{r4, r5, r6, lr}
     fde:	b082      	sub	sp, #8
     fe0:	0004      	movs	r4, r0
     fe2:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
     fe4:	2301      	movs	r3, #1
     fe6:	aa01      	add	r2, sp, #4
     fe8:	2117      	movs	r1, #23
     fea:	4e10      	ldr	r6, [pc, #64]	; (102c <lsm6dso_xl_hp_path_on_out_set+0x50>)
     fec:	47b0      	blx	r6
  if (ret == 0)
     fee:	2800      	cmp	r0, #0
     ff0:	d001      	beq.n	ff6 <lsm6dso_xl_hp_path_on_out_set+0x1a>
}
     ff2:	b002      	add	sp, #8
     ff4:	bd70      	pop	{r4, r5, r6, pc}
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
     ff6:	aa01      	add	r2, sp, #4
     ff8:	092b      	lsrs	r3, r5, #4
     ffa:	2101      	movs	r1, #1
     ffc:	400b      	ands	r3, r1
     ffe:	0098      	lsls	r0, r3, #2
    1000:	7813      	ldrb	r3, [r2, #0]
    1002:	2604      	movs	r6, #4
    1004:	43b3      	bics	r3, r6
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    1006:	096e      	lsrs	r6, r5, #5
    1008:	4031      	ands	r1, r6
    100a:	0109      	lsls	r1, r1, #4
    100c:	4303      	orrs	r3, r0
    100e:	2010      	movs	r0, #16
    1010:	4383      	bics	r3, r0
    reg.hpcf_xl = (uint8_t)val & 0x07U;
    1012:	016d      	lsls	r5, r5, #5
    1014:	430b      	orrs	r3, r1
    1016:	211f      	movs	r1, #31
    1018:	400b      	ands	r3, r1
    101a:	431d      	orrs	r5, r3
    101c:	7015      	strb	r5, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
    101e:	2301      	movs	r3, #1
    1020:	3908      	subs	r1, #8
    1022:	0020      	movs	r0, r4
    1024:	4c02      	ldr	r4, [pc, #8]	; (1030 <lsm6dso_xl_hp_path_on_out_set+0x54>)
    1026:	47a0      	blx	r4
  return ret;
    1028:	e7e3      	b.n	ff2 <lsm6dso_xl_hp_path_on_out_set+0x16>
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	00000d59 	.word	0x00000d59
    1030:	00000d65 	.word	0x00000d65

00001034 <lsm6dso_i3c_disable_set>:
{
    1034:	b570      	push	{r4, r5, r6, lr}
    1036:	b082      	sub	sp, #8
    1038:	0004      	movs	r4, r0
    103a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    103c:	2301      	movs	r3, #1
    103e:	466a      	mov	r2, sp
    1040:	2118      	movs	r1, #24
    1042:	4e16      	ldr	r6, [pc, #88]	; (109c <lsm6dso_i3c_disable_set+0x68>)
    1044:	47b0      	blx	r6
  if (ret == 0)
    1046:	2800      	cmp	r0, #0
    1048:	d001      	beq.n	104e <lsm6dso_i3c_disable_set+0x1a>
}
    104a:	b002      	add	sp, #8
    104c:	bd70      	pop	{r4, r5, r6, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
    104e:	09ea      	lsrs	r2, r5, #7
    1050:	0052      	lsls	r2, r2, #1
    1052:	466b      	mov	r3, sp
    1054:	781b      	ldrb	r3, [r3, #0]
    1056:	2102      	movs	r1, #2
    1058:	438b      	bics	r3, r1
    105a:	4313      	orrs	r3, r2
    105c:	466a      	mov	r2, sp
    105e:	7013      	strb	r3, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
    1060:	2301      	movs	r3, #1
    1062:	3116      	adds	r1, #22
    1064:	0020      	movs	r0, r4
    1066:	4e0e      	ldr	r6, [pc, #56]	; (10a0 <lsm6dso_i3c_disable_set+0x6c>)
    1068:	47b0      	blx	r6
  if (ret == 0)
    106a:	2800      	cmp	r0, #0
    106c:	d1ed      	bne.n	104a <lsm6dso_i3c_disable_set+0x16>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    106e:	2301      	movs	r3, #1
    1070:	aa01      	add	r2, sp, #4
    1072:	2162      	movs	r1, #98	; 0x62
    1074:	0020      	movs	r0, r4
    1076:	4e09      	ldr	r6, [pc, #36]	; (109c <lsm6dso_i3c_disable_set+0x68>)
    1078:	47b0      	blx	r6
  if (ret == 0)
    107a:	2800      	cmp	r0, #0
    107c:	d1e5      	bne.n	104a <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
    107e:	aa01      	add	r2, sp, #4
    1080:	2103      	movs	r1, #3
    1082:	4029      	ands	r1, r5
    1084:	00cb      	lsls	r3, r1, #3
    1086:	7811      	ldrb	r1, [r2, #0]
    1088:	3018      	adds	r0, #24
    108a:	4381      	bics	r1, r0
    108c:	4319      	orrs	r1, r3
    108e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
    1090:	2301      	movs	r3, #1
    1092:	2162      	movs	r1, #98	; 0x62
    1094:	0020      	movs	r0, r4
    1096:	4c02      	ldr	r4, [pc, #8]	; (10a0 <lsm6dso_i3c_disable_set+0x6c>)
    1098:	47a0      	blx	r4
  return ret;
    109a:	e7d6      	b.n	104a <lsm6dso_i3c_disable_set+0x16>
    109c:	00000d59 	.word	0x00000d59
    10a0:	00000d65 	.word	0x00000d65

000010a4 <lsm6dso_fsm_enable_get>:
{
    10a4:	b570      	push	{r4, r5, r6, lr}
    10a6:	0004      	movs	r4, r0
    10a8:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    10aa:	2102      	movs	r1, #2
    10ac:	4b08      	ldr	r3, [pc, #32]	; (10d0 <lsm6dso_fsm_enable_get+0x2c>)
    10ae:	4798      	blx	r3
  if (ret == 0)
    10b0:	2800      	cmp	r0, #0
    10b2:	d000      	beq.n	10b6 <lsm6dso_fsm_enable_get+0x12>
}
    10b4:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
    10b6:	2302      	movs	r3, #2
    10b8:	002a      	movs	r2, r5
    10ba:	2146      	movs	r1, #70	; 0x46
    10bc:	0020      	movs	r0, r4
    10be:	4d05      	ldr	r5, [pc, #20]	; (10d4 <lsm6dso_fsm_enable_get+0x30>)
    10c0:	47a8      	blx	r5
  if (ret == 0)
    10c2:	2800      	cmp	r0, #0
    10c4:	d1f6      	bne.n	10b4 <lsm6dso_fsm_enable_get+0x10>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    10c6:	2100      	movs	r1, #0
    10c8:	0020      	movs	r0, r4
    10ca:	4b01      	ldr	r3, [pc, #4]	; (10d0 <lsm6dso_fsm_enable_get+0x2c>)
    10cc:	4798      	blx	r3
  return ret;
    10ce:	e7f1      	b.n	10b4 <lsm6dso_fsm_enable_get+0x10>
    10d0:	00000eed 	.word	0x00000eed
    10d4:	00000d59 	.word	0x00000d59

000010d8 <lsm6dso_fsm_data_rate_get>:
{
    10d8:	b570      	push	{r4, r5, r6, lr}
    10da:	b082      	sub	sp, #8
    10dc:	0004      	movs	r4, r0
    10de:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
    10e0:	2102      	movs	r1, #2
    10e2:	4b17      	ldr	r3, [pc, #92]	; (1140 <lsm6dso_fsm_data_rate_get+0x68>)
    10e4:	4798      	blx	r3
  if (ret == 0)
    10e6:	2800      	cmp	r0, #0
    10e8:	d001      	beq.n	10ee <lsm6dso_fsm_data_rate_get+0x16>
}
    10ea:	b002      	add	sp, #8
    10ec:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
    10ee:	2301      	movs	r3, #1
    10f0:	aa01      	add	r2, sp, #4
    10f2:	215f      	movs	r1, #95	; 0x5f
    10f4:	0020      	movs	r0, r4
    10f6:	4e13      	ldr	r6, [pc, #76]	; (1144 <lsm6dso_fsm_data_rate_get+0x6c>)
    10f8:	47b0      	blx	r6
  if (ret == 0)
    10fa:	2800      	cmp	r0, #0
    10fc:	d1f5      	bne.n	10ea <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
    10fe:	ab01      	add	r3, sp, #4
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	06db      	lsls	r3, r3, #27
    1104:	0f9b      	lsrs	r3, r3, #30
    1106:	b2da      	uxtb	r2, r3
    1108:	2a01      	cmp	r2, #1
    110a:	d00f      	beq.n	112c <lsm6dso_fsm_data_rate_get+0x54>
    110c:	2a00      	cmp	r2, #0
    110e:	d006      	beq.n	111e <lsm6dso_fsm_data_rate_get+0x46>
    1110:	2a02      	cmp	r2, #2
    1112:	d00e      	beq.n	1132 <lsm6dso_fsm_data_rate_get+0x5a>
    1114:	2a03      	cmp	r2, #3
    1116:	d00f      	beq.n	1138 <lsm6dso_fsm_data_rate_get+0x60>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    1118:	2300      	movs	r3, #0
    111a:	702b      	strb	r3, [r5, #0]
        break;
    111c:	e001      	b.n	1122 <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_12Hz5;
    111e:	2300      	movs	r3, #0
    1120:	702b      	strb	r3, [r5, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
    1122:	2100      	movs	r1, #0
    1124:	0020      	movs	r0, r4
    1126:	4b06      	ldr	r3, [pc, #24]	; (1140 <lsm6dso_fsm_data_rate_get+0x68>)
    1128:	4798      	blx	r3
  return ret;
    112a:	e7de      	b.n	10ea <lsm6dso_fsm_data_rate_get+0x12>
        *val = LSM6DSO_ODR_FSM_26Hz;
    112c:	2301      	movs	r3, #1
    112e:	702b      	strb	r3, [r5, #0]
        break;
    1130:	e7f7      	b.n	1122 <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_52Hz;
    1132:	2302      	movs	r3, #2
    1134:	702b      	strb	r3, [r5, #0]
        break;
    1136:	e7f4      	b.n	1122 <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_104Hz;
    1138:	2303      	movs	r3, #3
    113a:	702b      	strb	r3, [r5, #0]
        break;
    113c:	e7f1      	b.n	1122 <lsm6dso_fsm_data_rate_get+0x4a>
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	00000eed 	.word	0x00000eed
    1144:	00000d59 	.word	0x00000d59

00001148 <lsm6dso_xl_data_rate_set>:
{
    1148:	b570      	push	{r4, r5, r6, lr}
    114a:	b082      	sub	sp, #8
    114c:	0004      	movs	r4, r0
    114e:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    1150:	a901      	add	r1, sp, #4
    1152:	4b38      	ldr	r3, [pc, #224]	; (1234 <lsm6dso_xl_data_rate_set+0xec>)
    1154:	4798      	blx	r3
  if (ret == 0)
    1156:	2800      	cmp	r0, #0
    1158:	d142      	bne.n	11e0 <lsm6dso_xl_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    115a:	a901      	add	r1, sp, #4
    115c:	780a      	ldrb	r2, [r1, #0]
    115e:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    1160:	0793      	lsls	r3, r2, #30
    1162:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    1164:	0753      	lsls	r3, r2, #29
    1166:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    1168:	0710      	lsls	r0, r2, #28
    116a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    116c:	06d0      	lsls	r0, r2, #27
    116e:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    1170:	0693      	lsls	r3, r2, #26
    1172:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    1174:	0653      	lsls	r3, r2, #25
    1176:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    1178:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    117a:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    117c:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    117e:	784a      	ldrb	r2, [r1, #1]
    1180:	07d1      	lsls	r1, r2, #31
    1182:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    1184:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    1186:	0791      	lsls	r1, r2, #30
    1188:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    118a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    118c:	0751      	lsls	r1, r2, #29
    118e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    1190:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    1192:	0711      	lsls	r1, r2, #28
    1194:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    1196:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    1198:	06d1      	lsls	r1, r2, #27
    119a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    119c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    119e:	0691      	lsls	r1, r2, #26
    11a0:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    11a2:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    11a4:	0651      	lsls	r1, r2, #25
    11a6:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    11a8:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    11aa:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    11ac:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b01      	cmp	r3, #1
    11b2:	d017      	beq.n	11e4 <lsm6dso_xl_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    11b4:	2301      	movs	r3, #1
    11b6:	466a      	mov	r2, sp
    11b8:	2110      	movs	r1, #16
    11ba:	0020      	movs	r0, r4
    11bc:	4e1e      	ldr	r6, [pc, #120]	; (1238 <lsm6dso_xl_data_rate_set+0xf0>)
    11be:	47b0      	blx	r6
  if (ret == 0)
    11c0:	2800      	cmp	r0, #0
    11c2:	d10d      	bne.n	11e0 <lsm6dso_xl_data_rate_set+0x98>
    reg.odr_xl = (uint8_t) odr_xl;
    11c4:	012b      	lsls	r3, r5, #4
    11c6:	466a      	mov	r2, sp
    11c8:	7812      	ldrb	r2, [r2, #0]
    11ca:	250f      	movs	r5, #15
    11cc:	4015      	ands	r5, r2
    11ce:	431d      	orrs	r5, r3
    11d0:	466b      	mov	r3, sp
    11d2:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
    11d4:	2301      	movs	r3, #1
    11d6:	466a      	mov	r2, sp
    11d8:	2110      	movs	r1, #16
    11da:	0020      	movs	r0, r4
    11dc:	4c17      	ldr	r4, [pc, #92]	; (123c <lsm6dso_xl_data_rate_set+0xf4>)
    11de:	47a0      	blx	r4
}
    11e0:	b002      	add	sp, #8
    11e2:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    11e4:	466b      	mov	r3, sp
    11e6:	1cd9      	adds	r1, r3, #3
    11e8:	0020      	movs	r0, r4
    11ea:	4b15      	ldr	r3, [pc, #84]	; (1240 <lsm6dso_xl_data_rate_set+0xf8>)
    11ec:	4798      	blx	r3
      if (ret == 0)
    11ee:	2800      	cmp	r0, #0
    11f0:	d1f6      	bne.n	11e0 <lsm6dso_xl_data_rate_set+0x98>
        switch (fsm_odr)
    11f2:	466b      	mov	r3, sp
    11f4:	3303      	adds	r3, #3
    11f6:	781b      	ldrb	r3, [r3, #0]
    11f8:	2b01      	cmp	r3, #1
    11fa:	d00f      	beq.n	121c <lsm6dso_xl_data_rate_set+0xd4>
    11fc:	2b00      	cmp	r3, #0
    11fe:	d009      	beq.n	1214 <lsm6dso_xl_data_rate_set+0xcc>
    1200:	2b02      	cmp	r3, #2
    1202:	d011      	beq.n	1228 <lsm6dso_xl_data_rate_set+0xe0>
    1204:	2b03      	cmp	r3, #3
    1206:	d1d5      	bne.n	11b4 <lsm6dso_xl_data_rate_set+0x6c>
    1208:	1c2b      	adds	r3, r5, #0
    120a:	2d03      	cmp	r5, #3
    120c:	d800      	bhi.n	1210 <lsm6dso_xl_data_rate_set+0xc8>
    120e:	2304      	movs	r3, #4
    1210:	b2dd      	uxtb	r5, r3
    1212:	e7cf      	b.n	11b4 <lsm6dso_xl_data_rate_set+0x6c>
            if (val == LSM6DSO_XL_ODR_OFF)
    1214:	2d00      	cmp	r5, #0
    1216:	d1cd      	bne.n	11b4 <lsm6dso_xl_data_rate_set+0x6c>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
    1218:	2501      	movs	r5, #1
    121a:	e7cb      	b.n	11b4 <lsm6dso_xl_data_rate_set+0x6c>
    121c:	1c2b      	adds	r3, r5, #0
    121e:	2d01      	cmp	r5, #1
    1220:	d800      	bhi.n	1224 <lsm6dso_xl_data_rate_set+0xdc>
    1222:	2302      	movs	r3, #2
    1224:	b2dd      	uxtb	r5, r3
    1226:	e7c5      	b.n	11b4 <lsm6dso_xl_data_rate_set+0x6c>
    1228:	1c2b      	adds	r3, r5, #0
    122a:	2d02      	cmp	r5, #2
    122c:	d800      	bhi.n	1230 <lsm6dso_xl_data_rate_set+0xe8>
    122e:	2303      	movs	r3, #3
    1230:	b2dd      	uxtb	r5, r3
    1232:	e7bf      	b.n	11b4 <lsm6dso_xl_data_rate_set+0x6c>
    1234:	000010a5 	.word	0x000010a5
    1238:	00000d59 	.word	0x00000d59
    123c:	00000d65 	.word	0x00000d65
    1240:	000010d9 	.word	0x000010d9

00001244 <lsm6dso_gy_data_rate_set>:
{
    1244:	b570      	push	{r4, r5, r6, lr}
    1246:	b082      	sub	sp, #8
    1248:	0004      	movs	r4, r0
    124a:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
    124c:	a901      	add	r1, sp, #4
    124e:	4b38      	ldr	r3, [pc, #224]	; (1330 <lsm6dso_gy_data_rate_set+0xec>)
    1250:	4798      	blx	r3
  if (ret == 0)
    1252:	2800      	cmp	r0, #0
    1254:	d142      	bne.n	12dc <lsm6dso_gy_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    1256:	a901      	add	r1, sp, #4
    1258:	780a      	ldrb	r2, [r1, #0]
    125a:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
    125c:	0793      	lsls	r3, r2, #30
    125e:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
    1260:	0753      	lsls	r3, r2, #29
    1262:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
    1264:	0710      	lsls	r0, r2, #28
    1266:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
    1268:	06d0      	lsls	r0, r2, #27
    126a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
    126c:	0693      	lsls	r3, r2, #26
    126e:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
    1270:	0653      	lsls	r3, r2, #25
    1272:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
    1274:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    1276:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
    1278:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
    127a:	784a      	ldrb	r2, [r1, #1]
    127c:	07d1      	lsls	r1, r2, #31
    127e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
    1280:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
    1282:	0791      	lsls	r1, r2, #30
    1284:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
    1286:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
    1288:	0751      	lsls	r1, r2, #29
    128a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
    128c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
    128e:	0711      	lsls	r1, r2, #28
    1290:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
    1292:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
    1294:	06d1      	lsls	r1, r2, #27
    1296:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
    1298:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
    129a:	0691      	lsls	r1, r2, #26
    129c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
    129e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
    12a0:	0651      	lsls	r1, r2, #25
    12a2:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
    12a4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
    12a6:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
    12a8:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
    12aa:	b2db      	uxtb	r3, r3
    12ac:	2b01      	cmp	r3, #1
    12ae:	d017      	beq.n	12e0 <lsm6dso_gy_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    12b0:	2301      	movs	r3, #1
    12b2:	466a      	mov	r2, sp
    12b4:	2111      	movs	r1, #17
    12b6:	0020      	movs	r0, r4
    12b8:	4e1e      	ldr	r6, [pc, #120]	; (1334 <lsm6dso_gy_data_rate_set+0xf0>)
    12ba:	47b0      	blx	r6
  if (ret == 0)
    12bc:	2800      	cmp	r0, #0
    12be:	d10d      	bne.n	12dc <lsm6dso_gy_data_rate_set+0x98>
    reg.odr_g = (uint8_t) odr_gy;
    12c0:	012b      	lsls	r3, r5, #4
    12c2:	466a      	mov	r2, sp
    12c4:	7812      	ldrb	r2, [r2, #0]
    12c6:	250f      	movs	r5, #15
    12c8:	4015      	ands	r5, r2
    12ca:	431d      	orrs	r5, r3
    12cc:	466b      	mov	r3, sp
    12ce:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
    12d0:	2301      	movs	r3, #1
    12d2:	466a      	mov	r2, sp
    12d4:	2111      	movs	r1, #17
    12d6:	0020      	movs	r0, r4
    12d8:	4c17      	ldr	r4, [pc, #92]	; (1338 <lsm6dso_gy_data_rate_set+0xf4>)
    12da:	47a0      	blx	r4
}
    12dc:	b002      	add	sp, #8
    12de:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
    12e0:	466b      	mov	r3, sp
    12e2:	1cd9      	adds	r1, r3, #3
    12e4:	0020      	movs	r0, r4
    12e6:	4b15      	ldr	r3, [pc, #84]	; (133c <lsm6dso_gy_data_rate_set+0xf8>)
    12e8:	4798      	blx	r3
      if (ret == 0)
    12ea:	2800      	cmp	r0, #0
    12ec:	d1f6      	bne.n	12dc <lsm6dso_gy_data_rate_set+0x98>
        switch (fsm_odr)
    12ee:	466b      	mov	r3, sp
    12f0:	3303      	adds	r3, #3
    12f2:	781b      	ldrb	r3, [r3, #0]
    12f4:	2b01      	cmp	r3, #1
    12f6:	d00f      	beq.n	1318 <lsm6dso_gy_data_rate_set+0xd4>
    12f8:	2b00      	cmp	r3, #0
    12fa:	d009      	beq.n	1310 <lsm6dso_gy_data_rate_set+0xcc>
    12fc:	2b02      	cmp	r3, #2
    12fe:	d011      	beq.n	1324 <lsm6dso_gy_data_rate_set+0xe0>
    1300:	2b03      	cmp	r3, #3
    1302:	d1d5      	bne.n	12b0 <lsm6dso_gy_data_rate_set+0x6c>
    1304:	1c2b      	adds	r3, r5, #0
    1306:	2d03      	cmp	r5, #3
    1308:	d800      	bhi.n	130c <lsm6dso_gy_data_rate_set+0xc8>
    130a:	2304      	movs	r3, #4
    130c:	b2dd      	uxtb	r5, r3
    130e:	e7cf      	b.n	12b0 <lsm6dso_gy_data_rate_set+0x6c>
            if (val == LSM6DSO_GY_ODR_OFF)
    1310:	2d00      	cmp	r5, #0
    1312:	d1cd      	bne.n	12b0 <lsm6dso_gy_data_rate_set+0x6c>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    1314:	2501      	movs	r5, #1
    1316:	e7cb      	b.n	12b0 <lsm6dso_gy_data_rate_set+0x6c>
    1318:	1c2b      	adds	r3, r5, #0
    131a:	2d01      	cmp	r5, #1
    131c:	d800      	bhi.n	1320 <lsm6dso_gy_data_rate_set+0xdc>
    131e:	2302      	movs	r3, #2
    1320:	b2dd      	uxtb	r5, r3
    1322:	e7c5      	b.n	12b0 <lsm6dso_gy_data_rate_set+0x6c>
    1324:	1c2b      	adds	r3, r5, #0
    1326:	2d02      	cmp	r5, #2
    1328:	d800      	bhi.n	132c <lsm6dso_gy_data_rate_set+0xe8>
    132a:	2303      	movs	r3, #3
    132c:	b2dd      	uxtb	r5, r3
    132e:	e7bf      	b.n	12b0 <lsm6dso_gy_data_rate_set+0x6c>
    1330:	000010a5 	.word	0x000010a5
    1334:	00000d59 	.word	0x00000d59
    1338:	00000d65 	.word	0x00000d65
    133c:	000010d9 	.word	0x000010d9

00001340 <GetImuStruct>:
>>>>>>> Stashed changes
=======
    12ec:	2501      	movs	r5, #1
    12ee:	e7cb      	b.n	1288 <lsm6dso_gy_data_rate_set+0x6c>
    12f0:	1c2b      	adds	r3, r5, #0
    12f2:	2d01      	cmp	r5, #1
    12f4:	d800      	bhi.n	12f8 <lsm6dso_gy_data_rate_set+0xdc>
    12f6:	2302      	movs	r3, #2
    12f8:	b2dd      	uxtb	r5, r3
    12fa:	e7c5      	b.n	1288 <lsm6dso_gy_data_rate_set+0x6c>
    12fc:	1c2b      	adds	r3, r5, #0
    12fe:	2d02      	cmp	r5, #2
    1300:	d800      	bhi.n	1304 <lsm6dso_gy_data_rate_set+0xe8>
    1302:	2303      	movs	r3, #3
    1304:	b2dd      	uxtb	r5, r3
    1306:	e7bf      	b.n	1288 <lsm6dso_gy_data_rate_set+0x6c>
    1308:	0000107d 	.word	0x0000107d
    130c:	00000d31 	.word	0x00000d31
    1310:	00000d3d 	.word	0x00000d3d
    1314:	000010b1 	.word	0x000010b1

00001318 <GetImuStruct>:
>>>>>>> parent of 79ffb95 (comment)


stmdev_ctx_t * GetImuStruct(void)
{
return &dev_ctx;
}
<<<<<<< HEAD
<<<<<<< Updated upstream
    12fc:	4800      	ldr	r0, [pc, #0]	; (1300 <GetImuStruct+0x4>)
    12fe:	4770      	bx	lr
    1300:	20000000 	.word	0x20000000

00001304 <InitImu>:
=======
    1340:	4800      	ldr	r0, [pc, #0]	; (1344 <GetImuStruct+0x4>)
    1342:	4770      	bx	lr
    1344:	20000000 	.word	0x20000000

00001348 <InitImu>:
>>>>>>> Stashed changes
=======
    1318:	4800      	ldr	r0, [pc, #0]	; (131c <GetImuStruct+0x4>)
    131a:	4770      	bx	lr
    131c:	20000000 	.word	0x20000000

00001320 <InitImu>:
>>>>>>> parent of 79ffb95 (comment)



int32_t InitImu(void)
{
<<<<<<< HEAD
<<<<<<< Updated upstream
    1304:	b5f0      	push	{r4, r5, r6, r7, lr}
    1306:	b083      	sub	sp, #12
=======
    1348:	b5f0      	push	{r4, r5, r6, r7, lr}
    134a:	b083      	sub	sp, #12
>>>>>>> Stashed changes
=======
    1320:	b5f0      	push	{r4, r5, r6, r7, lr}
    1322:	b083      	sub	sp, #12
>>>>>>> parent of 79ffb95 (comment)
uint8_t rst;
int32_t error = 0;
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
<<<<<<< HEAD
<<<<<<< Updated upstream
    1308:	2101      	movs	r1, #1
    130a:	481b      	ldr	r0, [pc, #108]	; (1378 <InitImu+0x74>)
    130c:	4b1b      	ldr	r3, [pc, #108]	; (137c <InitImu+0x78>)
    130e:	4798      	blx	r3
    1310:	0004      	movs	r4, r0
=======
    1324:	2101      	movs	r1, #1
    1326:	481b      	ldr	r0, [pc, #108]	; (1394 <InitImu+0x74>)
    1328:	4b1b      	ldr	r3, [pc, #108]	; (1398 <InitImu+0x78>)
    132a:	4798      	blx	r3
    132c:	0004      	movs	r4, r0
>>>>>>> parent of 79ffb95 (comment)
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
    132e:	466b      	mov	r3, sp
    1330:	1ddd      	adds	r5, r3, #7
    1332:	4e18      	ldr	r6, [pc, #96]	; (1394 <InitImu+0x74>)
    1334:	4f19      	ldr	r7, [pc, #100]	; (139c <InitImu+0x7c>)
    1336:	0029      	movs	r1, r5
    1338:	0030      	movs	r0, r6
    133a:	47b8      	blx	r7
    133c:	4304      	orrs	r4, r0
  } while (rst);
    133e:	782b      	ldrb	r3, [r5, #0]
    1340:	2b00      	cmp	r3, #0
    1342:	d1f8      	bne.n	1336 <InitImu+0x16>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    1344:	4d13      	ldr	r5, [pc, #76]	; (1394 <InitImu+0x74>)
    1346:	2180      	movs	r1, #128	; 0x80
    1348:	0028      	movs	r0, r5
    134a:	4b15      	ldr	r3, [pc, #84]	; (13a0 <InitImu+0x80>)
    134c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    134e:	2101      	movs	r1, #1
    1350:	0028      	movs	r0, r5
    1352:	4b14      	ldr	r3, [pc, #80]	; (13a4 <InitImu+0x84>)
    1354:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
<<<<<<< HEAD
    133a:	2100      	movs	r1, #0
    133c:	0028      	movs	r0, r5
    133e:	4b13      	ldr	r3, [pc, #76]	; (138c <InitImu+0x88>)
    1340:	4798      	blx	r3
=======
    134c:	2101      	movs	r1, #1
    134e:	481b      	ldr	r0, [pc, #108]	; (13bc <InitImu+0x74>)
    1350:	4b1b      	ldr	r3, [pc, #108]	; (13c0 <InitImu+0x78>)
    1352:	4798      	blx	r3
    1354:	0004      	movs	r4, r0
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
    1356:	466b      	mov	r3, sp
    1358:	1ddd      	adds	r5, r3, #7
    135a:	4e18      	ldr	r6, [pc, #96]	; (13bc <InitImu+0x74>)
    135c:	4f19      	ldr	r7, [pc, #100]	; (13c4 <InitImu+0x7c>)
    135e:	0029      	movs	r1, r5
    1360:	0030      	movs	r0, r6
    1362:	47b8      	blx	r7
    1364:	4304      	orrs	r4, r0
  } while (rst);
    1366:	782b      	ldrb	r3, [r5, #0]
    1368:	2b00      	cmp	r3, #0
    136a:	d1f8      	bne.n	135e <InitImu+0x16>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    136c:	4d13      	ldr	r5, [pc, #76]	; (13bc <InitImu+0x74>)
    136e:	2180      	movs	r1, #128	; 0x80
    1370:	0028      	movs	r0, r5
    1372:	4b15      	ldr	r3, [pc, #84]	; (13c8 <InitImu+0x80>)
    1374:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    1376:	2101      	movs	r1, #1
    1378:	0028      	movs	r0, r5
    137a:	4b14      	ldr	r3, [pc, #80]	; (13cc <InitImu+0x84>)
    137c:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    137e:	2100      	movs	r1, #0
    1380:	0028      	movs	r0, r5
    1382:	4b13      	ldr	r3, [pc, #76]	; (13d0 <InitImu+0x88>)
    1384:	4798      	blx	r3
>>>>>>> Stashed changes
=======
    1356:	2100      	movs	r1, #0
    1358:	0028      	movs	r0, r5
    135a:	4b13      	ldr	r3, [pc, #76]	; (13a8 <InitImu+0x88>)
    135c:	4798      	blx	r3
>>>>>>> parent of 79ffb95 (comment)
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
<<<<<<< HEAD
<<<<<<< Updated upstream
    1342:	2101      	movs	r1, #1
    1344:	0028      	movs	r0, r5
    1346:	4b12      	ldr	r3, [pc, #72]	; (1390 <InitImu+0x8c>)
    1348:	4798      	blx	r3
=======
    135e:	2101      	movs	r1, #1
    1360:	0028      	movs	r0, r5
    1362:	4b12      	ldr	r3, [pc, #72]	; (13ac <InitImu+0x8c>)
    1364:	4798      	blx	r3
>>>>>>> parent of 79ffb95 (comment)
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
    1366:	2101      	movs	r1, #1
    1368:	0028      	movs	r0, r5
    136a:	4b11      	ldr	r3, [pc, #68]	; (13b0 <InitImu+0x90>)
    136c:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    136e:	2100      	movs	r1, #0
    1370:	0028      	movs	r0, r5
    1372:	4b10      	ldr	r3, [pc, #64]	; (13b4 <InitImu+0x94>)
    1374:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    1376:	2106      	movs	r1, #6
    1378:	0028      	movs	r0, r5
    137a:	4b0f      	ldr	r3, [pc, #60]	; (13b8 <InitImu+0x98>)
    137c:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    137e:	2104      	movs	r1, #4
    1380:	0028      	movs	r0, r5
    1382:	4b0e      	ldr	r3, [pc, #56]	; (13bc <InitImu+0x9c>)
    1384:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    1386:	2101      	movs	r1, #1
    1388:	0028      	movs	r0, r5
    138a:	4b0d      	ldr	r3, [pc, #52]	; (13c0 <InitImu+0xa0>)
    138c:	4798      	blx	r3

  return error;
}
<<<<<<< HEAD
    1372:	0020      	movs	r0, r4
    1374:	b003      	add	sp, #12
    1376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1378:	20000000 	.word	0x20000000
    137c:	00000ef9 	.word	0x00000ef9
    1380:	00000f35 	.word	0x00000f35
    1384:	00000ff1 	.word	0x00000ff1
    1388:	00000dc9 	.word	0x00000dc9
    138c:	00000e09 	.word	0x00000e09
    1390:	00001105 	.word	0x00001105
    1394:	00001201 	.word	0x00001201
    1398:	00000d49 	.word	0x00000d49
    139c:	00000d89 	.word	0x00000d89
    13a0:	00000f99 	.word	0x00000f99
    13a4:	00000f59 	.word	0x00000f59

000013a8 <SeesawActivateKey>:
=======
    1386:	2101      	movs	r1, #1
    1388:	0028      	movs	r0, r5
    138a:	4b12      	ldr	r3, [pc, #72]	; (13d4 <InitImu+0x8c>)
    138c:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
    138e:	2101      	movs	r1, #1
    1390:	0028      	movs	r0, r5
    1392:	4b11      	ldr	r3, [pc, #68]	; (13d8 <InitImu+0x90>)
    1394:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    1396:	2100      	movs	r1, #0
    1398:	0028      	movs	r0, r5
    139a:	4b10      	ldr	r3, [pc, #64]	; (13dc <InitImu+0x94>)
    139c:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    139e:	2106      	movs	r1, #6
    13a0:	0028      	movs	r0, r5
    13a2:	4b0f      	ldr	r3, [pc, #60]	; (13e0 <InitImu+0x98>)
    13a4:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    13a6:	2104      	movs	r1, #4
    13a8:	0028      	movs	r0, r5
    13aa:	4b0e      	ldr	r3, [pc, #56]	; (13e4 <InitImu+0x9c>)
    13ac:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    13ae:	2101      	movs	r1, #1
    13b0:	0028      	movs	r0, r5
    13b2:	4b0d      	ldr	r3, [pc, #52]	; (13e8 <InitImu+0xa0>)
    13b4:	4798      	blx	r3

  return error;
}
    13b6:	0020      	movs	r0, r4
    13b8:	b003      	add	sp, #12
    13ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13bc:	20000000 	.word	0x20000000
    13c0:	00000f3d 	.word	0x00000f3d
    13c4:	00000f79 	.word	0x00000f79
    13c8:	00001035 	.word	0x00001035
    13cc:	00000e0d 	.word	0x00000e0d
    13d0:	00000e4d 	.word	0x00000e4d
    13d4:	00001149 	.word	0x00001149
    13d8:	00001245 	.word	0x00001245
    13dc:	00000d8d 	.word	0x00000d8d
    13e0:	00000dcd 	.word	0x00000dcd
    13e4:	00000fdd 	.word	0x00000fdd
    13e8:	00000f9d 	.word	0x00000f9d

000013ec <SeesawActivateKey>:
>>>>>>> Stashed changes
=======
    138e:	0020      	movs	r0, r4
    1390:	b003      	add	sp, #12
    1392:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1394:	20000000 	.word	0x20000000
    1398:	00000f15 	.word	0x00000f15
    139c:	00000f51 	.word	0x00000f51
    13a0:	0000100d 	.word	0x0000100d
    13a4:	00000de5 	.word	0x00000de5
    13a8:	00000e25 	.word	0x00000e25
    13ac:	00001121 	.word	0x00001121
    13b0:	0000121d 	.word	0x0000121d
    13b4:	00000d65 	.word	0x00000d65
    13b8:	00000da5 	.word	0x00000da5
    13bc:	00000fb5 	.word	0x00000fb5
    13c0:	00000f75 	.word	0x00000f75

000013c4 <SeesawActivateKey>:
>>>>>>> parent of 79ffb95 (comment)
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
<<<<<<< HEAD
<<<<<<< Updated upstream
    13a8:	b510      	push	{r4, lr}
    13aa:	b082      	sub	sp, #8
=======
    13c4:	b510      	push	{r4, lr}
    13c6:	b082      	sub	sp, #8
>>>>>>> parent of 79ffb95 (comment)
	union keyState ks;
	ks.bit.STATE = enable;
    13c8:	2401      	movs	r4, #1
	ks.bit.ACTIVE = (1 << edge);
    13ca:	0023      	movs	r3, r4
    13cc:	408b      	lsls	r3, r1
    13ce:	210f      	movs	r1, #15
    13d0:	4019      	ands	r1, r3
    13d2:	0049      	lsls	r1, r1, #1
    13d4:	2301      	movs	r3, #1
    13d6:	401a      	ands	r2, r3
    13d8:	430a      	orrs	r2, r1
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
    13da:	ab01      	add	r3, sp, #4
    13dc:	2110      	movs	r1, #16
    13de:	7019      	strb	r1, [r3, #0]
    13e0:	705c      	strb	r4, [r3, #1]
    13e2:	7098      	strb	r0, [r3, #2]
    13e4:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
    13e6:	4806      	ldr	r0, [pc, #24]	; (1400 <SeesawActivateKey+0x3c>)
    13e8:	222e      	movs	r2, #46	; 0x2e
    13ea:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &cmd;
    13ec:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(cmd);
    13ee:	2304      	movs	r3, #4
    13f0:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
    13f2:	2300      	movs	r3, #0
    13f4:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    13f6:	3154      	adds	r1, #84	; 0x54
    13f8:	4b02      	ldr	r3, [pc, #8]	; (1404 <SeesawActivateKey+0x40>)
    13fa:	4798      	blx	r3
	return error;
}
    13fc:	b002      	add	sp, #8
    13fe:	bd10      	pop	{r4, pc}
    1400:	200038f4 	.word	0x200038f4
    1404:	00000bc9 	.word	0x00000bc9

<<<<<<< HEAD
000013ec <SeesawSetLed>:
=======
    13ec:	b510      	push	{r4, lr}
    13ee:	b082      	sub	sp, #8
	union keyState ks;
	ks.bit.STATE = enable;
    13f0:	2401      	movs	r4, #1
	ks.bit.ACTIVE = (1 << edge);
    13f2:	0023      	movs	r3, r4
    13f4:	408b      	lsls	r3, r1
    13f6:	210f      	movs	r1, #15
    13f8:	4019      	ands	r1, r3
    13fa:	0049      	lsls	r1, r1, #1
    13fc:	2301      	movs	r3, #1
    13fe:	401a      	ands	r2, r3
    1400:	430a      	orrs	r2, r1
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
    1402:	ab01      	add	r3, sp, #4
    1404:	2110      	movs	r1, #16
    1406:	7019      	strb	r1, [r3, #0]
    1408:	705c      	strb	r4, [r3, #1]
    140a:	7098      	strb	r0, [r3, #2]
    140c:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
    140e:	4806      	ldr	r0, [pc, #24]	; (1428 <SeesawActivateKey+0x3c>)
    1410:	222e      	movs	r2, #46	; 0x2e
    1412:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &cmd;
    1414:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(cmd);
    1416:	2304      	movs	r3, #4
    1418:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
    141a:	2300      	movs	r3, #0
    141c:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    141e:	3154      	adds	r1, #84	; 0x54
    1420:	4b02      	ldr	r3, [pc, #8]	; (142c <SeesawActivateKey+0x40>)
    1422:	4798      	blx	r3
	return error;
}
    1424:	b002      	add	sp, #8
    1426:	bd10      	pop	{r4, pc}
    1428:	20003934 	.word	0x20003934
    142c:	00000bdd 	.word	0x00000bdd

00001430 <SeesawSetLed>:
>>>>>>> Stashed changes
=======
00001408 <SeesawSetLed>:
>>>>>>> parent of 79ffb95 (comment)
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
<<<<<<< HEAD
<<<<<<< Updated upstream
    13ec:	b530      	push	{r4, r5, lr}
    13ee:	b083      	sub	sp, #12
=======
    1408:	b530      	push	{r4, r5, lr}
    140a:	b083      	sub	sp, #12
>>>>>>> parent of 79ffb95 (comment)
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
    140c:	240e      	movs	r4, #14
    140e:	466d      	mov	r5, sp
    1410:	702c      	strb	r4, [r5, #0]
    1412:	3c0a      	subs	r4, #10
    1414:	706c      	strb	r4, [r5, #1]
    1416:	712a      	strb	r2, [r5, #4]
    1418:	7169      	strb	r1, [r5, #5]
    141a:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
    141c:	0043      	lsls	r3, r0, #1
    141e:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
    1420:	0a03      	lsrs	r3, r0, #8
    1422:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
    1424:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
    1426:	4804      	ldr	r0, [pc, #16]	; (1438 <SeesawSetLed+0x30>)
    1428:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
    142a:	2307      	movs	r3, #7
    142c:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    142e:	2164      	movs	r1, #100	; 0x64
    1430:	4b02      	ldr	r3, [pc, #8]	; (143c <SeesawSetLed+0x34>)
    1432:	4798      	blx	r3
	return error;

}
    1434:	b003      	add	sp, #12
    1436:	bd30      	pop	{r4, r5, pc}
    1438:	200038f4 	.word	0x200038f4
    143c:	00000bc9 	.word	0x00000bc9

<<<<<<< HEAD
00001424 <SeesawOrderLedUpdate>:
=======
    1430:	b530      	push	{r4, r5, lr}
    1432:	b083      	sub	sp, #12
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
    1434:	240e      	movs	r4, #14
    1436:	466d      	mov	r5, sp
    1438:	702c      	strb	r4, [r5, #0]
    143a:	3c0a      	subs	r4, #10
    143c:	706c      	strb	r4, [r5, #1]
    143e:	712a      	strb	r2, [r5, #4]
    1440:	7169      	strb	r1, [r5, #5]
    1442:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
    1444:	0043      	lsls	r3, r0, #1
    1446:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
    1448:	0a03      	lsrs	r3, r0, #8
    144a:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
    144c:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
    144e:	4804      	ldr	r0, [pc, #16]	; (1460 <SeesawSetLed+0x30>)
    1450:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
    1452:	2307      	movs	r3, #7
    1454:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    1456:	2164      	movs	r1, #100	; 0x64
    1458:	4b02      	ldr	r3, [pc, #8]	; (1464 <SeesawSetLed+0x34>)
    145a:	4798      	blx	r3
	return error;

}
    145c:	b003      	add	sp, #12
    145e:	bd30      	pop	{r4, r5, pc}
    1460:	20003934 	.word	0x20003934
    1464:	00000bdd 	.word	0x00000bdd

00001468 <SeesawOrderLedUpdate>:
>>>>>>> Stashed changes
=======
00001440 <SeesawOrderLedUpdate>:
>>>>>>> parent of 79ffb95 (comment)
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
<<<<<<< HEAD
<<<<<<< Updated upstream
    1424:	b500      	push	{lr}
    1426:	b083      	sub	sp, #12
=======
    1440:	b500      	push	{lr}
    1442:	b083      	sub	sp, #12
>>>>>>> parent of 79ffb95 (comment)
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
    1444:	ab01      	add	r3, sp, #4
    1446:	4a06      	ldr	r2, [pc, #24]	; (1460 <SeesawOrderLedUpdate+0x20>)
    1448:	8892      	ldrh	r2, [r2, #4]
    144a:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
    144c:	4805      	ldr	r0, [pc, #20]	; (1464 <SeesawOrderLedUpdate+0x24>)
    144e:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
    1450:	2302      	movs	r3, #2
    1452:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    1454:	2164      	movs	r1, #100	; 0x64
    1456:	4b04      	ldr	r3, [pc, #16]	; (1468 <SeesawOrderLedUpdate+0x28>)
    1458:	4798      	blx	r3
	return error;
}
    145a:	b003      	add	sp, #12
    145c:	bd00      	pop	{pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	00009908 	.word	0x00009908
    1464:	200038f4 	.word	0x200038f4
    1468:	00000bc9 	.word	0x00000bc9

0000146c <InitializeSeesaw>:
{
    146c:	b5f0      	push	{r4, r5, r6, r7, lr}
    146e:	46ce      	mov	lr, r9
    1470:	b500      	push	{lr}
    1472:	b084      	sub	sp, #16
	seesawData.address = NEO_TRELLIS_ADDR;
    1474:	484b      	ldr	r0, [pc, #300]	; (15a4 <InitializeSeesaw+0x138>)
    1476:	232e      	movs	r3, #46	; 0x2e
    1478:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgBaseGetHWID;
    147a:	4b4b      	ldr	r3, [pc, #300]	; (15a8 <InitializeSeesaw+0x13c>)
    147c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
    147e:	2302      	movs	r3, #2
    1480:	81c3      	strh	r3, [r0, #14]
	seesawData.msgIn = &readData;
    1482:	ab03      	add	r3, sp, #12
    1484:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
    1486:	2301      	movs	r3, #1
    1488:	8183      	strh	r3, [r0, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
    148a:	2264      	movs	r2, #100	; 0x64
    148c:	2100      	movs	r1, #0
    148e:	4b47      	ldr	r3, [pc, #284]	; (15ac <InitializeSeesaw+0x140>)
    1490:	4798      	blx	r3
	if(ERROR_NONE != error)
    1492:	2800      	cmp	r0, #0
    1494:	d10d      	bne.n	14b2 <InitializeSeesaw+0x46>
		if(readData[0] != SEESAW_HW_ID_CODE )
    1496:	ab03      	add	r3, sp, #12
    1498:	781b      	ldrb	r3, [r3, #0]
    149a:	2b55      	cmp	r3, #85	; 0x55
    149c:	d04f      	beq.n	153e <InitializeSeesaw+0xd2>
			SerialConsoleWriteString("Error/r/n");
    149e:	4844      	ldr	r0, [pc, #272]	; (15b0 <InitializeSeesaw+0x144>)
    14a0:	4b44      	ldr	r3, [pc, #272]	; (15b4 <InitializeSeesaw+0x148>)
    14a2:	4798      	blx	r3
			return 1;
    14a4:	2301      	movs	r3, #1
    14a6:	9301      	str	r3, [sp, #4]
}
    14a8:	9801      	ldr	r0, [sp, #4]
    14aa:	b004      	add	sp, #16
    14ac:	bc04      	pop	{r2}
    14ae:	4691      	mov	r9, r2
    14b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SerialConsoleWriteString("Error initializing Seesaw!\r\n"); //here, error - Derek
    14b2:	4841      	ldr	r0, [pc, #260]	; (15b8 <InitializeSeesaw+0x14c>)
    14b4:	4b3f      	ldr	r3, [pc, #252]	; (15b4 <InitializeSeesaw+0x148>)
    14b6:	4798      	blx	r3
	seesawData.msgOut = &msgNeopixelPin;
    14b8:	483a      	ldr	r0, [pc, #232]	; (15a4 <InitializeSeesaw+0x138>)
    14ba:	4b40      	ldr	r3, [pc, #256]	; (15bc <InitializeSeesaw+0x150>)
    14bc:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
    14be:	2303      	movs	r3, #3
    14c0:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    14c2:	2164      	movs	r1, #100	; 0x64
    14c4:	4b3e      	ldr	r3, [pc, #248]	; (15c0 <InitializeSeesaw+0x154>)
    14c6:	4798      	blx	r3
	if(ERROR_NONE != error)
    14c8:	2800      	cmp	r0, #0
    14ca:	d13c      	bne.n	1546 <InitializeSeesaw+0xda>
	seesawData.msgOut = &msgNeopixelSpeed;
    14cc:	4835      	ldr	r0, [pc, #212]	; (15a4 <InitializeSeesaw+0x138>)
    14ce:	4b3d      	ldr	r3, [pc, #244]	; (15c4 <InitializeSeesaw+0x158>)
    14d0:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
    14d2:	2303      	movs	r3, #3
    14d4:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    14d6:	2164      	movs	r1, #100	; 0x64
    14d8:	4b39      	ldr	r3, [pc, #228]	; (15c0 <InitializeSeesaw+0x154>)
    14da:	4798      	blx	r3
	if(ERROR_NONE != error)
    14dc:	2800      	cmp	r0, #0
    14de:	d136      	bne.n	154e <InitializeSeesaw+0xe2>
	seesawData.msgOut = &msgNeopixelBufLength;
    14e0:	4830      	ldr	r0, [pc, #192]	; (15a4 <InitializeSeesaw+0x138>)
    14e2:	4b39      	ldr	r3, [pc, #228]	; (15c8 <InitializeSeesaw+0x15c>)
    14e4:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
    14e6:	2304      	movs	r3, #4
    14e8:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    14ea:	2164      	movs	r1, #100	; 0x64
    14ec:	4b34      	ldr	r3, [pc, #208]	; (15c0 <InitializeSeesaw+0x154>)
    14ee:	4798      	blx	r3
    14f0:	9001      	str	r0, [sp, #4]
	if(ERROR_NONE != error)
<<<<<<< HEAD
    14e8:	2800      	cmp	r0, #0
    14ea:	d12f      	bne.n	154c <InitializeSeesaw+0xfc>
=======
    1468:	b500      	push	{lr}
    146a:	b083      	sub	sp, #12
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
    146c:	ab01      	add	r3, sp, #4
    146e:	4a06      	ldr	r2, [pc, #24]	; (1488 <SeesawOrderLedUpdate+0x20>)
    1470:	8892      	ldrh	r2, [r2, #4]
    1472:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
    1474:	4805      	ldr	r0, [pc, #20]	; (148c <SeesawOrderLedUpdate+0x24>)
    1476:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
    1478:	2302      	movs	r3, #2
    147a:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    147c:	2164      	movs	r1, #100	; 0x64
    147e:	4b04      	ldr	r3, [pc, #16]	; (1490 <SeesawOrderLedUpdate+0x28>)
    1480:	4798      	blx	r3
	return error;
}
    1482:	b003      	add	sp, #12
    1484:	bd00      	pop	{pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	00009940 	.word	0x00009940
    148c:	20003934 	.word	0x20003934
    1490:	00000bdd 	.word	0x00000bdd

00001494 <InitializeSeesaw>:
{
    1494:	b5f0      	push	{r4, r5, r6, r7, lr}
    1496:	46ce      	mov	lr, r9
    1498:	b500      	push	{lr}
    149a:	b084      	sub	sp, #16
	seesawData.address = NEO_TRELLIS_ADDR;
    149c:	484b      	ldr	r0, [pc, #300]	; (15cc <InitializeSeesaw+0x138>)
    149e:	232e      	movs	r3, #46	; 0x2e
    14a0:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgBaseGetHWID;
    14a2:	4b4b      	ldr	r3, [pc, #300]	; (15d0 <InitializeSeesaw+0x13c>)
    14a4:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
    14a6:	2302      	movs	r3, #2
    14a8:	81c3      	strh	r3, [r0, #14]
	seesawData.msgIn = &readData;
    14aa:	ab03      	add	r3, sp, #12
    14ac:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
    14ae:	2301      	movs	r3, #1
    14b0:	8183      	strh	r3, [r0, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
    14b2:	2264      	movs	r2, #100	; 0x64
    14b4:	2100      	movs	r1, #0
    14b6:	4b47      	ldr	r3, [pc, #284]	; (15d4 <InitializeSeesaw+0x140>)
    14b8:	4798      	blx	r3
	if(ERROR_NONE != error)
    14ba:	2800      	cmp	r0, #0
    14bc:	d10d      	bne.n	14da <InitializeSeesaw+0x46>
		if(readData[0] != SEESAW_HW_ID_CODE )
    14be:	ab03      	add	r3, sp, #12
    14c0:	781b      	ldrb	r3, [r3, #0]
    14c2:	2b55      	cmp	r3, #85	; 0x55
    14c4:	d04f      	beq.n	1566 <InitializeSeesaw+0xd2>
			SerialConsoleWriteString("Error\r\n");
    14c6:	4844      	ldr	r0, [pc, #272]	; (15d8 <InitializeSeesaw+0x144>)
    14c8:	4b44      	ldr	r3, [pc, #272]	; (15dc <InitializeSeesaw+0x148>)
    14ca:	4798      	blx	r3
			return 1;
    14cc:	2301      	movs	r3, #1
    14ce:	9301      	str	r3, [sp, #4]
}
    14d0:	9801      	ldr	r0, [sp, #4]
    14d2:	b004      	add	sp, #16
    14d4:	bc04      	pop	{r2}
    14d6:	4691      	mov	r9, r2
    14d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SerialConsoleWriteString("Error initializing Seesaw!\r\n"); //here, error - Derek
    14da:	4841      	ldr	r0, [pc, #260]	; (15e0 <InitializeSeesaw+0x14c>)
    14dc:	4b3f      	ldr	r3, [pc, #252]	; (15dc <InitializeSeesaw+0x148>)
    14de:	4798      	blx	r3
	seesawData.msgOut = &msgNeopixelPin;
    14e0:	483a      	ldr	r0, [pc, #232]	; (15cc <InitializeSeesaw+0x138>)
    14e2:	4b40      	ldr	r3, [pc, #256]	; (15e4 <InitializeSeesaw+0x150>)
    14e4:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
    14e6:	2303      	movs	r3, #3
    14e8:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    14ea:	2164      	movs	r1, #100	; 0x64
    14ec:	4b3e      	ldr	r3, [pc, #248]	; (15e8 <InitializeSeesaw+0x154>)
    14ee:	4798      	blx	r3
	if(ERROR_NONE != error)
    14f0:	2800      	cmp	r0, #0
    14f2:	d13c      	bne.n	156e <InitializeSeesaw+0xda>
	seesawData.msgOut = &msgNeopixelSpeed;
    14f4:	4835      	ldr	r0, [pc, #212]	; (15cc <InitializeSeesaw+0x138>)
    14f6:	4b3d      	ldr	r3, [pc, #244]	; (15ec <InitializeSeesaw+0x158>)
    14f8:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
    14fa:	2303      	movs	r3, #3
    14fc:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    14fe:	2164      	movs	r1, #100	; 0x64
    1500:	4b39      	ldr	r3, [pc, #228]	; (15e8 <InitializeSeesaw+0x154>)
    1502:	4798      	blx	r3
	if(ERROR_NONE != error)
    1504:	2800      	cmp	r0, #0
    1506:	d136      	bne.n	1576 <InitializeSeesaw+0xe2>
	seesawData.msgOut = &msgNeopixelBufLength;
    1508:	4830      	ldr	r0, [pc, #192]	; (15cc <InitializeSeesaw+0x138>)
    150a:	4b39      	ldr	r3, [pc, #228]	; (15f0 <InitializeSeesaw+0x15c>)
    150c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
    150e:	2304      	movs	r3, #4
    1510:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    1512:	2164      	movs	r1, #100	; 0x64
    1514:	4b34      	ldr	r3, [pc, #208]	; (15e8 <InitializeSeesaw+0x154>)
    1516:	4798      	blx	r3
    1518:	9001      	str	r0, [sp, #4]
	if(ERROR_NONE != error)
    151a:	2800      	cmp	r0, #0
    151c:	d12f      	bne.n	157e <InitializeSeesaw+0xea>
>>>>>>> Stashed changes
=======
    14f2:	2800      	cmp	r0, #0
    14f4:	d12f      	bne.n	1556 <InitializeSeesaw+0xea>
>>>>>>> parent of 79ffb95 (comment)
}


static void SeesawTurnOnLedTest(void)
{
	SeesawSetLed(15, 255, 255, 255);
<<<<<<< HEAD
<<<<<<< Updated upstream
    14ec:	23ff      	movs	r3, #255	; 0xff
    14ee:	22ff      	movs	r2, #255	; 0xff
    14f0:	21ff      	movs	r1, #255	; 0xff
    14f2:	200f      	movs	r0, #15
    14f4:	4e35      	ldr	r6, [pc, #212]	; (15cc <InitializeSeesaw+0x17c>)
    14f6:	47b0      	blx	r6
=======
    14f6:	23ff      	movs	r3, #255	; 0xff
    14f8:	22ff      	movs	r2, #255	; 0xff
    14fa:	21ff      	movs	r1, #255	; 0xff
    14fc:	200f      	movs	r0, #15
    14fe:	4e33      	ldr	r6, [pc, #204]	; (15cc <InitializeSeesaw+0x160>)
    1500:	47b0      	blx	r6
>>>>>>> parent of 79ffb95 (comment)
	SeesawOrderLedUpdate();
    1502:	4c33      	ldr	r4, [pc, #204]	; (15d0 <InitializeSeesaw+0x164>)
    1504:	47a0      	blx	r4
	vTaskDelay(400);
    1506:	20c8      	movs	r0, #200	; 0xc8
    1508:	0040      	lsls	r0, r0, #1
    150a:	4b32      	ldr	r3, [pc, #200]	; (15d4 <InitializeSeesaw+0x168>)
    150c:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
    150e:	2300      	movs	r3, #0
    1510:	2200      	movs	r2, #0
    1512:	2100      	movs	r1, #0
    1514:	200f      	movs	r0, #15
    1516:	47b0      	blx	r6
	SeesawOrderLedUpdate();
    1518:	47a0      	blx	r4
	seesawData.address = NEO_TRELLIS_ADDR;
    151a:	4822      	ldr	r0, [pc, #136]	; (15a4 <InitializeSeesaw+0x138>)
    151c:	232e      	movs	r3, #46	; 0x2e
    151e:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
    1520:	4b2d      	ldr	r3, [pc, #180]	; (15d8 <InitializeSeesaw+0x16c>)
    1522:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
    1524:	2303      	movs	r3, #3
    1526:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
    1528:	2300      	movs	r3, #0
    152a:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    152c:	2164      	movs	r1, #100	; 0x64
    152e:	4b24      	ldr	r3, [pc, #144]	; (15c0 <InitializeSeesaw+0x154>)
    1530:	4798      	blx	r3
	if(ERROR_NONE != error)
    1532:	2800      	cmp	r0, #0
    1534:	d113      	bne.n	155e <InitializeSeesaw+0xf2>
{
    1536:	2600      	movs	r6, #0
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    1538:	2703      	movs	r7, #3
    153a:	4d28      	ldr	r5, [pc, #160]	; (15dc <InitializeSeesaw+0x170>)
    153c:	e016      	b.n	156c <InitializeSeesaw+0x100>
		SerialConsoleWriteString("Found Seesaw!/r/n");
    153e:	4828      	ldr	r0, [pc, #160]	; (15e0 <InitializeSeesaw+0x174>)
    1540:	4b1c      	ldr	r3, [pc, #112]	; (15b4 <InitializeSeesaw+0x148>)
    1542:	4798      	blx	r3
    1544:	e7b8      	b.n	14b8 <InitializeSeesaw+0x4c>
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
    1546:	4827      	ldr	r0, [pc, #156]	; (15e4 <InitializeSeesaw+0x178>)
    1548:	4b1a      	ldr	r3, [pc, #104]	; (15b4 <InitializeSeesaw+0x148>)
    154a:	4798      	blx	r3
    154c:	e7be      	b.n	14cc <InitializeSeesaw+0x60>
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
    154e:	4826      	ldr	r0, [pc, #152]	; (15e8 <InitializeSeesaw+0x17c>)
    1550:	4b18      	ldr	r3, [pc, #96]	; (15b4 <InitializeSeesaw+0x148>)
    1552:	4798      	blx	r3
    1554:	e7c4      	b.n	14e0 <InitializeSeesaw+0x74>
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
    1556:	4825      	ldr	r0, [pc, #148]	; (15ec <InitializeSeesaw+0x180>)
    1558:	4b16      	ldr	r3, [pc, #88]	; (15b4 <InitializeSeesaw+0x148>)
    155a:	4798      	blx	r3
    155c:	e7cb      	b.n	14f6 <InitializeSeesaw+0x8a>
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    155e:	4824      	ldr	r0, [pc, #144]	; (15f0 <InitializeSeesaw+0x184>)
    1560:	4b14      	ldr	r3, [pc, #80]	; (15b4 <InitializeSeesaw+0x148>)
    1562:	4798      	blx	r3
    1564:	e7e7      	b.n	1536 <InitializeSeesaw+0xca>
	for(int i=0; i<16; i++){
    1566:	3601      	adds	r6, #1
    1568:	2e10      	cmp	r6, #16
    156a:	d09d      	beq.n	14a8 <InitializeSeesaw+0x3c>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    156c:	17f2      	asrs	r2, r6, #31
    156e:	003c      	movs	r4, r7
    1570:	4014      	ands	r4, r2
    1572:	19a4      	adds	r4, r4, r6
    1574:	10a4      	asrs	r4, r4, #2
    1576:	00e4      	lsls	r4, r4, #3
    1578:	0f92      	lsrs	r2, r2, #30
    157a:	18b3      	adds	r3, r6, r2
    157c:	403b      	ands	r3, r7
    157e:	1a9b      	subs	r3, r3, r2
    1580:	18e4      	adds	r4, r4, r3
    1582:	b2e4      	uxtb	r4, r4
    1584:	2201      	movs	r2, #1
    1586:	0039      	movs	r1, r7
    1588:	0020      	movs	r0, r4
    158a:	47a8      	blx	r5
    158c:	4681      	mov	r9, r0
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
    158e:	2201      	movs	r2, #1
    1590:	2102      	movs	r1, #2
    1592:	0020      	movs	r0, r4
    1594:	47a8      	blx	r5
    1596:	464b      	mov	r3, r9
    1598:	4303      	orrs	r3, r0
		if(ERROR_NONE != error)
    159a:	d0e4      	beq.n	1566 <InitializeSeesaw+0xfa>
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    159c:	4814      	ldr	r0, [pc, #80]	; (15f0 <InitializeSeesaw+0x184>)
    159e:	4b05      	ldr	r3, [pc, #20]	; (15b4 <InitializeSeesaw+0x148>)
    15a0:	4798      	blx	r3
    15a2:	e7e0      	b.n	1566 <InitializeSeesaw+0xfa>
    15a4:	200038f4 	.word	0x200038f4
    15a8:	000099f4 	.word	0x000099f4
    15ac:	00000c29 	.word	0x00000c29
    15b0:	00009930 	.word	0x00009930
    15b4:	0000572d 	.word	0x0000572d
    15b8:	00009910 	.word	0x00009910
    15bc:	00009a00 	.word	0x00009a00
    15c0:	00000bc9 	.word	0x00000bc9
    15c4:	00009a04 	.word	0x00009a04
    15c8:	000099fc 	.word	0x000099fc
    15cc:	00001409 	.word	0x00001409
    15d0:	00001441 	.word	0x00001441
    15d4:	00004909 	.word	0x00004909
    15d8:	000099f8 	.word	0x000099f8
    15dc:	000013c5 	.word	0x000013c5
    15e0:	0000993c 	.word	0x0000993c
    15e4:	00009950 	.word	0x00009950
    15e8:	00009970 	.word	0x00009970
    15ec:	0000999c 	.word	0x0000999c
    15f0:	000099d0 	.word	0x000099d0

000015f4 <vUiHandlerTask>:
=======
    151e:	23ff      	movs	r3, #255	; 0xff
    1520:	22ff      	movs	r2, #255	; 0xff
    1522:	21ff      	movs	r1, #255	; 0xff
    1524:	200f      	movs	r0, #15
    1526:	4e33      	ldr	r6, [pc, #204]	; (15f4 <InitializeSeesaw+0x160>)
    1528:	47b0      	blx	r6
	SeesawOrderLedUpdate();
    152a:	4c33      	ldr	r4, [pc, #204]	; (15f8 <InitializeSeesaw+0x164>)
    152c:	47a0      	blx	r4
	vTaskDelay(400);
    152e:	20c8      	movs	r0, #200	; 0xc8
    1530:	0040      	lsls	r0, r0, #1
    1532:	4b32      	ldr	r3, [pc, #200]	; (15fc <InitializeSeesaw+0x168>)
    1534:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
    1536:	2300      	movs	r3, #0
    1538:	2200      	movs	r2, #0
    153a:	2100      	movs	r1, #0
    153c:	200f      	movs	r0, #15
    153e:	47b0      	blx	r6
	SeesawOrderLedUpdate();
    1540:	47a0      	blx	r4
	seesawData.address = NEO_TRELLIS_ADDR;
    1542:	4822      	ldr	r0, [pc, #136]	; (15cc <InitializeSeesaw+0x138>)
    1544:	232e      	movs	r3, #46	; 0x2e
    1546:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
    1548:	4b2d      	ldr	r3, [pc, #180]	; (1600 <InitializeSeesaw+0x16c>)
    154a:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
    154c:	2303      	movs	r3, #3
    154e:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
    1550:	2300      	movs	r3, #0
    1552:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    1554:	2164      	movs	r1, #100	; 0x64
    1556:	4b24      	ldr	r3, [pc, #144]	; (15e8 <InitializeSeesaw+0x154>)
    1558:	4798      	blx	r3
	if(ERROR_NONE != error)
    155a:	2800      	cmp	r0, #0
    155c:	d113      	bne.n	1586 <InitializeSeesaw+0xf2>
{
    155e:	2600      	movs	r6, #0
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    1560:	2703      	movs	r7, #3
    1562:	4d28      	ldr	r5, [pc, #160]	; (1604 <InitializeSeesaw+0x170>)
    1564:	e016      	b.n	1594 <InitializeSeesaw+0x100>
		SerialConsoleWriteString("Found Seesaw!\r\n");
    1566:	4828      	ldr	r0, [pc, #160]	; (1608 <InitializeSeesaw+0x174>)
    1568:	4b1c      	ldr	r3, [pc, #112]	; (15dc <InitializeSeesaw+0x148>)
    156a:	4798      	blx	r3
    156c:	e7b8      	b.n	14e0 <InitializeSeesaw+0x4c>
		SerialConsoleWriteString("Could not write Seesaw pin!\r\n");
    156e:	4827      	ldr	r0, [pc, #156]	; (160c <InitializeSeesaw+0x178>)
    1570:	4b1a      	ldr	r3, [pc, #104]	; (15dc <InitializeSeesaw+0x148>)
    1572:	4798      	blx	r3
    1574:	e7be      	b.n	14f4 <InitializeSeesaw+0x60>
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!\r\n");
    1576:	4826      	ldr	r0, [pc, #152]	; (1610 <InitializeSeesaw+0x17c>)
    1578:	4b18      	ldr	r3, [pc, #96]	; (15dc <InitializeSeesaw+0x148>)
    157a:	4798      	blx	r3
    157c:	e7c4      	b.n	1508 <InitializeSeesaw+0x74>
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices\r\n");
    157e:	4825      	ldr	r0, [pc, #148]	; (1614 <InitializeSeesaw+0x180>)
    1580:	4b16      	ldr	r3, [pc, #88]	; (15dc <InitializeSeesaw+0x148>)
    1582:	4798      	blx	r3
    1584:	e7cb      	b.n	151e <InitializeSeesaw+0x8a>
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    1586:	4824      	ldr	r0, [pc, #144]	; (1618 <InitializeSeesaw+0x184>)
    1588:	4b14      	ldr	r3, [pc, #80]	; (15dc <InitializeSeesaw+0x148>)
    158a:	4798      	blx	r3
    158c:	e7e7      	b.n	155e <InitializeSeesaw+0xca>
	for(int i=0; i<16; i++){
    158e:	3601      	adds	r6, #1
    1590:	2e10      	cmp	r6, #16
    1592:	d09d      	beq.n	14d0 <InitializeSeesaw+0x3c>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    1594:	17f2      	asrs	r2, r6, #31
    1596:	003c      	movs	r4, r7
    1598:	4014      	ands	r4, r2
    159a:	19a4      	adds	r4, r4, r6
    159c:	10a4      	asrs	r4, r4, #2
    159e:	00e4      	lsls	r4, r4, #3
    15a0:	0f92      	lsrs	r2, r2, #30
    15a2:	18b3      	adds	r3, r6, r2
    15a4:	403b      	ands	r3, r7
    15a6:	1a9b      	subs	r3, r3, r2
    15a8:	18e4      	adds	r4, r4, r3
    15aa:	b2e4      	uxtb	r4, r4
    15ac:	2201      	movs	r2, #1
    15ae:	0039      	movs	r1, r7
    15b0:	0020      	movs	r0, r4
    15b2:	47a8      	blx	r5
    15b4:	4681      	mov	r9, r0
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
    15b6:	2201      	movs	r2, #1
    15b8:	2102      	movs	r1, #2
    15ba:	0020      	movs	r0, r4
    15bc:	47a8      	blx	r5
    15be:	464b      	mov	r3, r9
    15c0:	4303      	orrs	r3, r0
		if(ERROR_NONE != error)
    15c2:	d0e4      	beq.n	158e <InitializeSeesaw+0xfa>
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    15c4:	4814      	ldr	r0, [pc, #80]	; (1618 <InitializeSeesaw+0x184>)
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <InitializeSeesaw+0x148>)
    15c8:	4798      	blx	r3
    15ca:	e7e0      	b.n	158e <InitializeSeesaw+0xfa>
    15cc:	20003934 	.word	0x20003934
    15d0:	00009a20 	.word	0x00009a20
    15d4:	00000c3d 	.word	0x00000c3d
    15d8:	00009968 	.word	0x00009968
    15dc:	0000574d 	.word	0x0000574d
    15e0:	00009948 	.word	0x00009948
    15e4:	00009a2c 	.word	0x00009a2c
    15e8:	00000bdd 	.word	0x00000bdd
    15ec:	00009a30 	.word	0x00009a30
    15f0:	00009a28 	.word	0x00009a28
    15f4:	00001431 	.word	0x00001431
    15f8:	00001469 	.word	0x00001469
    15fc:	00004929 	.word	0x00004929
    1600:	00009a24 	.word	0x00009a24
    1604:	000013ed 	.word	0x000013ed
    1608:	00009970 	.word	0x00009970
    160c:	00009980 	.word	0x00009980
    1610:	000099a0 	.word	0x000099a0
    1614:	000099c8 	.word	0x000099c8
    1618:	000099fc 	.word	0x000099fc

0000161c <vUiHandlerTask>:
>>>>>>> Stashed changes
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vUiHandlerTask( void *pvParameters )
{
    161c:	b570      	push	{r4, r5, r6, lr}
//Do initialization code here
SerialConsoleWriteString("UI Task Started!");
    161e:	4808      	ldr	r0, [pc, #32]	; (1640 <vUiHandlerTask+0x24>)
    1620:	4b08      	ldr	r3, [pc, #32]	; (1644 <vUiHandlerTask+0x28>)
    1622:	4798      	blx	r3
uiState = UI_STATE_HANDLE_BUTTONS;
    1624:	2200      	movs	r2, #0
    1626:	4b08      	ldr	r3, [pc, #32]	; (1648 <vUiHandlerTask+0x2c>)
    1628:	701a      	strb	r2, [r3, #0]
			uiState = UI_STATE_HANDLE_BUTTONS;
		break;
	}

	//After execution, you can put a thread to sleep for some time.
	vTaskDelay(50);
    162a:	4d08      	ldr	r5, [pc, #32]	; (164c <vUiHandlerTask+0x30>)
	switch(uiState)
    162c:	001c      	movs	r4, r3
			uiState = UI_STATE_HANDLE_BUTTONS;
    162e:	001e      	movs	r6, r3
	vTaskDelay(50);
    1630:	2032      	movs	r0, #50	; 0x32
    1632:	47a8      	blx	r5
	switch(uiState)
    1634:	7823      	ldrb	r3, [r4, #0]
    1636:	2b02      	cmp	r3, #2
    1638:	d9fa      	bls.n	1630 <vUiHandlerTask+0x14>
			uiState = UI_STATE_HANDLE_BUTTONS;
    163a:	2300      	movs	r3, #0
    163c:	7033      	strb	r3, [r6, #0]
		break;
<<<<<<< Updated upstream
    1616:	e7f7      	b.n	1608 <vUiHandlerTask+0x14>
    1618:	00009a08 	.word	0x00009a08
    161c:	0000572d 	.word	0x0000572d
    1620:	20003904 	.word	0x20003904
    1624:	00004909 	.word	0x00004909
=======
    163e:	e7f7      	b.n	1630 <vUiHandlerTask+0x14>
    1640:	00009a34 	.word	0x00009a34
    1644:	0000574d 	.word	0x0000574d
    1648:	20003944 	.word	0x20003944
    164c:	00004929 	.word	0x00004929
>>>>>>> Stashed changes

00001650 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1650:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1652:	2207      	movs	r2, #7
    1654:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1656:	421a      	tst	r2, r3
    1658:	d1fc      	bne.n	1654 <_i2c_master_wait_for_sync+0x4>
}
    165a:	4770      	bx	lr

0000165c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    165c:	b5f0      	push	{r4, r5, r6, r7, lr}
    165e:	46d6      	mov	lr, sl
    1660:	464f      	mov	r7, r9
    1662:	4646      	mov	r6, r8
    1664:	b5c0      	push	{r6, r7, lr}
    1666:	b08a      	sub	sp, #40	; 0x28
    1668:	0006      	movs	r6, r0
    166a:	000f      	movs	r7, r1
    166c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    166e:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1670:	0008      	movs	r0, r1
    1672:	4ba0      	ldr	r3, [pc, #640]	; (18f4 <i2c_master_init+0x298>)
    1674:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1676:	4aa0      	ldr	r2, [pc, #640]	; (18f8 <i2c_master_init+0x29c>)
    1678:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    167a:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    167c:	2301      	movs	r3, #1
    167e:	40ab      	lsls	r3, r5
    1680:	430b      	orrs	r3, r1
    1682:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1684:	a909      	add	r1, sp, #36	; 0x24
    1686:	7b23      	ldrb	r3, [r4, #12]
    1688:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    168a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    168c:	b2c5      	uxtb	r5, r0
    168e:	0028      	movs	r0, r5
    1690:	4b9a      	ldr	r3, [pc, #616]	; (18fc <i2c_master_init+0x2a0>)
    1692:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1694:	0028      	movs	r0, r5
    1696:	4b9a      	ldr	r3, [pc, #616]	; (1900 <i2c_master_init+0x2a4>)
    1698:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    169a:	7b20      	ldrb	r0, [r4, #12]
    169c:	2100      	movs	r1, #0
    169e:	4b99      	ldr	r3, [pc, #612]	; (1904 <i2c_master_init+0x2a8>)
    16a0:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    16a2:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    16a4:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    16a6:	079b      	lsls	r3, r3, #30
    16a8:	d505      	bpl.n	16b6 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    16aa:	b00a      	add	sp, #40	; 0x28
    16ac:	bc1c      	pop	{r2, r3, r4}
    16ae:	4690      	mov	r8, r2
    16b0:	4699      	mov	r9, r3
    16b2:	46a2      	mov	sl, r4
    16b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    16b6:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    16b8:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    16ba:	07db      	lsls	r3, r3, #31
    16bc:	d4f5      	bmi.n	16aa <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    16be:	6830      	ldr	r0, [r6, #0]
    16c0:	4b8c      	ldr	r3, [pc, #560]	; (18f4 <i2c_master_init+0x298>)
    16c2:	4699      	mov	r9, r3
    16c4:	4798      	blx	r3
    16c6:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    16c8:	498f      	ldr	r1, [pc, #572]	; (1908 <i2c_master_init+0x2ac>)
    16ca:	4b90      	ldr	r3, [pc, #576]	; (190c <i2c_master_init+0x2b0>)
    16cc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    16ce:	00ad      	lsls	r5, r5, #2
    16d0:	4b8f      	ldr	r3, [pc, #572]	; (1910 <i2c_master_init+0x2b4>)
    16d2:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    16d4:	2300      	movs	r3, #0
    16d6:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    16d8:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    16da:	2500      	movs	r5, #0
    16dc:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    16de:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    16e0:	2225      	movs	r2, #37	; 0x25
    16e2:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    16e4:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    16e6:	3314      	adds	r3, #20
    16e8:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16ea:	6833      	ldr	r3, [r6, #0]
    16ec:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    16ee:	0018      	movs	r0, r3
    16f0:	47c8      	blx	r9
    16f2:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    16f4:	2380      	movs	r3, #128	; 0x80
    16f6:	aa08      	add	r2, sp, #32
    16f8:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    16fa:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    16fc:	2301      	movs	r3, #1
    16fe:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    1700:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    1702:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1704:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1706:	2800      	cmp	r0, #0
    1708:	d100      	bne.n	170c <i2c_master_init+0xb0>
    170a:	e0af      	b.n	186c <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    170c:	ab08      	add	r3, sp, #32
    170e:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1710:	2302      	movs	r3, #2
    1712:	aa08      	add	r2, sp, #32
    1714:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1716:	0c00      	lsrs	r0, r0, #16
    1718:	b2c0      	uxtb	r0, r0
    171a:	0011      	movs	r1, r2
    171c:	4b7d      	ldr	r3, [pc, #500]	; (1914 <i2c_master_init+0x2b8>)
    171e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    1720:	2f00      	cmp	r7, #0
    1722:	d100      	bne.n	1726 <i2c_master_init+0xca>
    1724:	e0a7      	b.n	1876 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    1726:	ab08      	add	r3, sp, #32
    1728:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    172a:	2302      	movs	r3, #2
    172c:	aa08      	add	r2, sp, #32
    172e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1730:	0c3f      	lsrs	r7, r7, #16
    1732:	b2f8      	uxtb	r0, r7
    1734:	0011      	movs	r1, r2
    1736:	4b77      	ldr	r3, [pc, #476]	; (1914 <i2c_master_init+0x2b8>)
    1738:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    173a:	8aa3      	ldrh	r3, [r4, #20]
    173c:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    173e:	8ae3      	ldrh	r3, [r4, #22]
    1740:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    1742:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1744:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1746:	2b00      	cmp	r3, #0
    1748:	d104      	bne.n	1754 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    174a:	4b73      	ldr	r3, [pc, #460]	; (1918 <i2c_master_init+0x2bc>)
    174c:	789b      	ldrb	r3, [r3, #2]
    174e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1750:	0fdb      	lsrs	r3, r3, #31
    1752:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1754:	68a1      	ldr	r1, [r4, #8]
    1756:	6923      	ldr	r3, [r4, #16]
    1758:	430b      	orrs	r3, r1
    175a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    175c:	2224      	movs	r2, #36	; 0x24
    175e:	5ca2      	ldrb	r2, [r4, r2]
    1760:	2a00      	cmp	r2, #0
    1762:	d002      	beq.n	176a <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1764:	2280      	movs	r2, #128	; 0x80
    1766:	05d2      	lsls	r2, r2, #23
    1768:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    176a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    176c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    176e:	222c      	movs	r2, #44	; 0x2c
    1770:	5ca2      	ldrb	r2, [r4, r2]
    1772:	2a00      	cmp	r2, #0
    1774:	d103      	bne.n	177e <i2c_master_init+0x122>
    1776:	2280      	movs	r2, #128	; 0x80
    1778:	0492      	lsls	r2, r2, #18
    177a:	4291      	cmp	r1, r2
    177c:	d102      	bne.n	1784 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    177e:	2280      	movs	r2, #128	; 0x80
    1780:	0512      	lsls	r2, r2, #20
    1782:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1784:	222d      	movs	r2, #45	; 0x2d
    1786:	5ca2      	ldrb	r2, [r4, r2]
    1788:	2a00      	cmp	r2, #0
    178a:	d002      	beq.n	1792 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    178c:	2280      	movs	r2, #128	; 0x80
    178e:	0412      	lsls	r2, r2, #16
    1790:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    1792:	222e      	movs	r2, #46	; 0x2e
    1794:	5ca2      	ldrb	r2, [r4, r2]
    1796:	2a00      	cmp	r2, #0
    1798:	d002      	beq.n	17a0 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    179a:	2280      	movs	r2, #128	; 0x80
    179c:	03d2      	lsls	r2, r2, #15
    179e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    17a0:	4642      	mov	r2, r8
    17a2:	6812      	ldr	r2, [r2, #0]
    17a4:	4313      	orrs	r3, r2
    17a6:	4642      	mov	r2, r8
    17a8:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    17aa:	2380      	movs	r3, #128	; 0x80
    17ac:	005b      	lsls	r3, r3, #1
    17ae:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    17b0:	4648      	mov	r0, r9
    17b2:	3014      	adds	r0, #20
    17b4:	b2c0      	uxtb	r0, r0
    17b6:	4b59      	ldr	r3, [pc, #356]	; (191c <i2c_master_init+0x2c0>)
    17b8:	4798      	blx	r3
    17ba:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    17bc:	23fa      	movs	r3, #250	; 0xfa
    17be:	009b      	lsls	r3, r3, #2
    17c0:	6822      	ldr	r2, [r4, #0]
    17c2:	435a      	muls	r2, r3
    17c4:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    17c6:	6863      	ldr	r3, [r4, #4]
    17c8:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    17ca:	4d55      	ldr	r5, [pc, #340]	; (1920 <i2c_master_init+0x2c4>)
    17cc:	47a8      	blx	r5
    17ce:	9000      	str	r0, [sp, #0]
    17d0:	9101      	str	r1, [sp, #4]
    17d2:	464b      	mov	r3, r9
    17d4:	0058      	lsls	r0, r3, #1
    17d6:	47a8      	blx	r5
    17d8:	9002      	str	r0, [sp, #8]
    17da:	9103      	str	r1, [sp, #12]
    17dc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    17de:	47a8      	blx	r5
    17e0:	9004      	str	r0, [sp, #16]
    17e2:	9105      	str	r1, [sp, #20]
    17e4:	4f4f      	ldr	r7, [pc, #316]	; (1924 <i2c_master_init+0x2c8>)
    17e6:	4a50      	ldr	r2, [pc, #320]	; (1928 <i2c_master_init+0x2cc>)
    17e8:	4b50      	ldr	r3, [pc, #320]	; (192c <i2c_master_init+0x2d0>)
    17ea:	9800      	ldr	r0, [sp, #0]
    17ec:	9901      	ldr	r1, [sp, #4]
    17ee:	47b8      	blx	r7
    17f0:	0002      	movs	r2, r0
    17f2:	000b      	movs	r3, r1
    17f4:	9804      	ldr	r0, [sp, #16]
    17f6:	9905      	ldr	r1, [sp, #20]
    17f8:	47b8      	blx	r7
    17fa:	4e4d      	ldr	r6, [pc, #308]	; (1930 <i2c_master_init+0x2d4>)
    17fc:	2200      	movs	r2, #0
    17fe:	4b4d      	ldr	r3, [pc, #308]	; (1934 <i2c_master_init+0x2d8>)
    1800:	47b0      	blx	r6
    1802:	9004      	str	r0, [sp, #16]
    1804:	9105      	str	r1, [sp, #20]
    1806:	4648      	mov	r0, r9
    1808:	47a8      	blx	r5
    180a:	0002      	movs	r2, r0
    180c:	000b      	movs	r3, r1
    180e:	9804      	ldr	r0, [sp, #16]
    1810:	9905      	ldr	r1, [sp, #20]
    1812:	47b8      	blx	r7
    1814:	0002      	movs	r2, r0
    1816:	000b      	movs	r3, r1
    1818:	4d47      	ldr	r5, [pc, #284]	; (1938 <i2c_master_init+0x2dc>)
    181a:	9800      	ldr	r0, [sp, #0]
    181c:	9901      	ldr	r1, [sp, #4]
    181e:	47a8      	blx	r5
    1820:	9a02      	ldr	r2, [sp, #8]
    1822:	9b03      	ldr	r3, [sp, #12]
    1824:	47b0      	blx	r6
    1826:	2200      	movs	r2, #0
    1828:	4b44      	ldr	r3, [pc, #272]	; (193c <i2c_master_init+0x2e0>)
    182a:	47a8      	blx	r5
    182c:	9a02      	ldr	r2, [sp, #8]
    182e:	9b03      	ldr	r3, [sp, #12]
    1830:	4d43      	ldr	r5, [pc, #268]	; (1940 <i2c_master_init+0x2e4>)
    1832:	47a8      	blx	r5
    1834:	4b43      	ldr	r3, [pc, #268]	; (1944 <i2c_master_init+0x2e8>)
    1836:	4798      	blx	r3
    1838:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    183a:	2380      	movs	r3, #128	; 0x80
    183c:	049b      	lsls	r3, r3, #18
    183e:	68a2      	ldr	r2, [r4, #8]
    1840:	429a      	cmp	r2, r3
    1842:	d01e      	beq.n	1882 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1844:	0003      	movs	r3, r0
    1846:	2040      	movs	r0, #64	; 0x40
    1848:	2dff      	cmp	r5, #255	; 0xff
    184a:	d900      	bls.n	184e <i2c_master_init+0x1f2>
    184c:	e72d      	b.n	16aa <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    184e:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    1850:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1852:	25ff      	movs	r5, #255	; 0xff
    1854:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1856:	0624      	lsls	r4, r4, #24
    1858:	4325      	orrs	r5, r4
    185a:	0400      	lsls	r0, r0, #16
    185c:	23ff      	movs	r3, #255	; 0xff
    185e:	041b      	lsls	r3, r3, #16
    1860:	4018      	ands	r0, r3
    1862:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1864:	4643      	mov	r3, r8
    1866:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    1868:	2000      	movs	r0, #0
    186a:	e71e      	b.n	16aa <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    186c:	2100      	movs	r1, #0
    186e:	4640      	mov	r0, r8
    1870:	4b35      	ldr	r3, [pc, #212]	; (1948 <i2c_master_init+0x2ec>)
    1872:	4798      	blx	r3
    1874:	e74a      	b.n	170c <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1876:	2101      	movs	r1, #1
    1878:	4640      	mov	r0, r8
    187a:	4b33      	ldr	r3, [pc, #204]	; (1948 <i2c_master_init+0x2ec>)
    187c:	4798      	blx	r3
    187e:	0007      	movs	r7, r0
    1880:	e751      	b.n	1726 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1882:	26fa      	movs	r6, #250	; 0xfa
    1884:	00b6      	lsls	r6, r6, #2
    1886:	4653      	mov	r3, sl
    1888:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    188a:	9800      	ldr	r0, [sp, #0]
    188c:	9901      	ldr	r1, [sp, #4]
    188e:	0002      	movs	r2, r0
    1890:	000b      	movs	r3, r1
    1892:	4c27      	ldr	r4, [pc, #156]	; (1930 <i2c_master_init+0x2d4>)
    1894:	47a0      	blx	r4
    1896:	9000      	str	r0, [sp, #0]
    1898:	9101      	str	r1, [sp, #4]
    189a:	0030      	movs	r0, r6
    189c:	4b20      	ldr	r3, [pc, #128]	; (1920 <i2c_master_init+0x2c4>)
    189e:	4798      	blx	r3
    18a0:	2200      	movs	r2, #0
    18a2:	4b2a      	ldr	r3, [pc, #168]	; (194c <i2c_master_init+0x2f0>)
    18a4:	47b8      	blx	r7
    18a6:	0002      	movs	r2, r0
    18a8:	000b      	movs	r3, r1
    18aa:	9800      	ldr	r0, [sp, #0]
    18ac:	9901      	ldr	r1, [sp, #4]
    18ae:	4c24      	ldr	r4, [pc, #144]	; (1940 <i2c_master_init+0x2e4>)
    18b0:	47a0      	blx	r4
    18b2:	2200      	movs	r2, #0
    18b4:	4b21      	ldr	r3, [pc, #132]	; (193c <i2c_master_init+0x2e0>)
    18b6:	4c20      	ldr	r4, [pc, #128]	; (1938 <i2c_master_init+0x2dc>)
    18b8:	47a0      	blx	r4
    18ba:	4b22      	ldr	r3, [pc, #136]	; (1944 <i2c_master_init+0x2e8>)
    18bc:	4798      	blx	r3
    18be:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    18c0:	d00c      	beq.n	18dc <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    18c2:	0031      	movs	r1, r6
    18c4:	9807      	ldr	r0, [sp, #28]
    18c6:	4b22      	ldr	r3, [pc, #136]	; (1950 <i2c_master_init+0x2f4>)
    18c8:	4798      	blx	r3
    18ca:	3802      	subs	r0, #2
    18cc:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    18ce:	002b      	movs	r3, r5
    18d0:	2dff      	cmp	r5, #255	; 0xff
    18d2:	d80c      	bhi.n	18ee <i2c_master_init+0x292>
    18d4:	28ff      	cmp	r0, #255	; 0xff
    18d6:	d9bc      	bls.n	1852 <i2c_master_init+0x1f6>
    18d8:	2040      	movs	r0, #64	; 0x40
    18da:	e6e6      	b.n	16aa <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    18dc:	0071      	lsls	r1, r6, #1
    18de:	1e48      	subs	r0, r1, #1
    18e0:	9b07      	ldr	r3, [sp, #28]
    18e2:	469c      	mov	ip, r3
    18e4:	4460      	add	r0, ip
    18e6:	4b1a      	ldr	r3, [pc, #104]	; (1950 <i2c_master_init+0x2f4>)
    18e8:	4798      	blx	r3
    18ea:	3801      	subs	r0, #1
    18ec:	e7ef      	b.n	18ce <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    18ee:	2040      	movs	r0, #64	; 0x40
    18f0:	e6db      	b.n	16aa <i2c_master_init+0x4e>
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	00005d61 	.word	0x00005d61
    18f8:	40000400 	.word	0x40000400
    18fc:	00006a0d 	.word	0x00006a0d
    1900:	00006981 	.word	0x00006981
    1904:	00005b9d 	.word	0x00005b9d
    1908:	00000375 	.word	0x00000375
    190c:	00005d9d 	.word	0x00005d9d
    1910:	20004e1c 	.word	0x20004e1c
    1914:	00006b35 	.word	0x00006b35
    1918:	41002000 	.word	0x41002000
    191c:	00006a29 	.word	0x00006a29
    1920:	00008c19 	.word	0x00008c19
    1924:	00008085 	.word	0x00008085
    1928:	e826d695 	.word	0xe826d695
    192c:	3e112e0b 	.word	0x3e112e0b
    1930:	000073fd 	.word	0x000073fd
    1934:	40240000 	.word	0x40240000
    1938:	00008585 	.word	0x00008585
    193c:	3ff00000 	.word	0x3ff00000
    1940:	00007a1d 	.word	0x00007a1d
    1944:	00008bb1 	.word	0x00008bb1
    1948:	00005be9 	.word	0x00005be9
    194c:	40080000 	.word	0x40080000
    1950:	00006f71 	.word	0x00006f71

00001954 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    1954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1956:	46ce      	mov	lr, r9
    1958:	4647      	mov	r7, r8
    195a:	b580      	push	{r7, lr}
    195c:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    195e:	6803      	ldr	r3, [r0, #0]
    1960:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    1962:	4e14      	ldr	r6, [pc, #80]	; (19b4 <i2c_master_reset+0x60>)
    1964:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1966:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1968:	0028      	movs	r0, r5
    196a:	4b13      	ldr	r3, [pc, #76]	; (19b8 <i2c_master_reset+0x64>)
    196c:	4698      	mov	r8, r3
    196e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1970:	231f      	movs	r3, #31
    1972:	4018      	ands	r0, r3
    1974:	2701      	movs	r7, #1
    1976:	0039      	movs	r1, r7
    1978:	4081      	lsls	r1, r0
    197a:	3361      	adds	r3, #97	; 0x61
    197c:	4a0f      	ldr	r2, [pc, #60]	; (19bc <i2c_master_reset+0x68>)
    197e:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1980:	0020      	movs	r0, r4
    1982:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    1984:	2383      	movs	r3, #131	; 0x83
    1986:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1988:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    198a:	682b      	ldr	r3, [r5, #0]
    198c:	2202      	movs	r2, #2
    198e:	4393      	bics	r3, r2
    1990:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    1992:	4b0b      	ldr	r3, [pc, #44]	; (19c0 <i2c_master_reset+0x6c>)
    1994:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    1996:	6820      	ldr	r0, [r4, #0]
    1998:	47c0      	blx	r8
    199a:	4b0a      	ldr	r3, [pc, #40]	; (19c4 <i2c_master_reset+0x70>)
    199c:	4798      	blx	r3
	cpu_irq_leave_critical();
    199e:	4b0a      	ldr	r3, [pc, #40]	; (19c8 <i2c_master_reset+0x74>)
    19a0:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    19a2:	0020      	movs	r0, r4
    19a4:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    19a6:	464b      	mov	r3, r9
    19a8:	601f      	str	r7, [r3, #0]
}
    19aa:	bc0c      	pop	{r2, r3}
    19ac:	4690      	mov	r8, r2
    19ae:	4699      	mov	r9, r3
    19b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	00001651 	.word	0x00001651
    19b8:	00005dd9 	.word	0x00005dd9
    19bc:	e000e100 	.word	0xe000e100
    19c0:	0000583d 	.word	0x0000583d
    19c4:	00006a5d 	.word	0x00006a5d
    19c8:	0000587d 	.word	0x0000587d

000019cc <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19cc:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    19ce:	7e1a      	ldrb	r2, [r3, #24]
    19d0:	0792      	lsls	r2, r2, #30
    19d2:	d507      	bpl.n	19e4 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    19d4:	2202      	movs	r2, #2
    19d6:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    19d8:	8b5b      	ldrh	r3, [r3, #26]
    19da:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    19dc:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    19de:	17db      	asrs	r3, r3, #31
    19e0:	4018      	ands	r0, r3
}
    19e2:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    19e4:	8b5a      	ldrh	r2, [r3, #26]
    19e6:	0752      	lsls	r2, r2, #29
    19e8:	d506      	bpl.n	19f8 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    19ea:	6859      	ldr	r1, [r3, #4]
    19ec:	22c0      	movs	r2, #192	; 0xc0
    19ee:	0292      	lsls	r2, r2, #10
    19f0:	430a      	orrs	r2, r1
    19f2:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    19f4:	2018      	movs	r0, #24
    19f6:	e7f4      	b.n	19e2 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    19f8:	2000      	movs	r0, #0
    19fa:	e7f2      	b.n	19e2 <_i2c_master_address_response+0x16>

000019fc <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    19fc:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19fe:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1a00:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1a02:	2401      	movs	r4, #1
    1a04:	2502      	movs	r5, #2
    1a06:	7e11      	ldrb	r1, [r2, #24]
    1a08:	4221      	tst	r1, r4
    1a0a:	d10b      	bne.n	1a24 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1a0c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1a0e:	4229      	tst	r1, r5
    1a10:	d106      	bne.n	1a20 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    1a12:	3301      	adds	r3, #1
    1a14:	b29b      	uxth	r3, r3
    1a16:	8901      	ldrh	r1, [r0, #8]
    1a18:	4299      	cmp	r1, r3
    1a1a:	d8f4      	bhi.n	1a06 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    1a1c:	2012      	movs	r0, #18
    1a1e:	e002      	b.n	1a26 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    1a20:	2000      	movs	r0, #0
    1a22:	e000      	b.n	1a26 <_i2c_master_wait_for_bus+0x2a>
    1a24:	2000      	movs	r0, #0
}
    1a26:	bd30      	pop	{r4, r5, pc}

00001a28 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1a28:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1a2a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1a2c:	6862      	ldr	r2, [r4, #4]
    1a2e:	2380      	movs	r3, #128	; 0x80
    1a30:	02db      	lsls	r3, r3, #11
    1a32:	4313      	orrs	r3, r2
    1a34:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1a36:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1a38:	4b02      	ldr	r3, [pc, #8]	; (1a44 <_i2c_master_send_hs_master_code+0x1c>)
    1a3a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1a3c:	2301      	movs	r3, #1
    1a3e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1a40:	bd10      	pop	{r4, pc}
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	000019fd 	.word	0x000019fd

00001a48 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1a48:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1a4a:	0080      	lsls	r0, r0, #2
    1a4c:	4b16      	ldr	r3, [pc, #88]	; (1aa8 <_tc_interrupt_handler+0x60>)
    1a4e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1a50:	6823      	ldr	r3, [r4, #0]
    1a52:	7b9d      	ldrb	r5, [r3, #14]
    1a54:	7e22      	ldrb	r2, [r4, #24]
    1a56:	7e63      	ldrb	r3, [r4, #25]
    1a58:	4013      	ands	r3, r2
    1a5a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1a5c:	07eb      	lsls	r3, r5, #31
    1a5e:	d406      	bmi.n	1a6e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1a60:	07ab      	lsls	r3, r5, #30
    1a62:	d40b      	bmi.n	1a7c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1a64:	06eb      	lsls	r3, r5, #27
    1a66:	d410      	bmi.n	1a8a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1a68:	06ab      	lsls	r3, r5, #26
    1a6a:	d415      	bmi.n	1a98 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1a6c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1a6e:	0020      	movs	r0, r4
    1a70:	68a3      	ldr	r3, [r4, #8]
    1a72:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1a74:	2301      	movs	r3, #1
    1a76:	6822      	ldr	r2, [r4, #0]
    1a78:	7393      	strb	r3, [r2, #14]
    1a7a:	e7f1      	b.n	1a60 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1a7c:	0020      	movs	r0, r4
    1a7e:	68e3      	ldr	r3, [r4, #12]
    1a80:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1a82:	2302      	movs	r3, #2
    1a84:	6822      	ldr	r2, [r4, #0]
    1a86:	7393      	strb	r3, [r2, #14]
    1a88:	e7ec      	b.n	1a64 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1a8a:	0020      	movs	r0, r4
    1a8c:	6923      	ldr	r3, [r4, #16]
    1a8e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1a90:	2310      	movs	r3, #16
    1a92:	6822      	ldr	r2, [r4, #0]
    1a94:	7393      	strb	r3, [r2, #14]
    1a96:	e7e7      	b.n	1a68 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1a98:	0020      	movs	r0, r4
    1a9a:	6963      	ldr	r3, [r4, #20]
    1a9c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1a9e:	6823      	ldr	r3, [r4, #0]
    1aa0:	2220      	movs	r2, #32
    1aa2:	739a      	strb	r2, [r3, #14]
}
    1aa4:	e7e2      	b.n	1a6c <_tc_interrupt_handler+0x24>
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	20003948 	.word	0x20003948

00001aac <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1aac:	b510      	push	{r4, lr}
    1aae:	2000      	movs	r0, #0
    1ab0:	4b01      	ldr	r3, [pc, #4]	; (1ab8 <TC3_Handler+0xc>)
    1ab2:	4798      	blx	r3
    1ab4:	bd10      	pop	{r4, pc}
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	00001a49 	.word	0x00001a49

00001abc <TC4_Handler>:
    1abc:	b510      	push	{r4, lr}
    1abe:	2001      	movs	r0, #1
    1ac0:	4b01      	ldr	r3, [pc, #4]	; (1ac8 <TC4_Handler+0xc>)
    1ac2:	4798      	blx	r3
    1ac4:	bd10      	pop	{r4, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	00001a49 	.word	0x00001a49

00001acc <TC5_Handler>:
    1acc:	b510      	push	{r4, lr}
    1ace:	2002      	movs	r0, #2
    1ad0:	4b01      	ldr	r3, [pc, #4]	; (1ad8 <TC5_Handler+0xc>)
    1ad2:	4798      	blx	r3
    1ad4:	bd10      	pop	{r4, pc}
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	00001a49 	.word	0x00001a49

00001adc <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    1adc:	b570      	push	{r4, r5, r6, lr}
    1ade:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    1ae0:	4b09      	ldr	r3, [pc, #36]	; (1b08 <prvHelpCommand+0x2c>)
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d00a      	beq.n	1afe <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    1ae8:	4c07      	ldr	r4, [pc, #28]	; (1b08 <prvHelpCommand+0x2c>)
    1aea:	6825      	ldr	r5, [r4, #0]
    1aec:	682b      	ldr	r3, [r5, #0]
    1aee:	6859      	ldr	r1, [r3, #4]
    1af0:	4b06      	ldr	r3, [pc, #24]	; (1b0c <prvHelpCommand+0x30>)
    1af2:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    1af4:	6868      	ldr	r0, [r5, #4]
    1af6:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
    1af8:	1e43      	subs	r3, r0, #1
    1afa:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
    1afc:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
    1afe:	4904      	ldr	r1, [pc, #16]	; (1b10 <prvHelpCommand+0x34>)
    1b00:	4b01      	ldr	r3, [pc, #4]	; (1b08 <prvHelpCommand+0x2c>)
    1b02:	6019      	str	r1, [r3, #0]
    1b04:	e7f0      	b.n	1ae8 <prvHelpCommand+0xc>
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	20000330 	.word	0x20000330
    1b0c:	00008fcd 	.word	0x00008fcd
    1b10:	20000010 	.word	0x20000010

00001b14 <FreeRTOS_CLIRegisterCommand>:
{
    1b14:	b570      	push	{r4, r5, r6, lr}
    1b16:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
    1b18:	d006      	beq.n	1b28 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    1b1a:	2008      	movs	r0, #8
    1b1c:	4b0a      	ldr	r3, [pc, #40]	; (1b48 <FreeRTOS_CLIRegisterCommand+0x34>)
    1b1e:	4798      	blx	r3
    1b20:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
    1b22:	d103      	bne.n	1b2c <FreeRTOS_CLIRegisterCommand+0x18>
    1b24:	b672      	cpsid	i
    1b26:	e7fe      	b.n	1b26 <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
    1b28:	b672      	cpsid	i
    1b2a:	e7fe      	b.n	1b2a <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
    1b2c:	4b07      	ldr	r3, [pc, #28]	; (1b4c <FreeRTOS_CLIRegisterCommand+0x38>)
    1b2e:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    1b30:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
    1b32:	2300      	movs	r3, #0
    1b34:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
    1b36:	4b06      	ldr	r3, [pc, #24]	; (1b50 <FreeRTOS_CLIRegisterCommand+0x3c>)
    1b38:	681a      	ldr	r2, [r3, #0]
    1b3a:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
    1b3c:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
    1b3e:	4b05      	ldr	r3, [pc, #20]	; (1b54 <FreeRTOS_CLIRegisterCommand+0x40>)
    1b40:	4798      	blx	r3
}
    1b42:	2001      	movs	r0, #1
    1b44:	bd70      	pop	{r4, r5, r6, pc}
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	00002fb5 	.word	0x00002fb5
    1b4c:	00002ef1 	.word	0x00002ef1
    1b50:	2000000c 	.word	0x2000000c
    1b54:	00002f09 	.word	0x00002f09

00001b58 <FreeRTOS_CLIProcessCommand>:
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	46de      	mov	lr, fp
    1b5c:	4657      	mov	r7, sl
    1b5e:	464e      	mov	r6, r9
    1b60:	4645      	mov	r5, r8
    1b62:	b5e0      	push	{r5, r6, r7, lr}
    1b64:	b083      	sub	sp, #12
    1b66:	0006      	movs	r6, r0
    1b68:	9100      	str	r1, [sp, #0]
    1b6a:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
    1b6c:	4b39      	ldr	r3, [pc, #228]	; (1c54 <FreeRTOS_CLIProcessCommand+0xfc>)
    1b6e:	681b      	ldr	r3, [r3, #0]
    1b70:	2b00      	cmp	r3, #0
    1b72:	d011      	beq.n	1b98 <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    1b74:	681b      	ldr	r3, [r3, #0]
    1b76:	689b      	ldr	r3, [r3, #8]
    1b78:	0032      	movs	r2, r6
    1b7a:	9901      	ldr	r1, [sp, #4]
    1b7c:	9800      	ldr	r0, [sp, #0]
    1b7e:	4798      	blx	r3
		if( xReturn == pdFALSE )
    1b80:	2800      	cmp	r0, #0
    1b82:	d102      	bne.n	1b8a <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
    1b84:	2200      	movs	r2, #0
    1b86:	4b33      	ldr	r3, [pc, #204]	; (1c54 <FreeRTOS_CLIProcessCommand+0xfc>)
    1b88:	601a      	str	r2, [r3, #0]
}
    1b8a:	b003      	add	sp, #12
    1b8c:	bc3c      	pop	{r2, r3, r4, r5}
    1b8e:	4690      	mov	r8, r2
    1b90:	4699      	mov	r9, r3
    1b92:	46a2      	mov	sl, r4
    1b94:	46ab      	mov	fp, r5
    1b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    1b98:	4c2f      	ldr	r4, [pc, #188]	; (1c58 <FreeRTOS_CLIProcessCommand+0x100>)
    1b9a:	4b2e      	ldr	r3, [pc, #184]	; (1c54 <FreeRTOS_CLIProcessCommand+0xfc>)
    1b9c:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    1b9e:	4b2f      	ldr	r3, [pc, #188]	; (1c5c <FreeRTOS_CLIProcessCommand+0x104>)
    1ba0:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    1ba2:	2320      	movs	r3, #32
    1ba4:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    1ba6:	4b2e      	ldr	r3, [pc, #184]	; (1c60 <FreeRTOS_CLIProcessCommand+0x108>)
    1ba8:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    1baa:	4b2a      	ldr	r3, [pc, #168]	; (1c54 <FreeRTOS_CLIProcessCommand+0xfc>)
    1bac:	469a      	mov	sl, r3
    1bae:	e00a      	b.n	1bc6 <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    1bb0:	0002      	movs	r2, r0
    1bb2:	0029      	movs	r1, r5
    1bb4:	0030      	movs	r0, r6
    1bb6:	47d8      	blx	fp
    1bb8:	2800      	cmp	r0, #0
    1bba:	d00d      	beq.n	1bd8 <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    1bbc:	6864      	ldr	r4, [r4, #4]
    1bbe:	4653      	mov	r3, sl
    1bc0:	601c      	str	r4, [r3, #0]
    1bc2:	2c00      	cmp	r4, #0
    1bc4:	d03e      	beq.n	1c44 <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    1bc6:	6827      	ldr	r7, [r4, #0]
    1bc8:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    1bca:	0028      	movs	r0, r5
    1bcc:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    1bce:	5c33      	ldrb	r3, [r6, r0]
    1bd0:	4642      	mov	r2, r8
    1bd2:	4393      	bics	r3, r2
    1bd4:	d1f2      	bne.n	1bbc <FreeRTOS_CLIProcessCommand+0x64>
    1bd6:	e7eb      	b.n	1bb0 <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    1bd8:	7b3f      	ldrb	r7, [r7, #12]
    1bda:	b27f      	sxtb	r7, r7
    1bdc:	2f00      	cmp	r7, #0
    1bde:	db2d      	blt.n	1c3c <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    1be0:	7833      	ldrb	r3, [r6, #0]
    1be2:	2b00      	cmp	r3, #0
    1be4:	d028      	beq.n	1c38 <FreeRTOS_CLIProcessCommand+0xe0>
    1be6:	0032      	movs	r2, r6
    1be8:	2500      	movs	r5, #0
    1bea:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
    1bec:	2401      	movs	r4, #1
    1bee:	e008      	b.n	1c02 <FreeRTOS_CLIProcessCommand+0xaa>
    1bf0:	2901      	cmp	r1, #1
    1bf2:	d00a      	beq.n	1c0a <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
    1bf4:	3501      	adds	r5, #1
    1bf6:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
    1bf8:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
    1bfa:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
    1bfc:	7813      	ldrb	r3, [r2, #0]
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d005      	beq.n	1c0e <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
    1c02:	2b20      	cmp	r3, #32
    1c04:	d0f4      	beq.n	1bf0 <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
    1c06:	0001      	movs	r1, r0
    1c08:	e7f7      	b.n	1bfa <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
    1c0a:	0021      	movs	r1, r4
    1c0c:	e7f5      	b.n	1bfa <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    1c0e:	2901      	cmp	r1, #1
    1c10:	d00f      	beq.n	1c32 <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    1c12:	4b10      	ldr	r3, [pc, #64]	; (1c54 <FreeRTOS_CLIProcessCommand+0xfc>)
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d014      	beq.n	1c44 <FreeRTOS_CLIProcessCommand+0xec>
    1c1a:	42af      	cmp	r7, r5
    1c1c:	d0aa      	beq.n	1b74 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    1c1e:	9a01      	ldr	r2, [sp, #4]
    1c20:	4910      	ldr	r1, [pc, #64]	; (1c64 <FreeRTOS_CLIProcessCommand+0x10c>)
    1c22:	9800      	ldr	r0, [sp, #0]
    1c24:	4b10      	ldr	r3, [pc, #64]	; (1c68 <FreeRTOS_CLIProcessCommand+0x110>)
    1c26:	4798      	blx	r3
		pxCommand = NULL;
    1c28:	2200      	movs	r2, #0
    1c2a:	4b0a      	ldr	r3, [pc, #40]	; (1c54 <FreeRTOS_CLIProcessCommand+0xfc>)
    1c2c:	601a      	str	r2, [r3, #0]
    1c2e:	2000      	movs	r0, #0
    1c30:	e7ab      	b.n	1b8a <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
    1c32:	3d01      	subs	r5, #1
    1c34:	b26d      	sxtb	r5, r5
    1c36:	e7ec      	b.n	1c12 <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
    1c38:	2500      	movs	r5, #0
    1c3a:	e7ea      	b.n	1c12 <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    1c3c:	4b05      	ldr	r3, [pc, #20]	; (1c54 <FreeRTOS_CLIProcessCommand+0xfc>)
    1c3e:	681b      	ldr	r3, [r3, #0]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d197      	bne.n	1b74 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    1c44:	9a01      	ldr	r2, [sp, #4]
    1c46:	4909      	ldr	r1, [pc, #36]	; (1c6c <FreeRTOS_CLIProcessCommand+0x114>)
    1c48:	9800      	ldr	r0, [sp, #0]
    1c4a:	4b07      	ldr	r3, [pc, #28]	; (1c68 <FreeRTOS_CLIProcessCommand+0x110>)
    1c4c:	4798      	blx	r3
		xReturn = pdFALSE;
    1c4e:	2000      	movs	r0, #0
	return xReturn;
<<<<<<< Updated upstream
    1c28:	e79b      	b.n	1b62 <FreeRTOS_CLIProcessCommand+0x32>
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	2000032c 	.word	0x2000032c
    1c30:	20000010 	.word	0x20000010
    1c34:	00008f7d 	.word	0x00008f7d
    1c38:	00008f8b 	.word	0x00008f8b
    1c3c:	00009a1c 	.word	0x00009a1c
    1c40:	00008fad 	.word	0x00008fad
    1c44:	00009a74 	.word	0x00009a74

00001c48 <prvTraceGetQueueType>:
=======
    1c50:	e79b      	b.n	1b8a <FreeRTOS_CLIProcessCommand+0x32>
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	2000032c 	.word	0x2000032c
    1c58:	20000010 	.word	0x20000010
    1c5c:	00008f9d 	.word	0x00008f9d
    1c60:	00008fab 	.word	0x00008fab
    1c64:	00009a48 	.word	0x00009a48
    1c68:	00008fcd 	.word	0x00008fcd
    1c6c:	00009aa0 	.word	0x00009aa0

00001c70 <prvTraceGetQueueType>:
>>>>>>> Stashed changes
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    1c70:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    1c72:	4b01      	ldr	r3, [pc, #4]	; (1c78 <prvTraceGetQueueType+0x8>)
    1c74:	4798      	blx	r3
}
    1c76:	bd10      	pop	{r4, pc}
    1c78:	000041a5 	.word	0x000041a5

00001c7c <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    1c7c:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    1c7e:	4b02      	ldr	r3, [pc, #8]	; (1c88 <prvTraceGetTaskNumberLow16+0xc>)
    1c80:	4798      	blx	r3
    1c82:	b280      	uxth	r0, r0
}
    1c84:	bd10      	pop	{r4, pc}
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	00004df5 	.word	0x00004df5

00001c8c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    1c8c:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    1c8e:	4b02      	ldr	r3, [pc, #8]	; (1c98 <prvTraceGetTaskNumberHigh16+0xc>)
    1c90:	4798      	blx	r3
    1c92:	0c00      	lsrs	r0, r0, #16
}
    1c94:	bd10      	pop	{r4, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	00004df5 	.word	0x00004df5

00001c9c <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	0004      	movs	r4, r0
    1ca0:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    1ca2:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <prvTraceSetTaskNumberLow16+0x18>)
    1ca4:	4798      	blx	r3
    1ca6:	0c01      	lsrs	r1, r0, #16
    1ca8:	0409      	lsls	r1, r1, #16
    1caa:	4329      	orrs	r1, r5
    1cac:	0020      	movs	r0, r4
    1cae:	4b02      	ldr	r3, [pc, #8]	; (1cb8 <prvTraceSetTaskNumberLow16+0x1c>)
    1cb0:	4798      	blx	r3
}
    1cb2:	bd70      	pop	{r4, r5, r6, pc}
    1cb4:	00004df5 	.word	0x00004df5
    1cb8:	00004e01 	.word	0x00004e01

00001cbc <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    1cbc:	b570      	push	{r4, r5, r6, lr}
    1cbe:	0004      	movs	r4, r0
    1cc0:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    1cc2:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <prvTraceSetTaskNumberHigh16+0x1c>)
    1cc4:	4798      	blx	r3
    1cc6:	0401      	lsls	r1, r0, #16
    1cc8:	0c09      	lsrs	r1, r1, #16
    1cca:	042d      	lsls	r5, r5, #16
    1ccc:	4329      	orrs	r1, r5
    1cce:	0020      	movs	r0, r4
    1cd0:	4b02      	ldr	r3, [pc, #8]	; (1cdc <prvTraceSetTaskNumberHigh16+0x20>)
    1cd2:	4798      	blx	r3
}
    1cd4:	bd70      	pop	{r4, r5, r6, pc}
    1cd6:	46c0      	nop			; (mov r8, r8)
    1cd8:	00004df5 	.word	0x00004df5
    1cdc:	00004e01 	.word	0x00004e01

00001ce0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    1ce0:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    1ce2:	4b02      	ldr	r3, [pc, #8]	; (1cec <prvTraceGetQueueNumberLow16+0xc>)
    1ce4:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    1ce6:	b280      	uxth	r0, r0
}
    1ce8:	bd10      	pop	{r4, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	0000419d 	.word	0x0000419d

00001cf0 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    1cf0:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    1cf2:	4b02      	ldr	r3, [pc, #8]	; (1cfc <prvTraceGetQueueNumberHigh16+0xc>)
    1cf4:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    1cf6:	0c00      	lsrs	r0, r0, #16
}
    1cf8:	bd10      	pop	{r4, pc}
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	0000419d 	.word	0x0000419d

00001d00 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    1d00:	b570      	push	{r4, r5, r6, lr}
    1d02:	0004      	movs	r4, r0
    1d04:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    1d06:	4b04      	ldr	r3, [pc, #16]	; (1d18 <prvTraceSetQueueNumberLow16+0x18>)
    1d08:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    1d0a:	0c01      	lsrs	r1, r0, #16
    1d0c:	0409      	lsls	r1, r1, #16
    1d0e:	4329      	orrs	r1, r5
    1d10:	0020      	movs	r0, r4
    1d12:	4b02      	ldr	r3, [pc, #8]	; (1d1c <prvTraceSetQueueNumberLow16+0x1c>)
    1d14:	4798      	blx	r3
}
    1d16:	bd70      	pop	{r4, r5, r6, pc}
    1d18:	0000419d 	.word	0x0000419d
    1d1c:	000041a1 	.word	0x000041a1

00001d20 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    1d20:	b570      	push	{r4, r5, r6, lr}
    1d22:	0004      	movs	r4, r0
    1d24:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    1d26:	4b05      	ldr	r3, [pc, #20]	; (1d3c <prvTraceSetQueueNumberHigh16+0x1c>)
    1d28:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    1d2a:	0401      	lsls	r1, r0, #16
    1d2c:	0c09      	lsrs	r1, r1, #16
    1d2e:	042d      	lsls	r5, r5, #16
    1d30:	4329      	orrs	r1, r5
    1d32:	0020      	movs	r0, r4
    1d34:	4b02      	ldr	r3, [pc, #8]	; (1d40 <prvTraceSetQueueNumberHigh16+0x20>)
    1d36:	4798      	blx	r3
}
    1d38:	bd70      	pop	{r4, r5, r6, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	0000419d 	.word	0x0000419d
    1d40:	000041a1 	.word	0x000041a1

00001d44 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    1d44:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
    1d46:	4b01      	ldr	r3, [pc, #4]	; (1d4c <prvTraceGetCurrentTaskHandle+0x8>)
    1d48:	4798      	blx	r3
}
    1d4a:	bd10      	pop	{r4, pc}
    1d4c:	00004e09 	.word	0x00004e09

00001d50 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    1d50:	b510      	push	{r4, lr}
    1d52:	0004      	movs	r4, r0
	prvTraceInitTraceData();
    1d54:	4b09      	ldr	r3, [pc, #36]	; (1d7c <vTraceEnable+0x2c>)
    1d56:	4798      	blx	r3

	if (startOption == TRC_START)
    1d58:	2c01      	cmp	r4, #1
    1d5a:	d004      	beq.n	1d66 <vTraceEnable+0x16>
	{
		vTraceStart();
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    1d5c:	2c02      	cmp	r4, #2
    1d5e:	d005      	beq.n	1d6c <vTraceEnable+0x1c>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
	}
	else if (startOption != TRC_INIT)
    1d60:	2c00      	cmp	r4, #0
    1d62:	d107      	bne.n	1d74 <vTraceEnable+0x24>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    1d64:	bd10      	pop	{r4, pc}
		vTraceStart();
    1d66:	4b06      	ldr	r3, [pc, #24]	; (1d80 <vTraceEnable+0x30>)
    1d68:	4798      	blx	r3
    1d6a:	e7fb      	b.n	1d64 <vTraceEnable+0x14>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    1d6c:	4805      	ldr	r0, [pc, #20]	; (1d84 <vTraceEnable+0x34>)
    1d6e:	4b06      	ldr	r3, [pc, #24]	; (1d88 <vTraceEnable+0x38>)
    1d70:	4798      	blx	r3
    1d72:	e7f7      	b.n	1d64 <vTraceEnable+0x14>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    1d74:	4805      	ldr	r0, [pc, #20]	; (1d8c <vTraceEnable+0x3c>)
    1d76:	4b04      	ldr	r3, [pc, #16]	; (1d88 <vTraceEnable+0x38>)
    1d78:	4798      	blx	r3
}
<<<<<<< Updated upstream
    1d52:	e7f3      	b.n	1d3c <vTraceEnable+0x14>
    1d54:	00001f4d 	.word	0x00001f4d
    1d58:	00002d2d 	.word	0x00002d2d
    1d5c:	00009e30 	.word	0x00009e30
    1d60:	00002125 	.word	0x00002125
    1d64:	00009e70 	.word	0x00009e70

00001d68 <vTraceInitObjectPropertyTable>:
=======
    1d7a:	e7f3      	b.n	1d64 <vTraceEnable+0x14>
    1d7c:	00001f75 	.word	0x00001f75
    1d80:	00002d55 	.word	0x00002d55
    1d84:	00009e5c 	.word	0x00009e5c
    1d88:	0000214d 	.word	0x0000214d
    1d8c:	00009e9c 	.word	0x00009e9c

00001d90 <vTraceInitObjectPropertyTable>:
>>>>>>> Stashed changes
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    1d90:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    1d92:	4b2f      	ldr	r3, [pc, #188]	; (1e50 <vTraceInitObjectPropertyTable+0xc0>)
    1d94:	681b      	ldr	r3, [r3, #0]
    1d96:	2209      	movs	r2, #9
    1d98:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    1d9a:	3201      	adds	r2, #1
    1d9c:	2164      	movs	r1, #100	; 0x64
    1d9e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    1da0:	3101      	adds	r1, #1
    1da2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    1da4:	3101      	adds	r1, #1
    1da6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    1da8:	3205      	adds	r2, #5
    1daa:	3101      	adds	r1, #1
    1dac:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    1dae:	3962      	subs	r1, #98	; 0x62
    1db0:	2068      	movs	r0, #104	; 0x68
    1db2:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    1db4:	3001      	adds	r0, #1
    1db6:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    1db8:	3001      	adds	r0, #1
    1dba:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    1dbc:	3001      	adds	r0, #1
    1dbe:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    1dc0:	3001      	adds	r0, #1
    1dc2:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    1dc4:	316b      	adds	r1, #107	; 0x6b
    1dc6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    1dc8:	3101      	adds	r1, #1
    1dca:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    1dcc:	3101      	adds	r1, #1
    1dce:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    1dd0:	3101      	adds	r1, #1
    1dd2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    1dd4:	3101      	adds	r1, #1
    1dd6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    1dd8:	3101      	adds	r1, #1
    1dda:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    1ddc:	3101      	adds	r1, #1
    1dde:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    1de0:	3101      	adds	r1, #1
    1de2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    1de4:	3101      	adds	r1, #1
    1de6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    1de8:	3968      	subs	r1, #104	; 0x68
    1dea:	326d      	adds	r2, #109	; 0x6d
    1dec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    1dee:	3201      	adds	r2, #1
    1df0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    1df2:	3201      	adds	r2, #1
    1df4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    1df6:	3a6b      	subs	r2, #107	; 0x6b
    1df8:	3013      	adds	r0, #19
    1dfa:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    1dfc:	2411      	movs	r4, #17
    1dfe:	3001      	adds	r0, #1
    1e00:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    1e02:	3001      	adds	r0, #1
    1e04:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    1e06:	3172      	adds	r1, #114	; 0x72
    1e08:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    1e0a:	3101      	adds	r1, #1
    1e0c:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    1e0e:	3101      	adds	r1, #1
    1e10:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    1e12:	2100      	movs	r1, #0
    1e14:	3275      	adds	r2, #117	; 0x75
    1e16:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    1e18:	31a0      	adds	r1, #160	; 0xa0
    1e1a:	3202      	adds	r2, #2
    1e1c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    1e1e:	31a0      	adds	r1, #160	; 0xa0
    1e20:	3202      	adds	r2, #2
    1e22:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    1e24:	31a0      	adds	r1, #160	; 0xa0
    1e26:	3202      	adds	r2, #2
    1e28:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    1e2a:	490a      	ldr	r1, [pc, #40]	; (1e54 <vTraceInitObjectPropertyTable+0xc4>)
    1e2c:	3202      	adds	r2, #2
    1e2e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    1e30:	4909      	ldr	r1, [pc, #36]	; (1e58 <vTraceInitObjectPropertyTable+0xc8>)
    1e32:	3202      	adds	r2, #2
    1e34:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    1e36:	4909      	ldr	r1, [pc, #36]	; (1e5c <vTraceInitObjectPropertyTable+0xcc>)
    1e38:	3202      	adds	r2, #2
    1e3a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    1e3c:	4908      	ldr	r1, [pc, #32]	; (1e60 <vTraceInitObjectPropertyTable+0xd0>)
    1e3e:	3202      	adds	r2, #2
    1e40:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    1e42:	315f      	adds	r1, #95	; 0x5f
    1e44:	3202      	adds	r2, #2
    1e46:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    1e48:	4a06      	ldr	r2, [pc, #24]	; (1e64 <vTraceInitObjectPropertyTable+0xd4>)
    1e4a:	661a      	str	r2, [r3, #96]	; 0x60
}
    1e4c:	bd10      	pop	{r4, pc}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	20000334 	.word	0x20000334
    1e54:	000002fd 	.word	0x000002fd
    1e58:	00000352 	.word	0x00000352
    1e5c:	000003a2 	.word	0x000003a2
    1e60:	00000401 	.word	0x00000401
    1e64:	000004bf 	.word	0x000004bf

00001e68 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    1e68:	4b17      	ldr	r3, [pc, #92]	; (1ec8 <vTraceInitObjectHandleStack+0x60>)
    1e6a:	2200      	movs	r2, #0
    1e6c:	825a      	strh	r2, [r3, #18]
    1e6e:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    1e70:	320a      	adds	r2, #10
    1e72:	829a      	strh	r2, [r3, #20]
    1e74:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    1e76:	320a      	adds	r2, #10
    1e78:	82da      	strh	r2, [r3, #22]
    1e7a:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    1e7c:	320a      	adds	r2, #10
    1e7e:	831a      	strh	r2, [r3, #24]
    1e80:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    1e82:	320f      	adds	r2, #15
    1e84:	835a      	strh	r2, [r3, #26]
    1e86:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    1e88:	3205      	adds	r2, #5
    1e8a:	839a      	strh	r2, [r3, #28]
    1e8c:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    1e8e:	3205      	adds	r2, #5
    1e90:	83da      	strh	r2, [r3, #30]
    1e92:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    1e94:	3205      	adds	r2, #5
    1e96:	841a      	strh	r2, [r3, #32]
    1e98:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    1e9a:	3205      	adds	r2, #5
    1e9c:	845a      	strh	r2, [r3, #34]	; 0x22
    1e9e:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    1ea0:	3a38      	subs	r2, #56	; 0x38
    1ea2:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    1ea4:	320a      	adds	r2, #10
    1ea6:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    1ea8:	320a      	adds	r2, #10
    1eaa:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    1eac:	320f      	adds	r2, #15
    1eae:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    1eb0:	3205      	adds	r2, #5
    1eb2:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    1eb4:	3205      	adds	r2, #5
    1eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    1eb8:	3205      	adds	r2, #5
    1eba:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    1ebc:	3205      	adds	r2, #5
    1ebe:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    1ec0:	3205      	adds	r2, #5
    1ec2:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1ec4:	4770      	bx	lr
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	20000350 	.word	0x20000350

00001ecc <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
    1ecc:	2808      	cmp	r0, #8
    1ece:	d813      	bhi.n	1ef8 <pszTraceGetErrorNotEnoughHandles+0x2c>
    1ed0:	0080      	lsls	r0, r0, #2
    1ed2:	4b0b      	ldr	r3, [pc, #44]	; (1f00 <pszTraceGetErrorNotEnoughHandles+0x34>)
    1ed4:	581b      	ldr	r3, [r3, r0]
    1ed6:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    1ed8:	480a      	ldr	r0, [pc, #40]	; (1f04 <pszTraceGetErrorNotEnoughHandles+0x38>)
    1eda:	e010      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    1edc:	480a      	ldr	r0, [pc, #40]	; (1f08 <pszTraceGetErrorNotEnoughHandles+0x3c>)
    1ede:	e00e      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    1ee0:	480a      	ldr	r0, [pc, #40]	; (1f0c <pszTraceGetErrorNotEnoughHandles+0x40>)
    1ee2:	e00c      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    1ee4:	480a      	ldr	r0, [pc, #40]	; (1f10 <pszTraceGetErrorNotEnoughHandles+0x44>)
    1ee6:	e00a      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    1ee8:	480a      	ldr	r0, [pc, #40]	; (1f14 <pszTraceGetErrorNotEnoughHandles+0x48>)
    1eea:	e008      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    1eec:	480a      	ldr	r0, [pc, #40]	; (1f18 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    1eee:	e006      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    1ef0:	480a      	ldr	r0, [pc, #40]	; (1f1c <pszTraceGetErrorNotEnoughHandles+0x50>)
    1ef2:	e004      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    1ef4:	480a      	ldr	r0, [pc, #40]	; (1f20 <pszTraceGetErrorNotEnoughHandles+0x54>)
    1ef6:	e002      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    1ef8:	480a      	ldr	r0, [pc, #40]	; (1f24 <pszTraceGetErrorNotEnoughHandles+0x58>)
    1efa:	e000      	b.n	1efe <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    1efc:	480a      	ldr	r0, [pc, #40]	; (1f28 <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
<<<<<<< Updated upstream
    1ed6:	4770      	bx	lr
    1ed8:	00009b0c 	.word	0x00009b0c
    1edc:	00009b78 	.word	0x00009b78
    1ee0:	00009bc0 	.word	0x00009bc0
    1ee4:	00009c14 	.word	0x00009c14
    1ee8:	00009c60 	.word	0x00009c60
    1eec:	00009cac 	.word	0x00009cac
    1ef0:	00009cf8 	.word	0x00009cf8
    1ef4:	00009d4c 	.word	0x00009d4c
    1ef8:	00009da4 	.word	0x00009da4
    1efc:	00009e00 	.word	0x00009e00
    1f00:	00009b30 	.word	0x00009b30

00001f04 <prvStrncpy>:
=======
    1efe:	4770      	bx	lr
    1f00:	00009b38 	.word	0x00009b38
    1f04:	00009ba4 	.word	0x00009ba4
    1f08:	00009bec 	.word	0x00009bec
    1f0c:	00009c40 	.word	0x00009c40
    1f10:	00009c8c 	.word	0x00009c8c
    1f14:	00009cd8 	.word	0x00009cd8
    1f18:	00009d24 	.word	0x00009d24
    1f1c:	00009d78 	.word	0x00009d78
    1f20:	00009dd0 	.word	0x00009dd0
    1f24:	00009e2c 	.word	0x00009e2c
    1f28:	00009b5c 	.word	0x00009b5c

00001f2c <prvStrncpy>:
>>>>>>> Stashed changes
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    1f2c:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    1f2e:	2a00      	cmp	r2, #0
    1f30:	d00d      	beq.n	1f4e <prvStrncpy+0x22>
	{
		dst[i] = src[i];
    1f32:	780b      	ldrb	r3, [r1, #0]
    1f34:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
    1f36:	780b      	ldrb	r3, [r1, #0]
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d008      	beq.n	1f4e <prvStrncpy+0x22>
    1f3c:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
    1f3e:	3301      	adds	r3, #1
    1f40:	429a      	cmp	r2, r3
    1f42:	d004      	beq.n	1f4e <prvStrncpy+0x22>
		dst[i] = src[i];
    1f44:	5ccc      	ldrb	r4, [r1, r3]
    1f46:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
    1f48:	5ccc      	ldrb	r4, [r1, r3]
    1f4a:	2c00      	cmp	r4, #0
    1f4c:	d1f7      	bne.n	1f3e <prvStrncpy+0x12>
			break;
	}
}
    1f4e:	bd10      	pop	{r4, pc}

00001f50 <vTraceStop>:
{
    1f50:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
    1f52:	4b06      	ldr	r3, [pc, #24]	; (1f6c <vTraceStop+0x1c>)
    1f54:	681b      	ldr	r3, [r3, #0]
    1f56:	2b00      	cmp	r3, #0
    1f58:	d001      	beq.n	1f5e <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
    1f5a:	2200      	movs	r2, #0
    1f5c:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    1f5e:	4b04      	ldr	r3, [pc, #16]	; (1f70 <vTraceStop+0x20>)
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d000      	beq.n	1f68 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    1f66:	4798      	blx	r3
}
    1f68:	bd10      	pop	{r4, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	20000334 	.word	0x20000334
    1f70:	200003fc 	.word	0x200003fc

00001f74 <prvTraceInitTraceData>:
{	
    1f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f76:	46de      	mov	lr, fp
    1f78:	4657      	mov	r7, sl
    1f7a:	464e      	mov	r6, r9
    1f7c:	4645      	mov	r5, r8
    1f7e:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
    1f80:	4b51      	ldr	r3, [pc, #324]	; (20c8 <STACK_SIZE+0xc8>)
    1f82:	681b      	ldr	r3, [r3, #0]
    1f84:	2b00      	cmp	r3, #0
    1f86:	d100      	bne.n	1f8a <prvTraceInitTraceData+0x16>
    1f88:	e099      	b.n	20be <STACK_SIZE+0xbe>
		if (RecorderDataPtr->startmarker0 == 1)
    1f8a:	781b      	ldrb	r3, [r3, #0]
    1f8c:	2b01      	cmp	r3, #1
    1f8e:	d100      	bne.n	1f92 <prvTraceInitTraceData+0x1e>
    1f90:	e08f      	b.n	20b2 <STACK_SIZE+0xb2>
	init_hwtc_count = TRC_HWTC_COUNT;
    1f92:	4b4e      	ldr	r3, [pc, #312]	; (20cc <STACK_SIZE+0xcc>)
    1f94:	681a      	ldr	r2, [r3, #0]
    1f96:	4b4e      	ldr	r3, [pc, #312]	; (20d0 <STACK_SIZE+0xd0>)
    1f98:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    1f9a:	4c4b      	ldr	r4, [pc, #300]	; (20c8 <STACK_SIZE+0xc8>)
    1f9c:	4d4d      	ldr	r5, [pc, #308]	; (20d4 <STACK_SIZE+0xd4>)
    1f9e:	002a      	movs	r2, r5
    1fa0:	2100      	movs	r1, #0
    1fa2:	6820      	ldr	r0, [r4, #0]
    1fa4:	4b4c      	ldr	r3, [pc, #304]	; (20d8 <STACK_SIZE+0xd8>)
    1fa6:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    1fa8:	6823      	ldr	r3, [r4, #0]
    1faa:	4a4c      	ldr	r2, [pc, #304]	; (20dc <STACK_SIZE+0xdc>)
    1fac:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    1fae:	2205      	movs	r2, #5
    1fb0:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    1fb2:	2200      	movs	r2, #0
    1fb4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    1fb6:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    1fb8:	21c8      	movs	r1, #200	; 0xc8
    1fba:	0049      	lsls	r1, r1, #1
    1fbc:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    1fbe:	4948      	ldr	r1, [pc, #288]	; (20e0 <STACK_SIZE+0xe0>)
    1fc0:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    1fc2:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    1fc4:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
    1fc6:	4b47      	ldr	r3, [pc, #284]	; (20e4 <STACK_SIZE+0xe4>)
    1fc8:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    1fca:	6820      	ldr	r0, [r4, #0]
    1fcc:	4a46      	ldr	r2, [pc, #280]	; (20e8 <STACK_SIZE+0xe8>)
    1fce:	4b47      	ldr	r3, [pc, #284]	; (20ec <STACK_SIZE+0xec>)
    1fd0:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    1fd2:	22c8      	movs	r2, #200	; 0xc8
    1fd4:	0092      	lsls	r2, r2, #2
    1fd6:	3304      	adds	r3, #4
    1fd8:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    1fda:	4b45      	ldr	r3, [pc, #276]	; (20f0 <STACK_SIZE+0xf0>)
    1fdc:	2201      	movs	r2, #1
    1fde:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    1fe0:	4a44      	ldr	r2, [pc, #272]	; (20f4 <STACK_SIZE+0xf4>)
    1fe2:	2391      	movs	r3, #145	; 0x91
    1fe4:	011b      	lsls	r3, r3, #4
    1fe6:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    1fe8:	4b43      	ldr	r3, [pc, #268]	; (20f8 <STACK_SIZE+0xf8>)
    1fea:	469c      	mov	ip, r3
    1fec:	4460      	add	r0, ip
    1fee:	2250      	movs	r2, #80	; 0x50
    1ff0:	4942      	ldr	r1, [pc, #264]	; (20fc <STACK_SIZE+0xfc>)
    1ff2:	4b43      	ldr	r3, [pc, #268]	; (2100 <STACK_SIZE+0x100>)
    1ff4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    1ff6:	6823      	ldr	r3, [r4, #0]
    1ff8:	4942      	ldr	r1, [pc, #264]	; (2104 <STACK_SIZE+0x104>)
    1ffa:	4a43      	ldr	r2, [pc, #268]	; (2108 <STACK_SIZE+0x108>)
    1ffc:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    1ffe:	210a      	movs	r1, #10
    2000:	4a42      	ldr	r2, [pc, #264]	; (210c <STACK_SIZE+0x10c>)
    2002:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    2004:	3101      	adds	r1, #1
    2006:	4a42      	ldr	r2, [pc, #264]	; (2110 <STACK_SIZE+0x110>)
    2008:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    200a:	3101      	adds	r1, #1
    200c:	4a41      	ldr	r2, [pc, #260]	; (2114 <STACK_SIZE+0x114>)
    200e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    2010:	3101      	adds	r1, #1
    2012:	4a41      	ldr	r2, [pc, #260]	; (2118 <STACK_SIZE+0x118>)
    2014:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    2016:	3201      	adds	r2, #1
    2018:	3164      	adds	r1, #100	; 0x64
    201a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    201c:	2572      	movs	r5, #114	; 0x72
    201e:	4a3f      	ldr	r2, [pc, #252]	; (211c <STACK_SIZE+0x11c>)
    2020:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    2022:	2673      	movs	r6, #115	; 0x73
    2024:	4a3e      	ldr	r2, [pc, #248]	; (2120 <STACK_SIZE+0x120>)
    2026:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    2028:	2774      	movs	r7, #116	; 0x74
    202a:	4a3e      	ldr	r2, [pc, #248]	; (2124 <STACK_SIZE+0x124>)
    202c:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    202e:	22f1      	movs	r2, #241	; 0xf1
    2030:	4690      	mov	r8, r2
    2032:	4a3d      	ldr	r2, [pc, #244]	; (2128 <STACK_SIZE+0x128>)
    2034:	4641      	mov	r1, r8
    2036:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    2038:	22f2      	movs	r2, #242	; 0xf2
    203a:	4691      	mov	r9, r2
    203c:	4a3b      	ldr	r2, [pc, #236]	; (212c <STACK_SIZE+0x12c>)
    203e:	4649      	mov	r1, r9
    2040:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    2042:	22f3      	movs	r2, #243	; 0xf3
    2044:	4692      	mov	sl, r2
    2046:	4a3a      	ldr	r2, [pc, #232]	; (2130 <STACK_SIZE+0x130>)
    2048:	4651      	mov	r1, sl
    204a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    204c:	22f4      	movs	r2, #244	; 0xf4
    204e:	4693      	mov	fp, r2
    2050:	4a38      	ldr	r2, [pc, #224]	; (2134 <STACK_SIZE+0x134>)
    2052:	4659      	mov	r1, fp
    2054:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
    2056:	4b38      	ldr	r3, [pc, #224]	; (2138 <STACK_SIZE+0x138>)
    2058:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
    205a:	6823      	ldr	r3, [r4, #0]
    205c:	465a      	mov	r2, fp
    205e:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    2060:	4652      	mov	r2, sl
    2062:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    2064:	464a      	mov	r2, r9
    2066:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    2068:	4642      	mov	r2, r8
    206a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    206c:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    206e:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    2070:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    2072:	2271      	movs	r2, #113	; 0x71
    2074:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    2076:	2204      	movs	r2, #4
    2078:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    207a:	2303      	movs	r3, #3
    207c:	6822      	ldr	r2, [r4, #0]
    207e:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    2080:	3b01      	subs	r3, #1
    2082:	6822      	ldr	r2, [r4, #0]
    2084:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    2086:	6823      	ldr	r3, [r4, #0]
    2088:	2201      	movs	r2, #1
    208a:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
    208c:	4b2b      	ldr	r3, [pc, #172]	; (213c <STACK_SIZE+0x13c>)
    208e:	6819      	ldr	r1, [r3, #0]
    2090:	2900      	cmp	r1, #0
    2092:	d00e      	beq.n	20b2 <STACK_SIZE+0xb2>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    2094:	4c0c      	ldr	r4, [pc, #48]	; (20c8 <STACK_SIZE+0xc8>)
    2096:	6823      	ldr	r3, [r4, #0]
    2098:	4a17      	ldr	r2, [pc, #92]	; (20f8 <STACK_SIZE+0xf8>)
    209a:	4694      	mov	ip, r2
    209c:	4463      	add	r3, ip
    209e:	0018      	movs	r0, r3
    20a0:	2250      	movs	r2, #80	; 0x50
    20a2:	4b17      	ldr	r3, [pc, #92]	; (2100 <STACK_SIZE+0x100>)
    20a4:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    20a6:	6822      	ldr	r2, [r4, #0]
    20a8:	2101      	movs	r1, #1
    20aa:	4b25      	ldr	r3, [pc, #148]	; (2140 <STACK_SIZE+0x140>)
    20ac:	50d1      	str	r1, [r2, r3]
		vTraceStop();
    20ae:	4b25      	ldr	r3, [pc, #148]	; (2144 <STACK_SIZE+0x144>)
    20b0:	4798      	blx	r3
}
    20b2:	bc3c      	pop	{r2, r3, r4, r5}
    20b4:	4690      	mov	r8, r2
    20b6:	4699      	mov	r9, r3
    20b8:	46a2      	mov	sl, r4
    20ba:	46ab      	mov	fp, r5
    20bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
<<<<<<< Updated upstream
    2096:	4a22      	ldr	r2, [pc, #136]	; (2120 <STACK_SIZE+0x120>)
    2098:	4b01      	ldr	r3, [pc, #4]	; (20a0 <STACK_SIZE+0xa0>)
    209a:	601a      	str	r2, [r3, #0]
    209c:	e765      	b.n	1f6a <prvTraceInitTraceData+0x1e>
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	20000334 	.word	0x20000334
    20a4:	e000e018 	.word	0xe000e018
    20a8:	200048cc 	.word	0x200048cc
    20ac:	00000fb8 	.word	0x00000fb8
    20b0:	00008d13 	.word	0x00008d13
    20b4:	00001aa1 	.word	0x00001aa1
    20b8:	f0f0f0f0 	.word	0xf0f0f0f0
    20bc:	00001d69 	.word	0x00001d69
    20c0:	f1f1f1f1 	.word	0xf1f1f1f1
    20c4:	0000055c 	.word	0x0000055c
    20c8:	00000564 	.word	0x00000564
    20cc:	f2f2f2f2 	.word	0xf2f2f2f2
    20d0:	00000914 	.word	0x00000914
    20d4:	0000a070 	.word	0x0000a070
    20d8:	00001f05 	.word	0x00001f05
    20dc:	f3f3f3f3 	.word	0xf3f3f3f3
    20e0:	00000964 	.word	0x00000964
    20e4:	00000fac 	.word	0x00000fac
    20e8:	00000fad 	.word	0x00000fad
    20ec:	00000fae 	.word	0x00000fae
    20f0:	00000faf 	.word	0x00000faf
    20f4:	00000fb1 	.word	0x00000fb1
    20f8:	00000fb2 	.word	0x00000fb2
    20fc:	00000fb3 	.word	0x00000fb3
    2100:	00000fb4 	.word	0x00000fb4
    2104:	00000fb5 	.word	0x00000fb5
    2108:	00000fb6 	.word	0x00000fb6
    210c:	00000fb7 	.word	0x00000fb7
    2110:	00001e41 	.word	0x00001e41
    2114:	200003ec 	.word	0x200003ec
    2118:	0000090c 	.word	0x0000090c
    211c:	00001f29 	.word	0x00001f29
    2120:	20003914 	.word	0x20003914

00002124 <prvTraceError>:
=======
    20be:	4a22      	ldr	r2, [pc, #136]	; (2148 <STACK_SIZE+0x148>)
    20c0:	4b01      	ldr	r3, [pc, #4]	; (20c8 <STACK_SIZE+0xc8>)
    20c2:	601a      	str	r2, [r3, #0]
    20c4:	e765      	b.n	1f92 <prvTraceInitTraceData+0x1e>
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	20000334 	.word	0x20000334
    20cc:	e000e018 	.word	0xe000e018
    20d0:	2000490c 	.word	0x2000490c
    20d4:	00000fb8 	.word	0x00000fb8
    20d8:	00008d33 	.word	0x00008d33
    20dc:	00001aa1 	.word	0x00001aa1
    20e0:	f0f0f0f0 	.word	0xf0f0f0f0
    20e4:	00001d91 	.word	0x00001d91
    20e8:	f1f1f1f1 	.word	0xf1f1f1f1
    20ec:	0000055c 	.word	0x0000055c
    20f0:	00000564 	.word	0x00000564
    20f4:	f2f2f2f2 	.word	0xf2f2f2f2
    20f8:	00000914 	.word	0x00000914
    20fc:	0000a09c 	.word	0x0000a09c
    2100:	00001f2d 	.word	0x00001f2d
    2104:	f3f3f3f3 	.word	0xf3f3f3f3
    2108:	00000964 	.word	0x00000964
    210c:	00000fac 	.word	0x00000fac
    2110:	00000fad 	.word	0x00000fad
    2114:	00000fae 	.word	0x00000fae
    2118:	00000faf 	.word	0x00000faf
    211c:	00000fb1 	.word	0x00000fb1
    2120:	00000fb2 	.word	0x00000fb2
    2124:	00000fb3 	.word	0x00000fb3
    2128:	00000fb4 	.word	0x00000fb4
    212c:	00000fb5 	.word	0x00000fb5
    2130:	00000fb6 	.word	0x00000fb6
    2134:	00000fb7 	.word	0x00000fb7
    2138:	00001e69 	.word	0x00001e69
    213c:	200003ec 	.word	0x200003ec
    2140:	0000090c 	.word	0x0000090c
    2144:	00001f51 	.word	0x00001f51
    2148:	20003954 	.word	0x20003954

0000214c <prvTraceError>:
>>>>>>> Stashed changes
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    214c:	b510      	push	{r4, lr}
    214e:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    2150:	4b0e      	ldr	r3, [pc, #56]	; (218c <prvTraceError+0x40>)
    2152:	681b      	ldr	r3, [r3, #0]
    2154:	2b00      	cmp	r3, #0
    2156:	d001      	beq.n	215c <prvTraceError+0x10>
	{
		vTraceStop();
    2158:	4b0d      	ldr	r3, [pc, #52]	; (2190 <prvTraceError+0x44>)
    215a:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    215c:	4b0d      	ldr	r3, [pc, #52]	; (2194 <prvTraceError+0x48>)
    215e:	681b      	ldr	r3, [r3, #0]
    2160:	2b00      	cmp	r3, #0
    2162:	d000      	beq.n	2166 <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
    2164:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
    2166:	4b0b      	ldr	r3, [pc, #44]	; (2194 <prvTraceError+0x48>)
    2168:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
    216a:	4b08      	ldr	r3, [pc, #32]	; (218c <prvTraceError+0x40>)
    216c:	6818      	ldr	r0, [r3, #0]
    216e:	2800      	cmp	r0, #0
    2170:	d0f8      	beq.n	2164 <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    2172:	4b09      	ldr	r3, [pc, #36]	; (2198 <prvTraceError+0x4c>)
    2174:	469c      	mov	ip, r3
    2176:	4460      	add	r0, ip
    2178:	2250      	movs	r2, #80	; 0x50
    217a:	0021      	movs	r1, r4
    217c:	4b07      	ldr	r3, [pc, #28]	; (219c <prvTraceError+0x50>)
    217e:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    2180:	4b02      	ldr	r3, [pc, #8]	; (218c <prvTraceError+0x40>)
    2182:	681a      	ldr	r2, [r3, #0]
    2184:	2101      	movs	r1, #1
    2186:	4b06      	ldr	r3, [pc, #24]	; (21a0 <prvTraceError+0x54>)
    2188:	50d1      	str	r1, [r2, r3]
}
    218a:	e7eb      	b.n	2164 <prvTraceError+0x18>
    218c:	20000334 	.word	0x20000334
    2190:	00001f51 	.word	0x00001f51
    2194:	200003ec 	.word	0x200003ec
    2198:	00000914 	.word	0x00000914
    219c:	00001f2d 	.word	0x00001f2d
    21a0:	0000090c 	.word	0x0000090c

000021a4 <prvTraceNextFreeEventBufferSlot>:
{
    21a4:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
    21a6:	4b0b      	ldr	r3, [pc, #44]	; (21d4 <prvTraceNextFreeEventBufferSlot+0x30>)
    21a8:	6818      	ldr	r0, [r3, #0]
    21aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    21ac:	2b00      	cmp	r3, #0
    21ae:	d00f      	beq.n	21d0 <prvTraceNextFreeEventBufferSlot+0x2c>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    21b0:	69c3      	ldr	r3, [r0, #28]
    21b2:	2290      	movs	r2, #144	; 0x90
    21b4:	32ff      	adds	r2, #255	; 0xff
    21b6:	4293      	cmp	r3, r2
    21b8:	d805      	bhi.n	21c6 <prvTraceNextFreeEventBufferSlot+0x22>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    21ba:	009b      	lsls	r3, r3, #2
    21bc:	4a06      	ldr	r2, [pc, #24]	; (21d8 <prvTraceNextFreeEventBufferSlot+0x34>)
    21be:	4694      	mov	ip, r2
    21c0:	4463      	add	r3, ip
    21c2:	18c0      	adds	r0, r0, r3
}
    21c4:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
    21c6:	4805      	ldr	r0, [pc, #20]	; (21dc <prvTraceNextFreeEventBufferSlot+0x38>)
    21c8:	4b05      	ldr	r3, [pc, #20]	; (21e0 <prvTraceNextFreeEventBufferSlot+0x3c>)
    21ca:	4798      	blx	r3
		return NULL;
    21cc:	2000      	movs	r0, #0
    21ce:	e7f9      	b.n	21c4 <prvTraceNextFreeEventBufferSlot+0x20>
		return NULL;
<<<<<<< Updated upstream
    21a8:	2000      	movs	r0, #0
    21aa:	e7f7      	b.n	219c <prvTraceNextFreeEventBufferSlot+0x20>
    21ac:	20000334 	.word	0x20000334
    21b0:	00000968 	.word	0x00000968
    21b4:	0000a084 	.word	0x0000a084
    21b8:	00002125 	.word	0x00002125

000021bc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
=======
    21d0:	2000      	movs	r0, #0
    21d2:	e7f7      	b.n	21c4 <prvTraceNextFreeEventBufferSlot+0x20>
    21d4:	20000334 	.word	0x20000334
    21d8:	00000968 	.word	0x00000968
    21dc:	0000a0b0 	.word	0x0000a0b0
    21e0:	0000214d 	.word	0x0000214d

000021e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
>>>>>>> Stashed changes
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    21e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21e6:	46c6      	mov	lr, r8
    21e8:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    21ea:	2800      	cmp	r0, #0
    21ec:	d006      	beq.n	21fc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
    21ee:	0007      	movs	r7, r0
    21f0:	2500      	movs	r5, #0
    21f2:	2800      	cmp	r0, #0
    21f4:	d005      	beq.n	2202 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    21f6:	4b23      	ldr	r3, [pc, #140]	; (2284 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa0>)
    21f8:	4698      	mov	r8, r3
    21fa:	e00a      	b.n	2212 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
    21fc:	4822      	ldr	r0, [pc, #136]	; (2288 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>)
    21fe:	4b23      	ldr	r3, [pc, #140]	; (228c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
    2200:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    2202:	bc04      	pop	{r2}
    2204:	4690      	mov	r8, r2
    2206:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    2208:	2a01      	cmp	r2, #1
    220a:	d020      	beq.n	224e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6a>
		i++;
    220c:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
    220e:	42bd      	cmp	r5, r7
    2210:	d2f7      	bcs.n	2202 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
    2212:	4643      	mov	r3, r8
    2214:	681c      	ldr	r4, [r3, #0]
    2216:	69e3      	ldr	r3, [r4, #28]
    2218:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    221a:	009e      	lsls	r6, r3, #2
    221c:	19a2      	adds	r2, r4, r6
    221e:	491c      	ldr	r1, [pc, #112]	; (2290 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    2220:	468c      	mov	ip, r1
    2222:	4462      	add	r2, ip
    2224:	7812      	ldrb	r2, [r2, #0]
    2226:	0011      	movs	r1, r2
    2228:	3167      	adds	r1, #103	; 0x67
    222a:	b2c9      	uxtb	r1, r1
    222c:	290e      	cmp	r1, #14
    222e:	d8eb      	bhi.n	2208 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    2230:	3268      	adds	r2, #104	; 0x68
    2232:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    2234:	18d3      	adds	r3, r2, r3
    2236:	69a1      	ldr	r1, [r4, #24]
    2238:	428b      	cmp	r3, r1
    223a:	d2e7      	bcs.n	220c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    223c:	3201      	adds	r2, #1
    223e:	0092      	lsls	r2, r2, #2
    2240:	4663      	mov	r3, ip
    2242:	18f0      	adds	r0, r6, r3
    2244:	1820      	adds	r0, r4, r0
    2246:	2100      	movs	r1, #0
    2248:	4b12      	ldr	r3, [pc, #72]	; (2294 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    224a:	4798      	blx	r3
    224c:	e7de      	b.n	220c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
    224e:	3301      	adds	r3, #1
    2250:	69a2      	ldr	r2, [r4, #24]
    2252:	4293      	cmp	r3, r2
    2254:	d207      	bcs.n	2266 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    2256:	4b0e      	ldr	r3, [pc, #56]	; (2290 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    2258:	18f0      	adds	r0, r6, r3
    225a:	1820      	adds	r0, r4, r0
    225c:	2208      	movs	r2, #8
    225e:	2100      	movs	r1, #0
    2260:	4b0c      	ldr	r3, [pc, #48]	; (2294 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    2262:	4798      	blx	r3
    2264:	e7d2      	b.n	220c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    2266:	4b0a      	ldr	r3, [pc, #40]	; (2290 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    2268:	18e0      	adds	r0, r4, r3
    226a:	2204      	movs	r2, #4
    226c:	2100      	movs	r1, #0
    226e:	4b09      	ldr	r3, [pc, #36]	; (2294 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    2270:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
<<<<<<< Updated upstream
    224a:	4b07      	ldr	r3, [pc, #28]	; (2268 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    224c:	18f0      	adds	r0, r6, r3
    224e:	1820      	adds	r0, r4, r0
    2250:	2204      	movs	r2, #4
    2252:	2100      	movs	r1, #0
    2254:	4b05      	ldr	r3, [pc, #20]	; (226c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    2256:	4798      	blx	r3
    2258:	e7c4      	b.n	21e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	20000334 	.word	0x20000334
    2260:	00009ea4 	.word	0x00009ea4
    2264:	00002125 	.word	0x00002125
    2268:	00000968 	.word	0x00000968
    226c:	00008d13 	.word	0x00008d13

00002270 <prvTraceUpdateCounters>:
=======
    2272:	4b07      	ldr	r3, [pc, #28]	; (2290 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    2274:	18f0      	adds	r0, r6, r3
    2276:	1820      	adds	r0, r4, r0
    2278:	2204      	movs	r2, #4
    227a:	2100      	movs	r1, #0
    227c:	4b05      	ldr	r3, [pc, #20]	; (2294 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    227e:	4798      	blx	r3
    2280:	e7c4      	b.n	220c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	20000334 	.word	0x20000334
    2288:	00009ed0 	.word	0x00009ed0
    228c:	0000214d 	.word	0x0000214d
    2290:	00000968 	.word	0x00000968
    2294:	00008d33 	.word	0x00008d33

00002298 <prvTraceUpdateCounters>:
>>>>>>> Stashed changes
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    2298:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
    229a:	4b0b      	ldr	r3, [pc, #44]	; (22c8 <prvTraceUpdateCounters+0x30>)
    229c:	681b      	ldr	r3, [r3, #0]
    229e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    22a0:	2a00      	cmp	r2, #0
    22a2:	d010      	beq.n	22c6 <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    22a4:	695a      	ldr	r2, [r3, #20]
    22a6:	3201      	adds	r2, #1
    22a8:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    22aa:	69da      	ldr	r2, [r3, #28]
    22ac:	3201      	adds	r2, #1
    22ae:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    22b0:	2190      	movs	r1, #144	; 0x90
    22b2:	31ff      	adds	r1, #255	; 0xff
    22b4:	428a      	cmp	r2, r1
    22b6:	d903      	bls.n	22c0 <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    22b8:	2201      	movs	r2, #1
    22ba:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    22bc:	2200      	movs	r2, #0
    22be:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    22c0:	2001      	movs	r0, #1
    22c2:	4b02      	ldr	r3, [pc, #8]	; (22cc <prvTraceUpdateCounters+0x34>)
    22c4:	4798      	blx	r3
#endif
}
    22c6:	bd10      	pop	{r4, pc}
    22c8:	20000334 	.word	0x20000334
    22cc:	000021e5 	.word	0x000021e5

000022d0 <prvTraceGetParam>:
{
    22d0:	b570      	push	{r4, r5, r6, lr}
    22d2:	0004      	movs	r4, r0
    22d4:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    22d6:	28ff      	cmp	r0, #255	; 0xff
    22d8:	d002      	beq.n	22e0 <prvTraceGetParam+0x10>
    22da:	4b0d      	ldr	r3, [pc, #52]	; (2310 <prvTraceGetParam+0x40>)
    22dc:	4298      	cmp	r0, r3
    22de:	d103      	bne.n	22e8 <prvTraceGetParam+0x18>
	if (param <= param_max)
    22e0:	42ac      	cmp	r4, r5
    22e2:	d305      	bcc.n	22f0 <prvTraceGetParam+0x20>
}
    22e4:	0028      	movs	r0, r5
    22e6:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    22e8:	480a      	ldr	r0, [pc, #40]	; (2314 <prvTraceGetParam+0x44>)
    22ea:	4b0b      	ldr	r3, [pc, #44]	; (2318 <prvTraceGetParam+0x48>)
    22ec:	4798      	blx	r3
    22ee:	e7f9      	b.n	22e4 <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    22f0:	4b0a      	ldr	r3, [pc, #40]	; (231c <prvTraceGetParam+0x4c>)
    22f2:	4798      	blx	r3
		if (xps != NULL)
    22f4:	2800      	cmp	r0, #0
    22f6:	d009      	beq.n	230c <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
    22f8:	2301      	movs	r3, #1
    22fa:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    22fc:	002b      	movs	r3, r5
    22fe:	43a3      	bics	r3, r4
    2300:	0a1a      	lsrs	r2, r3, #8
    2302:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    2304:	0c1b      	lsrs	r3, r3, #16
    2306:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    2308:	4b05      	ldr	r3, [pc, #20]	; (2320 <prvTraceGetParam+0x50>)
    230a:	4798      	blx	r3
		return param & param_max;
<<<<<<< Updated upstream
    22e4:	4025      	ands	r5, r4
    22e6:	e7e9      	b.n	22bc <prvTraceGetParam+0x14>
    22e8:	0000ffff 	.word	0x0000ffff
    22ec:	00009fa8 	.word	0x00009fa8
    22f0:	00002125 	.word	0x00002125
    22f4:	0000217d 	.word	0x0000217d
    22f8:	00002271 	.word	0x00002271

000022fc <uiIndexOfObject>:
=======
    230c:	4025      	ands	r5, r4
    230e:	e7e9      	b.n	22e4 <prvTraceGetParam+0x14>
    2310:	0000ffff 	.word	0x0000ffff
    2314:	00009fd4 	.word	0x00009fd4
    2318:	0000214d 	.word	0x0000214d
    231c:	000021a5 	.word	0x000021a5
    2320:	00002299 	.word	0x00002299

00002324 <uiIndexOfObject>:
>>>>>>> Stashed changes
{
    2324:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    2326:	2908      	cmp	r1, #8
    2328:	d814      	bhi.n	2354 <uiIndexOfObject+0x30>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    232a:	2800      	cmp	r0, #0
    232c:	d017      	beq.n	235e <uiIndexOfObject+0x3a>
    232e:	4b0e      	ldr	r3, [pc, #56]	; (2368 <uiIndexOfObject+0x44>)
    2330:	681a      	ldr	r2, [r3, #0]
    2332:	1853      	adds	r3, r2, r1
    2334:	3364      	adds	r3, #100	; 0x64
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	4283      	cmp	r3, r0
    233a:	d310      	bcc.n	235e <uiIndexOfObject+0x3a>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    233c:	1853      	adds	r3, r2, r1
    233e:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    2340:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    2342:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    2344:	4358      	muls	r0, r3
    2346:	3140      	adds	r1, #64	; 0x40
    2348:	0049      	lsls	r1, r1, #1
    234a:	1851      	adds	r1, r2, r1
    234c:	890b      	ldrh	r3, [r1, #8]
    234e:	18c0      	adds	r0, r0, r3
    2350:	b280      	uxth	r0, r0
    2352:	e008      	b.n	2366 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    2354:	4805      	ldr	r0, [pc, #20]	; (236c <uiIndexOfObject+0x48>)
    2356:	4b06      	ldr	r3, [pc, #24]	; (2370 <uiIndexOfObject+0x4c>)
    2358:	4798      	blx	r3
    235a:	2000      	movs	r0, #0
    235c:	e003      	b.n	2366 <uiIndexOfObject+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    235e:	4805      	ldr	r0, [pc, #20]	; (2374 <uiIndexOfObject+0x50>)
    2360:	4b03      	ldr	r3, [pc, #12]	; (2370 <uiIndexOfObject+0x4c>)
    2362:	4798      	blx	r3
    2364:	2000      	movs	r0, #0
}
<<<<<<< Updated upstream
    233e:	bd10      	pop	{r4, pc}
    2340:	20000334 	.word	0x20000334
    2344:	0000a638 	.word	0x0000a638
    2348:	00002125 	.word	0x00002125
<<<<<<< HEAD
    234c:	0000a674 	.word	0x0000a674
=======
    2366:	bd10      	pop	{r4, pc}
    2368:	20000334 	.word	0x20000334
    236c:	0000a664 	.word	0x0000a664
    2370:	0000214d 	.word	0x0000214d
    2374:	0000a6a4 	.word	0x0000a6a4
>>>>>>> Stashed changes

00002378 <prvMarkObjectAsUsed>:
=======
    234c:	0000a678 	.word	0x0000a678

00002350 <prvMarkObjectAsUsed>:
>>>>>>> parent of 79ffb95 (comment)
{
    2378:	b510      	push	{r4, lr}
    237a:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    237c:	0001      	movs	r1, r0
    237e:	0018      	movs	r0, r3
    2380:	4b04      	ldr	r3, [pc, #16]	; (2394 <prvMarkObjectAsUsed+0x1c>)
    2382:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    2384:	4b04      	ldr	r3, [pc, #16]	; (2398 <prvMarkObjectAsUsed+0x20>)
    2386:	681b      	ldr	r3, [r3, #0]
    2388:	1818      	adds	r0, r3, r0
    238a:	309c      	adds	r0, #156	; 0x9c
    238c:	2301      	movs	r3, #1
    238e:	7003      	strb	r3, [r0, #0]
}
    2390:	bd10      	pop	{r4, pc}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	00002325 	.word	0x00002325
    2398:	20000334 	.word	0x20000334

0000239c <prvTraceSetPriorityProperty>:
{
    239c:	b570      	push	{r4, r5, r6, lr}
    239e:	0004      	movs	r4, r0
    23a0:	0008      	movs	r0, r1
    23a2:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    23a4:	2c08      	cmp	r4, #8
    23a6:	d813      	bhi.n	23d0 <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    23a8:	4b0d      	ldr	r3, [pc, #52]	; (23e0 <prvTraceSetPriorityProperty+0x44>)
    23aa:	681b      	ldr	r3, [r3, #0]
    23ac:	191b      	adds	r3, r3, r4
    23ae:	3364      	adds	r3, #100	; 0x64
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	428b      	cmp	r3, r1
    23b4:	d310      	bcc.n	23d8 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    23b6:	0021      	movs	r1, r4
    23b8:	4b0a      	ldr	r3, [pc, #40]	; (23e4 <prvTraceSetPriorityProperty+0x48>)
    23ba:	4798      	blx	r3
    23bc:	4b08      	ldr	r3, [pc, #32]	; (23e0 <prvTraceSetPriorityProperty+0x44>)
    23be:	681b      	ldr	r3, [r3, #0]
    23c0:	191c      	adds	r4, r3, r4
    23c2:	3470      	adds	r4, #112	; 0x70
    23c4:	7822      	ldrb	r2, [r4, #0]
    23c6:	181b      	adds	r3, r3, r0
    23c8:	189b      	adds	r3, r3, r2
    23ca:	339d      	adds	r3, #157	; 0x9d
    23cc:	701d      	strb	r5, [r3, #0]
}
    23ce:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    23d0:	4805      	ldr	r0, [pc, #20]	; (23e8 <prvTraceSetPriorityProperty+0x4c>)
    23d2:	4b06      	ldr	r3, [pc, #24]	; (23ec <prvTraceSetPriorityProperty+0x50>)
    23d4:	4798      	blx	r3
    23d6:	e7fa      	b.n	23ce <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
<<<<<<< Updated upstream
    23b0:	4805      	ldr	r0, [pc, #20]	; (23c8 <prvTraceSetPriorityProperty+0x54>)
    23b2:	4b04      	ldr	r3, [pc, #16]	; (23c4 <prvTraceSetPriorityProperty+0x50>)
    23b4:	4798      	blx	r3
    23b6:	e7f6      	b.n	23a6 <prvTraceSetPriorityProperty+0x32>
    23b8:	20000334 	.word	0x20000334
    23bc:	000022fd 	.word	0x000022fd
    23c0:	0000a1c0 	.word	0x0000a1c0
    23c4:	00002125 	.word	0x00002125
    23c8:	0000a20c 	.word	0x0000a20c

000023cc <prvTraceGetPriorityProperty>:
=======
    23d8:	4805      	ldr	r0, [pc, #20]	; (23f0 <prvTraceSetPriorityProperty+0x54>)
    23da:	4b04      	ldr	r3, [pc, #16]	; (23ec <prvTraceSetPriorityProperty+0x50>)
    23dc:	4798      	blx	r3
    23de:	e7f6      	b.n	23ce <prvTraceSetPriorityProperty+0x32>
    23e0:	20000334 	.word	0x20000334
    23e4:	00002325 	.word	0x00002325
    23e8:	0000a1ec 	.word	0x0000a1ec
    23ec:	0000214d 	.word	0x0000214d
    23f0:	0000a238 	.word	0x0000a238

000023f4 <prvTraceGetPriorityProperty>:
>>>>>>> Stashed changes
{
    23f4:	b510      	push	{r4, lr}
    23f6:	0004      	movs	r4, r0
    23f8:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    23fa:	2c08      	cmp	r4, #8
    23fc:	d813      	bhi.n	2426 <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    23fe:	4b0f      	ldr	r3, [pc, #60]	; (243c <prvTraceGetPriorityProperty+0x48>)
    2400:	681b      	ldr	r3, [r3, #0]
    2402:	191b      	adds	r3, r3, r4
    2404:	3364      	adds	r3, #100	; 0x64
    2406:	781b      	ldrb	r3, [r3, #0]
    2408:	428b      	cmp	r3, r1
    240a:	d311      	bcc.n	2430 <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    240c:	0021      	movs	r1, r4
    240e:	4b0c      	ldr	r3, [pc, #48]	; (2440 <prvTraceGetPriorityProperty+0x4c>)
    2410:	4798      	blx	r3
    2412:	4b0a      	ldr	r3, [pc, #40]	; (243c <prvTraceGetPriorityProperty+0x48>)
    2414:	681b      	ldr	r3, [r3, #0]
    2416:	191c      	adds	r4, r3, r4
    2418:	3470      	adds	r4, #112	; 0x70
    241a:	7822      	ldrb	r2, [r4, #0]
    241c:	181b      	adds	r3, r3, r0
    241e:	189b      	adds	r3, r3, r2
    2420:	339d      	adds	r3, #157	; 0x9d
    2422:	7818      	ldrb	r0, [r3, #0]
}
    2424:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2426:	4807      	ldr	r0, [pc, #28]	; (2444 <prvTraceGetPriorityProperty+0x50>)
    2428:	4b07      	ldr	r3, [pc, #28]	; (2448 <prvTraceGetPriorityProperty+0x54>)
    242a:	4798      	blx	r3
    242c:	2000      	movs	r0, #0
    242e:	e7f9      	b.n	2424 <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
<<<<<<< Updated upstream
    2408:	4806      	ldr	r0, [pc, #24]	; (2424 <prvTraceGetPriorityProperty+0x58>)
    240a:	4b05      	ldr	r3, [pc, #20]	; (2420 <prvTraceGetPriorityProperty+0x54>)
    240c:	4798      	blx	r3
    240e:	2000      	movs	r0, #0
    2410:	e7f4      	b.n	23fc <prvTraceGetPriorityProperty+0x30>
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	20000334 	.word	0x20000334
    2418:	000022fd 	.word	0x000022fd
    241c:	00009fe4 	.word	0x00009fe4
    2420:	00002125 	.word	0x00002125
    2424:	0000a030 	.word	0x0000a030

00002428 <prvTraceSetObjectState>:
=======
    2430:	4806      	ldr	r0, [pc, #24]	; (244c <prvTraceGetPriorityProperty+0x58>)
    2432:	4b05      	ldr	r3, [pc, #20]	; (2448 <prvTraceGetPriorityProperty+0x54>)
    2434:	4798      	blx	r3
    2436:	2000      	movs	r0, #0
    2438:	e7f4      	b.n	2424 <prvTraceGetPriorityProperty+0x30>
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	20000334 	.word	0x20000334
    2440:	00002325 	.word	0x00002325
    2444:	0000a010 	.word	0x0000a010
    2448:	0000214d 	.word	0x0000214d
    244c:	0000a05c 	.word	0x0000a05c

00002450 <prvTraceSetObjectState>:
>>>>>>> Stashed changes
{
    2450:	b570      	push	{r4, r5, r6, lr}
    2452:	0004      	movs	r4, r0
    2454:	0008      	movs	r0, r1
    2456:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2458:	2c08      	cmp	r4, #8
    245a:	d813      	bhi.n	2484 <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    245c:	4b0d      	ldr	r3, [pc, #52]	; (2494 <prvTraceSetObjectState+0x44>)
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	191b      	adds	r3, r3, r4
    2462:	3364      	adds	r3, #100	; 0x64
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	428b      	cmp	r3, r1
    2468:	d310      	bcc.n	248c <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    246a:	0021      	movs	r1, r4
    246c:	4b0a      	ldr	r3, [pc, #40]	; (2498 <prvTraceSetObjectState+0x48>)
    246e:	4798      	blx	r3
    2470:	4b08      	ldr	r3, [pc, #32]	; (2494 <prvTraceSetObjectState+0x44>)
    2472:	681b      	ldr	r3, [r3, #0]
    2474:	191c      	adds	r4, r3, r4
    2476:	3470      	adds	r4, #112	; 0x70
    2478:	7822      	ldrb	r2, [r4, #0]
    247a:	181b      	adds	r3, r3, r0
    247c:	189b      	adds	r3, r3, r2
    247e:	339c      	adds	r3, #156	; 0x9c
    2480:	701d      	strb	r5, [r3, #0]
}
    2482:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2484:	4805      	ldr	r0, [pc, #20]	; (249c <prvTraceSetObjectState+0x4c>)
    2486:	4b06      	ldr	r3, [pc, #24]	; (24a0 <prvTraceSetObjectState+0x50>)
    2488:	4798      	blx	r3
    248a:	e7fa      	b.n	2482 <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
<<<<<<< Updated upstream
    2464:	4805      	ldr	r0, [pc, #20]	; (247c <prvTraceSetObjectState+0x54>)
    2466:	4b04      	ldr	r3, [pc, #16]	; (2478 <prvTraceSetObjectState+0x50>)
    2468:	4798      	blx	r3
    246a:	e7f6      	b.n	245a <prvTraceSetObjectState+0x32>
    246c:	20000334 	.word	0x20000334
    2470:	000022fd 	.word	0x000022fd
    2474:	0000a140 	.word	0x0000a140
    2478:	00002125 	.word	0x00002125
    247c:	0000a184 	.word	0x0000a184

00002480 <prvTraceSetTaskInstanceFinished>:
=======
    248c:	4805      	ldr	r0, [pc, #20]	; (24a4 <prvTraceSetObjectState+0x54>)
    248e:	4b04      	ldr	r3, [pc, #16]	; (24a0 <prvTraceSetObjectState+0x50>)
    2490:	4798      	blx	r3
    2492:	e7f6      	b.n	2482 <prvTraceSetObjectState+0x32>
    2494:	20000334 	.word	0x20000334
    2498:	00002325 	.word	0x00002325
    249c:	0000a16c 	.word	0x0000a16c
    24a0:	0000214d 	.word	0x0000214d
    24a4:	0000a1b0 	.word	0x0000a1b0

000024a8 <prvTraceSetTaskInstanceFinished>:
>>>>>>> Stashed changes
{
    24a8:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    24aa:	4b0b      	ldr	r3, [pc, #44]	; (24d8 <prvTraceSetTaskInstanceFinished+0x30>)
    24ac:	681a      	ldr	r2, [r3, #0]
    24ae:	2367      	movs	r3, #103	; 0x67
    24b0:	5cd3      	ldrb	r3, [r2, r3]
    24b2:	4283      	cmp	r3, r0
    24b4:	d30c      	bcc.n	24d0 <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    24b6:	2103      	movs	r1, #3
    24b8:	4b08      	ldr	r3, [pc, #32]	; (24dc <prvTraceSetTaskInstanceFinished+0x34>)
    24ba:	4798      	blx	r3
    24bc:	4b06      	ldr	r3, [pc, #24]	; (24d8 <prvTraceSetTaskInstanceFinished+0x30>)
    24be:	681b      	ldr	r3, [r3, #0]
    24c0:	2273      	movs	r2, #115	; 0x73
    24c2:	5c9a      	ldrb	r2, [r3, r2]
    24c4:	181b      	adds	r3, r3, r0
    24c6:	189b      	adds	r3, r3, r2
    24c8:	339c      	adds	r3, #156	; 0x9c
    24ca:	2200      	movs	r2, #0
    24cc:	701a      	strb	r2, [r3, #0]
}
    24ce:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
<<<<<<< Updated upstream
    24a8:	4803      	ldr	r0, [pc, #12]	; (24b8 <prvTraceSetTaskInstanceFinished+0x38>)
    24aa:	4b04      	ldr	r3, [pc, #16]	; (24bc <prvTraceSetTaskInstanceFinished+0x3c>)
    24ac:	4798      	blx	r3
    24ae:	e7fa      	b.n	24a6 <prvTraceSetTaskInstanceFinished+0x26>
    24b0:	20000334 	.word	0x20000334
    24b4:	000022fd 	.word	0x000022fd
    24b8:	0000a24c 	.word	0x0000a24c
    24bc:	00002125 	.word	0x00002125

000024c0 <prvTraceGetObjectHandle>:
=======
    24d0:	4803      	ldr	r0, [pc, #12]	; (24e0 <prvTraceSetTaskInstanceFinished+0x38>)
    24d2:	4b04      	ldr	r3, [pc, #16]	; (24e4 <prvTraceSetTaskInstanceFinished+0x3c>)
    24d4:	4798      	blx	r3
    24d6:	e7fa      	b.n	24ce <prvTraceSetTaskInstanceFinished+0x26>
    24d8:	20000334 	.word	0x20000334
    24dc:	00002325 	.word	0x00002325
    24e0:	0000a278 	.word	0x0000a278
    24e4:	0000214d 	.word	0x0000214d

000024e8 <prvTraceGetObjectHandle>:
>>>>>>> Stashed changes
{
    24e8:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    24ea:	4b2d      	ldr	r3, [pc, #180]	; (25a0 <prvTraceGetObjectHandle+0xb8>)
    24ec:	681b      	ldr	r3, [r3, #0]
    24ee:	2b00      	cmp	r3, #0
    24f0:	d046      	beq.n	2580 <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    24f2:	2808      	cmp	r0, #8
    24f4:	d849      	bhi.n	258a <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    24f6:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    24fa:	2301      	movs	r3, #1
    24fc:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2500:	4a28      	ldr	r2, [pc, #160]	; (25a4 <prvTraceGetObjectHandle+0xbc>)
    2502:	6813      	ldr	r3, [r2, #0]
    2504:	3301      	adds	r3, #1
    2506:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    2508:	4a27      	ldr	r2, [pc, #156]	; (25a8 <prvTraceGetObjectHandle+0xc0>)
    250a:	0043      	lsls	r3, r0, #1
    250c:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    250e:	18d2      	adds	r2, r2, r3
    2510:	3248      	adds	r2, #72	; 0x48
    2512:	7812      	ldrb	r2, [r2, #0]
    2514:	2a00      	cmp	r2, #0
    2516:	d10a      	bne.n	252e <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
    2518:	4923      	ldr	r1, [pc, #140]	; (25a8 <prvTraceGetObjectHandle+0xc0>)
    251a:	18cd      	adds	r5, r1, r3
    251c:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
    251e:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    2520:	0006      	movs	r6, r0
    2522:	3608      	adds	r6, #8
    2524:	0076      	lsls	r6, r6, #1
    2526:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
    2528:	8849      	ldrh	r1, [r1, #2]
    252a:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
    252c:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    252e:	0001      	movs	r1, r0
    2530:	3110      	adds	r1, #16
    2532:	0049      	lsls	r1, r1, #1
    2534:	4a1c      	ldr	r2, [pc, #112]	; (25a8 <prvTraceGetObjectHandle+0xc0>)
    2536:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    2538:	8892      	ldrh	r2, [r2, #4]
    253a:	429a      	cmp	r2, r3
    253c:	d32a      	bcc.n	2594 <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
    253e:	491a      	ldr	r1, [pc, #104]	; (25a8 <prvTraceGetObjectHandle+0xc0>)
    2540:	18ca      	adds	r2, r1, r3
    2542:	3248      	adds	r2, #72	; 0x48
    2544:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    2546:	3301      	adds	r3, #1
    2548:	b29b      	uxth	r3, r3
    254a:	0045      	lsls	r5, r0, #1
    254c:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
    254e:	0005      	movs	r5, r0
    2550:	3508      	adds	r5, #8
    2552:	006d      	lsls	r5, r5, #1
    2554:	194d      	adds	r5, r1, r5
    2556:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    2558:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    255a:	0005      	movs	r5, r0
    255c:	3518      	adds	r5, #24
    255e:	006d      	lsls	r5, r5, #1
    2560:	1949      	adds	r1, r1, r5
    2562:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
    2564:	428b      	cmp	r3, r1
    2566:	dd03      	ble.n	2570 <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    2568:	490f      	ldr	r1, [pc, #60]	; (25a8 <prvTraceGetObjectHandle+0xc0>)
    256a:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
    256c:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    256e:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
    2570:	490c      	ldr	r1, [pc, #48]	; (25a4 <prvTraceGetObjectHandle+0xbc>)
    2572:	680b      	ldr	r3, [r1, #0]
    2574:	3b01      	subs	r3, #1
    2576:	600b      	str	r3, [r1, #0]
    2578:	f384 8810 	msr	PRIMASK, r4
}
    257c:	0010      	movs	r0, r2
    257e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    2580:	480a      	ldr	r0, [pc, #40]	; (25ac <prvTraceGetObjectHandle+0xc4>)
    2582:	4b0b      	ldr	r3, [pc, #44]	; (25b0 <prvTraceGetObjectHandle+0xc8>)
    2584:	4798      	blx	r3
    2586:	2200      	movs	r2, #0
    2588:	e7f8      	b.n	257c <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    258a:	480a      	ldr	r0, [pc, #40]	; (25b4 <prvTraceGetObjectHandle+0xcc>)
    258c:	4b08      	ldr	r3, [pc, #32]	; (25b0 <prvTraceGetObjectHandle+0xc8>)
    258e:	4798      	blx	r3
    2590:	2200      	movs	r2, #0
    2592:	e7f3      	b.n	257c <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    2594:	4b08      	ldr	r3, [pc, #32]	; (25b8 <prvTraceGetObjectHandle+0xd0>)
    2596:	4798      	blx	r3
    2598:	4b05      	ldr	r3, [pc, #20]	; (25b0 <prvTraceGetObjectHandle+0xc8>)
    259a:	4798      	blx	r3
		handle = 0;
<<<<<<< Updated upstream
    2574:	2200      	movs	r2, #0
    2576:	e7e7      	b.n	2548 <prvTraceGetObjectHandle+0x88>
    2578:	20000334 	.word	0x20000334
    257c:	200003e4 	.word	0x200003e4
    2580:	20000350 	.word	0x20000350
    2584:	0000a73c 	.word	0x0000a73c
    2588:	00002125 	.word	0x00002125
    258c:	00009f60 	.word	0x00009f60
    2590:	00001ea5 	.word	0x00001ea5

00002594 <prvTraceSetObjectName>:
=======
    259c:	2200      	movs	r2, #0
    259e:	e7e7      	b.n	2570 <prvTraceGetObjectHandle+0x88>
    25a0:	20000334 	.word	0x20000334
    25a4:	200003e4 	.word	0x200003e4
    25a8:	20000350 	.word	0x20000350
    25ac:	0000a768 	.word	0x0000a768
    25b0:	0000214d 	.word	0x0000214d
    25b4:	00009f8c 	.word	0x00009f8c
    25b8:	00001ecd 	.word	0x00001ecd

000025bc <prvTraceSetObjectName>:
>>>>>>> Stashed changes
{
    25bc:	b570      	push	{r4, r5, r6, lr}
    25be:	0004      	movs	r4, r0
    25c0:	0008      	movs	r0, r1
    25c2:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    25c4:	d012      	beq.n	25ec <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
    25c6:	2c08      	cmp	r4, #8
    25c8:	d814      	bhi.n	25f4 <prvTraceSetObjectName+0x38>
	if (handle == 0)
    25ca:	2900      	cmp	r1, #0
    25cc:	d016      	beq.n	25fc <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    25ce:	4b16      	ldr	r3, [pc, #88]	; (2628 <prvTraceSetObjectName+0x6c>)
    25d0:	681b      	ldr	r3, [r3, #0]
    25d2:	191b      	adds	r3, r3, r4
    25d4:	3364      	adds	r3, #100	; 0x64
    25d6:	781b      	ldrb	r3, [r3, #0]
    25d8:	428b      	cmp	r3, r1
    25da:	d313      	bcc.n	2604 <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
    25dc:	0021      	movs	r1, r4
    25de:	4b13      	ldr	r3, [pc, #76]	; (262c <prvTraceSetObjectName+0x70>)
    25e0:	4798      	blx	r3
		if (traceErrorMessage == NULL)
    25e2:	4b13      	ldr	r3, [pc, #76]	; (2630 <prvTraceSetObjectName+0x74>)
    25e4:	681b      	ldr	r3, [r3, #0]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d012      	beq.n	2610 <prvTraceSetObjectName+0x54>
}
    25ea:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    25ec:	4811      	ldr	r0, [pc, #68]	; (2634 <prvTraceSetObjectName+0x78>)
    25ee:	4b12      	ldr	r3, [pc, #72]	; (2638 <prvTraceSetObjectName+0x7c>)
    25f0:	4798      	blx	r3
    25f2:	e7fa      	b.n	25ea <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    25f4:	4811      	ldr	r0, [pc, #68]	; (263c <prvTraceSetObjectName+0x80>)
    25f6:	4b10      	ldr	r3, [pc, #64]	; (2638 <prvTraceSetObjectName+0x7c>)
    25f8:	4798      	blx	r3
		return;
    25fa:	e7f6      	b.n	25ea <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    25fc:	4810      	ldr	r0, [pc, #64]	; (2640 <prvTraceSetObjectName+0x84>)
    25fe:	4b0e      	ldr	r3, [pc, #56]	; (2638 <prvTraceSetObjectName+0x7c>)
    2600:	4798      	blx	r3
		return;
    2602:	e7f2      	b.n	25ea <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    2604:	0020      	movs	r0, r4
    2606:	4b0f      	ldr	r3, [pc, #60]	; (2644 <prvTraceSetObjectName+0x88>)
    2608:	4798      	blx	r3
    260a:	4b0b      	ldr	r3, [pc, #44]	; (2638 <prvTraceSetObjectName+0x7c>)
    260c:	4798      	blx	r3
    260e:	e7ec      	b.n	25ea <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    2610:	4b05      	ldr	r3, [pc, #20]	; (2628 <prvTraceSetObjectName+0x6c>)
    2612:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    2614:	191c      	adds	r4, r3, r4
    2616:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
<<<<<<< Updated upstream
    25f0:	7822      	ldrb	r2, [r4, #0]
    25f2:	309c      	adds	r0, #156	; 0x9c
    25f4:	1818      	adds	r0, r3, r0
    25f6:	0029      	movs	r1, r5
    25f8:	4b09      	ldr	r3, [pc, #36]	; (2620 <prvTraceSetObjectName+0x8c>)
    25fa:	4798      	blx	r3
    25fc:	e7e1      	b.n	25c2 <prvTraceSetObjectName+0x2e>
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	20000334 	.word	0x20000334
    2604:	000022fd 	.word	0x000022fd
    2608:	200003ec 	.word	0x200003ec
    260c:	0000a0ac 	.word	0x0000a0ac
    2610:	00002125 	.word	0x00002125
    2614:	0000a0e0 	.word	0x0000a0e0
    2618:	0000a110 	.word	0x0000a110
    261c:	00001ea5 	.word	0x00001ea5
    2620:	00001f05 	.word	0x00001f05

00002624 <prvTracePortGetTimeStamp>:
=======
    2618:	7822      	ldrb	r2, [r4, #0]
    261a:	309c      	adds	r0, #156	; 0x9c
    261c:	1818      	adds	r0, r3, r0
    261e:	0029      	movs	r1, r5
    2620:	4b09      	ldr	r3, [pc, #36]	; (2648 <prvTraceSetObjectName+0x8c>)
    2622:	4798      	blx	r3
    2624:	e7e1      	b.n	25ea <prvTraceSetObjectName+0x2e>
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	20000334 	.word	0x20000334
    262c:	00002325 	.word	0x00002325
    2630:	200003ec 	.word	0x200003ec
    2634:	0000a0d8 	.word	0x0000a0d8
    2638:	0000214d 	.word	0x0000214d
    263c:	0000a10c 	.word	0x0000a10c
    2640:	0000a13c 	.word	0x0000a13c
    2644:	00001ecd 	.word	0x00001ecd
    2648:	00001f2d 	.word	0x00001f2d

0000264c <prvTracePortGetTimeStamp>:
>>>>>>> Stashed changes
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    264c:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    264e:	4b1e      	ldr	r3, [pc, #120]	; (26c8 <prvTracePortGetTimeStamp+0x7c>)
    2650:	681b      	ldr	r3, [r3, #0]
    2652:	2b01      	cmp	r3, #1
    2654:	d02b      	beq.n	26ae <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    2656:	4b1d      	ldr	r3, [pc, #116]	; (26cc <prvTracePortGetTimeStamp+0x80>)
    2658:	6819      	ldr	r1, [r3, #0]
    265a:	4b1d      	ldr	r3, [pc, #116]	; (26d0 <prvTracePortGetTimeStamp+0x84>)
    265c:	681b      	ldr	r3, [r3, #0]
    265e:	3101      	adds	r1, #1
    2660:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    2662:	4b1c      	ldr	r3, [pc, #112]	; (26d4 <prvTracePortGetTimeStamp+0x88>)
    2664:	681b      	ldr	r3, [r3, #0]
    2666:	4a1c      	ldr	r2, [pc, #112]	; (26d8 <prvTracePortGetTimeStamp+0x8c>)
    2668:	6814      	ldr	r4, [r2, #0]
    266a:	43e2      	mvns	r2, r4
    266c:	42da      	cmn	r2, r3
    266e:	d424      	bmi.n	26ba <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    2670:	4a1a      	ldr	r2, [pc, #104]	; (26dc <prvTracePortGetTimeStamp+0x90>)
    2672:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    2674:	42a1      	cmp	r1, r4
    2676:	41a4      	sbcs	r4, r4
    2678:	4264      	negs	r4, r4
    267a:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    267c:	2800      	cmp	r0, #0
    267e:	d01f      	beq.n	26c0 <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    2680:	4d12      	ldr	r5, [pc, #72]	; (26cc <prvTracePortGetTimeStamp+0x80>)
    2682:	682b      	ldr	r3, [r5, #0]
    2684:	3301      	adds	r3, #1
    2686:	089b      	lsrs	r3, r3, #2
    2688:	4363      	muls	r3, r4
    268a:	001a      	movs	r2, r3
    268c:	4e14      	ldr	r6, [pc, #80]	; (26e0 <prvTracePortGetTimeStamp+0x94>)
    268e:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    2690:	682d      	ldr	r5, [r5, #0]
    2692:	3501      	adds	r5, #1
    2694:	2303      	movs	r3, #3
    2696:	402b      	ands	r3, r5
    2698:	4363      	muls	r3, r4
    269a:	185b      	adds	r3, r3, r1
    269c:	089b      	lsrs	r3, r3, #2
    269e:	189b      	adds	r3, r3, r2
    26a0:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    26a2:	4a0c      	ldr	r2, [pc, #48]	; (26d4 <prvTracePortGetTimeStamp+0x88>)
    26a4:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
    26a6:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    26a8:	4b0c      	ldr	r3, [pc, #48]	; (26dc <prvTracePortGetTimeStamp+0x90>)
    26aa:	6019      	str	r1, [r3, #0]
}
    26ac:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
    26ae:	2800      	cmp	r0, #0
    26b0:	d0fc      	beq.n	26ac <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
    26b2:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <prvTracePortGetTimeStamp+0x94>)
    26b4:	681b      	ldr	r3, [r3, #0]
    26b6:	6003      	str	r3, [r0, #0]
    26b8:	e7f8      	b.n	26ac <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    26ba:	42a3      	cmp	r3, r4
    26bc:	d1de      	bne.n	267c <prvTracePortGetTimeStamp+0x30>
    26be:	e7d7      	b.n	2670 <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
    26c0:	4b04      	ldr	r3, [pc, #16]	; (26d4 <prvTracePortGetTimeStamp+0x88>)
    26c2:	601c      	str	r4, [r3, #0]
    26c4:	e7f0      	b.n	26a8 <prvTracePortGetTimeStamp+0x5c>
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	200003f0 	.word	0x200003f0
    26cc:	e000e014 	.word	0xe000e014
    26d0:	e000e018 	.word	0xe000e018
    26d4:	2000034c 	.word	0x2000034c
    26d8:	200003f8 	.word	0x200003f8
    26dc:	20000344 	.word	0x20000344
    26e0:	20000348 	.word	0x20000348

000026e4 <prvTraceGetDTS>:
{
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e6:	b083      	sub	sp, #12
    26e8:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
    26ea:	2300      	movs	r3, #0
    26ec:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    26ee:	28ff      	cmp	r0, #255	; 0xff
    26f0:	d002      	beq.n	26f8 <prvTraceGetDTS+0x14>
    26f2:	4b39      	ldr	r3, [pc, #228]	; (27d8 <prvTraceGetDTS+0xf4>)
    26f4:	4298      	cmp	r0, r3
    26f6:	d135      	bne.n	2764 <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
    26f8:	4b38      	ldr	r3, [pc, #224]	; (27dc <prvTraceGetDTS+0xf8>)
    26fa:	681c      	ldr	r4, [r3, #0]
    26fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    26fe:	2b00      	cmp	r3, #0
    2700:	d105      	bne.n	270e <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
    2702:	4b37      	ldr	r3, [pc, #220]	; (27e0 <prvTraceGetDTS+0xfc>)
    2704:	681b      	ldr	r3, [r3, #0]
    2706:	2b00      	cmp	r3, #0
    2708:	d031      	beq.n	276e <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    270a:	089b      	lsrs	r3, r3, #2
    270c:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
    270e:	a801      	add	r0, sp, #4
    2710:	4b34      	ldr	r3, [pc, #208]	; (27e4 <prvTraceGetDTS+0x100>)
    2712:	4798      	blx	r3
	dts = timestamp - old_timestamp;
    2714:	9b01      	ldr	r3, [sp, #4]
    2716:	4a34      	ldr	r2, [pc, #208]	; (27e8 <prvTraceGetDTS+0x104>)
    2718:	6811      	ldr	r1, [r2, #0]
    271a:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
    271c:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
    271e:	4a2f      	ldr	r2, [pc, #188]	; (27dc <prvTraceGetDTS+0xf8>)
    2720:	6816      	ldr	r6, [r2, #0]
    2722:	6a77      	ldr	r7, [r6, #36]	; 0x24
    2724:	2f00      	cmp	r7, #0
    2726:	d032      	beq.n	278e <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
    2728:	42bc      	cmp	r4, r7
    272a:	d92c      	bls.n	2786 <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    272c:	0039      	movs	r1, r7
    272e:	0020      	movs	r0, r4
    2730:	4b2e      	ldr	r3, [pc, #184]	; (27ec <prvTraceGetDTS+0x108>)
    2732:	4798      	blx	r3
    2734:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2736:	469c      	mov	ip, r3
    2738:	4460      	add	r0, ip
    273a:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    273c:	0039      	movs	r1, r7
    273e:	0020      	movs	r0, r4
    2740:	4b2b      	ldr	r3, [pc, #172]	; (27f0 <prvTraceGetDTS+0x10c>)
    2742:	4798      	blx	r3
    2744:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2746:	469c      	mov	ip, r3
    2748:	4461      	add	r1, ip
    274a:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    274c:	4b23      	ldr	r3, [pc, #140]	; (27dc <prvTraceGetDTS+0xf8>)
    274e:	681b      	ldr	r3, [r3, #0]
    2750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2752:	6a59      	ldr	r1, [r3, #36]	; 0x24
    2754:	428a      	cmp	r2, r1
    2756:	d31b      	bcc.n	2790 <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
    2758:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    275a:	3001      	adds	r0, #1
    275c:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    275e:	1a52      	subs	r2, r2, r1
    2760:	629a      	str	r2, [r3, #40]	; 0x28
    2762:	e015      	b.n	2790 <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    2764:	4823      	ldr	r0, [pc, #140]	; (27f4 <prvTraceGetDTS+0x110>)
    2766:	4b24      	ldr	r3, [pc, #144]	; (27f8 <prvTraceGetDTS+0x114>)
    2768:	4798      	blx	r3
    276a:	2000      	movs	r0, #0
    276c:	e014      	b.n	2798 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    276e:	4b23      	ldr	r3, [pc, #140]	; (27fc <prvTraceGetDTS+0x118>)
    2770:	681a      	ldr	r2, [r3, #0]
    2772:	4b23      	ldr	r3, [pc, #140]	; (2800 <prvTraceGetDTS+0x11c>)
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	429a      	cmp	r2, r3
    2778:	d0c9      	beq.n	270e <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    277a:	2000      	movs	r0, #0
    277c:	4b21      	ldr	r3, [pc, #132]	; (2804 <prvTraceGetDTS+0x120>)
    277e:	4798      	blx	r3
    2780:	0880      	lsrs	r0, r0, #2
    2782:	6260      	str	r0, [r4, #36]	; 0x24
    2784:	e7c3      	b.n	270e <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
    2786:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2788:	191b      	adds	r3, r3, r4
    278a:	62b3      	str	r3, [r6, #40]	; 0x28
    278c:	e7de      	b.n	274c <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
    278e:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
    2790:	42ac      	cmp	r4, r5
    2792:	d803      	bhi.n	279c <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
    2794:	0020      	movs	r0, r4
    2796:	4028      	ands	r0, r5
}
    2798:	b003      	add	sp, #12
    279a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    279c:	4b1a      	ldr	r3, [pc, #104]	; (2808 <prvTraceGetDTS+0x124>)
    279e:	4798      	blx	r3
		if (xts != NULL)
    27a0:	2800      	cmp	r0, #0
    27a2:	d0f7      	beq.n	2794 <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
    27a4:	4b0c      	ldr	r3, [pc, #48]	; (27d8 <prvTraceGetDTS+0xf4>)
    27a6:	429d      	cmp	r5, r3
    27a8:	d007      	beq.n	27ba <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
    27aa:	2dff      	cmp	r5, #255	; 0xff
    27ac:	d00c      	beq.n	27c8 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    27ae:	4817      	ldr	r0, [pc, #92]	; (280c <prvTraceGetDTS+0x128>)
    27b0:	4b11      	ldr	r3, [pc, #68]	; (27f8 <prvTraceGetDTS+0x114>)
    27b2:	4798      	blx	r3
			prvTraceUpdateCounters();
    27b4:	4b16      	ldr	r3, [pc, #88]	; (2810 <prvTraceGetDTS+0x12c>)
    27b6:	4798      	blx	r3
    27b8:	e7ec      	b.n	2794 <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
    27ba:	23a9      	movs	r3, #169	; 0xa9
    27bc:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    27be:	0c23      	lsrs	r3, r4, #16
    27c0:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    27c2:	2300      	movs	r3, #0
    27c4:	7043      	strb	r3, [r0, #1]
    27c6:	e7f5      	b.n	27b4 <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
    27c8:	23a8      	movs	r3, #168	; 0xa8
    27ca:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    27cc:	0a23      	lsrs	r3, r4, #8
    27ce:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
<<<<<<< Updated upstream
    27a8:	0e23      	lsrs	r3, r4, #24
    27aa:	7043      	strb	r3, [r0, #1]
    27ac:	e7ee      	b.n	278c <prvTraceGetDTS+0xd0>
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	0000ffff 	.word	0x0000ffff
    27b4:	20000334 	.word	0x20000334
    27b8:	200003e8 	.word	0x200003e8
    27bc:	00002625 	.word	0x00002625
    27c0:	200003e0 	.word	0x200003e0
    27c4:	00006f51 	.word	0x00006f51
    27c8:	0000705d 	.word	0x0000705d
    27cc:	00009efc 	.word	0x00009efc
    27d0:	00002125 	.word	0x00002125
    27d4:	e000e018 	.word	0xe000e018
    27d8:	200048cc 	.word	0x200048cc
    27dc:	000068d5 	.word	0x000068d5
    27e0:	0000217d 	.word	0x0000217d
    27e4:	00009f3c 	.word	0x00009f3c
    27e8:	00002271 	.word	0x00002271

000027ec <prvTraceStoreTaskReady>:
=======
    27d0:	0e23      	lsrs	r3, r4, #24
    27d2:	7043      	strb	r3, [r0, #1]
    27d4:	e7ee      	b.n	27b4 <prvTraceGetDTS+0xd0>
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	0000ffff 	.word	0x0000ffff
    27dc:	20000334 	.word	0x20000334
    27e0:	200003e8 	.word	0x200003e8
    27e4:	0000264d 	.word	0x0000264d
    27e8:	200003e0 	.word	0x200003e0
    27ec:	00006f71 	.word	0x00006f71
    27f0:	0000707d 	.word	0x0000707d
    27f4:	00009f28 	.word	0x00009f28
    27f8:	0000214d 	.word	0x0000214d
    27fc:	e000e018 	.word	0xe000e018
    2800:	2000490c 	.word	0x2000490c
    2804:	000068f5 	.word	0x000068f5
    2808:	000021a5 	.word	0x000021a5
    280c:	00009f68 	.word	0x00009f68
    2810:	00002299 	.word	0x00002299

00002814 <prvTraceStoreTaskReady>:
>>>>>>> Stashed changes
{
    2814:	b570      	push	{r4, r5, r6, lr}
    2816:	1e04      	subs	r4, r0, #0
	if (handle == 0)
    2818:	d01d      	beq.n	2856 <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
    281a:	4b1b      	ldr	r3, [pc, #108]	; (2888 <prvTraceStoreTaskReady+0x74>)
    281c:	681b      	ldr	r3, [r3, #0]
    281e:	2b00      	cmp	r3, #0
    2820:	d019      	beq.n	2856 <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    2822:	280f      	cmp	r0, #15
    2824:	d818      	bhi.n	2858 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
    2826:	4b19      	ldr	r3, [pc, #100]	; (288c <prvTraceStoreTaskReady+0x78>)
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	2b00      	cmp	r3, #0
    282c:	d118      	bne.n	2860 <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    282e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2832:	2301      	movs	r3, #1
    2834:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2838:	4a14      	ldr	r2, [pc, #80]	; (288c <prvTraceStoreTaskReady+0x78>)
    283a:	6813      	ldr	r3, [r2, #0]
    283c:	3301      	adds	r3, #1
    283e:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    2840:	4b13      	ldr	r3, [pc, #76]	; (2890 <prvTraceStoreTaskReady+0x7c>)
    2842:	681b      	ldr	r3, [r3, #0]
    2844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2846:	2b00      	cmp	r3, #0
    2848:	d10e      	bne.n	2868 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
    284a:	4a10      	ldr	r2, [pc, #64]	; (288c <prvTraceStoreTaskReady+0x78>)
    284c:	6813      	ldr	r3, [r2, #0]
    284e:	3b01      	subs	r3, #1
    2850:	6013      	str	r3, [r2, #0]
    2852:	f385 8810 	msr	PRIMASK, r5
}
    2856:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    2858:	480e      	ldr	r0, [pc, #56]	; (2894 <prvTraceStoreTaskReady+0x80>)
    285a:	4b0f      	ldr	r3, [pc, #60]	; (2898 <prvTraceStoreTaskReady+0x84>)
    285c:	4798      	blx	r3
    285e:	e7fa      	b.n	2856 <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    2860:	480e      	ldr	r0, [pc, #56]	; (289c <prvTraceStoreTaskReady+0x88>)
    2862:	4b0d      	ldr	r3, [pc, #52]	; (2898 <prvTraceStoreTaskReady+0x84>)
    2864:	4798      	blx	r3
		return;
    2866:	e7f6      	b.n	2856 <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2868:	480d      	ldr	r0, [pc, #52]	; (28a0 <prvTraceStoreTaskReady+0x8c>)
    286a:	4b0e      	ldr	r3, [pc, #56]	; (28a4 <prvTraceStoreTaskReady+0x90>)
    286c:	4798      	blx	r3
    286e:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    2870:	4b0d      	ldr	r3, [pc, #52]	; (28a8 <prvTraceStoreTaskReady+0x94>)
    2872:	4798      	blx	r3
		if (tr != NULL)
    2874:	2800      	cmp	r0, #0
    2876:	d0e8      	beq.n	284a <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
    2878:	2302      	movs	r3, #2
    287a:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
    287c:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
    287e:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
<<<<<<< Updated upstream
    2858:	4b0a      	ldr	r3, [pc, #40]	; (2884 <prvTraceStoreTaskReady+0x98>)
    285a:	4798      	blx	r3
    285c:	e7e1      	b.n	2822 <prvTraceStoreTaskReady+0x36>
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	20000024 	.word	0x20000024
    2864:	200003e4 	.word	0x200003e4
    2868:	20000334 	.word	0x20000334
    286c:	0000a53c 	.word	0x0000a53c
    2870:	00002125 	.word	0x00002125
    2874:	0000a57c 	.word	0x0000a57c
    2878:	0000ffff 	.word	0x0000ffff
    287c:	000026bd 	.word	0x000026bd
    2880:	0000217d 	.word	0x0000217d
    2884:	00002271 	.word	0x00002271

00002888 <vTraceStoreMemMangEvent>:
=======
    2880:	4b0a      	ldr	r3, [pc, #40]	; (28ac <prvTraceStoreTaskReady+0x98>)
    2882:	4798      	blx	r3
    2884:	e7e1      	b.n	284a <prvTraceStoreTaskReady+0x36>
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	20000024 	.word	0x20000024
    288c:	200003e4 	.word	0x200003e4
    2890:	20000334 	.word	0x20000334
    2894:	0000a568 	.word	0x0000a568
    2898:	0000214d 	.word	0x0000214d
    289c:	0000a5a8 	.word	0x0000a5a8
    28a0:	0000ffff 	.word	0x0000ffff
    28a4:	000026e5 	.word	0x000026e5
    28a8:	000021a5 	.word	0x000021a5
    28ac:	00002299 	.word	0x00002299

000028b0 <vTraceStoreMemMangEvent>:
>>>>>>> Stashed changes
{
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b2:	b083      	sub	sp, #12
    28b4:	9000      	str	r0, [sp, #0]
    28b6:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
    28b8:	4b28      	ldr	r3, [pc, #160]	; (295c <vTraceStoreMemMangEvent+0xac>)
    28ba:	681b      	ldr	r3, [r3, #0]
    28bc:	2b00      	cmp	r3, #0
    28be:	d01d      	beq.n	28fc <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
    28c0:	17d3      	asrs	r3, r2, #31
    28c2:	18d6      	adds	r6, r2, r3
    28c4:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    28c6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    28ca:	2301      	movs	r3, #1
    28cc:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    28d0:	4923      	ldr	r1, [pc, #140]	; (2960 <vTraceStoreMemMangEvent+0xb0>)
    28d2:	680b      	ldr	r3, [r1, #0]
    28d4:	3301      	adds	r3, #1
    28d6:	600b      	str	r3, [r1, #0]
	if (address != 0)
    28d8:	2c00      	cmp	r4, #0
    28da:	d004      	beq.n	28e6 <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
    28dc:	4b21      	ldr	r3, [pc, #132]	; (2964 <vTraceStoreMemMangEvent+0xb4>)
    28de:	6819      	ldr	r1, [r3, #0]
    28e0:	468c      	mov	ip, r1
    28e2:	4462      	add	r2, ip
    28e4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    28e6:	4b1d      	ldr	r3, [pc, #116]	; (295c <vTraceStoreMemMangEvent+0xac>)
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28ec:	2b00      	cmp	r3, #0
    28ee:	d107      	bne.n	2900 <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
    28f0:	4a1b      	ldr	r2, [pc, #108]	; (2960 <vTraceStoreMemMangEvent+0xb0>)
    28f2:	6813      	ldr	r3, [r2, #0]
    28f4:	3b01      	subs	r3, #1
    28f6:	6013      	str	r3, [r2, #0]
    28f8:	f385 8810 	msr	PRIMASK, r5
}
    28fc:	b003      	add	sp, #12
    28fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    2900:	20ff      	movs	r0, #255	; 0xff
    2902:	4b19      	ldr	r3, [pc, #100]	; (2968 <vTraceStoreMemMangEvent+0xb8>)
    2904:	4798      	blx	r3
    2906:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    2908:	0031      	movs	r1, r6
    290a:	4818      	ldr	r0, [pc, #96]	; (296c <vTraceStoreMemMangEvent+0xbc>)
    290c:	4b18      	ldr	r3, [pc, #96]	; (2970 <vTraceStoreMemMangEvent+0xc0>)
    290e:	4798      	blx	r3
    2910:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    2912:	4b18      	ldr	r3, [pc, #96]	; (2974 <vTraceStoreMemMangEvent+0xc4>)
    2914:	4798      	blx	r3
    2916:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
    2918:	d0ea      	beq.n	28f0 <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
    291a:	466b      	mov	r3, sp
    291c:	791b      	ldrb	r3, [r3, #4]
    291e:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    2920:	2300      	movs	r3, #0
    2922:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
    2924:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    2926:	4b14      	ldr	r3, [pc, #80]	; (2978 <vTraceStoreMemMangEvent+0xc8>)
    2928:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    292a:	0021      	movs	r1, r4
    292c:	480f      	ldr	r0, [pc, #60]	; (296c <vTraceStoreMemMangEvent+0xbc>)
    292e:	4b10      	ldr	r3, [pc, #64]	; (2970 <vTraceStoreMemMangEvent+0xc0>)
    2930:	4798      	blx	r3
    2932:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    2934:	4b0f      	ldr	r3, [pc, #60]	; (2974 <vTraceStoreMemMangEvent+0xc4>)
    2936:	4798      	blx	r3
			if (ma != NULL)
    2938:	2800      	cmp	r0, #0
    293a:	d0d9      	beq.n	28f0 <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
    293c:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
    293e:	2300      	movs	r3, #0
    2940:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    2942:	466b      	mov	r3, sp
    2944:	781c      	ldrb	r4, [r3, #0]
    2946:	1c63      	adds	r3, r4, #1
    2948:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
    294a:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
    294c:	4b0a      	ldr	r3, [pc, #40]	; (2978 <vTraceStoreMemMangEvent+0xc8>)
    294e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    2950:	4b02      	ldr	r3, [pc, #8]	; (295c <vTraceStoreMemMangEvent+0xac>)
    2952:	681b      	ldr	r3, [r3, #0]
    2954:	4a03      	ldr	r2, [pc, #12]	; (2964 <vTraceStoreMemMangEvent+0xb4>)
    2956:	6812      	ldr	r2, [r2, #0]
    2958:	651a      	str	r2, [r3, #80]	; 0x50
    295a:	e7c9      	b.n	28f0 <vTraceStoreMemMangEvent+0x40>
    295c:	20000334 	.word	0x20000334
    2960:	200003e4 	.word	0x200003e4
    2964:	2000033c 	.word	0x2000033c
    2968:	000026e5 	.word	0x000026e5
    296c:	0000ffff 	.word	0x0000ffff
    2970:	000022d1 	.word	0x000022d1
    2974:	000021a5 	.word	0x000021a5
    2978:	00002299 	.word	0x00002299

0000297c <prvTraceStoreKernelCall>:
{
    297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    297e:	0005      	movs	r5, r0
    2980:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    2982:	28fe      	cmp	r0, #254	; 0xfe
    2984:	d825      	bhi.n	29d2 <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2986:	2908      	cmp	r1, #8
    2988:	d827      	bhi.n	29da <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    298a:	4b21      	ldr	r3, [pc, #132]	; (2a10 <prvTraceStoreKernelCall+0x94>)
    298c:	681b      	ldr	r3, [r3, #0]
    298e:	1859      	adds	r1, r3, r1
    2990:	3164      	adds	r1, #100	; 0x64
    2992:	780b      	ldrb	r3, [r1, #0]
    2994:	4293      	cmp	r3, r2
    2996:	d324      	bcc.n	29e2 <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
    2998:	4b1e      	ldr	r3, [pc, #120]	; (2a14 <prvTraceStoreKernelCall+0x98>)
    299a:	681b      	ldr	r3, [r3, #0]
    299c:	2b00      	cmp	r3, #0
    299e:	d124      	bne.n	29ea <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
    29a0:	4b1d      	ldr	r3, [pc, #116]	; (2a18 <prvTraceStoreKernelCall+0x9c>)
    29a2:	781b      	ldrb	r3, [r3, #0]
    29a4:	2b00      	cmp	r3, #0
    29a6:	d013      	beq.n	29d0 <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    29a8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    29ac:	2301      	movs	r3, #1
    29ae:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    29b2:	4a18      	ldr	r2, [pc, #96]	; (2a14 <prvTraceStoreKernelCall+0x98>)
    29b4:	6813      	ldr	r3, [r2, #0]
    29b6:	3301      	adds	r3, #1
    29b8:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
    29ba:	4b15      	ldr	r3, [pc, #84]	; (2a10 <prvTraceStoreKernelCall+0x94>)
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    29c0:	2b00      	cmp	r3, #0
    29c2:	d116      	bne.n	29f2 <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
    29c4:	4a13      	ldr	r2, [pc, #76]	; (2a14 <prvTraceStoreKernelCall+0x98>)
    29c6:	6813      	ldr	r3, [r2, #0]
    29c8:	3b01      	subs	r3, #1
    29ca:	6013      	str	r3, [r2, #0]
    29cc:	f386 8810 	msr	PRIMASK, r6
}
    29d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    29d2:	4812      	ldr	r0, [pc, #72]	; (2a1c <prvTraceStoreKernelCall+0xa0>)
    29d4:	4b12      	ldr	r3, [pc, #72]	; (2a20 <prvTraceStoreKernelCall+0xa4>)
    29d6:	4798      	blx	r3
    29d8:	e7fa      	b.n	29d0 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    29da:	4812      	ldr	r0, [pc, #72]	; (2a24 <prvTraceStoreKernelCall+0xa8>)
    29dc:	4b10      	ldr	r3, [pc, #64]	; (2a20 <prvTraceStoreKernelCall+0xa4>)
    29de:	4798      	blx	r3
    29e0:	e7f6      	b.n	29d0 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    29e2:	4811      	ldr	r0, [pc, #68]	; (2a28 <prvTraceStoreKernelCall+0xac>)
    29e4:	4b0e      	ldr	r3, [pc, #56]	; (2a20 <prvTraceStoreKernelCall+0xa4>)
    29e6:	4798      	blx	r3
    29e8:	e7f2      	b.n	29d0 <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    29ea:	4810      	ldr	r0, [pc, #64]	; (2a2c <prvTraceStoreKernelCall+0xb0>)
    29ec:	4b0c      	ldr	r3, [pc, #48]	; (2a20 <prvTraceStoreKernelCall+0xa4>)
    29ee:	4798      	blx	r3
		return;
    29f0:	e7ee      	b.n	29d0 <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    29f2:	480f      	ldr	r0, [pc, #60]	; (2a30 <prvTraceStoreKernelCall+0xb4>)
    29f4:	4b0f      	ldr	r3, [pc, #60]	; (2a34 <prvTraceStoreKernelCall+0xb8>)
    29f6:	4798      	blx	r3
    29f8:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    29fa:	4b0f      	ldr	r3, [pc, #60]	; (2a38 <prvTraceStoreKernelCall+0xbc>)
    29fc:	4798      	blx	r3
		if (kse != NULL)
    29fe:	2800      	cmp	r0, #0
    2a00:	d0e0      	beq.n	29c4 <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
    2a02:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
    2a04:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
    2a06:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
<<<<<<< Updated upstream
    29e0:	4b0c      	ldr	r3, [pc, #48]	; (2a14 <prvTraceStoreKernelCall+0xc0>)
    29e2:	4798      	blx	r3
    29e4:	e7da      	b.n	299c <prvTraceStoreKernelCall+0x48>
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	20000334 	.word	0x20000334
    29ec:	200003e4 	.word	0x200003e4
    29f0:	20000338 	.word	0x20000338
    29f4:	0000a294 	.word	0x0000a294
    29f8:	00002125 	.word	0x00002125
    29fc:	0000a2cc 	.word	0x0000a2cc
    2a00:	0000a314 	.word	0x0000a314
    2a04:	0000a35c 	.word	0x0000a35c
    2a08:	0000ffff 	.word	0x0000ffff
    2a0c:	000026bd 	.word	0x000026bd
    2a10:	0000217d 	.word	0x0000217d
    2a14:	00002271 	.word	0x00002271

00002a18 <prvTraceStoreKernelCallWithParam>:
=======
    2a08:	4b0c      	ldr	r3, [pc, #48]	; (2a3c <prvTraceStoreKernelCall+0xc0>)
    2a0a:	4798      	blx	r3
    2a0c:	e7da      	b.n	29c4 <prvTraceStoreKernelCall+0x48>
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	20000334 	.word	0x20000334
    2a14:	200003e4 	.word	0x200003e4
    2a18:	20000338 	.word	0x20000338
    2a1c:	0000a2c0 	.word	0x0000a2c0
    2a20:	0000214d 	.word	0x0000214d
    2a24:	0000a2f8 	.word	0x0000a2f8
    2a28:	0000a340 	.word	0x0000a340
    2a2c:	0000a388 	.word	0x0000a388
    2a30:	0000ffff 	.word	0x0000ffff
    2a34:	000026e5 	.word	0x000026e5
    2a38:	000021a5 	.word	0x000021a5
    2a3c:	00002299 	.word	0x00002299

00002a40 <prvTraceStoreKernelCallWithParam>:
>>>>>>> Stashed changes
{
    2a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a42:	46c6      	mov	lr, r8
    2a44:	b500      	push	{lr}
    2a46:	0006      	movs	r6, r0
    2a48:	0014      	movs	r4, r2
    2a4a:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    2a4c:	28fe      	cmp	r0, #254	; 0xfe
    2a4e:	d827      	bhi.n	2aa0 <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2a50:	2908      	cmp	r1, #8
    2a52:	d829      	bhi.n	2aa8 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    2a54:	4b24      	ldr	r3, [pc, #144]	; (2ae8 <prvTraceStoreKernelCallWithParam+0xa8>)
    2a56:	681b      	ldr	r3, [r3, #0]
    2a58:	1859      	adds	r1, r3, r1
    2a5a:	3164      	adds	r1, #100	; 0x64
    2a5c:	780b      	ldrb	r3, [r1, #0]
    2a5e:	4293      	cmp	r3, r2
    2a60:	d326      	bcc.n	2ab0 <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
    2a62:	4b22      	ldr	r3, [pc, #136]	; (2aec <prvTraceStoreKernelCallWithParam+0xac>)
    2a64:	681b      	ldr	r3, [r3, #0]
    2a66:	2b00      	cmp	r3, #0
    2a68:	d126      	bne.n	2ab8 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a6a:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2a6e:	2301      	movs	r3, #1
    2a70:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2a74:	4a1d      	ldr	r2, [pc, #116]	; (2aec <prvTraceStoreKernelCallWithParam+0xac>)
    2a76:	6813      	ldr	r3, [r2, #0]
    2a78:	3301      	adds	r3, #1
    2a7a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    2a7c:	4b1a      	ldr	r3, [pc, #104]	; (2ae8 <prvTraceStoreKernelCallWithParam+0xa8>)
    2a7e:	681b      	ldr	r3, [r3, #0]
    2a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2a82:	2b00      	cmp	r3, #0
    2a84:	d003      	beq.n	2a8e <prvTraceStoreKernelCallWithParam+0x4e>
    2a86:	4b1a      	ldr	r3, [pc, #104]	; (2af0 <prvTraceStoreKernelCallWithParam+0xb0>)
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d118      	bne.n	2ac0 <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
    2a8e:	4a17      	ldr	r2, [pc, #92]	; (2aec <prvTraceStoreKernelCallWithParam+0xac>)
    2a90:	6813      	ldr	r3, [r2, #0]
    2a92:	3b01      	subs	r3, #1
    2a94:	6013      	str	r3, [r2, #0]
    2a96:	f388 8810 	msr	PRIMASK, r8
}
    2a9a:	bc04      	pop	{r2}
    2a9c:	4690      	mov	r8, r2
    2a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    2aa0:	4814      	ldr	r0, [pc, #80]	; (2af4 <prvTraceStoreKernelCallWithParam+0xb4>)
    2aa2:	4b15      	ldr	r3, [pc, #84]	; (2af8 <prvTraceStoreKernelCallWithParam+0xb8>)
    2aa4:	4798      	blx	r3
    2aa6:	e7f8      	b.n	2a9a <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2aa8:	4814      	ldr	r0, [pc, #80]	; (2afc <prvTraceStoreKernelCallWithParam+0xbc>)
    2aaa:	4b13      	ldr	r3, [pc, #76]	; (2af8 <prvTraceStoreKernelCallWithParam+0xb8>)
    2aac:	4798      	blx	r3
    2aae:	e7f4      	b.n	2a9a <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    2ab0:	4813      	ldr	r0, [pc, #76]	; (2b00 <prvTraceStoreKernelCallWithParam+0xc0>)
    2ab2:	4b11      	ldr	r3, [pc, #68]	; (2af8 <prvTraceStoreKernelCallWithParam+0xb8>)
    2ab4:	4798      	blx	r3
    2ab6:	e7f0      	b.n	2a9a <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    2ab8:	4812      	ldr	r0, [pc, #72]	; (2b04 <prvTraceStoreKernelCallWithParam+0xc4>)
    2aba:	4b0f      	ldr	r3, [pc, #60]	; (2af8 <prvTraceStoreKernelCallWithParam+0xb8>)
    2abc:	4798      	blx	r3
		return;
    2abe:	e7ec      	b.n	2a9a <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    2ac0:	20ff      	movs	r0, #255	; 0xff
    2ac2:	4b11      	ldr	r3, [pc, #68]	; (2b08 <prvTraceStoreKernelCallWithParam+0xc8>)
    2ac4:	4798      	blx	r3
    2ac6:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    2ac8:	0029      	movs	r1, r5
    2aca:	20ff      	movs	r0, #255	; 0xff
    2acc:	4b0f      	ldr	r3, [pc, #60]	; (2b0c <prvTraceStoreKernelCallWithParam+0xcc>)
    2ace:	4798      	blx	r3
    2ad0:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    2ad2:	4b0f      	ldr	r3, [pc, #60]	; (2b10 <prvTraceStoreKernelCallWithParam+0xd0>)
    2ad4:	4798      	blx	r3
		if (kse != NULL)
    2ad6:	2800      	cmp	r0, #0
    2ad8:	d0d9      	beq.n	2a8e <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
    2ada:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
    2adc:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
    2ade:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
    2ae0:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
<<<<<<< Updated upstream
    2aba:	4b0c      	ldr	r3, [pc, #48]	; (2aec <prvTraceStoreKernelCallWithParam+0xd4>)
    2abc:	4798      	blx	r3
    2abe:	e7d2      	b.n	2a66 <prvTraceStoreKernelCallWithParam+0x4e>
    2ac0:	20000334 	.word	0x20000334
    2ac4:	200003e4 	.word	0x200003e4
    2ac8:	20000338 	.word	0x20000338
    2acc:	0000a424 	.word	0x0000a424
    2ad0:	00002125 	.word	0x00002125
    2ad4:	0000a464 	.word	0x0000a464
    2ad8:	0000a4b4 	.word	0x0000a4b4
    2adc:	0000a504 	.word	0x0000a504
    2ae0:	000026bd 	.word	0x000026bd
    2ae4:	000022a9 	.word	0x000022a9
    2ae8:	0000217d 	.word	0x0000217d
    2aec:	00002271 	.word	0x00002271

00002af0 <prvTraceStoreKernelCallWithNumericParamOnly>:
=======
    2ae2:	4b0c      	ldr	r3, [pc, #48]	; (2b14 <prvTraceStoreKernelCallWithParam+0xd4>)
    2ae4:	4798      	blx	r3
    2ae6:	e7d2      	b.n	2a8e <prvTraceStoreKernelCallWithParam+0x4e>
    2ae8:	20000334 	.word	0x20000334
    2aec:	200003e4 	.word	0x200003e4
    2af0:	20000338 	.word	0x20000338
    2af4:	0000a450 	.word	0x0000a450
    2af8:	0000214d 	.word	0x0000214d
    2afc:	0000a490 	.word	0x0000a490
    2b00:	0000a4e0 	.word	0x0000a4e0
    2b04:	0000a530 	.word	0x0000a530
    2b08:	000026e5 	.word	0x000026e5
    2b0c:	000022d1 	.word	0x000022d1
    2b10:	000021a5 	.word	0x000021a5
    2b14:	00002299 	.word	0x00002299

00002b18 <prvTraceStoreKernelCallWithNumericParamOnly>:
>>>>>>> Stashed changes
{
    2b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b1a:	0004      	movs	r4, r0
    2b1c:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    2b1e:	28fe      	cmp	r0, #254	; 0xfe
    2b20:	d81c      	bhi.n	2b5c <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
    2b22:	4b1c      	ldr	r3, [pc, #112]	; (2b94 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    2b24:	681b      	ldr	r3, [r3, #0]
    2b26:	2b00      	cmp	r3, #0
    2b28:	d11c      	bne.n	2b64 <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2b2a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2b2e:	2301      	movs	r3, #1
    2b30:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2b34:	4a17      	ldr	r2, [pc, #92]	; (2b94 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    2b36:	6813      	ldr	r3, [r2, #0]
    2b38:	3301      	adds	r3, #1
    2b3a:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    2b3c:	4b16      	ldr	r3, [pc, #88]	; (2b98 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b42:	2b00      	cmp	r3, #0
    2b44:	d003      	beq.n	2b4e <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    2b46:	4b15      	ldr	r3, [pc, #84]	; (2b9c <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
    2b48:	781b      	ldrb	r3, [r3, #0]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d10e      	bne.n	2b6c <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
    2b4e:	4a11      	ldr	r2, [pc, #68]	; (2b94 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    2b50:	6813      	ldr	r3, [r2, #0]
    2b52:	3b01      	subs	r3, #1
    2b54:	6013      	str	r3, [r2, #0]
    2b56:	f386 8810 	msr	PRIMASK, r6
}
    2b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    2b5c:	4810      	ldr	r0, [pc, #64]	; (2ba0 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
    2b5e:	4b11      	ldr	r3, [pc, #68]	; (2ba4 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    2b60:	4798      	blx	r3
    2b62:	e7fa      	b.n	2b5a <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    2b64:	4810      	ldr	r0, [pc, #64]	; (2ba8 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
    2b66:	4b0f      	ldr	r3, [pc, #60]	; (2ba4 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    2b68:	4798      	blx	r3
		return;
    2b6a:	e7f6      	b.n	2b5a <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    2b6c:	20ff      	movs	r0, #255	; 0xff
    2b6e:	4b0f      	ldr	r3, [pc, #60]	; (2bac <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
    2b70:	4798      	blx	r3
    2b72:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    2b74:	0029      	movs	r1, r5
    2b76:	480e      	ldr	r0, [pc, #56]	; (2bb0 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
    2b78:	4b0e      	ldr	r3, [pc, #56]	; (2bb4 <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
    2b7a:	4798      	blx	r3
    2b7c:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    2b7e:	4b0e      	ldr	r3, [pc, #56]	; (2bb8 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
    2b80:	4798      	blx	r3
		if (kse != NULL)
    2b82:	2800      	cmp	r0, #0
    2b84:	d0e3      	beq.n	2b4e <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
    2b86:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
    2b88:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
    2b8a:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
<<<<<<< Updated upstream
    2b64:	4b0b      	ldr	r3, [pc, #44]	; (2b94 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
    2b66:	4798      	blx	r3
    2b68:	e7dd      	b.n	2b26 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	200003e4 	.word	0x200003e4
    2b70:	20000334 	.word	0x20000334
    2b74:	20000338 	.word	0x20000338
    2b78:	0000a394 	.word	0x0000a394
    2b7c:	00002125 	.word	0x00002125
    2b80:	0000a3ec 	.word	0x0000a3ec
    2b84:	000026bd 	.word	0x000026bd
    2b88:	0000ffff 	.word	0x0000ffff
    2b8c:	000022a9 	.word	0x000022a9
    2b90:	0000217d 	.word	0x0000217d
    2b94:	00002271 	.word	0x00002271

00002b98 <prvTraceStoreTaskswitch>:
=======
    2b8c:	4b0b      	ldr	r3, [pc, #44]	; (2bbc <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
    2b8e:	4798      	blx	r3
    2b90:	e7dd      	b.n	2b4e <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	200003e4 	.word	0x200003e4
    2b98:	20000334 	.word	0x20000334
    2b9c:	20000338 	.word	0x20000338
    2ba0:	0000a3c0 	.word	0x0000a3c0
    2ba4:	0000214d 	.word	0x0000214d
    2ba8:	0000a418 	.word	0x0000a418
    2bac:	000026e5 	.word	0x000026e5
    2bb0:	0000ffff 	.word	0x0000ffff
    2bb4:	000022d1 	.word	0x000022d1
    2bb8:	000021a5 	.word	0x000021a5
    2bbc:	00002299 	.word	0x00002299

00002bc0 <prvTraceStoreTaskswitch>:
>>>>>>> Stashed changes
{
    2bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bc2:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    2bc4:	280f      	cmp	r0, #15
    2bc6:	d818      	bhi.n	2bfa <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2bc8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2bcc:	2301      	movs	r3, #1
    2bce:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    2bd2:	4a26      	ldr	r2, [pc, #152]	; (2c6c <prvTraceStoreTaskswitch+0xac>)
    2bd4:	6813      	ldr	r3, [r2, #0]
    2bd6:	3301      	adds	r3, #1
    2bd8:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    2bda:	4b25      	ldr	r3, [pc, #148]	; (2c70 <prvTraceStoreTaskswitch+0xb0>)
    2bdc:	781b      	ldrb	r3, [r3, #0]
    2bde:	4283      	cmp	r3, r0
    2be0:	d004      	beq.n	2bec <prvTraceStoreTaskswitch+0x2c>
    2be2:	4b24      	ldr	r3, [pc, #144]	; (2c74 <prvTraceStoreTaskswitch+0xb4>)
    2be4:	681b      	ldr	r3, [r3, #0]
    2be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2be8:	2b00      	cmp	r3, #0
    2bea:	d10a      	bne.n	2c02 <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    2bec:	4a1f      	ldr	r2, [pc, #124]	; (2c6c <prvTraceStoreTaskswitch+0xac>)
    2bee:	6813      	ldr	r3, [r2, #0]
    2bf0:	3b01      	subs	r3, #1
    2bf2:	6013      	str	r3, [r2, #0]
    2bf4:	f385 8810 	msr	PRIMASK, r5
}
    2bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    2bfa:	481f      	ldr	r0, [pc, #124]	; (2c78 <prvTraceStoreTaskswitch+0xb8>)
    2bfc:	4b1f      	ldr	r3, [pc, #124]	; (2c7c <prvTraceStoreTaskswitch+0xbc>)
    2bfe:	4798      	blx	r3
    2c00:	e7fa      	b.n	2bf8 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
    2c02:	2200      	movs	r2, #0
    2c04:	4b1e      	ldr	r3, [pc, #120]	; (2c80 <prvTraceStoreTaskswitch+0xc0>)
    2c06:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2c08:	481e      	ldr	r0, [pc, #120]	; (2c84 <prvTraceStoreTaskswitch+0xc4>)
    2c0a:	4b1f      	ldr	r3, [pc, #124]	; (2c88 <prvTraceStoreTaskswitch+0xc8>)
    2c0c:	4798      	blx	r3
    2c0e:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
    2c10:	4b17      	ldr	r3, [pc, #92]	; (2c70 <prvTraceStoreTaskswitch+0xb0>)
    2c12:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    2c14:	4b1d      	ldr	r3, [pc, #116]	; (2c8c <prvTraceStoreTaskswitch+0xcc>)
    2c16:	4798      	blx	r3
    2c18:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
    2c1a:	d0e7      	beq.n	2bec <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    2c1c:	4b14      	ldr	r3, [pc, #80]	; (2c70 <prvTraceStoreTaskswitch+0xb0>)
    2c1e:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2c20:	4b14      	ldr	r3, [pc, #80]	; (2c74 <prvTraceStoreTaskswitch+0xb4>)
    2c22:	681a      	ldr	r2, [r3, #0]
    2c24:	2367      	movs	r3, #103	; 0x67
    2c26:	5cd3      	ldrb	r3, [r2, r3]
    2c28:	4283      	cmp	r3, r0
    2c2a:	d30f      	bcc.n	2c4c <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    2c2c:	2103      	movs	r1, #3
    2c2e:	4b18      	ldr	r3, [pc, #96]	; (2c90 <prvTraceStoreTaskswitch+0xd0>)
    2c30:	4798      	blx	r3
    2c32:	4b10      	ldr	r3, [pc, #64]	; (2c74 <prvTraceStoreTaskswitch+0xb4>)
    2c34:	681b      	ldr	r3, [r3, #0]
    2c36:	2273      	movs	r2, #115	; 0x73
    2c38:	5c9a      	ldrb	r2, [r3, r2]
    2c3a:	181b      	adds	r3, r3, r0
    2c3c:	189b      	adds	r3, r3, r2
    2c3e:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    2c40:	781b      	ldrb	r3, [r3, #0]
    2c42:	2b01      	cmp	r3, #1
    2c44:	d105      	bne.n	2c52 <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
    2c46:	3306      	adds	r3, #6
    2c48:	7033      	strb	r3, [r6, #0]
    2c4a:	e004      	b.n	2c56 <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2c4c:	4811      	ldr	r0, [pc, #68]	; (2c94 <prvTraceStoreTaskswitch+0xd4>)
    2c4e:	4b0b      	ldr	r3, [pc, #44]	; (2c7c <prvTraceStoreTaskswitch+0xbc>)
    2c50:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
    2c52:	2306      	movs	r3, #6
    2c54:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
    2c56:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    2c58:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
    2c5a:	4b05      	ldr	r3, [pc, #20]	; (2c70 <prvTraceStoreTaskswitch+0xb0>)
    2c5c:	7819      	ldrb	r1, [r3, #0]
    2c5e:	2201      	movs	r2, #1
    2c60:	2003      	movs	r0, #3
    2c62:	4b0d      	ldr	r3, [pc, #52]	; (2c98 <prvTraceStoreTaskswitch+0xd8>)
    2c64:	4798      	blx	r3
			prvTraceUpdateCounters();
<<<<<<< Updated upstream
    2c3e:	4b0d      	ldr	r3, [pc, #52]	; (2c74 <prvTraceStoreTaskswitch+0xdc>)
    2c40:	4798      	blx	r3
    2c42:	e7bf      	b.n	2bc4 <prvTraceStoreTaskswitch+0x2c>
    2c44:	200003e4 	.word	0x200003e4
    2c48:	20000338 	.word	0x20000338
    2c4c:	20000334 	.word	0x20000334
    2c50:	0000a5b4 	.word	0x0000a5b4
    2c54:	00002125 	.word	0x00002125
    2c58:	20000340 	.word	0x20000340
    2c5c:	0000ffff 	.word	0x0000ffff
    2c60:	000026bd 	.word	0x000026bd
    2c64:	0000217d 	.word	0x0000217d
    2c68:	000022fd 	.word	0x000022fd
    2c6c:	0000a5fc 	.word	0x0000a5fc
    2c70:	00002429 	.word	0x00002429
    2c74:	00002271 	.word	0x00002271

00002c78 <uiTraceStart>:
=======
    2c66:	4b0d      	ldr	r3, [pc, #52]	; (2c9c <prvTraceStoreTaskswitch+0xdc>)
    2c68:	4798      	blx	r3
    2c6a:	e7bf      	b.n	2bec <prvTraceStoreTaskswitch+0x2c>
    2c6c:	200003e4 	.word	0x200003e4
    2c70:	20000338 	.word	0x20000338
    2c74:	20000334 	.word	0x20000334
    2c78:	0000a5e0 	.word	0x0000a5e0
    2c7c:	0000214d 	.word	0x0000214d
    2c80:	20000340 	.word	0x20000340
    2c84:	0000ffff 	.word	0x0000ffff
    2c88:	000026e5 	.word	0x000026e5
    2c8c:	000021a5 	.word	0x000021a5
    2c90:	00002325 	.word	0x00002325
    2c94:	0000a628 	.word	0x0000a628
    2c98:	00002451 	.word	0x00002451
    2c9c:	00002299 	.word	0x00002299

00002ca0 <uiTraceStart>:
>>>>>>> Stashed changes
{
    2ca0:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
    2ca2:	4b20      	ldr	r3, [pc, #128]	; (2d24 <uiTraceStart+0x84>)
    2ca4:	681b      	ldr	r3, [r3, #0]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d00a      	beq.n	2cc0 <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
    2caa:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2cac:	2801      	cmp	r0, #1
    2cae:	d006      	beq.n	2cbe <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
    2cb0:	4b1d      	ldr	r3, [pc, #116]	; (2d28 <uiTraceStart+0x88>)
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d008      	beq.n	2cca <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
    2cb8:	4b1a      	ldr	r3, [pc, #104]	; (2d24 <uiTraceStart+0x84>)
    2cba:	681b      	ldr	r3, [r3, #0]
    2cbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    2cbe:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    2cc0:	481a      	ldr	r0, [pc, #104]	; (2d2c <uiTraceStart+0x8c>)
    2cc2:	4b1b      	ldr	r3, [pc, #108]	; (2d30 <uiTraceStart+0x90>)
    2cc4:	4798      	blx	r3
    2cc6:	2000      	movs	r0, #0
    2cc8:	e7f9      	b.n	2cbe <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2cca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2cce:	2201      	movs	r2, #1
    2cd0:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
    2cd4:	4917      	ldr	r1, [pc, #92]	; (2d34 <uiTraceStart+0x94>)
    2cd6:	680b      	ldr	r3, [r1, #0]
    2cd8:	3301      	adds	r3, #1
    2cda:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
    2cdc:	4b11      	ldr	r3, [pc, #68]	; (2d24 <uiTraceStart+0x84>)
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    2ce2:	4b15      	ldr	r3, [pc, #84]	; (2d38 <uiTraceStart+0x98>)
    2ce4:	4798      	blx	r3
    2ce6:	4b15      	ldr	r3, [pc, #84]	; (2d3c <uiTraceStart+0x9c>)
    2ce8:	4798      	blx	r3
    2cea:	b2c4      	uxtb	r4, r0
		if (handle == 0)
    2cec:	2c00      	cmp	r4, #0
    2cee:	d009      	beq.n	2d04 <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    2cf0:	0020      	movs	r0, r4
    2cf2:	4b13      	ldr	r3, [pc, #76]	; (2d40 <uiTraceStart+0xa0>)
    2cf4:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    2cf6:	4a0f      	ldr	r2, [pc, #60]	; (2d34 <uiTraceStart+0x94>)
    2cf8:	6813      	ldr	r3, [r2, #0]
    2cfa:	3b01      	subs	r3, #1
    2cfc:	6013      	str	r3, [r2, #0]
    2cfe:	f385 8810 	msr	PRIMASK, r5
    2d02:	e7d9      	b.n	2cb8 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    2d04:	2003      	movs	r0, #3
    2d06:	4b0f      	ldr	r3, [pc, #60]	; (2d44 <uiTraceStart+0xa4>)
    2d08:	4798      	blx	r3
    2d0a:	0006      	movs	r6, r0
    2d0c:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    2d0e:	4a0e      	ldr	r2, [pc, #56]	; (2d48 <uiTraceStart+0xa8>)
    2d10:	0001      	movs	r1, r0
    2d12:	2003      	movs	r0, #3
    2d14:	4b0d      	ldr	r3, [pc, #52]	; (2d4c <uiTraceStart+0xac>)
    2d16:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
<<<<<<< Updated upstream
    2cf0:	2200      	movs	r2, #0
    2cf2:	0031      	movs	r1, r6
    2cf4:	2003      	movs	r0, #3
    2cf6:	4b0c      	ldr	r3, [pc, #48]	; (2d28 <uiTraceStart+0xb0>)
    2cf8:	4798      	blx	r3
    2cfa:	e7e5      	b.n	2cc8 <uiTraceStart+0x50>
    2cfc:	20000334 	.word	0x20000334
    2d00:	200003ec 	.word	0x200003ec
    2d04:	0000a6b8 	.word	0x0000a6b8
    2d08:	00002125 	.word	0x00002125
    2d0c:	200003e4 	.word	0x200003e4
    2d10:	00001d1d 	.word	0x00001d1d
    2d14:	00001c55 	.word	0x00001c55
    2d18:	00002b99 	.word	0x00002b99
    2d1c:	000024c1 	.word	0x000024c1
    2d20:	0000a6fc 	.word	0x0000a6fc
    2d24:	00002595 	.word	0x00002595
    2d28:	00002375 	.word	0x00002375

00002d2c <vTraceStart>:
=======
    2d18:	2200      	movs	r2, #0
    2d1a:	0031      	movs	r1, r6
    2d1c:	2003      	movs	r0, #3
    2d1e:	4b0c      	ldr	r3, [pc, #48]	; (2d50 <uiTraceStart+0xb0>)
    2d20:	4798      	blx	r3
    2d22:	e7e5      	b.n	2cf0 <uiTraceStart+0x50>
    2d24:	20000334 	.word	0x20000334
    2d28:	200003ec 	.word	0x200003ec
    2d2c:	0000a6e4 	.word	0x0000a6e4
    2d30:	0000214d 	.word	0x0000214d
    2d34:	200003e4 	.word	0x200003e4
    2d38:	00001d45 	.word	0x00001d45
    2d3c:	00001c7d 	.word	0x00001c7d
    2d40:	00002bc1 	.word	0x00002bc1
    2d44:	000024e9 	.word	0x000024e9
    2d48:	0000a728 	.word	0x0000a728
    2d4c:	000025bd 	.word	0x000025bd
    2d50:	0000239d 	.word	0x0000239d

00002d54 <vTraceStart>:
>>>>>>> Stashed changes
{
    2d54:	b510      	push	{r4, lr}
	(void)uiTraceStart();
    2d56:	4b01      	ldr	r3, [pc, #4]	; (2d5c <vTraceStart+0x8>)
    2d58:	4798      	blx	r3
}
    2d5a:	bd10      	pop	{r4, pc}
    2d5c:	00002ca1 	.word	0x00002ca1

00002d60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2d60:	0003      	movs	r3, r0
    2d62:	3308      	adds	r3, #8
    2d64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2d66:	2201      	movs	r2, #1
    2d68:	4252      	negs	r2, r2
    2d6a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2d6c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2d6e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2d70:	2300      	movs	r3, #0
    2d72:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    2d74:	4770      	bx	lr

00002d76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2d76:	2300      	movs	r3, #0
    2d78:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    2d7a:	4770      	bx	lr

00002d7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    2d7c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2d7e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2d80:	689a      	ldr	r2, [r3, #8]
    2d82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2d84:	689a      	ldr	r2, [r3, #8]
    2d86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2d88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2d8a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2d8c:	6803      	ldr	r3, [r0, #0]
    2d8e:	3301      	adds	r3, #1
    2d90:	6003      	str	r3, [r0, #0]
}
    2d92:	4770      	bx	lr

00002d94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2d94:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2d96:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2d98:	0002      	movs	r2, r0
    2d9a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    2d9c:	1c63      	adds	r3, r4, #1
    2d9e:	d102      	bne.n	2da6 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    2da0:	6902      	ldr	r2, [r0, #16]
    2da2:	e004      	b.n	2dae <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2da4:	001a      	movs	r2, r3
    2da6:	6853      	ldr	r3, [r2, #4]
    2da8:	681d      	ldr	r5, [r3, #0]
    2daa:	42ac      	cmp	r4, r5
    2dac:	d2fa      	bcs.n	2da4 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2dae:	6853      	ldr	r3, [r2, #4]
    2db0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2db2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2db4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    2db6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2db8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2dba:	6803      	ldr	r3, [r0, #0]
    2dbc:	3301      	adds	r3, #1
    2dbe:	6003      	str	r3, [r0, #0]
}
    2dc0:	bd30      	pop	{r4, r5, pc}

00002dc2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2dc2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2dc4:	6842      	ldr	r2, [r0, #4]
    2dc6:	6881      	ldr	r1, [r0, #8]
    2dc8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2dca:	6882      	ldr	r2, [r0, #8]
    2dcc:	6841      	ldr	r1, [r0, #4]
    2dce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2dd0:	685a      	ldr	r2, [r3, #4]
    2dd2:	4290      	cmp	r0, r2
    2dd4:	d006      	beq.n	2de4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2dd6:	2200      	movs	r2, #0
    2dd8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    2dda:	681a      	ldr	r2, [r3, #0]
    2ddc:	3a01      	subs	r2, #1
    2dde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2de0:	6818      	ldr	r0, [r3, #0]
}
    2de2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2de4:	6882      	ldr	r2, [r0, #8]
    2de6:	605a      	str	r2, [r3, #4]
    2de8:	e7f5      	b.n	2dd6 <uxListRemove+0x14>
	...

00002dec <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    2dec:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    2dee:	2300      	movs	r3, #0
    2df0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    2df2:	4b06      	ldr	r3, [pc, #24]	; (2e0c <prvTaskExitError+0x20>)
    2df4:	681b      	ldr	r3, [r3, #0]
    2df6:	3301      	adds	r3, #1
    2df8:	d001      	beq.n	2dfe <prvTaskExitError+0x12>
    2dfa:	b672      	cpsid	i
    2dfc:	e7fe      	b.n	2dfc <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    2dfe:	b672      	cpsid	i
	while( ulDummy == 0 )
    2e00:	9b01      	ldr	r3, [sp, #4]
    2e02:	2b00      	cmp	r3, #0
    2e04:	d0fc      	beq.n	2e00 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    2e06:	b002      	add	sp, #8
    2e08:	4770      	bx	lr
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	20000028 	.word	0x20000028

00002e10 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    2e10:	4a0b      	ldr	r2, [pc, #44]	; (2e40 <pxCurrentTCBConst2>)
    2e12:	6813      	ldr	r3, [r2, #0]
    2e14:	6818      	ldr	r0, [r3, #0]
    2e16:	3020      	adds	r0, #32
    2e18:	f380 8809 	msr	PSP, r0
    2e1c:	2002      	movs	r0, #2
    2e1e:	f380 8814 	msr	CONTROL, r0
    2e22:	f3bf 8f6f 	isb	sy
    2e26:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    2e28:	46ae      	mov	lr, r5
    2e2a:	bc08      	pop	{r3}
    2e2c:	bc04      	pop	{r2}
    2e2e:	b662      	cpsie	i
    2e30:	4718      	bx	r3
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	46c0      	nop			; (mov r8, r8)
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	46c0      	nop			; (mov r8, r8)
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	46c0      	nop			; (mov r8, r8)
    2e3e:	46c0      	nop			; (mov r8, r8)

00002e40 <pxCurrentTCBConst2>:
    2e40:	200036d0 	.word	0x200036d0

00002e44 <pxPortInitialiseStack>:
{
    2e44:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    2e46:	1f03      	subs	r3, r0, #4
    2e48:	2480      	movs	r4, #128	; 0x80
    2e4a:	0464      	lsls	r4, r4, #17
    2e4c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    2e4e:	3b04      	subs	r3, #4
    2e50:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    2e52:	3b04      	subs	r3, #4
    2e54:	4902      	ldr	r1, [pc, #8]	; (2e60 <pxPortInitialiseStack+0x1c>)
    2e56:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2e58:	3b14      	subs	r3, #20
    2e5a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    2e5c:	3840      	subs	r0, #64	; 0x40
}
    2e5e:	bd10      	pop	{r4, pc}
    2e60:	00002ded 	.word	0x00002ded

00002e64 <SVC_Handler>:
}
    2e64:	4770      	bx	lr
	...

00002e68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    2e68:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2e6a:	4b13      	ldr	r3, [pc, #76]	; (2eb8 <xPortStartScheduler+0x50>)
    2e6c:	6819      	ldr	r1, [r3, #0]
    2e6e:	22ff      	movs	r2, #255	; 0xff
    2e70:	0412      	lsls	r2, r2, #16
    2e72:	430a      	orrs	r2, r1
    2e74:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2e76:	6819      	ldr	r1, [r3, #0]
    2e78:	22ff      	movs	r2, #255	; 0xff
    2e7a:	0612      	lsls	r2, r2, #24
    2e7c:	430a      	orrs	r2, r1
    2e7e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    2e80:	4d0e      	ldr	r5, [pc, #56]	; (2ebc <xPortStartScheduler+0x54>)
    2e82:	2400      	movs	r4, #0
    2e84:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    2e86:	4b0e      	ldr	r3, [pc, #56]	; (2ec0 <xPortStartScheduler+0x58>)
    2e88:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2e8a:	2000      	movs	r0, #0
    2e8c:	4b0d      	ldr	r3, [pc, #52]	; (2ec4 <xPortStartScheduler+0x5c>)
    2e8e:	4798      	blx	r3
    2e90:	21fa      	movs	r1, #250	; 0xfa
    2e92:	0089      	lsls	r1, r1, #2
    2e94:	4b0c      	ldr	r3, [pc, #48]	; (2ec8 <xPortStartScheduler+0x60>)
    2e96:	4798      	blx	r3
    2e98:	3801      	subs	r0, #1
    2e9a:	4b0c      	ldr	r3, [pc, #48]	; (2ecc <xPortStartScheduler+0x64>)
    2e9c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    2e9e:	2307      	movs	r3, #7
    2ea0:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    2ea2:	4b0b      	ldr	r3, [pc, #44]	; (2ed0 <xPortStartScheduler+0x68>)
    2ea4:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    2ea6:	4b0b      	ldr	r3, [pc, #44]	; (2ed4 <xPortStartScheduler+0x6c>)
    2ea8:	4798      	blx	r3
	vTaskSwitchContext();
    2eaa:	4b0b      	ldr	r3, [pc, #44]	; (2ed8 <xPortStartScheduler+0x70>)
    2eac:	4798      	blx	r3
	prvTaskExitError();
    2eae:	4b0b      	ldr	r3, [pc, #44]	; (2edc <xPortStartScheduler+0x74>)
    2eb0:	4798      	blx	r3
}
    2eb2:	2000      	movs	r0, #0
    2eb4:	bd70      	pop	{r4, r5, r6, pc}
    2eb6:	46c0      	nop			; (mov r8, r8)
    2eb8:	e000ed20 	.word	0xe000ed20
    2ebc:	e000e010 	.word	0xe000e010
    2ec0:	e000e018 	.word	0xe000e018
    2ec4:	000068f5 	.word	0x000068f5
    2ec8:	00006f71 	.word	0x00006f71
    2ecc:	e000e014 	.word	0xe000e014
    2ed0:	20000028 	.word	0x20000028
    2ed4:	00002e11 	.word	0x00002e11
    2ed8:	000049c9 	.word	0x000049c9
    2edc:	00002ded 	.word	0x00002ded

00002ee0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    2ee0:	2280      	movs	r2, #128	; 0x80
    2ee2:	0552      	lsls	r2, r2, #21
    2ee4:	4b01      	ldr	r3, [pc, #4]	; (2eec <vPortYield+0xc>)
    2ee6:	601a      	str	r2, [r3, #0]
}
    2ee8:	4770      	bx	lr
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	e000ed04 	.word	0xe000ed04

00002ef0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    2ef0:	b672      	cpsid	i
    uxCriticalNesting++;
    2ef2:	4a04      	ldr	r2, [pc, #16]	; (2f04 <vPortEnterCritical+0x14>)
    2ef4:	6813      	ldr	r3, [r2, #0]
    2ef6:	3301      	adds	r3, #1
    2ef8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    2efa:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2efe:	f3bf 8f6f 	isb	sy
}
    2f02:	4770      	bx	lr
    2f04:	20000028 	.word	0x20000028

00002f08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    2f08:	4b06      	ldr	r3, [pc, #24]	; (2f24 <vPortExitCritical+0x1c>)
    2f0a:	681b      	ldr	r3, [r3, #0]
    2f0c:	2b00      	cmp	r3, #0
    2f0e:	d101      	bne.n	2f14 <vPortExitCritical+0xc>
    2f10:	b672      	cpsid	i
    2f12:	e7fe      	b.n	2f12 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    2f14:	3b01      	subs	r3, #1
    2f16:	4a03      	ldr	r2, [pc, #12]	; (2f24 <vPortExitCritical+0x1c>)
    2f18:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	d100      	bne.n	2f20 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    2f1e:	b662      	cpsie	i
}
    2f20:	4770      	bx	lr
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	20000028 	.word	0x20000028

00002f28 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    2f28:	f3ef 8010 	mrs	r0, PRIMASK
    2f2c:	b672      	cpsid	i
    2f2e:	4770      	bx	lr

00002f30 <vClearInterruptMaskFromISR>:
	__asm volatile(
    2f30:	f380 8810 	msr	PRIMASK, r0
    2f34:	4770      	bx	lr
	...

00002f40 <PendSV_Handler>:
	__asm volatile
    2f40:	f3ef 8009 	mrs	r0, PSP
    2f44:	4b0e      	ldr	r3, [pc, #56]	; (2f80 <pxCurrentTCBConst>)
    2f46:	681a      	ldr	r2, [r3, #0]
    2f48:	3820      	subs	r0, #32
    2f4a:	6010      	str	r0, [r2, #0]
    2f4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2f4e:	4644      	mov	r4, r8
    2f50:	464d      	mov	r5, r9
    2f52:	4656      	mov	r6, sl
    2f54:	465f      	mov	r7, fp
    2f56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2f58:	b508      	push	{r3, lr}
    2f5a:	b672      	cpsid	i
    2f5c:	f001 fd34 	bl	49c8 <vTaskSwitchContext>
    2f60:	b662      	cpsie	i
    2f62:	bc0c      	pop	{r2, r3}
    2f64:	6811      	ldr	r1, [r2, #0]
    2f66:	6808      	ldr	r0, [r1, #0]
    2f68:	3010      	adds	r0, #16
    2f6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2f6c:	46a0      	mov	r8, r4
    2f6e:	46a9      	mov	r9, r5
    2f70:	46b2      	mov	sl, r6
    2f72:	46bb      	mov	fp, r7
    2f74:	f380 8809 	msr	PSP, r0
    2f78:	3820      	subs	r0, #32
    2f7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2f7c:	4718      	bx	r3
    2f7e:	46c0      	nop			; (mov r8, r8)

00002f80 <pxCurrentTCBConst>:
    2f80:	200036d0 	.word	0x200036d0

00002f84 <SysTick_Handler>:
{
    2f84:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2f86:	4b07      	ldr	r3, [pc, #28]	; (2fa4 <SysTick_Handler+0x20>)
    2f88:	4798      	blx	r3
    2f8a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    2f8c:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <SysTick_Handler+0x24>)
    2f8e:	4798      	blx	r3
    2f90:	2800      	cmp	r0, #0
    2f92:	d003      	beq.n	2f9c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2f94:	2280      	movs	r2, #128	; 0x80
    2f96:	0552      	lsls	r2, r2, #21
    2f98:	4b04      	ldr	r3, [pc, #16]	; (2fac <SysTick_Handler+0x28>)
    2f9a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2f9c:	0020      	movs	r0, r4
    2f9e:	4b04      	ldr	r3, [pc, #16]	; (2fb0 <SysTick_Handler+0x2c>)
    2fa0:	4798      	blx	r3
}
    2fa2:	bd10      	pop	{r4, pc}
    2fa4:	00002f29 	.word	0x00002f29
    2fa8:	00004671 	.word	0x00004671
    2fac:	e000ed04 	.word	0xe000ed04
    2fb0:	00002f31 	.word	0x00002f31

00002fb4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2fb4:	b570      	push	{r4, r5, r6, lr}
    2fb6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    2fb8:	0743      	lsls	r3, r0, #29
    2fba:	d002      	beq.n	2fc2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    2fbc:	2307      	movs	r3, #7
    2fbe:	439c      	bics	r4, r3
    2fc0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    2fc2:	4b18      	ldr	r3, [pc, #96]	; (3024 <pvPortMalloc+0x70>)
    2fc4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    2fc6:	4b18      	ldr	r3, [pc, #96]	; (3028 <pvPortMalloc+0x74>)
    2fc8:	681b      	ldr	r3, [r3, #0]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d017      	beq.n	2ffe <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2fce:	4b17      	ldr	r3, [pc, #92]	; (302c <pvPortMalloc+0x78>)
    2fd0:	681a      	ldr	r2, [r3, #0]
    2fd2:	18a3      	adds	r3, r4, r2
    2fd4:	4916      	ldr	r1, [pc, #88]	; (3030 <pvPortMalloc+0x7c>)
    2fd6:	428b      	cmp	r3, r1
    2fd8:	d818      	bhi.n	300c <pvPortMalloc+0x58>
    2fda:	429a      	cmp	r2, r3
    2fdc:	d216      	bcs.n	300c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2fde:	4912      	ldr	r1, [pc, #72]	; (3028 <pvPortMalloc+0x74>)
    2fe0:	680d      	ldr	r5, [r1, #0]
    2fe2:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
    2fe4:	4a11      	ldr	r2, [pc, #68]	; (302c <pvPortMalloc+0x78>)
    2fe6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    2fe8:	2d00      	cmp	r5, #0
    2fea:	d00f      	beq.n	300c <pvPortMalloc+0x58>
    2fec:	0022      	movs	r2, r4
    2fee:	0029      	movs	r1, r5
    2ff0:	2094      	movs	r0, #148	; 0x94
    2ff2:	4b10      	ldr	r3, [pc, #64]	; (3034 <pvPortMalloc+0x80>)
    2ff4:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    2ff6:	4b10      	ldr	r3, [pc, #64]	; (3038 <pvPortMalloc+0x84>)
    2ff8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    2ffa:	0028      	movs	r0, r5
    2ffc:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2ffe:	2207      	movs	r2, #7
    3000:	4b0e      	ldr	r3, [pc, #56]	; (303c <pvPortMalloc+0x88>)
    3002:	3308      	adds	r3, #8
    3004:	4393      	bics	r3, r2
    3006:	4a08      	ldr	r2, [pc, #32]	; (3028 <pvPortMalloc+0x74>)
    3008:	6013      	str	r3, [r2, #0]
    300a:	e7e0      	b.n	2fce <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
    300c:	0022      	movs	r2, r4
    300e:	2100      	movs	r1, #0
    3010:	20e8      	movs	r0, #232	; 0xe8
    3012:	4b08      	ldr	r3, [pc, #32]	; (3034 <pvPortMalloc+0x80>)
    3014:	4798      	blx	r3
	( void ) xTaskResumeAll();
    3016:	4b08      	ldr	r3, [pc, #32]	; (3038 <pvPortMalloc+0x84>)
    3018:	4798      	blx	r3
			vApplicationMallocFailedHook();
    301a:	4b09      	ldr	r3, [pc, #36]	; (3040 <pvPortMalloc+0x8c>)
    301c:	4798      	blx	r3
    301e:	2500      	movs	r5, #0
	return pvReturn;
    3020:	e7eb      	b.n	2ffa <pvPortMalloc+0x46>
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	00004655 	.word	0x00004655
    3028:	20000400 	.word	0x20000400
    302c:	200036cc 	.word	0x200036cc
    3030:	000032bf 	.word	0x000032bf
    3034:	000028b1 	.word	0x000028b1
    3038:	000047fd 	.word	0x000047fd
    303c:	20000404 	.word	0x20000404
    3040:	00006f49 	.word	0x00006f49

00003044 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    3044:	2800      	cmp	r0, #0
    3046:	d001      	beq.n	304c <vPortFree+0x8>
    3048:	b672      	cpsid	i
    304a:	e7fe      	b.n	304a <vPortFree+0x6>
}
    304c:	4770      	bx	lr
	...

00003050 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    3050:	4b02      	ldr	r3, [pc, #8]	; (305c <xPortGetFreeHeapSize+0xc>)
    3052:	681b      	ldr	r3, [r3, #0]
    3054:	20cb      	movs	r0, #203	; 0xcb
    3056:	0180      	lsls	r0, r0, #6
    3058:	1ac0      	subs	r0, r0, r3
}
    305a:	4770      	bx	lr
    305c:	200036cc 	.word	0x200036cc

00003060 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    3060:	b510      	push	{r4, lr}
    3062:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3064:	4b03      	ldr	r3, [pc, #12]	; (3074 <prvIsQueueEmpty+0x14>)
    3066:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3068:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    306a:	4b03      	ldr	r3, [pc, #12]	; (3078 <prvIsQueueEmpty+0x18>)
    306c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    306e:	4260      	negs	r0, r4
    3070:	4160      	adcs	r0, r4

	return xReturn;
}
    3072:	bd10      	pop	{r4, pc}
    3074:	00002ef1 	.word	0x00002ef1
    3078:	00002f09 	.word	0x00002f09

0000307c <prvCopyDataToQueue>:
{
    307c:	b570      	push	{r4, r5, r6, lr}
    307e:	0004      	movs	r4, r0
    3080:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3082:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3084:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3086:	2a00      	cmp	r2, #0
    3088:	d10b      	bne.n	30a2 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    308a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    308c:	6823      	ldr	r3, [r4, #0]
    308e:	4283      	cmp	r3, r0
    3090:	d104      	bne.n	309c <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3092:	6860      	ldr	r0, [r4, #4]
    3094:	4b16      	ldr	r3, [pc, #88]	; (30f0 <prvCopyDataToQueue+0x74>)
    3096:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    3098:	2300      	movs	r3, #0
    309a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    309c:	3501      	adds	r5, #1
    309e:	63a5      	str	r5, [r4, #56]	; 0x38
}
    30a0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    30a2:	2e00      	cmp	r6, #0
    30a4:	d10e      	bne.n	30c4 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    30a6:	6880      	ldr	r0, [r0, #8]
    30a8:	4b12      	ldr	r3, [pc, #72]	; (30f4 <prvCopyDataToQueue+0x78>)
    30aa:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    30ac:	68a3      	ldr	r3, [r4, #8]
    30ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
    30b0:	4694      	mov	ip, r2
    30b2:	4463      	add	r3, ip
    30b4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    30b6:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    30b8:	6862      	ldr	r2, [r4, #4]
    30ba:	4293      	cmp	r3, r2
    30bc:	d3ee      	bcc.n	309c <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    30be:	6823      	ldr	r3, [r4, #0]
    30c0:	60a3      	str	r3, [r4, #8]
    30c2:	e7eb      	b.n	309c <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    30c4:	68c0      	ldr	r0, [r0, #12]
    30c6:	4b0b      	ldr	r3, [pc, #44]	; (30f4 <prvCopyDataToQueue+0x78>)
    30c8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    30ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    30cc:	425b      	negs	r3, r3
    30ce:	68e2      	ldr	r2, [r4, #12]
    30d0:	18d2      	adds	r2, r2, r3
    30d2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    30d4:	6821      	ldr	r1, [r4, #0]
    30d6:	428a      	cmp	r2, r1
    30d8:	d203      	bcs.n	30e2 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    30da:	6862      	ldr	r2, [r4, #4]
    30dc:	4694      	mov	ip, r2
    30de:	4463      	add	r3, ip
    30e0:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    30e2:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    30e4:	2e02      	cmp	r6, #2
    30e6:	d1d9      	bne.n	309c <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    30e8:	4285      	cmp	r5, r0
    30ea:	d0d7      	beq.n	309c <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    30ec:	3d01      	subs	r5, #1
    30ee:	e7d5      	b.n	309c <prvCopyDataToQueue+0x20>
    30f0:	00004f4d 	.word	0x00004f4d
    30f4:	00008d21 	.word	0x00008d21

000030f8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    30f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30fa:	46ce      	mov	lr, r9
    30fc:	4647      	mov	r7, r8
    30fe:	b580      	push	{r7, lr}
    3100:	b083      	sub	sp, #12
    3102:	9001      	str	r0, [sp, #4]
    3104:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    3106:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    3108:	2c00      	cmp	r4, #0
    310a:	d005      	beq.n	3118 <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    310c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    310e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3110:	429a      	cmp	r2, r3
    3112:	d303      	bcc.n	311c <prvNotifyQueueSetContainer+0x24>
    3114:	b672      	cpsid	i
    3116:	e7fe      	b.n	3116 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
    3118:	b672      	cpsid	i
    311a:	e7fe      	b.n	311a <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    311c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    311e:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    3120:	4293      	cmp	r3, r2
    3122:	d805      	bhi.n	3130 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    3124:	0030      	movs	r0, r6
    3126:	b003      	add	sp, #12
    3128:	bc0c      	pop	{r2, r3}
    312a:	4690      	mov	r8, r2
    312c:	4699      	mov	r9, r3
    312e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    3130:	2345      	movs	r3, #69	; 0x45
    3132:	5ce5      	ldrb	r5, [r4, r3]
    3134:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
    3136:	4b2c      	ldr	r3, [pc, #176]	; (31e8 <prvNotifyQueueSetContainer+0xf0>)
    3138:	4798      	blx	r3
    313a:	4b2c      	ldr	r3, [pc, #176]	; (31ec <prvNotifyQueueSetContainer+0xf4>)
    313c:	4798      	blx	r3
    313e:	4b2c      	ldr	r3, [pc, #176]	; (31f0 <prvNotifyQueueSetContainer+0xf8>)
    3140:	881b      	ldrh	r3, [r3, #0]
    3142:	4203      	tst	r3, r0
    3144:	d01e      	beq.n	3184 <prvNotifyQueueSetContainer+0x8c>
    3146:	0020      	movs	r0, r4
    3148:	4b2a      	ldr	r3, [pc, #168]	; (31f4 <prvNotifyQueueSetContainer+0xfc>)
    314a:	4798      	blx	r3
    314c:	4b28      	ldr	r3, [pc, #160]	; (31f0 <prvNotifyQueueSetContainer+0xf8>)
    314e:	881b      	ldrh	r3, [r3, #0]
    3150:	4203      	tst	r3, r0
    3152:	d017      	beq.n	3184 <prvNotifyQueueSetContainer+0x8c>
    3154:	3625      	adds	r6, #37	; 0x25
    3156:	9b00      	ldr	r3, [sp, #0]
    3158:	2b00      	cmp	r3, #0
    315a:	d106      	bne.n	316a <prvNotifyQueueSetContainer+0x72>
    315c:	0020      	movs	r0, r4
    315e:	4b26      	ldr	r3, [pc, #152]	; (31f8 <prvNotifyQueueSetContainer+0x100>)
    3160:	4798      	blx	r3
    3162:	4b26      	ldr	r3, [pc, #152]	; (31fc <prvNotifyQueueSetContainer+0x104>)
    3164:	5c1e      	ldrb	r6, [r3, r0]
    3166:	3620      	adds	r6, #32
    3168:	b2f6      	uxtb	r6, r6
    316a:	0020      	movs	r0, r4
    316c:	4b22      	ldr	r3, [pc, #136]	; (31f8 <prvNotifyQueueSetContainer+0x100>)
    316e:	4798      	blx	r3
    3170:	4b22      	ldr	r3, [pc, #136]	; (31fc <prvNotifyQueueSetContainer+0x104>)
    3172:	5c1f      	ldrb	r7, [r3, r0]
    3174:	0020      	movs	r0, r4
    3176:	4b22      	ldr	r3, [pc, #136]	; (3200 <prvNotifyQueueSetContainer+0x108>)
    3178:	4798      	blx	r3
    317a:	b2c2      	uxtb	r2, r0
    317c:	0039      	movs	r1, r7
    317e:	0030      	movs	r0, r6
    3180:	4b20      	ldr	r3, [pc, #128]	; (3204 <prvNotifyQueueSetContainer+0x10c>)
    3182:	4798      	blx	r3
    3184:	0020      	movs	r0, r4
    3186:	4f1c      	ldr	r7, [pc, #112]	; (31f8 <prvNotifyQueueSetContainer+0x100>)
    3188:	47b8      	blx	r7
    318a:	4e1c      	ldr	r6, [pc, #112]	; (31fc <prvNotifyQueueSetContainer+0x104>)
    318c:	5c33      	ldrb	r3, [r6, r0]
    318e:	4698      	mov	r8, r3
    3190:	0020      	movs	r0, r4
    3192:	4b1b      	ldr	r3, [pc, #108]	; (3200 <prvNotifyQueueSetContainer+0x108>)
    3194:	4798      	blx	r3
    3196:	b2c3      	uxtb	r3, r0
    3198:	4699      	mov	r9, r3
    319a:	0020      	movs	r0, r4
    319c:	47b8      	blx	r7
    319e:	5c33      	ldrb	r3, [r6, r0]
    31a0:	2b02      	cmp	r3, #2
    31a2:	d019      	beq.n	31d8 <prvNotifyQueueSetContainer+0xe0>
    31a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    31a6:	3201      	adds	r2, #1
    31a8:	b2d2      	uxtb	r2, r2
    31aa:	4649      	mov	r1, r9
    31ac:	4640      	mov	r0, r8
    31ae:	4b16      	ldr	r3, [pc, #88]	; (3208 <prvNotifyQueueSetContainer+0x110>)
    31b0:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    31b2:	9a00      	ldr	r2, [sp, #0]
    31b4:	a901      	add	r1, sp, #4
    31b6:	0020      	movs	r0, r4
    31b8:	4b14      	ldr	r3, [pc, #80]	; (320c <prvNotifyQueueSetContainer+0x114>)
    31ba:	4798      	blx	r3
    31bc:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    31be:	1c6b      	adds	r3, r5, #1
    31c0:	d10c      	bne.n	31dc <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    31c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    31c4:	2b00      	cmp	r3, #0
    31c6:	d0ad      	beq.n	3124 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    31c8:	0020      	movs	r0, r4
    31ca:	3024      	adds	r0, #36	; 0x24
    31cc:	4b10      	ldr	r3, [pc, #64]	; (3210 <prvNotifyQueueSetContainer+0x118>)
    31ce:	4798      	blx	r3
    31d0:	2800      	cmp	r0, #0
    31d2:	d0a7      	beq.n	3124 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
    31d4:	2601      	movs	r6, #1
    31d6:	e7a5      	b.n	3124 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
    31d8:	2200      	movs	r2, #0
    31da:	e7e6      	b.n	31aa <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    31dc:	3501      	adds	r5, #1
    31de:	b26d      	sxtb	r5, r5
    31e0:	2345      	movs	r3, #69	; 0x45
    31e2:	54e5      	strb	r5, [r4, r3]
    31e4:	e79e      	b.n	3124 <prvNotifyQueueSetContainer+0x2c>
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	00001d45 	.word	0x00001d45
    31ec:	00001c8d 	.word	0x00001c8d
    31f0:	20000020 	.word	0x20000020
    31f4:	00001cf1 	.word	0x00001cf1
    31f8:	00001c71 	.word	0x00001c71
    31fc:	20000018 	.word	0x20000018
    3200:	00001ce1 	.word	0x00001ce1
    3204:	0000297d 	.word	0x0000297d
    3208:	00002451 	.word	0x00002451
    320c:	0000307d 	.word	0x0000307d
    3210:	00004cad 	.word	0x00004cad

00003214 <prvCopyDataFromQueue>:
{
    3214:	b510      	push	{r4, lr}
    3216:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3218:	6c02      	ldr	r2, [r0, #64]	; 0x40
    321a:	2a00      	cmp	r2, #0
    321c:	d00b      	beq.n	3236 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    321e:	68c3      	ldr	r3, [r0, #12]
    3220:	189b      	adds	r3, r3, r2
    3222:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    3224:	6841      	ldr	r1, [r0, #4]
    3226:	428b      	cmp	r3, r1
    3228:	d301      	bcc.n	322e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    322a:	6803      	ldr	r3, [r0, #0]
    322c:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    322e:	68c1      	ldr	r1, [r0, #12]
    3230:	0020      	movs	r0, r4
    3232:	4b01      	ldr	r3, [pc, #4]	; (3238 <prvCopyDataFromQueue+0x24>)
    3234:	4798      	blx	r3
}
    3236:	bd10      	pop	{r4, pc}
    3238:	00008d21 	.word	0x00008d21

0000323c <prvUnlockQueue>:
{
    323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    323e:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    3240:	4b25      	ldr	r3, [pc, #148]	; (32d8 <prvUnlockQueue+0x9c>)
    3242:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    3244:	2345      	movs	r3, #69	; 0x45
    3246:	5cfc      	ldrb	r4, [r7, r3]
    3248:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    324a:	2c00      	cmp	r4, #0
    324c:	dd1c      	ble.n	3288 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    324e:	4e23      	ldr	r6, [pc, #140]	; (32dc <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3250:	4d23      	ldr	r5, [pc, #140]	; (32e0 <prvUnlockQueue+0xa4>)
    3252:	e00b      	b.n	326c <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3256:	2b00      	cmp	r3, #0
    3258:	d016      	beq.n	3288 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    325a:	0038      	movs	r0, r7
    325c:	3024      	adds	r0, #36	; 0x24
    325e:	47a8      	blx	r5
    3260:	2800      	cmp	r0, #0
    3262:	d10e      	bne.n	3282 <prvUnlockQueue+0x46>
    3264:	3c01      	subs	r4, #1
    3266:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    3268:	2c00      	cmp	r4, #0
    326a:	d00d      	beq.n	3288 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    326c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    326e:	2b00      	cmp	r3, #0
    3270:	d0f0      	beq.n	3254 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    3272:	2100      	movs	r1, #0
    3274:	0038      	movs	r0, r7
    3276:	47b0      	blx	r6
    3278:	2800      	cmp	r0, #0
    327a:	d0f3      	beq.n	3264 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    327c:	4b19      	ldr	r3, [pc, #100]	; (32e4 <prvUnlockQueue+0xa8>)
    327e:	4798      	blx	r3
    3280:	e7f0      	b.n	3264 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    3282:	4b18      	ldr	r3, [pc, #96]	; (32e4 <prvUnlockQueue+0xa8>)
    3284:	4798      	blx	r3
    3286:	e7ed      	b.n	3264 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    3288:	22ff      	movs	r2, #255	; 0xff
    328a:	2345      	movs	r3, #69	; 0x45
    328c:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    328e:	4b16      	ldr	r3, [pc, #88]	; (32e8 <prvUnlockQueue+0xac>)
    3290:	4798      	blx	r3
	taskENTER_CRITICAL();
    3292:	4b11      	ldr	r3, [pc, #68]	; (32d8 <prvUnlockQueue+0x9c>)
    3294:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3296:	2344      	movs	r3, #68	; 0x44
    3298:	5cfc      	ldrb	r4, [r7, r3]
    329a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    329c:	2c00      	cmp	r4, #0
    329e:	dd14      	ble.n	32ca <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    32a0:	693b      	ldr	r3, [r7, #16]
    32a2:	2b00      	cmp	r3, #0
    32a4:	d011      	beq.n	32ca <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    32a6:	003d      	movs	r5, r7
    32a8:	3510      	adds	r5, #16
    32aa:	4e0d      	ldr	r6, [pc, #52]	; (32e0 <prvUnlockQueue+0xa4>)
    32ac:	e006      	b.n	32bc <prvUnlockQueue+0x80>
    32ae:	3c01      	subs	r4, #1
    32b0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    32b2:	2c00      	cmp	r4, #0
    32b4:	d009      	beq.n	32ca <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    32b6:	693b      	ldr	r3, [r7, #16]
    32b8:	2b00      	cmp	r3, #0
    32ba:	d006      	beq.n	32ca <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    32bc:	0028      	movs	r0, r5
    32be:	47b0      	blx	r6
    32c0:	2800      	cmp	r0, #0
    32c2:	d0f4      	beq.n	32ae <prvUnlockQueue+0x72>
					vTaskMissedYield();
    32c4:	4b07      	ldr	r3, [pc, #28]	; (32e4 <prvUnlockQueue+0xa8>)
    32c6:	4798      	blx	r3
    32c8:	e7f1      	b.n	32ae <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    32ca:	22ff      	movs	r2, #255	; 0xff
    32cc:	2344      	movs	r3, #68	; 0x44
    32ce:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    32d0:	4b05      	ldr	r3, [pc, #20]	; (32e8 <prvUnlockQueue+0xac>)
    32d2:	4798      	blx	r3
}
    32d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	00002ef1 	.word	0x00002ef1
    32dc:	000030f9 	.word	0x000030f9
    32e0:	00004cad 	.word	0x00004cad
    32e4:	00004de9 	.word	0x00004de9
    32e8:	00002f09 	.word	0x00002f09

000032ec <xQueueGenericReset>:
{
    32ec:	b570      	push	{r4, r5, r6, lr}
    32ee:	0004      	movs	r4, r0
    32f0:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    32f2:	2800      	cmp	r0, #0
    32f4:	d021      	beq.n	333a <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    32f6:	4b17      	ldr	r3, [pc, #92]	; (3354 <xQueueGenericReset+0x68>)
    32f8:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    32fa:	6822      	ldr	r2, [r4, #0]
    32fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
    32fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3300:	434b      	muls	r3, r1
    3302:	18d0      	adds	r0, r2, r3
    3304:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    3306:	2000      	movs	r0, #0
    3308:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    330a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    330c:	1a5b      	subs	r3, r3, r1
    330e:	18d3      	adds	r3, r2, r3
    3310:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    3312:	23ff      	movs	r3, #255	; 0xff
    3314:	2244      	movs	r2, #68	; 0x44
    3316:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    3318:	3201      	adds	r2, #1
    331a:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    331c:	2d00      	cmp	r5, #0
    331e:	d111      	bne.n	3344 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3320:	6923      	ldr	r3, [r4, #16]
    3322:	2b00      	cmp	r3, #0
    3324:	d005      	beq.n	3332 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3326:	0020      	movs	r0, r4
    3328:	3010      	adds	r0, #16
    332a:	4b0b      	ldr	r3, [pc, #44]	; (3358 <xQueueGenericReset+0x6c>)
    332c:	4798      	blx	r3
    332e:	2800      	cmp	r0, #0
    3330:	d105      	bne.n	333e <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    3332:	4b0a      	ldr	r3, [pc, #40]	; (335c <xQueueGenericReset+0x70>)
    3334:	4798      	blx	r3
}
    3336:	2001      	movs	r0, #1
    3338:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    333a:	b672      	cpsid	i
    333c:	e7fe      	b.n	333c <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    333e:	4b08      	ldr	r3, [pc, #32]	; (3360 <xQueueGenericReset+0x74>)
    3340:	4798      	blx	r3
    3342:	e7f6      	b.n	3332 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3344:	0020      	movs	r0, r4
    3346:	3010      	adds	r0, #16
    3348:	4d06      	ldr	r5, [pc, #24]	; (3364 <xQueueGenericReset+0x78>)
    334a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    334c:	0020      	movs	r0, r4
    334e:	3024      	adds	r0, #36	; 0x24
    3350:	47a8      	blx	r5
    3352:	e7ee      	b.n	3332 <xQueueGenericReset+0x46>
    3354:	00002ef1 	.word	0x00002ef1
    3358:	00004cad 	.word	0x00004cad
    335c:	00002f09 	.word	0x00002f09
    3360:	00002ee1 	.word	0x00002ee1
    3364:	00002d61 	.word	0x00002d61

00003368 <xQueueGenericCreate>:
	{
    3368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    336a:	0006      	movs	r6, r0
    336c:	000d      	movs	r5, r1
    336e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    3370:	2800      	cmp	r0, #0
    3372:	d101      	bne.n	3378 <xQueueGenericCreate+0x10>
    3374:	b672      	cpsid	i
    3376:	e7fe      	b.n	3376 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3378:	0008      	movs	r0, r1
    337a:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    337c:	3054      	adds	r0, #84	; 0x54
    337e:	4b38      	ldr	r3, [pc, #224]	; (3460 <xQueueGenericCreate+0xf8>)
    3380:	4798      	blx	r3
    3382:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    3384:	d05b      	beq.n	343e <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
    3386:	2d00      	cmp	r5, #0
    3388:	d13b      	bne.n	3402 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    338a:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    338c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    338e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    3390:	2101      	movs	r1, #1
    3392:	0020      	movs	r0, r4
    3394:	4b33      	ldr	r3, [pc, #204]	; (3464 <xQueueGenericCreate+0xfc>)
    3396:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    3398:	2350      	movs	r3, #80	; 0x50
    339a:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    339c:	2300      	movs	r3, #0
    339e:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
    33a0:	0020      	movs	r0, r4
    33a2:	4e31      	ldr	r6, [pc, #196]	; (3468 <xQueueGenericCreate+0x100>)
    33a4:	47b0      	blx	r6
    33a6:	4d31      	ldr	r5, [pc, #196]	; (346c <xQueueGenericCreate+0x104>)
    33a8:	5c28      	ldrb	r0, [r5, r0]
    33aa:	4b31      	ldr	r3, [pc, #196]	; (3470 <xQueueGenericCreate+0x108>)
    33ac:	4798      	blx	r3
    33ae:	b281      	uxth	r1, r0
    33b0:	0020      	movs	r0, r4
    33b2:	4b30      	ldr	r3, [pc, #192]	; (3474 <xQueueGenericCreate+0x10c>)
    33b4:	4798      	blx	r3
    33b6:	4b30      	ldr	r3, [pc, #192]	; (3478 <xQueueGenericCreate+0x110>)
    33b8:	8819      	ldrh	r1, [r3, #0]
    33ba:	0020      	movs	r0, r4
    33bc:	4b2f      	ldr	r3, [pc, #188]	; (347c <xQueueGenericCreate+0x114>)
    33be:	4798      	blx	r3
    33c0:	0020      	movs	r0, r4
    33c2:	47b0      	blx	r6
    33c4:	5c2d      	ldrb	r5, [r5, r0]
    33c6:	0020      	movs	r0, r4
    33c8:	4b2d      	ldr	r3, [pc, #180]	; (3480 <xQueueGenericCreate+0x118>)
    33ca:	4798      	blx	r3
    33cc:	b2c1      	uxtb	r1, r0
    33ce:	0028      	movs	r0, r5
    33d0:	4b2c      	ldr	r3, [pc, #176]	; (3484 <xQueueGenericCreate+0x11c>)
    33d2:	4798      	blx	r3
    33d4:	4b2c      	ldr	r3, [pc, #176]	; (3488 <xQueueGenericCreate+0x120>)
    33d6:	4798      	blx	r3
    33d8:	4b2c      	ldr	r3, [pc, #176]	; (348c <xQueueGenericCreate+0x124>)
    33da:	4798      	blx	r3
    33dc:	4b2c      	ldr	r3, [pc, #176]	; (3490 <xQueueGenericCreate+0x128>)
    33de:	881b      	ldrh	r3, [r3, #0]
    33e0:	4203      	tst	r3, r0
    33e2:	d112      	bne.n	340a <xQueueGenericCreate+0xa2>
    33e4:	0020      	movs	r0, r4
    33e6:	4b20      	ldr	r3, [pc, #128]	; (3468 <xQueueGenericCreate+0x100>)
    33e8:	4798      	blx	r3
    33ea:	4b20      	ldr	r3, [pc, #128]	; (346c <xQueueGenericCreate+0x104>)
    33ec:	5c1d      	ldrb	r5, [r3, r0]
    33ee:	0020      	movs	r0, r4
    33f0:	4b23      	ldr	r3, [pc, #140]	; (3480 <xQueueGenericCreate+0x118>)
    33f2:	4798      	blx	r3
    33f4:	b2c1      	uxtb	r1, r0
    33f6:	2200      	movs	r2, #0
    33f8:	0028      	movs	r0, r5
    33fa:	4b26      	ldr	r3, [pc, #152]	; (3494 <xQueueGenericCreate+0x12c>)
    33fc:	4798      	blx	r3
	}
    33fe:	0020      	movs	r0, r4
    3400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    3402:	0003      	movs	r3, r0
    3404:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    3406:	6003      	str	r3, [r0, #0]
    3408:	e7c0      	b.n	338c <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
    340a:	0020      	movs	r0, r4
    340c:	4b22      	ldr	r3, [pc, #136]	; (3498 <xQueueGenericCreate+0x130>)
    340e:	4798      	blx	r3
    3410:	4b1f      	ldr	r3, [pc, #124]	; (3490 <xQueueGenericCreate+0x128>)
    3412:	881b      	ldrh	r3, [r3, #0]
    3414:	4203      	tst	r3, r0
    3416:	d0e5      	beq.n	33e4 <xQueueGenericCreate+0x7c>
    3418:	0020      	movs	r0, r4
    341a:	4f13      	ldr	r7, [pc, #76]	; (3468 <xQueueGenericCreate+0x100>)
    341c:	47b8      	blx	r7
    341e:	4e13      	ldr	r6, [pc, #76]	; (346c <xQueueGenericCreate+0x104>)
    3420:	5c35      	ldrb	r5, [r6, r0]
    3422:	3518      	adds	r5, #24
    3424:	b2ed      	uxtb	r5, r5
    3426:	0020      	movs	r0, r4
    3428:	47b8      	blx	r7
    342a:	5c36      	ldrb	r6, [r6, r0]
    342c:	0020      	movs	r0, r4
    342e:	4b14      	ldr	r3, [pc, #80]	; (3480 <xQueueGenericCreate+0x118>)
    3430:	4798      	blx	r3
    3432:	b2c2      	uxtb	r2, r0
    3434:	0031      	movs	r1, r6
    3436:	0028      	movs	r0, r5
    3438:	4b18      	ldr	r3, [pc, #96]	; (349c <xQueueGenericCreate+0x134>)
    343a:	4798      	blx	r3
    343c:	e7d2      	b.n	33e4 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
    343e:	4b12      	ldr	r3, [pc, #72]	; (3488 <xQueueGenericCreate+0x120>)
    3440:	4798      	blx	r3
    3442:	4b12      	ldr	r3, [pc, #72]	; (348c <xQueueGenericCreate+0x124>)
    3444:	4798      	blx	r3
    3446:	4b12      	ldr	r3, [pc, #72]	; (3490 <xQueueGenericCreate+0x128>)
    3448:	881b      	ldrh	r3, [r3, #0]
    344a:	4203      	tst	r3, r0
    344c:	d0d7      	beq.n	33fe <xQueueGenericCreate+0x96>
    344e:	4b07      	ldr	r3, [pc, #28]	; (346c <xQueueGenericCreate+0x104>)
    3450:	5dd8      	ldrb	r0, [r3, r7]
    3452:	3040      	adds	r0, #64	; 0x40
    3454:	b2c0      	uxtb	r0, r0
    3456:	2100      	movs	r1, #0
    3458:	4b11      	ldr	r3, [pc, #68]	; (34a0 <xQueueGenericCreate+0x138>)
    345a:	4798      	blx	r3
    345c:	e7cf      	b.n	33fe <xQueueGenericCreate+0x96>
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	00002fb5 	.word	0x00002fb5
    3464:	000032ed 	.word	0x000032ed
    3468:	00001c71 	.word	0x00001c71
    346c:	20000018 	.word	0x20000018
    3470:	000024e9 	.word	0x000024e9
    3474:	00001d01 	.word	0x00001d01
    3478:	2000001e 	.word	0x2000001e
    347c:	00001d21 	.word	0x00001d21
    3480:	00001ce1 	.word	0x00001ce1
    3484:	00002379 	.word	0x00002379
    3488:	00001d45 	.word	0x00001d45
    348c:	00001c8d 	.word	0x00001c8d
    3490:	20000020 	.word	0x20000020
    3494:	00002451 	.word	0x00002451
    3498:	00001cf1 	.word	0x00001cf1
    349c:	0000297d 	.word	0x0000297d
    34a0:	00002b19 	.word	0x00002b19

000034a4 <xQueueGenericSend>:
{
    34a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34a6:	46ce      	mov	lr, r9
    34a8:	4647      	mov	r7, r8
    34aa:	b580      	push	{r7, lr}
    34ac:	b085      	sub	sp, #20
    34ae:	0004      	movs	r4, r0
    34b0:	9100      	str	r1, [sp, #0]
    34b2:	9201      	str	r2, [sp, #4]
    34b4:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    34b6:	2800      	cmp	r0, #0
    34b8:	d00d      	beq.n	34d6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    34ba:	9b00      	ldr	r3, [sp, #0]
    34bc:	2b00      	cmp	r3, #0
    34be:	d00c      	beq.n	34da <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    34c0:	2d02      	cmp	r5, #2
    34c2:	d00f      	beq.n	34e4 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    34c4:	4bab      	ldr	r3, [pc, #684]	; (3774 <xQueueGenericSend+0x2d0>)
    34c6:	4798      	blx	r3
    34c8:	2800      	cmp	r0, #0
    34ca:	d110      	bne.n	34ee <xQueueGenericSend+0x4a>
    34cc:	9b01      	ldr	r3, [sp, #4]
    34ce:	2b00      	cmp	r3, #0
    34d0:	d010      	beq.n	34f4 <xQueueGenericSend+0x50>
    34d2:	b672      	cpsid	i
    34d4:	e7fe      	b.n	34d4 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
    34d6:	b672      	cpsid	i
    34d8:	e7fe      	b.n	34d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    34da:	6c03      	ldr	r3, [r0, #64]	; 0x40
    34dc:	2b00      	cmp	r3, #0
    34de:	d0ef      	beq.n	34c0 <xQueueGenericSend+0x1c>
    34e0:	b672      	cpsid	i
    34e2:	e7fe      	b.n	34e2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    34e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    34e6:	2b01      	cmp	r3, #1
    34e8:	d0ec      	beq.n	34c4 <xQueueGenericSend+0x20>
    34ea:	b672      	cpsid	i
    34ec:	e7fe      	b.n	34ec <xQueueGenericSend+0x48>
    34ee:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    34f0:	4ea1      	ldr	r6, [pc, #644]	; (3778 <xQueueGenericSend+0x2d4>)
    34f2:	e0bc      	b.n	366e <xQueueGenericSend+0x1ca>
    34f4:	2700      	movs	r7, #0
    34f6:	e7fb      	b.n	34f0 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
    34f8:	4ba0      	ldr	r3, [pc, #640]	; (377c <xQueueGenericSend+0x2d8>)
    34fa:	4798      	blx	r3
    34fc:	4ba0      	ldr	r3, [pc, #640]	; (3780 <xQueueGenericSend+0x2dc>)
    34fe:	4798      	blx	r3
    3500:	4ba0      	ldr	r3, [pc, #640]	; (3784 <xQueueGenericSend+0x2e0>)
    3502:	881b      	ldrh	r3, [r3, #0]
    3504:	4203      	tst	r3, r0
    3506:	d01d      	beq.n	3544 <xQueueGenericSend+0xa0>
    3508:	0020      	movs	r0, r4
    350a:	4b9f      	ldr	r3, [pc, #636]	; (3788 <xQueueGenericSend+0x2e4>)
    350c:	4798      	blx	r3
    350e:	4b9d      	ldr	r3, [pc, #628]	; (3784 <xQueueGenericSend+0x2e0>)
    3510:	881b      	ldrh	r3, [r3, #0]
    3512:	4203      	tst	r3, r0
    3514:	d016      	beq.n	3544 <xQueueGenericSend+0xa0>
    3516:	2725      	movs	r7, #37	; 0x25
    3518:	2d00      	cmp	r5, #0
    351a:	d106      	bne.n	352a <xQueueGenericSend+0x86>
    351c:	0020      	movs	r0, r4
    351e:	4b9b      	ldr	r3, [pc, #620]	; (378c <xQueueGenericSend+0x2e8>)
    3520:	4798      	blx	r3
    3522:	4b9b      	ldr	r3, [pc, #620]	; (3790 <xQueueGenericSend+0x2ec>)
    3524:	5c1f      	ldrb	r7, [r3, r0]
    3526:	3720      	adds	r7, #32
    3528:	b2ff      	uxtb	r7, r7
    352a:	0020      	movs	r0, r4
    352c:	4b97      	ldr	r3, [pc, #604]	; (378c <xQueueGenericSend+0x2e8>)
    352e:	4798      	blx	r3
    3530:	4b97      	ldr	r3, [pc, #604]	; (3790 <xQueueGenericSend+0x2ec>)
    3532:	5c1e      	ldrb	r6, [r3, r0]
    3534:	0020      	movs	r0, r4
    3536:	4b97      	ldr	r3, [pc, #604]	; (3794 <xQueueGenericSend+0x2f0>)
    3538:	4798      	blx	r3
    353a:	b2c2      	uxtb	r2, r0
    353c:	0031      	movs	r1, r6
    353e:	0038      	movs	r0, r7
    3540:	4b95      	ldr	r3, [pc, #596]	; (3798 <xQueueGenericSend+0x2f4>)
    3542:	4798      	blx	r3
    3544:	0020      	movs	r0, r4
    3546:	4e91      	ldr	r6, [pc, #580]	; (378c <xQueueGenericSend+0x2e8>)
    3548:	47b0      	blx	r6
    354a:	4f91      	ldr	r7, [pc, #580]	; (3790 <xQueueGenericSend+0x2ec>)
    354c:	5c3b      	ldrb	r3, [r7, r0]
    354e:	4698      	mov	r8, r3
    3550:	0020      	movs	r0, r4
    3552:	4b90      	ldr	r3, [pc, #576]	; (3794 <xQueueGenericSend+0x2f0>)
    3554:	4798      	blx	r3
    3556:	b2c3      	uxtb	r3, r0
    3558:	4699      	mov	r9, r3
    355a:	0020      	movs	r0, r4
    355c:	47b0      	blx	r6
    355e:	5c3b      	ldrb	r3, [r7, r0]
    3560:	2b02      	cmp	r3, #2
    3562:	d01f      	beq.n	35a4 <xQueueGenericSend+0x100>
    3564:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3566:	3201      	adds	r2, #1
    3568:	b2d2      	uxtb	r2, r2
    356a:	4649      	mov	r1, r9
    356c:	4640      	mov	r0, r8
    356e:	4b8b      	ldr	r3, [pc, #556]	; (379c <xQueueGenericSend+0x2f8>)
    3570:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3572:	002a      	movs	r2, r5
    3574:	9900      	ldr	r1, [sp, #0]
    3576:	0020      	movs	r0, r4
    3578:	4b89      	ldr	r3, [pc, #548]	; (37a0 <xQueueGenericSend+0x2fc>)
    357a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    357c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    357e:	2b00      	cmp	r3, #0
    3580:	d012      	beq.n	35a8 <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3582:	0029      	movs	r1, r5
    3584:	0020      	movs	r0, r4
    3586:	4b87      	ldr	r3, [pc, #540]	; (37a4 <xQueueGenericSend+0x300>)
    3588:	4798      	blx	r3
    358a:	2800      	cmp	r0, #0
    358c:	d001      	beq.n	3592 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    358e:	4b86      	ldr	r3, [pc, #536]	; (37a8 <xQueueGenericSend+0x304>)
    3590:	4798      	blx	r3
				taskEXIT_CRITICAL();
    3592:	4b86      	ldr	r3, [pc, #536]	; (37ac <xQueueGenericSend+0x308>)
    3594:	4798      	blx	r3
				return pdPASS;
    3596:	2301      	movs	r3, #1
}
    3598:	0018      	movs	r0, r3
    359a:	b005      	add	sp, #20
    359c:	bc0c      	pop	{r2, r3}
    359e:	4690      	mov	r8, r2
    35a0:	4699      	mov	r9, r3
    35a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
    35a4:	2200      	movs	r2, #0
    35a6:	e7e0      	b.n	356a <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    35a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    35aa:	2b00      	cmp	r3, #0
    35ac:	d008      	beq.n	35c0 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    35ae:	0020      	movs	r0, r4
    35b0:	3024      	adds	r0, #36	; 0x24
    35b2:	4b7f      	ldr	r3, [pc, #508]	; (37b0 <xQueueGenericSend+0x30c>)
    35b4:	4798      	blx	r3
    35b6:	2800      	cmp	r0, #0
    35b8:	d0eb      	beq.n	3592 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
    35ba:	4b7b      	ldr	r3, [pc, #492]	; (37a8 <xQueueGenericSend+0x304>)
    35bc:	4798      	blx	r3
    35be:	e7e8      	b.n	3592 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
    35c0:	2800      	cmp	r0, #0
    35c2:	d0e6      	beq.n	3592 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    35c4:	4b78      	ldr	r3, [pc, #480]	; (37a8 <xQueueGenericSend+0x304>)
    35c6:	4798      	blx	r3
    35c8:	e7e3      	b.n	3592 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
    35ca:	4b78      	ldr	r3, [pc, #480]	; (37ac <xQueueGenericSend+0x308>)
    35cc:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
    35ce:	4b6b      	ldr	r3, [pc, #428]	; (377c <xQueueGenericSend+0x2d8>)
    35d0:	4798      	blx	r3
    35d2:	4b6b      	ldr	r3, [pc, #428]	; (3780 <xQueueGenericSend+0x2dc>)
    35d4:	4798      	blx	r3
    35d6:	4b6b      	ldr	r3, [pc, #428]	; (3784 <xQueueGenericSend+0x2e0>)
    35d8:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    35da:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    35dc:	4202      	tst	r2, r0
    35de:	d0db      	beq.n	3598 <xQueueGenericSend+0xf4>
    35e0:	0020      	movs	r0, r4
    35e2:	4b69      	ldr	r3, [pc, #420]	; (3788 <xQueueGenericSend+0x2e4>)
    35e4:	4798      	blx	r3
    35e6:	4b67      	ldr	r3, [pc, #412]	; (3784 <xQueueGenericSend+0x2e0>)
    35e8:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    35ea:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    35ec:	4202      	tst	r2, r0
    35ee:	d0d3      	beq.n	3598 <xQueueGenericSend+0xf4>
    35f0:	264d      	movs	r6, #77	; 0x4d
    35f2:	2d00      	cmp	r5, #0
    35f4:	d106      	bne.n	3604 <xQueueGenericSend+0x160>
    35f6:	0020      	movs	r0, r4
    35f8:	4b64      	ldr	r3, [pc, #400]	; (378c <xQueueGenericSend+0x2e8>)
    35fa:	4798      	blx	r3
    35fc:	4b64      	ldr	r3, [pc, #400]	; (3790 <xQueueGenericSend+0x2ec>)
    35fe:	5c1e      	ldrb	r6, [r3, r0]
    3600:	3648      	adds	r6, #72	; 0x48
    3602:	b2f6      	uxtb	r6, r6
    3604:	0020      	movs	r0, r4
    3606:	4b61      	ldr	r3, [pc, #388]	; (378c <xQueueGenericSend+0x2e8>)
    3608:	4798      	blx	r3
    360a:	4b61      	ldr	r3, [pc, #388]	; (3790 <xQueueGenericSend+0x2ec>)
    360c:	5c1d      	ldrb	r5, [r3, r0]
    360e:	0020      	movs	r0, r4
    3610:	4b60      	ldr	r3, [pc, #384]	; (3794 <xQueueGenericSend+0x2f0>)
    3612:	4798      	blx	r3
    3614:	b2c2      	uxtb	r2, r0
    3616:	0029      	movs	r1, r5
    3618:	0030      	movs	r0, r6
    361a:	4b5f      	ldr	r3, [pc, #380]	; (3798 <xQueueGenericSend+0x2f4>)
    361c:	4798      	blx	r3
					return errQUEUE_FULL;
    361e:	2300      	movs	r3, #0
    3620:	e7ba      	b.n	3598 <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
    3622:	4b62      	ldr	r3, [pc, #392]	; (37ac <xQueueGenericSend+0x308>)
    3624:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3626:	a901      	add	r1, sp, #4
    3628:	a802      	add	r0, sp, #8
    362a:	4b62      	ldr	r3, [pc, #392]	; (37b4 <xQueueGenericSend+0x310>)
    362c:	4798      	blx	r3
    362e:	2800      	cmp	r0, #0
    3630:	d16e      	bne.n	3710 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
    3632:	4b51      	ldr	r3, [pc, #324]	; (3778 <xQueueGenericSend+0x2d4>)
    3634:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3638:	4699      	mov	r9, r3
    363a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    363c:	4b5b      	ldr	r3, [pc, #364]	; (37ac <xQueueGenericSend+0x308>)
    363e:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3640:	45b9      	cmp	r9, r7
    3642:	d15f      	bne.n	3704 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    3644:	4b4d      	ldr	r3, [pc, #308]	; (377c <xQueueGenericSend+0x2d8>)
    3646:	4798      	blx	r3
    3648:	4b4d      	ldr	r3, [pc, #308]	; (3780 <xQueueGenericSend+0x2dc>)
    364a:	4798      	blx	r3
    364c:	4b4d      	ldr	r3, [pc, #308]	; (3784 <xQueueGenericSend+0x2e0>)
    364e:	881b      	ldrh	r3, [r3, #0]
    3650:	4203      	tst	r3, r0
    3652:	d134      	bne.n	36be <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3654:	0020      	movs	r0, r4
    3656:	3010      	adds	r0, #16
    3658:	9901      	ldr	r1, [sp, #4]
    365a:	4b57      	ldr	r3, [pc, #348]	; (37b8 <xQueueGenericSend+0x314>)
    365c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    365e:	0020      	movs	r0, r4
    3660:	4b56      	ldr	r3, [pc, #344]	; (37bc <xQueueGenericSend+0x318>)
    3662:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    3664:	4b56      	ldr	r3, [pc, #344]	; (37c0 <xQueueGenericSend+0x31c>)
    3666:	4798      	blx	r3
    3668:	2800      	cmp	r0, #0
    366a:	d048      	beq.n	36fe <xQueueGenericSend+0x25a>
    366c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    366e:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3672:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3674:	4293      	cmp	r3, r2
    3676:	d200      	bcs.n	367a <xQueueGenericSend+0x1d6>
    3678:	e73e      	b.n	34f8 <xQueueGenericSend+0x54>
    367a:	2d02      	cmp	r5, #2
    367c:	d100      	bne.n	3680 <xQueueGenericSend+0x1dc>
    367e:	e73b      	b.n	34f8 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    3680:	9b01      	ldr	r3, [sp, #4]
    3682:	2b00      	cmp	r3, #0
    3684:	d0a1      	beq.n	35ca <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
    3686:	2f00      	cmp	r7, #0
    3688:	d102      	bne.n	3690 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
    368a:	a802      	add	r0, sp, #8
    368c:	4b4d      	ldr	r3, [pc, #308]	; (37c4 <xQueueGenericSend+0x320>)
    368e:	4798      	blx	r3
		taskEXIT_CRITICAL();
    3690:	4b46      	ldr	r3, [pc, #280]	; (37ac <xQueueGenericSend+0x308>)
    3692:	4798      	blx	r3
		vTaskSuspendAll();
    3694:	4b4c      	ldr	r3, [pc, #304]	; (37c8 <xQueueGenericSend+0x324>)
    3696:	4798      	blx	r3
		prvLockQueue( pxQueue );
    3698:	4b37      	ldr	r3, [pc, #220]	; (3778 <xQueueGenericSend+0x2d4>)
    369a:	4798      	blx	r3
    369c:	2344      	movs	r3, #68	; 0x44
    369e:	5ce3      	ldrb	r3, [r4, r3]
    36a0:	b25b      	sxtb	r3, r3
    36a2:	3301      	adds	r3, #1
    36a4:	d102      	bne.n	36ac <xQueueGenericSend+0x208>
    36a6:	2200      	movs	r2, #0
    36a8:	2344      	movs	r3, #68	; 0x44
    36aa:	54e2      	strb	r2, [r4, r3]
    36ac:	2345      	movs	r3, #69	; 0x45
    36ae:	5ce3      	ldrb	r3, [r4, r3]
    36b0:	b25b      	sxtb	r3, r3
    36b2:	3301      	adds	r3, #1
    36b4:	d1b5      	bne.n	3622 <xQueueGenericSend+0x17e>
    36b6:	2200      	movs	r2, #0
    36b8:	2345      	movs	r3, #69	; 0x45
    36ba:	54e2      	strb	r2, [r4, r3]
    36bc:	e7b1      	b.n	3622 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    36be:	0020      	movs	r0, r4
    36c0:	4b31      	ldr	r3, [pc, #196]	; (3788 <xQueueGenericSend+0x2e4>)
    36c2:	4798      	blx	r3
    36c4:	4b2f      	ldr	r3, [pc, #188]	; (3784 <xQueueGenericSend+0x2e0>)
    36c6:	881b      	ldrh	r3, [r3, #0]
    36c8:	4203      	tst	r3, r0
    36ca:	d0c3      	beq.n	3654 <xQueueGenericSend+0x1b0>
    36cc:	2775      	movs	r7, #117	; 0x75
    36ce:	2d00      	cmp	r5, #0
    36d0:	d106      	bne.n	36e0 <xQueueGenericSend+0x23c>
    36d2:	0020      	movs	r0, r4
    36d4:	4b2d      	ldr	r3, [pc, #180]	; (378c <xQueueGenericSend+0x2e8>)
    36d6:	4798      	blx	r3
    36d8:	4b2d      	ldr	r3, [pc, #180]	; (3790 <xQueueGenericSend+0x2ec>)
    36da:	5c1f      	ldrb	r7, [r3, r0]
    36dc:	3770      	adds	r7, #112	; 0x70
    36de:	b2ff      	uxtb	r7, r7
    36e0:	0020      	movs	r0, r4
    36e2:	4b2a      	ldr	r3, [pc, #168]	; (378c <xQueueGenericSend+0x2e8>)
    36e4:	4798      	blx	r3
    36e6:	4b2a      	ldr	r3, [pc, #168]	; (3790 <xQueueGenericSend+0x2ec>)
    36e8:	5c1b      	ldrb	r3, [r3, r0]
    36ea:	4699      	mov	r9, r3
    36ec:	0020      	movs	r0, r4
    36ee:	4b29      	ldr	r3, [pc, #164]	; (3794 <xQueueGenericSend+0x2f0>)
    36f0:	4798      	blx	r3
    36f2:	b2c2      	uxtb	r2, r0
    36f4:	4649      	mov	r1, r9
    36f6:	0038      	movs	r0, r7
    36f8:	4b27      	ldr	r3, [pc, #156]	; (3798 <xQueueGenericSend+0x2f4>)
    36fa:	4798      	blx	r3
    36fc:	e7aa      	b.n	3654 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
    36fe:	4b2a      	ldr	r3, [pc, #168]	; (37a8 <xQueueGenericSend+0x304>)
    3700:	4798      	blx	r3
    3702:	e7b3      	b.n	366c <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
    3704:	0020      	movs	r0, r4
    3706:	4b2d      	ldr	r3, [pc, #180]	; (37bc <xQueueGenericSend+0x318>)
    3708:	4798      	blx	r3
				( void ) xTaskResumeAll();
    370a:	4b2d      	ldr	r3, [pc, #180]	; (37c0 <xQueueGenericSend+0x31c>)
    370c:	4798      	blx	r3
    370e:	e7ad      	b.n	366c <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
    3710:	0020      	movs	r0, r4
    3712:	4b2a      	ldr	r3, [pc, #168]	; (37bc <xQueueGenericSend+0x318>)
    3714:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3716:	4b2a      	ldr	r3, [pc, #168]	; (37c0 <xQueueGenericSend+0x31c>)
    3718:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
    371a:	4b18      	ldr	r3, [pc, #96]	; (377c <xQueueGenericSend+0x2d8>)
    371c:	4798      	blx	r3
    371e:	4b18      	ldr	r3, [pc, #96]	; (3780 <xQueueGenericSend+0x2dc>)
    3720:	4798      	blx	r3
    3722:	4b18      	ldr	r3, [pc, #96]	; (3784 <xQueueGenericSend+0x2e0>)
    3724:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    3726:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    3728:	4202      	tst	r2, r0
    372a:	d100      	bne.n	372e <xQueueGenericSend+0x28a>
    372c:	e734      	b.n	3598 <xQueueGenericSend+0xf4>
    372e:	0020      	movs	r0, r4
    3730:	4b15      	ldr	r3, [pc, #84]	; (3788 <xQueueGenericSend+0x2e4>)
    3732:	4798      	blx	r3
    3734:	4b13      	ldr	r3, [pc, #76]	; (3784 <xQueueGenericSend+0x2e0>)
    3736:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    3738:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    373a:	4202      	tst	r2, r0
    373c:	d100      	bne.n	3740 <xQueueGenericSend+0x29c>
    373e:	e72b      	b.n	3598 <xQueueGenericSend+0xf4>
    3740:	264d      	movs	r6, #77	; 0x4d
    3742:	2d00      	cmp	r5, #0
    3744:	d106      	bne.n	3754 <xQueueGenericSend+0x2b0>
    3746:	0020      	movs	r0, r4
    3748:	4b10      	ldr	r3, [pc, #64]	; (378c <xQueueGenericSend+0x2e8>)
    374a:	4798      	blx	r3
    374c:	4b10      	ldr	r3, [pc, #64]	; (3790 <xQueueGenericSend+0x2ec>)
    374e:	5c1e      	ldrb	r6, [r3, r0]
    3750:	3648      	adds	r6, #72	; 0x48
    3752:	b2f6      	uxtb	r6, r6
    3754:	0020      	movs	r0, r4
    3756:	4b0d      	ldr	r3, [pc, #52]	; (378c <xQueueGenericSend+0x2e8>)
    3758:	4798      	blx	r3
    375a:	4b0d      	ldr	r3, [pc, #52]	; (3790 <xQueueGenericSend+0x2ec>)
    375c:	5c1d      	ldrb	r5, [r3, r0]
    375e:	0020      	movs	r0, r4
    3760:	4b0c      	ldr	r3, [pc, #48]	; (3794 <xQueueGenericSend+0x2f0>)
    3762:	4798      	blx	r3
    3764:	b2c2      	uxtb	r2, r0
    3766:	0029      	movs	r1, r5
    3768:	0030      	movs	r0, r6
    376a:	4b0b      	ldr	r3, [pc, #44]	; (3798 <xQueueGenericSend+0x2f4>)
    376c:	4798      	blx	r3
			return errQUEUE_FULL;
    376e:	2300      	movs	r3, #0
    3770:	e712      	b.n	3598 <xQueueGenericSend+0xf4>
    3772:	46c0      	nop			; (mov r8, r8)
    3774:	00004e15 	.word	0x00004e15
    3778:	00002ef1 	.word	0x00002ef1
    377c:	00001d45 	.word	0x00001d45
    3780:	00001c8d 	.word	0x00001c8d
    3784:	20000020 	.word	0x20000020
    3788:	00001cf1 	.word	0x00001cf1
    378c:	00001c71 	.word	0x00001c71
    3790:	20000018 	.word	0x20000018
    3794:	00001ce1 	.word	0x00001ce1
    3798:	0000297d 	.word	0x0000297d
    379c:	00002451 	.word	0x00002451
    37a0:	0000307d 	.word	0x0000307d
    37a4:	000030f9 	.word	0x000030f9
    37a8:	00002ee1 	.word	0x00002ee1
    37ac:	00002f09 	.word	0x00002f09
    37b0:	00004cad 	.word	0x00004cad
    37b4:	00004d79 	.word	0x00004d79
    37b8:	00004be5 	.word	0x00004be5
    37bc:	0000323d 	.word	0x0000323d
    37c0:	000047fd 	.word	0x000047fd
    37c4:	00004d61 	.word	0x00004d61
    37c8:	00004655 	.word	0x00004655

000037cc <xQueueCreateMutex>:
	{
    37cc:	b570      	push	{r4, r5, r6, lr}
    37ce:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    37d0:	2100      	movs	r1, #0
    37d2:	2001      	movs	r0, #1
    37d4:	4b06      	ldr	r3, [pc, #24]	; (37f0 <xQueueCreateMutex+0x24>)
    37d6:	4798      	blx	r3
    37d8:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    37da:	d007      	beq.n	37ec <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    37dc:	2300      	movs	r3, #0
    37de:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    37e0:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    37e2:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    37e4:	2200      	movs	r2, #0
    37e6:	2100      	movs	r1, #0
    37e8:	4d02      	ldr	r5, [pc, #8]	; (37f4 <xQueueCreateMutex+0x28>)
    37ea:	47a8      	blx	r5
	}
    37ec:	0020      	movs	r0, r4
    37ee:	bd70      	pop	{r4, r5, r6, pc}
    37f0:	00003369 	.word	0x00003369
    37f4:	000034a5 	.word	0x000034a5

000037f8 <xQueueGenericSendFromISR>:
{
    37f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37fa:	46de      	mov	lr, fp
    37fc:	4647      	mov	r7, r8
    37fe:	b580      	push	{r7, lr}
    3800:	b083      	sub	sp, #12
    3802:	0004      	movs	r4, r0
    3804:	9101      	str	r1, [sp, #4]
    3806:	0016      	movs	r6, r2
    3808:	001f      	movs	r7, r3
	configASSERT( pxQueue );
    380a:	2800      	cmp	r0, #0
    380c:	d02d      	beq.n	386a <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    380e:	9b01      	ldr	r3, [sp, #4]
    3810:	2b00      	cmp	r3, #0
    3812:	d02c      	beq.n	386e <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3814:	2f02      	cmp	r7, #2
    3816:	d02f      	beq.n	3878 <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3818:	4b59      	ldr	r3, [pc, #356]	; (3980 <xQueueGenericSendFromISR+0x188>)
    381a:	4798      	blx	r3
    381c:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    381e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3820:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3822:	429a      	cmp	r2, r3
    3824:	d85a      	bhi.n	38dc <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3826:	0020      	movs	r0, r4
    3828:	4b56      	ldr	r3, [pc, #344]	; (3984 <xQueueGenericSendFromISR+0x18c>)
    382a:	4798      	blx	r3
    382c:	4b56      	ldr	r3, [pc, #344]	; (3988 <xQueueGenericSendFromISR+0x190>)
    382e:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    3830:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3832:	4203      	tst	r3, r0
    3834:	d100      	bne.n	3838 <xQueueGenericSendFromISR+0x40>
    3836:	e09a      	b.n	396e <xQueueGenericSendFromISR+0x176>
    3838:	355d      	adds	r5, #93	; 0x5d
    383a:	2f00      	cmp	r7, #0
    383c:	d106      	bne.n	384c <xQueueGenericSendFromISR+0x54>
    383e:	0020      	movs	r0, r4
    3840:	4b52      	ldr	r3, [pc, #328]	; (398c <xQueueGenericSendFromISR+0x194>)
    3842:	4798      	blx	r3
    3844:	4b52      	ldr	r3, [pc, #328]	; (3990 <xQueueGenericSendFromISR+0x198>)
    3846:	5c1d      	ldrb	r5, [r3, r0]
    3848:	3558      	adds	r5, #88	; 0x58
    384a:	b2ed      	uxtb	r5, r5
    384c:	0020      	movs	r0, r4
    384e:	4b4f      	ldr	r3, [pc, #316]	; (398c <xQueueGenericSendFromISR+0x194>)
    3850:	4798      	blx	r3
    3852:	4b4f      	ldr	r3, [pc, #316]	; (3990 <xQueueGenericSendFromISR+0x198>)
    3854:	5c1f      	ldrb	r7, [r3, r0]
    3856:	0020      	movs	r0, r4
    3858:	4b4e      	ldr	r3, [pc, #312]	; (3994 <xQueueGenericSendFromISR+0x19c>)
    385a:	4798      	blx	r3
    385c:	b2c2      	uxtb	r2, r0
    385e:	0039      	movs	r1, r7
    3860:	0028      	movs	r0, r5
    3862:	4b4d      	ldr	r3, [pc, #308]	; (3998 <xQueueGenericSendFromISR+0x1a0>)
    3864:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    3866:	2500      	movs	r5, #0
    3868:	e081      	b.n	396e <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
    386a:	b672      	cpsid	i
    386c:	e7fe      	b.n	386c <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    386e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3870:	2b00      	cmp	r3, #0
    3872:	d0cf      	beq.n	3814 <xQueueGenericSendFromISR+0x1c>
    3874:	b672      	cpsid	i
    3876:	e7fe      	b.n	3876 <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    387a:	2b01      	cmp	r3, #1
    387c:	d027      	beq.n	38ce <xQueueGenericSendFromISR+0xd6>
    387e:	b672      	cpsid	i
    3880:	e7fe      	b.n	3880 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3882:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    3884:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3886:	2b00      	cmp	r3, #0
    3888:	d071      	beq.n	396e <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    388a:	0020      	movs	r0, r4
    388c:	3024      	adds	r0, #36	; 0x24
    388e:	4b43      	ldr	r3, [pc, #268]	; (399c <xQueueGenericSendFromISR+0x1a4>)
    3890:	4798      	blx	r3
    3892:	2800      	cmp	r0, #0
    3894:	d06b      	beq.n	396e <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
    3896:	2e00      	cmp	r6, #0
    3898:	d00a      	beq.n	38b0 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
    389a:	2301      	movs	r3, #1
    389c:	6033      	str	r3, [r6, #0]
    389e:	e066      	b.n	396e <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    38a0:	3501      	adds	r5, #1
    38a2:	b26d      	sxtb	r5, r5
    38a4:	2345      	movs	r3, #69	; 0x45
    38a6:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    38a8:	2501      	movs	r5, #1
    38aa:	e060      	b.n	396e <xQueueGenericSendFromISR+0x176>
    38ac:	2501      	movs	r5, #1
    38ae:	e05e      	b.n	396e <xQueueGenericSendFromISR+0x176>
    38b0:	2501      	movs	r5, #1
    38b2:	e05c      	b.n	396e <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
    38b4:	2345      	movs	r3, #69	; 0x45
    38b6:	5ce5      	ldrb	r5, [r4, r3]
    38b8:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    38ba:	0020      	movs	r0, r4
    38bc:	4b31      	ldr	r3, [pc, #196]	; (3984 <xQueueGenericSendFromISR+0x18c>)
    38be:	4798      	blx	r3
    38c0:	4b31      	ldr	r3, [pc, #196]	; (3988 <xQueueGenericSendFromISR+0x190>)
    38c2:	881b      	ldrh	r3, [r3, #0]
    38c4:	4203      	tst	r3, r0
    38c6:	d02d      	beq.n	3924 <xQueueGenericSendFromISR+0x12c>
    38c8:	2335      	movs	r3, #53	; 0x35
    38ca:	4698      	mov	r8, r3
    38cc:	e01c      	b.n	3908 <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    38ce:	4b2c      	ldr	r3, [pc, #176]	; (3980 <xQueueGenericSendFromISR+0x188>)
    38d0:	4798      	blx	r3
    38d2:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    38d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    38d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    38d8:	429a      	cmp	r2, r3
    38da:	d9eb      	bls.n	38b4 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
    38dc:	2345      	movs	r3, #69	; 0x45
    38de:	5ce5      	ldrb	r5, [r4, r3]
    38e0:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    38e2:	0020      	movs	r0, r4
    38e4:	4b27      	ldr	r3, [pc, #156]	; (3984 <xQueueGenericSendFromISR+0x18c>)
    38e6:	4798      	blx	r3
    38e8:	4b27      	ldr	r3, [pc, #156]	; (3988 <xQueueGenericSendFromISR+0x190>)
    38ea:	881b      	ldrh	r3, [r3, #0]
    38ec:	4203      	tst	r3, r0
    38ee:	d019      	beq.n	3924 <xQueueGenericSendFromISR+0x12c>
    38f0:	2335      	movs	r3, #53	; 0x35
    38f2:	4698      	mov	r8, r3
    38f4:	2f00      	cmp	r7, #0
    38f6:	d107      	bne.n	3908 <xQueueGenericSendFromISR+0x110>
    38f8:	0020      	movs	r0, r4
    38fa:	4b24      	ldr	r3, [pc, #144]	; (398c <xQueueGenericSendFromISR+0x194>)
    38fc:	4798      	blx	r3
    38fe:	4b24      	ldr	r3, [pc, #144]	; (3990 <xQueueGenericSendFromISR+0x198>)
    3900:	5c1b      	ldrb	r3, [r3, r0]
    3902:	3330      	adds	r3, #48	; 0x30
    3904:	b2db      	uxtb	r3, r3
    3906:	4698      	mov	r8, r3
    3908:	0020      	movs	r0, r4
    390a:	4b20      	ldr	r3, [pc, #128]	; (398c <xQueueGenericSendFromISR+0x194>)
    390c:	4798      	blx	r3
    390e:	4b20      	ldr	r3, [pc, #128]	; (3990 <xQueueGenericSendFromISR+0x198>)
    3910:	5c1b      	ldrb	r3, [r3, r0]
    3912:	469b      	mov	fp, r3
    3914:	0020      	movs	r0, r4
    3916:	4b1f      	ldr	r3, [pc, #124]	; (3994 <xQueueGenericSendFromISR+0x19c>)
    3918:	4798      	blx	r3
    391a:	b2c2      	uxtb	r2, r0
    391c:	4659      	mov	r1, fp
    391e:	4640      	mov	r0, r8
    3920:	4b1d      	ldr	r3, [pc, #116]	; (3998 <xQueueGenericSendFromISR+0x1a0>)
    3922:	4798      	blx	r3
    3924:	0020      	movs	r0, r4
    3926:	4b19      	ldr	r3, [pc, #100]	; (398c <xQueueGenericSendFromISR+0x194>)
    3928:	4798      	blx	r3
    392a:	4b19      	ldr	r3, [pc, #100]	; (3990 <xQueueGenericSendFromISR+0x198>)
    392c:	5c1b      	ldrb	r3, [r3, r0]
    392e:	4698      	mov	r8, r3
    3930:	0020      	movs	r0, r4
    3932:	4b18      	ldr	r3, [pc, #96]	; (3994 <xQueueGenericSendFromISR+0x19c>)
    3934:	4798      	blx	r3
    3936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3938:	3201      	adds	r2, #1
    393a:	b2d2      	uxtb	r2, r2
    393c:	b2c1      	uxtb	r1, r0
    393e:	4640      	mov	r0, r8
    3940:	4b17      	ldr	r3, [pc, #92]	; (39a0 <xQueueGenericSendFromISR+0x1a8>)
    3942:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3944:	003a      	movs	r2, r7
    3946:	9901      	ldr	r1, [sp, #4]
    3948:	0020      	movs	r0, r4
    394a:	4b16      	ldr	r3, [pc, #88]	; (39a4 <xQueueGenericSendFromISR+0x1ac>)
    394c:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    394e:	1c6b      	adds	r3, r5, #1
    3950:	d1a6      	bne.n	38a0 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
    3952:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3954:	2b00      	cmp	r3, #0
    3956:	d094      	beq.n	3882 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3958:	0039      	movs	r1, r7
    395a:	0020      	movs	r0, r4
    395c:	4b12      	ldr	r3, [pc, #72]	; (39a8 <xQueueGenericSendFromISR+0x1b0>)
    395e:	4798      	blx	r3
			xReturn = pdPASS;
    3960:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3962:	2800      	cmp	r0, #0
    3964:	d003      	beq.n	396e <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
    3966:	2e00      	cmp	r6, #0
    3968:	d0a0      	beq.n	38ac <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
    396a:	2301      	movs	r3, #1
    396c:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    396e:	9800      	ldr	r0, [sp, #0]
    3970:	4b0e      	ldr	r3, [pc, #56]	; (39ac <xQueueGenericSendFromISR+0x1b4>)
    3972:	4798      	blx	r3
}
    3974:	0028      	movs	r0, r5
    3976:	b003      	add	sp, #12
    3978:	bc0c      	pop	{r2, r3}
    397a:	4690      	mov	r8, r2
    397c:	469b      	mov	fp, r3
    397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3980:	00002f29 	.word	0x00002f29
    3984:	00001cf1 	.word	0x00001cf1
    3988:	20000020 	.word	0x20000020
    398c:	00001c71 	.word	0x00001c71
    3990:	20000018 	.word	0x20000018
    3994:	00001ce1 	.word	0x00001ce1
    3998:	0000297d 	.word	0x0000297d
    399c:	00004cad 	.word	0x00004cad
    39a0:	00002451 	.word	0x00002451
    39a4:	0000307d 	.word	0x0000307d
    39a8:	000030f9 	.word	0x000030f9
    39ac:	00002f31 	.word	0x00002f31

000039b0 <MyWrapper>:
{
    39b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39b2:	46d6      	mov	lr, sl
    39b4:	4647      	mov	r7, r8
    39b6:	b580      	push	{r7, lr}
    39b8:	b083      	sub	sp, #12
    39ba:	0004      	movs	r4, r0
    39bc:	000f      	movs	r7, r1
    39be:	0016      	movs	r6, r2
	configASSERT( pxQueue );
    39c0:	2800      	cmp	r0, #0
    39c2:	d004      	beq.n	39ce <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
    39c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    39c6:	2b00      	cmp	r3, #0
    39c8:	d003      	beq.n	39d2 <MyWrapper+0x22>
    39ca:	b672      	cpsid	i
    39cc:	e7fe      	b.n	39cc <MyWrapper+0x1c>
	configASSERT( pxQueue );
    39ce:	b672      	cpsid	i
    39d0:	e7fe      	b.n	39d0 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    39d2:	6803      	ldr	r3, [r0, #0]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d055      	beq.n	3a84 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    39d8:	4b4a      	ldr	r3, [pc, #296]	; (3b04 <MyWrapper+0x154>)
    39da:	4798      	blx	r3
    39dc:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    39de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    39e0:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
    39e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    39e4:	4598      	cmp	r8, r3
    39e6:	d267      	bcs.n	3ab8 <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
    39e8:	2345      	movs	r3, #69	; 0x45
    39ea:	5ce5      	ldrb	r5, [r4, r3]
    39ec:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    39ee:	0020      	movs	r0, r4
    39f0:	4b45      	ldr	r3, [pc, #276]	; (3b08 <MyWrapper+0x158>)
    39f2:	4798      	blx	r3
    39f4:	4b45      	ldr	r3, [pc, #276]	; (3b0c <MyWrapper+0x15c>)
    39f6:	881b      	ldrh	r3, [r3, #0]
    39f8:	4203      	tst	r3, r0
    39fa:	d018      	beq.n	3a2e <MyWrapper+0x7e>
    39fc:	2335      	movs	r3, #53	; 0x35
    39fe:	469a      	mov	sl, r3
    3a00:	2e00      	cmp	r6, #0
    3a02:	d107      	bne.n	3a14 <MyWrapper+0x64>
    3a04:	0020      	movs	r0, r4
    3a06:	4b42      	ldr	r3, [pc, #264]	; (3b10 <MyWrapper+0x160>)
    3a08:	4798      	blx	r3
    3a0a:	4b42      	ldr	r3, [pc, #264]	; (3b14 <MyWrapper+0x164>)
    3a0c:	5c1b      	ldrb	r3, [r3, r0]
    3a0e:	3330      	adds	r3, #48	; 0x30
    3a10:	b2db      	uxtb	r3, r3
    3a12:	469a      	mov	sl, r3
    3a14:	0020      	movs	r0, r4
    3a16:	4b3e      	ldr	r3, [pc, #248]	; (3b10 <MyWrapper+0x160>)
    3a18:	4798      	blx	r3
    3a1a:	4b3e      	ldr	r3, [pc, #248]	; (3b14 <MyWrapper+0x164>)
    3a1c:	5c1e      	ldrb	r6, [r3, r0]
    3a1e:	0020      	movs	r0, r4
    3a20:	4b3d      	ldr	r3, [pc, #244]	; (3b18 <MyWrapper+0x168>)
    3a22:	4798      	blx	r3
    3a24:	b2c2      	uxtb	r2, r0
    3a26:	0031      	movs	r1, r6
    3a28:	4650      	mov	r0, sl
    3a2a:	4b3c      	ldr	r3, [pc, #240]	; (3b1c <MyWrapper+0x16c>)
    3a2c:	4798      	blx	r3
    3a2e:	0020      	movs	r0, r4
    3a30:	4b37      	ldr	r3, [pc, #220]	; (3b10 <MyWrapper+0x160>)
    3a32:	4798      	blx	r3
    3a34:	4b37      	ldr	r3, [pc, #220]	; (3b14 <MyWrapper+0x164>)
    3a36:	5c1e      	ldrb	r6, [r3, r0]
    3a38:	0020      	movs	r0, r4
    3a3a:	4b37      	ldr	r3, [pc, #220]	; (3b18 <MyWrapper+0x168>)
    3a3c:	4798      	blx	r3
    3a3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3a40:	3201      	adds	r2, #1
    3a42:	b2d2      	uxtb	r2, r2
    3a44:	b2c1      	uxtb	r1, r0
    3a46:	0030      	movs	r0, r6
    3a48:	4b35      	ldr	r3, [pc, #212]	; (3b20 <MyWrapper+0x170>)
    3a4a:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3a4c:	4643      	mov	r3, r8
    3a4e:	3301      	adds	r3, #1
    3a50:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
    3a52:	1c6b      	adds	r3, r5, #1
    3a54:	d12a      	bne.n	3aac <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
    3a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3a58:	2b00      	cmp	r3, #0
    3a5a:	d018      	beq.n	3a8e <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    3a5c:	2100      	movs	r1, #0
    3a5e:	0020      	movs	r0, r4
    3a60:	4b30      	ldr	r3, [pc, #192]	; (3b24 <MyWrapper+0x174>)
    3a62:	4798      	blx	r3
			xReturn = pdPASS;
    3a64:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    3a66:	2800      	cmp	r0, #0
    3a68:	d003      	beq.n	3a72 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
    3a6a:	2f00      	cmp	r7, #0
    3a6c:	d045      	beq.n	3afa <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3a6e:	2301      	movs	r3, #1
    3a70:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3a72:	9801      	ldr	r0, [sp, #4]
    3a74:	4b2c      	ldr	r3, [pc, #176]	; (3b28 <MyWrapper+0x178>)
    3a76:	4798      	blx	r3
}
    3a78:	0028      	movs	r0, r5
    3a7a:	b003      	add	sp, #12
    3a7c:	bc0c      	pop	{r2, r3}
    3a7e:	4690      	mov	r8, r2
    3a80:	469a      	mov	sl, r3
    3a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    3a84:	6843      	ldr	r3, [r0, #4]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d0a6      	beq.n	39d8 <MyWrapper+0x28>
    3a8a:	b672      	cpsid	i
    3a8c:	e7fe      	b.n	3a8c <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    3a90:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3a92:	2b00      	cmp	r3, #0
    3a94:	d0ed      	beq.n	3a72 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3a96:	0020      	movs	r0, r4
    3a98:	3024      	adds	r0, #36	; 0x24
    3a9a:	4b24      	ldr	r3, [pc, #144]	; (3b2c <MyWrapper+0x17c>)
    3a9c:	4798      	blx	r3
    3a9e:	2800      	cmp	r0, #0
    3aa0:	d0e7      	beq.n	3a72 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
    3aa2:	2f00      	cmp	r7, #0
    3aa4:	d02b      	beq.n	3afe <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
    3aa6:	2301      	movs	r3, #1
    3aa8:	603b      	str	r3, [r7, #0]
    3aaa:	e7e2      	b.n	3a72 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    3aac:	3501      	adds	r5, #1
    3aae:	b26d      	sxtb	r5, r5
    3ab0:	2345      	movs	r3, #69	; 0x45
    3ab2:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    3ab4:	2501      	movs	r5, #1
    3ab6:	e7dc      	b.n	3a72 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3ab8:	0020      	movs	r0, r4
    3aba:	4b13      	ldr	r3, [pc, #76]	; (3b08 <MyWrapper+0x158>)
    3abc:	4798      	blx	r3
    3abe:	4b13      	ldr	r3, [pc, #76]	; (3b0c <MyWrapper+0x15c>)
    3ac0:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    3ac2:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3ac4:	4203      	tst	r3, r0
    3ac6:	d0d4      	beq.n	3a72 <MyWrapper+0xc2>
    3ac8:	355d      	adds	r5, #93	; 0x5d
    3aca:	2e00      	cmp	r6, #0
    3acc:	d106      	bne.n	3adc <MyWrapper+0x12c>
    3ace:	0020      	movs	r0, r4
    3ad0:	4b0f      	ldr	r3, [pc, #60]	; (3b10 <MyWrapper+0x160>)
    3ad2:	4798      	blx	r3
    3ad4:	4b0f      	ldr	r3, [pc, #60]	; (3b14 <MyWrapper+0x164>)
    3ad6:	5c1d      	ldrb	r5, [r3, r0]
    3ad8:	3558      	adds	r5, #88	; 0x58
    3ada:	b2ed      	uxtb	r5, r5
    3adc:	0020      	movs	r0, r4
    3ade:	4b0c      	ldr	r3, [pc, #48]	; (3b10 <MyWrapper+0x160>)
    3ae0:	4798      	blx	r3
    3ae2:	4b0c      	ldr	r3, [pc, #48]	; (3b14 <MyWrapper+0x164>)
    3ae4:	5c1f      	ldrb	r7, [r3, r0]
    3ae6:	0020      	movs	r0, r4
    3ae8:	4b0b      	ldr	r3, [pc, #44]	; (3b18 <MyWrapper+0x168>)
    3aea:	4798      	blx	r3
    3aec:	b2c2      	uxtb	r2, r0
    3aee:	0039      	movs	r1, r7
    3af0:	0028      	movs	r0, r5
    3af2:	4b0a      	ldr	r3, [pc, #40]	; (3b1c <MyWrapper+0x16c>)
    3af4:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    3af6:	2500      	movs	r5, #0
    3af8:	e7bb      	b.n	3a72 <MyWrapper+0xc2>
			xReturn = pdPASS;
    3afa:	2501      	movs	r5, #1
    3afc:	e7b9      	b.n	3a72 <MyWrapper+0xc2>
    3afe:	2501      	movs	r5, #1
    3b00:	e7b7      	b.n	3a72 <MyWrapper+0xc2>
    3b02:	46c0      	nop			; (mov r8, r8)
    3b04:	00002f29 	.word	0x00002f29
    3b08:	00001cf1 	.word	0x00001cf1
    3b0c:	20000020 	.word	0x20000020
    3b10:	00001c71 	.word	0x00001c71
    3b14:	20000018 	.word	0x20000018
    3b18:	00001ce1 	.word	0x00001ce1
    3b1c:	0000297d 	.word	0x0000297d
    3b20:	00002451 	.word	0x00002451
    3b24:	000030f9 	.word	0x000030f9
    3b28:	00002f31 	.word	0x00002f31
    3b2c:	00004cad 	.word	0x00004cad

00003b30 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    3b30:	b510      	push	{r4, lr}
    3b32:	2200      	movs	r2, #0
    3b34:	4b01      	ldr	r3, [pc, #4]	; (3b3c <xQueueGiveFromISR+0xc>)
    3b36:	4798      	blx	r3
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	000039b1 	.word	0x000039b1

00003b40 <xQueueReceive>:
{
    3b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b42:	46ce      	mov	lr, r9
    3b44:	4647      	mov	r7, r8
    3b46:	b580      	push	{r7, lr}
    3b48:	b085      	sub	sp, #20
    3b4a:	1e04      	subs	r4, r0, #0
    3b4c:	9100      	str	r1, [sp, #0]
    3b4e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    3b50:	d00b      	beq.n	3b6a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3b52:	9b00      	ldr	r3, [sp, #0]
    3b54:	2b00      	cmp	r3, #0
    3b56:	d00a      	beq.n	3b6e <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3b58:	4ba4      	ldr	r3, [pc, #656]	; (3dec <xQueueReceive+0x2ac>)
    3b5a:	4798      	blx	r3
    3b5c:	2800      	cmp	r0, #0
    3b5e:	d10b      	bne.n	3b78 <xQueueReceive+0x38>
    3b60:	9b01      	ldr	r3, [sp, #4]
    3b62:	2b00      	cmp	r3, #0
    3b64:	d00c      	beq.n	3b80 <xQueueReceive+0x40>
    3b66:	b672      	cpsid	i
    3b68:	e7fe      	b.n	3b68 <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
    3b6a:	b672      	cpsid	i
    3b6c:	e7fe      	b.n	3b6c <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3b6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3b70:	2b00      	cmp	r3, #0
    3b72:	d0f1      	beq.n	3b58 <xQueueReceive+0x18>
    3b74:	b672      	cpsid	i
    3b76:	e7fe      	b.n	3b76 <xQueueReceive+0x36>
    3b78:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    3b7a:	4b9d      	ldr	r3, [pc, #628]	; (3df0 <xQueueReceive+0x2b0>)
    3b7c:	4698      	mov	r8, r3
    3b7e:	e0b4      	b.n	3cea <xQueueReceive+0x1aa>
    3b80:	2500      	movs	r5, #0
    3b82:	e7fa      	b.n	3b7a <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3b84:	9900      	ldr	r1, [sp, #0]
    3b86:	0020      	movs	r0, r4
    3b88:	4b9a      	ldr	r3, [pc, #616]	; (3df4 <xQueueReceive+0x2b4>)
    3b8a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    3b8c:	4b9a      	ldr	r3, [pc, #616]	; (3df8 <xQueueReceive+0x2b8>)
    3b8e:	4798      	blx	r3
    3b90:	4b9a      	ldr	r3, [pc, #616]	; (3dfc <xQueueReceive+0x2bc>)
    3b92:	4798      	blx	r3
    3b94:	4b9a      	ldr	r3, [pc, #616]	; (3e00 <xQueueReceive+0x2c0>)
    3b96:	881b      	ldrh	r3, [r3, #0]
    3b98:	4203      	tst	r3, r0
    3b9a:	d019      	beq.n	3bd0 <xQueueReceive+0x90>
    3b9c:	0020      	movs	r0, r4
    3b9e:	4b99      	ldr	r3, [pc, #612]	; (3e04 <xQueueReceive+0x2c4>)
    3ba0:	4798      	blx	r3
    3ba2:	4b97      	ldr	r3, [pc, #604]	; (3e00 <xQueueReceive+0x2c0>)
    3ba4:	881b      	ldrh	r3, [r3, #0]
    3ba6:	4203      	tst	r3, r0
    3ba8:	d012      	beq.n	3bd0 <xQueueReceive+0x90>
    3baa:	0020      	movs	r0, r4
    3bac:	4b96      	ldr	r3, [pc, #600]	; (3e08 <xQueueReceive+0x2c8>)
    3bae:	4698      	mov	r8, r3
    3bb0:	4798      	blx	r3
    3bb2:	4f96      	ldr	r7, [pc, #600]	; (3e0c <xQueueReceive+0x2cc>)
    3bb4:	5c3d      	ldrb	r5, [r7, r0]
    3bb6:	3528      	adds	r5, #40	; 0x28
    3bb8:	b2ed      	uxtb	r5, r5
    3bba:	0020      	movs	r0, r4
    3bbc:	47c0      	blx	r8
    3bbe:	5c3f      	ldrb	r7, [r7, r0]
    3bc0:	0020      	movs	r0, r4
    3bc2:	4b93      	ldr	r3, [pc, #588]	; (3e10 <xQueueReceive+0x2d0>)
    3bc4:	4798      	blx	r3
    3bc6:	b2c2      	uxtb	r2, r0
    3bc8:	0039      	movs	r1, r7
    3bca:	0028      	movs	r0, r5
    3bcc:	4b91      	ldr	r3, [pc, #580]	; (3e14 <xQueueReceive+0x2d4>)
    3bce:	4798      	blx	r3
    3bd0:	0020      	movs	r0, r4
    3bd2:	4f8d      	ldr	r7, [pc, #564]	; (3e08 <xQueueReceive+0x2c8>)
    3bd4:	47b8      	blx	r7
    3bd6:	4d8d      	ldr	r5, [pc, #564]	; (3e0c <xQueueReceive+0x2cc>)
    3bd8:	5c2b      	ldrb	r3, [r5, r0]
    3bda:	4699      	mov	r9, r3
    3bdc:	0020      	movs	r0, r4
    3bde:	4b8c      	ldr	r3, [pc, #560]	; (3e10 <xQueueReceive+0x2d0>)
    3be0:	4798      	blx	r3
    3be2:	b2c3      	uxtb	r3, r0
    3be4:	4698      	mov	r8, r3
    3be6:	0020      	movs	r0, r4
    3be8:	47b8      	blx	r7
    3bea:	5c2b      	ldrb	r3, [r5, r0]
    3bec:	2b02      	cmp	r3, #2
    3bee:	d11e      	bne.n	3c2e <xQueueReceive+0xee>
    3bf0:	4b81      	ldr	r3, [pc, #516]	; (3df8 <xQueueReceive+0x2b8>)
    3bf2:	4798      	blx	r3
    3bf4:	4b88      	ldr	r3, [pc, #544]	; (3e18 <xQueueReceive+0x2d8>)
    3bf6:	4798      	blx	r3
    3bf8:	b2c2      	uxtb	r2, r0
    3bfa:	4641      	mov	r1, r8
    3bfc:	4648      	mov	r0, r9
    3bfe:	4b87      	ldr	r3, [pc, #540]	; (3e1c <xQueueReceive+0x2dc>)
    3c00:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    3c02:	3e01      	subs	r6, #1
    3c04:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3c06:	6923      	ldr	r3, [r4, #16]
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d007      	beq.n	3c1c <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3c0c:	0020      	movs	r0, r4
    3c0e:	3010      	adds	r0, #16
    3c10:	4b83      	ldr	r3, [pc, #524]	; (3e20 <xQueueReceive+0x2e0>)
    3c12:	4798      	blx	r3
    3c14:	2800      	cmp	r0, #0
    3c16:	d001      	beq.n	3c1c <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    3c18:	4b82      	ldr	r3, [pc, #520]	; (3e24 <xQueueReceive+0x2e4>)
    3c1a:	4798      	blx	r3
				taskEXIT_CRITICAL();
    3c1c:	4b82      	ldr	r3, [pc, #520]	; (3e28 <xQueueReceive+0x2e8>)
    3c1e:	4798      	blx	r3
				return pdPASS;
    3c20:	2301      	movs	r3, #1
}
    3c22:	0018      	movs	r0, r3
    3c24:	b005      	add	sp, #20
    3c26:	bc0c      	pop	{r2, r3}
    3c28:	4690      	mov	r8, r2
    3c2a:	4699      	mov	r9, r3
    3c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    3c2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3c30:	3a01      	subs	r2, #1
    3c32:	b2d2      	uxtb	r2, r2
    3c34:	e7e1      	b.n	3bfa <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
    3c36:	4b7c      	ldr	r3, [pc, #496]	; (3e28 <xQueueReceive+0x2e8>)
    3c38:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3c3a:	4b6f      	ldr	r3, [pc, #444]	; (3df8 <xQueueReceive+0x2b8>)
    3c3c:	4798      	blx	r3
    3c3e:	4b6f      	ldr	r3, [pc, #444]	; (3dfc <xQueueReceive+0x2bc>)
    3c40:	4798      	blx	r3
    3c42:	4b6f      	ldr	r3, [pc, #444]	; (3e00 <xQueueReceive+0x2c0>)
    3c44:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    3c46:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3c48:	4202      	tst	r2, r0
    3c4a:	d0ea      	beq.n	3c22 <xQueueReceive+0xe2>
    3c4c:	0020      	movs	r0, r4
    3c4e:	4b6d      	ldr	r3, [pc, #436]	; (3e04 <xQueueReceive+0x2c4>)
    3c50:	4798      	blx	r3
    3c52:	4b6b      	ldr	r3, [pc, #428]	; (3e00 <xQueueReceive+0x2c0>)
    3c54:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    3c56:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3c58:	4202      	tst	r2, r0
    3c5a:	d0e2      	beq.n	3c22 <xQueueReceive+0xe2>
    3c5c:	0020      	movs	r0, r4
    3c5e:	4f6a      	ldr	r7, [pc, #424]	; (3e08 <xQueueReceive+0x2c8>)
    3c60:	47b8      	blx	r7
    3c62:	4e6a      	ldr	r6, [pc, #424]	; (3e0c <xQueueReceive+0x2cc>)
    3c64:	5c35      	ldrb	r5, [r6, r0]
    3c66:	3550      	adds	r5, #80	; 0x50
    3c68:	b2ed      	uxtb	r5, r5
    3c6a:	0020      	movs	r0, r4
    3c6c:	47b8      	blx	r7
    3c6e:	5c36      	ldrb	r6, [r6, r0]
    3c70:	0020      	movs	r0, r4
    3c72:	4b67      	ldr	r3, [pc, #412]	; (3e10 <xQueueReceive+0x2d0>)
    3c74:	4798      	blx	r3
    3c76:	b2c2      	uxtb	r2, r0
    3c78:	0031      	movs	r1, r6
    3c7a:	0028      	movs	r0, r5
    3c7c:	4b65      	ldr	r3, [pc, #404]	; (3e14 <xQueueReceive+0x2d4>)
    3c7e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    3c80:	2300      	movs	r3, #0
    3c82:	e7ce      	b.n	3c22 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    3c84:	a802      	add	r0, sp, #8
    3c86:	4b69      	ldr	r3, [pc, #420]	; (3e2c <xQueueReceive+0x2ec>)
    3c88:	4798      	blx	r3
    3c8a:	e038      	b.n	3cfe <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
    3c8c:	2200      	movs	r2, #0
    3c8e:	2344      	movs	r3, #68	; 0x44
    3c90:	54e2      	strb	r2, [r4, r3]
    3c92:	e03f      	b.n	3d14 <xQueueReceive+0x1d4>
    3c94:	2200      	movs	r2, #0
    3c96:	2345      	movs	r3, #69	; 0x45
    3c98:	54e2      	strb	r2, [r4, r3]
    3c9a:	e040      	b.n	3d1e <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    3c9c:	0020      	movs	r0, r4
    3c9e:	4b59      	ldr	r3, [pc, #356]	; (3e04 <xQueueReceive+0x2c4>)
    3ca0:	4798      	blx	r3
    3ca2:	4b57      	ldr	r3, [pc, #348]	; (3e00 <xQueueReceive+0x2c0>)
    3ca4:	881b      	ldrh	r3, [r3, #0]
    3ca6:	4203      	tst	r3, r0
    3ca8:	d04e      	beq.n	3d48 <xQueueReceive+0x208>
    3caa:	0020      	movs	r0, r4
    3cac:	4f56      	ldr	r7, [pc, #344]	; (3e08 <xQueueReceive+0x2c8>)
    3cae:	47b8      	blx	r7
    3cb0:	4e56      	ldr	r6, [pc, #344]	; (3e0c <xQueueReceive+0x2cc>)
    3cb2:	5c35      	ldrb	r5, [r6, r0]
    3cb4:	3568      	adds	r5, #104	; 0x68
    3cb6:	b2ed      	uxtb	r5, r5
    3cb8:	0020      	movs	r0, r4
    3cba:	47b8      	blx	r7
    3cbc:	5c36      	ldrb	r6, [r6, r0]
    3cbe:	0020      	movs	r0, r4
    3cc0:	4b53      	ldr	r3, [pc, #332]	; (3e10 <xQueueReceive+0x2d0>)
    3cc2:	4798      	blx	r3
    3cc4:	b2c2      	uxtb	r2, r0
    3cc6:	0031      	movs	r1, r6
    3cc8:	0028      	movs	r0, r5
    3cca:	4b52      	ldr	r3, [pc, #328]	; (3e14 <xQueueReceive+0x2d4>)
    3ccc:	4798      	blx	r3
    3cce:	e03b      	b.n	3d48 <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3cd0:	0020      	movs	r0, r4
    3cd2:	3024      	adds	r0, #36	; 0x24
    3cd4:	9901      	ldr	r1, [sp, #4]
    3cd6:	4b56      	ldr	r3, [pc, #344]	; (3e30 <xQueueReceive+0x2f0>)
    3cd8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3cda:	0020      	movs	r0, r4
    3cdc:	4b55      	ldr	r3, [pc, #340]	; (3e34 <xQueueReceive+0x2f4>)
    3cde:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    3ce0:	4b55      	ldr	r3, [pc, #340]	; (3e38 <xQueueReceive+0x2f8>)
    3ce2:	4798      	blx	r3
    3ce4:	2800      	cmp	r0, #0
    3ce6:	d046      	beq.n	3d76 <xQueueReceive+0x236>
    3ce8:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    3cea:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3cec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    3cee:	2e00      	cmp	r6, #0
    3cf0:	d000      	beq.n	3cf4 <xQueueReceive+0x1b4>
    3cf2:	e747      	b.n	3b84 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
    3cf4:	9b01      	ldr	r3, [sp, #4]
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d09d      	beq.n	3c36 <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    3cfa:	2d00      	cmp	r5, #0
    3cfc:	d0c2      	beq.n	3c84 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
    3cfe:	4b4a      	ldr	r3, [pc, #296]	; (3e28 <xQueueReceive+0x2e8>)
    3d00:	4798      	blx	r3
		vTaskSuspendAll();
    3d02:	4b4e      	ldr	r3, [pc, #312]	; (3e3c <xQueueReceive+0x2fc>)
    3d04:	4798      	blx	r3
		prvLockQueue( pxQueue );
    3d06:	4b3a      	ldr	r3, [pc, #232]	; (3df0 <xQueueReceive+0x2b0>)
    3d08:	4798      	blx	r3
    3d0a:	2344      	movs	r3, #68	; 0x44
    3d0c:	5ce3      	ldrb	r3, [r4, r3]
    3d0e:	b25b      	sxtb	r3, r3
    3d10:	3301      	adds	r3, #1
    3d12:	d0bb      	beq.n	3c8c <xQueueReceive+0x14c>
    3d14:	2345      	movs	r3, #69	; 0x45
    3d16:	5ce3      	ldrb	r3, [r4, r3]
    3d18:	b25b      	sxtb	r3, r3
    3d1a:	3301      	adds	r3, #1
    3d1c:	d0ba      	beq.n	3c94 <xQueueReceive+0x154>
    3d1e:	4b42      	ldr	r3, [pc, #264]	; (3e28 <xQueueReceive+0x2e8>)
    3d20:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3d22:	a901      	add	r1, sp, #4
    3d24:	a802      	add	r0, sp, #8
    3d26:	4b46      	ldr	r3, [pc, #280]	; (3e40 <xQueueReceive+0x300>)
    3d28:	4798      	blx	r3
    3d2a:	2800      	cmp	r0, #0
    3d2c:	d12c      	bne.n	3d88 <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3d2e:	0020      	movs	r0, r4
    3d30:	4b44      	ldr	r3, [pc, #272]	; (3e44 <xQueueReceive+0x304>)
    3d32:	4798      	blx	r3
    3d34:	2800      	cmp	r0, #0
    3d36:	d021      	beq.n	3d7c <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    3d38:	4b2f      	ldr	r3, [pc, #188]	; (3df8 <xQueueReceive+0x2b8>)
    3d3a:	4798      	blx	r3
    3d3c:	4b2f      	ldr	r3, [pc, #188]	; (3dfc <xQueueReceive+0x2bc>)
    3d3e:	4798      	blx	r3
    3d40:	4b2f      	ldr	r3, [pc, #188]	; (3e00 <xQueueReceive+0x2c0>)
    3d42:	881b      	ldrh	r3, [r3, #0]
    3d44:	4203      	tst	r3, r0
    3d46:	d1a9      	bne.n	3c9c <xQueueReceive+0x15c>
    3d48:	0020      	movs	r0, r4
    3d4a:	4b2f      	ldr	r3, [pc, #188]	; (3e08 <xQueueReceive+0x2c8>)
    3d4c:	4798      	blx	r3
    3d4e:	4b2f      	ldr	r3, [pc, #188]	; (3e0c <xQueueReceive+0x2cc>)
    3d50:	5c1b      	ldrb	r3, [r3, r0]
    3d52:	2b02      	cmp	r3, #2
    3d54:	d0bc      	beq.n	3cd0 <xQueueReceive+0x190>
    3d56:	4b28      	ldr	r3, [pc, #160]	; (3df8 <xQueueReceive+0x2b8>)
    3d58:	4798      	blx	r3
    3d5a:	4b28      	ldr	r3, [pc, #160]	; (3dfc <xQueueReceive+0x2bc>)
    3d5c:	4798      	blx	r3
    3d5e:	4b28      	ldr	r3, [pc, #160]	; (3e00 <xQueueReceive+0x2c0>)
    3d60:	881b      	ldrh	r3, [r3, #0]
    3d62:	4203      	tst	r3, r0
    3d64:	d0b4      	beq.n	3cd0 <xQueueReceive+0x190>
    3d66:	4b24      	ldr	r3, [pc, #144]	; (3df8 <xQueueReceive+0x2b8>)
    3d68:	4798      	blx	r3
    3d6a:	4b2b      	ldr	r3, [pc, #172]	; (3e18 <xQueueReceive+0x2d8>)
    3d6c:	4798      	blx	r3
    3d6e:	b2c0      	uxtb	r0, r0
    3d70:	4b35      	ldr	r3, [pc, #212]	; (3e48 <xQueueReceive+0x308>)
    3d72:	4798      	blx	r3
    3d74:	e7ac      	b.n	3cd0 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
    3d76:	4b2b      	ldr	r3, [pc, #172]	; (3e24 <xQueueReceive+0x2e4>)
    3d78:	4798      	blx	r3
    3d7a:	e7b5      	b.n	3ce8 <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
    3d7c:	0020      	movs	r0, r4
    3d7e:	4b2d      	ldr	r3, [pc, #180]	; (3e34 <xQueueReceive+0x2f4>)
    3d80:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3d82:	4b2d      	ldr	r3, [pc, #180]	; (3e38 <xQueueReceive+0x2f8>)
    3d84:	4798      	blx	r3
    3d86:	e7af      	b.n	3ce8 <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
    3d88:	0020      	movs	r0, r4
    3d8a:	4b2a      	ldr	r3, [pc, #168]	; (3e34 <xQueueReceive+0x2f4>)
    3d8c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3d8e:	4b2a      	ldr	r3, [pc, #168]	; (3e38 <xQueueReceive+0x2f8>)
    3d90:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3d92:	0020      	movs	r0, r4
    3d94:	4b2b      	ldr	r3, [pc, #172]	; (3e44 <xQueueReceive+0x304>)
    3d96:	4798      	blx	r3
    3d98:	2800      	cmp	r0, #0
    3d9a:	d0a5      	beq.n	3ce8 <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    3d9c:	4b16      	ldr	r3, [pc, #88]	; (3df8 <xQueueReceive+0x2b8>)
    3d9e:	4798      	blx	r3
    3da0:	4b16      	ldr	r3, [pc, #88]	; (3dfc <xQueueReceive+0x2bc>)
    3da2:	4798      	blx	r3
    3da4:	4b16      	ldr	r3, [pc, #88]	; (3e00 <xQueueReceive+0x2c0>)
    3da6:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    3da8:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    3daa:	4202      	tst	r2, r0
    3dac:	d100      	bne.n	3db0 <xQueueReceive+0x270>
    3dae:	e738      	b.n	3c22 <xQueueReceive+0xe2>
    3db0:	0020      	movs	r0, r4
    3db2:	4b14      	ldr	r3, [pc, #80]	; (3e04 <xQueueReceive+0x2c4>)
    3db4:	4798      	blx	r3
    3db6:	4b12      	ldr	r3, [pc, #72]	; (3e00 <xQueueReceive+0x2c0>)
    3db8:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    3dba:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    3dbc:	4202      	tst	r2, r0
    3dbe:	d100      	bne.n	3dc2 <xQueueReceive+0x282>
    3dc0:	e72f      	b.n	3c22 <xQueueReceive+0xe2>
    3dc2:	0020      	movs	r0, r4
    3dc4:	4f10      	ldr	r7, [pc, #64]	; (3e08 <xQueueReceive+0x2c8>)
    3dc6:	47b8      	blx	r7
    3dc8:	4e10      	ldr	r6, [pc, #64]	; (3e0c <xQueueReceive+0x2cc>)
    3dca:	5c35      	ldrb	r5, [r6, r0]
    3dcc:	3550      	adds	r5, #80	; 0x50
    3dce:	b2ed      	uxtb	r5, r5
    3dd0:	0020      	movs	r0, r4
    3dd2:	47b8      	blx	r7
    3dd4:	5c36      	ldrb	r6, [r6, r0]
    3dd6:	0020      	movs	r0, r4
    3dd8:	4b0d      	ldr	r3, [pc, #52]	; (3e10 <xQueueReceive+0x2d0>)
    3dda:	4798      	blx	r3
    3ddc:	b2c2      	uxtb	r2, r0
    3dde:	0031      	movs	r1, r6
    3de0:	0028      	movs	r0, r5
    3de2:	4b0c      	ldr	r3, [pc, #48]	; (3e14 <xQueueReceive+0x2d4>)
    3de4:	4798      	blx	r3
				return errQUEUE_EMPTY;
    3de6:	2300      	movs	r3, #0
    3de8:	e71b      	b.n	3c22 <xQueueReceive+0xe2>
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	00004e15 	.word	0x00004e15
    3df0:	00002ef1 	.word	0x00002ef1
    3df4:	00003215 	.word	0x00003215
    3df8:	00001d45 	.word	0x00001d45
    3dfc:	00001c8d 	.word	0x00001c8d
    3e00:	20000020 	.word	0x20000020
    3e04:	00001cf1 	.word	0x00001cf1
    3e08:	00001c71 	.word	0x00001c71
    3e0c:	20000018 	.word	0x20000018
    3e10:	00001ce1 	.word	0x00001ce1
    3e14:	0000297d 	.word	0x0000297d
    3e18:	00001c7d 	.word	0x00001c7d
    3e1c:	00002451 	.word	0x00002451
    3e20:	00004cad 	.word	0x00004cad
    3e24:	00002ee1 	.word	0x00002ee1
    3e28:	00002f09 	.word	0x00002f09
    3e2c:	00004d61 	.word	0x00004d61
    3e30:	00004be5 	.word	0x00004be5
    3e34:	0000323d 	.word	0x0000323d
    3e38:	000047fd 	.word	0x000047fd
    3e3c:	00004655 	.word	0x00004655
    3e40:	00004d79 	.word	0x00004d79
    3e44:	00003061 	.word	0x00003061
    3e48:	000024a9 	.word	0x000024a9

00003e4c <xQueueSemaphoreTake>:
{
    3e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e4e:	46ce      	mov	lr, r9
    3e50:	4647      	mov	r7, r8
    3e52:	b580      	push	{r7, lr}
    3e54:	b085      	sub	sp, #20
    3e56:	1e04      	subs	r4, r0, #0
    3e58:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    3e5a:	d004      	beq.n	3e66 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
    3e5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d003      	beq.n	3e6a <xQueueSemaphoreTake+0x1e>
    3e62:	b672      	cpsid	i
    3e64:	e7fe      	b.n	3e64 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
    3e66:	b672      	cpsid	i
    3e68:	e7fe      	b.n	3e68 <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3e6a:	4bb2      	ldr	r3, [pc, #712]	; (4134 <xQueueSemaphoreTake+0x2e8>)
    3e6c:	4798      	blx	r3
    3e6e:	2800      	cmp	r0, #0
    3e70:	d104      	bne.n	3e7c <xQueueSemaphoreTake+0x30>
    3e72:	9b01      	ldr	r3, [sp, #4]
    3e74:	2b00      	cmp	r3, #0
    3e76:	d006      	beq.n	3e86 <xQueueSemaphoreTake+0x3a>
    3e78:	b672      	cpsid	i
    3e7a:	e7fe      	b.n	3e7a <xQueueSemaphoreTake+0x2e>
    3e7c:	2500      	movs	r5, #0
    3e7e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    3e80:	4bad      	ldr	r3, [pc, #692]	; (4138 <xQueueSemaphoreTake+0x2ec>)
    3e82:	4698      	mov	r8, r3
    3e84:	e0bd      	b.n	4002 <xQueueSemaphoreTake+0x1b6>
    3e86:	2500      	movs	r5, #0
    3e88:	2700      	movs	r7, #0
    3e8a:	e7f9      	b.n	3e80 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
    3e8c:	4bab      	ldr	r3, [pc, #684]	; (413c <xQueueSemaphoreTake+0x2f0>)
    3e8e:	4798      	blx	r3
    3e90:	4bab      	ldr	r3, [pc, #684]	; (4140 <xQueueSemaphoreTake+0x2f4>)
    3e92:	4798      	blx	r3
    3e94:	4bab      	ldr	r3, [pc, #684]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    3e96:	881b      	ldrh	r3, [r3, #0]
    3e98:	4203      	tst	r3, r0
    3e9a:	d019      	beq.n	3ed0 <xQueueSemaphoreTake+0x84>
    3e9c:	0020      	movs	r0, r4
    3e9e:	4baa      	ldr	r3, [pc, #680]	; (4148 <xQueueSemaphoreTake+0x2fc>)
    3ea0:	4798      	blx	r3
    3ea2:	4ba8      	ldr	r3, [pc, #672]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    3ea4:	881b      	ldrh	r3, [r3, #0]
    3ea6:	4203      	tst	r3, r0
    3ea8:	d012      	beq.n	3ed0 <xQueueSemaphoreTake+0x84>
    3eaa:	0020      	movs	r0, r4
    3eac:	4ba7      	ldr	r3, [pc, #668]	; (414c <xQueueSemaphoreTake+0x300>)
    3eae:	4698      	mov	r8, r3
    3eb0:	4798      	blx	r3
    3eb2:	4fa7      	ldr	r7, [pc, #668]	; (4150 <xQueueSemaphoreTake+0x304>)
    3eb4:	5c3d      	ldrb	r5, [r7, r0]
    3eb6:	3528      	adds	r5, #40	; 0x28
    3eb8:	b2ed      	uxtb	r5, r5
    3eba:	0020      	movs	r0, r4
    3ebc:	47c0      	blx	r8
    3ebe:	5c3f      	ldrb	r7, [r7, r0]
    3ec0:	0020      	movs	r0, r4
    3ec2:	4ba4      	ldr	r3, [pc, #656]	; (4154 <xQueueSemaphoreTake+0x308>)
    3ec4:	4798      	blx	r3
    3ec6:	b2c2      	uxtb	r2, r0
    3ec8:	0039      	movs	r1, r7
    3eca:	0028      	movs	r0, r5
    3ecc:	4ba2      	ldr	r3, [pc, #648]	; (4158 <xQueueSemaphoreTake+0x30c>)
    3ece:	4798      	blx	r3
    3ed0:	0020      	movs	r0, r4
    3ed2:	4f9e      	ldr	r7, [pc, #632]	; (414c <xQueueSemaphoreTake+0x300>)
    3ed4:	47b8      	blx	r7
    3ed6:	4d9e      	ldr	r5, [pc, #632]	; (4150 <xQueueSemaphoreTake+0x304>)
    3ed8:	5c2b      	ldrb	r3, [r5, r0]
    3eda:	4699      	mov	r9, r3
    3edc:	0020      	movs	r0, r4
    3ede:	4b9d      	ldr	r3, [pc, #628]	; (4154 <xQueueSemaphoreTake+0x308>)
    3ee0:	4798      	blx	r3
    3ee2:	b2c3      	uxtb	r3, r0
    3ee4:	4698      	mov	r8, r3
    3ee6:	0020      	movs	r0, r4
    3ee8:	47b8      	blx	r7
    3eea:	5c2b      	ldrb	r3, [r5, r0]
    3eec:	2b02      	cmp	r3, #2
    3eee:	d124      	bne.n	3f3a <xQueueSemaphoreTake+0xee>
    3ef0:	4b92      	ldr	r3, [pc, #584]	; (413c <xQueueSemaphoreTake+0x2f0>)
    3ef2:	4798      	blx	r3
    3ef4:	4b99      	ldr	r3, [pc, #612]	; (415c <xQueueSemaphoreTake+0x310>)
    3ef6:	4798      	blx	r3
    3ef8:	b2c2      	uxtb	r2, r0
    3efa:	4641      	mov	r1, r8
    3efc:	4648      	mov	r0, r9
    3efe:	4b98      	ldr	r3, [pc, #608]	; (4160 <xQueueSemaphoreTake+0x314>)
    3f00:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    3f02:	3e01      	subs	r6, #1
    3f04:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3f06:	6823      	ldr	r3, [r4, #0]
    3f08:	2b00      	cmp	r3, #0
    3f0a:	d102      	bne.n	3f12 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3f0c:	4b95      	ldr	r3, [pc, #596]	; (4164 <xQueueSemaphoreTake+0x318>)
    3f0e:	4798      	blx	r3
    3f10:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3f12:	6923      	ldr	r3, [r4, #16]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d007      	beq.n	3f28 <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3f18:	0020      	movs	r0, r4
    3f1a:	3010      	adds	r0, #16
    3f1c:	4b92      	ldr	r3, [pc, #584]	; (4168 <xQueueSemaphoreTake+0x31c>)
    3f1e:	4798      	blx	r3
    3f20:	2800      	cmp	r0, #0
    3f22:	d001      	beq.n	3f28 <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    3f24:	4b91      	ldr	r3, [pc, #580]	; (416c <xQueueSemaphoreTake+0x320>)
    3f26:	4798      	blx	r3
				taskEXIT_CRITICAL();
    3f28:	4b91      	ldr	r3, [pc, #580]	; (4170 <xQueueSemaphoreTake+0x324>)
    3f2a:	4798      	blx	r3
				return pdPASS;
    3f2c:	2501      	movs	r5, #1
}
    3f2e:	0028      	movs	r0, r5
    3f30:	b005      	add	sp, #20
    3f32:	bc0c      	pop	{r2, r3}
    3f34:	4690      	mov	r8, r2
    3f36:	4699      	mov	r9, r3
    3f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    3f3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3f3c:	3a01      	subs	r2, #1
    3f3e:	b2d2      	uxtb	r2, r2
    3f40:	e7db      	b.n	3efa <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
    3f42:	2d00      	cmp	r5, #0
    3f44:	d001      	beq.n	3f4a <xQueueSemaphoreTake+0xfe>
    3f46:	b672      	cpsid	i
    3f48:	e7fe      	b.n	3f48 <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
    3f4a:	4b89      	ldr	r3, [pc, #548]	; (4170 <xQueueSemaphoreTake+0x324>)
    3f4c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3f4e:	4b7b      	ldr	r3, [pc, #492]	; (413c <xQueueSemaphoreTake+0x2f0>)
    3f50:	4798      	blx	r3
    3f52:	4b7b      	ldr	r3, [pc, #492]	; (4140 <xQueueSemaphoreTake+0x2f4>)
    3f54:	4798      	blx	r3
    3f56:	4b7b      	ldr	r3, [pc, #492]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    3f58:	881b      	ldrh	r3, [r3, #0]
    3f5a:	4203      	tst	r3, r0
    3f5c:	d0e7      	beq.n	3f2e <xQueueSemaphoreTake+0xe2>
    3f5e:	0020      	movs	r0, r4
    3f60:	4b79      	ldr	r3, [pc, #484]	; (4148 <xQueueSemaphoreTake+0x2fc>)
    3f62:	4798      	blx	r3
    3f64:	4b77      	ldr	r3, [pc, #476]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    3f66:	881b      	ldrh	r3, [r3, #0]
    3f68:	4203      	tst	r3, r0
    3f6a:	d0e0      	beq.n	3f2e <xQueueSemaphoreTake+0xe2>
    3f6c:	0020      	movs	r0, r4
    3f6e:	4b77      	ldr	r3, [pc, #476]	; (414c <xQueueSemaphoreTake+0x300>)
    3f70:	4698      	mov	r8, r3
    3f72:	4798      	blx	r3
    3f74:	4f76      	ldr	r7, [pc, #472]	; (4150 <xQueueSemaphoreTake+0x304>)
    3f76:	5c3e      	ldrb	r6, [r7, r0]
    3f78:	3650      	adds	r6, #80	; 0x50
    3f7a:	b2f6      	uxtb	r6, r6
    3f7c:	0020      	movs	r0, r4
    3f7e:	47c0      	blx	r8
    3f80:	5c3f      	ldrb	r7, [r7, r0]
    3f82:	0020      	movs	r0, r4
    3f84:	4b73      	ldr	r3, [pc, #460]	; (4154 <xQueueSemaphoreTake+0x308>)
    3f86:	4798      	blx	r3
    3f88:	b2c2      	uxtb	r2, r0
    3f8a:	0039      	movs	r1, r7
    3f8c:	0030      	movs	r0, r6
    3f8e:	4b72      	ldr	r3, [pc, #456]	; (4158 <xQueueSemaphoreTake+0x30c>)
    3f90:	4798      	blx	r3
    3f92:	e7cc      	b.n	3f2e <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    3f94:	a802      	add	r0, sp, #8
    3f96:	4b77      	ldr	r3, [pc, #476]	; (4174 <xQueueSemaphoreTake+0x328>)
    3f98:	4798      	blx	r3
    3f9a:	e03c      	b.n	4016 <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
    3f9c:	2200      	movs	r2, #0
    3f9e:	2344      	movs	r3, #68	; 0x44
    3fa0:	54e2      	strb	r2, [r4, r3]
    3fa2:	e043      	b.n	402c <xQueueSemaphoreTake+0x1e0>
    3fa4:	2200      	movs	r2, #0
    3fa6:	2345      	movs	r3, #69	; 0x45
    3fa8:	54e2      	strb	r2, [r4, r3]
    3faa:	e044      	b.n	4036 <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    3fac:	0020      	movs	r0, r4
    3fae:	4b66      	ldr	r3, [pc, #408]	; (4148 <xQueueSemaphoreTake+0x2fc>)
    3fb0:	4798      	blx	r3
    3fb2:	4b64      	ldr	r3, [pc, #400]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    3fb4:	881b      	ldrh	r3, [r3, #0]
    3fb6:	4203      	tst	r3, r0
    3fb8:	d052      	beq.n	4060 <xQueueSemaphoreTake+0x214>
    3fba:	0020      	movs	r0, r4
    3fbc:	4b63      	ldr	r3, [pc, #396]	; (414c <xQueueSemaphoreTake+0x300>)
    3fbe:	4699      	mov	r9, r3
    3fc0:	4798      	blx	r3
    3fc2:	4f63      	ldr	r7, [pc, #396]	; (4150 <xQueueSemaphoreTake+0x304>)
    3fc4:	5c3e      	ldrb	r6, [r7, r0]
    3fc6:	3668      	adds	r6, #104	; 0x68
    3fc8:	b2f6      	uxtb	r6, r6
    3fca:	0020      	movs	r0, r4
    3fcc:	47c8      	blx	r9
    3fce:	5c3f      	ldrb	r7, [r7, r0]
    3fd0:	0020      	movs	r0, r4
    3fd2:	4b60      	ldr	r3, [pc, #384]	; (4154 <xQueueSemaphoreTake+0x308>)
    3fd4:	4798      	blx	r3
    3fd6:	b2c2      	uxtb	r2, r0
    3fd8:	0039      	movs	r1, r7
    3fda:	0030      	movs	r0, r6
    3fdc:	4b5e      	ldr	r3, [pc, #376]	; (4158 <xQueueSemaphoreTake+0x30c>)
    3fde:	4798      	blx	r3
    3fe0:	e03e      	b.n	4060 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3fe2:	6823      	ldr	r3, [r4, #0]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	d052      	beq.n	408e <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3fe8:	0020      	movs	r0, r4
    3fea:	3024      	adds	r0, #36	; 0x24
    3fec:	9901      	ldr	r1, [sp, #4]
    3fee:	4b62      	ldr	r3, [pc, #392]	; (4178 <xQueueSemaphoreTake+0x32c>)
    3ff0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3ff2:	0020      	movs	r0, r4
    3ff4:	4b61      	ldr	r3, [pc, #388]	; (417c <xQueueSemaphoreTake+0x330>)
    3ff6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    3ff8:	4b61      	ldr	r3, [pc, #388]	; (4180 <xQueueSemaphoreTake+0x334>)
    3ffa:	4798      	blx	r3
    3ffc:	2800      	cmp	r0, #0
    3ffe:	d04f      	beq.n	40a0 <xQueueSemaphoreTake+0x254>
    4000:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    4002:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    4004:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    4006:	2e00      	cmp	r6, #0
    4008:	d000      	beq.n	400c <xQueueSemaphoreTake+0x1c0>
    400a:	e73f      	b.n	3e8c <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
    400c:	9b01      	ldr	r3, [sp, #4]
    400e:	2b00      	cmp	r3, #0
    4010:	d097      	beq.n	3f42 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    4012:	2f00      	cmp	r7, #0
    4014:	d0be      	beq.n	3f94 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
    4016:	4b56      	ldr	r3, [pc, #344]	; (4170 <xQueueSemaphoreTake+0x324>)
    4018:	4798      	blx	r3
		vTaskSuspendAll();
    401a:	4b5a      	ldr	r3, [pc, #360]	; (4184 <xQueueSemaphoreTake+0x338>)
    401c:	4798      	blx	r3
		prvLockQueue( pxQueue );
    401e:	4b46      	ldr	r3, [pc, #280]	; (4138 <xQueueSemaphoreTake+0x2ec>)
    4020:	4798      	blx	r3
    4022:	2344      	movs	r3, #68	; 0x44
    4024:	5ce3      	ldrb	r3, [r4, r3]
    4026:	b25b      	sxtb	r3, r3
    4028:	3301      	adds	r3, #1
    402a:	d0b7      	beq.n	3f9c <xQueueSemaphoreTake+0x150>
    402c:	2345      	movs	r3, #69	; 0x45
    402e:	5ce3      	ldrb	r3, [r4, r3]
    4030:	b25b      	sxtb	r3, r3
    4032:	3301      	adds	r3, #1
    4034:	d0b6      	beq.n	3fa4 <xQueueSemaphoreTake+0x158>
    4036:	4b4e      	ldr	r3, [pc, #312]	; (4170 <xQueueSemaphoreTake+0x324>)
    4038:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    403a:	a901      	add	r1, sp, #4
    403c:	a802      	add	r0, sp, #8
    403e:	4b52      	ldr	r3, [pc, #328]	; (4188 <xQueueSemaphoreTake+0x33c>)
    4040:	4798      	blx	r3
    4042:	2800      	cmp	r0, #0
    4044:	d135      	bne.n	40b2 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4046:	0020      	movs	r0, r4
    4048:	4b50      	ldr	r3, [pc, #320]	; (418c <xQueueSemaphoreTake+0x340>)
    404a:	4798      	blx	r3
    404c:	2800      	cmp	r0, #0
    404e:	d02a      	beq.n	40a6 <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    4050:	4b3a      	ldr	r3, [pc, #232]	; (413c <xQueueSemaphoreTake+0x2f0>)
    4052:	4798      	blx	r3
    4054:	4b3a      	ldr	r3, [pc, #232]	; (4140 <xQueueSemaphoreTake+0x2f4>)
    4056:	4798      	blx	r3
    4058:	4b3a      	ldr	r3, [pc, #232]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    405a:	881b      	ldrh	r3, [r3, #0]
    405c:	4203      	tst	r3, r0
    405e:	d1a5      	bne.n	3fac <xQueueSemaphoreTake+0x160>
    4060:	0020      	movs	r0, r4
    4062:	4b3a      	ldr	r3, [pc, #232]	; (414c <xQueueSemaphoreTake+0x300>)
    4064:	4798      	blx	r3
    4066:	4b3a      	ldr	r3, [pc, #232]	; (4150 <xQueueSemaphoreTake+0x304>)
    4068:	5c1b      	ldrb	r3, [r3, r0]
    406a:	2b02      	cmp	r3, #2
    406c:	d0b9      	beq.n	3fe2 <xQueueSemaphoreTake+0x196>
    406e:	4b33      	ldr	r3, [pc, #204]	; (413c <xQueueSemaphoreTake+0x2f0>)
    4070:	4798      	blx	r3
    4072:	4b33      	ldr	r3, [pc, #204]	; (4140 <xQueueSemaphoreTake+0x2f4>)
    4074:	4798      	blx	r3
    4076:	4b33      	ldr	r3, [pc, #204]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    4078:	881b      	ldrh	r3, [r3, #0]
    407a:	4203      	tst	r3, r0
    407c:	d0b1      	beq.n	3fe2 <xQueueSemaphoreTake+0x196>
    407e:	4b2f      	ldr	r3, [pc, #188]	; (413c <xQueueSemaphoreTake+0x2f0>)
    4080:	4798      	blx	r3
    4082:	4b36      	ldr	r3, [pc, #216]	; (415c <xQueueSemaphoreTake+0x310>)
    4084:	4798      	blx	r3
    4086:	b2c0      	uxtb	r0, r0
    4088:	4b41      	ldr	r3, [pc, #260]	; (4190 <xQueueSemaphoreTake+0x344>)
    408a:	4798      	blx	r3
    408c:	e7a9      	b.n	3fe2 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
    408e:	4b2a      	ldr	r3, [pc, #168]	; (4138 <xQueueSemaphoreTake+0x2ec>)
    4090:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4092:	6860      	ldr	r0, [r4, #4]
    4094:	4b3f      	ldr	r3, [pc, #252]	; (4194 <xQueueSemaphoreTake+0x348>)
    4096:	4798      	blx	r3
    4098:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    409a:	4b35      	ldr	r3, [pc, #212]	; (4170 <xQueueSemaphoreTake+0x324>)
    409c:	4798      	blx	r3
    409e:	e7a3      	b.n	3fe8 <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
    40a0:	4b32      	ldr	r3, [pc, #200]	; (416c <xQueueSemaphoreTake+0x320>)
    40a2:	4798      	blx	r3
    40a4:	e7ac      	b.n	4000 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
    40a6:	0020      	movs	r0, r4
    40a8:	4b34      	ldr	r3, [pc, #208]	; (417c <xQueueSemaphoreTake+0x330>)
    40aa:	4798      	blx	r3
				( void ) xTaskResumeAll();
    40ac:	4b34      	ldr	r3, [pc, #208]	; (4180 <xQueueSemaphoreTake+0x334>)
    40ae:	4798      	blx	r3
    40b0:	e7a6      	b.n	4000 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
    40b2:	0020      	movs	r0, r4
    40b4:	4b31      	ldr	r3, [pc, #196]	; (417c <xQueueSemaphoreTake+0x330>)
    40b6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    40b8:	4b31      	ldr	r3, [pc, #196]	; (4180 <xQueueSemaphoreTake+0x334>)
    40ba:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    40bc:	0020      	movs	r0, r4
    40be:	4b33      	ldr	r3, [pc, #204]	; (418c <xQueueSemaphoreTake+0x340>)
    40c0:	4798      	blx	r3
    40c2:	2800      	cmp	r0, #0
    40c4:	d09c      	beq.n	4000 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
    40c6:	2d00      	cmp	r5, #0
    40c8:	d00e      	beq.n	40e8 <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
    40ca:	4b1b      	ldr	r3, [pc, #108]	; (4138 <xQueueSemaphoreTake+0x2ec>)
    40cc:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    40ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    40d0:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    40d2:	2b00      	cmp	r3, #0
    40d4:	d003      	beq.n	40de <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    40d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    40d8:	681b      	ldr	r3, [r3, #0]
    40da:	3105      	adds	r1, #5
    40dc:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    40de:	6860      	ldr	r0, [r4, #4]
    40e0:	4b2d      	ldr	r3, [pc, #180]	; (4198 <xQueueSemaphoreTake+0x34c>)
    40e2:	4798      	blx	r3
						taskEXIT_CRITICAL();
    40e4:	4b22      	ldr	r3, [pc, #136]	; (4170 <xQueueSemaphoreTake+0x324>)
    40e6:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    40e8:	4b14      	ldr	r3, [pc, #80]	; (413c <xQueueSemaphoreTake+0x2f0>)
    40ea:	4798      	blx	r3
    40ec:	4b14      	ldr	r3, [pc, #80]	; (4140 <xQueueSemaphoreTake+0x2f4>)
    40ee:	4798      	blx	r3
    40f0:	4b14      	ldr	r3, [pc, #80]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    40f2:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
    40f4:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    40f6:	4203      	tst	r3, r0
    40f8:	d100      	bne.n	40fc <xQueueSemaphoreTake+0x2b0>
    40fa:	e718      	b.n	3f2e <xQueueSemaphoreTake+0xe2>
    40fc:	0020      	movs	r0, r4
    40fe:	4b12      	ldr	r3, [pc, #72]	; (4148 <xQueueSemaphoreTake+0x2fc>)
    4100:	4798      	blx	r3
    4102:	4b10      	ldr	r3, [pc, #64]	; (4144 <xQueueSemaphoreTake+0x2f8>)
    4104:	881b      	ldrh	r3, [r3, #0]
    4106:	4203      	tst	r3, r0
    4108:	d100      	bne.n	410c <xQueueSemaphoreTake+0x2c0>
    410a:	e710      	b.n	3f2e <xQueueSemaphoreTake+0xe2>
    410c:	0020      	movs	r0, r4
    410e:	4f0f      	ldr	r7, [pc, #60]	; (414c <xQueueSemaphoreTake+0x300>)
    4110:	47b8      	blx	r7
    4112:	4e0f      	ldr	r6, [pc, #60]	; (4150 <xQueueSemaphoreTake+0x304>)
    4114:	5c35      	ldrb	r5, [r6, r0]
    4116:	3550      	adds	r5, #80	; 0x50
    4118:	b2ed      	uxtb	r5, r5
    411a:	0020      	movs	r0, r4
    411c:	47b8      	blx	r7
    411e:	5c36      	ldrb	r6, [r6, r0]
    4120:	0020      	movs	r0, r4
    4122:	4b0c      	ldr	r3, [pc, #48]	; (4154 <xQueueSemaphoreTake+0x308>)
    4124:	4798      	blx	r3
    4126:	b2c2      	uxtb	r2, r0
    4128:	0031      	movs	r1, r6
    412a:	0028      	movs	r0, r5
    412c:	4b0a      	ldr	r3, [pc, #40]	; (4158 <xQueueSemaphoreTake+0x30c>)
    412e:	4798      	blx	r3
				return errQUEUE_EMPTY;
    4130:	2500      	movs	r5, #0
    4132:	e6fc      	b.n	3f2e <xQueueSemaphoreTake+0xe2>
    4134:	00004e15 	.word	0x00004e15
    4138:	00002ef1 	.word	0x00002ef1
    413c:	00001d45 	.word	0x00001d45
    4140:	00001c8d 	.word	0x00001c8d
    4144:	20000020 	.word	0x20000020
    4148:	00001cf1 	.word	0x00001cf1
    414c:	00001c71 	.word	0x00001c71
    4150:	20000018 	.word	0x20000018
    4154:	00001ce1 	.word	0x00001ce1
    4158:	0000297d 	.word	0x0000297d
    415c:	00001c7d 	.word	0x00001c7d
    4160:	00002451 	.word	0x00002451
    4164:	00005145 	.word	0x00005145
    4168:	00004cad 	.word	0x00004cad
    416c:	00002ee1 	.word	0x00002ee1
    4170:	00002f09 	.word	0x00002f09
    4174:	00004d61 	.word	0x00004d61
    4178:	00004be5 	.word	0x00004be5
    417c:	0000323d 	.word	0x0000323d
    4180:	000047fd 	.word	0x000047fd
    4184:	00004655 	.word	0x00004655
    4188:	00004d79 	.word	0x00004d79
    418c:	00003061 	.word	0x00003061
    4190:	000024a9 	.word	0x000024a9
    4194:	00004e35 	.word	0x00004e35
    4198:	00005041 	.word	0x00005041

0000419c <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    419c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    419e:	4770      	bx	lr

000041a0 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    41a0:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
    41a2:	4770      	bx	lr

000041a4 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    41a4:	2350      	movs	r3, #80	; 0x50
    41a6:	5cc0      	ldrb	r0, [r0, r3]
	}
    41a8:	4770      	bx	lr
	...

000041ac <vQueueWaitForMessageRestricted>:
	{
    41ac:	b570      	push	{r4, r5, r6, lr}
    41ae:	0004      	movs	r4, r0
    41b0:	000d      	movs	r5, r1
    41b2:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    41b4:	4b11      	ldr	r3, [pc, #68]	; (41fc <vQueueWaitForMessageRestricted+0x50>)
    41b6:	4798      	blx	r3
    41b8:	2344      	movs	r3, #68	; 0x44
    41ba:	5ce3      	ldrb	r3, [r4, r3]
    41bc:	b25b      	sxtb	r3, r3
    41be:	3301      	adds	r3, #1
    41c0:	d00d      	beq.n	41de <vQueueWaitForMessageRestricted+0x32>
    41c2:	2345      	movs	r3, #69	; 0x45
    41c4:	5ce3      	ldrb	r3, [r4, r3]
    41c6:	b25b      	sxtb	r3, r3
    41c8:	3301      	adds	r3, #1
    41ca:	d00c      	beq.n	41e6 <vQueueWaitForMessageRestricted+0x3a>
    41cc:	4b0c      	ldr	r3, [pc, #48]	; (4200 <vQueueWaitForMessageRestricted+0x54>)
    41ce:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    41d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    41d2:	2b00      	cmp	r3, #0
    41d4:	d00b      	beq.n	41ee <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    41d6:	0020      	movs	r0, r4
    41d8:	4b0a      	ldr	r3, [pc, #40]	; (4204 <vQueueWaitForMessageRestricted+0x58>)
    41da:	4798      	blx	r3
	}
    41dc:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    41de:	2200      	movs	r2, #0
    41e0:	2344      	movs	r3, #68	; 0x44
    41e2:	54e2      	strb	r2, [r4, r3]
    41e4:	e7ed      	b.n	41c2 <vQueueWaitForMessageRestricted+0x16>
    41e6:	2200      	movs	r2, #0
    41e8:	2345      	movs	r3, #69	; 0x45
    41ea:	54e2      	strb	r2, [r4, r3]
    41ec:	e7ee      	b.n	41cc <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    41ee:	0020      	movs	r0, r4
    41f0:	3024      	adds	r0, #36	; 0x24
    41f2:	0032      	movs	r2, r6
    41f4:	0029      	movs	r1, r5
    41f6:	4b04      	ldr	r3, [pc, #16]	; (4208 <vQueueWaitForMessageRestricted+0x5c>)
    41f8:	4798      	blx	r3
    41fa:	e7ec      	b.n	41d6 <vQueueWaitForMessageRestricted+0x2a>
    41fc:	00002ef1 	.word	0x00002ef1
    4200:	00002f09 	.word	0x00002f09
    4204:	0000323d 	.word	0x0000323d
    4208:	00004c11 	.word	0x00004c11

0000420c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    420c:	4b08      	ldr	r3, [pc, #32]	; (4230 <prvResetNextTaskUnblockTime+0x24>)
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	2b00      	cmp	r3, #0
    4214:	d007      	beq.n	4226 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4216:	4b06      	ldr	r3, [pc, #24]	; (4230 <prvResetNextTaskUnblockTime+0x24>)
    4218:	681b      	ldr	r3, [r3, #0]
    421a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    421c:	68db      	ldr	r3, [r3, #12]
    421e:	685a      	ldr	r2, [r3, #4]
    4220:	4b04      	ldr	r3, [pc, #16]	; (4234 <prvResetNextTaskUnblockTime+0x28>)
    4222:	601a      	str	r2, [r3, #0]
	}
}
    4224:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    4226:	2201      	movs	r2, #1
    4228:	4252      	negs	r2, r2
    422a:	4b02      	ldr	r3, [pc, #8]	; (4234 <prvResetNextTaskUnblockTime+0x28>)
    422c:	601a      	str	r2, [r3, #0]
    422e:	e7f9      	b.n	4224 <prvResetNextTaskUnblockTime+0x18>
    4230:	200036d4 	.word	0x200036d4
    4234:	20003784 	.word	0x20003784

00004238 <prvIdleTask>:
{
    4238:	b5f0      	push	{r4, r5, r6, r7, lr}
    423a:	46d6      	mov	lr, sl
    423c:	464f      	mov	r7, r9
    423e:	4646      	mov	r6, r8
    4240:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    4242:	4b14      	ldr	r3, [pc, #80]	; (4294 <prvIdleTask+0x5c>)
    4244:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    4246:	4b14      	ldr	r3, [pc, #80]	; (4298 <prvIdleTask+0x60>)
    4248:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    424a:	4f14      	ldr	r7, [pc, #80]	; (429c <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    424c:	4b14      	ldr	r3, [pc, #80]	; (42a0 <prvIdleTask+0x68>)
    424e:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    4250:	464b      	mov	r3, r9
    4252:	681b      	ldr	r3, [r3, #0]
    4254:	2b00      	cmp	r3, #0
    4256:	d016      	beq.n	4286 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    4258:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    425a:	68fb      	ldr	r3, [r7, #12]
    425c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    425e:	1d28      	adds	r0, r5, #4
    4260:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    4262:	4a10      	ldr	r2, [pc, #64]	; (42a4 <prvIdleTask+0x6c>)
    4264:	6813      	ldr	r3, [r2, #0]
    4266:	3b01      	subs	r3, #1
    4268:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    426a:	4c0a      	ldr	r4, [pc, #40]	; (4294 <prvIdleTask+0x5c>)
    426c:	6823      	ldr	r3, [r4, #0]
    426e:	3b01      	subs	r3, #1
    4270:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    4272:	4b0d      	ldr	r3, [pc, #52]	; (42a8 <prvIdleTask+0x70>)
    4274:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    4276:	6b28      	ldr	r0, [r5, #48]	; 0x30
    4278:	4e0c      	ldr	r6, [pc, #48]	; (42ac <prvIdleTask+0x74>)
    427a:	47b0      	blx	r6
			vPortFree( pxTCB );
    427c:	0028      	movs	r0, r5
    427e:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    4280:	6823      	ldr	r3, [r4, #0]
    4282:	2b00      	cmp	r3, #0
    4284:	d1e8      	bne.n	4258 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    4286:	4b0a      	ldr	r3, [pc, #40]	; (42b0 <prvIdleTask+0x78>)
    4288:	681b      	ldr	r3, [r3, #0]
    428a:	2b01      	cmp	r3, #1
    428c:	d9e0      	bls.n	4250 <prvIdleTask+0x18>
				taskYIELD();
    428e:	4b09      	ldr	r3, [pc, #36]	; (42b4 <prvIdleTask+0x7c>)
    4290:	4798      	blx	r3
    4292:	e7dd      	b.n	4250 <prvIdleTask+0x18>
    4294:	20003744 	.word	0x20003744
    4298:	00002ef1 	.word	0x00002ef1
    429c:	200037b8 	.word	0x200037b8
    42a0:	00002dc3 	.word	0x00002dc3
    42a4:	20003740 	.word	0x20003740
    42a8:	00002f09 	.word	0x00002f09
    42ac:	00003045 	.word	0x00003045
    42b0:	200036dc 	.word	0x200036dc
    42b4:	00002ee1 	.word	0x00002ee1

000042b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    42b8:	b570      	push	{r4, r5, r6, lr}
    42ba:	0004      	movs	r4, r0
    42bc:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    42be:	4b17      	ldr	r3, [pc, #92]	; (431c <prvAddCurrentTaskToDelayedList+0x64>)
    42c0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    42c2:	4b17      	ldr	r3, [pc, #92]	; (4320 <prvAddCurrentTaskToDelayedList+0x68>)
    42c4:	6818      	ldr	r0, [r3, #0]
    42c6:	3004      	adds	r0, #4
    42c8:	4b16      	ldr	r3, [pc, #88]	; (4324 <prvAddCurrentTaskToDelayedList+0x6c>)
    42ca:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    42cc:	1c63      	adds	r3, r4, #1
    42ce:	d013      	beq.n	42f8 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    42d0:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    42d2:	4b13      	ldr	r3, [pc, #76]	; (4320 <prvAddCurrentTaskToDelayedList+0x68>)
    42d4:	681b      	ldr	r3, [r3, #0]
    42d6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    42d8:	42a6      	cmp	r6, r4
    42da:	d816      	bhi.n	430a <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    42dc:	4b12      	ldr	r3, [pc, #72]	; (4328 <prvAddCurrentTaskToDelayedList+0x70>)
    42de:	6818      	ldr	r0, [r3, #0]
    42e0:	4b0f      	ldr	r3, [pc, #60]	; (4320 <prvAddCurrentTaskToDelayedList+0x68>)
    42e2:	6819      	ldr	r1, [r3, #0]
    42e4:	3104      	adds	r1, #4
    42e6:	4b11      	ldr	r3, [pc, #68]	; (432c <prvAddCurrentTaskToDelayedList+0x74>)
    42e8:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    42ea:	4b11      	ldr	r3, [pc, #68]	; (4330 <prvAddCurrentTaskToDelayedList+0x78>)
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	429c      	cmp	r4, r3
    42f0:	d212      	bcs.n	4318 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    42f2:	4b0f      	ldr	r3, [pc, #60]	; (4330 <prvAddCurrentTaskToDelayedList+0x78>)
    42f4:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    42f6:	e00f      	b.n	4318 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    42f8:	2d00      	cmp	r5, #0
    42fa:	d0e9      	beq.n	42d0 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    42fc:	4b08      	ldr	r3, [pc, #32]	; (4320 <prvAddCurrentTaskToDelayedList+0x68>)
    42fe:	6819      	ldr	r1, [r3, #0]
    4300:	3104      	adds	r1, #4
    4302:	480c      	ldr	r0, [pc, #48]	; (4334 <prvAddCurrentTaskToDelayedList+0x7c>)
    4304:	4b0c      	ldr	r3, [pc, #48]	; (4338 <prvAddCurrentTaskToDelayedList+0x80>)
    4306:	4798      	blx	r3
    4308:	e006      	b.n	4318 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    430a:	4b0c      	ldr	r3, [pc, #48]	; (433c <prvAddCurrentTaskToDelayedList+0x84>)
    430c:	6818      	ldr	r0, [r3, #0]
    430e:	4b04      	ldr	r3, [pc, #16]	; (4320 <prvAddCurrentTaskToDelayedList+0x68>)
    4310:	6819      	ldr	r1, [r3, #0]
    4312:	3104      	adds	r1, #4
    4314:	4b05      	ldr	r3, [pc, #20]	; (432c <prvAddCurrentTaskToDelayedList+0x74>)
    4316:	4798      	blx	r3
}
    4318:	bd70      	pop	{r4, r5, r6, pc}
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	200037cc 	.word	0x200037cc
    4320:	200036d0 	.word	0x200036d0
    4324:	00002dc3 	.word	0x00002dc3
    4328:	200036d4 	.word	0x200036d4
    432c:	00002d95 	.word	0x00002d95
    4330:	20003784 	.word	0x20003784
    4334:	200037a4 	.word	0x200037a4
    4338:	00002d7d 	.word	0x00002d7d
    433c:	200036d8 	.word	0x200036d8

00004340 <xTaskCreate>:
	{
    4340:	b5f0      	push	{r4, r5, r6, r7, lr}
    4342:	46c6      	mov	lr, r8
    4344:	b500      	push	{lr}
    4346:	b084      	sub	sp, #16
    4348:	9001      	str	r0, [sp, #4]
    434a:	000d      	movs	r5, r1
    434c:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    434e:	0097      	lsls	r7, r2, #2
    4350:	0038      	movs	r0, r7
    4352:	4b81      	ldr	r3, [pc, #516]	; (4558 <xTaskCreate+0x218>)
    4354:	4798      	blx	r3
    4356:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    4358:	d100      	bne.n	435c <xTaskCreate+0x1c>
    435a:	e0b6      	b.n	44ca <xTaskCreate+0x18a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    435c:	2054      	movs	r0, #84	; 0x54
    435e:	4b7e      	ldr	r3, [pc, #504]	; (4558 <xTaskCreate+0x218>)
    4360:	4798      	blx	r3
    4362:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    4364:	d100      	bne.n	4368 <xTaskCreate+0x28>
    4366:	e0ad      	b.n	44c4 <xTaskCreate+0x184>
					pxNewTCB->pxStack = pxStack;
    4368:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    436a:	003a      	movs	r2, r7
    436c:	21a5      	movs	r1, #165	; 0xa5
    436e:	0030      	movs	r0, r6
    4370:	4b7a      	ldr	r3, [pc, #488]	; (455c <xTaskCreate+0x21c>)
    4372:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    4374:	1f3a      	subs	r2, r7, #4
    4376:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4378:	469c      	mov	ip, r3
    437a:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    437c:	2307      	movs	r3, #7
    437e:	439a      	bics	r2, r3
    4380:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4382:	782a      	ldrb	r2, [r5, #0]
    4384:	332d      	adds	r3, #45	; 0x2d
    4386:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    4388:	782b      	ldrb	r3, [r5, #0]
    438a:	2b00      	cmp	r3, #0
    438c:	d00d      	beq.n	43aa <xTaskCreate+0x6a>
    438e:	3501      	adds	r5, #1
    4390:	0023      	movs	r3, r4
    4392:	3335      	adds	r3, #53	; 0x35
    4394:	0020      	movs	r0, r4
    4396:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4398:	782a      	ldrb	r2, [r5, #0]
    439a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    439c:	782a      	ldrb	r2, [r5, #0]
    439e:	2a00      	cmp	r2, #0
    43a0:	d003      	beq.n	43aa <xTaskCreate+0x6a>
    43a2:	3501      	adds	r5, #1
    43a4:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    43a6:	4283      	cmp	r3, r0
    43a8:	d1f6      	bne.n	4398 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    43aa:	2200      	movs	r2, #0
    43ac:	233b      	movs	r3, #59	; 0x3b
    43ae:	54e2      	strb	r2, [r4, r3]
    43b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    43b2:	2f04      	cmp	r7, #4
    43b4:	d900      	bls.n	43b8 <xTaskCreate+0x78>
    43b6:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    43b8:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    43ba:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    43bc:	2600      	movs	r6, #0
    43be:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    43c0:	1d23      	adds	r3, r4, #4
    43c2:	9303      	str	r3, [sp, #12]
    43c4:	0018      	movs	r0, r3
    43c6:	4d66      	ldr	r5, [pc, #408]	; (4560 <xTaskCreate+0x220>)
    43c8:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    43ca:	0020      	movs	r0, r4
    43cc:	3018      	adds	r0, #24
    43ce:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    43d0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    43d2:	2305      	movs	r3, #5
    43d4:	1bdb      	subs	r3, r3, r7
    43d6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    43d8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    43da:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    43dc:	2350      	movs	r3, #80	; 0x50
    43de:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    43e0:	9a02      	ldr	r2, [sp, #8]
    43e2:	9901      	ldr	r1, [sp, #4]
    43e4:	4640      	mov	r0, r8
    43e6:	4b5f      	ldr	r3, [pc, #380]	; (4564 <xTaskCreate+0x224>)
    43e8:	4798      	blx	r3
    43ea:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    43ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    43ee:	2b00      	cmp	r3, #0
    43f0:	d000      	beq.n	43f4 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    43f2:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    43f4:	4b5c      	ldr	r3, [pc, #368]	; (4568 <xTaskCreate+0x228>)
    43f6:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    43f8:	4a5c      	ldr	r2, [pc, #368]	; (456c <xTaskCreate+0x22c>)
    43fa:	6813      	ldr	r3, [r2, #0]
    43fc:	3301      	adds	r3, #1
    43fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    4400:	4b5b      	ldr	r3, [pc, #364]	; (4570 <xTaskCreate+0x230>)
    4402:	681b      	ldr	r3, [r3, #0]
    4404:	2b00      	cmp	r3, #0
    4406:	d063      	beq.n	44d0 <xTaskCreate+0x190>
			if( xSchedulerRunning == pdFALSE )
    4408:	4b5a      	ldr	r3, [pc, #360]	; (4574 <xTaskCreate+0x234>)
    440a:	681b      	ldr	r3, [r3, #0]
    440c:	2b00      	cmp	r3, #0
    440e:	d107      	bne.n	4420 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    4410:	4b57      	ldr	r3, [pc, #348]	; (4570 <xTaskCreate+0x230>)
    4412:	681b      	ldr	r3, [r3, #0]
    4414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4418:	4293      	cmp	r3, r2
    441a:	d801      	bhi.n	4420 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    441c:	4b54      	ldr	r3, [pc, #336]	; (4570 <xTaskCreate+0x230>)
    441e:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    4420:	4a55      	ldr	r2, [pc, #340]	; (4578 <xTaskCreate+0x238>)
    4422:	6813      	ldr	r3, [r2, #0]
    4424:	3301      	adds	r3, #1
    4426:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    4428:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
    442a:	2003      	movs	r0, #3
    442c:	4b53      	ldr	r3, [pc, #332]	; (457c <xTaskCreate+0x23c>)
    442e:	4798      	blx	r3
    4430:	b281      	uxth	r1, r0
    4432:	0020      	movs	r0, r4
    4434:	4b52      	ldr	r3, [pc, #328]	; (4580 <xTaskCreate+0x240>)
    4436:	4798      	blx	r3
    4438:	4b52      	ldr	r3, [pc, #328]	; (4584 <xTaskCreate+0x244>)
    443a:	8819      	ldrh	r1, [r3, #0]
    443c:	0020      	movs	r0, r4
    443e:	4b52      	ldr	r3, [pc, #328]	; (4588 <xTaskCreate+0x248>)
    4440:	4798      	blx	r3
    4442:	0020      	movs	r0, r4
    4444:	4e51      	ldr	r6, [pc, #324]	; (458c <xTaskCreate+0x24c>)
    4446:	47b0      	blx	r6
    4448:	0022      	movs	r2, r4
    444a:	3234      	adds	r2, #52	; 0x34
    444c:	b2c1      	uxtb	r1, r0
    444e:	2003      	movs	r0, #3
    4450:	4b4f      	ldr	r3, [pc, #316]	; (4590 <xTaskCreate+0x250>)
    4452:	4798      	blx	r3
    4454:	0020      	movs	r0, r4
    4456:	47b0      	blx	r6
    4458:	232c      	movs	r3, #44	; 0x2c
    445a:	18e3      	adds	r3, r4, r3
    445c:	781a      	ldrb	r2, [r3, #0]
    445e:	b2c1      	uxtb	r1, r0
    4460:	2003      	movs	r0, #3
    4462:	4b4c      	ldr	r3, [pc, #304]	; (4594 <xTaskCreate+0x254>)
    4464:	4798      	blx	r3
    4466:	4b4c      	ldr	r3, [pc, #304]	; (4598 <xTaskCreate+0x258>)
    4468:	4798      	blx	r3
    446a:	4b4c      	ldr	r3, [pc, #304]	; (459c <xTaskCreate+0x25c>)
    446c:	4798      	blx	r3
    446e:	4b4c      	ldr	r3, [pc, #304]	; (45a0 <xTaskCreate+0x260>)
    4470:	881b      	ldrh	r3, [r3, #0]
    4472:	4203      	tst	r3, r0
    4474:	d154      	bne.n	4520 <xTaskCreate+0x1e0>
		prvAddTaskToReadyList( pxNewTCB );
    4476:	0020      	movs	r0, r4
    4478:	4b48      	ldr	r3, [pc, #288]	; (459c <xTaskCreate+0x25c>)
    447a:	4798      	blx	r3
    447c:	4b48      	ldr	r3, [pc, #288]	; (45a0 <xTaskCreate+0x260>)
    447e:	881b      	ldrh	r3, [r3, #0]
    4480:	4203      	tst	r3, r0
    4482:	d15d      	bne.n	4540 <xTaskCreate+0x200>
    4484:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4486:	4a47      	ldr	r2, [pc, #284]	; (45a4 <xTaskCreate+0x264>)
    4488:	6812      	ldr	r2, [r2, #0]
    448a:	4293      	cmp	r3, r2
    448c:	d901      	bls.n	4492 <xTaskCreate+0x152>
    448e:	4a45      	ldr	r2, [pc, #276]	; (45a4 <xTaskCreate+0x264>)
    4490:	6013      	str	r3, [r2, #0]
    4492:	0098      	lsls	r0, r3, #2
    4494:	18c0      	adds	r0, r0, r3
    4496:	0080      	lsls	r0, r0, #2
    4498:	4b43      	ldr	r3, [pc, #268]	; (45a8 <xTaskCreate+0x268>)
    449a:	1818      	adds	r0, r3, r0
    449c:	9903      	ldr	r1, [sp, #12]
    449e:	4b43      	ldr	r3, [pc, #268]	; (45ac <xTaskCreate+0x26c>)
    44a0:	4798      	blx	r3
	taskEXIT_CRITICAL();
    44a2:	4b43      	ldr	r3, [pc, #268]	; (45b0 <xTaskCreate+0x270>)
    44a4:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    44a6:	4b33      	ldr	r3, [pc, #204]	; (4574 <xTaskCreate+0x234>)
    44a8:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    44aa:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    44ac:	2b00      	cmp	r3, #0
    44ae:	d005      	beq.n	44bc <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    44b0:	4b2f      	ldr	r3, [pc, #188]	; (4570 <xTaskCreate+0x230>)
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    44b8:	429a      	cmp	r2, r3
    44ba:	d348      	bcc.n	454e <xTaskCreate+0x20e>
	}
    44bc:	b004      	add	sp, #16
    44be:	bc04      	pop	{r2}
    44c0:	4690      	mov	r8, r2
    44c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    44c4:	0030      	movs	r0, r6
    44c6:	4b3b      	ldr	r3, [pc, #236]	; (45b4 <xTaskCreate+0x274>)
    44c8:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    44ca:	2001      	movs	r0, #1
    44cc:	4240      	negs	r0, r0
    44ce:	e7f5      	b.n	44bc <xTaskCreate+0x17c>
			pxCurrentTCB = pxNewTCB;
    44d0:	4b27      	ldr	r3, [pc, #156]	; (4570 <xTaskCreate+0x230>)
    44d2:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    44d4:	6813      	ldr	r3, [r2, #0]
    44d6:	2b01      	cmp	r3, #1
    44d8:	d1a2      	bne.n	4420 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    44da:	4f33      	ldr	r7, [pc, #204]	; (45a8 <xTaskCreate+0x268>)
    44dc:	0038      	movs	r0, r7
    44de:	4e36      	ldr	r6, [pc, #216]	; (45b8 <xTaskCreate+0x278>)
    44e0:	47b0      	blx	r6
    44e2:	0038      	movs	r0, r7
    44e4:	3014      	adds	r0, #20
    44e6:	47b0      	blx	r6
    44e8:	0038      	movs	r0, r7
    44ea:	3028      	adds	r0, #40	; 0x28
    44ec:	47b0      	blx	r6
    44ee:	0038      	movs	r0, r7
    44f0:	303c      	adds	r0, #60	; 0x3c
    44f2:	47b0      	blx	r6
    44f4:	0038      	movs	r0, r7
    44f6:	3050      	adds	r0, #80	; 0x50
    44f8:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    44fa:	4b30      	ldr	r3, [pc, #192]	; (45bc <xTaskCreate+0x27c>)
    44fc:	4698      	mov	r8, r3
    44fe:	0018      	movs	r0, r3
    4500:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    4502:	4f2f      	ldr	r7, [pc, #188]	; (45c0 <xTaskCreate+0x280>)
    4504:	0038      	movs	r0, r7
    4506:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    4508:	482e      	ldr	r0, [pc, #184]	; (45c4 <xTaskCreate+0x284>)
    450a:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    450c:	482e      	ldr	r0, [pc, #184]	; (45c8 <xTaskCreate+0x288>)
    450e:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    4510:	482e      	ldr	r0, [pc, #184]	; (45cc <xTaskCreate+0x28c>)
    4512:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    4514:	4b2e      	ldr	r3, [pc, #184]	; (45d0 <xTaskCreate+0x290>)
    4516:	4642      	mov	r2, r8
    4518:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    451a:	4b2e      	ldr	r3, [pc, #184]	; (45d4 <xTaskCreate+0x294>)
    451c:	601f      	str	r7, [r3, #0]
    451e:	e77f      	b.n	4420 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
    4520:	0020      	movs	r0, r4
    4522:	4b1e      	ldr	r3, [pc, #120]	; (459c <xTaskCreate+0x25c>)
    4524:	4798      	blx	r3
    4526:	4b1e      	ldr	r3, [pc, #120]	; (45a0 <xTaskCreate+0x260>)
    4528:	881b      	ldrh	r3, [r3, #0]
    452a:	4203      	tst	r3, r0
    452c:	d0a3      	beq.n	4476 <xTaskCreate+0x136>
    452e:	0020      	movs	r0, r4
    4530:	4b16      	ldr	r3, [pc, #88]	; (458c <xTaskCreate+0x24c>)
    4532:	4798      	blx	r3
    4534:	b2c2      	uxtb	r2, r0
    4536:	2103      	movs	r1, #3
    4538:	201b      	movs	r0, #27
    453a:	4b27      	ldr	r3, [pc, #156]	; (45d8 <xTaskCreate+0x298>)
    453c:	4798      	blx	r3
    453e:	e79a      	b.n	4476 <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
    4540:	0020      	movs	r0, r4
    4542:	4b12      	ldr	r3, [pc, #72]	; (458c <xTaskCreate+0x24c>)
    4544:	4798      	blx	r3
    4546:	b2c0      	uxtb	r0, r0
    4548:	4b24      	ldr	r3, [pc, #144]	; (45dc <xTaskCreate+0x29c>)
    454a:	4798      	blx	r3
    454c:	e79a      	b.n	4484 <xTaskCreate+0x144>
			taskYIELD_IF_USING_PREEMPTION();
    454e:	4b24      	ldr	r3, [pc, #144]	; (45e0 <xTaskCreate+0x2a0>)
    4550:	4798      	blx	r3
			xReturn = pdPASS;
    4552:	2001      	movs	r0, #1
    4554:	e7b2      	b.n	44bc <xTaskCreate+0x17c>
    4556:	46c0      	nop			; (mov r8, r8)
    4558:	00002fb5 	.word	0x00002fb5
    455c:	00008d33 	.word	0x00008d33
    4560:	00002d77 	.word	0x00002d77
    4564:	00002e45 	.word	0x00002e45
    4568:	00002ef1 	.word	0x00002ef1
    456c:	20003740 	.word	0x20003740
    4570:	200036d0 	.word	0x200036d0
    4574:	200037a0 	.word	0x200037a0
    4578:	20003750 	.word	0x20003750
    457c:	000024e9 	.word	0x000024e9
    4580:	00001c9d 	.word	0x00001c9d
    4584:	2000001e 	.word	0x2000001e
    4588:	00001cbd 	.word	0x00001cbd
    458c:	00001c7d 	.word	0x00001c7d
    4590:	000025bd 	.word	0x000025bd
    4594:	0000239d 	.word	0x0000239d
    4598:	00001d45 	.word	0x00001d45
    459c:	00001c8d 	.word	0x00001c8d
    45a0:	20000020 	.word	0x20000020
    45a4:	20003754 	.word	0x20003754
    45a8:	200036dc 	.word	0x200036dc
    45ac:	00002d7d 	.word	0x00002d7d
    45b0:	00002f09 	.word	0x00002f09
    45b4:	00003045 	.word	0x00003045
    45b8:	00002d61 	.word	0x00002d61
    45bc:	20003758 	.word	0x20003758
    45c0:	2000376c 	.word	0x2000376c
    45c4:	2000378c 	.word	0x2000378c
    45c8:	200037b8 	.word	0x200037b8
    45cc:	200037a4 	.word	0x200037a4
    45d0:	200036d4 	.word	0x200036d4
    45d4:	200036d8 	.word	0x200036d8
    45d8:	0000297d 	.word	0x0000297d
    45dc:	00002815 	.word	0x00002815
    45e0:	00002ee1 	.word	0x00002ee1

000045e4 <vTaskStartScheduler>:
{
    45e4:	b510      	push	{r4, lr}
    45e6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    45e8:	4b11      	ldr	r3, [pc, #68]	; (4630 <vTaskStartScheduler+0x4c>)
    45ea:	9301      	str	r3, [sp, #4]
    45ec:	2300      	movs	r3, #0
    45ee:	9300      	str	r3, [sp, #0]
    45f0:	22fa      	movs	r2, #250	; 0xfa
    45f2:	0052      	lsls	r2, r2, #1
    45f4:	490f      	ldr	r1, [pc, #60]	; (4634 <vTaskStartScheduler+0x50>)
    45f6:	4810      	ldr	r0, [pc, #64]	; (4638 <vTaskStartScheduler+0x54>)
    45f8:	4c10      	ldr	r4, [pc, #64]	; (463c <vTaskStartScheduler+0x58>)
    45fa:	47a0      	blx	r4
		if( xReturn == pdPASS )
    45fc:	2801      	cmp	r0, #1
    45fe:	d003      	beq.n	4608 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    4600:	1c43      	adds	r3, r0, #1
    4602:	d013      	beq.n	462c <vTaskStartScheduler+0x48>
}
    4604:	b002      	add	sp, #8
    4606:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    4608:	4b0d      	ldr	r3, [pc, #52]	; (4640 <vTaskStartScheduler+0x5c>)
    460a:	4798      	blx	r3
	if( xReturn == pdPASS )
    460c:	2801      	cmp	r0, #1
    460e:	d1f7      	bne.n	4600 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    4610:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    4612:	2201      	movs	r2, #1
    4614:	4252      	negs	r2, r2
    4616:	4b0b      	ldr	r3, [pc, #44]	; (4644 <vTaskStartScheduler+0x60>)
    4618:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    461a:	3202      	adds	r2, #2
    461c:	4b0a      	ldr	r3, [pc, #40]	; (4648 <vTaskStartScheduler+0x64>)
    461e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    4620:	2200      	movs	r2, #0
    4622:	4b0a      	ldr	r3, [pc, #40]	; (464c <vTaskStartScheduler+0x68>)
    4624:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    4626:	4b0a      	ldr	r3, [pc, #40]	; (4650 <vTaskStartScheduler+0x6c>)
    4628:	4798      	blx	r3
    462a:	e7eb      	b.n	4604 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
<<<<<<< Updated upstream
    460c:	b672      	cpsid	i
    460e:	e7fe      	b.n	460e <vTaskStartScheduler+0x4a>
    4610:	20003780 	.word	0x20003780
    4614:	0000a780 	.word	0x0000a780
    4618:	00004219 	.word	0x00004219
    461c:	00004321 	.word	0x00004321
    4620:	000051e9 	.word	0x000051e9
    4624:	20003784 	.word	0x20003784
    4628:	200037a0 	.word	0x200037a0
    462c:	200037cc 	.word	0x200037cc
    4630:	00002e49 	.word	0x00002e49

00004634 <vTaskSuspendAll>:
=======
    462c:	b672      	cpsid	i
    462e:	e7fe      	b.n	462e <vTaskStartScheduler+0x4a>
    4630:	20003780 	.word	0x20003780
    4634:	0000a7ac 	.word	0x0000a7ac
    4638:	00004239 	.word	0x00004239
    463c:	00004341 	.word	0x00004341
    4640:	00005209 	.word	0x00005209
    4644:	20003784 	.word	0x20003784
    4648:	200037a0 	.word	0x200037a0
    464c:	200037cc 	.word	0x200037cc
    4650:	00002e69 	.word	0x00002e69

00004654 <vTaskSuspendAll>:
>>>>>>> Stashed changes
	++uxSchedulerSuspended;
    4654:	4a02      	ldr	r2, [pc, #8]	; (4660 <vTaskSuspendAll+0xc>)
    4656:	6813      	ldr	r3, [r2, #0]
    4658:	3301      	adds	r3, #1
    465a:	6013      	str	r3, [r2, #0]
}
    465c:	4770      	bx	lr
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	2000374c 	.word	0x2000374c

00004664 <xTaskGetTickCount>:
		xTicks = xTickCount;
    4664:	4b01      	ldr	r3, [pc, #4]	; (466c <xTaskGetTickCount+0x8>)
    4666:	6818      	ldr	r0, [r3, #0]
}
    4668:	4770      	bx	lr
    466a:	46c0      	nop			; (mov r8, r8)
    466c:	200037cc 	.word	0x200037cc

00004670 <xTaskIncrementTick>:
{
    4670:	b5f0      	push	{r4, r5, r6, r7, lr}
    4672:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
    4674:	4b4c      	ldr	r3, [pc, #304]	; (47a8 <xTaskIncrementTick+0x138>)
    4676:	681b      	ldr	r3, [r3, #0]
    4678:	2b01      	cmp	r3, #1
    467a:	d003      	beq.n	4684 <xTaskIncrementTick+0x14>
    467c:	4b4b      	ldr	r3, [pc, #300]	; (47ac <xTaskIncrementTick+0x13c>)
    467e:	681b      	ldr	r3, [r3, #0]
    4680:	2b00      	cmp	r3, #0
    4682:	d106      	bne.n	4692 <xTaskIncrementTick+0x22>
    4684:	4a4a      	ldr	r2, [pc, #296]	; (47b0 <xTaskIncrementTick+0x140>)
    4686:	6813      	ldr	r3, [r2, #0]
    4688:	3301      	adds	r3, #1
    468a:	6013      	str	r3, [r2, #0]
    468c:	2000      	movs	r0, #0
    468e:	4b49      	ldr	r3, [pc, #292]	; (47b4 <xTaskIncrementTick+0x144>)
    4690:	4798      	blx	r3
    4692:	4b45      	ldr	r3, [pc, #276]	; (47a8 <xTaskIncrementTick+0x138>)
    4694:	681b      	ldr	r3, [r3, #0]
    4696:	2b00      	cmp	r3, #0
    4698:	d010      	beq.n	46bc <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    469a:	4b43      	ldr	r3, [pc, #268]	; (47a8 <xTaskIncrementTick+0x138>)
    469c:	681b      	ldr	r3, [r3, #0]
    469e:	2b00      	cmp	r3, #0
    46a0:	d175      	bne.n	478e <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    46a2:	4b45      	ldr	r3, [pc, #276]	; (47b8 <xTaskIncrementTick+0x148>)
    46a4:	681e      	ldr	r6, [r3, #0]
    46a6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    46a8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    46aa:	2e00      	cmp	r6, #0
    46ac:	d119      	bne.n	46e2 <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
    46ae:	4b43      	ldr	r3, [pc, #268]	; (47bc <xTaskIncrementTick+0x14c>)
    46b0:	681b      	ldr	r3, [r3, #0]
    46b2:	681b      	ldr	r3, [r3, #0]
    46b4:	2b00      	cmp	r3, #0
    46b6:	d008      	beq.n	46ca <xTaskIncrementTick+0x5a>
    46b8:	b672      	cpsid	i
    46ba:	e7fe      	b.n	46ba <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
    46bc:	4b3e      	ldr	r3, [pc, #248]	; (47b8 <xTaskIncrementTick+0x148>)
    46be:	6819      	ldr	r1, [r3, #0]
    46c0:	3101      	adds	r1, #1
    46c2:	2003      	movs	r0, #3
    46c4:	4b3e      	ldr	r3, [pc, #248]	; (47c0 <xTaskIncrementTick+0x150>)
    46c6:	4798      	blx	r3
    46c8:	e7e7      	b.n	469a <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
    46ca:	4a3c      	ldr	r2, [pc, #240]	; (47bc <xTaskIncrementTick+0x14c>)
    46cc:	6811      	ldr	r1, [r2, #0]
    46ce:	4b3d      	ldr	r3, [pc, #244]	; (47c4 <xTaskIncrementTick+0x154>)
    46d0:	6818      	ldr	r0, [r3, #0]
    46d2:	6010      	str	r0, [r2, #0]
    46d4:	6019      	str	r1, [r3, #0]
    46d6:	4a3c      	ldr	r2, [pc, #240]	; (47c8 <xTaskIncrementTick+0x158>)
    46d8:	6813      	ldr	r3, [r2, #0]
    46da:	3301      	adds	r3, #1
    46dc:	6013      	str	r3, [r2, #0]
    46de:	4b3b      	ldr	r3, [pc, #236]	; (47cc <xTaskIncrementTick+0x15c>)
    46e0:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    46e2:	4b3b      	ldr	r3, [pc, #236]	; (47d0 <xTaskIncrementTick+0x160>)
    46e4:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    46e6:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    46e8:	429e      	cmp	r6, r3
    46ea:	d33a      	bcc.n	4762 <xTaskIncrementTick+0xf2>
    46ec:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    46ee:	4f33      	ldr	r7, [pc, #204]	; (47bc <xTaskIncrementTick+0x14c>)
    46f0:	683b      	ldr	r3, [r7, #0]
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	2b00      	cmp	r3, #0
    46f6:	d030      	beq.n	475a <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    46f8:	4b30      	ldr	r3, [pc, #192]	; (47bc <xTaskIncrementTick+0x14c>)
    46fa:	681b      	ldr	r3, [r3, #0]
    46fc:	68db      	ldr	r3, [r3, #12]
    46fe:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    4700:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
    4702:	429e      	cmp	r6, r3
    4704:	d339      	bcc.n	477a <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4706:	1d23      	adds	r3, r4, #4
    4708:	9301      	str	r3, [sp, #4]
    470a:	0018      	movs	r0, r3
    470c:	4b31      	ldr	r3, [pc, #196]	; (47d4 <xTaskIncrementTick+0x164>)
    470e:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4710:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4712:	2b00      	cmp	r3, #0
    4714:	d003      	beq.n	471e <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4716:	0020      	movs	r0, r4
    4718:	3018      	adds	r0, #24
    471a:	4b2e      	ldr	r3, [pc, #184]	; (47d4 <xTaskIncrementTick+0x164>)
    471c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    471e:	0020      	movs	r0, r4
    4720:	4b2d      	ldr	r3, [pc, #180]	; (47d8 <xTaskIncrementTick+0x168>)
    4722:	4798      	blx	r3
    4724:	4b2d      	ldr	r3, [pc, #180]	; (47dc <xTaskIncrementTick+0x16c>)
    4726:	881b      	ldrh	r3, [r3, #0]
    4728:	4203      	tst	r3, r0
    472a:	d129      	bne.n	4780 <xTaskIncrementTick+0x110>
    472c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    472e:	4a2c      	ldr	r2, [pc, #176]	; (47e0 <xTaskIncrementTick+0x170>)
    4730:	6812      	ldr	r2, [r2, #0]
    4732:	4293      	cmp	r3, r2
    4734:	d901      	bls.n	473a <xTaskIncrementTick+0xca>
    4736:	4a2a      	ldr	r2, [pc, #168]	; (47e0 <xTaskIncrementTick+0x170>)
    4738:	6013      	str	r3, [r2, #0]
    473a:	0098      	lsls	r0, r3, #2
    473c:	18c0      	adds	r0, r0, r3
    473e:	0080      	lsls	r0, r0, #2
    4740:	4b28      	ldr	r3, [pc, #160]	; (47e4 <xTaskIncrementTick+0x174>)
    4742:	1818      	adds	r0, r3, r0
    4744:	9901      	ldr	r1, [sp, #4]
    4746:	4b28      	ldr	r3, [pc, #160]	; (47e8 <xTaskIncrementTick+0x178>)
    4748:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    474a:	4b28      	ldr	r3, [pc, #160]	; (47ec <xTaskIncrementTick+0x17c>)
    474c:	681b      	ldr	r3, [r3, #0]
    474e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4752:	429a      	cmp	r2, r3
    4754:	d3cc      	bcc.n	46f0 <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
    4756:	2501      	movs	r5, #1
    4758:	e7ca      	b.n	46f0 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    475a:	2201      	movs	r2, #1
    475c:	4252      	negs	r2, r2
    475e:	4b1c      	ldr	r3, [pc, #112]	; (47d0 <xTaskIncrementTick+0x160>)
    4760:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    4762:	4b22      	ldr	r3, [pc, #136]	; (47ec <xTaskIncrementTick+0x17c>)
    4764:	681b      	ldr	r3, [r3, #0]
    4766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4768:	0093      	lsls	r3, r2, #2
    476a:	189b      	adds	r3, r3, r2
    476c:	009b      	lsls	r3, r3, #2
    476e:	4a1d      	ldr	r2, [pc, #116]	; (47e4 <xTaskIncrementTick+0x174>)
    4770:	589b      	ldr	r3, [r3, r2]
    4772:	2b01      	cmp	r3, #1
    4774:	d910      	bls.n	4798 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
    4776:	2501      	movs	r5, #1
    4778:	e00e      	b.n	4798 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
    477a:	4a15      	ldr	r2, [pc, #84]	; (47d0 <xTaskIncrementTick+0x160>)
    477c:	6013      	str	r3, [r2, #0]
						break;
    477e:	e7f0      	b.n	4762 <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
    4780:	0020      	movs	r0, r4
    4782:	4b1b      	ldr	r3, [pc, #108]	; (47f0 <xTaskIncrementTick+0x180>)
    4784:	4798      	blx	r3
    4786:	b2c0      	uxtb	r0, r0
    4788:	4b1a      	ldr	r3, [pc, #104]	; (47f4 <xTaskIncrementTick+0x184>)
    478a:	4798      	blx	r3
    478c:	e7ce      	b.n	472c <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
    478e:	4a07      	ldr	r2, [pc, #28]	; (47ac <xTaskIncrementTick+0x13c>)
    4790:	6813      	ldr	r3, [r2, #0]
    4792:	3301      	adds	r3, #1
    4794:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    4796:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
    4798:	4b17      	ldr	r3, [pc, #92]	; (47f8 <xTaskIncrementTick+0x188>)
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	2b00      	cmp	r3, #0
    479e:	d000      	beq.n	47a2 <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
    47a0:	2501      	movs	r5, #1
}
    47a2:	0028      	movs	r0, r5
    47a4:	b003      	add	sp, #12
    47a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47a8:	2000374c 	.word	0x2000374c
    47ac:	20003748 	.word	0x20003748
    47b0:	200003f8 	.word	0x200003f8
    47b4:	0000264d 	.word	0x0000264d
    47b8:	200037cc 	.word	0x200037cc
    47bc:	200036d4 	.word	0x200036d4
    47c0:	00002b19 	.word	0x00002b19
    47c4:	200036d8 	.word	0x200036d8
    47c8:	20003788 	.word	0x20003788
    47cc:	0000420d 	.word	0x0000420d
    47d0:	20003784 	.word	0x20003784
    47d4:	00002dc3 	.word	0x00002dc3
    47d8:	00001c8d 	.word	0x00001c8d
    47dc:	20000020 	.word	0x20000020
    47e0:	20003754 	.word	0x20003754
    47e4:	200036dc 	.word	0x200036dc
    47e8:	00002d7d 	.word	0x00002d7d
    47ec:	200036d0 	.word	0x200036d0
    47f0:	00001c7d 	.word	0x00001c7d
    47f4:	00002815 	.word	0x00002815
    47f8:	200037d0 	.word	0x200037d0

000047fc <xTaskResumeAll>:
{
    47fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    47fe:	4b37      	ldr	r3, [pc, #220]	; (48dc <xTaskResumeAll+0xe0>)
    4800:	681b      	ldr	r3, [r3, #0]
    4802:	2b00      	cmp	r3, #0
    4804:	d101      	bne.n	480a <xTaskResumeAll+0xe>
    4806:	b672      	cpsid	i
    4808:	e7fe      	b.n	4808 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    480a:	4b35      	ldr	r3, [pc, #212]	; (48e0 <xTaskResumeAll+0xe4>)
    480c:	4798      	blx	r3
		--uxSchedulerSuspended;
    480e:	4b33      	ldr	r3, [pc, #204]	; (48dc <xTaskResumeAll+0xe0>)
    4810:	681a      	ldr	r2, [r3, #0]
    4812:	3a01      	subs	r2, #1
    4814:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4816:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    4818:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    481a:	2b00      	cmp	r3, #0
    481c:	d103      	bne.n	4826 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    481e:	4b31      	ldr	r3, [pc, #196]	; (48e4 <xTaskResumeAll+0xe8>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	2b00      	cmp	r3, #0
    4824:	d136      	bne.n	4894 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
    4826:	4b30      	ldr	r3, [pc, #192]	; (48e8 <xTaskResumeAll+0xec>)
    4828:	4798      	blx	r3
}
    482a:	0020      	movs	r0, r4
    482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
    482e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4830:	4a2e      	ldr	r2, [pc, #184]	; (48ec <xTaskResumeAll+0xf0>)
    4832:	6812      	ldr	r2, [r2, #0]
    4834:	4293      	cmp	r3, r2
    4836:	d901      	bls.n	483c <xTaskResumeAll+0x40>
    4838:	4a2c      	ldr	r2, [pc, #176]	; (48ec <xTaskResumeAll+0xf0>)
    483a:	6013      	str	r3, [r2, #0]
    483c:	0098      	lsls	r0, r3, #2
    483e:	18c0      	adds	r0, r0, r3
    4840:	0080      	lsls	r0, r0, #2
    4842:	4b2b      	ldr	r3, [pc, #172]	; (48f0 <xTaskResumeAll+0xf4>)
    4844:	1818      	adds	r0, r3, r0
    4846:	0031      	movs	r1, r6
    4848:	4b2a      	ldr	r3, [pc, #168]	; (48f4 <xTaskResumeAll+0xf8>)
    484a:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    484c:	4b2a      	ldr	r3, [pc, #168]	; (48f8 <xTaskResumeAll+0xfc>)
    484e:	681b      	ldr	r3, [r3, #0]
    4850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4852:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4854:	429a      	cmp	r2, r3
    4856:	d302      	bcc.n	485e <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
    4858:	2201      	movs	r2, #1
    485a:	4b28      	ldr	r3, [pc, #160]	; (48fc <xTaskResumeAll+0x100>)
    485c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    485e:	682b      	ldr	r3, [r5, #0]
    4860:	2b00      	cmp	r3, #0
    4862:	d01a      	beq.n	489a <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4864:	68fb      	ldr	r3, [r7, #12]
    4866:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4868:	0020      	movs	r0, r4
    486a:	3018      	adds	r0, #24
    486c:	4b24      	ldr	r3, [pc, #144]	; (4900 <xTaskResumeAll+0x104>)
    486e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4870:	1d26      	adds	r6, r4, #4
    4872:	0030      	movs	r0, r6
    4874:	4b22      	ldr	r3, [pc, #136]	; (4900 <xTaskResumeAll+0x104>)
    4876:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    4878:	0020      	movs	r0, r4
    487a:	4b22      	ldr	r3, [pc, #136]	; (4904 <xTaskResumeAll+0x108>)
    487c:	4798      	blx	r3
    487e:	4b22      	ldr	r3, [pc, #136]	; (4908 <xTaskResumeAll+0x10c>)
    4880:	881b      	ldrh	r3, [r3, #0]
    4882:	4203      	tst	r3, r0
    4884:	d0d3      	beq.n	482e <xTaskResumeAll+0x32>
    4886:	0020      	movs	r0, r4
    4888:	4b20      	ldr	r3, [pc, #128]	; (490c <xTaskResumeAll+0x110>)
    488a:	4798      	blx	r3
    488c:	b2c0      	uxtb	r0, r0
    488e:	4b20      	ldr	r3, [pc, #128]	; (4910 <xTaskResumeAll+0x114>)
    4890:	4798      	blx	r3
    4892:	e7cc      	b.n	482e <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4894:	4d1f      	ldr	r5, [pc, #124]	; (4914 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4896:	002f      	movs	r7, r5
    4898:	e7e1      	b.n	485e <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
    489a:	2c00      	cmp	r4, #0
    489c:	d001      	beq.n	48a2 <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
    489e:	4b1e      	ldr	r3, [pc, #120]	; (4918 <xTaskResumeAll+0x11c>)
    48a0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    48a2:	4b1e      	ldr	r3, [pc, #120]	; (491c <xTaskResumeAll+0x120>)
    48a4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    48a6:	2c00      	cmp	r4, #0
    48a8:	d00e      	beq.n	48c8 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
    48aa:	4f1d      	ldr	r7, [pc, #116]	; (4920 <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
    48ac:	4e13      	ldr	r6, [pc, #76]	; (48fc <xTaskResumeAll+0x100>)
    48ae:	2501      	movs	r5, #1
    48b0:	e002      	b.n	48b8 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
    48b2:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    48b4:	2c00      	cmp	r4, #0
    48b6:	d004      	beq.n	48c2 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
    48b8:	47b8      	blx	r7
    48ba:	2800      	cmp	r0, #0
    48bc:	d0f9      	beq.n	48b2 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
    48be:	6035      	str	r5, [r6, #0]
    48c0:	e7f7      	b.n	48b2 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
    48c2:	2200      	movs	r2, #0
    48c4:	4b15      	ldr	r3, [pc, #84]	; (491c <xTaskResumeAll+0x120>)
    48c6:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    48c8:	4b0c      	ldr	r3, [pc, #48]	; (48fc <xTaskResumeAll+0x100>)
    48ca:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    48cc:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    48ce:	2b00      	cmp	r3, #0
    48d0:	d0a9      	beq.n	4826 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    48d2:	4b14      	ldr	r3, [pc, #80]	; (4924 <xTaskResumeAll+0x128>)
    48d4:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    48d6:	3401      	adds	r4, #1
    48d8:	e7a5      	b.n	4826 <xTaskResumeAll+0x2a>
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	2000374c 	.word	0x2000374c
    48e0:	00002ef1 	.word	0x00002ef1
    48e4:	20003740 	.word	0x20003740
    48e8:	00002f09 	.word	0x00002f09
    48ec:	20003754 	.word	0x20003754
    48f0:	200036dc 	.word	0x200036dc
    48f4:	00002d7d 	.word	0x00002d7d
    48f8:	200036d0 	.word	0x200036d0
    48fc:	200037d0 	.word	0x200037d0
    4900:	00002dc3 	.word	0x00002dc3
    4904:	00001c8d 	.word	0x00001c8d
    4908:	20000020 	.word	0x20000020
    490c:	00001c7d 	.word	0x00001c7d
    4910:	00002815 	.word	0x00002815
    4914:	2000378c 	.word	0x2000378c
    4918:	0000420d 	.word	0x0000420d
    491c:	20003748 	.word	0x20003748
    4920:	00004671 	.word	0x00004671
    4924:	00002ee1 	.word	0x00002ee1

00004928 <vTaskDelay>:
	{
    4928:	b510      	push	{r4, lr}
    492a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    492c:	d031      	beq.n	4992 <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
    492e:	4b1a      	ldr	r3, [pc, #104]	; (4998 <vTaskDelay+0x70>)
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	2b00      	cmp	r3, #0
    4934:	d001      	beq.n	493a <vTaskDelay+0x12>
    4936:	b672      	cpsid	i
    4938:	e7fe      	b.n	4938 <vTaskDelay+0x10>
			vTaskSuspendAll();
    493a:	4b18      	ldr	r3, [pc, #96]	; (499c <vTaskDelay+0x74>)
    493c:	4798      	blx	r3
				traceTASK_DELAY();
    493e:	4b18      	ldr	r3, [pc, #96]	; (49a0 <vTaskDelay+0x78>)
    4940:	6818      	ldr	r0, [r3, #0]
    4942:	4b18      	ldr	r3, [pc, #96]	; (49a4 <vTaskDelay+0x7c>)
    4944:	4798      	blx	r3
    4946:	4b18      	ldr	r3, [pc, #96]	; (49a8 <vTaskDelay+0x80>)
    4948:	881b      	ldrh	r3, [r3, #0]
    494a:	4203      	tst	r3, r0
    494c:	d00a      	beq.n	4964 <vTaskDelay+0x3c>
    494e:	0021      	movs	r1, r4
    4950:	2089      	movs	r0, #137	; 0x89
    4952:	4b16      	ldr	r3, [pc, #88]	; (49ac <vTaskDelay+0x84>)
    4954:	4798      	blx	r3
    4956:	4b12      	ldr	r3, [pc, #72]	; (49a0 <vTaskDelay+0x78>)
    4958:	6818      	ldr	r0, [r3, #0]
    495a:	4b15      	ldr	r3, [pc, #84]	; (49b0 <vTaskDelay+0x88>)
    495c:	4798      	blx	r3
    495e:	b2c0      	uxtb	r0, r0
    4960:	4b14      	ldr	r3, [pc, #80]	; (49b4 <vTaskDelay+0x8c>)
    4962:	4798      	blx	r3
    4964:	4b14      	ldr	r3, [pc, #80]	; (49b8 <vTaskDelay+0x90>)
    4966:	4798      	blx	r3
    4968:	4b0e      	ldr	r3, [pc, #56]	; (49a4 <vTaskDelay+0x7c>)
    496a:	4798      	blx	r3
    496c:	4b0e      	ldr	r3, [pc, #56]	; (49a8 <vTaskDelay+0x80>)
    496e:	881b      	ldrh	r3, [r3, #0]
    4970:	4203      	tst	r3, r0
    4972:	d006      	beq.n	4982 <vTaskDelay+0x5a>
    4974:	4b10      	ldr	r3, [pc, #64]	; (49b8 <vTaskDelay+0x90>)
    4976:	4798      	blx	r3
    4978:	4b0d      	ldr	r3, [pc, #52]	; (49b0 <vTaskDelay+0x88>)
    497a:	4798      	blx	r3
    497c:	b2c0      	uxtb	r0, r0
    497e:	4b0d      	ldr	r3, [pc, #52]	; (49b4 <vTaskDelay+0x8c>)
    4980:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    4982:	2100      	movs	r1, #0
    4984:	0020      	movs	r0, r4
    4986:	4b0d      	ldr	r3, [pc, #52]	; (49bc <vTaskDelay+0x94>)
    4988:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    498a:	4b0d      	ldr	r3, [pc, #52]	; (49c0 <vTaskDelay+0x98>)
    498c:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    498e:	2800      	cmp	r0, #0
    4990:	d101      	bne.n	4996 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
    4992:	4b0c      	ldr	r3, [pc, #48]	; (49c4 <vTaskDelay+0x9c>)
    4994:	4798      	blx	r3
	}
    4996:	bd10      	pop	{r4, pc}
    4998:	2000374c 	.word	0x2000374c
    499c:	00004655 	.word	0x00004655
    49a0:	200036d0 	.word	0x200036d0
    49a4:	00001c8d 	.word	0x00001c8d
    49a8:	20000020 	.word	0x20000020
    49ac:	00002b19 	.word	0x00002b19
    49b0:	00001c7d 	.word	0x00001c7d
    49b4:	000024a9 	.word	0x000024a9
    49b8:	00001d45 	.word	0x00001d45
    49bc:	000042b9 	.word	0x000042b9
    49c0:	000047fd 	.word	0x000047fd
    49c4:	00002ee1 	.word	0x00002ee1

000049c8 <vTaskSwitchContext>:
{
    49c8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    49ca:	4b33      	ldr	r3, [pc, #204]	; (4a98 <vTaskSwitchContext+0xd0>)
    49cc:	681b      	ldr	r3, [r3, #0]
    49ce:	2b00      	cmp	r3, #0
    49d0:	d125      	bne.n	4a1e <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    49d2:	2200      	movs	r2, #0
    49d4:	4b31      	ldr	r3, [pc, #196]	; (4a9c <vTaskSwitchContext+0xd4>)
    49d6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    49d8:	4b31      	ldr	r3, [pc, #196]	; (4aa0 <vTaskSwitchContext+0xd8>)
    49da:	681a      	ldr	r2, [r3, #0]
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	6812      	ldr	r2, [r2, #0]
    49e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    49e2:	429a      	cmp	r2, r3
    49e4:	d805      	bhi.n	49f2 <vTaskSwitchContext+0x2a>
    49e6:	4b2e      	ldr	r3, [pc, #184]	; (4aa0 <vTaskSwitchContext+0xd8>)
    49e8:	6818      	ldr	r0, [r3, #0]
    49ea:	6819      	ldr	r1, [r3, #0]
    49ec:	3134      	adds	r1, #52	; 0x34
    49ee:	4b2d      	ldr	r3, [pc, #180]	; (4aa4 <vTaskSwitchContext+0xdc>)
    49f0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    49f2:	4b2d      	ldr	r3, [pc, #180]	; (4aa8 <vTaskSwitchContext+0xe0>)
    49f4:	681b      	ldr	r3, [r3, #0]
    49f6:	009a      	lsls	r2, r3, #2
    49f8:	18d2      	adds	r2, r2, r3
    49fa:	0092      	lsls	r2, r2, #2
    49fc:	492b      	ldr	r1, [pc, #172]	; (4aac <vTaskSwitchContext+0xe4>)
    49fe:	5852      	ldr	r2, [r2, r1]
    4a00:	2a00      	cmp	r2, #0
    4a02:	d110      	bne.n	4a26 <vTaskSwitchContext+0x5e>
    4a04:	2b00      	cmp	r3, #0
    4a06:	d008      	beq.n	4a1a <vTaskSwitchContext+0x52>
    4a08:	3b01      	subs	r3, #1
    4a0a:	009a      	lsls	r2, r3, #2
    4a0c:	18d2      	adds	r2, r2, r3
    4a0e:	0092      	lsls	r2, r2, #2
    4a10:	5852      	ldr	r2, [r2, r1]
    4a12:	2a00      	cmp	r2, #0
    4a14:	d107      	bne.n	4a26 <vTaskSwitchContext+0x5e>
    4a16:	2b00      	cmp	r3, #0
    4a18:	d1f6      	bne.n	4a08 <vTaskSwitchContext+0x40>
    4a1a:	b672      	cpsid	i
    4a1c:	e7fe      	b.n	4a1c <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    4a1e:	2201      	movs	r2, #1
    4a20:	4b1e      	ldr	r3, [pc, #120]	; (4a9c <vTaskSwitchContext+0xd4>)
    4a22:	601a      	str	r2, [r3, #0]
}
    4a24:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4a26:	4821      	ldr	r0, [pc, #132]	; (4aac <vTaskSwitchContext+0xe4>)
    4a28:	009a      	lsls	r2, r3, #2
    4a2a:	18d1      	adds	r1, r2, r3
    4a2c:	0089      	lsls	r1, r1, #2
    4a2e:	1841      	adds	r1, r0, r1
    4a30:	684c      	ldr	r4, [r1, #4]
    4a32:	6864      	ldr	r4, [r4, #4]
    4a34:	604c      	str	r4, [r1, #4]
    4a36:	18d2      	adds	r2, r2, r3
    4a38:	0092      	lsls	r2, r2, #2
    4a3a:	3208      	adds	r2, #8
    4a3c:	1882      	adds	r2, r0, r2
    4a3e:	4294      	cmp	r4, r2
    4a40:	d019      	beq.n	4a76 <vTaskSwitchContext+0xae>
    4a42:	009a      	lsls	r2, r3, #2
    4a44:	18d2      	adds	r2, r2, r3
    4a46:	0092      	lsls	r2, r2, #2
    4a48:	4918      	ldr	r1, [pc, #96]	; (4aac <vTaskSwitchContext+0xe4>)
    4a4a:	188a      	adds	r2, r1, r2
    4a4c:	6852      	ldr	r2, [r2, #4]
    4a4e:	68d1      	ldr	r1, [r2, #12]
    4a50:	4a13      	ldr	r2, [pc, #76]	; (4aa0 <vTaskSwitchContext+0xd8>)
    4a52:	6011      	str	r1, [r2, #0]
    4a54:	4a14      	ldr	r2, [pc, #80]	; (4aa8 <vTaskSwitchContext+0xe0>)
    4a56:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
    4a58:	2201      	movs	r2, #1
    4a5a:	4b15      	ldr	r3, [pc, #84]	; (4ab0 <vTaskSwitchContext+0xe8>)
    4a5c:	601a      	str	r2, [r3, #0]
    4a5e:	4b15      	ldr	r3, [pc, #84]	; (4ab4 <vTaskSwitchContext+0xec>)
    4a60:	4798      	blx	r3
    4a62:	4b15      	ldr	r3, [pc, #84]	; (4ab8 <vTaskSwitchContext+0xf0>)
    4a64:	4798      	blx	r3
    4a66:	4b15      	ldr	r3, [pc, #84]	; (4abc <vTaskSwitchContext+0xf4>)
    4a68:	881b      	ldrh	r3, [r3, #0]
    4a6a:	4203      	tst	r3, r0
    4a6c:	d10b      	bne.n	4a86 <vTaskSwitchContext+0xbe>
    4a6e:	2202      	movs	r2, #2
    4a70:	4b0f      	ldr	r3, [pc, #60]	; (4ab0 <vTaskSwitchContext+0xe8>)
    4a72:	601a      	str	r2, [r3, #0]
}
    4a74:	e7d6      	b.n	4a24 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4a76:	6860      	ldr	r0, [r4, #4]
    4a78:	009a      	lsls	r2, r3, #2
    4a7a:	18d2      	adds	r2, r2, r3
    4a7c:	0092      	lsls	r2, r2, #2
    4a7e:	490b      	ldr	r1, [pc, #44]	; (4aac <vTaskSwitchContext+0xe4>)
    4a80:	188a      	adds	r2, r1, r2
    4a82:	6050      	str	r0, [r2, #4]
    4a84:	e7dd      	b.n	4a42 <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
    4a86:	4b0b      	ldr	r3, [pc, #44]	; (4ab4 <vTaskSwitchContext+0xec>)
    4a88:	4798      	blx	r3
    4a8a:	4b0d      	ldr	r3, [pc, #52]	; (4ac0 <vTaskSwitchContext+0xf8>)
    4a8c:	4798      	blx	r3
    4a8e:	b2c0      	uxtb	r0, r0
    4a90:	4b0c      	ldr	r3, [pc, #48]	; (4ac4 <vTaskSwitchContext+0xfc>)
    4a92:	4798      	blx	r3
    4a94:	e7eb      	b.n	4a6e <vTaskSwitchContext+0xa6>
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	2000374c 	.word	0x2000374c
    4a9c:	200037d0 	.word	0x200037d0
    4aa0:	200036d0 	.word	0x200036d0
    4aa4:	00006f5d 	.word	0x00006f5d
    4aa8:	20003754 	.word	0x20003754
    4aac:	200036dc 	.word	0x200036dc
    4ab0:	200003f4 	.word	0x200003f4
    4ab4:	00001d45 	.word	0x00001d45
    4ab8:	00001c8d 	.word	0x00001c8d
    4abc:	20000020 	.word	0x20000020
    4ac0:	00001c7d 	.word	0x00001c7d
    4ac4:	00002bc1 	.word	0x00002bc1

00004ac8 <vTaskSuspend>:
	{
    4ac8:	b570      	push	{r4, r5, r6, lr}
    4aca:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
    4acc:	4b33      	ldr	r3, [pc, #204]	; (4b9c <vTaskSuspend+0xd4>)
    4ace:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4ad0:	1e2c      	subs	r4, r5, #0
    4ad2:	d02b      	beq.n	4b2c <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
    4ad4:	4b32      	ldr	r3, [pc, #200]	; (4ba0 <vTaskSuspend+0xd8>)
    4ad6:	4798      	blx	r3
    4ad8:	4b32      	ldr	r3, [pc, #200]	; (4ba4 <vTaskSuspend+0xdc>)
    4ada:	4798      	blx	r3
    4adc:	4b32      	ldr	r3, [pc, #200]	; (4ba8 <vTaskSuspend+0xe0>)
    4ade:	881b      	ldrh	r3, [r3, #0]
    4ae0:	4203      	tst	r3, r0
    4ae2:	d126      	bne.n	4b32 <vTaskSuspend+0x6a>
    4ae4:	0020      	movs	r0, r4
    4ae6:	4b31      	ldr	r3, [pc, #196]	; (4bac <vTaskSuspend+0xe4>)
    4ae8:	4798      	blx	r3
    4aea:	b2c0      	uxtb	r0, r0
    4aec:	4b30      	ldr	r3, [pc, #192]	; (4bb0 <vTaskSuspend+0xe8>)
    4aee:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4af0:	1d25      	adds	r5, r4, #4
    4af2:	0028      	movs	r0, r5
    4af4:	4b2f      	ldr	r3, [pc, #188]	; (4bb4 <vTaskSuspend+0xec>)
    4af6:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    4af8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4afa:	2b00      	cmp	r3, #0
    4afc:	d003      	beq.n	4b06 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4afe:	0020      	movs	r0, r4
    4b00:	3018      	adds	r0, #24
    4b02:	4b2c      	ldr	r3, [pc, #176]	; (4bb4 <vTaskSuspend+0xec>)
    4b04:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    4b06:	0029      	movs	r1, r5
    4b08:	482b      	ldr	r0, [pc, #172]	; (4bb8 <vTaskSuspend+0xf0>)
    4b0a:	4b2c      	ldr	r3, [pc, #176]	; (4bbc <vTaskSuspend+0xf4>)
    4b0c:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    4b0e:	2350      	movs	r3, #80	; 0x50
    4b10:	5ce3      	ldrb	r3, [r4, r3]
    4b12:	2b01      	cmp	r3, #1
    4b14:	d01d      	beq.n	4b52 <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
    4b16:	4b2a      	ldr	r3, [pc, #168]	; (4bc0 <vTaskSuspend+0xf8>)
    4b18:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    4b1a:	4b2a      	ldr	r3, [pc, #168]	; (4bc4 <vTaskSuspend+0xfc>)
    4b1c:	681b      	ldr	r3, [r3, #0]
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d11b      	bne.n	4b5a <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
    4b22:	4b29      	ldr	r3, [pc, #164]	; (4bc8 <vTaskSuspend+0x100>)
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	429c      	cmp	r4, r3
    4b28:	d01e      	beq.n	4b68 <vTaskSuspend+0xa0>
	}
    4b2a:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    4b2c:	4b26      	ldr	r3, [pc, #152]	; (4bc8 <vTaskSuspend+0x100>)
    4b2e:	681c      	ldr	r4, [r3, #0]
    4b30:	e7d0      	b.n	4ad4 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
    4b32:	0020      	movs	r0, r4
    4b34:	4b1b      	ldr	r3, [pc, #108]	; (4ba4 <vTaskSuspend+0xdc>)
    4b36:	4798      	blx	r3
    4b38:	4b1b      	ldr	r3, [pc, #108]	; (4ba8 <vTaskSuspend+0xe0>)
    4b3a:	881b      	ldrh	r3, [r3, #0]
    4b3c:	4203      	tst	r3, r0
    4b3e:	d0d1      	beq.n	4ae4 <vTaskSuspend+0x1c>
    4b40:	0020      	movs	r0, r4
    4b42:	4b1a      	ldr	r3, [pc, #104]	; (4bac <vTaskSuspend+0xe4>)
    4b44:	4798      	blx	r3
    4b46:	b2c2      	uxtb	r2, r0
    4b48:	2103      	movs	r1, #3
    4b4a:	208a      	movs	r0, #138	; 0x8a
    4b4c:	4b1f      	ldr	r3, [pc, #124]	; (4bcc <vTaskSuspend+0x104>)
    4b4e:	4798      	blx	r3
    4b50:	e7c8      	b.n	4ae4 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4b52:	2200      	movs	r2, #0
    4b54:	334f      	adds	r3, #79	; 0x4f
    4b56:	54e2      	strb	r2, [r4, r3]
    4b58:	e7dd      	b.n	4b16 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
    4b5a:	4b10      	ldr	r3, [pc, #64]	; (4b9c <vTaskSuspend+0xd4>)
    4b5c:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
    4b5e:	4b1c      	ldr	r3, [pc, #112]	; (4bd0 <vTaskSuspend+0x108>)
    4b60:	4798      	blx	r3
			taskEXIT_CRITICAL();
    4b62:	4b17      	ldr	r3, [pc, #92]	; (4bc0 <vTaskSuspend+0xf8>)
    4b64:	4798      	blx	r3
    4b66:	e7dc      	b.n	4b22 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
    4b68:	4b16      	ldr	r3, [pc, #88]	; (4bc4 <vTaskSuspend+0xfc>)
    4b6a:	681b      	ldr	r3, [r3, #0]
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d008      	beq.n	4b82 <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
    4b70:	4b18      	ldr	r3, [pc, #96]	; (4bd4 <vTaskSuspend+0x10c>)
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	2b00      	cmp	r3, #0
    4b76:	d001      	beq.n	4b7c <vTaskSuspend+0xb4>
    4b78:	b672      	cpsid	i
    4b7a:	e7fe      	b.n	4b7a <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
    4b7c:	4b16      	ldr	r3, [pc, #88]	; (4bd8 <vTaskSuspend+0x110>)
    4b7e:	4798      	blx	r3
    4b80:	e7d3      	b.n	4b2a <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4b82:	4b0d      	ldr	r3, [pc, #52]	; (4bb8 <vTaskSuspend+0xf0>)
    4b84:	681a      	ldr	r2, [r3, #0]
    4b86:	4b15      	ldr	r3, [pc, #84]	; (4bdc <vTaskSuspend+0x114>)
    4b88:	681b      	ldr	r3, [r3, #0]
    4b8a:	429a      	cmp	r2, r3
    4b8c:	d002      	beq.n	4b94 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
    4b8e:	4b14      	ldr	r3, [pc, #80]	; (4be0 <vTaskSuspend+0x118>)
    4b90:	4798      	blx	r3
	}
    4b92:	e7ca      	b.n	4b2a <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
    4b94:	2200      	movs	r2, #0
    4b96:	4b0c      	ldr	r3, [pc, #48]	; (4bc8 <vTaskSuspend+0x100>)
    4b98:	601a      	str	r2, [r3, #0]
    4b9a:	e7c6      	b.n	4b2a <vTaskSuspend+0x62>
    4b9c:	00002ef1 	.word	0x00002ef1
    4ba0:	00001d45 	.word	0x00001d45
    4ba4:	00001c8d 	.word	0x00001c8d
    4ba8:	20000020 	.word	0x20000020
    4bac:	00001c7d 	.word	0x00001c7d
    4bb0:	000024a9 	.word	0x000024a9
    4bb4:	00002dc3 	.word	0x00002dc3
    4bb8:	200037a4 	.word	0x200037a4
    4bbc:	00002d7d 	.word	0x00002d7d
    4bc0:	00002f09 	.word	0x00002f09
    4bc4:	200037a0 	.word	0x200037a0
    4bc8:	200036d0 	.word	0x200036d0
    4bcc:	0000297d 	.word	0x0000297d
    4bd0:	0000420d 	.word	0x0000420d
    4bd4:	2000374c 	.word	0x2000374c
    4bd8:	00002ee1 	.word	0x00002ee1
    4bdc:	20003740 	.word	0x20003740
    4be0:	000049c9 	.word	0x000049c9

00004be4 <vTaskPlaceOnEventList>:
{
    4be4:	b510      	push	{r4, lr}
    4be6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    4be8:	2800      	cmp	r0, #0
    4bea:	d101      	bne.n	4bf0 <vTaskPlaceOnEventList+0xc>
    4bec:	b672      	cpsid	i
    4bee:	e7fe      	b.n	4bee <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4bf0:	4b04      	ldr	r3, [pc, #16]	; (4c04 <vTaskPlaceOnEventList+0x20>)
    4bf2:	6819      	ldr	r1, [r3, #0]
    4bf4:	3118      	adds	r1, #24
    4bf6:	4b04      	ldr	r3, [pc, #16]	; (4c08 <vTaskPlaceOnEventList+0x24>)
    4bf8:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4bfa:	2101      	movs	r1, #1
    4bfc:	0020      	movs	r0, r4
    4bfe:	4b03      	ldr	r3, [pc, #12]	; (4c0c <vTaskPlaceOnEventList+0x28>)
    4c00:	4798      	blx	r3
}
    4c02:	bd10      	pop	{r4, pc}
    4c04:	200036d0 	.word	0x200036d0
    4c08:	00002d95 	.word	0x00002d95
    4c0c:	000042b9 	.word	0x000042b9

00004c10 <vTaskPlaceOnEventListRestricted>:
	{
    4c10:	b570      	push	{r4, r5, r6, lr}
    4c12:	000c      	movs	r4, r1
    4c14:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    4c16:	2800      	cmp	r0, #0
    4c18:	d031      	beq.n	4c7e <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    4c1a:	4b1a      	ldr	r3, [pc, #104]	; (4c84 <vTaskPlaceOnEventListRestricted+0x74>)
    4c1c:	6819      	ldr	r1, [r3, #0]
    4c1e:	3118      	adds	r1, #24
    4c20:	4b19      	ldr	r3, [pc, #100]	; (4c88 <vTaskPlaceOnEventListRestricted+0x78>)
    4c22:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    4c24:	2d00      	cmp	r5, #0
    4c26:	d001      	beq.n	4c2c <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    4c28:	2401      	movs	r4, #1
    4c2a:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    4c2c:	4b15      	ldr	r3, [pc, #84]	; (4c84 <vTaskPlaceOnEventListRestricted+0x74>)
    4c2e:	6818      	ldr	r0, [r3, #0]
    4c30:	4b16      	ldr	r3, [pc, #88]	; (4c8c <vTaskPlaceOnEventListRestricted+0x7c>)
    4c32:	4798      	blx	r3
    4c34:	4b16      	ldr	r3, [pc, #88]	; (4c90 <vTaskPlaceOnEventListRestricted+0x80>)
    4c36:	881b      	ldrh	r3, [r3, #0]
    4c38:	4203      	tst	r3, r0
    4c3a:	d00c      	beq.n	4c56 <vTaskPlaceOnEventListRestricted+0x46>
    4c3c:	4b15      	ldr	r3, [pc, #84]	; (4c94 <vTaskPlaceOnEventListRestricted+0x84>)
    4c3e:	6819      	ldr	r1, [r3, #0]
    4c40:	1861      	adds	r1, r4, r1
    4c42:	2088      	movs	r0, #136	; 0x88
    4c44:	4b14      	ldr	r3, [pc, #80]	; (4c98 <vTaskPlaceOnEventListRestricted+0x88>)
    4c46:	4798      	blx	r3
    4c48:	4b0e      	ldr	r3, [pc, #56]	; (4c84 <vTaskPlaceOnEventListRestricted+0x74>)
    4c4a:	6818      	ldr	r0, [r3, #0]
    4c4c:	4b13      	ldr	r3, [pc, #76]	; (4c9c <vTaskPlaceOnEventListRestricted+0x8c>)
    4c4e:	4798      	blx	r3
    4c50:	b2c0      	uxtb	r0, r0
    4c52:	4b13      	ldr	r3, [pc, #76]	; (4ca0 <vTaskPlaceOnEventListRestricted+0x90>)
    4c54:	4798      	blx	r3
    4c56:	4b13      	ldr	r3, [pc, #76]	; (4ca4 <vTaskPlaceOnEventListRestricted+0x94>)
    4c58:	4798      	blx	r3
    4c5a:	4b0c      	ldr	r3, [pc, #48]	; (4c8c <vTaskPlaceOnEventListRestricted+0x7c>)
    4c5c:	4798      	blx	r3
    4c5e:	4b0c      	ldr	r3, [pc, #48]	; (4c90 <vTaskPlaceOnEventListRestricted+0x80>)
    4c60:	881b      	ldrh	r3, [r3, #0]
    4c62:	4203      	tst	r3, r0
    4c64:	d006      	beq.n	4c74 <vTaskPlaceOnEventListRestricted+0x64>
    4c66:	4b0f      	ldr	r3, [pc, #60]	; (4ca4 <vTaskPlaceOnEventListRestricted+0x94>)
    4c68:	4798      	blx	r3
    4c6a:	4b0c      	ldr	r3, [pc, #48]	; (4c9c <vTaskPlaceOnEventListRestricted+0x8c>)
    4c6c:	4798      	blx	r3
    4c6e:	b2c0      	uxtb	r0, r0
    4c70:	4b0b      	ldr	r3, [pc, #44]	; (4ca0 <vTaskPlaceOnEventListRestricted+0x90>)
    4c72:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    4c74:	0029      	movs	r1, r5
    4c76:	0020      	movs	r0, r4
    4c78:	4b0b      	ldr	r3, [pc, #44]	; (4ca8 <vTaskPlaceOnEventListRestricted+0x98>)
    4c7a:	4798      	blx	r3
	}
    4c7c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    4c7e:	b672      	cpsid	i
    4c80:	e7fe      	b.n	4c80 <vTaskPlaceOnEventListRestricted+0x70>
    4c82:	46c0      	nop			; (mov r8, r8)
    4c84:	200036d0 	.word	0x200036d0
    4c88:	00002d7d 	.word	0x00002d7d
    4c8c:	00001c8d 	.word	0x00001c8d
    4c90:	20000020 	.word	0x20000020
    4c94:	200037cc 	.word	0x200037cc
    4c98:	00002b19 	.word	0x00002b19
    4c9c:	00001c7d 	.word	0x00001c7d
    4ca0:	000024a9 	.word	0x000024a9
    4ca4:	00001d45 	.word	0x00001d45
    4ca8:	000042b9 	.word	0x000042b9

00004cac <xTaskRemoveFromEventList>:
{
    4cac:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4cae:	68c3      	ldr	r3, [r0, #12]
    4cb0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    4cb2:	2c00      	cmp	r4, #0
    4cb4:	d02e      	beq.n	4d14 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4cb6:	0025      	movs	r5, r4
    4cb8:	3518      	adds	r5, #24
    4cba:	0028      	movs	r0, r5
    4cbc:	4b1c      	ldr	r3, [pc, #112]	; (4d30 <xTaskRemoveFromEventList+0x84>)
    4cbe:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4cc0:	4b1c      	ldr	r3, [pc, #112]	; (4d34 <xTaskRemoveFromEventList+0x88>)
    4cc2:	681b      	ldr	r3, [r3, #0]
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d12e      	bne.n	4d26 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    4cc8:	1d25      	adds	r5, r4, #4
    4cca:	0028      	movs	r0, r5
    4ccc:	4b18      	ldr	r3, [pc, #96]	; (4d30 <xTaskRemoveFromEventList+0x84>)
    4cce:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    4cd0:	0020      	movs	r0, r4
    4cd2:	4b19      	ldr	r3, [pc, #100]	; (4d38 <xTaskRemoveFromEventList+0x8c>)
    4cd4:	4798      	blx	r3
    4cd6:	4b19      	ldr	r3, [pc, #100]	; (4d3c <xTaskRemoveFromEventList+0x90>)
    4cd8:	881b      	ldrh	r3, [r3, #0]
    4cda:	4203      	tst	r3, r0
    4cdc:	d11c      	bne.n	4d18 <xTaskRemoveFromEventList+0x6c>
    4cde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4ce0:	4a17      	ldr	r2, [pc, #92]	; (4d40 <xTaskRemoveFromEventList+0x94>)
    4ce2:	6812      	ldr	r2, [r2, #0]
    4ce4:	4293      	cmp	r3, r2
    4ce6:	d901      	bls.n	4cec <xTaskRemoveFromEventList+0x40>
    4ce8:	4a15      	ldr	r2, [pc, #84]	; (4d40 <xTaskRemoveFromEventList+0x94>)
    4cea:	6013      	str	r3, [r2, #0]
    4cec:	0098      	lsls	r0, r3, #2
    4cee:	18c0      	adds	r0, r0, r3
    4cf0:	0080      	lsls	r0, r0, #2
    4cf2:	4b14      	ldr	r3, [pc, #80]	; (4d44 <xTaskRemoveFromEventList+0x98>)
    4cf4:	1818      	adds	r0, r3, r0
    4cf6:	0029      	movs	r1, r5
    4cf8:	4b13      	ldr	r3, [pc, #76]	; (4d48 <xTaskRemoveFromEventList+0x9c>)
    4cfa:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4cfc:	4b13      	ldr	r3, [pc, #76]	; (4d4c <xTaskRemoveFromEventList+0xa0>)
    4cfe:	681b      	ldr	r3, [r3, #0]
    4d00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    4d04:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4d06:	429a      	cmp	r2, r3
    4d08:	d903      	bls.n	4d12 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
    4d0a:	2201      	movs	r2, #1
    4d0c:	4b10      	ldr	r3, [pc, #64]	; (4d50 <xTaskRemoveFromEventList+0xa4>)
    4d0e:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    4d10:	3001      	adds	r0, #1
}
    4d12:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    4d14:	b672      	cpsid	i
    4d16:	e7fe      	b.n	4d16 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
    4d18:	0020      	movs	r0, r4
    4d1a:	4b0e      	ldr	r3, [pc, #56]	; (4d54 <xTaskRemoveFromEventList+0xa8>)
    4d1c:	4798      	blx	r3
    4d1e:	b2c0      	uxtb	r0, r0
    4d20:	4b0d      	ldr	r3, [pc, #52]	; (4d58 <xTaskRemoveFromEventList+0xac>)
    4d22:	4798      	blx	r3
    4d24:	e7db      	b.n	4cde <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4d26:	0029      	movs	r1, r5
    4d28:	480c      	ldr	r0, [pc, #48]	; (4d5c <xTaskRemoveFromEventList+0xb0>)
    4d2a:	4b07      	ldr	r3, [pc, #28]	; (4d48 <xTaskRemoveFromEventList+0x9c>)
    4d2c:	4798      	blx	r3
    4d2e:	e7e5      	b.n	4cfc <xTaskRemoveFromEventList+0x50>
    4d30:	00002dc3 	.word	0x00002dc3
    4d34:	2000374c 	.word	0x2000374c
    4d38:	00001c8d 	.word	0x00001c8d
    4d3c:	20000020 	.word	0x20000020
    4d40:	20003754 	.word	0x20003754
    4d44:	200036dc 	.word	0x200036dc
    4d48:	00002d7d 	.word	0x00002d7d
    4d4c:	200036d0 	.word	0x200036d0
    4d50:	200037d0 	.word	0x200037d0
    4d54:	00001c7d 	.word	0x00001c7d
    4d58:	00002815 	.word	0x00002815
    4d5c:	2000378c 	.word	0x2000378c

00004d60 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4d60:	4b03      	ldr	r3, [pc, #12]	; (4d70 <vTaskInternalSetTimeOutState+0x10>)
    4d62:	681b      	ldr	r3, [r3, #0]
    4d64:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4d66:	4b03      	ldr	r3, [pc, #12]	; (4d74 <vTaskInternalSetTimeOutState+0x14>)
    4d68:	681b      	ldr	r3, [r3, #0]
    4d6a:	6043      	str	r3, [r0, #4]
}
    4d6c:	4770      	bx	lr
    4d6e:	46c0      	nop			; (mov r8, r8)
    4d70:	20003788 	.word	0x20003788
    4d74:	200037cc 	.word	0x200037cc

00004d78 <xTaskCheckForTimeOut>:
{
    4d78:	b570      	push	{r4, r5, r6, lr}
    4d7a:	0006      	movs	r6, r0
    4d7c:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    4d7e:	2800      	cmp	r0, #0
    4d80:	d01b      	beq.n	4dba <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    4d82:	2900      	cmp	r1, #0
    4d84:	d01b      	beq.n	4dbe <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    4d86:	4b13      	ldr	r3, [pc, #76]	; (4dd4 <xTaskCheckForTimeOut+0x5c>)
    4d88:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4d8a:	4b13      	ldr	r3, [pc, #76]	; (4dd8 <xTaskCheckForTimeOut+0x60>)
    4d8c:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4d8e:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    4d90:	682b      	ldr	r3, [r5, #0]
    4d92:	1c58      	adds	r0, r3, #1
    4d94:	d01c      	beq.n	4dd0 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4d96:	4811      	ldr	r0, [pc, #68]	; (4ddc <xTaskCheckForTimeOut+0x64>)
    4d98:	6800      	ldr	r0, [r0, #0]
    4d9a:	6834      	ldr	r4, [r6, #0]
    4d9c:	4284      	cmp	r4, r0
    4d9e:	d002      	beq.n	4da6 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    4da0:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4da2:	428a      	cmp	r2, r1
    4da4:	d205      	bcs.n	4db2 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4da6:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    4da8:	429a      	cmp	r2, r3
    4daa:	d30a      	bcc.n	4dc2 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    4dac:	2300      	movs	r3, #0
    4dae:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    4db0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    4db2:	4b0b      	ldr	r3, [pc, #44]	; (4de0 <xTaskCheckForTimeOut+0x68>)
    4db4:	4798      	blx	r3
}
    4db6:	0020      	movs	r0, r4
    4db8:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    4dba:	b672      	cpsid	i
    4dbc:	e7fe      	b.n	4dbc <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    4dbe:	b672      	cpsid	i
    4dc0:	e7fe      	b.n	4dc0 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    4dc2:	1a9b      	subs	r3, r3, r2
    4dc4:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    4dc6:	0030      	movs	r0, r6
    4dc8:	4b06      	ldr	r3, [pc, #24]	; (4de4 <xTaskCheckForTimeOut+0x6c>)
    4dca:	4798      	blx	r3
			xReturn = pdFALSE;
    4dcc:	2400      	movs	r4, #0
    4dce:	e7f0      	b.n	4db2 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    4dd0:	2400      	movs	r4, #0
    4dd2:	e7ee      	b.n	4db2 <xTaskCheckForTimeOut+0x3a>
    4dd4:	00002ef1 	.word	0x00002ef1
    4dd8:	200037cc 	.word	0x200037cc
    4ddc:	20003788 	.word	0x20003788
    4de0:	00002f09 	.word	0x00002f09
    4de4:	00004d61 	.word	0x00004d61

00004de8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4de8:	2201      	movs	r2, #1
    4dea:	4b01      	ldr	r3, [pc, #4]	; (4df0 <vTaskMissedYield+0x8>)
    4dec:	601a      	str	r2, [r3, #0]
}
    4dee:	4770      	bx	lr
    4df0:	200037d0 	.word	0x200037d0

00004df4 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
    4df4:	2800      	cmp	r0, #0
    4df6:	d001      	beq.n	4dfc <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
    4df8:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
    4dfa:	4770      	bx	lr
			uxReturn = 0U;
    4dfc:	2000      	movs	r0, #0
		return uxReturn;
    4dfe:	e7fc      	b.n	4dfa <uxTaskGetTaskNumber+0x6>

00004e00 <vTaskSetTaskNumber>:
		if( xTask != NULL )
    4e00:	2800      	cmp	r0, #0
    4e02:	d000      	beq.n	4e06 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
    4e04:	6401      	str	r1, [r0, #64]	; 0x40
	}
    4e06:	4770      	bx	lr

00004e08 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
    4e08:	4b01      	ldr	r3, [pc, #4]	; (4e10 <xTaskGetCurrentTaskHandle+0x8>)
    4e0a:	6818      	ldr	r0, [r3, #0]
	}
    4e0c:	4770      	bx	lr
    4e0e:	46c0      	nop			; (mov r8, r8)
    4e10:	200036d0 	.word	0x200036d0

00004e14 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    4e14:	4b05      	ldr	r3, [pc, #20]	; (4e2c <xTaskGetSchedulerState+0x18>)
    4e16:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    4e18:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    4e1a:	2b00      	cmp	r3, #0
    4e1c:	d004      	beq.n	4e28 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4e1e:	4b04      	ldr	r3, [pc, #16]	; (4e30 <xTaskGetSchedulerState+0x1c>)
    4e20:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    4e22:	4243      	negs	r3, r0
    4e24:	4158      	adcs	r0, r3
    4e26:	0040      	lsls	r0, r0, #1
	}
    4e28:	4770      	bx	lr
    4e2a:	46c0      	nop			; (mov r8, r8)
    4e2c:	200037a0 	.word	0x200037a0
    4e30:	2000374c 	.word	0x2000374c

00004e34 <xTaskPriorityInherit>:
	{
    4e34:	b570      	push	{r4, r5, r6, lr}
    4e36:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    4e38:	d100      	bne.n	4e3c <xTaskPriorityInherit+0x8>
    4e3a:	e06d      	b.n	4f18 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    4e3c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4e3e:	4b37      	ldr	r3, [pc, #220]	; (4f1c <xTaskPriorityInherit+0xe8>)
    4e40:	681b      	ldr	r3, [r3, #0]
    4e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e44:	429a      	cmp	r2, r3
    4e46:	d25f      	bcs.n	4f08 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4e48:	6983      	ldr	r3, [r0, #24]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	db05      	blt.n	4e5a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4e4e:	4b33      	ldr	r3, [pc, #204]	; (4f1c <xTaskPriorityInherit+0xe8>)
    4e50:	681b      	ldr	r3, [r3, #0]
    4e52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4e54:	2305      	movs	r3, #5
    4e56:	1a5b      	subs	r3, r3, r1
    4e58:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    4e5a:	0093      	lsls	r3, r2, #2
    4e5c:	189b      	adds	r3, r3, r2
    4e5e:	009b      	lsls	r3, r3, #2
    4e60:	4a2f      	ldr	r2, [pc, #188]	; (4f20 <xTaskPriorityInherit+0xec>)
    4e62:	18d3      	adds	r3, r2, r3
    4e64:	6962      	ldr	r2, [r4, #20]
    4e66:	429a      	cmp	r2, r3
    4e68:	d028      	beq.n	4ebc <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4e6a:	4b2c      	ldr	r3, [pc, #176]	; (4f1c <xTaskPriorityInherit+0xe8>)
    4e6c:	681b      	ldr	r3, [r3, #0]
    4e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e70:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    4e72:	0020      	movs	r0, r4
    4e74:	4b2b      	ldr	r3, [pc, #172]	; (4f24 <xTaskPriorityInherit+0xf0>)
    4e76:	4798      	blx	r3
    4e78:	0003      	movs	r3, r0
    4e7a:	4a2b      	ldr	r2, [pc, #172]	; (4f28 <xTaskPriorityInherit+0xf4>)
    4e7c:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
    4e7e:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    4e80:	421a      	tst	r2, r3
    4e82:	d048      	beq.n	4f16 <xTaskPriorityInherit+0xe2>
    4e84:	0020      	movs	r0, r4
    4e86:	4d29      	ldr	r5, [pc, #164]	; (4f2c <xTaskPriorityInherit+0xf8>)
    4e88:	47a8      	blx	r5
    4e8a:	0006      	movs	r6, r0
    4e8c:	0020      	movs	r0, r4
    4e8e:	47a8      	blx	r5
    4e90:	b2c1      	uxtb	r1, r0
    4e92:	2003      	movs	r0, #3
    4e94:	4b26      	ldr	r3, [pc, #152]	; (4f30 <xTaskPriorityInherit+0xfc>)
    4e96:	4798      	blx	r3
    4e98:	0003      	movs	r3, r0
    4e9a:	b2f2      	uxtb	r2, r6
    4e9c:	2103      	movs	r1, #3
    4e9e:	208e      	movs	r0, #142	; 0x8e
    4ea0:	4e24      	ldr	r6, [pc, #144]	; (4f34 <xTaskPriorityInherit+0x100>)
    4ea2:	47b0      	blx	r6
    4ea4:	0020      	movs	r0, r4
    4ea6:	47a8      	blx	r5
    4ea8:	4b1c      	ldr	r3, [pc, #112]	; (4f1c <xTaskPriorityInherit+0xe8>)
    4eaa:	681b      	ldr	r3, [r3, #0]
    4eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4eae:	b2d2      	uxtb	r2, r2
    4eb0:	b2c1      	uxtb	r1, r0
    4eb2:	2003      	movs	r0, #3
    4eb4:	4b20      	ldr	r3, [pc, #128]	; (4f38 <xTaskPriorityInherit+0x104>)
    4eb6:	4798      	blx	r3
				xReturn = pdTRUE;
    4eb8:	2001      	movs	r0, #1
    4eba:	e02c      	b.n	4f16 <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4ebc:	1d25      	adds	r5, r4, #4
    4ebe:	0028      	movs	r0, r5
    4ec0:	4b1e      	ldr	r3, [pc, #120]	; (4f3c <xTaskPriorityInherit+0x108>)
    4ec2:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4ec4:	4b15      	ldr	r3, [pc, #84]	; (4f1c <xTaskPriorityInherit+0xe8>)
    4ec6:	681b      	ldr	r3, [r3, #0]
    4ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4eca:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    4ecc:	0020      	movs	r0, r4
    4ece:	4b15      	ldr	r3, [pc, #84]	; (4f24 <xTaskPriorityInherit+0xf0>)
    4ed0:	4798      	blx	r3
    4ed2:	4b15      	ldr	r3, [pc, #84]	; (4f28 <xTaskPriorityInherit+0xf4>)
    4ed4:	881b      	ldrh	r3, [r3, #0]
    4ed6:	4203      	tst	r3, r0
    4ed8:	d10f      	bne.n	4efa <xTaskPriorityInherit+0xc6>
    4eda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4edc:	4a18      	ldr	r2, [pc, #96]	; (4f40 <xTaskPriorityInherit+0x10c>)
    4ede:	6812      	ldr	r2, [r2, #0]
    4ee0:	4293      	cmp	r3, r2
    4ee2:	d901      	bls.n	4ee8 <xTaskPriorityInherit+0xb4>
    4ee4:	4a16      	ldr	r2, [pc, #88]	; (4f40 <xTaskPriorityInherit+0x10c>)
    4ee6:	6013      	str	r3, [r2, #0]
    4ee8:	0098      	lsls	r0, r3, #2
    4eea:	18c0      	adds	r0, r0, r3
    4eec:	0080      	lsls	r0, r0, #2
    4eee:	4b0c      	ldr	r3, [pc, #48]	; (4f20 <xTaskPriorityInherit+0xec>)
    4ef0:	1818      	adds	r0, r3, r0
    4ef2:	0029      	movs	r1, r5
    4ef4:	4b13      	ldr	r3, [pc, #76]	; (4f44 <xTaskPriorityInherit+0x110>)
    4ef6:	4798      	blx	r3
    4ef8:	e7bb      	b.n	4e72 <xTaskPriorityInherit+0x3e>
    4efa:	0020      	movs	r0, r4
    4efc:	4b0b      	ldr	r3, [pc, #44]	; (4f2c <xTaskPriorityInherit+0xf8>)
    4efe:	4798      	blx	r3
    4f00:	b2c0      	uxtb	r0, r0
    4f02:	4b11      	ldr	r3, [pc, #68]	; (4f48 <xTaskPriorityInherit+0x114>)
    4f04:	4798      	blx	r3
    4f06:	e7e8      	b.n	4eda <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    4f08:	4b04      	ldr	r3, [pc, #16]	; (4f1c <xTaskPriorityInherit+0xe8>)
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f10:	4298      	cmp	r0, r3
    4f12:	4180      	sbcs	r0, r0
    4f14:	4240      	negs	r0, r0
	}
    4f16:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    4f18:	2000      	movs	r0, #0
    4f1a:	e7fc      	b.n	4f16 <xTaskPriorityInherit+0xe2>
    4f1c:	200036d0 	.word	0x200036d0
    4f20:	200036dc 	.word	0x200036dc
    4f24:	00001c8d 	.word	0x00001c8d
    4f28:	20000020 	.word	0x20000020
    4f2c:	00001c7d 	.word	0x00001c7d
    4f30:	000023f5 	.word	0x000023f5
    4f34:	00002a41 	.word	0x00002a41
    4f38:	0000239d 	.word	0x0000239d
    4f3c:	00002dc3 	.word	0x00002dc3
    4f40:	20003754 	.word	0x20003754
    4f44:	00002d7d 	.word	0x00002d7d
    4f48:	00002815 	.word	0x00002815

00004f4c <xTaskPriorityDisinherit>:
	{
    4f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f4e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    4f50:	d05a      	beq.n	5008 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
    4f52:	4b2f      	ldr	r3, [pc, #188]	; (5010 <xTaskPriorityDisinherit+0xc4>)
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	4298      	cmp	r0, r3
    4f58:	d001      	beq.n	4f5e <xTaskPriorityDisinherit+0x12>
    4f5a:	b672      	cpsid	i
    4f5c:	e7fe      	b.n	4f5c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    4f5e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    4f60:	2b00      	cmp	r3, #0
    4f62:	d101      	bne.n	4f68 <xTaskPriorityDisinherit+0x1c>
    4f64:	b672      	cpsid	i
    4f66:	e7fe      	b.n	4f66 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    4f68:	3b01      	subs	r3, #1
    4f6a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4f6c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4f6e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    4f70:	428a      	cmp	r2, r1
    4f72:	d04b      	beq.n	500c <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
    4f74:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    4f76:	2b00      	cmp	r3, #0
    4f78:	d145      	bne.n	5006 <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4f7a:	1d25      	adds	r5, r4, #4
    4f7c:	0028      	movs	r0, r5
    4f7e:	4b25      	ldr	r3, [pc, #148]	; (5014 <xTaskPriorityDisinherit+0xc8>)
    4f80:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    4f82:	0020      	movs	r0, r4
    4f84:	4b24      	ldr	r3, [pc, #144]	; (5018 <xTaskPriorityDisinherit+0xcc>)
    4f86:	4798      	blx	r3
    4f88:	4b24      	ldr	r3, [pc, #144]	; (501c <xTaskPriorityDisinherit+0xd0>)
    4f8a:	881b      	ldrh	r3, [r3, #0]
    4f8c:	4203      	tst	r3, r0
    4f8e:	d018      	beq.n	4fc2 <xTaskPriorityDisinherit+0x76>
    4f90:	0020      	movs	r0, r4
    4f92:	4e23      	ldr	r6, [pc, #140]	; (5020 <xTaskPriorityDisinherit+0xd4>)
    4f94:	47b0      	blx	r6
    4f96:	0007      	movs	r7, r0
    4f98:	0020      	movs	r0, r4
    4f9a:	47b0      	blx	r6
    4f9c:	b2c1      	uxtb	r1, r0
    4f9e:	2003      	movs	r0, #3
    4fa0:	4b20      	ldr	r3, [pc, #128]	; (5024 <xTaskPriorityDisinherit+0xd8>)
    4fa2:	4798      	blx	r3
    4fa4:	0003      	movs	r3, r0
    4fa6:	b2fa      	uxtb	r2, r7
    4fa8:	2103      	movs	r1, #3
    4faa:	208f      	movs	r0, #143	; 0x8f
    4fac:	4f1e      	ldr	r7, [pc, #120]	; (5028 <xTaskPriorityDisinherit+0xdc>)
    4fae:	47b8      	blx	r7
    4fb0:	0020      	movs	r0, r4
    4fb2:	47b0      	blx	r6
    4fb4:	2344      	movs	r3, #68	; 0x44
    4fb6:	18e3      	adds	r3, r4, r3
    4fb8:	781a      	ldrb	r2, [r3, #0]
    4fba:	b2c1      	uxtb	r1, r0
    4fbc:	2003      	movs	r0, #3
    4fbe:	4b1b      	ldr	r3, [pc, #108]	; (502c <xTaskPriorityDisinherit+0xe0>)
    4fc0:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4fc2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4fc4:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4fc6:	2305      	movs	r3, #5
    4fc8:	1a9b      	subs	r3, r3, r2
    4fca:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    4fcc:	0020      	movs	r0, r4
    4fce:	4b12      	ldr	r3, [pc, #72]	; (5018 <xTaskPriorityDisinherit+0xcc>)
    4fd0:	4798      	blx	r3
    4fd2:	4b12      	ldr	r3, [pc, #72]	; (501c <xTaskPriorityDisinherit+0xd0>)
    4fd4:	881b      	ldrh	r3, [r3, #0]
    4fd6:	4203      	tst	r3, r0
    4fd8:	d005      	beq.n	4fe6 <xTaskPriorityDisinherit+0x9a>
    4fda:	0020      	movs	r0, r4
    4fdc:	4b10      	ldr	r3, [pc, #64]	; (5020 <xTaskPriorityDisinherit+0xd4>)
    4fde:	4798      	blx	r3
    4fe0:	b2c0      	uxtb	r0, r0
    4fe2:	4b13      	ldr	r3, [pc, #76]	; (5030 <xTaskPriorityDisinherit+0xe4>)
    4fe4:	4798      	blx	r3
    4fe6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4fe8:	4a12      	ldr	r2, [pc, #72]	; (5034 <xTaskPriorityDisinherit+0xe8>)
    4fea:	6812      	ldr	r2, [r2, #0]
    4fec:	4293      	cmp	r3, r2
    4fee:	d901      	bls.n	4ff4 <xTaskPriorityDisinherit+0xa8>
    4ff0:	4a10      	ldr	r2, [pc, #64]	; (5034 <xTaskPriorityDisinherit+0xe8>)
    4ff2:	6013      	str	r3, [r2, #0]
    4ff4:	0098      	lsls	r0, r3, #2
    4ff6:	18c0      	adds	r0, r0, r3
    4ff8:	0080      	lsls	r0, r0, #2
    4ffa:	4b0f      	ldr	r3, [pc, #60]	; (5038 <xTaskPriorityDisinherit+0xec>)
    4ffc:	1818      	adds	r0, r3, r0
    4ffe:	0029      	movs	r1, r5
    5000:	4b0e      	ldr	r3, [pc, #56]	; (503c <xTaskPriorityDisinherit+0xf0>)
    5002:	4798      	blx	r3
					xReturn = pdTRUE;
    5004:	2001      	movs	r0, #1
	}
    5006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
    5008:	2000      	movs	r0, #0
    500a:	e7fc      	b.n	5006 <xTaskPriorityDisinherit+0xba>
    500c:	2000      	movs	r0, #0
    500e:	e7fa      	b.n	5006 <xTaskPriorityDisinherit+0xba>
    5010:	200036d0 	.word	0x200036d0
    5014:	00002dc3 	.word	0x00002dc3
    5018:	00001c8d 	.word	0x00001c8d
    501c:	20000020 	.word	0x20000020
    5020:	00001c7d 	.word	0x00001c7d
    5024:	000023f5 	.word	0x000023f5
    5028:	00002a41 	.word	0x00002a41
    502c:	0000239d 	.word	0x0000239d
    5030:	00002815 	.word	0x00002815
    5034:	20003754 	.word	0x20003754
    5038:	200036dc 	.word	0x200036dc
    503c:	00002d7d 	.word	0x00002d7d

00005040 <vTaskPriorityDisinheritAfterTimeout>:
	{
    5040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5042:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    5044:	d00d      	beq.n	5062 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    5046:	6c83      	ldr	r3, [r0, #72]	; 0x48
    5048:	2b00      	cmp	r3, #0
    504a:	d101      	bne.n	5050 <vTaskPriorityDisinheritAfterTimeout+0x10>
    504c:	b672      	cpsid	i
    504e:	e7fe      	b.n	504e <vTaskPriorityDisinheritAfterTimeout+0xe>
    5050:	6c45      	ldr	r5, [r0, #68]	; 0x44
    5052:	428d      	cmp	r5, r1
    5054:	d200      	bcs.n	5058 <vTaskPriorityDisinheritAfterTimeout+0x18>
    5056:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    5058:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    505a:	42aa      	cmp	r2, r5
    505c:	d001      	beq.n	5062 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    505e:	2b01      	cmp	r3, #1
    5060:	d000      	beq.n	5064 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    5062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    5064:	4b2b      	ldr	r3, [pc, #172]	; (5114 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	429c      	cmp	r4, r3
    506a:	d101      	bne.n	5070 <vTaskPriorityDisinheritAfterTimeout+0x30>
    506c:	b672      	cpsid	i
    506e:	e7fe      	b.n	506e <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    5070:	0020      	movs	r0, r4
    5072:	4b29      	ldr	r3, [pc, #164]	; (5118 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    5074:	4798      	blx	r3
    5076:	4b29      	ldr	r3, [pc, #164]	; (511c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    5078:	881b      	ldrh	r3, [r3, #0]
    507a:	4203      	tst	r3, r0
    507c:	d018      	beq.n	50b0 <vTaskPriorityDisinheritAfterTimeout+0x70>
    507e:	0020      	movs	r0, r4
    5080:	4e27      	ldr	r6, [pc, #156]	; (5120 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    5082:	47b0      	blx	r6
    5084:	0007      	movs	r7, r0
    5086:	0020      	movs	r0, r4
    5088:	47b0      	blx	r6
    508a:	b2c1      	uxtb	r1, r0
    508c:	2003      	movs	r0, #3
    508e:	4b25      	ldr	r3, [pc, #148]	; (5124 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    5090:	4798      	blx	r3
    5092:	0003      	movs	r3, r0
    5094:	b2fa      	uxtb	r2, r7
    5096:	2103      	movs	r1, #3
    5098:	208f      	movs	r0, #143	; 0x8f
    509a:	4f23      	ldr	r7, [pc, #140]	; (5128 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    509c:	47b8      	blx	r7
    509e:	0020      	movs	r0, r4
    50a0:	47b0      	blx	r6
    50a2:	2344      	movs	r3, #68	; 0x44
    50a4:	18e3      	adds	r3, r4, r3
    50a6:	781a      	ldrb	r2, [r3, #0]
    50a8:	b2c1      	uxtb	r1, r0
    50aa:	2003      	movs	r0, #3
    50ac:	4b1f      	ldr	r3, [pc, #124]	; (512c <vTaskPriorityDisinheritAfterTimeout+0xec>)
    50ae:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    50b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
    50b2:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    50b4:	69a3      	ldr	r3, [r4, #24]
    50b6:	2b00      	cmp	r3, #0
    50b8:	db02      	blt.n	50c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    50ba:	2205      	movs	r2, #5
    50bc:	1b55      	subs	r5, r2, r5
    50be:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    50c0:	008b      	lsls	r3, r1, #2
    50c2:	185b      	adds	r3, r3, r1
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	4a1a      	ldr	r2, [pc, #104]	; (5130 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    50c8:	18d3      	adds	r3, r2, r3
    50ca:	6962      	ldr	r2, [r4, #20]
    50cc:	429a      	cmp	r2, r3
    50ce:	d1c8      	bne.n	5062 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    50d0:	1d25      	adds	r5, r4, #4
    50d2:	0028      	movs	r0, r5
    50d4:	4b17      	ldr	r3, [pc, #92]	; (5134 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    50d6:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    50d8:	0020      	movs	r0, r4
    50da:	4b0f      	ldr	r3, [pc, #60]	; (5118 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    50dc:	4798      	blx	r3
    50de:	4b0f      	ldr	r3, [pc, #60]	; (511c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    50e0:	881b      	ldrh	r3, [r3, #0]
    50e2:	4203      	tst	r3, r0
    50e4:	d005      	beq.n	50f2 <vTaskPriorityDisinheritAfterTimeout+0xb2>
    50e6:	0020      	movs	r0, r4
    50e8:	4b0d      	ldr	r3, [pc, #52]	; (5120 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    50ea:	4798      	blx	r3
    50ec:	b2c0      	uxtb	r0, r0
    50ee:	4b12      	ldr	r3, [pc, #72]	; (5138 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    50f0:	4798      	blx	r3
    50f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    50f4:	4a11      	ldr	r2, [pc, #68]	; (513c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    50f6:	6812      	ldr	r2, [r2, #0]
    50f8:	4293      	cmp	r3, r2
    50fa:	d901      	bls.n	5100 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    50fc:	4a0f      	ldr	r2, [pc, #60]	; (513c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    50fe:	6013      	str	r3, [r2, #0]
    5100:	0098      	lsls	r0, r3, #2
    5102:	18c0      	adds	r0, r0, r3
    5104:	0080      	lsls	r0, r0, #2
    5106:	4b0a      	ldr	r3, [pc, #40]	; (5130 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    5108:	1818      	adds	r0, r3, r0
    510a:	0029      	movs	r1, r5
    510c:	4b0c      	ldr	r3, [pc, #48]	; (5140 <vTaskPriorityDisinheritAfterTimeout+0x100>)
    510e:	4798      	blx	r3
	}
    5110:	e7a7      	b.n	5062 <vTaskPriorityDisinheritAfterTimeout+0x22>
    5112:	46c0      	nop			; (mov r8, r8)
    5114:	200036d0 	.word	0x200036d0
    5118:	00001c8d 	.word	0x00001c8d
    511c:	20000020 	.word	0x20000020
    5120:	00001c7d 	.word	0x00001c7d
    5124:	000023f5 	.word	0x000023f5
    5128:	00002a41 	.word	0x00002a41
    512c:	0000239d 	.word	0x0000239d
    5130:	200036dc 	.word	0x200036dc
    5134:	00002dc3 	.word	0x00002dc3
    5138:	00002815 	.word	0x00002815
    513c:	20003754 	.word	0x20003754
    5140:	00002d7d 	.word	0x00002d7d

00005144 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    5144:	4b05      	ldr	r3, [pc, #20]	; (515c <pvTaskIncrementMutexHeldCount+0x18>)
    5146:	681b      	ldr	r3, [r3, #0]
    5148:	2b00      	cmp	r3, #0
    514a:	d004      	beq.n	5156 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    514c:	4b03      	ldr	r3, [pc, #12]	; (515c <pvTaskIncrementMutexHeldCount+0x18>)
    514e:	681a      	ldr	r2, [r3, #0]
    5150:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5152:	3301      	adds	r3, #1
    5154:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
    5156:	4b01      	ldr	r3, [pc, #4]	; (515c <pvTaskIncrementMutexHeldCount+0x18>)
    5158:	6818      	ldr	r0, [r3, #0]
	}
    515a:	4770      	bx	lr
    515c:	200036d0 	.word	0x200036d0

00005160 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    5160:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5162:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5164:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    5166:	4291      	cmp	r1, r2
    5168:	d80b      	bhi.n	5182 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    516a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    516c:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    516e:	6983      	ldr	r3, [r0, #24]
    5170:	429a      	cmp	r2, r3
    5172:	d211      	bcs.n	5198 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5174:	1d01      	adds	r1, r0, #4
    5176:	4b09      	ldr	r3, [pc, #36]	; (519c <prvInsertTimerInActiveList+0x3c>)
    5178:	6818      	ldr	r0, [r3, #0]
    517a:	4b09      	ldr	r3, [pc, #36]	; (51a0 <prvInsertTimerInActiveList+0x40>)
    517c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    517e:	2400      	movs	r4, #0
    5180:	e00a      	b.n	5198 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5182:	429a      	cmp	r2, r3
    5184:	d202      	bcs.n	518c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    5186:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5188:	4299      	cmp	r1, r3
    518a:	d205      	bcs.n	5198 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    518c:	1d01      	adds	r1, r0, #4
    518e:	4b05      	ldr	r3, [pc, #20]	; (51a4 <prvInsertTimerInActiveList+0x44>)
    5190:	6818      	ldr	r0, [r3, #0]
    5192:	4b03      	ldr	r3, [pc, #12]	; (51a0 <prvInsertTimerInActiveList+0x40>)
    5194:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    5196:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    5198:	0020      	movs	r0, r4
    519a:	bd10      	pop	{r4, pc}
    519c:	200037d8 	.word	0x200037d8
    51a0:	00002d95 	.word	0x00002d95
    51a4:	200037d4 	.word	0x200037d4

000051a8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    51a8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    51aa:	4b0e      	ldr	r3, [pc, #56]	; (51e4 <prvCheckForValidListAndQueue+0x3c>)
    51ac:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    51ae:	4b0e      	ldr	r3, [pc, #56]	; (51e8 <prvCheckForValidListAndQueue+0x40>)
    51b0:	681b      	ldr	r3, [r3, #0]
    51b2:	2b00      	cmp	r3, #0
    51b4:	d002      	beq.n	51bc <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    51b6:	4b0d      	ldr	r3, [pc, #52]	; (51ec <prvCheckForValidListAndQueue+0x44>)
    51b8:	4798      	blx	r3
}
    51ba:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    51bc:	4d0c      	ldr	r5, [pc, #48]	; (51f0 <prvCheckForValidListAndQueue+0x48>)
    51be:	0028      	movs	r0, r5
    51c0:	4e0c      	ldr	r6, [pc, #48]	; (51f4 <prvCheckForValidListAndQueue+0x4c>)
    51c2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    51c4:	4c0c      	ldr	r4, [pc, #48]	; (51f8 <prvCheckForValidListAndQueue+0x50>)
    51c6:	0020      	movs	r0, r4
    51c8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    51ca:	4b0c      	ldr	r3, [pc, #48]	; (51fc <prvCheckForValidListAndQueue+0x54>)
    51cc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    51ce:	4b0c      	ldr	r3, [pc, #48]	; (5200 <prvCheckForValidListAndQueue+0x58>)
    51d0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    51d2:	2200      	movs	r2, #0
    51d4:	210c      	movs	r1, #12
    51d6:	2002      	movs	r0, #2
    51d8:	4b0a      	ldr	r3, [pc, #40]	; (5204 <prvCheckForValidListAndQueue+0x5c>)
    51da:	4798      	blx	r3
    51dc:	4b02      	ldr	r3, [pc, #8]	; (51e8 <prvCheckForValidListAndQueue+0x40>)
    51de:	6018      	str	r0, [r3, #0]
    51e0:	e7e9      	b.n	51b6 <prvCheckForValidListAndQueue+0xe>
    51e2:	46c0      	nop			; (mov r8, r8)
    51e4:	00002ef1 	.word	0x00002ef1
    51e8:	20003808 	.word	0x20003808
    51ec:	00002f09 	.word	0x00002f09
    51f0:	200037dc 	.word	0x200037dc
    51f4:	00002d61 	.word	0x00002d61
    51f8:	200037f0 	.word	0x200037f0
    51fc:	200037d4 	.word	0x200037d4
    5200:	200037d8 	.word	0x200037d8
    5204:	00003369 	.word	0x00003369

00005208 <xTimerCreateTimerTask>:
{
    5208:	b510      	push	{r4, lr}
    520a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    520c:	4b0a      	ldr	r3, [pc, #40]	; (5238 <xTimerCreateTimerTask+0x30>)
    520e:	4798      	blx	r3
	if( xTimerQueue != NULL )
    5210:	4b0a      	ldr	r3, [pc, #40]	; (523c <xTimerCreateTimerTask+0x34>)
    5212:	681b      	ldr	r3, [r3, #0]
    5214:	2b00      	cmp	r3, #0
    5216:	d00d      	beq.n	5234 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    5218:	4b09      	ldr	r3, [pc, #36]	; (5240 <xTimerCreateTimerTask+0x38>)
    521a:	9301      	str	r3, [sp, #4]
    521c:	2302      	movs	r3, #2
    521e:	9300      	str	r3, [sp, #0]
    5220:	2300      	movs	r3, #0
    5222:	2280      	movs	r2, #128	; 0x80
    5224:	4907      	ldr	r1, [pc, #28]	; (5244 <xTimerCreateTimerTask+0x3c>)
    5226:	4808      	ldr	r0, [pc, #32]	; (5248 <xTimerCreateTimerTask+0x40>)
    5228:	4c08      	ldr	r4, [pc, #32]	; (524c <xTimerCreateTimerTask+0x44>)
    522a:	47a0      	blx	r4
	configASSERT( xReturn );
    522c:	2800      	cmp	r0, #0
    522e:	d001      	beq.n	5234 <xTimerCreateTimerTask+0x2c>
}
    5230:	b002      	add	sp, #8
    5232:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
<<<<<<< Updated upstream
    5214:	b672      	cpsid	i
    5216:	e7fe      	b.n	5216 <xTimerCreateTimerTask+0x2e>
    5218:	00005189 	.word	0x00005189
    521c:	20003808 	.word	0x20003808
    5220:	2000380c 	.word	0x2000380c
    5224:	0000a7b0 	.word	0x0000a7b0
    5228:	00005355 	.word	0x00005355
    522c:	00004321 	.word	0x00004321

00005230 <xTimerGenericCommand>:
=======
    5234:	b672      	cpsid	i
    5236:	e7fe      	b.n	5236 <xTimerCreateTimerTask+0x2e>
    5238:	000051a9 	.word	0x000051a9
    523c:	20003808 	.word	0x20003808
    5240:	2000380c 	.word	0x2000380c
    5244:	0000a7dc 	.word	0x0000a7dc
    5248:	00005375 	.word	0x00005375
    524c:	00004341 	.word	0x00004341

00005250 <xTimerGenericCommand>:
>>>>>>> Stashed changes
{
    5250:	b530      	push	{r4, r5, lr}
    5252:	b085      	sub	sp, #20
    5254:	0004      	movs	r4, r0
    5256:	001d      	movs	r5, r3
	configASSERT( xTimer );
    5258:	2800      	cmp	r0, #0
    525a:	d014      	beq.n	5286 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    525c:	4b13      	ldr	r3, [pc, #76]	; (52ac <xTimerGenericCommand+0x5c>)
    525e:	6818      	ldr	r0, [r3, #0]
    5260:	2800      	cmp	r0, #0
    5262:	d021      	beq.n	52a8 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    5264:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5266:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    5268:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    526a:	2905      	cmp	r1, #5
    526c:	dc15      	bgt.n	529a <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    526e:	4b10      	ldr	r3, [pc, #64]	; (52b0 <xTimerGenericCommand+0x60>)
    5270:	4798      	blx	r3
    5272:	2802      	cmp	r0, #2
    5274:	d009      	beq.n	528a <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    5276:	4b0d      	ldr	r3, [pc, #52]	; (52ac <xTimerGenericCommand+0x5c>)
    5278:	6818      	ldr	r0, [r3, #0]
    527a:	2300      	movs	r3, #0
    527c:	2200      	movs	r2, #0
    527e:	a901      	add	r1, sp, #4
    5280:	4c0c      	ldr	r4, [pc, #48]	; (52b4 <xTimerGenericCommand+0x64>)
    5282:	47a0      	blx	r4
    5284:	e00e      	b.n	52a4 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    5286:	b672      	cpsid	i
    5288:	e7fe      	b.n	5288 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    528a:	4b08      	ldr	r3, [pc, #32]	; (52ac <xTimerGenericCommand+0x5c>)
    528c:	6818      	ldr	r0, [r3, #0]
    528e:	2300      	movs	r3, #0
    5290:	9a08      	ldr	r2, [sp, #32]
    5292:	a901      	add	r1, sp, #4
    5294:	4c07      	ldr	r4, [pc, #28]	; (52b4 <xTimerGenericCommand+0x64>)
    5296:	47a0      	blx	r4
    5298:	e004      	b.n	52a4 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    529a:	2300      	movs	r3, #0
    529c:	002a      	movs	r2, r5
    529e:	a901      	add	r1, sp, #4
    52a0:	4c05      	ldr	r4, [pc, #20]	; (52b8 <xTimerGenericCommand+0x68>)
    52a2:	47a0      	blx	r4
}
    52a4:	b005      	add	sp, #20
    52a6:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    52a8:	2000      	movs	r0, #0
	return xReturn;
    52aa:	e7fb      	b.n	52a4 <xTimerGenericCommand+0x54>
    52ac:	20003808 	.word	0x20003808
    52b0:	00004e15 	.word	0x00004e15
    52b4:	000034a5 	.word	0x000034a5
    52b8:	000037f9 	.word	0x000037f9

000052bc <prvSampleTimeNow>:
{
    52bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52be:	46d6      	mov	lr, sl
    52c0:	464f      	mov	r7, r9
    52c2:	4646      	mov	r6, r8
    52c4:	b5c0      	push	{r6, r7, lr}
    52c6:	b082      	sub	sp, #8
    52c8:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    52ca:	4b23      	ldr	r3, [pc, #140]	; (5358 <prvSampleTimeNow+0x9c>)
    52cc:	4798      	blx	r3
    52ce:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    52d0:	4b22      	ldr	r3, [pc, #136]	; (535c <prvSampleTimeNow+0xa0>)
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	4298      	cmp	r0, r3
    52d6:	d317      	bcc.n	5308 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    52d8:	2300      	movs	r3, #0
    52da:	4642      	mov	r2, r8
    52dc:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    52de:	4b1f      	ldr	r3, [pc, #124]	; (535c <prvSampleTimeNow+0xa0>)
    52e0:	4652      	mov	r2, sl
    52e2:	601a      	str	r2, [r3, #0]
}
    52e4:	4650      	mov	r0, sl
    52e6:	b002      	add	sp, #8
    52e8:	bc1c      	pop	{r2, r3, r4}
    52ea:	4690      	mov	r8, r2
    52ec:	4699      	mov	r9, r3
    52ee:	46a2      	mov	sl, r4
    52f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    52f2:	2300      	movs	r3, #0
    52f4:	9300      	str	r3, [sp, #0]
    52f6:	003a      	movs	r2, r7
    52f8:	2100      	movs	r1, #0
    52fa:	0020      	movs	r0, r4
    52fc:	4c18      	ldr	r4, [pc, #96]	; (5360 <prvSampleTimeNow+0xa4>)
    52fe:	47a0      	blx	r4
				configASSERT( xResult );
    5300:	2800      	cmp	r0, #0
    5302:	d104      	bne.n	530e <prvSampleTimeNow+0x52>
    5304:	b672      	cpsid	i
    5306:	e7fe      	b.n	5306 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5308:	4d16      	ldr	r5, [pc, #88]	; (5364 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    530a:	4b17      	ldr	r3, [pc, #92]	; (5368 <prvSampleTimeNow+0xac>)
    530c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    530e:	682b      	ldr	r3, [r5, #0]
    5310:	681a      	ldr	r2, [r3, #0]
    5312:	2a00      	cmp	r2, #0
    5314:	d017      	beq.n	5346 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5316:	68db      	ldr	r3, [r3, #12]
    5318:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    531a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    531c:	1d26      	adds	r6, r4, #4
    531e:	0030      	movs	r0, r6
    5320:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5322:	0020      	movs	r0, r4
    5324:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5326:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5328:	69e3      	ldr	r3, [r4, #28]
    532a:	2b01      	cmp	r3, #1
    532c:	d1ef      	bne.n	530e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    532e:	69a3      	ldr	r3, [r4, #24]
    5330:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    5332:	429f      	cmp	r7, r3
    5334:	d2dd      	bcs.n	52f2 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    5336:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5338:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    533a:	4b0a      	ldr	r3, [pc, #40]	; (5364 <prvSampleTimeNow+0xa8>)
    533c:	6818      	ldr	r0, [r3, #0]
    533e:	0031      	movs	r1, r6
    5340:	4b0a      	ldr	r3, [pc, #40]	; (536c <prvSampleTimeNow+0xb0>)
    5342:	4798      	blx	r3
    5344:	e7e3      	b.n	530e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    5346:	4a0a      	ldr	r2, [pc, #40]	; (5370 <prvSampleTimeNow+0xb4>)
    5348:	4906      	ldr	r1, [pc, #24]	; (5364 <prvSampleTimeNow+0xa8>)
    534a:	6810      	ldr	r0, [r2, #0]
    534c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    534e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    5350:	2301      	movs	r3, #1
    5352:	4642      	mov	r2, r8
    5354:	6013      	str	r3, [r2, #0]
    5356:	e7c2      	b.n	52de <prvSampleTimeNow+0x22>
    5358:	00004665 	.word	0x00004665
    535c:	20003804 	.word	0x20003804
    5360:	00005251 	.word	0x00005251
    5364:	200037d4 	.word	0x200037d4
    5368:	00002dc3 	.word	0x00002dc3
    536c:	00002d95 	.word	0x00002d95
    5370:	200037d8 	.word	0x200037d8

00005374 <prvTimerTask>:
{
    5374:	b5f0      	push	{r4, r5, r6, r7, lr}
    5376:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    5378:	4b53      	ldr	r3, [pc, #332]	; (54c8 <prvTimerTask+0x154>)
    537a:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    537c:	4f53      	ldr	r7, [pc, #332]	; (54cc <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    537e:	4b54      	ldr	r3, [pc, #336]	; (54d0 <prvTimerTask+0x15c>)
    5380:	681b      	ldr	r3, [r3, #0]
    5382:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    5384:	2a00      	cmp	r2, #0
    5386:	d00e      	beq.n	53a6 <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5388:	68db      	ldr	r3, [r3, #12]
    538a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    538c:	4b51      	ldr	r3, [pc, #324]	; (54d4 <prvTimerTask+0x160>)
    538e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5390:	a805      	add	r0, sp, #20
    5392:	4b51      	ldr	r3, [pc, #324]	; (54d8 <prvTimerTask+0x164>)
    5394:	4798      	blx	r3
    5396:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    5398:	9b05      	ldr	r3, [sp, #20]
    539a:	2b00      	cmp	r3, #0
    539c:	d15f      	bne.n	545e <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    539e:	4284      	cmp	r4, r0
    53a0:	d936      	bls.n	5410 <prvTimerTask+0x9c>
    53a2:	2200      	movs	r2, #0
    53a4:	e00f      	b.n	53c6 <prvTimerTask+0x52>
	vTaskSuspendAll();
    53a6:	4b4b      	ldr	r3, [pc, #300]	; (54d4 <prvTimerTask+0x160>)
    53a8:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    53aa:	a805      	add	r0, sp, #20
    53ac:	4b4a      	ldr	r3, [pc, #296]	; (54d8 <prvTimerTask+0x164>)
    53ae:	4798      	blx	r3
    53b0:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    53b2:	9b05      	ldr	r3, [sp, #20]
    53b4:	2b00      	cmp	r3, #0
    53b6:	d152      	bne.n	545e <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    53b8:	4b48      	ldr	r3, [pc, #288]	; (54dc <prvTimerTask+0x168>)
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	681b      	ldr	r3, [r3, #0]
    53be:	425a      	negs	r2, r3
    53c0:	415a      	adcs	r2, r3
    53c2:	b2d2      	uxtb	r2, r2
    53c4:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    53c6:	1b61      	subs	r1, r4, r5
    53c8:	4b45      	ldr	r3, [pc, #276]	; (54e0 <prvTimerTask+0x16c>)
    53ca:	6818      	ldr	r0, [r3, #0]
    53cc:	4b45      	ldr	r3, [pc, #276]	; (54e4 <prvTimerTask+0x170>)
    53ce:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    53d0:	4b45      	ldr	r3, [pc, #276]	; (54e8 <prvTimerTask+0x174>)
    53d2:	4798      	blx	r3
    53d4:	2800      	cmp	r0, #0
    53d6:	d03f      	beq.n	5458 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    53d8:	4d41      	ldr	r5, [pc, #260]	; (54e0 <prvTimerTask+0x16c>)
    53da:	4c44      	ldr	r4, [pc, #272]	; (54ec <prvTimerTask+0x178>)
    53dc:	2200      	movs	r2, #0
    53de:	a905      	add	r1, sp, #20
    53e0:	6828      	ldr	r0, [r5, #0]
    53e2:	47a0      	blx	r4
    53e4:	2800      	cmp	r0, #0
    53e6:	d0ca      	beq.n	537e <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    53e8:	9b05      	ldr	r3, [sp, #20]
    53ea:	9303      	str	r3, [sp, #12]
    53ec:	2b00      	cmp	r3, #0
    53ee:	dbf5      	blt.n	53dc <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    53f0:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    53f2:	6973      	ldr	r3, [r6, #20]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d001      	beq.n	53fc <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    53f8:	1d30      	adds	r0, r6, #4
    53fa:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    53fc:	a804      	add	r0, sp, #16
    53fe:	4b36      	ldr	r3, [pc, #216]	; (54d8 <prvTimerTask+0x164>)
    5400:	4798      	blx	r3
			switch( xMessage.xMessageID )
    5402:	9b05      	ldr	r3, [sp, #20]
    5404:	2b09      	cmp	r3, #9
    5406:	d8e9      	bhi.n	53dc <prvTimerTask+0x68>
    5408:	009b      	lsls	r3, r3, #2
    540a:	4a39      	ldr	r2, [pc, #228]	; (54f0 <prvTimerTask+0x17c>)
    540c:	58d3      	ldr	r3, [r2, r3]
    540e:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    5410:	4b35      	ldr	r3, [pc, #212]	; (54e8 <prvTimerTask+0x174>)
    5412:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    5414:	4b2e      	ldr	r3, [pc, #184]	; (54d0 <prvTimerTask+0x15c>)
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	68db      	ldr	r3, [r3, #12]
    541a:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    541c:	1d30      	adds	r0, r6, #4
    541e:	4b2b      	ldr	r3, [pc, #172]	; (54cc <prvTimerTask+0x158>)
    5420:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5422:	69f3      	ldr	r3, [r6, #28]
    5424:	2b01      	cmp	r3, #1
    5426:	d003      	beq.n	5430 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5428:	6a73      	ldr	r3, [r6, #36]	; 0x24
    542a:	0030      	movs	r0, r6
    542c:	4798      	blx	r3
    542e:	e7d3      	b.n	53d8 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    5430:	69b3      	ldr	r3, [r6, #24]
    5432:	18e1      	adds	r1, r4, r3
    5434:	0023      	movs	r3, r4
    5436:	002a      	movs	r2, r5
    5438:	0030      	movs	r0, r6
    543a:	4d2e      	ldr	r5, [pc, #184]	; (54f4 <prvTimerTask+0x180>)
    543c:	47a8      	blx	r5
    543e:	2800      	cmp	r0, #0
    5440:	d0f2      	beq.n	5428 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5442:	2300      	movs	r3, #0
    5444:	9300      	str	r3, [sp, #0]
    5446:	0022      	movs	r2, r4
    5448:	2100      	movs	r1, #0
    544a:	0030      	movs	r0, r6
    544c:	4c2a      	ldr	r4, [pc, #168]	; (54f8 <prvTimerTask+0x184>)
    544e:	47a0      	blx	r4
			configASSERT( xResult );
    5450:	2800      	cmp	r0, #0
    5452:	d1e9      	bne.n	5428 <prvTimerTask+0xb4>
    5454:	b672      	cpsid	i
    5456:	e7fe      	b.n	5456 <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    5458:	4b28      	ldr	r3, [pc, #160]	; (54fc <prvTimerTask+0x188>)
    545a:	4798      	blx	r3
    545c:	e7bc      	b.n	53d8 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    545e:	4b22      	ldr	r3, [pc, #136]	; (54e8 <prvTimerTask+0x174>)
    5460:	4798      	blx	r3
    5462:	e7b9      	b.n	53d8 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    5464:	9b06      	ldr	r3, [sp, #24]
    5466:	69b2      	ldr	r2, [r6, #24]
    5468:	4694      	mov	ip, r2
    546a:	4463      	add	r3, ip
    546c:	0019      	movs	r1, r3
    546e:	9b06      	ldr	r3, [sp, #24]
    5470:	0002      	movs	r2, r0
    5472:	0030      	movs	r0, r6
    5474:	4c1f      	ldr	r4, [pc, #124]	; (54f4 <prvTimerTask+0x180>)
    5476:	47a0      	blx	r4
    5478:	2800      	cmp	r0, #0
    547a:	d0ae      	beq.n	53da <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    547c:	0030      	movs	r0, r6
    547e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5480:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5482:	69f3      	ldr	r3, [r6, #28]
    5484:	2b01      	cmp	r3, #1
    5486:	d1a8      	bne.n	53da <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    5488:	9b06      	ldr	r3, [sp, #24]
    548a:	69b1      	ldr	r1, [r6, #24]
    548c:	468c      	mov	ip, r1
    548e:	4463      	add	r3, ip
    5490:	001a      	movs	r2, r3
    5492:	2300      	movs	r3, #0
    5494:	9300      	str	r3, [sp, #0]
    5496:	2100      	movs	r1, #0
    5498:	0030      	movs	r0, r6
    549a:	4c17      	ldr	r4, [pc, #92]	; (54f8 <prvTimerTask+0x184>)
    549c:	47a0      	blx	r4
							configASSERT( xResult );
    549e:	2800      	cmp	r0, #0
    54a0:	d19b      	bne.n	53da <prvTimerTask+0x66>
    54a2:	b672      	cpsid	i
    54a4:	e7fe      	b.n	54a4 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    54a6:	9906      	ldr	r1, [sp, #24]
    54a8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    54aa:	2900      	cmp	r1, #0
    54ac:	d006      	beq.n	54bc <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    54ae:	1841      	adds	r1, r0, r1
    54b0:	0003      	movs	r3, r0
    54b2:	0002      	movs	r2, r0
    54b4:	0030      	movs	r0, r6
    54b6:	4c0f      	ldr	r4, [pc, #60]	; (54f4 <prvTimerTask+0x180>)
    54b8:	47a0      	blx	r4
    54ba:	e78e      	b.n	53da <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    54bc:	b672      	cpsid	i
    54be:	e7fe      	b.n	54be <prvTimerTask+0x14a>
						vPortFree( pxTimer );
<<<<<<< Updated upstream
    54a0:	0030      	movs	r0, r6
    54a2:	4b0f      	ldr	r3, [pc, #60]	; (54e0 <prvTimerTask+0x18c>)
    54a4:	4798      	blx	r3
    54a6:	e788      	b.n	53ba <prvTimerTask+0x66>
    54a8:	00006da1 	.word	0x00006da1
    54ac:	00002d9b 	.word	0x00002d9b
    54b0:	200037d4 	.word	0x200037d4
    54b4:	00004635 	.word	0x00004635
    54b8:	0000529d 	.word	0x0000529d
    54bc:	200037d8 	.word	0x200037d8
    54c0:	20003808 	.word	0x20003808
    54c4:	0000418d 	.word	0x0000418d
    54c8:	000047dd 	.word	0x000047dd
    54cc:	00003b21 	.word	0x00003b21
    54d0:	0000a788 	.word	0x0000a788
    54d4:	00005141 	.word	0x00005141
    54d8:	00005231 	.word	0x00005231
    54dc:	00002ec1 	.word	0x00002ec1
    54e0:	00003025 	.word	0x00003025

000054e4 <advance_pointer>:
=======
    54c0:	0030      	movs	r0, r6
    54c2:	4b0f      	ldr	r3, [pc, #60]	; (5500 <prvTimerTask+0x18c>)
    54c4:	4798      	blx	r3
    54c6:	e788      	b.n	53da <prvTimerTask+0x66>
    54c8:	00006dc1 	.word	0x00006dc1
    54cc:	00002dc3 	.word	0x00002dc3
    54d0:	200037d4 	.word	0x200037d4
    54d4:	00004655 	.word	0x00004655
    54d8:	000052bd 	.word	0x000052bd
    54dc:	200037d8 	.word	0x200037d8
    54e0:	20003808 	.word	0x20003808
    54e4:	000041ad 	.word	0x000041ad
    54e8:	000047fd 	.word	0x000047fd
    54ec:	00003b41 	.word	0x00003b41
    54f0:	0000a7b4 	.word	0x0000a7b4
    54f4:	00005161 	.word	0x00005161
    54f8:	00005251 	.word	0x00005251
    54fc:	00002ee1 	.word	0x00002ee1
    5500:	00003045 	.word	0x00003045

00005504 <advance_pointer>:
>>>>>>> Stashed changes
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    5504:	b510      	push	{r4, lr}
    5506:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    5508:	7c03      	ldrb	r3, [r0, #16]
    550a:	2b00      	cmp	r3, #0
    550c:	d005      	beq.n	551a <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    550e:	6883      	ldr	r3, [r0, #8]
    5510:	1c58      	adds	r0, r3, #1
    5512:	68e1      	ldr	r1, [r4, #12]
    5514:	4b07      	ldr	r3, [pc, #28]	; (5534 <advance_pointer+0x30>)
    5516:	4798      	blx	r3
    5518:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    551a:	6863      	ldr	r3, [r4, #4]
    551c:	1c58      	adds	r0, r3, #1
    551e:	68e1      	ldr	r1, [r4, #12]
    5520:	4b04      	ldr	r3, [pc, #16]	; (5534 <advance_pointer+0x30>)
    5522:	4798      	blx	r3
    5524:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    5526:	68a3      	ldr	r3, [r4, #8]
    5528:	1a59      	subs	r1, r3, r1
    552a:	424a      	negs	r2, r1
    552c:	414a      	adcs	r2, r1
    552e:	7422      	strb	r2, [r4, #16]
 }
    5530:	bd10      	pop	{r4, pc}
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	0000707d 	.word	0x0000707d

00005538 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    5538:	b570      	push	{r4, r5, r6, lr}
    553a:	0005      	movs	r5, r0
    553c:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    553e:	2014      	movs	r0, #20
    5540:	4b04      	ldr	r3, [pc, #16]	; (5554 <circular_buf_init+0x1c>)
    5542:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    5544:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    5546:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    5548:	2300      	movs	r3, #0
    554a:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    554c:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    554e:	7403      	strb	r3, [r0, #16]
 }
    5550:	bd70      	pop	{r4, r5, r6, pc}
    5552:	46c0      	nop			; (mov r8, r8)
    5554:	00008d0d 	.word	0x00008d0d

00005558 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    5558:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    555a:	6803      	ldr	r3, [r0, #0]
    555c:	6842      	ldr	r2, [r0, #4]
    555e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    5560:	4b01      	ldr	r3, [pc, #4]	; (5568 <circular_buf_put+0x10>)
    5562:	4798      	blx	r3
 }
    5564:	bd10      	pop	{r4, pc}
    5566:	46c0      	nop			; (mov r8, r8)
    5568:	00005505 	.word	0x00005505

0000556c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    556c:	7c02      	ldrb	r2, [r0, #16]
    556e:	2300      	movs	r3, #0
    5570:	2a00      	cmp	r2, #0
    5572:	d105      	bne.n	5580 <circular_buf_empty+0x14>
    5574:	6843      	ldr	r3, [r0, #4]
    5576:	6880      	ldr	r0, [r0, #8]
    5578:	1a1b      	subs	r3, r3, r0
    557a:	4258      	negs	r0, r3
    557c:	4143      	adcs	r3, r0
    557e:	b2db      	uxtb	r3, r3
    5580:	0018      	movs	r0, r3
 }
    5582:	4770      	bx	lr

00005584 <circular_buf_get>:
 {
    5584:	b570      	push	{r4, r5, r6, lr}
    5586:	0004      	movs	r4, r0
    5588:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    558a:	4b0a      	ldr	r3, [pc, #40]	; (55b4 <circular_buf_get+0x30>)
    558c:	4798      	blx	r3
    558e:	2800      	cmp	r0, #0
    5590:	d10d      	bne.n	55ae <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    5592:	6823      	ldr	r3, [r4, #0]
    5594:	68a2      	ldr	r2, [r4, #8]
    5596:	5c9b      	ldrb	r3, [r3, r2]
    5598:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    559a:	2300      	movs	r3, #0
    559c:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    559e:	68a3      	ldr	r3, [r4, #8]
    55a0:	1c58      	adds	r0, r3, #1
    55a2:	68e1      	ldr	r1, [r4, #12]
    55a4:	4b04      	ldr	r3, [pc, #16]	; (55b8 <circular_buf_get+0x34>)
    55a6:	4798      	blx	r3
    55a8:	60a1      	str	r1, [r4, #8]
		 r = 0;
    55aa:	2000      	movs	r0, #0
 }
    55ac:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    55ae:	2001      	movs	r0, #1
    55b0:	4240      	negs	r0, r0
	 return r;
    55b2:	e7fb      	b.n	55ac <circular_buf_get+0x28>
    55b4:	0000556d 	.word	0x0000556d
    55b8:	0000707d 	.word	0x0000707d

000055bc <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    55bc:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    55be:	4b06      	ldr	r3, [pc, #24]	; (55d8 <usart_write_callback+0x1c>)
    55c0:	6818      	ldr	r0, [r3, #0]
    55c2:	4906      	ldr	r1, [pc, #24]	; (55dc <usart_write_callback+0x20>)
    55c4:	4b06      	ldr	r3, [pc, #24]	; (55e0 <usart_write_callback+0x24>)
    55c6:	4798      	blx	r3
    55c8:	1c43      	adds	r3, r0, #1
    55ca:	d004      	beq.n	55d6 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    55cc:	2201      	movs	r2, #1
    55ce:	4903      	ldr	r1, [pc, #12]	; (55dc <usart_write_callback+0x20>)
    55d0:	4804      	ldr	r0, [pc, #16]	; (55e4 <usart_write_callback+0x28>)
    55d2:	4b05      	ldr	r3, [pc, #20]	; (55e8 <usart_write_callback+0x2c>)
    55d4:	4798      	blx	r3
	}
	
}
    55d6:	bd10      	pop	{r4, pc}
    55d8:	20004dd0 	.word	0x20004dd0
    55dc:	20004dcc 	.word	0x20004dcc
    55e0:	00005585 	.word	0x00005585
    55e4:	20004990 	.word	0x20004990
    55e8:	00006251 	.word	0x00006251

000055ec <usart_read_callback>:
{
    55ec:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    55ee:	4c07      	ldr	r4, [pc, #28]	; (560c <usart_read_callback+0x20>)
    55f0:	7821      	ldrb	r1, [r4, #0]
    55f2:	4b07      	ldr	r3, [pc, #28]	; (5610 <usart_read_callback+0x24>)
    55f4:	6818      	ldr	r0, [r3, #0]
    55f6:	4b07      	ldr	r3, [pc, #28]	; (5614 <usart_read_callback+0x28>)
    55f8:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    55fa:	2201      	movs	r2, #1
    55fc:	0021      	movs	r1, r4
    55fe:	4806      	ldr	r0, [pc, #24]	; (5618 <usart_read_callback+0x2c>)
    5600:	4b06      	ldr	r3, [pc, #24]	; (561c <usart_read_callback+0x30>)
    5602:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR(); //Give binary semaphore
    5604:	4b06      	ldr	r3, [pc, #24]	; (5620 <usart_read_callback+0x34>)
    5606:	4798      	blx	r3
}
    5608:	bd10      	pop	{r4, pc}
    560a:	46c0      	nop			; (mov r8, r8)
    560c:	200049c8 	.word	0x200049c8
    5610:	200049c4 	.word	0x200049c4
    5614:	00005559 	.word	0x00005559
    5618:	20004990 	.word	0x20004990
    561c:	00006271 	.word	0x00006271
    5620:	00000889 	.word	0x00000889

00005624 <InitializeSerialConsole>:
{
    5624:	b530      	push	{r4, r5, lr}
    5626:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    5628:	2580      	movs	r5, #128	; 0x80
    562a:	00ad      	lsls	r5, r5, #2
    562c:	0029      	movs	r1, r5
    562e:	4836      	ldr	r0, [pc, #216]	; (5708 <InitializeSerialConsole+0xe4>)
    5630:	4c36      	ldr	r4, [pc, #216]	; (570c <InitializeSerialConsole+0xe8>)
    5632:	47a0      	blx	r4
    5634:	4b36      	ldr	r3, [pc, #216]	; (5710 <InitializeSerialConsole+0xec>)
    5636:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    5638:	0029      	movs	r1, r5
    563a:	4836      	ldr	r0, [pc, #216]	; (5714 <InitializeSerialConsole+0xf0>)
    563c:	47a0      	blx	r4
    563e:	4b36      	ldr	r3, [pc, #216]	; (5718 <InitializeSerialConsole+0xf4>)
    5640:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5642:	2380      	movs	r3, #128	; 0x80
    5644:	05db      	lsls	r3, r3, #23
    5646:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5648:	2300      	movs	r3, #0
    564a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    564c:	22ff      	movs	r2, #255	; 0xff
    564e:	4669      	mov	r1, sp
    5650:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    5652:	2200      	movs	r2, #0
    5654:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5656:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5658:	2101      	movs	r1, #1
    565a:	2024      	movs	r0, #36	; 0x24
    565c:	466c      	mov	r4, sp
    565e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    5660:	3001      	adds	r0, #1
    5662:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    5664:	3125      	adds	r1, #37	; 0x25
    5666:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    5668:	3101      	adds	r1, #1
    566a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    566c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    566e:	3105      	adds	r1, #5
    5670:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    5672:	3101      	adds	r1, #1
    5674:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5676:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5678:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    567a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    567c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    567e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5680:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    5682:	2313      	movs	r3, #19
    5684:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5686:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    5688:	23e1      	movs	r3, #225	; 0xe1
    568a:	025b      	lsls	r3, r3, #9
    568c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    568e:	23c4      	movs	r3, #196	; 0xc4
    5690:	039b      	lsls	r3, r3, #14
    5692:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5694:	2301      	movs	r3, #1
    5696:	425b      	negs	r3, r3
    5698:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    569a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    569c:	4b1f      	ldr	r3, [pc, #124]	; (571c <InitializeSerialConsole+0xf8>)
    569e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    56a0:	4b1f      	ldr	r3, [pc, #124]	; (5720 <InitializeSerialConsole+0xfc>)
    56a2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    56a4:	4d1f      	ldr	r5, [pc, #124]	; (5724 <InitializeSerialConsole+0x100>)
    56a6:	4c20      	ldr	r4, [pc, #128]	; (5728 <InitializeSerialConsole+0x104>)
    56a8:	466a      	mov	r2, sp
    56aa:	4920      	ldr	r1, [pc, #128]	; (572c <InitializeSerialConsole+0x108>)
    56ac:	0028      	movs	r0, r5
    56ae:	47a0      	blx	r4
    56b0:	2800      	cmp	r0, #0
    56b2:	d1f9      	bne.n	56a8 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    56b4:	4d1b      	ldr	r5, [pc, #108]	; (5724 <InitializeSerialConsole+0x100>)
    56b6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    56b8:	0020      	movs	r0, r4
    56ba:	4b1d      	ldr	r3, [pc, #116]	; (5730 <InitializeSerialConsole+0x10c>)
    56bc:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    56be:	231f      	movs	r3, #31
    56c0:	4018      	ands	r0, r3
    56c2:	3b1e      	subs	r3, #30
    56c4:	4083      	lsls	r3, r0
    56c6:	4a1b      	ldr	r2, [pc, #108]	; (5734 <InitializeSerialConsole+0x110>)
    56c8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    56ca:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    56cc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    56ce:	2b00      	cmp	r3, #0
    56d0:	d1fc      	bne.n	56cc <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    56d2:	6823      	ldr	r3, [r4, #0]
    56d4:	2202      	movs	r2, #2
    56d6:	4313      	orrs	r3, r2
    56d8:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    56da:	4c12      	ldr	r4, [pc, #72]	; (5724 <InitializeSerialConsole+0x100>)
    56dc:	2200      	movs	r2, #0
    56de:	4916      	ldr	r1, [pc, #88]	; (5738 <InitializeSerialConsole+0x114>)
    56e0:	0020      	movs	r0, r4
    56e2:	4d16      	ldr	r5, [pc, #88]	; (573c <InitializeSerialConsole+0x118>)
    56e4:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    56e6:	2201      	movs	r2, #1
    56e8:	4915      	ldr	r1, [pc, #84]	; (5740 <InitializeSerialConsole+0x11c>)
    56ea:	0020      	movs	r0, r4
    56ec:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    56ee:	2231      	movs	r2, #49	; 0x31
    56f0:	5ca3      	ldrb	r3, [r4, r2]
    56f2:	2103      	movs	r1, #3
    56f4:	430b      	orrs	r3, r1
    56f6:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    56f8:	3a30      	subs	r2, #48	; 0x30
    56fa:	4912      	ldr	r1, [pc, #72]	; (5744 <InitializeSerialConsole+0x120>)
    56fc:	0020      	movs	r0, r4
    56fe:	4b12      	ldr	r3, [pc, #72]	; (5748 <InitializeSerialConsole+0x124>)
    5700:	4798      	blx	r3
}
    5702:	b011      	add	sp, #68	; 0x44
    5704:	bd30      	pop	{r4, r5, pc}
    5706:	46c0      	nop			; (mov r8, r8)
    5708:	20004bcc 	.word	0x20004bcc
    570c:	00005539 	.word	0x00005539
    5710:	200049c4 	.word	0x200049c4
    5714:	200049cc 	.word	0x200049cc
    5718:	20004dd0 	.word	0x20004dd0
    571c:	002a0003 	.word	0x002a0003
    5720:	002b0003 	.word	0x002b0003
    5724:	20004990 	.word	0x20004990
    5728:	00005e69 	.word	0x00005e69
    572c:	42001800 	.word	0x42001800
    5730:	00005dd9 	.word	0x00005dd9
    5734:	e000e100 	.word	0xe000e100
    5738:	000055bd 	.word	0x000055bd
    573c:	00006239 	.word	0x00006239
    5740:	000055ed 	.word	0x000055ed
    5744:	200049c8 	.word	0x200049c8
    5748:	00006271 	.word	0x00006271

0000574c <SerialConsoleWriteString>:
{
    574c:	b5f0      	push	{r4, r5, r6, r7, lr}
    574e:	46c6      	mov	lr, r8
    5750:	b500      	push	{lr}
    5752:	0005      	movs	r5, r0
vTaskSuspendAll();
    5754:	4b14      	ldr	r3, [pc, #80]	; (57a8 <SerialConsoleWriteString+0x5c>)
    5756:	4798      	blx	r3
    5758:	2400      	movs	r4, #0
	if(string != NULL)
    575a:	2d00      	cmp	r5, #0
    575c:	d012      	beq.n	5784 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
    575e:	4e13      	ldr	r6, [pc, #76]	; (57ac <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
    5760:	4f13      	ldr	r7, [pc, #76]	; (57b0 <SerialConsoleWriteString+0x64>)
    5762:	4b14      	ldr	r3, [pc, #80]	; (57b4 <SerialConsoleWriteString+0x68>)
    5764:	4698      	mov	r8, r3
    5766:	e003      	b.n	5770 <SerialConsoleWriteString+0x24>
    5768:	5d29      	ldrb	r1, [r5, r4]
    576a:	6838      	ldr	r0, [r7, #0]
    576c:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    576e:	3401      	adds	r4, #1
    5770:	0028      	movs	r0, r5
    5772:	47b0      	blx	r6
    5774:	4284      	cmp	r4, r0
    5776:	d3f7      	bcc.n	5768 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    5778:	2101      	movs	r1, #1
    577a:	480f      	ldr	r0, [pc, #60]	; (57b8 <SerialConsoleWriteString+0x6c>)
    577c:	4b0f      	ldr	r3, [pc, #60]	; (57bc <SerialConsoleWriteString+0x70>)
    577e:	4798      	blx	r3
    5780:	2800      	cmp	r0, #0
    5782:	d004      	beq.n	578e <SerialConsoleWriteString+0x42>
xTaskResumeAll();
    5784:	4b0e      	ldr	r3, [pc, #56]	; (57c0 <SerialConsoleWriteString+0x74>)
    5786:	4798      	blx	r3
}
    5788:	bc04      	pop	{r2}
    578a:	4690      	mov	r8, r2
    578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    578e:	4c0d      	ldr	r4, [pc, #52]	; (57c4 <SerialConsoleWriteString+0x78>)
    5790:	4b07      	ldr	r3, [pc, #28]	; (57b0 <SerialConsoleWriteString+0x64>)
    5792:	6818      	ldr	r0, [r3, #0]
    5794:	0021      	movs	r1, r4
    5796:	4b0c      	ldr	r3, [pc, #48]	; (57c8 <SerialConsoleWriteString+0x7c>)
    5798:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    579a:	2201      	movs	r2, #1
    579c:	0021      	movs	r1, r4
    579e:	4806      	ldr	r0, [pc, #24]	; (57b8 <SerialConsoleWriteString+0x6c>)
    57a0:	4b0a      	ldr	r3, [pc, #40]	; (57cc <SerialConsoleWriteString+0x80>)
    57a2:	4798      	blx	r3
    57a4:	e7ee      	b.n	5784 <SerialConsoleWriteString+0x38>
    57a6:	46c0      	nop			; (mov r8, r8)
    57a8:	00004655 	.word	0x00004655
    57ac:	00008f9d 	.word	0x00008f9d
    57b0:	20004dd0 	.word	0x20004dd0
    57b4:	00005559 	.word	0x00005559
    57b8:	20004990 	.word	0x20004990
    57bc:	00006291 	.word	0x00006291
    57c0:	000047fd 	.word	0x000047fd
    57c4:	20004dcc 	.word	0x20004dcc
    57c8:	00005585 	.word	0x00005585
    57cc:	00006251 	.word	0x00006251

000057d0 <SerialConsoleReadCharacter>:
{
    57d0:	b510      	push	{r4, lr}
    57d2:	0004      	movs	r4, r0
	vTaskSuspendAll();
    57d4:	4b05      	ldr	r3, [pc, #20]	; (57ec <SerialConsoleReadCharacter+0x1c>)
    57d6:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
    57d8:	4b05      	ldr	r3, [pc, #20]	; (57f0 <SerialConsoleReadCharacter+0x20>)
    57da:	6818      	ldr	r0, [r3, #0]
    57dc:	0021      	movs	r1, r4
    57de:	4b05      	ldr	r3, [pc, #20]	; (57f4 <SerialConsoleReadCharacter+0x24>)
    57e0:	4798      	blx	r3
    57e2:	0004      	movs	r4, r0
	xTaskResumeAll();
    57e4:	4b04      	ldr	r3, [pc, #16]	; (57f8 <SerialConsoleReadCharacter+0x28>)
    57e6:	4798      	blx	r3
}
    57e8:	0020      	movs	r0, r4
    57ea:	bd10      	pop	{r4, pc}
    57ec:	00004655 	.word	0x00004655
    57f0:	200049c4 	.word	0x200049c4
    57f4:	00005585 	.word	0x00005585
    57f8:	000047fd 	.word	0x000047fd

000057fc <LogMessage>:
{
    57fc:	b40e      	push	{r1, r2, r3}
    57fe:	b530      	push	{r4, r5, lr}
    5800:	b082      	sub	sp, #8
return currentDebugLevel;
    5802:	4b0a      	ldr	r3, [pc, #40]	; (582c <LogMessage+0x30>)
if(getLogLevel() <= level){
    5804:	781b      	ldrb	r3, [r3, #0]
    5806:	4283      	cmp	r3, r0
    5808:	d904      	bls.n	5814 <LogMessage+0x18>
};
    580a:	b002      	add	sp, #8
    580c:	bc30      	pop	{r4, r5}
    580e:	bc08      	pop	{r3}
    5810:	b003      	add	sp, #12
    5812:	4718      	bx	r3
	va_start(ap, format);
    5814:	ab06      	add	r3, sp, #24
    5816:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
    5818:	4c05      	ldr	r4, [pc, #20]	; (5830 <LogMessage+0x34>)
    581a:	9a05      	ldr	r2, [sp, #20]
    581c:	217f      	movs	r1, #127	; 0x7f
    581e:	0020      	movs	r0, r4
    5820:	4d04      	ldr	r5, [pc, #16]	; (5834 <LogMessage+0x38>)
    5822:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
    5824:	0020      	movs	r0, r4
    5826:	4b04      	ldr	r3, [pc, #16]	; (5838 <LogMessage+0x3c>)
    5828:	4798      	blx	r3
};
    582a:	e7ee      	b.n	580a <LogMessage+0xe>
    582c:	20003810 	.word	0x20003810
    5830:	20004910 	.word	0x20004910
    5834:	0000904d 	.word	0x0000904d
    5838:	0000574d 	.word	0x0000574d

0000583c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    583c:	4b0c      	ldr	r3, [pc, #48]	; (5870 <cpu_irq_enter_critical+0x34>)
    583e:	681b      	ldr	r3, [r3, #0]
    5840:	2b00      	cmp	r3, #0
    5842:	d106      	bne.n	5852 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5844:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    5848:	2b00      	cmp	r3, #0
    584a:	d007      	beq.n	585c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    584c:	2200      	movs	r2, #0
    584e:	4b09      	ldr	r3, [pc, #36]	; (5874 <cpu_irq_enter_critical+0x38>)
    5850:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5852:	4a07      	ldr	r2, [pc, #28]	; (5870 <cpu_irq_enter_critical+0x34>)
    5854:	6813      	ldr	r3, [r2, #0]
    5856:	3301      	adds	r3, #1
    5858:	6013      	str	r3, [r2, #0]
}
    585a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    585c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    585e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5862:	2200      	movs	r2, #0
    5864:	4b04      	ldr	r3, [pc, #16]	; (5878 <cpu_irq_enter_critical+0x3c>)
    5866:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5868:	3201      	adds	r2, #1
    586a:	4b02      	ldr	r3, [pc, #8]	; (5874 <cpu_irq_enter_critical+0x38>)
    586c:	701a      	strb	r2, [r3, #0]
    586e:	e7f0      	b.n	5852 <cpu_irq_enter_critical+0x16>
    5870:	20003814 	.word	0x20003814
    5874:	20003818 	.word	0x20003818
    5878:	2000002c 	.word	0x2000002c

0000587c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    587c:	4b08      	ldr	r3, [pc, #32]	; (58a0 <cpu_irq_leave_critical+0x24>)
    587e:	681a      	ldr	r2, [r3, #0]
    5880:	3a01      	subs	r2, #1
    5882:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5884:	681b      	ldr	r3, [r3, #0]
    5886:	2b00      	cmp	r3, #0
    5888:	d109      	bne.n	589e <cpu_irq_leave_critical+0x22>
    588a:	4b06      	ldr	r3, [pc, #24]	; (58a4 <cpu_irq_leave_critical+0x28>)
    588c:	781b      	ldrb	r3, [r3, #0]
    588e:	2b00      	cmp	r3, #0
    5890:	d005      	beq.n	589e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    5892:	2201      	movs	r2, #1
    5894:	4b04      	ldr	r3, [pc, #16]	; (58a8 <cpu_irq_leave_critical+0x2c>)
    5896:	701a      	strb	r2, [r3, #0]
    5898:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    589c:	b662      	cpsie	i
	}
}
    589e:	4770      	bx	lr
    58a0:	20003814 	.word	0x20003814
    58a4:	20003818 	.word	0x20003818
    58a8:	2000002c 	.word	0x2000002c

000058ac <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    58ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ae:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    58b0:	ac01      	add	r4, sp, #4
    58b2:	2501      	movs	r5, #1
    58b4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    58b6:	2700      	movs	r7, #0
    58b8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    58ba:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    58bc:	0021      	movs	r1, r4
    58be:	2017      	movs	r0, #23
    58c0:	4e06      	ldr	r6, [pc, #24]	; (58dc <system_board_init+0x30>)
    58c2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    58c4:	2280      	movs	r2, #128	; 0x80
    58c6:	0412      	lsls	r2, r2, #16
    58c8:	4b05      	ldr	r3, [pc, #20]	; (58e0 <system_board_init+0x34>)
    58ca:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    58cc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    58ce:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    58d0:	0021      	movs	r1, r4
    58d2:	2037      	movs	r0, #55	; 0x37
    58d4:	47b0      	blx	r6
}
    58d6:	b003      	add	sp, #12
    58d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58da:	46c0      	nop			; (mov r8, r8)
    58dc:	000059bd 	.word	0x000059bd
    58e0:	41004400 	.word	0x41004400

000058e4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    58e4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    58e6:	2200      	movs	r2, #0
    58e8:	4b10      	ldr	r3, [pc, #64]	; (592c <EIC_Handler+0x48>)
    58ea:	701a      	strb	r2, [r3, #0]
    58ec:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    58ee:	4910      	ldr	r1, [pc, #64]	; (5930 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    58f0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    58f2:	4e10      	ldr	r6, [pc, #64]	; (5934 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    58f4:	4c0d      	ldr	r4, [pc, #52]	; (592c <EIC_Handler+0x48>)
    58f6:	e00a      	b.n	590e <EIC_Handler+0x2a>
		return eics[eic_index];
    58f8:	490d      	ldr	r1, [pc, #52]	; (5930 <EIC_Handler+0x4c>)
    58fa:	e008      	b.n	590e <EIC_Handler+0x2a>
    58fc:	7823      	ldrb	r3, [r4, #0]
    58fe:	3301      	adds	r3, #1
    5900:	b2db      	uxtb	r3, r3
    5902:	7023      	strb	r3, [r4, #0]
    5904:	2b0f      	cmp	r3, #15
    5906:	d810      	bhi.n	592a <EIC_Handler+0x46>
		return NULL;
    5908:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    590a:	2b1f      	cmp	r3, #31
    590c:	d9f4      	bls.n	58f8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    590e:	0028      	movs	r0, r5
    5910:	4018      	ands	r0, r3
    5912:	2201      	movs	r2, #1
    5914:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    5916:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    5918:	4210      	tst	r0, r2
    591a:	d0ef      	beq.n	58fc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    591c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    591e:	009b      	lsls	r3, r3, #2
    5920:	599b      	ldr	r3, [r3, r6]
    5922:	2b00      	cmp	r3, #0
    5924:	d0ea      	beq.n	58fc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5926:	4798      	blx	r3
    5928:	e7e8      	b.n	58fc <EIC_Handler+0x18>
			}
		}
	}
}
    592a:	bd70      	pop	{r4, r5, r6, pc}
    592c:	20004dd4 	.word	0x20004dd4
    5930:	40001800 	.word	0x40001800
    5934:	20004dd8 	.word	0x20004dd8

00005938 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5938:	4a04      	ldr	r2, [pc, #16]	; (594c <_extint_enable+0x14>)
    593a:	7813      	ldrb	r3, [r2, #0]
    593c:	2102      	movs	r1, #2
    593e:	430b      	orrs	r3, r1
    5940:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5942:	7853      	ldrb	r3, [r2, #1]
    5944:	b25b      	sxtb	r3, r3
    5946:	2b00      	cmp	r3, #0
    5948:	dbfb      	blt.n	5942 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    594a:	4770      	bx	lr
    594c:	40001800 	.word	0x40001800

00005950 <_system_extint_init>:
{
    5950:	b500      	push	{lr}
    5952:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    5954:	4a12      	ldr	r2, [pc, #72]	; (59a0 <_system_extint_init+0x50>)
    5956:	6993      	ldr	r3, [r2, #24]
    5958:	2140      	movs	r1, #64	; 0x40
    595a:	430b      	orrs	r3, r1
    595c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    595e:	a901      	add	r1, sp, #4
    5960:	2300      	movs	r3, #0
    5962:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    5964:	2005      	movs	r0, #5
    5966:	4b0f      	ldr	r3, [pc, #60]	; (59a4 <_system_extint_init+0x54>)
    5968:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    596a:	2005      	movs	r0, #5
    596c:	4b0e      	ldr	r3, [pc, #56]	; (59a8 <_system_extint_init+0x58>)
    596e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5970:	4a0e      	ldr	r2, [pc, #56]	; (59ac <_system_extint_init+0x5c>)
    5972:	7813      	ldrb	r3, [r2, #0]
    5974:	2101      	movs	r1, #1
    5976:	430b      	orrs	r3, r1
    5978:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    597a:	7853      	ldrb	r3, [r2, #1]
    597c:	b25b      	sxtb	r3, r3
    597e:	2b00      	cmp	r3, #0
    5980:	dbfb      	blt.n	597a <_system_extint_init+0x2a>
    5982:	4b0b      	ldr	r3, [pc, #44]	; (59b0 <_system_extint_init+0x60>)
    5984:	0019      	movs	r1, r3
    5986:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    5988:	2200      	movs	r2, #0
    598a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    598c:	4299      	cmp	r1, r3
    598e:	d1fc      	bne.n	598a <_system_extint_init+0x3a>
    5990:	2210      	movs	r2, #16
    5992:	4b08      	ldr	r3, [pc, #32]	; (59b4 <_system_extint_init+0x64>)
    5994:	601a      	str	r2, [r3, #0]
	_extint_enable();
    5996:	4b08      	ldr	r3, [pc, #32]	; (59b8 <_system_extint_init+0x68>)
    5998:	4798      	blx	r3
}
    599a:	b003      	add	sp, #12
    599c:	bd00      	pop	{pc}
    599e:	46c0      	nop			; (mov r8, r8)
    59a0:	40000400 	.word	0x40000400
    59a4:	00006a0d 	.word	0x00006a0d
    59a8:	00006981 	.word	0x00006981
    59ac:	40001800 	.word	0x40001800
    59b0:	20004dd8 	.word	0x20004dd8
    59b4:	e000e100 	.word	0xe000e100
    59b8:	00005939 	.word	0x00005939

000059bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    59bc:	b500      	push	{lr}
    59be:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    59c0:	ab01      	add	r3, sp, #4
    59c2:	2280      	movs	r2, #128	; 0x80
    59c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    59c6:	780a      	ldrb	r2, [r1, #0]
    59c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    59ca:	784a      	ldrb	r2, [r1, #1]
    59cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    59ce:	788a      	ldrb	r2, [r1, #2]
    59d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    59d2:	0019      	movs	r1, r3
    59d4:	4b01      	ldr	r3, [pc, #4]	; (59dc <port_pin_set_config+0x20>)
    59d6:	4798      	blx	r3
}
    59d8:	b003      	add	sp, #12
    59da:	bd00      	pop	{pc}
    59dc:	00006b35 	.word	0x00006b35

000059e0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    59e0:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    59e2:	4b0f      	ldr	r3, [pc, #60]	; (5a20 <RTC_Handler+0x40>)
    59e4:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    59e6:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    59e8:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    59ea:	8a13      	ldrh	r3, [r2, #16]
    59ec:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    59ee:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    59f0:	79e3      	ldrb	r3, [r4, #7]
    59f2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    59f4:	b258      	sxtb	r0, r3
    59f6:	2800      	cmp	r0, #0
    59f8:	db06      	blt.n	5a08 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    59fa:	07db      	lsls	r3, r3, #31
    59fc:	d503      	bpl.n	5a06 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    59fe:	07cb      	lsls	r3, r1, #31
    5a00:	d40a      	bmi.n	5a18 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    5a02:	2301      	movs	r3, #1
    5a04:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    5a06:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    5a08:	078b      	lsls	r3, r1, #30
    5a0a:	d402      	bmi.n	5a12 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    5a0c:	2380      	movs	r3, #128	; 0x80
    5a0e:	7223      	strb	r3, [r4, #8]
    5a10:	e7f9      	b.n	5a06 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    5a12:	68d3      	ldr	r3, [r2, #12]
    5a14:	4798      	blx	r3
    5a16:	e7f9      	b.n	5a0c <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    5a18:	6893      	ldr	r3, [r2, #8]
    5a1a:	4798      	blx	r3
    5a1c:	e7f1      	b.n	5a02 <RTC_Handler+0x22>
    5a1e:	46c0      	nop			; (mov r8, r8)
    5a20:	20004e18 	.word	0x20004e18

00005a24 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a26:	46de      	mov	lr, fp
    5a28:	4657      	mov	r7, sl
    5a2a:	464e      	mov	r6, r9
    5a2c:	4645      	mov	r5, r8
    5a2e:	b5e0      	push	{r5, r6, r7, lr}
    5a30:	b087      	sub	sp, #28
    5a32:	4680      	mov	r8, r0
    5a34:	9104      	str	r1, [sp, #16]
    5a36:	0016      	movs	r6, r2
    5a38:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5a3a:	2200      	movs	r2, #0
    5a3c:	2300      	movs	r3, #0
    5a3e:	2100      	movs	r1, #0
    5a40:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5a42:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5a44:	2001      	movs	r0, #1
    5a46:	0021      	movs	r1, r4
    5a48:	9600      	str	r6, [sp, #0]
    5a4a:	9701      	str	r7, [sp, #4]
    5a4c:	465c      	mov	r4, fp
    5a4e:	9403      	str	r4, [sp, #12]
    5a50:	4644      	mov	r4, r8
    5a52:	9405      	str	r4, [sp, #20]
    5a54:	e013      	b.n	5a7e <long_division+0x5a>
    5a56:	2420      	movs	r4, #32
    5a58:	1a64      	subs	r4, r4, r1
    5a5a:	0005      	movs	r5, r0
    5a5c:	40e5      	lsrs	r5, r4
    5a5e:	46a8      	mov	r8, r5
    5a60:	e014      	b.n	5a8c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5a62:	9c00      	ldr	r4, [sp, #0]
    5a64:	9d01      	ldr	r5, [sp, #4]
    5a66:	1b12      	subs	r2, r2, r4
    5a68:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5a6a:	465c      	mov	r4, fp
    5a6c:	464d      	mov	r5, r9
    5a6e:	432c      	orrs	r4, r5
    5a70:	46a3      	mov	fp, r4
    5a72:	9c03      	ldr	r4, [sp, #12]
    5a74:	4645      	mov	r5, r8
    5a76:	432c      	orrs	r4, r5
    5a78:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5a7a:	3901      	subs	r1, #1
    5a7c:	d325      	bcc.n	5aca <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5a7e:	2420      	movs	r4, #32
    5a80:	4264      	negs	r4, r4
    5a82:	190c      	adds	r4, r1, r4
    5a84:	d4e7      	bmi.n	5a56 <long_division+0x32>
    5a86:	0005      	movs	r5, r0
    5a88:	40a5      	lsls	r5, r4
    5a8a:	46a8      	mov	r8, r5
    5a8c:	0004      	movs	r4, r0
    5a8e:	408c      	lsls	r4, r1
    5a90:	46a1      	mov	r9, r4
		r = r << 1;
    5a92:	1892      	adds	r2, r2, r2
    5a94:	415b      	adcs	r3, r3
    5a96:	0014      	movs	r4, r2
    5a98:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5a9a:	9e05      	ldr	r6, [sp, #20]
    5a9c:	464f      	mov	r7, r9
    5a9e:	403e      	ands	r6, r7
    5aa0:	46b4      	mov	ip, r6
    5aa2:	9e04      	ldr	r6, [sp, #16]
    5aa4:	4647      	mov	r7, r8
    5aa6:	403e      	ands	r6, r7
    5aa8:	46b2      	mov	sl, r6
    5aaa:	4666      	mov	r6, ip
    5aac:	4657      	mov	r7, sl
    5aae:	433e      	orrs	r6, r7
    5ab0:	d003      	beq.n	5aba <long_division+0x96>
			r |= 0x01;
    5ab2:	0006      	movs	r6, r0
    5ab4:	4326      	orrs	r6, r4
    5ab6:	0032      	movs	r2, r6
    5ab8:	002b      	movs	r3, r5
		if (r >= d) {
    5aba:	9c00      	ldr	r4, [sp, #0]
    5abc:	9d01      	ldr	r5, [sp, #4]
    5abe:	429d      	cmp	r5, r3
    5ac0:	d8db      	bhi.n	5a7a <long_division+0x56>
    5ac2:	d1ce      	bne.n	5a62 <long_division+0x3e>
    5ac4:	4294      	cmp	r4, r2
    5ac6:	d8d8      	bhi.n	5a7a <long_division+0x56>
    5ac8:	e7cb      	b.n	5a62 <long_division+0x3e>
    5aca:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5acc:	4658      	mov	r0, fp
    5ace:	0019      	movs	r1, r3
    5ad0:	b007      	add	sp, #28
    5ad2:	bc3c      	pop	{r2, r3, r4, r5}
    5ad4:	4690      	mov	r8, r2
    5ad6:	4699      	mov	r9, r3
    5ad8:	46a2      	mov	sl, r4
    5ada:	46ab      	mov	fp, r5
    5adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005ade <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5ade:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5ae0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5ae2:	2340      	movs	r3, #64	; 0x40
    5ae4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5ae6:	4281      	cmp	r1, r0
    5ae8:	d202      	bcs.n	5af0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5aea:	0018      	movs	r0, r3
    5aec:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5aee:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5af0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5af2:	1c63      	adds	r3, r4, #1
    5af4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5af6:	4288      	cmp	r0, r1
    5af8:	d9f9      	bls.n	5aee <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5afa:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5afc:	2cff      	cmp	r4, #255	; 0xff
    5afe:	d8f4      	bhi.n	5aea <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5b00:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5b02:	2300      	movs	r3, #0
    5b04:	e7f1      	b.n	5aea <_sercom_get_sync_baud_val+0xc>
	...

00005b08 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b0a:	b083      	sub	sp, #12
    5b0c:	000f      	movs	r7, r1
    5b0e:	0016      	movs	r6, r2
    5b10:	aa08      	add	r2, sp, #32
    5b12:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5b14:	0004      	movs	r4, r0
    5b16:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5b18:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5b1a:	42bc      	cmp	r4, r7
    5b1c:	d902      	bls.n	5b24 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5b1e:	0010      	movs	r0, r2
    5b20:	b003      	add	sp, #12
    5b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5b24:	2b00      	cmp	r3, #0
    5b26:	d114      	bne.n	5b52 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5b28:	0002      	movs	r2, r0
    5b2a:	0008      	movs	r0, r1
    5b2c:	2100      	movs	r1, #0
    5b2e:	4c19      	ldr	r4, [pc, #100]	; (5b94 <_sercom_get_async_baud_val+0x8c>)
    5b30:	47a0      	blx	r4
    5b32:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5b34:	003a      	movs	r2, r7
    5b36:	2300      	movs	r3, #0
    5b38:	2000      	movs	r0, #0
    5b3a:	4c17      	ldr	r4, [pc, #92]	; (5b98 <_sercom_get_async_baud_val+0x90>)
    5b3c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5b3e:	2200      	movs	r2, #0
    5b40:	2301      	movs	r3, #1
    5b42:	1a12      	subs	r2, r2, r0
    5b44:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5b46:	0c12      	lsrs	r2, r2, #16
    5b48:	041b      	lsls	r3, r3, #16
    5b4a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5b4c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5b4e:	2200      	movs	r2, #0
    5b50:	e7e5      	b.n	5b1e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5b52:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5b54:	2b01      	cmp	r3, #1
    5b56:	d1f9      	bne.n	5b4c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5b58:	000a      	movs	r2, r1
    5b5a:	2300      	movs	r3, #0
    5b5c:	2100      	movs	r1, #0
    5b5e:	4c0d      	ldr	r4, [pc, #52]	; (5b94 <_sercom_get_async_baud_val+0x8c>)
    5b60:	47a0      	blx	r4
    5b62:	0002      	movs	r2, r0
    5b64:	000b      	movs	r3, r1
    5b66:	9200      	str	r2, [sp, #0]
    5b68:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5b6a:	0038      	movs	r0, r7
    5b6c:	2100      	movs	r1, #0
    5b6e:	4c0a      	ldr	r4, [pc, #40]	; (5b98 <_sercom_get_async_baud_val+0x90>)
    5b70:	47a0      	blx	r4
    5b72:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5b74:	2380      	movs	r3, #128	; 0x80
    5b76:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5b78:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5b7a:	4298      	cmp	r0, r3
    5b7c:	d8cf      	bhi.n	5b1e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5b7e:	0f79      	lsrs	r1, r7, #29
    5b80:	00f8      	lsls	r0, r7, #3
    5b82:	9a00      	ldr	r2, [sp, #0]
    5b84:	9b01      	ldr	r3, [sp, #4]
    5b86:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5b88:	00ea      	lsls	r2, r5, #3
    5b8a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5b8c:	b2d2      	uxtb	r2, r2
    5b8e:	0352      	lsls	r2, r2, #13
    5b90:	432a      	orrs	r2, r5
    5b92:	e7db      	b.n	5b4c <_sercom_get_async_baud_val+0x44>
    5b94:	00007089 	.word	0x00007089
    5b98:	00005a25 	.word	0x00005a25

00005b9c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5b9c:	b510      	push	{r4, lr}
    5b9e:	b082      	sub	sp, #8
    5ba0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5ba2:	4b0e      	ldr	r3, [pc, #56]	; (5bdc <sercom_set_gclk_generator+0x40>)
    5ba4:	781b      	ldrb	r3, [r3, #0]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d007      	beq.n	5bba <sercom_set_gclk_generator+0x1e>
    5baa:	2900      	cmp	r1, #0
    5bac:	d105      	bne.n	5bba <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5bae:	4b0b      	ldr	r3, [pc, #44]	; (5bdc <sercom_set_gclk_generator+0x40>)
    5bb0:	785b      	ldrb	r3, [r3, #1]
    5bb2:	4283      	cmp	r3, r0
    5bb4:	d010      	beq.n	5bd8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5bb6:	201d      	movs	r0, #29
    5bb8:	e00c      	b.n	5bd4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5bba:	a901      	add	r1, sp, #4
    5bbc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5bbe:	2013      	movs	r0, #19
    5bc0:	4b07      	ldr	r3, [pc, #28]	; (5be0 <sercom_set_gclk_generator+0x44>)
    5bc2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5bc4:	2013      	movs	r0, #19
    5bc6:	4b07      	ldr	r3, [pc, #28]	; (5be4 <sercom_set_gclk_generator+0x48>)
    5bc8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5bca:	4b04      	ldr	r3, [pc, #16]	; (5bdc <sercom_set_gclk_generator+0x40>)
    5bcc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5bce:	2201      	movs	r2, #1
    5bd0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5bd2:	2000      	movs	r0, #0
}
    5bd4:	b002      	add	sp, #8
    5bd6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5bd8:	2000      	movs	r0, #0
    5bda:	e7fb      	b.n	5bd4 <sercom_set_gclk_generator+0x38>
    5bdc:	2000381c 	.word	0x2000381c
    5be0:	00006a0d 	.word	0x00006a0d
    5be4:	00006981 	.word	0x00006981

00005be8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5be8:	4b40      	ldr	r3, [pc, #256]	; (5cec <_sercom_get_default_pad+0x104>)
    5bea:	4298      	cmp	r0, r3
    5bec:	d031      	beq.n	5c52 <_sercom_get_default_pad+0x6a>
    5bee:	d90a      	bls.n	5c06 <_sercom_get_default_pad+0x1e>
    5bf0:	4b3f      	ldr	r3, [pc, #252]	; (5cf0 <_sercom_get_default_pad+0x108>)
    5bf2:	4298      	cmp	r0, r3
    5bf4:	d04d      	beq.n	5c92 <_sercom_get_default_pad+0xaa>
    5bf6:	4b3f      	ldr	r3, [pc, #252]	; (5cf4 <_sercom_get_default_pad+0x10c>)
    5bf8:	4298      	cmp	r0, r3
    5bfa:	d05a      	beq.n	5cb2 <_sercom_get_default_pad+0xca>
    5bfc:	4b3e      	ldr	r3, [pc, #248]	; (5cf8 <_sercom_get_default_pad+0x110>)
    5bfe:	4298      	cmp	r0, r3
    5c00:	d037      	beq.n	5c72 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5c02:	2000      	movs	r0, #0
}
    5c04:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5c06:	4b3d      	ldr	r3, [pc, #244]	; (5cfc <_sercom_get_default_pad+0x114>)
    5c08:	4298      	cmp	r0, r3
    5c0a:	d00c      	beq.n	5c26 <_sercom_get_default_pad+0x3e>
    5c0c:	4b3c      	ldr	r3, [pc, #240]	; (5d00 <_sercom_get_default_pad+0x118>)
    5c0e:	4298      	cmp	r0, r3
    5c10:	d1f7      	bne.n	5c02 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5c12:	2901      	cmp	r1, #1
    5c14:	d017      	beq.n	5c46 <_sercom_get_default_pad+0x5e>
    5c16:	2900      	cmp	r1, #0
    5c18:	d05d      	beq.n	5cd6 <_sercom_get_default_pad+0xee>
    5c1a:	2902      	cmp	r1, #2
    5c1c:	d015      	beq.n	5c4a <_sercom_get_default_pad+0x62>
    5c1e:	2903      	cmp	r1, #3
    5c20:	d015      	beq.n	5c4e <_sercom_get_default_pad+0x66>
	return 0;
    5c22:	2000      	movs	r0, #0
    5c24:	e7ee      	b.n	5c04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5c26:	2901      	cmp	r1, #1
    5c28:	d007      	beq.n	5c3a <_sercom_get_default_pad+0x52>
    5c2a:	2900      	cmp	r1, #0
    5c2c:	d051      	beq.n	5cd2 <_sercom_get_default_pad+0xea>
    5c2e:	2902      	cmp	r1, #2
    5c30:	d005      	beq.n	5c3e <_sercom_get_default_pad+0x56>
    5c32:	2903      	cmp	r1, #3
    5c34:	d005      	beq.n	5c42 <_sercom_get_default_pad+0x5a>
	return 0;
    5c36:	2000      	movs	r0, #0
    5c38:	e7e4      	b.n	5c04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5c3a:	4832      	ldr	r0, [pc, #200]	; (5d04 <_sercom_get_default_pad+0x11c>)
    5c3c:	e7e2      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c3e:	4832      	ldr	r0, [pc, #200]	; (5d08 <_sercom_get_default_pad+0x120>)
    5c40:	e7e0      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c42:	4832      	ldr	r0, [pc, #200]	; (5d0c <_sercom_get_default_pad+0x124>)
    5c44:	e7de      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c46:	4832      	ldr	r0, [pc, #200]	; (5d10 <_sercom_get_default_pad+0x128>)
    5c48:	e7dc      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c4a:	4832      	ldr	r0, [pc, #200]	; (5d14 <_sercom_get_default_pad+0x12c>)
    5c4c:	e7da      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c4e:	4832      	ldr	r0, [pc, #200]	; (5d18 <_sercom_get_default_pad+0x130>)
    5c50:	e7d8      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c52:	2901      	cmp	r1, #1
    5c54:	d007      	beq.n	5c66 <_sercom_get_default_pad+0x7e>
    5c56:	2900      	cmp	r1, #0
    5c58:	d03f      	beq.n	5cda <_sercom_get_default_pad+0xf2>
    5c5a:	2902      	cmp	r1, #2
    5c5c:	d005      	beq.n	5c6a <_sercom_get_default_pad+0x82>
    5c5e:	2903      	cmp	r1, #3
    5c60:	d005      	beq.n	5c6e <_sercom_get_default_pad+0x86>
	return 0;
    5c62:	2000      	movs	r0, #0
    5c64:	e7ce      	b.n	5c04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5c66:	482d      	ldr	r0, [pc, #180]	; (5d1c <_sercom_get_default_pad+0x134>)
    5c68:	e7cc      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c6a:	482d      	ldr	r0, [pc, #180]	; (5d20 <_sercom_get_default_pad+0x138>)
    5c6c:	e7ca      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c6e:	482d      	ldr	r0, [pc, #180]	; (5d24 <_sercom_get_default_pad+0x13c>)
    5c70:	e7c8      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c72:	2901      	cmp	r1, #1
    5c74:	d007      	beq.n	5c86 <_sercom_get_default_pad+0x9e>
    5c76:	2900      	cmp	r1, #0
    5c78:	d031      	beq.n	5cde <_sercom_get_default_pad+0xf6>
    5c7a:	2902      	cmp	r1, #2
    5c7c:	d005      	beq.n	5c8a <_sercom_get_default_pad+0xa2>
    5c7e:	2903      	cmp	r1, #3
    5c80:	d005      	beq.n	5c8e <_sercom_get_default_pad+0xa6>
	return 0;
    5c82:	2000      	movs	r0, #0
    5c84:	e7be      	b.n	5c04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5c86:	4828      	ldr	r0, [pc, #160]	; (5d28 <_sercom_get_default_pad+0x140>)
    5c88:	e7bc      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c8a:	4828      	ldr	r0, [pc, #160]	; (5d2c <_sercom_get_default_pad+0x144>)
    5c8c:	e7ba      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c8e:	4828      	ldr	r0, [pc, #160]	; (5d30 <_sercom_get_default_pad+0x148>)
    5c90:	e7b8      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5c92:	2901      	cmp	r1, #1
    5c94:	d007      	beq.n	5ca6 <_sercom_get_default_pad+0xbe>
    5c96:	2900      	cmp	r1, #0
    5c98:	d023      	beq.n	5ce2 <_sercom_get_default_pad+0xfa>
    5c9a:	2902      	cmp	r1, #2
    5c9c:	d005      	beq.n	5caa <_sercom_get_default_pad+0xc2>
    5c9e:	2903      	cmp	r1, #3
    5ca0:	d005      	beq.n	5cae <_sercom_get_default_pad+0xc6>
	return 0;
    5ca2:	2000      	movs	r0, #0
    5ca4:	e7ae      	b.n	5c04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5ca6:	4823      	ldr	r0, [pc, #140]	; (5d34 <_sercom_get_default_pad+0x14c>)
    5ca8:	e7ac      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5caa:	4823      	ldr	r0, [pc, #140]	; (5d38 <_sercom_get_default_pad+0x150>)
    5cac:	e7aa      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cae:	4823      	ldr	r0, [pc, #140]	; (5d3c <_sercom_get_default_pad+0x154>)
    5cb0:	e7a8      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cb2:	2901      	cmp	r1, #1
    5cb4:	d007      	beq.n	5cc6 <_sercom_get_default_pad+0xde>
    5cb6:	2900      	cmp	r1, #0
    5cb8:	d015      	beq.n	5ce6 <_sercom_get_default_pad+0xfe>
    5cba:	2902      	cmp	r1, #2
    5cbc:	d005      	beq.n	5cca <_sercom_get_default_pad+0xe2>
    5cbe:	2903      	cmp	r1, #3
    5cc0:	d005      	beq.n	5cce <_sercom_get_default_pad+0xe6>
	return 0;
    5cc2:	2000      	movs	r0, #0
    5cc4:	e79e      	b.n	5c04 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5cc6:	481e      	ldr	r0, [pc, #120]	; (5d40 <_sercom_get_default_pad+0x158>)
    5cc8:	e79c      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cca:	481e      	ldr	r0, [pc, #120]	; (5d44 <_sercom_get_default_pad+0x15c>)
    5ccc:	e79a      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cce:	481e      	ldr	r0, [pc, #120]	; (5d48 <_sercom_get_default_pad+0x160>)
    5cd0:	e798      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cd2:	481e      	ldr	r0, [pc, #120]	; (5d4c <_sercom_get_default_pad+0x164>)
    5cd4:	e796      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cd6:	2003      	movs	r0, #3
    5cd8:	e794      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cda:	481d      	ldr	r0, [pc, #116]	; (5d50 <_sercom_get_default_pad+0x168>)
    5cdc:	e792      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cde:	481d      	ldr	r0, [pc, #116]	; (5d54 <_sercom_get_default_pad+0x16c>)
    5ce0:	e790      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5ce2:	481d      	ldr	r0, [pc, #116]	; (5d58 <_sercom_get_default_pad+0x170>)
    5ce4:	e78e      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5ce6:	481d      	ldr	r0, [pc, #116]	; (5d5c <_sercom_get_default_pad+0x174>)
    5ce8:	e78c      	b.n	5c04 <_sercom_get_default_pad+0x1c>
    5cea:	46c0      	nop			; (mov r8, r8)
    5cec:	42001000 	.word	0x42001000
    5cf0:	42001800 	.word	0x42001800
    5cf4:	42001c00 	.word	0x42001c00
    5cf8:	42001400 	.word	0x42001400
    5cfc:	42000800 	.word	0x42000800
    5d00:	42000c00 	.word	0x42000c00
    5d04:	00050003 	.word	0x00050003
    5d08:	00060003 	.word	0x00060003
    5d0c:	00070003 	.word	0x00070003
    5d10:	00010003 	.word	0x00010003
    5d14:	001e0003 	.word	0x001e0003
    5d18:	001f0003 	.word	0x001f0003
    5d1c:	00090003 	.word	0x00090003
    5d20:	000a0003 	.word	0x000a0003
    5d24:	000b0003 	.word	0x000b0003
    5d28:	00110003 	.word	0x00110003
    5d2c:	00120003 	.word	0x00120003
    5d30:	00130003 	.word	0x00130003
    5d34:	000d0003 	.word	0x000d0003
    5d38:	000e0003 	.word	0x000e0003
    5d3c:	000f0003 	.word	0x000f0003
    5d40:	00170003 	.word	0x00170003
    5d44:	00180003 	.word	0x00180003
    5d48:	00190003 	.word	0x00190003
    5d4c:	00040003 	.word	0x00040003
    5d50:	00080003 	.word	0x00080003
    5d54:	00100003 	.word	0x00100003
    5d58:	000c0003 	.word	0x000c0003
    5d5c:	00160003 	.word	0x00160003

00005d60 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5d60:	b530      	push	{r4, r5, lr}
    5d62:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5d64:	4b0b      	ldr	r3, [pc, #44]	; (5d94 <_sercom_get_sercom_inst_index+0x34>)
    5d66:	466a      	mov	r2, sp
    5d68:	cb32      	ldmia	r3!, {r1, r4, r5}
    5d6a:	c232      	stmia	r2!, {r1, r4, r5}
    5d6c:	cb32      	ldmia	r3!, {r1, r4, r5}
    5d6e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5d70:	9b00      	ldr	r3, [sp, #0]
    5d72:	4283      	cmp	r3, r0
    5d74:	d00b      	beq.n	5d8e <_sercom_get_sercom_inst_index+0x2e>
    5d76:	2301      	movs	r3, #1
    5d78:	009a      	lsls	r2, r3, #2
    5d7a:	4669      	mov	r1, sp
    5d7c:	5852      	ldr	r2, [r2, r1]
    5d7e:	4282      	cmp	r2, r0
    5d80:	d006      	beq.n	5d90 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5d82:	3301      	adds	r3, #1
    5d84:	2b06      	cmp	r3, #6
    5d86:	d1f7      	bne.n	5d78 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5d88:	2000      	movs	r0, #0
}
    5d8a:	b007      	add	sp, #28
    5d8c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5d8e:	2300      	movs	r3, #0
			return i;
<<<<<<< Updated upstream
    5d70:	b2d8      	uxtb	r0, r3
    5d72:	e7fa      	b.n	5d6a <_sercom_get_sercom_inst_index+0x2a>
<<<<<<< HEAD
    5d74:	0000a7b4 	.word	0x0000a7b4
=======
    5d90:	b2d8      	uxtb	r0, r3
    5d92:	e7fa      	b.n	5d8a <_sercom_get_sercom_inst_index+0x2a>
    5d94:	0000a7e4 	.word	0x0000a7e4
>>>>>>> Stashed changes
=======
    5d74:	0000a7b8 	.word	0x0000a7b8
>>>>>>> parent of 79ffb95 (comment)

00005d98 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5d98:	4770      	bx	lr
	...

00005d9c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5d9e:	4b0a      	ldr	r3, [pc, #40]	; (5dc8 <_sercom_set_handler+0x2c>)
    5da0:	781b      	ldrb	r3, [r3, #0]
    5da2:	2b00      	cmp	r3, #0
    5da4:	d10c      	bne.n	5dc0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5da6:	4f09      	ldr	r7, [pc, #36]	; (5dcc <_sercom_set_handler+0x30>)
    5da8:	4e09      	ldr	r6, [pc, #36]	; (5dd0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5daa:	4d0a      	ldr	r5, [pc, #40]	; (5dd4 <_sercom_set_handler+0x38>)
    5dac:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5dae:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5db0:	195a      	adds	r2, r3, r5
    5db2:	6014      	str	r4, [r2, #0]
    5db4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5db6:	2b18      	cmp	r3, #24
    5db8:	d1f9      	bne.n	5dae <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5dba:	2201      	movs	r2, #1
    5dbc:	4b02      	ldr	r3, [pc, #8]	; (5dc8 <_sercom_set_handler+0x2c>)
    5dbe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5dc0:	0080      	lsls	r0, r0, #2
    5dc2:	4b02      	ldr	r3, [pc, #8]	; (5dcc <_sercom_set_handler+0x30>)
    5dc4:	50c1      	str	r1, [r0, r3]
}
    5dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5dc8:	2000381e 	.word	0x2000381e
    5dcc:	20003820 	.word	0x20003820
    5dd0:	00005d99 	.word	0x00005d99
    5dd4:	20004e1c 	.word	0x20004e1c

00005dd8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5dd8:	b500      	push	{lr}
    5dda:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5ddc:	2309      	movs	r3, #9
    5dde:	466a      	mov	r2, sp
    5de0:	7013      	strb	r3, [r2, #0]
    5de2:	3301      	adds	r3, #1
    5de4:	7053      	strb	r3, [r2, #1]
    5de6:	3301      	adds	r3, #1
    5de8:	7093      	strb	r3, [r2, #2]
    5dea:	3301      	adds	r3, #1
    5dec:	70d3      	strb	r3, [r2, #3]
    5dee:	3301      	adds	r3, #1
    5df0:	7113      	strb	r3, [r2, #4]
    5df2:	3301      	adds	r3, #1
    5df4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5df6:	4b03      	ldr	r3, [pc, #12]	; (5e04 <_sercom_get_interrupt_vector+0x2c>)
    5df8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5dfa:	466b      	mov	r3, sp
    5dfc:	5618      	ldrsb	r0, [r3, r0]
}
    5dfe:	b003      	add	sp, #12
    5e00:	bd00      	pop	{pc}
    5e02:	46c0      	nop			; (mov r8, r8)
    5e04:	00005d61 	.word	0x00005d61

00005e08 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5e08:	b510      	push	{r4, lr}
    5e0a:	4b02      	ldr	r3, [pc, #8]	; (5e14 <SERCOM0_Handler+0xc>)
    5e0c:	681b      	ldr	r3, [r3, #0]
    5e0e:	2000      	movs	r0, #0
    5e10:	4798      	blx	r3
    5e12:	bd10      	pop	{r4, pc}
    5e14:	20003820 	.word	0x20003820

00005e18 <SERCOM1_Handler>:
    5e18:	b510      	push	{r4, lr}
    5e1a:	4b02      	ldr	r3, [pc, #8]	; (5e24 <SERCOM1_Handler+0xc>)
    5e1c:	685b      	ldr	r3, [r3, #4]
    5e1e:	2001      	movs	r0, #1
    5e20:	4798      	blx	r3
    5e22:	bd10      	pop	{r4, pc}
    5e24:	20003820 	.word	0x20003820

00005e28 <SERCOM2_Handler>:
    5e28:	b510      	push	{r4, lr}
    5e2a:	4b02      	ldr	r3, [pc, #8]	; (5e34 <SERCOM2_Handler+0xc>)
    5e2c:	689b      	ldr	r3, [r3, #8]
    5e2e:	2002      	movs	r0, #2
    5e30:	4798      	blx	r3
    5e32:	bd10      	pop	{r4, pc}
    5e34:	20003820 	.word	0x20003820

00005e38 <SERCOM3_Handler>:
    5e38:	b510      	push	{r4, lr}
    5e3a:	4b02      	ldr	r3, [pc, #8]	; (5e44 <SERCOM3_Handler+0xc>)
    5e3c:	68db      	ldr	r3, [r3, #12]
    5e3e:	2003      	movs	r0, #3
    5e40:	4798      	blx	r3
    5e42:	bd10      	pop	{r4, pc}
    5e44:	20003820 	.word	0x20003820

00005e48 <SERCOM4_Handler>:
    5e48:	b510      	push	{r4, lr}
    5e4a:	4b02      	ldr	r3, [pc, #8]	; (5e54 <SERCOM4_Handler+0xc>)
    5e4c:	691b      	ldr	r3, [r3, #16]
    5e4e:	2004      	movs	r0, #4
    5e50:	4798      	blx	r3
    5e52:	bd10      	pop	{r4, pc}
    5e54:	20003820 	.word	0x20003820

00005e58 <SERCOM5_Handler>:
    5e58:	b510      	push	{r4, lr}
    5e5a:	4b02      	ldr	r3, [pc, #8]	; (5e64 <SERCOM5_Handler+0xc>)
    5e5c:	695b      	ldr	r3, [r3, #20]
    5e5e:	2005      	movs	r0, #5
    5e60:	4798      	blx	r3
    5e62:	bd10      	pop	{r4, pc}
    5e64:	20003820 	.word	0x20003820

00005e68 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e6a:	46de      	mov	lr, fp
    5e6c:	4657      	mov	r7, sl
    5e6e:	464e      	mov	r6, r9
    5e70:	4645      	mov	r5, r8
    5e72:	b5e0      	push	{r5, r6, r7, lr}
    5e74:	b091      	sub	sp, #68	; 0x44
    5e76:	0005      	movs	r5, r0
    5e78:	000c      	movs	r4, r1
    5e7a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5e7c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5e7e:	0008      	movs	r0, r1
    5e80:	4bbc      	ldr	r3, [pc, #752]	; (6174 <usart_init+0x30c>)
    5e82:	4798      	blx	r3
    5e84:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5e86:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5e88:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5e8a:	07db      	lsls	r3, r3, #31
    5e8c:	d506      	bpl.n	5e9c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5e8e:	b011      	add	sp, #68	; 0x44
    5e90:	bc3c      	pop	{r2, r3, r4, r5}
    5e92:	4690      	mov	r8, r2
    5e94:	4699      	mov	r9, r3
    5e96:	46a2      	mov	sl, r4
    5e98:	46ab      	mov	fp, r5
    5e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5e9c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    5e9e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5ea0:	079b      	lsls	r3, r3, #30
    5ea2:	d4f4      	bmi.n	5e8e <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    5ea4:	49b4      	ldr	r1, [pc, #720]	; (6178 <usart_init+0x310>)
    5ea6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5ea8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5eaa:	2301      	movs	r3, #1
    5eac:	40bb      	lsls	r3, r7
    5eae:	4303      	orrs	r3, r0
    5eb0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    5eb2:	a90f      	add	r1, sp, #60	; 0x3c
    5eb4:	272d      	movs	r7, #45	; 0x2d
    5eb6:	5df3      	ldrb	r3, [r6, r7]
    5eb8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5eba:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5ebc:	b2d3      	uxtb	r3, r2
    5ebe:	9302      	str	r3, [sp, #8]
    5ec0:	0018      	movs	r0, r3
    5ec2:	4bae      	ldr	r3, [pc, #696]	; (617c <usart_init+0x314>)
    5ec4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5ec6:	9802      	ldr	r0, [sp, #8]
    5ec8:	4bad      	ldr	r3, [pc, #692]	; (6180 <usart_init+0x318>)
    5eca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5ecc:	5df0      	ldrb	r0, [r6, r7]
    5ece:	2100      	movs	r1, #0
    5ed0:	4bac      	ldr	r3, [pc, #688]	; (6184 <usart_init+0x31c>)
    5ed2:	4798      	blx	r3
	module->character_size = config->character_size;
    5ed4:	7af3      	ldrb	r3, [r6, #11]
    5ed6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5ed8:	2324      	movs	r3, #36	; 0x24
    5eda:	5cf3      	ldrb	r3, [r6, r3]
    5edc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5ede:	2325      	movs	r3, #37	; 0x25
    5ee0:	5cf3      	ldrb	r3, [r6, r3]
    5ee2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5ee4:	7ef3      	ldrb	r3, [r6, #27]
    5ee6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5ee8:	7f33      	ldrb	r3, [r6, #28]
    5eea:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5eec:	682b      	ldr	r3, [r5, #0]
    5eee:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5ef0:	0018      	movs	r0, r3
    5ef2:	4ba0      	ldr	r3, [pc, #640]	; (6174 <usart_init+0x30c>)
    5ef4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5ef6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    5ef8:	2200      	movs	r2, #0
    5efa:	230e      	movs	r3, #14
    5efc:	a906      	add	r1, sp, #24
    5efe:	468c      	mov	ip, r1
    5f00:	4463      	add	r3, ip
    5f02:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5f04:	8a32      	ldrh	r2, [r6, #16]
    5f06:	9202      	str	r2, [sp, #8]
    5f08:	2380      	movs	r3, #128	; 0x80
    5f0a:	01db      	lsls	r3, r3, #7
    5f0c:	429a      	cmp	r2, r3
    5f0e:	d100      	bne.n	5f12 <usart_init+0xaa>
    5f10:	e09e      	b.n	6050 <usart_init+0x1e8>
    5f12:	d90f      	bls.n	5f34 <usart_init+0xcc>
    5f14:	23c0      	movs	r3, #192	; 0xc0
    5f16:	01db      	lsls	r3, r3, #7
    5f18:	9a02      	ldr	r2, [sp, #8]
    5f1a:	429a      	cmp	r2, r3
    5f1c:	d100      	bne.n	5f20 <usart_init+0xb8>
    5f1e:	e092      	b.n	6046 <usart_init+0x1de>
    5f20:	2380      	movs	r3, #128	; 0x80
    5f22:	021b      	lsls	r3, r3, #8
    5f24:	429a      	cmp	r2, r3
    5f26:	d000      	beq.n	5f2a <usart_init+0xc2>
    5f28:	e11f      	b.n	616a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5f2a:	2303      	movs	r3, #3
    5f2c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5f2e:	2300      	movs	r3, #0
    5f30:	9307      	str	r3, [sp, #28]
    5f32:	e008      	b.n	5f46 <usart_init+0xde>
	switch (config->sample_rate) {
    5f34:	2380      	movs	r3, #128	; 0x80
    5f36:	019b      	lsls	r3, r3, #6
    5f38:	429a      	cmp	r2, r3
    5f3a:	d000      	beq.n	5f3e <usart_init+0xd6>
    5f3c:	e115      	b.n	616a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5f3e:	2310      	movs	r3, #16
    5f40:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5f42:	3b0f      	subs	r3, #15
    5f44:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5f46:	6833      	ldr	r3, [r6, #0]
    5f48:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5f4a:	68f3      	ldr	r3, [r6, #12]
    5f4c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5f4e:	6973      	ldr	r3, [r6, #20]
    5f50:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5f52:	7e33      	ldrb	r3, [r6, #24]
    5f54:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5f56:	2326      	movs	r3, #38	; 0x26
    5f58:	5cf3      	ldrb	r3, [r6, r3]
    5f5a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5f5c:	6873      	ldr	r3, [r6, #4]
    5f5e:	4699      	mov	r9, r3
	switch (transfer_mode)
    5f60:	2b00      	cmp	r3, #0
    5f62:	d100      	bne.n	5f66 <usart_init+0xfe>
    5f64:	e0a0      	b.n	60a8 <usart_init+0x240>
    5f66:	2380      	movs	r3, #128	; 0x80
    5f68:	055b      	lsls	r3, r3, #21
    5f6a:	4599      	cmp	r9, r3
    5f6c:	d100      	bne.n	5f70 <usart_init+0x108>
    5f6e:	e084      	b.n	607a <usart_init+0x212>
	if(config->encoding_format_enable) {
    5f70:	7e73      	ldrb	r3, [r6, #25]
    5f72:	2b00      	cmp	r3, #0
    5f74:	d002      	beq.n	5f7c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5f76:	7eb3      	ldrb	r3, [r6, #26]
    5f78:	4642      	mov	r2, r8
    5f7a:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f7c:	682a      	ldr	r2, [r5, #0]
    5f7e:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    5f80:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5f82:	2b00      	cmp	r3, #0
    5f84:	d1fc      	bne.n	5f80 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    5f86:	330e      	adds	r3, #14
    5f88:	aa06      	add	r2, sp, #24
    5f8a:	4694      	mov	ip, r2
    5f8c:	4463      	add	r3, ip
    5f8e:	881b      	ldrh	r3, [r3, #0]
    5f90:	4642      	mov	r2, r8
    5f92:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5f94:	9b05      	ldr	r3, [sp, #20]
    5f96:	9a03      	ldr	r2, [sp, #12]
    5f98:	4313      	orrs	r3, r2
    5f9a:	9a04      	ldr	r2, [sp, #16]
    5f9c:	4313      	orrs	r3, r2
    5f9e:	464a      	mov	r2, r9
    5fa0:	4313      	orrs	r3, r2
    5fa2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5fa4:	465b      	mov	r3, fp
    5fa6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5fa8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5faa:	4653      	mov	r3, sl
    5fac:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5fae:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5fb0:	2327      	movs	r3, #39	; 0x27
    5fb2:	5cf3      	ldrb	r3, [r6, r3]
    5fb4:	2b00      	cmp	r3, #0
    5fb6:	d101      	bne.n	5fbc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5fb8:	3304      	adds	r3, #4
    5fba:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5fbc:	7e73      	ldrb	r3, [r6, #25]
    5fbe:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5fc0:	7f32      	ldrb	r2, [r6, #28]
    5fc2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5fc4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5fc6:	7f72      	ldrb	r2, [r6, #29]
    5fc8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5fca:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5fcc:	2224      	movs	r2, #36	; 0x24
    5fce:	5cb2      	ldrb	r2, [r6, r2]
    5fd0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5fd2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5fd4:	2225      	movs	r2, #37	; 0x25
    5fd6:	5cb2      	ldrb	r2, [r6, r2]
    5fd8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5fda:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5fdc:	7ab1      	ldrb	r1, [r6, #10]
    5fde:	7af2      	ldrb	r2, [r6, #11]
    5fe0:	4311      	orrs	r1, r2
    5fe2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5fe4:	8933      	ldrh	r3, [r6, #8]
    5fe6:	2bff      	cmp	r3, #255	; 0xff
    5fe8:	d100      	bne.n	5fec <usart_init+0x184>
    5fea:	e081      	b.n	60f0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5fec:	2280      	movs	r2, #128	; 0x80
    5fee:	0452      	lsls	r2, r2, #17
    5ff0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5ff2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5ff4:	232c      	movs	r3, #44	; 0x2c
    5ff6:	5cf3      	ldrb	r3, [r6, r3]
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	d103      	bne.n	6004 <usart_init+0x19c>
    5ffc:	4b62      	ldr	r3, [pc, #392]	; (6188 <usart_init+0x320>)
    5ffe:	789b      	ldrb	r3, [r3, #2]
    6000:	079b      	lsls	r3, r3, #30
    6002:	d501      	bpl.n	6008 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    6004:	2380      	movs	r3, #128	; 0x80
    6006:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    6008:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    600a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    600c:	2b00      	cmp	r3, #0
    600e:	d1fc      	bne.n	600a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    6010:	4643      	mov	r3, r8
    6012:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6014:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6016:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6018:	2b00      	cmp	r3, #0
    601a:	d1fc      	bne.n	6016 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    601c:	4643      	mov	r3, r8
    601e:	601f      	str	r7, [r3, #0]
    6020:	ab0e      	add	r3, sp, #56	; 0x38
    6022:	2280      	movs	r2, #128	; 0x80
    6024:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6026:	2200      	movs	r2, #0
    6028:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    602a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    602c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    602e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    6030:	930a      	str	r3, [sp, #40]	; 0x28
    6032:	6b73      	ldr	r3, [r6, #52]	; 0x34
    6034:	930b      	str	r3, [sp, #44]	; 0x2c
    6036:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    6038:	930c      	str	r3, [sp, #48]	; 0x30
    603a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    603c:	9302      	str	r3, [sp, #8]
    603e:	930d      	str	r3, [sp, #52]	; 0x34
    6040:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6042:	ae0a      	add	r6, sp, #40	; 0x28
    6044:	e063      	b.n	610e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6046:	2308      	movs	r3, #8
    6048:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    604a:	3b07      	subs	r3, #7
    604c:	9307      	str	r3, [sp, #28]
    604e:	e77a      	b.n	5f46 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    6050:	6833      	ldr	r3, [r6, #0]
    6052:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6054:	68f3      	ldr	r3, [r6, #12]
    6056:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    6058:	6973      	ldr	r3, [r6, #20]
    605a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    605c:	7e33      	ldrb	r3, [r6, #24]
    605e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6060:	2326      	movs	r3, #38	; 0x26
    6062:	5cf3      	ldrb	r3, [r6, r3]
    6064:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    6066:	6873      	ldr	r3, [r6, #4]
    6068:	4699      	mov	r9, r3
	switch (transfer_mode)
    606a:	2b00      	cmp	r3, #0
    606c:	d018      	beq.n	60a0 <usart_init+0x238>
    606e:	2380      	movs	r3, #128	; 0x80
    6070:	055b      	lsls	r3, r3, #21
    6072:	4599      	cmp	r9, r3
    6074:	d001      	beq.n	607a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    6076:	2000      	movs	r0, #0
    6078:	e025      	b.n	60c6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    607a:	2327      	movs	r3, #39	; 0x27
    607c:	5cf3      	ldrb	r3, [r6, r3]
    607e:	2b00      	cmp	r3, #0
    6080:	d000      	beq.n	6084 <usart_init+0x21c>
    6082:	e775      	b.n	5f70 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    6084:	6a33      	ldr	r3, [r6, #32]
    6086:	001f      	movs	r7, r3
    6088:	b2c0      	uxtb	r0, r0
    608a:	4b40      	ldr	r3, [pc, #256]	; (618c <usart_init+0x324>)
    608c:	4798      	blx	r3
    608e:	0001      	movs	r1, r0
    6090:	220e      	movs	r2, #14
    6092:	ab06      	add	r3, sp, #24
    6094:	469c      	mov	ip, r3
    6096:	4462      	add	r2, ip
    6098:	0038      	movs	r0, r7
    609a:	4b3d      	ldr	r3, [pc, #244]	; (6190 <usart_init+0x328>)
    609c:	4798      	blx	r3
    609e:	e012      	b.n	60c6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    60a0:	2308      	movs	r3, #8
    60a2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    60a4:	2300      	movs	r3, #0
    60a6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    60a8:	2327      	movs	r3, #39	; 0x27
    60aa:	5cf3      	ldrb	r3, [r6, r3]
    60ac:	2b00      	cmp	r3, #0
    60ae:	d00e      	beq.n	60ce <usart_init+0x266>
				status_code =
    60b0:	9b06      	ldr	r3, [sp, #24]
    60b2:	9300      	str	r3, [sp, #0]
    60b4:	9b07      	ldr	r3, [sp, #28]
    60b6:	220e      	movs	r2, #14
    60b8:	a906      	add	r1, sp, #24
    60ba:	468c      	mov	ip, r1
    60bc:	4462      	add	r2, ip
    60be:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    60c0:	6a30      	ldr	r0, [r6, #32]
    60c2:	4f34      	ldr	r7, [pc, #208]	; (6194 <usart_init+0x32c>)
    60c4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    60c6:	2800      	cmp	r0, #0
    60c8:	d000      	beq.n	60cc <usart_init+0x264>
    60ca:	e6e0      	b.n	5e8e <usart_init+0x26>
    60cc:	e750      	b.n	5f70 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    60ce:	6a33      	ldr	r3, [r6, #32]
    60d0:	001f      	movs	r7, r3
    60d2:	b2c0      	uxtb	r0, r0
    60d4:	4b2d      	ldr	r3, [pc, #180]	; (618c <usart_init+0x324>)
    60d6:	4798      	blx	r3
    60d8:	0001      	movs	r1, r0
				status_code =
    60da:	9b06      	ldr	r3, [sp, #24]
    60dc:	9300      	str	r3, [sp, #0]
    60de:	9b07      	ldr	r3, [sp, #28]
    60e0:	220e      	movs	r2, #14
    60e2:	a806      	add	r0, sp, #24
    60e4:	4684      	mov	ip, r0
    60e6:	4462      	add	r2, ip
    60e8:	0038      	movs	r0, r7
    60ea:	4f2a      	ldr	r7, [pc, #168]	; (6194 <usart_init+0x32c>)
    60ec:	47b8      	blx	r7
    60ee:	e7ea      	b.n	60c6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    60f0:	7ef3      	ldrb	r3, [r6, #27]
    60f2:	2b00      	cmp	r3, #0
    60f4:	d100      	bne.n	60f8 <usart_init+0x290>
    60f6:	e77d      	b.n	5ff4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    60f8:	2380      	movs	r3, #128	; 0x80
    60fa:	04db      	lsls	r3, r3, #19
    60fc:	431f      	orrs	r7, r3
    60fe:	e779      	b.n	5ff4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6100:	0020      	movs	r0, r4
    6102:	4b25      	ldr	r3, [pc, #148]	; (6198 <usart_init+0x330>)
    6104:	4798      	blx	r3
    6106:	e007      	b.n	6118 <usart_init+0x2b0>
    6108:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    610a:	2f04      	cmp	r7, #4
    610c:	d00d      	beq.n	612a <usart_init+0x2c2>
    610e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6110:	00bb      	lsls	r3, r7, #2
    6112:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    6114:	2800      	cmp	r0, #0
    6116:	d0f3      	beq.n	6100 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    6118:	1c43      	adds	r3, r0, #1
    611a:	d0f5      	beq.n	6108 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    611c:	a90e      	add	r1, sp, #56	; 0x38
    611e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6120:	0c00      	lsrs	r0, r0, #16
    6122:	b2c0      	uxtb	r0, r0
    6124:	4b1d      	ldr	r3, [pc, #116]	; (619c <usart_init+0x334>)
    6126:	4798      	blx	r3
    6128:	e7ee      	b.n	6108 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    612a:	2300      	movs	r3, #0
    612c:	60eb      	str	r3, [r5, #12]
    612e:	612b      	str	r3, [r5, #16]
    6130:	616b      	str	r3, [r5, #20]
    6132:	61ab      	str	r3, [r5, #24]
    6134:	61eb      	str	r3, [r5, #28]
    6136:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6138:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    613a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    613c:	2200      	movs	r2, #0
    613e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6140:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6142:	3330      	adds	r3, #48	; 0x30
    6144:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    6146:	3301      	adds	r3, #1
    6148:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    614a:	3301      	adds	r3, #1
    614c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    614e:	3301      	adds	r3, #1
    6150:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6152:	6828      	ldr	r0, [r5, #0]
    6154:	4b07      	ldr	r3, [pc, #28]	; (6174 <usart_init+0x30c>)
    6156:	4798      	blx	r3
    6158:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    615a:	4911      	ldr	r1, [pc, #68]	; (61a0 <usart_init+0x338>)
    615c:	4b11      	ldr	r3, [pc, #68]	; (61a4 <usart_init+0x33c>)
    615e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6160:	00a4      	lsls	r4, r4, #2
    6162:	4b11      	ldr	r3, [pc, #68]	; (61a8 <usart_init+0x340>)
    6164:	50e5      	str	r5, [r4, r3]
	return status_code;
    6166:	2000      	movs	r0, #0
    6168:	e691      	b.n	5e8e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    616a:	2310      	movs	r3, #16
    616c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    616e:	2300      	movs	r3, #0
    6170:	9307      	str	r3, [sp, #28]
    6172:	e6e8      	b.n	5f46 <usart_init+0xde>
    6174:	00005d61 	.word	0x00005d61
    6178:	40000400 	.word	0x40000400
    617c:	00006a0d 	.word	0x00006a0d
    6180:	00006981 	.word	0x00006981
    6184:	00005b9d 	.word	0x00005b9d
    6188:	41002000 	.word	0x41002000
    618c:	00006a29 	.word	0x00006a29
    6190:	00005adf 	.word	0x00005adf
    6194:	00005b09 	.word	0x00005b09
    6198:	00005be9 	.word	0x00005be9
    619c:	00006b35 	.word	0x00006b35
    61a0:	000062ad 	.word	0x000062ad
    61a4:	00005d9d 	.word	0x00005d9d
    61a8:	20004e1c 	.word	0x20004e1c

000061ac <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    61ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61ae:	0006      	movs	r6, r0
    61b0:	000c      	movs	r4, r1
    61b2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    61b4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    61b6:	4b0a      	ldr	r3, [pc, #40]	; (61e0 <_usart_write_buffer+0x34>)
    61b8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    61ba:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    61bc:	b29b      	uxth	r3, r3
    61be:	2b00      	cmp	r3, #0
    61c0:	d003      	beq.n	61ca <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    61c2:	4b08      	ldr	r3, [pc, #32]	; (61e4 <_usart_write_buffer+0x38>)
    61c4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    61c6:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    61c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    61ca:	85f5      	strh	r5, [r6, #46]	; 0x2e
    61cc:	4b05      	ldr	r3, [pc, #20]	; (61e4 <_usart_write_buffer+0x38>)
    61ce:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    61d0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    61d2:	2205      	movs	r2, #5
    61d4:	2333      	movs	r3, #51	; 0x33
    61d6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    61d8:	3b32      	subs	r3, #50	; 0x32
    61da:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    61dc:	2000      	movs	r0, #0
    61de:	e7f3      	b.n	61c8 <_usart_write_buffer+0x1c>
    61e0:	0000583d 	.word	0x0000583d
    61e4:	0000587d 	.word	0x0000587d

000061e8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    61e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61ea:	0004      	movs	r4, r0
    61ec:	000d      	movs	r5, r1
    61ee:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    61f0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    61f2:	4b0f      	ldr	r3, [pc, #60]	; (6230 <_usart_read_buffer+0x48>)
    61f4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    61f6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    61f8:	b29b      	uxth	r3, r3
    61fa:	2b00      	cmp	r3, #0
    61fc:	d003      	beq.n	6206 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    61fe:	4b0d      	ldr	r3, [pc, #52]	; (6234 <_usart_read_buffer+0x4c>)
    6200:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    6202:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    6204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    6206:	85a6      	strh	r6, [r4, #44]	; 0x2c
    6208:	4b0a      	ldr	r3, [pc, #40]	; (6234 <_usart_read_buffer+0x4c>)
    620a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    620c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    620e:	2205      	movs	r2, #5
    6210:	2332      	movs	r3, #50	; 0x32
    6212:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    6214:	3b2e      	subs	r3, #46	; 0x2e
    6216:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    6218:	7a23      	ldrb	r3, [r4, #8]
    621a:	2b00      	cmp	r3, #0
    621c:	d001      	beq.n	6222 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    621e:	2320      	movs	r3, #32
    6220:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    6222:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    6224:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    6226:	2b00      	cmp	r3, #0
    6228:	d0ec      	beq.n	6204 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    622a:	2308      	movs	r3, #8
    622c:	75bb      	strb	r3, [r7, #22]
    622e:	e7e9      	b.n	6204 <_usart_read_buffer+0x1c>
    6230:	0000583d 	.word	0x0000583d
    6234:	0000587d 	.word	0x0000587d

00006238 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    6238:	1c93      	adds	r3, r2, #2
    623a:	009b      	lsls	r3, r3, #2
    623c:	18c3      	adds	r3, r0, r3
    623e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    6240:	2130      	movs	r1, #48	; 0x30
    6242:	2301      	movs	r3, #1
    6244:	4093      	lsls	r3, r2
    6246:	001a      	movs	r2, r3
    6248:	5c43      	ldrb	r3, [r0, r1]
    624a:	4313      	orrs	r3, r2
    624c:	5443      	strb	r3, [r0, r1]
}
    624e:	4770      	bx	lr

00006250 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    6250:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6252:	2317      	movs	r3, #23
	if (length == 0) {
    6254:	2a00      	cmp	r2, #0
    6256:	d101      	bne.n	625c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    6258:	0018      	movs	r0, r3
    625a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    625c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    625e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    6260:	2c00      	cmp	r4, #0
    6262:	d0f9      	beq.n	6258 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    6264:	4b01      	ldr	r3, [pc, #4]	; (626c <usart_write_buffer_job+0x1c>)
    6266:	4798      	blx	r3
    6268:	0003      	movs	r3, r0
    626a:	e7f5      	b.n	6258 <usart_write_buffer_job+0x8>
    626c:	000061ad 	.word	0x000061ad

00006270 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6270:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    6272:	2317      	movs	r3, #23
	if (length == 0) {
    6274:	2a00      	cmp	r2, #0
    6276:	d101      	bne.n	627c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    6278:	0018      	movs	r0, r3
    627a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    627c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    627e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    6280:	2c00      	cmp	r4, #0
    6282:	d0f9      	beq.n	6278 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    6284:	4b01      	ldr	r3, [pc, #4]	; (628c <usart_read_buffer_job+0x1c>)
    6286:	4798      	blx	r3
    6288:	0003      	movs	r3, r0
    628a:	e7f5      	b.n	6278 <usart_read_buffer_job+0x8>
    628c:	000061e9 	.word	0x000061e9

00006290 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    6290:	2900      	cmp	r1, #0
    6292:	d003      	beq.n	629c <usart_get_job_status+0xc>
    6294:	2901      	cmp	r1, #1
    6296:	d005      	beq.n	62a4 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    6298:	2017      	movs	r0, #23
    629a:	e002      	b.n	62a2 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    629c:	2332      	movs	r3, #50	; 0x32
    629e:	5cc0      	ldrb	r0, [r0, r3]
    62a0:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    62a2:	4770      	bx	lr
			status_code = module->tx_status;
    62a4:	2333      	movs	r3, #51	; 0x33
    62a6:	5cc0      	ldrb	r0, [r0, r3]
    62a8:	b2c0      	uxtb	r0, r0
			break;
    62aa:	e7fa      	b.n	62a2 <usart_get_job_status+0x12>

000062ac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    62ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    62ae:	0080      	lsls	r0, r0, #2
    62b0:	4b62      	ldr	r3, [pc, #392]	; (643c <_usart_interrupt_handler+0x190>)
    62b2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    62b4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    62b6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    62b8:	2b00      	cmp	r3, #0
    62ba:	d1fc      	bne.n	62b6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    62bc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    62be:	7da6      	ldrb	r6, [r4, #22]
    62c0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    62c2:	2330      	movs	r3, #48	; 0x30
    62c4:	5ceb      	ldrb	r3, [r5, r3]
    62c6:	2231      	movs	r2, #49	; 0x31
    62c8:	5caf      	ldrb	r7, [r5, r2]
    62ca:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    62cc:	07f3      	lsls	r3, r6, #31
    62ce:	d522      	bpl.n	6316 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    62d0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62d2:	b29b      	uxth	r3, r3
    62d4:	2b00      	cmp	r3, #0
    62d6:	d01c      	beq.n	6312 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    62da:	7813      	ldrb	r3, [r2, #0]
    62dc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    62de:	1c51      	adds	r1, r2, #1
    62e0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    62e2:	7969      	ldrb	r1, [r5, #5]
    62e4:	2901      	cmp	r1, #1
    62e6:	d00e      	beq.n	6306 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    62e8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    62ea:	05db      	lsls	r3, r3, #23
    62ec:	0ddb      	lsrs	r3, r3, #23
    62ee:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    62f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    62f2:	3b01      	subs	r3, #1
    62f4:	b29b      	uxth	r3, r3
    62f6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    62f8:	2b00      	cmp	r3, #0
    62fa:	d10c      	bne.n	6316 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    62fc:	3301      	adds	r3, #1
    62fe:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6300:	3301      	adds	r3, #1
    6302:	75a3      	strb	r3, [r4, #22]
    6304:	e007      	b.n	6316 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6306:	7851      	ldrb	r1, [r2, #1]
    6308:	0209      	lsls	r1, r1, #8
    630a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    630c:	3202      	adds	r2, #2
    630e:	62aa      	str	r2, [r5, #40]	; 0x28
    6310:	e7eb      	b.n	62ea <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6312:	2301      	movs	r3, #1
    6314:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    6316:	07b3      	lsls	r3, r6, #30
    6318:	d506      	bpl.n	6328 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    631a:	2302      	movs	r3, #2
    631c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    631e:	2200      	movs	r2, #0
    6320:	3331      	adds	r3, #49	; 0x31
    6322:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6324:	07fb      	lsls	r3, r7, #31
    6326:	d41a      	bmi.n	635e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6328:	0773      	lsls	r3, r6, #29
    632a:	d565      	bpl.n	63f8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    632c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    632e:	b29b      	uxth	r3, r3
    6330:	2b00      	cmp	r3, #0
    6332:	d05f      	beq.n	63f4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6334:	8b63      	ldrh	r3, [r4, #26]
    6336:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6338:	071a      	lsls	r2, r3, #28
    633a:	d414      	bmi.n	6366 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    633c:	223f      	movs	r2, #63	; 0x3f
    633e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6340:	2b00      	cmp	r3, #0
    6342:	d034      	beq.n	63ae <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6344:	079a      	lsls	r2, r3, #30
    6346:	d511      	bpl.n	636c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6348:	221a      	movs	r2, #26
    634a:	2332      	movs	r3, #50	; 0x32
    634c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    634e:	3b30      	subs	r3, #48	; 0x30
    6350:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6352:	077b      	lsls	r3, r7, #29
    6354:	d550      	bpl.n	63f8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6356:	0028      	movs	r0, r5
    6358:	696b      	ldr	r3, [r5, #20]
    635a:	4798      	blx	r3
    635c:	e04c      	b.n	63f8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    635e:	0028      	movs	r0, r5
    6360:	68eb      	ldr	r3, [r5, #12]
    6362:	4798      	blx	r3
    6364:	e7e0      	b.n	6328 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6366:	2237      	movs	r2, #55	; 0x37
    6368:	4013      	ands	r3, r2
    636a:	e7e9      	b.n	6340 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    636c:	075a      	lsls	r2, r3, #29
    636e:	d505      	bpl.n	637c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6370:	221e      	movs	r2, #30
    6372:	2332      	movs	r3, #50	; 0x32
    6374:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6376:	3b2e      	subs	r3, #46	; 0x2e
    6378:	8363      	strh	r3, [r4, #26]
    637a:	e7ea      	b.n	6352 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    637c:	07da      	lsls	r2, r3, #31
    637e:	d505      	bpl.n	638c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6380:	2213      	movs	r2, #19
    6382:	2332      	movs	r3, #50	; 0x32
    6384:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6386:	3b31      	subs	r3, #49	; 0x31
    6388:	8363      	strh	r3, [r4, #26]
    638a:	e7e2      	b.n	6352 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    638c:	06da      	lsls	r2, r3, #27
    638e:	d505      	bpl.n	639c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6390:	2242      	movs	r2, #66	; 0x42
    6392:	2332      	movs	r3, #50	; 0x32
    6394:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6396:	3b22      	subs	r3, #34	; 0x22
    6398:	8363      	strh	r3, [r4, #26]
    639a:	e7da      	b.n	6352 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    639c:	2220      	movs	r2, #32
    639e:	421a      	tst	r2, r3
    63a0:	d0d7      	beq.n	6352 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    63a2:	3221      	adds	r2, #33	; 0x21
    63a4:	2332      	movs	r3, #50	; 0x32
    63a6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    63a8:	3b12      	subs	r3, #18
    63aa:	8363      	strh	r3, [r4, #26]
    63ac:	e7d1      	b.n	6352 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    63ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    63b0:	05db      	lsls	r3, r3, #23
    63b2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    63b4:	b2da      	uxtb	r2, r3
    63b6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    63b8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    63ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    63bc:	1c51      	adds	r1, r2, #1
    63be:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    63c0:	7969      	ldrb	r1, [r5, #5]
    63c2:	2901      	cmp	r1, #1
    63c4:	d010      	beq.n	63e8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    63c6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    63c8:	3b01      	subs	r3, #1
    63ca:	b29b      	uxth	r3, r3
    63cc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    63ce:	2b00      	cmp	r3, #0
    63d0:	d112      	bne.n	63f8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63d2:	3304      	adds	r3, #4
    63d4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    63d6:	2200      	movs	r2, #0
    63d8:	332e      	adds	r3, #46	; 0x2e
    63da:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    63dc:	07bb      	lsls	r3, r7, #30
    63de:	d50b      	bpl.n	63f8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    63e0:	0028      	movs	r0, r5
    63e2:	692b      	ldr	r3, [r5, #16]
    63e4:	4798      	blx	r3
    63e6:	e007      	b.n	63f8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    63e8:	0a1b      	lsrs	r3, r3, #8
    63ea:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    63ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    63ee:	3301      	adds	r3, #1
    63f0:	626b      	str	r3, [r5, #36]	; 0x24
    63f2:	e7e8      	b.n	63c6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63f4:	2304      	movs	r3, #4
    63f6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    63f8:	06f3      	lsls	r3, r6, #27
    63fa:	d504      	bpl.n	6406 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    63fc:	2310      	movs	r3, #16
    63fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6400:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6402:	06fb      	lsls	r3, r7, #27
    6404:	d40e      	bmi.n	6424 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6406:	06b3      	lsls	r3, r6, #26
    6408:	d504      	bpl.n	6414 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    640a:	2320      	movs	r3, #32
    640c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    640e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6410:	073b      	lsls	r3, r7, #28
    6412:	d40b      	bmi.n	642c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6414:	0733      	lsls	r3, r6, #28
    6416:	d504      	bpl.n	6422 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6418:	2308      	movs	r3, #8
    641a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    641c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    641e:	06bb      	lsls	r3, r7, #26
    6420:	d408      	bmi.n	6434 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6424:	0028      	movs	r0, r5
    6426:	69eb      	ldr	r3, [r5, #28]
    6428:	4798      	blx	r3
    642a:	e7ec      	b.n	6406 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    642c:	0028      	movs	r0, r5
    642e:	69ab      	ldr	r3, [r5, #24]
    6430:	4798      	blx	r3
    6432:	e7ef      	b.n	6414 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6434:	6a2b      	ldr	r3, [r5, #32]
    6436:	0028      	movs	r0, r5
    6438:	4798      	blx	r3
}
    643a:	e7f2      	b.n	6422 <_usart_interrupt_handler+0x176>
    643c:	20004e1c 	.word	0x20004e1c

00006440 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6440:	b510      	push	{r4, lr}
	switch (clock_source) {
    6442:	2808      	cmp	r0, #8
    6444:	d803      	bhi.n	644e <system_clock_source_get_hz+0xe>
    6446:	0080      	lsls	r0, r0, #2
    6448:	4b1c      	ldr	r3, [pc, #112]	; (64bc <system_clock_source_get_hz+0x7c>)
    644a:	581b      	ldr	r3, [r3, r0]
    644c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    644e:	2000      	movs	r0, #0
    6450:	e032      	b.n	64b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6452:	4b1b      	ldr	r3, [pc, #108]	; (64c0 <system_clock_source_get_hz+0x80>)
    6454:	6918      	ldr	r0, [r3, #16]
    6456:	e02f      	b.n	64b8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6458:	4b1a      	ldr	r3, [pc, #104]	; (64c4 <system_clock_source_get_hz+0x84>)
    645a:	6a1b      	ldr	r3, [r3, #32]
    645c:	059b      	lsls	r3, r3, #22
    645e:	0f9b      	lsrs	r3, r3, #30
    6460:	4819      	ldr	r0, [pc, #100]	; (64c8 <system_clock_source_get_hz+0x88>)
    6462:	40d8      	lsrs	r0, r3
    6464:	e028      	b.n	64b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6466:	4b16      	ldr	r3, [pc, #88]	; (64c0 <system_clock_source_get_hz+0x80>)
    6468:	6958      	ldr	r0, [r3, #20]
    646a:	e025      	b.n	64b8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    646c:	4b14      	ldr	r3, [pc, #80]	; (64c0 <system_clock_source_get_hz+0x80>)
    646e:	681b      	ldr	r3, [r3, #0]
			return 0;
    6470:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    6472:	079b      	lsls	r3, r3, #30
    6474:	d520      	bpl.n	64b8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6476:	4913      	ldr	r1, [pc, #76]	; (64c4 <system_clock_source_get_hz+0x84>)
    6478:	2210      	movs	r2, #16
    647a:	68cb      	ldr	r3, [r1, #12]
    647c:	421a      	tst	r2, r3
    647e:	d0fc      	beq.n	647a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    6480:	4b0f      	ldr	r3, [pc, #60]	; (64c0 <system_clock_source_get_hz+0x80>)
    6482:	681a      	ldr	r2, [r3, #0]
    6484:	2324      	movs	r3, #36	; 0x24
    6486:	4013      	ands	r3, r2
    6488:	2b04      	cmp	r3, #4
    648a:	d001      	beq.n	6490 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    648c:	480f      	ldr	r0, [pc, #60]	; (64cc <system_clock_source_get_hz+0x8c>)
    648e:	e013      	b.n	64b8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6490:	2000      	movs	r0, #0
    6492:	4b0f      	ldr	r3, [pc, #60]	; (64d0 <system_clock_source_get_hz+0x90>)
    6494:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6496:	4b0a      	ldr	r3, [pc, #40]	; (64c0 <system_clock_source_get_hz+0x80>)
    6498:	689b      	ldr	r3, [r3, #8]
    649a:	041b      	lsls	r3, r3, #16
    649c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    649e:	4358      	muls	r0, r3
    64a0:	e00a      	b.n	64b8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    64a2:	2350      	movs	r3, #80	; 0x50
    64a4:	4a07      	ldr	r2, [pc, #28]	; (64c4 <system_clock_source_get_hz+0x84>)
    64a6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    64a8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    64aa:	075b      	lsls	r3, r3, #29
    64ac:	d504      	bpl.n	64b8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    64ae:	4b04      	ldr	r3, [pc, #16]	; (64c0 <system_clock_source_get_hz+0x80>)
    64b0:	68d8      	ldr	r0, [r3, #12]
    64b2:	e001      	b.n	64b8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    64b4:	2080      	movs	r0, #128	; 0x80
    64b6:	0200      	lsls	r0, r0, #8
	}
}
<<<<<<< Updated upstream
    6498:	bd10      	pop	{r4, pc}
    649a:	46c0      	nop			; (mov r8, r8)
    649c:	0000a7d0 	.word	0x0000a7d0
    64a0:	20003838 	.word	0x20003838
    64a4:	40000800 	.word	0x40000800
    64a8:	007a1200 	.word	0x007a1200
    64ac:	02dc6c00 	.word	0x02dc6c00
    64b0:	00006a09 	.word	0x00006a09

000064b4 <system_clock_source_osc8m_set_config>:
=======
    64b8:	bd10      	pop	{r4, pc}
    64ba:	46c0      	nop			; (mov r8, r8)
    64bc:	0000a7fc 	.word	0x0000a7fc
    64c0:	20003838 	.word	0x20003838
    64c4:	40000800 	.word	0x40000800
    64c8:	007a1200 	.word	0x007a1200
    64cc:	02dc6c00 	.word	0x02dc6c00
    64d0:	00006a29 	.word	0x00006a29

000064d4 <system_clock_source_osc8m_set_config>:
>>>>>>> Stashed changes
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    64d4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    64d6:	490c      	ldr	r1, [pc, #48]	; (6508 <system_clock_source_osc8m_set_config+0x34>)
    64d8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    64da:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    64dc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    64de:	7840      	ldrb	r0, [r0, #1]
    64e0:	2201      	movs	r2, #1
    64e2:	4010      	ands	r0, r2
    64e4:	0180      	lsls	r0, r0, #6
    64e6:	2640      	movs	r6, #64	; 0x40
    64e8:	43b3      	bics	r3, r6
    64ea:	4303      	orrs	r3, r0
    64ec:	402a      	ands	r2, r5
    64ee:	01d2      	lsls	r2, r2, #7
    64f0:	2080      	movs	r0, #128	; 0x80
    64f2:	4383      	bics	r3, r0
    64f4:	4313      	orrs	r3, r2
    64f6:	2203      	movs	r2, #3
    64f8:	4022      	ands	r2, r4
    64fa:	0212      	lsls	r2, r2, #8
    64fc:	4803      	ldr	r0, [pc, #12]	; (650c <system_clock_source_osc8m_set_config+0x38>)
    64fe:	4003      	ands	r3, r0
    6500:	4313      	orrs	r3, r2
    6502:	620b      	str	r3, [r1, #32]
}
    6504:	bd70      	pop	{r4, r5, r6, pc}
    6506:	46c0      	nop			; (mov r8, r8)
    6508:	40000800 	.word	0x40000800
    650c:	fffffcff 	.word	0xfffffcff

00006510 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    6510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6512:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    6514:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    6516:	7d03      	ldrb	r3, [r0, #20]
    6518:	2b01      	cmp	r3, #1
    651a:	d03b      	beq.n	6594 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    651c:	68ab      	ldr	r3, [r5, #8]
    651e:	0118      	lsls	r0, r3, #4
    6520:	0021      	movs	r1, r4
    6522:	4b20      	ldr	r3, [pc, #128]	; (65a4 <system_clock_source_dpll_set_config+0x94>)
    6524:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    6526:	220f      	movs	r2, #15
    6528:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    652a:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    652c:	782e      	ldrb	r6, [r5, #0]
    652e:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    6530:	7869      	ldrb	r1, [r5, #1]
    6532:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    6534:	430e      	orrs	r6, r1
    6536:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    6538:	491b      	ldr	r1, [pc, #108]	; (65a8 <system_clock_source_dpll_set_config+0x98>)
    653a:	2744      	movs	r7, #68	; 0x44
    653c:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    653e:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    6540:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    6542:	051b      	lsls	r3, r3, #20
    6544:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    6546:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    6548:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    654a:	78ab      	ldrb	r3, [r5, #2]
    654c:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    654e:	78ee      	ldrb	r6, [r5, #3]
    6550:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6552:	4333      	orrs	r3, r6
    6554:	792e      	ldrb	r6, [r5, #4]
    6556:	00b6      	lsls	r6, r6, #2
    6558:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    655a:	7caf      	ldrb	r7, [r5, #18]
    655c:	2603      	movs	r6, #3
    655e:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6560:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    6562:	8a2e      	ldrh	r6, [r5, #16]
    6564:	0436      	lsls	r6, r6, #16
    6566:	4f11      	ldr	r7, [pc, #68]	; (65ac <system_clock_source_dpll_set_config+0x9c>)
    6568:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    656a:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    656c:	7cee      	ldrb	r6, [r5, #19]
    656e:	0236      	lsls	r6, r6, #8
    6570:	27e0      	movs	r7, #224	; 0xe0
    6572:	00ff      	lsls	r7, r7, #3
    6574:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6576:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    6578:	7d2e      	ldrb	r6, [r5, #20]
    657a:	0136      	lsls	r6, r6, #4
    657c:	2530      	movs	r5, #48	; 0x30
    657e:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6580:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    6582:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    6584:	230f      	movs	r3, #15
    6586:	4398      	bics	r0, r3
    6588:	1880      	adds	r0, r0, r2
    658a:	4344      	muls	r4, r0
    658c:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    658e:	4b08      	ldr	r3, [pc, #32]	; (65b0 <system_clock_source_dpll_set_config+0xa0>)
    6590:	60dc      	str	r4, [r3, #12]
}
    6592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    6594:	8a01      	ldrh	r1, [r0, #16]
    6596:	3101      	adds	r1, #1
    6598:	0049      	lsls	r1, r1, #1
    659a:	0020      	movs	r0, r4
    659c:	4b01      	ldr	r3, [pc, #4]	; (65a4 <system_clock_source_dpll_set_config+0x94>)
    659e:	4798      	blx	r3
    65a0:	0004      	movs	r4, r0
    65a2:	e7bb      	b.n	651c <system_clock_source_dpll_set_config+0xc>
    65a4:	00006f71 	.word	0x00006f71
    65a8:	40000800 	.word	0x40000800
    65ac:	07ff0000 	.word	0x07ff0000
    65b0:	20003838 	.word	0x20003838

000065b4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    65b4:	2808      	cmp	r0, #8
    65b6:	d803      	bhi.n	65c0 <system_clock_source_enable+0xc>
    65b8:	0080      	lsls	r0, r0, #2
    65ba:	4b25      	ldr	r3, [pc, #148]	; (6650 <system_clock_source_enable+0x9c>)
    65bc:	581b      	ldr	r3, [r3, r0]
    65be:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    65c0:	2017      	movs	r0, #23
    65c2:	e044      	b.n	664e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    65c4:	4a23      	ldr	r2, [pc, #140]	; (6654 <system_clock_source_enable+0xa0>)
    65c6:	6a13      	ldr	r3, [r2, #32]
    65c8:	2102      	movs	r1, #2
    65ca:	430b      	orrs	r3, r1
    65cc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    65ce:	2000      	movs	r0, #0
    65d0:	e03d      	b.n	664e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    65d2:	4a20      	ldr	r2, [pc, #128]	; (6654 <system_clock_source_enable+0xa0>)
    65d4:	6993      	ldr	r3, [r2, #24]
    65d6:	2102      	movs	r1, #2
    65d8:	430b      	orrs	r3, r1
    65da:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    65dc:	2000      	movs	r0, #0
		break;
    65de:	e036      	b.n	664e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    65e0:	4a1c      	ldr	r2, [pc, #112]	; (6654 <system_clock_source_enable+0xa0>)
    65e2:	8a13      	ldrh	r3, [r2, #16]
    65e4:	2102      	movs	r1, #2
    65e6:	430b      	orrs	r3, r1
    65e8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    65ea:	2000      	movs	r0, #0
		break;
    65ec:	e02f      	b.n	664e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    65ee:	4a19      	ldr	r2, [pc, #100]	; (6654 <system_clock_source_enable+0xa0>)
    65f0:	8a93      	ldrh	r3, [r2, #20]
    65f2:	2102      	movs	r1, #2
    65f4:	430b      	orrs	r3, r1
    65f6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    65f8:	2000      	movs	r0, #0
		break;
    65fa:	e028      	b.n	664e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    65fc:	4916      	ldr	r1, [pc, #88]	; (6658 <system_clock_source_enable+0xa4>)
    65fe:	680b      	ldr	r3, [r1, #0]
    6600:	2202      	movs	r2, #2
    6602:	4313      	orrs	r3, r2
    6604:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6606:	4b13      	ldr	r3, [pc, #76]	; (6654 <system_clock_source_enable+0xa0>)
    6608:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    660a:	0019      	movs	r1, r3
    660c:	320e      	adds	r2, #14
    660e:	68cb      	ldr	r3, [r1, #12]
    6610:	421a      	tst	r2, r3
    6612:	d0fc      	beq.n	660e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6614:	4a10      	ldr	r2, [pc, #64]	; (6658 <system_clock_source_enable+0xa4>)
    6616:	6891      	ldr	r1, [r2, #8]
    6618:	4b0e      	ldr	r3, [pc, #56]	; (6654 <system_clock_source_enable+0xa0>)
    661a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    661c:	6852      	ldr	r2, [r2, #4]
    661e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    6620:	2200      	movs	r2, #0
    6622:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6624:	0019      	movs	r1, r3
    6626:	3210      	adds	r2, #16
    6628:	68cb      	ldr	r3, [r1, #12]
    662a:	421a      	tst	r2, r3
    662c:	d0fc      	beq.n	6628 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    662e:	4b0a      	ldr	r3, [pc, #40]	; (6658 <system_clock_source_enable+0xa4>)
    6630:	681b      	ldr	r3, [r3, #0]
    6632:	b29b      	uxth	r3, r3
    6634:	4a07      	ldr	r2, [pc, #28]	; (6654 <system_clock_source_enable+0xa0>)
    6636:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    6638:	2000      	movs	r0, #0
    663a:	e008      	b.n	664e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    663c:	4905      	ldr	r1, [pc, #20]	; (6654 <system_clock_source_enable+0xa0>)
    663e:	2244      	movs	r2, #68	; 0x44
    6640:	5c8b      	ldrb	r3, [r1, r2]
    6642:	2002      	movs	r0, #2
    6644:	4303      	orrs	r3, r0
    6646:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6648:	2000      	movs	r0, #0
		break;
    664a:	e000      	b.n	664e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    664c:	2000      	movs	r0, #0
}
<<<<<<< Updated upstream
    662e:	4770      	bx	lr
    6630:	0000a7f4 	.word	0x0000a7f4
    6634:	40000800 	.word	0x40000800
    6638:	20003838 	.word	0x20003838
=======
    664e:	4770      	bx	lr
    6650:	0000a820 	.word	0x0000a820
    6654:	40000800 	.word	0x40000800
    6658:	20003838 	.word	0x20003838
>>>>>>> Stashed changes

0000665c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    665c:	b5f0      	push	{r4, r5, r6, r7, lr}
    665e:	46de      	mov	lr, fp
    6660:	4657      	mov	r7, sl
    6662:	464e      	mov	r6, r9
    6664:	4645      	mov	r5, r8
    6666:	b5e0      	push	{r5, r6, r7, lr}
    6668:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    666a:	22c2      	movs	r2, #194	; 0xc2
    666c:	00d2      	lsls	r2, r2, #3
    666e:	4b4c      	ldr	r3, [pc, #304]	; (67a0 <system_clock_init+0x144>)
    6670:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6672:	4a4c      	ldr	r2, [pc, #304]	; (67a4 <system_clock_init+0x148>)
    6674:	6853      	ldr	r3, [r2, #4]
    6676:	211e      	movs	r1, #30
    6678:	438b      	bics	r3, r1
    667a:	3918      	subs	r1, #24
    667c:	430b      	orrs	r3, r1
    667e:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    6680:	2203      	movs	r2, #3
    6682:	ab01      	add	r3, sp, #4
    6684:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6686:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6688:	4d47      	ldr	r5, [pc, #284]	; (67a8 <system_clock_init+0x14c>)
    668a:	b2e0      	uxtb	r0, r4
    668c:	a901      	add	r1, sp, #4
    668e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6690:	3401      	adds	r4, #1
    6692:	2c25      	cmp	r4, #37	; 0x25
    6694:	d1f9      	bne.n	668a <system_clock_init+0x2e>
	config->run_in_standby  = false;
    6696:	a80b      	add	r0, sp, #44	; 0x2c
    6698:	2500      	movs	r5, #0
    669a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    669c:	2601      	movs	r6, #1
    669e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    66a0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    66a2:	4b42      	ldr	r3, [pc, #264]	; (67ac <system_clock_init+0x150>)
    66a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    66a6:	2006      	movs	r0, #6
    66a8:	4b41      	ldr	r3, [pc, #260]	; (67b0 <system_clock_init+0x154>)
    66aa:	4699      	mov	r9, r3
    66ac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    66ae:	4b41      	ldr	r3, [pc, #260]	; (67b4 <system_clock_init+0x158>)
    66b0:	4798      	blx	r3
	config->high_when_disabled = false;
    66b2:	ac01      	add	r4, sp, #4
    66b4:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    66b6:	2306      	movs	r3, #6
    66b8:	469a      	mov	sl, r3
    66ba:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    66bc:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    66be:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    66c0:	2308      	movs	r3, #8
    66c2:	6063      	str	r3, [r4, #4]
    66c4:	0021      	movs	r1, r4
    66c6:	2001      	movs	r0, #1
    66c8:	4b3b      	ldr	r3, [pc, #236]	; (67b8 <system_clock_init+0x15c>)
    66ca:	4698      	mov	r8, r3
    66cc:	4798      	blx	r3
    66ce:	2001      	movs	r0, #1
    66d0:	4f3a      	ldr	r7, [pc, #232]	; (67bc <system_clock_init+0x160>)
    66d2:	47b8      	blx	r7
	config->division_factor    = 1;
    66d4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    66d6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    66d8:	7265      	strb	r5, [r4, #9]
    66da:	2303      	movs	r3, #3
    66dc:	469b      	mov	fp, r3
    66de:	7023      	strb	r3, [r4, #0]
    66e0:	7226      	strb	r6, [r4, #8]
    66e2:	0021      	movs	r1, r4
    66e4:	2002      	movs	r0, #2
    66e6:	47c0      	blx	r8
    66e8:	2002      	movs	r0, #2
    66ea:	47b8      	blx	r7
	config->high_when_disabled = false;
    66ec:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    66ee:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    66f0:	7265      	strb	r5, [r4, #9]
    66f2:	465b      	mov	r3, fp
    66f4:	7023      	strb	r3, [r4, #0]
    66f6:	2320      	movs	r3, #32
    66f8:	6063      	str	r3, [r4, #4]
    66fa:	0021      	movs	r1, r4
    66fc:	2004      	movs	r0, #4
    66fe:	47c0      	blx	r8
    6700:	2004      	movs	r0, #4
    6702:	47b8      	blx	r7
	config->division_factor    = 1;
    6704:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    6706:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    6708:	4653      	mov	r3, sl
    670a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    670c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    670e:	7265      	strb	r5, [r4, #9]
    6710:	0021      	movs	r1, r4
    6712:	2005      	movs	r0, #5
    6714:	47c0      	blx	r8
    6716:	2005      	movs	r0, #5
    6718:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    671a:	a90a      	add	r1, sp, #40	; 0x28
    671c:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    671e:	2001      	movs	r0, #1
    6720:	4b21      	ldr	r3, [pc, #132]	; (67a8 <system_clock_init+0x14c>)
    6722:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    6724:	2001      	movs	r0, #1
    6726:	4b26      	ldr	r3, [pc, #152]	; (67c0 <system_clock_init+0x164>)
    6728:	4798      	blx	r3
	config->run_in_standby      = false;
    672a:	a804      	add	r0, sp, #16
    672c:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
    672e:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    6730:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    6732:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    6734:	4b23      	ldr	r3, [pc, #140]	; (67c4 <system_clock_init+0x168>)
    6736:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    6738:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    673a:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    673c:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    673e:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    6740:	2302      	movs	r3, #2
    6742:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    6744:	4b20      	ldr	r3, [pc, #128]	; (67c8 <system_clock_init+0x16c>)
    6746:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    6748:	4b20      	ldr	r3, [pc, #128]	; (67cc <system_clock_init+0x170>)
    674a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    674c:	2008      	movs	r0, #8
    674e:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
    6750:	4813      	ldr	r0, [pc, #76]	; (67a0 <system_clock_init+0x144>)
    6752:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    6754:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    6756:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    6758:	4013      	ands	r3, r2
    675a:	2b03      	cmp	r3, #3
    675c:	d1fb      	bne.n	6756 <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    675e:	4910      	ldr	r1, [pc, #64]	; (67a0 <system_clock_init+0x144>)
    6760:	2244      	movs	r2, #68	; 0x44
    6762:	5c88      	ldrb	r0, [r1, r2]
    6764:	3b83      	subs	r3, #131	; 0x83
    6766:	4303      	orrs	r3, r0
    6768:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
    676a:	4a19      	ldr	r2, [pc, #100]	; (67d0 <system_clock_init+0x174>)
    676c:	2300      	movs	r3, #0
    676e:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    6770:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    6772:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    6774:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    6776:	a901      	add	r1, sp, #4
    6778:	2201      	movs	r2, #1
    677a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    677c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    677e:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6780:	3308      	adds	r3, #8
    6782:	700b      	strb	r3, [r1, #0]
    6784:	724a      	strb	r2, [r1, #9]
    6786:	2000      	movs	r0, #0
    6788:	4b0b      	ldr	r3, [pc, #44]	; (67b8 <system_clock_init+0x15c>)
    678a:	4798      	blx	r3
    678c:	2000      	movs	r0, #0
    678e:	4b0b      	ldr	r3, [pc, #44]	; (67bc <system_clock_init+0x160>)
    6790:	4798      	blx	r3
#endif
}
    6792:	b00d      	add	sp, #52	; 0x34
    6794:	bc3c      	pop	{r2, r3, r4, r5}
    6796:	4690      	mov	r8, r2
    6798:	4699      	mov	r9, r3
    679a:	46a2      	mov	sl, r4
    679c:	46ab      	mov	fp, r5
    679e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67a0:	40000800 	.word	0x40000800
    67a4:	41004000 	.word	0x41004000
    67a8:	00006a0d 	.word	0x00006a0d
    67ac:	000064d5 	.word	0x000064d5
    67b0:	000065b5 	.word	0x000065b5
    67b4:	000067d5 	.word	0x000067d5
    67b8:	000067f9 	.word	0x000067f9
    67bc:	000068b1 	.word	0x000068b1
    67c0:	00006981 	.word	0x00006981
    67c4:	02dc6c00 	.word	0x02dc6c00
    67c8:	000f4240 	.word	0x000f4240
    67cc:	00006511 	.word	0x00006511
    67d0:	40000400 	.word	0x40000400

000067d4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    67d4:	4a06      	ldr	r2, [pc, #24]	; (67f0 <system_gclk_init+0x1c>)
    67d6:	6993      	ldr	r3, [r2, #24]
    67d8:	2108      	movs	r1, #8
    67da:	430b      	orrs	r3, r1
    67dc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    67de:	2201      	movs	r2, #1
    67e0:	4b04      	ldr	r3, [pc, #16]	; (67f4 <system_gclk_init+0x20>)
    67e2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    67e4:	0019      	movs	r1, r3
    67e6:	780b      	ldrb	r3, [r1, #0]
    67e8:	4213      	tst	r3, r2
    67ea:	d1fc      	bne.n	67e6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    67ec:	4770      	bx	lr
    67ee:	46c0      	nop			; (mov r8, r8)
    67f0:	40000400 	.word	0x40000400
    67f4:	40000c00 	.word	0x40000c00

000067f8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    67f8:	b570      	push	{r4, r5, r6, lr}
    67fa:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    67fc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    67fe:	780d      	ldrb	r5, [r1, #0]
    6800:	022d      	lsls	r5, r5, #8
    6802:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6804:	784b      	ldrb	r3, [r1, #1]
    6806:	2b00      	cmp	r3, #0
    6808:	d002      	beq.n	6810 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    680a:	2380      	movs	r3, #128	; 0x80
    680c:	02db      	lsls	r3, r3, #11
    680e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6810:	7a4b      	ldrb	r3, [r1, #9]
    6812:	2b00      	cmp	r3, #0
    6814:	d002      	beq.n	681c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6816:	2380      	movs	r3, #128	; 0x80
    6818:	031b      	lsls	r3, r3, #12
    681a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    681c:	6848      	ldr	r0, [r1, #4]
    681e:	2801      	cmp	r0, #1
    6820:	d910      	bls.n	6844 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6822:	1e43      	subs	r3, r0, #1
    6824:	4218      	tst	r0, r3
    6826:	d134      	bne.n	6892 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6828:	2802      	cmp	r0, #2
    682a:	d930      	bls.n	688e <system_gclk_gen_set_config+0x96>
    682c:	2302      	movs	r3, #2
    682e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6830:	3201      	adds	r2, #1
						mask <<= 1) {
    6832:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6834:	4298      	cmp	r0, r3
    6836:	d8fb      	bhi.n	6830 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6838:	0212      	lsls	r2, r2, #8
    683a:	4332      	orrs	r2, r6
    683c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    683e:	2380      	movs	r3, #128	; 0x80
    6840:	035b      	lsls	r3, r3, #13
    6842:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6844:	7a0b      	ldrb	r3, [r1, #8]
    6846:	2b00      	cmp	r3, #0
    6848:	d002      	beq.n	6850 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    684a:	2380      	movs	r3, #128	; 0x80
    684c:	039b      	lsls	r3, r3, #14
    684e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6850:	4a13      	ldr	r2, [pc, #76]	; (68a0 <system_gclk_gen_set_config+0xa8>)
    6852:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    6854:	b25b      	sxtb	r3, r3
    6856:	2b00      	cmp	r3, #0
    6858:	dbfb      	blt.n	6852 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    685a:	4b12      	ldr	r3, [pc, #72]	; (68a4 <system_gclk_gen_set_config+0xac>)
    685c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    685e:	4b12      	ldr	r3, [pc, #72]	; (68a8 <system_gclk_gen_set_config+0xb0>)
    6860:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6862:	4a0f      	ldr	r2, [pc, #60]	; (68a0 <system_gclk_gen_set_config+0xa8>)
    6864:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6866:	b25b      	sxtb	r3, r3
    6868:	2b00      	cmp	r3, #0
    686a:	dbfb      	blt.n	6864 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    686c:	4b0c      	ldr	r3, [pc, #48]	; (68a0 <system_gclk_gen_set_config+0xa8>)
    686e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6870:	001a      	movs	r2, r3
    6872:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    6874:	b25b      	sxtb	r3, r3
    6876:	2b00      	cmp	r3, #0
    6878:	dbfb      	blt.n	6872 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    687a:	4a09      	ldr	r2, [pc, #36]	; (68a0 <system_gclk_gen_set_config+0xa8>)
    687c:	6853      	ldr	r3, [r2, #4]
    687e:	2180      	movs	r1, #128	; 0x80
    6880:	0249      	lsls	r1, r1, #9
    6882:	400b      	ands	r3, r1
    6884:	431d      	orrs	r5, r3
    6886:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    6888:	4b08      	ldr	r3, [pc, #32]	; (68ac <system_gclk_gen_set_config+0xb4>)
    688a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    688c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    688e:	2200      	movs	r2, #0
    6890:	e7d2      	b.n	6838 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6892:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    6894:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6896:	2380      	movs	r3, #128	; 0x80
    6898:	029b      	lsls	r3, r3, #10
    689a:	431d      	orrs	r5, r3
    689c:	e7d2      	b.n	6844 <system_gclk_gen_set_config+0x4c>
    689e:	46c0      	nop			; (mov r8, r8)
    68a0:	40000c00 	.word	0x40000c00
    68a4:	0000583d 	.word	0x0000583d
    68a8:	40000c08 	.word	0x40000c08
    68ac:	0000587d 	.word	0x0000587d

000068b0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    68b0:	b510      	push	{r4, lr}
    68b2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    68b4:	4a0b      	ldr	r2, [pc, #44]	; (68e4 <system_gclk_gen_enable+0x34>)
    68b6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    68b8:	b25b      	sxtb	r3, r3
    68ba:	2b00      	cmp	r3, #0
    68bc:	dbfb      	blt.n	68b6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    68be:	4b0a      	ldr	r3, [pc, #40]	; (68e8 <system_gclk_gen_enable+0x38>)
    68c0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    68c2:	4b0a      	ldr	r3, [pc, #40]	; (68ec <system_gclk_gen_enable+0x3c>)
    68c4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    68c6:	4a07      	ldr	r2, [pc, #28]	; (68e4 <system_gclk_gen_enable+0x34>)
    68c8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    68ca:	b25b      	sxtb	r3, r3
    68cc:	2b00      	cmp	r3, #0
    68ce:	dbfb      	blt.n	68c8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    68d0:	4a04      	ldr	r2, [pc, #16]	; (68e4 <system_gclk_gen_enable+0x34>)
    68d2:	6851      	ldr	r1, [r2, #4]
    68d4:	2380      	movs	r3, #128	; 0x80
    68d6:	025b      	lsls	r3, r3, #9
    68d8:	430b      	orrs	r3, r1
    68da:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    68dc:	4b04      	ldr	r3, [pc, #16]	; (68f0 <system_gclk_gen_enable+0x40>)
    68de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    68e0:	bd10      	pop	{r4, pc}
    68e2:	46c0      	nop			; (mov r8, r8)
    68e4:	40000c00 	.word	0x40000c00
    68e8:	0000583d 	.word	0x0000583d
    68ec:	40000c04 	.word	0x40000c04
    68f0:	0000587d 	.word	0x0000587d

000068f4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    68f4:	b570      	push	{r4, r5, r6, lr}
    68f6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    68f8:	4a1a      	ldr	r2, [pc, #104]	; (6964 <system_gclk_gen_get_hz+0x70>)
    68fa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    68fc:	b25b      	sxtb	r3, r3
    68fe:	2b00      	cmp	r3, #0
    6900:	dbfb      	blt.n	68fa <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    6902:	4b19      	ldr	r3, [pc, #100]	; (6968 <system_gclk_gen_get_hz+0x74>)
    6904:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6906:	4b19      	ldr	r3, [pc, #100]	; (696c <system_gclk_gen_get_hz+0x78>)
    6908:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    690a:	4a16      	ldr	r2, [pc, #88]	; (6964 <system_gclk_gen_get_hz+0x70>)
    690c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    690e:	b25b      	sxtb	r3, r3
    6910:	2b00      	cmp	r3, #0
    6912:	dbfb      	blt.n	690c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6914:	4e13      	ldr	r6, [pc, #76]	; (6964 <system_gclk_gen_get_hz+0x70>)
    6916:	6870      	ldr	r0, [r6, #4]
    6918:	04c0      	lsls	r0, r0, #19
    691a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    691c:	4b14      	ldr	r3, [pc, #80]	; (6970 <system_gclk_gen_get_hz+0x7c>)
    691e:	4798      	blx	r3
    6920:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6922:	4b12      	ldr	r3, [pc, #72]	; (696c <system_gclk_gen_get_hz+0x78>)
    6924:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6926:	6876      	ldr	r6, [r6, #4]
    6928:	02f6      	lsls	r6, r6, #11
    692a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    692c:	4b11      	ldr	r3, [pc, #68]	; (6974 <system_gclk_gen_get_hz+0x80>)
    692e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6930:	4a0c      	ldr	r2, [pc, #48]	; (6964 <system_gclk_gen_get_hz+0x70>)
    6932:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6934:	b25b      	sxtb	r3, r3
    6936:	2b00      	cmp	r3, #0
    6938:	dbfb      	blt.n	6932 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    693a:	4b0a      	ldr	r3, [pc, #40]	; (6964 <system_gclk_gen_get_hz+0x70>)
    693c:	689c      	ldr	r4, [r3, #8]
    693e:	0224      	lsls	r4, r4, #8
    6940:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6942:	4b0d      	ldr	r3, [pc, #52]	; (6978 <system_gclk_gen_get_hz+0x84>)
    6944:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6946:	2e00      	cmp	r6, #0
    6948:	d107      	bne.n	695a <system_gclk_gen_get_hz+0x66>
    694a:	2c01      	cmp	r4, #1
    694c:	d907      	bls.n	695e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    694e:	0021      	movs	r1, r4
    6950:	0028      	movs	r0, r5
    6952:	4b0a      	ldr	r3, [pc, #40]	; (697c <system_gclk_gen_get_hz+0x88>)
    6954:	4798      	blx	r3
    6956:	0005      	movs	r5, r0
    6958:	e001      	b.n	695e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    695a:	3401      	adds	r4, #1
    695c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    695e:	0028      	movs	r0, r5
    6960:	bd70      	pop	{r4, r5, r6, pc}
    6962:	46c0      	nop			; (mov r8, r8)
    6964:	40000c00 	.word	0x40000c00
    6968:	0000583d 	.word	0x0000583d
    696c:	40000c04 	.word	0x40000c04
    6970:	00006441 	.word	0x00006441
    6974:	40000c08 	.word	0x40000c08
    6978:	0000587d 	.word	0x0000587d
    697c:	00006f71 	.word	0x00006f71

00006980 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6980:	b510      	push	{r4, lr}
    6982:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6984:	4b06      	ldr	r3, [pc, #24]	; (69a0 <system_gclk_chan_enable+0x20>)
    6986:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6988:	4b06      	ldr	r3, [pc, #24]	; (69a4 <system_gclk_chan_enable+0x24>)
    698a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    698c:	4a06      	ldr	r2, [pc, #24]	; (69a8 <system_gclk_chan_enable+0x28>)
    698e:	8853      	ldrh	r3, [r2, #2]
    6990:	2180      	movs	r1, #128	; 0x80
    6992:	01c9      	lsls	r1, r1, #7
    6994:	430b      	orrs	r3, r1
    6996:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6998:	4b04      	ldr	r3, [pc, #16]	; (69ac <system_gclk_chan_enable+0x2c>)
    699a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    699c:	bd10      	pop	{r4, pc}
    699e:	46c0      	nop			; (mov r8, r8)
    69a0:	0000583d 	.word	0x0000583d
    69a4:	40000c02 	.word	0x40000c02
    69a8:	40000c00 	.word	0x40000c00
    69ac:	0000587d 	.word	0x0000587d

000069b0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    69b0:	b510      	push	{r4, lr}
    69b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    69b4:	4b0f      	ldr	r3, [pc, #60]	; (69f4 <system_gclk_chan_disable+0x44>)
    69b6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    69b8:	4b0f      	ldr	r3, [pc, #60]	; (69f8 <system_gclk_chan_disable+0x48>)
    69ba:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    69bc:	4a0f      	ldr	r2, [pc, #60]	; (69fc <system_gclk_chan_disable+0x4c>)
    69be:	8853      	ldrh	r3, [r2, #2]
    69c0:	051b      	lsls	r3, r3, #20
    69c2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    69c4:	8853      	ldrh	r3, [r2, #2]
    69c6:	490e      	ldr	r1, [pc, #56]	; (6a00 <system_gclk_chan_disable+0x50>)
    69c8:	400b      	ands	r3, r1
    69ca:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    69cc:	8853      	ldrh	r3, [r2, #2]
    69ce:	490d      	ldr	r1, [pc, #52]	; (6a04 <system_gclk_chan_disable+0x54>)
    69d0:	400b      	ands	r3, r1
    69d2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    69d4:	0011      	movs	r1, r2
    69d6:	2280      	movs	r2, #128	; 0x80
    69d8:	01d2      	lsls	r2, r2, #7
    69da:	884b      	ldrh	r3, [r1, #2]
    69dc:	4213      	tst	r3, r2
    69de:	d1fc      	bne.n	69da <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    69e0:	4906      	ldr	r1, [pc, #24]	; (69fc <system_gclk_chan_disable+0x4c>)
    69e2:	884a      	ldrh	r2, [r1, #2]
    69e4:	0203      	lsls	r3, r0, #8
    69e6:	4806      	ldr	r0, [pc, #24]	; (6a00 <system_gclk_chan_disable+0x50>)
    69e8:	4002      	ands	r2, r0
    69ea:	4313      	orrs	r3, r2
    69ec:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    69ee:	4b06      	ldr	r3, [pc, #24]	; (6a08 <system_gclk_chan_disable+0x58>)
    69f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    69f2:	bd10      	pop	{r4, pc}
    69f4:	0000583d 	.word	0x0000583d
    69f8:	40000c02 	.word	0x40000c02
    69fc:	40000c00 	.word	0x40000c00
    6a00:	fffff0ff 	.word	0xfffff0ff
    6a04:	ffffbfff 	.word	0xffffbfff
    6a08:	0000587d 	.word	0x0000587d

00006a0c <system_gclk_chan_set_config>:
{
    6a0c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6a0e:	780c      	ldrb	r4, [r1, #0]
    6a10:	0224      	lsls	r4, r4, #8
    6a12:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    6a14:	4b02      	ldr	r3, [pc, #8]	; (6a20 <system_gclk_chan_set_config+0x14>)
    6a16:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6a18:	b2a4      	uxth	r4, r4
    6a1a:	4b02      	ldr	r3, [pc, #8]	; (6a24 <system_gclk_chan_set_config+0x18>)
    6a1c:	805c      	strh	r4, [r3, #2]
}
    6a1e:	bd10      	pop	{r4, pc}
    6a20:	000069b1 	.word	0x000069b1
    6a24:	40000c00 	.word	0x40000c00

00006a28 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6a28:	b510      	push	{r4, lr}
    6a2a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6a2c:	4b06      	ldr	r3, [pc, #24]	; (6a48 <system_gclk_chan_get_hz+0x20>)
    6a2e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6a30:	4b06      	ldr	r3, [pc, #24]	; (6a4c <system_gclk_chan_get_hz+0x24>)
    6a32:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6a34:	4b06      	ldr	r3, [pc, #24]	; (6a50 <system_gclk_chan_get_hz+0x28>)
    6a36:	885c      	ldrh	r4, [r3, #2]
    6a38:	0524      	lsls	r4, r4, #20
    6a3a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    6a3c:	4b05      	ldr	r3, [pc, #20]	; (6a54 <system_gclk_chan_get_hz+0x2c>)
    6a3e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6a40:	0020      	movs	r0, r4
    6a42:	4b05      	ldr	r3, [pc, #20]	; (6a58 <system_gclk_chan_get_hz+0x30>)
    6a44:	4798      	blx	r3
}
    6a46:	bd10      	pop	{r4, pc}
    6a48:	0000583d 	.word	0x0000583d
    6a4c:	40000c02 	.word	0x40000c02
    6a50:	40000c00 	.word	0x40000c00
    6a54:	0000587d 	.word	0x0000587d
    6a58:	000068f5 	.word	0x000068f5

00006a5c <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    6a5c:	2800      	cmp	r0, #0
    6a5e:	db08      	blt.n	6a72 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    6a60:	2301      	movs	r3, #1
    6a62:	4083      	lsls	r3, r0
    6a64:	22c0      	movs	r2, #192	; 0xc0
    6a66:	0052      	lsls	r2, r2, #1
    6a68:	4906      	ldr	r1, [pc, #24]	; (6a84 <system_interrupt_clear_pending+0x28>)
    6a6a:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    6a6c:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    6a6e:	0018      	movs	r0, r3
    6a70:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    6a72:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    6a74:	1c42      	adds	r2, r0, #1
    6a76:	d1fa      	bne.n	6a6e <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    6a78:	2280      	movs	r2, #128	; 0x80
    6a7a:	0492      	lsls	r2, r2, #18
    6a7c:	4b02      	ldr	r3, [pc, #8]	; (6a88 <system_interrupt_clear_pending+0x2c>)
    6a7e:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    6a80:	2300      	movs	r3, #0
    6a82:	e7f4      	b.n	6a6e <system_interrupt_clear_pending+0x12>
    6a84:	e000e100 	.word	0xe000e100
    6a88:	e000ed00 	.word	0xe000ed00

00006a8c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6a8c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6a8e:	78d3      	ldrb	r3, [r2, #3]
    6a90:	2b00      	cmp	r3, #0
    6a92:	d135      	bne.n	6b00 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6a94:	7813      	ldrb	r3, [r2, #0]
    6a96:	2b80      	cmp	r3, #128	; 0x80
    6a98:	d029      	beq.n	6aee <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6a9a:	061b      	lsls	r3, r3, #24
    6a9c:	2480      	movs	r4, #128	; 0x80
    6a9e:	0264      	lsls	r4, r4, #9
    6aa0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6aa2:	7854      	ldrb	r4, [r2, #1]
    6aa4:	2502      	movs	r5, #2
    6aa6:	43ac      	bics	r4, r5
    6aa8:	d106      	bne.n	6ab8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6aaa:	7894      	ldrb	r4, [r2, #2]
    6aac:	2c00      	cmp	r4, #0
    6aae:	d120      	bne.n	6af2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6ab0:	2480      	movs	r4, #128	; 0x80
    6ab2:	02a4      	lsls	r4, r4, #10
    6ab4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6ab6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6ab8:	7854      	ldrb	r4, [r2, #1]
    6aba:	3c01      	subs	r4, #1
    6abc:	2c01      	cmp	r4, #1
    6abe:	d91c      	bls.n	6afa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6ac0:	040d      	lsls	r5, r1, #16
    6ac2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6ac4:	24a0      	movs	r4, #160	; 0xa0
    6ac6:	05e4      	lsls	r4, r4, #23
    6ac8:	432c      	orrs	r4, r5
    6aca:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6acc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6ace:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6ad0:	24d0      	movs	r4, #208	; 0xd0
    6ad2:	0624      	lsls	r4, r4, #24
    6ad4:	432c      	orrs	r4, r5
    6ad6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6ad8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6ada:	78d4      	ldrb	r4, [r2, #3]
    6adc:	2c00      	cmp	r4, #0
    6ade:	d122      	bne.n	6b26 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6ae0:	035b      	lsls	r3, r3, #13
    6ae2:	d51c      	bpl.n	6b1e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6ae4:	7893      	ldrb	r3, [r2, #2]
    6ae6:	2b01      	cmp	r3, #1
    6ae8:	d01e      	beq.n	6b28 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    6aea:	6141      	str	r1, [r0, #20]
    6aec:	e017      	b.n	6b1e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    6aee:	2300      	movs	r3, #0
    6af0:	e7d7      	b.n	6aa2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6af2:	24c0      	movs	r4, #192	; 0xc0
    6af4:	02e4      	lsls	r4, r4, #11
    6af6:	4323      	orrs	r3, r4
    6af8:	e7dd      	b.n	6ab6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6afa:	4c0d      	ldr	r4, [pc, #52]	; (6b30 <_system_pinmux_config+0xa4>)
    6afc:	4023      	ands	r3, r4
    6afe:	e7df      	b.n	6ac0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6b00:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6b02:	040c      	lsls	r4, r1, #16
    6b04:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6b06:	23a0      	movs	r3, #160	; 0xa0
    6b08:	05db      	lsls	r3, r3, #23
    6b0a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b0c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6b0e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6b10:	23d0      	movs	r3, #208	; 0xd0
    6b12:	061b      	lsls	r3, r3, #24
    6b14:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b16:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    6b18:	78d3      	ldrb	r3, [r2, #3]
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d103      	bne.n	6b26 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b1e:	7853      	ldrb	r3, [r2, #1]
    6b20:	3b01      	subs	r3, #1
    6b22:	2b01      	cmp	r3, #1
    6b24:	d902      	bls.n	6b2c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6b26:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6b28:	6181      	str	r1, [r0, #24]
    6b2a:	e7f8      	b.n	6b1e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    6b2c:	6081      	str	r1, [r0, #8]
}
    6b2e:	e7fa      	b.n	6b26 <_system_pinmux_config+0x9a>
    6b30:	fffbffff 	.word	0xfffbffff

00006b34 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6b34:	b510      	push	{r4, lr}
    6b36:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    6b38:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    6b3a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6b3c:	2900      	cmp	r1, #0
    6b3e:	d104      	bne.n	6b4a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6b40:	0943      	lsrs	r3, r0, #5
    6b42:	01db      	lsls	r3, r3, #7
    6b44:	4905      	ldr	r1, [pc, #20]	; (6b5c <system_pinmux_pin_set_config+0x28>)
    6b46:	468c      	mov	ip, r1
    6b48:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6b4a:	241f      	movs	r4, #31
    6b4c:	4020      	ands	r0, r4
    6b4e:	2101      	movs	r1, #1
    6b50:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6b52:	0018      	movs	r0, r3
    6b54:	4b02      	ldr	r3, [pc, #8]	; (6b60 <system_pinmux_pin_set_config+0x2c>)
    6b56:	4798      	blx	r3
}
    6b58:	bd10      	pop	{r4, pc}
    6b5a:	46c0      	nop			; (mov r8, r8)
    6b5c:	41004400 	.word	0x41004400
    6b60:	00006a8d 	.word	0x00006a8d

00006b64 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6b64:	4770      	bx	lr
	...

00006b68 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6b68:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6b6a:	4b05      	ldr	r3, [pc, #20]	; (6b80 <system_init+0x18>)
    6b6c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6b6e:	4b05      	ldr	r3, [pc, #20]	; (6b84 <system_init+0x1c>)
    6b70:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6b72:	4b05      	ldr	r3, [pc, #20]	; (6b88 <system_init+0x20>)
    6b74:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6b76:	4b05      	ldr	r3, [pc, #20]	; (6b8c <system_init+0x24>)
    6b78:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6b7a:	4b05      	ldr	r3, [pc, #20]	; (6b90 <system_init+0x28>)
    6b7c:	4798      	blx	r3
}
    6b7e:	bd10      	pop	{r4, pc}
    6b80:	0000665d 	.word	0x0000665d
    6b84:	000058ad 	.word	0x000058ad
    6b88:	00006b65 	.word	0x00006b65
    6b8c:	00005951 	.word	0x00005951
    6b90:	00006b65 	.word	0x00006b65

00006b94 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b96:	46c6      	mov	lr, r8
    6b98:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    6b9a:	0080      	lsls	r0, r0, #2
    6b9c:	4b0e      	ldr	r3, [pc, #56]	; (6bd8 <_tcc_interrupt_handler+0x44>)
    6b9e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6ba0:	683b      	ldr	r3, [r7, #0]
    6ba2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6ba8:	4013      	ands	r3, r2
    6baa:	401e      	ands	r6, r3
    6bac:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6bae:	4b0b      	ldr	r3, [pc, #44]	; (6bdc <_tcc_interrupt_handler+0x48>)
    6bb0:	4698      	mov	r8, r3
    6bb2:	e002      	b.n	6bba <_tcc_interrupt_handler+0x26>
    6bb4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6bb6:	2c30      	cmp	r4, #48	; 0x30
    6bb8:	d00a      	beq.n	6bd0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6bba:	4643      	mov	r3, r8
    6bbc:	58e5      	ldr	r5, [r4, r3]
    6bbe:	4235      	tst	r5, r6
    6bc0:	d0f8      	beq.n	6bb4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6bc2:	193b      	adds	r3, r7, r4
    6bc4:	685b      	ldr	r3, [r3, #4]
    6bc6:	0038      	movs	r0, r7
    6bc8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    6bca:	683b      	ldr	r3, [r7, #0]
    6bcc:	62dd      	str	r5, [r3, #44]	; 0x2c
    6bce:	e7f1      	b.n	6bb4 <_tcc_interrupt_handler+0x20>
		}
	}
}
<<<<<<< Updated upstream
    6bb0:	bc04      	pop	{r2}
    6bb2:	4690      	mov	r8, r2
    6bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bb6:	46c0      	nop			; (mov r8, r8)
    6bb8:	20004df4 	.word	0x20004df4
    6bbc:	0000a818 	.word	0x0000a818

00006bc0 <TCC0_Handler>:
=======
    6bd0:	bc04      	pop	{r2}
    6bd2:	4690      	mov	r8, r2
    6bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bd6:	46c0      	nop			; (mov r8, r8)
    6bd8:	20004e34 	.word	0x20004e34
    6bdc:	0000a844 	.word	0x0000a844

00006be0 <TCC0_Handler>:
>>>>>>> Stashed changes
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6be0:	b510      	push	{r4, lr}
    6be2:	2000      	movs	r0, #0
    6be4:	4b01      	ldr	r3, [pc, #4]	; (6bec <TCC0_Handler+0xc>)
    6be6:	4798      	blx	r3
    6be8:	bd10      	pop	{r4, pc}
    6bea:	46c0      	nop			; (mov r8, r8)
    6bec:	00006b95 	.word	0x00006b95

00006bf0 <TCC1_Handler>:
    6bf0:	b510      	push	{r4, lr}
    6bf2:	2001      	movs	r0, #1
    6bf4:	4b01      	ldr	r3, [pc, #4]	; (6bfc <TCC1_Handler+0xc>)
    6bf6:	4798      	blx	r3
    6bf8:	bd10      	pop	{r4, pc}
    6bfa:	46c0      	nop			; (mov r8, r8)
    6bfc:	00006b95 	.word	0x00006b95

00006c00 <TCC2_Handler>:
    6c00:	b510      	push	{r4, lr}
    6c02:	2002      	movs	r0, #2
    6c04:	4b01      	ldr	r3, [pc, #4]	; (6c0c <TCC2_Handler+0xc>)
    6c06:	4798      	blx	r3
    6c08:	bd10      	pop	{r4, pc}
    6c0a:	46c0      	nop			; (mov r8, r8)
    6c0c:	00006b95 	.word	0x00006b95

00006c10 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
    6c10:	2004      	movs	r0, #4
    6c12:	4671      	mov	r1, lr
    6c14:	4208      	tst	r0, r1
    6c16:	d002      	beq.n	6c1e <_MSP>
    6c18:	f3ef 8009 	mrs	r0, PSP
    6c1c:	e001      	b.n	6c22 <_HALT>

00006c1e <_MSP>:
    6c1e:	f3ef 8008 	mrs	r0, MSP

00006c22 <_HALT>:
    6c22:	6941      	ldr	r1, [r0, #20]
    6c24:	e074      	b.n	6d10 <HardFault_HandlerC>
    6c26:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
    6c28:	4770      	bx	lr
	...

00006c2c <Reset_Handler>:
{
    6c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    6c2e:	4a2a      	ldr	r2, [pc, #168]	; (6cd8 <Reset_Handler+0xac>)
    6c30:	4b2a      	ldr	r3, [pc, #168]	; (6cdc <Reset_Handler+0xb0>)
    6c32:	429a      	cmp	r2, r3
    6c34:	d011      	beq.n	6c5a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6c36:	001a      	movs	r2, r3
    6c38:	4b29      	ldr	r3, [pc, #164]	; (6ce0 <Reset_Handler+0xb4>)
    6c3a:	429a      	cmp	r2, r3
    6c3c:	d20d      	bcs.n	6c5a <Reset_Handler+0x2e>
    6c3e:	4a29      	ldr	r2, [pc, #164]	; (6ce4 <Reset_Handler+0xb8>)
    6c40:	3303      	adds	r3, #3
    6c42:	1a9b      	subs	r3, r3, r2
    6c44:	089b      	lsrs	r3, r3, #2
    6c46:	3301      	adds	r3, #1
    6c48:	009b      	lsls	r3, r3, #2
    6c4a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    6c4c:	4823      	ldr	r0, [pc, #140]	; (6cdc <Reset_Handler+0xb0>)
    6c4e:	4922      	ldr	r1, [pc, #136]	; (6cd8 <Reset_Handler+0xac>)
    6c50:	588c      	ldr	r4, [r1, r2]
    6c52:	5084      	str	r4, [r0, r2]
    6c54:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6c56:	429a      	cmp	r2, r3
    6c58:	d1fa      	bne.n	6c50 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    6c5a:	4a23      	ldr	r2, [pc, #140]	; (6ce8 <Reset_Handler+0xbc>)
    6c5c:	4b23      	ldr	r3, [pc, #140]	; (6cec <Reset_Handler+0xc0>)
    6c5e:	429a      	cmp	r2, r3
    6c60:	d20a      	bcs.n	6c78 <Reset_Handler+0x4c>
    6c62:	43d3      	mvns	r3, r2
    6c64:	4921      	ldr	r1, [pc, #132]	; (6cec <Reset_Handler+0xc0>)
    6c66:	185b      	adds	r3, r3, r1
    6c68:	2103      	movs	r1, #3
    6c6a:	438b      	bics	r3, r1
    6c6c:	3304      	adds	r3, #4
    6c6e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6c70:	2100      	movs	r1, #0
    6c72:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6c74:	4293      	cmp	r3, r2
    6c76:	d1fc      	bne.n	6c72 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6c78:	4a1d      	ldr	r2, [pc, #116]	; (6cf0 <Reset_Handler+0xc4>)
    6c7a:	21ff      	movs	r1, #255	; 0xff
    6c7c:	4b1d      	ldr	r3, [pc, #116]	; (6cf4 <Reset_Handler+0xc8>)
    6c7e:	438b      	bics	r3, r1
    6c80:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6c82:	39fd      	subs	r1, #253	; 0xfd
    6c84:	2390      	movs	r3, #144	; 0x90
    6c86:	005b      	lsls	r3, r3, #1
    6c88:	4a1b      	ldr	r2, [pc, #108]	; (6cf8 <Reset_Handler+0xcc>)
    6c8a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6c8c:	4a1b      	ldr	r2, [pc, #108]	; (6cfc <Reset_Handler+0xd0>)
    6c8e:	78d3      	ldrb	r3, [r2, #3]
    6c90:	2503      	movs	r5, #3
    6c92:	43ab      	bics	r3, r5
    6c94:	2402      	movs	r4, #2
    6c96:	4323      	orrs	r3, r4
    6c98:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6c9a:	78d3      	ldrb	r3, [r2, #3]
    6c9c:	270c      	movs	r7, #12
    6c9e:	43bb      	bics	r3, r7
    6ca0:	2608      	movs	r6, #8
    6ca2:	4333      	orrs	r3, r6
    6ca4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6ca6:	4b16      	ldr	r3, [pc, #88]	; (6d00 <Reset_Handler+0xd4>)
    6ca8:	7b98      	ldrb	r0, [r3, #14]
    6caa:	2230      	movs	r2, #48	; 0x30
    6cac:	4390      	bics	r0, r2
    6cae:	2220      	movs	r2, #32
    6cb0:	4310      	orrs	r0, r2
    6cb2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6cb4:	7b99      	ldrb	r1, [r3, #14]
    6cb6:	43b9      	bics	r1, r7
    6cb8:	4331      	orrs	r1, r6
    6cba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6cbc:	7b9a      	ldrb	r2, [r3, #14]
    6cbe:	43aa      	bics	r2, r5
    6cc0:	4322      	orrs	r2, r4
    6cc2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6cc4:	4a0f      	ldr	r2, [pc, #60]	; (6d04 <Reset_Handler+0xd8>)
    6cc6:	6853      	ldr	r3, [r2, #4]
    6cc8:	2180      	movs	r1, #128	; 0x80
    6cca:	430b      	orrs	r3, r1
    6ccc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6cce:	4b0e      	ldr	r3, [pc, #56]	; (6d08 <Reset_Handler+0xdc>)
    6cd0:	4798      	blx	r3
        main();
<<<<<<< Updated upstream
    6cb2:	4b0e      	ldr	r3, [pc, #56]	; (6cec <Reset_Handler+0xe0>)
    6cb4:	4798      	blx	r3
    6cb6:	e7fe      	b.n	6cb6 <Reset_Handler+0xaa>
    6cb8:	0000ac78 	.word	0x0000ac78
    6cbc:	20000000 	.word	0x20000000
    6cc0:	20000200 	.word	0x20000200
    6cc4:	20000004 	.word	0x20000004
    6cc8:	20000200 	.word	0x20000200
    6ccc:	20004f44 	.word	0x20004f44
    6cd0:	e000ed00 	.word	0xe000ed00
    6cd4:	00000000 	.word	0x00000000
    6cd8:	41007000 	.word	0x41007000
    6cdc:	41005000 	.word	0x41005000
    6ce0:	41004800 	.word	0x41004800
    6ce4:	41004000 	.word	0x41004000
    6ce8:	00008ca5 	.word	0x00008ca5
    6cec:	00006d79 	.word	0x00006d79

00006cf0 <HardFault_HandlerC>:
=======
    6cd2:	4b0e      	ldr	r3, [pc, #56]	; (6d0c <Reset_Handler+0xe0>)
    6cd4:	4798      	blx	r3
    6cd6:	e7fe      	b.n	6cd6 <Reset_Handler+0xaa>
    6cd8:	0000aca4 	.word	0x0000aca4
    6cdc:	20000000 	.word	0x20000000
    6ce0:	20000200 	.word	0x20000200
    6ce4:	20000004 	.word	0x20000004
    6ce8:	20000200 	.word	0x20000200
    6cec:	20004f84 	.word	0x20004f84
    6cf0:	e000ed00 	.word	0xe000ed00
    6cf4:	00000000 	.word	0x00000000
    6cf8:	41007000 	.word	0x41007000
    6cfc:	41005000 	.word	0x41005000
    6d00:	41004800 	.word	0x41004800
    6d04:	41004000 	.word	0x41004000
    6d08:	00008cc5 	.word	0x00008cc5
    6d0c:	00006d99 	.word	0x00006d99

00006d10 <HardFault_HandlerC>:
>>>>>>> Stashed changes

void HardFault_HandlerC(unsigned long *hardfault_args) {
    6d10:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
    6d12:	6803      	ldr	r3, [r0, #0]
    6d14:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
    6d16:	6843      	ldr	r3, [r0, #4]
    6d18:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
    6d1a:	6883      	ldr	r3, [r0, #8]
    6d1c:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
    6d1e:	68c3      	ldr	r3, [r0, #12]
    6d20:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
    6d22:	6903      	ldr	r3, [r0, #16]
    6d24:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
    6d26:	6943      	ldr	r3, [r0, #20]
    6d28:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
    6d2a:	6983      	ldr	r3, [r0, #24]
    6d2c:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
    6d2e:	69c3      	ldr	r3, [r0, #28]
    6d30:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
    6d32:	4b0a      	ldr	r3, [pc, #40]	; (6d5c <HardFault_HandlerC+0x4c>)
    6d34:	681b      	ldr	r3, [r3, #0]
    6d36:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
    6d38:	4b09      	ldr	r3, [pc, #36]	; (6d60 <HardFault_HandlerC+0x50>)
    6d3a:	681b      	ldr	r3, [r3, #0]
    6d3c:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
    6d3e:	4b09      	ldr	r3, [pc, #36]	; (6d64 <HardFault_HandlerC+0x54>)
    6d40:	681b      	ldr	r3, [r3, #0]
    6d42:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
    6d44:	4b08      	ldr	r3, [pc, #32]	; (6d68 <HardFault_HandlerC+0x58>)
    6d46:	681b      	ldr	r3, [r3, #0]
    6d48:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
    6d4a:	4b08      	ldr	r3, [pc, #32]	; (6d6c <HardFault_HandlerC+0x5c>)
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
    6d50:	4b07      	ldr	r3, [pc, #28]	; (6d70 <HardFault_HandlerC+0x60>)
    6d52:	681b      	ldr	r3, [r3, #0]
    6d54:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
    6d56:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
    6d58:	b00e      	add	sp, #56	; 0x38
    6d5a:	4770      	bx	lr
    6d5c:	e000ed28 	.word	0xe000ed28
    6d60:	e000ed2c 	.word	0xe000ed2c
    6d64:	e000ed30 	.word	0xe000ed30
    6d68:	e000ed3c 	.word	0xe000ed3c
    6d6c:	e000ed34 	.word	0xe000ed34
    6d70:	e000ed38 	.word	0xe000ed38

00006d74 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6d74:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6d76:	4a06      	ldr	r2, [pc, #24]	; (6d90 <_sbrk+0x1c>)
    6d78:	6812      	ldr	r2, [r2, #0]
    6d7a:	2a00      	cmp	r2, #0
    6d7c:	d004      	beq.n	6d88 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6d7e:	4a04      	ldr	r2, [pc, #16]	; (6d90 <_sbrk+0x1c>)
    6d80:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6d82:	18c3      	adds	r3, r0, r3
    6d84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6d86:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6d88:	4902      	ldr	r1, [pc, #8]	; (6d94 <_sbrk+0x20>)
    6d8a:	4a01      	ldr	r2, [pc, #4]	; (6d90 <_sbrk+0x1c>)
    6d8c:	6011      	str	r1, [r2, #0]
    6d8e:	e7f6      	b.n	6d7e <_sbrk+0xa>
    6d90:	20003850 	.word	0x20003850
    6d94:	20006f88 	.word	0x20006f88

00006d98 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    6d98:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
    6d9a:	4b05      	ldr	r3, [pc, #20]	; (6db0 <main+0x18>)
    6d9c:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
    6d9e:	4b05      	ldr	r3, [pc, #20]	; (6db4 <main+0x1c>)
    6da0:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
    6da2:	2001      	movs	r0, #1
    6da4:	4b04      	ldr	r3, [pc, #16]	; (6db8 <main+0x20>)
    6da6:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
    6da8:	4b04      	ldr	r3, [pc, #16]	; (6dbc <main+0x24>)
    6daa:	4798      	blx	r3

	return 0; //Will not get here
}
    6dac:	2000      	movs	r0, #0
    6dae:	bd10      	pop	{r4, pc}
    6db0:	00006b69 	.word	0x00006b69
    6db4:	00005625 	.word	0x00005625
    6db8:	00001d51 	.word	0x00001d51
    6dbc:	000045e5 	.word	0x000045e5

00006dc0 <vApplicationDaemonTaskStartupHook>:
* @param[in]        None
* @return           None
*****************************************************************************/
volatile uint8_t data[256];
void vApplicationDaemonTaskStartupHook(void)
{
    6dc0:	b530      	push	{r4, r5, lr}
    6dc2:	b085      	sub	sp, #20

SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
    6dc4:	4840      	ldr	r0, [pc, #256]	; (6ec8 <vApplicationDaemonTaskStartupHook+0x108>)
    6dc6:	4c41      	ldr	r4, [pc, #260]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6dc8:	47a0      	blx	r4

//Initialize HW that needs FreeRTOS Initialization
SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
    6dca:	4841      	ldr	r0, [pc, #260]	; (6ed0 <vApplicationDaemonTaskStartupHook+0x110>)
    6dcc:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
    6dce:	4b41      	ldr	r3, [pc, #260]	; (6ed4 <vApplicationDaemonTaskStartupHook+0x114>)
    6dd0:	4798      	blx	r3
    6dd2:	2800      	cmp	r0, #0
    6dd4:	d061      	beq.n	6e9a <vApplicationDaemonTaskStartupHook+0xda>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
    6dd6:	4840      	ldr	r0, [pc, #256]	; (6ed8 <vApplicationDaemonTaskStartupHook+0x118>)
    6dd8:	4b3c      	ldr	r3, [pc, #240]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6dda:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
	}

	if(0 != InitializeSeesaw())
    6ddc:	4b3f      	ldr	r3, [pc, #252]	; (6edc <vApplicationDaemonTaskStartupHook+0x11c>)
    6dde:	4798      	blx	r3
    6de0:	2800      	cmp	r0, #0
    6de2:	d05e      	beq.n	6ea2 <vApplicationDaemonTaskStartupHook+0xe2>
	{
<<<<<<< HEAD
<<<<<<< Updated upstream
		SerialConsoleWriteString("Error initializing Seesaw!\r\n"); //we have this error - Derek
=======
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
>>>>>>> parent of 79ffb95 (comment)
    6dc4:	483e      	ldr	r0, [pc, #248]	; (6ec0 <vApplicationDaemonTaskStartupHook+0x120>)
    6dc6:	4b39      	ldr	r3, [pc, #228]	; (6eac <vApplicationDaemonTaskStartupHook+0x10c>)
    6dc8:	4798      	blx	r3
=======
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    6de4:	483e      	ldr	r0, [pc, #248]	; (6ee0 <vApplicationDaemonTaskStartupHook+0x120>)
    6de6:	4b39      	ldr	r3, [pc, #228]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6de8:	4798      	blx	r3
>>>>>>> Stashed changes
	else
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
	}

	uint8_t whoamI = 0;
    6dea:	240f      	movs	r4, #15
    6dec:	446c      	add	r4, sp
    6dee:	2300      	movs	r3, #0
    6df0:	7023      	strb	r3, [r4, #0]
	(lsm6dso_device_id_get(GetImuStruct(), &whoamI));
    6df2:	4b3c      	ldr	r3, [pc, #240]	; (6ee4 <vApplicationDaemonTaskStartupHook+0x124>)
    6df4:	4798      	blx	r3
    6df6:	0021      	movs	r1, r4
    6df8:	4b3b      	ldr	r3, [pc, #236]	; (6ee8 <vApplicationDaemonTaskStartupHook+0x128>)
    6dfa:	4798      	blx	r3
	
	if (whoamI != LSM6DSO_ID){
    6dfc:	7823      	ldrb	r3, [r4, #0]
    6dfe:	2b6c      	cmp	r3, #108	; 0x6c
    6e00:	d053      	beq.n	6eaa <vApplicationDaemonTaskStartupHook+0xea>
		SerialConsoleWriteString("Cannot find IMU!\r\n");
    6e02:	483a      	ldr	r0, [pc, #232]	; (6eec <vApplicationDaemonTaskStartupHook+0x12c>)
    6e04:	4b31      	ldr	r3, [pc, #196]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6e06:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
    6e08:	4b39      	ldr	r3, [pc, #228]	; (6ef0 <vApplicationDaemonTaskStartupHook+0x130>)
    6e0a:	4798      	blx	r3
    6e0c:	0003      	movs	r3, r0
    6e0e:	4c39      	ldr	r4, [pc, #228]	; (6ef4 <vApplicationDaemonTaskStartupHook+0x134>)
    6e10:	4a39      	ldr	r2, [pc, #228]	; (6ef8 <vApplicationDaemonTaskStartupHook+0x138>)
    6e12:	2140      	movs	r1, #64	; 0x40
    6e14:	0020      	movs	r0, r4
    6e16:	4d39      	ldr	r5, [pc, #228]	; (6efc <vApplicationDaemonTaskStartupHook+0x13c>)
    6e18:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    6e1a:	0020      	movs	r0, r4
    6e1c:	4b2b      	ldr	r3, [pc, #172]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6e1e:	4798      	blx	r3

//Initialize Tasks here

if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
    6e20:	4b37      	ldr	r3, [pc, #220]	; (6f00 <vApplicationDaemonTaskStartupHook+0x140>)
    6e22:	9301      	str	r3, [sp, #4]
    6e24:	2304      	movs	r3, #4
    6e26:	9300      	str	r3, [sp, #0]
    6e28:	2300      	movs	r3, #0
    6e2a:	22c8      	movs	r2, #200	; 0xc8
    6e2c:	0052      	lsls	r2, r2, #1
    6e2e:	4935      	ldr	r1, [pc, #212]	; (6f04 <vApplicationDaemonTaskStartupHook+0x144>)
    6e30:	4835      	ldr	r0, [pc, #212]	; (6f08 <vApplicationDaemonTaskStartupHook+0x148>)
    6e32:	4c36      	ldr	r4, [pc, #216]	; (6f0c <vApplicationDaemonTaskStartupHook+0x14c>)
    6e34:	47a0      	blx	r4
    6e36:	2801      	cmp	r0, #1
    6e38:	d002      	beq.n	6e40 <vApplicationDaemonTaskStartupHook+0x80>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
    6e3a:	4835      	ldr	r0, [pc, #212]	; (6f10 <vApplicationDaemonTaskStartupHook+0x150>)
    6e3c:	4b23      	ldr	r3, [pc, #140]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6e3e:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
    6e40:	4b2b      	ldr	r3, [pc, #172]	; (6ef0 <vApplicationDaemonTaskStartupHook+0x130>)
    6e42:	4798      	blx	r3
    6e44:	0003      	movs	r3, r0
    6e46:	4c2b      	ldr	r4, [pc, #172]	; (6ef4 <vApplicationDaemonTaskStartupHook+0x134>)
    6e48:	4a32      	ldr	r2, [pc, #200]	; (6f14 <vApplicationDaemonTaskStartupHook+0x154>)
    6e4a:	2140      	movs	r1, #64	; 0x40
    6e4c:	0020      	movs	r0, r4
    6e4e:	4d2b      	ldr	r5, [pc, #172]	; (6efc <vApplicationDaemonTaskStartupHook+0x13c>)
    6e50:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    6e52:	0020      	movs	r0, r4
    6e54:	4b1d      	ldr	r3, [pc, #116]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6e56:	4798      	blx	r3



if(xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
    6e58:	4b2f      	ldr	r3, [pc, #188]	; (6f18 <vApplicationDaemonTaskStartupHook+0x158>)
    6e5a:	9301      	str	r3, [sp, #4]
    6e5c:	2303      	movs	r3, #3
    6e5e:	9300      	str	r3, [sp, #0]
    6e60:	2300      	movs	r3, #0
    6e62:	2280      	movs	r2, #128	; 0x80
    6e64:	0052      	lsls	r2, r2, #1
    6e66:	492d      	ldr	r1, [pc, #180]	; (6f1c <vApplicationDaemonTaskStartupHook+0x15c>)
    6e68:	482d      	ldr	r0, [pc, #180]	; (6f20 <vApplicationDaemonTaskStartupHook+0x160>)
    6e6a:	4c28      	ldr	r4, [pc, #160]	; (6f0c <vApplicationDaemonTaskStartupHook+0x14c>)
    6e6c:	47a0      	blx	r4
    6e6e:	2801      	cmp	r0, #1
    6e70:	d002      	beq.n	6e78 <vApplicationDaemonTaskStartupHook+0xb8>
	SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
    6e72:	482c      	ldr	r0, [pc, #176]	; (6f24 <vApplicationDaemonTaskStartupHook+0x164>)
    6e74:	4b15      	ldr	r3, [pc, #84]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6e76:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
    6e78:	4b1d      	ldr	r3, [pc, #116]	; (6ef0 <vApplicationDaemonTaskStartupHook+0x130>)
    6e7a:	4798      	blx	r3
    6e7c:	0003      	movs	r3, r0
    6e7e:	4c1d      	ldr	r4, [pc, #116]	; (6ef4 <vApplicationDaemonTaskStartupHook+0x134>)
    6e80:	4a29      	ldr	r2, [pc, #164]	; (6f28 <vApplicationDaemonTaskStartupHook+0x168>)
    6e82:	2140      	movs	r1, #64	; 0x40
    6e84:	0020      	movs	r0, r4
    6e86:	4d1d      	ldr	r5, [pc, #116]	; (6efc <vApplicationDaemonTaskStartupHook+0x13c>)
    6e88:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    6e8a:	0020      	movs	r0, r4
    6e8c:	4b0f      	ldr	r3, [pc, #60]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6e8e:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
    6e90:	2000      	movs	r0, #0
    6e92:	4b26      	ldr	r3, [pc, #152]	; (6f2c <vApplicationDaemonTaskStartupHook+0x16c>)
    6e94:	4798      	blx	r3
}
    6e96:	b005      	add	sp, #20
    6e98:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
    6e9a:	4825      	ldr	r0, [pc, #148]	; (6f30 <vApplicationDaemonTaskStartupHook+0x170>)
    6e9c:	4b0b      	ldr	r3, [pc, #44]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6e9e:	4798      	blx	r3
    6ea0:	e79c      	b.n	6ddc <vApplicationDaemonTaskStartupHook+0x1c>
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
    6ea2:	4824      	ldr	r0, [pc, #144]	; (6f34 <vApplicationDaemonTaskStartupHook+0x174>)
    6ea4:	4b09      	ldr	r3, [pc, #36]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6ea6:	4798      	blx	r3
    6ea8:	e79f      	b.n	6dea <vApplicationDaemonTaskStartupHook+0x2a>
		SerialConsoleWriteString("IMU found!\r\n");
    6eaa:	4823      	ldr	r0, [pc, #140]	; (6f38 <vApplicationDaemonTaskStartupHook+0x178>)
    6eac:	4b07      	ldr	r3, [pc, #28]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6eae:	4798      	blx	r3
		if(InitImu() == 0)
    6eb0:	4b22      	ldr	r3, [pc, #136]	; (6f3c <vApplicationDaemonTaskStartupHook+0x17c>)
    6eb2:	4798      	blx	r3
    6eb4:	2800      	cmp	r0, #0
    6eb6:	d003      	beq.n	6ec0 <vApplicationDaemonTaskStartupHook+0x100>
			SerialConsoleWriteString("Could not initialize IMU\r\n");
    6eb8:	4821      	ldr	r0, [pc, #132]	; (6f40 <vApplicationDaemonTaskStartupHook+0x180>)
    6eba:	4b04      	ldr	r3, [pc, #16]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6ebc:	4798      	blx	r3
    6ebe:	e7a3      	b.n	6e08 <vApplicationDaemonTaskStartupHook+0x48>
			SerialConsoleWriteString("IMU initialized!\r\n");
<<<<<<< Updated upstream
    6ea0:	4820      	ldr	r0, [pc, #128]	; (6f24 <vApplicationDaemonTaskStartupHook+0x184>)
    6ea2:	4b02      	ldr	r3, [pc, #8]	; (6eac <vApplicationDaemonTaskStartupHook+0x10c>)
    6ea4:	4798      	blx	r3
    6ea6:	e79f      	b.n	6de8 <vApplicationDaemonTaskStartupHook+0x48>
    6ea8:	0000a848 	.word	0x0000a848
    6eac:	0000572d 	.word	0x0000572d
    6eb0:	0000a86c 	.word	0x0000a86c
    6eb4:	000009d1 	.word	0x000009d1
    6eb8:	0000a884 	.word	0x0000a884
    6ebc:	0000146d 	.word	0x0000146d
    6ec0:	00009910 	.word	0x00009910
    6ec4:	00001319 	.word	0x00001319
    6ec8:	00000f01 	.word	0x00000f01
    6ecc:	0000a8dc 	.word	0x0000a8dc
    6ed0:	00003031 	.word	0x00003031
    6ed4:	20004f00 	.word	0x20004f00
    6ed8:	0000a930 	.word	0x0000a930
    6edc:	00008e99 	.word	0x00008e99
    6ee0:	20003854 	.word	0x20003854
    6ee4:	0000a954 	.word	0x0000a954
    6ee8:	0000066d 	.word	0x0000066d
    6eec:	00004321 	.word	0x00004321
    6ef0:	0000a960 	.word	0x0000a960
    6ef4:	0000a98c 	.word	0x0000a98c
    6ef8:	20003858 	.word	0x20003858
    6efc:	0000a9ac 	.word	0x0000a9ac
    6f00:	000015f5 	.word	0x000015f5
    6f04:	0000a9b4 	.word	0x0000a9b4
    6f08:	0000a9e0 	.word	0x0000a9e0
    6f0c:	00004aa9 	.word	0x00004aa9
    6f10:	0000a8a8 	.word	0x0000a8a8
    6f14:	0000a8c4 	.word	0x0000a8c4
    6f18:	0000a8f0 	.word	0x0000a8f0
    6f1c:	00001321 	.word	0x00001321
    6f20:	0000a914 	.word	0x0000a914
    6f24:	0000a900 	.word	0x0000a900

00006f28 <vApplicationMallocFailedHook>:
=======
    6ec0:	4820      	ldr	r0, [pc, #128]	; (6f44 <vApplicationDaemonTaskStartupHook+0x184>)
    6ec2:	4b02      	ldr	r3, [pc, #8]	; (6ecc <vApplicationDaemonTaskStartupHook+0x10c>)
    6ec4:	4798      	blx	r3
    6ec6:	e79f      	b.n	6e08 <vApplicationDaemonTaskStartupHook+0x48>
    6ec8:	0000a874 	.word	0x0000a874
    6ecc:	0000574d 	.word	0x0000574d
    6ed0:	0000a898 	.word	0x0000a898
    6ed4:	000009d1 	.word	0x000009d1
    6ed8:	0000a8b0 	.word	0x0000a8b0
    6edc:	00001495 	.word	0x00001495
    6ee0:	00009948 	.word	0x00009948
    6ee4:	00001341 	.word	0x00001341
    6ee8:	00000f29 	.word	0x00000f29
    6eec:	0000a908 	.word	0x0000a908
    6ef0:	00003051 	.word	0x00003051
    6ef4:	20004f40 	.word	0x20004f40
    6ef8:	0000a95c 	.word	0x0000a95c
    6efc:	00008eb9 	.word	0x00008eb9
    6f00:	20003854 	.word	0x20003854
    6f04:	0000a980 	.word	0x0000a980
    6f08:	0000066d 	.word	0x0000066d
    6f0c:	00004341 	.word	0x00004341
    6f10:	0000a98c 	.word	0x0000a98c
    6f14:	0000a9b8 	.word	0x0000a9b8
    6f18:	20003858 	.word	0x20003858
    6f1c:	0000a9d8 	.word	0x0000a9d8
    6f20:	0000161d 	.word	0x0000161d
    6f24:	0000a9e0 	.word	0x0000a9e0
    6f28:	0000aa0c 	.word	0x0000aa0c
    6f2c:	00004ac9 	.word	0x00004ac9
    6f30:	0000a8d4 	.word	0x0000a8d4
    6f34:	0000a8f0 	.word	0x0000a8f0
    6f38:	0000a91c 	.word	0x0000a91c
    6f3c:	00001349 	.word	0x00001349
    6f40:	0000a940 	.word	0x0000a940
    6f44:	0000a92c 	.word	0x0000a92c

00006f48 <vApplicationMallocFailedHook>:
>>>>>>> Stashed changes




void vApplicationMallocFailedHook(void)
{
    6f48:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
<<<<<<< Updated upstream
    6f2a:	4802      	ldr	r0, [pc, #8]	; (6f34 <vApplicationMallocFailedHook+0xc>)
    6f2c:	4b02      	ldr	r3, [pc, #8]	; (6f38 <vApplicationMallocFailedHook+0x10>)
    6f2e:	4798      	blx	r3
    6f30:	e7fe      	b.n	6f30 <vApplicationMallocFailedHook+0x8>
    6f32:	46c0      	nop			; (mov r8, r8)
    6f34:	0000aa04 	.word	0x0000aa04
    6f38:	0000572d 	.word	0x0000572d

00006f3c <vApplicationStackOverflowHook>:
=======
    6f4a:	4802      	ldr	r0, [pc, #8]	; (6f54 <vApplicationMallocFailedHook+0xc>)
    6f4c:	4b02      	ldr	r3, [pc, #8]	; (6f58 <vApplicationMallocFailedHook+0x10>)
    6f4e:	4798      	blx	r3
    6f50:	e7fe      	b.n	6f50 <vApplicationMallocFailedHook+0x8>
    6f52:	46c0      	nop			; (mov r8, r8)
    6f54:	0000aa30 	.word	0x0000aa30
    6f58:	0000574d 	.word	0x0000574d

00006f5c <vApplicationStackOverflowHook>:
>>>>>>> Stashed changes
while(1);
}

void vApplicationStackOverflowHook(void)
{
    6f5c:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
<<<<<<< Updated upstream
    6f3e:	4802      	ldr	r0, [pc, #8]	; (6f48 <vApplicationStackOverflowHook+0xc>)
    6f40:	4b02      	ldr	r3, [pc, #8]	; (6f4c <vApplicationStackOverflowHook+0x10>)
    6f42:	4798      	blx	r3
    6f44:	e7fe      	b.n	6f44 <vApplicationStackOverflowHook+0x8>
    6f46:	46c0      	nop			; (mov r8, r8)
    6f48:	0000aa30 	.word	0x0000aa30
    6f4c:	0000572d 	.word	0x0000572d

00006f50 <__udivsi3>:
    6f50:	2200      	movs	r2, #0
    6f52:	0843      	lsrs	r3, r0, #1
    6f54:	428b      	cmp	r3, r1
    6f56:	d374      	bcc.n	7042 <__udivsi3+0xf2>
    6f58:	0903      	lsrs	r3, r0, #4
    6f5a:	428b      	cmp	r3, r1
    6f5c:	d35f      	bcc.n	701e <__udivsi3+0xce>
    6f5e:	0a03      	lsrs	r3, r0, #8
    6f60:	428b      	cmp	r3, r1
    6f62:	d344      	bcc.n	6fee <__udivsi3+0x9e>
    6f64:	0b03      	lsrs	r3, r0, #12
    6f66:	428b      	cmp	r3, r1
    6f68:	d328      	bcc.n	6fbc <__udivsi3+0x6c>
    6f6a:	0c03      	lsrs	r3, r0, #16
    6f6c:	428b      	cmp	r3, r1
    6f6e:	d30d      	bcc.n	6f8c <__udivsi3+0x3c>
    6f70:	22ff      	movs	r2, #255	; 0xff
    6f72:	0209      	lsls	r1, r1, #8
    6f74:	ba12      	rev	r2, r2
    6f76:	0c03      	lsrs	r3, r0, #16
    6f78:	428b      	cmp	r3, r1
    6f7a:	d302      	bcc.n	6f82 <__udivsi3+0x32>
    6f7c:	1212      	asrs	r2, r2, #8
    6f7e:	0209      	lsls	r1, r1, #8
    6f80:	d065      	beq.n	704e <__udivsi3+0xfe>
    6f82:	0b03      	lsrs	r3, r0, #12
    6f84:	428b      	cmp	r3, r1
    6f86:	d319      	bcc.n	6fbc <__udivsi3+0x6c>
    6f88:	e000      	b.n	6f8c <__udivsi3+0x3c>
    6f8a:	0a09      	lsrs	r1, r1, #8
    6f8c:	0bc3      	lsrs	r3, r0, #15
    6f8e:	428b      	cmp	r3, r1
    6f90:	d301      	bcc.n	6f96 <__udivsi3+0x46>
    6f92:	03cb      	lsls	r3, r1, #15
    6f94:	1ac0      	subs	r0, r0, r3
    6f96:	4152      	adcs	r2, r2
    6f98:	0b83      	lsrs	r3, r0, #14
    6f9a:	428b      	cmp	r3, r1
    6f9c:	d301      	bcc.n	6fa2 <__udivsi3+0x52>
    6f9e:	038b      	lsls	r3, r1, #14
    6fa0:	1ac0      	subs	r0, r0, r3
    6fa2:	4152      	adcs	r2, r2
    6fa4:	0b43      	lsrs	r3, r0, #13
    6fa6:	428b      	cmp	r3, r1
    6fa8:	d301      	bcc.n	6fae <__udivsi3+0x5e>
    6faa:	034b      	lsls	r3, r1, #13
    6fac:	1ac0      	subs	r0, r0, r3
    6fae:	4152      	adcs	r2, r2
    6fb0:	0b03      	lsrs	r3, r0, #12
    6fb2:	428b      	cmp	r3, r1
    6fb4:	d301      	bcc.n	6fba <__udivsi3+0x6a>
    6fb6:	030b      	lsls	r3, r1, #12
    6fb8:	1ac0      	subs	r0, r0, r3
    6fba:	4152      	adcs	r2, r2
    6fbc:	0ac3      	lsrs	r3, r0, #11
    6fbe:	428b      	cmp	r3, r1
    6fc0:	d301      	bcc.n	6fc6 <__udivsi3+0x76>
    6fc2:	02cb      	lsls	r3, r1, #11
    6fc4:	1ac0      	subs	r0, r0, r3
    6fc6:	4152      	adcs	r2, r2
    6fc8:	0a83      	lsrs	r3, r0, #10
    6fca:	428b      	cmp	r3, r1
    6fcc:	d301      	bcc.n	6fd2 <__udivsi3+0x82>
    6fce:	028b      	lsls	r3, r1, #10
    6fd0:	1ac0      	subs	r0, r0, r3
    6fd2:	4152      	adcs	r2, r2
    6fd4:	0a43      	lsrs	r3, r0, #9
    6fd6:	428b      	cmp	r3, r1
    6fd8:	d301      	bcc.n	6fde <__udivsi3+0x8e>
    6fda:	024b      	lsls	r3, r1, #9
    6fdc:	1ac0      	subs	r0, r0, r3
    6fde:	4152      	adcs	r2, r2
    6fe0:	0a03      	lsrs	r3, r0, #8
    6fe2:	428b      	cmp	r3, r1
    6fe4:	d301      	bcc.n	6fea <__udivsi3+0x9a>
    6fe6:	020b      	lsls	r3, r1, #8
    6fe8:	1ac0      	subs	r0, r0, r3
    6fea:	4152      	adcs	r2, r2
    6fec:	d2cd      	bcs.n	6f8a <__udivsi3+0x3a>
    6fee:	09c3      	lsrs	r3, r0, #7
    6ff0:	428b      	cmp	r3, r1
    6ff2:	d301      	bcc.n	6ff8 <__udivsi3+0xa8>
    6ff4:	01cb      	lsls	r3, r1, #7
    6ff6:	1ac0      	subs	r0, r0, r3
    6ff8:	4152      	adcs	r2, r2
    6ffa:	0983      	lsrs	r3, r0, #6
    6ffc:	428b      	cmp	r3, r1
    6ffe:	d301      	bcc.n	7004 <__udivsi3+0xb4>
    7000:	018b      	lsls	r3, r1, #6
    7002:	1ac0      	subs	r0, r0, r3
    7004:	4152      	adcs	r2, r2
    7006:	0943      	lsrs	r3, r0, #5
    7008:	428b      	cmp	r3, r1
    700a:	d301      	bcc.n	7010 <__udivsi3+0xc0>
    700c:	014b      	lsls	r3, r1, #5
    700e:	1ac0      	subs	r0, r0, r3
    7010:	4152      	adcs	r2, r2
    7012:	0903      	lsrs	r3, r0, #4
    7014:	428b      	cmp	r3, r1
    7016:	d301      	bcc.n	701c <__udivsi3+0xcc>
    7018:	010b      	lsls	r3, r1, #4
    701a:	1ac0      	subs	r0, r0, r3
    701c:	4152      	adcs	r2, r2
    701e:	08c3      	lsrs	r3, r0, #3
    7020:	428b      	cmp	r3, r1
    7022:	d301      	bcc.n	7028 <__udivsi3+0xd8>
    7024:	00cb      	lsls	r3, r1, #3
    7026:	1ac0      	subs	r0, r0, r3
    7028:	4152      	adcs	r2, r2
    702a:	0883      	lsrs	r3, r0, #2
    702c:	428b      	cmp	r3, r1
    702e:	d301      	bcc.n	7034 <__udivsi3+0xe4>
    7030:	008b      	lsls	r3, r1, #2
    7032:	1ac0      	subs	r0, r0, r3
    7034:	4152      	adcs	r2, r2
    7036:	0843      	lsrs	r3, r0, #1
    7038:	428b      	cmp	r3, r1
    703a:	d301      	bcc.n	7040 <__udivsi3+0xf0>
    703c:	004b      	lsls	r3, r1, #1
    703e:	1ac0      	subs	r0, r0, r3
    7040:	4152      	adcs	r2, r2
    7042:	1a41      	subs	r1, r0, r1
    7044:	d200      	bcs.n	7048 <__udivsi3+0xf8>
    7046:	4601      	mov	r1, r0
    7048:	4152      	adcs	r2, r2
    704a:	4610      	mov	r0, r2
    704c:	4770      	bx	lr
    704e:	e7ff      	b.n	7050 <__udivsi3+0x100>
    7050:	b501      	push	{r0, lr}
    7052:	2000      	movs	r0, #0
    7054:	f000 f806 	bl	7064 <__aeabi_idiv0>
    7058:	bd02      	pop	{r1, pc}
    705a:	46c0      	nop			; (mov r8, r8)

0000705c <__aeabi_uidivmod>:
    705c:	2900      	cmp	r1, #0
    705e:	d0f7      	beq.n	7050 <__udivsi3+0x100>
    7060:	e776      	b.n	6f50 <__udivsi3>
    7062:	4770      	bx	lr

00007064 <__aeabi_idiv0>:
    7064:	4770      	bx	lr
    7066:	46c0      	nop			; (mov r8, r8)

00007068 <__aeabi_lmul>:
    7068:	b5f0      	push	{r4, r5, r6, r7, lr}
    706a:	46ce      	mov	lr, r9
    706c:	4647      	mov	r7, r8
    706e:	0415      	lsls	r5, r2, #16
    7070:	0c2d      	lsrs	r5, r5, #16
    7072:	002e      	movs	r6, r5
    7074:	b580      	push	{r7, lr}
    7076:	0407      	lsls	r7, r0, #16
    7078:	0c14      	lsrs	r4, r2, #16
    707a:	0c3f      	lsrs	r7, r7, #16
    707c:	4699      	mov	r9, r3
    707e:	0c03      	lsrs	r3, r0, #16
    7080:	437e      	muls	r6, r7
    7082:	435d      	muls	r5, r3
    7084:	4367      	muls	r7, r4
    7086:	4363      	muls	r3, r4
    7088:	197f      	adds	r7, r7, r5
    708a:	0c34      	lsrs	r4, r6, #16
    708c:	19e4      	adds	r4, r4, r7
    708e:	469c      	mov	ip, r3
    7090:	42a5      	cmp	r5, r4
    7092:	d903      	bls.n	709c <__aeabi_lmul+0x34>
    7094:	2380      	movs	r3, #128	; 0x80
    7096:	025b      	lsls	r3, r3, #9
    7098:	4698      	mov	r8, r3
    709a:	44c4      	add	ip, r8
    709c:	464b      	mov	r3, r9
    709e:	4351      	muls	r1, r2
    70a0:	4343      	muls	r3, r0
    70a2:	0436      	lsls	r6, r6, #16
    70a4:	0c36      	lsrs	r6, r6, #16
    70a6:	0c25      	lsrs	r5, r4, #16
    70a8:	0424      	lsls	r4, r4, #16
    70aa:	4465      	add	r5, ip
    70ac:	19a4      	adds	r4, r4, r6
    70ae:	1859      	adds	r1, r3, r1
    70b0:	1949      	adds	r1, r1, r5
    70b2:	0020      	movs	r0, r4
    70b4:	bc0c      	pop	{r2, r3}
    70b6:	4690      	mov	r8, r2
    70b8:	4699      	mov	r9, r3
    70ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000070bc <__aeabi_fmul>:
    70bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70be:	4657      	mov	r7, sl
    70c0:	464e      	mov	r6, r9
    70c2:	4645      	mov	r5, r8
    70c4:	46de      	mov	lr, fp
    70c6:	b5e0      	push	{r5, r6, r7, lr}
    70c8:	0247      	lsls	r7, r0, #9
    70ca:	0046      	lsls	r6, r0, #1
    70cc:	4688      	mov	r8, r1
    70ce:	0a7f      	lsrs	r7, r7, #9
    70d0:	0e36      	lsrs	r6, r6, #24
    70d2:	0fc4      	lsrs	r4, r0, #31
    70d4:	2e00      	cmp	r6, #0
    70d6:	d047      	beq.n	7168 <__aeabi_fmul+0xac>
    70d8:	2eff      	cmp	r6, #255	; 0xff
    70da:	d024      	beq.n	7126 <__aeabi_fmul+0x6a>
    70dc:	00fb      	lsls	r3, r7, #3
    70de:	2780      	movs	r7, #128	; 0x80
    70e0:	04ff      	lsls	r7, r7, #19
    70e2:	431f      	orrs	r7, r3
    70e4:	2300      	movs	r3, #0
    70e6:	4699      	mov	r9, r3
    70e8:	469a      	mov	sl, r3
    70ea:	3e7f      	subs	r6, #127	; 0x7f
    70ec:	4643      	mov	r3, r8
    70ee:	025d      	lsls	r5, r3, #9
    70f0:	0058      	lsls	r0, r3, #1
    70f2:	0fdb      	lsrs	r3, r3, #31
    70f4:	0a6d      	lsrs	r5, r5, #9
    70f6:	0e00      	lsrs	r0, r0, #24
    70f8:	4698      	mov	r8, r3
    70fa:	d043      	beq.n	7184 <__aeabi_fmul+0xc8>
    70fc:	28ff      	cmp	r0, #255	; 0xff
    70fe:	d03b      	beq.n	7178 <__aeabi_fmul+0xbc>
    7100:	00eb      	lsls	r3, r5, #3
    7102:	2580      	movs	r5, #128	; 0x80
    7104:	2200      	movs	r2, #0
    7106:	04ed      	lsls	r5, r5, #19
    7108:	431d      	orrs	r5, r3
    710a:	387f      	subs	r0, #127	; 0x7f
    710c:	1836      	adds	r6, r6, r0
    710e:	1c73      	adds	r3, r6, #1
    7110:	4641      	mov	r1, r8
    7112:	469b      	mov	fp, r3
    7114:	464b      	mov	r3, r9
    7116:	4061      	eors	r1, r4
    7118:	4313      	orrs	r3, r2
    711a:	2b0f      	cmp	r3, #15
    711c:	d864      	bhi.n	71e8 <__aeabi_fmul+0x12c>
    711e:	4875      	ldr	r0, [pc, #468]	; (72f4 <__aeabi_fmul+0x238>)
    7120:	009b      	lsls	r3, r3, #2
    7122:	58c3      	ldr	r3, [r0, r3]
    7124:	469f      	mov	pc, r3
    7126:	2f00      	cmp	r7, #0
    7128:	d142      	bne.n	71b0 <__aeabi_fmul+0xf4>
    712a:	2308      	movs	r3, #8
    712c:	4699      	mov	r9, r3
    712e:	3b06      	subs	r3, #6
    7130:	26ff      	movs	r6, #255	; 0xff
    7132:	469a      	mov	sl, r3
    7134:	e7da      	b.n	70ec <__aeabi_fmul+0x30>
    7136:	4641      	mov	r1, r8
    7138:	2a02      	cmp	r2, #2
    713a:	d028      	beq.n	718e <__aeabi_fmul+0xd2>
    713c:	2a03      	cmp	r2, #3
    713e:	d100      	bne.n	7142 <__aeabi_fmul+0x86>
    7140:	e0ce      	b.n	72e0 <__aeabi_fmul+0x224>
    7142:	2a01      	cmp	r2, #1
    7144:	d000      	beq.n	7148 <__aeabi_fmul+0x8c>
    7146:	e0ac      	b.n	72a2 <__aeabi_fmul+0x1e6>
    7148:	4011      	ands	r1, r2
    714a:	2000      	movs	r0, #0
    714c:	2200      	movs	r2, #0
    714e:	b2cc      	uxtb	r4, r1
    7150:	0240      	lsls	r0, r0, #9
    7152:	05d2      	lsls	r2, r2, #23
    7154:	0a40      	lsrs	r0, r0, #9
    7156:	07e4      	lsls	r4, r4, #31
    7158:	4310      	orrs	r0, r2
    715a:	4320      	orrs	r0, r4
    715c:	bc3c      	pop	{r2, r3, r4, r5}
    715e:	4690      	mov	r8, r2
    7160:	4699      	mov	r9, r3
    7162:	46a2      	mov	sl, r4
    7164:	46ab      	mov	fp, r5
    7166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7168:	2f00      	cmp	r7, #0
    716a:	d115      	bne.n	7198 <__aeabi_fmul+0xdc>
    716c:	2304      	movs	r3, #4
    716e:	4699      	mov	r9, r3
    7170:	3b03      	subs	r3, #3
    7172:	2600      	movs	r6, #0
    7174:	469a      	mov	sl, r3
    7176:	e7b9      	b.n	70ec <__aeabi_fmul+0x30>
    7178:	20ff      	movs	r0, #255	; 0xff
    717a:	2202      	movs	r2, #2
    717c:	2d00      	cmp	r5, #0
    717e:	d0c5      	beq.n	710c <__aeabi_fmul+0x50>
    7180:	2203      	movs	r2, #3
    7182:	e7c3      	b.n	710c <__aeabi_fmul+0x50>
    7184:	2d00      	cmp	r5, #0
    7186:	d119      	bne.n	71bc <__aeabi_fmul+0x100>
    7188:	2000      	movs	r0, #0
    718a:	2201      	movs	r2, #1
    718c:	e7be      	b.n	710c <__aeabi_fmul+0x50>
    718e:	2401      	movs	r4, #1
    7190:	22ff      	movs	r2, #255	; 0xff
    7192:	400c      	ands	r4, r1
    7194:	2000      	movs	r0, #0
    7196:	e7db      	b.n	7150 <__aeabi_fmul+0x94>
    7198:	0038      	movs	r0, r7
    719a:	f001 fd65 	bl	8c68 <__clzsi2>
    719e:	2676      	movs	r6, #118	; 0x76
    71a0:	1f43      	subs	r3, r0, #5
    71a2:	409f      	lsls	r7, r3
    71a4:	2300      	movs	r3, #0
    71a6:	4276      	negs	r6, r6
    71a8:	1a36      	subs	r6, r6, r0
    71aa:	4699      	mov	r9, r3
    71ac:	469a      	mov	sl, r3
    71ae:	e79d      	b.n	70ec <__aeabi_fmul+0x30>
    71b0:	230c      	movs	r3, #12
    71b2:	4699      	mov	r9, r3
    71b4:	3b09      	subs	r3, #9
    71b6:	26ff      	movs	r6, #255	; 0xff
    71b8:	469a      	mov	sl, r3
    71ba:	e797      	b.n	70ec <__aeabi_fmul+0x30>
    71bc:	0028      	movs	r0, r5
    71be:	f001 fd53 	bl	8c68 <__clzsi2>
    71c2:	1f43      	subs	r3, r0, #5
    71c4:	409d      	lsls	r5, r3
    71c6:	2376      	movs	r3, #118	; 0x76
    71c8:	425b      	negs	r3, r3
    71ca:	1a18      	subs	r0, r3, r0
    71cc:	2200      	movs	r2, #0
    71ce:	e79d      	b.n	710c <__aeabi_fmul+0x50>
    71d0:	2080      	movs	r0, #128	; 0x80
    71d2:	2400      	movs	r4, #0
    71d4:	03c0      	lsls	r0, r0, #15
    71d6:	22ff      	movs	r2, #255	; 0xff
    71d8:	e7ba      	b.n	7150 <__aeabi_fmul+0x94>
    71da:	003d      	movs	r5, r7
    71dc:	4652      	mov	r2, sl
    71de:	e7ab      	b.n	7138 <__aeabi_fmul+0x7c>
    71e0:	003d      	movs	r5, r7
    71e2:	0021      	movs	r1, r4
    71e4:	4652      	mov	r2, sl
    71e6:	e7a7      	b.n	7138 <__aeabi_fmul+0x7c>
    71e8:	0c3b      	lsrs	r3, r7, #16
    71ea:	469c      	mov	ip, r3
    71ec:	042a      	lsls	r2, r5, #16
    71ee:	0c12      	lsrs	r2, r2, #16
    71f0:	0c2b      	lsrs	r3, r5, #16
    71f2:	0014      	movs	r4, r2
    71f4:	4660      	mov	r0, ip
    71f6:	4665      	mov	r5, ip
    71f8:	043f      	lsls	r7, r7, #16
    71fa:	0c3f      	lsrs	r7, r7, #16
    71fc:	437c      	muls	r4, r7
    71fe:	4342      	muls	r2, r0
    7200:	435d      	muls	r5, r3
    7202:	437b      	muls	r3, r7
    7204:	0c27      	lsrs	r7, r4, #16
    7206:	189b      	adds	r3, r3, r2
    7208:	18ff      	adds	r7, r7, r3
    720a:	42ba      	cmp	r2, r7
    720c:	d903      	bls.n	7216 <__aeabi_fmul+0x15a>
    720e:	2380      	movs	r3, #128	; 0x80
    7210:	025b      	lsls	r3, r3, #9
    7212:	469c      	mov	ip, r3
    7214:	4465      	add	r5, ip
    7216:	0424      	lsls	r4, r4, #16
    7218:	043a      	lsls	r2, r7, #16
    721a:	0c24      	lsrs	r4, r4, #16
    721c:	1912      	adds	r2, r2, r4
    721e:	0193      	lsls	r3, r2, #6
    7220:	1e5c      	subs	r4, r3, #1
    7222:	41a3      	sbcs	r3, r4
    7224:	0c3f      	lsrs	r7, r7, #16
    7226:	0e92      	lsrs	r2, r2, #26
    7228:	197d      	adds	r5, r7, r5
    722a:	431a      	orrs	r2, r3
    722c:	01ad      	lsls	r5, r5, #6
    722e:	4315      	orrs	r5, r2
    7230:	012b      	lsls	r3, r5, #4
    7232:	d504      	bpl.n	723e <__aeabi_fmul+0x182>
    7234:	2301      	movs	r3, #1
    7236:	465e      	mov	r6, fp
    7238:	086a      	lsrs	r2, r5, #1
    723a:	401d      	ands	r5, r3
    723c:	4315      	orrs	r5, r2
    723e:	0032      	movs	r2, r6
    7240:	327f      	adds	r2, #127	; 0x7f
    7242:	2a00      	cmp	r2, #0
    7244:	dd25      	ble.n	7292 <__aeabi_fmul+0x1d6>
    7246:	076b      	lsls	r3, r5, #29
    7248:	d004      	beq.n	7254 <__aeabi_fmul+0x198>
    724a:	230f      	movs	r3, #15
    724c:	402b      	ands	r3, r5
    724e:	2b04      	cmp	r3, #4
    7250:	d000      	beq.n	7254 <__aeabi_fmul+0x198>
    7252:	3504      	adds	r5, #4
    7254:	012b      	lsls	r3, r5, #4
    7256:	d503      	bpl.n	7260 <__aeabi_fmul+0x1a4>
    7258:	0032      	movs	r2, r6
    725a:	4b27      	ldr	r3, [pc, #156]	; (72f8 <__aeabi_fmul+0x23c>)
    725c:	3280      	adds	r2, #128	; 0x80
    725e:	401d      	ands	r5, r3
    7260:	2afe      	cmp	r2, #254	; 0xfe
    7262:	dc94      	bgt.n	718e <__aeabi_fmul+0xd2>
    7264:	2401      	movs	r4, #1
    7266:	01a8      	lsls	r0, r5, #6
    7268:	0a40      	lsrs	r0, r0, #9
    726a:	b2d2      	uxtb	r2, r2
    726c:	400c      	ands	r4, r1
    726e:	e76f      	b.n	7150 <__aeabi_fmul+0x94>
    7270:	2080      	movs	r0, #128	; 0x80
    7272:	03c0      	lsls	r0, r0, #15
    7274:	4207      	tst	r7, r0
    7276:	d007      	beq.n	7288 <__aeabi_fmul+0x1cc>
    7278:	4205      	tst	r5, r0
    727a:	d105      	bne.n	7288 <__aeabi_fmul+0x1cc>
    727c:	4328      	orrs	r0, r5
    727e:	0240      	lsls	r0, r0, #9
    7280:	0a40      	lsrs	r0, r0, #9
    7282:	4644      	mov	r4, r8
    7284:	22ff      	movs	r2, #255	; 0xff
    7286:	e763      	b.n	7150 <__aeabi_fmul+0x94>
    7288:	4338      	orrs	r0, r7
    728a:	0240      	lsls	r0, r0, #9
    728c:	0a40      	lsrs	r0, r0, #9
    728e:	22ff      	movs	r2, #255	; 0xff
    7290:	e75e      	b.n	7150 <__aeabi_fmul+0x94>
    7292:	2401      	movs	r4, #1
    7294:	1aa3      	subs	r3, r4, r2
    7296:	2b1b      	cmp	r3, #27
    7298:	dd05      	ble.n	72a6 <__aeabi_fmul+0x1ea>
    729a:	400c      	ands	r4, r1
    729c:	2200      	movs	r2, #0
    729e:	2000      	movs	r0, #0
    72a0:	e756      	b.n	7150 <__aeabi_fmul+0x94>
    72a2:	465e      	mov	r6, fp
    72a4:	e7cb      	b.n	723e <__aeabi_fmul+0x182>
    72a6:	002a      	movs	r2, r5
    72a8:	2020      	movs	r0, #32
    72aa:	40da      	lsrs	r2, r3
    72ac:	1ac3      	subs	r3, r0, r3
    72ae:	409d      	lsls	r5, r3
    72b0:	002b      	movs	r3, r5
    72b2:	1e5d      	subs	r5, r3, #1
    72b4:	41ab      	sbcs	r3, r5
    72b6:	4313      	orrs	r3, r2
    72b8:	075a      	lsls	r2, r3, #29
    72ba:	d004      	beq.n	72c6 <__aeabi_fmul+0x20a>
    72bc:	220f      	movs	r2, #15
    72be:	401a      	ands	r2, r3
    72c0:	2a04      	cmp	r2, #4
    72c2:	d000      	beq.n	72c6 <__aeabi_fmul+0x20a>
    72c4:	3304      	adds	r3, #4
    72c6:	015a      	lsls	r2, r3, #5
    72c8:	d504      	bpl.n	72d4 <__aeabi_fmul+0x218>
    72ca:	2401      	movs	r4, #1
    72cc:	2201      	movs	r2, #1
    72ce:	400c      	ands	r4, r1
    72d0:	2000      	movs	r0, #0
    72d2:	e73d      	b.n	7150 <__aeabi_fmul+0x94>
    72d4:	2401      	movs	r4, #1
    72d6:	019b      	lsls	r3, r3, #6
    72d8:	0a58      	lsrs	r0, r3, #9
    72da:	400c      	ands	r4, r1
    72dc:	2200      	movs	r2, #0
    72de:	e737      	b.n	7150 <__aeabi_fmul+0x94>
    72e0:	2080      	movs	r0, #128	; 0x80
    72e2:	2401      	movs	r4, #1
    72e4:	03c0      	lsls	r0, r0, #15
    72e6:	4328      	orrs	r0, r5
    72e8:	0240      	lsls	r0, r0, #9
    72ea:	0a40      	lsrs	r0, r0, #9
    72ec:	400c      	ands	r4, r1
    72ee:	22ff      	movs	r2, #255	; 0xff
    72f0:	e72e      	b.n	7150 <__aeabi_fmul+0x94>
    72f2:	46c0      	nop			; (mov r8, r8)
    72f4:	0000aa58 	.word	0x0000aa58
    72f8:	f7ffffff 	.word	0xf7ffffff

000072fc <__aeabi_f2iz>:
    72fc:	0241      	lsls	r1, r0, #9
    72fe:	0043      	lsls	r3, r0, #1
    7300:	0fc2      	lsrs	r2, r0, #31
    7302:	0a49      	lsrs	r1, r1, #9
    7304:	0e1b      	lsrs	r3, r3, #24
    7306:	2000      	movs	r0, #0
    7308:	2b7e      	cmp	r3, #126	; 0x7e
    730a:	dd0d      	ble.n	7328 <__aeabi_f2iz+0x2c>
    730c:	2b9d      	cmp	r3, #157	; 0x9d
    730e:	dc0c      	bgt.n	732a <__aeabi_f2iz+0x2e>
    7310:	2080      	movs	r0, #128	; 0x80
    7312:	0400      	lsls	r0, r0, #16
    7314:	4301      	orrs	r1, r0
    7316:	2b95      	cmp	r3, #149	; 0x95
    7318:	dc0a      	bgt.n	7330 <__aeabi_f2iz+0x34>
    731a:	2096      	movs	r0, #150	; 0x96
    731c:	1ac3      	subs	r3, r0, r3
    731e:	40d9      	lsrs	r1, r3
    7320:	4248      	negs	r0, r1
    7322:	2a00      	cmp	r2, #0
    7324:	d100      	bne.n	7328 <__aeabi_f2iz+0x2c>
    7326:	0008      	movs	r0, r1
    7328:	4770      	bx	lr
    732a:	4b03      	ldr	r3, [pc, #12]	; (7338 <__aeabi_f2iz+0x3c>)
    732c:	18d0      	adds	r0, r2, r3
    732e:	e7fb      	b.n	7328 <__aeabi_f2iz+0x2c>
    7330:	3b96      	subs	r3, #150	; 0x96
    7332:	4099      	lsls	r1, r3
    7334:	e7f4      	b.n	7320 <__aeabi_f2iz+0x24>
    7336:	46c0      	nop			; (mov r8, r8)
    7338:	7fffffff 	.word	0x7fffffff

0000733c <__aeabi_i2f>:
    733c:	b570      	push	{r4, r5, r6, lr}
    733e:	2800      	cmp	r0, #0
    7340:	d030      	beq.n	73a4 <__aeabi_i2f+0x68>
    7342:	17c3      	asrs	r3, r0, #31
    7344:	18c4      	adds	r4, r0, r3
    7346:	405c      	eors	r4, r3
    7348:	0fc5      	lsrs	r5, r0, #31
    734a:	0020      	movs	r0, r4
    734c:	f001 fc8c 	bl	8c68 <__clzsi2>
    7350:	239e      	movs	r3, #158	; 0x9e
    7352:	1a1b      	subs	r3, r3, r0
    7354:	2b96      	cmp	r3, #150	; 0x96
    7356:	dc0d      	bgt.n	7374 <__aeabi_i2f+0x38>
    7358:	2296      	movs	r2, #150	; 0x96
    735a:	1ad2      	subs	r2, r2, r3
    735c:	4094      	lsls	r4, r2
    735e:	002a      	movs	r2, r5
    7360:	0264      	lsls	r4, r4, #9
    7362:	0a64      	lsrs	r4, r4, #9
    7364:	b2db      	uxtb	r3, r3
    7366:	0264      	lsls	r4, r4, #9
    7368:	05db      	lsls	r3, r3, #23
    736a:	0a60      	lsrs	r0, r4, #9
    736c:	07d2      	lsls	r2, r2, #31
    736e:	4318      	orrs	r0, r3
    7370:	4310      	orrs	r0, r2
    7372:	bd70      	pop	{r4, r5, r6, pc}
    7374:	2b99      	cmp	r3, #153	; 0x99
    7376:	dc19      	bgt.n	73ac <__aeabi_i2f+0x70>
    7378:	2299      	movs	r2, #153	; 0x99
=======
    6f5e:	4802      	ldr	r0, [pc, #8]	; (6f68 <vApplicationStackOverflowHook+0xc>)
    6f60:	4b02      	ldr	r3, [pc, #8]	; (6f6c <vApplicationStackOverflowHook+0x10>)
    6f62:	4798      	blx	r3
    6f64:	e7fe      	b.n	6f64 <vApplicationStackOverflowHook+0x8>
    6f66:	46c0      	nop			; (mov r8, r8)
    6f68:	0000aa5c 	.word	0x0000aa5c
    6f6c:	0000574d 	.word	0x0000574d

00006f70 <__udivsi3>:
    6f70:	2200      	movs	r2, #0
    6f72:	0843      	lsrs	r3, r0, #1
    6f74:	428b      	cmp	r3, r1
    6f76:	d374      	bcc.n	7062 <__udivsi3+0xf2>
    6f78:	0903      	lsrs	r3, r0, #4
    6f7a:	428b      	cmp	r3, r1
    6f7c:	d35f      	bcc.n	703e <__udivsi3+0xce>
    6f7e:	0a03      	lsrs	r3, r0, #8
    6f80:	428b      	cmp	r3, r1
    6f82:	d344      	bcc.n	700e <__udivsi3+0x9e>
    6f84:	0b03      	lsrs	r3, r0, #12
    6f86:	428b      	cmp	r3, r1
    6f88:	d328      	bcc.n	6fdc <__udivsi3+0x6c>
    6f8a:	0c03      	lsrs	r3, r0, #16
    6f8c:	428b      	cmp	r3, r1
    6f8e:	d30d      	bcc.n	6fac <__udivsi3+0x3c>
    6f90:	22ff      	movs	r2, #255	; 0xff
    6f92:	0209      	lsls	r1, r1, #8
    6f94:	ba12      	rev	r2, r2
    6f96:	0c03      	lsrs	r3, r0, #16
    6f98:	428b      	cmp	r3, r1
    6f9a:	d302      	bcc.n	6fa2 <__udivsi3+0x32>
    6f9c:	1212      	asrs	r2, r2, #8
    6f9e:	0209      	lsls	r1, r1, #8
    6fa0:	d065      	beq.n	706e <__udivsi3+0xfe>
    6fa2:	0b03      	lsrs	r3, r0, #12
    6fa4:	428b      	cmp	r3, r1
    6fa6:	d319      	bcc.n	6fdc <__udivsi3+0x6c>
    6fa8:	e000      	b.n	6fac <__udivsi3+0x3c>
    6faa:	0a09      	lsrs	r1, r1, #8
    6fac:	0bc3      	lsrs	r3, r0, #15
    6fae:	428b      	cmp	r3, r1
    6fb0:	d301      	bcc.n	6fb6 <__udivsi3+0x46>
    6fb2:	03cb      	lsls	r3, r1, #15
    6fb4:	1ac0      	subs	r0, r0, r3
    6fb6:	4152      	adcs	r2, r2
    6fb8:	0b83      	lsrs	r3, r0, #14
    6fba:	428b      	cmp	r3, r1
    6fbc:	d301      	bcc.n	6fc2 <__udivsi3+0x52>
    6fbe:	038b      	lsls	r3, r1, #14
    6fc0:	1ac0      	subs	r0, r0, r3
    6fc2:	4152      	adcs	r2, r2
    6fc4:	0b43      	lsrs	r3, r0, #13
    6fc6:	428b      	cmp	r3, r1
    6fc8:	d301      	bcc.n	6fce <__udivsi3+0x5e>
    6fca:	034b      	lsls	r3, r1, #13
    6fcc:	1ac0      	subs	r0, r0, r3
    6fce:	4152      	adcs	r2, r2
    6fd0:	0b03      	lsrs	r3, r0, #12
    6fd2:	428b      	cmp	r3, r1
    6fd4:	d301      	bcc.n	6fda <__udivsi3+0x6a>
    6fd6:	030b      	lsls	r3, r1, #12
    6fd8:	1ac0      	subs	r0, r0, r3
    6fda:	4152      	adcs	r2, r2
    6fdc:	0ac3      	lsrs	r3, r0, #11
    6fde:	428b      	cmp	r3, r1
    6fe0:	d301      	bcc.n	6fe6 <__udivsi3+0x76>
    6fe2:	02cb      	lsls	r3, r1, #11
    6fe4:	1ac0      	subs	r0, r0, r3
    6fe6:	4152      	adcs	r2, r2
    6fe8:	0a83      	lsrs	r3, r0, #10
    6fea:	428b      	cmp	r3, r1
    6fec:	d301      	bcc.n	6ff2 <__udivsi3+0x82>
    6fee:	028b      	lsls	r3, r1, #10
    6ff0:	1ac0      	subs	r0, r0, r3
    6ff2:	4152      	adcs	r2, r2
    6ff4:	0a43      	lsrs	r3, r0, #9
    6ff6:	428b      	cmp	r3, r1
    6ff8:	d301      	bcc.n	6ffe <__udivsi3+0x8e>
    6ffa:	024b      	lsls	r3, r1, #9
    6ffc:	1ac0      	subs	r0, r0, r3
    6ffe:	4152      	adcs	r2, r2
    7000:	0a03      	lsrs	r3, r0, #8
    7002:	428b      	cmp	r3, r1
    7004:	d301      	bcc.n	700a <__udivsi3+0x9a>
    7006:	020b      	lsls	r3, r1, #8
    7008:	1ac0      	subs	r0, r0, r3
    700a:	4152      	adcs	r2, r2
    700c:	d2cd      	bcs.n	6faa <__udivsi3+0x3a>
    700e:	09c3      	lsrs	r3, r0, #7
    7010:	428b      	cmp	r3, r1
    7012:	d301      	bcc.n	7018 <__udivsi3+0xa8>
    7014:	01cb      	lsls	r3, r1, #7
    7016:	1ac0      	subs	r0, r0, r3
    7018:	4152      	adcs	r2, r2
    701a:	0983      	lsrs	r3, r0, #6
    701c:	428b      	cmp	r3, r1
    701e:	d301      	bcc.n	7024 <__udivsi3+0xb4>
    7020:	018b      	lsls	r3, r1, #6
    7022:	1ac0      	subs	r0, r0, r3
    7024:	4152      	adcs	r2, r2
    7026:	0943      	lsrs	r3, r0, #5
    7028:	428b      	cmp	r3, r1
    702a:	d301      	bcc.n	7030 <__udivsi3+0xc0>
    702c:	014b      	lsls	r3, r1, #5
    702e:	1ac0      	subs	r0, r0, r3
    7030:	4152      	adcs	r2, r2
    7032:	0903      	lsrs	r3, r0, #4
    7034:	428b      	cmp	r3, r1
    7036:	d301      	bcc.n	703c <__udivsi3+0xcc>
    7038:	010b      	lsls	r3, r1, #4
    703a:	1ac0      	subs	r0, r0, r3
    703c:	4152      	adcs	r2, r2
    703e:	08c3      	lsrs	r3, r0, #3
    7040:	428b      	cmp	r3, r1
    7042:	d301      	bcc.n	7048 <__udivsi3+0xd8>
    7044:	00cb      	lsls	r3, r1, #3
    7046:	1ac0      	subs	r0, r0, r3
    7048:	4152      	adcs	r2, r2
    704a:	0883      	lsrs	r3, r0, #2
    704c:	428b      	cmp	r3, r1
    704e:	d301      	bcc.n	7054 <__udivsi3+0xe4>
    7050:	008b      	lsls	r3, r1, #2
    7052:	1ac0      	subs	r0, r0, r3
    7054:	4152      	adcs	r2, r2
    7056:	0843      	lsrs	r3, r0, #1
    7058:	428b      	cmp	r3, r1
    705a:	d301      	bcc.n	7060 <__udivsi3+0xf0>
    705c:	004b      	lsls	r3, r1, #1
    705e:	1ac0      	subs	r0, r0, r3
    7060:	4152      	adcs	r2, r2
    7062:	1a41      	subs	r1, r0, r1
    7064:	d200      	bcs.n	7068 <__udivsi3+0xf8>
    7066:	4601      	mov	r1, r0
    7068:	4152      	adcs	r2, r2
    706a:	4610      	mov	r0, r2
    706c:	4770      	bx	lr
    706e:	e7ff      	b.n	7070 <__udivsi3+0x100>
    7070:	b501      	push	{r0, lr}
    7072:	2000      	movs	r0, #0
    7074:	f000 f806 	bl	7084 <__aeabi_idiv0>
    7078:	bd02      	pop	{r1, pc}
    707a:	46c0      	nop			; (mov r8, r8)

0000707c <__aeabi_uidivmod>:
    707c:	2900      	cmp	r1, #0
    707e:	d0f7      	beq.n	7070 <__udivsi3+0x100>
    7080:	e776      	b.n	6f70 <__udivsi3>
    7082:	4770      	bx	lr

00007084 <__aeabi_idiv0>:
    7084:	4770      	bx	lr
    7086:	46c0      	nop			; (mov r8, r8)

00007088 <__aeabi_lmul>:
    7088:	b5f0      	push	{r4, r5, r6, r7, lr}
    708a:	46ce      	mov	lr, r9
    708c:	4647      	mov	r7, r8
    708e:	0415      	lsls	r5, r2, #16
    7090:	0c2d      	lsrs	r5, r5, #16
    7092:	002e      	movs	r6, r5
    7094:	b580      	push	{r7, lr}
    7096:	0407      	lsls	r7, r0, #16
    7098:	0c14      	lsrs	r4, r2, #16
    709a:	0c3f      	lsrs	r7, r7, #16
    709c:	4699      	mov	r9, r3
    709e:	0c03      	lsrs	r3, r0, #16
    70a0:	437e      	muls	r6, r7
    70a2:	435d      	muls	r5, r3
    70a4:	4367      	muls	r7, r4
    70a6:	4363      	muls	r3, r4
    70a8:	197f      	adds	r7, r7, r5
    70aa:	0c34      	lsrs	r4, r6, #16
    70ac:	19e4      	adds	r4, r4, r7
    70ae:	469c      	mov	ip, r3
    70b0:	42a5      	cmp	r5, r4
    70b2:	d903      	bls.n	70bc <__aeabi_lmul+0x34>
    70b4:	2380      	movs	r3, #128	; 0x80
    70b6:	025b      	lsls	r3, r3, #9
    70b8:	4698      	mov	r8, r3
    70ba:	44c4      	add	ip, r8
    70bc:	464b      	mov	r3, r9
    70be:	4351      	muls	r1, r2
    70c0:	4343      	muls	r3, r0
    70c2:	0436      	lsls	r6, r6, #16
    70c4:	0c36      	lsrs	r6, r6, #16
    70c6:	0c25      	lsrs	r5, r4, #16
    70c8:	0424      	lsls	r4, r4, #16
    70ca:	4465      	add	r5, ip
    70cc:	19a4      	adds	r4, r4, r6
    70ce:	1859      	adds	r1, r3, r1
    70d0:	1949      	adds	r1, r1, r5
    70d2:	0020      	movs	r0, r4
    70d4:	bc0c      	pop	{r2, r3}
    70d6:	4690      	mov	r8, r2
    70d8:	4699      	mov	r9, r3
    70da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000070dc <__aeabi_fmul>:
    70dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70de:	4657      	mov	r7, sl
    70e0:	464e      	mov	r6, r9
    70e2:	4645      	mov	r5, r8
    70e4:	46de      	mov	lr, fp
    70e6:	b5e0      	push	{r5, r6, r7, lr}
    70e8:	0247      	lsls	r7, r0, #9
    70ea:	0046      	lsls	r6, r0, #1
    70ec:	4688      	mov	r8, r1
    70ee:	0a7f      	lsrs	r7, r7, #9
    70f0:	0e36      	lsrs	r6, r6, #24
    70f2:	0fc4      	lsrs	r4, r0, #31
    70f4:	2e00      	cmp	r6, #0
    70f6:	d047      	beq.n	7188 <__aeabi_fmul+0xac>
    70f8:	2eff      	cmp	r6, #255	; 0xff
    70fa:	d024      	beq.n	7146 <__aeabi_fmul+0x6a>
    70fc:	00fb      	lsls	r3, r7, #3
    70fe:	2780      	movs	r7, #128	; 0x80
    7100:	04ff      	lsls	r7, r7, #19
    7102:	431f      	orrs	r7, r3
    7104:	2300      	movs	r3, #0
    7106:	4699      	mov	r9, r3
    7108:	469a      	mov	sl, r3
    710a:	3e7f      	subs	r6, #127	; 0x7f
    710c:	4643      	mov	r3, r8
    710e:	025d      	lsls	r5, r3, #9
    7110:	0058      	lsls	r0, r3, #1
    7112:	0fdb      	lsrs	r3, r3, #31
    7114:	0a6d      	lsrs	r5, r5, #9
    7116:	0e00      	lsrs	r0, r0, #24
    7118:	4698      	mov	r8, r3
    711a:	d043      	beq.n	71a4 <__aeabi_fmul+0xc8>
    711c:	28ff      	cmp	r0, #255	; 0xff
    711e:	d03b      	beq.n	7198 <__aeabi_fmul+0xbc>
    7120:	00eb      	lsls	r3, r5, #3
    7122:	2580      	movs	r5, #128	; 0x80
    7124:	2200      	movs	r2, #0
    7126:	04ed      	lsls	r5, r5, #19
    7128:	431d      	orrs	r5, r3
    712a:	387f      	subs	r0, #127	; 0x7f
    712c:	1836      	adds	r6, r6, r0
    712e:	1c73      	adds	r3, r6, #1
    7130:	4641      	mov	r1, r8
    7132:	469b      	mov	fp, r3
    7134:	464b      	mov	r3, r9
    7136:	4061      	eors	r1, r4
    7138:	4313      	orrs	r3, r2
    713a:	2b0f      	cmp	r3, #15
    713c:	d864      	bhi.n	7208 <__aeabi_fmul+0x12c>
    713e:	4875      	ldr	r0, [pc, #468]	; (7314 <__aeabi_fmul+0x238>)
    7140:	009b      	lsls	r3, r3, #2
    7142:	58c3      	ldr	r3, [r0, r3]
    7144:	469f      	mov	pc, r3
    7146:	2f00      	cmp	r7, #0
    7148:	d142      	bne.n	71d0 <__aeabi_fmul+0xf4>
    714a:	2308      	movs	r3, #8
    714c:	4699      	mov	r9, r3
    714e:	3b06      	subs	r3, #6
    7150:	26ff      	movs	r6, #255	; 0xff
    7152:	469a      	mov	sl, r3
    7154:	e7da      	b.n	710c <__aeabi_fmul+0x30>
    7156:	4641      	mov	r1, r8
    7158:	2a02      	cmp	r2, #2
    715a:	d028      	beq.n	71ae <__aeabi_fmul+0xd2>
    715c:	2a03      	cmp	r2, #3
    715e:	d100      	bne.n	7162 <__aeabi_fmul+0x86>
    7160:	e0ce      	b.n	7300 <__aeabi_fmul+0x224>
    7162:	2a01      	cmp	r2, #1
    7164:	d000      	beq.n	7168 <__aeabi_fmul+0x8c>
    7166:	e0ac      	b.n	72c2 <__aeabi_fmul+0x1e6>
    7168:	4011      	ands	r1, r2
    716a:	2000      	movs	r0, #0
    716c:	2200      	movs	r2, #0
    716e:	b2cc      	uxtb	r4, r1
    7170:	0240      	lsls	r0, r0, #9
    7172:	05d2      	lsls	r2, r2, #23
    7174:	0a40      	lsrs	r0, r0, #9
    7176:	07e4      	lsls	r4, r4, #31
    7178:	4310      	orrs	r0, r2
    717a:	4320      	orrs	r0, r4
    717c:	bc3c      	pop	{r2, r3, r4, r5}
    717e:	4690      	mov	r8, r2
    7180:	4699      	mov	r9, r3
    7182:	46a2      	mov	sl, r4
    7184:	46ab      	mov	fp, r5
    7186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7188:	2f00      	cmp	r7, #0
    718a:	d115      	bne.n	71b8 <__aeabi_fmul+0xdc>
    718c:	2304      	movs	r3, #4
    718e:	4699      	mov	r9, r3
    7190:	3b03      	subs	r3, #3
    7192:	2600      	movs	r6, #0
    7194:	469a      	mov	sl, r3
    7196:	e7b9      	b.n	710c <__aeabi_fmul+0x30>
    7198:	20ff      	movs	r0, #255	; 0xff
    719a:	2202      	movs	r2, #2
    719c:	2d00      	cmp	r5, #0
    719e:	d0c5      	beq.n	712c <__aeabi_fmul+0x50>
    71a0:	2203      	movs	r2, #3
    71a2:	e7c3      	b.n	712c <__aeabi_fmul+0x50>
    71a4:	2d00      	cmp	r5, #0
    71a6:	d119      	bne.n	71dc <__aeabi_fmul+0x100>
    71a8:	2000      	movs	r0, #0
    71aa:	2201      	movs	r2, #1
    71ac:	e7be      	b.n	712c <__aeabi_fmul+0x50>
    71ae:	2401      	movs	r4, #1
    71b0:	22ff      	movs	r2, #255	; 0xff
    71b2:	400c      	ands	r4, r1
    71b4:	2000      	movs	r0, #0
    71b6:	e7db      	b.n	7170 <__aeabi_fmul+0x94>
    71b8:	0038      	movs	r0, r7
    71ba:	f001 fd65 	bl	8c88 <__clzsi2>
    71be:	2676      	movs	r6, #118	; 0x76
    71c0:	1f43      	subs	r3, r0, #5
    71c2:	409f      	lsls	r7, r3
    71c4:	2300      	movs	r3, #0
    71c6:	4276      	negs	r6, r6
    71c8:	1a36      	subs	r6, r6, r0
    71ca:	4699      	mov	r9, r3
    71cc:	469a      	mov	sl, r3
    71ce:	e79d      	b.n	710c <__aeabi_fmul+0x30>
    71d0:	230c      	movs	r3, #12
    71d2:	4699      	mov	r9, r3
    71d4:	3b09      	subs	r3, #9
    71d6:	26ff      	movs	r6, #255	; 0xff
    71d8:	469a      	mov	sl, r3
    71da:	e797      	b.n	710c <__aeabi_fmul+0x30>
    71dc:	0028      	movs	r0, r5
    71de:	f001 fd53 	bl	8c88 <__clzsi2>
    71e2:	1f43      	subs	r3, r0, #5
    71e4:	409d      	lsls	r5, r3
    71e6:	2376      	movs	r3, #118	; 0x76
    71e8:	425b      	negs	r3, r3
    71ea:	1a18      	subs	r0, r3, r0
    71ec:	2200      	movs	r2, #0
    71ee:	e79d      	b.n	712c <__aeabi_fmul+0x50>
    71f0:	2080      	movs	r0, #128	; 0x80
    71f2:	2400      	movs	r4, #0
    71f4:	03c0      	lsls	r0, r0, #15
    71f6:	22ff      	movs	r2, #255	; 0xff
    71f8:	e7ba      	b.n	7170 <__aeabi_fmul+0x94>
    71fa:	003d      	movs	r5, r7
    71fc:	4652      	mov	r2, sl
    71fe:	e7ab      	b.n	7158 <__aeabi_fmul+0x7c>
    7200:	003d      	movs	r5, r7
    7202:	0021      	movs	r1, r4
    7204:	4652      	mov	r2, sl
    7206:	e7a7      	b.n	7158 <__aeabi_fmul+0x7c>
    7208:	0c3b      	lsrs	r3, r7, #16
    720a:	469c      	mov	ip, r3
    720c:	042a      	lsls	r2, r5, #16
    720e:	0c12      	lsrs	r2, r2, #16
    7210:	0c2b      	lsrs	r3, r5, #16
    7212:	0014      	movs	r4, r2
    7214:	4660      	mov	r0, ip
    7216:	4665      	mov	r5, ip
    7218:	043f      	lsls	r7, r7, #16
    721a:	0c3f      	lsrs	r7, r7, #16
    721c:	437c      	muls	r4, r7
    721e:	4342      	muls	r2, r0
    7220:	435d      	muls	r5, r3
    7222:	437b      	muls	r3, r7
    7224:	0c27      	lsrs	r7, r4, #16
    7226:	189b      	adds	r3, r3, r2
    7228:	18ff      	adds	r7, r7, r3
    722a:	42ba      	cmp	r2, r7
    722c:	d903      	bls.n	7236 <__aeabi_fmul+0x15a>
    722e:	2380      	movs	r3, #128	; 0x80
    7230:	025b      	lsls	r3, r3, #9
    7232:	469c      	mov	ip, r3
    7234:	4465      	add	r5, ip
    7236:	0424      	lsls	r4, r4, #16
    7238:	043a      	lsls	r2, r7, #16
    723a:	0c24      	lsrs	r4, r4, #16
    723c:	1912      	adds	r2, r2, r4
    723e:	0193      	lsls	r3, r2, #6
    7240:	1e5c      	subs	r4, r3, #1
    7242:	41a3      	sbcs	r3, r4
    7244:	0c3f      	lsrs	r7, r7, #16
    7246:	0e92      	lsrs	r2, r2, #26
    7248:	197d      	adds	r5, r7, r5
    724a:	431a      	orrs	r2, r3
    724c:	01ad      	lsls	r5, r5, #6
    724e:	4315      	orrs	r5, r2
    7250:	012b      	lsls	r3, r5, #4
    7252:	d504      	bpl.n	725e <__aeabi_fmul+0x182>
    7254:	2301      	movs	r3, #1
    7256:	465e      	mov	r6, fp
    7258:	086a      	lsrs	r2, r5, #1
    725a:	401d      	ands	r5, r3
    725c:	4315      	orrs	r5, r2
    725e:	0032      	movs	r2, r6
    7260:	327f      	adds	r2, #127	; 0x7f
    7262:	2a00      	cmp	r2, #0
    7264:	dd25      	ble.n	72b2 <__aeabi_fmul+0x1d6>
    7266:	076b      	lsls	r3, r5, #29
    7268:	d004      	beq.n	7274 <__aeabi_fmul+0x198>
    726a:	230f      	movs	r3, #15
    726c:	402b      	ands	r3, r5
    726e:	2b04      	cmp	r3, #4
    7270:	d000      	beq.n	7274 <__aeabi_fmul+0x198>
    7272:	3504      	adds	r5, #4
    7274:	012b      	lsls	r3, r5, #4
    7276:	d503      	bpl.n	7280 <__aeabi_fmul+0x1a4>
    7278:	0032      	movs	r2, r6
    727a:	4b27      	ldr	r3, [pc, #156]	; (7318 <__aeabi_fmul+0x23c>)
    727c:	3280      	adds	r2, #128	; 0x80
    727e:	401d      	ands	r5, r3
    7280:	2afe      	cmp	r2, #254	; 0xfe
    7282:	dc94      	bgt.n	71ae <__aeabi_fmul+0xd2>
    7284:	2401      	movs	r4, #1
    7286:	01a8      	lsls	r0, r5, #6
    7288:	0a40      	lsrs	r0, r0, #9
    728a:	b2d2      	uxtb	r2, r2
    728c:	400c      	ands	r4, r1
    728e:	e76f      	b.n	7170 <__aeabi_fmul+0x94>
    7290:	2080      	movs	r0, #128	; 0x80
    7292:	03c0      	lsls	r0, r0, #15
    7294:	4207      	tst	r7, r0
    7296:	d007      	beq.n	72a8 <__aeabi_fmul+0x1cc>
    7298:	4205      	tst	r5, r0
    729a:	d105      	bne.n	72a8 <__aeabi_fmul+0x1cc>
    729c:	4328      	orrs	r0, r5
    729e:	0240      	lsls	r0, r0, #9
    72a0:	0a40      	lsrs	r0, r0, #9
    72a2:	4644      	mov	r4, r8
    72a4:	22ff      	movs	r2, #255	; 0xff
    72a6:	e763      	b.n	7170 <__aeabi_fmul+0x94>
    72a8:	4338      	orrs	r0, r7
    72aa:	0240      	lsls	r0, r0, #9
    72ac:	0a40      	lsrs	r0, r0, #9
    72ae:	22ff      	movs	r2, #255	; 0xff
    72b0:	e75e      	b.n	7170 <__aeabi_fmul+0x94>
    72b2:	2401      	movs	r4, #1
    72b4:	1aa3      	subs	r3, r4, r2
    72b6:	2b1b      	cmp	r3, #27
    72b8:	dd05      	ble.n	72c6 <__aeabi_fmul+0x1ea>
    72ba:	400c      	ands	r4, r1
    72bc:	2200      	movs	r2, #0
    72be:	2000      	movs	r0, #0
    72c0:	e756      	b.n	7170 <__aeabi_fmul+0x94>
    72c2:	465e      	mov	r6, fp
    72c4:	e7cb      	b.n	725e <__aeabi_fmul+0x182>
    72c6:	002a      	movs	r2, r5
    72c8:	2020      	movs	r0, #32
    72ca:	40da      	lsrs	r2, r3
    72cc:	1ac3      	subs	r3, r0, r3
    72ce:	409d      	lsls	r5, r3
    72d0:	002b      	movs	r3, r5
    72d2:	1e5d      	subs	r5, r3, #1
    72d4:	41ab      	sbcs	r3, r5
    72d6:	4313      	orrs	r3, r2
    72d8:	075a      	lsls	r2, r3, #29
    72da:	d004      	beq.n	72e6 <__aeabi_fmul+0x20a>
    72dc:	220f      	movs	r2, #15
    72de:	401a      	ands	r2, r3
    72e0:	2a04      	cmp	r2, #4
    72e2:	d000      	beq.n	72e6 <__aeabi_fmul+0x20a>
    72e4:	3304      	adds	r3, #4
    72e6:	015a      	lsls	r2, r3, #5
    72e8:	d504      	bpl.n	72f4 <__aeabi_fmul+0x218>
    72ea:	2401      	movs	r4, #1
    72ec:	2201      	movs	r2, #1
    72ee:	400c      	ands	r4, r1
    72f0:	2000      	movs	r0, #0
    72f2:	e73d      	b.n	7170 <__aeabi_fmul+0x94>
    72f4:	2401      	movs	r4, #1
    72f6:	019b      	lsls	r3, r3, #6
    72f8:	0a58      	lsrs	r0, r3, #9
    72fa:	400c      	ands	r4, r1
    72fc:	2200      	movs	r2, #0
    72fe:	e737      	b.n	7170 <__aeabi_fmul+0x94>
    7300:	2080      	movs	r0, #128	; 0x80
    7302:	2401      	movs	r4, #1
    7304:	03c0      	lsls	r0, r0, #15
    7306:	4328      	orrs	r0, r5
    7308:	0240      	lsls	r0, r0, #9
    730a:	0a40      	lsrs	r0, r0, #9
    730c:	400c      	ands	r4, r1
    730e:	22ff      	movs	r2, #255	; 0xff
    7310:	e72e      	b.n	7170 <__aeabi_fmul+0x94>
    7312:	46c0      	nop			; (mov r8, r8)
    7314:	0000aa84 	.word	0x0000aa84
    7318:	f7ffffff 	.word	0xf7ffffff

0000731c <__aeabi_f2iz>:
    731c:	0241      	lsls	r1, r0, #9
    731e:	0043      	lsls	r3, r0, #1
    7320:	0fc2      	lsrs	r2, r0, #31
    7322:	0a49      	lsrs	r1, r1, #9
    7324:	0e1b      	lsrs	r3, r3, #24
    7326:	2000      	movs	r0, #0
    7328:	2b7e      	cmp	r3, #126	; 0x7e
    732a:	dd0d      	ble.n	7348 <__aeabi_f2iz+0x2c>
    732c:	2b9d      	cmp	r3, #157	; 0x9d
    732e:	dc0c      	bgt.n	734a <__aeabi_f2iz+0x2e>
    7330:	2080      	movs	r0, #128	; 0x80
    7332:	0400      	lsls	r0, r0, #16
    7334:	4301      	orrs	r1, r0
    7336:	2b95      	cmp	r3, #149	; 0x95
    7338:	dc0a      	bgt.n	7350 <__aeabi_f2iz+0x34>
    733a:	2096      	movs	r0, #150	; 0x96
    733c:	1ac3      	subs	r3, r0, r3
    733e:	40d9      	lsrs	r1, r3
    7340:	4248      	negs	r0, r1
    7342:	2a00      	cmp	r2, #0
    7344:	d100      	bne.n	7348 <__aeabi_f2iz+0x2c>
    7346:	0008      	movs	r0, r1
    7348:	4770      	bx	lr
    734a:	4b03      	ldr	r3, [pc, #12]	; (7358 <__aeabi_f2iz+0x3c>)
    734c:	18d0      	adds	r0, r2, r3
    734e:	e7fb      	b.n	7348 <__aeabi_f2iz+0x2c>
    7350:	3b96      	subs	r3, #150	; 0x96
    7352:	4099      	lsls	r1, r3
    7354:	e7f4      	b.n	7340 <__aeabi_f2iz+0x24>
    7356:	46c0      	nop			; (mov r8, r8)
    7358:	7fffffff 	.word	0x7fffffff

0000735c <__aeabi_i2f>:
    735c:	b570      	push	{r4, r5, r6, lr}
    735e:	2800      	cmp	r0, #0
    7360:	d030      	beq.n	73c4 <__aeabi_i2f+0x68>
    7362:	17c3      	asrs	r3, r0, #31
    7364:	18c4      	adds	r4, r0, r3
    7366:	405c      	eors	r4, r3
    7368:	0fc5      	lsrs	r5, r0, #31
    736a:	0020      	movs	r0, r4
    736c:	f001 fc8c 	bl	8c88 <__clzsi2>
    7370:	239e      	movs	r3, #158	; 0x9e
    7372:	1a1b      	subs	r3, r3, r0
    7374:	2b96      	cmp	r3, #150	; 0x96
    7376:	dc0d      	bgt.n	7394 <__aeabi_i2f+0x38>
    7378:	2296      	movs	r2, #150	; 0x96
>>>>>>> Stashed changes
    737a:	1ad2      	subs	r2, r2, r3
    737c:	4094      	lsls	r4, r2
    737e:	002a      	movs	r2, r5
    7380:	0264      	lsls	r4, r4, #9
    7382:	0a64      	lsrs	r4, r4, #9
    7384:	b2db      	uxtb	r3, r3
    7386:	0264      	lsls	r4, r4, #9
    7388:	05db      	lsls	r3, r3, #23
    738a:	0a60      	lsrs	r0, r4, #9
    738c:	07d2      	lsls	r2, r2, #31
    738e:	4318      	orrs	r0, r3
    7390:	4310      	orrs	r0, r2
    7392:	bd70      	pop	{r4, r5, r6, pc}
    7394:	2b99      	cmp	r3, #153	; 0x99
    7396:	dc19      	bgt.n	73cc <__aeabi_i2f+0x70>
    7398:	2299      	movs	r2, #153	; 0x99
    739a:	1ad2      	subs	r2, r2, r3
    739c:	2a00      	cmp	r2, #0
    739e:	dd29      	ble.n	73f4 <__aeabi_i2f+0x98>
    73a0:	4094      	lsls	r4, r2
    73a2:	0022      	movs	r2, r4
    73a4:	4c14      	ldr	r4, [pc, #80]	; (73f8 <__aeabi_i2f+0x9c>)
    73a6:	4014      	ands	r4, r2
    73a8:	0751      	lsls	r1, r2, #29
    73aa:	d004      	beq.n	73b6 <__aeabi_i2f+0x5a>
    73ac:	210f      	movs	r1, #15
    73ae:	400a      	ands	r2, r1
    73b0:	2a04      	cmp	r2, #4
    73b2:	d000      	beq.n	73b6 <__aeabi_i2f+0x5a>
    73b4:	3404      	adds	r4, #4
    73b6:	0162      	lsls	r2, r4, #5
    73b8:	d413      	bmi.n	73e2 <__aeabi_i2f+0x86>
    73ba:	01a4      	lsls	r4, r4, #6
    73bc:	0a64      	lsrs	r4, r4, #9
    73be:	b2db      	uxtb	r3, r3
    73c0:	002a      	movs	r2, r5
    73c2:	e7e0      	b.n	7386 <__aeabi_i2f+0x2a>
    73c4:	2200      	movs	r2, #0
    73c6:	2300      	movs	r3, #0
    73c8:	2400      	movs	r4, #0
    73ca:	e7dc      	b.n	7386 <__aeabi_i2f+0x2a>
    73cc:	2205      	movs	r2, #5
    73ce:	0021      	movs	r1, r4
    73d0:	1a12      	subs	r2, r2, r0
    73d2:	40d1      	lsrs	r1, r2
    73d4:	22b9      	movs	r2, #185	; 0xb9
    73d6:	1ad2      	subs	r2, r2, r3
    73d8:	4094      	lsls	r4, r2
    73da:	1e62      	subs	r2, r4, #1
    73dc:	4194      	sbcs	r4, r2
    73de:	430c      	orrs	r4, r1
    73e0:	e7da      	b.n	7398 <__aeabi_i2f+0x3c>
    73e2:	4b05      	ldr	r3, [pc, #20]	; (73f8 <__aeabi_i2f+0x9c>)
    73e4:	002a      	movs	r2, r5
    73e6:	401c      	ands	r4, r3
    73e8:	239f      	movs	r3, #159	; 0x9f
    73ea:	01a4      	lsls	r4, r4, #6
    73ec:	1a1b      	subs	r3, r3, r0
    73ee:	0a64      	lsrs	r4, r4, #9
    73f0:	b2db      	uxtb	r3, r3
    73f2:	e7c8      	b.n	7386 <__aeabi_i2f+0x2a>
    73f4:	0022      	movs	r2, r4
    73f6:	e7d5      	b.n	73a4 <__aeabi_i2f+0x48>
    73f8:	fbffffff 	.word	0xfbffffff

000073fc <__aeabi_dadd>:
    73fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73fe:	4645      	mov	r5, r8
    7400:	46de      	mov	lr, fp
    7402:	4657      	mov	r7, sl
    7404:	464e      	mov	r6, r9
    7406:	030c      	lsls	r4, r1, #12
    7408:	b5e0      	push	{r5, r6, r7, lr}
    740a:	004e      	lsls	r6, r1, #1
    740c:	0fc9      	lsrs	r1, r1, #31
    740e:	4688      	mov	r8, r1
    7410:	000d      	movs	r5, r1
    7412:	0a61      	lsrs	r1, r4, #9
    7414:	0f44      	lsrs	r4, r0, #29
    7416:	430c      	orrs	r4, r1
    7418:	00c7      	lsls	r7, r0, #3
    741a:	0319      	lsls	r1, r3, #12
    741c:	0058      	lsls	r0, r3, #1
    741e:	0fdb      	lsrs	r3, r3, #31
    7420:	469b      	mov	fp, r3
    7422:	0a4b      	lsrs	r3, r1, #9
    7424:	0f51      	lsrs	r1, r2, #29
    7426:	430b      	orrs	r3, r1
    7428:	0d76      	lsrs	r6, r6, #21
    742a:	0d40      	lsrs	r0, r0, #21
    742c:	0019      	movs	r1, r3
    742e:	00d2      	lsls	r2, r2, #3
    7430:	45d8      	cmp	r8, fp
    7432:	d100      	bne.n	7436 <__aeabi_dadd+0x3a>
    7434:	e0ae      	b.n	7594 <__aeabi_dadd+0x198>
    7436:	1a35      	subs	r5, r6, r0
    7438:	2d00      	cmp	r5, #0
    743a:	dc00      	bgt.n	743e <__aeabi_dadd+0x42>
    743c:	e0f6      	b.n	762c <__aeabi_dadd+0x230>
    743e:	2800      	cmp	r0, #0
    7440:	d10f      	bne.n	7462 <__aeabi_dadd+0x66>
    7442:	4313      	orrs	r3, r2
    7444:	d100      	bne.n	7448 <__aeabi_dadd+0x4c>
    7446:	e0db      	b.n	7600 <__aeabi_dadd+0x204>
    7448:	1e6b      	subs	r3, r5, #1
    744a:	2b00      	cmp	r3, #0
    744c:	d000      	beq.n	7450 <__aeabi_dadd+0x54>
    744e:	e137      	b.n	76c0 <__aeabi_dadd+0x2c4>
    7450:	1aba      	subs	r2, r7, r2
    7452:	4297      	cmp	r7, r2
    7454:	41bf      	sbcs	r7, r7
    7456:	1a64      	subs	r4, r4, r1
    7458:	427f      	negs	r7, r7
    745a:	1be4      	subs	r4, r4, r7
    745c:	2601      	movs	r6, #1
    745e:	0017      	movs	r7, r2
    7460:	e024      	b.n	74ac <__aeabi_dadd+0xb0>
    7462:	4bc6      	ldr	r3, [pc, #792]	; (777c <__aeabi_dadd+0x380>)
    7464:	429e      	cmp	r6, r3
    7466:	d04d      	beq.n	7504 <__aeabi_dadd+0x108>
    7468:	2380      	movs	r3, #128	; 0x80
    746a:	041b      	lsls	r3, r3, #16
    746c:	4319      	orrs	r1, r3
    746e:	2d38      	cmp	r5, #56	; 0x38
    7470:	dd00      	ble.n	7474 <__aeabi_dadd+0x78>
    7472:	e107      	b.n	7684 <__aeabi_dadd+0x288>
    7474:	2d1f      	cmp	r5, #31
    7476:	dd00      	ble.n	747a <__aeabi_dadd+0x7e>
    7478:	e138      	b.n	76ec <__aeabi_dadd+0x2f0>
    747a:	2020      	movs	r0, #32
    747c:	1b43      	subs	r3, r0, r5
    747e:	469a      	mov	sl, r3
    7480:	000b      	movs	r3, r1
    7482:	4650      	mov	r0, sl
    7484:	4083      	lsls	r3, r0
    7486:	4699      	mov	r9, r3
    7488:	0013      	movs	r3, r2
    748a:	4648      	mov	r0, r9
    748c:	40eb      	lsrs	r3, r5
    748e:	4318      	orrs	r0, r3
    7490:	0003      	movs	r3, r0
    7492:	4650      	mov	r0, sl
    7494:	4082      	lsls	r2, r0
    7496:	1e50      	subs	r0, r2, #1
    7498:	4182      	sbcs	r2, r0
    749a:	40e9      	lsrs	r1, r5
    749c:	431a      	orrs	r2, r3
    749e:	1aba      	subs	r2, r7, r2
    74a0:	1a61      	subs	r1, r4, r1
    74a2:	4297      	cmp	r7, r2
    74a4:	41a4      	sbcs	r4, r4
    74a6:	0017      	movs	r7, r2
    74a8:	4264      	negs	r4, r4
    74aa:	1b0c      	subs	r4, r1, r4
    74ac:	0223      	lsls	r3, r4, #8
    74ae:	d562      	bpl.n	7576 <__aeabi_dadd+0x17a>
    74b0:	0264      	lsls	r4, r4, #9
    74b2:	0a65      	lsrs	r5, r4, #9
    74b4:	2d00      	cmp	r5, #0
    74b6:	d100      	bne.n	74ba <__aeabi_dadd+0xbe>
    74b8:	e0df      	b.n	767a <__aeabi_dadd+0x27e>
    74ba:	0028      	movs	r0, r5
    74bc:	f001 fbe4 	bl	8c88 <__clzsi2>
    74c0:	0003      	movs	r3, r0
    74c2:	3b08      	subs	r3, #8
    74c4:	2b1f      	cmp	r3, #31
    74c6:	dd00      	ble.n	74ca <__aeabi_dadd+0xce>
    74c8:	e0d2      	b.n	7670 <__aeabi_dadd+0x274>
    74ca:	2220      	movs	r2, #32
    74cc:	003c      	movs	r4, r7
    74ce:	1ad2      	subs	r2, r2, r3
    74d0:	409d      	lsls	r5, r3
    74d2:	40d4      	lsrs	r4, r2
    74d4:	409f      	lsls	r7, r3
    74d6:	4325      	orrs	r5, r4
    74d8:	429e      	cmp	r6, r3
    74da:	dd00      	ble.n	74de <__aeabi_dadd+0xe2>
    74dc:	e0c4      	b.n	7668 <__aeabi_dadd+0x26c>
    74de:	1b9e      	subs	r6, r3, r6
    74e0:	1c73      	adds	r3, r6, #1
    74e2:	2b1f      	cmp	r3, #31
    74e4:	dd00      	ble.n	74e8 <__aeabi_dadd+0xec>
    74e6:	e0f1      	b.n	76cc <__aeabi_dadd+0x2d0>
    74e8:	2220      	movs	r2, #32
    74ea:	0038      	movs	r0, r7
    74ec:	0029      	movs	r1, r5
    74ee:	1ad2      	subs	r2, r2, r3
    74f0:	40d8      	lsrs	r0, r3
    74f2:	4091      	lsls	r1, r2
    74f4:	4097      	lsls	r7, r2
    74f6:	002c      	movs	r4, r5
    74f8:	4301      	orrs	r1, r0
    74fa:	1e78      	subs	r0, r7, #1
    74fc:	4187      	sbcs	r7, r0
    74fe:	40dc      	lsrs	r4, r3
    7500:	2600      	movs	r6, #0
    7502:	430f      	orrs	r7, r1
    7504:	077b      	lsls	r3, r7, #29
    7506:	d009      	beq.n	751c <__aeabi_dadd+0x120>
    7508:	230f      	movs	r3, #15
    750a:	403b      	ands	r3, r7
    750c:	2b04      	cmp	r3, #4
    750e:	d005      	beq.n	751c <__aeabi_dadd+0x120>
    7510:	1d3b      	adds	r3, r7, #4
    7512:	42bb      	cmp	r3, r7
    7514:	41bf      	sbcs	r7, r7
    7516:	427f      	negs	r7, r7
    7518:	19e4      	adds	r4, r4, r7
    751a:	001f      	movs	r7, r3
    751c:	0223      	lsls	r3, r4, #8
    751e:	d52c      	bpl.n	757a <__aeabi_dadd+0x17e>
    7520:	4b96      	ldr	r3, [pc, #600]	; (777c <__aeabi_dadd+0x380>)
    7522:	3601      	adds	r6, #1
    7524:	429e      	cmp	r6, r3
    7526:	d100      	bne.n	752a <__aeabi_dadd+0x12e>
    7528:	e09a      	b.n	7660 <__aeabi_dadd+0x264>
    752a:	4645      	mov	r5, r8
    752c:	4b94      	ldr	r3, [pc, #592]	; (7780 <__aeabi_dadd+0x384>)
    752e:	08ff      	lsrs	r7, r7, #3
    7530:	401c      	ands	r4, r3
    7532:	0760      	lsls	r0, r4, #29
    7534:	0576      	lsls	r6, r6, #21
    7536:	0264      	lsls	r4, r4, #9
    7538:	4307      	orrs	r7, r0
    753a:	0b24      	lsrs	r4, r4, #12
    753c:	0d76      	lsrs	r6, r6, #21
    753e:	2100      	movs	r1, #0
    7540:	0324      	lsls	r4, r4, #12
    7542:	0b23      	lsrs	r3, r4, #12
    7544:	0d0c      	lsrs	r4, r1, #20
    7546:	4a8f      	ldr	r2, [pc, #572]	; (7784 <__aeabi_dadd+0x388>)
    7548:	0524      	lsls	r4, r4, #20
    754a:	431c      	orrs	r4, r3
    754c:	4014      	ands	r4, r2
    754e:	0533      	lsls	r3, r6, #20
    7550:	4323      	orrs	r3, r4
    7552:	005b      	lsls	r3, r3, #1
    7554:	07ed      	lsls	r5, r5, #31
    7556:	085b      	lsrs	r3, r3, #1
    7558:	432b      	orrs	r3, r5
    755a:	0038      	movs	r0, r7
    755c:	0019      	movs	r1, r3
    755e:	bc3c      	pop	{r2, r3, r4, r5}
    7560:	4690      	mov	r8, r2
    7562:	4699      	mov	r9, r3
    7564:	46a2      	mov	sl, r4
    7566:	46ab      	mov	fp, r5
    7568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    756a:	4664      	mov	r4, ip
    756c:	4304      	orrs	r4, r0
    756e:	d100      	bne.n	7572 <__aeabi_dadd+0x176>
    7570:	e211      	b.n	7996 <__aeabi_dadd+0x59a>
    7572:	0004      	movs	r4, r0
    7574:	4667      	mov	r7, ip
    7576:	077b      	lsls	r3, r7, #29
    7578:	d1c6      	bne.n	7508 <__aeabi_dadd+0x10c>
    757a:	4645      	mov	r5, r8
    757c:	0760      	lsls	r0, r4, #29
    757e:	08ff      	lsrs	r7, r7, #3
    7580:	4307      	orrs	r7, r0
    7582:	08e4      	lsrs	r4, r4, #3
    7584:	4b7d      	ldr	r3, [pc, #500]	; (777c <__aeabi_dadd+0x380>)
    7586:	429e      	cmp	r6, r3
    7588:	d030      	beq.n	75ec <__aeabi_dadd+0x1f0>
    758a:	0324      	lsls	r4, r4, #12
    758c:	0576      	lsls	r6, r6, #21
    758e:	0b24      	lsrs	r4, r4, #12
    7590:	0d76      	lsrs	r6, r6, #21
    7592:	e7d4      	b.n	753e <__aeabi_dadd+0x142>
    7594:	1a33      	subs	r3, r6, r0
    7596:	469a      	mov	sl, r3
    7598:	2b00      	cmp	r3, #0
    759a:	dd78      	ble.n	768e <__aeabi_dadd+0x292>
    759c:	2800      	cmp	r0, #0
    759e:	d031      	beq.n	7604 <__aeabi_dadd+0x208>
    75a0:	4876      	ldr	r0, [pc, #472]	; (777c <__aeabi_dadd+0x380>)
    75a2:	4286      	cmp	r6, r0
    75a4:	d0ae      	beq.n	7504 <__aeabi_dadd+0x108>
    75a6:	2080      	movs	r0, #128	; 0x80
    75a8:	0400      	lsls	r0, r0, #16
    75aa:	4301      	orrs	r1, r0
    75ac:	4653      	mov	r3, sl
    75ae:	2b38      	cmp	r3, #56	; 0x38
    75b0:	dc00      	bgt.n	75b4 <__aeabi_dadd+0x1b8>
    75b2:	e0e9      	b.n	7788 <__aeabi_dadd+0x38c>
    75b4:	430a      	orrs	r2, r1
    75b6:	1e51      	subs	r1, r2, #1
    75b8:	418a      	sbcs	r2, r1
    75ba:	2100      	movs	r1, #0
    75bc:	19d2      	adds	r2, r2, r7
    75be:	42ba      	cmp	r2, r7
    75c0:	41bf      	sbcs	r7, r7
    75c2:	1909      	adds	r1, r1, r4
    75c4:	427c      	negs	r4, r7
    75c6:	0017      	movs	r7, r2
    75c8:	190c      	adds	r4, r1, r4
    75ca:	0223      	lsls	r3, r4, #8
    75cc:	d5d3      	bpl.n	7576 <__aeabi_dadd+0x17a>
    75ce:	4b6b      	ldr	r3, [pc, #428]	; (777c <__aeabi_dadd+0x380>)
    75d0:	3601      	adds	r6, #1
    75d2:	429e      	cmp	r6, r3
    75d4:	d100      	bne.n	75d8 <__aeabi_dadd+0x1dc>
    75d6:	e13a      	b.n	784e <__aeabi_dadd+0x452>
    75d8:	2001      	movs	r0, #1
    75da:	4b69      	ldr	r3, [pc, #420]	; (7780 <__aeabi_dadd+0x384>)
    75dc:	401c      	ands	r4, r3
    75de:	087b      	lsrs	r3, r7, #1
    75e0:	4007      	ands	r7, r0
    75e2:	431f      	orrs	r7, r3
    75e4:	07e0      	lsls	r0, r4, #31
    75e6:	4307      	orrs	r7, r0
    75e8:	0864      	lsrs	r4, r4, #1
    75ea:	e78b      	b.n	7504 <__aeabi_dadd+0x108>
    75ec:	0023      	movs	r3, r4
    75ee:	433b      	orrs	r3, r7
    75f0:	d100      	bne.n	75f4 <__aeabi_dadd+0x1f8>
    75f2:	e1cb      	b.n	798c <__aeabi_dadd+0x590>
    75f4:	2280      	movs	r2, #128	; 0x80
    75f6:	0312      	lsls	r2, r2, #12
    75f8:	4314      	orrs	r4, r2
    75fa:	0324      	lsls	r4, r4, #12
    75fc:	0b24      	lsrs	r4, r4, #12
    75fe:	e79e      	b.n	753e <__aeabi_dadd+0x142>
    7600:	002e      	movs	r6, r5
    7602:	e77f      	b.n	7504 <__aeabi_dadd+0x108>
    7604:	0008      	movs	r0, r1
    7606:	4310      	orrs	r0, r2
    7608:	d100      	bne.n	760c <__aeabi_dadd+0x210>
    760a:	e0b4      	b.n	7776 <__aeabi_dadd+0x37a>
    760c:	1e58      	subs	r0, r3, #1
    760e:	2800      	cmp	r0, #0
    7610:	d000      	beq.n	7614 <__aeabi_dadd+0x218>
    7612:	e0de      	b.n	77d2 <__aeabi_dadd+0x3d6>
    7614:	18ba      	adds	r2, r7, r2
    7616:	42ba      	cmp	r2, r7
    7618:	419b      	sbcs	r3, r3
    761a:	1864      	adds	r4, r4, r1
    761c:	425b      	negs	r3, r3
    761e:	18e4      	adds	r4, r4, r3
    7620:	0017      	movs	r7, r2
    7622:	2601      	movs	r6, #1
    7624:	0223      	lsls	r3, r4, #8
    7626:	d5a6      	bpl.n	7576 <__aeabi_dadd+0x17a>
    7628:	2602      	movs	r6, #2
    762a:	e7d5      	b.n	75d8 <__aeabi_dadd+0x1dc>
    762c:	2d00      	cmp	r5, #0
    762e:	d16e      	bne.n	770e <__aeabi_dadd+0x312>
    7630:	1c70      	adds	r0, r6, #1
    7632:	0540      	lsls	r0, r0, #21
    7634:	0d40      	lsrs	r0, r0, #21
    7636:	2801      	cmp	r0, #1
    7638:	dc00      	bgt.n	763c <__aeabi_dadd+0x240>
    763a:	e0f9      	b.n	7830 <__aeabi_dadd+0x434>
    763c:	1ab8      	subs	r0, r7, r2
    763e:	4684      	mov	ip, r0
    7640:	4287      	cmp	r7, r0
    7642:	4180      	sbcs	r0, r0
    7644:	1ae5      	subs	r5, r4, r3
    7646:	4240      	negs	r0, r0
    7648:	1a2d      	subs	r5, r5, r0
    764a:	0228      	lsls	r0, r5, #8
    764c:	d400      	bmi.n	7650 <__aeabi_dadd+0x254>
    764e:	e089      	b.n	7764 <__aeabi_dadd+0x368>
    7650:	1bd7      	subs	r7, r2, r7
    7652:	42ba      	cmp	r2, r7
    7654:	4192      	sbcs	r2, r2
    7656:	1b1c      	subs	r4, r3, r4
    7658:	4252      	negs	r2, r2
    765a:	1aa5      	subs	r5, r4, r2
    765c:	46d8      	mov	r8, fp
    765e:	e729      	b.n	74b4 <__aeabi_dadd+0xb8>
    7660:	4645      	mov	r5, r8
    7662:	2400      	movs	r4, #0
    7664:	2700      	movs	r7, #0
    7666:	e76a      	b.n	753e <__aeabi_dadd+0x142>
    7668:	4c45      	ldr	r4, [pc, #276]	; (7780 <__aeabi_dadd+0x384>)
    766a:	1af6      	subs	r6, r6, r3
    766c:	402c      	ands	r4, r5
    766e:	e749      	b.n	7504 <__aeabi_dadd+0x108>
    7670:	003d      	movs	r5, r7
    7672:	3828      	subs	r0, #40	; 0x28
    7674:	4085      	lsls	r5, r0
    7676:	2700      	movs	r7, #0
    7678:	e72e      	b.n	74d8 <__aeabi_dadd+0xdc>
    767a:	0038      	movs	r0, r7
    767c:	f001 fb04 	bl	8c88 <__clzsi2>
    7680:	3020      	adds	r0, #32
    7682:	e71d      	b.n	74c0 <__aeabi_dadd+0xc4>
    7684:	430a      	orrs	r2, r1
    7686:	1e51      	subs	r1, r2, #1
    7688:	418a      	sbcs	r2, r1
    768a:	2100      	movs	r1, #0
    768c:	e707      	b.n	749e <__aeabi_dadd+0xa2>
    768e:	2b00      	cmp	r3, #0
    7690:	d000      	beq.n	7694 <__aeabi_dadd+0x298>
    7692:	e0f3      	b.n	787c <__aeabi_dadd+0x480>
    7694:	1c70      	adds	r0, r6, #1
    7696:	0543      	lsls	r3, r0, #21
    7698:	0d5b      	lsrs	r3, r3, #21
    769a:	2b01      	cmp	r3, #1
    769c:	dc00      	bgt.n	76a0 <__aeabi_dadd+0x2a4>
    769e:	e0ad      	b.n	77fc <__aeabi_dadd+0x400>
    76a0:	4b36      	ldr	r3, [pc, #216]	; (777c <__aeabi_dadd+0x380>)
    76a2:	4298      	cmp	r0, r3
    76a4:	d100      	bne.n	76a8 <__aeabi_dadd+0x2ac>
    76a6:	e0d1      	b.n	784c <__aeabi_dadd+0x450>
    76a8:	18ba      	adds	r2, r7, r2
    76aa:	42ba      	cmp	r2, r7
    76ac:	41bf      	sbcs	r7, r7
    76ae:	1864      	adds	r4, r4, r1
    76b0:	427f      	negs	r7, r7
    76b2:	19e4      	adds	r4, r4, r7
    76b4:	07e7      	lsls	r7, r4, #31
    76b6:	0852      	lsrs	r2, r2, #1
    76b8:	4317      	orrs	r7, r2
    76ba:	0864      	lsrs	r4, r4, #1
    76bc:	0006      	movs	r6, r0
    76be:	e721      	b.n	7504 <__aeabi_dadd+0x108>
    76c0:	482e      	ldr	r0, [pc, #184]	; (777c <__aeabi_dadd+0x380>)
    76c2:	4285      	cmp	r5, r0
    76c4:	d100      	bne.n	76c8 <__aeabi_dadd+0x2cc>
    76c6:	e093      	b.n	77f0 <__aeabi_dadd+0x3f4>
    76c8:	001d      	movs	r5, r3
    76ca:	e6d0      	b.n	746e <__aeabi_dadd+0x72>
    76cc:	0029      	movs	r1, r5
    76ce:	3e1f      	subs	r6, #31
    76d0:	40f1      	lsrs	r1, r6
    76d2:	2b20      	cmp	r3, #32
    76d4:	d100      	bne.n	76d8 <__aeabi_dadd+0x2dc>
    76d6:	e08d      	b.n	77f4 <__aeabi_dadd+0x3f8>
    76d8:	2240      	movs	r2, #64	; 0x40
    76da:	1ad3      	subs	r3, r2, r3
    76dc:	409d      	lsls	r5, r3
    76de:	432f      	orrs	r7, r5
    76e0:	1e7d      	subs	r5, r7, #1
    76e2:	41af      	sbcs	r7, r5
    76e4:	2400      	movs	r4, #0
    76e6:	430f      	orrs	r7, r1
    76e8:	2600      	movs	r6, #0
    76ea:	e744      	b.n	7576 <__aeabi_dadd+0x17a>
    76ec:	002b      	movs	r3, r5
    76ee:	0008      	movs	r0, r1
    76f0:	3b20      	subs	r3, #32
    76f2:	40d8      	lsrs	r0, r3
    76f4:	0003      	movs	r3, r0
    76f6:	2d20      	cmp	r5, #32
    76f8:	d100      	bne.n	76fc <__aeabi_dadd+0x300>
    76fa:	e07d      	b.n	77f8 <__aeabi_dadd+0x3fc>
    76fc:	2040      	movs	r0, #64	; 0x40
    76fe:	1b45      	subs	r5, r0, r5
    7700:	40a9      	lsls	r1, r5
    7702:	430a      	orrs	r2, r1
    7704:	1e51      	subs	r1, r2, #1
    7706:	418a      	sbcs	r2, r1
    7708:	2100      	movs	r1, #0
    770a:	431a      	orrs	r2, r3
    770c:	e6c7      	b.n	749e <__aeabi_dadd+0xa2>
    770e:	2e00      	cmp	r6, #0
    7710:	d050      	beq.n	77b4 <__aeabi_dadd+0x3b8>
    7712:	4e1a      	ldr	r6, [pc, #104]	; (777c <__aeabi_dadd+0x380>)
    7714:	42b0      	cmp	r0, r6
    7716:	d057      	beq.n	77c8 <__aeabi_dadd+0x3cc>
    7718:	2680      	movs	r6, #128	; 0x80
    771a:	426b      	negs	r3, r5
    771c:	4699      	mov	r9, r3
    771e:	0436      	lsls	r6, r6, #16
    7720:	4334      	orrs	r4, r6
    7722:	464b      	mov	r3, r9
    7724:	2b38      	cmp	r3, #56	; 0x38
    7726:	dd00      	ble.n	772a <__aeabi_dadd+0x32e>
    7728:	e0d6      	b.n	78d8 <__aeabi_dadd+0x4dc>
    772a:	2b1f      	cmp	r3, #31
    772c:	dd00      	ble.n	7730 <__aeabi_dadd+0x334>
    772e:	e135      	b.n	799c <__aeabi_dadd+0x5a0>
    7730:	2620      	movs	r6, #32
    7732:	1af5      	subs	r5, r6, r3
    7734:	0026      	movs	r6, r4
    7736:	40ae      	lsls	r6, r5
    7738:	46b2      	mov	sl, r6
    773a:	003e      	movs	r6, r7
    773c:	40de      	lsrs	r6, r3
    773e:	46ac      	mov	ip, r5
    7740:	0035      	movs	r5, r6
    7742:	4656      	mov	r6, sl
    7744:	432e      	orrs	r6, r5
    7746:	4665      	mov	r5, ip
    7748:	40af      	lsls	r7, r5
    774a:	1e7d      	subs	r5, r7, #1
    774c:	41af      	sbcs	r7, r5
    774e:	40dc      	lsrs	r4, r3
    7750:	4337      	orrs	r7, r6
    7752:	1bd7      	subs	r7, r2, r7
    7754:	42ba      	cmp	r2, r7
    7756:	4192      	sbcs	r2, r2
    7758:	1b0c      	subs	r4, r1, r4
    775a:	4252      	negs	r2, r2
    775c:	1aa4      	subs	r4, r4, r2
    775e:	0006      	movs	r6, r0
    7760:	46d8      	mov	r8, fp
    7762:	e6a3      	b.n	74ac <__aeabi_dadd+0xb0>
    7764:	4664      	mov	r4, ip
    7766:	4667      	mov	r7, ip
    7768:	432c      	orrs	r4, r5
    776a:	d000      	beq.n	776e <__aeabi_dadd+0x372>
    776c:	e6a2      	b.n	74b4 <__aeabi_dadd+0xb8>
    776e:	2500      	movs	r5, #0
    7770:	2600      	movs	r6, #0
    7772:	2700      	movs	r7, #0
    7774:	e706      	b.n	7584 <__aeabi_dadd+0x188>
    7776:	001e      	movs	r6, r3
    7778:	e6c4      	b.n	7504 <__aeabi_dadd+0x108>
    777a:	46c0      	nop			; (mov r8, r8)
    777c:	000007ff 	.word	0x000007ff
    7780:	ff7fffff 	.word	0xff7fffff
    7784:	800fffff 	.word	0x800fffff
    7788:	2b1f      	cmp	r3, #31
    778a:	dc63      	bgt.n	7854 <__aeabi_dadd+0x458>
    778c:	2020      	movs	r0, #32
    778e:	1ac3      	subs	r3, r0, r3
    7790:	0008      	movs	r0, r1
    7792:	4098      	lsls	r0, r3
    7794:	469c      	mov	ip, r3
    7796:	4683      	mov	fp, r0
    7798:	4653      	mov	r3, sl
    779a:	0010      	movs	r0, r2
    779c:	40d8      	lsrs	r0, r3
    779e:	0003      	movs	r3, r0
    77a0:	4658      	mov	r0, fp
    77a2:	4318      	orrs	r0, r3
    77a4:	4663      	mov	r3, ip
    77a6:	409a      	lsls	r2, r3
    77a8:	1e53      	subs	r3, r2, #1
    77aa:	419a      	sbcs	r2, r3
    77ac:	4653      	mov	r3, sl
    77ae:	4302      	orrs	r2, r0
    77b0:	40d9      	lsrs	r1, r3
    77b2:	e703      	b.n	75bc <__aeabi_dadd+0x1c0>
    77b4:	0026      	movs	r6, r4
    77b6:	433e      	orrs	r6, r7
    77b8:	d006      	beq.n	77c8 <__aeabi_dadd+0x3cc>
    77ba:	43eb      	mvns	r3, r5
    77bc:	4699      	mov	r9, r3
    77be:	2b00      	cmp	r3, #0
    77c0:	d0c7      	beq.n	7752 <__aeabi_dadd+0x356>
    77c2:	4e94      	ldr	r6, [pc, #592]	; (7a14 <__aeabi_dadd+0x618>)
    77c4:	42b0      	cmp	r0, r6
    77c6:	d1ac      	bne.n	7722 <__aeabi_dadd+0x326>
    77c8:	000c      	movs	r4, r1
    77ca:	0017      	movs	r7, r2
    77cc:	0006      	movs	r6, r0
    77ce:	46d8      	mov	r8, fp
    77d0:	e698      	b.n	7504 <__aeabi_dadd+0x108>
    77d2:	4b90      	ldr	r3, [pc, #576]	; (7a14 <__aeabi_dadd+0x618>)
    77d4:	459a      	cmp	sl, r3
    77d6:	d00b      	beq.n	77f0 <__aeabi_dadd+0x3f4>
    77d8:	4682      	mov	sl, r0
    77da:	e6e7      	b.n	75ac <__aeabi_dadd+0x1b0>
    77dc:	2800      	cmp	r0, #0
    77de:	d000      	beq.n	77e2 <__aeabi_dadd+0x3e6>
    77e0:	e09e      	b.n	7920 <__aeabi_dadd+0x524>
    77e2:	0018      	movs	r0, r3
    77e4:	4310      	orrs	r0, r2
    77e6:	d100      	bne.n	77ea <__aeabi_dadd+0x3ee>
    77e8:	e0e9      	b.n	79be <__aeabi_dadd+0x5c2>
    77ea:	001c      	movs	r4, r3
    77ec:	0017      	movs	r7, r2
    77ee:	46d8      	mov	r8, fp
    77f0:	4e88      	ldr	r6, [pc, #544]	; (7a14 <__aeabi_dadd+0x618>)
    77f2:	e687      	b.n	7504 <__aeabi_dadd+0x108>
    77f4:	2500      	movs	r5, #0
    77f6:	e772      	b.n	76de <__aeabi_dadd+0x2e2>
    77f8:	2100      	movs	r1, #0
    77fa:	e782      	b.n	7702 <__aeabi_dadd+0x306>
    77fc:	0023      	movs	r3, r4
    77fe:	433b      	orrs	r3, r7
    7800:	2e00      	cmp	r6, #0
    7802:	d000      	beq.n	7806 <__aeabi_dadd+0x40a>
    7804:	e0ab      	b.n	795e <__aeabi_dadd+0x562>
    7806:	2b00      	cmp	r3, #0
    7808:	d100      	bne.n	780c <__aeabi_dadd+0x410>
    780a:	e0e7      	b.n	79dc <__aeabi_dadd+0x5e0>
    780c:	000b      	movs	r3, r1
    780e:	4313      	orrs	r3, r2
    7810:	d100      	bne.n	7814 <__aeabi_dadd+0x418>
    7812:	e677      	b.n	7504 <__aeabi_dadd+0x108>
    7814:	18ba      	adds	r2, r7, r2
    7816:	42ba      	cmp	r2, r7
    7818:	41bf      	sbcs	r7, r7
    781a:	1864      	adds	r4, r4, r1
    781c:	427f      	negs	r7, r7
    781e:	19e4      	adds	r4, r4, r7
    7820:	0223      	lsls	r3, r4, #8
    7822:	d400      	bmi.n	7826 <__aeabi_dadd+0x42a>
    7824:	e0f2      	b.n	7a0c <__aeabi_dadd+0x610>
    7826:	4b7c      	ldr	r3, [pc, #496]	; (7a18 <__aeabi_dadd+0x61c>)
    7828:	0017      	movs	r7, r2
    782a:	401c      	ands	r4, r3
    782c:	0006      	movs	r6, r0
    782e:	e669      	b.n	7504 <__aeabi_dadd+0x108>
    7830:	0020      	movs	r0, r4
    7832:	4338      	orrs	r0, r7
    7834:	2e00      	cmp	r6, #0
    7836:	d1d1      	bne.n	77dc <__aeabi_dadd+0x3e0>
    7838:	2800      	cmp	r0, #0
    783a:	d15b      	bne.n	78f4 <__aeabi_dadd+0x4f8>
    783c:	001c      	movs	r4, r3
    783e:	4314      	orrs	r4, r2
    7840:	d100      	bne.n	7844 <__aeabi_dadd+0x448>
    7842:	e0a8      	b.n	7996 <__aeabi_dadd+0x59a>
    7844:	001c      	movs	r4, r3
    7846:	0017      	movs	r7, r2
    7848:	46d8      	mov	r8, fp
    784a:	e65b      	b.n	7504 <__aeabi_dadd+0x108>
    784c:	0006      	movs	r6, r0
    784e:	2400      	movs	r4, #0
    7850:	2700      	movs	r7, #0
    7852:	e697      	b.n	7584 <__aeabi_dadd+0x188>
    7854:	4650      	mov	r0, sl
    7856:	000b      	movs	r3, r1
    7858:	3820      	subs	r0, #32
    785a:	40c3      	lsrs	r3, r0
    785c:	4699      	mov	r9, r3
    785e:	4653      	mov	r3, sl
    7860:	2b20      	cmp	r3, #32
    7862:	d100      	bne.n	7866 <__aeabi_dadd+0x46a>
    7864:	e095      	b.n	7992 <__aeabi_dadd+0x596>
    7866:	2340      	movs	r3, #64	; 0x40
    7868:	4650      	mov	r0, sl
    786a:	1a1b      	subs	r3, r3, r0
    786c:	4099      	lsls	r1, r3
    786e:	430a      	orrs	r2, r1
    7870:	1e51      	subs	r1, r2, #1
    7872:	418a      	sbcs	r2, r1
    7874:	464b      	mov	r3, r9
    7876:	2100      	movs	r1, #0
    7878:	431a      	orrs	r2, r3
    787a:	e69f      	b.n	75bc <__aeabi_dadd+0x1c0>
    787c:	2e00      	cmp	r6, #0
    787e:	d130      	bne.n	78e2 <__aeabi_dadd+0x4e6>
    7880:	0026      	movs	r6, r4
    7882:	433e      	orrs	r6, r7
    7884:	d067      	beq.n	7956 <__aeabi_dadd+0x55a>
    7886:	43db      	mvns	r3, r3
    7888:	469a      	mov	sl, r3
    788a:	2b00      	cmp	r3, #0
    788c:	d01c      	beq.n	78c8 <__aeabi_dadd+0x4cc>
    788e:	4e61      	ldr	r6, [pc, #388]	; (7a14 <__aeabi_dadd+0x618>)
    7890:	42b0      	cmp	r0, r6
    7892:	d060      	beq.n	7956 <__aeabi_dadd+0x55a>
    7894:	4653      	mov	r3, sl
    7896:	2b38      	cmp	r3, #56	; 0x38
    7898:	dd00      	ble.n	789c <__aeabi_dadd+0x4a0>
    789a:	e096      	b.n	79ca <__aeabi_dadd+0x5ce>
    789c:	2b1f      	cmp	r3, #31
    789e:	dd00      	ble.n	78a2 <__aeabi_dadd+0x4a6>
    78a0:	e09f      	b.n	79e2 <__aeabi_dadd+0x5e6>
    78a2:	2620      	movs	r6, #32
    78a4:	1af3      	subs	r3, r6, r3
    78a6:	0026      	movs	r6, r4
    78a8:	409e      	lsls	r6, r3
    78aa:	469c      	mov	ip, r3
    78ac:	46b3      	mov	fp, r6
    78ae:	4653      	mov	r3, sl
    78b0:	003e      	movs	r6, r7
    78b2:	40de      	lsrs	r6, r3
    78b4:	0033      	movs	r3, r6
    78b6:	465e      	mov	r6, fp
    78b8:	431e      	orrs	r6, r3
    78ba:	4663      	mov	r3, ip
    78bc:	409f      	lsls	r7, r3
    78be:	1e7b      	subs	r3, r7, #1
    78c0:	419f      	sbcs	r7, r3
    78c2:	4653      	mov	r3, sl
    78c4:	40dc      	lsrs	r4, r3
    78c6:	4337      	orrs	r7, r6
    78c8:	18bf      	adds	r7, r7, r2
    78ca:	4297      	cmp	r7, r2
    78cc:	4192      	sbcs	r2, r2
    78ce:	1864      	adds	r4, r4, r1
    78d0:	4252      	negs	r2, r2
    78d2:	18a4      	adds	r4, r4, r2
    78d4:	0006      	movs	r6, r0
    78d6:	e678      	b.n	75ca <__aeabi_dadd+0x1ce>
    78d8:	4327      	orrs	r7, r4
    78da:	1e7c      	subs	r4, r7, #1
    78dc:	41a7      	sbcs	r7, r4
    78de:	2400      	movs	r4, #0
    78e0:	e737      	b.n	7752 <__aeabi_dadd+0x356>
    78e2:	4e4c      	ldr	r6, [pc, #304]	; (7a14 <__aeabi_dadd+0x618>)
    78e4:	42b0      	cmp	r0, r6
    78e6:	d036      	beq.n	7956 <__aeabi_dadd+0x55a>
    78e8:	2680      	movs	r6, #128	; 0x80
    78ea:	425b      	negs	r3, r3
    78ec:	0436      	lsls	r6, r6, #16
    78ee:	469a      	mov	sl, r3
    78f0:	4334      	orrs	r4, r6
    78f2:	e7cf      	b.n	7894 <__aeabi_dadd+0x498>
    78f4:	0018      	movs	r0, r3
    78f6:	4310      	orrs	r0, r2
    78f8:	d100      	bne.n	78fc <__aeabi_dadd+0x500>
    78fa:	e603      	b.n	7504 <__aeabi_dadd+0x108>
    78fc:	1ab8      	subs	r0, r7, r2
    78fe:	4684      	mov	ip, r0
    7900:	4567      	cmp	r7, ip
    7902:	41ad      	sbcs	r5, r5
    7904:	1ae0      	subs	r0, r4, r3
    7906:	426d      	negs	r5, r5
    7908:	1b40      	subs	r0, r0, r5
    790a:	0205      	lsls	r5, r0, #8
    790c:	d400      	bmi.n	7910 <__aeabi_dadd+0x514>
    790e:	e62c      	b.n	756a <__aeabi_dadd+0x16e>
    7910:	1bd7      	subs	r7, r2, r7
    7912:	42ba      	cmp	r2, r7
    7914:	4192      	sbcs	r2, r2
    7916:	1b1c      	subs	r4, r3, r4
    7918:	4252      	negs	r2, r2
    791a:	1aa4      	subs	r4, r4, r2
    791c:	46d8      	mov	r8, fp
    791e:	e5f1      	b.n	7504 <__aeabi_dadd+0x108>
    7920:	0018      	movs	r0, r3
    7922:	4310      	orrs	r0, r2
    7924:	d100      	bne.n	7928 <__aeabi_dadd+0x52c>
    7926:	e763      	b.n	77f0 <__aeabi_dadd+0x3f4>
    7928:	08f8      	lsrs	r0, r7, #3
    792a:	0767      	lsls	r7, r4, #29
    792c:	4307      	orrs	r7, r0
    792e:	2080      	movs	r0, #128	; 0x80
    7930:	08e4      	lsrs	r4, r4, #3
    7932:	0300      	lsls	r0, r0, #12
    7934:	4204      	tst	r4, r0
    7936:	d008      	beq.n	794a <__aeabi_dadd+0x54e>
    7938:	08dd      	lsrs	r5, r3, #3
    793a:	4205      	tst	r5, r0
    793c:	d105      	bne.n	794a <__aeabi_dadd+0x54e>
    793e:	08d2      	lsrs	r2, r2, #3
    7940:	0759      	lsls	r1, r3, #29
    7942:	4311      	orrs	r1, r2
    7944:	000f      	movs	r7, r1
    7946:	002c      	movs	r4, r5
    7948:	46d8      	mov	r8, fp
    794a:	0f7b      	lsrs	r3, r7, #29
    794c:	00e4      	lsls	r4, r4, #3
    794e:	431c      	orrs	r4, r3
    7950:	00ff      	lsls	r7, r7, #3
    7952:	4e30      	ldr	r6, [pc, #192]	; (7a14 <__aeabi_dadd+0x618>)
    7954:	e5d6      	b.n	7504 <__aeabi_dadd+0x108>
    7956:	000c      	movs	r4, r1
    7958:	0017      	movs	r7, r2
    795a:	0006      	movs	r6, r0
    795c:	e5d2      	b.n	7504 <__aeabi_dadd+0x108>
    795e:	2b00      	cmp	r3, #0
    7960:	d038      	beq.n	79d4 <__aeabi_dadd+0x5d8>
    7962:	000b      	movs	r3, r1
    7964:	4313      	orrs	r3, r2
    7966:	d100      	bne.n	796a <__aeabi_dadd+0x56e>
    7968:	e742      	b.n	77f0 <__aeabi_dadd+0x3f4>
    796a:	08f8      	lsrs	r0, r7, #3
    796c:	0767      	lsls	r7, r4, #29
    796e:	4307      	orrs	r7, r0
    7970:	2080      	movs	r0, #128	; 0x80
    7972:	08e4      	lsrs	r4, r4, #3
    7974:	0300      	lsls	r0, r0, #12
    7976:	4204      	tst	r4, r0
    7978:	d0e7      	beq.n	794a <__aeabi_dadd+0x54e>
    797a:	08cb      	lsrs	r3, r1, #3
    797c:	4203      	tst	r3, r0
    797e:	d1e4      	bne.n	794a <__aeabi_dadd+0x54e>
    7980:	08d2      	lsrs	r2, r2, #3
    7982:	0749      	lsls	r1, r1, #29
    7984:	4311      	orrs	r1, r2
    7986:	000f      	movs	r7, r1
    7988:	001c      	movs	r4, r3
    798a:	e7de      	b.n	794a <__aeabi_dadd+0x54e>
    798c:	2700      	movs	r7, #0
    798e:	2400      	movs	r4, #0
    7990:	e5d5      	b.n	753e <__aeabi_dadd+0x142>
    7992:	2100      	movs	r1, #0
    7994:	e76b      	b.n	786e <__aeabi_dadd+0x472>
    7996:	2500      	movs	r5, #0
    7998:	2700      	movs	r7, #0
    799a:	e5f3      	b.n	7584 <__aeabi_dadd+0x188>
    799c:	464e      	mov	r6, r9
    799e:	0025      	movs	r5, r4
    79a0:	3e20      	subs	r6, #32
    79a2:	40f5      	lsrs	r5, r6
    79a4:	464b      	mov	r3, r9
    79a6:	002e      	movs	r6, r5
    79a8:	2b20      	cmp	r3, #32
    79aa:	d02d      	beq.n	7a08 <__aeabi_dadd+0x60c>
    79ac:	2540      	movs	r5, #64	; 0x40
    79ae:	1aed      	subs	r5, r5, r3
    79b0:	40ac      	lsls	r4, r5
    79b2:	4327      	orrs	r7, r4
    79b4:	1e7c      	subs	r4, r7, #1
    79b6:	41a7      	sbcs	r7, r4
    79b8:	2400      	movs	r4, #0
    79ba:	4337      	orrs	r7, r6
    79bc:	e6c9      	b.n	7752 <__aeabi_dadd+0x356>
    79be:	2480      	movs	r4, #128	; 0x80
    79c0:	2500      	movs	r5, #0
    79c2:	0324      	lsls	r4, r4, #12
    79c4:	4e13      	ldr	r6, [pc, #76]	; (7a14 <__aeabi_dadd+0x618>)
    79c6:	2700      	movs	r7, #0
    79c8:	e5dc      	b.n	7584 <__aeabi_dadd+0x188>
    79ca:	4327      	orrs	r7, r4
    79cc:	1e7c      	subs	r4, r7, #1
    79ce:	41a7      	sbcs	r7, r4
    79d0:	2400      	movs	r4, #0
    79d2:	e779      	b.n	78c8 <__aeabi_dadd+0x4cc>
    79d4:	000c      	movs	r4, r1
    79d6:	0017      	movs	r7, r2
    79d8:	4e0e      	ldr	r6, [pc, #56]	; (7a14 <__aeabi_dadd+0x618>)
    79da:	e593      	b.n	7504 <__aeabi_dadd+0x108>
    79dc:	000c      	movs	r4, r1
    79de:	0017      	movs	r7, r2
    79e0:	e590      	b.n	7504 <__aeabi_dadd+0x108>
    79e2:	4656      	mov	r6, sl
    79e4:	0023      	movs	r3, r4
    79e6:	3e20      	subs	r6, #32
    79e8:	40f3      	lsrs	r3, r6
    79ea:	4699      	mov	r9, r3
    79ec:	4653      	mov	r3, sl
    79ee:	2b20      	cmp	r3, #32
    79f0:	d00e      	beq.n	7a10 <__aeabi_dadd+0x614>
    79f2:	2340      	movs	r3, #64	; 0x40
    79f4:	4656      	mov	r6, sl
    79f6:	1b9b      	subs	r3, r3, r6
    79f8:	409c      	lsls	r4, r3
    79fa:	4327      	orrs	r7, r4
    79fc:	1e7c      	subs	r4, r7, #1
    79fe:	41a7      	sbcs	r7, r4
    7a00:	464b      	mov	r3, r9
    7a02:	2400      	movs	r4, #0
    7a04:	431f      	orrs	r7, r3
    7a06:	e75f      	b.n	78c8 <__aeabi_dadd+0x4cc>
    7a08:	2400      	movs	r4, #0
    7a0a:	e7d2      	b.n	79b2 <__aeabi_dadd+0x5b6>
    7a0c:	0017      	movs	r7, r2
    7a0e:	e5b2      	b.n	7576 <__aeabi_dadd+0x17a>
    7a10:	2400      	movs	r4, #0
    7a12:	e7f2      	b.n	79fa <__aeabi_dadd+0x5fe>
    7a14:	000007ff 	.word	0x000007ff
    7a18:	ff7fffff 	.word	0xff7fffff

00007a1c <__aeabi_ddiv>:
    7a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a1e:	4657      	mov	r7, sl
    7a20:	4645      	mov	r5, r8
    7a22:	46de      	mov	lr, fp
    7a24:	464e      	mov	r6, r9
    7a26:	b5e0      	push	{r5, r6, r7, lr}
    7a28:	004c      	lsls	r4, r1, #1
    7a2a:	030e      	lsls	r6, r1, #12
    7a2c:	b087      	sub	sp, #28
    7a2e:	4683      	mov	fp, r0
    7a30:	4692      	mov	sl, r2
    7a32:	001d      	movs	r5, r3
    7a34:	4680      	mov	r8, r0
    7a36:	0b36      	lsrs	r6, r6, #12
    7a38:	0d64      	lsrs	r4, r4, #21
    7a3a:	0fcf      	lsrs	r7, r1, #31
    7a3c:	2c00      	cmp	r4, #0
    7a3e:	d04f      	beq.n	7ae0 <__aeabi_ddiv+0xc4>
    7a40:	4b6f      	ldr	r3, [pc, #444]	; (7c00 <__aeabi_ddiv+0x1e4>)
    7a42:	429c      	cmp	r4, r3
    7a44:	d035      	beq.n	7ab2 <__aeabi_ddiv+0x96>
    7a46:	2380      	movs	r3, #128	; 0x80
    7a48:	0f42      	lsrs	r2, r0, #29
    7a4a:	041b      	lsls	r3, r3, #16
    7a4c:	00f6      	lsls	r6, r6, #3
    7a4e:	4313      	orrs	r3, r2
    7a50:	4333      	orrs	r3, r6
    7a52:	4699      	mov	r9, r3
    7a54:	00c3      	lsls	r3, r0, #3
    7a56:	4698      	mov	r8, r3
    7a58:	4b6a      	ldr	r3, [pc, #424]	; (7c04 <__aeabi_ddiv+0x1e8>)
    7a5a:	2600      	movs	r6, #0
    7a5c:	469c      	mov	ip, r3
    7a5e:	2300      	movs	r3, #0
    7a60:	4464      	add	r4, ip
    7a62:	9303      	str	r3, [sp, #12]
    7a64:	032b      	lsls	r3, r5, #12
    7a66:	0b1b      	lsrs	r3, r3, #12
    7a68:	469b      	mov	fp, r3
    7a6a:	006b      	lsls	r3, r5, #1
    7a6c:	0fed      	lsrs	r5, r5, #31
    7a6e:	4650      	mov	r0, sl
    7a70:	0d5b      	lsrs	r3, r3, #21
    7a72:	9501      	str	r5, [sp, #4]
    7a74:	d05e      	beq.n	7b34 <__aeabi_ddiv+0x118>
    7a76:	4a62      	ldr	r2, [pc, #392]	; (7c00 <__aeabi_ddiv+0x1e4>)
    7a78:	4293      	cmp	r3, r2
    7a7a:	d053      	beq.n	7b24 <__aeabi_ddiv+0x108>
    7a7c:	465a      	mov	r2, fp
    7a7e:	00d1      	lsls	r1, r2, #3
    7a80:	2280      	movs	r2, #128	; 0x80
    7a82:	0f40      	lsrs	r0, r0, #29
    7a84:	0412      	lsls	r2, r2, #16
    7a86:	4302      	orrs	r2, r0
    7a88:	430a      	orrs	r2, r1
    7a8a:	4693      	mov	fp, r2
    7a8c:	4652      	mov	r2, sl
    7a8e:	00d1      	lsls	r1, r2, #3
    7a90:	4a5c      	ldr	r2, [pc, #368]	; (7c04 <__aeabi_ddiv+0x1e8>)
    7a92:	4694      	mov	ip, r2
    7a94:	2200      	movs	r2, #0
    7a96:	4463      	add	r3, ip
    7a98:	0038      	movs	r0, r7
    7a9a:	4068      	eors	r0, r5
    7a9c:	4684      	mov	ip, r0
    7a9e:	9002      	str	r0, [sp, #8]
    7aa0:	1ae4      	subs	r4, r4, r3
    7aa2:	4316      	orrs	r6, r2
    7aa4:	2e0f      	cmp	r6, #15
    7aa6:	d900      	bls.n	7aaa <__aeabi_ddiv+0x8e>
    7aa8:	e0b4      	b.n	7c14 <__aeabi_ddiv+0x1f8>
    7aaa:	4b57      	ldr	r3, [pc, #348]	; (7c08 <__aeabi_ddiv+0x1ec>)
    7aac:	00b6      	lsls	r6, r6, #2
    7aae:	599b      	ldr	r3, [r3, r6]
    7ab0:	469f      	mov	pc, r3
    7ab2:	0003      	movs	r3, r0
    7ab4:	4333      	orrs	r3, r6
    7ab6:	4699      	mov	r9, r3
    7ab8:	d16c      	bne.n	7b94 <__aeabi_ddiv+0x178>
    7aba:	2300      	movs	r3, #0
    7abc:	4698      	mov	r8, r3
    7abe:	3302      	adds	r3, #2
    7ac0:	2608      	movs	r6, #8
    7ac2:	9303      	str	r3, [sp, #12]
    7ac4:	e7ce      	b.n	7a64 <__aeabi_ddiv+0x48>
    7ac6:	46cb      	mov	fp, r9
    7ac8:	4641      	mov	r1, r8
    7aca:	9a03      	ldr	r2, [sp, #12]
    7acc:	9701      	str	r7, [sp, #4]
    7ace:	2a02      	cmp	r2, #2
    7ad0:	d165      	bne.n	7b9e <__aeabi_ddiv+0x182>
    7ad2:	9b01      	ldr	r3, [sp, #4]
    7ad4:	4c4a      	ldr	r4, [pc, #296]	; (7c00 <__aeabi_ddiv+0x1e4>)
    7ad6:	469c      	mov	ip, r3
    7ad8:	2300      	movs	r3, #0
    7ada:	2200      	movs	r2, #0
    7adc:	4698      	mov	r8, r3
    7ade:	e06b      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    7ae0:	0003      	movs	r3, r0
    7ae2:	4333      	orrs	r3, r6
    7ae4:	4699      	mov	r9, r3
    7ae6:	d04e      	beq.n	7b86 <__aeabi_ddiv+0x16a>
    7ae8:	2e00      	cmp	r6, #0
    7aea:	d100      	bne.n	7aee <__aeabi_ddiv+0xd2>
    7aec:	e1bc      	b.n	7e68 <__aeabi_ddiv+0x44c>
    7aee:	0030      	movs	r0, r6
    7af0:	f001 f8ca 	bl	8c88 <__clzsi2>
    7af4:	0003      	movs	r3, r0
    7af6:	3b0b      	subs	r3, #11
    7af8:	2b1c      	cmp	r3, #28
    7afa:	dd00      	ble.n	7afe <__aeabi_ddiv+0xe2>
    7afc:	e1ac      	b.n	7e58 <__aeabi_ddiv+0x43c>
    7afe:	221d      	movs	r2, #29
    7b00:	1ad3      	subs	r3, r2, r3
    7b02:	465a      	mov	r2, fp
    7b04:	0001      	movs	r1, r0
    7b06:	40da      	lsrs	r2, r3
    7b08:	3908      	subs	r1, #8
    7b0a:	408e      	lsls	r6, r1
    7b0c:	0013      	movs	r3, r2
    7b0e:	4333      	orrs	r3, r6
    7b10:	4699      	mov	r9, r3
    7b12:	465b      	mov	r3, fp
    7b14:	408b      	lsls	r3, r1
    7b16:	4698      	mov	r8, r3
    7b18:	2300      	movs	r3, #0
    7b1a:	4c3c      	ldr	r4, [pc, #240]	; (7c0c <__aeabi_ddiv+0x1f0>)
    7b1c:	2600      	movs	r6, #0
    7b1e:	1a24      	subs	r4, r4, r0
    7b20:	9303      	str	r3, [sp, #12]
    7b22:	e79f      	b.n	7a64 <__aeabi_ddiv+0x48>
    7b24:	4651      	mov	r1, sl
    7b26:	465a      	mov	r2, fp
    7b28:	4311      	orrs	r1, r2
    7b2a:	d129      	bne.n	7b80 <__aeabi_ddiv+0x164>
    7b2c:	2200      	movs	r2, #0
    7b2e:	4693      	mov	fp, r2
    7b30:	3202      	adds	r2, #2
    7b32:	e7b1      	b.n	7a98 <__aeabi_ddiv+0x7c>
    7b34:	4659      	mov	r1, fp
    7b36:	4301      	orrs	r1, r0
    7b38:	d01e      	beq.n	7b78 <__aeabi_ddiv+0x15c>
    7b3a:	465b      	mov	r3, fp
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d100      	bne.n	7b42 <__aeabi_ddiv+0x126>
    7b40:	e19e      	b.n	7e80 <__aeabi_ddiv+0x464>
    7b42:	4658      	mov	r0, fp
    7b44:	f001 f8a0 	bl	8c88 <__clzsi2>
    7b48:	0003      	movs	r3, r0
    7b4a:	3b0b      	subs	r3, #11
    7b4c:	2b1c      	cmp	r3, #28
    7b4e:	dd00      	ble.n	7b52 <__aeabi_ddiv+0x136>
    7b50:	e18f      	b.n	7e72 <__aeabi_ddiv+0x456>
    7b52:	0002      	movs	r2, r0
    7b54:	4659      	mov	r1, fp
    7b56:	3a08      	subs	r2, #8
    7b58:	4091      	lsls	r1, r2
    7b5a:	468b      	mov	fp, r1
    7b5c:	211d      	movs	r1, #29
    7b5e:	1acb      	subs	r3, r1, r3
    7b60:	4651      	mov	r1, sl
<<<<<<< Updated upstream
    7b62:	2203      	movs	r2, #3
    7b64:	e788      	b.n	7a78 <__aeabi_ddiv+0x7c>
    7b66:	2300      	movs	r3, #0
    7b68:	4698      	mov	r8, r3
    7b6a:	3301      	adds	r3, #1
    7b6c:	2604      	movs	r6, #4
    7b6e:	2400      	movs	r4, #0
    7b70:	9303      	str	r3, [sp, #12]
    7b72:	e767      	b.n	7a44 <__aeabi_ddiv+0x48>
    7b74:	2303      	movs	r3, #3
    7b76:	46b1      	mov	r9, r6
    7b78:	9303      	str	r3, [sp, #12]
    7b7a:	260c      	movs	r6, #12
    7b7c:	e762      	b.n	7a44 <__aeabi_ddiv+0x48>
    7b7e:	2a03      	cmp	r2, #3
    7b80:	d100      	bne.n	7b84 <__aeabi_ddiv+0x188>
    7b82:	e25c      	b.n	803e <__aeabi_ddiv+0x642>
    7b84:	9b01      	ldr	r3, [sp, #4]
    7b86:	2a01      	cmp	r2, #1
    7b88:	d000      	beq.n	7b8c <__aeabi_ddiv+0x190>
    7b8a:	e1e4      	b.n	7f56 <__aeabi_ddiv+0x55a>
    7b8c:	4013      	ands	r3, r2
    7b8e:	469c      	mov	ip, r3
    7b90:	2300      	movs	r3, #0
    7b92:	2400      	movs	r4, #0
    7b94:	2200      	movs	r2, #0
    7b96:	4698      	mov	r8, r3
    7b98:	2100      	movs	r1, #0
    7b9a:	0312      	lsls	r2, r2, #12
    7b9c:	0b13      	lsrs	r3, r2, #12
    7b9e:	0d0a      	lsrs	r2, r1, #20
    7ba0:	0512      	lsls	r2, r2, #20
    7ba2:	431a      	orrs	r2, r3
    7ba4:	0523      	lsls	r3, r4, #20
    7ba6:	4c12      	ldr	r4, [pc, #72]	; (7bf0 <__aeabi_ddiv+0x1f4>)
    7ba8:	4640      	mov	r0, r8
    7baa:	4022      	ands	r2, r4
    7bac:	4313      	orrs	r3, r2
    7bae:	4662      	mov	r2, ip
    7bb0:	005b      	lsls	r3, r3, #1
    7bb2:	07d2      	lsls	r2, r2, #31
    7bb4:	085b      	lsrs	r3, r3, #1
    7bb6:	4313      	orrs	r3, r2
    7bb8:	0019      	movs	r1, r3
    7bba:	b007      	add	sp, #28
    7bbc:	bc3c      	pop	{r2, r3, r4, r5}
    7bbe:	4690      	mov	r8, r2
    7bc0:	4699      	mov	r9, r3
    7bc2:	46a2      	mov	sl, r4
    7bc4:	46ab      	mov	fp, r5
    7bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bc8:	2300      	movs	r3, #0
    7bca:	2280      	movs	r2, #128	; 0x80
    7bcc:	469c      	mov	ip, r3
    7bce:	0312      	lsls	r2, r2, #12
    7bd0:	4698      	mov	r8, r3
    7bd2:	4c03      	ldr	r4, [pc, #12]	; (7be0 <__aeabi_ddiv+0x1e4>)
    7bd4:	e7e0      	b.n	7b98 <__aeabi_ddiv+0x19c>
    7bd6:	2300      	movs	r3, #0
    7bd8:	4c01      	ldr	r4, [pc, #4]	; (7be0 <__aeabi_ddiv+0x1e4>)
    7bda:	2200      	movs	r2, #0
    7bdc:	4698      	mov	r8, r3
    7bde:	e7db      	b.n	7b98 <__aeabi_ddiv+0x19c>
    7be0:	000007ff 	.word	0x000007ff
    7be4:	fffffc01 	.word	0xfffffc01
    7be8:	0000aa98 	.word	0x0000aa98
    7bec:	fffffc0d 	.word	0xfffffc0d
    7bf0:	800fffff 	.word	0x800fffff
    7bf4:	45d9      	cmp	r9, fp
    7bf6:	d900      	bls.n	7bfa <__aeabi_ddiv+0x1fe>
    7bf8:	e139      	b.n	7e6e <__aeabi_ddiv+0x472>
    7bfa:	d100      	bne.n	7bfe <__aeabi_ddiv+0x202>
    7bfc:	e134      	b.n	7e68 <__aeabi_ddiv+0x46c>
    7bfe:	2300      	movs	r3, #0
    7c00:	4646      	mov	r6, r8
    7c02:	464d      	mov	r5, r9
    7c04:	469a      	mov	sl, r3
    7c06:	3c01      	subs	r4, #1
    7c08:	465b      	mov	r3, fp
    7c0a:	0e0a      	lsrs	r2, r1, #24
    7c0c:	021b      	lsls	r3, r3, #8
    7c0e:	431a      	orrs	r2, r3
    7c10:	020b      	lsls	r3, r1, #8
    7c12:	0c17      	lsrs	r7, r2, #16
    7c14:	9303      	str	r3, [sp, #12]
    7c16:	0413      	lsls	r3, r2, #16
    7c18:	0c1b      	lsrs	r3, r3, #16
    7c1a:	0039      	movs	r1, r7
    7c1c:	0028      	movs	r0, r5
    7c1e:	4690      	mov	r8, r2
    7c20:	9301      	str	r3, [sp, #4]
    7c22:	f7ff f995 	bl	6f50 <__udivsi3>
    7c26:	0002      	movs	r2, r0
    7c28:	9b01      	ldr	r3, [sp, #4]
    7c2a:	4683      	mov	fp, r0
    7c2c:	435a      	muls	r2, r3
    7c2e:	0028      	movs	r0, r5
    7c30:	0039      	movs	r1, r7
    7c32:	4691      	mov	r9, r2
    7c34:	f7ff fa12 	bl	705c <__aeabi_uidivmod>
    7c38:	0c35      	lsrs	r5, r6, #16
    7c3a:	0409      	lsls	r1, r1, #16
    7c3c:	430d      	orrs	r5, r1
    7c3e:	45a9      	cmp	r9, r5
    7c40:	d90d      	bls.n	7c5e <__aeabi_ddiv+0x262>
    7c42:	465b      	mov	r3, fp
    7c44:	4445      	add	r5, r8
    7c46:	3b01      	subs	r3, #1
    7c48:	45a8      	cmp	r8, r5
    7c4a:	d900      	bls.n	7c4e <__aeabi_ddiv+0x252>
    7c4c:	e13a      	b.n	7ec4 <__aeabi_ddiv+0x4c8>
    7c4e:	45a9      	cmp	r9, r5
    7c50:	d800      	bhi.n	7c54 <__aeabi_ddiv+0x258>
    7c52:	e137      	b.n	7ec4 <__aeabi_ddiv+0x4c8>
    7c54:	2302      	movs	r3, #2
    7c56:	425b      	negs	r3, r3
    7c58:	469c      	mov	ip, r3
    7c5a:	4445      	add	r5, r8
    7c5c:	44e3      	add	fp, ip
    7c5e:	464b      	mov	r3, r9
    7c60:	1aeb      	subs	r3, r5, r3
    7c62:	0039      	movs	r1, r7
    7c64:	0018      	movs	r0, r3
    7c66:	9304      	str	r3, [sp, #16]
    7c68:	f7ff f972 	bl	6f50 <__udivsi3>
    7c6c:	9b01      	ldr	r3, [sp, #4]
    7c6e:	0005      	movs	r5, r0
    7c70:	4343      	muls	r3, r0
    7c72:	0039      	movs	r1, r7
    7c74:	9804      	ldr	r0, [sp, #16]
    7c76:	4699      	mov	r9, r3
    7c78:	f7ff f9f0 	bl	705c <__aeabi_uidivmod>
    7c7c:	0433      	lsls	r3, r6, #16
    7c7e:	0409      	lsls	r1, r1, #16
    7c80:	0c1b      	lsrs	r3, r3, #16
    7c82:	430b      	orrs	r3, r1
    7c84:	4599      	cmp	r9, r3
    7c86:	d909      	bls.n	7c9c <__aeabi_ddiv+0x2a0>
    7c88:	4443      	add	r3, r8
    7c8a:	1e6a      	subs	r2, r5, #1
    7c8c:	4598      	cmp	r8, r3
    7c8e:	d900      	bls.n	7c92 <__aeabi_ddiv+0x296>
    7c90:	e11a      	b.n	7ec8 <__aeabi_ddiv+0x4cc>
    7c92:	4599      	cmp	r9, r3
    7c94:	d800      	bhi.n	7c98 <__aeabi_ddiv+0x29c>
    7c96:	e117      	b.n	7ec8 <__aeabi_ddiv+0x4cc>
    7c98:	3d02      	subs	r5, #2
    7c9a:	4443      	add	r3, r8
    7c9c:	464a      	mov	r2, r9
    7c9e:	1a9b      	subs	r3, r3, r2
    7ca0:	465a      	mov	r2, fp
    7ca2:	0412      	lsls	r2, r2, #16
    7ca4:	432a      	orrs	r2, r5
    7ca6:	9903      	ldr	r1, [sp, #12]
    7ca8:	4693      	mov	fp, r2
    7caa:	0c10      	lsrs	r0, r2, #16
    7cac:	0c0a      	lsrs	r2, r1, #16
    7cae:	4691      	mov	r9, r2
    7cb0:	0409      	lsls	r1, r1, #16
    7cb2:	465a      	mov	r2, fp
    7cb4:	0c09      	lsrs	r1, r1, #16
    7cb6:	464e      	mov	r6, r9
    7cb8:	000d      	movs	r5, r1
    7cba:	0412      	lsls	r2, r2, #16
    7cbc:	0c12      	lsrs	r2, r2, #16
    7cbe:	4345      	muls	r5, r0
    7cc0:	9105      	str	r1, [sp, #20]
    7cc2:	4351      	muls	r1, r2
    7cc4:	4372      	muls	r2, r6
    7cc6:	4370      	muls	r0, r6
    7cc8:	1952      	adds	r2, r2, r5
    7cca:	0c0e      	lsrs	r6, r1, #16
    7ccc:	18b2      	adds	r2, r6, r2
    7cce:	4295      	cmp	r5, r2
    7cd0:	d903      	bls.n	7cda <__aeabi_ddiv+0x2de>
    7cd2:	2580      	movs	r5, #128	; 0x80
    7cd4:	026d      	lsls	r5, r5, #9
    7cd6:	46ac      	mov	ip, r5
    7cd8:	4460      	add	r0, ip
    7cda:	0c15      	lsrs	r5, r2, #16
    7cdc:	0409      	lsls	r1, r1, #16
    7cde:	0412      	lsls	r2, r2, #16
    7ce0:	0c09      	lsrs	r1, r1, #16
    7ce2:	1828      	adds	r0, r5, r0
    7ce4:	1852      	adds	r2, r2, r1
    7ce6:	4283      	cmp	r3, r0
    7ce8:	d200      	bcs.n	7cec <__aeabi_ddiv+0x2f0>
    7cea:	e0ce      	b.n	7e8a <__aeabi_ddiv+0x48e>
    7cec:	d100      	bne.n	7cf0 <__aeabi_ddiv+0x2f4>
    7cee:	e0c8      	b.n	7e82 <__aeabi_ddiv+0x486>
    7cf0:	1a1d      	subs	r5, r3, r0
    7cf2:	4653      	mov	r3, sl
    7cf4:	1a9e      	subs	r6, r3, r2
    7cf6:	45b2      	cmp	sl, r6
    7cf8:	4192      	sbcs	r2, r2
    7cfa:	4252      	negs	r2, r2
    7cfc:	1aab      	subs	r3, r5, r2
    7cfe:	469a      	mov	sl, r3
    7d00:	4598      	cmp	r8, r3
    7d02:	d100      	bne.n	7d06 <__aeabi_ddiv+0x30a>
    7d04:	e117      	b.n	7f36 <__aeabi_ddiv+0x53a>
    7d06:	0039      	movs	r1, r7
    7d08:	0018      	movs	r0, r3
    7d0a:	f7ff f921 	bl	6f50 <__udivsi3>
    7d0e:	9b01      	ldr	r3, [sp, #4]
    7d10:	0005      	movs	r5, r0
    7d12:	4343      	muls	r3, r0
    7d14:	0039      	movs	r1, r7
    7d16:	4650      	mov	r0, sl
    7d18:	9304      	str	r3, [sp, #16]
    7d1a:	f7ff f99f 	bl	705c <__aeabi_uidivmod>
    7d1e:	9804      	ldr	r0, [sp, #16]
    7d20:	040b      	lsls	r3, r1, #16
    7d22:	0c31      	lsrs	r1, r6, #16
    7d24:	4319      	orrs	r1, r3
    7d26:	4288      	cmp	r0, r1
    7d28:	d909      	bls.n	7d3e <__aeabi_ddiv+0x342>
    7d2a:	4441      	add	r1, r8
    7d2c:	1e6b      	subs	r3, r5, #1
    7d2e:	4588      	cmp	r8, r1
    7d30:	d900      	bls.n	7d34 <__aeabi_ddiv+0x338>
    7d32:	e107      	b.n	7f44 <__aeabi_ddiv+0x548>
    7d34:	4288      	cmp	r0, r1
    7d36:	d800      	bhi.n	7d3a <__aeabi_ddiv+0x33e>
    7d38:	e104      	b.n	7f44 <__aeabi_ddiv+0x548>
    7d3a:	3d02      	subs	r5, #2
    7d3c:	4441      	add	r1, r8
    7d3e:	9b04      	ldr	r3, [sp, #16]
    7d40:	1acb      	subs	r3, r1, r3
    7d42:	0018      	movs	r0, r3
    7d44:	0039      	movs	r1, r7
    7d46:	9304      	str	r3, [sp, #16]
    7d48:	f7ff f902 	bl	6f50 <__udivsi3>
    7d4c:	9b01      	ldr	r3, [sp, #4]
    7d4e:	4682      	mov	sl, r0
    7d50:	4343      	muls	r3, r0
    7d52:	0039      	movs	r1, r7
    7d54:	9804      	ldr	r0, [sp, #16]
    7d56:	9301      	str	r3, [sp, #4]
    7d58:	f7ff f980 	bl	705c <__aeabi_uidivmod>
    7d5c:	9801      	ldr	r0, [sp, #4]
    7d5e:	040b      	lsls	r3, r1, #16
    7d60:	0431      	lsls	r1, r6, #16
    7d62:	0c09      	lsrs	r1, r1, #16
    7d64:	4319      	orrs	r1, r3
    7d66:	4288      	cmp	r0, r1
    7d68:	d90d      	bls.n	7d86 <__aeabi_ddiv+0x38a>
    7d6a:	4653      	mov	r3, sl
    7d6c:	4441      	add	r1, r8
    7d6e:	3b01      	subs	r3, #1
    7d70:	4588      	cmp	r8, r1
    7d72:	d900      	bls.n	7d76 <__aeabi_ddiv+0x37a>
    7d74:	e0e8      	b.n	7f48 <__aeabi_ddiv+0x54c>
    7d76:	4288      	cmp	r0, r1
    7d78:	d800      	bhi.n	7d7c <__aeabi_ddiv+0x380>
    7d7a:	e0e5      	b.n	7f48 <__aeabi_ddiv+0x54c>
    7d7c:	2302      	movs	r3, #2
    7d7e:	425b      	negs	r3, r3
    7d80:	469c      	mov	ip, r3
    7d82:	4441      	add	r1, r8
    7d84:	44e2      	add	sl, ip
    7d86:	9b01      	ldr	r3, [sp, #4]
    7d88:	042d      	lsls	r5, r5, #16
    7d8a:	1ace      	subs	r6, r1, r3
    7d8c:	4651      	mov	r1, sl
    7d8e:	4329      	orrs	r1, r5
    7d90:	9d05      	ldr	r5, [sp, #20]
    7d92:	464f      	mov	r7, r9
    7d94:	002a      	movs	r2, r5
    7d96:	040b      	lsls	r3, r1, #16
    7d98:	0c08      	lsrs	r0, r1, #16
    7d9a:	0c1b      	lsrs	r3, r3, #16
    7d9c:	435a      	muls	r2, r3
    7d9e:	4345      	muls	r5, r0
    7da0:	437b      	muls	r3, r7
    7da2:	4378      	muls	r0, r7
    7da4:	195b      	adds	r3, r3, r5
    7da6:	0c17      	lsrs	r7, r2, #16
    7da8:	18fb      	adds	r3, r7, r3
    7daa:	429d      	cmp	r5, r3
    7dac:	d903      	bls.n	7db6 <__aeabi_ddiv+0x3ba>
    7dae:	2580      	movs	r5, #128	; 0x80
    7db0:	026d      	lsls	r5, r5, #9
    7db2:	46ac      	mov	ip, r5
    7db4:	4460      	add	r0, ip
    7db6:	0c1d      	lsrs	r5, r3, #16
    7db8:	0412      	lsls	r2, r2, #16
    7dba:	041b      	lsls	r3, r3, #16
    7dbc:	0c12      	lsrs	r2, r2, #16
    7dbe:	1828      	adds	r0, r5, r0
    7dc0:	189b      	adds	r3, r3, r2
    7dc2:	4286      	cmp	r6, r0
    7dc4:	d200      	bcs.n	7dc8 <__aeabi_ddiv+0x3cc>
    7dc6:	e093      	b.n	7ef0 <__aeabi_ddiv+0x4f4>
    7dc8:	d100      	bne.n	7dcc <__aeabi_ddiv+0x3d0>
    7dca:	e08e      	b.n	7eea <__aeabi_ddiv+0x4ee>
    7dcc:	2301      	movs	r3, #1
    7dce:	4319      	orrs	r1, r3
    7dd0:	4ba0      	ldr	r3, [pc, #640]	; (8054 <__aeabi_ddiv+0x658>)
    7dd2:	18e3      	adds	r3, r4, r3
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	dc00      	bgt.n	7dda <__aeabi_ddiv+0x3de>
    7dd8:	e099      	b.n	7f0e <__aeabi_ddiv+0x512>
    7dda:	074a      	lsls	r2, r1, #29
    7ddc:	d000      	beq.n	7de0 <__aeabi_ddiv+0x3e4>
    7dde:	e09e      	b.n	7f1e <__aeabi_ddiv+0x522>
    7de0:	465a      	mov	r2, fp
    7de2:	01d2      	lsls	r2, r2, #7
    7de4:	d506      	bpl.n	7df4 <__aeabi_ddiv+0x3f8>
    7de6:	465a      	mov	r2, fp
    7de8:	4b9b      	ldr	r3, [pc, #620]	; (8058 <__aeabi_ddiv+0x65c>)
    7dea:	401a      	ands	r2, r3
    7dec:	2380      	movs	r3, #128	; 0x80
    7dee:	4693      	mov	fp, r2
    7df0:	00db      	lsls	r3, r3, #3
=======
    7b62:	40d9      	lsrs	r1, r3
    7b64:	000b      	movs	r3, r1
    7b66:	4659      	mov	r1, fp
    7b68:	430b      	orrs	r3, r1
    7b6a:	4651      	mov	r1, sl
    7b6c:	469b      	mov	fp, r3
    7b6e:	4091      	lsls	r1, r2
    7b70:	4b26      	ldr	r3, [pc, #152]	; (7c0c <__aeabi_ddiv+0x1f0>)
    7b72:	2200      	movs	r2, #0
    7b74:	1a1b      	subs	r3, r3, r0
    7b76:	e78f      	b.n	7a98 <__aeabi_ddiv+0x7c>
    7b78:	2300      	movs	r3, #0
    7b7a:	2201      	movs	r2, #1
    7b7c:	469b      	mov	fp, r3
    7b7e:	e78b      	b.n	7a98 <__aeabi_ddiv+0x7c>
    7b80:	4651      	mov	r1, sl
    7b82:	2203      	movs	r2, #3
    7b84:	e788      	b.n	7a98 <__aeabi_ddiv+0x7c>
    7b86:	2300      	movs	r3, #0
    7b88:	4698      	mov	r8, r3
    7b8a:	3301      	adds	r3, #1
    7b8c:	2604      	movs	r6, #4
    7b8e:	2400      	movs	r4, #0
    7b90:	9303      	str	r3, [sp, #12]
    7b92:	e767      	b.n	7a64 <__aeabi_ddiv+0x48>
    7b94:	2303      	movs	r3, #3
    7b96:	46b1      	mov	r9, r6
    7b98:	9303      	str	r3, [sp, #12]
    7b9a:	260c      	movs	r6, #12
    7b9c:	e762      	b.n	7a64 <__aeabi_ddiv+0x48>
    7b9e:	2a03      	cmp	r2, #3
    7ba0:	d100      	bne.n	7ba4 <__aeabi_ddiv+0x188>
    7ba2:	e25c      	b.n	805e <__aeabi_ddiv+0x642>
    7ba4:	9b01      	ldr	r3, [sp, #4]
    7ba6:	2a01      	cmp	r2, #1
    7ba8:	d000      	beq.n	7bac <__aeabi_ddiv+0x190>
    7baa:	e1e4      	b.n	7f76 <__aeabi_ddiv+0x55a>
    7bac:	4013      	ands	r3, r2
    7bae:	469c      	mov	ip, r3
    7bb0:	2300      	movs	r3, #0
    7bb2:	2400      	movs	r4, #0
    7bb4:	2200      	movs	r2, #0
    7bb6:	4698      	mov	r8, r3
    7bb8:	2100      	movs	r1, #0
    7bba:	0312      	lsls	r2, r2, #12
    7bbc:	0b13      	lsrs	r3, r2, #12
    7bbe:	0d0a      	lsrs	r2, r1, #20
    7bc0:	0512      	lsls	r2, r2, #20
    7bc2:	431a      	orrs	r2, r3
    7bc4:	0523      	lsls	r3, r4, #20
    7bc6:	4c12      	ldr	r4, [pc, #72]	; (7c10 <__aeabi_ddiv+0x1f4>)
    7bc8:	4640      	mov	r0, r8
    7bca:	4022      	ands	r2, r4
    7bcc:	4313      	orrs	r3, r2
    7bce:	4662      	mov	r2, ip
    7bd0:	005b      	lsls	r3, r3, #1
    7bd2:	07d2      	lsls	r2, r2, #31
    7bd4:	085b      	lsrs	r3, r3, #1
    7bd6:	4313      	orrs	r3, r2
    7bd8:	0019      	movs	r1, r3
    7bda:	b007      	add	sp, #28
    7bdc:	bc3c      	pop	{r2, r3, r4, r5}
    7bde:	4690      	mov	r8, r2
    7be0:	4699      	mov	r9, r3
    7be2:	46a2      	mov	sl, r4
    7be4:	46ab      	mov	fp, r5
    7be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7be8:	2300      	movs	r3, #0
    7bea:	2280      	movs	r2, #128	; 0x80
    7bec:	469c      	mov	ip, r3
    7bee:	0312      	lsls	r2, r2, #12
    7bf0:	4698      	mov	r8, r3
    7bf2:	4c03      	ldr	r4, [pc, #12]	; (7c00 <__aeabi_ddiv+0x1e4>)
    7bf4:	e7e0      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    7bf6:	2300      	movs	r3, #0
    7bf8:	4c01      	ldr	r4, [pc, #4]	; (7c00 <__aeabi_ddiv+0x1e4>)
    7bfa:	2200      	movs	r2, #0
    7bfc:	4698      	mov	r8, r3
    7bfe:	e7db      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    7c00:	000007ff 	.word	0x000007ff
    7c04:	fffffc01 	.word	0xfffffc01
    7c08:	0000aac4 	.word	0x0000aac4
    7c0c:	fffffc0d 	.word	0xfffffc0d
    7c10:	800fffff 	.word	0x800fffff
    7c14:	45d9      	cmp	r9, fp
    7c16:	d900      	bls.n	7c1a <__aeabi_ddiv+0x1fe>
    7c18:	e139      	b.n	7e8e <__aeabi_ddiv+0x472>
    7c1a:	d100      	bne.n	7c1e <__aeabi_ddiv+0x202>
    7c1c:	e134      	b.n	7e88 <__aeabi_ddiv+0x46c>
    7c1e:	2300      	movs	r3, #0
    7c20:	4646      	mov	r6, r8
    7c22:	464d      	mov	r5, r9
    7c24:	469a      	mov	sl, r3
    7c26:	3c01      	subs	r4, #1
    7c28:	465b      	mov	r3, fp
    7c2a:	0e0a      	lsrs	r2, r1, #24
    7c2c:	021b      	lsls	r3, r3, #8
    7c2e:	431a      	orrs	r2, r3
    7c30:	020b      	lsls	r3, r1, #8
    7c32:	0c17      	lsrs	r7, r2, #16
    7c34:	9303      	str	r3, [sp, #12]
    7c36:	0413      	lsls	r3, r2, #16
    7c38:	0c1b      	lsrs	r3, r3, #16
    7c3a:	0039      	movs	r1, r7
    7c3c:	0028      	movs	r0, r5
    7c3e:	4690      	mov	r8, r2
    7c40:	9301      	str	r3, [sp, #4]
    7c42:	f7ff f995 	bl	6f70 <__udivsi3>
    7c46:	0002      	movs	r2, r0
    7c48:	9b01      	ldr	r3, [sp, #4]
    7c4a:	4683      	mov	fp, r0
    7c4c:	435a      	muls	r2, r3
    7c4e:	0028      	movs	r0, r5
    7c50:	0039      	movs	r1, r7
    7c52:	4691      	mov	r9, r2
    7c54:	f7ff fa12 	bl	707c <__aeabi_uidivmod>
    7c58:	0c35      	lsrs	r5, r6, #16
    7c5a:	0409      	lsls	r1, r1, #16
    7c5c:	430d      	orrs	r5, r1
    7c5e:	45a9      	cmp	r9, r5
    7c60:	d90d      	bls.n	7c7e <__aeabi_ddiv+0x262>
    7c62:	465b      	mov	r3, fp
    7c64:	4445      	add	r5, r8
    7c66:	3b01      	subs	r3, #1
    7c68:	45a8      	cmp	r8, r5
    7c6a:	d900      	bls.n	7c6e <__aeabi_ddiv+0x252>
    7c6c:	e13a      	b.n	7ee4 <__aeabi_ddiv+0x4c8>
    7c6e:	45a9      	cmp	r9, r5
    7c70:	d800      	bhi.n	7c74 <__aeabi_ddiv+0x258>
    7c72:	e137      	b.n	7ee4 <__aeabi_ddiv+0x4c8>
    7c74:	2302      	movs	r3, #2
    7c76:	425b      	negs	r3, r3
    7c78:	469c      	mov	ip, r3
    7c7a:	4445      	add	r5, r8
    7c7c:	44e3      	add	fp, ip
    7c7e:	464b      	mov	r3, r9
    7c80:	1aeb      	subs	r3, r5, r3
    7c82:	0039      	movs	r1, r7
    7c84:	0018      	movs	r0, r3
    7c86:	9304      	str	r3, [sp, #16]
    7c88:	f7ff f972 	bl	6f70 <__udivsi3>
    7c8c:	9b01      	ldr	r3, [sp, #4]
    7c8e:	0005      	movs	r5, r0
    7c90:	4343      	muls	r3, r0
    7c92:	0039      	movs	r1, r7
    7c94:	9804      	ldr	r0, [sp, #16]
    7c96:	4699      	mov	r9, r3
    7c98:	f7ff f9f0 	bl	707c <__aeabi_uidivmod>
    7c9c:	0433      	lsls	r3, r6, #16
    7c9e:	0409      	lsls	r1, r1, #16
    7ca0:	0c1b      	lsrs	r3, r3, #16
    7ca2:	430b      	orrs	r3, r1
    7ca4:	4599      	cmp	r9, r3
    7ca6:	d909      	bls.n	7cbc <__aeabi_ddiv+0x2a0>
    7ca8:	4443      	add	r3, r8
    7caa:	1e6a      	subs	r2, r5, #1
    7cac:	4598      	cmp	r8, r3
    7cae:	d900      	bls.n	7cb2 <__aeabi_ddiv+0x296>
    7cb0:	e11a      	b.n	7ee8 <__aeabi_ddiv+0x4cc>
    7cb2:	4599      	cmp	r9, r3
    7cb4:	d800      	bhi.n	7cb8 <__aeabi_ddiv+0x29c>
    7cb6:	e117      	b.n	7ee8 <__aeabi_ddiv+0x4cc>
    7cb8:	3d02      	subs	r5, #2
    7cba:	4443      	add	r3, r8
    7cbc:	464a      	mov	r2, r9
    7cbe:	1a9b      	subs	r3, r3, r2
    7cc0:	465a      	mov	r2, fp
    7cc2:	0412      	lsls	r2, r2, #16
    7cc4:	432a      	orrs	r2, r5
    7cc6:	9903      	ldr	r1, [sp, #12]
    7cc8:	4693      	mov	fp, r2
    7cca:	0c10      	lsrs	r0, r2, #16
    7ccc:	0c0a      	lsrs	r2, r1, #16
    7cce:	4691      	mov	r9, r2
    7cd0:	0409      	lsls	r1, r1, #16
    7cd2:	465a      	mov	r2, fp
    7cd4:	0c09      	lsrs	r1, r1, #16
    7cd6:	464e      	mov	r6, r9
    7cd8:	000d      	movs	r5, r1
    7cda:	0412      	lsls	r2, r2, #16
    7cdc:	0c12      	lsrs	r2, r2, #16
    7cde:	4345      	muls	r5, r0
    7ce0:	9105      	str	r1, [sp, #20]
    7ce2:	4351      	muls	r1, r2
    7ce4:	4372      	muls	r2, r6
    7ce6:	4370      	muls	r0, r6
    7ce8:	1952      	adds	r2, r2, r5
    7cea:	0c0e      	lsrs	r6, r1, #16
    7cec:	18b2      	adds	r2, r6, r2
    7cee:	4295      	cmp	r5, r2
    7cf0:	d903      	bls.n	7cfa <__aeabi_ddiv+0x2de>
    7cf2:	2580      	movs	r5, #128	; 0x80
    7cf4:	026d      	lsls	r5, r5, #9
    7cf6:	46ac      	mov	ip, r5
    7cf8:	4460      	add	r0, ip
    7cfa:	0c15      	lsrs	r5, r2, #16
    7cfc:	0409      	lsls	r1, r1, #16
    7cfe:	0412      	lsls	r2, r2, #16
    7d00:	0c09      	lsrs	r1, r1, #16
    7d02:	1828      	adds	r0, r5, r0
    7d04:	1852      	adds	r2, r2, r1
    7d06:	4283      	cmp	r3, r0
    7d08:	d200      	bcs.n	7d0c <__aeabi_ddiv+0x2f0>
    7d0a:	e0ce      	b.n	7eaa <__aeabi_ddiv+0x48e>
    7d0c:	d100      	bne.n	7d10 <__aeabi_ddiv+0x2f4>
    7d0e:	e0c8      	b.n	7ea2 <__aeabi_ddiv+0x486>
    7d10:	1a1d      	subs	r5, r3, r0
    7d12:	4653      	mov	r3, sl
    7d14:	1a9e      	subs	r6, r3, r2
    7d16:	45b2      	cmp	sl, r6
    7d18:	4192      	sbcs	r2, r2
    7d1a:	4252      	negs	r2, r2
    7d1c:	1aab      	subs	r3, r5, r2
    7d1e:	469a      	mov	sl, r3
    7d20:	4598      	cmp	r8, r3
    7d22:	d100      	bne.n	7d26 <__aeabi_ddiv+0x30a>
    7d24:	e117      	b.n	7f56 <__aeabi_ddiv+0x53a>
    7d26:	0039      	movs	r1, r7
    7d28:	0018      	movs	r0, r3
    7d2a:	f7ff f921 	bl	6f70 <__udivsi3>
    7d2e:	9b01      	ldr	r3, [sp, #4]
    7d30:	0005      	movs	r5, r0
    7d32:	4343      	muls	r3, r0
    7d34:	0039      	movs	r1, r7
    7d36:	4650      	mov	r0, sl
    7d38:	9304      	str	r3, [sp, #16]
    7d3a:	f7ff f99f 	bl	707c <__aeabi_uidivmod>
    7d3e:	9804      	ldr	r0, [sp, #16]
    7d40:	040b      	lsls	r3, r1, #16
    7d42:	0c31      	lsrs	r1, r6, #16
    7d44:	4319      	orrs	r1, r3
    7d46:	4288      	cmp	r0, r1
    7d48:	d909      	bls.n	7d5e <__aeabi_ddiv+0x342>
    7d4a:	4441      	add	r1, r8
    7d4c:	1e6b      	subs	r3, r5, #1
    7d4e:	4588      	cmp	r8, r1
    7d50:	d900      	bls.n	7d54 <__aeabi_ddiv+0x338>
    7d52:	e107      	b.n	7f64 <__aeabi_ddiv+0x548>
    7d54:	4288      	cmp	r0, r1
    7d56:	d800      	bhi.n	7d5a <__aeabi_ddiv+0x33e>
    7d58:	e104      	b.n	7f64 <__aeabi_ddiv+0x548>
    7d5a:	3d02      	subs	r5, #2
    7d5c:	4441      	add	r1, r8
    7d5e:	9b04      	ldr	r3, [sp, #16]
    7d60:	1acb      	subs	r3, r1, r3
    7d62:	0018      	movs	r0, r3
    7d64:	0039      	movs	r1, r7
    7d66:	9304      	str	r3, [sp, #16]
    7d68:	f7ff f902 	bl	6f70 <__udivsi3>
    7d6c:	9b01      	ldr	r3, [sp, #4]
    7d6e:	4682      	mov	sl, r0
    7d70:	4343      	muls	r3, r0
    7d72:	0039      	movs	r1, r7
    7d74:	9804      	ldr	r0, [sp, #16]
    7d76:	9301      	str	r3, [sp, #4]
    7d78:	f7ff f980 	bl	707c <__aeabi_uidivmod>
    7d7c:	9801      	ldr	r0, [sp, #4]
    7d7e:	040b      	lsls	r3, r1, #16
    7d80:	0431      	lsls	r1, r6, #16
    7d82:	0c09      	lsrs	r1, r1, #16
    7d84:	4319      	orrs	r1, r3
    7d86:	4288      	cmp	r0, r1
    7d88:	d90d      	bls.n	7da6 <__aeabi_ddiv+0x38a>
    7d8a:	4653      	mov	r3, sl
    7d8c:	4441      	add	r1, r8
    7d8e:	3b01      	subs	r3, #1
    7d90:	4588      	cmp	r8, r1
    7d92:	d900      	bls.n	7d96 <__aeabi_ddiv+0x37a>
    7d94:	e0e8      	b.n	7f68 <__aeabi_ddiv+0x54c>
    7d96:	4288      	cmp	r0, r1
    7d98:	d800      	bhi.n	7d9c <__aeabi_ddiv+0x380>
    7d9a:	e0e5      	b.n	7f68 <__aeabi_ddiv+0x54c>
    7d9c:	2302      	movs	r3, #2
    7d9e:	425b      	negs	r3, r3
    7da0:	469c      	mov	ip, r3
    7da2:	4441      	add	r1, r8
    7da4:	44e2      	add	sl, ip
    7da6:	9b01      	ldr	r3, [sp, #4]
    7da8:	042d      	lsls	r5, r5, #16
    7daa:	1ace      	subs	r6, r1, r3
    7dac:	4651      	mov	r1, sl
    7dae:	4329      	orrs	r1, r5
    7db0:	9d05      	ldr	r5, [sp, #20]
    7db2:	464f      	mov	r7, r9
    7db4:	002a      	movs	r2, r5
    7db6:	040b      	lsls	r3, r1, #16
    7db8:	0c08      	lsrs	r0, r1, #16
    7dba:	0c1b      	lsrs	r3, r3, #16
    7dbc:	435a      	muls	r2, r3
    7dbe:	4345      	muls	r5, r0
    7dc0:	437b      	muls	r3, r7
    7dc2:	4378      	muls	r0, r7
    7dc4:	195b      	adds	r3, r3, r5
    7dc6:	0c17      	lsrs	r7, r2, #16
    7dc8:	18fb      	adds	r3, r7, r3
    7dca:	429d      	cmp	r5, r3
    7dcc:	d903      	bls.n	7dd6 <__aeabi_ddiv+0x3ba>
    7dce:	2580      	movs	r5, #128	; 0x80
    7dd0:	026d      	lsls	r5, r5, #9
    7dd2:	46ac      	mov	ip, r5
    7dd4:	4460      	add	r0, ip
    7dd6:	0c1d      	lsrs	r5, r3, #16
    7dd8:	0412      	lsls	r2, r2, #16
    7dda:	041b      	lsls	r3, r3, #16
    7ddc:	0c12      	lsrs	r2, r2, #16
    7dde:	1828      	adds	r0, r5, r0
    7de0:	189b      	adds	r3, r3, r2
    7de2:	4286      	cmp	r6, r0
    7de4:	d200      	bcs.n	7de8 <__aeabi_ddiv+0x3cc>
    7de6:	e093      	b.n	7f10 <__aeabi_ddiv+0x4f4>
    7de8:	d100      	bne.n	7dec <__aeabi_ddiv+0x3d0>
    7dea:	e08e      	b.n	7f0a <__aeabi_ddiv+0x4ee>
    7dec:	2301      	movs	r3, #1
    7dee:	4319      	orrs	r1, r3
    7df0:	4ba0      	ldr	r3, [pc, #640]	; (8074 <__aeabi_ddiv+0x658>)
>>>>>>> Stashed changes
    7df2:	18e3      	adds	r3, r4, r3
    7df4:	2b00      	cmp	r3, #0
    7df6:	dc00      	bgt.n	7dfa <__aeabi_ddiv+0x3de>
    7df8:	e099      	b.n	7f2e <__aeabi_ddiv+0x512>
    7dfa:	074a      	lsls	r2, r1, #29
    7dfc:	d000      	beq.n	7e00 <__aeabi_ddiv+0x3e4>
    7dfe:	e09e      	b.n	7f3e <__aeabi_ddiv+0x522>
    7e00:	465a      	mov	r2, fp
    7e02:	01d2      	lsls	r2, r2, #7
    7e04:	d506      	bpl.n	7e14 <__aeabi_ddiv+0x3f8>
    7e06:	465a      	mov	r2, fp
    7e08:	4b9b      	ldr	r3, [pc, #620]	; (8078 <__aeabi_ddiv+0x65c>)
    7e0a:	401a      	ands	r2, r3
    7e0c:	2380      	movs	r3, #128	; 0x80
    7e0e:	4693      	mov	fp, r2
    7e10:	00db      	lsls	r3, r3, #3
    7e12:	18e3      	adds	r3, r4, r3
    7e14:	4a99      	ldr	r2, [pc, #612]	; (807c <__aeabi_ddiv+0x660>)
    7e16:	4293      	cmp	r3, r2
    7e18:	dd68      	ble.n	7eec <__aeabi_ddiv+0x4d0>
    7e1a:	2301      	movs	r3, #1
    7e1c:	9a02      	ldr	r2, [sp, #8]
    7e1e:	4c98      	ldr	r4, [pc, #608]	; (8080 <__aeabi_ddiv+0x664>)
    7e20:	401a      	ands	r2, r3
    7e22:	2300      	movs	r3, #0
    7e24:	4694      	mov	ip, r2
    7e26:	4698      	mov	r8, r3
    7e28:	2200      	movs	r2, #0
    7e2a:	e6c5      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    7e2c:	2280      	movs	r2, #128	; 0x80
    7e2e:	464b      	mov	r3, r9
    7e30:	0312      	lsls	r2, r2, #12
    7e32:	4213      	tst	r3, r2
    7e34:	d00a      	beq.n	7e4c <__aeabi_ddiv+0x430>
    7e36:	465b      	mov	r3, fp
    7e38:	4213      	tst	r3, r2
    7e3a:	d106      	bne.n	7e4a <__aeabi_ddiv+0x42e>
    7e3c:	431a      	orrs	r2, r3
    7e3e:	0312      	lsls	r2, r2, #12
    7e40:	0b12      	lsrs	r2, r2, #12
    7e42:	46ac      	mov	ip, r5
    7e44:	4688      	mov	r8, r1
    7e46:	4c8e      	ldr	r4, [pc, #568]	; (8080 <__aeabi_ddiv+0x664>)
    7e48:	e6b6      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    7e4a:	464b      	mov	r3, r9
    7e4c:	431a      	orrs	r2, r3
    7e4e:	0312      	lsls	r2, r2, #12
    7e50:	0b12      	lsrs	r2, r2, #12
    7e52:	46bc      	mov	ip, r7
    7e54:	4c8a      	ldr	r4, [pc, #552]	; (8080 <__aeabi_ddiv+0x664>)
    7e56:	e6af      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    7e58:	0003      	movs	r3, r0
    7e5a:	465a      	mov	r2, fp
    7e5c:	3b28      	subs	r3, #40	; 0x28
    7e5e:	409a      	lsls	r2, r3
    7e60:	2300      	movs	r3, #0
    7e62:	4691      	mov	r9, r2
    7e64:	4698      	mov	r8, r3
    7e66:	e657      	b.n	7b18 <__aeabi_ddiv+0xfc>
    7e68:	4658      	mov	r0, fp
    7e6a:	f000 ff0d 	bl	8c88 <__clzsi2>
    7e6e:	3020      	adds	r0, #32
    7e70:	e640      	b.n	7af4 <__aeabi_ddiv+0xd8>
    7e72:	0003      	movs	r3, r0
    7e74:	4652      	mov	r2, sl
    7e76:	3b28      	subs	r3, #40	; 0x28
    7e78:	409a      	lsls	r2, r3
    7e7a:	2100      	movs	r1, #0
    7e7c:	4693      	mov	fp, r2
    7e7e:	e677      	b.n	7b70 <__aeabi_ddiv+0x154>
    7e80:	f000 ff02 	bl	8c88 <__clzsi2>
    7e84:	3020      	adds	r0, #32
    7e86:	e65f      	b.n	7b48 <__aeabi_ddiv+0x12c>
    7e88:	4588      	cmp	r8, r1
    7e8a:	d200      	bcs.n	7e8e <__aeabi_ddiv+0x472>
    7e8c:	e6c7      	b.n	7c1e <__aeabi_ddiv+0x202>
    7e8e:	464b      	mov	r3, r9
    7e90:	07de      	lsls	r6, r3, #31
    7e92:	085d      	lsrs	r5, r3, #1
    7e94:	4643      	mov	r3, r8
    7e96:	085b      	lsrs	r3, r3, #1
    7e98:	431e      	orrs	r6, r3
    7e9a:	4643      	mov	r3, r8
    7e9c:	07db      	lsls	r3, r3, #31
    7e9e:	469a      	mov	sl, r3
    7ea0:	e6c2      	b.n	7c28 <__aeabi_ddiv+0x20c>
    7ea2:	2500      	movs	r5, #0
    7ea4:	4592      	cmp	sl, r2
    7ea6:	d300      	bcc.n	7eaa <__aeabi_ddiv+0x48e>
    7ea8:	e733      	b.n	7d12 <__aeabi_ddiv+0x2f6>
    7eaa:	9e03      	ldr	r6, [sp, #12]
    7eac:	4659      	mov	r1, fp
    7eae:	46b4      	mov	ip, r6
    7eb0:	44e2      	add	sl, ip
    7eb2:	45b2      	cmp	sl, r6
    7eb4:	41ad      	sbcs	r5, r5
    7eb6:	426d      	negs	r5, r5
    7eb8:	4445      	add	r5, r8
    7eba:	18eb      	adds	r3, r5, r3
    7ebc:	3901      	subs	r1, #1
    7ebe:	4598      	cmp	r8, r3
    7ec0:	d207      	bcs.n	7ed2 <__aeabi_ddiv+0x4b6>
    7ec2:	4298      	cmp	r0, r3
    7ec4:	d900      	bls.n	7ec8 <__aeabi_ddiv+0x4ac>
    7ec6:	e07f      	b.n	7fc8 <__aeabi_ddiv+0x5ac>
    7ec8:	d100      	bne.n	7ecc <__aeabi_ddiv+0x4b0>
    7eca:	e0bc      	b.n	8046 <__aeabi_ddiv+0x62a>
    7ecc:	1a1d      	subs	r5, r3, r0
    7ece:	468b      	mov	fp, r1
    7ed0:	e71f      	b.n	7d12 <__aeabi_ddiv+0x2f6>
    7ed2:	4598      	cmp	r8, r3
    7ed4:	d1fa      	bne.n	7ecc <__aeabi_ddiv+0x4b0>
    7ed6:	9d03      	ldr	r5, [sp, #12]
    7ed8:	4555      	cmp	r5, sl
    7eda:	d9f2      	bls.n	7ec2 <__aeabi_ddiv+0x4a6>
    7edc:	4643      	mov	r3, r8
    7ede:	468b      	mov	fp, r1
    7ee0:	1a1d      	subs	r5, r3, r0
    7ee2:	e716      	b.n	7d12 <__aeabi_ddiv+0x2f6>
    7ee4:	469b      	mov	fp, r3
    7ee6:	e6ca      	b.n	7c7e <__aeabi_ddiv+0x262>
    7ee8:	0015      	movs	r5, r2
    7eea:	e6e7      	b.n	7cbc <__aeabi_ddiv+0x2a0>
    7eec:	465a      	mov	r2, fp
    7eee:	08c9      	lsrs	r1, r1, #3
    7ef0:	0752      	lsls	r2, r2, #29
    7ef2:	430a      	orrs	r2, r1
    7ef4:	055b      	lsls	r3, r3, #21
    7ef6:	4690      	mov	r8, r2
    7ef8:	0d5c      	lsrs	r4, r3, #21
    7efa:	465a      	mov	r2, fp
    7efc:	2301      	movs	r3, #1
    7efe:	9902      	ldr	r1, [sp, #8]
    7f00:	0252      	lsls	r2, r2, #9
    7f02:	4019      	ands	r1, r3
    7f04:	0b12      	lsrs	r2, r2, #12
    7f06:	468c      	mov	ip, r1
    7f08:	e656      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    7f0a:	2b00      	cmp	r3, #0
    7f0c:	d100      	bne.n	7f10 <__aeabi_ddiv+0x4f4>
    7f0e:	e76f      	b.n	7df0 <__aeabi_ddiv+0x3d4>
    7f10:	4446      	add	r6, r8
    7f12:	1e4a      	subs	r2, r1, #1
    7f14:	45b0      	cmp	r8, r6
    7f16:	d929      	bls.n	7f6c <__aeabi_ddiv+0x550>
    7f18:	0011      	movs	r1, r2
    7f1a:	4286      	cmp	r6, r0
    7f1c:	d000      	beq.n	7f20 <__aeabi_ddiv+0x504>
    7f1e:	e765      	b.n	7dec <__aeabi_ddiv+0x3d0>
    7f20:	9a03      	ldr	r2, [sp, #12]
    7f22:	4293      	cmp	r3, r2
    7f24:	d000      	beq.n	7f28 <__aeabi_ddiv+0x50c>
    7f26:	e761      	b.n	7dec <__aeabi_ddiv+0x3d0>
    7f28:	e762      	b.n	7df0 <__aeabi_ddiv+0x3d4>
    7f2a:	2101      	movs	r1, #1
    7f2c:	4249      	negs	r1, r1
    7f2e:	2001      	movs	r0, #1
    7f30:	1ac2      	subs	r2, r0, r3
    7f32:	2a38      	cmp	r2, #56	; 0x38
    7f34:	dd21      	ble.n	7f7a <__aeabi_ddiv+0x55e>
    7f36:	9b02      	ldr	r3, [sp, #8]
    7f38:	4003      	ands	r3, r0
    7f3a:	469c      	mov	ip, r3
    7f3c:	e638      	b.n	7bb0 <__aeabi_ddiv+0x194>
    7f3e:	220f      	movs	r2, #15
    7f40:	400a      	ands	r2, r1
    7f42:	2a04      	cmp	r2, #4
    7f44:	d100      	bne.n	7f48 <__aeabi_ddiv+0x52c>
    7f46:	e75b      	b.n	7e00 <__aeabi_ddiv+0x3e4>
    7f48:	000a      	movs	r2, r1
    7f4a:	1d11      	adds	r1, r2, #4
    7f4c:	4291      	cmp	r1, r2
    7f4e:	4192      	sbcs	r2, r2
    7f50:	4252      	negs	r2, r2
    7f52:	4493      	add	fp, r2
    7f54:	e754      	b.n	7e00 <__aeabi_ddiv+0x3e4>
    7f56:	4b47      	ldr	r3, [pc, #284]	; (8074 <__aeabi_ddiv+0x658>)
    7f58:	18e3      	adds	r3, r4, r3
    7f5a:	2b00      	cmp	r3, #0
    7f5c:	dde5      	ble.n	7f2a <__aeabi_ddiv+0x50e>
    7f5e:	2201      	movs	r2, #1
    7f60:	4252      	negs	r2, r2
    7f62:	e7f2      	b.n	7f4a <__aeabi_ddiv+0x52e>
    7f64:	001d      	movs	r5, r3
    7f66:	e6fa      	b.n	7d5e <__aeabi_ddiv+0x342>
    7f68:	469a      	mov	sl, r3
    7f6a:	e71c      	b.n	7da6 <__aeabi_ddiv+0x38a>
    7f6c:	42b0      	cmp	r0, r6
    7f6e:	d839      	bhi.n	7fe4 <__aeabi_ddiv+0x5c8>
    7f70:	d06e      	beq.n	8050 <__aeabi_ddiv+0x634>
    7f72:	0011      	movs	r1, r2
    7f74:	e73a      	b.n	7dec <__aeabi_ddiv+0x3d0>
    7f76:	9302      	str	r3, [sp, #8]
    7f78:	e73a      	b.n	7df0 <__aeabi_ddiv+0x3d4>
    7f7a:	2a1f      	cmp	r2, #31
    7f7c:	dc3c      	bgt.n	7ff8 <__aeabi_ddiv+0x5dc>
    7f7e:	2320      	movs	r3, #32
    7f80:	1a9b      	subs	r3, r3, r2
    7f82:	000c      	movs	r4, r1
    7f84:	4658      	mov	r0, fp
    7f86:	4099      	lsls	r1, r3
    7f88:	4098      	lsls	r0, r3
    7f8a:	1e4b      	subs	r3, r1, #1
    7f8c:	4199      	sbcs	r1, r3
    7f8e:	465b      	mov	r3, fp
    7f90:	40d4      	lsrs	r4, r2
    7f92:	40d3      	lsrs	r3, r2
    7f94:	4320      	orrs	r0, r4
    7f96:	4308      	orrs	r0, r1
    7f98:	001a      	movs	r2, r3
    7f9a:	0743      	lsls	r3, r0, #29
    7f9c:	d009      	beq.n	7fb2 <__aeabi_ddiv+0x596>
    7f9e:	230f      	movs	r3, #15
    7fa0:	4003      	ands	r3, r0
    7fa2:	2b04      	cmp	r3, #4
    7fa4:	d005      	beq.n	7fb2 <__aeabi_ddiv+0x596>
    7fa6:	0001      	movs	r1, r0
    7fa8:	1d08      	adds	r0, r1, #4
    7faa:	4288      	cmp	r0, r1
    7fac:	419b      	sbcs	r3, r3
    7fae:	425b      	negs	r3, r3
    7fb0:	18d2      	adds	r2, r2, r3
    7fb2:	0213      	lsls	r3, r2, #8
    7fb4:	d53a      	bpl.n	802c <__aeabi_ddiv+0x610>
    7fb6:	2301      	movs	r3, #1
    7fb8:	9a02      	ldr	r2, [sp, #8]
    7fba:	2401      	movs	r4, #1
    7fbc:	401a      	ands	r2, r3
    7fbe:	2300      	movs	r3, #0
    7fc0:	4694      	mov	ip, r2
    7fc2:	4698      	mov	r8, r3
    7fc4:	2200      	movs	r2, #0
    7fc6:	e5f7      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    7fc8:	2102      	movs	r1, #2
    7fca:	4249      	negs	r1, r1
    7fcc:	468c      	mov	ip, r1
    7fce:	9d03      	ldr	r5, [sp, #12]
    7fd0:	44e3      	add	fp, ip
    7fd2:	46ac      	mov	ip, r5
    7fd4:	44e2      	add	sl, ip
    7fd6:	45aa      	cmp	sl, r5
    7fd8:	41ad      	sbcs	r5, r5
    7fda:	426d      	negs	r5, r5
    7fdc:	4445      	add	r5, r8
    7fde:	18ed      	adds	r5, r5, r3
    7fe0:	1a2d      	subs	r5, r5, r0
    7fe2:	e696      	b.n	7d12 <__aeabi_ddiv+0x2f6>
    7fe4:	1e8a      	subs	r2, r1, #2
    7fe6:	9903      	ldr	r1, [sp, #12]
    7fe8:	004d      	lsls	r5, r1, #1
    7fea:	428d      	cmp	r5, r1
    7fec:	4189      	sbcs	r1, r1
    7fee:	4249      	negs	r1, r1
    7ff0:	4441      	add	r1, r8
    7ff2:	1876      	adds	r6, r6, r1
    7ff4:	9503      	str	r5, [sp, #12]
    7ff6:	e78f      	b.n	7f18 <__aeabi_ddiv+0x4fc>
    7ff8:	201f      	movs	r0, #31
    7ffa:	4240      	negs	r0, r0
    7ffc:	1ac3      	subs	r3, r0, r3
    7ffe:	4658      	mov	r0, fp
    8000:	40d8      	lsrs	r0, r3
    8002:	0003      	movs	r3, r0
    8004:	2a20      	cmp	r2, #32
    8006:	d028      	beq.n	805a <__aeabi_ddiv+0x63e>
    8008:	2040      	movs	r0, #64	; 0x40
    800a:	465d      	mov	r5, fp
    800c:	1a82      	subs	r2, r0, r2
    800e:	4095      	lsls	r5, r2
    8010:	4329      	orrs	r1, r5
    8012:	1e4a      	subs	r2, r1, #1
    8014:	4191      	sbcs	r1, r2
    8016:	4319      	orrs	r1, r3
    8018:	2307      	movs	r3, #7
    801a:	2200      	movs	r2, #0
    801c:	400b      	ands	r3, r1
    801e:	d009      	beq.n	8034 <__aeabi_ddiv+0x618>
    8020:	230f      	movs	r3, #15
    8022:	2200      	movs	r2, #0
    8024:	400b      	ands	r3, r1
    8026:	0008      	movs	r0, r1
    8028:	2b04      	cmp	r3, #4
    802a:	d1bd      	bne.n	7fa8 <__aeabi_ddiv+0x58c>
    802c:	0001      	movs	r1, r0
    802e:	0753      	lsls	r3, r2, #29
    8030:	0252      	lsls	r2, r2, #9
    8032:	0b12      	lsrs	r2, r2, #12
    8034:	08c9      	lsrs	r1, r1, #3
    8036:	4319      	orrs	r1, r3
    8038:	2301      	movs	r3, #1
    803a:	4688      	mov	r8, r1
    803c:	9902      	ldr	r1, [sp, #8]
    803e:	2400      	movs	r4, #0
    8040:	4019      	ands	r1, r3
    8042:	468c      	mov	ip, r1
    8044:	e5b8      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    8046:	4552      	cmp	r2, sl
    8048:	d8be      	bhi.n	7fc8 <__aeabi_ddiv+0x5ac>
    804a:	468b      	mov	fp, r1
    804c:	2500      	movs	r5, #0
    804e:	e660      	b.n	7d12 <__aeabi_ddiv+0x2f6>
    8050:	9d03      	ldr	r5, [sp, #12]
    8052:	429d      	cmp	r5, r3
    8054:	d3c6      	bcc.n	7fe4 <__aeabi_ddiv+0x5c8>
    8056:	0011      	movs	r1, r2
    8058:	e762      	b.n	7f20 <__aeabi_ddiv+0x504>
    805a:	2500      	movs	r5, #0
    805c:	e7d8      	b.n	8010 <__aeabi_ddiv+0x5f4>
    805e:	2280      	movs	r2, #128	; 0x80
    8060:	465b      	mov	r3, fp
    8062:	0312      	lsls	r2, r2, #12
    8064:	431a      	orrs	r2, r3
    8066:	9b01      	ldr	r3, [sp, #4]
    8068:	0312      	lsls	r2, r2, #12
    806a:	0b12      	lsrs	r2, r2, #12
    806c:	469c      	mov	ip, r3
    806e:	4688      	mov	r8, r1
    8070:	4c03      	ldr	r4, [pc, #12]	; (8080 <__aeabi_ddiv+0x664>)
    8072:	e5a1      	b.n	7bb8 <__aeabi_ddiv+0x19c>
    8074:	000003ff 	.word	0x000003ff
    8078:	feffffff 	.word	0xfeffffff
    807c:	000007fe 	.word	0x000007fe
    8080:	000007ff 	.word	0x000007ff

00008084 <__aeabi_dmul>:
    8084:	b5f0      	push	{r4, r5, r6, r7, lr}
    8086:	4657      	mov	r7, sl
    8088:	4645      	mov	r5, r8
    808a:	46de      	mov	lr, fp
    808c:	464e      	mov	r6, r9
    808e:	b5e0      	push	{r5, r6, r7, lr}
    8090:	030c      	lsls	r4, r1, #12
    8092:	4698      	mov	r8, r3
    8094:	004e      	lsls	r6, r1, #1
    8096:	0b23      	lsrs	r3, r4, #12
    8098:	b087      	sub	sp, #28
    809a:	0007      	movs	r7, r0
    809c:	4692      	mov	sl, r2
    809e:	469b      	mov	fp, r3
    80a0:	0d76      	lsrs	r6, r6, #21
    80a2:	0fcd      	lsrs	r5, r1, #31
    80a4:	2e00      	cmp	r6, #0
    80a6:	d06b      	beq.n	8180 <__aeabi_dmul+0xfc>
    80a8:	4b6d      	ldr	r3, [pc, #436]	; (8260 <__aeabi_dmul+0x1dc>)
    80aa:	429e      	cmp	r6, r3
    80ac:	d035      	beq.n	811a <__aeabi_dmul+0x96>
    80ae:	2480      	movs	r4, #128	; 0x80
    80b0:	465b      	mov	r3, fp
    80b2:	0f42      	lsrs	r2, r0, #29
    80b4:	0424      	lsls	r4, r4, #16
    80b6:	00db      	lsls	r3, r3, #3
    80b8:	4314      	orrs	r4, r2
    80ba:	431c      	orrs	r4, r3
    80bc:	00c3      	lsls	r3, r0, #3
    80be:	4699      	mov	r9, r3
    80c0:	4b68      	ldr	r3, [pc, #416]	; (8264 <__aeabi_dmul+0x1e0>)
    80c2:	46a3      	mov	fp, r4
    80c4:	469c      	mov	ip, r3
    80c6:	2300      	movs	r3, #0
    80c8:	2700      	movs	r7, #0
    80ca:	4466      	add	r6, ip
    80cc:	9302      	str	r3, [sp, #8]
    80ce:	4643      	mov	r3, r8
    80d0:	031c      	lsls	r4, r3, #12
    80d2:	005a      	lsls	r2, r3, #1
    80d4:	0fdb      	lsrs	r3, r3, #31
    80d6:	4650      	mov	r0, sl
    80d8:	0b24      	lsrs	r4, r4, #12
    80da:	0d52      	lsrs	r2, r2, #21
    80dc:	4698      	mov	r8, r3
    80de:	d100      	bne.n	80e2 <__aeabi_dmul+0x5e>
    80e0:	e076      	b.n	81d0 <__aeabi_dmul+0x14c>
    80e2:	4b5f      	ldr	r3, [pc, #380]	; (8260 <__aeabi_dmul+0x1dc>)
    80e4:	429a      	cmp	r2, r3
    80e6:	d06d      	beq.n	81c4 <__aeabi_dmul+0x140>
    80e8:	2380      	movs	r3, #128	; 0x80
    80ea:	0f41      	lsrs	r1, r0, #29
    80ec:	041b      	lsls	r3, r3, #16
    80ee:	430b      	orrs	r3, r1
    80f0:	495c      	ldr	r1, [pc, #368]	; (8264 <__aeabi_dmul+0x1e0>)
    80f2:	00e4      	lsls	r4, r4, #3
    80f4:	468c      	mov	ip, r1
    80f6:	431c      	orrs	r4, r3
    80f8:	00c3      	lsls	r3, r0, #3
    80fa:	2000      	movs	r0, #0
    80fc:	4462      	add	r2, ip
    80fe:	4641      	mov	r1, r8
    8100:	18b6      	adds	r6, r6, r2
    8102:	4069      	eors	r1, r5
    8104:	1c72      	adds	r2, r6, #1
    8106:	9101      	str	r1, [sp, #4]
    8108:	4694      	mov	ip, r2
    810a:	4307      	orrs	r7, r0
    810c:	2f0f      	cmp	r7, #15
    810e:	d900      	bls.n	8112 <__aeabi_dmul+0x8e>
    8110:	e0b0      	b.n	8274 <__aeabi_dmul+0x1f0>
    8112:	4a55      	ldr	r2, [pc, #340]	; (8268 <__aeabi_dmul+0x1e4>)
    8114:	00bf      	lsls	r7, r7, #2
    8116:	59d2      	ldr	r2, [r2, r7]
    8118:	4697      	mov	pc, r2
    811a:	465b      	mov	r3, fp
    811c:	4303      	orrs	r3, r0
    811e:	4699      	mov	r9, r3
    8120:	d000      	beq.n	8124 <__aeabi_dmul+0xa0>
    8122:	e087      	b.n	8234 <__aeabi_dmul+0x1b0>
    8124:	2300      	movs	r3, #0
    8126:	469b      	mov	fp, r3
    8128:	3302      	adds	r3, #2
    812a:	2708      	movs	r7, #8
    812c:	9302      	str	r3, [sp, #8]
    812e:	e7ce      	b.n	80ce <__aeabi_dmul+0x4a>
    8130:	4642      	mov	r2, r8
    8132:	9201      	str	r2, [sp, #4]
    8134:	2802      	cmp	r0, #2
    8136:	d067      	beq.n	8208 <__aeabi_dmul+0x184>
    8138:	2803      	cmp	r0, #3
    813a:	d100      	bne.n	813e <__aeabi_dmul+0xba>
    813c:	e20e      	b.n	855c <__aeabi_dmul+0x4d8>
    813e:	2801      	cmp	r0, #1
    8140:	d000      	beq.n	8144 <__aeabi_dmul+0xc0>
    8142:	e162      	b.n	840a <__aeabi_dmul+0x386>
    8144:	2300      	movs	r3, #0
    8146:	2400      	movs	r4, #0
    8148:	2200      	movs	r2, #0
    814a:	4699      	mov	r9, r3
    814c:	9901      	ldr	r1, [sp, #4]
    814e:	4001      	ands	r1, r0
    8150:	b2cd      	uxtb	r5, r1
    8152:	2100      	movs	r1, #0
    8154:	0312      	lsls	r2, r2, #12
    8156:	0d0b      	lsrs	r3, r1, #20
    8158:	0b12      	lsrs	r2, r2, #12
    815a:	051b      	lsls	r3, r3, #20
    815c:	4313      	orrs	r3, r2
    815e:	4a43      	ldr	r2, [pc, #268]	; (826c <__aeabi_dmul+0x1e8>)
    8160:	0524      	lsls	r4, r4, #20
    8162:	4013      	ands	r3, r2
    8164:	431c      	orrs	r4, r3
    8166:	0064      	lsls	r4, r4, #1
    8168:	07ed      	lsls	r5, r5, #31
    816a:	0864      	lsrs	r4, r4, #1
    816c:	432c      	orrs	r4, r5
    816e:	4648      	mov	r0, r9
    8170:	0021      	movs	r1, r4
    8172:	b007      	add	sp, #28
    8174:	bc3c      	pop	{r2, r3, r4, r5}
    8176:	4690      	mov	r8, r2
    8178:	4699      	mov	r9, r3
    817a:	46a2      	mov	sl, r4
    817c:	46ab      	mov	fp, r5
    817e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8180:	4303      	orrs	r3, r0
    8182:	4699      	mov	r9, r3
    8184:	d04f      	beq.n	8226 <__aeabi_dmul+0x1a2>
    8186:	465b      	mov	r3, fp
    8188:	2b00      	cmp	r3, #0
    818a:	d100      	bne.n	818e <__aeabi_dmul+0x10a>
    818c:	e189      	b.n	84a2 <__aeabi_dmul+0x41e>
    818e:	4658      	mov	r0, fp
    8190:	f000 fd7a 	bl	8c88 <__clzsi2>
    8194:	0003      	movs	r3, r0
    8196:	3b0b      	subs	r3, #11
    8198:	2b1c      	cmp	r3, #28
    819a:	dd00      	ble.n	819e <__aeabi_dmul+0x11a>
    819c:	e17a      	b.n	8494 <__aeabi_dmul+0x410>
    819e:	221d      	movs	r2, #29
    81a0:	1ad3      	subs	r3, r2, r3
    81a2:	003a      	movs	r2, r7
    81a4:	0001      	movs	r1, r0
    81a6:	465c      	mov	r4, fp
    81a8:	40da      	lsrs	r2, r3
    81aa:	3908      	subs	r1, #8
    81ac:	408c      	lsls	r4, r1
    81ae:	0013      	movs	r3, r2
    81b0:	408f      	lsls	r7, r1
    81b2:	4323      	orrs	r3, r4
<<<<<<< Updated upstream
    81b4:	d020      	beq.n	81f8 <__aeabi_dmul+0x194>
    81b6:	2c00      	cmp	r4, #0
    81b8:	d100      	bne.n	81bc <__aeabi_dmul+0x158>
    81ba:	e157      	b.n	846c <__aeabi_dmul+0x408>
    81bc:	0020      	movs	r0, r4
    81be:	f000 fd53 	bl	8c68 <__clzsi2>
    81c2:	0003      	movs	r3, r0
    81c4:	3b0b      	subs	r3, #11
    81c6:	2b1c      	cmp	r3, #28
    81c8:	dd00      	ble.n	81cc <__aeabi_dmul+0x168>
    81ca:	e149      	b.n	8460 <__aeabi_dmul+0x3fc>
    81cc:	211d      	movs	r1, #29
    81ce:	1acb      	subs	r3, r1, r3
    81d0:	4651      	mov	r1, sl
    81d2:	0002      	movs	r2, r0
    81d4:	40d9      	lsrs	r1, r3
    81d6:	4653      	mov	r3, sl
    81d8:	3a08      	subs	r2, #8
    81da:	4094      	lsls	r4, r2
    81dc:	4093      	lsls	r3, r2
    81de:	430c      	orrs	r4, r1
    81e0:	4a1b      	ldr	r2, [pc, #108]	; (8250 <__aeabi_dmul+0x1ec>)
    81e2:	1a12      	subs	r2, r2, r0
    81e4:	2000      	movs	r0, #0
    81e6:	e77a      	b.n	80de <__aeabi_dmul+0x7a>
    81e8:	2501      	movs	r5, #1
    81ea:	9b01      	ldr	r3, [sp, #4]
    81ec:	4c14      	ldr	r4, [pc, #80]	; (8240 <__aeabi_dmul+0x1dc>)
    81ee:	401d      	ands	r5, r3
    81f0:	2300      	movs	r3, #0
    81f2:	2200      	movs	r2, #0
    81f4:	4699      	mov	r9, r3
    81f6:	e79c      	b.n	8132 <__aeabi_dmul+0xce>
    81f8:	2400      	movs	r4, #0
    81fa:	2200      	movs	r2, #0
    81fc:	2001      	movs	r0, #1
    81fe:	e76e      	b.n	80de <__aeabi_dmul+0x7a>
    8200:	4653      	mov	r3, sl
    8202:	2003      	movs	r0, #3
    8204:	e76b      	b.n	80de <__aeabi_dmul+0x7a>
    8206:	2300      	movs	r3, #0
    8208:	469b      	mov	fp, r3
    820a:	3301      	adds	r3, #1
    820c:	2704      	movs	r7, #4
    820e:	2600      	movs	r6, #0
    8210:	9302      	str	r3, [sp, #8]
    8212:	e74c      	b.n	80ae <__aeabi_dmul+0x4a>
    8214:	2303      	movs	r3, #3
    8216:	4681      	mov	r9, r0
    8218:	270c      	movs	r7, #12
    821a:	9302      	str	r3, [sp, #8]
    821c:	e747      	b.n	80ae <__aeabi_dmul+0x4a>
    821e:	2280      	movs	r2, #128	; 0x80
    8220:	2300      	movs	r3, #0
    8222:	2500      	movs	r5, #0
    8224:	0312      	lsls	r2, r2, #12
    8226:	4699      	mov	r9, r3
    8228:	4c05      	ldr	r4, [pc, #20]	; (8240 <__aeabi_dmul+0x1dc>)
    822a:	e782      	b.n	8132 <__aeabi_dmul+0xce>
    822c:	465c      	mov	r4, fp
    822e:	464b      	mov	r3, r9
    8230:	9802      	ldr	r0, [sp, #8]
    8232:	e76f      	b.n	8114 <__aeabi_dmul+0xb0>
    8234:	465c      	mov	r4, fp
    8236:	464b      	mov	r3, r9
    8238:	9501      	str	r5, [sp, #4]
    823a:	9802      	ldr	r0, [sp, #8]
    823c:	e76a      	b.n	8114 <__aeabi_dmul+0xb0>
    823e:	46c0      	nop			; (mov r8, r8)
    8240:	000007ff 	.word	0x000007ff
    8244:	fffffc01 	.word	0xfffffc01
    8248:	0000aad8 	.word	0x0000aad8
    824c:	800fffff 	.word	0x800fffff
    8250:	fffffc0d 	.word	0xfffffc0d
    8254:	464a      	mov	r2, r9
    8256:	4649      	mov	r1, r9
    8258:	0c17      	lsrs	r7, r2, #16
    825a:	0c1a      	lsrs	r2, r3, #16
    825c:	041b      	lsls	r3, r3, #16
    825e:	0c1b      	lsrs	r3, r3, #16
    8260:	0408      	lsls	r0, r1, #16
    8262:	0019      	movs	r1, r3
    8264:	0c00      	lsrs	r0, r0, #16
    8266:	4341      	muls	r1, r0
    8268:	0015      	movs	r5, r2
    826a:	4688      	mov	r8, r1
    826c:	0019      	movs	r1, r3
    826e:	437d      	muls	r5, r7
    8270:	4379      	muls	r1, r7
    8272:	9503      	str	r5, [sp, #12]
    8274:	4689      	mov	r9, r1
    8276:	0029      	movs	r1, r5
    8278:	0015      	movs	r5, r2
    827a:	4345      	muls	r5, r0
    827c:	444d      	add	r5, r9
    827e:	9502      	str	r5, [sp, #8]
    8280:	4645      	mov	r5, r8
    8282:	0c2d      	lsrs	r5, r5, #16
    8284:	46aa      	mov	sl, r5
    8286:	9d02      	ldr	r5, [sp, #8]
    8288:	4455      	add	r5, sl
    828a:	45a9      	cmp	r9, r5
    828c:	d906      	bls.n	829c <__aeabi_dmul+0x238>
    828e:	468a      	mov	sl, r1
    8290:	2180      	movs	r1, #128	; 0x80
    8292:	0249      	lsls	r1, r1, #9
=======
    81b4:	469b      	mov	fp, r3
    81b6:	46b9      	mov	r9, r7
    81b8:	2300      	movs	r3, #0
    81ba:	4e2d      	ldr	r6, [pc, #180]	; (8270 <__aeabi_dmul+0x1ec>)
    81bc:	2700      	movs	r7, #0
    81be:	1a36      	subs	r6, r6, r0
    81c0:	9302      	str	r3, [sp, #8]
    81c2:	e784      	b.n	80ce <__aeabi_dmul+0x4a>
    81c4:	4653      	mov	r3, sl
    81c6:	4323      	orrs	r3, r4
    81c8:	d12a      	bne.n	8220 <__aeabi_dmul+0x19c>
    81ca:	2400      	movs	r4, #0
    81cc:	2002      	movs	r0, #2
    81ce:	e796      	b.n	80fe <__aeabi_dmul+0x7a>
    81d0:	4653      	mov	r3, sl
    81d2:	4323      	orrs	r3, r4
    81d4:	d020      	beq.n	8218 <__aeabi_dmul+0x194>
    81d6:	2c00      	cmp	r4, #0
    81d8:	d100      	bne.n	81dc <__aeabi_dmul+0x158>
    81da:	e157      	b.n	848c <__aeabi_dmul+0x408>
    81dc:	0020      	movs	r0, r4
    81de:	f000 fd53 	bl	8c88 <__clzsi2>
    81e2:	0003      	movs	r3, r0
    81e4:	3b0b      	subs	r3, #11
    81e6:	2b1c      	cmp	r3, #28
    81e8:	dd00      	ble.n	81ec <__aeabi_dmul+0x168>
    81ea:	e149      	b.n	8480 <__aeabi_dmul+0x3fc>
    81ec:	211d      	movs	r1, #29
    81ee:	1acb      	subs	r3, r1, r3
    81f0:	4651      	mov	r1, sl
    81f2:	0002      	movs	r2, r0
    81f4:	40d9      	lsrs	r1, r3
    81f6:	4653      	mov	r3, sl
    81f8:	3a08      	subs	r2, #8
    81fa:	4094      	lsls	r4, r2
    81fc:	4093      	lsls	r3, r2
    81fe:	430c      	orrs	r4, r1
    8200:	4a1b      	ldr	r2, [pc, #108]	; (8270 <__aeabi_dmul+0x1ec>)
    8202:	1a12      	subs	r2, r2, r0
    8204:	2000      	movs	r0, #0
    8206:	e77a      	b.n	80fe <__aeabi_dmul+0x7a>
    8208:	2501      	movs	r5, #1
    820a:	9b01      	ldr	r3, [sp, #4]
    820c:	4c14      	ldr	r4, [pc, #80]	; (8260 <__aeabi_dmul+0x1dc>)
    820e:	401d      	ands	r5, r3
    8210:	2300      	movs	r3, #0
    8212:	2200      	movs	r2, #0
    8214:	4699      	mov	r9, r3
    8216:	e79c      	b.n	8152 <__aeabi_dmul+0xce>
    8218:	2400      	movs	r4, #0
    821a:	2200      	movs	r2, #0
    821c:	2001      	movs	r0, #1
    821e:	e76e      	b.n	80fe <__aeabi_dmul+0x7a>
    8220:	4653      	mov	r3, sl
    8222:	2003      	movs	r0, #3
    8224:	e76b      	b.n	80fe <__aeabi_dmul+0x7a>
    8226:	2300      	movs	r3, #0
    8228:	469b      	mov	fp, r3
    822a:	3301      	adds	r3, #1
    822c:	2704      	movs	r7, #4
    822e:	2600      	movs	r6, #0
    8230:	9302      	str	r3, [sp, #8]
    8232:	e74c      	b.n	80ce <__aeabi_dmul+0x4a>
    8234:	2303      	movs	r3, #3
    8236:	4681      	mov	r9, r0
    8238:	270c      	movs	r7, #12
    823a:	9302      	str	r3, [sp, #8]
    823c:	e747      	b.n	80ce <__aeabi_dmul+0x4a>
    823e:	2280      	movs	r2, #128	; 0x80
    8240:	2300      	movs	r3, #0
    8242:	2500      	movs	r5, #0
    8244:	0312      	lsls	r2, r2, #12
    8246:	4699      	mov	r9, r3
    8248:	4c05      	ldr	r4, [pc, #20]	; (8260 <__aeabi_dmul+0x1dc>)
    824a:	e782      	b.n	8152 <__aeabi_dmul+0xce>
    824c:	465c      	mov	r4, fp
    824e:	464b      	mov	r3, r9
    8250:	9802      	ldr	r0, [sp, #8]
    8252:	e76f      	b.n	8134 <__aeabi_dmul+0xb0>
    8254:	465c      	mov	r4, fp
    8256:	464b      	mov	r3, r9
    8258:	9501      	str	r5, [sp, #4]
    825a:	9802      	ldr	r0, [sp, #8]
    825c:	e76a      	b.n	8134 <__aeabi_dmul+0xb0>
    825e:	46c0      	nop			; (mov r8, r8)
    8260:	000007ff 	.word	0x000007ff
    8264:	fffffc01 	.word	0xfffffc01
    8268:	0000ab04 	.word	0x0000ab04
    826c:	800fffff 	.word	0x800fffff
    8270:	fffffc0d 	.word	0xfffffc0d
    8274:	464a      	mov	r2, r9
    8276:	4649      	mov	r1, r9
    8278:	0c17      	lsrs	r7, r2, #16
    827a:	0c1a      	lsrs	r2, r3, #16
    827c:	041b      	lsls	r3, r3, #16
    827e:	0c1b      	lsrs	r3, r3, #16
    8280:	0408      	lsls	r0, r1, #16
    8282:	0019      	movs	r1, r3
    8284:	0c00      	lsrs	r0, r0, #16
    8286:	4341      	muls	r1, r0
    8288:	0015      	movs	r5, r2
    828a:	4688      	mov	r8, r1
    828c:	0019      	movs	r1, r3
    828e:	437d      	muls	r5, r7
    8290:	4379      	muls	r1, r7
    8292:	9503      	str	r5, [sp, #12]
>>>>>>> Stashed changes
    8294:	4689      	mov	r9, r1
    8296:	0029      	movs	r1, r5
    8298:	0015      	movs	r5, r2
    829a:	4345      	muls	r5, r0
    829c:	444d      	add	r5, r9
    829e:	9502      	str	r5, [sp, #8]
    82a0:	4645      	mov	r5, r8
    82a2:	0c2d      	lsrs	r5, r5, #16
    82a4:	46aa      	mov	sl, r5
    82a6:	9d02      	ldr	r5, [sp, #8]
    82a8:	4455      	add	r5, sl
    82aa:	45a9      	cmp	r9, r5
    82ac:	d906      	bls.n	82bc <__aeabi_dmul+0x238>
    82ae:	468a      	mov	sl, r1
    82b0:	2180      	movs	r1, #128	; 0x80
    82b2:	0249      	lsls	r1, r1, #9
    82b4:	4689      	mov	r9, r1
    82b6:	44ca      	add	sl, r9
    82b8:	4651      	mov	r1, sl
    82ba:	9103      	str	r1, [sp, #12]
    82bc:	0c29      	lsrs	r1, r5, #16
    82be:	9104      	str	r1, [sp, #16]
    82c0:	4641      	mov	r1, r8
    82c2:	0409      	lsls	r1, r1, #16
    82c4:	042d      	lsls	r5, r5, #16
    82c6:	0c09      	lsrs	r1, r1, #16
    82c8:	4688      	mov	r8, r1
    82ca:	0029      	movs	r1, r5
    82cc:	0c25      	lsrs	r5, r4, #16
    82ce:	0424      	lsls	r4, r4, #16
    82d0:	4441      	add	r1, r8
    82d2:	0c24      	lsrs	r4, r4, #16
    82d4:	9105      	str	r1, [sp, #20]
    82d6:	0021      	movs	r1, r4
    82d8:	4341      	muls	r1, r0
    82da:	4688      	mov	r8, r1
    82dc:	0021      	movs	r1, r4
    82de:	4379      	muls	r1, r7
    82e0:	468a      	mov	sl, r1
    82e2:	4368      	muls	r0, r5
    82e4:	4641      	mov	r1, r8
    82e6:	4450      	add	r0, sl
    82e8:	4681      	mov	r9, r0
    82ea:	0c08      	lsrs	r0, r1, #16
    82ec:	4448      	add	r0, r9
    82ee:	436f      	muls	r7, r5
    82f0:	4582      	cmp	sl, r0
    82f2:	d903      	bls.n	82fc <__aeabi_dmul+0x278>
    82f4:	2180      	movs	r1, #128	; 0x80
    82f6:	0249      	lsls	r1, r1, #9
    82f8:	4689      	mov	r9, r1
    82fa:	444f      	add	r7, r9
    82fc:	0c01      	lsrs	r1, r0, #16
    82fe:	4689      	mov	r9, r1
    8300:	0039      	movs	r1, r7
    8302:	4449      	add	r1, r9
    8304:	9102      	str	r1, [sp, #8]
    8306:	4641      	mov	r1, r8
    8308:	040f      	lsls	r7, r1, #16
    830a:	9904      	ldr	r1, [sp, #16]
    830c:	0c3f      	lsrs	r7, r7, #16
    830e:	4688      	mov	r8, r1
    8310:	0400      	lsls	r0, r0, #16
    8312:	19c0      	adds	r0, r0, r7
    8314:	4480      	add	r8, r0
    8316:	4641      	mov	r1, r8
    8318:	9104      	str	r1, [sp, #16]
    831a:	4659      	mov	r1, fp
    831c:	0c0f      	lsrs	r7, r1, #16
    831e:	0409      	lsls	r1, r1, #16
    8320:	0c09      	lsrs	r1, r1, #16
    8322:	4688      	mov	r8, r1
    8324:	4359      	muls	r1, r3
    8326:	468a      	mov	sl, r1
    8328:	0039      	movs	r1, r7
    832a:	4351      	muls	r1, r2
    832c:	4689      	mov	r9, r1
    832e:	4641      	mov	r1, r8
    8330:	434a      	muls	r2, r1
    8332:	4651      	mov	r1, sl
    8334:	0c09      	lsrs	r1, r1, #16
    8336:	468b      	mov	fp, r1
    8338:	437b      	muls	r3, r7
    833a:	18d2      	adds	r2, r2, r3
    833c:	445a      	add	r2, fp
    833e:	4293      	cmp	r3, r2
    8340:	d903      	bls.n	834a <__aeabi_dmul+0x2c6>
    8342:	2380      	movs	r3, #128	; 0x80
    8344:	025b      	lsls	r3, r3, #9
    8346:	469b      	mov	fp, r3
    8348:	44d9      	add	r9, fp
    834a:	4651      	mov	r1, sl
    834c:	0409      	lsls	r1, r1, #16
    834e:	0c09      	lsrs	r1, r1, #16
    8350:	468a      	mov	sl, r1
    8352:	4641      	mov	r1, r8
    8354:	4361      	muls	r1, r4
    8356:	437c      	muls	r4, r7
    8358:	0c13      	lsrs	r3, r2, #16
    835a:	0412      	lsls	r2, r2, #16
    835c:	444b      	add	r3, r9
    835e:	4452      	add	r2, sl
    8360:	46a1      	mov	r9, r4
    8362:	468a      	mov	sl, r1
    8364:	003c      	movs	r4, r7
    8366:	4641      	mov	r1, r8
    8368:	436c      	muls	r4, r5
    836a:	434d      	muls	r5, r1
    836c:	4651      	mov	r1, sl
    836e:	444d      	add	r5, r9
    8370:	0c0f      	lsrs	r7, r1, #16
    8372:	197d      	adds	r5, r7, r5
    8374:	45a9      	cmp	r9, r5
    8376:	d903      	bls.n	8380 <__aeabi_dmul+0x2fc>
    8378:	2180      	movs	r1, #128	; 0x80
    837a:	0249      	lsls	r1, r1, #9
    837c:	4688      	mov	r8, r1
    837e:	4444      	add	r4, r8
    8380:	9f04      	ldr	r7, [sp, #16]
    8382:	9903      	ldr	r1, [sp, #12]
    8384:	46b8      	mov	r8, r7
    8386:	4441      	add	r1, r8
    8388:	468b      	mov	fp, r1
    838a:	4583      	cmp	fp, r0
    838c:	4180      	sbcs	r0, r0
    838e:	4241      	negs	r1, r0
    8390:	4688      	mov	r8, r1
    8392:	4651      	mov	r1, sl
    8394:	0408      	lsls	r0, r1, #16
    8396:	042f      	lsls	r7, r5, #16
    8398:	0c00      	lsrs	r0, r0, #16
    839a:	183f      	adds	r7, r7, r0
    839c:	4658      	mov	r0, fp
    839e:	9902      	ldr	r1, [sp, #8]
    83a0:	1810      	adds	r0, r2, r0
    83a2:	4689      	mov	r9, r1
    83a4:	4290      	cmp	r0, r2
    83a6:	4192      	sbcs	r2, r2
    83a8:	444f      	add	r7, r9
    83aa:	46ba      	mov	sl, r7
    83ac:	4252      	negs	r2, r2
    83ae:	4699      	mov	r9, r3
    83b0:	4693      	mov	fp, r2
    83b2:	44c2      	add	sl, r8
    83b4:	44d1      	add	r9, sl
    83b6:	44cb      	add	fp, r9
    83b8:	428f      	cmp	r7, r1
    83ba:	41bf      	sbcs	r7, r7
    83bc:	45c2      	cmp	sl, r8
    83be:	4189      	sbcs	r1, r1
    83c0:	4599      	cmp	r9, r3
    83c2:	419b      	sbcs	r3, r3
    83c4:	4593      	cmp	fp, r2
    83c6:	4192      	sbcs	r2, r2
    83c8:	427f      	negs	r7, r7
    83ca:	4249      	negs	r1, r1
    83cc:	0c2d      	lsrs	r5, r5, #16
    83ce:	4252      	negs	r2, r2
    83d0:	430f      	orrs	r7, r1
    83d2:	425b      	negs	r3, r3
    83d4:	4313      	orrs	r3, r2
    83d6:	197f      	adds	r7, r7, r5
    83d8:	18ff      	adds	r7, r7, r3
    83da:	465b      	mov	r3, fp
    83dc:	193c      	adds	r4, r7, r4
    83de:	0ddb      	lsrs	r3, r3, #23
    83e0:	9a05      	ldr	r2, [sp, #20]
    83e2:	0264      	lsls	r4, r4, #9
    83e4:	431c      	orrs	r4, r3
    83e6:	0243      	lsls	r3, r0, #9
    83e8:	4313      	orrs	r3, r2
    83ea:	1e5d      	subs	r5, r3, #1
    83ec:	41ab      	sbcs	r3, r5
    83ee:	465a      	mov	r2, fp
    83f0:	0dc0      	lsrs	r0, r0, #23
    83f2:	4303      	orrs	r3, r0
    83f4:	0252      	lsls	r2, r2, #9
    83f6:	4313      	orrs	r3, r2
    83f8:	01e2      	lsls	r2, r4, #7
    83fa:	d556      	bpl.n	84aa <__aeabi_dmul+0x426>
    83fc:	2001      	movs	r0, #1
    83fe:	085a      	lsrs	r2, r3, #1
    8400:	4003      	ands	r3, r0
    8402:	4313      	orrs	r3, r2
    8404:	07e2      	lsls	r2, r4, #31
    8406:	4313      	orrs	r3, r2
    8408:	0864      	lsrs	r4, r4, #1
    840a:	485a      	ldr	r0, [pc, #360]	; (8574 <__aeabi_dmul+0x4f0>)
    840c:	4460      	add	r0, ip
    840e:	2800      	cmp	r0, #0
    8410:	dd4d      	ble.n	84ae <__aeabi_dmul+0x42a>
    8412:	075a      	lsls	r2, r3, #29
    8414:	d009      	beq.n	842a <__aeabi_dmul+0x3a6>
    8416:	220f      	movs	r2, #15
    8418:	401a      	ands	r2, r3
    841a:	2a04      	cmp	r2, #4
    841c:	d005      	beq.n	842a <__aeabi_dmul+0x3a6>
    841e:	1d1a      	adds	r2, r3, #4
    8420:	429a      	cmp	r2, r3
    8422:	419b      	sbcs	r3, r3
    8424:	425b      	negs	r3, r3
    8426:	18e4      	adds	r4, r4, r3
    8428:	0013      	movs	r3, r2
    842a:	01e2      	lsls	r2, r4, #7
    842c:	d504      	bpl.n	8438 <__aeabi_dmul+0x3b4>
    842e:	2080      	movs	r0, #128	; 0x80
    8430:	4a51      	ldr	r2, [pc, #324]	; (8578 <__aeabi_dmul+0x4f4>)
    8432:	00c0      	lsls	r0, r0, #3
    8434:	4014      	ands	r4, r2
    8436:	4460      	add	r0, ip
    8438:	4a50      	ldr	r2, [pc, #320]	; (857c <__aeabi_dmul+0x4f8>)
    843a:	4290      	cmp	r0, r2
    843c:	dd00      	ble.n	8440 <__aeabi_dmul+0x3bc>
    843e:	e6e3      	b.n	8208 <__aeabi_dmul+0x184>
    8440:	2501      	movs	r5, #1
    8442:	08db      	lsrs	r3, r3, #3
    8444:	0762      	lsls	r2, r4, #29
    8446:	431a      	orrs	r2, r3
    8448:	0264      	lsls	r4, r4, #9
    844a:	9b01      	ldr	r3, [sp, #4]
    844c:	4691      	mov	r9, r2
    844e:	0b22      	lsrs	r2, r4, #12
    8450:	0544      	lsls	r4, r0, #21
    8452:	0d64      	lsrs	r4, r4, #21
    8454:	401d      	ands	r5, r3
    8456:	e67c      	b.n	8152 <__aeabi_dmul+0xce>
    8458:	2280      	movs	r2, #128	; 0x80
    845a:	4659      	mov	r1, fp
    845c:	0312      	lsls	r2, r2, #12
    845e:	4211      	tst	r1, r2
    8460:	d008      	beq.n	8474 <__aeabi_dmul+0x3f0>
    8462:	4214      	tst	r4, r2
    8464:	d106      	bne.n	8474 <__aeabi_dmul+0x3f0>
    8466:	4322      	orrs	r2, r4
    8468:	0312      	lsls	r2, r2, #12
    846a:	0b12      	lsrs	r2, r2, #12
    846c:	4645      	mov	r5, r8
    846e:	4699      	mov	r9, r3
    8470:	4c43      	ldr	r4, [pc, #268]	; (8580 <__aeabi_dmul+0x4fc>)
    8472:	e66e      	b.n	8152 <__aeabi_dmul+0xce>
    8474:	465b      	mov	r3, fp
    8476:	431a      	orrs	r2, r3
    8478:	0312      	lsls	r2, r2, #12
    847a:	0b12      	lsrs	r2, r2, #12
    847c:	4c40      	ldr	r4, [pc, #256]	; (8580 <__aeabi_dmul+0x4fc>)
    847e:	e668      	b.n	8152 <__aeabi_dmul+0xce>
    8480:	0003      	movs	r3, r0
    8482:	4654      	mov	r4, sl
    8484:	3b28      	subs	r3, #40	; 0x28
    8486:	409c      	lsls	r4, r3
    8488:	2300      	movs	r3, #0
    848a:	e6b9      	b.n	8200 <__aeabi_dmul+0x17c>
    848c:	f000 fbfc 	bl	8c88 <__clzsi2>
    8490:	3020      	adds	r0, #32
    8492:	e6a6      	b.n	81e2 <__aeabi_dmul+0x15e>
    8494:	0003      	movs	r3, r0
    8496:	3b28      	subs	r3, #40	; 0x28
    8498:	409f      	lsls	r7, r3
    849a:	2300      	movs	r3, #0
    849c:	46bb      	mov	fp, r7
    849e:	4699      	mov	r9, r3
    84a0:	e68a      	b.n	81b8 <__aeabi_dmul+0x134>
    84a2:	f000 fbf1 	bl	8c88 <__clzsi2>
    84a6:	3020      	adds	r0, #32
    84a8:	e674      	b.n	8194 <__aeabi_dmul+0x110>
    84aa:	46b4      	mov	ip, r6
    84ac:	e7ad      	b.n	840a <__aeabi_dmul+0x386>
    84ae:	2501      	movs	r5, #1
    84b0:	1a2a      	subs	r2, r5, r0
    84b2:	2a38      	cmp	r2, #56	; 0x38
    84b4:	dd06      	ble.n	84c4 <__aeabi_dmul+0x440>
    84b6:	9b01      	ldr	r3, [sp, #4]
    84b8:	2400      	movs	r4, #0
    84ba:	401d      	ands	r5, r3
    84bc:	2300      	movs	r3, #0
    84be:	2200      	movs	r2, #0
    84c0:	4699      	mov	r9, r3
    84c2:	e646      	b.n	8152 <__aeabi_dmul+0xce>
    84c4:	2a1f      	cmp	r2, #31
    84c6:	dc21      	bgt.n	850c <__aeabi_dmul+0x488>
    84c8:	2520      	movs	r5, #32
    84ca:	0020      	movs	r0, r4
    84cc:	1aad      	subs	r5, r5, r2
    84ce:	001e      	movs	r6, r3
    84d0:	40ab      	lsls	r3, r5
    84d2:	40a8      	lsls	r0, r5
    84d4:	40d6      	lsrs	r6, r2
    84d6:	1e5d      	subs	r5, r3, #1
    84d8:	41ab      	sbcs	r3, r5
    84da:	4330      	orrs	r0, r6
    84dc:	4318      	orrs	r0, r3
    84de:	40d4      	lsrs	r4, r2
    84e0:	0743      	lsls	r3, r0, #29
    84e2:	d009      	beq.n	84f8 <__aeabi_dmul+0x474>
    84e4:	230f      	movs	r3, #15
    84e6:	4003      	ands	r3, r0
    84e8:	2b04      	cmp	r3, #4
    84ea:	d005      	beq.n	84f8 <__aeabi_dmul+0x474>
    84ec:	0003      	movs	r3, r0
    84ee:	1d18      	adds	r0, r3, #4
    84f0:	4298      	cmp	r0, r3
    84f2:	419b      	sbcs	r3, r3
    84f4:	425b      	negs	r3, r3
    84f6:	18e4      	adds	r4, r4, r3
    84f8:	0223      	lsls	r3, r4, #8
    84fa:	d521      	bpl.n	8540 <__aeabi_dmul+0x4bc>
    84fc:	2501      	movs	r5, #1
    84fe:	9b01      	ldr	r3, [sp, #4]
    8500:	2401      	movs	r4, #1
    8502:	401d      	ands	r5, r3
    8504:	2300      	movs	r3, #0
    8506:	2200      	movs	r2, #0
    8508:	4699      	mov	r9, r3
    850a:	e622      	b.n	8152 <__aeabi_dmul+0xce>
    850c:	251f      	movs	r5, #31
    850e:	0021      	movs	r1, r4
    8510:	426d      	negs	r5, r5
    8512:	1a28      	subs	r0, r5, r0
    8514:	40c1      	lsrs	r1, r0
    8516:	0008      	movs	r0, r1
    8518:	2a20      	cmp	r2, #32
    851a:	d01d      	beq.n	8558 <__aeabi_dmul+0x4d4>
    851c:	355f      	adds	r5, #95	; 0x5f
    851e:	1aaa      	subs	r2, r5, r2
    8520:	4094      	lsls	r4, r2
    8522:	4323      	orrs	r3, r4
    8524:	1e5c      	subs	r4, r3, #1
    8526:	41a3      	sbcs	r3, r4
    8528:	2507      	movs	r5, #7
    852a:	4303      	orrs	r3, r0
    852c:	401d      	ands	r5, r3
    852e:	2200      	movs	r2, #0
    8530:	2d00      	cmp	r5, #0
    8532:	d009      	beq.n	8548 <__aeabi_dmul+0x4c4>
    8534:	220f      	movs	r2, #15
    8536:	2400      	movs	r4, #0
    8538:	401a      	ands	r2, r3
    853a:	0018      	movs	r0, r3
    853c:	2a04      	cmp	r2, #4
    853e:	d1d6      	bne.n	84ee <__aeabi_dmul+0x46a>
    8540:	0003      	movs	r3, r0
    8542:	0765      	lsls	r5, r4, #29
    8544:	0264      	lsls	r4, r4, #9
    8546:	0b22      	lsrs	r2, r4, #12
    8548:	08db      	lsrs	r3, r3, #3
    854a:	432b      	orrs	r3, r5
    854c:	2501      	movs	r5, #1
    854e:	4699      	mov	r9, r3
    8550:	9b01      	ldr	r3, [sp, #4]
    8552:	2400      	movs	r4, #0
    8554:	401d      	ands	r5, r3
    8556:	e5fc      	b.n	8152 <__aeabi_dmul+0xce>
    8558:	2400      	movs	r4, #0
    855a:	e7e2      	b.n	8522 <__aeabi_dmul+0x49e>
    855c:	2280      	movs	r2, #128	; 0x80
    855e:	2501      	movs	r5, #1
    8560:	0312      	lsls	r2, r2, #12
    8562:	4322      	orrs	r2, r4
    8564:	9901      	ldr	r1, [sp, #4]
    8566:	0312      	lsls	r2, r2, #12
    8568:	0b12      	lsrs	r2, r2, #12
    856a:	400d      	ands	r5, r1
    856c:	4699      	mov	r9, r3
    856e:	4c04      	ldr	r4, [pc, #16]	; (8580 <__aeabi_dmul+0x4fc>)
    8570:	e5ef      	b.n	8152 <__aeabi_dmul+0xce>
    8572:	46c0      	nop			; (mov r8, r8)
    8574:	000003ff 	.word	0x000003ff
    8578:	feffffff 	.word	0xfeffffff
    857c:	000007fe 	.word	0x000007fe
    8580:	000007ff 	.word	0x000007ff

00008584 <__aeabi_dsub>:
    8584:	b5f0      	push	{r4, r5, r6, r7, lr}
    8586:	4646      	mov	r6, r8
    8588:	46d6      	mov	lr, sl
    858a:	464f      	mov	r7, r9
    858c:	030c      	lsls	r4, r1, #12
    858e:	b5c0      	push	{r6, r7, lr}
    8590:	0fcd      	lsrs	r5, r1, #31
    8592:	004e      	lsls	r6, r1, #1
    8594:	0a61      	lsrs	r1, r4, #9
    8596:	0f44      	lsrs	r4, r0, #29
    8598:	430c      	orrs	r4, r1
    859a:	00c1      	lsls	r1, r0, #3
    859c:	0058      	lsls	r0, r3, #1
    859e:	0d40      	lsrs	r0, r0, #21
    85a0:	4684      	mov	ip, r0
    85a2:	468a      	mov	sl, r1
    85a4:	000f      	movs	r7, r1
    85a6:	0319      	lsls	r1, r3, #12
    85a8:	0f50      	lsrs	r0, r2, #29
    85aa:	0a49      	lsrs	r1, r1, #9
    85ac:	4301      	orrs	r1, r0
    85ae:	48c6      	ldr	r0, [pc, #792]	; (88c8 <__aeabi_dsub+0x344>)
    85b0:	0d76      	lsrs	r6, r6, #21
    85b2:	46a8      	mov	r8, r5
    85b4:	0fdb      	lsrs	r3, r3, #31
    85b6:	00d2      	lsls	r2, r2, #3
    85b8:	4584      	cmp	ip, r0
    85ba:	d100      	bne.n	85be <__aeabi_dsub+0x3a>
    85bc:	e0d8      	b.n	8770 <__aeabi_dsub+0x1ec>
    85be:	2001      	movs	r0, #1
    85c0:	4043      	eors	r3, r0
    85c2:	42ab      	cmp	r3, r5
    85c4:	d100      	bne.n	85c8 <__aeabi_dsub+0x44>
    85c6:	e0a6      	b.n	8716 <__aeabi_dsub+0x192>
    85c8:	4660      	mov	r0, ip
    85ca:	1a35      	subs	r5, r6, r0
    85cc:	2d00      	cmp	r5, #0
    85ce:	dc00      	bgt.n	85d2 <__aeabi_dsub+0x4e>
    85d0:	e105      	b.n	87de <__aeabi_dsub+0x25a>
    85d2:	2800      	cmp	r0, #0
    85d4:	d110      	bne.n	85f8 <__aeabi_dsub+0x74>
    85d6:	000b      	movs	r3, r1
    85d8:	4313      	orrs	r3, r2
    85da:	d100      	bne.n	85de <__aeabi_dsub+0x5a>
    85dc:	e0d7      	b.n	878e <__aeabi_dsub+0x20a>
    85de:	1e6b      	subs	r3, r5, #1
    85e0:	2b00      	cmp	r3, #0
    85e2:	d000      	beq.n	85e6 <__aeabi_dsub+0x62>
    85e4:	e14b      	b.n	887e <__aeabi_dsub+0x2fa>
    85e6:	4653      	mov	r3, sl
    85e8:	1a9f      	subs	r7, r3, r2
    85ea:	45ba      	cmp	sl, r7
    85ec:	4180      	sbcs	r0, r0
    85ee:	1a64      	subs	r4, r4, r1
    85f0:	4240      	negs	r0, r0
    85f2:	1a24      	subs	r4, r4, r0
    85f4:	2601      	movs	r6, #1
    85f6:	e01e      	b.n	8636 <__aeabi_dsub+0xb2>
    85f8:	4bb3      	ldr	r3, [pc, #716]	; (88c8 <__aeabi_dsub+0x344>)
    85fa:	429e      	cmp	r6, r3
    85fc:	d048      	beq.n	8690 <__aeabi_dsub+0x10c>
    85fe:	2380      	movs	r3, #128	; 0x80
    8600:	041b      	lsls	r3, r3, #16
    8602:	4319      	orrs	r1, r3
    8604:	2d38      	cmp	r5, #56	; 0x38
    8606:	dd00      	ble.n	860a <__aeabi_dsub+0x86>
    8608:	e119      	b.n	883e <__aeabi_dsub+0x2ba>
    860a:	2d1f      	cmp	r5, #31
    860c:	dd00      	ble.n	8610 <__aeabi_dsub+0x8c>
    860e:	e14c      	b.n	88aa <__aeabi_dsub+0x326>
    8610:	2320      	movs	r3, #32
    8612:	000f      	movs	r7, r1
    8614:	1b5b      	subs	r3, r3, r5
    8616:	0010      	movs	r0, r2
    8618:	409a      	lsls	r2, r3
    861a:	409f      	lsls	r7, r3
    861c:	40e8      	lsrs	r0, r5
    861e:	1e53      	subs	r3, r2, #1
    8620:	419a      	sbcs	r2, r3
    8622:	40e9      	lsrs	r1, r5
    8624:	4307      	orrs	r7, r0
    8626:	4317      	orrs	r7, r2
    8628:	4653      	mov	r3, sl
    862a:	1bdf      	subs	r7, r3, r7
    862c:	1a61      	subs	r1, r4, r1
    862e:	45ba      	cmp	sl, r7
    8630:	41a4      	sbcs	r4, r4
    8632:	4264      	negs	r4, r4
    8634:	1b0c      	subs	r4, r1, r4
    8636:	0223      	lsls	r3, r4, #8
    8638:	d400      	bmi.n	863c <__aeabi_dsub+0xb8>
    863a:	e0c5      	b.n	87c8 <__aeabi_dsub+0x244>
    863c:	0264      	lsls	r4, r4, #9
    863e:	0a65      	lsrs	r5, r4, #9
    8640:	2d00      	cmp	r5, #0
    8642:	d100      	bne.n	8646 <__aeabi_dsub+0xc2>
    8644:	e0f6      	b.n	8834 <__aeabi_dsub+0x2b0>
    8646:	0028      	movs	r0, r5
    8648:	f000 fb1e 	bl	8c88 <__clzsi2>
    864c:	0003      	movs	r3, r0
    864e:	3b08      	subs	r3, #8
    8650:	2b1f      	cmp	r3, #31
    8652:	dd00      	ble.n	8656 <__aeabi_dsub+0xd2>
    8654:	e0e9      	b.n	882a <__aeabi_dsub+0x2a6>
    8656:	2220      	movs	r2, #32
    8658:	003c      	movs	r4, r7
    865a:	1ad2      	subs	r2, r2, r3
    865c:	409d      	lsls	r5, r3
    865e:	40d4      	lsrs	r4, r2
    8660:	409f      	lsls	r7, r3
    8662:	4325      	orrs	r5, r4
    8664:	429e      	cmp	r6, r3
    8666:	dd00      	ble.n	866a <__aeabi_dsub+0xe6>
    8668:	e0db      	b.n	8822 <__aeabi_dsub+0x29e>
    866a:	1b9e      	subs	r6, r3, r6
    866c:	1c73      	adds	r3, r6, #1
    866e:	2b1f      	cmp	r3, #31
    8670:	dd00      	ble.n	8674 <__aeabi_dsub+0xf0>
    8672:	e10a      	b.n	888a <__aeabi_dsub+0x306>
    8674:	2220      	movs	r2, #32
    8676:	0038      	movs	r0, r7
    8678:	1ad2      	subs	r2, r2, r3
    867a:	0029      	movs	r1, r5
    867c:	4097      	lsls	r7, r2
    867e:	002c      	movs	r4, r5
    8680:	4091      	lsls	r1, r2
    8682:	40d8      	lsrs	r0, r3
    8684:	1e7a      	subs	r2, r7, #1
    8686:	4197      	sbcs	r7, r2
    8688:	40dc      	lsrs	r4, r3
    868a:	2600      	movs	r6, #0
    868c:	4301      	orrs	r1, r0
    868e:	430f      	orrs	r7, r1
    8690:	077b      	lsls	r3, r7, #29
    8692:	d009      	beq.n	86a8 <__aeabi_dsub+0x124>
    8694:	230f      	movs	r3, #15
    8696:	403b      	ands	r3, r7
    8698:	2b04      	cmp	r3, #4
    869a:	d005      	beq.n	86a8 <__aeabi_dsub+0x124>
    869c:	1d3b      	adds	r3, r7, #4
    869e:	42bb      	cmp	r3, r7
    86a0:	41bf      	sbcs	r7, r7
    86a2:	427f      	negs	r7, r7
    86a4:	19e4      	adds	r4, r4, r7
    86a6:	001f      	movs	r7, r3
    86a8:	0223      	lsls	r3, r4, #8
    86aa:	d525      	bpl.n	86f8 <__aeabi_dsub+0x174>
    86ac:	4b86      	ldr	r3, [pc, #536]	; (88c8 <__aeabi_dsub+0x344>)
    86ae:	3601      	adds	r6, #1
    86b0:	429e      	cmp	r6, r3
    86b2:	d100      	bne.n	86b6 <__aeabi_dsub+0x132>
    86b4:	e0af      	b.n	8816 <__aeabi_dsub+0x292>
    86b6:	4b85      	ldr	r3, [pc, #532]	; (88cc <__aeabi_dsub+0x348>)
    86b8:	2501      	movs	r5, #1
    86ba:	401c      	ands	r4, r3
    86bc:	4643      	mov	r3, r8
    86be:	0762      	lsls	r2, r4, #29
    86c0:	08ff      	lsrs	r7, r7, #3
    86c2:	0264      	lsls	r4, r4, #9
    86c4:	0576      	lsls	r6, r6, #21
    86c6:	4317      	orrs	r7, r2
    86c8:	0b24      	lsrs	r4, r4, #12
    86ca:	0d76      	lsrs	r6, r6, #21
    86cc:	401d      	ands	r5, r3
    86ce:	2100      	movs	r1, #0
    86d0:	0324      	lsls	r4, r4, #12
    86d2:	0b23      	lsrs	r3, r4, #12
    86d4:	0d0c      	lsrs	r4, r1, #20
    86d6:	4a7e      	ldr	r2, [pc, #504]	; (88d0 <__aeabi_dsub+0x34c>)
    86d8:	0524      	lsls	r4, r4, #20
    86da:	431c      	orrs	r4, r3
    86dc:	4014      	ands	r4, r2
    86de:	0533      	lsls	r3, r6, #20
    86e0:	4323      	orrs	r3, r4
    86e2:	005b      	lsls	r3, r3, #1
    86e4:	07ed      	lsls	r5, r5, #31
    86e6:	085b      	lsrs	r3, r3, #1
    86e8:	432b      	orrs	r3, r5
    86ea:	0038      	movs	r0, r7
    86ec:	0019      	movs	r1, r3
    86ee:	bc1c      	pop	{r2, r3, r4}
    86f0:	4690      	mov	r8, r2
    86f2:	4699      	mov	r9, r3
    86f4:	46a2      	mov	sl, r4
    86f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86f8:	2501      	movs	r5, #1
    86fa:	4643      	mov	r3, r8
    86fc:	0762      	lsls	r2, r4, #29
    86fe:	08ff      	lsrs	r7, r7, #3
    8700:	4317      	orrs	r7, r2
    8702:	08e4      	lsrs	r4, r4, #3
    8704:	401d      	ands	r5, r3
    8706:	4b70      	ldr	r3, [pc, #448]	; (88c8 <__aeabi_dsub+0x344>)
    8708:	429e      	cmp	r6, r3
    870a:	d036      	beq.n	877a <__aeabi_dsub+0x1f6>
    870c:	0324      	lsls	r4, r4, #12
    870e:	0576      	lsls	r6, r6, #21
    8710:	0b24      	lsrs	r4, r4, #12
    8712:	0d76      	lsrs	r6, r6, #21
    8714:	e7db      	b.n	86ce <__aeabi_dsub+0x14a>
    8716:	4663      	mov	r3, ip
    8718:	1af3      	subs	r3, r6, r3
    871a:	2b00      	cmp	r3, #0
    871c:	dc00      	bgt.n	8720 <__aeabi_dsub+0x19c>
    871e:	e094      	b.n	884a <__aeabi_dsub+0x2c6>
    8720:	4660      	mov	r0, ip
    8722:	2800      	cmp	r0, #0
    8724:	d035      	beq.n	8792 <__aeabi_dsub+0x20e>
    8726:	4868      	ldr	r0, [pc, #416]	; (88c8 <__aeabi_dsub+0x344>)
    8728:	4286      	cmp	r6, r0
    872a:	d0b1      	beq.n	8690 <__aeabi_dsub+0x10c>
    872c:	2780      	movs	r7, #128	; 0x80
    872e:	043f      	lsls	r7, r7, #16
    8730:	4339      	orrs	r1, r7
    8732:	2b38      	cmp	r3, #56	; 0x38
    8734:	dc00      	bgt.n	8738 <__aeabi_dsub+0x1b4>
    8736:	e0fd      	b.n	8934 <__aeabi_dsub+0x3b0>
    8738:	430a      	orrs	r2, r1
    873a:	0017      	movs	r7, r2
    873c:	2100      	movs	r1, #0
    873e:	1e7a      	subs	r2, r7, #1
    8740:	4197      	sbcs	r7, r2
    8742:	4457      	add	r7, sl
    8744:	4557      	cmp	r7, sl
    8746:	4180      	sbcs	r0, r0
    8748:	1909      	adds	r1, r1, r4
    874a:	4244      	negs	r4, r0
    874c:	190c      	adds	r4, r1, r4
    874e:	0223      	lsls	r3, r4, #8
    8750:	d53a      	bpl.n	87c8 <__aeabi_dsub+0x244>
    8752:	4b5d      	ldr	r3, [pc, #372]	; (88c8 <__aeabi_dsub+0x344>)
    8754:	3601      	adds	r6, #1
    8756:	429e      	cmp	r6, r3
    8758:	d100      	bne.n	875c <__aeabi_dsub+0x1d8>
    875a:	e14b      	b.n	89f4 <__aeabi_dsub+0x470>
    875c:	2201      	movs	r2, #1
    875e:	4b5b      	ldr	r3, [pc, #364]	; (88cc <__aeabi_dsub+0x348>)
    8760:	401c      	ands	r4, r3
    8762:	087b      	lsrs	r3, r7, #1
    8764:	4017      	ands	r7, r2
    8766:	431f      	orrs	r7, r3
    8768:	07e2      	lsls	r2, r4, #31
    876a:	4317      	orrs	r7, r2
    876c:	0864      	lsrs	r4, r4, #1
    876e:	e78f      	b.n	8690 <__aeabi_dsub+0x10c>
    8770:	0008      	movs	r0, r1
    8772:	4310      	orrs	r0, r2
    8774:	d000      	beq.n	8778 <__aeabi_dsub+0x1f4>
    8776:	e724      	b.n	85c2 <__aeabi_dsub+0x3e>
    8778:	e721      	b.n	85be <__aeabi_dsub+0x3a>
    877a:	0023      	movs	r3, r4
    877c:	433b      	orrs	r3, r7
    877e:	d100      	bne.n	8782 <__aeabi_dsub+0x1fe>
    8780:	e1b9      	b.n	8af6 <__aeabi_dsub+0x572>
    8782:	2280      	movs	r2, #128	; 0x80
    8784:	0312      	lsls	r2, r2, #12
    8786:	4314      	orrs	r4, r2
    8788:	0324      	lsls	r4, r4, #12
    878a:	0b24      	lsrs	r4, r4, #12
    878c:	e79f      	b.n	86ce <__aeabi_dsub+0x14a>
    878e:	002e      	movs	r6, r5
    8790:	e77e      	b.n	8690 <__aeabi_dsub+0x10c>
    8792:	0008      	movs	r0, r1
    8794:	4310      	orrs	r0, r2
    8796:	d100      	bne.n	879a <__aeabi_dsub+0x216>
    8798:	e0ca      	b.n	8930 <__aeabi_dsub+0x3ac>
    879a:	1e58      	subs	r0, r3, #1
    879c:	4684      	mov	ip, r0
    879e:	2800      	cmp	r0, #0
    87a0:	d000      	beq.n	87a4 <__aeabi_dsub+0x220>
    87a2:	e0e7      	b.n	8974 <__aeabi_dsub+0x3f0>
    87a4:	4452      	add	r2, sl
    87a6:	4552      	cmp	r2, sl
    87a8:	4180      	sbcs	r0, r0
    87aa:	1864      	adds	r4, r4, r1
    87ac:	4240      	negs	r0, r0
    87ae:	1824      	adds	r4, r4, r0
    87b0:	0017      	movs	r7, r2
    87b2:	2601      	movs	r6, #1
    87b4:	0223      	lsls	r3, r4, #8
    87b6:	d507      	bpl.n	87c8 <__aeabi_dsub+0x244>
    87b8:	2602      	movs	r6, #2
    87ba:	e7cf      	b.n	875c <__aeabi_dsub+0x1d8>
    87bc:	4664      	mov	r4, ip
    87be:	432c      	orrs	r4, r5
    87c0:	d100      	bne.n	87c4 <__aeabi_dsub+0x240>
    87c2:	e1b3      	b.n	8b2c <__aeabi_dsub+0x5a8>
    87c4:	002c      	movs	r4, r5
    87c6:	4667      	mov	r7, ip
    87c8:	077b      	lsls	r3, r7, #29
    87ca:	d000      	beq.n	87ce <__aeabi_dsub+0x24a>
    87cc:	e762      	b.n	8694 <__aeabi_dsub+0x110>
    87ce:	0763      	lsls	r3, r4, #29
    87d0:	08ff      	lsrs	r7, r7, #3
    87d2:	431f      	orrs	r7, r3
    87d4:	2501      	movs	r5, #1
    87d6:	4643      	mov	r3, r8
    87d8:	08e4      	lsrs	r4, r4, #3
    87da:	401d      	ands	r5, r3
    87dc:	e793      	b.n	8706 <__aeabi_dsub+0x182>
    87de:	2d00      	cmp	r5, #0
    87e0:	d178      	bne.n	88d4 <__aeabi_dsub+0x350>
    87e2:	1c75      	adds	r5, r6, #1
    87e4:	056d      	lsls	r5, r5, #21
    87e6:	0d6d      	lsrs	r5, r5, #21
    87e8:	2d01      	cmp	r5, #1
    87ea:	dc00      	bgt.n	87ee <__aeabi_dsub+0x26a>
    87ec:	e0f2      	b.n	89d4 <__aeabi_dsub+0x450>
    87ee:	4650      	mov	r0, sl
    87f0:	1a80      	subs	r0, r0, r2
    87f2:	4582      	cmp	sl, r0
    87f4:	41bf      	sbcs	r7, r7
    87f6:	1a65      	subs	r5, r4, r1
    87f8:	427f      	negs	r7, r7
    87fa:	1bed      	subs	r5, r5, r7
    87fc:	4684      	mov	ip, r0
    87fe:	0228      	lsls	r0, r5, #8
    8800:	d400      	bmi.n	8804 <__aeabi_dsub+0x280>
    8802:	e08c      	b.n	891e <__aeabi_dsub+0x39a>
    8804:	4650      	mov	r0, sl
    8806:	1a17      	subs	r7, r2, r0
    8808:	42ba      	cmp	r2, r7
    880a:	4192      	sbcs	r2, r2
    880c:	1b0c      	subs	r4, r1, r4
    880e:	4255      	negs	r5, r2
    8810:	1b65      	subs	r5, r4, r5
    8812:	4698      	mov	r8, r3
    8814:	e714      	b.n	8640 <__aeabi_dsub+0xbc>
    8816:	2501      	movs	r5, #1
    8818:	4643      	mov	r3, r8
    881a:	2400      	movs	r4, #0
    881c:	401d      	ands	r5, r3
    881e:	2700      	movs	r7, #0
    8820:	e755      	b.n	86ce <__aeabi_dsub+0x14a>
    8822:	4c2a      	ldr	r4, [pc, #168]	; (88cc <__aeabi_dsub+0x348>)
    8824:	1af6      	subs	r6, r6, r3
    8826:	402c      	ands	r4, r5
    8828:	e732      	b.n	8690 <__aeabi_dsub+0x10c>
    882a:	003d      	movs	r5, r7
    882c:	3828      	subs	r0, #40	; 0x28
    882e:	4085      	lsls	r5, r0
    8830:	2700      	movs	r7, #0
    8832:	e717      	b.n	8664 <__aeabi_dsub+0xe0>
    8834:	0038      	movs	r0, r7
    8836:	f000 fa27 	bl	8c88 <__clzsi2>
    883a:	3020      	adds	r0, #32
    883c:	e706      	b.n	864c <__aeabi_dsub+0xc8>
    883e:	430a      	orrs	r2, r1
    8840:	0017      	movs	r7, r2
    8842:	2100      	movs	r1, #0
    8844:	1e7a      	subs	r2, r7, #1
    8846:	4197      	sbcs	r7, r2
    8848:	e6ee      	b.n	8628 <__aeabi_dsub+0xa4>
    884a:	2b00      	cmp	r3, #0
    884c:	d000      	beq.n	8850 <__aeabi_dsub+0x2cc>
    884e:	e0e5      	b.n	8a1c <__aeabi_dsub+0x498>
    8850:	1c73      	adds	r3, r6, #1
    8852:	469c      	mov	ip, r3
    8854:	055b      	lsls	r3, r3, #21
    8856:	0d5b      	lsrs	r3, r3, #21
    8858:	2b01      	cmp	r3, #1
    885a:	dc00      	bgt.n	885e <__aeabi_dsub+0x2da>
    885c:	e09f      	b.n	899e <__aeabi_dsub+0x41a>
    885e:	4b1a      	ldr	r3, [pc, #104]	; (88c8 <__aeabi_dsub+0x344>)
    8860:	459c      	cmp	ip, r3
    8862:	d100      	bne.n	8866 <__aeabi_dsub+0x2e2>
    8864:	e0c5      	b.n	89f2 <__aeabi_dsub+0x46e>
    8866:	4452      	add	r2, sl
    8868:	4552      	cmp	r2, sl
    886a:	4180      	sbcs	r0, r0
    886c:	1864      	adds	r4, r4, r1
    886e:	4240      	negs	r0, r0
    8870:	1824      	adds	r4, r4, r0
    8872:	07e7      	lsls	r7, r4, #31
    8874:	0852      	lsrs	r2, r2, #1
    8876:	4317      	orrs	r7, r2
    8878:	0864      	lsrs	r4, r4, #1
    887a:	4666      	mov	r6, ip
    887c:	e708      	b.n	8690 <__aeabi_dsub+0x10c>
    887e:	4812      	ldr	r0, [pc, #72]	; (88c8 <__aeabi_dsub+0x344>)
    8880:	4285      	cmp	r5, r0
    8882:	d100      	bne.n	8886 <__aeabi_dsub+0x302>
    8884:	e085      	b.n	8992 <__aeabi_dsub+0x40e>
    8886:	001d      	movs	r5, r3
    8888:	e6bc      	b.n	8604 <__aeabi_dsub+0x80>
    888a:	0029      	movs	r1, r5
    888c:	3e1f      	subs	r6, #31
    888e:	40f1      	lsrs	r1, r6
    8890:	2b20      	cmp	r3, #32
    8892:	d100      	bne.n	8896 <__aeabi_dsub+0x312>
    8894:	e07f      	b.n	8996 <__aeabi_dsub+0x412>
    8896:	2240      	movs	r2, #64	; 0x40
    8898:	1ad3      	subs	r3, r2, r3
    889a:	409d      	lsls	r5, r3
    889c:	432f      	orrs	r7, r5
    889e:	1e7d      	subs	r5, r7, #1
    88a0:	41af      	sbcs	r7, r5
    88a2:	2400      	movs	r4, #0
    88a4:	430f      	orrs	r7, r1
    88a6:	2600      	movs	r6, #0
    88a8:	e78e      	b.n	87c8 <__aeabi_dsub+0x244>
    88aa:	002b      	movs	r3, r5
    88ac:	000f      	movs	r7, r1
    88ae:	3b20      	subs	r3, #32
    88b0:	40df      	lsrs	r7, r3
    88b2:	2d20      	cmp	r5, #32
    88b4:	d071      	beq.n	899a <__aeabi_dsub+0x416>
    88b6:	2340      	movs	r3, #64	; 0x40
    88b8:	1b5d      	subs	r5, r3, r5
    88ba:	40a9      	lsls	r1, r5
    88bc:	430a      	orrs	r2, r1
    88be:	1e51      	subs	r1, r2, #1
    88c0:	418a      	sbcs	r2, r1
    88c2:	2100      	movs	r1, #0
    88c4:	4317      	orrs	r7, r2
    88c6:	e6af      	b.n	8628 <__aeabi_dsub+0xa4>
    88c8:	000007ff 	.word	0x000007ff
    88cc:	ff7fffff 	.word	0xff7fffff
    88d0:	800fffff 	.word	0x800fffff
    88d4:	2e00      	cmp	r6, #0
    88d6:	d03e      	beq.n	8956 <__aeabi_dsub+0x3d2>
    88d8:	4eb3      	ldr	r6, [pc, #716]	; (8ba8 <__aeabi_dsub+0x624>)
    88da:	45b4      	cmp	ip, r6
    88dc:	d045      	beq.n	896a <__aeabi_dsub+0x3e6>
    88de:	2680      	movs	r6, #128	; 0x80
    88e0:	0436      	lsls	r6, r6, #16
    88e2:	426d      	negs	r5, r5
    88e4:	4334      	orrs	r4, r6
    88e6:	2d38      	cmp	r5, #56	; 0x38
    88e8:	dd00      	ble.n	88ec <__aeabi_dsub+0x368>
    88ea:	e0a8      	b.n	8a3e <__aeabi_dsub+0x4ba>
    88ec:	2d1f      	cmp	r5, #31
    88ee:	dd00      	ble.n	88f2 <__aeabi_dsub+0x36e>
    88f0:	e11f      	b.n	8b32 <__aeabi_dsub+0x5ae>
    88f2:	2620      	movs	r6, #32
    88f4:	0027      	movs	r7, r4
    88f6:	4650      	mov	r0, sl
    88f8:	1b76      	subs	r6, r6, r5
    88fa:	40b7      	lsls	r7, r6
    88fc:	40e8      	lsrs	r0, r5
    88fe:	4307      	orrs	r7, r0
    8900:	4650      	mov	r0, sl
    8902:	40b0      	lsls	r0, r6
    8904:	1e46      	subs	r6, r0, #1
    8906:	41b0      	sbcs	r0, r6
    8908:	40ec      	lsrs	r4, r5
    890a:	4338      	orrs	r0, r7
    890c:	1a17      	subs	r7, r2, r0
    890e:	42ba      	cmp	r2, r7
    8910:	4192      	sbcs	r2, r2
    8912:	1b0c      	subs	r4, r1, r4
    8914:	4252      	negs	r2, r2
    8916:	1aa4      	subs	r4, r4, r2
    8918:	4666      	mov	r6, ip
    891a:	4698      	mov	r8, r3
    891c:	e68b      	b.n	8636 <__aeabi_dsub+0xb2>
    891e:	4664      	mov	r4, ip
    8920:	4667      	mov	r7, ip
    8922:	432c      	orrs	r4, r5
    8924:	d000      	beq.n	8928 <__aeabi_dsub+0x3a4>
    8926:	e68b      	b.n	8640 <__aeabi_dsub+0xbc>
    8928:	2500      	movs	r5, #0
    892a:	2600      	movs	r6, #0
    892c:	2700      	movs	r7, #0
    892e:	e6ea      	b.n	8706 <__aeabi_dsub+0x182>
    8930:	001e      	movs	r6, r3
    8932:	e6ad      	b.n	8690 <__aeabi_dsub+0x10c>
    8934:	2b1f      	cmp	r3, #31
    8936:	dc60      	bgt.n	89fa <__aeabi_dsub+0x476>
    8938:	2720      	movs	r7, #32
    893a:	1af8      	subs	r0, r7, r3
    893c:	000f      	movs	r7, r1
    893e:	4684      	mov	ip, r0
    8940:	4087      	lsls	r7, r0
    8942:	0010      	movs	r0, r2
    8944:	40d8      	lsrs	r0, r3
    8946:	4307      	orrs	r7, r0
    8948:	4660      	mov	r0, ip
    894a:	4082      	lsls	r2, r0
    894c:	1e50      	subs	r0, r2, #1
    894e:	4182      	sbcs	r2, r0
    8950:	40d9      	lsrs	r1, r3
    8952:	4317      	orrs	r7, r2
    8954:	e6f5      	b.n	8742 <__aeabi_dsub+0x1be>
    8956:	0026      	movs	r6, r4
    8958:	4650      	mov	r0, sl
    895a:	4306      	orrs	r6, r0
    895c:	d005      	beq.n	896a <__aeabi_dsub+0x3e6>
    895e:	43ed      	mvns	r5, r5
    8960:	2d00      	cmp	r5, #0
    8962:	d0d3      	beq.n	890c <__aeabi_dsub+0x388>
    8964:	4e90      	ldr	r6, [pc, #576]	; (8ba8 <__aeabi_dsub+0x624>)
    8966:	45b4      	cmp	ip, r6
    8968:	d1bd      	bne.n	88e6 <__aeabi_dsub+0x362>
    896a:	000c      	movs	r4, r1
    896c:	0017      	movs	r7, r2
    896e:	4666      	mov	r6, ip
    8970:	4698      	mov	r8, r3
    8972:	e68d      	b.n	8690 <__aeabi_dsub+0x10c>
    8974:	488c      	ldr	r0, [pc, #560]	; (8ba8 <__aeabi_dsub+0x624>)
    8976:	4283      	cmp	r3, r0
    8978:	d00b      	beq.n	8992 <__aeabi_dsub+0x40e>
    897a:	4663      	mov	r3, ip
    897c:	e6d9      	b.n	8732 <__aeabi_dsub+0x1ae>
    897e:	2d00      	cmp	r5, #0
    8980:	d000      	beq.n	8984 <__aeabi_dsub+0x400>
    8982:	e096      	b.n	8ab2 <__aeabi_dsub+0x52e>
    8984:	0008      	movs	r0, r1
    8986:	4310      	orrs	r0, r2
    8988:	d100      	bne.n	898c <__aeabi_dsub+0x408>
    898a:	e0e2      	b.n	8b52 <__aeabi_dsub+0x5ce>
    898c:	000c      	movs	r4, r1
    898e:	0017      	movs	r7, r2
    8990:	4698      	mov	r8, r3
    8992:	4e85      	ldr	r6, [pc, #532]	; (8ba8 <__aeabi_dsub+0x624>)
    8994:	e67c      	b.n	8690 <__aeabi_dsub+0x10c>
    8996:	2500      	movs	r5, #0
    8998:	e780      	b.n	889c <__aeabi_dsub+0x318>
    899a:	2100      	movs	r1, #0
    899c:	e78e      	b.n	88bc <__aeabi_dsub+0x338>
    899e:	0023      	movs	r3, r4
    89a0:	4650      	mov	r0, sl
    89a2:	4303      	orrs	r3, r0
    89a4:	2e00      	cmp	r6, #0
    89a6:	d000      	beq.n	89aa <__aeabi_dsub+0x426>
    89a8:	e0a8      	b.n	8afc <__aeabi_dsub+0x578>
    89aa:	2b00      	cmp	r3, #0
    89ac:	d100      	bne.n	89b0 <__aeabi_dsub+0x42c>
    89ae:	e0de      	b.n	8b6e <__aeabi_dsub+0x5ea>
    89b0:	000b      	movs	r3, r1
    89b2:	4313      	orrs	r3, r2
    89b4:	d100      	bne.n	89b8 <__aeabi_dsub+0x434>
    89b6:	e66b      	b.n	8690 <__aeabi_dsub+0x10c>
    89b8:	4452      	add	r2, sl
    89ba:	4552      	cmp	r2, sl
    89bc:	4180      	sbcs	r0, r0
    89be:	1864      	adds	r4, r4, r1
    89c0:	4240      	negs	r0, r0
    89c2:	1824      	adds	r4, r4, r0
    89c4:	0017      	movs	r7, r2
    89c6:	0223      	lsls	r3, r4, #8
    89c8:	d400      	bmi.n	89cc <__aeabi_dsub+0x448>
    89ca:	e6fd      	b.n	87c8 <__aeabi_dsub+0x244>
    89cc:	4b77      	ldr	r3, [pc, #476]	; (8bac <__aeabi_dsub+0x628>)
    89ce:	4666      	mov	r6, ip
    89d0:	401c      	ands	r4, r3
    89d2:	e65d      	b.n	8690 <__aeabi_dsub+0x10c>
    89d4:	0025      	movs	r5, r4
    89d6:	4650      	mov	r0, sl
    89d8:	4305      	orrs	r5, r0
    89da:	2e00      	cmp	r6, #0
    89dc:	d1cf      	bne.n	897e <__aeabi_dsub+0x3fa>
    89de:	2d00      	cmp	r5, #0
    89e0:	d14f      	bne.n	8a82 <__aeabi_dsub+0x4fe>
    89e2:	000c      	movs	r4, r1
    89e4:	4314      	orrs	r4, r2
    89e6:	d100      	bne.n	89ea <__aeabi_dsub+0x466>
    89e8:	e0a0      	b.n	8b2c <__aeabi_dsub+0x5a8>
    89ea:	000c      	movs	r4, r1
    89ec:	0017      	movs	r7, r2
    89ee:	4698      	mov	r8, r3
    89f0:	e64e      	b.n	8690 <__aeabi_dsub+0x10c>
    89f2:	4666      	mov	r6, ip
    89f4:	2400      	movs	r4, #0
    89f6:	2700      	movs	r7, #0
    89f8:	e685      	b.n	8706 <__aeabi_dsub+0x182>
    89fa:	001f      	movs	r7, r3
    89fc:	0008      	movs	r0, r1
    89fe:	3f20      	subs	r7, #32
    8a00:	40f8      	lsrs	r0, r7
    8a02:	0007      	movs	r7, r0
    8a04:	2b20      	cmp	r3, #32
    8a06:	d100      	bne.n	8a0a <__aeabi_dsub+0x486>
    8a08:	e08e      	b.n	8b28 <__aeabi_dsub+0x5a4>
    8a0a:	2040      	movs	r0, #64	; 0x40
    8a0c:	1ac3      	subs	r3, r0, r3
    8a0e:	4099      	lsls	r1, r3
    8a10:	430a      	orrs	r2, r1
    8a12:	1e51      	subs	r1, r2, #1
    8a14:	418a      	sbcs	r2, r1
    8a16:	2100      	movs	r1, #0
    8a18:	4317      	orrs	r7, r2
    8a1a:	e692      	b.n	8742 <__aeabi_dsub+0x1be>
    8a1c:	2e00      	cmp	r6, #0
    8a1e:	d114      	bne.n	8a4a <__aeabi_dsub+0x4c6>
    8a20:	0026      	movs	r6, r4
    8a22:	4650      	mov	r0, sl
    8a24:	4306      	orrs	r6, r0
    8a26:	d062      	beq.n	8aee <__aeabi_dsub+0x56a>
    8a28:	43db      	mvns	r3, r3
    8a2a:	2b00      	cmp	r3, #0
    8a2c:	d15c      	bne.n	8ae8 <__aeabi_dsub+0x564>
    8a2e:	1887      	adds	r7, r0, r2
    8a30:	4297      	cmp	r7, r2
    8a32:	4192      	sbcs	r2, r2
    8a34:	1864      	adds	r4, r4, r1
    8a36:	4252      	negs	r2, r2
    8a38:	18a4      	adds	r4, r4, r2
    8a3a:	4666      	mov	r6, ip
    8a3c:	e687      	b.n	874e <__aeabi_dsub+0x1ca>
    8a3e:	4650      	mov	r0, sl
    8a40:	4320      	orrs	r0, r4
    8a42:	1e44      	subs	r4, r0, #1
    8a44:	41a0      	sbcs	r0, r4
    8a46:	2400      	movs	r4, #0
    8a48:	e760      	b.n	890c <__aeabi_dsub+0x388>
    8a4a:	4e57      	ldr	r6, [pc, #348]	; (8ba8 <__aeabi_dsub+0x624>)
    8a4c:	45b4      	cmp	ip, r6
    8a4e:	d04e      	beq.n	8aee <__aeabi_dsub+0x56a>
    8a50:	2680      	movs	r6, #128	; 0x80
    8a52:	0436      	lsls	r6, r6, #16
    8a54:	425b      	negs	r3, r3
    8a56:	4334      	orrs	r4, r6
    8a58:	2b38      	cmp	r3, #56	; 0x38
    8a5a:	dd00      	ble.n	8a5e <__aeabi_dsub+0x4da>
    8a5c:	e07f      	b.n	8b5e <__aeabi_dsub+0x5da>
    8a5e:	2b1f      	cmp	r3, #31
    8a60:	dd00      	ble.n	8a64 <__aeabi_dsub+0x4e0>
    8a62:	e08b      	b.n	8b7c <__aeabi_dsub+0x5f8>
    8a64:	2620      	movs	r6, #32
    8a66:	0027      	movs	r7, r4
    8a68:	4650      	mov	r0, sl
    8a6a:	1af6      	subs	r6, r6, r3
    8a6c:	40b7      	lsls	r7, r6
    8a6e:	40d8      	lsrs	r0, r3
    8a70:	4307      	orrs	r7, r0
    8a72:	4650      	mov	r0, sl
    8a74:	40b0      	lsls	r0, r6
    8a76:	1e46      	subs	r6, r0, #1
    8a78:	41b0      	sbcs	r0, r6
    8a7a:	4307      	orrs	r7, r0
    8a7c:	40dc      	lsrs	r4, r3
    8a7e:	18bf      	adds	r7, r7, r2
    8a80:	e7d6      	b.n	8a30 <__aeabi_dsub+0x4ac>
    8a82:	000d      	movs	r5, r1
    8a84:	4315      	orrs	r5, r2
    8a86:	d100      	bne.n	8a8a <__aeabi_dsub+0x506>
    8a88:	e602      	b.n	8690 <__aeabi_dsub+0x10c>
    8a8a:	4650      	mov	r0, sl
    8a8c:	1a80      	subs	r0, r0, r2
    8a8e:	4582      	cmp	sl, r0
    8a90:	41bf      	sbcs	r7, r7
    8a92:	1a65      	subs	r5, r4, r1
    8a94:	427f      	negs	r7, r7
    8a96:	1bed      	subs	r5, r5, r7
    8a98:	4684      	mov	ip, r0
    8a9a:	0228      	lsls	r0, r5, #8
    8a9c:	d400      	bmi.n	8aa0 <__aeabi_dsub+0x51c>
    8a9e:	e68d      	b.n	87bc <__aeabi_dsub+0x238>
    8aa0:	4650      	mov	r0, sl
    8aa2:	1a17      	subs	r7, r2, r0
    8aa4:	42ba      	cmp	r2, r7
    8aa6:	4192      	sbcs	r2, r2
    8aa8:	1b0c      	subs	r4, r1, r4
    8aaa:	4252      	negs	r2, r2
    8aac:	1aa4      	subs	r4, r4, r2
    8aae:	4698      	mov	r8, r3
    8ab0:	e5ee      	b.n	8690 <__aeabi_dsub+0x10c>
    8ab2:	000d      	movs	r5, r1
    8ab4:	4315      	orrs	r5, r2
    8ab6:	d100      	bne.n	8aba <__aeabi_dsub+0x536>
    8ab8:	e76b      	b.n	8992 <__aeabi_dsub+0x40e>
    8aba:	4650      	mov	r0, sl
    8abc:	0767      	lsls	r7, r4, #29
    8abe:	08c0      	lsrs	r0, r0, #3
    8ac0:	4307      	orrs	r7, r0
    8ac2:	2080      	movs	r0, #128	; 0x80
    8ac4:	08e4      	lsrs	r4, r4, #3
    8ac6:	0300      	lsls	r0, r0, #12
    8ac8:	4204      	tst	r4, r0
    8aca:	d007      	beq.n	8adc <__aeabi_dsub+0x558>
    8acc:	08cd      	lsrs	r5, r1, #3
    8ace:	4205      	tst	r5, r0
    8ad0:	d104      	bne.n	8adc <__aeabi_dsub+0x558>
    8ad2:	002c      	movs	r4, r5
    8ad4:	4698      	mov	r8, r3
    8ad6:	08d7      	lsrs	r7, r2, #3
    8ad8:	0749      	lsls	r1, r1, #29
    8ada:	430f      	orrs	r7, r1
    8adc:	0f7b      	lsrs	r3, r7, #29
    8ade:	00e4      	lsls	r4, r4, #3
    8ae0:	431c      	orrs	r4, r3
    8ae2:	00ff      	lsls	r7, r7, #3
    8ae4:	4e30      	ldr	r6, [pc, #192]	; (8ba8 <__aeabi_dsub+0x624>)
    8ae6:	e5d3      	b.n	8690 <__aeabi_dsub+0x10c>
    8ae8:	4e2f      	ldr	r6, [pc, #188]	; (8ba8 <__aeabi_dsub+0x624>)
    8aea:	45b4      	cmp	ip, r6
    8aec:	d1b4      	bne.n	8a58 <__aeabi_dsub+0x4d4>
    8aee:	000c      	movs	r4, r1
    8af0:	0017      	movs	r7, r2
    8af2:	4666      	mov	r6, ip
    8af4:	e5cc      	b.n	8690 <__aeabi_dsub+0x10c>
    8af6:	2700      	movs	r7, #0
    8af8:	2400      	movs	r4, #0
    8afa:	e5e8      	b.n	86ce <__aeabi_dsub+0x14a>
    8afc:	2b00      	cmp	r3, #0
    8afe:	d039      	beq.n	8b74 <__aeabi_dsub+0x5f0>
    8b00:	000b      	movs	r3, r1
    8b02:	4313      	orrs	r3, r2
    8b04:	d100      	bne.n	8b08 <__aeabi_dsub+0x584>
    8b06:	e744      	b.n	8992 <__aeabi_dsub+0x40e>
    8b08:	08c0      	lsrs	r0, r0, #3
    8b0a:	0767      	lsls	r7, r4, #29
    8b0c:	4307      	orrs	r7, r0
    8b0e:	2080      	movs	r0, #128	; 0x80
    8b10:	08e4      	lsrs	r4, r4, #3
    8b12:	0300      	lsls	r0, r0, #12
    8b14:	4204      	tst	r4, r0
    8b16:	d0e1      	beq.n	8adc <__aeabi_dsub+0x558>
    8b18:	08cb      	lsrs	r3, r1, #3
    8b1a:	4203      	tst	r3, r0
    8b1c:	d1de      	bne.n	8adc <__aeabi_dsub+0x558>
    8b1e:	08d7      	lsrs	r7, r2, #3
    8b20:	0749      	lsls	r1, r1, #29
    8b22:	430f      	orrs	r7, r1
    8b24:	001c      	movs	r4, r3
    8b26:	e7d9      	b.n	8adc <__aeabi_dsub+0x558>
    8b28:	2100      	movs	r1, #0
    8b2a:	e771      	b.n	8a10 <__aeabi_dsub+0x48c>
    8b2c:	2500      	movs	r5, #0
    8b2e:	2700      	movs	r7, #0
    8b30:	e5e9      	b.n	8706 <__aeabi_dsub+0x182>
    8b32:	002e      	movs	r6, r5
    8b34:	0027      	movs	r7, r4
    8b36:	3e20      	subs	r6, #32
    8b38:	40f7      	lsrs	r7, r6
    8b3a:	2d20      	cmp	r5, #32
    8b3c:	d02f      	beq.n	8b9e <__aeabi_dsub+0x61a>
    8b3e:	2640      	movs	r6, #64	; 0x40
    8b40:	1b75      	subs	r5, r6, r5
    8b42:	40ac      	lsls	r4, r5
    8b44:	4650      	mov	r0, sl
    8b46:	4320      	orrs	r0, r4
    8b48:	1e44      	subs	r4, r0, #1
    8b4a:	41a0      	sbcs	r0, r4
    8b4c:	2400      	movs	r4, #0
    8b4e:	4338      	orrs	r0, r7
    8b50:	e6dc      	b.n	890c <__aeabi_dsub+0x388>
    8b52:	2480      	movs	r4, #128	; 0x80
    8b54:	2500      	movs	r5, #0
    8b56:	0324      	lsls	r4, r4, #12
    8b58:	4e13      	ldr	r6, [pc, #76]	; (8ba8 <__aeabi_dsub+0x624>)
    8b5a:	2700      	movs	r7, #0
    8b5c:	e5d3      	b.n	8706 <__aeabi_dsub+0x182>
    8b5e:	4650      	mov	r0, sl
    8b60:	4320      	orrs	r0, r4
    8b62:	0007      	movs	r7, r0
    8b64:	1e78      	subs	r0, r7, #1
    8b66:	4187      	sbcs	r7, r0
    8b68:	2400      	movs	r4, #0
    8b6a:	18bf      	adds	r7, r7, r2
    8b6c:	e760      	b.n	8a30 <__aeabi_dsub+0x4ac>
    8b6e:	000c      	movs	r4, r1
    8b70:	0017      	movs	r7, r2
    8b72:	e58d      	b.n	8690 <__aeabi_dsub+0x10c>
    8b74:	000c      	movs	r4, r1
    8b76:	0017      	movs	r7, r2
    8b78:	4e0b      	ldr	r6, [pc, #44]	; (8ba8 <__aeabi_dsub+0x624>)
    8b7a:	e589      	b.n	8690 <__aeabi_dsub+0x10c>
    8b7c:	001e      	movs	r6, r3
    8b7e:	0027      	movs	r7, r4
    8b80:	3e20      	subs	r6, #32
    8b82:	40f7      	lsrs	r7, r6
    8b84:	2b20      	cmp	r3, #32
    8b86:	d00c      	beq.n	8ba2 <__aeabi_dsub+0x61e>
    8b88:	2640      	movs	r6, #64	; 0x40
    8b8a:	1af3      	subs	r3, r6, r3
    8b8c:	409c      	lsls	r4, r3
    8b8e:	4650      	mov	r0, sl
    8b90:	4320      	orrs	r0, r4
    8b92:	1e44      	subs	r4, r0, #1
    8b94:	41a0      	sbcs	r0, r4
    8b96:	4307      	orrs	r7, r0
    8b98:	2400      	movs	r4, #0
    8b9a:	18bf      	adds	r7, r7, r2
    8b9c:	e748      	b.n	8a30 <__aeabi_dsub+0x4ac>
    8b9e:	2400      	movs	r4, #0
    8ba0:	e7d0      	b.n	8b44 <__aeabi_dsub+0x5c0>
    8ba2:	2400      	movs	r4, #0
    8ba4:	e7f3      	b.n	8b8e <__aeabi_dsub+0x60a>
    8ba6:	46c0      	nop			; (mov r8, r8)
    8ba8:	000007ff 	.word	0x000007ff
    8bac:	ff7fffff 	.word	0xff7fffff

00008bb0 <__aeabi_d2iz>:
    8bb0:	b530      	push	{r4, r5, lr}
    8bb2:	4d13      	ldr	r5, [pc, #76]	; (8c00 <__aeabi_d2iz+0x50>)
    8bb4:	030a      	lsls	r2, r1, #12
    8bb6:	004b      	lsls	r3, r1, #1
    8bb8:	0b12      	lsrs	r2, r2, #12
    8bba:	0d5b      	lsrs	r3, r3, #21
    8bbc:	0fc9      	lsrs	r1, r1, #31
    8bbe:	2400      	movs	r4, #0
    8bc0:	42ab      	cmp	r3, r5
    8bc2:	dd10      	ble.n	8be6 <__aeabi_d2iz+0x36>
    8bc4:	4c0f      	ldr	r4, [pc, #60]	; (8c04 <__aeabi_d2iz+0x54>)
    8bc6:	42a3      	cmp	r3, r4
    8bc8:	dc0f      	bgt.n	8bea <__aeabi_d2iz+0x3a>
    8bca:	2480      	movs	r4, #128	; 0x80
    8bcc:	4d0e      	ldr	r5, [pc, #56]	; (8c08 <__aeabi_d2iz+0x58>)
    8bce:	0364      	lsls	r4, r4, #13
    8bd0:	4322      	orrs	r2, r4
    8bd2:	1aed      	subs	r5, r5, r3
    8bd4:	2d1f      	cmp	r5, #31
    8bd6:	dd0b      	ble.n	8bf0 <__aeabi_d2iz+0x40>
    8bd8:	480c      	ldr	r0, [pc, #48]	; (8c0c <__aeabi_d2iz+0x5c>)
    8bda:	1ac3      	subs	r3, r0, r3
    8bdc:	40da      	lsrs	r2, r3
    8bde:	4254      	negs	r4, r2
    8be0:	2900      	cmp	r1, #0
    8be2:	d100      	bne.n	8be6 <__aeabi_d2iz+0x36>
    8be4:	0014      	movs	r4, r2
    8be6:	0020      	movs	r0, r4
    8be8:	bd30      	pop	{r4, r5, pc}
    8bea:	4b09      	ldr	r3, [pc, #36]	; (8c10 <__aeabi_d2iz+0x60>)
    8bec:	18cc      	adds	r4, r1, r3
    8bee:	e7fa      	b.n	8be6 <__aeabi_d2iz+0x36>
    8bf0:	4c08      	ldr	r4, [pc, #32]	; (8c14 <__aeabi_d2iz+0x64>)
    8bf2:	40e8      	lsrs	r0, r5
    8bf4:	46a4      	mov	ip, r4
    8bf6:	4463      	add	r3, ip
    8bf8:	409a      	lsls	r2, r3
    8bfa:	4302      	orrs	r2, r0
    8bfc:	e7ef      	b.n	8bde <__aeabi_d2iz+0x2e>
    8bfe:	46c0      	nop			; (mov r8, r8)
    8c00:	000003fe 	.word	0x000003fe
    8c04:	0000041d 	.word	0x0000041d
    8c08:	00000433 	.word	0x00000433
    8c0c:	00000413 	.word	0x00000413
    8c10:	7fffffff 	.word	0x7fffffff
    8c14:	fffffbed 	.word	0xfffffbed

00008c18 <__aeabi_ui2d>:
    8c18:	b510      	push	{r4, lr}
    8c1a:	1e04      	subs	r4, r0, #0
    8c1c:	d028      	beq.n	8c70 <__aeabi_ui2d+0x58>
    8c1e:	f000 f833 	bl	8c88 <__clzsi2>
    8c22:	4b15      	ldr	r3, [pc, #84]	; (8c78 <__aeabi_ui2d+0x60>)
    8c24:	4a15      	ldr	r2, [pc, #84]	; (8c7c <__aeabi_ui2d+0x64>)
    8c26:	1a1b      	subs	r3, r3, r0
    8c28:	1ad2      	subs	r2, r2, r3
    8c2a:	2a1f      	cmp	r2, #31
    8c2c:	dd15      	ble.n	8c5a <__aeabi_ui2d+0x42>
    8c2e:	4a14      	ldr	r2, [pc, #80]	; (8c80 <__aeabi_ui2d+0x68>)
    8c30:	1ad2      	subs	r2, r2, r3
    8c32:	4094      	lsls	r4, r2
    8c34:	2200      	movs	r2, #0
    8c36:	0324      	lsls	r4, r4, #12
    8c38:	055b      	lsls	r3, r3, #21
    8c3a:	0b24      	lsrs	r4, r4, #12
    8c3c:	0d5b      	lsrs	r3, r3, #21
    8c3e:	2100      	movs	r1, #0
    8c40:	0010      	movs	r0, r2
    8c42:	0324      	lsls	r4, r4, #12
    8c44:	0d0a      	lsrs	r2, r1, #20
    8c46:	0b24      	lsrs	r4, r4, #12
    8c48:	0512      	lsls	r2, r2, #20
    8c4a:	4322      	orrs	r2, r4
    8c4c:	4c0d      	ldr	r4, [pc, #52]	; (8c84 <__aeabi_ui2d+0x6c>)
    8c4e:	051b      	lsls	r3, r3, #20
    8c50:	4022      	ands	r2, r4
    8c52:	4313      	orrs	r3, r2
    8c54:	005b      	lsls	r3, r3, #1
    8c56:	0859      	lsrs	r1, r3, #1
    8c58:	bd10      	pop	{r4, pc}
    8c5a:	0021      	movs	r1, r4
    8c5c:	4091      	lsls	r1, r2
    8c5e:	000a      	movs	r2, r1
    8c60:	210b      	movs	r1, #11
    8c62:	1a08      	subs	r0, r1, r0
    8c64:	40c4      	lsrs	r4, r0
    8c66:	055b      	lsls	r3, r3, #21
    8c68:	0324      	lsls	r4, r4, #12
    8c6a:	0b24      	lsrs	r4, r4, #12
    8c6c:	0d5b      	lsrs	r3, r3, #21
    8c6e:	e7e6      	b.n	8c3e <__aeabi_ui2d+0x26>
    8c70:	2300      	movs	r3, #0
    8c72:	2400      	movs	r4, #0
    8c74:	2200      	movs	r2, #0
    8c76:	e7e2      	b.n	8c3e <__aeabi_ui2d+0x26>
    8c78:	0000041e 	.word	0x0000041e
    8c7c:	00000433 	.word	0x00000433
    8c80:	00000413 	.word	0x00000413
    8c84:	800fffff 	.word	0x800fffff

00008c88 <__clzsi2>:
    8c88:	211c      	movs	r1, #28
    8c8a:	2301      	movs	r3, #1
    8c8c:	041b      	lsls	r3, r3, #16
    8c8e:	4298      	cmp	r0, r3
    8c90:	d301      	bcc.n	8c96 <__clzsi2+0xe>
    8c92:	0c00      	lsrs	r0, r0, #16
    8c94:	3910      	subs	r1, #16
    8c96:	0a1b      	lsrs	r3, r3, #8
    8c98:	4298      	cmp	r0, r3
    8c9a:	d301      	bcc.n	8ca0 <__clzsi2+0x18>
    8c9c:	0a00      	lsrs	r0, r0, #8
    8c9e:	3908      	subs	r1, #8
    8ca0:	091b      	lsrs	r3, r3, #4
    8ca2:	4298      	cmp	r0, r3
    8ca4:	d301      	bcc.n	8caa <__clzsi2+0x22>
    8ca6:	0900      	lsrs	r0, r0, #4
    8ca8:	3904      	subs	r1, #4
    8caa:	a202      	add	r2, pc, #8	; (adr r2, 8cb4 <__clzsi2+0x2c>)
    8cac:	5c10      	ldrb	r0, [r2, r0]
    8cae:	1840      	adds	r0, r0, r1
    8cb0:	4770      	bx	lr
    8cb2:	46c0      	nop			; (mov r8, r8)
    8cb4:	02020304 	.word	0x02020304
    8cb8:	01010101 	.word	0x01010101
	...

<<<<<<< Updated upstream
00008ca4 <__libc_init_array>:
    8ca4:	b570      	push	{r4, r5, r6, lr}
    8ca6:	2600      	movs	r6, #0
    8ca8:	4d0c      	ldr	r5, [pc, #48]	; (8cdc <__libc_init_array+0x38>)
    8caa:	4c0d      	ldr	r4, [pc, #52]	; (8ce0 <__libc_init_array+0x3c>)
    8cac:	1b64      	subs	r4, r4, r5
    8cae:	10a4      	asrs	r4, r4, #2
    8cb0:	42a6      	cmp	r6, r4
    8cb2:	d109      	bne.n	8cc8 <__libc_init_array+0x24>
    8cb4:	2600      	movs	r6, #0
    8cb6:	f001 ffcf 	bl	ac58 <_init>
    8cba:	4d0a      	ldr	r5, [pc, #40]	; (8ce4 <__libc_init_array+0x40>)
    8cbc:	4c0a      	ldr	r4, [pc, #40]	; (8ce8 <__libc_init_array+0x44>)
    8cbe:	1b64      	subs	r4, r4, r5
    8cc0:	10a4      	asrs	r4, r4, #2
    8cc2:	42a6      	cmp	r6, r4
    8cc4:	d105      	bne.n	8cd2 <__libc_init_array+0x2e>
    8cc6:	bd70      	pop	{r4, r5, r6, pc}
    8cc8:	00b3      	lsls	r3, r6, #2
    8cca:	58eb      	ldr	r3, [r5, r3]
    8ccc:	4798      	blx	r3
    8cce:	3601      	adds	r6, #1
    8cd0:	e7ee      	b.n	8cb0 <__libc_init_array+0xc>
    8cd2:	00b3      	lsls	r3, r6, #2
    8cd4:	58eb      	ldr	r3, [r5, r3]
    8cd6:	4798      	blx	r3
    8cd8:	3601      	adds	r6, #1
    8cda:	e7f2      	b.n	8cc2 <__libc_init_array+0x1e>
    8cdc:	0000ac64 	.word	0x0000ac64
    8ce0:	0000ac64 	.word	0x0000ac64
    8ce4:	0000ac64 	.word	0x0000ac64
    8ce8:	0000ac68 	.word	0x0000ac68

00008cec <malloc>:
    8cec:	b510      	push	{r4, lr}
    8cee:	4b03      	ldr	r3, [pc, #12]	; (8cfc <malloc+0x10>)
    8cf0:	0001      	movs	r1, r0
    8cf2:	6818      	ldr	r0, [r3, #0]
    8cf4:	f000 f860 	bl	8db8 <_malloc_r>
    8cf8:	bd10      	pop	{r4, pc}
    8cfa:	46c0      	nop			; (mov r8, r8)
    8cfc:	20000030 	.word	0x20000030

00008d00 <memcpy>:
    8d00:	2300      	movs	r3, #0
    8d02:	b510      	push	{r4, lr}
    8d04:	429a      	cmp	r2, r3
    8d06:	d100      	bne.n	8d0a <memcpy+0xa>
    8d08:	bd10      	pop	{r4, pc}
    8d0a:	5ccc      	ldrb	r4, [r1, r3]
    8d0c:	54c4      	strb	r4, [r0, r3]
    8d0e:	3301      	adds	r3, #1
    8d10:	e7f8      	b.n	8d04 <memcpy+0x4>

00008d12 <memset>:
    8d12:	0003      	movs	r3, r0
    8d14:	1882      	adds	r2, r0, r2
    8d16:	4293      	cmp	r3, r2
    8d18:	d100      	bne.n	8d1c <memset+0xa>
    8d1a:	4770      	bx	lr
    8d1c:	7019      	strb	r1, [r3, #0]
    8d1e:	3301      	adds	r3, #1
    8d20:	e7f9      	b.n	8d16 <memset+0x4>
=======
00008cc4 <__libc_init_array>:
    8cc4:	b570      	push	{r4, r5, r6, lr}
    8cc6:	2600      	movs	r6, #0
    8cc8:	4d0c      	ldr	r5, [pc, #48]	; (8cfc <__libc_init_array+0x38>)
    8cca:	4c0d      	ldr	r4, [pc, #52]	; (8d00 <__libc_init_array+0x3c>)
    8ccc:	1b64      	subs	r4, r4, r5
    8cce:	10a4      	asrs	r4, r4, #2
    8cd0:	42a6      	cmp	r6, r4
    8cd2:	d109      	bne.n	8ce8 <__libc_init_array+0x24>
    8cd4:	2600      	movs	r6, #0
    8cd6:	f001 ffd5 	bl	ac84 <_init>
    8cda:	4d0a      	ldr	r5, [pc, #40]	; (8d04 <__libc_init_array+0x40>)
    8cdc:	4c0a      	ldr	r4, [pc, #40]	; (8d08 <__libc_init_array+0x44>)
    8cde:	1b64      	subs	r4, r4, r5
    8ce0:	10a4      	asrs	r4, r4, #2
    8ce2:	42a6      	cmp	r6, r4
    8ce4:	d105      	bne.n	8cf2 <__libc_init_array+0x2e>
    8ce6:	bd70      	pop	{r4, r5, r6, pc}
    8ce8:	00b3      	lsls	r3, r6, #2
    8cea:	58eb      	ldr	r3, [r5, r3]
    8cec:	4798      	blx	r3
    8cee:	3601      	adds	r6, #1
    8cf0:	e7ee      	b.n	8cd0 <__libc_init_array+0xc>
    8cf2:	00b3      	lsls	r3, r6, #2
    8cf4:	58eb      	ldr	r3, [r5, r3]
    8cf6:	4798      	blx	r3
    8cf8:	3601      	adds	r6, #1
    8cfa:	e7f2      	b.n	8ce2 <__libc_init_array+0x1e>
    8cfc:	0000ac90 	.word	0x0000ac90
    8d00:	0000ac90 	.word	0x0000ac90
    8d04:	0000ac90 	.word	0x0000ac90
    8d08:	0000ac94 	.word	0x0000ac94

00008d0c <malloc>:
    8d0c:	b510      	push	{r4, lr}
    8d0e:	4b03      	ldr	r3, [pc, #12]	; (8d1c <malloc+0x10>)
    8d10:	0001      	movs	r1, r0
    8d12:	6818      	ldr	r0, [r3, #0]
    8d14:	f000 f860 	bl	8dd8 <_malloc_r>
    8d18:	bd10      	pop	{r4, pc}
    8d1a:	46c0      	nop			; (mov r8, r8)
    8d1c:	20000030 	.word	0x20000030

00008d20 <memcpy>:
    8d20:	2300      	movs	r3, #0
    8d22:	b510      	push	{r4, lr}
    8d24:	429a      	cmp	r2, r3
    8d26:	d100      	bne.n	8d2a <memcpy+0xa>
    8d28:	bd10      	pop	{r4, pc}
    8d2a:	5ccc      	ldrb	r4, [r1, r3]
    8d2c:	54c4      	strb	r4, [r0, r3]
    8d2e:	3301      	adds	r3, #1
    8d30:	e7f8      	b.n	8d24 <memcpy+0x4>

00008d32 <memset>:
    8d32:	0003      	movs	r3, r0
    8d34:	1882      	adds	r2, r0, r2
    8d36:	4293      	cmp	r3, r2
    8d38:	d100      	bne.n	8d3c <memset+0xa>
    8d3a:	4770      	bx	lr
    8d3c:	7019      	strb	r1, [r3, #0]
    8d3e:	3301      	adds	r3, #1
    8d40:	e7f9      	b.n	8d36 <memset+0x4>
>>>>>>> Stashed changes
	...

00008d44 <_free_r>:
    8d44:	b570      	push	{r4, r5, r6, lr}
    8d46:	0005      	movs	r5, r0
    8d48:	2900      	cmp	r1, #0
    8d4a:	d010      	beq.n	8d6e <_free_r+0x2a>
    8d4c:	1f0c      	subs	r4, r1, #4
    8d4e:	6823      	ldr	r3, [r4, #0]
    8d50:	2b00      	cmp	r3, #0
    8d52:	da00      	bge.n	8d56 <_free_r+0x12>
    8d54:	18e4      	adds	r4, r4, r3
    8d56:	0028      	movs	r0, r5
    8d58:	f000 f9a4 	bl	90a4 <__malloc_lock>
    8d5c:	4a1d      	ldr	r2, [pc, #116]	; (8dd4 <_free_r+0x90>)
    8d5e:	6813      	ldr	r3, [r2, #0]
    8d60:	2b00      	cmp	r3, #0
    8d62:	d105      	bne.n	8d70 <_free_r+0x2c>
    8d64:	6063      	str	r3, [r4, #4]
    8d66:	6014      	str	r4, [r2, #0]
    8d68:	0028      	movs	r0, r5
    8d6a:	f000 f99c 	bl	90a6 <__malloc_unlock>
    8d6e:	bd70      	pop	{r4, r5, r6, pc}
    8d70:	42a3      	cmp	r3, r4
    8d72:	d909      	bls.n	8d88 <_free_r+0x44>
    8d74:	6821      	ldr	r1, [r4, #0]
    8d76:	1860      	adds	r0, r4, r1
    8d78:	4283      	cmp	r3, r0
    8d7a:	d1f3      	bne.n	8d64 <_free_r+0x20>
    8d7c:	6818      	ldr	r0, [r3, #0]
    8d7e:	685b      	ldr	r3, [r3, #4]
    8d80:	1841      	adds	r1, r0, r1
    8d82:	6021      	str	r1, [r4, #0]
    8d84:	e7ee      	b.n	8d64 <_free_r+0x20>
    8d86:	0013      	movs	r3, r2
    8d88:	685a      	ldr	r2, [r3, #4]
    8d8a:	2a00      	cmp	r2, #0
    8d8c:	d001      	beq.n	8d92 <_free_r+0x4e>
    8d8e:	42a2      	cmp	r2, r4
    8d90:	d9f9      	bls.n	8d86 <_free_r+0x42>
    8d92:	6819      	ldr	r1, [r3, #0]
    8d94:	1858      	adds	r0, r3, r1
    8d96:	42a0      	cmp	r0, r4
    8d98:	d10b      	bne.n	8db2 <_free_r+0x6e>
    8d9a:	6820      	ldr	r0, [r4, #0]
    8d9c:	1809      	adds	r1, r1, r0
    8d9e:	1858      	adds	r0, r3, r1
    8da0:	6019      	str	r1, [r3, #0]
    8da2:	4282      	cmp	r2, r0
    8da4:	d1e0      	bne.n	8d68 <_free_r+0x24>
    8da6:	6810      	ldr	r0, [r2, #0]
    8da8:	6852      	ldr	r2, [r2, #4]
    8daa:	1841      	adds	r1, r0, r1
    8dac:	6019      	str	r1, [r3, #0]
    8dae:	605a      	str	r2, [r3, #4]
    8db0:	e7da      	b.n	8d68 <_free_r+0x24>
    8db2:	42a0      	cmp	r0, r4
    8db4:	d902      	bls.n	8dbc <_free_r+0x78>
    8db6:	230c      	movs	r3, #12
    8db8:	602b      	str	r3, [r5, #0]
    8dba:	e7d5      	b.n	8d68 <_free_r+0x24>
    8dbc:	6821      	ldr	r1, [r4, #0]
    8dbe:	1860      	adds	r0, r4, r1
    8dc0:	4282      	cmp	r2, r0
    8dc2:	d103      	bne.n	8dcc <_free_r+0x88>
    8dc4:	6810      	ldr	r0, [r2, #0]
    8dc6:	6852      	ldr	r2, [r2, #4]
    8dc8:	1841      	adds	r1, r0, r1
    8dca:	6021      	str	r1, [r4, #0]
    8dcc:	6062      	str	r2, [r4, #4]
    8dce:	605c      	str	r4, [r3, #4]
    8dd0:	e7ca      	b.n	8d68 <_free_r+0x24>
    8dd2:	46c0      	nop			; (mov r8, r8)
    8dd4:	2000385c 	.word	0x2000385c

00008dd8 <_malloc_r>:
    8dd8:	2303      	movs	r3, #3
    8dda:	b570      	push	{r4, r5, r6, lr}
    8ddc:	1ccd      	adds	r5, r1, #3
    8dde:	439d      	bics	r5, r3
    8de0:	3508      	adds	r5, #8
    8de2:	0006      	movs	r6, r0
    8de4:	2d0c      	cmp	r5, #12
    8de6:	d21e      	bcs.n	8e26 <_malloc_r+0x4e>
    8de8:	250c      	movs	r5, #12
    8dea:	42a9      	cmp	r1, r5
    8dec:	d81d      	bhi.n	8e2a <_malloc_r+0x52>
    8dee:	0030      	movs	r0, r6
    8df0:	f000 f958 	bl	90a4 <__malloc_lock>
    8df4:	4a25      	ldr	r2, [pc, #148]	; (8e8c <_malloc_r+0xb4>)
    8df6:	6814      	ldr	r4, [r2, #0]
    8df8:	0021      	movs	r1, r4
    8dfa:	2900      	cmp	r1, #0
    8dfc:	d119      	bne.n	8e32 <_malloc_r+0x5a>
    8dfe:	4c24      	ldr	r4, [pc, #144]	; (8e90 <_malloc_r+0xb8>)
    8e00:	6823      	ldr	r3, [r4, #0]
    8e02:	2b00      	cmp	r3, #0
    8e04:	d103      	bne.n	8e0e <_malloc_r+0x36>
    8e06:	0030      	movs	r0, r6
    8e08:	f000 f844 	bl	8e94 <_sbrk_r>
    8e0c:	6020      	str	r0, [r4, #0]
    8e0e:	0029      	movs	r1, r5
    8e10:	0030      	movs	r0, r6
    8e12:	f000 f83f 	bl	8e94 <_sbrk_r>
    8e16:	1c43      	adds	r3, r0, #1
    8e18:	d12c      	bne.n	8e74 <_malloc_r+0x9c>
    8e1a:	230c      	movs	r3, #12
    8e1c:	0030      	movs	r0, r6
    8e1e:	6033      	str	r3, [r6, #0]
    8e20:	f000 f941 	bl	90a6 <__malloc_unlock>
    8e24:	e003      	b.n	8e2e <_malloc_r+0x56>
    8e26:	2d00      	cmp	r5, #0
    8e28:	dadf      	bge.n	8dea <_malloc_r+0x12>
    8e2a:	230c      	movs	r3, #12
    8e2c:	6033      	str	r3, [r6, #0]
    8e2e:	2000      	movs	r0, #0
    8e30:	bd70      	pop	{r4, r5, r6, pc}
    8e32:	680b      	ldr	r3, [r1, #0]
    8e34:	1b5b      	subs	r3, r3, r5
    8e36:	d41a      	bmi.n	8e6e <_malloc_r+0x96>
    8e38:	2b0b      	cmp	r3, #11
    8e3a:	d903      	bls.n	8e44 <_malloc_r+0x6c>
    8e3c:	600b      	str	r3, [r1, #0]
    8e3e:	18cc      	adds	r4, r1, r3
    8e40:	6025      	str	r5, [r4, #0]
    8e42:	e003      	b.n	8e4c <_malloc_r+0x74>
    8e44:	428c      	cmp	r4, r1
    8e46:	d10e      	bne.n	8e66 <_malloc_r+0x8e>
    8e48:	6863      	ldr	r3, [r4, #4]
    8e4a:	6013      	str	r3, [r2, #0]
    8e4c:	0030      	movs	r0, r6
    8e4e:	f000 f92a 	bl	90a6 <__malloc_unlock>
    8e52:	0020      	movs	r0, r4
    8e54:	2207      	movs	r2, #7
    8e56:	300b      	adds	r0, #11
    8e58:	1d23      	adds	r3, r4, #4
    8e5a:	4390      	bics	r0, r2
    8e5c:	1ac3      	subs	r3, r0, r3
    8e5e:	d0e7      	beq.n	8e30 <_malloc_r+0x58>
    8e60:	425a      	negs	r2, r3
    8e62:	50e2      	str	r2, [r4, r3]
    8e64:	e7e4      	b.n	8e30 <_malloc_r+0x58>
    8e66:	684b      	ldr	r3, [r1, #4]
    8e68:	6063      	str	r3, [r4, #4]
    8e6a:	000c      	movs	r4, r1
    8e6c:	e7ee      	b.n	8e4c <_malloc_r+0x74>
    8e6e:	000c      	movs	r4, r1
    8e70:	6849      	ldr	r1, [r1, #4]
    8e72:	e7c2      	b.n	8dfa <_malloc_r+0x22>
    8e74:	2303      	movs	r3, #3
    8e76:	1cc4      	adds	r4, r0, #3
    8e78:	439c      	bics	r4, r3
    8e7a:	42a0      	cmp	r0, r4
    8e7c:	d0e0      	beq.n	8e40 <_malloc_r+0x68>
    8e7e:	1a21      	subs	r1, r4, r0
    8e80:	0030      	movs	r0, r6
    8e82:	f000 f807 	bl	8e94 <_sbrk_r>
    8e86:	1c43      	adds	r3, r0, #1
    8e88:	d1da      	bne.n	8e40 <_malloc_r+0x68>
    8e8a:	e7c6      	b.n	8e1a <_malloc_r+0x42>
    8e8c:	2000385c 	.word	0x2000385c
    8e90:	20003860 	.word	0x20003860

00008e94 <_sbrk_r>:
    8e94:	2300      	movs	r3, #0
    8e96:	b570      	push	{r4, r5, r6, lr}
    8e98:	4c06      	ldr	r4, [pc, #24]	; (8eb4 <_sbrk_r+0x20>)
    8e9a:	0005      	movs	r5, r0
    8e9c:	0008      	movs	r0, r1
    8e9e:	6023      	str	r3, [r4, #0]
    8ea0:	f7fd ff68 	bl	6d74 <_sbrk>
    8ea4:	1c43      	adds	r3, r0, #1
    8ea6:	d103      	bne.n	8eb0 <_sbrk_r+0x1c>
    8ea8:	6823      	ldr	r3, [r4, #0]
    8eaa:	2b00      	cmp	r3, #0
    8eac:	d000      	beq.n	8eb0 <_sbrk_r+0x1c>
    8eae:	602b      	str	r3, [r5, #0]
    8eb0:	bd70      	pop	{r4, r5, r6, pc}
    8eb2:	46c0      	nop			; (mov r8, r8)
    8eb4:	20004f80 	.word	0x20004f80

00008eb8 <sniprintf>:
    8eb8:	b40c      	push	{r2, r3}
    8eba:	b530      	push	{r4, r5, lr}
    8ebc:	4b16      	ldr	r3, [pc, #88]	; (8f18 <sniprintf+0x60>)
    8ebe:	b09d      	sub	sp, #116	; 0x74
    8ec0:	1e0c      	subs	r4, r1, #0
    8ec2:	681d      	ldr	r5, [r3, #0]
    8ec4:	da08      	bge.n	8ed8 <sniprintf+0x20>
    8ec6:	238b      	movs	r3, #139	; 0x8b
    8ec8:	2001      	movs	r0, #1
    8eca:	602b      	str	r3, [r5, #0]
    8ecc:	4240      	negs	r0, r0
    8ece:	b01d      	add	sp, #116	; 0x74
    8ed0:	bc30      	pop	{r4, r5}
    8ed2:	bc08      	pop	{r3}
    8ed4:	b002      	add	sp, #8
    8ed6:	4718      	bx	r3
    8ed8:	2382      	movs	r3, #130	; 0x82
    8eda:	a902      	add	r1, sp, #8
    8edc:	009b      	lsls	r3, r3, #2
    8ede:	818b      	strh	r3, [r1, #12]
    8ee0:	2300      	movs	r3, #0
    8ee2:	9002      	str	r0, [sp, #8]
    8ee4:	6108      	str	r0, [r1, #16]
    8ee6:	429c      	cmp	r4, r3
    8ee8:	d000      	beq.n	8eec <sniprintf+0x34>
    8eea:	1e63      	subs	r3, r4, #1
    8eec:	608b      	str	r3, [r1, #8]
    8eee:	614b      	str	r3, [r1, #20]
    8ef0:	2301      	movs	r3, #1
    8ef2:	425b      	negs	r3, r3
    8ef4:	81cb      	strh	r3, [r1, #14]
    8ef6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8ef8:	ab21      	add	r3, sp, #132	; 0x84
    8efa:	0028      	movs	r0, r5
    8efc:	9301      	str	r3, [sp, #4]
    8efe:	f000 f935 	bl	916c <_svfiprintf_r>
    8f02:	1c43      	adds	r3, r0, #1
    8f04:	da01      	bge.n	8f0a <sniprintf+0x52>
    8f06:	238b      	movs	r3, #139	; 0x8b
    8f08:	602b      	str	r3, [r5, #0]
    8f0a:	2c00      	cmp	r4, #0
    8f0c:	d0df      	beq.n	8ece <sniprintf+0x16>
    8f0e:	2300      	movs	r3, #0
    8f10:	9a02      	ldr	r2, [sp, #8]
    8f12:	7013      	strb	r3, [r2, #0]
    8f14:	e7db      	b.n	8ece <sniprintf+0x16>
    8f16:	46c0      	nop			; (mov r8, r8)
    8f18:	20000030 	.word	0x20000030

00008f1c <siprintf>:
    8f1c:	b40e      	push	{r1, r2, r3}
    8f1e:	b510      	push	{r4, lr}
    8f20:	b09d      	sub	sp, #116	; 0x74
    8f22:	a902      	add	r1, sp, #8
    8f24:	9002      	str	r0, [sp, #8]
    8f26:	6108      	str	r0, [r1, #16]
    8f28:	480b      	ldr	r0, [pc, #44]	; (8f58 <siprintf+0x3c>)
    8f2a:	2482      	movs	r4, #130	; 0x82
    8f2c:	6088      	str	r0, [r1, #8]
    8f2e:	6148      	str	r0, [r1, #20]
    8f30:	2001      	movs	r0, #1
    8f32:	4240      	negs	r0, r0
    8f34:	ab1f      	add	r3, sp, #124	; 0x7c
    8f36:	81c8      	strh	r0, [r1, #14]
    8f38:	4808      	ldr	r0, [pc, #32]	; (8f5c <siprintf+0x40>)
    8f3a:	cb04      	ldmia	r3!, {r2}
    8f3c:	00a4      	lsls	r4, r4, #2
    8f3e:	6800      	ldr	r0, [r0, #0]
    8f40:	9301      	str	r3, [sp, #4]
    8f42:	818c      	strh	r4, [r1, #12]
    8f44:	f000 f912 	bl	916c <_svfiprintf_r>
    8f48:	2300      	movs	r3, #0
    8f4a:	9a02      	ldr	r2, [sp, #8]
    8f4c:	7013      	strb	r3, [r2, #0]
    8f4e:	b01d      	add	sp, #116	; 0x74
    8f50:	bc10      	pop	{r4}
    8f52:	bc08      	pop	{r3}
    8f54:	b003      	add	sp, #12
    8f56:	4718      	bx	r3
    8f58:	7fffffff 	.word	0x7fffffff
    8f5c:	20000030 	.word	0x20000030

00008f60 <strcasecmp>:
    8f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f62:	0007      	movs	r7, r0
    8f64:	000e      	movs	r6, r1
    8f66:	783c      	ldrb	r4, [r7, #0]
    8f68:	f000 f87c 	bl	9064 <__locale_ctype_ptr>
    8f6c:	2203      	movs	r2, #3
    8f6e:	1900      	adds	r0, r0, r4
    8f70:	7843      	ldrb	r3, [r0, #1]
    8f72:	4013      	ands	r3, r2
    8f74:	2b01      	cmp	r3, #1
    8f76:	d100      	bne.n	8f7a <strcasecmp+0x1a>
    8f78:	3420      	adds	r4, #32
    8f7a:	7835      	ldrb	r5, [r6, #0]
    8f7c:	f000 f872 	bl	9064 <__locale_ctype_ptr>
    8f80:	2203      	movs	r2, #3
    8f82:	1940      	adds	r0, r0, r5
    8f84:	7843      	ldrb	r3, [r0, #1]
    8f86:	4013      	ands	r3, r2
    8f88:	2b01      	cmp	r3, #1
    8f8a:	d100      	bne.n	8f8e <strcasecmp+0x2e>
    8f8c:	3520      	adds	r5, #32
    8f8e:	1b60      	subs	r0, r4, r5
    8f90:	d103      	bne.n	8f9a <strcasecmp+0x3a>
    8f92:	3701      	adds	r7, #1
    8f94:	3601      	adds	r6, #1
    8f96:	2d00      	cmp	r5, #0
    8f98:	d1e5      	bne.n	8f66 <strcasecmp+0x6>
    8f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008f9c <strlen>:
    8f9c:	2300      	movs	r3, #0
    8f9e:	5cc2      	ldrb	r2, [r0, r3]
    8fa0:	3301      	adds	r3, #1
    8fa2:	2a00      	cmp	r2, #0
    8fa4:	d1fb      	bne.n	8f9e <strlen+0x2>
    8fa6:	1e58      	subs	r0, r3, #1
    8fa8:	4770      	bx	lr

00008faa <strncmp>:
    8faa:	2300      	movs	r3, #0
    8fac:	b530      	push	{r4, r5, lr}
    8fae:	429a      	cmp	r2, r3
    8fb0:	d00a      	beq.n	8fc8 <strncmp+0x1e>
    8fb2:	3a01      	subs	r2, #1
    8fb4:	5cc4      	ldrb	r4, [r0, r3]
    8fb6:	5ccd      	ldrb	r5, [r1, r3]
    8fb8:	42ac      	cmp	r4, r5
    8fba:	d104      	bne.n	8fc6 <strncmp+0x1c>
    8fbc:	429a      	cmp	r2, r3
    8fbe:	d002      	beq.n	8fc6 <strncmp+0x1c>
    8fc0:	3301      	adds	r3, #1
    8fc2:	2c00      	cmp	r4, #0
    8fc4:	d1f6      	bne.n	8fb4 <strncmp+0xa>
    8fc6:	1b63      	subs	r3, r4, r5
    8fc8:	0018      	movs	r0, r3
    8fca:	bd30      	pop	{r4, r5, pc}

00008fcc <strncpy>:
    8fcc:	b570      	push	{r4, r5, r6, lr}
    8fce:	0004      	movs	r4, r0
    8fd0:	2a00      	cmp	r2, #0
    8fd2:	d100      	bne.n	8fd6 <strncpy+0xa>
    8fd4:	bd70      	pop	{r4, r5, r6, pc}
    8fd6:	780d      	ldrb	r5, [r1, #0]
    8fd8:	1e56      	subs	r6, r2, #1
    8fda:	1c63      	adds	r3, r4, #1
    8fdc:	7025      	strb	r5, [r4, #0]
    8fde:	3101      	adds	r1, #1
    8fe0:	2d00      	cmp	r5, #0
    8fe2:	d105      	bne.n	8ff0 <strncpy+0x24>
    8fe4:	18a4      	adds	r4, r4, r2
    8fe6:	429c      	cmp	r4, r3
    8fe8:	d0f4      	beq.n	8fd4 <strncpy+0x8>
    8fea:	701d      	strb	r5, [r3, #0]
    8fec:	3301      	adds	r3, #1
    8fee:	e7fa      	b.n	8fe6 <strncpy+0x1a>
    8ff0:	001c      	movs	r4, r3
    8ff2:	0032      	movs	r2, r6
    8ff4:	e7ec      	b.n	8fd0 <strncpy+0x4>

00008ff6 <_vsniprintf_r>:
    8ff6:	b530      	push	{r4, r5, lr}
    8ff8:	0014      	movs	r4, r2
    8ffa:	b09b      	sub	sp, #108	; 0x6c
    8ffc:	0005      	movs	r5, r0
    8ffe:	001a      	movs	r2, r3
    9000:	2c00      	cmp	r4, #0
    9002:	da05      	bge.n	9010 <_vsniprintf_r+0x1a>
    9004:	238b      	movs	r3, #139	; 0x8b
    9006:	6003      	str	r3, [r0, #0]
    9008:	2001      	movs	r0, #1
    900a:	4240      	negs	r0, r0
    900c:	b01b      	add	sp, #108	; 0x6c
    900e:	bd30      	pop	{r4, r5, pc}
    9010:	2382      	movs	r3, #130	; 0x82
    9012:	4668      	mov	r0, sp
    9014:	009b      	lsls	r3, r3, #2
    9016:	8183      	strh	r3, [r0, #12]
    9018:	2300      	movs	r3, #0
    901a:	9100      	str	r1, [sp, #0]
    901c:	9104      	str	r1, [sp, #16]
    901e:	429c      	cmp	r4, r3
    9020:	d000      	beq.n	9024 <_vsniprintf_r+0x2e>
    9022:	1e63      	subs	r3, r4, #1
    9024:	9302      	str	r3, [sp, #8]
    9026:	9305      	str	r3, [sp, #20]
    9028:	2301      	movs	r3, #1
    902a:	4669      	mov	r1, sp
    902c:	425b      	negs	r3, r3
    902e:	81cb      	strh	r3, [r1, #14]
    9030:	0028      	movs	r0, r5
    9032:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    9034:	f000 f89a 	bl	916c <_svfiprintf_r>
    9038:	1c43      	adds	r3, r0, #1
    903a:	da01      	bge.n	9040 <_vsniprintf_r+0x4a>
    903c:	238b      	movs	r3, #139	; 0x8b
    903e:	602b      	str	r3, [r5, #0]
    9040:	2c00      	cmp	r4, #0
    9042:	d0e3      	beq.n	900c <_vsniprintf_r+0x16>
    9044:	2300      	movs	r3, #0
    9046:	9a00      	ldr	r2, [sp, #0]
    9048:	7013      	strb	r3, [r2, #0]
    904a:	e7df      	b.n	900c <_vsniprintf_r+0x16>

0000904c <vsniprintf>:
    904c:	b507      	push	{r0, r1, r2, lr}
    904e:	9300      	str	r3, [sp, #0]
    9050:	0013      	movs	r3, r2
    9052:	000a      	movs	r2, r1
    9054:	0001      	movs	r1, r0
    9056:	4802      	ldr	r0, [pc, #8]	; (9060 <vsniprintf+0x14>)
    9058:	6800      	ldr	r0, [r0, #0]
    905a:	f7ff ffcc 	bl	8ff6 <_vsniprintf_r>
    905e:	bd0e      	pop	{r1, r2, r3, pc}
    9060:	20000030 	.word	0x20000030

00009064 <__locale_ctype_ptr>:
    9064:	4b04      	ldr	r3, [pc, #16]	; (9078 <__locale_ctype_ptr+0x14>)
    9066:	681b      	ldr	r3, [r3, #0]
    9068:	6a1b      	ldr	r3, [r3, #32]
    906a:	2b00      	cmp	r3, #0
    906c:	d100      	bne.n	9070 <__locale_ctype_ptr+0xc>
    906e:	4b03      	ldr	r3, [pc, #12]	; (907c <__locale_ctype_ptr+0x18>)
    9070:	33ec      	adds	r3, #236	; 0xec
    9072:	6818      	ldr	r0, [r3, #0]
    9074:	4770      	bx	lr
    9076:	46c0      	nop			; (mov r8, r8)
    9078:	20000030 	.word	0x20000030
    907c:	20000094 	.word	0x20000094

00009080 <__ascii_mbtowc>:
    9080:	b082      	sub	sp, #8
    9082:	2900      	cmp	r1, #0
    9084:	d100      	bne.n	9088 <__ascii_mbtowc+0x8>
    9086:	a901      	add	r1, sp, #4
    9088:	1e10      	subs	r0, r2, #0
    908a:	d006      	beq.n	909a <__ascii_mbtowc+0x1a>
    908c:	2b00      	cmp	r3, #0
    908e:	d006      	beq.n	909e <__ascii_mbtowc+0x1e>
    9090:	7813      	ldrb	r3, [r2, #0]
    9092:	600b      	str	r3, [r1, #0]
    9094:	7810      	ldrb	r0, [r2, #0]
    9096:	1e43      	subs	r3, r0, #1
    9098:	4198      	sbcs	r0, r3
    909a:	b002      	add	sp, #8
    909c:	4770      	bx	lr
    909e:	2002      	movs	r0, #2
    90a0:	4240      	negs	r0, r0
    90a2:	e7fa      	b.n	909a <__ascii_mbtowc+0x1a>

000090a4 <__malloc_lock>:
    90a4:	4770      	bx	lr

000090a6 <__malloc_unlock>:
    90a6:	4770      	bx	lr

000090a8 <__ssputs_r>:
    90a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    90aa:	688e      	ldr	r6, [r1, #8]
    90ac:	b085      	sub	sp, #20
    90ae:	0007      	movs	r7, r0
    90b0:	000c      	movs	r4, r1
    90b2:	9203      	str	r2, [sp, #12]
    90b4:	9301      	str	r3, [sp, #4]
    90b6:	429e      	cmp	r6, r3
    90b8:	d839      	bhi.n	912e <__ssputs_r+0x86>
    90ba:	2390      	movs	r3, #144	; 0x90
    90bc:	898a      	ldrh	r2, [r1, #12]
    90be:	00db      	lsls	r3, r3, #3
    90c0:	421a      	tst	r2, r3
    90c2:	d034      	beq.n	912e <__ssputs_r+0x86>
    90c4:	2503      	movs	r5, #3
    90c6:	6909      	ldr	r1, [r1, #16]
    90c8:	6823      	ldr	r3, [r4, #0]
    90ca:	1a5b      	subs	r3, r3, r1
    90cc:	9302      	str	r3, [sp, #8]
    90ce:	6963      	ldr	r3, [r4, #20]
    90d0:	9802      	ldr	r0, [sp, #8]
    90d2:	435d      	muls	r5, r3
    90d4:	0feb      	lsrs	r3, r5, #31
    90d6:	195d      	adds	r5, r3, r5
    90d8:	9b01      	ldr	r3, [sp, #4]
    90da:	106d      	asrs	r5, r5, #1
    90dc:	3301      	adds	r3, #1
    90de:	181b      	adds	r3, r3, r0
    90e0:	42ab      	cmp	r3, r5
    90e2:	d900      	bls.n	90e6 <__ssputs_r+0x3e>
    90e4:	001d      	movs	r5, r3
    90e6:	0553      	lsls	r3, r2, #21
    90e8:	d532      	bpl.n	9150 <__ssputs_r+0xa8>
    90ea:	0029      	movs	r1, r5
    90ec:	0038      	movs	r0, r7
    90ee:	f7ff fe73 	bl	8dd8 <_malloc_r>
    90f2:	1e06      	subs	r6, r0, #0
    90f4:	d109      	bne.n	910a <__ssputs_r+0x62>
    90f6:	230c      	movs	r3, #12
    90f8:	603b      	str	r3, [r7, #0]
    90fa:	2340      	movs	r3, #64	; 0x40
    90fc:	2001      	movs	r0, #1
    90fe:	89a2      	ldrh	r2, [r4, #12]
    9100:	4240      	negs	r0, r0
    9102:	4313      	orrs	r3, r2
    9104:	81a3      	strh	r3, [r4, #12]
    9106:	b005      	add	sp, #20
    9108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    910a:	9a02      	ldr	r2, [sp, #8]
    910c:	6921      	ldr	r1, [r4, #16]
    910e:	f7ff fe07 	bl	8d20 <memcpy>
    9112:	89a3      	ldrh	r3, [r4, #12]
    9114:	4a14      	ldr	r2, [pc, #80]	; (9168 <__ssputs_r+0xc0>)
    9116:	401a      	ands	r2, r3
    9118:	2380      	movs	r3, #128	; 0x80
    911a:	4313      	orrs	r3, r2
    911c:	81a3      	strh	r3, [r4, #12]
    911e:	9b02      	ldr	r3, [sp, #8]
    9120:	6126      	str	r6, [r4, #16]
    9122:	18f6      	adds	r6, r6, r3
    9124:	6026      	str	r6, [r4, #0]
    9126:	6165      	str	r5, [r4, #20]
    9128:	9e01      	ldr	r6, [sp, #4]
    912a:	1aed      	subs	r5, r5, r3
    912c:	60a5      	str	r5, [r4, #8]
    912e:	9b01      	ldr	r3, [sp, #4]
    9130:	42b3      	cmp	r3, r6
    9132:	d200      	bcs.n	9136 <__ssputs_r+0x8e>
    9134:	001e      	movs	r6, r3
    9136:	0032      	movs	r2, r6
    9138:	9903      	ldr	r1, [sp, #12]
    913a:	6820      	ldr	r0, [r4, #0]
    913c:	f000 fab9 	bl	96b2 <memmove>
    9140:	68a3      	ldr	r3, [r4, #8]
    9142:	2000      	movs	r0, #0
    9144:	1b9b      	subs	r3, r3, r6
    9146:	60a3      	str	r3, [r4, #8]
    9148:	6823      	ldr	r3, [r4, #0]
    914a:	199e      	adds	r6, r3, r6
    914c:	6026      	str	r6, [r4, #0]
    914e:	e7da      	b.n	9106 <__ssputs_r+0x5e>
    9150:	002a      	movs	r2, r5
    9152:	0038      	movs	r0, r7
    9154:	f000 fabf 	bl	96d6 <_realloc_r>
    9158:	1e06      	subs	r6, r0, #0
    915a:	d1e0      	bne.n	911e <__ssputs_r+0x76>
    915c:	6921      	ldr	r1, [r4, #16]
    915e:	0038      	movs	r0, r7
    9160:	f7ff fdf0 	bl	8d44 <_free_r>
    9164:	e7c7      	b.n	90f6 <__ssputs_r+0x4e>
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	fffffb7f 	.word	0xfffffb7f

0000916c <_svfiprintf_r>:
    916c:	b5f0      	push	{r4, r5, r6, r7, lr}
    916e:	b09f      	sub	sp, #124	; 0x7c
    9170:	9002      	str	r0, [sp, #8]
    9172:	9305      	str	r3, [sp, #20]
    9174:	898b      	ldrh	r3, [r1, #12]
    9176:	000f      	movs	r7, r1
    9178:	0016      	movs	r6, r2
    917a:	061b      	lsls	r3, r3, #24
    917c:	d511      	bpl.n	91a2 <_svfiprintf_r+0x36>
    917e:	690b      	ldr	r3, [r1, #16]
    9180:	2b00      	cmp	r3, #0
    9182:	d10e      	bne.n	91a2 <_svfiprintf_r+0x36>
    9184:	2140      	movs	r1, #64	; 0x40
    9186:	f7ff fe27 	bl	8dd8 <_malloc_r>
    918a:	6038      	str	r0, [r7, #0]
    918c:	6138      	str	r0, [r7, #16]
    918e:	2800      	cmp	r0, #0
    9190:	d105      	bne.n	919e <_svfiprintf_r+0x32>
    9192:	230c      	movs	r3, #12
    9194:	9a02      	ldr	r2, [sp, #8]
    9196:	3801      	subs	r0, #1
    9198:	6013      	str	r3, [r2, #0]
    919a:	b01f      	add	sp, #124	; 0x7c
    919c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    919e:	2340      	movs	r3, #64	; 0x40
    91a0:	617b      	str	r3, [r7, #20]
    91a2:	2300      	movs	r3, #0
    91a4:	ad06      	add	r5, sp, #24
    91a6:	616b      	str	r3, [r5, #20]
    91a8:	3320      	adds	r3, #32
    91aa:	766b      	strb	r3, [r5, #25]
    91ac:	3310      	adds	r3, #16
    91ae:	76ab      	strb	r3, [r5, #26]
    91b0:	0034      	movs	r4, r6
    91b2:	7823      	ldrb	r3, [r4, #0]
    91b4:	2b00      	cmp	r3, #0
    91b6:	d147      	bne.n	9248 <_svfiprintf_r+0xdc>
    91b8:	1ba3      	subs	r3, r4, r6
    91ba:	9304      	str	r3, [sp, #16]
    91bc:	d00d      	beq.n	91da <_svfiprintf_r+0x6e>
    91be:	1ba3      	subs	r3, r4, r6
    91c0:	0032      	movs	r2, r6
    91c2:	0039      	movs	r1, r7
    91c4:	9802      	ldr	r0, [sp, #8]
    91c6:	f7ff ff6f 	bl	90a8 <__ssputs_r>
    91ca:	1c43      	adds	r3, r0, #1
    91cc:	d100      	bne.n	91d0 <_svfiprintf_r+0x64>
    91ce:	e0b5      	b.n	933c <_svfiprintf_r+0x1d0>
    91d0:	696a      	ldr	r2, [r5, #20]
    91d2:	9b04      	ldr	r3, [sp, #16]
    91d4:	4694      	mov	ip, r2
    91d6:	4463      	add	r3, ip
    91d8:	616b      	str	r3, [r5, #20]
    91da:	7823      	ldrb	r3, [r4, #0]
    91dc:	2b00      	cmp	r3, #0
    91de:	d100      	bne.n	91e2 <_svfiprintf_r+0x76>
    91e0:	e0ac      	b.n	933c <_svfiprintf_r+0x1d0>
    91e2:	2201      	movs	r2, #1
    91e4:	2300      	movs	r3, #0
    91e6:	4252      	negs	r2, r2
    91e8:	606a      	str	r2, [r5, #4]
    91ea:	a902      	add	r1, sp, #8
    91ec:	3254      	adds	r2, #84	; 0x54
    91ee:	1852      	adds	r2, r2, r1
    91f0:	3401      	adds	r4, #1
    91f2:	602b      	str	r3, [r5, #0]
    91f4:	60eb      	str	r3, [r5, #12]
    91f6:	60ab      	str	r3, [r5, #8]
    91f8:	7013      	strb	r3, [r2, #0]
    91fa:	65ab      	str	r3, [r5, #88]	; 0x58
    91fc:	4e58      	ldr	r6, [pc, #352]	; (9360 <_svfiprintf_r+0x1f4>)
    91fe:	2205      	movs	r2, #5
    9200:	7821      	ldrb	r1, [r4, #0]
    9202:	0030      	movs	r0, r6
    9204:	f000 fa4a 	bl	969c <memchr>
    9208:	1c62      	adds	r2, r4, #1
    920a:	2800      	cmp	r0, #0
    920c:	d120      	bne.n	9250 <_svfiprintf_r+0xe4>
    920e:	6829      	ldr	r1, [r5, #0]
    9210:	06cb      	lsls	r3, r1, #27
    9212:	d504      	bpl.n	921e <_svfiprintf_r+0xb2>
    9214:	2353      	movs	r3, #83	; 0x53
    9216:	ae02      	add	r6, sp, #8
    9218:	3020      	adds	r0, #32
    921a:	199b      	adds	r3, r3, r6
    921c:	7018      	strb	r0, [r3, #0]
    921e:	070b      	lsls	r3, r1, #28
    9220:	d504      	bpl.n	922c <_svfiprintf_r+0xc0>
    9222:	2353      	movs	r3, #83	; 0x53
    9224:	202b      	movs	r0, #43	; 0x2b
    9226:	ae02      	add	r6, sp, #8
    9228:	199b      	adds	r3, r3, r6
    922a:	7018      	strb	r0, [r3, #0]
    922c:	7823      	ldrb	r3, [r4, #0]
    922e:	2b2a      	cmp	r3, #42	; 0x2a
    9230:	d016      	beq.n	9260 <_svfiprintf_r+0xf4>
    9232:	2000      	movs	r0, #0
    9234:	210a      	movs	r1, #10
    9236:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9238:	7822      	ldrb	r2, [r4, #0]
    923a:	3a30      	subs	r2, #48	; 0x30
    923c:	2a09      	cmp	r2, #9
    923e:	d955      	bls.n	92ec <_svfiprintf_r+0x180>
    9240:	2800      	cmp	r0, #0
    9242:	d015      	beq.n	9270 <_svfiprintf_r+0x104>
    9244:	9309      	str	r3, [sp, #36]	; 0x24
    9246:	e013      	b.n	9270 <_svfiprintf_r+0x104>
    9248:	2b25      	cmp	r3, #37	; 0x25
    924a:	d0b5      	beq.n	91b8 <_svfiprintf_r+0x4c>
    924c:	3401      	adds	r4, #1
    924e:	e7b0      	b.n	91b2 <_svfiprintf_r+0x46>
    9250:	2301      	movs	r3, #1
    9252:	1b80      	subs	r0, r0, r6
    9254:	4083      	lsls	r3, r0
    9256:	6829      	ldr	r1, [r5, #0]
    9258:	0014      	movs	r4, r2
    925a:	430b      	orrs	r3, r1
    925c:	602b      	str	r3, [r5, #0]
    925e:	e7cd      	b.n	91fc <_svfiprintf_r+0x90>
    9260:	9b05      	ldr	r3, [sp, #20]
    9262:	1d18      	adds	r0, r3, #4
    9264:	681b      	ldr	r3, [r3, #0]
    9266:	9005      	str	r0, [sp, #20]
    9268:	2b00      	cmp	r3, #0
    926a:	db39      	blt.n	92e0 <_svfiprintf_r+0x174>
    926c:	9309      	str	r3, [sp, #36]	; 0x24
    926e:	0014      	movs	r4, r2
    9270:	7823      	ldrb	r3, [r4, #0]
    9272:	2b2e      	cmp	r3, #46	; 0x2e
    9274:	d10b      	bne.n	928e <_svfiprintf_r+0x122>
    9276:	7863      	ldrb	r3, [r4, #1]
    9278:	1c62      	adds	r2, r4, #1
    927a:	2b2a      	cmp	r3, #42	; 0x2a
    927c:	d13e      	bne.n	92fc <_svfiprintf_r+0x190>
    927e:	9b05      	ldr	r3, [sp, #20]
    9280:	3402      	adds	r4, #2
    9282:	1d1a      	adds	r2, r3, #4
    9284:	681b      	ldr	r3, [r3, #0]
    9286:	9205      	str	r2, [sp, #20]
    9288:	2b00      	cmp	r3, #0
    928a:	db34      	blt.n	92f6 <_svfiprintf_r+0x18a>
    928c:	9307      	str	r3, [sp, #28]
    928e:	4e35      	ldr	r6, [pc, #212]	; (9364 <_svfiprintf_r+0x1f8>)
    9290:	7821      	ldrb	r1, [r4, #0]
    9292:	2203      	movs	r2, #3
    9294:	0030      	movs	r0, r6
    9296:	f000 fa01 	bl	969c <memchr>
    929a:	2800      	cmp	r0, #0
<<<<<<< Updated upstream
    929c:	d046      	beq.n	932c <_svfiprintf_r+0x1e0>
    929e:	4b2b      	ldr	r3, [pc, #172]	; (934c <_svfiprintf_r+0x200>)
    92a0:	2b00      	cmp	r3, #0
    92a2:	d12f      	bne.n	9304 <_svfiprintf_r+0x1b8>
    92a4:	6829      	ldr	r1, [r5, #0]
    92a6:	9b05      	ldr	r3, [sp, #20]
    92a8:	2207      	movs	r2, #7
    92aa:	05c9      	lsls	r1, r1, #23
    92ac:	d528      	bpl.n	9300 <_svfiprintf_r+0x1b4>
    92ae:	189b      	adds	r3, r3, r2
    92b0:	4393      	bics	r3, r2
    92b2:	3308      	adds	r3, #8
    92b4:	9305      	str	r3, [sp, #20]
    92b6:	696b      	ldr	r3, [r5, #20]
    92b8:	9a03      	ldr	r2, [sp, #12]
    92ba:	189b      	adds	r3, r3, r2
    92bc:	616b      	str	r3, [r5, #20]
    92be:	e767      	b.n	9190 <_svfiprintf_r+0x44>
    92c0:	425b      	negs	r3, r3
    92c2:	60eb      	str	r3, [r5, #12]
    92c4:	2302      	movs	r3, #2
    92c6:	430b      	orrs	r3, r1
    92c8:	602b      	str	r3, [r5, #0]
    92ca:	e7c0      	b.n	924e <_svfiprintf_r+0x102>
    92cc:	434b      	muls	r3, r1
    92ce:	3401      	adds	r4, #1
    92d0:	189b      	adds	r3, r3, r2
    92d2:	2001      	movs	r0, #1
    92d4:	e7a0      	b.n	9218 <_svfiprintf_r+0xcc>
    92d6:	2301      	movs	r3, #1
    92d8:	425b      	negs	r3, r3
    92da:	e7c7      	b.n	926c <_svfiprintf_r+0x120>
    92dc:	2300      	movs	r3, #0
    92de:	0014      	movs	r4, r2
    92e0:	200a      	movs	r0, #10
    92e2:	001a      	movs	r2, r3
    92e4:	606b      	str	r3, [r5, #4]
    92e6:	7821      	ldrb	r1, [r4, #0]
    92e8:	3930      	subs	r1, #48	; 0x30
    92ea:	2909      	cmp	r1, #9
    92ec:	d903      	bls.n	92f6 <_svfiprintf_r+0x1aa>
    92ee:	2b00      	cmp	r3, #0
    92f0:	d0bd      	beq.n	926e <_svfiprintf_r+0x122>
    92f2:	9207      	str	r2, [sp, #28]
    92f4:	e7bb      	b.n	926e <_svfiprintf_r+0x122>
    92f6:	4342      	muls	r2, r0
    92f8:	3401      	adds	r4, #1
    92fa:	1852      	adds	r2, r2, r1
    92fc:	2301      	movs	r3, #1
    92fe:	e7f2      	b.n	92e6 <_svfiprintf_r+0x19a>
    9300:	3307      	adds	r3, #7
    9302:	e7d5      	b.n	92b0 <_svfiprintf_r+0x164>
    9304:	ab05      	add	r3, sp, #20
    9306:	9300      	str	r3, [sp, #0]
    9308:	003a      	movs	r2, r7
    930a:	4b11      	ldr	r3, [pc, #68]	; (9350 <_svfiprintf_r+0x204>)
    930c:	0029      	movs	r1, r5
    930e:	9802      	ldr	r0, [sp, #8]
    9310:	e000      	b.n	9314 <_svfiprintf_r+0x1c8>
    9312:	bf00      	nop
    9314:	9003      	str	r0, [sp, #12]
    9316:	9b03      	ldr	r3, [sp, #12]
    9318:	3301      	adds	r3, #1
    931a:	d1cc      	bne.n	92b6 <_svfiprintf_r+0x16a>
    931c:	89bb      	ldrh	r3, [r7, #12]
    931e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9320:	065b      	lsls	r3, r3, #25
    9322:	d400      	bmi.n	9326 <_svfiprintf_r+0x1da>
    9324:	e729      	b.n	917a <_svfiprintf_r+0x2e>
    9326:	2001      	movs	r0, #1
    9328:	4240      	negs	r0, r0
    932a:	e726      	b.n	917a <_svfiprintf_r+0x2e>
    932c:	ab05      	add	r3, sp, #20
    932e:	9300      	str	r3, [sp, #0]
    9330:	003a      	movs	r2, r7
    9332:	4b07      	ldr	r3, [pc, #28]	; (9350 <_svfiprintf_r+0x204>)
    9334:	0029      	movs	r1, r5
    9336:	9802      	ldr	r0, [sp, #8]
    9338:	f000 f87a 	bl	9430 <_printf_i>
    933c:	e7ea      	b.n	9314 <_svfiprintf_r+0x1c8>
    933e:	46c0      	nop			; (mov r8, r8)
    9340:	0000ab22 	.word	0x0000ab22
    9344:	0000ab28 	.word	0x0000ab28
    9348:	0000ab2c 	.word	0x0000ab2c
    934c:	00000000 	.word	0x00000000
    9350:	00009089 	.word	0x00009089

00009354 <_printf_common>:
    9354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9356:	0015      	movs	r5, r2
    9358:	9301      	str	r3, [sp, #4]
    935a:	688a      	ldr	r2, [r1, #8]
    935c:	690b      	ldr	r3, [r1, #16]
    935e:	9000      	str	r0, [sp, #0]
    9360:	000c      	movs	r4, r1
    9362:	4293      	cmp	r3, r2
    9364:	da00      	bge.n	9368 <_printf_common+0x14>
    9366:	0013      	movs	r3, r2
    9368:	0022      	movs	r2, r4
    936a:	602b      	str	r3, [r5, #0]
    936c:	3243      	adds	r2, #67	; 0x43
    936e:	7812      	ldrb	r2, [r2, #0]
    9370:	2a00      	cmp	r2, #0
    9372:	d001      	beq.n	9378 <_printf_common+0x24>
    9374:	3301      	adds	r3, #1
    9376:	602b      	str	r3, [r5, #0]
    9378:	6823      	ldr	r3, [r4, #0]
    937a:	069b      	lsls	r3, r3, #26
    937c:	d502      	bpl.n	9384 <_printf_common+0x30>
    937e:	682b      	ldr	r3, [r5, #0]
    9380:	3302      	adds	r3, #2
    9382:	602b      	str	r3, [r5, #0]
    9384:	2706      	movs	r7, #6
    9386:	6823      	ldr	r3, [r4, #0]
    9388:	401f      	ands	r7, r3
    938a:	d027      	beq.n	93dc <_printf_common+0x88>
    938c:	0023      	movs	r3, r4
    938e:	3343      	adds	r3, #67	; 0x43
    9390:	781b      	ldrb	r3, [r3, #0]
    9392:	1e5a      	subs	r2, r3, #1
    9394:	4193      	sbcs	r3, r2
    9396:	6822      	ldr	r2, [r4, #0]
    9398:	0692      	lsls	r2, r2, #26
    939a:	d430      	bmi.n	93fe <_printf_common+0xaa>
    939c:	0022      	movs	r2, r4
    939e:	9901      	ldr	r1, [sp, #4]
    93a0:	3243      	adds	r2, #67	; 0x43
    93a2:	9800      	ldr	r0, [sp, #0]
    93a4:	9e08      	ldr	r6, [sp, #32]
    93a6:	47b0      	blx	r6
    93a8:	1c43      	adds	r3, r0, #1
    93aa:	d025      	beq.n	93f8 <_printf_common+0xa4>
    93ac:	2306      	movs	r3, #6
    93ae:	6820      	ldr	r0, [r4, #0]
    93b0:	682a      	ldr	r2, [r5, #0]
    93b2:	68e1      	ldr	r1, [r4, #12]
    93b4:	4003      	ands	r3, r0
    93b6:	2500      	movs	r5, #0
    93b8:	2b04      	cmp	r3, #4
    93ba:	d103      	bne.n	93c4 <_printf_common+0x70>
    93bc:	1a8d      	subs	r5, r1, r2
    93be:	43eb      	mvns	r3, r5
    93c0:	17db      	asrs	r3, r3, #31
    93c2:	401d      	ands	r5, r3
    93c4:	68a3      	ldr	r3, [r4, #8]
    93c6:	6922      	ldr	r2, [r4, #16]
    93c8:	4293      	cmp	r3, r2
    93ca:	dd01      	ble.n	93d0 <_printf_common+0x7c>
    93cc:	1a9b      	subs	r3, r3, r2
    93ce:	18ed      	adds	r5, r5, r3
    93d0:	2700      	movs	r7, #0
    93d2:	42bd      	cmp	r5, r7
    93d4:	d120      	bne.n	9418 <_printf_common+0xc4>
    93d6:	2000      	movs	r0, #0
    93d8:	e010      	b.n	93fc <_printf_common+0xa8>
    93da:	3701      	adds	r7, #1
    93dc:	68e3      	ldr	r3, [r4, #12]
    93de:	682a      	ldr	r2, [r5, #0]
    93e0:	1a9b      	subs	r3, r3, r2
    93e2:	429f      	cmp	r7, r3
    93e4:	dad2      	bge.n	938c <_printf_common+0x38>
    93e6:	0022      	movs	r2, r4
    93e8:	2301      	movs	r3, #1
    93ea:	3219      	adds	r2, #25
    93ec:	9901      	ldr	r1, [sp, #4]
    93ee:	9800      	ldr	r0, [sp, #0]
    93f0:	9e08      	ldr	r6, [sp, #32]
    93f2:	47b0      	blx	r6
    93f4:	1c43      	adds	r3, r0, #1
    93f6:	d1f0      	bne.n	93da <_printf_common+0x86>
    93f8:	2001      	movs	r0, #1
    93fa:	4240      	negs	r0, r0
    93fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    93fe:	2030      	movs	r0, #48	; 0x30
    9400:	18e1      	adds	r1, r4, r3
    9402:	3143      	adds	r1, #67	; 0x43
    9404:	7008      	strb	r0, [r1, #0]
    9406:	0021      	movs	r1, r4
    9408:	1c5a      	adds	r2, r3, #1
    940a:	3145      	adds	r1, #69	; 0x45
    940c:	7809      	ldrb	r1, [r1, #0]
    940e:	18a2      	adds	r2, r4, r2
    9410:	3243      	adds	r2, #67	; 0x43
    9412:	3302      	adds	r3, #2
    9414:	7011      	strb	r1, [r2, #0]
    9416:	e7c1      	b.n	939c <_printf_common+0x48>
    9418:	0022      	movs	r2, r4
    941a:	2301      	movs	r3, #1
    941c:	321a      	adds	r2, #26
    941e:	9901      	ldr	r1, [sp, #4]
    9420:	9800      	ldr	r0, [sp, #0]
    9422:	9e08      	ldr	r6, [sp, #32]
    9424:	47b0      	blx	r6
    9426:	1c43      	adds	r3, r0, #1
    9428:	d0e6      	beq.n	93f8 <_printf_common+0xa4>
    942a:	3701      	adds	r7, #1
    942c:	e7d1      	b.n	93d2 <_printf_common+0x7e>
=======
    929c:	d006      	beq.n	92ac <_svfiprintf_r+0x140>
    929e:	2340      	movs	r3, #64	; 0x40
    92a0:	1b80      	subs	r0, r0, r6
    92a2:	4083      	lsls	r3, r0
    92a4:	682a      	ldr	r2, [r5, #0]
    92a6:	3401      	adds	r4, #1
    92a8:	4313      	orrs	r3, r2
    92aa:	602b      	str	r3, [r5, #0]
    92ac:	7821      	ldrb	r1, [r4, #0]
    92ae:	2206      	movs	r2, #6
    92b0:	482d      	ldr	r0, [pc, #180]	; (9368 <_svfiprintf_r+0x1fc>)
    92b2:	1c66      	adds	r6, r4, #1
    92b4:	7629      	strb	r1, [r5, #24]
    92b6:	f000 f9f1 	bl	969c <memchr>
    92ba:	2800      	cmp	r0, #0
    92bc:	d046      	beq.n	934c <_svfiprintf_r+0x1e0>
    92be:	4b2b      	ldr	r3, [pc, #172]	; (936c <_svfiprintf_r+0x200>)
    92c0:	2b00      	cmp	r3, #0
    92c2:	d12f      	bne.n	9324 <_svfiprintf_r+0x1b8>
    92c4:	6829      	ldr	r1, [r5, #0]
    92c6:	9b05      	ldr	r3, [sp, #20]
    92c8:	2207      	movs	r2, #7
    92ca:	05c9      	lsls	r1, r1, #23
    92cc:	d528      	bpl.n	9320 <_svfiprintf_r+0x1b4>
    92ce:	189b      	adds	r3, r3, r2
    92d0:	4393      	bics	r3, r2
    92d2:	3308      	adds	r3, #8
    92d4:	9305      	str	r3, [sp, #20]
    92d6:	696b      	ldr	r3, [r5, #20]
    92d8:	9a03      	ldr	r2, [sp, #12]
    92da:	189b      	adds	r3, r3, r2
    92dc:	616b      	str	r3, [r5, #20]
    92de:	e767      	b.n	91b0 <_svfiprintf_r+0x44>
    92e0:	425b      	negs	r3, r3
    92e2:	60eb      	str	r3, [r5, #12]
    92e4:	2302      	movs	r3, #2
    92e6:	430b      	orrs	r3, r1
    92e8:	602b      	str	r3, [r5, #0]
    92ea:	e7c0      	b.n	926e <_svfiprintf_r+0x102>
    92ec:	434b      	muls	r3, r1
    92ee:	3401      	adds	r4, #1
    92f0:	189b      	adds	r3, r3, r2
    92f2:	2001      	movs	r0, #1
    92f4:	e7a0      	b.n	9238 <_svfiprintf_r+0xcc>
    92f6:	2301      	movs	r3, #1
    92f8:	425b      	negs	r3, r3
    92fa:	e7c7      	b.n	928c <_svfiprintf_r+0x120>
    92fc:	2300      	movs	r3, #0
    92fe:	0014      	movs	r4, r2
    9300:	200a      	movs	r0, #10
    9302:	001a      	movs	r2, r3
    9304:	606b      	str	r3, [r5, #4]
    9306:	7821      	ldrb	r1, [r4, #0]
    9308:	3930      	subs	r1, #48	; 0x30
    930a:	2909      	cmp	r1, #9
    930c:	d903      	bls.n	9316 <_svfiprintf_r+0x1aa>
    930e:	2b00      	cmp	r3, #0
    9310:	d0bd      	beq.n	928e <_svfiprintf_r+0x122>
    9312:	9207      	str	r2, [sp, #28]
    9314:	e7bb      	b.n	928e <_svfiprintf_r+0x122>
    9316:	4342      	muls	r2, r0
    9318:	3401      	adds	r4, #1
    931a:	1852      	adds	r2, r2, r1
    931c:	2301      	movs	r3, #1
    931e:	e7f2      	b.n	9306 <_svfiprintf_r+0x19a>
    9320:	3307      	adds	r3, #7
    9322:	e7d5      	b.n	92d0 <_svfiprintf_r+0x164>
    9324:	ab05      	add	r3, sp, #20
    9326:	9300      	str	r3, [sp, #0]
    9328:	003a      	movs	r2, r7
    932a:	4b11      	ldr	r3, [pc, #68]	; (9370 <_svfiprintf_r+0x204>)
    932c:	0029      	movs	r1, r5
    932e:	9802      	ldr	r0, [sp, #8]
    9330:	e000      	b.n	9334 <_svfiprintf_r+0x1c8>
    9332:	bf00      	nop
    9334:	9003      	str	r0, [sp, #12]
    9336:	9b03      	ldr	r3, [sp, #12]
    9338:	3301      	adds	r3, #1
    933a:	d1cc      	bne.n	92d6 <_svfiprintf_r+0x16a>
    933c:	89bb      	ldrh	r3, [r7, #12]
    933e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9340:	065b      	lsls	r3, r3, #25
    9342:	d400      	bmi.n	9346 <_svfiprintf_r+0x1da>
    9344:	e729      	b.n	919a <_svfiprintf_r+0x2e>
    9346:	2001      	movs	r0, #1
    9348:	4240      	negs	r0, r0
    934a:	e726      	b.n	919a <_svfiprintf_r+0x2e>
    934c:	ab05      	add	r3, sp, #20
    934e:	9300      	str	r3, [sp, #0]
    9350:	003a      	movs	r2, r7
    9352:	4b07      	ldr	r3, [pc, #28]	; (9370 <_svfiprintf_r+0x204>)
    9354:	0029      	movs	r1, r5
    9356:	9802      	ldr	r0, [sp, #8]
    9358:	f000 f87a 	bl	9450 <_printf_i>
    935c:	e7ea      	b.n	9334 <_svfiprintf_r+0x1c8>
    935e:	46c0      	nop			; (mov r8, r8)
    9360:	0000ab4e 	.word	0x0000ab4e
    9364:	0000ab54 	.word	0x0000ab54
    9368:	0000ab58 	.word	0x0000ab58
    936c:	00000000 	.word	0x00000000
    9370:	000090a9 	.word	0x000090a9

00009374 <_printf_common>:
    9374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9376:	0015      	movs	r5, r2
    9378:	9301      	str	r3, [sp, #4]
    937a:	688a      	ldr	r2, [r1, #8]
    937c:	690b      	ldr	r3, [r1, #16]
    937e:	9000      	str	r0, [sp, #0]
    9380:	000c      	movs	r4, r1
    9382:	4293      	cmp	r3, r2
    9384:	da00      	bge.n	9388 <_printf_common+0x14>
    9386:	0013      	movs	r3, r2
    9388:	0022      	movs	r2, r4
    938a:	602b      	str	r3, [r5, #0]
    938c:	3243      	adds	r2, #67	; 0x43
    938e:	7812      	ldrb	r2, [r2, #0]
    9390:	2a00      	cmp	r2, #0
    9392:	d001      	beq.n	9398 <_printf_common+0x24>
    9394:	3301      	adds	r3, #1
    9396:	602b      	str	r3, [r5, #0]
    9398:	6823      	ldr	r3, [r4, #0]
    939a:	069b      	lsls	r3, r3, #26
    939c:	d502      	bpl.n	93a4 <_printf_common+0x30>
    939e:	682b      	ldr	r3, [r5, #0]
    93a0:	3302      	adds	r3, #2
    93a2:	602b      	str	r3, [r5, #0]
    93a4:	2706      	movs	r7, #6
    93a6:	6823      	ldr	r3, [r4, #0]
    93a8:	401f      	ands	r7, r3
    93aa:	d027      	beq.n	93fc <_printf_common+0x88>
    93ac:	0023      	movs	r3, r4
    93ae:	3343      	adds	r3, #67	; 0x43
    93b0:	781b      	ldrb	r3, [r3, #0]
    93b2:	1e5a      	subs	r2, r3, #1
    93b4:	4193      	sbcs	r3, r2
    93b6:	6822      	ldr	r2, [r4, #0]
    93b8:	0692      	lsls	r2, r2, #26
    93ba:	d430      	bmi.n	941e <_printf_common+0xaa>
    93bc:	0022      	movs	r2, r4
    93be:	9901      	ldr	r1, [sp, #4]
    93c0:	3243      	adds	r2, #67	; 0x43
    93c2:	9800      	ldr	r0, [sp, #0]
    93c4:	9e08      	ldr	r6, [sp, #32]
    93c6:	47b0      	blx	r6
    93c8:	1c43      	adds	r3, r0, #1
    93ca:	d025      	beq.n	9418 <_printf_common+0xa4>
    93cc:	2306      	movs	r3, #6
    93ce:	6820      	ldr	r0, [r4, #0]
    93d0:	682a      	ldr	r2, [r5, #0]
    93d2:	68e1      	ldr	r1, [r4, #12]
    93d4:	4003      	ands	r3, r0
    93d6:	2500      	movs	r5, #0
    93d8:	2b04      	cmp	r3, #4
    93da:	d103      	bne.n	93e4 <_printf_common+0x70>
    93dc:	1a8d      	subs	r5, r1, r2
    93de:	43eb      	mvns	r3, r5
    93e0:	17db      	asrs	r3, r3, #31
    93e2:	401d      	ands	r5, r3
    93e4:	68a3      	ldr	r3, [r4, #8]
    93e6:	6922      	ldr	r2, [r4, #16]
    93e8:	4293      	cmp	r3, r2
    93ea:	dd01      	ble.n	93f0 <_printf_common+0x7c>
    93ec:	1a9b      	subs	r3, r3, r2
    93ee:	18ed      	adds	r5, r5, r3
    93f0:	2700      	movs	r7, #0
    93f2:	42bd      	cmp	r5, r7
    93f4:	d120      	bne.n	9438 <_printf_common+0xc4>
    93f6:	2000      	movs	r0, #0
    93f8:	e010      	b.n	941c <_printf_common+0xa8>
    93fa:	3701      	adds	r7, #1
    93fc:	68e3      	ldr	r3, [r4, #12]
    93fe:	682a      	ldr	r2, [r5, #0]
    9400:	1a9b      	subs	r3, r3, r2
    9402:	429f      	cmp	r7, r3
    9404:	dad2      	bge.n	93ac <_printf_common+0x38>
    9406:	0022      	movs	r2, r4
    9408:	2301      	movs	r3, #1
    940a:	3219      	adds	r2, #25
    940c:	9901      	ldr	r1, [sp, #4]
    940e:	9800      	ldr	r0, [sp, #0]
    9410:	9e08      	ldr	r6, [sp, #32]
    9412:	47b0      	blx	r6
    9414:	1c43      	adds	r3, r0, #1
    9416:	d1f0      	bne.n	93fa <_printf_common+0x86>
    9418:	2001      	movs	r0, #1
    941a:	4240      	negs	r0, r0
    941c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    941e:	2030      	movs	r0, #48	; 0x30
    9420:	18e1      	adds	r1, r4, r3
    9422:	3143      	adds	r1, #67	; 0x43
    9424:	7008      	strb	r0, [r1, #0]
    9426:	0021      	movs	r1, r4
    9428:	1c5a      	adds	r2, r3, #1
    942a:	3145      	adds	r1, #69	; 0x45
    942c:	7809      	ldrb	r1, [r1, #0]
    942e:	18a2      	adds	r2, r4, r2
    9430:	3243      	adds	r2, #67	; 0x43
    9432:	3302      	adds	r3, #2
    9434:	7011      	strb	r1, [r2, #0]
    9436:	e7c1      	b.n	93bc <_printf_common+0x48>
    9438:	0022      	movs	r2, r4
    943a:	2301      	movs	r3, #1
    943c:	321a      	adds	r2, #26
    943e:	9901      	ldr	r1, [sp, #4]
    9440:	9800      	ldr	r0, [sp, #0]
    9442:	9e08      	ldr	r6, [sp, #32]
    9444:	47b0      	blx	r6
    9446:	1c43      	adds	r3, r0, #1
    9448:	d0e6      	beq.n	9418 <_printf_common+0xa4>
    944a:	3701      	adds	r7, #1
    944c:	e7d1      	b.n	93f2 <_printf_common+0x7e>
>>>>>>> Stashed changes
	...

00009450 <_printf_i>:
    9450:	b5f0      	push	{r4, r5, r6, r7, lr}
    9452:	b08b      	sub	sp, #44	; 0x2c
    9454:	9206      	str	r2, [sp, #24]
    9456:	000a      	movs	r2, r1
    9458:	3243      	adds	r2, #67	; 0x43
    945a:	9307      	str	r3, [sp, #28]
    945c:	9005      	str	r0, [sp, #20]
    945e:	9204      	str	r2, [sp, #16]
    9460:	7e0a      	ldrb	r2, [r1, #24]
    9462:	000c      	movs	r4, r1
    9464:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9466:	2a6e      	cmp	r2, #110	; 0x6e
    9468:	d100      	bne.n	946c <_printf_i+0x1c>
    946a:	e08f      	b.n	958c <_printf_i+0x13c>
    946c:	d817      	bhi.n	949e <_printf_i+0x4e>
    946e:	2a63      	cmp	r2, #99	; 0x63
    9470:	d02c      	beq.n	94cc <_printf_i+0x7c>
    9472:	d808      	bhi.n	9486 <_printf_i+0x36>
    9474:	2a00      	cmp	r2, #0
    9476:	d100      	bne.n	947a <_printf_i+0x2a>
    9478:	e099      	b.n	95ae <_printf_i+0x15e>
    947a:	2a58      	cmp	r2, #88	; 0x58
    947c:	d054      	beq.n	9528 <_printf_i+0xd8>
    947e:	0026      	movs	r6, r4
    9480:	3642      	adds	r6, #66	; 0x42
    9482:	7032      	strb	r2, [r6, #0]
    9484:	e029      	b.n	94da <_printf_i+0x8a>
    9486:	2a64      	cmp	r2, #100	; 0x64
    9488:	d001      	beq.n	948e <_printf_i+0x3e>
    948a:	2a69      	cmp	r2, #105	; 0x69
    948c:	d1f7      	bne.n	947e <_printf_i+0x2e>
    948e:	6821      	ldr	r1, [r4, #0]
    9490:	681a      	ldr	r2, [r3, #0]
    9492:	0608      	lsls	r0, r1, #24
    9494:	d523      	bpl.n	94de <_printf_i+0x8e>
    9496:	1d11      	adds	r1, r2, #4
    9498:	6019      	str	r1, [r3, #0]
    949a:	6815      	ldr	r5, [r2, #0]
    949c:	e025      	b.n	94ea <_printf_i+0x9a>
    949e:	2a73      	cmp	r2, #115	; 0x73
    94a0:	d100      	bne.n	94a4 <_printf_i+0x54>
    94a2:	e088      	b.n	95b6 <_printf_i+0x166>
    94a4:	d808      	bhi.n	94b8 <_printf_i+0x68>
    94a6:	2a6f      	cmp	r2, #111	; 0x6f
    94a8:	d029      	beq.n	94fe <_printf_i+0xae>
    94aa:	2a70      	cmp	r2, #112	; 0x70
    94ac:	d1e7      	bne.n	947e <_printf_i+0x2e>
    94ae:	2220      	movs	r2, #32
    94b0:	6809      	ldr	r1, [r1, #0]
    94b2:	430a      	orrs	r2, r1
    94b4:	6022      	str	r2, [r4, #0]
    94b6:	e003      	b.n	94c0 <_printf_i+0x70>
    94b8:	2a75      	cmp	r2, #117	; 0x75
    94ba:	d020      	beq.n	94fe <_printf_i+0xae>
    94bc:	2a78      	cmp	r2, #120	; 0x78
    94be:	d1de      	bne.n	947e <_printf_i+0x2e>
    94c0:	0022      	movs	r2, r4
    94c2:	2178      	movs	r1, #120	; 0x78
    94c4:	3245      	adds	r2, #69	; 0x45
    94c6:	7011      	strb	r1, [r2, #0]
    94c8:	4a6c      	ldr	r2, [pc, #432]	; (967c <_printf_i+0x22c>)
    94ca:	e030      	b.n	952e <_printf_i+0xde>
    94cc:	000e      	movs	r6, r1
    94ce:	681a      	ldr	r2, [r3, #0]
    94d0:	3642      	adds	r6, #66	; 0x42
    94d2:	1d11      	adds	r1, r2, #4
    94d4:	6019      	str	r1, [r3, #0]
    94d6:	6813      	ldr	r3, [r2, #0]
    94d8:	7033      	strb	r3, [r6, #0]
    94da:	2301      	movs	r3, #1
    94dc:	e079      	b.n	95d2 <_printf_i+0x182>
    94de:	0649      	lsls	r1, r1, #25
    94e0:	d5d9      	bpl.n	9496 <_printf_i+0x46>
    94e2:	1d11      	adds	r1, r2, #4
    94e4:	6019      	str	r1, [r3, #0]
    94e6:	2300      	movs	r3, #0
    94e8:	5ed5      	ldrsh	r5, [r2, r3]
    94ea:	2d00      	cmp	r5, #0
    94ec:	da03      	bge.n	94f6 <_printf_i+0xa6>
    94ee:	232d      	movs	r3, #45	; 0x2d
    94f0:	9a04      	ldr	r2, [sp, #16]
    94f2:	426d      	negs	r5, r5
    94f4:	7013      	strb	r3, [r2, #0]
    94f6:	4b62      	ldr	r3, [pc, #392]	; (9680 <_printf_i+0x230>)
    94f8:	270a      	movs	r7, #10
    94fa:	9303      	str	r3, [sp, #12]
    94fc:	e02f      	b.n	955e <_printf_i+0x10e>
    94fe:	6820      	ldr	r0, [r4, #0]
    9500:	6819      	ldr	r1, [r3, #0]
    9502:	0605      	lsls	r5, r0, #24
    9504:	d503      	bpl.n	950e <_printf_i+0xbe>
    9506:	1d08      	adds	r0, r1, #4
    9508:	6018      	str	r0, [r3, #0]
    950a:	680d      	ldr	r5, [r1, #0]
    950c:	e005      	b.n	951a <_printf_i+0xca>
    950e:	0640      	lsls	r0, r0, #25
    9510:	d5f9      	bpl.n	9506 <_printf_i+0xb6>
    9512:	680d      	ldr	r5, [r1, #0]
    9514:	1d08      	adds	r0, r1, #4
    9516:	6018      	str	r0, [r3, #0]
    9518:	b2ad      	uxth	r5, r5
    951a:	4b59      	ldr	r3, [pc, #356]	; (9680 <_printf_i+0x230>)
    951c:	2708      	movs	r7, #8
    951e:	9303      	str	r3, [sp, #12]
    9520:	2a6f      	cmp	r2, #111	; 0x6f
    9522:	d018      	beq.n	9556 <_printf_i+0x106>
    9524:	270a      	movs	r7, #10
    9526:	e016      	b.n	9556 <_printf_i+0x106>
    9528:	3145      	adds	r1, #69	; 0x45
    952a:	700a      	strb	r2, [r1, #0]
    952c:	4a54      	ldr	r2, [pc, #336]	; (9680 <_printf_i+0x230>)
    952e:	9203      	str	r2, [sp, #12]
    9530:	681a      	ldr	r2, [r3, #0]
    9532:	6821      	ldr	r1, [r4, #0]
    9534:	1d10      	adds	r0, r2, #4
    9536:	6018      	str	r0, [r3, #0]
    9538:	6815      	ldr	r5, [r2, #0]
    953a:	0608      	lsls	r0, r1, #24
    953c:	d522      	bpl.n	9584 <_printf_i+0x134>
    953e:	07cb      	lsls	r3, r1, #31
    9540:	d502      	bpl.n	9548 <_printf_i+0xf8>
    9542:	2320      	movs	r3, #32
    9544:	4319      	orrs	r1, r3
    9546:	6021      	str	r1, [r4, #0]
    9548:	2710      	movs	r7, #16
    954a:	2d00      	cmp	r5, #0
    954c:	d103      	bne.n	9556 <_printf_i+0x106>
    954e:	2320      	movs	r3, #32
    9550:	6822      	ldr	r2, [r4, #0]
    9552:	439a      	bics	r2, r3
    9554:	6022      	str	r2, [r4, #0]
    9556:	0023      	movs	r3, r4
    9558:	2200      	movs	r2, #0
    955a:	3343      	adds	r3, #67	; 0x43
    955c:	701a      	strb	r2, [r3, #0]
    955e:	6863      	ldr	r3, [r4, #4]
    9560:	60a3      	str	r3, [r4, #8]
    9562:	2b00      	cmp	r3, #0
    9564:	db5c      	blt.n	9620 <_printf_i+0x1d0>
    9566:	2204      	movs	r2, #4
    9568:	6821      	ldr	r1, [r4, #0]
    956a:	4391      	bics	r1, r2
    956c:	6021      	str	r1, [r4, #0]
    956e:	2d00      	cmp	r5, #0
    9570:	d158      	bne.n	9624 <_printf_i+0x1d4>
    9572:	9e04      	ldr	r6, [sp, #16]
    9574:	2b00      	cmp	r3, #0
    9576:	d064      	beq.n	9642 <_printf_i+0x1f2>
    9578:	0026      	movs	r6, r4
    957a:	9b03      	ldr	r3, [sp, #12]
    957c:	3642      	adds	r6, #66	; 0x42
    957e:	781b      	ldrb	r3, [r3, #0]
    9580:	7033      	strb	r3, [r6, #0]
    9582:	e05e      	b.n	9642 <_printf_i+0x1f2>
    9584:	0648      	lsls	r0, r1, #25
    9586:	d5da      	bpl.n	953e <_printf_i+0xee>
    9588:	b2ad      	uxth	r5, r5
    958a:	e7d8      	b.n	953e <_printf_i+0xee>
    958c:	6809      	ldr	r1, [r1, #0]
    958e:	681a      	ldr	r2, [r3, #0]
    9590:	0608      	lsls	r0, r1, #24
    9592:	d505      	bpl.n	95a0 <_printf_i+0x150>
    9594:	1d11      	adds	r1, r2, #4
    9596:	6019      	str	r1, [r3, #0]
    9598:	6813      	ldr	r3, [r2, #0]
    959a:	6962      	ldr	r2, [r4, #20]
    959c:	601a      	str	r2, [r3, #0]
    959e:	e006      	b.n	95ae <_printf_i+0x15e>
    95a0:	0649      	lsls	r1, r1, #25
    95a2:	d5f7      	bpl.n	9594 <_printf_i+0x144>
    95a4:	1d11      	adds	r1, r2, #4
    95a6:	6019      	str	r1, [r3, #0]
    95a8:	6813      	ldr	r3, [r2, #0]
    95aa:	8aa2      	ldrh	r2, [r4, #20]
    95ac:	801a      	strh	r2, [r3, #0]
    95ae:	2300      	movs	r3, #0
    95b0:	9e04      	ldr	r6, [sp, #16]
    95b2:	6123      	str	r3, [r4, #16]
<<<<<<< Updated upstream
    95b4:	2300      	movs	r3, #0
    95b6:	9a04      	ldr	r2, [sp, #16]
    95b8:	7013      	strb	r3, [r2, #0]
    95ba:	e041      	b.n	9640 <_printf_i+0x210>
    95bc:	6923      	ldr	r3, [r4, #16]
    95be:	0032      	movs	r2, r6
    95c0:	9906      	ldr	r1, [sp, #24]
    95c2:	9805      	ldr	r0, [sp, #20]
    95c4:	9d07      	ldr	r5, [sp, #28]
    95c6:	47a8      	blx	r5
    95c8:	1c43      	adds	r3, r0, #1
    95ca:	d043      	beq.n	9654 <_printf_i+0x224>
    95cc:	6823      	ldr	r3, [r4, #0]
    95ce:	2500      	movs	r5, #0
    95d0:	079b      	lsls	r3, r3, #30
    95d2:	d40f      	bmi.n	95f4 <_printf_i+0x1c4>
    95d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    95d6:	68e0      	ldr	r0, [r4, #12]
    95d8:	4298      	cmp	r0, r3
    95da:	da3d      	bge.n	9658 <_printf_i+0x228>
    95dc:	0018      	movs	r0, r3
    95de:	e03b      	b.n	9658 <_printf_i+0x228>
    95e0:	0022      	movs	r2, r4
    95e2:	2301      	movs	r3, #1
    95e4:	3219      	adds	r2, #25
    95e6:	9906      	ldr	r1, [sp, #24]
    95e8:	9805      	ldr	r0, [sp, #20]
    95ea:	9e07      	ldr	r6, [sp, #28]
    95ec:	47b0      	blx	r6
    95ee:	1c43      	adds	r3, r0, #1
    95f0:	d030      	beq.n	9654 <_printf_i+0x224>
    95f2:	3501      	adds	r5, #1
    95f4:	68e3      	ldr	r3, [r4, #12]
    95f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    95f8:	1a9b      	subs	r3, r3, r2
    95fa:	429d      	cmp	r5, r3
    95fc:	dbf0      	blt.n	95e0 <_printf_i+0x1b0>
    95fe:	e7e9      	b.n	95d4 <_printf_i+0x1a4>
    9600:	2d00      	cmp	r5, #0
    9602:	d0a9      	beq.n	9558 <_printf_i+0x128>
    9604:	9e04      	ldr	r6, [sp, #16]
    9606:	0028      	movs	r0, r5
    9608:	0039      	movs	r1, r7
    960a:	f7fd fd27 	bl	705c <__aeabi_uidivmod>
    960e:	9b03      	ldr	r3, [sp, #12]
    9610:	3e01      	subs	r6, #1
    9612:	5c5b      	ldrb	r3, [r3, r1]
    9614:	0028      	movs	r0, r5
    9616:	7033      	strb	r3, [r6, #0]
    9618:	0039      	movs	r1, r7
    961a:	f7fd fc99 	bl	6f50 <__udivsi3>
    961e:	1e05      	subs	r5, r0, #0
    9620:	d1f1      	bne.n	9606 <_printf_i+0x1d6>
    9622:	2f08      	cmp	r7, #8
    9624:	d109      	bne.n	963a <_printf_i+0x20a>
    9626:	6823      	ldr	r3, [r4, #0]
    9628:	07db      	lsls	r3, r3, #31
    962a:	d506      	bpl.n	963a <_printf_i+0x20a>
    962c:	6863      	ldr	r3, [r4, #4]
    962e:	6922      	ldr	r2, [r4, #16]
    9630:	4293      	cmp	r3, r2
    9632:	dc02      	bgt.n	963a <_printf_i+0x20a>
    9634:	2330      	movs	r3, #48	; 0x30
    9636:	3e01      	subs	r6, #1
    9638:	7033      	strb	r3, [r6, #0]
    963a:	9b04      	ldr	r3, [sp, #16]
    963c:	1b9b      	subs	r3, r3, r6
    963e:	6123      	str	r3, [r4, #16]
    9640:	9b07      	ldr	r3, [sp, #28]
    9642:	aa09      	add	r2, sp, #36	; 0x24
    9644:	9300      	str	r3, [sp, #0]
    9646:	0021      	movs	r1, r4
    9648:	9b06      	ldr	r3, [sp, #24]
    964a:	9805      	ldr	r0, [sp, #20]
    964c:	f7ff fe82 	bl	9354 <_printf_common>
    9650:	1c43      	adds	r3, r0, #1
    9652:	d1b3      	bne.n	95bc <_printf_i+0x18c>
    9654:	2001      	movs	r0, #1
    9656:	4240      	negs	r0, r0
    9658:	b00b      	add	sp, #44	; 0x2c
    965a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    965c:	0000ab44 	.word	0x0000ab44
    9660:	0000ab33 	.word	0x0000ab33

00009664 <__ascii_wctomb>:
    9664:	1e0b      	subs	r3, r1, #0
    9666:	d004      	beq.n	9672 <__ascii_wctomb+0xe>
    9668:	2aff      	cmp	r2, #255	; 0xff
    966a:	d904      	bls.n	9676 <__ascii_wctomb+0x12>
    966c:	238a      	movs	r3, #138	; 0x8a
    966e:	6003      	str	r3, [r0, #0]
    9670:	3b8b      	subs	r3, #139	; 0x8b
    9672:	0018      	movs	r0, r3
    9674:	4770      	bx	lr
    9676:	700a      	strb	r2, [r1, #0]
    9678:	2301      	movs	r3, #1
    967a:	e7fa      	b.n	9672 <__ascii_wctomb+0xe>

0000967c <memchr>:
    967c:	b2c9      	uxtb	r1, r1
    967e:	1882      	adds	r2, r0, r2
    9680:	4290      	cmp	r0, r2
    9682:	d101      	bne.n	9688 <memchr+0xc>
    9684:	2000      	movs	r0, #0
    9686:	4770      	bx	lr
    9688:	7803      	ldrb	r3, [r0, #0]
    968a:	428b      	cmp	r3, r1
    968c:	d0fb      	beq.n	9686 <memchr+0xa>
    968e:	3001      	adds	r0, #1
    9690:	e7f6      	b.n	9680 <memchr+0x4>

00009692 <memmove>:
    9692:	b510      	push	{r4, lr}
    9694:	4288      	cmp	r0, r1
    9696:	d902      	bls.n	969e <memmove+0xc>
    9698:	188b      	adds	r3, r1, r2
    969a:	4298      	cmp	r0, r3
    969c:	d308      	bcc.n	96b0 <memmove+0x1e>
    969e:	2300      	movs	r3, #0
    96a0:	429a      	cmp	r2, r3
    96a2:	d007      	beq.n	96b4 <memmove+0x22>
    96a4:	5ccc      	ldrb	r4, [r1, r3]
    96a6:	54c4      	strb	r4, [r0, r3]
    96a8:	3301      	adds	r3, #1
    96aa:	e7f9      	b.n	96a0 <memmove+0xe>
    96ac:	5c8b      	ldrb	r3, [r1, r2]
    96ae:	5483      	strb	r3, [r0, r2]
    96b0:	3a01      	subs	r2, #1
    96b2:	d2fb      	bcs.n	96ac <memmove+0x1a>
    96b4:	bd10      	pop	{r4, pc}

000096b6 <_realloc_r>:
    96b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96b8:	0007      	movs	r7, r0
    96ba:	000d      	movs	r5, r1
    96bc:	0016      	movs	r6, r2
    96be:	2900      	cmp	r1, #0
    96c0:	d105      	bne.n	96ce <_realloc_r+0x18>
    96c2:	0011      	movs	r1, r2
    96c4:	f7ff fb78 	bl	8db8 <_malloc_r>
    96c8:	0004      	movs	r4, r0
    96ca:	0020      	movs	r0, r4
    96cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96ce:	2a00      	cmp	r2, #0
    96d0:	d103      	bne.n	96da <_realloc_r+0x24>
    96d2:	f7ff fb27 	bl	8d24 <_free_r>
    96d6:	0034      	movs	r4, r6
    96d8:	e7f7      	b.n	96ca <_realloc_r+0x14>
    96da:	f000 f812 	bl	9702 <_malloc_usable_size_r>
    96de:	002c      	movs	r4, r5
    96e0:	4286      	cmp	r6, r0
    96e2:	d9f2      	bls.n	96ca <_realloc_r+0x14>
    96e4:	0031      	movs	r1, r6
    96e6:	0038      	movs	r0, r7
    96e8:	f7ff fb66 	bl	8db8 <_malloc_r>
    96ec:	1e04      	subs	r4, r0, #0
    96ee:	d0ec      	beq.n	96ca <_realloc_r+0x14>
    96f0:	0029      	movs	r1, r5
    96f2:	0032      	movs	r2, r6
    96f4:	f7ff fb04 	bl	8d00 <memcpy>
    96f8:	0029      	movs	r1, r5
    96fa:	0038      	movs	r0, r7
    96fc:	f7ff fb12 	bl	8d24 <_free_r>
    9700:	e7e3      	b.n	96ca <_realloc_r+0x14>

00009702 <_malloc_usable_size_r>:
    9702:	1f0b      	subs	r3, r1, #4
    9704:	681b      	ldr	r3, [r3, #0]
    9706:	1f18      	subs	r0, r3, #4
    9708:	2b00      	cmp	r3, #0
    970a:	da01      	bge.n	9710 <_malloc_usable_size_r+0xe>
    970c:	580b      	ldr	r3, [r1, r0]
    970e:	18c0      	adds	r0, r0, r3
    9710:	4770      	bx	lr
    9712:	0000      	movs	r0, r0
    9714:	00082008 	.word	0x00082008
    9718:	65636341 	.word	0x65636341
    971c:	6172656c 	.word	0x6172656c
    9720:	6e6f6974 	.word	0x6e6f6974
    9724:	676d5b20 	.word	0x676d5b20
    9728:	20583a5d 	.word	0x20583a5d
    972c:	59096425 	.word	0x59096425
    9730:	09642520 	.word	0x09642520
    9734:	6425205a 	.word	0x6425205a
    9738:	00000a0d 	.word	0x00000a0d
    973c:	64206f4e 	.word	0x64206f4e
    9740:	20617461 	.word	0x20617461
    9744:	64616572 	.word	0x64616572
    9748:	0d202179 	.word	0x0d202179
    974c:	0000000a 	.word	0x0000000a
    9750:	64757453 	.word	0x64757453
    9754:	73746e65 	.word	0x73746e65
    9758:	206f7420 	.word	0x206f7420
    975c:	6c6c6966 	.word	0x6c6c6966
    9760:	74756f20 	.word	0x74756f20
    9764:	00000021 	.word	0x00000021
    9768:	00736c63 	.word	0x00736c63
    976c:	3a736c63 	.word	0x3a736c63
    9770:	656c4320 	.word	0x656c4320
    9774:	20737261 	.word	0x20737261
    9778:	20656874 	.word	0x20656874
    977c:	6d726574 	.word	0x6d726574
    9780:	6c616e69 	.word	0x6c616e69
    9784:	72637320 	.word	0x72637320
    9788:	0d6e6565 	.word	0x0d6e6565
    978c:	0000000a 	.word	0x0000000a
    9790:	0064656c 	.word	0x0064656c
    9794:	2064656c 	.word	0x2064656c
    9798:	79656b5b 	.word	0x79656b5b
    979c:	5d6d756e 	.word	0x5d6d756e
    97a0:	5b5d525b 	.word	0x5b5d525b
    97a4:	425b5d47 	.word	0x425b5d47
    97a8:	53203a5d 	.word	0x53203a5d
    97ac:	20737465 	.word	0x20737465
    97b0:	20656874 	.word	0x20656874
    97b4:	65766967 	.word	0x65766967
    97b8:	454c206e 	.word	0x454c206e
    97bc:	6f742044 	.word	0x6f742044
    97c0:	65687420 	.word	0x65687420
    97c4:	76696720 	.word	0x76696720
    97c8:	52206e65 	.word	0x52206e65
    97cc:	422c472c 	.word	0x422c472c
    97d0:	6c617620 	.word	0x6c617620
    97d4:	2e736575 	.word	0x2e736575
    97d8:	00000a0d 	.word	0x00000a0d
    97dc:	65736572 	.word	0x65736572
    97e0:	00000074 	.word	0x00000074
    97e4:	65736572 	.word	0x65736572
    97e8:	52203a74 	.word	0x52203a74
    97ec:	74657365 	.word	0x74657365
    97f0:	68742073 	.word	0x68742073
    97f4:	65642065 	.word	0x65642065
    97f8:	65636976 	.word	0x65636976
    97fc:	00000a0d 	.word	0x00000a0d
    9800:	00756d69 	.word	0x00756d69
    9804:	3a756d69 	.word	0x3a756d69
    9808:	74655220 	.word	0x74655220
    980c:	736e7275 	.word	0x736e7275
    9810:	76206120 	.word	0x76206120
    9814:	65756c61 	.word	0x65756c61
    9818:	6f726620 	.word	0x6f726620
    981c:	6874206d 	.word	0x6874206d
    9820:	4d492065 	.word	0x4d492065
    9824:	000a0d55 	.word	0x000a0d55
    9828:	65657246 	.word	0x65657246
    982c:	534f5452 	.word	0x534f5452
    9830:	494c4320 	.word	0x494c4320
    9834:	540a0d2e 	.word	0x540a0d2e
    9838:	20657079 	.word	0x20657079
    983c:	706c6548 	.word	0x706c6548
    9840:	206f7420 	.word	0x206f7420
    9844:	77656976 	.word	0x77656976
    9848:	6c206120 	.word	0x6c206120
    984c:	20747369 	.word	0x20747369
    9850:	7220666f 	.word	0x7220666f
    9854:	73696765 	.word	0x73696765
    9858:	65726574 	.word	0x65726574
    985c:	6f632064 	.word	0x6f632064
    9860:	6e616d6d 	.word	0x6e616d6d
    9864:	0d2e7364 	.word	0x0d2e7364
    9868:	0000000a 	.word	0x0000000a
    986c:	6c756f43 	.word	0x6c756f43
    9870:	6f6e2064 	.word	0x6f6e2064
    9874:	6c612074 	.word	0x6c612074
    9878:	61636f6c 	.word	0x61636f6c
    987c:	73206574 	.word	0x73206574
    9880:	70616d65 	.word	0x70616d65
    9884:	65726f68 	.word	0x65726f68
    9888:	00000a0d 	.word	0x00000a0d
    988c:	0000616f 	.word	0x0000616f
    9890:	325b6325 	.word	0x325b6325
    9894:	003e0d4b 	.word	0x003e0d4b

00009898 <xClearScreen>:
    9898:	00009768 0000976c 0000062d 00000000     h...l...-.......
    98a8:	325b6325 0000004a                       %c[2J...

000098b0 <xImuGetCommand>:
    98b0:	00009800 00009804 00000579 00000000     ........y.......

000098c0 <xNeotrellisTurnLEDCommand>:
    98c0:	00009790 00009794 00000659 00000004     ........Y.......

000098d0 <xResetCommand>:
    98d0:	000097dc 000097e4 00000561 00000000     ........a.......
    98e0:	76657270 73756f69 20736920 646f6f67     previous is good
    98f0:	00000a0d 74616877 74207327 64206568     ....what's the d
    9900:	65637565 000a0d3f 00001010 0000050e     euce?...........
    9910:	6f727245 6e692072 61697469 697a696c     Error initializi
    9920:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
    9930:	6f727245 2f722f72 0000006e 6e756f46     Error/r/n...Foun
    9940:	65532064 77617365 2f722f21 0000006e     d Seesaw!/r/n...
    9950:	6c756f43 6f6e2064 72772074 20657469     Could not write 
    9960:	73656553 70207761 2f216e69 006e2f72     Seesaw pin!/r/n.
    9970:	6c756f43 6f6e2064 65732074 65732074     Could not set se
    9980:	77617365 6f654e20 65786970 7073206c     esaw Neopixel sp
    9990:	21646565 6e2f722f 00000000 6c756f43     eed!/r/n....Coul
    99a0:	6f6e2064 65732074 65732074 77617365     d not set seesaw
    99b0:	6f654e20 65786970 756e206c 7265626d      Neopixel number
    99c0:	20666f20 69766564 2f736563 006e2f72      of devices/r/n.
    99d0:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
    99e0:	657a696c 79654b20 21646170 6e2f722f     lize Keypad!/r/n
    99f0:	00000000                                ....

000099f4 <msgBaseGetHWID>:
    99f4:	00000100                                ....

000099f8 <msgKeypadEnableInt>:
    99f8:	00010210                                ....

000099fc <msgNeopixelBufLength>:
    99fc:	3000030e                                ...0

00009a00 <msgNeopixelPin>:
    9a00:	0003010e                                ....

00009a04 <msgNeopixelSpeed>:
    9a04:	0001020e 54204955 206b7361 72617453     ....UI Task Star
    9a14:	21646574 00000000 6f636e49 63657272     ted!....Incorrec
    9a24:	6f632074 6e616d6d 61702064 656d6172     t command parame
    9a34:	28726574 202e2973 746e4520 22207265     ter(s).  Enter "
    9a44:	706c6568 6f742022 65697620 20612077     help" to view a 
    9a54:	7473696c 20666f20 69617661 6c62616c     list of availabl
    9a64:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
    9a74:	6d6d6f43 20646e61 20746f6e 6f636572     Command not reco
    9a84:	73696e67 202e6465 746e4520 27207265     gnised.  Enter '
    9a94:	706c6568 6f742027 65697620 20612077     help' to view a 
    9aa4:	7473696c 20666f20 69617661 6c62616c     list of availabl
    9ab4:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
    9ac4:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
    9ad4:	694c200a 20737473 206c6c61 20656874     . Lists all the 
    9ae4:	69676572 72657473 63206465 616d6d6f     registered comma
    9af4:	0d73646e 000a0d0a                       nds.....

00009afc <xHelpCommand>:
    9afc:	00009ac4 00009acc 00001ab5 00000000     ................
    9b0c:	00001ebc 00001eb4 00001eb8 00001ed4     ................
    9b1c:	00001eb0 00001ec0 00001ec4 00001ec8     ................
    9b2c:	00001ecc 20746f4e 756f6e65 54206867     ....Not enough T
    9b3c:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
    9b4c:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
    9b5c:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
    9b6c:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
    9b7c:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
    9b8c:	2d207365 636e6920 73616572 52542065     es - increase TR
    9b9c:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
    9bac:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9bbc:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
    9bcc:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
    9bdc:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    9bec:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
    9bfc:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
    9c0c:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
    9c1c:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
    9c2c:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    9c3c:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
    9c4c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9c5c:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
    9c6c:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
    9c7c:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
    9c8c:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
    9c9c:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
    9cac:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
    9cbc:	6e616820 73656c64 69202d20 6572636e      handles - incre
    9ccc:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
    9cdc:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
    9cec:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
    9cfc:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
    9d0c:	61682050 656c646e 202d2073 72636e69     P handles - incr
    9d1c:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
    9d2c:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
    9d3c:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
    9d4c:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
    9d5c:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
    9d6c:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
    9d7c:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
    9d8c:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
    9d9c:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
    9dac:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
    9dbc:	6e616820 73656c64 69202d20 6572636e      handles - incre
    9dcc:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
    9ddc:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
    9dec:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9dfc:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
    9e0c:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
    9e1c:	64696c61 6a626f20 63746365 7373616c     alid objectclass
    9e2c:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
    9e3c:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
    9e4c:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
    9e5c:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
    9e6c:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
    9e7c:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
    9e8c:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
    9e9c:	6f6d2074 00296564 43415254 53415f45     t mode).TRACE_AS
    9eac:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
    9ebc:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
    9ecc:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
    9edc:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
    9eec:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
    9efc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    9f0c:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
    9f1c:	696c6176 61762064 2065756c 20726f66     valid value for 
    9f2c:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
    9f3c:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
    9f4c:	206e6920 54767270 65636172 44746547      in prvTraceGetD
    9f5c:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
    9f6c:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
    9f7c:	48746365 6c646e61 49203a65 6c61766e     ectHandle: Inval
    9f8c:	76206469 65756c61 726f6620 6a626f20     id value for obj
    9f9c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    9fac:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    9fbc:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
    9fcc:	2064696c 756c6176 6f662065 61702072     lid value for pa
    9fdc:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
    9fec:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
    9ffc:	69725074 7469726f 6f725079 74726570     tPriorityPropert
    a00c:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
    a01c:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    a02c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    a03c:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
    a04c:	7469726f 6f725079 74726570 49203a79     orityProperty: I
    a05c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a06c:	00646920 63617254 65522065 64726f63      id.Trace Record
    a07c:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
    a08c:	69206f74 7865646e 74756f20 65646973     to index outside
    a09c:	65766520 6220746e 65666675 00002172      event buffer!..
    a0ac:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a0bc:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
    a0cc:	3a656d61 6d616e20 3d3d2065 4c554e20     ame: name == NUL
    a0dc:	0000004c 656c6c49 206c6167 656a626f     L...Illegal obje
    a0ec:	63207463 7373616c 206e6920 54767270     ct class in prvT
    a0fc:	65636172 4f746553 63656a62 6d614e74     raceSetObjectNam
    a10c:	00000065 656c6c49 206c6167 646e6168     e...Illegal hand
    a11c:	2820656c 69202930 7270206e 61725476     le (0) in prvTra
    a12c:	65536563 6a624f74 4e746365 2e656d61     ceSetObjectName.
    a13c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    a14c:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
    a15c:	53746365 65746174 626f203a 7463656a     ectState: object
    a16c:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
    a17c:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
    a18c:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
    a19c:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
    a1ac:	696c6176 61762064 2065756c 20726f66     valid value for 
    a1bc:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
    a1cc:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
    a1dc:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
    a1ec:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
    a1fc:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
    a20c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a21c:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
    a22c:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
    a23c:	76206469 65756c61 726f6620 00646920     id value for id.
    a24c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a25c:	61725476 65536563 73615474 736e496b     vTraceSetTaskIns
    a26c:	636e6174 6e694665 65687369 49203a64     tanceFinished: I
    a27c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a28c:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
    a29c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a2ac:	4b65726f 656e7265 6c61436c 65203a6c     oreKernelCall: e
    a2bc:	65646f63 203d3e20 46467830 00000000     code >= 0xFF....
    a2cc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a2dc:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
    a2ec:	6c61436c 6f203a6c 63656a62 616c4374     lCall: objectCla
    a2fc:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
    a30c:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
    a31c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a32c:	4b65726f 656e7265 6c61436c 49203a6c     oreKernelCall: I
    a33c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a34c:	6a626f20 4e746365 65626d75 00000072      objectNumber...
    a35c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a36c:	68676968 69727020 7469726f 53492079     high priority IS
    a37c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a38c:	29322820 00000000 43415254 53415f45      (2)....TRACE_AS
    a39c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a3ac:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a3bc:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
    a3cc:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
    a3dc:	726f6620 74766520 65646f63 00000000      for evtcode....
    a3ec:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a3fc:	68676968 69727020 7469726f 53492079     high priority IS
    a40c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a41c:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
    a42c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a43c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a44c:	72615068 203a6d61 63747665 2065646f     hParam: evtcode 
    a45c:	30203d3e 00464678 43415254 53415f45     >= 0xFF.TRACE_AS
    a46c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a47c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a48c:	72615068 203a6d61 656a626f 6c437463     hParam: objectCl
    a49c:	20737361 54203d3e 45434152 4c434e5f     ass >= TRACE_NCL
    a4ac:	45535341 00000053 43415254 53415f45     ASSES...TRACE_AS
    a4bc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a4cc:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a4dc:	72615068 203a6d61 61766e49 2064696c     hParam: Invalid 
    a4ec:	756c6176 6f662065 626f2072 7463656a     value for object
    a4fc:	626d754e 00007265 6f636552 72656472     Number..Recorder
    a50c:	73756220 202d2079 68676968 69727020      busy - high pri
    a51c:	7469726f 53492079 73752052 20676e69     ority ISR using 
    a52c:	63737973 3f6c6c61 29332820 00000000     syscall? (3)....
    a53c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a54c:	61725476 74536563 5465726f 526b7361     vTraceStoreTaskR
    a55c:	79646165 6e49203a 696c6176 61762064     eady: Invalid va
    a56c:	2065756c 20726f66 646e6168 0000656c     lue for handle..
    a57c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a58c:	68676968 69727020 7469726f 53492079     high priority IS
    a59c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a5ac:	29312820 00000000 43415254 53415f45      (1)....TRACE_AS
    a5bc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a5cc:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
    a5dc:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a5ec:	73617420 61685f6b 656c646e 00000000      task_handle....
    a5fc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a60c:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
    a61c:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
    a62c:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
    a63c:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    a64c:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    a65c:	76206469 65756c61 726f6620 6a626f20     id value for obj
    a66c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    a67c:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    a68c:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    a69c:	76206469 65756c61 726f6620 6a626f20     id value for obj
    a6ac:	68746365 6c646e61 00000065 43415254     ecthandle...TRAC
    a6bc:	53415f45 54524553 6552203a 64726f63     E_ASSERT: Record
    a6cc:	6e207265 6920746f 6974696e 7a696c61     er not initializ
    a6dc:	202e6465 20657355 61725476 6e456563     ed. Use vTraceEn
    a6ec:	656c6261 69202928 6574736e 00216461     able() instead!.
    a6fc:	61747328 70757472 00000029 43415254     (startup)...TRAC
    a70c:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
    a71c:	69676552 72657473 69727453 203a676e     RegisterString: 
    a72c:	6562616c 3d3d206c 4c554e20 0000004c     label == NULL...
    a73c:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
    a74c:	64726f63 6e207265 6920746f 6974696e     corder not initi
    a75c:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
    a76c:	45656361 6c62616e 20292865 73726966     aceEnable() firs
    a77c:	00002174 454c4449 00000000 00005444     t!..IDLE....DT..
    a78c:	00005444 00005444 000053bc 00005486     DT..DT...S...T..
    a79c:	000054a0 00005444 00005444 000053bc     .T..DT..DT...S..
    a7ac:	00005486 20726d54 00637653 42000800     .T..Tmr Svc....B
    a7bc:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    a7cc:	42001c00 00006432 0000642e 0000642e     ...B2d...d...d..
    a7dc:	00006494 00006494 00006446 00006438     .d...d..Fd..8d..
    a7ec:	0000644c 00006482 000065c0 000065a0     Ld...d...e...e..
    a7fc:	000065a0 0000662c 000065b2 000065ce     .e..,f...e...e..
    a80c:	000065a4 000065dc 0000661c              .e...e...f..

0000a818 <_tcc_intflag>:
    a818:	00000001 00000002 00000004 00000008     ................
    a828:	00001000 00002000 00004000 00008000     ..... ...@......
    a838:	00010000 00020000 00040000 00080000     ................
    a848:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
    a858:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
    a868:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
    a878:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
    a888:	6e692072 61697469 697a696c 4920676e     r initializing I
    a898:	44204332 65766972 0a0d2172 00000000     2C Driver!......
    a8a8:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
    a8b8:	76697244 0d217265 0000000a 74696e49     Driver!.....Init
    a8c8:	696c6169 2064657a 73656553 0d217761     ialized Seesaw!.
    a8d8:	0000000a 6e6e6143 6620746f 20646e69     ....Cannot find 
    a8e8:	21554d49 00000a0d 20554d49 6e756f66     IMU!....IMU foun
    a8f8:	0a0d2164 00000000 20554d49 74696e69     d!......IMU init
    a908:	696c6169 2164657a 00000a0d 6c756f43     ialized!....Coul
    a918:	6f6e2064 6e692074 61697469 657a696c     d not initialize
    a928:	554d4920 00000a0d 70616548 66656220      IMU....Heap bef
    a938:	2065726f 72617473 676e6974 73617420     ore starting tas
    a948:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
    a958:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
    a968:	73617420 6f63206b 20646c75 20746f6e      task could not 
    a978:	69206562 6974696e 7a696c61 0d216465     be initialized!.
    a988:	0000000a 70616548 74666120 73207265     ....Heap after s
    a998:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
    a9a8:	0000000a 54204955 006b7361 3a525245     ....UI Task.ERR:
    a9b8:	20495520 6b736174 756f6320 6e20646c      UI task could n
    a9c8:	6220746f 6e692065 61697469 657a696c     ot be initialize
    a9d8:	0a0d2164 00000000 70616548 74666120     d!......Heap aft
    a9e8:	73207265 74726174 20676e69 54204955     er starting UI T
    a9f8:	3a6b7361 0d642520 0000000a 6f727245     ask: %d.....Erro
    aa08:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
    aa18:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
    aa28:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
    aa38:	61747320 6f206b63 66726576 20776f6c      stack overflow 
    aa48:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
    aa58:	000071e8 00007138 00007138 00007136     .q..8q..8q..6q..
    aa68:	000071da 000071da 000071d0 00007136     .q...q...q..6q..
    aa78:	000071da 000071d0 000071da 00007136     .q...q...q..6q..
    aa88:	000071e0 000071e0 000071e0 00007270     .q...q...q..pr..
    aa98:	00007bf4 00007bd6 00007b90 00007aae     .{...{...{...z..
    aaa8:	00007b90 00007bc8 00007b90 00007aae     .{...{...{...z..
    aab8:	00007bd6 00007bd6 00007bc8 00007aae     .{...{...{...z..
    aac8:	00007aa6 00007aa6 00007aa6 00007e0c     .z...z...z...~..
    aad8:	00008254 00008114 00008114 00008110     T...............
    aae8:	0000822c 0000822c 0000821e 00008110     ,...,...........
    aaf8:	0000822c 0000821e 0000822c 00008110     ,.......,.......
    ab08:	00008234 00008234 00008234 00008438     4...4...4...8...
    ab18:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    ab28:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    ab38:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    ab48:	37363534 62613938 66656463 20200000              456789abcdef.

0000ab55 <_ctype_>:
    ab55:	20202000 20202020 28282020 20282828     .         ((((( 
    ab65:	20202020 20202020 20202020 20202020                     
    ab75:	10108820 10101010 10101010 10101010      ...............
    ab85:	04040410 04040404 10040404 10101010     ................
    ab95:	41411010 41414141 01010101 01010101     ..AAAAAA........
    aba5:	01010101 01010101 01010101 10101010     ................
    abb5:	42421010 42424242 02020202 02020202     ..BBBBBB........
    abc5:	02020202 02020202 02020202 10101010     ................
    abd5:	00000020 00000000 00000000 00000000      ...............
	...

<<<<<<< HEAD
0000ac54 <_init>:
    ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac56:	46c0      	nop			; (mov r8, r8)
    ac58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac5a:	bc08      	pop	{r3}
    ac5c:	469e      	mov	lr, r3
    ac5e:	4770      	bx	lr

0000ac60 <__init_array_start>:
    ac60:	000000dd 	.word	0x000000dd

0000ac64 <_fini>:
    ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac66:	46c0      	nop			; (mov r8, r8)
    ac68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac6a:	bc08      	pop	{r3}
    ac6c:	469e      	mov	lr, r3
    ac6e:	4770      	bx	lr

0000ac70 <__fini_array_start>:
    ac70:	000000b5 	.word	0x000000b5
=======
    95b4:	e054      	b.n	9660 <_printf_i+0x210>
    95b6:	681a      	ldr	r2, [r3, #0]
    95b8:	1d11      	adds	r1, r2, #4
    95ba:	6019      	str	r1, [r3, #0]
    95bc:	6816      	ldr	r6, [r2, #0]
    95be:	2100      	movs	r1, #0
    95c0:	6862      	ldr	r2, [r4, #4]
    95c2:	0030      	movs	r0, r6
    95c4:	f000 f86a 	bl	969c <memchr>
    95c8:	2800      	cmp	r0, #0
    95ca:	d001      	beq.n	95d0 <_printf_i+0x180>
    95cc:	1b80      	subs	r0, r0, r6
    95ce:	6060      	str	r0, [r4, #4]
    95d0:	6863      	ldr	r3, [r4, #4]
    95d2:	6123      	str	r3, [r4, #16]
    95d4:	2300      	movs	r3, #0
    95d6:	9a04      	ldr	r2, [sp, #16]
    95d8:	7013      	strb	r3, [r2, #0]
    95da:	e041      	b.n	9660 <_printf_i+0x210>
    95dc:	6923      	ldr	r3, [r4, #16]
    95de:	0032      	movs	r2, r6
    95e0:	9906      	ldr	r1, [sp, #24]
    95e2:	9805      	ldr	r0, [sp, #20]
    95e4:	9d07      	ldr	r5, [sp, #28]
    95e6:	47a8      	blx	r5
    95e8:	1c43      	adds	r3, r0, #1
    95ea:	d043      	beq.n	9674 <_printf_i+0x224>
    95ec:	6823      	ldr	r3, [r4, #0]
    95ee:	2500      	movs	r5, #0
    95f0:	079b      	lsls	r3, r3, #30
    95f2:	d40f      	bmi.n	9614 <_printf_i+0x1c4>
    95f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    95f6:	68e0      	ldr	r0, [r4, #12]
    95f8:	4298      	cmp	r0, r3
    95fa:	da3d      	bge.n	9678 <_printf_i+0x228>
    95fc:	0018      	movs	r0, r3
    95fe:	e03b      	b.n	9678 <_printf_i+0x228>
    9600:	0022      	movs	r2, r4
    9602:	2301      	movs	r3, #1
    9604:	3219      	adds	r2, #25
    9606:	9906      	ldr	r1, [sp, #24]
    9608:	9805      	ldr	r0, [sp, #20]
    960a:	9e07      	ldr	r6, [sp, #28]
    960c:	47b0      	blx	r6
    960e:	1c43      	adds	r3, r0, #1
    9610:	d030      	beq.n	9674 <_printf_i+0x224>
    9612:	3501      	adds	r5, #1
    9614:	68e3      	ldr	r3, [r4, #12]
    9616:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9618:	1a9b      	subs	r3, r3, r2
    961a:	429d      	cmp	r5, r3
    961c:	dbf0      	blt.n	9600 <_printf_i+0x1b0>
    961e:	e7e9      	b.n	95f4 <_printf_i+0x1a4>
    9620:	2d00      	cmp	r5, #0
    9622:	d0a9      	beq.n	9578 <_printf_i+0x128>
    9624:	9e04      	ldr	r6, [sp, #16]
    9626:	0028      	movs	r0, r5
    9628:	0039      	movs	r1, r7
    962a:	f7fd fd27 	bl	707c <__aeabi_uidivmod>
    962e:	9b03      	ldr	r3, [sp, #12]
    9630:	3e01      	subs	r6, #1
    9632:	5c5b      	ldrb	r3, [r3, r1]
    9634:	0028      	movs	r0, r5
    9636:	7033      	strb	r3, [r6, #0]
    9638:	0039      	movs	r1, r7
    963a:	f7fd fc99 	bl	6f70 <__udivsi3>
    963e:	1e05      	subs	r5, r0, #0
    9640:	d1f1      	bne.n	9626 <_printf_i+0x1d6>
    9642:	2f08      	cmp	r7, #8
    9644:	d109      	bne.n	965a <_printf_i+0x20a>
    9646:	6823      	ldr	r3, [r4, #0]
    9648:	07db      	lsls	r3, r3, #31
    964a:	d506      	bpl.n	965a <_printf_i+0x20a>
    964c:	6863      	ldr	r3, [r4, #4]
    964e:	6922      	ldr	r2, [r4, #16]
    9650:	4293      	cmp	r3, r2
    9652:	dc02      	bgt.n	965a <_printf_i+0x20a>
    9654:	2330      	movs	r3, #48	; 0x30
    9656:	3e01      	subs	r6, #1
    9658:	7033      	strb	r3, [r6, #0]
    965a:	9b04      	ldr	r3, [sp, #16]
    965c:	1b9b      	subs	r3, r3, r6
    965e:	6123      	str	r3, [r4, #16]
    9660:	9b07      	ldr	r3, [sp, #28]
    9662:	aa09      	add	r2, sp, #36	; 0x24
    9664:	9300      	str	r3, [sp, #0]
    9666:	0021      	movs	r1, r4
    9668:	9b06      	ldr	r3, [sp, #24]
    966a:	9805      	ldr	r0, [sp, #20]
    966c:	f7ff fe82 	bl	9374 <_printf_common>
    9670:	1c43      	adds	r3, r0, #1
    9672:	d1b3      	bne.n	95dc <_printf_i+0x18c>
    9674:	2001      	movs	r0, #1
    9676:	4240      	negs	r0, r0
    9678:	b00b      	add	sp, #44	; 0x2c
    967a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    967c:	0000ab70 	.word	0x0000ab70
    9680:	0000ab5f 	.word	0x0000ab5f

00009684 <__ascii_wctomb>:
    9684:	1e0b      	subs	r3, r1, #0
    9686:	d004      	beq.n	9692 <__ascii_wctomb+0xe>
    9688:	2aff      	cmp	r2, #255	; 0xff
    968a:	d904      	bls.n	9696 <__ascii_wctomb+0x12>
    968c:	238a      	movs	r3, #138	; 0x8a
    968e:	6003      	str	r3, [r0, #0]
    9690:	3b8b      	subs	r3, #139	; 0x8b
    9692:	0018      	movs	r0, r3
    9694:	4770      	bx	lr
    9696:	700a      	strb	r2, [r1, #0]
    9698:	2301      	movs	r3, #1
    969a:	e7fa      	b.n	9692 <__ascii_wctomb+0xe>

0000969c <memchr>:
    969c:	b2c9      	uxtb	r1, r1
    969e:	1882      	adds	r2, r0, r2
    96a0:	4290      	cmp	r0, r2
    96a2:	d101      	bne.n	96a8 <memchr+0xc>
    96a4:	2000      	movs	r0, #0
    96a6:	4770      	bx	lr
    96a8:	7803      	ldrb	r3, [r0, #0]
    96aa:	428b      	cmp	r3, r1
    96ac:	d0fb      	beq.n	96a6 <memchr+0xa>
    96ae:	3001      	adds	r0, #1
    96b0:	e7f6      	b.n	96a0 <memchr+0x4>

000096b2 <memmove>:
    96b2:	b510      	push	{r4, lr}
    96b4:	4288      	cmp	r0, r1
    96b6:	d902      	bls.n	96be <memmove+0xc>
    96b8:	188b      	adds	r3, r1, r2
    96ba:	4298      	cmp	r0, r3
    96bc:	d308      	bcc.n	96d0 <memmove+0x1e>
    96be:	2300      	movs	r3, #0
    96c0:	429a      	cmp	r2, r3
    96c2:	d007      	beq.n	96d4 <memmove+0x22>
    96c4:	5ccc      	ldrb	r4, [r1, r3]
    96c6:	54c4      	strb	r4, [r0, r3]
    96c8:	3301      	adds	r3, #1
    96ca:	e7f9      	b.n	96c0 <memmove+0xe>
    96cc:	5c8b      	ldrb	r3, [r1, r2]
    96ce:	5483      	strb	r3, [r0, r2]
    96d0:	3a01      	subs	r2, #1
    96d2:	d2fb      	bcs.n	96cc <memmove+0x1a>
    96d4:	bd10      	pop	{r4, pc}

000096d6 <_realloc_r>:
    96d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96d8:	0007      	movs	r7, r0
    96da:	000d      	movs	r5, r1
    96dc:	0016      	movs	r6, r2
    96de:	2900      	cmp	r1, #0
    96e0:	d105      	bne.n	96ee <_realloc_r+0x18>
    96e2:	0011      	movs	r1, r2
    96e4:	f7ff fb78 	bl	8dd8 <_malloc_r>
    96e8:	0004      	movs	r4, r0
    96ea:	0020      	movs	r0, r4
    96ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96ee:	2a00      	cmp	r2, #0
    96f0:	d103      	bne.n	96fa <_realloc_r+0x24>
    96f2:	f7ff fb27 	bl	8d44 <_free_r>
    96f6:	0034      	movs	r4, r6
    96f8:	e7f7      	b.n	96ea <_realloc_r+0x14>
    96fa:	f000 f812 	bl	9722 <_malloc_usable_size_r>
    96fe:	002c      	movs	r4, r5
    9700:	4286      	cmp	r6, r0
    9702:	d9f2      	bls.n	96ea <_realloc_r+0x14>
    9704:	0031      	movs	r1, r6
    9706:	0038      	movs	r0, r7
    9708:	f7ff fb66 	bl	8dd8 <_malloc_r>
    970c:	1e04      	subs	r4, r0, #0
    970e:	d0ec      	beq.n	96ea <_realloc_r+0x14>
    9710:	0029      	movs	r1, r5
    9712:	0032      	movs	r2, r6
    9714:	f7ff fb04 	bl	8d20 <memcpy>
    9718:	0029      	movs	r1, r5
    971a:	0038      	movs	r0, r7
    971c:	f7ff fb12 	bl	8d44 <_free_r>
    9720:	e7e3      	b.n	96ea <_realloc_r+0x14>

00009722 <_malloc_usable_size_r>:
    9722:	1f0b      	subs	r3, r1, #4
    9724:	681b      	ldr	r3, [r3, #0]
    9726:	1f18      	subs	r0, r3, #4
    9728:	2b00      	cmp	r3, #0
    972a:	da01      	bge.n	9730 <_malloc_usable_size_r+0xe>
    972c:	580b      	ldr	r3, [r1, r0]
    972e:	18c0      	adds	r0, r0, r3
    9730:	4770      	bx	lr
    9732:	0000      	movs	r0, r0
    9734:	00082008 	.word	0x00082008
    9738:	65636341 	.word	0x65636341
    973c:	6172656c 	.word	0x6172656c
    9740:	6e6f6974 	.word	0x6e6f6974
    9744:	676d5b20 	.word	0x676d5b20
    9748:	20583a5d 	.word	0x20583a5d
    974c:	59096425 	.word	0x59096425
    9750:	09642520 	.word	0x09642520
    9754:	6425205a 	.word	0x6425205a
    9758:	00000a0d 	.word	0x00000a0d
    975c:	64206f4e 	.word	0x64206f4e
    9760:	20617461 	.word	0x20617461
    9764:	64616572 	.word	0x64616572
    9768:	0d202179 	.word	0x0d202179
    976c:	0000000a 	.word	0x0000000a
    9770:	64757453 	.word	0x64757453
    9774:	73746e65 	.word	0x73746e65
    9778:	206f7420 	.word	0x206f7420
    977c:	6c6c6966 	.word	0x6c6c6966
    9780:	74756f20 	.word	0x74756f20
    9784:	00000021 	.word	0x00000021
    9788:	00736c63 	.word	0x00736c63
    978c:	3a736c63 	.word	0x3a736c63
    9790:	656c4320 	.word	0x656c4320
    9794:	20737261 	.word	0x20737261
    9798:	20656874 	.word	0x20656874
    979c:	6d726574 	.word	0x6d726574
    97a0:	6c616e69 	.word	0x6c616e69
    97a4:	72637320 	.word	0x72637320
    97a8:	0d6e6565 	.word	0x0d6e6565
    97ac:	0000000a 	.word	0x0000000a
    97b0:	0064656c 	.word	0x0064656c
    97b4:	2064656c 	.word	0x2064656c
    97b8:	79656b5b 	.word	0x79656b5b
    97bc:	5d6d756e 	.word	0x5d6d756e
    97c0:	5b5d525b 	.word	0x5b5d525b
    97c4:	425b5d47 	.word	0x425b5d47
    97c8:	53203a5d 	.word	0x53203a5d
    97cc:	20737465 	.word	0x20737465
    97d0:	20656874 	.word	0x20656874
    97d4:	65766967 	.word	0x65766967
    97d8:	454c206e 	.word	0x454c206e
    97dc:	6f742044 	.word	0x6f742044
    97e0:	65687420 	.word	0x65687420
    97e4:	76696720 	.word	0x76696720
    97e8:	52206e65 	.word	0x52206e65
    97ec:	422c472c 	.word	0x422c472c
    97f0:	6c617620 	.word	0x6c617620
    97f4:	2e736575 	.word	0x2e736575
    97f8:	00000a0d 	.word	0x00000a0d
    97fc:	65736572 	.word	0x65736572
    9800:	00000074 	.word	0x00000074
    9804:	65736572 	.word	0x65736572
    9808:	52203a74 	.word	0x52203a74
    980c:	74657365 	.word	0x74657365
    9810:	68742073 	.word	0x68742073
    9814:	65642065 	.word	0x65642065
    9818:	65636976 	.word	0x65636976
    981c:	00000a0d 	.word	0x00000a0d
    9820:	00756d69 	.word	0x00756d69
    9824:	3a756d69 	.word	0x3a756d69
    9828:	74655220 	.word	0x74655220
    982c:	736e7275 	.word	0x736e7275
    9830:	76206120 	.word	0x76206120
    9834:	65756c61 	.word	0x65756c61
    9838:	6f726620 	.word	0x6f726620
    983c:	6874206d 	.word	0x6874206d
    9840:	4d492065 	.word	0x4d492065
    9844:	000a0d55 	.word	0x000a0d55
    9848:	65657246 	.word	0x65657246
    984c:	534f5452 	.word	0x534f5452
    9850:	494c4320 	.word	0x494c4320
    9854:	540a0d2e 	.word	0x540a0d2e
    9858:	20657079 	.word	0x20657079
    985c:	706c6548 	.word	0x706c6548
    9860:	206f7420 	.word	0x206f7420
    9864:	77656976 	.word	0x77656976
    9868:	6c206120 	.word	0x6c206120
    986c:	20747369 	.word	0x20747369
    9870:	7220666f 	.word	0x7220666f
    9874:	73696765 	.word	0x73696765
    9878:	65726574 	.word	0x65726574
    987c:	6f632064 	.word	0x6f632064
    9880:	6e616d6d 	.word	0x6e616d6d
    9884:	0d2e7364 	.word	0x0d2e7364
    9888:	0000000a 	.word	0x0000000a
    988c:	6c756f43 	.word	0x6c756f43
    9890:	6f6e2064 	.word	0x6f6e2064
    9894:	6c612074 	.word	0x6c612074
    9898:	61636f6c 	.word	0x61636f6c
    989c:	73206574 	.word	0x73206574
    98a0:	70616d65 	.word	0x70616d65
    98a4:	65726f68 	.word	0x65726f68
    98a8:	00000a0d 	.word	0x00000a0d
    98ac:	0000616f 	.word	0x0000616f
    98b0:	325b6325 	.word	0x325b6325
    98b4:	003e0d4b 	.word	0x003e0d4b

000098b8 <xClearScreen>:
    98b8:	00009788 0000978c 0000062d 00000000     ........-.......
    98c8:	325b6325 0000004a                       %c[2J...

000098d0 <xImuGetCommand>:
    98d0:	00009820 00009824 00000579 00000000      ...$...y.......

000098e0 <xNeotrellisTurnLEDCommand>:
    98e0:	000097b0 000097b4 00000659 00000004     ........Y.......

000098f0 <xResetCommand>:
    98f0:	000097fc 00009804 00000561 00000000     ........a.......
    9900:	6c696166 69206465 6573206e 6870616d     failed in semaph
    9910:	6765726f 00657669 2072754f 6f727265     oregive.Our erro
    9920:	6e692072 63324920 64616552 61746144     r in I2cReadData
    9930:	74697257 73692065 6425203a 00000a0d     Write is: %d....
    9940:	00001010 0000050e 6f727245 6e692072     ........Error in
    9950:	61697469 697a696c 5320676e 61736565     itializing Seesa
    9960:	0a0d2177 00000000 6f727245 000a0d72     w!......Error...
    9970:	6e756f46 65532064 77617365 000a0d21     Found Seesaw!...
    9980:	6c756f43 6f6e2064 72772074 20657469     Could not write 
    9990:	73656553 70207761 0d216e69 0000000a     Seesaw pin!.....
    99a0:	6c756f43 6f6e2064 65732074 65732074     Could not set se
    99b0:	77617365 6f654e20 65786970 7073206c     esaw Neopixel sp
    99c0:	21646565 00000a0d 6c756f43 6f6e2064     eed!....Could no
    99d0:	65732074 65732074 77617365 6f654e20     t set seesaw Neo
    99e0:	65786970 756e206c 7265626d 20666f20     pixel number of 
    99f0:	69766564 0d736563 0000000a 6c756f43     devices.....Coul
    9a00:	6f6e2064 6e692074 61697469 657a696c     d not initialize
    9a10:	79654b20 21646170 6e2f722f 00000000      Keypad!/r/n....

00009a20 <msgBaseGetHWID>:
    9a20:	00000100                                ....

00009a24 <msgKeypadEnableInt>:
    9a24:	00010210                                ....

00009a28 <msgNeopixelBufLength>:
    9a28:	3000030e                                ...0

00009a2c <msgNeopixelPin>:
    9a2c:	0003010e                                ....

00009a30 <msgNeopixelSpeed>:
    9a30:	0001020e 54204955 206b7361 72617453     ....UI Task Star
    9a40:	21646574 00000000 6f636e49 63657272     ted!....Incorrec
    9a50:	6f632074 6e616d6d 61702064 656d6172     t command parame
    9a60:	28726574 202e2973 746e4520 22207265     ter(s).  Enter "
    9a70:	706c6568 6f742022 65697620 20612077     help" to view a 
    9a80:	7473696c 20666f20 69617661 6c62616c     list of availabl
    9a90:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
    9aa0:	6d6d6f43 20646e61 20746f6e 6f636572     Command not reco
    9ab0:	73696e67 202e6465 746e4520 27207265     gnised.  Enter '
    9ac0:	706c6568 6f742027 65697620 20612077     help' to view a 
    9ad0:	7473696c 20666f20 69617661 6c62616c     list of availabl
    9ae0:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
    9af0:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
    9b00:	694c200a 20737473 206c6c61 20656874     . Lists all the 
    9b10:	69676572 72657473 63206465 616d6d6f     registered comma
    9b20:	0d73646e 000a0d0a                       nds.....

00009b28 <xHelpCommand>:
    9b28:	00009af0 00009af8 00001add 00000000     ................
    9b38:	00001ee4 00001edc 00001ee0 00001efc     ................
    9b48:	00001ed8 00001ee8 00001eec 00001ef0     ................
    9b58:	00001ef4 20746f4e 756f6e65 54206867     ....Not enough T
    9b68:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
    9b78:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
    9b88:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
    9b98:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
    9ba8:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
    9bb8:	2d207365 636e6920 73616572 52542065     es - increase TR
    9bc8:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
    9bd8:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9be8:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
    9bf8:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
    9c08:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    9c18:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
    9c28:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
    9c38:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
    9c48:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
    9c58:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    9c68:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
    9c78:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9c88:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
    9c98:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
    9ca8:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
    9cb8:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
    9cc8:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
    9cd8:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
    9ce8:	6e616820 73656c64 69202d20 6572636e      handles - incre
    9cf8:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
    9d08:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
    9d18:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
    9d28:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
    9d38:	61682050 656c646e 202d2073 72636e69     P handles - incr
    9d48:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
    9d58:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
    9d68:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
    9d78:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
    9d88:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
    9d98:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
    9da8:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
    9db8:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
    9dc8:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
    9dd8:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
    9de8:	6e616820 73656c64 69202d20 6572636e      handles - incre
    9df8:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
    9e08:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
    9e18:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9e28:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
    9e38:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
    9e48:	64696c61 6a626f20 63746365 7373616c     alid objectclass
    9e58:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
    9e68:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
    9e78:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
    9e88:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
    9e98:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
    9ea8:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
    9eb8:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
    9ec8:	6f6d2074 00296564 43415254 53415f45     t mode).TRACE_AS
    9ed8:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
    9ee8:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
    9ef8:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
    9f08:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
    9f18:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
    9f28:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    9f38:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
    9f48:	696c6176 61762064 2065756c 20726f66     valid value for 
    9f58:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
    9f68:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
    9f78:	206e6920 54767270 65636172 44746547      in prvTraceGetD
    9f88:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
    9f98:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
    9fa8:	48746365 6c646e61 49203a65 6c61766e     ectHandle: Inval
    9fb8:	76206469 65756c61 726f6620 6a626f20     id value for obj
    9fc8:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    9fd8:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    9fe8:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
    9ff8:	2064696c 756c6176 6f662065 61702072     lid value for pa
    a008:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
    a018:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
    a028:	69725074 7469726f 6f725079 74726570     tPriorityPropert
    a038:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
    a048:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    a058:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    a068:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
    a078:	7469726f 6f725079 74726570 49203a79     orityProperty: I
    a088:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a098:	00646920 63617254 65522065 64726f63      id.Trace Record
    a0a8:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
    a0b8:	69206f74 7865646e 74756f20 65646973     to index outside
    a0c8:	65766520 6220746e 65666675 00002172      event buffer!..
    a0d8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a0e8:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
    a0f8:	3a656d61 6d616e20 3d3d2065 4c554e20     ame: name == NUL
    a108:	0000004c 656c6c49 206c6167 656a626f     L...Illegal obje
    a118:	63207463 7373616c 206e6920 54767270     ct class in prvT
    a128:	65636172 4f746553 63656a62 6d614e74     raceSetObjectNam
    a138:	00000065 656c6c49 206c6167 646e6168     e...Illegal hand
    a148:	2820656c 69202930 7270206e 61725476     le (0) in prvTra
    a158:	65536563 6a624f74 4e746365 2e656d61     ceSetObjectName.
    a168:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    a178:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
    a188:	53746365 65746174 626f203a 7463656a     ectState: object
    a198:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
    a1a8:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
    a1b8:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
    a1c8:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
    a1d8:	696c6176 61762064 2065756c 20726f66     valid value for 
    a1e8:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
    a1f8:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
    a208:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
    a218:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
    a228:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
    a238:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a248:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
    a258:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
    a268:	76206469 65756c61 726f6620 00646920     id value for id.
    a278:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a288:	61725476 65536563 73615474 736e496b     vTraceSetTaskIns
    a298:	636e6174 6e694665 65687369 49203a64     tanceFinished: I
    a2a8:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a2b8:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
    a2c8:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a2d8:	4b65726f 656e7265 6c61436c 65203a6c     oreKernelCall: e
    a2e8:	65646f63 203d3e20 46467830 00000000     code >= 0xFF....
    a2f8:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a308:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
    a318:	6c61436c 6f203a6c 63656a62 616c4374     lCall: objectCla
    a328:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
    a338:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
    a348:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a358:	4b65726f 656e7265 6c61436c 49203a6c     oreKernelCall: I
    a368:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a378:	6a626f20 4e746365 65626d75 00000072      objectNumber...
    a388:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a398:	68676968 69727020 7469726f 53492079     high priority IS
    a3a8:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a3b8:	29322820 00000000 43415254 53415f45      (2)....TRACE_AS
    a3c8:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a3d8:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a3e8:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
    a3f8:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
    a408:	726f6620 74766520 65646f63 00000000      for evtcode....
    a418:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a428:	68676968 69727020 7469726f 53492079     high priority IS
    a438:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a448:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
    a458:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a468:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a478:	72615068 203a6d61 63747665 2065646f     hParam: evtcode 
    a488:	30203d3e 00464678 43415254 53415f45     >= 0xFF.TRACE_AS
    a498:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a4a8:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a4b8:	72615068 203a6d61 656a626f 6c437463     hParam: objectCl
    a4c8:	20737361 54203d3e 45434152 4c434e5f     ass >= TRACE_NCL
    a4d8:	45535341 00000053 43415254 53415f45     ASSES...TRACE_AS
    a4e8:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a4f8:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a508:	72615068 203a6d61 61766e49 2064696c     hParam: Invalid 
    a518:	756c6176 6f662065 626f2072 7463656a     value for object
    a528:	626d754e 00007265 6f636552 72656472     Number..Recorder
    a538:	73756220 202d2079 68676968 69727020      busy - high pri
    a548:	7469726f 53492079 73752052 20676e69     ority ISR using 
    a558:	63737973 3f6c6c61 29332820 00000000     syscall? (3)....
    a568:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a578:	61725476 74536563 5465726f 526b7361     vTraceStoreTaskR
    a588:	79646165 6e49203a 696c6176 61762064     eady: Invalid va
    a598:	2065756c 20726f66 646e6168 0000656c     lue for handle..
    a5a8:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a5b8:	68676968 69727020 7469726f 53492079     high priority IS
    a5c8:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a5d8:	29312820 00000000 43415254 53415f45      (1)....TRACE_AS
    a5e8:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a5f8:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
    a608:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a618:	73617420 61685f6b 656c646e 00000000      task_handle....
    a628:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a638:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
    a648:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
    a658:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
    a668:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    a678:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    a688:	76206469 65756c61 726f6620 6a626f20     id value for obj
    a698:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    a6a8:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    a6b8:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    a6c8:	76206469 65756c61 726f6620 6a626f20     id value for obj
    a6d8:	68746365 6c646e61 00000065 43415254     ecthandle...TRAC
    a6e8:	53415f45 54524553 6552203a 64726f63     E_ASSERT: Record
    a6f8:	6e207265 6920746f 6974696e 7a696c61     er not initializ
    a708:	202e6465 20657355 61725476 6e456563     ed. Use vTraceEn
    a718:	656c6261 69202928 6574736e 00216461     able() instead!.
    a728:	61747328 70757472 00000029 43415254     (startup)...TRAC
    a738:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
    a748:	69676552 72657473 69727453 203a676e     RegisterString: 
    a758:	6562616c 3d3d206c 4c554e20 0000004c     label == NULL...
    a768:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
    a778:	64726f63 6e207265 6920746f 6974696e     corder not initi
    a788:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
    a798:	45656361 6c62616e 20292865 73726966     aceEnable() firs
    a7a8:	00002174 454c4449 00000000 00005464     t!..IDLE....dT..
    a7b8:	00005464 00005464 000053dc 000054a6     dT..dT...S...T..
    a7c8:	000054c0 00005464 00005464 000053dc     .T..dT..dT...S..
    a7d8:	000054a6 20726d54 00637653 42000800     .T..Tmr Svc....B
    a7e8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    a7f8:	42001c00 00006452 0000644e 0000644e     ...BRd..Nd..Nd..
    a808:	000064b4 000064b4 00006466 00006458     .d...d..fd..Xd..
    a818:	0000646c 000064a2 000065e0 000065c0     ld...d...e...e..
    a828:	000065c0 0000664c 000065d2 000065ee     .e..Lf...e...e..
    a838:	000065c4 000065fc 0000663c              .e...e..<f..

0000a844 <_tcc_intflag>:
    a844:	00000001 00000002 00000004 00000008     ................
    a854:	00001000 00002000 00004000 00008000     ..... ...@......
    a864:	00010000 00020000 00040000 00080000     ................
    a874:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
    a884:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
    a894:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
    a8a4:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
    a8b4:	6e692072 61697469 697a696c 4920676e     r initializing I
    a8c4:	44204332 65766972 0a0d2172 00000000     2C Driver!......
    a8d4:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
    a8e4:	76697244 0d217265 0000000a 74696e49     Driver!.....Init
    a8f4:	696c6169 2064657a 73656553 0d217761     ialized Seesaw!.
    a904:	0000000a 6e6e6143 6620746f 20646e69     ....Cannot find 
    a914:	21554d49 00000a0d 20554d49 6e756f66     IMU!....IMU foun
    a924:	0a0d2164 00000000 20554d49 74696e69     d!......IMU init
    a934:	696c6169 2164657a 00000a0d 6c756f43     ialized!....Coul
    a944:	6f6e2064 6e692074 61697469 657a696c     d not initialize
    a954:	554d4920 00000a0d 70616548 66656220      IMU....Heap bef
    a964:	2065726f 72617473 676e6974 73617420     ore starting tas
    a974:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
    a984:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
    a994:	73617420 6f63206b 20646c75 20746f6e      task could not 
    a9a4:	69206562 6974696e 7a696c61 0d216465     be initialized!.
    a9b4:	0000000a 70616548 74666120 73207265     ....Heap after s
    a9c4:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
    a9d4:	0000000a 54204955 006b7361 3a525245     ....UI Task.ERR:
    a9e4:	20495520 6b736174 756f6320 6e20646c      UI task could n
    a9f4:	6220746f 6e692065 61697469 657a696c     ot be initialize
    aa04:	0a0d2164 00000000 70616548 74666120     d!......Heap aft
    aa14:	73207265 74726174 20676e69 54204955     er starting UI T
    aa24:	3a6b7361 0d642520 0000000a 6f727245     ask: %d.....Erro
    aa34:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
    aa44:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
    aa54:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
    aa64:	61747320 6f206b63 66726576 20776f6c      stack overflow 
    aa74:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
    aa84:	00007208 00007158 00007158 00007156     .r..Xq..Xq..Vq..
    aa94:	000071fa 000071fa 000071f0 00007156     .q...q...q..Vq..
    aaa4:	000071fa 000071f0 000071fa 00007156     .q...q...q..Vq..
    aab4:	00007200 00007200 00007200 00007290     .r...r...r...r..
    aac4:	00007c14 00007bf6 00007bb0 00007ace     .|...{...{...z..
    aad4:	00007bb0 00007be8 00007bb0 00007ace     .{...{...{...z..
    aae4:	00007bf6 00007bf6 00007be8 00007ace     .{...{...{...z..
    aaf4:	00007ac6 00007ac6 00007ac6 00007e2c     .z...z...z..,~..
    ab04:	00008274 00008134 00008134 00008130     t...4...4...0...
    ab14:	0000824c 0000824c 0000823e 00008130     L...L...>...0...
    ab24:	0000824c 0000823e 0000824c 00008130     L...>...L...0...
    ab34:	00008254 00008254 00008254 00008458     T...T...T...X...
    ab44:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    ab54:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    ab64:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    ab74:	37363534 62613938 66656463 20200000              456789abcdef.

0000ab81 <_ctype_>:
    ab81:	20202000 20202020 28282020 20282828     .         ((((( 
    ab91:	20202020 20202020 20202020 20202020                     
    aba1:	10108820 10101010 10101010 10101010      ...............
    abb1:	04040410 04040404 10040404 10101010     ................
    abc1:	41411010 41414141 01010101 01010101     ..AAAAAA........
    abd1:	01010101 01010101 01010101 10101010     ................
    abe1:	42421010 42424242 02020202 02020202     ..BBBBBB........
    abf1:	02020202 02020202 02020202 10101010     ................
    ac01:	00000020 00000000 00000000 00000000      ...............
	...

0000ac84 <_init>:
    ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac86:	46c0      	nop			; (mov r8, r8)
    ac88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac8a:	bc08      	pop	{r3}
    ac8c:	469e      	mov	lr, r3
    ac8e:	4770      	bx	lr

0000ac90 <__init_array_start>:
    ac90:	000000dd 	.word	0x000000dd

0000ac94 <_fini>:
    ac94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac96:	46c0      	nop			; (mov r8, r8)
    ac98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac9a:	bc08      	pop	{r3}
    ac9c:	469e      	mov	lr, r3
    ac9e:	4770      	bx	lr

0000aca0 <__fini_array_start>:
    aca0:	000000b5 	.word	0x000000b5
>>>>>>> Stashed changes
=======
0000ac58 <_init>:
    ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac5a:	46c0      	nop			; (mov r8, r8)
    ac5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac5e:	bc08      	pop	{r3}
    ac60:	469e      	mov	lr, r3
    ac62:	4770      	bx	lr

0000ac64 <__init_array_start>:
    ac64:	000000dd 	.word	0x000000dd

0000ac68 <_fini>:
    ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac6a:	46c0      	nop			; (mov r8, r8)
    ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ac6e:	bc08      	pop	{r3}
    ac70:	469e      	mov	lr, r3
    ac72:	4770      	bx	lr

0000ac74 <__fini_array_start>:
    ac74:	000000b5 	.word	0x000000b5
>>>>>>> parent of 79ffb95 (comment)
