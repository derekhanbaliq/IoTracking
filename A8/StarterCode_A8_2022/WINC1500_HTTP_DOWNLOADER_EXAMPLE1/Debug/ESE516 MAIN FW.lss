
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a950  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000200  20000000  0000a950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004ce0  20000200  0000ab50  00020200  2**2
                  ALLOC
  3 .stack        00002000  20004ee0  0000f830  00020200  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006d333  00000000  00000000  00020281  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000895f  00000000  00000000  0008d5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000230a7  00000000  00000000  00095f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001b10  00000000  00000000  000b8fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001ef0  00000000  00000000  000baaca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012e57  00000000  00000000  000bc9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000242bb  00000000  00000000  000cf811  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000ae013  00000000  00000000  000f3acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005b1c  00000000  00000000  001a1ae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	e0 6e 00 20 0d 69 00 00 f1 68 00 00 f1 68 00 00     .n. .i...h...h..
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	45 2b 00 00 00 00 00 00 00 00 00 00 21 2c 00 00     E+..........!,..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	65 2c 00 00 f1 68 00 00 f1 68 00 00 f1 68 00 00     e,...h...h...h..
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	c1 56 00 00 c5 55 00 00 f1 68 00 00 f1 68 00 00     .V...U...h...h..
			time.hour = 12;
      5c:	f1 68 00 00 f1 68 00 00 e9 5a 00 00 f9 5a 00 00     .h...h...Z...Z..
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	09 5b 00 00 19 5b 00 00 29 5b 00 00 39 5b 00 00     .[...[..)[..9[..
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	c1 68 00 00 d1 68 00 00 e1 68 00 00 85 17 00 00     .h...h...h......

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	95 17 00 00 a5 17 00 00 00 00 00 00 00 00 00 00     ................
		if (time.pm == 1) {
      9c:	f1 68 00 00 f1 68 00 00 f1 68 00 00 f1 68 00 00     .h...h...h...h..
			time.pm = 0;
      ac:	f1 68 00 00 00 00 00 00                             .h......

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	20000200 	.word	0x20000200
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	0000a950 	.word	0x0000a950

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000204 	.word	0x20000204
     108:	0000a950 	.word	0x0000a950
     10c:	0000a950 	.word	0x0000a950
     110:	00000000 	.word	0x00000000

00000114 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     114:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     116:	2207      	movs	r2, #7
     118:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     11a:	421a      	tst	r2, r3
     11c:	d1fc      	bne.n	118 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     11e:	4770      	bx	lr

00000120 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     120:	b570      	push	{r4, r5, r6, lr}
     122:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     124:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     126:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     128:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     12a:	8b83      	ldrh	r3, [r0, #28]
     12c:	1aed      	subs	r5, r5, r3
     12e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     130:	8b83      	ldrh	r3, [r0, #28]
     132:	3b01      	subs	r3, #1
     134:	b29b      	uxth	r3, r3
     136:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     138:	0113      	lsls	r3, r2, #4
     13a:	d51d      	bpl.n	178 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     13c:	7ac3      	ldrb	r3, [r0, #11]
     13e:	2b00      	cmp	r3, #0
     140:	d003      	beq.n	14a <_i2c_master_read+0x2a>
     142:	8b83      	ldrh	r3, [r0, #28]
     144:	b29b      	uxth	r3, r3
     146:	2b01      	cmp	r3, #1
     148:	d010      	beq.n	16c <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     14a:	8ba3      	ldrh	r3, [r4, #28]
     14c:	b29b      	uxth	r3, r3
     14e:	2b00      	cmp	r3, #0
     150:	d102      	bne.n	158 <_i2c_master_read+0x38>
		if (module->send_stop) {
     152:	7aa3      	ldrb	r3, [r4, #10]
     154:	2b00      	cmp	r3, #0
     156:	d11c      	bne.n	192 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     158:	0020      	movs	r0, r4
     15a:	4b12      	ldr	r3, [pc, #72]	; (1a4 <_i2c_master_read+0x84>)
     15c:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     15e:	6a23      	ldr	r3, [r4, #32]
     160:	195d      	adds	r5, r3, r5
     162:	2328      	movs	r3, #40	; 0x28
     164:	5cf3      	ldrb	r3, [r6, r3]
     166:	b2db      	uxtb	r3, r3
     168:	702b      	strb	r3, [r5, #0]
}
     16a:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     16c:	6872      	ldr	r2, [r6, #4]
     16e:	2380      	movs	r3, #128	; 0x80
     170:	02db      	lsls	r3, r3, #11
     172:	4313      	orrs	r3, r2
     174:	6073      	str	r3, [r6, #4]
     176:	e7e8      	b.n	14a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     178:	7ac3      	ldrb	r3, [r0, #11]
     17a:	2b00      	cmp	r3, #0
     17c:	d0e5      	beq.n	14a <_i2c_master_read+0x2a>
     17e:	8b83      	ldrh	r3, [r0, #28]
     180:	b29b      	uxth	r3, r3
     182:	2b00      	cmp	r3, #0
     184:	d1e1      	bne.n	14a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     186:	6872      	ldr	r2, [r6, #4]
     188:	2380      	movs	r3, #128	; 0x80
     18a:	02db      	lsls	r3, r3, #11
     18c:	4313      	orrs	r3, r2
     18e:	6073      	str	r3, [r6, #4]
     190:	e7db      	b.n	14a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     192:	0020      	movs	r0, r4
     194:	4b03      	ldr	r3, [pc, #12]	; (1a4 <_i2c_master_read+0x84>)
     196:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     198:	6872      	ldr	r2, [r6, #4]
     19a:	23c0      	movs	r3, #192	; 0xc0
     19c:	029b      	lsls	r3, r3, #10
     19e:	4313      	orrs	r3, r2
     1a0:	6073      	str	r3, [r6, #4]
     1a2:	e7d9      	b.n	158 <_i2c_master_read+0x38>
     1a4:	00000115 	.word	0x00000115

000001a8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     1a8:	b570      	push	{r4, r5, r6, lr}
     1aa:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ac:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     1ae:	8b6b      	ldrh	r3, [r5, #26]
     1b0:	075b      	lsls	r3, r3, #29
     1b2:	d503      	bpl.n	1bc <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     1b4:	221e      	movs	r2, #30
     1b6:	2325      	movs	r3, #37	; 0x25
     1b8:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     1ba:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     1bc:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     1be:	8b83      	ldrh	r3, [r0, #28]
     1c0:	1af6      	subs	r6, r6, r3
     1c2:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     1c4:	8b83      	ldrh	r3, [r0, #28]
     1c6:	3b01      	subs	r3, #1
     1c8:	b29b      	uxth	r3, r3
     1ca:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <_i2c_master_write+0x38>)
     1ce:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     1d0:	6a23      	ldr	r3, [r4, #32]
     1d2:	199e      	adds	r6, r3, r6
     1d4:	7833      	ldrb	r3, [r6, #0]
     1d6:	b2db      	uxtb	r3, r3
     1d8:	2228      	movs	r2, #40	; 0x28
     1da:	54ab      	strb	r3, [r5, r2]
     1dc:	e7ed      	b.n	1ba <_i2c_master_write+0x12>
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	00000115 	.word	0x00000115

000001e4 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
     1e6:	0005      	movs	r5, r0
     1e8:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1ea:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
     1ec:	7a4b      	ldrb	r3, [r1, #9]
     1ee:	2b00      	cmp	r3, #0
     1f0:	d11a      	bne.n	228 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     1f2:	6873      	ldr	r3, [r6, #4]
     1f4:	4a13      	ldr	r2, [pc, #76]	; (244 <_i2c_master_write_packet+0x60>)
     1f6:	4013      	ands	r3, r2
     1f8:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
     1fa:	6863      	ldr	r3, [r4, #4]
     1fc:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
     1fe:	8863      	ldrh	r3, [r4, #2]
     200:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
     202:	2200      	movs	r2, #0
     204:	2324      	movs	r3, #36	; 0x24
     206:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
     208:	3205      	adds	r2, #5
     20a:	3301      	adds	r3, #1
     20c:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
     20e:	3b22      	subs	r3, #34	; 0x22
     210:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
     212:	7a23      	ldrb	r3, [r4, #8]
     214:	2b00      	cmp	r3, #0
     216:	d10b      	bne.n	230 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     218:	8823      	ldrh	r3, [r4, #0]
     21a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     21c:	7a62      	ldrb	r2, [r4, #9]
     21e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     220:	4313      	orrs	r3, r2
     222:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
     224:	2000      	movs	r0, #0
     226:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     228:	7a89      	ldrb	r1, [r1, #10]
     22a:	4b07      	ldr	r3, [pc, #28]	; (248 <_i2c_master_write_packet+0x64>)
     22c:	4798      	blx	r3
     22e:	e7e0      	b.n	1f2 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     230:	8823      	ldrh	r3, [r4, #0]
     232:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     234:	7a62      	ldrb	r2, [r4, #9]
     236:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     238:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     23a:	2280      	movs	r2, #128	; 0x80
     23c:	0212      	lsls	r2, r2, #8
     23e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     240:	6273      	str	r3, [r6, #36]	; 0x24
     242:	e7ef      	b.n	224 <_i2c_master_write_packet+0x40>
     244:	fffbffff 	.word	0xfffbffff
     248:	00001701 	.word	0x00001701

0000024c <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     24c:	1c93      	adds	r3, r2, #2
     24e:	009b      	lsls	r3, r3, #2
     250:	18c3      	adds	r3, r0, r3
     252:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     254:	7e03      	ldrb	r3, [r0, #24]
     256:	2101      	movs	r1, #1
     258:	4091      	lsls	r1, r2
     25a:	430b      	orrs	r3, r1
     25c:	b2db      	uxtb	r3, r3
     25e:	7603      	strb	r3, [r0, #24]
}
     260:	4770      	bx	lr
	...

00000264 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     264:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
     266:	8b83      	ldrh	r3, [r0, #28]
     268:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     26a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     26c:	2b00      	cmp	r3, #0
     26e:	d001      	beq.n	274 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
     270:	0010      	movs	r0, r2
     272:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     274:	3301      	adds	r3, #1
     276:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     278:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
     27a:	4b02      	ldr	r3, [pc, #8]	; (284 <i2c_master_write_packet_job+0x20>)
     27c:	4798      	blx	r3
     27e:	0002      	movs	r2, r0
     280:	e7f6      	b.n	270 <i2c_master_write_packet_job+0xc>
     282:	46c0      	nop			; (mov r8, r8)
     284:	000001e5 	.word	0x000001e5

00000288 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     288:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     28a:	0080      	lsls	r0, r0, #2
     28c:	4b75      	ldr	r3, [pc, #468]	; (464 <_i2c_master_interrupt_handler+0x1dc>)
     28e:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     290:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     292:	682b      	ldr	r3, [r5, #0]
     294:	011b      	lsls	r3, r3, #4
     296:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     298:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     29a:	7e26      	ldrb	r6, [r4, #24]
     29c:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     29e:	8b63      	ldrh	r3, [r4, #26]
     2a0:	b29b      	uxth	r3, r3
     2a2:	2b00      	cmp	r3, #0
     2a4:	d103      	bne.n	2ae <_i2c_master_interrupt_handler+0x26>
     2a6:	8ba3      	ldrh	r3, [r4, #28]
     2a8:	b29b      	uxth	r3, r3
     2aa:	2b00      	cmp	r3, #0
     2ac:	d123      	bne.n	2f6 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     2ae:	8b63      	ldrh	r3, [r4, #26]
     2b0:	b29b      	uxth	r3, r3
     2b2:	2b00      	cmp	r3, #0
     2b4:	d008      	beq.n	2c8 <_i2c_master_interrupt_handler+0x40>
     2b6:	8ba3      	ldrh	r3, [r4, #28]
     2b8:	b29b      	uxth	r3, r3
     2ba:	2b00      	cmp	r3, #0
     2bc:	d104      	bne.n	2c8 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     2be:	3325      	adds	r3, #37	; 0x25
     2c0:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     2c2:	2b05      	cmp	r3, #5
     2c4:	d100      	bne.n	2c8 <_i2c_master_interrupt_handler+0x40>
     2c6:	e06d      	b.n	3a4 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     2c8:	8b63      	ldrh	r3, [r4, #26]
     2ca:	b29b      	uxth	r3, r3
     2cc:	2b00      	cmp	r3, #0
     2ce:	d024      	beq.n	31a <_i2c_master_interrupt_handler+0x92>
     2d0:	8ba3      	ldrh	r3, [r4, #28]
     2d2:	b29b      	uxth	r3, r3
     2d4:	2b00      	cmp	r3, #0
     2d6:	d020      	beq.n	31a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     2d8:	8b6b      	ldrh	r3, [r5, #26]
     2da:	069b      	lsls	r3, r3, #26
     2dc:	d500      	bpl.n	2e0 <_i2c_master_interrupt_handler+0x58>
     2de:	e081      	b.n	3e4 <_i2c_master_interrupt_handler+0x15c>
     2e0:	2a00      	cmp	r2, #0
     2e2:	d004      	beq.n	2ee <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     2e4:	8ba3      	ldrh	r3, [r4, #28]
     2e6:	b29b      	uxth	r3, r3
     2e8:	2b01      	cmp	r3, #1
     2ea:	d100      	bne.n	2ee <_i2c_master_interrupt_handler+0x66>
     2ec:	e07a      	b.n	3e4 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     2ee:	2241      	movs	r2, #65	; 0x41
     2f0:	2325      	movs	r3, #37	; 0x25
     2f2:	54e2      	strb	r2, [r4, r3]
     2f4:	e011      	b.n	31a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     2f6:	7e2b      	ldrb	r3, [r5, #24]
     2f8:	07db      	lsls	r3, r3, #31
     2fa:	d507      	bpl.n	30c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     2fc:	2301      	movs	r3, #1
     2fe:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     300:	8b6b      	ldrh	r3, [r5, #26]
     302:	079b      	lsls	r3, r3, #30
     304:	d52e      	bpl.n	364 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     306:	2241      	movs	r2, #65	; 0x41
     308:	2325      	movs	r3, #37	; 0x25
     30a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     30c:	8ba3      	ldrh	r3, [r4, #28]
     30e:	b29b      	uxth	r3, r3
     310:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     312:	2325      	movs	r3, #37	; 0x25
     314:	5ce3      	ldrb	r3, [r4, r3]
     316:	2b05      	cmp	r3, #5
     318:	d038      	beq.n	38c <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     31a:	8b63      	ldrh	r3, [r4, #26]
     31c:	b29b      	uxth	r3, r3
     31e:	2b00      	cmp	r3, #0
     320:	d007      	beq.n	332 <_i2c_master_interrupt_handler+0xaa>
     322:	8ba3      	ldrh	r3, [r4, #28]
     324:	b29b      	uxth	r3, r3
     326:	2b00      	cmp	r3, #0
     328:	d103      	bne.n	332 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     32a:	3325      	adds	r3, #37	; 0x25
     32c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     32e:	2b05      	cmp	r3, #5
     330:	d064      	beq.n	3fc <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     332:	2325      	movs	r3, #37	; 0x25
     334:	5ce3      	ldrb	r3, [r4, r3]
     336:	2b05      	cmp	r3, #5
     338:	d013      	beq.n	362 <_i2c_master_interrupt_handler+0xda>
     33a:	2325      	movs	r3, #37	; 0x25
     33c:	5ce3      	ldrb	r3, [r4, r3]
     33e:	2b00      	cmp	r3, #0
     340:	d00f      	beq.n	362 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     342:	2303      	movs	r3, #3
     344:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     346:	2300      	movs	r3, #0
     348:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     34a:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     34c:	3325      	adds	r3, #37	; 0x25
     34e:	5ce3      	ldrb	r3, [r4, r3]
     350:	2b41      	cmp	r3, #65	; 0x41
     352:	d003      	beq.n	35c <_i2c_master_interrupt_handler+0xd4>
     354:	7aa3      	ldrb	r3, [r4, #10]
     356:	2b00      	cmp	r3, #0
     358:	d000      	beq.n	35c <_i2c_master_interrupt_handler+0xd4>
     35a:	e075      	b.n	448 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     35c:	0773      	lsls	r3, r6, #29
     35e:	d500      	bpl.n	362 <_i2c_master_interrupt_handler+0xda>
     360:	e07b      	b.n	45a <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     362:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     364:	8b6b      	ldrh	r3, [r5, #26]
     366:	075b      	lsls	r3, r3, #29
     368:	d5d0      	bpl.n	30c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     36a:	2218      	movs	r2, #24
     36c:	2325      	movs	r3, #37	; 0x25
     36e:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     370:	2300      	movs	r3, #0
     372:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     374:	7aa3      	ldrb	r3, [r4, #10]
     376:	2b00      	cmp	r3, #0
     378:	d0c8      	beq.n	30c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     37a:	0020      	movs	r0, r4
     37c:	4b3a      	ldr	r3, [pc, #232]	; (468 <_i2c_master_interrupt_handler+0x1e0>)
     37e:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     380:	686a      	ldr	r2, [r5, #4]
     382:	23c0      	movs	r3, #192	; 0xc0
     384:	029b      	lsls	r3, r3, #10
     386:	4313      	orrs	r3, r2
     388:	606b      	str	r3, [r5, #4]
     38a:	e7bf      	b.n	30c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     38c:	331f      	adds	r3, #31
     38e:	5ce3      	ldrb	r3, [r4, r3]
     390:	2b00      	cmp	r3, #0
     392:	d003      	beq.n	39c <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     394:	0020      	movs	r0, r4
     396:	4b35      	ldr	r3, [pc, #212]	; (46c <_i2c_master_interrupt_handler+0x1e4>)
     398:	4798      	blx	r3
     39a:	e7be      	b.n	31a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     39c:	0020      	movs	r0, r4
     39e:	4b34      	ldr	r3, [pc, #208]	; (470 <_i2c_master_interrupt_handler+0x1e8>)
     3a0:	4798      	blx	r3
     3a2:	e7ba      	b.n	31a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     3a4:	331f      	adds	r3, #31
     3a6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     3a8:	2b00      	cmp	r3, #0
     3aa:	d000      	beq.n	3ae <_i2c_master_interrupt_handler+0x126>
     3ac:	e78c      	b.n	2c8 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     3ae:	3303      	adds	r3, #3
     3b0:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     3b2:	2300      	movs	r3, #0
     3b4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     3b6:	3325      	adds	r3, #37	; 0x25
     3b8:	2200      	movs	r2, #0
     3ba:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     3bc:	7aa3      	ldrb	r3, [r4, #10]
     3be:	2b00      	cmp	r3, #0
     3c0:	d107      	bne.n	3d2 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     3c2:	2301      	movs	r3, #1
     3c4:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     3c6:	07f3      	lsls	r3, r6, #31
     3c8:	d5a7      	bpl.n	31a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     3ca:	68e3      	ldr	r3, [r4, #12]
     3cc:	0020      	movs	r0, r4
     3ce:	4798      	blx	r3
     3d0:	e7a3      	b.n	31a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     3d2:	0020      	movs	r0, r4
     3d4:	4b24      	ldr	r3, [pc, #144]	; (468 <_i2c_master_interrupt_handler+0x1e0>)
     3d6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     3d8:	686a      	ldr	r2, [r5, #4]
     3da:	23c0      	movs	r3, #192	; 0xc0
     3dc:	029b      	lsls	r3, r3, #10
     3de:	4313      	orrs	r3, r2
     3e0:	606b      	str	r3, [r5, #4]
     3e2:	e7f0      	b.n	3c6 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     3e4:	2324      	movs	r3, #36	; 0x24
     3e6:	5ce3      	ldrb	r3, [r4, r3]
     3e8:	2b00      	cmp	r3, #0
     3ea:	d103      	bne.n	3f4 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     3ec:	0020      	movs	r0, r4
     3ee:	4b20      	ldr	r3, [pc, #128]	; (470 <_i2c_master_interrupt_handler+0x1e8>)
     3f0:	4798      	blx	r3
     3f2:	e792      	b.n	31a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     3f4:	0020      	movs	r0, r4
     3f6:	4b1d      	ldr	r3, [pc, #116]	; (46c <_i2c_master_interrupt_handler+0x1e4>)
     3f8:	4798      	blx	r3
     3fa:	e78e      	b.n	31a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     3fc:	331f      	adds	r3, #31
     3fe:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     400:	2b01      	cmp	r3, #1
     402:	d196      	bne.n	332 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     404:	7e2b      	ldrb	r3, [r5, #24]
     406:	079b      	lsls	r3, r3, #30
     408:	d501      	bpl.n	40e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     40a:	2302      	movs	r3, #2
     40c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     40e:	2303      	movs	r3, #3
     410:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     412:	2300      	movs	r3, #0
     414:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     416:	3325      	adds	r3, #37	; 0x25
     418:	2200      	movs	r2, #0
     41a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     41c:	07b3      	lsls	r3, r6, #30
     41e:	d503      	bpl.n	428 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     420:	2324      	movs	r3, #36	; 0x24
     422:	5ce3      	ldrb	r3, [r4, r3]
     424:	2b01      	cmp	r3, #1
     426:	d00b      	beq.n	440 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     428:	07f3      	lsls	r3, r6, #31
     42a:	d400      	bmi.n	42e <_i2c_master_interrupt_handler+0x1a6>
     42c:	e781      	b.n	332 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     42e:	2324      	movs	r3, #36	; 0x24
     430:	5ce3      	ldrb	r3, [r4, r3]
     432:	2b00      	cmp	r3, #0
     434:	d000      	beq.n	438 <_i2c_master_interrupt_handler+0x1b0>
     436:	e77c      	b.n	332 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     438:	68e3      	ldr	r3, [r4, #12]
     43a:	0020      	movs	r0, r4
     43c:	4798      	blx	r3
     43e:	e778      	b.n	332 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     440:	6923      	ldr	r3, [r4, #16]
     442:	0020      	movs	r0, r4
     444:	4798      	blx	r3
     446:	e774      	b.n	332 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     448:	0020      	movs	r0, r4
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <_i2c_master_interrupt_handler+0x1e0>)
     44c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     44e:	686a      	ldr	r2, [r5, #4]
     450:	23e0      	movs	r3, #224	; 0xe0
     452:	02db      	lsls	r3, r3, #11
     454:	4313      	orrs	r3, r2
     456:	606b      	str	r3, [r5, #4]
     458:	e780      	b.n	35c <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     45a:	6963      	ldr	r3, [r4, #20]
     45c:	0020      	movs	r0, r4
     45e:	4798      	blx	r3
}
     460:	e77f      	b.n	362 <_i2c_master_interrupt_handler+0xda>
     462:	46c0      	nop			; (mov r8, r8)
     464:	20004d78 	.word	0x20004d78
     468:	00000115 	.word	0x00000115
     46c:	00000121 	.word	0x00000121
     470:	000001a9 	.word	0x000001a9

00000474 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     474:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     478:	4a02      	ldr	r2, [pc, #8]	; (484 <CLI_ResetDevice+0x10>)
     47a:	4b03      	ldr	r3, [pc, #12]	; (488 <CLI_ResetDevice+0x14>)
     47c:	60da      	str	r2, [r3, #12]
     47e:	f3bf 8f4f 	dsb	sy
     482:	e7fe      	b.n	482 <CLI_ResetDevice+0xe>
     484:	05fa0004 	.word	0x05fa0004
     488:	e000ed00 	.word	0xe000ed00

0000048c <CLI_GetImuData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     48c:	b5f0      	push	{r4, r5, r6, r7, lr}
     48e:	b087      	sub	sp, #28
     490:	9002      	str	r0, [sp, #8]
     492:	000e      	movs	r6, r1
static int16_t  data_raw_acceleration[3];
static int16_t  data_raw_angular_rate;
static float acceleration_mg[3];
uint8_t reg;
stmdev_ctx_t *dev_ctx = GetImuStruct();
     494:	4b1f      	ldr	r3, [pc, #124]	; (514 <CLI_GetImuData+0x88>)
     496:	4798      	blx	r3
     498:	9004      	str	r0, [sp, #16]


/* Read output only if new xl value is available */
lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
     49a:	240f      	movs	r4, #15
     49c:	ab02      	add	r3, sp, #8
     49e:	469c      	mov	ip, r3
     4a0:	4464      	add	r4, ip
     4a2:	0021      	movs	r1, r4
     4a4:	4b1c      	ldr	r3, [pc, #112]	; (518 <CLI_GetImuData+0x8c>)
     4a6:	4798      	blx	r3

if(reg){
     4a8:	7823      	ldrb	r3, [r4, #0]
     4aa:	2b00      	cmp	r3, #0
     4ac:	d107      	bne.n	4be <CLI_GetImuData+0x32>

	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
	(int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
}else
{
	snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
     4ae:	4a1b      	ldr	r2, [pc, #108]	; (51c <CLI_GetImuData+0x90>)
     4b0:	0031      	movs	r1, r6
     4b2:	9802      	ldr	r0, [sp, #8]
     4b4:	4b1a      	ldr	r3, [pc, #104]	; (520 <CLI_GetImuData+0x94>)
     4b6:	4798      	blx	r3
}
return pdFALSE;
}
     4b8:	2000      	movs	r0, #0
     4ba:	b007      	add	sp, #28
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
     4be:	2206      	movs	r2, #6
     4c0:	2100      	movs	r1, #0
     4c2:	2000      	movs	r0, #0
     4c4:	4b17      	ldr	r3, [pc, #92]	; (524 <CLI_GetImuData+0x98>)
     4c6:	4798      	blx	r3
      lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
     4c8:	4c17      	ldr	r4, [pc, #92]	; (528 <CLI_GetImuData+0x9c>)
     4ca:	0021      	movs	r1, r4
     4cc:	a804      	add	r0, sp, #16
     4ce:	4b17      	ldr	r3, [pc, #92]	; (52c <CLI_GetImuData+0xa0>)
     4d0:	4798      	blx	r3
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
     4d2:	2300      	movs	r3, #0
     4d4:	5ee0      	ldrsh	r0, [r4, r3]
     4d6:	4f16      	ldr	r7, [pc, #88]	; (530 <CLI_GetImuData+0xa4>)
     4d8:	47b8      	blx	r7
      acceleration_mg[0] =
     4da:	4d16      	ldr	r5, [pc, #88]	; (534 <CLI_GetImuData+0xa8>)
     4dc:	6028      	str	r0, [r5, #0]
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
     4de:	2302      	movs	r3, #2
     4e0:	5ee0      	ldrsh	r0, [r4, r3]
     4e2:	47b8      	blx	r7
      acceleration_mg[1] =
     4e4:	6068      	str	r0, [r5, #4]
      lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
     4e6:	2304      	movs	r3, #4
     4e8:	5ee0      	ldrsh	r0, [r4, r3]
     4ea:	47b8      	blx	r7
     4ec:	1c04      	adds	r4, r0, #0
      acceleration_mg[2] =
     4ee:	60a8      	str	r0, [r5, #8]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
     4f0:	4f11      	ldr	r7, [pc, #68]	; (538 <CLI_GetImuData+0xac>)
     4f2:	6828      	ldr	r0, [r5, #0]
     4f4:	47b8      	blx	r7
     4f6:	9003      	str	r0, [sp, #12]
     4f8:	1c20      	adds	r0, r4, #0
     4fa:	47b8      	blx	r7
     4fc:	9001      	str	r0, [sp, #4]
     4fe:	6868      	ldr	r0, [r5, #4]
     500:	47b8      	blx	r7
     502:	9000      	str	r0, [sp, #0]
     504:	9b03      	ldr	r3, [sp, #12]
     506:	4a0d      	ldr	r2, [pc, #52]	; (53c <CLI_GetImuData+0xb0>)
     508:	0031      	movs	r1, r6
     50a:	9802      	ldr	r0, [sp, #8]
     50c:	4c04      	ldr	r4, [pc, #16]	; (520 <CLI_GetImuData+0x94>)
     50e:	47a0      	blx	r4
     510:	e7d2      	b.n	4b8 <CLI_GetImuData+0x2c>
     512:	46c0      	nop			; (mov r8, r8)
     514:	00001049 	.word	0x00001049
     518:	00000b95 	.word	0x00000b95
     51c:	0000943c 	.word	0x0000943c
     520:	00008b99 	.word	0x00008b99
     524:	00008a13 	.word	0x00008a13
     528:	20000238 	.word	0x20000238
     52c:	00000bb9 	.word	0x00000bb9
     530:	00000a79 	.word	0x00000a79
     534:	2000021c 	.word	0x2000021c
     538:	00006ffd 	.word	0x00006ffd
     53c:	00009418 	.word	0x00009418

00000540 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     542:	0006      	movs	r6, r0
     544:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
     546:	4d06      	ldr	r5, [pc, #24]	; (560 <xCliClearTerminalScreen+0x20>)
     548:	231b      	movs	r3, #27
     54a:	4a06      	ldr	r2, [pc, #24]	; (564 <xCliClearTerminalScreen+0x24>)
     54c:	210f      	movs	r1, #15
     54e:	0028      	movs	r0, r5
     550:	4c05      	ldr	r4, [pc, #20]	; (568 <xCliClearTerminalScreen+0x28>)
     552:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
     554:	002a      	movs	r2, r5
     556:	0039      	movs	r1, r7
     558:	0030      	movs	r0, r6
     55a:	47a0      	blx	r4
	return pdFALSE;
}
     55c:	2000      	movs	r0, #0
     55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     560:	20000228 	.word	0x20000228
     564:	000095a8 	.word	0x000095a8
     568:	00008b99 	.word	0x00008b99

0000056c <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
     56c:	b510      	push	{r4, lr}
	snprintf(pcWriteBuffer,xWriteBufferLen, "Students to fill out!");
     56e:	4a02      	ldr	r2, [pc, #8]	; (578 <CLI_NeotrellisSetLed+0xc>)
     570:	4b02      	ldr	r3, [pc, #8]	; (57c <CLI_NeotrellisSetLed+0x10>)
     572:	4798      	blx	r3
	//How do you get parameters? check link in comments!
	//Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: key, R, G, B.
	return pdFALSE;
}
     574:	2000      	movs	r0, #0
     576:	bd10      	pop	{r4, pc}
     578:	00009450 	.word	0x00009450
     57c:	00008b99 	.word	0x00008b99

00000580 <vCommandConsoleTask>:
{
     580:	b5f0      	push	{r4, r5, r6, r7, lr}
     582:	46d6      	mov	lr, sl
     584:	464f      	mov	r7, r9
     586:	b580      	push	{r7, lr}
     588:	b083      	sub	sp, #12
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
     58a:	4866      	ldr	r0, [pc, #408]	; (724 <vCommandConsoleTask+0x1a4>)
     58c:	4c66      	ldr	r4, [pc, #408]	; (728 <vCommandConsoleTask+0x1a8>)
     58e:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
     590:	4866      	ldr	r0, [pc, #408]	; (72c <vCommandConsoleTask+0x1ac>)
     592:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
     594:	4866      	ldr	r0, [pc, #408]	; (730 <vCommandConsoleTask+0x1b0>)
     596:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
     598:	4866      	ldr	r0, [pc, #408]	; (734 <vCommandConsoleTask+0x1b4>)
     59a:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
     59c:	4866      	ldr	r0, [pc, #408]	; (738 <vCommandConsoleTask+0x1b8>)
     59e:	4b67      	ldr	r3, [pc, #412]	; (73c <vCommandConsoleTask+0x1bc>)
     5a0:	4798      	blx	r3
	cliCharReadySemaphore = xSemaphoreCreateBinary();
     5a2:	2203      	movs	r2, #3
     5a4:	2100      	movs	r1, #0
     5a6:	2001      	movs	r0, #1
     5a8:	4b65      	ldr	r3, [pc, #404]	; (740 <vCommandConsoleTask+0x1c0>)
     5aa:	4798      	blx	r3
     5ac:	4b65      	ldr	r3, [pc, #404]	; (744 <vCommandConsoleTask+0x1c4>)
     5ae:	6018      	str	r0, [r3, #0]
	if(cliCharReadySemaphore == NULL)
     5b0:	2800      	cmp	r0, #0
     5b2:	d106      	bne.n	5c2 <vCommandConsoleTask+0x42>
		LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
     5b4:	4964      	ldr	r1, [pc, #400]	; (748 <vCommandConsoleTask+0x1c8>)
     5b6:	3003      	adds	r0, #3
     5b8:	4b64      	ldr	r3, [pc, #400]	; (74c <vCommandConsoleTask+0x1cc>)
     5ba:	4798      	blx	r3
		vTaskSuspend( NULL );
     5bc:	2000      	movs	r0, #0
     5be:	4b64      	ldr	r3, [pc, #400]	; (750 <vCommandConsoleTask+0x1d0>)
     5c0:	4798      	blx	r3
            cInputIndex = 0;
     5c2:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
     5c4:	4b63      	ldr	r3, [pc, #396]	; (754 <vCommandConsoleTask+0x1d4>)
     5c6:	4699      	mov	r9, r3
	xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
     5c8:	4b5e      	ldr	r3, [pc, #376]	; (744 <vCommandConsoleTask+0x1c4>)
     5ca:	469a      	mov	sl, r3
     5cc:	e033      	b.n	636 <vCommandConsoleTask+0xb6>
     5ce:	2101      	movs	r1, #1
     5d0:	4249      	negs	r1, r1
     5d2:	4653      	mov	r3, sl
     5d4:	6818      	ldr	r0, [r3, #0]
     5d6:	4b60      	ldr	r3, [pc, #384]	; (758 <vCommandConsoleTask+0x1d8>)
     5d8:	4798      	blx	r3
	SerialConsoleReadCharacter(character);
     5da:	a801      	add	r0, sp, #4
     5dc:	4b5d      	ldr	r3, [pc, #372]	; (754 <vCommandConsoleTask+0x1d4>)
     5de:	4798      	blx	r3
     5e0:	e02d      	b.n	63e <vCommandConsoleTask+0xbe>
            SerialConsoleWriteString("\r\n");
     5e2:	485e      	ldr	r0, [pc, #376]	; (75c <vCommandConsoleTask+0x1dc>)
     5e4:	4b55      	ldr	r3, [pc, #340]	; (73c <vCommandConsoleTask+0x1bc>)
     5e6:	4798      	blx	r3
			isEscapeCode = false; pcEscapeCodePos = 0;
     5e8:	2400      	movs	r4, #0
     5ea:	4b5d      	ldr	r3, [pc, #372]	; (760 <vCommandConsoleTask+0x1e0>)
     5ec:	701c      	strb	r4, [r3, #0]
     5ee:	4b5d      	ldr	r3, [pc, #372]	; (764 <vCommandConsoleTask+0x1e4>)
     5f0:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
     5f2:	4d5d      	ldr	r5, [pc, #372]	; (768 <vCommandConsoleTask+0x1e8>)
     5f4:	2231      	movs	r2, #49	; 0x31
     5f6:	495d      	ldr	r1, [pc, #372]	; (76c <vCommandConsoleTask+0x1ec>)
     5f8:	0028      	movs	r0, r5
     5fa:	4b5d      	ldr	r3, [pc, #372]	; (770 <vCommandConsoleTask+0x1f0>)
     5fc:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
     5fe:	2331      	movs	r3, #49	; 0x31
     600:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
     602:	4c5c      	ldr	r4, [pc, #368]	; (774 <vCommandConsoleTask+0x1f4>)
     604:	4e59      	ldr	r6, [pc, #356]	; (76c <vCommandConsoleTask+0x1ec>)
     606:	4f5c      	ldr	r7, [pc, #368]	; (778 <vCommandConsoleTask+0x1f8>)
     608:	2264      	movs	r2, #100	; 0x64
     60a:	0021      	movs	r1, r4
     60c:	0030      	movs	r0, r6
     60e:	47b8      	blx	r7
     610:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
     612:	2200      	movs	r2, #0
     614:	2363      	movs	r3, #99	; 0x63
     616:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
     618:	0020      	movs	r0, r4
     61a:	4b48      	ldr	r3, [pc, #288]	; (73c <vCommandConsoleTask+0x1bc>)
     61c:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
     61e:	2d00      	cmp	r5, #0
     620:	d1f2      	bne.n	608 <vCommandConsoleTask+0x88>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
     622:	2232      	movs	r2, #50	; 0x32
     624:	2100      	movs	r1, #0
     626:	4851      	ldr	r0, [pc, #324]	; (76c <vCommandConsoleTask+0x1ec>)
     628:	4c54      	ldr	r4, [pc, #336]	; (77c <vCommandConsoleTask+0x1fc>)
     62a:	47a0      	blx	r4
			memset( pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
     62c:	2264      	movs	r2, #100	; 0x64
     62e:	2100      	movs	r1, #0
     630:	4850      	ldr	r0, [pc, #320]	; (774 <vCommandConsoleTask+0x1f4>)
     632:	47a0      	blx	r4
            cInputIndex = 0;
     634:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
     636:	a801      	add	r0, sp, #4
     638:	47c8      	blx	r9
if(ret == -1)
     63a:	1c43      	adds	r3, r0, #1
     63c:	d0c7      	beq.n	5ce <vCommandConsoleTask+0x4e>
	if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
     63e:	466b      	mov	r3, sp
     640:	791b      	ldrb	r3, [r3, #4]
     642:	2b0a      	cmp	r3, #10
     644:	d0cd      	beq.n	5e2 <vCommandConsoleTask+0x62>
     646:	2b0d      	cmp	r3, #13
     648:	d0cb      	beq.n	5e2 <vCommandConsoleTask+0x62>
			if (true == isEscapeCode) {
     64a:	4a45      	ldr	r2, [pc, #276]	; (760 <vCommandConsoleTask+0x1e0>)
     64c:	7812      	ldrb	r2, [r2, #0]
     64e:	2a00      	cmp	r2, #0
     650:	d03f      	beq.n	6d2 <vCommandConsoleTask+0x152>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
     652:	4a44      	ldr	r2, [pc, #272]	; (764 <vCommandConsoleTask+0x1e4>)
     654:	7812      	ldrb	r2, [r2, #0]
     656:	2a03      	cmp	r2, #3
     658:	d813      	bhi.n	682 <vCommandConsoleTask+0x102>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
     65a:	1c51      	adds	r1, r2, #1
     65c:	b2c9      	uxtb	r1, r1
     65e:	4841      	ldr	r0, [pc, #260]	; (764 <vCommandConsoleTask+0x1e4>)
     660:	7001      	strb	r1, [r0, #0]
     662:	4847      	ldr	r0, [pc, #284]	; (780 <vCommandConsoleTask+0x200>)
     664:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
     666:	2901      	cmp	r1, #1
     668:	d9e5      	bls.n	636 <vCommandConsoleTask+0xb6>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
     66a:	4946      	ldr	r1, [pc, #280]	; (784 <vCommandConsoleTask+0x204>)
     66c:	4844      	ldr	r0, [pc, #272]	; (780 <vCommandConsoleTask+0x200>)
     66e:	4b46      	ldr	r3, [pc, #280]	; (788 <vCommandConsoleTask+0x208>)
     670:	4798      	blx	r3
     672:	2800      	cmp	r0, #0
     674:	d10b      	bne.n	68e <vCommandConsoleTask+0x10e>
					isEscapeCode = false; pcEscapeCodePos = 0;
     676:	2300      	movs	r3, #0
     678:	4a39      	ldr	r2, [pc, #228]	; (760 <vCommandConsoleTask+0x1e0>)
     67a:	7013      	strb	r3, [r2, #0]
     67c:	4a39      	ldr	r2, [pc, #228]	; (764 <vCommandConsoleTask+0x1e4>)
     67e:	7013      	strb	r3, [r2, #0]
     680:	e7d9      	b.n	636 <vCommandConsoleTask+0xb6>
					isEscapeCode = false; pcEscapeCodePos = 0;
     682:	2300      	movs	r3, #0
     684:	4a36      	ldr	r2, [pc, #216]	; (760 <vCommandConsoleTask+0x1e0>)
     686:	7013      	strb	r3, [r2, #0]
     688:	4a36      	ldr	r2, [pc, #216]	; (764 <vCommandConsoleTask+0x1e4>)
     68a:	7013      	strb	r3, [r2, #0]
     68c:	e7d3      	b.n	636 <vCommandConsoleTask+0xb6>
                            sprintf(pcInputString, "%c[2K\r>", 27);
     68e:	4c37      	ldr	r4, [pc, #220]	; (76c <vCommandConsoleTask+0x1ec>)
     690:	221b      	movs	r2, #27
     692:	493e      	ldr	r1, [pc, #248]	; (78c <vCommandConsoleTask+0x20c>)
     694:	0020      	movs	r0, r4
     696:	4b3e      	ldr	r3, [pc, #248]	; (790 <vCommandConsoleTask+0x210>)
     698:	4798      	blx	r3
				            SerialConsoleWriteString((char*)pcInputString);
     69a:	0020      	movs	r0, r4
     69c:	4b27      	ldr	r3, [pc, #156]	; (73c <vCommandConsoleTask+0x1bc>)
     69e:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
     6a0:	2232      	movs	r2, #50	; 0x32
     6a2:	2100      	movs	r1, #0
     6a4:	0020      	movs	r0, r4
     6a6:	4b35      	ldr	r3, [pc, #212]	; (77c <vCommandConsoleTask+0x1fc>)
     6a8:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
     6aa:	2231      	movs	r2, #49	; 0x31
     6ac:	492e      	ldr	r1, [pc, #184]	; (768 <vCommandConsoleTask+0x1e8>)
     6ae:	0020      	movs	r0, r4
     6b0:	4b2f      	ldr	r3, [pc, #188]	; (770 <vCommandConsoleTask+0x1f0>)
     6b2:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
     6b4:	0020      	movs	r0, r4
     6b6:	4b37      	ldr	r3, [pc, #220]	; (794 <vCommandConsoleTask+0x214>)
     6b8:	4798      	blx	r3
     6ba:	2431      	movs	r4, #49	; 0x31
     6bc:	2830      	cmp	r0, #48	; 0x30
     6be:	d803      	bhi.n	6c8 <vCommandConsoleTask+0x148>
     6c0:	4829      	ldr	r0, [pc, #164]	; (768 <vCommandConsoleTask+0x1e8>)
     6c2:	4b34      	ldr	r3, [pc, #208]	; (794 <vCommandConsoleTask+0x214>)
     6c4:	4798      	blx	r3
     6c6:	0004      	movs	r4, r0
     6c8:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
     6ca:	4828      	ldr	r0, [pc, #160]	; (76c <vCommandConsoleTask+0x1ec>)
     6cc:	4b1b      	ldr	r3, [pc, #108]	; (73c <vCommandConsoleTask+0x1bc>)
     6ce:	4798      	blx	r3
     6d0:	e7d1      	b.n	676 <vCommandConsoleTask+0xf6>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
     6d2:	2b08      	cmp	r3, #8
     6d4:	d010      	beq.n	6f8 <vCommandConsoleTask+0x178>
     6d6:	2b7f      	cmp	r3, #127	; 0x7f
     6d8:	d00e      	beq.n	6f8 <vCommandConsoleTask+0x178>
			else if( cRxedChar[0] == ASCII_ESC) {
     6da:	2b1b      	cmp	r3, #27
     6dc:	d01a      	beq.n	714 <vCommandConsoleTask+0x194>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
     6de:	2c31      	cmp	r4, #49	; 0x31
     6e0:	d803      	bhi.n	6ea <vCommandConsoleTask+0x16a>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
     6e2:	4a22      	ldr	r2, [pc, #136]	; (76c <vCommandConsoleTask+0x1ec>)
     6e4:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
     6e6:	3401      	adds	r4, #1
     6e8:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
     6ea:	2300      	movs	r3, #0
     6ec:	466a      	mov	r2, sp
     6ee:	7153      	strb	r3, [r2, #5]
					SerialConsoleWriteString(&cRxedChar[0]);
     6f0:	a801      	add	r0, sp, #4
     6f2:	4b12      	ldr	r3, [pc, #72]	; (73c <vCommandConsoleTask+0x1bc>)
     6f4:	4798      	blx	r3
     6f6:	e79e      	b.n	636 <vCommandConsoleTask+0xb6>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
     6f8:	4b27      	ldr	r3, [pc, #156]	; (798 <vCommandConsoleTask+0x218>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
     6fe:	4668      	mov	r0, sp
     700:	4b0e      	ldr	r3, [pc, #56]	; (73c <vCommandConsoleTask+0x1bc>)
     702:	4798      	blx	r3
                if( cInputIndex > 0 )
     704:	2c00      	cmp	r4, #0
     706:	d096      	beq.n	636 <vCommandConsoleTask+0xb6>
                    cInputIndex--;
     708:	3c01      	subs	r4, #1
     70a:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
     70c:	2200      	movs	r2, #0
     70e:	4b17      	ldr	r3, [pc, #92]	; (76c <vCommandConsoleTask+0x1ec>)
     710:	551a      	strb	r2, [r3, r4]
            {
     712:	e790      	b.n	636 <vCommandConsoleTask+0xb6>
				isEscapeCode = true; //Next characters will be code arguments
     714:	2201      	movs	r2, #1
     716:	4b12      	ldr	r3, [pc, #72]	; (760 <vCommandConsoleTask+0x1e0>)
     718:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
     71a:	2200      	movs	r2, #0
     71c:	4b11      	ldr	r3, [pc, #68]	; (764 <vCommandConsoleTask+0x1e4>)
     71e:	701a      	strb	r2, [r3, #0]
     720:	e789      	b.n	636 <vCommandConsoleTask+0xb6>
     722:	46c0      	nop			; (mov r8, r8)
     724:	000095b0 	.word	0x000095b0
     728:	000017ed 	.word	0x000017ed
     72c:	00009598 	.word	0x00009598
     730:	000095d0 	.word	0x000095d0
     734:	000095c0 	.word	0x000095c0
     738:	00009528 	.word	0x00009528
     73c:	0000542d 	.word	0x0000542d
     740:	00003049 	.word	0x00003049
     744:	20003850 	.word	0x20003850
     748:	0000956c 	.word	0x0000956c
     74c:	000054dd 	.word	0x000054dd
     750:	000047a9 	.word	0x000047a9
     754:	000054b1 	.word	0x000054b1
     758:	00003b2d 	.word	0x00003b2d
     75c:	0000a72c 	.word	0x0000a72c
     760:	2000023e 	.word	0x2000023e
     764:	2000023f 	.word	0x2000023f
     768:	20000278 	.word	0x20000278
     76c:	20000244 	.word	0x20000244
     770:	00008cad 	.word	0x00008cad
     774:	200002ac 	.word	0x200002ac
     778:	00001831 	.word	0x00001831
     77c:	00008a13 	.word	0x00008a13
     780:	20000240 	.word	0x20000240
     784:	0000958c 	.word	0x0000958c
     788:	00008c41 	.word	0x00008c41
     78c:	00009590 	.word	0x00009590
     790:	00008bfd 	.word	0x00008bfd
     794:	00008c7d 	.word	0x00008c7d
     798:	00009414 	.word	0x00009414

0000079c <CliCharReadySemaphoreGiveFromISR>:
{
     79c:	b510      	push	{r4, lr}
	xHigherPriorityTaskWoken = pdFALSE;
     79e:	4c08      	ldr	r4, [pc, #32]	; (7c0 <CliCharReadySemaphoreGiveFromISR+0x24>)
     7a0:	2300      	movs	r3, #0
     7a2:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR( cliCharReadySemaphore, &xHigherPriorityTaskWoken );
     7a4:	4b07      	ldr	r3, [pc, #28]	; (7c4 <CliCharReadySemaphoreGiveFromISR+0x28>)
     7a6:	6818      	ldr	r0, [r3, #0]
     7a8:	0021      	movs	r1, r4
     7aa:	4b07      	ldr	r3, [pc, #28]	; (7c8 <CliCharReadySemaphoreGiveFromISR+0x2c>)
     7ac:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     7ae:	6823      	ldr	r3, [r4, #0]
     7b0:	2b00      	cmp	r3, #0
     7b2:	d003      	beq.n	7bc <CliCharReadySemaphoreGiveFromISR+0x20>
     7b4:	2280      	movs	r2, #128	; 0x80
     7b6:	0552      	lsls	r2, r2, #21
     7b8:	4b04      	ldr	r3, [pc, #16]	; (7cc <CliCharReadySemaphoreGiveFromISR+0x30>)
     7ba:	601a      	str	r2, [r3, #0]
}
     7bc:	bd10      	pop	{r4, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	20000310 	.word	0x20000310
     7c4:	20003850 	.word	0x20003850
     7c8:	00003811 	.word	0x00003811
     7cc:	e000ed04 	.word	0xe000ed04

000007d0 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
     7d0:	b510      	push	{r4, lr}
     7d2:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     7d4:	2400      	movs	r4, #0
     7d6:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     7d8:	4b07      	ldr	r3, [pc, #28]	; (7f8 <I2cSensorsTxComplete+0x28>)
     7da:	6818      	ldr	r0, [r3, #0]
     7dc:	a901      	add	r1, sp, #4
     7de:	4b07      	ldr	r3, [pc, #28]	; (7fc <I2cSensorsTxComplete+0x2c>)
     7e0:	4798      	blx	r3
	sensorTransmitError = false;
     7e2:	4b07      	ldr	r3, [pc, #28]	; (800 <I2cSensorsTxComplete+0x30>)
     7e4:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     7e6:	9b01      	ldr	r3, [sp, #4]
     7e8:	2b00      	cmp	r3, #0
     7ea:	d003      	beq.n	7f4 <I2cSensorsTxComplete+0x24>
     7ec:	2280      	movs	r2, #128	; 0x80
     7ee:	0552      	lsls	r2, r2, #21
     7f0:	4b04      	ldr	r3, [pc, #16]	; (804 <I2cSensorsTxComplete+0x34>)
     7f2:	601a      	str	r2, [r3, #0]
}
     7f4:	b002      	add	sp, #8
     7f6:	bd10      	pop	{r4, pc}
     7f8:	20003880 	.word	0x20003880
     7fc:	00003811 	.word	0x00003811
     800:	20000314 	.word	0x20000314
     804:	e000ed04 	.word	0xe000ed04

00000808 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
     808:	b510      	push	{r4, lr}
     80a:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     80c:	2400      	movs	r4, #0
     80e:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     810:	4b07      	ldr	r3, [pc, #28]	; (830 <I2cSensorsRxComplete+0x28>)
     812:	6818      	ldr	r0, [r3, #0]
     814:	a901      	add	r1, sp, #4
     816:	4b07      	ldr	r3, [pc, #28]	; (834 <I2cSensorsRxComplete+0x2c>)
     818:	4798      	blx	r3
	sensorTransmitError = false;
     81a:	4b07      	ldr	r3, [pc, #28]	; (838 <I2cSensorsRxComplete+0x30>)
     81c:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     81e:	9b01      	ldr	r3, [sp, #4]
     820:	2b00      	cmp	r3, #0
     822:	d003      	beq.n	82c <I2cSensorsRxComplete+0x24>
     824:	2280      	movs	r2, #128	; 0x80
     826:	0552      	lsls	r2, r2, #21
     828:	4b04      	ldr	r3, [pc, #16]	; (83c <I2cSensorsRxComplete+0x34>)
     82a:	601a      	str	r2, [r3, #0]
}
     82c:	b002      	add	sp, #8
     82e:	bd10      	pop	{r4, pc}
     830:	20003880 	.word	0x20003880
     834:	00003811 	.word	0x00003811
     838:	20000314 	.word	0x20000314
     83c:	e000ed04 	.word	0xe000ed04

00000840 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
     840:	b510      	push	{r4, lr}
     842:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
     844:	2400      	movs	r4, #0
     846:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
     848:	4b07      	ldr	r3, [pc, #28]	; (868 <I2cSensorsError+0x28>)
     84a:	6818      	ldr	r0, [r3, #0]
     84c:	a901      	add	r1, sp, #4
     84e:	4b07      	ldr	r3, [pc, #28]	; (86c <I2cSensorsError+0x2c>)
     850:	4798      	blx	r3
	sensorTransmitError = false;
     852:	4b07      	ldr	r3, [pc, #28]	; (870 <I2cSensorsError+0x30>)
     854:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
     856:	9b01      	ldr	r3, [sp, #4]
     858:	2b00      	cmp	r3, #0
     85a:	d003      	beq.n	864 <I2cSensorsError+0x24>
     85c:	2280      	movs	r2, #128	; 0x80
     85e:	0552      	lsls	r2, r2, #21
     860:	4b04      	ldr	r3, [pc, #16]	; (874 <I2cSensorsError+0x34>)
     862:	601a      	str	r2, [r3, #0]
}
     864:	b002      	add	sp, #8
     866:	bd10      	pop	{r4, pc}
     868:	20003880 	.word	0x20003880
     86c:	00003811 	.word	0x00003811
     870:	20000314 	.word	0x20000314
     874:	e000ed04 	.word	0xe000ed04

00000878 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
     878:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
     87a:	4c0c      	ldr	r4, [pc, #48]	; (8ac <I2cDriverRegisterSensorBusCallbacks+0x34>)
     87c:	2200      	movs	r2, #0
     87e:	490c      	ldr	r1, [pc, #48]	; (8b0 <I2cDriverRegisterSensorBusCallbacks+0x38>)
     880:	0020      	movs	r0, r4
     882:	4d0c      	ldr	r5, [pc, #48]	; (8b4 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
     884:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     886:	7e63      	ldrb	r3, [r4, #25]
     888:	2201      	movs	r2, #1
     88a:	4313      	orrs	r3, r2
     88c:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
     88e:	490a      	ldr	r1, [pc, #40]	; (8b8 <I2cDriverRegisterSensorBusCallbacks+0x40>)
     890:	0020      	movs	r0, r4
     892:	47a8      	blx	r5
     894:	7e63      	ldrb	r3, [r4, #25]
     896:	2202      	movs	r2, #2
     898:	4313      	orrs	r3, r2
     89a:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
     89c:	4907      	ldr	r1, [pc, #28]	; (8bc <I2cDriverRegisterSensorBusCallbacks+0x44>)
     89e:	0020      	movs	r0, r4
     8a0:	47a8      	blx	r5
     8a2:	7e63      	ldrb	r3, [r4, #25]
     8a4:	2204      	movs	r2, #4
     8a6:	4313      	orrs	r3, r2
     8a8:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
     8aa:	bd70      	pop	{r4, r5, r6, pc}
     8ac:	20003858 	.word	0x20003858
     8b0:	000007d1 	.word	0x000007d1
     8b4:	0000024d 	.word	0x0000024d
     8b8:	00000809 	.word	0x00000809
     8bc:	00000841 	.word	0x00000841

000008c0 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
     8c0:	b570      	push	{r4, r5, r6, lr}
     8c2:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     8c4:	ab01      	add	r3, sp, #4
     8c6:	2264      	movs	r2, #100	; 0x64
     8c8:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     8ca:	4a33      	ldr	r2, [pc, #204]	; (998 <I2cInitializeDriver+0xd8>)
     8cc:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     8ce:	2200      	movs	r2, #0
     8d0:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     8d2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     8d4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     8d6:	2180      	movs	r1, #128	; 0x80
     8d8:	0389      	lsls	r1, r1, #14
     8da:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     8dc:	2101      	movs	r1, #1
     8de:	4249      	negs	r1, r1
     8e0:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     8e2:	3125      	adds	r1, #37	; 0x25
     8e4:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     8e6:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     8e8:	3108      	adds	r1, #8
     8ea:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     8ec:	3101      	adds	r1, #1
     8ee:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
     8f0:	3101      	adds	r1, #1
     8f2:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     8f4:	32d7      	adds	r2, #215	; 0xd7
     8f6:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
     8f8:	4a28      	ldr	r2, [pc, #160]	; (99c <I2cInitializeDriver+0xdc>)
     8fa:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     8fc:	4a28      	ldr	r2, [pc, #160]	; (9a0 <I2cInitializeDriver+0xe0>)
     8fe:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
     900:	22fa      	movs	r2, #250	; 0xfa
     902:	0092      	lsls	r2, r2, #2
     904:	82da      	strh	r2, [r3, #22]
     906:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
     908:	4d26      	ldr	r5, [pc, #152]	; (9a4 <I2cInitializeDriver+0xe4>)
     90a:	4e27      	ldr	r6, [pc, #156]	; (9a8 <I2cInitializeDriver+0xe8>)
     90c:	aa01      	add	r2, sp, #4
     90e:	4927      	ldr	r1, [pc, #156]	; (9ac <I2cInitializeDriver+0xec>)
     910:	0028      	movs	r0, r5
     912:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
     914:	2800      	cmp	r0, #0
     916:	d006      	beq.n	926 <I2cInitializeDriver+0x66>
			i2c_master_reset(&i2cSensorBusInstance);
     918:	4822      	ldr	r0, [pc, #136]	; (9a4 <I2cInitializeDriver+0xe4>)
     91a:	4b25      	ldr	r3, [pc, #148]	; (9b0 <I2cInitializeDriver+0xf0>)
     91c:	4798      	blx	r3
     91e:	3c01      	subs	r4, #1
     920:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
     922:	2c00      	cmp	r4, #0
     924:	d1f2      	bne.n	90c <I2cInitializeDriver+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     926:	4b1f      	ldr	r3, [pc, #124]	; (9a4 <I2cInitializeDriver+0xe4>)
     928:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     92a:	2207      	movs	r2, #7
     92c:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     92e:	421a      	tst	r2, r3
     930:	d1fc      	bne.n	92c <I2cInitializeDriver+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     932:	6823      	ldr	r3, [r4, #0]
     934:	2202      	movs	r2, #2
     936:	4313      	orrs	r3, r2
     938:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     93a:	4d1a      	ldr	r5, [pc, #104]	; (9a4 <I2cInitializeDriver+0xe4>)
     93c:	6828      	ldr	r0, [r5, #0]
     93e:	4b1d      	ldr	r3, [pc, #116]	; (9b4 <I2cInitializeDriver+0xf4>)
     940:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     942:	231f      	movs	r3, #31
     944:	4018      	ands	r0, r3
     946:	3b1e      	subs	r3, #30
     948:	4083      	lsls	r3, r0
     94a:	4a1b      	ldr	r2, [pc, #108]	; (9b8 <I2cInitializeDriver+0xf8>)
     94c:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     94e:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     950:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     952:	2110      	movs	r1, #16
     954:	8b62      	ldrh	r2, [r4, #26]
     956:	420a      	tst	r2, r1
     958:	d104      	bne.n	964 <I2cInitializeDriver+0xa4>
		timeout_counter++;
     95a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     95c:	4283      	cmp	r3, r0
     95e:	d3f9      	bcc.n	954 <I2cInitializeDriver+0x94>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     960:	2310      	movs	r3, #16
     962:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
     964:	4b15      	ldr	r3, [pc, #84]	; (9bc <I2cInitializeDriver+0xfc>)
     966:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
     968:	2001      	movs	r0, #1
     96a:	4b15      	ldr	r3, [pc, #84]	; (9c0 <I2cInitializeDriver+0x100>)
     96c:	4798      	blx	r3
     96e:	4c15      	ldr	r4, [pc, #84]	; (9c4 <I2cInitializeDriver+0x104>)
     970:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
     972:	2203      	movs	r2, #3
     974:	2100      	movs	r1, #0
     976:	2001      	movs	r0, #1
     978:	4b13      	ldr	r3, [pc, #76]	; (9c8 <I2cInitializeDriver+0x108>)
     97a:	4798      	blx	r3
     97c:	4b13      	ldr	r3, [pc, #76]	; (9cc <I2cInitializeDriver+0x10c>)
     97e:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
     980:	6823      	ldr	r3, [r4, #0]
     982:	2b00      	cmp	r3, #0
     984:	d004      	beq.n	990 <I2cInitializeDriver+0xd0>
	error = I2cDriverConfigureSensorBus();
     986:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
     988:	2800      	cmp	r0, #0
     98a:	d102      	bne.n	992 <I2cInitializeDriver+0xd2>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
     98c:	3306      	adds	r3, #6
     98e:	e000      	b.n	992 <I2cInitializeDriver+0xd2>
     990:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
     992:	0018      	movs	r0, r3
     994:	b00e      	add	sp, #56	; 0x38
     996:	bd70      	pop	{r4, r5, r6, pc}
     998:	00000d48 	.word	0x00000d48
     99c:	00080002 	.word	0x00080002
     9a0:	00090002 	.word	0x00090002
     9a4:	20003858 	.word	0x20003858
     9a8:	00001365 	.word	0x00001365
     9ac:	42000800 	.word	0x42000800
     9b0:	0000165d 	.word	0x0000165d
     9b4:	00005ab9 	.word	0x00005ab9
     9b8:	e000e100 	.word	0xe000e100
     9bc:	00000879 	.word	0x00000879
     9c0:	000034ad 	.word	0x000034ad
     9c4:	20003854 	.word	0x20003854
     9c8:	00003049 	.word	0x00003049
     9cc:	20003880 	.word	0x20003880

000009d0 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
     9d0:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
     9d2:	2800      	cmp	r0, #0
     9d4:	d012      	beq.n	9fc <I2cWriteData+0x2c>
     9d6:	6843      	ldr	r3, [r0, #4]
     9d8:	2b00      	cmp	r3, #0
     9da:	d012      	beq.n	a02 <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
     9dc:	490a      	ldr	r1, [pc, #40]	; (a08 <I2cWriteData+0x38>)
     9de:	7802      	ldrb	r2, [r0, #0]
     9e0:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
     9e2:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
     9e4:	89c3      	ldrh	r3, [r0, #14]
     9e6:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
     9e8:	4808      	ldr	r0, [pc, #32]	; (a0c <I2cWriteData+0x3c>)
     9ea:	4b09      	ldr	r3, [pc, #36]	; (a10 <I2cWriteData+0x40>)
     9ec:	4798      	blx	r3
	int32_t error = ERROR_NONE;
     9ee:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
     9f0:	2800      	cmp	r0, #0
     9f2:	d101      	bne.n	9f8 <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
     9f4:	0018      	movs	r0, r3
     9f6:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
     9f8:	3b06      	subs	r3, #6
     9fa:	e7fb      	b.n	9f4 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
     9fc:	2308      	movs	r3, #8
     9fe:	425b      	negs	r3, r3
     a00:	e7f8      	b.n	9f4 <I2cWriteData+0x24>
     a02:	2308      	movs	r3, #8
     a04:	425b      	negs	r3, r3
     a06:	e7f5      	b.n	9f4 <I2cWriteData+0x24>
     a08:	20003884 	.word	0x20003884
     a0c:	20003858 	.word	0x20003858
     a10:	00000265 	.word	0x00000265

00000a14 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
     a14:	b570      	push	{r4, r5, r6, lr}
     a16:	000c      	movs	r4, r1
	*handle = sensorI2cSemaphoreHandle;
     a18:	4b0a      	ldr	r3, [pc, #40]	; (a44 <I2cWriteDataWait+0x30>)
     a1a:	681d      	ldr	r5, [r3, #0]
error = 0;I2cGetSemaphoreHandle(&semHandle);
if(ERROR_NONE != error) goto exit;

//---2. Initiate sending data

error = I2cWriteData(data);
     a1c:	4b0a      	ldr	r3, [pc, #40]	; (a48 <I2cWriteDataWait+0x34>)
     a1e:	4798      	blx	r3
if (ERROR_NONE != error){
     a20:	2800      	cmp	r0, #0
     a22:	d001      	beq.n	a28 <I2cWriteDataWait+0x14>
exitError0:
error = I2cFreeMutex();

return error;

}
     a24:	2000      	movs	r0, #0
     a26:	bd70      	pop	{r4, r5, r6, pc}
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
     a28:	0021      	movs	r1, r4
     a2a:	0028      	movs	r0, r5
     a2c:	4b07      	ldr	r3, [pc, #28]	; (a4c <I2cWriteDataWait+0x38>)
     a2e:	4798      	blx	r3
     a30:	2801      	cmp	r0, #1
     a32:	d1f7      	bne.n	a24 <I2cWriteDataWait+0x10>
	 return sensorTransmitError;
     a34:	4b06      	ldr	r3, [pc, #24]	; (a50 <I2cWriteDataWait+0x3c>)
	if(I2cGetTaskErrorStatus()){
     a36:	781b      	ldrb	r3, [r3, #0]
     a38:	2b00      	cmp	r3, #0
     a3a:	d0f3      	beq.n	a24 <I2cWriteDataWait+0x10>
	sensorTransmitError = value;
     a3c:	2200      	movs	r2, #0
     a3e:	4b04      	ldr	r3, [pc, #16]	; (a50 <I2cWriteDataWait+0x3c>)
     a40:	701a      	strb	r2, [r3, #0]
     a42:	e7ef      	b.n	a24 <I2cWriteDataWait+0x10>
     a44:	20003880 	.word	0x20003880
     a48:	000009d1 	.word	0x000009d1
     a4c:	00003b2d 	.word	0x00003b2d
     a50:	20000314 	.word	0x20000314

00000a54 <I2cReadDataWait>:
	error = I2cFreeMutex();

	return error;

	
}
     a54:	2000      	movs	r0, #0
     a56:	4770      	bx	lr

00000a58 <platform_write>:
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
return 0;

}
     a58:	2000      	movs	r0, #0
     a5a:	4770      	bx	lr

00000a5c <platform_read>:
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
return 0;


}
     a5c:	2000      	movs	r0, #0
     a5e:	4770      	bx	lr

00000a60 <lsm6dso_read_reg>:
{
     a60:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
     a62:	6885      	ldr	r5, [r0, #8]
     a64:	6844      	ldr	r4, [r0, #4]
     a66:	0028      	movs	r0, r5
     a68:	47a0      	blx	r4
}
     a6a:	bd70      	pop	{r4, r5, r6, pc}

00000a6c <lsm6dso_write_reg>:
{
     a6c:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
     a6e:	6885      	ldr	r5, [r0, #8]
     a70:	6804      	ldr	r4, [r0, #0]
     a72:	0028      	movs	r0, r5
     a74:	47a0      	blx	r4
}
     a76:	bd70      	pop	{r4, r5, r6, pc}

00000a78 <lsm6dso_from_fs2_to_mg>:
{
     a78:	b510      	push	{r4, lr}
  return ((float_t)lsb) * 0.061f;
     a7a:	4b03      	ldr	r3, [pc, #12]	; (a88 <lsm6dso_from_fs2_to_mg+0x10>)
     a7c:	4798      	blx	r3
     a7e:	4903      	ldr	r1, [pc, #12]	; (a8c <lsm6dso_from_fs2_to_mg+0x14>)
     a80:	4b03      	ldr	r3, [pc, #12]	; (a90 <lsm6dso_from_fs2_to_mg+0x18>)
     a82:	4798      	blx	r3
}
     a84:	bd10      	pop	{r4, pc}
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	0000703d 	.word	0x0000703d
     a8c:	3d79db23 	.word	0x3d79db23
     a90:	00006dbd 	.word	0x00006dbd

00000a94 <lsm6dso_xl_full_scale_set>:
{
     a94:	b570      	push	{r4, r5, r6, lr}
     a96:	b082      	sub	sp, #8
     a98:	0004      	movs	r4, r0
     a9a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     a9c:	2301      	movs	r3, #1
     a9e:	aa01      	add	r2, sp, #4
     aa0:	2110      	movs	r1, #16
     aa2:	4e0a      	ldr	r6, [pc, #40]	; (acc <lsm6dso_xl_full_scale_set+0x38>)
     aa4:	47b0      	blx	r6
  if (ret == 0)
     aa6:	2800      	cmp	r0, #0
     aa8:	d001      	beq.n	aae <lsm6dso_xl_full_scale_set+0x1a>
}
     aaa:	b002      	add	sp, #8
     aac:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_xl = (uint8_t) val;
     aae:	aa01      	add	r2, sp, #4
     ab0:	2103      	movs	r1, #3
     ab2:	4029      	ands	r1, r5
     ab4:	008b      	lsls	r3, r1, #2
     ab6:	7811      	ldrb	r1, [r2, #0]
     ab8:	300c      	adds	r0, #12
     aba:	4381      	bics	r1, r0
     abc:	4319      	orrs	r1, r3
     abe:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     ac0:	2301      	movs	r3, #1
     ac2:	2110      	movs	r1, #16
     ac4:	0020      	movs	r0, r4
     ac6:	4c02      	ldr	r4, [pc, #8]	; (ad0 <lsm6dso_xl_full_scale_set+0x3c>)
     ac8:	47a0      	blx	r4
  return ret;
     aca:	e7ee      	b.n	aaa <lsm6dso_xl_full_scale_set+0x16>
     acc:	00000a61 	.word	0x00000a61
     ad0:	00000a6d 	.word	0x00000a6d

00000ad4 <lsm6dso_gy_full_scale_set>:
{
     ad4:	b570      	push	{r4, r5, r6, lr}
     ad6:	b082      	sub	sp, #8
     ad8:	0004      	movs	r4, r0
     ada:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
     adc:	2301      	movs	r3, #1
     ade:	aa01      	add	r2, sp, #4
     ae0:	2111      	movs	r1, #17
     ae2:	4e0a      	ldr	r6, [pc, #40]	; (b0c <lsm6dso_gy_full_scale_set+0x38>)
     ae4:	47b0      	blx	r6
  if (ret == 0)
     ae6:	2800      	cmp	r0, #0
     ae8:	d001      	beq.n	aee <lsm6dso_gy_full_scale_set+0x1a>
}
     aea:	b002      	add	sp, #8
     aec:	bd70      	pop	{r4, r5, r6, pc}
    reg.fs_g = (uint8_t) val;
     aee:	aa01      	add	r2, sp, #4
     af0:	2107      	movs	r1, #7
     af2:	4029      	ands	r1, r5
     af4:	004b      	lsls	r3, r1, #1
     af6:	7811      	ldrb	r1, [r2, #0]
     af8:	300e      	adds	r0, #14
     afa:	4381      	bics	r1, r0
     afc:	4319      	orrs	r1, r3
     afe:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
     b00:	2301      	movs	r3, #1
     b02:	2111      	movs	r1, #17
     b04:	0020      	movs	r0, r4
     b06:	4c02      	ldr	r4, [pc, #8]	; (b10 <lsm6dso_gy_full_scale_set+0x3c>)
     b08:	47a0      	blx	r4
  return ret;
     b0a:	e7ee      	b.n	aea <lsm6dso_gy_full_scale_set+0x16>
     b0c:	00000a61 	.word	0x00000a61
     b10:	00000a6d 	.word	0x00000a6d

00000b14 <lsm6dso_block_data_update_set>:
{
     b14:	b570      	push	{r4, r5, r6, lr}
     b16:	b082      	sub	sp, #8
     b18:	0004      	movs	r4, r0
     b1a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     b1c:	2301      	movs	r3, #1
     b1e:	aa01      	add	r2, sp, #4
     b20:	2112      	movs	r1, #18
     b22:	4e0a      	ldr	r6, [pc, #40]	; (b4c <lsm6dso_block_data_update_set+0x38>)
     b24:	47b0      	blx	r6
  if (ret == 0)
     b26:	2800      	cmp	r0, #0
     b28:	d001      	beq.n	b2e <lsm6dso_block_data_update_set+0x1a>
}
     b2a:	b002      	add	sp, #8
     b2c:	bd70      	pop	{r4, r5, r6, pc}
    reg.bdu = val;
     b2e:	aa01      	add	r2, sp, #4
     b30:	2101      	movs	r1, #1
     b32:	4029      	ands	r1, r5
     b34:	018b      	lsls	r3, r1, #6
     b36:	7811      	ldrb	r1, [r2, #0]
     b38:	3040      	adds	r0, #64	; 0x40
     b3a:	4381      	bics	r1, r0
     b3c:	4319      	orrs	r1, r3
     b3e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     b40:	2301      	movs	r3, #1
     b42:	2112      	movs	r1, #18
     b44:	0020      	movs	r0, r4
     b46:	4c02      	ldr	r4, [pc, #8]	; (b50 <lsm6dso_block_data_update_set+0x3c>)
     b48:	47a0      	blx	r4
  return ret;
     b4a:	e7ee      	b.n	b2a <lsm6dso_block_data_update_set+0x16>
     b4c:	00000a61 	.word	0x00000a61
     b50:	00000a6d 	.word	0x00000a6d

00000b54 <lsm6dso_xl_offset_weight_set>:
{
     b54:	b570      	push	{r4, r5, r6, lr}
     b56:	b082      	sub	sp, #8
     b58:	0004      	movs	r4, r0
     b5a:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
     b5c:	2301      	movs	r3, #1
     b5e:	aa01      	add	r2, sp, #4
     b60:	2115      	movs	r1, #21
     b62:	4e0a      	ldr	r6, [pc, #40]	; (b8c <lsm6dso_xl_offset_weight_set+0x38>)
     b64:	47b0      	blx	r6
  if (ret == 0)
     b66:	2800      	cmp	r0, #0
     b68:	d001      	beq.n	b6e <lsm6dso_xl_offset_weight_set+0x1a>
}
     b6a:	b002      	add	sp, #8
     b6c:	bd70      	pop	{r4, r5, r6, pc}
    reg.usr_off_w = (uint8_t)val;
     b6e:	aa01      	add	r2, sp, #4
     b70:	2101      	movs	r1, #1
     b72:	4029      	ands	r1, r5
     b74:	00cb      	lsls	r3, r1, #3
     b76:	7811      	ldrb	r1, [r2, #0]
     b78:	3008      	adds	r0, #8
     b7a:	4381      	bics	r1, r0
     b7c:	4319      	orrs	r1, r3
     b7e:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
     b80:	2301      	movs	r3, #1
     b82:	2115      	movs	r1, #21
     b84:	0020      	movs	r0, r4
     b86:	4c02      	ldr	r4, [pc, #8]	; (b90 <lsm6dso_xl_offset_weight_set+0x3c>)
     b88:	47a0      	blx	r4
  return ret;
     b8a:	e7ee      	b.n	b6a <lsm6dso_xl_offset_weight_set+0x16>
     b8c:	00000a61 	.word	0x00000a61
     b90:	00000a6d 	.word	0x00000a6d

00000b94 <lsm6dso_xl_flag_data_ready_get>:
{
     b94:	b570      	push	{r4, r5, r6, lr}
     b96:	b082      	sub	sp, #8
     b98:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
     b9a:	ac01      	add	r4, sp, #4
     b9c:	2301      	movs	r3, #1
     b9e:	0022      	movs	r2, r4
     ba0:	211e      	movs	r1, #30
     ba2:	4e04      	ldr	r6, [pc, #16]	; (bb4 <lsm6dso_xl_flag_data_ready_get+0x20>)
     ba4:	47b0      	blx	r6
  *val = reg.xlda;
     ba6:	7823      	ldrb	r3, [r4, #0]
     ba8:	07db      	lsls	r3, r3, #31
     baa:	0fdb      	lsrs	r3, r3, #31
     bac:	702b      	strb	r3, [r5, #0]
}
     bae:	b002      	add	sp, #8
     bb0:	bd70      	pop	{r4, r5, r6, pc}
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	00000a61 	.word	0x00000a61

00000bb8 <lsm6dso_acceleration_raw_get>:
{
     bb8:	b530      	push	{r4, r5, lr}
     bba:	b083      	sub	sp, #12
     bbc:	000c      	movs	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
     bbe:	2306      	movs	r3, #6
     bc0:	466a      	mov	r2, sp
     bc2:	2128      	movs	r1, #40	; 0x28
     bc4:	4d0a      	ldr	r5, [pc, #40]	; (bf0 <lsm6dso_acceleration_raw_get+0x38>)
     bc6:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
     bc8:	466b      	mov	r3, sp
     bca:	785a      	ldrb	r2, [r3, #1]
     bcc:	0212      	lsls	r2, r2, #8
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	189b      	adds	r3, r3, r2
     bd2:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
     bd4:	466b      	mov	r3, sp
     bd6:	78da      	ldrb	r2, [r3, #3]
     bd8:	0212      	lsls	r2, r2, #8
     bda:	789b      	ldrb	r3, [r3, #2]
     bdc:	189b      	adds	r3, r3, r2
     bde:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
     be0:	466b      	mov	r3, sp
     be2:	795a      	ldrb	r2, [r3, #5]
     be4:	0212      	lsls	r2, r2, #8
     be6:	791b      	ldrb	r3, [r3, #4]
     be8:	189b      	adds	r3, r3, r2
     bea:	80a3      	strh	r3, [r4, #4]
}
     bec:	b003      	add	sp, #12
     bee:	bd30      	pop	{r4, r5, pc}
     bf0:	00000a61 	.word	0x00000a61

00000bf4 <lsm6dso_mem_bank_set>:
{
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	b082      	sub	sp, #8
     bf8:	0004      	movs	r4, r0
     bfa:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
     bfc:	2301      	movs	r3, #1
     bfe:	aa01      	add	r2, sp, #4
     c00:	2101      	movs	r1, #1
     c02:	4e09      	ldr	r6, [pc, #36]	; (c28 <lsm6dso_mem_bank_set+0x34>)
     c04:	47b0      	blx	r6
  if (ret == 0)
     c06:	2800      	cmp	r0, #0
     c08:	d001      	beq.n	c0e <lsm6dso_mem_bank_set+0x1a>
}
     c0a:	b002      	add	sp, #8
     c0c:	bd70      	pop	{r4, r5, r6, pc}
    reg.reg_access = (uint8_t)val;
     c0e:	aa01      	add	r2, sp, #4
     c10:	01ad      	lsls	r5, r5, #6
     c12:	7813      	ldrb	r3, [r2, #0]
     c14:	213f      	movs	r1, #63	; 0x3f
     c16:	4019      	ands	r1, r3
     c18:	4329      	orrs	r1, r5
     c1a:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
     c1c:	2301      	movs	r3, #1
     c1e:	2101      	movs	r1, #1
     c20:	0020      	movs	r0, r4
     c22:	4c02      	ldr	r4, [pc, #8]	; (c2c <lsm6dso_mem_bank_set+0x38>)
     c24:	47a0      	blx	r4
  return ret;
     c26:	e7f0      	b.n	c0a <lsm6dso_mem_bank_set+0x16>
     c28:	00000a61 	.word	0x00000a61
     c2c:	00000a6d 	.word	0x00000a6d

00000c30 <lsm6dso_device_id_get>:
{
     c30:	b510      	push	{r4, lr}
     c32:	000a      	movs	r2, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
     c34:	2301      	movs	r3, #1
     c36:	210f      	movs	r1, #15
     c38:	4c01      	ldr	r4, [pc, #4]	; (c40 <lsm6dso_device_id_get+0x10>)
     c3a:	47a0      	blx	r4
}
     c3c:	bd10      	pop	{r4, pc}
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	00000a61 	.word	0x00000a61

00000c44 <lsm6dso_reset_set>:
{
     c44:	b570      	push	{r4, r5, r6, lr}
     c46:	b082      	sub	sp, #8
     c48:	0004      	movs	r4, r0
     c4a:	000e      	movs	r6, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     c4c:	2301      	movs	r3, #1
     c4e:	aa01      	add	r2, sp, #4
     c50:	2112      	movs	r1, #18
     c52:	4d09      	ldr	r5, [pc, #36]	; (c78 <lsm6dso_reset_set+0x34>)
     c54:	47a8      	blx	r5
  if (ret == 0)
     c56:	2800      	cmp	r0, #0
     c58:	d001      	beq.n	c5e <lsm6dso_reset_set+0x1a>
}
     c5a:	b002      	add	sp, #8
     c5c:	bd70      	pop	{r4, r5, r6, pc}
    reg.sw_reset = val;
     c5e:	aa01      	add	r2, sp, #4
     c60:	2101      	movs	r1, #1
     c62:	400e      	ands	r6, r1
     c64:	7811      	ldrb	r1, [r2, #0]
     c66:	2301      	movs	r3, #1
     c68:	4399      	bics	r1, r3
     c6a:	4331      	orrs	r1, r6
     c6c:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     c6e:	2112      	movs	r1, #18
     c70:	0020      	movs	r0, r4
     c72:	4c02      	ldr	r4, [pc, #8]	; (c7c <lsm6dso_reset_set+0x38>)
     c74:	47a0      	blx	r4
  return ret;
     c76:	e7f0      	b.n	c5a <lsm6dso_reset_set+0x16>
     c78:	00000a61 	.word	0x00000a61
     c7c:	00000a6d 	.word	0x00000a6d

00000c80 <lsm6dso_reset_get>:
{
     c80:	b570      	push	{r4, r5, r6, lr}
     c82:	b082      	sub	sp, #8
     c84:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
     c86:	ac01      	add	r4, sp, #4
     c88:	2301      	movs	r3, #1
     c8a:	0022      	movs	r2, r4
     c8c:	2112      	movs	r1, #18
     c8e:	4e04      	ldr	r6, [pc, #16]	; (ca0 <lsm6dso_reset_get+0x20>)
     c90:	47b0      	blx	r6
  *val = reg.sw_reset;
     c92:	7823      	ldrb	r3, [r4, #0]
     c94:	07db      	lsls	r3, r3, #31
     c96:	0fdb      	lsrs	r3, r3, #31
     c98:	702b      	strb	r3, [r5, #0]
}
     c9a:	b002      	add	sp, #8
     c9c:	bd70      	pop	{r4, r5, r6, pc}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	00000a61 	.word	0x00000a61

00000ca4 <lsm6dso_xl_filter_lp2_set>:
{
     ca4:	b570      	push	{r4, r5, r6, lr}
     ca6:	b082      	sub	sp, #8
     ca8:	0004      	movs	r4, r0
     caa:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     cac:	2301      	movs	r3, #1
     cae:	aa01      	add	r2, sp, #4
     cb0:	2110      	movs	r1, #16
     cb2:	4e0a      	ldr	r6, [pc, #40]	; (cdc <lsm6dso_xl_filter_lp2_set+0x38>)
     cb4:	47b0      	blx	r6
  if (ret == 0)
     cb6:	2800      	cmp	r0, #0
     cb8:	d001      	beq.n	cbe <lsm6dso_xl_filter_lp2_set+0x1a>
}
     cba:	b002      	add	sp, #8
     cbc:	bd70      	pop	{r4, r5, r6, pc}
    reg.lpf2_xl_en = val;
     cbe:	aa01      	add	r2, sp, #4
     cc0:	2101      	movs	r1, #1
     cc2:	4029      	ands	r1, r5
     cc4:	004b      	lsls	r3, r1, #1
     cc6:	7811      	ldrb	r1, [r2, #0]
     cc8:	3002      	adds	r0, #2
     cca:	4381      	bics	r1, r0
     ccc:	4319      	orrs	r1, r3
     cce:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     cd0:	2301      	movs	r3, #1
     cd2:	2110      	movs	r1, #16
     cd4:	0020      	movs	r0, r4
     cd6:	4c02      	ldr	r4, [pc, #8]	; (ce0 <lsm6dso_xl_filter_lp2_set+0x3c>)
     cd8:	47a0      	blx	r4
  return ret;
     cda:	e7ee      	b.n	cba <lsm6dso_xl_filter_lp2_set+0x16>
     cdc:	00000a61 	.word	0x00000a61
     ce0:	00000a6d 	.word	0x00000a6d

00000ce4 <lsm6dso_xl_hp_path_on_out_set>:
{
     ce4:	b570      	push	{r4, r5, r6, lr}
     ce6:	b082      	sub	sp, #8
     ce8:	0004      	movs	r4, r0
     cea:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
     cec:	2301      	movs	r3, #1
     cee:	aa01      	add	r2, sp, #4
     cf0:	2117      	movs	r1, #23
     cf2:	4e10      	ldr	r6, [pc, #64]	; (d34 <lsm6dso_xl_hp_path_on_out_set+0x50>)
     cf4:	47b0      	blx	r6
  if (ret == 0)
     cf6:	2800      	cmp	r0, #0
     cf8:	d001      	beq.n	cfe <lsm6dso_xl_hp_path_on_out_set+0x1a>
}
     cfa:	b002      	add	sp, #8
     cfc:	bd70      	pop	{r4, r5, r6, pc}
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
     cfe:	aa01      	add	r2, sp, #4
     d00:	092b      	lsrs	r3, r5, #4
     d02:	2101      	movs	r1, #1
     d04:	400b      	ands	r3, r1
     d06:	0098      	lsls	r0, r3, #2
     d08:	7813      	ldrb	r3, [r2, #0]
     d0a:	2604      	movs	r6, #4
     d0c:	43b3      	bics	r3, r6
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
     d0e:	096e      	lsrs	r6, r5, #5
     d10:	4031      	ands	r1, r6
     d12:	0109      	lsls	r1, r1, #4
     d14:	4303      	orrs	r3, r0
     d16:	2010      	movs	r0, #16
     d18:	4383      	bics	r3, r0
    reg.hpcf_xl = (uint8_t)val & 0x07U;
     d1a:	016d      	lsls	r5, r5, #5
     d1c:	430b      	orrs	r3, r1
     d1e:	211f      	movs	r1, #31
     d20:	400b      	ands	r3, r1
     d22:	431d      	orrs	r5, r3
     d24:	7015      	strb	r5, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
     d26:	2301      	movs	r3, #1
     d28:	3908      	subs	r1, #8
     d2a:	0020      	movs	r0, r4
     d2c:	4c02      	ldr	r4, [pc, #8]	; (d38 <lsm6dso_xl_hp_path_on_out_set+0x54>)
     d2e:	47a0      	blx	r4
  return ret;
     d30:	e7e3      	b.n	cfa <lsm6dso_xl_hp_path_on_out_set+0x16>
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	00000a61 	.word	0x00000a61
     d38:	00000a6d 	.word	0x00000a6d

00000d3c <lsm6dso_i3c_disable_set>:
{
     d3c:	b570      	push	{r4, r5, r6, lr}
     d3e:	b082      	sub	sp, #8
     d40:	0004      	movs	r4, r0
     d42:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
     d44:	2301      	movs	r3, #1
     d46:	466a      	mov	r2, sp
     d48:	2118      	movs	r1, #24
     d4a:	4e16      	ldr	r6, [pc, #88]	; (da4 <lsm6dso_i3c_disable_set+0x68>)
     d4c:	47b0      	blx	r6
  if (ret == 0)
     d4e:	2800      	cmp	r0, #0
     d50:	d001      	beq.n	d56 <lsm6dso_i3c_disable_set+0x1a>
}
     d52:	b002      	add	sp, #8
     d54:	bd70      	pop	{r4, r5, r6, pc}
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
     d56:	09ea      	lsrs	r2, r5, #7
     d58:	0052      	lsls	r2, r2, #1
     d5a:	466b      	mov	r3, sp
     d5c:	781b      	ldrb	r3, [r3, #0]
     d5e:	2102      	movs	r1, #2
     d60:	438b      	bics	r3, r1
     d62:	4313      	orrs	r3, r2
     d64:	466a      	mov	r2, sp
     d66:	7013      	strb	r3, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
     d68:	2301      	movs	r3, #1
     d6a:	3116      	adds	r1, #22
     d6c:	0020      	movs	r0, r4
     d6e:	4e0e      	ldr	r6, [pc, #56]	; (da8 <lsm6dso_i3c_disable_set+0x6c>)
     d70:	47b0      	blx	r6
  if (ret == 0)
     d72:	2800      	cmp	r0, #0
     d74:	d1ed      	bne.n	d52 <lsm6dso_i3c_disable_set+0x16>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
     d76:	2301      	movs	r3, #1
     d78:	aa01      	add	r2, sp, #4
     d7a:	2162      	movs	r1, #98	; 0x62
     d7c:	0020      	movs	r0, r4
     d7e:	4e09      	ldr	r6, [pc, #36]	; (da4 <lsm6dso_i3c_disable_set+0x68>)
     d80:	47b0      	blx	r6
  if (ret == 0)
     d82:	2800      	cmp	r0, #0
     d84:	d1e5      	bne.n	d52 <lsm6dso_i3c_disable_set+0x16>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
     d86:	aa01      	add	r2, sp, #4
     d88:	2103      	movs	r1, #3
     d8a:	4029      	ands	r1, r5
     d8c:	00cb      	lsls	r3, r1, #3
     d8e:	7811      	ldrb	r1, [r2, #0]
     d90:	3018      	adds	r0, #24
     d92:	4381      	bics	r1, r0
     d94:	4319      	orrs	r1, r3
     d96:	7011      	strb	r1, [r2, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
     d98:	2301      	movs	r3, #1
     d9a:	2162      	movs	r1, #98	; 0x62
     d9c:	0020      	movs	r0, r4
     d9e:	4c02      	ldr	r4, [pc, #8]	; (da8 <lsm6dso_i3c_disable_set+0x6c>)
     da0:	47a0      	blx	r4
  return ret;
     da2:	e7d6      	b.n	d52 <lsm6dso_i3c_disable_set+0x16>
     da4:	00000a61 	.word	0x00000a61
     da8:	00000a6d 	.word	0x00000a6d

00000dac <lsm6dso_fsm_enable_get>:
{
     dac:	b570      	push	{r4, r5, r6, lr}
     dae:	0004      	movs	r4, r0
     db0:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
     db2:	2102      	movs	r1, #2
     db4:	4b08      	ldr	r3, [pc, #32]	; (dd8 <lsm6dso_fsm_enable_get+0x2c>)
     db6:	4798      	blx	r3
  if (ret == 0)
     db8:	2800      	cmp	r0, #0
     dba:	d000      	beq.n	dbe <lsm6dso_fsm_enable_get+0x12>
}
     dbc:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
     dbe:	2302      	movs	r3, #2
     dc0:	002a      	movs	r2, r5
     dc2:	2146      	movs	r1, #70	; 0x46
     dc4:	0020      	movs	r0, r4
     dc6:	4d05      	ldr	r5, [pc, #20]	; (ddc <lsm6dso_fsm_enable_get+0x30>)
     dc8:	47a8      	blx	r5
  if (ret == 0)
     dca:	2800      	cmp	r0, #0
     dcc:	d1f6      	bne.n	dbc <lsm6dso_fsm_enable_get+0x10>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
     dce:	2100      	movs	r1, #0
     dd0:	0020      	movs	r0, r4
     dd2:	4b01      	ldr	r3, [pc, #4]	; (dd8 <lsm6dso_fsm_enable_get+0x2c>)
     dd4:	4798      	blx	r3
  return ret;
     dd6:	e7f1      	b.n	dbc <lsm6dso_fsm_enable_get+0x10>
     dd8:	00000bf5 	.word	0x00000bf5
     ddc:	00000a61 	.word	0x00000a61

00000de0 <lsm6dso_fsm_data_rate_get>:
{
     de0:	b570      	push	{r4, r5, r6, lr}
     de2:	b082      	sub	sp, #8
     de4:	0004      	movs	r4, r0
     de6:	000d      	movs	r5, r1
  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
     de8:	2102      	movs	r1, #2
     dea:	4b17      	ldr	r3, [pc, #92]	; (e48 <lsm6dso_fsm_data_rate_get+0x68>)
     dec:	4798      	blx	r3
  if (ret == 0)
     dee:	2800      	cmp	r0, #0
     df0:	d001      	beq.n	df6 <lsm6dso_fsm_data_rate_get+0x16>
}
     df2:	b002      	add	sp, #8
     df4:	bd70      	pop	{r4, r5, r6, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
     df6:	2301      	movs	r3, #1
     df8:	aa01      	add	r2, sp, #4
     dfa:	215f      	movs	r1, #95	; 0x5f
     dfc:	0020      	movs	r0, r4
     dfe:	4e13      	ldr	r6, [pc, #76]	; (e4c <lsm6dso_fsm_data_rate_get+0x6c>)
     e00:	47b0      	blx	r6
  if (ret == 0)
     e02:	2800      	cmp	r0, #0
     e04:	d1f5      	bne.n	df2 <lsm6dso_fsm_data_rate_get+0x12>
    switch (reg.fsm_odr)
     e06:	ab01      	add	r3, sp, #4
     e08:	781b      	ldrb	r3, [r3, #0]
     e0a:	06db      	lsls	r3, r3, #27
     e0c:	0f9b      	lsrs	r3, r3, #30
     e0e:	b2da      	uxtb	r2, r3
     e10:	2a01      	cmp	r2, #1
     e12:	d00f      	beq.n	e34 <lsm6dso_fsm_data_rate_get+0x54>
     e14:	2a00      	cmp	r2, #0
     e16:	d006      	beq.n	e26 <lsm6dso_fsm_data_rate_get+0x46>
     e18:	2a02      	cmp	r2, #2
     e1a:	d00e      	beq.n	e3a <lsm6dso_fsm_data_rate_get+0x5a>
     e1c:	2a03      	cmp	r2, #3
     e1e:	d00f      	beq.n	e40 <lsm6dso_fsm_data_rate_get+0x60>
        *val = LSM6DSO_ODR_FSM_12Hz5;
     e20:	2300      	movs	r3, #0
     e22:	702b      	strb	r3, [r5, #0]
        break;
     e24:	e001      	b.n	e2a <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_12Hz5;
     e26:	2300      	movs	r3, #0
     e28:	702b      	strb	r3, [r5, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
     e2a:	2100      	movs	r1, #0
     e2c:	0020      	movs	r0, r4
     e2e:	4b06      	ldr	r3, [pc, #24]	; (e48 <lsm6dso_fsm_data_rate_get+0x68>)
     e30:	4798      	blx	r3
  return ret;
     e32:	e7de      	b.n	df2 <lsm6dso_fsm_data_rate_get+0x12>
        *val = LSM6DSO_ODR_FSM_26Hz;
     e34:	2301      	movs	r3, #1
     e36:	702b      	strb	r3, [r5, #0]
        break;
     e38:	e7f7      	b.n	e2a <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_52Hz;
     e3a:	2302      	movs	r3, #2
     e3c:	702b      	strb	r3, [r5, #0]
        break;
     e3e:	e7f4      	b.n	e2a <lsm6dso_fsm_data_rate_get+0x4a>
        *val = LSM6DSO_ODR_FSM_104Hz;
     e40:	2303      	movs	r3, #3
     e42:	702b      	strb	r3, [r5, #0]
        break;
     e44:	e7f1      	b.n	e2a <lsm6dso_fsm_data_rate_get+0x4a>
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00000bf5 	.word	0x00000bf5
     e4c:	00000a61 	.word	0x00000a61

00000e50 <lsm6dso_xl_data_rate_set>:
{
     e50:	b570      	push	{r4, r5, r6, lr}
     e52:	b082      	sub	sp, #8
     e54:	0004      	movs	r4, r0
     e56:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
     e58:	a901      	add	r1, sp, #4
     e5a:	4b38      	ldr	r3, [pc, #224]	; (f3c <lsm6dso_xl_data_rate_set+0xec>)
     e5c:	4798      	blx	r3
  if (ret == 0)
     e5e:	2800      	cmp	r0, #0
     e60:	d142      	bne.n	ee8 <lsm6dso_xl_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
     e62:	a901      	add	r1, sp, #4
     e64:	780a      	ldrb	r2, [r1, #0]
     e66:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
     e68:	0793      	lsls	r3, r2, #30
     e6a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
     e6c:	0753      	lsls	r3, r2, #29
     e6e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
     e70:	0710      	lsls	r0, r2, #28
     e72:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
     e74:	06d0      	lsls	r0, r2, #27
     e76:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
     e78:	0693      	lsls	r3, r2, #26
     e7a:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
     e7c:	0653      	lsls	r3, r2, #25
     e7e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
     e80:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
     e82:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
     e84:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
     e86:	784a      	ldrb	r2, [r1, #1]
     e88:	07d1      	lsls	r1, r2, #31
     e8a:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
     e8c:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
     e8e:	0791      	lsls	r1, r2, #30
     e90:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
     e92:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
     e94:	0751      	lsls	r1, r2, #29
     e96:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
     e98:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
     e9a:	0711      	lsls	r1, r2, #28
     e9c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
     e9e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
     ea0:	06d1      	lsls	r1, r2, #27
     ea2:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
     ea4:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
     ea6:	0691      	lsls	r1, r2, #26
     ea8:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
     eaa:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
     eac:	0651      	lsls	r1, r2, #25
     eae:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
     eb0:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
     eb2:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
     eb4:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
     eb6:	b2db      	uxtb	r3, r3
     eb8:	2b01      	cmp	r3, #1
     eba:	d017      	beq.n	eec <lsm6dso_xl_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     ebc:	2301      	movs	r3, #1
     ebe:	466a      	mov	r2, sp
     ec0:	2110      	movs	r1, #16
     ec2:	0020      	movs	r0, r4
     ec4:	4e1e      	ldr	r6, [pc, #120]	; (f40 <lsm6dso_xl_data_rate_set+0xf0>)
     ec6:	47b0      	blx	r6
  if (ret == 0)
     ec8:	2800      	cmp	r0, #0
     eca:	d10d      	bne.n	ee8 <lsm6dso_xl_data_rate_set+0x98>
    reg.odr_xl = (uint8_t) odr_xl;
     ecc:	012b      	lsls	r3, r5, #4
     ece:	466a      	mov	r2, sp
     ed0:	7812      	ldrb	r2, [r2, #0]
     ed2:	250f      	movs	r5, #15
     ed4:	4015      	ands	r5, r2
     ed6:	431d      	orrs	r5, r3
     ed8:	466b      	mov	r3, sp
     eda:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
     edc:	2301      	movs	r3, #1
     ede:	466a      	mov	r2, sp
     ee0:	2110      	movs	r1, #16
     ee2:	0020      	movs	r0, r4
     ee4:	4c17      	ldr	r4, [pc, #92]	; (f44 <lsm6dso_xl_data_rate_set+0xf4>)
     ee6:	47a0      	blx	r4
}
     ee8:	b002      	add	sp, #8
     eea:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
     eec:	466b      	mov	r3, sp
     eee:	1cd9      	adds	r1, r3, #3
     ef0:	0020      	movs	r0, r4
     ef2:	4b15      	ldr	r3, [pc, #84]	; (f48 <lsm6dso_xl_data_rate_set+0xf8>)
     ef4:	4798      	blx	r3
      if (ret == 0)
     ef6:	2800      	cmp	r0, #0
     ef8:	d1f6      	bne.n	ee8 <lsm6dso_xl_data_rate_set+0x98>
        switch (fsm_odr)
     efa:	466b      	mov	r3, sp
     efc:	3303      	adds	r3, #3
     efe:	781b      	ldrb	r3, [r3, #0]
     f00:	2b01      	cmp	r3, #1
     f02:	d00f      	beq.n	f24 <lsm6dso_xl_data_rate_set+0xd4>
     f04:	2b00      	cmp	r3, #0
     f06:	d009      	beq.n	f1c <lsm6dso_xl_data_rate_set+0xcc>
     f08:	2b02      	cmp	r3, #2
     f0a:	d011      	beq.n	f30 <lsm6dso_xl_data_rate_set+0xe0>
     f0c:	2b03      	cmp	r3, #3
     f0e:	d1d5      	bne.n	ebc <lsm6dso_xl_data_rate_set+0x6c>
     f10:	1c2b      	adds	r3, r5, #0
     f12:	2d03      	cmp	r5, #3
     f14:	d800      	bhi.n	f18 <lsm6dso_xl_data_rate_set+0xc8>
     f16:	2304      	movs	r3, #4
     f18:	b2dd      	uxtb	r5, r3
     f1a:	e7cf      	b.n	ebc <lsm6dso_xl_data_rate_set+0x6c>
            if (val == LSM6DSO_XL_ODR_OFF)
     f1c:	2d00      	cmp	r5, #0
     f1e:	d1cd      	bne.n	ebc <lsm6dso_xl_data_rate_set+0x6c>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
     f20:	2501      	movs	r5, #1
     f22:	e7cb      	b.n	ebc <lsm6dso_xl_data_rate_set+0x6c>
     f24:	1c2b      	adds	r3, r5, #0
     f26:	2d01      	cmp	r5, #1
     f28:	d800      	bhi.n	f2c <lsm6dso_xl_data_rate_set+0xdc>
     f2a:	2302      	movs	r3, #2
     f2c:	b2dd      	uxtb	r5, r3
     f2e:	e7c5      	b.n	ebc <lsm6dso_xl_data_rate_set+0x6c>
     f30:	1c2b      	adds	r3, r5, #0
     f32:	2d02      	cmp	r5, #2
     f34:	d800      	bhi.n	f38 <lsm6dso_xl_data_rate_set+0xe8>
     f36:	2303      	movs	r3, #3
     f38:	b2dd      	uxtb	r5, r3
     f3a:	e7bf      	b.n	ebc <lsm6dso_xl_data_rate_set+0x6c>
     f3c:	00000dad 	.word	0x00000dad
     f40:	00000a61 	.word	0x00000a61
     f44:	00000a6d 	.word	0x00000a6d
     f48:	00000de1 	.word	0x00000de1

00000f4c <lsm6dso_gy_data_rate_set>:
{
     f4c:	b570      	push	{r4, r5, r6, lr}
     f4e:	b082      	sub	sp, #8
     f50:	0004      	movs	r4, r0
     f52:	000d      	movs	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
     f54:	a901      	add	r1, sp, #4
     f56:	4b38      	ldr	r3, [pc, #224]	; (1038 <lsm6dso_gy_data_rate_set+0xec>)
     f58:	4798      	blx	r3
  if (ret == 0)
     f5a:	2800      	cmp	r0, #0
     f5c:	d142      	bne.n	fe4 <lsm6dso_gy_data_rate_set+0x98>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
     f5e:	a901      	add	r1, sp, #4
     f60:	780a      	ldrb	r2, [r1, #0]
     f62:	07d0      	lsls	r0, r2, #31
         fsm_enable.fsm_enable_a.fsm2_en  |
     f64:	0793      	lsls	r3, r2, #30
     f66:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
     f68:	0753      	lsls	r3, r2, #29
     f6a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
     f6c:	0710      	lsls	r0, r2, #28
     f6e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
     f70:	06d0      	lsls	r0, r2, #27
     f72:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
     f74:	0693      	lsls	r3, r2, #26
     f76:	4318      	orrs	r0, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
     f78:	0653      	lsls	r3, r2, #25
     f7a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
     f7c:	0fdb      	lsrs	r3, r3, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
     f7e:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_a.fsm7_en  |
     f80:	4313      	orrs	r3, r2
         fsm_enable.fsm_enable_b.fsm9_en  |
     f82:	784a      	ldrb	r2, [r1, #1]
     f84:	07d1      	lsls	r1, r2, #31
     f86:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_a.fsm8_en  |
     f88:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm10_en |
     f8a:	0791      	lsls	r1, r2, #30
     f8c:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm9_en  |
     f8e:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm11_en |
     f90:	0751      	lsls	r1, r2, #29
     f92:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm10_en |
     f94:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm12_en |
     f96:	0711      	lsls	r1, r2, #28
     f98:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm11_en |
     f9a:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm13_en |
     f9c:	06d1      	lsls	r1, r2, #27
     f9e:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm12_en |
     fa0:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm14_en |
     fa2:	0691      	lsls	r1, r2, #26
     fa4:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm13_en |
     fa6:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm15_en |
     fa8:	0651      	lsls	r1, r2, #25
     faa:	0fc9      	lsrs	r1, r1, #31
         fsm_enable.fsm_enable_b.fsm14_en |
     fac:	430b      	orrs	r3, r1
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
     fae:	09d2      	lsrs	r2, r2, #7
         fsm_enable.fsm_enable_b.fsm15_en |
     fb0:	4313      	orrs	r3, r2
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
     fb2:	b2db      	uxtb	r3, r3
     fb4:	2b01      	cmp	r3, #1
     fb6:	d017      	beq.n	fe8 <lsm6dso_gy_data_rate_set+0x9c>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
     fb8:	2301      	movs	r3, #1
     fba:	466a      	mov	r2, sp
     fbc:	2111      	movs	r1, #17
     fbe:	0020      	movs	r0, r4
     fc0:	4e1e      	ldr	r6, [pc, #120]	; (103c <lsm6dso_gy_data_rate_set+0xf0>)
     fc2:	47b0      	blx	r6
  if (ret == 0)
     fc4:	2800      	cmp	r0, #0
     fc6:	d10d      	bne.n	fe4 <lsm6dso_gy_data_rate_set+0x98>
    reg.odr_g = (uint8_t) odr_gy;
     fc8:	012b      	lsls	r3, r5, #4
     fca:	466a      	mov	r2, sp
     fcc:	7812      	ldrb	r2, [r2, #0]
     fce:	250f      	movs	r5, #15
     fd0:	4015      	ands	r5, r2
     fd2:	431d      	orrs	r5, r3
     fd4:	466b      	mov	r3, sp
     fd6:	701d      	strb	r5, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
     fd8:	2301      	movs	r3, #1
     fda:	466a      	mov	r2, sp
     fdc:	2111      	movs	r1, #17
     fde:	0020      	movs	r0, r4
     fe0:	4c17      	ldr	r4, [pc, #92]	; (1040 <lsm6dso_gy_data_rate_set+0xf4>)
     fe2:	47a0      	blx	r4
}
     fe4:	b002      	add	sp, #8
     fe6:	bd70      	pop	{r4, r5, r6, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
     fe8:	466b      	mov	r3, sp
     fea:	1cd9      	adds	r1, r3, #3
     fec:	0020      	movs	r0, r4
     fee:	4b15      	ldr	r3, [pc, #84]	; (1044 <lsm6dso_gy_data_rate_set+0xf8>)
     ff0:	4798      	blx	r3
      if (ret == 0)
     ff2:	2800      	cmp	r0, #0
     ff4:	d1f6      	bne.n	fe4 <lsm6dso_gy_data_rate_set+0x98>
        switch (fsm_odr)
     ff6:	466b      	mov	r3, sp
     ff8:	3303      	adds	r3, #3
     ffa:	781b      	ldrb	r3, [r3, #0]
     ffc:	2b01      	cmp	r3, #1
     ffe:	d00f      	beq.n	1020 <lsm6dso_gy_data_rate_set+0xd4>
    1000:	2b00      	cmp	r3, #0
    1002:	d009      	beq.n	1018 <lsm6dso_gy_data_rate_set+0xcc>
    1004:	2b02      	cmp	r3, #2
    1006:	d011      	beq.n	102c <lsm6dso_gy_data_rate_set+0xe0>
    1008:	2b03      	cmp	r3, #3
    100a:	d1d5      	bne.n	fb8 <lsm6dso_gy_data_rate_set+0x6c>
    100c:	1c2b      	adds	r3, r5, #0
    100e:	2d03      	cmp	r5, #3
    1010:	d800      	bhi.n	1014 <lsm6dso_gy_data_rate_set+0xc8>
    1012:	2304      	movs	r3, #4
    1014:	b2dd      	uxtb	r5, r3
    1016:	e7cf      	b.n	fb8 <lsm6dso_gy_data_rate_set+0x6c>
            if (val == LSM6DSO_GY_ODR_OFF)
    1018:	2d00      	cmp	r5, #0
    101a:	d1cd      	bne.n	fb8 <lsm6dso_gy_data_rate_set+0x6c>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
    101c:	2501      	movs	r5, #1
    101e:	e7cb      	b.n	fb8 <lsm6dso_gy_data_rate_set+0x6c>
    1020:	1c2b      	adds	r3, r5, #0
    1022:	2d01      	cmp	r5, #1
    1024:	d800      	bhi.n	1028 <lsm6dso_gy_data_rate_set+0xdc>
    1026:	2302      	movs	r3, #2
    1028:	b2dd      	uxtb	r5, r3
    102a:	e7c5      	b.n	fb8 <lsm6dso_gy_data_rate_set+0x6c>
    102c:	1c2b      	adds	r3, r5, #0
    102e:	2d02      	cmp	r5, #2
    1030:	d800      	bhi.n	1034 <lsm6dso_gy_data_rate_set+0xe8>
    1032:	2303      	movs	r3, #3
    1034:	b2dd      	uxtb	r5, r3
    1036:	e7bf      	b.n	fb8 <lsm6dso_gy_data_rate_set+0x6c>
    1038:	00000dad 	.word	0x00000dad
    103c:	00000a61 	.word	0x00000a61
    1040:	00000a6d 	.word	0x00000a6d
    1044:	00000de1 	.word	0x00000de1

00001048 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
return &dev_ctx;
}
    1048:	4800      	ldr	r0, [pc, #0]	; (104c <GetImuStruct+0x4>)
    104a:	4770      	bx	lr
    104c:	20000000 	.word	0x20000000

00001050 <InitImu>:



int32_t InitImu(void)
{
    1050:	b5f0      	push	{r4, r5, r6, r7, lr}
    1052:	b083      	sub	sp, #12
uint8_t rst;
int32_t error = 0;
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
    1054:	2101      	movs	r1, #1
    1056:	481b      	ldr	r0, [pc, #108]	; (10c4 <InitImu+0x74>)
    1058:	4b1b      	ldr	r3, [pc, #108]	; (10c8 <InitImu+0x78>)
    105a:	4798      	blx	r3
    105c:	0004      	movs	r4, r0
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
    105e:	466b      	mov	r3, sp
    1060:	1ddd      	adds	r5, r3, #7
    1062:	4e18      	ldr	r6, [pc, #96]	; (10c4 <InitImu+0x74>)
    1064:	4f19      	ldr	r7, [pc, #100]	; (10cc <InitImu+0x7c>)
    1066:	0029      	movs	r1, r5
    1068:	0030      	movs	r0, r6
    106a:	47b8      	blx	r7
    106c:	4304      	orrs	r4, r0
  } while (rst);
    106e:	782b      	ldrb	r3, [r5, #0]
    1070:	2b00      	cmp	r3, #0
    1072:	d1f8      	bne.n	1066 <InitImu+0x16>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
    1074:	4d13      	ldr	r5, [pc, #76]	; (10c4 <InitImu+0x74>)
    1076:	2180      	movs	r1, #128	; 0x80
    1078:	0028      	movs	r0, r5
    107a:	4b15      	ldr	r3, [pc, #84]	; (10d0 <InitImu+0x80>)
    107c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    107e:	2101      	movs	r1, #1
    1080:	0028      	movs	r0, r5
    1082:	4b14      	ldr	r3, [pc, #80]	; (10d4 <InitImu+0x84>)
    1084:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
    1086:	2100      	movs	r1, #0
    1088:	0028      	movs	r0, r5
    108a:	4b13      	ldr	r3, [pc, #76]	; (10d8 <InitImu+0x88>)
    108c:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
    108e:	2101      	movs	r1, #1
    1090:	0028      	movs	r0, r5
    1092:	4b12      	ldr	r3, [pc, #72]	; (10dc <InitImu+0x8c>)
    1094:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
    1096:	2101      	movs	r1, #1
    1098:	0028      	movs	r0, r5
    109a:	4b11      	ldr	r3, [pc, #68]	; (10e0 <InitImu+0x90>)
    109c:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
    109e:	2100      	movs	r1, #0
    10a0:	0028      	movs	r0, r5
    10a2:	4b10      	ldr	r3, [pc, #64]	; (10e4 <InitImu+0x94>)
    10a4:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
    10a6:	2106      	movs	r1, #6
    10a8:	0028      	movs	r0, r5
    10aa:	4b0f      	ldr	r3, [pc, #60]	; (10e8 <InitImu+0x98>)
    10ac:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
    10ae:	2104      	movs	r1, #4
    10b0:	0028      	movs	r0, r5
    10b2:	4b0e      	ldr	r3, [pc, #56]	; (10ec <InitImu+0x9c>)
    10b4:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
    10b6:	2101      	movs	r1, #1
    10b8:	0028      	movs	r0, r5
    10ba:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <InitImu+0xa0>)
    10bc:	4798      	blx	r3

  return error;
}
    10be:	0020      	movs	r0, r4
    10c0:	b003      	add	sp, #12
    10c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10c4:	20000000 	.word	0x20000000
    10c8:	00000c45 	.word	0x00000c45
    10cc:	00000c81 	.word	0x00000c81
    10d0:	00000d3d 	.word	0x00000d3d
    10d4:	00000b15 	.word	0x00000b15
    10d8:	00000b55 	.word	0x00000b55
    10dc:	00000e51 	.word	0x00000e51
    10e0:	00000f4d 	.word	0x00000f4d
    10e4:	00000a95 	.word	0x00000a95
    10e8:	00000ad5 	.word	0x00000ad5
    10ec:	00000ce5 	.word	0x00000ce5
    10f0:	00000ca5 	.word	0x00000ca5

000010f4 <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
    10f4:	b510      	push	{r4, lr}
    10f6:	b082      	sub	sp, #8
	union keyState ks;
	ks.bit.STATE = enable;
    10f8:	2401      	movs	r4, #1
	ks.bit.ACTIVE = (1 << edge);
    10fa:	0023      	movs	r3, r4
    10fc:	408b      	lsls	r3, r1
    10fe:	210f      	movs	r1, #15
    1100:	4019      	ands	r1, r3
    1102:	0049      	lsls	r1, r1, #1
    1104:	2301      	movs	r3, #1
    1106:	401a      	ands	r2, r3
    1108:	430a      	orrs	r2, r1
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
    110a:	ab01      	add	r3, sp, #4
    110c:	2110      	movs	r1, #16
    110e:	7019      	strb	r1, [r3, #0]
    1110:	705c      	strb	r4, [r3, #1]
    1112:	7098      	strb	r0, [r3, #2]
    1114:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
    1116:	4806      	ldr	r0, [pc, #24]	; (1130 <SeesawActivateKey+0x3c>)
    1118:	222e      	movs	r2, #46	; 0x2e
    111a:	7002      	strb	r2, [r0, #0]
	seesawData.msgOut = &cmd;
    111c:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(cmd);
    111e:	2304      	movs	r3, #4
    1120:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
    1122:	2300      	movs	r3, #0
    1124:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    1126:	3154      	adds	r1, #84	; 0x54
    1128:	4b02      	ldr	r3, [pc, #8]	; (1134 <SeesawActivateKey+0x40>)
    112a:	4798      	blx	r3
	return error;
}
    112c:	b002      	add	sp, #8
    112e:	bd10      	pop	{r4, pc}
    1130:	20003890 	.word	0x20003890
    1134:	00000a15 	.word	0x00000a15

00001138 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
    1138:	b530      	push	{r4, r5, lr}
    113a:	b083      	sub	sp, #12
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
    113c:	240e      	movs	r4, #14
    113e:	466d      	mov	r5, sp
    1140:	702c      	strb	r4, [r5, #0]
    1142:	3c0a      	subs	r4, #10
    1144:	706c      	strb	r4, [r5, #1]
    1146:	712a      	strb	r2, [r5, #4]
    1148:	7169      	strb	r1, [r5, #5]
    114a:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
    114c:	0043      	lsls	r3, r0, #1
    114e:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
    1150:	0a03      	lsrs	r3, r0, #8
    1152:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
    1154:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
    1156:	4804      	ldr	r0, [pc, #16]	; (1168 <SeesawSetLed+0x30>)
    1158:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
    115a:	2307      	movs	r3, #7
    115c:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    115e:	2164      	movs	r1, #100	; 0x64
    1160:	4b02      	ldr	r3, [pc, #8]	; (116c <SeesawSetLed+0x34>)
    1162:	4798      	blx	r3
	return error;

}
    1164:	b003      	add	sp, #12
    1166:	bd30      	pop	{r4, r5, pc}
    1168:	20003890 	.word	0x20003890
    116c:	00000a15 	.word	0x00000a15

00001170 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
    1170:	b500      	push	{lr}
    1172:	b083      	sub	sp, #12
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
    1174:	ab01      	add	r3, sp, #4
    1176:	4a06      	ldr	r2, [pc, #24]	; (1190 <SeesawOrderLedUpdate+0x20>)
    1178:	8892      	ldrh	r2, [r2, #4]
    117a:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
    117c:	4805      	ldr	r0, [pc, #20]	; (1194 <SeesawOrderLedUpdate+0x24>)
    117e:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
    1180:	2302      	movs	r3, #2
    1182:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    1184:	2164      	movs	r1, #100	; 0x64
    1186:	4b04      	ldr	r3, [pc, #16]	; (1198 <SeesawOrderLedUpdate+0x28>)
    1188:	4798      	blx	r3
	return error;
}
    118a:	b003      	add	sp, #12
    118c:	bd00      	pop	{pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	000095e0 	.word	0x000095e0
    1194:	20003890 	.word	0x20003890
    1198:	00000a15 	.word	0x00000a15

0000119c <InitializeSeesaw>:
{
    119c:	b5f0      	push	{r4, r5, r6, r7, lr}
    119e:	46ce      	mov	lr, r9
    11a0:	b500      	push	{lr}
    11a2:	b084      	sub	sp, #16
	seesawData.address = NEO_TRELLIS_ADDR;
    11a4:	484b      	ldr	r0, [pc, #300]	; (12d4 <InitializeSeesaw+0x138>)
    11a6:	232e      	movs	r3, #46	; 0x2e
    11a8:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgBaseGetHWID;
    11aa:	4b4b      	ldr	r3, [pc, #300]	; (12d8 <InitializeSeesaw+0x13c>)
    11ac:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
    11ae:	2302      	movs	r3, #2
    11b0:	81c3      	strh	r3, [r0, #14]
	seesawData.msgIn = &readData;
    11b2:	ab03      	add	r3, sp, #12
    11b4:	6083      	str	r3, [r0, #8]
	seesawData.lenIn = 1;
    11b6:	2301      	movs	r3, #1
    11b8:	8183      	strh	r3, [r0, #12]
	int error = I2cReadDataWait(&seesawData, 0, 100);
    11ba:	2264      	movs	r2, #100	; 0x64
    11bc:	2100      	movs	r1, #0
    11be:	4b47      	ldr	r3, [pc, #284]	; (12dc <InitializeSeesaw+0x140>)
    11c0:	4798      	blx	r3
	if(ERROR_NONE != error)
    11c2:	2800      	cmp	r0, #0
    11c4:	d10d      	bne.n	11e2 <InitializeSeesaw+0x46>
		if(readData[0] != SEESAW_HW_ID_CODE )
    11c6:	ab03      	add	r3, sp, #12
    11c8:	781b      	ldrb	r3, [r3, #0]
    11ca:	2b55      	cmp	r3, #85	; 0x55
    11cc:	d04f      	beq.n	126e <InitializeSeesaw+0xd2>
			SerialConsoleWriteString("Error/r/n");
    11ce:	4844      	ldr	r0, [pc, #272]	; (12e0 <InitializeSeesaw+0x144>)
    11d0:	4b44      	ldr	r3, [pc, #272]	; (12e4 <InitializeSeesaw+0x148>)
    11d2:	4798      	blx	r3
			return 1;
    11d4:	2301      	movs	r3, #1
    11d6:	9301      	str	r3, [sp, #4]
}
    11d8:	9801      	ldr	r0, [sp, #4]
    11da:	b004      	add	sp, #16
    11dc:	bc04      	pop	{r2}
    11de:	4691      	mov	r9, r2
    11e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    11e2:	4841      	ldr	r0, [pc, #260]	; (12e8 <InitializeSeesaw+0x14c>)
    11e4:	4b3f      	ldr	r3, [pc, #252]	; (12e4 <InitializeSeesaw+0x148>)
    11e6:	4798      	blx	r3
	seesawData.msgOut = &msgNeopixelPin;
    11e8:	483a      	ldr	r0, [pc, #232]	; (12d4 <InitializeSeesaw+0x138>)
    11ea:	4b40      	ldr	r3, [pc, #256]	; (12ec <InitializeSeesaw+0x150>)
    11ec:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
    11ee:	2303      	movs	r3, #3
    11f0:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    11f2:	2164      	movs	r1, #100	; 0x64
    11f4:	4b3e      	ldr	r3, [pc, #248]	; (12f0 <InitializeSeesaw+0x154>)
    11f6:	4798      	blx	r3
	if(ERROR_NONE != error)
    11f8:	2800      	cmp	r0, #0
    11fa:	d13c      	bne.n	1276 <InitializeSeesaw+0xda>
	seesawData.msgOut = &msgNeopixelSpeed;
    11fc:	4835      	ldr	r0, [pc, #212]	; (12d4 <InitializeSeesaw+0x138>)
    11fe:	4b3d      	ldr	r3, [pc, #244]	; (12f4 <InitializeSeesaw+0x158>)
    1200:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
    1202:	2303      	movs	r3, #3
    1204:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    1206:	2164      	movs	r1, #100	; 0x64
    1208:	4b39      	ldr	r3, [pc, #228]	; (12f0 <InitializeSeesaw+0x154>)
    120a:	4798      	blx	r3
	if(ERROR_NONE != error)
    120c:	2800      	cmp	r0, #0
    120e:	d136      	bne.n	127e <InitializeSeesaw+0xe2>
	seesawData.msgOut = &msgNeopixelBufLength;
    1210:	4830      	ldr	r0, [pc, #192]	; (12d4 <InitializeSeesaw+0x138>)
    1212:	4b39      	ldr	r3, [pc, #228]	; (12f8 <InitializeSeesaw+0x15c>)
    1214:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
    1216:	2304      	movs	r3, #4
    1218:	81c3      	strh	r3, [r0, #14]
	error = I2cWriteDataWait(&seesawData, 100);
    121a:	2164      	movs	r1, #100	; 0x64
    121c:	4b34      	ldr	r3, [pc, #208]	; (12f0 <InitializeSeesaw+0x154>)
    121e:	4798      	blx	r3
    1220:	9001      	str	r0, [sp, #4]
	if(ERROR_NONE != error)
    1222:	2800      	cmp	r0, #0
    1224:	d12f      	bne.n	1286 <InitializeSeesaw+0xea>
}


static void SeesawTurnOnLedTest(void)
{
	SeesawSetLed(15, 255, 255, 255);
    1226:	23ff      	movs	r3, #255	; 0xff
    1228:	22ff      	movs	r2, #255	; 0xff
    122a:	21ff      	movs	r1, #255	; 0xff
    122c:	200f      	movs	r0, #15
    122e:	4e33      	ldr	r6, [pc, #204]	; (12fc <InitializeSeesaw+0x160>)
    1230:	47b0      	blx	r6
	SeesawOrderLedUpdate();
    1232:	4c33      	ldr	r4, [pc, #204]	; (1300 <InitializeSeesaw+0x164>)
    1234:	47a0      	blx	r4
	vTaskDelay(400);
    1236:	20c8      	movs	r0, #200	; 0xc8
    1238:	0040      	lsls	r0, r0, #1
    123a:	4b32      	ldr	r3, [pc, #200]	; (1304 <InitializeSeesaw+0x168>)
    123c:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
    123e:	2300      	movs	r3, #0
    1240:	2200      	movs	r2, #0
    1242:	2100      	movs	r1, #0
    1244:	200f      	movs	r0, #15
    1246:	47b0      	blx	r6
	SeesawOrderLedUpdate();
    1248:	47a0      	blx	r4
	seesawData.address = NEO_TRELLIS_ADDR;
    124a:	4822      	ldr	r0, [pc, #136]	; (12d4 <InitializeSeesaw+0x138>)
    124c:	232e      	movs	r3, #46	; 0x2e
    124e:	7003      	strb	r3, [r0, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
    1250:	4b2d      	ldr	r3, [pc, #180]	; (1308 <InitializeSeesaw+0x16c>)
    1252:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
    1254:	2303      	movs	r3, #3
    1256:	81c3      	strh	r3, [r0, #14]
	seesawData.lenIn = 0;
    1258:	2300      	movs	r3, #0
    125a:	8183      	strh	r3, [r0, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
    125c:	2164      	movs	r1, #100	; 0x64
    125e:	4b24      	ldr	r3, [pc, #144]	; (12f0 <InitializeSeesaw+0x154>)
    1260:	4798      	blx	r3
	if(ERROR_NONE != error)
    1262:	2800      	cmp	r0, #0
    1264:	d113      	bne.n	128e <InitializeSeesaw+0xf2>
{
    1266:	2600      	movs	r6, #0
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    1268:	2703      	movs	r7, #3
    126a:	4d28      	ldr	r5, [pc, #160]	; (130c <InitializeSeesaw+0x170>)
    126c:	e016      	b.n	129c <InitializeSeesaw+0x100>
		SerialConsoleWriteString("Found Seesaw!/r/n");
    126e:	4828      	ldr	r0, [pc, #160]	; (1310 <InitializeSeesaw+0x174>)
    1270:	4b1c      	ldr	r3, [pc, #112]	; (12e4 <InitializeSeesaw+0x148>)
    1272:	4798      	blx	r3
    1274:	e7b8      	b.n	11e8 <InitializeSeesaw+0x4c>
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
    1276:	4827      	ldr	r0, [pc, #156]	; (1314 <InitializeSeesaw+0x178>)
    1278:	4b1a      	ldr	r3, [pc, #104]	; (12e4 <InitializeSeesaw+0x148>)
    127a:	4798      	blx	r3
    127c:	e7be      	b.n	11fc <InitializeSeesaw+0x60>
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
    127e:	4826      	ldr	r0, [pc, #152]	; (1318 <InitializeSeesaw+0x17c>)
    1280:	4b18      	ldr	r3, [pc, #96]	; (12e4 <InitializeSeesaw+0x148>)
    1282:	4798      	blx	r3
    1284:	e7c4      	b.n	1210 <InitializeSeesaw+0x74>
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
    1286:	4825      	ldr	r0, [pc, #148]	; (131c <InitializeSeesaw+0x180>)
    1288:	4b16      	ldr	r3, [pc, #88]	; (12e4 <InitializeSeesaw+0x148>)
    128a:	4798      	blx	r3
    128c:	e7cb      	b.n	1226 <InitializeSeesaw+0x8a>
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    128e:	4824      	ldr	r0, [pc, #144]	; (1320 <InitializeSeesaw+0x184>)
    1290:	4b14      	ldr	r3, [pc, #80]	; (12e4 <InitializeSeesaw+0x148>)
    1292:	4798      	blx	r3
    1294:	e7e7      	b.n	1266 <InitializeSeesaw+0xca>
	for(int i=0; i<16; i++){
    1296:	3601      	adds	r6, #1
    1298:	2e10      	cmp	r6, #16
    129a:	d09d      	beq.n	11d8 <InitializeSeesaw+0x3c>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
    129c:	17f2      	asrs	r2, r6, #31
    129e:	003c      	movs	r4, r7
    12a0:	4014      	ands	r4, r2
    12a2:	19a4      	adds	r4, r4, r6
    12a4:	10a4      	asrs	r4, r4, #2
    12a6:	00e4      	lsls	r4, r4, #3
    12a8:	0f92      	lsrs	r2, r2, #30
    12aa:	18b3      	adds	r3, r6, r2
    12ac:	403b      	ands	r3, r7
    12ae:	1a9b      	subs	r3, r3, r2
    12b0:	18e4      	adds	r4, r4, r3
    12b2:	b2e4      	uxtb	r4, r4
    12b4:	2201      	movs	r2, #1
    12b6:	0039      	movs	r1, r7
    12b8:	0020      	movs	r0, r4
    12ba:	47a8      	blx	r5
    12bc:	4681      	mov	r9, r0
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
    12be:	2201      	movs	r2, #1
    12c0:	2102      	movs	r1, #2
    12c2:	0020      	movs	r0, r4
    12c4:	47a8      	blx	r5
    12c6:	464b      	mov	r3, r9
    12c8:	4303      	orrs	r3, r0
		if(ERROR_NONE != error)
    12ca:	d0e4      	beq.n	1296 <InitializeSeesaw+0xfa>
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
    12cc:	4814      	ldr	r0, [pc, #80]	; (1320 <InitializeSeesaw+0x184>)
    12ce:	4b05      	ldr	r3, [pc, #20]	; (12e4 <InitializeSeesaw+0x148>)
    12d0:	4798      	blx	r3
    12d2:	e7e0      	b.n	1296 <InitializeSeesaw+0xfa>
    12d4:	20003890 	.word	0x20003890
    12d8:	000096cc 	.word	0x000096cc
    12dc:	00000a55 	.word	0x00000a55
    12e0:	00009608 	.word	0x00009608
    12e4:	0000542d 	.word	0x0000542d
    12e8:	000095e8 	.word	0x000095e8
    12ec:	000096d8 	.word	0x000096d8
    12f0:	00000a15 	.word	0x00000a15
    12f4:	000096dc 	.word	0x000096dc
    12f8:	000096d4 	.word	0x000096d4
    12fc:	00001139 	.word	0x00001139
    1300:	00001171 	.word	0x00001171
    1304:	00004609 	.word	0x00004609
    1308:	000096d0 	.word	0x000096d0
    130c:	000010f5 	.word	0x000010f5
    1310:	00009614 	.word	0x00009614
    1314:	00009628 	.word	0x00009628
    1318:	00009648 	.word	0x00009648
    131c:	00009674 	.word	0x00009674
    1320:	000096a8 	.word	0x000096a8

00001324 <vUiHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vUiHandlerTask( void *pvParameters )
{
    1324:	b570      	push	{r4, r5, r6, lr}
//Do initialization code here
SerialConsoleWriteString("UI Task Started!");
    1326:	4808      	ldr	r0, [pc, #32]	; (1348 <vUiHandlerTask+0x24>)
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <vUiHandlerTask+0x28>)
    132a:	4798      	blx	r3
uiState = UI_STATE_HANDLE_BUTTONS;
    132c:	2200      	movs	r2, #0
    132e:	4b08      	ldr	r3, [pc, #32]	; (1350 <vUiHandlerTask+0x2c>)
    1330:	701a      	strb	r2, [r3, #0]
			uiState = UI_STATE_HANDLE_BUTTONS;
		break;
	}

	//After execution, you can put a thread to sleep for some time.
	vTaskDelay(50);
    1332:	4d08      	ldr	r5, [pc, #32]	; (1354 <vUiHandlerTask+0x30>)
	switch(uiState)
    1334:	001c      	movs	r4, r3
			uiState = UI_STATE_HANDLE_BUTTONS;
    1336:	001e      	movs	r6, r3
	vTaskDelay(50);
    1338:	2032      	movs	r0, #50	; 0x32
    133a:	47a8      	blx	r5
	switch(uiState)
    133c:	7823      	ldrb	r3, [r4, #0]
    133e:	2b02      	cmp	r3, #2
    1340:	d9fa      	bls.n	1338 <vUiHandlerTask+0x14>
			uiState = UI_STATE_HANDLE_BUTTONS;
    1342:	2300      	movs	r3, #0
    1344:	7033      	strb	r3, [r6, #0]
		break;
    1346:	e7f7      	b.n	1338 <vUiHandlerTask+0x14>
    1348:	000096e0 	.word	0x000096e0
    134c:	0000542d 	.word	0x0000542d
    1350:	200038a0 	.word	0x200038a0
    1354:	00004609 	.word	0x00004609

00001358 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1358:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    135a:	2207      	movs	r2, #7
    135c:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    135e:	421a      	tst	r2, r3
    1360:	d1fc      	bne.n	135c <_i2c_master_wait_for_sync+0x4>
}
    1362:	4770      	bx	lr

00001364 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1364:	b5f0      	push	{r4, r5, r6, r7, lr}
    1366:	46d6      	mov	lr, sl
    1368:	464f      	mov	r7, r9
    136a:	4646      	mov	r6, r8
    136c:	b5c0      	push	{r6, r7, lr}
    136e:	b08a      	sub	sp, #40	; 0x28
    1370:	0006      	movs	r6, r0
    1372:	000f      	movs	r7, r1
    1374:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1376:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1378:	0008      	movs	r0, r1
    137a:	4ba0      	ldr	r3, [pc, #640]	; (15fc <i2c_master_init+0x298>)
    137c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    137e:	4aa0      	ldr	r2, [pc, #640]	; (1600 <i2c_master_init+0x29c>)
    1380:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1382:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1384:	2301      	movs	r3, #1
    1386:	40ab      	lsls	r3, r5
    1388:	430b      	orrs	r3, r1
    138a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    138c:	a909      	add	r1, sp, #36	; 0x24
    138e:	7b23      	ldrb	r3, [r4, #12]
    1390:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1392:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1394:	b2c5      	uxtb	r5, r0
    1396:	0028      	movs	r0, r5
    1398:	4b9a      	ldr	r3, [pc, #616]	; (1604 <i2c_master_init+0x2a0>)
    139a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    139c:	0028      	movs	r0, r5
    139e:	4b9a      	ldr	r3, [pc, #616]	; (1608 <i2c_master_init+0x2a4>)
    13a0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    13a2:	7b20      	ldrb	r0, [r4, #12]
    13a4:	2100      	movs	r1, #0
    13a6:	4b99      	ldr	r3, [pc, #612]	; (160c <i2c_master_init+0x2a8>)
    13a8:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    13aa:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    13ac:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    13ae:	079b      	lsls	r3, r3, #30
    13b0:	d505      	bpl.n	13be <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    13b2:	b00a      	add	sp, #40	; 0x28
    13b4:	bc1c      	pop	{r2, r3, r4}
    13b6:	4690      	mov	r8, r2
    13b8:	4699      	mov	r9, r3
    13ba:	46a2      	mov	sl, r4
    13bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13be:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    13c0:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13c2:	07db      	lsls	r3, r3, #31
    13c4:	d4f5      	bmi.n	13b2 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13c6:	6830      	ldr	r0, [r6, #0]
    13c8:	4b8c      	ldr	r3, [pc, #560]	; (15fc <i2c_master_init+0x298>)
    13ca:	4699      	mov	r9, r3
    13cc:	4798      	blx	r3
    13ce:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    13d0:	498f      	ldr	r1, [pc, #572]	; (1610 <i2c_master_init+0x2ac>)
    13d2:	4b90      	ldr	r3, [pc, #576]	; (1614 <i2c_master_init+0x2b0>)
    13d4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    13d6:	00ad      	lsls	r5, r5, #2
    13d8:	4b8f      	ldr	r3, [pc, #572]	; (1618 <i2c_master_init+0x2b4>)
    13da:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    13dc:	2300      	movs	r3, #0
    13de:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    13e0:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    13e2:	2500      	movs	r5, #0
    13e4:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    13e6:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    13e8:	2225      	movs	r2, #37	; 0x25
    13ea:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    13ec:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    13ee:	3314      	adds	r3, #20
    13f0:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13f2:	6833      	ldr	r3, [r6, #0]
    13f4:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    13f6:	0018      	movs	r0, r3
    13f8:	47c8      	blx	r9
    13fa:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    13fc:	2380      	movs	r3, #128	; 0x80
    13fe:	aa08      	add	r2, sp, #32
    1400:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1402:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1404:	2301      	movs	r3, #1
    1406:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    1408:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    140a:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    140c:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    140e:	2800      	cmp	r0, #0
    1410:	d100      	bne.n	1414 <i2c_master_init+0xb0>
    1412:	e0af      	b.n	1574 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    1414:	ab08      	add	r3, sp, #32
    1416:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1418:	2302      	movs	r3, #2
    141a:	aa08      	add	r2, sp, #32
    141c:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    141e:	0c00      	lsrs	r0, r0, #16
    1420:	b2c0      	uxtb	r0, r0
    1422:	0011      	movs	r1, r2
    1424:	4b7d      	ldr	r3, [pc, #500]	; (161c <i2c_master_init+0x2b8>)
    1426:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    1428:	2f00      	cmp	r7, #0
    142a:	d100      	bne.n	142e <i2c_master_init+0xca>
    142c:	e0a7      	b.n	157e <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    142e:	ab08      	add	r3, sp, #32
    1430:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1432:	2302      	movs	r3, #2
    1434:	aa08      	add	r2, sp, #32
    1436:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1438:	0c3f      	lsrs	r7, r7, #16
    143a:	b2f8      	uxtb	r0, r7
    143c:	0011      	movs	r1, r2
    143e:	4b77      	ldr	r3, [pc, #476]	; (161c <i2c_master_init+0x2b8>)
    1440:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1442:	8aa3      	ldrh	r3, [r4, #20]
    1444:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    1446:	8ae3      	ldrh	r3, [r4, #22]
    1448:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    144a:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    144c:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    144e:	2b00      	cmp	r3, #0
    1450:	d104      	bne.n	145c <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1452:	4b73      	ldr	r3, [pc, #460]	; (1620 <i2c_master_init+0x2bc>)
    1454:	789b      	ldrb	r3, [r3, #2]
    1456:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1458:	0fdb      	lsrs	r3, r3, #31
    145a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    145c:	68a1      	ldr	r1, [r4, #8]
    145e:	6923      	ldr	r3, [r4, #16]
    1460:	430b      	orrs	r3, r1
    1462:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    1464:	2224      	movs	r2, #36	; 0x24
    1466:	5ca2      	ldrb	r2, [r4, r2]
    1468:	2a00      	cmp	r2, #0
    146a:	d002      	beq.n	1472 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    146c:	2280      	movs	r2, #128	; 0x80
    146e:	05d2      	lsls	r2, r2, #23
    1470:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    1472:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1474:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1476:	222c      	movs	r2, #44	; 0x2c
    1478:	5ca2      	ldrb	r2, [r4, r2]
    147a:	2a00      	cmp	r2, #0
    147c:	d103      	bne.n	1486 <i2c_master_init+0x122>
    147e:	2280      	movs	r2, #128	; 0x80
    1480:	0492      	lsls	r2, r2, #18
    1482:	4291      	cmp	r1, r2
    1484:	d102      	bne.n	148c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1486:	2280      	movs	r2, #128	; 0x80
    1488:	0512      	lsls	r2, r2, #20
    148a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    148c:	222d      	movs	r2, #45	; 0x2d
    148e:	5ca2      	ldrb	r2, [r4, r2]
    1490:	2a00      	cmp	r2, #0
    1492:	d002      	beq.n	149a <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1494:	2280      	movs	r2, #128	; 0x80
    1496:	0412      	lsls	r2, r2, #16
    1498:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    149a:	222e      	movs	r2, #46	; 0x2e
    149c:	5ca2      	ldrb	r2, [r4, r2]
    149e:	2a00      	cmp	r2, #0
    14a0:	d002      	beq.n	14a8 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    14a2:	2280      	movs	r2, #128	; 0x80
    14a4:	03d2      	lsls	r2, r2, #15
    14a6:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    14a8:	4642      	mov	r2, r8
    14aa:	6812      	ldr	r2, [r2, #0]
    14ac:	4313      	orrs	r3, r2
    14ae:	4642      	mov	r2, r8
    14b0:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    14b2:	2380      	movs	r3, #128	; 0x80
    14b4:	005b      	lsls	r3, r3, #1
    14b6:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    14b8:	4648      	mov	r0, r9
    14ba:	3014      	adds	r0, #20
    14bc:	b2c0      	uxtb	r0, r0
    14be:	4b59      	ldr	r3, [pc, #356]	; (1624 <i2c_master_init+0x2c0>)
    14c0:	4798      	blx	r3
    14c2:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    14c4:	23fa      	movs	r3, #250	; 0xfa
    14c6:	009b      	lsls	r3, r3, #2
    14c8:	6822      	ldr	r2, [r4, #0]
    14ca:	435a      	muls	r2, r3
    14cc:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    14ce:	6863      	ldr	r3, [r4, #4]
    14d0:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    14d2:	4d55      	ldr	r5, [pc, #340]	; (1628 <i2c_master_init+0x2c4>)
    14d4:	47a8      	blx	r5
    14d6:	9000      	str	r0, [sp, #0]
    14d8:	9101      	str	r1, [sp, #4]
    14da:	464b      	mov	r3, r9
    14dc:	0058      	lsls	r0, r3, #1
    14de:	47a8      	blx	r5
    14e0:	9002      	str	r0, [sp, #8]
    14e2:	9103      	str	r1, [sp, #12]
    14e4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    14e6:	47a8      	blx	r5
    14e8:	9004      	str	r0, [sp, #16]
    14ea:	9105      	str	r1, [sp, #20]
    14ec:	4f4f      	ldr	r7, [pc, #316]	; (162c <i2c_master_init+0x2c8>)
    14ee:	4a50      	ldr	r2, [pc, #320]	; (1630 <i2c_master_init+0x2cc>)
    14f0:	4b50      	ldr	r3, [pc, #320]	; (1634 <i2c_master_init+0x2d0>)
    14f2:	9800      	ldr	r0, [sp, #0]
    14f4:	9901      	ldr	r1, [sp, #4]
    14f6:	47b8      	blx	r7
    14f8:	0002      	movs	r2, r0
    14fa:	000b      	movs	r3, r1
    14fc:	9804      	ldr	r0, [sp, #16]
    14fe:	9905      	ldr	r1, [sp, #20]
    1500:	47b8      	blx	r7
    1502:	4e4d      	ldr	r6, [pc, #308]	; (1638 <i2c_master_init+0x2d4>)
    1504:	2200      	movs	r2, #0
    1506:	4b4d      	ldr	r3, [pc, #308]	; (163c <i2c_master_init+0x2d8>)
    1508:	47b0      	blx	r6
    150a:	9004      	str	r0, [sp, #16]
    150c:	9105      	str	r1, [sp, #20]
    150e:	4648      	mov	r0, r9
    1510:	47a8      	blx	r5
    1512:	0002      	movs	r2, r0
    1514:	000b      	movs	r3, r1
    1516:	9804      	ldr	r0, [sp, #16]
    1518:	9905      	ldr	r1, [sp, #20]
    151a:	47b8      	blx	r7
    151c:	0002      	movs	r2, r0
    151e:	000b      	movs	r3, r1
    1520:	4d47      	ldr	r5, [pc, #284]	; (1640 <i2c_master_init+0x2dc>)
    1522:	9800      	ldr	r0, [sp, #0]
    1524:	9901      	ldr	r1, [sp, #4]
    1526:	47a8      	blx	r5
    1528:	9a02      	ldr	r2, [sp, #8]
    152a:	9b03      	ldr	r3, [sp, #12]
    152c:	47b0      	blx	r6
    152e:	2200      	movs	r2, #0
    1530:	4b44      	ldr	r3, [pc, #272]	; (1644 <i2c_master_init+0x2e0>)
    1532:	47a8      	blx	r5
    1534:	9a02      	ldr	r2, [sp, #8]
    1536:	9b03      	ldr	r3, [sp, #12]
    1538:	4d43      	ldr	r5, [pc, #268]	; (1648 <i2c_master_init+0x2e4>)
    153a:	47a8      	blx	r5
    153c:	4b43      	ldr	r3, [pc, #268]	; (164c <i2c_master_init+0x2e8>)
    153e:	4798      	blx	r3
    1540:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    1542:	2380      	movs	r3, #128	; 0x80
    1544:	049b      	lsls	r3, r3, #18
    1546:	68a2      	ldr	r2, [r4, #8]
    1548:	429a      	cmp	r2, r3
    154a:	d01e      	beq.n	158a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    154c:	0003      	movs	r3, r0
    154e:	2040      	movs	r0, #64	; 0x40
    1550:	2dff      	cmp	r5, #255	; 0xff
    1552:	d900      	bls.n	1556 <i2c_master_init+0x1f2>
    1554:	e72d      	b.n	13b2 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    1556:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    1558:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    155a:	25ff      	movs	r5, #255	; 0xff
    155c:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    155e:	0624      	lsls	r4, r4, #24
    1560:	4325      	orrs	r5, r4
    1562:	0400      	lsls	r0, r0, #16
    1564:	23ff      	movs	r3, #255	; 0xff
    1566:	041b      	lsls	r3, r3, #16
    1568:	4018      	ands	r0, r3
    156a:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    156c:	4643      	mov	r3, r8
    156e:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    1570:	2000      	movs	r0, #0
    1572:	e71e      	b.n	13b2 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1574:	2100      	movs	r1, #0
    1576:	4640      	mov	r0, r8
    1578:	4b35      	ldr	r3, [pc, #212]	; (1650 <i2c_master_init+0x2ec>)
    157a:	4798      	blx	r3
    157c:	e74a      	b.n	1414 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    157e:	2101      	movs	r1, #1
    1580:	4640      	mov	r0, r8
    1582:	4b33      	ldr	r3, [pc, #204]	; (1650 <i2c_master_init+0x2ec>)
    1584:	4798      	blx	r3
    1586:	0007      	movs	r7, r0
    1588:	e751      	b.n	142e <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    158a:	26fa      	movs	r6, #250	; 0xfa
    158c:	00b6      	lsls	r6, r6, #2
    158e:	4653      	mov	r3, sl
    1590:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    1592:	9800      	ldr	r0, [sp, #0]
    1594:	9901      	ldr	r1, [sp, #4]
    1596:	0002      	movs	r2, r0
    1598:	000b      	movs	r3, r1
    159a:	4c27      	ldr	r4, [pc, #156]	; (1638 <i2c_master_init+0x2d4>)
    159c:	47a0      	blx	r4
    159e:	9000      	str	r0, [sp, #0]
    15a0:	9101      	str	r1, [sp, #4]
    15a2:	0030      	movs	r0, r6
    15a4:	4b20      	ldr	r3, [pc, #128]	; (1628 <i2c_master_init+0x2c4>)
    15a6:	4798      	blx	r3
    15a8:	2200      	movs	r2, #0
    15aa:	4b2a      	ldr	r3, [pc, #168]	; (1654 <i2c_master_init+0x2f0>)
    15ac:	47b8      	blx	r7
    15ae:	0002      	movs	r2, r0
    15b0:	000b      	movs	r3, r1
    15b2:	9800      	ldr	r0, [sp, #0]
    15b4:	9901      	ldr	r1, [sp, #4]
    15b6:	4c24      	ldr	r4, [pc, #144]	; (1648 <i2c_master_init+0x2e4>)
    15b8:	47a0      	blx	r4
    15ba:	2200      	movs	r2, #0
    15bc:	4b21      	ldr	r3, [pc, #132]	; (1644 <i2c_master_init+0x2e0>)
    15be:	4c20      	ldr	r4, [pc, #128]	; (1640 <i2c_master_init+0x2dc>)
    15c0:	47a0      	blx	r4
    15c2:	4b22      	ldr	r3, [pc, #136]	; (164c <i2c_master_init+0x2e8>)
    15c4:	4798      	blx	r3
    15c6:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    15c8:	d00c      	beq.n	15e4 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    15ca:	0031      	movs	r1, r6
    15cc:	9807      	ldr	r0, [sp, #28]
    15ce:	4b22      	ldr	r3, [pc, #136]	; (1658 <i2c_master_init+0x2f4>)
    15d0:	4798      	blx	r3
    15d2:	3802      	subs	r0, #2
    15d4:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15d6:	002b      	movs	r3, r5
    15d8:	2dff      	cmp	r5, #255	; 0xff
    15da:	d80c      	bhi.n	15f6 <i2c_master_init+0x292>
    15dc:	28ff      	cmp	r0, #255	; 0xff
    15de:	d9bc      	bls.n	155a <i2c_master_init+0x1f6>
    15e0:	2040      	movs	r0, #64	; 0x40
    15e2:	e6e6      	b.n	13b2 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    15e4:	0071      	lsls	r1, r6, #1
    15e6:	1e48      	subs	r0, r1, #1
    15e8:	9b07      	ldr	r3, [sp, #28]
    15ea:	469c      	mov	ip, r3
    15ec:	4460      	add	r0, ip
    15ee:	4b1a      	ldr	r3, [pc, #104]	; (1658 <i2c_master_init+0x2f4>)
    15f0:	4798      	blx	r3
    15f2:	3801      	subs	r0, #1
    15f4:	e7ef      	b.n	15d6 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    15f6:	2040      	movs	r0, #64	; 0x40
    15f8:	e6db      	b.n	13b2 <i2c_master_init+0x4e>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	00005a41 	.word	0x00005a41
    1600:	40000400 	.word	0x40000400
    1604:	000066ed 	.word	0x000066ed
    1608:	00006661 	.word	0x00006661
    160c:	0000587d 	.word	0x0000587d
    1610:	00000289 	.word	0x00000289
    1614:	00005a7d 	.word	0x00005a7d
    1618:	20004d78 	.word	0x20004d78
    161c:	00006815 	.word	0x00006815
    1620:	41002000 	.word	0x41002000
    1624:	00006709 	.word	0x00006709
    1628:	000088f9 	.word	0x000088f9
    162c:	00007d65 	.word	0x00007d65
    1630:	e826d695 	.word	0xe826d695
    1634:	3e112e0b 	.word	0x3e112e0b
    1638:	000070dd 	.word	0x000070dd
    163c:	40240000 	.word	0x40240000
    1640:	00008265 	.word	0x00008265
    1644:	3ff00000 	.word	0x3ff00000
    1648:	000076fd 	.word	0x000076fd
    164c:	00008891 	.word	0x00008891
    1650:	000058c9 	.word	0x000058c9
    1654:	40080000 	.word	0x40080000
    1658:	00006c51 	.word	0x00006c51

0000165c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    165e:	46ce      	mov	lr, r9
    1660:	4647      	mov	r7, r8
    1662:	b580      	push	{r7, lr}
    1664:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1666:	6803      	ldr	r3, [r0, #0]
    1668:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    166a:	4e14      	ldr	r6, [pc, #80]	; (16bc <i2c_master_reset+0x60>)
    166c:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    166e:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1670:	0028      	movs	r0, r5
    1672:	4b13      	ldr	r3, [pc, #76]	; (16c0 <i2c_master_reset+0x64>)
    1674:	4698      	mov	r8, r3
    1676:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1678:	231f      	movs	r3, #31
    167a:	4018      	ands	r0, r3
    167c:	2701      	movs	r7, #1
    167e:	0039      	movs	r1, r7
    1680:	4081      	lsls	r1, r0
    1682:	3361      	adds	r3, #97	; 0x61
    1684:	4a0f      	ldr	r2, [pc, #60]	; (16c4 <i2c_master_reset+0x68>)
    1686:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    1688:	0020      	movs	r0, r4
    168a:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    168c:	2383      	movs	r3, #131	; 0x83
    168e:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    1690:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1692:	682b      	ldr	r3, [r5, #0]
    1694:	2202      	movs	r2, #2
    1696:	4393      	bics	r3, r2
    1698:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    169a:	4b0b      	ldr	r3, [pc, #44]	; (16c8 <i2c_master_reset+0x6c>)
    169c:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    169e:	6820      	ldr	r0, [r4, #0]
    16a0:	47c0      	blx	r8
    16a2:	4b0a      	ldr	r3, [pc, #40]	; (16cc <i2c_master_reset+0x70>)
    16a4:	4798      	blx	r3
	cpu_irq_leave_critical();
    16a6:	4b0a      	ldr	r3, [pc, #40]	; (16d0 <i2c_master_reset+0x74>)
    16a8:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    16aa:	0020      	movs	r0, r4
    16ac:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    16ae:	464b      	mov	r3, r9
    16b0:	601f      	str	r7, [r3, #0]
}
    16b2:	bc0c      	pop	{r2, r3}
    16b4:	4690      	mov	r8, r2
    16b6:	4699      	mov	r9, r3
    16b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	00001359 	.word	0x00001359
    16c0:	00005ab9 	.word	0x00005ab9
    16c4:	e000e100 	.word	0xe000e100
    16c8:	0000551d 	.word	0x0000551d
    16cc:	0000673d 	.word	0x0000673d
    16d0:	0000555d 	.word	0x0000555d

000016d4 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    16d4:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16d6:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    16d8:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16da:	2401      	movs	r4, #1
    16dc:	2502      	movs	r5, #2
    16de:	7e11      	ldrb	r1, [r2, #24]
    16e0:	4221      	tst	r1, r4
    16e2:	d10b      	bne.n	16fc <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    16e4:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    16e6:	4229      	tst	r1, r5
    16e8:	d106      	bne.n	16f8 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    16ea:	3301      	adds	r3, #1
    16ec:	b29b      	uxth	r3, r3
    16ee:	8901      	ldrh	r1, [r0, #8]
    16f0:	4299      	cmp	r1, r3
    16f2:	d8f4      	bhi.n	16de <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    16f4:	2012      	movs	r0, #18
    16f6:	e002      	b.n	16fe <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    16f8:	2000      	movs	r0, #0
    16fa:	e000      	b.n	16fe <_i2c_master_wait_for_bus+0x2a>
    16fc:	2000      	movs	r0, #0
}
    16fe:	bd30      	pop	{r4, r5, pc}

00001700 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1700:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1702:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1704:	6862      	ldr	r2, [r4, #4]
    1706:	2380      	movs	r3, #128	; 0x80
    1708:	02db      	lsls	r3, r3, #11
    170a:	4313      	orrs	r3, r2
    170c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    170e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1710:	4b02      	ldr	r3, [pc, #8]	; (171c <_i2c_master_send_hs_master_code+0x1c>)
    1712:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1714:	2301      	movs	r3, #1
    1716:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1718:	bd10      	pop	{r4, pc}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	000016d5 	.word	0x000016d5

00001720 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1720:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1722:	0080      	lsls	r0, r0, #2
    1724:	4b16      	ldr	r3, [pc, #88]	; (1780 <_tc_interrupt_handler+0x60>)
    1726:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1728:	6823      	ldr	r3, [r4, #0]
    172a:	7b9d      	ldrb	r5, [r3, #14]
    172c:	7e22      	ldrb	r2, [r4, #24]
    172e:	7e63      	ldrb	r3, [r4, #25]
    1730:	4013      	ands	r3, r2
    1732:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1734:	07eb      	lsls	r3, r5, #31
    1736:	d406      	bmi.n	1746 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1738:	07ab      	lsls	r3, r5, #30
    173a:	d40b      	bmi.n	1754 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    173c:	06eb      	lsls	r3, r5, #27
    173e:	d410      	bmi.n	1762 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1740:	06ab      	lsls	r3, r5, #26
    1742:	d415      	bmi.n	1770 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1744:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1746:	0020      	movs	r0, r4
    1748:	68a3      	ldr	r3, [r4, #8]
    174a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    174c:	2301      	movs	r3, #1
    174e:	6822      	ldr	r2, [r4, #0]
    1750:	7393      	strb	r3, [r2, #14]
    1752:	e7f1      	b.n	1738 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    1754:	0020      	movs	r0, r4
    1756:	68e3      	ldr	r3, [r4, #12]
    1758:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    175a:	2302      	movs	r3, #2
    175c:	6822      	ldr	r2, [r4, #0]
    175e:	7393      	strb	r3, [r2, #14]
    1760:	e7ec      	b.n	173c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1762:	0020      	movs	r0, r4
    1764:	6923      	ldr	r3, [r4, #16]
    1766:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1768:	2310      	movs	r3, #16
    176a:	6822      	ldr	r2, [r4, #0]
    176c:	7393      	strb	r3, [r2, #14]
    176e:	e7e7      	b.n	1740 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1770:	0020      	movs	r0, r4
    1772:	6963      	ldr	r3, [r4, #20]
    1774:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1776:	6823      	ldr	r3, [r4, #0]
    1778:	2220      	movs	r2, #32
    177a:	739a      	strb	r2, [r3, #14]
}
    177c:	e7e2      	b.n	1744 <_tc_interrupt_handler+0x24>
    177e:	46c0      	nop			; (mov r8, r8)
    1780:	200038a4 	.word	0x200038a4

00001784 <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1784:	b510      	push	{r4, lr}
    1786:	2000      	movs	r0, #0
    1788:	4b01      	ldr	r3, [pc, #4]	; (1790 <TC3_Handler+0xc>)
    178a:	4798      	blx	r3
    178c:	bd10      	pop	{r4, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	00001721 	.word	0x00001721

00001794 <TC4_Handler>:
    1794:	b510      	push	{r4, lr}
    1796:	2001      	movs	r0, #1
    1798:	4b01      	ldr	r3, [pc, #4]	; (17a0 <TC4_Handler+0xc>)
    179a:	4798      	blx	r3
    179c:	bd10      	pop	{r4, pc}
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	00001721 	.word	0x00001721

000017a4 <TC5_Handler>:
    17a4:	b510      	push	{r4, lr}
    17a6:	2002      	movs	r0, #2
    17a8:	4b01      	ldr	r3, [pc, #4]	; (17b0 <TC5_Handler+0xc>)
    17aa:	4798      	blx	r3
    17ac:	bd10      	pop	{r4, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	00001721 	.word	0x00001721

000017b4 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    17b4:	b570      	push	{r4, r5, r6, lr}
    17b6:	000a      	movs	r2, r1
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    17b8:	4b09      	ldr	r3, [pc, #36]	; (17e0 <prvHelpCommand+0x2c>)
    17ba:	681b      	ldr	r3, [r3, #0]
    17bc:	2b00      	cmp	r3, #0
    17be:	d00a      	beq.n	17d6 <prvHelpCommand+0x22>
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    17c0:	4c07      	ldr	r4, [pc, #28]	; (17e0 <prvHelpCommand+0x2c>)
    17c2:	6825      	ldr	r5, [r4, #0]
    17c4:	682b      	ldr	r3, [r5, #0]
    17c6:	6859      	ldr	r1, [r3, #4]
    17c8:	4b06      	ldr	r3, [pc, #24]	; (17e4 <prvHelpCommand+0x30>)
    17ca:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
    17cc:	6868      	ldr	r0, [r5, #4]
    17ce:	6020      	str	r0, [r4, #0]

	if( pxCommand == NULL )
    17d0:	1e43      	subs	r3, r0, #1
    17d2:	4198      	sbcs	r0, r3
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
    17d4:	bd70      	pop	{r4, r5, r6, pc}
		pxCommand = &xRegisteredCommands;
    17d6:	4904      	ldr	r1, [pc, #16]	; (17e8 <prvHelpCommand+0x34>)
    17d8:	4b01      	ldr	r3, [pc, #4]	; (17e0 <prvHelpCommand+0x2c>)
    17da:	6019      	str	r1, [r3, #0]
    17dc:	e7f0      	b.n	17c0 <prvHelpCommand+0xc>
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	2000031c 	.word	0x2000031c
    17e4:	00008cad 	.word	0x00008cad
    17e8:	20000010 	.word	0x20000010

000017ec <FreeRTOS_CLIRegisterCommand>:
{
    17ec:	b570      	push	{r4, r5, r6, lr}
    17ee:	1e05      	subs	r5, r0, #0
	configASSERT( pxCommandToRegister );
    17f0:	d006      	beq.n	1800 <FreeRTOS_CLIRegisterCommand+0x14>
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
    17f2:	2008      	movs	r0, #8
    17f4:	4b0a      	ldr	r3, [pc, #40]	; (1820 <FreeRTOS_CLIRegisterCommand+0x34>)
    17f6:	4798      	blx	r3
    17f8:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
    17fa:	d103      	bne.n	1804 <FreeRTOS_CLIRegisterCommand+0x18>
    17fc:	b672      	cpsid	i
    17fe:	e7fe      	b.n	17fe <FreeRTOS_CLIRegisterCommand+0x12>
	configASSERT( pxCommandToRegister );
    1800:	b672      	cpsid	i
    1802:	e7fe      	b.n	1802 <FreeRTOS_CLIRegisterCommand+0x16>
		taskENTER_CRITICAL();
    1804:	4b07      	ldr	r3, [pc, #28]	; (1824 <FreeRTOS_CLIRegisterCommand+0x38>)
    1806:	4798      	blx	r3
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
    1808:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
    180a:	2300      	movs	r3, #0
    180c:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
    180e:	4b06      	ldr	r3, [pc, #24]	; (1828 <FreeRTOS_CLIRegisterCommand+0x3c>)
    1810:	681a      	ldr	r2, [r3, #0]
    1812:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
    1814:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
    1816:	4b05      	ldr	r3, [pc, #20]	; (182c <FreeRTOS_CLIRegisterCommand+0x40>)
    1818:	4798      	blx	r3
}
    181a:	2001      	movs	r0, #1
    181c:	bd70      	pop	{r4, r5, r6, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	00002c95 	.word	0x00002c95
    1824:	00002bd1 	.word	0x00002bd1
    1828:	2000000c 	.word	0x2000000c
    182c:	00002be9 	.word	0x00002be9

00001830 <FreeRTOS_CLIProcessCommand>:
{
    1830:	b5f0      	push	{r4, r5, r6, r7, lr}
    1832:	46de      	mov	lr, fp
    1834:	4657      	mov	r7, sl
    1836:	464e      	mov	r6, r9
    1838:	4645      	mov	r5, r8
    183a:	b5e0      	push	{r5, r6, r7, lr}
    183c:	b083      	sub	sp, #12
    183e:	0006      	movs	r6, r0
    1840:	9100      	str	r1, [sp, #0]
    1842:	9201      	str	r2, [sp, #4]
	if( pxCommand == NULL )
    1844:	4b39      	ldr	r3, [pc, #228]	; (192c <FreeRTOS_CLIProcessCommand+0xfc>)
    1846:	681b      	ldr	r3, [r3, #0]
    1848:	2b00      	cmp	r3, #0
    184a:	d011      	beq.n	1870 <FreeRTOS_CLIProcessCommand+0x40>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    184c:	681b      	ldr	r3, [r3, #0]
    184e:	689b      	ldr	r3, [r3, #8]
    1850:	0032      	movs	r2, r6
    1852:	9901      	ldr	r1, [sp, #4]
    1854:	9800      	ldr	r0, [sp, #0]
    1856:	4798      	blx	r3
		if( xReturn == pdFALSE )
    1858:	2800      	cmp	r0, #0
    185a:	d102      	bne.n	1862 <FreeRTOS_CLIProcessCommand+0x32>
			pxCommand = NULL;
    185c:	2200      	movs	r2, #0
    185e:	4b33      	ldr	r3, [pc, #204]	; (192c <FreeRTOS_CLIProcessCommand+0xfc>)
    1860:	601a      	str	r2, [r3, #0]
}
    1862:	b003      	add	sp, #12
    1864:	bc3c      	pop	{r2, r3, r4, r5}
    1866:	4690      	mov	r8, r2
    1868:	4699      	mov	r9, r3
    186a:	46a2      	mov	sl, r4
    186c:	46ab      	mov	fp, r5
    186e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    1870:	4c2f      	ldr	r4, [pc, #188]	; (1930 <FreeRTOS_CLIProcessCommand+0x100>)
    1872:	4b2e      	ldr	r3, [pc, #184]	; (192c <FreeRTOS_CLIProcessCommand+0xfc>)
    1874:	601c      	str	r4, [r3, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    1876:	4b2f      	ldr	r3, [pc, #188]	; (1934 <FreeRTOS_CLIProcessCommand+0x104>)
    1878:	4699      	mov	r9, r3
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    187a:	2320      	movs	r3, #32
    187c:	4698      	mov	r8, r3
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    187e:	4b2e      	ldr	r3, [pc, #184]	; (1938 <FreeRTOS_CLIProcessCommand+0x108>)
    1880:	469b      	mov	fp, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    1882:	4b2a      	ldr	r3, [pc, #168]	; (192c <FreeRTOS_CLIProcessCommand+0xfc>)
    1884:	469a      	mov	sl, r3
    1886:	e00a      	b.n	189e <FreeRTOS_CLIProcessCommand+0x6e>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    1888:	0002      	movs	r2, r0
    188a:	0029      	movs	r1, r5
    188c:	0030      	movs	r0, r6
    188e:	47d8      	blx	fp
    1890:	2800      	cmp	r0, #0
    1892:	d00d      	beq.n	18b0 <FreeRTOS_CLIProcessCommand+0x80>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    1894:	6864      	ldr	r4, [r4, #4]
    1896:	4653      	mov	r3, sl
    1898:	601c      	str	r4, [r3, #0]
    189a:	2c00      	cmp	r4, #0
    189c:	d03e      	beq.n	191c <FreeRTOS_CLIProcessCommand+0xec>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    189e:	6827      	ldr	r7, [r4, #0]
    18a0:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    18a2:	0028      	movs	r0, r5
    18a4:	47c8      	blx	r9
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    18a6:	5c33      	ldrb	r3, [r6, r0]
    18a8:	4642      	mov	r2, r8
    18aa:	4393      	bics	r3, r2
    18ac:	d1f2      	bne.n	1894 <FreeRTOS_CLIProcessCommand+0x64>
    18ae:	e7eb      	b.n	1888 <FreeRTOS_CLIProcessCommand+0x58>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    18b0:	7b3f      	ldrb	r7, [r7, #12]
    18b2:	b27f      	sxtb	r7, r7
    18b4:	2f00      	cmp	r7, #0
    18b6:	db2d      	blt.n	1914 <FreeRTOS_CLIProcessCommand+0xe4>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    18b8:	7833      	ldrb	r3, [r6, #0]
    18ba:	2b00      	cmp	r3, #0
    18bc:	d028      	beq.n	1910 <FreeRTOS_CLIProcessCommand+0xe0>
    18be:	0032      	movs	r2, r6
    18c0:	2500      	movs	r5, #0
    18c2:	2100      	movs	r1, #0
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
    18c4:	2401      	movs	r4, #1
    18c6:	e008      	b.n	18da <FreeRTOS_CLIProcessCommand+0xaa>
    18c8:	2901      	cmp	r1, #1
    18ca:	d00a      	beq.n	18e2 <FreeRTOS_CLIProcessCommand+0xb2>
			{
				cParameters++;
    18cc:	3501      	adds	r5, #1
    18ce:	b26d      	sxtb	r5, r5
				xLastCharacterWasSpace = pdTRUE;
    18d0:	0021      	movs	r1, r4
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
    18d2:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
    18d4:	7813      	ldrb	r3, [r2, #0]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d005      	beq.n	18e6 <FreeRTOS_CLIProcessCommand+0xb6>
		if( ( *pcCommandString ) == ' ' )
    18da:	2b20      	cmp	r3, #32
    18dc:	d0f4      	beq.n	18c8 <FreeRTOS_CLIProcessCommand+0x98>
			xLastCharacterWasSpace = pdFALSE;
    18de:	0001      	movs	r1, r0
    18e0:	e7f7      	b.n	18d2 <FreeRTOS_CLIProcessCommand+0xa2>
			if( xLastCharacterWasSpace != pdTRUE )
    18e2:	0021      	movs	r1, r4
    18e4:	e7f5      	b.n	18d2 <FreeRTOS_CLIProcessCommand+0xa2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    18e6:	2901      	cmp	r1, #1
    18e8:	d00f      	beq.n	190a <FreeRTOS_CLIProcessCommand+0xda>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    18ea:	4b10      	ldr	r3, [pc, #64]	; (192c <FreeRTOS_CLIProcessCommand+0xfc>)
    18ec:	681b      	ldr	r3, [r3, #0]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d014      	beq.n	191c <FreeRTOS_CLIProcessCommand+0xec>
    18f2:	42af      	cmp	r7, r5
    18f4:	d0aa      	beq.n	184c <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    18f6:	9a01      	ldr	r2, [sp, #4]
    18f8:	4910      	ldr	r1, [pc, #64]	; (193c <FreeRTOS_CLIProcessCommand+0x10c>)
    18fa:	9800      	ldr	r0, [sp, #0]
    18fc:	4b10      	ldr	r3, [pc, #64]	; (1940 <FreeRTOS_CLIProcessCommand+0x110>)
    18fe:	4798      	blx	r3
		pxCommand = NULL;
    1900:	2200      	movs	r2, #0
    1902:	4b0a      	ldr	r3, [pc, #40]	; (192c <FreeRTOS_CLIProcessCommand+0xfc>)
    1904:	601a      	str	r2, [r3, #0]
    1906:	2000      	movs	r0, #0
    1908:	e7ab      	b.n	1862 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
    190a:	3d01      	subs	r5, #1
    190c:	b26d      	sxtb	r5, r5
    190e:	e7ec      	b.n	18ea <FreeRTOS_CLIProcessCommand+0xba>
	while( *pcCommandString != 0x00 )
    1910:	2500      	movs	r5, #0
    1912:	e7ea      	b.n	18ea <FreeRTOS_CLIProcessCommand+0xba>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
    1914:	4b05      	ldr	r3, [pc, #20]	; (192c <FreeRTOS_CLIProcessCommand+0xfc>)
    1916:	681b      	ldr	r3, [r3, #0]
    1918:	2b00      	cmp	r3, #0
    191a:	d197      	bne.n	184c <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    191c:	9a01      	ldr	r2, [sp, #4]
    191e:	4909      	ldr	r1, [pc, #36]	; (1944 <FreeRTOS_CLIProcessCommand+0x114>)
    1920:	9800      	ldr	r0, [sp, #0]
    1922:	4b07      	ldr	r3, [pc, #28]	; (1940 <FreeRTOS_CLIProcessCommand+0x110>)
    1924:	4798      	blx	r3
		xReturn = pdFALSE;
    1926:	2000      	movs	r0, #0
	return xReturn;
    1928:	e79b      	b.n	1862 <FreeRTOS_CLIProcessCommand+0x32>
    192a:	46c0      	nop			; (mov r8, r8)
    192c:	20000318 	.word	0x20000318
    1930:	20000010 	.word	0x20000010
    1934:	00008c7d 	.word	0x00008c7d
    1938:	00008c8b 	.word	0x00008c8b
    193c:	000096f4 	.word	0x000096f4
    1940:	00008cad 	.word	0x00008cad
    1944:	0000974c 	.word	0x0000974c

00001948 <prvTraceGetQueueType>:
	return (uint32_t)uxQueueGetQueueNumber(handle);
}
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
    1948:	b510      	push	{r4, lr}
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
    194a:	4b01      	ldr	r3, [pc, #4]	; (1950 <prvTraceGetQueueType+0x8>)
    194c:	4798      	blx	r3
}
    194e:	bd10      	pop	{r4, pc}
    1950:	00003e85 	.word	0x00003e85

00001954 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
    1954:	b510      	push	{r4, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
    1956:	4b02      	ldr	r3, [pc, #8]	; (1960 <prvTraceGetTaskNumberLow16+0xc>)
    1958:	4798      	blx	r3
    195a:	b280      	uxth	r0, r0
}
    195c:	bd10      	pop	{r4, pc}
    195e:	46c0      	nop			; (mov r8, r8)
    1960:	00004ad5 	.word	0x00004ad5

00001964 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
    1964:	b510      	push	{r4, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
    1966:	4b02      	ldr	r3, [pc, #8]	; (1970 <prvTraceGetTaskNumberHigh16+0xc>)
    1968:	4798      	blx	r3
    196a:	0c00      	lsrs	r0, r0, #16
}
    196c:	bd10      	pop	{r4, pc}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	00004ad5 	.word	0x00004ad5

00001974 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
    1974:	b570      	push	{r4, r5, r6, lr}
    1976:	0004      	movs	r4, r0
    1978:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
    197a:	4b04      	ldr	r3, [pc, #16]	; (198c <prvTraceSetTaskNumberLow16+0x18>)
    197c:	4798      	blx	r3
    197e:	0c01      	lsrs	r1, r0, #16
    1980:	0409      	lsls	r1, r1, #16
    1982:	4329      	orrs	r1, r5
    1984:	0020      	movs	r0, r4
    1986:	4b02      	ldr	r3, [pc, #8]	; (1990 <prvTraceSetTaskNumberLow16+0x1c>)
    1988:	4798      	blx	r3
}
    198a:	bd70      	pop	{r4, r5, r6, pc}
    198c:	00004ad5 	.word	0x00004ad5
    1990:	00004ae1 	.word	0x00004ae1

00001994 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
    1994:	b570      	push	{r4, r5, r6, lr}
    1996:	0004      	movs	r4, r0
    1998:	000d      	movs	r5, r1
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
    199a:	4b05      	ldr	r3, [pc, #20]	; (19b0 <prvTraceSetTaskNumberHigh16+0x1c>)
    199c:	4798      	blx	r3
    199e:	0401      	lsls	r1, r0, #16
    19a0:	0c09      	lsrs	r1, r1, #16
    19a2:	042d      	lsls	r5, r5, #16
    19a4:	4329      	orrs	r1, r5
    19a6:	0020      	movs	r0, r4
    19a8:	4b02      	ldr	r3, [pc, #8]	; (19b4 <prvTraceSetTaskNumberHigh16+0x20>)
    19aa:	4798      	blx	r3
}
    19ac:	bd70      	pop	{r4, r5, r6, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	00004ad5 	.word	0x00004ad5
    19b4:	00004ae1 	.word	0x00004ae1

000019b8 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
    19b8:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    19ba:	4b02      	ldr	r3, [pc, #8]	; (19c4 <prvTraceGetQueueNumberLow16+0xc>)
    19bc:	4798      	blx	r3
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
    19be:	b280      	uxth	r0, r0
}
    19c0:	bd10      	pop	{r4, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	00003e7d 	.word	0x00003e7d

000019c8 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
    19c8:	b510      	push	{r4, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
    19ca:	4b02      	ldr	r3, [pc, #8]	; (19d4 <prvTraceGetQueueNumberHigh16+0xc>)
    19cc:	4798      	blx	r3
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
    19ce:	0c00      	lsrs	r0, r0, #16
}
    19d0:	bd10      	pop	{r4, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	00003e7d 	.word	0x00003e7d

000019d8 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
    19d8:	b570      	push	{r4, r5, r6, lr}
    19da:	0004      	movs	r4, r0
    19dc:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    19de:	4b04      	ldr	r3, [pc, #16]	; (19f0 <prvTraceSetQueueNumberLow16+0x18>)
    19e0:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
    19e2:	0c01      	lsrs	r1, r0, #16
    19e4:	0409      	lsls	r1, r1, #16
    19e6:	4329      	orrs	r1, r5
    19e8:	0020      	movs	r0, r4
    19ea:	4b02      	ldr	r3, [pc, #8]	; (19f4 <prvTraceSetQueueNumberLow16+0x1c>)
    19ec:	4798      	blx	r3
}
    19ee:	bd70      	pop	{r4, r5, r6, pc}
    19f0:	00003e7d 	.word	0x00003e7d
    19f4:	00003e81 	.word	0x00003e81

000019f8 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
    19f8:	b570      	push	{r4, r5, r6, lr}
    19fa:	0004      	movs	r4, r0
    19fc:	000d      	movs	r5, r1
	return (uint32_t)uxQueueGetQueueNumber(handle);
    19fe:	4b05      	ldr	r3, [pc, #20]	; (1a14 <prvTraceSetQueueNumberHigh16+0x1c>)
    1a00:	4798      	blx	r3
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
    1a02:	0401      	lsls	r1, r0, #16
    1a04:	0c09      	lsrs	r1, r1, #16
    1a06:	042d      	lsls	r5, r5, #16
    1a08:	4329      	orrs	r1, r5
    1a0a:	0020      	movs	r0, r4
    1a0c:	4b02      	ldr	r3, [pc, #8]	; (1a18 <prvTraceSetQueueNumberHigh16+0x20>)
    1a0e:	4798      	blx	r3
}
    1a10:	bd70      	pop	{r4, r5, r6, pc}
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	00003e7d 	.word	0x00003e7d
    1a18:	00003e81 	.word	0x00003e81

00001a1c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
    1a1c:	b510      	push	{r4, lr}
	return xTaskGetCurrentTaskHandle();
    1a1e:	4b01      	ldr	r3, [pc, #4]	; (1a24 <prvTraceGetCurrentTaskHandle+0x8>)
    1a20:	4798      	blx	r3
}
    1a22:	bd10      	pop	{r4, pc}
    1a24:	00004ae9 	.word	0x00004ae9

00001a28 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
    1a28:	b510      	push	{r4, lr}
    1a2a:	0004      	movs	r4, r0
	prvTraceInitTraceData();
    1a2c:	4b09      	ldr	r3, [pc, #36]	; (1a54 <vTraceEnable+0x2c>)
    1a2e:	4798      	blx	r3

	if (startOption == TRC_START)
    1a30:	2c01      	cmp	r4, #1
    1a32:	d004      	beq.n	1a3e <vTraceEnable+0x16>
	{
		vTraceStart();
	}
	else if (startOption == TRC_START_AWAIT_HOST)
    1a34:	2c02      	cmp	r4, #2
    1a36:	d005      	beq.n	1a44 <vTraceEnable+0x1c>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
	}
	else if (startOption != TRC_INIT)
    1a38:	2c00      	cmp	r4, #0
    1a3a:	d107      	bne.n	1a4c <vTraceEnable+0x24>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
    1a3c:	bd10      	pop	{r4, pc}
		vTraceStart();
    1a3e:	4b06      	ldr	r3, [pc, #24]	; (1a58 <vTraceEnable+0x30>)
    1a40:	4798      	blx	r3
    1a42:	e7fb      	b.n	1a3c <vTraceEnable+0x14>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
    1a44:	4805      	ldr	r0, [pc, #20]	; (1a5c <vTraceEnable+0x34>)
    1a46:	4b06      	ldr	r3, [pc, #24]	; (1a60 <vTraceEnable+0x38>)
    1a48:	4798      	blx	r3
    1a4a:	e7f7      	b.n	1a3c <vTraceEnable+0x14>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
    1a4c:	4805      	ldr	r0, [pc, #20]	; (1a64 <vTraceEnable+0x3c>)
    1a4e:	4b04      	ldr	r3, [pc, #16]	; (1a60 <vTraceEnable+0x38>)
    1a50:	4798      	blx	r3
}
    1a52:	e7f3      	b.n	1a3c <vTraceEnable+0x14>
    1a54:	00001c4d 	.word	0x00001c4d
    1a58:	00002a2d 	.word	0x00002a2d
    1a5c:	00009b08 	.word	0x00009b08
    1a60:	00001e25 	.word	0x00001e25
    1a64:	00009b48 	.word	0x00009b48

00001a68 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
    1a68:	b510      	push	{r4, lr}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
    1a6a:	4b2f      	ldr	r3, [pc, #188]	; (1b28 <vTraceInitObjectPropertyTable+0xc0>)
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	2209      	movs	r2, #9
    1a70:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
    1a72:	3201      	adds	r2, #1
    1a74:	2164      	movs	r1, #100	; 0x64
    1a76:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
    1a78:	3101      	adds	r1, #1
    1a7a:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
    1a7c:	3101      	adds	r1, #1
    1a7e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
    1a80:	3205      	adds	r2, #5
    1a82:	3101      	adds	r1, #1
    1a84:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
    1a86:	3962      	subs	r1, #98	; 0x62
    1a88:	2068      	movs	r0, #104	; 0x68
    1a8a:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
    1a8c:	3001      	adds	r0, #1
    1a8e:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
    1a90:	3001      	adds	r0, #1
    1a92:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
    1a94:	3001      	adds	r0, #1
    1a96:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
    1a98:	3001      	adds	r0, #1
    1a9a:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
    1a9c:	316b      	adds	r1, #107	; 0x6b
    1a9e:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
    1aa0:	3101      	adds	r1, #1
    1aa2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
    1aa4:	3101      	adds	r1, #1
    1aa6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
    1aa8:	3101      	adds	r1, #1
    1aaa:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
    1aac:	3101      	adds	r1, #1
    1aae:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
    1ab0:	3101      	adds	r1, #1
    1ab2:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
    1ab4:	3101      	adds	r1, #1
    1ab6:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
    1ab8:	3101      	adds	r1, #1
    1aba:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
    1abc:	3101      	adds	r1, #1
    1abe:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
    1ac0:	3968      	subs	r1, #104	; 0x68
    1ac2:	326d      	adds	r2, #109	; 0x6d
    1ac4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
    1ac6:	3201      	adds	r2, #1
    1ac8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
    1aca:	3201      	adds	r2, #1
    1acc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
    1ace:	3a6b      	subs	r2, #107	; 0x6b
    1ad0:	3013      	adds	r0, #19
    1ad2:	541a      	strb	r2, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
    1ad4:	2411      	movs	r4, #17
    1ad6:	3001      	adds	r0, #1
    1ad8:	541c      	strb	r4, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
    1ada:	3001      	adds	r0, #1
    1adc:	5419      	strb	r1, [r3, r0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
    1ade:	3172      	adds	r1, #114	; 0x72
    1ae0:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
    1ae2:	3101      	adds	r1, #1
    1ae4:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
    1ae6:	3101      	adds	r1, #1
    1ae8:	545a      	strb	r2, [r3, r1]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
    1aea:	2100      	movs	r1, #0
    1aec:	3275      	adds	r2, #117	; 0x75
    1aee:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
    1af0:	31a0      	adds	r1, #160	; 0xa0
    1af2:	3202      	adds	r2, #2
    1af4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
    1af6:	31a0      	adds	r1, #160	; 0xa0
    1af8:	3202      	adds	r2, #2
    1afa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
    1afc:	31a0      	adds	r1, #160	; 0xa0
    1afe:	3202      	adds	r2, #2
    1b00:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
    1b02:	490a      	ldr	r1, [pc, #40]	; (1b2c <vTraceInitObjectPropertyTable+0xc4>)
    1b04:	3202      	adds	r2, #2
    1b06:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
    1b08:	4909      	ldr	r1, [pc, #36]	; (1b30 <vTraceInitObjectPropertyTable+0xc8>)
    1b0a:	3202      	adds	r2, #2
    1b0c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
    1b0e:	4909      	ldr	r1, [pc, #36]	; (1b34 <vTraceInitObjectPropertyTable+0xcc>)
    1b10:	3202      	adds	r2, #2
    1b12:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
    1b14:	4908      	ldr	r1, [pc, #32]	; (1b38 <vTraceInitObjectPropertyTable+0xd0>)
    1b16:	3202      	adds	r2, #2
    1b18:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
    1b1a:	315f      	adds	r1, #95	; 0x5f
    1b1c:	3202      	adds	r2, #2
    1b1e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
    1b20:	4a06      	ldr	r2, [pc, #24]	; (1b3c <vTraceInitObjectPropertyTable+0xd4>)
    1b22:	661a      	str	r2, [r3, #96]	; 0x60
}
    1b24:	bd10      	pop	{r4, pc}
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	20000320 	.word	0x20000320
    1b2c:	000002fd 	.word	0x000002fd
    1b30:	00000352 	.word	0x00000352
    1b34:	000003a2 	.word	0x000003a2
    1b38:	00000401 	.word	0x00000401
    1b3c:	000004bf 	.word	0x000004bf

00001b40 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
    1b40:	4b17      	ldr	r3, [pc, #92]	; (1ba0 <vTraceInitObjectHandleStack+0x60>)
    1b42:	2200      	movs	r2, #0
    1b44:	825a      	strh	r2, [r3, #18]
    1b46:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
    1b48:	320a      	adds	r2, #10
    1b4a:	829a      	strh	r2, [r3, #20]
    1b4c:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
    1b4e:	320a      	adds	r2, #10
    1b50:	82da      	strh	r2, [r3, #22]
    1b52:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
    1b54:	320a      	adds	r2, #10
    1b56:	831a      	strh	r2, [r3, #24]
    1b58:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
    1b5a:	320f      	adds	r2, #15
    1b5c:	835a      	strh	r2, [r3, #26]
    1b5e:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
    1b60:	3205      	adds	r2, #5
    1b62:	839a      	strh	r2, [r3, #28]
    1b64:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
    1b66:	3205      	adds	r2, #5
    1b68:	83da      	strh	r2, [r3, #30]
    1b6a:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
    1b6c:	3205      	adds	r2, #5
    1b6e:	841a      	strh	r2, [r3, #32]
    1b70:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
    1b72:	3205      	adds	r2, #5
    1b74:	845a      	strh	r2, [r3, #34]	; 0x22
    1b76:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
    1b78:	3a38      	subs	r2, #56	; 0x38
    1b7a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
    1b7c:	320a      	adds	r2, #10
    1b7e:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
    1b80:	320a      	adds	r2, #10
    1b82:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
    1b84:	320f      	adds	r2, #15
    1b86:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
    1b88:	3205      	adds	r2, #5
    1b8a:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
    1b8c:	3205      	adds	r2, #5
    1b8e:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
    1b90:	3205      	adds	r2, #5
    1b92:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
    1b94:	3205      	adds	r2, #5
    1b96:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
    1b98:	3205      	adds	r2, #5
    1b9a:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1b9c:	4770      	bx	lr
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	2000033c 	.word	0x2000033c

00001ba4 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
    1ba4:	2808      	cmp	r0, #8
    1ba6:	d813      	bhi.n	1bd0 <pszTraceGetErrorNotEnoughHandles+0x2c>
    1ba8:	0080      	lsls	r0, r0, #2
    1baa:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <pszTraceGetErrorNotEnoughHandles+0x34>)
    1bac:	581b      	ldr	r3, [r3, r0]
    1bae:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
    1bb0:	480a      	ldr	r0, [pc, #40]	; (1bdc <pszTraceGetErrorNotEnoughHandles+0x38>)
    1bb2:	e010      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
    1bb4:	480a      	ldr	r0, [pc, #40]	; (1be0 <pszTraceGetErrorNotEnoughHandles+0x3c>)
    1bb6:	e00e      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
    1bb8:	480a      	ldr	r0, [pc, #40]	; (1be4 <pszTraceGetErrorNotEnoughHandles+0x40>)
    1bba:	e00c      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
    1bbc:	480a      	ldr	r0, [pc, #40]	; (1be8 <pszTraceGetErrorNotEnoughHandles+0x44>)
    1bbe:	e00a      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
    1bc0:	480a      	ldr	r0, [pc, #40]	; (1bec <pszTraceGetErrorNotEnoughHandles+0x48>)
    1bc2:	e008      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
    1bc4:	480a      	ldr	r0, [pc, #40]	; (1bf0 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    1bc6:	e006      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
    1bc8:	480a      	ldr	r0, [pc, #40]	; (1bf4 <pszTraceGetErrorNotEnoughHandles+0x50>)
    1bca:	e004      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
    1bcc:	480a      	ldr	r0, [pc, #40]	; (1bf8 <pszTraceGetErrorNotEnoughHandles+0x54>)
    1bce:	e002      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
    1bd0:	480a      	ldr	r0, [pc, #40]	; (1bfc <pszTraceGetErrorNotEnoughHandles+0x58>)
    1bd2:	e000      	b.n	1bd6 <pszTraceGetErrorNotEnoughHandles+0x32>
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
    1bd4:	480a      	ldr	r0, [pc, #40]	; (1c00 <pszTraceGetErrorNotEnoughHandles+0x5c>)
	}
}
    1bd6:	4770      	bx	lr
    1bd8:	000097e4 	.word	0x000097e4
    1bdc:	00009850 	.word	0x00009850
    1be0:	00009898 	.word	0x00009898
    1be4:	000098ec 	.word	0x000098ec
    1be8:	00009938 	.word	0x00009938
    1bec:	00009984 	.word	0x00009984
    1bf0:	000099d0 	.word	0x000099d0
    1bf4:	00009a24 	.word	0x00009a24
    1bf8:	00009a7c 	.word	0x00009a7c
    1bfc:	00009ad8 	.word	0x00009ad8
    1c00:	00009808 	.word	0x00009808

00001c04 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
    1c04:	b510      	push	{r4, lr}
	uint32_t i;
	for (i = 0; i < maxLength; i++)
    1c06:	2a00      	cmp	r2, #0
    1c08:	d00d      	beq.n	1c26 <prvStrncpy+0x22>
	{
		dst[i] = src[i];
    1c0a:	780b      	ldrb	r3, [r1, #0]
    1c0c:	7003      	strb	r3, [r0, #0]
		if (src[i] == 0)
    1c0e:	780b      	ldrb	r3, [r1, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d008      	beq.n	1c26 <prvStrncpy+0x22>
    1c14:	2300      	movs	r3, #0
	for (i = 0; i < maxLength; i++)
    1c16:	3301      	adds	r3, #1
    1c18:	429a      	cmp	r2, r3
    1c1a:	d004      	beq.n	1c26 <prvStrncpy+0x22>
		dst[i] = src[i];
    1c1c:	5ccc      	ldrb	r4, [r1, r3]
    1c1e:	54c4      	strb	r4, [r0, r3]
		if (src[i] == 0)
    1c20:	5ccc      	ldrb	r4, [r1, r3]
    1c22:	2c00      	cmp	r4, #0
    1c24:	d1f7      	bne.n	1c16 <prvStrncpy+0x12>
			break;
	}
}
    1c26:	bd10      	pop	{r4, pc}

00001c28 <vTraceStop>:
{
    1c28:	b510      	push	{r4, lr}
	if (RecorderDataPtr != NULL)
    1c2a:	4b06      	ldr	r3, [pc, #24]	; (1c44 <vTraceStop+0x1c>)
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d001      	beq.n	1c36 <vTraceStop+0xe>
		RecorderDataPtr->recorderActive = 0;
    1c32:	2200      	movs	r2, #0
    1c34:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
    1c36:	4b04      	ldr	r3, [pc, #16]	; (1c48 <vTraceStop+0x20>)
    1c38:	681b      	ldr	r3, [r3, #0]
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d000      	beq.n	1c40 <vTraceStop+0x18>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
    1c3e:	4798      	blx	r3
}
    1c40:	bd10      	pop	{r4, pc}
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	20000320 	.word	0x20000320
    1c48:	200003e8 	.word	0x200003e8

00001c4c <prvTraceInitTraceData>:
{	
    1c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c4e:	46de      	mov	lr, fp
    1c50:	4657      	mov	r7, sl
    1c52:	464e      	mov	r6, r9
    1c54:	4645      	mov	r5, r8
    1c56:	b5e0      	push	{r5, r6, r7, lr}
	if (RecorderDataPtr == NULL)
    1c58:	4b51      	ldr	r3, [pc, #324]	; (1da0 <prvTraceInitTraceData+0x154>)
    1c5a:	681b      	ldr	r3, [r3, #0]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	d100      	bne.n	1c62 <prvTraceInitTraceData+0x16>
    1c60:	e099      	b.n	1d96 <prvTraceInitTraceData+0x14a>
		if (RecorderDataPtr->startmarker0 == 1)
    1c62:	781b      	ldrb	r3, [r3, #0]
    1c64:	2b01      	cmp	r3, #1
    1c66:	d100      	bne.n	1c6a <prvTraceInitTraceData+0x1e>
    1c68:	e08f      	b.n	1d8a <prvTraceInitTraceData+0x13e>
	init_hwtc_count = TRC_HWTC_COUNT;
    1c6a:	4b4e      	ldr	r3, [pc, #312]	; (1da4 <prvTraceInitTraceData+0x158>)
    1c6c:	681a      	ldr	r2, [r3, #0]
    1c6e:	4b4e      	ldr	r3, [pc, #312]	; (1da8 <prvTraceInitTraceData+0x15c>)
    1c70:	601a      	str	r2, [r3, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
    1c72:	4c4b      	ldr	r4, [pc, #300]	; (1da0 <prvTraceInitTraceData+0x154>)
    1c74:	4d4d      	ldr	r5, [pc, #308]	; (1dac <prvTraceInitTraceData+0x160>)
    1c76:	002a      	movs	r2, r5
    1c78:	2100      	movs	r1, #0
    1c7a:	6820      	ldr	r0, [r4, #0]
    1c7c:	4b4c      	ldr	r3, [pc, #304]	; (1db0 <prvTraceInitTraceData+0x164>)
    1c7e:	4798      	blx	r3
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
    1c80:	6823      	ldr	r3, [r4, #0]
    1c82:	4a4c      	ldr	r2, [pc, #304]	; (1db4 <prvTraceInitTraceData+0x168>)
    1c84:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
    1c86:	2205      	movs	r2, #5
    1c88:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
    1c8a:	2200      	movs	r2, #0
    1c8c:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
    1c8e:	611d      	str	r5, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
    1c90:	21c8      	movs	r1, #200	; 0xc8
    1c92:	0049      	lsls	r1, r1, #1
    1c94:	6199      	str	r1, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
    1c96:	4948      	ldr	r1, [pc, #288]	; (1db8 <prvTraceInitTraceData+0x16c>)
    1c98:	6559      	str	r1, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
    1c9a:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
    1c9c:	635a      	str	r2, [r3, #52]	; 0x34
	vTraceInitObjectPropertyTable();
    1c9e:	4b47      	ldr	r3, [pc, #284]	; (1dbc <prvTraceInitTraceData+0x170>)
    1ca0:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
    1ca2:	6820      	ldr	r0, [r4, #0]
    1ca4:	4a46      	ldr	r2, [pc, #280]	; (1dc0 <prvTraceInitTraceData+0x174>)
    1ca6:	4b47      	ldr	r3, [pc, #284]	; (1dc4 <prvTraceInitTraceData+0x178>)
    1ca8:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
    1caa:	22c8      	movs	r2, #200	; 0xc8
    1cac:	0092      	lsls	r2, r2, #2
    1cae:	3304      	adds	r3, #4
    1cb0:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
    1cb2:	4b45      	ldr	r3, [pc, #276]	; (1dc8 <prvTraceInitTraceData+0x17c>)
    1cb4:	2201      	movs	r2, #1
    1cb6:	50c2      	str	r2, [r0, r3]
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
    1cb8:	4a44      	ldr	r2, [pc, #272]	; (1dcc <prvTraceInitTraceData+0x180>)
    1cba:	2391      	movs	r3, #145	; 0x91
    1cbc:	011b      	lsls	r3, r3, #4
    1cbe:	50c2      	str	r2, [r0, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
    1cc0:	4b43      	ldr	r3, [pc, #268]	; (1dd0 <prvTraceInitTraceData+0x184>)
    1cc2:	469c      	mov	ip, r3
    1cc4:	4460      	add	r0, ip
    1cc6:	2250      	movs	r2, #80	; 0x50
    1cc8:	4942      	ldr	r1, [pc, #264]	; (1dd4 <prvTraceInitTraceData+0x188>)
    1cca:	4b43      	ldr	r3, [pc, #268]	; (1dd8 <prvTraceInitTraceData+0x18c>)
    1ccc:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
    1cce:	6823      	ldr	r3, [r4, #0]
    1cd0:	4942      	ldr	r1, [pc, #264]	; (1ddc <prvTraceInitTraceData+0x190>)
    1cd2:	4a43      	ldr	r2, [pc, #268]	; (1de0 <prvTraceInitTraceData+0x194>)
    1cd4:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
    1cd6:	210a      	movs	r1, #10
    1cd8:	4a42      	ldr	r2, [pc, #264]	; (1de4 <prvTraceInitTraceData+0x198>)
    1cda:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
    1cdc:	3101      	adds	r1, #1
    1cde:	4a42      	ldr	r2, [pc, #264]	; (1de8 <prvTraceInitTraceData+0x19c>)
    1ce0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
    1ce2:	3101      	adds	r1, #1
    1ce4:	4a41      	ldr	r2, [pc, #260]	; (1dec <prvTraceInitTraceData+0x1a0>)
    1ce6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
    1ce8:	3101      	adds	r1, #1
    1cea:	4a41      	ldr	r2, [pc, #260]	; (1df0 <prvTraceInitTraceData+0x1a4>)
    1cec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
    1cee:	3201      	adds	r2, #1
    1cf0:	3164      	adds	r1, #100	; 0x64
    1cf2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
    1cf4:	2572      	movs	r5, #114	; 0x72
    1cf6:	4a3f      	ldr	r2, [pc, #252]	; (1df4 <prvTraceInitTraceData+0x1a8>)
    1cf8:	549d      	strb	r5, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
    1cfa:	2673      	movs	r6, #115	; 0x73
    1cfc:	4a3e      	ldr	r2, [pc, #248]	; (1df8 <prvTraceInitTraceData+0x1ac>)
    1cfe:	549e      	strb	r6, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
    1d00:	2774      	movs	r7, #116	; 0x74
    1d02:	4a3e      	ldr	r2, [pc, #248]	; (1dfc <prvTraceInitTraceData+0x1b0>)
    1d04:	549f      	strb	r7, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
    1d06:	22f1      	movs	r2, #241	; 0xf1
    1d08:	4690      	mov	r8, r2
    1d0a:	4a3d      	ldr	r2, [pc, #244]	; (1e00 <prvTraceInitTraceData+0x1b4>)
    1d0c:	4641      	mov	r1, r8
    1d0e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
    1d10:	22f2      	movs	r2, #242	; 0xf2
    1d12:	4691      	mov	r9, r2
    1d14:	4a3b      	ldr	r2, [pc, #236]	; (1e04 <prvTraceInitTraceData+0x1b8>)
    1d16:	4649      	mov	r1, r9
    1d18:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
    1d1a:	22f3      	movs	r2, #243	; 0xf3
    1d1c:	4692      	mov	sl, r2
    1d1e:	4a3a      	ldr	r2, [pc, #232]	; (1e08 <prvTraceInitTraceData+0x1bc>)
    1d20:	4651      	mov	r1, sl
    1d22:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
    1d24:	22f4      	movs	r2, #244	; 0xf4
    1d26:	4693      	mov	fp, r2
    1d28:	4a38      	ldr	r2, [pc, #224]	; (1e0c <prvTraceInitTraceData+0x1c0>)
    1d2a:	4659      	mov	r1, fp
    1d2c:	5499      	strb	r1, [r3, r2]
	vTraceInitObjectHandleStack();
    1d2e:	4b38      	ldr	r3, [pc, #224]	; (1e10 <prvTraceInitTraceData+0x1c4>)
    1d30:	4798      	blx	r3
	RecorderDataPtr->startmarker11 = 0xF4;
    1d32:	6823      	ldr	r3, [r4, #0]
    1d34:	465a      	mov	r2, fp
    1d36:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
    1d38:	4652      	mov	r2, sl
    1d3a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
    1d3c:	464a      	mov	r2, r9
    1d3e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
    1d40:	4642      	mov	r2, r8
    1d42:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
    1d44:	71df      	strb	r7, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
    1d46:	719e      	strb	r6, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
    1d48:	715d      	strb	r5, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
    1d4a:	2271      	movs	r2, #113	; 0x71
    1d4c:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
    1d4e:	2204      	movs	r2, #4
    1d50:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
    1d52:	2303      	movs	r3, #3
    1d54:	6822      	ldr	r2, [r4, #0]
    1d56:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
    1d58:	3b01      	subs	r3, #1
    1d5a:	6822      	ldr	r2, [r4, #0]
    1d5c:	7053      	strb	r3, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
    1d5e:	6823      	ldr	r3, [r4, #0]
    1d60:	2201      	movs	r2, #1
    1d62:	701a      	strb	r2, [r3, #0]
	if (traceErrorMessage != NULL)
    1d64:	4b2b      	ldr	r3, [pc, #172]	; (1e14 <prvTraceInitTraceData+0x1c8>)
    1d66:	6819      	ldr	r1, [r3, #0]
    1d68:	2900      	cmp	r1, #0
    1d6a:	d00e      	beq.n	1d8a <prvTraceInitTraceData+0x13e>
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    1d6c:	4c0c      	ldr	r4, [pc, #48]	; (1da0 <prvTraceInitTraceData+0x154>)
    1d6e:	6823      	ldr	r3, [r4, #0]
    1d70:	4a17      	ldr	r2, [pc, #92]	; (1dd0 <prvTraceInitTraceData+0x184>)
    1d72:	4694      	mov	ip, r2
    1d74:	4463      	add	r3, ip
    1d76:	0018      	movs	r0, r3
    1d78:	2250      	movs	r2, #80	; 0x50
    1d7a:	4b17      	ldr	r3, [pc, #92]	; (1dd8 <prvTraceInitTraceData+0x18c>)
    1d7c:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
    1d7e:	6822      	ldr	r2, [r4, #0]
    1d80:	2101      	movs	r1, #1
    1d82:	4b25      	ldr	r3, [pc, #148]	; (1e18 <prvTraceInitTraceData+0x1cc>)
    1d84:	50d1      	str	r1, [r2, r3]
		vTraceStop();
    1d86:	4b25      	ldr	r3, [pc, #148]	; (1e1c <prvTraceInitTraceData+0x1d0>)
    1d88:	4798      	blx	r3
}
    1d8a:	bc3c      	pop	{r2, r3, r4, r5}
    1d8c:	4690      	mov	r8, r2
    1d8e:	4699      	mov	r9, r3
    1d90:	46a2      	mov	sl, r4
    1d92:	46ab      	mov	fp, r5
    1d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	RecorderDataPtr = &RecorderData;
    1d96:	4a22      	ldr	r2, [pc, #136]	; (1e20 <prvTraceInitTraceData+0x1d4>)
    1d98:	4b01      	ldr	r3, [pc, #4]	; (1da0 <prvTraceInitTraceData+0x154>)
    1d9a:	601a      	str	r2, [r3, #0]
    1d9c:	e765      	b.n	1c6a <prvTraceInitTraceData+0x1e>
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	20000320 	.word	0x20000320
    1da4:	e000e018 	.word	0xe000e018
    1da8:	20004868 	.word	0x20004868
    1dac:	00000fb8 	.word	0x00000fb8
    1db0:	00008a13 	.word	0x00008a13
    1db4:	00001aa1 	.word	0x00001aa1
    1db8:	f0f0f0f0 	.word	0xf0f0f0f0
    1dbc:	00001a69 	.word	0x00001a69
    1dc0:	f1f1f1f1 	.word	0xf1f1f1f1
    1dc4:	0000055c 	.word	0x0000055c
    1dc8:	00000564 	.word	0x00000564
    1dcc:	f2f2f2f2 	.word	0xf2f2f2f2
    1dd0:	00000914 	.word	0x00000914
    1dd4:	00009d48 	.word	0x00009d48
    1dd8:	00001c05 	.word	0x00001c05
    1ddc:	f3f3f3f3 	.word	0xf3f3f3f3
    1de0:	00000964 	.word	0x00000964
    1de4:	00000fac 	.word	0x00000fac
    1de8:	00000fad 	.word	0x00000fad
    1dec:	00000fae 	.word	0x00000fae
    1df0:	00000faf 	.word	0x00000faf
    1df4:	00000fb1 	.word	0x00000fb1
    1df8:	00000fb2 	.word	0x00000fb2
    1dfc:	00000fb3 	.word	0x00000fb3
    1e00:	00000fb4 	.word	0x00000fb4
    1e04:	00000fb5 	.word	0x00000fb5
    1e08:	00000fb6 	.word	0x00000fb6
    1e0c:	00000fb7 	.word	0x00000fb7
    1e10:	00001b41 	.word	0x00001b41
    1e14:	200003d8 	.word	0x200003d8
    1e18:	0000090c 	.word	0x0000090c
    1e1c:	00001c29 	.word	0x00001c29
    1e20:	200038b0 	.word	0x200038b0

00001e24 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
    1e24:	b510      	push	{r4, lr}
    1e26:	0004      	movs	r4, r0
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
    1e28:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <prvTraceError+0x40>)
    1e2a:	681b      	ldr	r3, [r3, #0]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d001      	beq.n	1e34 <prvTraceError+0x10>
	{
		vTraceStop();
    1e30:	4b0d      	ldr	r3, [pc, #52]	; (1e68 <prvTraceError+0x44>)
    1e32:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
    1e34:	4b0d      	ldr	r3, [pc, #52]	; (1e6c <prvTraceError+0x48>)
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d000      	beq.n	1e3e <prvTraceError+0x1a>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
			RecorderDataPtr->internalErrorOccured = 1;
		}
	}
}
    1e3c:	bd10      	pop	{r4, pc}
		traceErrorMessage = (char*)(intptr_t) msg;
    1e3e:	4b0b      	ldr	r3, [pc, #44]	; (1e6c <prvTraceError+0x48>)
    1e40:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
    1e42:	4b08      	ldr	r3, [pc, #32]	; (1e64 <prvTraceError+0x40>)
    1e44:	6818      	ldr	r0, [r3, #0]
    1e46:	2800      	cmp	r0, #0
    1e48:	d0f8      	beq.n	1e3c <prvTraceError+0x18>
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
    1e4a:	4b09      	ldr	r3, [pc, #36]	; (1e70 <prvTraceError+0x4c>)
    1e4c:	469c      	mov	ip, r3
    1e4e:	4460      	add	r0, ip
    1e50:	2250      	movs	r2, #80	; 0x50
    1e52:	0021      	movs	r1, r4
    1e54:	4b07      	ldr	r3, [pc, #28]	; (1e74 <prvTraceError+0x50>)
    1e56:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
    1e58:	4b02      	ldr	r3, [pc, #8]	; (1e64 <prvTraceError+0x40>)
    1e5a:	681a      	ldr	r2, [r3, #0]
    1e5c:	2101      	movs	r1, #1
    1e5e:	4b06      	ldr	r3, [pc, #24]	; (1e78 <prvTraceError+0x54>)
    1e60:	50d1      	str	r1, [r2, r3]
}
    1e62:	e7eb      	b.n	1e3c <prvTraceError+0x18>
    1e64:	20000320 	.word	0x20000320
    1e68:	00001c29 	.word	0x00001c29
    1e6c:	200003d8 	.word	0x200003d8
    1e70:	00000914 	.word	0x00000914
    1e74:	00001c05 	.word	0x00001c05
    1e78:	0000090c 	.word	0x0000090c

00001e7c <prvTraceNextFreeEventBufferSlot>:
{
    1e7c:	b510      	push	{r4, lr}
	if (! RecorderDataPtr->recorderActive)
    1e7e:	4b0b      	ldr	r3, [pc, #44]	; (1eac <prvTraceNextFreeEventBufferSlot+0x30>)
    1e80:	6818      	ldr	r0, [r3, #0]
    1e82:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1e84:	2b00      	cmp	r3, #0
    1e86:	d00f      	beq.n	1ea8 <prvTraceNextFreeEventBufferSlot+0x2c>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    1e88:	69c3      	ldr	r3, [r0, #28]
    1e8a:	2290      	movs	r2, #144	; 0x90
    1e8c:	32ff      	adds	r2, #255	; 0xff
    1e8e:	4293      	cmp	r3, r2
    1e90:	d805      	bhi.n	1e9e <prvTraceNextFreeEventBufferSlot+0x22>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
    1e92:	009b      	lsls	r3, r3, #2
    1e94:	4a06      	ldr	r2, [pc, #24]	; (1eb0 <prvTraceNextFreeEventBufferSlot+0x34>)
    1e96:	4694      	mov	ip, r2
    1e98:	4463      	add	r3, ip
    1e9a:	18c0      	adds	r0, r0, r3
}
    1e9c:	bd10      	pop	{r4, pc}
		prvTraceError("Attempt to index outside event buffer!");
    1e9e:	4805      	ldr	r0, [pc, #20]	; (1eb4 <prvTraceNextFreeEventBufferSlot+0x38>)
    1ea0:	4b05      	ldr	r3, [pc, #20]	; (1eb8 <prvTraceNextFreeEventBufferSlot+0x3c>)
    1ea2:	4798      	blx	r3
		return NULL;
    1ea4:	2000      	movs	r0, #0
    1ea6:	e7f9      	b.n	1e9c <prvTraceNextFreeEventBufferSlot+0x20>
		return NULL;
    1ea8:	2000      	movs	r0, #0
    1eaa:	e7f7      	b.n	1e9c <prvTraceNextFreeEventBufferSlot+0x20>
    1eac:	20000320 	.word	0x20000320
    1eb0:	00000968 	.word	0x00000968
    1eb4:	00009d5c 	.word	0x00009d5c
    1eb8:	00001e25 	.word	0x00001e25

00001ebc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
    1ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ebe:	46c6      	mov	lr, r8
    1ec0:	b500      	push	{lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
    1ec2:	2800      	cmp	r0, #0
    1ec4:	d006      	beq.n	1ed4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
    1ec6:	0007      	movs	r7, r0
    1ec8:	2500      	movs	r5, #0
    1eca:	2800      	cmp	r0, #0
    1ecc:	d005      	beq.n	1eda <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
	{
		e = RecorderDataPtr->nextFreeIndex + i;
    1ece:	4b23      	ldr	r3, [pc, #140]	; (1f5c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa0>)
    1ed0:	4698      	mov	r8, r3
    1ed2:	e00a      	b.n	1eea <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
	TRACE_ASSERT(nofEntriesToCheck != 0, 
    1ed4:	4822      	ldr	r0, [pc, #136]	; (1f60 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>)
    1ed6:	4b23      	ldr	r3, [pc, #140]	; (1f64 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
    1ed8:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
	}
}
    1eda:	bc04      	pop	{r2}
    1edc:	4690      	mov	r8, r2
    1ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
    1ee0:	2a01      	cmp	r2, #1
    1ee2:	d020      	beq.n	1f26 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6a>
		i++;
    1ee4:	3501      	adds	r5, #1
	while (i < nofEntriesToCheck)
    1ee6:	42bd      	cmp	r5, r7
    1ee8:	d2f7      	bcs.n	1eda <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
		e = RecorderDataPtr->nextFreeIndex + i;
    1eea:	4643      	mov	r3, r8
    1eec:	681c      	ldr	r4, [r3, #0]
    1eee:	69e3      	ldr	r3, [r4, #28]
    1ef0:	18eb      	adds	r3, r5, r3
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
    1ef2:	009e      	lsls	r6, r3, #2
    1ef4:	19a2      	adds	r2, r4, r6
    1ef6:	491c      	ldr	r1, [pc, #112]	; (1f68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    1ef8:	468c      	mov	ip, r1
    1efa:	4462      	add	r2, ip
    1efc:	7812      	ldrb	r2, [r2, #0]
    1efe:	0011      	movs	r1, r2
    1f00:	3167      	adds	r1, #103	; 0x67
    1f02:	b2c9      	uxtb	r1, r1
    1f04:	290e      	cmp	r1, #14
    1f06:	d8eb      	bhi.n	1ee0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
    1f08:	3268      	adds	r2, #104	; 0x68
    1f0a:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
    1f0c:	18d3      	adds	r3, r2, r3
    1f0e:	69a1      	ldr	r1, [r4, #24]
    1f10:	428b      	cmp	r3, r1
    1f12:	d2e7      	bcs.n	1ee4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
    1f14:	3201      	adds	r2, #1
    1f16:	0092      	lsls	r2, r2, #2
    1f18:	4663      	mov	r3, ip
    1f1a:	18f0      	adds	r0, r6, r3
    1f1c:	1820      	adds	r0, r4, r0
    1f1e:	2100      	movs	r1, #0
    1f20:	4b12      	ldr	r3, [pc, #72]	; (1f6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    1f22:	4798      	blx	r3
    1f24:	e7de      	b.n	1ee4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
    1f26:	3301      	adds	r3, #1
    1f28:	69a2      	ldr	r2, [r4, #24]
    1f2a:	4293      	cmp	r3, r2
    1f2c:	d207      	bcs.n	1f3e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
    1f2e:	4b0e      	ldr	r3, [pc, #56]	; (1f68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    1f30:	18f0      	adds	r0, r6, r3
    1f32:	1820      	adds	r0, r4, r0
    1f34:	2208      	movs	r2, #8
    1f36:	2100      	movs	r1, #0
    1f38:	4b0c      	ldr	r3, [pc, #48]	; (1f6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    1f3a:	4798      	blx	r3
    1f3c:	e7d2      	b.n	1ee4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
    1f3e:	4b0a      	ldr	r3, [pc, #40]	; (1f68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    1f40:	18e0      	adds	r0, r4, r3
    1f42:	2204      	movs	r2, #4
    1f44:	2100      	movs	r1, #0
    1f46:	4b09      	ldr	r3, [pc, #36]	; (1f6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    1f48:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
    1f4a:	4b07      	ldr	r3, [pc, #28]	; (1f68 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    1f4c:	18f0      	adds	r0, r6, r3
    1f4e:	1820      	adds	r0, r4, r0
    1f50:	2204      	movs	r2, #4
    1f52:	2100      	movs	r1, #0
    1f54:	4b05      	ldr	r3, [pc, #20]	; (1f6c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    1f56:	4798      	blx	r3
    1f58:	e7c4      	b.n	1ee4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	20000320 	.word	0x20000320
    1f60:	00009b7c 	.word	0x00009b7c
    1f64:	00001e25 	.word	0x00001e25
    1f68:	00000968 	.word	0x00000968
    1f6c:	00008a13 	.word	0x00008a13

00001f70 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
    1f70:	b510      	push	{r4, lr}
	if (RecorderDataPtr->recorderActive == 0)
    1f72:	4b0b      	ldr	r3, [pc, #44]	; (1fa0 <prvTraceUpdateCounters+0x30>)
    1f74:	681b      	ldr	r3, [r3, #0]
    1f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1f78:	2a00      	cmp	r2, #0
    1f7a:	d010      	beq.n	1f9e <prvTraceUpdateCounters+0x2e>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
    1f7c:	695a      	ldr	r2, [r3, #20]
    1f7e:	3201      	adds	r2, #1
    1f80:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
    1f82:	69da      	ldr	r2, [r3, #28]
    1f84:	3201      	adds	r2, #1
    1f86:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
    1f88:	2190      	movs	r1, #144	; 0x90
    1f8a:	31ff      	adds	r1, #255	; 0xff
    1f8c:	428a      	cmp	r2, r1
    1f8e:	d903      	bls.n	1f98 <prvTraceUpdateCounters+0x28>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
    1f90:	2201      	movs	r2, #1
    1f92:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
    1f94:	2200      	movs	r2, #0
    1f96:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
    1f98:	2001      	movs	r0, #1
    1f9a:	4b02      	ldr	r3, [pc, #8]	; (1fa4 <prvTraceUpdateCounters+0x34>)
    1f9c:	4798      	blx	r3
#endif
}
    1f9e:	bd10      	pop	{r4, pc}
    1fa0:	20000320 	.word	0x20000320
    1fa4:	00001ebd 	.word	0x00001ebd

00001fa8 <prvTraceGetParam>:
{
    1fa8:	b570      	push	{r4, r5, r6, lr}
    1faa:	0004      	movs	r4, r0
    1fac:	000d      	movs	r5, r1
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    1fae:	28ff      	cmp	r0, #255	; 0xff
    1fb0:	d002      	beq.n	1fb8 <prvTraceGetParam+0x10>
    1fb2:	4b0d      	ldr	r3, [pc, #52]	; (1fe8 <prvTraceGetParam+0x40>)
    1fb4:	4298      	cmp	r0, r3
    1fb6:	d103      	bne.n	1fc0 <prvTraceGetParam+0x18>
	if (param <= param_max)
    1fb8:	42ac      	cmp	r4, r5
    1fba:	d305      	bcc.n	1fc8 <prvTraceGetParam+0x20>
}
    1fbc:	0028      	movs	r0, r5
    1fbe:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
    1fc0:	480a      	ldr	r0, [pc, #40]	; (1fec <prvTraceGetParam+0x44>)
    1fc2:	4b0b      	ldr	r3, [pc, #44]	; (1ff0 <prvTraceGetParam+0x48>)
    1fc4:	4798      	blx	r3
    1fc6:	e7f9      	b.n	1fbc <prvTraceGetParam+0x14>
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
    1fc8:	4b0a      	ldr	r3, [pc, #40]	; (1ff4 <prvTraceGetParam+0x4c>)
    1fca:	4798      	blx	r3
		if (xps != NULL)
    1fcc:	2800      	cmp	r0, #0
    1fce:	d009      	beq.n	1fe4 <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
    1fd0:	2301      	movs	r3, #1
    1fd2:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
    1fd4:	002b      	movs	r3, r5
    1fd6:	43a3      	bics	r3, r4
    1fd8:	0a1a      	lsrs	r2, r3, #8
    1fda:	7042      	strb	r2, [r0, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
    1fdc:	0c1b      	lsrs	r3, r3, #16
    1fde:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
    1fe0:	4b05      	ldr	r3, [pc, #20]	; (1ff8 <prvTraceGetParam+0x50>)
    1fe2:	4798      	blx	r3
		return param & param_max;
    1fe4:	4025      	ands	r5, r4
    1fe6:	e7e9      	b.n	1fbc <prvTraceGetParam+0x14>
    1fe8:	0000ffff 	.word	0x0000ffff
    1fec:	00009c80 	.word	0x00009c80
    1ff0:	00001e25 	.word	0x00001e25
    1ff4:	00001e7d 	.word	0x00001e7d
    1ff8:	00001f71 	.word	0x00001f71

00001ffc <uiIndexOfObject>:
{
    1ffc:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    1ffe:	2908      	cmp	r1, #8
    2000:	d814      	bhi.n	202c <STACK_SIZE+0x2c>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    2002:	2800      	cmp	r0, #0
    2004:	d017      	beq.n	2036 <STACK_SIZE+0x36>
    2006:	4b0e      	ldr	r3, [pc, #56]	; (2040 <STACK_SIZE+0x40>)
    2008:	681a      	ldr	r2, [r3, #0]
    200a:	1853      	adds	r3, r2, r1
    200c:	3364      	adds	r3, #100	; 0x64
    200e:	781b      	ldrb	r3, [r3, #0]
    2010:	4283      	cmp	r3, r0
    2012:	d310      	bcc.n	2036 <STACK_SIZE+0x36>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    2014:	1853      	adds	r3, r2, r1
    2016:	337c      	adds	r3, #124	; 0x7c
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    2018:	781b      	ldrb	r3, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
    201a:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
    201c:	4358      	muls	r0, r3
    201e:	3140      	adds	r1, #64	; 0x40
    2020:	0049      	lsls	r1, r1, #1
    2022:	1851      	adds	r1, r2, r1
    2024:	890b      	ldrh	r3, [r1, #8]
    2026:	18c0      	adds	r0, r0, r3
    2028:	b280      	uxth	r0, r0
    202a:	e008      	b.n	203e <STACK_SIZE+0x3e>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    202c:	4805      	ldr	r0, [pc, #20]	; (2044 <STACK_SIZE+0x44>)
    202e:	4b06      	ldr	r3, [pc, #24]	; (2048 <STACK_SIZE+0x48>)
    2030:	4798      	blx	r3
    2032:	2000      	movs	r0, #0
    2034:	e003      	b.n	203e <STACK_SIZE+0x3e>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
    2036:	4805      	ldr	r0, [pc, #20]	; (204c <STACK_SIZE+0x4c>)
    2038:	4b03      	ldr	r3, [pc, #12]	; (2048 <STACK_SIZE+0x48>)
    203a:	4798      	blx	r3
    203c:	2000      	movs	r0, #0
}
    203e:	bd10      	pop	{r4, pc}
    2040:	20000320 	.word	0x20000320
    2044:	0000a310 	.word	0x0000a310
    2048:	00001e25 	.word	0x00001e25
    204c:	0000a350 	.word	0x0000a350

00002050 <prvMarkObjectAsUsed>:
{
    2050:	b510      	push	{r4, lr}
    2052:	000b      	movs	r3, r1
	uint16_t idx = uiIndexOfObject(handle, objectclass);
    2054:	0001      	movs	r1, r0
    2056:	0018      	movs	r0, r3
    2058:	4b04      	ldr	r3, [pc, #16]	; (206c <prvMarkObjectAsUsed+0x1c>)
    205a:	4798      	blx	r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
    205c:	4b04      	ldr	r3, [pc, #16]	; (2070 <prvMarkObjectAsUsed+0x20>)
    205e:	681b      	ldr	r3, [r3, #0]
    2060:	1818      	adds	r0, r3, r0
    2062:	309c      	adds	r0, #156	; 0x9c
    2064:	2301      	movs	r3, #1
    2066:	7003      	strb	r3, [r0, #0]
}
    2068:	bd10      	pop	{r4, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	00001ffd 	.word	0x00001ffd
    2070:	20000320 	.word	0x20000320

00002074 <prvTraceSetPriorityProperty>:
{
    2074:	b570      	push	{r4, r5, r6, lr}
    2076:	0004      	movs	r4, r0
    2078:	0008      	movs	r0, r1
    207a:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    207c:	2c08      	cmp	r4, #8
    207e:	d813      	bhi.n	20a8 <prvTraceSetPriorityProperty+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2080:	4b0d      	ldr	r3, [pc, #52]	; (20b8 <prvTraceSetPriorityProperty+0x44>)
    2082:	681b      	ldr	r3, [r3, #0]
    2084:	191b      	adds	r3, r3, r4
    2086:	3364      	adds	r3, #100	; 0x64
    2088:	781b      	ldrb	r3, [r3, #0]
    208a:	428b      	cmp	r3, r1
    208c:	d310      	bcc.n	20b0 <prvTraceSetPriorityProperty+0x3c>
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
    208e:	0021      	movs	r1, r4
    2090:	4b0a      	ldr	r3, [pc, #40]	; (20bc <prvTraceSetPriorityProperty+0x48>)
    2092:	4798      	blx	r3
    2094:	4b08      	ldr	r3, [pc, #32]	; (20b8 <prvTraceSetPriorityProperty+0x44>)
    2096:	681b      	ldr	r3, [r3, #0]
    2098:	191c      	adds	r4, r3, r4
    209a:	3470      	adds	r4, #112	; 0x70
    209c:	7822      	ldrb	r2, [r4, #0]
    209e:	181b      	adds	r3, r3, r0
    20a0:	189b      	adds	r3, r3, r2
    20a2:	339d      	adds	r3, #157	; 0x9d
    20a4:	701d      	strb	r5, [r3, #0]
}
    20a6:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    20a8:	4805      	ldr	r0, [pc, #20]	; (20c0 <prvTraceSetPriorityProperty+0x4c>)
    20aa:	4b06      	ldr	r3, [pc, #24]	; (20c4 <prvTraceSetPriorityProperty+0x50>)
    20ac:	4798      	blx	r3
    20ae:	e7fa      	b.n	20a6 <prvTraceSetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    20b0:	4805      	ldr	r0, [pc, #20]	; (20c8 <prvTraceSetPriorityProperty+0x54>)
    20b2:	4b04      	ldr	r3, [pc, #16]	; (20c4 <prvTraceSetPriorityProperty+0x50>)
    20b4:	4798      	blx	r3
    20b6:	e7f6      	b.n	20a6 <prvTraceSetPriorityProperty+0x32>
    20b8:	20000320 	.word	0x20000320
    20bc:	00001ffd 	.word	0x00001ffd
    20c0:	00009e98 	.word	0x00009e98
    20c4:	00001e25 	.word	0x00001e25
    20c8:	00009ee4 	.word	0x00009ee4

000020cc <prvTraceGetPriorityProperty>:
{
    20cc:	b510      	push	{r4, lr}
    20ce:	0004      	movs	r4, r0
    20d0:	0008      	movs	r0, r1
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    20d2:	2c08      	cmp	r4, #8
    20d4:	d813      	bhi.n	20fe <prvTraceGetPriorityProperty+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    20d6:	4b0f      	ldr	r3, [pc, #60]	; (2114 <prvTraceGetPriorityProperty+0x48>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	191b      	adds	r3, r3, r4
    20dc:	3364      	adds	r3, #100	; 0x64
    20de:	781b      	ldrb	r3, [r3, #0]
    20e0:	428b      	cmp	r3, r1
    20e2:	d311      	bcc.n	2108 <prvTraceGetPriorityProperty+0x3c>
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
    20e4:	0021      	movs	r1, r4
    20e6:	4b0c      	ldr	r3, [pc, #48]	; (2118 <prvTraceGetPriorityProperty+0x4c>)
    20e8:	4798      	blx	r3
    20ea:	4b0a      	ldr	r3, [pc, #40]	; (2114 <prvTraceGetPriorityProperty+0x48>)
    20ec:	681b      	ldr	r3, [r3, #0]
    20ee:	191c      	adds	r4, r3, r4
    20f0:	3470      	adds	r4, #112	; 0x70
    20f2:	7822      	ldrb	r2, [r4, #0]
    20f4:	181b      	adds	r3, r3, r0
    20f6:	189b      	adds	r3, r3, r2
    20f8:	339d      	adds	r3, #157	; 0x9d
    20fa:	7818      	ldrb	r0, [r3, #0]
}
    20fc:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    20fe:	4807      	ldr	r0, [pc, #28]	; (211c <prvTraceGetPriorityProperty+0x50>)
    2100:	4b07      	ldr	r3, [pc, #28]	; (2120 <prvTraceGetPriorityProperty+0x54>)
    2102:	4798      	blx	r3
    2104:	2000      	movs	r0, #0
    2106:	e7f9      	b.n	20fc <prvTraceGetPriorityProperty+0x30>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2108:	4806      	ldr	r0, [pc, #24]	; (2124 <prvTraceGetPriorityProperty+0x58>)
    210a:	4b05      	ldr	r3, [pc, #20]	; (2120 <prvTraceGetPriorityProperty+0x54>)
    210c:	4798      	blx	r3
    210e:	2000      	movs	r0, #0
    2110:	e7f4      	b.n	20fc <prvTraceGetPriorityProperty+0x30>
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	20000320 	.word	0x20000320
    2118:	00001ffd 	.word	0x00001ffd
    211c:	00009cbc 	.word	0x00009cbc
    2120:	00001e25 	.word	0x00001e25
    2124:	00009d08 	.word	0x00009d08

00002128 <prvTraceSetObjectState>:
{
    2128:	b570      	push	{r4, r5, r6, lr}
    212a:	0004      	movs	r4, r0
    212c:	0008      	movs	r0, r1
    212e:	0015      	movs	r5, r2
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    2130:	2c08      	cmp	r4, #8
    2132:	d813      	bhi.n	215c <prvTraceSetObjectState+0x34>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2134:	4b0d      	ldr	r3, [pc, #52]	; (216c <prvTraceSetObjectState+0x44>)
    2136:	681b      	ldr	r3, [r3, #0]
    2138:	191b      	adds	r3, r3, r4
    213a:	3364      	adds	r3, #100	; 0x64
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	428b      	cmp	r3, r1
    2140:	d310      	bcc.n	2164 <prvTraceSetObjectState+0x3c>
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
    2142:	0021      	movs	r1, r4
    2144:	4b0a      	ldr	r3, [pc, #40]	; (2170 <prvTraceSetObjectState+0x48>)
    2146:	4798      	blx	r3
    2148:	4b08      	ldr	r3, [pc, #32]	; (216c <prvTraceSetObjectState+0x44>)
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	191c      	adds	r4, r3, r4
    214e:	3470      	adds	r4, #112	; 0x70
    2150:	7822      	ldrb	r2, [r4, #0]
    2152:	181b      	adds	r3, r3, r0
    2154:	189b      	adds	r3, r3, r2
    2156:	339c      	adds	r3, #156	; 0x9c
    2158:	701d      	strb	r5, [r3, #0]
}
    215a:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
    215c:	4805      	ldr	r0, [pc, #20]	; (2174 <prvTraceSetObjectState+0x4c>)
    215e:	4b06      	ldr	r3, [pc, #24]	; (2178 <prvTraceSetObjectState+0x50>)
    2160:	4798      	blx	r3
    2162:	e7fa      	b.n	215a <prvTraceSetObjectState+0x32>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2164:	4805      	ldr	r0, [pc, #20]	; (217c <prvTraceSetObjectState+0x54>)
    2166:	4b04      	ldr	r3, [pc, #16]	; (2178 <prvTraceSetObjectState+0x50>)
    2168:	4798      	blx	r3
    216a:	e7f6      	b.n	215a <prvTraceSetObjectState+0x32>
    216c:	20000320 	.word	0x20000320
    2170:	00001ffd 	.word	0x00001ffd
    2174:	00009e18 	.word	0x00009e18
    2178:	00001e25 	.word	0x00001e25
    217c:	00009e5c 	.word	0x00009e5c

00002180 <prvTraceSetTaskInstanceFinished>:
{
    2180:	b510      	push	{r4, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    2182:	4b0b      	ldr	r3, [pc, #44]	; (21b0 <prvTraceSetTaskInstanceFinished+0x30>)
    2184:	681a      	ldr	r2, [r3, #0]
    2186:	2367      	movs	r3, #103	; 0x67
    2188:	5cd3      	ldrb	r3, [r2, r3]
    218a:	4283      	cmp	r3, r0
    218c:	d30c      	bcc.n	21a8 <prvTraceSetTaskInstanceFinished+0x28>
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
    218e:	2103      	movs	r1, #3
    2190:	4b08      	ldr	r3, [pc, #32]	; (21b4 <prvTraceSetTaskInstanceFinished+0x34>)
    2192:	4798      	blx	r3
    2194:	4b06      	ldr	r3, [pc, #24]	; (21b0 <prvTraceSetTaskInstanceFinished+0x30>)
    2196:	681b      	ldr	r3, [r3, #0]
    2198:	2273      	movs	r2, #115	; 0x73
    219a:	5c9a      	ldrb	r2, [r3, r2]
    219c:	181b      	adds	r3, r3, r0
    219e:	189b      	adds	r3, r3, r2
    21a0:	339c      	adds	r3, #156	; 0x9c
    21a2:	2200      	movs	r2, #0
    21a4:	701a      	strb	r2, [r3, #0]
}
    21a6:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
    21a8:	4803      	ldr	r0, [pc, #12]	; (21b8 <prvTraceSetTaskInstanceFinished+0x38>)
    21aa:	4b04      	ldr	r3, [pc, #16]	; (21bc <prvTraceSetTaskInstanceFinished+0x3c>)
    21ac:	4798      	blx	r3
    21ae:	e7fa      	b.n	21a6 <prvTraceSetTaskInstanceFinished+0x26>
    21b0:	20000320 	.word	0x20000320
    21b4:	00001ffd 	.word	0x00001ffd
    21b8:	00009f24 	.word	0x00009f24
    21bc:	00001e25 	.word	0x00001e25

000021c0 <prvTraceGetObjectHandle>:
{
    21c0:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    21c2:	4b2d      	ldr	r3, [pc, #180]	; (2278 <prvTraceGetObjectHandle+0xb8>)
    21c4:	681b      	ldr	r3, [r3, #0]
    21c6:	2b00      	cmp	r3, #0
    21c8:	d046      	beq.n	2258 <prvTraceGetObjectHandle+0x98>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    21ca:	2808      	cmp	r0, #8
    21cc:	d849      	bhi.n	2262 <prvTraceGetObjectHandle+0xa2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    21ce:	f3ef 8410 	mrs	r4, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    21d2:	2301      	movs	r3, #1
    21d4:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    21d8:	4a28      	ldr	r2, [pc, #160]	; (227c <prvTraceGetObjectHandle+0xbc>)
    21da:	6813      	ldr	r3, [r2, #0]
    21dc:	3301      	adds	r3, #1
    21de:	6013      	str	r3, [r2, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
    21e0:	4a27      	ldr	r2, [pc, #156]	; (2280 <prvTraceGetObjectHandle+0xc0>)
    21e2:	0043      	lsls	r3, r0, #1
    21e4:	5a9b      	ldrh	r3, [r3, r2]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
    21e6:	18d2      	adds	r2, r2, r3
    21e8:	3248      	adds	r2, #72	; 0x48
    21ea:	7812      	ldrb	r2, [r2, #0]
    21ec:	2a00      	cmp	r2, #0
    21ee:	d10a      	bne.n	2206 <prvTraceGetObjectHandle+0x46>
		objectHandleStacks.objectHandles[indexOfHandle] =
    21f0:	4923      	ldr	r1, [pc, #140]	; (2280 <prvTraceGetObjectHandle+0xc0>)
    21f2:	18cd      	adds	r5, r1, r3
    21f4:	3548      	adds	r5, #72	; 0x48
			(traceHandle)(1 + indexOfHandle -
    21f6:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
    21f8:	0006      	movs	r6, r0
    21fa:	3608      	adds	r6, #8
    21fc:	0076      	lsls	r6, r6, #1
    21fe:	1989      	adds	r1, r1, r6
			(traceHandle)(1 + indexOfHandle -
    2200:	8849      	ldrh	r1, [r1, #2]
    2202:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
    2204:	702a      	strb	r2, [r5, #0]
		> objectHandleStacks.highestIndexOfClass[objectclass])
    2206:	0001      	movs	r1, r0
    2208:	3110      	adds	r1, #16
    220a:	0049      	lsls	r1, r1, #1
    220c:	4a1c      	ldr	r2, [pc, #112]	; (2280 <prvTraceGetObjectHandle+0xc0>)
    220e:	1852      	adds	r2, r2, r1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
    2210:	8892      	ldrh	r2, [r2, #4]
    2212:	429a      	cmp	r2, r3
    2214:	d32a      	bcc.n	226c <prvTraceGetObjectHandle+0xac>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
    2216:	491a      	ldr	r1, [pc, #104]	; (2280 <prvTraceGetObjectHandle+0xc0>)
    2218:	18ca      	adds	r2, r1, r3
    221a:	3248      	adds	r2, #72	; 0x48
    221c:	7812      	ldrb	r2, [r2, #0]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
    221e:	3301      	adds	r3, #1
    2220:	b29b      	uxth	r3, r3
    2222:	0045      	lsls	r5, r0, #1
    2224:	526b      	strh	r3, [r5, r1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
    2226:	0005      	movs	r5, r0
    2228:	3508      	adds	r5, #8
    222a:	006d      	lsls	r5, r5, #1
    222c:	194d      	adds	r5, r1, r5
    222e:	886d      	ldrh	r5, [r5, #2]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
    2230:	1b5b      	subs	r3, r3, r5
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
    2232:	0005      	movs	r5, r0
    2234:	3518      	adds	r5, #24
    2236:	006d      	lsls	r5, r5, #1
    2238:	1949      	adds	r1, r1, r5
    223a:	88c9      	ldrh	r1, [r1, #6]
		if (hndCount >
    223c:	428b      	cmp	r3, r1
    223e:	dd03      	ble.n	2248 <prvTraceGetObjectHandle+0x88>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    2240:	490f      	ldr	r1, [pc, #60]	; (2280 <prvTraceGetObjectHandle+0xc0>)
    2242:	1948      	adds	r0, r1, r5
				(traceHandle)hndCount;
    2244:	b2db      	uxtb	r3, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
    2246:	80c3      	strh	r3, [r0, #6]
	trcCRITICAL_SECTION_END();
    2248:	490c      	ldr	r1, [pc, #48]	; (227c <prvTraceGetObjectHandle+0xbc>)
    224a:	680b      	ldr	r3, [r1, #0]
    224c:	3b01      	subs	r3, #1
    224e:	600b      	str	r3, [r1, #0]
    2250:	f384 8810 	msr	PRIMASK, r4
}
    2254:	0010      	movs	r0, r2
    2256:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
    2258:	480a      	ldr	r0, [pc, #40]	; (2284 <prvTraceGetObjectHandle+0xc4>)
    225a:	4b0b      	ldr	r3, [pc, #44]	; (2288 <prvTraceGetObjectHandle+0xc8>)
    225c:	4798      	blx	r3
    225e:	2200      	movs	r2, #0
    2260:	e7f8      	b.n	2254 <prvTraceGetObjectHandle+0x94>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
    2262:	480a      	ldr	r0, [pc, #40]	; (228c <prvTraceGetObjectHandle+0xcc>)
    2264:	4b08      	ldr	r3, [pc, #32]	; (2288 <prvTraceGetObjectHandle+0xc8>)
    2266:	4798      	blx	r3
    2268:	2200      	movs	r2, #0
    226a:	e7f3      	b.n	2254 <prvTraceGetObjectHandle+0x94>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    226c:	4b08      	ldr	r3, [pc, #32]	; (2290 <prvTraceGetObjectHandle+0xd0>)
    226e:	4798      	blx	r3
    2270:	4b05      	ldr	r3, [pc, #20]	; (2288 <prvTraceGetObjectHandle+0xc8>)
    2272:	4798      	blx	r3
		handle = 0;
    2274:	2200      	movs	r2, #0
    2276:	e7e7      	b.n	2248 <prvTraceGetObjectHandle+0x88>
    2278:	20000320 	.word	0x20000320
    227c:	200003d0 	.word	0x200003d0
    2280:	2000033c 	.word	0x2000033c
    2284:	0000a414 	.word	0x0000a414
    2288:	00001e25 	.word	0x00001e25
    228c:	00009c38 	.word	0x00009c38
    2290:	00001ba5 	.word	0x00001ba5

00002294 <prvTraceSetObjectName>:
{
    2294:	b570      	push	{r4, r5, r6, lr}
    2296:	0004      	movs	r4, r0
    2298:	0008      	movs	r0, r1
    229a:	1e15      	subs	r5, r2, #0
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    229c:	d012      	beq.n	22c4 <prvTraceSetObjectName+0x30>
	if (objectclass >= TRACE_NCLASSES)
    229e:	2c08      	cmp	r4, #8
    22a0:	d814      	bhi.n	22cc <prvTraceSetObjectName+0x38>
	if (handle == 0)
    22a2:	2900      	cmp	r1, #0
    22a4:	d016      	beq.n	22d4 <prvTraceSetObjectName+0x40>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
    22a6:	4b16      	ldr	r3, [pc, #88]	; (2300 <prvTraceSetObjectName+0x6c>)
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	191b      	adds	r3, r3, r4
    22ac:	3364      	adds	r3, #100	; 0x64
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	428b      	cmp	r3, r1
    22b2:	d313      	bcc.n	22dc <prvTraceSetObjectName+0x48>
		idx = uiIndexOfObject(handle, objectclass);
    22b4:	0021      	movs	r1, r4
    22b6:	4b13      	ldr	r3, [pc, #76]	; (2304 <prvTraceSetObjectName+0x70>)
    22b8:	4798      	blx	r3
		if (traceErrorMessage == NULL)
    22ba:	4b13      	ldr	r3, [pc, #76]	; (2308 <prvTraceSetObjectName+0x74>)
    22bc:	681b      	ldr	r3, [r3, #0]
    22be:	2b00      	cmp	r3, #0
    22c0:	d012      	beq.n	22e8 <prvTraceSetObjectName+0x54>
}
    22c2:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
    22c4:	4811      	ldr	r0, [pc, #68]	; (230c <prvTraceSetObjectName+0x78>)
    22c6:	4b12      	ldr	r3, [pc, #72]	; (2310 <prvTraceSetObjectName+0x7c>)
    22c8:	4798      	blx	r3
    22ca:	e7fa      	b.n	22c2 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal object class in prvTraceSetObjectName");
    22cc:	4811      	ldr	r0, [pc, #68]	; (2314 <prvTraceSetObjectName+0x80>)
    22ce:	4b10      	ldr	r3, [pc, #64]	; (2310 <prvTraceSetObjectName+0x7c>)
    22d0:	4798      	blx	r3
		return;
    22d2:	e7f6      	b.n	22c2 <prvTraceSetObjectName+0x2e>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
    22d4:	4810      	ldr	r0, [pc, #64]	; (2318 <prvTraceSetObjectName+0x84>)
    22d6:	4b0e      	ldr	r3, [pc, #56]	; (2310 <prvTraceSetObjectName+0x7c>)
    22d8:	4798      	blx	r3
		return;
    22da:	e7f2      	b.n	22c2 <prvTraceSetObjectName+0x2e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
    22dc:	0020      	movs	r0, r4
    22de:	4b0f      	ldr	r3, [pc, #60]	; (231c <prvTraceSetObjectName+0x88>)
    22e0:	4798      	blx	r3
    22e2:	4b0b      	ldr	r3, [pc, #44]	; (2310 <prvTraceSetObjectName+0x7c>)
    22e4:	4798      	blx	r3
    22e6:	e7ec      	b.n	22c2 <prvTraceSetObjectName+0x2e>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    22e8:	4b05      	ldr	r3, [pc, #20]	; (2300 <prvTraceSetObjectName+0x6c>)
    22ea:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
    22ec:	191c      	adds	r4, r3, r4
    22ee:	3470      	adds	r4, #112	; 0x70
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
    22f0:	7822      	ldrb	r2, [r4, #0]
    22f2:	309c      	adds	r0, #156	; 0x9c
    22f4:	1818      	adds	r0, r3, r0
    22f6:	0029      	movs	r1, r5
    22f8:	4b09      	ldr	r3, [pc, #36]	; (2320 <prvTraceSetObjectName+0x8c>)
    22fa:	4798      	blx	r3
    22fc:	e7e1      	b.n	22c2 <prvTraceSetObjectName+0x2e>
    22fe:	46c0      	nop			; (mov r8, r8)
    2300:	20000320 	.word	0x20000320
    2304:	00001ffd 	.word	0x00001ffd
    2308:	200003d8 	.word	0x200003d8
    230c:	00009d84 	.word	0x00009d84
    2310:	00001e25 	.word	0x00001e25
    2314:	00009db8 	.word	0x00009db8
    2318:	00009de8 	.word	0x00009de8
    231c:	00001ba5 	.word	0x00001ba5
    2320:	00001c05 	.word	0x00001c05

00002324 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
    2324:	b570      	push	{r4, r5, r6, lr}
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
    2326:	4b1e      	ldr	r3, [pc, #120]	; (23a0 <prvTracePortGetTimeStamp+0x7c>)
    2328:	681b      	ldr	r3, [r3, #0]
    232a:	2b01      	cmp	r3, #1
    232c:	d02b      	beq.n	2386 <prvTracePortGetTimeStamp+0x62>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
    232e:	4b1d      	ldr	r3, [pc, #116]	; (23a4 <prvTracePortGetTimeStamp+0x80>)
    2330:	6819      	ldr	r1, [r3, #0]
    2332:	4b1d      	ldr	r3, [pc, #116]	; (23a8 <prvTracePortGetTimeStamp+0x84>)
    2334:	681b      	ldr	r3, [r3, #0]
    2336:	3101      	adds	r1, #1
    2338:	1ac9      	subs	r1, r1, r3
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
    233a:	4b1c      	ldr	r3, [pc, #112]	; (23ac <prvTracePortGetTimeStamp+0x88>)
    233c:	681b      	ldr	r3, [r3, #0]
    233e:	4a1c      	ldr	r2, [pc, #112]	; (23b0 <prvTracePortGetTimeStamp+0x8c>)
    2340:	6814      	ldr	r4, [r2, #0]
    2342:	43e2      	mvns	r2, r4
    2344:	42da      	cmn	r2, r3
    2346:	d424      	bmi.n	2392 <prvTracePortGetTimeStamp+0x6e>
		traceTickCount = uiTraceTickCount;
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    2348:	4a1a      	ldr	r2, [pc, #104]	; (23b4 <prvTracePortGetTimeStamp+0x90>)
    234a:	6814      	ldr	r4, [r2, #0]
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
    234c:	42a1      	cmp	r1, r4
    234e:	41a4      	sbcs	r4, r4
    2350:	4264      	negs	r4, r4
    2352:	191c      	adds	r4, r3, r4
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
    2354:	2800      	cmp	r0, #0
    2356:	d01f      	beq.n	2398 <prvTracePortGetTimeStamp+0x74>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
    2358:	4d12      	ldr	r5, [pc, #72]	; (23a4 <prvTracePortGetTimeStamp+0x80>)
    235a:	682b      	ldr	r3, [r5, #0]
    235c:	3301      	adds	r3, #1
    235e:	089b      	lsrs	r3, r3, #2
    2360:	4363      	muls	r3, r4
    2362:	001a      	movs	r2, r3
    2364:	4e14      	ldr	r6, [pc, #80]	; (23b8 <prvTracePortGetTimeStamp+0x94>)
    2366:	6033      	str	r3, [r6, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
    2368:	682d      	ldr	r5, [r5, #0]
    236a:	3501      	adds	r5, #1
    236c:	2303      	movs	r3, #3
    236e:	402b      	ands	r3, r5
    2370:	4363      	muls	r3, r4
    2372:	185b      	adds	r3, r3, r1
    2374:	089b      	lsrs	r3, r3, #2
    2376:	189b      	adds	r3, r3, r2
    2378:	6033      	str	r3, [r6, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
    237a:	4a0c      	ldr	r2, [pc, #48]	; (23ac <prvTracePortGetTimeStamp+0x88>)
    237c:	6014      	str	r4, [r2, #0]
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;
    237e:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
    2380:	4b0c      	ldr	r3, [pc, #48]	; (23b4 <prvTracePortGetTimeStamp+0x90>)
    2382:	6019      	str	r1, [r3, #0]
}
    2384:	bd70      	pop	{r4, r5, r6, pc}
		if (pTimestamp)
    2386:	2800      	cmp	r0, #0
    2388:	d0fc      	beq.n	2384 <prvTracePortGetTimeStamp+0x60>
			*pTimestamp = last_timestamp;
    238a:	4b0b      	ldr	r3, [pc, #44]	; (23b8 <prvTracePortGetTimeStamp+0x94>)
    238c:	681b      	ldr	r3, [r3, #0]
    238e:	6003      	str	r3, [r0, #0]
    2390:	e7f8      	b.n	2384 <prvTracePortGetTimeStamp+0x60>
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
    2392:	42a3      	cmp	r3, r4
    2394:	d1de      	bne.n	2354 <prvTracePortGetTimeStamp+0x30>
    2396:	e7d7      	b.n	2348 <prvTracePortGetTimeStamp+0x24>
	last_traceTickCount = traceTickCount;
    2398:	4b04      	ldr	r3, [pc, #16]	; (23ac <prvTracePortGetTimeStamp+0x88>)
    239a:	601c      	str	r4, [r3, #0]
    239c:	e7f0      	b.n	2380 <prvTracePortGetTimeStamp+0x5c>
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	200003dc 	.word	0x200003dc
    23a4:	e000e014 	.word	0xe000e014
    23a8:	e000e018 	.word	0xe000e018
    23ac:	20000338 	.word	0x20000338
    23b0:	200003e4 	.word	0x200003e4
    23b4:	20000330 	.word	0x20000330
    23b8:	20000334 	.word	0x20000334

000023bc <prvTraceGetDTS>:
{
    23bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23be:	b083      	sub	sp, #12
    23c0:	0005      	movs	r5, r0
	uint32_t timestamp = 0;
    23c2:	2300      	movs	r3, #0
    23c4:	9301      	str	r3, [sp, #4]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    23c6:	28ff      	cmp	r0, #255	; 0xff
    23c8:	d002      	beq.n	23d0 <prvTraceGetDTS+0x14>
    23ca:	4b39      	ldr	r3, [pc, #228]	; (24b0 <prvTraceGetDTS+0xf4>)
    23cc:	4298      	cmp	r0, r3
    23ce:	d135      	bne.n	243c <prvTraceGetDTS+0x80>
	if (RecorderDataPtr->frequency == 0)
    23d0:	4b38      	ldr	r3, [pc, #224]	; (24b4 <prvTraceGetDTS+0xf8>)
    23d2:	681c      	ldr	r4, [r3, #0]
    23d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23d6:	2b00      	cmp	r3, #0
    23d8:	d105      	bne.n	23e6 <prvTraceGetDTS+0x2a>
		if (timestampFrequency != 0)
    23da:	4b37      	ldr	r3, [pc, #220]	; (24b8 <prvTraceGetDTS+0xfc>)
    23dc:	681b      	ldr	r3, [r3, #0]
    23de:	2b00      	cmp	r3, #0
    23e0:	d031      	beq.n	2446 <prvTraceGetDTS+0x8a>
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
    23e2:	089b      	lsrs	r3, r3, #2
    23e4:	6263      	str	r3, [r4, #36]	; 0x24
	prvTracePortGetTimeStamp(&timestamp);	
    23e6:	a801      	add	r0, sp, #4
    23e8:	4b34      	ldr	r3, [pc, #208]	; (24bc <prvTraceGetDTS+0x100>)
    23ea:	4798      	blx	r3
	dts = timestamp - old_timestamp;
    23ec:	9b01      	ldr	r3, [sp, #4]
    23ee:	4a34      	ldr	r2, [pc, #208]	; (24c0 <prvTraceGetDTS+0x104>)
    23f0:	6811      	ldr	r1, [r2, #0]
    23f2:	1a5c      	subs	r4, r3, r1
	old_timestamp = timestamp;
    23f4:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->frequency > 0)
    23f6:	4a2f      	ldr	r2, [pc, #188]	; (24b4 <prvTraceGetDTS+0xf8>)
    23f8:	6816      	ldr	r6, [r2, #0]
    23fa:	6a77      	ldr	r7, [r6, #36]	; 0x24
    23fc:	2f00      	cmp	r7, #0
    23fe:	d032      	beq.n	2466 <prvTraceGetDTS+0xaa>
		if (dts > RecorderDataPtr->frequency)
    2400:	42bc      	cmp	r4, r7
    2402:	d92c      	bls.n	245e <prvTraceGetDTS+0xa2>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
    2404:	0039      	movs	r1, r7
    2406:	0020      	movs	r0, r4
    2408:	4b2e      	ldr	r3, [pc, #184]	; (24c4 <prvTraceGetDTS+0x108>)
    240a:	4798      	blx	r3
    240c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    240e:	469c      	mov	ip, r3
    2410:	4460      	add	r0, ip
    2412:	62f0      	str	r0, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
    2414:	0039      	movs	r1, r7
    2416:	0020      	movs	r0, r4
    2418:	4b2b      	ldr	r3, [pc, #172]	; (24c8 <prvTraceGetDTS+0x10c>)
    241a:	4798      	blx	r3
    241c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    241e:	469c      	mov	ip, r3
    2420:	4461      	add	r1, ip
    2422:	62b1      	str	r1, [r6, #40]	; 0x28
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
    2424:	4b23      	ldr	r3, [pc, #140]	; (24b4 <prvTraceGetDTS+0xf8>)
    2426:	681b      	ldr	r3, [r3, #0]
    2428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    242a:	6a59      	ldr	r1, [r3, #36]	; 0x24
    242c:	428a      	cmp	r2, r1
    242e:	d31b      	bcc.n	2468 <prvTraceGetDTS+0xac>
			RecorderDataPtr->absTimeLastEventSecond++;
    2430:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2432:	3001      	adds	r0, #1
    2434:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
    2436:	1a52      	subs	r2, r2, r1
    2438:	629a      	str	r2, [r3, #40]	; 0x28
    243a:	e015      	b.n	2468 <prvTraceGetDTS+0xac>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
    243c:	4823      	ldr	r0, [pc, #140]	; (24cc <prvTraceGetDTS+0x110>)
    243e:	4b24      	ldr	r3, [pc, #144]	; (24d0 <prvTraceGetDTS+0x114>)
    2440:	4798      	blx	r3
    2442:	2000      	movs	r0, #0
    2444:	e014      	b.n	2470 <prvTraceGetDTS+0xb4>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
    2446:	4b23      	ldr	r3, [pc, #140]	; (24d4 <prvTraceGetDTS+0x118>)
    2448:	681a      	ldr	r2, [r3, #0]
    244a:	4b23      	ldr	r3, [pc, #140]	; (24d8 <prvTraceGetDTS+0x11c>)
    244c:	681b      	ldr	r3, [r3, #0]
    244e:	429a      	cmp	r2, r3
    2450:	d0c9      	beq.n	23e6 <prvTraceGetDTS+0x2a>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
    2452:	2000      	movs	r0, #0
    2454:	4b21      	ldr	r3, [pc, #132]	; (24dc <prvTraceGetDTS+0x120>)
    2456:	4798      	blx	r3
    2458:	0880      	lsrs	r0, r0, #2
    245a:	6260      	str	r0, [r4, #36]	; 0x24
    245c:	e7c3      	b.n	23e6 <prvTraceGetDTS+0x2a>
			RecorderDataPtr->absTimeLastEvent += dts;
    245e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2460:	191b      	adds	r3, r3, r4
    2462:	62b3      	str	r3, [r6, #40]	; 0x28
    2464:	e7de      	b.n	2424 <prvTraceGetDTS+0x68>
		RecorderDataPtr->absTimeLastEvent = timestamp;
    2466:	62b3      	str	r3, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
    2468:	42ac      	cmp	r4, r5
    246a:	d803      	bhi.n	2474 <prvTraceGetDTS+0xb8>
	return (uint16_t)dts & param_maxDTS;
    246c:	0020      	movs	r0, r4
    246e:	4028      	ands	r0, r5
}
    2470:	b003      	add	sp, #12
    2472:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
    2474:	4b1a      	ldr	r3, [pc, #104]	; (24e0 <prvTraceGetDTS+0x124>)
    2476:	4798      	blx	r3
		if (xts != NULL)
    2478:	2800      	cmp	r0, #0
    247a:	d0f7      	beq.n	246c <prvTraceGetDTS+0xb0>
			if (param_maxDTS == 0xFFFF)
    247c:	4b0c      	ldr	r3, [pc, #48]	; (24b0 <prvTraceGetDTS+0xf4>)
    247e:	429d      	cmp	r5, r3
    2480:	d007      	beq.n	2492 <prvTraceGetDTS+0xd6>
			else if (param_maxDTS == 0xFF)
    2482:	2dff      	cmp	r5, #255	; 0xff
    2484:	d00c      	beq.n	24a0 <prvTraceGetDTS+0xe4>
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
    2486:	4817      	ldr	r0, [pc, #92]	; (24e4 <prvTraceGetDTS+0x128>)
    2488:	4b11      	ldr	r3, [pc, #68]	; (24d0 <prvTraceGetDTS+0x114>)
    248a:	4798      	blx	r3
			prvTraceUpdateCounters();
    248c:	4b16      	ldr	r3, [pc, #88]	; (24e8 <prvTraceGetDTS+0x12c>)
    248e:	4798      	blx	r3
    2490:	e7ec      	b.n	246c <prvTraceGetDTS+0xb0>
				xts->type = XTS16;
    2492:	23a9      	movs	r3, #169	; 0xa9
    2494:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
    2496:	0c23      	lsrs	r3, r4, #16
    2498:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = 0;
    249a:	2300      	movs	r3, #0
    249c:	7043      	strb	r3, [r0, #1]
    249e:	e7f5      	b.n	248c <prvTraceGetDTS+0xd0>
				xts->type = XTS8;
    24a0:	23a8      	movs	r3, #168	; 0xa8
    24a2:	7003      	strb	r3, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
    24a4:	0a23      	lsrs	r3, r4, #8
    24a6:	8043      	strh	r3, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
    24a8:	0e23      	lsrs	r3, r4, #24
    24aa:	7043      	strb	r3, [r0, #1]
    24ac:	e7ee      	b.n	248c <prvTraceGetDTS+0xd0>
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	0000ffff 	.word	0x0000ffff
    24b4:	20000320 	.word	0x20000320
    24b8:	200003d4 	.word	0x200003d4
    24bc:	00002325 	.word	0x00002325
    24c0:	200003cc 	.word	0x200003cc
    24c4:	00006c51 	.word	0x00006c51
    24c8:	00006d5d 	.word	0x00006d5d
    24cc:	00009bd4 	.word	0x00009bd4
    24d0:	00001e25 	.word	0x00001e25
    24d4:	e000e018 	.word	0xe000e018
    24d8:	20004868 	.word	0x20004868
    24dc:	000065d5 	.word	0x000065d5
    24e0:	00001e7d 	.word	0x00001e7d
    24e4:	00009c14 	.word	0x00009c14
    24e8:	00001f71 	.word	0x00001f71

000024ec <prvTraceStoreTaskReady>:
{
    24ec:	b570      	push	{r4, r5, r6, lr}
    24ee:	1e04      	subs	r4, r0, #0
	if (handle == 0)
    24f0:	d01d      	beq.n	252e <prvTraceStoreTaskReady+0x42>
	if (! readyEventsEnabled)
    24f2:	4b1b      	ldr	r3, [pc, #108]	; (2560 <prvTraceStoreTaskReady+0x74>)
    24f4:	681b      	ldr	r3, [r3, #0]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d019      	beq.n	252e <prvTraceStoreTaskReady+0x42>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    24fa:	280f      	cmp	r0, #15
    24fc:	d818      	bhi.n	2530 <prvTraceStoreTaskReady+0x44>
	if (recorder_busy)
    24fe:	4b19      	ldr	r3, [pc, #100]	; (2564 <prvTraceStoreTaskReady+0x78>)
    2500:	681b      	ldr	r3, [r3, #0]
    2502:	2b00      	cmp	r3, #0
    2504:	d118      	bne.n	2538 <prvTraceStoreTaskReady+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2506:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    250a:	2301      	movs	r3, #1
    250c:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    2510:	4a14      	ldr	r2, [pc, #80]	; (2564 <prvTraceStoreTaskReady+0x78>)
    2512:	6813      	ldr	r3, [r2, #0]
    2514:	3301      	adds	r3, #1
    2516:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
    2518:	4b13      	ldr	r3, [pc, #76]	; (2568 <prvTraceStoreTaskReady+0x7c>)
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    251e:	2b00      	cmp	r3, #0
    2520:	d10e      	bne.n	2540 <prvTraceStoreTaskReady+0x54>
	trcCRITICAL_SECTION_END();
    2522:	4a10      	ldr	r2, [pc, #64]	; (2564 <prvTraceStoreTaskReady+0x78>)
    2524:	6813      	ldr	r3, [r2, #0]
    2526:	3b01      	subs	r3, #1
    2528:	6013      	str	r3, [r2, #0]
    252a:	f385 8810 	msr	PRIMASK, r5
}
    252e:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
    2530:	480e      	ldr	r0, [pc, #56]	; (256c <prvTraceStoreTaskReady+0x80>)
    2532:	4b0f      	ldr	r3, [pc, #60]	; (2570 <prvTraceStoreTaskReady+0x84>)
    2534:	4798      	blx	r3
    2536:	e7fa      	b.n	252e <prvTraceStoreTaskReady+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
    2538:	480e      	ldr	r0, [pc, #56]	; (2574 <prvTraceStoreTaskReady+0x88>)
    253a:	4b0d      	ldr	r3, [pc, #52]	; (2570 <prvTraceStoreTaskReady+0x84>)
    253c:	4798      	blx	r3
		return;
    253e:	e7f6      	b.n	252e <prvTraceStoreTaskReady+0x42>
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    2540:	480d      	ldr	r0, [pc, #52]	; (2578 <prvTraceStoreTaskReady+0x8c>)
    2542:	4b0e      	ldr	r3, [pc, #56]	; (257c <prvTraceStoreTaskReady+0x90>)
    2544:	4798      	blx	r3
    2546:	0006      	movs	r6, r0
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
    2548:	4b0d      	ldr	r3, [pc, #52]	; (2580 <prvTraceStoreTaskReady+0x94>)
    254a:	4798      	blx	r3
		if (tr != NULL)
    254c:	2800      	cmp	r0, #0
    254e:	d0e8      	beq.n	2522 <prvTraceStoreTaskReady+0x36>
			tr->type = DIV_TASK_READY;
    2550:	2302      	movs	r3, #2
    2552:	7003      	strb	r3, [r0, #0]
			tr->dts = dts3;
    2554:	8046      	strh	r6, [r0, #2]
			tr->objHandle = hnd8;
    2556:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    2558:	4b0a      	ldr	r3, [pc, #40]	; (2584 <prvTraceStoreTaskReady+0x98>)
    255a:	4798      	blx	r3
    255c:	e7e1      	b.n	2522 <prvTraceStoreTaskReady+0x36>
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	20000024 	.word	0x20000024
    2564:	200003d0 	.word	0x200003d0
    2568:	20000320 	.word	0x20000320
    256c:	0000a214 	.word	0x0000a214
    2570:	00001e25 	.word	0x00001e25
    2574:	0000a254 	.word	0x0000a254
    2578:	0000ffff 	.word	0x0000ffff
    257c:	000023bd 	.word	0x000023bd
    2580:	00001e7d 	.word	0x00001e7d
    2584:	00001f71 	.word	0x00001f71

00002588 <vTraceStoreMemMangEvent>:
{
    2588:	b5f0      	push	{r4, r5, r6, r7, lr}
    258a:	b083      	sub	sp, #12
    258c:	9000      	str	r0, [sp, #0]
    258e:	000c      	movs	r4, r1
	if (RecorderDataPtr == NULL)
    2590:	4b28      	ldr	r3, [pc, #160]	; (2634 <vTraceStoreMemMangEvent+0xac>)
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	2b00      	cmp	r3, #0
    2596:	d01d      	beq.n	25d4 <vTraceStoreMemMangEvent+0x4c>
		size = (uint32_t)(- signed_size);
    2598:	17d3      	asrs	r3, r2, #31
    259a:	18d6      	adds	r6, r2, r3
    259c:	405e      	eors	r6, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    259e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    25a2:	2301      	movs	r3, #1
    25a4:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    25a8:	4923      	ldr	r1, [pc, #140]	; (2638 <vTraceStoreMemMangEvent+0xb0>)
    25aa:	680b      	ldr	r3, [r1, #0]
    25ac:	3301      	adds	r3, #1
    25ae:	600b      	str	r3, [r1, #0]
	if (address != 0)
    25b0:	2c00      	cmp	r4, #0
    25b2:	d004      	beq.n	25be <vTraceStoreMemMangEvent+0x36>
		heapMemUsage += (uint32_t)signed_size;
    25b4:	4b21      	ldr	r3, [pc, #132]	; (263c <vTraceStoreMemMangEvent+0xb4>)
    25b6:	6819      	ldr	r1, [r3, #0]
    25b8:	468c      	mov	ip, r1
    25ba:	4462      	add	r2, ip
    25bc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
    25be:	4b1d      	ldr	r3, [pc, #116]	; (2634 <vTraceStoreMemMangEvent+0xac>)
    25c0:	681b      	ldr	r3, [r3, #0]
    25c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    25c4:	2b00      	cmp	r3, #0
    25c6:	d107      	bne.n	25d8 <vTraceStoreMemMangEvent+0x50>
	trcCRITICAL_SECTION_END();
    25c8:	4a1b      	ldr	r2, [pc, #108]	; (2638 <vTraceStoreMemMangEvent+0xb0>)
    25ca:	6813      	ldr	r3, [r2, #0]
    25cc:	3b01      	subs	r3, #1
    25ce:	6013      	str	r3, [r2, #0]
    25d0:	f385 8810 	msr	PRIMASK, r5
}
    25d4:	b003      	add	sp, #12
    25d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
    25d8:	20ff      	movs	r0, #255	; 0xff
    25da:	4b19      	ldr	r3, [pc, #100]	; (2640 <vTraceStoreMemMangEvent+0xb8>)
    25dc:	4798      	blx	r3
    25de:	9001      	str	r0, [sp, #4]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
    25e0:	0031      	movs	r1, r6
    25e2:	4818      	ldr	r0, [pc, #96]	; (2644 <vTraceStoreMemMangEvent+0xbc>)
    25e4:	4b18      	ldr	r3, [pc, #96]	; (2648 <vTraceStoreMemMangEvent+0xc0>)
    25e6:	4798      	blx	r3
    25e8:	0006      	movs	r6, r0
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
    25ea:	4b18      	ldr	r3, [pc, #96]	; (264c <vTraceStoreMemMangEvent+0xc4>)
    25ec:	4798      	blx	r3
    25ee:	1e07      	subs	r7, r0, #0
		if (ms != NULL)
    25f0:	d0ea      	beq.n	25c8 <vTraceStoreMemMangEvent+0x40>
			ms->dts = dts1;
    25f2:	466b      	mov	r3, sp
    25f4:	791b      	ldrb	r3, [r3, #4]
    25f6:	7043      	strb	r3, [r0, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
    25f8:	2300      	movs	r3, #0
    25fa:	7003      	strb	r3, [r0, #0]
			ms->size = size_low;
    25fc:	8046      	strh	r6, [r0, #2]
			prvTraceUpdateCounters();
    25fe:	4b14      	ldr	r3, [pc, #80]	; (2650 <vTraceStoreMemMangEvent+0xc8>)
    2600:	4798      	blx	r3
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
    2602:	0021      	movs	r1, r4
    2604:	480f      	ldr	r0, [pc, #60]	; (2644 <vTraceStoreMemMangEvent+0xbc>)
    2606:	4b10      	ldr	r3, [pc, #64]	; (2648 <vTraceStoreMemMangEvent+0xc0>)
    2608:	4798      	blx	r3
    260a:	0006      	movs	r6, r0
			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
    260c:	4b0f      	ldr	r3, [pc, #60]	; (264c <vTraceStoreMemMangEvent+0xc4>)
    260e:	4798      	blx	r3
			if (ma != NULL)
    2610:	2800      	cmp	r0, #0
    2612:	d0d9      	beq.n	25c8 <vTraceStoreMemMangEvent+0x40>
				ma->addr_low = addr_low;
    2614:	8046      	strh	r6, [r0, #2]
				ma->addr_high = addr_high;
    2616:	2300      	movs	r3, #0
    2618:	7043      	strb	r3, [r0, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
    261a:	466b      	mov	r3, sp
    261c:	781c      	ldrb	r4, [r3, #0]
    261e:	1c63      	adds	r3, r4, #1
    2620:	7003      	strb	r3, [r0, #0]
				ms->type = (uint8_t) ecode;
    2622:	703c      	strb	r4, [r7, #0]
				prvTraceUpdateCounters();					
    2624:	4b0a      	ldr	r3, [pc, #40]	; (2650 <vTraceStoreMemMangEvent+0xc8>)
    2626:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
    2628:	4b02      	ldr	r3, [pc, #8]	; (2634 <vTraceStoreMemMangEvent+0xac>)
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	4a03      	ldr	r2, [pc, #12]	; (263c <vTraceStoreMemMangEvent+0xb4>)
    262e:	6812      	ldr	r2, [r2, #0]
    2630:	651a      	str	r2, [r3, #80]	; 0x50
    2632:	e7c9      	b.n	25c8 <vTraceStoreMemMangEvent+0x40>
    2634:	20000320 	.word	0x20000320
    2638:	200003d0 	.word	0x200003d0
    263c:	20000328 	.word	0x20000328
    2640:	000023bd 	.word	0x000023bd
    2644:	0000ffff 	.word	0x0000ffff
    2648:	00001fa9 	.word	0x00001fa9
    264c:	00001e7d 	.word	0x00001e7d
    2650:	00001f71 	.word	0x00001f71

00002654 <prvTraceStoreKernelCall>:
{
    2654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2656:	0005      	movs	r5, r0
    2658:	0014      	movs	r4, r2
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    265a:	28fe      	cmp	r0, #254	; 0xfe
    265c:	d825      	bhi.n	26aa <prvTraceStoreKernelCall+0x56>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    265e:	2908      	cmp	r1, #8
    2660:	d827      	bhi.n	26b2 <prvTraceStoreKernelCall+0x5e>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    2662:	4b21      	ldr	r3, [pc, #132]	; (26e8 <prvTraceStoreKernelCall+0x94>)
    2664:	681b      	ldr	r3, [r3, #0]
    2666:	1859      	adds	r1, r3, r1
    2668:	3164      	adds	r1, #100	; 0x64
    266a:	780b      	ldrb	r3, [r1, #0]
    266c:	4293      	cmp	r3, r2
    266e:	d324      	bcc.n	26ba <prvTraceStoreKernelCall+0x66>
	if (recorder_busy)
    2670:	4b1e      	ldr	r3, [pc, #120]	; (26ec <prvTraceStoreKernelCall+0x98>)
    2672:	681b      	ldr	r3, [r3, #0]
    2674:	2b00      	cmp	r3, #0
    2676:	d124      	bne.n	26c2 <prvTraceStoreKernelCall+0x6e>
	if (handle_of_last_logged_task == 0)
    2678:	4b1d      	ldr	r3, [pc, #116]	; (26f0 <prvTraceStoreKernelCall+0x9c>)
    267a:	781b      	ldrb	r3, [r3, #0]
    267c:	2b00      	cmp	r3, #0
    267e:	d013      	beq.n	26a8 <prvTraceStoreKernelCall+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2680:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2684:	2301      	movs	r3, #1
    2686:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    268a:	4a18      	ldr	r2, [pc, #96]	; (26ec <prvTraceStoreKernelCall+0x98>)
    268c:	6813      	ldr	r3, [r2, #0]
    268e:	3301      	adds	r3, #1
    2690:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive)
    2692:	4b15      	ldr	r3, [pc, #84]	; (26e8 <prvTraceStoreKernelCall+0x94>)
    2694:	681b      	ldr	r3, [r3, #0]
    2696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2698:	2b00      	cmp	r3, #0
    269a:	d116      	bne.n	26ca <prvTraceStoreKernelCall+0x76>
	trcCRITICAL_SECTION_END();
    269c:	4a13      	ldr	r2, [pc, #76]	; (26ec <prvTraceStoreKernelCall+0x98>)
    269e:	6813      	ldr	r3, [r2, #0]
    26a0:	3b01      	subs	r3, #1
    26a2:	6013      	str	r3, [r2, #0]
    26a4:	f386 8810 	msr	PRIMASK, r6
}
    26a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
    26aa:	4812      	ldr	r0, [pc, #72]	; (26f4 <prvTraceStoreKernelCall+0xa0>)
    26ac:	4b12      	ldr	r3, [pc, #72]	; (26f8 <prvTraceStoreKernelCall+0xa4>)
    26ae:	4798      	blx	r3
    26b0:	e7fa      	b.n	26a8 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    26b2:	4812      	ldr	r0, [pc, #72]	; (26fc <prvTraceStoreKernelCall+0xa8>)
    26b4:	4b10      	ldr	r3, [pc, #64]	; (26f8 <prvTraceStoreKernelCall+0xa4>)
    26b6:	4798      	blx	r3
    26b8:	e7f6      	b.n	26a8 <prvTraceStoreKernelCall+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
    26ba:	4811      	ldr	r0, [pc, #68]	; (2700 <prvTraceStoreKernelCall+0xac>)
    26bc:	4b0e      	ldr	r3, [pc, #56]	; (26f8 <prvTraceStoreKernelCall+0xa4>)
    26be:	4798      	blx	r3
    26c0:	e7f2      	b.n	26a8 <prvTraceStoreKernelCall+0x54>
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
    26c2:	4810      	ldr	r0, [pc, #64]	; (2704 <prvTraceStoreKernelCall+0xb0>)
    26c4:	4b0c      	ldr	r3, [pc, #48]	; (26f8 <prvTraceStoreKernelCall+0xa4>)
    26c6:	4798      	blx	r3
		return;
    26c8:	e7ee      	b.n	26a8 <prvTraceStoreKernelCall+0x54>
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
    26ca:	480f      	ldr	r0, [pc, #60]	; (2708 <prvTraceStoreKernelCall+0xb4>)
    26cc:	4b0f      	ldr	r3, [pc, #60]	; (270c <prvTraceStoreKernelCall+0xb8>)
    26ce:	4798      	blx	r3
    26d0:	0007      	movs	r7, r0
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
    26d2:	4b0f      	ldr	r3, [pc, #60]	; (2710 <prvTraceStoreKernelCall+0xbc>)
    26d4:	4798      	blx	r3
		if (kse != NULL)
    26d6:	2800      	cmp	r0, #0
    26d8:	d0e0      	beq.n	269c <prvTraceStoreKernelCall+0x48>
			kse->dts = dts1;
    26da:	8047      	strh	r7, [r0, #2]
			kse->type = (uint8_t)ecode;
    26dc:	7005      	strb	r5, [r0, #0]
			kse->objHandle = hnd8;
    26de:	7044      	strb	r4, [r0, #1]
			prvTraceUpdateCounters();
    26e0:	4b0c      	ldr	r3, [pc, #48]	; (2714 <prvTraceStoreKernelCall+0xc0>)
    26e2:	4798      	blx	r3
    26e4:	e7da      	b.n	269c <prvTraceStoreKernelCall+0x48>
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	20000320 	.word	0x20000320
    26ec:	200003d0 	.word	0x200003d0
    26f0:	20000324 	.word	0x20000324
    26f4:	00009f6c 	.word	0x00009f6c
    26f8:	00001e25 	.word	0x00001e25
    26fc:	00009fa4 	.word	0x00009fa4
    2700:	00009fec 	.word	0x00009fec
    2704:	0000a034 	.word	0x0000a034
    2708:	0000ffff 	.word	0x0000ffff
    270c:	000023bd 	.word	0x000023bd
    2710:	00001e7d 	.word	0x00001e7d
    2714:	00001f71 	.word	0x00001f71

00002718 <prvTraceStoreKernelCallWithParam>:
{
    2718:	b5f0      	push	{r4, r5, r6, r7, lr}
    271a:	46c6      	mov	lr, r8
    271c:	b500      	push	{lr}
    271e:	0006      	movs	r6, r0
    2720:	0014      	movs	r4, r2
    2722:	001d      	movs	r5, r3
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    2724:	28fe      	cmp	r0, #254	; 0xfe
    2726:	d827      	bhi.n	2778 <prvTraceStoreKernelCallWithParam+0x60>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2728:	2908      	cmp	r1, #8
    272a:	d829      	bhi.n	2780 <prvTraceStoreKernelCallWithParam+0x68>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    272c:	4b24      	ldr	r3, [pc, #144]	; (27c0 <prvTraceStoreKernelCallWithParam+0xa8>)
    272e:	681b      	ldr	r3, [r3, #0]
    2730:	1859      	adds	r1, r3, r1
    2732:	3164      	adds	r1, #100	; 0x64
    2734:	780b      	ldrb	r3, [r1, #0]
    2736:	4293      	cmp	r3, r2
    2738:	d326      	bcc.n	2788 <prvTraceStoreKernelCallWithParam+0x70>
	if (recorder_busy)
    273a:	4b22      	ldr	r3, [pc, #136]	; (27c4 <prvTraceStoreKernelCallWithParam+0xac>)
    273c:	681b      	ldr	r3, [r3, #0]
    273e:	2b00      	cmp	r3, #0
    2740:	d126      	bne.n	2790 <prvTraceStoreKernelCallWithParam+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2742:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2746:	2301      	movs	r3, #1
    2748:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    274c:	4a1d      	ldr	r2, [pc, #116]	; (27c4 <prvTraceStoreKernelCallWithParam+0xac>)
    274e:	6813      	ldr	r3, [r2, #0]
    2750:	3301      	adds	r3, #1
    2752:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    2754:	4b1a      	ldr	r3, [pc, #104]	; (27c0 <prvTraceStoreKernelCallWithParam+0xa8>)
    2756:	681b      	ldr	r3, [r3, #0]
    2758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    275a:	2b00      	cmp	r3, #0
    275c:	d003      	beq.n	2766 <prvTraceStoreKernelCallWithParam+0x4e>
    275e:	4b1a      	ldr	r3, [pc, #104]	; (27c8 <prvTraceStoreKernelCallWithParam+0xb0>)
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	2b00      	cmp	r3, #0
    2764:	d118      	bne.n	2798 <prvTraceStoreKernelCallWithParam+0x80>
	trcCRITICAL_SECTION_END();
    2766:	4a17      	ldr	r2, [pc, #92]	; (27c4 <prvTraceStoreKernelCallWithParam+0xac>)
    2768:	6813      	ldr	r3, [r2, #0]
    276a:	3b01      	subs	r3, #1
    276c:	6013      	str	r3, [r2, #0]
    276e:	f388 8810 	msr	PRIMASK, r8
}
    2772:	bc04      	pop	{r2}
    2774:	4690      	mov	r8, r2
    2776:	bdf0      	pop	{r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
    2778:	4814      	ldr	r0, [pc, #80]	; (27cc <prvTraceStoreKernelCallWithParam+0xb4>)
    277a:	4b15      	ldr	r3, [pc, #84]	; (27d0 <prvTraceStoreKernelCallWithParam+0xb8>)
    277c:	4798      	blx	r3
    277e:	e7f8      	b.n	2772 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
    2780:	4814      	ldr	r0, [pc, #80]	; (27d4 <prvTraceStoreKernelCallWithParam+0xbc>)
    2782:	4b13      	ldr	r3, [pc, #76]	; (27d0 <prvTraceStoreKernelCallWithParam+0xb8>)
    2784:	4798      	blx	r3
    2786:	e7f4      	b.n	2772 <prvTraceStoreKernelCallWithParam+0x5a>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
    2788:	4813      	ldr	r0, [pc, #76]	; (27d8 <prvTraceStoreKernelCallWithParam+0xc0>)
    278a:	4b11      	ldr	r3, [pc, #68]	; (27d0 <prvTraceStoreKernelCallWithParam+0xb8>)
    278c:	4798      	blx	r3
    278e:	e7f0      	b.n	2772 <prvTraceStoreKernelCallWithParam+0x5a>
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
    2790:	4812      	ldr	r0, [pc, #72]	; (27dc <prvTraceStoreKernelCallWithParam+0xc4>)
    2792:	4b0f      	ldr	r3, [pc, #60]	; (27d0 <prvTraceStoreKernelCallWithParam+0xb8>)
    2794:	4798      	blx	r3
		return;
    2796:	e7ec      	b.n	2772 <prvTraceStoreKernelCallWithParam+0x5a>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
    2798:	20ff      	movs	r0, #255	; 0xff
    279a:	4b11      	ldr	r3, [pc, #68]	; (27e0 <prvTraceStoreKernelCallWithParam+0xc8>)
    279c:	4798      	blx	r3
    279e:	0007      	movs	r7, r0
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
    27a0:	0029      	movs	r1, r5
    27a2:	20ff      	movs	r0, #255	; 0xff
    27a4:	4b0f      	ldr	r3, [pc, #60]	; (27e4 <prvTraceStoreKernelCallWithParam+0xcc>)
    27a6:	4798      	blx	r3
    27a8:	0005      	movs	r5, r0
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
    27aa:	4b0f      	ldr	r3, [pc, #60]	; (27e8 <prvTraceStoreKernelCallWithParam+0xd0>)
    27ac:	4798      	blx	r3
		if (kse != NULL)
    27ae:	2800      	cmp	r0, #0
    27b0:	d0d9      	beq.n	2766 <prvTraceStoreKernelCallWithParam+0x4e>
			kse->dts = dts2;
    27b2:	70c7      	strb	r7, [r0, #3]
			kse->type = (uint8_t)evtcode;
    27b4:	7006      	strb	r6, [r0, #0]
			kse->objHandle = hnd8;
    27b6:	7044      	strb	r4, [r0, #1]
			kse->param = p8;
    27b8:	7085      	strb	r5, [r0, #2]
			prvTraceUpdateCounters();
    27ba:	4b0c      	ldr	r3, [pc, #48]	; (27ec <prvTraceStoreKernelCallWithParam+0xd4>)
    27bc:	4798      	blx	r3
    27be:	e7d2      	b.n	2766 <prvTraceStoreKernelCallWithParam+0x4e>
    27c0:	20000320 	.word	0x20000320
    27c4:	200003d0 	.word	0x200003d0
    27c8:	20000324 	.word	0x20000324
    27cc:	0000a0fc 	.word	0x0000a0fc
    27d0:	00001e25 	.word	0x00001e25
    27d4:	0000a13c 	.word	0x0000a13c
    27d8:	0000a18c 	.word	0x0000a18c
    27dc:	0000a1dc 	.word	0x0000a1dc
    27e0:	000023bd 	.word	0x000023bd
    27e4:	00001fa9 	.word	0x00001fa9
    27e8:	00001e7d 	.word	0x00001e7d
    27ec:	00001f71 	.word	0x00001f71

000027f0 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
    27f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27f2:	0004      	movs	r4, r0
    27f4:	000d      	movs	r5, r1
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    27f6:	28fe      	cmp	r0, #254	; 0xfe
    27f8:	d81c      	bhi.n	2834 <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
	if (recorder_busy)
    27fa:	4b1c      	ldr	r3, [pc, #112]	; (286c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    27fc:	681b      	ldr	r3, [r3, #0]
    27fe:	2b00      	cmp	r3, #0
    2800:	d11c      	bne.n	283c <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2802:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2806:	2301      	movs	r3, #1
    2808:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
    280c:	4a17      	ldr	r2, [pc, #92]	; (286c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    280e:	6813      	ldr	r3, [r2, #0]
    2810:	3301      	adds	r3, #1
    2812:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
    2814:	4b16      	ldr	r3, [pc, #88]	; (2870 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
    2816:	681b      	ldr	r3, [r3, #0]
    2818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    281a:	2b00      	cmp	r3, #0
    281c:	d003      	beq.n	2826 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    281e:	4b15      	ldr	r3, [pc, #84]	; (2874 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
    2820:	781b      	ldrb	r3, [r3, #0]
    2822:	2b00      	cmp	r3, #0
    2824:	d10e      	bne.n	2844 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
	trcCRITICAL_SECTION_END();
    2826:	4a11      	ldr	r2, [pc, #68]	; (286c <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    2828:	6813      	ldr	r3, [r2, #0]
    282a:	3b01      	subs	r3, #1
    282c:	6013      	str	r3, [r2, #0]
    282e:	f386 8810 	msr	PRIMASK, r6
}
    2832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
    2834:	4810      	ldr	r0, [pc, #64]	; (2878 <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
    2836:	4b11      	ldr	r3, [pc, #68]	; (287c <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    2838:	4798      	blx	r3
    283a:	e7fa      	b.n	2832 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
    283c:	4810      	ldr	r0, [pc, #64]	; (2880 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
    283e:	4b0f      	ldr	r3, [pc, #60]	; (287c <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    2840:	4798      	blx	r3
		return;
    2842:	e7f6      	b.n	2832 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
    2844:	20ff      	movs	r0, #255	; 0xff
    2846:	4b0f      	ldr	r3, [pc, #60]	; (2884 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
    2848:	4798      	blx	r3
    284a:	0007      	movs	r7, r0
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
    284c:	0029      	movs	r1, r5
    284e:	480e      	ldr	r0, [pc, #56]	; (2888 <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
    2850:	4b0e      	ldr	r3, [pc, #56]	; (288c <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
    2852:	4798      	blx	r3
    2854:	0005      	movs	r5, r0
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
    2856:	4b0e      	ldr	r3, [pc, #56]	; (2890 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
    2858:	4798      	blx	r3
		if (kse != NULL)
    285a:	2800      	cmp	r0, #0
    285c:	d0e3      	beq.n	2826 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
			kse->dts = dts6;
    285e:	7047      	strb	r7, [r0, #1]
			kse->type = (uint8_t)evtcode;
    2860:	7004      	strb	r4, [r0, #0]
			kse->param = restParam;
    2862:	8045      	strh	r5, [r0, #2]
			prvTraceUpdateCounters();
    2864:	4b0b      	ldr	r3, [pc, #44]	; (2894 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
    2866:	4798      	blx	r3
    2868:	e7dd      	b.n	2826 <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	200003d0 	.word	0x200003d0
    2870:	20000320 	.word	0x20000320
    2874:	20000324 	.word	0x20000324
    2878:	0000a06c 	.word	0x0000a06c
    287c:	00001e25 	.word	0x00001e25
    2880:	0000a0c4 	.word	0x0000a0c4
    2884:	000023bd 	.word	0x000023bd
    2888:	0000ffff 	.word	0x0000ffff
    288c:	00001fa9 	.word	0x00001fa9
    2890:	00001e7d 	.word	0x00001e7d
    2894:	00001f71 	.word	0x00001f71

00002898 <prvTraceStoreTaskswitch>:
{
    2898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    289a:	0004      	movs	r4, r0
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    289c:	280f      	cmp	r0, #15
    289e:	d818      	bhi.n	28d2 <prvTraceStoreTaskswitch+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    28a0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    28a4:	2301      	movs	r3, #1
    28a6:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
    28aa:	4a26      	ldr	r2, [pc, #152]	; (2944 <prvTraceStoreTaskswitch+0xac>)
    28ac:	6813      	ldr	r3, [r2, #0]
    28ae:	3301      	adds	r3, #1
    28b0:	6013      	str	r3, [r2, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
    28b2:	4b25      	ldr	r3, [pc, #148]	; (2948 <prvTraceStoreTaskswitch+0xb0>)
    28b4:	781b      	ldrb	r3, [r3, #0]
    28b6:	4283      	cmp	r3, r0
    28b8:	d004      	beq.n	28c4 <prvTraceStoreTaskswitch+0x2c>
    28ba:	4b24      	ldr	r3, [pc, #144]	; (294c <prvTraceStoreTaskswitch+0xb4>)
    28bc:	681b      	ldr	r3, [r3, #0]
    28be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    28c0:	2b00      	cmp	r3, #0
    28c2:	d10a      	bne.n	28da <prvTraceStoreTaskswitch+0x42>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
    28c4:	4a1f      	ldr	r2, [pc, #124]	; (2944 <prvTraceStoreTaskswitch+0xac>)
    28c6:	6813      	ldr	r3, [r2, #0]
    28c8:	3b01      	subs	r3, #1
    28ca:	6013      	str	r3, [r2, #0]
    28cc:	f385 8810 	msr	PRIMASK, r5
}
    28d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
    28d2:	481f      	ldr	r0, [pc, #124]	; (2950 <prvTraceStoreTaskswitch+0xb8>)
    28d4:	4b1f      	ldr	r3, [pc, #124]	; (2954 <prvTraceStoreTaskswitch+0xbc>)
    28d6:	4798      	blx	r3
    28d8:	e7fa      	b.n	28d0 <prvTraceStoreTaskswitch+0x38>
		isPendingContextSwitch = 0;
    28da:	2200      	movs	r2, #0
    28dc:	4b1e      	ldr	r3, [pc, #120]	; (2958 <prvTraceStoreTaskswitch+0xc0>)
    28de:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
    28e0:	481e      	ldr	r0, [pc, #120]	; (295c <prvTraceStoreTaskswitch+0xc4>)
    28e2:	4b1f      	ldr	r3, [pc, #124]	; (2960 <prvTraceStoreTaskswitch+0xc8>)
    28e4:	4798      	blx	r3
    28e6:	0007      	movs	r7, r0
		handle_of_last_logged_task = task_handle;
    28e8:	4b17      	ldr	r3, [pc, #92]	; (2948 <prvTraceStoreTaskswitch+0xb0>)
    28ea:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
    28ec:	4b1d      	ldr	r3, [pc, #116]	; (2964 <prvTraceStoreTaskswitch+0xcc>)
    28ee:	4798      	blx	r3
    28f0:	1e06      	subs	r6, r0, #0
		if (ts != NULL)
    28f2:	d0e7      	beq.n	28c4 <prvTraceStoreTaskswitch+0x2c>
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    28f4:	4b14      	ldr	r3, [pc, #80]	; (2948 <prvTraceStoreTaskswitch+0xb0>)
    28f6:	7818      	ldrb	r0, [r3, #0]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    28f8:	4b14      	ldr	r3, [pc, #80]	; (294c <prvTraceStoreTaskswitch+0xb4>)
    28fa:	681a      	ldr	r2, [r3, #0]
    28fc:	2367      	movs	r3, #103	; 0x67
    28fe:	5cd3      	ldrb	r3, [r2, r3]
    2900:	4283      	cmp	r3, r0
    2902:	d30f      	bcc.n	2924 <prvTraceStoreTaskswitch+0x8c>
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
    2904:	2103      	movs	r1, #3
    2906:	4b18      	ldr	r3, [pc, #96]	; (2968 <prvTraceStoreTaskswitch+0xd0>)
    2908:	4798      	blx	r3
    290a:	4b10      	ldr	r3, [pc, #64]	; (294c <prvTraceStoreTaskswitch+0xb4>)
    290c:	681b      	ldr	r3, [r3, #0]
    290e:	2273      	movs	r2, #115	; 0x73
    2910:	5c9a      	ldrb	r2, [r3, r2]
    2912:	181b      	adds	r3, r3, r0
    2914:	189b      	adds	r3, r3, r2
    2916:	339c      	adds	r3, #156	; 0x9c
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
    2918:	781b      	ldrb	r3, [r3, #0]
    291a:	2b01      	cmp	r3, #1
    291c:	d105      	bne.n	292a <prvTraceStoreTaskswitch+0x92>
				ts->type = TS_TASK_RESUME;
    291e:	3306      	adds	r3, #6
    2920:	7033      	strb	r3, [r6, #0]
    2922:	e004      	b.n	292e <prvTraceStoreTaskswitch+0x96>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
    2924:	4811      	ldr	r0, [pc, #68]	; (296c <prvTraceStoreTaskswitch+0xd4>)
    2926:	4b0b      	ldr	r3, [pc, #44]	; (2954 <prvTraceStoreTaskswitch+0xbc>)
    2928:	4798      	blx	r3
				ts->type = TS_TASK_BEGIN;
    292a:	2306      	movs	r3, #6
    292c:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
    292e:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
    2930:	7074      	strb	r4, [r6, #1]
			prvTraceSetObjectState(TRACE_CLASS_TASK,
    2932:	4b05      	ldr	r3, [pc, #20]	; (2948 <prvTraceStoreTaskswitch+0xb0>)
    2934:	7819      	ldrb	r1, [r3, #0]
    2936:	2201      	movs	r2, #1
    2938:	2003      	movs	r0, #3
    293a:	4b0d      	ldr	r3, [pc, #52]	; (2970 <prvTraceStoreTaskswitch+0xd8>)
    293c:	4798      	blx	r3
			prvTraceUpdateCounters();
    293e:	4b0d      	ldr	r3, [pc, #52]	; (2974 <prvTraceStoreTaskswitch+0xdc>)
    2940:	4798      	blx	r3
    2942:	e7bf      	b.n	28c4 <prvTraceStoreTaskswitch+0x2c>
    2944:	200003d0 	.word	0x200003d0
    2948:	20000324 	.word	0x20000324
    294c:	20000320 	.word	0x20000320
    2950:	0000a28c 	.word	0x0000a28c
    2954:	00001e25 	.word	0x00001e25
    2958:	2000032c 	.word	0x2000032c
    295c:	0000ffff 	.word	0x0000ffff
    2960:	000023bd 	.word	0x000023bd
    2964:	00001e7d 	.word	0x00001e7d
    2968:	00001ffd 	.word	0x00001ffd
    296c:	0000a2d4 	.word	0x0000a2d4
    2970:	00002129 	.word	0x00002129
    2974:	00001f71 	.word	0x00001f71

00002978 <uiTraceStart>:
{
    2978:	b570      	push	{r4, r5, r6, lr}
	if (RecorderDataPtr == NULL)
    297a:	4b20      	ldr	r3, [pc, #128]	; (29fc <uiTraceStart+0x84>)
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	2b00      	cmp	r3, #0
    2980:	d00a      	beq.n	2998 <uiTraceStart+0x20>
	if (RecorderDataPtr->recorderActive == 1)
    2982:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2984:	2801      	cmp	r0, #1
    2986:	d006      	beq.n	2996 <uiTraceStart+0x1e>
	if (traceErrorMessage == NULL)
    2988:	4b1d      	ldr	r3, [pc, #116]	; (2a00 <uiTraceStart+0x88>)
    298a:	681b      	ldr	r3, [r3, #0]
    298c:	2b00      	cmp	r3, #0
    298e:	d008      	beq.n	29a2 <uiTraceStart+0x2a>
	return RecorderDataPtr->recorderActive;
    2990:	4b1a      	ldr	r3, [pc, #104]	; (29fc <uiTraceStart+0x84>)
    2992:	681b      	ldr	r3, [r3, #0]
    2994:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
    2996:	bd70      	pop	{r4, r5, r6, pc}
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
    2998:	481a      	ldr	r0, [pc, #104]	; (2a04 <uiTraceStart+0x8c>)
    299a:	4b1b      	ldr	r3, [pc, #108]	; (2a08 <uiTraceStart+0x90>)
    299c:	4798      	blx	r3
    299e:	2000      	movs	r0, #0
    29a0:	e7f9      	b.n	2996 <uiTraceStart+0x1e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    29a2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    29a6:	2201      	movs	r2, #1
    29a8:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
    29ac:	4917      	ldr	r1, [pc, #92]	; (2a0c <uiTraceStart+0x94>)
    29ae:	680b      	ldr	r3, [r1, #0]
    29b0:	3301      	adds	r3, #1
    29b2:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
    29b4:	4b11      	ldr	r3, [pc, #68]	; (29fc <uiTraceStart+0x84>)
    29b6:	681b      	ldr	r3, [r3, #0]
    29b8:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
    29ba:	4b15      	ldr	r3, [pc, #84]	; (2a10 <uiTraceStart+0x98>)
    29bc:	4798      	blx	r3
    29be:	4b15      	ldr	r3, [pc, #84]	; (2a14 <uiTraceStart+0x9c>)
    29c0:	4798      	blx	r3
    29c2:	b2c4      	uxtb	r4, r0
		if (handle == 0)
    29c4:	2c00      	cmp	r4, #0
    29c6:	d009      	beq.n	29dc <uiTraceStart+0x64>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
    29c8:	0020      	movs	r0, r4
    29ca:	4b13      	ldr	r3, [pc, #76]	; (2a18 <uiTraceStart+0xa0>)
    29cc:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
    29ce:	4a0f      	ldr	r2, [pc, #60]	; (2a0c <uiTraceStart+0x94>)
    29d0:	6813      	ldr	r3, [r2, #0]
    29d2:	3b01      	subs	r3, #1
    29d4:	6013      	str	r3, [r2, #0]
    29d6:	f385 8810 	msr	PRIMASK, r5
    29da:	e7d9      	b.n	2990 <uiTraceStart+0x18>
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
    29dc:	2003      	movs	r0, #3
    29de:	4b0f      	ldr	r3, [pc, #60]	; (2a1c <uiTraceStart+0xa4>)
    29e0:	4798      	blx	r3
    29e2:	0006      	movs	r6, r0
    29e4:	0004      	movs	r4, r0
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
    29e6:	4a0e      	ldr	r2, [pc, #56]	; (2a20 <uiTraceStart+0xa8>)
    29e8:	0001      	movs	r1, r0
    29ea:	2003      	movs	r0, #3
    29ec:	4b0d      	ldr	r3, [pc, #52]	; (2a24 <uiTraceStart+0xac>)
    29ee:	4798      	blx	r3
			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
    29f0:	2200      	movs	r2, #0
    29f2:	0031      	movs	r1, r6
    29f4:	2003      	movs	r0, #3
    29f6:	4b0c      	ldr	r3, [pc, #48]	; (2a28 <uiTraceStart+0xb0>)
    29f8:	4798      	blx	r3
    29fa:	e7e5      	b.n	29c8 <uiTraceStart+0x50>
    29fc:	20000320 	.word	0x20000320
    2a00:	200003d8 	.word	0x200003d8
    2a04:	0000a390 	.word	0x0000a390
    2a08:	00001e25 	.word	0x00001e25
    2a0c:	200003d0 	.word	0x200003d0
    2a10:	00001a1d 	.word	0x00001a1d
    2a14:	00001955 	.word	0x00001955
    2a18:	00002899 	.word	0x00002899
    2a1c:	000021c1 	.word	0x000021c1
    2a20:	0000a3d4 	.word	0x0000a3d4
    2a24:	00002295 	.word	0x00002295
    2a28:	00002075 	.word	0x00002075

00002a2c <vTraceStart>:
{
    2a2c:	b510      	push	{r4, lr}
	(void)uiTraceStart();
    2a2e:	4b01      	ldr	r3, [pc, #4]	; (2a34 <vTraceStart+0x8>)
    2a30:	4798      	blx	r3
}
    2a32:	bd10      	pop	{r4, pc}
    2a34:	00002979 	.word	0x00002979

00002a38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2a38:	0003      	movs	r3, r0
    2a3a:	3308      	adds	r3, #8
    2a3c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2a3e:	2201      	movs	r2, #1
    2a40:	4252      	negs	r2, r2
    2a42:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2a44:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2a46:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2a48:	2300      	movs	r3, #0
    2a4a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    2a4c:	4770      	bx	lr

00002a4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2a4e:	2300      	movs	r3, #0
    2a50:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    2a52:	4770      	bx	lr

00002a54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    2a54:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2a56:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2a58:	689a      	ldr	r2, [r3, #8]
    2a5a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2a5c:	689a      	ldr	r2, [r3, #8]
    2a5e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2a60:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2a64:	6803      	ldr	r3, [r0, #0]
    2a66:	3301      	adds	r3, #1
    2a68:	6003      	str	r3, [r0, #0]
}
    2a6a:	4770      	bx	lr

00002a6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2a6c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2a6e:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2a70:	0002      	movs	r2, r0
    2a72:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    2a74:	1c63      	adds	r3, r4, #1
    2a76:	d102      	bne.n	2a7e <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    2a78:	6902      	ldr	r2, [r0, #16]
    2a7a:	e004      	b.n	2a86 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2a7c:	001a      	movs	r2, r3
    2a7e:	6853      	ldr	r3, [r2, #4]
    2a80:	681d      	ldr	r5, [r3, #0]
    2a82:	42ac      	cmp	r4, r5
    2a84:	d2fa      	bcs.n	2a7c <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2a86:	6853      	ldr	r3, [r2, #4]
    2a88:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2a8a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2a8c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    2a8e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2a90:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2a92:	6803      	ldr	r3, [r0, #0]
    2a94:	3301      	adds	r3, #1
    2a96:	6003      	str	r3, [r0, #0]
}
    2a98:	bd30      	pop	{r4, r5, pc}

00002a9a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2a9a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2a9c:	6842      	ldr	r2, [r0, #4]
    2a9e:	6881      	ldr	r1, [r0, #8]
    2aa0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2aa2:	6882      	ldr	r2, [r0, #8]
    2aa4:	6841      	ldr	r1, [r0, #4]
    2aa6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2aa8:	685a      	ldr	r2, [r3, #4]
    2aaa:	4290      	cmp	r0, r2
    2aac:	d006      	beq.n	2abc <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2aae:	2200      	movs	r2, #0
    2ab0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    2ab2:	681a      	ldr	r2, [r3, #0]
    2ab4:	3a01      	subs	r2, #1
    2ab6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2ab8:	6818      	ldr	r0, [r3, #0]
}
    2aba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2abc:	6882      	ldr	r2, [r0, #8]
    2abe:	605a      	str	r2, [r3, #4]
    2ac0:	e7f5      	b.n	2aae <uxListRemove+0x14>
	...

00002ac4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    2ac4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    2ac6:	2300      	movs	r3, #0
    2ac8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    2aca:	4b06      	ldr	r3, [pc, #24]	; (2ae4 <prvTaskExitError+0x20>)
    2acc:	681b      	ldr	r3, [r3, #0]
    2ace:	3301      	adds	r3, #1
    2ad0:	d001      	beq.n	2ad6 <prvTaskExitError+0x12>
    2ad2:	b672      	cpsid	i
    2ad4:	e7fe      	b.n	2ad4 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    2ad6:	b672      	cpsid	i
	while( ulDummy == 0 )
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	2b00      	cmp	r3, #0
    2adc:	d0fc      	beq.n	2ad8 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    2ade:	b002      	add	sp, #8
    2ae0:	4770      	bx	lr
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	20000028 	.word	0x20000028
	...

00002af0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    2af0:	4a0b      	ldr	r2, [pc, #44]	; (2b20 <pxCurrentTCBConst2>)
    2af2:	6813      	ldr	r3, [r2, #0]
    2af4:	6818      	ldr	r0, [r3, #0]
    2af6:	3020      	adds	r0, #32
    2af8:	f380 8809 	msr	PSP, r0
    2afc:	2002      	movs	r0, #2
    2afe:	f380 8814 	msr	CONTROL, r0
    2b02:	f3bf 8f6f 	isb	sy
    2b06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    2b08:	46ae      	mov	lr, r5
    2b0a:	bc08      	pop	{r3}
    2b0c:	bc04      	pop	{r2}
    2b0e:	b662      	cpsie	i
    2b10:	4718      	bx	r3
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	46c0      	nop			; (mov r8, r8)
    2b16:	46c0      	nop			; (mov r8, r8)
    2b18:	46c0      	nop			; (mov r8, r8)
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	46c0      	nop			; (mov r8, r8)
    2b1e:	46c0      	nop			; (mov r8, r8)

00002b20 <pxCurrentTCBConst2>:
    2b20:	200036bc 	.word	0x200036bc

00002b24 <pxPortInitialiseStack>:
{
    2b24:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    2b26:	1f03      	subs	r3, r0, #4
    2b28:	2480      	movs	r4, #128	; 0x80
    2b2a:	0464      	lsls	r4, r4, #17
    2b2c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    2b2e:	3b04      	subs	r3, #4
    2b30:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    2b32:	3b04      	subs	r3, #4
    2b34:	4902      	ldr	r1, [pc, #8]	; (2b40 <pxPortInitialiseStack+0x1c>)
    2b36:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2b38:	3b14      	subs	r3, #20
    2b3a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    2b3c:	3840      	subs	r0, #64	; 0x40
}
    2b3e:	bd10      	pop	{r4, pc}
    2b40:	00002ac5 	.word	0x00002ac5

00002b44 <SVC_Handler>:
}
    2b44:	4770      	bx	lr
	...

00002b48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    2b48:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2b4a:	4b13      	ldr	r3, [pc, #76]	; (2b98 <xPortStartScheduler+0x50>)
    2b4c:	6819      	ldr	r1, [r3, #0]
    2b4e:	22ff      	movs	r2, #255	; 0xff
    2b50:	0412      	lsls	r2, r2, #16
    2b52:	430a      	orrs	r2, r1
    2b54:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2b56:	6819      	ldr	r1, [r3, #0]
    2b58:	22ff      	movs	r2, #255	; 0xff
    2b5a:	0612      	lsls	r2, r2, #24
    2b5c:	430a      	orrs	r2, r1
    2b5e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    2b60:	4d0e      	ldr	r5, [pc, #56]	; (2b9c <xPortStartScheduler+0x54>)
    2b62:	2400      	movs	r4, #0
    2b64:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    2b66:	4b0e      	ldr	r3, [pc, #56]	; (2ba0 <xPortStartScheduler+0x58>)
    2b68:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2b6a:	2000      	movs	r0, #0
    2b6c:	4b0d      	ldr	r3, [pc, #52]	; (2ba4 <xPortStartScheduler+0x5c>)
    2b6e:	4798      	blx	r3
    2b70:	21fa      	movs	r1, #250	; 0xfa
    2b72:	0089      	lsls	r1, r1, #2
    2b74:	4b0c      	ldr	r3, [pc, #48]	; (2ba8 <xPortStartScheduler+0x60>)
    2b76:	4798      	blx	r3
    2b78:	3801      	subs	r0, #1
    2b7a:	4b0c      	ldr	r3, [pc, #48]	; (2bac <xPortStartScheduler+0x64>)
    2b7c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    2b7e:	2307      	movs	r3, #7
    2b80:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    2b82:	4b0b      	ldr	r3, [pc, #44]	; (2bb0 <xPortStartScheduler+0x68>)
    2b84:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    2b86:	4b0b      	ldr	r3, [pc, #44]	; (2bb4 <xPortStartScheduler+0x6c>)
    2b88:	4798      	blx	r3
	vTaskSwitchContext();
    2b8a:	4b0b      	ldr	r3, [pc, #44]	; (2bb8 <xPortStartScheduler+0x70>)
    2b8c:	4798      	blx	r3
	prvTaskExitError();
    2b8e:	4b0b      	ldr	r3, [pc, #44]	; (2bbc <xPortStartScheduler+0x74>)
    2b90:	4798      	blx	r3
}
    2b92:	2000      	movs	r0, #0
    2b94:	bd70      	pop	{r4, r5, r6, pc}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	e000ed20 	.word	0xe000ed20
    2b9c:	e000e010 	.word	0xe000e010
    2ba0:	e000e018 	.word	0xe000e018
    2ba4:	000065d5 	.word	0x000065d5
    2ba8:	00006c51 	.word	0x00006c51
    2bac:	e000e014 	.word	0xe000e014
    2bb0:	20000028 	.word	0x20000028
    2bb4:	00002af1 	.word	0x00002af1
    2bb8:	000046a9 	.word	0x000046a9
    2bbc:	00002ac5 	.word	0x00002ac5

00002bc0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    2bc0:	2280      	movs	r2, #128	; 0x80
    2bc2:	0552      	lsls	r2, r2, #21
    2bc4:	4b01      	ldr	r3, [pc, #4]	; (2bcc <vPortYield+0xc>)
    2bc6:	601a      	str	r2, [r3, #0]
}
    2bc8:	4770      	bx	lr
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	e000ed04 	.word	0xe000ed04

00002bd0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    2bd0:	b672      	cpsid	i
    uxCriticalNesting++;
    2bd2:	4a04      	ldr	r2, [pc, #16]	; (2be4 <vPortEnterCritical+0x14>)
    2bd4:	6813      	ldr	r3, [r2, #0]
    2bd6:	3301      	adds	r3, #1
    2bd8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    2bda:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2bde:	f3bf 8f6f 	isb	sy
}
    2be2:	4770      	bx	lr
    2be4:	20000028 	.word	0x20000028

00002be8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    2be8:	4b06      	ldr	r3, [pc, #24]	; (2c04 <vPortExitCritical+0x1c>)
    2bea:	681b      	ldr	r3, [r3, #0]
    2bec:	2b00      	cmp	r3, #0
    2bee:	d101      	bne.n	2bf4 <vPortExitCritical+0xc>
    2bf0:	b672      	cpsid	i
    2bf2:	e7fe      	b.n	2bf2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    2bf4:	3b01      	subs	r3, #1
    2bf6:	4a03      	ldr	r2, [pc, #12]	; (2c04 <vPortExitCritical+0x1c>)
    2bf8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d100      	bne.n	2c00 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    2bfe:	b662      	cpsie	i
}
    2c00:	4770      	bx	lr
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	20000028 	.word	0x20000028

00002c08 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    2c08:	f3ef 8010 	mrs	r0, PRIMASK
    2c0c:	b672      	cpsid	i
    2c0e:	4770      	bx	lr

00002c10 <vClearInterruptMaskFromISR>:
	__asm volatile(
    2c10:	f380 8810 	msr	PRIMASK, r0
    2c14:	4770      	bx	lr
	...

00002c20 <PendSV_Handler>:
	__asm volatile
    2c20:	f3ef 8009 	mrs	r0, PSP
    2c24:	4b0e      	ldr	r3, [pc, #56]	; (2c60 <pxCurrentTCBConst>)
    2c26:	681a      	ldr	r2, [r3, #0]
    2c28:	3820      	subs	r0, #32
    2c2a:	6010      	str	r0, [r2, #0]
    2c2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2c2e:	4644      	mov	r4, r8
    2c30:	464d      	mov	r5, r9
    2c32:	4656      	mov	r6, sl
    2c34:	465f      	mov	r7, fp
    2c36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2c38:	b508      	push	{r3, lr}
    2c3a:	b672      	cpsid	i
    2c3c:	f001 fd34 	bl	46a8 <vTaskSwitchContext>
    2c40:	b662      	cpsie	i
    2c42:	bc0c      	pop	{r2, r3}
    2c44:	6811      	ldr	r1, [r2, #0]
    2c46:	6808      	ldr	r0, [r1, #0]
    2c48:	3010      	adds	r0, #16
    2c4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2c4c:	46a0      	mov	r8, r4
    2c4e:	46a9      	mov	r9, r5
    2c50:	46b2      	mov	sl, r6
    2c52:	46bb      	mov	fp, r7
    2c54:	f380 8809 	msr	PSP, r0
    2c58:	3820      	subs	r0, #32
    2c5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2c5c:	4718      	bx	r3
    2c5e:	46c0      	nop			; (mov r8, r8)

00002c60 <pxCurrentTCBConst>:
    2c60:	200036bc 	.word	0x200036bc

00002c64 <SysTick_Handler>:
{
    2c64:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2c66:	4b07      	ldr	r3, [pc, #28]	; (2c84 <SysTick_Handler+0x20>)
    2c68:	4798      	blx	r3
    2c6a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    2c6c:	4b06      	ldr	r3, [pc, #24]	; (2c88 <SysTick_Handler+0x24>)
    2c6e:	4798      	blx	r3
    2c70:	2800      	cmp	r0, #0
    2c72:	d003      	beq.n	2c7c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2c74:	2280      	movs	r2, #128	; 0x80
    2c76:	0552      	lsls	r2, r2, #21
    2c78:	4b04      	ldr	r3, [pc, #16]	; (2c8c <SysTick_Handler+0x28>)
    2c7a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    2c7c:	0020      	movs	r0, r4
    2c7e:	4b04      	ldr	r3, [pc, #16]	; (2c90 <SysTick_Handler+0x2c>)
    2c80:	4798      	blx	r3
}
    2c82:	bd10      	pop	{r4, pc}
    2c84:	00002c09 	.word	0x00002c09
    2c88:	00004351 	.word	0x00004351
    2c8c:	e000ed04 	.word	0xe000ed04
    2c90:	00002c11 	.word	0x00002c11

00002c94 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2c94:	b570      	push	{r4, r5, r6, lr}
    2c96:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    2c98:	0743      	lsls	r3, r0, #29
    2c9a:	d002      	beq.n	2ca2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    2c9c:	2307      	movs	r3, #7
    2c9e:	439c      	bics	r4, r3
    2ca0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    2ca2:	4b18      	ldr	r3, [pc, #96]	; (2d04 <pvPortMalloc+0x70>)
    2ca4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    2ca6:	4b18      	ldr	r3, [pc, #96]	; (2d08 <pvPortMalloc+0x74>)
    2ca8:	681b      	ldr	r3, [r3, #0]
    2caa:	2b00      	cmp	r3, #0
    2cac:	d017      	beq.n	2cde <pvPortMalloc+0x4a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2cae:	4b17      	ldr	r3, [pc, #92]	; (2d0c <pvPortMalloc+0x78>)
    2cb0:	681a      	ldr	r2, [r3, #0]
    2cb2:	18a3      	adds	r3, r4, r2
    2cb4:	4916      	ldr	r1, [pc, #88]	; (2d10 <pvPortMalloc+0x7c>)
    2cb6:	428b      	cmp	r3, r1
    2cb8:	d818      	bhi.n	2cec <pvPortMalloc+0x58>
    2cba:	429a      	cmp	r2, r3
    2cbc:	d216      	bcs.n	2cec <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2cbe:	4912      	ldr	r1, [pc, #72]	; (2d08 <pvPortMalloc+0x74>)
    2cc0:	680d      	ldr	r5, [r1, #0]
    2cc2:	18ad      	adds	r5, r5, r2
			xNextFreeByte += xWantedSize;
    2cc4:	4a11      	ldr	r2, [pc, #68]	; (2d0c <pvPortMalloc+0x78>)
    2cc6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
    2cc8:	2d00      	cmp	r5, #0
    2cca:	d00f      	beq.n	2cec <pvPortMalloc+0x58>
    2ccc:	0022      	movs	r2, r4
    2cce:	0029      	movs	r1, r5
    2cd0:	2094      	movs	r0, #148	; 0x94
    2cd2:	4b10      	ldr	r3, [pc, #64]	; (2d14 <pvPortMalloc+0x80>)
    2cd4:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
    2cd6:	4b10      	ldr	r3, [pc, #64]	; (2d18 <pvPortMalloc+0x84>)
    2cd8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    2cda:	0028      	movs	r0, r5
    2cdc:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2cde:	2207      	movs	r2, #7
    2ce0:	4b0e      	ldr	r3, [pc, #56]	; (2d1c <pvPortMalloc+0x88>)
    2ce2:	3308      	adds	r3, #8
    2ce4:	4393      	bics	r3, r2
    2ce6:	4a08      	ldr	r2, [pc, #32]	; (2d08 <pvPortMalloc+0x74>)
    2ce8:	6013      	str	r3, [r2, #0]
    2cea:	e7e0      	b.n	2cae <pvPortMalloc+0x1a>
		traceMALLOC( pvReturn, xWantedSize );
    2cec:	0022      	movs	r2, r4
    2cee:	2100      	movs	r1, #0
    2cf0:	20e8      	movs	r0, #232	; 0xe8
    2cf2:	4b08      	ldr	r3, [pc, #32]	; (2d14 <pvPortMalloc+0x80>)
    2cf4:	4798      	blx	r3
	( void ) xTaskResumeAll();
    2cf6:	4b08      	ldr	r3, [pc, #32]	; (2d18 <pvPortMalloc+0x84>)
    2cf8:	4798      	blx	r3
			vApplicationMallocFailedHook();
    2cfa:	4b09      	ldr	r3, [pc, #36]	; (2d20 <pvPortMalloc+0x8c>)
    2cfc:	4798      	blx	r3
    2cfe:	2500      	movs	r5, #0
	return pvReturn;
    2d00:	e7eb      	b.n	2cda <pvPortMalloc+0x46>
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	00004335 	.word	0x00004335
    2d08:	200003ec 	.word	0x200003ec
    2d0c:	200036b8 	.word	0x200036b8
    2d10:	000032bf 	.word	0x000032bf
    2d14:	00002589 	.word	0x00002589
    2d18:	000044dd 	.word	0x000044dd
    2d1c:	200003f0 	.word	0x200003f0
    2d20:	00006c29 	.word	0x00006c29

00002d24 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    2d24:	2800      	cmp	r0, #0
    2d26:	d001      	beq.n	2d2c <vPortFree+0x8>
    2d28:	b672      	cpsid	i
    2d2a:	e7fe      	b.n	2d2a <vPortFree+0x6>
}
    2d2c:	4770      	bx	lr
	...

00002d30 <xPortGetFreeHeapSize>:
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
    2d30:	4b02      	ldr	r3, [pc, #8]	; (2d3c <xPortGetFreeHeapSize+0xc>)
    2d32:	681b      	ldr	r3, [r3, #0]
    2d34:	20cb      	movs	r0, #203	; 0xcb
    2d36:	0180      	lsls	r0, r0, #6
    2d38:	1ac0      	subs	r0, r0, r3
}
    2d3a:	4770      	bx	lr
    2d3c:	200036b8 	.word	0x200036b8

00002d40 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2d40:	b510      	push	{r4, lr}
    2d42:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2d44:	4b03      	ldr	r3, [pc, #12]	; (2d54 <prvIsQueueEmpty+0x14>)
    2d46:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2d48:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2d4a:	4b03      	ldr	r3, [pc, #12]	; (2d58 <prvIsQueueEmpty+0x18>)
    2d4c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2d4e:	4260      	negs	r0, r4
    2d50:	4160      	adcs	r0, r4

	return xReturn;
}
    2d52:	bd10      	pop	{r4, pc}
    2d54:	00002bd1 	.word	0x00002bd1
    2d58:	00002be9 	.word	0x00002be9

00002d5c <prvCopyDataToQueue>:
{
    2d5c:	b570      	push	{r4, r5, r6, lr}
    2d5e:	0004      	movs	r4, r0
    2d60:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2d62:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2d64:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2d66:	2a00      	cmp	r2, #0
    2d68:	d10b      	bne.n	2d82 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    2d6a:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2d6c:	6823      	ldr	r3, [r4, #0]
    2d6e:	4283      	cmp	r3, r0
    2d70:	d104      	bne.n	2d7c <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2d72:	6860      	ldr	r0, [r4, #4]
    2d74:	4b16      	ldr	r3, [pc, #88]	; (2dd0 <prvCopyDataToQueue+0x74>)
    2d76:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2d78:	2300      	movs	r3, #0
    2d7a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    2d7c:	3501      	adds	r5, #1
    2d7e:	63a5      	str	r5, [r4, #56]	; 0x38
}
    2d80:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    2d82:	2e00      	cmp	r6, #0
    2d84:	d10e      	bne.n	2da4 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    2d86:	6880      	ldr	r0, [r0, #8]
    2d88:	4b12      	ldr	r3, [pc, #72]	; (2dd4 <prvCopyDataToQueue+0x78>)
    2d8a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2d8c:	68a3      	ldr	r3, [r4, #8]
    2d8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2d90:	4694      	mov	ip, r2
    2d92:	4463      	add	r3, ip
    2d94:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    2d96:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2d98:	6862      	ldr	r2, [r4, #4]
    2d9a:	4293      	cmp	r3, r2
    2d9c:	d3ee      	bcc.n	2d7c <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2d9e:	6823      	ldr	r3, [r4, #0]
    2da0:	60a3      	str	r3, [r4, #8]
    2da2:	e7eb      	b.n	2d7c <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2da4:	68c0      	ldr	r0, [r0, #12]
    2da6:	4b0b      	ldr	r3, [pc, #44]	; (2dd4 <prvCopyDataToQueue+0x78>)
    2da8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2dac:	425b      	negs	r3, r3
    2dae:	68e2      	ldr	r2, [r4, #12]
    2db0:	18d2      	adds	r2, r2, r3
    2db2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2db4:	6821      	ldr	r1, [r4, #0]
    2db6:	428a      	cmp	r2, r1
    2db8:	d203      	bcs.n	2dc2 <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2dba:	6862      	ldr	r2, [r4, #4]
    2dbc:	4694      	mov	ip, r2
    2dbe:	4463      	add	r3, ip
    2dc0:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    2dc2:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    2dc4:	2e02      	cmp	r6, #2
    2dc6:	d1d9      	bne.n	2d7c <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2dc8:	4285      	cmp	r5, r0
    2dca:	d0d7      	beq.n	2d7c <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    2dcc:	3d01      	subs	r5, #1
    2dce:	e7d5      	b.n	2d7c <prvCopyDataToQueue+0x20>
    2dd0:	00004c2d 	.word	0x00004c2d
    2dd4:	00008a01 	.word	0x00008a01

00002dd8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    2dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dda:	46ce      	mov	lr, r9
    2ddc:	4647      	mov	r7, r8
    2dde:	b580      	push	{r7, lr}
    2de0:	b083      	sub	sp, #12
    2de2:	9001      	str	r0, [sp, #4]
    2de4:	9100      	str	r1, [sp, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    2de6:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    2de8:	2c00      	cmp	r4, #0
    2dea:	d005      	beq.n	2df8 <prvNotifyQueueSetContainer+0x20>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    2dec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2dee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2df0:	429a      	cmp	r2, r3
    2df2:	d303      	bcc.n	2dfc <prvNotifyQueueSetContainer+0x24>
    2df4:	b672      	cpsid	i
    2df6:	e7fe      	b.n	2df6 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer );
    2df8:	b672      	cpsid	i
    2dfa:	e7fe      	b.n	2dfa <prvNotifyQueueSetContainer+0x22>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2dfc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    2dfe:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    2e00:	4293      	cmp	r3, r2
    2e02:	d805      	bhi.n	2e10 <prvNotifyQueueSetContainer+0x38>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    2e04:	0030      	movs	r0, r6
    2e06:	b003      	add	sp, #12
    2e08:	bc0c      	pop	{r2, r3}
    2e0a:	4690      	mov	r8, r2
    2e0c:	4699      	mov	r9, r3
    2e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    2e10:	2345      	movs	r3, #69	; 0x45
    2e12:	5ce5      	ldrb	r5, [r4, r3]
    2e14:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND( pxQueueSetContainer );
    2e16:	4b2c      	ldr	r3, [pc, #176]	; (2ec8 <prvNotifyQueueSetContainer+0xf0>)
    2e18:	4798      	blx	r3
    2e1a:	4b2c      	ldr	r3, [pc, #176]	; (2ecc <prvNotifyQueueSetContainer+0xf4>)
    2e1c:	4798      	blx	r3
    2e1e:	4b2c      	ldr	r3, [pc, #176]	; (2ed0 <prvNotifyQueueSetContainer+0xf8>)
    2e20:	881b      	ldrh	r3, [r3, #0]
    2e22:	4203      	tst	r3, r0
    2e24:	d01e      	beq.n	2e64 <prvNotifyQueueSetContainer+0x8c>
    2e26:	0020      	movs	r0, r4
    2e28:	4b2a      	ldr	r3, [pc, #168]	; (2ed4 <prvNotifyQueueSetContainer+0xfc>)
    2e2a:	4798      	blx	r3
    2e2c:	4b28      	ldr	r3, [pc, #160]	; (2ed0 <prvNotifyQueueSetContainer+0xf8>)
    2e2e:	881b      	ldrh	r3, [r3, #0]
    2e30:	4203      	tst	r3, r0
    2e32:	d017      	beq.n	2e64 <prvNotifyQueueSetContainer+0x8c>
    2e34:	3625      	adds	r6, #37	; 0x25
    2e36:	9b00      	ldr	r3, [sp, #0]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d106      	bne.n	2e4a <prvNotifyQueueSetContainer+0x72>
    2e3c:	0020      	movs	r0, r4
    2e3e:	4b26      	ldr	r3, [pc, #152]	; (2ed8 <prvNotifyQueueSetContainer+0x100>)
    2e40:	4798      	blx	r3
    2e42:	4b26      	ldr	r3, [pc, #152]	; (2edc <prvNotifyQueueSetContainer+0x104>)
    2e44:	5c1e      	ldrb	r6, [r3, r0]
    2e46:	3620      	adds	r6, #32
    2e48:	b2f6      	uxtb	r6, r6
    2e4a:	0020      	movs	r0, r4
    2e4c:	4b22      	ldr	r3, [pc, #136]	; (2ed8 <prvNotifyQueueSetContainer+0x100>)
    2e4e:	4798      	blx	r3
    2e50:	4b22      	ldr	r3, [pc, #136]	; (2edc <prvNotifyQueueSetContainer+0x104>)
    2e52:	5c1f      	ldrb	r7, [r3, r0]
    2e54:	0020      	movs	r0, r4
    2e56:	4b22      	ldr	r3, [pc, #136]	; (2ee0 <prvNotifyQueueSetContainer+0x108>)
    2e58:	4798      	blx	r3
    2e5a:	b2c2      	uxtb	r2, r0
    2e5c:	0039      	movs	r1, r7
    2e5e:	0030      	movs	r0, r6
    2e60:	4b20      	ldr	r3, [pc, #128]	; (2ee4 <prvNotifyQueueSetContainer+0x10c>)
    2e62:	4798      	blx	r3
    2e64:	0020      	movs	r0, r4
    2e66:	4f1c      	ldr	r7, [pc, #112]	; (2ed8 <prvNotifyQueueSetContainer+0x100>)
    2e68:	47b8      	blx	r7
    2e6a:	4e1c      	ldr	r6, [pc, #112]	; (2edc <prvNotifyQueueSetContainer+0x104>)
    2e6c:	5c33      	ldrb	r3, [r6, r0]
    2e6e:	4698      	mov	r8, r3
    2e70:	0020      	movs	r0, r4
    2e72:	4b1b      	ldr	r3, [pc, #108]	; (2ee0 <prvNotifyQueueSetContainer+0x108>)
    2e74:	4798      	blx	r3
    2e76:	b2c3      	uxtb	r3, r0
    2e78:	4699      	mov	r9, r3
    2e7a:	0020      	movs	r0, r4
    2e7c:	47b8      	blx	r7
    2e7e:	5c33      	ldrb	r3, [r6, r0]
    2e80:	2b02      	cmp	r3, #2
    2e82:	d019      	beq.n	2eb8 <prvNotifyQueueSetContainer+0xe0>
    2e84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2e86:	3201      	adds	r2, #1
    2e88:	b2d2      	uxtb	r2, r2
    2e8a:	4649      	mov	r1, r9
    2e8c:	4640      	mov	r0, r8
    2e8e:	4b16      	ldr	r3, [pc, #88]	; (2ee8 <prvNotifyQueueSetContainer+0x110>)
    2e90:	4798      	blx	r3
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    2e92:	9a00      	ldr	r2, [sp, #0]
    2e94:	a901      	add	r1, sp, #4
    2e96:	0020      	movs	r0, r4
    2e98:	4b14      	ldr	r3, [pc, #80]	; (2eec <prvNotifyQueueSetContainer+0x114>)
    2e9a:	4798      	blx	r3
    2e9c:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    2e9e:	1c6b      	adds	r3, r5, #1
    2ea0:	d10c      	bne.n	2ebc <prvNotifyQueueSetContainer+0xe4>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    2ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2ea4:	2b00      	cmp	r3, #0
    2ea6:	d0ad      	beq.n	2e04 <prvNotifyQueueSetContainer+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    2ea8:	0020      	movs	r0, r4
    2eaa:	3024      	adds	r0, #36	; 0x24
    2eac:	4b10      	ldr	r3, [pc, #64]	; (2ef0 <prvNotifyQueueSetContainer+0x118>)
    2eae:	4798      	blx	r3
    2eb0:	2800      	cmp	r0, #0
    2eb2:	d0a7      	beq.n	2e04 <prvNotifyQueueSetContainer+0x2c>
						xReturn = pdTRUE;
    2eb4:	2601      	movs	r6, #1
    2eb6:	e7a5      	b.n	2e04 <prvNotifyQueueSetContainer+0x2c>
			traceQUEUE_SEND( pxQueueSetContainer );
    2eb8:	2200      	movs	r2, #0
    2eba:	e7e6      	b.n	2e8a <prvNotifyQueueSetContainer+0xb2>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2ebc:	3501      	adds	r5, #1
    2ebe:	b26d      	sxtb	r5, r5
    2ec0:	2345      	movs	r3, #69	; 0x45
    2ec2:	54e5      	strb	r5, [r4, r3]
    2ec4:	e79e      	b.n	2e04 <prvNotifyQueueSetContainer+0x2c>
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	00001a1d 	.word	0x00001a1d
    2ecc:	00001965 	.word	0x00001965
    2ed0:	20000020 	.word	0x20000020
    2ed4:	000019c9 	.word	0x000019c9
    2ed8:	00001949 	.word	0x00001949
    2edc:	20000018 	.word	0x20000018
    2ee0:	000019b9 	.word	0x000019b9
    2ee4:	00002655 	.word	0x00002655
    2ee8:	00002129 	.word	0x00002129
    2eec:	00002d5d 	.word	0x00002d5d
    2ef0:	0000498d 	.word	0x0000498d

00002ef4 <prvCopyDataFromQueue>:
{
    2ef4:	b510      	push	{r4, lr}
    2ef6:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2ef8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2efa:	2a00      	cmp	r2, #0
    2efc:	d00b      	beq.n	2f16 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2efe:	68c3      	ldr	r3, [r0, #12]
    2f00:	189b      	adds	r3, r3, r2
    2f02:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2f04:	6841      	ldr	r1, [r0, #4]
    2f06:	428b      	cmp	r3, r1
    2f08:	d301      	bcc.n	2f0e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2f0a:	6803      	ldr	r3, [r0, #0]
    2f0c:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    2f0e:	68c1      	ldr	r1, [r0, #12]
    2f10:	0020      	movs	r0, r4
    2f12:	4b01      	ldr	r3, [pc, #4]	; (2f18 <prvCopyDataFromQueue+0x24>)
    2f14:	4798      	blx	r3
}
    2f16:	bd10      	pop	{r4, pc}
    2f18:	00008a01 	.word	0x00008a01

00002f1c <prvUnlockQueue>:
{
    2f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f1e:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    2f20:	4b25      	ldr	r3, [pc, #148]	; (2fb8 <prvUnlockQueue+0x9c>)
    2f22:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    2f24:	2345      	movs	r3, #69	; 0x45
    2f26:	5cfc      	ldrb	r4, [r7, r3]
    2f28:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    2f2a:	2c00      	cmp	r4, #0
    2f2c:	dd1c      	ble.n	2f68 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    2f2e:	4e23      	ldr	r6, [pc, #140]	; (2fbc <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f30:	4d23      	ldr	r5, [pc, #140]	; (2fc0 <prvUnlockQueue+0xa4>)
    2f32:	e00b      	b.n	2f4c <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f36:	2b00      	cmp	r3, #0
    2f38:	d016      	beq.n	2f68 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f3a:	0038      	movs	r0, r7
    2f3c:	3024      	adds	r0, #36	; 0x24
    2f3e:	47a8      	blx	r5
    2f40:	2800      	cmp	r0, #0
    2f42:	d10e      	bne.n	2f62 <prvUnlockQueue+0x46>
    2f44:	3c01      	subs	r4, #1
    2f46:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    2f48:	2c00      	cmp	r4, #0
    2f4a:	d00d      	beq.n	2f68 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    2f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d0f0      	beq.n	2f34 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    2f52:	2100      	movs	r1, #0
    2f54:	0038      	movs	r0, r7
    2f56:	47b0      	blx	r6
    2f58:	2800      	cmp	r0, #0
    2f5a:	d0f3      	beq.n	2f44 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    2f5c:	4b19      	ldr	r3, [pc, #100]	; (2fc4 <prvUnlockQueue+0xa8>)
    2f5e:	4798      	blx	r3
    2f60:	e7f0      	b.n	2f44 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    2f62:	4b18      	ldr	r3, [pc, #96]	; (2fc4 <prvUnlockQueue+0xa8>)
    2f64:	4798      	blx	r3
    2f66:	e7ed      	b.n	2f44 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    2f68:	22ff      	movs	r2, #255	; 0xff
    2f6a:	2345      	movs	r3, #69	; 0x45
    2f6c:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    2f6e:	4b16      	ldr	r3, [pc, #88]	; (2fc8 <prvUnlockQueue+0xac>)
    2f70:	4798      	blx	r3
	taskENTER_CRITICAL();
    2f72:	4b11      	ldr	r3, [pc, #68]	; (2fb8 <prvUnlockQueue+0x9c>)
    2f74:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    2f76:	2344      	movs	r3, #68	; 0x44
    2f78:	5cfc      	ldrb	r4, [r7, r3]
    2f7a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    2f7c:	2c00      	cmp	r4, #0
    2f7e:	dd14      	ble.n	2faa <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f80:	693b      	ldr	r3, [r7, #16]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d011      	beq.n	2faa <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f86:	003d      	movs	r5, r7
    2f88:	3510      	adds	r5, #16
    2f8a:	4e0d      	ldr	r6, [pc, #52]	; (2fc0 <prvUnlockQueue+0xa4>)
    2f8c:	e006      	b.n	2f9c <prvUnlockQueue+0x80>
    2f8e:	3c01      	subs	r4, #1
    2f90:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    2f92:	2c00      	cmp	r4, #0
    2f94:	d009      	beq.n	2faa <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2f96:	693b      	ldr	r3, [r7, #16]
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d006      	beq.n	2faa <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f9c:	0028      	movs	r0, r5
    2f9e:	47b0      	blx	r6
    2fa0:	2800      	cmp	r0, #0
    2fa2:	d0f4      	beq.n	2f8e <prvUnlockQueue+0x72>
					vTaskMissedYield();
    2fa4:	4b07      	ldr	r3, [pc, #28]	; (2fc4 <prvUnlockQueue+0xa8>)
    2fa6:	4798      	blx	r3
    2fa8:	e7f1      	b.n	2f8e <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    2faa:	22ff      	movs	r2, #255	; 0xff
    2fac:	2344      	movs	r3, #68	; 0x44
    2fae:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    2fb0:	4b05      	ldr	r3, [pc, #20]	; (2fc8 <prvUnlockQueue+0xac>)
    2fb2:	4798      	blx	r3
}
    2fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	00002bd1 	.word	0x00002bd1
    2fbc:	00002dd9 	.word	0x00002dd9
    2fc0:	0000498d 	.word	0x0000498d
    2fc4:	00004ac9 	.word	0x00004ac9
    2fc8:	00002be9 	.word	0x00002be9

00002fcc <xQueueGenericReset>:
{
    2fcc:	b570      	push	{r4, r5, r6, lr}
    2fce:	0004      	movs	r4, r0
    2fd0:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    2fd2:	2800      	cmp	r0, #0
    2fd4:	d021      	beq.n	301a <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    2fd6:	4b17      	ldr	r3, [pc, #92]	; (3034 <xQueueGenericReset+0x68>)
    2fd8:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2fda:	6822      	ldr	r2, [r4, #0]
    2fdc:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2fde:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2fe0:	434b      	muls	r3, r1
    2fe2:	18d0      	adds	r0, r2, r3
    2fe4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2fe6:	2000      	movs	r0, #0
    2fe8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2fea:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    2fec:	1a5b      	subs	r3, r3, r1
    2fee:	18d3      	adds	r3, r2, r3
    2ff0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    2ff2:	23ff      	movs	r3, #255	; 0xff
    2ff4:	2244      	movs	r2, #68	; 0x44
    2ff6:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    2ff8:	3201      	adds	r2, #1
    2ffa:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    2ffc:	2d00      	cmp	r5, #0
    2ffe:	d111      	bne.n	3024 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3000:	6923      	ldr	r3, [r4, #16]
    3002:	2b00      	cmp	r3, #0
    3004:	d005      	beq.n	3012 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3006:	0020      	movs	r0, r4
    3008:	3010      	adds	r0, #16
    300a:	4b0b      	ldr	r3, [pc, #44]	; (3038 <xQueueGenericReset+0x6c>)
    300c:	4798      	blx	r3
    300e:	2800      	cmp	r0, #0
    3010:	d105      	bne.n	301e <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    3012:	4b0a      	ldr	r3, [pc, #40]	; (303c <xQueueGenericReset+0x70>)
    3014:	4798      	blx	r3
}
    3016:	2001      	movs	r0, #1
    3018:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    301a:	b672      	cpsid	i
    301c:	e7fe      	b.n	301c <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    301e:	4b08      	ldr	r3, [pc, #32]	; (3040 <xQueueGenericReset+0x74>)
    3020:	4798      	blx	r3
    3022:	e7f6      	b.n	3012 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    3024:	0020      	movs	r0, r4
    3026:	3010      	adds	r0, #16
    3028:	4d06      	ldr	r5, [pc, #24]	; (3044 <xQueueGenericReset+0x78>)
    302a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    302c:	0020      	movs	r0, r4
    302e:	3024      	adds	r0, #36	; 0x24
    3030:	47a8      	blx	r5
    3032:	e7ee      	b.n	3012 <xQueueGenericReset+0x46>
    3034:	00002bd1 	.word	0x00002bd1
    3038:	0000498d 	.word	0x0000498d
    303c:	00002be9 	.word	0x00002be9
    3040:	00002bc1 	.word	0x00002bc1
    3044:	00002a39 	.word	0x00002a39

00003048 <xQueueGenericCreate>:
	{
    3048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    304a:	0006      	movs	r6, r0
    304c:	000d      	movs	r5, r1
    304e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    3050:	2800      	cmp	r0, #0
    3052:	d101      	bne.n	3058 <xQueueGenericCreate+0x10>
    3054:	b672      	cpsid	i
    3056:	e7fe      	b.n	3056 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3058:	0008      	movs	r0, r1
    305a:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    305c:	3054      	adds	r0, #84	; 0x54
    305e:	4b38      	ldr	r3, [pc, #224]	; (3140 <xQueueGenericCreate+0xf8>)
    3060:	4798      	blx	r3
    3062:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    3064:	d05b      	beq.n	311e <xQueueGenericCreate+0xd6>
	if( uxItemSize == ( UBaseType_t ) 0 )
    3066:	2d00      	cmp	r5, #0
    3068:	d13b      	bne.n	30e2 <xQueueGenericCreate+0x9a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    306a:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    306c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    306e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    3070:	2101      	movs	r1, #1
    3072:	0020      	movs	r0, r4
    3074:	4b33      	ldr	r3, [pc, #204]	; (3144 <xQueueGenericCreate+0xfc>)
    3076:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    3078:	2350      	movs	r3, #80	; 0x50
    307a:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    307c:	2300      	movs	r3, #0
    307e:	64a3      	str	r3, [r4, #72]	; 0x48
	traceQUEUE_CREATE( pxNewQueue );
    3080:	0020      	movs	r0, r4
    3082:	4e31      	ldr	r6, [pc, #196]	; (3148 <xQueueGenericCreate+0x100>)
    3084:	47b0      	blx	r6
    3086:	4d31      	ldr	r5, [pc, #196]	; (314c <xQueueGenericCreate+0x104>)
    3088:	5c28      	ldrb	r0, [r5, r0]
    308a:	4b31      	ldr	r3, [pc, #196]	; (3150 <xQueueGenericCreate+0x108>)
    308c:	4798      	blx	r3
    308e:	b281      	uxth	r1, r0
    3090:	0020      	movs	r0, r4
    3092:	4b30      	ldr	r3, [pc, #192]	; (3154 <xQueueGenericCreate+0x10c>)
    3094:	4798      	blx	r3
    3096:	4b30      	ldr	r3, [pc, #192]	; (3158 <xQueueGenericCreate+0x110>)
    3098:	8819      	ldrh	r1, [r3, #0]
    309a:	0020      	movs	r0, r4
    309c:	4b2f      	ldr	r3, [pc, #188]	; (315c <xQueueGenericCreate+0x114>)
    309e:	4798      	blx	r3
    30a0:	0020      	movs	r0, r4
    30a2:	47b0      	blx	r6
    30a4:	5c2d      	ldrb	r5, [r5, r0]
    30a6:	0020      	movs	r0, r4
    30a8:	4b2d      	ldr	r3, [pc, #180]	; (3160 <xQueueGenericCreate+0x118>)
    30aa:	4798      	blx	r3
    30ac:	b2c1      	uxtb	r1, r0
    30ae:	0028      	movs	r0, r5
    30b0:	4b2c      	ldr	r3, [pc, #176]	; (3164 <xQueueGenericCreate+0x11c>)
    30b2:	4798      	blx	r3
    30b4:	4b2c      	ldr	r3, [pc, #176]	; (3168 <xQueueGenericCreate+0x120>)
    30b6:	4798      	blx	r3
    30b8:	4b2c      	ldr	r3, [pc, #176]	; (316c <xQueueGenericCreate+0x124>)
    30ba:	4798      	blx	r3
    30bc:	4b2c      	ldr	r3, [pc, #176]	; (3170 <xQueueGenericCreate+0x128>)
    30be:	881b      	ldrh	r3, [r3, #0]
    30c0:	4203      	tst	r3, r0
    30c2:	d112      	bne.n	30ea <xQueueGenericCreate+0xa2>
    30c4:	0020      	movs	r0, r4
    30c6:	4b20      	ldr	r3, [pc, #128]	; (3148 <xQueueGenericCreate+0x100>)
    30c8:	4798      	blx	r3
    30ca:	4b20      	ldr	r3, [pc, #128]	; (314c <xQueueGenericCreate+0x104>)
    30cc:	5c1d      	ldrb	r5, [r3, r0]
    30ce:	0020      	movs	r0, r4
    30d0:	4b23      	ldr	r3, [pc, #140]	; (3160 <xQueueGenericCreate+0x118>)
    30d2:	4798      	blx	r3
    30d4:	b2c1      	uxtb	r1, r0
    30d6:	2200      	movs	r2, #0
    30d8:	0028      	movs	r0, r5
    30da:	4b26      	ldr	r3, [pc, #152]	; (3174 <xQueueGenericCreate+0x12c>)
    30dc:	4798      	blx	r3
	}
    30de:	0020      	movs	r0, r4
    30e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    30e2:	0003      	movs	r3, r0
    30e4:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    30e6:	6003      	str	r3, [r0, #0]
    30e8:	e7c0      	b.n	306c <xQueueGenericCreate+0x24>
	traceQUEUE_CREATE( pxNewQueue );
    30ea:	0020      	movs	r0, r4
    30ec:	4b22      	ldr	r3, [pc, #136]	; (3178 <xQueueGenericCreate+0x130>)
    30ee:	4798      	blx	r3
    30f0:	4b1f      	ldr	r3, [pc, #124]	; (3170 <xQueueGenericCreate+0x128>)
    30f2:	881b      	ldrh	r3, [r3, #0]
    30f4:	4203      	tst	r3, r0
    30f6:	d0e5      	beq.n	30c4 <xQueueGenericCreate+0x7c>
    30f8:	0020      	movs	r0, r4
    30fa:	4f13      	ldr	r7, [pc, #76]	; (3148 <xQueueGenericCreate+0x100>)
    30fc:	47b8      	blx	r7
    30fe:	4e13      	ldr	r6, [pc, #76]	; (314c <xQueueGenericCreate+0x104>)
    3100:	5c35      	ldrb	r5, [r6, r0]
    3102:	3518      	adds	r5, #24
    3104:	b2ed      	uxtb	r5, r5
    3106:	0020      	movs	r0, r4
    3108:	47b8      	blx	r7
    310a:	5c36      	ldrb	r6, [r6, r0]
    310c:	0020      	movs	r0, r4
    310e:	4b14      	ldr	r3, [pc, #80]	; (3160 <xQueueGenericCreate+0x118>)
    3110:	4798      	blx	r3
    3112:	b2c2      	uxtb	r2, r0
    3114:	0031      	movs	r1, r6
    3116:	0028      	movs	r0, r5
    3118:	4b18      	ldr	r3, [pc, #96]	; (317c <xQueueGenericCreate+0x134>)
    311a:	4798      	blx	r3
    311c:	e7d2      	b.n	30c4 <xQueueGenericCreate+0x7c>
			traceQUEUE_CREATE_FAILED( ucQueueType );
    311e:	4b12      	ldr	r3, [pc, #72]	; (3168 <xQueueGenericCreate+0x120>)
    3120:	4798      	blx	r3
    3122:	4b12      	ldr	r3, [pc, #72]	; (316c <xQueueGenericCreate+0x124>)
    3124:	4798      	blx	r3
    3126:	4b12      	ldr	r3, [pc, #72]	; (3170 <xQueueGenericCreate+0x128>)
    3128:	881b      	ldrh	r3, [r3, #0]
    312a:	4203      	tst	r3, r0
    312c:	d0d7      	beq.n	30de <xQueueGenericCreate+0x96>
    312e:	4b07      	ldr	r3, [pc, #28]	; (314c <xQueueGenericCreate+0x104>)
    3130:	5dd8      	ldrb	r0, [r3, r7]
    3132:	3040      	adds	r0, #64	; 0x40
    3134:	b2c0      	uxtb	r0, r0
    3136:	2100      	movs	r1, #0
    3138:	4b11      	ldr	r3, [pc, #68]	; (3180 <xQueueGenericCreate+0x138>)
    313a:	4798      	blx	r3
    313c:	e7cf      	b.n	30de <xQueueGenericCreate+0x96>
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	00002c95 	.word	0x00002c95
    3144:	00002fcd 	.word	0x00002fcd
    3148:	00001949 	.word	0x00001949
    314c:	20000018 	.word	0x20000018
    3150:	000021c1 	.word	0x000021c1
    3154:	000019d9 	.word	0x000019d9
    3158:	2000001e 	.word	0x2000001e
    315c:	000019f9 	.word	0x000019f9
    3160:	000019b9 	.word	0x000019b9
    3164:	00002051 	.word	0x00002051
    3168:	00001a1d 	.word	0x00001a1d
    316c:	00001965 	.word	0x00001965
    3170:	20000020 	.word	0x20000020
    3174:	00002129 	.word	0x00002129
    3178:	000019c9 	.word	0x000019c9
    317c:	00002655 	.word	0x00002655
    3180:	000027f1 	.word	0x000027f1

00003184 <xQueueGenericSend>:
{
    3184:	b5f0      	push	{r4, r5, r6, r7, lr}
    3186:	46ce      	mov	lr, r9
    3188:	4647      	mov	r7, r8
    318a:	b580      	push	{r7, lr}
    318c:	b085      	sub	sp, #20
    318e:	0004      	movs	r4, r0
    3190:	9100      	str	r1, [sp, #0]
    3192:	9201      	str	r2, [sp, #4]
    3194:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    3196:	2800      	cmp	r0, #0
    3198:	d00d      	beq.n	31b6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    319a:	9b00      	ldr	r3, [sp, #0]
    319c:	2b00      	cmp	r3, #0
    319e:	d00c      	beq.n	31ba <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    31a0:	2d02      	cmp	r5, #2
    31a2:	d00f      	beq.n	31c4 <xQueueGenericSend+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    31a4:	4bab      	ldr	r3, [pc, #684]	; (3454 <xQueueGenericSend+0x2d0>)
    31a6:	4798      	blx	r3
    31a8:	2800      	cmp	r0, #0
    31aa:	d110      	bne.n	31ce <xQueueGenericSend+0x4a>
    31ac:	9b01      	ldr	r3, [sp, #4]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d010      	beq.n	31d4 <xQueueGenericSend+0x50>
    31b2:	b672      	cpsid	i
    31b4:	e7fe      	b.n	31b4 <xQueueGenericSend+0x30>
	configASSERT( pxQueue );
    31b6:	b672      	cpsid	i
    31b8:	e7fe      	b.n	31b8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    31ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
    31bc:	2b00      	cmp	r3, #0
    31be:	d0ef      	beq.n	31a0 <xQueueGenericSend+0x1c>
    31c0:	b672      	cpsid	i
    31c2:	e7fe      	b.n	31c2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    31c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    31c6:	2b01      	cmp	r3, #1
    31c8:	d0ec      	beq.n	31a4 <xQueueGenericSend+0x20>
    31ca:	b672      	cpsid	i
    31cc:	e7fe      	b.n	31cc <xQueueGenericSend+0x48>
    31ce:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    31d0:	4ea1      	ldr	r6, [pc, #644]	; (3458 <xQueueGenericSend+0x2d4>)
    31d2:	e0bc      	b.n	334e <xQueueGenericSend+0x1ca>
    31d4:	2700      	movs	r7, #0
    31d6:	e7fb      	b.n	31d0 <xQueueGenericSend+0x4c>
				traceQUEUE_SEND( pxQueue );
    31d8:	4ba0      	ldr	r3, [pc, #640]	; (345c <xQueueGenericSend+0x2d8>)
    31da:	4798      	blx	r3
    31dc:	4ba0      	ldr	r3, [pc, #640]	; (3460 <xQueueGenericSend+0x2dc>)
    31de:	4798      	blx	r3
    31e0:	4ba0      	ldr	r3, [pc, #640]	; (3464 <xQueueGenericSend+0x2e0>)
    31e2:	881b      	ldrh	r3, [r3, #0]
    31e4:	4203      	tst	r3, r0
    31e6:	d01d      	beq.n	3224 <xQueueGenericSend+0xa0>
    31e8:	0020      	movs	r0, r4
    31ea:	4b9f      	ldr	r3, [pc, #636]	; (3468 <xQueueGenericSend+0x2e4>)
    31ec:	4798      	blx	r3
    31ee:	4b9d      	ldr	r3, [pc, #628]	; (3464 <xQueueGenericSend+0x2e0>)
    31f0:	881b      	ldrh	r3, [r3, #0]
    31f2:	4203      	tst	r3, r0
    31f4:	d016      	beq.n	3224 <xQueueGenericSend+0xa0>
    31f6:	2725      	movs	r7, #37	; 0x25
    31f8:	2d00      	cmp	r5, #0
    31fa:	d106      	bne.n	320a <xQueueGenericSend+0x86>
    31fc:	0020      	movs	r0, r4
    31fe:	4b9b      	ldr	r3, [pc, #620]	; (346c <xQueueGenericSend+0x2e8>)
    3200:	4798      	blx	r3
    3202:	4b9b      	ldr	r3, [pc, #620]	; (3470 <xQueueGenericSend+0x2ec>)
    3204:	5c1f      	ldrb	r7, [r3, r0]
    3206:	3720      	adds	r7, #32
    3208:	b2ff      	uxtb	r7, r7
    320a:	0020      	movs	r0, r4
    320c:	4b97      	ldr	r3, [pc, #604]	; (346c <xQueueGenericSend+0x2e8>)
    320e:	4798      	blx	r3
    3210:	4b97      	ldr	r3, [pc, #604]	; (3470 <xQueueGenericSend+0x2ec>)
    3212:	5c1e      	ldrb	r6, [r3, r0]
    3214:	0020      	movs	r0, r4
    3216:	4b97      	ldr	r3, [pc, #604]	; (3474 <xQueueGenericSend+0x2f0>)
    3218:	4798      	blx	r3
    321a:	b2c2      	uxtb	r2, r0
    321c:	0031      	movs	r1, r6
    321e:	0038      	movs	r0, r7
    3220:	4b95      	ldr	r3, [pc, #596]	; (3478 <xQueueGenericSend+0x2f4>)
    3222:	4798      	blx	r3
    3224:	0020      	movs	r0, r4
    3226:	4e91      	ldr	r6, [pc, #580]	; (346c <xQueueGenericSend+0x2e8>)
    3228:	47b0      	blx	r6
    322a:	4f91      	ldr	r7, [pc, #580]	; (3470 <xQueueGenericSend+0x2ec>)
    322c:	5c3b      	ldrb	r3, [r7, r0]
    322e:	4698      	mov	r8, r3
    3230:	0020      	movs	r0, r4
    3232:	4b90      	ldr	r3, [pc, #576]	; (3474 <xQueueGenericSend+0x2f0>)
    3234:	4798      	blx	r3
    3236:	b2c3      	uxtb	r3, r0
    3238:	4699      	mov	r9, r3
    323a:	0020      	movs	r0, r4
    323c:	47b0      	blx	r6
    323e:	5c3b      	ldrb	r3, [r7, r0]
    3240:	2b02      	cmp	r3, #2
    3242:	d01f      	beq.n	3284 <xQueueGenericSend+0x100>
    3244:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3246:	3201      	adds	r2, #1
    3248:	b2d2      	uxtb	r2, r2
    324a:	4649      	mov	r1, r9
    324c:	4640      	mov	r0, r8
    324e:	4b8b      	ldr	r3, [pc, #556]	; (347c <xQueueGenericSend+0x2f8>)
    3250:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3252:	002a      	movs	r2, r5
    3254:	9900      	ldr	r1, [sp, #0]
    3256:	0020      	movs	r0, r4
    3258:	4b89      	ldr	r3, [pc, #548]	; (3480 <xQueueGenericSend+0x2fc>)
    325a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    325c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    325e:	2b00      	cmp	r3, #0
    3260:	d012      	beq.n	3288 <xQueueGenericSend+0x104>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3262:	0029      	movs	r1, r5
    3264:	0020      	movs	r0, r4
    3266:	4b87      	ldr	r3, [pc, #540]	; (3484 <xQueueGenericSend+0x300>)
    3268:	4798      	blx	r3
    326a:	2800      	cmp	r0, #0
    326c:	d001      	beq.n	3272 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    326e:	4b86      	ldr	r3, [pc, #536]	; (3488 <xQueueGenericSend+0x304>)
    3270:	4798      	blx	r3
				taskEXIT_CRITICAL();
    3272:	4b86      	ldr	r3, [pc, #536]	; (348c <xQueueGenericSend+0x308>)
    3274:	4798      	blx	r3
				return pdPASS;
    3276:	2301      	movs	r3, #1
}
    3278:	0018      	movs	r0, r3
    327a:	b005      	add	sp, #20
    327c:	bc0c      	pop	{r2, r3}
    327e:	4690      	mov	r8, r2
    3280:	4699      	mov	r9, r3
    3282:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_SEND( pxQueue );
    3284:	2200      	movs	r2, #0
    3286:	e7e0      	b.n	324a <xQueueGenericSend+0xc6>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3288:	6a63      	ldr	r3, [r4, #36]	; 0x24
    328a:	2b00      	cmp	r3, #0
    328c:	d008      	beq.n	32a0 <xQueueGenericSend+0x11c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    328e:	0020      	movs	r0, r4
    3290:	3024      	adds	r0, #36	; 0x24
    3292:	4b7f      	ldr	r3, [pc, #508]	; (3490 <xQueueGenericSend+0x30c>)
    3294:	4798      	blx	r3
    3296:	2800      	cmp	r0, #0
    3298:	d0eb      	beq.n	3272 <xQueueGenericSend+0xee>
								queueYIELD_IF_USING_PREEMPTION();
    329a:	4b7b      	ldr	r3, [pc, #492]	; (3488 <xQueueGenericSend+0x304>)
    329c:	4798      	blx	r3
    329e:	e7e8      	b.n	3272 <xQueueGenericSend+0xee>
						else if( xYieldRequired != pdFALSE )
    32a0:	2800      	cmp	r0, #0
    32a2:	d0e6      	beq.n	3272 <xQueueGenericSend+0xee>
							queueYIELD_IF_USING_PREEMPTION();
    32a4:	4b78      	ldr	r3, [pc, #480]	; (3488 <xQueueGenericSend+0x304>)
    32a6:	4798      	blx	r3
    32a8:	e7e3      	b.n	3272 <xQueueGenericSend+0xee>
					taskEXIT_CRITICAL();
    32aa:	4b78      	ldr	r3, [pc, #480]	; (348c <xQueueGenericSend+0x308>)
    32ac:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
    32ae:	4b6b      	ldr	r3, [pc, #428]	; (345c <xQueueGenericSend+0x2d8>)
    32b0:	4798      	blx	r3
    32b2:	4b6b      	ldr	r3, [pc, #428]	; (3460 <xQueueGenericSend+0x2dc>)
    32b4:	4798      	blx	r3
    32b6:	4b6b      	ldr	r3, [pc, #428]	; (3464 <xQueueGenericSend+0x2e0>)
    32b8:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    32ba:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    32bc:	4202      	tst	r2, r0
    32be:	d0db      	beq.n	3278 <xQueueGenericSend+0xf4>
    32c0:	0020      	movs	r0, r4
    32c2:	4b69      	ldr	r3, [pc, #420]	; (3468 <xQueueGenericSend+0x2e4>)
    32c4:	4798      	blx	r3
    32c6:	4b67      	ldr	r3, [pc, #412]	; (3464 <xQueueGenericSend+0x2e0>)
    32c8:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_FULL;
    32ca:	2300      	movs	r3, #0
					traceQUEUE_SEND_FAILED( pxQueue );
    32cc:	4202      	tst	r2, r0
    32ce:	d0d3      	beq.n	3278 <xQueueGenericSend+0xf4>
    32d0:	264d      	movs	r6, #77	; 0x4d
    32d2:	2d00      	cmp	r5, #0
    32d4:	d106      	bne.n	32e4 <xQueueGenericSend+0x160>
    32d6:	0020      	movs	r0, r4
    32d8:	4b64      	ldr	r3, [pc, #400]	; (346c <xQueueGenericSend+0x2e8>)
    32da:	4798      	blx	r3
    32dc:	4b64      	ldr	r3, [pc, #400]	; (3470 <xQueueGenericSend+0x2ec>)
    32de:	5c1e      	ldrb	r6, [r3, r0]
    32e0:	3648      	adds	r6, #72	; 0x48
    32e2:	b2f6      	uxtb	r6, r6
    32e4:	0020      	movs	r0, r4
    32e6:	4b61      	ldr	r3, [pc, #388]	; (346c <xQueueGenericSend+0x2e8>)
    32e8:	4798      	blx	r3
    32ea:	4b61      	ldr	r3, [pc, #388]	; (3470 <xQueueGenericSend+0x2ec>)
    32ec:	5c1d      	ldrb	r5, [r3, r0]
    32ee:	0020      	movs	r0, r4
    32f0:	4b60      	ldr	r3, [pc, #384]	; (3474 <xQueueGenericSend+0x2f0>)
    32f2:	4798      	blx	r3
    32f4:	b2c2      	uxtb	r2, r0
    32f6:	0029      	movs	r1, r5
    32f8:	0030      	movs	r0, r6
    32fa:	4b5f      	ldr	r3, [pc, #380]	; (3478 <xQueueGenericSend+0x2f4>)
    32fc:	4798      	blx	r3
					return errQUEUE_FULL;
    32fe:	2300      	movs	r3, #0
    3300:	e7ba      	b.n	3278 <xQueueGenericSend+0xf4>
		prvLockQueue( pxQueue );
    3302:	4b62      	ldr	r3, [pc, #392]	; (348c <xQueueGenericSend+0x308>)
    3304:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3306:	a901      	add	r1, sp, #4
    3308:	a802      	add	r0, sp, #8
    330a:	4b62      	ldr	r3, [pc, #392]	; (3494 <xQueueGenericSend+0x310>)
    330c:	4798      	blx	r3
    330e:	2800      	cmp	r0, #0
    3310:	d16e      	bne.n	33f0 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
    3312:	4b51      	ldr	r3, [pc, #324]	; (3458 <xQueueGenericSend+0x2d4>)
    3314:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    3316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3318:	4699      	mov	r9, r3
    331a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    331c:	4b5b      	ldr	r3, [pc, #364]	; (348c <xQueueGenericSend+0x308>)
    331e:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3320:	45b9      	cmp	r9, r7
    3322:	d15f      	bne.n	33e4 <xQueueGenericSend+0x260>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    3324:	4b4d      	ldr	r3, [pc, #308]	; (345c <xQueueGenericSend+0x2d8>)
    3326:	4798      	blx	r3
    3328:	4b4d      	ldr	r3, [pc, #308]	; (3460 <xQueueGenericSend+0x2dc>)
    332a:	4798      	blx	r3
    332c:	4b4d      	ldr	r3, [pc, #308]	; (3464 <xQueueGenericSend+0x2e0>)
    332e:	881b      	ldrh	r3, [r3, #0]
    3330:	4203      	tst	r3, r0
    3332:	d134      	bne.n	339e <xQueueGenericSend+0x21a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3334:	0020      	movs	r0, r4
    3336:	3010      	adds	r0, #16
    3338:	9901      	ldr	r1, [sp, #4]
    333a:	4b57      	ldr	r3, [pc, #348]	; (3498 <xQueueGenericSend+0x314>)
    333c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    333e:	0020      	movs	r0, r4
    3340:	4b56      	ldr	r3, [pc, #344]	; (349c <xQueueGenericSend+0x318>)
    3342:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    3344:	4b56      	ldr	r3, [pc, #344]	; (34a0 <xQueueGenericSend+0x31c>)
    3346:	4798      	blx	r3
    3348:	2800      	cmp	r0, #0
    334a:	d048      	beq.n	33de <xQueueGenericSend+0x25a>
    334c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    334e:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3352:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3354:	4293      	cmp	r3, r2
    3356:	d200      	bcs.n	335a <xQueueGenericSend+0x1d6>
    3358:	e73e      	b.n	31d8 <xQueueGenericSend+0x54>
    335a:	2d02      	cmp	r5, #2
    335c:	d100      	bne.n	3360 <xQueueGenericSend+0x1dc>
    335e:	e73b      	b.n	31d8 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    3360:	9b01      	ldr	r3, [sp, #4]
    3362:	2b00      	cmp	r3, #0
    3364:	d0a1      	beq.n	32aa <xQueueGenericSend+0x126>
				else if( xEntryTimeSet == pdFALSE )
    3366:	2f00      	cmp	r7, #0
    3368:	d102      	bne.n	3370 <xQueueGenericSend+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
    336a:	a802      	add	r0, sp, #8
    336c:	4b4d      	ldr	r3, [pc, #308]	; (34a4 <xQueueGenericSend+0x320>)
    336e:	4798      	blx	r3
		taskEXIT_CRITICAL();
    3370:	4b46      	ldr	r3, [pc, #280]	; (348c <xQueueGenericSend+0x308>)
    3372:	4798      	blx	r3
		vTaskSuspendAll();
    3374:	4b4c      	ldr	r3, [pc, #304]	; (34a8 <xQueueGenericSend+0x324>)
    3376:	4798      	blx	r3
		prvLockQueue( pxQueue );
    3378:	4b37      	ldr	r3, [pc, #220]	; (3458 <xQueueGenericSend+0x2d4>)
    337a:	4798      	blx	r3
    337c:	2344      	movs	r3, #68	; 0x44
    337e:	5ce3      	ldrb	r3, [r4, r3]
    3380:	b25b      	sxtb	r3, r3
    3382:	3301      	adds	r3, #1
    3384:	d102      	bne.n	338c <xQueueGenericSend+0x208>
    3386:	2200      	movs	r2, #0
    3388:	2344      	movs	r3, #68	; 0x44
    338a:	54e2      	strb	r2, [r4, r3]
    338c:	2345      	movs	r3, #69	; 0x45
    338e:	5ce3      	ldrb	r3, [r4, r3]
    3390:	b25b      	sxtb	r3, r3
    3392:	3301      	adds	r3, #1
    3394:	d1b5      	bne.n	3302 <xQueueGenericSend+0x17e>
    3396:	2200      	movs	r2, #0
    3398:	2345      	movs	r3, #69	; 0x45
    339a:	54e2      	strb	r2, [r4, r3]
    339c:	e7b1      	b.n	3302 <xQueueGenericSend+0x17e>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    339e:	0020      	movs	r0, r4
    33a0:	4b31      	ldr	r3, [pc, #196]	; (3468 <xQueueGenericSend+0x2e4>)
    33a2:	4798      	blx	r3
    33a4:	4b2f      	ldr	r3, [pc, #188]	; (3464 <xQueueGenericSend+0x2e0>)
    33a6:	881b      	ldrh	r3, [r3, #0]
    33a8:	4203      	tst	r3, r0
    33aa:	d0c3      	beq.n	3334 <xQueueGenericSend+0x1b0>
    33ac:	2775      	movs	r7, #117	; 0x75
    33ae:	2d00      	cmp	r5, #0
    33b0:	d106      	bne.n	33c0 <xQueueGenericSend+0x23c>
    33b2:	0020      	movs	r0, r4
    33b4:	4b2d      	ldr	r3, [pc, #180]	; (346c <xQueueGenericSend+0x2e8>)
    33b6:	4798      	blx	r3
    33b8:	4b2d      	ldr	r3, [pc, #180]	; (3470 <xQueueGenericSend+0x2ec>)
    33ba:	5c1f      	ldrb	r7, [r3, r0]
    33bc:	3770      	adds	r7, #112	; 0x70
    33be:	b2ff      	uxtb	r7, r7
    33c0:	0020      	movs	r0, r4
    33c2:	4b2a      	ldr	r3, [pc, #168]	; (346c <xQueueGenericSend+0x2e8>)
    33c4:	4798      	blx	r3
    33c6:	4b2a      	ldr	r3, [pc, #168]	; (3470 <xQueueGenericSend+0x2ec>)
    33c8:	5c1b      	ldrb	r3, [r3, r0]
    33ca:	4699      	mov	r9, r3
    33cc:	0020      	movs	r0, r4
    33ce:	4b29      	ldr	r3, [pc, #164]	; (3474 <xQueueGenericSend+0x2f0>)
    33d0:	4798      	blx	r3
    33d2:	b2c2      	uxtb	r2, r0
    33d4:	4649      	mov	r1, r9
    33d6:	0038      	movs	r0, r7
    33d8:	4b27      	ldr	r3, [pc, #156]	; (3478 <xQueueGenericSend+0x2f4>)
    33da:	4798      	blx	r3
    33dc:	e7aa      	b.n	3334 <xQueueGenericSend+0x1b0>
					portYIELD_WITHIN_API();
    33de:	4b2a      	ldr	r3, [pc, #168]	; (3488 <xQueueGenericSend+0x304>)
    33e0:	4798      	blx	r3
    33e2:	e7b3      	b.n	334c <xQueueGenericSend+0x1c8>
				prvUnlockQueue( pxQueue );
    33e4:	0020      	movs	r0, r4
    33e6:	4b2d      	ldr	r3, [pc, #180]	; (349c <xQueueGenericSend+0x318>)
    33e8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    33ea:	4b2d      	ldr	r3, [pc, #180]	; (34a0 <xQueueGenericSend+0x31c>)
    33ec:	4798      	blx	r3
    33ee:	e7ad      	b.n	334c <xQueueGenericSend+0x1c8>
			prvUnlockQueue( pxQueue );
    33f0:	0020      	movs	r0, r4
    33f2:	4b2a      	ldr	r3, [pc, #168]	; (349c <xQueueGenericSend+0x318>)
    33f4:	4798      	blx	r3
			( void ) xTaskResumeAll();
    33f6:	4b2a      	ldr	r3, [pc, #168]	; (34a0 <xQueueGenericSend+0x31c>)
    33f8:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
    33fa:	4b18      	ldr	r3, [pc, #96]	; (345c <xQueueGenericSend+0x2d8>)
    33fc:	4798      	blx	r3
    33fe:	4b18      	ldr	r3, [pc, #96]	; (3460 <xQueueGenericSend+0x2dc>)
    3400:	4798      	blx	r3
    3402:	4b18      	ldr	r3, [pc, #96]	; (3464 <xQueueGenericSend+0x2e0>)
    3404:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    3406:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    3408:	4202      	tst	r2, r0
    340a:	d100      	bne.n	340e <xQueueGenericSend+0x28a>
    340c:	e734      	b.n	3278 <xQueueGenericSend+0xf4>
    340e:	0020      	movs	r0, r4
    3410:	4b15      	ldr	r3, [pc, #84]	; (3468 <xQueueGenericSend+0x2e4>)
    3412:	4798      	blx	r3
    3414:	4b13      	ldr	r3, [pc, #76]	; (3464 <xQueueGenericSend+0x2e0>)
    3416:	881a      	ldrh	r2, [r3, #0]
			return errQUEUE_FULL;
    3418:	2300      	movs	r3, #0
			traceQUEUE_SEND_FAILED( pxQueue );
    341a:	4202      	tst	r2, r0
    341c:	d100      	bne.n	3420 <xQueueGenericSend+0x29c>
    341e:	e72b      	b.n	3278 <xQueueGenericSend+0xf4>
    3420:	264d      	movs	r6, #77	; 0x4d
    3422:	2d00      	cmp	r5, #0
    3424:	d106      	bne.n	3434 <xQueueGenericSend+0x2b0>
    3426:	0020      	movs	r0, r4
    3428:	4b10      	ldr	r3, [pc, #64]	; (346c <xQueueGenericSend+0x2e8>)
    342a:	4798      	blx	r3
    342c:	4b10      	ldr	r3, [pc, #64]	; (3470 <xQueueGenericSend+0x2ec>)
    342e:	5c1e      	ldrb	r6, [r3, r0]
    3430:	3648      	adds	r6, #72	; 0x48
    3432:	b2f6      	uxtb	r6, r6
    3434:	0020      	movs	r0, r4
    3436:	4b0d      	ldr	r3, [pc, #52]	; (346c <xQueueGenericSend+0x2e8>)
    3438:	4798      	blx	r3
    343a:	4b0d      	ldr	r3, [pc, #52]	; (3470 <xQueueGenericSend+0x2ec>)
    343c:	5c1d      	ldrb	r5, [r3, r0]
    343e:	0020      	movs	r0, r4
    3440:	4b0c      	ldr	r3, [pc, #48]	; (3474 <xQueueGenericSend+0x2f0>)
    3442:	4798      	blx	r3
    3444:	b2c2      	uxtb	r2, r0
    3446:	0029      	movs	r1, r5
    3448:	0030      	movs	r0, r6
    344a:	4b0b      	ldr	r3, [pc, #44]	; (3478 <xQueueGenericSend+0x2f4>)
    344c:	4798      	blx	r3
			return errQUEUE_FULL;
    344e:	2300      	movs	r3, #0
    3450:	e712      	b.n	3278 <xQueueGenericSend+0xf4>
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	00004af5 	.word	0x00004af5
    3458:	00002bd1 	.word	0x00002bd1
    345c:	00001a1d 	.word	0x00001a1d
    3460:	00001965 	.word	0x00001965
    3464:	20000020 	.word	0x20000020
    3468:	000019c9 	.word	0x000019c9
    346c:	00001949 	.word	0x00001949
    3470:	20000018 	.word	0x20000018
    3474:	000019b9 	.word	0x000019b9
    3478:	00002655 	.word	0x00002655
    347c:	00002129 	.word	0x00002129
    3480:	00002d5d 	.word	0x00002d5d
    3484:	00002dd9 	.word	0x00002dd9
    3488:	00002bc1 	.word	0x00002bc1
    348c:	00002be9 	.word	0x00002be9
    3490:	0000498d 	.word	0x0000498d
    3494:	00004a59 	.word	0x00004a59
    3498:	000048c5 	.word	0x000048c5
    349c:	00002f1d 	.word	0x00002f1d
    34a0:	000044dd 	.word	0x000044dd
    34a4:	00004a41 	.word	0x00004a41
    34a8:	00004335 	.word	0x00004335

000034ac <xQueueCreateMutex>:
	{
    34ac:	b570      	push	{r4, r5, r6, lr}
    34ae:	0002      	movs	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    34b0:	2100      	movs	r1, #0
    34b2:	2001      	movs	r0, #1
    34b4:	4b06      	ldr	r3, [pc, #24]	; (34d0 <xQueueCreateMutex+0x24>)
    34b6:	4798      	blx	r3
    34b8:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    34ba:	d007      	beq.n	34cc <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
    34bc:	2300      	movs	r3, #0
    34be:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    34c0:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
    34c2:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    34c4:	2200      	movs	r2, #0
    34c6:	2100      	movs	r1, #0
    34c8:	4d02      	ldr	r5, [pc, #8]	; (34d4 <xQueueCreateMutex+0x28>)
    34ca:	47a8      	blx	r5
	}
    34cc:	0020      	movs	r0, r4
    34ce:	bd70      	pop	{r4, r5, r6, pc}
    34d0:	00003049 	.word	0x00003049
    34d4:	00003185 	.word	0x00003185

000034d8 <xQueueGenericSendFromISR>:
{
    34d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34da:	46de      	mov	lr, fp
    34dc:	4647      	mov	r7, r8
    34de:	b580      	push	{r7, lr}
    34e0:	b083      	sub	sp, #12
    34e2:	0004      	movs	r4, r0
    34e4:	9101      	str	r1, [sp, #4]
    34e6:	0016      	movs	r6, r2
    34e8:	001f      	movs	r7, r3
	configASSERT( pxQueue );
    34ea:	2800      	cmp	r0, #0
    34ec:	d02d      	beq.n	354a <xQueueGenericSendFromISR+0x72>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    34ee:	9b01      	ldr	r3, [sp, #4]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d02c      	beq.n	354e <xQueueGenericSendFromISR+0x76>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    34f4:	2f02      	cmp	r7, #2
    34f6:	d02f      	beq.n	3558 <xQueueGenericSendFromISR+0x80>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    34f8:	4b59      	ldr	r3, [pc, #356]	; (3660 <xQueueGenericSendFromISR+0x188>)
    34fa:	4798      	blx	r3
    34fc:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    34fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3500:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3502:	429a      	cmp	r2, r3
    3504:	d85a      	bhi.n	35bc <xQueueGenericSendFromISR+0xe4>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3506:	0020      	movs	r0, r4
    3508:	4b56      	ldr	r3, [pc, #344]	; (3664 <xQueueGenericSendFromISR+0x18c>)
    350a:	4798      	blx	r3
    350c:	4b56      	ldr	r3, [pc, #344]	; (3668 <xQueueGenericSendFromISR+0x190>)
    350e:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    3510:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3512:	4203      	tst	r3, r0
    3514:	d100      	bne.n	3518 <xQueueGenericSendFromISR+0x40>
    3516:	e09a      	b.n	364e <xQueueGenericSendFromISR+0x176>
    3518:	355d      	adds	r5, #93	; 0x5d
    351a:	2f00      	cmp	r7, #0
    351c:	d106      	bne.n	352c <xQueueGenericSendFromISR+0x54>
    351e:	0020      	movs	r0, r4
    3520:	4b52      	ldr	r3, [pc, #328]	; (366c <xQueueGenericSendFromISR+0x194>)
    3522:	4798      	blx	r3
    3524:	4b52      	ldr	r3, [pc, #328]	; (3670 <xQueueGenericSendFromISR+0x198>)
    3526:	5c1d      	ldrb	r5, [r3, r0]
    3528:	3558      	adds	r5, #88	; 0x58
    352a:	b2ed      	uxtb	r5, r5
    352c:	0020      	movs	r0, r4
    352e:	4b4f      	ldr	r3, [pc, #316]	; (366c <xQueueGenericSendFromISR+0x194>)
    3530:	4798      	blx	r3
    3532:	4b4f      	ldr	r3, [pc, #316]	; (3670 <xQueueGenericSendFromISR+0x198>)
    3534:	5c1f      	ldrb	r7, [r3, r0]
    3536:	0020      	movs	r0, r4
    3538:	4b4e      	ldr	r3, [pc, #312]	; (3674 <xQueueGenericSendFromISR+0x19c>)
    353a:	4798      	blx	r3
    353c:	b2c2      	uxtb	r2, r0
    353e:	0039      	movs	r1, r7
    3540:	0028      	movs	r0, r5
    3542:	4b4d      	ldr	r3, [pc, #308]	; (3678 <xQueueGenericSendFromISR+0x1a0>)
    3544:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    3546:	2500      	movs	r5, #0
    3548:	e081      	b.n	364e <xQueueGenericSendFromISR+0x176>
	configASSERT( pxQueue );
    354a:	b672      	cpsid	i
    354c:	e7fe      	b.n	354c <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    354e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3550:	2b00      	cmp	r3, #0
    3552:	d0cf      	beq.n	34f4 <xQueueGenericSendFromISR+0x1c>
    3554:	b672      	cpsid	i
    3556:	e7fe      	b.n	3556 <xQueueGenericSendFromISR+0x7e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    355a:	2b01      	cmp	r3, #1
    355c:	d027      	beq.n	35ae <xQueueGenericSendFromISR+0xd6>
    355e:	b672      	cpsid	i
    3560:	e7fe      	b.n	3560 <xQueueGenericSendFromISR+0x88>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3562:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    3564:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3566:	2b00      	cmp	r3, #0
    3568:	d071      	beq.n	364e <xQueueGenericSendFromISR+0x176>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    356a:	0020      	movs	r0, r4
    356c:	3024      	adds	r0, #36	; 0x24
    356e:	4b43      	ldr	r3, [pc, #268]	; (367c <xQueueGenericSendFromISR+0x1a4>)
    3570:	4798      	blx	r3
    3572:	2800      	cmp	r0, #0
    3574:	d06b      	beq.n	364e <xQueueGenericSendFromISR+0x176>
								if( pxHigherPriorityTaskWoken != NULL )
    3576:	2e00      	cmp	r6, #0
    3578:	d00a      	beq.n	3590 <xQueueGenericSendFromISR+0xb8>
									*pxHigherPriorityTaskWoken = pdTRUE;
    357a:	2301      	movs	r3, #1
    357c:	6033      	str	r3, [r6, #0]
    357e:	e066      	b.n	364e <xQueueGenericSendFromISR+0x176>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    3580:	3501      	adds	r5, #1
    3582:	b26d      	sxtb	r5, r5
    3584:	2345      	movs	r3, #69	; 0x45
    3586:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    3588:	2501      	movs	r5, #1
    358a:	e060      	b.n	364e <xQueueGenericSendFromISR+0x176>
    358c:	2501      	movs	r5, #1
    358e:	e05e      	b.n	364e <xQueueGenericSendFromISR+0x176>
    3590:	2501      	movs	r5, #1
    3592:	e05c      	b.n	364e <xQueueGenericSendFromISR+0x176>
			const int8_t cTxLock = pxQueue->cTxLock;
    3594:	2345      	movs	r3, #69	; 0x45
    3596:	5ce5      	ldrb	r5, [r4, r3]
    3598:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    359a:	0020      	movs	r0, r4
    359c:	4b31      	ldr	r3, [pc, #196]	; (3664 <xQueueGenericSendFromISR+0x18c>)
    359e:	4798      	blx	r3
    35a0:	4b31      	ldr	r3, [pc, #196]	; (3668 <xQueueGenericSendFromISR+0x190>)
    35a2:	881b      	ldrh	r3, [r3, #0]
    35a4:	4203      	tst	r3, r0
    35a6:	d02d      	beq.n	3604 <xQueueGenericSendFromISR+0x12c>
    35a8:	2335      	movs	r3, #53	; 0x35
    35aa:	4698      	mov	r8, r3
    35ac:	e01c      	b.n	35e8 <xQueueGenericSendFromISR+0x110>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    35ae:	4b2c      	ldr	r3, [pc, #176]	; (3660 <xQueueGenericSendFromISR+0x188>)
    35b0:	4798      	blx	r3
    35b2:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    35b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    35b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    35b8:	429a      	cmp	r2, r3
    35ba:	d9eb      	bls.n	3594 <xQueueGenericSendFromISR+0xbc>
			const int8_t cTxLock = pxQueue->cTxLock;
    35bc:	2345      	movs	r3, #69	; 0x45
    35be:	5ce5      	ldrb	r5, [r4, r3]
    35c0:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    35c2:	0020      	movs	r0, r4
    35c4:	4b27      	ldr	r3, [pc, #156]	; (3664 <xQueueGenericSendFromISR+0x18c>)
    35c6:	4798      	blx	r3
    35c8:	4b27      	ldr	r3, [pc, #156]	; (3668 <xQueueGenericSendFromISR+0x190>)
    35ca:	881b      	ldrh	r3, [r3, #0]
    35cc:	4203      	tst	r3, r0
    35ce:	d019      	beq.n	3604 <xQueueGenericSendFromISR+0x12c>
    35d0:	2335      	movs	r3, #53	; 0x35
    35d2:	4698      	mov	r8, r3
    35d4:	2f00      	cmp	r7, #0
    35d6:	d107      	bne.n	35e8 <xQueueGenericSendFromISR+0x110>
    35d8:	0020      	movs	r0, r4
    35da:	4b24      	ldr	r3, [pc, #144]	; (366c <xQueueGenericSendFromISR+0x194>)
    35dc:	4798      	blx	r3
    35de:	4b24      	ldr	r3, [pc, #144]	; (3670 <xQueueGenericSendFromISR+0x198>)
    35e0:	5c1b      	ldrb	r3, [r3, r0]
    35e2:	3330      	adds	r3, #48	; 0x30
    35e4:	b2db      	uxtb	r3, r3
    35e6:	4698      	mov	r8, r3
    35e8:	0020      	movs	r0, r4
    35ea:	4b20      	ldr	r3, [pc, #128]	; (366c <xQueueGenericSendFromISR+0x194>)
    35ec:	4798      	blx	r3
    35ee:	4b20      	ldr	r3, [pc, #128]	; (3670 <xQueueGenericSendFromISR+0x198>)
    35f0:	5c1b      	ldrb	r3, [r3, r0]
    35f2:	469b      	mov	fp, r3
    35f4:	0020      	movs	r0, r4
    35f6:	4b1f      	ldr	r3, [pc, #124]	; (3674 <xQueueGenericSendFromISR+0x19c>)
    35f8:	4798      	blx	r3
    35fa:	b2c2      	uxtb	r2, r0
    35fc:	4659      	mov	r1, fp
    35fe:	4640      	mov	r0, r8
    3600:	4b1d      	ldr	r3, [pc, #116]	; (3678 <xQueueGenericSendFromISR+0x1a0>)
    3602:	4798      	blx	r3
    3604:	0020      	movs	r0, r4
    3606:	4b19      	ldr	r3, [pc, #100]	; (366c <xQueueGenericSendFromISR+0x194>)
    3608:	4798      	blx	r3
    360a:	4b19      	ldr	r3, [pc, #100]	; (3670 <xQueueGenericSendFromISR+0x198>)
    360c:	5c1b      	ldrb	r3, [r3, r0]
    360e:	4698      	mov	r8, r3
    3610:	0020      	movs	r0, r4
    3612:	4b18      	ldr	r3, [pc, #96]	; (3674 <xQueueGenericSendFromISR+0x19c>)
    3614:	4798      	blx	r3
    3616:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3618:	3201      	adds	r2, #1
    361a:	b2d2      	uxtb	r2, r2
    361c:	b2c1      	uxtb	r1, r0
    361e:	4640      	mov	r0, r8
    3620:	4b17      	ldr	r3, [pc, #92]	; (3680 <xQueueGenericSendFromISR+0x1a8>)
    3622:	4798      	blx	r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3624:	003a      	movs	r2, r7
    3626:	9901      	ldr	r1, [sp, #4]
    3628:	0020      	movs	r0, r4
    362a:	4b16      	ldr	r3, [pc, #88]	; (3684 <xQueueGenericSendFromISR+0x1ac>)
    362c:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    362e:	1c6b      	adds	r3, r5, #1
    3630:	d1a6      	bne.n	3580 <xQueueGenericSendFromISR+0xa8>
					if( pxQueue->pxQueueSetContainer != NULL )
    3632:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3634:	2b00      	cmp	r3, #0
    3636:	d094      	beq.n	3562 <xQueueGenericSendFromISR+0x8a>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3638:	0039      	movs	r1, r7
    363a:	0020      	movs	r0, r4
    363c:	4b12      	ldr	r3, [pc, #72]	; (3688 <xQueueGenericSendFromISR+0x1b0>)
    363e:	4798      	blx	r3
			xReturn = pdPASS;
    3640:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3642:	2800      	cmp	r0, #0
    3644:	d003      	beq.n	364e <xQueueGenericSendFromISR+0x176>
							if( pxHigherPriorityTaskWoken != NULL )
    3646:	2e00      	cmp	r6, #0
    3648:	d0a0      	beq.n	358c <xQueueGenericSendFromISR+0xb4>
								*pxHigherPriorityTaskWoken = pdTRUE;
    364a:	2301      	movs	r3, #1
    364c:	6033      	str	r3, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    364e:	9800      	ldr	r0, [sp, #0]
    3650:	4b0e      	ldr	r3, [pc, #56]	; (368c <xQueueGenericSendFromISR+0x1b4>)
    3652:	4798      	blx	r3
}
    3654:	0028      	movs	r0, r5
    3656:	b003      	add	sp, #12
    3658:	bc0c      	pop	{r2, r3}
    365a:	4690      	mov	r8, r2
    365c:	469b      	mov	fp, r3
    365e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3660:	00002c09 	.word	0x00002c09
    3664:	000019c9 	.word	0x000019c9
    3668:	20000020 	.word	0x20000020
    366c:	00001949 	.word	0x00001949
    3670:	20000018 	.word	0x20000018
    3674:	000019b9 	.word	0x000019b9
    3678:	00002655 	.word	0x00002655
    367c:	0000498d 	.word	0x0000498d
    3680:	00002129 	.word	0x00002129
    3684:	00002d5d 	.word	0x00002d5d
    3688:	00002dd9 	.word	0x00002dd9
    368c:	00002c11 	.word	0x00002c11

00003690 <MyWrapper>:
{
    3690:	b5f0      	push	{r4, r5, r6, r7, lr}
    3692:	46d6      	mov	lr, sl
    3694:	4647      	mov	r7, r8
    3696:	b580      	push	{r7, lr}
    3698:	b083      	sub	sp, #12
    369a:	0004      	movs	r4, r0
    369c:	000f      	movs	r7, r1
    369e:	0016      	movs	r6, r2
	configASSERT( pxQueue );
    36a0:	2800      	cmp	r0, #0
    36a2:	d004      	beq.n	36ae <MyWrapper+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
    36a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    36a6:	2b00      	cmp	r3, #0
    36a8:	d003      	beq.n	36b2 <MyWrapper+0x22>
    36aa:	b672      	cpsid	i
    36ac:	e7fe      	b.n	36ac <MyWrapper+0x1c>
	configASSERT( pxQueue );
    36ae:	b672      	cpsid	i
    36b0:	e7fe      	b.n	36b0 <MyWrapper+0x20>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    36b2:	6803      	ldr	r3, [r0, #0]
    36b4:	2b00      	cmp	r3, #0
    36b6:	d055      	beq.n	3764 <MyWrapper+0xd4>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    36b8:	4b4a      	ldr	r3, [pc, #296]	; (37e4 <MyWrapper+0x154>)
    36ba:	4798      	blx	r3
    36bc:	9001      	str	r0, [sp, #4]
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    36be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    36c0:	4698      	mov	r8, r3
		if( uxMessagesWaiting < pxQueue->uxLength )
    36c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    36c4:	4598      	cmp	r8, r3
    36c6:	d267      	bcs.n	3798 <MyWrapper+0x108>
			const int8_t cTxLock = pxQueue->cTxLock;
    36c8:	2345      	movs	r3, #69	; 0x45
    36ca:	5ce5      	ldrb	r5, [r4, r3]
    36cc:	b26d      	sxtb	r5, r5
			traceQUEUE_SEND_FROM_ISR( pxQueue );
    36ce:	0020      	movs	r0, r4
    36d0:	4b45      	ldr	r3, [pc, #276]	; (37e8 <MyWrapper+0x158>)
    36d2:	4798      	blx	r3
    36d4:	4b45      	ldr	r3, [pc, #276]	; (37ec <MyWrapper+0x15c>)
    36d6:	881b      	ldrh	r3, [r3, #0]
    36d8:	4203      	tst	r3, r0
    36da:	d018      	beq.n	370e <MyWrapper+0x7e>
    36dc:	2335      	movs	r3, #53	; 0x35
    36de:	469a      	mov	sl, r3
    36e0:	2e00      	cmp	r6, #0
    36e2:	d107      	bne.n	36f4 <MyWrapper+0x64>
    36e4:	0020      	movs	r0, r4
    36e6:	4b42      	ldr	r3, [pc, #264]	; (37f0 <MyWrapper+0x160>)
    36e8:	4798      	blx	r3
    36ea:	4b42      	ldr	r3, [pc, #264]	; (37f4 <MyWrapper+0x164>)
    36ec:	5c1b      	ldrb	r3, [r3, r0]
    36ee:	3330      	adds	r3, #48	; 0x30
    36f0:	b2db      	uxtb	r3, r3
    36f2:	469a      	mov	sl, r3
    36f4:	0020      	movs	r0, r4
    36f6:	4b3e      	ldr	r3, [pc, #248]	; (37f0 <MyWrapper+0x160>)
    36f8:	4798      	blx	r3
    36fa:	4b3e      	ldr	r3, [pc, #248]	; (37f4 <MyWrapper+0x164>)
    36fc:	5c1e      	ldrb	r6, [r3, r0]
    36fe:	0020      	movs	r0, r4
    3700:	4b3d      	ldr	r3, [pc, #244]	; (37f8 <MyWrapper+0x168>)
    3702:	4798      	blx	r3
    3704:	b2c2      	uxtb	r2, r0
    3706:	0031      	movs	r1, r6
    3708:	4650      	mov	r0, sl
    370a:	4b3c      	ldr	r3, [pc, #240]	; (37fc <MyWrapper+0x16c>)
    370c:	4798      	blx	r3
    370e:	0020      	movs	r0, r4
    3710:	4b37      	ldr	r3, [pc, #220]	; (37f0 <MyWrapper+0x160>)
    3712:	4798      	blx	r3
    3714:	4b37      	ldr	r3, [pc, #220]	; (37f4 <MyWrapper+0x164>)
    3716:	5c1e      	ldrb	r6, [r3, r0]
    3718:	0020      	movs	r0, r4
    371a:	4b37      	ldr	r3, [pc, #220]	; (37f8 <MyWrapper+0x168>)
    371c:	4798      	blx	r3
    371e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3720:	3201      	adds	r2, #1
    3722:	b2d2      	uxtb	r2, r2
    3724:	b2c1      	uxtb	r1, r0
    3726:	0030      	movs	r0, r6
    3728:	4b35      	ldr	r3, [pc, #212]	; (3800 <MyWrapper+0x170>)
    372a:	4798      	blx	r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    372c:	4643      	mov	r3, r8
    372e:	3301      	adds	r3, #1
    3730:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
    3732:	1c6b      	adds	r3, r5, #1
    3734:	d12a      	bne.n	378c <MyWrapper+0xfc>
					if( pxQueue->pxQueueSetContainer != NULL )
    3736:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3738:	2b00      	cmp	r3, #0
    373a:	d018      	beq.n	376e <MyWrapper+0xde>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    373c:	2100      	movs	r1, #0
    373e:	0020      	movs	r0, r4
    3740:	4b30      	ldr	r3, [pc, #192]	; (3804 <MyWrapper+0x174>)
    3742:	4798      	blx	r3
			xReturn = pdPASS;
    3744:	3502      	adds	r5, #2
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    3746:	2800      	cmp	r0, #0
    3748:	d003      	beq.n	3752 <MyWrapper+0xc2>
							if( pxHigherPriorityTaskWoken != NULL )
    374a:	2f00      	cmp	r7, #0
    374c:	d045      	beq.n	37da <MyWrapper+0x14a>
								*pxHigherPriorityTaskWoken = pdTRUE;
    374e:	2301      	movs	r3, #1
    3750:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3752:	9801      	ldr	r0, [sp, #4]
    3754:	4b2c      	ldr	r3, [pc, #176]	; (3808 <MyWrapper+0x178>)
    3756:	4798      	blx	r3
}
    3758:	0028      	movs	r0, r5
    375a:	b003      	add	sp, #12
    375c:	bc0c      	pop	{r2, r3}
    375e:	4690      	mov	r8, r2
    3760:	469a      	mov	sl, r3
    3762:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    3764:	6843      	ldr	r3, [r0, #4]
    3766:	2b00      	cmp	r3, #0
    3768:	d0a6      	beq.n	36b8 <MyWrapper+0x28>
    376a:	b672      	cpsid	i
    376c:	e7fe      	b.n	376c <MyWrapper+0xdc>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    376e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    3770:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3772:	2b00      	cmp	r3, #0
    3774:	d0ed      	beq.n	3752 <MyWrapper+0xc2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3776:	0020      	movs	r0, r4
    3778:	3024      	adds	r0, #36	; 0x24
    377a:	4b24      	ldr	r3, [pc, #144]	; (380c <MyWrapper+0x17c>)
    377c:	4798      	blx	r3
    377e:	2800      	cmp	r0, #0
    3780:	d0e7      	beq.n	3752 <MyWrapper+0xc2>
								if( pxHigherPriorityTaskWoken != NULL )
    3782:	2f00      	cmp	r7, #0
    3784:	d02b      	beq.n	37de <MyWrapper+0x14e>
									*pxHigherPriorityTaskWoken = pdTRUE;
    3786:	2301      	movs	r3, #1
    3788:	603b      	str	r3, [r7, #0]
    378a:	e7e2      	b.n	3752 <MyWrapper+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    378c:	3501      	adds	r5, #1
    378e:	b26d      	sxtb	r5, r5
    3790:	2345      	movs	r3, #69	; 0x45
    3792:	54e5      	strb	r5, [r4, r3]
			xReturn = pdPASS;
    3794:	2501      	movs	r5, #1
    3796:	e7dc      	b.n	3752 <MyWrapper+0xc2>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    3798:	0020      	movs	r0, r4
    379a:	4b13      	ldr	r3, [pc, #76]	; (37e8 <MyWrapper+0x158>)
    379c:	4798      	blx	r3
    379e:	4b13      	ldr	r3, [pc, #76]	; (37ec <MyWrapper+0x15c>)
    37a0:	881b      	ldrh	r3, [r3, #0]
			xReturn = errQUEUE_FULL;
    37a2:	2500      	movs	r5, #0
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    37a4:	4203      	tst	r3, r0
    37a6:	d0d4      	beq.n	3752 <MyWrapper+0xc2>
    37a8:	355d      	adds	r5, #93	; 0x5d
    37aa:	2e00      	cmp	r6, #0
    37ac:	d106      	bne.n	37bc <MyWrapper+0x12c>
    37ae:	0020      	movs	r0, r4
    37b0:	4b0f      	ldr	r3, [pc, #60]	; (37f0 <MyWrapper+0x160>)
    37b2:	4798      	blx	r3
    37b4:	4b0f      	ldr	r3, [pc, #60]	; (37f4 <MyWrapper+0x164>)
    37b6:	5c1d      	ldrb	r5, [r3, r0]
    37b8:	3558      	adds	r5, #88	; 0x58
    37ba:	b2ed      	uxtb	r5, r5
    37bc:	0020      	movs	r0, r4
    37be:	4b0c      	ldr	r3, [pc, #48]	; (37f0 <MyWrapper+0x160>)
    37c0:	4798      	blx	r3
    37c2:	4b0c      	ldr	r3, [pc, #48]	; (37f4 <MyWrapper+0x164>)
    37c4:	5c1f      	ldrb	r7, [r3, r0]
    37c6:	0020      	movs	r0, r4
    37c8:	4b0b      	ldr	r3, [pc, #44]	; (37f8 <MyWrapper+0x168>)
    37ca:	4798      	blx	r3
    37cc:	b2c2      	uxtb	r2, r0
    37ce:	0039      	movs	r1, r7
    37d0:	0028      	movs	r0, r5
    37d2:	4b0a      	ldr	r3, [pc, #40]	; (37fc <MyWrapper+0x16c>)
    37d4:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
    37d6:	2500      	movs	r5, #0
    37d8:	e7bb      	b.n	3752 <MyWrapper+0xc2>
			xReturn = pdPASS;
    37da:	2501      	movs	r5, #1
    37dc:	e7b9      	b.n	3752 <MyWrapper+0xc2>
    37de:	2501      	movs	r5, #1
    37e0:	e7b7      	b.n	3752 <MyWrapper+0xc2>
    37e2:	46c0      	nop			; (mov r8, r8)
    37e4:	00002c09 	.word	0x00002c09
    37e8:	000019c9 	.word	0x000019c9
    37ec:	20000020 	.word	0x20000020
    37f0:	00001949 	.word	0x00001949
    37f4:	20000018 	.word	0x20000018
    37f8:	000019b9 	.word	0x000019b9
    37fc:	00002655 	.word	0x00002655
    3800:	00002129 	.word	0x00002129
    3804:	00002dd9 	.word	0x00002dd9
    3808:	00002c11 	.word	0x00002c11
    380c:	0000498d 	.word	0x0000498d

00003810 <xQueueGiveFromISR>:
BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    3810:	b510      	push	{r4, lr}
    3812:	2200      	movs	r2, #0
    3814:	4b01      	ldr	r3, [pc, #4]	; (381c <xQueueGiveFromISR+0xc>)
    3816:	4798      	blx	r3
    3818:	bd10      	pop	{r4, pc}
    381a:	46c0      	nop			; (mov r8, r8)
    381c:	00003691 	.word	0x00003691

00003820 <xQueueReceive>:
{
    3820:	b5f0      	push	{r4, r5, r6, r7, lr}
    3822:	46ce      	mov	lr, r9
    3824:	4647      	mov	r7, r8
    3826:	b580      	push	{r7, lr}
    3828:	b085      	sub	sp, #20
    382a:	1e04      	subs	r4, r0, #0
    382c:	9100      	str	r1, [sp, #0]
    382e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    3830:	d00b      	beq.n	384a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3832:	9b00      	ldr	r3, [sp, #0]
    3834:	2b00      	cmp	r3, #0
    3836:	d00a      	beq.n	384e <xQueueReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3838:	4ba4      	ldr	r3, [pc, #656]	; (3acc <xQueueReceive+0x2ac>)
    383a:	4798      	blx	r3
    383c:	2800      	cmp	r0, #0
    383e:	d10b      	bne.n	3858 <xQueueReceive+0x38>
    3840:	9b01      	ldr	r3, [sp, #4]
    3842:	2b00      	cmp	r3, #0
    3844:	d00c      	beq.n	3860 <xQueueReceive+0x40>
    3846:	b672      	cpsid	i
    3848:	e7fe      	b.n	3848 <xQueueReceive+0x28>
	configASSERT( ( pxQueue ) );
    384a:	b672      	cpsid	i
    384c:	e7fe      	b.n	384c <xQueueReceive+0x2c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    384e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3850:	2b00      	cmp	r3, #0
    3852:	d0f1      	beq.n	3838 <xQueueReceive+0x18>
    3854:	b672      	cpsid	i
    3856:	e7fe      	b.n	3856 <xQueueReceive+0x36>
    3858:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    385a:	4b9d      	ldr	r3, [pc, #628]	; (3ad0 <xQueueReceive+0x2b0>)
    385c:	4698      	mov	r8, r3
    385e:	e0b4      	b.n	39ca <xQueueReceive+0x1aa>
    3860:	2500      	movs	r5, #0
    3862:	e7fa      	b.n	385a <xQueueReceive+0x3a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3864:	9900      	ldr	r1, [sp, #0]
    3866:	0020      	movs	r0, r4
    3868:	4b9a      	ldr	r3, [pc, #616]	; (3ad4 <xQueueReceive+0x2b4>)
    386a:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
    386c:	4b9a      	ldr	r3, [pc, #616]	; (3ad8 <xQueueReceive+0x2b8>)
    386e:	4798      	blx	r3
    3870:	4b9a      	ldr	r3, [pc, #616]	; (3adc <xQueueReceive+0x2bc>)
    3872:	4798      	blx	r3
    3874:	4b9a      	ldr	r3, [pc, #616]	; (3ae0 <xQueueReceive+0x2c0>)
    3876:	881b      	ldrh	r3, [r3, #0]
    3878:	4203      	tst	r3, r0
    387a:	d019      	beq.n	38b0 <xQueueReceive+0x90>
    387c:	0020      	movs	r0, r4
    387e:	4b99      	ldr	r3, [pc, #612]	; (3ae4 <xQueueReceive+0x2c4>)
    3880:	4798      	blx	r3
    3882:	4b97      	ldr	r3, [pc, #604]	; (3ae0 <xQueueReceive+0x2c0>)
    3884:	881b      	ldrh	r3, [r3, #0]
    3886:	4203      	tst	r3, r0
    3888:	d012      	beq.n	38b0 <xQueueReceive+0x90>
    388a:	0020      	movs	r0, r4
    388c:	4b96      	ldr	r3, [pc, #600]	; (3ae8 <xQueueReceive+0x2c8>)
    388e:	4698      	mov	r8, r3
    3890:	4798      	blx	r3
    3892:	4f96      	ldr	r7, [pc, #600]	; (3aec <xQueueReceive+0x2cc>)
    3894:	5c3d      	ldrb	r5, [r7, r0]
    3896:	3528      	adds	r5, #40	; 0x28
    3898:	b2ed      	uxtb	r5, r5
    389a:	0020      	movs	r0, r4
    389c:	47c0      	blx	r8
    389e:	5c3f      	ldrb	r7, [r7, r0]
    38a0:	0020      	movs	r0, r4
    38a2:	4b93      	ldr	r3, [pc, #588]	; (3af0 <xQueueReceive+0x2d0>)
    38a4:	4798      	blx	r3
    38a6:	b2c2      	uxtb	r2, r0
    38a8:	0039      	movs	r1, r7
    38aa:	0028      	movs	r0, r5
    38ac:	4b91      	ldr	r3, [pc, #580]	; (3af4 <xQueueReceive+0x2d4>)
    38ae:	4798      	blx	r3
    38b0:	0020      	movs	r0, r4
    38b2:	4f8d      	ldr	r7, [pc, #564]	; (3ae8 <xQueueReceive+0x2c8>)
    38b4:	47b8      	blx	r7
    38b6:	4d8d      	ldr	r5, [pc, #564]	; (3aec <xQueueReceive+0x2cc>)
    38b8:	5c2b      	ldrb	r3, [r5, r0]
    38ba:	4699      	mov	r9, r3
    38bc:	0020      	movs	r0, r4
    38be:	4b8c      	ldr	r3, [pc, #560]	; (3af0 <xQueueReceive+0x2d0>)
    38c0:	4798      	blx	r3
    38c2:	b2c3      	uxtb	r3, r0
    38c4:	4698      	mov	r8, r3
    38c6:	0020      	movs	r0, r4
    38c8:	47b8      	blx	r7
    38ca:	5c2b      	ldrb	r3, [r5, r0]
    38cc:	2b02      	cmp	r3, #2
    38ce:	d11e      	bne.n	390e <xQueueReceive+0xee>
    38d0:	4b81      	ldr	r3, [pc, #516]	; (3ad8 <xQueueReceive+0x2b8>)
    38d2:	4798      	blx	r3
    38d4:	4b88      	ldr	r3, [pc, #544]	; (3af8 <xQueueReceive+0x2d8>)
    38d6:	4798      	blx	r3
    38d8:	b2c2      	uxtb	r2, r0
    38da:	4641      	mov	r1, r8
    38dc:	4648      	mov	r0, r9
    38de:	4b87      	ldr	r3, [pc, #540]	; (3afc <xQueueReceive+0x2dc>)
    38e0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    38e2:	3e01      	subs	r6, #1
    38e4:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    38e6:	6923      	ldr	r3, [r4, #16]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d007      	beq.n	38fc <xQueueReceive+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    38ec:	0020      	movs	r0, r4
    38ee:	3010      	adds	r0, #16
    38f0:	4b83      	ldr	r3, [pc, #524]	; (3b00 <xQueueReceive+0x2e0>)
    38f2:	4798      	blx	r3
    38f4:	2800      	cmp	r0, #0
    38f6:	d001      	beq.n	38fc <xQueueReceive+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    38f8:	4b82      	ldr	r3, [pc, #520]	; (3b04 <xQueueReceive+0x2e4>)
    38fa:	4798      	blx	r3
				taskEXIT_CRITICAL();
    38fc:	4b82      	ldr	r3, [pc, #520]	; (3b08 <xQueueReceive+0x2e8>)
    38fe:	4798      	blx	r3
				return pdPASS;
    3900:	2301      	movs	r3, #1
}
    3902:	0018      	movs	r0, r3
    3904:	b005      	add	sp, #20
    3906:	bc0c      	pop	{r2, r3}
    3908:	4690      	mov	r8, r2
    390a:	4699      	mov	r9, r3
    390c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    390e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3910:	3a01      	subs	r2, #1
    3912:	b2d2      	uxtb	r2, r2
    3914:	e7e1      	b.n	38da <xQueueReceive+0xba>
					taskEXIT_CRITICAL();
    3916:	4b7c      	ldr	r3, [pc, #496]	; (3b08 <xQueueReceive+0x2e8>)
    3918:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    391a:	4b6f      	ldr	r3, [pc, #444]	; (3ad8 <xQueueReceive+0x2b8>)
    391c:	4798      	blx	r3
    391e:	4b6f      	ldr	r3, [pc, #444]	; (3adc <xQueueReceive+0x2bc>)
    3920:	4798      	blx	r3
    3922:	4b6f      	ldr	r3, [pc, #444]	; (3ae0 <xQueueReceive+0x2c0>)
    3924:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    3926:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3928:	4202      	tst	r2, r0
    392a:	d0ea      	beq.n	3902 <xQueueReceive+0xe2>
    392c:	0020      	movs	r0, r4
    392e:	4b6d      	ldr	r3, [pc, #436]	; (3ae4 <xQueueReceive+0x2c4>)
    3930:	4798      	blx	r3
    3932:	4b6b      	ldr	r3, [pc, #428]	; (3ae0 <xQueueReceive+0x2c0>)
    3934:	881a      	ldrh	r2, [r3, #0]
					return errQUEUE_EMPTY;
    3936:	2300      	movs	r3, #0
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3938:	4202      	tst	r2, r0
    393a:	d0e2      	beq.n	3902 <xQueueReceive+0xe2>
    393c:	0020      	movs	r0, r4
    393e:	4f6a      	ldr	r7, [pc, #424]	; (3ae8 <xQueueReceive+0x2c8>)
    3940:	47b8      	blx	r7
    3942:	4e6a      	ldr	r6, [pc, #424]	; (3aec <xQueueReceive+0x2cc>)
    3944:	5c35      	ldrb	r5, [r6, r0]
    3946:	3550      	adds	r5, #80	; 0x50
    3948:	b2ed      	uxtb	r5, r5
    394a:	0020      	movs	r0, r4
    394c:	47b8      	blx	r7
    394e:	5c36      	ldrb	r6, [r6, r0]
    3950:	0020      	movs	r0, r4
    3952:	4b67      	ldr	r3, [pc, #412]	; (3af0 <xQueueReceive+0x2d0>)
    3954:	4798      	blx	r3
    3956:	b2c2      	uxtb	r2, r0
    3958:	0031      	movs	r1, r6
    395a:	0028      	movs	r0, r5
    395c:	4b65      	ldr	r3, [pc, #404]	; (3af4 <xQueueReceive+0x2d4>)
    395e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    3960:	2300      	movs	r3, #0
    3962:	e7ce      	b.n	3902 <xQueueReceive+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    3964:	a802      	add	r0, sp, #8
    3966:	4b69      	ldr	r3, [pc, #420]	; (3b0c <xQueueReceive+0x2ec>)
    3968:	4798      	blx	r3
    396a:	e038      	b.n	39de <xQueueReceive+0x1be>
		prvLockQueue( pxQueue );
    396c:	2200      	movs	r2, #0
    396e:	2344      	movs	r3, #68	; 0x44
    3970:	54e2      	strb	r2, [r4, r3]
    3972:	e03f      	b.n	39f4 <xQueueReceive+0x1d4>
    3974:	2200      	movs	r2, #0
    3976:	2345      	movs	r3, #69	; 0x45
    3978:	54e2      	strb	r2, [r4, r3]
    397a:	e040      	b.n	39fe <xQueueReceive+0x1de>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    397c:	0020      	movs	r0, r4
    397e:	4b59      	ldr	r3, [pc, #356]	; (3ae4 <xQueueReceive+0x2c4>)
    3980:	4798      	blx	r3
    3982:	4b57      	ldr	r3, [pc, #348]	; (3ae0 <xQueueReceive+0x2c0>)
    3984:	881b      	ldrh	r3, [r3, #0]
    3986:	4203      	tst	r3, r0
    3988:	d04e      	beq.n	3a28 <xQueueReceive+0x208>
    398a:	0020      	movs	r0, r4
    398c:	4f56      	ldr	r7, [pc, #344]	; (3ae8 <xQueueReceive+0x2c8>)
    398e:	47b8      	blx	r7
    3990:	4e56      	ldr	r6, [pc, #344]	; (3aec <xQueueReceive+0x2cc>)
    3992:	5c35      	ldrb	r5, [r6, r0]
    3994:	3568      	adds	r5, #104	; 0x68
    3996:	b2ed      	uxtb	r5, r5
    3998:	0020      	movs	r0, r4
    399a:	47b8      	blx	r7
    399c:	5c36      	ldrb	r6, [r6, r0]
    399e:	0020      	movs	r0, r4
    39a0:	4b53      	ldr	r3, [pc, #332]	; (3af0 <xQueueReceive+0x2d0>)
    39a2:	4798      	blx	r3
    39a4:	b2c2      	uxtb	r2, r0
    39a6:	0031      	movs	r1, r6
    39a8:	0028      	movs	r0, r5
    39aa:	4b52      	ldr	r3, [pc, #328]	; (3af4 <xQueueReceive+0x2d4>)
    39ac:	4798      	blx	r3
    39ae:	e03b      	b.n	3a28 <xQueueReceive+0x208>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    39b0:	0020      	movs	r0, r4
    39b2:	3024      	adds	r0, #36	; 0x24
    39b4:	9901      	ldr	r1, [sp, #4]
    39b6:	4b56      	ldr	r3, [pc, #344]	; (3b10 <xQueueReceive+0x2f0>)
    39b8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    39ba:	0020      	movs	r0, r4
    39bc:	4b55      	ldr	r3, [pc, #340]	; (3b14 <xQueueReceive+0x2f4>)
    39be:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    39c0:	4b55      	ldr	r3, [pc, #340]	; (3b18 <xQueueReceive+0x2f8>)
    39c2:	4798      	blx	r3
    39c4:	2800      	cmp	r0, #0
    39c6:	d046      	beq.n	3a56 <xQueueReceive+0x236>
    39c8:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    39ca:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    39cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    39ce:	2e00      	cmp	r6, #0
    39d0:	d000      	beq.n	39d4 <xQueueReceive+0x1b4>
    39d2:	e747      	b.n	3864 <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
    39d4:	9b01      	ldr	r3, [sp, #4]
    39d6:	2b00      	cmp	r3, #0
    39d8:	d09d      	beq.n	3916 <xQueueReceive+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    39da:	2d00      	cmp	r5, #0
    39dc:	d0c2      	beq.n	3964 <xQueueReceive+0x144>
		taskEXIT_CRITICAL();
    39de:	4b4a      	ldr	r3, [pc, #296]	; (3b08 <xQueueReceive+0x2e8>)
    39e0:	4798      	blx	r3
		vTaskSuspendAll();
    39e2:	4b4e      	ldr	r3, [pc, #312]	; (3b1c <xQueueReceive+0x2fc>)
    39e4:	4798      	blx	r3
		prvLockQueue( pxQueue );
    39e6:	4b3a      	ldr	r3, [pc, #232]	; (3ad0 <xQueueReceive+0x2b0>)
    39e8:	4798      	blx	r3
    39ea:	2344      	movs	r3, #68	; 0x44
    39ec:	5ce3      	ldrb	r3, [r4, r3]
    39ee:	b25b      	sxtb	r3, r3
    39f0:	3301      	adds	r3, #1
    39f2:	d0bb      	beq.n	396c <xQueueReceive+0x14c>
    39f4:	2345      	movs	r3, #69	; 0x45
    39f6:	5ce3      	ldrb	r3, [r4, r3]
    39f8:	b25b      	sxtb	r3, r3
    39fa:	3301      	adds	r3, #1
    39fc:	d0ba      	beq.n	3974 <xQueueReceive+0x154>
    39fe:	4b42      	ldr	r3, [pc, #264]	; (3b08 <xQueueReceive+0x2e8>)
    3a00:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3a02:	a901      	add	r1, sp, #4
    3a04:	a802      	add	r0, sp, #8
    3a06:	4b46      	ldr	r3, [pc, #280]	; (3b20 <xQueueReceive+0x300>)
    3a08:	4798      	blx	r3
    3a0a:	2800      	cmp	r0, #0
    3a0c:	d12c      	bne.n	3a68 <xQueueReceive+0x248>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3a0e:	0020      	movs	r0, r4
    3a10:	4b44      	ldr	r3, [pc, #272]	; (3b24 <xQueueReceive+0x304>)
    3a12:	4798      	blx	r3
    3a14:	2800      	cmp	r0, #0
    3a16:	d021      	beq.n	3a5c <xQueueReceive+0x23c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    3a18:	4b2f      	ldr	r3, [pc, #188]	; (3ad8 <xQueueReceive+0x2b8>)
    3a1a:	4798      	blx	r3
    3a1c:	4b2f      	ldr	r3, [pc, #188]	; (3adc <xQueueReceive+0x2bc>)
    3a1e:	4798      	blx	r3
    3a20:	4b2f      	ldr	r3, [pc, #188]	; (3ae0 <xQueueReceive+0x2c0>)
    3a22:	881b      	ldrh	r3, [r3, #0]
    3a24:	4203      	tst	r3, r0
    3a26:	d1a9      	bne.n	397c <xQueueReceive+0x15c>
    3a28:	0020      	movs	r0, r4
    3a2a:	4b2f      	ldr	r3, [pc, #188]	; (3ae8 <xQueueReceive+0x2c8>)
    3a2c:	4798      	blx	r3
    3a2e:	4b2f      	ldr	r3, [pc, #188]	; (3aec <xQueueReceive+0x2cc>)
    3a30:	5c1b      	ldrb	r3, [r3, r0]
    3a32:	2b02      	cmp	r3, #2
    3a34:	d0bc      	beq.n	39b0 <xQueueReceive+0x190>
    3a36:	4b28      	ldr	r3, [pc, #160]	; (3ad8 <xQueueReceive+0x2b8>)
    3a38:	4798      	blx	r3
    3a3a:	4b28      	ldr	r3, [pc, #160]	; (3adc <xQueueReceive+0x2bc>)
    3a3c:	4798      	blx	r3
    3a3e:	4b28      	ldr	r3, [pc, #160]	; (3ae0 <xQueueReceive+0x2c0>)
    3a40:	881b      	ldrh	r3, [r3, #0]
    3a42:	4203      	tst	r3, r0
    3a44:	d0b4      	beq.n	39b0 <xQueueReceive+0x190>
    3a46:	4b24      	ldr	r3, [pc, #144]	; (3ad8 <xQueueReceive+0x2b8>)
    3a48:	4798      	blx	r3
    3a4a:	4b2b      	ldr	r3, [pc, #172]	; (3af8 <xQueueReceive+0x2d8>)
    3a4c:	4798      	blx	r3
    3a4e:	b2c0      	uxtb	r0, r0
    3a50:	4b35      	ldr	r3, [pc, #212]	; (3b28 <xQueueReceive+0x308>)
    3a52:	4798      	blx	r3
    3a54:	e7ac      	b.n	39b0 <xQueueReceive+0x190>
					portYIELD_WITHIN_API();
    3a56:	4b2b      	ldr	r3, [pc, #172]	; (3b04 <xQueueReceive+0x2e4>)
    3a58:	4798      	blx	r3
    3a5a:	e7b5      	b.n	39c8 <xQueueReceive+0x1a8>
				prvUnlockQueue( pxQueue );
    3a5c:	0020      	movs	r0, r4
    3a5e:	4b2d      	ldr	r3, [pc, #180]	; (3b14 <xQueueReceive+0x2f4>)
    3a60:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3a62:	4b2d      	ldr	r3, [pc, #180]	; (3b18 <xQueueReceive+0x2f8>)
    3a64:	4798      	blx	r3
    3a66:	e7af      	b.n	39c8 <xQueueReceive+0x1a8>
			prvUnlockQueue( pxQueue );
    3a68:	0020      	movs	r0, r4
    3a6a:	4b2a      	ldr	r3, [pc, #168]	; (3b14 <xQueueReceive+0x2f4>)
    3a6c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3a6e:	4b2a      	ldr	r3, [pc, #168]	; (3b18 <xQueueReceive+0x2f8>)
    3a70:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3a72:	0020      	movs	r0, r4
    3a74:	4b2b      	ldr	r3, [pc, #172]	; (3b24 <xQueueReceive+0x304>)
    3a76:	4798      	blx	r3
    3a78:	2800      	cmp	r0, #0
    3a7a:	d0a5      	beq.n	39c8 <xQueueReceive+0x1a8>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    3a7c:	4b16      	ldr	r3, [pc, #88]	; (3ad8 <xQueueReceive+0x2b8>)
    3a7e:	4798      	blx	r3
    3a80:	4b16      	ldr	r3, [pc, #88]	; (3adc <xQueueReceive+0x2bc>)
    3a82:	4798      	blx	r3
    3a84:	4b16      	ldr	r3, [pc, #88]	; (3ae0 <xQueueReceive+0x2c0>)
    3a86:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    3a88:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    3a8a:	4202      	tst	r2, r0
    3a8c:	d100      	bne.n	3a90 <xQueueReceive+0x270>
    3a8e:	e738      	b.n	3902 <xQueueReceive+0xe2>
    3a90:	0020      	movs	r0, r4
    3a92:	4b14      	ldr	r3, [pc, #80]	; (3ae4 <xQueueReceive+0x2c4>)
    3a94:	4798      	blx	r3
    3a96:	4b12      	ldr	r3, [pc, #72]	; (3ae0 <xQueueReceive+0x2c0>)
    3a98:	881a      	ldrh	r2, [r3, #0]
				return errQUEUE_EMPTY;
    3a9a:	2300      	movs	r3, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    3a9c:	4202      	tst	r2, r0
    3a9e:	d100      	bne.n	3aa2 <xQueueReceive+0x282>
    3aa0:	e72f      	b.n	3902 <xQueueReceive+0xe2>
    3aa2:	0020      	movs	r0, r4
    3aa4:	4f10      	ldr	r7, [pc, #64]	; (3ae8 <xQueueReceive+0x2c8>)
    3aa6:	47b8      	blx	r7
    3aa8:	4e10      	ldr	r6, [pc, #64]	; (3aec <xQueueReceive+0x2cc>)
    3aaa:	5c35      	ldrb	r5, [r6, r0]
    3aac:	3550      	adds	r5, #80	; 0x50
    3aae:	b2ed      	uxtb	r5, r5
    3ab0:	0020      	movs	r0, r4
    3ab2:	47b8      	blx	r7
    3ab4:	5c36      	ldrb	r6, [r6, r0]
    3ab6:	0020      	movs	r0, r4
    3ab8:	4b0d      	ldr	r3, [pc, #52]	; (3af0 <xQueueReceive+0x2d0>)
    3aba:	4798      	blx	r3
    3abc:	b2c2      	uxtb	r2, r0
    3abe:	0031      	movs	r1, r6
    3ac0:	0028      	movs	r0, r5
    3ac2:	4b0c      	ldr	r3, [pc, #48]	; (3af4 <xQueueReceive+0x2d4>)
    3ac4:	4798      	blx	r3
				return errQUEUE_EMPTY;
    3ac6:	2300      	movs	r3, #0
    3ac8:	e71b      	b.n	3902 <xQueueReceive+0xe2>
    3aca:	46c0      	nop			; (mov r8, r8)
    3acc:	00004af5 	.word	0x00004af5
    3ad0:	00002bd1 	.word	0x00002bd1
    3ad4:	00002ef5 	.word	0x00002ef5
    3ad8:	00001a1d 	.word	0x00001a1d
    3adc:	00001965 	.word	0x00001965
    3ae0:	20000020 	.word	0x20000020
    3ae4:	000019c9 	.word	0x000019c9
    3ae8:	00001949 	.word	0x00001949
    3aec:	20000018 	.word	0x20000018
    3af0:	000019b9 	.word	0x000019b9
    3af4:	00002655 	.word	0x00002655
    3af8:	00001955 	.word	0x00001955
    3afc:	00002129 	.word	0x00002129
    3b00:	0000498d 	.word	0x0000498d
    3b04:	00002bc1 	.word	0x00002bc1
    3b08:	00002be9 	.word	0x00002be9
    3b0c:	00004a41 	.word	0x00004a41
    3b10:	000048c5 	.word	0x000048c5
    3b14:	00002f1d 	.word	0x00002f1d
    3b18:	000044dd 	.word	0x000044dd
    3b1c:	00004335 	.word	0x00004335
    3b20:	00004a59 	.word	0x00004a59
    3b24:	00002d41 	.word	0x00002d41
    3b28:	00002181 	.word	0x00002181

00003b2c <xQueueSemaphoreTake>:
{
    3b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b2e:	46ce      	mov	lr, r9
    3b30:	4647      	mov	r7, r8
    3b32:	b580      	push	{r7, lr}
    3b34:	b085      	sub	sp, #20
    3b36:	1e04      	subs	r4, r0, #0
    3b38:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    3b3a:	d004      	beq.n	3b46 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
    3b3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d003      	beq.n	3b4a <xQueueSemaphoreTake+0x1e>
    3b42:	b672      	cpsid	i
    3b44:	e7fe      	b.n	3b44 <xQueueSemaphoreTake+0x18>
	configASSERT( ( pxQueue ) );
    3b46:	b672      	cpsid	i
    3b48:	e7fe      	b.n	3b48 <xQueueSemaphoreTake+0x1c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3b4a:	4bb2      	ldr	r3, [pc, #712]	; (3e14 <xQueueSemaphoreTake+0x2e8>)
    3b4c:	4798      	blx	r3
    3b4e:	2800      	cmp	r0, #0
    3b50:	d104      	bne.n	3b5c <xQueueSemaphoreTake+0x30>
    3b52:	9b01      	ldr	r3, [sp, #4]
    3b54:	2b00      	cmp	r3, #0
    3b56:	d006      	beq.n	3b66 <xQueueSemaphoreTake+0x3a>
    3b58:	b672      	cpsid	i
    3b5a:	e7fe      	b.n	3b5a <xQueueSemaphoreTake+0x2e>
    3b5c:	2500      	movs	r5, #0
    3b5e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    3b60:	4bad      	ldr	r3, [pc, #692]	; (3e18 <xQueueSemaphoreTake+0x2ec>)
    3b62:	4698      	mov	r8, r3
    3b64:	e0bd      	b.n	3ce2 <xQueueSemaphoreTake+0x1b6>
    3b66:	2500      	movs	r5, #0
    3b68:	2700      	movs	r7, #0
    3b6a:	e7f9      	b.n	3b60 <xQueueSemaphoreTake+0x34>
				traceQUEUE_RECEIVE( pxQueue );
    3b6c:	4bab      	ldr	r3, [pc, #684]	; (3e1c <xQueueSemaphoreTake+0x2f0>)
    3b6e:	4798      	blx	r3
    3b70:	4bab      	ldr	r3, [pc, #684]	; (3e20 <xQueueSemaphoreTake+0x2f4>)
    3b72:	4798      	blx	r3
    3b74:	4bab      	ldr	r3, [pc, #684]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3b76:	881b      	ldrh	r3, [r3, #0]
    3b78:	4203      	tst	r3, r0
    3b7a:	d019      	beq.n	3bb0 <xQueueSemaphoreTake+0x84>
    3b7c:	0020      	movs	r0, r4
    3b7e:	4baa      	ldr	r3, [pc, #680]	; (3e28 <xQueueSemaphoreTake+0x2fc>)
    3b80:	4798      	blx	r3
    3b82:	4ba8      	ldr	r3, [pc, #672]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3b84:	881b      	ldrh	r3, [r3, #0]
    3b86:	4203      	tst	r3, r0
    3b88:	d012      	beq.n	3bb0 <xQueueSemaphoreTake+0x84>
    3b8a:	0020      	movs	r0, r4
    3b8c:	4ba7      	ldr	r3, [pc, #668]	; (3e2c <xQueueSemaphoreTake+0x300>)
    3b8e:	4698      	mov	r8, r3
    3b90:	4798      	blx	r3
    3b92:	4fa7      	ldr	r7, [pc, #668]	; (3e30 <xQueueSemaphoreTake+0x304>)
    3b94:	5c3d      	ldrb	r5, [r7, r0]
    3b96:	3528      	adds	r5, #40	; 0x28
    3b98:	b2ed      	uxtb	r5, r5
    3b9a:	0020      	movs	r0, r4
    3b9c:	47c0      	blx	r8
    3b9e:	5c3f      	ldrb	r7, [r7, r0]
    3ba0:	0020      	movs	r0, r4
    3ba2:	4ba4      	ldr	r3, [pc, #656]	; (3e34 <xQueueSemaphoreTake+0x308>)
    3ba4:	4798      	blx	r3
    3ba6:	b2c2      	uxtb	r2, r0
    3ba8:	0039      	movs	r1, r7
    3baa:	0028      	movs	r0, r5
    3bac:	4ba2      	ldr	r3, [pc, #648]	; (3e38 <xQueueSemaphoreTake+0x30c>)
    3bae:	4798      	blx	r3
    3bb0:	0020      	movs	r0, r4
    3bb2:	4f9e      	ldr	r7, [pc, #632]	; (3e2c <xQueueSemaphoreTake+0x300>)
    3bb4:	47b8      	blx	r7
    3bb6:	4d9e      	ldr	r5, [pc, #632]	; (3e30 <xQueueSemaphoreTake+0x304>)
    3bb8:	5c2b      	ldrb	r3, [r5, r0]
    3bba:	4699      	mov	r9, r3
    3bbc:	0020      	movs	r0, r4
    3bbe:	4b9d      	ldr	r3, [pc, #628]	; (3e34 <xQueueSemaphoreTake+0x308>)
    3bc0:	4798      	blx	r3
    3bc2:	b2c3      	uxtb	r3, r0
    3bc4:	4698      	mov	r8, r3
    3bc6:	0020      	movs	r0, r4
    3bc8:	47b8      	blx	r7
    3bca:	5c2b      	ldrb	r3, [r5, r0]
    3bcc:	2b02      	cmp	r3, #2
    3bce:	d124      	bne.n	3c1a <xQueueSemaphoreTake+0xee>
    3bd0:	4b92      	ldr	r3, [pc, #584]	; (3e1c <xQueueSemaphoreTake+0x2f0>)
    3bd2:	4798      	blx	r3
    3bd4:	4b99      	ldr	r3, [pc, #612]	; (3e3c <xQueueSemaphoreTake+0x310>)
    3bd6:	4798      	blx	r3
    3bd8:	b2c2      	uxtb	r2, r0
    3bda:	4641      	mov	r1, r8
    3bdc:	4648      	mov	r0, r9
    3bde:	4b98      	ldr	r3, [pc, #608]	; (3e40 <xQueueSemaphoreTake+0x314>)
    3be0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    3be2:	3e01      	subs	r6, #1
    3be4:	63a6      	str	r6, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3be6:	6823      	ldr	r3, [r4, #0]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d102      	bne.n	3bf2 <xQueueSemaphoreTake+0xc6>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    3bec:	4b95      	ldr	r3, [pc, #596]	; (3e44 <xQueueSemaphoreTake+0x318>)
    3bee:	4798      	blx	r3
    3bf0:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3bf2:	6923      	ldr	r3, [r4, #16]
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	d007      	beq.n	3c08 <xQueueSemaphoreTake+0xdc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3bf8:	0020      	movs	r0, r4
    3bfa:	3010      	adds	r0, #16
    3bfc:	4b92      	ldr	r3, [pc, #584]	; (3e48 <xQueueSemaphoreTake+0x31c>)
    3bfe:	4798      	blx	r3
    3c00:	2800      	cmp	r0, #0
    3c02:	d001      	beq.n	3c08 <xQueueSemaphoreTake+0xdc>
						queueYIELD_IF_USING_PREEMPTION();
    3c04:	4b91      	ldr	r3, [pc, #580]	; (3e4c <xQueueSemaphoreTake+0x320>)
    3c06:	4798      	blx	r3
				taskEXIT_CRITICAL();
    3c08:	4b91      	ldr	r3, [pc, #580]	; (3e50 <xQueueSemaphoreTake+0x324>)
    3c0a:	4798      	blx	r3
				return pdPASS;
    3c0c:	2501      	movs	r5, #1
}
    3c0e:	0028      	movs	r0, r5
    3c10:	b005      	add	sp, #20
    3c12:	bc0c      	pop	{r2, r3}
    3c14:	4690      	mov	r8, r2
    3c16:	4699      	mov	r9, r3
    3c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
				traceQUEUE_RECEIVE( pxQueue );
    3c1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3c1c:	3a01      	subs	r2, #1
    3c1e:	b2d2      	uxtb	r2, r2
    3c20:	e7db      	b.n	3bda <xQueueSemaphoreTake+0xae>
						configASSERT( xInheritanceOccurred == pdFALSE );
    3c22:	2d00      	cmp	r5, #0
    3c24:	d001      	beq.n	3c2a <xQueueSemaphoreTake+0xfe>
    3c26:	b672      	cpsid	i
    3c28:	e7fe      	b.n	3c28 <xQueueSemaphoreTake+0xfc>
					taskEXIT_CRITICAL();
    3c2a:	4b89      	ldr	r3, [pc, #548]	; (3e50 <xQueueSemaphoreTake+0x324>)
    3c2c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    3c2e:	4b7b      	ldr	r3, [pc, #492]	; (3e1c <xQueueSemaphoreTake+0x2f0>)
    3c30:	4798      	blx	r3
    3c32:	4b7b      	ldr	r3, [pc, #492]	; (3e20 <xQueueSemaphoreTake+0x2f4>)
    3c34:	4798      	blx	r3
    3c36:	4b7b      	ldr	r3, [pc, #492]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3c38:	881b      	ldrh	r3, [r3, #0]
    3c3a:	4203      	tst	r3, r0
    3c3c:	d0e7      	beq.n	3c0e <xQueueSemaphoreTake+0xe2>
    3c3e:	0020      	movs	r0, r4
    3c40:	4b79      	ldr	r3, [pc, #484]	; (3e28 <xQueueSemaphoreTake+0x2fc>)
    3c42:	4798      	blx	r3
    3c44:	4b77      	ldr	r3, [pc, #476]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3c46:	881b      	ldrh	r3, [r3, #0]
    3c48:	4203      	tst	r3, r0
    3c4a:	d0e0      	beq.n	3c0e <xQueueSemaphoreTake+0xe2>
    3c4c:	0020      	movs	r0, r4
    3c4e:	4b77      	ldr	r3, [pc, #476]	; (3e2c <xQueueSemaphoreTake+0x300>)
    3c50:	4698      	mov	r8, r3
    3c52:	4798      	blx	r3
    3c54:	4f76      	ldr	r7, [pc, #472]	; (3e30 <xQueueSemaphoreTake+0x304>)
    3c56:	5c3e      	ldrb	r6, [r7, r0]
    3c58:	3650      	adds	r6, #80	; 0x50
    3c5a:	b2f6      	uxtb	r6, r6
    3c5c:	0020      	movs	r0, r4
    3c5e:	47c0      	blx	r8
    3c60:	5c3f      	ldrb	r7, [r7, r0]
    3c62:	0020      	movs	r0, r4
    3c64:	4b73      	ldr	r3, [pc, #460]	; (3e34 <xQueueSemaphoreTake+0x308>)
    3c66:	4798      	blx	r3
    3c68:	b2c2      	uxtb	r2, r0
    3c6a:	0039      	movs	r1, r7
    3c6c:	0030      	movs	r0, r6
    3c6e:	4b72      	ldr	r3, [pc, #456]	; (3e38 <xQueueSemaphoreTake+0x30c>)
    3c70:	4798      	blx	r3
    3c72:	e7cc      	b.n	3c0e <xQueueSemaphoreTake+0xe2>
					vTaskInternalSetTimeOutState( &xTimeOut );
    3c74:	a802      	add	r0, sp, #8
    3c76:	4b77      	ldr	r3, [pc, #476]	; (3e54 <xQueueSemaphoreTake+0x328>)
    3c78:	4798      	blx	r3
    3c7a:	e03c      	b.n	3cf6 <xQueueSemaphoreTake+0x1ca>
		prvLockQueue( pxQueue );
    3c7c:	2200      	movs	r2, #0
    3c7e:	2344      	movs	r3, #68	; 0x44
    3c80:	54e2      	strb	r2, [r4, r3]
    3c82:	e043      	b.n	3d0c <xQueueSemaphoreTake+0x1e0>
    3c84:	2200      	movs	r2, #0
    3c86:	2345      	movs	r3, #69	; 0x45
    3c88:	54e2      	strb	r2, [r4, r3]
    3c8a:	e044      	b.n	3d16 <xQueueSemaphoreTake+0x1ea>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    3c8c:	0020      	movs	r0, r4
    3c8e:	4b66      	ldr	r3, [pc, #408]	; (3e28 <xQueueSemaphoreTake+0x2fc>)
    3c90:	4798      	blx	r3
    3c92:	4b64      	ldr	r3, [pc, #400]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3c94:	881b      	ldrh	r3, [r3, #0]
    3c96:	4203      	tst	r3, r0
    3c98:	d052      	beq.n	3d40 <xQueueSemaphoreTake+0x214>
    3c9a:	0020      	movs	r0, r4
    3c9c:	4b63      	ldr	r3, [pc, #396]	; (3e2c <xQueueSemaphoreTake+0x300>)
    3c9e:	4699      	mov	r9, r3
    3ca0:	4798      	blx	r3
    3ca2:	4f63      	ldr	r7, [pc, #396]	; (3e30 <xQueueSemaphoreTake+0x304>)
    3ca4:	5c3e      	ldrb	r6, [r7, r0]
    3ca6:	3668      	adds	r6, #104	; 0x68
    3ca8:	b2f6      	uxtb	r6, r6
    3caa:	0020      	movs	r0, r4
    3cac:	47c8      	blx	r9
    3cae:	5c3f      	ldrb	r7, [r7, r0]
    3cb0:	0020      	movs	r0, r4
    3cb2:	4b60      	ldr	r3, [pc, #384]	; (3e34 <xQueueSemaphoreTake+0x308>)
    3cb4:	4798      	blx	r3
    3cb6:	b2c2      	uxtb	r2, r0
    3cb8:	0039      	movs	r1, r7
    3cba:	0030      	movs	r0, r6
    3cbc:	4b5e      	ldr	r3, [pc, #376]	; (3e38 <xQueueSemaphoreTake+0x30c>)
    3cbe:	4798      	blx	r3
    3cc0:	e03e      	b.n	3d40 <xQueueSemaphoreTake+0x214>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3cc2:	6823      	ldr	r3, [r4, #0]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d052      	beq.n	3d6e <xQueueSemaphoreTake+0x242>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3cc8:	0020      	movs	r0, r4
    3cca:	3024      	adds	r0, #36	; 0x24
    3ccc:	9901      	ldr	r1, [sp, #4]
    3cce:	4b62      	ldr	r3, [pc, #392]	; (3e58 <xQueueSemaphoreTake+0x32c>)
    3cd0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3cd2:	0020      	movs	r0, r4
    3cd4:	4b61      	ldr	r3, [pc, #388]	; (3e5c <xQueueSemaphoreTake+0x330>)
    3cd6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    3cd8:	4b61      	ldr	r3, [pc, #388]	; (3e60 <xQueueSemaphoreTake+0x334>)
    3cda:	4798      	blx	r3
    3cdc:	2800      	cmp	r0, #0
    3cde:	d04f      	beq.n	3d80 <xQueueSemaphoreTake+0x254>
    3ce0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    3ce2:	47c0      	blx	r8
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    3ce4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    3ce6:	2e00      	cmp	r6, #0
    3ce8:	d000      	beq.n	3cec <xQueueSemaphoreTake+0x1c0>
    3cea:	e73f      	b.n	3b6c <xQueueSemaphoreTake+0x40>
				if( xTicksToWait == ( TickType_t ) 0 )
    3cec:	9b01      	ldr	r3, [sp, #4]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d097      	beq.n	3c22 <xQueueSemaphoreTake+0xf6>
				else if( xEntryTimeSet == pdFALSE )
    3cf2:	2f00      	cmp	r7, #0
    3cf4:	d0be      	beq.n	3c74 <xQueueSemaphoreTake+0x148>
		taskEXIT_CRITICAL();
    3cf6:	4b56      	ldr	r3, [pc, #344]	; (3e50 <xQueueSemaphoreTake+0x324>)
    3cf8:	4798      	blx	r3
		vTaskSuspendAll();
    3cfa:	4b5a      	ldr	r3, [pc, #360]	; (3e64 <xQueueSemaphoreTake+0x338>)
    3cfc:	4798      	blx	r3
		prvLockQueue( pxQueue );
    3cfe:	4b46      	ldr	r3, [pc, #280]	; (3e18 <xQueueSemaphoreTake+0x2ec>)
    3d00:	4798      	blx	r3
    3d02:	2344      	movs	r3, #68	; 0x44
    3d04:	5ce3      	ldrb	r3, [r4, r3]
    3d06:	b25b      	sxtb	r3, r3
    3d08:	3301      	adds	r3, #1
    3d0a:	d0b7      	beq.n	3c7c <xQueueSemaphoreTake+0x150>
    3d0c:	2345      	movs	r3, #69	; 0x45
    3d0e:	5ce3      	ldrb	r3, [r4, r3]
    3d10:	b25b      	sxtb	r3, r3
    3d12:	3301      	adds	r3, #1
    3d14:	d0b6      	beq.n	3c84 <xQueueSemaphoreTake+0x158>
    3d16:	4b4e      	ldr	r3, [pc, #312]	; (3e50 <xQueueSemaphoreTake+0x324>)
    3d18:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3d1a:	a901      	add	r1, sp, #4
    3d1c:	a802      	add	r0, sp, #8
    3d1e:	4b52      	ldr	r3, [pc, #328]	; (3e68 <xQueueSemaphoreTake+0x33c>)
    3d20:	4798      	blx	r3
    3d22:	2800      	cmp	r0, #0
    3d24:	d135      	bne.n	3d92 <xQueueSemaphoreTake+0x266>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3d26:	0020      	movs	r0, r4
    3d28:	4b50      	ldr	r3, [pc, #320]	; (3e6c <xQueueSemaphoreTake+0x340>)
    3d2a:	4798      	blx	r3
    3d2c:	2800      	cmp	r0, #0
    3d2e:	d02a      	beq.n	3d86 <xQueueSemaphoreTake+0x25a>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    3d30:	4b3a      	ldr	r3, [pc, #232]	; (3e1c <xQueueSemaphoreTake+0x2f0>)
    3d32:	4798      	blx	r3
    3d34:	4b3a      	ldr	r3, [pc, #232]	; (3e20 <xQueueSemaphoreTake+0x2f4>)
    3d36:	4798      	blx	r3
    3d38:	4b3a      	ldr	r3, [pc, #232]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3d3a:	881b      	ldrh	r3, [r3, #0]
    3d3c:	4203      	tst	r3, r0
    3d3e:	d1a5      	bne.n	3c8c <xQueueSemaphoreTake+0x160>
    3d40:	0020      	movs	r0, r4
    3d42:	4b3a      	ldr	r3, [pc, #232]	; (3e2c <xQueueSemaphoreTake+0x300>)
    3d44:	4798      	blx	r3
    3d46:	4b3a      	ldr	r3, [pc, #232]	; (3e30 <xQueueSemaphoreTake+0x304>)
    3d48:	5c1b      	ldrb	r3, [r3, r0]
    3d4a:	2b02      	cmp	r3, #2
    3d4c:	d0b9      	beq.n	3cc2 <xQueueSemaphoreTake+0x196>
    3d4e:	4b33      	ldr	r3, [pc, #204]	; (3e1c <xQueueSemaphoreTake+0x2f0>)
    3d50:	4798      	blx	r3
    3d52:	4b33      	ldr	r3, [pc, #204]	; (3e20 <xQueueSemaphoreTake+0x2f4>)
    3d54:	4798      	blx	r3
    3d56:	4b33      	ldr	r3, [pc, #204]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3d58:	881b      	ldrh	r3, [r3, #0]
    3d5a:	4203      	tst	r3, r0
    3d5c:	d0b1      	beq.n	3cc2 <xQueueSemaphoreTake+0x196>
    3d5e:	4b2f      	ldr	r3, [pc, #188]	; (3e1c <xQueueSemaphoreTake+0x2f0>)
    3d60:	4798      	blx	r3
    3d62:	4b36      	ldr	r3, [pc, #216]	; (3e3c <xQueueSemaphoreTake+0x310>)
    3d64:	4798      	blx	r3
    3d66:	b2c0      	uxtb	r0, r0
    3d68:	4b41      	ldr	r3, [pc, #260]	; (3e70 <xQueueSemaphoreTake+0x344>)
    3d6a:	4798      	blx	r3
    3d6c:	e7a9      	b.n	3cc2 <xQueueSemaphoreTake+0x196>
						taskENTER_CRITICAL();
    3d6e:	4b2a      	ldr	r3, [pc, #168]	; (3e18 <xQueueSemaphoreTake+0x2ec>)
    3d70:	4798      	blx	r3
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3d72:	6860      	ldr	r0, [r4, #4]
    3d74:	4b3f      	ldr	r3, [pc, #252]	; (3e74 <xQueueSemaphoreTake+0x348>)
    3d76:	4798      	blx	r3
    3d78:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    3d7a:	4b35      	ldr	r3, [pc, #212]	; (3e50 <xQueueSemaphoreTake+0x324>)
    3d7c:	4798      	blx	r3
    3d7e:	e7a3      	b.n	3cc8 <xQueueSemaphoreTake+0x19c>
					portYIELD_WITHIN_API();
    3d80:	4b32      	ldr	r3, [pc, #200]	; (3e4c <xQueueSemaphoreTake+0x320>)
    3d82:	4798      	blx	r3
    3d84:	e7ac      	b.n	3ce0 <xQueueSemaphoreTake+0x1b4>
				prvUnlockQueue( pxQueue );
    3d86:	0020      	movs	r0, r4
    3d88:	4b34      	ldr	r3, [pc, #208]	; (3e5c <xQueueSemaphoreTake+0x330>)
    3d8a:	4798      	blx	r3
				( void ) xTaskResumeAll();
    3d8c:	4b34      	ldr	r3, [pc, #208]	; (3e60 <xQueueSemaphoreTake+0x334>)
    3d8e:	4798      	blx	r3
    3d90:	e7a6      	b.n	3ce0 <xQueueSemaphoreTake+0x1b4>
			prvUnlockQueue( pxQueue );
    3d92:	0020      	movs	r0, r4
    3d94:	4b31      	ldr	r3, [pc, #196]	; (3e5c <xQueueSemaphoreTake+0x330>)
    3d96:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3d98:	4b31      	ldr	r3, [pc, #196]	; (3e60 <xQueueSemaphoreTake+0x334>)
    3d9a:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3d9c:	0020      	movs	r0, r4
    3d9e:	4b33      	ldr	r3, [pc, #204]	; (3e6c <xQueueSemaphoreTake+0x340>)
    3da0:	4798      	blx	r3
    3da2:	2800      	cmp	r0, #0
    3da4:	d09c      	beq.n	3ce0 <xQueueSemaphoreTake+0x1b4>
					if( xInheritanceOccurred != pdFALSE )
    3da6:	2d00      	cmp	r5, #0
    3da8:	d00e      	beq.n	3dc8 <xQueueSemaphoreTake+0x29c>
						taskENTER_CRITICAL();
    3daa:	4b1b      	ldr	r3, [pc, #108]	; (3e18 <xQueueSemaphoreTake+0x2ec>)
    3dac:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    3dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    3db0:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    3db2:	2b00      	cmp	r3, #0
    3db4:	d003      	beq.n	3dbe <xQueueSemaphoreTake+0x292>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    3db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	3105      	adds	r1, #5
    3dbc:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    3dbe:	6860      	ldr	r0, [r4, #4]
    3dc0:	4b2d      	ldr	r3, [pc, #180]	; (3e78 <xQueueSemaphoreTake+0x34c>)
    3dc2:	4798      	blx	r3
						taskEXIT_CRITICAL();
    3dc4:	4b22      	ldr	r3, [pc, #136]	; (3e50 <xQueueSemaphoreTake+0x324>)
    3dc6:	4798      	blx	r3
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    3dc8:	4b14      	ldr	r3, [pc, #80]	; (3e1c <xQueueSemaphoreTake+0x2f0>)
    3dca:	4798      	blx	r3
    3dcc:	4b14      	ldr	r3, [pc, #80]	; (3e20 <xQueueSemaphoreTake+0x2f4>)
    3dce:	4798      	blx	r3
    3dd0:	4b14      	ldr	r3, [pc, #80]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3dd2:	881b      	ldrh	r3, [r3, #0]
				return errQUEUE_EMPTY;
    3dd4:	2500      	movs	r5, #0
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    3dd6:	4203      	tst	r3, r0
    3dd8:	d100      	bne.n	3ddc <xQueueSemaphoreTake+0x2b0>
    3dda:	e718      	b.n	3c0e <xQueueSemaphoreTake+0xe2>
    3ddc:	0020      	movs	r0, r4
    3dde:	4b12      	ldr	r3, [pc, #72]	; (3e28 <xQueueSemaphoreTake+0x2fc>)
    3de0:	4798      	blx	r3
    3de2:	4b10      	ldr	r3, [pc, #64]	; (3e24 <xQueueSemaphoreTake+0x2f8>)
    3de4:	881b      	ldrh	r3, [r3, #0]
    3de6:	4203      	tst	r3, r0
    3de8:	d100      	bne.n	3dec <xQueueSemaphoreTake+0x2c0>
    3dea:	e710      	b.n	3c0e <xQueueSemaphoreTake+0xe2>
    3dec:	0020      	movs	r0, r4
    3dee:	4f0f      	ldr	r7, [pc, #60]	; (3e2c <xQueueSemaphoreTake+0x300>)
    3df0:	47b8      	blx	r7
    3df2:	4e0f      	ldr	r6, [pc, #60]	; (3e30 <xQueueSemaphoreTake+0x304>)
    3df4:	5c35      	ldrb	r5, [r6, r0]
    3df6:	3550      	adds	r5, #80	; 0x50
    3df8:	b2ed      	uxtb	r5, r5
    3dfa:	0020      	movs	r0, r4
    3dfc:	47b8      	blx	r7
    3dfe:	5c36      	ldrb	r6, [r6, r0]
    3e00:	0020      	movs	r0, r4
    3e02:	4b0c      	ldr	r3, [pc, #48]	; (3e34 <xQueueSemaphoreTake+0x308>)
    3e04:	4798      	blx	r3
    3e06:	b2c2      	uxtb	r2, r0
    3e08:	0031      	movs	r1, r6
    3e0a:	0028      	movs	r0, r5
    3e0c:	4b0a      	ldr	r3, [pc, #40]	; (3e38 <xQueueSemaphoreTake+0x30c>)
    3e0e:	4798      	blx	r3
				return errQUEUE_EMPTY;
    3e10:	2500      	movs	r5, #0
    3e12:	e6fc      	b.n	3c0e <xQueueSemaphoreTake+0xe2>
    3e14:	00004af5 	.word	0x00004af5
    3e18:	00002bd1 	.word	0x00002bd1
    3e1c:	00001a1d 	.word	0x00001a1d
    3e20:	00001965 	.word	0x00001965
    3e24:	20000020 	.word	0x20000020
    3e28:	000019c9 	.word	0x000019c9
    3e2c:	00001949 	.word	0x00001949
    3e30:	20000018 	.word	0x20000018
    3e34:	000019b9 	.word	0x000019b9
    3e38:	00002655 	.word	0x00002655
    3e3c:	00001955 	.word	0x00001955
    3e40:	00002129 	.word	0x00002129
    3e44:	00004e25 	.word	0x00004e25
    3e48:	0000498d 	.word	0x0000498d
    3e4c:	00002bc1 	.word	0x00002bc1
    3e50:	00002be9 	.word	0x00002be9
    3e54:	00004a41 	.word	0x00004a41
    3e58:	000048c5 	.word	0x000048c5
    3e5c:	00002f1d 	.word	0x00002f1d
    3e60:	000044dd 	.word	0x000044dd
    3e64:	00004335 	.word	0x00004335
    3e68:	00004a59 	.word	0x00004a59
    3e6c:	00002d41 	.word	0x00002d41
    3e70:	00002181 	.word	0x00002181
    3e74:	00004b15 	.word	0x00004b15
    3e78:	00004d21 	.word	0x00004d21

00003e7c <uxQueueGetQueueNumber>:
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    3e7c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	}
    3e7e:	4770      	bx	lr

00003e80 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    3e80:	64c1      	str	r1, [r0, #76]	; 0x4c
	}
    3e82:	4770      	bx	lr

00003e84 <ucQueueGetQueueType>:
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    3e84:	2350      	movs	r3, #80	; 0x50
    3e86:	5cc0      	ldrb	r0, [r0, r3]
	}
    3e88:	4770      	bx	lr
	...

00003e8c <vQueueWaitForMessageRestricted>:
	{
    3e8c:	b570      	push	{r4, r5, r6, lr}
    3e8e:	0004      	movs	r4, r0
    3e90:	000d      	movs	r5, r1
    3e92:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    3e94:	4b11      	ldr	r3, [pc, #68]	; (3edc <vQueueWaitForMessageRestricted+0x50>)
    3e96:	4798      	blx	r3
    3e98:	2344      	movs	r3, #68	; 0x44
    3e9a:	5ce3      	ldrb	r3, [r4, r3]
    3e9c:	b25b      	sxtb	r3, r3
    3e9e:	3301      	adds	r3, #1
    3ea0:	d00d      	beq.n	3ebe <vQueueWaitForMessageRestricted+0x32>
    3ea2:	2345      	movs	r3, #69	; 0x45
    3ea4:	5ce3      	ldrb	r3, [r4, r3]
    3ea6:	b25b      	sxtb	r3, r3
    3ea8:	3301      	adds	r3, #1
    3eaa:	d00c      	beq.n	3ec6 <vQueueWaitForMessageRestricted+0x3a>
    3eac:	4b0c      	ldr	r3, [pc, #48]	; (3ee0 <vQueueWaitForMessageRestricted+0x54>)
    3eae:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    3eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d00b      	beq.n	3ece <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    3eb6:	0020      	movs	r0, r4
    3eb8:	4b0a      	ldr	r3, [pc, #40]	; (3ee4 <vQueueWaitForMessageRestricted+0x58>)
    3eba:	4798      	blx	r3
	}
    3ebc:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    3ebe:	2200      	movs	r2, #0
    3ec0:	2344      	movs	r3, #68	; 0x44
    3ec2:	54e2      	strb	r2, [r4, r3]
    3ec4:	e7ed      	b.n	3ea2 <vQueueWaitForMessageRestricted+0x16>
    3ec6:	2200      	movs	r2, #0
    3ec8:	2345      	movs	r3, #69	; 0x45
    3eca:	54e2      	strb	r2, [r4, r3]
    3ecc:	e7ee      	b.n	3eac <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    3ece:	0020      	movs	r0, r4
    3ed0:	3024      	adds	r0, #36	; 0x24
    3ed2:	0032      	movs	r2, r6
    3ed4:	0029      	movs	r1, r5
    3ed6:	4b04      	ldr	r3, [pc, #16]	; (3ee8 <vQueueWaitForMessageRestricted+0x5c>)
    3ed8:	4798      	blx	r3
    3eda:	e7ec      	b.n	3eb6 <vQueueWaitForMessageRestricted+0x2a>
    3edc:	00002bd1 	.word	0x00002bd1
    3ee0:	00002be9 	.word	0x00002be9
    3ee4:	00002f1d 	.word	0x00002f1d
    3ee8:	000048f1 	.word	0x000048f1

00003eec <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3eec:	4b08      	ldr	r3, [pc, #32]	; (3f10 <prvResetNextTaskUnblockTime+0x24>)
    3eee:	681b      	ldr	r3, [r3, #0]
    3ef0:	681b      	ldr	r3, [r3, #0]
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d007      	beq.n	3f06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3ef6:	4b06      	ldr	r3, [pc, #24]	; (3f10 <prvResetNextTaskUnblockTime+0x24>)
    3ef8:	681b      	ldr	r3, [r3, #0]
    3efa:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    3efc:	68db      	ldr	r3, [r3, #12]
    3efe:	685a      	ldr	r2, [r3, #4]
    3f00:	4b04      	ldr	r3, [pc, #16]	; (3f14 <prvResetNextTaskUnblockTime+0x28>)
    3f02:	601a      	str	r2, [r3, #0]
	}
}
    3f04:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    3f06:	2201      	movs	r2, #1
    3f08:	4252      	negs	r2, r2
    3f0a:	4b02      	ldr	r3, [pc, #8]	; (3f14 <prvResetNextTaskUnblockTime+0x28>)
    3f0c:	601a      	str	r2, [r3, #0]
    3f0e:	e7f9      	b.n	3f04 <prvResetNextTaskUnblockTime+0x18>
    3f10:	200036c0 	.word	0x200036c0
    3f14:	20003770 	.word	0x20003770

00003f18 <prvIdleTask>:
{
    3f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1a:	46d6      	mov	lr, sl
    3f1c:	464f      	mov	r7, r9
    3f1e:	4646      	mov	r6, r8
    3f20:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3f22:	4b14      	ldr	r3, [pc, #80]	; (3f74 <prvIdleTask+0x5c>)
    3f24:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    3f26:	4b14      	ldr	r3, [pc, #80]	; (3f78 <prvIdleTask+0x60>)
    3f28:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3f2a:	4f14      	ldr	r7, [pc, #80]	; (3f7c <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3f2c:	4b14      	ldr	r3, [pc, #80]	; (3f80 <prvIdleTask+0x68>)
    3f2e:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3f30:	464b      	mov	r3, r9
    3f32:	681b      	ldr	r3, [r3, #0]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d016      	beq.n	3f66 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    3f38:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3f3a:	68fb      	ldr	r3, [r7, #12]
    3f3c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3f3e:	1d28      	adds	r0, r5, #4
    3f40:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    3f42:	4a10      	ldr	r2, [pc, #64]	; (3f84 <prvIdleTask+0x6c>)
    3f44:	6813      	ldr	r3, [r2, #0]
    3f46:	3b01      	subs	r3, #1
    3f48:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    3f4a:	4c0a      	ldr	r4, [pc, #40]	; (3f74 <prvIdleTask+0x5c>)
    3f4c:	6823      	ldr	r3, [r4, #0]
    3f4e:	3b01      	subs	r3, #1
    3f50:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    3f52:	4b0d      	ldr	r3, [pc, #52]	; (3f88 <prvIdleTask+0x70>)
    3f54:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    3f56:	6b28      	ldr	r0, [r5, #48]	; 0x30
    3f58:	4e0c      	ldr	r6, [pc, #48]	; (3f8c <prvIdleTask+0x74>)
    3f5a:	47b0      	blx	r6
			vPortFree( pxTCB );
    3f5c:	0028      	movs	r0, r5
    3f5e:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3f60:	6823      	ldr	r3, [r4, #0]
    3f62:	2b00      	cmp	r3, #0
    3f64:	d1e8      	bne.n	3f38 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3f66:	4b0a      	ldr	r3, [pc, #40]	; (3f90 <prvIdleTask+0x78>)
    3f68:	681b      	ldr	r3, [r3, #0]
    3f6a:	2b01      	cmp	r3, #1
    3f6c:	d9e0      	bls.n	3f30 <prvIdleTask+0x18>
				taskYIELD();
    3f6e:	4b09      	ldr	r3, [pc, #36]	; (3f94 <prvIdleTask+0x7c>)
    3f70:	4798      	blx	r3
    3f72:	e7dd      	b.n	3f30 <prvIdleTask+0x18>
    3f74:	20003730 	.word	0x20003730
    3f78:	00002bd1 	.word	0x00002bd1
    3f7c:	200037a4 	.word	0x200037a4
    3f80:	00002a9b 	.word	0x00002a9b
    3f84:	2000372c 	.word	0x2000372c
    3f88:	00002be9 	.word	0x00002be9
    3f8c:	00002d25 	.word	0x00002d25
    3f90:	200036c8 	.word	0x200036c8
    3f94:	00002bc1 	.word	0x00002bc1

00003f98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3f98:	b570      	push	{r4, r5, r6, lr}
    3f9a:	0004      	movs	r4, r0
    3f9c:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3f9e:	4b17      	ldr	r3, [pc, #92]	; (3ffc <prvAddCurrentTaskToDelayedList+0x64>)
    3fa0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3fa2:	4b17      	ldr	r3, [pc, #92]	; (4000 <prvAddCurrentTaskToDelayedList+0x68>)
    3fa4:	6818      	ldr	r0, [r3, #0]
    3fa6:	3004      	adds	r0, #4
    3fa8:	4b16      	ldr	r3, [pc, #88]	; (4004 <prvAddCurrentTaskToDelayedList+0x6c>)
    3faa:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3fac:	1c63      	adds	r3, r4, #1
    3fae:	d013      	beq.n	3fd8 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    3fb0:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3fb2:	4b13      	ldr	r3, [pc, #76]	; (4000 <prvAddCurrentTaskToDelayedList+0x68>)
    3fb4:	681b      	ldr	r3, [r3, #0]
    3fb6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    3fb8:	42a6      	cmp	r6, r4
    3fba:	d816      	bhi.n	3fea <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3fbc:	4b12      	ldr	r3, [pc, #72]	; (4008 <prvAddCurrentTaskToDelayedList+0x70>)
    3fbe:	6818      	ldr	r0, [r3, #0]
    3fc0:	4b0f      	ldr	r3, [pc, #60]	; (4000 <prvAddCurrentTaskToDelayedList+0x68>)
    3fc2:	6819      	ldr	r1, [r3, #0]
    3fc4:	3104      	adds	r1, #4
    3fc6:	4b11      	ldr	r3, [pc, #68]	; (400c <prvAddCurrentTaskToDelayedList+0x74>)
    3fc8:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    3fca:	4b11      	ldr	r3, [pc, #68]	; (4010 <prvAddCurrentTaskToDelayedList+0x78>)
    3fcc:	681b      	ldr	r3, [r3, #0]
    3fce:	429c      	cmp	r4, r3
    3fd0:	d212      	bcs.n	3ff8 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    3fd2:	4b0f      	ldr	r3, [pc, #60]	; (4010 <prvAddCurrentTaskToDelayedList+0x78>)
    3fd4:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3fd6:	e00f      	b.n	3ff8 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3fd8:	2d00      	cmp	r5, #0
    3fda:	d0e9      	beq.n	3fb0 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3fdc:	4b08      	ldr	r3, [pc, #32]	; (4000 <prvAddCurrentTaskToDelayedList+0x68>)
    3fde:	6819      	ldr	r1, [r3, #0]
    3fe0:	3104      	adds	r1, #4
    3fe2:	480c      	ldr	r0, [pc, #48]	; (4014 <prvAddCurrentTaskToDelayedList+0x7c>)
    3fe4:	4b0c      	ldr	r3, [pc, #48]	; (4018 <prvAddCurrentTaskToDelayedList+0x80>)
    3fe6:	4798      	blx	r3
    3fe8:	e006      	b.n	3ff8 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3fea:	4b0c      	ldr	r3, [pc, #48]	; (401c <prvAddCurrentTaskToDelayedList+0x84>)
    3fec:	6818      	ldr	r0, [r3, #0]
    3fee:	4b04      	ldr	r3, [pc, #16]	; (4000 <prvAddCurrentTaskToDelayedList+0x68>)
    3ff0:	6819      	ldr	r1, [r3, #0]
    3ff2:	3104      	adds	r1, #4
    3ff4:	4b05      	ldr	r3, [pc, #20]	; (400c <prvAddCurrentTaskToDelayedList+0x74>)
    3ff6:	4798      	blx	r3
}
    3ff8:	bd70      	pop	{r4, r5, r6, pc}
    3ffa:	46c0      	nop			; (mov r8, r8)
    3ffc:	200037b8 	.word	0x200037b8
    4000:	200036bc 	.word	0x200036bc
    4004:	00002a9b 	.word	0x00002a9b
    4008:	200036c0 	.word	0x200036c0
    400c:	00002a6d 	.word	0x00002a6d
    4010:	20003770 	.word	0x20003770
    4014:	20003790 	.word	0x20003790
    4018:	00002a55 	.word	0x00002a55
    401c:	200036c4 	.word	0x200036c4

00004020 <xTaskCreate>:
	{
    4020:	b5f0      	push	{r4, r5, r6, r7, lr}
    4022:	46c6      	mov	lr, r8
    4024:	b500      	push	{lr}
    4026:	b084      	sub	sp, #16
    4028:	9001      	str	r0, [sp, #4]
    402a:	000d      	movs	r5, r1
    402c:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    402e:	0097      	lsls	r7, r2, #2
    4030:	0038      	movs	r0, r7
    4032:	4b81      	ldr	r3, [pc, #516]	; (4238 <xTaskCreate+0x218>)
    4034:	4798      	blx	r3
    4036:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    4038:	d100      	bne.n	403c <xTaskCreate+0x1c>
    403a:	e0b6      	b.n	41aa <xTaskCreate+0x18a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    403c:	2054      	movs	r0, #84	; 0x54
    403e:	4b7e      	ldr	r3, [pc, #504]	; (4238 <xTaskCreate+0x218>)
    4040:	4798      	blx	r3
    4042:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    4044:	d100      	bne.n	4048 <xTaskCreate+0x28>
    4046:	e0ad      	b.n	41a4 <xTaskCreate+0x184>
					pxNewTCB->pxStack = pxStack;
    4048:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    404a:	003a      	movs	r2, r7
    404c:	21a5      	movs	r1, #165	; 0xa5
    404e:	0030      	movs	r0, r6
    4050:	4b7a      	ldr	r3, [pc, #488]	; (423c <xTaskCreate+0x21c>)
    4052:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    4054:	1f3a      	subs	r2, r7, #4
    4056:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4058:	469c      	mov	ip, r3
    405a:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    405c:	2307      	movs	r3, #7
    405e:	439a      	bics	r2, r3
    4060:	4690      	mov	r8, r2
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4062:	782a      	ldrb	r2, [r5, #0]
    4064:	332d      	adds	r3, #45	; 0x2d
    4066:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    4068:	782b      	ldrb	r3, [r5, #0]
    406a:	2b00      	cmp	r3, #0
    406c:	d00d      	beq.n	408a <xTaskCreate+0x6a>
    406e:	3501      	adds	r5, #1
    4070:	0023      	movs	r3, r4
    4072:	3335      	adds	r3, #53	; 0x35
    4074:	0020      	movs	r0, r4
    4076:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    4078:	782a      	ldrb	r2, [r5, #0]
    407a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    407c:	782a      	ldrb	r2, [r5, #0]
    407e:	2a00      	cmp	r2, #0
    4080:	d003      	beq.n	408a <xTaskCreate+0x6a>
    4082:	3501      	adds	r5, #1
    4084:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    4086:	4283      	cmp	r3, r0
    4088:	d1f6      	bne.n	4078 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    408a:	2200      	movs	r2, #0
    408c:	233b      	movs	r3, #59	; 0x3b
    408e:	54e2      	strb	r2, [r4, r3]
    4090:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    4092:	2f04      	cmp	r7, #4
    4094:	d900      	bls.n	4098 <xTaskCreate+0x78>
    4096:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    4098:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    409a:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    409c:	2600      	movs	r6, #0
    409e:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    40a0:	1d23      	adds	r3, r4, #4
    40a2:	9303      	str	r3, [sp, #12]
    40a4:	0018      	movs	r0, r3
    40a6:	4d66      	ldr	r5, [pc, #408]	; (4240 <xTaskCreate+0x220>)
    40a8:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    40aa:	0020      	movs	r0, r4
    40ac:	3018      	adds	r0, #24
    40ae:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    40b0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    40b2:	2305      	movs	r3, #5
    40b4:	1bdb      	subs	r3, r3, r7
    40b6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    40b8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    40ba:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    40bc:	2350      	movs	r3, #80	; 0x50
    40be:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    40c0:	9a02      	ldr	r2, [sp, #8]
    40c2:	9901      	ldr	r1, [sp, #4]
    40c4:	4640      	mov	r0, r8
    40c6:	4b5f      	ldr	r3, [pc, #380]	; (4244 <xTaskCreate+0x224>)
    40c8:	4798      	blx	r3
    40ca:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    40cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40ce:	2b00      	cmp	r3, #0
    40d0:	d000      	beq.n	40d4 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    40d2:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    40d4:	4b5c      	ldr	r3, [pc, #368]	; (4248 <xTaskCreate+0x228>)
    40d6:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    40d8:	4a5c      	ldr	r2, [pc, #368]	; (424c <xTaskCreate+0x22c>)
    40da:	6813      	ldr	r3, [r2, #0]
    40dc:	3301      	adds	r3, #1
    40de:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    40e0:	4b5b      	ldr	r3, [pc, #364]	; (4250 <xTaskCreate+0x230>)
    40e2:	681b      	ldr	r3, [r3, #0]
    40e4:	2b00      	cmp	r3, #0
    40e6:	d063      	beq.n	41b0 <xTaskCreate+0x190>
			if( xSchedulerRunning == pdFALSE )
    40e8:	4b5a      	ldr	r3, [pc, #360]	; (4254 <xTaskCreate+0x234>)
    40ea:	681b      	ldr	r3, [r3, #0]
    40ec:	2b00      	cmp	r3, #0
    40ee:	d107      	bne.n	4100 <xTaskCreate+0xe0>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    40f0:	4b57      	ldr	r3, [pc, #348]	; (4250 <xTaskCreate+0x230>)
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    40f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    40f8:	4293      	cmp	r3, r2
    40fa:	d801      	bhi.n	4100 <xTaskCreate+0xe0>
					pxCurrentTCB = pxNewTCB;
    40fc:	4b54      	ldr	r3, [pc, #336]	; (4250 <xTaskCreate+0x230>)
    40fe:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    4100:	4a55      	ldr	r2, [pc, #340]	; (4258 <xTaskCreate+0x238>)
    4102:	6813      	ldr	r3, [r2, #0]
    4104:	3301      	adds	r3, #1
    4106:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    4108:	63e3      	str	r3, [r4, #60]	; 0x3c
		traceTASK_CREATE( pxNewTCB );
    410a:	2003      	movs	r0, #3
    410c:	4b53      	ldr	r3, [pc, #332]	; (425c <xTaskCreate+0x23c>)
    410e:	4798      	blx	r3
    4110:	b281      	uxth	r1, r0
    4112:	0020      	movs	r0, r4
    4114:	4b52      	ldr	r3, [pc, #328]	; (4260 <xTaskCreate+0x240>)
    4116:	4798      	blx	r3
    4118:	4b52      	ldr	r3, [pc, #328]	; (4264 <xTaskCreate+0x244>)
    411a:	8819      	ldrh	r1, [r3, #0]
    411c:	0020      	movs	r0, r4
    411e:	4b52      	ldr	r3, [pc, #328]	; (4268 <xTaskCreate+0x248>)
    4120:	4798      	blx	r3
    4122:	0020      	movs	r0, r4
    4124:	4e51      	ldr	r6, [pc, #324]	; (426c <xTaskCreate+0x24c>)
    4126:	47b0      	blx	r6
    4128:	0022      	movs	r2, r4
    412a:	3234      	adds	r2, #52	; 0x34
    412c:	b2c1      	uxtb	r1, r0
    412e:	2003      	movs	r0, #3
    4130:	4b4f      	ldr	r3, [pc, #316]	; (4270 <xTaskCreate+0x250>)
    4132:	4798      	blx	r3
    4134:	0020      	movs	r0, r4
    4136:	47b0      	blx	r6
    4138:	232c      	movs	r3, #44	; 0x2c
    413a:	18e3      	adds	r3, r4, r3
    413c:	781a      	ldrb	r2, [r3, #0]
    413e:	b2c1      	uxtb	r1, r0
    4140:	2003      	movs	r0, #3
    4142:	4b4c      	ldr	r3, [pc, #304]	; (4274 <xTaskCreate+0x254>)
    4144:	4798      	blx	r3
    4146:	4b4c      	ldr	r3, [pc, #304]	; (4278 <xTaskCreate+0x258>)
    4148:	4798      	blx	r3
    414a:	4b4c      	ldr	r3, [pc, #304]	; (427c <xTaskCreate+0x25c>)
    414c:	4798      	blx	r3
    414e:	4b4c      	ldr	r3, [pc, #304]	; (4280 <xTaskCreate+0x260>)
    4150:	881b      	ldrh	r3, [r3, #0]
    4152:	4203      	tst	r3, r0
    4154:	d154      	bne.n	4200 <xTaskCreate+0x1e0>
		prvAddTaskToReadyList( pxNewTCB );
    4156:	0020      	movs	r0, r4
    4158:	4b48      	ldr	r3, [pc, #288]	; (427c <xTaskCreate+0x25c>)
    415a:	4798      	blx	r3
    415c:	4b48      	ldr	r3, [pc, #288]	; (4280 <xTaskCreate+0x260>)
    415e:	881b      	ldrh	r3, [r3, #0]
    4160:	4203      	tst	r3, r0
    4162:	d15d      	bne.n	4220 <xTaskCreate+0x200>
    4164:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4166:	4a47      	ldr	r2, [pc, #284]	; (4284 <xTaskCreate+0x264>)
    4168:	6812      	ldr	r2, [r2, #0]
    416a:	4293      	cmp	r3, r2
    416c:	d901      	bls.n	4172 <xTaskCreate+0x152>
    416e:	4a45      	ldr	r2, [pc, #276]	; (4284 <xTaskCreate+0x264>)
    4170:	6013      	str	r3, [r2, #0]
    4172:	0098      	lsls	r0, r3, #2
    4174:	18c0      	adds	r0, r0, r3
    4176:	0080      	lsls	r0, r0, #2
    4178:	4b43      	ldr	r3, [pc, #268]	; (4288 <xTaskCreate+0x268>)
    417a:	1818      	adds	r0, r3, r0
    417c:	9903      	ldr	r1, [sp, #12]
    417e:	4b43      	ldr	r3, [pc, #268]	; (428c <xTaskCreate+0x26c>)
    4180:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4182:	4b43      	ldr	r3, [pc, #268]	; (4290 <xTaskCreate+0x270>)
    4184:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    4186:	4b33      	ldr	r3, [pc, #204]	; (4254 <xTaskCreate+0x234>)
    4188:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    418a:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    418c:	2b00      	cmp	r3, #0
    418e:	d005      	beq.n	419c <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    4190:	4b2f      	ldr	r3, [pc, #188]	; (4250 <xTaskCreate+0x230>)
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4196:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4198:	429a      	cmp	r2, r3
    419a:	d348      	bcc.n	422e <xTaskCreate+0x20e>
	}
    419c:	b004      	add	sp, #16
    419e:	bc04      	pop	{r2}
    41a0:	4690      	mov	r8, r2
    41a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    41a4:	0030      	movs	r0, r6
    41a6:	4b3b      	ldr	r3, [pc, #236]	; (4294 <xTaskCreate+0x274>)
    41a8:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    41aa:	2001      	movs	r0, #1
    41ac:	4240      	negs	r0, r0
    41ae:	e7f5      	b.n	419c <xTaskCreate+0x17c>
			pxCurrentTCB = pxNewTCB;
    41b0:	4b27      	ldr	r3, [pc, #156]	; (4250 <xTaskCreate+0x230>)
    41b2:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    41b4:	6813      	ldr	r3, [r2, #0]
    41b6:	2b01      	cmp	r3, #1
    41b8:	d1a2      	bne.n	4100 <xTaskCreate+0xe0>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    41ba:	4f33      	ldr	r7, [pc, #204]	; (4288 <xTaskCreate+0x268>)
    41bc:	0038      	movs	r0, r7
    41be:	4e36      	ldr	r6, [pc, #216]	; (4298 <xTaskCreate+0x278>)
    41c0:	47b0      	blx	r6
    41c2:	0038      	movs	r0, r7
    41c4:	3014      	adds	r0, #20
    41c6:	47b0      	blx	r6
    41c8:	0038      	movs	r0, r7
    41ca:	3028      	adds	r0, #40	; 0x28
    41cc:	47b0      	blx	r6
    41ce:	0038      	movs	r0, r7
    41d0:	303c      	adds	r0, #60	; 0x3c
    41d2:	47b0      	blx	r6
    41d4:	0038      	movs	r0, r7
    41d6:	3050      	adds	r0, #80	; 0x50
    41d8:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    41da:	4b30      	ldr	r3, [pc, #192]	; (429c <xTaskCreate+0x27c>)
    41dc:	4698      	mov	r8, r3
    41de:	0018      	movs	r0, r3
    41e0:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    41e2:	4f2f      	ldr	r7, [pc, #188]	; (42a0 <xTaskCreate+0x280>)
    41e4:	0038      	movs	r0, r7
    41e6:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    41e8:	482e      	ldr	r0, [pc, #184]	; (42a4 <xTaskCreate+0x284>)
    41ea:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    41ec:	482e      	ldr	r0, [pc, #184]	; (42a8 <xTaskCreate+0x288>)
    41ee:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    41f0:	482e      	ldr	r0, [pc, #184]	; (42ac <xTaskCreate+0x28c>)
    41f2:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    41f4:	4b2e      	ldr	r3, [pc, #184]	; (42b0 <xTaskCreate+0x290>)
    41f6:	4642      	mov	r2, r8
    41f8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    41fa:	4b2e      	ldr	r3, [pc, #184]	; (42b4 <xTaskCreate+0x294>)
    41fc:	601f      	str	r7, [r3, #0]
    41fe:	e77f      	b.n	4100 <xTaskCreate+0xe0>
		traceTASK_CREATE( pxNewTCB );
    4200:	0020      	movs	r0, r4
    4202:	4b1e      	ldr	r3, [pc, #120]	; (427c <xTaskCreate+0x25c>)
    4204:	4798      	blx	r3
    4206:	4b1e      	ldr	r3, [pc, #120]	; (4280 <xTaskCreate+0x260>)
    4208:	881b      	ldrh	r3, [r3, #0]
    420a:	4203      	tst	r3, r0
    420c:	d0a3      	beq.n	4156 <xTaskCreate+0x136>
    420e:	0020      	movs	r0, r4
    4210:	4b16      	ldr	r3, [pc, #88]	; (426c <xTaskCreate+0x24c>)
    4212:	4798      	blx	r3
    4214:	b2c2      	uxtb	r2, r0
    4216:	2103      	movs	r1, #3
    4218:	201b      	movs	r0, #27
    421a:	4b27      	ldr	r3, [pc, #156]	; (42b8 <xTaskCreate+0x298>)
    421c:	4798      	blx	r3
    421e:	e79a      	b.n	4156 <xTaskCreate+0x136>
		prvAddTaskToReadyList( pxNewTCB );
    4220:	0020      	movs	r0, r4
    4222:	4b12      	ldr	r3, [pc, #72]	; (426c <xTaskCreate+0x24c>)
    4224:	4798      	blx	r3
    4226:	b2c0      	uxtb	r0, r0
    4228:	4b24      	ldr	r3, [pc, #144]	; (42bc <xTaskCreate+0x29c>)
    422a:	4798      	blx	r3
    422c:	e79a      	b.n	4164 <xTaskCreate+0x144>
			taskYIELD_IF_USING_PREEMPTION();
    422e:	4b24      	ldr	r3, [pc, #144]	; (42c0 <xTaskCreate+0x2a0>)
    4230:	4798      	blx	r3
			xReturn = pdPASS;
    4232:	2001      	movs	r0, #1
    4234:	e7b2      	b.n	419c <xTaskCreate+0x17c>
    4236:	46c0      	nop			; (mov r8, r8)
    4238:	00002c95 	.word	0x00002c95
    423c:	00008a13 	.word	0x00008a13
    4240:	00002a4f 	.word	0x00002a4f
    4244:	00002b25 	.word	0x00002b25
    4248:	00002bd1 	.word	0x00002bd1
    424c:	2000372c 	.word	0x2000372c
    4250:	200036bc 	.word	0x200036bc
    4254:	2000378c 	.word	0x2000378c
    4258:	2000373c 	.word	0x2000373c
    425c:	000021c1 	.word	0x000021c1
    4260:	00001975 	.word	0x00001975
    4264:	2000001e 	.word	0x2000001e
    4268:	00001995 	.word	0x00001995
    426c:	00001955 	.word	0x00001955
    4270:	00002295 	.word	0x00002295
    4274:	00002075 	.word	0x00002075
    4278:	00001a1d 	.word	0x00001a1d
    427c:	00001965 	.word	0x00001965
    4280:	20000020 	.word	0x20000020
    4284:	20003740 	.word	0x20003740
    4288:	200036c8 	.word	0x200036c8
    428c:	00002a55 	.word	0x00002a55
    4290:	00002be9 	.word	0x00002be9
    4294:	00002d25 	.word	0x00002d25
    4298:	00002a39 	.word	0x00002a39
    429c:	20003744 	.word	0x20003744
    42a0:	20003758 	.word	0x20003758
    42a4:	20003778 	.word	0x20003778
    42a8:	200037a4 	.word	0x200037a4
    42ac:	20003790 	.word	0x20003790
    42b0:	200036c0 	.word	0x200036c0
    42b4:	200036c4 	.word	0x200036c4
    42b8:	00002655 	.word	0x00002655
    42bc:	000024ed 	.word	0x000024ed
    42c0:	00002bc1 	.word	0x00002bc1

000042c4 <vTaskStartScheduler>:
{
    42c4:	b510      	push	{r4, lr}
    42c6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    42c8:	4b11      	ldr	r3, [pc, #68]	; (4310 <vTaskStartScheduler+0x4c>)
    42ca:	9301      	str	r3, [sp, #4]
    42cc:	2300      	movs	r3, #0
    42ce:	9300      	str	r3, [sp, #0]
    42d0:	22fa      	movs	r2, #250	; 0xfa
    42d2:	0052      	lsls	r2, r2, #1
    42d4:	490f      	ldr	r1, [pc, #60]	; (4314 <vTaskStartScheduler+0x50>)
    42d6:	4810      	ldr	r0, [pc, #64]	; (4318 <vTaskStartScheduler+0x54>)
    42d8:	4c10      	ldr	r4, [pc, #64]	; (431c <vTaskStartScheduler+0x58>)
    42da:	47a0      	blx	r4
		if( xReturn == pdPASS )
    42dc:	2801      	cmp	r0, #1
    42de:	d003      	beq.n	42e8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    42e0:	1c43      	adds	r3, r0, #1
    42e2:	d013      	beq.n	430c <vTaskStartScheduler+0x48>
}
    42e4:	b002      	add	sp, #8
    42e6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    42e8:	4b0d      	ldr	r3, [pc, #52]	; (4320 <vTaskStartScheduler+0x5c>)
    42ea:	4798      	blx	r3
	if( xReturn == pdPASS )
    42ec:	2801      	cmp	r0, #1
    42ee:	d1f7      	bne.n	42e0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
    42f0:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    42f2:	2201      	movs	r2, #1
    42f4:	4252      	negs	r2, r2
    42f6:	4b0b      	ldr	r3, [pc, #44]	; (4324 <vTaskStartScheduler+0x60>)
    42f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    42fa:	3202      	adds	r2, #2
    42fc:	4b0a      	ldr	r3, [pc, #40]	; (4328 <vTaskStartScheduler+0x64>)
    42fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    4300:	2200      	movs	r2, #0
    4302:	4b0a      	ldr	r3, [pc, #40]	; (432c <vTaskStartScheduler+0x68>)
    4304:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    4306:	4b0a      	ldr	r3, [pc, #40]	; (4330 <vTaskStartScheduler+0x6c>)
    4308:	4798      	blx	r3
    430a:	e7eb      	b.n	42e4 <vTaskStartScheduler+0x20>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    430c:	b672      	cpsid	i
    430e:	e7fe      	b.n	430e <vTaskStartScheduler+0x4a>
    4310:	2000376c 	.word	0x2000376c
    4314:	0000a458 	.word	0x0000a458
    4318:	00003f19 	.word	0x00003f19
    431c:	00004021 	.word	0x00004021
    4320:	00004ee9 	.word	0x00004ee9
    4324:	20003770 	.word	0x20003770
    4328:	2000378c 	.word	0x2000378c
    432c:	200037b8 	.word	0x200037b8
    4330:	00002b49 	.word	0x00002b49

00004334 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    4334:	4a02      	ldr	r2, [pc, #8]	; (4340 <vTaskSuspendAll+0xc>)
    4336:	6813      	ldr	r3, [r2, #0]
    4338:	3301      	adds	r3, #1
    433a:	6013      	str	r3, [r2, #0]
}
    433c:	4770      	bx	lr
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	20003738 	.word	0x20003738

00004344 <xTaskGetTickCount>:
		xTicks = xTickCount;
    4344:	4b01      	ldr	r3, [pc, #4]	; (434c <xTaskGetTickCount+0x8>)
    4346:	6818      	ldr	r0, [r3, #0]
}
    4348:	4770      	bx	lr
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	200037b8 	.word	0x200037b8

00004350 <xTaskIncrementTick>:
{
    4350:	b5f0      	push	{r4, r5, r6, r7, lr}
    4352:	b083      	sub	sp, #12
	traceTASK_INCREMENT_TICK( xTickCount );
    4354:	4b4c      	ldr	r3, [pc, #304]	; (4488 <xTaskIncrementTick+0x138>)
    4356:	681b      	ldr	r3, [r3, #0]
    4358:	2b01      	cmp	r3, #1
    435a:	d003      	beq.n	4364 <xTaskIncrementTick+0x14>
    435c:	4b4b      	ldr	r3, [pc, #300]	; (448c <xTaskIncrementTick+0x13c>)
    435e:	681b      	ldr	r3, [r3, #0]
    4360:	2b00      	cmp	r3, #0
    4362:	d106      	bne.n	4372 <xTaskIncrementTick+0x22>
    4364:	4a4a      	ldr	r2, [pc, #296]	; (4490 <xTaskIncrementTick+0x140>)
    4366:	6813      	ldr	r3, [r2, #0]
    4368:	3301      	adds	r3, #1
    436a:	6013      	str	r3, [r2, #0]
    436c:	2000      	movs	r0, #0
    436e:	4b49      	ldr	r3, [pc, #292]	; (4494 <xTaskIncrementTick+0x144>)
    4370:	4798      	blx	r3
    4372:	4b45      	ldr	r3, [pc, #276]	; (4488 <xTaskIncrementTick+0x138>)
    4374:	681b      	ldr	r3, [r3, #0]
    4376:	2b00      	cmp	r3, #0
    4378:	d010      	beq.n	439c <xTaskIncrementTick+0x4c>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    437a:	4b43      	ldr	r3, [pc, #268]	; (4488 <xTaskIncrementTick+0x138>)
    437c:	681b      	ldr	r3, [r3, #0]
    437e:	2b00      	cmp	r3, #0
    4380:	d175      	bne.n	446e <xTaskIncrementTick+0x11e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    4382:	4b45      	ldr	r3, [pc, #276]	; (4498 <xTaskIncrementTick+0x148>)
    4384:	681e      	ldr	r6, [r3, #0]
    4386:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    4388:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    438a:	2e00      	cmp	r6, #0
    438c:	d119      	bne.n	43c2 <xTaskIncrementTick+0x72>
			taskSWITCH_DELAYED_LISTS();
    438e:	4b43      	ldr	r3, [pc, #268]	; (449c <xTaskIncrementTick+0x14c>)
    4390:	681b      	ldr	r3, [r3, #0]
    4392:	681b      	ldr	r3, [r3, #0]
    4394:	2b00      	cmp	r3, #0
    4396:	d008      	beq.n	43aa <xTaskIncrementTick+0x5a>
    4398:	b672      	cpsid	i
    439a:	e7fe      	b.n	439a <xTaskIncrementTick+0x4a>
	traceTASK_INCREMENT_TICK( xTickCount );
    439c:	4b3e      	ldr	r3, [pc, #248]	; (4498 <xTaskIncrementTick+0x148>)
    439e:	6819      	ldr	r1, [r3, #0]
    43a0:	3101      	adds	r1, #1
    43a2:	2003      	movs	r0, #3
    43a4:	4b3e      	ldr	r3, [pc, #248]	; (44a0 <xTaskIncrementTick+0x150>)
    43a6:	4798      	blx	r3
    43a8:	e7e7      	b.n	437a <xTaskIncrementTick+0x2a>
			taskSWITCH_DELAYED_LISTS();
    43aa:	4a3c      	ldr	r2, [pc, #240]	; (449c <xTaskIncrementTick+0x14c>)
    43ac:	6811      	ldr	r1, [r2, #0]
    43ae:	4b3d      	ldr	r3, [pc, #244]	; (44a4 <xTaskIncrementTick+0x154>)
    43b0:	6818      	ldr	r0, [r3, #0]
    43b2:	6010      	str	r0, [r2, #0]
    43b4:	6019      	str	r1, [r3, #0]
    43b6:	4a3c      	ldr	r2, [pc, #240]	; (44a8 <xTaskIncrementTick+0x158>)
    43b8:	6813      	ldr	r3, [r2, #0]
    43ba:	3301      	adds	r3, #1
    43bc:	6013      	str	r3, [r2, #0]
    43be:	4b3b      	ldr	r3, [pc, #236]	; (44ac <xTaskIncrementTick+0x15c>)
    43c0:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    43c2:	4b3b      	ldr	r3, [pc, #236]	; (44b0 <xTaskIncrementTick+0x160>)
    43c4:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    43c6:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    43c8:	429e      	cmp	r6, r3
    43ca:	d33a      	bcc.n	4442 <xTaskIncrementTick+0xf2>
    43cc:	2500      	movs	r5, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    43ce:	4f33      	ldr	r7, [pc, #204]	; (449c <xTaskIncrementTick+0x14c>)
    43d0:	683b      	ldr	r3, [r7, #0]
    43d2:	681b      	ldr	r3, [r3, #0]
    43d4:	2b00      	cmp	r3, #0
    43d6:	d030      	beq.n	443a <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    43d8:	4b30      	ldr	r3, [pc, #192]	; (449c <xTaskIncrementTick+0x14c>)
    43da:	681b      	ldr	r3, [r3, #0]
    43dc:	68db      	ldr	r3, [r3, #12]
    43de:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    43e0:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
    43e2:	429e      	cmp	r6, r3
    43e4:	d339      	bcc.n	445a <xTaskIncrementTick+0x10a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    43e6:	1d23      	adds	r3, r4, #4
    43e8:	9301      	str	r3, [sp, #4]
    43ea:	0018      	movs	r0, r3
    43ec:	4b31      	ldr	r3, [pc, #196]	; (44b4 <xTaskIncrementTick+0x164>)
    43ee:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    43f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    43f2:	2b00      	cmp	r3, #0
    43f4:	d003      	beq.n	43fe <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    43f6:	0020      	movs	r0, r4
    43f8:	3018      	adds	r0, #24
    43fa:	4b2e      	ldr	r3, [pc, #184]	; (44b4 <xTaskIncrementTick+0x164>)
    43fc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    43fe:	0020      	movs	r0, r4
    4400:	4b2d      	ldr	r3, [pc, #180]	; (44b8 <xTaskIncrementTick+0x168>)
    4402:	4798      	blx	r3
    4404:	4b2d      	ldr	r3, [pc, #180]	; (44bc <xTaskIncrementTick+0x16c>)
    4406:	881b      	ldrh	r3, [r3, #0]
    4408:	4203      	tst	r3, r0
    440a:	d129      	bne.n	4460 <xTaskIncrementTick+0x110>
    440c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    440e:	4a2c      	ldr	r2, [pc, #176]	; (44c0 <xTaskIncrementTick+0x170>)
    4410:	6812      	ldr	r2, [r2, #0]
    4412:	4293      	cmp	r3, r2
    4414:	d901      	bls.n	441a <xTaskIncrementTick+0xca>
    4416:	4a2a      	ldr	r2, [pc, #168]	; (44c0 <xTaskIncrementTick+0x170>)
    4418:	6013      	str	r3, [r2, #0]
    441a:	0098      	lsls	r0, r3, #2
    441c:	18c0      	adds	r0, r0, r3
    441e:	0080      	lsls	r0, r0, #2
    4420:	4b28      	ldr	r3, [pc, #160]	; (44c4 <xTaskIncrementTick+0x174>)
    4422:	1818      	adds	r0, r3, r0
    4424:	9901      	ldr	r1, [sp, #4]
    4426:	4b28      	ldr	r3, [pc, #160]	; (44c8 <xTaskIncrementTick+0x178>)
    4428:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    442a:	4b28      	ldr	r3, [pc, #160]	; (44cc <xTaskIncrementTick+0x17c>)
    442c:	681b      	ldr	r3, [r3, #0]
    442e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4432:	429a      	cmp	r2, r3
    4434:	d3cc      	bcc.n	43d0 <xTaskIncrementTick+0x80>
							xSwitchRequired = pdTRUE;
    4436:	2501      	movs	r5, #1
    4438:	e7ca      	b.n	43d0 <xTaskIncrementTick+0x80>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    443a:	2201      	movs	r2, #1
    443c:	4252      	negs	r2, r2
    443e:	4b1c      	ldr	r3, [pc, #112]	; (44b0 <xTaskIncrementTick+0x160>)
    4440:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    4442:	4b22      	ldr	r3, [pc, #136]	; (44cc <xTaskIncrementTick+0x17c>)
    4444:	681b      	ldr	r3, [r3, #0]
    4446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4448:	0093      	lsls	r3, r2, #2
    444a:	189b      	adds	r3, r3, r2
    444c:	009b      	lsls	r3, r3, #2
    444e:	4a1d      	ldr	r2, [pc, #116]	; (44c4 <xTaskIncrementTick+0x174>)
    4450:	589b      	ldr	r3, [r3, r2]
    4452:	2b01      	cmp	r3, #1
    4454:	d910      	bls.n	4478 <xTaskIncrementTick+0x128>
				xSwitchRequired = pdTRUE;
    4456:	2501      	movs	r5, #1
    4458:	e00e      	b.n	4478 <xTaskIncrementTick+0x128>
						xNextTaskUnblockTime = xItemValue;
    445a:	4a15      	ldr	r2, [pc, #84]	; (44b0 <xTaskIncrementTick+0x160>)
    445c:	6013      	str	r3, [r2, #0]
						break;
    445e:	e7f0      	b.n	4442 <xTaskIncrementTick+0xf2>
					prvAddTaskToReadyList( pxTCB );
    4460:	0020      	movs	r0, r4
    4462:	4b1b      	ldr	r3, [pc, #108]	; (44d0 <xTaskIncrementTick+0x180>)
    4464:	4798      	blx	r3
    4466:	b2c0      	uxtb	r0, r0
    4468:	4b1a      	ldr	r3, [pc, #104]	; (44d4 <xTaskIncrementTick+0x184>)
    446a:	4798      	blx	r3
    446c:	e7ce      	b.n	440c <xTaskIncrementTick+0xbc>
		++uxPendedTicks;
    446e:	4a07      	ldr	r2, [pc, #28]	; (448c <xTaskIncrementTick+0x13c>)
    4470:	6813      	ldr	r3, [r2, #0]
    4472:	3301      	adds	r3, #1
    4474:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    4476:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
    4478:	4b17      	ldr	r3, [pc, #92]	; (44d8 <xTaskIncrementTick+0x188>)
    447a:	681b      	ldr	r3, [r3, #0]
    447c:	2b00      	cmp	r3, #0
    447e:	d000      	beq.n	4482 <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
    4480:	2501      	movs	r5, #1
}
    4482:	0028      	movs	r0, r5
    4484:	b003      	add	sp, #12
    4486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4488:	20003738 	.word	0x20003738
    448c:	20003734 	.word	0x20003734
    4490:	200003e4 	.word	0x200003e4
    4494:	00002325 	.word	0x00002325
    4498:	200037b8 	.word	0x200037b8
    449c:	200036c0 	.word	0x200036c0
    44a0:	000027f1 	.word	0x000027f1
    44a4:	200036c4 	.word	0x200036c4
    44a8:	20003774 	.word	0x20003774
    44ac:	00003eed 	.word	0x00003eed
    44b0:	20003770 	.word	0x20003770
    44b4:	00002a9b 	.word	0x00002a9b
    44b8:	00001965 	.word	0x00001965
    44bc:	20000020 	.word	0x20000020
    44c0:	20003740 	.word	0x20003740
    44c4:	200036c8 	.word	0x200036c8
    44c8:	00002a55 	.word	0x00002a55
    44cc:	200036bc 	.word	0x200036bc
    44d0:	00001955 	.word	0x00001955
    44d4:	000024ed 	.word	0x000024ed
    44d8:	200037bc 	.word	0x200037bc

000044dc <xTaskResumeAll>:
{
    44dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    44de:	4b37      	ldr	r3, [pc, #220]	; (45bc <xTaskResumeAll+0xe0>)
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d101      	bne.n	44ea <xTaskResumeAll+0xe>
    44e6:	b672      	cpsid	i
    44e8:	e7fe      	b.n	44e8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    44ea:	4b35      	ldr	r3, [pc, #212]	; (45c0 <xTaskResumeAll+0xe4>)
    44ec:	4798      	blx	r3
		--uxSchedulerSuspended;
    44ee:	4b33      	ldr	r3, [pc, #204]	; (45bc <xTaskResumeAll+0xe0>)
    44f0:	681a      	ldr	r2, [r3, #0]
    44f2:	3a01      	subs	r2, #1
    44f4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    44f6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    44f8:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    44fa:	2b00      	cmp	r3, #0
    44fc:	d103      	bne.n	4506 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    44fe:	4b31      	ldr	r3, [pc, #196]	; (45c4 <xTaskResumeAll+0xe8>)
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	2b00      	cmp	r3, #0
    4504:	d136      	bne.n	4574 <xTaskResumeAll+0x98>
	taskEXIT_CRITICAL();
    4506:	4b30      	ldr	r3, [pc, #192]	; (45c8 <xTaskResumeAll+0xec>)
    4508:	4798      	blx	r3
}
    450a:	0020      	movs	r0, r4
    450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
    450e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4510:	4a2e      	ldr	r2, [pc, #184]	; (45cc <xTaskResumeAll+0xf0>)
    4512:	6812      	ldr	r2, [r2, #0]
    4514:	4293      	cmp	r3, r2
    4516:	d901      	bls.n	451c <xTaskResumeAll+0x40>
    4518:	4a2c      	ldr	r2, [pc, #176]	; (45cc <xTaskResumeAll+0xf0>)
    451a:	6013      	str	r3, [r2, #0]
    451c:	0098      	lsls	r0, r3, #2
    451e:	18c0      	adds	r0, r0, r3
    4520:	0080      	lsls	r0, r0, #2
    4522:	4b2b      	ldr	r3, [pc, #172]	; (45d0 <xTaskResumeAll+0xf4>)
    4524:	1818      	adds	r0, r3, r0
    4526:	0031      	movs	r1, r6
    4528:	4b2a      	ldr	r3, [pc, #168]	; (45d4 <xTaskResumeAll+0xf8>)
    452a:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    452c:	4b2a      	ldr	r3, [pc, #168]	; (45d8 <xTaskResumeAll+0xfc>)
    452e:	681b      	ldr	r3, [r3, #0]
    4530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4532:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4534:	429a      	cmp	r2, r3
    4536:	d302      	bcc.n	453e <xTaskResumeAll+0x62>
						xYieldPending = pdTRUE;
    4538:	2201      	movs	r2, #1
    453a:	4b28      	ldr	r3, [pc, #160]	; (45dc <xTaskResumeAll+0x100>)
    453c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    453e:	682b      	ldr	r3, [r5, #0]
    4540:	2b00      	cmp	r3, #0
    4542:	d01a      	beq.n	457a <xTaskResumeAll+0x9e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4544:	68fb      	ldr	r3, [r7, #12]
    4546:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    4548:	0020      	movs	r0, r4
    454a:	3018      	adds	r0, #24
    454c:	4b24      	ldr	r3, [pc, #144]	; (45e0 <xTaskResumeAll+0x104>)
    454e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    4550:	1d26      	adds	r6, r4, #4
    4552:	0030      	movs	r0, r6
    4554:	4b22      	ldr	r3, [pc, #136]	; (45e0 <xTaskResumeAll+0x104>)
    4556:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    4558:	0020      	movs	r0, r4
    455a:	4b22      	ldr	r3, [pc, #136]	; (45e4 <xTaskResumeAll+0x108>)
    455c:	4798      	blx	r3
    455e:	4b22      	ldr	r3, [pc, #136]	; (45e8 <xTaskResumeAll+0x10c>)
    4560:	881b      	ldrh	r3, [r3, #0]
    4562:	4203      	tst	r3, r0
    4564:	d0d3      	beq.n	450e <xTaskResumeAll+0x32>
    4566:	0020      	movs	r0, r4
    4568:	4b20      	ldr	r3, [pc, #128]	; (45ec <xTaskResumeAll+0x110>)
    456a:	4798      	blx	r3
    456c:	b2c0      	uxtb	r0, r0
    456e:	4b20      	ldr	r3, [pc, #128]	; (45f0 <xTaskResumeAll+0x114>)
    4570:	4798      	blx	r3
    4572:	e7cc      	b.n	450e <xTaskResumeAll+0x32>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    4574:	4d1f      	ldr	r5, [pc, #124]	; (45f4 <xTaskResumeAll+0x118>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    4576:	002f      	movs	r7, r5
    4578:	e7e1      	b.n	453e <xTaskResumeAll+0x62>
				if( pxTCB != NULL )
    457a:	2c00      	cmp	r4, #0
    457c:	d001      	beq.n	4582 <xTaskResumeAll+0xa6>
					prvResetNextTaskUnblockTime();
    457e:	4b1e      	ldr	r3, [pc, #120]	; (45f8 <xTaskResumeAll+0x11c>)
    4580:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4582:	4b1e      	ldr	r3, [pc, #120]	; (45fc <xTaskResumeAll+0x120>)
    4584:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    4586:	2c00      	cmp	r4, #0
    4588:	d00e      	beq.n	45a8 <xTaskResumeAll+0xcc>
							if( xTaskIncrementTick() != pdFALSE )
    458a:	4f1d      	ldr	r7, [pc, #116]	; (4600 <xTaskResumeAll+0x124>)
								xYieldPending = pdTRUE;
    458c:	4e13      	ldr	r6, [pc, #76]	; (45dc <xTaskResumeAll+0x100>)
    458e:	2501      	movs	r5, #1
    4590:	e002      	b.n	4598 <xTaskResumeAll+0xbc>
							--uxPendedCounts;
    4592:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    4594:	2c00      	cmp	r4, #0
    4596:	d004      	beq.n	45a2 <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
    4598:	47b8      	blx	r7
    459a:	2800      	cmp	r0, #0
    459c:	d0f9      	beq.n	4592 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
    459e:	6035      	str	r5, [r6, #0]
    45a0:	e7f7      	b.n	4592 <xTaskResumeAll+0xb6>
						uxPendedTicks = 0;
    45a2:	2200      	movs	r2, #0
    45a4:	4b15      	ldr	r3, [pc, #84]	; (45fc <xTaskResumeAll+0x120>)
    45a6:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    45a8:	4b0c      	ldr	r3, [pc, #48]	; (45dc <xTaskResumeAll+0x100>)
    45aa:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    45ac:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    45ae:	2b00      	cmp	r3, #0
    45b0:	d0a9      	beq.n	4506 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    45b2:	4b14      	ldr	r3, [pc, #80]	; (4604 <xTaskResumeAll+0x128>)
    45b4:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    45b6:	3401      	adds	r4, #1
    45b8:	e7a5      	b.n	4506 <xTaskResumeAll+0x2a>
    45ba:	46c0      	nop			; (mov r8, r8)
    45bc:	20003738 	.word	0x20003738
    45c0:	00002bd1 	.word	0x00002bd1
    45c4:	2000372c 	.word	0x2000372c
    45c8:	00002be9 	.word	0x00002be9
    45cc:	20003740 	.word	0x20003740
    45d0:	200036c8 	.word	0x200036c8
    45d4:	00002a55 	.word	0x00002a55
    45d8:	200036bc 	.word	0x200036bc
    45dc:	200037bc 	.word	0x200037bc
    45e0:	00002a9b 	.word	0x00002a9b
    45e4:	00001965 	.word	0x00001965
    45e8:	20000020 	.word	0x20000020
    45ec:	00001955 	.word	0x00001955
    45f0:	000024ed 	.word	0x000024ed
    45f4:	20003778 	.word	0x20003778
    45f8:	00003eed 	.word	0x00003eed
    45fc:	20003734 	.word	0x20003734
    4600:	00004351 	.word	0x00004351
    4604:	00002bc1 	.word	0x00002bc1

00004608 <vTaskDelay>:
	{
    4608:	b510      	push	{r4, lr}
    460a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    460c:	d031      	beq.n	4672 <vTaskDelay+0x6a>
			configASSERT( uxSchedulerSuspended == 0 );
    460e:	4b1a      	ldr	r3, [pc, #104]	; (4678 <vTaskDelay+0x70>)
    4610:	681b      	ldr	r3, [r3, #0]
    4612:	2b00      	cmp	r3, #0
    4614:	d001      	beq.n	461a <vTaskDelay+0x12>
    4616:	b672      	cpsid	i
    4618:	e7fe      	b.n	4618 <vTaskDelay+0x10>
			vTaskSuspendAll();
    461a:	4b18      	ldr	r3, [pc, #96]	; (467c <vTaskDelay+0x74>)
    461c:	4798      	blx	r3
				traceTASK_DELAY();
    461e:	4b18      	ldr	r3, [pc, #96]	; (4680 <vTaskDelay+0x78>)
    4620:	6818      	ldr	r0, [r3, #0]
    4622:	4b18      	ldr	r3, [pc, #96]	; (4684 <vTaskDelay+0x7c>)
    4624:	4798      	blx	r3
    4626:	4b18      	ldr	r3, [pc, #96]	; (4688 <vTaskDelay+0x80>)
    4628:	881b      	ldrh	r3, [r3, #0]
    462a:	4203      	tst	r3, r0
    462c:	d00a      	beq.n	4644 <vTaskDelay+0x3c>
    462e:	0021      	movs	r1, r4
    4630:	2089      	movs	r0, #137	; 0x89
    4632:	4b16      	ldr	r3, [pc, #88]	; (468c <vTaskDelay+0x84>)
    4634:	4798      	blx	r3
    4636:	4b12      	ldr	r3, [pc, #72]	; (4680 <vTaskDelay+0x78>)
    4638:	6818      	ldr	r0, [r3, #0]
    463a:	4b15      	ldr	r3, [pc, #84]	; (4690 <vTaskDelay+0x88>)
    463c:	4798      	blx	r3
    463e:	b2c0      	uxtb	r0, r0
    4640:	4b14      	ldr	r3, [pc, #80]	; (4694 <vTaskDelay+0x8c>)
    4642:	4798      	blx	r3
    4644:	4b14      	ldr	r3, [pc, #80]	; (4698 <vTaskDelay+0x90>)
    4646:	4798      	blx	r3
    4648:	4b0e      	ldr	r3, [pc, #56]	; (4684 <vTaskDelay+0x7c>)
    464a:	4798      	blx	r3
    464c:	4b0e      	ldr	r3, [pc, #56]	; (4688 <vTaskDelay+0x80>)
    464e:	881b      	ldrh	r3, [r3, #0]
    4650:	4203      	tst	r3, r0
    4652:	d006      	beq.n	4662 <vTaskDelay+0x5a>
    4654:	4b10      	ldr	r3, [pc, #64]	; (4698 <vTaskDelay+0x90>)
    4656:	4798      	blx	r3
    4658:	4b0d      	ldr	r3, [pc, #52]	; (4690 <vTaskDelay+0x88>)
    465a:	4798      	blx	r3
    465c:	b2c0      	uxtb	r0, r0
    465e:	4b0d      	ldr	r3, [pc, #52]	; (4694 <vTaskDelay+0x8c>)
    4660:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    4662:	2100      	movs	r1, #0
    4664:	0020      	movs	r0, r4
    4666:	4b0d      	ldr	r3, [pc, #52]	; (469c <vTaskDelay+0x94>)
    4668:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    466a:	4b0d      	ldr	r3, [pc, #52]	; (46a0 <vTaskDelay+0x98>)
    466c:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    466e:	2800      	cmp	r0, #0
    4670:	d101      	bne.n	4676 <vTaskDelay+0x6e>
			portYIELD_WITHIN_API();
    4672:	4b0c      	ldr	r3, [pc, #48]	; (46a4 <vTaskDelay+0x9c>)
    4674:	4798      	blx	r3
	}
    4676:	bd10      	pop	{r4, pc}
    4678:	20003738 	.word	0x20003738
    467c:	00004335 	.word	0x00004335
    4680:	200036bc 	.word	0x200036bc
    4684:	00001965 	.word	0x00001965
    4688:	20000020 	.word	0x20000020
    468c:	000027f1 	.word	0x000027f1
    4690:	00001955 	.word	0x00001955
    4694:	00002181 	.word	0x00002181
    4698:	00001a1d 	.word	0x00001a1d
    469c:	00003f99 	.word	0x00003f99
    46a0:	000044dd 	.word	0x000044dd
    46a4:	00002bc1 	.word	0x00002bc1

000046a8 <vTaskSwitchContext>:
{
    46a8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    46aa:	4b33      	ldr	r3, [pc, #204]	; (4778 <vTaskSwitchContext+0xd0>)
    46ac:	681b      	ldr	r3, [r3, #0]
    46ae:	2b00      	cmp	r3, #0
    46b0:	d125      	bne.n	46fe <vTaskSwitchContext+0x56>
		xYieldPending = pdFALSE;
    46b2:	2200      	movs	r2, #0
    46b4:	4b31      	ldr	r3, [pc, #196]	; (477c <vTaskSwitchContext+0xd4>)
    46b6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    46b8:	4b31      	ldr	r3, [pc, #196]	; (4780 <vTaskSwitchContext+0xd8>)
    46ba:	681a      	ldr	r2, [r3, #0]
    46bc:	681b      	ldr	r3, [r3, #0]
    46be:	6812      	ldr	r2, [r2, #0]
    46c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    46c2:	429a      	cmp	r2, r3
    46c4:	d805      	bhi.n	46d2 <vTaskSwitchContext+0x2a>
    46c6:	4b2e      	ldr	r3, [pc, #184]	; (4780 <vTaskSwitchContext+0xd8>)
    46c8:	6818      	ldr	r0, [r3, #0]
    46ca:	6819      	ldr	r1, [r3, #0]
    46cc:	3134      	adds	r1, #52	; 0x34
    46ce:	4b2d      	ldr	r3, [pc, #180]	; (4784 <vTaskSwitchContext+0xdc>)
    46d0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    46d2:	4b2d      	ldr	r3, [pc, #180]	; (4788 <vTaskSwitchContext+0xe0>)
    46d4:	681b      	ldr	r3, [r3, #0]
    46d6:	009a      	lsls	r2, r3, #2
    46d8:	18d2      	adds	r2, r2, r3
    46da:	0092      	lsls	r2, r2, #2
    46dc:	492b      	ldr	r1, [pc, #172]	; (478c <vTaskSwitchContext+0xe4>)
    46de:	5852      	ldr	r2, [r2, r1]
    46e0:	2a00      	cmp	r2, #0
    46e2:	d110      	bne.n	4706 <vTaskSwitchContext+0x5e>
    46e4:	2b00      	cmp	r3, #0
    46e6:	d008      	beq.n	46fa <vTaskSwitchContext+0x52>
    46e8:	3b01      	subs	r3, #1
    46ea:	009a      	lsls	r2, r3, #2
    46ec:	18d2      	adds	r2, r2, r3
    46ee:	0092      	lsls	r2, r2, #2
    46f0:	5852      	ldr	r2, [r2, r1]
    46f2:	2a00      	cmp	r2, #0
    46f4:	d107      	bne.n	4706 <vTaskSwitchContext+0x5e>
    46f6:	2b00      	cmp	r3, #0
    46f8:	d1f6      	bne.n	46e8 <vTaskSwitchContext+0x40>
    46fa:	b672      	cpsid	i
    46fc:	e7fe      	b.n	46fc <vTaskSwitchContext+0x54>
		xYieldPending = pdTRUE;
    46fe:	2201      	movs	r2, #1
    4700:	4b1e      	ldr	r3, [pc, #120]	; (477c <vTaskSwitchContext+0xd4>)
    4702:	601a      	str	r2, [r3, #0]
}
    4704:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4706:	4821      	ldr	r0, [pc, #132]	; (478c <vTaskSwitchContext+0xe4>)
    4708:	009a      	lsls	r2, r3, #2
    470a:	18d1      	adds	r1, r2, r3
    470c:	0089      	lsls	r1, r1, #2
    470e:	1841      	adds	r1, r0, r1
    4710:	684c      	ldr	r4, [r1, #4]
    4712:	6864      	ldr	r4, [r4, #4]
    4714:	604c      	str	r4, [r1, #4]
    4716:	18d2      	adds	r2, r2, r3
    4718:	0092      	lsls	r2, r2, #2
    471a:	3208      	adds	r2, #8
    471c:	1882      	adds	r2, r0, r2
    471e:	4294      	cmp	r4, r2
    4720:	d019      	beq.n	4756 <vTaskSwitchContext+0xae>
    4722:	009a      	lsls	r2, r3, #2
    4724:	18d2      	adds	r2, r2, r3
    4726:	0092      	lsls	r2, r2, #2
    4728:	4918      	ldr	r1, [pc, #96]	; (478c <vTaskSwitchContext+0xe4>)
    472a:	188a      	adds	r2, r1, r2
    472c:	6852      	ldr	r2, [r2, #4]
    472e:	68d1      	ldr	r1, [r2, #12]
    4730:	4a13      	ldr	r2, [pc, #76]	; (4780 <vTaskSwitchContext+0xd8>)
    4732:	6011      	str	r1, [r2, #0]
    4734:	4a14      	ldr	r2, [pc, #80]	; (4788 <vTaskSwitchContext+0xe0>)
    4736:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
    4738:	2201      	movs	r2, #1
    473a:	4b15      	ldr	r3, [pc, #84]	; (4790 <vTaskSwitchContext+0xe8>)
    473c:	601a      	str	r2, [r3, #0]
    473e:	4b15      	ldr	r3, [pc, #84]	; (4794 <vTaskSwitchContext+0xec>)
    4740:	4798      	blx	r3
    4742:	4b15      	ldr	r3, [pc, #84]	; (4798 <vTaskSwitchContext+0xf0>)
    4744:	4798      	blx	r3
    4746:	4b15      	ldr	r3, [pc, #84]	; (479c <vTaskSwitchContext+0xf4>)
    4748:	881b      	ldrh	r3, [r3, #0]
    474a:	4203      	tst	r3, r0
    474c:	d10b      	bne.n	4766 <vTaskSwitchContext+0xbe>
    474e:	2202      	movs	r2, #2
    4750:	4b0f      	ldr	r3, [pc, #60]	; (4790 <vTaskSwitchContext+0xe8>)
    4752:	601a      	str	r2, [r3, #0]
}
    4754:	e7d6      	b.n	4704 <vTaskSwitchContext+0x5c>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4756:	6860      	ldr	r0, [r4, #4]
    4758:	009a      	lsls	r2, r3, #2
    475a:	18d2      	adds	r2, r2, r3
    475c:	0092      	lsls	r2, r2, #2
    475e:	490b      	ldr	r1, [pc, #44]	; (478c <vTaskSwitchContext+0xe4>)
    4760:	188a      	adds	r2, r1, r2
    4762:	6050      	str	r0, [r2, #4]
    4764:	e7dd      	b.n	4722 <vTaskSwitchContext+0x7a>
		traceTASK_SWITCHED_IN();
    4766:	4b0b      	ldr	r3, [pc, #44]	; (4794 <vTaskSwitchContext+0xec>)
    4768:	4798      	blx	r3
    476a:	4b0d      	ldr	r3, [pc, #52]	; (47a0 <vTaskSwitchContext+0xf8>)
    476c:	4798      	blx	r3
    476e:	b2c0      	uxtb	r0, r0
    4770:	4b0c      	ldr	r3, [pc, #48]	; (47a4 <vTaskSwitchContext+0xfc>)
    4772:	4798      	blx	r3
    4774:	e7eb      	b.n	474e <vTaskSwitchContext+0xa6>
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	20003738 	.word	0x20003738
    477c:	200037bc 	.word	0x200037bc
    4780:	200036bc 	.word	0x200036bc
    4784:	00006c3d 	.word	0x00006c3d
    4788:	20003740 	.word	0x20003740
    478c:	200036c8 	.word	0x200036c8
    4790:	200003e0 	.word	0x200003e0
    4794:	00001a1d 	.word	0x00001a1d
    4798:	00001965 	.word	0x00001965
    479c:	20000020 	.word	0x20000020
    47a0:	00001955 	.word	0x00001955
    47a4:	00002899 	.word	0x00002899

000047a8 <vTaskSuspend>:
	{
    47a8:	b570      	push	{r4, r5, r6, lr}
    47aa:	0005      	movs	r5, r0
		taskENTER_CRITICAL();
    47ac:	4b33      	ldr	r3, [pc, #204]	; (487c <vTaskSuspend+0xd4>)
    47ae:	4798      	blx	r3
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    47b0:	1e2c      	subs	r4, r5, #0
    47b2:	d02b      	beq.n	480c <vTaskSuspend+0x64>
			traceTASK_SUSPEND( pxTCB );
    47b4:	4b32      	ldr	r3, [pc, #200]	; (4880 <vTaskSuspend+0xd8>)
    47b6:	4798      	blx	r3
    47b8:	4b32      	ldr	r3, [pc, #200]	; (4884 <vTaskSuspend+0xdc>)
    47ba:	4798      	blx	r3
    47bc:	4b32      	ldr	r3, [pc, #200]	; (4888 <vTaskSuspend+0xe0>)
    47be:	881b      	ldrh	r3, [r3, #0]
    47c0:	4203      	tst	r3, r0
    47c2:	d126      	bne.n	4812 <vTaskSuspend+0x6a>
    47c4:	0020      	movs	r0, r4
    47c6:	4b31      	ldr	r3, [pc, #196]	; (488c <vTaskSuspend+0xe4>)
    47c8:	4798      	blx	r3
    47ca:	b2c0      	uxtb	r0, r0
    47cc:	4b30      	ldr	r3, [pc, #192]	; (4890 <vTaskSuspend+0xe8>)
    47ce:	4798      	blx	r3
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    47d0:	1d25      	adds	r5, r4, #4
    47d2:	0028      	movs	r0, r5
    47d4:	4b2f      	ldr	r3, [pc, #188]	; (4894 <vTaskSuspend+0xec>)
    47d6:	4798      	blx	r3
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    47d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    47da:	2b00      	cmp	r3, #0
    47dc:	d003      	beq.n	47e6 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    47de:	0020      	movs	r0, r4
    47e0:	3018      	adds	r0, #24
    47e2:	4b2c      	ldr	r3, [pc, #176]	; (4894 <vTaskSuspend+0xec>)
    47e4:	4798      	blx	r3
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    47e6:	0029      	movs	r1, r5
    47e8:	482b      	ldr	r0, [pc, #172]	; (4898 <vTaskSuspend+0xf0>)
    47ea:	4b2c      	ldr	r3, [pc, #176]	; (489c <vTaskSuspend+0xf4>)
    47ec:	4798      	blx	r3
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    47ee:	2350      	movs	r3, #80	; 0x50
    47f0:	5ce3      	ldrb	r3, [r4, r3]
    47f2:	2b01      	cmp	r3, #1
    47f4:	d01d      	beq.n	4832 <vTaskSuspend+0x8a>
		taskEXIT_CRITICAL();
    47f6:	4b2a      	ldr	r3, [pc, #168]	; (48a0 <vTaskSuspend+0xf8>)
    47f8:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
    47fa:	4b2a      	ldr	r3, [pc, #168]	; (48a4 <vTaskSuspend+0xfc>)
    47fc:	681b      	ldr	r3, [r3, #0]
    47fe:	2b00      	cmp	r3, #0
    4800:	d11b      	bne.n	483a <vTaskSuspend+0x92>
		if( pxTCB == pxCurrentTCB )
    4802:	4b29      	ldr	r3, [pc, #164]	; (48a8 <vTaskSuspend+0x100>)
    4804:	681b      	ldr	r3, [r3, #0]
    4806:	429c      	cmp	r4, r3
    4808:	d01e      	beq.n	4848 <vTaskSuspend+0xa0>
	}
    480a:	bd70      	pop	{r4, r5, r6, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    480c:	4b26      	ldr	r3, [pc, #152]	; (48a8 <vTaskSuspend+0x100>)
    480e:	681c      	ldr	r4, [r3, #0]
    4810:	e7d0      	b.n	47b4 <vTaskSuspend+0xc>
			traceTASK_SUSPEND( pxTCB );
    4812:	0020      	movs	r0, r4
    4814:	4b1b      	ldr	r3, [pc, #108]	; (4884 <vTaskSuspend+0xdc>)
    4816:	4798      	blx	r3
    4818:	4b1b      	ldr	r3, [pc, #108]	; (4888 <vTaskSuspend+0xe0>)
    481a:	881b      	ldrh	r3, [r3, #0]
    481c:	4203      	tst	r3, r0
    481e:	d0d1      	beq.n	47c4 <vTaskSuspend+0x1c>
    4820:	0020      	movs	r0, r4
    4822:	4b1a      	ldr	r3, [pc, #104]	; (488c <vTaskSuspend+0xe4>)
    4824:	4798      	blx	r3
    4826:	b2c2      	uxtb	r2, r0
    4828:	2103      	movs	r1, #3
    482a:	208a      	movs	r0, #138	; 0x8a
    482c:	4b1f      	ldr	r3, [pc, #124]	; (48ac <vTaskSuspend+0x104>)
    482e:	4798      	blx	r3
    4830:	e7c8      	b.n	47c4 <vTaskSuspend+0x1c>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4832:	2200      	movs	r2, #0
    4834:	334f      	adds	r3, #79	; 0x4f
    4836:	54e2      	strb	r2, [r4, r3]
    4838:	e7dd      	b.n	47f6 <vTaskSuspend+0x4e>
			taskENTER_CRITICAL();
    483a:	4b10      	ldr	r3, [pc, #64]	; (487c <vTaskSuspend+0xd4>)
    483c:	4798      	blx	r3
				prvResetNextTaskUnblockTime();
    483e:	4b1c      	ldr	r3, [pc, #112]	; (48b0 <vTaskSuspend+0x108>)
    4840:	4798      	blx	r3
			taskEXIT_CRITICAL();
    4842:	4b17      	ldr	r3, [pc, #92]	; (48a0 <vTaskSuspend+0xf8>)
    4844:	4798      	blx	r3
    4846:	e7dc      	b.n	4802 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
    4848:	4b16      	ldr	r3, [pc, #88]	; (48a4 <vTaskSuspend+0xfc>)
    484a:	681b      	ldr	r3, [r3, #0]
    484c:	2b00      	cmp	r3, #0
    484e:	d008      	beq.n	4862 <vTaskSuspend+0xba>
				configASSERT( uxSchedulerSuspended == 0 );
    4850:	4b18      	ldr	r3, [pc, #96]	; (48b4 <vTaskSuspend+0x10c>)
    4852:	681b      	ldr	r3, [r3, #0]
    4854:	2b00      	cmp	r3, #0
    4856:	d001      	beq.n	485c <vTaskSuspend+0xb4>
    4858:	b672      	cpsid	i
    485a:	e7fe      	b.n	485a <vTaskSuspend+0xb2>
				portYIELD_WITHIN_API();
    485c:	4b16      	ldr	r3, [pc, #88]	; (48b8 <vTaskSuspend+0x110>)
    485e:	4798      	blx	r3
    4860:	e7d3      	b.n	480a <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4862:	4b0d      	ldr	r3, [pc, #52]	; (4898 <vTaskSuspend+0xf0>)
    4864:	681a      	ldr	r2, [r3, #0]
    4866:	4b15      	ldr	r3, [pc, #84]	; (48bc <vTaskSuspend+0x114>)
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	429a      	cmp	r2, r3
    486c:	d002      	beq.n	4874 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
    486e:	4b14      	ldr	r3, [pc, #80]	; (48c0 <vTaskSuspend+0x118>)
    4870:	4798      	blx	r3
	}
    4872:	e7ca      	b.n	480a <vTaskSuspend+0x62>
					pxCurrentTCB = NULL;
    4874:	2200      	movs	r2, #0
    4876:	4b0c      	ldr	r3, [pc, #48]	; (48a8 <vTaskSuspend+0x100>)
    4878:	601a      	str	r2, [r3, #0]
    487a:	e7c6      	b.n	480a <vTaskSuspend+0x62>
    487c:	00002bd1 	.word	0x00002bd1
    4880:	00001a1d 	.word	0x00001a1d
    4884:	00001965 	.word	0x00001965
    4888:	20000020 	.word	0x20000020
    488c:	00001955 	.word	0x00001955
    4890:	00002181 	.word	0x00002181
    4894:	00002a9b 	.word	0x00002a9b
    4898:	20003790 	.word	0x20003790
    489c:	00002a55 	.word	0x00002a55
    48a0:	00002be9 	.word	0x00002be9
    48a4:	2000378c 	.word	0x2000378c
    48a8:	200036bc 	.word	0x200036bc
    48ac:	00002655 	.word	0x00002655
    48b0:	00003eed 	.word	0x00003eed
    48b4:	20003738 	.word	0x20003738
    48b8:	00002bc1 	.word	0x00002bc1
    48bc:	2000372c 	.word	0x2000372c
    48c0:	000046a9 	.word	0x000046a9

000048c4 <vTaskPlaceOnEventList>:
{
    48c4:	b510      	push	{r4, lr}
    48c6:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    48c8:	2800      	cmp	r0, #0
    48ca:	d101      	bne.n	48d0 <vTaskPlaceOnEventList+0xc>
    48cc:	b672      	cpsid	i
    48ce:	e7fe      	b.n	48ce <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    48d0:	4b04      	ldr	r3, [pc, #16]	; (48e4 <vTaskPlaceOnEventList+0x20>)
    48d2:	6819      	ldr	r1, [r3, #0]
    48d4:	3118      	adds	r1, #24
    48d6:	4b04      	ldr	r3, [pc, #16]	; (48e8 <vTaskPlaceOnEventList+0x24>)
    48d8:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    48da:	2101      	movs	r1, #1
    48dc:	0020      	movs	r0, r4
    48de:	4b03      	ldr	r3, [pc, #12]	; (48ec <vTaskPlaceOnEventList+0x28>)
    48e0:	4798      	blx	r3
}
    48e2:	bd10      	pop	{r4, pc}
    48e4:	200036bc 	.word	0x200036bc
    48e8:	00002a6d 	.word	0x00002a6d
    48ec:	00003f99 	.word	0x00003f99

000048f0 <vTaskPlaceOnEventListRestricted>:
	{
    48f0:	b570      	push	{r4, r5, r6, lr}
    48f2:	000c      	movs	r4, r1
    48f4:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    48f6:	2800      	cmp	r0, #0
    48f8:	d031      	beq.n	495e <vTaskPlaceOnEventListRestricted+0x6e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    48fa:	4b1a      	ldr	r3, [pc, #104]	; (4964 <vTaskPlaceOnEventListRestricted+0x74>)
    48fc:	6819      	ldr	r1, [r3, #0]
    48fe:	3118      	adds	r1, #24
    4900:	4b19      	ldr	r3, [pc, #100]	; (4968 <vTaskPlaceOnEventListRestricted+0x78>)
    4902:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    4904:	2d00      	cmp	r5, #0
    4906:	d001      	beq.n	490c <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    4908:	2401      	movs	r4, #1
    490a:	4264      	negs	r4, r4
		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
    490c:	4b15      	ldr	r3, [pc, #84]	; (4964 <vTaskPlaceOnEventListRestricted+0x74>)
    490e:	6818      	ldr	r0, [r3, #0]
    4910:	4b16      	ldr	r3, [pc, #88]	; (496c <vTaskPlaceOnEventListRestricted+0x7c>)
    4912:	4798      	blx	r3
    4914:	4b16      	ldr	r3, [pc, #88]	; (4970 <vTaskPlaceOnEventListRestricted+0x80>)
    4916:	881b      	ldrh	r3, [r3, #0]
    4918:	4203      	tst	r3, r0
    491a:	d00c      	beq.n	4936 <vTaskPlaceOnEventListRestricted+0x46>
    491c:	4b15      	ldr	r3, [pc, #84]	; (4974 <vTaskPlaceOnEventListRestricted+0x84>)
    491e:	6819      	ldr	r1, [r3, #0]
    4920:	1861      	adds	r1, r4, r1
    4922:	2088      	movs	r0, #136	; 0x88
    4924:	4b14      	ldr	r3, [pc, #80]	; (4978 <vTaskPlaceOnEventListRestricted+0x88>)
    4926:	4798      	blx	r3
    4928:	4b0e      	ldr	r3, [pc, #56]	; (4964 <vTaskPlaceOnEventListRestricted+0x74>)
    492a:	6818      	ldr	r0, [r3, #0]
    492c:	4b13      	ldr	r3, [pc, #76]	; (497c <vTaskPlaceOnEventListRestricted+0x8c>)
    492e:	4798      	blx	r3
    4930:	b2c0      	uxtb	r0, r0
    4932:	4b13      	ldr	r3, [pc, #76]	; (4980 <vTaskPlaceOnEventListRestricted+0x90>)
    4934:	4798      	blx	r3
    4936:	4b13      	ldr	r3, [pc, #76]	; (4984 <vTaskPlaceOnEventListRestricted+0x94>)
    4938:	4798      	blx	r3
    493a:	4b0c      	ldr	r3, [pc, #48]	; (496c <vTaskPlaceOnEventListRestricted+0x7c>)
    493c:	4798      	blx	r3
    493e:	4b0c      	ldr	r3, [pc, #48]	; (4970 <vTaskPlaceOnEventListRestricted+0x80>)
    4940:	881b      	ldrh	r3, [r3, #0]
    4942:	4203      	tst	r3, r0
    4944:	d006      	beq.n	4954 <vTaskPlaceOnEventListRestricted+0x64>
    4946:	4b0f      	ldr	r3, [pc, #60]	; (4984 <vTaskPlaceOnEventListRestricted+0x94>)
    4948:	4798      	blx	r3
    494a:	4b0c      	ldr	r3, [pc, #48]	; (497c <vTaskPlaceOnEventListRestricted+0x8c>)
    494c:	4798      	blx	r3
    494e:	b2c0      	uxtb	r0, r0
    4950:	4b0b      	ldr	r3, [pc, #44]	; (4980 <vTaskPlaceOnEventListRestricted+0x90>)
    4952:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    4954:	0029      	movs	r1, r5
    4956:	0020      	movs	r0, r4
    4958:	4b0b      	ldr	r3, [pc, #44]	; (4988 <vTaskPlaceOnEventListRestricted+0x98>)
    495a:	4798      	blx	r3
	}
    495c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    495e:	b672      	cpsid	i
    4960:	e7fe      	b.n	4960 <vTaskPlaceOnEventListRestricted+0x70>
    4962:	46c0      	nop			; (mov r8, r8)
    4964:	200036bc 	.word	0x200036bc
    4968:	00002a55 	.word	0x00002a55
    496c:	00001965 	.word	0x00001965
    4970:	20000020 	.word	0x20000020
    4974:	200037b8 	.word	0x200037b8
    4978:	000027f1 	.word	0x000027f1
    497c:	00001955 	.word	0x00001955
    4980:	00002181 	.word	0x00002181
    4984:	00001a1d 	.word	0x00001a1d
    4988:	00003f99 	.word	0x00003f99

0000498c <xTaskRemoveFromEventList>:
{
    498c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    498e:	68c3      	ldr	r3, [r0, #12]
    4990:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    4992:	2c00      	cmp	r4, #0
    4994:	d02e      	beq.n	49f4 <xTaskRemoveFromEventList+0x68>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4996:	0025      	movs	r5, r4
    4998:	3518      	adds	r5, #24
    499a:	0028      	movs	r0, r5
    499c:	4b1c      	ldr	r3, [pc, #112]	; (4a10 <xTaskRemoveFromEventList+0x84>)
    499e:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    49a0:	4b1c      	ldr	r3, [pc, #112]	; (4a14 <xTaskRemoveFromEventList+0x88>)
    49a2:	681b      	ldr	r3, [r3, #0]
    49a4:	2b00      	cmp	r3, #0
    49a6:	d12e      	bne.n	4a06 <xTaskRemoveFromEventList+0x7a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    49a8:	1d25      	adds	r5, r4, #4
    49aa:	0028      	movs	r0, r5
    49ac:	4b18      	ldr	r3, [pc, #96]	; (4a10 <xTaskRemoveFromEventList+0x84>)
    49ae:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    49b0:	0020      	movs	r0, r4
    49b2:	4b19      	ldr	r3, [pc, #100]	; (4a18 <xTaskRemoveFromEventList+0x8c>)
    49b4:	4798      	blx	r3
    49b6:	4b19      	ldr	r3, [pc, #100]	; (4a1c <xTaskRemoveFromEventList+0x90>)
    49b8:	881b      	ldrh	r3, [r3, #0]
    49ba:	4203      	tst	r3, r0
    49bc:	d11c      	bne.n	49f8 <xTaskRemoveFromEventList+0x6c>
    49be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    49c0:	4a17      	ldr	r2, [pc, #92]	; (4a20 <xTaskRemoveFromEventList+0x94>)
    49c2:	6812      	ldr	r2, [r2, #0]
    49c4:	4293      	cmp	r3, r2
    49c6:	d901      	bls.n	49cc <xTaskRemoveFromEventList+0x40>
    49c8:	4a15      	ldr	r2, [pc, #84]	; (4a20 <xTaskRemoveFromEventList+0x94>)
    49ca:	6013      	str	r3, [r2, #0]
    49cc:	0098      	lsls	r0, r3, #2
    49ce:	18c0      	adds	r0, r0, r3
    49d0:	0080      	lsls	r0, r0, #2
    49d2:	4b14      	ldr	r3, [pc, #80]	; (4a24 <xTaskRemoveFromEventList+0x98>)
    49d4:	1818      	adds	r0, r3, r0
    49d6:	0029      	movs	r1, r5
    49d8:	4b13      	ldr	r3, [pc, #76]	; (4a28 <xTaskRemoveFromEventList+0x9c>)
    49da:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    49dc:	4b13      	ldr	r3, [pc, #76]	; (4a2c <xTaskRemoveFromEventList+0xa0>)
    49de:	681b      	ldr	r3, [r3, #0]
    49e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    49e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    49e4:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    49e6:	429a      	cmp	r2, r3
    49e8:	d903      	bls.n	49f2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
    49ea:	2201      	movs	r2, #1
    49ec:	4b10      	ldr	r3, [pc, #64]	; (4a30 <xTaskRemoveFromEventList+0xa4>)
    49ee:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    49f0:	3001      	adds	r0, #1
}
    49f2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    49f4:	b672      	cpsid	i
    49f6:	e7fe      	b.n	49f6 <xTaskRemoveFromEventList+0x6a>
		prvAddTaskToReadyList( pxUnblockedTCB );
    49f8:	0020      	movs	r0, r4
    49fa:	4b0e      	ldr	r3, [pc, #56]	; (4a34 <xTaskRemoveFromEventList+0xa8>)
    49fc:	4798      	blx	r3
    49fe:	b2c0      	uxtb	r0, r0
    4a00:	4b0d      	ldr	r3, [pc, #52]	; (4a38 <xTaskRemoveFromEventList+0xac>)
    4a02:	4798      	blx	r3
    4a04:	e7db      	b.n	49be <xTaskRemoveFromEventList+0x32>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4a06:	0029      	movs	r1, r5
    4a08:	480c      	ldr	r0, [pc, #48]	; (4a3c <xTaskRemoveFromEventList+0xb0>)
    4a0a:	4b07      	ldr	r3, [pc, #28]	; (4a28 <xTaskRemoveFromEventList+0x9c>)
    4a0c:	4798      	blx	r3
    4a0e:	e7e5      	b.n	49dc <xTaskRemoveFromEventList+0x50>
    4a10:	00002a9b 	.word	0x00002a9b
    4a14:	20003738 	.word	0x20003738
    4a18:	00001965 	.word	0x00001965
    4a1c:	20000020 	.word	0x20000020
    4a20:	20003740 	.word	0x20003740
    4a24:	200036c8 	.word	0x200036c8
    4a28:	00002a55 	.word	0x00002a55
    4a2c:	200036bc 	.word	0x200036bc
    4a30:	200037bc 	.word	0x200037bc
    4a34:	00001955 	.word	0x00001955
    4a38:	000024ed 	.word	0x000024ed
    4a3c:	20003778 	.word	0x20003778

00004a40 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4a40:	4b03      	ldr	r3, [pc, #12]	; (4a50 <vTaskInternalSetTimeOutState+0x10>)
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4a46:	4b03      	ldr	r3, [pc, #12]	; (4a54 <vTaskInternalSetTimeOutState+0x14>)
    4a48:	681b      	ldr	r3, [r3, #0]
    4a4a:	6043      	str	r3, [r0, #4]
}
    4a4c:	4770      	bx	lr
    4a4e:	46c0      	nop			; (mov r8, r8)
    4a50:	20003774 	.word	0x20003774
    4a54:	200037b8 	.word	0x200037b8

00004a58 <xTaskCheckForTimeOut>:
{
    4a58:	b570      	push	{r4, r5, r6, lr}
    4a5a:	0006      	movs	r6, r0
    4a5c:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    4a5e:	2800      	cmp	r0, #0
    4a60:	d01b      	beq.n	4a9a <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    4a62:	2900      	cmp	r1, #0
    4a64:	d01b      	beq.n	4a9e <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    4a66:	4b13      	ldr	r3, [pc, #76]	; (4ab4 <xTaskCheckForTimeOut+0x5c>)
    4a68:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4a6a:	4b13      	ldr	r3, [pc, #76]	; (4ab8 <xTaskCheckForTimeOut+0x60>)
    4a6c:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4a6e:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    4a70:	682b      	ldr	r3, [r5, #0]
    4a72:	1c58      	adds	r0, r3, #1
    4a74:	d01c      	beq.n	4ab0 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4a76:	4811      	ldr	r0, [pc, #68]	; (4abc <xTaskCheckForTimeOut+0x64>)
    4a78:	6800      	ldr	r0, [r0, #0]
    4a7a:	6834      	ldr	r4, [r6, #0]
    4a7c:	4284      	cmp	r4, r0
    4a7e:	d002      	beq.n	4a86 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    4a80:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    4a82:	428a      	cmp	r2, r1
    4a84:	d205      	bcs.n	4a92 <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4a86:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    4a88:	429a      	cmp	r2, r3
    4a8a:	d30a      	bcc.n	4aa2 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    4a8c:	2300      	movs	r3, #0
    4a8e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    4a90:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    4a92:	4b0b      	ldr	r3, [pc, #44]	; (4ac0 <xTaskCheckForTimeOut+0x68>)
    4a94:	4798      	blx	r3
}
    4a96:	0020      	movs	r0, r4
    4a98:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    4a9a:	b672      	cpsid	i
    4a9c:	e7fe      	b.n	4a9c <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    4a9e:	b672      	cpsid	i
    4aa0:	e7fe      	b.n	4aa0 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    4aa2:	1a9b      	subs	r3, r3, r2
    4aa4:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    4aa6:	0030      	movs	r0, r6
    4aa8:	4b06      	ldr	r3, [pc, #24]	; (4ac4 <xTaskCheckForTimeOut+0x6c>)
    4aaa:	4798      	blx	r3
			xReturn = pdFALSE;
    4aac:	2400      	movs	r4, #0
    4aae:	e7f0      	b.n	4a92 <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    4ab0:	2400      	movs	r4, #0
    4ab2:	e7ee      	b.n	4a92 <xTaskCheckForTimeOut+0x3a>
    4ab4:	00002bd1 	.word	0x00002bd1
    4ab8:	200037b8 	.word	0x200037b8
    4abc:	20003774 	.word	0x20003774
    4ac0:	00002be9 	.word	0x00002be9
    4ac4:	00004a41 	.word	0x00004a41

00004ac8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4ac8:	2201      	movs	r2, #1
    4aca:	4b01      	ldr	r3, [pc, #4]	; (4ad0 <vTaskMissedYield+0x8>)
    4acc:	601a      	str	r2, [r3, #0]
}
    4ace:	4770      	bx	lr
    4ad0:	200037bc 	.word	0x200037bc

00004ad4 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
    4ad4:	2800      	cmp	r0, #0
    4ad6:	d001      	beq.n	4adc <uxTaskGetTaskNumber+0x8>
			uxReturn = pxTCB->uxTaskNumber;
    4ad8:	6c00      	ldr	r0, [r0, #64]	; 0x40
	}
    4ada:	4770      	bx	lr
			uxReturn = 0U;
    4adc:	2000      	movs	r0, #0
		return uxReturn;
    4ade:	e7fc      	b.n	4ada <uxTaskGetTaskNumber+0x6>

00004ae0 <vTaskSetTaskNumber>:
		if( xTask != NULL )
    4ae0:	2800      	cmp	r0, #0
    4ae2:	d000      	beq.n	4ae6 <vTaskSetTaskNumber+0x6>
			pxTCB->uxTaskNumber = uxHandle;
    4ae4:	6401      	str	r1, [r0, #64]	; 0x40
	}
    4ae6:	4770      	bx	lr

00004ae8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
    4ae8:	4b01      	ldr	r3, [pc, #4]	; (4af0 <xTaskGetCurrentTaskHandle+0x8>)
    4aea:	6818      	ldr	r0, [r3, #0]
	}
    4aec:	4770      	bx	lr
    4aee:	46c0      	nop			; (mov r8, r8)
    4af0:	200036bc 	.word	0x200036bc

00004af4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    4af4:	4b05      	ldr	r3, [pc, #20]	; (4b0c <xTaskGetSchedulerState+0x18>)
    4af6:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    4af8:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    4afa:	2b00      	cmp	r3, #0
    4afc:	d004      	beq.n	4b08 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4afe:	4b04      	ldr	r3, [pc, #16]	; (4b10 <xTaskGetSchedulerState+0x1c>)
    4b00:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    4b02:	4243      	negs	r3, r0
    4b04:	4158      	adcs	r0, r3
    4b06:	0040      	lsls	r0, r0, #1
	}
    4b08:	4770      	bx	lr
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	2000378c 	.word	0x2000378c
    4b10:	20003738 	.word	0x20003738

00004b14 <xTaskPriorityInherit>:
	{
    4b14:	b570      	push	{r4, r5, r6, lr}
    4b16:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    4b18:	d100      	bne.n	4b1c <xTaskPriorityInherit+0x8>
    4b1a:	e06d      	b.n	4bf8 <xTaskPriorityInherit+0xe4>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    4b1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4b1e:	4b37      	ldr	r3, [pc, #220]	; (4bfc <xTaskPriorityInherit+0xe8>)
    4b20:	681b      	ldr	r3, [r3, #0]
    4b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b24:	429a      	cmp	r2, r3
    4b26:	d25f      	bcs.n	4be8 <xTaskPriorityInherit+0xd4>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4b28:	6983      	ldr	r3, [r0, #24]
    4b2a:	2b00      	cmp	r3, #0
    4b2c:	db05      	blt.n	4b3a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4b2e:	4b33      	ldr	r3, [pc, #204]	; (4bfc <xTaskPriorityInherit+0xe8>)
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    4b34:	2305      	movs	r3, #5
    4b36:	1a5b      	subs	r3, r3, r1
    4b38:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    4b3a:	0093      	lsls	r3, r2, #2
    4b3c:	189b      	adds	r3, r3, r2
    4b3e:	009b      	lsls	r3, r3, #2
    4b40:	4a2f      	ldr	r2, [pc, #188]	; (4c00 <xTaskPriorityInherit+0xec>)
    4b42:	18d3      	adds	r3, r2, r3
    4b44:	6962      	ldr	r2, [r4, #20]
    4b46:	429a      	cmp	r2, r3
    4b48:	d028      	beq.n	4b9c <xTaskPriorityInherit+0x88>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4b4a:	4b2c      	ldr	r3, [pc, #176]	; (4bfc <xTaskPriorityInherit+0xe8>)
    4b4c:	681b      	ldr	r3, [r3, #0]
    4b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b50:	62e3      	str	r3, [r4, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    4b52:	0020      	movs	r0, r4
    4b54:	4b2b      	ldr	r3, [pc, #172]	; (4c04 <xTaskPriorityInherit+0xf0>)
    4b56:	4798      	blx	r3
    4b58:	0003      	movs	r3, r0
    4b5a:	4a2b      	ldr	r2, [pc, #172]	; (4c08 <xTaskPriorityInherit+0xf4>)
    4b5c:	8812      	ldrh	r2, [r2, #0]
				xReturn = pdTRUE;
    4b5e:	2001      	movs	r0, #1
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
    4b60:	421a      	tst	r2, r3
    4b62:	d048      	beq.n	4bf6 <xTaskPriorityInherit+0xe2>
    4b64:	0020      	movs	r0, r4
    4b66:	4d29      	ldr	r5, [pc, #164]	; (4c0c <xTaskPriorityInherit+0xf8>)
    4b68:	47a8      	blx	r5
    4b6a:	0006      	movs	r6, r0
    4b6c:	0020      	movs	r0, r4
    4b6e:	47a8      	blx	r5
    4b70:	b2c1      	uxtb	r1, r0
    4b72:	2003      	movs	r0, #3
    4b74:	4b26      	ldr	r3, [pc, #152]	; (4c10 <xTaskPriorityInherit+0xfc>)
    4b76:	4798      	blx	r3
    4b78:	0003      	movs	r3, r0
    4b7a:	b2f2      	uxtb	r2, r6
    4b7c:	2103      	movs	r1, #3
    4b7e:	208e      	movs	r0, #142	; 0x8e
    4b80:	4e24      	ldr	r6, [pc, #144]	; (4c14 <xTaskPriorityInherit+0x100>)
    4b82:	47b0      	blx	r6
    4b84:	0020      	movs	r0, r4
    4b86:	47a8      	blx	r5
    4b88:	4b1c      	ldr	r3, [pc, #112]	; (4bfc <xTaskPriorityInherit+0xe8>)
    4b8a:	681b      	ldr	r3, [r3, #0]
    4b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b8e:	b2d2      	uxtb	r2, r2
    4b90:	b2c1      	uxtb	r1, r0
    4b92:	2003      	movs	r0, #3
    4b94:	4b20      	ldr	r3, [pc, #128]	; (4c18 <xTaskPriorityInherit+0x104>)
    4b96:	4798      	blx	r3
				xReturn = pdTRUE;
    4b98:	2001      	movs	r0, #1
    4b9a:	e02c      	b.n	4bf6 <xTaskPriorityInherit+0xe2>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4b9c:	1d25      	adds	r5, r4, #4
    4b9e:	0028      	movs	r0, r5
    4ba0:	4b1e      	ldr	r3, [pc, #120]	; (4c1c <xTaskPriorityInherit+0x108>)
    4ba2:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4ba4:	4b15      	ldr	r3, [pc, #84]	; (4bfc <xTaskPriorityInherit+0xe8>)
    4ba6:	681b      	ldr	r3, [r3, #0]
    4ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4baa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    4bac:	0020      	movs	r0, r4
    4bae:	4b15      	ldr	r3, [pc, #84]	; (4c04 <xTaskPriorityInherit+0xf0>)
    4bb0:	4798      	blx	r3
    4bb2:	4b15      	ldr	r3, [pc, #84]	; (4c08 <xTaskPriorityInherit+0xf4>)
    4bb4:	881b      	ldrh	r3, [r3, #0]
    4bb6:	4203      	tst	r3, r0
    4bb8:	d10f      	bne.n	4bda <xTaskPriorityInherit+0xc6>
    4bba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4bbc:	4a18      	ldr	r2, [pc, #96]	; (4c20 <xTaskPriorityInherit+0x10c>)
    4bbe:	6812      	ldr	r2, [r2, #0]
    4bc0:	4293      	cmp	r3, r2
    4bc2:	d901      	bls.n	4bc8 <xTaskPriorityInherit+0xb4>
    4bc4:	4a16      	ldr	r2, [pc, #88]	; (4c20 <xTaskPriorityInherit+0x10c>)
    4bc6:	6013      	str	r3, [r2, #0]
    4bc8:	0098      	lsls	r0, r3, #2
    4bca:	18c0      	adds	r0, r0, r3
    4bcc:	0080      	lsls	r0, r0, #2
    4bce:	4b0c      	ldr	r3, [pc, #48]	; (4c00 <xTaskPriorityInherit+0xec>)
    4bd0:	1818      	adds	r0, r3, r0
    4bd2:	0029      	movs	r1, r5
    4bd4:	4b13      	ldr	r3, [pc, #76]	; (4c24 <xTaskPriorityInherit+0x110>)
    4bd6:	4798      	blx	r3
    4bd8:	e7bb      	b.n	4b52 <xTaskPriorityInherit+0x3e>
    4bda:	0020      	movs	r0, r4
    4bdc:	4b0b      	ldr	r3, [pc, #44]	; (4c0c <xTaskPriorityInherit+0xf8>)
    4bde:	4798      	blx	r3
    4be0:	b2c0      	uxtb	r0, r0
    4be2:	4b11      	ldr	r3, [pc, #68]	; (4c28 <xTaskPriorityInherit+0x114>)
    4be4:	4798      	blx	r3
    4be6:	e7e8      	b.n	4bba <xTaskPriorityInherit+0xa6>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    4be8:	4b04      	ldr	r3, [pc, #16]	; (4bfc <xTaskPriorityInherit+0xe8>)
    4bea:	681b      	ldr	r3, [r3, #0]
    4bec:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bf0:	4298      	cmp	r0, r3
    4bf2:	4180      	sbcs	r0, r0
    4bf4:	4240      	negs	r0, r0
	}
    4bf6:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    4bf8:	2000      	movs	r0, #0
    4bfa:	e7fc      	b.n	4bf6 <xTaskPriorityInherit+0xe2>
    4bfc:	200036bc 	.word	0x200036bc
    4c00:	200036c8 	.word	0x200036c8
    4c04:	00001965 	.word	0x00001965
    4c08:	20000020 	.word	0x20000020
    4c0c:	00001955 	.word	0x00001955
    4c10:	000020cd 	.word	0x000020cd
    4c14:	00002719 	.word	0x00002719
    4c18:	00002075 	.word	0x00002075
    4c1c:	00002a9b 	.word	0x00002a9b
    4c20:	20003740 	.word	0x20003740
    4c24:	00002a55 	.word	0x00002a55
    4c28:	000024ed 	.word	0x000024ed

00004c2c <xTaskPriorityDisinherit>:
	{
    4c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c2e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    4c30:	d05a      	beq.n	4ce8 <xTaskPriorityDisinherit+0xbc>
			configASSERT( pxTCB == pxCurrentTCB );
    4c32:	4b2f      	ldr	r3, [pc, #188]	; (4cf0 <xTaskPriorityDisinherit+0xc4>)
    4c34:	681b      	ldr	r3, [r3, #0]
    4c36:	4298      	cmp	r0, r3
    4c38:	d001      	beq.n	4c3e <xTaskPriorityDisinherit+0x12>
    4c3a:	b672      	cpsid	i
    4c3c:	e7fe      	b.n	4c3c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    4c3e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    4c40:	2b00      	cmp	r3, #0
    4c42:	d101      	bne.n	4c48 <xTaskPriorityDisinherit+0x1c>
    4c44:	b672      	cpsid	i
    4c46:	e7fe      	b.n	4c46 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    4c48:	3b01      	subs	r3, #1
    4c4a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4c4c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4c4e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    4c50:	428a      	cmp	r2, r1
    4c52:	d04b      	beq.n	4cec <xTaskPriorityDisinherit+0xc0>
	BaseType_t xReturn = pdFALSE;
    4c54:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    4c56:	2b00      	cmp	r3, #0
    4c58:	d145      	bne.n	4ce6 <xTaskPriorityDisinherit+0xba>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4c5a:	1d25      	adds	r5, r4, #4
    4c5c:	0028      	movs	r0, r5
    4c5e:	4b25      	ldr	r3, [pc, #148]	; (4cf4 <xTaskPriorityDisinherit+0xc8>)
    4c60:	4798      	blx	r3
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    4c62:	0020      	movs	r0, r4
    4c64:	4b24      	ldr	r3, [pc, #144]	; (4cf8 <xTaskPriorityDisinherit+0xcc>)
    4c66:	4798      	blx	r3
    4c68:	4b24      	ldr	r3, [pc, #144]	; (4cfc <xTaskPriorityDisinherit+0xd0>)
    4c6a:	881b      	ldrh	r3, [r3, #0]
    4c6c:	4203      	tst	r3, r0
    4c6e:	d018      	beq.n	4ca2 <xTaskPriorityDisinherit+0x76>
    4c70:	0020      	movs	r0, r4
    4c72:	4e23      	ldr	r6, [pc, #140]	; (4d00 <xTaskPriorityDisinherit+0xd4>)
    4c74:	47b0      	blx	r6
    4c76:	0007      	movs	r7, r0
    4c78:	0020      	movs	r0, r4
    4c7a:	47b0      	blx	r6
    4c7c:	b2c1      	uxtb	r1, r0
    4c7e:	2003      	movs	r0, #3
    4c80:	4b20      	ldr	r3, [pc, #128]	; (4d04 <xTaskPriorityDisinherit+0xd8>)
    4c82:	4798      	blx	r3
    4c84:	0003      	movs	r3, r0
    4c86:	b2fa      	uxtb	r2, r7
    4c88:	2103      	movs	r1, #3
    4c8a:	208f      	movs	r0, #143	; 0x8f
    4c8c:	4f1e      	ldr	r7, [pc, #120]	; (4d08 <xTaskPriorityDisinherit+0xdc>)
    4c8e:	47b8      	blx	r7
    4c90:	0020      	movs	r0, r4
    4c92:	47b0      	blx	r6
    4c94:	2344      	movs	r3, #68	; 0x44
    4c96:	18e3      	adds	r3, r4, r3
    4c98:	781a      	ldrb	r2, [r3, #0]
    4c9a:	b2c1      	uxtb	r1, r0
    4c9c:	2003      	movs	r0, #3
    4c9e:	4b1b      	ldr	r3, [pc, #108]	; (4d0c <xTaskPriorityDisinherit+0xe0>)
    4ca0:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4ca2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4ca4:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4ca6:	2305      	movs	r3, #5
    4ca8:	1a9b      	subs	r3, r3, r2
    4caa:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    4cac:	0020      	movs	r0, r4
    4cae:	4b12      	ldr	r3, [pc, #72]	; (4cf8 <xTaskPriorityDisinherit+0xcc>)
    4cb0:	4798      	blx	r3
    4cb2:	4b12      	ldr	r3, [pc, #72]	; (4cfc <xTaskPriorityDisinherit+0xd0>)
    4cb4:	881b      	ldrh	r3, [r3, #0]
    4cb6:	4203      	tst	r3, r0
    4cb8:	d005      	beq.n	4cc6 <xTaskPriorityDisinherit+0x9a>
    4cba:	0020      	movs	r0, r4
    4cbc:	4b10      	ldr	r3, [pc, #64]	; (4d00 <xTaskPriorityDisinherit+0xd4>)
    4cbe:	4798      	blx	r3
    4cc0:	b2c0      	uxtb	r0, r0
    4cc2:	4b13      	ldr	r3, [pc, #76]	; (4d10 <xTaskPriorityDisinherit+0xe4>)
    4cc4:	4798      	blx	r3
    4cc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4cc8:	4a12      	ldr	r2, [pc, #72]	; (4d14 <xTaskPriorityDisinherit+0xe8>)
    4cca:	6812      	ldr	r2, [r2, #0]
    4ccc:	4293      	cmp	r3, r2
    4cce:	d901      	bls.n	4cd4 <xTaskPriorityDisinherit+0xa8>
    4cd0:	4a10      	ldr	r2, [pc, #64]	; (4d14 <xTaskPriorityDisinherit+0xe8>)
    4cd2:	6013      	str	r3, [r2, #0]
    4cd4:	0098      	lsls	r0, r3, #2
    4cd6:	18c0      	adds	r0, r0, r3
    4cd8:	0080      	lsls	r0, r0, #2
    4cda:	4b0f      	ldr	r3, [pc, #60]	; (4d18 <xTaskPriorityDisinherit+0xec>)
    4cdc:	1818      	adds	r0, r3, r0
    4cde:	0029      	movs	r1, r5
    4ce0:	4b0e      	ldr	r3, [pc, #56]	; (4d1c <xTaskPriorityDisinherit+0xf0>)
    4ce2:	4798      	blx	r3
					xReturn = pdTRUE;
    4ce4:	2001      	movs	r0, #1
	}
    4ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
    4ce8:	2000      	movs	r0, #0
    4cea:	e7fc      	b.n	4ce6 <xTaskPriorityDisinherit+0xba>
    4cec:	2000      	movs	r0, #0
    4cee:	e7fa      	b.n	4ce6 <xTaskPriorityDisinherit+0xba>
    4cf0:	200036bc 	.word	0x200036bc
    4cf4:	00002a9b 	.word	0x00002a9b
    4cf8:	00001965 	.word	0x00001965
    4cfc:	20000020 	.word	0x20000020
    4d00:	00001955 	.word	0x00001955
    4d04:	000020cd 	.word	0x000020cd
    4d08:	00002719 	.word	0x00002719
    4d0c:	00002075 	.word	0x00002075
    4d10:	000024ed 	.word	0x000024ed
    4d14:	20003740 	.word	0x20003740
    4d18:	200036c8 	.word	0x200036c8
    4d1c:	00002a55 	.word	0x00002a55

00004d20 <vTaskPriorityDisinheritAfterTimeout>:
	{
    4d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d22:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    4d24:	d00d      	beq.n	4d42 <vTaskPriorityDisinheritAfterTimeout+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
    4d26:	6c83      	ldr	r3, [r0, #72]	; 0x48
    4d28:	2b00      	cmp	r3, #0
    4d2a:	d101      	bne.n	4d30 <vTaskPriorityDisinheritAfterTimeout+0x10>
    4d2c:	b672      	cpsid	i
    4d2e:	e7fe      	b.n	4d2e <vTaskPriorityDisinheritAfterTimeout+0xe>
    4d30:	6c45      	ldr	r5, [r0, #68]	; 0x44
    4d32:	428d      	cmp	r5, r1
    4d34:	d200      	bcs.n	4d38 <vTaskPriorityDisinheritAfterTimeout+0x18>
    4d36:	000d      	movs	r5, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    4d38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d3a:	42aa      	cmp	r2, r5
    4d3c:	d001      	beq.n	4d42 <vTaskPriorityDisinheritAfterTimeout+0x22>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    4d3e:	2b01      	cmp	r3, #1
    4d40:	d000      	beq.n	4d44 <vTaskPriorityDisinheritAfterTimeout+0x24>
	}
    4d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					configASSERT( pxTCB != pxCurrentTCB );
    4d44:	4b2b      	ldr	r3, [pc, #172]	; (4df4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
    4d46:	681b      	ldr	r3, [r3, #0]
    4d48:	429c      	cmp	r4, r3
    4d4a:	d101      	bne.n	4d50 <vTaskPriorityDisinheritAfterTimeout+0x30>
    4d4c:	b672      	cpsid	i
    4d4e:	e7fe      	b.n	4d4e <vTaskPriorityDisinheritAfterTimeout+0x2e>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    4d50:	0020      	movs	r0, r4
    4d52:	4b29      	ldr	r3, [pc, #164]	; (4df8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    4d54:	4798      	blx	r3
    4d56:	4b29      	ldr	r3, [pc, #164]	; (4dfc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    4d58:	881b      	ldrh	r3, [r3, #0]
    4d5a:	4203      	tst	r3, r0
    4d5c:	d018      	beq.n	4d90 <vTaskPriorityDisinheritAfterTimeout+0x70>
    4d5e:	0020      	movs	r0, r4
    4d60:	4e27      	ldr	r6, [pc, #156]	; (4e00 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    4d62:	47b0      	blx	r6
    4d64:	0007      	movs	r7, r0
    4d66:	0020      	movs	r0, r4
    4d68:	47b0      	blx	r6
    4d6a:	b2c1      	uxtb	r1, r0
    4d6c:	2003      	movs	r0, #3
    4d6e:	4b25      	ldr	r3, [pc, #148]	; (4e04 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    4d70:	4798      	blx	r3
    4d72:	0003      	movs	r3, r0
    4d74:	b2fa      	uxtb	r2, r7
    4d76:	2103      	movs	r1, #3
    4d78:	208f      	movs	r0, #143	; 0x8f
    4d7a:	4f23      	ldr	r7, [pc, #140]	; (4e08 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    4d7c:	47b8      	blx	r7
    4d7e:	0020      	movs	r0, r4
    4d80:	47b0      	blx	r6
    4d82:	2344      	movs	r3, #68	; 0x44
    4d84:	18e3      	adds	r3, r4, r3
    4d86:	781a      	ldrb	r2, [r3, #0]
    4d88:	b2c1      	uxtb	r1, r0
    4d8a:	2003      	movs	r0, #3
    4d8c:	4b1f      	ldr	r3, [pc, #124]	; (4e0c <vTaskPriorityDisinheritAfterTimeout+0xec>)
    4d8e:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
    4d90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					pxTCB->uxPriority = uxPriorityToUse;
    4d92:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4d94:	69a3      	ldr	r3, [r4, #24]
    4d96:	2b00      	cmp	r3, #0
    4d98:	db02      	blt.n	4da0 <vTaskPriorityDisinheritAfterTimeout+0x80>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4d9a:	2205      	movs	r2, #5
    4d9c:	1b55      	subs	r5, r2, r5
    4d9e:	61a5      	str	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    4da0:	008b      	lsls	r3, r1, #2
    4da2:	185b      	adds	r3, r3, r1
    4da4:	009b      	lsls	r3, r3, #2
    4da6:	4a1a      	ldr	r2, [pc, #104]	; (4e10 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    4da8:	18d3      	adds	r3, r2, r3
    4daa:	6962      	ldr	r2, [r4, #20]
    4dac:	429a      	cmp	r2, r3
    4dae:	d1c8      	bne.n	4d42 <vTaskPriorityDisinheritAfterTimeout+0x22>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4db0:	1d25      	adds	r5, r4, #4
    4db2:	0028      	movs	r0, r5
    4db4:	4b17      	ldr	r3, [pc, #92]	; (4e14 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    4db6:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    4db8:	0020      	movs	r0, r4
    4dba:	4b0f      	ldr	r3, [pc, #60]	; (4df8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    4dbc:	4798      	blx	r3
    4dbe:	4b0f      	ldr	r3, [pc, #60]	; (4dfc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    4dc0:	881b      	ldrh	r3, [r3, #0]
    4dc2:	4203      	tst	r3, r0
    4dc4:	d005      	beq.n	4dd2 <vTaskPriorityDisinheritAfterTimeout+0xb2>
    4dc6:	0020      	movs	r0, r4
    4dc8:	4b0d      	ldr	r3, [pc, #52]	; (4e00 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    4dca:	4798      	blx	r3
    4dcc:	b2c0      	uxtb	r0, r0
    4dce:	4b12      	ldr	r3, [pc, #72]	; (4e18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    4dd0:	4798      	blx	r3
    4dd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4dd4:	4a11      	ldr	r2, [pc, #68]	; (4e1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    4dd6:	6812      	ldr	r2, [r2, #0]
    4dd8:	4293      	cmp	r3, r2
    4dda:	d901      	bls.n	4de0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    4ddc:	4a0f      	ldr	r2, [pc, #60]	; (4e1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    4dde:	6013      	str	r3, [r2, #0]
    4de0:	0098      	lsls	r0, r3, #2
    4de2:	18c0      	adds	r0, r0, r3
    4de4:	0080      	lsls	r0, r0, #2
    4de6:	4b0a      	ldr	r3, [pc, #40]	; (4e10 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    4de8:	1818      	adds	r0, r3, r0
    4dea:	0029      	movs	r1, r5
    4dec:	4b0c      	ldr	r3, [pc, #48]	; (4e20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
    4dee:	4798      	blx	r3
	}
    4df0:	e7a7      	b.n	4d42 <vTaskPriorityDisinheritAfterTimeout+0x22>
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	200036bc 	.word	0x200036bc
    4df8:	00001965 	.word	0x00001965
    4dfc:	20000020 	.word	0x20000020
    4e00:	00001955 	.word	0x00001955
    4e04:	000020cd 	.word	0x000020cd
    4e08:	00002719 	.word	0x00002719
    4e0c:	00002075 	.word	0x00002075
    4e10:	200036c8 	.word	0x200036c8
    4e14:	00002a9b 	.word	0x00002a9b
    4e18:	000024ed 	.word	0x000024ed
    4e1c:	20003740 	.word	0x20003740
    4e20:	00002a55 	.word	0x00002a55

00004e24 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    4e24:	4b05      	ldr	r3, [pc, #20]	; (4e3c <pvTaskIncrementMutexHeldCount+0x18>)
    4e26:	681b      	ldr	r3, [r3, #0]
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d004      	beq.n	4e36 <pvTaskIncrementMutexHeldCount+0x12>
			( pxCurrentTCB->uxMutexesHeld )++;
    4e2c:	4b03      	ldr	r3, [pc, #12]	; (4e3c <pvTaskIncrementMutexHeldCount+0x18>)
    4e2e:	681a      	ldr	r2, [r3, #0]
    4e30:	6c93      	ldr	r3, [r2, #72]	; 0x48
    4e32:	3301      	adds	r3, #1
    4e34:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
    4e36:	4b01      	ldr	r3, [pc, #4]	; (4e3c <pvTaskIncrementMutexHeldCount+0x18>)
    4e38:	6818      	ldr	r0, [r3, #0]
	}
    4e3a:	4770      	bx	lr
    4e3c:	200036bc 	.word	0x200036bc

00004e40 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    4e40:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4e42:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4e44:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    4e46:	4291      	cmp	r1, r2
    4e48:	d80b      	bhi.n	4e62 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4e4a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    4e4c:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4e4e:	6983      	ldr	r3, [r0, #24]
    4e50:	429a      	cmp	r2, r3
    4e52:	d211      	bcs.n	4e78 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4e54:	1d01      	adds	r1, r0, #4
    4e56:	4b09      	ldr	r3, [pc, #36]	; (4e7c <prvInsertTimerInActiveList+0x3c>)
    4e58:	6818      	ldr	r0, [r3, #0]
    4e5a:	4b09      	ldr	r3, [pc, #36]	; (4e80 <prvInsertTimerInActiveList+0x40>)
    4e5c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    4e5e:	2400      	movs	r4, #0
    4e60:	e00a      	b.n	4e78 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4e62:	429a      	cmp	r2, r3
    4e64:	d202      	bcs.n	4e6c <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    4e66:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4e68:	4299      	cmp	r1, r3
    4e6a:	d205      	bcs.n	4e78 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4e6c:	1d01      	adds	r1, r0, #4
    4e6e:	4b05      	ldr	r3, [pc, #20]	; (4e84 <prvInsertTimerInActiveList+0x44>)
    4e70:	6818      	ldr	r0, [r3, #0]
    4e72:	4b03      	ldr	r3, [pc, #12]	; (4e80 <prvInsertTimerInActiveList+0x40>)
    4e74:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    4e76:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    4e78:	0020      	movs	r0, r4
    4e7a:	bd10      	pop	{r4, pc}
    4e7c:	200037c4 	.word	0x200037c4
    4e80:	00002a6d 	.word	0x00002a6d
    4e84:	200037c0 	.word	0x200037c0

00004e88 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    4e88:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    4e8a:	4b0e      	ldr	r3, [pc, #56]	; (4ec4 <prvCheckForValidListAndQueue+0x3c>)
    4e8c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    4e8e:	4b0e      	ldr	r3, [pc, #56]	; (4ec8 <prvCheckForValidListAndQueue+0x40>)
    4e90:	681b      	ldr	r3, [r3, #0]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d002      	beq.n	4e9c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4e96:	4b0d      	ldr	r3, [pc, #52]	; (4ecc <prvCheckForValidListAndQueue+0x44>)
    4e98:	4798      	blx	r3
}
    4e9a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    4e9c:	4d0c      	ldr	r5, [pc, #48]	; (4ed0 <prvCheckForValidListAndQueue+0x48>)
    4e9e:	0028      	movs	r0, r5
    4ea0:	4e0c      	ldr	r6, [pc, #48]	; (4ed4 <prvCheckForValidListAndQueue+0x4c>)
    4ea2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    4ea4:	4c0c      	ldr	r4, [pc, #48]	; (4ed8 <prvCheckForValidListAndQueue+0x50>)
    4ea6:	0020      	movs	r0, r4
    4ea8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    4eaa:	4b0c      	ldr	r3, [pc, #48]	; (4edc <prvCheckForValidListAndQueue+0x54>)
    4eac:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    4eae:	4b0c      	ldr	r3, [pc, #48]	; (4ee0 <prvCheckForValidListAndQueue+0x58>)
    4eb0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    4eb2:	2200      	movs	r2, #0
    4eb4:	210c      	movs	r1, #12
    4eb6:	2002      	movs	r0, #2
    4eb8:	4b0a      	ldr	r3, [pc, #40]	; (4ee4 <prvCheckForValidListAndQueue+0x5c>)
    4eba:	4798      	blx	r3
    4ebc:	4b02      	ldr	r3, [pc, #8]	; (4ec8 <prvCheckForValidListAndQueue+0x40>)
    4ebe:	6018      	str	r0, [r3, #0]
    4ec0:	e7e9      	b.n	4e96 <prvCheckForValidListAndQueue+0xe>
    4ec2:	46c0      	nop			; (mov r8, r8)
    4ec4:	00002bd1 	.word	0x00002bd1
    4ec8:	200037f4 	.word	0x200037f4
    4ecc:	00002be9 	.word	0x00002be9
    4ed0:	200037c8 	.word	0x200037c8
    4ed4:	00002a39 	.word	0x00002a39
    4ed8:	200037dc 	.word	0x200037dc
    4edc:	200037c0 	.word	0x200037c0
    4ee0:	200037c4 	.word	0x200037c4
    4ee4:	00003049 	.word	0x00003049

00004ee8 <xTimerCreateTimerTask>:
{
    4ee8:	b510      	push	{r4, lr}
    4eea:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    4eec:	4b0a      	ldr	r3, [pc, #40]	; (4f18 <xTimerCreateTimerTask+0x30>)
    4eee:	4798      	blx	r3
	if( xTimerQueue != NULL )
    4ef0:	4b0a      	ldr	r3, [pc, #40]	; (4f1c <xTimerCreateTimerTask+0x34>)
    4ef2:	681b      	ldr	r3, [r3, #0]
    4ef4:	2b00      	cmp	r3, #0
    4ef6:	d00d      	beq.n	4f14 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    4ef8:	4b09      	ldr	r3, [pc, #36]	; (4f20 <xTimerCreateTimerTask+0x38>)
    4efa:	9301      	str	r3, [sp, #4]
    4efc:	2302      	movs	r3, #2
    4efe:	9300      	str	r3, [sp, #0]
    4f00:	2300      	movs	r3, #0
    4f02:	2280      	movs	r2, #128	; 0x80
    4f04:	4907      	ldr	r1, [pc, #28]	; (4f24 <xTimerCreateTimerTask+0x3c>)
    4f06:	4808      	ldr	r0, [pc, #32]	; (4f28 <xTimerCreateTimerTask+0x40>)
    4f08:	4c08      	ldr	r4, [pc, #32]	; (4f2c <xTimerCreateTimerTask+0x44>)
    4f0a:	47a0      	blx	r4
	configASSERT( xReturn );
    4f0c:	2800      	cmp	r0, #0
    4f0e:	d001      	beq.n	4f14 <xTimerCreateTimerTask+0x2c>
}
    4f10:	b002      	add	sp, #8
    4f12:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    4f14:	b672      	cpsid	i
    4f16:	e7fe      	b.n	4f16 <xTimerCreateTimerTask+0x2e>
    4f18:	00004e89 	.word	0x00004e89
    4f1c:	200037f4 	.word	0x200037f4
    4f20:	200037f8 	.word	0x200037f8
    4f24:	0000a488 	.word	0x0000a488
    4f28:	00005055 	.word	0x00005055
    4f2c:	00004021 	.word	0x00004021

00004f30 <xTimerGenericCommand>:
{
    4f30:	b530      	push	{r4, r5, lr}
    4f32:	b085      	sub	sp, #20
    4f34:	0004      	movs	r4, r0
    4f36:	001d      	movs	r5, r3
	configASSERT( xTimer );
    4f38:	2800      	cmp	r0, #0
    4f3a:	d014      	beq.n	4f66 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    4f3c:	4b13      	ldr	r3, [pc, #76]	; (4f8c <xTimerGenericCommand+0x5c>)
    4f3e:	6818      	ldr	r0, [r3, #0]
    4f40:	2800      	cmp	r0, #0
    4f42:	d021      	beq.n	4f88 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    4f44:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    4f46:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    4f48:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    4f4a:	2905      	cmp	r1, #5
    4f4c:	dc15      	bgt.n	4f7a <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    4f4e:	4b10      	ldr	r3, [pc, #64]	; (4f90 <xTimerGenericCommand+0x60>)
    4f50:	4798      	blx	r3
    4f52:	2802      	cmp	r0, #2
    4f54:	d009      	beq.n	4f6a <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    4f56:	4b0d      	ldr	r3, [pc, #52]	; (4f8c <xTimerGenericCommand+0x5c>)
    4f58:	6818      	ldr	r0, [r3, #0]
    4f5a:	2300      	movs	r3, #0
    4f5c:	2200      	movs	r2, #0
    4f5e:	a901      	add	r1, sp, #4
    4f60:	4c0c      	ldr	r4, [pc, #48]	; (4f94 <xTimerGenericCommand+0x64>)
    4f62:	47a0      	blx	r4
    4f64:	e00e      	b.n	4f84 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    4f66:	b672      	cpsid	i
    4f68:	e7fe      	b.n	4f68 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    4f6a:	4b08      	ldr	r3, [pc, #32]	; (4f8c <xTimerGenericCommand+0x5c>)
    4f6c:	6818      	ldr	r0, [r3, #0]
    4f6e:	2300      	movs	r3, #0
    4f70:	9a08      	ldr	r2, [sp, #32]
    4f72:	a901      	add	r1, sp, #4
    4f74:	4c07      	ldr	r4, [pc, #28]	; (4f94 <xTimerGenericCommand+0x64>)
    4f76:	47a0      	blx	r4
    4f78:	e004      	b.n	4f84 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    4f7a:	2300      	movs	r3, #0
    4f7c:	002a      	movs	r2, r5
    4f7e:	a901      	add	r1, sp, #4
    4f80:	4c05      	ldr	r4, [pc, #20]	; (4f98 <xTimerGenericCommand+0x68>)
    4f82:	47a0      	blx	r4
}
    4f84:	b005      	add	sp, #20
    4f86:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    4f88:	2000      	movs	r0, #0
	return xReturn;
    4f8a:	e7fb      	b.n	4f84 <xTimerGenericCommand+0x54>
    4f8c:	200037f4 	.word	0x200037f4
    4f90:	00004af5 	.word	0x00004af5
    4f94:	00003185 	.word	0x00003185
    4f98:	000034d9 	.word	0x000034d9

00004f9c <prvSampleTimeNow>:
{
    4f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f9e:	46d6      	mov	lr, sl
    4fa0:	464f      	mov	r7, r9
    4fa2:	4646      	mov	r6, r8
    4fa4:	b5c0      	push	{r6, r7, lr}
    4fa6:	b082      	sub	sp, #8
    4fa8:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    4faa:	4b23      	ldr	r3, [pc, #140]	; (5038 <prvSampleTimeNow+0x9c>)
    4fac:	4798      	blx	r3
    4fae:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    4fb0:	4b22      	ldr	r3, [pc, #136]	; (503c <prvSampleTimeNow+0xa0>)
    4fb2:	681b      	ldr	r3, [r3, #0]
    4fb4:	4298      	cmp	r0, r3
    4fb6:	d317      	bcc.n	4fe8 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    4fb8:	2300      	movs	r3, #0
    4fba:	4642      	mov	r2, r8
    4fbc:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    4fbe:	4b1f      	ldr	r3, [pc, #124]	; (503c <prvSampleTimeNow+0xa0>)
    4fc0:	4652      	mov	r2, sl
    4fc2:	601a      	str	r2, [r3, #0]
}
    4fc4:	4650      	mov	r0, sl
    4fc6:	b002      	add	sp, #8
    4fc8:	bc1c      	pop	{r2, r3, r4}
    4fca:	4690      	mov	r8, r2
    4fcc:	4699      	mov	r9, r3
    4fce:	46a2      	mov	sl, r4
    4fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4fd2:	2300      	movs	r3, #0
    4fd4:	9300      	str	r3, [sp, #0]
    4fd6:	003a      	movs	r2, r7
    4fd8:	2100      	movs	r1, #0
    4fda:	0020      	movs	r0, r4
    4fdc:	4c18      	ldr	r4, [pc, #96]	; (5040 <prvSampleTimeNow+0xa4>)
    4fde:	47a0      	blx	r4
				configASSERT( xResult );
    4fe0:	2800      	cmp	r0, #0
    4fe2:	d104      	bne.n	4fee <prvSampleTimeNow+0x52>
    4fe4:	b672      	cpsid	i
    4fe6:	e7fe      	b.n	4fe6 <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4fe8:	4d16      	ldr	r5, [pc, #88]	; (5044 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4fea:	4b17      	ldr	r3, [pc, #92]	; (5048 <prvSampleTimeNow+0xac>)
    4fec:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4fee:	682b      	ldr	r3, [r5, #0]
    4ff0:	681a      	ldr	r2, [r3, #0]
    4ff2:	2a00      	cmp	r2, #0
    4ff4:	d017      	beq.n	5026 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4ff6:	68db      	ldr	r3, [r3, #12]
    4ff8:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4ffa:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4ffc:	1d26      	adds	r6, r4, #4
    4ffe:	0030      	movs	r0, r6
    5000:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5002:	0020      	movs	r0, r4
    5004:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5006:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5008:	69e3      	ldr	r3, [r4, #28]
    500a:	2b01      	cmp	r3, #1
    500c:	d1ef      	bne.n	4fee <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    500e:	69a3      	ldr	r3, [r4, #24]
    5010:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    5012:	429f      	cmp	r7, r3
    5014:	d2dd      	bcs.n	4fd2 <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    5016:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5018:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    501a:	4b0a      	ldr	r3, [pc, #40]	; (5044 <prvSampleTimeNow+0xa8>)
    501c:	6818      	ldr	r0, [r3, #0]
    501e:	0031      	movs	r1, r6
    5020:	4b0a      	ldr	r3, [pc, #40]	; (504c <prvSampleTimeNow+0xb0>)
    5022:	4798      	blx	r3
    5024:	e7e3      	b.n	4fee <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    5026:	4a0a      	ldr	r2, [pc, #40]	; (5050 <prvSampleTimeNow+0xb4>)
    5028:	4906      	ldr	r1, [pc, #24]	; (5044 <prvSampleTimeNow+0xa8>)
    502a:	6810      	ldr	r0, [r2, #0]
    502c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    502e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    5030:	2301      	movs	r3, #1
    5032:	4642      	mov	r2, r8
    5034:	6013      	str	r3, [r2, #0]
    5036:	e7c2      	b.n	4fbe <prvSampleTimeNow+0x22>
    5038:	00004345 	.word	0x00004345
    503c:	200037f0 	.word	0x200037f0
    5040:	00004f31 	.word	0x00004f31
    5044:	200037c0 	.word	0x200037c0
    5048:	00002a9b 	.word	0x00002a9b
    504c:	00002a6d 	.word	0x00002a6d
    5050:	200037c4 	.word	0x200037c4

00005054 <prvTimerTask>:
{
    5054:	b5f0      	push	{r4, r5, r6, r7, lr}
    5056:	b089      	sub	sp, #36	; 0x24
		vApplicationDaemonTaskStartupHook();
    5058:	4b53      	ldr	r3, [pc, #332]	; (51a8 <prvTimerTask+0x154>)
    505a:	4798      	blx	r3
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    505c:	4f53      	ldr	r7, [pc, #332]	; (51ac <prvTimerTask+0x158>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    505e:	4b54      	ldr	r3, [pc, #336]	; (51b0 <prvTimerTask+0x15c>)
    5060:	681b      	ldr	r3, [r3, #0]
    5062:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    5064:	2a00      	cmp	r2, #0
    5066:	d00e      	beq.n	5086 <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5068:	68db      	ldr	r3, [r3, #12]
    506a:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    506c:	4b51      	ldr	r3, [pc, #324]	; (51b4 <prvTimerTask+0x160>)
    506e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5070:	a805      	add	r0, sp, #20
    5072:	4b51      	ldr	r3, [pc, #324]	; (51b8 <prvTimerTask+0x164>)
    5074:	4798      	blx	r3
    5076:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    5078:	9b05      	ldr	r3, [sp, #20]
    507a:	2b00      	cmp	r3, #0
    507c:	d15f      	bne.n	513e <prvTimerTask+0xea>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    507e:	4284      	cmp	r4, r0
    5080:	d936      	bls.n	50f0 <prvTimerTask+0x9c>
    5082:	2200      	movs	r2, #0
    5084:	e00f      	b.n	50a6 <prvTimerTask+0x52>
	vTaskSuspendAll();
    5086:	4b4b      	ldr	r3, [pc, #300]	; (51b4 <prvTimerTask+0x160>)
    5088:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    508a:	a805      	add	r0, sp, #20
    508c:	4b4a      	ldr	r3, [pc, #296]	; (51b8 <prvTimerTask+0x164>)
    508e:	4798      	blx	r3
    5090:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    5092:	9b05      	ldr	r3, [sp, #20]
    5094:	2b00      	cmp	r3, #0
    5096:	d152      	bne.n	513e <prvTimerTask+0xea>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5098:	4b48      	ldr	r3, [pc, #288]	; (51bc <prvTimerTask+0x168>)
    509a:	681b      	ldr	r3, [r3, #0]
    509c:	681b      	ldr	r3, [r3, #0]
    509e:	425a      	negs	r2, r3
    50a0:	415a      	adcs	r2, r3
    50a2:	b2d2      	uxtb	r2, r2
    50a4:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    50a6:	1b61      	subs	r1, r4, r5
    50a8:	4b45      	ldr	r3, [pc, #276]	; (51c0 <prvTimerTask+0x16c>)
    50aa:	6818      	ldr	r0, [r3, #0]
    50ac:	4b45      	ldr	r3, [pc, #276]	; (51c4 <prvTimerTask+0x170>)
    50ae:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    50b0:	4b45      	ldr	r3, [pc, #276]	; (51c8 <prvTimerTask+0x174>)
    50b2:	4798      	blx	r3
    50b4:	2800      	cmp	r0, #0
    50b6:	d03f      	beq.n	5138 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    50b8:	4d41      	ldr	r5, [pc, #260]	; (51c0 <prvTimerTask+0x16c>)
    50ba:	4c44      	ldr	r4, [pc, #272]	; (51cc <prvTimerTask+0x178>)
    50bc:	2200      	movs	r2, #0
    50be:	a905      	add	r1, sp, #20
    50c0:	6828      	ldr	r0, [r5, #0]
    50c2:	47a0      	blx	r4
    50c4:	2800      	cmp	r0, #0
    50c6:	d0ca      	beq.n	505e <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    50c8:	9b05      	ldr	r3, [sp, #20]
    50ca:	9303      	str	r3, [sp, #12]
    50cc:	2b00      	cmp	r3, #0
    50ce:	dbf5      	blt.n	50bc <prvTimerTask+0x68>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    50d0:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    50d2:	6973      	ldr	r3, [r6, #20]
    50d4:	2b00      	cmp	r3, #0
    50d6:	d001      	beq.n	50dc <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    50d8:	1d30      	adds	r0, r6, #4
    50da:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    50dc:	a804      	add	r0, sp, #16
    50de:	4b36      	ldr	r3, [pc, #216]	; (51b8 <prvTimerTask+0x164>)
    50e0:	4798      	blx	r3
			switch( xMessage.xMessageID )
    50e2:	9b05      	ldr	r3, [sp, #20]
    50e4:	2b09      	cmp	r3, #9
    50e6:	d8e9      	bhi.n	50bc <prvTimerTask+0x68>
    50e8:	009b      	lsls	r3, r3, #2
    50ea:	4a39      	ldr	r2, [pc, #228]	; (51d0 <prvTimerTask+0x17c>)
    50ec:	58d3      	ldr	r3, [r2, r3]
    50ee:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    50f0:	4b35      	ldr	r3, [pc, #212]	; (51c8 <prvTimerTask+0x174>)
    50f2:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    50f4:	4b2e      	ldr	r3, [pc, #184]	; (51b0 <prvTimerTask+0x15c>)
    50f6:	681b      	ldr	r3, [r3, #0]
    50f8:	68db      	ldr	r3, [r3, #12]
    50fa:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    50fc:	1d30      	adds	r0, r6, #4
    50fe:	4b2b      	ldr	r3, [pc, #172]	; (51ac <prvTimerTask+0x158>)
    5100:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5102:	69f3      	ldr	r3, [r6, #28]
    5104:	2b01      	cmp	r3, #1
    5106:	d003      	beq.n	5110 <prvTimerTask+0xbc>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5108:	6a73      	ldr	r3, [r6, #36]	; 0x24
    510a:	0030      	movs	r0, r6
    510c:	4798      	blx	r3
    510e:	e7d3      	b.n	50b8 <prvTimerTask+0x64>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    5110:	69b3      	ldr	r3, [r6, #24]
    5112:	18e1      	adds	r1, r4, r3
    5114:	0023      	movs	r3, r4
    5116:	002a      	movs	r2, r5
    5118:	0030      	movs	r0, r6
    511a:	4d2e      	ldr	r5, [pc, #184]	; (51d4 <prvTimerTask+0x180>)
    511c:	47a8      	blx	r5
    511e:	2800      	cmp	r0, #0
    5120:	d0f2      	beq.n	5108 <prvTimerTask+0xb4>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5122:	2300      	movs	r3, #0
    5124:	9300      	str	r3, [sp, #0]
    5126:	0022      	movs	r2, r4
    5128:	2100      	movs	r1, #0
    512a:	0030      	movs	r0, r6
    512c:	4c2a      	ldr	r4, [pc, #168]	; (51d8 <prvTimerTask+0x184>)
    512e:	47a0      	blx	r4
			configASSERT( xResult );
    5130:	2800      	cmp	r0, #0
    5132:	d1e9      	bne.n	5108 <prvTimerTask+0xb4>
    5134:	b672      	cpsid	i
    5136:	e7fe      	b.n	5136 <prvTimerTask+0xe2>
					portYIELD_WITHIN_API();
    5138:	4b28      	ldr	r3, [pc, #160]	; (51dc <prvTimerTask+0x188>)
    513a:	4798      	blx	r3
    513c:	e7bc      	b.n	50b8 <prvTimerTask+0x64>
			( void ) xTaskResumeAll();
    513e:	4b22      	ldr	r3, [pc, #136]	; (51c8 <prvTimerTask+0x174>)
    5140:	4798      	blx	r3
    5142:	e7b9      	b.n	50b8 <prvTimerTask+0x64>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    5144:	9b06      	ldr	r3, [sp, #24]
    5146:	69b2      	ldr	r2, [r6, #24]
    5148:	4694      	mov	ip, r2
    514a:	4463      	add	r3, ip
    514c:	0019      	movs	r1, r3
    514e:	9b06      	ldr	r3, [sp, #24]
    5150:	0002      	movs	r2, r0
    5152:	0030      	movs	r0, r6
    5154:	4c1f      	ldr	r4, [pc, #124]	; (51d4 <prvTimerTask+0x180>)
    5156:	47a0      	blx	r4
    5158:	2800      	cmp	r0, #0
    515a:	d0ae      	beq.n	50ba <prvTimerTask+0x66>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    515c:	0030      	movs	r0, r6
    515e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5160:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    5162:	69f3      	ldr	r3, [r6, #28]
    5164:	2b01      	cmp	r3, #1
    5166:	d1a8      	bne.n	50ba <prvTimerTask+0x66>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    5168:	9b06      	ldr	r3, [sp, #24]
    516a:	69b1      	ldr	r1, [r6, #24]
    516c:	468c      	mov	ip, r1
    516e:	4463      	add	r3, ip
    5170:	001a      	movs	r2, r3
    5172:	2300      	movs	r3, #0
    5174:	9300      	str	r3, [sp, #0]
    5176:	2100      	movs	r1, #0
    5178:	0030      	movs	r0, r6
    517a:	4c17      	ldr	r4, [pc, #92]	; (51d8 <prvTimerTask+0x184>)
    517c:	47a0      	blx	r4
							configASSERT( xResult );
    517e:	2800      	cmp	r0, #0
    5180:	d19b      	bne.n	50ba <prvTimerTask+0x66>
    5182:	b672      	cpsid	i
    5184:	e7fe      	b.n	5184 <prvTimerTask+0x130>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    5186:	9906      	ldr	r1, [sp, #24]
    5188:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    518a:	2900      	cmp	r1, #0
    518c:	d006      	beq.n	519c <prvTimerTask+0x148>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    518e:	1841      	adds	r1, r0, r1
    5190:	0003      	movs	r3, r0
    5192:	0002      	movs	r2, r0
    5194:	0030      	movs	r0, r6
    5196:	4c0f      	ldr	r4, [pc, #60]	; (51d4 <prvTimerTask+0x180>)
    5198:	47a0      	blx	r4
    519a:	e78e      	b.n	50ba <prvTimerTask+0x66>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    519c:	b672      	cpsid	i
    519e:	e7fe      	b.n	519e <prvTimerTask+0x14a>
						vPortFree( pxTimer );
    51a0:	0030      	movs	r0, r6
    51a2:	4b0f      	ldr	r3, [pc, #60]	; (51e0 <prvTimerTask+0x18c>)
    51a4:	4798      	blx	r3
    51a6:	e788      	b.n	50ba <prvTimerTask+0x66>
    51a8:	00006aa1 	.word	0x00006aa1
    51ac:	00002a9b 	.word	0x00002a9b
    51b0:	200037c0 	.word	0x200037c0
    51b4:	00004335 	.word	0x00004335
    51b8:	00004f9d 	.word	0x00004f9d
    51bc:	200037c4 	.word	0x200037c4
    51c0:	200037f4 	.word	0x200037f4
    51c4:	00003e8d 	.word	0x00003e8d
    51c8:	000044dd 	.word	0x000044dd
    51cc:	00003821 	.word	0x00003821
    51d0:	0000a460 	.word	0x0000a460
    51d4:	00004e41 	.word	0x00004e41
    51d8:	00004f31 	.word	0x00004f31
    51dc:	00002bc1 	.word	0x00002bc1
    51e0:	00002d25 	.word	0x00002d25

000051e4 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
    51e4:	b510      	push	{r4, lr}
    51e6:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
    51e8:	7c03      	ldrb	r3, [r0, #16]
    51ea:	2b00      	cmp	r3, #0
    51ec:	d005      	beq.n	51fa <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    51ee:	6883      	ldr	r3, [r0, #8]
    51f0:	1c58      	adds	r0, r3, #1
    51f2:	68e1      	ldr	r1, [r4, #12]
    51f4:	4b07      	ldr	r3, [pc, #28]	; (5214 <advance_pointer+0x30>)
    51f6:	4798      	blx	r3
    51f8:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
    51fa:	6863      	ldr	r3, [r4, #4]
    51fc:	1c58      	adds	r0, r3, #1
    51fe:	68e1      	ldr	r1, [r4, #12]
    5200:	4b04      	ldr	r3, [pc, #16]	; (5214 <advance_pointer+0x30>)
    5202:	4798      	blx	r3
    5204:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
    5206:	68a3      	ldr	r3, [r4, #8]
    5208:	1a59      	subs	r1, r3, r1
    520a:	424a      	negs	r2, r1
    520c:	414a      	adcs	r2, r1
    520e:	7422      	strb	r2, [r4, #16]
 }
    5210:	bd10      	pop	{r4, pc}
    5212:	46c0      	nop			; (mov r8, r8)
    5214:	00006d5d 	.word	0x00006d5d

00005218 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
    5218:	b570      	push	{r4, r5, r6, lr}
    521a:	0005      	movs	r5, r0
    521c:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
    521e:	2014      	movs	r0, #20
    5220:	4b04      	ldr	r3, [pc, #16]	; (5234 <circular_buf_init+0x1c>)
    5222:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
    5224:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
    5226:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
    5228:	2300      	movs	r3, #0
    522a:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
    522c:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
    522e:	7403      	strb	r3, [r0, #16]
 }
    5230:	bd70      	pop	{r4, r5, r6, pc}
    5232:	46c0      	nop			; (mov r8, r8)
    5234:	000089ed 	.word	0x000089ed

00005238 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
    5238:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
    523a:	6803      	ldr	r3, [r0, #0]
    523c:	6842      	ldr	r2, [r0, #4]
    523e:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
    5240:	4b01      	ldr	r3, [pc, #4]	; (5248 <circular_buf_put+0x10>)
    5242:	4798      	blx	r3
 }
    5244:	bd10      	pop	{r4, pc}
    5246:	46c0      	nop			; (mov r8, r8)
    5248:	000051e5 	.word	0x000051e5

0000524c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
    524c:	7c02      	ldrb	r2, [r0, #16]
    524e:	2300      	movs	r3, #0
    5250:	2a00      	cmp	r2, #0
    5252:	d105      	bne.n	5260 <circular_buf_empty+0x14>
    5254:	6843      	ldr	r3, [r0, #4]
    5256:	6880      	ldr	r0, [r0, #8]
    5258:	1a1b      	subs	r3, r3, r0
    525a:	4258      	negs	r0, r3
    525c:	4143      	adcs	r3, r0
    525e:	b2db      	uxtb	r3, r3
    5260:	0018      	movs	r0, r3
 }
    5262:	4770      	bx	lr

00005264 <circular_buf_get>:
 {
    5264:	b570      	push	{r4, r5, r6, lr}
    5266:	0004      	movs	r4, r0
    5268:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
    526a:	4b0a      	ldr	r3, [pc, #40]	; (5294 <circular_buf_get+0x30>)
    526c:	4798      	blx	r3
    526e:	2800      	cmp	r0, #0
    5270:	d10d      	bne.n	528e <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
    5272:	6823      	ldr	r3, [r4, #0]
    5274:	68a2      	ldr	r2, [r4, #8]
    5276:	5c9b      	ldrb	r3, [r3, r2]
    5278:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
    527a:	2300      	movs	r3, #0
    527c:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
    527e:	68a3      	ldr	r3, [r4, #8]
    5280:	1c58      	adds	r0, r3, #1
    5282:	68e1      	ldr	r1, [r4, #12]
    5284:	4b04      	ldr	r3, [pc, #16]	; (5298 <circular_buf_get+0x34>)
    5286:	4798      	blx	r3
    5288:	60a1      	str	r1, [r4, #8]
		 r = 0;
    528a:	2000      	movs	r0, #0
 }
    528c:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
    528e:	2001      	movs	r0, #1
    5290:	4240      	negs	r0, r0
	 return r;
    5292:	e7fb      	b.n	528c <circular_buf_get+0x28>
    5294:	0000524d 	.word	0x0000524d
    5298:	00006d5d 	.word	0x00006d5d

0000529c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    529c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    529e:	4b06      	ldr	r3, [pc, #24]	; (52b8 <usart_write_callback+0x1c>)
    52a0:	6818      	ldr	r0, [r3, #0]
    52a2:	4906      	ldr	r1, [pc, #24]	; (52bc <usart_write_callback+0x20>)
    52a4:	4b06      	ldr	r3, [pc, #24]	; (52c0 <usart_write_callback+0x24>)
    52a6:	4798      	blx	r3
    52a8:	1c43      	adds	r3, r0, #1
    52aa:	d004      	beq.n	52b6 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    52ac:	2201      	movs	r2, #1
    52ae:	4903      	ldr	r1, [pc, #12]	; (52bc <usart_write_callback+0x20>)
    52b0:	4804      	ldr	r0, [pc, #16]	; (52c4 <usart_write_callback+0x28>)
    52b2:	4b05      	ldr	r3, [pc, #20]	; (52c8 <usart_write_callback+0x2c>)
    52b4:	4798      	blx	r3
	}
	
}
    52b6:	bd10      	pop	{r4, pc}
    52b8:	20004d2c 	.word	0x20004d2c
    52bc:	20004d28 	.word	0x20004d28
    52c0:	00005265 	.word	0x00005265
    52c4:	200048ec 	.word	0x200048ec
    52c8:	00005f31 	.word	0x00005f31

000052cc <usart_read_callback>:
{
    52cc:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    52ce:	4c07      	ldr	r4, [pc, #28]	; (52ec <usart_read_callback+0x20>)
    52d0:	7821      	ldrb	r1, [r4, #0]
    52d2:	4b07      	ldr	r3, [pc, #28]	; (52f0 <usart_read_callback+0x24>)
    52d4:	6818      	ldr	r0, [r3, #0]
    52d6:	4b07      	ldr	r3, [pc, #28]	; (52f4 <usart_read_callback+0x28>)
    52d8:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    52da:	2201      	movs	r2, #1
    52dc:	0021      	movs	r1, r4
    52de:	4806      	ldr	r0, [pc, #24]	; (52f8 <usart_read_callback+0x2c>)
    52e0:	4b06      	ldr	r3, [pc, #24]	; (52fc <usart_read_callback+0x30>)
    52e2:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR(); //Give binary semaphore
    52e4:	4b06      	ldr	r3, [pc, #24]	; (5300 <usart_read_callback+0x34>)
    52e6:	4798      	blx	r3
}
    52e8:	bd10      	pop	{r4, pc}
    52ea:	46c0      	nop			; (mov r8, r8)
    52ec:	20004924 	.word	0x20004924
    52f0:	20004920 	.word	0x20004920
    52f4:	00005239 	.word	0x00005239
    52f8:	200048ec 	.word	0x200048ec
    52fc:	00005f51 	.word	0x00005f51
    5300:	0000079d 	.word	0x0000079d

00005304 <InitializeSerialConsole>:
{
    5304:	b530      	push	{r4, r5, lr}
    5306:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    5308:	2580      	movs	r5, #128	; 0x80
    530a:	00ad      	lsls	r5, r5, #2
    530c:	0029      	movs	r1, r5
    530e:	4836      	ldr	r0, [pc, #216]	; (53e8 <InitializeSerialConsole+0xe4>)
    5310:	4c36      	ldr	r4, [pc, #216]	; (53ec <InitializeSerialConsole+0xe8>)
    5312:	47a0      	blx	r4
    5314:	4b36      	ldr	r3, [pc, #216]	; (53f0 <InitializeSerialConsole+0xec>)
    5316:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    5318:	0029      	movs	r1, r5
    531a:	4836      	ldr	r0, [pc, #216]	; (53f4 <InitializeSerialConsole+0xf0>)
    531c:	47a0      	blx	r4
    531e:	4b36      	ldr	r3, [pc, #216]	; (53f8 <InitializeSerialConsole+0xf4>)
    5320:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5322:	2380      	movs	r3, #128	; 0x80
    5324:	05db      	lsls	r3, r3, #23
    5326:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5328:	2300      	movs	r3, #0
    532a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    532c:	22ff      	movs	r2, #255	; 0xff
    532e:	4669      	mov	r1, sp
    5330:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    5332:	2200      	movs	r2, #0
    5334:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5336:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5338:	2101      	movs	r1, #1
    533a:	2024      	movs	r0, #36	; 0x24
    533c:	466c      	mov	r4, sp
    533e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    5340:	3001      	adds	r0, #1
    5342:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    5344:	3125      	adds	r1, #37	; 0x25
    5346:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    5348:	3101      	adds	r1, #1
    534a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    534c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    534e:	3105      	adds	r1, #5
    5350:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    5352:	3101      	adds	r1, #1
    5354:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5356:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5358:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    535a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    535c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    535e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5360:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    5362:	2313      	movs	r3, #19
    5364:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5366:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    5368:	23e1      	movs	r3, #225	; 0xe1
    536a:	025b      	lsls	r3, r3, #9
    536c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    536e:	23c4      	movs	r3, #196	; 0xc4
    5370:	039b      	lsls	r3, r3, #14
    5372:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5374:	2301      	movs	r3, #1
    5376:	425b      	negs	r3, r3
    5378:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    537a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    537c:	4b1f      	ldr	r3, [pc, #124]	; (53fc <InitializeSerialConsole+0xf8>)
    537e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5380:	4b1f      	ldr	r3, [pc, #124]	; (5400 <InitializeSerialConsole+0xfc>)
    5382:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    5384:	4d1f      	ldr	r5, [pc, #124]	; (5404 <InitializeSerialConsole+0x100>)
    5386:	4c20      	ldr	r4, [pc, #128]	; (5408 <InitializeSerialConsole+0x104>)
    5388:	466a      	mov	r2, sp
    538a:	4920      	ldr	r1, [pc, #128]	; (540c <InitializeSerialConsole+0x108>)
    538c:	0028      	movs	r0, r5
    538e:	47a0      	blx	r4
    5390:	2800      	cmp	r0, #0
    5392:	d1f9      	bne.n	5388 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5394:	4d1b      	ldr	r5, [pc, #108]	; (5404 <InitializeSerialConsole+0x100>)
    5396:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5398:	0020      	movs	r0, r4
    539a:	4b1d      	ldr	r3, [pc, #116]	; (5410 <InitializeSerialConsole+0x10c>)
    539c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    539e:	231f      	movs	r3, #31
    53a0:	4018      	ands	r0, r3
    53a2:	3b1e      	subs	r3, #30
    53a4:	4083      	lsls	r3, r0
    53a6:	4a1b      	ldr	r2, [pc, #108]	; (5414 <InitializeSerialConsole+0x110>)
    53a8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    53aa:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    53ac:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    53ae:	2b00      	cmp	r3, #0
    53b0:	d1fc      	bne.n	53ac <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    53b2:	6823      	ldr	r3, [r4, #0]
    53b4:	2202      	movs	r2, #2
    53b6:	4313      	orrs	r3, r2
    53b8:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    53ba:	4c12      	ldr	r4, [pc, #72]	; (5404 <InitializeSerialConsole+0x100>)
    53bc:	2200      	movs	r2, #0
    53be:	4916      	ldr	r1, [pc, #88]	; (5418 <InitializeSerialConsole+0x114>)
    53c0:	0020      	movs	r0, r4
    53c2:	4d16      	ldr	r5, [pc, #88]	; (541c <InitializeSerialConsole+0x118>)
    53c4:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    53c6:	2201      	movs	r2, #1
    53c8:	4915      	ldr	r1, [pc, #84]	; (5420 <InitializeSerialConsole+0x11c>)
    53ca:	0020      	movs	r0, r4
    53cc:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    53ce:	2231      	movs	r2, #49	; 0x31
    53d0:	5ca3      	ldrb	r3, [r4, r2]
    53d2:	2103      	movs	r1, #3
    53d4:	430b      	orrs	r3, r1
    53d6:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    53d8:	3a30      	subs	r2, #48	; 0x30
    53da:	4912      	ldr	r1, [pc, #72]	; (5424 <InitializeSerialConsole+0x120>)
    53dc:	0020      	movs	r0, r4
    53de:	4b12      	ldr	r3, [pc, #72]	; (5428 <InitializeSerialConsole+0x124>)
    53e0:	4798      	blx	r3
}
    53e2:	b011      	add	sp, #68	; 0x44
    53e4:	bd30      	pop	{r4, r5, pc}
    53e6:	46c0      	nop			; (mov r8, r8)
    53e8:	20004b28 	.word	0x20004b28
    53ec:	00005219 	.word	0x00005219
    53f0:	20004920 	.word	0x20004920
    53f4:	20004928 	.word	0x20004928
    53f8:	20004d2c 	.word	0x20004d2c
    53fc:	002a0003 	.word	0x002a0003
    5400:	002b0003 	.word	0x002b0003
    5404:	200048ec 	.word	0x200048ec
    5408:	00005b49 	.word	0x00005b49
    540c:	42001800 	.word	0x42001800
    5410:	00005ab9 	.word	0x00005ab9
    5414:	e000e100 	.word	0xe000e100
    5418:	0000529d 	.word	0x0000529d
    541c:	00005f19 	.word	0x00005f19
    5420:	000052cd 	.word	0x000052cd
    5424:	20004924 	.word	0x20004924
    5428:	00005f51 	.word	0x00005f51

0000542c <SerialConsoleWriteString>:
{
    542c:	b5f0      	push	{r4, r5, r6, r7, lr}
    542e:	46c6      	mov	lr, r8
    5430:	b500      	push	{lr}
    5432:	0005      	movs	r5, r0
vTaskSuspendAll();
    5434:	4b14      	ldr	r3, [pc, #80]	; (5488 <SerialConsoleWriteString+0x5c>)
    5436:	4798      	blx	r3
    5438:	2400      	movs	r4, #0
	if(string != NULL)
    543a:	2d00      	cmp	r5, #0
    543c:	d012      	beq.n	5464 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
    543e:	4e13      	ldr	r6, [pc, #76]	; (548c <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
    5440:	4f13      	ldr	r7, [pc, #76]	; (5490 <SerialConsoleWriteString+0x64>)
    5442:	4b14      	ldr	r3, [pc, #80]	; (5494 <SerialConsoleWriteString+0x68>)
    5444:	4698      	mov	r8, r3
    5446:	e003      	b.n	5450 <SerialConsoleWriteString+0x24>
    5448:	5d29      	ldrb	r1, [r5, r4]
    544a:	6838      	ldr	r0, [r7, #0]
    544c:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    544e:	3401      	adds	r4, #1
    5450:	0028      	movs	r0, r5
    5452:	47b0      	blx	r6
    5454:	4284      	cmp	r4, r0
    5456:	d3f7      	bcc.n	5448 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    5458:	2101      	movs	r1, #1
    545a:	480f      	ldr	r0, [pc, #60]	; (5498 <SerialConsoleWriteString+0x6c>)
    545c:	4b0f      	ldr	r3, [pc, #60]	; (549c <SerialConsoleWriteString+0x70>)
    545e:	4798      	blx	r3
    5460:	2800      	cmp	r0, #0
    5462:	d004      	beq.n	546e <SerialConsoleWriteString+0x42>
xTaskResumeAll();
    5464:	4b0e      	ldr	r3, [pc, #56]	; (54a0 <SerialConsoleWriteString+0x74>)
    5466:	4798      	blx	r3
}
    5468:	bc04      	pop	{r2}
    546a:	4690      	mov	r8, r2
    546c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    546e:	4c0d      	ldr	r4, [pc, #52]	; (54a4 <SerialConsoleWriteString+0x78>)
    5470:	4b07      	ldr	r3, [pc, #28]	; (5490 <SerialConsoleWriteString+0x64>)
    5472:	6818      	ldr	r0, [r3, #0]
    5474:	0021      	movs	r1, r4
    5476:	4b0c      	ldr	r3, [pc, #48]	; (54a8 <SerialConsoleWriteString+0x7c>)
    5478:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    547a:	2201      	movs	r2, #1
    547c:	0021      	movs	r1, r4
    547e:	4806      	ldr	r0, [pc, #24]	; (5498 <SerialConsoleWriteString+0x6c>)
    5480:	4b0a      	ldr	r3, [pc, #40]	; (54ac <SerialConsoleWriteString+0x80>)
    5482:	4798      	blx	r3
    5484:	e7ee      	b.n	5464 <SerialConsoleWriteString+0x38>
    5486:	46c0      	nop			; (mov r8, r8)
    5488:	00004335 	.word	0x00004335
    548c:	00008c7d 	.word	0x00008c7d
    5490:	20004d2c 	.word	0x20004d2c
    5494:	00005239 	.word	0x00005239
    5498:	200048ec 	.word	0x200048ec
    549c:	00005f71 	.word	0x00005f71
    54a0:	000044dd 	.word	0x000044dd
    54a4:	20004d28 	.word	0x20004d28
    54a8:	00005265 	.word	0x00005265
    54ac:	00005f31 	.word	0x00005f31

000054b0 <SerialConsoleReadCharacter>:
{
    54b0:	b510      	push	{r4, lr}
    54b2:	0004      	movs	r4, r0
	vTaskSuspendAll();
    54b4:	4b05      	ldr	r3, [pc, #20]	; (54cc <SerialConsoleReadCharacter+0x1c>)
    54b6:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
    54b8:	4b05      	ldr	r3, [pc, #20]	; (54d0 <SerialConsoleReadCharacter+0x20>)
    54ba:	6818      	ldr	r0, [r3, #0]
    54bc:	0021      	movs	r1, r4
    54be:	4b05      	ldr	r3, [pc, #20]	; (54d4 <SerialConsoleReadCharacter+0x24>)
    54c0:	4798      	blx	r3
    54c2:	0004      	movs	r4, r0
	xTaskResumeAll();
    54c4:	4b04      	ldr	r3, [pc, #16]	; (54d8 <SerialConsoleReadCharacter+0x28>)
    54c6:	4798      	blx	r3
}
    54c8:	0020      	movs	r0, r4
    54ca:	bd10      	pop	{r4, pc}
    54cc:	00004335 	.word	0x00004335
    54d0:	20004920 	.word	0x20004920
    54d4:	00005265 	.word	0x00005265
    54d8:	000044dd 	.word	0x000044dd

000054dc <LogMessage>:
{
    54dc:	b40e      	push	{r1, r2, r3}
    54de:	b530      	push	{r4, r5, lr}
    54e0:	b082      	sub	sp, #8
return currentDebugLevel;
    54e2:	4b0a      	ldr	r3, [pc, #40]	; (550c <LogMessage+0x30>)
if(getLogLevel() <= level){
    54e4:	781b      	ldrb	r3, [r3, #0]
    54e6:	4283      	cmp	r3, r0
    54e8:	d904      	bls.n	54f4 <LogMessage+0x18>
};
    54ea:	b002      	add	sp, #8
    54ec:	bc30      	pop	{r4, r5}
    54ee:	bc08      	pop	{r3}
    54f0:	b003      	add	sp, #12
    54f2:	4718      	bx	r3
	va_start(ap, format);
    54f4:	ab06      	add	r3, sp, #24
    54f6:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
    54f8:	4c05      	ldr	r4, [pc, #20]	; (5510 <LogMessage+0x34>)
    54fa:	9a05      	ldr	r2, [sp, #20]
    54fc:	217f      	movs	r1, #127	; 0x7f
    54fe:	0020      	movs	r0, r4
    5500:	4d04      	ldr	r5, [pc, #16]	; (5514 <LogMessage+0x38>)
    5502:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
    5504:	0020      	movs	r0, r4
    5506:	4b04      	ldr	r3, [pc, #16]	; (5518 <LogMessage+0x3c>)
    5508:	4798      	blx	r3
};
    550a:	e7ee      	b.n	54ea <LogMessage+0xe>
    550c:	200037fc 	.word	0x200037fc
    5510:	2000486c 	.word	0x2000486c
    5514:	00008d2d 	.word	0x00008d2d
    5518:	0000542d 	.word	0x0000542d

0000551c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    551c:	4b0c      	ldr	r3, [pc, #48]	; (5550 <cpu_irq_enter_critical+0x34>)
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	2b00      	cmp	r3, #0
    5522:	d106      	bne.n	5532 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5524:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    5528:	2b00      	cmp	r3, #0
    552a:	d007      	beq.n	553c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    552c:	2200      	movs	r2, #0
    552e:	4b09      	ldr	r3, [pc, #36]	; (5554 <cpu_irq_enter_critical+0x38>)
    5530:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5532:	4a07      	ldr	r2, [pc, #28]	; (5550 <cpu_irq_enter_critical+0x34>)
    5534:	6813      	ldr	r3, [r2, #0]
    5536:	3301      	adds	r3, #1
    5538:	6013      	str	r3, [r2, #0]
}
    553a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    553c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    553e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5542:	2200      	movs	r2, #0
    5544:	4b04      	ldr	r3, [pc, #16]	; (5558 <cpu_irq_enter_critical+0x3c>)
    5546:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5548:	3201      	adds	r2, #1
    554a:	4b02      	ldr	r3, [pc, #8]	; (5554 <cpu_irq_enter_critical+0x38>)
    554c:	701a      	strb	r2, [r3, #0]
    554e:	e7f0      	b.n	5532 <cpu_irq_enter_critical+0x16>
    5550:	20003800 	.word	0x20003800
    5554:	20003804 	.word	0x20003804
    5558:	2000002c 	.word	0x2000002c

0000555c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    555c:	4b08      	ldr	r3, [pc, #32]	; (5580 <cpu_irq_leave_critical+0x24>)
    555e:	681a      	ldr	r2, [r3, #0]
    5560:	3a01      	subs	r2, #1
    5562:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5564:	681b      	ldr	r3, [r3, #0]
    5566:	2b00      	cmp	r3, #0
    5568:	d109      	bne.n	557e <cpu_irq_leave_critical+0x22>
    556a:	4b06      	ldr	r3, [pc, #24]	; (5584 <cpu_irq_leave_critical+0x28>)
    556c:	781b      	ldrb	r3, [r3, #0]
    556e:	2b00      	cmp	r3, #0
    5570:	d005      	beq.n	557e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    5572:	2201      	movs	r2, #1
    5574:	4b04      	ldr	r3, [pc, #16]	; (5588 <cpu_irq_leave_critical+0x2c>)
    5576:	701a      	strb	r2, [r3, #0]
    5578:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    557c:	b662      	cpsie	i
	}
}
    557e:	4770      	bx	lr
    5580:	20003800 	.word	0x20003800
    5584:	20003804 	.word	0x20003804
    5588:	2000002c 	.word	0x2000002c

0000558c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    558c:	b5f0      	push	{r4, r5, r6, r7, lr}
    558e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    5590:	ac01      	add	r4, sp, #4
    5592:	2501      	movs	r5, #1
    5594:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    5596:	2700      	movs	r7, #0
    5598:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    559a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    559c:	0021      	movs	r1, r4
    559e:	2017      	movs	r0, #23
    55a0:	4e06      	ldr	r6, [pc, #24]	; (55bc <system_board_init+0x30>)
    55a2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    55a4:	2280      	movs	r2, #128	; 0x80
    55a6:	0412      	lsls	r2, r2, #16
    55a8:	4b05      	ldr	r3, [pc, #20]	; (55c0 <system_board_init+0x34>)
    55aa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    55ac:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    55ae:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    55b0:	0021      	movs	r1, r4
    55b2:	2037      	movs	r0, #55	; 0x37
    55b4:	47b0      	blx	r6
}
    55b6:	b003      	add	sp, #12
    55b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55ba:	46c0      	nop			; (mov r8, r8)
    55bc:	0000569d 	.word	0x0000569d
    55c0:	41004400 	.word	0x41004400

000055c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    55c4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    55c6:	2200      	movs	r2, #0
    55c8:	4b10      	ldr	r3, [pc, #64]	; (560c <EIC_Handler+0x48>)
    55ca:	701a      	strb	r2, [r3, #0]
    55cc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    55ce:	4910      	ldr	r1, [pc, #64]	; (5610 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    55d0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    55d2:	4e10      	ldr	r6, [pc, #64]	; (5614 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    55d4:	4c0d      	ldr	r4, [pc, #52]	; (560c <EIC_Handler+0x48>)
    55d6:	e00a      	b.n	55ee <EIC_Handler+0x2a>
		return eics[eic_index];
    55d8:	490d      	ldr	r1, [pc, #52]	; (5610 <EIC_Handler+0x4c>)
    55da:	e008      	b.n	55ee <EIC_Handler+0x2a>
    55dc:	7823      	ldrb	r3, [r4, #0]
    55de:	3301      	adds	r3, #1
    55e0:	b2db      	uxtb	r3, r3
    55e2:	7023      	strb	r3, [r4, #0]
    55e4:	2b0f      	cmp	r3, #15
    55e6:	d810      	bhi.n	560a <EIC_Handler+0x46>
		return NULL;
    55e8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    55ea:	2b1f      	cmp	r3, #31
    55ec:	d9f4      	bls.n	55d8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    55ee:	0028      	movs	r0, r5
    55f0:	4018      	ands	r0, r3
    55f2:	2201      	movs	r2, #1
    55f4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    55f6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    55f8:	4210      	tst	r0, r2
    55fa:	d0ef      	beq.n	55dc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    55fc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    55fe:	009b      	lsls	r3, r3, #2
    5600:	599b      	ldr	r3, [r3, r6]
    5602:	2b00      	cmp	r3, #0
    5604:	d0ea      	beq.n	55dc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5606:	4798      	blx	r3
    5608:	e7e8      	b.n	55dc <EIC_Handler+0x18>
			}
		}
	}
}
    560a:	bd70      	pop	{r4, r5, r6, pc}
    560c:	20004d30 	.word	0x20004d30
    5610:	40001800 	.word	0x40001800
    5614:	20004d34 	.word	0x20004d34

00005618 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    5618:	4a04      	ldr	r2, [pc, #16]	; (562c <_extint_enable+0x14>)
    561a:	7813      	ldrb	r3, [r2, #0]
    561c:	2102      	movs	r1, #2
    561e:	430b      	orrs	r3, r1
    5620:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    5622:	7853      	ldrb	r3, [r2, #1]
    5624:	b25b      	sxtb	r3, r3
    5626:	2b00      	cmp	r3, #0
    5628:	dbfb      	blt.n	5622 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    562a:	4770      	bx	lr
    562c:	40001800 	.word	0x40001800

00005630 <_system_extint_init>:
{
    5630:	b500      	push	{lr}
    5632:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    5634:	4a12      	ldr	r2, [pc, #72]	; (5680 <_system_extint_init+0x50>)
    5636:	6993      	ldr	r3, [r2, #24]
    5638:	2140      	movs	r1, #64	; 0x40
    563a:	430b      	orrs	r3, r1
    563c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    563e:	a901      	add	r1, sp, #4
    5640:	2300      	movs	r3, #0
    5642:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    5644:	2005      	movs	r0, #5
    5646:	4b0f      	ldr	r3, [pc, #60]	; (5684 <_system_extint_init+0x54>)
    5648:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    564a:	2005      	movs	r0, #5
    564c:	4b0e      	ldr	r3, [pc, #56]	; (5688 <_system_extint_init+0x58>)
    564e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    5650:	4a0e      	ldr	r2, [pc, #56]	; (568c <_system_extint_init+0x5c>)
    5652:	7813      	ldrb	r3, [r2, #0]
    5654:	2101      	movs	r1, #1
    5656:	430b      	orrs	r3, r1
    5658:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    565a:	7853      	ldrb	r3, [r2, #1]
    565c:	b25b      	sxtb	r3, r3
    565e:	2b00      	cmp	r3, #0
    5660:	dbfb      	blt.n	565a <_system_extint_init+0x2a>
    5662:	4b0b      	ldr	r3, [pc, #44]	; (5690 <_system_extint_init+0x60>)
    5664:	0019      	movs	r1, r3
    5666:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    5668:	2200      	movs	r2, #0
    566a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    566c:	4299      	cmp	r1, r3
    566e:	d1fc      	bne.n	566a <_system_extint_init+0x3a>
    5670:	2210      	movs	r2, #16
    5672:	4b08      	ldr	r3, [pc, #32]	; (5694 <_system_extint_init+0x64>)
    5674:	601a      	str	r2, [r3, #0]
	_extint_enable();
    5676:	4b08      	ldr	r3, [pc, #32]	; (5698 <_system_extint_init+0x68>)
    5678:	4798      	blx	r3
}
    567a:	b003      	add	sp, #12
    567c:	bd00      	pop	{pc}
    567e:	46c0      	nop			; (mov r8, r8)
    5680:	40000400 	.word	0x40000400
    5684:	000066ed 	.word	0x000066ed
    5688:	00006661 	.word	0x00006661
    568c:	40001800 	.word	0x40001800
    5690:	20004d34 	.word	0x20004d34
    5694:	e000e100 	.word	0xe000e100
    5698:	00005619 	.word	0x00005619

0000569c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    569c:	b500      	push	{lr}
    569e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    56a0:	ab01      	add	r3, sp, #4
    56a2:	2280      	movs	r2, #128	; 0x80
    56a4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    56a6:	780a      	ldrb	r2, [r1, #0]
    56a8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    56aa:	784a      	ldrb	r2, [r1, #1]
    56ac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    56ae:	788a      	ldrb	r2, [r1, #2]
    56b0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    56b2:	0019      	movs	r1, r3
    56b4:	4b01      	ldr	r3, [pc, #4]	; (56bc <port_pin_set_config+0x20>)
    56b6:	4798      	blx	r3
}
    56b8:	b003      	add	sp, #12
    56ba:	bd00      	pop	{pc}
    56bc:	00006815 	.word	0x00006815

000056c0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    56c0:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    56c2:	4b0f      	ldr	r3, [pc, #60]	; (5700 <RTC_Handler+0x40>)
    56c4:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    56c6:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    56c8:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    56ca:	8a13      	ldrh	r3, [r2, #16]
    56cc:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    56ce:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    56d0:	79e3      	ldrb	r3, [r4, #7]
    56d2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    56d4:	b258      	sxtb	r0, r3
    56d6:	2800      	cmp	r0, #0
    56d8:	db06      	blt.n	56e8 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    56da:	07db      	lsls	r3, r3, #31
    56dc:	d503      	bpl.n	56e6 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    56de:	07cb      	lsls	r3, r1, #31
    56e0:	d40a      	bmi.n	56f8 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    56e2:	2301      	movs	r3, #1
    56e4:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    56e6:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    56e8:	078b      	lsls	r3, r1, #30
    56ea:	d402      	bmi.n	56f2 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    56ec:	2380      	movs	r3, #128	; 0x80
    56ee:	7223      	strb	r3, [r4, #8]
    56f0:	e7f9      	b.n	56e6 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    56f2:	68d3      	ldr	r3, [r2, #12]
    56f4:	4798      	blx	r3
    56f6:	e7f9      	b.n	56ec <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    56f8:	6893      	ldr	r3, [r2, #8]
    56fa:	4798      	blx	r3
    56fc:	e7f1      	b.n	56e2 <RTC_Handler+0x22>
    56fe:	46c0      	nop			; (mov r8, r8)
    5700:	20004d74 	.word	0x20004d74

00005704 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5704:	b5f0      	push	{r4, r5, r6, r7, lr}
    5706:	46de      	mov	lr, fp
    5708:	4657      	mov	r7, sl
    570a:	464e      	mov	r6, r9
    570c:	4645      	mov	r5, r8
    570e:	b5e0      	push	{r5, r6, r7, lr}
    5710:	b087      	sub	sp, #28
    5712:	4680      	mov	r8, r0
    5714:	9104      	str	r1, [sp, #16]
    5716:	0016      	movs	r6, r2
    5718:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    571a:	2200      	movs	r2, #0
    571c:	2300      	movs	r3, #0
    571e:	2100      	movs	r1, #0
    5720:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5722:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5724:	2001      	movs	r0, #1
    5726:	0021      	movs	r1, r4
    5728:	9600      	str	r6, [sp, #0]
    572a:	9701      	str	r7, [sp, #4]
    572c:	465c      	mov	r4, fp
    572e:	9403      	str	r4, [sp, #12]
    5730:	4644      	mov	r4, r8
    5732:	9405      	str	r4, [sp, #20]
    5734:	e013      	b.n	575e <long_division+0x5a>
    5736:	2420      	movs	r4, #32
    5738:	1a64      	subs	r4, r4, r1
    573a:	0005      	movs	r5, r0
    573c:	40e5      	lsrs	r5, r4
    573e:	46a8      	mov	r8, r5
    5740:	e014      	b.n	576c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5742:	9c00      	ldr	r4, [sp, #0]
    5744:	9d01      	ldr	r5, [sp, #4]
    5746:	1b12      	subs	r2, r2, r4
    5748:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    574a:	465c      	mov	r4, fp
    574c:	464d      	mov	r5, r9
    574e:	432c      	orrs	r4, r5
    5750:	46a3      	mov	fp, r4
    5752:	9c03      	ldr	r4, [sp, #12]
    5754:	4645      	mov	r5, r8
    5756:	432c      	orrs	r4, r5
    5758:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    575a:	3901      	subs	r1, #1
    575c:	d325      	bcc.n	57aa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    575e:	2420      	movs	r4, #32
    5760:	4264      	negs	r4, r4
    5762:	190c      	adds	r4, r1, r4
    5764:	d4e7      	bmi.n	5736 <long_division+0x32>
    5766:	0005      	movs	r5, r0
    5768:	40a5      	lsls	r5, r4
    576a:	46a8      	mov	r8, r5
    576c:	0004      	movs	r4, r0
    576e:	408c      	lsls	r4, r1
    5770:	46a1      	mov	r9, r4
		r = r << 1;
    5772:	1892      	adds	r2, r2, r2
    5774:	415b      	adcs	r3, r3
    5776:	0014      	movs	r4, r2
    5778:	001d      	movs	r5, r3
		if (n & bit_shift) {
    577a:	9e05      	ldr	r6, [sp, #20]
    577c:	464f      	mov	r7, r9
    577e:	403e      	ands	r6, r7
    5780:	46b4      	mov	ip, r6
    5782:	9e04      	ldr	r6, [sp, #16]
    5784:	4647      	mov	r7, r8
    5786:	403e      	ands	r6, r7
    5788:	46b2      	mov	sl, r6
    578a:	4666      	mov	r6, ip
    578c:	4657      	mov	r7, sl
    578e:	433e      	orrs	r6, r7
    5790:	d003      	beq.n	579a <long_division+0x96>
			r |= 0x01;
    5792:	0006      	movs	r6, r0
    5794:	4326      	orrs	r6, r4
    5796:	0032      	movs	r2, r6
    5798:	002b      	movs	r3, r5
		if (r >= d) {
    579a:	9c00      	ldr	r4, [sp, #0]
    579c:	9d01      	ldr	r5, [sp, #4]
    579e:	429d      	cmp	r5, r3
    57a0:	d8db      	bhi.n	575a <long_division+0x56>
    57a2:	d1ce      	bne.n	5742 <long_division+0x3e>
    57a4:	4294      	cmp	r4, r2
    57a6:	d8d8      	bhi.n	575a <long_division+0x56>
    57a8:	e7cb      	b.n	5742 <long_division+0x3e>
    57aa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    57ac:	4658      	mov	r0, fp
    57ae:	0019      	movs	r1, r3
    57b0:	b007      	add	sp, #28
    57b2:	bc3c      	pop	{r2, r3, r4, r5}
    57b4:	4690      	mov	r8, r2
    57b6:	4699      	mov	r9, r3
    57b8:	46a2      	mov	sl, r4
    57ba:	46ab      	mov	fp, r5
    57bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000057be <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    57be:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    57c0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    57c2:	2340      	movs	r3, #64	; 0x40
    57c4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    57c6:	4281      	cmp	r1, r0
    57c8:	d202      	bcs.n	57d0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    57ca:	0018      	movs	r0, r3
    57cc:	bd10      	pop	{r4, pc}
		baud_calculated++;
    57ce:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    57d0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    57d2:	1c63      	adds	r3, r4, #1
    57d4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    57d6:	4288      	cmp	r0, r1
    57d8:	d9f9      	bls.n	57ce <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    57da:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    57dc:	2cff      	cmp	r4, #255	; 0xff
    57de:	d8f4      	bhi.n	57ca <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    57e0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    57e2:	2300      	movs	r3, #0
    57e4:	e7f1      	b.n	57ca <_sercom_get_sync_baud_val+0xc>
	...

000057e8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    57e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ea:	b083      	sub	sp, #12
    57ec:	000f      	movs	r7, r1
    57ee:	0016      	movs	r6, r2
    57f0:	aa08      	add	r2, sp, #32
    57f2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    57f4:	0004      	movs	r4, r0
    57f6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    57f8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    57fa:	42bc      	cmp	r4, r7
    57fc:	d902      	bls.n	5804 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    57fe:	0010      	movs	r0, r2
    5800:	b003      	add	sp, #12
    5802:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5804:	2b00      	cmp	r3, #0
    5806:	d114      	bne.n	5832 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5808:	0002      	movs	r2, r0
    580a:	0008      	movs	r0, r1
    580c:	2100      	movs	r1, #0
    580e:	4c19      	ldr	r4, [pc, #100]	; (5874 <_sercom_get_async_baud_val+0x8c>)
    5810:	47a0      	blx	r4
    5812:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5814:	003a      	movs	r2, r7
    5816:	2300      	movs	r3, #0
    5818:	2000      	movs	r0, #0
    581a:	4c17      	ldr	r4, [pc, #92]	; (5878 <_sercom_get_async_baud_val+0x90>)
    581c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    581e:	2200      	movs	r2, #0
    5820:	2301      	movs	r3, #1
    5822:	1a12      	subs	r2, r2, r0
    5824:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5826:	0c12      	lsrs	r2, r2, #16
    5828:	041b      	lsls	r3, r3, #16
    582a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    582c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    582e:	2200      	movs	r2, #0
    5830:	e7e5      	b.n	57fe <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5832:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5834:	2b01      	cmp	r3, #1
    5836:	d1f9      	bne.n	582c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5838:	000a      	movs	r2, r1
    583a:	2300      	movs	r3, #0
    583c:	2100      	movs	r1, #0
    583e:	4c0d      	ldr	r4, [pc, #52]	; (5874 <_sercom_get_async_baud_val+0x8c>)
    5840:	47a0      	blx	r4
    5842:	0002      	movs	r2, r0
    5844:	000b      	movs	r3, r1
    5846:	9200      	str	r2, [sp, #0]
    5848:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    584a:	0038      	movs	r0, r7
    584c:	2100      	movs	r1, #0
    584e:	4c0a      	ldr	r4, [pc, #40]	; (5878 <_sercom_get_async_baud_val+0x90>)
    5850:	47a0      	blx	r4
    5852:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5854:	2380      	movs	r3, #128	; 0x80
    5856:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5858:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    585a:	4298      	cmp	r0, r3
    585c:	d8cf      	bhi.n	57fe <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    585e:	0f79      	lsrs	r1, r7, #29
    5860:	00f8      	lsls	r0, r7, #3
    5862:	9a00      	ldr	r2, [sp, #0]
    5864:	9b01      	ldr	r3, [sp, #4]
    5866:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5868:	00ea      	lsls	r2, r5, #3
    586a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    586c:	b2d2      	uxtb	r2, r2
    586e:	0352      	lsls	r2, r2, #13
    5870:	432a      	orrs	r2, r5
    5872:	e7db      	b.n	582c <_sercom_get_async_baud_val+0x44>
    5874:	00006d69 	.word	0x00006d69
    5878:	00005705 	.word	0x00005705

0000587c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    587c:	b510      	push	{r4, lr}
    587e:	b082      	sub	sp, #8
    5880:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5882:	4b0e      	ldr	r3, [pc, #56]	; (58bc <sercom_set_gclk_generator+0x40>)
    5884:	781b      	ldrb	r3, [r3, #0]
    5886:	2b00      	cmp	r3, #0
    5888:	d007      	beq.n	589a <sercom_set_gclk_generator+0x1e>
    588a:	2900      	cmp	r1, #0
    588c:	d105      	bne.n	589a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    588e:	4b0b      	ldr	r3, [pc, #44]	; (58bc <sercom_set_gclk_generator+0x40>)
    5890:	785b      	ldrb	r3, [r3, #1]
    5892:	4283      	cmp	r3, r0
    5894:	d010      	beq.n	58b8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5896:	201d      	movs	r0, #29
    5898:	e00c      	b.n	58b4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    589a:	a901      	add	r1, sp, #4
    589c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    589e:	2013      	movs	r0, #19
    58a0:	4b07      	ldr	r3, [pc, #28]	; (58c0 <sercom_set_gclk_generator+0x44>)
    58a2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    58a4:	2013      	movs	r0, #19
    58a6:	4b07      	ldr	r3, [pc, #28]	; (58c4 <sercom_set_gclk_generator+0x48>)
    58a8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    58aa:	4b04      	ldr	r3, [pc, #16]	; (58bc <sercom_set_gclk_generator+0x40>)
    58ac:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    58ae:	2201      	movs	r2, #1
    58b0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    58b2:	2000      	movs	r0, #0
}
    58b4:	b002      	add	sp, #8
    58b6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    58b8:	2000      	movs	r0, #0
    58ba:	e7fb      	b.n	58b4 <sercom_set_gclk_generator+0x38>
    58bc:	20003808 	.word	0x20003808
    58c0:	000066ed 	.word	0x000066ed
    58c4:	00006661 	.word	0x00006661

000058c8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    58c8:	4b40      	ldr	r3, [pc, #256]	; (59cc <_sercom_get_default_pad+0x104>)
    58ca:	4298      	cmp	r0, r3
    58cc:	d031      	beq.n	5932 <_sercom_get_default_pad+0x6a>
    58ce:	d90a      	bls.n	58e6 <_sercom_get_default_pad+0x1e>
    58d0:	4b3f      	ldr	r3, [pc, #252]	; (59d0 <_sercom_get_default_pad+0x108>)
    58d2:	4298      	cmp	r0, r3
    58d4:	d04d      	beq.n	5972 <_sercom_get_default_pad+0xaa>
    58d6:	4b3f      	ldr	r3, [pc, #252]	; (59d4 <_sercom_get_default_pad+0x10c>)
    58d8:	4298      	cmp	r0, r3
    58da:	d05a      	beq.n	5992 <_sercom_get_default_pad+0xca>
    58dc:	4b3e      	ldr	r3, [pc, #248]	; (59d8 <_sercom_get_default_pad+0x110>)
    58de:	4298      	cmp	r0, r3
    58e0:	d037      	beq.n	5952 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    58e2:	2000      	movs	r0, #0
}
    58e4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    58e6:	4b3d      	ldr	r3, [pc, #244]	; (59dc <_sercom_get_default_pad+0x114>)
    58e8:	4298      	cmp	r0, r3
    58ea:	d00c      	beq.n	5906 <_sercom_get_default_pad+0x3e>
    58ec:	4b3c      	ldr	r3, [pc, #240]	; (59e0 <_sercom_get_default_pad+0x118>)
    58ee:	4298      	cmp	r0, r3
    58f0:	d1f7      	bne.n	58e2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    58f2:	2901      	cmp	r1, #1
    58f4:	d017      	beq.n	5926 <_sercom_get_default_pad+0x5e>
    58f6:	2900      	cmp	r1, #0
    58f8:	d05d      	beq.n	59b6 <_sercom_get_default_pad+0xee>
    58fa:	2902      	cmp	r1, #2
    58fc:	d015      	beq.n	592a <_sercom_get_default_pad+0x62>
    58fe:	2903      	cmp	r1, #3
    5900:	d015      	beq.n	592e <_sercom_get_default_pad+0x66>
	return 0;
    5902:	2000      	movs	r0, #0
    5904:	e7ee      	b.n	58e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5906:	2901      	cmp	r1, #1
    5908:	d007      	beq.n	591a <_sercom_get_default_pad+0x52>
    590a:	2900      	cmp	r1, #0
    590c:	d051      	beq.n	59b2 <_sercom_get_default_pad+0xea>
    590e:	2902      	cmp	r1, #2
    5910:	d005      	beq.n	591e <_sercom_get_default_pad+0x56>
    5912:	2903      	cmp	r1, #3
    5914:	d005      	beq.n	5922 <_sercom_get_default_pad+0x5a>
	return 0;
    5916:	2000      	movs	r0, #0
    5918:	e7e4      	b.n	58e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    591a:	4832      	ldr	r0, [pc, #200]	; (59e4 <_sercom_get_default_pad+0x11c>)
    591c:	e7e2      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    591e:	4832      	ldr	r0, [pc, #200]	; (59e8 <_sercom_get_default_pad+0x120>)
    5920:	e7e0      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    5922:	4832      	ldr	r0, [pc, #200]	; (59ec <_sercom_get_default_pad+0x124>)
    5924:	e7de      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    5926:	4832      	ldr	r0, [pc, #200]	; (59f0 <_sercom_get_default_pad+0x128>)
    5928:	e7dc      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    592a:	4832      	ldr	r0, [pc, #200]	; (59f4 <_sercom_get_default_pad+0x12c>)
    592c:	e7da      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    592e:	4832      	ldr	r0, [pc, #200]	; (59f8 <_sercom_get_default_pad+0x130>)
    5930:	e7d8      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    5932:	2901      	cmp	r1, #1
    5934:	d007      	beq.n	5946 <_sercom_get_default_pad+0x7e>
    5936:	2900      	cmp	r1, #0
    5938:	d03f      	beq.n	59ba <_sercom_get_default_pad+0xf2>
    593a:	2902      	cmp	r1, #2
    593c:	d005      	beq.n	594a <_sercom_get_default_pad+0x82>
    593e:	2903      	cmp	r1, #3
    5940:	d005      	beq.n	594e <_sercom_get_default_pad+0x86>
	return 0;
    5942:	2000      	movs	r0, #0
    5944:	e7ce      	b.n	58e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5946:	482d      	ldr	r0, [pc, #180]	; (59fc <_sercom_get_default_pad+0x134>)
    5948:	e7cc      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    594a:	482d      	ldr	r0, [pc, #180]	; (5a00 <_sercom_get_default_pad+0x138>)
    594c:	e7ca      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    594e:	482d      	ldr	r0, [pc, #180]	; (5a04 <_sercom_get_default_pad+0x13c>)
    5950:	e7c8      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    5952:	2901      	cmp	r1, #1
    5954:	d007      	beq.n	5966 <_sercom_get_default_pad+0x9e>
    5956:	2900      	cmp	r1, #0
    5958:	d031      	beq.n	59be <_sercom_get_default_pad+0xf6>
    595a:	2902      	cmp	r1, #2
    595c:	d005      	beq.n	596a <_sercom_get_default_pad+0xa2>
    595e:	2903      	cmp	r1, #3
    5960:	d005      	beq.n	596e <_sercom_get_default_pad+0xa6>
	return 0;
    5962:	2000      	movs	r0, #0
    5964:	e7be      	b.n	58e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5966:	4828      	ldr	r0, [pc, #160]	; (5a08 <_sercom_get_default_pad+0x140>)
    5968:	e7bc      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    596a:	4828      	ldr	r0, [pc, #160]	; (5a0c <_sercom_get_default_pad+0x144>)
    596c:	e7ba      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    596e:	4828      	ldr	r0, [pc, #160]	; (5a10 <_sercom_get_default_pad+0x148>)
    5970:	e7b8      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    5972:	2901      	cmp	r1, #1
    5974:	d007      	beq.n	5986 <_sercom_get_default_pad+0xbe>
    5976:	2900      	cmp	r1, #0
    5978:	d023      	beq.n	59c2 <_sercom_get_default_pad+0xfa>
    597a:	2902      	cmp	r1, #2
    597c:	d005      	beq.n	598a <_sercom_get_default_pad+0xc2>
    597e:	2903      	cmp	r1, #3
    5980:	d005      	beq.n	598e <_sercom_get_default_pad+0xc6>
	return 0;
    5982:	2000      	movs	r0, #0
    5984:	e7ae      	b.n	58e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5986:	4823      	ldr	r0, [pc, #140]	; (5a14 <_sercom_get_default_pad+0x14c>)
    5988:	e7ac      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    598a:	4823      	ldr	r0, [pc, #140]	; (5a18 <_sercom_get_default_pad+0x150>)
    598c:	e7aa      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    598e:	4823      	ldr	r0, [pc, #140]	; (5a1c <_sercom_get_default_pad+0x154>)
    5990:	e7a8      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    5992:	2901      	cmp	r1, #1
    5994:	d007      	beq.n	59a6 <_sercom_get_default_pad+0xde>
    5996:	2900      	cmp	r1, #0
    5998:	d015      	beq.n	59c6 <_sercom_get_default_pad+0xfe>
    599a:	2902      	cmp	r1, #2
    599c:	d005      	beq.n	59aa <_sercom_get_default_pad+0xe2>
    599e:	2903      	cmp	r1, #3
    59a0:	d005      	beq.n	59ae <_sercom_get_default_pad+0xe6>
	return 0;
    59a2:	2000      	movs	r0, #0
    59a4:	e79e      	b.n	58e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    59a6:	481e      	ldr	r0, [pc, #120]	; (5a20 <_sercom_get_default_pad+0x158>)
    59a8:	e79c      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59aa:	481e      	ldr	r0, [pc, #120]	; (5a24 <_sercom_get_default_pad+0x15c>)
    59ac:	e79a      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59ae:	481e      	ldr	r0, [pc, #120]	; (5a28 <_sercom_get_default_pad+0x160>)
    59b0:	e798      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59b2:	481e      	ldr	r0, [pc, #120]	; (5a2c <_sercom_get_default_pad+0x164>)
    59b4:	e796      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59b6:	2003      	movs	r0, #3
    59b8:	e794      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59ba:	481d      	ldr	r0, [pc, #116]	; (5a30 <_sercom_get_default_pad+0x168>)
    59bc:	e792      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59be:	481d      	ldr	r0, [pc, #116]	; (5a34 <_sercom_get_default_pad+0x16c>)
    59c0:	e790      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59c2:	481d      	ldr	r0, [pc, #116]	; (5a38 <_sercom_get_default_pad+0x170>)
    59c4:	e78e      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59c6:	481d      	ldr	r0, [pc, #116]	; (5a3c <_sercom_get_default_pad+0x174>)
    59c8:	e78c      	b.n	58e4 <_sercom_get_default_pad+0x1c>
    59ca:	46c0      	nop			; (mov r8, r8)
    59cc:	42001000 	.word	0x42001000
    59d0:	42001800 	.word	0x42001800
    59d4:	42001c00 	.word	0x42001c00
    59d8:	42001400 	.word	0x42001400
    59dc:	42000800 	.word	0x42000800
    59e0:	42000c00 	.word	0x42000c00
    59e4:	00050003 	.word	0x00050003
    59e8:	00060003 	.word	0x00060003
    59ec:	00070003 	.word	0x00070003
    59f0:	00010003 	.word	0x00010003
    59f4:	001e0003 	.word	0x001e0003
    59f8:	001f0003 	.word	0x001f0003
    59fc:	00090003 	.word	0x00090003
    5a00:	000a0003 	.word	0x000a0003
    5a04:	000b0003 	.word	0x000b0003
    5a08:	00110003 	.word	0x00110003
    5a0c:	00120003 	.word	0x00120003
    5a10:	00130003 	.word	0x00130003
    5a14:	000d0003 	.word	0x000d0003
    5a18:	000e0003 	.word	0x000e0003
    5a1c:	000f0003 	.word	0x000f0003
    5a20:	00170003 	.word	0x00170003
    5a24:	00180003 	.word	0x00180003
    5a28:	00190003 	.word	0x00190003
    5a2c:	00040003 	.word	0x00040003
    5a30:	00080003 	.word	0x00080003
    5a34:	00100003 	.word	0x00100003
    5a38:	000c0003 	.word	0x000c0003
    5a3c:	00160003 	.word	0x00160003

00005a40 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5a40:	b530      	push	{r4, r5, lr}
    5a42:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5a44:	4b0b      	ldr	r3, [pc, #44]	; (5a74 <_sercom_get_sercom_inst_index+0x34>)
    5a46:	466a      	mov	r2, sp
    5a48:	cb32      	ldmia	r3!, {r1, r4, r5}
    5a4a:	c232      	stmia	r2!, {r1, r4, r5}
    5a4c:	cb32      	ldmia	r3!, {r1, r4, r5}
    5a4e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5a50:	9b00      	ldr	r3, [sp, #0]
    5a52:	4283      	cmp	r3, r0
    5a54:	d00b      	beq.n	5a6e <_sercom_get_sercom_inst_index+0x2e>
    5a56:	2301      	movs	r3, #1
    5a58:	009a      	lsls	r2, r3, #2
    5a5a:	4669      	mov	r1, sp
    5a5c:	5852      	ldr	r2, [r2, r1]
    5a5e:	4282      	cmp	r2, r0
    5a60:	d006      	beq.n	5a70 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5a62:	3301      	adds	r3, #1
    5a64:	2b06      	cmp	r3, #6
    5a66:	d1f7      	bne.n	5a58 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5a68:	2000      	movs	r0, #0
}
    5a6a:	b007      	add	sp, #28
    5a6c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5a6e:	2300      	movs	r3, #0
			return i;
    5a70:	b2d8      	uxtb	r0, r3
    5a72:	e7fa      	b.n	5a6a <_sercom_get_sercom_inst_index+0x2a>
    5a74:	0000a490 	.word	0x0000a490

00005a78 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5a78:	4770      	bx	lr
	...

00005a7c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5a7e:	4b0a      	ldr	r3, [pc, #40]	; (5aa8 <_sercom_set_handler+0x2c>)
    5a80:	781b      	ldrb	r3, [r3, #0]
    5a82:	2b00      	cmp	r3, #0
    5a84:	d10c      	bne.n	5aa0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5a86:	4f09      	ldr	r7, [pc, #36]	; (5aac <_sercom_set_handler+0x30>)
    5a88:	4e09      	ldr	r6, [pc, #36]	; (5ab0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5a8a:	4d0a      	ldr	r5, [pc, #40]	; (5ab4 <_sercom_set_handler+0x38>)
    5a8c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5a8e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5a90:	195a      	adds	r2, r3, r5
    5a92:	6014      	str	r4, [r2, #0]
    5a94:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5a96:	2b18      	cmp	r3, #24
    5a98:	d1f9      	bne.n	5a8e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5a9a:	2201      	movs	r2, #1
    5a9c:	4b02      	ldr	r3, [pc, #8]	; (5aa8 <_sercom_set_handler+0x2c>)
    5a9e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5aa0:	0080      	lsls	r0, r0, #2
    5aa2:	4b02      	ldr	r3, [pc, #8]	; (5aac <_sercom_set_handler+0x30>)
    5aa4:	50c1      	str	r1, [r0, r3]
}
    5aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aa8:	2000380a 	.word	0x2000380a
    5aac:	2000380c 	.word	0x2000380c
    5ab0:	00005a79 	.word	0x00005a79
    5ab4:	20004d78 	.word	0x20004d78

00005ab8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5ab8:	b500      	push	{lr}
    5aba:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5abc:	2309      	movs	r3, #9
    5abe:	466a      	mov	r2, sp
    5ac0:	7013      	strb	r3, [r2, #0]
    5ac2:	3301      	adds	r3, #1
    5ac4:	7053      	strb	r3, [r2, #1]
    5ac6:	3301      	adds	r3, #1
    5ac8:	7093      	strb	r3, [r2, #2]
    5aca:	3301      	adds	r3, #1
    5acc:	70d3      	strb	r3, [r2, #3]
    5ace:	3301      	adds	r3, #1
    5ad0:	7113      	strb	r3, [r2, #4]
    5ad2:	3301      	adds	r3, #1
    5ad4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5ad6:	4b03      	ldr	r3, [pc, #12]	; (5ae4 <_sercom_get_interrupt_vector+0x2c>)
    5ad8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5ada:	466b      	mov	r3, sp
    5adc:	5618      	ldrsb	r0, [r3, r0]
}
    5ade:	b003      	add	sp, #12
    5ae0:	bd00      	pop	{pc}
    5ae2:	46c0      	nop			; (mov r8, r8)
    5ae4:	00005a41 	.word	0x00005a41

00005ae8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5ae8:	b510      	push	{r4, lr}
    5aea:	4b02      	ldr	r3, [pc, #8]	; (5af4 <SERCOM0_Handler+0xc>)
    5aec:	681b      	ldr	r3, [r3, #0]
    5aee:	2000      	movs	r0, #0
    5af0:	4798      	blx	r3
    5af2:	bd10      	pop	{r4, pc}
    5af4:	2000380c 	.word	0x2000380c

00005af8 <SERCOM1_Handler>:
    5af8:	b510      	push	{r4, lr}
    5afa:	4b02      	ldr	r3, [pc, #8]	; (5b04 <SERCOM1_Handler+0xc>)
    5afc:	685b      	ldr	r3, [r3, #4]
    5afe:	2001      	movs	r0, #1
    5b00:	4798      	blx	r3
    5b02:	bd10      	pop	{r4, pc}
    5b04:	2000380c 	.word	0x2000380c

00005b08 <SERCOM2_Handler>:
    5b08:	b510      	push	{r4, lr}
    5b0a:	4b02      	ldr	r3, [pc, #8]	; (5b14 <SERCOM2_Handler+0xc>)
    5b0c:	689b      	ldr	r3, [r3, #8]
    5b0e:	2002      	movs	r0, #2
    5b10:	4798      	blx	r3
    5b12:	bd10      	pop	{r4, pc}
    5b14:	2000380c 	.word	0x2000380c

00005b18 <SERCOM3_Handler>:
    5b18:	b510      	push	{r4, lr}
    5b1a:	4b02      	ldr	r3, [pc, #8]	; (5b24 <SERCOM3_Handler+0xc>)
    5b1c:	68db      	ldr	r3, [r3, #12]
    5b1e:	2003      	movs	r0, #3
    5b20:	4798      	blx	r3
    5b22:	bd10      	pop	{r4, pc}
    5b24:	2000380c 	.word	0x2000380c

00005b28 <SERCOM4_Handler>:
    5b28:	b510      	push	{r4, lr}
    5b2a:	4b02      	ldr	r3, [pc, #8]	; (5b34 <SERCOM4_Handler+0xc>)
    5b2c:	691b      	ldr	r3, [r3, #16]
    5b2e:	2004      	movs	r0, #4
    5b30:	4798      	blx	r3
    5b32:	bd10      	pop	{r4, pc}
    5b34:	2000380c 	.word	0x2000380c

00005b38 <SERCOM5_Handler>:
    5b38:	b510      	push	{r4, lr}
    5b3a:	4b02      	ldr	r3, [pc, #8]	; (5b44 <SERCOM5_Handler+0xc>)
    5b3c:	695b      	ldr	r3, [r3, #20]
    5b3e:	2005      	movs	r0, #5
    5b40:	4798      	blx	r3
    5b42:	bd10      	pop	{r4, pc}
    5b44:	2000380c 	.word	0x2000380c

00005b48 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b4a:	46de      	mov	lr, fp
    5b4c:	4657      	mov	r7, sl
    5b4e:	464e      	mov	r6, r9
    5b50:	4645      	mov	r5, r8
    5b52:	b5e0      	push	{r5, r6, r7, lr}
    5b54:	b091      	sub	sp, #68	; 0x44
    5b56:	0005      	movs	r5, r0
    5b58:	000c      	movs	r4, r1
    5b5a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5b5c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5b5e:	0008      	movs	r0, r1
    5b60:	4bbc      	ldr	r3, [pc, #752]	; (5e54 <usart_init+0x30c>)
    5b62:	4798      	blx	r3
    5b64:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5b66:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5b68:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5b6a:	07db      	lsls	r3, r3, #31
    5b6c:	d506      	bpl.n	5b7c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5b6e:	b011      	add	sp, #68	; 0x44
    5b70:	bc3c      	pop	{r2, r3, r4, r5}
    5b72:	4690      	mov	r8, r2
    5b74:	4699      	mov	r9, r3
    5b76:	46a2      	mov	sl, r4
    5b78:	46ab      	mov	fp, r5
    5b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5b7c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    5b7e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5b80:	079b      	lsls	r3, r3, #30
    5b82:	d4f4      	bmi.n	5b6e <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
    5b84:	49b4      	ldr	r1, [pc, #720]	; (5e58 <usart_init+0x310>)
    5b86:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5b88:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5b8a:	2301      	movs	r3, #1
    5b8c:	40bb      	lsls	r3, r7
    5b8e:	4303      	orrs	r3, r0
    5b90:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    5b92:	a90f      	add	r1, sp, #60	; 0x3c
    5b94:	272d      	movs	r7, #45	; 0x2d
    5b96:	5df3      	ldrb	r3, [r6, r7]
    5b98:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5b9a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5b9c:	b2d3      	uxtb	r3, r2
    5b9e:	9302      	str	r3, [sp, #8]
    5ba0:	0018      	movs	r0, r3
    5ba2:	4bae      	ldr	r3, [pc, #696]	; (5e5c <usart_init+0x314>)
    5ba4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5ba6:	9802      	ldr	r0, [sp, #8]
    5ba8:	4bad      	ldr	r3, [pc, #692]	; (5e60 <usart_init+0x318>)
    5baa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5bac:	5df0      	ldrb	r0, [r6, r7]
    5bae:	2100      	movs	r1, #0
    5bb0:	4bac      	ldr	r3, [pc, #688]	; (5e64 <usart_init+0x31c>)
    5bb2:	4798      	blx	r3
	module->character_size = config->character_size;
    5bb4:	7af3      	ldrb	r3, [r6, #11]
    5bb6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5bb8:	2324      	movs	r3, #36	; 0x24
    5bba:	5cf3      	ldrb	r3, [r6, r3]
    5bbc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5bbe:	2325      	movs	r3, #37	; 0x25
    5bc0:	5cf3      	ldrb	r3, [r6, r3]
    5bc2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    5bc4:	7ef3      	ldrb	r3, [r6, #27]
    5bc6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5bc8:	7f33      	ldrb	r3, [r6, #28]
    5bca:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5bcc:	682b      	ldr	r3, [r5, #0]
    5bce:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5bd0:	0018      	movs	r0, r3
    5bd2:	4ba0      	ldr	r3, [pc, #640]	; (5e54 <usart_init+0x30c>)
    5bd4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5bd6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    5bd8:	2200      	movs	r2, #0
    5bda:	230e      	movs	r3, #14
    5bdc:	a906      	add	r1, sp, #24
    5bde:	468c      	mov	ip, r1
    5be0:	4463      	add	r3, ip
    5be2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    5be4:	8a32      	ldrh	r2, [r6, #16]
    5be6:	9202      	str	r2, [sp, #8]
    5be8:	2380      	movs	r3, #128	; 0x80
    5bea:	01db      	lsls	r3, r3, #7
    5bec:	429a      	cmp	r2, r3
    5bee:	d100      	bne.n	5bf2 <usart_init+0xaa>
    5bf0:	e09e      	b.n	5d30 <usart_init+0x1e8>
    5bf2:	d90f      	bls.n	5c14 <usart_init+0xcc>
    5bf4:	23c0      	movs	r3, #192	; 0xc0
    5bf6:	01db      	lsls	r3, r3, #7
    5bf8:	9a02      	ldr	r2, [sp, #8]
    5bfa:	429a      	cmp	r2, r3
    5bfc:	d100      	bne.n	5c00 <usart_init+0xb8>
    5bfe:	e092      	b.n	5d26 <usart_init+0x1de>
    5c00:	2380      	movs	r3, #128	; 0x80
    5c02:	021b      	lsls	r3, r3, #8
    5c04:	429a      	cmp	r2, r3
    5c06:	d000      	beq.n	5c0a <usart_init+0xc2>
    5c08:	e11f      	b.n	5e4a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5c0a:	2303      	movs	r3, #3
    5c0c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5c0e:	2300      	movs	r3, #0
    5c10:	9307      	str	r3, [sp, #28]
    5c12:	e008      	b.n	5c26 <usart_init+0xde>
	switch (config->sample_rate) {
    5c14:	2380      	movs	r3, #128	; 0x80
    5c16:	019b      	lsls	r3, r3, #6
    5c18:	429a      	cmp	r2, r3
    5c1a:	d000      	beq.n	5c1e <usart_init+0xd6>
    5c1c:	e115      	b.n	5e4a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5c1e:	2310      	movs	r3, #16
    5c20:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5c22:	3b0f      	subs	r3, #15
    5c24:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    5c26:	6833      	ldr	r3, [r6, #0]
    5c28:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5c2a:	68f3      	ldr	r3, [r6, #12]
    5c2c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5c2e:	6973      	ldr	r3, [r6, #20]
    5c30:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5c32:	7e33      	ldrb	r3, [r6, #24]
    5c34:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5c36:	2326      	movs	r3, #38	; 0x26
    5c38:	5cf3      	ldrb	r3, [r6, r3]
    5c3a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5c3c:	6873      	ldr	r3, [r6, #4]
    5c3e:	4699      	mov	r9, r3
	switch (transfer_mode)
    5c40:	2b00      	cmp	r3, #0
    5c42:	d100      	bne.n	5c46 <usart_init+0xfe>
    5c44:	e0a0      	b.n	5d88 <usart_init+0x240>
    5c46:	2380      	movs	r3, #128	; 0x80
    5c48:	055b      	lsls	r3, r3, #21
    5c4a:	4599      	cmp	r9, r3
    5c4c:	d100      	bne.n	5c50 <usart_init+0x108>
    5c4e:	e084      	b.n	5d5a <usart_init+0x212>
	if(config->encoding_format_enable) {
    5c50:	7e73      	ldrb	r3, [r6, #25]
    5c52:	2b00      	cmp	r3, #0
    5c54:	d002      	beq.n	5c5c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5c56:	7eb3      	ldrb	r3, [r6, #26]
    5c58:	4642      	mov	r2, r8
    5c5a:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5c5c:	682a      	ldr	r2, [r5, #0]
    5c5e:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    5c60:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5c62:	2b00      	cmp	r3, #0
    5c64:	d1fc      	bne.n	5c60 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    5c66:	330e      	adds	r3, #14
    5c68:	aa06      	add	r2, sp, #24
    5c6a:	4694      	mov	ip, r2
    5c6c:	4463      	add	r3, ip
    5c6e:	881b      	ldrh	r3, [r3, #0]
    5c70:	4642      	mov	r2, r8
    5c72:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5c74:	9b05      	ldr	r3, [sp, #20]
    5c76:	9a03      	ldr	r2, [sp, #12]
    5c78:	4313      	orrs	r3, r2
    5c7a:	9a04      	ldr	r2, [sp, #16]
    5c7c:	4313      	orrs	r3, r2
    5c7e:	464a      	mov	r2, r9
    5c80:	4313      	orrs	r3, r2
    5c82:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5c84:	465b      	mov	r3, fp
    5c86:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5c88:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5c8a:	4653      	mov	r3, sl
    5c8c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5c8e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5c90:	2327      	movs	r3, #39	; 0x27
    5c92:	5cf3      	ldrb	r3, [r6, r3]
    5c94:	2b00      	cmp	r3, #0
    5c96:	d101      	bne.n	5c9c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5c98:	3304      	adds	r3, #4
    5c9a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5c9c:	7e73      	ldrb	r3, [r6, #25]
    5c9e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5ca0:	7f32      	ldrb	r2, [r6, #28]
    5ca2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5ca4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5ca6:	7f72      	ldrb	r2, [r6, #29]
    5ca8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5caa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5cac:	2224      	movs	r2, #36	; 0x24
    5cae:	5cb2      	ldrb	r2, [r6, r2]
    5cb0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5cb2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5cb4:	2225      	movs	r2, #37	; 0x25
    5cb6:	5cb2      	ldrb	r2, [r6, r2]
    5cb8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5cba:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5cbc:	7ab1      	ldrb	r1, [r6, #10]
    5cbe:	7af2      	ldrb	r2, [r6, #11]
    5cc0:	4311      	orrs	r1, r2
    5cc2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    5cc4:	8933      	ldrh	r3, [r6, #8]
    5cc6:	2bff      	cmp	r3, #255	; 0xff
    5cc8:	d100      	bne.n	5ccc <usart_init+0x184>
    5cca:	e081      	b.n	5dd0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5ccc:	2280      	movs	r2, #128	; 0x80
    5cce:	0452      	lsls	r2, r2, #17
    5cd0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    5cd2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    5cd4:	232c      	movs	r3, #44	; 0x2c
    5cd6:	5cf3      	ldrb	r3, [r6, r3]
    5cd8:	2b00      	cmp	r3, #0
    5cda:	d103      	bne.n	5ce4 <usart_init+0x19c>
    5cdc:	4b62      	ldr	r3, [pc, #392]	; (5e68 <usart_init+0x320>)
    5cde:	789b      	ldrb	r3, [r3, #2]
    5ce0:	079b      	lsls	r3, r3, #30
    5ce2:	d501      	bpl.n	5ce8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5ce4:	2380      	movs	r3, #128	; 0x80
    5ce6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    5ce8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5cea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5cec:	2b00      	cmp	r3, #0
    5cee:	d1fc      	bne.n	5cea <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    5cf0:	4643      	mov	r3, r8
    5cf2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5cf4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5cf6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	d1fc      	bne.n	5cf6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    5cfc:	4643      	mov	r3, r8
    5cfe:	601f      	str	r7, [r3, #0]
    5d00:	ab0e      	add	r3, sp, #56	; 0x38
    5d02:	2280      	movs	r2, #128	; 0x80
    5d04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5d06:	2200      	movs	r2, #0
    5d08:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    5d0a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5d0c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    5d0e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5d10:	930a      	str	r3, [sp, #40]	; 0x28
    5d12:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5d14:	930b      	str	r3, [sp, #44]	; 0x2c
    5d16:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5d18:	930c      	str	r3, [sp, #48]	; 0x30
    5d1a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5d1c:	9302      	str	r3, [sp, #8]
    5d1e:	930d      	str	r3, [sp, #52]	; 0x34
    5d20:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5d22:	ae0a      	add	r6, sp, #40	; 0x28
    5d24:	e063      	b.n	5dee <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5d26:	2308      	movs	r3, #8
    5d28:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5d2a:	3b07      	subs	r3, #7
    5d2c:	9307      	str	r3, [sp, #28]
    5d2e:	e77a      	b.n	5c26 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    5d30:	6833      	ldr	r3, [r6, #0]
    5d32:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5d34:	68f3      	ldr	r3, [r6, #12]
    5d36:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5d38:	6973      	ldr	r3, [r6, #20]
    5d3a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5d3c:	7e33      	ldrb	r3, [r6, #24]
    5d3e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5d40:	2326      	movs	r3, #38	; 0x26
    5d42:	5cf3      	ldrb	r3, [r6, r3]
    5d44:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5d46:	6873      	ldr	r3, [r6, #4]
    5d48:	4699      	mov	r9, r3
	switch (transfer_mode)
    5d4a:	2b00      	cmp	r3, #0
    5d4c:	d018      	beq.n	5d80 <usart_init+0x238>
    5d4e:	2380      	movs	r3, #128	; 0x80
    5d50:	055b      	lsls	r3, r3, #21
    5d52:	4599      	cmp	r9, r3
    5d54:	d001      	beq.n	5d5a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    5d56:	2000      	movs	r0, #0
    5d58:	e025      	b.n	5da6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    5d5a:	2327      	movs	r3, #39	; 0x27
    5d5c:	5cf3      	ldrb	r3, [r6, r3]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d000      	beq.n	5d64 <usart_init+0x21c>
    5d62:	e775      	b.n	5c50 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5d64:	6a33      	ldr	r3, [r6, #32]
    5d66:	001f      	movs	r7, r3
    5d68:	b2c0      	uxtb	r0, r0
    5d6a:	4b40      	ldr	r3, [pc, #256]	; (5e6c <usart_init+0x324>)
    5d6c:	4798      	blx	r3
    5d6e:	0001      	movs	r1, r0
    5d70:	220e      	movs	r2, #14
    5d72:	ab06      	add	r3, sp, #24
    5d74:	469c      	mov	ip, r3
    5d76:	4462      	add	r2, ip
    5d78:	0038      	movs	r0, r7
    5d7a:	4b3d      	ldr	r3, [pc, #244]	; (5e70 <usart_init+0x328>)
    5d7c:	4798      	blx	r3
    5d7e:	e012      	b.n	5da6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5d80:	2308      	movs	r3, #8
    5d82:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5d84:	2300      	movs	r3, #0
    5d86:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5d88:	2327      	movs	r3, #39	; 0x27
    5d8a:	5cf3      	ldrb	r3, [r6, r3]
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d00e      	beq.n	5dae <usart_init+0x266>
				status_code =
    5d90:	9b06      	ldr	r3, [sp, #24]
    5d92:	9300      	str	r3, [sp, #0]
    5d94:	9b07      	ldr	r3, [sp, #28]
    5d96:	220e      	movs	r2, #14
    5d98:	a906      	add	r1, sp, #24
    5d9a:	468c      	mov	ip, r1
    5d9c:	4462      	add	r2, ip
    5d9e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5da0:	6a30      	ldr	r0, [r6, #32]
    5da2:	4f34      	ldr	r7, [pc, #208]	; (5e74 <usart_init+0x32c>)
    5da4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    5da6:	2800      	cmp	r0, #0
    5da8:	d000      	beq.n	5dac <usart_init+0x264>
    5daa:	e6e0      	b.n	5b6e <usart_init+0x26>
    5dac:	e750      	b.n	5c50 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    5dae:	6a33      	ldr	r3, [r6, #32]
    5db0:	001f      	movs	r7, r3
    5db2:	b2c0      	uxtb	r0, r0
    5db4:	4b2d      	ldr	r3, [pc, #180]	; (5e6c <usart_init+0x324>)
    5db6:	4798      	blx	r3
    5db8:	0001      	movs	r1, r0
				status_code =
    5dba:	9b06      	ldr	r3, [sp, #24]
    5dbc:	9300      	str	r3, [sp, #0]
    5dbe:	9b07      	ldr	r3, [sp, #28]
    5dc0:	220e      	movs	r2, #14
    5dc2:	a806      	add	r0, sp, #24
    5dc4:	4684      	mov	ip, r0
    5dc6:	4462      	add	r2, ip
    5dc8:	0038      	movs	r0, r7
    5dca:	4f2a      	ldr	r7, [pc, #168]	; (5e74 <usart_init+0x32c>)
    5dcc:	47b8      	blx	r7
    5dce:	e7ea      	b.n	5da6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    5dd0:	7ef3      	ldrb	r3, [r6, #27]
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d100      	bne.n	5dd8 <usart_init+0x290>
    5dd6:	e77d      	b.n	5cd4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5dd8:	2380      	movs	r3, #128	; 0x80
    5dda:	04db      	lsls	r3, r3, #19
    5ddc:	431f      	orrs	r7, r3
    5dde:	e779      	b.n	5cd4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5de0:	0020      	movs	r0, r4
    5de2:	4b25      	ldr	r3, [pc, #148]	; (5e78 <usart_init+0x330>)
    5de4:	4798      	blx	r3
    5de6:	e007      	b.n	5df8 <usart_init+0x2b0>
    5de8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    5dea:	2f04      	cmp	r7, #4
    5dec:	d00d      	beq.n	5e0a <usart_init+0x2c2>
    5dee:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5df0:	00bb      	lsls	r3, r7, #2
    5df2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    5df4:	2800      	cmp	r0, #0
    5df6:	d0f3      	beq.n	5de0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    5df8:	1c43      	adds	r3, r0, #1
    5dfa:	d0f5      	beq.n	5de8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5dfc:	a90e      	add	r1, sp, #56	; 0x38
    5dfe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5e00:	0c00      	lsrs	r0, r0, #16
    5e02:	b2c0      	uxtb	r0, r0
    5e04:	4b1d      	ldr	r3, [pc, #116]	; (5e7c <usart_init+0x334>)
    5e06:	4798      	blx	r3
    5e08:	e7ee      	b.n	5de8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    5e0a:	2300      	movs	r3, #0
    5e0c:	60eb      	str	r3, [r5, #12]
    5e0e:	612b      	str	r3, [r5, #16]
    5e10:	616b      	str	r3, [r5, #20]
    5e12:	61ab      	str	r3, [r5, #24]
    5e14:	61eb      	str	r3, [r5, #28]
    5e16:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    5e18:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5e1a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5e1c:	2200      	movs	r2, #0
    5e1e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5e20:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5e22:	3330      	adds	r3, #48	; 0x30
    5e24:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    5e26:	3301      	adds	r3, #1
    5e28:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    5e2a:	3301      	adds	r3, #1
    5e2c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5e2e:	3301      	adds	r3, #1
    5e30:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5e32:	6828      	ldr	r0, [r5, #0]
    5e34:	4b07      	ldr	r3, [pc, #28]	; (5e54 <usart_init+0x30c>)
    5e36:	4798      	blx	r3
    5e38:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5e3a:	4911      	ldr	r1, [pc, #68]	; (5e80 <usart_init+0x338>)
    5e3c:	4b11      	ldr	r3, [pc, #68]	; (5e84 <usart_init+0x33c>)
    5e3e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5e40:	00a4      	lsls	r4, r4, #2
    5e42:	4b11      	ldr	r3, [pc, #68]	; (5e88 <usart_init+0x340>)
    5e44:	50e5      	str	r5, [r4, r3]
	return status_code;
    5e46:	2000      	movs	r0, #0
    5e48:	e691      	b.n	5b6e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5e4a:	2310      	movs	r3, #16
    5e4c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5e4e:	2300      	movs	r3, #0
    5e50:	9307      	str	r3, [sp, #28]
    5e52:	e6e8      	b.n	5c26 <usart_init+0xde>
    5e54:	00005a41 	.word	0x00005a41
    5e58:	40000400 	.word	0x40000400
    5e5c:	000066ed 	.word	0x000066ed
    5e60:	00006661 	.word	0x00006661
    5e64:	0000587d 	.word	0x0000587d
    5e68:	41002000 	.word	0x41002000
    5e6c:	00006709 	.word	0x00006709
    5e70:	000057bf 	.word	0x000057bf
    5e74:	000057e9 	.word	0x000057e9
    5e78:	000058c9 	.word	0x000058c9
    5e7c:	00006815 	.word	0x00006815
    5e80:	00005f8d 	.word	0x00005f8d
    5e84:	00005a7d 	.word	0x00005a7d
    5e88:	20004d78 	.word	0x20004d78

00005e8c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e8e:	0006      	movs	r6, r0
    5e90:	000c      	movs	r4, r1
    5e92:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e94:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    5e96:	4b0a      	ldr	r3, [pc, #40]	; (5ec0 <_usart_write_buffer+0x34>)
    5e98:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5e9a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    5e9c:	b29b      	uxth	r3, r3
    5e9e:	2b00      	cmp	r3, #0
    5ea0:	d003      	beq.n	5eaa <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    5ea2:	4b08      	ldr	r3, [pc, #32]	; (5ec4 <_usart_write_buffer+0x38>)
    5ea4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    5ea6:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    5ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    5eaa:	85f5      	strh	r5, [r6, #46]	; 0x2e
    5eac:	4b05      	ldr	r3, [pc, #20]	; (5ec4 <_usart_write_buffer+0x38>)
    5eae:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    5eb0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    5eb2:	2205      	movs	r2, #5
    5eb4:	2333      	movs	r3, #51	; 0x33
    5eb6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    5eb8:	3b32      	subs	r3, #50	; 0x32
    5eba:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    5ebc:	2000      	movs	r0, #0
    5ebe:	e7f3      	b.n	5ea8 <_usart_write_buffer+0x1c>
    5ec0:	0000551d 	.word	0x0000551d
    5ec4:	0000555d 	.word	0x0000555d

00005ec8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eca:	0004      	movs	r4, r0
    5ecc:	000d      	movs	r5, r1
    5ece:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5ed0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    5ed2:	4b0f      	ldr	r3, [pc, #60]	; (5f10 <_usart_read_buffer+0x48>)
    5ed4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5ed6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    5ed8:	b29b      	uxth	r3, r3
    5eda:	2b00      	cmp	r3, #0
    5edc:	d003      	beq.n	5ee6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    5ede:	4b0d      	ldr	r3, [pc, #52]	; (5f14 <_usart_read_buffer+0x4c>)
    5ee0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    5ee2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    5ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    5ee6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    5ee8:	4b0a      	ldr	r3, [pc, #40]	; (5f14 <_usart_read_buffer+0x4c>)
    5eea:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    5eec:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5eee:	2205      	movs	r2, #5
    5ef0:	2332      	movs	r3, #50	; 0x32
    5ef2:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5ef4:	3b2e      	subs	r3, #46	; 0x2e
    5ef6:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    5ef8:	7a23      	ldrb	r3, [r4, #8]
    5efa:	2b00      	cmp	r3, #0
    5efc:	d001      	beq.n	5f02 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5efe:	2320      	movs	r3, #32
    5f00:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    5f02:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    5f04:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    5f06:	2b00      	cmp	r3, #0
    5f08:	d0ec      	beq.n	5ee4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5f0a:	2308      	movs	r3, #8
    5f0c:	75bb      	strb	r3, [r7, #22]
    5f0e:	e7e9      	b.n	5ee4 <_usart_read_buffer+0x1c>
    5f10:	0000551d 	.word	0x0000551d
    5f14:	0000555d 	.word	0x0000555d

00005f18 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5f18:	1c93      	adds	r3, r2, #2
    5f1a:	009b      	lsls	r3, r3, #2
    5f1c:	18c3      	adds	r3, r0, r3
    5f1e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5f20:	2130      	movs	r1, #48	; 0x30
    5f22:	2301      	movs	r3, #1
    5f24:	4093      	lsls	r3, r2
    5f26:	001a      	movs	r2, r3
    5f28:	5c43      	ldrb	r3, [r0, r1]
    5f2a:	4313      	orrs	r3, r2
    5f2c:	5443      	strb	r3, [r0, r1]
}
    5f2e:	4770      	bx	lr

00005f30 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5f30:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5f32:	2317      	movs	r3, #23
	if (length == 0) {
    5f34:	2a00      	cmp	r2, #0
    5f36:	d101      	bne.n	5f3c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    5f38:	0018      	movs	r0, r3
    5f3a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    5f3c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    5f3e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    5f40:	2c00      	cmp	r4, #0
    5f42:	d0f9      	beq.n	5f38 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    5f44:	4b01      	ldr	r3, [pc, #4]	; (5f4c <usart_write_buffer_job+0x1c>)
    5f46:	4798      	blx	r3
    5f48:	0003      	movs	r3, r0
    5f4a:	e7f5      	b.n	5f38 <usart_write_buffer_job+0x8>
    5f4c:	00005e8d 	.word	0x00005e8d

00005f50 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5f50:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5f52:	2317      	movs	r3, #23
	if (length == 0) {
    5f54:	2a00      	cmp	r2, #0
    5f56:	d101      	bne.n	5f5c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    5f58:	0018      	movs	r0, r3
    5f5a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    5f5c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    5f5e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    5f60:	2c00      	cmp	r4, #0
    5f62:	d0f9      	beq.n	5f58 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    5f64:	4b01      	ldr	r3, [pc, #4]	; (5f6c <usart_read_buffer_job+0x1c>)
    5f66:	4798      	blx	r3
    5f68:	0003      	movs	r3, r0
    5f6a:	e7f5      	b.n	5f58 <usart_read_buffer_job+0x8>
    5f6c:	00005ec9 	.word	0x00005ec9

00005f70 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    5f70:	2900      	cmp	r1, #0
    5f72:	d003      	beq.n	5f7c <usart_get_job_status+0xc>
    5f74:	2901      	cmp	r1, #1
    5f76:	d005      	beq.n	5f84 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5f78:	2017      	movs	r0, #23
    5f7a:	e002      	b.n	5f82 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    5f7c:	2332      	movs	r3, #50	; 0x32
    5f7e:	5cc0      	ldrb	r0, [r0, r3]
    5f80:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    5f82:	4770      	bx	lr
			status_code = module->tx_status;
    5f84:	2333      	movs	r3, #51	; 0x33
    5f86:	5cc0      	ldrb	r0, [r0, r3]
    5f88:	b2c0      	uxtb	r0, r0
			break;
    5f8a:	e7fa      	b.n	5f82 <usart_get_job_status+0x12>

00005f8c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    5f8e:	0080      	lsls	r0, r0, #2
    5f90:	4b62      	ldr	r3, [pc, #392]	; (611c <_usart_interrupt_handler+0x190>)
    5f92:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5f94:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5f96:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5f98:	2b00      	cmp	r3, #0
    5f9a:	d1fc      	bne.n	5f96 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5f9c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    5f9e:	7da6      	ldrb	r6, [r4, #22]
    5fa0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    5fa2:	2330      	movs	r3, #48	; 0x30
    5fa4:	5ceb      	ldrb	r3, [r5, r3]
    5fa6:	2231      	movs	r2, #49	; 0x31
    5fa8:	5caf      	ldrb	r7, [r5, r2]
    5faa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5fac:	07f3      	lsls	r3, r6, #31
    5fae:	d522      	bpl.n	5ff6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    5fb0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    5fb2:	b29b      	uxth	r3, r3
    5fb4:	2b00      	cmp	r3, #0
    5fb6:	d01c      	beq.n	5ff2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5fb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5fba:	7813      	ldrb	r3, [r2, #0]
    5fbc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5fbe:	1c51      	adds	r1, r2, #1
    5fc0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5fc2:	7969      	ldrb	r1, [r5, #5]
    5fc4:	2901      	cmp	r1, #1
    5fc6:	d00e      	beq.n	5fe6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5fc8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5fca:	05db      	lsls	r3, r3, #23
    5fcc:	0ddb      	lsrs	r3, r3, #23
    5fce:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5fd0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    5fd2:	3b01      	subs	r3, #1
    5fd4:	b29b      	uxth	r3, r3
    5fd6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5fd8:	2b00      	cmp	r3, #0
    5fda:	d10c      	bne.n	5ff6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5fdc:	3301      	adds	r3, #1
    5fde:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5fe0:	3301      	adds	r3, #1
    5fe2:	75a3      	strb	r3, [r4, #22]
    5fe4:	e007      	b.n	5ff6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5fe6:	7851      	ldrb	r1, [r2, #1]
    5fe8:	0209      	lsls	r1, r1, #8
    5fea:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    5fec:	3202      	adds	r2, #2
    5fee:	62aa      	str	r2, [r5, #40]	; 0x28
    5ff0:	e7eb      	b.n	5fca <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5ff2:	2301      	movs	r3, #1
    5ff4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5ff6:	07b3      	lsls	r3, r6, #30
    5ff8:	d506      	bpl.n	6008 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5ffa:	2302      	movs	r3, #2
    5ffc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    5ffe:	2200      	movs	r2, #0
    6000:	3331      	adds	r3, #49	; 0x31
    6002:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6004:	07fb      	lsls	r3, r7, #31
    6006:	d41a      	bmi.n	603e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6008:	0773      	lsls	r3, r6, #29
    600a:	d565      	bpl.n	60d8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    600c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    600e:	b29b      	uxth	r3, r3
    6010:	2b00      	cmp	r3, #0
    6012:	d05f      	beq.n	60d4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6014:	8b63      	ldrh	r3, [r4, #26]
    6016:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6018:	071a      	lsls	r2, r3, #28
    601a:	d414      	bmi.n	6046 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    601c:	223f      	movs	r2, #63	; 0x3f
    601e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6020:	2b00      	cmp	r3, #0
    6022:	d034      	beq.n	608e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6024:	079a      	lsls	r2, r3, #30
    6026:	d511      	bpl.n	604c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6028:	221a      	movs	r2, #26
    602a:	2332      	movs	r3, #50	; 0x32
    602c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    602e:	3b30      	subs	r3, #48	; 0x30
    6030:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6032:	077b      	lsls	r3, r7, #29
    6034:	d550      	bpl.n	60d8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6036:	0028      	movs	r0, r5
    6038:	696b      	ldr	r3, [r5, #20]
    603a:	4798      	blx	r3
    603c:	e04c      	b.n	60d8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    603e:	0028      	movs	r0, r5
    6040:	68eb      	ldr	r3, [r5, #12]
    6042:	4798      	blx	r3
    6044:	e7e0      	b.n	6008 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6046:	2237      	movs	r2, #55	; 0x37
    6048:	4013      	ands	r3, r2
    604a:	e7e9      	b.n	6020 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    604c:	075a      	lsls	r2, r3, #29
    604e:	d505      	bpl.n	605c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6050:	221e      	movs	r2, #30
    6052:	2332      	movs	r3, #50	; 0x32
    6054:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6056:	3b2e      	subs	r3, #46	; 0x2e
    6058:	8363      	strh	r3, [r4, #26]
    605a:	e7ea      	b.n	6032 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    605c:	07da      	lsls	r2, r3, #31
    605e:	d505      	bpl.n	606c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6060:	2213      	movs	r2, #19
    6062:	2332      	movs	r3, #50	; 0x32
    6064:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6066:	3b31      	subs	r3, #49	; 0x31
    6068:	8363      	strh	r3, [r4, #26]
    606a:	e7e2      	b.n	6032 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    606c:	06da      	lsls	r2, r3, #27
    606e:	d505      	bpl.n	607c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6070:	2242      	movs	r2, #66	; 0x42
    6072:	2332      	movs	r3, #50	; 0x32
    6074:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6076:	3b22      	subs	r3, #34	; 0x22
    6078:	8363      	strh	r3, [r4, #26]
    607a:	e7da      	b.n	6032 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    607c:	2220      	movs	r2, #32
    607e:	421a      	tst	r2, r3
    6080:	d0d7      	beq.n	6032 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6082:	3221      	adds	r2, #33	; 0x21
    6084:	2332      	movs	r3, #50	; 0x32
    6086:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6088:	3b12      	subs	r3, #18
    608a:	8363      	strh	r3, [r4, #26]
    608c:	e7d1      	b.n	6032 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    608e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6090:	05db      	lsls	r3, r3, #23
    6092:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6094:	b2da      	uxtb	r2, r3
    6096:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6098:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    609a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    609c:	1c51      	adds	r1, r2, #1
    609e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    60a0:	7969      	ldrb	r1, [r5, #5]
    60a2:	2901      	cmp	r1, #1
    60a4:	d010      	beq.n	60c8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    60a6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    60a8:	3b01      	subs	r3, #1
    60aa:	b29b      	uxth	r3, r3
    60ac:	85ab      	strh	r3, [r5, #44]	; 0x2c
    60ae:	2b00      	cmp	r3, #0
    60b0:	d112      	bne.n	60d8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    60b2:	3304      	adds	r3, #4
    60b4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    60b6:	2200      	movs	r2, #0
    60b8:	332e      	adds	r3, #46	; 0x2e
    60ba:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    60bc:	07bb      	lsls	r3, r7, #30
    60be:	d50b      	bpl.n	60d8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    60c0:	0028      	movs	r0, r5
    60c2:	692b      	ldr	r3, [r5, #16]
    60c4:	4798      	blx	r3
    60c6:	e007      	b.n	60d8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    60c8:	0a1b      	lsrs	r3, r3, #8
    60ca:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    60cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    60ce:	3301      	adds	r3, #1
    60d0:	626b      	str	r3, [r5, #36]	; 0x24
    60d2:	e7e8      	b.n	60a6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    60d4:	2304      	movs	r3, #4
    60d6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    60d8:	06f3      	lsls	r3, r6, #27
    60da:	d504      	bpl.n	60e6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    60dc:	2310      	movs	r3, #16
    60de:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    60e0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    60e2:	06fb      	lsls	r3, r7, #27
    60e4:	d40e      	bmi.n	6104 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    60e6:	06b3      	lsls	r3, r6, #26
    60e8:	d504      	bpl.n	60f4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    60ea:	2320      	movs	r3, #32
    60ec:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    60ee:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    60f0:	073b      	lsls	r3, r7, #28
    60f2:	d40b      	bmi.n	610c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    60f4:	0733      	lsls	r3, r6, #28
    60f6:	d504      	bpl.n	6102 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    60f8:	2308      	movs	r3, #8
    60fa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    60fc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    60fe:	06bb      	lsls	r3, r7, #26
    6100:	d408      	bmi.n	6114 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6104:	0028      	movs	r0, r5
    6106:	69eb      	ldr	r3, [r5, #28]
    6108:	4798      	blx	r3
    610a:	e7ec      	b.n	60e6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    610c:	0028      	movs	r0, r5
    610e:	69ab      	ldr	r3, [r5, #24]
    6110:	4798      	blx	r3
    6112:	e7ef      	b.n	60f4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6114:	6a2b      	ldr	r3, [r5, #32]
    6116:	0028      	movs	r0, r5
    6118:	4798      	blx	r3
}
    611a:	e7f2      	b.n	6102 <_usart_interrupt_handler+0x176>
    611c:	20004d78 	.word	0x20004d78

00006120 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6120:	b510      	push	{r4, lr}
	switch (clock_source) {
    6122:	2808      	cmp	r0, #8
    6124:	d803      	bhi.n	612e <system_clock_source_get_hz+0xe>
    6126:	0080      	lsls	r0, r0, #2
    6128:	4b1c      	ldr	r3, [pc, #112]	; (619c <system_clock_source_get_hz+0x7c>)
    612a:	581b      	ldr	r3, [r3, r0]
    612c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    612e:	2000      	movs	r0, #0
    6130:	e032      	b.n	6198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6132:	4b1b      	ldr	r3, [pc, #108]	; (61a0 <system_clock_source_get_hz+0x80>)
    6134:	6918      	ldr	r0, [r3, #16]
    6136:	e02f      	b.n	6198 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6138:	4b1a      	ldr	r3, [pc, #104]	; (61a4 <system_clock_source_get_hz+0x84>)
    613a:	6a1b      	ldr	r3, [r3, #32]
    613c:	059b      	lsls	r3, r3, #22
    613e:	0f9b      	lsrs	r3, r3, #30
    6140:	4819      	ldr	r0, [pc, #100]	; (61a8 <system_clock_source_get_hz+0x88>)
    6142:	40d8      	lsrs	r0, r3
    6144:	e028      	b.n	6198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6146:	4b16      	ldr	r3, [pc, #88]	; (61a0 <system_clock_source_get_hz+0x80>)
    6148:	6958      	ldr	r0, [r3, #20]
    614a:	e025      	b.n	6198 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    614c:	4b14      	ldr	r3, [pc, #80]	; (61a0 <system_clock_source_get_hz+0x80>)
    614e:	681b      	ldr	r3, [r3, #0]
			return 0;
    6150:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    6152:	079b      	lsls	r3, r3, #30
    6154:	d520      	bpl.n	6198 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6156:	4913      	ldr	r1, [pc, #76]	; (61a4 <system_clock_source_get_hz+0x84>)
    6158:	2210      	movs	r2, #16
    615a:	68cb      	ldr	r3, [r1, #12]
    615c:	421a      	tst	r2, r3
    615e:	d0fc      	beq.n	615a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    6160:	4b0f      	ldr	r3, [pc, #60]	; (61a0 <system_clock_source_get_hz+0x80>)
    6162:	681a      	ldr	r2, [r3, #0]
    6164:	2324      	movs	r3, #36	; 0x24
    6166:	4013      	ands	r3, r2
    6168:	2b04      	cmp	r3, #4
    616a:	d001      	beq.n	6170 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    616c:	480f      	ldr	r0, [pc, #60]	; (61ac <system_clock_source_get_hz+0x8c>)
    616e:	e013      	b.n	6198 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6170:	2000      	movs	r0, #0
    6172:	4b0f      	ldr	r3, [pc, #60]	; (61b0 <system_clock_source_get_hz+0x90>)
    6174:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6176:	4b0a      	ldr	r3, [pc, #40]	; (61a0 <system_clock_source_get_hz+0x80>)
    6178:	689b      	ldr	r3, [r3, #8]
    617a:	041b      	lsls	r3, r3, #16
    617c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    617e:	4358      	muls	r0, r3
    6180:	e00a      	b.n	6198 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    6182:	2350      	movs	r3, #80	; 0x50
    6184:	4a07      	ldr	r2, [pc, #28]	; (61a4 <system_clock_source_get_hz+0x84>)
    6186:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6188:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    618a:	075b      	lsls	r3, r3, #29
    618c:	d504      	bpl.n	6198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    618e:	4b04      	ldr	r3, [pc, #16]	; (61a0 <system_clock_source_get_hz+0x80>)
    6190:	68d8      	ldr	r0, [r3, #12]
    6192:	e001      	b.n	6198 <system_clock_source_get_hz+0x78>
		return 32768UL;
    6194:	2080      	movs	r0, #128	; 0x80
    6196:	0200      	lsls	r0, r0, #8
	}
}
    6198:	bd10      	pop	{r4, pc}
    619a:	46c0      	nop			; (mov r8, r8)
    619c:	0000a4a8 	.word	0x0000a4a8
    61a0:	20003824 	.word	0x20003824
    61a4:	40000800 	.word	0x40000800
    61a8:	007a1200 	.word	0x007a1200
    61ac:	02dc6c00 	.word	0x02dc6c00
    61b0:	00006709 	.word	0x00006709

000061b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    61b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    61b6:	490c      	ldr	r1, [pc, #48]	; (61e8 <system_clock_source_osc8m_set_config+0x34>)
    61b8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    61ba:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    61bc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    61be:	7840      	ldrb	r0, [r0, #1]
    61c0:	2201      	movs	r2, #1
    61c2:	4010      	ands	r0, r2
    61c4:	0180      	lsls	r0, r0, #6
    61c6:	2640      	movs	r6, #64	; 0x40
    61c8:	43b3      	bics	r3, r6
    61ca:	4303      	orrs	r3, r0
    61cc:	402a      	ands	r2, r5
    61ce:	01d2      	lsls	r2, r2, #7
    61d0:	2080      	movs	r0, #128	; 0x80
    61d2:	4383      	bics	r3, r0
    61d4:	4313      	orrs	r3, r2
    61d6:	2203      	movs	r2, #3
    61d8:	4022      	ands	r2, r4
    61da:	0212      	lsls	r2, r2, #8
    61dc:	4803      	ldr	r0, [pc, #12]	; (61ec <system_clock_source_osc8m_set_config+0x38>)
    61de:	4003      	ands	r3, r0
    61e0:	4313      	orrs	r3, r2
    61e2:	620b      	str	r3, [r1, #32]
}
    61e4:	bd70      	pop	{r4, r5, r6, pc}
    61e6:	46c0      	nop			; (mov r8, r8)
    61e8:	40000800 	.word	0x40000800
    61ec:	fffffcff 	.word	0xfffffcff

000061f0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    61f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61f2:	0005      	movs	r5, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    61f4:	68c4      	ldr	r4, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    61f6:	7d03      	ldrb	r3, [r0, #20]
    61f8:	2b01      	cmp	r3, #1
    61fa:	d03b      	beq.n	6274 <system_clock_source_dpll_set_config+0x84>
		refclk = refclk / (2 * (config->reference_divider + 1));
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    61fc:	68ab      	ldr	r3, [r5, #8]
    61fe:	0118      	lsls	r0, r3, #4
    6200:	0021      	movs	r1, r4
    6202:	4b20      	ldr	r3, [pc, #128]	; (6284 <system_clock_source_dpll_set_config+0x94>)
    6204:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    6206:	220f      	movs	r2, #15
    6208:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    620a:	0903      	lsrs	r3, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    620c:	782e      	ldrb	r6, [r5, #0]
    620e:	01f6      	lsls	r6, r6, #7
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    6210:	7869      	ldrb	r1, [r5, #1]
    6212:	0189      	lsls	r1, r1, #6
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    6214:	430e      	orrs	r6, r1
    6216:	b2f6      	uxtb	r6, r6
	SYSCTRL->DPLLCTRLA.reg =
    6218:	491b      	ldr	r1, [pc, #108]	; (6288 <system_clock_source_dpll_set_config+0x98>)
    621a:	2744      	movs	r7, #68	; 0x44
    621c:	55ce      	strb	r6, [r1, r7]

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    621e:	0416      	lsls	r6, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    6220:	3b01      	subs	r3, #1
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    6222:	051b      	lsls	r3, r3, #20
    6224:	0d1b      	lsrs	r3, r3, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    6226:	4333      	orrs	r3, r6
	SYSCTRL->DPLLRATIO.reg =
    6228:	648b      	str	r3, [r1, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    622a:	78ab      	ldrb	r3, [r5, #2]
    622c:	031b      	lsls	r3, r3, #12
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    622e:	78ee      	ldrb	r6, [r5, #3]
    6230:	00f6      	lsls	r6, r6, #3
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6232:	4333      	orrs	r3, r6
    6234:	792e      	ldrb	r6, [r5, #4]
    6236:	00b6      	lsls	r6, r6, #2
    6238:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    623a:	7caf      	ldrb	r7, [r5, #18]
    623c:	2603      	movs	r6, #3
    623e:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6240:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    6242:	8a2e      	ldrh	r6, [r5, #16]
    6244:	0436      	lsls	r6, r6, #16
    6246:	4f11      	ldr	r7, [pc, #68]	; (628c <system_clock_source_dpll_set_config+0x9c>)
    6248:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    624a:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    624c:	7cee      	ldrb	r6, [r5, #19]
    624e:	0236      	lsls	r6, r6, #8
    6250:	27e0      	movs	r7, #224	; 0xe0
    6252:	00ff      	lsls	r7, r7, #3
    6254:	403e      	ands	r6, r7
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6256:	4333      	orrs	r3, r6
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    6258:	7d2e      	ldrb	r6, [r5, #20]
    625a:	0136      	lsls	r6, r6, #4
    625c:	2530      	movs	r5, #48	; 0x30
    625e:	4035      	ands	r5, r6
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    6260:	432b      	orrs	r3, r5
	SYSCTRL->DPLLCTRLB.reg =
    6262:	64cb      	str	r3, [r1, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    6264:	230f      	movs	r3, #15
    6266:	4398      	bics	r0, r3
    6268:	1880      	adds	r0, r0, r2
    626a:	4344      	muls	r4, r0
    626c:	0924      	lsrs	r4, r4, #4
	_system_clock_inst.dpll.frequency =
    626e:	4b08      	ldr	r3, [pc, #32]	; (6290 <system_clock_source_dpll_set_config+0xa0>)
    6270:	60dc      	str	r4, [r3, #12]
}
    6272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		refclk = refclk / (2 * (config->reference_divider + 1));
    6274:	8a01      	ldrh	r1, [r0, #16]
    6276:	3101      	adds	r1, #1
    6278:	0049      	lsls	r1, r1, #1
    627a:	0020      	movs	r0, r4
    627c:	4b01      	ldr	r3, [pc, #4]	; (6284 <system_clock_source_dpll_set_config+0x94>)
    627e:	4798      	blx	r3
    6280:	0004      	movs	r4, r0
    6282:	e7bb      	b.n	61fc <system_clock_source_dpll_set_config+0xc>
    6284:	00006c51 	.word	0x00006c51
    6288:	40000800 	.word	0x40000800
    628c:	07ff0000 	.word	0x07ff0000
    6290:	20003824 	.word	0x20003824

00006294 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6294:	2808      	cmp	r0, #8
    6296:	d803      	bhi.n	62a0 <system_clock_source_enable+0xc>
    6298:	0080      	lsls	r0, r0, #2
    629a:	4b25      	ldr	r3, [pc, #148]	; (6330 <system_clock_source_enable+0x9c>)
    629c:	581b      	ldr	r3, [r3, r0]
    629e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    62a0:	2017      	movs	r0, #23
    62a2:	e044      	b.n	632e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    62a4:	4a23      	ldr	r2, [pc, #140]	; (6334 <system_clock_source_enable+0xa0>)
    62a6:	6a13      	ldr	r3, [r2, #32]
    62a8:	2102      	movs	r1, #2
    62aa:	430b      	orrs	r3, r1
    62ac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    62ae:	2000      	movs	r0, #0
    62b0:	e03d      	b.n	632e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    62b2:	4a20      	ldr	r2, [pc, #128]	; (6334 <system_clock_source_enable+0xa0>)
    62b4:	6993      	ldr	r3, [r2, #24]
    62b6:	2102      	movs	r1, #2
    62b8:	430b      	orrs	r3, r1
    62ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    62bc:	2000      	movs	r0, #0
		break;
    62be:	e036      	b.n	632e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    62c0:	4a1c      	ldr	r2, [pc, #112]	; (6334 <system_clock_source_enable+0xa0>)
    62c2:	8a13      	ldrh	r3, [r2, #16]
    62c4:	2102      	movs	r1, #2
    62c6:	430b      	orrs	r3, r1
    62c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    62ca:	2000      	movs	r0, #0
		break;
    62cc:	e02f      	b.n	632e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    62ce:	4a19      	ldr	r2, [pc, #100]	; (6334 <system_clock_source_enable+0xa0>)
    62d0:	8a93      	ldrh	r3, [r2, #20]
    62d2:	2102      	movs	r1, #2
    62d4:	430b      	orrs	r3, r1
    62d6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    62d8:	2000      	movs	r0, #0
		break;
    62da:	e028      	b.n	632e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    62dc:	4916      	ldr	r1, [pc, #88]	; (6338 <system_clock_source_enable+0xa4>)
    62de:	680b      	ldr	r3, [r1, #0]
    62e0:	2202      	movs	r2, #2
    62e2:	4313      	orrs	r3, r2
    62e4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    62e6:	4b13      	ldr	r3, [pc, #76]	; (6334 <system_clock_source_enable+0xa0>)
    62e8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    62ea:	0019      	movs	r1, r3
    62ec:	320e      	adds	r2, #14
    62ee:	68cb      	ldr	r3, [r1, #12]
    62f0:	421a      	tst	r2, r3
    62f2:	d0fc      	beq.n	62ee <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    62f4:	4a10      	ldr	r2, [pc, #64]	; (6338 <system_clock_source_enable+0xa4>)
    62f6:	6891      	ldr	r1, [r2, #8]
    62f8:	4b0e      	ldr	r3, [pc, #56]	; (6334 <system_clock_source_enable+0xa0>)
    62fa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    62fc:	6852      	ldr	r2, [r2, #4]
    62fe:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    6300:	2200      	movs	r2, #0
    6302:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6304:	0019      	movs	r1, r3
    6306:	3210      	adds	r2, #16
    6308:	68cb      	ldr	r3, [r1, #12]
    630a:	421a      	tst	r2, r3
    630c:	d0fc      	beq.n	6308 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    630e:	4b0a      	ldr	r3, [pc, #40]	; (6338 <system_clock_source_enable+0xa4>)
    6310:	681b      	ldr	r3, [r3, #0]
    6312:	b29b      	uxth	r3, r3
    6314:	4a07      	ldr	r2, [pc, #28]	; (6334 <system_clock_source_enable+0xa0>)
    6316:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    6318:	2000      	movs	r0, #0
    631a:	e008      	b.n	632e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    631c:	4905      	ldr	r1, [pc, #20]	; (6334 <system_clock_source_enable+0xa0>)
    631e:	2244      	movs	r2, #68	; 0x44
    6320:	5c8b      	ldrb	r3, [r1, r2]
    6322:	2002      	movs	r0, #2
    6324:	4303      	orrs	r3, r0
    6326:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6328:	2000      	movs	r0, #0
		break;
    632a:	e000      	b.n	632e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    632c:	2000      	movs	r0, #0
}
    632e:	4770      	bx	lr
    6330:	0000a4cc 	.word	0x0000a4cc
    6334:	40000800 	.word	0x40000800
    6338:	20003824 	.word	0x20003824

0000633c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    633c:	b5f0      	push	{r4, r5, r6, r7, lr}
    633e:	46de      	mov	lr, fp
    6340:	4657      	mov	r7, sl
    6342:	464e      	mov	r6, r9
    6344:	4645      	mov	r5, r8
    6346:	b5e0      	push	{r5, r6, r7, lr}
    6348:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    634a:	22c2      	movs	r2, #194	; 0xc2
    634c:	00d2      	lsls	r2, r2, #3
    634e:	4b4c      	ldr	r3, [pc, #304]	; (6480 <system_clock_init+0x144>)
    6350:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6352:	4a4c      	ldr	r2, [pc, #304]	; (6484 <system_clock_init+0x148>)
    6354:	6853      	ldr	r3, [r2, #4]
    6356:	211e      	movs	r1, #30
    6358:	438b      	bics	r3, r1
    635a:	3918      	subs	r1, #24
    635c:	430b      	orrs	r3, r1
    635e:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    6360:	2203      	movs	r2, #3
    6362:	ab01      	add	r3, sp, #4
    6364:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6366:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6368:	4d47      	ldr	r5, [pc, #284]	; (6488 <system_clock_init+0x14c>)
    636a:	b2e0      	uxtb	r0, r4
    636c:	a901      	add	r1, sp, #4
    636e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6370:	3401      	adds	r4, #1
    6372:	2c25      	cmp	r4, #37	; 0x25
    6374:	d1f9      	bne.n	636a <system_clock_init+0x2e>
	config->run_in_standby  = false;
    6376:	a80b      	add	r0, sp, #44	; 0x2c
    6378:	2500      	movs	r5, #0
    637a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    637c:	2601      	movs	r6, #1
    637e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6380:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6382:	4b42      	ldr	r3, [pc, #264]	; (648c <system_clock_init+0x150>)
    6384:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6386:	2006      	movs	r0, #6
    6388:	4b41      	ldr	r3, [pc, #260]	; (6490 <system_clock_init+0x154>)
    638a:	4699      	mov	r9, r3
    638c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    638e:	4b41      	ldr	r3, [pc, #260]	; (6494 <system_clock_init+0x158>)
    6390:	4798      	blx	r3
	config->high_when_disabled = false;
    6392:	ac01      	add	r4, sp, #4
    6394:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    6396:	2306      	movs	r3, #6
    6398:	469a      	mov	sl, r3
    639a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    639c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    639e:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    63a0:	2308      	movs	r3, #8
    63a2:	6063      	str	r3, [r4, #4]
    63a4:	0021      	movs	r1, r4
    63a6:	2001      	movs	r0, #1
    63a8:	4b3b      	ldr	r3, [pc, #236]	; (6498 <system_clock_init+0x15c>)
    63aa:	4698      	mov	r8, r3
    63ac:	4798      	blx	r3
    63ae:	2001      	movs	r0, #1
    63b0:	4f3a      	ldr	r7, [pc, #232]	; (649c <system_clock_init+0x160>)
    63b2:	47b8      	blx	r7
	config->division_factor    = 1;
    63b4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    63b6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    63b8:	7265      	strb	r5, [r4, #9]
    63ba:	2303      	movs	r3, #3
    63bc:	469b      	mov	fp, r3
    63be:	7023      	strb	r3, [r4, #0]
    63c0:	7226      	strb	r6, [r4, #8]
    63c2:	0021      	movs	r1, r4
    63c4:	2002      	movs	r0, #2
    63c6:	47c0      	blx	r8
    63c8:	2002      	movs	r0, #2
    63ca:	47b8      	blx	r7
	config->high_when_disabled = false;
    63cc:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    63ce:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    63d0:	7265      	strb	r5, [r4, #9]
    63d2:	465b      	mov	r3, fp
    63d4:	7023      	strb	r3, [r4, #0]
    63d6:	2320      	movs	r3, #32
    63d8:	6063      	str	r3, [r4, #4]
    63da:	0021      	movs	r1, r4
    63dc:	2004      	movs	r0, #4
    63de:	47c0      	blx	r8
    63e0:	2004      	movs	r0, #4
    63e2:	47b8      	blx	r7
	config->division_factor    = 1;
    63e4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    63e6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    63e8:	4653      	mov	r3, sl
    63ea:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    63ec:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    63ee:	7265      	strb	r5, [r4, #9]
    63f0:	0021      	movs	r1, r4
    63f2:	2005      	movs	r0, #5
    63f4:	47c0      	blx	r8
    63f6:	2005      	movs	r0, #5
    63f8:	47b8      	blx	r7
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    63fa:	a90a      	add	r1, sp, #40	; 0x28
    63fc:	700e      	strb	r6, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    63fe:	2001      	movs	r0, #1
    6400:	4b21      	ldr	r3, [pc, #132]	; (6488 <system_clock_init+0x14c>)
    6402:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    6404:	2001      	movs	r0, #1
    6406:	4b26      	ldr	r3, [pc, #152]	; (64a0 <system_clock_init+0x164>)
    6408:	4798      	blx	r3
	config->run_in_standby      = false;
    640a:	a804      	add	r0, sp, #16
    640c:	7045      	strb	r5, [r0, #1]
	config->lock_bypass         = false;
    640e:	7085      	strb	r5, [r0, #2]
	config->wake_up_fast        = false;
    6410:	70c5      	strb	r5, [r0, #3]
	config->low_power_enable    = false;
    6412:	7105      	strb	r5, [r0, #4]
	config->output_frequency    = 48000000;
    6414:	4b23      	ldr	r3, [pc, #140]	; (64a4 <system_clock_init+0x168>)
    6416:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    6418:	8206      	strh	r6, [r0, #16]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    641a:	74c5      	strb	r5, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    641c:	7485      	strb	r5, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    641e:	7005      	strb	r5, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    6420:	2302      	movs	r3, #2
    6422:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    6424:	4b20      	ldr	r3, [pc, #128]	; (64a8 <system_clock_init+0x16c>)
    6426:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    6428:	4b20      	ldr	r3, [pc, #128]	; (64ac <system_clock_init+0x170>)
    642a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    642c:	2008      	movs	r0, #8
    642e:	47c8      	blx	r9
		return ((SYSCTRL->DPLLSTATUS.reg &
    6430:	4813      	ldr	r0, [pc, #76]	; (6480 <system_clock_init+0x144>)
    6432:	2150      	movs	r1, #80	; 0x50
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    6434:	2203      	movs	r2, #3
		return ((SYSCTRL->DPLLSTATUS.reg &
    6436:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    6438:	4013      	ands	r3, r2
    643a:	2b03      	cmp	r3, #3
    643c:	d1fb      	bne.n	6436 <system_clock_init+0xfa>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    643e:	4910      	ldr	r1, [pc, #64]	; (6480 <system_clock_init+0x144>)
    6440:	2244      	movs	r2, #68	; 0x44
    6442:	5c88      	ldrb	r0, [r1, r2]
    6444:	3b83      	subs	r3, #131	; 0x83
    6446:	4303      	orrs	r3, r0
    6448:	548b      	strb	r3, [r1, r2]
	PM->CPUSEL.reg = (uint32_t)divider;
    644a:	4a19      	ldr	r2, [pc, #100]	; (64b0 <system_clock_init+0x174>)
    644c:	2300      	movs	r3, #0
    644e:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    6450:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    6452:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    6454:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    6456:	a901      	add	r1, sp, #4
    6458:	2201      	movs	r2, #1
    645a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    645c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    645e:	720b      	strb	r3, [r1, #8]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6460:	3308      	adds	r3, #8
    6462:	700b      	strb	r3, [r1, #0]
    6464:	724a      	strb	r2, [r1, #9]
    6466:	2000      	movs	r0, #0
    6468:	4b0b      	ldr	r3, [pc, #44]	; (6498 <system_clock_init+0x15c>)
    646a:	4798      	blx	r3
    646c:	2000      	movs	r0, #0
    646e:	4b0b      	ldr	r3, [pc, #44]	; (649c <system_clock_init+0x160>)
    6470:	4798      	blx	r3
#endif
}
    6472:	b00d      	add	sp, #52	; 0x34
    6474:	bc3c      	pop	{r2, r3, r4, r5}
    6476:	4690      	mov	r8, r2
    6478:	4699      	mov	r9, r3
    647a:	46a2      	mov	sl, r4
    647c:	46ab      	mov	fp, r5
    647e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6480:	40000800 	.word	0x40000800
    6484:	41004000 	.word	0x41004000
    6488:	000066ed 	.word	0x000066ed
    648c:	000061b5 	.word	0x000061b5
    6490:	00006295 	.word	0x00006295
    6494:	000064b5 	.word	0x000064b5
    6498:	000064d9 	.word	0x000064d9
    649c:	00006591 	.word	0x00006591
    64a0:	00006661 	.word	0x00006661
    64a4:	02dc6c00 	.word	0x02dc6c00
    64a8:	000f4240 	.word	0x000f4240
    64ac:	000061f1 	.word	0x000061f1
    64b0:	40000400 	.word	0x40000400

000064b4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    64b4:	4a06      	ldr	r2, [pc, #24]	; (64d0 <system_gclk_init+0x1c>)
    64b6:	6993      	ldr	r3, [r2, #24]
    64b8:	2108      	movs	r1, #8
    64ba:	430b      	orrs	r3, r1
    64bc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    64be:	2201      	movs	r2, #1
    64c0:	4b04      	ldr	r3, [pc, #16]	; (64d4 <system_gclk_init+0x20>)
    64c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    64c4:	0019      	movs	r1, r3
    64c6:	780b      	ldrb	r3, [r1, #0]
    64c8:	4213      	tst	r3, r2
    64ca:	d1fc      	bne.n	64c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    64cc:	4770      	bx	lr
    64ce:	46c0      	nop			; (mov r8, r8)
    64d0:	40000400 	.word	0x40000400
    64d4:	40000c00 	.word	0x40000c00

000064d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    64d8:	b570      	push	{r4, r5, r6, lr}
    64da:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    64dc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    64de:	780d      	ldrb	r5, [r1, #0]
    64e0:	022d      	lsls	r5, r5, #8
    64e2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    64e4:	784b      	ldrb	r3, [r1, #1]
    64e6:	2b00      	cmp	r3, #0
    64e8:	d002      	beq.n	64f0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    64ea:	2380      	movs	r3, #128	; 0x80
    64ec:	02db      	lsls	r3, r3, #11
    64ee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    64f0:	7a4b      	ldrb	r3, [r1, #9]
    64f2:	2b00      	cmp	r3, #0
    64f4:	d002      	beq.n	64fc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    64f6:	2380      	movs	r3, #128	; 0x80
    64f8:	031b      	lsls	r3, r3, #12
    64fa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    64fc:	6848      	ldr	r0, [r1, #4]
    64fe:	2801      	cmp	r0, #1
    6500:	d910      	bls.n	6524 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6502:	1e43      	subs	r3, r0, #1
    6504:	4218      	tst	r0, r3
    6506:	d134      	bne.n	6572 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6508:	2802      	cmp	r0, #2
    650a:	d930      	bls.n	656e <system_gclk_gen_set_config+0x96>
    650c:	2302      	movs	r3, #2
    650e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    6510:	3201      	adds	r2, #1
						mask <<= 1) {
    6512:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    6514:	4298      	cmp	r0, r3
    6516:	d8fb      	bhi.n	6510 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6518:	0212      	lsls	r2, r2, #8
    651a:	4332      	orrs	r2, r6
    651c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    651e:	2380      	movs	r3, #128	; 0x80
    6520:	035b      	lsls	r3, r3, #13
    6522:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6524:	7a0b      	ldrb	r3, [r1, #8]
    6526:	2b00      	cmp	r3, #0
    6528:	d002      	beq.n	6530 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    652a:	2380      	movs	r3, #128	; 0x80
    652c:	039b      	lsls	r3, r3, #14
    652e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6530:	4a13      	ldr	r2, [pc, #76]	; (6580 <system_gclk_gen_set_config+0xa8>)
    6532:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    6534:	b25b      	sxtb	r3, r3
    6536:	2b00      	cmp	r3, #0
    6538:	dbfb      	blt.n	6532 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    653a:	4b12      	ldr	r3, [pc, #72]	; (6584 <system_gclk_gen_set_config+0xac>)
    653c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    653e:	4b12      	ldr	r3, [pc, #72]	; (6588 <system_gclk_gen_set_config+0xb0>)
    6540:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6542:	4a0f      	ldr	r2, [pc, #60]	; (6580 <system_gclk_gen_set_config+0xa8>)
    6544:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6546:	b25b      	sxtb	r3, r3
    6548:	2b00      	cmp	r3, #0
    654a:	dbfb      	blt.n	6544 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    654c:	4b0c      	ldr	r3, [pc, #48]	; (6580 <system_gclk_gen_set_config+0xa8>)
    654e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6550:	001a      	movs	r2, r3
    6552:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    6554:	b25b      	sxtb	r3, r3
    6556:	2b00      	cmp	r3, #0
    6558:	dbfb      	blt.n	6552 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    655a:	4a09      	ldr	r2, [pc, #36]	; (6580 <system_gclk_gen_set_config+0xa8>)
    655c:	6853      	ldr	r3, [r2, #4]
    655e:	2180      	movs	r1, #128	; 0x80
    6560:	0249      	lsls	r1, r1, #9
    6562:	400b      	ands	r3, r1
    6564:	431d      	orrs	r5, r3
    6566:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    6568:	4b08      	ldr	r3, [pc, #32]	; (658c <system_gclk_gen_set_config+0xb4>)
    656a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    656c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    656e:	2200      	movs	r2, #0
    6570:	e7d2      	b.n	6518 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6572:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    6574:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6576:	2380      	movs	r3, #128	; 0x80
    6578:	029b      	lsls	r3, r3, #10
    657a:	431d      	orrs	r5, r3
    657c:	e7d2      	b.n	6524 <system_gclk_gen_set_config+0x4c>
    657e:	46c0      	nop			; (mov r8, r8)
    6580:	40000c00 	.word	0x40000c00
    6584:	0000551d 	.word	0x0000551d
    6588:	40000c08 	.word	0x40000c08
    658c:	0000555d 	.word	0x0000555d

00006590 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6590:	b510      	push	{r4, lr}
    6592:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6594:	4a0b      	ldr	r2, [pc, #44]	; (65c4 <system_gclk_gen_enable+0x34>)
    6596:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6598:	b25b      	sxtb	r3, r3
    659a:	2b00      	cmp	r3, #0
    659c:	dbfb      	blt.n	6596 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    659e:	4b0a      	ldr	r3, [pc, #40]	; (65c8 <system_gclk_gen_enable+0x38>)
    65a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    65a2:	4b0a      	ldr	r3, [pc, #40]	; (65cc <system_gclk_gen_enable+0x3c>)
    65a4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    65a6:	4a07      	ldr	r2, [pc, #28]	; (65c4 <system_gclk_gen_enable+0x34>)
    65a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    65aa:	b25b      	sxtb	r3, r3
    65ac:	2b00      	cmp	r3, #0
    65ae:	dbfb      	blt.n	65a8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    65b0:	4a04      	ldr	r2, [pc, #16]	; (65c4 <system_gclk_gen_enable+0x34>)
    65b2:	6851      	ldr	r1, [r2, #4]
    65b4:	2380      	movs	r3, #128	; 0x80
    65b6:	025b      	lsls	r3, r3, #9
    65b8:	430b      	orrs	r3, r1
    65ba:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    65bc:	4b04      	ldr	r3, [pc, #16]	; (65d0 <system_gclk_gen_enable+0x40>)
    65be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    65c0:	bd10      	pop	{r4, pc}
    65c2:	46c0      	nop			; (mov r8, r8)
    65c4:	40000c00 	.word	0x40000c00
    65c8:	0000551d 	.word	0x0000551d
    65cc:	40000c04 	.word	0x40000c04
    65d0:	0000555d 	.word	0x0000555d

000065d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    65d4:	b570      	push	{r4, r5, r6, lr}
    65d6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    65d8:	4a1a      	ldr	r2, [pc, #104]	; (6644 <system_gclk_gen_get_hz+0x70>)
    65da:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    65dc:	b25b      	sxtb	r3, r3
    65de:	2b00      	cmp	r3, #0
    65e0:	dbfb      	blt.n	65da <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    65e2:	4b19      	ldr	r3, [pc, #100]	; (6648 <system_gclk_gen_get_hz+0x74>)
    65e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    65e6:	4b19      	ldr	r3, [pc, #100]	; (664c <system_gclk_gen_get_hz+0x78>)
    65e8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    65ea:	4a16      	ldr	r2, [pc, #88]	; (6644 <system_gclk_gen_get_hz+0x70>)
    65ec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    65ee:	b25b      	sxtb	r3, r3
    65f0:	2b00      	cmp	r3, #0
    65f2:	dbfb      	blt.n	65ec <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    65f4:	4e13      	ldr	r6, [pc, #76]	; (6644 <system_gclk_gen_get_hz+0x70>)
    65f6:	6870      	ldr	r0, [r6, #4]
    65f8:	04c0      	lsls	r0, r0, #19
    65fa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    65fc:	4b14      	ldr	r3, [pc, #80]	; (6650 <system_gclk_gen_get_hz+0x7c>)
    65fe:	4798      	blx	r3
    6600:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6602:	4b12      	ldr	r3, [pc, #72]	; (664c <system_gclk_gen_get_hz+0x78>)
    6604:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6606:	6876      	ldr	r6, [r6, #4]
    6608:	02f6      	lsls	r6, r6, #11
    660a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    660c:	4b11      	ldr	r3, [pc, #68]	; (6654 <system_gclk_gen_get_hz+0x80>)
    660e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6610:	4a0c      	ldr	r2, [pc, #48]	; (6644 <system_gclk_gen_get_hz+0x70>)
    6612:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    6614:	b25b      	sxtb	r3, r3
    6616:	2b00      	cmp	r3, #0
    6618:	dbfb      	blt.n	6612 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    661a:	4b0a      	ldr	r3, [pc, #40]	; (6644 <system_gclk_gen_get_hz+0x70>)
    661c:	689c      	ldr	r4, [r3, #8]
    661e:	0224      	lsls	r4, r4, #8
    6620:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    6622:	4b0d      	ldr	r3, [pc, #52]	; (6658 <system_gclk_gen_get_hz+0x84>)
    6624:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6626:	2e00      	cmp	r6, #0
    6628:	d107      	bne.n	663a <system_gclk_gen_get_hz+0x66>
    662a:	2c01      	cmp	r4, #1
    662c:	d907      	bls.n	663e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    662e:	0021      	movs	r1, r4
    6630:	0028      	movs	r0, r5
    6632:	4b0a      	ldr	r3, [pc, #40]	; (665c <system_gclk_gen_get_hz+0x88>)
    6634:	4798      	blx	r3
    6636:	0005      	movs	r5, r0
    6638:	e001      	b.n	663e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    663a:	3401      	adds	r4, #1
    663c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    663e:	0028      	movs	r0, r5
    6640:	bd70      	pop	{r4, r5, r6, pc}
    6642:	46c0      	nop			; (mov r8, r8)
    6644:	40000c00 	.word	0x40000c00
    6648:	0000551d 	.word	0x0000551d
    664c:	40000c04 	.word	0x40000c04
    6650:	00006121 	.word	0x00006121
    6654:	40000c08 	.word	0x40000c08
    6658:	0000555d 	.word	0x0000555d
    665c:	00006c51 	.word	0x00006c51

00006660 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6660:	b510      	push	{r4, lr}
    6662:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6664:	4b06      	ldr	r3, [pc, #24]	; (6680 <system_gclk_chan_enable+0x20>)
    6666:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6668:	4b06      	ldr	r3, [pc, #24]	; (6684 <system_gclk_chan_enable+0x24>)
    666a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    666c:	4a06      	ldr	r2, [pc, #24]	; (6688 <system_gclk_chan_enable+0x28>)
    666e:	8853      	ldrh	r3, [r2, #2]
    6670:	2180      	movs	r1, #128	; 0x80
    6672:	01c9      	lsls	r1, r1, #7
    6674:	430b      	orrs	r3, r1
    6676:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    6678:	4b04      	ldr	r3, [pc, #16]	; (668c <system_gclk_chan_enable+0x2c>)
    667a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    667c:	bd10      	pop	{r4, pc}
    667e:	46c0      	nop			; (mov r8, r8)
    6680:	0000551d 	.word	0x0000551d
    6684:	40000c02 	.word	0x40000c02
    6688:	40000c00 	.word	0x40000c00
    668c:	0000555d 	.word	0x0000555d

00006690 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6690:	b510      	push	{r4, lr}
    6692:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    6694:	4b0f      	ldr	r3, [pc, #60]	; (66d4 <system_gclk_chan_disable+0x44>)
    6696:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6698:	4b0f      	ldr	r3, [pc, #60]	; (66d8 <system_gclk_chan_disable+0x48>)
    669a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    669c:	4a0f      	ldr	r2, [pc, #60]	; (66dc <system_gclk_chan_disable+0x4c>)
    669e:	8853      	ldrh	r3, [r2, #2]
    66a0:	051b      	lsls	r3, r3, #20
    66a2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    66a4:	8853      	ldrh	r3, [r2, #2]
    66a6:	490e      	ldr	r1, [pc, #56]	; (66e0 <system_gclk_chan_disable+0x50>)
    66a8:	400b      	ands	r3, r1
    66aa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    66ac:	8853      	ldrh	r3, [r2, #2]
    66ae:	490d      	ldr	r1, [pc, #52]	; (66e4 <system_gclk_chan_disable+0x54>)
    66b0:	400b      	ands	r3, r1
    66b2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    66b4:	0011      	movs	r1, r2
    66b6:	2280      	movs	r2, #128	; 0x80
    66b8:	01d2      	lsls	r2, r2, #7
    66ba:	884b      	ldrh	r3, [r1, #2]
    66bc:	4213      	tst	r3, r2
    66be:	d1fc      	bne.n	66ba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    66c0:	4906      	ldr	r1, [pc, #24]	; (66dc <system_gclk_chan_disable+0x4c>)
    66c2:	884a      	ldrh	r2, [r1, #2]
    66c4:	0203      	lsls	r3, r0, #8
    66c6:	4806      	ldr	r0, [pc, #24]	; (66e0 <system_gclk_chan_disable+0x50>)
    66c8:	4002      	ands	r2, r0
    66ca:	4313      	orrs	r3, r2
    66cc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    66ce:	4b06      	ldr	r3, [pc, #24]	; (66e8 <system_gclk_chan_disable+0x58>)
    66d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    66d2:	bd10      	pop	{r4, pc}
    66d4:	0000551d 	.word	0x0000551d
    66d8:	40000c02 	.word	0x40000c02
    66dc:	40000c00 	.word	0x40000c00
    66e0:	fffff0ff 	.word	0xfffff0ff
    66e4:	ffffbfff 	.word	0xffffbfff
    66e8:	0000555d 	.word	0x0000555d

000066ec <system_gclk_chan_set_config>:
{
    66ec:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    66ee:	780c      	ldrb	r4, [r1, #0]
    66f0:	0224      	lsls	r4, r4, #8
    66f2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    66f4:	4b02      	ldr	r3, [pc, #8]	; (6700 <system_gclk_chan_set_config+0x14>)
    66f6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    66f8:	b2a4      	uxth	r4, r4
    66fa:	4b02      	ldr	r3, [pc, #8]	; (6704 <system_gclk_chan_set_config+0x18>)
    66fc:	805c      	strh	r4, [r3, #2]
}
    66fe:	bd10      	pop	{r4, pc}
    6700:	00006691 	.word	0x00006691
    6704:	40000c00 	.word	0x40000c00

00006708 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6708:	b510      	push	{r4, lr}
    670a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    670c:	4b06      	ldr	r3, [pc, #24]	; (6728 <system_gclk_chan_get_hz+0x20>)
    670e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6710:	4b06      	ldr	r3, [pc, #24]	; (672c <system_gclk_chan_get_hz+0x24>)
    6712:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6714:	4b06      	ldr	r3, [pc, #24]	; (6730 <system_gclk_chan_get_hz+0x28>)
    6716:	885c      	ldrh	r4, [r3, #2]
    6718:	0524      	lsls	r4, r4, #20
    671a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    671c:	4b05      	ldr	r3, [pc, #20]	; (6734 <system_gclk_chan_get_hz+0x2c>)
    671e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6720:	0020      	movs	r0, r4
    6722:	4b05      	ldr	r3, [pc, #20]	; (6738 <system_gclk_chan_get_hz+0x30>)
    6724:	4798      	blx	r3
}
    6726:	bd10      	pop	{r4, pc}
    6728:	0000551d 	.word	0x0000551d
    672c:	40000c02 	.word	0x40000c02
    6730:	40000c00 	.word	0x40000c00
    6734:	0000555d 	.word	0x0000555d
    6738:	000065d5 	.word	0x000065d5

0000673c <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    673c:	2800      	cmp	r0, #0
    673e:	db08      	blt.n	6752 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    6740:	2301      	movs	r3, #1
    6742:	4083      	lsls	r3, r0
    6744:	22c0      	movs	r2, #192	; 0xc0
    6746:	0052      	lsls	r2, r2, #1
    6748:	4906      	ldr	r1, [pc, #24]	; (6764 <system_interrupt_clear_pending+0x28>)
    674a:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    674c:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    674e:	0018      	movs	r0, r3
    6750:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    6752:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    6754:	1c42      	adds	r2, r0, #1
    6756:	d1fa      	bne.n	674e <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    6758:	2280      	movs	r2, #128	; 0x80
    675a:	0492      	lsls	r2, r2, #18
    675c:	4b02      	ldr	r3, [pc, #8]	; (6768 <system_interrupt_clear_pending+0x2c>)
    675e:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    6760:	2300      	movs	r3, #0
    6762:	e7f4      	b.n	674e <system_interrupt_clear_pending+0x12>
    6764:	e000e100 	.word	0xe000e100
    6768:	e000ed00 	.word	0xe000ed00

0000676c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    676c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    676e:	78d3      	ldrb	r3, [r2, #3]
    6770:	2b00      	cmp	r3, #0
    6772:	d135      	bne.n	67e0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6774:	7813      	ldrb	r3, [r2, #0]
    6776:	2b80      	cmp	r3, #128	; 0x80
    6778:	d029      	beq.n	67ce <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    677a:	061b      	lsls	r3, r3, #24
    677c:	2480      	movs	r4, #128	; 0x80
    677e:	0264      	lsls	r4, r4, #9
    6780:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6782:	7854      	ldrb	r4, [r2, #1]
    6784:	2502      	movs	r5, #2
    6786:	43ac      	bics	r4, r5
    6788:	d106      	bne.n	6798 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    678a:	7894      	ldrb	r4, [r2, #2]
    678c:	2c00      	cmp	r4, #0
    678e:	d120      	bne.n	67d2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6790:	2480      	movs	r4, #128	; 0x80
    6792:	02a4      	lsls	r4, r4, #10
    6794:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6796:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6798:	7854      	ldrb	r4, [r2, #1]
    679a:	3c01      	subs	r4, #1
    679c:	2c01      	cmp	r4, #1
    679e:	d91c      	bls.n	67da <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    67a0:	040d      	lsls	r5, r1, #16
    67a2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    67a4:	24a0      	movs	r4, #160	; 0xa0
    67a6:	05e4      	lsls	r4, r4, #23
    67a8:	432c      	orrs	r4, r5
    67aa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    67ac:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    67ae:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    67b0:	24d0      	movs	r4, #208	; 0xd0
    67b2:	0624      	lsls	r4, r4, #24
    67b4:	432c      	orrs	r4, r5
    67b6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    67b8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    67ba:	78d4      	ldrb	r4, [r2, #3]
    67bc:	2c00      	cmp	r4, #0
    67be:	d122      	bne.n	6806 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    67c0:	035b      	lsls	r3, r3, #13
    67c2:	d51c      	bpl.n	67fe <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    67c4:	7893      	ldrb	r3, [r2, #2]
    67c6:	2b01      	cmp	r3, #1
    67c8:	d01e      	beq.n	6808 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    67ca:	6141      	str	r1, [r0, #20]
    67cc:	e017      	b.n	67fe <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    67ce:	2300      	movs	r3, #0
    67d0:	e7d7      	b.n	6782 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    67d2:	24c0      	movs	r4, #192	; 0xc0
    67d4:	02e4      	lsls	r4, r4, #11
    67d6:	4323      	orrs	r3, r4
    67d8:	e7dd      	b.n	6796 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    67da:	4c0d      	ldr	r4, [pc, #52]	; (6810 <_system_pinmux_config+0xa4>)
    67dc:	4023      	ands	r3, r4
    67de:	e7df      	b.n	67a0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    67e0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    67e2:	040c      	lsls	r4, r1, #16
    67e4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    67e6:	23a0      	movs	r3, #160	; 0xa0
    67e8:	05db      	lsls	r3, r3, #23
    67ea:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    67ec:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    67ee:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    67f0:	23d0      	movs	r3, #208	; 0xd0
    67f2:	061b      	lsls	r3, r3, #24
    67f4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    67f6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    67f8:	78d3      	ldrb	r3, [r2, #3]
    67fa:	2b00      	cmp	r3, #0
    67fc:	d103      	bne.n	6806 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    67fe:	7853      	ldrb	r3, [r2, #1]
    6800:	3b01      	subs	r3, #1
    6802:	2b01      	cmp	r3, #1
    6804:	d902      	bls.n	680c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    6806:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    6808:	6181      	str	r1, [r0, #24]
    680a:	e7f8      	b.n	67fe <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    680c:	6081      	str	r1, [r0, #8]
}
    680e:	e7fa      	b.n	6806 <_system_pinmux_config+0x9a>
    6810:	fffbffff 	.word	0xfffbffff

00006814 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6814:	b510      	push	{r4, lr}
    6816:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    6818:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    681a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    681c:	2900      	cmp	r1, #0
    681e:	d104      	bne.n	682a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    6820:	0943      	lsrs	r3, r0, #5
    6822:	01db      	lsls	r3, r3, #7
    6824:	4905      	ldr	r1, [pc, #20]	; (683c <system_pinmux_pin_set_config+0x28>)
    6826:	468c      	mov	ip, r1
    6828:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    682a:	241f      	movs	r4, #31
    682c:	4020      	ands	r0, r4
    682e:	2101      	movs	r1, #1
    6830:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    6832:	0018      	movs	r0, r3
    6834:	4b02      	ldr	r3, [pc, #8]	; (6840 <system_pinmux_pin_set_config+0x2c>)
    6836:	4798      	blx	r3
}
    6838:	bd10      	pop	{r4, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	41004400 	.word	0x41004400
    6840:	0000676d 	.word	0x0000676d

00006844 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6844:	4770      	bx	lr
	...

00006848 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6848:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    684a:	4b05      	ldr	r3, [pc, #20]	; (6860 <system_init+0x18>)
    684c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    684e:	4b05      	ldr	r3, [pc, #20]	; (6864 <system_init+0x1c>)
    6850:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6852:	4b05      	ldr	r3, [pc, #20]	; (6868 <system_init+0x20>)
    6854:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6856:	4b05      	ldr	r3, [pc, #20]	; (686c <system_init+0x24>)
    6858:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    685a:	4b05      	ldr	r3, [pc, #20]	; (6870 <system_init+0x28>)
    685c:	4798      	blx	r3
}
    685e:	bd10      	pop	{r4, pc}
    6860:	0000633d 	.word	0x0000633d
    6864:	0000558d 	.word	0x0000558d
    6868:	00006845 	.word	0x00006845
    686c:	00005631 	.word	0x00005631
    6870:	00006845 	.word	0x00006845

00006874 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6874:	b5f0      	push	{r4, r5, r6, r7, lr}
    6876:	46c6      	mov	lr, r8
    6878:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    687a:	0080      	lsls	r0, r0, #2
    687c:	4b0e      	ldr	r3, [pc, #56]	; (68b8 <_tcc_interrupt_handler+0x44>)
    687e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6880:	683b      	ldr	r3, [r7, #0]
    6882:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6888:	4013      	ands	r3, r2
    688a:	401e      	ands	r6, r3
    688c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    688e:	4b0b      	ldr	r3, [pc, #44]	; (68bc <_tcc_interrupt_handler+0x48>)
    6890:	4698      	mov	r8, r3
    6892:	e002      	b.n	689a <_tcc_interrupt_handler+0x26>
    6894:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6896:	2c30      	cmp	r4, #48	; 0x30
    6898:	d00a      	beq.n	68b0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    689a:	4643      	mov	r3, r8
    689c:	58e5      	ldr	r5, [r4, r3]
    689e:	4235      	tst	r5, r6
    68a0:	d0f8      	beq.n	6894 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    68a2:	193b      	adds	r3, r7, r4
    68a4:	685b      	ldr	r3, [r3, #4]
    68a6:	0038      	movs	r0, r7
    68a8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    68aa:	683b      	ldr	r3, [r7, #0]
    68ac:	62dd      	str	r5, [r3, #44]	; 0x2c
    68ae:	e7f1      	b.n	6894 <_tcc_interrupt_handler+0x20>
		}
	}
}
    68b0:	bc04      	pop	{r2}
    68b2:	4690      	mov	r8, r2
    68b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68b6:	46c0      	nop			; (mov r8, r8)
    68b8:	20004d90 	.word	0x20004d90
    68bc:	0000a4f0 	.word	0x0000a4f0

000068c0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    68c0:	b510      	push	{r4, lr}
    68c2:	2000      	movs	r0, #0
    68c4:	4b01      	ldr	r3, [pc, #4]	; (68cc <TCC0_Handler+0xc>)
    68c6:	4798      	blx	r3
    68c8:	bd10      	pop	{r4, pc}
    68ca:	46c0      	nop			; (mov r8, r8)
    68cc:	00006875 	.word	0x00006875

000068d0 <TCC1_Handler>:
    68d0:	b510      	push	{r4, lr}
    68d2:	2001      	movs	r0, #1
    68d4:	4b01      	ldr	r3, [pc, #4]	; (68dc <TCC1_Handler+0xc>)
    68d6:	4798      	blx	r3
    68d8:	bd10      	pop	{r4, pc}
    68da:	46c0      	nop			; (mov r8, r8)
    68dc:	00006875 	.word	0x00006875

000068e0 <TCC2_Handler>:
    68e0:	b510      	push	{r4, lr}
    68e2:	2002      	movs	r0, #2
    68e4:	4b01      	ldr	r3, [pc, #4]	; (68ec <TCC2_Handler+0xc>)
    68e6:	4798      	blx	r3
    68e8:	bd10      	pop	{r4, pc}
    68ea:	46c0      	nop			; (mov r8, r8)
    68ec:	00006875 	.word	0x00006875

000068f0 <Dummy_Handler>:
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
  __asm volatile (
    68f0:	2004      	movs	r0, #4
    68f2:	4671      	mov	r1, lr
    68f4:	4208      	tst	r0, r1
    68f6:	d002      	beq.n	68fe <_MSP>
    68f8:	f3ef 8009 	mrs	r0, PSP
    68fc:	e001      	b.n	6902 <_HALT>

000068fe <_MSP>:
    68fe:	f3ef 8008 	mrs	r0, MSP

00006902 <_HALT>:
    6902:	6941      	ldr	r1, [r0, #20]
    6904:	e074      	b.n	69f0 <HardFault_HandlerC>
    6906:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
    6908:	4770      	bx	lr
	...

0000690c <Reset_Handler>:
{
    690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    690e:	4a2a      	ldr	r2, [pc, #168]	; (69b8 <Reset_Handler+0xac>)
    6910:	4b2a      	ldr	r3, [pc, #168]	; (69bc <Reset_Handler+0xb0>)
    6912:	429a      	cmp	r2, r3
    6914:	d011      	beq.n	693a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6916:	001a      	movs	r2, r3
    6918:	4b29      	ldr	r3, [pc, #164]	; (69c0 <Reset_Handler+0xb4>)
    691a:	429a      	cmp	r2, r3
    691c:	d20d      	bcs.n	693a <Reset_Handler+0x2e>
    691e:	4a29      	ldr	r2, [pc, #164]	; (69c4 <Reset_Handler+0xb8>)
    6920:	3303      	adds	r3, #3
    6922:	1a9b      	subs	r3, r3, r2
    6924:	089b      	lsrs	r3, r3, #2
    6926:	3301      	adds	r3, #1
    6928:	009b      	lsls	r3, r3, #2
    692a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    692c:	4823      	ldr	r0, [pc, #140]	; (69bc <Reset_Handler+0xb0>)
    692e:	4922      	ldr	r1, [pc, #136]	; (69b8 <Reset_Handler+0xac>)
    6930:	588c      	ldr	r4, [r1, r2]
    6932:	5084      	str	r4, [r0, r2]
    6934:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    6936:	429a      	cmp	r2, r3
    6938:	d1fa      	bne.n	6930 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    693a:	4a23      	ldr	r2, [pc, #140]	; (69c8 <Reset_Handler+0xbc>)
    693c:	4b23      	ldr	r3, [pc, #140]	; (69cc <Reset_Handler+0xc0>)
    693e:	429a      	cmp	r2, r3
    6940:	d20a      	bcs.n	6958 <Reset_Handler+0x4c>
    6942:	43d3      	mvns	r3, r2
    6944:	4921      	ldr	r1, [pc, #132]	; (69cc <Reset_Handler+0xc0>)
    6946:	185b      	adds	r3, r3, r1
    6948:	2103      	movs	r1, #3
    694a:	438b      	bics	r3, r1
    694c:	3304      	adds	r3, #4
    694e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    6950:	2100      	movs	r1, #0
    6952:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    6954:	4293      	cmp	r3, r2
    6956:	d1fc      	bne.n	6952 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6958:	4a1d      	ldr	r2, [pc, #116]	; (69d0 <Reset_Handler+0xc4>)
    695a:	21ff      	movs	r1, #255	; 0xff
    695c:	4b1d      	ldr	r3, [pc, #116]	; (69d4 <Reset_Handler+0xc8>)
    695e:	438b      	bics	r3, r1
    6960:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6962:	39fd      	subs	r1, #253	; 0xfd
    6964:	2390      	movs	r3, #144	; 0x90
    6966:	005b      	lsls	r3, r3, #1
    6968:	4a1b      	ldr	r2, [pc, #108]	; (69d8 <Reset_Handler+0xcc>)
    696a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    696c:	4a1b      	ldr	r2, [pc, #108]	; (69dc <Reset_Handler+0xd0>)
    696e:	78d3      	ldrb	r3, [r2, #3]
    6970:	2503      	movs	r5, #3
    6972:	43ab      	bics	r3, r5
    6974:	2402      	movs	r4, #2
    6976:	4323      	orrs	r3, r4
    6978:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    697a:	78d3      	ldrb	r3, [r2, #3]
    697c:	270c      	movs	r7, #12
    697e:	43bb      	bics	r3, r7
    6980:	2608      	movs	r6, #8
    6982:	4333      	orrs	r3, r6
    6984:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6986:	4b16      	ldr	r3, [pc, #88]	; (69e0 <Reset_Handler+0xd4>)
    6988:	7b98      	ldrb	r0, [r3, #14]
    698a:	2230      	movs	r2, #48	; 0x30
    698c:	4390      	bics	r0, r2
    698e:	2220      	movs	r2, #32
    6990:	4310      	orrs	r0, r2
    6992:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6994:	7b99      	ldrb	r1, [r3, #14]
    6996:	43b9      	bics	r1, r7
    6998:	4331      	orrs	r1, r6
    699a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    699c:	7b9a      	ldrb	r2, [r3, #14]
    699e:	43aa      	bics	r2, r5
    69a0:	4322      	orrs	r2, r4
    69a2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    69a4:	4a0f      	ldr	r2, [pc, #60]	; (69e4 <Reset_Handler+0xd8>)
    69a6:	6853      	ldr	r3, [r2, #4]
    69a8:	2180      	movs	r1, #128	; 0x80
    69aa:	430b      	orrs	r3, r1
    69ac:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    69ae:	4b0e      	ldr	r3, [pc, #56]	; (69e8 <Reset_Handler+0xdc>)
    69b0:	4798      	blx	r3
        main();
    69b2:	4b0e      	ldr	r3, [pc, #56]	; (69ec <Reset_Handler+0xe0>)
    69b4:	4798      	blx	r3
    69b6:	e7fe      	b.n	69b6 <Reset_Handler+0xaa>
    69b8:	0000a950 	.word	0x0000a950
    69bc:	20000000 	.word	0x20000000
    69c0:	20000200 	.word	0x20000200
    69c4:	20000004 	.word	0x20000004
    69c8:	20000200 	.word	0x20000200
    69cc:	20004ee0 	.word	0x20004ee0
    69d0:	e000ed00 	.word	0xe000ed00
    69d4:	00000000 	.word	0x00000000
    69d8:	41007000 	.word	0x41007000
    69dc:	41005000 	.word	0x41005000
    69e0:	41004800 	.word	0x41004800
    69e4:	41004000 	.word	0x41004000
    69e8:	000089a5 	.word	0x000089a5
    69ec:	00006a79 	.word	0x00006a79

000069f0 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
    69f0:	b08e      	sub	sp, #56	; 0x38
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
    69f2:	6803      	ldr	r3, [r0, #0]
    69f4:	930d      	str	r3, [sp, #52]	; 0x34
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
    69f6:	6843      	ldr	r3, [r0, #4]
    69f8:	930c      	str	r3, [sp, #48]	; 0x30
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
    69fa:	6883      	ldr	r3, [r0, #8]
    69fc:	930b      	str	r3, [sp, #44]	; 0x2c
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
    69fe:	68c3      	ldr	r3, [r0, #12]
    6a00:	930a      	str	r3, [sp, #40]	; 0x28
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
    6a02:	6903      	ldr	r3, [r0, #16]
    6a04:	9309      	str	r3, [sp, #36]	; 0x24
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
    6a06:	6943      	ldr	r3, [r0, #20]
    6a08:	9308      	str	r3, [sp, #32]
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
    6a0a:	6983      	ldr	r3, [r0, #24]
    6a0c:	9307      	str	r3, [sp, #28]
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
    6a0e:	69c3      	ldr	r3, [r0, #28]
    6a10:	9306      	str	r3, [sp, #24]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
    6a12:	4b0a      	ldr	r3, [pc, #40]	; (6a3c <HardFault_HandlerC+0x4c>)
    6a14:	681b      	ldr	r3, [r3, #0]
    6a16:	9305      	str	r3, [sp, #20]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
    6a18:	4b09      	ldr	r3, [pc, #36]	; (6a40 <HardFault_HandlerC+0x50>)
    6a1a:	681b      	ldr	r3, [r3, #0]
    6a1c:	9304      	str	r3, [sp, #16]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
    6a1e:	4b09      	ldr	r3, [pc, #36]	; (6a44 <HardFault_HandlerC+0x54>)
    6a20:	681b      	ldr	r3, [r3, #0]
    6a22:	9303      	str	r3, [sp, #12]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
    6a24:	4b08      	ldr	r3, [pc, #32]	; (6a48 <HardFault_HandlerC+0x58>)
    6a26:	681b      	ldr	r3, [r3, #0]
    6a28:	9302      	str	r3, [sp, #8]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
    6a2a:	4b08      	ldr	r3, [pc, #32]	; (6a4c <HardFault_HandlerC+0x5c>)
    6a2c:	681b      	ldr	r3, [r3, #0]
    6a2e:	9300      	str	r3, [sp, #0]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
    6a30:	4b07      	ldr	r3, [pc, #28]	; (6a50 <HardFault_HandlerC+0x60>)
    6a32:	681b      	ldr	r3, [r3, #0]
    6a34:	9301      	str	r3, [sp, #4]
	
	__asm("BKPT #0\n") ; // Break into the debugger
    6a36:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
    6a38:	b00e      	add	sp, #56	; 0x38
    6a3a:	4770      	bx	lr
    6a3c:	e000ed28 	.word	0xe000ed28
    6a40:	e000ed2c 	.word	0xe000ed2c
    6a44:	e000ed30 	.word	0xe000ed30
    6a48:	e000ed3c 	.word	0xe000ed3c
    6a4c:	e000ed34 	.word	0xe000ed34
    6a50:	e000ed38 	.word	0xe000ed38

00006a54 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6a54:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6a56:	4a06      	ldr	r2, [pc, #24]	; (6a70 <_sbrk+0x1c>)
    6a58:	6812      	ldr	r2, [r2, #0]
    6a5a:	2a00      	cmp	r2, #0
    6a5c:	d004      	beq.n	6a68 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6a5e:	4a04      	ldr	r2, [pc, #16]	; (6a70 <_sbrk+0x1c>)
    6a60:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    6a62:	18c3      	adds	r3, r0, r3
    6a64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6a66:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6a68:	4902      	ldr	r1, [pc, #8]	; (6a74 <_sbrk+0x20>)
    6a6a:	4a01      	ldr	r2, [pc, #4]	; (6a70 <_sbrk+0x1c>)
    6a6c:	6011      	str	r1, [r2, #0]
    6a6e:	e7f6      	b.n	6a5e <_sbrk+0xa>
    6a70:	2000383c 	.word	0x2000383c
    6a74:	20006ee0 	.word	0x20006ee0

00006a78 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    6a78:	b510      	push	{r4, lr}
	/* Initialize the board. */
	system_init();
    6a7a:	4b05      	ldr	r3, [pc, #20]	; (6a90 <main+0x18>)
    6a7c:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
    6a7e:	4b05      	ldr	r3, [pc, #20]	; (6a94 <main+0x1c>)
    6a80:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
    6a82:	2001      	movs	r0, #1
    6a84:	4b04      	ldr	r3, [pc, #16]	; (6a98 <main+0x20>)
    6a86:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
    6a88:	4b04      	ldr	r3, [pc, #16]	; (6a9c <main+0x24>)
    6a8a:	4798      	blx	r3

	return 0; //Will not get here
}
    6a8c:	2000      	movs	r0, #0
    6a8e:	bd10      	pop	{r4, pc}
    6a90:	00006849 	.word	0x00006849
    6a94:	00005305 	.word	0x00005305
    6a98:	00001a29 	.word	0x00001a29
    6a9c:	000042c5 	.word	0x000042c5

00006aa0 <vApplicationDaemonTaskStartupHook>:
* @param[in]        None
* @return           None
*****************************************************************************/
volatile uint8_t data[256];
void vApplicationDaemonTaskStartupHook(void)
{
    6aa0:	b530      	push	{r4, r5, lr}
    6aa2:	b085      	sub	sp, #20

SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
    6aa4:	4840      	ldr	r0, [pc, #256]	; (6ba8 <vApplicationDaemonTaskStartupHook+0x108>)
    6aa6:	4c41      	ldr	r4, [pc, #260]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6aa8:	47a0      	blx	r4

//Initialize HW that needs FreeRTOS Initialization
SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
    6aaa:	4841      	ldr	r0, [pc, #260]	; (6bb0 <vApplicationDaemonTaskStartupHook+0x110>)
    6aac:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
    6aae:	4b41      	ldr	r3, [pc, #260]	; (6bb4 <vApplicationDaemonTaskStartupHook+0x114>)
    6ab0:	4798      	blx	r3
    6ab2:	2800      	cmp	r0, #0
    6ab4:	d061      	beq.n	6b7a <vApplicationDaemonTaskStartupHook+0xda>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
    6ab6:	4840      	ldr	r0, [pc, #256]	; (6bb8 <vApplicationDaemonTaskStartupHook+0x118>)
    6ab8:	4b3c      	ldr	r3, [pc, #240]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6aba:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
	}

	if(0 != InitializeSeesaw())
    6abc:	4b3f      	ldr	r3, [pc, #252]	; (6bbc <vApplicationDaemonTaskStartupHook+0x11c>)
    6abe:	4798      	blx	r3
    6ac0:	2800      	cmp	r0, #0
    6ac2:	d05e      	beq.n	6b82 <vApplicationDaemonTaskStartupHook+0xe2>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    6ac4:	483e      	ldr	r0, [pc, #248]	; (6bc0 <vApplicationDaemonTaskStartupHook+0x120>)
    6ac6:	4b39      	ldr	r3, [pc, #228]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6ac8:	4798      	blx	r3
	else
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
	}

	uint8_t whoamI = 0;
    6aca:	240f      	movs	r4, #15
    6acc:	446c      	add	r4, sp
    6ace:	2300      	movs	r3, #0
    6ad0:	7023      	strb	r3, [r4, #0]
	(lsm6dso_device_id_get(GetImuStruct(), &whoamI));
    6ad2:	4b3c      	ldr	r3, [pc, #240]	; (6bc4 <vApplicationDaemonTaskStartupHook+0x124>)
    6ad4:	4798      	blx	r3
    6ad6:	0021      	movs	r1, r4
    6ad8:	4b3b      	ldr	r3, [pc, #236]	; (6bc8 <vApplicationDaemonTaskStartupHook+0x128>)
    6ada:	4798      	blx	r3
	
	if (whoamI != LSM6DSO_ID){
    6adc:	7823      	ldrb	r3, [r4, #0]
    6ade:	2b6c      	cmp	r3, #108	; 0x6c
    6ae0:	d053      	beq.n	6b8a <vApplicationDaemonTaskStartupHook+0xea>
		SerialConsoleWriteString("Cannot find IMU!\r\n");
    6ae2:	483a      	ldr	r0, [pc, #232]	; (6bcc <vApplicationDaemonTaskStartupHook+0x12c>)
    6ae4:	4b31      	ldr	r3, [pc, #196]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6ae6:	4798      	blx	r3
* @return           None
*****************************************************************************/
static void StartTasks(void)
{

snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
    6ae8:	4b39      	ldr	r3, [pc, #228]	; (6bd0 <vApplicationDaemonTaskStartupHook+0x130>)
    6aea:	4798      	blx	r3
    6aec:	0003      	movs	r3, r0
    6aee:	4c39      	ldr	r4, [pc, #228]	; (6bd4 <vApplicationDaemonTaskStartupHook+0x134>)
    6af0:	4a39      	ldr	r2, [pc, #228]	; (6bd8 <vApplicationDaemonTaskStartupHook+0x138>)
    6af2:	2140      	movs	r1, #64	; 0x40
    6af4:	0020      	movs	r0, r4
    6af6:	4d39      	ldr	r5, [pc, #228]	; (6bdc <vApplicationDaemonTaskStartupHook+0x13c>)
    6af8:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    6afa:	0020      	movs	r0, r4
    6afc:	4b2b      	ldr	r3, [pc, #172]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6afe:	4798      	blx	r3

//Initialize Tasks here

if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
    6b00:	4b37      	ldr	r3, [pc, #220]	; (6be0 <vApplicationDaemonTaskStartupHook+0x140>)
    6b02:	9301      	str	r3, [sp, #4]
    6b04:	2304      	movs	r3, #4
    6b06:	9300      	str	r3, [sp, #0]
    6b08:	2300      	movs	r3, #0
    6b0a:	22c8      	movs	r2, #200	; 0xc8
    6b0c:	0052      	lsls	r2, r2, #1
    6b0e:	4935      	ldr	r1, [pc, #212]	; (6be4 <vApplicationDaemonTaskStartupHook+0x144>)
    6b10:	4835      	ldr	r0, [pc, #212]	; (6be8 <vApplicationDaemonTaskStartupHook+0x148>)
    6b12:	4c36      	ldr	r4, [pc, #216]	; (6bec <vApplicationDaemonTaskStartupHook+0x14c>)
    6b14:	47a0      	blx	r4
    6b16:	2801      	cmp	r0, #1
    6b18:	d002      	beq.n	6b20 <vApplicationDaemonTaskStartupHook+0x80>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
    6b1a:	4835      	ldr	r0, [pc, #212]	; (6bf0 <vApplicationDaemonTaskStartupHook+0x150>)
    6b1c:	4b23      	ldr	r3, [pc, #140]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6b1e:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
    6b20:	4b2b      	ldr	r3, [pc, #172]	; (6bd0 <vApplicationDaemonTaskStartupHook+0x130>)
    6b22:	4798      	blx	r3
    6b24:	0003      	movs	r3, r0
    6b26:	4c2b      	ldr	r4, [pc, #172]	; (6bd4 <vApplicationDaemonTaskStartupHook+0x134>)
    6b28:	4a32      	ldr	r2, [pc, #200]	; (6bf4 <vApplicationDaemonTaskStartupHook+0x154>)
    6b2a:	2140      	movs	r1, #64	; 0x40
    6b2c:	0020      	movs	r0, r4
    6b2e:	4d2b      	ldr	r5, [pc, #172]	; (6bdc <vApplicationDaemonTaskStartupHook+0x13c>)
    6b30:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    6b32:	0020      	movs	r0, r4
    6b34:	4b1d      	ldr	r3, [pc, #116]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6b36:	4798      	blx	r3



if(xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
    6b38:	4b2f      	ldr	r3, [pc, #188]	; (6bf8 <vApplicationDaemonTaskStartupHook+0x158>)
    6b3a:	9301      	str	r3, [sp, #4]
    6b3c:	2303      	movs	r3, #3
    6b3e:	9300      	str	r3, [sp, #0]
    6b40:	2300      	movs	r3, #0
    6b42:	2280      	movs	r2, #128	; 0x80
    6b44:	0052      	lsls	r2, r2, #1
    6b46:	492d      	ldr	r1, [pc, #180]	; (6bfc <vApplicationDaemonTaskStartupHook+0x15c>)
    6b48:	482d      	ldr	r0, [pc, #180]	; (6c00 <vApplicationDaemonTaskStartupHook+0x160>)
    6b4a:	4c28      	ldr	r4, [pc, #160]	; (6bec <vApplicationDaemonTaskStartupHook+0x14c>)
    6b4c:	47a0      	blx	r4
    6b4e:	2801      	cmp	r0, #1
    6b50:	d002      	beq.n	6b58 <vApplicationDaemonTaskStartupHook+0xb8>
	SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
    6b52:	482c      	ldr	r0, [pc, #176]	; (6c04 <vApplicationDaemonTaskStartupHook+0x164>)
    6b54:	4b15      	ldr	r3, [pc, #84]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6b56:	4798      	blx	r3
}

snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
    6b58:	4b1d      	ldr	r3, [pc, #116]	; (6bd0 <vApplicationDaemonTaskStartupHook+0x130>)
    6b5a:	4798      	blx	r3
    6b5c:	0003      	movs	r3, r0
    6b5e:	4c1d      	ldr	r4, [pc, #116]	; (6bd4 <vApplicationDaemonTaskStartupHook+0x134>)
    6b60:	4a29      	ldr	r2, [pc, #164]	; (6c08 <vApplicationDaemonTaskStartupHook+0x168>)
    6b62:	2140      	movs	r1, #64	; 0x40
    6b64:	0020      	movs	r0, r4
    6b66:	4d1d      	ldr	r5, [pc, #116]	; (6bdc <vApplicationDaemonTaskStartupHook+0x13c>)
    6b68:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
    6b6a:	0020      	movs	r0, r4
    6b6c:	4b0f      	ldr	r3, [pc, #60]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6b6e:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
    6b70:	2000      	movs	r0, #0
    6b72:	4b26      	ldr	r3, [pc, #152]	; (6c0c <vApplicationDaemonTaskStartupHook+0x16c>)
    6b74:	4798      	blx	r3
}
    6b76:	b005      	add	sp, #20
    6b78:	bd30      	pop	{r4, r5, pc}
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
    6b7a:	4825      	ldr	r0, [pc, #148]	; (6c10 <vApplicationDaemonTaskStartupHook+0x170>)
    6b7c:	4b0b      	ldr	r3, [pc, #44]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6b7e:	4798      	blx	r3
    6b80:	e79c      	b.n	6abc <vApplicationDaemonTaskStartupHook+0x1c>
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
    6b82:	4824      	ldr	r0, [pc, #144]	; (6c14 <vApplicationDaemonTaskStartupHook+0x174>)
    6b84:	4b09      	ldr	r3, [pc, #36]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6b86:	4798      	blx	r3
    6b88:	e79f      	b.n	6aca <vApplicationDaemonTaskStartupHook+0x2a>
		SerialConsoleWriteString("IMU found!\r\n");
    6b8a:	4823      	ldr	r0, [pc, #140]	; (6c18 <vApplicationDaemonTaskStartupHook+0x178>)
    6b8c:	4b07      	ldr	r3, [pc, #28]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6b8e:	4798      	blx	r3
		if(InitImu() == 0)
    6b90:	4b22      	ldr	r3, [pc, #136]	; (6c1c <vApplicationDaemonTaskStartupHook+0x17c>)
    6b92:	4798      	blx	r3
    6b94:	2800      	cmp	r0, #0
    6b96:	d003      	beq.n	6ba0 <vApplicationDaemonTaskStartupHook+0x100>
			SerialConsoleWriteString("Could not initialize IMU\r\n");
    6b98:	4821      	ldr	r0, [pc, #132]	; (6c20 <vApplicationDaemonTaskStartupHook+0x180>)
    6b9a:	4b04      	ldr	r3, [pc, #16]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6b9c:	4798      	blx	r3
    6b9e:	e7a3      	b.n	6ae8 <vApplicationDaemonTaskStartupHook+0x48>
			SerialConsoleWriteString("IMU initialized!\r\n");
    6ba0:	4820      	ldr	r0, [pc, #128]	; (6c24 <vApplicationDaemonTaskStartupHook+0x184>)
    6ba2:	4b02      	ldr	r3, [pc, #8]	; (6bac <vApplicationDaemonTaskStartupHook+0x10c>)
    6ba4:	4798      	blx	r3
    6ba6:	e79f      	b.n	6ae8 <vApplicationDaemonTaskStartupHook+0x48>
    6ba8:	0000a520 	.word	0x0000a520
    6bac:	0000542d 	.word	0x0000542d
    6bb0:	0000a544 	.word	0x0000a544
    6bb4:	000008c1 	.word	0x000008c1
    6bb8:	0000a55c 	.word	0x0000a55c
    6bbc:	0000119d 	.word	0x0000119d
    6bc0:	000095e8 	.word	0x000095e8
    6bc4:	00001049 	.word	0x00001049
    6bc8:	00000c31 	.word	0x00000c31
    6bcc:	0000a5b4 	.word	0x0000a5b4
    6bd0:	00002d31 	.word	0x00002d31
    6bd4:	20004e9c 	.word	0x20004e9c
    6bd8:	0000a608 	.word	0x0000a608
    6bdc:	00008b99 	.word	0x00008b99
    6be0:	20003840 	.word	0x20003840
    6be4:	0000a62c 	.word	0x0000a62c
    6be8:	00000581 	.word	0x00000581
    6bec:	00004021 	.word	0x00004021
    6bf0:	0000a638 	.word	0x0000a638
    6bf4:	0000a664 	.word	0x0000a664
    6bf8:	20003844 	.word	0x20003844
    6bfc:	0000a684 	.word	0x0000a684
    6c00:	00001325 	.word	0x00001325
    6c04:	0000a68c 	.word	0x0000a68c
    6c08:	0000a6b8 	.word	0x0000a6b8
    6c0c:	000047a9 	.word	0x000047a9
    6c10:	0000a580 	.word	0x0000a580
    6c14:	0000a59c 	.word	0x0000a59c
    6c18:	0000a5c8 	.word	0x0000a5c8
    6c1c:	00001051 	.word	0x00001051
    6c20:	0000a5ec 	.word	0x0000a5ec
    6c24:	0000a5d8 	.word	0x0000a5d8

00006c28 <vApplicationMallocFailedHook>:




void vApplicationMallocFailedHook(void)
{
    6c28:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
    6c2a:	4802      	ldr	r0, [pc, #8]	; (6c34 <vApplicationMallocFailedHook+0xc>)
    6c2c:	4b02      	ldr	r3, [pc, #8]	; (6c38 <vApplicationMallocFailedHook+0x10>)
    6c2e:	4798      	blx	r3
    6c30:	e7fe      	b.n	6c30 <vApplicationMallocFailedHook+0x8>
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	0000a6dc 	.word	0x0000a6dc
    6c38:	0000542d 	.word	0x0000542d

00006c3c <vApplicationStackOverflowHook>:
while(1);
}

void vApplicationStackOverflowHook(void)
{
    6c3c:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
    6c3e:	4802      	ldr	r0, [pc, #8]	; (6c48 <vApplicationStackOverflowHook+0xc>)
    6c40:	4b02      	ldr	r3, [pc, #8]	; (6c4c <vApplicationStackOverflowHook+0x10>)
    6c42:	4798      	blx	r3
    6c44:	e7fe      	b.n	6c44 <vApplicationStackOverflowHook+0x8>
    6c46:	46c0      	nop			; (mov r8, r8)
    6c48:	0000a708 	.word	0x0000a708
    6c4c:	0000542d 	.word	0x0000542d

00006c50 <__udivsi3>:
    6c50:	2200      	movs	r2, #0
    6c52:	0843      	lsrs	r3, r0, #1
    6c54:	428b      	cmp	r3, r1
    6c56:	d374      	bcc.n	6d42 <__udivsi3+0xf2>
    6c58:	0903      	lsrs	r3, r0, #4
    6c5a:	428b      	cmp	r3, r1
    6c5c:	d35f      	bcc.n	6d1e <__udivsi3+0xce>
    6c5e:	0a03      	lsrs	r3, r0, #8
    6c60:	428b      	cmp	r3, r1
    6c62:	d344      	bcc.n	6cee <__udivsi3+0x9e>
    6c64:	0b03      	lsrs	r3, r0, #12
    6c66:	428b      	cmp	r3, r1
    6c68:	d328      	bcc.n	6cbc <__udivsi3+0x6c>
    6c6a:	0c03      	lsrs	r3, r0, #16
    6c6c:	428b      	cmp	r3, r1
    6c6e:	d30d      	bcc.n	6c8c <__udivsi3+0x3c>
    6c70:	22ff      	movs	r2, #255	; 0xff
    6c72:	0209      	lsls	r1, r1, #8
    6c74:	ba12      	rev	r2, r2
    6c76:	0c03      	lsrs	r3, r0, #16
    6c78:	428b      	cmp	r3, r1
    6c7a:	d302      	bcc.n	6c82 <__udivsi3+0x32>
    6c7c:	1212      	asrs	r2, r2, #8
    6c7e:	0209      	lsls	r1, r1, #8
    6c80:	d065      	beq.n	6d4e <__udivsi3+0xfe>
    6c82:	0b03      	lsrs	r3, r0, #12
    6c84:	428b      	cmp	r3, r1
    6c86:	d319      	bcc.n	6cbc <__udivsi3+0x6c>
    6c88:	e000      	b.n	6c8c <__udivsi3+0x3c>
    6c8a:	0a09      	lsrs	r1, r1, #8
    6c8c:	0bc3      	lsrs	r3, r0, #15
    6c8e:	428b      	cmp	r3, r1
    6c90:	d301      	bcc.n	6c96 <__udivsi3+0x46>
    6c92:	03cb      	lsls	r3, r1, #15
    6c94:	1ac0      	subs	r0, r0, r3
    6c96:	4152      	adcs	r2, r2
    6c98:	0b83      	lsrs	r3, r0, #14
    6c9a:	428b      	cmp	r3, r1
    6c9c:	d301      	bcc.n	6ca2 <__udivsi3+0x52>
    6c9e:	038b      	lsls	r3, r1, #14
    6ca0:	1ac0      	subs	r0, r0, r3
    6ca2:	4152      	adcs	r2, r2
    6ca4:	0b43      	lsrs	r3, r0, #13
    6ca6:	428b      	cmp	r3, r1
    6ca8:	d301      	bcc.n	6cae <__udivsi3+0x5e>
    6caa:	034b      	lsls	r3, r1, #13
    6cac:	1ac0      	subs	r0, r0, r3
    6cae:	4152      	adcs	r2, r2
    6cb0:	0b03      	lsrs	r3, r0, #12
    6cb2:	428b      	cmp	r3, r1
    6cb4:	d301      	bcc.n	6cba <__udivsi3+0x6a>
    6cb6:	030b      	lsls	r3, r1, #12
    6cb8:	1ac0      	subs	r0, r0, r3
    6cba:	4152      	adcs	r2, r2
    6cbc:	0ac3      	lsrs	r3, r0, #11
    6cbe:	428b      	cmp	r3, r1
    6cc0:	d301      	bcc.n	6cc6 <__udivsi3+0x76>
    6cc2:	02cb      	lsls	r3, r1, #11
    6cc4:	1ac0      	subs	r0, r0, r3
    6cc6:	4152      	adcs	r2, r2
    6cc8:	0a83      	lsrs	r3, r0, #10
    6cca:	428b      	cmp	r3, r1
    6ccc:	d301      	bcc.n	6cd2 <__udivsi3+0x82>
    6cce:	028b      	lsls	r3, r1, #10
    6cd0:	1ac0      	subs	r0, r0, r3
    6cd2:	4152      	adcs	r2, r2
    6cd4:	0a43      	lsrs	r3, r0, #9
    6cd6:	428b      	cmp	r3, r1
    6cd8:	d301      	bcc.n	6cde <__udivsi3+0x8e>
    6cda:	024b      	lsls	r3, r1, #9
    6cdc:	1ac0      	subs	r0, r0, r3
    6cde:	4152      	adcs	r2, r2
    6ce0:	0a03      	lsrs	r3, r0, #8
    6ce2:	428b      	cmp	r3, r1
    6ce4:	d301      	bcc.n	6cea <__udivsi3+0x9a>
    6ce6:	020b      	lsls	r3, r1, #8
    6ce8:	1ac0      	subs	r0, r0, r3
    6cea:	4152      	adcs	r2, r2
    6cec:	d2cd      	bcs.n	6c8a <__udivsi3+0x3a>
    6cee:	09c3      	lsrs	r3, r0, #7
    6cf0:	428b      	cmp	r3, r1
    6cf2:	d301      	bcc.n	6cf8 <__udivsi3+0xa8>
    6cf4:	01cb      	lsls	r3, r1, #7
    6cf6:	1ac0      	subs	r0, r0, r3
    6cf8:	4152      	adcs	r2, r2
    6cfa:	0983      	lsrs	r3, r0, #6
    6cfc:	428b      	cmp	r3, r1
    6cfe:	d301      	bcc.n	6d04 <__udivsi3+0xb4>
    6d00:	018b      	lsls	r3, r1, #6
    6d02:	1ac0      	subs	r0, r0, r3
    6d04:	4152      	adcs	r2, r2
    6d06:	0943      	lsrs	r3, r0, #5
    6d08:	428b      	cmp	r3, r1
    6d0a:	d301      	bcc.n	6d10 <__udivsi3+0xc0>
    6d0c:	014b      	lsls	r3, r1, #5
    6d0e:	1ac0      	subs	r0, r0, r3
    6d10:	4152      	adcs	r2, r2
    6d12:	0903      	lsrs	r3, r0, #4
    6d14:	428b      	cmp	r3, r1
    6d16:	d301      	bcc.n	6d1c <__udivsi3+0xcc>
    6d18:	010b      	lsls	r3, r1, #4
    6d1a:	1ac0      	subs	r0, r0, r3
    6d1c:	4152      	adcs	r2, r2
    6d1e:	08c3      	lsrs	r3, r0, #3
    6d20:	428b      	cmp	r3, r1
    6d22:	d301      	bcc.n	6d28 <__udivsi3+0xd8>
    6d24:	00cb      	lsls	r3, r1, #3
    6d26:	1ac0      	subs	r0, r0, r3
    6d28:	4152      	adcs	r2, r2
    6d2a:	0883      	lsrs	r3, r0, #2
    6d2c:	428b      	cmp	r3, r1
    6d2e:	d301      	bcc.n	6d34 <__udivsi3+0xe4>
    6d30:	008b      	lsls	r3, r1, #2
    6d32:	1ac0      	subs	r0, r0, r3
    6d34:	4152      	adcs	r2, r2
    6d36:	0843      	lsrs	r3, r0, #1
    6d38:	428b      	cmp	r3, r1
    6d3a:	d301      	bcc.n	6d40 <__udivsi3+0xf0>
    6d3c:	004b      	lsls	r3, r1, #1
    6d3e:	1ac0      	subs	r0, r0, r3
    6d40:	4152      	adcs	r2, r2
    6d42:	1a41      	subs	r1, r0, r1
    6d44:	d200      	bcs.n	6d48 <__udivsi3+0xf8>
    6d46:	4601      	mov	r1, r0
    6d48:	4152      	adcs	r2, r2
    6d4a:	4610      	mov	r0, r2
    6d4c:	4770      	bx	lr
    6d4e:	e7ff      	b.n	6d50 <__udivsi3+0x100>
    6d50:	b501      	push	{r0, lr}
    6d52:	2000      	movs	r0, #0
    6d54:	f000 f806 	bl	6d64 <__aeabi_idiv0>
    6d58:	bd02      	pop	{r1, pc}
    6d5a:	46c0      	nop			; (mov r8, r8)

00006d5c <__aeabi_uidivmod>:
    6d5c:	2900      	cmp	r1, #0
    6d5e:	d0f7      	beq.n	6d50 <__udivsi3+0x100>
    6d60:	e776      	b.n	6c50 <__udivsi3>
    6d62:	4770      	bx	lr

00006d64 <__aeabi_idiv0>:
    6d64:	4770      	bx	lr
    6d66:	46c0      	nop			; (mov r8, r8)

00006d68 <__aeabi_lmul>:
    6d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d6a:	46ce      	mov	lr, r9
    6d6c:	4647      	mov	r7, r8
    6d6e:	0415      	lsls	r5, r2, #16
    6d70:	0c2d      	lsrs	r5, r5, #16
    6d72:	002e      	movs	r6, r5
    6d74:	b580      	push	{r7, lr}
    6d76:	0407      	lsls	r7, r0, #16
    6d78:	0c14      	lsrs	r4, r2, #16
    6d7a:	0c3f      	lsrs	r7, r7, #16
    6d7c:	4699      	mov	r9, r3
    6d7e:	0c03      	lsrs	r3, r0, #16
    6d80:	437e      	muls	r6, r7
    6d82:	435d      	muls	r5, r3
    6d84:	4367      	muls	r7, r4
    6d86:	4363      	muls	r3, r4
    6d88:	197f      	adds	r7, r7, r5
    6d8a:	0c34      	lsrs	r4, r6, #16
    6d8c:	19e4      	adds	r4, r4, r7
    6d8e:	469c      	mov	ip, r3
    6d90:	42a5      	cmp	r5, r4
    6d92:	d903      	bls.n	6d9c <__aeabi_lmul+0x34>
    6d94:	2380      	movs	r3, #128	; 0x80
    6d96:	025b      	lsls	r3, r3, #9
    6d98:	4698      	mov	r8, r3
    6d9a:	44c4      	add	ip, r8
    6d9c:	464b      	mov	r3, r9
    6d9e:	4351      	muls	r1, r2
    6da0:	4343      	muls	r3, r0
    6da2:	0436      	lsls	r6, r6, #16
    6da4:	0c36      	lsrs	r6, r6, #16
    6da6:	0c25      	lsrs	r5, r4, #16
    6da8:	0424      	lsls	r4, r4, #16
    6daa:	4465      	add	r5, ip
    6dac:	19a4      	adds	r4, r4, r6
    6dae:	1859      	adds	r1, r3, r1
    6db0:	1949      	adds	r1, r1, r5
    6db2:	0020      	movs	r0, r4
    6db4:	bc0c      	pop	{r2, r3}
    6db6:	4690      	mov	r8, r2
    6db8:	4699      	mov	r9, r3
    6dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006dbc <__aeabi_fmul>:
    6dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dbe:	4657      	mov	r7, sl
    6dc0:	464e      	mov	r6, r9
    6dc2:	4645      	mov	r5, r8
    6dc4:	46de      	mov	lr, fp
    6dc6:	b5e0      	push	{r5, r6, r7, lr}
    6dc8:	0247      	lsls	r7, r0, #9
    6dca:	0046      	lsls	r6, r0, #1
    6dcc:	4688      	mov	r8, r1
    6dce:	0a7f      	lsrs	r7, r7, #9
    6dd0:	0e36      	lsrs	r6, r6, #24
    6dd2:	0fc4      	lsrs	r4, r0, #31
    6dd4:	2e00      	cmp	r6, #0
    6dd6:	d047      	beq.n	6e68 <__aeabi_fmul+0xac>
    6dd8:	2eff      	cmp	r6, #255	; 0xff
    6dda:	d024      	beq.n	6e26 <__aeabi_fmul+0x6a>
    6ddc:	00fb      	lsls	r3, r7, #3
    6dde:	2780      	movs	r7, #128	; 0x80
    6de0:	04ff      	lsls	r7, r7, #19
    6de2:	431f      	orrs	r7, r3
    6de4:	2300      	movs	r3, #0
    6de6:	4699      	mov	r9, r3
    6de8:	469a      	mov	sl, r3
    6dea:	3e7f      	subs	r6, #127	; 0x7f
    6dec:	4643      	mov	r3, r8
    6dee:	025d      	lsls	r5, r3, #9
    6df0:	0058      	lsls	r0, r3, #1
    6df2:	0fdb      	lsrs	r3, r3, #31
    6df4:	0a6d      	lsrs	r5, r5, #9
    6df6:	0e00      	lsrs	r0, r0, #24
    6df8:	4698      	mov	r8, r3
    6dfa:	d043      	beq.n	6e84 <__aeabi_fmul+0xc8>
    6dfc:	28ff      	cmp	r0, #255	; 0xff
    6dfe:	d03b      	beq.n	6e78 <__aeabi_fmul+0xbc>
    6e00:	00eb      	lsls	r3, r5, #3
    6e02:	2580      	movs	r5, #128	; 0x80
    6e04:	2200      	movs	r2, #0
    6e06:	04ed      	lsls	r5, r5, #19
    6e08:	431d      	orrs	r5, r3
    6e0a:	387f      	subs	r0, #127	; 0x7f
    6e0c:	1836      	adds	r6, r6, r0
    6e0e:	1c73      	adds	r3, r6, #1
    6e10:	4641      	mov	r1, r8
    6e12:	469b      	mov	fp, r3
    6e14:	464b      	mov	r3, r9
    6e16:	4061      	eors	r1, r4
    6e18:	4313      	orrs	r3, r2
    6e1a:	2b0f      	cmp	r3, #15
    6e1c:	d864      	bhi.n	6ee8 <__aeabi_fmul+0x12c>
    6e1e:	4875      	ldr	r0, [pc, #468]	; (6ff4 <__aeabi_fmul+0x238>)
    6e20:	009b      	lsls	r3, r3, #2
    6e22:	58c3      	ldr	r3, [r0, r3]
    6e24:	469f      	mov	pc, r3
    6e26:	2f00      	cmp	r7, #0
    6e28:	d142      	bne.n	6eb0 <__aeabi_fmul+0xf4>
    6e2a:	2308      	movs	r3, #8
    6e2c:	4699      	mov	r9, r3
    6e2e:	3b06      	subs	r3, #6
    6e30:	26ff      	movs	r6, #255	; 0xff
    6e32:	469a      	mov	sl, r3
    6e34:	e7da      	b.n	6dec <__aeabi_fmul+0x30>
    6e36:	4641      	mov	r1, r8
    6e38:	2a02      	cmp	r2, #2
    6e3a:	d028      	beq.n	6e8e <__aeabi_fmul+0xd2>
    6e3c:	2a03      	cmp	r2, #3
    6e3e:	d100      	bne.n	6e42 <__aeabi_fmul+0x86>
    6e40:	e0ce      	b.n	6fe0 <__aeabi_fmul+0x224>
    6e42:	2a01      	cmp	r2, #1
    6e44:	d000      	beq.n	6e48 <__aeabi_fmul+0x8c>
    6e46:	e0ac      	b.n	6fa2 <__aeabi_fmul+0x1e6>
    6e48:	4011      	ands	r1, r2
    6e4a:	2000      	movs	r0, #0
    6e4c:	2200      	movs	r2, #0
    6e4e:	b2cc      	uxtb	r4, r1
    6e50:	0240      	lsls	r0, r0, #9
    6e52:	05d2      	lsls	r2, r2, #23
    6e54:	0a40      	lsrs	r0, r0, #9
    6e56:	07e4      	lsls	r4, r4, #31
    6e58:	4310      	orrs	r0, r2
    6e5a:	4320      	orrs	r0, r4
    6e5c:	bc3c      	pop	{r2, r3, r4, r5}
    6e5e:	4690      	mov	r8, r2
    6e60:	4699      	mov	r9, r3
    6e62:	46a2      	mov	sl, r4
    6e64:	46ab      	mov	fp, r5
    6e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e68:	2f00      	cmp	r7, #0
    6e6a:	d115      	bne.n	6e98 <__aeabi_fmul+0xdc>
    6e6c:	2304      	movs	r3, #4
    6e6e:	4699      	mov	r9, r3
    6e70:	3b03      	subs	r3, #3
    6e72:	2600      	movs	r6, #0
    6e74:	469a      	mov	sl, r3
    6e76:	e7b9      	b.n	6dec <__aeabi_fmul+0x30>
    6e78:	20ff      	movs	r0, #255	; 0xff
    6e7a:	2202      	movs	r2, #2
    6e7c:	2d00      	cmp	r5, #0
    6e7e:	d0c5      	beq.n	6e0c <__aeabi_fmul+0x50>
    6e80:	2203      	movs	r2, #3
    6e82:	e7c3      	b.n	6e0c <__aeabi_fmul+0x50>
    6e84:	2d00      	cmp	r5, #0
    6e86:	d119      	bne.n	6ebc <__aeabi_fmul+0x100>
    6e88:	2000      	movs	r0, #0
    6e8a:	2201      	movs	r2, #1
    6e8c:	e7be      	b.n	6e0c <__aeabi_fmul+0x50>
    6e8e:	2401      	movs	r4, #1
    6e90:	22ff      	movs	r2, #255	; 0xff
    6e92:	400c      	ands	r4, r1
    6e94:	2000      	movs	r0, #0
    6e96:	e7db      	b.n	6e50 <__aeabi_fmul+0x94>
    6e98:	0038      	movs	r0, r7
    6e9a:	f001 fd65 	bl	8968 <__clzsi2>
    6e9e:	2676      	movs	r6, #118	; 0x76
    6ea0:	1f43      	subs	r3, r0, #5
    6ea2:	409f      	lsls	r7, r3
    6ea4:	2300      	movs	r3, #0
    6ea6:	4276      	negs	r6, r6
    6ea8:	1a36      	subs	r6, r6, r0
    6eaa:	4699      	mov	r9, r3
    6eac:	469a      	mov	sl, r3
    6eae:	e79d      	b.n	6dec <__aeabi_fmul+0x30>
    6eb0:	230c      	movs	r3, #12
    6eb2:	4699      	mov	r9, r3
    6eb4:	3b09      	subs	r3, #9
    6eb6:	26ff      	movs	r6, #255	; 0xff
    6eb8:	469a      	mov	sl, r3
    6eba:	e797      	b.n	6dec <__aeabi_fmul+0x30>
    6ebc:	0028      	movs	r0, r5
    6ebe:	f001 fd53 	bl	8968 <__clzsi2>
    6ec2:	1f43      	subs	r3, r0, #5
    6ec4:	409d      	lsls	r5, r3
    6ec6:	2376      	movs	r3, #118	; 0x76
    6ec8:	425b      	negs	r3, r3
    6eca:	1a18      	subs	r0, r3, r0
    6ecc:	2200      	movs	r2, #0
    6ece:	e79d      	b.n	6e0c <__aeabi_fmul+0x50>
    6ed0:	2080      	movs	r0, #128	; 0x80
    6ed2:	2400      	movs	r4, #0
    6ed4:	03c0      	lsls	r0, r0, #15
    6ed6:	22ff      	movs	r2, #255	; 0xff
    6ed8:	e7ba      	b.n	6e50 <__aeabi_fmul+0x94>
    6eda:	003d      	movs	r5, r7
    6edc:	4652      	mov	r2, sl
    6ede:	e7ab      	b.n	6e38 <__aeabi_fmul+0x7c>
    6ee0:	003d      	movs	r5, r7
    6ee2:	0021      	movs	r1, r4
    6ee4:	4652      	mov	r2, sl
    6ee6:	e7a7      	b.n	6e38 <__aeabi_fmul+0x7c>
    6ee8:	0c3b      	lsrs	r3, r7, #16
    6eea:	469c      	mov	ip, r3
    6eec:	042a      	lsls	r2, r5, #16
    6eee:	0c12      	lsrs	r2, r2, #16
    6ef0:	0c2b      	lsrs	r3, r5, #16
    6ef2:	0014      	movs	r4, r2
    6ef4:	4660      	mov	r0, ip
    6ef6:	4665      	mov	r5, ip
    6ef8:	043f      	lsls	r7, r7, #16
    6efa:	0c3f      	lsrs	r7, r7, #16
    6efc:	437c      	muls	r4, r7
    6efe:	4342      	muls	r2, r0
    6f00:	435d      	muls	r5, r3
    6f02:	437b      	muls	r3, r7
    6f04:	0c27      	lsrs	r7, r4, #16
    6f06:	189b      	adds	r3, r3, r2
    6f08:	18ff      	adds	r7, r7, r3
    6f0a:	42ba      	cmp	r2, r7
    6f0c:	d903      	bls.n	6f16 <__aeabi_fmul+0x15a>
    6f0e:	2380      	movs	r3, #128	; 0x80
    6f10:	025b      	lsls	r3, r3, #9
    6f12:	469c      	mov	ip, r3
    6f14:	4465      	add	r5, ip
    6f16:	0424      	lsls	r4, r4, #16
    6f18:	043a      	lsls	r2, r7, #16
    6f1a:	0c24      	lsrs	r4, r4, #16
    6f1c:	1912      	adds	r2, r2, r4
    6f1e:	0193      	lsls	r3, r2, #6
    6f20:	1e5c      	subs	r4, r3, #1
    6f22:	41a3      	sbcs	r3, r4
    6f24:	0c3f      	lsrs	r7, r7, #16
    6f26:	0e92      	lsrs	r2, r2, #26
    6f28:	197d      	adds	r5, r7, r5
    6f2a:	431a      	orrs	r2, r3
    6f2c:	01ad      	lsls	r5, r5, #6
    6f2e:	4315      	orrs	r5, r2
    6f30:	012b      	lsls	r3, r5, #4
    6f32:	d504      	bpl.n	6f3e <__aeabi_fmul+0x182>
    6f34:	2301      	movs	r3, #1
    6f36:	465e      	mov	r6, fp
    6f38:	086a      	lsrs	r2, r5, #1
    6f3a:	401d      	ands	r5, r3
    6f3c:	4315      	orrs	r5, r2
    6f3e:	0032      	movs	r2, r6
    6f40:	327f      	adds	r2, #127	; 0x7f
    6f42:	2a00      	cmp	r2, #0
    6f44:	dd25      	ble.n	6f92 <__aeabi_fmul+0x1d6>
    6f46:	076b      	lsls	r3, r5, #29
    6f48:	d004      	beq.n	6f54 <__aeabi_fmul+0x198>
    6f4a:	230f      	movs	r3, #15
    6f4c:	402b      	ands	r3, r5
    6f4e:	2b04      	cmp	r3, #4
    6f50:	d000      	beq.n	6f54 <__aeabi_fmul+0x198>
    6f52:	3504      	adds	r5, #4
    6f54:	012b      	lsls	r3, r5, #4
    6f56:	d503      	bpl.n	6f60 <__aeabi_fmul+0x1a4>
    6f58:	0032      	movs	r2, r6
    6f5a:	4b27      	ldr	r3, [pc, #156]	; (6ff8 <__aeabi_fmul+0x23c>)
    6f5c:	3280      	adds	r2, #128	; 0x80
    6f5e:	401d      	ands	r5, r3
    6f60:	2afe      	cmp	r2, #254	; 0xfe
    6f62:	dc94      	bgt.n	6e8e <__aeabi_fmul+0xd2>
    6f64:	2401      	movs	r4, #1
    6f66:	01a8      	lsls	r0, r5, #6
    6f68:	0a40      	lsrs	r0, r0, #9
    6f6a:	b2d2      	uxtb	r2, r2
    6f6c:	400c      	ands	r4, r1
    6f6e:	e76f      	b.n	6e50 <__aeabi_fmul+0x94>
    6f70:	2080      	movs	r0, #128	; 0x80
    6f72:	03c0      	lsls	r0, r0, #15
    6f74:	4207      	tst	r7, r0
    6f76:	d007      	beq.n	6f88 <__aeabi_fmul+0x1cc>
    6f78:	4205      	tst	r5, r0
    6f7a:	d105      	bne.n	6f88 <__aeabi_fmul+0x1cc>
    6f7c:	4328      	orrs	r0, r5
    6f7e:	0240      	lsls	r0, r0, #9
    6f80:	0a40      	lsrs	r0, r0, #9
    6f82:	4644      	mov	r4, r8
    6f84:	22ff      	movs	r2, #255	; 0xff
    6f86:	e763      	b.n	6e50 <__aeabi_fmul+0x94>
    6f88:	4338      	orrs	r0, r7
    6f8a:	0240      	lsls	r0, r0, #9
    6f8c:	0a40      	lsrs	r0, r0, #9
    6f8e:	22ff      	movs	r2, #255	; 0xff
    6f90:	e75e      	b.n	6e50 <__aeabi_fmul+0x94>
    6f92:	2401      	movs	r4, #1
    6f94:	1aa3      	subs	r3, r4, r2
    6f96:	2b1b      	cmp	r3, #27
    6f98:	dd05      	ble.n	6fa6 <__aeabi_fmul+0x1ea>
    6f9a:	400c      	ands	r4, r1
    6f9c:	2200      	movs	r2, #0
    6f9e:	2000      	movs	r0, #0
    6fa0:	e756      	b.n	6e50 <__aeabi_fmul+0x94>
    6fa2:	465e      	mov	r6, fp
    6fa4:	e7cb      	b.n	6f3e <__aeabi_fmul+0x182>
    6fa6:	002a      	movs	r2, r5
    6fa8:	2020      	movs	r0, #32
    6faa:	40da      	lsrs	r2, r3
    6fac:	1ac3      	subs	r3, r0, r3
    6fae:	409d      	lsls	r5, r3
    6fb0:	002b      	movs	r3, r5
    6fb2:	1e5d      	subs	r5, r3, #1
    6fb4:	41ab      	sbcs	r3, r5
    6fb6:	4313      	orrs	r3, r2
    6fb8:	075a      	lsls	r2, r3, #29
    6fba:	d004      	beq.n	6fc6 <__aeabi_fmul+0x20a>
    6fbc:	220f      	movs	r2, #15
    6fbe:	401a      	ands	r2, r3
    6fc0:	2a04      	cmp	r2, #4
    6fc2:	d000      	beq.n	6fc6 <__aeabi_fmul+0x20a>
    6fc4:	3304      	adds	r3, #4
    6fc6:	015a      	lsls	r2, r3, #5
    6fc8:	d504      	bpl.n	6fd4 <__aeabi_fmul+0x218>
    6fca:	2401      	movs	r4, #1
    6fcc:	2201      	movs	r2, #1
    6fce:	400c      	ands	r4, r1
    6fd0:	2000      	movs	r0, #0
    6fd2:	e73d      	b.n	6e50 <__aeabi_fmul+0x94>
    6fd4:	2401      	movs	r4, #1
    6fd6:	019b      	lsls	r3, r3, #6
    6fd8:	0a58      	lsrs	r0, r3, #9
    6fda:	400c      	ands	r4, r1
    6fdc:	2200      	movs	r2, #0
    6fde:	e737      	b.n	6e50 <__aeabi_fmul+0x94>
    6fe0:	2080      	movs	r0, #128	; 0x80
    6fe2:	2401      	movs	r4, #1
    6fe4:	03c0      	lsls	r0, r0, #15
    6fe6:	4328      	orrs	r0, r5
    6fe8:	0240      	lsls	r0, r0, #9
    6fea:	0a40      	lsrs	r0, r0, #9
    6fec:	400c      	ands	r4, r1
    6fee:	22ff      	movs	r2, #255	; 0xff
    6ff0:	e72e      	b.n	6e50 <__aeabi_fmul+0x94>
    6ff2:	46c0      	nop			; (mov r8, r8)
    6ff4:	0000a730 	.word	0x0000a730
    6ff8:	f7ffffff 	.word	0xf7ffffff

00006ffc <__aeabi_f2iz>:
    6ffc:	0241      	lsls	r1, r0, #9
    6ffe:	0043      	lsls	r3, r0, #1
    7000:	0fc2      	lsrs	r2, r0, #31
    7002:	0a49      	lsrs	r1, r1, #9
    7004:	0e1b      	lsrs	r3, r3, #24
    7006:	2000      	movs	r0, #0
    7008:	2b7e      	cmp	r3, #126	; 0x7e
    700a:	dd0d      	ble.n	7028 <__aeabi_f2iz+0x2c>
    700c:	2b9d      	cmp	r3, #157	; 0x9d
    700e:	dc0c      	bgt.n	702a <__aeabi_f2iz+0x2e>
    7010:	2080      	movs	r0, #128	; 0x80
    7012:	0400      	lsls	r0, r0, #16
    7014:	4301      	orrs	r1, r0
    7016:	2b95      	cmp	r3, #149	; 0x95
    7018:	dc0a      	bgt.n	7030 <__aeabi_f2iz+0x34>
    701a:	2096      	movs	r0, #150	; 0x96
    701c:	1ac3      	subs	r3, r0, r3
    701e:	40d9      	lsrs	r1, r3
    7020:	4248      	negs	r0, r1
    7022:	2a00      	cmp	r2, #0
    7024:	d100      	bne.n	7028 <__aeabi_f2iz+0x2c>
    7026:	0008      	movs	r0, r1
    7028:	4770      	bx	lr
    702a:	4b03      	ldr	r3, [pc, #12]	; (7038 <__aeabi_f2iz+0x3c>)
    702c:	18d0      	adds	r0, r2, r3
    702e:	e7fb      	b.n	7028 <__aeabi_f2iz+0x2c>
    7030:	3b96      	subs	r3, #150	; 0x96
    7032:	4099      	lsls	r1, r3
    7034:	e7f4      	b.n	7020 <__aeabi_f2iz+0x24>
    7036:	46c0      	nop			; (mov r8, r8)
    7038:	7fffffff 	.word	0x7fffffff

0000703c <__aeabi_i2f>:
    703c:	b570      	push	{r4, r5, r6, lr}
    703e:	2800      	cmp	r0, #0
    7040:	d030      	beq.n	70a4 <__aeabi_i2f+0x68>
    7042:	17c3      	asrs	r3, r0, #31
    7044:	18c4      	adds	r4, r0, r3
    7046:	405c      	eors	r4, r3
    7048:	0fc5      	lsrs	r5, r0, #31
    704a:	0020      	movs	r0, r4
    704c:	f001 fc8c 	bl	8968 <__clzsi2>
    7050:	239e      	movs	r3, #158	; 0x9e
    7052:	1a1b      	subs	r3, r3, r0
    7054:	2b96      	cmp	r3, #150	; 0x96
    7056:	dc0d      	bgt.n	7074 <__aeabi_i2f+0x38>
    7058:	2296      	movs	r2, #150	; 0x96
    705a:	1ad2      	subs	r2, r2, r3
    705c:	4094      	lsls	r4, r2
    705e:	002a      	movs	r2, r5
    7060:	0264      	lsls	r4, r4, #9
    7062:	0a64      	lsrs	r4, r4, #9
    7064:	b2db      	uxtb	r3, r3
    7066:	0264      	lsls	r4, r4, #9
    7068:	05db      	lsls	r3, r3, #23
    706a:	0a60      	lsrs	r0, r4, #9
    706c:	07d2      	lsls	r2, r2, #31
    706e:	4318      	orrs	r0, r3
    7070:	4310      	orrs	r0, r2
    7072:	bd70      	pop	{r4, r5, r6, pc}
    7074:	2b99      	cmp	r3, #153	; 0x99
    7076:	dc19      	bgt.n	70ac <__aeabi_i2f+0x70>
    7078:	2299      	movs	r2, #153	; 0x99
    707a:	1ad2      	subs	r2, r2, r3
    707c:	2a00      	cmp	r2, #0
    707e:	dd29      	ble.n	70d4 <__aeabi_i2f+0x98>
    7080:	4094      	lsls	r4, r2
    7082:	0022      	movs	r2, r4
    7084:	4c14      	ldr	r4, [pc, #80]	; (70d8 <__aeabi_i2f+0x9c>)
    7086:	4014      	ands	r4, r2
    7088:	0751      	lsls	r1, r2, #29
    708a:	d004      	beq.n	7096 <__aeabi_i2f+0x5a>
    708c:	210f      	movs	r1, #15
    708e:	400a      	ands	r2, r1
    7090:	2a04      	cmp	r2, #4
    7092:	d000      	beq.n	7096 <__aeabi_i2f+0x5a>
    7094:	3404      	adds	r4, #4
    7096:	0162      	lsls	r2, r4, #5
    7098:	d413      	bmi.n	70c2 <__aeabi_i2f+0x86>
    709a:	01a4      	lsls	r4, r4, #6
    709c:	0a64      	lsrs	r4, r4, #9
    709e:	b2db      	uxtb	r3, r3
    70a0:	002a      	movs	r2, r5
    70a2:	e7e0      	b.n	7066 <__aeabi_i2f+0x2a>
    70a4:	2200      	movs	r2, #0
    70a6:	2300      	movs	r3, #0
    70a8:	2400      	movs	r4, #0
    70aa:	e7dc      	b.n	7066 <__aeabi_i2f+0x2a>
    70ac:	2205      	movs	r2, #5
    70ae:	0021      	movs	r1, r4
    70b0:	1a12      	subs	r2, r2, r0
    70b2:	40d1      	lsrs	r1, r2
    70b4:	22b9      	movs	r2, #185	; 0xb9
    70b6:	1ad2      	subs	r2, r2, r3
    70b8:	4094      	lsls	r4, r2
    70ba:	1e62      	subs	r2, r4, #1
    70bc:	4194      	sbcs	r4, r2
    70be:	430c      	orrs	r4, r1
    70c0:	e7da      	b.n	7078 <__aeabi_i2f+0x3c>
    70c2:	4b05      	ldr	r3, [pc, #20]	; (70d8 <__aeabi_i2f+0x9c>)
    70c4:	002a      	movs	r2, r5
    70c6:	401c      	ands	r4, r3
    70c8:	239f      	movs	r3, #159	; 0x9f
    70ca:	01a4      	lsls	r4, r4, #6
    70cc:	1a1b      	subs	r3, r3, r0
    70ce:	0a64      	lsrs	r4, r4, #9
    70d0:	b2db      	uxtb	r3, r3
    70d2:	e7c8      	b.n	7066 <__aeabi_i2f+0x2a>
    70d4:	0022      	movs	r2, r4
    70d6:	e7d5      	b.n	7084 <__aeabi_i2f+0x48>
    70d8:	fbffffff 	.word	0xfbffffff

000070dc <__aeabi_dadd>:
    70dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70de:	4645      	mov	r5, r8
    70e0:	46de      	mov	lr, fp
    70e2:	4657      	mov	r7, sl
    70e4:	464e      	mov	r6, r9
    70e6:	030c      	lsls	r4, r1, #12
    70e8:	b5e0      	push	{r5, r6, r7, lr}
    70ea:	004e      	lsls	r6, r1, #1
    70ec:	0fc9      	lsrs	r1, r1, #31
    70ee:	4688      	mov	r8, r1
    70f0:	000d      	movs	r5, r1
    70f2:	0a61      	lsrs	r1, r4, #9
    70f4:	0f44      	lsrs	r4, r0, #29
    70f6:	430c      	orrs	r4, r1
    70f8:	00c7      	lsls	r7, r0, #3
    70fa:	0319      	lsls	r1, r3, #12
    70fc:	0058      	lsls	r0, r3, #1
    70fe:	0fdb      	lsrs	r3, r3, #31
    7100:	469b      	mov	fp, r3
    7102:	0a4b      	lsrs	r3, r1, #9
    7104:	0f51      	lsrs	r1, r2, #29
    7106:	430b      	orrs	r3, r1
    7108:	0d76      	lsrs	r6, r6, #21
    710a:	0d40      	lsrs	r0, r0, #21
    710c:	0019      	movs	r1, r3
    710e:	00d2      	lsls	r2, r2, #3
    7110:	45d8      	cmp	r8, fp
    7112:	d100      	bne.n	7116 <__aeabi_dadd+0x3a>
    7114:	e0ae      	b.n	7274 <__aeabi_dadd+0x198>
    7116:	1a35      	subs	r5, r6, r0
    7118:	2d00      	cmp	r5, #0
    711a:	dc00      	bgt.n	711e <__aeabi_dadd+0x42>
    711c:	e0f6      	b.n	730c <__aeabi_dadd+0x230>
    711e:	2800      	cmp	r0, #0
    7120:	d10f      	bne.n	7142 <__aeabi_dadd+0x66>
    7122:	4313      	orrs	r3, r2
    7124:	d100      	bne.n	7128 <__aeabi_dadd+0x4c>
    7126:	e0db      	b.n	72e0 <__aeabi_dadd+0x204>
    7128:	1e6b      	subs	r3, r5, #1
    712a:	2b00      	cmp	r3, #0
    712c:	d000      	beq.n	7130 <__aeabi_dadd+0x54>
    712e:	e137      	b.n	73a0 <__aeabi_dadd+0x2c4>
    7130:	1aba      	subs	r2, r7, r2
    7132:	4297      	cmp	r7, r2
    7134:	41bf      	sbcs	r7, r7
    7136:	1a64      	subs	r4, r4, r1
    7138:	427f      	negs	r7, r7
    713a:	1be4      	subs	r4, r4, r7
    713c:	2601      	movs	r6, #1
    713e:	0017      	movs	r7, r2
    7140:	e024      	b.n	718c <__aeabi_dadd+0xb0>
    7142:	4bc6      	ldr	r3, [pc, #792]	; (745c <__aeabi_dadd+0x380>)
    7144:	429e      	cmp	r6, r3
    7146:	d04d      	beq.n	71e4 <__aeabi_dadd+0x108>
    7148:	2380      	movs	r3, #128	; 0x80
    714a:	041b      	lsls	r3, r3, #16
    714c:	4319      	orrs	r1, r3
    714e:	2d38      	cmp	r5, #56	; 0x38
    7150:	dd00      	ble.n	7154 <__aeabi_dadd+0x78>
    7152:	e107      	b.n	7364 <__aeabi_dadd+0x288>
    7154:	2d1f      	cmp	r5, #31
    7156:	dd00      	ble.n	715a <__aeabi_dadd+0x7e>
    7158:	e138      	b.n	73cc <__aeabi_dadd+0x2f0>
    715a:	2020      	movs	r0, #32
    715c:	1b43      	subs	r3, r0, r5
    715e:	469a      	mov	sl, r3
    7160:	000b      	movs	r3, r1
    7162:	4650      	mov	r0, sl
    7164:	4083      	lsls	r3, r0
    7166:	4699      	mov	r9, r3
    7168:	0013      	movs	r3, r2
    716a:	4648      	mov	r0, r9
    716c:	40eb      	lsrs	r3, r5
    716e:	4318      	orrs	r0, r3
    7170:	0003      	movs	r3, r0
    7172:	4650      	mov	r0, sl
    7174:	4082      	lsls	r2, r0
    7176:	1e50      	subs	r0, r2, #1
    7178:	4182      	sbcs	r2, r0
    717a:	40e9      	lsrs	r1, r5
    717c:	431a      	orrs	r2, r3
    717e:	1aba      	subs	r2, r7, r2
    7180:	1a61      	subs	r1, r4, r1
    7182:	4297      	cmp	r7, r2
    7184:	41a4      	sbcs	r4, r4
    7186:	0017      	movs	r7, r2
    7188:	4264      	negs	r4, r4
    718a:	1b0c      	subs	r4, r1, r4
    718c:	0223      	lsls	r3, r4, #8
    718e:	d562      	bpl.n	7256 <__aeabi_dadd+0x17a>
    7190:	0264      	lsls	r4, r4, #9
    7192:	0a65      	lsrs	r5, r4, #9
    7194:	2d00      	cmp	r5, #0
    7196:	d100      	bne.n	719a <__aeabi_dadd+0xbe>
    7198:	e0df      	b.n	735a <__aeabi_dadd+0x27e>
    719a:	0028      	movs	r0, r5
    719c:	f001 fbe4 	bl	8968 <__clzsi2>
    71a0:	0003      	movs	r3, r0
    71a2:	3b08      	subs	r3, #8
    71a4:	2b1f      	cmp	r3, #31
    71a6:	dd00      	ble.n	71aa <__aeabi_dadd+0xce>
    71a8:	e0d2      	b.n	7350 <__aeabi_dadd+0x274>
    71aa:	2220      	movs	r2, #32
    71ac:	003c      	movs	r4, r7
    71ae:	1ad2      	subs	r2, r2, r3
    71b0:	409d      	lsls	r5, r3
    71b2:	40d4      	lsrs	r4, r2
    71b4:	409f      	lsls	r7, r3
    71b6:	4325      	orrs	r5, r4
    71b8:	429e      	cmp	r6, r3
    71ba:	dd00      	ble.n	71be <__aeabi_dadd+0xe2>
    71bc:	e0c4      	b.n	7348 <__aeabi_dadd+0x26c>
    71be:	1b9e      	subs	r6, r3, r6
    71c0:	1c73      	adds	r3, r6, #1
    71c2:	2b1f      	cmp	r3, #31
    71c4:	dd00      	ble.n	71c8 <__aeabi_dadd+0xec>
    71c6:	e0f1      	b.n	73ac <__aeabi_dadd+0x2d0>
    71c8:	2220      	movs	r2, #32
    71ca:	0038      	movs	r0, r7
    71cc:	0029      	movs	r1, r5
    71ce:	1ad2      	subs	r2, r2, r3
    71d0:	40d8      	lsrs	r0, r3
    71d2:	4091      	lsls	r1, r2
    71d4:	4097      	lsls	r7, r2
    71d6:	002c      	movs	r4, r5
    71d8:	4301      	orrs	r1, r0
    71da:	1e78      	subs	r0, r7, #1
    71dc:	4187      	sbcs	r7, r0
    71de:	40dc      	lsrs	r4, r3
    71e0:	2600      	movs	r6, #0
    71e2:	430f      	orrs	r7, r1
    71e4:	077b      	lsls	r3, r7, #29
    71e6:	d009      	beq.n	71fc <__aeabi_dadd+0x120>
    71e8:	230f      	movs	r3, #15
    71ea:	403b      	ands	r3, r7
    71ec:	2b04      	cmp	r3, #4
    71ee:	d005      	beq.n	71fc <__aeabi_dadd+0x120>
    71f0:	1d3b      	adds	r3, r7, #4
    71f2:	42bb      	cmp	r3, r7
    71f4:	41bf      	sbcs	r7, r7
    71f6:	427f      	negs	r7, r7
    71f8:	19e4      	adds	r4, r4, r7
    71fa:	001f      	movs	r7, r3
    71fc:	0223      	lsls	r3, r4, #8
    71fe:	d52c      	bpl.n	725a <__aeabi_dadd+0x17e>
    7200:	4b96      	ldr	r3, [pc, #600]	; (745c <__aeabi_dadd+0x380>)
    7202:	3601      	adds	r6, #1
    7204:	429e      	cmp	r6, r3
    7206:	d100      	bne.n	720a <__aeabi_dadd+0x12e>
    7208:	e09a      	b.n	7340 <__aeabi_dadd+0x264>
    720a:	4645      	mov	r5, r8
    720c:	4b94      	ldr	r3, [pc, #592]	; (7460 <__aeabi_dadd+0x384>)
    720e:	08ff      	lsrs	r7, r7, #3
    7210:	401c      	ands	r4, r3
    7212:	0760      	lsls	r0, r4, #29
    7214:	0576      	lsls	r6, r6, #21
    7216:	0264      	lsls	r4, r4, #9
    7218:	4307      	orrs	r7, r0
    721a:	0b24      	lsrs	r4, r4, #12
    721c:	0d76      	lsrs	r6, r6, #21
    721e:	2100      	movs	r1, #0
    7220:	0324      	lsls	r4, r4, #12
    7222:	0b23      	lsrs	r3, r4, #12
    7224:	0d0c      	lsrs	r4, r1, #20
    7226:	4a8f      	ldr	r2, [pc, #572]	; (7464 <__aeabi_dadd+0x388>)
    7228:	0524      	lsls	r4, r4, #20
    722a:	431c      	orrs	r4, r3
    722c:	4014      	ands	r4, r2
    722e:	0533      	lsls	r3, r6, #20
    7230:	4323      	orrs	r3, r4
    7232:	005b      	lsls	r3, r3, #1
    7234:	07ed      	lsls	r5, r5, #31
    7236:	085b      	lsrs	r3, r3, #1
    7238:	432b      	orrs	r3, r5
    723a:	0038      	movs	r0, r7
    723c:	0019      	movs	r1, r3
    723e:	bc3c      	pop	{r2, r3, r4, r5}
    7240:	4690      	mov	r8, r2
    7242:	4699      	mov	r9, r3
    7244:	46a2      	mov	sl, r4
    7246:	46ab      	mov	fp, r5
    7248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    724a:	4664      	mov	r4, ip
    724c:	4304      	orrs	r4, r0
    724e:	d100      	bne.n	7252 <__aeabi_dadd+0x176>
    7250:	e211      	b.n	7676 <__aeabi_dadd+0x59a>
    7252:	0004      	movs	r4, r0
    7254:	4667      	mov	r7, ip
    7256:	077b      	lsls	r3, r7, #29
    7258:	d1c6      	bne.n	71e8 <__aeabi_dadd+0x10c>
    725a:	4645      	mov	r5, r8
    725c:	0760      	lsls	r0, r4, #29
    725e:	08ff      	lsrs	r7, r7, #3
    7260:	4307      	orrs	r7, r0
    7262:	08e4      	lsrs	r4, r4, #3
    7264:	4b7d      	ldr	r3, [pc, #500]	; (745c <__aeabi_dadd+0x380>)
    7266:	429e      	cmp	r6, r3
    7268:	d030      	beq.n	72cc <__aeabi_dadd+0x1f0>
    726a:	0324      	lsls	r4, r4, #12
    726c:	0576      	lsls	r6, r6, #21
    726e:	0b24      	lsrs	r4, r4, #12
    7270:	0d76      	lsrs	r6, r6, #21
    7272:	e7d4      	b.n	721e <__aeabi_dadd+0x142>
    7274:	1a33      	subs	r3, r6, r0
    7276:	469a      	mov	sl, r3
    7278:	2b00      	cmp	r3, #0
    727a:	dd78      	ble.n	736e <__aeabi_dadd+0x292>
    727c:	2800      	cmp	r0, #0
    727e:	d031      	beq.n	72e4 <__aeabi_dadd+0x208>
    7280:	4876      	ldr	r0, [pc, #472]	; (745c <__aeabi_dadd+0x380>)
    7282:	4286      	cmp	r6, r0
    7284:	d0ae      	beq.n	71e4 <__aeabi_dadd+0x108>
    7286:	2080      	movs	r0, #128	; 0x80
    7288:	0400      	lsls	r0, r0, #16
    728a:	4301      	orrs	r1, r0
    728c:	4653      	mov	r3, sl
    728e:	2b38      	cmp	r3, #56	; 0x38
    7290:	dc00      	bgt.n	7294 <__aeabi_dadd+0x1b8>
    7292:	e0e9      	b.n	7468 <__aeabi_dadd+0x38c>
    7294:	430a      	orrs	r2, r1
    7296:	1e51      	subs	r1, r2, #1
    7298:	418a      	sbcs	r2, r1
    729a:	2100      	movs	r1, #0
    729c:	19d2      	adds	r2, r2, r7
    729e:	42ba      	cmp	r2, r7
    72a0:	41bf      	sbcs	r7, r7
    72a2:	1909      	adds	r1, r1, r4
    72a4:	427c      	negs	r4, r7
    72a6:	0017      	movs	r7, r2
    72a8:	190c      	adds	r4, r1, r4
    72aa:	0223      	lsls	r3, r4, #8
    72ac:	d5d3      	bpl.n	7256 <__aeabi_dadd+0x17a>
    72ae:	4b6b      	ldr	r3, [pc, #428]	; (745c <__aeabi_dadd+0x380>)
    72b0:	3601      	adds	r6, #1
    72b2:	429e      	cmp	r6, r3
    72b4:	d100      	bne.n	72b8 <__aeabi_dadd+0x1dc>
    72b6:	e13a      	b.n	752e <__aeabi_dadd+0x452>
    72b8:	2001      	movs	r0, #1
    72ba:	4b69      	ldr	r3, [pc, #420]	; (7460 <__aeabi_dadd+0x384>)
    72bc:	401c      	ands	r4, r3
    72be:	087b      	lsrs	r3, r7, #1
    72c0:	4007      	ands	r7, r0
    72c2:	431f      	orrs	r7, r3
    72c4:	07e0      	lsls	r0, r4, #31
    72c6:	4307      	orrs	r7, r0
    72c8:	0864      	lsrs	r4, r4, #1
    72ca:	e78b      	b.n	71e4 <__aeabi_dadd+0x108>
    72cc:	0023      	movs	r3, r4
    72ce:	433b      	orrs	r3, r7
    72d0:	d100      	bne.n	72d4 <__aeabi_dadd+0x1f8>
    72d2:	e1cb      	b.n	766c <__aeabi_dadd+0x590>
    72d4:	2280      	movs	r2, #128	; 0x80
    72d6:	0312      	lsls	r2, r2, #12
    72d8:	4314      	orrs	r4, r2
    72da:	0324      	lsls	r4, r4, #12
    72dc:	0b24      	lsrs	r4, r4, #12
    72de:	e79e      	b.n	721e <__aeabi_dadd+0x142>
    72e0:	002e      	movs	r6, r5
    72e2:	e77f      	b.n	71e4 <__aeabi_dadd+0x108>
    72e4:	0008      	movs	r0, r1
    72e6:	4310      	orrs	r0, r2
    72e8:	d100      	bne.n	72ec <__aeabi_dadd+0x210>
    72ea:	e0b4      	b.n	7456 <__aeabi_dadd+0x37a>
    72ec:	1e58      	subs	r0, r3, #1
    72ee:	2800      	cmp	r0, #0
    72f0:	d000      	beq.n	72f4 <__aeabi_dadd+0x218>
    72f2:	e0de      	b.n	74b2 <__aeabi_dadd+0x3d6>
    72f4:	18ba      	adds	r2, r7, r2
    72f6:	42ba      	cmp	r2, r7
    72f8:	419b      	sbcs	r3, r3
    72fa:	1864      	adds	r4, r4, r1
    72fc:	425b      	negs	r3, r3
    72fe:	18e4      	adds	r4, r4, r3
    7300:	0017      	movs	r7, r2
    7302:	2601      	movs	r6, #1
    7304:	0223      	lsls	r3, r4, #8
    7306:	d5a6      	bpl.n	7256 <__aeabi_dadd+0x17a>
    7308:	2602      	movs	r6, #2
    730a:	e7d5      	b.n	72b8 <__aeabi_dadd+0x1dc>
    730c:	2d00      	cmp	r5, #0
    730e:	d16e      	bne.n	73ee <__aeabi_dadd+0x312>
    7310:	1c70      	adds	r0, r6, #1
    7312:	0540      	lsls	r0, r0, #21
    7314:	0d40      	lsrs	r0, r0, #21
    7316:	2801      	cmp	r0, #1
    7318:	dc00      	bgt.n	731c <__aeabi_dadd+0x240>
    731a:	e0f9      	b.n	7510 <__aeabi_dadd+0x434>
    731c:	1ab8      	subs	r0, r7, r2
    731e:	4684      	mov	ip, r0
    7320:	4287      	cmp	r7, r0
    7322:	4180      	sbcs	r0, r0
    7324:	1ae5      	subs	r5, r4, r3
    7326:	4240      	negs	r0, r0
    7328:	1a2d      	subs	r5, r5, r0
    732a:	0228      	lsls	r0, r5, #8
    732c:	d400      	bmi.n	7330 <__aeabi_dadd+0x254>
    732e:	e089      	b.n	7444 <__aeabi_dadd+0x368>
    7330:	1bd7      	subs	r7, r2, r7
    7332:	42ba      	cmp	r2, r7
    7334:	4192      	sbcs	r2, r2
    7336:	1b1c      	subs	r4, r3, r4
    7338:	4252      	negs	r2, r2
    733a:	1aa5      	subs	r5, r4, r2
    733c:	46d8      	mov	r8, fp
    733e:	e729      	b.n	7194 <__aeabi_dadd+0xb8>
    7340:	4645      	mov	r5, r8
    7342:	2400      	movs	r4, #0
    7344:	2700      	movs	r7, #0
    7346:	e76a      	b.n	721e <__aeabi_dadd+0x142>
    7348:	4c45      	ldr	r4, [pc, #276]	; (7460 <__aeabi_dadd+0x384>)
    734a:	1af6      	subs	r6, r6, r3
    734c:	402c      	ands	r4, r5
    734e:	e749      	b.n	71e4 <__aeabi_dadd+0x108>
    7350:	003d      	movs	r5, r7
    7352:	3828      	subs	r0, #40	; 0x28
    7354:	4085      	lsls	r5, r0
    7356:	2700      	movs	r7, #0
    7358:	e72e      	b.n	71b8 <__aeabi_dadd+0xdc>
    735a:	0038      	movs	r0, r7
    735c:	f001 fb04 	bl	8968 <__clzsi2>
    7360:	3020      	adds	r0, #32
    7362:	e71d      	b.n	71a0 <__aeabi_dadd+0xc4>
    7364:	430a      	orrs	r2, r1
    7366:	1e51      	subs	r1, r2, #1
    7368:	418a      	sbcs	r2, r1
    736a:	2100      	movs	r1, #0
    736c:	e707      	b.n	717e <__aeabi_dadd+0xa2>
    736e:	2b00      	cmp	r3, #0
    7370:	d000      	beq.n	7374 <__aeabi_dadd+0x298>
    7372:	e0f3      	b.n	755c <__aeabi_dadd+0x480>
    7374:	1c70      	adds	r0, r6, #1
    7376:	0543      	lsls	r3, r0, #21
    7378:	0d5b      	lsrs	r3, r3, #21
    737a:	2b01      	cmp	r3, #1
    737c:	dc00      	bgt.n	7380 <__aeabi_dadd+0x2a4>
    737e:	e0ad      	b.n	74dc <__aeabi_dadd+0x400>
    7380:	4b36      	ldr	r3, [pc, #216]	; (745c <__aeabi_dadd+0x380>)
    7382:	4298      	cmp	r0, r3
    7384:	d100      	bne.n	7388 <__aeabi_dadd+0x2ac>
    7386:	e0d1      	b.n	752c <__aeabi_dadd+0x450>
    7388:	18ba      	adds	r2, r7, r2
    738a:	42ba      	cmp	r2, r7
    738c:	41bf      	sbcs	r7, r7
    738e:	1864      	adds	r4, r4, r1
    7390:	427f      	negs	r7, r7
    7392:	19e4      	adds	r4, r4, r7
    7394:	07e7      	lsls	r7, r4, #31
    7396:	0852      	lsrs	r2, r2, #1
    7398:	4317      	orrs	r7, r2
    739a:	0864      	lsrs	r4, r4, #1
    739c:	0006      	movs	r6, r0
    739e:	e721      	b.n	71e4 <__aeabi_dadd+0x108>
    73a0:	482e      	ldr	r0, [pc, #184]	; (745c <__aeabi_dadd+0x380>)
    73a2:	4285      	cmp	r5, r0
    73a4:	d100      	bne.n	73a8 <__aeabi_dadd+0x2cc>
    73a6:	e093      	b.n	74d0 <__aeabi_dadd+0x3f4>
    73a8:	001d      	movs	r5, r3
    73aa:	e6d0      	b.n	714e <__aeabi_dadd+0x72>
    73ac:	0029      	movs	r1, r5
    73ae:	3e1f      	subs	r6, #31
    73b0:	40f1      	lsrs	r1, r6
    73b2:	2b20      	cmp	r3, #32
    73b4:	d100      	bne.n	73b8 <__aeabi_dadd+0x2dc>
    73b6:	e08d      	b.n	74d4 <__aeabi_dadd+0x3f8>
    73b8:	2240      	movs	r2, #64	; 0x40
    73ba:	1ad3      	subs	r3, r2, r3
    73bc:	409d      	lsls	r5, r3
    73be:	432f      	orrs	r7, r5
    73c0:	1e7d      	subs	r5, r7, #1
    73c2:	41af      	sbcs	r7, r5
    73c4:	2400      	movs	r4, #0
    73c6:	430f      	orrs	r7, r1
    73c8:	2600      	movs	r6, #0
    73ca:	e744      	b.n	7256 <__aeabi_dadd+0x17a>
    73cc:	002b      	movs	r3, r5
    73ce:	0008      	movs	r0, r1
    73d0:	3b20      	subs	r3, #32
    73d2:	40d8      	lsrs	r0, r3
    73d4:	0003      	movs	r3, r0
    73d6:	2d20      	cmp	r5, #32
    73d8:	d100      	bne.n	73dc <__aeabi_dadd+0x300>
    73da:	e07d      	b.n	74d8 <__aeabi_dadd+0x3fc>
    73dc:	2040      	movs	r0, #64	; 0x40
    73de:	1b45      	subs	r5, r0, r5
    73e0:	40a9      	lsls	r1, r5
    73e2:	430a      	orrs	r2, r1
    73e4:	1e51      	subs	r1, r2, #1
    73e6:	418a      	sbcs	r2, r1
    73e8:	2100      	movs	r1, #0
    73ea:	431a      	orrs	r2, r3
    73ec:	e6c7      	b.n	717e <__aeabi_dadd+0xa2>
    73ee:	2e00      	cmp	r6, #0
    73f0:	d050      	beq.n	7494 <__aeabi_dadd+0x3b8>
    73f2:	4e1a      	ldr	r6, [pc, #104]	; (745c <__aeabi_dadd+0x380>)
    73f4:	42b0      	cmp	r0, r6
    73f6:	d057      	beq.n	74a8 <__aeabi_dadd+0x3cc>
    73f8:	2680      	movs	r6, #128	; 0x80
    73fa:	426b      	negs	r3, r5
    73fc:	4699      	mov	r9, r3
    73fe:	0436      	lsls	r6, r6, #16
    7400:	4334      	orrs	r4, r6
    7402:	464b      	mov	r3, r9
    7404:	2b38      	cmp	r3, #56	; 0x38
    7406:	dd00      	ble.n	740a <__aeabi_dadd+0x32e>
    7408:	e0d6      	b.n	75b8 <__aeabi_dadd+0x4dc>
    740a:	2b1f      	cmp	r3, #31
    740c:	dd00      	ble.n	7410 <__aeabi_dadd+0x334>
    740e:	e135      	b.n	767c <__aeabi_dadd+0x5a0>
    7410:	2620      	movs	r6, #32
    7412:	1af5      	subs	r5, r6, r3
    7414:	0026      	movs	r6, r4
    7416:	40ae      	lsls	r6, r5
    7418:	46b2      	mov	sl, r6
    741a:	003e      	movs	r6, r7
    741c:	40de      	lsrs	r6, r3
    741e:	46ac      	mov	ip, r5
    7420:	0035      	movs	r5, r6
    7422:	4656      	mov	r6, sl
    7424:	432e      	orrs	r6, r5
    7426:	4665      	mov	r5, ip
    7428:	40af      	lsls	r7, r5
    742a:	1e7d      	subs	r5, r7, #1
    742c:	41af      	sbcs	r7, r5
    742e:	40dc      	lsrs	r4, r3
    7430:	4337      	orrs	r7, r6
    7432:	1bd7      	subs	r7, r2, r7
    7434:	42ba      	cmp	r2, r7
    7436:	4192      	sbcs	r2, r2
    7438:	1b0c      	subs	r4, r1, r4
    743a:	4252      	negs	r2, r2
    743c:	1aa4      	subs	r4, r4, r2
    743e:	0006      	movs	r6, r0
    7440:	46d8      	mov	r8, fp
    7442:	e6a3      	b.n	718c <__aeabi_dadd+0xb0>
    7444:	4664      	mov	r4, ip
    7446:	4667      	mov	r7, ip
    7448:	432c      	orrs	r4, r5
    744a:	d000      	beq.n	744e <__aeabi_dadd+0x372>
    744c:	e6a2      	b.n	7194 <__aeabi_dadd+0xb8>
    744e:	2500      	movs	r5, #0
    7450:	2600      	movs	r6, #0
    7452:	2700      	movs	r7, #0
    7454:	e706      	b.n	7264 <__aeabi_dadd+0x188>
    7456:	001e      	movs	r6, r3
    7458:	e6c4      	b.n	71e4 <__aeabi_dadd+0x108>
    745a:	46c0      	nop			; (mov r8, r8)
    745c:	000007ff 	.word	0x000007ff
    7460:	ff7fffff 	.word	0xff7fffff
    7464:	800fffff 	.word	0x800fffff
    7468:	2b1f      	cmp	r3, #31
    746a:	dc63      	bgt.n	7534 <__aeabi_dadd+0x458>
    746c:	2020      	movs	r0, #32
    746e:	1ac3      	subs	r3, r0, r3
    7470:	0008      	movs	r0, r1
    7472:	4098      	lsls	r0, r3
    7474:	469c      	mov	ip, r3
    7476:	4683      	mov	fp, r0
    7478:	4653      	mov	r3, sl
    747a:	0010      	movs	r0, r2
    747c:	40d8      	lsrs	r0, r3
    747e:	0003      	movs	r3, r0
    7480:	4658      	mov	r0, fp
    7482:	4318      	orrs	r0, r3
    7484:	4663      	mov	r3, ip
    7486:	409a      	lsls	r2, r3
    7488:	1e53      	subs	r3, r2, #1
    748a:	419a      	sbcs	r2, r3
    748c:	4653      	mov	r3, sl
    748e:	4302      	orrs	r2, r0
    7490:	40d9      	lsrs	r1, r3
    7492:	e703      	b.n	729c <__aeabi_dadd+0x1c0>
    7494:	0026      	movs	r6, r4
    7496:	433e      	orrs	r6, r7
    7498:	d006      	beq.n	74a8 <__aeabi_dadd+0x3cc>
    749a:	43eb      	mvns	r3, r5
    749c:	4699      	mov	r9, r3
    749e:	2b00      	cmp	r3, #0
    74a0:	d0c7      	beq.n	7432 <__aeabi_dadd+0x356>
    74a2:	4e94      	ldr	r6, [pc, #592]	; (76f4 <__aeabi_dadd+0x618>)
    74a4:	42b0      	cmp	r0, r6
    74a6:	d1ac      	bne.n	7402 <__aeabi_dadd+0x326>
    74a8:	000c      	movs	r4, r1
    74aa:	0017      	movs	r7, r2
    74ac:	0006      	movs	r6, r0
    74ae:	46d8      	mov	r8, fp
    74b0:	e698      	b.n	71e4 <__aeabi_dadd+0x108>
    74b2:	4b90      	ldr	r3, [pc, #576]	; (76f4 <__aeabi_dadd+0x618>)
    74b4:	459a      	cmp	sl, r3
    74b6:	d00b      	beq.n	74d0 <__aeabi_dadd+0x3f4>
    74b8:	4682      	mov	sl, r0
    74ba:	e6e7      	b.n	728c <__aeabi_dadd+0x1b0>
    74bc:	2800      	cmp	r0, #0
    74be:	d000      	beq.n	74c2 <__aeabi_dadd+0x3e6>
    74c0:	e09e      	b.n	7600 <__aeabi_dadd+0x524>
    74c2:	0018      	movs	r0, r3
    74c4:	4310      	orrs	r0, r2
    74c6:	d100      	bne.n	74ca <__aeabi_dadd+0x3ee>
    74c8:	e0e9      	b.n	769e <__aeabi_dadd+0x5c2>
    74ca:	001c      	movs	r4, r3
    74cc:	0017      	movs	r7, r2
    74ce:	46d8      	mov	r8, fp
    74d0:	4e88      	ldr	r6, [pc, #544]	; (76f4 <__aeabi_dadd+0x618>)
    74d2:	e687      	b.n	71e4 <__aeabi_dadd+0x108>
    74d4:	2500      	movs	r5, #0
    74d6:	e772      	b.n	73be <__aeabi_dadd+0x2e2>
    74d8:	2100      	movs	r1, #0
    74da:	e782      	b.n	73e2 <__aeabi_dadd+0x306>
    74dc:	0023      	movs	r3, r4
    74de:	433b      	orrs	r3, r7
    74e0:	2e00      	cmp	r6, #0
    74e2:	d000      	beq.n	74e6 <__aeabi_dadd+0x40a>
    74e4:	e0ab      	b.n	763e <__aeabi_dadd+0x562>
    74e6:	2b00      	cmp	r3, #0
    74e8:	d100      	bne.n	74ec <__aeabi_dadd+0x410>
    74ea:	e0e7      	b.n	76bc <__aeabi_dadd+0x5e0>
    74ec:	000b      	movs	r3, r1
    74ee:	4313      	orrs	r3, r2
    74f0:	d100      	bne.n	74f4 <__aeabi_dadd+0x418>
    74f2:	e677      	b.n	71e4 <__aeabi_dadd+0x108>
    74f4:	18ba      	adds	r2, r7, r2
    74f6:	42ba      	cmp	r2, r7
    74f8:	41bf      	sbcs	r7, r7
    74fa:	1864      	adds	r4, r4, r1
    74fc:	427f      	negs	r7, r7
    74fe:	19e4      	adds	r4, r4, r7
    7500:	0223      	lsls	r3, r4, #8
    7502:	d400      	bmi.n	7506 <__aeabi_dadd+0x42a>
    7504:	e0f2      	b.n	76ec <__aeabi_dadd+0x610>
    7506:	4b7c      	ldr	r3, [pc, #496]	; (76f8 <__aeabi_dadd+0x61c>)
    7508:	0017      	movs	r7, r2
    750a:	401c      	ands	r4, r3
    750c:	0006      	movs	r6, r0
    750e:	e669      	b.n	71e4 <__aeabi_dadd+0x108>
    7510:	0020      	movs	r0, r4
    7512:	4338      	orrs	r0, r7
    7514:	2e00      	cmp	r6, #0
    7516:	d1d1      	bne.n	74bc <__aeabi_dadd+0x3e0>
    7518:	2800      	cmp	r0, #0
    751a:	d15b      	bne.n	75d4 <__aeabi_dadd+0x4f8>
    751c:	001c      	movs	r4, r3
    751e:	4314      	orrs	r4, r2
    7520:	d100      	bne.n	7524 <__aeabi_dadd+0x448>
    7522:	e0a8      	b.n	7676 <__aeabi_dadd+0x59a>
    7524:	001c      	movs	r4, r3
    7526:	0017      	movs	r7, r2
    7528:	46d8      	mov	r8, fp
    752a:	e65b      	b.n	71e4 <__aeabi_dadd+0x108>
    752c:	0006      	movs	r6, r0
    752e:	2400      	movs	r4, #0
    7530:	2700      	movs	r7, #0
    7532:	e697      	b.n	7264 <__aeabi_dadd+0x188>
    7534:	4650      	mov	r0, sl
    7536:	000b      	movs	r3, r1
    7538:	3820      	subs	r0, #32
    753a:	40c3      	lsrs	r3, r0
    753c:	4699      	mov	r9, r3
    753e:	4653      	mov	r3, sl
    7540:	2b20      	cmp	r3, #32
    7542:	d100      	bne.n	7546 <__aeabi_dadd+0x46a>
    7544:	e095      	b.n	7672 <__aeabi_dadd+0x596>
    7546:	2340      	movs	r3, #64	; 0x40
    7548:	4650      	mov	r0, sl
    754a:	1a1b      	subs	r3, r3, r0
    754c:	4099      	lsls	r1, r3
    754e:	430a      	orrs	r2, r1
    7550:	1e51      	subs	r1, r2, #1
    7552:	418a      	sbcs	r2, r1
    7554:	464b      	mov	r3, r9
    7556:	2100      	movs	r1, #0
    7558:	431a      	orrs	r2, r3
    755a:	e69f      	b.n	729c <__aeabi_dadd+0x1c0>
    755c:	2e00      	cmp	r6, #0
    755e:	d130      	bne.n	75c2 <__aeabi_dadd+0x4e6>
    7560:	0026      	movs	r6, r4
    7562:	433e      	orrs	r6, r7
    7564:	d067      	beq.n	7636 <__aeabi_dadd+0x55a>
    7566:	43db      	mvns	r3, r3
    7568:	469a      	mov	sl, r3
    756a:	2b00      	cmp	r3, #0
    756c:	d01c      	beq.n	75a8 <__aeabi_dadd+0x4cc>
    756e:	4e61      	ldr	r6, [pc, #388]	; (76f4 <__aeabi_dadd+0x618>)
    7570:	42b0      	cmp	r0, r6
    7572:	d060      	beq.n	7636 <__aeabi_dadd+0x55a>
    7574:	4653      	mov	r3, sl
    7576:	2b38      	cmp	r3, #56	; 0x38
    7578:	dd00      	ble.n	757c <__aeabi_dadd+0x4a0>
    757a:	e096      	b.n	76aa <__aeabi_dadd+0x5ce>
    757c:	2b1f      	cmp	r3, #31
    757e:	dd00      	ble.n	7582 <__aeabi_dadd+0x4a6>
    7580:	e09f      	b.n	76c2 <__aeabi_dadd+0x5e6>
    7582:	2620      	movs	r6, #32
    7584:	1af3      	subs	r3, r6, r3
    7586:	0026      	movs	r6, r4
    7588:	409e      	lsls	r6, r3
    758a:	469c      	mov	ip, r3
    758c:	46b3      	mov	fp, r6
    758e:	4653      	mov	r3, sl
    7590:	003e      	movs	r6, r7
    7592:	40de      	lsrs	r6, r3
    7594:	0033      	movs	r3, r6
    7596:	465e      	mov	r6, fp
    7598:	431e      	orrs	r6, r3
    759a:	4663      	mov	r3, ip
    759c:	409f      	lsls	r7, r3
    759e:	1e7b      	subs	r3, r7, #1
    75a0:	419f      	sbcs	r7, r3
    75a2:	4653      	mov	r3, sl
    75a4:	40dc      	lsrs	r4, r3
    75a6:	4337      	orrs	r7, r6
    75a8:	18bf      	adds	r7, r7, r2
    75aa:	4297      	cmp	r7, r2
    75ac:	4192      	sbcs	r2, r2
    75ae:	1864      	adds	r4, r4, r1
    75b0:	4252      	negs	r2, r2
    75b2:	18a4      	adds	r4, r4, r2
    75b4:	0006      	movs	r6, r0
    75b6:	e678      	b.n	72aa <__aeabi_dadd+0x1ce>
    75b8:	4327      	orrs	r7, r4
    75ba:	1e7c      	subs	r4, r7, #1
    75bc:	41a7      	sbcs	r7, r4
    75be:	2400      	movs	r4, #0
    75c0:	e737      	b.n	7432 <__aeabi_dadd+0x356>
    75c2:	4e4c      	ldr	r6, [pc, #304]	; (76f4 <__aeabi_dadd+0x618>)
    75c4:	42b0      	cmp	r0, r6
    75c6:	d036      	beq.n	7636 <__aeabi_dadd+0x55a>
    75c8:	2680      	movs	r6, #128	; 0x80
    75ca:	425b      	negs	r3, r3
    75cc:	0436      	lsls	r6, r6, #16
    75ce:	469a      	mov	sl, r3
    75d0:	4334      	orrs	r4, r6
    75d2:	e7cf      	b.n	7574 <__aeabi_dadd+0x498>
    75d4:	0018      	movs	r0, r3
    75d6:	4310      	orrs	r0, r2
    75d8:	d100      	bne.n	75dc <__aeabi_dadd+0x500>
    75da:	e603      	b.n	71e4 <__aeabi_dadd+0x108>
    75dc:	1ab8      	subs	r0, r7, r2
    75de:	4684      	mov	ip, r0
    75e0:	4567      	cmp	r7, ip
    75e2:	41ad      	sbcs	r5, r5
    75e4:	1ae0      	subs	r0, r4, r3
    75e6:	426d      	negs	r5, r5
    75e8:	1b40      	subs	r0, r0, r5
    75ea:	0205      	lsls	r5, r0, #8
    75ec:	d400      	bmi.n	75f0 <__aeabi_dadd+0x514>
    75ee:	e62c      	b.n	724a <__aeabi_dadd+0x16e>
    75f0:	1bd7      	subs	r7, r2, r7
    75f2:	42ba      	cmp	r2, r7
    75f4:	4192      	sbcs	r2, r2
    75f6:	1b1c      	subs	r4, r3, r4
    75f8:	4252      	negs	r2, r2
    75fa:	1aa4      	subs	r4, r4, r2
    75fc:	46d8      	mov	r8, fp
    75fe:	e5f1      	b.n	71e4 <__aeabi_dadd+0x108>
    7600:	0018      	movs	r0, r3
    7602:	4310      	orrs	r0, r2
    7604:	d100      	bne.n	7608 <__aeabi_dadd+0x52c>
    7606:	e763      	b.n	74d0 <__aeabi_dadd+0x3f4>
    7608:	08f8      	lsrs	r0, r7, #3
    760a:	0767      	lsls	r7, r4, #29
    760c:	4307      	orrs	r7, r0
    760e:	2080      	movs	r0, #128	; 0x80
    7610:	08e4      	lsrs	r4, r4, #3
    7612:	0300      	lsls	r0, r0, #12
    7614:	4204      	tst	r4, r0
    7616:	d008      	beq.n	762a <__aeabi_dadd+0x54e>
    7618:	08dd      	lsrs	r5, r3, #3
    761a:	4205      	tst	r5, r0
    761c:	d105      	bne.n	762a <__aeabi_dadd+0x54e>
    761e:	08d2      	lsrs	r2, r2, #3
    7620:	0759      	lsls	r1, r3, #29
    7622:	4311      	orrs	r1, r2
    7624:	000f      	movs	r7, r1
    7626:	002c      	movs	r4, r5
    7628:	46d8      	mov	r8, fp
    762a:	0f7b      	lsrs	r3, r7, #29
    762c:	00e4      	lsls	r4, r4, #3
    762e:	431c      	orrs	r4, r3
    7630:	00ff      	lsls	r7, r7, #3
    7632:	4e30      	ldr	r6, [pc, #192]	; (76f4 <__aeabi_dadd+0x618>)
    7634:	e5d6      	b.n	71e4 <__aeabi_dadd+0x108>
    7636:	000c      	movs	r4, r1
    7638:	0017      	movs	r7, r2
    763a:	0006      	movs	r6, r0
    763c:	e5d2      	b.n	71e4 <__aeabi_dadd+0x108>
    763e:	2b00      	cmp	r3, #0
    7640:	d038      	beq.n	76b4 <__aeabi_dadd+0x5d8>
    7642:	000b      	movs	r3, r1
    7644:	4313      	orrs	r3, r2
    7646:	d100      	bne.n	764a <__aeabi_dadd+0x56e>
    7648:	e742      	b.n	74d0 <__aeabi_dadd+0x3f4>
    764a:	08f8      	lsrs	r0, r7, #3
    764c:	0767      	lsls	r7, r4, #29
    764e:	4307      	orrs	r7, r0
    7650:	2080      	movs	r0, #128	; 0x80
    7652:	08e4      	lsrs	r4, r4, #3
    7654:	0300      	lsls	r0, r0, #12
    7656:	4204      	tst	r4, r0
    7658:	d0e7      	beq.n	762a <__aeabi_dadd+0x54e>
    765a:	08cb      	lsrs	r3, r1, #3
    765c:	4203      	tst	r3, r0
    765e:	d1e4      	bne.n	762a <__aeabi_dadd+0x54e>
    7660:	08d2      	lsrs	r2, r2, #3
    7662:	0749      	lsls	r1, r1, #29
    7664:	4311      	orrs	r1, r2
    7666:	000f      	movs	r7, r1
    7668:	001c      	movs	r4, r3
    766a:	e7de      	b.n	762a <__aeabi_dadd+0x54e>
    766c:	2700      	movs	r7, #0
    766e:	2400      	movs	r4, #0
    7670:	e5d5      	b.n	721e <__aeabi_dadd+0x142>
    7672:	2100      	movs	r1, #0
    7674:	e76b      	b.n	754e <__aeabi_dadd+0x472>
    7676:	2500      	movs	r5, #0
    7678:	2700      	movs	r7, #0
    767a:	e5f3      	b.n	7264 <__aeabi_dadd+0x188>
    767c:	464e      	mov	r6, r9
    767e:	0025      	movs	r5, r4
    7680:	3e20      	subs	r6, #32
    7682:	40f5      	lsrs	r5, r6
    7684:	464b      	mov	r3, r9
    7686:	002e      	movs	r6, r5
    7688:	2b20      	cmp	r3, #32
    768a:	d02d      	beq.n	76e8 <__aeabi_dadd+0x60c>
    768c:	2540      	movs	r5, #64	; 0x40
    768e:	1aed      	subs	r5, r5, r3
    7690:	40ac      	lsls	r4, r5
    7692:	4327      	orrs	r7, r4
    7694:	1e7c      	subs	r4, r7, #1
    7696:	41a7      	sbcs	r7, r4
    7698:	2400      	movs	r4, #0
    769a:	4337      	orrs	r7, r6
    769c:	e6c9      	b.n	7432 <__aeabi_dadd+0x356>
    769e:	2480      	movs	r4, #128	; 0x80
    76a0:	2500      	movs	r5, #0
    76a2:	0324      	lsls	r4, r4, #12
    76a4:	4e13      	ldr	r6, [pc, #76]	; (76f4 <__aeabi_dadd+0x618>)
    76a6:	2700      	movs	r7, #0
    76a8:	e5dc      	b.n	7264 <__aeabi_dadd+0x188>
    76aa:	4327      	orrs	r7, r4
    76ac:	1e7c      	subs	r4, r7, #1
    76ae:	41a7      	sbcs	r7, r4
    76b0:	2400      	movs	r4, #0
    76b2:	e779      	b.n	75a8 <__aeabi_dadd+0x4cc>
    76b4:	000c      	movs	r4, r1
    76b6:	0017      	movs	r7, r2
    76b8:	4e0e      	ldr	r6, [pc, #56]	; (76f4 <__aeabi_dadd+0x618>)
    76ba:	e593      	b.n	71e4 <__aeabi_dadd+0x108>
    76bc:	000c      	movs	r4, r1
    76be:	0017      	movs	r7, r2
    76c0:	e590      	b.n	71e4 <__aeabi_dadd+0x108>
    76c2:	4656      	mov	r6, sl
    76c4:	0023      	movs	r3, r4
    76c6:	3e20      	subs	r6, #32
    76c8:	40f3      	lsrs	r3, r6
    76ca:	4699      	mov	r9, r3
    76cc:	4653      	mov	r3, sl
    76ce:	2b20      	cmp	r3, #32
    76d0:	d00e      	beq.n	76f0 <__aeabi_dadd+0x614>
    76d2:	2340      	movs	r3, #64	; 0x40
    76d4:	4656      	mov	r6, sl
    76d6:	1b9b      	subs	r3, r3, r6
    76d8:	409c      	lsls	r4, r3
    76da:	4327      	orrs	r7, r4
    76dc:	1e7c      	subs	r4, r7, #1
    76de:	41a7      	sbcs	r7, r4
    76e0:	464b      	mov	r3, r9
    76e2:	2400      	movs	r4, #0
    76e4:	431f      	orrs	r7, r3
    76e6:	e75f      	b.n	75a8 <__aeabi_dadd+0x4cc>
    76e8:	2400      	movs	r4, #0
    76ea:	e7d2      	b.n	7692 <__aeabi_dadd+0x5b6>
    76ec:	0017      	movs	r7, r2
    76ee:	e5b2      	b.n	7256 <__aeabi_dadd+0x17a>
    76f0:	2400      	movs	r4, #0
    76f2:	e7f2      	b.n	76da <__aeabi_dadd+0x5fe>
    76f4:	000007ff 	.word	0x000007ff
    76f8:	ff7fffff 	.word	0xff7fffff

000076fc <__aeabi_ddiv>:
    76fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    76fe:	4657      	mov	r7, sl
    7700:	4645      	mov	r5, r8
    7702:	46de      	mov	lr, fp
    7704:	464e      	mov	r6, r9
    7706:	b5e0      	push	{r5, r6, r7, lr}
    7708:	004c      	lsls	r4, r1, #1
    770a:	030e      	lsls	r6, r1, #12
    770c:	b087      	sub	sp, #28
    770e:	4683      	mov	fp, r0
    7710:	4692      	mov	sl, r2
    7712:	001d      	movs	r5, r3
    7714:	4680      	mov	r8, r0
    7716:	0b36      	lsrs	r6, r6, #12
    7718:	0d64      	lsrs	r4, r4, #21
    771a:	0fcf      	lsrs	r7, r1, #31
    771c:	2c00      	cmp	r4, #0
    771e:	d04f      	beq.n	77c0 <__aeabi_ddiv+0xc4>
    7720:	4b6f      	ldr	r3, [pc, #444]	; (78e0 <__aeabi_ddiv+0x1e4>)
    7722:	429c      	cmp	r4, r3
    7724:	d035      	beq.n	7792 <__aeabi_ddiv+0x96>
    7726:	2380      	movs	r3, #128	; 0x80
    7728:	0f42      	lsrs	r2, r0, #29
    772a:	041b      	lsls	r3, r3, #16
    772c:	00f6      	lsls	r6, r6, #3
    772e:	4313      	orrs	r3, r2
    7730:	4333      	orrs	r3, r6
    7732:	4699      	mov	r9, r3
    7734:	00c3      	lsls	r3, r0, #3
    7736:	4698      	mov	r8, r3
    7738:	4b6a      	ldr	r3, [pc, #424]	; (78e4 <__aeabi_ddiv+0x1e8>)
    773a:	2600      	movs	r6, #0
    773c:	469c      	mov	ip, r3
    773e:	2300      	movs	r3, #0
    7740:	4464      	add	r4, ip
    7742:	9303      	str	r3, [sp, #12]
    7744:	032b      	lsls	r3, r5, #12
    7746:	0b1b      	lsrs	r3, r3, #12
    7748:	469b      	mov	fp, r3
    774a:	006b      	lsls	r3, r5, #1
    774c:	0fed      	lsrs	r5, r5, #31
    774e:	4650      	mov	r0, sl
    7750:	0d5b      	lsrs	r3, r3, #21
    7752:	9501      	str	r5, [sp, #4]
    7754:	d05e      	beq.n	7814 <__aeabi_ddiv+0x118>
    7756:	4a62      	ldr	r2, [pc, #392]	; (78e0 <__aeabi_ddiv+0x1e4>)
    7758:	4293      	cmp	r3, r2
    775a:	d053      	beq.n	7804 <__aeabi_ddiv+0x108>
    775c:	465a      	mov	r2, fp
    775e:	00d1      	lsls	r1, r2, #3
    7760:	2280      	movs	r2, #128	; 0x80
    7762:	0f40      	lsrs	r0, r0, #29
    7764:	0412      	lsls	r2, r2, #16
    7766:	4302      	orrs	r2, r0
    7768:	430a      	orrs	r2, r1
    776a:	4693      	mov	fp, r2
    776c:	4652      	mov	r2, sl
    776e:	00d1      	lsls	r1, r2, #3
    7770:	4a5c      	ldr	r2, [pc, #368]	; (78e4 <__aeabi_ddiv+0x1e8>)
    7772:	4694      	mov	ip, r2
    7774:	2200      	movs	r2, #0
    7776:	4463      	add	r3, ip
    7778:	0038      	movs	r0, r7
    777a:	4068      	eors	r0, r5
    777c:	4684      	mov	ip, r0
    777e:	9002      	str	r0, [sp, #8]
    7780:	1ae4      	subs	r4, r4, r3
    7782:	4316      	orrs	r6, r2
    7784:	2e0f      	cmp	r6, #15
    7786:	d900      	bls.n	778a <__aeabi_ddiv+0x8e>
    7788:	e0b4      	b.n	78f4 <__aeabi_ddiv+0x1f8>
    778a:	4b57      	ldr	r3, [pc, #348]	; (78e8 <__aeabi_ddiv+0x1ec>)
    778c:	00b6      	lsls	r6, r6, #2
    778e:	599b      	ldr	r3, [r3, r6]
    7790:	469f      	mov	pc, r3
    7792:	0003      	movs	r3, r0
    7794:	4333      	orrs	r3, r6
    7796:	4699      	mov	r9, r3
    7798:	d16c      	bne.n	7874 <__aeabi_ddiv+0x178>
    779a:	2300      	movs	r3, #0
    779c:	4698      	mov	r8, r3
    779e:	3302      	adds	r3, #2
    77a0:	2608      	movs	r6, #8
    77a2:	9303      	str	r3, [sp, #12]
    77a4:	e7ce      	b.n	7744 <__aeabi_ddiv+0x48>
    77a6:	46cb      	mov	fp, r9
    77a8:	4641      	mov	r1, r8
    77aa:	9a03      	ldr	r2, [sp, #12]
    77ac:	9701      	str	r7, [sp, #4]
    77ae:	2a02      	cmp	r2, #2
    77b0:	d165      	bne.n	787e <__aeabi_ddiv+0x182>
    77b2:	9b01      	ldr	r3, [sp, #4]
    77b4:	4c4a      	ldr	r4, [pc, #296]	; (78e0 <__aeabi_ddiv+0x1e4>)
    77b6:	469c      	mov	ip, r3
    77b8:	2300      	movs	r3, #0
    77ba:	2200      	movs	r2, #0
    77bc:	4698      	mov	r8, r3
    77be:	e06b      	b.n	7898 <__aeabi_ddiv+0x19c>
    77c0:	0003      	movs	r3, r0
    77c2:	4333      	orrs	r3, r6
    77c4:	4699      	mov	r9, r3
    77c6:	d04e      	beq.n	7866 <__aeabi_ddiv+0x16a>
    77c8:	2e00      	cmp	r6, #0
    77ca:	d100      	bne.n	77ce <__aeabi_ddiv+0xd2>
    77cc:	e1bc      	b.n	7b48 <__aeabi_ddiv+0x44c>
    77ce:	0030      	movs	r0, r6
    77d0:	f001 f8ca 	bl	8968 <__clzsi2>
    77d4:	0003      	movs	r3, r0
    77d6:	3b0b      	subs	r3, #11
    77d8:	2b1c      	cmp	r3, #28
    77da:	dd00      	ble.n	77de <__aeabi_ddiv+0xe2>
    77dc:	e1ac      	b.n	7b38 <__aeabi_ddiv+0x43c>
    77de:	221d      	movs	r2, #29
    77e0:	1ad3      	subs	r3, r2, r3
    77e2:	465a      	mov	r2, fp
    77e4:	0001      	movs	r1, r0
    77e6:	40da      	lsrs	r2, r3
    77e8:	3908      	subs	r1, #8
    77ea:	408e      	lsls	r6, r1
    77ec:	0013      	movs	r3, r2
    77ee:	4333      	orrs	r3, r6
    77f0:	4699      	mov	r9, r3
    77f2:	465b      	mov	r3, fp
    77f4:	408b      	lsls	r3, r1
    77f6:	4698      	mov	r8, r3
    77f8:	2300      	movs	r3, #0
    77fa:	4c3c      	ldr	r4, [pc, #240]	; (78ec <__aeabi_ddiv+0x1f0>)
    77fc:	2600      	movs	r6, #0
    77fe:	1a24      	subs	r4, r4, r0
    7800:	9303      	str	r3, [sp, #12]
    7802:	e79f      	b.n	7744 <__aeabi_ddiv+0x48>
    7804:	4651      	mov	r1, sl
    7806:	465a      	mov	r2, fp
    7808:	4311      	orrs	r1, r2
    780a:	d129      	bne.n	7860 <__aeabi_ddiv+0x164>
    780c:	2200      	movs	r2, #0
    780e:	4693      	mov	fp, r2
    7810:	3202      	adds	r2, #2
    7812:	e7b1      	b.n	7778 <__aeabi_ddiv+0x7c>
    7814:	4659      	mov	r1, fp
    7816:	4301      	orrs	r1, r0
    7818:	d01e      	beq.n	7858 <__aeabi_ddiv+0x15c>
    781a:	465b      	mov	r3, fp
    781c:	2b00      	cmp	r3, #0
    781e:	d100      	bne.n	7822 <__aeabi_ddiv+0x126>
    7820:	e19e      	b.n	7b60 <__aeabi_ddiv+0x464>
    7822:	4658      	mov	r0, fp
    7824:	f001 f8a0 	bl	8968 <__clzsi2>
    7828:	0003      	movs	r3, r0
    782a:	3b0b      	subs	r3, #11
    782c:	2b1c      	cmp	r3, #28
    782e:	dd00      	ble.n	7832 <__aeabi_ddiv+0x136>
    7830:	e18f      	b.n	7b52 <__aeabi_ddiv+0x456>
    7832:	0002      	movs	r2, r0
    7834:	4659      	mov	r1, fp
    7836:	3a08      	subs	r2, #8
    7838:	4091      	lsls	r1, r2
    783a:	468b      	mov	fp, r1
    783c:	211d      	movs	r1, #29
    783e:	1acb      	subs	r3, r1, r3
    7840:	4651      	mov	r1, sl
    7842:	40d9      	lsrs	r1, r3
    7844:	000b      	movs	r3, r1
    7846:	4659      	mov	r1, fp
    7848:	430b      	orrs	r3, r1
    784a:	4651      	mov	r1, sl
    784c:	469b      	mov	fp, r3
    784e:	4091      	lsls	r1, r2
    7850:	4b26      	ldr	r3, [pc, #152]	; (78ec <__aeabi_ddiv+0x1f0>)
    7852:	2200      	movs	r2, #0
    7854:	1a1b      	subs	r3, r3, r0
    7856:	e78f      	b.n	7778 <__aeabi_ddiv+0x7c>
    7858:	2300      	movs	r3, #0
    785a:	2201      	movs	r2, #1
    785c:	469b      	mov	fp, r3
    785e:	e78b      	b.n	7778 <__aeabi_ddiv+0x7c>
    7860:	4651      	mov	r1, sl
    7862:	2203      	movs	r2, #3
    7864:	e788      	b.n	7778 <__aeabi_ddiv+0x7c>
    7866:	2300      	movs	r3, #0
    7868:	4698      	mov	r8, r3
    786a:	3301      	adds	r3, #1
    786c:	2604      	movs	r6, #4
    786e:	2400      	movs	r4, #0
    7870:	9303      	str	r3, [sp, #12]
    7872:	e767      	b.n	7744 <__aeabi_ddiv+0x48>
    7874:	2303      	movs	r3, #3
    7876:	46b1      	mov	r9, r6
    7878:	9303      	str	r3, [sp, #12]
    787a:	260c      	movs	r6, #12
    787c:	e762      	b.n	7744 <__aeabi_ddiv+0x48>
    787e:	2a03      	cmp	r2, #3
    7880:	d100      	bne.n	7884 <__aeabi_ddiv+0x188>
    7882:	e25c      	b.n	7d3e <__aeabi_ddiv+0x642>
    7884:	9b01      	ldr	r3, [sp, #4]
    7886:	2a01      	cmp	r2, #1
    7888:	d000      	beq.n	788c <__aeabi_ddiv+0x190>
    788a:	e1e4      	b.n	7c56 <__aeabi_ddiv+0x55a>
    788c:	4013      	ands	r3, r2
    788e:	469c      	mov	ip, r3
    7890:	2300      	movs	r3, #0
    7892:	2400      	movs	r4, #0
    7894:	2200      	movs	r2, #0
    7896:	4698      	mov	r8, r3
    7898:	2100      	movs	r1, #0
    789a:	0312      	lsls	r2, r2, #12
    789c:	0b13      	lsrs	r3, r2, #12
    789e:	0d0a      	lsrs	r2, r1, #20
    78a0:	0512      	lsls	r2, r2, #20
    78a2:	431a      	orrs	r2, r3
    78a4:	0523      	lsls	r3, r4, #20
    78a6:	4c12      	ldr	r4, [pc, #72]	; (78f0 <__aeabi_ddiv+0x1f4>)
    78a8:	4640      	mov	r0, r8
    78aa:	4022      	ands	r2, r4
    78ac:	4313      	orrs	r3, r2
    78ae:	4662      	mov	r2, ip
    78b0:	005b      	lsls	r3, r3, #1
    78b2:	07d2      	lsls	r2, r2, #31
    78b4:	085b      	lsrs	r3, r3, #1
    78b6:	4313      	orrs	r3, r2
    78b8:	0019      	movs	r1, r3
    78ba:	b007      	add	sp, #28
    78bc:	bc3c      	pop	{r2, r3, r4, r5}
    78be:	4690      	mov	r8, r2
    78c0:	4699      	mov	r9, r3
    78c2:	46a2      	mov	sl, r4
    78c4:	46ab      	mov	fp, r5
    78c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78c8:	2300      	movs	r3, #0
    78ca:	2280      	movs	r2, #128	; 0x80
    78cc:	469c      	mov	ip, r3
    78ce:	0312      	lsls	r2, r2, #12
    78d0:	4698      	mov	r8, r3
    78d2:	4c03      	ldr	r4, [pc, #12]	; (78e0 <__aeabi_ddiv+0x1e4>)
    78d4:	e7e0      	b.n	7898 <__aeabi_ddiv+0x19c>
    78d6:	2300      	movs	r3, #0
    78d8:	4c01      	ldr	r4, [pc, #4]	; (78e0 <__aeabi_ddiv+0x1e4>)
    78da:	2200      	movs	r2, #0
    78dc:	4698      	mov	r8, r3
    78de:	e7db      	b.n	7898 <__aeabi_ddiv+0x19c>
    78e0:	000007ff 	.word	0x000007ff
    78e4:	fffffc01 	.word	0xfffffc01
    78e8:	0000a770 	.word	0x0000a770
    78ec:	fffffc0d 	.word	0xfffffc0d
    78f0:	800fffff 	.word	0x800fffff
    78f4:	45d9      	cmp	r9, fp
    78f6:	d900      	bls.n	78fa <__aeabi_ddiv+0x1fe>
    78f8:	e139      	b.n	7b6e <__aeabi_ddiv+0x472>
    78fa:	d100      	bne.n	78fe <__aeabi_ddiv+0x202>
    78fc:	e134      	b.n	7b68 <__aeabi_ddiv+0x46c>
    78fe:	2300      	movs	r3, #0
    7900:	4646      	mov	r6, r8
    7902:	464d      	mov	r5, r9
    7904:	469a      	mov	sl, r3
    7906:	3c01      	subs	r4, #1
    7908:	465b      	mov	r3, fp
    790a:	0e0a      	lsrs	r2, r1, #24
    790c:	021b      	lsls	r3, r3, #8
    790e:	431a      	orrs	r2, r3
    7910:	020b      	lsls	r3, r1, #8
    7912:	0c17      	lsrs	r7, r2, #16
    7914:	9303      	str	r3, [sp, #12]
    7916:	0413      	lsls	r3, r2, #16
    7918:	0c1b      	lsrs	r3, r3, #16
    791a:	0039      	movs	r1, r7
    791c:	0028      	movs	r0, r5
    791e:	4690      	mov	r8, r2
    7920:	9301      	str	r3, [sp, #4]
    7922:	f7ff f995 	bl	6c50 <__udivsi3>
    7926:	0002      	movs	r2, r0
    7928:	9b01      	ldr	r3, [sp, #4]
    792a:	4683      	mov	fp, r0
    792c:	435a      	muls	r2, r3
    792e:	0028      	movs	r0, r5
    7930:	0039      	movs	r1, r7
    7932:	4691      	mov	r9, r2
    7934:	f7ff fa12 	bl	6d5c <__aeabi_uidivmod>
    7938:	0c35      	lsrs	r5, r6, #16
    793a:	0409      	lsls	r1, r1, #16
    793c:	430d      	orrs	r5, r1
    793e:	45a9      	cmp	r9, r5
    7940:	d90d      	bls.n	795e <__aeabi_ddiv+0x262>
    7942:	465b      	mov	r3, fp
    7944:	4445      	add	r5, r8
    7946:	3b01      	subs	r3, #1
    7948:	45a8      	cmp	r8, r5
    794a:	d900      	bls.n	794e <__aeabi_ddiv+0x252>
    794c:	e13a      	b.n	7bc4 <__aeabi_ddiv+0x4c8>
    794e:	45a9      	cmp	r9, r5
    7950:	d800      	bhi.n	7954 <__aeabi_ddiv+0x258>
    7952:	e137      	b.n	7bc4 <__aeabi_ddiv+0x4c8>
    7954:	2302      	movs	r3, #2
    7956:	425b      	negs	r3, r3
    7958:	469c      	mov	ip, r3
    795a:	4445      	add	r5, r8
    795c:	44e3      	add	fp, ip
    795e:	464b      	mov	r3, r9
    7960:	1aeb      	subs	r3, r5, r3
    7962:	0039      	movs	r1, r7
    7964:	0018      	movs	r0, r3
    7966:	9304      	str	r3, [sp, #16]
    7968:	f7ff f972 	bl	6c50 <__udivsi3>
    796c:	9b01      	ldr	r3, [sp, #4]
    796e:	0005      	movs	r5, r0
    7970:	4343      	muls	r3, r0
    7972:	0039      	movs	r1, r7
    7974:	9804      	ldr	r0, [sp, #16]
    7976:	4699      	mov	r9, r3
    7978:	f7ff f9f0 	bl	6d5c <__aeabi_uidivmod>
    797c:	0433      	lsls	r3, r6, #16
    797e:	0409      	lsls	r1, r1, #16
    7980:	0c1b      	lsrs	r3, r3, #16
    7982:	430b      	orrs	r3, r1
    7984:	4599      	cmp	r9, r3
    7986:	d909      	bls.n	799c <__aeabi_ddiv+0x2a0>
    7988:	4443      	add	r3, r8
    798a:	1e6a      	subs	r2, r5, #1
    798c:	4598      	cmp	r8, r3
    798e:	d900      	bls.n	7992 <__aeabi_ddiv+0x296>
    7990:	e11a      	b.n	7bc8 <__aeabi_ddiv+0x4cc>
    7992:	4599      	cmp	r9, r3
    7994:	d800      	bhi.n	7998 <__aeabi_ddiv+0x29c>
    7996:	e117      	b.n	7bc8 <__aeabi_ddiv+0x4cc>
    7998:	3d02      	subs	r5, #2
    799a:	4443      	add	r3, r8
    799c:	464a      	mov	r2, r9
    799e:	1a9b      	subs	r3, r3, r2
    79a0:	465a      	mov	r2, fp
    79a2:	0412      	lsls	r2, r2, #16
    79a4:	432a      	orrs	r2, r5
    79a6:	9903      	ldr	r1, [sp, #12]
    79a8:	4693      	mov	fp, r2
    79aa:	0c10      	lsrs	r0, r2, #16
    79ac:	0c0a      	lsrs	r2, r1, #16
    79ae:	4691      	mov	r9, r2
    79b0:	0409      	lsls	r1, r1, #16
    79b2:	465a      	mov	r2, fp
    79b4:	0c09      	lsrs	r1, r1, #16
    79b6:	464e      	mov	r6, r9
    79b8:	000d      	movs	r5, r1
    79ba:	0412      	lsls	r2, r2, #16
    79bc:	0c12      	lsrs	r2, r2, #16
    79be:	4345      	muls	r5, r0
    79c0:	9105      	str	r1, [sp, #20]
    79c2:	4351      	muls	r1, r2
    79c4:	4372      	muls	r2, r6
    79c6:	4370      	muls	r0, r6
    79c8:	1952      	adds	r2, r2, r5
    79ca:	0c0e      	lsrs	r6, r1, #16
    79cc:	18b2      	adds	r2, r6, r2
    79ce:	4295      	cmp	r5, r2
    79d0:	d903      	bls.n	79da <__aeabi_ddiv+0x2de>
    79d2:	2580      	movs	r5, #128	; 0x80
    79d4:	026d      	lsls	r5, r5, #9
    79d6:	46ac      	mov	ip, r5
    79d8:	4460      	add	r0, ip
    79da:	0c15      	lsrs	r5, r2, #16
    79dc:	0409      	lsls	r1, r1, #16
    79de:	0412      	lsls	r2, r2, #16
    79e0:	0c09      	lsrs	r1, r1, #16
    79e2:	1828      	adds	r0, r5, r0
    79e4:	1852      	adds	r2, r2, r1
    79e6:	4283      	cmp	r3, r0
    79e8:	d200      	bcs.n	79ec <__aeabi_ddiv+0x2f0>
    79ea:	e0ce      	b.n	7b8a <__aeabi_ddiv+0x48e>
    79ec:	d100      	bne.n	79f0 <__aeabi_ddiv+0x2f4>
    79ee:	e0c8      	b.n	7b82 <__aeabi_ddiv+0x486>
    79f0:	1a1d      	subs	r5, r3, r0
    79f2:	4653      	mov	r3, sl
    79f4:	1a9e      	subs	r6, r3, r2
    79f6:	45b2      	cmp	sl, r6
    79f8:	4192      	sbcs	r2, r2
    79fa:	4252      	negs	r2, r2
    79fc:	1aab      	subs	r3, r5, r2
    79fe:	469a      	mov	sl, r3
    7a00:	4598      	cmp	r8, r3
    7a02:	d100      	bne.n	7a06 <__aeabi_ddiv+0x30a>
    7a04:	e117      	b.n	7c36 <__aeabi_ddiv+0x53a>
    7a06:	0039      	movs	r1, r7
    7a08:	0018      	movs	r0, r3
    7a0a:	f7ff f921 	bl	6c50 <__udivsi3>
    7a0e:	9b01      	ldr	r3, [sp, #4]
    7a10:	0005      	movs	r5, r0
    7a12:	4343      	muls	r3, r0
    7a14:	0039      	movs	r1, r7
    7a16:	4650      	mov	r0, sl
    7a18:	9304      	str	r3, [sp, #16]
    7a1a:	f7ff f99f 	bl	6d5c <__aeabi_uidivmod>
    7a1e:	9804      	ldr	r0, [sp, #16]
    7a20:	040b      	lsls	r3, r1, #16
    7a22:	0c31      	lsrs	r1, r6, #16
    7a24:	4319      	orrs	r1, r3
    7a26:	4288      	cmp	r0, r1
    7a28:	d909      	bls.n	7a3e <__aeabi_ddiv+0x342>
    7a2a:	4441      	add	r1, r8
    7a2c:	1e6b      	subs	r3, r5, #1
    7a2e:	4588      	cmp	r8, r1
    7a30:	d900      	bls.n	7a34 <__aeabi_ddiv+0x338>
    7a32:	e107      	b.n	7c44 <__aeabi_ddiv+0x548>
    7a34:	4288      	cmp	r0, r1
    7a36:	d800      	bhi.n	7a3a <__aeabi_ddiv+0x33e>
    7a38:	e104      	b.n	7c44 <__aeabi_ddiv+0x548>
    7a3a:	3d02      	subs	r5, #2
    7a3c:	4441      	add	r1, r8
    7a3e:	9b04      	ldr	r3, [sp, #16]
    7a40:	1acb      	subs	r3, r1, r3
    7a42:	0018      	movs	r0, r3
    7a44:	0039      	movs	r1, r7
    7a46:	9304      	str	r3, [sp, #16]
    7a48:	f7ff f902 	bl	6c50 <__udivsi3>
    7a4c:	9b01      	ldr	r3, [sp, #4]
    7a4e:	4682      	mov	sl, r0
    7a50:	4343      	muls	r3, r0
    7a52:	0039      	movs	r1, r7
    7a54:	9804      	ldr	r0, [sp, #16]
    7a56:	9301      	str	r3, [sp, #4]
    7a58:	f7ff f980 	bl	6d5c <__aeabi_uidivmod>
    7a5c:	9801      	ldr	r0, [sp, #4]
    7a5e:	040b      	lsls	r3, r1, #16
    7a60:	0431      	lsls	r1, r6, #16
    7a62:	0c09      	lsrs	r1, r1, #16
    7a64:	4319      	orrs	r1, r3
    7a66:	4288      	cmp	r0, r1
    7a68:	d90d      	bls.n	7a86 <__aeabi_ddiv+0x38a>
    7a6a:	4653      	mov	r3, sl
    7a6c:	4441      	add	r1, r8
    7a6e:	3b01      	subs	r3, #1
    7a70:	4588      	cmp	r8, r1
    7a72:	d900      	bls.n	7a76 <__aeabi_ddiv+0x37a>
    7a74:	e0e8      	b.n	7c48 <__aeabi_ddiv+0x54c>
    7a76:	4288      	cmp	r0, r1
    7a78:	d800      	bhi.n	7a7c <__aeabi_ddiv+0x380>
    7a7a:	e0e5      	b.n	7c48 <__aeabi_ddiv+0x54c>
    7a7c:	2302      	movs	r3, #2
    7a7e:	425b      	negs	r3, r3
    7a80:	469c      	mov	ip, r3
    7a82:	4441      	add	r1, r8
    7a84:	44e2      	add	sl, ip
    7a86:	9b01      	ldr	r3, [sp, #4]
    7a88:	042d      	lsls	r5, r5, #16
    7a8a:	1ace      	subs	r6, r1, r3
    7a8c:	4651      	mov	r1, sl
    7a8e:	4329      	orrs	r1, r5
    7a90:	9d05      	ldr	r5, [sp, #20]
    7a92:	464f      	mov	r7, r9
    7a94:	002a      	movs	r2, r5
    7a96:	040b      	lsls	r3, r1, #16
    7a98:	0c08      	lsrs	r0, r1, #16
    7a9a:	0c1b      	lsrs	r3, r3, #16
    7a9c:	435a      	muls	r2, r3
    7a9e:	4345      	muls	r5, r0
    7aa0:	437b      	muls	r3, r7
    7aa2:	4378      	muls	r0, r7
    7aa4:	195b      	adds	r3, r3, r5
    7aa6:	0c17      	lsrs	r7, r2, #16
    7aa8:	18fb      	adds	r3, r7, r3
    7aaa:	429d      	cmp	r5, r3
    7aac:	d903      	bls.n	7ab6 <__aeabi_ddiv+0x3ba>
    7aae:	2580      	movs	r5, #128	; 0x80
    7ab0:	026d      	lsls	r5, r5, #9
    7ab2:	46ac      	mov	ip, r5
    7ab4:	4460      	add	r0, ip
    7ab6:	0c1d      	lsrs	r5, r3, #16
    7ab8:	0412      	lsls	r2, r2, #16
    7aba:	041b      	lsls	r3, r3, #16
    7abc:	0c12      	lsrs	r2, r2, #16
    7abe:	1828      	adds	r0, r5, r0
    7ac0:	189b      	adds	r3, r3, r2
    7ac2:	4286      	cmp	r6, r0
    7ac4:	d200      	bcs.n	7ac8 <__aeabi_ddiv+0x3cc>
    7ac6:	e093      	b.n	7bf0 <__aeabi_ddiv+0x4f4>
    7ac8:	d100      	bne.n	7acc <__aeabi_ddiv+0x3d0>
    7aca:	e08e      	b.n	7bea <__aeabi_ddiv+0x4ee>
    7acc:	2301      	movs	r3, #1
    7ace:	4319      	orrs	r1, r3
    7ad0:	4ba0      	ldr	r3, [pc, #640]	; (7d54 <__aeabi_ddiv+0x658>)
    7ad2:	18e3      	adds	r3, r4, r3
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	dc00      	bgt.n	7ada <__aeabi_ddiv+0x3de>
    7ad8:	e099      	b.n	7c0e <__aeabi_ddiv+0x512>
    7ada:	074a      	lsls	r2, r1, #29
    7adc:	d000      	beq.n	7ae0 <__aeabi_ddiv+0x3e4>
    7ade:	e09e      	b.n	7c1e <__aeabi_ddiv+0x522>
    7ae0:	465a      	mov	r2, fp
    7ae2:	01d2      	lsls	r2, r2, #7
    7ae4:	d506      	bpl.n	7af4 <__aeabi_ddiv+0x3f8>
    7ae6:	465a      	mov	r2, fp
    7ae8:	4b9b      	ldr	r3, [pc, #620]	; (7d58 <__aeabi_ddiv+0x65c>)
    7aea:	401a      	ands	r2, r3
    7aec:	2380      	movs	r3, #128	; 0x80
    7aee:	4693      	mov	fp, r2
    7af0:	00db      	lsls	r3, r3, #3
    7af2:	18e3      	adds	r3, r4, r3
    7af4:	4a99      	ldr	r2, [pc, #612]	; (7d5c <__aeabi_ddiv+0x660>)
    7af6:	4293      	cmp	r3, r2
    7af8:	dd68      	ble.n	7bcc <__aeabi_ddiv+0x4d0>
    7afa:	2301      	movs	r3, #1
    7afc:	9a02      	ldr	r2, [sp, #8]
    7afe:	4c98      	ldr	r4, [pc, #608]	; (7d60 <__aeabi_ddiv+0x664>)
    7b00:	401a      	ands	r2, r3
    7b02:	2300      	movs	r3, #0
    7b04:	4694      	mov	ip, r2
    7b06:	4698      	mov	r8, r3
    7b08:	2200      	movs	r2, #0
    7b0a:	e6c5      	b.n	7898 <__aeabi_ddiv+0x19c>
    7b0c:	2280      	movs	r2, #128	; 0x80
    7b0e:	464b      	mov	r3, r9
    7b10:	0312      	lsls	r2, r2, #12
    7b12:	4213      	tst	r3, r2
    7b14:	d00a      	beq.n	7b2c <__aeabi_ddiv+0x430>
    7b16:	465b      	mov	r3, fp
    7b18:	4213      	tst	r3, r2
    7b1a:	d106      	bne.n	7b2a <__aeabi_ddiv+0x42e>
    7b1c:	431a      	orrs	r2, r3
    7b1e:	0312      	lsls	r2, r2, #12
    7b20:	0b12      	lsrs	r2, r2, #12
    7b22:	46ac      	mov	ip, r5
    7b24:	4688      	mov	r8, r1
    7b26:	4c8e      	ldr	r4, [pc, #568]	; (7d60 <__aeabi_ddiv+0x664>)
    7b28:	e6b6      	b.n	7898 <__aeabi_ddiv+0x19c>
    7b2a:	464b      	mov	r3, r9
    7b2c:	431a      	orrs	r2, r3
    7b2e:	0312      	lsls	r2, r2, #12
    7b30:	0b12      	lsrs	r2, r2, #12
    7b32:	46bc      	mov	ip, r7
    7b34:	4c8a      	ldr	r4, [pc, #552]	; (7d60 <__aeabi_ddiv+0x664>)
    7b36:	e6af      	b.n	7898 <__aeabi_ddiv+0x19c>
    7b38:	0003      	movs	r3, r0
    7b3a:	465a      	mov	r2, fp
    7b3c:	3b28      	subs	r3, #40	; 0x28
    7b3e:	409a      	lsls	r2, r3
    7b40:	2300      	movs	r3, #0
    7b42:	4691      	mov	r9, r2
    7b44:	4698      	mov	r8, r3
    7b46:	e657      	b.n	77f8 <__aeabi_ddiv+0xfc>
    7b48:	4658      	mov	r0, fp
    7b4a:	f000 ff0d 	bl	8968 <__clzsi2>
    7b4e:	3020      	adds	r0, #32
    7b50:	e640      	b.n	77d4 <__aeabi_ddiv+0xd8>
    7b52:	0003      	movs	r3, r0
    7b54:	4652      	mov	r2, sl
    7b56:	3b28      	subs	r3, #40	; 0x28
    7b58:	409a      	lsls	r2, r3
    7b5a:	2100      	movs	r1, #0
    7b5c:	4693      	mov	fp, r2
    7b5e:	e677      	b.n	7850 <__aeabi_ddiv+0x154>
    7b60:	f000 ff02 	bl	8968 <__clzsi2>
    7b64:	3020      	adds	r0, #32
    7b66:	e65f      	b.n	7828 <__aeabi_ddiv+0x12c>
    7b68:	4588      	cmp	r8, r1
    7b6a:	d200      	bcs.n	7b6e <__aeabi_ddiv+0x472>
    7b6c:	e6c7      	b.n	78fe <__aeabi_ddiv+0x202>
    7b6e:	464b      	mov	r3, r9
    7b70:	07de      	lsls	r6, r3, #31
    7b72:	085d      	lsrs	r5, r3, #1
    7b74:	4643      	mov	r3, r8
    7b76:	085b      	lsrs	r3, r3, #1
    7b78:	431e      	orrs	r6, r3
    7b7a:	4643      	mov	r3, r8
    7b7c:	07db      	lsls	r3, r3, #31
    7b7e:	469a      	mov	sl, r3
    7b80:	e6c2      	b.n	7908 <__aeabi_ddiv+0x20c>
    7b82:	2500      	movs	r5, #0
    7b84:	4592      	cmp	sl, r2
    7b86:	d300      	bcc.n	7b8a <__aeabi_ddiv+0x48e>
    7b88:	e733      	b.n	79f2 <__aeabi_ddiv+0x2f6>
    7b8a:	9e03      	ldr	r6, [sp, #12]
    7b8c:	4659      	mov	r1, fp
    7b8e:	46b4      	mov	ip, r6
    7b90:	44e2      	add	sl, ip
    7b92:	45b2      	cmp	sl, r6
    7b94:	41ad      	sbcs	r5, r5
    7b96:	426d      	negs	r5, r5
    7b98:	4445      	add	r5, r8
    7b9a:	18eb      	adds	r3, r5, r3
    7b9c:	3901      	subs	r1, #1
    7b9e:	4598      	cmp	r8, r3
    7ba0:	d207      	bcs.n	7bb2 <__aeabi_ddiv+0x4b6>
    7ba2:	4298      	cmp	r0, r3
    7ba4:	d900      	bls.n	7ba8 <__aeabi_ddiv+0x4ac>
    7ba6:	e07f      	b.n	7ca8 <__aeabi_ddiv+0x5ac>
    7ba8:	d100      	bne.n	7bac <__aeabi_ddiv+0x4b0>
    7baa:	e0bc      	b.n	7d26 <__aeabi_ddiv+0x62a>
    7bac:	1a1d      	subs	r5, r3, r0
    7bae:	468b      	mov	fp, r1
    7bb0:	e71f      	b.n	79f2 <__aeabi_ddiv+0x2f6>
    7bb2:	4598      	cmp	r8, r3
    7bb4:	d1fa      	bne.n	7bac <__aeabi_ddiv+0x4b0>
    7bb6:	9d03      	ldr	r5, [sp, #12]
    7bb8:	4555      	cmp	r5, sl
    7bba:	d9f2      	bls.n	7ba2 <__aeabi_ddiv+0x4a6>
    7bbc:	4643      	mov	r3, r8
    7bbe:	468b      	mov	fp, r1
    7bc0:	1a1d      	subs	r5, r3, r0
    7bc2:	e716      	b.n	79f2 <__aeabi_ddiv+0x2f6>
    7bc4:	469b      	mov	fp, r3
    7bc6:	e6ca      	b.n	795e <__aeabi_ddiv+0x262>
    7bc8:	0015      	movs	r5, r2
    7bca:	e6e7      	b.n	799c <__aeabi_ddiv+0x2a0>
    7bcc:	465a      	mov	r2, fp
    7bce:	08c9      	lsrs	r1, r1, #3
    7bd0:	0752      	lsls	r2, r2, #29
    7bd2:	430a      	orrs	r2, r1
    7bd4:	055b      	lsls	r3, r3, #21
    7bd6:	4690      	mov	r8, r2
    7bd8:	0d5c      	lsrs	r4, r3, #21
    7bda:	465a      	mov	r2, fp
    7bdc:	2301      	movs	r3, #1
    7bde:	9902      	ldr	r1, [sp, #8]
    7be0:	0252      	lsls	r2, r2, #9
    7be2:	4019      	ands	r1, r3
    7be4:	0b12      	lsrs	r2, r2, #12
    7be6:	468c      	mov	ip, r1
    7be8:	e656      	b.n	7898 <__aeabi_ddiv+0x19c>
    7bea:	2b00      	cmp	r3, #0
    7bec:	d100      	bne.n	7bf0 <__aeabi_ddiv+0x4f4>
    7bee:	e76f      	b.n	7ad0 <__aeabi_ddiv+0x3d4>
    7bf0:	4446      	add	r6, r8
    7bf2:	1e4a      	subs	r2, r1, #1
    7bf4:	45b0      	cmp	r8, r6
    7bf6:	d929      	bls.n	7c4c <__aeabi_ddiv+0x550>
    7bf8:	0011      	movs	r1, r2
    7bfa:	4286      	cmp	r6, r0
    7bfc:	d000      	beq.n	7c00 <__aeabi_ddiv+0x504>
    7bfe:	e765      	b.n	7acc <__aeabi_ddiv+0x3d0>
    7c00:	9a03      	ldr	r2, [sp, #12]
    7c02:	4293      	cmp	r3, r2
    7c04:	d000      	beq.n	7c08 <__aeabi_ddiv+0x50c>
    7c06:	e761      	b.n	7acc <__aeabi_ddiv+0x3d0>
    7c08:	e762      	b.n	7ad0 <__aeabi_ddiv+0x3d4>
    7c0a:	2101      	movs	r1, #1
    7c0c:	4249      	negs	r1, r1
    7c0e:	2001      	movs	r0, #1
    7c10:	1ac2      	subs	r2, r0, r3
    7c12:	2a38      	cmp	r2, #56	; 0x38
    7c14:	dd21      	ble.n	7c5a <__aeabi_ddiv+0x55e>
    7c16:	9b02      	ldr	r3, [sp, #8]
    7c18:	4003      	ands	r3, r0
    7c1a:	469c      	mov	ip, r3
    7c1c:	e638      	b.n	7890 <__aeabi_ddiv+0x194>
    7c1e:	220f      	movs	r2, #15
    7c20:	400a      	ands	r2, r1
    7c22:	2a04      	cmp	r2, #4
    7c24:	d100      	bne.n	7c28 <__aeabi_ddiv+0x52c>
    7c26:	e75b      	b.n	7ae0 <__aeabi_ddiv+0x3e4>
    7c28:	000a      	movs	r2, r1
    7c2a:	1d11      	adds	r1, r2, #4
    7c2c:	4291      	cmp	r1, r2
    7c2e:	4192      	sbcs	r2, r2
    7c30:	4252      	negs	r2, r2
    7c32:	4493      	add	fp, r2
    7c34:	e754      	b.n	7ae0 <__aeabi_ddiv+0x3e4>
    7c36:	4b47      	ldr	r3, [pc, #284]	; (7d54 <__aeabi_ddiv+0x658>)
    7c38:	18e3      	adds	r3, r4, r3
    7c3a:	2b00      	cmp	r3, #0
    7c3c:	dde5      	ble.n	7c0a <__aeabi_ddiv+0x50e>
    7c3e:	2201      	movs	r2, #1
    7c40:	4252      	negs	r2, r2
    7c42:	e7f2      	b.n	7c2a <__aeabi_ddiv+0x52e>
    7c44:	001d      	movs	r5, r3
    7c46:	e6fa      	b.n	7a3e <__aeabi_ddiv+0x342>
    7c48:	469a      	mov	sl, r3
    7c4a:	e71c      	b.n	7a86 <__aeabi_ddiv+0x38a>
    7c4c:	42b0      	cmp	r0, r6
    7c4e:	d839      	bhi.n	7cc4 <__aeabi_ddiv+0x5c8>
    7c50:	d06e      	beq.n	7d30 <__aeabi_ddiv+0x634>
    7c52:	0011      	movs	r1, r2
    7c54:	e73a      	b.n	7acc <__aeabi_ddiv+0x3d0>
    7c56:	9302      	str	r3, [sp, #8]
    7c58:	e73a      	b.n	7ad0 <__aeabi_ddiv+0x3d4>
    7c5a:	2a1f      	cmp	r2, #31
    7c5c:	dc3c      	bgt.n	7cd8 <__aeabi_ddiv+0x5dc>
    7c5e:	2320      	movs	r3, #32
    7c60:	1a9b      	subs	r3, r3, r2
    7c62:	000c      	movs	r4, r1
    7c64:	4658      	mov	r0, fp
    7c66:	4099      	lsls	r1, r3
    7c68:	4098      	lsls	r0, r3
    7c6a:	1e4b      	subs	r3, r1, #1
    7c6c:	4199      	sbcs	r1, r3
    7c6e:	465b      	mov	r3, fp
    7c70:	40d4      	lsrs	r4, r2
    7c72:	40d3      	lsrs	r3, r2
    7c74:	4320      	orrs	r0, r4
    7c76:	4308      	orrs	r0, r1
    7c78:	001a      	movs	r2, r3
    7c7a:	0743      	lsls	r3, r0, #29
    7c7c:	d009      	beq.n	7c92 <__aeabi_ddiv+0x596>
    7c7e:	230f      	movs	r3, #15
    7c80:	4003      	ands	r3, r0
    7c82:	2b04      	cmp	r3, #4
    7c84:	d005      	beq.n	7c92 <__aeabi_ddiv+0x596>
    7c86:	0001      	movs	r1, r0
    7c88:	1d08      	adds	r0, r1, #4
    7c8a:	4288      	cmp	r0, r1
    7c8c:	419b      	sbcs	r3, r3
    7c8e:	425b      	negs	r3, r3
    7c90:	18d2      	adds	r2, r2, r3
    7c92:	0213      	lsls	r3, r2, #8
    7c94:	d53a      	bpl.n	7d0c <__aeabi_ddiv+0x610>
    7c96:	2301      	movs	r3, #1
    7c98:	9a02      	ldr	r2, [sp, #8]
    7c9a:	2401      	movs	r4, #1
    7c9c:	401a      	ands	r2, r3
    7c9e:	2300      	movs	r3, #0
    7ca0:	4694      	mov	ip, r2
    7ca2:	4698      	mov	r8, r3
    7ca4:	2200      	movs	r2, #0
    7ca6:	e5f7      	b.n	7898 <__aeabi_ddiv+0x19c>
    7ca8:	2102      	movs	r1, #2
    7caa:	4249      	negs	r1, r1
    7cac:	468c      	mov	ip, r1
    7cae:	9d03      	ldr	r5, [sp, #12]
    7cb0:	44e3      	add	fp, ip
    7cb2:	46ac      	mov	ip, r5
    7cb4:	44e2      	add	sl, ip
    7cb6:	45aa      	cmp	sl, r5
    7cb8:	41ad      	sbcs	r5, r5
    7cba:	426d      	negs	r5, r5
    7cbc:	4445      	add	r5, r8
    7cbe:	18ed      	adds	r5, r5, r3
    7cc0:	1a2d      	subs	r5, r5, r0
    7cc2:	e696      	b.n	79f2 <__aeabi_ddiv+0x2f6>
    7cc4:	1e8a      	subs	r2, r1, #2
    7cc6:	9903      	ldr	r1, [sp, #12]
    7cc8:	004d      	lsls	r5, r1, #1
    7cca:	428d      	cmp	r5, r1
    7ccc:	4189      	sbcs	r1, r1
    7cce:	4249      	negs	r1, r1
    7cd0:	4441      	add	r1, r8
    7cd2:	1876      	adds	r6, r6, r1
    7cd4:	9503      	str	r5, [sp, #12]
    7cd6:	e78f      	b.n	7bf8 <__aeabi_ddiv+0x4fc>
    7cd8:	201f      	movs	r0, #31
    7cda:	4240      	negs	r0, r0
    7cdc:	1ac3      	subs	r3, r0, r3
    7cde:	4658      	mov	r0, fp
    7ce0:	40d8      	lsrs	r0, r3
    7ce2:	0003      	movs	r3, r0
    7ce4:	2a20      	cmp	r2, #32
    7ce6:	d028      	beq.n	7d3a <__aeabi_ddiv+0x63e>
    7ce8:	2040      	movs	r0, #64	; 0x40
    7cea:	465d      	mov	r5, fp
    7cec:	1a82      	subs	r2, r0, r2
    7cee:	4095      	lsls	r5, r2
    7cf0:	4329      	orrs	r1, r5
    7cf2:	1e4a      	subs	r2, r1, #1
    7cf4:	4191      	sbcs	r1, r2
    7cf6:	4319      	orrs	r1, r3
    7cf8:	2307      	movs	r3, #7
    7cfa:	2200      	movs	r2, #0
    7cfc:	400b      	ands	r3, r1
    7cfe:	d009      	beq.n	7d14 <__aeabi_ddiv+0x618>
    7d00:	230f      	movs	r3, #15
    7d02:	2200      	movs	r2, #0
    7d04:	400b      	ands	r3, r1
    7d06:	0008      	movs	r0, r1
    7d08:	2b04      	cmp	r3, #4
    7d0a:	d1bd      	bne.n	7c88 <__aeabi_ddiv+0x58c>
    7d0c:	0001      	movs	r1, r0
    7d0e:	0753      	lsls	r3, r2, #29
    7d10:	0252      	lsls	r2, r2, #9
    7d12:	0b12      	lsrs	r2, r2, #12
    7d14:	08c9      	lsrs	r1, r1, #3
    7d16:	4319      	orrs	r1, r3
    7d18:	2301      	movs	r3, #1
    7d1a:	4688      	mov	r8, r1
    7d1c:	9902      	ldr	r1, [sp, #8]
    7d1e:	2400      	movs	r4, #0
    7d20:	4019      	ands	r1, r3
    7d22:	468c      	mov	ip, r1
    7d24:	e5b8      	b.n	7898 <__aeabi_ddiv+0x19c>
    7d26:	4552      	cmp	r2, sl
    7d28:	d8be      	bhi.n	7ca8 <__aeabi_ddiv+0x5ac>
    7d2a:	468b      	mov	fp, r1
    7d2c:	2500      	movs	r5, #0
    7d2e:	e660      	b.n	79f2 <__aeabi_ddiv+0x2f6>
    7d30:	9d03      	ldr	r5, [sp, #12]
    7d32:	429d      	cmp	r5, r3
    7d34:	d3c6      	bcc.n	7cc4 <__aeabi_ddiv+0x5c8>
    7d36:	0011      	movs	r1, r2
    7d38:	e762      	b.n	7c00 <__aeabi_ddiv+0x504>
    7d3a:	2500      	movs	r5, #0
    7d3c:	e7d8      	b.n	7cf0 <__aeabi_ddiv+0x5f4>
    7d3e:	2280      	movs	r2, #128	; 0x80
    7d40:	465b      	mov	r3, fp
    7d42:	0312      	lsls	r2, r2, #12
    7d44:	431a      	orrs	r2, r3
    7d46:	9b01      	ldr	r3, [sp, #4]
    7d48:	0312      	lsls	r2, r2, #12
    7d4a:	0b12      	lsrs	r2, r2, #12
    7d4c:	469c      	mov	ip, r3
    7d4e:	4688      	mov	r8, r1
    7d50:	4c03      	ldr	r4, [pc, #12]	; (7d60 <__aeabi_ddiv+0x664>)
    7d52:	e5a1      	b.n	7898 <__aeabi_ddiv+0x19c>
    7d54:	000003ff 	.word	0x000003ff
    7d58:	feffffff 	.word	0xfeffffff
    7d5c:	000007fe 	.word	0x000007fe
    7d60:	000007ff 	.word	0x000007ff

00007d64 <__aeabi_dmul>:
    7d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d66:	4657      	mov	r7, sl
    7d68:	4645      	mov	r5, r8
    7d6a:	46de      	mov	lr, fp
    7d6c:	464e      	mov	r6, r9
    7d6e:	b5e0      	push	{r5, r6, r7, lr}
    7d70:	030c      	lsls	r4, r1, #12
    7d72:	4698      	mov	r8, r3
    7d74:	004e      	lsls	r6, r1, #1
    7d76:	0b23      	lsrs	r3, r4, #12
    7d78:	b087      	sub	sp, #28
    7d7a:	0007      	movs	r7, r0
    7d7c:	4692      	mov	sl, r2
    7d7e:	469b      	mov	fp, r3
    7d80:	0d76      	lsrs	r6, r6, #21
    7d82:	0fcd      	lsrs	r5, r1, #31
    7d84:	2e00      	cmp	r6, #0
    7d86:	d06b      	beq.n	7e60 <__aeabi_dmul+0xfc>
    7d88:	4b6d      	ldr	r3, [pc, #436]	; (7f40 <__aeabi_dmul+0x1dc>)
    7d8a:	429e      	cmp	r6, r3
    7d8c:	d035      	beq.n	7dfa <__aeabi_dmul+0x96>
    7d8e:	2480      	movs	r4, #128	; 0x80
    7d90:	465b      	mov	r3, fp
    7d92:	0f42      	lsrs	r2, r0, #29
    7d94:	0424      	lsls	r4, r4, #16
    7d96:	00db      	lsls	r3, r3, #3
    7d98:	4314      	orrs	r4, r2
    7d9a:	431c      	orrs	r4, r3
    7d9c:	00c3      	lsls	r3, r0, #3
    7d9e:	4699      	mov	r9, r3
    7da0:	4b68      	ldr	r3, [pc, #416]	; (7f44 <__aeabi_dmul+0x1e0>)
    7da2:	46a3      	mov	fp, r4
    7da4:	469c      	mov	ip, r3
    7da6:	2300      	movs	r3, #0
    7da8:	2700      	movs	r7, #0
    7daa:	4466      	add	r6, ip
    7dac:	9302      	str	r3, [sp, #8]
    7dae:	4643      	mov	r3, r8
    7db0:	031c      	lsls	r4, r3, #12
    7db2:	005a      	lsls	r2, r3, #1
    7db4:	0fdb      	lsrs	r3, r3, #31
    7db6:	4650      	mov	r0, sl
    7db8:	0b24      	lsrs	r4, r4, #12
    7dba:	0d52      	lsrs	r2, r2, #21
    7dbc:	4698      	mov	r8, r3
    7dbe:	d100      	bne.n	7dc2 <__aeabi_dmul+0x5e>
    7dc0:	e076      	b.n	7eb0 <__aeabi_dmul+0x14c>
    7dc2:	4b5f      	ldr	r3, [pc, #380]	; (7f40 <__aeabi_dmul+0x1dc>)
    7dc4:	429a      	cmp	r2, r3
    7dc6:	d06d      	beq.n	7ea4 <__aeabi_dmul+0x140>
    7dc8:	2380      	movs	r3, #128	; 0x80
    7dca:	0f41      	lsrs	r1, r0, #29
    7dcc:	041b      	lsls	r3, r3, #16
    7dce:	430b      	orrs	r3, r1
    7dd0:	495c      	ldr	r1, [pc, #368]	; (7f44 <__aeabi_dmul+0x1e0>)
    7dd2:	00e4      	lsls	r4, r4, #3
    7dd4:	468c      	mov	ip, r1
    7dd6:	431c      	orrs	r4, r3
    7dd8:	00c3      	lsls	r3, r0, #3
    7dda:	2000      	movs	r0, #0
    7ddc:	4462      	add	r2, ip
    7dde:	4641      	mov	r1, r8
    7de0:	18b6      	adds	r6, r6, r2
    7de2:	4069      	eors	r1, r5
    7de4:	1c72      	adds	r2, r6, #1
    7de6:	9101      	str	r1, [sp, #4]
    7de8:	4694      	mov	ip, r2
    7dea:	4307      	orrs	r7, r0
    7dec:	2f0f      	cmp	r7, #15
    7dee:	d900      	bls.n	7df2 <__aeabi_dmul+0x8e>
    7df0:	e0b0      	b.n	7f54 <__aeabi_dmul+0x1f0>
    7df2:	4a55      	ldr	r2, [pc, #340]	; (7f48 <__aeabi_dmul+0x1e4>)
    7df4:	00bf      	lsls	r7, r7, #2
    7df6:	59d2      	ldr	r2, [r2, r7]
    7df8:	4697      	mov	pc, r2
    7dfa:	465b      	mov	r3, fp
    7dfc:	4303      	orrs	r3, r0
    7dfe:	4699      	mov	r9, r3
    7e00:	d000      	beq.n	7e04 <__aeabi_dmul+0xa0>
    7e02:	e087      	b.n	7f14 <__aeabi_dmul+0x1b0>
    7e04:	2300      	movs	r3, #0
    7e06:	469b      	mov	fp, r3
    7e08:	3302      	adds	r3, #2
    7e0a:	2708      	movs	r7, #8
    7e0c:	9302      	str	r3, [sp, #8]
    7e0e:	e7ce      	b.n	7dae <__aeabi_dmul+0x4a>
    7e10:	4642      	mov	r2, r8
    7e12:	9201      	str	r2, [sp, #4]
    7e14:	2802      	cmp	r0, #2
    7e16:	d067      	beq.n	7ee8 <__aeabi_dmul+0x184>
    7e18:	2803      	cmp	r0, #3
    7e1a:	d100      	bne.n	7e1e <__aeabi_dmul+0xba>
    7e1c:	e20e      	b.n	823c <__aeabi_dmul+0x4d8>
    7e1e:	2801      	cmp	r0, #1
    7e20:	d000      	beq.n	7e24 <__aeabi_dmul+0xc0>
    7e22:	e162      	b.n	80ea <__aeabi_dmul+0x386>
    7e24:	2300      	movs	r3, #0
    7e26:	2400      	movs	r4, #0
    7e28:	2200      	movs	r2, #0
    7e2a:	4699      	mov	r9, r3
    7e2c:	9901      	ldr	r1, [sp, #4]
    7e2e:	4001      	ands	r1, r0
    7e30:	b2cd      	uxtb	r5, r1
    7e32:	2100      	movs	r1, #0
    7e34:	0312      	lsls	r2, r2, #12
    7e36:	0d0b      	lsrs	r3, r1, #20
    7e38:	0b12      	lsrs	r2, r2, #12
    7e3a:	051b      	lsls	r3, r3, #20
    7e3c:	4313      	orrs	r3, r2
    7e3e:	4a43      	ldr	r2, [pc, #268]	; (7f4c <__aeabi_dmul+0x1e8>)
    7e40:	0524      	lsls	r4, r4, #20
    7e42:	4013      	ands	r3, r2
    7e44:	431c      	orrs	r4, r3
    7e46:	0064      	lsls	r4, r4, #1
    7e48:	07ed      	lsls	r5, r5, #31
    7e4a:	0864      	lsrs	r4, r4, #1
    7e4c:	432c      	orrs	r4, r5
    7e4e:	4648      	mov	r0, r9
    7e50:	0021      	movs	r1, r4
    7e52:	b007      	add	sp, #28
    7e54:	bc3c      	pop	{r2, r3, r4, r5}
    7e56:	4690      	mov	r8, r2
    7e58:	4699      	mov	r9, r3
    7e5a:	46a2      	mov	sl, r4
    7e5c:	46ab      	mov	fp, r5
    7e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e60:	4303      	orrs	r3, r0
    7e62:	4699      	mov	r9, r3
    7e64:	d04f      	beq.n	7f06 <__aeabi_dmul+0x1a2>
    7e66:	465b      	mov	r3, fp
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d100      	bne.n	7e6e <__aeabi_dmul+0x10a>
    7e6c:	e189      	b.n	8182 <__aeabi_dmul+0x41e>
    7e6e:	4658      	mov	r0, fp
    7e70:	f000 fd7a 	bl	8968 <__clzsi2>
    7e74:	0003      	movs	r3, r0
    7e76:	3b0b      	subs	r3, #11
    7e78:	2b1c      	cmp	r3, #28
    7e7a:	dd00      	ble.n	7e7e <__aeabi_dmul+0x11a>
    7e7c:	e17a      	b.n	8174 <__aeabi_dmul+0x410>
    7e7e:	221d      	movs	r2, #29
    7e80:	1ad3      	subs	r3, r2, r3
    7e82:	003a      	movs	r2, r7
    7e84:	0001      	movs	r1, r0
    7e86:	465c      	mov	r4, fp
    7e88:	40da      	lsrs	r2, r3
    7e8a:	3908      	subs	r1, #8
    7e8c:	408c      	lsls	r4, r1
    7e8e:	0013      	movs	r3, r2
    7e90:	408f      	lsls	r7, r1
    7e92:	4323      	orrs	r3, r4
    7e94:	469b      	mov	fp, r3
    7e96:	46b9      	mov	r9, r7
    7e98:	2300      	movs	r3, #0
    7e9a:	4e2d      	ldr	r6, [pc, #180]	; (7f50 <__aeabi_dmul+0x1ec>)
    7e9c:	2700      	movs	r7, #0
    7e9e:	1a36      	subs	r6, r6, r0
    7ea0:	9302      	str	r3, [sp, #8]
    7ea2:	e784      	b.n	7dae <__aeabi_dmul+0x4a>
    7ea4:	4653      	mov	r3, sl
    7ea6:	4323      	orrs	r3, r4
    7ea8:	d12a      	bne.n	7f00 <__aeabi_dmul+0x19c>
    7eaa:	2400      	movs	r4, #0
    7eac:	2002      	movs	r0, #2
    7eae:	e796      	b.n	7dde <__aeabi_dmul+0x7a>
    7eb0:	4653      	mov	r3, sl
    7eb2:	4323      	orrs	r3, r4
    7eb4:	d020      	beq.n	7ef8 <__aeabi_dmul+0x194>
    7eb6:	2c00      	cmp	r4, #0
    7eb8:	d100      	bne.n	7ebc <__aeabi_dmul+0x158>
    7eba:	e157      	b.n	816c <__aeabi_dmul+0x408>
    7ebc:	0020      	movs	r0, r4
    7ebe:	f000 fd53 	bl	8968 <__clzsi2>
    7ec2:	0003      	movs	r3, r0
    7ec4:	3b0b      	subs	r3, #11
    7ec6:	2b1c      	cmp	r3, #28
    7ec8:	dd00      	ble.n	7ecc <__aeabi_dmul+0x168>
    7eca:	e149      	b.n	8160 <__aeabi_dmul+0x3fc>
    7ecc:	211d      	movs	r1, #29
    7ece:	1acb      	subs	r3, r1, r3
    7ed0:	4651      	mov	r1, sl
    7ed2:	0002      	movs	r2, r0
    7ed4:	40d9      	lsrs	r1, r3
    7ed6:	4653      	mov	r3, sl
    7ed8:	3a08      	subs	r2, #8
    7eda:	4094      	lsls	r4, r2
    7edc:	4093      	lsls	r3, r2
    7ede:	430c      	orrs	r4, r1
    7ee0:	4a1b      	ldr	r2, [pc, #108]	; (7f50 <__aeabi_dmul+0x1ec>)
    7ee2:	1a12      	subs	r2, r2, r0
    7ee4:	2000      	movs	r0, #0
    7ee6:	e77a      	b.n	7dde <__aeabi_dmul+0x7a>
    7ee8:	2501      	movs	r5, #1
    7eea:	9b01      	ldr	r3, [sp, #4]
    7eec:	4c14      	ldr	r4, [pc, #80]	; (7f40 <__aeabi_dmul+0x1dc>)
    7eee:	401d      	ands	r5, r3
    7ef0:	2300      	movs	r3, #0
    7ef2:	2200      	movs	r2, #0
    7ef4:	4699      	mov	r9, r3
    7ef6:	e79c      	b.n	7e32 <__aeabi_dmul+0xce>
    7ef8:	2400      	movs	r4, #0
    7efa:	2200      	movs	r2, #0
    7efc:	2001      	movs	r0, #1
    7efe:	e76e      	b.n	7dde <__aeabi_dmul+0x7a>
    7f00:	4653      	mov	r3, sl
    7f02:	2003      	movs	r0, #3
    7f04:	e76b      	b.n	7dde <__aeabi_dmul+0x7a>
    7f06:	2300      	movs	r3, #0
    7f08:	469b      	mov	fp, r3
    7f0a:	3301      	adds	r3, #1
    7f0c:	2704      	movs	r7, #4
    7f0e:	2600      	movs	r6, #0
    7f10:	9302      	str	r3, [sp, #8]
    7f12:	e74c      	b.n	7dae <__aeabi_dmul+0x4a>
    7f14:	2303      	movs	r3, #3
    7f16:	4681      	mov	r9, r0
    7f18:	270c      	movs	r7, #12
    7f1a:	9302      	str	r3, [sp, #8]
    7f1c:	e747      	b.n	7dae <__aeabi_dmul+0x4a>
    7f1e:	2280      	movs	r2, #128	; 0x80
    7f20:	2300      	movs	r3, #0
    7f22:	2500      	movs	r5, #0
    7f24:	0312      	lsls	r2, r2, #12
    7f26:	4699      	mov	r9, r3
    7f28:	4c05      	ldr	r4, [pc, #20]	; (7f40 <__aeabi_dmul+0x1dc>)
    7f2a:	e782      	b.n	7e32 <__aeabi_dmul+0xce>
    7f2c:	465c      	mov	r4, fp
    7f2e:	464b      	mov	r3, r9
    7f30:	9802      	ldr	r0, [sp, #8]
    7f32:	e76f      	b.n	7e14 <__aeabi_dmul+0xb0>
    7f34:	465c      	mov	r4, fp
    7f36:	464b      	mov	r3, r9
    7f38:	9501      	str	r5, [sp, #4]
    7f3a:	9802      	ldr	r0, [sp, #8]
    7f3c:	e76a      	b.n	7e14 <__aeabi_dmul+0xb0>
    7f3e:	46c0      	nop			; (mov r8, r8)
    7f40:	000007ff 	.word	0x000007ff
    7f44:	fffffc01 	.word	0xfffffc01
    7f48:	0000a7b0 	.word	0x0000a7b0
    7f4c:	800fffff 	.word	0x800fffff
    7f50:	fffffc0d 	.word	0xfffffc0d
    7f54:	464a      	mov	r2, r9
    7f56:	4649      	mov	r1, r9
    7f58:	0c17      	lsrs	r7, r2, #16
    7f5a:	0c1a      	lsrs	r2, r3, #16
    7f5c:	041b      	lsls	r3, r3, #16
    7f5e:	0c1b      	lsrs	r3, r3, #16
    7f60:	0408      	lsls	r0, r1, #16
    7f62:	0019      	movs	r1, r3
    7f64:	0c00      	lsrs	r0, r0, #16
    7f66:	4341      	muls	r1, r0
    7f68:	0015      	movs	r5, r2
    7f6a:	4688      	mov	r8, r1
    7f6c:	0019      	movs	r1, r3
    7f6e:	437d      	muls	r5, r7
    7f70:	4379      	muls	r1, r7
    7f72:	9503      	str	r5, [sp, #12]
    7f74:	4689      	mov	r9, r1
    7f76:	0029      	movs	r1, r5
    7f78:	0015      	movs	r5, r2
    7f7a:	4345      	muls	r5, r0
    7f7c:	444d      	add	r5, r9
    7f7e:	9502      	str	r5, [sp, #8]
    7f80:	4645      	mov	r5, r8
    7f82:	0c2d      	lsrs	r5, r5, #16
    7f84:	46aa      	mov	sl, r5
    7f86:	9d02      	ldr	r5, [sp, #8]
    7f88:	4455      	add	r5, sl
    7f8a:	45a9      	cmp	r9, r5
    7f8c:	d906      	bls.n	7f9c <__aeabi_dmul+0x238>
    7f8e:	468a      	mov	sl, r1
    7f90:	2180      	movs	r1, #128	; 0x80
    7f92:	0249      	lsls	r1, r1, #9
    7f94:	4689      	mov	r9, r1
    7f96:	44ca      	add	sl, r9
    7f98:	4651      	mov	r1, sl
    7f9a:	9103      	str	r1, [sp, #12]
    7f9c:	0c29      	lsrs	r1, r5, #16
    7f9e:	9104      	str	r1, [sp, #16]
    7fa0:	4641      	mov	r1, r8
    7fa2:	0409      	lsls	r1, r1, #16
    7fa4:	042d      	lsls	r5, r5, #16
    7fa6:	0c09      	lsrs	r1, r1, #16
    7fa8:	4688      	mov	r8, r1
    7faa:	0029      	movs	r1, r5
    7fac:	0c25      	lsrs	r5, r4, #16
    7fae:	0424      	lsls	r4, r4, #16
    7fb0:	4441      	add	r1, r8
    7fb2:	0c24      	lsrs	r4, r4, #16
    7fb4:	9105      	str	r1, [sp, #20]
    7fb6:	0021      	movs	r1, r4
    7fb8:	4341      	muls	r1, r0
    7fba:	4688      	mov	r8, r1
    7fbc:	0021      	movs	r1, r4
    7fbe:	4379      	muls	r1, r7
    7fc0:	468a      	mov	sl, r1
    7fc2:	4368      	muls	r0, r5
    7fc4:	4641      	mov	r1, r8
    7fc6:	4450      	add	r0, sl
    7fc8:	4681      	mov	r9, r0
    7fca:	0c08      	lsrs	r0, r1, #16
    7fcc:	4448      	add	r0, r9
    7fce:	436f      	muls	r7, r5
    7fd0:	4582      	cmp	sl, r0
    7fd2:	d903      	bls.n	7fdc <__aeabi_dmul+0x278>
    7fd4:	2180      	movs	r1, #128	; 0x80
    7fd6:	0249      	lsls	r1, r1, #9
    7fd8:	4689      	mov	r9, r1
    7fda:	444f      	add	r7, r9
    7fdc:	0c01      	lsrs	r1, r0, #16
    7fde:	4689      	mov	r9, r1
    7fe0:	0039      	movs	r1, r7
    7fe2:	4449      	add	r1, r9
    7fe4:	9102      	str	r1, [sp, #8]
    7fe6:	4641      	mov	r1, r8
    7fe8:	040f      	lsls	r7, r1, #16
    7fea:	9904      	ldr	r1, [sp, #16]
    7fec:	0c3f      	lsrs	r7, r7, #16
    7fee:	4688      	mov	r8, r1
    7ff0:	0400      	lsls	r0, r0, #16
    7ff2:	19c0      	adds	r0, r0, r7
    7ff4:	4480      	add	r8, r0
    7ff6:	4641      	mov	r1, r8
    7ff8:	9104      	str	r1, [sp, #16]
    7ffa:	4659      	mov	r1, fp
    7ffc:	0c0f      	lsrs	r7, r1, #16
    7ffe:	0409      	lsls	r1, r1, #16
    8000:	0c09      	lsrs	r1, r1, #16
    8002:	4688      	mov	r8, r1
    8004:	4359      	muls	r1, r3
    8006:	468a      	mov	sl, r1
    8008:	0039      	movs	r1, r7
    800a:	4351      	muls	r1, r2
    800c:	4689      	mov	r9, r1
    800e:	4641      	mov	r1, r8
    8010:	434a      	muls	r2, r1
    8012:	4651      	mov	r1, sl
    8014:	0c09      	lsrs	r1, r1, #16
    8016:	468b      	mov	fp, r1
    8018:	437b      	muls	r3, r7
    801a:	18d2      	adds	r2, r2, r3
    801c:	445a      	add	r2, fp
    801e:	4293      	cmp	r3, r2
    8020:	d903      	bls.n	802a <__aeabi_dmul+0x2c6>
    8022:	2380      	movs	r3, #128	; 0x80
    8024:	025b      	lsls	r3, r3, #9
    8026:	469b      	mov	fp, r3
    8028:	44d9      	add	r9, fp
    802a:	4651      	mov	r1, sl
    802c:	0409      	lsls	r1, r1, #16
    802e:	0c09      	lsrs	r1, r1, #16
    8030:	468a      	mov	sl, r1
    8032:	4641      	mov	r1, r8
    8034:	4361      	muls	r1, r4
    8036:	437c      	muls	r4, r7
    8038:	0c13      	lsrs	r3, r2, #16
    803a:	0412      	lsls	r2, r2, #16
    803c:	444b      	add	r3, r9
    803e:	4452      	add	r2, sl
    8040:	46a1      	mov	r9, r4
    8042:	468a      	mov	sl, r1
    8044:	003c      	movs	r4, r7
    8046:	4641      	mov	r1, r8
    8048:	436c      	muls	r4, r5
    804a:	434d      	muls	r5, r1
    804c:	4651      	mov	r1, sl
    804e:	444d      	add	r5, r9
    8050:	0c0f      	lsrs	r7, r1, #16
    8052:	197d      	adds	r5, r7, r5
    8054:	45a9      	cmp	r9, r5
    8056:	d903      	bls.n	8060 <__aeabi_dmul+0x2fc>
    8058:	2180      	movs	r1, #128	; 0x80
    805a:	0249      	lsls	r1, r1, #9
    805c:	4688      	mov	r8, r1
    805e:	4444      	add	r4, r8
    8060:	9f04      	ldr	r7, [sp, #16]
    8062:	9903      	ldr	r1, [sp, #12]
    8064:	46b8      	mov	r8, r7
    8066:	4441      	add	r1, r8
    8068:	468b      	mov	fp, r1
    806a:	4583      	cmp	fp, r0
    806c:	4180      	sbcs	r0, r0
    806e:	4241      	negs	r1, r0
    8070:	4688      	mov	r8, r1
    8072:	4651      	mov	r1, sl
    8074:	0408      	lsls	r0, r1, #16
    8076:	042f      	lsls	r7, r5, #16
    8078:	0c00      	lsrs	r0, r0, #16
    807a:	183f      	adds	r7, r7, r0
    807c:	4658      	mov	r0, fp
    807e:	9902      	ldr	r1, [sp, #8]
    8080:	1810      	adds	r0, r2, r0
    8082:	4689      	mov	r9, r1
    8084:	4290      	cmp	r0, r2
    8086:	4192      	sbcs	r2, r2
    8088:	444f      	add	r7, r9
    808a:	46ba      	mov	sl, r7
    808c:	4252      	negs	r2, r2
    808e:	4699      	mov	r9, r3
    8090:	4693      	mov	fp, r2
    8092:	44c2      	add	sl, r8
    8094:	44d1      	add	r9, sl
    8096:	44cb      	add	fp, r9
    8098:	428f      	cmp	r7, r1
    809a:	41bf      	sbcs	r7, r7
    809c:	45c2      	cmp	sl, r8
    809e:	4189      	sbcs	r1, r1
    80a0:	4599      	cmp	r9, r3
    80a2:	419b      	sbcs	r3, r3
    80a4:	4593      	cmp	fp, r2
    80a6:	4192      	sbcs	r2, r2
    80a8:	427f      	negs	r7, r7
    80aa:	4249      	negs	r1, r1
    80ac:	0c2d      	lsrs	r5, r5, #16
    80ae:	4252      	negs	r2, r2
    80b0:	430f      	orrs	r7, r1
    80b2:	425b      	negs	r3, r3
    80b4:	4313      	orrs	r3, r2
    80b6:	197f      	adds	r7, r7, r5
    80b8:	18ff      	adds	r7, r7, r3
    80ba:	465b      	mov	r3, fp
    80bc:	193c      	adds	r4, r7, r4
    80be:	0ddb      	lsrs	r3, r3, #23
    80c0:	9a05      	ldr	r2, [sp, #20]
    80c2:	0264      	lsls	r4, r4, #9
    80c4:	431c      	orrs	r4, r3
    80c6:	0243      	lsls	r3, r0, #9
    80c8:	4313      	orrs	r3, r2
    80ca:	1e5d      	subs	r5, r3, #1
    80cc:	41ab      	sbcs	r3, r5
    80ce:	465a      	mov	r2, fp
    80d0:	0dc0      	lsrs	r0, r0, #23
    80d2:	4303      	orrs	r3, r0
    80d4:	0252      	lsls	r2, r2, #9
    80d6:	4313      	orrs	r3, r2
    80d8:	01e2      	lsls	r2, r4, #7
    80da:	d556      	bpl.n	818a <__aeabi_dmul+0x426>
    80dc:	2001      	movs	r0, #1
    80de:	085a      	lsrs	r2, r3, #1
    80e0:	4003      	ands	r3, r0
    80e2:	4313      	orrs	r3, r2
    80e4:	07e2      	lsls	r2, r4, #31
    80e6:	4313      	orrs	r3, r2
    80e8:	0864      	lsrs	r4, r4, #1
    80ea:	485a      	ldr	r0, [pc, #360]	; (8254 <__aeabi_dmul+0x4f0>)
    80ec:	4460      	add	r0, ip
    80ee:	2800      	cmp	r0, #0
    80f0:	dd4d      	ble.n	818e <__aeabi_dmul+0x42a>
    80f2:	075a      	lsls	r2, r3, #29
    80f4:	d009      	beq.n	810a <__aeabi_dmul+0x3a6>
    80f6:	220f      	movs	r2, #15
    80f8:	401a      	ands	r2, r3
    80fa:	2a04      	cmp	r2, #4
    80fc:	d005      	beq.n	810a <__aeabi_dmul+0x3a6>
    80fe:	1d1a      	adds	r2, r3, #4
    8100:	429a      	cmp	r2, r3
    8102:	419b      	sbcs	r3, r3
    8104:	425b      	negs	r3, r3
    8106:	18e4      	adds	r4, r4, r3
    8108:	0013      	movs	r3, r2
    810a:	01e2      	lsls	r2, r4, #7
    810c:	d504      	bpl.n	8118 <__aeabi_dmul+0x3b4>
    810e:	2080      	movs	r0, #128	; 0x80
    8110:	4a51      	ldr	r2, [pc, #324]	; (8258 <__aeabi_dmul+0x4f4>)
    8112:	00c0      	lsls	r0, r0, #3
    8114:	4014      	ands	r4, r2
    8116:	4460      	add	r0, ip
    8118:	4a50      	ldr	r2, [pc, #320]	; (825c <__aeabi_dmul+0x4f8>)
    811a:	4290      	cmp	r0, r2
    811c:	dd00      	ble.n	8120 <__aeabi_dmul+0x3bc>
    811e:	e6e3      	b.n	7ee8 <__aeabi_dmul+0x184>
    8120:	2501      	movs	r5, #1
    8122:	08db      	lsrs	r3, r3, #3
    8124:	0762      	lsls	r2, r4, #29
    8126:	431a      	orrs	r2, r3
    8128:	0264      	lsls	r4, r4, #9
    812a:	9b01      	ldr	r3, [sp, #4]
    812c:	4691      	mov	r9, r2
    812e:	0b22      	lsrs	r2, r4, #12
    8130:	0544      	lsls	r4, r0, #21
    8132:	0d64      	lsrs	r4, r4, #21
    8134:	401d      	ands	r5, r3
    8136:	e67c      	b.n	7e32 <__aeabi_dmul+0xce>
    8138:	2280      	movs	r2, #128	; 0x80
    813a:	4659      	mov	r1, fp
    813c:	0312      	lsls	r2, r2, #12
    813e:	4211      	tst	r1, r2
    8140:	d008      	beq.n	8154 <__aeabi_dmul+0x3f0>
    8142:	4214      	tst	r4, r2
    8144:	d106      	bne.n	8154 <__aeabi_dmul+0x3f0>
    8146:	4322      	orrs	r2, r4
    8148:	0312      	lsls	r2, r2, #12
    814a:	0b12      	lsrs	r2, r2, #12
    814c:	4645      	mov	r5, r8
    814e:	4699      	mov	r9, r3
    8150:	4c43      	ldr	r4, [pc, #268]	; (8260 <__aeabi_dmul+0x4fc>)
    8152:	e66e      	b.n	7e32 <__aeabi_dmul+0xce>
    8154:	465b      	mov	r3, fp
    8156:	431a      	orrs	r2, r3
    8158:	0312      	lsls	r2, r2, #12
    815a:	0b12      	lsrs	r2, r2, #12
    815c:	4c40      	ldr	r4, [pc, #256]	; (8260 <__aeabi_dmul+0x4fc>)
    815e:	e668      	b.n	7e32 <__aeabi_dmul+0xce>
    8160:	0003      	movs	r3, r0
    8162:	4654      	mov	r4, sl
    8164:	3b28      	subs	r3, #40	; 0x28
    8166:	409c      	lsls	r4, r3
    8168:	2300      	movs	r3, #0
    816a:	e6b9      	b.n	7ee0 <__aeabi_dmul+0x17c>
    816c:	f000 fbfc 	bl	8968 <__clzsi2>
    8170:	3020      	adds	r0, #32
    8172:	e6a6      	b.n	7ec2 <__aeabi_dmul+0x15e>
    8174:	0003      	movs	r3, r0
    8176:	3b28      	subs	r3, #40	; 0x28
    8178:	409f      	lsls	r7, r3
    817a:	2300      	movs	r3, #0
    817c:	46bb      	mov	fp, r7
    817e:	4699      	mov	r9, r3
    8180:	e68a      	b.n	7e98 <__aeabi_dmul+0x134>
    8182:	f000 fbf1 	bl	8968 <__clzsi2>
    8186:	3020      	adds	r0, #32
    8188:	e674      	b.n	7e74 <__aeabi_dmul+0x110>
    818a:	46b4      	mov	ip, r6
    818c:	e7ad      	b.n	80ea <__aeabi_dmul+0x386>
    818e:	2501      	movs	r5, #1
    8190:	1a2a      	subs	r2, r5, r0
    8192:	2a38      	cmp	r2, #56	; 0x38
    8194:	dd06      	ble.n	81a4 <__aeabi_dmul+0x440>
    8196:	9b01      	ldr	r3, [sp, #4]
    8198:	2400      	movs	r4, #0
    819a:	401d      	ands	r5, r3
    819c:	2300      	movs	r3, #0
    819e:	2200      	movs	r2, #0
    81a0:	4699      	mov	r9, r3
    81a2:	e646      	b.n	7e32 <__aeabi_dmul+0xce>
    81a4:	2a1f      	cmp	r2, #31
    81a6:	dc21      	bgt.n	81ec <__aeabi_dmul+0x488>
    81a8:	2520      	movs	r5, #32
    81aa:	0020      	movs	r0, r4
    81ac:	1aad      	subs	r5, r5, r2
    81ae:	001e      	movs	r6, r3
    81b0:	40ab      	lsls	r3, r5
    81b2:	40a8      	lsls	r0, r5
    81b4:	40d6      	lsrs	r6, r2
    81b6:	1e5d      	subs	r5, r3, #1
    81b8:	41ab      	sbcs	r3, r5
    81ba:	4330      	orrs	r0, r6
    81bc:	4318      	orrs	r0, r3
    81be:	40d4      	lsrs	r4, r2
    81c0:	0743      	lsls	r3, r0, #29
    81c2:	d009      	beq.n	81d8 <__aeabi_dmul+0x474>
    81c4:	230f      	movs	r3, #15
    81c6:	4003      	ands	r3, r0
    81c8:	2b04      	cmp	r3, #4
    81ca:	d005      	beq.n	81d8 <__aeabi_dmul+0x474>
    81cc:	0003      	movs	r3, r0
    81ce:	1d18      	adds	r0, r3, #4
    81d0:	4298      	cmp	r0, r3
    81d2:	419b      	sbcs	r3, r3
    81d4:	425b      	negs	r3, r3
    81d6:	18e4      	adds	r4, r4, r3
    81d8:	0223      	lsls	r3, r4, #8
    81da:	d521      	bpl.n	8220 <__aeabi_dmul+0x4bc>
    81dc:	2501      	movs	r5, #1
    81de:	9b01      	ldr	r3, [sp, #4]
    81e0:	2401      	movs	r4, #1
    81e2:	401d      	ands	r5, r3
    81e4:	2300      	movs	r3, #0
    81e6:	2200      	movs	r2, #0
    81e8:	4699      	mov	r9, r3
    81ea:	e622      	b.n	7e32 <__aeabi_dmul+0xce>
    81ec:	251f      	movs	r5, #31
    81ee:	0021      	movs	r1, r4
    81f0:	426d      	negs	r5, r5
    81f2:	1a28      	subs	r0, r5, r0
    81f4:	40c1      	lsrs	r1, r0
    81f6:	0008      	movs	r0, r1
    81f8:	2a20      	cmp	r2, #32
    81fa:	d01d      	beq.n	8238 <__aeabi_dmul+0x4d4>
    81fc:	355f      	adds	r5, #95	; 0x5f
    81fe:	1aaa      	subs	r2, r5, r2
    8200:	4094      	lsls	r4, r2
    8202:	4323      	orrs	r3, r4
    8204:	1e5c      	subs	r4, r3, #1
    8206:	41a3      	sbcs	r3, r4
    8208:	2507      	movs	r5, #7
    820a:	4303      	orrs	r3, r0
    820c:	401d      	ands	r5, r3
    820e:	2200      	movs	r2, #0
    8210:	2d00      	cmp	r5, #0
    8212:	d009      	beq.n	8228 <__aeabi_dmul+0x4c4>
    8214:	220f      	movs	r2, #15
    8216:	2400      	movs	r4, #0
    8218:	401a      	ands	r2, r3
    821a:	0018      	movs	r0, r3
    821c:	2a04      	cmp	r2, #4
    821e:	d1d6      	bne.n	81ce <__aeabi_dmul+0x46a>
    8220:	0003      	movs	r3, r0
    8222:	0765      	lsls	r5, r4, #29
    8224:	0264      	lsls	r4, r4, #9
    8226:	0b22      	lsrs	r2, r4, #12
    8228:	08db      	lsrs	r3, r3, #3
    822a:	432b      	orrs	r3, r5
    822c:	2501      	movs	r5, #1
    822e:	4699      	mov	r9, r3
    8230:	9b01      	ldr	r3, [sp, #4]
    8232:	2400      	movs	r4, #0
    8234:	401d      	ands	r5, r3
    8236:	e5fc      	b.n	7e32 <__aeabi_dmul+0xce>
    8238:	2400      	movs	r4, #0
    823a:	e7e2      	b.n	8202 <__aeabi_dmul+0x49e>
    823c:	2280      	movs	r2, #128	; 0x80
    823e:	2501      	movs	r5, #1
    8240:	0312      	lsls	r2, r2, #12
    8242:	4322      	orrs	r2, r4
    8244:	9901      	ldr	r1, [sp, #4]
    8246:	0312      	lsls	r2, r2, #12
    8248:	0b12      	lsrs	r2, r2, #12
    824a:	400d      	ands	r5, r1
    824c:	4699      	mov	r9, r3
    824e:	4c04      	ldr	r4, [pc, #16]	; (8260 <__aeabi_dmul+0x4fc>)
    8250:	e5ef      	b.n	7e32 <__aeabi_dmul+0xce>
    8252:	46c0      	nop			; (mov r8, r8)
    8254:	000003ff 	.word	0x000003ff
    8258:	feffffff 	.word	0xfeffffff
    825c:	000007fe 	.word	0x000007fe
    8260:	000007ff 	.word	0x000007ff

00008264 <__aeabi_dsub>:
    8264:	b5f0      	push	{r4, r5, r6, r7, lr}
    8266:	4646      	mov	r6, r8
    8268:	46d6      	mov	lr, sl
    826a:	464f      	mov	r7, r9
    826c:	030c      	lsls	r4, r1, #12
    826e:	b5c0      	push	{r6, r7, lr}
    8270:	0fcd      	lsrs	r5, r1, #31
    8272:	004e      	lsls	r6, r1, #1
    8274:	0a61      	lsrs	r1, r4, #9
    8276:	0f44      	lsrs	r4, r0, #29
    8278:	430c      	orrs	r4, r1
    827a:	00c1      	lsls	r1, r0, #3
    827c:	0058      	lsls	r0, r3, #1
    827e:	0d40      	lsrs	r0, r0, #21
    8280:	4684      	mov	ip, r0
    8282:	468a      	mov	sl, r1
    8284:	000f      	movs	r7, r1
    8286:	0319      	lsls	r1, r3, #12
    8288:	0f50      	lsrs	r0, r2, #29
    828a:	0a49      	lsrs	r1, r1, #9
    828c:	4301      	orrs	r1, r0
    828e:	48c6      	ldr	r0, [pc, #792]	; (85a8 <__aeabi_dsub+0x344>)
    8290:	0d76      	lsrs	r6, r6, #21
    8292:	46a8      	mov	r8, r5
    8294:	0fdb      	lsrs	r3, r3, #31
    8296:	00d2      	lsls	r2, r2, #3
    8298:	4584      	cmp	ip, r0
    829a:	d100      	bne.n	829e <__aeabi_dsub+0x3a>
    829c:	e0d8      	b.n	8450 <__aeabi_dsub+0x1ec>
    829e:	2001      	movs	r0, #1
    82a0:	4043      	eors	r3, r0
    82a2:	42ab      	cmp	r3, r5
    82a4:	d100      	bne.n	82a8 <__aeabi_dsub+0x44>
    82a6:	e0a6      	b.n	83f6 <__aeabi_dsub+0x192>
    82a8:	4660      	mov	r0, ip
    82aa:	1a35      	subs	r5, r6, r0
    82ac:	2d00      	cmp	r5, #0
    82ae:	dc00      	bgt.n	82b2 <__aeabi_dsub+0x4e>
    82b0:	e105      	b.n	84be <__aeabi_dsub+0x25a>
    82b2:	2800      	cmp	r0, #0
    82b4:	d110      	bne.n	82d8 <__aeabi_dsub+0x74>
    82b6:	000b      	movs	r3, r1
    82b8:	4313      	orrs	r3, r2
    82ba:	d100      	bne.n	82be <__aeabi_dsub+0x5a>
    82bc:	e0d7      	b.n	846e <__aeabi_dsub+0x20a>
    82be:	1e6b      	subs	r3, r5, #1
    82c0:	2b00      	cmp	r3, #0
    82c2:	d000      	beq.n	82c6 <__aeabi_dsub+0x62>
    82c4:	e14b      	b.n	855e <__aeabi_dsub+0x2fa>
    82c6:	4653      	mov	r3, sl
    82c8:	1a9f      	subs	r7, r3, r2
    82ca:	45ba      	cmp	sl, r7
    82cc:	4180      	sbcs	r0, r0
    82ce:	1a64      	subs	r4, r4, r1
    82d0:	4240      	negs	r0, r0
    82d2:	1a24      	subs	r4, r4, r0
    82d4:	2601      	movs	r6, #1
    82d6:	e01e      	b.n	8316 <__aeabi_dsub+0xb2>
    82d8:	4bb3      	ldr	r3, [pc, #716]	; (85a8 <__aeabi_dsub+0x344>)
    82da:	429e      	cmp	r6, r3
    82dc:	d048      	beq.n	8370 <__aeabi_dsub+0x10c>
    82de:	2380      	movs	r3, #128	; 0x80
    82e0:	041b      	lsls	r3, r3, #16
    82e2:	4319      	orrs	r1, r3
    82e4:	2d38      	cmp	r5, #56	; 0x38
    82e6:	dd00      	ble.n	82ea <__aeabi_dsub+0x86>
    82e8:	e119      	b.n	851e <__aeabi_dsub+0x2ba>
    82ea:	2d1f      	cmp	r5, #31
    82ec:	dd00      	ble.n	82f0 <__aeabi_dsub+0x8c>
    82ee:	e14c      	b.n	858a <__aeabi_dsub+0x326>
    82f0:	2320      	movs	r3, #32
    82f2:	000f      	movs	r7, r1
    82f4:	1b5b      	subs	r3, r3, r5
    82f6:	0010      	movs	r0, r2
    82f8:	409a      	lsls	r2, r3
    82fa:	409f      	lsls	r7, r3
    82fc:	40e8      	lsrs	r0, r5
    82fe:	1e53      	subs	r3, r2, #1
    8300:	419a      	sbcs	r2, r3
    8302:	40e9      	lsrs	r1, r5
    8304:	4307      	orrs	r7, r0
    8306:	4317      	orrs	r7, r2
    8308:	4653      	mov	r3, sl
    830a:	1bdf      	subs	r7, r3, r7
    830c:	1a61      	subs	r1, r4, r1
    830e:	45ba      	cmp	sl, r7
    8310:	41a4      	sbcs	r4, r4
    8312:	4264      	negs	r4, r4
    8314:	1b0c      	subs	r4, r1, r4
    8316:	0223      	lsls	r3, r4, #8
    8318:	d400      	bmi.n	831c <__aeabi_dsub+0xb8>
    831a:	e0c5      	b.n	84a8 <__aeabi_dsub+0x244>
    831c:	0264      	lsls	r4, r4, #9
    831e:	0a65      	lsrs	r5, r4, #9
    8320:	2d00      	cmp	r5, #0
    8322:	d100      	bne.n	8326 <__aeabi_dsub+0xc2>
    8324:	e0f6      	b.n	8514 <__aeabi_dsub+0x2b0>
    8326:	0028      	movs	r0, r5
    8328:	f000 fb1e 	bl	8968 <__clzsi2>
    832c:	0003      	movs	r3, r0
    832e:	3b08      	subs	r3, #8
    8330:	2b1f      	cmp	r3, #31
    8332:	dd00      	ble.n	8336 <__aeabi_dsub+0xd2>
    8334:	e0e9      	b.n	850a <__aeabi_dsub+0x2a6>
    8336:	2220      	movs	r2, #32
    8338:	003c      	movs	r4, r7
    833a:	1ad2      	subs	r2, r2, r3
    833c:	409d      	lsls	r5, r3
    833e:	40d4      	lsrs	r4, r2
    8340:	409f      	lsls	r7, r3
    8342:	4325      	orrs	r5, r4
    8344:	429e      	cmp	r6, r3
    8346:	dd00      	ble.n	834a <__aeabi_dsub+0xe6>
    8348:	e0db      	b.n	8502 <__aeabi_dsub+0x29e>
    834a:	1b9e      	subs	r6, r3, r6
    834c:	1c73      	adds	r3, r6, #1
    834e:	2b1f      	cmp	r3, #31
    8350:	dd00      	ble.n	8354 <__aeabi_dsub+0xf0>
    8352:	e10a      	b.n	856a <__aeabi_dsub+0x306>
    8354:	2220      	movs	r2, #32
    8356:	0038      	movs	r0, r7
    8358:	1ad2      	subs	r2, r2, r3
    835a:	0029      	movs	r1, r5
    835c:	4097      	lsls	r7, r2
    835e:	002c      	movs	r4, r5
    8360:	4091      	lsls	r1, r2
    8362:	40d8      	lsrs	r0, r3
    8364:	1e7a      	subs	r2, r7, #1
    8366:	4197      	sbcs	r7, r2
    8368:	40dc      	lsrs	r4, r3
    836a:	2600      	movs	r6, #0
    836c:	4301      	orrs	r1, r0
    836e:	430f      	orrs	r7, r1
    8370:	077b      	lsls	r3, r7, #29
    8372:	d009      	beq.n	8388 <__aeabi_dsub+0x124>
    8374:	230f      	movs	r3, #15
    8376:	403b      	ands	r3, r7
    8378:	2b04      	cmp	r3, #4
    837a:	d005      	beq.n	8388 <__aeabi_dsub+0x124>
    837c:	1d3b      	adds	r3, r7, #4
    837e:	42bb      	cmp	r3, r7
    8380:	41bf      	sbcs	r7, r7
    8382:	427f      	negs	r7, r7
    8384:	19e4      	adds	r4, r4, r7
    8386:	001f      	movs	r7, r3
    8388:	0223      	lsls	r3, r4, #8
    838a:	d525      	bpl.n	83d8 <__aeabi_dsub+0x174>
    838c:	4b86      	ldr	r3, [pc, #536]	; (85a8 <__aeabi_dsub+0x344>)
    838e:	3601      	adds	r6, #1
    8390:	429e      	cmp	r6, r3
    8392:	d100      	bne.n	8396 <__aeabi_dsub+0x132>
    8394:	e0af      	b.n	84f6 <__aeabi_dsub+0x292>
    8396:	4b85      	ldr	r3, [pc, #532]	; (85ac <__aeabi_dsub+0x348>)
    8398:	2501      	movs	r5, #1
    839a:	401c      	ands	r4, r3
    839c:	4643      	mov	r3, r8
    839e:	0762      	lsls	r2, r4, #29
    83a0:	08ff      	lsrs	r7, r7, #3
    83a2:	0264      	lsls	r4, r4, #9
    83a4:	0576      	lsls	r6, r6, #21
    83a6:	4317      	orrs	r7, r2
    83a8:	0b24      	lsrs	r4, r4, #12
    83aa:	0d76      	lsrs	r6, r6, #21
    83ac:	401d      	ands	r5, r3
    83ae:	2100      	movs	r1, #0
    83b0:	0324      	lsls	r4, r4, #12
    83b2:	0b23      	lsrs	r3, r4, #12
    83b4:	0d0c      	lsrs	r4, r1, #20
    83b6:	4a7e      	ldr	r2, [pc, #504]	; (85b0 <__aeabi_dsub+0x34c>)
    83b8:	0524      	lsls	r4, r4, #20
    83ba:	431c      	orrs	r4, r3
    83bc:	4014      	ands	r4, r2
    83be:	0533      	lsls	r3, r6, #20
    83c0:	4323      	orrs	r3, r4
    83c2:	005b      	lsls	r3, r3, #1
    83c4:	07ed      	lsls	r5, r5, #31
    83c6:	085b      	lsrs	r3, r3, #1
    83c8:	432b      	orrs	r3, r5
    83ca:	0038      	movs	r0, r7
    83cc:	0019      	movs	r1, r3
    83ce:	bc1c      	pop	{r2, r3, r4}
    83d0:	4690      	mov	r8, r2
    83d2:	4699      	mov	r9, r3
    83d4:	46a2      	mov	sl, r4
    83d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83d8:	2501      	movs	r5, #1
    83da:	4643      	mov	r3, r8
    83dc:	0762      	lsls	r2, r4, #29
    83de:	08ff      	lsrs	r7, r7, #3
    83e0:	4317      	orrs	r7, r2
    83e2:	08e4      	lsrs	r4, r4, #3
    83e4:	401d      	ands	r5, r3
    83e6:	4b70      	ldr	r3, [pc, #448]	; (85a8 <__aeabi_dsub+0x344>)
    83e8:	429e      	cmp	r6, r3
    83ea:	d036      	beq.n	845a <__aeabi_dsub+0x1f6>
    83ec:	0324      	lsls	r4, r4, #12
    83ee:	0576      	lsls	r6, r6, #21
    83f0:	0b24      	lsrs	r4, r4, #12
    83f2:	0d76      	lsrs	r6, r6, #21
    83f4:	e7db      	b.n	83ae <__aeabi_dsub+0x14a>
    83f6:	4663      	mov	r3, ip
    83f8:	1af3      	subs	r3, r6, r3
    83fa:	2b00      	cmp	r3, #0
    83fc:	dc00      	bgt.n	8400 <__aeabi_dsub+0x19c>
    83fe:	e094      	b.n	852a <__aeabi_dsub+0x2c6>
    8400:	4660      	mov	r0, ip
    8402:	2800      	cmp	r0, #0
    8404:	d035      	beq.n	8472 <__aeabi_dsub+0x20e>
    8406:	4868      	ldr	r0, [pc, #416]	; (85a8 <__aeabi_dsub+0x344>)
    8408:	4286      	cmp	r6, r0
    840a:	d0b1      	beq.n	8370 <__aeabi_dsub+0x10c>
    840c:	2780      	movs	r7, #128	; 0x80
    840e:	043f      	lsls	r7, r7, #16
    8410:	4339      	orrs	r1, r7
    8412:	2b38      	cmp	r3, #56	; 0x38
    8414:	dc00      	bgt.n	8418 <__aeabi_dsub+0x1b4>
    8416:	e0fd      	b.n	8614 <__aeabi_dsub+0x3b0>
    8418:	430a      	orrs	r2, r1
    841a:	0017      	movs	r7, r2
    841c:	2100      	movs	r1, #0
    841e:	1e7a      	subs	r2, r7, #1
    8420:	4197      	sbcs	r7, r2
    8422:	4457      	add	r7, sl
    8424:	4557      	cmp	r7, sl
    8426:	4180      	sbcs	r0, r0
    8428:	1909      	adds	r1, r1, r4
    842a:	4244      	negs	r4, r0
    842c:	190c      	adds	r4, r1, r4
    842e:	0223      	lsls	r3, r4, #8
    8430:	d53a      	bpl.n	84a8 <__aeabi_dsub+0x244>
    8432:	4b5d      	ldr	r3, [pc, #372]	; (85a8 <__aeabi_dsub+0x344>)
    8434:	3601      	adds	r6, #1
    8436:	429e      	cmp	r6, r3
    8438:	d100      	bne.n	843c <__aeabi_dsub+0x1d8>
    843a:	e14b      	b.n	86d4 <__aeabi_dsub+0x470>
    843c:	2201      	movs	r2, #1
    843e:	4b5b      	ldr	r3, [pc, #364]	; (85ac <__aeabi_dsub+0x348>)
    8440:	401c      	ands	r4, r3
    8442:	087b      	lsrs	r3, r7, #1
    8444:	4017      	ands	r7, r2
    8446:	431f      	orrs	r7, r3
    8448:	07e2      	lsls	r2, r4, #31
    844a:	4317      	orrs	r7, r2
    844c:	0864      	lsrs	r4, r4, #1
    844e:	e78f      	b.n	8370 <__aeabi_dsub+0x10c>
    8450:	0008      	movs	r0, r1
    8452:	4310      	orrs	r0, r2
    8454:	d000      	beq.n	8458 <__aeabi_dsub+0x1f4>
    8456:	e724      	b.n	82a2 <__aeabi_dsub+0x3e>
    8458:	e721      	b.n	829e <__aeabi_dsub+0x3a>
    845a:	0023      	movs	r3, r4
    845c:	433b      	orrs	r3, r7
    845e:	d100      	bne.n	8462 <__aeabi_dsub+0x1fe>
    8460:	e1b9      	b.n	87d6 <__aeabi_dsub+0x572>
    8462:	2280      	movs	r2, #128	; 0x80
    8464:	0312      	lsls	r2, r2, #12
    8466:	4314      	orrs	r4, r2
    8468:	0324      	lsls	r4, r4, #12
    846a:	0b24      	lsrs	r4, r4, #12
    846c:	e79f      	b.n	83ae <__aeabi_dsub+0x14a>
    846e:	002e      	movs	r6, r5
    8470:	e77e      	b.n	8370 <__aeabi_dsub+0x10c>
    8472:	0008      	movs	r0, r1
    8474:	4310      	orrs	r0, r2
    8476:	d100      	bne.n	847a <__aeabi_dsub+0x216>
    8478:	e0ca      	b.n	8610 <__aeabi_dsub+0x3ac>
    847a:	1e58      	subs	r0, r3, #1
    847c:	4684      	mov	ip, r0
    847e:	2800      	cmp	r0, #0
    8480:	d000      	beq.n	8484 <__aeabi_dsub+0x220>
    8482:	e0e7      	b.n	8654 <__aeabi_dsub+0x3f0>
    8484:	4452      	add	r2, sl
    8486:	4552      	cmp	r2, sl
    8488:	4180      	sbcs	r0, r0
    848a:	1864      	adds	r4, r4, r1
    848c:	4240      	negs	r0, r0
    848e:	1824      	adds	r4, r4, r0
    8490:	0017      	movs	r7, r2
    8492:	2601      	movs	r6, #1
    8494:	0223      	lsls	r3, r4, #8
    8496:	d507      	bpl.n	84a8 <__aeabi_dsub+0x244>
    8498:	2602      	movs	r6, #2
    849a:	e7cf      	b.n	843c <__aeabi_dsub+0x1d8>
    849c:	4664      	mov	r4, ip
    849e:	432c      	orrs	r4, r5
    84a0:	d100      	bne.n	84a4 <__aeabi_dsub+0x240>
    84a2:	e1b3      	b.n	880c <__aeabi_dsub+0x5a8>
    84a4:	002c      	movs	r4, r5
    84a6:	4667      	mov	r7, ip
    84a8:	077b      	lsls	r3, r7, #29
    84aa:	d000      	beq.n	84ae <__aeabi_dsub+0x24a>
    84ac:	e762      	b.n	8374 <__aeabi_dsub+0x110>
    84ae:	0763      	lsls	r3, r4, #29
    84b0:	08ff      	lsrs	r7, r7, #3
    84b2:	431f      	orrs	r7, r3
    84b4:	2501      	movs	r5, #1
    84b6:	4643      	mov	r3, r8
    84b8:	08e4      	lsrs	r4, r4, #3
    84ba:	401d      	ands	r5, r3
    84bc:	e793      	b.n	83e6 <__aeabi_dsub+0x182>
    84be:	2d00      	cmp	r5, #0
    84c0:	d178      	bne.n	85b4 <__aeabi_dsub+0x350>
    84c2:	1c75      	adds	r5, r6, #1
    84c4:	056d      	lsls	r5, r5, #21
    84c6:	0d6d      	lsrs	r5, r5, #21
    84c8:	2d01      	cmp	r5, #1
    84ca:	dc00      	bgt.n	84ce <__aeabi_dsub+0x26a>
    84cc:	e0f2      	b.n	86b4 <__aeabi_dsub+0x450>
    84ce:	4650      	mov	r0, sl
    84d0:	1a80      	subs	r0, r0, r2
    84d2:	4582      	cmp	sl, r0
    84d4:	41bf      	sbcs	r7, r7
    84d6:	1a65      	subs	r5, r4, r1
    84d8:	427f      	negs	r7, r7
    84da:	1bed      	subs	r5, r5, r7
    84dc:	4684      	mov	ip, r0
    84de:	0228      	lsls	r0, r5, #8
    84e0:	d400      	bmi.n	84e4 <__aeabi_dsub+0x280>
    84e2:	e08c      	b.n	85fe <__aeabi_dsub+0x39a>
    84e4:	4650      	mov	r0, sl
    84e6:	1a17      	subs	r7, r2, r0
    84e8:	42ba      	cmp	r2, r7
    84ea:	4192      	sbcs	r2, r2
    84ec:	1b0c      	subs	r4, r1, r4
    84ee:	4255      	negs	r5, r2
    84f0:	1b65      	subs	r5, r4, r5
    84f2:	4698      	mov	r8, r3
    84f4:	e714      	b.n	8320 <__aeabi_dsub+0xbc>
    84f6:	2501      	movs	r5, #1
    84f8:	4643      	mov	r3, r8
    84fa:	2400      	movs	r4, #0
    84fc:	401d      	ands	r5, r3
    84fe:	2700      	movs	r7, #0
    8500:	e755      	b.n	83ae <__aeabi_dsub+0x14a>
    8502:	4c2a      	ldr	r4, [pc, #168]	; (85ac <__aeabi_dsub+0x348>)
    8504:	1af6      	subs	r6, r6, r3
    8506:	402c      	ands	r4, r5
    8508:	e732      	b.n	8370 <__aeabi_dsub+0x10c>
    850a:	003d      	movs	r5, r7
    850c:	3828      	subs	r0, #40	; 0x28
    850e:	4085      	lsls	r5, r0
    8510:	2700      	movs	r7, #0
    8512:	e717      	b.n	8344 <__aeabi_dsub+0xe0>
    8514:	0038      	movs	r0, r7
    8516:	f000 fa27 	bl	8968 <__clzsi2>
    851a:	3020      	adds	r0, #32
    851c:	e706      	b.n	832c <__aeabi_dsub+0xc8>
    851e:	430a      	orrs	r2, r1
    8520:	0017      	movs	r7, r2
    8522:	2100      	movs	r1, #0
    8524:	1e7a      	subs	r2, r7, #1
    8526:	4197      	sbcs	r7, r2
    8528:	e6ee      	b.n	8308 <__aeabi_dsub+0xa4>
    852a:	2b00      	cmp	r3, #0
    852c:	d000      	beq.n	8530 <__aeabi_dsub+0x2cc>
    852e:	e0e5      	b.n	86fc <__aeabi_dsub+0x498>
    8530:	1c73      	adds	r3, r6, #1
    8532:	469c      	mov	ip, r3
    8534:	055b      	lsls	r3, r3, #21
    8536:	0d5b      	lsrs	r3, r3, #21
    8538:	2b01      	cmp	r3, #1
    853a:	dc00      	bgt.n	853e <__aeabi_dsub+0x2da>
    853c:	e09f      	b.n	867e <__aeabi_dsub+0x41a>
    853e:	4b1a      	ldr	r3, [pc, #104]	; (85a8 <__aeabi_dsub+0x344>)
    8540:	459c      	cmp	ip, r3
    8542:	d100      	bne.n	8546 <__aeabi_dsub+0x2e2>
    8544:	e0c5      	b.n	86d2 <__aeabi_dsub+0x46e>
    8546:	4452      	add	r2, sl
    8548:	4552      	cmp	r2, sl
    854a:	4180      	sbcs	r0, r0
    854c:	1864      	adds	r4, r4, r1
    854e:	4240      	negs	r0, r0
    8550:	1824      	adds	r4, r4, r0
    8552:	07e7      	lsls	r7, r4, #31
    8554:	0852      	lsrs	r2, r2, #1
    8556:	4317      	orrs	r7, r2
    8558:	0864      	lsrs	r4, r4, #1
    855a:	4666      	mov	r6, ip
    855c:	e708      	b.n	8370 <__aeabi_dsub+0x10c>
    855e:	4812      	ldr	r0, [pc, #72]	; (85a8 <__aeabi_dsub+0x344>)
    8560:	4285      	cmp	r5, r0
    8562:	d100      	bne.n	8566 <__aeabi_dsub+0x302>
    8564:	e085      	b.n	8672 <__aeabi_dsub+0x40e>
    8566:	001d      	movs	r5, r3
    8568:	e6bc      	b.n	82e4 <__aeabi_dsub+0x80>
    856a:	0029      	movs	r1, r5
    856c:	3e1f      	subs	r6, #31
    856e:	40f1      	lsrs	r1, r6
    8570:	2b20      	cmp	r3, #32
    8572:	d100      	bne.n	8576 <__aeabi_dsub+0x312>
    8574:	e07f      	b.n	8676 <__aeabi_dsub+0x412>
    8576:	2240      	movs	r2, #64	; 0x40
    8578:	1ad3      	subs	r3, r2, r3
    857a:	409d      	lsls	r5, r3
    857c:	432f      	orrs	r7, r5
    857e:	1e7d      	subs	r5, r7, #1
    8580:	41af      	sbcs	r7, r5
    8582:	2400      	movs	r4, #0
    8584:	430f      	orrs	r7, r1
    8586:	2600      	movs	r6, #0
    8588:	e78e      	b.n	84a8 <__aeabi_dsub+0x244>
    858a:	002b      	movs	r3, r5
    858c:	000f      	movs	r7, r1
    858e:	3b20      	subs	r3, #32
    8590:	40df      	lsrs	r7, r3
    8592:	2d20      	cmp	r5, #32
    8594:	d071      	beq.n	867a <__aeabi_dsub+0x416>
    8596:	2340      	movs	r3, #64	; 0x40
    8598:	1b5d      	subs	r5, r3, r5
    859a:	40a9      	lsls	r1, r5
    859c:	430a      	orrs	r2, r1
    859e:	1e51      	subs	r1, r2, #1
    85a0:	418a      	sbcs	r2, r1
    85a2:	2100      	movs	r1, #0
    85a4:	4317      	orrs	r7, r2
    85a6:	e6af      	b.n	8308 <__aeabi_dsub+0xa4>
    85a8:	000007ff 	.word	0x000007ff
    85ac:	ff7fffff 	.word	0xff7fffff
    85b0:	800fffff 	.word	0x800fffff
    85b4:	2e00      	cmp	r6, #0
    85b6:	d03e      	beq.n	8636 <__aeabi_dsub+0x3d2>
    85b8:	4eb3      	ldr	r6, [pc, #716]	; (8888 <__aeabi_dsub+0x624>)
    85ba:	45b4      	cmp	ip, r6
    85bc:	d045      	beq.n	864a <__aeabi_dsub+0x3e6>
    85be:	2680      	movs	r6, #128	; 0x80
    85c0:	0436      	lsls	r6, r6, #16
    85c2:	426d      	negs	r5, r5
    85c4:	4334      	orrs	r4, r6
    85c6:	2d38      	cmp	r5, #56	; 0x38
    85c8:	dd00      	ble.n	85cc <__aeabi_dsub+0x368>
    85ca:	e0a8      	b.n	871e <__aeabi_dsub+0x4ba>
    85cc:	2d1f      	cmp	r5, #31
    85ce:	dd00      	ble.n	85d2 <__aeabi_dsub+0x36e>
    85d0:	e11f      	b.n	8812 <__aeabi_dsub+0x5ae>
    85d2:	2620      	movs	r6, #32
    85d4:	0027      	movs	r7, r4
    85d6:	4650      	mov	r0, sl
    85d8:	1b76      	subs	r6, r6, r5
    85da:	40b7      	lsls	r7, r6
    85dc:	40e8      	lsrs	r0, r5
    85de:	4307      	orrs	r7, r0
    85e0:	4650      	mov	r0, sl
    85e2:	40b0      	lsls	r0, r6
    85e4:	1e46      	subs	r6, r0, #1
    85e6:	41b0      	sbcs	r0, r6
    85e8:	40ec      	lsrs	r4, r5
    85ea:	4338      	orrs	r0, r7
    85ec:	1a17      	subs	r7, r2, r0
    85ee:	42ba      	cmp	r2, r7
    85f0:	4192      	sbcs	r2, r2
    85f2:	1b0c      	subs	r4, r1, r4
    85f4:	4252      	negs	r2, r2
    85f6:	1aa4      	subs	r4, r4, r2
    85f8:	4666      	mov	r6, ip
    85fa:	4698      	mov	r8, r3
    85fc:	e68b      	b.n	8316 <__aeabi_dsub+0xb2>
    85fe:	4664      	mov	r4, ip
    8600:	4667      	mov	r7, ip
    8602:	432c      	orrs	r4, r5
    8604:	d000      	beq.n	8608 <__aeabi_dsub+0x3a4>
    8606:	e68b      	b.n	8320 <__aeabi_dsub+0xbc>
    8608:	2500      	movs	r5, #0
    860a:	2600      	movs	r6, #0
    860c:	2700      	movs	r7, #0
    860e:	e6ea      	b.n	83e6 <__aeabi_dsub+0x182>
    8610:	001e      	movs	r6, r3
    8612:	e6ad      	b.n	8370 <__aeabi_dsub+0x10c>
    8614:	2b1f      	cmp	r3, #31
    8616:	dc60      	bgt.n	86da <__aeabi_dsub+0x476>
    8618:	2720      	movs	r7, #32
    861a:	1af8      	subs	r0, r7, r3
    861c:	000f      	movs	r7, r1
    861e:	4684      	mov	ip, r0
    8620:	4087      	lsls	r7, r0
    8622:	0010      	movs	r0, r2
    8624:	40d8      	lsrs	r0, r3
    8626:	4307      	orrs	r7, r0
    8628:	4660      	mov	r0, ip
    862a:	4082      	lsls	r2, r0
    862c:	1e50      	subs	r0, r2, #1
    862e:	4182      	sbcs	r2, r0
    8630:	40d9      	lsrs	r1, r3
    8632:	4317      	orrs	r7, r2
    8634:	e6f5      	b.n	8422 <__aeabi_dsub+0x1be>
    8636:	0026      	movs	r6, r4
    8638:	4650      	mov	r0, sl
    863a:	4306      	orrs	r6, r0
    863c:	d005      	beq.n	864a <__aeabi_dsub+0x3e6>
    863e:	43ed      	mvns	r5, r5
    8640:	2d00      	cmp	r5, #0
    8642:	d0d3      	beq.n	85ec <__aeabi_dsub+0x388>
    8644:	4e90      	ldr	r6, [pc, #576]	; (8888 <__aeabi_dsub+0x624>)
    8646:	45b4      	cmp	ip, r6
    8648:	d1bd      	bne.n	85c6 <__aeabi_dsub+0x362>
    864a:	000c      	movs	r4, r1
    864c:	0017      	movs	r7, r2
    864e:	4666      	mov	r6, ip
    8650:	4698      	mov	r8, r3
    8652:	e68d      	b.n	8370 <__aeabi_dsub+0x10c>
    8654:	488c      	ldr	r0, [pc, #560]	; (8888 <__aeabi_dsub+0x624>)
    8656:	4283      	cmp	r3, r0
    8658:	d00b      	beq.n	8672 <__aeabi_dsub+0x40e>
    865a:	4663      	mov	r3, ip
    865c:	e6d9      	b.n	8412 <__aeabi_dsub+0x1ae>
    865e:	2d00      	cmp	r5, #0
    8660:	d000      	beq.n	8664 <__aeabi_dsub+0x400>
    8662:	e096      	b.n	8792 <__aeabi_dsub+0x52e>
    8664:	0008      	movs	r0, r1
    8666:	4310      	orrs	r0, r2
    8668:	d100      	bne.n	866c <__aeabi_dsub+0x408>
    866a:	e0e2      	b.n	8832 <__aeabi_dsub+0x5ce>
    866c:	000c      	movs	r4, r1
    866e:	0017      	movs	r7, r2
    8670:	4698      	mov	r8, r3
    8672:	4e85      	ldr	r6, [pc, #532]	; (8888 <__aeabi_dsub+0x624>)
    8674:	e67c      	b.n	8370 <__aeabi_dsub+0x10c>
    8676:	2500      	movs	r5, #0
    8678:	e780      	b.n	857c <__aeabi_dsub+0x318>
    867a:	2100      	movs	r1, #0
    867c:	e78e      	b.n	859c <__aeabi_dsub+0x338>
    867e:	0023      	movs	r3, r4
    8680:	4650      	mov	r0, sl
    8682:	4303      	orrs	r3, r0
    8684:	2e00      	cmp	r6, #0
    8686:	d000      	beq.n	868a <__aeabi_dsub+0x426>
    8688:	e0a8      	b.n	87dc <__aeabi_dsub+0x578>
    868a:	2b00      	cmp	r3, #0
    868c:	d100      	bne.n	8690 <__aeabi_dsub+0x42c>
    868e:	e0de      	b.n	884e <__aeabi_dsub+0x5ea>
    8690:	000b      	movs	r3, r1
    8692:	4313      	orrs	r3, r2
    8694:	d100      	bne.n	8698 <__aeabi_dsub+0x434>
    8696:	e66b      	b.n	8370 <__aeabi_dsub+0x10c>
    8698:	4452      	add	r2, sl
    869a:	4552      	cmp	r2, sl
    869c:	4180      	sbcs	r0, r0
    869e:	1864      	adds	r4, r4, r1
    86a0:	4240      	negs	r0, r0
    86a2:	1824      	adds	r4, r4, r0
    86a4:	0017      	movs	r7, r2
    86a6:	0223      	lsls	r3, r4, #8
    86a8:	d400      	bmi.n	86ac <__aeabi_dsub+0x448>
    86aa:	e6fd      	b.n	84a8 <__aeabi_dsub+0x244>
    86ac:	4b77      	ldr	r3, [pc, #476]	; (888c <__aeabi_dsub+0x628>)
    86ae:	4666      	mov	r6, ip
    86b0:	401c      	ands	r4, r3
    86b2:	e65d      	b.n	8370 <__aeabi_dsub+0x10c>
    86b4:	0025      	movs	r5, r4
    86b6:	4650      	mov	r0, sl
    86b8:	4305      	orrs	r5, r0
    86ba:	2e00      	cmp	r6, #0
    86bc:	d1cf      	bne.n	865e <__aeabi_dsub+0x3fa>
    86be:	2d00      	cmp	r5, #0
    86c0:	d14f      	bne.n	8762 <__aeabi_dsub+0x4fe>
    86c2:	000c      	movs	r4, r1
    86c4:	4314      	orrs	r4, r2
    86c6:	d100      	bne.n	86ca <__aeabi_dsub+0x466>
    86c8:	e0a0      	b.n	880c <__aeabi_dsub+0x5a8>
    86ca:	000c      	movs	r4, r1
    86cc:	0017      	movs	r7, r2
    86ce:	4698      	mov	r8, r3
    86d0:	e64e      	b.n	8370 <__aeabi_dsub+0x10c>
    86d2:	4666      	mov	r6, ip
    86d4:	2400      	movs	r4, #0
    86d6:	2700      	movs	r7, #0
    86d8:	e685      	b.n	83e6 <__aeabi_dsub+0x182>
    86da:	001f      	movs	r7, r3
    86dc:	0008      	movs	r0, r1
    86de:	3f20      	subs	r7, #32
    86e0:	40f8      	lsrs	r0, r7
    86e2:	0007      	movs	r7, r0
    86e4:	2b20      	cmp	r3, #32
    86e6:	d100      	bne.n	86ea <__aeabi_dsub+0x486>
    86e8:	e08e      	b.n	8808 <__aeabi_dsub+0x5a4>
    86ea:	2040      	movs	r0, #64	; 0x40
    86ec:	1ac3      	subs	r3, r0, r3
    86ee:	4099      	lsls	r1, r3
    86f0:	430a      	orrs	r2, r1
    86f2:	1e51      	subs	r1, r2, #1
    86f4:	418a      	sbcs	r2, r1
    86f6:	2100      	movs	r1, #0
    86f8:	4317      	orrs	r7, r2
    86fa:	e692      	b.n	8422 <__aeabi_dsub+0x1be>
    86fc:	2e00      	cmp	r6, #0
    86fe:	d114      	bne.n	872a <__aeabi_dsub+0x4c6>
    8700:	0026      	movs	r6, r4
    8702:	4650      	mov	r0, sl
    8704:	4306      	orrs	r6, r0
    8706:	d062      	beq.n	87ce <__aeabi_dsub+0x56a>
    8708:	43db      	mvns	r3, r3
    870a:	2b00      	cmp	r3, #0
    870c:	d15c      	bne.n	87c8 <__aeabi_dsub+0x564>
    870e:	1887      	adds	r7, r0, r2
    8710:	4297      	cmp	r7, r2
    8712:	4192      	sbcs	r2, r2
    8714:	1864      	adds	r4, r4, r1
    8716:	4252      	negs	r2, r2
    8718:	18a4      	adds	r4, r4, r2
    871a:	4666      	mov	r6, ip
    871c:	e687      	b.n	842e <__aeabi_dsub+0x1ca>
    871e:	4650      	mov	r0, sl
    8720:	4320      	orrs	r0, r4
    8722:	1e44      	subs	r4, r0, #1
    8724:	41a0      	sbcs	r0, r4
    8726:	2400      	movs	r4, #0
    8728:	e760      	b.n	85ec <__aeabi_dsub+0x388>
    872a:	4e57      	ldr	r6, [pc, #348]	; (8888 <__aeabi_dsub+0x624>)
    872c:	45b4      	cmp	ip, r6
    872e:	d04e      	beq.n	87ce <__aeabi_dsub+0x56a>
    8730:	2680      	movs	r6, #128	; 0x80
    8732:	0436      	lsls	r6, r6, #16
    8734:	425b      	negs	r3, r3
    8736:	4334      	orrs	r4, r6
    8738:	2b38      	cmp	r3, #56	; 0x38
    873a:	dd00      	ble.n	873e <__aeabi_dsub+0x4da>
    873c:	e07f      	b.n	883e <__aeabi_dsub+0x5da>
    873e:	2b1f      	cmp	r3, #31
    8740:	dd00      	ble.n	8744 <__aeabi_dsub+0x4e0>
    8742:	e08b      	b.n	885c <__aeabi_dsub+0x5f8>
    8744:	2620      	movs	r6, #32
    8746:	0027      	movs	r7, r4
    8748:	4650      	mov	r0, sl
    874a:	1af6      	subs	r6, r6, r3
    874c:	40b7      	lsls	r7, r6
    874e:	40d8      	lsrs	r0, r3
    8750:	4307      	orrs	r7, r0
    8752:	4650      	mov	r0, sl
    8754:	40b0      	lsls	r0, r6
    8756:	1e46      	subs	r6, r0, #1
    8758:	41b0      	sbcs	r0, r6
    875a:	4307      	orrs	r7, r0
    875c:	40dc      	lsrs	r4, r3
    875e:	18bf      	adds	r7, r7, r2
    8760:	e7d6      	b.n	8710 <__aeabi_dsub+0x4ac>
    8762:	000d      	movs	r5, r1
    8764:	4315      	orrs	r5, r2
    8766:	d100      	bne.n	876a <__aeabi_dsub+0x506>
    8768:	e602      	b.n	8370 <__aeabi_dsub+0x10c>
    876a:	4650      	mov	r0, sl
    876c:	1a80      	subs	r0, r0, r2
    876e:	4582      	cmp	sl, r0
    8770:	41bf      	sbcs	r7, r7
    8772:	1a65      	subs	r5, r4, r1
    8774:	427f      	negs	r7, r7
    8776:	1bed      	subs	r5, r5, r7
    8778:	4684      	mov	ip, r0
    877a:	0228      	lsls	r0, r5, #8
    877c:	d400      	bmi.n	8780 <__aeabi_dsub+0x51c>
    877e:	e68d      	b.n	849c <__aeabi_dsub+0x238>
    8780:	4650      	mov	r0, sl
    8782:	1a17      	subs	r7, r2, r0
    8784:	42ba      	cmp	r2, r7
    8786:	4192      	sbcs	r2, r2
    8788:	1b0c      	subs	r4, r1, r4
    878a:	4252      	negs	r2, r2
    878c:	1aa4      	subs	r4, r4, r2
    878e:	4698      	mov	r8, r3
    8790:	e5ee      	b.n	8370 <__aeabi_dsub+0x10c>
    8792:	000d      	movs	r5, r1
    8794:	4315      	orrs	r5, r2
    8796:	d100      	bne.n	879a <__aeabi_dsub+0x536>
    8798:	e76b      	b.n	8672 <__aeabi_dsub+0x40e>
    879a:	4650      	mov	r0, sl
    879c:	0767      	lsls	r7, r4, #29
    879e:	08c0      	lsrs	r0, r0, #3
    87a0:	4307      	orrs	r7, r0
    87a2:	2080      	movs	r0, #128	; 0x80
    87a4:	08e4      	lsrs	r4, r4, #3
    87a6:	0300      	lsls	r0, r0, #12
    87a8:	4204      	tst	r4, r0
    87aa:	d007      	beq.n	87bc <__aeabi_dsub+0x558>
    87ac:	08cd      	lsrs	r5, r1, #3
    87ae:	4205      	tst	r5, r0
    87b0:	d104      	bne.n	87bc <__aeabi_dsub+0x558>
    87b2:	002c      	movs	r4, r5
    87b4:	4698      	mov	r8, r3
    87b6:	08d7      	lsrs	r7, r2, #3
    87b8:	0749      	lsls	r1, r1, #29
    87ba:	430f      	orrs	r7, r1
    87bc:	0f7b      	lsrs	r3, r7, #29
    87be:	00e4      	lsls	r4, r4, #3
    87c0:	431c      	orrs	r4, r3
    87c2:	00ff      	lsls	r7, r7, #3
    87c4:	4e30      	ldr	r6, [pc, #192]	; (8888 <__aeabi_dsub+0x624>)
    87c6:	e5d3      	b.n	8370 <__aeabi_dsub+0x10c>
    87c8:	4e2f      	ldr	r6, [pc, #188]	; (8888 <__aeabi_dsub+0x624>)
    87ca:	45b4      	cmp	ip, r6
    87cc:	d1b4      	bne.n	8738 <__aeabi_dsub+0x4d4>
    87ce:	000c      	movs	r4, r1
    87d0:	0017      	movs	r7, r2
    87d2:	4666      	mov	r6, ip
    87d4:	e5cc      	b.n	8370 <__aeabi_dsub+0x10c>
    87d6:	2700      	movs	r7, #0
    87d8:	2400      	movs	r4, #0
    87da:	e5e8      	b.n	83ae <__aeabi_dsub+0x14a>
    87dc:	2b00      	cmp	r3, #0
    87de:	d039      	beq.n	8854 <__aeabi_dsub+0x5f0>
    87e0:	000b      	movs	r3, r1
    87e2:	4313      	orrs	r3, r2
    87e4:	d100      	bne.n	87e8 <__aeabi_dsub+0x584>
    87e6:	e744      	b.n	8672 <__aeabi_dsub+0x40e>
    87e8:	08c0      	lsrs	r0, r0, #3
    87ea:	0767      	lsls	r7, r4, #29
    87ec:	4307      	orrs	r7, r0
    87ee:	2080      	movs	r0, #128	; 0x80
    87f0:	08e4      	lsrs	r4, r4, #3
    87f2:	0300      	lsls	r0, r0, #12
    87f4:	4204      	tst	r4, r0
    87f6:	d0e1      	beq.n	87bc <__aeabi_dsub+0x558>
    87f8:	08cb      	lsrs	r3, r1, #3
    87fa:	4203      	tst	r3, r0
    87fc:	d1de      	bne.n	87bc <__aeabi_dsub+0x558>
    87fe:	08d7      	lsrs	r7, r2, #3
    8800:	0749      	lsls	r1, r1, #29
    8802:	430f      	orrs	r7, r1
    8804:	001c      	movs	r4, r3
    8806:	e7d9      	b.n	87bc <__aeabi_dsub+0x558>
    8808:	2100      	movs	r1, #0
    880a:	e771      	b.n	86f0 <__aeabi_dsub+0x48c>
    880c:	2500      	movs	r5, #0
    880e:	2700      	movs	r7, #0
    8810:	e5e9      	b.n	83e6 <__aeabi_dsub+0x182>
    8812:	002e      	movs	r6, r5
    8814:	0027      	movs	r7, r4
    8816:	3e20      	subs	r6, #32
    8818:	40f7      	lsrs	r7, r6
    881a:	2d20      	cmp	r5, #32
    881c:	d02f      	beq.n	887e <__aeabi_dsub+0x61a>
    881e:	2640      	movs	r6, #64	; 0x40
    8820:	1b75      	subs	r5, r6, r5
    8822:	40ac      	lsls	r4, r5
    8824:	4650      	mov	r0, sl
    8826:	4320      	orrs	r0, r4
    8828:	1e44      	subs	r4, r0, #1
    882a:	41a0      	sbcs	r0, r4
    882c:	2400      	movs	r4, #0
    882e:	4338      	orrs	r0, r7
    8830:	e6dc      	b.n	85ec <__aeabi_dsub+0x388>
    8832:	2480      	movs	r4, #128	; 0x80
    8834:	2500      	movs	r5, #0
    8836:	0324      	lsls	r4, r4, #12
    8838:	4e13      	ldr	r6, [pc, #76]	; (8888 <__aeabi_dsub+0x624>)
    883a:	2700      	movs	r7, #0
    883c:	e5d3      	b.n	83e6 <__aeabi_dsub+0x182>
    883e:	4650      	mov	r0, sl
    8840:	4320      	orrs	r0, r4
    8842:	0007      	movs	r7, r0
    8844:	1e78      	subs	r0, r7, #1
    8846:	4187      	sbcs	r7, r0
    8848:	2400      	movs	r4, #0
    884a:	18bf      	adds	r7, r7, r2
    884c:	e760      	b.n	8710 <__aeabi_dsub+0x4ac>
    884e:	000c      	movs	r4, r1
    8850:	0017      	movs	r7, r2
    8852:	e58d      	b.n	8370 <__aeabi_dsub+0x10c>
    8854:	000c      	movs	r4, r1
    8856:	0017      	movs	r7, r2
    8858:	4e0b      	ldr	r6, [pc, #44]	; (8888 <__aeabi_dsub+0x624>)
    885a:	e589      	b.n	8370 <__aeabi_dsub+0x10c>
    885c:	001e      	movs	r6, r3
    885e:	0027      	movs	r7, r4
    8860:	3e20      	subs	r6, #32
    8862:	40f7      	lsrs	r7, r6
    8864:	2b20      	cmp	r3, #32
    8866:	d00c      	beq.n	8882 <__aeabi_dsub+0x61e>
    8868:	2640      	movs	r6, #64	; 0x40
    886a:	1af3      	subs	r3, r6, r3
    886c:	409c      	lsls	r4, r3
    886e:	4650      	mov	r0, sl
    8870:	4320      	orrs	r0, r4
    8872:	1e44      	subs	r4, r0, #1
    8874:	41a0      	sbcs	r0, r4
    8876:	4307      	orrs	r7, r0
    8878:	2400      	movs	r4, #0
    887a:	18bf      	adds	r7, r7, r2
    887c:	e748      	b.n	8710 <__aeabi_dsub+0x4ac>
    887e:	2400      	movs	r4, #0
    8880:	e7d0      	b.n	8824 <__aeabi_dsub+0x5c0>
    8882:	2400      	movs	r4, #0
    8884:	e7f3      	b.n	886e <__aeabi_dsub+0x60a>
    8886:	46c0      	nop			; (mov r8, r8)
    8888:	000007ff 	.word	0x000007ff
    888c:	ff7fffff 	.word	0xff7fffff

00008890 <__aeabi_d2iz>:
    8890:	b530      	push	{r4, r5, lr}
    8892:	4d13      	ldr	r5, [pc, #76]	; (88e0 <__aeabi_d2iz+0x50>)
    8894:	030a      	lsls	r2, r1, #12
    8896:	004b      	lsls	r3, r1, #1
    8898:	0b12      	lsrs	r2, r2, #12
    889a:	0d5b      	lsrs	r3, r3, #21
    889c:	0fc9      	lsrs	r1, r1, #31
    889e:	2400      	movs	r4, #0
    88a0:	42ab      	cmp	r3, r5
    88a2:	dd10      	ble.n	88c6 <__aeabi_d2iz+0x36>
    88a4:	4c0f      	ldr	r4, [pc, #60]	; (88e4 <__aeabi_d2iz+0x54>)
    88a6:	42a3      	cmp	r3, r4
    88a8:	dc0f      	bgt.n	88ca <__aeabi_d2iz+0x3a>
    88aa:	2480      	movs	r4, #128	; 0x80
    88ac:	4d0e      	ldr	r5, [pc, #56]	; (88e8 <__aeabi_d2iz+0x58>)
    88ae:	0364      	lsls	r4, r4, #13
    88b0:	4322      	orrs	r2, r4
    88b2:	1aed      	subs	r5, r5, r3
    88b4:	2d1f      	cmp	r5, #31
    88b6:	dd0b      	ble.n	88d0 <__aeabi_d2iz+0x40>
    88b8:	480c      	ldr	r0, [pc, #48]	; (88ec <__aeabi_d2iz+0x5c>)
    88ba:	1ac3      	subs	r3, r0, r3
    88bc:	40da      	lsrs	r2, r3
    88be:	4254      	negs	r4, r2
    88c0:	2900      	cmp	r1, #0
    88c2:	d100      	bne.n	88c6 <__aeabi_d2iz+0x36>
    88c4:	0014      	movs	r4, r2
    88c6:	0020      	movs	r0, r4
    88c8:	bd30      	pop	{r4, r5, pc}
    88ca:	4b09      	ldr	r3, [pc, #36]	; (88f0 <__aeabi_d2iz+0x60>)
    88cc:	18cc      	adds	r4, r1, r3
    88ce:	e7fa      	b.n	88c6 <__aeabi_d2iz+0x36>
    88d0:	4c08      	ldr	r4, [pc, #32]	; (88f4 <__aeabi_d2iz+0x64>)
    88d2:	40e8      	lsrs	r0, r5
    88d4:	46a4      	mov	ip, r4
    88d6:	4463      	add	r3, ip
    88d8:	409a      	lsls	r2, r3
    88da:	4302      	orrs	r2, r0
    88dc:	e7ef      	b.n	88be <__aeabi_d2iz+0x2e>
    88de:	46c0      	nop			; (mov r8, r8)
    88e0:	000003fe 	.word	0x000003fe
    88e4:	0000041d 	.word	0x0000041d
    88e8:	00000433 	.word	0x00000433
    88ec:	00000413 	.word	0x00000413
    88f0:	7fffffff 	.word	0x7fffffff
    88f4:	fffffbed 	.word	0xfffffbed

000088f8 <__aeabi_ui2d>:
    88f8:	b510      	push	{r4, lr}
    88fa:	1e04      	subs	r4, r0, #0
    88fc:	d028      	beq.n	8950 <__aeabi_ui2d+0x58>
    88fe:	f000 f833 	bl	8968 <__clzsi2>
    8902:	4b15      	ldr	r3, [pc, #84]	; (8958 <__aeabi_ui2d+0x60>)
    8904:	4a15      	ldr	r2, [pc, #84]	; (895c <__aeabi_ui2d+0x64>)
    8906:	1a1b      	subs	r3, r3, r0
    8908:	1ad2      	subs	r2, r2, r3
    890a:	2a1f      	cmp	r2, #31
    890c:	dd15      	ble.n	893a <__aeabi_ui2d+0x42>
    890e:	4a14      	ldr	r2, [pc, #80]	; (8960 <__aeabi_ui2d+0x68>)
    8910:	1ad2      	subs	r2, r2, r3
    8912:	4094      	lsls	r4, r2
    8914:	2200      	movs	r2, #0
    8916:	0324      	lsls	r4, r4, #12
    8918:	055b      	lsls	r3, r3, #21
    891a:	0b24      	lsrs	r4, r4, #12
    891c:	0d5b      	lsrs	r3, r3, #21
    891e:	2100      	movs	r1, #0
    8920:	0010      	movs	r0, r2
    8922:	0324      	lsls	r4, r4, #12
    8924:	0d0a      	lsrs	r2, r1, #20
    8926:	0b24      	lsrs	r4, r4, #12
    8928:	0512      	lsls	r2, r2, #20
    892a:	4322      	orrs	r2, r4
    892c:	4c0d      	ldr	r4, [pc, #52]	; (8964 <__aeabi_ui2d+0x6c>)
    892e:	051b      	lsls	r3, r3, #20
    8930:	4022      	ands	r2, r4
    8932:	4313      	orrs	r3, r2
    8934:	005b      	lsls	r3, r3, #1
    8936:	0859      	lsrs	r1, r3, #1
    8938:	bd10      	pop	{r4, pc}
    893a:	0021      	movs	r1, r4
    893c:	4091      	lsls	r1, r2
    893e:	000a      	movs	r2, r1
    8940:	210b      	movs	r1, #11
    8942:	1a08      	subs	r0, r1, r0
    8944:	40c4      	lsrs	r4, r0
    8946:	055b      	lsls	r3, r3, #21
    8948:	0324      	lsls	r4, r4, #12
    894a:	0b24      	lsrs	r4, r4, #12
    894c:	0d5b      	lsrs	r3, r3, #21
    894e:	e7e6      	b.n	891e <__aeabi_ui2d+0x26>
    8950:	2300      	movs	r3, #0
    8952:	2400      	movs	r4, #0
    8954:	2200      	movs	r2, #0
    8956:	e7e2      	b.n	891e <__aeabi_ui2d+0x26>
    8958:	0000041e 	.word	0x0000041e
    895c:	00000433 	.word	0x00000433
    8960:	00000413 	.word	0x00000413
    8964:	800fffff 	.word	0x800fffff

00008968 <__clzsi2>:
    8968:	211c      	movs	r1, #28
    896a:	2301      	movs	r3, #1
    896c:	041b      	lsls	r3, r3, #16
    896e:	4298      	cmp	r0, r3
    8970:	d301      	bcc.n	8976 <__clzsi2+0xe>
    8972:	0c00      	lsrs	r0, r0, #16
    8974:	3910      	subs	r1, #16
    8976:	0a1b      	lsrs	r3, r3, #8
    8978:	4298      	cmp	r0, r3
    897a:	d301      	bcc.n	8980 <__clzsi2+0x18>
    897c:	0a00      	lsrs	r0, r0, #8
    897e:	3908      	subs	r1, #8
    8980:	091b      	lsrs	r3, r3, #4
    8982:	4298      	cmp	r0, r3
    8984:	d301      	bcc.n	898a <__clzsi2+0x22>
    8986:	0900      	lsrs	r0, r0, #4
    8988:	3904      	subs	r1, #4
    898a:	a202      	add	r2, pc, #8	; (adr r2, 8994 <__clzsi2+0x2c>)
    898c:	5c10      	ldrb	r0, [r2, r0]
    898e:	1840      	adds	r0, r0, r1
    8990:	4770      	bx	lr
    8992:	46c0      	nop			; (mov r8, r8)
    8994:	02020304 	.word	0x02020304
    8998:	01010101 	.word	0x01010101
	...

000089a4 <__libc_init_array>:
    89a4:	b570      	push	{r4, r5, r6, lr}
    89a6:	2600      	movs	r6, #0
    89a8:	4d0c      	ldr	r5, [pc, #48]	; (89dc <__libc_init_array+0x38>)
    89aa:	4c0d      	ldr	r4, [pc, #52]	; (89e0 <__libc_init_array+0x3c>)
    89ac:	1b64      	subs	r4, r4, r5
    89ae:	10a4      	asrs	r4, r4, #2
    89b0:	42a6      	cmp	r6, r4
    89b2:	d109      	bne.n	89c8 <__libc_init_array+0x24>
    89b4:	2600      	movs	r6, #0
    89b6:	f001 ffbb 	bl	a930 <_init>
    89ba:	4d0a      	ldr	r5, [pc, #40]	; (89e4 <__libc_init_array+0x40>)
    89bc:	4c0a      	ldr	r4, [pc, #40]	; (89e8 <__libc_init_array+0x44>)
    89be:	1b64      	subs	r4, r4, r5
    89c0:	10a4      	asrs	r4, r4, #2
    89c2:	42a6      	cmp	r6, r4
    89c4:	d105      	bne.n	89d2 <__libc_init_array+0x2e>
    89c6:	bd70      	pop	{r4, r5, r6, pc}
    89c8:	00b3      	lsls	r3, r6, #2
    89ca:	58eb      	ldr	r3, [r5, r3]
    89cc:	4798      	blx	r3
    89ce:	3601      	adds	r6, #1
    89d0:	e7ee      	b.n	89b0 <__libc_init_array+0xc>
    89d2:	00b3      	lsls	r3, r6, #2
    89d4:	58eb      	ldr	r3, [r5, r3]
    89d6:	4798      	blx	r3
    89d8:	3601      	adds	r6, #1
    89da:	e7f2      	b.n	89c2 <__libc_init_array+0x1e>
    89dc:	0000a93c 	.word	0x0000a93c
    89e0:	0000a93c 	.word	0x0000a93c
    89e4:	0000a93c 	.word	0x0000a93c
    89e8:	0000a940 	.word	0x0000a940

000089ec <malloc>:
    89ec:	b510      	push	{r4, lr}
    89ee:	4b03      	ldr	r3, [pc, #12]	; (89fc <malloc+0x10>)
    89f0:	0001      	movs	r1, r0
    89f2:	6818      	ldr	r0, [r3, #0]
    89f4:	f000 f860 	bl	8ab8 <_malloc_r>
    89f8:	bd10      	pop	{r4, pc}
    89fa:	46c0      	nop			; (mov r8, r8)
    89fc:	20000030 	.word	0x20000030

00008a00 <memcpy>:
    8a00:	2300      	movs	r3, #0
    8a02:	b510      	push	{r4, lr}
    8a04:	429a      	cmp	r2, r3
    8a06:	d100      	bne.n	8a0a <memcpy+0xa>
    8a08:	bd10      	pop	{r4, pc}
    8a0a:	5ccc      	ldrb	r4, [r1, r3]
    8a0c:	54c4      	strb	r4, [r0, r3]
    8a0e:	3301      	adds	r3, #1
    8a10:	e7f8      	b.n	8a04 <memcpy+0x4>

00008a12 <memset>:
    8a12:	0003      	movs	r3, r0
    8a14:	1882      	adds	r2, r0, r2
    8a16:	4293      	cmp	r3, r2
    8a18:	d100      	bne.n	8a1c <memset+0xa>
    8a1a:	4770      	bx	lr
    8a1c:	7019      	strb	r1, [r3, #0]
    8a1e:	3301      	adds	r3, #1
    8a20:	e7f9      	b.n	8a16 <memset+0x4>
	...

00008a24 <_free_r>:
    8a24:	b570      	push	{r4, r5, r6, lr}
    8a26:	0005      	movs	r5, r0
    8a28:	2900      	cmp	r1, #0
    8a2a:	d010      	beq.n	8a4e <_free_r+0x2a>
    8a2c:	1f0c      	subs	r4, r1, #4
    8a2e:	6823      	ldr	r3, [r4, #0]
    8a30:	2b00      	cmp	r3, #0
    8a32:	da00      	bge.n	8a36 <_free_r+0x12>
    8a34:	18e4      	adds	r4, r4, r3
    8a36:	0028      	movs	r0, r5
    8a38:	f000 f9a4 	bl	8d84 <__malloc_lock>
    8a3c:	4a1d      	ldr	r2, [pc, #116]	; (8ab4 <_free_r+0x90>)
    8a3e:	6813      	ldr	r3, [r2, #0]
    8a40:	2b00      	cmp	r3, #0
    8a42:	d105      	bne.n	8a50 <_free_r+0x2c>
    8a44:	6063      	str	r3, [r4, #4]
    8a46:	6014      	str	r4, [r2, #0]
    8a48:	0028      	movs	r0, r5
    8a4a:	f000 f99c 	bl	8d86 <__malloc_unlock>
    8a4e:	bd70      	pop	{r4, r5, r6, pc}
    8a50:	42a3      	cmp	r3, r4
    8a52:	d909      	bls.n	8a68 <_free_r+0x44>
    8a54:	6821      	ldr	r1, [r4, #0]
    8a56:	1860      	adds	r0, r4, r1
    8a58:	4283      	cmp	r3, r0
    8a5a:	d1f3      	bne.n	8a44 <_free_r+0x20>
    8a5c:	6818      	ldr	r0, [r3, #0]
    8a5e:	685b      	ldr	r3, [r3, #4]
    8a60:	1841      	adds	r1, r0, r1
    8a62:	6021      	str	r1, [r4, #0]
    8a64:	e7ee      	b.n	8a44 <_free_r+0x20>
    8a66:	0013      	movs	r3, r2
    8a68:	685a      	ldr	r2, [r3, #4]
    8a6a:	2a00      	cmp	r2, #0
    8a6c:	d001      	beq.n	8a72 <_free_r+0x4e>
    8a6e:	42a2      	cmp	r2, r4
    8a70:	d9f9      	bls.n	8a66 <_free_r+0x42>
    8a72:	6819      	ldr	r1, [r3, #0]
    8a74:	1858      	adds	r0, r3, r1
    8a76:	42a0      	cmp	r0, r4
    8a78:	d10b      	bne.n	8a92 <_free_r+0x6e>
    8a7a:	6820      	ldr	r0, [r4, #0]
    8a7c:	1809      	adds	r1, r1, r0
    8a7e:	1858      	adds	r0, r3, r1
    8a80:	6019      	str	r1, [r3, #0]
    8a82:	4282      	cmp	r2, r0
    8a84:	d1e0      	bne.n	8a48 <_free_r+0x24>
    8a86:	6810      	ldr	r0, [r2, #0]
    8a88:	6852      	ldr	r2, [r2, #4]
    8a8a:	1841      	adds	r1, r0, r1
    8a8c:	6019      	str	r1, [r3, #0]
    8a8e:	605a      	str	r2, [r3, #4]
    8a90:	e7da      	b.n	8a48 <_free_r+0x24>
    8a92:	42a0      	cmp	r0, r4
    8a94:	d902      	bls.n	8a9c <_free_r+0x78>
    8a96:	230c      	movs	r3, #12
    8a98:	602b      	str	r3, [r5, #0]
    8a9a:	e7d5      	b.n	8a48 <_free_r+0x24>
    8a9c:	6821      	ldr	r1, [r4, #0]
    8a9e:	1860      	adds	r0, r4, r1
    8aa0:	4282      	cmp	r2, r0
    8aa2:	d103      	bne.n	8aac <_free_r+0x88>
    8aa4:	6810      	ldr	r0, [r2, #0]
    8aa6:	6852      	ldr	r2, [r2, #4]
    8aa8:	1841      	adds	r1, r0, r1
    8aaa:	6021      	str	r1, [r4, #0]
    8aac:	6062      	str	r2, [r4, #4]
    8aae:	605c      	str	r4, [r3, #4]
    8ab0:	e7ca      	b.n	8a48 <_free_r+0x24>
    8ab2:	46c0      	nop			; (mov r8, r8)
    8ab4:	20003848 	.word	0x20003848

00008ab8 <_malloc_r>:
    8ab8:	2303      	movs	r3, #3
    8aba:	b570      	push	{r4, r5, r6, lr}
    8abc:	1ccd      	adds	r5, r1, #3
    8abe:	439d      	bics	r5, r3
    8ac0:	3508      	adds	r5, #8
    8ac2:	0006      	movs	r6, r0
    8ac4:	2d0c      	cmp	r5, #12
    8ac6:	d21e      	bcs.n	8b06 <_malloc_r+0x4e>
    8ac8:	250c      	movs	r5, #12
    8aca:	42a9      	cmp	r1, r5
    8acc:	d81d      	bhi.n	8b0a <_malloc_r+0x52>
    8ace:	0030      	movs	r0, r6
    8ad0:	f000 f958 	bl	8d84 <__malloc_lock>
    8ad4:	4a25      	ldr	r2, [pc, #148]	; (8b6c <_malloc_r+0xb4>)
    8ad6:	6814      	ldr	r4, [r2, #0]
    8ad8:	0021      	movs	r1, r4
    8ada:	2900      	cmp	r1, #0
    8adc:	d119      	bne.n	8b12 <_malloc_r+0x5a>
    8ade:	4c24      	ldr	r4, [pc, #144]	; (8b70 <_malloc_r+0xb8>)
    8ae0:	6823      	ldr	r3, [r4, #0]
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d103      	bne.n	8aee <_malloc_r+0x36>
    8ae6:	0030      	movs	r0, r6
    8ae8:	f000 f844 	bl	8b74 <_sbrk_r>
    8aec:	6020      	str	r0, [r4, #0]
    8aee:	0029      	movs	r1, r5
    8af0:	0030      	movs	r0, r6
    8af2:	f000 f83f 	bl	8b74 <_sbrk_r>
    8af6:	1c43      	adds	r3, r0, #1
    8af8:	d12c      	bne.n	8b54 <_malloc_r+0x9c>
    8afa:	230c      	movs	r3, #12
    8afc:	0030      	movs	r0, r6
    8afe:	6033      	str	r3, [r6, #0]
    8b00:	f000 f941 	bl	8d86 <__malloc_unlock>
    8b04:	e003      	b.n	8b0e <_malloc_r+0x56>
    8b06:	2d00      	cmp	r5, #0
    8b08:	dadf      	bge.n	8aca <_malloc_r+0x12>
    8b0a:	230c      	movs	r3, #12
    8b0c:	6033      	str	r3, [r6, #0]
    8b0e:	2000      	movs	r0, #0
    8b10:	bd70      	pop	{r4, r5, r6, pc}
    8b12:	680b      	ldr	r3, [r1, #0]
    8b14:	1b5b      	subs	r3, r3, r5
    8b16:	d41a      	bmi.n	8b4e <_malloc_r+0x96>
    8b18:	2b0b      	cmp	r3, #11
    8b1a:	d903      	bls.n	8b24 <_malloc_r+0x6c>
    8b1c:	600b      	str	r3, [r1, #0]
    8b1e:	18cc      	adds	r4, r1, r3
    8b20:	6025      	str	r5, [r4, #0]
    8b22:	e003      	b.n	8b2c <_malloc_r+0x74>
    8b24:	428c      	cmp	r4, r1
    8b26:	d10e      	bne.n	8b46 <_malloc_r+0x8e>
    8b28:	6863      	ldr	r3, [r4, #4]
    8b2a:	6013      	str	r3, [r2, #0]
    8b2c:	0030      	movs	r0, r6
    8b2e:	f000 f92a 	bl	8d86 <__malloc_unlock>
    8b32:	0020      	movs	r0, r4
    8b34:	2207      	movs	r2, #7
    8b36:	300b      	adds	r0, #11
    8b38:	1d23      	adds	r3, r4, #4
    8b3a:	4390      	bics	r0, r2
    8b3c:	1ac3      	subs	r3, r0, r3
    8b3e:	d0e7      	beq.n	8b10 <_malloc_r+0x58>
    8b40:	425a      	negs	r2, r3
    8b42:	50e2      	str	r2, [r4, r3]
    8b44:	e7e4      	b.n	8b10 <_malloc_r+0x58>
    8b46:	684b      	ldr	r3, [r1, #4]
    8b48:	6063      	str	r3, [r4, #4]
    8b4a:	000c      	movs	r4, r1
    8b4c:	e7ee      	b.n	8b2c <_malloc_r+0x74>
    8b4e:	000c      	movs	r4, r1
    8b50:	6849      	ldr	r1, [r1, #4]
    8b52:	e7c2      	b.n	8ada <_malloc_r+0x22>
    8b54:	2303      	movs	r3, #3
    8b56:	1cc4      	adds	r4, r0, #3
    8b58:	439c      	bics	r4, r3
    8b5a:	42a0      	cmp	r0, r4
    8b5c:	d0e0      	beq.n	8b20 <_malloc_r+0x68>
    8b5e:	1a21      	subs	r1, r4, r0
    8b60:	0030      	movs	r0, r6
    8b62:	f000 f807 	bl	8b74 <_sbrk_r>
    8b66:	1c43      	adds	r3, r0, #1
    8b68:	d1da      	bne.n	8b20 <_malloc_r+0x68>
    8b6a:	e7c6      	b.n	8afa <_malloc_r+0x42>
    8b6c:	20003848 	.word	0x20003848
    8b70:	2000384c 	.word	0x2000384c

00008b74 <_sbrk_r>:
    8b74:	2300      	movs	r3, #0
    8b76:	b570      	push	{r4, r5, r6, lr}
    8b78:	4c06      	ldr	r4, [pc, #24]	; (8b94 <_sbrk_r+0x20>)
    8b7a:	0005      	movs	r5, r0
    8b7c:	0008      	movs	r0, r1
    8b7e:	6023      	str	r3, [r4, #0]
    8b80:	f7fd ff68 	bl	6a54 <_sbrk>
    8b84:	1c43      	adds	r3, r0, #1
    8b86:	d103      	bne.n	8b90 <_sbrk_r+0x1c>
    8b88:	6823      	ldr	r3, [r4, #0]
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d000      	beq.n	8b90 <_sbrk_r+0x1c>
    8b8e:	602b      	str	r3, [r5, #0]
    8b90:	bd70      	pop	{r4, r5, r6, pc}
    8b92:	46c0      	nop			; (mov r8, r8)
    8b94:	20004edc 	.word	0x20004edc

00008b98 <sniprintf>:
    8b98:	b40c      	push	{r2, r3}
    8b9a:	b530      	push	{r4, r5, lr}
    8b9c:	4b16      	ldr	r3, [pc, #88]	; (8bf8 <sniprintf+0x60>)
    8b9e:	b09d      	sub	sp, #116	; 0x74
    8ba0:	1e0c      	subs	r4, r1, #0
    8ba2:	681d      	ldr	r5, [r3, #0]
    8ba4:	da08      	bge.n	8bb8 <sniprintf+0x20>
    8ba6:	238b      	movs	r3, #139	; 0x8b
    8ba8:	2001      	movs	r0, #1
    8baa:	602b      	str	r3, [r5, #0]
    8bac:	4240      	negs	r0, r0
    8bae:	b01d      	add	sp, #116	; 0x74
    8bb0:	bc30      	pop	{r4, r5}
    8bb2:	bc08      	pop	{r3}
    8bb4:	b002      	add	sp, #8
    8bb6:	4718      	bx	r3
    8bb8:	2382      	movs	r3, #130	; 0x82
    8bba:	a902      	add	r1, sp, #8
    8bbc:	009b      	lsls	r3, r3, #2
    8bbe:	818b      	strh	r3, [r1, #12]
    8bc0:	2300      	movs	r3, #0
    8bc2:	9002      	str	r0, [sp, #8]
    8bc4:	6108      	str	r0, [r1, #16]
    8bc6:	429c      	cmp	r4, r3
    8bc8:	d000      	beq.n	8bcc <sniprintf+0x34>
    8bca:	1e63      	subs	r3, r4, #1
    8bcc:	608b      	str	r3, [r1, #8]
    8bce:	614b      	str	r3, [r1, #20]
    8bd0:	2301      	movs	r3, #1
    8bd2:	425b      	negs	r3, r3
    8bd4:	81cb      	strh	r3, [r1, #14]
    8bd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8bd8:	ab21      	add	r3, sp, #132	; 0x84
    8bda:	0028      	movs	r0, r5
    8bdc:	9301      	str	r3, [sp, #4]
    8bde:	f000 f935 	bl	8e4c <_svfiprintf_r>
    8be2:	1c43      	adds	r3, r0, #1
    8be4:	da01      	bge.n	8bea <sniprintf+0x52>
    8be6:	238b      	movs	r3, #139	; 0x8b
    8be8:	602b      	str	r3, [r5, #0]
    8bea:	2c00      	cmp	r4, #0
    8bec:	d0df      	beq.n	8bae <sniprintf+0x16>
    8bee:	2300      	movs	r3, #0
    8bf0:	9a02      	ldr	r2, [sp, #8]
    8bf2:	7013      	strb	r3, [r2, #0]
    8bf4:	e7db      	b.n	8bae <sniprintf+0x16>
    8bf6:	46c0      	nop			; (mov r8, r8)
    8bf8:	20000030 	.word	0x20000030

00008bfc <siprintf>:
    8bfc:	b40e      	push	{r1, r2, r3}
    8bfe:	b510      	push	{r4, lr}
    8c00:	b09d      	sub	sp, #116	; 0x74
    8c02:	a902      	add	r1, sp, #8
    8c04:	9002      	str	r0, [sp, #8]
    8c06:	6108      	str	r0, [r1, #16]
    8c08:	480b      	ldr	r0, [pc, #44]	; (8c38 <siprintf+0x3c>)
    8c0a:	2482      	movs	r4, #130	; 0x82
    8c0c:	6088      	str	r0, [r1, #8]
    8c0e:	6148      	str	r0, [r1, #20]
    8c10:	2001      	movs	r0, #1
    8c12:	4240      	negs	r0, r0
    8c14:	ab1f      	add	r3, sp, #124	; 0x7c
    8c16:	81c8      	strh	r0, [r1, #14]
    8c18:	4808      	ldr	r0, [pc, #32]	; (8c3c <siprintf+0x40>)
    8c1a:	cb04      	ldmia	r3!, {r2}
    8c1c:	00a4      	lsls	r4, r4, #2
    8c1e:	6800      	ldr	r0, [r0, #0]
    8c20:	9301      	str	r3, [sp, #4]
    8c22:	818c      	strh	r4, [r1, #12]
    8c24:	f000 f912 	bl	8e4c <_svfiprintf_r>
    8c28:	2300      	movs	r3, #0
    8c2a:	9a02      	ldr	r2, [sp, #8]
    8c2c:	7013      	strb	r3, [r2, #0]
    8c2e:	b01d      	add	sp, #116	; 0x74
    8c30:	bc10      	pop	{r4}
    8c32:	bc08      	pop	{r3}
    8c34:	b003      	add	sp, #12
    8c36:	4718      	bx	r3
    8c38:	7fffffff 	.word	0x7fffffff
    8c3c:	20000030 	.word	0x20000030

00008c40 <strcasecmp>:
    8c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c42:	0007      	movs	r7, r0
    8c44:	000e      	movs	r6, r1
    8c46:	783c      	ldrb	r4, [r7, #0]
    8c48:	f000 f87c 	bl	8d44 <__locale_ctype_ptr>
    8c4c:	2203      	movs	r2, #3
    8c4e:	1900      	adds	r0, r0, r4
    8c50:	7843      	ldrb	r3, [r0, #1]
    8c52:	4013      	ands	r3, r2
    8c54:	2b01      	cmp	r3, #1
    8c56:	d100      	bne.n	8c5a <strcasecmp+0x1a>
    8c58:	3420      	adds	r4, #32
    8c5a:	7835      	ldrb	r5, [r6, #0]
    8c5c:	f000 f872 	bl	8d44 <__locale_ctype_ptr>
    8c60:	2203      	movs	r2, #3
    8c62:	1940      	adds	r0, r0, r5
    8c64:	7843      	ldrb	r3, [r0, #1]
    8c66:	4013      	ands	r3, r2
    8c68:	2b01      	cmp	r3, #1
    8c6a:	d100      	bne.n	8c6e <strcasecmp+0x2e>
    8c6c:	3520      	adds	r5, #32
    8c6e:	1b60      	subs	r0, r4, r5
    8c70:	d103      	bne.n	8c7a <strcasecmp+0x3a>
    8c72:	3701      	adds	r7, #1
    8c74:	3601      	adds	r6, #1
    8c76:	2d00      	cmp	r5, #0
    8c78:	d1e5      	bne.n	8c46 <strcasecmp+0x6>
    8c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008c7c <strlen>:
    8c7c:	2300      	movs	r3, #0
    8c7e:	5cc2      	ldrb	r2, [r0, r3]
    8c80:	3301      	adds	r3, #1
    8c82:	2a00      	cmp	r2, #0
    8c84:	d1fb      	bne.n	8c7e <strlen+0x2>
    8c86:	1e58      	subs	r0, r3, #1
    8c88:	4770      	bx	lr

00008c8a <strncmp>:
    8c8a:	2300      	movs	r3, #0
    8c8c:	b530      	push	{r4, r5, lr}
    8c8e:	429a      	cmp	r2, r3
    8c90:	d00a      	beq.n	8ca8 <strncmp+0x1e>
    8c92:	3a01      	subs	r2, #1
    8c94:	5cc4      	ldrb	r4, [r0, r3]
    8c96:	5ccd      	ldrb	r5, [r1, r3]
    8c98:	42ac      	cmp	r4, r5
    8c9a:	d104      	bne.n	8ca6 <strncmp+0x1c>
    8c9c:	429a      	cmp	r2, r3
    8c9e:	d002      	beq.n	8ca6 <strncmp+0x1c>
    8ca0:	3301      	adds	r3, #1
    8ca2:	2c00      	cmp	r4, #0
    8ca4:	d1f6      	bne.n	8c94 <strncmp+0xa>
    8ca6:	1b63      	subs	r3, r4, r5
    8ca8:	0018      	movs	r0, r3
    8caa:	bd30      	pop	{r4, r5, pc}

00008cac <strncpy>:
    8cac:	b570      	push	{r4, r5, r6, lr}
    8cae:	0004      	movs	r4, r0
    8cb0:	2a00      	cmp	r2, #0
    8cb2:	d100      	bne.n	8cb6 <strncpy+0xa>
    8cb4:	bd70      	pop	{r4, r5, r6, pc}
    8cb6:	780d      	ldrb	r5, [r1, #0]
    8cb8:	1e56      	subs	r6, r2, #1
    8cba:	1c63      	adds	r3, r4, #1
    8cbc:	7025      	strb	r5, [r4, #0]
    8cbe:	3101      	adds	r1, #1
    8cc0:	2d00      	cmp	r5, #0
    8cc2:	d105      	bne.n	8cd0 <strncpy+0x24>
    8cc4:	18a4      	adds	r4, r4, r2
    8cc6:	429c      	cmp	r4, r3
    8cc8:	d0f4      	beq.n	8cb4 <strncpy+0x8>
    8cca:	701d      	strb	r5, [r3, #0]
    8ccc:	3301      	adds	r3, #1
    8cce:	e7fa      	b.n	8cc6 <strncpy+0x1a>
    8cd0:	001c      	movs	r4, r3
    8cd2:	0032      	movs	r2, r6
    8cd4:	e7ec      	b.n	8cb0 <strncpy+0x4>

00008cd6 <_vsniprintf_r>:
    8cd6:	b530      	push	{r4, r5, lr}
    8cd8:	0014      	movs	r4, r2
    8cda:	b09b      	sub	sp, #108	; 0x6c
    8cdc:	0005      	movs	r5, r0
    8cde:	001a      	movs	r2, r3
    8ce0:	2c00      	cmp	r4, #0
    8ce2:	da05      	bge.n	8cf0 <_vsniprintf_r+0x1a>
    8ce4:	238b      	movs	r3, #139	; 0x8b
    8ce6:	6003      	str	r3, [r0, #0]
    8ce8:	2001      	movs	r0, #1
    8cea:	4240      	negs	r0, r0
    8cec:	b01b      	add	sp, #108	; 0x6c
    8cee:	bd30      	pop	{r4, r5, pc}
    8cf0:	2382      	movs	r3, #130	; 0x82
    8cf2:	4668      	mov	r0, sp
    8cf4:	009b      	lsls	r3, r3, #2
    8cf6:	8183      	strh	r3, [r0, #12]
    8cf8:	2300      	movs	r3, #0
    8cfa:	9100      	str	r1, [sp, #0]
    8cfc:	9104      	str	r1, [sp, #16]
    8cfe:	429c      	cmp	r4, r3
    8d00:	d000      	beq.n	8d04 <_vsniprintf_r+0x2e>
    8d02:	1e63      	subs	r3, r4, #1
    8d04:	9302      	str	r3, [sp, #8]
    8d06:	9305      	str	r3, [sp, #20]
    8d08:	2301      	movs	r3, #1
    8d0a:	4669      	mov	r1, sp
    8d0c:	425b      	negs	r3, r3
    8d0e:	81cb      	strh	r3, [r1, #14]
    8d10:	0028      	movs	r0, r5
    8d12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    8d14:	f000 f89a 	bl	8e4c <_svfiprintf_r>
    8d18:	1c43      	adds	r3, r0, #1
    8d1a:	da01      	bge.n	8d20 <_vsniprintf_r+0x4a>
    8d1c:	238b      	movs	r3, #139	; 0x8b
    8d1e:	602b      	str	r3, [r5, #0]
    8d20:	2c00      	cmp	r4, #0
    8d22:	d0e3      	beq.n	8cec <_vsniprintf_r+0x16>
    8d24:	2300      	movs	r3, #0
    8d26:	9a00      	ldr	r2, [sp, #0]
    8d28:	7013      	strb	r3, [r2, #0]
    8d2a:	e7df      	b.n	8cec <_vsniprintf_r+0x16>

00008d2c <vsniprintf>:
    8d2c:	b507      	push	{r0, r1, r2, lr}
    8d2e:	9300      	str	r3, [sp, #0]
    8d30:	0013      	movs	r3, r2
    8d32:	000a      	movs	r2, r1
    8d34:	0001      	movs	r1, r0
    8d36:	4802      	ldr	r0, [pc, #8]	; (8d40 <vsniprintf+0x14>)
    8d38:	6800      	ldr	r0, [r0, #0]
    8d3a:	f7ff ffcc 	bl	8cd6 <_vsniprintf_r>
    8d3e:	bd0e      	pop	{r1, r2, r3, pc}
    8d40:	20000030 	.word	0x20000030

00008d44 <__locale_ctype_ptr>:
    8d44:	4b04      	ldr	r3, [pc, #16]	; (8d58 <__locale_ctype_ptr+0x14>)
    8d46:	681b      	ldr	r3, [r3, #0]
    8d48:	6a1b      	ldr	r3, [r3, #32]
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d100      	bne.n	8d50 <__locale_ctype_ptr+0xc>
    8d4e:	4b03      	ldr	r3, [pc, #12]	; (8d5c <__locale_ctype_ptr+0x18>)
    8d50:	33ec      	adds	r3, #236	; 0xec
    8d52:	6818      	ldr	r0, [r3, #0]
    8d54:	4770      	bx	lr
    8d56:	46c0      	nop			; (mov r8, r8)
    8d58:	20000030 	.word	0x20000030
    8d5c:	20000094 	.word	0x20000094

00008d60 <__ascii_mbtowc>:
    8d60:	b082      	sub	sp, #8
    8d62:	2900      	cmp	r1, #0
    8d64:	d100      	bne.n	8d68 <__ascii_mbtowc+0x8>
    8d66:	a901      	add	r1, sp, #4
    8d68:	1e10      	subs	r0, r2, #0
    8d6a:	d006      	beq.n	8d7a <__ascii_mbtowc+0x1a>
    8d6c:	2b00      	cmp	r3, #0
    8d6e:	d006      	beq.n	8d7e <__ascii_mbtowc+0x1e>
    8d70:	7813      	ldrb	r3, [r2, #0]
    8d72:	600b      	str	r3, [r1, #0]
    8d74:	7810      	ldrb	r0, [r2, #0]
    8d76:	1e43      	subs	r3, r0, #1
    8d78:	4198      	sbcs	r0, r3
    8d7a:	b002      	add	sp, #8
    8d7c:	4770      	bx	lr
    8d7e:	2002      	movs	r0, #2
    8d80:	4240      	negs	r0, r0
    8d82:	e7fa      	b.n	8d7a <__ascii_mbtowc+0x1a>

00008d84 <__malloc_lock>:
    8d84:	4770      	bx	lr

00008d86 <__malloc_unlock>:
    8d86:	4770      	bx	lr

00008d88 <__ssputs_r>:
    8d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d8a:	688e      	ldr	r6, [r1, #8]
    8d8c:	b085      	sub	sp, #20
    8d8e:	0007      	movs	r7, r0
    8d90:	000c      	movs	r4, r1
    8d92:	9203      	str	r2, [sp, #12]
    8d94:	9301      	str	r3, [sp, #4]
    8d96:	429e      	cmp	r6, r3
    8d98:	d839      	bhi.n	8e0e <__ssputs_r+0x86>
    8d9a:	2390      	movs	r3, #144	; 0x90
    8d9c:	898a      	ldrh	r2, [r1, #12]
    8d9e:	00db      	lsls	r3, r3, #3
    8da0:	421a      	tst	r2, r3
    8da2:	d034      	beq.n	8e0e <__ssputs_r+0x86>
    8da4:	2503      	movs	r5, #3
    8da6:	6909      	ldr	r1, [r1, #16]
    8da8:	6823      	ldr	r3, [r4, #0]
    8daa:	1a5b      	subs	r3, r3, r1
    8dac:	9302      	str	r3, [sp, #8]
    8dae:	6963      	ldr	r3, [r4, #20]
    8db0:	9802      	ldr	r0, [sp, #8]
    8db2:	435d      	muls	r5, r3
    8db4:	0feb      	lsrs	r3, r5, #31
    8db6:	195d      	adds	r5, r3, r5
    8db8:	9b01      	ldr	r3, [sp, #4]
    8dba:	106d      	asrs	r5, r5, #1
    8dbc:	3301      	adds	r3, #1
    8dbe:	181b      	adds	r3, r3, r0
    8dc0:	42ab      	cmp	r3, r5
    8dc2:	d900      	bls.n	8dc6 <__ssputs_r+0x3e>
    8dc4:	001d      	movs	r5, r3
    8dc6:	0553      	lsls	r3, r2, #21
    8dc8:	d532      	bpl.n	8e30 <__ssputs_r+0xa8>
    8dca:	0029      	movs	r1, r5
    8dcc:	0038      	movs	r0, r7
    8dce:	f7ff fe73 	bl	8ab8 <_malloc_r>
    8dd2:	1e06      	subs	r6, r0, #0
    8dd4:	d109      	bne.n	8dea <__ssputs_r+0x62>
    8dd6:	230c      	movs	r3, #12
    8dd8:	603b      	str	r3, [r7, #0]
    8dda:	2340      	movs	r3, #64	; 0x40
    8ddc:	2001      	movs	r0, #1
    8dde:	89a2      	ldrh	r2, [r4, #12]
    8de0:	4240      	negs	r0, r0
    8de2:	4313      	orrs	r3, r2
    8de4:	81a3      	strh	r3, [r4, #12]
    8de6:	b005      	add	sp, #20
    8de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8dea:	9a02      	ldr	r2, [sp, #8]
    8dec:	6921      	ldr	r1, [r4, #16]
    8dee:	f7ff fe07 	bl	8a00 <memcpy>
    8df2:	89a3      	ldrh	r3, [r4, #12]
    8df4:	4a14      	ldr	r2, [pc, #80]	; (8e48 <__ssputs_r+0xc0>)
    8df6:	401a      	ands	r2, r3
    8df8:	2380      	movs	r3, #128	; 0x80
    8dfa:	4313      	orrs	r3, r2
    8dfc:	81a3      	strh	r3, [r4, #12]
    8dfe:	9b02      	ldr	r3, [sp, #8]
    8e00:	6126      	str	r6, [r4, #16]
    8e02:	18f6      	adds	r6, r6, r3
    8e04:	6026      	str	r6, [r4, #0]
    8e06:	6165      	str	r5, [r4, #20]
    8e08:	9e01      	ldr	r6, [sp, #4]
    8e0a:	1aed      	subs	r5, r5, r3
    8e0c:	60a5      	str	r5, [r4, #8]
    8e0e:	9b01      	ldr	r3, [sp, #4]
    8e10:	42b3      	cmp	r3, r6
    8e12:	d200      	bcs.n	8e16 <__ssputs_r+0x8e>
    8e14:	001e      	movs	r6, r3
    8e16:	0032      	movs	r2, r6
    8e18:	9903      	ldr	r1, [sp, #12]
    8e1a:	6820      	ldr	r0, [r4, #0]
    8e1c:	f000 fab9 	bl	9392 <memmove>
    8e20:	68a3      	ldr	r3, [r4, #8]
    8e22:	2000      	movs	r0, #0
    8e24:	1b9b      	subs	r3, r3, r6
    8e26:	60a3      	str	r3, [r4, #8]
    8e28:	6823      	ldr	r3, [r4, #0]
    8e2a:	199e      	adds	r6, r3, r6
    8e2c:	6026      	str	r6, [r4, #0]
    8e2e:	e7da      	b.n	8de6 <__ssputs_r+0x5e>
    8e30:	002a      	movs	r2, r5
    8e32:	0038      	movs	r0, r7
    8e34:	f000 fabf 	bl	93b6 <_realloc_r>
    8e38:	1e06      	subs	r6, r0, #0
    8e3a:	d1e0      	bne.n	8dfe <__ssputs_r+0x76>
    8e3c:	6921      	ldr	r1, [r4, #16]
    8e3e:	0038      	movs	r0, r7
    8e40:	f7ff fdf0 	bl	8a24 <_free_r>
    8e44:	e7c7      	b.n	8dd6 <__ssputs_r+0x4e>
    8e46:	46c0      	nop			; (mov r8, r8)
    8e48:	fffffb7f 	.word	0xfffffb7f

00008e4c <_svfiprintf_r>:
    8e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e4e:	b09f      	sub	sp, #124	; 0x7c
    8e50:	9002      	str	r0, [sp, #8]
    8e52:	9305      	str	r3, [sp, #20]
    8e54:	898b      	ldrh	r3, [r1, #12]
    8e56:	000f      	movs	r7, r1
    8e58:	0016      	movs	r6, r2
    8e5a:	061b      	lsls	r3, r3, #24
    8e5c:	d511      	bpl.n	8e82 <_svfiprintf_r+0x36>
    8e5e:	690b      	ldr	r3, [r1, #16]
    8e60:	2b00      	cmp	r3, #0
    8e62:	d10e      	bne.n	8e82 <_svfiprintf_r+0x36>
    8e64:	2140      	movs	r1, #64	; 0x40
    8e66:	f7ff fe27 	bl	8ab8 <_malloc_r>
    8e6a:	6038      	str	r0, [r7, #0]
    8e6c:	6138      	str	r0, [r7, #16]
    8e6e:	2800      	cmp	r0, #0
    8e70:	d105      	bne.n	8e7e <_svfiprintf_r+0x32>
    8e72:	230c      	movs	r3, #12
    8e74:	9a02      	ldr	r2, [sp, #8]
    8e76:	3801      	subs	r0, #1
    8e78:	6013      	str	r3, [r2, #0]
    8e7a:	b01f      	add	sp, #124	; 0x7c
    8e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e7e:	2340      	movs	r3, #64	; 0x40
    8e80:	617b      	str	r3, [r7, #20]
    8e82:	2300      	movs	r3, #0
    8e84:	ad06      	add	r5, sp, #24
    8e86:	616b      	str	r3, [r5, #20]
    8e88:	3320      	adds	r3, #32
    8e8a:	766b      	strb	r3, [r5, #25]
    8e8c:	3310      	adds	r3, #16
    8e8e:	76ab      	strb	r3, [r5, #26]
    8e90:	0034      	movs	r4, r6
    8e92:	7823      	ldrb	r3, [r4, #0]
    8e94:	2b00      	cmp	r3, #0
    8e96:	d147      	bne.n	8f28 <_svfiprintf_r+0xdc>
    8e98:	1ba3      	subs	r3, r4, r6
    8e9a:	9304      	str	r3, [sp, #16]
    8e9c:	d00d      	beq.n	8eba <_svfiprintf_r+0x6e>
    8e9e:	1ba3      	subs	r3, r4, r6
    8ea0:	0032      	movs	r2, r6
    8ea2:	0039      	movs	r1, r7
    8ea4:	9802      	ldr	r0, [sp, #8]
    8ea6:	f7ff ff6f 	bl	8d88 <__ssputs_r>
    8eaa:	1c43      	adds	r3, r0, #1
    8eac:	d100      	bne.n	8eb0 <_svfiprintf_r+0x64>
    8eae:	e0b5      	b.n	901c <_svfiprintf_r+0x1d0>
    8eb0:	696a      	ldr	r2, [r5, #20]
    8eb2:	9b04      	ldr	r3, [sp, #16]
    8eb4:	4694      	mov	ip, r2
    8eb6:	4463      	add	r3, ip
    8eb8:	616b      	str	r3, [r5, #20]
    8eba:	7823      	ldrb	r3, [r4, #0]
    8ebc:	2b00      	cmp	r3, #0
    8ebe:	d100      	bne.n	8ec2 <_svfiprintf_r+0x76>
    8ec0:	e0ac      	b.n	901c <_svfiprintf_r+0x1d0>
    8ec2:	2201      	movs	r2, #1
    8ec4:	2300      	movs	r3, #0
    8ec6:	4252      	negs	r2, r2
    8ec8:	606a      	str	r2, [r5, #4]
    8eca:	a902      	add	r1, sp, #8
    8ecc:	3254      	adds	r2, #84	; 0x54
    8ece:	1852      	adds	r2, r2, r1
    8ed0:	3401      	adds	r4, #1
    8ed2:	602b      	str	r3, [r5, #0]
    8ed4:	60eb      	str	r3, [r5, #12]
    8ed6:	60ab      	str	r3, [r5, #8]
    8ed8:	7013      	strb	r3, [r2, #0]
    8eda:	65ab      	str	r3, [r5, #88]	; 0x58
    8edc:	4e58      	ldr	r6, [pc, #352]	; (9040 <_svfiprintf_r+0x1f4>)
    8ede:	2205      	movs	r2, #5
    8ee0:	7821      	ldrb	r1, [r4, #0]
    8ee2:	0030      	movs	r0, r6
    8ee4:	f000 fa4a 	bl	937c <memchr>
    8ee8:	1c62      	adds	r2, r4, #1
    8eea:	2800      	cmp	r0, #0
    8eec:	d120      	bne.n	8f30 <_svfiprintf_r+0xe4>
    8eee:	6829      	ldr	r1, [r5, #0]
    8ef0:	06cb      	lsls	r3, r1, #27
    8ef2:	d504      	bpl.n	8efe <_svfiprintf_r+0xb2>
    8ef4:	2353      	movs	r3, #83	; 0x53
    8ef6:	ae02      	add	r6, sp, #8
    8ef8:	3020      	adds	r0, #32
    8efa:	199b      	adds	r3, r3, r6
    8efc:	7018      	strb	r0, [r3, #0]
    8efe:	070b      	lsls	r3, r1, #28
    8f00:	d504      	bpl.n	8f0c <_svfiprintf_r+0xc0>
    8f02:	2353      	movs	r3, #83	; 0x53
    8f04:	202b      	movs	r0, #43	; 0x2b
    8f06:	ae02      	add	r6, sp, #8
    8f08:	199b      	adds	r3, r3, r6
    8f0a:	7018      	strb	r0, [r3, #0]
    8f0c:	7823      	ldrb	r3, [r4, #0]
    8f0e:	2b2a      	cmp	r3, #42	; 0x2a
    8f10:	d016      	beq.n	8f40 <_svfiprintf_r+0xf4>
    8f12:	2000      	movs	r0, #0
    8f14:	210a      	movs	r1, #10
    8f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8f18:	7822      	ldrb	r2, [r4, #0]
    8f1a:	3a30      	subs	r2, #48	; 0x30
    8f1c:	2a09      	cmp	r2, #9
    8f1e:	d955      	bls.n	8fcc <_svfiprintf_r+0x180>
    8f20:	2800      	cmp	r0, #0
    8f22:	d015      	beq.n	8f50 <_svfiprintf_r+0x104>
    8f24:	9309      	str	r3, [sp, #36]	; 0x24
    8f26:	e013      	b.n	8f50 <_svfiprintf_r+0x104>
    8f28:	2b25      	cmp	r3, #37	; 0x25
    8f2a:	d0b5      	beq.n	8e98 <_svfiprintf_r+0x4c>
    8f2c:	3401      	adds	r4, #1
    8f2e:	e7b0      	b.n	8e92 <_svfiprintf_r+0x46>
    8f30:	2301      	movs	r3, #1
    8f32:	1b80      	subs	r0, r0, r6
    8f34:	4083      	lsls	r3, r0
    8f36:	6829      	ldr	r1, [r5, #0]
    8f38:	0014      	movs	r4, r2
    8f3a:	430b      	orrs	r3, r1
    8f3c:	602b      	str	r3, [r5, #0]
    8f3e:	e7cd      	b.n	8edc <_svfiprintf_r+0x90>
    8f40:	9b05      	ldr	r3, [sp, #20]
    8f42:	1d18      	adds	r0, r3, #4
    8f44:	681b      	ldr	r3, [r3, #0]
    8f46:	9005      	str	r0, [sp, #20]
    8f48:	2b00      	cmp	r3, #0
    8f4a:	db39      	blt.n	8fc0 <_svfiprintf_r+0x174>
    8f4c:	9309      	str	r3, [sp, #36]	; 0x24
    8f4e:	0014      	movs	r4, r2
    8f50:	7823      	ldrb	r3, [r4, #0]
    8f52:	2b2e      	cmp	r3, #46	; 0x2e
    8f54:	d10b      	bne.n	8f6e <_svfiprintf_r+0x122>
    8f56:	7863      	ldrb	r3, [r4, #1]
    8f58:	1c62      	adds	r2, r4, #1
    8f5a:	2b2a      	cmp	r3, #42	; 0x2a
    8f5c:	d13e      	bne.n	8fdc <_svfiprintf_r+0x190>
    8f5e:	9b05      	ldr	r3, [sp, #20]
    8f60:	3402      	adds	r4, #2
    8f62:	1d1a      	adds	r2, r3, #4
    8f64:	681b      	ldr	r3, [r3, #0]
    8f66:	9205      	str	r2, [sp, #20]
    8f68:	2b00      	cmp	r3, #0
    8f6a:	db34      	blt.n	8fd6 <_svfiprintf_r+0x18a>
    8f6c:	9307      	str	r3, [sp, #28]
    8f6e:	4e35      	ldr	r6, [pc, #212]	; (9044 <_svfiprintf_r+0x1f8>)
    8f70:	7821      	ldrb	r1, [r4, #0]
    8f72:	2203      	movs	r2, #3
    8f74:	0030      	movs	r0, r6
    8f76:	f000 fa01 	bl	937c <memchr>
    8f7a:	2800      	cmp	r0, #0
    8f7c:	d006      	beq.n	8f8c <_svfiprintf_r+0x140>
    8f7e:	2340      	movs	r3, #64	; 0x40
    8f80:	1b80      	subs	r0, r0, r6
    8f82:	4083      	lsls	r3, r0
    8f84:	682a      	ldr	r2, [r5, #0]
    8f86:	3401      	adds	r4, #1
    8f88:	4313      	orrs	r3, r2
    8f8a:	602b      	str	r3, [r5, #0]
    8f8c:	7821      	ldrb	r1, [r4, #0]
    8f8e:	2206      	movs	r2, #6
    8f90:	482d      	ldr	r0, [pc, #180]	; (9048 <_svfiprintf_r+0x1fc>)
    8f92:	1c66      	adds	r6, r4, #1
    8f94:	7629      	strb	r1, [r5, #24]
    8f96:	f000 f9f1 	bl	937c <memchr>
    8f9a:	2800      	cmp	r0, #0
    8f9c:	d046      	beq.n	902c <_svfiprintf_r+0x1e0>
    8f9e:	4b2b      	ldr	r3, [pc, #172]	; (904c <_svfiprintf_r+0x200>)
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d12f      	bne.n	9004 <_svfiprintf_r+0x1b8>
    8fa4:	6829      	ldr	r1, [r5, #0]
    8fa6:	9b05      	ldr	r3, [sp, #20]
    8fa8:	2207      	movs	r2, #7
    8faa:	05c9      	lsls	r1, r1, #23
    8fac:	d528      	bpl.n	9000 <_svfiprintf_r+0x1b4>
    8fae:	189b      	adds	r3, r3, r2
    8fb0:	4393      	bics	r3, r2
    8fb2:	3308      	adds	r3, #8
    8fb4:	9305      	str	r3, [sp, #20]
    8fb6:	696b      	ldr	r3, [r5, #20]
    8fb8:	9a03      	ldr	r2, [sp, #12]
    8fba:	189b      	adds	r3, r3, r2
    8fbc:	616b      	str	r3, [r5, #20]
    8fbe:	e767      	b.n	8e90 <_svfiprintf_r+0x44>
    8fc0:	425b      	negs	r3, r3
    8fc2:	60eb      	str	r3, [r5, #12]
    8fc4:	2302      	movs	r3, #2
    8fc6:	430b      	orrs	r3, r1
    8fc8:	602b      	str	r3, [r5, #0]
    8fca:	e7c0      	b.n	8f4e <_svfiprintf_r+0x102>
    8fcc:	434b      	muls	r3, r1
    8fce:	3401      	adds	r4, #1
    8fd0:	189b      	adds	r3, r3, r2
    8fd2:	2001      	movs	r0, #1
    8fd4:	e7a0      	b.n	8f18 <_svfiprintf_r+0xcc>
    8fd6:	2301      	movs	r3, #1
    8fd8:	425b      	negs	r3, r3
    8fda:	e7c7      	b.n	8f6c <_svfiprintf_r+0x120>
    8fdc:	2300      	movs	r3, #0
    8fde:	0014      	movs	r4, r2
    8fe0:	200a      	movs	r0, #10
    8fe2:	001a      	movs	r2, r3
    8fe4:	606b      	str	r3, [r5, #4]
    8fe6:	7821      	ldrb	r1, [r4, #0]
    8fe8:	3930      	subs	r1, #48	; 0x30
    8fea:	2909      	cmp	r1, #9
    8fec:	d903      	bls.n	8ff6 <_svfiprintf_r+0x1aa>
    8fee:	2b00      	cmp	r3, #0
    8ff0:	d0bd      	beq.n	8f6e <_svfiprintf_r+0x122>
    8ff2:	9207      	str	r2, [sp, #28]
    8ff4:	e7bb      	b.n	8f6e <_svfiprintf_r+0x122>
    8ff6:	4342      	muls	r2, r0
    8ff8:	3401      	adds	r4, #1
    8ffa:	1852      	adds	r2, r2, r1
    8ffc:	2301      	movs	r3, #1
    8ffe:	e7f2      	b.n	8fe6 <_svfiprintf_r+0x19a>
    9000:	3307      	adds	r3, #7
    9002:	e7d5      	b.n	8fb0 <_svfiprintf_r+0x164>
    9004:	ab05      	add	r3, sp, #20
    9006:	9300      	str	r3, [sp, #0]
    9008:	003a      	movs	r2, r7
    900a:	4b11      	ldr	r3, [pc, #68]	; (9050 <_svfiprintf_r+0x204>)
    900c:	0029      	movs	r1, r5
    900e:	9802      	ldr	r0, [sp, #8]
    9010:	e000      	b.n	9014 <_svfiprintf_r+0x1c8>
    9012:	bf00      	nop
    9014:	9003      	str	r0, [sp, #12]
    9016:	9b03      	ldr	r3, [sp, #12]
    9018:	3301      	adds	r3, #1
    901a:	d1cc      	bne.n	8fb6 <_svfiprintf_r+0x16a>
    901c:	89bb      	ldrh	r3, [r7, #12]
    901e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9020:	065b      	lsls	r3, r3, #25
    9022:	d400      	bmi.n	9026 <_svfiprintf_r+0x1da>
    9024:	e729      	b.n	8e7a <_svfiprintf_r+0x2e>
    9026:	2001      	movs	r0, #1
    9028:	4240      	negs	r0, r0
    902a:	e726      	b.n	8e7a <_svfiprintf_r+0x2e>
    902c:	ab05      	add	r3, sp, #20
    902e:	9300      	str	r3, [sp, #0]
    9030:	003a      	movs	r2, r7
    9032:	4b07      	ldr	r3, [pc, #28]	; (9050 <_svfiprintf_r+0x204>)
    9034:	0029      	movs	r1, r5
    9036:	9802      	ldr	r0, [sp, #8]
    9038:	f000 f87a 	bl	9130 <_printf_i>
    903c:	e7ea      	b.n	9014 <_svfiprintf_r+0x1c8>
    903e:	46c0      	nop			; (mov r8, r8)
    9040:	0000a7fa 	.word	0x0000a7fa
    9044:	0000a800 	.word	0x0000a800
    9048:	0000a804 	.word	0x0000a804
    904c:	00000000 	.word	0x00000000
    9050:	00008d89 	.word	0x00008d89

00009054 <_printf_common>:
    9054:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9056:	0015      	movs	r5, r2
    9058:	9301      	str	r3, [sp, #4]
    905a:	688a      	ldr	r2, [r1, #8]
    905c:	690b      	ldr	r3, [r1, #16]
    905e:	9000      	str	r0, [sp, #0]
    9060:	000c      	movs	r4, r1
    9062:	4293      	cmp	r3, r2
    9064:	da00      	bge.n	9068 <_printf_common+0x14>
    9066:	0013      	movs	r3, r2
    9068:	0022      	movs	r2, r4
    906a:	602b      	str	r3, [r5, #0]
    906c:	3243      	adds	r2, #67	; 0x43
    906e:	7812      	ldrb	r2, [r2, #0]
    9070:	2a00      	cmp	r2, #0
    9072:	d001      	beq.n	9078 <_printf_common+0x24>
    9074:	3301      	adds	r3, #1
    9076:	602b      	str	r3, [r5, #0]
    9078:	6823      	ldr	r3, [r4, #0]
    907a:	069b      	lsls	r3, r3, #26
    907c:	d502      	bpl.n	9084 <_printf_common+0x30>
    907e:	682b      	ldr	r3, [r5, #0]
    9080:	3302      	adds	r3, #2
    9082:	602b      	str	r3, [r5, #0]
    9084:	2706      	movs	r7, #6
    9086:	6823      	ldr	r3, [r4, #0]
    9088:	401f      	ands	r7, r3
    908a:	d027      	beq.n	90dc <_printf_common+0x88>
    908c:	0023      	movs	r3, r4
    908e:	3343      	adds	r3, #67	; 0x43
    9090:	781b      	ldrb	r3, [r3, #0]
    9092:	1e5a      	subs	r2, r3, #1
    9094:	4193      	sbcs	r3, r2
    9096:	6822      	ldr	r2, [r4, #0]
    9098:	0692      	lsls	r2, r2, #26
    909a:	d430      	bmi.n	90fe <_printf_common+0xaa>
    909c:	0022      	movs	r2, r4
    909e:	9901      	ldr	r1, [sp, #4]
    90a0:	3243      	adds	r2, #67	; 0x43
    90a2:	9800      	ldr	r0, [sp, #0]
    90a4:	9e08      	ldr	r6, [sp, #32]
    90a6:	47b0      	blx	r6
    90a8:	1c43      	adds	r3, r0, #1
    90aa:	d025      	beq.n	90f8 <_printf_common+0xa4>
    90ac:	2306      	movs	r3, #6
    90ae:	6820      	ldr	r0, [r4, #0]
    90b0:	682a      	ldr	r2, [r5, #0]
    90b2:	68e1      	ldr	r1, [r4, #12]
    90b4:	4003      	ands	r3, r0
    90b6:	2500      	movs	r5, #0
    90b8:	2b04      	cmp	r3, #4
    90ba:	d103      	bne.n	90c4 <_printf_common+0x70>
    90bc:	1a8d      	subs	r5, r1, r2
    90be:	43eb      	mvns	r3, r5
    90c0:	17db      	asrs	r3, r3, #31
    90c2:	401d      	ands	r5, r3
    90c4:	68a3      	ldr	r3, [r4, #8]
    90c6:	6922      	ldr	r2, [r4, #16]
    90c8:	4293      	cmp	r3, r2
    90ca:	dd01      	ble.n	90d0 <_printf_common+0x7c>
    90cc:	1a9b      	subs	r3, r3, r2
    90ce:	18ed      	adds	r5, r5, r3
    90d0:	2700      	movs	r7, #0
    90d2:	42bd      	cmp	r5, r7
    90d4:	d120      	bne.n	9118 <_printf_common+0xc4>
    90d6:	2000      	movs	r0, #0
    90d8:	e010      	b.n	90fc <_printf_common+0xa8>
    90da:	3701      	adds	r7, #1
    90dc:	68e3      	ldr	r3, [r4, #12]
    90de:	682a      	ldr	r2, [r5, #0]
    90e0:	1a9b      	subs	r3, r3, r2
    90e2:	429f      	cmp	r7, r3
    90e4:	dad2      	bge.n	908c <_printf_common+0x38>
    90e6:	0022      	movs	r2, r4
    90e8:	2301      	movs	r3, #1
    90ea:	3219      	adds	r2, #25
    90ec:	9901      	ldr	r1, [sp, #4]
    90ee:	9800      	ldr	r0, [sp, #0]
    90f0:	9e08      	ldr	r6, [sp, #32]
    90f2:	47b0      	blx	r6
    90f4:	1c43      	adds	r3, r0, #1
    90f6:	d1f0      	bne.n	90da <_printf_common+0x86>
    90f8:	2001      	movs	r0, #1
    90fa:	4240      	negs	r0, r0
    90fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    90fe:	2030      	movs	r0, #48	; 0x30
    9100:	18e1      	adds	r1, r4, r3
    9102:	3143      	adds	r1, #67	; 0x43
    9104:	7008      	strb	r0, [r1, #0]
    9106:	0021      	movs	r1, r4
    9108:	1c5a      	adds	r2, r3, #1
    910a:	3145      	adds	r1, #69	; 0x45
    910c:	7809      	ldrb	r1, [r1, #0]
    910e:	18a2      	adds	r2, r4, r2
    9110:	3243      	adds	r2, #67	; 0x43
    9112:	3302      	adds	r3, #2
    9114:	7011      	strb	r1, [r2, #0]
    9116:	e7c1      	b.n	909c <_printf_common+0x48>
    9118:	0022      	movs	r2, r4
    911a:	2301      	movs	r3, #1
    911c:	321a      	adds	r2, #26
    911e:	9901      	ldr	r1, [sp, #4]
    9120:	9800      	ldr	r0, [sp, #0]
    9122:	9e08      	ldr	r6, [sp, #32]
    9124:	47b0      	blx	r6
    9126:	1c43      	adds	r3, r0, #1
    9128:	d0e6      	beq.n	90f8 <_printf_common+0xa4>
    912a:	3701      	adds	r7, #1
    912c:	e7d1      	b.n	90d2 <_printf_common+0x7e>
	...

00009130 <_printf_i>:
    9130:	b5f0      	push	{r4, r5, r6, r7, lr}
    9132:	b08b      	sub	sp, #44	; 0x2c
    9134:	9206      	str	r2, [sp, #24]
    9136:	000a      	movs	r2, r1
    9138:	3243      	adds	r2, #67	; 0x43
    913a:	9307      	str	r3, [sp, #28]
    913c:	9005      	str	r0, [sp, #20]
    913e:	9204      	str	r2, [sp, #16]
    9140:	7e0a      	ldrb	r2, [r1, #24]
    9142:	000c      	movs	r4, r1
    9144:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9146:	2a6e      	cmp	r2, #110	; 0x6e
    9148:	d100      	bne.n	914c <_printf_i+0x1c>
    914a:	e08f      	b.n	926c <_printf_i+0x13c>
    914c:	d817      	bhi.n	917e <_printf_i+0x4e>
    914e:	2a63      	cmp	r2, #99	; 0x63
    9150:	d02c      	beq.n	91ac <_printf_i+0x7c>
    9152:	d808      	bhi.n	9166 <_printf_i+0x36>
    9154:	2a00      	cmp	r2, #0
    9156:	d100      	bne.n	915a <_printf_i+0x2a>
    9158:	e099      	b.n	928e <_printf_i+0x15e>
    915a:	2a58      	cmp	r2, #88	; 0x58
    915c:	d054      	beq.n	9208 <_printf_i+0xd8>
    915e:	0026      	movs	r6, r4
    9160:	3642      	adds	r6, #66	; 0x42
    9162:	7032      	strb	r2, [r6, #0]
    9164:	e029      	b.n	91ba <_printf_i+0x8a>
    9166:	2a64      	cmp	r2, #100	; 0x64
    9168:	d001      	beq.n	916e <_printf_i+0x3e>
    916a:	2a69      	cmp	r2, #105	; 0x69
    916c:	d1f7      	bne.n	915e <_printf_i+0x2e>
    916e:	6821      	ldr	r1, [r4, #0]
    9170:	681a      	ldr	r2, [r3, #0]
    9172:	0608      	lsls	r0, r1, #24
    9174:	d523      	bpl.n	91be <_printf_i+0x8e>
    9176:	1d11      	adds	r1, r2, #4
    9178:	6019      	str	r1, [r3, #0]
    917a:	6815      	ldr	r5, [r2, #0]
    917c:	e025      	b.n	91ca <_printf_i+0x9a>
    917e:	2a73      	cmp	r2, #115	; 0x73
    9180:	d100      	bne.n	9184 <_printf_i+0x54>
    9182:	e088      	b.n	9296 <_printf_i+0x166>
    9184:	d808      	bhi.n	9198 <_printf_i+0x68>
    9186:	2a6f      	cmp	r2, #111	; 0x6f
    9188:	d029      	beq.n	91de <_printf_i+0xae>
    918a:	2a70      	cmp	r2, #112	; 0x70
    918c:	d1e7      	bne.n	915e <_printf_i+0x2e>
    918e:	2220      	movs	r2, #32
    9190:	6809      	ldr	r1, [r1, #0]
    9192:	430a      	orrs	r2, r1
    9194:	6022      	str	r2, [r4, #0]
    9196:	e003      	b.n	91a0 <_printf_i+0x70>
    9198:	2a75      	cmp	r2, #117	; 0x75
    919a:	d020      	beq.n	91de <_printf_i+0xae>
    919c:	2a78      	cmp	r2, #120	; 0x78
    919e:	d1de      	bne.n	915e <_printf_i+0x2e>
    91a0:	0022      	movs	r2, r4
    91a2:	2178      	movs	r1, #120	; 0x78
    91a4:	3245      	adds	r2, #69	; 0x45
    91a6:	7011      	strb	r1, [r2, #0]
    91a8:	4a6c      	ldr	r2, [pc, #432]	; (935c <_printf_i+0x22c>)
    91aa:	e030      	b.n	920e <_printf_i+0xde>
    91ac:	000e      	movs	r6, r1
    91ae:	681a      	ldr	r2, [r3, #0]
    91b0:	3642      	adds	r6, #66	; 0x42
    91b2:	1d11      	adds	r1, r2, #4
    91b4:	6019      	str	r1, [r3, #0]
    91b6:	6813      	ldr	r3, [r2, #0]
    91b8:	7033      	strb	r3, [r6, #0]
    91ba:	2301      	movs	r3, #1
    91bc:	e079      	b.n	92b2 <_printf_i+0x182>
    91be:	0649      	lsls	r1, r1, #25
    91c0:	d5d9      	bpl.n	9176 <_printf_i+0x46>
    91c2:	1d11      	adds	r1, r2, #4
    91c4:	6019      	str	r1, [r3, #0]
    91c6:	2300      	movs	r3, #0
    91c8:	5ed5      	ldrsh	r5, [r2, r3]
    91ca:	2d00      	cmp	r5, #0
    91cc:	da03      	bge.n	91d6 <_printf_i+0xa6>
    91ce:	232d      	movs	r3, #45	; 0x2d
    91d0:	9a04      	ldr	r2, [sp, #16]
    91d2:	426d      	negs	r5, r5
    91d4:	7013      	strb	r3, [r2, #0]
    91d6:	4b62      	ldr	r3, [pc, #392]	; (9360 <_printf_i+0x230>)
    91d8:	270a      	movs	r7, #10
    91da:	9303      	str	r3, [sp, #12]
    91dc:	e02f      	b.n	923e <_printf_i+0x10e>
    91de:	6820      	ldr	r0, [r4, #0]
    91e0:	6819      	ldr	r1, [r3, #0]
    91e2:	0605      	lsls	r5, r0, #24
    91e4:	d503      	bpl.n	91ee <_printf_i+0xbe>
    91e6:	1d08      	adds	r0, r1, #4
    91e8:	6018      	str	r0, [r3, #0]
    91ea:	680d      	ldr	r5, [r1, #0]
    91ec:	e005      	b.n	91fa <_printf_i+0xca>
    91ee:	0640      	lsls	r0, r0, #25
    91f0:	d5f9      	bpl.n	91e6 <_printf_i+0xb6>
    91f2:	680d      	ldr	r5, [r1, #0]
    91f4:	1d08      	adds	r0, r1, #4
    91f6:	6018      	str	r0, [r3, #0]
    91f8:	b2ad      	uxth	r5, r5
    91fa:	4b59      	ldr	r3, [pc, #356]	; (9360 <_printf_i+0x230>)
    91fc:	2708      	movs	r7, #8
    91fe:	9303      	str	r3, [sp, #12]
    9200:	2a6f      	cmp	r2, #111	; 0x6f
    9202:	d018      	beq.n	9236 <_printf_i+0x106>
    9204:	270a      	movs	r7, #10
    9206:	e016      	b.n	9236 <_printf_i+0x106>
    9208:	3145      	adds	r1, #69	; 0x45
    920a:	700a      	strb	r2, [r1, #0]
    920c:	4a54      	ldr	r2, [pc, #336]	; (9360 <_printf_i+0x230>)
    920e:	9203      	str	r2, [sp, #12]
    9210:	681a      	ldr	r2, [r3, #0]
    9212:	6821      	ldr	r1, [r4, #0]
    9214:	1d10      	adds	r0, r2, #4
    9216:	6018      	str	r0, [r3, #0]
    9218:	6815      	ldr	r5, [r2, #0]
    921a:	0608      	lsls	r0, r1, #24
    921c:	d522      	bpl.n	9264 <_printf_i+0x134>
    921e:	07cb      	lsls	r3, r1, #31
    9220:	d502      	bpl.n	9228 <_printf_i+0xf8>
    9222:	2320      	movs	r3, #32
    9224:	4319      	orrs	r1, r3
    9226:	6021      	str	r1, [r4, #0]
    9228:	2710      	movs	r7, #16
    922a:	2d00      	cmp	r5, #0
    922c:	d103      	bne.n	9236 <_printf_i+0x106>
    922e:	2320      	movs	r3, #32
    9230:	6822      	ldr	r2, [r4, #0]
    9232:	439a      	bics	r2, r3
    9234:	6022      	str	r2, [r4, #0]
    9236:	0023      	movs	r3, r4
    9238:	2200      	movs	r2, #0
    923a:	3343      	adds	r3, #67	; 0x43
    923c:	701a      	strb	r2, [r3, #0]
    923e:	6863      	ldr	r3, [r4, #4]
    9240:	60a3      	str	r3, [r4, #8]
    9242:	2b00      	cmp	r3, #0
    9244:	db5c      	blt.n	9300 <_printf_i+0x1d0>
    9246:	2204      	movs	r2, #4
    9248:	6821      	ldr	r1, [r4, #0]
    924a:	4391      	bics	r1, r2
    924c:	6021      	str	r1, [r4, #0]
    924e:	2d00      	cmp	r5, #0
    9250:	d158      	bne.n	9304 <_printf_i+0x1d4>
    9252:	9e04      	ldr	r6, [sp, #16]
    9254:	2b00      	cmp	r3, #0
    9256:	d064      	beq.n	9322 <_printf_i+0x1f2>
    9258:	0026      	movs	r6, r4
    925a:	9b03      	ldr	r3, [sp, #12]
    925c:	3642      	adds	r6, #66	; 0x42
    925e:	781b      	ldrb	r3, [r3, #0]
    9260:	7033      	strb	r3, [r6, #0]
    9262:	e05e      	b.n	9322 <_printf_i+0x1f2>
    9264:	0648      	lsls	r0, r1, #25
    9266:	d5da      	bpl.n	921e <_printf_i+0xee>
    9268:	b2ad      	uxth	r5, r5
    926a:	e7d8      	b.n	921e <_printf_i+0xee>
    926c:	6809      	ldr	r1, [r1, #0]
    926e:	681a      	ldr	r2, [r3, #0]
    9270:	0608      	lsls	r0, r1, #24
    9272:	d505      	bpl.n	9280 <_printf_i+0x150>
    9274:	1d11      	adds	r1, r2, #4
    9276:	6019      	str	r1, [r3, #0]
    9278:	6813      	ldr	r3, [r2, #0]
    927a:	6962      	ldr	r2, [r4, #20]
    927c:	601a      	str	r2, [r3, #0]
    927e:	e006      	b.n	928e <_printf_i+0x15e>
    9280:	0649      	lsls	r1, r1, #25
    9282:	d5f7      	bpl.n	9274 <_printf_i+0x144>
    9284:	1d11      	adds	r1, r2, #4
    9286:	6019      	str	r1, [r3, #0]
    9288:	6813      	ldr	r3, [r2, #0]
    928a:	8aa2      	ldrh	r2, [r4, #20]
    928c:	801a      	strh	r2, [r3, #0]
    928e:	2300      	movs	r3, #0
    9290:	9e04      	ldr	r6, [sp, #16]
    9292:	6123      	str	r3, [r4, #16]
    9294:	e054      	b.n	9340 <_printf_i+0x210>
    9296:	681a      	ldr	r2, [r3, #0]
    9298:	1d11      	adds	r1, r2, #4
    929a:	6019      	str	r1, [r3, #0]
    929c:	6816      	ldr	r6, [r2, #0]
    929e:	2100      	movs	r1, #0
    92a0:	6862      	ldr	r2, [r4, #4]
    92a2:	0030      	movs	r0, r6
    92a4:	f000 f86a 	bl	937c <memchr>
    92a8:	2800      	cmp	r0, #0
    92aa:	d001      	beq.n	92b0 <_printf_i+0x180>
    92ac:	1b80      	subs	r0, r0, r6
    92ae:	6060      	str	r0, [r4, #4]
    92b0:	6863      	ldr	r3, [r4, #4]
    92b2:	6123      	str	r3, [r4, #16]
    92b4:	2300      	movs	r3, #0
    92b6:	9a04      	ldr	r2, [sp, #16]
    92b8:	7013      	strb	r3, [r2, #0]
    92ba:	e041      	b.n	9340 <_printf_i+0x210>
    92bc:	6923      	ldr	r3, [r4, #16]
    92be:	0032      	movs	r2, r6
    92c0:	9906      	ldr	r1, [sp, #24]
    92c2:	9805      	ldr	r0, [sp, #20]
    92c4:	9d07      	ldr	r5, [sp, #28]
    92c6:	47a8      	blx	r5
    92c8:	1c43      	adds	r3, r0, #1
    92ca:	d043      	beq.n	9354 <_printf_i+0x224>
    92cc:	6823      	ldr	r3, [r4, #0]
    92ce:	2500      	movs	r5, #0
    92d0:	079b      	lsls	r3, r3, #30
    92d2:	d40f      	bmi.n	92f4 <_printf_i+0x1c4>
    92d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    92d6:	68e0      	ldr	r0, [r4, #12]
    92d8:	4298      	cmp	r0, r3
    92da:	da3d      	bge.n	9358 <_printf_i+0x228>
    92dc:	0018      	movs	r0, r3
    92de:	e03b      	b.n	9358 <_printf_i+0x228>
    92e0:	0022      	movs	r2, r4
    92e2:	2301      	movs	r3, #1
    92e4:	3219      	adds	r2, #25
    92e6:	9906      	ldr	r1, [sp, #24]
    92e8:	9805      	ldr	r0, [sp, #20]
    92ea:	9e07      	ldr	r6, [sp, #28]
    92ec:	47b0      	blx	r6
    92ee:	1c43      	adds	r3, r0, #1
    92f0:	d030      	beq.n	9354 <_printf_i+0x224>
    92f2:	3501      	adds	r5, #1
    92f4:	68e3      	ldr	r3, [r4, #12]
    92f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    92f8:	1a9b      	subs	r3, r3, r2
    92fa:	429d      	cmp	r5, r3
    92fc:	dbf0      	blt.n	92e0 <_printf_i+0x1b0>
    92fe:	e7e9      	b.n	92d4 <_printf_i+0x1a4>
    9300:	2d00      	cmp	r5, #0
    9302:	d0a9      	beq.n	9258 <_printf_i+0x128>
    9304:	9e04      	ldr	r6, [sp, #16]
    9306:	0028      	movs	r0, r5
    9308:	0039      	movs	r1, r7
    930a:	f7fd fd27 	bl	6d5c <__aeabi_uidivmod>
    930e:	9b03      	ldr	r3, [sp, #12]
    9310:	3e01      	subs	r6, #1
    9312:	5c5b      	ldrb	r3, [r3, r1]
    9314:	0028      	movs	r0, r5
    9316:	7033      	strb	r3, [r6, #0]
    9318:	0039      	movs	r1, r7
    931a:	f7fd fc99 	bl	6c50 <__udivsi3>
    931e:	1e05      	subs	r5, r0, #0
    9320:	d1f1      	bne.n	9306 <_printf_i+0x1d6>
    9322:	2f08      	cmp	r7, #8
    9324:	d109      	bne.n	933a <_printf_i+0x20a>
    9326:	6823      	ldr	r3, [r4, #0]
    9328:	07db      	lsls	r3, r3, #31
    932a:	d506      	bpl.n	933a <_printf_i+0x20a>
    932c:	6863      	ldr	r3, [r4, #4]
    932e:	6922      	ldr	r2, [r4, #16]
    9330:	4293      	cmp	r3, r2
    9332:	dc02      	bgt.n	933a <_printf_i+0x20a>
    9334:	2330      	movs	r3, #48	; 0x30
    9336:	3e01      	subs	r6, #1
    9338:	7033      	strb	r3, [r6, #0]
    933a:	9b04      	ldr	r3, [sp, #16]
    933c:	1b9b      	subs	r3, r3, r6
    933e:	6123      	str	r3, [r4, #16]
    9340:	9b07      	ldr	r3, [sp, #28]
    9342:	aa09      	add	r2, sp, #36	; 0x24
    9344:	9300      	str	r3, [sp, #0]
    9346:	0021      	movs	r1, r4
    9348:	9b06      	ldr	r3, [sp, #24]
    934a:	9805      	ldr	r0, [sp, #20]
    934c:	f7ff fe82 	bl	9054 <_printf_common>
    9350:	1c43      	adds	r3, r0, #1
    9352:	d1b3      	bne.n	92bc <_printf_i+0x18c>
    9354:	2001      	movs	r0, #1
    9356:	4240      	negs	r0, r0
    9358:	b00b      	add	sp, #44	; 0x2c
    935a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    935c:	0000a81c 	.word	0x0000a81c
    9360:	0000a80b 	.word	0x0000a80b

00009364 <__ascii_wctomb>:
    9364:	1e0b      	subs	r3, r1, #0
    9366:	d004      	beq.n	9372 <__ascii_wctomb+0xe>
    9368:	2aff      	cmp	r2, #255	; 0xff
    936a:	d904      	bls.n	9376 <__ascii_wctomb+0x12>
    936c:	238a      	movs	r3, #138	; 0x8a
    936e:	6003      	str	r3, [r0, #0]
    9370:	3b8b      	subs	r3, #139	; 0x8b
    9372:	0018      	movs	r0, r3
    9374:	4770      	bx	lr
    9376:	700a      	strb	r2, [r1, #0]
    9378:	2301      	movs	r3, #1
    937a:	e7fa      	b.n	9372 <__ascii_wctomb+0xe>

0000937c <memchr>:
    937c:	b2c9      	uxtb	r1, r1
    937e:	1882      	adds	r2, r0, r2
    9380:	4290      	cmp	r0, r2
    9382:	d101      	bne.n	9388 <memchr+0xc>
    9384:	2000      	movs	r0, #0
    9386:	4770      	bx	lr
    9388:	7803      	ldrb	r3, [r0, #0]
    938a:	428b      	cmp	r3, r1
    938c:	d0fb      	beq.n	9386 <memchr+0xa>
    938e:	3001      	adds	r0, #1
    9390:	e7f6      	b.n	9380 <memchr+0x4>

00009392 <memmove>:
    9392:	b510      	push	{r4, lr}
    9394:	4288      	cmp	r0, r1
    9396:	d902      	bls.n	939e <memmove+0xc>
    9398:	188b      	adds	r3, r1, r2
    939a:	4298      	cmp	r0, r3
    939c:	d308      	bcc.n	93b0 <memmove+0x1e>
    939e:	2300      	movs	r3, #0
    93a0:	429a      	cmp	r2, r3
    93a2:	d007      	beq.n	93b4 <memmove+0x22>
    93a4:	5ccc      	ldrb	r4, [r1, r3]
    93a6:	54c4      	strb	r4, [r0, r3]
    93a8:	3301      	adds	r3, #1
    93aa:	e7f9      	b.n	93a0 <memmove+0xe>
    93ac:	5c8b      	ldrb	r3, [r1, r2]
    93ae:	5483      	strb	r3, [r0, r2]
    93b0:	3a01      	subs	r2, #1
    93b2:	d2fb      	bcs.n	93ac <memmove+0x1a>
    93b4:	bd10      	pop	{r4, pc}

000093b6 <_realloc_r>:
    93b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93b8:	0007      	movs	r7, r0
    93ba:	000d      	movs	r5, r1
    93bc:	0016      	movs	r6, r2
    93be:	2900      	cmp	r1, #0
    93c0:	d105      	bne.n	93ce <_realloc_r+0x18>
    93c2:	0011      	movs	r1, r2
    93c4:	f7ff fb78 	bl	8ab8 <_malloc_r>
    93c8:	0004      	movs	r4, r0
    93ca:	0020      	movs	r0, r4
    93cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93ce:	2a00      	cmp	r2, #0
    93d0:	d103      	bne.n	93da <_realloc_r+0x24>
    93d2:	f7ff fb27 	bl	8a24 <_free_r>
    93d6:	0034      	movs	r4, r6
    93d8:	e7f7      	b.n	93ca <_realloc_r+0x14>
    93da:	f000 f812 	bl	9402 <_malloc_usable_size_r>
    93de:	002c      	movs	r4, r5
    93e0:	4286      	cmp	r6, r0
    93e2:	d9f2      	bls.n	93ca <_realloc_r+0x14>
    93e4:	0031      	movs	r1, r6
    93e6:	0038      	movs	r0, r7
    93e8:	f7ff fb66 	bl	8ab8 <_malloc_r>
    93ec:	1e04      	subs	r4, r0, #0
    93ee:	d0ec      	beq.n	93ca <_realloc_r+0x14>
    93f0:	0029      	movs	r1, r5
    93f2:	0032      	movs	r2, r6
    93f4:	f7ff fb04 	bl	8a00 <memcpy>
    93f8:	0029      	movs	r1, r5
    93fa:	0038      	movs	r0, r7
    93fc:	f7ff fb12 	bl	8a24 <_free_r>
    9400:	e7e3      	b.n	93ca <_realloc_r+0x14>

00009402 <_malloc_usable_size_r>:
    9402:	1f0b      	subs	r3, r1, #4
    9404:	681b      	ldr	r3, [r3, #0]
    9406:	1f18      	subs	r0, r3, #4
    9408:	2b00      	cmp	r3, #0
    940a:	da01      	bge.n	9410 <_malloc_usable_size_r+0xe>
    940c:	580b      	ldr	r3, [r1, r0]
    940e:	18c0      	adds	r0, r0, r3
    9410:	4770      	bx	lr
    9412:	0000      	movs	r0, r0
    9414:	00082008 	.word	0x00082008
    9418:	65636341 	.word	0x65636341
    941c:	6172656c 	.word	0x6172656c
    9420:	6e6f6974 	.word	0x6e6f6974
    9424:	676d5b20 	.word	0x676d5b20
    9428:	20583a5d 	.word	0x20583a5d
    942c:	59096425 	.word	0x59096425
    9430:	09642520 	.word	0x09642520
    9434:	6425205a 	.word	0x6425205a
    9438:	00000a0d 	.word	0x00000a0d
    943c:	64206f4e 	.word	0x64206f4e
    9440:	20617461 	.word	0x20617461
    9444:	64616572 	.word	0x64616572
    9448:	0d202179 	.word	0x0d202179
    944c:	0000000a 	.word	0x0000000a
    9450:	64757453 	.word	0x64757453
    9454:	73746e65 	.word	0x73746e65
    9458:	206f7420 	.word	0x206f7420
    945c:	6c6c6966 	.word	0x6c6c6966
    9460:	74756f20 	.word	0x74756f20
    9464:	00000021 	.word	0x00000021
    9468:	00736c63 	.word	0x00736c63
    946c:	3a736c63 	.word	0x3a736c63
    9470:	656c4320 	.word	0x656c4320
    9474:	20737261 	.word	0x20737261
    9478:	20656874 	.word	0x20656874
    947c:	6d726574 	.word	0x6d726574
    9480:	6c616e69 	.word	0x6c616e69
    9484:	72637320 	.word	0x72637320
    9488:	0d6e6565 	.word	0x0d6e6565
    948c:	0000000a 	.word	0x0000000a
    9490:	0064656c 	.word	0x0064656c
    9494:	2064656c 	.word	0x2064656c
    9498:	79656b5b 	.word	0x79656b5b
    949c:	5d6d756e 	.word	0x5d6d756e
    94a0:	5b5d525b 	.word	0x5b5d525b
    94a4:	425b5d47 	.word	0x425b5d47
    94a8:	53203a5d 	.word	0x53203a5d
    94ac:	20737465 	.word	0x20737465
    94b0:	20656874 	.word	0x20656874
    94b4:	65766967 	.word	0x65766967
    94b8:	454c206e 	.word	0x454c206e
    94bc:	6f742044 	.word	0x6f742044
    94c0:	65687420 	.word	0x65687420
    94c4:	76696720 	.word	0x76696720
    94c8:	52206e65 	.word	0x52206e65
    94cc:	422c472c 	.word	0x422c472c
    94d0:	6c617620 	.word	0x6c617620
    94d4:	2e736575 	.word	0x2e736575
    94d8:	00000a0d 	.word	0x00000a0d
    94dc:	65736572 	.word	0x65736572
    94e0:	00000074 	.word	0x00000074
    94e4:	65736572 	.word	0x65736572
    94e8:	52203a74 	.word	0x52203a74
    94ec:	74657365 	.word	0x74657365
    94f0:	68742073 	.word	0x68742073
    94f4:	65642065 	.word	0x65642065
    94f8:	65636976 	.word	0x65636976
    94fc:	00000a0d 	.word	0x00000a0d
    9500:	00756d69 	.word	0x00756d69
    9504:	3a756d69 	.word	0x3a756d69
    9508:	74655220 	.word	0x74655220
    950c:	736e7275 	.word	0x736e7275
    9510:	76206120 	.word	0x76206120
    9514:	65756c61 	.word	0x65756c61
    9518:	6f726620 	.word	0x6f726620
    951c:	6874206d 	.word	0x6874206d
    9520:	4d492065 	.word	0x4d492065
    9524:	000a0d55 	.word	0x000a0d55
    9528:	65657246 	.word	0x65657246
    952c:	534f5452 	.word	0x534f5452
    9530:	494c4320 	.word	0x494c4320
    9534:	540a0d2e 	.word	0x540a0d2e
    9538:	20657079 	.word	0x20657079
    953c:	706c6548 	.word	0x706c6548
    9540:	206f7420 	.word	0x206f7420
    9544:	77656976 	.word	0x77656976
    9548:	6c206120 	.word	0x6c206120
    954c:	20747369 	.word	0x20747369
    9550:	7220666f 	.word	0x7220666f
    9554:	73696765 	.word	0x73696765
    9558:	65726574 	.word	0x65726574
    955c:	6f632064 	.word	0x6f632064
    9560:	6e616d6d 	.word	0x6e616d6d
    9564:	0d2e7364 	.word	0x0d2e7364
    9568:	0000000a 	.word	0x0000000a
    956c:	6c756f43 	.word	0x6c756f43
    9570:	6f6e2064 	.word	0x6f6e2064
    9574:	6c612074 	.word	0x6c612074
    9578:	61636f6c 	.word	0x61636f6c
    957c:	73206574 	.word	0x73206574
    9580:	70616d65 	.word	0x70616d65
    9584:	65726f68 	.word	0x65726f68
    9588:	00000a0d 	.word	0x00000a0d
    958c:	0000616f 	.word	0x0000616f
    9590:	325b6325 	.word	0x325b6325
    9594:	003e0d4b 	.word	0x003e0d4b

00009598 <xClearScreen>:
    9598:	00009468 0000946c 00000541 00000000     h...l...A.......
    95a8:	325b6325 0000004a                       %c[2J...

000095b0 <xImuGetCommand>:
    95b0:	00009500 00009504 0000048d 00000000     ................

000095c0 <xNeotrellisTurnLEDCommand>:
    95c0:	00009490 00009494 0000056d 00000004     ........m.......

000095d0 <xResetCommand>:
    95d0:	000094dc 000094e4 00000475 00000000     ........u.......
    95e0:	00001010 0000050e 6f727245 6e692072     ........Error in
    95f0:	61697469 697a696c 5320676e 61736565     itializing Seesa
    9600:	0a0d2177 00000000 6f727245 2f722f72     w!......Error/r/
    9610:	0000006e 6e756f46 65532064 77617365     n...Found Seesaw
    9620:	2f722f21 0000006e 6c756f43 6f6e2064     !/r/n...Could no
    9630:	72772074 20657469 73656553 70207761     t write Seesaw p
    9640:	2f216e69 006e2f72 6c756f43 6f6e2064     in!/r/n.Could no
    9650:	65732074 65732074 77617365 6f654e20     t set seesaw Neo
    9660:	65786970 7073206c 21646565 6e2f722f     pixel speed!/r/n
    9670:	00000000 6c756f43 6f6e2064 65732074     ....Could not se
    9680:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
    9690:	756e206c 7265626d 20666f20 69766564     l number of devi
    96a0:	2f736563 006e2f72 6c756f43 6f6e2064     ces/r/n.Could no
    96b0:	6e692074 61697469 657a696c 79654b20     t initialize Key
    96c0:	21646170 6e2f722f 00000000              pad!/r/n....

000096cc <msgBaseGetHWID>:
    96cc:	00000100                                ....

000096d0 <msgKeypadEnableInt>:
    96d0:	00010210                                ....

000096d4 <msgNeopixelBufLength>:
    96d4:	3000030e                                ...0

000096d8 <msgNeopixelPin>:
    96d8:	0003010e                                ....

000096dc <msgNeopixelSpeed>:
    96dc:	0001020e 54204955 206b7361 72617453     ....UI Task Star
    96ec:	21646574 00000000 6f636e49 63657272     ted!....Incorrec
    96fc:	6f632074 6e616d6d 61702064 656d6172     t command parame
    970c:	28726574 202e2973 746e4520 22207265     ter(s).  Enter "
    971c:	706c6568 6f742022 65697620 20612077     help" to view a 
    972c:	7473696c 20666f20 69617661 6c62616c     list of availabl
    973c:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
    974c:	6d6d6f43 20646e61 20746f6e 6f636572     Command not reco
    975c:	73696e67 202e6465 746e4520 27207265     gnised.  Enter '
    976c:	706c6568 6f742027 65697620 20612077     help' to view a 
    977c:	7473696c 20666f20 69617661 6c62616c     list of availabl
    978c:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
    979c:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
    97ac:	694c200a 20737473 206c6c61 20656874     . Lists all the 
    97bc:	69676572 72657473 63206465 616d6d6f     registered comma
    97cc:	0d73646e 000a0d0a                       nds.....

000097d4 <xHelpCommand>:
    97d4:	0000979c 000097a4 000017b5 00000000     ................
    97e4:	00001bbc 00001bb4 00001bb8 00001bd4     ................
    97f4:	00001bb0 00001bc0 00001bc4 00001bc8     ................
    9804:	00001bcc 20746f4e 756f6e65 54206867     ....Not enough T
    9814:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
    9824:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
    9834:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
    9844:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
    9854:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
    9864:	2d207365 636e6920 73616572 52542065     es - increase TR
    9874:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
    9884:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9894:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
    98a4:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
    98b4:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    98c4:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
    98d4:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
    98e4:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
    98f4:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
    9904:	69202d20 6572636e 20657361 5f435254      - increase TRC_
    9914:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
    9924:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9934:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
    9944:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
    9954:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
    9964:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
    9974:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
    9984:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
    9994:	6e616820 73656c64 69202d20 6572636e      handles - incre
    99a4:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
    99b4:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
    99c4:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
    99d4:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
    99e4:	61682050 656c646e 202d2073 72636e69     P handles - incr
    99f4:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
    9a04:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
    9a14:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
    9a24:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
    9a34:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
    9a44:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
    9a54:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
    9a64:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
    9a74:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
    9a84:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
    9a94:	6e616820 73656c64 69202d20 6572636e      handles - incre
    9aa4:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
    9ab4:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
    9ac4:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
    9ad4:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
    9ae4:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
    9af4:	64696c61 6a626f20 63746365 7373616c     alid objectclass
    9b04:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
    9b14:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
    9b24:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
    9b34:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
    9b44:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
    9b54:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
    9b64:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
    9b74:	6f6d2074 00296564 43415254 53415f45     t mode).TRACE_AS
    9b84:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
    9b94:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
    9ba4:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
    9bb4:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
    9bc4:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
    9bd4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    9be4:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
    9bf4:	696c6176 61762064 2065756c 20726f66     valid value for 
    9c04:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
    9c14:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
    9c24:	206e6920 54767270 65636172 44746547      in prvTraceGetD
    9c34:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
    9c44:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
    9c54:	48746365 6c646e61 49203a65 6c61766e     ectHandle: Inval
    9c64:	76206469 65756c61 726f6620 6a626f20     id value for obj
    9c74:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    9c84:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
    9c94:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
    9ca4:	2064696c 756c6176 6f662065 61702072     lid value for pa
    9cb4:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
    9cc4:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
    9cd4:	69725074 7469726f 6f725079 74726570     tPriorityPropert
    9ce4:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
    9cf4:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
    9d04:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    9d14:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
    9d24:	7469726f 6f725079 74726570 49203a79     orityProperty: I
    9d34:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    9d44:	00646920 63617254 65522065 64726f63      id.Trace Record
    9d54:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
    9d64:	69206f74 7865646e 74756f20 65646973     to index outside
    9d74:	65766520 6220746e 65666675 00002172      event buffer!..
    9d84:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    9d94:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
    9da4:	3a656d61 6d616e20 3d3d2065 4c554e20     ame: name == NUL
    9db4:	0000004c 656c6c49 206c6167 656a626f     L...Illegal obje
    9dc4:	63207463 7373616c 206e6920 54767270     ct class in prvT
    9dd4:	65636172 4f746553 63656a62 6d614e74     raceSetObjectNam
    9de4:	00000065 656c6c49 206c6167 646e6168     e...Illegal hand
    9df4:	2820656c 69202930 7270206e 61725476     le (0) in prvTra
    9e04:	65536563 6a624f74 4e746365 2e656d61     ceSetObjectName.
    9e14:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
    9e24:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
    9e34:	53746365 65746174 626f203a 7463656a     ectState: object
    9e44:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
    9e54:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
    9e64:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
    9e74:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
    9e84:	696c6176 61762064 2065756c 20726f66     valid value for 
    9e94:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
    9ea4:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
    9eb4:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
    9ec4:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
    9ed4:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
    9ee4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    9ef4:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
    9f04:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
    9f14:	76206469 65756c61 726f6620 00646920     id value for id.
    9f24:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    9f34:	61725476 65536563 73615474 736e496b     vTraceSetTaskIns
    9f44:	636e6174 6e694665 65687369 49203a64     tanceFinished: I
    9f54:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    9f64:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
    9f74:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    9f84:	4b65726f 656e7265 6c61436c 65203a6c     oreKernelCall: e
    9f94:	65646f63 203d3e20 46467830 00000000     code >= 0xFF....
    9fa4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    9fb4:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
    9fc4:	6c61436c 6f203a6c 63656a62 616c4374     lCall: objectCla
    9fd4:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
    9fe4:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
    9ff4:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a004:	4b65726f 656e7265 6c61436c 49203a6c     oreKernelCall: I
    a014:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a024:	6a626f20 4e746365 65626d75 00000072      objectNumber...
    a034:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a044:	68676968 69727020 7469726f 53492079     high priority IS
    a054:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a064:	29322820 00000000 43415254 53415f45      (2)....TRACE_AS
    a074:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a084:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a094:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
    a0a4:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
    a0b4:	726f6620 74766520 65646f63 00000000      for evtcode....
    a0c4:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a0d4:	68676968 69727020 7469726f 53492079     high priority IS
    a0e4:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a0f4:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
    a104:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a114:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a124:	72615068 203a6d61 63747665 2065646f     hParam: evtcode 
    a134:	30203d3e 00464678 43415254 53415f45     >= 0xFF.TRACE_AS
    a144:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a154:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a164:	72615068 203a6d61 656a626f 6c437463     hParam: objectCl
    a174:	20737361 54203d3e 45434152 4c434e5f     ass >= TRACE_NCL
    a184:	45535341 00000053 43415254 53415f45     ASSES...TRACE_AS
    a194:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a1a4:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
    a1b4:	72615068 203a6d61 61766e49 2064696c     hParam: Invalid 
    a1c4:	756c6176 6f662065 626f2072 7463656a     value for object
    a1d4:	626d754e 00007265 6f636552 72656472     Number..Recorder
    a1e4:	73756220 202d2079 68676968 69727020      busy - high pri
    a1f4:	7469726f 53492079 73752052 20676e69     ority ISR using 
    a204:	63737973 3f6c6c61 29332820 00000000     syscall? (3)....
    a214:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a224:	61725476 74536563 5465726f 526b7361     vTraceStoreTaskR
    a234:	79646165 6e49203a 696c6176 61762064     eady: Invalid va
    a244:	2065756c 20726f66 646e6168 0000656c     lue for handle..
    a254:	6f636552 72656472 73756220 202d2079     Recorder busy - 
    a264:	68676968 69727020 7469726f 53492079     high priority IS
    a274:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
    a284:	29312820 00000000 43415254 53415f45      (1)....TRACE_AS
    a294:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
    a2a4:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
    a2b4:	6c61766e 76206469 65756c61 726f6620     nvalid value for
    a2c4:	73617420 61685f6b 656c646e 00000000      task_handle....
    a2d4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
    a2e4:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
    a2f4:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
    a304:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
    a314:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    a324:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    a334:	76206469 65756c61 726f6620 6a626f20     id value for obj
    a344:	63746365 7373616c 00000000 43415254     ectclass....TRAC
    a354:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
    a364:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
    a374:	76206469 65756c61 726f6620 6a626f20     id value for obj
    a384:	68746365 6c646e61 00000065 43415254     ecthandle...TRAC
    a394:	53415f45 54524553 6552203a 64726f63     E_ASSERT: Record
    a3a4:	6e207265 6920746f 6974696e 7a696c61     er not initializ
    a3b4:	202e6465 20657355 61725476 6e456563     ed. Use vTraceEn
    a3c4:	656c6261 69202928 6574736e 00216461     able() instead!.
    a3d4:	61747328 70757472 00000029 43415254     (startup)...TRAC
    a3e4:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
    a3f4:	69676552 72657473 69727453 203a676e     RegisterString: 
    a404:	6562616c 3d3d206c 4c554e20 0000004c     label == NULL...
    a414:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
    a424:	64726f63 6e207265 6920746f 6974696e     corder not initi
    a434:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
    a444:	45656361 6c62616e 20292865 73726966     aceEnable() firs
    a454:	00002174 454c4449 00000000 00005144     t!..IDLE....DQ..
    a464:	00005144 00005144 000050bc 00005186     DQ..DQ...P...Q..
    a474:	000051a0 00005144 00005144 000050bc     .Q..DQ..DQ...P..
    a484:	00005186 20726d54 00637653 42000800     .Q..Tmr Svc....B
    a494:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    a4a4:	42001c00 00006132 0000612e 0000612e     ...B2a...a...a..
    a4b4:	00006194 00006194 00006146 00006138     .a...a..Fa..8a..
    a4c4:	0000614c 00006182 000062c0 000062a0     La...a...b...b..
    a4d4:	000062a0 0000632c 000062b2 000062ce     .b..,c...b...b..
    a4e4:	000062a4 000062dc 0000631c              .b...b...c..

0000a4f0 <_tcc_intflag>:
    a4f0:	00000001 00000002 00000004 00000008     ................
    a500:	00001000 00002000 00004000 00008000     ..... ...@......
    a510:	00010000 00020000 00040000 00080000     ................
    a520:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
    a530:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
    a540:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
    a550:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
    a560:	6e692072 61697469 697a696c 4920676e     r initializing I
    a570:	44204332 65766972 0a0d2172 00000000     2C Driver!......
    a580:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
    a590:	76697244 0d217265 0000000a 74696e49     Driver!.....Init
    a5a0:	696c6169 2064657a 73656553 0d217761     ialized Seesaw!.
    a5b0:	0000000a 6e6e6143 6620746f 20646e69     ....Cannot find 
    a5c0:	21554d49 00000a0d 20554d49 6e756f66     IMU!....IMU foun
    a5d0:	0a0d2164 00000000 20554d49 74696e69     d!......IMU init
    a5e0:	696c6169 2164657a 00000a0d 6c756f43     ialized!....Coul
    a5f0:	6f6e2064 6e692074 61697469 657a696c     d not initialize
    a600:	554d4920 00000a0d 70616548 66656220      IMU....Heap bef
    a610:	2065726f 72617473 676e6974 73617420     ore starting tas
    a620:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
    a630:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
    a640:	73617420 6f63206b 20646c75 20746f6e      task could not 
    a650:	69206562 6974696e 7a696c61 0d216465     be initialized!.
    a660:	0000000a 70616548 74666120 73207265     ....Heap after s
    a670:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
    a680:	0000000a 54204955 006b7361 3a525245     ....UI Task.ERR:
    a690:	20495520 6b736174 756f6320 6e20646c      UI task could n
    a6a0:	6220746f 6e692065 61697469 657a696c     ot be initialize
    a6b0:	0a0d2164 00000000 70616548 74666120     d!......Heap aft
    a6c0:	73207265 74726174 20676e69 54204955     er starting UI T
    a6d0:	3a6b7361 0d642520 0000000a 6f727245     ask: %d.....Erro
    a6e0:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
    a6f0:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
    a700:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
    a710:	61747320 6f206b63 66726576 20776f6c      stack overflow 
    a720:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
    a730:	00006ee8 00006e38 00006e38 00006e36     .n..8n..8n..6n..
    a740:	00006eda 00006eda 00006ed0 00006e36     .n...n...n..6n..
    a750:	00006eda 00006ed0 00006eda 00006e36     .n...n...n..6n..
    a760:	00006ee0 00006ee0 00006ee0 00006f70     .n...n...n..po..
    a770:	000078f4 000078d6 00007890 000077ae     .x...x...x...w..
    a780:	00007890 000078c8 00007890 000077ae     .x...x...x...w..
    a790:	000078d6 000078d6 000078c8 000077ae     .x...x...x...w..
    a7a0:	000077a6 000077a6 000077a6 00007b0c     .w...w...w...{..
    a7b0:	00007f54 00007e14 00007e14 00007e10     T....~...~...~..
    a7c0:	00007f2c 00007f2c 00007f1e 00007e10     ,...,........~..
    a7d0:	00007f2c 00007f1e 00007f2c 00007e10     ,.......,....~..
    a7e0:	00007f34 00007f34 00007f34 00008138     4...4...4...8...
    a7f0:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    a800:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    a810:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    a820:	37363534 62613938 66656463 20200000              456789abcdef.

0000a82d <_ctype_>:
    a82d:	20202000 20202020 28282020 20282828     .         ((((( 
    a83d:	20202020 20202020 20202020 20202020                     
    a84d:	10108820 10101010 10101010 10101010      ...............
    a85d:	04040410 04040404 10040404 10101010     ................
    a86d:	41411010 41414141 01010101 01010101     ..AAAAAA........
    a87d:	01010101 01010101 01010101 10101010     ................
    a88d:	42421010 42424242 02020202 02020202     ..BBBBBB........
    a89d:	02020202 02020202 02020202 10101010     ................
    a8ad:	00000020 00000000 00000000 00000000      ...............
	...

0000a930 <_init>:
    a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a932:	46c0      	nop			; (mov r8, r8)
    a934:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a936:	bc08      	pop	{r3}
    a938:	469e      	mov	lr, r3
    a93a:	4770      	bx	lr

0000a93c <__init_array_start>:
    a93c:	000000dd 	.word	0x000000dd

0000a940 <_fini>:
    a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a942:	46c0      	nop			; (mov r8, r8)
    a944:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a946:	bc08      	pop	{r3}
    a948:	469e      	mov	lr, r3
    a94a:	4770      	bx	lr

0000a94c <__fini_array_start>:
    a94c:	000000b5 	.word	0x000000b5
