
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00029298  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003b298  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005a24  20000300  0003b5a0  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005d24  00040fc4  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   0013fbac  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011ae0  00000000  00000000  0016ff2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017661  00000000  00000000  00181a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003ef0  00000000  00000000  0019906e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003b10  00000000  00000000  0019cf5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00043258  00000000  00000000  001a0a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00062f22  00000000  00000000  001e3cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c40e8  00000000  00000000  00246be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000ecac  00000000  00000000  0030acd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	28 7d 00 20 a1 bc 02 00 99 bd 02 00 99 bd 02 00     (}. ............
	...
   1202c:	0d af 01 00 00 00 00 00 00 00 00 00 31 b0 01 00     ............1...
   1203c:	79 b0 01 00 99 bd 02 00 99 bd 02 00 99 bd 02 00     y...............
   1204c:	f1 7d 02 00 1d 73 02 00 99 bd 02 00 91 36 01 00     .}...s.......6..
   1205c:	99 bd 02 00 d5 37 01 00 95 84 02 00 ad 84 02 00     .....7..........
   1206c:	c5 84 02 00 dd 84 02 00 f5 84 02 00 0d 85 02 00     ................
   1207c:	e9 bb 02 00 fd bb 02 00 11 bc 02 00 f9 8b 01 00     ................
   1208c:	0d 8c 01 00 21 8c 01 00 00 00 00 00 00 00 00 00     ....!...........
   1209c:	19 35 01 00 99 bd 02 00 55 36 01 00 99 bd 02 00     .5......U6......
   120ac:	99 bd 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003b298 	.word	0x0003b298

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003b298 	.word	0x0003b298
   1210c:	0003b298 	.word	0x0003b298
   12110:	00000000 	.word	0x00000000

00012114 <GPSSensorRead>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t GPSSensorRead(char *gps, const TickType_t xMaxBlockTime)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
   1211c:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   1211e:	2300      	movs	r3, #0
   12120:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = GPSSensorGetMutex(WAIT_I2C_LINE_MS);
   12122:	2396      	movs	r3, #150	; 0x96
   12124:	005b      	lsls	r3, r3, #1
   12126:	0018      	movs	r0, r3
   12128:	4b21      	ldr	r3, [pc, #132]	; (121b0 <GPSSensorRead+0x9c>)
   1212a:	4798      	blx	r3
   1212c:	0003      	movs	r3, r0
   1212e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   12130:	68fb      	ldr	r3, [r7, #12]
   12132:	2b00      	cmp	r3, #0
   12134:	d131      	bne.n	1219a <GPSSensorRead+0x86>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    GPSTx = GPS_READ;
   12136:	4b1f      	ldr	r3, [pc, #124]	; (121b4 <GPSSensorRead+0xa0>)
   12138:	2255      	movs	r2, #85	; 0x55
   1213a:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_GPS, (uint8_t *)&GPSTx, 1)) {
   1213c:	491d      	ldr	r1, [pc, #116]	; (121b4 <GPSSensorRead+0xa0>)
   1213e:	4b1e      	ldr	r3, [pc, #120]	; (121b8 <GPSSensorRead+0xa4>)
   12140:	2201      	movs	r2, #1
   12142:	0018      	movs	r0, r3
   12144:	4b1d      	ldr	r3, [pc, #116]	; (121bc <GPSSensorRead+0xa8>)
   12146:	4798      	blx	r3
   12148:	1e03      	subs	r3, r0, #0
   1214a:	d128      	bne.n	1219e <GPSSensorRead+0x8a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorGPSSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   1214c:	4b1c      	ldr	r3, [pc, #112]	; (121c0 <GPSSensorRead+0xac>)
   1214e:	681b      	ldr	r3, [r3, #0]
   12150:	683a      	ldr	r2, [r7, #0]
   12152:	0011      	movs	r1, r2
   12154:	0018      	movs	r0, r3
   12156:	4b1b      	ldr	r3, [pc, #108]	; (121c4 <GPSSensorRead+0xb0>)
   12158:	4798      	blx	r3
   1215a:	0003      	movs	r3, r0
   1215c:	2b01      	cmp	r3, #1
   1215e:	d003      	beq.n	12168 <GPSSensorRead+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   12160:	2303      	movs	r3, #3
   12162:	425b      	negs	r3, r3
   12164:	60fb      	str	r3, [r7, #12]
        goto exitf;
   12166:	e01b      	b.n	121a0 <GPSSensorRead+0x8c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_GPS, (uint8_t *)&latestRxGPS, 2);  // Kicks off constant reading of characters
   12168:	4917      	ldr	r1, [pc, #92]	; (121c8 <GPSSensorRead+0xb4>)
   1216a:	4b13      	ldr	r3, [pc, #76]	; (121b8 <GPSSensorRead+0xa4>)
   1216c:	2202      	movs	r2, #2
   1216e:	0018      	movs	r0, r3
   12170:	4b16      	ldr	r3, [pc, #88]	; (121cc <GPSSensorRead+0xb8>)
   12172:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorGPSSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   12174:	4b12      	ldr	r3, [pc, #72]	; (121c0 <GPSSensorRead+0xac>)
   12176:	681b      	ldr	r3, [r3, #0]
   12178:	683a      	ldr	r2, [r7, #0]
   1217a:	0011      	movs	r1, r2
   1217c:	0018      	movs	r0, r3
   1217e:	4b11      	ldr	r3, [pc, #68]	; (121c4 <GPSSensorRead+0xb0>)
   12180:	4798      	blx	r3
   12182:	0003      	movs	r3, r0
   12184:	2b01      	cmp	r3, #1
   12186:	d104      	bne.n	12192 <GPSSensorRead+0x7e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *gps = (latestRxGPS[0] << 8) + latestRxGPS[1];
   12188:	4b0f      	ldr	r3, [pc, #60]	; (121c8 <GPSSensorRead+0xb4>)
   1218a:	785a      	ldrb	r2, [r3, #1]
   1218c:	687b      	ldr	r3, [r7, #4]
   1218e:	701a      	strb	r2, [r3, #0]
   12190:	e006      	b.n	121a0 <GPSSensorRead+0x8c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   12192:	2303      	movs	r3, #3
   12194:	425b      	negs	r3, r3
   12196:	60fb      	str	r3, [r7, #12]
        goto exitf;
   12198:	e002      	b.n	121a0 <GPSSensorRead+0x8c>
    if (ERROR_NONE != error) goto exitf;
   1219a:	46c0      	nop			; (mov r8, r8)
   1219c:	e000      	b.n	121a0 <GPSSensorRead+0x8c>
        goto exitf;
   1219e:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    GPSSensorFreeMutex();
   121a0:	4b0b      	ldr	r3, [pc, #44]	; (121d0 <GPSSensorRead+0xbc>)
   121a2:	4798      	blx	r3

    return error;
   121a4:	68fb      	ldr	r3, [r7, #12]
}
   121a6:	0018      	movs	r0, r3
   121a8:	46bd      	mov	sp, r7
   121aa:	b004      	add	sp, #16
   121ac:	bd80      	pop	{r7, pc}
   121ae:	46c0      	nop			; (mov r8, r8)
   121b0:	0001220d 	.word	0x0001220d
   121b4:	2000476a 	.word	0x2000476a
   121b8:	20004734 	.word	0x20004734
   121bc:	00029cb1 	.word	0x00029cb1
   121c0:	2000476c 	.word	0x2000476c
   121c4:	0001c26d 	.word	0x0001c26d
   121c8:	20004768 	.word	0x20004768
   121cc:	00029cf9 	.word	0x00029cf9
   121d0:	000121d5 	.word	0x000121d5

000121d4 <GPSSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t GPSSensorFreeMutex(void)
{
   121d4:	b590      	push	{r4, r7, lr}
   121d6:	b083      	sub	sp, #12
   121d8:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   121da:	2300      	movs	r3, #0
   121dc:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorGPSMutexHandle) != pdTRUE) {
   121de:	4b09      	ldr	r3, [pc, #36]	; (12204 <GPSSensorFreeMutex+0x30>)
   121e0:	6818      	ldr	r0, [r3, #0]
   121e2:	2300      	movs	r3, #0
   121e4:	2200      	movs	r2, #0
   121e6:	2100      	movs	r1, #0
   121e8:	4c07      	ldr	r4, [pc, #28]	; (12208 <GPSSensorFreeMutex+0x34>)
   121ea:	47a0      	blx	r4
   121ec:	0003      	movs	r3, r0
   121ee:	2b01      	cmp	r3, #1
   121f0:	d002      	beq.n	121f8 <GPSSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   121f2:	2314      	movs	r3, #20
   121f4:	425b      	negs	r3, r3
   121f6:	607b      	str	r3, [r7, #4]
    }
    return error;
   121f8:	687b      	ldr	r3, [r7, #4]
}
   121fa:	0018      	movs	r0, r3
   121fc:	46bd      	mov	sp, r7
   121fe:	b003      	add	sp, #12
   12200:	bd90      	pop	{r4, r7, pc}
   12202:	46c0      	nop			; (mov r8, r8)
   12204:	20004730 	.word	0x20004730
   12208:	0001b55d 	.word	0x0001b55d

0001220c <GPSSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t GPSSensorGetMutex(TickType_t waitTime)
{
   1220c:	b580      	push	{r7, lr}
   1220e:	b084      	sub	sp, #16
   12210:	af00      	add	r7, sp, #0
   12212:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   12214:	2300      	movs	r3, #0
   12216:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorGPSMutexHandle, waitTime) != pdTRUE) {
   12218:	4b08      	ldr	r3, [pc, #32]	; (1223c <GPSSensorGetMutex+0x30>)
   1221a:	681b      	ldr	r3, [r3, #0]
   1221c:	687a      	ldr	r2, [r7, #4]
   1221e:	0011      	movs	r1, r2
   12220:	0018      	movs	r0, r3
   12222:	4b07      	ldr	r3, [pc, #28]	; (12240 <GPSSensorGetMutex+0x34>)
   12224:	4798      	blx	r3
   12226:	0003      	movs	r3, r0
   12228:	2b01      	cmp	r3, #1
   1222a:	d002      	beq.n	12232 <GPSSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   1222c:	231d      	movs	r3, #29
   1222e:	425b      	negs	r3, r3
   12230:	60fb      	str	r3, [r7, #12]
    }
    return error;
   12232:	68fb      	ldr	r3, [r7, #12]
   12234:	0018      	movs	r0, r3
   12236:	46bd      	mov	sp, r7
   12238:	b004      	add	sp, #16
   1223a:	bd80      	pop	{r7, pc}
   1223c:	20004730 	.word	0x20004730
   12240:	0001c26d 	.word	0x0001c26d

00012244 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12244:	b580      	push	{r7, lr}
   12246:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12248:	46c0      	nop			; (mov r8, r8)
   1224a:	46bd      	mov	sp, r7
   1224c:	bd80      	pop	{r7, pc}

0001224e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1224e:	b580      	push	{r7, lr}
   12250:	af00      	add	r7, sp, #0

}
   12252:	46c0      	nop			; (mov r8, r8)
   12254:	46bd      	mov	sp, r7
   12256:	bd80      	pop	{r7, pc}

00012258 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12258:	b580      	push	{r7, lr}
   1225a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1225c:	4b25      	ldr	r3, [pc, #148]	; (122f4 <ssd1306_init+0x9c>)
   1225e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12260:	4b25      	ldr	r3, [pc, #148]	; (122f8 <ssd1306_init+0xa0>)
   12262:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12264:	20ae      	movs	r0, #174	; 0xae
   12266:	4b25      	ldr	r3, [pc, #148]	; (122fc <ssd1306_init+0xa4>)
   12268:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1226a:	20d5      	movs	r0, #213	; 0xd5
   1226c:	4b23      	ldr	r3, [pc, #140]	; (122fc <ssd1306_init+0xa4>)
   1226e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12270:	2080      	movs	r0, #128	; 0x80
   12272:	4b22      	ldr	r3, [pc, #136]	; (122fc <ssd1306_init+0xa4>)
   12274:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12276:	20a8      	movs	r0, #168	; 0xa8
   12278:	4b20      	ldr	r3, [pc, #128]	; (122fc <ssd1306_init+0xa4>)
   1227a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1227c:	202f      	movs	r0, #47	; 0x2f
   1227e:	4b1f      	ldr	r3, [pc, #124]	; (122fc <ssd1306_init+0xa4>)
   12280:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12282:	20d3      	movs	r0, #211	; 0xd3
   12284:	4b1d      	ldr	r3, [pc, #116]	; (122fc <ssd1306_init+0xa4>)
   12286:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12288:	2000      	movs	r0, #0
   1228a:	4b1c      	ldr	r3, [pc, #112]	; (122fc <ssd1306_init+0xa4>)
   1228c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1228e:	2040      	movs	r0, #64	; 0x40
   12290:	4b1a      	ldr	r3, [pc, #104]	; (122fc <ssd1306_init+0xa4>)
   12292:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12294:	208d      	movs	r0, #141	; 0x8d
   12296:	4b19      	ldr	r3, [pc, #100]	; (122fc <ssd1306_init+0xa4>)
   12298:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1229a:	2014      	movs	r0, #20
   1229c:	4b17      	ldr	r3, [pc, #92]	; (122fc <ssd1306_init+0xa4>)
   1229e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   122a0:	20a6      	movs	r0, #166	; 0xa6
   122a2:	4b16      	ldr	r3, [pc, #88]	; (122fc <ssd1306_init+0xa4>)
   122a4:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   122a6:	20a4      	movs	r0, #164	; 0xa4
   122a8:	4b14      	ldr	r3, [pc, #80]	; (122fc <ssd1306_init+0xa4>)
   122aa:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   122ac:	20a1      	movs	r0, #161	; 0xa1
   122ae:	4b13      	ldr	r3, [pc, #76]	; (122fc <ssd1306_init+0xa4>)
   122b0:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   122b2:	20c8      	movs	r0, #200	; 0xc8
   122b4:	4b11      	ldr	r3, [pc, #68]	; (122fc <ssd1306_init+0xa4>)
   122b6:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   122b8:	20da      	movs	r0, #218	; 0xda
   122ba:	4b10      	ldr	r3, [pc, #64]	; (122fc <ssd1306_init+0xa4>)
   122bc:	4798      	blx	r3
	ssd1306_write_command(0x12);
   122be:	2012      	movs	r0, #18
   122c0:	4b0e      	ldr	r3, [pc, #56]	; (122fc <ssd1306_init+0xa4>)
   122c2:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   122c4:	2081      	movs	r0, #129	; 0x81
   122c6:	4b0d      	ldr	r3, [pc, #52]	; (122fc <ssd1306_init+0xa4>)
   122c8:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   122ca:	208f      	movs	r0, #143	; 0x8f
   122cc:	4b0b      	ldr	r3, [pc, #44]	; (122fc <ssd1306_init+0xa4>)
   122ce:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   122d0:	20d9      	movs	r0, #217	; 0xd9
   122d2:	4b0a      	ldr	r3, [pc, #40]	; (122fc <ssd1306_init+0xa4>)
   122d4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   122d6:	20f1      	movs	r0, #241	; 0xf1
   122d8:	4b08      	ldr	r3, [pc, #32]	; (122fc <ssd1306_init+0xa4>)
   122da:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   122dc:	20db      	movs	r0, #219	; 0xdb
   122de:	4b07      	ldr	r3, [pc, #28]	; (122fc <ssd1306_init+0xa4>)
   122e0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   122e2:	2040      	movs	r0, #64	; 0x40
   122e4:	4b05      	ldr	r3, [pc, #20]	; (122fc <ssd1306_init+0xa4>)
   122e6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   122e8:	20af      	movs	r0, #175	; 0xaf
   122ea:	4b04      	ldr	r3, [pc, #16]	; (122fc <ssd1306_init+0xa4>)
   122ec:	4798      	blx	r3

}
   122ee:	46c0      	nop			; (mov r8, r8)
   122f0:	46bd      	mov	sp, r7
   122f2:	bd80      	pop	{r7, pc}
   122f4:	0001224f 	.word	0x0001224f
   122f8:	00012245 	.word	0x00012245
   122fc:	00012301 	.word	0x00012301

00012300 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   12300:	b580      	push	{r7, lr}
   12302:	b084      	sub	sp, #16
   12304:	af00      	add	r7, sp, #0
   12306:	0002      	movs	r2, r0
   12308:	1dfb      	adds	r3, r7, #7
   1230a:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   1230c:	230c      	movs	r3, #12
   1230e:	18fb      	adds	r3, r7, r3
   12310:	2200      	movs	r2, #0
   12312:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   12314:	230c      	movs	r3, #12
   12316:	18fb      	adds	r3, r7, r3
   12318:	1dfa      	adds	r2, r7, #7
   1231a:	7812      	ldrb	r2, [r2, #0]
   1231c:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   1231e:	4b0c      	ldr	r3, [pc, #48]	; (12350 <ssd1306_write_command+0x50>)
   12320:	223d      	movs	r2, #61	; 0x3d
   12322:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   12324:	4b0a      	ldr	r3, [pc, #40]	; (12350 <ssd1306_write_command+0x50>)
   12326:	220c      	movs	r2, #12
   12328:	18ba      	adds	r2, r7, r2
   1232a:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   1232c:	4b08      	ldr	r3, [pc, #32]	; (12350 <ssd1306_write_command+0x50>)
   1232e:	2202      	movs	r2, #2
   12330:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12332:	4b07      	ldr	r3, [pc, #28]	; (12350 <ssd1306_write_command+0x50>)
   12334:	2200      	movs	r2, #0
   12336:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12338:	4b05      	ldr	r3, [pc, #20]	; (12350 <ssd1306_write_command+0x50>)
   1233a:	2200      	movs	r2, #0
   1233c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1233e:	4b04      	ldr	r3, [pc, #16]	; (12350 <ssd1306_write_command+0x50>)
   12340:	2164      	movs	r1, #100	; 0x64
   12342:	0018      	movs	r0, r3
   12344:	4b03      	ldr	r3, [pc, #12]	; (12354 <ssd1306_write_command+0x54>)
   12346:	4798      	blx	r3
}
   12348:	46c0      	nop			; (mov r8, r8)
   1234a:	46bd      	mov	sp, r7
   1234c:	b004      	add	sp, #16
   1234e:	bd80      	pop	{r7, pc}
   12350:	200047ac 	.word	0x200047ac
   12354:	00015451 	.word	0x00015451

00012358 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12358:	b580      	push	{r7, lr}
   1235a:	b084      	sub	sp, #16
   1235c:	af00      	add	r7, sp, #0
   1235e:	0002      	movs	r2, r0
   12360:	1dfb      	adds	r3, r7, #7
   12362:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12364:	230c      	movs	r3, #12
   12366:	18fb      	adds	r3, r7, r3
   12368:	2240      	movs	r2, #64	; 0x40
   1236a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1236c:	230c      	movs	r3, #12
   1236e:	18fb      	adds	r3, r7, r3
   12370:	1dfa      	adds	r2, r7, #7
   12372:	7812      	ldrb	r2, [r2, #0]
   12374:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12376:	4b0c      	ldr	r3, [pc, #48]	; (123a8 <ssd1306_write_data+0x50>)
   12378:	223d      	movs	r2, #61	; 0x3d
   1237a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1237c:	4b0a      	ldr	r3, [pc, #40]	; (123a8 <ssd1306_write_data+0x50>)
   1237e:	220c      	movs	r2, #12
   12380:	18ba      	adds	r2, r7, r2
   12382:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12384:	4b08      	ldr	r3, [pc, #32]	; (123a8 <ssd1306_write_data+0x50>)
   12386:	2202      	movs	r2, #2
   12388:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1238a:	4b07      	ldr	r3, [pc, #28]	; (123a8 <ssd1306_write_data+0x50>)
   1238c:	2200      	movs	r2, #0
   1238e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12390:	4b05      	ldr	r3, [pc, #20]	; (123a8 <ssd1306_write_data+0x50>)
   12392:	2200      	movs	r2, #0
   12394:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12396:	4b04      	ldr	r3, [pc, #16]	; (123a8 <ssd1306_write_data+0x50>)
   12398:	2164      	movs	r1, #100	; 0x64
   1239a:	0018      	movs	r0, r3
   1239c:	4b03      	ldr	r3, [pc, #12]	; (123ac <ssd1306_write_data+0x54>)
   1239e:	4798      	blx	r3
}
   123a0:	46c0      	nop			; (mov r8, r8)
   123a2:	46bd      	mov	sp, r7
   123a4:	b004      	add	sp, #16
   123a6:	bd80      	pop	{r7, pc}
   123a8:	200047ac 	.word	0x200047ac
   123ac:	00015451 	.word	0x00015451

000123b0 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   123b0:	b580      	push	{r7, lr}
   123b2:	b082      	sub	sp, #8
   123b4:	af00      	add	r7, sp, #0
   123b6:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   123b8:	4b03      	ldr	r3, [pc, #12]	; (123c8 <gfx_mono_set_framebuffer+0x18>)
   123ba:	687a      	ldr	r2, [r7, #4]
   123bc:	601a      	str	r2, [r3, #0]
}
   123be:	46c0      	nop			; (mov r8, r8)
   123c0:	46bd      	mov	sp, r7
   123c2:	b002      	add	sp, #8
   123c4:	bd80      	pop	{r7, pc}
   123c6:	46c0      	nop			; (mov r8, r8)
   123c8:	2000031c 	.word	0x2000031c

000123cc <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   123cc:	b590      	push	{r4, r7, lr}
   123ce:	b083      	sub	sp, #12
   123d0:	af00      	add	r7, sp, #0
   123d2:	0004      	movs	r4, r0
   123d4:	0008      	movs	r0, r1
   123d6:	0011      	movs	r1, r2
   123d8:	1dfb      	adds	r3, r7, #7
   123da:	1c22      	adds	r2, r4, #0
   123dc:	701a      	strb	r2, [r3, #0]
   123de:	1dbb      	adds	r3, r7, #6
   123e0:	1c02      	adds	r2, r0, #0
   123e2:	701a      	strb	r2, [r3, #0]
   123e4:	1d7b      	adds	r3, r7, #5
   123e6:	1c0a      	adds	r2, r1, #0
   123e8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   123ea:	4b08      	ldr	r3, [pc, #32]	; (1240c <gfx_mono_framebuffer_put_byte+0x40>)
   123ec:	681a      	ldr	r2, [r3, #0]
   123ee:	1dfb      	adds	r3, r7, #7
   123f0:	781b      	ldrb	r3, [r3, #0]
   123f2:	019b      	lsls	r3, r3, #6
   123f4:	0019      	movs	r1, r3
   123f6:	1dbb      	adds	r3, r7, #6
   123f8:	781b      	ldrb	r3, [r3, #0]
   123fa:	18cb      	adds	r3, r1, r3
   123fc:	18d3      	adds	r3, r2, r3
   123fe:	1d7a      	adds	r2, r7, #5
   12400:	7812      	ldrb	r2, [r2, #0]
   12402:	701a      	strb	r2, [r3, #0]
}
   12404:	46c0      	nop			; (mov r8, r8)
   12406:	46bd      	mov	sp, r7
   12408:	b003      	add	sp, #12
   1240a:	bd90      	pop	{r4, r7, pc}
   1240c:	2000031c 	.word	0x2000031c

00012410 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12410:	b580      	push	{r7, lr}
   12412:	b082      	sub	sp, #8
   12414:	af00      	add	r7, sp, #0
   12416:	0002      	movs	r2, r0
   12418:	1dfb      	adds	r3, r7, #7
   1241a:	701a      	strb	r2, [r3, #0]
   1241c:	1dbb      	adds	r3, r7, #6
   1241e:	1c0a      	adds	r2, r1, #0
   12420:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   12422:	4b07      	ldr	r3, [pc, #28]	; (12440 <gfx_mono_framebuffer_get_byte+0x30>)
   12424:	681a      	ldr	r2, [r3, #0]
   12426:	1dfb      	adds	r3, r7, #7
   12428:	781b      	ldrb	r3, [r3, #0]
   1242a:	019b      	lsls	r3, r3, #6
   1242c:	0019      	movs	r1, r3
   1242e:	1dbb      	adds	r3, r7, #6
   12430:	781b      	ldrb	r3, [r3, #0]
   12432:	18cb      	adds	r3, r1, r3
   12434:	18d3      	adds	r3, r2, r3
   12436:	781b      	ldrb	r3, [r3, #0]
}
   12438:	0018      	movs	r0, r3
   1243a:	46bd      	mov	sp, r7
   1243c:	b002      	add	sp, #8
   1243e:	bd80      	pop	{r7, pc}
   12440:	2000031c 	.word	0x2000031c

00012444 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12444:	b5b0      	push	{r4, r5, r7, lr}
   12446:	b084      	sub	sp, #16
   12448:	af00      	add	r7, sp, #0
   1244a:	0005      	movs	r5, r0
   1244c:	000c      	movs	r4, r1
   1244e:	0010      	movs	r0, r2
   12450:	0019      	movs	r1, r3
   12452:	1dfb      	adds	r3, r7, #7
   12454:	1c2a      	adds	r2, r5, #0
   12456:	701a      	strb	r2, [r3, #0]
   12458:	1dbb      	adds	r3, r7, #6
   1245a:	1c22      	adds	r2, r4, #0
   1245c:	701a      	strb	r2, [r3, #0]
   1245e:	1d7b      	adds	r3, r7, #5
   12460:	1c02      	adds	r2, r0, #0
   12462:	701a      	strb	r2, [r3, #0]
   12464:	1d3b      	adds	r3, r7, #4
   12466:	1c0a      	adds	r2, r1, #0
   12468:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1246a:	1dfb      	adds	r3, r7, #7
   1246c:	781a      	ldrb	r2, [r3, #0]
   1246e:	1d7b      	adds	r3, r7, #5
   12470:	781b      	ldrb	r3, [r3, #0]
   12472:	18d3      	adds	r3, r2, r3
   12474:	2b40      	cmp	r3, #64	; 0x40
   12476:	dd05      	ble.n	12484 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12478:	1d7b      	adds	r3, r7, #5
   1247a:	1dfa      	adds	r2, r7, #7
   1247c:	7812      	ldrb	r2, [r2, #0]
   1247e:	2140      	movs	r1, #64	; 0x40
   12480:	1a8a      	subs	r2, r1, r2
   12482:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12484:	230f      	movs	r3, #15
   12486:	18fb      	adds	r3, r7, r3
   12488:	1dba      	adds	r2, r7, #6
   1248a:	7812      	ldrb	r2, [r2, #0]
   1248c:	08d2      	lsrs	r2, r2, #3
   1248e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12490:	1dbb      	adds	r3, r7, #6
   12492:	781a      	ldrb	r2, [r3, #0]
   12494:	230f      	movs	r3, #15
   12496:	18fb      	adds	r3, r7, r3
   12498:	781b      	ldrb	r3, [r3, #0]
   1249a:	00db      	lsls	r3, r3, #3
   1249c:	1ad3      	subs	r3, r2, r3
   1249e:	2201      	movs	r2, #1
   124a0:	409a      	lsls	r2, r3
   124a2:	230e      	movs	r3, #14
   124a4:	18fb      	adds	r3, r7, r3
   124a6:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   124a8:	1d7b      	adds	r3, r7, #5
   124aa:	781b      	ldrb	r3, [r3, #0]
   124ac:	2b00      	cmp	r3, #0
   124ae:	d100      	bne.n	124b2 <gfx_mono_generic_draw_horizontal_line+0x6e>
   124b0:	e0a4      	b.n	125fc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   124b2:	1d3b      	adds	r3, r7, #4
   124b4:	781b      	ldrb	r3, [r3, #0]
   124b6:	2b01      	cmp	r3, #1
   124b8:	d02f      	beq.n	1251a <gfx_mono_generic_draw_horizontal_line+0xd6>
   124ba:	2b02      	cmp	r3, #2
   124bc:	d100      	bne.n	124c0 <gfx_mono_generic_draw_horizontal_line+0x7c>
   124be:	e095      	b.n	125ec <gfx_mono_generic_draw_horizontal_line+0x1a8>
   124c0:	2b00      	cmp	r3, #0
   124c2:	d061      	beq.n	12588 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   124c4:	e09b      	b.n	125fe <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   124c6:	1dfa      	adds	r2, r7, #7
   124c8:	1d7b      	adds	r3, r7, #5
   124ca:	7812      	ldrb	r2, [r2, #0]
   124cc:	781b      	ldrb	r3, [r3, #0]
   124ce:	18d3      	adds	r3, r2, r3
   124d0:	b2da      	uxtb	r2, r3
   124d2:	230d      	movs	r3, #13
   124d4:	18fc      	adds	r4, r7, r3
   124d6:	230f      	movs	r3, #15
   124d8:	18fb      	adds	r3, r7, r3
   124da:	781b      	ldrb	r3, [r3, #0]
   124dc:	0011      	movs	r1, r2
   124de:	0018      	movs	r0, r3
   124e0:	4b48      	ldr	r3, [pc, #288]	; (12604 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   124e2:	4798      	blx	r3
   124e4:	0003      	movs	r3, r0
   124e6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   124e8:	230d      	movs	r3, #13
   124ea:	18fb      	adds	r3, r7, r3
   124ec:	220d      	movs	r2, #13
   124ee:	18b9      	adds	r1, r7, r2
   124f0:	220e      	movs	r2, #14
   124f2:	18ba      	adds	r2, r7, r2
   124f4:	7809      	ldrb	r1, [r1, #0]
   124f6:	7812      	ldrb	r2, [r2, #0]
   124f8:	430a      	orrs	r2, r1
   124fa:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   124fc:	1dfa      	adds	r2, r7, #7
   124fe:	1d7b      	adds	r3, r7, #5
   12500:	7812      	ldrb	r2, [r2, #0]
   12502:	781b      	ldrb	r3, [r3, #0]
   12504:	18d3      	adds	r3, r2, r3
   12506:	b2d9      	uxtb	r1, r3
   12508:	230d      	movs	r3, #13
   1250a:	18fb      	adds	r3, r7, r3
   1250c:	781a      	ldrb	r2, [r3, #0]
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	7818      	ldrb	r0, [r3, #0]
   12514:	2300      	movs	r3, #0
   12516:	4c3c      	ldr	r4, [pc, #240]	; (12608 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12518:	47a0      	blx	r4
		while (length-- > 0) {
   1251a:	1d7b      	adds	r3, r7, #5
   1251c:	781b      	ldrb	r3, [r3, #0]
   1251e:	1d7a      	adds	r2, r7, #5
   12520:	1e59      	subs	r1, r3, #1
   12522:	7011      	strb	r1, [r2, #0]
   12524:	2b00      	cmp	r3, #0
   12526:	d1ce      	bne.n	124c6 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   12528:	e069      	b.n	125fe <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   1252a:	1dfa      	adds	r2, r7, #7
   1252c:	1d7b      	adds	r3, r7, #5
   1252e:	7812      	ldrb	r2, [r2, #0]
   12530:	781b      	ldrb	r3, [r3, #0]
   12532:	18d3      	adds	r3, r2, r3
   12534:	b2da      	uxtb	r2, r3
   12536:	230d      	movs	r3, #13
   12538:	18fc      	adds	r4, r7, r3
   1253a:	230f      	movs	r3, #15
   1253c:	18fb      	adds	r3, r7, r3
   1253e:	781b      	ldrb	r3, [r3, #0]
   12540:	0011      	movs	r1, r2
   12542:	0018      	movs	r0, r3
   12544:	4b2f      	ldr	r3, [pc, #188]	; (12604 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12546:	4798      	blx	r3
   12548:	0003      	movs	r3, r0
   1254a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1254c:	230e      	movs	r3, #14
   1254e:	18fb      	adds	r3, r7, r3
   12550:	781b      	ldrb	r3, [r3, #0]
   12552:	b25b      	sxtb	r3, r3
   12554:	43db      	mvns	r3, r3
   12556:	b25b      	sxtb	r3, r3
   12558:	220d      	movs	r2, #13
   1255a:	18ba      	adds	r2, r7, r2
   1255c:	7812      	ldrb	r2, [r2, #0]
   1255e:	b252      	sxtb	r2, r2
   12560:	4013      	ands	r3, r2
   12562:	b25a      	sxtb	r2, r3
   12564:	230d      	movs	r3, #13
   12566:	18fb      	adds	r3, r7, r3
   12568:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1256a:	1dfa      	adds	r2, r7, #7
   1256c:	1d7b      	adds	r3, r7, #5
   1256e:	7812      	ldrb	r2, [r2, #0]
   12570:	781b      	ldrb	r3, [r3, #0]
   12572:	18d3      	adds	r3, r2, r3
   12574:	b2d9      	uxtb	r1, r3
   12576:	230d      	movs	r3, #13
   12578:	18fb      	adds	r3, r7, r3
   1257a:	781a      	ldrb	r2, [r3, #0]
   1257c:	230f      	movs	r3, #15
   1257e:	18fb      	adds	r3, r7, r3
   12580:	7818      	ldrb	r0, [r3, #0]
   12582:	2300      	movs	r3, #0
   12584:	4c20      	ldr	r4, [pc, #128]	; (12608 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12586:	47a0      	blx	r4
		while (length-- > 0) {
   12588:	1d7b      	adds	r3, r7, #5
   1258a:	781b      	ldrb	r3, [r3, #0]
   1258c:	1d7a      	adds	r2, r7, #5
   1258e:	1e59      	subs	r1, r3, #1
   12590:	7011      	strb	r1, [r2, #0]
   12592:	2b00      	cmp	r3, #0
   12594:	d1c9      	bne.n	1252a <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12596:	e032      	b.n	125fe <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12598:	1dfa      	adds	r2, r7, #7
   1259a:	1d7b      	adds	r3, r7, #5
   1259c:	7812      	ldrb	r2, [r2, #0]
   1259e:	781b      	ldrb	r3, [r3, #0]
   125a0:	18d3      	adds	r3, r2, r3
   125a2:	b2da      	uxtb	r2, r3
   125a4:	230d      	movs	r3, #13
   125a6:	18fc      	adds	r4, r7, r3
   125a8:	230f      	movs	r3, #15
   125aa:	18fb      	adds	r3, r7, r3
   125ac:	781b      	ldrb	r3, [r3, #0]
   125ae:	0011      	movs	r1, r2
   125b0:	0018      	movs	r0, r3
   125b2:	4b14      	ldr	r3, [pc, #80]	; (12604 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   125b4:	4798      	blx	r3
   125b6:	0003      	movs	r3, r0
   125b8:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   125ba:	230d      	movs	r3, #13
   125bc:	18fb      	adds	r3, r7, r3
   125be:	220d      	movs	r2, #13
   125c0:	18b9      	adds	r1, r7, r2
   125c2:	220e      	movs	r2, #14
   125c4:	18ba      	adds	r2, r7, r2
   125c6:	7809      	ldrb	r1, [r1, #0]
   125c8:	7812      	ldrb	r2, [r2, #0]
   125ca:	404a      	eors	r2, r1
   125cc:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   125ce:	1dfa      	adds	r2, r7, #7
   125d0:	1d7b      	adds	r3, r7, #5
   125d2:	7812      	ldrb	r2, [r2, #0]
   125d4:	781b      	ldrb	r3, [r3, #0]
   125d6:	18d3      	adds	r3, r2, r3
   125d8:	b2d9      	uxtb	r1, r3
   125da:	230d      	movs	r3, #13
   125dc:	18fb      	adds	r3, r7, r3
   125de:	781a      	ldrb	r2, [r3, #0]
   125e0:	230f      	movs	r3, #15
   125e2:	18fb      	adds	r3, r7, r3
   125e4:	7818      	ldrb	r0, [r3, #0]
   125e6:	2300      	movs	r3, #0
   125e8:	4c07      	ldr	r4, [pc, #28]	; (12608 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   125ea:	47a0      	blx	r4
		while (length-- > 0) {
   125ec:	1d7b      	adds	r3, r7, #5
   125ee:	781b      	ldrb	r3, [r3, #0]
   125f0:	1d7a      	adds	r2, r7, #5
   125f2:	1e59      	subs	r1, r3, #1
   125f4:	7011      	strb	r1, [r2, #0]
   125f6:	2b00      	cmp	r3, #0
   125f8:	d1ce      	bne.n	12598 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   125fa:	e000      	b.n	125fe <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   125fc:	46c0      	nop			; (mov r8, r8)
	}
}
   125fe:	46bd      	mov	sp, r7
   12600:	b004      	add	sp, #16
   12602:	bdb0      	pop	{r4, r5, r7, pc}
   12604:	00013259 	.word	0x00013259
   12608:	000131b9 	.word	0x000131b9

0001260c <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   1260c:	b5b0      	push	{r4, r5, r7, lr}
   1260e:	b084      	sub	sp, #16
   12610:	af00      	add	r7, sp, #0
   12612:	0005      	movs	r5, r0
   12614:	000c      	movs	r4, r1
   12616:	0010      	movs	r0, r2
   12618:	0019      	movs	r1, r3
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	1c2a      	adds	r2, r5, #0
   1261e:	701a      	strb	r2, [r3, #0]
   12620:	1dbb      	adds	r3, r7, #6
   12622:	1c22      	adds	r2, r4, #0
   12624:	701a      	strb	r2, [r3, #0]
   12626:	1d7b      	adds	r3, r7, #5
   12628:	1c02      	adds	r2, r0, #0
   1262a:	701a      	strb	r2, [r3, #0]
   1262c:	1d3b      	adds	r3, r7, #4
   1262e:	1c0a      	adds	r2, r1, #0
   12630:	701a      	strb	r2, [r3, #0]
	if (length == 0) {
   12632:	1d7b      	adds	r3, r7, #5
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2b00      	cmp	r3, #0
   12638:	d100      	bne.n	1263c <gfx_mono_generic_draw_vertical_line+0x30>
   1263a:	e0a7      	b.n	1278c <gfx_mono_generic_draw_vertical_line+0x180>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
   1263c:	1dba      	adds	r2, r7, #6
   1263e:	1d7b      	adds	r3, r7, #5
   12640:	7812      	ldrb	r2, [r2, #0]
   12642:	781b      	ldrb	r3, [r3, #0]
   12644:	18d3      	adds	r3, r2, r3
   12646:	b2da      	uxtb	r2, r3
   12648:	230f      	movs	r3, #15
   1264a:	18fb      	adds	r3, r7, r3
   1264c:	3a01      	subs	r2, #1
   1264e:	701a      	strb	r2, [r3, #0]

	if (y == y2) {
   12650:	1dba      	adds	r2, r7, #6
   12652:	230f      	movs	r3, #15
   12654:	18fb      	adds	r3, r7, r3
   12656:	7812      	ldrb	r2, [r2, #0]
   12658:	781b      	ldrb	r3, [r3, #0]
   1265a:	429a      	cmp	r2, r3
   1265c:	d109      	bne.n	12672 <gfx_mono_generic_draw_vertical_line+0x66>
		gfx_mono_draw_pixel(x, y, color);
   1265e:	1d3b      	adds	r3, r7, #4
   12660:	781a      	ldrb	r2, [r3, #0]
   12662:	1dbb      	adds	r3, r7, #6
   12664:	7819      	ldrb	r1, [r3, #0]
   12666:	1dfb      	adds	r3, r7, #7
   12668:	781b      	ldrb	r3, [r3, #0]
   1266a:	0018      	movs	r0, r3
   1266c:	4b49      	ldr	r3, [pc, #292]	; (12794 <gfx_mono_generic_draw_vertical_line+0x188>)
   1266e:	4798      	blx	r3
		return;
   12670:	e08d      	b.n	1278e <gfx_mono_generic_draw_vertical_line+0x182>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
   12672:	230f      	movs	r3, #15
   12674:	18fb      	adds	r3, r7, r3
   12676:	781b      	ldrb	r3, [r3, #0]
   12678:	2b2e      	cmp	r3, #46	; 0x2e
   1267a:	d903      	bls.n	12684 <gfx_mono_generic_draw_vertical_line+0x78>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
   1267c:	230f      	movs	r3, #15
   1267e:	18fb      	adds	r3, r7, r3
   12680:	222f      	movs	r2, #47	; 0x2f
   12682:	701a      	strb	r2, [r3, #0]
	}

	gfx_coord_t y1page = y / 8;
   12684:	230e      	movs	r3, #14
   12686:	18fb      	adds	r3, r7, r3
   12688:	1dba      	adds	r2, r7, #6
   1268a:	7812      	ldrb	r2, [r2, #0]
   1268c:	08d2      	lsrs	r2, r2, #3
   1268e:	701a      	strb	r2, [r3, #0]
	gfx_coord_t y2page = y2 / 8;
   12690:	230d      	movs	r3, #13
   12692:	18fb      	adds	r3, r7, r3
   12694:	220f      	movs	r2, #15
   12696:	18ba      	adds	r2, r7, r2
   12698:	7812      	ldrb	r2, [r2, #0]
   1269a:	08d2      	lsrs	r2, r2, #3
   1269c:	701a      	strb	r2, [r3, #0]

	uint8_t y1bitpos = y & 0x07;
   1269e:	230c      	movs	r3, #12
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	1dba      	adds	r2, r7, #6
   126a4:	7812      	ldrb	r2, [r2, #0]
   126a6:	2107      	movs	r1, #7
   126a8:	400a      	ands	r2, r1
   126aa:	701a      	strb	r2, [r3, #0]
	uint8_t y2bitpos = y2 & 0x07;
   126ac:	230b      	movs	r3, #11
   126ae:	18fb      	adds	r3, r7, r3
   126b0:	220f      	movs	r2, #15
   126b2:	18ba      	adds	r2, r7, r2
   126b4:	7812      	ldrb	r2, [r2, #0]
   126b6:	2107      	movs	r1, #7
   126b8:	400a      	ands	r2, r1
   126ba:	701a      	strb	r2, [r3, #0]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
   126bc:	230c      	movs	r3, #12
   126be:	18fb      	adds	r3, r7, r3
   126c0:	781b      	ldrb	r3, [r3, #0]
   126c2:	22ff      	movs	r2, #255	; 0xff
   126c4:	409a      	lsls	r2, r3
   126c6:	230a      	movs	r3, #10
   126c8:	18fb      	adds	r3, r7, r3
   126ca:	701a      	strb	r2, [r3, #0]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
   126cc:	230b      	movs	r3, #11
   126ce:	18fb      	adds	r3, r7, r3
   126d0:	781b      	ldrb	r3, [r3, #0]
   126d2:	2207      	movs	r2, #7
   126d4:	1ad3      	subs	r3, r2, r3
   126d6:	22ff      	movs	r2, #255	; 0xff
   126d8:	411a      	asrs	r2, r3
   126da:	2309      	movs	r3, #9
   126dc:	18fb      	adds	r3, r7, r3
   126de:	701a      	strb	r2, [r3, #0]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
   126e0:	230e      	movs	r3, #14
   126e2:	18fa      	adds	r2, r7, r3
   126e4:	230d      	movs	r3, #13
   126e6:	18fb      	adds	r3, r7, r3
   126e8:	7812      	ldrb	r2, [r2, #0]
   126ea:	781b      	ldrb	r3, [r3, #0]
   126ec:	429a      	cmp	r2, r3
   126ee:	d117      	bne.n	12720 <gfx_mono_generic_draw_vertical_line+0x114>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
   126f0:	2308      	movs	r3, #8
   126f2:	18fb      	adds	r3, r7, r3
   126f4:	220a      	movs	r2, #10
   126f6:	18ba      	adds	r2, r7, r2
   126f8:	2109      	movs	r1, #9
   126fa:	1879      	adds	r1, r7, r1
   126fc:	7812      	ldrb	r2, [r2, #0]
   126fe:	7809      	ldrb	r1, [r1, #0]
   12700:	400a      	ands	r2, r1
   12702:	701a      	strb	r2, [r3, #0]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
   12704:	1d3b      	adds	r3, r7, #4
   12706:	781c      	ldrb	r4, [r3, #0]
   12708:	2308      	movs	r3, #8
   1270a:	18fb      	adds	r3, r7, r3
   1270c:	781a      	ldrb	r2, [r3, #0]
   1270e:	1dfb      	adds	r3, r7, #7
   12710:	7819      	ldrb	r1, [r3, #0]
   12712:	230e      	movs	r3, #14
   12714:	18fb      	adds	r3, r7, r3
   12716:	7818      	ldrb	r0, [r3, #0]
   12718:	0023      	movs	r3, r4
   1271a:	4c1f      	ldr	r4, [pc, #124]	; (12798 <gfx_mono_generic_draw_vertical_line+0x18c>)
   1271c:	47a0      	blx	r4
   1271e:	e036      	b.n	1278e <gfx_mono_generic_draw_vertical_line+0x182>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
   12720:	1d3b      	adds	r3, r7, #4
   12722:	781c      	ldrb	r4, [r3, #0]
   12724:	230a      	movs	r3, #10
   12726:	18fb      	adds	r3, r7, r3
   12728:	781a      	ldrb	r2, [r3, #0]
   1272a:	1dfb      	adds	r3, r7, #7
   1272c:	7819      	ldrb	r1, [r3, #0]
   1272e:	230e      	movs	r3, #14
   12730:	18fb      	adds	r3, r7, r3
   12732:	7818      	ldrb	r0, [r3, #0]
   12734:	0023      	movs	r3, r4
   12736:	4c18      	ldr	r4, [pc, #96]	; (12798 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12738:	47a0      	blx	r4

		while (++y1page < y2page) {
   1273a:	e00a      	b.n	12752 <gfx_mono_generic_draw_vertical_line+0x146>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
   1273c:	1d3b      	adds	r3, r7, #4
   1273e:	781a      	ldrb	r2, [r3, #0]
   12740:	1dfb      	adds	r3, r7, #7
   12742:	7819      	ldrb	r1, [r3, #0]
   12744:	230e      	movs	r3, #14
   12746:	18fb      	adds	r3, r7, r3
   12748:	7818      	ldrb	r0, [r3, #0]
   1274a:	0013      	movs	r3, r2
   1274c:	22ff      	movs	r2, #255	; 0xff
   1274e:	4c12      	ldr	r4, [pc, #72]	; (12798 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12750:	47a0      	blx	r4
		while (++y1page < y2page) {
   12752:	230e      	movs	r3, #14
   12754:	18fb      	adds	r3, r7, r3
   12756:	220e      	movs	r2, #14
   12758:	18ba      	adds	r2, r7, r2
   1275a:	7812      	ldrb	r2, [r2, #0]
   1275c:	3201      	adds	r2, #1
   1275e:	701a      	strb	r2, [r3, #0]
   12760:	230e      	movs	r3, #14
   12762:	18fa      	adds	r2, r7, r3
   12764:	230d      	movs	r3, #13
   12766:	18fb      	adds	r3, r7, r3
   12768:	7812      	ldrb	r2, [r2, #0]
   1276a:	781b      	ldrb	r3, [r3, #0]
   1276c:	429a      	cmp	r2, r3
   1276e:	d3e5      	bcc.n	1273c <gfx_mono_generic_draw_vertical_line+0x130>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
   12770:	1d3b      	adds	r3, r7, #4
   12772:	781c      	ldrb	r4, [r3, #0]
   12774:	2309      	movs	r3, #9
   12776:	18fb      	adds	r3, r7, r3
   12778:	781a      	ldrb	r2, [r3, #0]
   1277a:	1dfb      	adds	r3, r7, #7
   1277c:	7819      	ldrb	r1, [r3, #0]
   1277e:	230d      	movs	r3, #13
   12780:	18fb      	adds	r3, r7, r3
   12782:	7818      	ldrb	r0, [r3, #0]
   12784:	0023      	movs	r3, r4
   12786:	4c04      	ldr	r4, [pc, #16]	; (12798 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12788:	47a0      	blx	r4
   1278a:	e000      	b.n	1278e <gfx_mono_generic_draw_vertical_line+0x182>
		return;
   1278c:	46c0      	nop			; (mov r8, r8)
	}
}
   1278e:	46bd      	mov	sp, r7
   12790:	b004      	add	sp, #16
   12792:	bdb0      	pop	{r4, r5, r7, pc}
   12794:	000130c5 	.word	0x000130c5
   12798:	00013289 	.word	0x00013289

0001279c <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
   1279c:	b5b0      	push	{r4, r5, r7, lr}
   1279e:	b084      	sub	sp, #16
   127a0:	af00      	add	r7, sp, #0
   127a2:	0005      	movs	r5, r0
   127a4:	000c      	movs	r4, r1
   127a6:	0010      	movs	r0, r2
   127a8:	0019      	movs	r1, r3
   127aa:	1dfb      	adds	r3, r7, #7
   127ac:	1c2a      	adds	r2, r5, #0
   127ae:	701a      	strb	r2, [r3, #0]
   127b0:	1dbb      	adds	r3, r7, #6
   127b2:	1c22      	adds	r2, r4, #0
   127b4:	701a      	strb	r2, [r3, #0]
   127b6:	1d7b      	adds	r3, r7, #5
   127b8:	1c02      	adds	r2, r0, #0
   127ba:	701a      	strb	r2, [r3, #0]
   127bc:	1d3b      	adds	r3, r7, #4
   127be:	1c0a      	adds	r2, r1, #0
   127c0:	701a      	strb	r2, [r3, #0]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
   127c2:	1dfa      	adds	r2, r7, #7
   127c4:	1d7b      	adds	r3, r7, #5
   127c6:	7812      	ldrb	r2, [r2, #0]
   127c8:	781b      	ldrb	r3, [r3, #0]
   127ca:	429a      	cmp	r2, r3
   127cc:	d91b      	bls.n	12806 <gfx_mono_generic_draw_line+0x6a>
		dx = x1;
   127ce:	230a      	movs	r3, #10
   127d0:	18fb      	adds	r3, r7, r3
   127d2:	1dfa      	adds	r2, r7, #7
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	701a      	strb	r2, [r3, #0]
		x1 = x2;
   127d8:	1dfb      	adds	r3, r7, #7
   127da:	1d7a      	adds	r2, r7, #5
   127dc:	7812      	ldrb	r2, [r2, #0]
   127de:	701a      	strb	r2, [r3, #0]
		x2 = dx;
   127e0:	1d7b      	adds	r3, r7, #5
   127e2:	220a      	movs	r2, #10
   127e4:	18ba      	adds	r2, r7, r2
   127e6:	7812      	ldrb	r2, [r2, #0]
   127e8:	701a      	strb	r2, [r3, #0]
		dy = y1;
   127ea:	2309      	movs	r3, #9
   127ec:	18fb      	adds	r3, r7, r3
   127ee:	1dba      	adds	r2, r7, #6
   127f0:	7812      	ldrb	r2, [r2, #0]
   127f2:	701a      	strb	r2, [r3, #0]
		y1 = y2;
   127f4:	1dbb      	adds	r3, r7, #6
   127f6:	1d3a      	adds	r2, r7, #4
   127f8:	7812      	ldrb	r2, [r2, #0]
   127fa:	701a      	strb	r2, [r3, #0]
		y2 = dy;
   127fc:	1d3b      	adds	r3, r7, #4
   127fe:	2209      	movs	r2, #9
   12800:	18ba      	adds	r2, r7, r2
   12802:	7812      	ldrb	r2, [r2, #0]
   12804:	701a      	strb	r2, [r3, #0]
	}

	dx = x2 - x1;
   12806:	1d7a      	adds	r2, r7, #5
   12808:	1dfb      	adds	r3, r7, #7
   1280a:	7812      	ldrb	r2, [r2, #0]
   1280c:	781b      	ldrb	r3, [r3, #0]
   1280e:	1ad3      	subs	r3, r2, r3
   12810:	b2da      	uxtb	r2, r3
   12812:	230a      	movs	r3, #10
   12814:	18fb      	adds	r3, r7, r3
   12816:	701a      	strb	r2, [r3, #0]
	dy = y2 - y1;
   12818:	1d3a      	adds	r2, r7, #4
   1281a:	1dbb      	adds	r3, r7, #6
   1281c:	7812      	ldrb	r2, [r2, #0]
   1281e:	781b      	ldrb	r3, [r3, #0]
   12820:	1ad3      	subs	r3, r2, r3
   12822:	b2da      	uxtb	r2, r3
   12824:	2309      	movs	r3, #9
   12826:	18fb      	adds	r3, r7, r3
   12828:	701a      	strb	r2, [r3, #0]

	x = x1;
   1282a:	230e      	movs	r3, #14
   1282c:	18fb      	adds	r3, r7, r3
   1282e:	1dfa      	adds	r2, r7, #7
   12830:	7812      	ldrb	r2, [r2, #0]
   12832:	701a      	strb	r2, [r3, #0]
	y = y1;
   12834:	230d      	movs	r3, #13
   12836:	18fb      	adds	r3, r7, r3
   12838:	1dba      	adds	r2, r7, #6
   1283a:	7812      	ldrb	r2, [r2, #0]
   1283c:	701a      	strb	r2, [r3, #0]

	if (dx < 0) {
   1283e:	230a      	movs	r3, #10
   12840:	18fb      	adds	r3, r7, r3
   12842:	781b      	ldrb	r3, [r3, #0]
   12844:	2b7f      	cmp	r3, #127	; 0x7f
   12846:	d90c      	bls.n	12862 <gfx_mono_generic_draw_line+0xc6>
		xinc = -1;
   12848:	230c      	movs	r3, #12
   1284a:	18fb      	adds	r3, r7, r3
   1284c:	22ff      	movs	r2, #255	; 0xff
   1284e:	701a      	strb	r2, [r3, #0]
		dx = -dx;
   12850:	230a      	movs	r3, #10
   12852:	18fb      	adds	r3, r7, r3
   12854:	781b      	ldrb	r3, [r3, #0]
   12856:	425b      	negs	r3, r3
   12858:	b2da      	uxtb	r2, r3
   1285a:	230a      	movs	r3, #10
   1285c:	18fb      	adds	r3, r7, r3
   1285e:	701a      	strb	r2, [r3, #0]
   12860:	e003      	b.n	1286a <gfx_mono_generic_draw_line+0xce>
	} else {
		xinc = 1;
   12862:	230c      	movs	r3, #12
   12864:	18fb      	adds	r3, r7, r3
   12866:	2201      	movs	r2, #1
   12868:	701a      	strb	r2, [r3, #0]
	}

	if (dy < 0) {
   1286a:	2309      	movs	r3, #9
   1286c:	18fb      	adds	r3, r7, r3
   1286e:	781b      	ldrb	r3, [r3, #0]
   12870:	2b7f      	cmp	r3, #127	; 0x7f
   12872:	d90c      	bls.n	1288e <gfx_mono_generic_draw_line+0xf2>
		yinc = -1;
   12874:	230b      	movs	r3, #11
   12876:	18fb      	adds	r3, r7, r3
   12878:	22ff      	movs	r2, #255	; 0xff
   1287a:	701a      	strb	r2, [r3, #0]
		dy = -dy;
   1287c:	2309      	movs	r3, #9
   1287e:	18fb      	adds	r3, r7, r3
   12880:	781b      	ldrb	r3, [r3, #0]
   12882:	425b      	negs	r3, r3
   12884:	b2da      	uxtb	r2, r3
   12886:	2309      	movs	r3, #9
   12888:	18fb      	adds	r3, r7, r3
   1288a:	701a      	strb	r2, [r3, #0]
   1288c:	e003      	b.n	12896 <gfx_mono_generic_draw_line+0xfa>
	} else {
		yinc = 1;
   1288e:	230b      	movs	r3, #11
   12890:	18fb      	adds	r3, r7, r3
   12892:	2201      	movs	r2, #1
   12894:	701a      	strb	r2, [r3, #0]
	}

	if (dx > dy) {
   12896:	230a      	movs	r3, #10
   12898:	18fa      	adds	r2, r7, r3
   1289a:	2309      	movs	r3, #9
   1289c:	18fb      	adds	r3, r7, r3
   1289e:	7812      	ldrb	r2, [r2, #0]
   128a0:	b252      	sxtb	r2, r2
   128a2:	781b      	ldrb	r3, [r3, #0]
   128a4:	b25b      	sxtb	r3, r3
   128a6:	429a      	cmp	r2, r3
   128a8:	dd5b      	ble.n	12962 <gfx_mono_generic_draw_line+0x1c6>
		e = dy - dx;
   128aa:	2309      	movs	r3, #9
   128ac:	18fb      	adds	r3, r7, r3
   128ae:	781a      	ldrb	r2, [r3, #0]
   128b0:	230a      	movs	r3, #10
   128b2:	18fb      	adds	r3, r7, r3
   128b4:	781b      	ldrb	r3, [r3, #0]
   128b6:	1ad3      	subs	r3, r2, r3
   128b8:	b2da      	uxtb	r2, r3
   128ba:	2308      	movs	r3, #8
   128bc:	18fb      	adds	r3, r7, r3
   128be:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   128c0:	230f      	movs	r3, #15
   128c2:	18fb      	adds	r3, r7, r3
   128c4:	2200      	movs	r2, #0
   128c6:	701a      	strb	r2, [r3, #0]
   128c8:	e041      	b.n	1294e <gfx_mono_generic_draw_line+0x1b2>
			gfx_mono_draw_pixel(x, y, color);
   128ca:	2320      	movs	r3, #32
   128cc:	18fb      	adds	r3, r7, r3
   128ce:	781a      	ldrb	r2, [r3, #0]
   128d0:	230d      	movs	r3, #13
   128d2:	18fb      	adds	r3, r7, r3
   128d4:	7819      	ldrb	r1, [r3, #0]
   128d6:	230e      	movs	r3, #14
   128d8:	18fb      	adds	r3, r7, r3
   128da:	781b      	ldrb	r3, [r3, #0]
   128dc:	0018      	movs	r0, r3
   128de:	4b50      	ldr	r3, [pc, #320]	; (12a20 <gfx_mono_generic_draw_line+0x284>)
   128e0:	4798      	blx	r3
			if (e >= 0) {
   128e2:	2308      	movs	r3, #8
   128e4:	18fb      	adds	r3, r7, r3
   128e6:	781b      	ldrb	r3, [r3, #0]
   128e8:	2b7f      	cmp	r3, #127	; 0x7f
   128ea:	d814      	bhi.n	12916 <gfx_mono_generic_draw_line+0x17a>
				e -= dx;
   128ec:	2308      	movs	r3, #8
   128ee:	18fb      	adds	r3, r7, r3
   128f0:	781a      	ldrb	r2, [r3, #0]
   128f2:	230a      	movs	r3, #10
   128f4:	18fb      	adds	r3, r7, r3
   128f6:	781b      	ldrb	r3, [r3, #0]
   128f8:	1ad3      	subs	r3, r2, r3
   128fa:	b2da      	uxtb	r2, r3
   128fc:	2308      	movs	r3, #8
   128fe:	18fb      	adds	r3, r7, r3
   12900:	701a      	strb	r2, [r3, #0]
				y += yinc;
   12902:	230b      	movs	r3, #11
   12904:	18fb      	adds	r3, r7, r3
   12906:	7819      	ldrb	r1, [r3, #0]
   12908:	230d      	movs	r3, #13
   1290a:	18fb      	adds	r3, r7, r3
   1290c:	220d      	movs	r2, #13
   1290e:	18ba      	adds	r2, r7, r2
   12910:	7812      	ldrb	r2, [r2, #0]
   12912:	188a      	adds	r2, r1, r2
   12914:	701a      	strb	r2, [r3, #0]
			}

			e += dy;
   12916:	2308      	movs	r3, #8
   12918:	18fb      	adds	r3, r7, r3
   1291a:	781a      	ldrb	r2, [r3, #0]
   1291c:	2309      	movs	r3, #9
   1291e:	18fb      	adds	r3, r7, r3
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	18d3      	adds	r3, r2, r3
   12924:	b2da      	uxtb	r2, r3
   12926:	2308      	movs	r3, #8
   12928:	18fb      	adds	r3, r7, r3
   1292a:	701a      	strb	r2, [r3, #0]
			x += xinc;
   1292c:	230c      	movs	r3, #12
   1292e:	18fb      	adds	r3, r7, r3
   12930:	7819      	ldrb	r1, [r3, #0]
   12932:	230e      	movs	r3, #14
   12934:	18fb      	adds	r3, r7, r3
   12936:	220e      	movs	r2, #14
   12938:	18ba      	adds	r2, r7, r2
   1293a:	7812      	ldrb	r2, [r2, #0]
   1293c:	188a      	adds	r2, r1, r2
   1293e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12940:	230f      	movs	r3, #15
   12942:	18fb      	adds	r3, r7, r3
   12944:	781a      	ldrb	r2, [r3, #0]
   12946:	230f      	movs	r3, #15
   12948:	18fb      	adds	r3, r7, r3
   1294a:	3201      	adds	r2, #1
   1294c:	701a      	strb	r2, [r3, #0]
   1294e:	230f      	movs	r3, #15
   12950:	18fb      	adds	r3, r7, r3
   12952:	781a      	ldrb	r2, [r3, #0]
   12954:	230a      	movs	r3, #10
   12956:	18fb      	adds	r3, r7, r3
   12958:	781b      	ldrb	r3, [r3, #0]
   1295a:	b25b      	sxtb	r3, r3
   1295c:	429a      	cmp	r2, r3
   1295e:	ddb4      	ble.n	128ca <gfx_mono_generic_draw_line+0x12e>

			e += dx;
			y += yinc;
		}
	}
}
   12960:	e05a      	b.n	12a18 <gfx_mono_generic_draw_line+0x27c>
		e = dx - dy;
   12962:	230a      	movs	r3, #10
   12964:	18fb      	adds	r3, r7, r3
   12966:	781a      	ldrb	r2, [r3, #0]
   12968:	2309      	movs	r3, #9
   1296a:	18fb      	adds	r3, r7, r3
   1296c:	781b      	ldrb	r3, [r3, #0]
   1296e:	1ad3      	subs	r3, r2, r3
   12970:	b2da      	uxtb	r2, r3
   12972:	2308      	movs	r3, #8
   12974:	18fb      	adds	r3, r7, r3
   12976:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   12978:	230f      	movs	r3, #15
   1297a:	18fb      	adds	r3, r7, r3
   1297c:	2200      	movs	r2, #0
   1297e:	701a      	strb	r2, [r3, #0]
   12980:	e041      	b.n	12a06 <gfx_mono_generic_draw_line+0x26a>
			gfx_mono_draw_pixel(x, y, color);
   12982:	2320      	movs	r3, #32
   12984:	18fb      	adds	r3, r7, r3
   12986:	781a      	ldrb	r2, [r3, #0]
   12988:	230d      	movs	r3, #13
   1298a:	18fb      	adds	r3, r7, r3
   1298c:	7819      	ldrb	r1, [r3, #0]
   1298e:	230e      	movs	r3, #14
   12990:	18fb      	adds	r3, r7, r3
   12992:	781b      	ldrb	r3, [r3, #0]
   12994:	0018      	movs	r0, r3
   12996:	4b22      	ldr	r3, [pc, #136]	; (12a20 <gfx_mono_generic_draw_line+0x284>)
   12998:	4798      	blx	r3
			if (e >= 0) {
   1299a:	2308      	movs	r3, #8
   1299c:	18fb      	adds	r3, r7, r3
   1299e:	781b      	ldrb	r3, [r3, #0]
   129a0:	2b7f      	cmp	r3, #127	; 0x7f
   129a2:	d814      	bhi.n	129ce <gfx_mono_generic_draw_line+0x232>
				e -= dy;
   129a4:	2308      	movs	r3, #8
   129a6:	18fb      	adds	r3, r7, r3
   129a8:	781a      	ldrb	r2, [r3, #0]
   129aa:	2309      	movs	r3, #9
   129ac:	18fb      	adds	r3, r7, r3
   129ae:	781b      	ldrb	r3, [r3, #0]
   129b0:	1ad3      	subs	r3, r2, r3
   129b2:	b2da      	uxtb	r2, r3
   129b4:	2308      	movs	r3, #8
   129b6:	18fb      	adds	r3, r7, r3
   129b8:	701a      	strb	r2, [r3, #0]
				x += xinc;
   129ba:	230c      	movs	r3, #12
   129bc:	18fb      	adds	r3, r7, r3
   129be:	7819      	ldrb	r1, [r3, #0]
   129c0:	230e      	movs	r3, #14
   129c2:	18fb      	adds	r3, r7, r3
   129c4:	220e      	movs	r2, #14
   129c6:	18ba      	adds	r2, r7, r2
   129c8:	7812      	ldrb	r2, [r2, #0]
   129ca:	188a      	adds	r2, r1, r2
   129cc:	701a      	strb	r2, [r3, #0]
			e += dx;
   129ce:	2308      	movs	r3, #8
   129d0:	18fb      	adds	r3, r7, r3
   129d2:	781a      	ldrb	r2, [r3, #0]
   129d4:	230a      	movs	r3, #10
   129d6:	18fb      	adds	r3, r7, r3
   129d8:	781b      	ldrb	r3, [r3, #0]
   129da:	18d3      	adds	r3, r2, r3
   129dc:	b2da      	uxtb	r2, r3
   129de:	2308      	movs	r3, #8
   129e0:	18fb      	adds	r3, r7, r3
   129e2:	701a      	strb	r2, [r3, #0]
			y += yinc;
   129e4:	230b      	movs	r3, #11
   129e6:	18fb      	adds	r3, r7, r3
   129e8:	7819      	ldrb	r1, [r3, #0]
   129ea:	230d      	movs	r3, #13
   129ec:	18fb      	adds	r3, r7, r3
   129ee:	220d      	movs	r2, #13
   129f0:	18ba      	adds	r2, r7, r2
   129f2:	7812      	ldrb	r2, [r2, #0]
   129f4:	188a      	adds	r2, r1, r2
   129f6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   129f8:	230f      	movs	r3, #15
   129fa:	18fb      	adds	r3, r7, r3
   129fc:	781a      	ldrb	r2, [r3, #0]
   129fe:	230f      	movs	r3, #15
   12a00:	18fb      	adds	r3, r7, r3
   12a02:	3201      	adds	r2, #1
   12a04:	701a      	strb	r2, [r3, #0]
   12a06:	230f      	movs	r3, #15
   12a08:	18fb      	adds	r3, r7, r3
   12a0a:	781a      	ldrb	r2, [r3, #0]
   12a0c:	2309      	movs	r3, #9
   12a0e:	18fb      	adds	r3, r7, r3
   12a10:	781b      	ldrb	r3, [r3, #0]
   12a12:	b25b      	sxtb	r3, r3
   12a14:	429a      	cmp	r2, r3
   12a16:	ddb4      	ble.n	12982 <gfx_mono_generic_draw_line+0x1e6>
}
   12a18:	46c0      	nop			; (mov r8, r8)
   12a1a:	46bd      	mov	sp, r7
   12a1c:	b004      	add	sp, #16
   12a1e:	bdb0      	pop	{r4, r5, r7, pc}
   12a20:	000130c5 	.word	0x000130c5

00012a24 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   12a24:	b5b0      	push	{r4, r5, r7, lr}
   12a26:	b082      	sub	sp, #8
   12a28:	af00      	add	r7, sp, #0
   12a2a:	0005      	movs	r5, r0
   12a2c:	000c      	movs	r4, r1
   12a2e:	0010      	movs	r0, r2
   12a30:	0019      	movs	r1, r3
   12a32:	1dfb      	adds	r3, r7, #7
   12a34:	1c2a      	adds	r2, r5, #0
   12a36:	701a      	strb	r2, [r3, #0]
   12a38:	1dbb      	adds	r3, r7, #6
   12a3a:	1c22      	adds	r2, r4, #0
   12a3c:	701a      	strb	r2, [r3, #0]
   12a3e:	1d7b      	adds	r3, r7, #5
   12a40:	1c02      	adds	r2, r0, #0
   12a42:	701a      	strb	r2, [r3, #0]
   12a44:	1d3b      	adds	r3, r7, #4
   12a46:	1c0a      	adds	r2, r1, #0
   12a48:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   12a4a:	1d3b      	adds	r3, r7, #4
   12a4c:	781b      	ldrb	r3, [r3, #0]
   12a4e:	2b00      	cmp	r3, #0
   12a50:	d018      	beq.n	12a84 <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   12a52:	e00f      	b.n	12a74 <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   12a54:	1dba      	adds	r2, r7, #6
   12a56:	1d3b      	adds	r3, r7, #4
   12a58:	7812      	ldrb	r2, [r2, #0]
   12a5a:	781b      	ldrb	r3, [r3, #0]
   12a5c:	18d3      	adds	r3, r2, r3
   12a5e:	b2d9      	uxtb	r1, r3
   12a60:	2318      	movs	r3, #24
   12a62:	18fb      	adds	r3, r7, r3
   12a64:	781c      	ldrb	r4, [r3, #0]
   12a66:	1d7b      	adds	r3, r7, #5
   12a68:	781a      	ldrb	r2, [r3, #0]
   12a6a:	1dfb      	adds	r3, r7, #7
   12a6c:	7818      	ldrb	r0, [r3, #0]
   12a6e:	0023      	movs	r3, r4
   12a70:	4c06      	ldr	r4, [pc, #24]	; (12a8c <gfx_mono_generic_draw_filled_rect+0x68>)
   12a72:	47a0      	blx	r4
	while (height-- > 0) {
   12a74:	1d3b      	adds	r3, r7, #4
   12a76:	781b      	ldrb	r3, [r3, #0]
   12a78:	1d3a      	adds	r2, r7, #4
   12a7a:	1e59      	subs	r1, r3, #1
   12a7c:	7011      	strb	r1, [r2, #0]
   12a7e:	2b00      	cmp	r3, #0
   12a80:	d1e8      	bne.n	12a54 <gfx_mono_generic_draw_filled_rect+0x30>
   12a82:	e000      	b.n	12a86 <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   12a84:	46c0      	nop			; (mov r8, r8)
	}
}
   12a86:	46bd      	mov	sp, r7
   12a88:	b002      	add	sp, #8
   12a8a:	bdb0      	pop	{r4, r5, r7, pc}
   12a8c:	00012445 	.word	0x00012445

00012a90 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
   12a90:	b5b0      	push	{r4, r5, r7, lr}
   12a92:	b084      	sub	sp, #16
   12a94:	af00      	add	r7, sp, #0
   12a96:	0005      	movs	r5, r0
   12a98:	000c      	movs	r4, r1
   12a9a:	0010      	movs	r0, r2
   12a9c:	0019      	movs	r1, r3
   12a9e:	1dfb      	adds	r3, r7, #7
   12aa0:	1c2a      	adds	r2, r5, #0
   12aa2:	701a      	strb	r2, [r3, #0]
   12aa4:	1dbb      	adds	r3, r7, #6
   12aa6:	1c22      	adds	r2, r4, #0
   12aa8:	701a      	strb	r2, [r3, #0]
   12aaa:	1d7b      	adds	r3, r7, #5
   12aac:	1c02      	adds	r2, r0, #0
   12aae:	701a      	strb	r2, [r3, #0]
   12ab0:	1d3b      	adds	r3, r7, #4
   12ab2:	1c0a      	adds	r2, r1, #0
   12ab4:	701a      	strb	r2, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
   12ab6:	1d7b      	adds	r3, r7, #5
   12ab8:	781b      	ldrb	r3, [r3, #0]
   12aba:	2b00      	cmp	r3, #0
   12abc:	d109      	bne.n	12ad2 <gfx_mono_generic_draw_filled_circle+0x42>
		gfx_mono_draw_pixel(x, y, color);
   12abe:	1d3b      	adds	r3, r7, #4
   12ac0:	781a      	ldrb	r2, [r3, #0]
   12ac2:	1dbb      	adds	r3, r7, #6
   12ac4:	7819      	ldrb	r1, [r3, #0]
   12ac6:	1dfb      	adds	r3, r7, #7
   12ac8:	781b      	ldrb	r3, [r3, #0]
   12aca:	0018      	movs	r0, r3
   12acc:	4b8f      	ldr	r3, [pc, #572]	; (12d0c <gfx_mono_generic_draw_filled_circle+0x27c>)
   12ace:	4798      	blx	r3
		return;
   12ad0:	e118      	b.n	12d04 <gfx_mono_generic_draw_filled_circle+0x274>
	}

	/* Set up start iterators. */
	offset_x = 0;
   12ad2:	230f      	movs	r3, #15
   12ad4:	18fb      	adds	r3, r7, r3
   12ad6:	2200      	movs	r2, #0
   12ad8:	701a      	strb	r2, [r3, #0]
	offset_y = radius;
   12ada:	230e      	movs	r3, #14
   12adc:	18fb      	adds	r3, r7, r3
   12ade:	1d7a      	adds	r2, r7, #5
   12ae0:	7812      	ldrb	r2, [r2, #0]
   12ae2:	701a      	strb	r2, [r3, #0]
	error = 3 - 2 * radius;
   12ae4:	1d7b      	adds	r3, r7, #5
   12ae6:	781b      	ldrb	r3, [r3, #0]
   12ae8:	b29b      	uxth	r3, r3
   12aea:	18db      	adds	r3, r3, r3
   12aec:	b29b      	uxth	r3, r3
   12aee:	2203      	movs	r2, #3
   12af0:	1ad3      	subs	r3, r2, r3
   12af2:	b29a      	uxth	r2, r3
   12af4:	230c      	movs	r3, #12
   12af6:	18fb      	adds	r3, r7, r3
   12af8:	801a      	strh	r2, [r3, #0]

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
   12afa:	e0fa      	b.n	12cf2 <gfx_mono_generic_draw_filled_circle+0x262>
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
   12afc:	2320      	movs	r3, #32
   12afe:	18fb      	adds	r3, r7, r3
   12b00:	781b      	ldrb	r3, [r3, #0]
   12b02:	2203      	movs	r2, #3
   12b04:	4013      	ands	r3, r2
   12b06:	d02d      	beq.n	12b64 <gfx_mono_generic_draw_filled_circle+0xd4>
			gfx_mono_draw_vertical_line(x + offset_y,
   12b08:	1dfa      	adds	r2, r7, #7
   12b0a:	230e      	movs	r3, #14
   12b0c:	18fb      	adds	r3, r7, r3
   12b0e:	7812      	ldrb	r2, [r2, #0]
   12b10:	781b      	ldrb	r3, [r3, #0]
   12b12:	18d3      	adds	r3, r2, r3
   12b14:	b2d8      	uxtb	r0, r3
   12b16:	1dba      	adds	r2, r7, #6
   12b18:	230f      	movs	r3, #15
   12b1a:	18fb      	adds	r3, r7, r3
   12b1c:	7812      	ldrb	r2, [r2, #0]
   12b1e:	781b      	ldrb	r3, [r3, #0]
   12b20:	1ad3      	subs	r3, r2, r3
   12b22:	b2d9      	uxtb	r1, r3
   12b24:	230f      	movs	r3, #15
   12b26:	18fb      	adds	r3, r7, r3
   12b28:	781b      	ldrb	r3, [r3, #0]
   12b2a:	3301      	adds	r3, #1
   12b2c:	b2da      	uxtb	r2, r3
   12b2e:	1d3b      	adds	r3, r7, #4
   12b30:	781b      	ldrb	r3, [r3, #0]
   12b32:	4c77      	ldr	r4, [pc, #476]	; (12d10 <gfx_mono_generic_draw_filled_circle+0x280>)
   12b34:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   12b36:	1dfa      	adds	r2, r7, #7
   12b38:	230f      	movs	r3, #15
   12b3a:	18fb      	adds	r3, r7, r3
   12b3c:	7812      	ldrb	r2, [r2, #0]
   12b3e:	781b      	ldrb	r3, [r3, #0]
   12b40:	18d3      	adds	r3, r2, r3
   12b42:	b2d8      	uxtb	r0, r3
   12b44:	1dba      	adds	r2, r7, #6
   12b46:	230e      	movs	r3, #14
   12b48:	18fb      	adds	r3, r7, r3
   12b4a:	7812      	ldrb	r2, [r2, #0]
   12b4c:	781b      	ldrb	r3, [r3, #0]
   12b4e:	1ad3      	subs	r3, r2, r3
   12b50:	b2d9      	uxtb	r1, r3
   12b52:	230e      	movs	r3, #14
   12b54:	18fb      	adds	r3, r7, r3
   12b56:	781b      	ldrb	r3, [r3, #0]
   12b58:	3301      	adds	r3, #1
   12b5a:	b2da      	uxtb	r2, r3
   12b5c:	1d3b      	adds	r3, r7, #4
   12b5e:	781b      	ldrb	r3, [r3, #0]
   12b60:	4c6b      	ldr	r4, [pc, #428]	; (12d10 <gfx_mono_generic_draw_filled_circle+0x280>)
   12b62:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
   12b64:	2320      	movs	r3, #32
   12b66:	18fb      	adds	r3, r7, r3
   12b68:	781b      	ldrb	r3, [r3, #0]
   12b6a:	220c      	movs	r2, #12
   12b6c:	4013      	ands	r3, r2
   12b6e:	d02d      	beq.n	12bcc <gfx_mono_generic_draw_filled_circle+0x13c>
			gfx_mono_draw_vertical_line(x - offset_y,
   12b70:	1dfa      	adds	r2, r7, #7
   12b72:	230e      	movs	r3, #14
   12b74:	18fb      	adds	r3, r7, r3
   12b76:	7812      	ldrb	r2, [r2, #0]
   12b78:	781b      	ldrb	r3, [r3, #0]
   12b7a:	1ad3      	subs	r3, r2, r3
   12b7c:	b2d8      	uxtb	r0, r3
   12b7e:	1dba      	adds	r2, r7, #6
   12b80:	230f      	movs	r3, #15
   12b82:	18fb      	adds	r3, r7, r3
   12b84:	7812      	ldrb	r2, [r2, #0]
   12b86:	781b      	ldrb	r3, [r3, #0]
   12b88:	1ad3      	subs	r3, r2, r3
   12b8a:	b2d9      	uxtb	r1, r3
   12b8c:	230f      	movs	r3, #15
   12b8e:	18fb      	adds	r3, r7, r3
   12b90:	781b      	ldrb	r3, [r3, #0]
   12b92:	3301      	adds	r3, #1
   12b94:	b2da      	uxtb	r2, r3
   12b96:	1d3b      	adds	r3, r7, #4
   12b98:	781b      	ldrb	r3, [r3, #0]
   12b9a:	4c5d      	ldr	r4, [pc, #372]	; (12d10 <gfx_mono_generic_draw_filled_circle+0x280>)
   12b9c:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   12b9e:	1dfa      	adds	r2, r7, #7
   12ba0:	230f      	movs	r3, #15
   12ba2:	18fb      	adds	r3, r7, r3
   12ba4:	7812      	ldrb	r2, [r2, #0]
   12ba6:	781b      	ldrb	r3, [r3, #0]
   12ba8:	1ad3      	subs	r3, r2, r3
   12baa:	b2d8      	uxtb	r0, r3
   12bac:	1dba      	adds	r2, r7, #6
   12bae:	230e      	movs	r3, #14
   12bb0:	18fb      	adds	r3, r7, r3
   12bb2:	7812      	ldrb	r2, [r2, #0]
   12bb4:	781b      	ldrb	r3, [r3, #0]
   12bb6:	1ad3      	subs	r3, r2, r3
   12bb8:	b2d9      	uxtb	r1, r3
   12bba:	230e      	movs	r3, #14
   12bbc:	18fb      	adds	r3, r7, r3
   12bbe:	781b      	ldrb	r3, [r3, #0]
   12bc0:	3301      	adds	r3, #1
   12bc2:	b2da      	uxtb	r2, r3
   12bc4:	1d3b      	adds	r3, r7, #4
   12bc6:	781b      	ldrb	r3, [r3, #0]
   12bc8:	4c51      	ldr	r4, [pc, #324]	; (12d10 <gfx_mono_generic_draw_filled_circle+0x280>)
   12bca:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
   12bcc:	2320      	movs	r3, #32
   12bce:	18fb      	adds	r3, r7, r3
   12bd0:	781b      	ldrb	r3, [r3, #0]
   12bd2:	2230      	movs	r2, #48	; 0x30
   12bd4:	4013      	ands	r3, r2
   12bd6:	d025      	beq.n	12c24 <gfx_mono_generic_draw_filled_circle+0x194>
			gfx_mono_draw_vertical_line(x - offset_y,
   12bd8:	1dfa      	adds	r2, r7, #7
   12bda:	230e      	movs	r3, #14
   12bdc:	18fb      	adds	r3, r7, r3
   12bde:	7812      	ldrb	r2, [r2, #0]
   12be0:	781b      	ldrb	r3, [r3, #0]
   12be2:	1ad3      	subs	r3, r2, r3
   12be4:	b2d8      	uxtb	r0, r3
   12be6:	230f      	movs	r3, #15
   12be8:	18fb      	adds	r3, r7, r3
   12bea:	781b      	ldrb	r3, [r3, #0]
   12bec:	3301      	adds	r3, #1
   12bee:	b2da      	uxtb	r2, r3
   12bf0:	1d3b      	adds	r3, r7, #4
   12bf2:	781c      	ldrb	r4, [r3, #0]
   12bf4:	1dbb      	adds	r3, r7, #6
   12bf6:	7819      	ldrb	r1, [r3, #0]
   12bf8:	0023      	movs	r3, r4
   12bfa:	4c45      	ldr	r4, [pc, #276]	; (12d10 <gfx_mono_generic_draw_filled_circle+0x280>)
   12bfc:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   12bfe:	1dfa      	adds	r2, r7, #7
   12c00:	230f      	movs	r3, #15
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	7812      	ldrb	r2, [r2, #0]
   12c06:	781b      	ldrb	r3, [r3, #0]
   12c08:	1ad3      	subs	r3, r2, r3
   12c0a:	b2d8      	uxtb	r0, r3
   12c0c:	230e      	movs	r3, #14
   12c0e:	18fb      	adds	r3, r7, r3
   12c10:	781b      	ldrb	r3, [r3, #0]
   12c12:	3301      	adds	r3, #1
   12c14:	b2da      	uxtb	r2, r3
   12c16:	1d3b      	adds	r3, r7, #4
   12c18:	781c      	ldrb	r4, [r3, #0]
   12c1a:	1dbb      	adds	r3, r7, #6
   12c1c:	7819      	ldrb	r1, [r3, #0]
   12c1e:	0023      	movs	r3, r4
   12c20:	4c3b      	ldr	r4, [pc, #236]	; (12d10 <gfx_mono_generic_draw_filled_circle+0x280>)
   12c22:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
   12c24:	2320      	movs	r3, #32
   12c26:	18fb      	adds	r3, r7, r3
   12c28:	781b      	ldrb	r3, [r3, #0]
   12c2a:	22c0      	movs	r2, #192	; 0xc0
   12c2c:	4013      	ands	r3, r2
   12c2e:	d025      	beq.n	12c7c <gfx_mono_generic_draw_filled_circle+0x1ec>
			gfx_mono_draw_vertical_line(x + offset_y,
   12c30:	1dfa      	adds	r2, r7, #7
   12c32:	230e      	movs	r3, #14
   12c34:	18fb      	adds	r3, r7, r3
   12c36:	7812      	ldrb	r2, [r2, #0]
   12c38:	781b      	ldrb	r3, [r3, #0]
   12c3a:	18d3      	adds	r3, r2, r3
   12c3c:	b2d8      	uxtb	r0, r3
   12c3e:	230f      	movs	r3, #15
   12c40:	18fb      	adds	r3, r7, r3
   12c42:	781b      	ldrb	r3, [r3, #0]
   12c44:	3301      	adds	r3, #1
   12c46:	b2da      	uxtb	r2, r3
   12c48:	1d3b      	adds	r3, r7, #4
   12c4a:	781c      	ldrb	r4, [r3, #0]
   12c4c:	1dbb      	adds	r3, r7, #6
   12c4e:	7819      	ldrb	r1, [r3, #0]
   12c50:	0023      	movs	r3, r4
   12c52:	4c2f      	ldr	r4, [pc, #188]	; (12d10 <gfx_mono_generic_draw_filled_circle+0x280>)
   12c54:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   12c56:	1dfa      	adds	r2, r7, #7
   12c58:	230f      	movs	r3, #15
   12c5a:	18fb      	adds	r3, r7, r3
   12c5c:	7812      	ldrb	r2, [r2, #0]
   12c5e:	781b      	ldrb	r3, [r3, #0]
   12c60:	18d3      	adds	r3, r2, r3
   12c62:	b2d8      	uxtb	r0, r3
   12c64:	230e      	movs	r3, #14
   12c66:	18fb      	adds	r3, r7, r3
   12c68:	781b      	ldrb	r3, [r3, #0]
   12c6a:	3301      	adds	r3, #1
   12c6c:	b2da      	uxtb	r2, r3
   12c6e:	1d3b      	adds	r3, r7, #4
   12c70:	781c      	ldrb	r4, [r3, #0]
   12c72:	1dbb      	adds	r3, r7, #6
   12c74:	7819      	ldrb	r1, [r3, #0]
   12c76:	0023      	movs	r3, r4
   12c78:	4c25      	ldr	r4, [pc, #148]	; (12d10 <gfx_mono_generic_draw_filled_circle+0x280>)
   12c7a:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
   12c7c:	230c      	movs	r3, #12
   12c7e:	18fb      	adds	r3, r7, r3
   12c80:	2200      	movs	r2, #0
   12c82:	5e9b      	ldrsh	r3, [r3, r2]
   12c84:	2b00      	cmp	r3, #0
   12c86:	da10      	bge.n	12caa <gfx_mono_generic_draw_filled_circle+0x21a>
			error += ((offset_x << 2) + 6);
   12c88:	230f      	movs	r3, #15
   12c8a:	18fb      	adds	r3, r7, r3
   12c8c:	781b      	ldrb	r3, [r3, #0]
   12c8e:	b29b      	uxth	r3, r3
   12c90:	009b      	lsls	r3, r3, #2
   12c92:	b29a      	uxth	r2, r3
   12c94:	230c      	movs	r3, #12
   12c96:	18fb      	adds	r3, r7, r3
   12c98:	881b      	ldrh	r3, [r3, #0]
   12c9a:	18d3      	adds	r3, r2, r3
   12c9c:	b29b      	uxth	r3, r3
   12c9e:	3306      	adds	r3, #6
   12ca0:	b29a      	uxth	r2, r3
   12ca2:	230c      	movs	r3, #12
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	801a      	strh	r2, [r3, #0]
   12ca8:	e01c      	b.n	12ce4 <gfx_mono_generic_draw_filled_circle+0x254>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
   12caa:	230f      	movs	r3, #15
   12cac:	18fb      	adds	r3, r7, r3
   12cae:	781b      	ldrb	r3, [r3, #0]
   12cb0:	b29a      	uxth	r2, r3
   12cb2:	230e      	movs	r3, #14
   12cb4:	18fb      	adds	r3, r7, r3
   12cb6:	781b      	ldrb	r3, [r3, #0]
   12cb8:	b29b      	uxth	r3, r3
   12cba:	1ad3      	subs	r3, r2, r3
   12cbc:	b29b      	uxth	r3, r3
   12cbe:	009b      	lsls	r3, r3, #2
   12cc0:	b29a      	uxth	r2, r3
   12cc2:	230c      	movs	r3, #12
   12cc4:	18fb      	adds	r3, r7, r3
   12cc6:	881b      	ldrh	r3, [r3, #0]
   12cc8:	18d3      	adds	r3, r2, r3
   12cca:	b29b      	uxth	r3, r3
   12ccc:	330a      	adds	r3, #10
   12cce:	b29a      	uxth	r2, r3
   12cd0:	230c      	movs	r3, #12
   12cd2:	18fb      	adds	r3, r7, r3
   12cd4:	801a      	strh	r2, [r3, #0]
			--offset_y;
   12cd6:	230e      	movs	r3, #14
   12cd8:	18fb      	adds	r3, r7, r3
   12cda:	220e      	movs	r2, #14
   12cdc:	18ba      	adds	r2, r7, r2
   12cde:	7812      	ldrb	r2, [r2, #0]
   12ce0:	3a01      	subs	r2, #1
   12ce2:	701a      	strb	r2, [r3, #0]
		}

		/* Next X. */
		++offset_x;
   12ce4:	230f      	movs	r3, #15
   12ce6:	18fb      	adds	r3, r7, r3
   12ce8:	220f      	movs	r2, #15
   12cea:	18ba      	adds	r2, r7, r2
   12cec:	7812      	ldrb	r2, [r2, #0]
   12cee:	3201      	adds	r2, #1
   12cf0:	701a      	strb	r2, [r3, #0]
	while (offset_x <= offset_y) {
   12cf2:	230f      	movs	r3, #15
   12cf4:	18fa      	adds	r2, r7, r3
   12cf6:	230e      	movs	r3, #14
   12cf8:	18fb      	adds	r3, r7, r3
   12cfa:	7812      	ldrb	r2, [r2, #0]
   12cfc:	781b      	ldrb	r3, [r3, #0]
   12cfe:	429a      	cmp	r2, r3
   12d00:	d800      	bhi.n	12d04 <gfx_mono_generic_draw_filled_circle+0x274>
   12d02:	e6fb      	b.n	12afc <gfx_mono_generic_draw_filled_circle+0x6c>
	}
}
   12d04:	46bd      	mov	sp, r7
   12d06:	b004      	add	sp, #16
   12d08:	bdb0      	pop	{r4, r5, r7, pc}
   12d0a:	46c0      	nop			; (mov r8, r8)
   12d0c:	000130c5 	.word	0x000130c5
   12d10:	0001260d 	.word	0x0001260d

00012d14 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12d14:	b590      	push	{r4, r7, lr}
   12d16:	b087      	sub	sp, #28
   12d18:	af00      	add	r7, sp, #0
   12d1a:	0004      	movs	r4, r0
   12d1c:	0008      	movs	r0, r1
   12d1e:	0011      	movs	r1, r2
   12d20:	603b      	str	r3, [r7, #0]
   12d22:	1dfb      	adds	r3, r7, #7
   12d24:	1c22      	adds	r2, r4, #0
   12d26:	701a      	strb	r2, [r3, #0]
   12d28:	1dbb      	adds	r3, r7, #6
   12d2a:	1c02      	adds	r2, r0, #0
   12d2c:	701a      	strb	r2, [r3, #0]
   12d2e:	1d7b      	adds	r3, r7, #5
   12d30:	1c0a      	adds	r2, r1, #0
   12d32:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12d34:	2310      	movs	r3, #16
   12d36:	18fb      	adds	r3, r7, r3
   12d38:	1dba      	adds	r2, r7, #6
   12d3a:	7812      	ldrb	r2, [r2, #0]
   12d3c:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12d3e:	230f      	movs	r3, #15
   12d40:	18fb      	adds	r3, r7, r3
   12d42:	1d7a      	adds	r2, r7, #5
   12d44:	7812      	ldrb	r2, [r2, #0]
   12d46:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   12d48:	683b      	ldr	r3, [r7, #0]
   12d4a:	7a1a      	ldrb	r2, [r3, #8]
   12d4c:	2313      	movs	r3, #19
   12d4e:	18fb      	adds	r3, r7, r3
   12d50:	08d2      	lsrs	r2, r2, #3
   12d52:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12d54:	683b      	ldr	r3, [r7, #0]
   12d56:	7a1b      	ldrb	r3, [r3, #8]
   12d58:	2207      	movs	r2, #7
   12d5a:	4013      	ands	r3, r2
   12d5c:	b2db      	uxtb	r3, r3
   12d5e:	2b00      	cmp	r3, #0
   12d60:	d006      	beq.n	12d70 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12d62:	2313      	movs	r3, #19
   12d64:	18fb      	adds	r3, r7, r3
   12d66:	781a      	ldrb	r2, [r3, #0]
   12d68:	2313      	movs	r3, #19
   12d6a:	18fb      	adds	r3, r7, r3
   12d6c:	3201      	adds	r2, #1
   12d6e:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   12d70:	2313      	movs	r3, #19
   12d72:	18fb      	adds	r3, r7, r3
   12d74:	781b      	ldrb	r3, [r3, #0]
   12d76:	b29b      	uxth	r3, r3
   12d78:	683a      	ldr	r2, [r7, #0]
   12d7a:	7a52      	ldrb	r2, [r2, #9]
   12d7c:	b292      	uxth	r2, r2
   12d7e:	4353      	muls	r3, r2
   12d80:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   12d82:	1dfb      	adds	r3, r7, #7
   12d84:	781b      	ldrb	r3, [r3, #0]
   12d86:	6839      	ldr	r1, [r7, #0]
   12d88:	7a89      	ldrb	r1, [r1, #10]
   12d8a:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   12d8c:	b299      	uxth	r1, r3
   12d8e:	230c      	movs	r3, #12
   12d90:	18fb      	adds	r3, r7, r3
   12d92:	434a      	muls	r2, r1
   12d94:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   12d96:	683b      	ldr	r3, [r7, #0]
   12d98:	685a      	ldr	r2, [r3, #4]
   12d9a:	230c      	movs	r3, #12
   12d9c:	18fb      	adds	r3, r7, r3
   12d9e:	881b      	ldrh	r3, [r3, #0]
   12da0:	18d3      	adds	r3, r2, r3
   12da2:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   12da4:	2312      	movs	r3, #18
   12da6:	18fb      	adds	r3, r7, r3
   12da8:	683a      	ldr	r2, [r7, #0]
   12daa:	7a52      	ldrb	r2, [r2, #9]
   12dac:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   12dae:	230e      	movs	r3, #14
   12db0:	18fb      	adds	r3, r7, r3
   12db2:	2200      	movs	r2, #0
   12db4:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   12db6:	230b      	movs	r3, #11
   12db8:	18fb      	adds	r3, r7, r3
   12dba:	683a      	ldr	r2, [r7, #0]
   12dbc:	7a12      	ldrb	r2, [r2, #8]
   12dbe:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   12dc0:	2311      	movs	r3, #17
   12dc2:	18fb      	adds	r3, r7, r3
   12dc4:	2200      	movs	r2, #0
   12dc6:	701a      	strb	r2, [r3, #0]
   12dc8:	e034      	b.n	12e34 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   12dca:	2311      	movs	r3, #17
   12dcc:	18fb      	adds	r3, r7, r3
   12dce:	781b      	ldrb	r3, [r3, #0]
   12dd0:	2207      	movs	r2, #7
   12dd2:	4013      	ands	r3, r2
   12dd4:	b2db      	uxtb	r3, r3
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	d107      	bne.n	12dea <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   12dda:	230e      	movs	r3, #14
   12ddc:	18fb      	adds	r3, r7, r3
   12dde:	697a      	ldr	r2, [r7, #20]
   12de0:	7812      	ldrb	r2, [r2, #0]
   12de2:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12de4:	697b      	ldr	r3, [r7, #20]
   12de6:	3301      	adds	r3, #1
   12de8:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   12dea:	230e      	movs	r3, #14
   12dec:	18fb      	adds	r3, r7, r3
   12dee:	781b      	ldrb	r3, [r3, #0]
   12df0:	b25b      	sxtb	r3, r3
   12df2:	2b00      	cmp	r3, #0
   12df4:	da09      	bge.n	12e0a <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   12df6:	230f      	movs	r3, #15
   12df8:	18fb      	adds	r3, r7, r3
   12dfa:	7819      	ldrb	r1, [r3, #0]
   12dfc:	2310      	movs	r3, #16
   12dfe:	18fb      	adds	r3, r7, r3
   12e00:	781b      	ldrb	r3, [r3, #0]
   12e02:	2201      	movs	r2, #1
   12e04:	0018      	movs	r0, r3
   12e06:	4b1d      	ldr	r3, [pc, #116]	; (12e7c <gfx_mono_draw_char_progmem+0x168>)
   12e08:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   12e0a:	2310      	movs	r3, #16
   12e0c:	18fb      	adds	r3, r7, r3
   12e0e:	2210      	movs	r2, #16
   12e10:	18ba      	adds	r2, r7, r2
   12e12:	7812      	ldrb	r2, [r2, #0]
   12e14:	3201      	adds	r2, #1
   12e16:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   12e18:	230e      	movs	r3, #14
   12e1a:	18fa      	adds	r2, r7, r3
   12e1c:	230e      	movs	r3, #14
   12e1e:	18fb      	adds	r3, r7, r3
   12e20:	781b      	ldrb	r3, [r3, #0]
   12e22:	18db      	adds	r3, r3, r3
   12e24:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   12e26:	2311      	movs	r3, #17
   12e28:	18fb      	adds	r3, r7, r3
   12e2a:	781a      	ldrb	r2, [r3, #0]
   12e2c:	2311      	movs	r3, #17
   12e2e:	18fb      	adds	r3, r7, r3
   12e30:	3201      	adds	r2, #1
   12e32:	701a      	strb	r2, [r3, #0]
   12e34:	2311      	movs	r3, #17
   12e36:	18fa      	adds	r2, r7, r3
   12e38:	230b      	movs	r3, #11
   12e3a:	18fb      	adds	r3, r7, r3
   12e3c:	7812      	ldrb	r2, [r2, #0]
   12e3e:	781b      	ldrb	r3, [r3, #0]
   12e40:	429a      	cmp	r2, r3
   12e42:	d3c2      	bcc.n	12dca <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12e44:	230f      	movs	r3, #15
   12e46:	18fb      	adds	r3, r7, r3
   12e48:	220f      	movs	r2, #15
   12e4a:	18ba      	adds	r2, r7, r2
   12e4c:	7812      	ldrb	r2, [r2, #0]
   12e4e:	3201      	adds	r2, #1
   12e50:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12e52:	2310      	movs	r3, #16
   12e54:	18fb      	adds	r3, r7, r3
   12e56:	1dba      	adds	r2, r7, #6
   12e58:	7812      	ldrb	r2, [r2, #0]
   12e5a:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12e5c:	2312      	movs	r3, #18
   12e5e:	18fb      	adds	r3, r7, r3
   12e60:	781a      	ldrb	r2, [r3, #0]
   12e62:	2312      	movs	r3, #18
   12e64:	18fb      	adds	r3, r7, r3
   12e66:	3a01      	subs	r2, #1
   12e68:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   12e6a:	2312      	movs	r3, #18
   12e6c:	18fb      	adds	r3, r7, r3
   12e6e:	781b      	ldrb	r3, [r3, #0]
   12e70:	2b00      	cmp	r3, #0
   12e72:	d19c      	bne.n	12dae <gfx_mono_draw_char_progmem+0x9a>
}
   12e74:	46c0      	nop			; (mov r8, r8)
   12e76:	46bd      	mov	sp, r7
   12e78:	b007      	add	sp, #28
   12e7a:	bd90      	pop	{r4, r7, pc}
   12e7c:	000130c5 	.word	0x000130c5

00012e80 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   12e80:	b590      	push	{r4, r7, lr}
   12e82:	b085      	sub	sp, #20
   12e84:	af02      	add	r7, sp, #8
   12e86:	0004      	movs	r4, r0
   12e88:	0008      	movs	r0, r1
   12e8a:	0011      	movs	r1, r2
   12e8c:	603b      	str	r3, [r7, #0]
   12e8e:	1dfb      	adds	r3, r7, #7
   12e90:	1c22      	adds	r2, r4, #0
   12e92:	701a      	strb	r2, [r3, #0]
   12e94:	1dbb      	adds	r3, r7, #6
   12e96:	1c02      	adds	r2, r0, #0
   12e98:	701a      	strb	r2, [r3, #0]
   12e9a:	1d7b      	adds	r3, r7, #5
   12e9c:	1c0a      	adds	r2, r1, #0
   12e9e:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   12ea0:	683b      	ldr	r3, [r7, #0]
   12ea2:	7a1a      	ldrb	r2, [r3, #8]
   12ea4:	683b      	ldr	r3, [r7, #0]
   12ea6:	7a5c      	ldrb	r4, [r3, #9]
   12ea8:	1d7b      	adds	r3, r7, #5
   12eaa:	7819      	ldrb	r1, [r3, #0]
   12eac:	1dbb      	adds	r3, r7, #6
   12eae:	7818      	ldrb	r0, [r3, #0]
   12eb0:	2300      	movs	r3, #0
   12eb2:	9300      	str	r3, [sp, #0]
   12eb4:	0023      	movs	r3, r4
   12eb6:	4c0b      	ldr	r4, [pc, #44]	; (12ee4 <gfx_mono_draw_char+0x64>)
   12eb8:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   12eba:	683b      	ldr	r3, [r7, #0]
   12ebc:	781b      	ldrb	r3, [r3, #0]
   12ebe:	2b00      	cmp	r3, #0
   12ec0:	d000      	beq.n	12ec4 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   12ec2:	e00a      	b.n	12eda <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   12ec4:	683c      	ldr	r4, [r7, #0]
   12ec6:	1d7b      	adds	r3, r7, #5
   12ec8:	781a      	ldrb	r2, [r3, #0]
   12eca:	1dbb      	adds	r3, r7, #6
   12ecc:	7819      	ldrb	r1, [r3, #0]
   12ece:	1dfb      	adds	r3, r7, #7
   12ed0:	7818      	ldrb	r0, [r3, #0]
   12ed2:	0023      	movs	r3, r4
   12ed4:	4c04      	ldr	r4, [pc, #16]	; (12ee8 <gfx_mono_draw_char+0x68>)
   12ed6:	47a0      	blx	r4
		break;
   12ed8:	46c0      	nop			; (mov r8, r8)
	}
}
   12eda:	46c0      	nop			; (mov r8, r8)
   12edc:	46bd      	mov	sp, r7
   12ede:	b003      	add	sp, #12
   12ee0:	bd90      	pop	{r4, r7, pc}
   12ee2:	46c0      	nop			; (mov r8, r8)
   12ee4:	00012a25 	.word	0x00012a25
   12ee8:	00012d15 	.word	0x00012d15

00012eec <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12eec:	b590      	push	{r4, r7, lr}
   12eee:	b087      	sub	sp, #28
   12ef0:	af00      	add	r7, sp, #0
   12ef2:	60f8      	str	r0, [r7, #12]
   12ef4:	0008      	movs	r0, r1
   12ef6:	0011      	movs	r1, r2
   12ef8:	607b      	str	r3, [r7, #4]
   12efa:	230b      	movs	r3, #11
   12efc:	18fb      	adds	r3, r7, r3
   12efe:	1c02      	adds	r2, r0, #0
   12f00:	701a      	strb	r2, [r3, #0]
   12f02:	230a      	movs	r3, #10
   12f04:	18fb      	adds	r3, r7, r3
   12f06:	1c0a      	adds	r2, r1, #0
   12f08:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   12f0a:	2317      	movs	r3, #23
   12f0c:	18fb      	adds	r3, r7, r3
   12f0e:	220b      	movs	r2, #11
   12f10:	18ba      	adds	r2, r7, r2
   12f12:	7812      	ldrb	r2, [r2, #0]
   12f14:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   12f16:	68fb      	ldr	r3, [r7, #12]
   12f18:	781b      	ldrb	r3, [r3, #0]
   12f1a:	2b0a      	cmp	r3, #10
   12f1c:	d111      	bne.n	12f42 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12f1e:	230b      	movs	r3, #11
   12f20:	18fb      	adds	r3, r7, r3
   12f22:	2217      	movs	r2, #23
   12f24:	18ba      	adds	r2, r7, r2
   12f26:	7812      	ldrb	r2, [r2, #0]
   12f28:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   12f2a:	687b      	ldr	r3, [r7, #4]
   12f2c:	7a5a      	ldrb	r2, [r3, #9]
   12f2e:	230a      	movs	r3, #10
   12f30:	18fb      	adds	r3, r7, r3
   12f32:	781b      	ldrb	r3, [r3, #0]
   12f34:	18d3      	adds	r3, r2, r3
   12f36:	b2da      	uxtb	r2, r3
   12f38:	230a      	movs	r3, #10
   12f3a:	18fb      	adds	r3, r7, r3
   12f3c:	3201      	adds	r2, #1
   12f3e:	701a      	strb	r2, [r3, #0]
   12f40:	e018      	b.n	12f74 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12f42:	68fb      	ldr	r3, [r7, #12]
   12f44:	781b      	ldrb	r3, [r3, #0]
   12f46:	2b0d      	cmp	r3, #13
   12f48:	d014      	beq.n	12f74 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   12f4a:	68fb      	ldr	r3, [r7, #12]
   12f4c:	7818      	ldrb	r0, [r3, #0]
   12f4e:	687c      	ldr	r4, [r7, #4]
   12f50:	230a      	movs	r3, #10
   12f52:	18fb      	adds	r3, r7, r3
   12f54:	781a      	ldrb	r2, [r3, #0]
   12f56:	230b      	movs	r3, #11
   12f58:	18fb      	adds	r3, r7, r3
   12f5a:	7819      	ldrb	r1, [r3, #0]
   12f5c:	0023      	movs	r3, r4
   12f5e:	4c0b      	ldr	r4, [pc, #44]	; (12f8c <gfx_mono_draw_string+0xa0>)
   12f60:	47a0      	blx	r4
			x += font->width;
   12f62:	687b      	ldr	r3, [r7, #4]
   12f64:	7a19      	ldrb	r1, [r3, #8]
   12f66:	230b      	movs	r3, #11
   12f68:	18fb      	adds	r3, r7, r3
   12f6a:	220b      	movs	r2, #11
   12f6c:	18ba      	adds	r2, r7, r2
   12f6e:	7812      	ldrb	r2, [r2, #0]
   12f70:	188a      	adds	r2, r1, r2
   12f72:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   12f74:	68fb      	ldr	r3, [r7, #12]
   12f76:	3301      	adds	r3, #1
   12f78:	60fb      	str	r3, [r7, #12]
   12f7a:	68fb      	ldr	r3, [r7, #12]
   12f7c:	781b      	ldrb	r3, [r3, #0]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d1c9      	bne.n	12f16 <gfx_mono_draw_string+0x2a>
}
   12f82:	46c0      	nop			; (mov r8, r8)
   12f84:	46bd      	mov	sp, r7
   12f86:	b007      	add	sp, #28
   12f88:	bd90      	pop	{r4, r7, pc}
   12f8a:	46c0      	nop			; (mov r8, r8)
   12f8c:	00012e81 	.word	0x00012e81

00012f90 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   12f90:	b580      	push	{r7, lr}
   12f92:	b082      	sub	sp, #8
   12f94:	af00      	add	r7, sp, #0
   12f96:	0002      	movs	r2, r0
   12f98:	1dfb      	adds	r3, r7, #7
   12f9a:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   12f9c:	1dfb      	adds	r3, r7, #7
   12f9e:	1dfa      	adds	r2, r7, #7
   12fa0:	7812      	ldrb	r2, [r2, #0]
   12fa2:	210f      	movs	r1, #15
   12fa4:	400a      	ands	r2, r1
   12fa6:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   12fa8:	1dfb      	adds	r3, r7, #7
   12faa:	781b      	ldrb	r3, [r3, #0]
   12fac:	2250      	movs	r2, #80	; 0x50
   12fae:	4252      	negs	r2, r2
   12fb0:	4313      	orrs	r3, r2
   12fb2:	b2db      	uxtb	r3, r3
   12fb4:	0018      	movs	r0, r3
   12fb6:	4b03      	ldr	r3, [pc, #12]	; (12fc4 <ssd1306_set_page_address+0x34>)
   12fb8:	4798      	blx	r3
}
   12fba:	46c0      	nop			; (mov r8, r8)
   12fbc:	46bd      	mov	sp, r7
   12fbe:	b002      	add	sp, #8
   12fc0:	bd80      	pop	{r7, pc}
   12fc2:	46c0      	nop			; (mov r8, r8)
   12fc4:	00012301 	.word	0x00012301

00012fc8 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   12fc8:	b580      	push	{r7, lr}
   12fca:	b082      	sub	sp, #8
   12fcc:	af00      	add	r7, sp, #0
   12fce:	0002      	movs	r2, r0
   12fd0:	1dfb      	adds	r3, r7, #7
   12fd2:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12fd4:	1dfb      	adds	r3, r7, #7
   12fd6:	1dfa      	adds	r2, r7, #7
   12fd8:	7812      	ldrb	r2, [r2, #0]
   12fda:	217f      	movs	r1, #127	; 0x7f
   12fdc:	400a      	ands	r2, r1
   12fde:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12fe0:	1dfb      	adds	r3, r7, #7
   12fe2:	781b      	ldrb	r3, [r3, #0]
   12fe4:	091b      	lsrs	r3, r3, #4
   12fe6:	b2db      	uxtb	r3, r3
   12fe8:	2210      	movs	r2, #16
   12fea:	4313      	orrs	r3, r2
   12fec:	b2db      	uxtb	r3, r3
   12fee:	3302      	adds	r3, #2
   12ff0:	b2db      	uxtb	r3, r3
   12ff2:	0018      	movs	r0, r3
   12ff4:	4b06      	ldr	r3, [pc, #24]	; (13010 <ssd1306_set_column_address+0x48>)
   12ff6:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   12ff8:	1dfb      	adds	r3, r7, #7
   12ffa:	781b      	ldrb	r3, [r3, #0]
   12ffc:	220f      	movs	r2, #15
   12ffe:	4013      	ands	r3, r2
   13000:	b2db      	uxtb	r3, r3
   13002:	0018      	movs	r0, r3
   13004:	4b02      	ldr	r3, [pc, #8]	; (13010 <ssd1306_set_column_address+0x48>)
   13006:	4798      	blx	r3
}
   13008:	46c0      	nop			; (mov r8, r8)
   1300a:	46bd      	mov	sp, r7
   1300c:	b002      	add	sp, #8
   1300e:	bd80      	pop	{r7, pc}
   13010:	00012301 	.word	0x00012301

00013014 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   13014:	b580      	push	{r7, lr}
   13016:	b082      	sub	sp, #8
   13018:	af00      	add	r7, sp, #0
   1301a:	0002      	movs	r2, r0
   1301c:	1dfb      	adds	r3, r7, #7
   1301e:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   13020:	1dfb      	adds	r3, r7, #7
   13022:	1dfa      	adds	r2, r7, #7
   13024:	7812      	ldrb	r2, [r2, #0]
   13026:	213f      	movs	r1, #63	; 0x3f
   13028:	400a      	ands	r2, r1
   1302a:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   1302c:	1dfb      	adds	r3, r7, #7
   1302e:	781b      	ldrb	r3, [r3, #0]
   13030:	2240      	movs	r2, #64	; 0x40
   13032:	4313      	orrs	r3, r2
   13034:	b2db      	uxtb	r3, r3
   13036:	0018      	movs	r0, r3
   13038:	4b02      	ldr	r3, [pc, #8]	; (13044 <ssd1306_set_display_start_line_address+0x30>)
   1303a:	4798      	blx	r3
}
   1303c:	46c0      	nop			; (mov r8, r8)
   1303e:	46bd      	mov	sp, r7
   13040:	b002      	add	sp, #8
   13042:	bd80      	pop	{r7, pc}
   13044:	00012301 	.word	0x00012301

00013048 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   13048:	b590      	push	{r4, r7, lr}
   1304a:	b083      	sub	sp, #12
   1304c:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   1304e:	4b18      	ldr	r3, [pc, #96]	; (130b0 <gfx_mono_ssd1306_init+0x68>)
   13050:	0018      	movs	r0, r3
   13052:	4b18      	ldr	r3, [pc, #96]	; (130b4 <gfx_mono_ssd1306_init+0x6c>)
   13054:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   13056:	4b18      	ldr	r3, [pc, #96]	; (130b8 <gfx_mono_ssd1306_init+0x70>)
   13058:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   1305a:	2000      	movs	r0, #0
   1305c:	4b17      	ldr	r3, [pc, #92]	; (130bc <gfx_mono_ssd1306_init+0x74>)
   1305e:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   13060:	1dfb      	adds	r3, r7, #7
   13062:	2200      	movs	r2, #0
   13064:	701a      	strb	r2, [r3, #0]
   13066:	e01a      	b.n	1309e <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   13068:	1dbb      	adds	r3, r7, #6
   1306a:	2200      	movs	r2, #0
   1306c:	701a      	strb	r2, [r3, #0]
   1306e:	e00c      	b.n	1308a <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   13070:	1dbb      	adds	r3, r7, #6
   13072:	7819      	ldrb	r1, [r3, #0]
   13074:	1dfb      	adds	r3, r7, #7
   13076:	7818      	ldrb	r0, [r3, #0]
   13078:	2301      	movs	r3, #1
   1307a:	2200      	movs	r2, #0
   1307c:	4c10      	ldr	r4, [pc, #64]	; (130c0 <gfx_mono_ssd1306_init+0x78>)
   1307e:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   13080:	1dbb      	adds	r3, r7, #6
   13082:	781a      	ldrb	r2, [r3, #0]
   13084:	1dbb      	adds	r3, r7, #6
   13086:	3201      	adds	r2, #1
   13088:	701a      	strb	r2, [r3, #0]
   1308a:	1dbb      	adds	r3, r7, #6
   1308c:	781b      	ldrb	r3, [r3, #0]
   1308e:	b25b      	sxtb	r3, r3
   13090:	2b00      	cmp	r3, #0
   13092:	daed      	bge.n	13070 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   13094:	1dfb      	adds	r3, r7, #7
   13096:	781a      	ldrb	r2, [r3, #0]
   13098:	1dfb      	adds	r3, r7, #7
   1309a:	3201      	adds	r2, #1
   1309c:	701a      	strb	r2, [r3, #0]
   1309e:	1dfb      	adds	r3, r7, #7
   130a0:	781b      	ldrb	r3, [r3, #0]
   130a2:	2b05      	cmp	r3, #5
   130a4:	d9e0      	bls.n	13068 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   130a6:	46c0      	nop			; (mov r8, r8)
   130a8:	46bd      	mov	sp, r7
   130aa:	b003      	add	sp, #12
   130ac:	bd90      	pop	{r4, r7, pc}
   130ae:	46c0      	nop			; (mov r8, r8)
   130b0:	20000320 	.word	0x20000320
   130b4:	000123b1 	.word	0x000123b1
   130b8:	00012259 	.word	0x00012259
   130bc:	00013015 	.word	0x00013015
   130c0:	000131b9 	.word	0x000131b9

000130c4 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   130c4:	b590      	push	{r4, r7, lr}
   130c6:	b085      	sub	sp, #20
   130c8:	af00      	add	r7, sp, #0
   130ca:	0004      	movs	r4, r0
   130cc:	0008      	movs	r0, r1
   130ce:	0011      	movs	r1, r2
   130d0:	1dfb      	adds	r3, r7, #7
   130d2:	1c22      	adds	r2, r4, #0
   130d4:	701a      	strb	r2, [r3, #0]
   130d6:	1dbb      	adds	r3, r7, #6
   130d8:	1c02      	adds	r2, r0, #0
   130da:	701a      	strb	r2, [r3, #0]
   130dc:	1d7b      	adds	r3, r7, #5
   130de:	1c0a      	adds	r2, r1, #0
   130e0:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   130e2:	1dfb      	adds	r3, r7, #7
   130e4:	781b      	ldrb	r3, [r3, #0]
   130e6:	2b3f      	cmp	r3, #63	; 0x3f
   130e8:	d85d      	bhi.n	131a6 <gfx_mono_ssd1306_draw_pixel+0xe2>
   130ea:	1dbb      	adds	r3, r7, #6
   130ec:	781b      	ldrb	r3, [r3, #0]
   130ee:	2b2f      	cmp	r3, #47	; 0x2f
   130f0:	d859      	bhi.n	131a6 <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   130f2:	230e      	movs	r3, #14
   130f4:	18fb      	adds	r3, r7, r3
   130f6:	1dba      	adds	r2, r7, #6
   130f8:	7812      	ldrb	r2, [r2, #0]
   130fa:	08d2      	lsrs	r2, r2, #3
   130fc:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   130fe:	1dbb      	adds	r3, r7, #6
   13100:	781a      	ldrb	r2, [r3, #0]
   13102:	230e      	movs	r3, #14
   13104:	18fb      	adds	r3, r7, r3
   13106:	781b      	ldrb	r3, [r3, #0]
   13108:	00db      	lsls	r3, r3, #3
   1310a:	1ad3      	subs	r3, r2, r3
   1310c:	2201      	movs	r2, #1
   1310e:	409a      	lsls	r2, r3
   13110:	230d      	movs	r3, #13
   13112:	18fb      	adds	r3, r7, r3
   13114:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   13116:	230f      	movs	r3, #15
   13118:	18fc      	adds	r4, r7, r3
   1311a:	1dfb      	adds	r3, r7, #7
   1311c:	781a      	ldrb	r2, [r3, #0]
   1311e:	230e      	movs	r3, #14
   13120:	18fb      	adds	r3, r7, r3
   13122:	781b      	ldrb	r3, [r3, #0]
   13124:	0011      	movs	r1, r2
   13126:	0018      	movs	r0, r3
   13128:	4b21      	ldr	r3, [pc, #132]	; (131b0 <gfx_mono_ssd1306_draw_pixel+0xec>)
   1312a:	4798      	blx	r3
   1312c:	0003      	movs	r3, r0
   1312e:	7023      	strb	r3, [r4, #0]

	switch (color) {
   13130:	1d7b      	adds	r3, r7, #5
   13132:	781b      	ldrb	r3, [r3, #0]
   13134:	2b01      	cmp	r3, #1
   13136:	d004      	beq.n	13142 <gfx_mono_ssd1306_draw_pixel+0x7e>
   13138:	2b02      	cmp	r3, #2
   1313a:	d01d      	beq.n	13178 <gfx_mono_ssd1306_draw_pixel+0xb4>
   1313c:	2b00      	cmp	r3, #0
   1313e:	d00b      	beq.n	13158 <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   13140:	e025      	b.n	1318e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   13142:	230f      	movs	r3, #15
   13144:	18fb      	adds	r3, r7, r3
   13146:	220f      	movs	r2, #15
   13148:	18b9      	adds	r1, r7, r2
   1314a:	220d      	movs	r2, #13
   1314c:	18ba      	adds	r2, r7, r2
   1314e:	7809      	ldrb	r1, [r1, #0]
   13150:	7812      	ldrb	r2, [r2, #0]
   13152:	430a      	orrs	r2, r1
   13154:	701a      	strb	r2, [r3, #0]
		break;
   13156:	e01a      	b.n	1318e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   13158:	230d      	movs	r3, #13
   1315a:	18fb      	adds	r3, r7, r3
   1315c:	781b      	ldrb	r3, [r3, #0]
   1315e:	b25b      	sxtb	r3, r3
   13160:	43db      	mvns	r3, r3
   13162:	b25b      	sxtb	r3, r3
   13164:	220f      	movs	r2, #15
   13166:	18ba      	adds	r2, r7, r2
   13168:	7812      	ldrb	r2, [r2, #0]
   1316a:	b252      	sxtb	r2, r2
   1316c:	4013      	ands	r3, r2
   1316e:	b25a      	sxtb	r2, r3
   13170:	230f      	movs	r3, #15
   13172:	18fb      	adds	r3, r7, r3
   13174:	701a      	strb	r2, [r3, #0]
		break;
   13176:	e00a      	b.n	1318e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   13178:	230f      	movs	r3, #15
   1317a:	18fb      	adds	r3, r7, r3
   1317c:	220f      	movs	r2, #15
   1317e:	18b9      	adds	r1, r7, r2
   13180:	220d      	movs	r2, #13
   13182:	18ba      	adds	r2, r7, r2
   13184:	7809      	ldrb	r1, [r1, #0]
   13186:	7812      	ldrb	r2, [r2, #0]
   13188:	404a      	eors	r2, r1
   1318a:	701a      	strb	r2, [r3, #0]
		break;
   1318c:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   1318e:	230f      	movs	r3, #15
   13190:	18fb      	adds	r3, r7, r3
   13192:	781a      	ldrb	r2, [r3, #0]
   13194:	1dfb      	adds	r3, r7, #7
   13196:	7819      	ldrb	r1, [r3, #0]
   13198:	230e      	movs	r3, #14
   1319a:	18fb      	adds	r3, r7, r3
   1319c:	7818      	ldrb	r0, [r3, #0]
   1319e:	2300      	movs	r3, #0
   131a0:	4c04      	ldr	r4, [pc, #16]	; (131b4 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   131a2:	47a0      	blx	r4
   131a4:	e000      	b.n	131a8 <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   131a6:	46c0      	nop			; (mov r8, r8)
}
   131a8:	46bd      	mov	sp, r7
   131aa:	b005      	add	sp, #20
   131ac:	bd90      	pop	{r4, r7, pc}
   131ae:	46c0      	nop			; (mov r8, r8)
   131b0:	00013259 	.word	0x00013259
   131b4:	000131b9 	.word	0x000131b9

000131b8 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   131b8:	b5b0      	push	{r4, r5, r7, lr}
   131ba:	b082      	sub	sp, #8
   131bc:	af00      	add	r7, sp, #0
   131be:	0005      	movs	r5, r0
   131c0:	000c      	movs	r4, r1
   131c2:	0010      	movs	r0, r2
   131c4:	0019      	movs	r1, r3
   131c6:	1dfb      	adds	r3, r7, #7
   131c8:	1c2a      	adds	r2, r5, #0
   131ca:	701a      	strb	r2, [r3, #0]
   131cc:	1dbb      	adds	r3, r7, #6
   131ce:	1c22      	adds	r2, r4, #0
   131d0:	701a      	strb	r2, [r3, #0]
   131d2:	1d7b      	adds	r3, r7, #5
   131d4:	1c02      	adds	r2, r0, #0
   131d6:	701a      	strb	r2, [r3, #0]
   131d8:	1d3b      	adds	r3, r7, #4
   131da:	1c0a      	adds	r2, r1, #0
   131dc:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   131de:	1d3b      	adds	r3, r7, #4
   131e0:	781b      	ldrb	r3, [r3, #0]
   131e2:	2201      	movs	r2, #1
   131e4:	4053      	eors	r3, r2
   131e6:	b2db      	uxtb	r3, r3
   131e8:	2b00      	cmp	r3, #0
   131ea:	d00d      	beq.n	13208 <gfx_mono_ssd1306_put_byte+0x50>
   131ec:	1dbb      	adds	r3, r7, #6
   131ee:	781a      	ldrb	r2, [r3, #0]
   131f0:	1dfb      	adds	r3, r7, #7
   131f2:	781b      	ldrb	r3, [r3, #0]
   131f4:	0011      	movs	r1, r2
   131f6:	0018      	movs	r0, r3
   131f8:	4b12      	ldr	r3, [pc, #72]	; (13244 <gfx_mono_ssd1306_put_byte+0x8c>)
   131fa:	4798      	blx	r3
   131fc:	0003      	movs	r3, r0
   131fe:	001a      	movs	r2, r3
   13200:	1d7b      	adds	r3, r7, #5
   13202:	781b      	ldrb	r3, [r3, #0]
   13204:	4293      	cmp	r3, r2
   13206:	d018      	beq.n	1323a <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   13208:	1d7b      	adds	r3, r7, #5
   1320a:	781a      	ldrb	r2, [r3, #0]
   1320c:	1dbb      	adds	r3, r7, #6
   1320e:	7819      	ldrb	r1, [r3, #0]
   13210:	1dfb      	adds	r3, r7, #7
   13212:	781b      	ldrb	r3, [r3, #0]
   13214:	0018      	movs	r0, r3
   13216:	4b0c      	ldr	r3, [pc, #48]	; (13248 <gfx_mono_ssd1306_put_byte+0x90>)
   13218:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   1321a:	1dfb      	adds	r3, r7, #7
   1321c:	781b      	ldrb	r3, [r3, #0]
   1321e:	0018      	movs	r0, r3
   13220:	4b0a      	ldr	r3, [pc, #40]	; (1324c <gfx_mono_ssd1306_put_byte+0x94>)
   13222:	4798      	blx	r3
	ssd1306_set_column_address(column);
   13224:	1dbb      	adds	r3, r7, #6
   13226:	781b      	ldrb	r3, [r3, #0]
   13228:	0018      	movs	r0, r3
   1322a:	4b09      	ldr	r3, [pc, #36]	; (13250 <gfx_mono_ssd1306_put_byte+0x98>)
   1322c:	4798      	blx	r3

	ssd1306_write_data(data);
   1322e:	1d7b      	adds	r3, r7, #5
   13230:	781b      	ldrb	r3, [r3, #0]
   13232:	0018      	movs	r0, r3
   13234:	4b07      	ldr	r3, [pc, #28]	; (13254 <gfx_mono_ssd1306_put_byte+0x9c>)
   13236:	4798      	blx	r3
   13238:	e000      	b.n	1323c <gfx_mono_ssd1306_put_byte+0x84>
		return;
   1323a:	46c0      	nop			; (mov r8, r8)
}
   1323c:	46bd      	mov	sp, r7
   1323e:	b002      	add	sp, #8
   13240:	bdb0      	pop	{r4, r5, r7, pc}
   13242:	46c0      	nop			; (mov r8, r8)
   13244:	00012411 	.word	0x00012411
   13248:	000123cd 	.word	0x000123cd
   1324c:	00012f91 	.word	0x00012f91
   13250:	00012fc9 	.word	0x00012fc9
   13254:	00012359 	.word	0x00012359

00013258 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   13258:	b580      	push	{r7, lr}
   1325a:	b082      	sub	sp, #8
   1325c:	af00      	add	r7, sp, #0
   1325e:	0002      	movs	r2, r0
   13260:	1dfb      	adds	r3, r7, #7
   13262:	701a      	strb	r2, [r3, #0]
   13264:	1dbb      	adds	r3, r7, #6
   13266:	1c0a      	adds	r2, r1, #0
   13268:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   1326a:	1dbb      	adds	r3, r7, #6
   1326c:	781a      	ldrb	r2, [r3, #0]
   1326e:	1dfb      	adds	r3, r7, #7
   13270:	781b      	ldrb	r3, [r3, #0]
   13272:	0011      	movs	r1, r2
   13274:	0018      	movs	r0, r3
   13276:	4b03      	ldr	r3, [pc, #12]	; (13284 <gfx_mono_ssd1306_get_byte+0x2c>)
   13278:	4798      	blx	r3
   1327a:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   1327c:	0018      	movs	r0, r3
   1327e:	46bd      	mov	sp, r7
   13280:	b002      	add	sp, #8
   13282:	bd80      	pop	{r7, pc}
   13284:	00012411 	.word	0x00012411

00013288 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
   13288:	b5b0      	push	{r4, r5, r7, lr}
   1328a:	b084      	sub	sp, #16
   1328c:	af00      	add	r7, sp, #0
   1328e:	0005      	movs	r5, r0
   13290:	000c      	movs	r4, r1
   13292:	0010      	movs	r0, r2
   13294:	0019      	movs	r1, r3
   13296:	1dfb      	adds	r3, r7, #7
   13298:	1c2a      	adds	r2, r5, #0
   1329a:	701a      	strb	r2, [r3, #0]
   1329c:	1dbb      	adds	r3, r7, #6
   1329e:	1c22      	adds	r2, r4, #0
   132a0:	701a      	strb	r2, [r3, #0]
   132a2:	1d7b      	adds	r3, r7, #5
   132a4:	1c02      	adds	r2, r0, #0
   132a6:	701a      	strb	r2, [r3, #0]
   132a8:	1d3b      	adds	r3, r7, #4
   132aa:	1c0a      	adds	r2, r1, #0
   132ac:	701a      	strb	r2, [r3, #0]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
   132ae:	230f      	movs	r3, #15
   132b0:	18fc      	adds	r4, r7, r3
   132b2:	1dbb      	adds	r3, r7, #6
   132b4:	781a      	ldrb	r2, [r3, #0]
   132b6:	1dfb      	adds	r3, r7, #7
   132b8:	781b      	ldrb	r3, [r3, #0]
   132ba:	0011      	movs	r1, r2
   132bc:	0018      	movs	r0, r3
   132be:	4b1f      	ldr	r3, [pc, #124]	; (1333c <gfx_mono_ssd1306_mask_byte+0xb4>)
   132c0:	4798      	blx	r3
   132c2:	0003      	movs	r3, r0
   132c4:	7023      	strb	r3, [r4, #0]

	switch (color) {
   132c6:	1d3b      	adds	r3, r7, #4
   132c8:	781b      	ldrb	r3, [r3, #0]
   132ca:	2b01      	cmp	r3, #1
   132cc:	d004      	beq.n	132d8 <gfx_mono_ssd1306_mask_byte+0x50>
   132ce:	2b02      	cmp	r3, #2
   132d0:	d01b      	beq.n	1330a <gfx_mono_ssd1306_mask_byte+0x82>
   132d2:	2b00      	cmp	r3, #0
   132d4:	d00a      	beq.n	132ec <gfx_mono_ssd1306_mask_byte+0x64>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
   132d6:	e022      	b.n	1331e <gfx_mono_ssd1306_mask_byte+0x96>
		temp |= pixel_mask;
   132d8:	230f      	movs	r3, #15
   132da:	18fb      	adds	r3, r7, r3
   132dc:	220f      	movs	r2, #15
   132de:	18b9      	adds	r1, r7, r2
   132e0:	1d7a      	adds	r2, r7, #5
   132e2:	7809      	ldrb	r1, [r1, #0]
   132e4:	7812      	ldrb	r2, [r2, #0]
   132e6:	430a      	orrs	r2, r1
   132e8:	701a      	strb	r2, [r3, #0]
		break;
   132ea:	e018      	b.n	1331e <gfx_mono_ssd1306_mask_byte+0x96>
		temp &= ~pixel_mask;
   132ec:	1d7b      	adds	r3, r7, #5
   132ee:	781b      	ldrb	r3, [r3, #0]
   132f0:	b25b      	sxtb	r3, r3
   132f2:	43db      	mvns	r3, r3
   132f4:	b25b      	sxtb	r3, r3
   132f6:	220f      	movs	r2, #15
   132f8:	18ba      	adds	r2, r7, r2
   132fa:	7812      	ldrb	r2, [r2, #0]
   132fc:	b252      	sxtb	r2, r2
   132fe:	4013      	ands	r3, r2
   13300:	b25a      	sxtb	r2, r3
   13302:	230f      	movs	r3, #15
   13304:	18fb      	adds	r3, r7, r3
   13306:	701a      	strb	r2, [r3, #0]
		break;
   13308:	e009      	b.n	1331e <gfx_mono_ssd1306_mask_byte+0x96>
		temp ^= pixel_mask;
   1330a:	230f      	movs	r3, #15
   1330c:	18fb      	adds	r3, r7, r3
   1330e:	220f      	movs	r2, #15
   13310:	18b9      	adds	r1, r7, r2
   13312:	1d7a      	adds	r2, r7, #5
   13314:	7809      	ldrb	r1, [r1, #0]
   13316:	7812      	ldrb	r2, [r2, #0]
   13318:	404a      	eors	r2, r1
   1331a:	701a      	strb	r2, [r3, #0]
		break;
   1331c:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, column, temp);
   1331e:	230f      	movs	r3, #15
   13320:	18fb      	adds	r3, r7, r3
   13322:	781a      	ldrb	r2, [r3, #0]
   13324:	1dbb      	adds	r3, r7, #6
   13326:	7819      	ldrb	r1, [r3, #0]
   13328:	1dfb      	adds	r3, r7, #7
   1332a:	7818      	ldrb	r0, [r3, #0]
   1332c:	2300      	movs	r3, #0
   1332e:	4c04      	ldr	r4, [pc, #16]	; (13340 <gfx_mono_ssd1306_mask_byte+0xb8>)
   13330:	47a0      	blx	r4
}
   13332:	46c0      	nop			; (mov r8, r8)
   13334:	46bd      	mov	sp, r7
   13336:	b004      	add	sp, #16
   13338:	bdb0      	pop	{r4, r5, r7, pc}
   1333a:	46c0      	nop			; (mov r8, r8)
   1333c:	00013259 	.word	0x00013259
   13340:	000131b9 	.word	0x000131b9

00013344 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   13344:	b580      	push	{r7, lr}
   13346:	b084      	sub	sp, #16
   13348:	af00      	add	r7, sp, #0
   1334a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1334c:	687b      	ldr	r3, [r7, #4]
   1334e:	681b      	ldr	r3, [r3, #0]
   13350:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13352:	68fb      	ldr	r3, [r7, #12]
   13354:	7e5b      	ldrb	r3, [r3, #25]
   13356:	b2db      	uxtb	r3, r3
   13358:	b25b      	sxtb	r3, r3
   1335a:	2b00      	cmp	r3, #0
   1335c:	da01      	bge.n	13362 <adc_is_syncing+0x1e>
		return true;
   1335e:	2301      	movs	r3, #1
   13360:	e000      	b.n	13364 <adc_is_syncing+0x20>
	}

	return false;
   13362:	2300      	movs	r3, #0
}
   13364:	0018      	movs	r0, r3
   13366:	46bd      	mov	sp, r7
   13368:	b004      	add	sp, #16
   1336a:	bd80      	pop	{r7, pc}

0001336c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1336c:	b580      	push	{r7, lr}
   1336e:	b084      	sub	sp, #16
   13370:	af00      	add	r7, sp, #0
   13372:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13374:	687b      	ldr	r3, [r7, #4]
   13376:	681b      	ldr	r3, [r3, #0]
   13378:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1337a:	46c0      	nop			; (mov r8, r8)
   1337c:	687b      	ldr	r3, [r7, #4]
   1337e:	0018      	movs	r0, r3
   13380:	4b0b      	ldr	r3, [pc, #44]	; (133b0 <adc_start_conversion+0x44>)
   13382:	4798      	blx	r3
   13384:	1e03      	subs	r3, r0, #0
   13386:	d1f9      	bne.n	1337c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   13388:	68fb      	ldr	r3, [r7, #12]
   1338a:	7b1b      	ldrb	r3, [r3, #12]
   1338c:	b2db      	uxtb	r3, r3
   1338e:	2202      	movs	r2, #2
   13390:	4313      	orrs	r3, r2
   13392:	b2da      	uxtb	r2, r3
   13394:	68fb      	ldr	r3, [r7, #12]
   13396:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   13398:	46c0      	nop			; (mov r8, r8)
   1339a:	687b      	ldr	r3, [r7, #4]
   1339c:	0018      	movs	r0, r3
   1339e:	4b04      	ldr	r3, [pc, #16]	; (133b0 <adc_start_conversion+0x44>)
   133a0:	4798      	blx	r3
   133a2:	1e03      	subs	r3, r0, #0
   133a4:	d1f9      	bne.n	1339a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   133a6:	46c0      	nop			; (mov r8, r8)
   133a8:	46bd      	mov	sp, r7
   133aa:	b004      	add	sp, #16
   133ac:	bd80      	pop	{r7, pc}
   133ae:	46c0      	nop			; (mov r8, r8)
   133b0:	00013345 	.word	0x00013345

000133b4 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   133b4:	b580      	push	{r7, lr}
   133b6:	b084      	sub	sp, #16
   133b8:	af00      	add	r7, sp, #0
   133ba:	6078      	str	r0, [r7, #4]
   133bc:	000a      	movs	r2, r1
   133be:	1cfb      	adds	r3, r7, #3
   133c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   133c2:	687b      	ldr	r3, [r7, #4]
   133c4:	681b      	ldr	r3, [r3, #0]
   133c6:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   133c8:	68fb      	ldr	r3, [r7, #12]
   133ca:	1cfa      	adds	r2, r7, #3
   133cc:	7812      	ldrb	r2, [r2, #0]
   133ce:	759a      	strb	r2, [r3, #22]
}
   133d0:	46c0      	nop			; (mov r8, r8)
   133d2:	46bd      	mov	sp, r7
   133d4:	b004      	add	sp, #16
   133d6:	bd80      	pop	{r7, pc}

000133d8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   133d8:	b580      	push	{r7, lr}
   133da:	b084      	sub	sp, #16
   133dc:	af00      	add	r7, sp, #0
   133de:	0002      	movs	r2, r0
   133e0:	1dfb      	adds	r3, r7, #7
   133e2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   133e4:	1dfb      	adds	r3, r7, #7
   133e6:	781a      	ldrb	r2, [r3, #0]
   133e8:	4b47      	ldr	r3, [pc, #284]	; (13508 <_adc_interrupt_handler+0x130>)
   133ea:	0092      	lsls	r2, r2, #2
   133ec:	58d3      	ldr	r3, [r2, r3]
   133ee:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   133f0:	68fb      	ldr	r3, [r7, #12]
   133f2:	681b      	ldr	r3, [r3, #0]
   133f4:	7e1b      	ldrb	r3, [r3, #24]
   133f6:	b2da      	uxtb	r2, r3
   133f8:	68fb      	ldr	r3, [r7, #12]
   133fa:	681b      	ldr	r3, [r3, #0]
   133fc:	7ddb      	ldrb	r3, [r3, #23]
   133fe:	b2db      	uxtb	r3, r3
   13400:	4013      	ands	r3, r2
   13402:	b2db      	uxtb	r3, r3
   13404:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   13406:	68bb      	ldr	r3, [r7, #8]
   13408:	2201      	movs	r2, #1
   1340a:	4013      	ands	r3, r2
   1340c:	d045      	beq.n	1349a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   1340e:	68fb      	ldr	r3, [r7, #12]
   13410:	681b      	ldr	r3, [r3, #0]
   13412:	2201      	movs	r2, #1
   13414:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   13416:	46c0      	nop			; (mov r8, r8)
   13418:	68fb      	ldr	r3, [r7, #12]
   1341a:	0018      	movs	r0, r3
   1341c:	4b3b      	ldr	r3, [pc, #236]	; (1350c <_adc_interrupt_handler+0x134>)
   1341e:	4798      	blx	r3
   13420:	1e03      	subs	r3, r0, #0
   13422:	d1f9      	bne.n	13418 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   13424:	68fb      	ldr	r3, [r7, #12]
   13426:	695b      	ldr	r3, [r3, #20]
   13428:	1c99      	adds	r1, r3, #2
   1342a:	68fa      	ldr	r2, [r7, #12]
   1342c:	6151      	str	r1, [r2, #20]
   1342e:	68fa      	ldr	r2, [r7, #12]
   13430:	6812      	ldr	r2, [r2, #0]
   13432:	8b52      	ldrh	r2, [r2, #26]
   13434:	b292      	uxth	r2, r2
   13436:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   13438:	68fb      	ldr	r3, [r7, #12]
   1343a:	8b1b      	ldrh	r3, [r3, #24]
   1343c:	b29b      	uxth	r3, r3
   1343e:	3b01      	subs	r3, #1
   13440:	b29b      	uxth	r3, r3
   13442:	68fa      	ldr	r2, [r7, #12]
   13444:	1c19      	adds	r1, r3, #0
   13446:	8311      	strh	r1, [r2, #24]
   13448:	2b00      	cmp	r3, #0
   1344a:	d008      	beq.n	1345e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1344c:	68fb      	ldr	r3, [r7, #12]
   1344e:	7f5b      	ldrb	r3, [r3, #29]
   13450:	2b00      	cmp	r3, #0
   13452:	d022      	beq.n	1349a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   13454:	68fb      	ldr	r3, [r7, #12]
   13456:	0018      	movs	r0, r3
   13458:	4b2d      	ldr	r3, [pc, #180]	; (13510 <_adc_interrupt_handler+0x138>)
   1345a:	4798      	blx	r3
   1345c:	e01d      	b.n	1349a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1345e:	68fb      	ldr	r3, [r7, #12]
   13460:	2101      	movs	r1, #1
   13462:	0018      	movs	r0, r3
   13464:	4b2b      	ldr	r3, [pc, #172]	; (13514 <_adc_interrupt_handler+0x13c>)
   13466:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   13468:	68fb      	ldr	r3, [r7, #12]
   1346a:	7f1b      	ldrb	r3, [r3, #28]
   1346c:	b2db      	uxtb	r3, r3
   1346e:	2b05      	cmp	r3, #5
   13470:	d113      	bne.n	1349a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   13472:	68fb      	ldr	r3, [r7, #12]
   13474:	2200      	movs	r2, #0
   13476:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   13478:	68fb      	ldr	r3, [r7, #12]
   1347a:	7edb      	ldrb	r3, [r3, #27]
   1347c:	001a      	movs	r2, r3
   1347e:	2301      	movs	r3, #1
   13480:	4013      	ands	r3, r2
   13482:	d00a      	beq.n	1349a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   13484:	68fb      	ldr	r3, [r7, #12]
   13486:	7e9b      	ldrb	r3, [r3, #26]
   13488:	001a      	movs	r2, r3
   1348a:	2301      	movs	r3, #1
   1348c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1348e:	d004      	beq.n	1349a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   13490:	68fb      	ldr	r3, [r7, #12]
   13492:	689b      	ldr	r3, [r3, #8]
   13494:	68fa      	ldr	r2, [r7, #12]
   13496:	0010      	movs	r0, r2
   13498:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1349a:	68bb      	ldr	r3, [r7, #8]
   1349c:	2204      	movs	r2, #4
   1349e:	4013      	ands	r3, r2
   134a0:	d014      	beq.n	134cc <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   134a2:	68fb      	ldr	r3, [r7, #12]
   134a4:	681b      	ldr	r3, [r3, #0]
   134a6:	2204      	movs	r2, #4
   134a8:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   134aa:	68fb      	ldr	r3, [r7, #12]
   134ac:	7edb      	ldrb	r3, [r3, #27]
   134ae:	001a      	movs	r2, r3
   134b0:	2302      	movs	r3, #2
   134b2:	4013      	ands	r3, r2
   134b4:	d00a      	beq.n	134cc <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   134b6:	68fb      	ldr	r3, [r7, #12]
   134b8:	7e9b      	ldrb	r3, [r3, #26]
   134ba:	001a      	movs	r2, r3
   134bc:	2302      	movs	r3, #2
   134be:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   134c0:	d004      	beq.n	134cc <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   134c2:	68fb      	ldr	r3, [r7, #12]
   134c4:	68db      	ldr	r3, [r3, #12]
   134c6:	68fa      	ldr	r2, [r7, #12]
   134c8:	0010      	movs	r0, r2
   134ca:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   134cc:	68bb      	ldr	r3, [r7, #8]
   134ce:	2202      	movs	r2, #2
   134d0:	4013      	ands	r3, r2
   134d2:	d014      	beq.n	134fe <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   134d4:	68fb      	ldr	r3, [r7, #12]
   134d6:	681b      	ldr	r3, [r3, #0]
   134d8:	2202      	movs	r2, #2
   134da:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   134dc:	68fb      	ldr	r3, [r7, #12]
   134de:	7edb      	ldrb	r3, [r3, #27]
   134e0:	001a      	movs	r2, r3
   134e2:	2304      	movs	r3, #4
   134e4:	4013      	ands	r3, r2
   134e6:	d00a      	beq.n	134fe <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   134e8:	68fb      	ldr	r3, [r7, #12]
   134ea:	7e9b      	ldrb	r3, [r3, #26]
   134ec:	001a      	movs	r2, r3
   134ee:	2304      	movs	r3, #4
   134f0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   134f2:	d004      	beq.n	134fe <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   134f4:	68fb      	ldr	r3, [r7, #12]
   134f6:	691b      	ldr	r3, [r3, #16]
   134f8:	68fa      	ldr	r2, [r7, #12]
   134fa:	0010      	movs	r0, r2
   134fc:	4798      	blx	r3
		}
	}
}
   134fe:	46c0      	nop			; (mov r8, r8)
   13500:	46bd      	mov	sp, r7
   13502:	b004      	add	sp, #16
   13504:	bd80      	pop	{r7, pc}
   13506:	46c0      	nop			; (mov r8, r8)
   13508:	200047c0 	.word	0x200047c0
   1350c:	00013345 	.word	0x00013345
   13510:	0001336d 	.word	0x0001336d
   13514:	000133b5 	.word	0x000133b5

00013518 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   13518:	b580      	push	{r7, lr}
   1351a:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   1351c:	2000      	movs	r0, #0
   1351e:	4b02      	ldr	r3, [pc, #8]	; (13528 <ADC_Handler+0x10>)
   13520:	4798      	blx	r3
}
   13522:	46c0      	nop			; (mov r8, r8)
   13524:	46bd      	mov	sp, r7
   13526:	bd80      	pop	{r7, pc}
   13528:	000133d9 	.word	0x000133d9

0001352c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   1352c:	b580      	push	{r7, lr}
   1352e:	b082      	sub	sp, #8
   13530:	af00      	add	r7, sp, #0
   13532:	0002      	movs	r2, r0
   13534:	1dfb      	adds	r3, r7, #7
   13536:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13538:	4a07      	ldr	r2, [pc, #28]	; (13558 <system_interrupt_disable+0x2c>)
   1353a:	1dfb      	adds	r3, r7, #7
   1353c:	781b      	ldrb	r3, [r3, #0]
   1353e:	0019      	movs	r1, r3
   13540:	231f      	movs	r3, #31
   13542:	400b      	ands	r3, r1
   13544:	2101      	movs	r1, #1
   13546:	4099      	lsls	r1, r3
   13548:	000b      	movs	r3, r1
   1354a:	0019      	movs	r1, r3
   1354c:	2380      	movs	r3, #128	; 0x80
   1354e:	50d1      	str	r1, [r2, r3]
}
   13550:	46c0      	nop			; (mov r8, r8)
   13552:	46bd      	mov	sp, r7
   13554:	b002      	add	sp, #8
   13556:	bd80      	pop	{r7, pc}
   13558:	e000e100 	.word	0xe000e100

0001355c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1355c:	b580      	push	{r7, lr}
   1355e:	b084      	sub	sp, #16
   13560:	af00      	add	r7, sp, #0
   13562:	0002      	movs	r2, r0
   13564:	1dfb      	adds	r3, r7, #7
   13566:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   13568:	1dfb      	adds	r3, r7, #7
   1356a:	781a      	ldrb	r2, [r3, #0]
   1356c:	4b37      	ldr	r3, [pc, #220]	; (1364c <_dac_interrupt_handler+0xf0>)
   1356e:	0092      	lsls	r2, r2, #2
   13570:	58d3      	ldr	r3, [r2, r3]
   13572:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   13574:	68fb      	ldr	r3, [r7, #12]
   13576:	681b      	ldr	r3, [r3, #0]
   13578:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1357a:	68bb      	ldr	r3, [r7, #8]
   1357c:	799b      	ldrb	r3, [r3, #6]
   1357e:	b2db      	uxtb	r3, r3
   13580:	001a      	movs	r2, r3
   13582:	2301      	movs	r3, #1
   13584:	4013      	ands	r3, r2
   13586:	d00e      	beq.n	135a6 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   13588:	68bb      	ldr	r3, [r7, #8]
   1358a:	2201      	movs	r2, #1
   1358c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1358e:	68fb      	ldr	r3, [r7, #12]
   13590:	3314      	adds	r3, #20
   13592:	2b00      	cmp	r3, #0
   13594:	d007      	beq.n	135a6 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   13596:	68fb      	ldr	r3, [r7, #12]
   13598:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1359a:	2b00      	cmp	r3, #0
   1359c:	d003      	beq.n	135a6 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1359e:	68fb      	ldr	r3, [r7, #12]
   135a0:	699b      	ldr	r3, [r3, #24]
   135a2:	2000      	movs	r0, #0
   135a4:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   135a6:	68bb      	ldr	r3, [r7, #8]
   135a8:	799b      	ldrb	r3, [r3, #6]
   135aa:	b2db      	uxtb	r3, r3
   135ac:	001a      	movs	r2, r3
   135ae:	2302      	movs	r3, #2
   135b0:	4013      	ands	r3, r2
   135b2:	d047      	beq.n	13644 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   135b4:	68bb      	ldr	r3, [r7, #8]
   135b6:	2202      	movs	r2, #2
   135b8:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   135ba:	68fb      	ldr	r3, [r7, #12]
   135bc:	899b      	ldrh	r3, [r3, #12]
   135be:	b29b      	uxth	r3, r3
   135c0:	2b00      	cmp	r3, #0
   135c2:	d033      	beq.n	1362c <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   135c4:	68fb      	ldr	r3, [r7, #12]
   135c6:	689a      	ldr	r2, [r3, #8]
   135c8:	68fb      	ldr	r3, [r7, #12]
   135ca:	89db      	ldrh	r3, [r3, #14]
   135cc:	b29b      	uxth	r3, r3
   135ce:	1c59      	adds	r1, r3, #1
   135d0:	b288      	uxth	r0, r1
   135d2:	68f9      	ldr	r1, [r7, #12]
   135d4:	81c8      	strh	r0, [r1, #14]
   135d6:	005b      	lsls	r3, r3, #1
   135d8:	18d3      	adds	r3, r2, r3
   135da:	881b      	ldrh	r3, [r3, #0]
   135dc:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   135de:	68bb      	ldr	r3, [r7, #8]
   135e0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   135e2:	68fb      	ldr	r3, [r7, #12]
   135e4:	899b      	ldrh	r3, [r3, #12]
   135e6:	b29b      	uxth	r3, r3
   135e8:	3b01      	subs	r3, #1
   135ea:	b29a      	uxth	r2, r3
   135ec:	68fb      	ldr	r3, [r7, #12]
   135ee:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   135f0:	68fb      	ldr	r3, [r7, #12]
   135f2:	899b      	ldrh	r3, [r3, #12]
   135f4:	b29b      	uxth	r3, r3
   135f6:	2b00      	cmp	r3, #0
   135f8:	d118      	bne.n	1362c <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   135fa:	68fb      	ldr	r3, [r7, #12]
   135fc:	2220      	movs	r2, #32
   135fe:	2100      	movs	r1, #0
   13600:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   13602:	68bb      	ldr	r3, [r7, #8]
   13604:	2202      	movs	r2, #2
   13606:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   13608:	68bb      	ldr	r3, [r7, #8]
   1360a:	2202      	movs	r2, #2
   1360c:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   1360e:	2019      	movs	r0, #25
   13610:	4b0f      	ldr	r3, [pc, #60]	; (13650 <_dac_interrupt_handler+0xf4>)
   13612:	4798      	blx	r3

				if ((module->callback) &&
   13614:	68fb      	ldr	r3, [r7, #12]
   13616:	3314      	adds	r3, #20
   13618:	2b00      	cmp	r3, #0
   1361a:	d007      	beq.n	1362c <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   1361c:	68fb      	ldr	r3, [r7, #12]
   1361e:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   13620:	2b00      	cmp	r3, #0
   13622:	d003      	beq.n	1362c <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   13624:	68fb      	ldr	r3, [r7, #12]
   13626:	69db      	ldr	r3, [r3, #28]
   13628:	2000      	movs	r0, #0
   1362a:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1362c:	68fb      	ldr	r3, [r7, #12]
   1362e:	3314      	adds	r3, #20
   13630:	2b00      	cmp	r3, #0
   13632:	d007      	beq.n	13644 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   13634:	68fb      	ldr	r3, [r7, #12]
   13636:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   13638:	2b00      	cmp	r3, #0
   1363a:	d003      	beq.n	13644 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1363c:	68fb      	ldr	r3, [r7, #12]
   1363e:	695b      	ldr	r3, [r3, #20]
   13640:	2000      	movs	r0, #0
   13642:	4798      	blx	r3
		}
	}
}
   13644:	46c0      	nop			; (mov r8, r8)
   13646:	46bd      	mov	sp, r7
   13648:	b004      	add	sp, #16
   1364a:	bd80      	pop	{r7, pc}
   1364c:	200047c4 	.word	0x200047c4
   13650:	0001352d 	.word	0x0001352d

00013654 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   13654:	b580      	push	{r7, lr}
   13656:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   13658:	2000      	movs	r0, #0
   1365a:	4b02      	ldr	r3, [pc, #8]	; (13664 <DAC_Handler+0x10>)
   1365c:	4798      	blx	r3
}
   1365e:	46c0      	nop			; (mov r8, r8)
   13660:	46bd      	mov	sp, r7
   13662:	bd80      	pop	{r7, pc}
   13664:	0001355d 	.word	0x0001355d

00013668 <system_interrupt_enter_critical_section>:
{
   13668:	b580      	push	{r7, lr}
   1366a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1366c:	4b02      	ldr	r3, [pc, #8]	; (13678 <system_interrupt_enter_critical_section+0x10>)
   1366e:	4798      	blx	r3
}
   13670:	46c0      	nop			; (mov r8, r8)
   13672:	46bd      	mov	sp, r7
   13674:	bd80      	pop	{r7, pc}
   13676:	46c0      	nop			; (mov r8, r8)
   13678:	00026f7d 	.word	0x00026f7d

0001367c <system_interrupt_leave_critical_section>:
{
   1367c:	b580      	push	{r7, lr}
   1367e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13680:	4b02      	ldr	r3, [pc, #8]	; (1368c <system_interrupt_leave_critical_section+0x10>)
   13682:	4798      	blx	r3
}
   13684:	46c0      	nop			; (mov r8, r8)
   13686:	46bd      	mov	sp, r7
   13688:	bd80      	pop	{r7, pc}
   1368a:	46c0      	nop			; (mov r8, r8)
   1368c:	00026fd1 	.word	0x00026fd1

00013690 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   13690:	b580      	push	{r7, lr}
   13692:	b086      	sub	sp, #24
   13694:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   13696:	4b49      	ldr	r3, [pc, #292]	; (137bc <DMAC_Handler+0x12c>)
   13698:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1369a:	4b49      	ldr	r3, [pc, #292]	; (137c0 <DMAC_Handler+0x130>)
   1369c:	8c1b      	ldrh	r3, [r3, #32]
   1369e:	b29b      	uxth	r3, r3
   136a0:	b2da      	uxtb	r2, r3
   136a2:	2317      	movs	r3, #23
   136a4:	18fb      	adds	r3, r7, r3
   136a6:	210f      	movs	r1, #15
   136a8:	400a      	ands	r2, r1
   136aa:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   136ac:	2317      	movs	r3, #23
   136ae:	18fb      	adds	r3, r7, r3
   136b0:	781a      	ldrb	r2, [r3, #0]
   136b2:	4b44      	ldr	r3, [pc, #272]	; (137c4 <DMAC_Handler+0x134>)
   136b4:	0092      	lsls	r2, r2, #2
   136b6:	58d3      	ldr	r3, [r2, r3]
   136b8:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   136ba:	4a41      	ldr	r2, [pc, #260]	; (137c0 <DMAC_Handler+0x130>)
   136bc:	693b      	ldr	r3, [r7, #16]
   136be:	781b      	ldrb	r3, [r3, #0]
   136c0:	210f      	movs	r1, #15
   136c2:	400b      	ands	r3, r1
   136c4:	b2d9      	uxtb	r1, r3
   136c6:	233f      	movs	r3, #63	; 0x3f
   136c8:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   136ca:	493d      	ldr	r1, [pc, #244]	; (137c0 <DMAC_Handler+0x130>)
   136cc:	230f      	movs	r3, #15
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	224e      	movs	r2, #78	; 0x4e
   136d2:	5c8a      	ldrb	r2, [r1, r2]
   136d4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   136d6:	693b      	ldr	r3, [r7, #16]
   136d8:	781b      	ldrb	r3, [r3, #0]
   136da:	4a3b      	ldr	r2, [pc, #236]	; (137c8 <DMAC_Handler+0x138>)
   136dc:	011b      	lsls	r3, r3, #4
   136de:	18d3      	adds	r3, r2, r3
   136e0:	3302      	adds	r3, #2
   136e2:	881b      	ldrh	r3, [r3, #0]
   136e4:	b29b      	uxth	r3, r3
   136e6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   136e8:	693b      	ldr	r3, [r7, #16]
   136ea:	781b      	ldrb	r3, [r3, #0]
   136ec:	4a37      	ldr	r2, [pc, #220]	; (137cc <DMAC_Handler+0x13c>)
   136ee:	011b      	lsls	r3, r3, #4
   136f0:	18d3      	adds	r3, r2, r3
   136f2:	3302      	adds	r3, #2
   136f4:	881b      	ldrh	r3, [r3, #0]
   136f6:	b29b      	uxth	r3, r3
   136f8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   136fa:	68ba      	ldr	r2, [r7, #8]
   136fc:	687b      	ldr	r3, [r7, #4]
   136fe:	1ad2      	subs	r2, r2, r3
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   13704:	230f      	movs	r3, #15
   13706:	18fb      	adds	r3, r7, r3
   13708:	781b      	ldrb	r3, [r3, #0]
   1370a:	2201      	movs	r2, #1
   1370c:	4013      	ands	r3, r2
   1370e:	d016      	beq.n	1373e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   13710:	4a2b      	ldr	r2, [pc, #172]	; (137c0 <DMAC_Handler+0x130>)
   13712:	234e      	movs	r3, #78	; 0x4e
   13714:	2101      	movs	r1, #1
   13716:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   13718:	693b      	ldr	r3, [r7, #16]
   1371a:	2210      	movs	r2, #16
   1371c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1371e:	693b      	ldr	r3, [r7, #16]
   13720:	7c1b      	ldrb	r3, [r3, #16]
   13722:	001a      	movs	r2, r3
   13724:	2301      	movs	r3, #1
   13726:	4013      	ands	r3, r2
   13728:	d042      	beq.n	137b0 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1372a:	693b      	ldr	r3, [r7, #16]
   1372c:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1372e:	2b00      	cmp	r3, #0
   13730:	d03e      	beq.n	137b0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   13732:	693b      	ldr	r3, [r7, #16]
   13734:	685b      	ldr	r3, [r3, #4]
   13736:	693a      	ldr	r2, [r7, #16]
   13738:	0010      	movs	r0, r2
   1373a:	4798      	blx	r3
   1373c:	e038      	b.n	137b0 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1373e:	230f      	movs	r3, #15
   13740:	18fb      	adds	r3, r7, r3
   13742:	781b      	ldrb	r3, [r3, #0]
   13744:	2202      	movs	r2, #2
   13746:	4013      	ands	r3, r2
   13748:	d016      	beq.n	13778 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1374a:	4a1d      	ldr	r2, [pc, #116]	; (137c0 <DMAC_Handler+0x130>)
   1374c:	234e      	movs	r3, #78	; 0x4e
   1374e:	2102      	movs	r1, #2
   13750:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   13752:	693b      	ldr	r3, [r7, #16]
   13754:	2200      	movs	r2, #0
   13756:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   13758:	693b      	ldr	r3, [r7, #16]
   1375a:	7c1b      	ldrb	r3, [r3, #16]
   1375c:	001a      	movs	r2, r3
   1375e:	2302      	movs	r3, #2
   13760:	4013      	ands	r3, r2
   13762:	d025      	beq.n	137b0 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   13764:	693b      	ldr	r3, [r7, #16]
   13766:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   13768:	2b00      	cmp	r3, #0
   1376a:	d021      	beq.n	137b0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1376c:	693b      	ldr	r3, [r7, #16]
   1376e:	689b      	ldr	r3, [r3, #8]
   13770:	693a      	ldr	r2, [r7, #16]
   13772:	0010      	movs	r0, r2
   13774:	4798      	blx	r3
   13776:	e01b      	b.n	137b0 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   13778:	230f      	movs	r3, #15
   1377a:	18fb      	adds	r3, r7, r3
   1377c:	781b      	ldrb	r3, [r3, #0]
   1377e:	2204      	movs	r2, #4
   13780:	4013      	ands	r3, r2
   13782:	d015      	beq.n	137b0 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   13784:	4a0e      	ldr	r2, [pc, #56]	; (137c0 <DMAC_Handler+0x130>)
   13786:	234e      	movs	r3, #78	; 0x4e
   13788:	2104      	movs	r1, #4
   1378a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1378c:	693b      	ldr	r3, [r7, #16]
   1378e:	2206      	movs	r2, #6
   13790:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   13792:	693b      	ldr	r3, [r7, #16]
   13794:	7c1b      	ldrb	r3, [r3, #16]
   13796:	001a      	movs	r2, r3
   13798:	2304      	movs	r3, #4
   1379a:	4013      	ands	r3, r2
   1379c:	d008      	beq.n	137b0 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1379e:	693b      	ldr	r3, [r7, #16]
   137a0:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   137a2:	2b00      	cmp	r3, #0
   137a4:	d004      	beq.n	137b0 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   137a6:	693b      	ldr	r3, [r7, #16]
   137a8:	68db      	ldr	r3, [r3, #12]
   137aa:	693a      	ldr	r2, [r7, #16]
   137ac:	0010      	movs	r0, r2
   137ae:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   137b0:	4b07      	ldr	r3, [pc, #28]	; (137d0 <DMAC_Handler+0x140>)
   137b2:	4798      	blx	r3
}
   137b4:	46c0      	nop			; (mov r8, r8)
   137b6:	46bd      	mov	sp, r7
   137b8:	b006      	add	sp, #24
   137ba:	bd80      	pop	{r7, pc}
   137bc:	00013669 	.word	0x00013669
   137c0:	41004800 	.word	0x41004800
   137c4:	200004f0 	.word	0x200004f0
   137c8:	200047d0 	.word	0x200047d0
   137cc:	200004a0 	.word	0x200004a0
   137d0:	0001367d 	.word	0x0001367d

000137d4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   137d4:	b580      	push	{r7, lr}
   137d6:	b082      	sub	sp, #8
   137d8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   137da:	4b15      	ldr	r3, [pc, #84]	; (13830 <EVSYS_Handler+0x5c>)
   137dc:	691b      	ldr	r3, [r3, #16]
   137de:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   137e0:	4b14      	ldr	r3, [pc, #80]	; (13834 <EVSYS_Handler+0x60>)
   137e2:	699b      	ldr	r3, [r3, #24]
   137e4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   137e6:	4b12      	ldr	r3, [pc, #72]	; (13830 <EVSYS_Handler+0x5c>)
   137e8:	689a      	ldr	r2, [r3, #8]
   137ea:	683b      	ldr	r3, [r7, #0]
   137ec:	431a      	orrs	r2, r3
   137ee:	4b10      	ldr	r3, [pc, #64]	; (13830 <EVSYS_Handler+0x5c>)
   137f0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   137f2:	4b10      	ldr	r3, [pc, #64]	; (13834 <EVSYS_Handler+0x60>)
   137f4:	4a10      	ldr	r2, [pc, #64]	; (13838 <EVSYS_Handler+0x64>)
   137f6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   137f8:	e008      	b.n	1380c <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   137fa:	687b      	ldr	r3, [r7, #4]
   137fc:	685a      	ldr	r2, [r3, #4]
   137fe:	687b      	ldr	r3, [r7, #4]
   13800:	681b      	ldr	r3, [r3, #0]
   13802:	0018      	movs	r0, r3
   13804:	4790      	blx	r2
		current_hook = current_hook->next;
   13806:	687b      	ldr	r3, [r7, #4]
   13808:	689b      	ldr	r3, [r3, #8]
   1380a:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   1380c:	687b      	ldr	r3, [r7, #4]
   1380e:	2b00      	cmp	r3, #0
   13810:	d1f3      	bne.n	137fa <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   13812:	4b07      	ldr	r3, [pc, #28]	; (13830 <EVSYS_Handler+0x5c>)
   13814:	68db      	ldr	r3, [r3, #12]
   13816:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   13818:	4b05      	ldr	r3, [pc, #20]	; (13830 <EVSYS_Handler+0x5c>)
   1381a:	689b      	ldr	r3, [r3, #8]
   1381c:	683a      	ldr	r2, [r7, #0]
   1381e:	43d2      	mvns	r2, r2
   13820:	401a      	ands	r2, r3
   13822:	4b03      	ldr	r3, [pc, #12]	; (13830 <EVSYS_Handler+0x5c>)
   13824:	609a      	str	r2, [r3, #8]
}
   13826:	46c0      	nop			; (mov r8, r8)
   13828:	46bd      	mov	sp, r7
   1382a:	b002      	add	sp, #8
   1382c:	bd80      	pop	{r7, pc}
   1382e:	46c0      	nop			; (mov r8, r8)
   13830:	2000000c 	.word	0x2000000c
   13834:	42000400 	.word	0x42000400
   13838:	0f0fffff 	.word	0x0f0fffff

0001383c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1383c:	b580      	push	{r7, lr}
   1383e:	b082      	sub	sp, #8
   13840:	af00      	add	r7, sp, #0
   13842:	0002      	movs	r2, r0
   13844:	6039      	str	r1, [r7, #0]
   13846:	1dfb      	adds	r3, r7, #7
   13848:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1384a:	1dfb      	adds	r3, r7, #7
   1384c:	781b      	ldrb	r3, [r3, #0]
   1384e:	2b01      	cmp	r3, #1
   13850:	d00a      	beq.n	13868 <system_apb_clock_set_mask+0x2c>
   13852:	2b02      	cmp	r3, #2
   13854:	d00f      	beq.n	13876 <system_apb_clock_set_mask+0x3a>
   13856:	2b00      	cmp	r3, #0
   13858:	d114      	bne.n	13884 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1385a:	4b0e      	ldr	r3, [pc, #56]	; (13894 <system_apb_clock_set_mask+0x58>)
   1385c:	4a0d      	ldr	r2, [pc, #52]	; (13894 <system_apb_clock_set_mask+0x58>)
   1385e:	6991      	ldr	r1, [r2, #24]
   13860:	683a      	ldr	r2, [r7, #0]
   13862:	430a      	orrs	r2, r1
   13864:	619a      	str	r2, [r3, #24]
			break;
   13866:	e00f      	b.n	13888 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   13868:	4b0a      	ldr	r3, [pc, #40]	; (13894 <system_apb_clock_set_mask+0x58>)
   1386a:	4a0a      	ldr	r2, [pc, #40]	; (13894 <system_apb_clock_set_mask+0x58>)
   1386c:	69d1      	ldr	r1, [r2, #28]
   1386e:	683a      	ldr	r2, [r7, #0]
   13870:	430a      	orrs	r2, r1
   13872:	61da      	str	r2, [r3, #28]
			break;
   13874:	e008      	b.n	13888 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   13876:	4b07      	ldr	r3, [pc, #28]	; (13894 <system_apb_clock_set_mask+0x58>)
   13878:	4a06      	ldr	r2, [pc, #24]	; (13894 <system_apb_clock_set_mask+0x58>)
   1387a:	6a11      	ldr	r1, [r2, #32]
   1387c:	683a      	ldr	r2, [r7, #0]
   1387e:	430a      	orrs	r2, r1
   13880:	621a      	str	r2, [r3, #32]
			break;
   13882:	e001      	b.n	13888 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13884:	2317      	movs	r3, #23
   13886:	e000      	b.n	1388a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13888:	2300      	movs	r3, #0
}
   1388a:	0018      	movs	r0, r3
   1388c:	46bd      	mov	sp, r7
   1388e:	b002      	add	sp, #8
   13890:	bd80      	pop	{r7, pc}
   13892:	46c0      	nop			; (mov r8, r8)
   13894:	40000400 	.word	0x40000400

00013898 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13898:	b580      	push	{r7, lr}
   1389a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1389c:	2102      	movs	r1, #2
   1389e:	2002      	movs	r0, #2
   138a0:	4b07      	ldr	r3, [pc, #28]	; (138c0 <_system_events_init+0x28>)
   138a2:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   138a4:	4b07      	ldr	r3, [pc, #28]	; (138c4 <_system_events_init+0x2c>)
   138a6:	2201      	movs	r2, #1
   138a8:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   138aa:	46c0      	nop			; (mov r8, r8)
   138ac:	4b05      	ldr	r3, [pc, #20]	; (138c4 <_system_events_init+0x2c>)
   138ae:	781b      	ldrb	r3, [r3, #0]
   138b0:	b2db      	uxtb	r3, r3
   138b2:	001a      	movs	r2, r3
   138b4:	2301      	movs	r3, #1
   138b6:	4013      	ands	r3, r2
   138b8:	d1f8      	bne.n	138ac <_system_events_init+0x14>
	}
}
   138ba:	46c0      	nop			; (mov r8, r8)
   138bc:	46bd      	mov	sp, r7
   138be:	bd80      	pop	{r7, pc}
   138c0:	0001383d 	.word	0x0001383d
   138c4:	42000400 	.word	0x42000400

000138c8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   138c8:	b580      	push	{r7, lr}
   138ca:	b084      	sub	sp, #16
   138cc:	af00      	add	r7, sp, #0
   138ce:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   138d0:	687b      	ldr	r3, [r7, #4]
   138d2:	681b      	ldr	r3, [r3, #0]
   138d4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   138d6:	68fb      	ldr	r3, [r7, #12]
   138d8:	69db      	ldr	r3, [r3, #28]
   138da:	2207      	movs	r2, #7
   138dc:	4013      	ands	r3, r2
   138de:	1e5a      	subs	r2, r3, #1
   138e0:	4193      	sbcs	r3, r2
   138e2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   138e4:	0018      	movs	r0, r3
   138e6:	46bd      	mov	sp, r7
   138e8:	b004      	add	sp, #16
   138ea:	bd80      	pop	{r7, pc}

000138ec <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   138ec:	b580      	push	{r7, lr}
   138ee:	b082      	sub	sp, #8
   138f0:	af00      	add	r7, sp, #0
   138f2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   138f4:	46c0      	nop			; (mov r8, r8)
   138f6:	687b      	ldr	r3, [r7, #4]
   138f8:	0018      	movs	r0, r3
   138fa:	4b04      	ldr	r3, [pc, #16]	; (1390c <_i2c_master_wait_for_sync+0x20>)
   138fc:	4798      	blx	r3
   138fe:	1e03      	subs	r3, r0, #0
   13900:	d1f9      	bne.n	138f6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   13902:	46c0      	nop			; (mov r8, r8)
   13904:	46bd      	mov	sp, r7
   13906:	b002      	add	sp, #8
   13908:	bd80      	pop	{r7, pc}
   1390a:	46c0      	nop			; (mov r8, r8)
   1390c:	000138c9 	.word	0x000138c9

00013910 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13910:	b580      	push	{r7, lr}
   13912:	b084      	sub	sp, #16
   13914:	af00      	add	r7, sp, #0
   13916:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13918:	687b      	ldr	r3, [r7, #4]
   1391a:	681b      	ldr	r3, [r3, #0]
   1391c:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1391e:	68fb      	ldr	r3, [r7, #12]
   13920:	681b      	ldr	r3, [r3, #0]
   13922:	011b      	lsls	r3, r3, #4
   13924:	0fdb      	lsrs	r3, r3, #31
   13926:	b2db      	uxtb	r3, r3
   13928:	001a      	movs	r2, r3
   1392a:	230b      	movs	r3, #11
   1392c:	18fb      	adds	r3, r7, r3
   1392e:	1e51      	subs	r1, r2, #1
   13930:	418a      	sbcs	r2, r1
   13932:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   13934:	2308      	movs	r3, #8
   13936:	18fb      	adds	r3, r7, r3
   13938:	687a      	ldr	r2, [r7, #4]
   1393a:	8b52      	ldrh	r2, [r2, #26]
   1393c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1393e:	687b      	ldr	r3, [r7, #4]
   13940:	8b9b      	ldrh	r3, [r3, #28]
   13942:	b29a      	uxth	r2, r3
   13944:	2308      	movs	r3, #8
   13946:	18fb      	adds	r3, r7, r3
   13948:	2108      	movs	r1, #8
   1394a:	1879      	adds	r1, r7, r1
   1394c:	8809      	ldrh	r1, [r1, #0]
   1394e:	1a8a      	subs	r2, r1, r2
   13950:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13952:	687b      	ldr	r3, [r7, #4]
   13954:	8b9b      	ldrh	r3, [r3, #28]
   13956:	b29b      	uxth	r3, r3
   13958:	3b01      	subs	r3, #1
   1395a:	b29a      	uxth	r2, r3
   1395c:	687b      	ldr	r3, [r7, #4]
   1395e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   13960:	230b      	movs	r3, #11
   13962:	18fb      	adds	r3, r7, r3
   13964:	781b      	ldrb	r3, [r3, #0]
   13966:	2b00      	cmp	r3, #0
   13968:	d010      	beq.n	1398c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1396a:	687b      	ldr	r3, [r7, #4]
   1396c:	7adb      	ldrb	r3, [r3, #11]
   1396e:	2b00      	cmp	r3, #0
   13970:	d01c      	beq.n	139ac <_i2c_master_read+0x9c>
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	8b9b      	ldrh	r3, [r3, #28]
   13976:	b29b      	uxth	r3, r3
   13978:	2b01      	cmp	r3, #1
   1397a:	d117      	bne.n	139ac <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1397c:	68fb      	ldr	r3, [r7, #12]
   1397e:	685b      	ldr	r3, [r3, #4]
   13980:	2280      	movs	r2, #128	; 0x80
   13982:	02d2      	lsls	r2, r2, #11
   13984:	431a      	orrs	r2, r3
   13986:	68fb      	ldr	r3, [r7, #12]
   13988:	605a      	str	r2, [r3, #4]
   1398a:	e00f      	b.n	139ac <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1398c:	687b      	ldr	r3, [r7, #4]
   1398e:	7adb      	ldrb	r3, [r3, #11]
   13990:	2b00      	cmp	r3, #0
   13992:	d00b      	beq.n	139ac <_i2c_master_read+0x9c>
   13994:	687b      	ldr	r3, [r7, #4]
   13996:	8b9b      	ldrh	r3, [r3, #28]
   13998:	b29b      	uxth	r3, r3
   1399a:	2b00      	cmp	r3, #0
   1399c:	d106      	bne.n	139ac <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1399e:	68fb      	ldr	r3, [r7, #12]
   139a0:	685b      	ldr	r3, [r3, #4]
   139a2:	2280      	movs	r2, #128	; 0x80
   139a4:	02d2      	lsls	r2, r2, #11
   139a6:	431a      	orrs	r2, r3
   139a8:	68fb      	ldr	r3, [r7, #12]
   139aa:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   139ac:	687b      	ldr	r3, [r7, #4]
   139ae:	8b9b      	ldrh	r3, [r3, #28]
   139b0:	b29b      	uxth	r3, r3
   139b2:	2b00      	cmp	r3, #0
   139b4:	d10e      	bne.n	139d4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   139b6:	687b      	ldr	r3, [r7, #4]
   139b8:	7a9b      	ldrb	r3, [r3, #10]
   139ba:	2b00      	cmp	r3, #0
   139bc:	d00a      	beq.n	139d4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   139be:	687b      	ldr	r3, [r7, #4]
   139c0:	0018      	movs	r0, r3
   139c2:	4b0e      	ldr	r3, [pc, #56]	; (139fc <_i2c_master_read+0xec>)
   139c4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   139c6:	68fb      	ldr	r3, [r7, #12]
   139c8:	685b      	ldr	r3, [r3, #4]
   139ca:	22c0      	movs	r2, #192	; 0xc0
   139cc:	0292      	lsls	r2, r2, #10
   139ce:	431a      	orrs	r2, r3
   139d0:	68fb      	ldr	r3, [r7, #12]
   139d2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   139d4:	687b      	ldr	r3, [r7, #4]
   139d6:	0018      	movs	r0, r3
   139d8:	4b08      	ldr	r3, [pc, #32]	; (139fc <_i2c_master_read+0xec>)
   139da:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   139dc:	687b      	ldr	r3, [r7, #4]
   139de:	6a1a      	ldr	r2, [r3, #32]
   139e0:	2308      	movs	r3, #8
   139e2:	18fb      	adds	r3, r7, r3
   139e4:	881b      	ldrh	r3, [r3, #0]
   139e6:	18d3      	adds	r3, r2, r3
   139e8:	68fa      	ldr	r2, [r7, #12]
   139ea:	2128      	movs	r1, #40	; 0x28
   139ec:	5c52      	ldrb	r2, [r2, r1]
   139ee:	b2d2      	uxtb	r2, r2
   139f0:	701a      	strb	r2, [r3, #0]
}
   139f2:	46c0      	nop			; (mov r8, r8)
   139f4:	46bd      	mov	sp, r7
   139f6:	b004      	add	sp, #16
   139f8:	bd80      	pop	{r7, pc}
   139fa:	46c0      	nop			; (mov r8, r8)
   139fc:	000138ed 	.word	0x000138ed

00013a00 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13a00:	b580      	push	{r7, lr}
   13a02:	b084      	sub	sp, #16
   13a04:	af00      	add	r7, sp, #0
   13a06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13a08:	687b      	ldr	r3, [r7, #4]
   13a0a:	681b      	ldr	r3, [r3, #0]
   13a0c:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13a0e:	68fb      	ldr	r3, [r7, #12]
   13a10:	8b5b      	ldrh	r3, [r3, #26]
   13a12:	b29b      	uxth	r3, r3
   13a14:	001a      	movs	r2, r3
   13a16:	2304      	movs	r3, #4
   13a18:	4013      	ands	r3, r2
   13a1a:	d004      	beq.n	13a26 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13a1c:	687b      	ldr	r3, [r7, #4]
   13a1e:	2225      	movs	r2, #37	; 0x25
   13a20:	211e      	movs	r1, #30
   13a22:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   13a24:	e024      	b.n	13a70 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   13a26:	230a      	movs	r3, #10
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	687a      	ldr	r2, [r7, #4]
   13a2c:	8b52      	ldrh	r2, [r2, #26]
   13a2e:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13a30:	687b      	ldr	r3, [r7, #4]
   13a32:	8b9b      	ldrh	r3, [r3, #28]
   13a34:	b29a      	uxth	r2, r3
   13a36:	230a      	movs	r3, #10
   13a38:	18fb      	adds	r3, r7, r3
   13a3a:	210a      	movs	r1, #10
   13a3c:	1879      	adds	r1, r7, r1
   13a3e:	8809      	ldrh	r1, [r1, #0]
   13a40:	1a8a      	subs	r2, r1, r2
   13a42:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13a44:	687b      	ldr	r3, [r7, #4]
   13a46:	8b9b      	ldrh	r3, [r3, #28]
   13a48:	b29b      	uxth	r3, r3
   13a4a:	3b01      	subs	r3, #1
   13a4c:	b29a      	uxth	r2, r3
   13a4e:	687b      	ldr	r3, [r7, #4]
   13a50:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   13a52:	687b      	ldr	r3, [r7, #4]
   13a54:	0018      	movs	r0, r3
   13a56:	4b08      	ldr	r3, [pc, #32]	; (13a78 <_i2c_master_write+0x78>)
   13a58:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   13a5a:	687b      	ldr	r3, [r7, #4]
   13a5c:	6a1a      	ldr	r2, [r3, #32]
   13a5e:	230a      	movs	r3, #10
   13a60:	18fb      	adds	r3, r7, r3
   13a62:	881b      	ldrh	r3, [r3, #0]
   13a64:	18d3      	adds	r3, r2, r3
   13a66:	781b      	ldrb	r3, [r3, #0]
   13a68:	b2d9      	uxtb	r1, r3
   13a6a:	68fb      	ldr	r3, [r7, #12]
   13a6c:	2228      	movs	r2, #40	; 0x28
   13a6e:	5499      	strb	r1, [r3, r2]
}
   13a70:	46bd      	mov	sp, r7
   13a72:	b004      	add	sp, #16
   13a74:	bd80      	pop	{r7, pc}
   13a76:	46c0      	nop			; (mov r8, r8)
   13a78:	000138ed 	.word	0x000138ed

00013a7c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   13a7c:	b580      	push	{r7, lr}
   13a7e:	b084      	sub	sp, #16
   13a80:	af00      	add	r7, sp, #0
   13a82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13a84:	687b      	ldr	r3, [r7, #4]
   13a86:	681b      	ldr	r3, [r3, #0]
   13a88:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   13a8a:	68fb      	ldr	r3, [r7, #12]
   13a8c:	7e1b      	ldrb	r3, [r3, #24]
   13a8e:	b2db      	uxtb	r3, r3
   13a90:	001a      	movs	r2, r3
   13a92:	2301      	movs	r3, #1
   13a94:	4013      	ands	r3, r2
   13a96:	d02b      	beq.n	13af0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13a98:	68fb      	ldr	r3, [r7, #12]
   13a9a:	2201      	movs	r2, #1
   13a9c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13a9e:	68fb      	ldr	r3, [r7, #12]
   13aa0:	8b5b      	ldrh	r3, [r3, #26]
   13aa2:	b29b      	uxth	r3, r3
   13aa4:	001a      	movs	r2, r3
   13aa6:	2302      	movs	r3, #2
   13aa8:	4013      	ands	r3, r2
   13aaa:	d004      	beq.n	13ab6 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   13aac:	687b      	ldr	r3, [r7, #4]
   13aae:	2225      	movs	r2, #37	; 0x25
   13ab0:	2141      	movs	r1, #65	; 0x41
   13ab2:	5499      	strb	r1, [r3, r2]
   13ab4:	e01c      	b.n	13af0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13ab6:	68fb      	ldr	r3, [r7, #12]
   13ab8:	8b5b      	ldrh	r3, [r3, #26]
   13aba:	b29b      	uxth	r3, r3
   13abc:	001a      	movs	r2, r3
   13abe:	2304      	movs	r3, #4
   13ac0:	4013      	ands	r3, r2
   13ac2:	d015      	beq.n	13af0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   13ac4:	687b      	ldr	r3, [r7, #4]
   13ac6:	2225      	movs	r2, #37	; 0x25
   13ac8:	2118      	movs	r1, #24
   13aca:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13acc:	687b      	ldr	r3, [r7, #4]
   13ace:	2200      	movs	r2, #0
   13ad0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   13ad2:	687b      	ldr	r3, [r7, #4]
   13ad4:	7a9b      	ldrb	r3, [r3, #10]
   13ad6:	2b00      	cmp	r3, #0
   13ad8:	d00a      	beq.n	13af0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   13ada:	687b      	ldr	r3, [r7, #4]
   13adc:	0018      	movs	r0, r3
   13ade:	4b13      	ldr	r3, [pc, #76]	; (13b2c <_i2c_master_async_address_response+0xb0>)
   13ae0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13ae2:	68fb      	ldr	r3, [r7, #12]
   13ae4:	685b      	ldr	r3, [r3, #4]
   13ae6:	22c0      	movs	r2, #192	; 0xc0
   13ae8:	0292      	lsls	r2, r2, #10
   13aea:	431a      	orrs	r2, r3
   13aec:	68fb      	ldr	r3, [r7, #12]
   13aee:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13af0:	687b      	ldr	r3, [r7, #4]
   13af2:	8b9b      	ldrh	r3, [r3, #28]
   13af4:	b29a      	uxth	r2, r3
   13af6:	687b      	ldr	r3, [r7, #4]
   13af8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13afa:	687b      	ldr	r3, [r7, #4]
   13afc:	2225      	movs	r2, #37	; 0x25
   13afe:	5c9b      	ldrb	r3, [r3, r2]
   13b00:	b2db      	uxtb	r3, r3
   13b02:	2b05      	cmp	r3, #5
   13b04:	d10e      	bne.n	13b24 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13b06:	687b      	ldr	r3, [r7, #4]
   13b08:	2224      	movs	r2, #36	; 0x24
   13b0a:	5c9b      	ldrb	r3, [r3, r2]
   13b0c:	b2db      	uxtb	r3, r3
   13b0e:	2b00      	cmp	r3, #0
   13b10:	d104      	bne.n	13b1c <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   13b12:	687b      	ldr	r3, [r7, #4]
   13b14:	0018      	movs	r0, r3
   13b16:	4b06      	ldr	r3, [pc, #24]	; (13b30 <_i2c_master_async_address_response+0xb4>)
   13b18:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13b1a:	e003      	b.n	13b24 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13b1c:	687b      	ldr	r3, [r7, #4]
   13b1e:	0018      	movs	r0, r3
   13b20:	4b04      	ldr	r3, [pc, #16]	; (13b34 <_i2c_master_async_address_response+0xb8>)
   13b22:	4798      	blx	r3
}
   13b24:	46c0      	nop			; (mov r8, r8)
   13b26:	46bd      	mov	sp, r7
   13b28:	b004      	add	sp, #16
   13b2a:	bd80      	pop	{r7, pc}
   13b2c:	000138ed 	.word	0x000138ed
   13b30:	00013a01 	.word	0x00013a01
   13b34:	00013911 	.word	0x00013911

00013b38 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   13b38:	b580      	push	{r7, lr}
   13b3a:	b084      	sub	sp, #16
   13b3c:	af00      	add	r7, sp, #0
   13b3e:	60f8      	str	r0, [r7, #12]
   13b40:	60b9      	str	r1, [r7, #8]
   13b42:	1dfb      	adds	r3, r7, #7
   13b44:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   13b46:	1dfb      	adds	r3, r7, #7
   13b48:	781b      	ldrb	r3, [r3, #0]
   13b4a:	68fa      	ldr	r2, [r7, #12]
   13b4c:	3302      	adds	r3, #2
   13b4e:	009b      	lsls	r3, r3, #2
   13b50:	18d3      	adds	r3, r2, r3
   13b52:	3304      	adds	r3, #4
   13b54:	68ba      	ldr	r2, [r7, #8]
   13b56:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   13b58:	68fb      	ldr	r3, [r7, #12]
   13b5a:	7e1b      	ldrb	r3, [r3, #24]
   13b5c:	b2db      	uxtb	r3, r3
   13b5e:	b25a      	sxtb	r2, r3
   13b60:	1dfb      	adds	r3, r7, #7
   13b62:	781b      	ldrb	r3, [r3, #0]
   13b64:	2101      	movs	r1, #1
   13b66:	4099      	lsls	r1, r3
   13b68:	000b      	movs	r3, r1
   13b6a:	b25b      	sxtb	r3, r3
   13b6c:	4313      	orrs	r3, r2
   13b6e:	b25b      	sxtb	r3, r3
   13b70:	b2da      	uxtb	r2, r3
   13b72:	68fb      	ldr	r3, [r7, #12]
   13b74:	761a      	strb	r2, [r3, #24]
}
   13b76:	46c0      	nop			; (mov r8, r8)
   13b78:	46bd      	mov	sp, r7
   13b7a:	b004      	add	sp, #16
   13b7c:	bd80      	pop	{r7, pc}
	...

00013b80 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13b80:	b590      	push	{r4, r7, lr}
   13b82:	b087      	sub	sp, #28
   13b84:	af00      	add	r7, sp, #0
   13b86:	6078      	str	r0, [r7, #4]
   13b88:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13b8a:	687b      	ldr	r3, [r7, #4]
   13b8c:	681b      	ldr	r3, [r3, #0]
   13b8e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13b90:	683b      	ldr	r3, [r7, #0]
   13b92:	685a      	ldr	r2, [r3, #4]
   13b94:	687b      	ldr	r3, [r7, #4]
   13b96:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13b98:	683b      	ldr	r3, [r7, #0]
   13b9a:	885a      	ldrh	r2, [r3, #2]
   13b9c:	687b      	ldr	r3, [r7, #4]
   13b9e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13ba0:	687b      	ldr	r3, [r7, #4]
   13ba2:	2224      	movs	r2, #36	; 0x24
   13ba4:	2101      	movs	r1, #1
   13ba6:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13ba8:	687b      	ldr	r3, [r7, #4]
   13baa:	2225      	movs	r2, #37	; 0x25
   13bac:	2105      	movs	r1, #5
   13bae:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13bb0:	693b      	ldr	r3, [r7, #16]
   13bb2:	681b      	ldr	r3, [r3, #0]
   13bb4:	011b      	lsls	r3, r3, #4
   13bb6:	0fdb      	lsrs	r3, r3, #31
   13bb8:	b2db      	uxtb	r3, r3
   13bba:	001a      	movs	r2, r3
   13bbc:	230f      	movs	r3, #15
   13bbe:	18fb      	adds	r3, r7, r3
   13bc0:	1e51      	subs	r1, r2, #1
   13bc2:	418a      	sbcs	r2, r1
   13bc4:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13bc6:	683b      	ldr	r3, [r7, #0]
   13bc8:	7a5b      	ldrb	r3, [r3, #9]
   13bca:	2b00      	cmp	r3, #0
   13bcc:	d006      	beq.n	13bdc <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13bce:	683b      	ldr	r3, [r7, #0]
   13bd0:	7a9a      	ldrb	r2, [r3, #10]
   13bd2:	687b      	ldr	r3, [r7, #4]
   13bd4:	0011      	movs	r1, r2
   13bd6:	0018      	movs	r0, r3
   13bd8:	4b3b      	ldr	r3, [pc, #236]	; (13cc8 <_i2c_master_read_packet+0x148>)
   13bda:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13bdc:	230f      	movs	r3, #15
   13bde:	18fb      	adds	r3, r7, r3
   13be0:	781b      	ldrb	r3, [r3, #0]
   13be2:	2b00      	cmp	r3, #0
   13be4:	d00b      	beq.n	13bfe <_i2c_master_read_packet+0x7e>
   13be6:	683b      	ldr	r3, [r7, #0]
   13be8:	885b      	ldrh	r3, [r3, #2]
   13bea:	2b01      	cmp	r3, #1
   13bec:	d107      	bne.n	13bfe <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13bee:	693b      	ldr	r3, [r7, #16]
   13bf0:	685b      	ldr	r3, [r3, #4]
   13bf2:	2280      	movs	r2, #128	; 0x80
   13bf4:	02d2      	lsls	r2, r2, #11
   13bf6:	431a      	orrs	r2, r3
   13bf8:	693b      	ldr	r3, [r7, #16]
   13bfa:	605a      	str	r2, [r3, #4]
   13bfc:	e005      	b.n	13c0a <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13bfe:	693b      	ldr	r3, [r7, #16]
   13c00:	685b      	ldr	r3, [r3, #4]
   13c02:	4a32      	ldr	r2, [pc, #200]	; (13ccc <_i2c_master_read_packet+0x14c>)
   13c04:	401a      	ands	r2, r3
   13c06:	693b      	ldr	r3, [r7, #16]
   13c08:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13c0a:	683b      	ldr	r3, [r7, #0]
   13c0c:	7a1b      	ldrb	r3, [r3, #8]
   13c0e:	2b00      	cmp	r3, #0
   13c10:	d045      	beq.n	13c9e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   13c12:	683b      	ldr	r3, [r7, #0]
   13c14:	881b      	ldrh	r3, [r3, #0]
   13c16:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13c18:	683b      	ldr	r3, [r7, #0]
   13c1a:	7a5b      	ldrb	r3, [r3, #9]
   13c1c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13c1e:	4313      	orrs	r3, r2
   13c20:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13c22:	2380      	movs	r3, #128	; 0x80
   13c24:	021b      	lsls	r3, r3, #8
   13c26:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   13c28:	693b      	ldr	r3, [r7, #16]
   13c2a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13c2c:	2317      	movs	r3, #23
   13c2e:	18fc      	adds	r4, r7, r3
   13c30:	687b      	ldr	r3, [r7, #4]
   13c32:	0018      	movs	r0, r3
   13c34:	4b26      	ldr	r3, [pc, #152]	; (13cd0 <_i2c_master_read_packet+0x150>)
   13c36:	4798      	blx	r3
   13c38:	0003      	movs	r3, r0
   13c3a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13c3c:	693b      	ldr	r3, [r7, #16]
   13c3e:	685b      	ldr	r3, [r3, #4]
   13c40:	4a22      	ldr	r2, [pc, #136]	; (13ccc <_i2c_master_read_packet+0x14c>)
   13c42:	401a      	ands	r2, r3
   13c44:	693b      	ldr	r3, [r7, #16]
   13c46:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   13c48:	2317      	movs	r3, #23
   13c4a:	18fb      	adds	r3, r7, r3
   13c4c:	781b      	ldrb	r3, [r3, #0]
   13c4e:	2b00      	cmp	r3, #0
   13c50:	d107      	bne.n	13c62 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   13c52:	2317      	movs	r3, #23
   13c54:	18fc      	adds	r4, r7, r3
   13c56:	687b      	ldr	r3, [r7, #4]
   13c58:	0018      	movs	r0, r3
   13c5a:	4b1e      	ldr	r3, [pc, #120]	; (13cd4 <_i2c_master_read_packet+0x154>)
   13c5c:	4798      	blx	r3
   13c5e:	0003      	movs	r3, r0
   13c60:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   13c62:	2317      	movs	r3, #23
   13c64:	18fb      	adds	r3, r7, r3
   13c66:	781b      	ldrb	r3, [r3, #0]
   13c68:	2b00      	cmp	r3, #0
   13c6a:	d114      	bne.n	13c96 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   13c6c:	693b      	ldr	r3, [r7, #16]
   13c6e:	2203      	movs	r2, #3
   13c70:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13c72:	683b      	ldr	r3, [r7, #0]
   13c74:	881b      	ldrh	r3, [r3, #0]
   13c76:	0a1b      	lsrs	r3, r3, #8
   13c78:	b29b      	uxth	r3, r3
   13c7a:	2278      	movs	r2, #120	; 0x78
   13c7c:	4313      	orrs	r3, r2
   13c7e:	b29b      	uxth	r3, r3
   13c80:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13c82:	683b      	ldr	r3, [r7, #0]
   13c84:	7a5b      	ldrb	r3, [r3, #9]
   13c86:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13c88:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13c8a:	2201      	movs	r2, #1
   13c8c:	4313      	orrs	r3, r2
   13c8e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13c90:	693b      	ldr	r3, [r7, #16]
   13c92:	625a      	str	r2, [r3, #36]	; 0x24
   13c94:	e012      	b.n	13cbc <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   13c96:	2317      	movs	r3, #23
   13c98:	18fb      	adds	r3, r7, r3
   13c9a:	781b      	ldrb	r3, [r3, #0]
   13c9c:	e00f      	b.n	13cbe <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13c9e:	693b      	ldr	r3, [r7, #16]
   13ca0:	2203      	movs	r2, #3
   13ca2:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   13ca4:	683b      	ldr	r3, [r7, #0]
   13ca6:	881b      	ldrh	r3, [r3, #0]
   13ca8:	005b      	lsls	r3, r3, #1
   13caa:	2201      	movs	r2, #1
   13cac:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13cae:	683b      	ldr	r3, [r7, #0]
   13cb0:	7a5b      	ldrb	r3, [r3, #9]
   13cb2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   13cb4:	4313      	orrs	r3, r2
   13cb6:	001a      	movs	r2, r3
   13cb8:	693b      	ldr	r3, [r7, #16]
   13cba:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13cbc:	2300      	movs	r3, #0
}
   13cbe:	0018      	movs	r0, r3
   13cc0:	46bd      	mov	sp, r7
   13cc2:	b007      	add	sp, #28
   13cc4:	bd90      	pop	{r4, r7, pc}
   13cc6:	46c0      	nop			; (mov r8, r8)
   13cc8:	00018ba5 	.word	0x00018ba5
   13ccc:	fffbffff 	.word	0xfffbffff
   13cd0:	00018b47 	.word	0x00018b47
   13cd4:	00018ae9 	.word	0x00018ae9

00013cd8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13cd8:	b580      	push	{r7, lr}
   13cda:	b082      	sub	sp, #8
   13cdc:	af00      	add	r7, sp, #0
   13cde:	6078      	str	r0, [r7, #4]
   13ce0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   13ce2:	687b      	ldr	r3, [r7, #4]
   13ce4:	8b9b      	ldrh	r3, [r3, #28]
   13ce6:	b29b      	uxth	r3, r3
   13ce8:	2b00      	cmp	r3, #0
   13cea:	d001      	beq.n	13cf0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13cec:	2305      	movs	r3, #5
   13cee:	e00c      	b.n	13d0a <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13cf0:	687b      	ldr	r3, [r7, #4]
   13cf2:	2201      	movs	r2, #1
   13cf4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13cf6:	687b      	ldr	r3, [r7, #4]
   13cf8:	2201      	movs	r2, #1
   13cfa:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13cfc:	683a      	ldr	r2, [r7, #0]
   13cfe:	687b      	ldr	r3, [r7, #4]
   13d00:	0011      	movs	r1, r2
   13d02:	0018      	movs	r0, r3
   13d04:	4b03      	ldr	r3, [pc, #12]	; (13d14 <i2c_master_read_packet_job+0x3c>)
   13d06:	4798      	blx	r3
   13d08:	0003      	movs	r3, r0
}
   13d0a:	0018      	movs	r0, r3
   13d0c:	46bd      	mov	sp, r7
   13d0e:	b002      	add	sp, #8
   13d10:	bd80      	pop	{r7, pc}
   13d12:	46c0      	nop			; (mov r8, r8)
   13d14:	00013b81 	.word	0x00013b81

00013d18 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13d18:	b580      	push	{r7, lr}
   13d1a:	b084      	sub	sp, #16
   13d1c:	af00      	add	r7, sp, #0
   13d1e:	6078      	str	r0, [r7, #4]
   13d20:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13d22:	687b      	ldr	r3, [r7, #4]
   13d24:	681b      	ldr	r3, [r3, #0]
   13d26:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13d28:	683b      	ldr	r3, [r7, #0]
   13d2a:	7a5b      	ldrb	r3, [r3, #9]
   13d2c:	2b00      	cmp	r3, #0
   13d2e:	d006      	beq.n	13d3e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13d30:	683b      	ldr	r3, [r7, #0]
   13d32:	7a9a      	ldrb	r2, [r3, #10]
   13d34:	687b      	ldr	r3, [r7, #4]
   13d36:	0011      	movs	r1, r2
   13d38:	0018      	movs	r0, r3
   13d3a:	4b1e      	ldr	r3, [pc, #120]	; (13db4 <_i2c_master_write_packet+0x9c>)
   13d3c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13d3e:	68fb      	ldr	r3, [r7, #12]
   13d40:	685b      	ldr	r3, [r3, #4]
   13d42:	4a1d      	ldr	r2, [pc, #116]	; (13db8 <_i2c_master_write_packet+0xa0>)
   13d44:	401a      	ands	r2, r3
   13d46:	68fb      	ldr	r3, [r7, #12]
   13d48:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   13d4a:	683b      	ldr	r3, [r7, #0]
   13d4c:	685a      	ldr	r2, [r3, #4]
   13d4e:	687b      	ldr	r3, [r7, #4]
   13d50:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13d52:	683b      	ldr	r3, [r7, #0]
   13d54:	885a      	ldrh	r2, [r3, #2]
   13d56:	687b      	ldr	r3, [r7, #4]
   13d58:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   13d5a:	687b      	ldr	r3, [r7, #4]
   13d5c:	2224      	movs	r2, #36	; 0x24
   13d5e:	2100      	movs	r1, #0
   13d60:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13d62:	687b      	ldr	r3, [r7, #4]
   13d64:	2225      	movs	r2, #37	; 0x25
   13d66:	2105      	movs	r1, #5
   13d68:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   13d6a:	68fb      	ldr	r3, [r7, #12]
   13d6c:	2203      	movs	r2, #3
   13d6e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   13d70:	683b      	ldr	r3, [r7, #0]
   13d72:	7a1b      	ldrb	r3, [r3, #8]
   13d74:	2b00      	cmp	r3, #0
   13d76:	d00d      	beq.n	13d94 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d78:	683b      	ldr	r3, [r7, #0]
   13d7a:	881b      	ldrh	r3, [r3, #0]
   13d7c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13d7e:	683b      	ldr	r3, [r7, #0]
   13d80:	7a5b      	ldrb	r3, [r3, #9]
   13d82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d84:	4313      	orrs	r3, r2
   13d86:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13d88:	2380      	movs	r3, #128	; 0x80
   13d8a:	021b      	lsls	r3, r3, #8
   13d8c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d8e:	68fb      	ldr	r3, [r7, #12]
   13d90:	625a      	str	r2, [r3, #36]	; 0x24
   13d92:	e009      	b.n	13da8 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13d94:	683b      	ldr	r3, [r7, #0]
   13d96:	881b      	ldrh	r3, [r3, #0]
   13d98:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13d9a:	683b      	ldr	r3, [r7, #0]
   13d9c:	7a5b      	ldrb	r3, [r3, #9]
   13d9e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13da0:	4313      	orrs	r3, r2
   13da2:	001a      	movs	r2, r3
   13da4:	68fb      	ldr	r3, [r7, #12]
   13da6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13da8:	2300      	movs	r3, #0
}
   13daa:	0018      	movs	r0, r3
   13dac:	46bd      	mov	sp, r7
   13dae:	b004      	add	sp, #16
   13db0:	bd80      	pop	{r7, pc}
   13db2:	46c0      	nop			; (mov r8, r8)
   13db4:	00018ba5 	.word	0x00018ba5
   13db8:	fffbffff 	.word	0xfffbffff

00013dbc <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13dbc:	b580      	push	{r7, lr}
   13dbe:	b082      	sub	sp, #8
   13dc0:	af00      	add	r7, sp, #0
   13dc2:	6078      	str	r0, [r7, #4]
   13dc4:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   13dc6:	687b      	ldr	r3, [r7, #4]
   13dc8:	8b9b      	ldrh	r3, [r3, #28]
   13dca:	b29b      	uxth	r3, r3
   13dcc:	2b00      	cmp	r3, #0
   13dce:	d001      	beq.n	13dd4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13dd0:	2305      	movs	r3, #5
   13dd2:	e00c      	b.n	13dee <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   13dd4:	687b      	ldr	r3, [r7, #4]
   13dd6:	2201      	movs	r2, #1
   13dd8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13dda:	687b      	ldr	r3, [r7, #4]
   13ddc:	2201      	movs	r2, #1
   13dde:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13de0:	683a      	ldr	r2, [r7, #0]
   13de2:	687b      	ldr	r3, [r7, #4]
   13de4:	0011      	movs	r1, r2
   13de6:	0018      	movs	r0, r3
   13de8:	4b03      	ldr	r3, [pc, #12]	; (13df8 <i2c_master_write_packet_job+0x3c>)
   13dea:	4798      	blx	r3
   13dec:	0003      	movs	r3, r0
}
   13dee:	0018      	movs	r0, r3
   13df0:	46bd      	mov	sp, r7
   13df2:	b002      	add	sp, #8
   13df4:	bd80      	pop	{r7, pc}
   13df6:	46c0      	nop			; (mov r8, r8)
   13df8:	00013d19 	.word	0x00013d19

00013dfc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13dfc:	b580      	push	{r7, lr}
   13dfe:	b086      	sub	sp, #24
   13e00:	af00      	add	r7, sp, #0
   13e02:	0002      	movs	r2, r0
   13e04:	1dfb      	adds	r3, r7, #7
   13e06:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13e08:	1dfb      	adds	r3, r7, #7
   13e0a:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13e0c:	4b93      	ldr	r3, [pc, #588]	; (1405c <_i2c_master_interrupt_handler+0x260>)
   13e0e:	0092      	lsls	r2, r2, #2
   13e10:	58d3      	ldr	r3, [r2, r3]
   13e12:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13e14:	697b      	ldr	r3, [r7, #20]
   13e16:	681b      	ldr	r3, [r3, #0]
   13e18:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13e1a:	693b      	ldr	r3, [r7, #16]
   13e1c:	681b      	ldr	r3, [r3, #0]
   13e1e:	011b      	lsls	r3, r3, #4
   13e20:	0fdb      	lsrs	r3, r3, #31
   13e22:	b2db      	uxtb	r3, r3
   13e24:	001a      	movs	r2, r3
   13e26:	230f      	movs	r3, #15
   13e28:	18fb      	adds	r3, r7, r3
   13e2a:	1e51      	subs	r1, r2, #1
   13e2c:	418a      	sbcs	r2, r1
   13e2e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   13e30:	230e      	movs	r3, #14
   13e32:	18fb      	adds	r3, r7, r3
   13e34:	697a      	ldr	r2, [r7, #20]
   13e36:	7e52      	ldrb	r2, [r2, #25]
   13e38:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   13e3a:	697b      	ldr	r3, [r7, #20]
   13e3c:	7e1b      	ldrb	r3, [r3, #24]
   13e3e:	b2da      	uxtb	r2, r3
   13e40:	230e      	movs	r3, #14
   13e42:	18fb      	adds	r3, r7, r3
   13e44:	210e      	movs	r1, #14
   13e46:	1879      	adds	r1, r7, r1
   13e48:	7809      	ldrb	r1, [r1, #0]
   13e4a:	400a      	ands	r2, r1
   13e4c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   13e4e:	697b      	ldr	r3, [r7, #20]
   13e50:	8b5b      	ldrh	r3, [r3, #26]
   13e52:	b29b      	uxth	r3, r3
   13e54:	2b00      	cmp	r3, #0
   13e56:	d109      	bne.n	13e6c <_i2c_master_interrupt_handler+0x70>
   13e58:	697b      	ldr	r3, [r7, #20]
   13e5a:	8b9b      	ldrh	r3, [r3, #28]
   13e5c:	b29b      	uxth	r3, r3
   13e5e:	2b00      	cmp	r3, #0
   13e60:	d004      	beq.n	13e6c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   13e62:	697b      	ldr	r3, [r7, #20]
   13e64:	0018      	movs	r0, r3
   13e66:	4b7e      	ldr	r3, [pc, #504]	; (14060 <_i2c_master_interrupt_handler+0x264>)
   13e68:	4798      	blx	r3
   13e6a:	e070      	b.n	13f4e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13e6c:	697b      	ldr	r3, [r7, #20]
   13e6e:	8b5b      	ldrh	r3, [r3, #26]
   13e70:	b29b      	uxth	r3, r3
   13e72:	2b00      	cmp	r3, #0
   13e74:	d039      	beq.n	13eea <_i2c_master_interrupt_handler+0xee>
   13e76:	697b      	ldr	r3, [r7, #20]
   13e78:	8b9b      	ldrh	r3, [r3, #28]
   13e7a:	b29b      	uxth	r3, r3
   13e7c:	2b00      	cmp	r3, #0
   13e7e:	d134      	bne.n	13eea <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   13e80:	697b      	ldr	r3, [r7, #20]
   13e82:	2225      	movs	r2, #37	; 0x25
   13e84:	5c9b      	ldrb	r3, [r3, r2]
   13e86:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13e88:	2b05      	cmp	r3, #5
   13e8a:	d12e      	bne.n	13eea <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13e8c:	697b      	ldr	r3, [r7, #20]
   13e8e:	2224      	movs	r2, #36	; 0x24
   13e90:	5c9b      	ldrb	r3, [r3, r2]
   13e92:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   13e94:	2b00      	cmp	r3, #0
   13e96:	d128      	bne.n	13eea <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13e98:	693b      	ldr	r3, [r7, #16]
   13e9a:	2203      	movs	r2, #3
   13e9c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13e9e:	697b      	ldr	r3, [r7, #20]
   13ea0:	2200      	movs	r2, #0
   13ea2:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13ea4:	697b      	ldr	r3, [r7, #20]
   13ea6:	2225      	movs	r2, #37	; 0x25
   13ea8:	2100      	movs	r1, #0
   13eaa:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13eac:	697b      	ldr	r3, [r7, #20]
   13eae:	7a9b      	ldrb	r3, [r3, #10]
   13eb0:	2b00      	cmp	r3, #0
   13eb2:	d00b      	beq.n	13ecc <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13eb4:	697b      	ldr	r3, [r7, #20]
   13eb6:	0018      	movs	r0, r3
   13eb8:	4b6a      	ldr	r3, [pc, #424]	; (14064 <_i2c_master_interrupt_handler+0x268>)
   13eba:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13ebc:	693b      	ldr	r3, [r7, #16]
   13ebe:	685b      	ldr	r3, [r3, #4]
   13ec0:	22c0      	movs	r2, #192	; 0xc0
   13ec2:	0292      	lsls	r2, r2, #10
   13ec4:	431a      	orrs	r2, r3
   13ec6:	693b      	ldr	r3, [r7, #16]
   13ec8:	605a      	str	r2, [r3, #4]
   13eca:	e002      	b.n	13ed2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13ecc:	693b      	ldr	r3, [r7, #16]
   13ece:	2201      	movs	r2, #1
   13ed0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13ed2:	230e      	movs	r3, #14
   13ed4:	18fb      	adds	r3, r7, r3
   13ed6:	781b      	ldrb	r3, [r3, #0]
   13ed8:	2201      	movs	r2, #1
   13eda:	4013      	ands	r3, r2
   13edc:	d037      	beq.n	13f4e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13ede:	697b      	ldr	r3, [r7, #20]
   13ee0:	68db      	ldr	r3, [r3, #12]
   13ee2:	697a      	ldr	r2, [r7, #20]
   13ee4:	0010      	movs	r0, r2
   13ee6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13ee8:	e031      	b.n	13f4e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13eea:	697b      	ldr	r3, [r7, #20]
   13eec:	8b5b      	ldrh	r3, [r3, #26]
   13eee:	b29b      	uxth	r3, r3
   13ef0:	2b00      	cmp	r3, #0
   13ef2:	d02c      	beq.n	13f4e <_i2c_master_interrupt_handler+0x152>
   13ef4:	697b      	ldr	r3, [r7, #20]
   13ef6:	8b9b      	ldrh	r3, [r3, #28]
   13ef8:	b29b      	uxth	r3, r3
   13efa:	2b00      	cmp	r3, #0
   13efc:	d027      	beq.n	13f4e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13efe:	693b      	ldr	r3, [r7, #16]
   13f00:	8b5b      	ldrh	r3, [r3, #26]
   13f02:	b29b      	uxth	r3, r3
   13f04:	001a      	movs	r2, r3
   13f06:	2320      	movs	r3, #32
   13f08:	4013      	ands	r3, r2
   13f0a:	d111      	bne.n	13f30 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13f0c:	230f      	movs	r3, #15
   13f0e:	18fb      	adds	r3, r7, r3
   13f10:	781b      	ldrb	r3, [r3, #0]
   13f12:	2201      	movs	r2, #1
   13f14:	4053      	eors	r3, r2
   13f16:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13f18:	2b00      	cmp	r3, #0
   13f1a:	d104      	bne.n	13f26 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13f1c:	697b      	ldr	r3, [r7, #20]
   13f1e:	8b9b      	ldrh	r3, [r3, #28]
   13f20:	b29b      	uxth	r3, r3
   13f22:	2b01      	cmp	r3, #1
   13f24:	d004      	beq.n	13f30 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   13f26:	697b      	ldr	r3, [r7, #20]
   13f28:	2225      	movs	r2, #37	; 0x25
   13f2a:	2141      	movs	r1, #65	; 0x41
   13f2c:	5499      	strb	r1, [r3, r2]
   13f2e:	e00e      	b.n	13f4e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13f30:	697b      	ldr	r3, [r7, #20]
   13f32:	2224      	movs	r2, #36	; 0x24
   13f34:	5c9b      	ldrb	r3, [r3, r2]
   13f36:	b2db      	uxtb	r3, r3
   13f38:	2b00      	cmp	r3, #0
   13f3a:	d104      	bne.n	13f46 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   13f3c:	697b      	ldr	r3, [r7, #20]
   13f3e:	0018      	movs	r0, r3
   13f40:	4b49      	ldr	r3, [pc, #292]	; (14068 <_i2c_master_interrupt_handler+0x26c>)
   13f42:	4798      	blx	r3
   13f44:	e003      	b.n	13f4e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   13f46:	697b      	ldr	r3, [r7, #20]
   13f48:	0018      	movs	r0, r3
   13f4a:	4b48      	ldr	r3, [pc, #288]	; (1406c <_i2c_master_interrupt_handler+0x270>)
   13f4c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13f4e:	697b      	ldr	r3, [r7, #20]
   13f50:	8b5b      	ldrh	r3, [r3, #26]
   13f52:	b29b      	uxth	r3, r3
   13f54:	2b00      	cmp	r3, #0
   13f56:	d047      	beq.n	13fe8 <_i2c_master_interrupt_handler+0x1ec>
   13f58:	697b      	ldr	r3, [r7, #20]
   13f5a:	8b9b      	ldrh	r3, [r3, #28]
   13f5c:	b29b      	uxth	r3, r3
   13f5e:	2b00      	cmp	r3, #0
   13f60:	d142      	bne.n	13fe8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   13f62:	697b      	ldr	r3, [r7, #20]
   13f64:	2225      	movs	r2, #37	; 0x25
   13f66:	5c9b      	ldrb	r3, [r3, r2]
   13f68:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13f6a:	2b05      	cmp	r3, #5
   13f6c:	d13c      	bne.n	13fe8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   13f6e:	697b      	ldr	r3, [r7, #20]
   13f70:	2224      	movs	r2, #36	; 0x24
   13f72:	5c9b      	ldrb	r3, [r3, r2]
   13f74:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   13f76:	2b01      	cmp	r3, #1
   13f78:	d136      	bne.n	13fe8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13f7a:	693b      	ldr	r3, [r7, #16]
   13f7c:	7e1b      	ldrb	r3, [r3, #24]
   13f7e:	b2db      	uxtb	r3, r3
   13f80:	001a      	movs	r2, r3
   13f82:	2302      	movs	r3, #2
   13f84:	4013      	ands	r3, r2
   13f86:	d002      	beq.n	13f8e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13f88:	693b      	ldr	r3, [r7, #16]
   13f8a:	2202      	movs	r2, #2
   13f8c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13f8e:	693b      	ldr	r3, [r7, #16]
   13f90:	2203      	movs	r2, #3
   13f92:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   13f94:	697b      	ldr	r3, [r7, #20]
   13f96:	2200      	movs	r2, #0
   13f98:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13f9a:	697b      	ldr	r3, [r7, #20]
   13f9c:	2225      	movs	r2, #37	; 0x25
   13f9e:	2100      	movs	r1, #0
   13fa0:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   13fa2:	230e      	movs	r3, #14
   13fa4:	18fb      	adds	r3, r7, r3
   13fa6:	781b      	ldrb	r3, [r3, #0]
   13fa8:	2202      	movs	r2, #2
   13faa:	4013      	ands	r3, r2
   13fac:	d00b      	beq.n	13fc6 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13fae:	697b      	ldr	r3, [r7, #20]
   13fb0:	2224      	movs	r2, #36	; 0x24
   13fb2:	5c9b      	ldrb	r3, [r3, r2]
   13fb4:	b2db      	uxtb	r3, r3
   13fb6:	2b01      	cmp	r3, #1
   13fb8:	d105      	bne.n	13fc6 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13fba:	697b      	ldr	r3, [r7, #20]
   13fbc:	691b      	ldr	r3, [r3, #16]
   13fbe:	697a      	ldr	r2, [r7, #20]
   13fc0:	0010      	movs	r0, r2
   13fc2:	4798      	blx	r3
   13fc4:	e010      	b.n	13fe8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   13fc6:	230e      	movs	r3, #14
   13fc8:	18fb      	adds	r3, r7, r3
   13fca:	781b      	ldrb	r3, [r3, #0]
   13fcc:	2201      	movs	r2, #1
   13fce:	4013      	ands	r3, r2
   13fd0:	d00a      	beq.n	13fe8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13fd2:	697b      	ldr	r3, [r7, #20]
   13fd4:	2224      	movs	r2, #36	; 0x24
   13fd6:	5c9b      	ldrb	r3, [r3, r2]
   13fd8:	b2db      	uxtb	r3, r3
   13fda:	2b00      	cmp	r3, #0
   13fdc:	d104      	bne.n	13fe8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13fde:	697b      	ldr	r3, [r7, #20]
   13fe0:	68db      	ldr	r3, [r3, #12]
   13fe2:	697a      	ldr	r2, [r7, #20]
   13fe4:	0010      	movs	r0, r2
   13fe6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13fe8:	697b      	ldr	r3, [r7, #20]
   13fea:	2225      	movs	r2, #37	; 0x25
   13fec:	5c9b      	ldrb	r3, [r3, r2]
   13fee:	b2db      	uxtb	r3, r3
   13ff0:	2b05      	cmp	r3, #5
   13ff2:	d02e      	beq.n	14052 <_i2c_master_interrupt_handler+0x256>
   13ff4:	697b      	ldr	r3, [r7, #20]
   13ff6:	2225      	movs	r2, #37	; 0x25
   13ff8:	5c9b      	ldrb	r3, [r3, r2]
   13ffa:	b2db      	uxtb	r3, r3
   13ffc:	2b00      	cmp	r3, #0
   13ffe:	d028      	beq.n	14052 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   14000:	693b      	ldr	r3, [r7, #16]
   14002:	2203      	movs	r2, #3
   14004:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   14006:	697b      	ldr	r3, [r7, #20]
   14008:	2200      	movs	r2, #0
   1400a:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   1400c:	697b      	ldr	r3, [r7, #20]
   1400e:	2200      	movs	r2, #0
   14010:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   14012:	697b      	ldr	r3, [r7, #20]
   14014:	2225      	movs	r2, #37	; 0x25
   14016:	5c9b      	ldrb	r3, [r3, r2]
   14018:	b2db      	uxtb	r3, r3
   1401a:	2b41      	cmp	r3, #65	; 0x41
   1401c:	d00e      	beq.n	1403c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   1401e:	697b      	ldr	r3, [r7, #20]
   14020:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   14022:	2b00      	cmp	r3, #0
   14024:	d00a      	beq.n	1403c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   14026:	697b      	ldr	r3, [r7, #20]
   14028:	0018      	movs	r0, r3
   1402a:	4b0e      	ldr	r3, [pc, #56]	; (14064 <_i2c_master_interrupt_handler+0x268>)
   1402c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   1402e:	693b      	ldr	r3, [r7, #16]
   14030:	685b      	ldr	r3, [r3, #4]
   14032:	22e0      	movs	r2, #224	; 0xe0
   14034:	02d2      	lsls	r2, r2, #11
   14036:	431a      	orrs	r2, r3
   14038:	693b      	ldr	r3, [r7, #16]
   1403a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   1403c:	230e      	movs	r3, #14
   1403e:	18fb      	adds	r3, r7, r3
   14040:	781b      	ldrb	r3, [r3, #0]
   14042:	2204      	movs	r2, #4
   14044:	4013      	ands	r3, r2
   14046:	d004      	beq.n	14052 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   14048:	697b      	ldr	r3, [r7, #20]
   1404a:	695b      	ldr	r3, [r3, #20]
   1404c:	697a      	ldr	r2, [r7, #20]
   1404e:	0010      	movs	r0, r2
   14050:	4798      	blx	r3
		}
	}
}
   14052:	46c0      	nop			; (mov r8, r8)
   14054:	46bd      	mov	sp, r7
   14056:	b006      	add	sp, #24
   14058:	bd80      	pop	{r7, pc}
   1405a:	46c0      	nop			; (mov r8, r8)
   1405c:	20005c98 	.word	0x20005c98
   14060:	00013a7d 	.word	0x00013a7d
   14064:	000138ed 	.word	0x000138ed
   14068:	00013a01 	.word	0x00013a01
   1406c:	00013911 	.word	0x00013911

00014070 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14070:	b580      	push	{r7, lr}
   14072:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14074:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14078:	4b02      	ldr	r3, [pc, #8]	; (14084 <NVIC_SystemReset+0x14>)
   1407a:	4a03      	ldr	r2, [pc, #12]	; (14088 <NVIC_SystemReset+0x18>)
   1407c:	60da      	str	r2, [r3, #12]
   1407e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14082:	e7fe      	b.n	14082 <NVIC_SystemReset+0x12>
   14084:	e000ed00 	.word	0xe000ed00
   14088:	05fa0004 	.word	0x05fa0004

0001408c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   1408c:	b580      	push	{r7, lr}
   1408e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14090:	4b02      	ldr	r3, [pc, #8]	; (1409c <system_reset+0x10>)
   14092:	4798      	blx	r3
}
   14094:	46c0      	nop			; (mov r8, r8)
   14096:	46bd      	mov	sp, r7
   14098:	bd80      	pop	{r7, pc}
   1409a:	46c0      	nop			; (mov r8, r8)
   1409c:	00014071 	.word	0x00014071

000140a0 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   140a0:	b580      	push	{r7, lr}
   140a2:	b086      	sub	sp, #24
   140a4:	af00      	add	r7, sp, #0
   140a6:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   140a8:	4b9a      	ldr	r3, [pc, #616]	; (14314 <vCommandConsoleTask+0x274>)
   140aa:	0018      	movs	r0, r3
   140ac:	4b9a      	ldr	r3, [pc, #616]	; (14318 <vCommandConsoleTask+0x278>)
   140ae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   140b0:	4b9a      	ldr	r3, [pc, #616]	; (1431c <vCommandConsoleTask+0x27c>)
   140b2:	0018      	movs	r0, r3
   140b4:	4b98      	ldr	r3, [pc, #608]	; (14318 <vCommandConsoleTask+0x278>)
   140b6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   140b8:	4b99      	ldr	r3, [pc, #612]	; (14320 <vCommandConsoleTask+0x280>)
   140ba:	0018      	movs	r0, r3
   140bc:	4b96      	ldr	r3, [pc, #600]	; (14318 <vCommandConsoleTask+0x278>)
   140be:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   140c0:	4b98      	ldr	r3, [pc, #608]	; (14324 <vCommandConsoleTask+0x284>)
   140c2:	0018      	movs	r0, r3
   140c4:	4b94      	ldr	r3, [pc, #592]	; (14318 <vCommandConsoleTask+0x278>)
   140c6:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   140c8:	4b97      	ldr	r3, [pc, #604]	; (14328 <vCommandConsoleTask+0x288>)
   140ca:	0018      	movs	r0, r3
   140cc:	4b92      	ldr	r3, [pc, #584]	; (14318 <vCommandConsoleTask+0x278>)
   140ce:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   140d0:	4b96      	ldr	r3, [pc, #600]	; (1432c <vCommandConsoleTask+0x28c>)
   140d2:	0018      	movs	r0, r3
   140d4:	4b90      	ldr	r3, [pc, #576]	; (14318 <vCommandConsoleTask+0x278>)
   140d6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xGpsGetCommand); //added by Derek
   140d8:	4b95      	ldr	r3, [pc, #596]	; (14330 <vCommandConsoleTask+0x290>)
   140da:	0018      	movs	r0, r3
   140dc:	4b8e      	ldr	r3, [pc, #568]	; (14318 <vCommandConsoleTask+0x278>)
   140de:	4798      	blx	r3
	
    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   140e0:	2317      	movs	r3, #23
   140e2:	18fb      	adds	r3, r7, r3
   140e4:	2200      	movs	r2, #0
   140e6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   140e8:	4b92      	ldr	r3, [pc, #584]	; (14334 <vCommandConsoleTask+0x294>)
   140ea:	0018      	movs	r0, r3
   140ec:	4b92      	ldr	r3, [pc, #584]	; (14338 <vCommandConsoleTask+0x298>)
   140ee:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   140f0:	2203      	movs	r2, #3
   140f2:	2100      	movs	r1, #0
   140f4:	2001      	movs	r0, #1
   140f6:	4b91      	ldr	r3, [pc, #580]	; (1433c <vCommandConsoleTask+0x29c>)
   140f8:	4798      	blx	r3
   140fa:	0002      	movs	r2, r0
   140fc:	4b90      	ldr	r3, [pc, #576]	; (14340 <vCommandConsoleTask+0x2a0>)
   140fe:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   14100:	4b8f      	ldr	r3, [pc, #572]	; (14340 <vCommandConsoleTask+0x2a0>)
   14102:	681b      	ldr	r3, [r3, #0]
   14104:	2b00      	cmp	r3, #0
   14106:	d107      	bne.n	14118 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   14108:	4b8e      	ldr	r3, [pc, #568]	; (14344 <vCommandConsoleTask+0x2a4>)
   1410a:	0019      	movs	r1, r3
   1410c:	2003      	movs	r0, #3
   1410e:	4b8e      	ldr	r3, [pc, #568]	; (14348 <vCommandConsoleTask+0x2a8>)
   14110:	4798      	blx	r3
        vTaskSuspend(NULL);
   14112:	2000      	movs	r0, #0
   14114:	4b8d      	ldr	r3, [pc, #564]	; (1434c <vCommandConsoleTask+0x2ac>)
   14116:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   14118:	230c      	movs	r3, #12
   1411a:	18fb      	adds	r3, r7, r3
   1411c:	0018      	movs	r0, r3
   1411e:	4b8c      	ldr	r3, [pc, #560]	; (14350 <vCommandConsoleTask+0x2b0>)
   14120:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   14122:	230c      	movs	r3, #12
   14124:	18fb      	adds	r3, r7, r3
   14126:	781b      	ldrb	r3, [r3, #0]
   14128:	2b0a      	cmp	r3, #10
   1412a:	d004      	beq.n	14136 <vCommandConsoleTask+0x96>
   1412c:	230c      	movs	r3, #12
   1412e:	18fb      	adds	r3, r7, r3
   14130:	781b      	ldrb	r3, [r3, #0]
   14132:	2b0d      	cmp	r3, #13
   14134:	d137      	bne.n	141a6 <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14136:	4b87      	ldr	r3, [pc, #540]	; (14354 <vCommandConsoleTask+0x2b4>)
   14138:	0018      	movs	r0, r3
   1413a:	4b7f      	ldr	r3, [pc, #508]	; (14338 <vCommandConsoleTask+0x298>)
   1413c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   1413e:	4b86      	ldr	r3, [pc, #536]	; (14358 <vCommandConsoleTask+0x2b8>)
   14140:	2200      	movs	r2, #0
   14142:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14144:	4b85      	ldr	r3, [pc, #532]	; (1435c <vCommandConsoleTask+0x2bc>)
   14146:	2200      	movs	r2, #0
   14148:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   1414a:	4985      	ldr	r1, [pc, #532]	; (14360 <vCommandConsoleTask+0x2c0>)
   1414c:	4b85      	ldr	r3, [pc, #532]	; (14364 <vCommandConsoleTask+0x2c4>)
   1414e:	2231      	movs	r2, #49	; 0x31
   14150:	0018      	movs	r0, r3
   14152:	4b85      	ldr	r3, [pc, #532]	; (14368 <vCommandConsoleTask+0x2c8>)
   14154:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14156:	4b83      	ldr	r3, [pc, #524]	; (14364 <vCommandConsoleTask+0x2c4>)
   14158:	2231      	movs	r2, #49	; 0x31
   1415a:	2100      	movs	r1, #0
   1415c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   1415e:	4983      	ldr	r1, [pc, #524]	; (1436c <vCommandConsoleTask+0x2cc>)
   14160:	4b7f      	ldr	r3, [pc, #508]	; (14360 <vCommandConsoleTask+0x2c0>)
   14162:	2264      	movs	r2, #100	; 0x64
   14164:	0018      	movs	r0, r3
   14166:	4b82      	ldr	r3, [pc, #520]	; (14370 <vCommandConsoleTask+0x2d0>)
   14168:	4798      	blx	r3
   1416a:	0003      	movs	r3, r0
   1416c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   1416e:	4b7f      	ldr	r3, [pc, #508]	; (1436c <vCommandConsoleTask+0x2cc>)
   14170:	2263      	movs	r2, #99	; 0x63
   14172:	2100      	movs	r1, #0
   14174:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14176:	4b7d      	ldr	r3, [pc, #500]	; (1436c <vCommandConsoleTask+0x2cc>)
   14178:	0018      	movs	r0, r3
   1417a:	4b6f      	ldr	r3, [pc, #444]	; (14338 <vCommandConsoleTask+0x298>)
   1417c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   1417e:	693b      	ldr	r3, [r7, #16]
   14180:	2b00      	cmp	r3, #0
   14182:	d1ec      	bne.n	1415e <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14184:	2317      	movs	r3, #23
   14186:	18fb      	adds	r3, r7, r3
   14188:	2200      	movs	r2, #0
   1418a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1418c:	4b74      	ldr	r3, [pc, #464]	; (14360 <vCommandConsoleTask+0x2c0>)
   1418e:	2232      	movs	r2, #50	; 0x32
   14190:	2100      	movs	r1, #0
   14192:	0018      	movs	r0, r3
   14194:	4b77      	ldr	r3, [pc, #476]	; (14374 <vCommandConsoleTask+0x2d4>)
   14196:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14198:	4b74      	ldr	r3, [pc, #464]	; (1436c <vCommandConsoleTask+0x2cc>)
   1419a:	2264      	movs	r2, #100	; 0x64
   1419c:	2100      	movs	r1, #0
   1419e:	0018      	movs	r0, r3
   141a0:	4b74      	ldr	r3, [pc, #464]	; (14374 <vCommandConsoleTask+0x2d4>)
   141a2:	4798      	blx	r3
   141a4:	e0b5      	b.n	14312 <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   141a6:	4b6c      	ldr	r3, [pc, #432]	; (14358 <vCommandConsoleTask+0x2b8>)
   141a8:	781b      	ldrb	r3, [r3, #0]
   141aa:	2b00      	cmp	r3, #0
   141ac:	d059      	beq.n	14262 <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   141ae:	4b6b      	ldr	r3, [pc, #428]	; (1435c <vCommandConsoleTask+0x2bc>)
   141b0:	781b      	ldrb	r3, [r3, #0]
   141b2:	2b03      	cmp	r3, #3
   141b4:	d80c      	bhi.n	141d0 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   141b6:	4b69      	ldr	r3, [pc, #420]	; (1435c <vCommandConsoleTask+0x2bc>)
   141b8:	781b      	ldrb	r3, [r3, #0]
   141ba:	1c5a      	adds	r2, r3, #1
   141bc:	b2d1      	uxtb	r1, r2
   141be:	4a67      	ldr	r2, [pc, #412]	; (1435c <vCommandConsoleTask+0x2bc>)
   141c0:	7011      	strb	r1, [r2, #0]
   141c2:	001a      	movs	r2, r3
   141c4:	230c      	movs	r3, #12
   141c6:	18fb      	adds	r3, r7, r3
   141c8:	7819      	ldrb	r1, [r3, #0]
   141ca:	4b6b      	ldr	r3, [pc, #428]	; (14378 <vCommandConsoleTask+0x2d8>)
   141cc:	5499      	strb	r1, [r3, r2]
   141ce:	e005      	b.n	141dc <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   141d0:	4b61      	ldr	r3, [pc, #388]	; (14358 <vCommandConsoleTask+0x2b8>)
   141d2:	2200      	movs	r2, #0
   141d4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   141d6:	4b61      	ldr	r3, [pc, #388]	; (1435c <vCommandConsoleTask+0x2bc>)
   141d8:	2200      	movs	r2, #0
   141da:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   141dc:	4b5f      	ldr	r3, [pc, #380]	; (1435c <vCommandConsoleTask+0x2bc>)
   141de:	781b      	ldrb	r3, [r3, #0]
   141e0:	2b01      	cmp	r3, #1
   141e2:	d999      	bls.n	14118 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   141e4:	4a65      	ldr	r2, [pc, #404]	; (1437c <vCommandConsoleTask+0x2dc>)
   141e6:	4b64      	ldr	r3, [pc, #400]	; (14378 <vCommandConsoleTask+0x2d8>)
   141e8:	0011      	movs	r1, r2
   141ea:	0018      	movs	r0, r3
   141ec:	4b64      	ldr	r3, [pc, #400]	; (14380 <vCommandConsoleTask+0x2e0>)
   141ee:	4798      	blx	r3
   141f0:	1e03      	subs	r3, r0, #0
   141f2:	d02f      	beq.n	14254 <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   141f4:	4963      	ldr	r1, [pc, #396]	; (14384 <vCommandConsoleTask+0x2e4>)
   141f6:	4b5a      	ldr	r3, [pc, #360]	; (14360 <vCommandConsoleTask+0x2c0>)
   141f8:	221b      	movs	r2, #27
   141fa:	0018      	movs	r0, r3
   141fc:	4b62      	ldr	r3, [pc, #392]	; (14388 <vCommandConsoleTask+0x2e8>)
   141fe:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   14200:	4b57      	ldr	r3, [pc, #348]	; (14360 <vCommandConsoleTask+0x2c0>)
   14202:	0018      	movs	r0, r3
   14204:	4b4c      	ldr	r3, [pc, #304]	; (14338 <vCommandConsoleTask+0x298>)
   14206:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   14208:	2317      	movs	r3, #23
   1420a:	18fb      	adds	r3, r7, r3
   1420c:	2200      	movs	r2, #0
   1420e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14210:	4b53      	ldr	r3, [pc, #332]	; (14360 <vCommandConsoleTask+0x2c0>)
   14212:	2232      	movs	r2, #50	; 0x32
   14214:	2100      	movs	r1, #0
   14216:	0018      	movs	r0, r3
   14218:	4b56      	ldr	r3, [pc, #344]	; (14374 <vCommandConsoleTask+0x2d4>)
   1421a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   1421c:	4951      	ldr	r1, [pc, #324]	; (14364 <vCommandConsoleTask+0x2c4>)
   1421e:	4b50      	ldr	r3, [pc, #320]	; (14360 <vCommandConsoleTask+0x2c0>)
   14220:	2231      	movs	r2, #49	; 0x31
   14222:	0018      	movs	r0, r3
   14224:	4b50      	ldr	r3, [pc, #320]	; (14368 <vCommandConsoleTask+0x2c8>)
   14226:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   14228:	4b4d      	ldr	r3, [pc, #308]	; (14360 <vCommandConsoleTask+0x2c0>)
   1422a:	0018      	movs	r0, r3
   1422c:	4b57      	ldr	r3, [pc, #348]	; (1438c <vCommandConsoleTask+0x2ec>)
   1422e:	4798      	blx	r3
   14230:	0003      	movs	r3, r0
   14232:	2b30      	cmp	r3, #48	; 0x30
   14234:	d806      	bhi.n	14244 <vCommandConsoleTask+0x1a4>
   14236:	4b4b      	ldr	r3, [pc, #300]	; (14364 <vCommandConsoleTask+0x2c4>)
   14238:	0018      	movs	r0, r3
   1423a:	4b54      	ldr	r3, [pc, #336]	; (1438c <vCommandConsoleTask+0x2ec>)
   1423c:	4798      	blx	r3
   1423e:	0003      	movs	r3, r0
   14240:	b2da      	uxtb	r2, r3
   14242:	e000      	b.n	14246 <vCommandConsoleTask+0x1a6>
   14244:	2231      	movs	r2, #49	; 0x31
   14246:	2317      	movs	r3, #23
   14248:	18fb      	adds	r3, r7, r3
   1424a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1424c:	4b44      	ldr	r3, [pc, #272]	; (14360 <vCommandConsoleTask+0x2c0>)
   1424e:	0018      	movs	r0, r3
   14250:	4b39      	ldr	r3, [pc, #228]	; (14338 <vCommandConsoleTask+0x298>)
   14252:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14254:	4b40      	ldr	r3, [pc, #256]	; (14358 <vCommandConsoleTask+0x2b8>)
   14256:	2200      	movs	r2, #0
   14258:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1425a:	4b40      	ldr	r3, [pc, #256]	; (1435c <vCommandConsoleTask+0x2bc>)
   1425c:	2200      	movs	r2, #0
   1425e:	701a      	strb	r2, [r3, #0]
   14260:	e75a      	b.n	14118 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14262:	230c      	movs	r3, #12
   14264:	18fb      	adds	r3, r7, r3
   14266:	781b      	ldrb	r3, [r3, #0]
   14268:	2b0d      	cmp	r3, #13
   1426a:	d100      	bne.n	1426e <vCommandConsoleTask+0x1ce>
   1426c:	e754      	b.n	14118 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1426e:	230c      	movs	r3, #12
   14270:	18fb      	adds	r3, r7, r3
   14272:	781b      	ldrb	r3, [r3, #0]
   14274:	2b08      	cmp	r3, #8
   14276:	d004      	beq.n	14282 <vCommandConsoleTask+0x1e2>
   14278:	230c      	movs	r3, #12
   1427a:	18fb      	adds	r3, r7, r3
   1427c:	781b      	ldrb	r3, [r3, #0]
   1427e:	2b7f      	cmp	r3, #127	; 0x7f
   14280:	d11c      	bne.n	142bc <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14282:	2308      	movs	r3, #8
   14284:	18fb      	adds	r3, r7, r3
   14286:	4a42      	ldr	r2, [pc, #264]	; (14390 <vCommandConsoleTask+0x2f0>)
   14288:	6812      	ldr	r2, [r2, #0]
   1428a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1428c:	2308      	movs	r3, #8
   1428e:	18fb      	adds	r3, r7, r3
   14290:	0018      	movs	r0, r3
   14292:	4b29      	ldr	r3, [pc, #164]	; (14338 <vCommandConsoleTask+0x298>)
   14294:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14296:	2317      	movs	r3, #23
   14298:	18fb      	adds	r3, r7, r3
   1429a:	781b      	ldrb	r3, [r3, #0]
   1429c:	2b00      	cmp	r3, #0
   1429e:	d037      	beq.n	14310 <vCommandConsoleTask+0x270>
                    cInputIndex--;
   142a0:	2317      	movs	r3, #23
   142a2:	18fb      	adds	r3, r7, r3
   142a4:	781a      	ldrb	r2, [r3, #0]
   142a6:	2317      	movs	r3, #23
   142a8:	18fb      	adds	r3, r7, r3
   142aa:	3a01      	subs	r2, #1
   142ac:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   142ae:	2317      	movs	r3, #23
   142b0:	18fb      	adds	r3, r7, r3
   142b2:	781b      	ldrb	r3, [r3, #0]
   142b4:	4a2a      	ldr	r2, [pc, #168]	; (14360 <vCommandConsoleTask+0x2c0>)
   142b6:	2100      	movs	r1, #0
   142b8:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   142ba:	e029      	b.n	14310 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   142bc:	230c      	movs	r3, #12
   142be:	18fb      	adds	r3, r7, r3
   142c0:	781b      	ldrb	r3, [r3, #0]
   142c2:	2b1b      	cmp	r3, #27
   142c4:	d106      	bne.n	142d4 <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   142c6:	4b24      	ldr	r3, [pc, #144]	; (14358 <vCommandConsoleTask+0x2b8>)
   142c8:	2201      	movs	r2, #1
   142ca:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   142cc:	4b23      	ldr	r3, [pc, #140]	; (1435c <vCommandConsoleTask+0x2bc>)
   142ce:	2200      	movs	r2, #0
   142d0:	701a      	strb	r2, [r3, #0]
   142d2:	e721      	b.n	14118 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   142d4:	2317      	movs	r3, #23
   142d6:	18fb      	adds	r3, r7, r3
   142d8:	781b      	ldrb	r3, [r3, #0]
   142da:	2b31      	cmp	r3, #49	; 0x31
   142dc:	d80e      	bhi.n	142fc <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   142de:	2317      	movs	r3, #23
   142e0:	18fb      	adds	r3, r7, r3
   142e2:	781b      	ldrb	r3, [r3, #0]
   142e4:	220c      	movs	r2, #12
   142e6:	18ba      	adds	r2, r7, r2
   142e8:	7811      	ldrb	r1, [r2, #0]
   142ea:	4a1d      	ldr	r2, [pc, #116]	; (14360 <vCommandConsoleTask+0x2c0>)
   142ec:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   142ee:	2317      	movs	r3, #23
   142f0:	18fb      	adds	r3, r7, r3
   142f2:	781a      	ldrb	r2, [r3, #0]
   142f4:	2317      	movs	r3, #23
   142f6:	18fb      	adds	r3, r7, r3
   142f8:	3201      	adds	r2, #1
   142fa:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   142fc:	230c      	movs	r3, #12
   142fe:	18fb      	adds	r3, r7, r3
   14300:	2200      	movs	r2, #0
   14302:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   14304:	230c      	movs	r3, #12
   14306:	18fb      	adds	r3, r7, r3
   14308:	0018      	movs	r0, r3
   1430a:	4b0b      	ldr	r3, [pc, #44]	; (14338 <vCommandConsoleTask+0x298>)
   1430c:	4798      	blx	r3
   1430e:	e703      	b.n	14118 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14310:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   14312:	e701      	b.n	14118 <vCommandConsoleTask+0x78>
   14314:	00037124 	.word	0x00037124
   14318:	00018ced 	.word	0x00018ced
   1431c:	00037114 	.word	0x00037114
   14320:	00037174 	.word	0x00037174
   14324:	00037134 	.word	0x00037134
   14328:	00037144 	.word	0x00037144
   1432c:	00037154 	.word	0x00037154
   14330:	00037164 	.word	0x00037164
   14334:	00036df0 	.word	0x00036df0
   14338:	0001ec15 	.word	0x0001ec15
   1433c:	0001b2b5 	.word	0x0001b2b5
   14340:	20004820 	.word	0x20004820
   14344:	00036f68 	.word	0x00036f68
   14348:	0001ed01 	.word	0x0001ed01
   1434c:	0001d0a1 	.word	0x0001d0a1
   14350:	00014395 	.word	0x00014395
   14354:	00036f88 	.word	0x00036f88
   14358:	20000514 	.word	0x20000514
   1435c:	20000515 	.word	0x20000515
   14360:	2000054c 	.word	0x2000054c
   14364:	20000518 	.word	0x20000518
   14368:	00035b67 	.word	0x00035b67
   1436c:	20000580 	.word	0x20000580
   14370:	00018d5d 	.word	0x00018d5d
   14374:	0003577f 	.word	0x0003577f
   14378:	200005e4 	.word	0x200005e4
   1437c:	00036f8c 	.word	0x00036f8c
   14380:	00035a81 	.word	0x00035a81
   14384:	00036f90 	.word	0x00036f90
   14388:	00035a3d 	.word	0x00035a3d
   1438c:	00035b37 	.word	0x00035b37
   14390:	00036f98 	.word	0x00036f98

00014394 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   14394:	b580      	push	{r7, lr}
   14396:	b084      	sub	sp, #16
   14398:	af00      	add	r7, sp, #0
   1439a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   1439c:	687b      	ldr	r3, [r7, #4]
   1439e:	0018      	movs	r0, r3
   143a0:	4b0c      	ldr	r3, [pc, #48]	; (143d4 <FreeRTOS_read+0x40>)
   143a2:	4798      	blx	r3
   143a4:	0003      	movs	r3, r0
   143a6:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   143a8:	e00d      	b.n	143c6 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   143aa:	4b0b      	ldr	r3, [pc, #44]	; (143d8 <FreeRTOS_read+0x44>)
   143ac:	681a      	ldr	r2, [r3, #0]
   143ae:	2301      	movs	r3, #1
   143b0:	425b      	negs	r3, r3
   143b2:	0019      	movs	r1, r3
   143b4:	0010      	movs	r0, r2
   143b6:	4b09      	ldr	r3, [pc, #36]	; (143dc <FreeRTOS_read+0x48>)
   143b8:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   143ba:	687b      	ldr	r3, [r7, #4]
   143bc:	0018      	movs	r0, r3
   143be:	4b05      	ldr	r3, [pc, #20]	; (143d4 <FreeRTOS_read+0x40>)
   143c0:	4798      	blx	r3
   143c2:	0003      	movs	r3, r0
   143c4:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   143c6:	68fb      	ldr	r3, [r7, #12]
   143c8:	3301      	adds	r3, #1
   143ca:	d0ee      	beq.n	143aa <FreeRTOS_read+0x16>
    }
}
   143cc:	46c0      	nop			; (mov r8, r8)
   143ce:	46bd      	mov	sp, r7
   143d0:	b004      	add	sp, #16
   143d2:	bd80      	pop	{r7, pc}
   143d4:	0001ecb1 	.word	0x0001ecb1
   143d8:	20004820 	.word	0x20004820
   143dc:	0001c26d 	.word	0x0001c26d

000143e0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   143e0:	b580      	push	{r7, lr}
   143e2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   143e4:	4b0a      	ldr	r3, [pc, #40]	; (14410 <CliCharReadySemaphoreGiveFromISR+0x30>)
   143e6:	2200      	movs	r2, #0
   143e8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   143ea:	4b0a      	ldr	r3, [pc, #40]	; (14414 <CliCharReadySemaphoreGiveFromISR+0x34>)
   143ec:	681b      	ldr	r3, [r3, #0]
   143ee:	4a08      	ldr	r2, [pc, #32]	; (14410 <CliCharReadySemaphoreGiveFromISR+0x30>)
   143f0:	0011      	movs	r1, r2
   143f2:	0018      	movs	r0, r3
   143f4:	4b08      	ldr	r3, [pc, #32]	; (14418 <CliCharReadySemaphoreGiveFromISR+0x38>)
   143f6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   143f8:	4b05      	ldr	r3, [pc, #20]	; (14410 <CliCharReadySemaphoreGiveFromISR+0x30>)
   143fa:	681b      	ldr	r3, [r3, #0]
   143fc:	2b00      	cmp	r3, #0
   143fe:	d003      	beq.n	14408 <CliCharReadySemaphoreGiveFromISR+0x28>
   14400:	4b06      	ldr	r3, [pc, #24]	; (1441c <CliCharReadySemaphoreGiveFromISR+0x3c>)
   14402:	2280      	movs	r2, #128	; 0x80
   14404:	0552      	lsls	r2, r2, #21
   14406:	601a      	str	r2, [r3, #0]
}
   14408:	46c0      	nop			; (mov r8, r8)
   1440a:	46bd      	mov	sp, r7
   1440c:	bd80      	pop	{r7, pc}
   1440e:	46c0      	nop			; (mov r8, r8)
   14410:	200005e8 	.word	0x200005e8
   14414:	20004820 	.word	0x20004820
   14418:	0001bbe5 	.word	0x0001bbe5
   1441c:	e000ed04 	.word	0xe000ed04

00014420 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14420:	b5b0      	push	{r4, r5, r7, lr}
   14422:	b08a      	sub	sp, #40	; 0x28
   14424:	af02      	add	r7, sp, #8
   14426:	60f8      	str	r0, [r7, #12]
   14428:	60b9      	str	r1, [r7, #8]
   1442a:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   1442c:	4b49      	ldr	r3, [pc, #292]	; (14554 <CLI_GetImuData+0x134>)
   1442e:	4798      	blx	r3
   14430:	0003      	movs	r3, r0
   14432:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   14434:	231b      	movs	r3, #27
   14436:	18fa      	adds	r2, r7, r3
   14438:	69fb      	ldr	r3, [r7, #28]
   1443a:	0011      	movs	r1, r2
   1443c:	0018      	movs	r0, r3
   1443e:	4b46      	ldr	r3, [pc, #280]	; (14558 <CLI_GetImuData+0x138>)
   14440:	4798      	blx	r3

    if (reg) {
   14442:	231b      	movs	r3, #27
   14444:	18fb      	adds	r3, r7, r3
   14446:	781b      	ldrb	r3, [r3, #0]
   14448:	2b00      	cmp	r3, #0
   1444a:	d064      	beq.n	14516 <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   1444c:	4b43      	ldr	r3, [pc, #268]	; (1455c <CLI_GetImuData+0x13c>)
   1444e:	2206      	movs	r2, #6
   14450:	2100      	movs	r1, #0
   14452:	0018      	movs	r0, r3
   14454:	4b42      	ldr	r3, [pc, #264]	; (14560 <CLI_GetImuData+0x140>)
   14456:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   14458:	4a40      	ldr	r2, [pc, #256]	; (1455c <CLI_GetImuData+0x13c>)
   1445a:	69fb      	ldr	r3, [r7, #28]
   1445c:	0011      	movs	r1, r2
   1445e:	0018      	movs	r0, r3
   14460:	4b40      	ldr	r3, [pc, #256]	; (14564 <CLI_GetImuData+0x144>)
   14462:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   14464:	4b3d      	ldr	r3, [pc, #244]	; (1455c <CLI_GetImuData+0x13c>)
   14466:	2200      	movs	r2, #0
   14468:	5e9b      	ldrsh	r3, [r3, r2]
   1446a:	0018      	movs	r0, r3
   1446c:	4b3e      	ldr	r3, [pc, #248]	; (14568 <CLI_GetImuData+0x148>)
   1446e:	4798      	blx	r3
   14470:	1c02      	adds	r2, r0, #0
   14472:	4b3e      	ldr	r3, [pc, #248]	; (1456c <CLI_GetImuData+0x14c>)
   14474:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   14476:	4b39      	ldr	r3, [pc, #228]	; (1455c <CLI_GetImuData+0x13c>)
   14478:	2202      	movs	r2, #2
   1447a:	5e9b      	ldrsh	r3, [r3, r2]
   1447c:	0018      	movs	r0, r3
   1447e:	4b3a      	ldr	r3, [pc, #232]	; (14568 <CLI_GetImuData+0x148>)
   14480:	4798      	blx	r3
   14482:	1c02      	adds	r2, r0, #0
   14484:	4b39      	ldr	r3, [pc, #228]	; (1456c <CLI_GetImuData+0x14c>)
   14486:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   14488:	4b34      	ldr	r3, [pc, #208]	; (1455c <CLI_GetImuData+0x13c>)
   1448a:	2204      	movs	r2, #4
   1448c:	5e9b      	ldrsh	r3, [r3, r2]
   1448e:	0018      	movs	r0, r3
   14490:	4b35      	ldr	r3, [pc, #212]	; (14568 <CLI_GetImuData+0x148>)
   14492:	4798      	blx	r3
   14494:	1c02      	adds	r2, r0, #0
   14496:	4b35      	ldr	r3, [pc, #212]	; (1456c <CLI_GetImuData+0x14c>)
   14498:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   1449a:	4b34      	ldr	r3, [pc, #208]	; (1456c <CLI_GetImuData+0x14c>)
   1449c:	681a      	ldr	r2, [r3, #0]
   1449e:	4b34      	ldr	r3, [pc, #208]	; (14570 <CLI_GetImuData+0x150>)
   144a0:	1c10      	adds	r0, r2, #0
   144a2:	4798      	blx	r3
   144a4:	0005      	movs	r5, r0
   144a6:	4b31      	ldr	r3, [pc, #196]	; (1456c <CLI_GetImuData+0x14c>)
   144a8:	685a      	ldr	r2, [r3, #4]
   144aa:	4b31      	ldr	r3, [pc, #196]	; (14570 <CLI_GetImuData+0x150>)
   144ac:	1c10      	adds	r0, r2, #0
   144ae:	4798      	blx	r3
   144b0:	0004      	movs	r4, r0
   144b2:	4b2e      	ldr	r3, [pc, #184]	; (1456c <CLI_GetImuData+0x14c>)
   144b4:	689a      	ldr	r2, [r3, #8]
   144b6:	4b2e      	ldr	r3, [pc, #184]	; (14570 <CLI_GetImuData+0x150>)
   144b8:	1c10      	adds	r0, r2, #0
   144ba:	4798      	blx	r3
   144bc:	0003      	movs	r3, r0
   144be:	4a2d      	ldr	r2, [pc, #180]	; (14574 <CLI_GetImuData+0x154>)
   144c0:	68b9      	ldr	r1, [r7, #8]
   144c2:	68f8      	ldr	r0, [r7, #12]
   144c4:	9301      	str	r3, [sp, #4]
   144c6:	9400      	str	r4, [sp, #0]
   144c8:	002b      	movs	r3, r5
   144ca:	4c2b      	ldr	r4, [pc, #172]	; (14578 <CLI_GetImuData+0x158>)
   144cc:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   144ce:	4b27      	ldr	r3, [pc, #156]	; (1456c <CLI_GetImuData+0x14c>)
   144d0:	681a      	ldr	r2, [r3, #0]
   144d2:	4b27      	ldr	r3, [pc, #156]	; (14570 <CLI_GetImuData+0x150>)
   144d4:	1c10      	adds	r0, r2, #0
   144d6:	4798      	blx	r3
   144d8:	0003      	movs	r3, r0
   144da:	b21a      	sxth	r2, r3
   144dc:	2314      	movs	r3, #20
   144de:	18fb      	adds	r3, r7, r3
   144e0:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   144e2:	4b22      	ldr	r3, [pc, #136]	; (1456c <CLI_GetImuData+0x14c>)
   144e4:	685a      	ldr	r2, [r3, #4]
   144e6:	4b22      	ldr	r3, [pc, #136]	; (14570 <CLI_GetImuData+0x150>)
   144e8:	1c10      	adds	r0, r2, #0
   144ea:	4798      	blx	r3
   144ec:	0003      	movs	r3, r0
   144ee:	b21a      	sxth	r2, r3
   144f0:	2314      	movs	r3, #20
   144f2:	18fb      	adds	r3, r7, r3
   144f4:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   144f6:	4b1d      	ldr	r3, [pc, #116]	; (1456c <CLI_GetImuData+0x14c>)
   144f8:	689a      	ldr	r2, [r3, #8]
   144fa:	4b1d      	ldr	r3, [pc, #116]	; (14570 <CLI_GetImuData+0x150>)
   144fc:	1c10      	adds	r0, r2, #0
   144fe:	4798      	blx	r3
   14500:	0003      	movs	r3, r0
   14502:	b21a      	sxth	r2, r3
   14504:	2314      	movs	r3, #20
   14506:	18fb      	adds	r3, r7, r3
   14508:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   1450a:	2314      	movs	r3, #20
   1450c:	18fb      	adds	r3, r7, r3
   1450e:	0018      	movs	r0, r3
   14510:	4b1a      	ldr	r3, [pc, #104]	; (1457c <CLI_GetImuData+0x15c>)
   14512:	4798      	blx	r3
   14514:	e019      	b.n	1454a <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   14516:	4a1a      	ldr	r2, [pc, #104]	; (14580 <CLI_GetImuData+0x160>)
   14518:	68b9      	ldr	r1, [r7, #8]
   1451a:	68fb      	ldr	r3, [r7, #12]
   1451c:	0018      	movs	r0, r3
   1451e:	4b16      	ldr	r3, [pc, #88]	; (14578 <CLI_GetImuData+0x158>)
   14520:	4798      	blx	r3
		imuPacket.xmg = -1;
   14522:	2314      	movs	r3, #20
   14524:	18fb      	adds	r3, r7, r3
   14526:	2201      	movs	r2, #1
   14528:	4252      	negs	r2, r2
   1452a:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   1452c:	2314      	movs	r3, #20
   1452e:	18fb      	adds	r3, r7, r3
   14530:	2202      	movs	r2, #2
   14532:	4252      	negs	r2, r2
   14534:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   14536:	2314      	movs	r3, #20
   14538:	18fb      	adds	r3, r7, r3
   1453a:	2203      	movs	r2, #3
   1453c:	4252      	negs	r2, r2
   1453e:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   14540:	2314      	movs	r3, #20
   14542:	18fb      	adds	r3, r7, r3
   14544:	0018      	movs	r0, r3
   14546:	4b0d      	ldr	r3, [pc, #52]	; (1457c <CLI_GetImuData+0x15c>)
   14548:	4798      	blx	r3
    }
    return pdFALSE;
   1454a:	2300      	movs	r3, #0
}
   1454c:	0018      	movs	r0, r3
   1454e:	46bd      	mov	sp, r7
   14550:	b008      	add	sp, #32
   14552:	bdb0      	pop	{r4, r5, r7, pc}
   14554:	0001644d 	.word	0x0001644d
   14558:	00015e39 	.word	0x00015e39
   1455c:	200005ec 	.word	0x200005ec
   14560:	0003577f 	.word	0x0003577f
   14564:	00015e75 	.word	0x00015e75
   14568:	000156c9 	.word	0x000156c9
   1456c:	200005f4 	.word	0x200005f4
   14570:	00033d25 	.word	0x00033d25
   14574:	00036f9c 	.word	0x00036f9c
   14578:	000359d9 	.word	0x000359d9
   1457c:	00018305 	.word	0x00018305
   14580:	00036fc0 	.word	0x00036fc0

00014584 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14584:	b590      	push	{r4, r7, lr}
   14586:	b087      	sub	sp, #28
   14588:	af00      	add	r7, sp, #0
   1458a:	60f8      	str	r0, [r7, #12]
   1458c:	60b9      	str	r1, [r7, #8]
   1458e:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   14590:	2317      	movs	r3, #23
   14592:	18fb      	adds	r3, r7, r3
   14594:	221b      	movs	r2, #27
   14596:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   14598:	2317      	movs	r3, #23
   1459a:	18fb      	adds	r3, r7, r3
   1459c:	781b      	ldrb	r3, [r3, #0]
   1459e:	4a08      	ldr	r2, [pc, #32]	; (145c0 <xCliClearTerminalScreen+0x3c>)
   145a0:	4808      	ldr	r0, [pc, #32]	; (145c4 <xCliClearTerminalScreen+0x40>)
   145a2:	210f      	movs	r1, #15
   145a4:	4c08      	ldr	r4, [pc, #32]	; (145c8 <xCliClearTerminalScreen+0x44>)
   145a6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   145a8:	4a06      	ldr	r2, [pc, #24]	; (145c4 <xCliClearTerminalScreen+0x40>)
   145aa:	68b9      	ldr	r1, [r7, #8]
   145ac:	68fb      	ldr	r3, [r7, #12]
   145ae:	0018      	movs	r0, r3
   145b0:	4b05      	ldr	r3, [pc, #20]	; (145c8 <xCliClearTerminalScreen+0x44>)
   145b2:	4798      	blx	r3
    return pdFALSE;
   145b4:	2300      	movs	r3, #0
}
   145b6:	0018      	movs	r0, r3
   145b8:	46bd      	mov	sp, r7
   145ba:	b007      	add	sp, #28
   145bc:	bd90      	pop	{r4, r7, pc}
   145be:	46c0      	nop			; (mov r8, r8)
   145c0:	00036fe8 	.word	0x00036fe8
   145c4:	20000504 	.word	0x20000504
   145c8:	000359d9 	.word	0x000359d9

000145cc <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   145cc:	b580      	push	{r7, lr}
   145ce:	b084      	sub	sp, #16
   145d0:	af00      	add	r7, sp, #0
   145d2:	60f8      	str	r0, [r7, #12]
   145d4:	60b9      	str	r1, [r7, #8]
   145d6:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   145d8:	2002      	movs	r0, #2
   145da:	4b03      	ldr	r3, [pc, #12]	; (145e8 <CLI_OTAU+0x1c>)
   145dc:	4798      	blx	r3

    return pdFALSE;
   145de:	2300      	movs	r3, #0
}
   145e0:	0018      	movs	r0, r3
   145e2:	46bd      	mov	sp, r7
   145e4:	b004      	add	sp, #16
   145e6:	bd80      	pop	{r7, pc}
   145e8:	000182d1 	.word	0x000182d1

000145ec <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   145ec:	b580      	push	{r7, lr}
   145ee:	b084      	sub	sp, #16
   145f0:	af00      	add	r7, sp, #0
   145f2:	60f8      	str	r0, [r7, #12]
   145f4:	60b9      	str	r1, [r7, #8]
   145f6:	607a      	str	r2, [r7, #4]
    system_reset();
   145f8:	4b03      	ldr	r3, [pc, #12]	; (14608 <CLI_ResetDevice+0x1c>)
   145fa:	4798      	blx	r3
    return pdFALSE;
   145fc:	2300      	movs	r3, #0
}
   145fe:	0018      	movs	r0, r3
   14600:	46bd      	mov	sp, r7
   14602:	b004      	add	sp, #16
   14604:	bd80      	pop	{r7, pc}
   14606:	46c0      	nop			; (mov r8, r8)
   14608:	0001408d 	.word	0x0001408d

0001460c <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1460c:	b590      	push	{r4, r7, lr}
   1460e:	b087      	sub	sp, #28
   14610:	af00      	add	r7, sp, #0
   14612:	60f8      	str	r0, [r7, #12]
   14614:	60b9      	str	r1, [r7, #8]
   14616:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   14618:	2312      	movs	r3, #18
   1461a:	18fb      	adds	r3, r7, r3
   1461c:	2200      	movs	r2, #0
   1461e:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   14620:	2312      	movs	r3, #18
   14622:	18fb      	adds	r3, r7, r3
   14624:	2164      	movs	r1, #100	; 0x64
   14626:	0018      	movs	r0, r3
   14628:	4b19      	ldr	r3, [pc, #100]	; (14690 <CLI_DistanceSensorGetDistance+0x84>)
   1462a:	4798      	blx	r3
   1462c:	0003      	movs	r3, r0
   1462e:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   14630:	697b      	ldr	r3, [r7, #20]
   14632:	2b00      	cmp	r3, #0
   14634:	d006      	beq.n	14644 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   14636:	697b      	ldr	r3, [r7, #20]
   14638:	4a16      	ldr	r2, [pc, #88]	; (14694 <CLI_DistanceSensorGetDistance+0x88>)
   1463a:	68b9      	ldr	r1, [r7, #8]
   1463c:	68f8      	ldr	r0, [r7, #12]
   1463e:	4c16      	ldr	r4, [pc, #88]	; (14698 <CLI_DistanceSensorGetDistance+0x8c>)
   14640:	47a0      	blx	r4
   14642:	e007      	b.n	14654 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   14644:	2312      	movs	r3, #18
   14646:	18fb      	adds	r3, r7, r3
   14648:	881b      	ldrh	r3, [r3, #0]
   1464a:	4a14      	ldr	r2, [pc, #80]	; (1469c <CLI_DistanceSensorGetDistance+0x90>)
   1464c:	68b9      	ldr	r1, [r7, #8]
   1464e:	68f8      	ldr	r0, [r7, #12]
   14650:	4c11      	ldr	r4, [pc, #68]	; (14698 <CLI_DistanceSensorGetDistance+0x8c>)
   14652:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   14654:	2312      	movs	r3, #18
   14656:	18fb      	adds	r3, r7, r3
   14658:	0018      	movs	r0, r3
   1465a:	4b11      	ldr	r3, [pc, #68]	; (146a0 <CLI_DistanceSensorGetDistance+0x94>)
   1465c:	4798      	blx	r3
   1465e:	0003      	movs	r3, r0
   14660:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   14662:	697b      	ldr	r3, [r7, #20]
   14664:	2b01      	cmp	r3, #1
   14666:	d10e      	bne.n	14686 <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   14668:	68fb      	ldr	r3, [r7, #12]
   1466a:	0018      	movs	r0, r3
   1466c:	4b0d      	ldr	r3, [pc, #52]	; (146a4 <CLI_DistanceSensorGetDistance+0x98>)
   1466e:	4798      	blx	r3
   14670:	0003      	movs	r3, r0
   14672:	001a      	movs	r2, r3
   14674:	68fb      	ldr	r3, [r7, #12]
   14676:	189a      	adds	r2, r3, r2
   14678:	4b0b      	ldr	r3, [pc, #44]	; (146a8 <CLI_DistanceSensorGetDistance+0x9c>)
   1467a:	0010      	movs	r0, r2
   1467c:	0019      	movs	r1, r3
   1467e:	231a      	movs	r3, #26
   14680:	001a      	movs	r2, r3
   14682:	4b0a      	ldr	r3, [pc, #40]	; (146ac <CLI_DistanceSensorGetDistance+0xa0>)
   14684:	4798      	blx	r3
    }
    return pdFALSE;
   14686:	2300      	movs	r3, #0
}
   14688:	0018      	movs	r0, r3
   1468a:	46bd      	mov	sp, r7
   1468c:	b007      	add	sp, #28
   1468e:	bd90      	pop	{r4, r7, pc}
   14690:	00014c5d 	.word	0x00014c5d
   14694:	0003703c 	.word	0x0003703c
   14698:	000359d9 	.word	0x000359d9
   1469c:	00037050 	.word	0x00037050
   146a0:	00018331 	.word	0x00018331
   146a4:	00035b37 	.word	0x00035b37
   146a8:	00037064 	.word	0x00037064
   146ac:	00035749 	.word	0x00035749

000146b0 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   146b0:	b590      	push	{r4, r7, lr}
   146b2:	b08f      	sub	sp, #60	; 0x3c
   146b4:	af00      	add	r7, sp, #0
   146b6:	60f8      	str	r0, [r7, #12]
   146b8:	60b9      	str	r1, [r7, #8]
   146ba:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   146bc:	2318      	movs	r3, #24
   146be:	18fb      	adds	r3, r7, r3
   146c0:	2200      	movs	r2, #0
   146c2:	701a      	strb	r2, [r3, #0]
   146c4:	2318      	movs	r3, #24
   146c6:	18fb      	adds	r3, r7, r3
   146c8:	2200      	movs	r2, #0
   146ca:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   146cc:	2318      	movs	r3, #24
   146ce:	18fb      	adds	r3, r7, r3
   146d0:	2200      	movs	r2, #0
   146d2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   146d4:	2318      	movs	r3, #24
   146d6:	18fb      	adds	r3, r7, r3
   146d8:	2200      	movs	r2, #0
   146da:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   146dc:	231c      	movs	r3, #28
   146de:	18fb      	adds	r3, r7, r3
   146e0:	2200      	movs	r2, #0
   146e2:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   146e4:	231c      	movs	r3, #28
   146e6:	18fb      	adds	r3, r7, r3
   146e8:	2214      	movs	r2, #20
   146ea:	18ba      	adds	r2, r7, r2
   146ec:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   146ee:	231c      	movs	r3, #28
   146f0:	18fb      	adds	r3, r7, r3
   146f2:	2201      	movs	r2, #1
   146f4:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   146f6:	231c      	movs	r3, #28
   146f8:	18fb      	adds	r3, r7, r3
   146fa:	2218      	movs	r2, #24
   146fc:	18ba      	adds	r2, r7, r2
   146fe:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   14700:	231c      	movs	r3, #28
   14702:	18fb      	adds	r3, r7, r3
   14704:	2201      	movs	r2, #1
   14706:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   14708:	4b2a      	ldr	r3, [pc, #168]	; (147b4 <CLI_i2cScan+0x104>)
   1470a:	0018      	movs	r0, r3
   1470c:	4b2a      	ldr	r3, [pc, #168]	; (147b8 <CLI_i2cScan+0x108>)
   1470e:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14710:	2300      	movs	r3, #0
   14712:	637b      	str	r3, [r7, #52]	; 0x34
   14714:	e042      	b.n	1479c <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   14716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14718:	4a28      	ldr	r2, [pc, #160]	; (147bc <CLI_i2cScan+0x10c>)
   1471a:	4829      	ldr	r0, [pc, #164]	; (147c0 <CLI_i2cScan+0x110>)
   1471c:	210f      	movs	r1, #15
   1471e:	4c29      	ldr	r4, [pc, #164]	; (147c4 <CLI_i2cScan+0x114>)
   14720:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   14722:	4b27      	ldr	r3, [pc, #156]	; (147c0 <CLI_i2cScan+0x110>)
   14724:	0018      	movs	r0, r3
   14726:	4b24      	ldr	r3, [pc, #144]	; (147b8 <CLI_i2cScan+0x108>)
   14728:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1472a:	2300      	movs	r3, #0
   1472c:	633b      	str	r3, [r7, #48]	; 0x30
   1472e:	e02b      	b.n	14788 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   14730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14732:	b2da      	uxtb	r2, r3
   14734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14736:	b2db      	uxtb	r3, r3
   14738:	18d3      	adds	r3, r2, r3
   1473a:	b2da      	uxtb	r2, r3
   1473c:	231c      	movs	r3, #28
   1473e:	18fb      	adds	r3, r7, r3
   14740:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cReadDataWait(&i2cOled, 100, 100);
   14742:	231c      	movs	r3, #28
   14744:	18fb      	adds	r3, r7, r3
   14746:	2264      	movs	r2, #100	; 0x64
   14748:	2164      	movs	r1, #100	; 0x64
   1474a:	0018      	movs	r0, r3
   1474c:	4b1e      	ldr	r3, [pc, #120]	; (147c8 <CLI_i2cScan+0x118>)
   1474e:	4798      	blx	r3
   14750:	0003      	movs	r3, r0
   14752:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   14754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14756:	2b00      	cmp	r3, #0
   14758:	d10c      	bne.n	14774 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1475a:	231c      	movs	r3, #28
   1475c:	18fb      	adds	r3, r7, r3
   1475e:	781b      	ldrb	r3, [r3, #0]
   14760:	4a1a      	ldr	r2, [pc, #104]	; (147cc <CLI_i2cScan+0x11c>)
   14762:	4817      	ldr	r0, [pc, #92]	; (147c0 <CLI_i2cScan+0x110>)
   14764:	210f      	movs	r1, #15
   14766:	4c17      	ldr	r4, [pc, #92]	; (147c4 <CLI_i2cScan+0x114>)
   14768:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1476a:	4b15      	ldr	r3, [pc, #84]	; (147c0 <CLI_i2cScan+0x110>)
   1476c:	0018      	movs	r0, r3
   1476e:	4b12      	ldr	r3, [pc, #72]	; (147b8 <CLI_i2cScan+0x108>)
   14770:	4798      	blx	r3
   14772:	e006      	b.n	14782 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   14774:	4b12      	ldr	r3, [pc, #72]	; (147c0 <CLI_i2cScan+0x110>)
   14776:	4a16      	ldr	r2, [pc, #88]	; (147d0 <CLI_i2cScan+0x120>)
   14778:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1477a:	4b11      	ldr	r3, [pc, #68]	; (147c0 <CLI_i2cScan+0x110>)
   1477c:	0018      	movs	r0, r3
   1477e:	4b0e      	ldr	r3, [pc, #56]	; (147b8 <CLI_i2cScan+0x108>)
   14780:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   14782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14784:	3301      	adds	r3, #1
   14786:	633b      	str	r3, [r7, #48]	; 0x30
   14788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1478a:	2b0f      	cmp	r3, #15
   1478c:	ddd0      	ble.n	14730 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   1478e:	4b11      	ldr	r3, [pc, #68]	; (147d4 <CLI_i2cScan+0x124>)
   14790:	0018      	movs	r0, r3
   14792:	4b09      	ldr	r3, [pc, #36]	; (147b8 <CLI_i2cScan+0x108>)
   14794:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14798:	3310      	adds	r3, #16
   1479a:	637b      	str	r3, [r7, #52]	; 0x34
   1479c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1479e:	2b7f      	cmp	r3, #127	; 0x7f
   147a0:	ddb9      	ble.n	14716 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   147a2:	4b0c      	ldr	r3, [pc, #48]	; (147d4 <CLI_i2cScan+0x124>)
   147a4:	0018      	movs	r0, r3
   147a6:	4b04      	ldr	r3, [pc, #16]	; (147b8 <CLI_i2cScan+0x108>)
   147a8:	4798      	blx	r3
			return pdFALSE;
   147aa:	2300      	movs	r3, #0

}
   147ac:	0018      	movs	r0, r3
   147ae:	46bd      	mov	sp, r7
   147b0:	b00f      	add	sp, #60	; 0x3c
   147b2:	bd90      	pop	{r4, r7, pc}
   147b4:	0003709c 	.word	0x0003709c
   147b8:	0001ec15 	.word	0x0001ec15
   147bc:	000370d0 	.word	0x000370d0
   147c0:	20000504 	.word	0x20000504
   147c4:	000359d9 	.word	0x000359d9
   147c8:	00015529 	.word	0x00015529
   147cc:	000370d8 	.word	0x000370d8
   147d0:	00202058 	.word	0x00202058
   147d4:	00036f88 	.word	0x00036f88

000147d8 <CLI_GetGpsData>:

// CLI Command added by Derek. Reads from the GPS and returns data.

BaseType_t CLI_GetGpsData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   147d8:	b590      	push	{r4, r7, lr}
   147da:	b097      	sub	sp, #92	; 0x5c
   147dc:	af00      	add	r7, sp, #0
   147de:	60f8      	str	r0, [r7, #12]
   147e0:	60b9      	str	r1, [r7, #8]
   147e2:	607a      	str	r2, [r7, #4]
	SerialConsoleWriteString("Testing running GPS call \r\n");
   147e4:	4b1d      	ldr	r3, [pc, #116]	; (1485c <CLI_GetGpsData+0x84>)
   147e6:	0018      	movs	r0, r3
   147e8:	4b1d      	ldr	r3, [pc, #116]	; (14860 <CLI_GetGpsData+0x88>)
   147ea:	4798      	blx	r3
	
	char gps[64];
	int error = GPSSensorRead(&gps, 100);
   147ec:	2314      	movs	r3, #20
   147ee:	18fb      	adds	r3, r7, r3
   147f0:	2164      	movs	r1, #100	; 0x64
   147f2:	0018      	movs	r0, r3
   147f4:	4b1b      	ldr	r3, [pc, #108]	; (14864 <CLI_GetGpsData+0x8c>)
   147f6:	4798      	blx	r3
   147f8:	0003      	movs	r3, r0
   147fa:	657b      	str	r3, [r7, #84]	; 0x54
	if (0 != error) {
   147fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   147fe:	2b00      	cmp	r3, #0
   14800:	d006      	beq.n	14810 <CLI_GetGpsData+0x38>
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   14802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14804:	4a18      	ldr	r2, [pc, #96]	; (14868 <CLI_GetGpsData+0x90>)
   14806:	68b9      	ldr	r1, [r7, #8]
   14808:	68f8      	ldr	r0, [r7, #12]
   1480a:	4c18      	ldr	r4, [pc, #96]	; (1486c <CLI_GetGpsData+0x94>)
   1480c:	47a0      	blx	r4
   1480e:	e006      	b.n	1481e <CLI_GetGpsData+0x46>
		} else {
		snprintf((char *) pcWriteBuffer, xWriteBufferLen, gps);
   14810:	2314      	movs	r3, #20
   14812:	18fa      	adds	r2, r7, r3
   14814:	68b9      	ldr	r1, [r7, #8]
   14816:	68fb      	ldr	r3, [r7, #12]
   14818:	0018      	movs	r0, r3
   1481a:	4b14      	ldr	r3, [pc, #80]	; (1486c <CLI_GetGpsData+0x94>)
   1481c:	4798      	blx	r3
	}

	error = WifiAddDistanceDataToQueue(&gps);
   1481e:	2314      	movs	r3, #20
   14820:	18fb      	adds	r3, r7, r3
   14822:	0018      	movs	r0, r3
   14824:	4b12      	ldr	r3, [pc, #72]	; (14870 <CLI_GetGpsData+0x98>)
   14826:	4798      	blx	r3
   14828:	0003      	movs	r3, r0
   1482a:	657b      	str	r3, [r7, #84]	; 0x54
	if (error == pdTRUE) {
   1482c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1482e:	2b01      	cmp	r3, #1
   14830:	d10e      	bne.n	14850 <CLI_GetGpsData+0x78>
		strcat((char *) pcWriteBuffer, "gps Data MQTT Post\r\n");
   14832:	68fb      	ldr	r3, [r7, #12]
   14834:	0018      	movs	r0, r3
   14836:	4b0f      	ldr	r3, [pc, #60]	; (14874 <CLI_GetGpsData+0x9c>)
   14838:	4798      	blx	r3
   1483a:	0003      	movs	r3, r0
   1483c:	001a      	movs	r2, r3
   1483e:	68fb      	ldr	r3, [r7, #12]
   14840:	189a      	adds	r2, r3, r2
   14842:	4b0d      	ldr	r3, [pc, #52]	; (14878 <CLI_GetGpsData+0xa0>)
   14844:	0010      	movs	r0, r2
   14846:	0019      	movs	r1, r3
   14848:	2315      	movs	r3, #21
   1484a:	001a      	movs	r2, r3
   1484c:	4b0b      	ldr	r3, [pc, #44]	; (1487c <CLI_GetGpsData+0xa4>)
   1484e:	4798      	blx	r3
	}
	return pdFALSE;
   14850:	2300      	movs	r3, #0
	
	return pdFALSE;
}
   14852:	0018      	movs	r0, r3
   14854:	46bd      	mov	sp, r7
   14856:	b017      	add	sp, #92	; 0x5c
   14858:	bd90      	pop	{r4, r7, pc}
   1485a:	46c0      	nop			; (mov r8, r8)
   1485c:	000370e0 	.word	0x000370e0
   14860:	0001ec15 	.word	0x0001ec15
   14864:	00012115 	.word	0x00012115
   14868:	0003703c 	.word	0x0003703c
   1486c:	000359d9 	.word	0x000359d9
   14870:	00018331 	.word	0x00018331
   14874:	00035b37 	.word	0x00035b37
   14878:	000370fc 	.word	0x000370fc
   1487c:	00035749 	.word	0x00035749

00014880 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   14880:	b580      	push	{r7, lr}
   14882:	b088      	sub	sp, #32
   14884:	af00      	add	r7, sp, #0
   14886:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   14888:	4b33      	ldr	r3, [pc, #204]	; (14958 <vControlHandlerTask+0xd8>)
   1488a:	0018      	movs	r0, r3
   1488c:	4b33      	ldr	r3, [pc, #204]	; (1495c <vControlHandlerTask+0xdc>)
   1488e:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   14890:	2200      	movs	r2, #0
   14892:	2114      	movs	r1, #20
   14894:	2002      	movs	r0, #2
   14896:	4b32      	ldr	r3, [pc, #200]	; (14960 <vControlHandlerTask+0xe0>)
   14898:	4798      	blx	r3
   1489a:	0002      	movs	r2, r0
   1489c:	4b31      	ldr	r3, [pc, #196]	; (14964 <vControlHandlerTask+0xe4>)
   1489e:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   148a0:	2200      	movs	r2, #0
   148a2:	2103      	movs	r1, #3
   148a4:	2002      	movs	r0, #2
   148a6:	4b2e      	ldr	r3, [pc, #184]	; (14960 <vControlHandlerTask+0xe0>)
   148a8:	4798      	blx	r3
   148aa:	0002      	movs	r2, r0
   148ac:	4b2e      	ldr	r3, [pc, #184]	; (14968 <vControlHandlerTask+0xe8>)
   148ae:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   148b0:	4b2c      	ldr	r3, [pc, #176]	; (14964 <vControlHandlerTask+0xe4>)
   148b2:	681b      	ldr	r3, [r3, #0]
   148b4:	2b00      	cmp	r3, #0
   148b6:	d003      	beq.n	148c0 <vControlHandlerTask+0x40>
   148b8:	4b2b      	ldr	r3, [pc, #172]	; (14968 <vControlHandlerTask+0xe8>)
   148ba:	681b      	ldr	r3, [r3, #0]
   148bc:	2b00      	cmp	r3, #0
   148be:	d103      	bne.n	148c8 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   148c0:	4b2a      	ldr	r3, [pc, #168]	; (1496c <vControlHandlerTask+0xec>)
   148c2:	0018      	movs	r0, r3
   148c4:	4b25      	ldr	r3, [pc, #148]	; (1495c <vControlHandlerTask+0xdc>)
   148c6:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   148c8:	4b29      	ldr	r3, [pc, #164]	; (14970 <vControlHandlerTask+0xf0>)
   148ca:	2200      	movs	r2, #0
   148cc:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   148ce:	4b28      	ldr	r3, [pc, #160]	; (14970 <vControlHandlerTask+0xf0>)
   148d0:	781b      	ldrb	r3, [r3, #0]
   148d2:	2b01      	cmp	r3, #1
   148d4:	d01d      	beq.n	14912 <vControlHandlerTask+0x92>
   148d6:	2b02      	cmp	r3, #2
   148d8:	d035      	beq.n	14946 <vControlHandlerTask+0xc6>
   148da:	2b00      	cmp	r3, #0
   148dc:	d12f      	bne.n	1493e <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   148de:	4b21      	ldr	r3, [pc, #132]	; (14964 <vControlHandlerTask+0xe4>)
   148e0:	681b      	ldr	r3, [r3, #0]
   148e2:	220c      	movs	r2, #12
   148e4:	18b9      	adds	r1, r7, r2
   148e6:	2200      	movs	r2, #0
   148e8:	0018      	movs	r0, r3
   148ea:	4b22      	ldr	r3, [pc, #136]	; (14974 <vControlHandlerTask+0xf4>)
   148ec:	4798      	blx	r3
   148ee:	0003      	movs	r3, r0
   148f0:	2b01      	cmp	r3, #1
   148f2:	d12a      	bne.n	1494a <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   148f4:	4b20      	ldr	r3, [pc, #128]	; (14978 <vControlHandlerTask+0xf8>)
   148f6:	0019      	movs	r1, r3
   148f8:	2001      	movs	r0, #1
   148fa:	4b20      	ldr	r3, [pc, #128]	; (1497c <vControlHandlerTask+0xfc>)
   148fc:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   148fe:	230c      	movs	r3, #12
   14900:	18fb      	adds	r3, r7, r3
   14902:	0018      	movs	r0, r3
   14904:	4b1e      	ldr	r3, [pc, #120]	; (14980 <vControlHandlerTask+0x100>)
   14906:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   14908:	4b19      	ldr	r3, [pc, #100]	; (14970 <vControlHandlerTask+0xf0>)
   1490a:	2201      	movs	r2, #1
   1490c:	701a      	strb	r2, [r3, #0]
                }

                break;
   1490e:	46c0      	nop			; (mov r8, r8)
   14910:	e01b      	b.n	1494a <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   14912:	4b1c      	ldr	r3, [pc, #112]	; (14984 <vControlHandlerTask+0x104>)
   14914:	4798      	blx	r3
   14916:	1e03      	subs	r3, r0, #0
   14918:	d019      	beq.n	1494e <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   1491a:	4b1b      	ldr	r3, [pc, #108]	; (14988 <vControlHandlerTask+0x108>)
   1491c:	4798      	blx	r3
   1491e:	0003      	movs	r3, r0
   14920:	0018      	movs	r0, r3
   14922:	4b1a      	ldr	r3, [pc, #104]	; (1498c <vControlHandlerTask+0x10c>)
   14924:	4798      	blx	r3
   14926:	0003      	movs	r3, r0
   14928:	2b01      	cmp	r3, #1
   1492a:	d004      	beq.n	14936 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   1492c:	4b18      	ldr	r3, [pc, #96]	; (14990 <vControlHandlerTask+0x110>)
   1492e:	0019      	movs	r1, r3
   14930:	2001      	movs	r0, #1
   14932:	4b12      	ldr	r3, [pc, #72]	; (1497c <vControlHandlerTask+0xfc>)
   14934:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   14936:	4b0e      	ldr	r3, [pc, #56]	; (14970 <vControlHandlerTask+0xf0>)
   14938:	2200      	movs	r2, #0
   1493a:	701a      	strb	r2, [r3, #0]
                }

                break;
   1493c:	e007      	b.n	1494e <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1493e:	4b0c      	ldr	r3, [pc, #48]	; (14970 <vControlHandlerTask+0xf0>)
   14940:	2200      	movs	r2, #0
   14942:	701a      	strb	r2, [r3, #0]
                break;
   14944:	e004      	b.n	14950 <vControlHandlerTask+0xd0>
                break;
   14946:	46c0      	nop			; (mov r8, r8)
   14948:	e002      	b.n	14950 <vControlHandlerTask+0xd0>
                break;
   1494a:	46c0      	nop			; (mov r8, r8)
   1494c:	e000      	b.n	14950 <vControlHandlerTask+0xd0>
                break;
   1494e:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   14950:	2028      	movs	r0, #40	; 0x28
   14952:	4b10      	ldr	r3, [pc, #64]	; (14994 <vControlHandlerTask+0x114>)
   14954:	4798      	blx	r3
        switch (controlState) {
   14956:	e7ba      	b.n	148ce <vControlHandlerTask+0x4e>
   14958:	00037184 	.word	0x00037184
   1495c:	0001ec15 	.word	0x0001ec15
   14960:	0001b2b5 	.word	0x0001b2b5
   14964:	20000600 	.word	0x20000600
   14968:	20000604 	.word	0x20000604
   1496c:	000371a4 	.word	0x000371a4
   14970:	20004824 	.word	0x20004824
   14974:	0001be15 	.word	0x0001be15
   14978:	000371d0 	.word	0x000371d0
   1497c:	0001ed01 	.word	0x0001ed01
   14980:	000169e5 	.word	0x000169e5
   14984:	00016a21 	.word	0x00016a21
   14988:	00016a35 	.word	0x00016a35
   1498c:	0001835d 	.word	0x0001835d
   14990:	000371f8 	.word	0x000371f8
   14994:	0001cfc1 	.word	0x0001cfc1

00014998 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   14998:	b590      	push	{r4, r7, lr}
   1499a:	b085      	sub	sp, #20
   1499c:	af00      	add	r7, sp, #0
   1499e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   149a0:	4b06      	ldr	r3, [pc, #24]	; (149bc <ControlAddGameData+0x24>)
   149a2:	6818      	ldr	r0, [r3, #0]
   149a4:	6879      	ldr	r1, [r7, #4]
   149a6:	2300      	movs	r3, #0
   149a8:	220a      	movs	r2, #10
   149aa:	4c05      	ldr	r4, [pc, #20]	; (149c0 <ControlAddGameData+0x28>)
   149ac:	47a0      	blx	r4
   149ae:	0003      	movs	r3, r0
   149b0:	60fb      	str	r3, [r7, #12]
    return error;
   149b2:	68fb      	ldr	r3, [r7, #12]
}
   149b4:	0018      	movs	r0, r3
   149b6:	46bd      	mov	sp, r7
   149b8:	b005      	add	sp, #20
   149ba:	bd90      	pop	{r4, r7, pc}
   149bc:	20000600 	.word	0x20000600
   149c0:	0001b55d 	.word	0x0001b55d

000149c4 <system_interrupt_enable>:
{
   149c4:	b580      	push	{r7, lr}
   149c6:	b082      	sub	sp, #8
   149c8:	af00      	add	r7, sp, #0
   149ca:	0002      	movs	r2, r0
   149cc:	1dfb      	adds	r3, r7, #7
   149ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   149d0:	4b06      	ldr	r3, [pc, #24]	; (149ec <system_interrupt_enable+0x28>)
   149d2:	1dfa      	adds	r2, r7, #7
   149d4:	7812      	ldrb	r2, [r2, #0]
   149d6:	0011      	movs	r1, r2
   149d8:	221f      	movs	r2, #31
   149da:	400a      	ands	r2, r1
   149dc:	2101      	movs	r1, #1
   149de:	4091      	lsls	r1, r2
   149e0:	000a      	movs	r2, r1
   149e2:	601a      	str	r2, [r3, #0]
}
   149e4:	46c0      	nop			; (mov r8, r8)
   149e6:	46bd      	mov	sp, r7
   149e8:	b002      	add	sp, #8
   149ea:	bd80      	pop	{r7, pc}
   149ec:	e000e100 	.word	0xe000e100

000149f0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   149f0:	b580      	push	{r7, lr}
   149f2:	b084      	sub	sp, #16
   149f4:	af00      	add	r7, sp, #0
   149f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   149f8:	687b      	ldr	r3, [r7, #4]
   149fa:	681b      	ldr	r3, [r3, #0]
   149fc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   149fe:	68fb      	ldr	r3, [r7, #12]
   14a00:	69db      	ldr	r3, [r3, #28]
   14a02:	1e5a      	subs	r2, r3, #1
   14a04:	4193      	sbcs	r3, r2
   14a06:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   14a08:	0018      	movs	r0, r3
   14a0a:	46bd      	mov	sp, r7
   14a0c:	b004      	add	sp, #16
   14a0e:	bd80      	pop	{r7, pc}

00014a10 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   14a10:	b580      	push	{r7, lr}
   14a12:	b082      	sub	sp, #8
   14a14:	af00      	add	r7, sp, #0
   14a16:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   14a18:	46c0      	nop			; (mov r8, r8)
   14a1a:	687b      	ldr	r3, [r7, #4]
   14a1c:	0018      	movs	r0, r3
   14a1e:	4b04      	ldr	r3, [pc, #16]	; (14a30 <_usart_wait_for_sync+0x20>)
   14a20:	4798      	blx	r3
   14a22:	1e03      	subs	r3, r0, #0
   14a24:	d1f9      	bne.n	14a1a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   14a26:	46c0      	nop			; (mov r8, r8)
   14a28:	46bd      	mov	sp, r7
   14a2a:	b002      	add	sp, #8
   14a2c:	bd80      	pop	{r7, pc}
   14a2e:	46c0      	nop			; (mov r8, r8)
   14a30:	000149f1 	.word	0x000149f1

00014a34 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   14a34:	b580      	push	{r7, lr}
   14a36:	b082      	sub	sp, #8
   14a38:	af00      	add	r7, sp, #0
   14a3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   14a3c:	687b      	ldr	r3, [r7, #4]
   14a3e:	2280      	movs	r2, #128	; 0x80
   14a40:	05d2      	lsls	r2, r2, #23
   14a42:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   14a44:	687b      	ldr	r3, [r7, #4]
   14a46:	2200      	movs	r2, #0
   14a48:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   14a4a:	687b      	ldr	r3, [r7, #4]
   14a4c:	22ff      	movs	r2, #255	; 0xff
   14a4e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   14a50:	687b      	ldr	r3, [r7, #4]
   14a52:	2200      	movs	r2, #0
   14a54:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   14a56:	687b      	ldr	r3, [r7, #4]
   14a58:	2200      	movs	r2, #0
   14a5a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   14a5c:	687b      	ldr	r3, [r7, #4]
   14a5e:	2296      	movs	r2, #150	; 0x96
   14a60:	0192      	lsls	r2, r2, #6
   14a62:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   14a64:	687b      	ldr	r3, [r7, #4]
   14a66:	2224      	movs	r2, #36	; 0x24
   14a68:	2101      	movs	r1, #1
   14a6a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   14a6c:	687b      	ldr	r3, [r7, #4]
   14a6e:	2225      	movs	r2, #37	; 0x25
   14a70:	2101      	movs	r1, #1
   14a72:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   14a74:	687b      	ldr	r3, [r7, #4]
   14a76:	2226      	movs	r2, #38	; 0x26
   14a78:	2100      	movs	r1, #0
   14a7a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   14a7c:	687b      	ldr	r3, [r7, #4]
   14a7e:	2227      	movs	r2, #39	; 0x27
   14a80:	2100      	movs	r1, #0
   14a82:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   14a84:	687b      	ldr	r3, [r7, #4]
   14a86:	2200      	movs	r2, #0
   14a88:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   14a8a:	687b      	ldr	r3, [r7, #4]
   14a8c:	2288      	movs	r2, #136	; 0x88
   14a8e:	0352      	lsls	r2, r2, #13
   14a90:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   14a92:	687b      	ldr	r3, [r7, #4]
   14a94:	222c      	movs	r2, #44	; 0x2c
   14a96:	2100      	movs	r1, #0
   14a98:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   14a9a:	687b      	ldr	r3, [r7, #4]
   14a9c:	222d      	movs	r2, #45	; 0x2d
   14a9e:	2100      	movs	r1, #0
   14aa0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14aa2:	687b      	ldr	r3, [r7, #4]
   14aa4:	2200      	movs	r2, #0
   14aa6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14aa8:	687b      	ldr	r3, [r7, #4]
   14aaa:	2200      	movs	r2, #0
   14aac:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   14aae:	687b      	ldr	r3, [r7, #4]
   14ab0:	2200      	movs	r2, #0
   14ab2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   14ab4:	687b      	ldr	r3, [r7, #4]
   14ab6:	2200      	movs	r2, #0
   14ab8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   14aba:	687b      	ldr	r3, [r7, #4]
   14abc:	2200      	movs	r2, #0
   14abe:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   14ac0:	687b      	ldr	r3, [r7, #4]
   14ac2:	2200      	movs	r2, #0
   14ac4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   14ac6:	687b      	ldr	r3, [r7, #4]
   14ac8:	2200      	movs	r2, #0
   14aca:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   14acc:	687b      	ldr	r3, [r7, #4]
   14ace:	2200      	movs	r2, #0
   14ad0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   14ad2:	687b      	ldr	r3, [r7, #4]
   14ad4:	2200      	movs	r2, #0
   14ad6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   14ad8:	687b      	ldr	r3, [r7, #4]
   14ada:	2200      	movs	r2, #0
   14adc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   14ade:	687b      	ldr	r3, [r7, #4]
   14ae0:	2213      	movs	r2, #19
   14ae2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   14ae4:	687b      	ldr	r3, [r7, #4]
   14ae6:	2200      	movs	r2, #0
   14ae8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   14aea:	46c0      	nop			; (mov r8, r8)
   14aec:	46bd      	mov	sp, r7
   14aee:	b002      	add	sp, #8
   14af0:	bd80      	pop	{r7, pc}
	...

00014af4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   14af4:	b580      	push	{r7, lr}
   14af6:	b084      	sub	sp, #16
   14af8:	af00      	add	r7, sp, #0
   14afa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   14afc:	687b      	ldr	r3, [r7, #4]
   14afe:	681b      	ldr	r3, [r3, #0]
   14b00:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14b02:	687b      	ldr	r3, [r7, #4]
   14b04:	681b      	ldr	r3, [r3, #0]
   14b06:	0018      	movs	r0, r3
   14b08:	4b09      	ldr	r3, [pc, #36]	; (14b30 <usart_enable+0x3c>)
   14b0a:	4798      	blx	r3
   14b0c:	0003      	movs	r3, r0
   14b0e:	0018      	movs	r0, r3
   14b10:	4b08      	ldr	r3, [pc, #32]	; (14b34 <usart_enable+0x40>)
   14b12:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14b14:	687b      	ldr	r3, [r7, #4]
   14b16:	0018      	movs	r0, r3
   14b18:	4b07      	ldr	r3, [pc, #28]	; (14b38 <usart_enable+0x44>)
   14b1a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   14b1c:	68fb      	ldr	r3, [r7, #12]
   14b1e:	681b      	ldr	r3, [r3, #0]
   14b20:	2202      	movs	r2, #2
   14b22:	431a      	orrs	r2, r3
   14b24:	68fb      	ldr	r3, [r7, #12]
   14b26:	601a      	str	r2, [r3, #0]
}
   14b28:	46c0      	nop			; (mov r8, r8)
   14b2a:	46bd      	mov	sp, r7
   14b2c:	b004      	add	sp, #16
   14b2e:	bd80      	pop	{r7, pc}
   14b30:	00028451 	.word	0x00028451
   14b34:	000149c5 	.word	0x000149c5
   14b38:	00014a11 	.word	0x00014a11

00014b3c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   14b3c:	b580      	push	{r7, lr}
   14b3e:	b082      	sub	sp, #8
   14b40:	af00      	add	r7, sp, #0
   14b42:	6078      	str	r0, [r7, #4]
   14b44:	000a      	movs	r2, r1
   14b46:	1cfb      	adds	r3, r7, #3
   14b48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   14b4a:	687b      	ldr	r3, [r7, #4]
   14b4c:	2231      	movs	r2, #49	; 0x31
   14b4e:	5c9b      	ldrb	r3, [r3, r2]
   14b50:	b25a      	sxtb	r2, r3
   14b52:	1cfb      	adds	r3, r7, #3
   14b54:	781b      	ldrb	r3, [r3, #0]
   14b56:	2101      	movs	r1, #1
   14b58:	4099      	lsls	r1, r3
   14b5a:	000b      	movs	r3, r1
   14b5c:	b25b      	sxtb	r3, r3
   14b5e:	4313      	orrs	r3, r2
   14b60:	b25b      	sxtb	r3, r3
   14b62:	b2d9      	uxtb	r1, r3
   14b64:	687b      	ldr	r3, [r7, #4]
   14b66:	2231      	movs	r2, #49	; 0x31
   14b68:	5499      	strb	r1, [r3, r2]

}
   14b6a:	46c0      	nop			; (mov r8, r8)
   14b6c:	46bd      	mov	sp, r7
   14b6e:	b002      	add	sp, #8
   14b70:	bd80      	pop	{r7, pc}
	...

00014b74 <distUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
   14b74:	b580      	push	{r7, lr}
   14b76:	b084      	sub	sp, #16
   14b78:	af00      	add	r7, sp, #0
   14b7a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14b7c:	2300      	movs	r3, #0
   14b7e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   14b80:	4b09      	ldr	r3, [pc, #36]	; (14ba8 <distUsartWritecallback+0x34>)
   14b82:	681b      	ldr	r3, [r3, #0]
   14b84:	220c      	movs	r2, #12
   14b86:	18ba      	adds	r2, r7, r2
   14b88:	0011      	movs	r1, r2
   14b8a:	0018      	movs	r0, r3
   14b8c:	4b07      	ldr	r3, [pc, #28]	; (14bac <distUsartWritecallback+0x38>)
   14b8e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14b90:	68fb      	ldr	r3, [r7, #12]
   14b92:	2b00      	cmp	r3, #0
   14b94:	d003      	beq.n	14b9e <distUsartWritecallback+0x2a>
   14b96:	4b06      	ldr	r3, [pc, #24]	; (14bb0 <distUsartWritecallback+0x3c>)
   14b98:	2280      	movs	r2, #128	; 0x80
   14b9a:	0552      	lsls	r2, r2, #21
   14b9c:	601a      	str	r2, [r3, #0]
}
   14b9e:	46c0      	nop			; (mov r8, r8)
   14ba0:	46bd      	mov	sp, r7
   14ba2:	b004      	add	sp, #16
   14ba4:	bd80      	pop	{r7, pc}
   14ba6:	46c0      	nop			; (mov r8, r8)
   14ba8:	2000482c 	.word	0x2000482c
   14bac:	0001bbe5 	.word	0x0001bbe5
   14bb0:	e000ed04 	.word	0xe000ed04

00014bb4 <distUsartReadcallback>:
// Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
   14bb4:	b580      	push	{r7, lr}
   14bb6:	b084      	sub	sp, #16
   14bb8:	af00      	add	r7, sp, #0
   14bba:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14bbc:	2300      	movs	r3, #0
   14bbe:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   14bc0:	4b09      	ldr	r3, [pc, #36]	; (14be8 <distUsartReadcallback+0x34>)
   14bc2:	681b      	ldr	r3, [r3, #0]
   14bc4:	220c      	movs	r2, #12
   14bc6:	18ba      	adds	r2, r7, r2
   14bc8:	0011      	movs	r1, r2
   14bca:	0018      	movs	r0, r3
   14bcc:	4b07      	ldr	r3, [pc, #28]	; (14bec <distUsartReadcallback+0x38>)
   14bce:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14bd0:	68fb      	ldr	r3, [r7, #12]
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d003      	beq.n	14bde <distUsartReadcallback+0x2a>
   14bd6:	4b06      	ldr	r3, [pc, #24]	; (14bf0 <distUsartReadcallback+0x3c>)
   14bd8:	2280      	movs	r2, #128	; 0x80
   14bda:	0552      	lsls	r2, r2, #21
   14bdc:	601a      	str	r2, [r3, #0]
}
   14bde:	46c0      	nop			; (mov r8, r8)
   14be0:	46bd      	mov	sp, r7
   14be2:	b004      	add	sp, #16
   14be4:	bd80      	pop	{r7, pc}
   14be6:	46c0      	nop			; (mov r8, r8)
   14be8:	2000482c 	.word	0x2000482c
   14bec:	0001bbe5 	.word	0x0001bbe5
   14bf0:	e000ed04 	.word	0xe000ed04

00014bf4 <InitializeDistanceSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeDistanceSensor(void)
{
   14bf4:	b580      	push	{r7, lr}
   14bf6:	af00      	add	r7, sp, #0
    // Configure USART and Callbacks
    configure_usart();
   14bf8:	4b10      	ldr	r3, [pc, #64]	; (14c3c <InitializeDistanceSensor+0x48>)
   14bfa:	4798      	blx	r3
    configure_usart_callbacks();
   14bfc:	4b10      	ldr	r3, [pc, #64]	; (14c40 <InitializeDistanceSensor+0x4c>)
   14bfe:	4798      	blx	r3

    sensorDistanceMutexHandle = xSemaphoreCreateMutex();
   14c00:	2001      	movs	r0, #1
   14c02:	4b10      	ldr	r3, [pc, #64]	; (14c44 <InitializeDistanceSensor+0x50>)
   14c04:	4798      	blx	r3
   14c06:	0002      	movs	r2, r0
   14c08:	4b0f      	ldr	r3, [pc, #60]	; (14c48 <InitializeDistanceSensor+0x54>)
   14c0a:	601a      	str	r2, [r3, #0]
    sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
   14c0c:	2203      	movs	r2, #3
   14c0e:	2100      	movs	r1, #0
   14c10:	2001      	movs	r0, #1
   14c12:	4b0e      	ldr	r3, [pc, #56]	; (14c4c <InitializeDistanceSensor+0x58>)
   14c14:	4798      	blx	r3
   14c16:	0002      	movs	r2, r0
   14c18:	4b0d      	ldr	r3, [pc, #52]	; (14c50 <InitializeDistanceSensor+0x5c>)
   14c1a:	601a      	str	r2, [r3, #0]

    if (NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle) {
   14c1c:	4b0a      	ldr	r3, [pc, #40]	; (14c48 <InitializeDistanceSensor+0x54>)
   14c1e:	681b      	ldr	r3, [r3, #0]
   14c20:	2b00      	cmp	r3, #0
   14c22:	d003      	beq.n	14c2c <InitializeDistanceSensor+0x38>
   14c24:	4b0a      	ldr	r3, [pc, #40]	; (14c50 <InitializeDistanceSensor+0x5c>)
   14c26:	681b      	ldr	r3, [r3, #0]
   14c28:	2b00      	cmp	r3, #0
   14c2a:	d103      	bne.n	14c34 <InitializeDistanceSensor+0x40>
        SerialConsoleWriteString((char *)"Could not initialize Distance Sensor!");
   14c2c:	4b09      	ldr	r3, [pc, #36]	; (14c54 <InitializeDistanceSensor+0x60>)
   14c2e:	0018      	movs	r0, r3
   14c30:	4b09      	ldr	r3, [pc, #36]	; (14c58 <InitializeDistanceSensor+0x64>)
   14c32:	4798      	blx	r3
    }
}
   14c34:	46c0      	nop			; (mov r8, r8)
   14c36:	46bd      	mov	sp, r7
   14c38:	bd80      	pop	{r7, pc}
   14c3a:	46c0      	nop			; (mov r8, r8)
   14c3c:	00014d2d 	.word	0x00014d2d
   14c40:	00014da1 	.word	0x00014da1
   14c44:	0001b51d 	.word	0x0001b51d
   14c48:	20004830 	.word	0x20004830
   14c4c:	0001b2b5 	.word	0x0001b2b5
   14c50:	2000482c 	.word	0x2000482c
   14c54:	00037228 	.word	0x00037228
   14c58:	0001ec15 	.word	0x0001ec15

00014c5c <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   14c5c:	b580      	push	{r7, lr}
   14c5e:	b084      	sub	sp, #16
   14c60:	af00      	add	r7, sp, #0
   14c62:	6078      	str	r0, [r7, #4]
   14c64:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   14c66:	2300      	movs	r3, #0
   14c68:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   14c6a:	2396      	movs	r3, #150	; 0x96
   14c6c:	005b      	lsls	r3, r3, #1
   14c6e:	0018      	movs	r0, r3
   14c70:	4b25      	ldr	r3, [pc, #148]	; (14d08 <DistanceSensorGetDistance+0xac>)
   14c72:	4798      	blx	r3
   14c74:	0003      	movs	r3, r0
   14c76:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   14c78:	68fb      	ldr	r3, [r7, #12]
   14c7a:	2b00      	cmp	r3, #0
   14c7c:	d139      	bne.n	14cf2 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   14c7e:	4b23      	ldr	r3, [pc, #140]	; (14d0c <DistanceSensorGetDistance+0xb0>)
   14c80:	2255      	movs	r2, #85	; 0x55
   14c82:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   14c84:	4921      	ldr	r1, [pc, #132]	; (14d0c <DistanceSensorGetDistance+0xb0>)
   14c86:	4b22      	ldr	r3, [pc, #136]	; (14d10 <DistanceSensorGetDistance+0xb4>)
   14c88:	2201      	movs	r2, #1
   14c8a:	0018      	movs	r0, r3
   14c8c:	4b21      	ldr	r3, [pc, #132]	; (14d14 <DistanceSensorGetDistance+0xb8>)
   14c8e:	4798      	blx	r3
   14c90:	1e03      	subs	r3, r0, #0
   14c92:	d130      	bne.n	14cf6 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14c94:	4b20      	ldr	r3, [pc, #128]	; (14d18 <DistanceSensorGetDistance+0xbc>)
   14c96:	681b      	ldr	r3, [r3, #0]
   14c98:	683a      	ldr	r2, [r7, #0]
   14c9a:	0011      	movs	r1, r2
   14c9c:	0018      	movs	r0, r3
   14c9e:	4b1f      	ldr	r3, [pc, #124]	; (14d1c <DistanceSensorGetDistance+0xc0>)
   14ca0:	4798      	blx	r3
   14ca2:	0003      	movs	r3, r0
   14ca4:	2b01      	cmp	r3, #1
   14ca6:	d003      	beq.n	14cb0 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14ca8:	2303      	movs	r3, #3
   14caa:	425b      	negs	r3, r3
   14cac:	60fb      	str	r3, [r7, #12]
        goto exitf;
   14cae:	e023      	b.n	14cf8 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   14cb0:	491b      	ldr	r1, [pc, #108]	; (14d20 <DistanceSensorGetDistance+0xc4>)
   14cb2:	4b17      	ldr	r3, [pc, #92]	; (14d10 <DistanceSensorGetDistance+0xb4>)
   14cb4:	2202      	movs	r2, #2
   14cb6:	0018      	movs	r0, r3
   14cb8:	4b1a      	ldr	r3, [pc, #104]	; (14d24 <DistanceSensorGetDistance+0xc8>)
   14cba:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14cbc:	4b16      	ldr	r3, [pc, #88]	; (14d18 <DistanceSensorGetDistance+0xbc>)
   14cbe:	681b      	ldr	r3, [r3, #0]
   14cc0:	683a      	ldr	r2, [r7, #0]
   14cc2:	0011      	movs	r1, r2
   14cc4:	0018      	movs	r0, r3
   14cc6:	4b15      	ldr	r3, [pc, #84]	; (14d1c <DistanceSensorGetDistance+0xc0>)
   14cc8:	4798      	blx	r3
   14cca:	0003      	movs	r3, r0
   14ccc:	2b01      	cmp	r3, #1
   14cce:	d10c      	bne.n	14cea <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   14cd0:	4b13      	ldr	r3, [pc, #76]	; (14d20 <DistanceSensorGetDistance+0xc4>)
   14cd2:	781b      	ldrb	r3, [r3, #0]
   14cd4:	b29b      	uxth	r3, r3
   14cd6:	021b      	lsls	r3, r3, #8
   14cd8:	b29a      	uxth	r2, r3
   14cda:	4b11      	ldr	r3, [pc, #68]	; (14d20 <DistanceSensorGetDistance+0xc4>)
   14cdc:	785b      	ldrb	r3, [r3, #1]
   14cde:	b29b      	uxth	r3, r3
   14ce0:	18d3      	adds	r3, r2, r3
   14ce2:	b29a      	uxth	r2, r3
   14ce4:	687b      	ldr	r3, [r7, #4]
   14ce6:	801a      	strh	r2, [r3, #0]
   14ce8:	e006      	b.n	14cf8 <DistanceSensorGetDistance+0x9c>
		
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14cea:	2303      	movs	r3, #3
   14cec:	425b      	negs	r3, r3
   14cee:	60fb      	str	r3, [r7, #12]
        goto exitf;
   14cf0:	e002      	b.n	14cf8 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   14cf2:	46c0      	nop			; (mov r8, r8)
   14cf4:	e000      	b.n	14cf8 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   14cf6:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   14cf8:	4b0b      	ldr	r3, [pc, #44]	; (14d28 <DistanceSensorGetDistance+0xcc>)
   14cfa:	4798      	blx	r3

    return error;
   14cfc:	68fb      	ldr	r3, [r7, #12]
}
   14cfe:	0018      	movs	r0, r3
   14d00:	46bd      	mov	sp, r7
   14d02:	b004      	add	sp, #16
   14d04:	bd80      	pop	{r7, pc}
   14d06:	46c0      	nop			; (mov r8, r8)
   14d08:	00014e25 	.word	0x00014e25
   14d0c:	2000482a 	.word	0x2000482a
   14d10:	20004834 	.word	0x20004834
   14d14:	00029cb1 	.word	0x00029cb1
   14d18:	2000482c 	.word	0x2000482c
   14d1c:	0001c26d 	.word	0x0001c26d
   14d20:	20004828 	.word	0x20004828
   14d24:	00029cf9 	.word	0x00029cf9
   14d28:	00014ded 	.word	0x00014ded

00014d2c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   14d2c:	b580      	push	{r7, lr}
   14d2e:	b090      	sub	sp, #64	; 0x40
   14d30:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   14d32:	003b      	movs	r3, r7
   14d34:	0018      	movs	r0, r3
   14d36:	4b13      	ldr	r3, [pc, #76]	; (14d84 <configure_usart+0x58>)
   14d38:	4798      	blx	r3

    config_usart.baudrate = 9600;
   14d3a:	003b      	movs	r3, r7
   14d3c:	2296      	movs	r2, #150	; 0x96
   14d3e:	0192      	lsls	r2, r2, #6
   14d40:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   14d42:	003b      	movs	r3, r7
   14d44:	2280      	movs	r2, #128	; 0x80
   14d46:	0352      	lsls	r2, r2, #13
   14d48:	60da      	str	r2, [r3, #12]
    //config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
	config_usart.pinmux_pad0 = PINMUX_PB10D_SERCOM4_PAD2;
   14d4a:	003b      	movs	r3, r7
   14d4c:	4a0e      	ldr	r2, [pc, #56]	; (14d88 <configure_usart+0x5c>)
   14d4e:	631a      	str	r2, [r3, #48]	; 0x30
    //config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
	config_usart.pinmux_pad1 =  PINMUX_PB11D_SERCOM4_PAD3;
   14d50:	003b      	movs	r3, r7
   14d52:	4a0e      	ldr	r2, [pc, #56]	; (14d8c <configure_usart+0x60>)
   14d54:	635a      	str	r2, [r3, #52]	; 0x34
    //config_usart.pinmux_pad2 = PINMUX_UNUSED;
    //config_usart.pinmux_pad3 = PINMUX_UNUSED;
	config_usart.pinmux_pad2 = PINMUX_PB10D_SERCOM4_PAD2;
   14d56:	003b      	movs	r3, r7
   14d58:	4a0b      	ldr	r2, [pc, #44]	; (14d88 <configure_usart+0x5c>)
   14d5a:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_PB11D_SERCOM4_PAD3;
   14d5c:	003b      	movs	r3, r7
   14d5e:	4a0b      	ldr	r2, [pc, #44]	; (14d8c <configure_usart+0x60>)
   14d60:	63da      	str	r2, [r3, #60]	; 0x3c
	//SERCOM5
    while (usart_init(&usart_instance_dist, SERCOM4, &config_usart) != STATUS_OK) {
   14d62:	46c0      	nop			; (mov r8, r8)
   14d64:	003a      	movs	r2, r7
   14d66:	490a      	ldr	r1, [pc, #40]	; (14d90 <configure_usart+0x64>)
   14d68:	4b0a      	ldr	r3, [pc, #40]	; (14d94 <configure_usart+0x68>)
   14d6a:	0018      	movs	r0, r3
   14d6c:	4b0a      	ldr	r3, [pc, #40]	; (14d98 <configure_usart+0x6c>)
   14d6e:	4798      	blx	r3
   14d70:	1e03      	subs	r3, r0, #0
   14d72:	d1f7      	bne.n	14d64 <configure_usart+0x38>
    }

    usart_enable(&usart_instance_dist);
   14d74:	4b07      	ldr	r3, [pc, #28]	; (14d94 <configure_usart+0x68>)
   14d76:	0018      	movs	r0, r3
   14d78:	4b08      	ldr	r3, [pc, #32]	; (14d9c <configure_usart+0x70>)
   14d7a:	4798      	blx	r3
}
   14d7c:	46c0      	nop			; (mov r8, r8)
   14d7e:	46bd      	mov	sp, r7
   14d80:	b010      	add	sp, #64	; 0x40
   14d82:	bd80      	pop	{r7, pc}
   14d84:	00014a35 	.word	0x00014a35
   14d88:	002a0003 	.word	0x002a0003
   14d8c:	002b0003 	.word	0x002b0003
   14d90:	42001800 	.word	0x42001800
   14d94:	20004834 	.word	0x20004834
   14d98:	000298b5 	.word	0x000298b5
   14d9c:	00014af5 	.word	0x00014af5

00014da0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   14da0:	b580      	push	{r7, lr}
   14da2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance_dist, distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   14da4:	490c      	ldr	r1, [pc, #48]	; (14dd8 <configure_usart_callbacks+0x38>)
   14da6:	4b0d      	ldr	r3, [pc, #52]	; (14ddc <configure_usart_callbacks+0x3c>)
   14da8:	2200      	movs	r2, #0
   14daa:	0018      	movs	r0, r3
   14dac:	4b0c      	ldr	r3, [pc, #48]	; (14de0 <configure_usart_callbacks+0x40>)
   14dae:	4798      	blx	r3
    usart_register_callback(&usart_instance_dist, distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
   14db0:	490c      	ldr	r1, [pc, #48]	; (14de4 <configure_usart_callbacks+0x44>)
   14db2:	4b0a      	ldr	r3, [pc, #40]	; (14ddc <configure_usart_callbacks+0x3c>)
   14db4:	2201      	movs	r2, #1
   14db6:	0018      	movs	r0, r3
   14db8:	4b09      	ldr	r3, [pc, #36]	; (14de0 <configure_usart_callbacks+0x40>)
   14dba:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_TRANSMITTED);
   14dbc:	4b07      	ldr	r3, [pc, #28]	; (14ddc <configure_usart_callbacks+0x3c>)
   14dbe:	2100      	movs	r1, #0
   14dc0:	0018      	movs	r0, r3
   14dc2:	4b09      	ldr	r3, [pc, #36]	; (14de8 <configure_usart_callbacks+0x48>)
   14dc4:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_RECEIVED);
   14dc6:	4b05      	ldr	r3, [pc, #20]	; (14ddc <configure_usart_callbacks+0x3c>)
   14dc8:	2101      	movs	r1, #1
   14dca:	0018      	movs	r0, r3
   14dcc:	4b06      	ldr	r3, [pc, #24]	; (14de8 <configure_usart_callbacks+0x48>)
   14dce:	4798      	blx	r3
}
   14dd0:	46c0      	nop			; (mov r8, r8)
   14dd2:	46bd      	mov	sp, r7
   14dd4:	bd80      	pop	{r7, pc}
   14dd6:	46c0      	nop			; (mov r8, r8)
   14dd8:	00014b75 	.word	0x00014b75
   14ddc:	20004834 	.word	0x20004834
   14de0:	00029c69 	.word	0x00029c69
   14de4:	00014bb5 	.word	0x00014bb5
   14de8:	00014b3d 	.word	0x00014b3d

00014dec <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   14dec:	b590      	push	{r4, r7, lr}
   14dee:	b083      	sub	sp, #12
   14df0:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14df2:	2300      	movs	r3, #0
   14df4:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   14df6:	4b09      	ldr	r3, [pc, #36]	; (14e1c <DistanceSensorFreeMutex+0x30>)
   14df8:	6818      	ldr	r0, [r3, #0]
   14dfa:	2300      	movs	r3, #0
   14dfc:	2200      	movs	r2, #0
   14dfe:	2100      	movs	r1, #0
   14e00:	4c07      	ldr	r4, [pc, #28]	; (14e20 <DistanceSensorFreeMutex+0x34>)
   14e02:	47a0      	blx	r4
   14e04:	0003      	movs	r3, r0
   14e06:	2b01      	cmp	r3, #1
   14e08:	d002      	beq.n	14e10 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14e0a:	2314      	movs	r3, #20
   14e0c:	425b      	negs	r3, r3
   14e0e:	607b      	str	r3, [r7, #4]
    }
    return error;
   14e10:	687b      	ldr	r3, [r7, #4]
}
   14e12:	0018      	movs	r0, r3
   14e14:	46bd      	mov	sp, r7
   14e16:	b003      	add	sp, #12
   14e18:	bd90      	pop	{r4, r7, pc}
   14e1a:	46c0      	nop			; (mov r8, r8)
   14e1c:	20004830 	.word	0x20004830
   14e20:	0001b55d 	.word	0x0001b55d

00014e24 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   14e24:	b580      	push	{r7, lr}
   14e26:	b084      	sub	sp, #16
   14e28:	af00      	add	r7, sp, #0
   14e2a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14e2c:	2300      	movs	r3, #0
   14e2e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   14e30:	4b08      	ldr	r3, [pc, #32]	; (14e54 <DistanceSensorGetMutex+0x30>)
   14e32:	681b      	ldr	r3, [r3, #0]
   14e34:	687a      	ldr	r2, [r7, #4]
   14e36:	0011      	movs	r1, r2
   14e38:	0018      	movs	r0, r3
   14e3a:	4b07      	ldr	r3, [pc, #28]	; (14e58 <DistanceSensorGetMutex+0x34>)
   14e3c:	4798      	blx	r3
   14e3e:	0003      	movs	r3, r0
   14e40:	2b01      	cmp	r3, #1
   14e42:	d002      	beq.n	14e4a <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14e44:	231d      	movs	r3, #29
   14e46:	425b      	negs	r3, r3
   14e48:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14e4a:	68fb      	ldr	r3, [r7, #12]
   14e4c:	0018      	movs	r0, r3
   14e4e:	46bd      	mov	sp, r7
   14e50:	b004      	add	sp, #16
   14e52:	bd80      	pop	{r7, pc}
   14e54:	20004830 	.word	0x20004830
   14e58:	0001c26d 	.word	0x0001c26d

00014e5c <system_interrupt_enable>:
{
   14e5c:	b580      	push	{r7, lr}
   14e5e:	b082      	sub	sp, #8
   14e60:	af00      	add	r7, sp, #0
   14e62:	0002      	movs	r2, r0
   14e64:	1dfb      	adds	r3, r7, #7
   14e66:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14e68:	4b06      	ldr	r3, [pc, #24]	; (14e84 <system_interrupt_enable+0x28>)
   14e6a:	1dfa      	adds	r2, r7, #7
   14e6c:	7812      	ldrb	r2, [r2, #0]
   14e6e:	0011      	movs	r1, r2
   14e70:	221f      	movs	r2, #31
   14e72:	400a      	ands	r2, r1
   14e74:	2101      	movs	r1, #1
   14e76:	4091      	lsls	r1, r2
   14e78:	000a      	movs	r2, r1
   14e7a:	601a      	str	r2, [r3, #0]
}
   14e7c:	46c0      	nop			; (mov r8, r8)
   14e7e:	46bd      	mov	sp, r7
   14e80:	b002      	add	sp, #8
   14e82:	bd80      	pop	{r7, pc}
   14e84:	e000e100 	.word	0xe000e100

00014e88 <i2c_master_is_syncing>:
{
   14e88:	b580      	push	{r7, lr}
   14e8a:	b084      	sub	sp, #16
   14e8c:	af00      	add	r7, sp, #0
   14e8e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14e90:	687b      	ldr	r3, [r7, #4]
   14e92:	681b      	ldr	r3, [r3, #0]
   14e94:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14e96:	68fb      	ldr	r3, [r7, #12]
   14e98:	69db      	ldr	r3, [r3, #28]
   14e9a:	2207      	movs	r2, #7
   14e9c:	4013      	ands	r3, r2
   14e9e:	1e5a      	subs	r2, r3, #1
   14ea0:	4193      	sbcs	r3, r2
   14ea2:	b2db      	uxtb	r3, r3
}
   14ea4:	0018      	movs	r0, r3
   14ea6:	46bd      	mov	sp, r7
   14ea8:	b004      	add	sp, #16
   14eaa:	bd80      	pop	{r7, pc}

00014eac <_i2c_master_wait_for_sync>:
{
   14eac:	b580      	push	{r7, lr}
   14eae:	b082      	sub	sp, #8
   14eb0:	af00      	add	r7, sp, #0
   14eb2:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   14eb4:	46c0      	nop			; (mov r8, r8)
   14eb6:	687b      	ldr	r3, [r7, #4]
   14eb8:	0018      	movs	r0, r3
   14eba:	4b04      	ldr	r3, [pc, #16]	; (14ecc <_i2c_master_wait_for_sync+0x20>)
   14ebc:	4798      	blx	r3
   14ebe:	1e03      	subs	r3, r0, #0
   14ec0:	d1f9      	bne.n	14eb6 <_i2c_master_wait_for_sync+0xa>
}
   14ec2:	46c0      	nop			; (mov r8, r8)
   14ec4:	46bd      	mov	sp, r7
   14ec6:	b002      	add	sp, #8
   14ec8:	bd80      	pop	{r7, pc}
   14eca:	46c0      	nop			; (mov r8, r8)
   14ecc:	00014e89 	.word	0x00014e89

00014ed0 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   14ed0:	b580      	push	{r7, lr}
   14ed2:	b082      	sub	sp, #8
   14ed4:	af00      	add	r7, sp, #0
   14ed6:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14ed8:	687b      	ldr	r3, [r7, #4]
   14eda:	2264      	movs	r2, #100	; 0x64
   14edc:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   14ede:	687b      	ldr	r3, [r7, #4]
   14ee0:	4a1b      	ldr	r2, [pc, #108]	; (14f50 <i2c_master_get_config_defaults+0x80>)
   14ee2:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14ee4:	687b      	ldr	r3, [r7, #4]
   14ee6:	2200      	movs	r2, #0
   14ee8:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14eea:	687b      	ldr	r3, [r7, #4]
   14eec:	2200      	movs	r2, #0
   14eee:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14ef0:	687b      	ldr	r3, [r7, #4]
   14ef2:	2200      	movs	r2, #0
   14ef4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   14ef6:	687b      	ldr	r3, [r7, #4]
   14ef8:	2280      	movs	r2, #128	; 0x80
   14efa:	0392      	lsls	r2, r2, #14
   14efc:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   14efe:	687b      	ldr	r3, [r7, #4]
   14f00:	2201      	movs	r2, #1
   14f02:	4252      	negs	r2, r2
   14f04:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14f06:	687b      	ldr	r3, [r7, #4]
   14f08:	2201      	movs	r2, #1
   14f0a:	4252      	negs	r2, r2
   14f0c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14f0e:	687b      	ldr	r3, [r7, #4]
   14f10:	2200      	movs	r2, #0
   14f12:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14f14:	687b      	ldr	r3, [r7, #4]
   14f16:	2200      	movs	r2, #0
   14f18:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14f1a:	687b      	ldr	r3, [r7, #4]
   14f1c:	2224      	movs	r2, #36	; 0x24
   14f1e:	2100      	movs	r1, #0
   14f20:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   14f22:	687b      	ldr	r3, [r7, #4]
   14f24:	2200      	movs	r2, #0
   14f26:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14f28:	687b      	ldr	r3, [r7, #4]
   14f2a:	222c      	movs	r2, #44	; 0x2c
   14f2c:	2100      	movs	r1, #0
   14f2e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14f30:	687b      	ldr	r3, [r7, #4]
   14f32:	222d      	movs	r2, #45	; 0x2d
   14f34:	2100      	movs	r1, #0
   14f36:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14f38:	687b      	ldr	r3, [r7, #4]
   14f3a:	222e      	movs	r2, #46	; 0x2e
   14f3c:	2100      	movs	r1, #0
   14f3e:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14f40:	687b      	ldr	r3, [r7, #4]
   14f42:	22d7      	movs	r2, #215	; 0xd7
   14f44:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14f46:	46c0      	nop			; (mov r8, r8)
   14f48:	46bd      	mov	sp, r7
   14f4a:	b002      	add	sp, #8
   14f4c:	bd80      	pop	{r7, pc}
   14f4e:	46c0      	nop			; (mov r8, r8)
   14f50:	00000d48 	.word	0x00000d48

00014f54 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14f54:	b580      	push	{r7, lr}
   14f56:	b084      	sub	sp, #16
   14f58:	af00      	add	r7, sp, #0
   14f5a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14f5c:	687b      	ldr	r3, [r7, #4]
   14f5e:	681b      	ldr	r3, [r3, #0]
   14f60:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14f62:	2300      	movs	r3, #0
   14f64:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14f66:	687b      	ldr	r3, [r7, #4]
   14f68:	0018      	movs	r0, r3
   14f6a:	4b14      	ldr	r3, [pc, #80]	; (14fbc <i2c_master_enable+0x68>)
   14f6c:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14f6e:	68bb      	ldr	r3, [r7, #8]
   14f70:	681b      	ldr	r3, [r3, #0]
   14f72:	2202      	movs	r2, #2
   14f74:	431a      	orrs	r2, r3
   14f76:	68bb      	ldr	r3, [r7, #8]
   14f78:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14f7a:	687b      	ldr	r3, [r7, #4]
   14f7c:	681b      	ldr	r3, [r3, #0]
   14f7e:	0018      	movs	r0, r3
   14f80:	4b0f      	ldr	r3, [pc, #60]	; (14fc0 <i2c_master_enable+0x6c>)
   14f82:	4798      	blx	r3
   14f84:	0003      	movs	r3, r0
   14f86:	0018      	movs	r0, r3
   14f88:	4b0e      	ldr	r3, [pc, #56]	; (14fc4 <i2c_master_enable+0x70>)
   14f8a:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14f8c:	e00c      	b.n	14fa8 <i2c_master_enable+0x54>
		timeout_counter++;
   14f8e:	68fb      	ldr	r3, [r7, #12]
   14f90:	3301      	adds	r3, #1
   14f92:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14f94:	687b      	ldr	r3, [r7, #4]
   14f96:	88db      	ldrh	r3, [r3, #6]
   14f98:	001a      	movs	r2, r3
   14f9a:	68fb      	ldr	r3, [r7, #12]
   14f9c:	429a      	cmp	r2, r3
   14f9e:	d803      	bhi.n	14fa8 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14fa0:	68bb      	ldr	r3, [r7, #8]
   14fa2:	2210      	movs	r2, #16
   14fa4:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14fa6:	e006      	b.n	14fb6 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14fa8:	68bb      	ldr	r3, [r7, #8]
   14faa:	8b5b      	ldrh	r3, [r3, #26]
   14fac:	b29b      	uxth	r3, r3
   14fae:	001a      	movs	r2, r3
   14fb0:	2310      	movs	r3, #16
   14fb2:	4013      	ands	r3, r2
   14fb4:	d0eb      	beq.n	14f8e <i2c_master_enable+0x3a>
		}
	}
}
   14fb6:	46bd      	mov	sp, r7
   14fb8:	b004      	add	sp, #16
   14fba:	bd80      	pop	{r7, pc}
   14fbc:	00014ead 	.word	0x00014ead
   14fc0:	00028451 	.word	0x00028451
   14fc4:	00014e5d 	.word	0x00014e5d

00014fc8 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14fc8:	b580      	push	{r7, lr}
   14fca:	b082      	sub	sp, #8
   14fcc:	af00      	add	r7, sp, #0
   14fce:	6078      	str	r0, [r7, #4]
   14fd0:	000a      	movs	r2, r1
   14fd2:	1cfb      	adds	r3, r7, #3
   14fd4:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14fd6:	687b      	ldr	r3, [r7, #4]
   14fd8:	7e5b      	ldrb	r3, [r3, #25]
   14fda:	b2db      	uxtb	r3, r3
   14fdc:	b25a      	sxtb	r2, r3
   14fde:	1cfb      	adds	r3, r7, #3
   14fe0:	781b      	ldrb	r3, [r3, #0]
   14fe2:	2101      	movs	r1, #1
   14fe4:	4099      	lsls	r1, r3
   14fe6:	000b      	movs	r3, r1
   14fe8:	b25b      	sxtb	r3, r3
   14fea:	4313      	orrs	r3, r2
   14fec:	b25b      	sxtb	r3, r3
   14fee:	b2da      	uxtb	r2, r3
   14ff0:	687b      	ldr	r3, [r7, #4]
   14ff2:	765a      	strb	r2, [r3, #25]
}
   14ff4:	46c0      	nop			; (mov r8, r8)
   14ff6:	46bd      	mov	sp, r7
   14ff8:	b002      	add	sp, #8
   14ffa:	bd80      	pop	{r7, pc}

00014ffc <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14ffc:	b590      	push	{r4, r7, lr}
   14ffe:	b091      	sub	sp, #68	; 0x44
   15000:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   15002:	2300      	movs	r3, #0
   15004:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   15006:	233a      	movs	r3, #58	; 0x3a
   15008:	18fb      	adds	r3, r7, r3
   1500a:	2200      	movs	r2, #0
   1500c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   1500e:	1d3b      	adds	r3, r7, #4
   15010:	0018      	movs	r0, r3
   15012:	4b21      	ldr	r3, [pc, #132]	; (15098 <I2cDriverConfigureSensorBus+0x9c>)
   15014:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   15016:	1d3b      	adds	r3, r7, #4
   15018:	4a20      	ldr	r2, [pc, #128]	; (1509c <I2cDriverConfigureSensorBus+0xa0>)
   1501a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   1501c:	1d3b      	adds	r3, r7, #4
   1501e:	4a20      	ldr	r2, [pc, #128]	; (150a0 <I2cDriverConfigureSensorBus+0xa4>)
   15020:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   15022:	1d3b      	adds	r3, r7, #4
   15024:	22fa      	movs	r2, #250	; 0xfa
   15026:	0092      	lsls	r2, r2, #2
   15028:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   1502a:	233b      	movs	r3, #59	; 0x3b
   1502c:	18fb      	adds	r3, r7, r3
   1502e:	2203      	movs	r2, #3
   15030:	701a      	strb	r2, [r3, #0]
   15032:	e01e      	b.n	15072 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   15034:	233a      	movs	r3, #58	; 0x3a
   15036:	18fc      	adds	r4, r7, r3
   15038:	1d3a      	adds	r2, r7, #4
   1503a:	491a      	ldr	r1, [pc, #104]	; (150a4 <I2cDriverConfigureSensorBus+0xa8>)
   1503c:	4b1a      	ldr	r3, [pc, #104]	; (150a8 <I2cDriverConfigureSensorBus+0xac>)
   1503e:	0018      	movs	r0, r3
   15040:	4b1a      	ldr	r3, [pc, #104]	; (150ac <I2cDriverConfigureSensorBus+0xb0>)
   15042:	4798      	blx	r3
   15044:	0003      	movs	r3, r0
   15046:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   15048:	233a      	movs	r3, #58	; 0x3a
   1504a:	18fb      	adds	r3, r7, r3
   1504c:	781b      	ldrb	r3, [r3, #0]
   1504e:	2b00      	cmp	r3, #0
   15050:	d104      	bne.n	1505c <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   15052:	233a      	movs	r3, #58	; 0x3a
   15054:	18fb      	adds	r3, r7, r3
   15056:	781b      	ldrb	r3, [r3, #0]
   15058:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   1505a:	e00f      	b.n	1507c <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   1505c:	4b12      	ldr	r3, [pc, #72]	; (150a8 <I2cDriverConfigureSensorBus+0xac>)
   1505e:	0018      	movs	r0, r3
   15060:	4b13      	ldr	r3, [pc, #76]	; (150b0 <I2cDriverConfigureSensorBus+0xb4>)
   15062:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   15064:	233b      	movs	r3, #59	; 0x3b
   15066:	18fb      	adds	r3, r7, r3
   15068:	781a      	ldrb	r2, [r3, #0]
   1506a:	233b      	movs	r3, #59	; 0x3b
   1506c:	18fb      	adds	r3, r7, r3
   1506e:	3a01      	subs	r2, #1
   15070:	701a      	strb	r2, [r3, #0]
   15072:	233b      	movs	r3, #59	; 0x3b
   15074:	18fb      	adds	r3, r7, r3
   15076:	781b      	ldrb	r3, [r3, #0]
   15078:	2b00      	cmp	r3, #0
   1507a:	d1db      	bne.n	15034 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   1507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1507e:	2b00      	cmp	r3, #0
   15080:	d104      	bne.n	1508c <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   15082:	4b09      	ldr	r3, [pc, #36]	; (150a8 <I2cDriverConfigureSensorBus+0xac>)
   15084:	0018      	movs	r0, r3
   15086:	4b0b      	ldr	r3, [pc, #44]	; (150b4 <I2cDriverConfigureSensorBus+0xb8>)
   15088:	4798      	blx	r3
   1508a:	e000      	b.n	1508e <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   1508c:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   1508e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   15090:	0018      	movs	r0, r3
   15092:	46bd      	mov	sp, r7
   15094:	b011      	add	sp, #68	; 0x44
   15096:	bd90      	pop	{r4, r7, pc}
   15098:	00014ed1 	.word	0x00014ed1
   1509c:	00080002 	.word	0x00080002
   150a0:	00090002 	.word	0x00090002
   150a4:	42000800 	.word	0x42000800
   150a8:	2000486c 	.word	0x2000486c
   150ac:	0001894d 	.word	0x0001894d
   150b0:	00018a81 	.word	0x00018a81
   150b4:	00014f55 	.word	0x00014f55

000150b8 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   150b8:	b580      	push	{r7, lr}
   150ba:	b084      	sub	sp, #16
   150bc:	af00      	add	r7, sp, #0
   150be:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   150c0:	4b0e      	ldr	r3, [pc, #56]	; (150fc <I2cSensorsTxComplete+0x44>)
   150c2:	2200      	movs	r2, #0
   150c4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   150c6:	4b0d      	ldr	r3, [pc, #52]	; (150fc <I2cSensorsTxComplete+0x44>)
   150c8:	2201      	movs	r2, #1
   150ca:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   150cc:	2300      	movs	r3, #0
   150ce:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   150d0:	4b0b      	ldr	r3, [pc, #44]	; (15100 <I2cSensorsTxComplete+0x48>)
   150d2:	681b      	ldr	r3, [r3, #0]
   150d4:	220c      	movs	r2, #12
   150d6:	18ba      	adds	r2, r7, r2
   150d8:	0011      	movs	r1, r2
   150da:	0018      	movs	r0, r3
   150dc:	4b09      	ldr	r3, [pc, #36]	; (15104 <I2cSensorsTxComplete+0x4c>)
   150de:	4798      	blx	r3
    sensorTransmitError = false;
   150e0:	4b09      	ldr	r3, [pc, #36]	; (15108 <I2cSensorsTxComplete+0x50>)
   150e2:	2200      	movs	r2, #0
   150e4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   150e6:	68fb      	ldr	r3, [r7, #12]
   150e8:	2b00      	cmp	r3, #0
   150ea:	d003      	beq.n	150f4 <I2cSensorsTxComplete+0x3c>
   150ec:	4b07      	ldr	r3, [pc, #28]	; (1510c <I2cSensorsTxComplete+0x54>)
   150ee:	2280      	movs	r2, #128	; 0x80
   150f0:	0552      	lsls	r2, r2, #21
   150f2:	601a      	str	r2, [r3, #0]
}
   150f4:	46c0      	nop			; (mov r8, r8)
   150f6:	46bd      	mov	sp, r7
   150f8:	b004      	add	sp, #16
   150fa:	bd80      	pop	{r7, pc}
   150fc:	2000060c 	.word	0x2000060c
   15100:	20004894 	.word	0x20004894
   15104:	0001bbe5 	.word	0x0001bbe5
   15108:	20000608 	.word	0x20000608
   1510c:	e000ed04 	.word	0xe000ed04

00015110 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   15110:	b580      	push	{r7, lr}
   15112:	b084      	sub	sp, #16
   15114:	af00      	add	r7, sp, #0
   15116:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   15118:	4b0e      	ldr	r3, [pc, #56]	; (15154 <I2cSensorsRxComplete+0x44>)
   1511a:	2200      	movs	r2, #0
   1511c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   1511e:	4b0d      	ldr	r3, [pc, #52]	; (15154 <I2cSensorsRxComplete+0x44>)
   15120:	2201      	movs	r2, #1
   15122:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15124:	2300      	movs	r3, #0
   15126:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   15128:	4b0b      	ldr	r3, [pc, #44]	; (15158 <I2cSensorsRxComplete+0x48>)
   1512a:	681b      	ldr	r3, [r3, #0]
   1512c:	220c      	movs	r2, #12
   1512e:	18ba      	adds	r2, r7, r2
   15130:	0011      	movs	r1, r2
   15132:	0018      	movs	r0, r3
   15134:	4b09      	ldr	r3, [pc, #36]	; (1515c <I2cSensorsRxComplete+0x4c>)
   15136:	4798      	blx	r3
    sensorTransmitError = false;
   15138:	4b09      	ldr	r3, [pc, #36]	; (15160 <I2cSensorsRxComplete+0x50>)
   1513a:	2200      	movs	r2, #0
   1513c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1513e:	68fb      	ldr	r3, [r7, #12]
   15140:	2b00      	cmp	r3, #0
   15142:	d003      	beq.n	1514c <I2cSensorsRxComplete+0x3c>
   15144:	4b07      	ldr	r3, [pc, #28]	; (15164 <I2cSensorsRxComplete+0x54>)
   15146:	2280      	movs	r2, #128	; 0x80
   15148:	0552      	lsls	r2, r2, #21
   1514a:	601a      	str	r2, [r3, #0]
}
   1514c:	46c0      	nop			; (mov r8, r8)
   1514e:	46bd      	mov	sp, r7
   15150:	b004      	add	sp, #16
   15152:	bd80      	pop	{r7, pc}
   15154:	2000060c 	.word	0x2000060c
   15158:	20004894 	.word	0x20004894
   1515c:	0001bbe5 	.word	0x0001bbe5
   15160:	20000608 	.word	0x20000608
   15164:	e000ed04 	.word	0xe000ed04

00015168 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   15168:	b580      	push	{r7, lr}
   1516a:	b084      	sub	sp, #16
   1516c:	af00      	add	r7, sp, #0
   1516e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   15170:	4b0e      	ldr	r3, [pc, #56]	; (151ac <I2cSensorsError+0x44>)
   15172:	2200      	movs	r2, #0
   15174:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   15176:	4b0d      	ldr	r3, [pc, #52]	; (151ac <I2cSensorsError+0x44>)
   15178:	2201      	movs	r2, #1
   1517a:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   1517c:	2300      	movs	r3, #0
   1517e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   15180:	4b0b      	ldr	r3, [pc, #44]	; (151b0 <I2cSensorsError+0x48>)
   15182:	681b      	ldr	r3, [r3, #0]
   15184:	220c      	movs	r2, #12
   15186:	18ba      	adds	r2, r7, r2
   15188:	0011      	movs	r1, r2
   1518a:	0018      	movs	r0, r3
   1518c:	4b09      	ldr	r3, [pc, #36]	; (151b4 <I2cSensorsError+0x4c>)
   1518e:	4798      	blx	r3
    sensorTransmitError = true;
   15190:	4b09      	ldr	r3, [pc, #36]	; (151b8 <I2cSensorsError+0x50>)
   15192:	2201      	movs	r2, #1
   15194:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   15196:	68fb      	ldr	r3, [r7, #12]
   15198:	2b00      	cmp	r3, #0
   1519a:	d003      	beq.n	151a4 <I2cSensorsError+0x3c>
   1519c:	4b07      	ldr	r3, [pc, #28]	; (151bc <I2cSensorsError+0x54>)
   1519e:	2280      	movs	r2, #128	; 0x80
   151a0:	0552      	lsls	r2, r2, #21
   151a2:	601a      	str	r2, [r3, #0]
}
   151a4:	46c0      	nop			; (mov r8, r8)
   151a6:	46bd      	mov	sp, r7
   151a8:	b004      	add	sp, #16
   151aa:	bd80      	pop	{r7, pc}
   151ac:	2000060c 	.word	0x2000060c
   151b0:	20004894 	.word	0x20004894
   151b4:	0001bbe5 	.word	0x0001bbe5
   151b8:	20000608 	.word	0x20000608
   151bc:	e000ed04 	.word	0xe000ed04

000151c0 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   151c0:	b580      	push	{r7, lr}
   151c2:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   151c4:	4911      	ldr	r1, [pc, #68]	; (1520c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   151c6:	4b12      	ldr	r3, [pc, #72]	; (15210 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   151c8:	2200      	movs	r2, #0
   151ca:	0018      	movs	r0, r3
   151cc:	4b11      	ldr	r3, [pc, #68]	; (15214 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   151ce:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   151d0:	4b0f      	ldr	r3, [pc, #60]	; (15210 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   151d2:	2100      	movs	r1, #0
   151d4:	0018      	movs	r0, r3
   151d6:	4b10      	ldr	r3, [pc, #64]	; (15218 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   151d8:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   151da:	4910      	ldr	r1, [pc, #64]	; (1521c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   151dc:	4b0c      	ldr	r3, [pc, #48]	; (15210 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   151de:	2201      	movs	r2, #1
   151e0:	0018      	movs	r0, r3
   151e2:	4b0c      	ldr	r3, [pc, #48]	; (15214 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   151e4:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   151e6:	4b0a      	ldr	r3, [pc, #40]	; (15210 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   151e8:	2101      	movs	r1, #1
   151ea:	0018      	movs	r0, r3
   151ec:	4b0a      	ldr	r3, [pc, #40]	; (15218 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   151ee:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   151f0:	490b      	ldr	r1, [pc, #44]	; (15220 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   151f2:	4b07      	ldr	r3, [pc, #28]	; (15210 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   151f4:	2202      	movs	r2, #2
   151f6:	0018      	movs	r0, r3
   151f8:	4b06      	ldr	r3, [pc, #24]	; (15214 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   151fa:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   151fc:	4b04      	ldr	r3, [pc, #16]	; (15210 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   151fe:	2102      	movs	r1, #2
   15200:	0018      	movs	r0, r3
   15202:	4b05      	ldr	r3, [pc, #20]	; (15218 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15204:	4798      	blx	r3
}
   15206:	46c0      	nop			; (mov r8, r8)
   15208:	46bd      	mov	sp, r7
   1520a:	bd80      	pop	{r7, pc}
   1520c:	000150b9 	.word	0x000150b9
   15210:	2000486c 	.word	0x2000486c
   15214:	00013b39 	.word	0x00013b39
   15218:	00014fc9 	.word	0x00014fc9
   1521c:	00015111 	.word	0x00015111
   15220:	00015169 	.word	0x00015169

00015224 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   15224:	b580      	push	{r7, lr}
   15226:	b082      	sub	sp, #8
   15228:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1522a:	2300      	movs	r3, #0
   1522c:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   1522e:	4b14      	ldr	r3, [pc, #80]	; (15280 <I2cInitializeDriver+0x5c>)
   15230:	4798      	blx	r3
   15232:	0003      	movs	r3, r0
   15234:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   15236:	687b      	ldr	r3, [r7, #4]
   15238:	2b00      	cmp	r3, #0
   1523a:	d11a      	bne.n	15272 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   1523c:	4b11      	ldr	r3, [pc, #68]	; (15284 <I2cInitializeDriver+0x60>)
   1523e:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   15240:	2001      	movs	r0, #1
   15242:	4b11      	ldr	r3, [pc, #68]	; (15288 <I2cInitializeDriver+0x64>)
   15244:	4798      	blx	r3
   15246:	0002      	movs	r2, r0
   15248:	4b10      	ldr	r3, [pc, #64]	; (1528c <I2cInitializeDriver+0x68>)
   1524a:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   1524c:	2203      	movs	r2, #3
   1524e:	2100      	movs	r1, #0
   15250:	2001      	movs	r0, #1
   15252:	4b0f      	ldr	r3, [pc, #60]	; (15290 <I2cInitializeDriver+0x6c>)
   15254:	4798      	blx	r3
   15256:	0002      	movs	r2, r0
   15258:	4b0e      	ldr	r3, [pc, #56]	; (15294 <I2cInitializeDriver+0x70>)
   1525a:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   1525c:	4b0b      	ldr	r3, [pc, #44]	; (1528c <I2cInitializeDriver+0x68>)
   1525e:	681b      	ldr	r3, [r3, #0]
   15260:	2b00      	cmp	r3, #0
   15262:	d003      	beq.n	1526c <I2cInitializeDriver+0x48>
   15264:	4b0b      	ldr	r3, [pc, #44]	; (15294 <I2cInitializeDriver+0x70>)
   15266:	681b      	ldr	r3, [r3, #0]
   15268:	2b00      	cmp	r3, #0
   1526a:	d103      	bne.n	15274 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   1526c:	2306      	movs	r3, #6
   1526e:	607b      	str	r3, [r7, #4]
        goto exit;
   15270:	e000      	b.n	15274 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   15272:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   15274:	687b      	ldr	r3, [r7, #4]
}
   15276:	0018      	movs	r0, r3
   15278:	46bd      	mov	sp, r7
   1527a:	b002      	add	sp, #8
   1527c:	bd80      	pop	{r7, pc}
   1527e:	46c0      	nop			; (mov r8, r8)
   15280:	00014ffd 	.word	0x00014ffd
   15284:	000151c1 	.word	0x000151c1
   15288:	0001b51d 	.word	0x0001b51d
   1528c:	20004868 	.word	0x20004868
   15290:	0001b2b5 	.word	0x0001b2b5
   15294:	20004894 	.word	0x20004894

00015298 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   15298:	b590      	push	{r4, r7, lr}
   1529a:	b085      	sub	sp, #20
   1529c:	af00      	add	r7, sp, #0
   1529e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   152a0:	2300      	movs	r3, #0
   152a2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   152a4:	687b      	ldr	r3, [r7, #4]
   152a6:	2b00      	cmp	r3, #0
   152a8:	d003      	beq.n	152b2 <I2cWriteData+0x1a>
   152aa:	687b      	ldr	r3, [r7, #4]
   152ac:	685b      	ldr	r3, [r3, #4]
   152ae:	2b00      	cmp	r3, #0
   152b0:	d103      	bne.n	152ba <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   152b2:	2308      	movs	r3, #8
   152b4:	425b      	negs	r3, r3
   152b6:	60fb      	str	r3, [r7, #12]
        goto exit;
   152b8:	e01f      	b.n	152fa <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   152ba:	687b      	ldr	r3, [r7, #4]
   152bc:	781b      	ldrb	r3, [r3, #0]
   152be:	b29a      	uxth	r2, r3
   152c0:	4b10      	ldr	r3, [pc, #64]	; (15304 <I2cWriteData+0x6c>)
   152c2:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   152c4:	687b      	ldr	r3, [r7, #4]
   152c6:	685a      	ldr	r2, [r3, #4]
   152c8:	4b0e      	ldr	r3, [pc, #56]	; (15304 <I2cWriteData+0x6c>)
   152ca:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   152cc:	687b      	ldr	r3, [r7, #4]
   152ce:	89da      	ldrh	r2, [r3, #14]
   152d0:	4b0c      	ldr	r3, [pc, #48]	; (15304 <I2cWriteData+0x6c>)
   152d2:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   152d4:	230b      	movs	r3, #11
   152d6:	18fc      	adds	r4, r7, r3
   152d8:	4a0a      	ldr	r2, [pc, #40]	; (15304 <I2cWriteData+0x6c>)
   152da:	4b0b      	ldr	r3, [pc, #44]	; (15308 <I2cWriteData+0x70>)
   152dc:	0011      	movs	r1, r2
   152de:	0018      	movs	r0, r3
   152e0:	4b0a      	ldr	r3, [pc, #40]	; (1530c <I2cWriteData+0x74>)
   152e2:	4798      	blx	r3
   152e4:	0003      	movs	r3, r0
   152e6:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   152e8:	230b      	movs	r3, #11
   152ea:	18fb      	adds	r3, r7, r3
   152ec:	781b      	ldrb	r3, [r3, #0]
   152ee:	2b00      	cmp	r3, #0
   152f0:	d003      	beq.n	152fa <I2cWriteData+0x62>
        error = ERROR_IO;
   152f2:	2306      	movs	r3, #6
   152f4:	425b      	negs	r3, r3
   152f6:	60fb      	str	r3, [r7, #12]
        goto exit;
   152f8:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   152fa:	68fb      	ldr	r3, [r7, #12]
}
   152fc:	0018      	movs	r0, r3
   152fe:	46bd      	mov	sp, r7
   15300:	b005      	add	sp, #20
   15302:	bd90      	pop	{r4, r7, pc}
   15304:	20004898 	.word	0x20004898
   15308:	2000486c 	.word	0x2000486c
   1530c:	00013dbd 	.word	0x00013dbd

00015310 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   15310:	b590      	push	{r4, r7, lr}
   15312:	b085      	sub	sp, #20
   15314:	af00      	add	r7, sp, #0
   15316:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15318:	2300      	movs	r3, #0
   1531a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1531c:	687b      	ldr	r3, [r7, #4]
   1531e:	2b00      	cmp	r3, #0
   15320:	d003      	beq.n	1532a <I2cReadData+0x1a>
   15322:	687b      	ldr	r3, [r7, #4]
   15324:	685b      	ldr	r3, [r3, #4]
   15326:	2b00      	cmp	r3, #0
   15328:	d103      	bne.n	15332 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   1532a:	2308      	movs	r3, #8
   1532c:	425b      	negs	r3, r3
   1532e:	60fb      	str	r3, [r7, #12]
        goto exit;
   15330:	e01f      	b.n	15372 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   15332:	687b      	ldr	r3, [r7, #4]
   15334:	781b      	ldrb	r3, [r3, #0]
   15336:	b29a      	uxth	r2, r3
   15338:	4b10      	ldr	r3, [pc, #64]	; (1537c <I2cReadData+0x6c>)
   1533a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   1533c:	687b      	ldr	r3, [r7, #4]
   1533e:	689a      	ldr	r2, [r3, #8]
   15340:	4b0e      	ldr	r3, [pc, #56]	; (1537c <I2cReadData+0x6c>)
   15342:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   15344:	687b      	ldr	r3, [r7, #4]
   15346:	899a      	ldrh	r2, [r3, #12]
   15348:	4b0c      	ldr	r3, [pc, #48]	; (1537c <I2cReadData+0x6c>)
   1534a:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   1534c:	230b      	movs	r3, #11
   1534e:	18fc      	adds	r4, r7, r3
   15350:	4a0a      	ldr	r2, [pc, #40]	; (1537c <I2cReadData+0x6c>)
   15352:	4b0b      	ldr	r3, [pc, #44]	; (15380 <I2cReadData+0x70>)
   15354:	0011      	movs	r1, r2
   15356:	0018      	movs	r0, r3
   15358:	4b0a      	ldr	r3, [pc, #40]	; (15384 <I2cReadData+0x74>)
   1535a:	4798      	blx	r3
   1535c:	0003      	movs	r3, r0
   1535e:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   15360:	230b      	movs	r3, #11
   15362:	18fb      	adds	r3, r7, r3
   15364:	781b      	ldrb	r3, [r3, #0]
   15366:	2b00      	cmp	r3, #0
   15368:	d003      	beq.n	15372 <I2cReadData+0x62>
        error = ERROR_IO;
   1536a:	2306      	movs	r3, #6
   1536c:	425b      	negs	r3, r3
   1536e:	60fb      	str	r3, [r7, #12]
        goto exit;
   15370:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   15372:	68fb      	ldr	r3, [r7, #12]
}
   15374:	0018      	movs	r0, r3
   15376:	46bd      	mov	sp, r7
   15378:	b005      	add	sp, #20
   1537a:	bd90      	pop	{r4, r7, pc}
   1537c:	20004898 	.word	0x20004898
   15380:	2000486c 	.word	0x2000486c
   15384:	00013cd9 	.word	0x00013cd9

00015388 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   15388:	b590      	push	{r4, r7, lr}
   1538a:	b083      	sub	sp, #12
   1538c:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   1538e:	2300      	movs	r3, #0
   15390:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   15392:	4b09      	ldr	r3, [pc, #36]	; (153b8 <I2cFreeMutex+0x30>)
   15394:	6818      	ldr	r0, [r3, #0]
   15396:	2300      	movs	r3, #0
   15398:	2200      	movs	r2, #0
   1539a:	2100      	movs	r1, #0
   1539c:	4c07      	ldr	r4, [pc, #28]	; (153bc <I2cFreeMutex+0x34>)
   1539e:	47a0      	blx	r4
   153a0:	0003      	movs	r3, r0
   153a2:	2b01      	cmp	r3, #1
   153a4:	d002      	beq.n	153ac <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   153a6:	2314      	movs	r3, #20
   153a8:	425b      	negs	r3, r3
   153aa:	607b      	str	r3, [r7, #4]
    }
    return error;
   153ac:	687b      	ldr	r3, [r7, #4]
}
   153ae:	0018      	movs	r0, r3
   153b0:	46bd      	mov	sp, r7
   153b2:	b003      	add	sp, #12
   153b4:	bd90      	pop	{r4, r7, pc}
   153b6:	46c0      	nop			; (mov r8, r8)
   153b8:	20004868 	.word	0x20004868
   153bc:	0001b55d 	.word	0x0001b55d

000153c0 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   153c0:	b580      	push	{r7, lr}
   153c2:	b084      	sub	sp, #16
   153c4:	af00      	add	r7, sp, #0
   153c6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   153c8:	2300      	movs	r3, #0
   153ca:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   153cc:	4b08      	ldr	r3, [pc, #32]	; (153f0 <I2cGetMutex+0x30>)
   153ce:	681b      	ldr	r3, [r3, #0]
   153d0:	687a      	ldr	r2, [r7, #4]
   153d2:	0011      	movs	r1, r2
   153d4:	0018      	movs	r0, r3
   153d6:	4b07      	ldr	r3, [pc, #28]	; (153f4 <I2cGetMutex+0x34>)
   153d8:	4798      	blx	r3
   153da:	0003      	movs	r3, r0
   153dc:	2b01      	cmp	r3, #1
   153de:	d002      	beq.n	153e6 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   153e0:	231d      	movs	r3, #29
   153e2:	425b      	negs	r3, r3
   153e4:	60fb      	str	r3, [r7, #12]
    }
    return error;
   153e6:	68fb      	ldr	r3, [r7, #12]
}
   153e8:	0018      	movs	r0, r3
   153ea:	46bd      	mov	sp, r7
   153ec:	b004      	add	sp, #16
   153ee:	bd80      	pop	{r7, pc}
   153f0:	20004868 	.word	0x20004868
   153f4:	0001c26d 	.word	0x0001c26d

000153f8 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   153f8:	b580      	push	{r7, lr}
   153fa:	b084      	sub	sp, #16
   153fc:	af00      	add	r7, sp, #0
   153fe:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15400:	2300      	movs	r3, #0
   15402:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   15404:	4b04      	ldr	r3, [pc, #16]	; (15418 <I2cGetSemaphoreHandle+0x20>)
   15406:	681a      	ldr	r2, [r3, #0]
   15408:	687b      	ldr	r3, [r7, #4]
   1540a:	601a      	str	r2, [r3, #0]
    return error;
   1540c:	68fb      	ldr	r3, [r7, #12]
}
   1540e:	0018      	movs	r0, r3
   15410:	46bd      	mov	sp, r7
   15412:	b004      	add	sp, #16
   15414:	bd80      	pop	{r7, pc}
   15416:	46c0      	nop			; (mov r8, r8)
   15418:	20004894 	.word	0x20004894

0001541c <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   1541c:	b580      	push	{r7, lr}
   1541e:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   15420:	4b02      	ldr	r3, [pc, #8]	; (1542c <I2cGetTaskErrorStatus+0x10>)
   15422:	781b      	ldrb	r3, [r3, #0]
}
   15424:	0018      	movs	r0, r3
   15426:	46bd      	mov	sp, r7
   15428:	bd80      	pop	{r7, pc}
   1542a:	46c0      	nop			; (mov r8, r8)
   1542c:	20000608 	.word	0x20000608

00015430 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   15430:	b580      	push	{r7, lr}
   15432:	b082      	sub	sp, #8
   15434:	af00      	add	r7, sp, #0
   15436:	0002      	movs	r2, r0
   15438:	1dfb      	adds	r3, r7, #7
   1543a:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   1543c:	4b03      	ldr	r3, [pc, #12]	; (1544c <I2cSetTaskErrorStatus+0x1c>)
   1543e:	1dfa      	adds	r2, r7, #7
   15440:	7812      	ldrb	r2, [r2, #0]
   15442:	701a      	strb	r2, [r3, #0]
}
   15444:	46c0      	nop			; (mov r8, r8)
   15446:	46bd      	mov	sp, r7
   15448:	b002      	add	sp, #8
   1544a:	bd80      	pop	{r7, pc}
   1544c:	20000608 	.word	0x20000608

00015450 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   15450:	b580      	push	{r7, lr}
   15452:	b084      	sub	sp, #16
   15454:	af00      	add	r7, sp, #0
   15456:	6078      	str	r0, [r7, #4]
   15458:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   1545a:	2300      	movs	r3, #0
   1545c:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   1545e:	2300      	movs	r3, #0
   15460:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15462:	2396      	movs	r3, #150	; 0x96
   15464:	005b      	lsls	r3, r3, #1
   15466:	0018      	movs	r0, r3
   15468:	4b28      	ldr	r3, [pc, #160]	; (1550c <I2cWriteDataWait+0xbc>)
   1546a:	4798      	blx	r3
   1546c:	0003      	movs	r3, r0
   1546e:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15470:	68fb      	ldr	r3, [r7, #12]
   15472:	2b00      	cmp	r3, #0
   15474:	d138      	bne.n	154e8 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15476:	2308      	movs	r3, #8
   15478:	18fb      	adds	r3, r7, r3
   1547a:	0018      	movs	r0, r3
   1547c:	4b24      	ldr	r3, [pc, #144]	; (15510 <I2cWriteDataWait+0xc0>)
   1547e:	4798      	blx	r3
   15480:	0003      	movs	r3, r0
   15482:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15484:	68fb      	ldr	r3, [r7, #12]
   15486:	2b00      	cmp	r3, #0
   15488:	d130      	bne.n	154ec <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1548a:	687b      	ldr	r3, [r7, #4]
   1548c:	0018      	movs	r0, r3
   1548e:	4b21      	ldr	r3, [pc, #132]	; (15514 <I2cWriteDataWait+0xc4>)
   15490:	4798      	blx	r3
   15492:	0003      	movs	r3, r0
   15494:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   15496:	68fb      	ldr	r3, [r7, #12]
   15498:	2b00      	cmp	r3, #0
   1549a:	d12a      	bne.n	154f2 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1549c:	68bb      	ldr	r3, [r7, #8]
   1549e:	683a      	ldr	r2, [r7, #0]
   154a0:	0011      	movs	r1, r2
   154a2:	0018      	movs	r0, r3
   154a4:	4b1c      	ldr	r3, [pc, #112]	; (15518 <I2cWriteDataWait+0xc8>)
   154a6:	4798      	blx	r3
   154a8:	0003      	movs	r3, r0
   154aa:	2b01      	cmp	r3, #1
   154ac:	d111      	bne.n	154d2 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   154ae:	4b1b      	ldr	r3, [pc, #108]	; (1551c <I2cWriteDataWait+0xcc>)
   154b0:	4798      	blx	r3
   154b2:	1e03      	subs	r3, r0, #0
   154b4:	d011      	beq.n	154da <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   154b6:	2000      	movs	r0, #0
   154b8:	4b19      	ldr	r3, [pc, #100]	; (15520 <I2cWriteDataWait+0xd0>)
   154ba:	4798      	blx	r3
            if (error != ERROR_NONE) {
   154bc:	68fb      	ldr	r3, [r7, #12]
   154be:	2b00      	cmp	r3, #0
   154c0:	d003      	beq.n	154ca <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   154c2:	2321      	movs	r3, #33	; 0x21
   154c4:	425b      	negs	r3, r3
   154c6:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   154c8:	e014      	b.n	154f4 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   154ca:	2303      	movs	r3, #3
   154cc:	425b      	negs	r3, r3
   154ce:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   154d0:	e010      	b.n	154f4 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   154d2:	2303      	movs	r3, #3
   154d4:	425b      	negs	r3, r3
   154d6:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   154d8:	e00c      	b.n	154f4 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   154da:	4b12      	ldr	r3, [pc, #72]	; (15524 <I2cWriteDataWait+0xd4>)
   154dc:	4798      	blx	r3
   154de:	0002      	movs	r2, r0
   154e0:	68fb      	ldr	r3, [r7, #12]
   154e2:	4313      	orrs	r3, r2
   154e4:	60fb      	str	r3, [r7, #12]
   154e6:	e002      	b.n	154ee <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   154e8:	46c0      	nop			; (mov r8, r8)
   154ea:	e000      	b.n	154ee <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   154ec:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   154ee:	68fb      	ldr	r3, [r7, #12]
   154f0:	e007      	b.n	15502 <I2cWriteDataWait+0xb2>
        goto exitError0;
   154f2:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   154f4:	4b0b      	ldr	r3, [pc, #44]	; (15524 <I2cWriteDataWait+0xd4>)
   154f6:	4798      	blx	r3
   154f8:	0002      	movs	r2, r0
   154fa:	68fb      	ldr	r3, [r7, #12]
   154fc:	4313      	orrs	r3, r2
   154fe:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   15500:	68fb      	ldr	r3, [r7, #12]
}
   15502:	0018      	movs	r0, r3
   15504:	46bd      	mov	sp, r7
   15506:	b004      	add	sp, #16
   15508:	bd80      	pop	{r7, pc}
   1550a:	46c0      	nop			; (mov r8, r8)
   1550c:	000153c1 	.word	0x000153c1
   15510:	000153f9 	.word	0x000153f9
   15514:	00015299 	.word	0x00015299
   15518:	0001c26d 	.word	0x0001c26d
   1551c:	0001541d 	.word	0x0001541d
   15520:	00015431 	.word	0x00015431
   15524:	00015389 	.word	0x00015389

00015528 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   15528:	b580      	push	{r7, lr}
   1552a:	b086      	sub	sp, #24
   1552c:	af00      	add	r7, sp, #0
   1552e:	60f8      	str	r0, [r7, #12]
   15530:	60b9      	str	r1, [r7, #8]
   15532:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   15534:	2300      	movs	r3, #0
   15536:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   15538:	2300      	movs	r3, #0
   1553a:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   1553c:	2396      	movs	r3, #150	; 0x96
   1553e:	005b      	lsls	r3, r3, #1
   15540:	0018      	movs	r0, r3
   15542:	4b35      	ldr	r3, [pc, #212]	; (15618 <I2cReadDataWait+0xf0>)
   15544:	4798      	blx	r3
   15546:	0003      	movs	r3, r0
   15548:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1554a:	697b      	ldr	r3, [r7, #20]
   1554c:	2b00      	cmp	r3, #0
   1554e:	d155      	bne.n	155fc <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15550:	2310      	movs	r3, #16
   15552:	18fb      	adds	r3, r7, r3
   15554:	0018      	movs	r0, r3
   15556:	4b31      	ldr	r3, [pc, #196]	; (1561c <I2cReadDataWait+0xf4>)
   15558:	4798      	blx	r3
   1555a:	0003      	movs	r3, r0
   1555c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1555e:	697b      	ldr	r3, [r7, #20]
   15560:	2b00      	cmp	r3, #0
   15562:	d14d      	bne.n	15600 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15564:	68fb      	ldr	r3, [r7, #12]
   15566:	0018      	movs	r0, r3
   15568:	4b2d      	ldr	r3, [pc, #180]	; (15620 <I2cReadDataWait+0xf8>)
   1556a:	4798      	blx	r3
   1556c:	0003      	movs	r3, r0
   1556e:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15570:	697b      	ldr	r3, [r7, #20]
   15572:	2b00      	cmp	r3, #0
   15574:	d147      	bne.n	15606 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15576:	693b      	ldr	r3, [r7, #16]
   15578:	687a      	ldr	r2, [r7, #4]
   1557a:	0011      	movs	r1, r2
   1557c:	0018      	movs	r0, r3
   1557e:	4b29      	ldr	r3, [pc, #164]	; (15624 <I2cReadDataWait+0xfc>)
   15580:	4798      	blx	r3
   15582:	0003      	movs	r3, r0
   15584:	2b01      	cmp	r3, #1
   15586:	d118      	bne.n	155ba <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15588:	4b27      	ldr	r3, [pc, #156]	; (15628 <I2cReadDataWait+0x100>)
   1558a:	4798      	blx	r3
   1558c:	1e03      	subs	r3, r0, #0
   1558e:	d006      	beq.n	1559e <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   15590:	2000      	movs	r0, #0
   15592:	4b26      	ldr	r3, [pc, #152]	; (1562c <I2cReadDataWait+0x104>)
   15594:	4798      	blx	r3
            error = ERROR_ABORTED;
   15596:	2303      	movs	r3, #3
   15598:	425b      	negs	r3, r3
   1559a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1559c:	e034      	b.n	15608 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1559e:	68bb      	ldr	r3, [r7, #8]
   155a0:	0018      	movs	r0, r3
   155a2:	4b23      	ldr	r3, [pc, #140]	; (15630 <I2cReadDataWait+0x108>)
   155a4:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   155a6:	68fb      	ldr	r3, [r7, #12]
   155a8:	0018      	movs	r0, r3
   155aa:	4b22      	ldr	r3, [pc, #136]	; (15634 <I2cReadDataWait+0x10c>)
   155ac:	4798      	blx	r3
   155ae:	0003      	movs	r3, r0
   155b0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   155b2:	697b      	ldr	r3, [r7, #20]
   155b4:	2b00      	cmp	r3, #0
   155b6:	d004      	beq.n	155c2 <I2cReadDataWait+0x9a>
        goto exitError0;
   155b8:	e026      	b.n	15608 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   155ba:	2303      	movs	r3, #3
   155bc:	425b      	negs	r3, r3
   155be:	617b      	str	r3, [r7, #20]
        goto exitError0;
   155c0:	e022      	b.n	15608 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   155c2:	693b      	ldr	r3, [r7, #16]
   155c4:	687a      	ldr	r2, [r7, #4]
   155c6:	0011      	movs	r1, r2
   155c8:	0018      	movs	r0, r3
   155ca:	4b16      	ldr	r3, [pc, #88]	; (15624 <I2cReadDataWait+0xfc>)
   155cc:	4798      	blx	r3
   155ce:	0003      	movs	r3, r0
   155d0:	2b01      	cmp	r3, #1
   155d2:	d10a      	bne.n	155ea <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   155d4:	4b14      	ldr	r3, [pc, #80]	; (15628 <I2cReadDataWait+0x100>)
   155d6:	4798      	blx	r3
   155d8:	1e03      	subs	r3, r0, #0
   155da:	d00a      	beq.n	155f2 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   155dc:	2000      	movs	r0, #0
   155de:	4b13      	ldr	r3, [pc, #76]	; (1562c <I2cReadDataWait+0x104>)
   155e0:	4798      	blx	r3
            error = ERROR_ABORTED;
   155e2:	2303      	movs	r3, #3
   155e4:	425b      	negs	r3, r3
   155e6:	617b      	str	r3, [r7, #20]
            goto exitError0;
   155e8:	e00e      	b.n	15608 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   155ea:	2303      	movs	r3, #3
   155ec:	425b      	negs	r3, r3
   155ee:	617b      	str	r3, [r7, #20]
        goto exitError0;
   155f0:	e00a      	b.n	15608 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   155f2:	4b11      	ldr	r3, [pc, #68]	; (15638 <I2cReadDataWait+0x110>)
   155f4:	4798      	blx	r3
   155f6:	0003      	movs	r3, r0
   155f8:	617b      	str	r3, [r7, #20]
   155fa:	e002      	b.n	15602 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   155fc:	46c0      	nop			; (mov r8, r8)
   155fe:	e000      	b.n	15602 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15600:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15602:	697b      	ldr	r3, [r7, #20]
   15604:	e003      	b.n	1560e <I2cReadDataWait+0xe6>
        goto exitError0;
   15606:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   15608:	4b0b      	ldr	r3, [pc, #44]	; (15638 <I2cReadDataWait+0x110>)
   1560a:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   1560c:	697b      	ldr	r3, [r7, #20]
}
   1560e:	0018      	movs	r0, r3
   15610:	46bd      	mov	sp, r7
   15612:	b006      	add	sp, #24
   15614:	bd80      	pop	{r7, pc}
   15616:	46c0      	nop			; (mov r8, r8)
   15618:	000153c1 	.word	0x000153c1
   1561c:	000153f9 	.word	0x000153f9
   15620:	00015299 	.word	0x00015299
   15624:	0001c26d 	.word	0x0001c26d
   15628:	0001541d 	.word	0x0001541d
   1562c:	00015431 	.word	0x00015431
   15630:	0001cfc1 	.word	0x0001cfc1
   15634:	00015311 	.word	0x00015311
   15638:	00015389 	.word	0x00015389

0001563c <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   1563c:	b5b0      	push	{r4, r5, r7, lr}
   1563e:	b086      	sub	sp, #24
   15640:	af00      	add	r7, sp, #0
   15642:	60f8      	str	r0, [r7, #12]
   15644:	0008      	movs	r0, r1
   15646:	607a      	str	r2, [r7, #4]
   15648:	0019      	movs	r1, r3
   1564a:	230b      	movs	r3, #11
   1564c:	18fb      	adds	r3, r7, r3
   1564e:	1c02      	adds	r2, r0, #0
   15650:	701a      	strb	r2, [r3, #0]
   15652:	2308      	movs	r3, #8
   15654:	18fb      	adds	r3, r7, r3
   15656:	1c0a      	adds	r2, r1, #0
   15658:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1565a:	68fb      	ldr	r3, [r7, #12]
   1565c:	685c      	ldr	r4, [r3, #4]
   1565e:	68fb      	ldr	r3, [r7, #12]
   15660:	6898      	ldr	r0, [r3, #8]
   15662:	2308      	movs	r3, #8
   15664:	18fb      	adds	r3, r7, r3
   15666:	881d      	ldrh	r5, [r3, #0]
   15668:	687a      	ldr	r2, [r7, #4]
   1566a:	230b      	movs	r3, #11
   1566c:	18fb      	adds	r3, r7, r3
   1566e:	7819      	ldrb	r1, [r3, #0]
   15670:	002b      	movs	r3, r5
   15672:	47a0      	blx	r4
   15674:	0003      	movs	r3, r0
   15676:	617b      	str	r3, [r7, #20]

  return ret;
   15678:	697b      	ldr	r3, [r7, #20]
}
   1567a:	0018      	movs	r0, r3
   1567c:	46bd      	mov	sp, r7
   1567e:	b006      	add	sp, #24
   15680:	bdb0      	pop	{r4, r5, r7, pc}

00015682 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   15682:	b5b0      	push	{r4, r5, r7, lr}
   15684:	b086      	sub	sp, #24
   15686:	af00      	add	r7, sp, #0
   15688:	60f8      	str	r0, [r7, #12]
   1568a:	0008      	movs	r0, r1
   1568c:	607a      	str	r2, [r7, #4]
   1568e:	0019      	movs	r1, r3
   15690:	230b      	movs	r3, #11
   15692:	18fb      	adds	r3, r7, r3
   15694:	1c02      	adds	r2, r0, #0
   15696:	701a      	strb	r2, [r3, #0]
   15698:	2308      	movs	r3, #8
   1569a:	18fb      	adds	r3, r7, r3
   1569c:	1c0a      	adds	r2, r1, #0
   1569e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   156a0:	68fb      	ldr	r3, [r7, #12]
   156a2:	681c      	ldr	r4, [r3, #0]
   156a4:	68fb      	ldr	r3, [r7, #12]
   156a6:	6898      	ldr	r0, [r3, #8]
   156a8:	2308      	movs	r3, #8
   156aa:	18fb      	adds	r3, r7, r3
   156ac:	881d      	ldrh	r5, [r3, #0]
   156ae:	687a      	ldr	r2, [r7, #4]
   156b0:	230b      	movs	r3, #11
   156b2:	18fb      	adds	r3, r7, r3
   156b4:	7819      	ldrb	r1, [r3, #0]
   156b6:	002b      	movs	r3, r5
   156b8:	47a0      	blx	r4
   156ba:	0003      	movs	r3, r0
   156bc:	617b      	str	r3, [r7, #20]

  return ret;
   156be:	697b      	ldr	r3, [r7, #20]
}
   156c0:	0018      	movs	r0, r3
   156c2:	46bd      	mov	sp, r7
   156c4:	b006      	add	sp, #24
   156c6:	bdb0      	pop	{r4, r5, r7, pc}

000156c8 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   156c8:	b580      	push	{r7, lr}
   156ca:	b082      	sub	sp, #8
   156cc:	af00      	add	r7, sp, #0
   156ce:	0002      	movs	r2, r0
   156d0:	1dbb      	adds	r3, r7, #6
   156d2:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   156d4:	1dbb      	adds	r3, r7, #6
   156d6:	2200      	movs	r2, #0
   156d8:	5e9a      	ldrsh	r2, [r3, r2]
   156da:	4b06      	ldr	r3, [pc, #24]	; (156f4 <lsm6dso_from_fs2_to_mg+0x2c>)
   156dc:	0010      	movs	r0, r2
   156de:	4798      	blx	r3
   156e0:	1c02      	adds	r2, r0, #0
   156e2:	4b05      	ldr	r3, [pc, #20]	; (156f8 <lsm6dso_from_fs2_to_mg+0x30>)
   156e4:	4905      	ldr	r1, [pc, #20]	; (156fc <lsm6dso_from_fs2_to_mg+0x34>)
   156e6:	1c10      	adds	r0, r2, #0
   156e8:	4798      	blx	r3
   156ea:	1c03      	adds	r3, r0, #0
}
   156ec:	1c18      	adds	r0, r3, #0
   156ee:	46bd      	mov	sp, r7
   156f0:	b002      	add	sp, #8
   156f2:	bd80      	pop	{r7, pc}
   156f4:	00033d65 	.word	0x00033d65
   156f8:	00033ae5 	.word	0x00033ae5
   156fc:	3d79db23 	.word	0x3d79db23

00015700 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   15700:	b590      	push	{r4, r7, lr}
   15702:	b085      	sub	sp, #20
   15704:	af00      	add	r7, sp, #0
   15706:	6078      	str	r0, [r7, #4]
   15708:	000a      	movs	r2, r1
   1570a:	1cfb      	adds	r3, r7, #3
   1570c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1570e:	2308      	movs	r3, #8
   15710:	18fa      	adds	r2, r7, r3
   15712:	6878      	ldr	r0, [r7, #4]
   15714:	2301      	movs	r3, #1
   15716:	2110      	movs	r1, #16
   15718:	4c12      	ldr	r4, [pc, #72]	; (15764 <lsm6dso_xl_full_scale_set+0x64>)
   1571a:	47a0      	blx	r4
   1571c:	0003      	movs	r3, r0
   1571e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15720:	68fb      	ldr	r3, [r7, #12]
   15722:	2b00      	cmp	r3, #0
   15724:	d119      	bne.n	1575a <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   15726:	1cfb      	adds	r3, r7, #3
   15728:	781b      	ldrb	r3, [r3, #0]
   1572a:	2203      	movs	r2, #3
   1572c:	4013      	ands	r3, r2
   1572e:	b2da      	uxtb	r2, r3
   15730:	2308      	movs	r3, #8
   15732:	18fb      	adds	r3, r7, r3
   15734:	2103      	movs	r1, #3
   15736:	400a      	ands	r2, r1
   15738:	0090      	lsls	r0, r2, #2
   1573a:	781a      	ldrb	r2, [r3, #0]
   1573c:	210c      	movs	r1, #12
   1573e:	438a      	bics	r2, r1
   15740:	1c11      	adds	r1, r2, #0
   15742:	1c02      	adds	r2, r0, #0
   15744:	430a      	orrs	r2, r1
   15746:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15748:	2308      	movs	r3, #8
   1574a:	18fa      	adds	r2, r7, r3
   1574c:	6878      	ldr	r0, [r7, #4]
   1574e:	2301      	movs	r3, #1
   15750:	2110      	movs	r1, #16
   15752:	4c05      	ldr	r4, [pc, #20]	; (15768 <lsm6dso_xl_full_scale_set+0x68>)
   15754:	47a0      	blx	r4
   15756:	0003      	movs	r3, r0
   15758:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1575a:	68fb      	ldr	r3, [r7, #12]
}
   1575c:	0018      	movs	r0, r3
   1575e:	46bd      	mov	sp, r7
   15760:	b005      	add	sp, #20
   15762:	bd90      	pop	{r4, r7, pc}
   15764:	0001563d 	.word	0x0001563d
   15768:	00015683 	.word	0x00015683

0001576c <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   1576c:	b590      	push	{r4, r7, lr}
   1576e:	b087      	sub	sp, #28
   15770:	af00      	add	r7, sp, #0
   15772:	6078      	str	r0, [r7, #4]
   15774:	000a      	movs	r2, r1
   15776:	1cfb      	adds	r3, r7, #3
   15778:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   1577a:	2317      	movs	r3, #23
   1577c:	18fb      	adds	r3, r7, r3
   1577e:	1cfa      	adds	r2, r7, #3
   15780:	7812      	ldrb	r2, [r2, #0]
   15782:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15784:	230c      	movs	r3, #12
   15786:	18fa      	adds	r2, r7, r3
   15788:	687b      	ldr	r3, [r7, #4]
   1578a:	0011      	movs	r1, r2
   1578c:	0018      	movs	r0, r3
   1578e:	4ba4      	ldr	r3, [pc, #656]	; (15a20 <lsm6dso_xl_data_rate_set+0x2b4>)
   15790:	4798      	blx	r3
   15792:	0003      	movs	r3, r0
   15794:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15796:	693b      	ldr	r3, [r7, #16]
   15798:	2b00      	cmp	r3, #0
   1579a:	d000      	beq.n	1579e <lsm6dso_xl_data_rate_set+0x32>
   1579c:	e113      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1579e:	230c      	movs	r3, #12
   157a0:	18fb      	adds	r3, r7, r3
   157a2:	781b      	ldrb	r3, [r3, #0]
   157a4:	07db      	lsls	r3, r3, #31
   157a6:	0fdb      	lsrs	r3, r3, #31
   157a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   157aa:	230c      	movs	r3, #12
   157ac:	18fb      	adds	r3, r7, r3
   157ae:	781b      	ldrb	r3, [r3, #0]
   157b0:	079b      	lsls	r3, r3, #30
   157b2:	0fdb      	lsrs	r3, r3, #31
   157b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   157b6:	4313      	orrs	r3, r2
   157b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   157ba:	230c      	movs	r3, #12
   157bc:	18fb      	adds	r3, r7, r3
   157be:	781b      	ldrb	r3, [r3, #0]
   157c0:	075b      	lsls	r3, r3, #29
   157c2:	0fdb      	lsrs	r3, r3, #31
   157c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   157c6:	4313      	orrs	r3, r2
   157c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   157ca:	230c      	movs	r3, #12
   157cc:	18fb      	adds	r3, r7, r3
   157ce:	781b      	ldrb	r3, [r3, #0]
   157d0:	071b      	lsls	r3, r3, #28
   157d2:	0fdb      	lsrs	r3, r3, #31
   157d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   157d6:	4313      	orrs	r3, r2
   157d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   157da:	230c      	movs	r3, #12
   157dc:	18fb      	adds	r3, r7, r3
   157de:	781b      	ldrb	r3, [r3, #0]
   157e0:	06db      	lsls	r3, r3, #27
   157e2:	0fdb      	lsrs	r3, r3, #31
   157e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   157e6:	4313      	orrs	r3, r2
   157e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   157ea:	230c      	movs	r3, #12
   157ec:	18fb      	adds	r3, r7, r3
   157ee:	781b      	ldrb	r3, [r3, #0]
   157f0:	069b      	lsls	r3, r3, #26
   157f2:	0fdb      	lsrs	r3, r3, #31
   157f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   157f6:	4313      	orrs	r3, r2
   157f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   157fa:	230c      	movs	r3, #12
   157fc:	18fb      	adds	r3, r7, r3
   157fe:	781b      	ldrb	r3, [r3, #0]
   15800:	065b      	lsls	r3, r3, #25
   15802:	0fdb      	lsrs	r3, r3, #31
   15804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15806:	4313      	orrs	r3, r2
   15808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1580a:	230c      	movs	r3, #12
   1580c:	18fb      	adds	r3, r7, r3
   1580e:	781b      	ldrb	r3, [r3, #0]
   15810:	061b      	lsls	r3, r3, #24
   15812:	0fdb      	lsrs	r3, r3, #31
   15814:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15816:	4313      	orrs	r3, r2
   15818:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1581a:	230c      	movs	r3, #12
   1581c:	18fb      	adds	r3, r7, r3
   1581e:	785b      	ldrb	r3, [r3, #1]
   15820:	07db      	lsls	r3, r3, #31
   15822:	0fdb      	lsrs	r3, r3, #31
   15824:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15826:	4313      	orrs	r3, r2
   15828:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1582a:	230c      	movs	r3, #12
   1582c:	18fb      	adds	r3, r7, r3
   1582e:	785b      	ldrb	r3, [r3, #1]
   15830:	079b      	lsls	r3, r3, #30
   15832:	0fdb      	lsrs	r3, r3, #31
   15834:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15836:	4313      	orrs	r3, r2
   15838:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1583a:	230c      	movs	r3, #12
   1583c:	18fb      	adds	r3, r7, r3
   1583e:	785b      	ldrb	r3, [r3, #1]
   15840:	075b      	lsls	r3, r3, #29
   15842:	0fdb      	lsrs	r3, r3, #31
   15844:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15846:	4313      	orrs	r3, r2
   15848:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1584a:	230c      	movs	r3, #12
   1584c:	18fb      	adds	r3, r7, r3
   1584e:	785b      	ldrb	r3, [r3, #1]
   15850:	071b      	lsls	r3, r3, #28
   15852:	0fdb      	lsrs	r3, r3, #31
   15854:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15856:	4313      	orrs	r3, r2
   15858:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1585a:	230c      	movs	r3, #12
   1585c:	18fb      	adds	r3, r7, r3
   1585e:	785b      	ldrb	r3, [r3, #1]
   15860:	06db      	lsls	r3, r3, #27
   15862:	0fdb      	lsrs	r3, r3, #31
   15864:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15866:	4313      	orrs	r3, r2
   15868:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1586a:	230c      	movs	r3, #12
   1586c:	18fb      	adds	r3, r7, r3
   1586e:	785b      	ldrb	r3, [r3, #1]
   15870:	069b      	lsls	r3, r3, #26
   15872:	0fdb      	lsrs	r3, r3, #31
   15874:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15876:	4313      	orrs	r3, r2
   15878:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1587a:	230c      	movs	r3, #12
   1587c:	18fb      	adds	r3, r7, r3
   1587e:	785b      	ldrb	r3, [r3, #1]
   15880:	065b      	lsls	r3, r3, #25
   15882:	0fdb      	lsrs	r3, r3, #31
   15884:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15886:	4313      	orrs	r3, r2
   15888:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1588a:	230c      	movs	r3, #12
   1588c:	18fb      	adds	r3, r7, r3
   1588e:	785b      	ldrb	r3, [r3, #1]
   15890:	061b      	lsls	r3, r3, #24
   15892:	0fdb      	lsrs	r3, r3, #31
   15894:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15896:	4313      	orrs	r3, r2
   15898:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1589a:	2b01      	cmp	r3, #1
   1589c:	d000      	beq.n	158a0 <lsm6dso_xl_data_rate_set+0x134>
   1589e:	e092      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   158a0:	230b      	movs	r3, #11
   158a2:	18fa      	adds	r2, r7, r3
   158a4:	687b      	ldr	r3, [r7, #4]
   158a6:	0011      	movs	r1, r2
   158a8:	0018      	movs	r0, r3
   158aa:	4b5e      	ldr	r3, [pc, #376]	; (15a24 <lsm6dso_xl_data_rate_set+0x2b8>)
   158ac:	4798      	blx	r3
   158ae:	0003      	movs	r3, r0
   158b0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   158b2:	693b      	ldr	r3, [r7, #16]
   158b4:	2b00      	cmp	r3, #0
   158b6:	d000      	beq.n	158ba <lsm6dso_xl_data_rate_set+0x14e>
   158b8:	e085      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   158ba:	230b      	movs	r3, #11
   158bc:	18fb      	adds	r3, r7, r3
   158be:	781b      	ldrb	r3, [r3, #0]
   158c0:	2b01      	cmp	r3, #1
   158c2:	d017      	beq.n	158f4 <lsm6dso_xl_data_rate_set+0x188>
   158c4:	dc02      	bgt.n	158cc <lsm6dso_xl_data_rate_set+0x160>
   158c6:	2b00      	cmp	r3, #0
   158c8:	d005      	beq.n	158d6 <lsm6dso_xl_data_rate_set+0x16a>
   158ca:	e076      	b.n	159ba <lsm6dso_xl_data_rate_set+0x24e>
   158cc:	2b02      	cmp	r3, #2
   158ce:	d029      	beq.n	15924 <lsm6dso_xl_data_rate_set+0x1b8>
   158d0:	2b03      	cmp	r3, #3
   158d2:	d048      	beq.n	15966 <lsm6dso_xl_data_rate_set+0x1fa>
   158d4:	e071      	b.n	159ba <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   158d6:	1cfb      	adds	r3, r7, #3
   158d8:	781b      	ldrb	r3, [r3, #0]
   158da:	2b00      	cmp	r3, #0
   158dc:	d104      	bne.n	158e8 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   158de:	2317      	movs	r3, #23
   158e0:	18fb      	adds	r3, r7, r3
   158e2:	2201      	movs	r2, #1
   158e4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   158e6:	e06e      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   158e8:	2317      	movs	r3, #23
   158ea:	18fb      	adds	r3, r7, r3
   158ec:	1cfa      	adds	r2, r7, #3
   158ee:	7812      	ldrb	r2, [r2, #0]
   158f0:	701a      	strb	r2, [r3, #0]
            break;
   158f2:	e068      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   158f4:	1cfb      	adds	r3, r7, #3
   158f6:	781b      	ldrb	r3, [r3, #0]
   158f8:	2b00      	cmp	r3, #0
   158fa:	d104      	bne.n	15906 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   158fc:	2317      	movs	r3, #23
   158fe:	18fb      	adds	r3, r7, r3
   15900:	2202      	movs	r2, #2
   15902:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15904:	e05f      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15906:	1cfb      	adds	r3, r7, #3
   15908:	781b      	ldrb	r3, [r3, #0]
   1590a:	2b01      	cmp	r3, #1
   1590c:	d104      	bne.n	15918 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   1590e:	2317      	movs	r3, #23
   15910:	18fb      	adds	r3, r7, r3
   15912:	2202      	movs	r2, #2
   15914:	701a      	strb	r2, [r3, #0]
            break;
   15916:	e056      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15918:	2317      	movs	r3, #23
   1591a:	18fb      	adds	r3, r7, r3
   1591c:	1cfa      	adds	r2, r7, #3
   1591e:	7812      	ldrb	r2, [r2, #0]
   15920:	701a      	strb	r2, [r3, #0]
            break;
   15922:	e050      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15924:	1cfb      	adds	r3, r7, #3
   15926:	781b      	ldrb	r3, [r3, #0]
   15928:	2b00      	cmp	r3, #0
   1592a:	d104      	bne.n	15936 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1592c:	2317      	movs	r3, #23
   1592e:	18fb      	adds	r3, r7, r3
   15930:	2203      	movs	r2, #3
   15932:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15934:	e047      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15936:	1cfb      	adds	r3, r7, #3
   15938:	781b      	ldrb	r3, [r3, #0]
   1593a:	2b01      	cmp	r3, #1
   1593c:	d104      	bne.n	15948 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1593e:	2317      	movs	r3, #23
   15940:	18fb      	adds	r3, r7, r3
   15942:	2203      	movs	r2, #3
   15944:	701a      	strb	r2, [r3, #0]
            break;
   15946:	e03e      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   15948:	1cfb      	adds	r3, r7, #3
   1594a:	781b      	ldrb	r3, [r3, #0]
   1594c:	2b02      	cmp	r3, #2
   1594e:	d104      	bne.n	1595a <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   15950:	2317      	movs	r3, #23
   15952:	18fb      	adds	r3, r7, r3
   15954:	2203      	movs	r2, #3
   15956:	701a      	strb	r2, [r3, #0]
            break;
   15958:	e035      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1595a:	2317      	movs	r3, #23
   1595c:	18fb      	adds	r3, r7, r3
   1595e:	1cfa      	adds	r2, r7, #3
   15960:	7812      	ldrb	r2, [r2, #0]
   15962:	701a      	strb	r2, [r3, #0]
            break;
   15964:	e02f      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15966:	1cfb      	adds	r3, r7, #3
   15968:	781b      	ldrb	r3, [r3, #0]
   1596a:	2b00      	cmp	r3, #0
   1596c:	d104      	bne.n	15978 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   1596e:	2317      	movs	r3, #23
   15970:	18fb      	adds	r3, r7, r3
   15972:	2204      	movs	r2, #4
   15974:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15976:	e026      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15978:	1cfb      	adds	r3, r7, #3
   1597a:	781b      	ldrb	r3, [r3, #0]
   1597c:	2b01      	cmp	r3, #1
   1597e:	d104      	bne.n	1598a <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15980:	2317      	movs	r3, #23
   15982:	18fb      	adds	r3, r7, r3
   15984:	2204      	movs	r2, #4
   15986:	701a      	strb	r2, [r3, #0]
            break;
   15988:	e01d      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1598a:	1cfb      	adds	r3, r7, #3
   1598c:	781b      	ldrb	r3, [r3, #0]
   1598e:	2b02      	cmp	r3, #2
   15990:	d104      	bne.n	1599c <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15992:	2317      	movs	r3, #23
   15994:	18fb      	adds	r3, r7, r3
   15996:	2204      	movs	r2, #4
   15998:	701a      	strb	r2, [r3, #0]
            break;
   1599a:	e014      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   1599c:	1cfb      	adds	r3, r7, #3
   1599e:	781b      	ldrb	r3, [r3, #0]
   159a0:	2b03      	cmp	r3, #3
   159a2:	d104      	bne.n	159ae <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   159a4:	2317      	movs	r3, #23
   159a6:	18fb      	adds	r3, r7, r3
   159a8:	2204      	movs	r2, #4
   159aa:	701a      	strb	r2, [r3, #0]
            break;
   159ac:	e00b      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   159ae:	2317      	movs	r3, #23
   159b0:	18fb      	adds	r3, r7, r3
   159b2:	1cfa      	adds	r2, r7, #3
   159b4:	7812      	ldrb	r2, [r2, #0]
   159b6:	701a      	strb	r2, [r3, #0]
            break;
   159b8:	e005      	b.n	159c6 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   159ba:	2317      	movs	r3, #23
   159bc:	18fb      	adds	r3, r7, r3
   159be:	1cfa      	adds	r2, r7, #3
   159c0:	7812      	ldrb	r2, [r2, #0]
   159c2:	701a      	strb	r2, [r3, #0]
            break;
   159c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   159c6:	693b      	ldr	r3, [r7, #16]
   159c8:	2b00      	cmp	r3, #0
   159ca:	d108      	bne.n	159de <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   159cc:	2308      	movs	r3, #8
   159ce:	18fa      	adds	r2, r7, r3
   159d0:	6878      	ldr	r0, [r7, #4]
   159d2:	2301      	movs	r3, #1
   159d4:	2110      	movs	r1, #16
   159d6:	4c14      	ldr	r4, [pc, #80]	; (15a28 <lsm6dso_xl_data_rate_set+0x2bc>)
   159d8:	47a0      	blx	r4
   159da:	0003      	movs	r3, r0
   159dc:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   159de:	693b      	ldr	r3, [r7, #16]
   159e0:	2b00      	cmp	r3, #0
   159e2:	d118      	bne.n	15a16 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   159e4:	2317      	movs	r3, #23
   159e6:	18fb      	adds	r3, r7, r3
   159e8:	781b      	ldrb	r3, [r3, #0]
   159ea:	220f      	movs	r2, #15
   159ec:	4013      	ands	r3, r2
   159ee:	b2da      	uxtb	r2, r3
   159f0:	2308      	movs	r3, #8
   159f2:	18fb      	adds	r3, r7, r3
   159f4:	0110      	lsls	r0, r2, #4
   159f6:	781a      	ldrb	r2, [r3, #0]
   159f8:	210f      	movs	r1, #15
   159fa:	400a      	ands	r2, r1
   159fc:	1c11      	adds	r1, r2, #0
   159fe:	1c02      	adds	r2, r0, #0
   15a00:	430a      	orrs	r2, r1
   15a02:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15a04:	2308      	movs	r3, #8
   15a06:	18fa      	adds	r2, r7, r3
   15a08:	6878      	ldr	r0, [r7, #4]
   15a0a:	2301      	movs	r3, #1
   15a0c:	2110      	movs	r1, #16
   15a0e:	4c07      	ldr	r4, [pc, #28]	; (15a2c <lsm6dso_xl_data_rate_set+0x2c0>)
   15a10:	47a0      	blx	r4
   15a12:	0003      	movs	r3, r0
   15a14:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15a16:	693b      	ldr	r3, [r7, #16]
}
   15a18:	0018      	movs	r0, r3
   15a1a:	46bd      	mov	sp, r7
   15a1c:	b007      	add	sp, #28
   15a1e:	bd90      	pop	{r4, r7, pc}
   15a20:	00016249 	.word	0x00016249
   15a24:	0001629d 	.word	0x0001629d
   15a28:	0001563d 	.word	0x0001563d
   15a2c:	00015683 	.word	0x00015683

00015a30 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   15a30:	b590      	push	{r4, r7, lr}
   15a32:	b085      	sub	sp, #20
   15a34:	af00      	add	r7, sp, #0
   15a36:	6078      	str	r0, [r7, #4]
   15a38:	000a      	movs	r2, r1
   15a3a:	1cfb      	adds	r3, r7, #3
   15a3c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15a3e:	2308      	movs	r3, #8
   15a40:	18fa      	adds	r2, r7, r3
   15a42:	6878      	ldr	r0, [r7, #4]
   15a44:	2301      	movs	r3, #1
   15a46:	2111      	movs	r1, #17
   15a48:	4c12      	ldr	r4, [pc, #72]	; (15a94 <lsm6dso_gy_full_scale_set+0x64>)
   15a4a:	47a0      	blx	r4
   15a4c:	0003      	movs	r3, r0
   15a4e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15a50:	68fb      	ldr	r3, [r7, #12]
   15a52:	2b00      	cmp	r3, #0
   15a54:	d119      	bne.n	15a8a <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   15a56:	1cfb      	adds	r3, r7, #3
   15a58:	781b      	ldrb	r3, [r3, #0]
   15a5a:	2207      	movs	r2, #7
   15a5c:	4013      	ands	r3, r2
   15a5e:	b2da      	uxtb	r2, r3
   15a60:	2308      	movs	r3, #8
   15a62:	18fb      	adds	r3, r7, r3
   15a64:	2107      	movs	r1, #7
   15a66:	400a      	ands	r2, r1
   15a68:	1890      	adds	r0, r2, r2
   15a6a:	781a      	ldrb	r2, [r3, #0]
   15a6c:	210e      	movs	r1, #14
   15a6e:	438a      	bics	r2, r1
   15a70:	1c11      	adds	r1, r2, #0
   15a72:	1c02      	adds	r2, r0, #0
   15a74:	430a      	orrs	r2, r1
   15a76:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15a78:	2308      	movs	r3, #8
   15a7a:	18fa      	adds	r2, r7, r3
   15a7c:	6878      	ldr	r0, [r7, #4]
   15a7e:	2301      	movs	r3, #1
   15a80:	2111      	movs	r1, #17
   15a82:	4c05      	ldr	r4, [pc, #20]	; (15a98 <lsm6dso_gy_full_scale_set+0x68>)
   15a84:	47a0      	blx	r4
   15a86:	0003      	movs	r3, r0
   15a88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15a8a:	68fb      	ldr	r3, [r7, #12]
}
   15a8c:	0018      	movs	r0, r3
   15a8e:	46bd      	mov	sp, r7
   15a90:	b005      	add	sp, #20
   15a92:	bd90      	pop	{r4, r7, pc}
   15a94:	0001563d 	.word	0x0001563d
   15a98:	00015683 	.word	0x00015683

00015a9c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   15a9c:	b590      	push	{r4, r7, lr}
   15a9e:	b087      	sub	sp, #28
   15aa0:	af00      	add	r7, sp, #0
   15aa2:	6078      	str	r0, [r7, #4]
   15aa4:	000a      	movs	r2, r1
   15aa6:	1cfb      	adds	r3, r7, #3
   15aa8:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   15aaa:	2317      	movs	r3, #23
   15aac:	18fb      	adds	r3, r7, r3
   15aae:	1cfa      	adds	r2, r7, #3
   15ab0:	7812      	ldrb	r2, [r2, #0]
   15ab2:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15ab4:	230c      	movs	r3, #12
   15ab6:	18fa      	adds	r2, r7, r3
   15ab8:	687b      	ldr	r3, [r7, #4]
   15aba:	0011      	movs	r1, r2
   15abc:	0018      	movs	r0, r3
   15abe:	4ba4      	ldr	r3, [pc, #656]	; (15d50 <lsm6dso_gy_data_rate_set+0x2b4>)
   15ac0:	4798      	blx	r3
   15ac2:	0003      	movs	r3, r0
   15ac4:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15ac6:	693b      	ldr	r3, [r7, #16]
   15ac8:	2b00      	cmp	r3, #0
   15aca:	d000      	beq.n	15ace <lsm6dso_gy_data_rate_set+0x32>
   15acc:	e113      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15ace:	230c      	movs	r3, #12
   15ad0:	18fb      	adds	r3, r7, r3
   15ad2:	781b      	ldrb	r3, [r3, #0]
   15ad4:	07db      	lsls	r3, r3, #31
   15ad6:	0fdb      	lsrs	r3, r3, #31
   15ad8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15ada:	230c      	movs	r3, #12
   15adc:	18fb      	adds	r3, r7, r3
   15ade:	781b      	ldrb	r3, [r3, #0]
   15ae0:	079b      	lsls	r3, r3, #30
   15ae2:	0fdb      	lsrs	r3, r3, #31
   15ae4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15ae6:	4313      	orrs	r3, r2
   15ae8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15aea:	230c      	movs	r3, #12
   15aec:	18fb      	adds	r3, r7, r3
   15aee:	781b      	ldrb	r3, [r3, #0]
   15af0:	075b      	lsls	r3, r3, #29
   15af2:	0fdb      	lsrs	r3, r3, #31
   15af4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15af6:	4313      	orrs	r3, r2
   15af8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15afa:	230c      	movs	r3, #12
   15afc:	18fb      	adds	r3, r7, r3
   15afe:	781b      	ldrb	r3, [r3, #0]
   15b00:	071b      	lsls	r3, r3, #28
   15b02:	0fdb      	lsrs	r3, r3, #31
   15b04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15b06:	4313      	orrs	r3, r2
   15b08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15b0a:	230c      	movs	r3, #12
   15b0c:	18fb      	adds	r3, r7, r3
   15b0e:	781b      	ldrb	r3, [r3, #0]
   15b10:	06db      	lsls	r3, r3, #27
   15b12:	0fdb      	lsrs	r3, r3, #31
   15b14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15b16:	4313      	orrs	r3, r2
   15b18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15b1a:	230c      	movs	r3, #12
   15b1c:	18fb      	adds	r3, r7, r3
   15b1e:	781b      	ldrb	r3, [r3, #0]
   15b20:	069b      	lsls	r3, r3, #26
   15b22:	0fdb      	lsrs	r3, r3, #31
   15b24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15b26:	4313      	orrs	r3, r2
   15b28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15b2a:	230c      	movs	r3, #12
   15b2c:	18fb      	adds	r3, r7, r3
   15b2e:	781b      	ldrb	r3, [r3, #0]
   15b30:	065b      	lsls	r3, r3, #25
   15b32:	0fdb      	lsrs	r3, r3, #31
   15b34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15b36:	4313      	orrs	r3, r2
   15b38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15b3a:	230c      	movs	r3, #12
   15b3c:	18fb      	adds	r3, r7, r3
   15b3e:	781b      	ldrb	r3, [r3, #0]
   15b40:	061b      	lsls	r3, r3, #24
   15b42:	0fdb      	lsrs	r3, r3, #31
   15b44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15b46:	4313      	orrs	r3, r2
   15b48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15b4a:	230c      	movs	r3, #12
   15b4c:	18fb      	adds	r3, r7, r3
   15b4e:	785b      	ldrb	r3, [r3, #1]
   15b50:	07db      	lsls	r3, r3, #31
   15b52:	0fdb      	lsrs	r3, r3, #31
   15b54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15b56:	4313      	orrs	r3, r2
   15b58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15b5a:	230c      	movs	r3, #12
   15b5c:	18fb      	adds	r3, r7, r3
   15b5e:	785b      	ldrb	r3, [r3, #1]
   15b60:	079b      	lsls	r3, r3, #30
   15b62:	0fdb      	lsrs	r3, r3, #31
   15b64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   15b66:	4313      	orrs	r3, r2
   15b68:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15b6a:	230c      	movs	r3, #12
   15b6c:	18fb      	adds	r3, r7, r3
   15b6e:	785b      	ldrb	r3, [r3, #1]
   15b70:	075b      	lsls	r3, r3, #29
   15b72:	0fdb      	lsrs	r3, r3, #31
   15b74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   15b76:	4313      	orrs	r3, r2
   15b78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15b7a:	230c      	movs	r3, #12
   15b7c:	18fb      	adds	r3, r7, r3
   15b7e:	785b      	ldrb	r3, [r3, #1]
   15b80:	071b      	lsls	r3, r3, #28
   15b82:	0fdb      	lsrs	r3, r3, #31
   15b84:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   15b86:	4313      	orrs	r3, r2
   15b88:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15b8a:	230c      	movs	r3, #12
   15b8c:	18fb      	adds	r3, r7, r3
   15b8e:	785b      	ldrb	r3, [r3, #1]
   15b90:	06db      	lsls	r3, r3, #27
   15b92:	0fdb      	lsrs	r3, r3, #31
   15b94:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15b96:	4313      	orrs	r3, r2
   15b98:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15b9a:	230c      	movs	r3, #12
   15b9c:	18fb      	adds	r3, r7, r3
   15b9e:	785b      	ldrb	r3, [r3, #1]
   15ba0:	069b      	lsls	r3, r3, #26
   15ba2:	0fdb      	lsrs	r3, r3, #31
   15ba4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15ba6:	4313      	orrs	r3, r2
   15ba8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15baa:	230c      	movs	r3, #12
   15bac:	18fb      	adds	r3, r7, r3
   15bae:	785b      	ldrb	r3, [r3, #1]
   15bb0:	065b      	lsls	r3, r3, #25
   15bb2:	0fdb      	lsrs	r3, r3, #31
   15bb4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15bb6:	4313      	orrs	r3, r2
   15bb8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15bba:	230c      	movs	r3, #12
   15bbc:	18fb      	adds	r3, r7, r3
   15bbe:	785b      	ldrb	r3, [r3, #1]
   15bc0:	061b      	lsls	r3, r3, #24
   15bc2:	0fdb      	lsrs	r3, r3, #31
   15bc4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15bc6:	4313      	orrs	r3, r2
   15bc8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15bca:	2b01      	cmp	r3, #1
   15bcc:	d000      	beq.n	15bd0 <lsm6dso_gy_data_rate_set+0x134>
   15bce:	e092      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15bd0:	230b      	movs	r3, #11
   15bd2:	18fa      	adds	r2, r7, r3
   15bd4:	687b      	ldr	r3, [r7, #4]
   15bd6:	0011      	movs	r1, r2
   15bd8:	0018      	movs	r0, r3
   15bda:	4b5e      	ldr	r3, [pc, #376]	; (15d54 <lsm6dso_gy_data_rate_set+0x2b8>)
   15bdc:	4798      	blx	r3
   15bde:	0003      	movs	r3, r0
   15be0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15be2:	693b      	ldr	r3, [r7, #16]
   15be4:	2b00      	cmp	r3, #0
   15be6:	d000      	beq.n	15bea <lsm6dso_gy_data_rate_set+0x14e>
   15be8:	e085      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15bea:	230b      	movs	r3, #11
   15bec:	18fb      	adds	r3, r7, r3
   15bee:	781b      	ldrb	r3, [r3, #0]
   15bf0:	2b01      	cmp	r3, #1
   15bf2:	d017      	beq.n	15c24 <lsm6dso_gy_data_rate_set+0x188>
   15bf4:	dc02      	bgt.n	15bfc <lsm6dso_gy_data_rate_set+0x160>
   15bf6:	2b00      	cmp	r3, #0
   15bf8:	d005      	beq.n	15c06 <lsm6dso_gy_data_rate_set+0x16a>
   15bfa:	e076      	b.n	15cea <lsm6dso_gy_data_rate_set+0x24e>
   15bfc:	2b02      	cmp	r3, #2
   15bfe:	d029      	beq.n	15c54 <lsm6dso_gy_data_rate_set+0x1b8>
   15c00:	2b03      	cmp	r3, #3
   15c02:	d048      	beq.n	15c96 <lsm6dso_gy_data_rate_set+0x1fa>
   15c04:	e071      	b.n	15cea <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   15c06:	1cfb      	adds	r3, r7, #3
   15c08:	781b      	ldrb	r3, [r3, #0]
   15c0a:	2b00      	cmp	r3, #0
   15c0c:	d104      	bne.n	15c18 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   15c0e:	2317      	movs	r3, #23
   15c10:	18fb      	adds	r3, r7, r3
   15c12:	2201      	movs	r2, #1
   15c14:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15c16:	e06e      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15c18:	2317      	movs	r3, #23
   15c1a:	18fb      	adds	r3, r7, r3
   15c1c:	1cfa      	adds	r2, r7, #3
   15c1e:	7812      	ldrb	r2, [r2, #0]
   15c20:	701a      	strb	r2, [r3, #0]
            break;
   15c22:	e068      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15c24:	1cfb      	adds	r3, r7, #3
   15c26:	781b      	ldrb	r3, [r3, #0]
   15c28:	2b00      	cmp	r3, #0
   15c2a:	d104      	bne.n	15c36 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15c2c:	2317      	movs	r3, #23
   15c2e:	18fb      	adds	r3, r7, r3
   15c30:	2202      	movs	r2, #2
   15c32:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15c34:	e05f      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15c36:	1cfb      	adds	r3, r7, #3
   15c38:	781b      	ldrb	r3, [r3, #0]
   15c3a:	2b01      	cmp	r3, #1
   15c3c:	d104      	bne.n	15c48 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15c3e:	2317      	movs	r3, #23
   15c40:	18fb      	adds	r3, r7, r3
   15c42:	2202      	movs	r2, #2
   15c44:	701a      	strb	r2, [r3, #0]
            break;
   15c46:	e056      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15c48:	2317      	movs	r3, #23
   15c4a:	18fb      	adds	r3, r7, r3
   15c4c:	1cfa      	adds	r2, r7, #3
   15c4e:	7812      	ldrb	r2, [r2, #0]
   15c50:	701a      	strb	r2, [r3, #0]
            break;
   15c52:	e050      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15c54:	1cfb      	adds	r3, r7, #3
   15c56:	781b      	ldrb	r3, [r3, #0]
   15c58:	2b00      	cmp	r3, #0
   15c5a:	d104      	bne.n	15c66 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15c5c:	2317      	movs	r3, #23
   15c5e:	18fb      	adds	r3, r7, r3
   15c60:	2203      	movs	r2, #3
   15c62:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15c64:	e047      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15c66:	1cfb      	adds	r3, r7, #3
   15c68:	781b      	ldrb	r3, [r3, #0]
   15c6a:	2b01      	cmp	r3, #1
   15c6c:	d104      	bne.n	15c78 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15c6e:	2317      	movs	r3, #23
   15c70:	18fb      	adds	r3, r7, r3
   15c72:	2203      	movs	r2, #3
   15c74:	701a      	strb	r2, [r3, #0]
            break;
   15c76:	e03e      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15c78:	1cfb      	adds	r3, r7, #3
   15c7a:	781b      	ldrb	r3, [r3, #0]
   15c7c:	2b02      	cmp	r3, #2
   15c7e:	d104      	bne.n	15c8a <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15c80:	2317      	movs	r3, #23
   15c82:	18fb      	adds	r3, r7, r3
   15c84:	2203      	movs	r2, #3
   15c86:	701a      	strb	r2, [r3, #0]
            break;
   15c88:	e035      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15c8a:	2317      	movs	r3, #23
   15c8c:	18fb      	adds	r3, r7, r3
   15c8e:	1cfa      	adds	r2, r7, #3
   15c90:	7812      	ldrb	r2, [r2, #0]
   15c92:	701a      	strb	r2, [r3, #0]
            break;
   15c94:	e02f      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15c96:	1cfb      	adds	r3, r7, #3
   15c98:	781b      	ldrb	r3, [r3, #0]
   15c9a:	2b00      	cmp	r3, #0
   15c9c:	d104      	bne.n	15ca8 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15c9e:	2317      	movs	r3, #23
   15ca0:	18fb      	adds	r3, r7, r3
   15ca2:	2204      	movs	r2, #4
   15ca4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15ca6:	e026      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15ca8:	1cfb      	adds	r3, r7, #3
   15caa:	781b      	ldrb	r3, [r3, #0]
   15cac:	2b01      	cmp	r3, #1
   15cae:	d104      	bne.n	15cba <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15cb0:	2317      	movs	r3, #23
   15cb2:	18fb      	adds	r3, r7, r3
   15cb4:	2204      	movs	r2, #4
   15cb6:	701a      	strb	r2, [r3, #0]
            break;
   15cb8:	e01d      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15cba:	1cfb      	adds	r3, r7, #3
   15cbc:	781b      	ldrb	r3, [r3, #0]
   15cbe:	2b02      	cmp	r3, #2
   15cc0:	d104      	bne.n	15ccc <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15cc2:	2317      	movs	r3, #23
   15cc4:	18fb      	adds	r3, r7, r3
   15cc6:	2204      	movs	r2, #4
   15cc8:	701a      	strb	r2, [r3, #0]
            break;
   15cca:	e014      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   15ccc:	1cfb      	adds	r3, r7, #3
   15cce:	781b      	ldrb	r3, [r3, #0]
   15cd0:	2b03      	cmp	r3, #3
   15cd2:	d104      	bne.n	15cde <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15cd4:	2317      	movs	r3, #23
   15cd6:	18fb      	adds	r3, r7, r3
   15cd8:	2204      	movs	r2, #4
   15cda:	701a      	strb	r2, [r3, #0]
            break;
   15cdc:	e00b      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15cde:	2317      	movs	r3, #23
   15ce0:	18fb      	adds	r3, r7, r3
   15ce2:	1cfa      	adds	r2, r7, #3
   15ce4:	7812      	ldrb	r2, [r2, #0]
   15ce6:	701a      	strb	r2, [r3, #0]
            break;
   15ce8:	e005      	b.n	15cf6 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   15cea:	2317      	movs	r3, #23
   15cec:	18fb      	adds	r3, r7, r3
   15cee:	1cfa      	adds	r2, r7, #3
   15cf0:	7812      	ldrb	r2, [r2, #0]
   15cf2:	701a      	strb	r2, [r3, #0]
            break;
   15cf4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15cf6:	693b      	ldr	r3, [r7, #16]
   15cf8:	2b00      	cmp	r3, #0
   15cfa:	d108      	bne.n	15d0e <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15cfc:	2308      	movs	r3, #8
   15cfe:	18fa      	adds	r2, r7, r3
   15d00:	6878      	ldr	r0, [r7, #4]
   15d02:	2301      	movs	r3, #1
   15d04:	2111      	movs	r1, #17
   15d06:	4c14      	ldr	r4, [pc, #80]	; (15d58 <lsm6dso_gy_data_rate_set+0x2bc>)
   15d08:	47a0      	blx	r4
   15d0a:	0003      	movs	r3, r0
   15d0c:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   15d0e:	693b      	ldr	r3, [r7, #16]
   15d10:	2b00      	cmp	r3, #0
   15d12:	d118      	bne.n	15d46 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   15d14:	2317      	movs	r3, #23
   15d16:	18fb      	adds	r3, r7, r3
   15d18:	781b      	ldrb	r3, [r3, #0]
   15d1a:	220f      	movs	r2, #15
   15d1c:	4013      	ands	r3, r2
   15d1e:	b2da      	uxtb	r2, r3
   15d20:	2308      	movs	r3, #8
   15d22:	18fb      	adds	r3, r7, r3
   15d24:	0110      	lsls	r0, r2, #4
   15d26:	781a      	ldrb	r2, [r3, #0]
   15d28:	210f      	movs	r1, #15
   15d2a:	400a      	ands	r2, r1
   15d2c:	1c11      	adds	r1, r2, #0
   15d2e:	1c02      	adds	r2, r0, #0
   15d30:	430a      	orrs	r2, r1
   15d32:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15d34:	2308      	movs	r3, #8
   15d36:	18fa      	adds	r2, r7, r3
   15d38:	6878      	ldr	r0, [r7, #4]
   15d3a:	2301      	movs	r3, #1
   15d3c:	2111      	movs	r1, #17
   15d3e:	4c07      	ldr	r4, [pc, #28]	; (15d5c <lsm6dso_gy_data_rate_set+0x2c0>)
   15d40:	47a0      	blx	r4
   15d42:	0003      	movs	r3, r0
   15d44:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15d46:	693b      	ldr	r3, [r7, #16]
}
   15d48:	0018      	movs	r0, r3
   15d4a:	46bd      	mov	sp, r7
   15d4c:	b007      	add	sp, #28
   15d4e:	bd90      	pop	{r4, r7, pc}
   15d50:	00016249 	.word	0x00016249
   15d54:	0001629d 	.word	0x0001629d
   15d58:	0001563d 	.word	0x0001563d
   15d5c:	00015683 	.word	0x00015683

00015d60 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15d60:	b590      	push	{r4, r7, lr}
   15d62:	b085      	sub	sp, #20
   15d64:	af00      	add	r7, sp, #0
   15d66:	6078      	str	r0, [r7, #4]
   15d68:	000a      	movs	r2, r1
   15d6a:	1cfb      	adds	r3, r7, #3
   15d6c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15d6e:	2308      	movs	r3, #8
   15d70:	18fa      	adds	r2, r7, r3
   15d72:	6878      	ldr	r0, [r7, #4]
   15d74:	2301      	movs	r3, #1
   15d76:	2112      	movs	r1, #18
   15d78:	4c12      	ldr	r4, [pc, #72]	; (15dc4 <lsm6dso_block_data_update_set+0x64>)
   15d7a:	47a0      	blx	r4
   15d7c:	0003      	movs	r3, r0
   15d7e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15d80:	68fb      	ldr	r3, [r7, #12]
   15d82:	2b00      	cmp	r3, #0
   15d84:	d119      	bne.n	15dba <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   15d86:	1cfb      	adds	r3, r7, #3
   15d88:	781b      	ldrb	r3, [r3, #0]
   15d8a:	2201      	movs	r2, #1
   15d8c:	4013      	ands	r3, r2
   15d8e:	b2da      	uxtb	r2, r3
   15d90:	2308      	movs	r3, #8
   15d92:	18fb      	adds	r3, r7, r3
   15d94:	2101      	movs	r1, #1
   15d96:	400a      	ands	r2, r1
   15d98:	0190      	lsls	r0, r2, #6
   15d9a:	781a      	ldrb	r2, [r3, #0]
   15d9c:	2140      	movs	r1, #64	; 0x40
   15d9e:	438a      	bics	r2, r1
   15da0:	1c11      	adds	r1, r2, #0
   15da2:	1c02      	adds	r2, r0, #0
   15da4:	430a      	orrs	r2, r1
   15da6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15da8:	2308      	movs	r3, #8
   15daa:	18fa      	adds	r2, r7, r3
   15dac:	6878      	ldr	r0, [r7, #4]
   15dae:	2301      	movs	r3, #1
   15db0:	2112      	movs	r1, #18
   15db2:	4c05      	ldr	r4, [pc, #20]	; (15dc8 <lsm6dso_block_data_update_set+0x68>)
   15db4:	47a0      	blx	r4
   15db6:	0003      	movs	r3, r0
   15db8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15dba:	68fb      	ldr	r3, [r7, #12]
}
   15dbc:	0018      	movs	r0, r3
   15dbe:	46bd      	mov	sp, r7
   15dc0:	b005      	add	sp, #20
   15dc2:	bd90      	pop	{r4, r7, pc}
   15dc4:	0001563d 	.word	0x0001563d
   15dc8:	00015683 	.word	0x00015683

00015dcc <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   15dcc:	b590      	push	{r4, r7, lr}
   15dce:	b085      	sub	sp, #20
   15dd0:	af00      	add	r7, sp, #0
   15dd2:	6078      	str	r0, [r7, #4]
   15dd4:	000a      	movs	r2, r1
   15dd6:	1cfb      	adds	r3, r7, #3
   15dd8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15dda:	2308      	movs	r3, #8
   15ddc:	18fa      	adds	r2, r7, r3
   15dde:	6878      	ldr	r0, [r7, #4]
   15de0:	2301      	movs	r3, #1
   15de2:	2115      	movs	r1, #21
   15de4:	4c12      	ldr	r4, [pc, #72]	; (15e30 <lsm6dso_xl_offset_weight_set+0x64>)
   15de6:	47a0      	blx	r4
   15de8:	0003      	movs	r3, r0
   15dea:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15dec:	68fb      	ldr	r3, [r7, #12]
   15dee:	2b00      	cmp	r3, #0
   15df0:	d119      	bne.n	15e26 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   15df2:	1cfb      	adds	r3, r7, #3
   15df4:	781b      	ldrb	r3, [r3, #0]
   15df6:	2201      	movs	r2, #1
   15df8:	4013      	ands	r3, r2
   15dfa:	b2da      	uxtb	r2, r3
   15dfc:	2308      	movs	r3, #8
   15dfe:	18fb      	adds	r3, r7, r3
   15e00:	2101      	movs	r1, #1
   15e02:	400a      	ands	r2, r1
   15e04:	00d0      	lsls	r0, r2, #3
   15e06:	781a      	ldrb	r2, [r3, #0]
   15e08:	2108      	movs	r1, #8
   15e0a:	438a      	bics	r2, r1
   15e0c:	1c11      	adds	r1, r2, #0
   15e0e:	1c02      	adds	r2, r0, #0
   15e10:	430a      	orrs	r2, r1
   15e12:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15e14:	2308      	movs	r3, #8
   15e16:	18fa      	adds	r2, r7, r3
   15e18:	6878      	ldr	r0, [r7, #4]
   15e1a:	2301      	movs	r3, #1
   15e1c:	2115      	movs	r1, #21
   15e1e:	4c05      	ldr	r4, [pc, #20]	; (15e34 <lsm6dso_xl_offset_weight_set+0x68>)
   15e20:	47a0      	blx	r4
   15e22:	0003      	movs	r3, r0
   15e24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e26:	68fb      	ldr	r3, [r7, #12]
}
   15e28:	0018      	movs	r0, r3
   15e2a:	46bd      	mov	sp, r7
   15e2c:	b005      	add	sp, #20
   15e2e:	bd90      	pop	{r4, r7, pc}
   15e30:	0001563d 	.word	0x0001563d
   15e34:	00015683 	.word	0x00015683

00015e38 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15e38:	b590      	push	{r4, r7, lr}
   15e3a:	b085      	sub	sp, #20
   15e3c:	af00      	add	r7, sp, #0
   15e3e:	6078      	str	r0, [r7, #4]
   15e40:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   15e42:	2308      	movs	r3, #8
   15e44:	18fa      	adds	r2, r7, r3
   15e46:	6878      	ldr	r0, [r7, #4]
   15e48:	2301      	movs	r3, #1
   15e4a:	211e      	movs	r1, #30
   15e4c:	4c08      	ldr	r4, [pc, #32]	; (15e70 <lsm6dso_xl_flag_data_ready_get+0x38>)
   15e4e:	47a0      	blx	r4
   15e50:	0003      	movs	r3, r0
   15e52:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   15e54:	2308      	movs	r3, #8
   15e56:	18fb      	adds	r3, r7, r3
   15e58:	781b      	ldrb	r3, [r3, #0]
   15e5a:	07db      	lsls	r3, r3, #31
   15e5c:	0fdb      	lsrs	r3, r3, #31
   15e5e:	b2db      	uxtb	r3, r3
   15e60:	001a      	movs	r2, r3
   15e62:	683b      	ldr	r3, [r7, #0]
   15e64:	701a      	strb	r2, [r3, #0]

  return ret;
   15e66:	68fb      	ldr	r3, [r7, #12]
}
   15e68:	0018      	movs	r0, r3
   15e6a:	46bd      	mov	sp, r7
   15e6c:	b005      	add	sp, #20
   15e6e:	bd90      	pop	{r4, r7, pc}
   15e70:	0001563d 	.word	0x0001563d

00015e74 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   15e74:	b590      	push	{r4, r7, lr}
   15e76:	b087      	sub	sp, #28
   15e78:	af00      	add	r7, sp, #0
   15e7a:	6078      	str	r0, [r7, #4]
   15e7c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   15e7e:	230c      	movs	r3, #12
   15e80:	18fa      	adds	r2, r7, r3
   15e82:	6878      	ldr	r0, [r7, #4]
   15e84:	2306      	movs	r3, #6
   15e86:	2128      	movs	r1, #40	; 0x28
   15e88:	4c26      	ldr	r4, [pc, #152]	; (15f24 <lsm6dso_acceleration_raw_get+0xb0>)
   15e8a:	47a0      	blx	r4
   15e8c:	0003      	movs	r3, r0
   15e8e:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   15e90:	230c      	movs	r3, #12
   15e92:	18fb      	adds	r3, r7, r3
   15e94:	785b      	ldrb	r3, [r3, #1]
   15e96:	b21a      	sxth	r2, r3
   15e98:	683b      	ldr	r3, [r7, #0]
   15e9a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   15e9c:	683b      	ldr	r3, [r7, #0]
   15e9e:	2200      	movs	r2, #0
   15ea0:	5e9b      	ldrsh	r3, [r3, r2]
   15ea2:	b29b      	uxth	r3, r3
   15ea4:	021b      	lsls	r3, r3, #8
   15ea6:	b29a      	uxth	r2, r3
   15ea8:	230c      	movs	r3, #12
   15eaa:	18fb      	adds	r3, r7, r3
   15eac:	781b      	ldrb	r3, [r3, #0]
   15eae:	b29b      	uxth	r3, r3
   15eb0:	18d3      	adds	r3, r2, r3
   15eb2:	b29b      	uxth	r3, r3
   15eb4:	b21a      	sxth	r2, r3
   15eb6:	683b      	ldr	r3, [r7, #0]
   15eb8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15eba:	683b      	ldr	r3, [r7, #0]
   15ebc:	3302      	adds	r3, #2
   15ebe:	220c      	movs	r2, #12
   15ec0:	18ba      	adds	r2, r7, r2
   15ec2:	78d2      	ldrb	r2, [r2, #3]
   15ec4:	b212      	sxth	r2, r2
   15ec6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   15ec8:	683b      	ldr	r3, [r7, #0]
   15eca:	3302      	adds	r3, #2
   15ecc:	683a      	ldr	r2, [r7, #0]
   15ece:	3202      	adds	r2, #2
   15ed0:	2100      	movs	r1, #0
   15ed2:	5e52      	ldrsh	r2, [r2, r1]
   15ed4:	b292      	uxth	r2, r2
   15ed6:	0212      	lsls	r2, r2, #8
   15ed8:	b291      	uxth	r1, r2
   15eda:	220c      	movs	r2, #12
   15edc:	18ba      	adds	r2, r7, r2
   15ede:	7892      	ldrb	r2, [r2, #2]
   15ee0:	b292      	uxth	r2, r2
   15ee2:	188a      	adds	r2, r1, r2
   15ee4:	b292      	uxth	r2, r2
   15ee6:	b212      	sxth	r2, r2
   15ee8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   15eea:	683b      	ldr	r3, [r7, #0]
   15eec:	3304      	adds	r3, #4
   15eee:	220c      	movs	r2, #12
   15ef0:	18ba      	adds	r2, r7, r2
   15ef2:	7952      	ldrb	r2, [r2, #5]
   15ef4:	b212      	sxth	r2, r2
   15ef6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   15ef8:	683b      	ldr	r3, [r7, #0]
   15efa:	3304      	adds	r3, #4
   15efc:	683a      	ldr	r2, [r7, #0]
   15efe:	3204      	adds	r2, #4
   15f00:	2100      	movs	r1, #0
   15f02:	5e52      	ldrsh	r2, [r2, r1]
   15f04:	b292      	uxth	r2, r2
   15f06:	0212      	lsls	r2, r2, #8
   15f08:	b291      	uxth	r1, r2
   15f0a:	220c      	movs	r2, #12
   15f0c:	18ba      	adds	r2, r7, r2
   15f0e:	7912      	ldrb	r2, [r2, #4]
   15f10:	b292      	uxth	r2, r2
   15f12:	188a      	adds	r2, r1, r2
   15f14:	b292      	uxth	r2, r2
   15f16:	b212      	sxth	r2, r2
   15f18:	801a      	strh	r2, [r3, #0]

  return ret;
   15f1a:	697b      	ldr	r3, [r7, #20]
}
   15f1c:	0018      	movs	r0, r3
   15f1e:	46bd      	mov	sp, r7
   15f20:	b007      	add	sp, #28
   15f22:	bd90      	pop	{r4, r7, pc}
   15f24:	0001563d 	.word	0x0001563d

00015f28 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15f28:	b590      	push	{r4, r7, lr}
   15f2a:	b085      	sub	sp, #20
   15f2c:	af00      	add	r7, sp, #0
   15f2e:	6078      	str	r0, [r7, #4]
   15f30:	000a      	movs	r2, r1
   15f32:	1cfb      	adds	r3, r7, #3
   15f34:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15f36:	2308      	movs	r3, #8
   15f38:	18fa      	adds	r2, r7, r3
   15f3a:	6878      	ldr	r0, [r7, #4]
   15f3c:	2301      	movs	r3, #1
   15f3e:	2101      	movs	r1, #1
   15f40:	4c11      	ldr	r4, [pc, #68]	; (15f88 <lsm6dso_mem_bank_set+0x60>)
   15f42:	47a0      	blx	r4
   15f44:	0003      	movs	r3, r0
   15f46:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15f48:	68fb      	ldr	r3, [r7, #12]
   15f4a:	2b00      	cmp	r3, #0
   15f4c:	d117      	bne.n	15f7e <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   15f4e:	1cfb      	adds	r3, r7, #3
   15f50:	781b      	ldrb	r3, [r3, #0]
   15f52:	2203      	movs	r2, #3
   15f54:	4013      	ands	r3, r2
   15f56:	b2da      	uxtb	r2, r3
   15f58:	2308      	movs	r3, #8
   15f5a:	18fb      	adds	r3, r7, r3
   15f5c:	0190      	lsls	r0, r2, #6
   15f5e:	781a      	ldrb	r2, [r3, #0]
   15f60:	213f      	movs	r1, #63	; 0x3f
   15f62:	400a      	ands	r2, r1
   15f64:	1c11      	adds	r1, r2, #0
   15f66:	1c02      	adds	r2, r0, #0
   15f68:	430a      	orrs	r2, r1
   15f6a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15f6c:	2308      	movs	r3, #8
   15f6e:	18fa      	adds	r2, r7, r3
   15f70:	6878      	ldr	r0, [r7, #4]
   15f72:	2301      	movs	r3, #1
   15f74:	2101      	movs	r1, #1
   15f76:	4c05      	ldr	r4, [pc, #20]	; (15f8c <lsm6dso_mem_bank_set+0x64>)
   15f78:	47a0      	blx	r4
   15f7a:	0003      	movs	r3, r0
   15f7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15f7e:	68fb      	ldr	r3, [r7, #12]
}
   15f80:	0018      	movs	r0, r3
   15f82:	46bd      	mov	sp, r7
   15f84:	b005      	add	sp, #20
   15f86:	bd90      	pop	{r4, r7, pc}
   15f88:	0001563d 	.word	0x0001563d
   15f8c:	00015683 	.word	0x00015683

00015f90 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   15f90:	b590      	push	{r4, r7, lr}
   15f92:	b085      	sub	sp, #20
   15f94:	af00      	add	r7, sp, #0
   15f96:	6078      	str	r0, [r7, #4]
   15f98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15f9a:	683a      	ldr	r2, [r7, #0]
   15f9c:	6878      	ldr	r0, [r7, #4]
   15f9e:	2301      	movs	r3, #1
   15fa0:	210f      	movs	r1, #15
   15fa2:	4c04      	ldr	r4, [pc, #16]	; (15fb4 <lsm6dso_device_id_get+0x24>)
   15fa4:	47a0      	blx	r4
   15fa6:	0003      	movs	r3, r0
   15fa8:	60fb      	str	r3, [r7, #12]

  return ret;
   15faa:	68fb      	ldr	r3, [r7, #12]
}
   15fac:	0018      	movs	r0, r3
   15fae:	46bd      	mov	sp, r7
   15fb0:	b005      	add	sp, #20
   15fb2:	bd90      	pop	{r4, r7, pc}
   15fb4:	0001563d 	.word	0x0001563d

00015fb8 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15fb8:	b590      	push	{r4, r7, lr}
   15fba:	b085      	sub	sp, #20
   15fbc:	af00      	add	r7, sp, #0
   15fbe:	6078      	str	r0, [r7, #4]
   15fc0:	000a      	movs	r2, r1
   15fc2:	1cfb      	adds	r3, r7, #3
   15fc4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15fc6:	2308      	movs	r3, #8
   15fc8:	18fa      	adds	r2, r7, r3
   15fca:	6878      	ldr	r0, [r7, #4]
   15fcc:	2301      	movs	r3, #1
   15fce:	2112      	movs	r1, #18
   15fd0:	4c12      	ldr	r4, [pc, #72]	; (1601c <lsm6dso_reset_set+0x64>)
   15fd2:	47a0      	blx	r4
   15fd4:	0003      	movs	r3, r0
   15fd6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15fd8:	68fb      	ldr	r3, [r7, #12]
   15fda:	2b00      	cmp	r3, #0
   15fdc:	d119      	bne.n	16012 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   15fde:	1cfb      	adds	r3, r7, #3
   15fe0:	781b      	ldrb	r3, [r3, #0]
   15fe2:	2201      	movs	r2, #1
   15fe4:	4013      	ands	r3, r2
   15fe6:	b2da      	uxtb	r2, r3
   15fe8:	2308      	movs	r3, #8
   15fea:	18fb      	adds	r3, r7, r3
   15fec:	2101      	movs	r1, #1
   15fee:	400a      	ands	r2, r1
   15ff0:	0010      	movs	r0, r2
   15ff2:	781a      	ldrb	r2, [r3, #0]
   15ff4:	2101      	movs	r1, #1
   15ff6:	438a      	bics	r2, r1
   15ff8:	1c11      	adds	r1, r2, #0
   15ffa:	1c02      	adds	r2, r0, #0
   15ffc:	430a      	orrs	r2, r1
   15ffe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   16000:	2308      	movs	r3, #8
   16002:	18fa      	adds	r2, r7, r3
   16004:	6878      	ldr	r0, [r7, #4]
   16006:	2301      	movs	r3, #1
   16008:	2112      	movs	r1, #18
   1600a:	4c05      	ldr	r4, [pc, #20]	; (16020 <lsm6dso_reset_set+0x68>)
   1600c:	47a0      	blx	r4
   1600e:	0003      	movs	r3, r0
   16010:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16012:	68fb      	ldr	r3, [r7, #12]
}
   16014:	0018      	movs	r0, r3
   16016:	46bd      	mov	sp, r7
   16018:	b005      	add	sp, #20
   1601a:	bd90      	pop	{r4, r7, pc}
   1601c:	0001563d 	.word	0x0001563d
   16020:	00015683 	.word	0x00015683

00016024 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   16024:	b590      	push	{r4, r7, lr}
   16026:	b085      	sub	sp, #20
   16028:	af00      	add	r7, sp, #0
   1602a:	6078      	str	r0, [r7, #4]
   1602c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   1602e:	2308      	movs	r3, #8
   16030:	18fa      	adds	r2, r7, r3
   16032:	6878      	ldr	r0, [r7, #4]
   16034:	2301      	movs	r3, #1
   16036:	2112      	movs	r1, #18
   16038:	4c08      	ldr	r4, [pc, #32]	; (1605c <lsm6dso_reset_get+0x38>)
   1603a:	47a0      	blx	r4
   1603c:	0003      	movs	r3, r0
   1603e:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   16040:	2308      	movs	r3, #8
   16042:	18fb      	adds	r3, r7, r3
   16044:	781b      	ldrb	r3, [r3, #0]
   16046:	07db      	lsls	r3, r3, #31
   16048:	0fdb      	lsrs	r3, r3, #31
   1604a:	b2db      	uxtb	r3, r3
   1604c:	001a      	movs	r2, r3
   1604e:	683b      	ldr	r3, [r7, #0]
   16050:	701a      	strb	r2, [r3, #0]

  return ret;
   16052:	68fb      	ldr	r3, [r7, #12]
}
   16054:	0018      	movs	r0, r3
   16056:	46bd      	mov	sp, r7
   16058:	b005      	add	sp, #20
   1605a:	bd90      	pop	{r4, r7, pc}
   1605c:	0001563d 	.word	0x0001563d

00016060 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   16060:	b590      	push	{r4, r7, lr}
   16062:	b085      	sub	sp, #20
   16064:	af00      	add	r7, sp, #0
   16066:	6078      	str	r0, [r7, #4]
   16068:	000a      	movs	r2, r1
   1606a:	1cfb      	adds	r3, r7, #3
   1606c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1606e:	2308      	movs	r3, #8
   16070:	18fa      	adds	r2, r7, r3
   16072:	6878      	ldr	r0, [r7, #4]
   16074:	2301      	movs	r3, #1
   16076:	2110      	movs	r1, #16
   16078:	4c12      	ldr	r4, [pc, #72]	; (160c4 <lsm6dso_xl_filter_lp2_set+0x64>)
   1607a:	47a0      	blx	r4
   1607c:	0003      	movs	r3, r0
   1607e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16080:	68fb      	ldr	r3, [r7, #12]
   16082:	2b00      	cmp	r3, #0
   16084:	d119      	bne.n	160ba <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   16086:	1cfb      	adds	r3, r7, #3
   16088:	781b      	ldrb	r3, [r3, #0]
   1608a:	2201      	movs	r2, #1
   1608c:	4013      	ands	r3, r2
   1608e:	b2da      	uxtb	r2, r3
   16090:	2308      	movs	r3, #8
   16092:	18fb      	adds	r3, r7, r3
   16094:	2101      	movs	r1, #1
   16096:	400a      	ands	r2, r1
   16098:	1890      	adds	r0, r2, r2
   1609a:	781a      	ldrb	r2, [r3, #0]
   1609c:	2102      	movs	r1, #2
   1609e:	438a      	bics	r2, r1
   160a0:	1c11      	adds	r1, r2, #0
   160a2:	1c02      	adds	r2, r0, #0
   160a4:	430a      	orrs	r2, r1
   160a6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   160a8:	2308      	movs	r3, #8
   160aa:	18fa      	adds	r2, r7, r3
   160ac:	6878      	ldr	r0, [r7, #4]
   160ae:	2301      	movs	r3, #1
   160b0:	2110      	movs	r1, #16
   160b2:	4c05      	ldr	r4, [pc, #20]	; (160c8 <lsm6dso_xl_filter_lp2_set+0x68>)
   160b4:	47a0      	blx	r4
   160b6:	0003      	movs	r3, r0
   160b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   160ba:	68fb      	ldr	r3, [r7, #12]
}
   160bc:	0018      	movs	r0, r3
   160be:	46bd      	mov	sp, r7
   160c0:	b005      	add	sp, #20
   160c2:	bd90      	pop	{r4, r7, pc}
   160c4:	0001563d 	.word	0x0001563d
   160c8:	00015683 	.word	0x00015683

000160cc <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   160cc:	b590      	push	{r4, r7, lr}
   160ce:	b085      	sub	sp, #20
   160d0:	af00      	add	r7, sp, #0
   160d2:	6078      	str	r0, [r7, #4]
   160d4:	000a      	movs	r2, r1
   160d6:	1cfb      	adds	r3, r7, #3
   160d8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   160da:	2308      	movs	r3, #8
   160dc:	18fa      	adds	r2, r7, r3
   160de:	6878      	ldr	r0, [r7, #4]
   160e0:	2301      	movs	r3, #1
   160e2:	2117      	movs	r1, #23
   160e4:	4c25      	ldr	r4, [pc, #148]	; (1617c <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   160e6:	47a0      	blx	r4
   160e8:	0003      	movs	r3, r0
   160ea:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   160ec:	68fb      	ldr	r3, [r7, #12]
   160ee:	2b00      	cmp	r3, #0
   160f0:	d13f      	bne.n	16172 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   160f2:	1cfb      	adds	r3, r7, #3
   160f4:	781b      	ldrb	r3, [r3, #0]
   160f6:	091b      	lsrs	r3, r3, #4
   160f8:	b2db      	uxtb	r3, r3
   160fa:	1c1a      	adds	r2, r3, #0
   160fc:	2301      	movs	r3, #1
   160fe:	4013      	ands	r3, r2
   16100:	b2da      	uxtb	r2, r3
   16102:	2308      	movs	r3, #8
   16104:	18fb      	adds	r3, r7, r3
   16106:	2101      	movs	r1, #1
   16108:	400a      	ands	r2, r1
   1610a:	0090      	lsls	r0, r2, #2
   1610c:	781a      	ldrb	r2, [r3, #0]
   1610e:	2104      	movs	r1, #4
   16110:	438a      	bics	r2, r1
   16112:	1c11      	adds	r1, r2, #0
   16114:	1c02      	adds	r2, r0, #0
   16116:	430a      	orrs	r2, r1
   16118:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   1611a:	1cfb      	adds	r3, r7, #3
   1611c:	781b      	ldrb	r3, [r3, #0]
   1611e:	095b      	lsrs	r3, r3, #5
   16120:	b2db      	uxtb	r3, r3
   16122:	1c1a      	adds	r2, r3, #0
   16124:	2301      	movs	r3, #1
   16126:	4013      	ands	r3, r2
   16128:	b2da      	uxtb	r2, r3
   1612a:	2308      	movs	r3, #8
   1612c:	18fb      	adds	r3, r7, r3
   1612e:	2101      	movs	r1, #1
   16130:	400a      	ands	r2, r1
   16132:	0110      	lsls	r0, r2, #4
   16134:	781a      	ldrb	r2, [r3, #0]
   16136:	2110      	movs	r1, #16
   16138:	438a      	bics	r2, r1
   1613a:	1c11      	adds	r1, r2, #0
   1613c:	1c02      	adds	r2, r0, #0
   1613e:	430a      	orrs	r2, r1
   16140:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   16142:	1cfb      	adds	r3, r7, #3
   16144:	781b      	ldrb	r3, [r3, #0]
   16146:	2207      	movs	r2, #7
   16148:	4013      	ands	r3, r2
   1614a:	b2da      	uxtb	r2, r3
   1614c:	2308      	movs	r3, #8
   1614e:	18fb      	adds	r3, r7, r3
   16150:	0150      	lsls	r0, r2, #5
   16152:	781a      	ldrb	r2, [r3, #0]
   16154:	211f      	movs	r1, #31
   16156:	400a      	ands	r2, r1
   16158:	1c11      	adds	r1, r2, #0
   1615a:	1c02      	adds	r2, r0, #0
   1615c:	430a      	orrs	r2, r1
   1615e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   16160:	2308      	movs	r3, #8
   16162:	18fa      	adds	r2, r7, r3
   16164:	6878      	ldr	r0, [r7, #4]
   16166:	2301      	movs	r3, #1
   16168:	2117      	movs	r1, #23
   1616a:	4c05      	ldr	r4, [pc, #20]	; (16180 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   1616c:	47a0      	blx	r4
   1616e:	0003      	movs	r3, r0
   16170:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   16172:	68fb      	ldr	r3, [r7, #12]
}
   16174:	0018      	movs	r0, r3
   16176:	46bd      	mov	sp, r7
   16178:	b005      	add	sp, #20
   1617a:	bd90      	pop	{r4, r7, pc}
   1617c:	0001563d 	.word	0x0001563d
   16180:	00015683 	.word	0x00015683

00016184 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   16184:	b590      	push	{r4, r7, lr}
   16186:	b087      	sub	sp, #28
   16188:	af00      	add	r7, sp, #0
   1618a:	6078      	str	r0, [r7, #4]
   1618c:	000a      	movs	r2, r1
   1618e:	1cfb      	adds	r3, r7, #3
   16190:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16192:	230c      	movs	r3, #12
   16194:	18fa      	adds	r2, r7, r3
   16196:	6878      	ldr	r0, [r7, #4]
   16198:	2301      	movs	r3, #1
   1619a:	2118      	movs	r1, #24
   1619c:	4c28      	ldr	r4, [pc, #160]	; (16240 <lsm6dso_i3c_disable_set+0xbc>)
   1619e:	47a0      	blx	r4
   161a0:	0003      	movs	r3, r0
   161a2:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   161a4:	697b      	ldr	r3, [r7, #20]
   161a6:	2b00      	cmp	r3, #0
   161a8:	d11c      	bne.n	161e4 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   161aa:	1cfb      	adds	r3, r7, #3
   161ac:	781b      	ldrb	r3, [r3, #0]
   161ae:	09db      	lsrs	r3, r3, #7
   161b0:	b2db      	uxtb	r3, r3
   161b2:	1c1a      	adds	r2, r3, #0
   161b4:	2301      	movs	r3, #1
   161b6:	4013      	ands	r3, r2
   161b8:	b2da      	uxtb	r2, r3
   161ba:	230c      	movs	r3, #12
   161bc:	18fb      	adds	r3, r7, r3
   161be:	2101      	movs	r1, #1
   161c0:	400a      	ands	r2, r1
   161c2:	1890      	adds	r0, r2, r2
   161c4:	781a      	ldrb	r2, [r3, #0]
   161c6:	2102      	movs	r1, #2
   161c8:	438a      	bics	r2, r1
   161ca:	1c11      	adds	r1, r2, #0
   161cc:	1c02      	adds	r2, r0, #0
   161ce:	430a      	orrs	r2, r1
   161d0:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   161d2:	230c      	movs	r3, #12
   161d4:	18fa      	adds	r2, r7, r3
   161d6:	6878      	ldr	r0, [r7, #4]
   161d8:	2301      	movs	r3, #1
   161da:	2118      	movs	r1, #24
   161dc:	4c19      	ldr	r4, [pc, #100]	; (16244 <lsm6dso_i3c_disable_set+0xc0>)
   161de:	47a0      	blx	r4
   161e0:	0003      	movs	r3, r0
   161e2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   161e4:	697b      	ldr	r3, [r7, #20]
   161e6:	2b00      	cmp	r3, #0
   161e8:	d108      	bne.n	161fc <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   161ea:	2310      	movs	r3, #16
   161ec:	18fa      	adds	r2, r7, r3
   161ee:	6878      	ldr	r0, [r7, #4]
   161f0:	2301      	movs	r3, #1
   161f2:	2162      	movs	r1, #98	; 0x62
   161f4:	4c12      	ldr	r4, [pc, #72]	; (16240 <lsm6dso_i3c_disable_set+0xbc>)
   161f6:	47a0      	blx	r4
   161f8:	0003      	movs	r3, r0
   161fa:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   161fc:	697b      	ldr	r3, [r7, #20]
   161fe:	2b00      	cmp	r3, #0
   16200:	d119      	bne.n	16236 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   16202:	1cfb      	adds	r3, r7, #3
   16204:	781b      	ldrb	r3, [r3, #0]
   16206:	2203      	movs	r2, #3
   16208:	4013      	ands	r3, r2
   1620a:	b2da      	uxtb	r2, r3
   1620c:	2310      	movs	r3, #16
   1620e:	18fb      	adds	r3, r7, r3
   16210:	2103      	movs	r1, #3
   16212:	400a      	ands	r2, r1
   16214:	00d0      	lsls	r0, r2, #3
   16216:	781a      	ldrb	r2, [r3, #0]
   16218:	2118      	movs	r1, #24
   1621a:	438a      	bics	r2, r1
   1621c:	1c11      	adds	r1, r2, #0
   1621e:	1c02      	adds	r2, r0, #0
   16220:	430a      	orrs	r2, r1
   16222:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   16224:	2310      	movs	r3, #16
   16226:	18fa      	adds	r2, r7, r3
   16228:	6878      	ldr	r0, [r7, #4]
   1622a:	2301      	movs	r3, #1
   1622c:	2162      	movs	r1, #98	; 0x62
   1622e:	4c05      	ldr	r4, [pc, #20]	; (16244 <lsm6dso_i3c_disable_set+0xc0>)
   16230:	47a0      	blx	r4
   16232:	0003      	movs	r3, r0
   16234:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   16236:	697b      	ldr	r3, [r7, #20]
}
   16238:	0018      	movs	r0, r3
   1623a:	46bd      	mov	sp, r7
   1623c:	b007      	add	sp, #28
   1623e:	bd90      	pop	{r4, r7, pc}
   16240:	0001563d 	.word	0x0001563d
   16244:	00015683 	.word	0x00015683

00016248 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   16248:	b590      	push	{r4, r7, lr}
   1624a:	b085      	sub	sp, #20
   1624c:	af00      	add	r7, sp, #0
   1624e:	6078      	str	r0, [r7, #4]
   16250:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   16252:	687b      	ldr	r3, [r7, #4]
   16254:	2102      	movs	r1, #2
   16256:	0018      	movs	r0, r3
   16258:	4b0e      	ldr	r3, [pc, #56]	; (16294 <lsm6dso_fsm_enable_get+0x4c>)
   1625a:	4798      	blx	r3
   1625c:	0003      	movs	r3, r0
   1625e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16260:	68fb      	ldr	r3, [r7, #12]
   16262:	2b00      	cmp	r3, #0
   16264:	d107      	bne.n	16276 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   16266:	683a      	ldr	r2, [r7, #0]
   16268:	6878      	ldr	r0, [r7, #4]
   1626a:	2302      	movs	r3, #2
   1626c:	2146      	movs	r1, #70	; 0x46
   1626e:	4c0a      	ldr	r4, [pc, #40]	; (16298 <lsm6dso_fsm_enable_get+0x50>)
   16270:	47a0      	blx	r4
   16272:	0003      	movs	r3, r0
   16274:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   16276:	68fb      	ldr	r3, [r7, #12]
   16278:	2b00      	cmp	r3, #0
   1627a:	d106      	bne.n	1628a <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   1627c:	687b      	ldr	r3, [r7, #4]
   1627e:	2100      	movs	r1, #0
   16280:	0018      	movs	r0, r3
   16282:	4b04      	ldr	r3, [pc, #16]	; (16294 <lsm6dso_fsm_enable_get+0x4c>)
   16284:	4798      	blx	r3
   16286:	0003      	movs	r3, r0
   16288:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1628a:	68fb      	ldr	r3, [r7, #12]
}
   1628c:	0018      	movs	r0, r3
   1628e:	46bd      	mov	sp, r7
   16290:	b005      	add	sp, #20
   16292:	bd90      	pop	{r4, r7, pc}
   16294:	00015f29 	.word	0x00015f29
   16298:	0001563d 	.word	0x0001563d

0001629c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   1629c:	b590      	push	{r4, r7, lr}
   1629e:	b085      	sub	sp, #20
   162a0:	af00      	add	r7, sp, #0
   162a2:	6078      	str	r0, [r7, #4]
   162a4:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   162a6:	687b      	ldr	r3, [r7, #4]
   162a8:	2102      	movs	r1, #2
   162aa:	0018      	movs	r0, r3
   162ac:	4b21      	ldr	r3, [pc, #132]	; (16334 <lsm6dso_fsm_data_rate_get+0x98>)
   162ae:	4798      	blx	r3
   162b0:	0003      	movs	r3, r0
   162b2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   162b4:	68fb      	ldr	r3, [r7, #12]
   162b6:	2b00      	cmp	r3, #0
   162b8:	d108      	bne.n	162cc <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   162ba:	2308      	movs	r3, #8
   162bc:	18fa      	adds	r2, r7, r3
   162be:	6878      	ldr	r0, [r7, #4]
   162c0:	2301      	movs	r3, #1
   162c2:	215f      	movs	r1, #95	; 0x5f
   162c4:	4c1c      	ldr	r4, [pc, #112]	; (16338 <lsm6dso_fsm_data_rate_get+0x9c>)
   162c6:	47a0      	blx	r4
   162c8:	0003      	movs	r3, r0
   162ca:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   162cc:	68fb      	ldr	r3, [r7, #12]
   162ce:	2b00      	cmp	r3, #0
   162d0:	d12b      	bne.n	1632a <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   162d2:	2308      	movs	r3, #8
   162d4:	18fb      	adds	r3, r7, r3
   162d6:	781b      	ldrb	r3, [r3, #0]
   162d8:	06db      	lsls	r3, r3, #27
   162da:	0f9b      	lsrs	r3, r3, #30
   162dc:	b2db      	uxtb	r3, r3
   162de:	2b01      	cmp	r3, #1
   162e0:	d00c      	beq.n	162fc <lsm6dso_fsm_data_rate_get+0x60>
   162e2:	dc02      	bgt.n	162ea <lsm6dso_fsm_data_rate_get+0x4e>
   162e4:	2b00      	cmp	r3, #0
   162e6:	d005      	beq.n	162f4 <lsm6dso_fsm_data_rate_get+0x58>
   162e8:	e014      	b.n	16314 <lsm6dso_fsm_data_rate_get+0x78>
   162ea:	2b02      	cmp	r3, #2
   162ec:	d00a      	beq.n	16304 <lsm6dso_fsm_data_rate_get+0x68>
   162ee:	2b03      	cmp	r3, #3
   162f0:	d00c      	beq.n	1630c <lsm6dso_fsm_data_rate_get+0x70>
   162f2:	e00f      	b.n	16314 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   162f4:	683b      	ldr	r3, [r7, #0]
   162f6:	2200      	movs	r2, #0
   162f8:	701a      	strb	r2, [r3, #0]
        break;
   162fa:	e00f      	b.n	1631c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   162fc:	683b      	ldr	r3, [r7, #0]
   162fe:	2201      	movs	r2, #1
   16300:	701a      	strb	r2, [r3, #0]
        break;
   16302:	e00b      	b.n	1631c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   16304:	683b      	ldr	r3, [r7, #0]
   16306:	2202      	movs	r2, #2
   16308:	701a      	strb	r2, [r3, #0]
        break;
   1630a:	e007      	b.n	1631c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   1630c:	683b      	ldr	r3, [r7, #0]
   1630e:	2203      	movs	r2, #3
   16310:	701a      	strb	r2, [r3, #0]
        break;
   16312:	e003      	b.n	1631c <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   16314:	683b      	ldr	r3, [r7, #0]
   16316:	2200      	movs	r2, #0
   16318:	701a      	strb	r2, [r3, #0]
        break;
   1631a:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   1631c:	687b      	ldr	r3, [r7, #4]
   1631e:	2100      	movs	r1, #0
   16320:	0018      	movs	r0, r3
   16322:	4b04      	ldr	r3, [pc, #16]	; (16334 <lsm6dso_fsm_data_rate_get+0x98>)
   16324:	4798      	blx	r3
   16326:	0003      	movs	r3, r0
   16328:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1632a:	68fb      	ldr	r3, [r7, #12]
}
   1632c:	0018      	movs	r0, r3
   1632e:	46bd      	mov	sp, r7
   16330:	b005      	add	sp, #20
   16332:	bd90      	pop	{r4, r7, pc}
   16334:	00015f29 	.word	0x00015f29
   16338:	0001563d 	.word	0x0001563d

0001633c <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   1633c:	b580      	push	{r7, lr}
   1633e:	b086      	sub	sp, #24
   16340:	af00      	add	r7, sp, #0
   16342:	60f8      	str	r0, [r7, #12]
   16344:	0008      	movs	r0, r1
   16346:	607a      	str	r2, [r7, #4]
   16348:	0019      	movs	r1, r3
   1634a:	230b      	movs	r3, #11
   1634c:	18fb      	adds	r3, r7, r3
   1634e:	1c02      	adds	r2, r0, #0
   16350:	701a      	strb	r2, [r3, #0]
   16352:	2308      	movs	r3, #8
   16354:	18fb      	adds	r3, r7, r3
   16356:	1c0a      	adds	r2, r1, #0
   16358:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   1635a:	2300      	movs	r3, #0
   1635c:	613b      	str	r3, [r7, #16]
	
	msgOutImu[0] = reg;
   1635e:	4b19      	ldr	r3, [pc, #100]	; (163c4 <platform_write+0x88>)
   16360:	220b      	movs	r2, #11
   16362:	18ba      	adds	r2, r7, r2
   16364:	7812      	ldrb	r2, [r2, #0]
   16366:	701a      	strb	r2, [r3, #0]
	//loop through bufp to get message
 	for(int i = 0; i < len; i++)
   16368:	2300      	movs	r3, #0
   1636a:	617b      	str	r3, [r7, #20]
   1636c:	e00a      	b.n	16384 <platform_write+0x48>
 	{
 		msgOutImu[i+1] = bufp[i];
   1636e:	697b      	ldr	r3, [r7, #20]
   16370:	3301      	adds	r3, #1
   16372:	697a      	ldr	r2, [r7, #20]
   16374:	6879      	ldr	r1, [r7, #4]
   16376:	188a      	adds	r2, r1, r2
   16378:	7811      	ldrb	r1, [r2, #0]
   1637a:	4a12      	ldr	r2, [pc, #72]	; (163c4 <platform_write+0x88>)
   1637c:	54d1      	strb	r1, [r2, r3]
 	for(int i = 0; i < len; i++)
   1637e:	697b      	ldr	r3, [r7, #20]
   16380:	3301      	adds	r3, #1
   16382:	617b      	str	r3, [r7, #20]
   16384:	2308      	movs	r3, #8
   16386:	18fb      	adds	r3, r7, r3
   16388:	881a      	ldrh	r2, [r3, #0]
   1638a:	697b      	ldr	r3, [r7, #20]
   1638c:	429a      	cmp	r2, r3
   1638e:	dcee      	bgt.n	1636e <platform_write+0x32>
 	}
	//save individual data as part of the IMU_DATA struct
	imuData.address = LSM6DSO_I2C_ADD_H;
   16390:	4b0d      	ldr	r3, [pc, #52]	; (163c8 <platform_write+0x8c>)
   16392:	226b      	movs	r2, #107	; 0x6b
   16394:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = 1+len;
   16396:	2308      	movs	r3, #8
   16398:	18fb      	adds	r3, r7, r3
   1639a:	881b      	ldrh	r3, [r3, #0]
   1639c:	3301      	adds	r3, #1
   1639e:	b29a      	uxth	r2, r3
   163a0:	4b09      	ldr	r3, [pc, #36]	; (163c8 <platform_write+0x8c>)
   163a2:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   163a4:	4b08      	ldr	r3, [pc, #32]	; (163c8 <platform_write+0x8c>)
   163a6:	4a07      	ldr	r2, [pc, #28]	; (163c4 <platform_write+0x88>)
   163a8:	605a      	str	r2, [r3, #4]
	//write the imudata struct object
	error = I2cWriteDataWait(&imuData, 100);
   163aa:	4b07      	ldr	r3, [pc, #28]	; (163c8 <platform_write+0x8c>)
   163ac:	2164      	movs	r1, #100	; 0x64
   163ae:	0018      	movs	r0, r3
   163b0:	4b06      	ldr	r3, [pc, #24]	; (163cc <platform_write+0x90>)
   163b2:	4798      	blx	r3
   163b4:	0003      	movs	r3, r0
   163b6:	613b      	str	r3, [r7, #16]
	return error;
   163b8:	693b      	ldr	r3, [r7, #16]

}
   163ba:	0018      	movs	r0, r3
   163bc:	46bd      	mov	sp, r7
   163be:	b006      	add	sp, #24
   163c0:	bd80      	pop	{r7, pc}
   163c2:	46c0      	nop			; (mov r8, r8)
   163c4:	200048a4 	.word	0x200048a4
   163c8:	200048e4 	.word	0x200048e4
   163cc:	00015451 	.word	0x00015451

000163d0 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   163d0:	b580      	push	{r7, lr}
   163d2:	b086      	sub	sp, #24
   163d4:	af00      	add	r7, sp, #0
   163d6:	60f8      	str	r0, [r7, #12]
   163d8:	0008      	movs	r0, r1
   163da:	607a      	str	r2, [r7, #4]
   163dc:	0019      	movs	r1, r3
   163de:	230b      	movs	r3, #11
   163e0:	18fb      	adds	r3, r7, r3
   163e2:	1c02      	adds	r2, r0, #0
   163e4:	701a      	strb	r2, [r3, #0]
   163e6:	2308      	movs	r3, #8
   163e8:	18fb      	adds	r3, r7, r3
   163ea:	1c0a      	adds	r2, r1, #0
   163ec:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   163ee:	2300      	movs	r3, #0
   163f0:	617b      	str	r3, [r7, #20]
	//asssemble the message being read
	imuData.address = LSM6DSO_I2C_ADD_H;
   163f2:	4b13      	ldr	r3, [pc, #76]	; (16440 <platform_read+0x70>)
   163f4:	226b      	movs	r2, #107	; 0x6b
   163f6:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
   163f8:	4b11      	ldr	r3, [pc, #68]	; (16440 <platform_read+0x70>)
   163fa:	2208      	movs	r2, #8
   163fc:	18ba      	adds	r2, r7, r2
   163fe:	8812      	ldrh	r2, [r2, #0]
   16400:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   16402:	4b0f      	ldr	r3, [pc, #60]	; (16440 <platform_read+0x70>)
   16404:	687a      	ldr	r2, [r7, #4]
   16406:	609a      	str	r2, [r3, #8]
	//clear our outwards message
	imuData.lenOut = 1;
   16408:	4b0d      	ldr	r3, [pc, #52]	; (16440 <platform_read+0x70>)
   1640a:	2201      	movs	r2, #1
   1640c:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   1640e:	4b0d      	ldr	r3, [pc, #52]	; (16444 <platform_read+0x74>)
   16410:	220b      	movs	r2, #11
   16412:	18ba      	adds	r2, r7, r2
   16414:	7812      	ldrb	r2, [r2, #0]
   16416:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
   16418:	4b0a      	ldr	r3, [pc, #40]	; (16444 <platform_read+0x74>)
   1641a:	2200      	movs	r2, #0
   1641c:	705a      	strb	r2, [r3, #1]
	imuData.msgOut = &msgOutImu;
   1641e:	4b08      	ldr	r3, [pc, #32]	; (16440 <platform_read+0x70>)
   16420:	4a08      	ldr	r2, [pc, #32]	; (16444 <platform_read+0x74>)
   16422:	605a      	str	r2, [r3, #4]
	//read the imudata struct
	error = I2cReadDataWait(&imuData, 5, 100);
   16424:	4b06      	ldr	r3, [pc, #24]	; (16440 <platform_read+0x70>)
   16426:	2264      	movs	r2, #100	; 0x64
   16428:	2105      	movs	r1, #5
   1642a:	0018      	movs	r0, r3
   1642c:	4b06      	ldr	r3, [pc, #24]	; (16448 <platform_read+0x78>)
   1642e:	4798      	blx	r3
   16430:	0003      	movs	r3, r0
   16432:	617b      	str	r3, [r7, #20]
	
	return error;
   16434:	697b      	ldr	r3, [r7, #20]

}
   16436:	0018      	movs	r0, r3
   16438:	46bd      	mov	sp, r7
   1643a:	b006      	add	sp, #24
   1643c:	bd80      	pop	{r7, pc}
   1643e:	46c0      	nop			; (mov r8, r8)
   16440:	200048e4 	.word	0x200048e4
   16444:	200048a4 	.word	0x200048a4
   16448:	00015529 	.word	0x00015529

0001644c <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   1644c:	b580      	push	{r7, lr}
   1644e:	af00      	add	r7, sp, #0
return &dev_ctx;
   16450:	4b01      	ldr	r3, [pc, #4]	; (16458 <GetImuStruct+0xc>)
}
   16452:	0018      	movs	r0, r3
   16454:	46bd      	mov	sp, r7
   16456:	bd80      	pop	{r7, pc}
   16458:	20000020 	.word	0x20000020

0001645c <InitImu>:



int32_t InitImu(void)
{
   1645c:	b580      	push	{r7, lr}
   1645e:	b082      	sub	sp, #8
   16460:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   16462:	2300      	movs	r3, #0
   16464:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   16466:	4b23      	ldr	r3, [pc, #140]	; (164f4 <InitImu+0x98>)
   16468:	2101      	movs	r1, #1
   1646a:	0018      	movs	r0, r3
   1646c:	4b22      	ldr	r3, [pc, #136]	; (164f8 <InitImu+0x9c>)
   1646e:	4798      	blx	r3
   16470:	0003      	movs	r3, r0
   16472:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   16474:	1cfa      	adds	r2, r7, #3
   16476:	4b1f      	ldr	r3, [pc, #124]	; (164f4 <InitImu+0x98>)
   16478:	0011      	movs	r1, r2
   1647a:	0018      	movs	r0, r3
   1647c:	4b1f      	ldr	r3, [pc, #124]	; (164fc <InitImu+0xa0>)
   1647e:	4798      	blx	r3
   16480:	0002      	movs	r2, r0
   16482:	687b      	ldr	r3, [r7, #4]
   16484:	4313      	orrs	r3, r2
   16486:	607b      	str	r3, [r7, #4]
  } while (rst);
   16488:	1cfb      	adds	r3, r7, #3
   1648a:	781b      	ldrb	r3, [r3, #0]
   1648c:	2b00      	cmp	r3, #0
   1648e:	d1f1      	bne.n	16474 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   16490:	4b18      	ldr	r3, [pc, #96]	; (164f4 <InitImu+0x98>)
   16492:	2180      	movs	r1, #128	; 0x80
   16494:	0018      	movs	r0, r3
   16496:	4b1a      	ldr	r3, [pc, #104]	; (16500 <InitImu+0xa4>)
   16498:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   1649a:	4b16      	ldr	r3, [pc, #88]	; (164f4 <InitImu+0x98>)
   1649c:	2101      	movs	r1, #1
   1649e:	0018      	movs	r0, r3
   164a0:	4b18      	ldr	r3, [pc, #96]	; (16504 <InitImu+0xa8>)
   164a2:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   164a4:	4b13      	ldr	r3, [pc, #76]	; (164f4 <InitImu+0x98>)
   164a6:	2100      	movs	r1, #0
   164a8:	0018      	movs	r0, r3
   164aa:	4b17      	ldr	r3, [pc, #92]	; (16508 <InitImu+0xac>)
   164ac:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   164ae:	4b11      	ldr	r3, [pc, #68]	; (164f4 <InitImu+0x98>)
   164b0:	2101      	movs	r1, #1
   164b2:	0018      	movs	r0, r3
   164b4:	4b15      	ldr	r3, [pc, #84]	; (1650c <InitImu+0xb0>)
   164b6:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   164b8:	4b0e      	ldr	r3, [pc, #56]	; (164f4 <InitImu+0x98>)
   164ba:	2101      	movs	r1, #1
   164bc:	0018      	movs	r0, r3
   164be:	4b14      	ldr	r3, [pc, #80]	; (16510 <InitImu+0xb4>)
   164c0:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   164c2:	4b0c      	ldr	r3, [pc, #48]	; (164f4 <InitImu+0x98>)
   164c4:	2100      	movs	r1, #0
   164c6:	0018      	movs	r0, r3
   164c8:	4b12      	ldr	r3, [pc, #72]	; (16514 <InitImu+0xb8>)
   164ca:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   164cc:	4b09      	ldr	r3, [pc, #36]	; (164f4 <InitImu+0x98>)
   164ce:	2106      	movs	r1, #6
   164d0:	0018      	movs	r0, r3
   164d2:	4b11      	ldr	r3, [pc, #68]	; (16518 <InitImu+0xbc>)
   164d4:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   164d6:	4b07      	ldr	r3, [pc, #28]	; (164f4 <InitImu+0x98>)
   164d8:	2104      	movs	r1, #4
   164da:	0018      	movs	r0, r3
   164dc:	4b0f      	ldr	r3, [pc, #60]	; (1651c <InitImu+0xc0>)
   164de:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   164e0:	4b04      	ldr	r3, [pc, #16]	; (164f4 <InitImu+0x98>)
   164e2:	2101      	movs	r1, #1
   164e4:	0018      	movs	r0, r3
   164e6:	4b0e      	ldr	r3, [pc, #56]	; (16520 <InitImu+0xc4>)
   164e8:	4798      	blx	r3

  return error;
   164ea:	687b      	ldr	r3, [r7, #4]
}
   164ec:	0018      	movs	r0, r3
   164ee:	46bd      	mov	sp, r7
   164f0:	b002      	add	sp, #8
   164f2:	bd80      	pop	{r7, pc}
   164f4:	20000020 	.word	0x20000020
   164f8:	00015fb9 	.word	0x00015fb9
   164fc:	00016025 	.word	0x00016025
   16500:	00016185 	.word	0x00016185
   16504:	00015d61 	.word	0x00015d61
   16508:	00015dcd 	.word	0x00015dcd
   1650c:	0001576d 	.word	0x0001576d
   16510:	00015a9d 	.word	0x00015a9d
   16514:	00015701 	.word	0x00015701
   16518:	00015a31 	.word	0x00015a31
   1651c:	000160cd 	.word	0x000160cd
   16520:	00016061 	.word	0x00016061

00016524 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   16524:	b580      	push	{r7, lr}
   16526:	b082      	sub	sp, #8
   16528:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   1652a:	1cfb      	adds	r3, r7, #3
   1652c:	2200      	movs	r2, #0
   1652e:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16530:	4b11      	ldr	r3, [pc, #68]	; (16578 <SeesawGetKeypadCount+0x54>)
   16532:	222e      	movs	r2, #46	; 0x2e
   16534:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   16536:	4b10      	ldr	r3, [pc, #64]	; (16578 <SeesawGetKeypadCount+0x54>)
   16538:	4a10      	ldr	r2, [pc, #64]	; (1657c <SeesawGetKeypadCount+0x58>)
   1653a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   1653c:	4b0e      	ldr	r3, [pc, #56]	; (16578 <SeesawGetKeypadCount+0x54>)
   1653e:	2202      	movs	r2, #2
   16540:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   16542:	4b0d      	ldr	r3, [pc, #52]	; (16578 <SeesawGetKeypadCount+0x54>)
   16544:	1cfa      	adds	r2, r7, #3
   16546:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   16548:	4b0b      	ldr	r3, [pc, #44]	; (16578 <SeesawGetKeypadCount+0x54>)
   1654a:	2201      	movs	r2, #1
   1654c:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1654e:	4b0a      	ldr	r3, [pc, #40]	; (16578 <SeesawGetKeypadCount+0x54>)
   16550:	2264      	movs	r2, #100	; 0x64
   16552:	2100      	movs	r1, #0
   16554:	0018      	movs	r0, r3
   16556:	4b0a      	ldr	r3, [pc, #40]	; (16580 <SeesawGetKeypadCount+0x5c>)
   16558:	4798      	blx	r3
   1655a:	0003      	movs	r3, r0
   1655c:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1655e:	687b      	ldr	r3, [r7, #4]
   16560:	2b00      	cmp	r3, #0
   16562:	d003      	beq.n	1656c <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16564:	4b07      	ldr	r3, [pc, #28]	; (16584 <SeesawGetKeypadCount+0x60>)
   16566:	0018      	movs	r0, r3
   16568:	4b07      	ldr	r3, [pc, #28]	; (16588 <SeesawGetKeypadCount+0x64>)
   1656a:	4798      	blx	r3
    }
    return count;
   1656c:	1cfb      	adds	r3, r7, #3
   1656e:	781b      	ldrb	r3, [r3, #0]
}
   16570:	0018      	movs	r0, r3
   16572:	46bd      	mov	sp, r7
   16574:	b002      	add	sp, #8
   16576:	bd80      	pop	{r7, pc}
   16578:	200048f4 	.word	0x200048f4
   1657c:	00037250 	.word	0x00037250
   16580:	00015529 	.word	0x00015529
   16584:	00037314 	.word	0x00037314
   16588:	0001ec15 	.word	0x0001ec15

0001658c <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   1658c:	b580      	push	{r7, lr}
   1658e:	b084      	sub	sp, #16
   16590:	af00      	add	r7, sp, #0
   16592:	6078      	str	r0, [r7, #4]
   16594:	000a      	movs	r2, r1
   16596:	1cfb      	adds	r3, r7, #3
   16598:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   1659a:	1cfb      	adds	r3, r7, #3
   1659c:	781b      	ldrb	r3, [r3, #0]
   1659e:	2b00      	cmp	r3, #0
   165a0:	d101      	bne.n	165a6 <SeesawReadKeypad+0x1a>
   165a2:	2300      	movs	r3, #0
   165a4:	e026      	b.n	165f4 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   165a6:	2308      	movs	r3, #8
   165a8:	18fb      	adds	r3, r7, r3
   165aa:	4a14      	ldr	r2, [pc, #80]	; (165fc <SeesawReadKeypad+0x70>)
   165ac:	8812      	ldrh	r2, [r2, #0]
   165ae:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   165b0:	4b13      	ldr	r3, [pc, #76]	; (16600 <SeesawReadKeypad+0x74>)
   165b2:	222e      	movs	r2, #46	; 0x2e
   165b4:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   165b6:	4b12      	ldr	r3, [pc, #72]	; (16600 <SeesawReadKeypad+0x74>)
   165b8:	2208      	movs	r2, #8
   165ba:	18ba      	adds	r2, r7, r2
   165bc:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   165be:	4b10      	ldr	r3, [pc, #64]	; (16600 <SeesawReadKeypad+0x74>)
   165c0:	2202      	movs	r2, #2
   165c2:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   165c4:	4b0e      	ldr	r3, [pc, #56]	; (16600 <SeesawReadKeypad+0x74>)
   165c6:	687a      	ldr	r2, [r7, #4]
   165c8:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   165ca:	1cfb      	adds	r3, r7, #3
   165cc:	781b      	ldrb	r3, [r3, #0]
   165ce:	b29a      	uxth	r2, r3
   165d0:	4b0b      	ldr	r3, [pc, #44]	; (16600 <SeesawReadKeypad+0x74>)
   165d2:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   165d4:	4b0a      	ldr	r3, [pc, #40]	; (16600 <SeesawReadKeypad+0x74>)
   165d6:	2264      	movs	r2, #100	; 0x64
   165d8:	2100      	movs	r1, #0
   165da:	0018      	movs	r0, r3
   165dc:	4b09      	ldr	r3, [pc, #36]	; (16604 <SeesawReadKeypad+0x78>)
   165de:	4798      	blx	r3
   165e0:	0003      	movs	r3, r0
   165e2:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   165e4:	68fb      	ldr	r3, [r7, #12]
   165e6:	2b00      	cmp	r3, #0
   165e8:	d003      	beq.n	165f2 <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   165ea:	4b07      	ldr	r3, [pc, #28]	; (16608 <SeesawReadKeypad+0x7c>)
   165ec:	0018      	movs	r0, r3
   165ee:	4b07      	ldr	r3, [pc, #28]	; (1660c <SeesawReadKeypad+0x80>)
   165f0:	4798      	blx	r3
    }
    return error;
   165f2:	68fb      	ldr	r3, [r7, #12]
}
   165f4:	0018      	movs	r0, r3
   165f6:	46bd      	mov	sp, r7
   165f8:	b004      	add	sp, #16
   165fa:	bd80      	pop	{r7, pc}
   165fc:	00037338 	.word	0x00037338
   16600:	200048f4 	.word	0x200048f4
   16604:	00015529 	.word	0x00015529
   16608:	00037314 	.word	0x00037314
   1660c:	0001ec15 	.word	0x0001ec15

00016610 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16610:	b5b0      	push	{r4, r5, r7, lr}
   16612:	b086      	sub	sp, #24
   16614:	af00      	add	r7, sp, #0
   16616:	0005      	movs	r5, r0
   16618:	000c      	movs	r4, r1
   1661a:	0010      	movs	r0, r2
   1661c:	0019      	movs	r1, r3
   1661e:	1dfb      	adds	r3, r7, #7
   16620:	1c2a      	adds	r2, r5, #0
   16622:	701a      	strb	r2, [r3, #0]
   16624:	1dbb      	adds	r3, r7, #6
   16626:	1c22      	adds	r2, r4, #0
   16628:	701a      	strb	r2, [r3, #0]
   1662a:	1d7b      	adds	r3, r7, #5
   1662c:	1c02      	adds	r2, r0, #0
   1662e:	701a      	strb	r2, [r3, #0]
   16630:	1d3b      	adds	r3, r7, #4
   16632:	1c0a      	adds	r2, r1, #0
   16634:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   16636:	2308      	movs	r3, #8
   16638:	18fb      	adds	r3, r7, r3
   1663a:	220e      	movs	r2, #14
   1663c:	701a      	strb	r2, [r3, #0]
   1663e:	2308      	movs	r3, #8
   16640:	18fb      	adds	r3, r7, r3
   16642:	2204      	movs	r2, #4
   16644:	705a      	strb	r2, [r3, #1]
   16646:	2308      	movs	r3, #8
   16648:	18fb      	adds	r3, r7, r3
   1664a:	2200      	movs	r2, #0
   1664c:	709a      	strb	r2, [r3, #2]
   1664e:	2308      	movs	r3, #8
   16650:	18fb      	adds	r3, r7, r3
   16652:	2200      	movs	r2, #0
   16654:	70da      	strb	r2, [r3, #3]
   16656:	2308      	movs	r3, #8
   16658:	18fb      	adds	r3, r7, r3
   1665a:	1d7a      	adds	r2, r7, #5
   1665c:	7812      	ldrb	r2, [r2, #0]
   1665e:	711a      	strb	r2, [r3, #4]
   16660:	2308      	movs	r3, #8
   16662:	18fb      	adds	r3, r7, r3
   16664:	1dba      	adds	r2, r7, #6
   16666:	7812      	ldrb	r2, [r2, #0]
   16668:	715a      	strb	r2, [r3, #5]
   1666a:	2308      	movs	r3, #8
   1666c:	18fb      	adds	r3, r7, r3
   1666e:	1d3a      	adds	r2, r7, #4
   16670:	7812      	ldrb	r2, [r2, #0]
   16672:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   16674:	1dfb      	adds	r3, r7, #7
   16676:	781b      	ldrb	r3, [r3, #0]
   16678:	b29b      	uxth	r3, r3
   1667a:	2216      	movs	r2, #22
   1667c:	18ba      	adds	r2, r7, r2
   1667e:	1c19      	adds	r1, r3, #0
   16680:	1c0b      	adds	r3, r1, #0
   16682:	18db      	adds	r3, r3, r3
   16684:	185b      	adds	r3, r3, r1
   16686:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   16688:	2316      	movs	r3, #22
   1668a:	18fb      	adds	r3, r7, r3
   1668c:	881b      	ldrh	r3, [r3, #0]
   1668e:	0a1b      	lsrs	r3, r3, #8
   16690:	b29b      	uxth	r3, r3
   16692:	b2da      	uxtb	r2, r3
   16694:	2308      	movs	r3, #8
   16696:	18fb      	adds	r3, r7, r3
   16698:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   1669a:	2316      	movs	r3, #22
   1669c:	18fb      	adds	r3, r7, r3
   1669e:	881b      	ldrh	r3, [r3, #0]
   166a0:	b2da      	uxtb	r2, r3
   166a2:	2308      	movs	r3, #8
   166a4:	18fb      	adds	r3, r7, r3
   166a6:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   166a8:	4b09      	ldr	r3, [pc, #36]	; (166d0 <SeesawSetLed+0xc0>)
   166aa:	2208      	movs	r2, #8
   166ac:	18ba      	adds	r2, r7, r2
   166ae:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   166b0:	4b07      	ldr	r3, [pc, #28]	; (166d0 <SeesawSetLed+0xc0>)
   166b2:	2207      	movs	r2, #7
   166b4:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   166b6:	4b06      	ldr	r3, [pc, #24]	; (166d0 <SeesawSetLed+0xc0>)
   166b8:	2164      	movs	r1, #100	; 0x64
   166ba:	0018      	movs	r0, r3
   166bc:	4b05      	ldr	r3, [pc, #20]	; (166d4 <SeesawSetLed+0xc4>)
   166be:	4798      	blx	r3
   166c0:	0003      	movs	r3, r0
   166c2:	613b      	str	r3, [r7, #16]
    return error;
   166c4:	693b      	ldr	r3, [r7, #16]
}
   166c6:	0018      	movs	r0, r3
   166c8:	46bd      	mov	sp, r7
   166ca:	b006      	add	sp, #24
   166cc:	bdb0      	pop	{r4, r5, r7, pc}
   166ce:	46c0      	nop			; (mov r8, r8)
   166d0:	200048f4 	.word	0x200048f4
   166d4:	00015451 	.word	0x00015451

000166d8 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   166d8:	b580      	push	{r7, lr}
   166da:	b082      	sub	sp, #8
   166dc:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   166de:	003b      	movs	r3, r7
   166e0:	4a0a      	ldr	r2, [pc, #40]	; (1670c <SeesawOrderLedUpdate+0x34>)
   166e2:	8812      	ldrh	r2, [r2, #0]
   166e4:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   166e6:	4b0a      	ldr	r3, [pc, #40]	; (16710 <SeesawOrderLedUpdate+0x38>)
   166e8:	003a      	movs	r2, r7
   166ea:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   166ec:	4b08      	ldr	r3, [pc, #32]	; (16710 <SeesawOrderLedUpdate+0x38>)
   166ee:	2202      	movs	r2, #2
   166f0:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   166f2:	4b07      	ldr	r3, [pc, #28]	; (16710 <SeesawOrderLedUpdate+0x38>)
   166f4:	2164      	movs	r1, #100	; 0x64
   166f6:	0018      	movs	r0, r3
   166f8:	4b06      	ldr	r3, [pc, #24]	; (16714 <SeesawOrderLedUpdate+0x3c>)
   166fa:	4798      	blx	r3
   166fc:	0003      	movs	r3, r0
   166fe:	607b      	str	r3, [r7, #4]
    return error;
   16700:	687b      	ldr	r3, [r7, #4]
}
   16702:	0018      	movs	r0, r3
   16704:	46bd      	mov	sp, r7
   16706:	b002      	add	sp, #8
   16708:	bd80      	pop	{r7, pc}
   1670a:	46c0      	nop			; (mov r8, r8)
   1670c:	0003733c 	.word	0x0003733c
   16710:	200048f4 	.word	0x200048f4
   16714:	00015451 	.word	0x00015451

00016718 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   16718:	b590      	push	{r4, r7, lr}
   1671a:	b089      	sub	sp, #36	; 0x24
   1671c:	af02      	add	r7, sp, #8
   1671e:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!\r\n");
   16720:	4b99      	ldr	r3, [pc, #612]	; (16988 <vUiHandlerTask+0x270>)
   16722:	0018      	movs	r0, r3
   16724:	4b99      	ldr	r3, [pc, #612]	; (1698c <vUiHandlerTask+0x274>)
   16726:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   16728:	4b99      	ldr	r3, [pc, #612]	; (16990 <vUiHandlerTask+0x278>)
   1672a:	2201      	movs	r2, #1
   1672c:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   1672e:	4b99      	ldr	r3, [pc, #612]	; (16994 <vUiHandlerTask+0x27c>)
   16730:	4798      	blx	r3
    gfx_mono_draw_line(0, 0, 64, 48, GFX_PIXEL_SET);
   16732:	2301      	movs	r3, #1
   16734:	9300      	str	r3, [sp, #0]
   16736:	2330      	movs	r3, #48	; 0x30
   16738:	2240      	movs	r2, #64	; 0x40
   1673a:	2100      	movs	r1, #0
   1673c:	2000      	movs	r0, #0
   1673e:	4c96      	ldr	r4, [pc, #600]	; (16998 <vUiHandlerTask+0x280>)
   16740:	47a0      	blx	r4
    gfx_mono_draw_filled_circle(54, 24, 10, GFX_PIXEL_SET, GFX_WHOLE);
   16742:	23ff      	movs	r3, #255	; 0xff
   16744:	9300      	str	r3, [sp, #0]
   16746:	2301      	movs	r3, #1
   16748:	220a      	movs	r2, #10
   1674a:	2118      	movs	r1, #24
   1674c:	2036      	movs	r0, #54	; 0x36
   1674e:	4c93      	ldr	r4, [pc, #588]	; (1699c <vUiHandlerTask+0x284>)
   16750:	47a0      	blx	r4
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
   16752:	4b93      	ldr	r3, [pc, #588]	; (169a0 <vUiHandlerTask+0x288>)
   16754:	4893      	ldr	r0, [pc, #588]	; (169a4 <vUiHandlerTask+0x28c>)
   16756:	2200      	movs	r2, #0
   16758:	2100      	movs	r1, #0
   1675a:	4c93      	ldr	r4, [pc, #588]	; (169a8 <vUiHandlerTask+0x290>)
   1675c:	47a0      	blx	r4
	

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   1675e:	4b8c      	ldr	r3, [pc, #560]	; (16990 <vUiHandlerTask+0x278>)
   16760:	781b      	ldrb	r3, [r3, #0]
   16762:	2b01      	cmp	r3, #1
   16764:	d100      	bne.n	16768 <vUiHandlerTask+0x50>
   16766:	e107      	b.n	16978 <vUiHandlerTask+0x260>
   16768:	2b02      	cmp	r3, #2
   1676a:	d002      	beq.n	16772 <vUiHandlerTask+0x5a>
   1676c:	2b00      	cmp	r3, #0
   1676e:	d06e      	beq.n	1684e <vUiHandlerTask+0x136>
   16770:	e0fe      	b.n	16970 <vUiHandlerTask+0x258>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   16772:	4b8e      	ldr	r3, [pc, #568]	; (169ac <vUiHandlerTask+0x294>)
   16774:	2200      	movs	r2, #0
   16776:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   16778:	4b8d      	ldr	r3, [pc, #564]	; (169b0 <vUiHandlerTask+0x298>)
   1677a:	2201      	movs	r2, #1
   1677c:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   1677e:	4b8d      	ldr	r3, [pc, #564]	; (169b4 <vUiHandlerTask+0x29c>)
   16780:	2214      	movs	r2, #20
   16782:	21ff      	movs	r1, #255	; 0xff
   16784:	0018      	movs	r0, r3
   16786:	4b8c      	ldr	r3, [pc, #560]	; (169b8 <vUiHandlerTask+0x2a0>)
   16788:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   1678a:	4b8c      	ldr	r3, [pc, #560]	; (169bc <vUiHandlerTask+0x2a4>)
   1678c:	2200      	movs	r2, #0
   1678e:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   16790:	2317      	movs	r3, #23
   16792:	18fc      	adds	r4, r7, r3
   16794:	4b8a      	ldr	r3, [pc, #552]	; (169c0 <vUiHandlerTask+0x2a8>)
   16796:	4798      	blx	r3
   16798:	0003      	movs	r3, r0
   1679a:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   1679c:	2317      	movs	r3, #23
   1679e:	18fb      	adds	r3, r7, r3
   167a0:	781b      	ldrb	r3, [r3, #0]
   167a2:	2b0f      	cmp	r3, #15
   167a4:	d903      	bls.n	167ae <vUiHandlerTask+0x96>
   167a6:	2317      	movs	r3, #23
   167a8:	18fb      	adds	r3, r7, r3
   167aa:	2210      	movs	r2, #16
   167ac:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   167ae:	2317      	movs	r3, #23
   167b0:	18fb      	adds	r3, r7, r3
   167b2:	781b      	ldrb	r3, [r3, #0]
   167b4:	2b00      	cmp	r3, #0
   167b6:	d007      	beq.n	167c8 <vUiHandlerTask+0xb0>
                    SeesawReadKeypad(buttons,
   167b8:	2317      	movs	r3, #23
   167ba:	18fb      	adds	r3, r7, r3
   167bc:	781a      	ldrb	r2, [r3, #0]
   167be:	4b81      	ldr	r3, [pc, #516]	; (169c4 <vUiHandlerTask+0x2ac>)
   167c0:	0011      	movs	r1, r2
   167c2:	0018      	movs	r0, r3
   167c4:	4b80      	ldr	r3, [pc, #512]	; (169c8 <vUiHandlerTask+0x2b0>)
   167c6:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   167c8:	4b7e      	ldr	r3, [pc, #504]	; (169c4 <vUiHandlerTask+0x2ac>)
   167ca:	2210      	movs	r2, #16
   167cc:	2100      	movs	r1, #0
   167ce:	0018      	movs	r0, r3
   167d0:	4b79      	ldr	r3, [pc, #484]	; (169b8 <vUiHandlerTask+0x2a0>)
   167d2:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   167d4:	4b7d      	ldr	r3, [pc, #500]	; (169cc <vUiHandlerTask+0x2b4>)
   167d6:	781b      	ldrb	r3, [r3, #0]
   167d8:	b2d9      	uxtb	r1, r3
   167da:	4b7d      	ldr	r3, [pc, #500]	; (169d0 <vUiHandlerTask+0x2b8>)
   167dc:	781b      	ldrb	r3, [r3, #0]
   167de:	b2da      	uxtb	r2, r3
   167e0:	4b7c      	ldr	r3, [pc, #496]	; (169d4 <vUiHandlerTask+0x2bc>)
   167e2:	781b      	ldrb	r3, [r3, #0]
   167e4:	b2db      	uxtb	r3, r3
   167e6:	2000      	movs	r0, #0
   167e8:	4c7b      	ldr	r4, [pc, #492]	; (169d8 <vUiHandlerTask+0x2c0>)
   167ea:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   167ec:	4b7b      	ldr	r3, [pc, #492]	; (169dc <vUiHandlerTask+0x2c4>)
   167ee:	4798      	blx	r3
                vTaskDelay(1000);
   167f0:	23fa      	movs	r3, #250	; 0xfa
   167f2:	009b      	lsls	r3, r3, #2
   167f4:	0018      	movs	r0, r3
   167f6:	4b7a      	ldr	r3, [pc, #488]	; (169e0 <vUiHandlerTask+0x2c8>)
   167f8:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   167fa:	2300      	movs	r3, #0
   167fc:	2200      	movs	r2, #0
   167fe:	2100      	movs	r1, #0
   16800:	2000      	movs	r0, #0
   16802:	4c75      	ldr	r4, [pc, #468]	; (169d8 <vUiHandlerTask+0x2c0>)
   16804:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   16806:	4b71      	ldr	r3, [pc, #452]	; (169cc <vUiHandlerTask+0x2b4>)
   16808:	781b      	ldrb	r3, [r3, #0]
   1680a:	b2d9      	uxtb	r1, r3
   1680c:	4b70      	ldr	r3, [pc, #448]	; (169d0 <vUiHandlerTask+0x2b8>)
   1680e:	781b      	ldrb	r3, [r3, #0]
   16810:	b2da      	uxtb	r2, r3
   16812:	4b70      	ldr	r3, [pc, #448]	; (169d4 <vUiHandlerTask+0x2bc>)
   16814:	781b      	ldrb	r3, [r3, #0]
   16816:	b2db      	uxtb	r3, r3
   16818:	200f      	movs	r0, #15
   1681a:	4c6f      	ldr	r4, [pc, #444]	; (169d8 <vUiHandlerTask+0x2c0>)
   1681c:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   1681e:	4b6f      	ldr	r3, [pc, #444]	; (169dc <vUiHandlerTask+0x2c4>)
   16820:	4798      	blx	r3
                vTaskDelay(1000);
   16822:	23fa      	movs	r3, #250	; 0xfa
   16824:	009b      	lsls	r3, r3, #2
   16826:	0018      	movs	r0, r3
   16828:	4b6d      	ldr	r3, [pc, #436]	; (169e0 <vUiHandlerTask+0x2c8>)
   1682a:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   1682c:	2300      	movs	r3, #0
   1682e:	2200      	movs	r2, #0
   16830:	2100      	movs	r1, #0
   16832:	200f      	movs	r0, #15
   16834:	4c68      	ldr	r4, [pc, #416]	; (169d8 <vUiHandlerTask+0x2c0>)
   16836:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   16838:	4b68      	ldr	r3, [pc, #416]	; (169dc <vUiHandlerTask+0x2c4>)
   1683a:	4798      	blx	r3
                vTaskDelay(1000);
   1683c:	23fa      	movs	r3, #250	; 0xfa
   1683e:	009b      	lsls	r3, r3, #2
   16840:	0018      	movs	r0, r3
   16842:	4b67      	ldr	r3, [pc, #412]	; (169e0 <vUiHandlerTask+0x2c8>)
   16844:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   16846:	4b52      	ldr	r3, [pc, #328]	; (16990 <vUiHandlerTask+0x278>)
   16848:	2200      	movs	r2, #0
   1684a:	701a      	strb	r2, [r3, #0]

                break;
   1684c:	e097      	b.n	1697e <vUiHandlerTask+0x266>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   1684e:	2316      	movs	r3, #22
   16850:	18fc      	adds	r4, r7, r3
   16852:	4b5b      	ldr	r3, [pc, #364]	; (169c0 <vUiHandlerTask+0x2a8>)
   16854:	4798      	blx	r3
   16856:	0003      	movs	r3, r0
   16858:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   1685a:	4b5a      	ldr	r3, [pc, #360]	; (169c4 <vUiHandlerTask+0x2ac>)
   1685c:	2210      	movs	r2, #16
   1685e:	2100      	movs	r1, #0
   16860:	0018      	movs	r0, r3
   16862:	4b55      	ldr	r3, [pc, #340]	; (169b8 <vUiHandlerTask+0x2a0>)
   16864:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   16866:	2316      	movs	r3, #22
   16868:	18fb      	adds	r3, r7, r3
   1686a:	781b      	ldrb	r3, [r3, #0]
   1686c:	2b0f      	cmp	r3, #15
   1686e:	d903      	bls.n	16878 <vUiHandlerTask+0x160>
                    numPresses = BUTTON_PRESSES_MAX;
   16870:	2316      	movs	r3, #22
   16872:	18fb      	adds	r3, r7, r3
   16874:	2210      	movs	r2, #16
   16876:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   16878:	2316      	movs	r3, #22
   1687a:	18fb      	adds	r3, r7, r3
   1687c:	781b      	ldrb	r3, [r3, #0]
   1687e:	2b00      	cmp	r3, #0
   16880:	d065      	beq.n	1694e <vUiHandlerTask+0x236>
   16882:	2316      	movs	r3, #22
   16884:	18fb      	adds	r3, r7, r3
   16886:	781a      	ldrb	r2, [r3, #0]
   16888:	4b4e      	ldr	r3, [pc, #312]	; (169c4 <vUiHandlerTask+0x2ac>)
   1688a:	0011      	movs	r1, r2
   1688c:	0018      	movs	r0, r3
   1688e:	4b4e      	ldr	r3, [pc, #312]	; (169c8 <vUiHandlerTask+0x2b0>)
   16890:	4798      	blx	r3
   16892:	1e03      	subs	r3, r0, #0
   16894:	d15b      	bne.n	1694e <vUiHandlerTask+0x236>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   16896:	2300      	movs	r3, #0
   16898:	613b      	str	r3, [r7, #16]
   1689a:	e050      	b.n	1693e <vUiHandlerTask+0x226>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   1689c:	4a49      	ldr	r2, [pc, #292]	; (169c4 <vUiHandlerTask+0x2ac>)
   1689e:	693b      	ldr	r3, [r7, #16]
   168a0:	18d3      	adds	r3, r2, r3
   168a2:	781b      	ldrb	r3, [r3, #0]
   168a4:	089b      	lsrs	r3, r3, #2
   168a6:	b2db      	uxtb	r3, r3
   168a8:	2b00      	cmp	r3, #0
   168aa:	da00      	bge.n	168ae <vUiHandlerTask+0x196>
   168ac:	3307      	adds	r3, #7
   168ae:	10db      	asrs	r3, r3, #3
   168b0:	b2db      	uxtb	r3, r3
   168b2:	009b      	lsls	r3, r3, #2
   168b4:	b2d9      	uxtb	r1, r3
   168b6:	4a43      	ldr	r2, [pc, #268]	; (169c4 <vUiHandlerTask+0x2ac>)
   168b8:	693b      	ldr	r3, [r7, #16]
   168ba:	18d3      	adds	r3, r2, r3
   168bc:	781b      	ldrb	r3, [r3, #0]
   168be:	089b      	lsrs	r3, r3, #2
   168c0:	b2db      	uxtb	r3, r3
   168c2:	2207      	movs	r2, #7
   168c4:	4013      	ands	r3, r2
   168c6:	b2da      	uxtb	r2, r3
   168c8:	230f      	movs	r3, #15
   168ca:	18fb      	adds	r3, r7, r3
   168cc:	188a      	adds	r2, r1, r2
   168ce:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   168d0:	4a3c      	ldr	r2, [pc, #240]	; (169c4 <vUiHandlerTask+0x2ac>)
   168d2:	693b      	ldr	r3, [r7, #16]
   168d4:	18d3      	adds	r3, r2, r3
   168d6:	781a      	ldrb	r2, [r3, #0]
   168d8:	230e      	movs	r3, #14
   168da:	18fb      	adds	r3, r7, r3
   168dc:	2103      	movs	r1, #3
   168de:	400a      	ands	r2, r1
   168e0:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   168e2:	230e      	movs	r3, #14
   168e4:	18fb      	adds	r3, r7, r3
   168e6:	781b      	ldrb	r3, [r3, #0]
   168e8:	2b03      	cmp	r3, #3
   168ea:	d10f      	bne.n	1690c <vUiHandlerTask+0x1f4>
                            SeesawSetLed(keynum, red, green, blue);
   168ec:	4b37      	ldr	r3, [pc, #220]	; (169cc <vUiHandlerTask+0x2b4>)
   168ee:	781b      	ldrb	r3, [r3, #0]
   168f0:	b2d9      	uxtb	r1, r3
   168f2:	4b37      	ldr	r3, [pc, #220]	; (169d0 <vUiHandlerTask+0x2b8>)
   168f4:	781b      	ldrb	r3, [r3, #0]
   168f6:	b2da      	uxtb	r2, r3
   168f8:	4b36      	ldr	r3, [pc, #216]	; (169d4 <vUiHandlerTask+0x2bc>)
   168fa:	781b      	ldrb	r3, [r3, #0]
   168fc:	b2dc      	uxtb	r4, r3
   168fe:	230f      	movs	r3, #15
   16900:	18fb      	adds	r3, r7, r3
   16902:	7818      	ldrb	r0, [r3, #0]
   16904:	0023      	movs	r3, r4
   16906:	4c34      	ldr	r4, [pc, #208]	; (169d8 <vUiHandlerTask+0x2c0>)
   16908:	47a0      	blx	r4
   1690a:	e015      	b.n	16938 <vUiHandlerTask+0x220>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   1690c:	230f      	movs	r3, #15
   1690e:	18fb      	adds	r3, r7, r3
   16910:	7818      	ldrb	r0, [r3, #0]
   16912:	2300      	movs	r3, #0
   16914:	2200      	movs	r2, #0
   16916:	2100      	movs	r1, #0
   16918:	4c2f      	ldr	r4, [pc, #188]	; (169d8 <vUiHandlerTask+0x2c0>)
   1691a:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   1691c:	4b23      	ldr	r3, [pc, #140]	; (169ac <vUiHandlerTask+0x294>)
   1691e:	781b      	ldrb	r3, [r3, #0]
   16920:	0019      	movs	r1, r3
   16922:	4b24      	ldr	r3, [pc, #144]	; (169b4 <vUiHandlerTask+0x29c>)
   16924:	220f      	movs	r2, #15
   16926:	18ba      	adds	r2, r7, r2
   16928:	7812      	ldrb	r2, [r2, #0]
   1692a:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   1692c:	4b1f      	ldr	r3, [pc, #124]	; (169ac <vUiHandlerTask+0x294>)
   1692e:	781b      	ldrb	r3, [r3, #0]
   16930:	3301      	adds	r3, #1
   16932:	b2da      	uxtb	r2, r3
   16934:	4b1d      	ldr	r3, [pc, #116]	; (169ac <vUiHandlerTask+0x294>)
   16936:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   16938:	693b      	ldr	r3, [r7, #16]
   1693a:	3301      	adds	r3, #1
   1693c:	613b      	str	r3, [r7, #16]
   1693e:	2316      	movs	r3, #22
   16940:	18fb      	adds	r3, r7, r3
   16942:	781a      	ldrb	r2, [r3, #0]
   16944:	693b      	ldr	r3, [r7, #16]
   16946:	429a      	cmp	r2, r3
   16948:	dca8      	bgt.n	1689c <vUiHandlerTask+0x184>
                        }
                    }
                    SeesawOrderLedUpdate();
   1694a:	4b24      	ldr	r3, [pc, #144]	; (169dc <vUiHandlerTask+0x2c4>)
   1694c:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   1694e:	4b17      	ldr	r3, [pc, #92]	; (169ac <vUiHandlerTask+0x294>)
   16950:	781a      	ldrb	r2, [r3, #0]
   16952:	4b17      	ldr	r3, [pc, #92]	; (169b0 <vUiHandlerTask+0x298>)
   16954:	781b      	ldrb	r3, [r3, #0]
   16956:	429a      	cmp	r2, r3
   16958:	d203      	bcs.n	16962 <vUiHandlerTask+0x24a>
   1695a:	4b14      	ldr	r3, [pc, #80]	; (169ac <vUiHandlerTask+0x294>)
   1695c:	781b      	ldrb	r3, [r3, #0]
   1695e:	2b13      	cmp	r3, #19
   16960:	d90c      	bls.n	1697c <vUiHandlerTask+0x264>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   16962:	4b16      	ldr	r3, [pc, #88]	; (169bc <vUiHandlerTask+0x2a4>)
   16964:	2201      	movs	r2, #1
   16966:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   16968:	4b09      	ldr	r3, [pc, #36]	; (16990 <vUiHandlerTask+0x278>)
   1696a:	2201      	movs	r2, #1
   1696c:	701a      	strb	r2, [r3, #0]
                }

                break;
   1696e:	e005      	b.n	1697c <vUiHandlerTask+0x264>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   16970:	4b07      	ldr	r3, [pc, #28]	; (16990 <vUiHandlerTask+0x278>)
   16972:	2200      	movs	r2, #0
   16974:	701a      	strb	r2, [r3, #0]
                break;
   16976:	e002      	b.n	1697e <vUiHandlerTask+0x266>
                break;
   16978:	46c0      	nop			; (mov r8, r8)
   1697a:	e000      	b.n	1697e <vUiHandlerTask+0x266>
                break;
   1697c:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   1697e:	2032      	movs	r0, #50	; 0x32
   16980:	4b17      	ldr	r3, [pc, #92]	; (169e0 <vUiHandlerTask+0x2c8>)
   16982:	4798      	blx	r3
        switch (uiState) {
   16984:	e6eb      	b.n	1675e <vUiHandlerTask+0x46>
   16986:	46c0      	nop			; (mov r8, r8)
   16988:	00037364 	.word	0x00037364
   1698c:	0001ec15 	.word	0x0001ec15
   16990:	2000493c 	.word	0x2000493c
   16994:	00013049 	.word	0x00013049
   16998:	0001279d 	.word	0x0001279d
   1699c:	00012a91 	.word	0x00012a91
   169a0:	20000000 	.word	0x20000000
   169a4:	00037378 	.word	0x00037378
   169a8:	00012eed 	.word	0x00012eed
   169ac:	20000621 	.word	0x20000621
   169b0:	20000622 	.word	0x20000622
   169b4:	20004904 	.word	0x20004904
   169b8:	0003577f 	.word	0x0003577f
   169bc:	20000623 	.word	0x20000623
   169c0:	00016525 	.word	0x00016525
   169c4:	2000492c 	.word	0x2000492c
   169c8:	0001658d 	.word	0x0001658d
   169cc:	20000620 	.word	0x20000620
   169d0:	2000002c 	.word	0x2000002c
   169d4:	2000002d 	.word	0x2000002d
   169d8:	00016611 	.word	0x00016611
   169dc:	000166d9 	.word	0x000166d9
   169e0:	0001cfc1 	.word	0x0001cfc1

000169e4 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   169e4:	b580      	push	{r7, lr}
   169e6:	b082      	sub	sp, #8
   169e8:	af00      	add	r7, sp, #0
   169ea:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   169ec:	4a08      	ldr	r2, [pc, #32]	; (16a10 <UiOrderShowMoves+0x2c>)
   169ee:	687b      	ldr	r3, [r7, #4]
   169f0:	0010      	movs	r0, r2
   169f2:	0019      	movs	r1, r3
   169f4:	2314      	movs	r3, #20
   169f6:	001a      	movs	r2, r3
   169f8:	4b06      	ldr	r3, [pc, #24]	; (16a14 <UiOrderShowMoves+0x30>)
   169fa:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   169fc:	4b06      	ldr	r3, [pc, #24]	; (16a18 <UiOrderShowMoves+0x34>)
   169fe:	2202      	movs	r2, #2
   16a00:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   16a02:	4b06      	ldr	r3, [pc, #24]	; (16a1c <UiOrderShowMoves+0x38>)
   16a04:	2200      	movs	r2, #0
   16a06:	701a      	strb	r2, [r3, #0]
}
   16a08:	46c0      	nop			; (mov r8, r8)
   16a0a:	46bd      	mov	sp, r7
   16a0c:	b002      	add	sp, #8
   16a0e:	bd80      	pop	{r7, pc}
   16a10:	20004918 	.word	0x20004918
   16a14:	00035749 	.word	0x00035749
   16a18:	2000493c 	.word	0x2000493c
   16a1c:	20000623 	.word	0x20000623

00016a20 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   16a20:	b580      	push	{r7, lr}
   16a22:	af00      	add	r7, sp, #0
    return playIsDone;
   16a24:	4b02      	ldr	r3, [pc, #8]	; (16a30 <UiPlayIsDone+0x10>)
   16a26:	781b      	ldrb	r3, [r3, #0]
}
   16a28:	0018      	movs	r0, r3
   16a2a:	46bd      	mov	sp, r7
   16a2c:	bd80      	pop	{r7, pc}
   16a2e:	46c0      	nop			; (mov r8, r8)
   16a30:	20000623 	.word	0x20000623

00016a34 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   16a34:	b580      	push	{r7, lr}
   16a36:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   16a38:	4b01      	ldr	r3, [pc, #4]	; (16a40 <UiGetGamePacketOut+0xc>)
}
   16a3a:	0018      	movs	r0, r3
   16a3c:	46bd      	mov	sp, r7
   16a3e:	bd80      	pop	{r7, pc}
   16a40:	20004904 	.word	0x20004904

00016a44 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   16a44:	b590      	push	{r4, r7, lr}
   16a46:	b083      	sub	sp, #12
   16a48:	af00      	add	r7, sp, #0
   16a4a:	0004      	movs	r4, r0
   16a4c:	0008      	movs	r0, r1
   16a4e:	0011      	movs	r1, r2
   16a50:	1dfb      	adds	r3, r7, #7
   16a52:	1c22      	adds	r2, r4, #0
   16a54:	701a      	strb	r2, [r3, #0]
   16a56:	1dbb      	adds	r3, r7, #6
   16a58:	1c02      	adds	r2, r0, #0
   16a5a:	701a      	strb	r2, [r3, #0]
   16a5c:	1d7b      	adds	r3, r7, #5
   16a5e:	1c0a      	adds	r2, r1, #0
   16a60:	701a      	strb	r2, [r3, #0]
    red = r;
   16a62:	4b08      	ldr	r3, [pc, #32]	; (16a84 <UIChangeColors+0x40>)
   16a64:	1dfa      	adds	r2, r7, #7
   16a66:	7812      	ldrb	r2, [r2, #0]
   16a68:	701a      	strb	r2, [r3, #0]
    green = g;
   16a6a:	4b07      	ldr	r3, [pc, #28]	; (16a88 <UIChangeColors+0x44>)
   16a6c:	1dba      	adds	r2, r7, #6
   16a6e:	7812      	ldrb	r2, [r2, #0]
   16a70:	701a      	strb	r2, [r3, #0]
    blue = b;
   16a72:	4b06      	ldr	r3, [pc, #24]	; (16a8c <UIChangeColors+0x48>)
   16a74:	1d7a      	adds	r2, r7, #5
   16a76:	7812      	ldrb	r2, [r2, #0]
   16a78:	701a      	strb	r2, [r3, #0]
}
   16a7a:	46c0      	nop			; (mov r8, r8)
   16a7c:	46bd      	mov	sp, r7
   16a7e:	b003      	add	sp, #12
   16a80:	bd90      	pop	{r4, r7, pc}
   16a82:	46c0      	nop			; (mov r8, r8)
   16a84:	20000620 	.word	0x20000620
   16a88:	2000002c 	.word	0x2000002c
   16a8c:	2000002d 	.word	0x2000002d

00016a90 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16a90:	b580      	push	{r7, lr}
   16a92:	b084      	sub	sp, #16
   16a94:	af00      	add	r7, sp, #0
   16a96:	0002      	movs	r2, r0
   16a98:	1dfb      	adds	r3, r7, #7
   16a9a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16a9c:	230f      	movs	r3, #15
   16a9e:	18fb      	adds	r3, r7, r3
   16aa0:	1dfa      	adds	r2, r7, #7
   16aa2:	7812      	ldrb	r2, [r2, #0]
   16aa4:	09d2      	lsrs	r2, r2, #7
   16aa6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16aa8:	230e      	movs	r3, #14
   16aaa:	18fb      	adds	r3, r7, r3
   16aac:	1dfa      	adds	r2, r7, #7
   16aae:	7812      	ldrb	r2, [r2, #0]
   16ab0:	0952      	lsrs	r2, r2, #5
   16ab2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16ab4:	4b0d      	ldr	r3, [pc, #52]	; (16aec <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16ab6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16ab8:	230f      	movs	r3, #15
   16aba:	18fb      	adds	r3, r7, r3
   16abc:	781b      	ldrb	r3, [r3, #0]
   16abe:	2b00      	cmp	r3, #0
   16ac0:	d10f      	bne.n	16ae2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16ac2:	230f      	movs	r3, #15
   16ac4:	18fb      	adds	r3, r7, r3
   16ac6:	781b      	ldrb	r3, [r3, #0]
   16ac8:	009b      	lsls	r3, r3, #2
   16aca:	2210      	movs	r2, #16
   16acc:	4694      	mov	ip, r2
   16ace:	44bc      	add	ip, r7
   16ad0:	4463      	add	r3, ip
   16ad2:	3b08      	subs	r3, #8
   16ad4:	681a      	ldr	r2, [r3, #0]
   16ad6:	230e      	movs	r3, #14
   16ad8:	18fb      	adds	r3, r7, r3
   16ada:	781b      	ldrb	r3, [r3, #0]
   16adc:	01db      	lsls	r3, r3, #7
   16ade:	18d3      	adds	r3, r2, r3
   16ae0:	e000      	b.n	16ae4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16ae2:	2300      	movs	r3, #0
	}
}
   16ae4:	0018      	movs	r0, r3
   16ae6:	46bd      	mov	sp, r7
   16ae8:	b004      	add	sp, #16
   16aea:	bd80      	pop	{r7, pc}
   16aec:	41004400 	.word	0x41004400

00016af0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16af0:	b580      	push	{r7, lr}
   16af2:	b082      	sub	sp, #8
   16af4:	af00      	add	r7, sp, #0
   16af6:	0002      	movs	r2, r0
   16af8:	1dfb      	adds	r3, r7, #7
   16afa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16afc:	1dfb      	adds	r3, r7, #7
   16afe:	781b      	ldrb	r3, [r3, #0]
   16b00:	0018      	movs	r0, r3
   16b02:	4b03      	ldr	r3, [pc, #12]	; (16b10 <port_get_group_from_gpio_pin+0x20>)
   16b04:	4798      	blx	r3
   16b06:	0003      	movs	r3, r0
}
   16b08:	0018      	movs	r0, r3
   16b0a:	46bd      	mov	sp, r7
   16b0c:	b002      	add	sp, #8
   16b0e:	bd80      	pop	{r7, pc}
   16b10:	00016a91 	.word	0x00016a91

00016b14 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16b14:	b580      	push	{r7, lr}
   16b16:	b084      	sub	sp, #16
   16b18:	af00      	add	r7, sp, #0
   16b1a:	0002      	movs	r2, r0
   16b1c:	1dfb      	adds	r3, r7, #7
   16b1e:	701a      	strb	r2, [r3, #0]
   16b20:	1dbb      	adds	r3, r7, #6
   16b22:	1c0a      	adds	r2, r1, #0
   16b24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16b26:	1dfb      	adds	r3, r7, #7
   16b28:	781b      	ldrb	r3, [r3, #0]
   16b2a:	0018      	movs	r0, r3
   16b2c:	4b0d      	ldr	r3, [pc, #52]	; (16b64 <port_pin_set_output_level+0x50>)
   16b2e:	4798      	blx	r3
   16b30:	0003      	movs	r3, r0
   16b32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16b34:	1dfb      	adds	r3, r7, #7
   16b36:	781b      	ldrb	r3, [r3, #0]
   16b38:	221f      	movs	r2, #31
   16b3a:	4013      	ands	r3, r2
   16b3c:	2201      	movs	r2, #1
   16b3e:	409a      	lsls	r2, r3
   16b40:	0013      	movs	r3, r2
   16b42:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16b44:	1dbb      	adds	r3, r7, #6
   16b46:	781b      	ldrb	r3, [r3, #0]
   16b48:	2b00      	cmp	r3, #0
   16b4a:	d003      	beq.n	16b54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16b4c:	68fb      	ldr	r3, [r7, #12]
   16b4e:	68ba      	ldr	r2, [r7, #8]
   16b50:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16b52:	e002      	b.n	16b5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16b54:	68fb      	ldr	r3, [r7, #12]
   16b56:	68ba      	ldr	r2, [r7, #8]
   16b58:	615a      	str	r2, [r3, #20]
}
   16b5a:	46c0      	nop			; (mov r8, r8)
   16b5c:	46bd      	mov	sp, r7
   16b5e:	b004      	add	sp, #16
   16b60:	bd80      	pop	{r7, pc}
   16b62:	46c0      	nop			; (mov r8, r8)
   16b64:	00016af1 	.word	0x00016af1

00016b68 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   16b68:	b580      	push	{r7, lr}
   16b6a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   16b6c:	4b02      	ldr	r3, [pc, #8]	; (16b78 <init_state+0x10>)
   16b6e:	2200      	movs	r2, #0
   16b70:	701a      	strb	r2, [r3, #0]
}
   16b72:	46c0      	nop			; (mov r8, r8)
   16b74:	46bd      	mov	sp, r7
   16b76:	bd80      	pop	{r7, pc}
   16b78:	20000639 	.word	0x20000639

00016b7c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   16b7c:	b580      	push	{r7, lr}
   16b7e:	b082      	sub	sp, #8
   16b80:	af00      	add	r7, sp, #0
   16b82:	0002      	movs	r2, r0
   16b84:	1dfb      	adds	r3, r7, #7
   16b86:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   16b88:	1dfb      	adds	r3, r7, #7
   16b8a:	781b      	ldrb	r3, [r3, #0]
   16b8c:	b25b      	sxtb	r3, r3
   16b8e:	43db      	mvns	r3, r3
   16b90:	b25b      	sxtb	r3, r3
   16b92:	4a06      	ldr	r2, [pc, #24]	; (16bac <clear_state+0x30>)
   16b94:	7812      	ldrb	r2, [r2, #0]
   16b96:	b252      	sxtb	r2, r2
   16b98:	4013      	ands	r3, r2
   16b9a:	b25b      	sxtb	r3, r3
   16b9c:	b2da      	uxtb	r2, r3
   16b9e:	4b03      	ldr	r3, [pc, #12]	; (16bac <clear_state+0x30>)
   16ba0:	701a      	strb	r2, [r3, #0]
}
   16ba2:	46c0      	nop			; (mov r8, r8)
   16ba4:	46bd      	mov	sp, r7
   16ba6:	b002      	add	sp, #8
   16ba8:	bd80      	pop	{r7, pc}
   16baa:	46c0      	nop			; (mov r8, r8)
   16bac:	20000639 	.word	0x20000639

00016bb0 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   16bb0:	b580      	push	{r7, lr}
   16bb2:	b082      	sub	sp, #8
   16bb4:	af00      	add	r7, sp, #0
   16bb6:	0002      	movs	r2, r0
   16bb8:	1dfb      	adds	r3, r7, #7
   16bba:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   16bbc:	4b05      	ldr	r3, [pc, #20]	; (16bd4 <add_state+0x24>)
   16bbe:	781a      	ldrb	r2, [r3, #0]
   16bc0:	1dfb      	adds	r3, r7, #7
   16bc2:	781b      	ldrb	r3, [r3, #0]
   16bc4:	4313      	orrs	r3, r2
   16bc6:	b2da      	uxtb	r2, r3
   16bc8:	4b02      	ldr	r3, [pc, #8]	; (16bd4 <add_state+0x24>)
   16bca:	701a      	strb	r2, [r3, #0]
}
   16bcc:	46c0      	nop			; (mov r8, r8)
   16bce:	46bd      	mov	sp, r7
   16bd0:	b002      	add	sp, #8
   16bd2:	bd80      	pop	{r7, pc}
   16bd4:	20000639 	.word	0x20000639

00016bd8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   16bd8:	b580      	push	{r7, lr}
   16bda:	b082      	sub	sp, #8
   16bdc:	af00      	add	r7, sp, #0
   16bde:	0002      	movs	r2, r0
   16be0:	1dfb      	adds	r3, r7, #7
   16be2:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16be4:	4b06      	ldr	r3, [pc, #24]	; (16c00 <is_state_set+0x28>)
   16be6:	781b      	ldrb	r3, [r3, #0]
   16be8:	1dfa      	adds	r2, r7, #7
   16bea:	7812      	ldrb	r2, [r2, #0]
   16bec:	4013      	ands	r3, r2
   16bee:	b2db      	uxtb	r3, r3
   16bf0:	1e5a      	subs	r2, r3, #1
   16bf2:	4193      	sbcs	r3, r2
   16bf4:	b2db      	uxtb	r3, r3
}
   16bf6:	0018      	movs	r0, r3
   16bf8:	46bd      	mov	sp, r7
   16bfa:	b002      	add	sp, #8
   16bfc:	bd80      	pop	{r7, pc}
   16bfe:	46c0      	nop			; (mov r8, r8)
   16c00:	20000639 	.word	0x20000639

00016c04 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16c04:	b590      	push	{r4, r7, lr}
   16c06:	b085      	sub	sp, #20
   16c08:	af00      	add	r7, sp, #0
   16c0a:	6078      	str	r0, [r7, #4]
   16c0c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16c0e:	687b      	ldr	r3, [r7, #4]
   16c10:	2b00      	cmp	r3, #0
   16c12:	d002      	beq.n	16c1a <is_exist_file+0x16>
   16c14:	683b      	ldr	r3, [r7, #0]
   16c16:	2b00      	cmp	r3, #0
   16c18:	d101      	bne.n	16c1e <is_exist_file+0x1a>
        return false;
   16c1a:	2300      	movs	r3, #0
   16c1c:	e013      	b.n	16c46 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16c1e:	230f      	movs	r3, #15
   16c20:	18fc      	adds	r4, r7, r3
   16c22:	6839      	ldr	r1, [r7, #0]
   16c24:	4b0a      	ldr	r3, [pc, #40]	; (16c50 <is_exist_file+0x4c>)
   16c26:	2200      	movs	r2, #0
   16c28:	0018      	movs	r0, r3
   16c2a:	4b0a      	ldr	r3, [pc, #40]	; (16c54 <is_exist_file+0x50>)
   16c2c:	4798      	blx	r3
   16c2e:	0003      	movs	r3, r0
   16c30:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   16c32:	4b07      	ldr	r3, [pc, #28]	; (16c50 <is_exist_file+0x4c>)
   16c34:	0018      	movs	r0, r3
   16c36:	4b08      	ldr	r3, [pc, #32]	; (16c58 <is_exist_file+0x54>)
   16c38:	4798      	blx	r3
    return (ret == FR_OK);
   16c3a:	230f      	movs	r3, #15
   16c3c:	18fb      	adds	r3, r7, r3
   16c3e:	781b      	ldrb	r3, [r3, #0]
   16c40:	425a      	negs	r2, r3
   16c42:	4153      	adcs	r3, r2
   16c44:	b2db      	uxtb	r3, r3
}
   16c46:	0018      	movs	r0, r3
   16c48:	46bd      	mov	sp, r7
   16c4a:	b005      	add	sp, #20
   16c4c:	bd90      	pop	{r4, r7, pc}
   16c4e:	46c0      	nop			; (mov r8, r8)
   16c50:	2000086c 	.word	0x2000086c
   16c54:	0002e6d5 	.word	0x0002e6d5
   16c58:	0002f0d5 	.word	0x0002f0d5

00016c5c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16c5c:	b580      	push	{r7, lr}
   16c5e:	b09e      	sub	sp, #120	; 0x78
   16c60:	af00      	add	r7, sp, #0
   16c62:	60f8      	str	r0, [r7, #12]
   16c64:	60b9      	str	r1, [r7, #8]
   16c66:	1dfb      	adds	r3, r7, #7
   16c68:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   16c6a:	2376      	movs	r3, #118	; 0x76
   16c6c:	18fb      	adds	r3, r7, r3
   16c6e:	2201      	movs	r2, #1
   16c70:	801a      	strh	r2, [r3, #0]
   16c72:	2374      	movs	r3, #116	; 0x74
   16c74:	18fb      	adds	r3, r7, r3
   16c76:	2200      	movs	r2, #0
   16c78:	801a      	strh	r2, [r3, #0]
   16c7a:	236e      	movs	r3, #110	; 0x6e
   16c7c:	18fb      	adds	r3, r7, r3
   16c7e:	2200      	movs	r2, #0
   16c80:	801a      	strh	r2, [r3, #0]
   16c82:	2372      	movs	r3, #114	; 0x72
   16c84:	18fb      	adds	r3, r7, r3
   16c86:	2200      	movs	r2, #0
   16c88:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16c8a:	2324      	movs	r3, #36	; 0x24
   16c8c:	18fb      	adds	r3, r7, r3
   16c8e:	0018      	movs	r0, r3
   16c90:	2341      	movs	r3, #65	; 0x41
   16c92:	001a      	movs	r2, r3
   16c94:	2100      	movs	r1, #0
   16c96:	4b92      	ldr	r3, [pc, #584]	; (16ee0 <rename_to_unique+0x284>)
   16c98:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   16c9a:	2318      	movs	r3, #24
   16c9c:	18fb      	adds	r3, r7, r3
   16c9e:	0018      	movs	r0, r3
   16ca0:	2309      	movs	r3, #9
   16ca2:	001a      	movs	r2, r3
   16ca4:	2100      	movs	r1, #0
   16ca6:	4b8e      	ldr	r3, [pc, #568]	; (16ee0 <rename_to_unique+0x284>)
   16ca8:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   16caa:	2314      	movs	r3, #20
   16cac:	18fb      	adds	r3, r7, r3
   16cae:	2200      	movs	r2, #0
   16cb0:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   16cb2:	2300      	movs	r3, #0
   16cb4:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   16cb6:	2371      	movs	r3, #113	; 0x71
   16cb8:	18fb      	adds	r3, r7, r3
   16cba:	2200      	movs	r2, #0
   16cbc:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   16cbe:	68bb      	ldr	r3, [r7, #8]
   16cc0:	2b00      	cmp	r3, #0
   16cc2:	d101      	bne.n	16cc8 <rename_to_unique+0x6c>
        return false;
   16cc4:	2300      	movs	r3, #0
   16cc6:	e106      	b.n	16ed6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   16cc8:	68ba      	ldr	r2, [r7, #8]
   16cca:	68fb      	ldr	r3, [r7, #12]
   16ccc:	0011      	movs	r1, r2
   16cce:	0018      	movs	r0, r3
   16cd0:	4b84      	ldr	r3, [pc, #528]	; (16ee4 <rename_to_unique+0x288>)
   16cd2:	4798      	blx	r3
   16cd4:	0003      	movs	r3, r0
   16cd6:	001a      	movs	r2, r3
   16cd8:	2301      	movs	r3, #1
   16cda:	4053      	eors	r3, r2
   16cdc:	b2db      	uxtb	r3, r3
   16cde:	2b00      	cmp	r3, #0
   16ce0:	d001      	beq.n	16ce6 <rename_to_unique+0x8a>
        return true;
   16ce2:	2301      	movs	r3, #1
   16ce4:	e0f7      	b.n	16ed6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16ce6:	68bb      	ldr	r3, [r7, #8]
   16ce8:	0018      	movs	r0, r3
   16cea:	4b7f      	ldr	r3, [pc, #508]	; (16ee8 <rename_to_unique+0x28c>)
   16cec:	4798      	blx	r3
   16cee:	0003      	movs	r3, r0
   16cf0:	2b40      	cmp	r3, #64	; 0x40
   16cf2:	d901      	bls.n	16cf8 <rename_to_unique+0x9c>
        return false;
   16cf4:	2300      	movs	r3, #0
   16cf6:	e0ee      	b.n	16ed6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   16cf8:	68bb      	ldr	r3, [r7, #8]
   16cfa:	212e      	movs	r1, #46	; 0x2e
   16cfc:	0018      	movs	r0, r3
   16cfe:	4b7b      	ldr	r3, [pc, #492]	; (16eec <rename_to_unique+0x290>)
   16d00:	4798      	blx	r3
   16d02:	0003      	movs	r3, r0
   16d04:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   16d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16d08:	2b00      	cmp	r3, #0
   16d0a:	d052      	beq.n	16db2 <rename_to_unique+0x156>
        ext_len = strlen(p);
   16d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16d0e:	0018      	movs	r0, r3
   16d10:	4b75      	ldr	r3, [pc, #468]	; (16ee8 <rename_to_unique+0x28c>)
   16d12:	4798      	blx	r3
   16d14:	0002      	movs	r2, r0
   16d16:	236e      	movs	r3, #110	; 0x6e
   16d18:	18fb      	adds	r3, r7, r3
   16d1a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16d1c:	236e      	movs	r3, #110	; 0x6e
   16d1e:	18fb      	adds	r3, r7, r3
   16d20:	881b      	ldrh	r3, [r3, #0]
   16d22:	2b07      	cmp	r3, #7
   16d24:	d837      	bhi.n	16d96 <rename_to_unique+0x13a>
            valid_ext = true;
   16d26:	2371      	movs	r3, #113	; 0x71
   16d28:	18fb      	adds	r3, r7, r3
   16d2a:	2201      	movs	r2, #1
   16d2c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16d2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16d30:	2318      	movs	r3, #24
   16d32:	18fb      	adds	r3, r7, r3
   16d34:	0011      	movs	r1, r2
   16d36:	0018      	movs	r0, r3
   16d38:	4b6d      	ldr	r3, [pc, #436]	; (16ef0 <rename_to_unique+0x294>)
   16d3a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16d3c:	68bb      	ldr	r3, [r7, #8]
   16d3e:	0018      	movs	r0, r3
   16d40:	4b69      	ldr	r3, [pc, #420]	; (16ee8 <rename_to_unique+0x28c>)
   16d42:	4798      	blx	r3
   16d44:	0002      	movs	r2, r0
   16d46:	236e      	movs	r3, #110	; 0x6e
   16d48:	18fb      	adds	r3, r7, r3
   16d4a:	881b      	ldrh	r3, [r3, #0]
   16d4c:	1ad3      	subs	r3, r2, r3
   16d4e:	2b3c      	cmp	r3, #60	; 0x3c
   16d50:	d911      	bls.n	16d76 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16d52:	2374      	movs	r3, #116	; 0x74
   16d54:	18fb      	adds	r3, r7, r3
   16d56:	226e      	movs	r2, #110	; 0x6e
   16d58:	18ba      	adds	r2, r7, r2
   16d5a:	8812      	ldrh	r2, [r2, #0]
   16d5c:	213c      	movs	r1, #60	; 0x3c
   16d5e:	1a8a      	subs	r2, r1, r2
   16d60:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16d62:	2374      	movs	r3, #116	; 0x74
   16d64:	18fb      	adds	r3, r7, r3
   16d66:	881a      	ldrh	r2, [r3, #0]
   16d68:	68b9      	ldr	r1, [r7, #8]
   16d6a:	2324      	movs	r3, #36	; 0x24
   16d6c:	18fb      	adds	r3, r7, r3
   16d6e:	0018      	movs	r0, r3
   16d70:	4b60      	ldr	r3, [pc, #384]	; (16ef4 <rename_to_unique+0x298>)
   16d72:	4798      	blx	r3
   16d74:	e02a      	b.n	16dcc <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   16d76:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16d78:	68bb      	ldr	r3, [r7, #8]
   16d7a:	1ad2      	subs	r2, r2, r3
   16d7c:	2374      	movs	r3, #116	; 0x74
   16d7e:	18fb      	adds	r3, r7, r3
   16d80:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16d82:	2374      	movs	r3, #116	; 0x74
   16d84:	18fb      	adds	r3, r7, r3
   16d86:	881a      	ldrh	r2, [r3, #0]
   16d88:	68b9      	ldr	r1, [r7, #8]
   16d8a:	2324      	movs	r3, #36	; 0x24
   16d8c:	18fb      	adds	r3, r7, r3
   16d8e:	0018      	movs	r0, r3
   16d90:	4b58      	ldr	r3, [pc, #352]	; (16ef4 <rename_to_unique+0x298>)
   16d92:	4798      	blx	r3
   16d94:	e01a      	b.n	16dcc <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16d96:	2374      	movs	r3, #116	; 0x74
   16d98:	18fb      	adds	r3, r7, r3
   16d9a:	223c      	movs	r2, #60	; 0x3c
   16d9c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16d9e:	2374      	movs	r3, #116	; 0x74
   16da0:	18fb      	adds	r3, r7, r3
   16da2:	881a      	ldrh	r2, [r3, #0]
   16da4:	68b9      	ldr	r1, [r7, #8]
   16da6:	2324      	movs	r3, #36	; 0x24
   16da8:	18fb      	adds	r3, r7, r3
   16daa:	0018      	movs	r0, r3
   16dac:	4b51      	ldr	r3, [pc, #324]	; (16ef4 <rename_to_unique+0x298>)
   16dae:	4798      	blx	r3
   16db0:	e00c      	b.n	16dcc <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16db2:	2374      	movs	r3, #116	; 0x74
   16db4:	18fb      	adds	r3, r7, r3
   16db6:	223c      	movs	r2, #60	; 0x3c
   16db8:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   16dba:	2374      	movs	r3, #116	; 0x74
   16dbc:	18fb      	adds	r3, r7, r3
   16dbe:	881a      	ldrh	r2, [r3, #0]
   16dc0:	68b9      	ldr	r1, [r7, #8]
   16dc2:	2324      	movs	r3, #36	; 0x24
   16dc4:	18fb      	adds	r3, r7, r3
   16dc6:	0018      	movs	r0, r3
   16dc8:	4b4a      	ldr	r3, [pc, #296]	; (16ef4 <rename_to_unique+0x298>)
   16dca:	4798      	blx	r3
    }

    name[name_len++] = '-';
   16dcc:	2374      	movs	r3, #116	; 0x74
   16dce:	18fb      	adds	r3, r7, r3
   16dd0:	881b      	ldrh	r3, [r3, #0]
   16dd2:	2274      	movs	r2, #116	; 0x74
   16dd4:	18ba      	adds	r2, r7, r2
   16dd6:	1c59      	adds	r1, r3, #1
   16dd8:	8011      	strh	r1, [r2, #0]
   16dda:	001a      	movs	r2, r3
   16ddc:	2324      	movs	r3, #36	; 0x24
   16dde:	18fb      	adds	r3, r7, r3
   16de0:	212d      	movs	r1, #45	; 0x2d
   16de2:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16de4:	2376      	movs	r3, #118	; 0x76
   16de6:	18fb      	adds	r3, r7, r3
   16de8:	2200      	movs	r2, #0
   16dea:	801a      	strh	r2, [r3, #0]
   16dec:	2372      	movs	r3, #114	; 0x72
   16dee:	18fb      	adds	r3, r7, r3
   16df0:	2201      	movs	r2, #1
   16df2:	801a      	strh	r2, [r3, #0]
   16df4:	e010      	b.n	16e18 <rename_to_unique+0x1bc>
        count *= 10;
   16df6:	2372      	movs	r3, #114	; 0x72
   16df8:	18fa      	adds	r2, r7, r3
   16dfa:	2372      	movs	r3, #114	; 0x72
   16dfc:	18fb      	adds	r3, r7, r3
   16dfe:	881b      	ldrh	r3, [r3, #0]
   16e00:	1c19      	adds	r1, r3, #0
   16e02:	0089      	lsls	r1, r1, #2
   16e04:	18cb      	adds	r3, r1, r3
   16e06:	18db      	adds	r3, r3, r3
   16e08:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16e0a:	2376      	movs	r3, #118	; 0x76
   16e0c:	18fb      	adds	r3, r7, r3
   16e0e:	881a      	ldrh	r2, [r3, #0]
   16e10:	2376      	movs	r3, #118	; 0x76
   16e12:	18fb      	adds	r3, r7, r3
   16e14:	3201      	adds	r2, #1
   16e16:	801a      	strh	r2, [r3, #0]
   16e18:	2376      	movs	r3, #118	; 0x76
   16e1a:	18fb      	adds	r3, r7, r3
   16e1c:	881b      	ldrh	r3, [r3, #0]
   16e1e:	2b02      	cmp	r3, #2
   16e20:	d9e9      	bls.n	16df6 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16e22:	2376      	movs	r3, #118	; 0x76
   16e24:	18fb      	adds	r3, r7, r3
   16e26:	2201      	movs	r2, #1
   16e28:	801a      	strh	r2, [r3, #0]
   16e2a:	e04b      	b.n	16ec4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16e2c:	2376      	movs	r3, #118	; 0x76
   16e2e:	18fb      	adds	r3, r7, r3
   16e30:	881a      	ldrh	r2, [r3, #0]
   16e32:	4931      	ldr	r1, [pc, #196]	; (16ef8 <rename_to_unique+0x29c>)
   16e34:	2314      	movs	r3, #20
   16e36:	18fb      	adds	r3, r7, r3
   16e38:	0018      	movs	r0, r3
   16e3a:	4b30      	ldr	r3, [pc, #192]	; (16efc <rename_to_unique+0x2a0>)
   16e3c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16e3e:	2374      	movs	r3, #116	; 0x74
   16e40:	18fb      	adds	r3, r7, r3
   16e42:	881b      	ldrh	r3, [r3, #0]
   16e44:	2224      	movs	r2, #36	; 0x24
   16e46:	18ba      	adds	r2, r7, r2
   16e48:	18d3      	adds	r3, r2, r3
   16e4a:	2214      	movs	r2, #20
   16e4c:	18b9      	adds	r1, r7, r2
   16e4e:	2203      	movs	r2, #3
   16e50:	0018      	movs	r0, r3
   16e52:	4b28      	ldr	r3, [pc, #160]	; (16ef4 <rename_to_unique+0x298>)
   16e54:	4798      	blx	r3
        if (valid_ext) {
   16e56:	2371      	movs	r3, #113	; 0x71
   16e58:	18fb      	adds	r3, r7, r3
   16e5a:	781b      	ldrb	r3, [r3, #0]
   16e5c:	2b00      	cmp	r3, #0
   16e5e:	d00c      	beq.n	16e7a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16e60:	2374      	movs	r3, #116	; 0x74
   16e62:	18fb      	adds	r3, r7, r3
   16e64:	881b      	ldrh	r3, [r3, #0]
   16e66:	3303      	adds	r3, #3
   16e68:	2224      	movs	r2, #36	; 0x24
   16e6a:	18ba      	adds	r2, r7, r2
   16e6c:	18d3      	adds	r3, r2, r3
   16e6e:	2218      	movs	r2, #24
   16e70:	18ba      	adds	r2, r7, r2
   16e72:	0011      	movs	r1, r2
   16e74:	0018      	movs	r0, r3
   16e76:	4b1e      	ldr	r3, [pc, #120]	; (16ef0 <rename_to_unique+0x294>)
   16e78:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   16e7a:	2324      	movs	r3, #36	; 0x24
   16e7c:	18fa      	adds	r2, r7, r3
   16e7e:	68fb      	ldr	r3, [r7, #12]
   16e80:	0011      	movs	r1, r2
   16e82:	0018      	movs	r0, r3
   16e84:	4b17      	ldr	r3, [pc, #92]	; (16ee4 <rename_to_unique+0x288>)
   16e86:	4798      	blx	r3
   16e88:	0003      	movs	r3, r0
   16e8a:	001a      	movs	r2, r3
   16e8c:	2301      	movs	r3, #1
   16e8e:	4053      	eors	r3, r2
   16e90:	b2db      	uxtb	r3, r3
   16e92:	2b00      	cmp	r3, #0
   16e94:	d00f      	beq.n	16eb6 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   16e96:	1dfb      	adds	r3, r7, #7
   16e98:	781a      	ldrb	r2, [r3, #0]
   16e9a:	68bb      	ldr	r3, [r7, #8]
   16e9c:	2100      	movs	r1, #0
   16e9e:	0018      	movs	r0, r3
   16ea0:	4b0f      	ldr	r3, [pc, #60]	; (16ee0 <rename_to_unique+0x284>)
   16ea2:	4798      	blx	r3
            strcpy(file_path_name, name);
   16ea4:	2324      	movs	r3, #36	; 0x24
   16ea6:	18fa      	adds	r2, r7, r3
   16ea8:	68bb      	ldr	r3, [r7, #8]
   16eaa:	0011      	movs	r1, r2
   16eac:	0018      	movs	r0, r3
   16eae:	4b10      	ldr	r3, [pc, #64]	; (16ef0 <rename_to_unique+0x294>)
   16eb0:	4798      	blx	r3
            return true;
   16eb2:	2301      	movs	r3, #1
   16eb4:	e00f      	b.n	16ed6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16eb6:	2376      	movs	r3, #118	; 0x76
   16eb8:	18fb      	adds	r3, r7, r3
   16eba:	881a      	ldrh	r2, [r3, #0]
   16ebc:	2376      	movs	r3, #118	; 0x76
   16ebe:	18fb      	adds	r3, r7, r3
   16ec0:	3201      	adds	r2, #1
   16ec2:	801a      	strh	r2, [r3, #0]
   16ec4:	2376      	movs	r3, #118	; 0x76
   16ec6:	18fa      	adds	r2, r7, r3
   16ec8:	2372      	movs	r3, #114	; 0x72
   16eca:	18fb      	adds	r3, r7, r3
   16ecc:	8812      	ldrh	r2, [r2, #0]
   16ece:	881b      	ldrh	r3, [r3, #0]
   16ed0:	429a      	cmp	r2, r3
   16ed2:	d3ab      	bcc.n	16e2c <rename_to_unique+0x1d0>
        }
    }
    return false;
   16ed4:	2300      	movs	r3, #0
}
   16ed6:	0018      	movs	r0, r3
   16ed8:	46bd      	mov	sp, r7
   16eda:	b01e      	add	sp, #120	; 0x78
   16edc:	bd80      	pop	{r7, pc}
   16ede:	46c0      	nop			; (mov r8, r8)
   16ee0:	0003577f 	.word	0x0003577f
   16ee4:	00016c05 	.word	0x00016c05
   16ee8:	00035b37 	.word	0x00035b37
   16eec:	00035b91 	.word	0x00035b91
   16ef0:	00035aeb 	.word	0x00035aeb
   16ef4:	00035b67 	.word	0x00035b67
   16ef8:	00037394 	.word	0x00037394
   16efc:	00035a3d 	.word	0x00035a3d

00016f00 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16f00:	b590      	push	{r4, r7, lr}
   16f02:	b083      	sub	sp, #12
   16f04:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16f06:	2001      	movs	r0, #1
   16f08:	4b22      	ldr	r3, [pc, #136]	; (16f94 <start_download+0x94>)
   16f0a:	4798      	blx	r3
   16f0c:	0003      	movs	r3, r0
   16f0e:	001a      	movs	r2, r3
   16f10:	2301      	movs	r3, #1
   16f12:	4053      	eors	r3, r2
   16f14:	b2db      	uxtb	r3, r3
   16f16:	2b00      	cmp	r3, #0
   16f18:	d005      	beq.n	16f26 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16f1a:	4b1f      	ldr	r3, [pc, #124]	; (16f98 <start_download+0x98>)
   16f1c:	0019      	movs	r1, r3
   16f1e:	2001      	movs	r0, #1
   16f20:	4b1e      	ldr	r3, [pc, #120]	; (16f9c <start_download+0x9c>)
   16f22:	4798      	blx	r3
        return;
   16f24:	e032      	b.n	16f8c <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16f26:	2002      	movs	r0, #2
   16f28:	4b1a      	ldr	r3, [pc, #104]	; (16f94 <start_download+0x94>)
   16f2a:	4798      	blx	r3
   16f2c:	0003      	movs	r3, r0
   16f2e:	001a      	movs	r2, r3
   16f30:	2301      	movs	r3, #1
   16f32:	4053      	eors	r3, r2
   16f34:	b2db      	uxtb	r3, r3
   16f36:	2b00      	cmp	r3, #0
   16f38:	d005      	beq.n	16f46 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16f3a:	4b19      	ldr	r3, [pc, #100]	; (16fa0 <start_download+0xa0>)
   16f3c:	0019      	movs	r1, r3
   16f3e:	2001      	movs	r0, #1
   16f40:	4b16      	ldr	r3, [pc, #88]	; (16f9c <start_download+0x9c>)
   16f42:	4798      	blx	r3
        return;
   16f44:	e022      	b.n	16f8c <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16f46:	2004      	movs	r0, #4
   16f48:	4b12      	ldr	r3, [pc, #72]	; (16f94 <start_download+0x94>)
   16f4a:	4798      	blx	r3
   16f4c:	1e03      	subs	r3, r0, #0
   16f4e:	d005      	beq.n	16f5c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16f50:	4b14      	ldr	r3, [pc, #80]	; (16fa4 <start_download+0xa4>)
   16f52:	0019      	movs	r1, r3
   16f54:	2001      	movs	r0, #1
   16f56:	4b11      	ldr	r3, [pc, #68]	; (16f9c <start_download+0x9c>)
   16f58:	4798      	blx	r3
        return;
   16f5a:	e017      	b.n	16f8c <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16f5c:	2008      	movs	r0, #8
   16f5e:	4b0d      	ldr	r3, [pc, #52]	; (16f94 <start_download+0x94>)
   16f60:	4798      	blx	r3
   16f62:	1e03      	subs	r3, r0, #0
   16f64:	d005      	beq.n	16f72 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   16f66:	4b10      	ldr	r3, [pc, #64]	; (16fa8 <start_download+0xa8>)
   16f68:	0019      	movs	r1, r3
   16f6a:	2001      	movs	r0, #1
   16f6c:	4b0b      	ldr	r3, [pc, #44]	; (16f9c <start_download+0x9c>)
   16f6e:	4798      	blx	r3
        return;
   16f70:	e00c      	b.n	16f8c <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16f72:	4b0e      	ldr	r3, [pc, #56]	; (16fac <start_download+0xac>)
   16f74:	0019      	movs	r1, r3
   16f76:	2001      	movs	r0, #1
   16f78:	4b08      	ldr	r3, [pc, #32]	; (16f9c <start_download+0x9c>)
   16f7a:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16f7c:	490c      	ldr	r1, [pc, #48]	; (16fb0 <start_download+0xb0>)
   16f7e:	480d      	ldr	r0, [pc, #52]	; (16fb4 <start_download+0xb4>)
   16f80:	2300      	movs	r3, #0
   16f82:	9300      	str	r3, [sp, #0]
   16f84:	2300      	movs	r3, #0
   16f86:	2201      	movs	r2, #1
   16f88:	4c0b      	ldr	r4, [pc, #44]	; (16fb8 <start_download+0xb8>)
   16f8a:	47a0      	blx	r4
}
   16f8c:	46bd      	mov	sp, r7
   16f8e:	b001      	add	sp, #4
   16f90:	bd90      	pop	{r4, r7, pc}
   16f92:	46c0      	nop			; (mov r8, r8)
   16f94:	00016bd9 	.word	0x00016bd9
   16f98:	0003739c 	.word	0x0003739c
   16f9c:	0001ed01 	.word	0x0001ed01
   16fa0:	000373c8 	.word	0x000373c8
   16fa4:	000373f4 	.word	0x000373f4
   16fa8:	00037420 	.word	0x00037420
   16fac:	0003744c 	.word	0x0003744c
   16fb0:	00037478 	.word	0x00037478
   16fb4:	20004998 	.word	0x20004998
   16fb8:	00031d29 	.word	0x00031d29

00016fbc <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16fbc:	b5b0      	push	{r4, r5, r7, lr}
   16fbe:	b086      	sub	sp, #24
   16fc0:	af00      	add	r7, sp, #0
   16fc2:	6078      	str	r0, [r7, #4]
   16fc4:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16fc6:	687b      	ldr	r3, [r7, #4]
   16fc8:	2b00      	cmp	r3, #0
   16fca:	d002      	beq.n	16fd2 <store_file_packet+0x16>
   16fcc:	683b      	ldr	r3, [r7, #0]
   16fce:	2b00      	cmp	r3, #0
   16fd0:	d105      	bne.n	16fde <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16fd2:	4b58      	ldr	r3, [pc, #352]	; (17134 <store_file_packet+0x178>)
   16fd4:	0019      	movs	r1, r3
   16fd6:	2001      	movs	r0, #1
   16fd8:	4b57      	ldr	r3, [pc, #348]	; (17138 <store_file_packet+0x17c>)
   16fda:	4798      	blx	r3
        return;
   16fdc:	e0a6      	b.n	1712c <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16fde:	2008      	movs	r0, #8
   16fe0:	4b56      	ldr	r3, [pc, #344]	; (1713c <store_file_packet+0x180>)
   16fe2:	4798      	blx	r3
   16fe4:	0003      	movs	r3, r0
   16fe6:	001a      	movs	r2, r3
   16fe8:	2301      	movs	r3, #1
   16fea:	4053      	eors	r3, r2
   16fec:	b2db      	uxtb	r3, r3
   16fee:	2b00      	cmp	r3, #0
   16ff0:	d055      	beq.n	1709e <store_file_packet+0xe2>
        char *cp = NULL;
   16ff2:	2300      	movs	r3, #0
   16ff4:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16ff6:	4b52      	ldr	r3, [pc, #328]	; (17140 <store_file_packet+0x184>)
   16ff8:	2230      	movs	r2, #48	; 0x30
   16ffa:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16ffc:	4b50      	ldr	r3, [pc, #320]	; (17140 <store_file_packet+0x184>)
   16ffe:	223a      	movs	r2, #58	; 0x3a
   17000:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   17002:	4b50      	ldr	r3, [pc, #320]	; (17144 <store_file_packet+0x188>)
   17004:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   17006:	e002      	b.n	1700e <store_file_packet+0x52>
            cp--;
   17008:	697b      	ldr	r3, [r7, #20]
   1700a:	3b01      	subs	r3, #1
   1700c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1700e:	697b      	ldr	r3, [r7, #20]
   17010:	781b      	ldrb	r3, [r3, #0]
   17012:	2b2f      	cmp	r3, #47	; 0x2f
   17014:	d1f8      	bne.n	17008 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   17016:	697b      	ldr	r3, [r7, #20]
   17018:	0018      	movs	r0, r3
   1701a:	4b4b      	ldr	r3, [pc, #300]	; (17148 <store_file_packet+0x18c>)
   1701c:	4798      	blx	r3
   1701e:	0003      	movs	r3, r0
   17020:	2b01      	cmp	r3, #1
   17022:	d924      	bls.n	1706e <store_file_packet+0xb2>
            cp++;
   17024:	697b      	ldr	r3, [r7, #20]
   17026:	3301      	adds	r3, #1
   17028:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   1702a:	697a      	ldr	r2, [r7, #20]
   1702c:	4b47      	ldr	r3, [pc, #284]	; (1714c <store_file_packet+0x190>)
   1702e:	0011      	movs	r1, r2
   17030:	0018      	movs	r0, r3
   17032:	4b47      	ldr	r3, [pc, #284]	; (17150 <store_file_packet+0x194>)
   17034:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   17036:	4942      	ldr	r1, [pc, #264]	; (17140 <store_file_packet+0x184>)
   17038:	4b46      	ldr	r3, [pc, #280]	; (17154 <store_file_packet+0x198>)
   1703a:	2240      	movs	r2, #64	; 0x40
   1703c:	0018      	movs	r0, r3
   1703e:	4b46      	ldr	r3, [pc, #280]	; (17158 <store_file_packet+0x19c>)
   17040:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   17042:	4a3f      	ldr	r2, [pc, #252]	; (17140 <store_file_packet+0x184>)
   17044:	4b45      	ldr	r3, [pc, #276]	; (1715c <store_file_packet+0x1a0>)
   17046:	0019      	movs	r1, r3
   17048:	2001      	movs	r0, #1
   1704a:	4b3b      	ldr	r3, [pc, #236]	; (17138 <store_file_packet+0x17c>)
   1704c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1704e:	2313      	movs	r3, #19
   17050:	18fc      	adds	r4, r7, r3
   17052:	493b      	ldr	r1, [pc, #236]	; (17140 <store_file_packet+0x184>)
   17054:	4b3f      	ldr	r3, [pc, #252]	; (17154 <store_file_packet+0x198>)
   17056:	220a      	movs	r2, #10
   17058:	0018      	movs	r0, r3
   1705a:	4b41      	ldr	r3, [pc, #260]	; (17160 <store_file_packet+0x1a4>)
   1705c:	4798      	blx	r3
   1705e:	0003      	movs	r3, r0
   17060:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   17062:	2313      	movs	r3, #19
   17064:	18fb      	adds	r3, r7, r3
   17066:	781b      	ldrb	r3, [r3, #0]
   17068:	2b00      	cmp	r3, #0
   1706a:	d012      	beq.n	17092 <store_file_packet+0xd6>
   1706c:	e008      	b.n	17080 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   1706e:	4b3d      	ldr	r3, [pc, #244]	; (17164 <store_file_packet+0x1a8>)
   17070:	0019      	movs	r1, r3
   17072:	2001      	movs	r0, #1
   17074:	4b30      	ldr	r3, [pc, #192]	; (17138 <store_file_packet+0x17c>)
   17076:	4798      	blx	r3
            add_state(CANCELED);
   17078:	2020      	movs	r0, #32
   1707a:	4b3b      	ldr	r3, [pc, #236]	; (17168 <store_file_packet+0x1ac>)
   1707c:	4798      	blx	r3
            return;
   1707e:	e055      	b.n	1712c <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   17080:	2313      	movs	r3, #19
   17082:	18fb      	adds	r3, r7, r3
   17084:	781a      	ldrb	r2, [r3, #0]
   17086:	4b39      	ldr	r3, [pc, #228]	; (1716c <store_file_packet+0x1b0>)
   17088:	0019      	movs	r1, r3
   1708a:	2001      	movs	r0, #1
   1708c:	4b2a      	ldr	r3, [pc, #168]	; (17138 <store_file_packet+0x17c>)
   1708e:	4798      	blx	r3
            return;
   17090:	e04c      	b.n	1712c <store_file_packet+0x170>
        }

        received_file_size = 0;
   17092:	4b37      	ldr	r3, [pc, #220]	; (17170 <store_file_packet+0x1b4>)
   17094:	2200      	movs	r2, #0
   17096:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   17098:	2008      	movs	r0, #8
   1709a:	4b33      	ldr	r3, [pc, #204]	; (17168 <store_file_packet+0x1ac>)
   1709c:	4798      	blx	r3
    }

    if (data != NULL) {
   1709e:	687b      	ldr	r3, [r7, #4]
   170a0:	2b00      	cmp	r3, #0
   170a2:	d043      	beq.n	1712c <store_file_packet+0x170>
        UINT wsize = 0;
   170a4:	2300      	movs	r3, #0
   170a6:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   170a8:	2313      	movs	r3, #19
   170aa:	18fc      	adds	r4, r7, r3
   170ac:	230c      	movs	r3, #12
   170ae:	18fb      	adds	r3, r7, r3
   170b0:	683a      	ldr	r2, [r7, #0]
   170b2:	6879      	ldr	r1, [r7, #4]
   170b4:	4827      	ldr	r0, [pc, #156]	; (17154 <store_file_packet+0x198>)
   170b6:	4d2f      	ldr	r5, [pc, #188]	; (17174 <store_file_packet+0x1b8>)
   170b8:	47a8      	blx	r5
   170ba:	0003      	movs	r3, r0
   170bc:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   170be:	2313      	movs	r3, #19
   170c0:	18fb      	adds	r3, r7, r3
   170c2:	781b      	ldrb	r3, [r3, #0]
   170c4:	2b00      	cmp	r3, #0
   170c6:	d00c      	beq.n	170e2 <store_file_packet+0x126>
            f_close(&file_object);
   170c8:	4b22      	ldr	r3, [pc, #136]	; (17154 <store_file_packet+0x198>)
   170ca:	0018      	movs	r0, r3
   170cc:	4b2a      	ldr	r3, [pc, #168]	; (17178 <store_file_packet+0x1bc>)
   170ce:	4798      	blx	r3
            add_state(CANCELED);
   170d0:	2020      	movs	r0, #32
   170d2:	4b25      	ldr	r3, [pc, #148]	; (17168 <store_file_packet+0x1ac>)
   170d4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   170d6:	4b29      	ldr	r3, [pc, #164]	; (1717c <store_file_packet+0x1c0>)
   170d8:	0019      	movs	r1, r3
   170da:	2001      	movs	r0, #1
   170dc:	4b16      	ldr	r3, [pc, #88]	; (17138 <store_file_packet+0x17c>)
   170de:	4798      	blx	r3
            return;
   170e0:	e024      	b.n	1712c <store_file_packet+0x170>
        }

        received_file_size += wsize;
   170e2:	4b23      	ldr	r3, [pc, #140]	; (17170 <store_file_packet+0x1b4>)
   170e4:	681a      	ldr	r2, [r3, #0]
   170e6:	68fb      	ldr	r3, [r7, #12]
   170e8:	18d2      	adds	r2, r2, r3
   170ea:	4b21      	ldr	r3, [pc, #132]	; (17170 <store_file_packet+0x1b4>)
   170ec:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   170ee:	4b20      	ldr	r3, [pc, #128]	; (17170 <store_file_packet+0x1b4>)
   170f0:	681a      	ldr	r2, [r3, #0]
   170f2:	4b23      	ldr	r3, [pc, #140]	; (17180 <store_file_packet+0x1c4>)
   170f4:	681b      	ldr	r3, [r3, #0]
   170f6:	4923      	ldr	r1, [pc, #140]	; (17184 <store_file_packet+0x1c8>)
   170f8:	2001      	movs	r0, #1
   170fa:	4c0f      	ldr	r4, [pc, #60]	; (17138 <store_file_packet+0x17c>)
   170fc:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   170fe:	4b1c      	ldr	r3, [pc, #112]	; (17170 <store_file_packet+0x1b4>)
   17100:	681a      	ldr	r2, [r3, #0]
   17102:	4b1f      	ldr	r3, [pc, #124]	; (17180 <store_file_packet+0x1c4>)
   17104:	681b      	ldr	r3, [r3, #0]
   17106:	429a      	cmp	r2, r3
   17108:	d310      	bcc.n	1712c <store_file_packet+0x170>
            f_close(&file_object);
   1710a:	4b12      	ldr	r3, [pc, #72]	; (17154 <store_file_packet+0x198>)
   1710c:	0018      	movs	r0, r3
   1710e:	4b1a      	ldr	r3, [pc, #104]	; (17178 <store_file_packet+0x1bc>)
   17110:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   17112:	4b1d      	ldr	r3, [pc, #116]	; (17188 <store_file_packet+0x1cc>)
   17114:	0019      	movs	r1, r3
   17116:	2001      	movs	r0, #1
   17118:	4b07      	ldr	r3, [pc, #28]	; (17138 <store_file_packet+0x17c>)
   1711a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   1711c:	2100      	movs	r1, #0
   1711e:	2017      	movs	r0, #23
   17120:	4b1a      	ldr	r3, [pc, #104]	; (1718c <store_file_packet+0x1d0>)
   17122:	4798      	blx	r3
            add_state(COMPLETED);
   17124:	2010      	movs	r0, #16
   17126:	4b10      	ldr	r3, [pc, #64]	; (17168 <store_file_packet+0x1ac>)
   17128:	4798      	blx	r3
            return;
   1712a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   1712c:	46bd      	mov	sp, r7
   1712e:	b006      	add	sp, #24
   17130:	bdb0      	pop	{r4, r5, r7, pc}
   17132:	46c0      	nop			; (mov r8, r8)
   17134:	000374ac 	.word	0x000374ac
   17138:	0001ed01 	.word	0x0001ed01
   1713c:	00016bd9 	.word	0x00016bd9
   17140:	200000b4 	.word	0x200000b4
   17144:	000374a8 	.word	0x000374a8
   17148:	00035b37 	.word	0x00035b37
   1714c:	200000b6 	.word	0x200000b6
   17150:	00035aeb 	.word	0x00035aeb
   17154:	2000086c 	.word	0x2000086c
   17158:	00016c5d 	.word	0x00016c5d
   1715c:	00037510 	.word	0x00037510
   17160:	0002e6d5 	.word	0x0002e6d5
   17164:	000374d0 	.word	0x000374d0
   17168:	00016bb1 	.word	0x00016bb1
   1716c:	00037538 	.word	0x00037538
   17170:	20000894 	.word	0x20000894
   17174:	0002ec05 	.word	0x0002ec05
   17178:	0002f0d5 	.word	0x0002f0d5
   1717c:	0003756c 	.word	0x0003756c
   17180:	20000890 	.word	0x20000890
   17184:	000375a8 	.word	0x000375a8
   17188:	000375dc 	.word	0x000375dc
   1718c:	00016b15 	.word	0x00016b15

00017190 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   17190:	b590      	push	{r4, r7, lr}
   17192:	b085      	sub	sp, #20
   17194:	af00      	add	r7, sp, #0
   17196:	60f8      	str	r0, [r7, #12]
   17198:	60b9      	str	r1, [r7, #8]
   1719a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1719c:	68bb      	ldr	r3, [r7, #8]
   1719e:	2b04      	cmp	r3, #4
   171a0:	d900      	bls.n	171a4 <http_client_callback+0x14>
   171a2:	e077      	b.n	17294 <http_client_callback+0x104>
   171a4:	68bb      	ldr	r3, [r7, #8]
   171a6:	009a      	lsls	r2, r3, #2
   171a8:	4b3c      	ldr	r3, [pc, #240]	; (1729c <http_client_callback+0x10c>)
   171aa:	18d3      	adds	r3, r2, r3
   171ac:	681b      	ldr	r3, [r3, #0]
   171ae:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   171b0:	4b3b      	ldr	r3, [pc, #236]	; (172a0 <http_client_callback+0x110>)
   171b2:	0019      	movs	r1, r3
   171b4:	2001      	movs	r0, #1
   171b6:	4b3b      	ldr	r3, [pc, #236]	; (172a4 <http_client_callback+0x114>)
   171b8:	4798      	blx	r3
            break;
   171ba:	e06b      	b.n	17294 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   171bc:	4b3a      	ldr	r3, [pc, #232]	; (172a8 <http_client_callback+0x118>)
   171be:	0019      	movs	r1, r3
   171c0:	2001      	movs	r0, #1
   171c2:	4b38      	ldr	r3, [pc, #224]	; (172a4 <http_client_callback+0x114>)
   171c4:	4798      	blx	r3
            add_state(GET_REQUESTED);
   171c6:	2004      	movs	r0, #4
   171c8:	4b38      	ldr	r3, [pc, #224]	; (172ac <http_client_callback+0x11c>)
   171ca:	4798      	blx	r3
            break;
   171cc:	e062      	b.n	17294 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   171ce:	687b      	ldr	r3, [r7, #4]
   171d0:	881b      	ldrh	r3, [r3, #0]
   171d2:	001a      	movs	r2, r3
   171d4:	687b      	ldr	r3, [r7, #4]
   171d6:	685b      	ldr	r3, [r3, #4]
   171d8:	4935      	ldr	r1, [pc, #212]	; (172b0 <http_client_callback+0x120>)
   171da:	2001      	movs	r0, #1
   171dc:	4c31      	ldr	r4, [pc, #196]	; (172a4 <http_client_callback+0x114>)
   171de:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   171e0:	687b      	ldr	r3, [r7, #4]
   171e2:	881b      	ldrh	r3, [r3, #0]
   171e4:	2bc8      	cmp	r3, #200	; 0xc8
   171e6:	d10d      	bne.n	17204 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   171e8:	687b      	ldr	r3, [r7, #4]
   171ea:	685a      	ldr	r2, [r3, #4]
   171ec:	4b31      	ldr	r3, [pc, #196]	; (172b4 <http_client_callback+0x124>)
   171ee:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   171f0:	4b31      	ldr	r3, [pc, #196]	; (172b8 <http_client_callback+0x128>)
   171f2:	2200      	movs	r2, #0
   171f4:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   171f6:	687b      	ldr	r3, [r7, #4]
   171f8:	685a      	ldr	r2, [r3, #4]
   171fa:	2380      	movs	r3, #128	; 0x80
   171fc:	009b      	lsls	r3, r3, #2
   171fe:	429a      	cmp	r2, r3
   17200:	d843      	bhi.n	1728a <http_client_callback+0xfa>
   17202:	e003      	b.n	1720c <http_client_callback+0x7c>
                add_state(CANCELED);
   17204:	2020      	movs	r0, #32
   17206:	4b29      	ldr	r3, [pc, #164]	; (172ac <http_client_callback+0x11c>)
   17208:	4798      	blx	r3
                return;
   1720a:	e043      	b.n	17294 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   1720c:	687b      	ldr	r3, [r7, #4]
   1720e:	689a      	ldr	r2, [r3, #8]
   17210:	687b      	ldr	r3, [r7, #4]
   17212:	685b      	ldr	r3, [r3, #4]
   17214:	0019      	movs	r1, r3
   17216:	0010      	movs	r0, r2
   17218:	4b28      	ldr	r3, [pc, #160]	; (172bc <http_client_callback+0x12c>)
   1721a:	4798      	blx	r3
                add_state(COMPLETED);
   1721c:	2010      	movs	r0, #16
   1721e:	4b23      	ldr	r3, [pc, #140]	; (172ac <http_client_callback+0x11c>)
   17220:	4798      	blx	r3
            }
            break;
   17222:	e032      	b.n	1728a <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   17224:	687b      	ldr	r3, [r7, #4]
   17226:	685a      	ldr	r2, [r3, #4]
   17228:	687b      	ldr	r3, [r7, #4]
   1722a:	681b      	ldr	r3, [r3, #0]
   1722c:	0019      	movs	r1, r3
   1722e:	0010      	movs	r0, r2
   17230:	4b22      	ldr	r3, [pc, #136]	; (172bc <http_client_callback+0x12c>)
   17232:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   17234:	687b      	ldr	r3, [r7, #4]
   17236:	7a1b      	ldrb	r3, [r3, #8]
   17238:	2b00      	cmp	r3, #0
   1723a:	d028      	beq.n	1728e <http_client_callback+0xfe>
                add_state(COMPLETED);
   1723c:	2010      	movs	r0, #16
   1723e:	4b1b      	ldr	r3, [pc, #108]	; (172ac <http_client_callback+0x11c>)
   17240:	4798      	blx	r3
            }

            break;
   17242:	e024      	b.n	1728e <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   17244:	687b      	ldr	r3, [r7, #4]
   17246:	681a      	ldr	r2, [r3, #0]
   17248:	4b1d      	ldr	r3, [pc, #116]	; (172c0 <http_client_callback+0x130>)
   1724a:	0019      	movs	r1, r3
   1724c:	2001      	movs	r0, #1
   1724e:	4b15      	ldr	r3, [pc, #84]	; (172a4 <http_client_callback+0x114>)
   17250:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   17252:	687b      	ldr	r3, [r7, #4]
   17254:	681b      	ldr	r3, [r3, #0]
   17256:	330b      	adds	r3, #11
   17258:	d11b      	bne.n	17292 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1725a:	2008      	movs	r0, #8
   1725c:	4b19      	ldr	r3, [pc, #100]	; (172c4 <http_client_callback+0x134>)
   1725e:	4798      	blx	r3
   17260:	1e03      	subs	r3, r0, #0
   17262:	d006      	beq.n	17272 <http_client_callback+0xe2>
                    f_close(&file_object);
   17264:	4b18      	ldr	r3, [pc, #96]	; (172c8 <http_client_callback+0x138>)
   17266:	0018      	movs	r0, r3
   17268:	4b18      	ldr	r3, [pc, #96]	; (172cc <http_client_callback+0x13c>)
   1726a:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1726c:	2008      	movs	r0, #8
   1726e:	4b18      	ldr	r3, [pc, #96]	; (172d0 <http_client_callback+0x140>)
   17270:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   17272:	2004      	movs	r0, #4
   17274:	4b13      	ldr	r3, [pc, #76]	; (172c4 <http_client_callback+0x134>)
   17276:	4798      	blx	r3
   17278:	1e03      	subs	r3, r0, #0
   1727a:	d002      	beq.n	17282 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   1727c:	2004      	movs	r0, #4
   1727e:	4b14      	ldr	r3, [pc, #80]	; (172d0 <http_client_callback+0x140>)
   17280:	4798      	blx	r3
                }

                start_download();
   17282:	4b14      	ldr	r3, [pc, #80]	; (172d4 <http_client_callback+0x144>)
   17284:	4798      	blx	r3
            }

            break;
   17286:	46c0      	nop			; (mov r8, r8)
   17288:	e003      	b.n	17292 <http_client_callback+0x102>
            break;
   1728a:	46c0      	nop			; (mov r8, r8)
   1728c:	e002      	b.n	17294 <http_client_callback+0x104>
            break;
   1728e:	46c0      	nop			; (mov r8, r8)
   17290:	e000      	b.n	17294 <http_client_callback+0x104>
            break;
   17292:	46c0      	nop			; (mov r8, r8)
    }
}
   17294:	46bd      	mov	sp, r7
   17296:	b005      	add	sp, #20
   17298:	bd90      	pop	{r4, r7, pc}
   1729a:	46c0      	nop			; (mov r8, r8)
   1729c:	00037d38 	.word	0x00037d38
   172a0:	00037610 	.word	0x00037610
   172a4:	0001ed01 	.word	0x0001ed01
   172a8:	00037648 	.word	0x00037648
   172ac:	00016bb1 	.word	0x00016bb1
   172b0:	00037674 	.word	0x00037674
   172b4:	20000890 	.word	0x20000890
   172b8:	20000894 	.word	0x20000894
   172bc:	00016fbd 	.word	0x00016fbd
   172c0:	000376b0 	.word	0x000376b0
   172c4:	00016bd9 	.word	0x00016bd9
   172c8:	2000086c 	.word	0x2000086c
   172cc:	0002f0d5 	.word	0x0002f0d5
   172d0:	00016b7d 	.word	0x00016b7d
   172d4:	00016f01 	.word	0x00016f01

000172d8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   172d8:	b580      	push	{r7, lr}
   172da:	b082      	sub	sp, #8
   172dc:	af00      	add	r7, sp, #0
   172de:	603a      	str	r2, [r7, #0]
   172e0:	1dfb      	adds	r3, r7, #7
   172e2:	1c02      	adds	r2, r0, #0
   172e4:	701a      	strb	r2, [r3, #0]
   172e6:	1dbb      	adds	r3, r7, #6
   172e8:	1c0a      	adds	r2, r1, #0
   172ea:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   172ec:	683a      	ldr	r2, [r7, #0]
   172ee:	1dbb      	adds	r3, r7, #6
   172f0:	7819      	ldrb	r1, [r3, #0]
   172f2:	1dfb      	adds	r3, r7, #7
   172f4:	781b      	ldrb	r3, [r3, #0]
   172f6:	b25b      	sxtb	r3, r3
   172f8:	0018      	movs	r0, r3
   172fa:	4b03      	ldr	r3, [pc, #12]	; (17308 <socket_cb+0x30>)
   172fc:	4798      	blx	r3
}
   172fe:	46c0      	nop			; (mov r8, r8)
   17300:	46bd      	mov	sp, r7
   17302:	b002      	add	sp, #8
   17304:	bd80      	pop	{r7, pc}
   17306:	46c0      	nop			; (mov r8, r8)
   17308:	00031a39 	.word	0x00031a39

0001730c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   1730c:	b5b0      	push	{r4, r5, r7, lr}
   1730e:	b086      	sub	sp, #24
   17310:	af04      	add	r7, sp, #16
   17312:	6078      	str	r0, [r7, #4]
   17314:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   17316:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   17318:	22ff      	movs	r2, #255	; 0xff
   1731a:	4013      	ands	r3, r2
   1731c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1731e:	683b      	ldr	r3, [r7, #0]
   17320:	0a1b      	lsrs	r3, r3, #8
   17322:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   17324:	23ff      	movs	r3, #255	; 0xff
   17326:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   17328:	683a      	ldr	r2, [r7, #0]
   1732a:	0c12      	lsrs	r2, r2, #16
   1732c:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   1732e:	22ff      	movs	r2, #255	; 0xff
   17330:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   17332:	6839      	ldr	r1, [r7, #0]
   17334:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   17336:	000d      	movs	r5, r1
   17338:	6878      	ldr	r0, [r7, #4]
   1733a:	4909      	ldr	r1, [pc, #36]	; (17360 <resolve_cb+0x54>)
   1733c:	9502      	str	r5, [sp, #8]
   1733e:	9201      	str	r2, [sp, #4]
   17340:	9300      	str	r3, [sp, #0]
   17342:	0023      	movs	r3, r4
   17344:	0002      	movs	r2, r0
   17346:	2001      	movs	r0, #1
   17348:	4c06      	ldr	r4, [pc, #24]	; (17364 <resolve_cb+0x58>)
   1734a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1734c:	683a      	ldr	r2, [r7, #0]
   1734e:	687b      	ldr	r3, [r7, #4]
   17350:	0011      	movs	r1, r2
   17352:	0018      	movs	r0, r3
   17354:	4b04      	ldr	r3, [pc, #16]	; (17368 <resolve_cb+0x5c>)
   17356:	4798      	blx	r3
}
   17358:	46c0      	nop			; (mov r8, r8)
   1735a:	46bd      	mov	sp, r7
   1735c:	b002      	add	sp, #8
   1735e:	bdb0      	pop	{r4, r5, r7, pc}
   17360:	000376e0 	.word	0x000376e0
   17364:	0001ed01 	.word	0x0001ed01
   17368:	00031b9d 	.word	0x00031b9d

0001736c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   1736c:	b590      	push	{r4, r7, lr}
   1736e:	b087      	sub	sp, #28
   17370:	af02      	add	r7, sp, #8
   17372:	0002      	movs	r2, r0
   17374:	6039      	str	r1, [r7, #0]
   17376:	1dfb      	adds	r3, r7, #7
   17378:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1737a:	1dfb      	adds	r3, r7, #7
   1737c:	781b      	ldrb	r3, [r3, #0]
   1737e:	2b2c      	cmp	r3, #44	; 0x2c
   17380:	d002      	beq.n	17388 <wifi_cb+0x1c>
   17382:	2b32      	cmp	r3, #50	; 0x32
   17384:	d03d      	beq.n	17402 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   17386:	e06f      	b.n	17468 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   17388:	683b      	ldr	r3, [r7, #0]
   1738a:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   1738c:	68fb      	ldr	r3, [r7, #12]
   1738e:	781b      	ldrb	r3, [r3, #0]
   17390:	2b01      	cmp	r3, #1
   17392:	d107      	bne.n	173a4 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   17394:	4b36      	ldr	r3, [pc, #216]	; (17470 <wifi_cb+0x104>)
   17396:	0019      	movs	r1, r3
   17398:	2001      	movs	r0, #1
   1739a:	4b36      	ldr	r3, [pc, #216]	; (17474 <wifi_cb+0x108>)
   1739c:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1739e:	4b36      	ldr	r3, [pc, #216]	; (17478 <wifi_cb+0x10c>)
   173a0:	4798      	blx	r3
            break;
   173a2:	e05e      	b.n	17462 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   173a4:	68fb      	ldr	r3, [r7, #12]
   173a6:	781b      	ldrb	r3, [r3, #0]
   173a8:	2b00      	cmp	r3, #0
   173aa:	d15a      	bne.n	17462 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   173ac:	4b33      	ldr	r3, [pc, #204]	; (1747c <wifi_cb+0x110>)
   173ae:	0019      	movs	r1, r3
   173b0:	2001      	movs	r0, #1
   173b2:	4b30      	ldr	r3, [pc, #192]	; (17474 <wifi_cb+0x108>)
   173b4:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   173b6:	2002      	movs	r0, #2
   173b8:	4b31      	ldr	r3, [pc, #196]	; (17480 <wifi_cb+0x114>)
   173ba:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   173bc:	2008      	movs	r0, #8
   173be:	4b31      	ldr	r3, [pc, #196]	; (17484 <wifi_cb+0x118>)
   173c0:	4798      	blx	r3
   173c2:	1e03      	subs	r3, r0, #0
   173c4:	d006      	beq.n	173d4 <wifi_cb+0x68>
                    f_close(&file_object);
   173c6:	4b30      	ldr	r3, [pc, #192]	; (17488 <wifi_cb+0x11c>)
   173c8:	0018      	movs	r0, r3
   173ca:	4b30      	ldr	r3, [pc, #192]	; (1748c <wifi_cb+0x120>)
   173cc:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   173ce:	2008      	movs	r0, #8
   173d0:	4b2b      	ldr	r3, [pc, #172]	; (17480 <wifi_cb+0x114>)
   173d2:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   173d4:	2004      	movs	r0, #4
   173d6:	4b2b      	ldr	r3, [pc, #172]	; (17484 <wifi_cb+0x118>)
   173d8:	4798      	blx	r3
   173da:	1e03      	subs	r3, r0, #0
   173dc:	d002      	beq.n	173e4 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   173de:	2004      	movs	r0, #4
   173e0:	4b27      	ldr	r3, [pc, #156]	; (17480 <wifi_cb+0x114>)
   173e2:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   173e4:	4b2a      	ldr	r3, [pc, #168]	; (17490 <wifi_cb+0x124>)
   173e6:	2101      	movs	r1, #1
   173e8:	0018      	movs	r0, r3
   173ea:	4b2a      	ldr	r3, [pc, #168]	; (17494 <wifi_cb+0x128>)
   173ec:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   173ee:	4a2a      	ldr	r2, [pc, #168]	; (17498 <wifi_cb+0x12c>)
   173f0:	482a      	ldr	r0, [pc, #168]	; (1749c <wifi_cb+0x130>)
   173f2:	23ff      	movs	r3, #255	; 0xff
   173f4:	9300      	str	r3, [sp, #0]
   173f6:	0013      	movs	r3, r2
   173f8:	2202      	movs	r2, #2
   173fa:	2105      	movs	r1, #5
   173fc:	4c28      	ldr	r4, [pc, #160]	; (174a0 <wifi_cb+0x134>)
   173fe:	47a0      	blx	r4
            break;
   17400:	e02f      	b.n	17462 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   17402:	683b      	ldr	r3, [r7, #0]
   17404:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   17406:	68bb      	ldr	r3, [r7, #8]
   17408:	781b      	ldrb	r3, [r3, #0]
   1740a:	0018      	movs	r0, r3
   1740c:	68bb      	ldr	r3, [r7, #8]
   1740e:	3301      	adds	r3, #1
   17410:	781b      	ldrb	r3, [r3, #0]
   17412:	001c      	movs	r4, r3
   17414:	68bb      	ldr	r3, [r7, #8]
   17416:	3302      	adds	r3, #2
   17418:	781b      	ldrb	r3, [r3, #0]
   1741a:	001a      	movs	r2, r3
   1741c:	68bb      	ldr	r3, [r7, #8]
   1741e:	3303      	adds	r3, #3
   17420:	781b      	ldrb	r3, [r3, #0]
   17422:	4920      	ldr	r1, [pc, #128]	; (174a4 <wifi_cb+0x138>)
   17424:	9301      	str	r3, [sp, #4]
   17426:	9200      	str	r2, [sp, #0]
   17428:	0023      	movs	r3, r4
   1742a:	0002      	movs	r2, r0
   1742c:	2001      	movs	r0, #1
   1742e:	4c11      	ldr	r4, [pc, #68]	; (17474 <wifi_cb+0x108>)
   17430:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   17432:	2002      	movs	r0, #2
   17434:	4b1c      	ldr	r3, [pc, #112]	; (174a8 <wifi_cb+0x13c>)
   17436:	4798      	blx	r3
            if (do_download_flag == 1) {
   17438:	4b1c      	ldr	r3, [pc, #112]	; (174ac <wifi_cb+0x140>)
   1743a:	781b      	ldrb	r3, [r3, #0]
   1743c:	2b01      	cmp	r3, #1
   1743e:	d102      	bne.n	17446 <wifi_cb+0xda>
                start_download();
   17440:	4b1b      	ldr	r3, [pc, #108]	; (174b0 <wifi_cb+0x144>)
   17442:	4798      	blx	r3
        } break;
   17444:	e00f      	b.n	17466 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17446:	4a1b      	ldr	r2, [pc, #108]	; (174b4 <wifi_cb+0x148>)
   17448:	4b11      	ldr	r3, [pc, #68]	; (17490 <wifi_cb+0x124>)
   1744a:	0011      	movs	r1, r2
   1744c:	0018      	movs	r0, r3
   1744e:	4b1a      	ldr	r3, [pc, #104]	; (174b8 <wifi_cb+0x14c>)
   17450:	4798      	blx	r3
   17452:	1e03      	subs	r3, r0, #0
   17454:	d007      	beq.n	17466 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17456:	4b19      	ldr	r3, [pc, #100]	; (174bc <wifi_cb+0x150>)
   17458:	0019      	movs	r1, r3
   1745a:	2001      	movs	r0, #1
   1745c:	4b05      	ldr	r3, [pc, #20]	; (17474 <wifi_cb+0x108>)
   1745e:	4798      	blx	r3
        } break;
   17460:	e001      	b.n	17466 <wifi_cb+0xfa>
            break;
   17462:	46c0      	nop			; (mov r8, r8)
   17464:	e000      	b.n	17468 <wifi_cb+0xfc>
        } break;
   17466:	46c0      	nop			; (mov r8, r8)
    }
}
   17468:	46c0      	nop			; (mov r8, r8)
   1746a:	46bd      	mov	sp, r7
   1746c:	b005      	add	sp, #20
   1746e:	bd90      	pop	{r4, r7, pc}
   17470:	00037710 	.word	0x00037710
   17474:	0001ed01 	.word	0x0001ed01
   17478:	00023209 	.word	0x00023209
   1747c:	00037730 	.word	0x00037730
   17480:	00016b7d 	.word	0x00016b7d
   17484:	00016bd9 	.word	0x00016bd9
   17488:	2000086c 	.word	0x2000086c
   1748c:	0002f0d5 	.word	0x0002f0d5
   17490:	20000898 	.word	0x20000898
   17494:	000306e5 	.word	0x000306e5
   17498:	00037754 	.word	0x00037754
   1749c:	00037760 	.word	0x00037760
   174a0:	00022d35 	.word	0x00022d35
   174a4:	00037768 	.word	0x00037768
   174a8:	00016bb1 	.word	0x00016bb1
   174ac:	20000638 	.word	0x20000638
   174b0:	00016f01 	.word	0x00016f01
   174b4:	00037380 	.word	0x00037380
   174b8:	000305b1 	.word	0x000305b1
   174bc:	00037790 	.word	0x00037790

000174c0 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   174c0:	b590      	push	{r4, r7, lr}
   174c2:	b083      	sub	sp, #12
   174c4:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   174c6:	4b29      	ldr	r3, [pc, #164]	; (1756c <init_storage+0xac>)
   174c8:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   174ca:	4b29      	ldr	r3, [pc, #164]	; (17570 <init_storage+0xb0>)
   174cc:	0019      	movs	r1, r3
   174ce:	2001      	movs	r0, #1
   174d0:	4b28      	ldr	r3, [pc, #160]	; (17574 <init_storage+0xb4>)
   174d2:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   174d4:	1dfc      	adds	r4, r7, #7
   174d6:	2000      	movs	r0, #0
   174d8:	4b27      	ldr	r3, [pc, #156]	; (17578 <init_storage+0xb8>)
   174da:	4798      	blx	r3
   174dc:	0003      	movs	r3, r0
   174de:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   174e0:	1dfb      	adds	r3, r7, #7
   174e2:	781b      	ldrb	r3, [r3, #0]
   174e4:	2b01      	cmp	r3, #1
   174e6:	d110      	bne.n	1750a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   174e8:	4b24      	ldr	r3, [pc, #144]	; (1757c <init_storage+0xbc>)
   174ea:	0019      	movs	r1, r3
   174ec:	2001      	movs	r0, #1
   174ee:	4b21      	ldr	r3, [pc, #132]	; (17574 <init_storage+0xb4>)
   174f0:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   174f2:	4b23      	ldr	r3, [pc, #140]	; (17580 <init_storage+0xc0>)
   174f4:	0019      	movs	r1, r3
   174f6:	2001      	movs	r0, #1
   174f8:	4b1e      	ldr	r3, [pc, #120]	; (17574 <init_storage+0xb4>)
   174fa:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   174fc:	46c0      	nop			; (mov r8, r8)
   174fe:	2000      	movs	r0, #0
   17500:	4b20      	ldr	r3, [pc, #128]	; (17584 <init_storage+0xc4>)
   17502:	4798      	blx	r3
   17504:	0003      	movs	r3, r0
   17506:	2b02      	cmp	r3, #2
   17508:	d1f9      	bne.n	174fe <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1750a:	1dfb      	adds	r3, r7, #7
   1750c:	781b      	ldrb	r3, [r3, #0]
   1750e:	2b00      	cmp	r3, #0
   17510:	d1e0      	bne.n	174d4 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   17512:	4b1d      	ldr	r3, [pc, #116]	; (17588 <init_storage+0xc8>)
   17514:	0019      	movs	r1, r3
   17516:	2001      	movs	r0, #1
   17518:	4b16      	ldr	r3, [pc, #88]	; (17574 <init_storage+0xb4>)
   1751a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   1751c:	238c      	movs	r3, #140	; 0x8c
   1751e:	009a      	lsls	r2, r3, #2
   17520:	4b1a      	ldr	r3, [pc, #104]	; (1758c <init_storage+0xcc>)
   17522:	2100      	movs	r1, #0
   17524:	0018      	movs	r0, r3
   17526:	4b1a      	ldr	r3, [pc, #104]	; (17590 <init_storage+0xd0>)
   17528:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1752a:	1dbc      	adds	r4, r7, #6
   1752c:	4b17      	ldr	r3, [pc, #92]	; (1758c <init_storage+0xcc>)
   1752e:	0019      	movs	r1, r3
   17530:	2000      	movs	r0, #0
   17532:	4b18      	ldr	r3, [pc, #96]	; (17594 <init_storage+0xd4>)
   17534:	4798      	blx	r3
   17536:	0003      	movs	r3, r0
   17538:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1753a:	1dbb      	adds	r3, r7, #6
   1753c:	781b      	ldrb	r3, [r3, #0]
   1753e:	2b0b      	cmp	r3, #11
   17540:	d107      	bne.n	17552 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   17542:	1dbb      	adds	r3, r7, #6
   17544:	781a      	ldrb	r2, [r3, #0]
   17546:	4b14      	ldr	r3, [pc, #80]	; (17598 <init_storage+0xd8>)
   17548:	0019      	movs	r1, r3
   1754a:	2001      	movs	r0, #1
   1754c:	4b09      	ldr	r3, [pc, #36]	; (17574 <init_storage+0xb4>)
   1754e:	4798      	blx	r3
            return;
   17550:	e008      	b.n	17564 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   17552:	4b12      	ldr	r3, [pc, #72]	; (1759c <init_storage+0xdc>)
   17554:	0019      	movs	r1, r3
   17556:	2001      	movs	r0, #1
   17558:	4b06      	ldr	r3, [pc, #24]	; (17574 <init_storage+0xb4>)
   1755a:	4798      	blx	r3
        add_state(STORAGE_READY);
   1755c:	2001      	movs	r0, #1
   1755e:	4b10      	ldr	r3, [pc, #64]	; (175a0 <init_storage+0xe0>)
   17560:	4798      	blx	r3
        return;
   17562:	46c0      	nop			; (mov r8, r8)
    }
}
   17564:	46bd      	mov	sp, r7
   17566:	b003      	add	sp, #12
   17568:	bd90      	pop	{r4, r7, pc}
   1756a:	46c0      	nop			; (mov r8, r8)
   1756c:	0001fb19 	.word	0x0001fb19
   17570:	000377b4 	.word	0x000377b4
   17574:	0001ed01 	.word	0x0001ed01
   17578:	0001fff5 	.word	0x0001fff5
   1757c:	000377ec 	.word	0x000377ec
   17580:	00037814 	.word	0x00037814
   17584:	0001fb69 	.word	0x0001fb69
   17588:	00037848 	.word	0x00037848
   1758c:	2000063c 	.word	0x2000063c
   17590:	0003577f 	.word	0x0003577f
   17594:	0002e67d 	.word	0x0002e67d
   17598:	0003786c 	.word	0x0003786c
   1759c:	0003789c 	.word	0x0003789c
   175a0:	00016bb1 	.word	0x00016bb1

000175a4 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   175a4:	b580      	push	{r7, lr}
   175a6:	b082      	sub	sp, #8
   175a8:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   175aa:	1d3b      	adds	r3, r7, #4
   175ac:	0018      	movs	r0, r3
   175ae:	4b08      	ldr	r3, [pc, #32]	; (175d0 <configure_timer+0x2c>)
   175b0:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   175b2:	1d3a      	adds	r2, r7, #4
   175b4:	4b07      	ldr	r3, [pc, #28]	; (175d4 <configure_timer+0x30>)
   175b6:	0011      	movs	r1, r2
   175b8:	0018      	movs	r0, r3
   175ba:	4b07      	ldr	r3, [pc, #28]	; (175d8 <configure_timer+0x34>)
   175bc:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   175be:	4b05      	ldr	r3, [pc, #20]	; (175d4 <configure_timer+0x30>)
   175c0:	0018      	movs	r0, r3
   175c2:	4b06      	ldr	r3, [pc, #24]	; (175dc <configure_timer+0x38>)
   175c4:	4798      	blx	r3
}
   175c6:	46c0      	nop			; (mov r8, r8)
   175c8:	46bd      	mov	sp, r7
   175ca:	b002      	add	sp, #8
   175cc:	bd80      	pop	{r7, pc}
   175ce:	46c0      	nop			; (mov r8, r8)
   175d0:	000331cd 	.word	0x000331cd
   175d4:	20004940 	.word	0x20004940
   175d8:	000331f1 	.word	0x000331f1
   175dc:	000332dd 	.word	0x000332dd

000175e0 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   175e0:	b580      	push	{r7, lr}
   175e2:	b088      	sub	sp, #32
   175e4:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   175e6:	003b      	movs	r3, r7
   175e8:	0018      	movs	r0, r3
   175ea:	4b16      	ldr	r3, [pc, #88]	; (17644 <configure_http_client+0x64>)
   175ec:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   175ee:	003b      	movs	r3, r7
   175f0:	2280      	movs	r2, #128	; 0x80
   175f2:	0092      	lsls	r2, r2, #2
   175f4:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   175f6:	003b      	movs	r3, r7
   175f8:	4a13      	ldr	r2, [pc, #76]	; (17648 <configure_http_client+0x68>)
   175fa:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   175fc:	003b      	movs	r3, r7
   175fe:	22bc      	movs	r2, #188	; 0xbc
   17600:	32ff      	adds	r2, #255	; 0xff
   17602:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   17604:	003b      	movs	r3, r7
   17606:	2201      	movs	r2, #1
   17608:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1760a:	003a      	movs	r2, r7
   1760c:	4b0f      	ldr	r3, [pc, #60]	; (1764c <configure_http_client+0x6c>)
   1760e:	0011      	movs	r1, r2
   17610:	0018      	movs	r0, r3
   17612:	4b0f      	ldr	r3, [pc, #60]	; (17650 <configure_http_client+0x70>)
   17614:	4798      	blx	r3
   17616:	0003      	movs	r3, r0
   17618:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1761a:	69fb      	ldr	r3, [r7, #28]
   1761c:	2b00      	cmp	r3, #0
   1761e:	da06      	bge.n	1762e <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   17620:	69fa      	ldr	r2, [r7, #28]
   17622:	4b0c      	ldr	r3, [pc, #48]	; (17654 <configure_http_client+0x74>)
   17624:	0019      	movs	r1, r3
   17626:	2001      	movs	r0, #1
   17628:	4b0b      	ldr	r3, [pc, #44]	; (17658 <configure_http_client+0x78>)
   1762a:	4798      	blx	r3
        while (1) {
   1762c:	e7fe      	b.n	1762c <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   1762e:	4a0b      	ldr	r2, [pc, #44]	; (1765c <configure_http_client+0x7c>)
   17630:	4b06      	ldr	r3, [pc, #24]	; (1764c <configure_http_client+0x6c>)
   17632:	0011      	movs	r1, r2
   17634:	0018      	movs	r0, r3
   17636:	4b0a      	ldr	r3, [pc, #40]	; (17660 <configure_http_client+0x80>)
   17638:	4798      	blx	r3
}
   1763a:	46c0      	nop			; (mov r8, r8)
   1763c:	46bd      	mov	sp, r7
   1763e:	b008      	add	sp, #32
   17640:	bd80      	pop	{r7, pc}
   17642:	46c0      	nop			; (mov r8, r8)
   17644:	00031861 	.word	0x00031861
   17648:	20004940 	.word	0x20004940
   1764c:	20004998 	.word	0x20004998
   17650:	000318ad 	.word	0x000318ad
   17654:	000378c0 	.word	0x000378c0
   17658:	0001ed01 	.word	0x0001ed01
   1765c:	00017191 	.word	0x00017191
   17660:	00031999 	.word	0x00031999

00017664 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   17664:	b580      	push	{r7, lr}
   17666:	b082      	sub	sp, #8
   17668:	af00      	add	r7, sp, #0
   1766a:	603a      	str	r2, [r7, #0]
   1766c:	1dfb      	adds	r3, r7, #7
   1766e:	1c02      	adds	r2, r0, #0
   17670:	701a      	strb	r2, [r3, #0]
   17672:	1dbb      	adds	r3, r7, #6
   17674:	1c0a      	adds	r2, r1, #0
   17676:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   17678:	683a      	ldr	r2, [r7, #0]
   1767a:	1dbb      	adds	r3, r7, #6
   1767c:	7819      	ldrb	r1, [r3, #0]
   1767e:	1dfb      	adds	r3, r7, #7
   17680:	781b      	ldrb	r3, [r3, #0]
   17682:	b25b      	sxtb	r3, r3
   17684:	0018      	movs	r0, r3
   17686:	4b03      	ldr	r3, [pc, #12]	; (17694 <socket_event_handler+0x30>)
   17688:	4798      	blx	r3
}
   1768a:	46c0      	nop			; (mov r8, r8)
   1768c:	46bd      	mov	sp, r7
   1768e:	b002      	add	sp, #8
   17690:	bd80      	pop	{r7, pc}
   17692:	46c0      	nop			; (mov r8, r8)
   17694:	00030559 	.word	0x00030559

00017698 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   17698:	b580      	push	{r7, lr}
   1769a:	b082      	sub	sp, #8
   1769c:	af00      	add	r7, sp, #0
   1769e:	6078      	str	r0, [r7, #4]
   176a0:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   176a2:	683a      	ldr	r2, [r7, #0]
   176a4:	687b      	ldr	r3, [r7, #4]
   176a6:	0011      	movs	r1, r2
   176a8:	0018      	movs	r0, r3
   176aa:	4b03      	ldr	r3, [pc, #12]	; (176b8 <socket_resolve_handler+0x20>)
   176ac:	4798      	blx	r3
}
   176ae:	46c0      	nop			; (mov r8, r8)
   176b0:	46bd      	mov	sp, r7
   176b2:	b002      	add	sp, #8
   176b4:	bd80      	pop	{r7, pc}
   176b6:	46c0      	nop			; (mov r8, r8)
   176b8:	0003058d 	.word	0x0003058d

000176bc <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   176bc:	b590      	push	{r4, r7, lr}
   176be:	b089      	sub	sp, #36	; 0x24
   176c0:	af02      	add	r7, sp, #8
   176c2:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   176c4:	2310      	movs	r3, #16
   176c6:	18fb      	adds	r3, r7, r3
   176c8:	2200      	movs	r2, #0
   176ca:	701a      	strb	r2, [r3, #0]
   176cc:	2310      	movs	r3, #16
   176ce:	18fb      	adds	r3, r7, r3
   176d0:	2200      	movs	r2, #0
   176d2:	705a      	strb	r2, [r3, #1]
   176d4:	2310      	movs	r3, #16
   176d6:	18fb      	adds	r3, r7, r3
   176d8:	2200      	movs	r2, #0
   176da:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   176dc:	687b      	ldr	r3, [r7, #4]
   176de:	685b      	ldr	r3, [r3, #4]
   176e0:	685a      	ldr	r2, [r3, #4]
   176e2:	687b      	ldr	r3, [r7, #4]
   176e4:	685b      	ldr	r3, [r3, #4]
   176e6:	689b      	ldr	r3, [r3, #8]
   176e8:	492a      	ldr	r1, [pc, #168]	; (17794 <SubscribeHandlerLedTopic+0xd8>)
   176ea:	2001      	movs	r0, #1
   176ec:	4c2a      	ldr	r4, [pc, #168]	; (17798 <SubscribeHandlerLedTopic+0xdc>)
   176ee:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   176f0:	687b      	ldr	r3, [r7, #4]
   176f2:	681b      	ldr	r3, [r3, #0]
   176f4:	689b      	ldr	r3, [r3, #8]
   176f6:	4929      	ldr	r1, [pc, #164]	; (1779c <SubscribeHandlerLedTopic+0xe0>)
   176f8:	2204      	movs	r2, #4
   176fa:	0018      	movs	r0, r3
   176fc:	4b28      	ldr	r3, [pc, #160]	; (177a0 <SubscribeHandlerLedTopic+0xe4>)
   176fe:	4798      	blx	r3
   17700:	1e03      	subs	r3, r0, #0
   17702:	d143      	bne.n	1778c <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   17704:	687b      	ldr	r3, [r7, #4]
   17706:	681b      	ldr	r3, [r3, #0]
   17708:	689b      	ldr	r3, [r3, #8]
   1770a:	3304      	adds	r3, #4
   1770c:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   1770e:	2300      	movs	r3, #0
   17710:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   17712:	e015      	b.n	17740 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   17714:	697c      	ldr	r4, [r7, #20]
   17716:	1c63      	adds	r3, r4, #1
   17718:	617b      	str	r3, [r7, #20]
   1771a:	68fb      	ldr	r3, [r7, #12]
   1771c:	220c      	movs	r2, #12
   1771e:	18b9      	adds	r1, r7, r2
   17720:	220a      	movs	r2, #10
   17722:	0018      	movs	r0, r3
   17724:	4b1f      	ldr	r3, [pc, #124]	; (177a4 <SubscribeHandlerLedTopic+0xe8>)
   17726:	4798      	blx	r3
   17728:	0003      	movs	r3, r0
   1772a:	b2da      	uxtb	r2, r3
   1772c:	2310      	movs	r3, #16
   1772e:	18fb      	adds	r3, r7, r3
   17730:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   17732:	68fb      	ldr	r3, [r7, #12]
   17734:	781b      	ldrb	r3, [r3, #0]
   17736:	2b2c      	cmp	r3, #44	; 0x2c
   17738:	d10a      	bne.n	17750 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   1773a:	68fb      	ldr	r3, [r7, #12]
   1773c:	3301      	adds	r3, #1
   1773e:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   17740:	697b      	ldr	r3, [r7, #20]
   17742:	2b02      	cmp	r3, #2
   17744:	dc05      	bgt.n	17752 <SubscribeHandlerLedTopic+0x96>
   17746:	68fb      	ldr	r3, [r7, #12]
   17748:	781b      	ldrb	r3, [r3, #0]
   1774a:	2b00      	cmp	r3, #0
   1774c:	d1e2      	bne.n	17714 <SubscribeHandlerLedTopic+0x58>
   1774e:	e000      	b.n	17752 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   17750:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   17752:	2310      	movs	r3, #16
   17754:	18fb      	adds	r3, r7, r3
   17756:	781b      	ldrb	r3, [r3, #0]
   17758:	001a      	movs	r2, r3
   1775a:	2310      	movs	r3, #16
   1775c:	18fb      	adds	r3, r7, r3
   1775e:	785b      	ldrb	r3, [r3, #1]
   17760:	0018      	movs	r0, r3
   17762:	2310      	movs	r3, #16
   17764:	18fb      	adds	r3, r7, r3
   17766:	789b      	ldrb	r3, [r3, #2]
   17768:	490f      	ldr	r1, [pc, #60]	; (177a8 <SubscribeHandlerLedTopic+0xec>)
   1776a:	9300      	str	r3, [sp, #0]
   1776c:	0003      	movs	r3, r0
   1776e:	2001      	movs	r0, #1
   17770:	4c09      	ldr	r4, [pc, #36]	; (17798 <SubscribeHandlerLedTopic+0xdc>)
   17772:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   17774:	2310      	movs	r3, #16
   17776:	18fb      	adds	r3, r7, r3
   17778:	7818      	ldrb	r0, [r3, #0]
   1777a:	2310      	movs	r3, #16
   1777c:	18fb      	adds	r3, r7, r3
   1777e:	7859      	ldrb	r1, [r3, #1]
   17780:	2310      	movs	r3, #16
   17782:	18fb      	adds	r3, r7, r3
   17784:	789b      	ldrb	r3, [r3, #2]
   17786:	001a      	movs	r2, r3
   17788:	4b08      	ldr	r3, [pc, #32]	; (177ac <SubscribeHandlerLedTopic+0xf0>)
   1778a:	4798      	blx	r3
    }
}
   1778c:	46c0      	nop			; (mov r8, r8)
   1778e:	46bd      	mov	sp, r7
   17790:	b007      	add	sp, #28
   17792:	bd90      	pop	{r4, r7, pc}
   17794:	00037908 	.word	0x00037908
   17798:	0001ed01 	.word	0x0001ed01
   1779c:	00037910 	.word	0x00037910
   177a0:	00035b45 	.word	0x00035b45
   177a4:	00035cf1 	.word	0x00035cf1
   177a8:	00037918 	.word	0x00037918
   177ac:	00016a45 	.word	0x00016a45

000177b0 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   177b0:	b590      	push	{r4, r7, lr}
   177b2:	b08b      	sub	sp, #44	; 0x2c
   177b4:	af00      	add	r7, sp, #0
   177b6:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   177b8:	230c      	movs	r3, #12
   177ba:	18fb      	adds	r3, r7, r3
   177bc:	2214      	movs	r2, #20
   177be:	21ff      	movs	r1, #255	; 0xff
   177c0:	0018      	movs	r0, r3
   177c2:	4b48      	ldr	r3, [pc, #288]	; (178e4 <SubscribeHandlerGameTopic+0x134>)
   177c4:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   177c6:	687b      	ldr	r3, [r7, #4]
   177c8:	681b      	ldr	r3, [r3, #0]
   177ca:	689b      	ldr	r3, [r3, #8]
   177cc:	4946      	ldr	r1, [pc, #280]	; (178e8 <SubscribeHandlerGameTopic+0x138>)
   177ce:	2209      	movs	r2, #9
   177d0:	0018      	movs	r0, r3
   177d2:	4b46      	ldr	r3, [pc, #280]	; (178ec <SubscribeHandlerGameTopic+0x13c>)
   177d4:	4798      	blx	r3
   177d6:	1e03      	subs	r3, r0, #0
   177d8:	d166      	bne.n	178a8 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   177da:	4b45      	ldr	r3, [pc, #276]	; (178f0 <SubscribeHandlerGameTopic+0x140>)
   177dc:	0019      	movs	r1, r3
   177de:	2001      	movs	r0, #1
   177e0:	4b44      	ldr	r3, [pc, #272]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   177e2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   177e4:	687b      	ldr	r3, [r7, #4]
   177e6:	685b      	ldr	r3, [r3, #4]
   177e8:	685a      	ldr	r2, [r3, #4]
   177ea:	687b      	ldr	r3, [r7, #4]
   177ec:	685b      	ldr	r3, [r3, #4]
   177ee:	689b      	ldr	r3, [r3, #8]
   177f0:	4941      	ldr	r1, [pc, #260]	; (178f8 <SubscribeHandlerGameTopic+0x148>)
   177f2:	2001      	movs	r0, #1
   177f4:	4c3f      	ldr	r4, [pc, #252]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   177f6:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   177f8:	687b      	ldr	r3, [r7, #4]
   177fa:	681b      	ldr	r3, [r3, #0]
   177fc:	68da      	ldr	r2, [r3, #12]
   177fe:	687b      	ldr	r3, [r7, #4]
   17800:	681b      	ldr	r3, [r3, #0]
   17802:	689b      	ldr	r3, [r3, #8]
   17804:	493d      	ldr	r1, [pc, #244]	; (178fc <SubscribeHandlerGameTopic+0x14c>)
   17806:	2001      	movs	r0, #1
   17808:	4c3a      	ldr	r4, [pc, #232]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   1780a:	47a0      	blx	r4

        int nb = 0;
   1780c:	2300      	movs	r3, #0
   1780e:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   17810:	687b      	ldr	r3, [r7, #4]
   17812:	681b      	ldr	r3, [r3, #0]
   17814:	689b      	ldr	r3, [r3, #8]
   17816:	3309      	adds	r3, #9
   17818:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1781a:	e015      	b.n	17848 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   1781c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1781e:	1c63      	adds	r3, r4, #1
   17820:	627b      	str	r3, [r7, #36]	; 0x24
   17822:	68bb      	ldr	r3, [r7, #8]
   17824:	2208      	movs	r2, #8
   17826:	18b9      	adds	r1, r7, r2
   17828:	220a      	movs	r2, #10
   1782a:	0018      	movs	r0, r3
   1782c:	4b34      	ldr	r3, [pc, #208]	; (17900 <SubscribeHandlerGameTopic+0x150>)
   1782e:	4798      	blx	r3
   17830:	0003      	movs	r3, r0
   17832:	b2da      	uxtb	r2, r3
   17834:	230c      	movs	r3, #12
   17836:	18fb      	adds	r3, r7, r3
   17838:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1783a:	68bb      	ldr	r3, [r7, #8]
   1783c:	781b      	ldrb	r3, [r3, #0]
   1783e:	2b2c      	cmp	r3, #44	; 0x2c
   17840:	d10a      	bne.n	17858 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   17842:	68bb      	ldr	r3, [r7, #8]
   17844:	3301      	adds	r3, #1
   17846:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   17848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1784a:	2b13      	cmp	r3, #19
   1784c:	dc05      	bgt.n	1785a <SubscribeHandlerGameTopic+0xaa>
   1784e:	68bb      	ldr	r3, [r7, #8]
   17850:	781b      	ldrb	r3, [r3, #0]
   17852:	2b00      	cmp	r3, #0
   17854:	d1e2      	bne.n	1781c <SubscribeHandlerGameTopic+0x6c>
   17856:	e000      	b.n	1785a <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   17858:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1785a:	4b2a      	ldr	r3, [pc, #168]	; (17904 <SubscribeHandlerGameTopic+0x154>)
   1785c:	0019      	movs	r1, r3
   1785e:	2001      	movs	r0, #1
   17860:	4b24      	ldr	r3, [pc, #144]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   17862:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17864:	2300      	movs	r3, #0
   17866:	623b      	str	r3, [r7, #32]
   17868:	e00d      	b.n	17886 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1786a:	230c      	movs	r3, #12
   1786c:	18fa      	adds	r2, r7, r3
   1786e:	6a3b      	ldr	r3, [r7, #32]
   17870:	18d3      	adds	r3, r2, r3
   17872:	781b      	ldrb	r3, [r3, #0]
   17874:	001a      	movs	r2, r3
   17876:	4b24      	ldr	r3, [pc, #144]	; (17908 <SubscribeHandlerGameTopic+0x158>)
   17878:	0019      	movs	r1, r3
   1787a:	2001      	movs	r0, #1
   1787c:	4b1d      	ldr	r3, [pc, #116]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   1787e:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17880:	6a3b      	ldr	r3, [r7, #32]
   17882:	3301      	adds	r3, #1
   17884:	623b      	str	r3, [r7, #32]
   17886:	6a3b      	ldr	r3, [r7, #32]
   17888:	2b13      	cmp	r3, #19
   1788a:	ddee      	ble.n	1786a <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   1788c:	230c      	movs	r3, #12
   1788e:	18fb      	adds	r3, r7, r3
   17890:	0018      	movs	r0, r3
   17892:	4b1e      	ldr	r3, [pc, #120]	; (1790c <SubscribeHandlerGameTopic+0x15c>)
   17894:	4798      	blx	r3
   17896:	0003      	movs	r3, r0
   17898:	2b01      	cmp	r3, #1
   1789a:	d11e      	bne.n	178da <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   1789c:	4b1c      	ldr	r3, [pc, #112]	; (17910 <SubscribeHandlerGameTopic+0x160>)
   1789e:	0019      	movs	r1, r3
   178a0:	2001      	movs	r0, #1
   178a2:	4b14      	ldr	r3, [pc, #80]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   178a4:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   178a6:	e018      	b.n	178da <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   178a8:	4b1a      	ldr	r3, [pc, #104]	; (17914 <SubscribeHandlerGameTopic+0x164>)
   178aa:	0019      	movs	r1, r3
   178ac:	2001      	movs	r0, #1
   178ae:	4b11      	ldr	r3, [pc, #68]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   178b0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   178b2:	687b      	ldr	r3, [r7, #4]
   178b4:	685b      	ldr	r3, [r3, #4]
   178b6:	685a      	ldr	r2, [r3, #4]
   178b8:	687b      	ldr	r3, [r7, #4]
   178ba:	685b      	ldr	r3, [r3, #4]
   178bc:	689b      	ldr	r3, [r3, #8]
   178be:	490e      	ldr	r1, [pc, #56]	; (178f8 <SubscribeHandlerGameTopic+0x148>)
   178c0:	2001      	movs	r0, #1
   178c2:	4c0c      	ldr	r4, [pc, #48]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   178c4:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   178c6:	687b      	ldr	r3, [r7, #4]
   178c8:	681b      	ldr	r3, [r3, #0]
   178ca:	68da      	ldr	r2, [r3, #12]
   178cc:	687b      	ldr	r3, [r7, #4]
   178ce:	681b      	ldr	r3, [r3, #0]
   178d0:	689b      	ldr	r3, [r3, #8]
   178d2:	490a      	ldr	r1, [pc, #40]	; (178fc <SubscribeHandlerGameTopic+0x14c>)
   178d4:	2001      	movs	r0, #1
   178d6:	4c07      	ldr	r4, [pc, #28]	; (178f4 <SubscribeHandlerGameTopic+0x144>)
   178d8:	47a0      	blx	r4
}
   178da:	46c0      	nop			; (mov r8, r8)
   178dc:	46bd      	mov	sp, r7
   178de:	b00b      	add	sp, #44	; 0x2c
   178e0:	bd90      	pop	{r4, r7, pc}
   178e2:	46c0      	nop			; (mov r8, r8)
   178e4:	0003577f 	.word	0x0003577f
   178e8:	0003792c 	.word	0x0003792c
   178ec:	00035b45 	.word	0x00035b45
   178f0:	00037938 	.word	0x00037938
   178f4:	0001ed01 	.word	0x0001ed01
   178f8:	00037908 	.word	0x00037908
   178fc:	00037954 	.word	0x00037954
   17900:	00035cf1 	.word	0x00035cf1
   17904:	0003795c 	.word	0x0003795c
   17908:	00037970 	.word	0x00037970
   1790c:	00014999 	.word	0x00014999
   17910:	00037974 	.word	0x00037974
   17914:	00037990 	.word	0x00037990

00017918 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   17918:	b590      	push	{r4, r7, lr}
   1791a:	b083      	sub	sp, #12
   1791c:	af00      	add	r7, sp, #0
   1791e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "IMU topic received! -"); //changed by Derek
   17920:	4b09      	ldr	r3, [pc, #36]	; (17948 <SubscribeHandlerImuTopic+0x30>)
   17922:	0019      	movs	r1, r3
   17924:	2001      	movs	r0, #1
   17926:	4b09      	ldr	r3, [pc, #36]	; (1794c <SubscribeHandlerImuTopic+0x34>)
   17928:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s \r\n", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1792a:	687b      	ldr	r3, [r7, #4]
   1792c:	685b      	ldr	r3, [r3, #4]
   1792e:	685a      	ldr	r2, [r3, #4]
   17930:	687b      	ldr	r3, [r7, #4]
   17932:	685b      	ldr	r3, [r3, #4]
   17934:	689b      	ldr	r3, [r3, #8]
   17936:	4906      	ldr	r1, [pc, #24]	; (17950 <SubscribeHandlerImuTopic+0x38>)
   17938:	2001      	movs	r0, #1
   1793a:	4c04      	ldr	r4, [pc, #16]	; (1794c <SubscribeHandlerImuTopic+0x34>)
   1793c:	47a0      	blx	r4
}
   1793e:	46c0      	nop			; (mov r8, r8)
   17940:	46bd      	mov	sp, r7
   17942:	b003      	add	sp, #12
   17944:	bd90      	pop	{r4, r7, pc}
   17946:	46c0      	nop			; (mov r8, r8)
   17948:	000379c0 	.word	0x000379c0
   1794c:	0001ed01 	.word	0x0001ed01
   17950:	000379d8 	.word	0x000379d8

00017954 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   17954:	b590      	push	{r4, r7, lr}
   17956:	b08b      	sub	sp, #44	; 0x2c
   17958:	af06      	add	r7, sp, #24
   1795a:	60f8      	str	r0, [r7, #12]
   1795c:	60b9      	str	r1, [r7, #8]
   1795e:	607a      	str	r2, [r7, #4]
    switch (type) {
   17960:	68bb      	ldr	r3, [r7, #8]
   17962:	2b01      	cmp	r3, #1
   17964:	d03b      	beq.n	179de <mqtt_callback+0x8a>
   17966:	2b05      	cmp	r3, #5
   17968:	d05e      	beq.n	17a28 <mqtt_callback+0xd4>
   1796a:	2b00      	cmp	r3, #0
   1796c:	d000      	beq.n	17970 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   1796e:	e061      	b.n	17a34 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   17970:	687b      	ldr	r3, [r7, #4]
   17972:	681b      	ldr	r3, [r3, #0]
   17974:	2b00      	cmp	r3, #0
   17976:	db25      	blt.n	179c4 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   17978:	4b30      	ldr	r3, [pc, #192]	; (17a3c <mqtt_callback+0xe8>)
   1797a:	0019      	movs	r1, r3
   1797c:	2001      	movs	r0, #1
   1797e:	4b30      	ldr	r3, [pc, #192]	; (17a40 <mqtt_callback+0xec>)
   17980:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   17982:	4930      	ldr	r1, [pc, #192]	; (17a44 <mqtt_callback+0xf0>)
   17984:	4a30      	ldr	r2, [pc, #192]	; (17a48 <mqtt_callback+0xf4>)
   17986:	68f8      	ldr	r0, [r7, #12]
   17988:	2300      	movs	r3, #0
   1798a:	9305      	str	r3, [sp, #20]
   1798c:	2300      	movs	r3, #0
   1798e:	9304      	str	r3, [sp, #16]
   17990:	2300      	movs	r3, #0
   17992:	9303      	str	r3, [sp, #12]
   17994:	2300      	movs	r3, #0
   17996:	9302      	str	r3, [sp, #8]
   17998:	2300      	movs	r3, #0
   1799a:	9301      	str	r3, [sp, #4]
   1799c:	4b2a      	ldr	r3, [pc, #168]	; (17a48 <mqtt_callback+0xf4>)
   1799e:	9300      	str	r3, [sp, #0]
   179a0:	000b      	movs	r3, r1
   179a2:	2101      	movs	r1, #1
   179a4:	4c29      	ldr	r4, [pc, #164]	; (17a4c <mqtt_callback+0xf8>)
   179a6:	47a0      	blx	r4
   179a8:	1e03      	subs	r3, r0, #0
   179aa:	d005      	beq.n	179b8 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   179ac:	4b28      	ldr	r3, [pc, #160]	; (17a50 <mqtt_callback+0xfc>)
   179ae:	0019      	movs	r1, r3
   179b0:	2001      	movs	r0, #1
   179b2:	4b23      	ldr	r3, [pc, #140]	; (17a40 <mqtt_callback+0xec>)
   179b4:	4798      	blx	r3
        } break;
   179b6:	e03d      	b.n	17a34 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n\r\n");
   179b8:	4b26      	ldr	r3, [pc, #152]	; (17a54 <mqtt_callback+0x100>)
   179ba:	0019      	movs	r1, r3
   179bc:	2001      	movs	r0, #1
   179be:	4b20      	ldr	r3, [pc, #128]	; (17a40 <mqtt_callback+0xec>)
   179c0:	4798      	blx	r3
        } break;
   179c2:	e037      	b.n	17a34 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   179c4:	4a24      	ldr	r2, [pc, #144]	; (17a58 <mqtt_callback+0x104>)
   179c6:	4b25      	ldr	r3, [pc, #148]	; (17a5c <mqtt_callback+0x108>)
   179c8:	0019      	movs	r1, r3
   179ca:	2001      	movs	r0, #1
   179cc:	4b1c      	ldr	r3, [pc, #112]	; (17a40 <mqtt_callback+0xec>)
   179ce:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   179d0:	4a21      	ldr	r2, [pc, #132]	; (17a58 <mqtt_callback+0x104>)
   179d2:	68fb      	ldr	r3, [r7, #12]
   179d4:	0011      	movs	r1, r2
   179d6:	0018      	movs	r0, r3
   179d8:	4b21      	ldr	r3, [pc, #132]	; (17a60 <mqtt_callback+0x10c>)
   179da:	4798      	blx	r3
        } break;
   179dc:	e02a      	b.n	17a34 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   179de:	687b      	ldr	r3, [r7, #4]
   179e0:	781b      	ldrb	r3, [r3, #0]
   179e2:	2b00      	cmp	r3, #0
   179e4:	d117      	bne.n	17a16 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   179e6:	4b1f      	ldr	r3, [pc, #124]	; (17a64 <mqtt_callback+0x110>)
   179e8:	491f      	ldr	r1, [pc, #124]	; (17a68 <mqtt_callback+0x114>)
   179ea:	68f8      	ldr	r0, [r7, #12]
   179ec:	2202      	movs	r2, #2
   179ee:	4c1f      	ldr	r4, [pc, #124]	; (17a6c <mqtt_callback+0x118>)
   179f0:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   179f2:	4b1f      	ldr	r3, [pc, #124]	; (17a70 <mqtt_callback+0x11c>)
   179f4:	491f      	ldr	r1, [pc, #124]	; (17a74 <mqtt_callback+0x120>)
   179f6:	68f8      	ldr	r0, [r7, #12]
   179f8:	2202      	movs	r2, #2
   179fa:	4c1c      	ldr	r4, [pc, #112]	; (17a6c <mqtt_callback+0x118>)
   179fc:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   179fe:	4b1e      	ldr	r3, [pc, #120]	; (17a78 <mqtt_callback+0x124>)
   17a00:	491e      	ldr	r1, [pc, #120]	; (17a7c <mqtt_callback+0x128>)
   17a02:	68f8      	ldr	r0, [r7, #12]
   17a04:	2202      	movs	r2, #2
   17a06:	4c19      	ldr	r4, [pc, #100]	; (17a6c <mqtt_callback+0x118>)
   17a08:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   17a0a:	4b1d      	ldr	r3, [pc, #116]	; (17a80 <mqtt_callback+0x12c>)
   17a0c:	0019      	movs	r1, r3
   17a0e:	2001      	movs	r0, #1
   17a10:	4b0b      	ldr	r3, [pc, #44]	; (17a40 <mqtt_callback+0xec>)
   17a12:	4798      	blx	r3
            break;
   17a14:	e00e      	b.n	17a34 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   17a16:	687b      	ldr	r3, [r7, #4]
   17a18:	781b      	ldrb	r3, [r3, #0]
   17a1a:	001a      	movs	r2, r3
   17a1c:	4b19      	ldr	r3, [pc, #100]	; (17a84 <mqtt_callback+0x130>)
   17a1e:	0019      	movs	r1, r3
   17a20:	2001      	movs	r0, #1
   17a22:	4b07      	ldr	r3, [pc, #28]	; (17a40 <mqtt_callback+0xec>)
   17a24:	4798      	blx	r3
            break;
   17a26:	e005      	b.n	17a34 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   17a28:	4b17      	ldr	r3, [pc, #92]	; (17a88 <mqtt_callback+0x134>)
   17a2a:	0019      	movs	r1, r3
   17a2c:	2001      	movs	r0, #1
   17a2e:	4b04      	ldr	r3, [pc, #16]	; (17a40 <mqtt_callback+0xec>)
   17a30:	4798      	blx	r3
            break;
   17a32:	46c0      	nop			; (mov r8, r8)
}
   17a34:	46c0      	nop			; (mov r8, r8)
   17a36:	46bd      	mov	sp, r7
   17a38:	b005      	add	sp, #20
   17a3a:	bd90      	pop	{r4, r7, pc}
   17a3c:	00037a2c 	.word	0x00037a2c
   17a40:	0001ed01 	.word	0x0001ed01
   17a44:	00037a48 	.word	0x00037a48
   17a48:	00037a58 	.word	0x00037a58
   17a4c:	000305f9 	.word	0x000305f9
   17a50:	00037a64 	.word	0x00037a64
   17a54:	00037a8c 	.word	0x00037a8c
   17a58:	00037380 	.word	0x00037380
   17a5c:	00037aac 	.word	0x00037aac
   17a60:	000305b1 	.word	0x000305b1
   17a64:	000177b1 	.word	0x000177b1
   17a68:	00037ae4 	.word	0x00037ae4
   17a6c:	00030799 	.word	0x00030799
   17a70:	000176bd 	.word	0x000176bd
   17a74:	00037a08 	.word	0x00037a08
   17a78:	00017919 	.word	0x00017919
   17a7c:	00037af8 	.word	0x00037af8
   17a80:	00037b0c 	.word	0x00037b0c
   17a84:	00037b20 	.word	0x00037b20
   17a88:	00037b54 	.word	0x00037b54

00017a8c <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   17a8c:	b580      	push	{r7, lr}
   17a8e:	b088      	sub	sp, #32
   17a90:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   17a92:	1d3b      	adds	r3, r7, #4
   17a94:	0018      	movs	r0, r3
   17a96:	4b1f      	ldr	r3, [pc, #124]	; (17b14 <configure_mqtt+0x88>)
   17a98:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   17a9a:	1d3b      	adds	r3, r7, #4
   17a9c:	4a1e      	ldr	r2, [pc, #120]	; (17b18 <configure_mqtt+0x8c>)
   17a9e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17aa0:	1d3b      	adds	r3, r7, #4
   17aa2:	2280      	movs	r2, #128	; 0x80
   17aa4:	0092      	lsls	r2, r2, #2
   17aa6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   17aa8:	1d3b      	adds	r3, r7, #4
   17aaa:	4a1c      	ldr	r2, [pc, #112]	; (17b1c <configure_mqtt+0x90>)
   17aac:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17aae:	1d3b      	adds	r3, r7, #4
   17ab0:	2280      	movs	r2, #128	; 0x80
   17ab2:	0092      	lsls	r2, r2, #2
   17ab4:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   17ab6:	1d3b      	adds	r3, r7, #4
   17ab8:	4a19      	ldr	r2, [pc, #100]	; (17b20 <configure_mqtt+0x94>)
   17aba:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   17abc:	1d3b      	adds	r3, r7, #4
   17abe:	4a19      	ldr	r2, [pc, #100]	; (17b24 <configure_mqtt+0x98>)
   17ac0:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   17ac2:	1d3a      	adds	r2, r7, #4
   17ac4:	4b18      	ldr	r3, [pc, #96]	; (17b28 <configure_mqtt+0x9c>)
   17ac6:	0011      	movs	r1, r2
   17ac8:	0018      	movs	r0, r3
   17aca:	4b18      	ldr	r3, [pc, #96]	; (17b2c <configure_mqtt+0xa0>)
   17acc:	4798      	blx	r3
   17ace:	0003      	movs	r3, r0
   17ad0:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17ad2:	69fb      	ldr	r3, [r7, #28]
   17ad4:	2b00      	cmp	r3, #0
   17ad6:	da06      	bge.n	17ae6 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   17ad8:	69fa      	ldr	r2, [r7, #28]
   17ada:	4b15      	ldr	r3, [pc, #84]	; (17b30 <configure_mqtt+0xa4>)
   17adc:	0019      	movs	r1, r3
   17ade:	2001      	movs	r0, #1
   17ae0:	4b14      	ldr	r3, [pc, #80]	; (17b34 <configure_mqtt+0xa8>)
   17ae2:	4798      	blx	r3
        while (1) {
   17ae4:	e7fe      	b.n	17ae4 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   17ae6:	4a14      	ldr	r2, [pc, #80]	; (17b38 <configure_mqtt+0xac>)
   17ae8:	4b0f      	ldr	r3, [pc, #60]	; (17b28 <configure_mqtt+0x9c>)
   17aea:	0011      	movs	r1, r2
   17aec:	0018      	movs	r0, r3
   17aee:	4b13      	ldr	r3, [pc, #76]	; (17b3c <configure_mqtt+0xb0>)
   17af0:	4798      	blx	r3
   17af2:	0003      	movs	r3, r0
   17af4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17af6:	69fb      	ldr	r3, [r7, #28]
   17af8:	2b00      	cmp	r3, #0
   17afa:	da06      	bge.n	17b0a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   17afc:	69fa      	ldr	r2, [r7, #28]
   17afe:	4b10      	ldr	r3, [pc, #64]	; (17b40 <configure_mqtt+0xb4>)
   17b00:	0019      	movs	r1, r3
   17b02:	2001      	movs	r0, #1
   17b04:	4b0b      	ldr	r3, [pc, #44]	; (17b34 <configure_mqtt+0xa8>)
   17b06:	4798      	blx	r3
        while (1) {
   17b08:	e7fe      	b.n	17b08 <configure_mqtt+0x7c>
        }
    }
}
   17b0a:	46c0      	nop			; (mov r8, r8)
   17b0c:	46bd      	mov	sp, r7
   17b0e:	b008      	add	sp, #32
   17b10:	bd80      	pop	{r7, pc}
   17b12:	46c0      	nop			; (mov r8, r8)
   17b14:	000304f1 	.word	0x000304f1
   17b18:	200008d0 	.word	0x200008d0
   17b1c:	20000ad0 	.word	0x20000ad0
   17b20:	0000075b 	.word	0x0000075b
   17b24:	00001770 	.word	0x00001770
   17b28:	20000898 	.word	0x20000898
   17b2c:	00030441 	.word	0x00030441
   17b30:	00037b68 	.word	0x00037b68
   17b34:	0001ed01 	.word	0x0001ed01
   17b38:	00017955 	.word	0x00017955
   17b3c:	00030531 	.word	0x00030531
   17b40:	00037b9c 	.word	0x00037b9c

00017b44 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   17b44:	b580      	push	{r7, lr}
   17b46:	b084      	sub	sp, #16
   17b48:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   17b4a:	1d3b      	adds	r3, r7, #4
   17b4c:	0018      	movs	r0, r3
   17b4e:	4b0b      	ldr	r3, [pc, #44]	; (17b7c <configure_extint_channel+0x38>)
   17b50:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   17b52:	1d3b      	adds	r3, r7, #4
   17b54:	2237      	movs	r2, #55	; 0x37
   17b56:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   17b58:	1d3b      	adds	r3, r7, #4
   17b5a:	2200      	movs	r2, #0
   17b5c:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   17b5e:	1d3b      	adds	r3, r7, #4
   17b60:	2201      	movs	r2, #1
   17b62:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   17b64:	1d3b      	adds	r3, r7, #4
   17b66:	2202      	movs	r2, #2
   17b68:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   17b6a:	1d3b      	adds	r3, r7, #4
   17b6c:	0019      	movs	r1, r3
   17b6e:	2007      	movs	r0, #7
   17b70:	4b03      	ldr	r3, [pc, #12]	; (17b80 <configure_extint_channel+0x3c>)
   17b72:	4798      	blx	r3
}
   17b74:	46c0      	nop			; (mov r8, r8)
   17b76:	46bd      	mov	sp, r7
   17b78:	b004      	add	sp, #16
   17b7a:	bd80      	pop	{r7, pc}
   17b7c:	00027629 	.word	0x00027629
   17b80:	0002765d 	.word	0x0002765d

00017b84 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   17b84:	b580      	push	{r7, lr}
   17b86:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17b88:	4b06      	ldr	r3, [pc, #24]	; (17ba4 <configure_extint_callbacks+0x20>)
   17b8a:	2200      	movs	r2, #0
   17b8c:	2107      	movs	r1, #7
   17b8e:	0018      	movs	r0, r3
   17b90:	4b05      	ldr	r3, [pc, #20]	; (17ba8 <configure_extint_callbacks+0x24>)
   17b92:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17b94:	2100      	movs	r1, #0
   17b96:	2007      	movs	r0, #7
   17b98:	4b04      	ldr	r3, [pc, #16]	; (17bac <configure_extint_callbacks+0x28>)
   17b9a:	4798      	blx	r3
}
   17b9c:	46c0      	nop			; (mov r8, r8)
   17b9e:	46bd      	mov	sp, r7
   17ba0:	bd80      	pop	{r7, pc}
   17ba2:	46c0      	nop			; (mov r8, r8)
   17ba4:	00017bb1 	.word	0x00017bb1
   17ba8:	00027229 	.word	0x00027229
   17bac:	0002728d 	.word	0x0002728d

00017bb0 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17bb0:	b5b0      	push	{r4, r5, r7, lr}
   17bb2:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   17bb4:	4b0c      	ldr	r3, [pc, #48]	; (17be8 <extint_detection_callback+0x38>)
   17bb6:	681b      	ldr	r3, [r3, #0]
   17bb8:	1c5a      	adds	r2, r3, #1
   17bba:	4b0b      	ldr	r3, [pc, #44]	; (17be8 <extint_detection_callback+0x38>)
   17bbc:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   17bbe:	4b0a      	ldr	r3, [pc, #40]	; (17be8 <extint_detection_callback+0x38>)
   17bc0:	681b      	ldr	r3, [r3, #0]
   17bc2:	2b28      	cmp	r3, #40	; 0x28
   17bc4:	d902      	bls.n	17bcc <extint_detection_callback+0x1c>
   17bc6:	4b08      	ldr	r3, [pc, #32]	; (17be8 <extint_detection_callback+0x38>)
   17bc8:	2201      	movs	r2, #1
   17bca:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   17bcc:	4b06      	ldr	r3, [pc, #24]	; (17be8 <extint_detection_callback+0x38>)
   17bce:	681b      	ldr	r3, [r3, #0]
   17bd0:	4a06      	ldr	r2, [pc, #24]	; (17bec <extint_detection_callback+0x3c>)
   17bd2:	4807      	ldr	r0, [pc, #28]	; (17bf0 <extint_detection_callback+0x40>)
   17bd4:	213f      	movs	r1, #63	; 0x3f
   17bd6:	4c07      	ldr	r4, [pc, #28]	; (17bf4 <extint_detection_callback+0x44>)
   17bd8:	47a0      	blx	r4
    isPressed = true;
   17bda:	4b07      	ldr	r3, [pc, #28]	; (17bf8 <extint_detection_callback+0x48>)
   17bdc:	2201      	movs	r2, #1
   17bde:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   17be0:	46c0      	nop			; (mov r8, r8)
   17be2:	46bd      	mov	sp, r7
   17be4:	bdb0      	pop	{r4, r5, r7, pc}
   17be6:	46c0      	nop			; (mov r8, r8)
   17be8:	200000b0 	.word	0x200000b0
   17bec:	00037bd0 	.word	0x00037bd0
   17bf0:	20000070 	.word	0x20000070
   17bf4:	000359d9 	.word	0x000359d9
   17bf8:	20000cd0 	.word	0x20000cd0

00017bfc <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   17bfc:	b580      	push	{r7, lr}
   17bfe:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   17c00:	4a15      	ldr	r2, [pc, #84]	; (17c58 <HTTP_DownloadFileInit+0x5c>)
   17c02:	4b16      	ldr	r3, [pc, #88]	; (17c5c <HTTP_DownloadFileInit+0x60>)
   17c04:	0011      	movs	r1, r2
   17c06:	0018      	movs	r0, r3
   17c08:	4b15      	ldr	r3, [pc, #84]	; (17c60 <HTTP_DownloadFileInit+0x64>)
   17c0a:	4798      	blx	r3
   17c0c:	1e03      	subs	r3, r0, #0
   17c0e:	d008      	beq.n	17c22 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17c10:	4b14      	ldr	r3, [pc, #80]	; (17c64 <HTTP_DownloadFileInit+0x68>)
   17c12:	0019      	movs	r1, r3
   17c14:	2001      	movs	r0, #1
   17c16:	4b14      	ldr	r3, [pc, #80]	; (17c68 <HTTP_DownloadFileInit+0x6c>)
   17c18:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   17c1a:	e002      	b.n	17c22 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   17c1c:	2000      	movs	r0, #0
   17c1e:	4b13      	ldr	r3, [pc, #76]	; (17c6c <HTTP_DownloadFileInit+0x70>)
   17c20:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   17c22:	4b0e      	ldr	r3, [pc, #56]	; (17c5c <HTTP_DownloadFileInit+0x60>)
   17c24:	2234      	movs	r2, #52	; 0x34
   17c26:	5c9b      	ldrb	r3, [r3, r2]
   17c28:	2b00      	cmp	r3, #0
   17c2a:	d1f7      	bne.n	17c1c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   17c2c:	4b10      	ldr	r3, [pc, #64]	; (17c70 <HTTP_DownloadFileInit+0x74>)
   17c2e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   17c30:	4b10      	ldr	r3, [pc, #64]	; (17c74 <HTTP_DownloadFileInit+0x78>)
   17c32:	2201      	movs	r2, #1
   17c34:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   17c36:	4a10      	ldr	r2, [pc, #64]	; (17c78 <HTTP_DownloadFileInit+0x7c>)
   17c38:	4b10      	ldr	r3, [pc, #64]	; (17c7c <HTTP_DownloadFileInit+0x80>)
   17c3a:	0011      	movs	r1, r2
   17c3c:	0018      	movs	r0, r3
   17c3e:	4b10      	ldr	r3, [pc, #64]	; (17c80 <HTTP_DownloadFileInit+0x84>)
   17c40:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   17c42:	4b10      	ldr	r3, [pc, #64]	; (17c84 <HTTP_DownloadFileInit+0x88>)
   17c44:	4798      	blx	r3

    start_download();
   17c46:	4b10      	ldr	r3, [pc, #64]	; (17c88 <HTTP_DownloadFileInit+0x8c>)
   17c48:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   17c4a:	4b10      	ldr	r3, [pc, #64]	; (17c8c <HTTP_DownloadFileInit+0x90>)
   17c4c:	2203      	movs	r2, #3
   17c4e:	701a      	strb	r2, [r3, #0]
}
   17c50:	46c0      	nop			; (mov r8, r8)
   17c52:	46bd      	mov	sp, r7
   17c54:	bd80      	pop	{r7, pc}
   17c56:	46c0      	nop			; (mov r8, r8)
   17c58:	00037380 	.word	0x00037380
   17c5c:	20000898 	.word	0x20000898
   17c60:	000306e5 	.word	0x000306e5
   17c64:	00037790 	.word	0x00037790
   17c68:	0001ed01 	.word	0x0001ed01
   17c6c:	00022d19 	.word	0x00022d19
   17c70:	000262d5 	.word	0x000262d5
   17c74:	20000638 	.word	0x20000638
   17c78:	0001730d 	.word	0x0001730d
   17c7c:	000172d9 	.word	0x000172d9
   17c80:	0002631d 	.word	0x0002631d
   17c84:	00026285 	.word	0x00026285
   17c88:	00016f01 	.word	0x00016f01
   17c8c:	20000624 	.word	0x20000624

00017c90 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17c90:	b590      	push	{r4, r7, lr}
   17c92:	b085      	sub	sp, #20
   17c94:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17c96:	e009      	b.n	17cac <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17c98:	2000      	movs	r0, #0
   17c9a:	4b2a      	ldr	r3, [pc, #168]	; (17d44 <HTTP_DownloadFileTransaction+0xb4>)
   17c9c:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17c9e:	4b2a      	ldr	r3, [pc, #168]	; (17d48 <HTTP_DownloadFileTransaction+0xb8>)
   17ca0:	0018      	movs	r0, r3
   17ca2:	4b2a      	ldr	r3, [pc, #168]	; (17d4c <HTTP_DownloadFileTransaction+0xbc>)
   17ca4:	4798      	blx	r3
        vTaskDelay(5);
   17ca6:	2005      	movs	r0, #5
   17ca8:	4b29      	ldr	r3, [pc, #164]	; (17d50 <HTTP_DownloadFileTransaction+0xc0>)
   17caa:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17cac:	2010      	movs	r0, #16
   17cae:	4b29      	ldr	r3, [pc, #164]	; (17d54 <HTTP_DownloadFileTransaction+0xc4>)
   17cb0:	4798      	blx	r3
   17cb2:	0003      	movs	r3, r0
   17cb4:	001a      	movs	r2, r3
   17cb6:	2301      	movs	r3, #1
   17cb8:	4053      	eors	r3, r2
   17cba:	b2db      	uxtb	r3, r3
   17cbc:	2b00      	cmp	r3, #0
   17cbe:	d009      	beq.n	17cd4 <HTTP_DownloadFileTransaction+0x44>
   17cc0:	2020      	movs	r0, #32
   17cc2:	4b24      	ldr	r3, [pc, #144]	; (17d54 <HTTP_DownloadFileTransaction+0xc4>)
   17cc4:	4798      	blx	r3
   17cc6:	0003      	movs	r3, r0
   17cc8:	001a      	movs	r2, r3
   17cca:	2301      	movs	r3, #1
   17ccc:	4053      	eors	r3, r2
   17cce:	b2db      	uxtb	r3, r3
   17cd0:	2b00      	cmp	r3, #0
   17cd2:	d1e1      	bne.n	17c98 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   17cd4:	4b20      	ldr	r3, [pc, #128]	; (17d58 <HTTP_DownloadFileTransaction+0xc8>)
   17cd6:	4798      	blx	r3
    vTaskDelay(1000);
   17cd8:	23fa      	movs	r3, #250	; 0xfa
   17cda:	009b      	lsls	r3, r3, #2
   17cdc:	0018      	movs	r0, r3
   17cde:	4b1c      	ldr	r3, [pc, #112]	; (17d50 <HTTP_DownloadFileTransaction+0xc0>)
   17ce0:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   17ce2:	4b1e      	ldr	r3, [pc, #120]	; (17d5c <HTTP_DownloadFileTransaction+0xcc>)
   17ce4:	2200      	movs	r2, #0
   17ce6:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   17ce8:	003b      	movs	r3, r7
   17cea:	4a1d      	ldr	r2, [pc, #116]	; (17d60 <HTTP_DownloadFileTransaction+0xd0>)
   17cec:	ca13      	ldmia	r2!, {r0, r1, r4}
   17cee:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17cf0:	003b      	movs	r3, r7
   17cf2:	2230      	movs	r2, #48	; 0x30
   17cf4:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17cf6:	230f      	movs	r3, #15
   17cf8:	18fc      	adds	r4, r7, r3
   17cfa:	0039      	movs	r1, r7
   17cfc:	4b19      	ldr	r3, [pc, #100]	; (17d64 <HTTP_DownloadFileTransaction+0xd4>)
   17cfe:	220a      	movs	r2, #10
   17d00:	0018      	movs	r0, r3
   17d02:	4b19      	ldr	r3, [pc, #100]	; (17d68 <HTTP_DownloadFileTransaction+0xd8>)
   17d04:	4798      	blx	r3
   17d06:	0003      	movs	r3, r0
   17d08:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   17d0a:	230f      	movs	r3, #15
   17d0c:	18fb      	adds	r3, r7, r3
   17d0e:	781b      	ldrb	r3, [r3, #0]
   17d10:	2b00      	cmp	r3, #0
   17d12:	d008      	beq.n	17d26 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17d14:	230f      	movs	r3, #15
   17d16:	18fb      	adds	r3, r7, r3
   17d18:	781a      	ldrb	r2, [r3, #0]
   17d1a:	4b14      	ldr	r3, [pc, #80]	; (17d6c <HTTP_DownloadFileTransaction+0xdc>)
   17d1c:	0019      	movs	r1, r3
   17d1e:	2000      	movs	r0, #0
   17d20:	4b13      	ldr	r3, [pc, #76]	; (17d70 <HTTP_DownloadFileTransaction+0xe0>)
   17d22:	4798      	blx	r3
   17d24:	e003      	b.n	17d2e <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   17d26:	4b13      	ldr	r3, [pc, #76]	; (17d74 <HTTP_DownloadFileTransaction+0xe4>)
   17d28:	0018      	movs	r0, r3
   17d2a:	4b13      	ldr	r3, [pc, #76]	; (17d78 <HTTP_DownloadFileTransaction+0xe8>)
   17d2c:	4798      	blx	r3
    }
	
	f_close(&file_object);
   17d2e:	4b0d      	ldr	r3, [pc, #52]	; (17d64 <HTTP_DownloadFileTransaction+0xd4>)
   17d30:	0018      	movs	r0, r3
   17d32:	4b12      	ldr	r3, [pc, #72]	; (17d7c <HTTP_DownloadFileTransaction+0xec>)
   17d34:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   17d36:	4b12      	ldr	r3, [pc, #72]	; (17d80 <HTTP_DownloadFileTransaction+0xf0>)
   17d38:	2200      	movs	r2, #0
   17d3a:	701a      	strb	r2, [r3, #0]
}
   17d3c:	46c0      	nop			; (mov r8, r8)
   17d3e:	46bd      	mov	sp, r7
   17d40:	b005      	add	sp, #20
   17d42:	bd90      	pop	{r4, r7, pc}
   17d44:	00022d19 	.word	0x00022d19
   17d48:	20004940 	.word	0x20004940
   17d4c:	0003340d 	.word	0x0003340d
   17d50:	0001cfc1 	.word	0x0001cfc1
   17d54:	00016bd9 	.word	0x00016bd9
   17d58:	000262d5 	.word	0x000262d5
   17d5c:	20000638 	.word	0x20000638
   17d60:	00037c08 	.word	0x00037c08
   17d64:	2000086c 	.word	0x2000086c
   17d68:	0002e6d5 	.word	0x0002e6d5
   17d6c:	00037be4 	.word	0x00037be4
   17d70:	0001ed01 	.word	0x0001ed01
   17d74:	00037bf4 	.word	0x00037bf4
   17d78:	0001ec15 	.word	0x0001ec15
   17d7c:	0002f0d5 	.word	0x0002f0d5
   17d80:	20000624 	.word	0x20000624

00017d84 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17d84:	b580      	push	{r7, lr}
   17d86:	af00      	add	r7, sp, #0
    socketDeinit();
   17d88:	4b18      	ldr	r3, [pc, #96]	; (17dec <MQTT_InitRoutine+0x68>)
   17d8a:	4798      	blx	r3
    configure_mqtt();
   17d8c:	4b18      	ldr	r3, [pc, #96]	; (17df0 <MQTT_InitRoutine+0x6c>)
   17d8e:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17d90:	4a18      	ldr	r2, [pc, #96]	; (17df4 <MQTT_InitRoutine+0x70>)
   17d92:	4b19      	ldr	r3, [pc, #100]	; (17df8 <MQTT_InitRoutine+0x74>)
   17d94:	0011      	movs	r1, r2
   17d96:	0018      	movs	r0, r3
   17d98:	4b18      	ldr	r3, [pc, #96]	; (17dfc <MQTT_InitRoutine+0x78>)
   17d9a:	4798      	blx	r3
    socketInit();
   17d9c:	4b18      	ldr	r3, [pc, #96]	; (17e00 <MQTT_InitRoutine+0x7c>)
   17d9e:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17da0:	4b18      	ldr	r3, [pc, #96]	; (17e04 <MQTT_InitRoutine+0x80>)
   17da2:	2234      	movs	r2, #52	; 0x34
   17da4:	5c9b      	ldrb	r3, [r3, r2]
   17da6:	2201      	movs	r2, #1
   17da8:	4053      	eors	r3, r2
   17daa:	b2db      	uxtb	r3, r3
   17dac:	2b00      	cmp	r3, #0
   17dae:	d00c      	beq.n	17dca <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17db0:	4a15      	ldr	r2, [pc, #84]	; (17e08 <MQTT_InitRoutine+0x84>)
   17db2:	4b14      	ldr	r3, [pc, #80]	; (17e04 <MQTT_InitRoutine+0x80>)
   17db4:	0011      	movs	r1, r2
   17db6:	0018      	movs	r0, r3
   17db8:	4b14      	ldr	r3, [pc, #80]	; (17e0c <MQTT_InitRoutine+0x88>)
   17dba:	4798      	blx	r3
   17dbc:	1e03      	subs	r3, r0, #0
   17dbe:	d004      	beq.n	17dca <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17dc0:	4b13      	ldr	r3, [pc, #76]	; (17e10 <MQTT_InitRoutine+0x8c>)
   17dc2:	0019      	movs	r1, r3
   17dc4:	2001      	movs	r0, #1
   17dc6:	4b13      	ldr	r3, [pc, #76]	; (17e14 <MQTT_InitRoutine+0x90>)
   17dc8:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   17dca:	4b0e      	ldr	r3, [pc, #56]	; (17e04 <MQTT_InitRoutine+0x80>)
   17dcc:	2234      	movs	r2, #52	; 0x34
   17dce:	5c9b      	ldrb	r3, [r3, r2]
   17dd0:	2b00      	cmp	r3, #0
   17dd2:	d004      	beq.n	17dde <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n\r\n");
   17dd4:	4b10      	ldr	r3, [pc, #64]	; (17e18 <MQTT_InitRoutine+0x94>)
   17dd6:	0019      	movs	r1, r3
   17dd8:	2001      	movs	r0, #1
   17dda:	4b0e      	ldr	r3, [pc, #56]	; (17e14 <MQTT_InitRoutine+0x90>)
   17ddc:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   17dde:	4b0f      	ldr	r3, [pc, #60]	; (17e1c <MQTT_InitRoutine+0x98>)
   17de0:	2201      	movs	r2, #1
   17de2:	701a      	strb	r2, [r3, #0]
}
   17de4:	46c0      	nop			; (mov r8, r8)
   17de6:	46bd      	mov	sp, r7
   17de8:	bd80      	pop	{r7, pc}
   17dea:	46c0      	nop			; (mov r8, r8)
   17dec:	000262d5 	.word	0x000262d5
   17df0:	00017a8d 	.word	0x00017a8d
   17df4:	00017699 	.word	0x00017699
   17df8:	00017665 	.word	0x00017665
   17dfc:	0002631d 	.word	0x0002631d
   17e00:	00026285 	.word	0x00026285
   17e04:	20000898 	.word	0x20000898
   17e08:	00037380 	.word	0x00037380
   17e0c:	000305b1 	.word	0x000305b1
   17e10:	00037790 	.word	0x00037790
   17e14:	0001ed01 	.word	0x0001ed01
   17e18:	00037c14 	.word	0x00037c14
   17e1c:	20000624 	.word	0x20000624

00017e20 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17e20:	b580      	push	{r7, lr}
   17e22:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17e24:	2000      	movs	r0, #0
   17e26:	4b0b      	ldr	r3, [pc, #44]	; (17e54 <MQTT_HandleTransactions+0x34>)
   17e28:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   17e2a:	4b0b      	ldr	r3, [pc, #44]	; (17e58 <MQTT_HandleTransactions+0x38>)
   17e2c:	0018      	movs	r0, r3
   17e2e:	4b0b      	ldr	r3, [pc, #44]	; (17e5c <MQTT_HandleTransactions+0x3c>)
   17e30:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   17e32:	4b0b      	ldr	r3, [pc, #44]	; (17e60 <MQTT_HandleTransactions+0x40>)
   17e34:	4798      	blx	r3
    MQTT_HandleImuMessages();
   17e36:	4b0b      	ldr	r3, [pc, #44]	; (17e64 <MQTT_HandleTransactions+0x44>)
   17e38:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   17e3a:	4b0b      	ldr	r3, [pc, #44]	; (17e68 <MQTT_HandleTransactions+0x48>)
   17e3c:	2234      	movs	r2, #52	; 0x34
   17e3e:	5c9b      	ldrb	r3, [r3, r2]
   17e40:	2b00      	cmp	r3, #0
   17e42:	d004      	beq.n	17e4e <MQTT_HandleTransactions+0x2e>
   17e44:	4b08      	ldr	r3, [pc, #32]	; (17e68 <MQTT_HandleTransactions+0x48>)
   17e46:	2164      	movs	r1, #100	; 0x64
   17e48:	0018      	movs	r0, r3
   17e4a:	4b08      	ldr	r3, [pc, #32]	; (17e6c <MQTT_HandleTransactions+0x4c>)
   17e4c:	4798      	blx	r3
}
   17e4e:	46c0      	nop			; (mov r8, r8)
   17e50:	46bd      	mov	sp, r7
   17e52:	bd80      	pop	{r7, pc}
   17e54:	00022d19 	.word	0x00022d19
   17e58:	20004940 	.word	0x20004940
   17e5c:	0003340d 	.word	0x0003340d
   17e60:	00017efd 	.word	0x00017efd
   17e64:	00017e71 	.word	0x00017e71
   17e68:	20000898 	.word	0x20000898
   17e6c:	000307e1 	.word	0x000307e1

00017e70 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17e70:	b590      	push	{r4, r7, lr}
   17e72:	b085      	sub	sp, #20
   17e74:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17e76:	4b18      	ldr	r3, [pc, #96]	; (17ed8 <MQTT_HandleImuMessages+0x68>)
   17e78:	681b      	ldr	r3, [r3, #0]
   17e7a:	0039      	movs	r1, r7
   17e7c:	2200      	movs	r2, #0
   17e7e:	0018      	movs	r0, r3
   17e80:	4b16      	ldr	r3, [pc, #88]	; (17edc <MQTT_HandleImuMessages+0x6c>)
   17e82:	4798      	blx	r3
   17e84:	0003      	movs	r3, r0
   17e86:	2b01      	cmp	r3, #1
   17e88:	d121      	bne.n	17ece <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17e8a:	003b      	movs	r3, r7
   17e8c:	2200      	movs	r2, #0
   17e8e:	5e9b      	ldrsh	r3, [r3, r2]
   17e90:	001c      	movs	r4, r3
   17e92:	003b      	movs	r3, r7
   17e94:	2202      	movs	r2, #2
   17e96:	5e9b      	ldrsh	r3, [r3, r2]
   17e98:	0019      	movs	r1, r3
   17e9a:	003b      	movs	r3, r7
   17e9c:	2204      	movs	r2, #4
   17e9e:	5e9b      	ldrsh	r3, [r3, r2]
   17ea0:	4a0f      	ldr	r2, [pc, #60]	; (17ee0 <MQTT_HandleImuMessages+0x70>)
   17ea2:	4810      	ldr	r0, [pc, #64]	; (17ee4 <MQTT_HandleImuMessages+0x74>)
   17ea4:	9301      	str	r3, [sp, #4]
   17ea6:	9100      	str	r1, [sp, #0]
   17ea8:	0023      	movs	r3, r4
   17eaa:	213f      	movs	r1, #63	; 0x3f
   17eac:	4c0e      	ldr	r4, [pc, #56]	; (17ee8 <MQTT_HandleImuMessages+0x78>)
   17eae:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17eb0:	4b0c      	ldr	r3, [pc, #48]	; (17ee4 <MQTT_HandleImuMessages+0x74>)
   17eb2:	0018      	movs	r0, r3
   17eb4:	4b0d      	ldr	r3, [pc, #52]	; (17eec <MQTT_HandleImuMessages+0x7c>)
   17eb6:	4798      	blx	r3
   17eb8:	0004      	movs	r4, r0
   17eba:	4a0a      	ldr	r2, [pc, #40]	; (17ee4 <MQTT_HandleImuMessages+0x74>)
   17ebc:	490c      	ldr	r1, [pc, #48]	; (17ef0 <MQTT_HandleImuMessages+0x80>)
   17ebe:	480d      	ldr	r0, [pc, #52]	; (17ef4 <MQTT_HandleImuMessages+0x84>)
   17ec0:	2300      	movs	r3, #0
   17ec2:	9301      	str	r3, [sp, #4]
   17ec4:	2301      	movs	r3, #1
   17ec6:	9300      	str	r3, [sp, #0]
   17ec8:	0023      	movs	r3, r4
   17eca:	4c0b      	ldr	r4, [pc, #44]	; (17ef8 <MQTT_HandleImuMessages+0x88>)
   17ecc:	47a0      	blx	r4
    }
}
   17ece:	46c0      	nop			; (mov r8, r8)
   17ed0:	46bd      	mov	sp, r7
   17ed2:	b003      	add	sp, #12
   17ed4:	bd90      	pop	{r4, r7, pc}
   17ed6:	46c0      	nop			; (mov r8, r8)
   17ed8:	20000630 	.word	0x20000630
   17edc:	0001be15 	.word	0x0001be15
   17ee0:	00037c34 	.word	0x00037c34
   17ee4:	20000030 	.word	0x20000030
   17ee8:	000359d9 	.word	0x000359d9
   17eec:	00035b37 	.word	0x00035b37
   17ef0:	00037af8 	.word	0x00037af8
   17ef4:	20000898 	.word	0x20000898
   17ef8:	0003072d 	.word	0x0003072d

00017efc <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17efc:	b590      	push	{r4, r7, lr}
   17efe:	b08b      	sub	sp, #44	; 0x2c
   17f00:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17f02:	4b39      	ldr	r3, [pc, #228]	; (17fe8 <MQTT_HandleGameMessages+0xec>)
   17f04:	681b      	ldr	r3, [r3, #0]
   17f06:	2208      	movs	r2, #8
   17f08:	18b9      	adds	r1, r7, r2
   17f0a:	2200      	movs	r2, #0
   17f0c:	0018      	movs	r0, r3
   17f0e:	4b37      	ldr	r3, [pc, #220]	; (17fec <MQTT_HandleGameMessages+0xf0>)
   17f10:	4798      	blx	r3
   17f12:	0003      	movs	r3, r0
   17f14:	2b01      	cmp	r3, #1
   17f16:	d163      	bne.n	17fe0 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17f18:	4b35      	ldr	r3, [pc, #212]	; (17ff0 <MQTT_HandleGameMessages+0xf4>)
   17f1a:	4a36      	ldr	r2, [pc, #216]	; (17ff4 <MQTT_HandleGameMessages+0xf8>)
   17f1c:	ca03      	ldmia	r2!, {r0, r1}
   17f1e:	c303      	stmia	r3!, {r0, r1}
   17f20:	8812      	ldrh	r2, [r2, #0]
   17f22:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17f24:	2300      	movs	r3, #0
   17f26:	61fb      	str	r3, [r7, #28]
   17f28:	e02d      	b.n	17f86 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   17f2a:	2308      	movs	r3, #8
   17f2c:	18fa      	adds	r2, r7, r3
   17f2e:	69fb      	ldr	r3, [r7, #28]
   17f30:	18d3      	adds	r3, r2, r3
   17f32:	781b      	ldrb	r3, [r3, #0]
   17f34:	2bff      	cmp	r3, #255	; 0xff
   17f36:	d02a      	beq.n	17f8e <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17f38:	2308      	movs	r3, #8
   17f3a:	18fa      	adds	r2, r7, r3
   17f3c:	69fb      	ldr	r3, [r7, #28]
   17f3e:	18d3      	adds	r3, r2, r3
   17f40:	781b      	ldrb	r3, [r3, #0]
   17f42:	4a2d      	ldr	r2, [pc, #180]	; (17ff8 <MQTT_HandleGameMessages+0xfc>)
   17f44:	0038      	movs	r0, r7
   17f46:	2103      	movs	r1, #3
   17f48:	4c2c      	ldr	r4, [pc, #176]	; (17ffc <MQTT_HandleGameMessages+0x100>)
   17f4a:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17f4c:	003a      	movs	r2, r7
   17f4e:	4b28      	ldr	r3, [pc, #160]	; (17ff0 <MQTT_HandleGameMessages+0xf4>)
   17f50:	0011      	movs	r1, r2
   17f52:	0018      	movs	r0, r3
   17f54:	4b2a      	ldr	r3, [pc, #168]	; (18000 <MQTT_HandleGameMessages+0x104>)
   17f56:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17f58:	69fb      	ldr	r3, [r7, #28]
   17f5a:	3301      	adds	r3, #1
   17f5c:	2208      	movs	r2, #8
   17f5e:	18ba      	adds	r2, r7, r2
   17f60:	5cd3      	ldrb	r3, [r2, r3]
   17f62:	2bff      	cmp	r3, #255	; 0xff
   17f64:	d00c      	beq.n	17f80 <MQTT_HandleGameMessages+0x84>
   17f66:	69fb      	ldr	r3, [r7, #28]
   17f68:	3301      	adds	r3, #1
   17f6a:	2b13      	cmp	r3, #19
   17f6c:	dc08      	bgt.n	17f80 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17f6e:	003b      	movs	r3, r7
   17f70:	222c      	movs	r2, #44	; 0x2c
   17f72:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17f74:	003a      	movs	r2, r7
   17f76:	4b1e      	ldr	r3, [pc, #120]	; (17ff0 <MQTT_HandleGameMessages+0xf4>)
   17f78:	0011      	movs	r1, r2
   17f7a:	0018      	movs	r0, r3
   17f7c:	4b20      	ldr	r3, [pc, #128]	; (18000 <MQTT_HandleGameMessages+0x104>)
   17f7e:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17f80:	69fb      	ldr	r3, [r7, #28]
   17f82:	3301      	adds	r3, #1
   17f84:	61fb      	str	r3, [r7, #28]
   17f86:	69fb      	ldr	r3, [r7, #28]
   17f88:	2b13      	cmp	r3, #19
   17f8a:	ddce      	ble.n	17f2a <MQTT_HandleGameMessages+0x2e>
   17f8c:	e000      	b.n	17f90 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17f8e:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17f90:	4b17      	ldr	r3, [pc, #92]	; (17ff0 <MQTT_HandleGameMessages+0xf4>)
   17f92:	0018      	movs	r0, r3
   17f94:	4b1b      	ldr	r3, [pc, #108]	; (18004 <MQTT_HandleGameMessages+0x108>)
   17f96:	4798      	blx	r3
   17f98:	0003      	movs	r3, r0
   17f9a:	001a      	movs	r2, r3
   17f9c:	4b14      	ldr	r3, [pc, #80]	; (17ff0 <MQTT_HandleGameMessages+0xf4>)
   17f9e:	18d2      	adds	r2, r2, r3
   17fa0:	4b19      	ldr	r3, [pc, #100]	; (18008 <MQTT_HandleGameMessages+0x10c>)
   17fa2:	0010      	movs	r0, r2
   17fa4:	0019      	movs	r1, r3
   17fa6:	2303      	movs	r3, #3
   17fa8:	001a      	movs	r2, r3
   17faa:	4b18      	ldr	r3, [pc, #96]	; (1800c <MQTT_HandleGameMessages+0x110>)
   17fac:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17fae:	4b10      	ldr	r3, [pc, #64]	; (17ff0 <MQTT_HandleGameMessages+0xf4>)
   17fb0:	0019      	movs	r1, r3
   17fb2:	2001      	movs	r0, #1
   17fb4:	4b16      	ldr	r3, [pc, #88]	; (18010 <MQTT_HandleGameMessages+0x114>)
   17fb6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17fb8:	4b16      	ldr	r3, [pc, #88]	; (18014 <MQTT_HandleGameMessages+0x118>)
   17fba:	0019      	movs	r1, r3
   17fbc:	2001      	movs	r0, #1
   17fbe:	4b14      	ldr	r3, [pc, #80]	; (18010 <MQTT_HandleGameMessages+0x114>)
   17fc0:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17fc2:	4b0b      	ldr	r3, [pc, #44]	; (17ff0 <MQTT_HandleGameMessages+0xf4>)
   17fc4:	0018      	movs	r0, r3
   17fc6:	4b0f      	ldr	r3, [pc, #60]	; (18004 <MQTT_HandleGameMessages+0x108>)
   17fc8:	4798      	blx	r3
   17fca:	0004      	movs	r4, r0
   17fcc:	4a08      	ldr	r2, [pc, #32]	; (17ff0 <MQTT_HandleGameMessages+0xf4>)
   17fce:	4912      	ldr	r1, [pc, #72]	; (18018 <MQTT_HandleGameMessages+0x11c>)
   17fd0:	4812      	ldr	r0, [pc, #72]	; (1801c <MQTT_HandleGameMessages+0x120>)
   17fd2:	2300      	movs	r3, #0
   17fd4:	9301      	str	r3, [sp, #4]
   17fd6:	2301      	movs	r3, #1
   17fd8:	9300      	str	r3, [sp, #0]
   17fda:	0023      	movs	r3, r4
   17fdc:	4c10      	ldr	r4, [pc, #64]	; (18020 <MQTT_HandleGameMessages+0x124>)
   17fde:	47a0      	blx	r4
    }
}
   17fe0:	46c0      	nop			; (mov r8, r8)
   17fe2:	46bd      	mov	sp, r7
   17fe4:	b009      	add	sp, #36	; 0x24
   17fe6:	bd90      	pop	{r4, r7, pc}
   17fe8:	2000062c 	.word	0x2000062c
   17fec:	0001be15 	.word	0x0001be15
   17ff0:	20000030 	.word	0x20000030
   17ff4:	0003792c 	.word	0x0003792c
   17ff8:	00037c58 	.word	0x00037c58
   17ffc:	000359d9 	.word	0x000359d9
   18000:	00035abd 	.word	0x00035abd
   18004:	00035b37 	.word	0x00035b37
   18008:	00037c5c 	.word	0x00037c5c
   1800c:	00035749 	.word	0x00035749
   18010:	0001ed01 	.word	0x0001ed01
   18014:	00037c60 	.word	0x00037c60
   18018:	00037c64 	.word	0x00037c64
   1801c:	20000898 	.word	0x20000898
   18020:	0003072d 	.word	0x0003072d

00018024 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   18024:	b590      	push	{r4, r7, lr}
   18026:	b08d      	sub	sp, #52	; 0x34
   18028:	af02      	add	r7, sp, #8
   1802a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   1802c:	2064      	movs	r0, #100	; 0x64
   1802e:	4b79      	ldr	r3, [pc, #484]	; (18214 <vWifiTask+0x1f0>)
   18030:	4798      	blx	r3
    init_state();
   18032:	4b79      	ldr	r3, [pc, #484]	; (18218 <vWifiTask+0x1f4>)
   18034:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   18036:	2200      	movs	r2, #0
   18038:	2104      	movs	r1, #4
   1803a:	2005      	movs	r0, #5
   1803c:	4b77      	ldr	r3, [pc, #476]	; (1821c <vWifiTask+0x1f8>)
   1803e:	4798      	blx	r3
   18040:	0002      	movs	r2, r0
   18042:	4b77      	ldr	r3, [pc, #476]	; (18220 <vWifiTask+0x1fc>)
   18044:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   18046:	2200      	movs	r2, #0
   18048:	2106      	movs	r1, #6
   1804a:	2005      	movs	r0, #5
   1804c:	4b73      	ldr	r3, [pc, #460]	; (1821c <vWifiTask+0x1f8>)
   1804e:	4798      	blx	r3
   18050:	0002      	movs	r2, r0
   18052:	4b74      	ldr	r3, [pc, #464]	; (18224 <vWifiTask+0x200>)
   18054:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   18056:	2200      	movs	r2, #0
   18058:	2114      	movs	r1, #20
   1805a:	2002      	movs	r0, #2
   1805c:	4b6f      	ldr	r3, [pc, #444]	; (1821c <vWifiTask+0x1f8>)
   1805e:	4798      	blx	r3
   18060:	0002      	movs	r2, r0
   18062:	4b71      	ldr	r3, [pc, #452]	; (18228 <vWifiTask+0x204>)
   18064:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   18066:	2200      	movs	r2, #0
   18068:	2102      	movs	r1, #2
   1806a:	2005      	movs	r0, #5
   1806c:	4b6b      	ldr	r3, [pc, #428]	; (1821c <vWifiTask+0x1f8>)
   1806e:	4798      	blx	r3
   18070:	0002      	movs	r2, r0
   18072:	4b6e      	ldr	r3, [pc, #440]	; (1822c <vWifiTask+0x208>)
   18074:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   18076:	4b6a      	ldr	r3, [pc, #424]	; (18220 <vWifiTask+0x1fc>)
   18078:	681b      	ldr	r3, [r3, #0]
   1807a:	2b00      	cmp	r3, #0
   1807c:	d00b      	beq.n	18096 <vWifiTask+0x72>
   1807e:	4b69      	ldr	r3, [pc, #420]	; (18224 <vWifiTask+0x200>)
   18080:	681b      	ldr	r3, [r3, #0]
   18082:	2b00      	cmp	r3, #0
   18084:	d007      	beq.n	18096 <vWifiTask+0x72>
   18086:	4b68      	ldr	r3, [pc, #416]	; (18228 <vWifiTask+0x204>)
   18088:	681b      	ldr	r3, [r3, #0]
   1808a:	2b00      	cmp	r3, #0
   1808c:	d003      	beq.n	18096 <vWifiTask+0x72>
   1808e:	4b67      	ldr	r3, [pc, #412]	; (1822c <vWifiTask+0x208>)
   18090:	681b      	ldr	r3, [r3, #0]
   18092:	2b00      	cmp	r3, #0
   18094:	d103      	bne.n	1809e <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   18096:	4b66      	ldr	r3, [pc, #408]	; (18230 <vWifiTask+0x20c>)
   18098:	0018      	movs	r0, r3
   1809a:	4b66      	ldr	r3, [pc, #408]	; (18234 <vWifiTask+0x210>)
   1809c:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1809e:	4b66      	ldr	r3, [pc, #408]	; (18238 <vWifiTask+0x214>)
   180a0:	0018      	movs	r0, r3
   180a2:	4b64      	ldr	r3, [pc, #400]	; (18234 <vWifiTask+0x210>)
   180a4:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   180a6:	4b65      	ldr	r3, [pc, #404]	; (1823c <vWifiTask+0x218>)
   180a8:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   180aa:	4b65      	ldr	r3, [pc, #404]	; (18240 <vWifiTask+0x21c>)
   180ac:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   180ae:	4b65      	ldr	r3, [pc, #404]	; (18244 <vWifiTask+0x220>)
   180b0:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   180b2:	4b65      	ldr	r3, [pc, #404]	; (18248 <vWifiTask+0x224>)
   180b4:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   180b6:	4b65      	ldr	r3, [pc, #404]	; (1824c <vWifiTask+0x228>)
   180b8:	4798      	blx	r3
    configure_extint_callbacks();
   180ba:	4b65      	ldr	r3, [pc, #404]	; (18250 <vWifiTask+0x22c>)
   180bc:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   180be:	230c      	movs	r3, #12
   180c0:	18fb      	adds	r3, r7, r3
   180c2:	2218      	movs	r2, #24
   180c4:	2100      	movs	r1, #0
   180c6:	0018      	movs	r0, r3
   180c8:	4b62      	ldr	r3, [pc, #392]	; (18254 <vWifiTask+0x230>)
   180ca:	4798      	blx	r3

    nm_bsp_init();
   180cc:	4b62      	ldr	r3, [pc, #392]	; (18258 <vWifiTask+0x234>)
   180ce:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   180d0:	230c      	movs	r3, #12
   180d2:	18fb      	adds	r3, r7, r3
   180d4:	4a61      	ldr	r2, [pc, #388]	; (1825c <vWifiTask+0x238>)
   180d6:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   180d8:	2327      	movs	r3, #39	; 0x27
   180da:	18fc      	adds	r4, r7, r3
   180dc:	230c      	movs	r3, #12
   180de:	18fb      	adds	r3, r7, r3
   180e0:	0018      	movs	r0, r3
   180e2:	4b5f      	ldr	r3, [pc, #380]	; (18260 <vWifiTask+0x23c>)
   180e4:	4798      	blx	r3
   180e6:	0003      	movs	r3, r0
   180e8:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   180ea:	2327      	movs	r3, #39	; 0x27
   180ec:	18fb      	adds	r3, r7, r3
   180ee:	781b      	ldrb	r3, [r3, #0]
   180f0:	b25b      	sxtb	r3, r3
   180f2:	2b00      	cmp	r3, #0
   180f4:	d009      	beq.n	1810a <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   180f6:	2327      	movs	r3, #39	; 0x27
   180f8:	18fb      	adds	r3, r7, r3
   180fa:	2200      	movs	r2, #0
   180fc:	569a      	ldrsb	r2, [r3, r2]
   180fe:	4b59      	ldr	r3, [pc, #356]	; (18264 <vWifiTask+0x240>)
   18100:	0019      	movs	r1, r3
   18102:	2001      	movs	r0, #1
   18104:	4b58      	ldr	r3, [pc, #352]	; (18268 <vWifiTask+0x244>)
   18106:	4798      	blx	r3
        while (1) {
   18108:	e7fe      	b.n	18108 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1810a:	4a58      	ldr	r2, [pc, #352]	; (1826c <vWifiTask+0x248>)
   1810c:	4b58      	ldr	r3, [pc, #352]	; (18270 <vWifiTask+0x24c>)
   1810e:	0019      	movs	r1, r3
   18110:	2001      	movs	r0, #1
   18112:	4b55      	ldr	r3, [pc, #340]	; (18268 <vWifiTask+0x244>)
   18114:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   18116:	4b57      	ldr	r3, [pc, #348]	; (18274 <vWifiTask+0x250>)
   18118:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1811a:	4a57      	ldr	r2, [pc, #348]	; (18278 <vWifiTask+0x254>)
   1811c:	4b57      	ldr	r3, [pc, #348]	; (1827c <vWifiTask+0x258>)
   1811e:	0011      	movs	r1, r2
   18120:	0018      	movs	r0, r3
   18122:	4b57      	ldr	r3, [pc, #348]	; (18280 <vWifiTask+0x25c>)
   18124:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   18126:	4a57      	ldr	r2, [pc, #348]	; (18284 <vWifiTask+0x260>)
   18128:	4850      	ldr	r0, [pc, #320]	; (1826c <vWifiTask+0x248>)
   1812a:	23ff      	movs	r3, #255	; 0xff
   1812c:	9300      	str	r3, [sp, #0]
   1812e:	0013      	movs	r3, r2
   18130:	2202      	movs	r2, #2
   18132:	2105      	movs	r1, #5
   18134:	4c54      	ldr	r4, [pc, #336]	; (18288 <vWifiTask+0x264>)
   18136:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   18138:	e006      	b.n	18148 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1813a:	2000      	movs	r0, #0
   1813c:	4b53      	ldr	r3, [pc, #332]	; (1828c <vWifiTask+0x268>)
   1813e:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   18140:	4b53      	ldr	r3, [pc, #332]	; (18290 <vWifiTask+0x26c>)
   18142:	0018      	movs	r0, r3
   18144:	4b53      	ldr	r3, [pc, #332]	; (18294 <vWifiTask+0x270>)
   18146:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   18148:	2002      	movs	r0, #2
   1814a:	4b53      	ldr	r3, [pc, #332]	; (18298 <vWifiTask+0x274>)
   1814c:	4798      	blx	r3
   1814e:	0003      	movs	r3, r0
   18150:	001a      	movs	r2, r3
   18152:	2301      	movs	r3, #1
   18154:	4053      	eors	r3, r2
   18156:	b2db      	uxtb	r3, r3
   18158:	2b00      	cmp	r3, #0
   1815a:	d1ee      	bne.n	1813a <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   1815c:	23fa      	movs	r3, #250	; 0xfa
   1815e:	009b      	lsls	r3, r3, #2
   18160:	0018      	movs	r0, r3
   18162:	4b2c      	ldr	r3, [pc, #176]	; (18214 <vWifiTask+0x1f0>)
   18164:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   18166:	4b4d      	ldr	r3, [pc, #308]	; (1829c <vWifiTask+0x278>)
   18168:	2201      	movs	r2, #1
   1816a:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   1816c:	4b4b      	ldr	r3, [pc, #300]	; (1829c <vWifiTask+0x278>)
   1816e:	781b      	ldrb	r3, [r3, #0]
   18170:	b25b      	sxtb	r3, r3
   18172:	2b01      	cmp	r3, #1
   18174:	d00b      	beq.n	1818e <vWifiTask+0x16a>
   18176:	dc02      	bgt.n	1817e <vWifiTask+0x15a>
   18178:	2b00      	cmp	r3, #0
   1817a:	d005      	beq.n	18188 <vWifiTask+0x164>
   1817c:	e010      	b.n	181a0 <vWifiTask+0x17c>
   1817e:	2b02      	cmp	r3, #2
   18180:	d008      	beq.n	18194 <vWifiTask+0x170>
   18182:	2b03      	cmp	r3, #3
   18184:	d009      	beq.n	1819a <vWifiTask+0x176>
   18186:	e00b      	b.n	181a0 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   18188:	4b45      	ldr	r3, [pc, #276]	; (182a0 <vWifiTask+0x27c>)
   1818a:	4798      	blx	r3

                break;
   1818c:	e00c      	b.n	181a8 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1818e:	4b45      	ldr	r3, [pc, #276]	; (182a4 <vWifiTask+0x280>)
   18190:	4798      	blx	r3
                break;
   18192:	e009      	b.n	181a8 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   18194:	4b44      	ldr	r3, [pc, #272]	; (182a8 <vWifiTask+0x284>)
   18196:	4798      	blx	r3
                break;
   18198:	e006      	b.n	181a8 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   1819a:	4b44      	ldr	r3, [pc, #272]	; (182ac <vWifiTask+0x288>)
   1819c:	4798      	blx	r3
                break;
   1819e:	e003      	b.n	181a8 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   181a0:	4b3e      	ldr	r3, [pc, #248]	; (1829c <vWifiTask+0x278>)
   181a2:	2200      	movs	r2, #0
   181a4:	701a      	strb	r2, [r3, #0]
                break;
   181a6:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   181a8:	230b      	movs	r3, #11
   181aa:	18fb      	adds	r3, r7, r3
   181ac:	2200      	movs	r2, #0
   181ae:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   181b0:	4b1b      	ldr	r3, [pc, #108]	; (18220 <vWifiTask+0x1fc>)
   181b2:	681b      	ldr	r3, [r3, #0]
   181b4:	220b      	movs	r2, #11
   181b6:	18b9      	adds	r1, r7, r2
   181b8:	2200      	movs	r2, #0
   181ba:	0018      	movs	r0, r3
   181bc:	4b3c      	ldr	r3, [pc, #240]	; (182b0 <vWifiTask+0x28c>)
   181be:	4798      	blx	r3
   181c0:	0003      	movs	r3, r0
   181c2:	2b01      	cmp	r3, #1
   181c4:	d105      	bne.n	181d2 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   181c6:	230b      	movs	r3, #11
   181c8:	18fb      	adds	r3, r7, r3
   181ca:	781b      	ldrb	r3, [r3, #0]
   181cc:	b25a      	sxtb	r2, r3
   181ce:	4b33      	ldr	r3, [pc, #204]	; (1829c <vWifiTask+0x278>)
   181d0:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   181d2:	4b38      	ldr	r3, [pc, #224]	; (182b4 <vWifiTask+0x290>)
   181d4:	781b      	ldrb	r3, [r3, #0]
   181d6:	b2db      	uxtb	r3, r3
   181d8:	2b00      	cmp	r3, #0
   181da:	d017      	beq.n	1820c <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   181dc:	4b36      	ldr	r3, [pc, #216]	; (182b8 <vWifiTask+0x294>)
   181de:	0018      	movs	r0, r3
   181e0:	4b36      	ldr	r3, [pc, #216]	; (182bc <vWifiTask+0x298>)
   181e2:	4798      	blx	r3
   181e4:	0004      	movs	r4, r0
   181e6:	4a34      	ldr	r2, [pc, #208]	; (182b8 <vWifiTask+0x294>)
   181e8:	4935      	ldr	r1, [pc, #212]	; (182c0 <vWifiTask+0x29c>)
   181ea:	4836      	ldr	r0, [pc, #216]	; (182c4 <vWifiTask+0x2a0>)
   181ec:	2300      	movs	r3, #0
   181ee:	9301      	str	r3, [sp, #4]
   181f0:	2301      	movs	r3, #1
   181f2:	9300      	str	r3, [sp, #0]
   181f4:	0023      	movs	r3, r4
   181f6:	4c34      	ldr	r4, [pc, #208]	; (182c8 <vWifiTask+0x2a4>)
   181f8:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   181fa:	4a2f      	ldr	r2, [pc, #188]	; (182b8 <vWifiTask+0x294>)
   181fc:	4b33      	ldr	r3, [pc, #204]	; (182cc <vWifiTask+0x2a8>)
   181fe:	0019      	movs	r1, r3
   18200:	2001      	movs	r0, #1
   18202:	4b19      	ldr	r3, [pc, #100]	; (18268 <vWifiTask+0x244>)
   18204:	4798      	blx	r3
            isPressed = false;
   18206:	4b2b      	ldr	r3, [pc, #172]	; (182b4 <vWifiTask+0x290>)
   18208:	2200      	movs	r2, #0
   1820a:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1820c:	2064      	movs	r0, #100	; 0x64
   1820e:	4b01      	ldr	r3, [pc, #4]	; (18214 <vWifiTask+0x1f0>)
   18210:	4798      	blx	r3
    while (1) {
   18212:	e7ab      	b.n	1816c <vWifiTask+0x148>
   18214:	0001cfc1 	.word	0x0001cfc1
   18218:	00016b69 	.word	0x00016b69
   1821c:	0001b2b5 	.word	0x0001b2b5
   18220:	20000628 	.word	0x20000628
   18224:	20000630 	.word	0x20000630
   18228:	2000062c 	.word	0x2000062c
   1822c:	20000634 	.word	0x20000634
   18230:	00037c78 	.word	0x00037c78
   18234:	0001ec15 	.word	0x0001ec15
   18238:	00037ca0 	.word	0x00037ca0
   1823c:	000175a5 	.word	0x000175a5
   18240:	000175e1 	.word	0x000175e1
   18244:	00017a8d 	.word	0x00017a8d
   18248:	000174c1 	.word	0x000174c1
   1824c:	00017b45 	.word	0x00017b45
   18250:	00017b85 	.word	0x00017b85
   18254:	0003577f 	.word	0x0003577f
   18258:	00021125 	.word	0x00021125
   1825c:	0001736d 	.word	0x0001736d
   18260:	00022bfd 	.word	0x00022bfd
   18264:	00037cbc 	.word	0x00037cbc
   18268:	0001ed01 	.word	0x0001ed01
   1826c:	00037760 	.word	0x00037760
   18270:	00037ce8 	.word	0x00037ce8
   18274:	00026285 	.word	0x00026285
   18278:	00017699 	.word	0x00017699
   1827c:	00017665 	.word	0x00017665
   18280:	0002631d 	.word	0x0002631d
   18284:	00037754 	.word	0x00037754
   18288:	00022d35 	.word	0x00022d35
   1828c:	00022d19 	.word	0x00022d19
   18290:	20004940 	.word	0x20004940
   18294:	0003340d 	.word	0x0003340d
   18298:	00016bd9 	.word	0x00016bd9
   1829c:	20000624 	.word	0x20000624
   182a0:	00017d85 	.word	0x00017d85
   182a4:	00017e21 	.word	0x00017e21
   182a8:	00017bfd 	.word	0x00017bfd
   182ac:	00017c91 	.word	0x00017c91
   182b0:	0001be15 	.word	0x0001be15
   182b4:	20000cd0 	.word	0x20000cd0
   182b8:	20000070 	.word	0x20000070
   182bc:	00035b37 	.word	0x00035b37
   182c0:	00037d0c 	.word	0x00037d0c
   182c4:	20000898 	.word	0x20000898
   182c8:	0003072d 	.word	0x0003072d
   182cc:	00037d28 	.word	0x00037d28

000182d0 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   182d0:	b590      	push	{r4, r7, lr}
   182d2:	b083      	sub	sp, #12
   182d4:	af00      	add	r7, sp, #0
   182d6:	0002      	movs	r2, r0
   182d8:	1dfb      	adds	r3, r7, #7
   182da:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   182dc:	1dfb      	adds	r3, r7, #7
   182de:	781b      	ldrb	r3, [r3, #0]
   182e0:	2b03      	cmp	r3, #3
   182e2:	d806      	bhi.n	182f2 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   182e4:	4b05      	ldr	r3, [pc, #20]	; (182fc <WifiHandlerSetState+0x2c>)
   182e6:	6818      	ldr	r0, [r3, #0]
   182e8:	1df9      	adds	r1, r7, #7
   182ea:	2300      	movs	r3, #0
   182ec:	220a      	movs	r2, #10
   182ee:	4c04      	ldr	r4, [pc, #16]	; (18300 <WifiHandlerSetState+0x30>)
   182f0:	47a0      	blx	r4
    }
}
   182f2:	46c0      	nop			; (mov r8, r8)
   182f4:	46bd      	mov	sp, r7
   182f6:	b003      	add	sp, #12
   182f8:	bd90      	pop	{r4, r7, pc}
   182fa:	46c0      	nop			; (mov r8, r8)
   182fc:	20000628 	.word	0x20000628
   18300:	0001b55d 	.word	0x0001b55d

00018304 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   18304:	b590      	push	{r4, r7, lr}
   18306:	b085      	sub	sp, #20
   18308:	af00      	add	r7, sp, #0
   1830a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   1830c:	4b06      	ldr	r3, [pc, #24]	; (18328 <WifiAddImuDataToQueue+0x24>)
   1830e:	6818      	ldr	r0, [r3, #0]
   18310:	6879      	ldr	r1, [r7, #4]
   18312:	2300      	movs	r3, #0
   18314:	220a      	movs	r2, #10
   18316:	4c05      	ldr	r4, [pc, #20]	; (1832c <WifiAddImuDataToQueue+0x28>)
   18318:	47a0      	blx	r4
   1831a:	0003      	movs	r3, r0
   1831c:	60fb      	str	r3, [r7, #12]
    return error;
   1831e:	68fb      	ldr	r3, [r7, #12]
}
   18320:	0018      	movs	r0, r3
   18322:	46bd      	mov	sp, r7
   18324:	b005      	add	sp, #20
   18326:	bd90      	pop	{r4, r7, pc}
   18328:	20000630 	.word	0x20000630
   1832c:	0001b55d 	.word	0x0001b55d

00018330 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   18330:	b590      	push	{r4, r7, lr}
   18332:	b085      	sub	sp, #20
   18334:	af00      	add	r7, sp, #0
   18336:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   18338:	4b06      	ldr	r3, [pc, #24]	; (18354 <WifiAddDistanceDataToQueue+0x24>)
   1833a:	6818      	ldr	r0, [r3, #0]
   1833c:	6879      	ldr	r1, [r7, #4]
   1833e:	2300      	movs	r3, #0
   18340:	220a      	movs	r2, #10
   18342:	4c05      	ldr	r4, [pc, #20]	; (18358 <WifiAddDistanceDataToQueue+0x28>)
   18344:	47a0      	blx	r4
   18346:	0003      	movs	r3, r0
   18348:	60fb      	str	r3, [r7, #12]
    return error;
   1834a:	68fb      	ldr	r3, [r7, #12]
}
   1834c:	0018      	movs	r0, r3
   1834e:	46bd      	mov	sp, r7
   18350:	b005      	add	sp, #20
   18352:	bd90      	pop	{r4, r7, pc}
   18354:	20000634 	.word	0x20000634
   18358:	0001b55d 	.word	0x0001b55d

0001835c <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   1835c:	b590      	push	{r4, r7, lr}
   1835e:	b085      	sub	sp, #20
   18360:	af00      	add	r7, sp, #0
   18362:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   18364:	4b06      	ldr	r3, [pc, #24]	; (18380 <WifiAddGameDataToQueue+0x24>)
   18366:	6818      	ldr	r0, [r3, #0]
   18368:	6879      	ldr	r1, [r7, #4]
   1836a:	2300      	movs	r3, #0
   1836c:	220a      	movs	r2, #10
   1836e:	4c05      	ldr	r4, [pc, #20]	; (18384 <WifiAddGameDataToQueue+0x28>)
   18370:	47a0      	blx	r4
   18372:	0003      	movs	r3, r0
   18374:	60fb      	str	r3, [r7, #12]
    return error;
   18376:	68fb      	ldr	r3, [r7, #12]
}
   18378:	0018      	movs	r0, r3
   1837a:	46bd      	mov	sp, r7
   1837c:	b005      	add	sp, #20
   1837e:	bd90      	pop	{r4, r7, pc}
   18380:	2000062c 	.word	0x2000062c
   18384:	0001b55d 	.word	0x0001b55d

00018388 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   18388:	b580      	push	{r7, lr}
   1838a:	b082      	sub	sp, #8
   1838c:	af00      	add	r7, sp, #0
   1838e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   18390:	687b      	ldr	r3, [r7, #4]
   18392:	2200      	movs	r2, #0
   18394:	701a      	strb	r2, [r3, #0]
}
   18396:	46c0      	nop			; (mov r8, r8)
   18398:	46bd      	mov	sp, r7
   1839a:	b002      	add	sp, #8
   1839c:	bd80      	pop	{r7, pc}
	...

000183a0 <system_apb_clock_set_mask>:
{
   183a0:	b580      	push	{r7, lr}
   183a2:	b082      	sub	sp, #8
   183a4:	af00      	add	r7, sp, #0
   183a6:	0002      	movs	r2, r0
   183a8:	6039      	str	r1, [r7, #0]
   183aa:	1dfb      	adds	r3, r7, #7
   183ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   183ae:	1dfb      	adds	r3, r7, #7
   183b0:	781b      	ldrb	r3, [r3, #0]
   183b2:	2b01      	cmp	r3, #1
   183b4:	d00a      	beq.n	183cc <system_apb_clock_set_mask+0x2c>
   183b6:	2b02      	cmp	r3, #2
   183b8:	d00f      	beq.n	183da <system_apb_clock_set_mask+0x3a>
   183ba:	2b00      	cmp	r3, #0
   183bc:	d114      	bne.n	183e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   183be:	4b0e      	ldr	r3, [pc, #56]	; (183f8 <system_apb_clock_set_mask+0x58>)
   183c0:	4a0d      	ldr	r2, [pc, #52]	; (183f8 <system_apb_clock_set_mask+0x58>)
   183c2:	6991      	ldr	r1, [r2, #24]
   183c4:	683a      	ldr	r2, [r7, #0]
   183c6:	430a      	orrs	r2, r1
   183c8:	619a      	str	r2, [r3, #24]
			break;
   183ca:	e00f      	b.n	183ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   183cc:	4b0a      	ldr	r3, [pc, #40]	; (183f8 <system_apb_clock_set_mask+0x58>)
   183ce:	4a0a      	ldr	r2, [pc, #40]	; (183f8 <system_apb_clock_set_mask+0x58>)
   183d0:	69d1      	ldr	r1, [r2, #28]
   183d2:	683a      	ldr	r2, [r7, #0]
   183d4:	430a      	orrs	r2, r1
   183d6:	61da      	str	r2, [r3, #28]
			break;
   183d8:	e008      	b.n	183ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   183da:	4b07      	ldr	r3, [pc, #28]	; (183f8 <system_apb_clock_set_mask+0x58>)
   183dc:	4a06      	ldr	r2, [pc, #24]	; (183f8 <system_apb_clock_set_mask+0x58>)
   183de:	6a11      	ldr	r1, [r2, #32]
   183e0:	683a      	ldr	r2, [r7, #0]
   183e2:	430a      	orrs	r2, r1
   183e4:	621a      	str	r2, [r3, #32]
			break;
   183e6:	e001      	b.n	183ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   183e8:	2317      	movs	r3, #23
   183ea:	e000      	b.n	183ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   183ec:	2300      	movs	r3, #0
}
   183ee:	0018      	movs	r0, r3
   183f0:	46bd      	mov	sp, r7
   183f2:	b002      	add	sp, #8
   183f4:	bd80      	pop	{r7, pc}
   183f6:	46c0      	nop			; (mov r8, r8)
   183f8:	40000400 	.word	0x40000400

000183fc <system_pinmux_get_config_defaults>:
{
   183fc:	b580      	push	{r7, lr}
   183fe:	b082      	sub	sp, #8
   18400:	af00      	add	r7, sp, #0
   18402:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   18404:	687b      	ldr	r3, [r7, #4]
   18406:	2280      	movs	r2, #128	; 0x80
   18408:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1840a:	687b      	ldr	r3, [r7, #4]
   1840c:	2200      	movs	r2, #0
   1840e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   18410:	687b      	ldr	r3, [r7, #4]
   18412:	2201      	movs	r2, #1
   18414:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   18416:	687b      	ldr	r3, [r7, #4]
   18418:	2200      	movs	r2, #0
   1841a:	70da      	strb	r2, [r3, #3]
}
   1841c:	46c0      	nop			; (mov r8, r8)
   1841e:	46bd      	mov	sp, r7
   18420:	b002      	add	sp, #8
   18422:	bd80      	pop	{r7, pc}

00018424 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   18424:	b580      	push	{r7, lr}
   18426:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   18428:	4b05      	ldr	r3, [pc, #20]	; (18440 <system_is_debugger_present+0x1c>)
   1842a:	789b      	ldrb	r3, [r3, #2]
   1842c:	b2db      	uxtb	r3, r3
   1842e:	001a      	movs	r2, r3
   18430:	2302      	movs	r3, #2
   18432:	4013      	ands	r3, r2
   18434:	1e5a      	subs	r2, r3, #1
   18436:	4193      	sbcs	r3, r2
   18438:	b2db      	uxtb	r3, r3
}
   1843a:	0018      	movs	r0, r3
   1843c:	46bd      	mov	sp, r7
   1843e:	bd80      	pop	{r7, pc}
   18440:	41002000 	.word	0x41002000

00018444 <system_interrupt_enter_critical_section>:
{
   18444:	b580      	push	{r7, lr}
   18446:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   18448:	4b02      	ldr	r3, [pc, #8]	; (18454 <system_interrupt_enter_critical_section+0x10>)
   1844a:	4798      	blx	r3
}
   1844c:	46c0      	nop			; (mov r8, r8)
   1844e:	46bd      	mov	sp, r7
   18450:	bd80      	pop	{r7, pc}
   18452:	46c0      	nop			; (mov r8, r8)
   18454:	00026f7d 	.word	0x00026f7d

00018458 <system_interrupt_leave_critical_section>:
{
   18458:	b580      	push	{r7, lr}
   1845a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1845c:	4b02      	ldr	r3, [pc, #8]	; (18468 <system_interrupt_leave_critical_section+0x10>)
   1845e:	4798      	blx	r3
}
   18460:	46c0      	nop			; (mov r8, r8)
   18462:	46bd      	mov	sp, r7
   18464:	bd80      	pop	{r7, pc}
   18466:	46c0      	nop			; (mov r8, r8)
   18468:	00026fd1 	.word	0x00026fd1

0001846c <system_interrupt_disable>:
{
   1846c:	b580      	push	{r7, lr}
   1846e:	b082      	sub	sp, #8
   18470:	af00      	add	r7, sp, #0
   18472:	0002      	movs	r2, r0
   18474:	1dfb      	adds	r3, r7, #7
   18476:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   18478:	4a07      	ldr	r2, [pc, #28]	; (18498 <system_interrupt_disable+0x2c>)
   1847a:	1dfb      	adds	r3, r7, #7
   1847c:	781b      	ldrb	r3, [r3, #0]
   1847e:	0019      	movs	r1, r3
   18480:	231f      	movs	r3, #31
   18482:	400b      	ands	r3, r1
   18484:	2101      	movs	r1, #1
   18486:	4099      	lsls	r1, r3
   18488:	000b      	movs	r3, r1
   1848a:	0019      	movs	r1, r3
   1848c:	2380      	movs	r3, #128	; 0x80
   1848e:	50d1      	str	r1, [r2, r3]
}
   18490:	46c0      	nop			; (mov r8, r8)
   18492:	46bd      	mov	sp, r7
   18494:	b002      	add	sp, #8
   18496:	bd80      	pop	{r7, pc}
   18498:	e000e100 	.word	0xe000e100

0001849c <i2c_master_is_syncing>:
{
   1849c:	b580      	push	{r7, lr}
   1849e:	b084      	sub	sp, #16
   184a0:	af00      	add	r7, sp, #0
   184a2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   184a4:	687b      	ldr	r3, [r7, #4]
   184a6:	681b      	ldr	r3, [r3, #0]
   184a8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   184aa:	68fb      	ldr	r3, [r7, #12]
   184ac:	69db      	ldr	r3, [r3, #28]
   184ae:	2207      	movs	r2, #7
   184b0:	4013      	ands	r3, r2
   184b2:	1e5a      	subs	r2, r3, #1
   184b4:	4193      	sbcs	r3, r2
   184b6:	b2db      	uxtb	r3, r3
}
   184b8:	0018      	movs	r0, r3
   184ba:	46bd      	mov	sp, r7
   184bc:	b004      	add	sp, #16
   184be:	bd80      	pop	{r7, pc}

000184c0 <_i2c_master_wait_for_sync>:
{
   184c0:	b580      	push	{r7, lr}
   184c2:	b082      	sub	sp, #8
   184c4:	af00      	add	r7, sp, #0
   184c6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   184c8:	46c0      	nop			; (mov r8, r8)
   184ca:	687b      	ldr	r3, [r7, #4]
   184cc:	0018      	movs	r0, r3
   184ce:	4b04      	ldr	r3, [pc, #16]	; (184e0 <_i2c_master_wait_for_sync+0x20>)
   184d0:	4798      	blx	r3
   184d2:	1e03      	subs	r3, r0, #0
   184d4:	d1f9      	bne.n	184ca <_i2c_master_wait_for_sync+0xa>
}
   184d6:	46c0      	nop			; (mov r8, r8)
   184d8:	46bd      	mov	sp, r7
   184da:	b002      	add	sp, #8
   184dc:	bd80      	pop	{r7, pc}
   184de:	46c0      	nop			; (mov r8, r8)
   184e0:	0001849d 	.word	0x0001849d

000184e4 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   184e4:	b580      	push	{r7, lr}
   184e6:	b084      	sub	sp, #16
   184e8:	af00      	add	r7, sp, #0
   184ea:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   184ec:	687b      	ldr	r3, [r7, #4]
   184ee:	681b      	ldr	r3, [r3, #0]
   184f0:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   184f2:	687b      	ldr	r3, [r7, #4]
   184f4:	681b      	ldr	r3, [r3, #0]
   184f6:	0018      	movs	r0, r3
   184f8:	4b0d      	ldr	r3, [pc, #52]	; (18530 <i2c_master_disable+0x4c>)
   184fa:	4798      	blx	r3
   184fc:	0003      	movs	r3, r0
   184fe:	0018      	movs	r0, r3
   18500:	4b0c      	ldr	r3, [pc, #48]	; (18534 <i2c_master_disable+0x50>)
   18502:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   18504:	687b      	ldr	r3, [r7, #4]
   18506:	0018      	movs	r0, r3
   18508:	4b0b      	ldr	r3, [pc, #44]	; (18538 <i2c_master_disable+0x54>)
   1850a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1850c:	68fb      	ldr	r3, [r7, #12]
   1850e:	2283      	movs	r2, #131	; 0x83
   18510:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   18512:	68fb      	ldr	r3, [r7, #12]
   18514:	2283      	movs	r2, #131	; 0x83
   18516:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   18518:	68fb      	ldr	r3, [r7, #12]
   1851a:	681b      	ldr	r3, [r3, #0]
   1851c:	2202      	movs	r2, #2
   1851e:	4393      	bics	r3, r2
   18520:	001a      	movs	r2, r3
   18522:	68fb      	ldr	r3, [r7, #12]
   18524:	601a      	str	r2, [r3, #0]

}
   18526:	46c0      	nop			; (mov r8, r8)
   18528:	46bd      	mov	sp, r7
   1852a:	b004      	add	sp, #16
   1852c:	bd80      	pop	{r7, pc}
   1852e:	46c0      	nop			; (mov r8, r8)
   18530:	00028451 	.word	0x00028451
   18534:	0001846d 	.word	0x0001846d
   18538:	000184c1 	.word	0x000184c1

0001853c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   1853c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1853e:	b097      	sub	sp, #92	; 0x5c
   18540:	af00      	add	r7, sp, #0
   18542:	6178      	str	r0, [r7, #20]
   18544:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   18546:	2300      	movs	r3, #0
   18548:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1854a:	2300      	movs	r3, #0
   1854c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1854e:	2300      	movs	r3, #0
   18550:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   18552:	233b      	movs	r3, #59	; 0x3b
   18554:	2210      	movs	r2, #16
   18556:	4694      	mov	ip, r2
   18558:	44bc      	add	ip, r7
   1855a:	4463      	add	r3, ip
   1855c:	2200      	movs	r2, #0
   1855e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18560:	697b      	ldr	r3, [r7, #20]
   18562:	681b      	ldr	r3, [r3, #0]
   18564:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   18566:	697b      	ldr	r3, [r7, #20]
   18568:	681b      	ldr	r3, [r3, #0]
   1856a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   1856c:	2323      	movs	r3, #35	; 0x23
   1856e:	2210      	movs	r2, #16
   18570:	18ba      	adds	r2, r7, r2
   18572:	18d4      	adds	r4, r2, r3
   18574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18576:	0018      	movs	r0, r3
   18578:	4bc0      	ldr	r3, [pc, #768]	; (1887c <_i2c_master_set_config+0x340>)
   1857a:	4798      	blx	r3
   1857c:	0003      	movs	r3, r0
   1857e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   18580:	230c      	movs	r3, #12
   18582:	2210      	movs	r2, #16
   18584:	4694      	mov	ip, r2
   18586:	44bc      	add	ip, r7
   18588:	4463      	add	r3, ip
   1858a:	0018      	movs	r0, r3
   1858c:	4bbc      	ldr	r3, [pc, #752]	; (18880 <_i2c_master_set_config+0x344>)
   1858e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   18590:	693b      	ldr	r3, [r7, #16]
   18592:	69db      	ldr	r3, [r3, #28]
   18594:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   18596:	693b      	ldr	r3, [r7, #16]
   18598:	6a1b      	ldr	r3, [r3, #32]
   1859a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1859c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1859e:	2b00      	cmp	r3, #0
   185a0:	d106      	bne.n	185b0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   185a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   185a4:	2100      	movs	r1, #0
   185a6:	0018      	movs	r0, r3
   185a8:	4bb6      	ldr	r3, [pc, #728]	; (18884 <_i2c_master_set_config+0x348>)
   185aa:	4798      	blx	r3
   185ac:	0003      	movs	r3, r0
   185ae:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   185b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   185b2:	b2da      	uxtb	r2, r3
   185b4:	230c      	movs	r3, #12
   185b6:	2110      	movs	r1, #16
   185b8:	468c      	mov	ip, r1
   185ba:	44bc      	add	ip, r7
   185bc:	4463      	add	r3, ip
   185be:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   185c0:	230c      	movs	r3, #12
   185c2:	2210      	movs	r2, #16
   185c4:	4694      	mov	ip, r2
   185c6:	44bc      	add	ip, r7
   185c8:	4463      	add	r3, ip
   185ca:	2202      	movs	r2, #2
   185cc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   185ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   185d0:	0c1b      	lsrs	r3, r3, #16
   185d2:	b2db      	uxtb	r3, r3
   185d4:	220c      	movs	r2, #12
   185d6:	2110      	movs	r1, #16
   185d8:	468c      	mov	ip, r1
   185da:	44bc      	add	ip, r7
   185dc:	4462      	add	r2, ip
   185de:	0011      	movs	r1, r2
   185e0:	0018      	movs	r0, r3
   185e2:	4ba9      	ldr	r3, [pc, #676]	; (18888 <_i2c_master_set_config+0x34c>)
   185e4:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   185e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   185e8:	2b00      	cmp	r3, #0
   185ea:	d106      	bne.n	185fa <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   185ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   185ee:	2101      	movs	r1, #1
   185f0:	0018      	movs	r0, r3
   185f2:	4ba4      	ldr	r3, [pc, #656]	; (18884 <_i2c_master_set_config+0x348>)
   185f4:	4798      	blx	r3
   185f6:	0003      	movs	r3, r0
   185f8:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   185fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   185fc:	b2da      	uxtb	r2, r3
   185fe:	230c      	movs	r3, #12
   18600:	2110      	movs	r1, #16
   18602:	468c      	mov	ip, r1
   18604:	44bc      	add	ip, r7
   18606:	4463      	add	r3, ip
   18608:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1860a:	230c      	movs	r3, #12
   1860c:	2210      	movs	r2, #16
   1860e:	4694      	mov	ip, r2
   18610:	44bc      	add	ip, r7
   18612:	4463      	add	r3, ip
   18614:	2202      	movs	r2, #2
   18616:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   18618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1861a:	0c1b      	lsrs	r3, r3, #16
   1861c:	b2db      	uxtb	r3, r3
   1861e:	220c      	movs	r2, #12
   18620:	2110      	movs	r1, #16
   18622:	468c      	mov	ip, r1
   18624:	44bc      	add	ip, r7
   18626:	4462      	add	r2, ip
   18628:	0011      	movs	r1, r2
   1862a:	0018      	movs	r0, r3
   1862c:	4b96      	ldr	r3, [pc, #600]	; (18888 <_i2c_master_set_config+0x34c>)
   1862e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   18630:	693b      	ldr	r3, [r7, #16]
   18632:	8a9a      	ldrh	r2, [r3, #20]
   18634:	697b      	ldr	r3, [r7, #20]
   18636:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   18638:	693b      	ldr	r3, [r7, #16]
   1863a:	8ada      	ldrh	r2, [r3, #22]
   1863c:	697b      	ldr	r3, [r7, #20]
   1863e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   18640:	693b      	ldr	r3, [r7, #16]
   18642:	7e1b      	ldrb	r3, [r3, #24]
   18644:	2b00      	cmp	r3, #0
   18646:	d103      	bne.n	18650 <_i2c_master_set_config+0x114>
   18648:	4b90      	ldr	r3, [pc, #576]	; (1888c <_i2c_master_set_config+0x350>)
   1864a:	4798      	blx	r3
   1864c:	1e03      	subs	r3, r0, #0
   1864e:	d002      	beq.n	18656 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   18650:	2380      	movs	r3, #128	; 0x80
   18652:	657b      	str	r3, [r7, #84]	; 0x54
   18654:	e001      	b.n	1865a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   18656:	2300      	movs	r3, #0
   18658:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   1865a:	693b      	ldr	r3, [r7, #16]
   1865c:	691b      	ldr	r3, [r3, #16]
   1865e:	2b00      	cmp	r3, #0
   18660:	d004      	beq.n	1866c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   18662:	693b      	ldr	r3, [r7, #16]
   18664:	691b      	ldr	r3, [r3, #16]
   18666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18668:	4313      	orrs	r3, r2
   1866a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   1866c:	693b      	ldr	r3, [r7, #16]
   1866e:	689b      	ldr	r3, [r3, #8]
   18670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18672:	4313      	orrs	r3, r2
   18674:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   18676:	693b      	ldr	r3, [r7, #16]
   18678:	2224      	movs	r2, #36	; 0x24
   1867a:	5c9b      	ldrb	r3, [r3, r2]
   1867c:	2b00      	cmp	r3, #0
   1867e:	d004      	beq.n	1868a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   18680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18682:	2280      	movs	r2, #128	; 0x80
   18684:	05d2      	lsls	r2, r2, #23
   18686:	4313      	orrs	r3, r2
   18688:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1868a:	693b      	ldr	r3, [r7, #16]
   1868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1868e:	2b00      	cmp	r3, #0
   18690:	d004      	beq.n	1869c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   18692:	693b      	ldr	r3, [r7, #16]
   18694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18696:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18698:	4313      	orrs	r3, r2
   1869a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1869c:	693b      	ldr	r3, [r7, #16]
   1869e:	222c      	movs	r2, #44	; 0x2c
   186a0:	5c9b      	ldrb	r3, [r3, r2]
   186a2:	2b00      	cmp	r3, #0
   186a4:	d105      	bne.n	186b2 <_i2c_master_set_config+0x176>
   186a6:	693b      	ldr	r3, [r7, #16]
   186a8:	689a      	ldr	r2, [r3, #8]
   186aa:	2380      	movs	r3, #128	; 0x80
   186ac:	049b      	lsls	r3, r3, #18
   186ae:	429a      	cmp	r2, r3
   186b0:	d104      	bne.n	186bc <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   186b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   186b4:	2280      	movs	r2, #128	; 0x80
   186b6:	0512      	lsls	r2, r2, #20
   186b8:	4313      	orrs	r3, r2
   186ba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   186bc:	693b      	ldr	r3, [r7, #16]
   186be:	222d      	movs	r2, #45	; 0x2d
   186c0:	5c9b      	ldrb	r3, [r3, r2]
   186c2:	2b00      	cmp	r3, #0
   186c4:	d004      	beq.n	186d0 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   186c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   186c8:	2280      	movs	r2, #128	; 0x80
   186ca:	0412      	lsls	r2, r2, #16
   186cc:	4313      	orrs	r3, r2
   186ce:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   186d0:	693b      	ldr	r3, [r7, #16]
   186d2:	222e      	movs	r2, #46	; 0x2e
   186d4:	5c9b      	ldrb	r3, [r3, r2]
   186d6:	2b00      	cmp	r3, #0
   186d8:	d004      	beq.n	186e4 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   186da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   186dc:	2280      	movs	r2, #128	; 0x80
   186de:	03d2      	lsls	r2, r2, #15
   186e0:	4313      	orrs	r3, r2
   186e2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   186e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186e6:	681a      	ldr	r2, [r3, #0]
   186e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   186ea:	431a      	orrs	r2, r3
   186ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186ee:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   186f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186f2:	2280      	movs	r2, #128	; 0x80
   186f4:	0052      	lsls	r2, r2, #1
   186f6:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   186f8:	2323      	movs	r3, #35	; 0x23
   186fa:	2210      	movs	r2, #16
   186fc:	4694      	mov	ip, r2
   186fe:	44bc      	add	ip, r7
   18700:	4463      	add	r3, ip
   18702:	781b      	ldrb	r3, [r3, #0]
   18704:	3314      	adds	r3, #20
   18706:	b2db      	uxtb	r3, r3
   18708:	0018      	movs	r0, r3
   1870a:	4b61      	ldr	r3, [pc, #388]	; (18890 <_i2c_master_set_config+0x354>)
   1870c:	4798      	blx	r3
   1870e:	0003      	movs	r3, r0
   18710:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   18712:	693b      	ldr	r3, [r7, #16]
   18714:	681b      	ldr	r3, [r3, #0]
   18716:	22fa      	movs	r2, #250	; 0xfa
   18718:	0092      	lsls	r2, r2, #2
   1871a:	4353      	muls	r3, r2
   1871c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1871e:	693b      	ldr	r3, [r7, #16]
   18720:	685b      	ldr	r3, [r3, #4]
   18722:	22fa      	movs	r2, #250	; 0xfa
   18724:	0092      	lsls	r2, r2, #2
   18726:	4353      	muls	r3, r2
   18728:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1872a:	693b      	ldr	r3, [r7, #16]
   1872c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1872e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   18730:	4b58      	ldr	r3, [pc, #352]	; (18894 <_i2c_master_set_config+0x358>)
   18732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18734:	4798      	blx	r3
   18736:	0005      	movs	r5, r0
   18738:	000e      	movs	r6, r1
   1873a:	4b56      	ldr	r3, [pc, #344]	; (18894 <_i2c_master_set_config+0x358>)
   1873c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1873e:	4798      	blx	r3
   18740:	60b8      	str	r0, [r7, #8]
   18742:	60f9      	str	r1, [r7, #12]
   18744:	4b53      	ldr	r3, [pc, #332]	; (18894 <_i2c_master_set_config+0x358>)
   18746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18748:	4798      	blx	r3
   1874a:	4c53      	ldr	r4, [pc, #332]	; (18898 <_i2c_master_set_config+0x35c>)
   1874c:	4a53      	ldr	r2, [pc, #332]	; (1889c <_i2c_master_set_config+0x360>)
   1874e:	4b54      	ldr	r3, [pc, #336]	; (188a0 <_i2c_master_set_config+0x364>)
   18750:	47a0      	blx	r4
   18752:	0003      	movs	r3, r0
   18754:	000c      	movs	r4, r1
   18756:	603b      	str	r3, [r7, #0]
   18758:	607c      	str	r4, [r7, #4]
   1875a:	4b4e      	ldr	r3, [pc, #312]	; (18894 <_i2c_master_set_config+0x358>)
   1875c:	6a38      	ldr	r0, [r7, #32]
   1875e:	4798      	blx	r3
   18760:	0002      	movs	r2, r0
   18762:	000b      	movs	r3, r1
   18764:	4c4c      	ldr	r4, [pc, #304]	; (18898 <_i2c_master_set_config+0x35c>)
   18766:	6838      	ldr	r0, [r7, #0]
   18768:	6879      	ldr	r1, [r7, #4]
   1876a:	47a0      	blx	r4
   1876c:	0003      	movs	r3, r0
   1876e:	000c      	movs	r4, r1
   18770:	0018      	movs	r0, r3
   18772:	0021      	movs	r1, r4
   18774:	4c4b      	ldr	r4, [pc, #300]	; (188a4 <_i2c_master_set_config+0x368>)
   18776:	2200      	movs	r2, #0
   18778:	4b4b      	ldr	r3, [pc, #300]	; (188a8 <_i2c_master_set_config+0x36c>)
   1877a:	47a0      	blx	r4
   1877c:	0003      	movs	r3, r0
   1877e:	000c      	movs	r4, r1
   18780:	001a      	movs	r2, r3
   18782:	0023      	movs	r3, r4
   18784:	4c44      	ldr	r4, [pc, #272]	; (18898 <_i2c_master_set_config+0x35c>)
   18786:	68b8      	ldr	r0, [r7, #8]
   18788:	68f9      	ldr	r1, [r7, #12]
   1878a:	47a0      	blx	r4
   1878c:	0003      	movs	r3, r0
   1878e:	000c      	movs	r4, r1
   18790:	001a      	movs	r2, r3
   18792:	0023      	movs	r3, r4
   18794:	4c45      	ldr	r4, [pc, #276]	; (188ac <_i2c_master_set_config+0x370>)
   18796:	0028      	movs	r0, r5
   18798:	0031      	movs	r1, r6
   1879a:	47a0      	blx	r4
   1879c:	0003      	movs	r3, r0
   1879e:	000c      	movs	r4, r1
   187a0:	001d      	movs	r5, r3
   187a2:	0026      	movs	r6, r4
   187a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187a6:	005a      	lsls	r2, r3, #1
   187a8:	4b3a      	ldr	r3, [pc, #232]	; (18894 <_i2c_master_set_config+0x358>)
   187aa:	0010      	movs	r0, r2
   187ac:	4798      	blx	r3
   187ae:	0002      	movs	r2, r0
   187b0:	000b      	movs	r3, r1
   187b2:	4c3c      	ldr	r4, [pc, #240]	; (188a4 <_i2c_master_set_config+0x368>)
   187b4:	0028      	movs	r0, r5
   187b6:	0031      	movs	r1, r6
   187b8:	47a0      	blx	r4
   187ba:	0003      	movs	r3, r0
   187bc:	000c      	movs	r4, r1
   187be:	0018      	movs	r0, r3
   187c0:	0021      	movs	r1, r4
   187c2:	4c3a      	ldr	r4, [pc, #232]	; (188ac <_i2c_master_set_config+0x370>)
   187c4:	2200      	movs	r2, #0
   187c6:	4b3a      	ldr	r3, [pc, #232]	; (188b0 <_i2c_master_set_config+0x374>)
   187c8:	47a0      	blx	r4
   187ca:	0003      	movs	r3, r0
   187cc:	000c      	movs	r4, r1
   187ce:	001d      	movs	r5, r3
   187d0:	0026      	movs	r6, r4
   187d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187d4:	005a      	lsls	r2, r3, #1
   187d6:	4b2f      	ldr	r3, [pc, #188]	; (18894 <_i2c_master_set_config+0x358>)
   187d8:	0010      	movs	r0, r2
   187da:	4798      	blx	r3
   187dc:	0002      	movs	r2, r0
   187de:	000b      	movs	r3, r1
   187e0:	4c34      	ldr	r4, [pc, #208]	; (188b4 <_i2c_master_set_config+0x378>)
   187e2:	0028      	movs	r0, r5
   187e4:	0031      	movs	r1, r6
   187e6:	47a0      	blx	r4
   187e8:	0003      	movs	r3, r0
   187ea:	000c      	movs	r4, r1
   187ec:	0019      	movs	r1, r3
   187ee:	0022      	movs	r2, r4
   187f0:	4b31      	ldr	r3, [pc, #196]	; (188b8 <_i2c_master_set_config+0x37c>)
   187f2:	0008      	movs	r0, r1
   187f4:	0011      	movs	r1, r2
   187f6:	4798      	blx	r3
   187f8:	0003      	movs	r3, r0
   187fa:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   187fc:	693b      	ldr	r3, [r7, #16]
   187fe:	689a      	ldr	r2, [r3, #8]
   18800:	2380      	movs	r3, #128	; 0x80
   18802:	049b      	lsls	r3, r3, #18
   18804:	429a      	cmp	r2, r3
   18806:	d16a      	bne.n	188de <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   18808:	4b22      	ldr	r3, [pc, #136]	; (18894 <_i2c_master_set_config+0x358>)
   1880a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1880c:	4798      	blx	r3
   1880e:	4c25      	ldr	r4, [pc, #148]	; (188a4 <_i2c_master_set_config+0x368>)
   18810:	0002      	movs	r2, r0
   18812:	000b      	movs	r3, r1
   18814:	47a0      	blx	r4
   18816:	0003      	movs	r3, r0
   18818:	000c      	movs	r4, r1
   1881a:	001d      	movs	r5, r3
   1881c:	0026      	movs	r6, r4
   1881e:	4b1d      	ldr	r3, [pc, #116]	; (18894 <_i2c_master_set_config+0x358>)
   18820:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18822:	4798      	blx	r3
   18824:	4c1c      	ldr	r4, [pc, #112]	; (18898 <_i2c_master_set_config+0x35c>)
   18826:	2200      	movs	r2, #0
   18828:	4b24      	ldr	r3, [pc, #144]	; (188bc <_i2c_master_set_config+0x380>)
   1882a:	47a0      	blx	r4
   1882c:	0003      	movs	r3, r0
   1882e:	000c      	movs	r4, r1
   18830:	001a      	movs	r2, r3
   18832:	0023      	movs	r3, r4
   18834:	4c1f      	ldr	r4, [pc, #124]	; (188b4 <_i2c_master_set_config+0x378>)
   18836:	0028      	movs	r0, r5
   18838:	0031      	movs	r1, r6
   1883a:	47a0      	blx	r4
   1883c:	0003      	movs	r3, r0
   1883e:	000c      	movs	r4, r1
   18840:	0018      	movs	r0, r3
   18842:	0021      	movs	r1, r4
   18844:	4c19      	ldr	r4, [pc, #100]	; (188ac <_i2c_master_set_config+0x370>)
   18846:	2200      	movs	r2, #0
   18848:	4b19      	ldr	r3, [pc, #100]	; (188b0 <_i2c_master_set_config+0x374>)
   1884a:	47a0      	blx	r4
   1884c:	0003      	movs	r3, r0
   1884e:	000c      	movs	r4, r1
   18850:	0019      	movs	r1, r3
   18852:	0022      	movs	r2, r4
   18854:	4b18      	ldr	r3, [pc, #96]	; (188b8 <_i2c_master_set_config+0x37c>)
   18856:	0008      	movs	r0, r1
   18858:	0011      	movs	r1, r2
   1885a:	4798      	blx	r3
   1885c:	0003      	movs	r3, r0
   1885e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   18860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18862:	2b00      	cmp	r3, #0
   18864:	d02e      	beq.n	188c4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   18866:	4b16      	ldr	r3, [pc, #88]	; (188c0 <_i2c_master_set_config+0x384>)
   18868:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1886a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1886c:	4798      	blx	r3
   1886e:	0003      	movs	r3, r0
   18870:	1e9a      	subs	r2, r3, #2
   18872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18874:	1ad3      	subs	r3, r2, r3
   18876:	653b      	str	r3, [r7, #80]	; 0x50
   18878:	e031      	b.n	188de <_i2c_master_set_config+0x3a2>
   1887a:	46c0      	nop			; (mov r8, r8)
   1887c:	00028381 	.word	0x00028381
   18880:	000183fd 	.word	0x000183fd
   18884:	000281c5 	.word	0x000281c5
   18888:	0002af71 	.word	0x0002af71
   1888c:	00018425 	.word	0x00018425
   18890:	0002ad35 	.word	0x0002ad35
   18894:	00035621 	.word	0x00035621
   18898:	00034a8d 	.word	0x00034a8d
   1889c:	e826d695 	.word	0xe826d695
   188a0:	3e112e0b 	.word	0x3e112e0b
   188a4:	00033e05 	.word	0x00033e05
   188a8:	40240000 	.word	0x40240000
   188ac:	00034f8d 	.word	0x00034f8d
   188b0:	3ff00000 	.word	0x3ff00000
   188b4:	00034425 	.word	0x00034425
   188b8:	000355b9 	.word	0x000355b9
   188bc:	40080000 	.word	0x40080000
   188c0:	000337a5 	.word	0x000337a5
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   188c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   188c6:	005a      	lsls	r2, r3, #1
   188c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   188ca:	18d3      	adds	r3, r2, r3
   188cc:	1e5a      	subs	r2, r3, #1
   188ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   188d0:	0059      	lsls	r1, r3, #1
   188d2:	4b1d      	ldr	r3, [pc, #116]	; (18948 <_i2c_master_set_config+0x40c>)
   188d4:	0010      	movs	r0, r2
   188d6:	4798      	blx	r3
   188d8:	0003      	movs	r3, r0
   188da:	3b01      	subs	r3, #1
   188dc:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   188de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   188e0:	2bff      	cmp	r3, #255	; 0xff
   188e2:	dc08      	bgt.n	188f6 <_i2c_master_set_config+0x3ba>
   188e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   188e6:	2b00      	cmp	r3, #0
   188e8:	db05      	blt.n	188f6 <_i2c_master_set_config+0x3ba>
   188ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   188ec:	2bff      	cmp	r3, #255	; 0xff
   188ee:	dc02      	bgt.n	188f6 <_i2c_master_set_config+0x3ba>
   188f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   188f2:	2b00      	cmp	r3, #0
   188f4:	da06      	bge.n	18904 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   188f6:	233b      	movs	r3, #59	; 0x3b
   188f8:	2210      	movs	r2, #16
   188fa:	4694      	mov	ip, r2
   188fc:	44bc      	add	ip, r7
   188fe:	4463      	add	r3, ip
   18900:	2240      	movs	r2, #64	; 0x40
   18902:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   18904:	233b      	movs	r3, #59	; 0x3b
   18906:	2210      	movs	r2, #16
   18908:	4694      	mov	ip, r2
   1890a:	44bc      	add	ip, r7
   1890c:	4463      	add	r3, ip
   1890e:	781b      	ldrb	r3, [r3, #0]
   18910:	2b40      	cmp	r3, #64	; 0x40
   18912:	d00e      	beq.n	18932 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18916:	22ff      	movs	r2, #255	; 0xff
   18918:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1891a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1891c:	041b      	lsls	r3, r3, #16
   1891e:	0019      	movs	r1, r3
   18920:	23ff      	movs	r3, #255	; 0xff
   18922:	041b      	lsls	r3, r3, #16
   18924:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18926:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1892a:	0612      	lsls	r2, r2, #24
   1892c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18930:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   18932:	233b      	movs	r3, #59	; 0x3b
   18934:	2210      	movs	r2, #16
   18936:	4694      	mov	ip, r2
   18938:	44bc      	add	ip, r7
   1893a:	4463      	add	r3, ip
   1893c:	781b      	ldrb	r3, [r3, #0]
}
   1893e:	0018      	movs	r0, r3
   18940:	46bd      	mov	sp, r7
   18942:	b017      	add	sp, #92	; 0x5c
   18944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18946:	46c0      	nop			; (mov r8, r8)
   18948:	000337a5 	.word	0x000337a5

0001894c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   1894c:	b590      	push	{r4, r7, lr}
   1894e:	b08b      	sub	sp, #44	; 0x2c
   18950:	af00      	add	r7, sp, #0
   18952:	60f8      	str	r0, [r7, #12]
   18954:	60b9      	str	r1, [r7, #8]
   18956:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   18958:	68fb      	ldr	r3, [r7, #12]
   1895a:	68ba      	ldr	r2, [r7, #8]
   1895c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1895e:	68fb      	ldr	r3, [r7, #12]
   18960:	681b      	ldr	r3, [r3, #0]
   18962:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   18964:	68fb      	ldr	r3, [r7, #12]
   18966:	681b      	ldr	r3, [r3, #0]
   18968:	0018      	movs	r0, r3
   1896a:	4b3b      	ldr	r3, [pc, #236]	; (18a58 <i2c_master_init+0x10c>)
   1896c:	4798      	blx	r3
   1896e:	0003      	movs	r3, r0
   18970:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   18972:	6a3b      	ldr	r3, [r7, #32]
   18974:	3302      	adds	r3, #2
   18976:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18978:	6a3b      	ldr	r3, [r7, #32]
   1897a:	3314      	adds	r3, #20
   1897c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1897e:	2201      	movs	r2, #1
   18980:	69fb      	ldr	r3, [r7, #28]
   18982:	409a      	lsls	r2, r3
   18984:	0013      	movs	r3, r2
   18986:	0019      	movs	r1, r3
   18988:	2002      	movs	r0, #2
   1898a:	4b34      	ldr	r3, [pc, #208]	; (18a5c <i2c_master_init+0x110>)
   1898c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1898e:	2314      	movs	r3, #20
   18990:	18fb      	adds	r3, r7, r3
   18992:	0018      	movs	r0, r3
   18994:	4b32      	ldr	r3, [pc, #200]	; (18a60 <i2c_master_init+0x114>)
   18996:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   18998:	687b      	ldr	r3, [r7, #4]
   1899a:	7b1a      	ldrb	r2, [r3, #12]
   1899c:	2314      	movs	r3, #20
   1899e:	18fb      	adds	r3, r7, r3
   189a0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   189a2:	69bb      	ldr	r3, [r7, #24]
   189a4:	b2db      	uxtb	r3, r3
   189a6:	2214      	movs	r2, #20
   189a8:	18ba      	adds	r2, r7, r2
   189aa:	0011      	movs	r1, r2
   189ac:	0018      	movs	r0, r3
   189ae:	4b2d      	ldr	r3, [pc, #180]	; (18a64 <i2c_master_init+0x118>)
   189b0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   189b2:	69bb      	ldr	r3, [r7, #24]
   189b4:	b2db      	uxtb	r3, r3
   189b6:	0018      	movs	r0, r3
   189b8:	4b2b      	ldr	r3, [pc, #172]	; (18a68 <i2c_master_init+0x11c>)
   189ba:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   189bc:	687b      	ldr	r3, [r7, #4]
   189be:	7b1b      	ldrb	r3, [r3, #12]
   189c0:	2100      	movs	r1, #0
   189c2:	0018      	movs	r0, r3
   189c4:	4b29      	ldr	r3, [pc, #164]	; (18a6c <i2c_master_init+0x120>)
   189c6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   189c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   189ca:	681b      	ldr	r3, [r3, #0]
   189cc:	2202      	movs	r2, #2
   189ce:	4013      	ands	r3, r2
   189d0:	d001      	beq.n	189d6 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   189d2:	231c      	movs	r3, #28
   189d4:	e03b      	b.n	18a4e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   189d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   189d8:	681b      	ldr	r3, [r3, #0]
   189da:	2201      	movs	r2, #1
   189dc:	4013      	ands	r3, r2
   189de:	d001      	beq.n	189e4 <i2c_master_init+0x98>
		return STATUS_BUSY;
   189e0:	2305      	movs	r3, #5
   189e2:	e034      	b.n	18a4e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   189e4:	68fb      	ldr	r3, [r7, #12]
   189e6:	681b      	ldr	r3, [r3, #0]
   189e8:	2217      	movs	r2, #23
   189ea:	18bc      	adds	r4, r7, r2
   189ec:	0018      	movs	r0, r3
   189ee:	4b1a      	ldr	r3, [pc, #104]	; (18a58 <i2c_master_init+0x10c>)
   189f0:	4798      	blx	r3
   189f2:	0003      	movs	r3, r0
   189f4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   189f6:	4a1e      	ldr	r2, [pc, #120]	; (18a70 <i2c_master_init+0x124>)
   189f8:	2317      	movs	r3, #23
   189fa:	18fb      	adds	r3, r7, r3
   189fc:	781b      	ldrb	r3, [r3, #0]
   189fe:	0011      	movs	r1, r2
   18a00:	0018      	movs	r0, r3
   18a02:	4b1c      	ldr	r3, [pc, #112]	; (18a74 <i2c_master_init+0x128>)
   18a04:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   18a06:	2317      	movs	r3, #23
   18a08:	18fb      	adds	r3, r7, r3
   18a0a:	781a      	ldrb	r2, [r3, #0]
   18a0c:	4b1a      	ldr	r3, [pc, #104]	; (18a78 <i2c_master_init+0x12c>)
   18a0e:	0092      	lsls	r2, r2, #2
   18a10:	68f9      	ldr	r1, [r7, #12]
   18a12:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   18a14:	68fb      	ldr	r3, [r7, #12]
   18a16:	2200      	movs	r2, #0
   18a18:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   18a1a:	68fb      	ldr	r3, [r7, #12]
   18a1c:	2200      	movs	r2, #0
   18a1e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   18a20:	68fb      	ldr	r3, [r7, #12]
   18a22:	2200      	movs	r2, #0
   18a24:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   18a26:	68fb      	ldr	r3, [r7, #12]
   18a28:	2200      	movs	r2, #0
   18a2a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   18a2c:	68fb      	ldr	r3, [r7, #12]
   18a2e:	2225      	movs	r2, #37	; 0x25
   18a30:	2100      	movs	r1, #0
   18a32:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   18a34:	68fb      	ldr	r3, [r7, #12]
   18a36:	2200      	movs	r2, #0
   18a38:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   18a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a3c:	2214      	movs	r2, #20
   18a3e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   18a40:	687a      	ldr	r2, [r7, #4]
   18a42:	68fb      	ldr	r3, [r7, #12]
   18a44:	0011      	movs	r1, r2
   18a46:	0018      	movs	r0, r3
   18a48:	4b0c      	ldr	r3, [pc, #48]	; (18a7c <i2c_master_init+0x130>)
   18a4a:	4798      	blx	r3
   18a4c:	0003      	movs	r3, r0
}
   18a4e:	0018      	movs	r0, r3
   18a50:	46bd      	mov	sp, r7
   18a52:	b00b      	add	sp, #44	; 0x2c
   18a54:	bd90      	pop	{r4, r7, pc}
   18a56:	46c0      	nop			; (mov r8, r8)
   18a58:	00028381 	.word	0x00028381
   18a5c:	000183a1 	.word	0x000183a1
   18a60:	00018389 	.word	0x00018389
   18a64:	0002ac11 	.word	0x0002ac11
   18a68:	0002ac55 	.word	0x0002ac55
   18a6c:	00028139 	.word	0x00028139
   18a70:	00013dfd 	.word	0x00013dfd
   18a74:	000283e5 	.word	0x000283e5
   18a78:	20005c98 	.word	0x20005c98
   18a7c:	0001853d 	.word	0x0001853d

00018a80 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   18a80:	b580      	push	{r7, lr}
   18a82:	b084      	sub	sp, #16
   18a84:	af00      	add	r7, sp, #0
   18a86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18a88:	687b      	ldr	r3, [r7, #4]
   18a8a:	681b      	ldr	r3, [r3, #0]
   18a8c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18a8e:	687b      	ldr	r3, [r7, #4]
   18a90:	0018      	movs	r0, r3
   18a92:	4b0f      	ldr	r3, [pc, #60]	; (18ad0 <i2c_master_reset+0x50>)
   18a94:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   18a96:	687b      	ldr	r3, [r7, #4]
   18a98:	0018      	movs	r0, r3
   18a9a:	4b0e      	ldr	r3, [pc, #56]	; (18ad4 <i2c_master_reset+0x54>)
   18a9c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   18a9e:	4b0e      	ldr	r3, [pc, #56]	; (18ad8 <i2c_master_reset+0x58>)
   18aa0:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   18aa2:	687b      	ldr	r3, [r7, #4]
   18aa4:	681b      	ldr	r3, [r3, #0]
   18aa6:	0018      	movs	r0, r3
   18aa8:	4b0c      	ldr	r3, [pc, #48]	; (18adc <i2c_master_reset+0x5c>)
   18aaa:	4798      	blx	r3
   18aac:	0003      	movs	r3, r0
   18aae:	0018      	movs	r0, r3
   18ab0:	4b0b      	ldr	r3, [pc, #44]	; (18ae0 <i2c_master_reset+0x60>)
   18ab2:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   18ab4:	4b0b      	ldr	r3, [pc, #44]	; (18ae4 <i2c_master_reset+0x64>)
   18ab6:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18ab8:	687b      	ldr	r3, [r7, #4]
   18aba:	0018      	movs	r0, r3
   18abc:	4b04      	ldr	r3, [pc, #16]	; (18ad0 <i2c_master_reset+0x50>)
   18abe:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   18ac0:	68fb      	ldr	r3, [r7, #12]
   18ac2:	2201      	movs	r2, #1
   18ac4:	601a      	str	r2, [r3, #0]
}
   18ac6:	46c0      	nop			; (mov r8, r8)
   18ac8:	46bd      	mov	sp, r7
   18aca:	b004      	add	sp, #16
   18acc:	bd80      	pop	{r7, pc}
   18ace:	46c0      	nop			; (mov r8, r8)
   18ad0:	000184c1 	.word	0x000184c1
   18ad4:	000184e5 	.word	0x000184e5
   18ad8:	00018445 	.word	0x00018445
   18adc:	00028451 	.word	0x00028451
   18ae0:	0002ad8d 	.word	0x0002ad8d
   18ae4:	00018459 	.word	0x00018459

00018ae8 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   18ae8:	b580      	push	{r7, lr}
   18aea:	b084      	sub	sp, #16
   18aec:	af00      	add	r7, sp, #0
   18aee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18af0:	687b      	ldr	r3, [r7, #4]
   18af2:	681b      	ldr	r3, [r3, #0]
   18af4:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18af6:	68fb      	ldr	r3, [r7, #12]
   18af8:	7e1b      	ldrb	r3, [r3, #24]
   18afa:	b2db      	uxtb	r3, r3
   18afc:	001a      	movs	r2, r3
   18afe:	2302      	movs	r3, #2
   18b00:	4013      	ands	r3, r2
   18b02:	d00b      	beq.n	18b1c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18b04:	68fb      	ldr	r3, [r7, #12]
   18b06:	2202      	movs	r2, #2
   18b08:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   18b0a:	68fb      	ldr	r3, [r7, #12]
   18b0c:	8b5b      	ldrh	r3, [r3, #26]
   18b0e:	b29b      	uxth	r3, r3
   18b10:	001a      	movs	r2, r3
   18b12:	2302      	movs	r3, #2
   18b14:	4013      	ands	r3, r2
   18b16:	d011      	beq.n	18b3c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   18b18:	2341      	movs	r3, #65	; 0x41
   18b1a:	e010      	b.n	18b3e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18b1c:	68fb      	ldr	r3, [r7, #12]
   18b1e:	8b5b      	ldrh	r3, [r3, #26]
   18b20:	b29b      	uxth	r3, r3
   18b22:	001a      	movs	r2, r3
   18b24:	2304      	movs	r3, #4
   18b26:	4013      	ands	r3, r2
   18b28:	d008      	beq.n	18b3c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   18b2a:	68fb      	ldr	r3, [r7, #12]
   18b2c:	685b      	ldr	r3, [r3, #4]
   18b2e:	22c0      	movs	r2, #192	; 0xc0
   18b30:	0292      	lsls	r2, r2, #10
   18b32:	431a      	orrs	r2, r3
   18b34:	68fb      	ldr	r3, [r7, #12]
   18b36:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   18b38:	2318      	movs	r3, #24
   18b3a:	e000      	b.n	18b3e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   18b3c:	2300      	movs	r3, #0
}
   18b3e:	0018      	movs	r0, r3
   18b40:	46bd      	mov	sp, r7
   18b42:	b004      	add	sp, #16
   18b44:	bd80      	pop	{r7, pc}

00018b46 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   18b46:	b580      	push	{r7, lr}
   18b48:	b084      	sub	sp, #16
   18b4a:	af00      	add	r7, sp, #0
   18b4c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18b4e:	687b      	ldr	r3, [r7, #4]
   18b50:	681b      	ldr	r3, [r3, #0]
   18b52:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   18b54:	230e      	movs	r3, #14
   18b56:	18fb      	adds	r3, r7, r3
   18b58:	2200      	movs	r2, #0
   18b5a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18b5c:	e00f      	b.n	18b7e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   18b5e:	230e      	movs	r3, #14
   18b60:	18fb      	adds	r3, r7, r3
   18b62:	220e      	movs	r2, #14
   18b64:	18ba      	adds	r2, r7, r2
   18b66:	8812      	ldrh	r2, [r2, #0]
   18b68:	3201      	adds	r2, #1
   18b6a:	801a      	strh	r2, [r3, #0]
   18b6c:	687b      	ldr	r3, [r7, #4]
   18b6e:	891b      	ldrh	r3, [r3, #8]
   18b70:	220e      	movs	r2, #14
   18b72:	18ba      	adds	r2, r7, r2
   18b74:	8812      	ldrh	r2, [r2, #0]
   18b76:	429a      	cmp	r2, r3
   18b78:	d301      	bcc.n	18b7e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   18b7a:	2312      	movs	r3, #18
   18b7c:	e00e      	b.n	18b9c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18b7e:	68bb      	ldr	r3, [r7, #8]
   18b80:	7e1b      	ldrb	r3, [r3, #24]
   18b82:	b2db      	uxtb	r3, r3
   18b84:	001a      	movs	r2, r3
   18b86:	2301      	movs	r3, #1
   18b88:	4013      	ands	r3, r2
   18b8a:	d106      	bne.n	18b9a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   18b8c:	68bb      	ldr	r3, [r7, #8]
   18b8e:	7e1b      	ldrb	r3, [r3, #24]
   18b90:	b2db      	uxtb	r3, r3
   18b92:	001a      	movs	r2, r3
   18b94:	2302      	movs	r3, #2
   18b96:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18b98:	d0e1      	beq.n	18b5e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   18b9a:	2300      	movs	r3, #0
}
   18b9c:	0018      	movs	r0, r3
   18b9e:	46bd      	mov	sp, r7
   18ba0:	b004      	add	sp, #16
   18ba2:	bd80      	pop	{r7, pc}

00018ba4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   18ba4:	b590      	push	{r4, r7, lr}
   18ba6:	b085      	sub	sp, #20
   18ba8:	af00      	add	r7, sp, #0
   18baa:	6078      	str	r0, [r7, #4]
   18bac:	000a      	movs	r2, r1
   18bae:	1cfb      	adds	r3, r7, #3
   18bb0:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18bb2:	687b      	ldr	r3, [r7, #4]
   18bb4:	681b      	ldr	r3, [r3, #0]
   18bb6:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18bb8:	68fb      	ldr	r3, [r7, #12]
   18bba:	685b      	ldr	r3, [r3, #4]
   18bbc:	2280      	movs	r2, #128	; 0x80
   18bbe:	02d2      	lsls	r2, r2, #11
   18bc0:	431a      	orrs	r2, r3
   18bc2:	68fb      	ldr	r3, [r7, #12]
   18bc4:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   18bc6:	1cfb      	adds	r3, r7, #3
   18bc8:	781a      	ldrb	r2, [r3, #0]
   18bca:	68fb      	ldr	r3, [r7, #12]
   18bcc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   18bce:	230b      	movs	r3, #11
   18bd0:	18fc      	adds	r4, r7, r3
   18bd2:	687b      	ldr	r3, [r7, #4]
   18bd4:	0018      	movs	r0, r3
   18bd6:	4b07      	ldr	r3, [pc, #28]	; (18bf4 <_i2c_master_send_hs_master_code+0x50>)
   18bd8:	4798      	blx	r3
   18bda:	0003      	movs	r3, r0
   18bdc:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   18bde:	68fb      	ldr	r3, [r7, #12]
   18be0:	2201      	movs	r2, #1
   18be2:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18be4:	230b      	movs	r3, #11
   18be6:	18fb      	adds	r3, r7, r3
   18be8:	781b      	ldrb	r3, [r3, #0]
}
   18bea:	0018      	movs	r0, r3
   18bec:	46bd      	mov	sp, r7
   18bee:	b005      	add	sp, #20
   18bf0:	bd90      	pop	{r4, r7, pc}
   18bf2:	46c0      	nop			; (mov r8, r8)
   18bf4:	00018b47 	.word	0x00018b47

00018bf8 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   18bf8:	b580      	push	{r7, lr}
   18bfa:	af00      	add	r7, sp, #0
   18bfc:	2000      	movs	r0, #0
   18bfe:	4b02      	ldr	r3, [pc, #8]	; (18c08 <TC3_Handler+0x10>)
   18c00:	4798      	blx	r3
   18c02:	46c0      	nop			; (mov r8, r8)
   18c04:	46bd      	mov	sp, r7
   18c06:	bd80      	pop	{r7, pc}
   18c08:	00018c35 	.word	0x00018c35

00018c0c <TC4_Handler>:
   18c0c:	b580      	push	{r7, lr}
   18c0e:	af00      	add	r7, sp, #0
   18c10:	2001      	movs	r0, #1
   18c12:	4b02      	ldr	r3, [pc, #8]	; (18c1c <TC4_Handler+0x10>)
   18c14:	4798      	blx	r3
   18c16:	46c0      	nop			; (mov r8, r8)
   18c18:	46bd      	mov	sp, r7
   18c1a:	bd80      	pop	{r7, pc}
   18c1c:	00018c35 	.word	0x00018c35

00018c20 <TC5_Handler>:
   18c20:	b580      	push	{r7, lr}
   18c22:	af00      	add	r7, sp, #0
   18c24:	2002      	movs	r0, #2
   18c26:	4b02      	ldr	r3, [pc, #8]	; (18c30 <TC5_Handler+0x10>)
   18c28:	4798      	blx	r3
   18c2a:	46c0      	nop			; (mov r8, r8)
   18c2c:	46bd      	mov	sp, r7
   18c2e:	bd80      	pop	{r7, pc}
   18c30:	00018c35 	.word	0x00018c35

00018c34 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   18c34:	b580      	push	{r7, lr}
   18c36:	b084      	sub	sp, #16
   18c38:	af00      	add	r7, sp, #0
   18c3a:	0002      	movs	r2, r0
   18c3c:	1dfb      	adds	r3, r7, #7
   18c3e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18c40:	1dfb      	adds	r3, r7, #7
   18c42:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   18c44:	4b28      	ldr	r3, [pc, #160]	; (18ce8 <_tc_interrupt_handler+0xb4>)
   18c46:	0092      	lsls	r2, r2, #2
   18c48:	58d3      	ldr	r3, [r2, r3]
   18c4a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18c4c:	68fb      	ldr	r3, [r7, #12]
   18c4e:	681b      	ldr	r3, [r3, #0]
   18c50:	7b9b      	ldrb	r3, [r3, #14]
   18c52:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18c54:	68fa      	ldr	r2, [r7, #12]
   18c56:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18c58:	4013      	ands	r3, r2
   18c5a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   18c5c:	68fb      	ldr	r3, [r7, #12]
   18c5e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18c60:	230b      	movs	r3, #11
   18c62:	18fb      	adds	r3, r7, r3
   18c64:	400a      	ands	r2, r1
   18c66:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18c68:	230b      	movs	r3, #11
   18c6a:	18fb      	adds	r3, r7, r3
   18c6c:	781b      	ldrb	r3, [r3, #0]
   18c6e:	2201      	movs	r2, #1
   18c70:	4013      	ands	r3, r2
   18c72:	d008      	beq.n	18c86 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18c74:	68fb      	ldr	r3, [r7, #12]
   18c76:	689b      	ldr	r3, [r3, #8]
   18c78:	68fa      	ldr	r2, [r7, #12]
   18c7a:	0010      	movs	r0, r2
   18c7c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   18c7e:	68fb      	ldr	r3, [r7, #12]
   18c80:	681b      	ldr	r3, [r3, #0]
   18c82:	2201      	movs	r2, #1
   18c84:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18c86:	230b      	movs	r3, #11
   18c88:	18fb      	adds	r3, r7, r3
   18c8a:	781b      	ldrb	r3, [r3, #0]
   18c8c:	2202      	movs	r2, #2
   18c8e:	4013      	ands	r3, r2
   18c90:	d008      	beq.n	18ca4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   18c92:	68fb      	ldr	r3, [r7, #12]
   18c94:	68db      	ldr	r3, [r3, #12]
   18c96:	68fa      	ldr	r2, [r7, #12]
   18c98:	0010      	movs	r0, r2
   18c9a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   18c9c:	68fb      	ldr	r3, [r7, #12]
   18c9e:	681b      	ldr	r3, [r3, #0]
   18ca0:	2202      	movs	r2, #2
   18ca2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18ca4:	230b      	movs	r3, #11
   18ca6:	18fb      	adds	r3, r7, r3
   18ca8:	781b      	ldrb	r3, [r3, #0]
   18caa:	2210      	movs	r2, #16
   18cac:	4013      	ands	r3, r2
   18cae:	d008      	beq.n	18cc2 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18cb0:	68fb      	ldr	r3, [r7, #12]
   18cb2:	691b      	ldr	r3, [r3, #16]
   18cb4:	68fa      	ldr	r2, [r7, #12]
   18cb6:	0010      	movs	r0, r2
   18cb8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   18cba:	68fb      	ldr	r3, [r7, #12]
   18cbc:	681b      	ldr	r3, [r3, #0]
   18cbe:	2210      	movs	r2, #16
   18cc0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18cc2:	230b      	movs	r3, #11
   18cc4:	18fb      	adds	r3, r7, r3
   18cc6:	781b      	ldrb	r3, [r3, #0]
   18cc8:	2220      	movs	r2, #32
   18cca:	4013      	ands	r3, r2
   18ccc:	d008      	beq.n	18ce0 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   18cce:	68fb      	ldr	r3, [r7, #12]
   18cd0:	695b      	ldr	r3, [r3, #20]
   18cd2:	68fa      	ldr	r2, [r7, #12]
   18cd4:	0010      	movs	r0, r2
   18cd6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18cd8:	68fb      	ldr	r3, [r7, #12]
   18cda:	681b      	ldr	r3, [r3, #0]
   18cdc:	2220      	movs	r2, #32
   18cde:	739a      	strb	r2, [r3, #14]
	}
}
   18ce0:	46c0      	nop			; (mov r8, r8)
   18ce2:	46bd      	mov	sp, r7
   18ce4:	b004      	add	sp, #16
   18ce6:	bd80      	pop	{r7, pc}
   18ce8:	20004a80 	.word	0x20004a80

00018cec <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   18cec:	b580      	push	{r7, lr}
   18cee:	b084      	sub	sp, #16
   18cf0:	af00      	add	r7, sp, #0
   18cf2:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18cf4:	2300      	movs	r3, #0
   18cf6:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18cf8:	687b      	ldr	r3, [r7, #4]
   18cfa:	2b00      	cmp	r3, #0
   18cfc:	d101      	bne.n	18d02 <FreeRTOS_CLIRegisterCommand+0x16>
   18cfe:	b672      	cpsid	i
   18d00:	e7fe      	b.n	18d00 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   18d02:	2008      	movs	r0, #8
   18d04:	4b11      	ldr	r3, [pc, #68]	; (18d4c <FreeRTOS_CLIRegisterCommand+0x60>)
   18d06:	4798      	blx	r3
   18d08:	0003      	movs	r3, r0
   18d0a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18d0c:	68bb      	ldr	r3, [r7, #8]
   18d0e:	2b00      	cmp	r3, #0
   18d10:	d101      	bne.n	18d16 <FreeRTOS_CLIRegisterCommand+0x2a>
   18d12:	b672      	cpsid	i
   18d14:	e7fe      	b.n	18d14 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   18d16:	68bb      	ldr	r3, [r7, #8]
   18d18:	2b00      	cmp	r3, #0
   18d1a:	d012      	beq.n	18d42 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18d1c:	4b0c      	ldr	r3, [pc, #48]	; (18d50 <FreeRTOS_CLIRegisterCommand+0x64>)
   18d1e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   18d20:	68bb      	ldr	r3, [r7, #8]
   18d22:	687a      	ldr	r2, [r7, #4]
   18d24:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   18d26:	68bb      	ldr	r3, [r7, #8]
   18d28:	2200      	movs	r2, #0
   18d2a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18d2c:	4b09      	ldr	r3, [pc, #36]	; (18d54 <FreeRTOS_CLIRegisterCommand+0x68>)
   18d2e:	681b      	ldr	r3, [r3, #0]
   18d30:	68ba      	ldr	r2, [r7, #8]
   18d32:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   18d34:	4b07      	ldr	r3, [pc, #28]	; (18d54 <FreeRTOS_CLIRegisterCommand+0x68>)
   18d36:	68ba      	ldr	r2, [r7, #8]
   18d38:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   18d3a:	4b07      	ldr	r3, [pc, #28]	; (18d58 <FreeRTOS_CLIRegisterCommand+0x6c>)
   18d3c:	4798      	blx	r3

		xReturn = pdPASS;
   18d3e:	2301      	movs	r3, #1
   18d40:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   18d42:	68fb      	ldr	r3, [r7, #12]
}
   18d44:	0018      	movs	r0, r3
   18d46:	46bd      	mov	sp, r7
   18d48:	b004      	add	sp, #16
   18d4a:	bd80      	pop	{r7, pc}
   18d4c:	0001b101 	.word	0x0001b101
   18d50:	0001afc9 	.word	0x0001afc9
   18d54:	20000100 	.word	0x20000100
   18d58:	0001afed 	.word	0x0001afed

00018d5c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18d5c:	b580      	push	{r7, lr}
   18d5e:	b088      	sub	sp, #32
   18d60:	af00      	add	r7, sp, #0
   18d62:	60f8      	str	r0, [r7, #12]
   18d64:	60b9      	str	r1, [r7, #8]
   18d66:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18d68:	2301      	movs	r3, #1
   18d6a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18d6c:	4b3d      	ldr	r3, [pc, #244]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18d6e:	681b      	ldr	r3, [r3, #0]
   18d70:	2b00      	cmp	r3, #0
   18d72:	d144      	bne.n	18dfe <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18d74:	4b3b      	ldr	r3, [pc, #236]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18d76:	4a3c      	ldr	r2, [pc, #240]	; (18e68 <FreeRTOS_CLIProcessCommand+0x10c>)
   18d78:	601a      	str	r2, [r3, #0]
   18d7a:	e03a      	b.n	18df2 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18d7c:	4b39      	ldr	r3, [pc, #228]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18d7e:	681b      	ldr	r3, [r3, #0]
   18d80:	681b      	ldr	r3, [r3, #0]
   18d82:	681b      	ldr	r3, [r3, #0]
   18d84:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18d86:	69bb      	ldr	r3, [r7, #24]
   18d88:	0018      	movs	r0, r3
   18d8a:	4b38      	ldr	r3, [pc, #224]	; (18e6c <FreeRTOS_CLIProcessCommand+0x110>)
   18d8c:	4798      	blx	r3
   18d8e:	0003      	movs	r3, r0
   18d90:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   18d92:	68fa      	ldr	r2, [r7, #12]
   18d94:	697b      	ldr	r3, [r7, #20]
   18d96:	18d3      	adds	r3, r2, r3
   18d98:	781b      	ldrb	r3, [r3, #0]
   18d9a:	2b20      	cmp	r3, #32
   18d9c:	d005      	beq.n	18daa <FreeRTOS_CLIProcessCommand+0x4e>
   18d9e:	68fa      	ldr	r2, [r7, #12]
   18da0:	697b      	ldr	r3, [r7, #20]
   18da2:	18d3      	adds	r3, r2, r3
   18da4:	781b      	ldrb	r3, [r3, #0]
   18da6:	2b00      	cmp	r3, #0
   18da8:	d11e      	bne.n	18de8 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18daa:	697a      	ldr	r2, [r7, #20]
   18dac:	69b9      	ldr	r1, [r7, #24]
   18dae:	68fb      	ldr	r3, [r7, #12]
   18db0:	0018      	movs	r0, r3
   18db2:	4b2f      	ldr	r3, [pc, #188]	; (18e70 <FreeRTOS_CLIProcessCommand+0x114>)
   18db4:	4798      	blx	r3
   18db6:	1e03      	subs	r3, r0, #0
   18db8:	d116      	bne.n	18de8 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   18dba:	4b2a      	ldr	r3, [pc, #168]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18dbc:	681b      	ldr	r3, [r3, #0]
   18dbe:	681b      	ldr	r3, [r3, #0]
   18dc0:	7b1b      	ldrb	r3, [r3, #12]
   18dc2:	b25b      	sxtb	r3, r3
   18dc4:	2b00      	cmp	r3, #0
   18dc6:	db19      	blt.n	18dfc <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18dc8:	68fb      	ldr	r3, [r7, #12]
   18dca:	0018      	movs	r0, r3
   18dcc:	4b29      	ldr	r3, [pc, #164]	; (18e74 <FreeRTOS_CLIProcessCommand+0x118>)
   18dce:	4798      	blx	r3
   18dd0:	0003      	movs	r3, r0
   18dd2:	001a      	movs	r2, r3
   18dd4:	4b23      	ldr	r3, [pc, #140]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18dd6:	681b      	ldr	r3, [r3, #0]
   18dd8:	681b      	ldr	r3, [r3, #0]
   18dda:	7b1b      	ldrb	r3, [r3, #12]
   18ddc:	b25b      	sxtb	r3, r3
   18dde:	429a      	cmp	r2, r3
   18de0:	d00c      	beq.n	18dfc <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18de2:	2300      	movs	r3, #0
   18de4:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18de6:	e009      	b.n	18dfc <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18de8:	4b1e      	ldr	r3, [pc, #120]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18dea:	681b      	ldr	r3, [r3, #0]
   18dec:	685a      	ldr	r2, [r3, #4]
   18dee:	4b1d      	ldr	r3, [pc, #116]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18df0:	601a      	str	r2, [r3, #0]
   18df2:	4b1c      	ldr	r3, [pc, #112]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18df4:	681b      	ldr	r3, [r3, #0]
   18df6:	2b00      	cmp	r3, #0
   18df8:	d1c0      	bne.n	18d7c <FreeRTOS_CLIProcessCommand+0x20>
   18dfa:	e000      	b.n	18dfe <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18dfc:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18dfe:	4b19      	ldr	r3, [pc, #100]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18e00:	681b      	ldr	r3, [r3, #0]
   18e02:	2b00      	cmp	r3, #0
   18e04:	d00c      	beq.n	18e20 <FreeRTOS_CLIProcessCommand+0xc4>
   18e06:	69fb      	ldr	r3, [r7, #28]
   18e08:	2b00      	cmp	r3, #0
   18e0a:	d109      	bne.n	18e20 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18e0c:	687a      	ldr	r2, [r7, #4]
   18e0e:	491a      	ldr	r1, [pc, #104]	; (18e78 <FreeRTOS_CLIProcessCommand+0x11c>)
   18e10:	68bb      	ldr	r3, [r7, #8]
   18e12:	0018      	movs	r0, r3
   18e14:	4b19      	ldr	r3, [pc, #100]	; (18e7c <FreeRTOS_CLIProcessCommand+0x120>)
   18e16:	4798      	blx	r3
		pxCommand = NULL;
   18e18:	4b12      	ldr	r3, [pc, #72]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18e1a:	2200      	movs	r2, #0
   18e1c:	601a      	str	r2, [r3, #0]
   18e1e:	e01c      	b.n	18e5a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18e20:	4b10      	ldr	r3, [pc, #64]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18e22:	681b      	ldr	r3, [r3, #0]
   18e24:	2b00      	cmp	r3, #0
   18e26:	d010      	beq.n	18e4a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18e28:	4b0e      	ldr	r3, [pc, #56]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18e2a:	681b      	ldr	r3, [r3, #0]
   18e2c:	681b      	ldr	r3, [r3, #0]
   18e2e:	689b      	ldr	r3, [r3, #8]
   18e30:	68fa      	ldr	r2, [r7, #12]
   18e32:	6879      	ldr	r1, [r7, #4]
   18e34:	68b8      	ldr	r0, [r7, #8]
   18e36:	4798      	blx	r3
   18e38:	0003      	movs	r3, r0
   18e3a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18e3c:	69fb      	ldr	r3, [r7, #28]
   18e3e:	2b00      	cmp	r3, #0
   18e40:	d10b      	bne.n	18e5a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18e42:	4b08      	ldr	r3, [pc, #32]	; (18e64 <FreeRTOS_CLIProcessCommand+0x108>)
   18e44:	2200      	movs	r2, #0
   18e46:	601a      	str	r2, [r3, #0]
   18e48:	e007      	b.n	18e5a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18e4a:	687a      	ldr	r2, [r7, #4]
   18e4c:	490c      	ldr	r1, [pc, #48]	; (18e80 <FreeRTOS_CLIProcessCommand+0x124>)
   18e4e:	68bb      	ldr	r3, [r7, #8]
   18e50:	0018      	movs	r0, r3
   18e52:	4b0a      	ldr	r3, [pc, #40]	; (18e7c <FreeRTOS_CLIProcessCommand+0x120>)
   18e54:	4798      	blx	r3
		xReturn = pdFALSE;
   18e56:	2300      	movs	r3, #0
   18e58:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18e5a:	69fb      	ldr	r3, [r7, #28]
}
   18e5c:	0018      	movs	r0, r3
   18e5e:	46bd      	mov	sp, r7
   18e60:	b008      	add	sp, #32
   18e62:	bd80      	pop	{r7, pc}
   18e64:	20000cd4 	.word	0x20000cd4
   18e68:	200000f8 	.word	0x200000f8
   18e6c:	00035b37 	.word	0x00035b37
   18e70:	00035b45 	.word	0x00035b45
   18e74:	00018ee5 	.word	0x00018ee5
   18e78:	00037d84 	.word	0x00037d84
   18e7c:	00035b67 	.word	0x00035b67
   18e80:	00037ddc 	.word	0x00037ddc

00018e84 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18e84:	b580      	push	{r7, lr}
   18e86:	b086      	sub	sp, #24
   18e88:	af00      	add	r7, sp, #0
   18e8a:	60f8      	str	r0, [r7, #12]
   18e8c:	60b9      	str	r1, [r7, #8]
   18e8e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18e90:	4b11      	ldr	r3, [pc, #68]	; (18ed8 <prvHelpCommand+0x54>)
   18e92:	681b      	ldr	r3, [r3, #0]
   18e94:	2b00      	cmp	r3, #0
   18e96:	d102      	bne.n	18e9e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18e98:	4b0f      	ldr	r3, [pc, #60]	; (18ed8 <prvHelpCommand+0x54>)
   18e9a:	4a10      	ldr	r2, [pc, #64]	; (18edc <prvHelpCommand+0x58>)
   18e9c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18e9e:	4b0e      	ldr	r3, [pc, #56]	; (18ed8 <prvHelpCommand+0x54>)
   18ea0:	681b      	ldr	r3, [r3, #0]
   18ea2:	681b      	ldr	r3, [r3, #0]
   18ea4:	6859      	ldr	r1, [r3, #4]
   18ea6:	68ba      	ldr	r2, [r7, #8]
   18ea8:	68fb      	ldr	r3, [r7, #12]
   18eaa:	0018      	movs	r0, r3
   18eac:	4b0c      	ldr	r3, [pc, #48]	; (18ee0 <prvHelpCommand+0x5c>)
   18eae:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18eb0:	4b09      	ldr	r3, [pc, #36]	; (18ed8 <prvHelpCommand+0x54>)
   18eb2:	681b      	ldr	r3, [r3, #0]
   18eb4:	685a      	ldr	r2, [r3, #4]
   18eb6:	4b08      	ldr	r3, [pc, #32]	; (18ed8 <prvHelpCommand+0x54>)
   18eb8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   18eba:	4b07      	ldr	r3, [pc, #28]	; (18ed8 <prvHelpCommand+0x54>)
   18ebc:	681b      	ldr	r3, [r3, #0]
   18ebe:	2b00      	cmp	r3, #0
   18ec0:	d102      	bne.n	18ec8 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18ec2:	2300      	movs	r3, #0
   18ec4:	617b      	str	r3, [r7, #20]
   18ec6:	e001      	b.n	18ecc <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18ec8:	2301      	movs	r3, #1
   18eca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18ecc:	697b      	ldr	r3, [r7, #20]
}
   18ece:	0018      	movs	r0, r3
   18ed0:	46bd      	mov	sp, r7
   18ed2:	b006      	add	sp, #24
   18ed4:	bd80      	pop	{r7, pc}
   18ed6:	46c0      	nop			; (mov r8, r8)
   18ed8:	20000cd8 	.word	0x20000cd8
   18edc:	200000f8 	.word	0x200000f8
   18ee0:	00035b67 	.word	0x00035b67

00018ee4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18ee4:	b580      	push	{r7, lr}
   18ee6:	b084      	sub	sp, #16
   18ee8:	af00      	add	r7, sp, #0
   18eea:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18eec:	230f      	movs	r3, #15
   18eee:	18fb      	adds	r3, r7, r3
   18ef0:	2200      	movs	r2, #0
   18ef2:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18ef4:	2300      	movs	r3, #0
   18ef6:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18ef8:	e018      	b.n	18f2c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18efa:	687b      	ldr	r3, [r7, #4]
   18efc:	781b      	ldrb	r3, [r3, #0]
   18efe:	2b20      	cmp	r3, #32
   18f00:	d10f      	bne.n	18f22 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18f02:	68bb      	ldr	r3, [r7, #8]
   18f04:	2b01      	cmp	r3, #1
   18f06:	d00e      	beq.n	18f26 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18f08:	230f      	movs	r3, #15
   18f0a:	18fb      	adds	r3, r7, r3
   18f0c:	781b      	ldrb	r3, [r3, #0]
   18f0e:	b25b      	sxtb	r3, r3
   18f10:	b2db      	uxtb	r3, r3
   18f12:	3301      	adds	r3, #1
   18f14:	b2da      	uxtb	r2, r3
   18f16:	230f      	movs	r3, #15
   18f18:	18fb      	adds	r3, r7, r3
   18f1a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18f1c:	2301      	movs	r3, #1
   18f1e:	60bb      	str	r3, [r7, #8]
   18f20:	e001      	b.n	18f26 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18f22:	2300      	movs	r3, #0
   18f24:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18f26:	687b      	ldr	r3, [r7, #4]
   18f28:	3301      	adds	r3, #1
   18f2a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18f2c:	687b      	ldr	r3, [r7, #4]
   18f2e:	781b      	ldrb	r3, [r3, #0]
   18f30:	2b00      	cmp	r3, #0
   18f32:	d1e2      	bne.n	18efa <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18f34:	68bb      	ldr	r3, [r7, #8]
   18f36:	2b01      	cmp	r3, #1
   18f38:	d109      	bne.n	18f4e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18f3a:	230f      	movs	r3, #15
   18f3c:	18fb      	adds	r3, r7, r3
   18f3e:	781b      	ldrb	r3, [r3, #0]
   18f40:	b25b      	sxtb	r3, r3
   18f42:	b2db      	uxtb	r3, r3
   18f44:	3b01      	subs	r3, #1
   18f46:	b2da      	uxtb	r2, r3
   18f48:	230f      	movs	r3, #15
   18f4a:	18fb      	adds	r3, r7, r3
   18f4c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18f4e:	230f      	movs	r3, #15
   18f50:	18fb      	adds	r3, r7, r3
   18f52:	781b      	ldrb	r3, [r3, #0]
   18f54:	b25b      	sxtb	r3, r3
}
   18f56:	0018      	movs	r0, r3
   18f58:	46bd      	mov	sp, r7
   18f5a:	b004      	add	sp, #16
   18f5c:	bd80      	pop	{r7, pc}
	...

00018f60 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18f60:	b580      	push	{r7, lr}
   18f62:	b082      	sub	sp, #8
   18f64:	af00      	add	r7, sp, #0
   18f66:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18f68:	687b      	ldr	r3, [r7, #4]
   18f6a:	0018      	movs	r0, r3
   18f6c:	4b03      	ldr	r3, [pc, #12]	; (18f7c <prvTraceGetQueueNumber+0x1c>)
   18f6e:	4798      	blx	r3
   18f70:	0003      	movs	r3, r0
}
   18f72:	0018      	movs	r0, r3
   18f74:	46bd      	mov	sp, r7
   18f76:	b002      	add	sp, #8
   18f78:	bd80      	pop	{r7, pc}
   18f7a:	46c0      	nop			; (mov r8, r8)
   18f7c:	0001c725 	.word	0x0001c725

00018f80 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18f80:	b580      	push	{r7, lr}
   18f82:	b082      	sub	sp, #8
   18f84:	af00      	add	r7, sp, #0
   18f86:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18f88:	687b      	ldr	r3, [r7, #4]
   18f8a:	0018      	movs	r0, r3
   18f8c:	4b03      	ldr	r3, [pc, #12]	; (18f9c <prvTraceGetQueueType+0x1c>)
   18f8e:	4798      	blx	r3
   18f90:	0003      	movs	r3, r0
}
   18f92:	0018      	movs	r0, r3
   18f94:	46bd      	mov	sp, r7
   18f96:	b002      	add	sp, #8
   18f98:	bd80      	pop	{r7, pc}
   18f9a:	46c0      	nop			; (mov r8, r8)
   18f9c:	0001c751 	.word	0x0001c751

00018fa0 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18fa0:	b580      	push	{r7, lr}
   18fa2:	b082      	sub	sp, #8
   18fa4:	af00      	add	r7, sp, #0
   18fa6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18fa8:	687b      	ldr	r3, [r7, #4]
   18faa:	0018      	movs	r0, r3
   18fac:	4b03      	ldr	r3, [pc, #12]	; (18fbc <prvTraceGetTaskNumberLow16+0x1c>)
   18fae:	4798      	blx	r3
   18fb0:	0003      	movs	r3, r0
   18fb2:	b29b      	uxth	r3, r3
}
   18fb4:	0018      	movs	r0, r3
   18fb6:	46bd      	mov	sp, r7
   18fb8:	b002      	add	sp, #8
   18fba:	bd80      	pop	{r7, pc}
   18fbc:	0001da81 	.word	0x0001da81

00018fc0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18fc0:	b580      	push	{r7, lr}
   18fc2:	b082      	sub	sp, #8
   18fc4:	af00      	add	r7, sp, #0
   18fc6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   18fc8:	687b      	ldr	r3, [r7, #4]
   18fca:	0018      	movs	r0, r3
   18fcc:	4b04      	ldr	r3, [pc, #16]	; (18fe0 <prvTraceGetTaskNumberHigh16+0x20>)
   18fce:	4798      	blx	r3
   18fd0:	0003      	movs	r3, r0
   18fd2:	0c1b      	lsrs	r3, r3, #16
   18fd4:	b29b      	uxth	r3, r3
}
   18fd6:	0018      	movs	r0, r3
   18fd8:	46bd      	mov	sp, r7
   18fda:	b002      	add	sp, #8
   18fdc:	bd80      	pop	{r7, pc}
   18fde:	46c0      	nop			; (mov r8, r8)
   18fe0:	0001da81 	.word	0x0001da81

00018fe4 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18fe4:	b580      	push	{r7, lr}
   18fe6:	b082      	sub	sp, #8
   18fe8:	af00      	add	r7, sp, #0
   18fea:	6078      	str	r0, [r7, #4]
   18fec:	000a      	movs	r2, r1
   18fee:	1cbb      	adds	r3, r7, #2
   18ff0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18ff2:	687b      	ldr	r3, [r7, #4]
   18ff4:	0018      	movs	r0, r3
   18ff6:	4b08      	ldr	r3, [pc, #32]	; (19018 <prvTraceSetTaskNumberLow16+0x34>)
   18ff8:	4798      	blx	r3
   18ffa:	0003      	movs	r3, r0
   18ffc:	0c1b      	lsrs	r3, r3, #16
   18ffe:	041a      	lsls	r2, r3, #16
   19000:	1cbb      	adds	r3, r7, #2
   19002:	881b      	ldrh	r3, [r3, #0]
   19004:	431a      	orrs	r2, r3
   19006:	687b      	ldr	r3, [r7, #4]
   19008:	0011      	movs	r1, r2
   1900a:	0018      	movs	r0, r3
   1900c:	4b03      	ldr	r3, [pc, #12]	; (1901c <prvTraceSetTaskNumberLow16+0x38>)
   1900e:	4798      	blx	r3
}
   19010:	46c0      	nop			; (mov r8, r8)
   19012:	46bd      	mov	sp, r7
   19014:	b002      	add	sp, #8
   19016:	bd80      	pop	{r7, pc}
   19018:	0001da81 	.word	0x0001da81
   1901c:	0001daa9 	.word	0x0001daa9

00019020 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   19020:	b580      	push	{r7, lr}
   19022:	b082      	sub	sp, #8
   19024:	af00      	add	r7, sp, #0
   19026:	6078      	str	r0, [r7, #4]
   19028:	000a      	movs	r2, r1
   1902a:	1cbb      	adds	r3, r7, #2
   1902c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1902e:	687b      	ldr	r3, [r7, #4]
   19030:	0018      	movs	r0, r3
   19032:	4b09      	ldr	r3, [pc, #36]	; (19058 <prvTraceSetTaskNumberHigh16+0x38>)
   19034:	4798      	blx	r3
   19036:	0003      	movs	r3, r0
   19038:	041b      	lsls	r3, r3, #16
   1903a:	0c1a      	lsrs	r2, r3, #16
   1903c:	1cbb      	adds	r3, r7, #2
   1903e:	881b      	ldrh	r3, [r3, #0]
   19040:	041b      	lsls	r3, r3, #16
   19042:	431a      	orrs	r2, r3
   19044:	687b      	ldr	r3, [r7, #4]
   19046:	0011      	movs	r1, r2
   19048:	0018      	movs	r0, r3
   1904a:	4b04      	ldr	r3, [pc, #16]	; (1905c <prvTraceSetTaskNumberHigh16+0x3c>)
   1904c:	4798      	blx	r3
}
   1904e:	46c0      	nop			; (mov r8, r8)
   19050:	46bd      	mov	sp, r7
   19052:	b002      	add	sp, #8
   19054:	bd80      	pop	{r7, pc}
   19056:	46c0      	nop			; (mov r8, r8)
   19058:	0001da81 	.word	0x0001da81
   1905c:	0001daa9 	.word	0x0001daa9

00019060 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   19060:	b580      	push	{r7, lr}
   19062:	b082      	sub	sp, #8
   19064:	af00      	add	r7, sp, #0
   19066:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   19068:	687b      	ldr	r3, [r7, #4]
   1906a:	0018      	movs	r0, r3
   1906c:	4b03      	ldr	r3, [pc, #12]	; (1907c <prvTraceGetQueueNumberLow16+0x1c>)
   1906e:	4798      	blx	r3
   19070:	0003      	movs	r3, r0
   19072:	b29b      	uxth	r3, r3
}
   19074:	0018      	movs	r0, r3
   19076:	46bd      	mov	sp, r7
   19078:	b002      	add	sp, #8
   1907a:	bd80      	pop	{r7, pc}
   1907c:	00018f61 	.word	0x00018f61

00019080 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   19080:	b580      	push	{r7, lr}
   19082:	b082      	sub	sp, #8
   19084:	af00      	add	r7, sp, #0
   19086:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   19088:	687b      	ldr	r3, [r7, #4]
   1908a:	0018      	movs	r0, r3
   1908c:	4b04      	ldr	r3, [pc, #16]	; (190a0 <prvTraceGetQueueNumberHigh16+0x20>)
   1908e:	4798      	blx	r3
   19090:	0003      	movs	r3, r0
   19092:	0c1b      	lsrs	r3, r3, #16
   19094:	b29b      	uxth	r3, r3
}
   19096:	0018      	movs	r0, r3
   19098:	46bd      	mov	sp, r7
   1909a:	b002      	add	sp, #8
   1909c:	bd80      	pop	{r7, pc}
   1909e:	46c0      	nop			; (mov r8, r8)
   190a0:	00018f61 	.word	0x00018f61

000190a4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   190a4:	b580      	push	{r7, lr}
   190a6:	b082      	sub	sp, #8
   190a8:	af00      	add	r7, sp, #0
   190aa:	6078      	str	r0, [r7, #4]
   190ac:	000a      	movs	r2, r1
   190ae:	1cbb      	adds	r3, r7, #2
   190b0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   190b2:	687b      	ldr	r3, [r7, #4]
   190b4:	0018      	movs	r0, r3
   190b6:	4b08      	ldr	r3, [pc, #32]	; (190d8 <prvTraceSetQueueNumberLow16+0x34>)
   190b8:	4798      	blx	r3
   190ba:	0003      	movs	r3, r0
   190bc:	0c1b      	lsrs	r3, r3, #16
   190be:	041a      	lsls	r2, r3, #16
   190c0:	1cbb      	adds	r3, r7, #2
   190c2:	881b      	ldrh	r3, [r3, #0]
   190c4:	431a      	orrs	r2, r3
   190c6:	687b      	ldr	r3, [r7, #4]
   190c8:	0011      	movs	r1, r2
   190ca:	0018      	movs	r0, r3
   190cc:	4b03      	ldr	r3, [pc, #12]	; (190dc <prvTraceSetQueueNumberLow16+0x38>)
   190ce:	4798      	blx	r3
}
   190d0:	46c0      	nop			; (mov r8, r8)
   190d2:	46bd      	mov	sp, r7
   190d4:	b002      	add	sp, #8
   190d6:	bd80      	pop	{r7, pc}
   190d8:	00018f61 	.word	0x00018f61
   190dc:	0001c739 	.word	0x0001c739

000190e0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   190e0:	b580      	push	{r7, lr}
   190e2:	b082      	sub	sp, #8
   190e4:	af00      	add	r7, sp, #0
   190e6:	6078      	str	r0, [r7, #4]
   190e8:	000a      	movs	r2, r1
   190ea:	1cbb      	adds	r3, r7, #2
   190ec:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   190ee:	687b      	ldr	r3, [r7, #4]
   190f0:	0018      	movs	r0, r3
   190f2:	4b09      	ldr	r3, [pc, #36]	; (19118 <prvTraceSetQueueNumberHigh16+0x38>)
   190f4:	4798      	blx	r3
   190f6:	0003      	movs	r3, r0
   190f8:	041b      	lsls	r3, r3, #16
   190fa:	0c1a      	lsrs	r2, r3, #16
   190fc:	1cbb      	adds	r3, r7, #2
   190fe:	881b      	ldrh	r3, [r3, #0]
   19100:	041b      	lsls	r3, r3, #16
   19102:	431a      	orrs	r2, r3
   19104:	687b      	ldr	r3, [r7, #4]
   19106:	0011      	movs	r1, r2
   19108:	0018      	movs	r0, r3
   1910a:	4b04      	ldr	r3, [pc, #16]	; (1911c <prvTraceSetQueueNumberHigh16+0x3c>)
   1910c:	4798      	blx	r3
}
   1910e:	46c0      	nop			; (mov r8, r8)
   19110:	46bd      	mov	sp, r7
   19112:	b002      	add	sp, #8
   19114:	bd80      	pop	{r7, pc}
   19116:	46c0      	nop			; (mov r8, r8)
   19118:	00018f61 	.word	0x00018f61
   1911c:	0001c739 	.word	0x0001c739

00019120 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   19120:	b580      	push	{r7, lr}
   19122:	b084      	sub	sp, #16
   19124:	af00      	add	r7, sp, #0
   19126:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   19128:	2300      	movs	r3, #0
   1912a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1912c:	2300      	movs	r3, #0
   1912e:	60bb      	str	r3, [r7, #8]
   19130:	e018      	b.n	19164 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   19132:	4b14      	ldr	r3, [pc, #80]	; (19184 <prvAddTaskToStackMonitor+0x64>)
   19134:	68ba      	ldr	r2, [r7, #8]
   19136:	00d2      	lsls	r2, r2, #3
   19138:	58d3      	ldr	r3, [r2, r3]
   1913a:	2b00      	cmp	r3, #0
   1913c:	d10f      	bne.n	1915e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1913e:	4b11      	ldr	r3, [pc, #68]	; (19184 <prvAddTaskToStackMonitor+0x64>)
   19140:	68ba      	ldr	r2, [r7, #8]
   19142:	00d2      	lsls	r2, r2, #3
   19144:	6879      	ldr	r1, [r7, #4]
   19146:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   19148:	4a0e      	ldr	r2, [pc, #56]	; (19184 <prvAddTaskToStackMonitor+0x64>)
   1914a:	68bb      	ldr	r3, [r7, #8]
   1914c:	00db      	lsls	r3, r3, #3
   1914e:	18d3      	adds	r3, r2, r3
   19150:	3304      	adds	r3, #4
   19152:	2201      	movs	r2, #1
   19154:	4252      	negs	r2, r2
   19156:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   19158:	2301      	movs	r3, #1
   1915a:	60fb      	str	r3, [r7, #12]
			break;
   1915c:	e005      	b.n	1916a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1915e:	68bb      	ldr	r3, [r7, #8]
   19160:	3301      	adds	r3, #1
   19162:	60bb      	str	r3, [r7, #8]
   19164:	68bb      	ldr	r3, [r7, #8]
   19166:	2b09      	cmp	r3, #9
   19168:	dde3      	ble.n	19132 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1916a:	68fb      	ldr	r3, [r7, #12]
   1916c:	2b00      	cmp	r3, #0
   1916e:	d104      	bne.n	1917a <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   19170:	4b05      	ldr	r3, [pc, #20]	; (19188 <prvAddTaskToStackMonitor+0x68>)
   19172:	681b      	ldr	r3, [r3, #0]
   19174:	1c5a      	adds	r2, r3, #1
   19176:	4b04      	ldr	r3, [pc, #16]	; (19188 <prvAddTaskToStackMonitor+0x68>)
   19178:	601a      	str	r2, [r3, #0]
	}
}
   1917a:	46c0      	nop			; (mov r8, r8)
   1917c:	46bd      	mov	sp, r7
   1917e:	b004      	add	sp, #16
   19180:	bd80      	pop	{r7, pc}
   19182:	46c0      	nop			; (mov r8, r8)
   19184:	20000ce0 	.word	0x20000ce0
   19188:	20000d30 	.word	0x20000d30

0001918c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1918c:	b590      	push	{r4, r7, lr}
   1918e:	b085      	sub	sp, #20
   19190:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   19192:	2300      	movs	r3, #0
   19194:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   19196:	4b2b      	ldr	r3, [pc, #172]	; (19244 <prvReportStackUsage+0xb8>)
   19198:	681b      	ldr	r3, [r3, #0]
   1919a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1919c:	4b29      	ldr	r3, [pc, #164]	; (19244 <prvReportStackUsage+0xb8>)
   1919e:	681a      	ldr	r2, [r3, #0]
   191a0:	4b29      	ldr	r3, [pc, #164]	; (19248 <prvReportStackUsage+0xbc>)
   191a2:	00d2      	lsls	r2, r2, #3
   191a4:	58d3      	ldr	r3, [r2, r3]
   191a6:	2b00      	cmp	r3, #0
   191a8:	d035      	beq.n	19216 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   191aa:	4b26      	ldr	r3, [pc, #152]	; (19244 <prvReportStackUsage+0xb8>)
   191ac:	681a      	ldr	r2, [r3, #0]
   191ae:	4b26      	ldr	r3, [pc, #152]	; (19248 <prvReportStackUsage+0xbc>)
   191b0:	00d2      	lsls	r2, r2, #3
   191b2:	58d3      	ldr	r3, [r2, r3]
   191b4:	0018      	movs	r0, r3
   191b6:	4b25      	ldr	r3, [pc, #148]	; (1924c <prvReportStackUsage+0xc0>)
   191b8:	4798      	blx	r3
   191ba:	0003      	movs	r3, r0
   191bc:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   191be:	4b21      	ldr	r3, [pc, #132]	; (19244 <prvReportStackUsage+0xb8>)
   191c0:	681b      	ldr	r3, [r3, #0]
   191c2:	4a21      	ldr	r2, [pc, #132]	; (19248 <prvReportStackUsage+0xbc>)
   191c4:	00db      	lsls	r3, r3, #3
   191c6:	18d3      	adds	r3, r2, r3
   191c8:	3304      	adds	r3, #4
   191ca:	681a      	ldr	r2, [r3, #0]
   191cc:	687b      	ldr	r3, [r7, #4]
   191ce:	429a      	cmp	r2, r3
   191d0:	d907      	bls.n	191e2 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   191d2:	4b1c      	ldr	r3, [pc, #112]	; (19244 <prvReportStackUsage+0xb8>)
   191d4:	681b      	ldr	r3, [r3, #0]
   191d6:	4a1c      	ldr	r2, [pc, #112]	; (19248 <prvReportStackUsage+0xbc>)
   191d8:	00db      	lsls	r3, r3, #3
   191da:	18d3      	adds	r3, r2, r3
   191dc:	3304      	adds	r3, #4
   191de:	687a      	ldr	r2, [r7, #4]
   191e0:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   191e2:	4b18      	ldr	r3, [pc, #96]	; (19244 <prvReportStackUsage+0xb8>)
   191e4:	681a      	ldr	r2, [r3, #0]
   191e6:	4b18      	ldr	r3, [pc, #96]	; (19248 <prvReportStackUsage+0xbc>)
   191e8:	00d2      	lsls	r2, r2, #3
   191ea:	58d3      	ldr	r3, [r2, r3]
   191ec:	0018      	movs	r0, r3
   191ee:	4b18      	ldr	r3, [pc, #96]	; (19250 <prvReportStackUsage+0xc4>)
   191f0:	4798      	blx	r3
   191f2:	0003      	movs	r3, r0
   191f4:	b2db      	uxtb	r3, r3
   191f6:	0019      	movs	r1, r3
   191f8:	4b12      	ldr	r3, [pc, #72]	; (19244 <prvReportStackUsage+0xb8>)
   191fa:	681b      	ldr	r3, [r3, #0]
   191fc:	4a12      	ldr	r2, [pc, #72]	; (19248 <prvReportStackUsage+0xbc>)
   191fe:	00db      	lsls	r3, r3, #3
   19200:	18d3      	adds	r3, r2, r3
   19202:	3304      	adds	r3, #4
   19204:	681b      	ldr	r3, [r3, #0]
   19206:	000a      	movs	r2, r1
   19208:	2103      	movs	r1, #3
   1920a:	20ea      	movs	r0, #234	; 0xea
   1920c:	4c11      	ldr	r4, [pc, #68]	; (19254 <prvReportStackUsage+0xc8>)
   1920e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   19210:	68fb      	ldr	r3, [r7, #12]
   19212:	3301      	adds	r3, #1
   19214:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   19216:	4b0b      	ldr	r3, [pc, #44]	; (19244 <prvReportStackUsage+0xb8>)
   19218:	681b      	ldr	r3, [r3, #0]
   1921a:	1c5a      	adds	r2, r3, #1
   1921c:	4b0e      	ldr	r3, [pc, #56]	; (19258 <prvReportStackUsage+0xcc>)
   1921e:	210a      	movs	r1, #10
   19220:	0010      	movs	r0, r2
   19222:	4798      	blx	r3
   19224:	000b      	movs	r3, r1
   19226:	001a      	movs	r2, r3
   19228:	4b06      	ldr	r3, [pc, #24]	; (19244 <prvReportStackUsage+0xb8>)
   1922a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1922c:	68fb      	ldr	r3, [r7, #12]
   1922e:	2b00      	cmp	r3, #0
   19230:	dc04      	bgt.n	1923c <prvReportStackUsage+0xb0>
   19232:	4b04      	ldr	r3, [pc, #16]	; (19244 <prvReportStackUsage+0xb8>)
   19234:	681a      	ldr	r2, [r3, #0]
   19236:	68bb      	ldr	r3, [r7, #8]
   19238:	429a      	cmp	r2, r3
   1923a:	d1af      	bne.n	1919c <prvReportStackUsage+0x10>
}
   1923c:	46c0      	nop			; (mov r8, r8)
   1923e:	46bd      	mov	sp, r7
   19240:	b005      	add	sp, #20
   19242:	bd90      	pop	{r4, r7, pc}
   19244:	20000d34 	.word	0x20000d34
   19248:	20000ce0 	.word	0x20000ce0
   1924c:	0001dc21 	.word	0x0001dc21
   19250:	00018fa1 	.word	0x00018fa1
   19254:	00019ae9 	.word	0x00019ae9
   19258:	00033a85 	.word	0x00033a85

0001925c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1925c:	b580      	push	{r7, lr}
   1925e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   19260:	4b02      	ldr	r3, [pc, #8]	; (1926c <prvTraceGetCurrentTaskHandle+0x10>)
   19262:	4798      	blx	r3
   19264:	0003      	movs	r3, r0
}
   19266:	0018      	movs	r0, r3
   19268:	46bd      	mov	sp, r7
   1926a:	bd80      	pop	{r7, pc}
   1926c:	0001dccd 	.word	0x0001dccd

00019270 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   19270:	b590      	push	{r4, r7, lr}
   19272:	b085      	sub	sp, #20
   19274:	af02      	add	r7, sp, #8
   19276:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   19278:	4b14      	ldr	r3, [pc, #80]	; (192cc <vTraceEnable+0x5c>)
   1927a:	4798      	blx	r3

	if (startOption == TRC_START)
   1927c:	687b      	ldr	r3, [r7, #4]
   1927e:	2b01      	cmp	r3, #1
   19280:	d102      	bne.n	19288 <vTraceEnable+0x18>
	{
		vTraceStart();
   19282:	4b13      	ldr	r3, [pc, #76]	; (192d0 <vTraceEnable+0x60>)
   19284:	4798      	blx	r3
   19286:	e00e      	b.n	192a6 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   19288:	687b      	ldr	r3, [r7, #4]
   1928a:	2b02      	cmp	r3, #2
   1928c:	d104      	bne.n	19298 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1928e:	4b11      	ldr	r3, [pc, #68]	; (192d4 <vTraceEnable+0x64>)
   19290:	0018      	movs	r0, r3
   19292:	4b11      	ldr	r3, [pc, #68]	; (192d8 <vTraceEnable+0x68>)
   19294:	4798      	blx	r3
   19296:	e006      	b.n	192a6 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   19298:	687b      	ldr	r3, [r7, #4]
   1929a:	2b00      	cmp	r3, #0
   1929c:	d003      	beq.n	192a6 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1929e:	4b0f      	ldr	r3, [pc, #60]	; (192dc <vTraceEnable+0x6c>)
   192a0:	0018      	movs	r0, r3
   192a2:	4b0d      	ldr	r3, [pc, #52]	; (192d8 <vTraceEnable+0x68>)
   192a4:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   192a6:	4b0e      	ldr	r3, [pc, #56]	; (192e0 <vTraceEnable+0x70>)
   192a8:	681b      	ldr	r3, [r3, #0]
   192aa:	2b00      	cmp	r3, #0
   192ac:	d10a      	bne.n	192c4 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   192ae:	2396      	movs	r3, #150	; 0x96
   192b0:	005a      	lsls	r2, r3, #1
   192b2:	490c      	ldr	r1, [pc, #48]	; (192e4 <vTraceEnable+0x74>)
   192b4:	480c      	ldr	r0, [pc, #48]	; (192e8 <vTraceEnable+0x78>)
   192b6:	4b0a      	ldr	r3, [pc, #40]	; (192e0 <vTraceEnable+0x70>)
   192b8:	9301      	str	r3, [sp, #4]
   192ba:	2304      	movs	r3, #4
   192bc:	9300      	str	r3, [sp, #0]
   192be:	2300      	movs	r3, #0
   192c0:	4c0a      	ldr	r4, [pc, #40]	; (192ec <vTraceEnable+0x7c>)
   192c2:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   192c4:	46c0      	nop			; (mov r8, r8)
   192c6:	46bd      	mov	sp, r7
   192c8:	b003      	add	sp, #12
   192ca:	bd90      	pop	{r4, r7, pc}
   192cc:	0001a1b5 	.word	0x0001a1b5
   192d0:	0001970d 	.word	0x0001970d
   192d4:	00037e3c 	.word	0x00037e3c
   192d8:	0001a85d 	.word	0x0001a85d
   192dc:	00037e7c 	.word	0x00037e7c
   192e0:	20000cdc 	.word	0x20000cdc
   192e4:	00037eb0 	.word	0x00037eb0
   192e8:	000192f1 	.word	0x000192f1
   192ec:	0001cc25 	.word	0x0001cc25

000192f0 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   192f0:	b580      	push	{r7, lr}
   192f2:	b082      	sub	sp, #8
   192f4:	af00      	add	r7, sp, #0
   192f6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   192f8:	4b04      	ldr	r3, [pc, #16]	; (1930c <TzCtrl+0x1c>)
   192fa:	4798      	blx	r3
   192fc:	1e03      	subs	r3, r0, #0
   192fe:	d001      	beq.n	19304 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   19300:	4b03      	ldr	r3, [pc, #12]	; (19310 <TzCtrl+0x20>)
   19302:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   19304:	2004      	movs	r0, #4
   19306:	4b03      	ldr	r3, [pc, #12]	; (19314 <TzCtrl+0x24>)
   19308:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1930a:	e7f5      	b.n	192f8 <TzCtrl+0x8>
   1930c:	00019751 	.word	0x00019751
   19310:	0001918d 	.word	0x0001918d
   19314:	0001cfc1 	.word	0x0001cfc1

00019318 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   19318:	b580      	push	{r7, lr}
   1931a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1931c:	4b60      	ldr	r3, [pc, #384]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1931e:	681b      	ldr	r3, [r3, #0]
   19320:	2209      	movs	r2, #9
   19322:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   19324:	4b5e      	ldr	r3, [pc, #376]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19326:	681b      	ldr	r3, [r3, #0]
   19328:	2264      	movs	r2, #100	; 0x64
   1932a:	210a      	movs	r1, #10
   1932c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1932e:	4b5c      	ldr	r3, [pc, #368]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19330:	681b      	ldr	r3, [r3, #0]
   19332:	2265      	movs	r2, #101	; 0x65
   19334:	210a      	movs	r1, #10
   19336:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   19338:	4b59      	ldr	r3, [pc, #356]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1933a:	681b      	ldr	r3, [r3, #0]
   1933c:	2266      	movs	r2, #102	; 0x66
   1933e:	210a      	movs	r1, #10
   19340:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   19342:	4b57      	ldr	r3, [pc, #348]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19344:	681b      	ldr	r3, [r3, #0]
   19346:	2267      	movs	r2, #103	; 0x67
   19348:	210f      	movs	r1, #15
   1934a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1934c:	4b54      	ldr	r3, [pc, #336]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1934e:	681b      	ldr	r3, [r3, #0]
   19350:	2268      	movs	r2, #104	; 0x68
   19352:	2105      	movs	r1, #5
   19354:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   19356:	4b52      	ldr	r3, [pc, #328]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19358:	681b      	ldr	r3, [r3, #0]
   1935a:	2269      	movs	r2, #105	; 0x69
   1935c:	2105      	movs	r1, #5
   1935e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   19360:	4b4f      	ldr	r3, [pc, #316]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19362:	681b      	ldr	r3, [r3, #0]
   19364:	226a      	movs	r2, #106	; 0x6a
   19366:	2105      	movs	r1, #5
   19368:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1936a:	4b4d      	ldr	r3, [pc, #308]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1936c:	681b      	ldr	r3, [r3, #0]
   1936e:	226b      	movs	r2, #107	; 0x6b
   19370:	2105      	movs	r1, #5
   19372:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   19374:	4b4a      	ldr	r3, [pc, #296]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19376:	681b      	ldr	r3, [r3, #0]
   19378:	226c      	movs	r2, #108	; 0x6c
   1937a:	2105      	movs	r1, #5
   1937c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1937e:	4b48      	ldr	r3, [pc, #288]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19380:	681b      	ldr	r3, [r3, #0]
   19382:	2270      	movs	r2, #112	; 0x70
   19384:	210f      	movs	r1, #15
   19386:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   19388:	4b45      	ldr	r3, [pc, #276]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1938a:	681b      	ldr	r3, [r3, #0]
   1938c:	2271      	movs	r2, #113	; 0x71
   1938e:	210f      	movs	r1, #15
   19390:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   19392:	4b43      	ldr	r3, [pc, #268]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19394:	681b      	ldr	r3, [r3, #0]
   19396:	2272      	movs	r2, #114	; 0x72
   19398:	210f      	movs	r1, #15
   1939a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1939c:	4b40      	ldr	r3, [pc, #256]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1939e:	681b      	ldr	r3, [r3, #0]
   193a0:	2273      	movs	r2, #115	; 0x73
   193a2:	210f      	movs	r1, #15
   193a4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   193a6:	4b3e      	ldr	r3, [pc, #248]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193a8:	681b      	ldr	r3, [r3, #0]
   193aa:	2274      	movs	r2, #116	; 0x74
   193ac:	210f      	movs	r1, #15
   193ae:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   193b0:	4b3b      	ldr	r3, [pc, #236]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193b2:	681b      	ldr	r3, [r3, #0]
   193b4:	2275      	movs	r2, #117	; 0x75
   193b6:	210f      	movs	r1, #15
   193b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   193ba:	4b39      	ldr	r3, [pc, #228]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193bc:	681b      	ldr	r3, [r3, #0]
   193be:	2276      	movs	r2, #118	; 0x76
   193c0:	210f      	movs	r1, #15
   193c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   193c4:	4b36      	ldr	r3, [pc, #216]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193c6:	681b      	ldr	r3, [r3, #0]
   193c8:	2277      	movs	r2, #119	; 0x77
   193ca:	210f      	movs	r1, #15
   193cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   193ce:	4b34      	ldr	r3, [pc, #208]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193d0:	681b      	ldr	r3, [r3, #0]
   193d2:	2278      	movs	r2, #120	; 0x78
   193d4:	210f      	movs	r1, #15
   193d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   193d8:	4b31      	ldr	r3, [pc, #196]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193da:	681b      	ldr	r3, [r3, #0]
   193dc:	227c      	movs	r2, #124	; 0x7c
   193de:	2110      	movs	r1, #16
   193e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   193e2:	4b2f      	ldr	r3, [pc, #188]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193e4:	681b      	ldr	r3, [r3, #0]
   193e6:	227d      	movs	r2, #125	; 0x7d
   193e8:	2110      	movs	r1, #16
   193ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   193ec:	4b2c      	ldr	r3, [pc, #176]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193ee:	681b      	ldr	r3, [r3, #0]
   193f0:	227e      	movs	r2, #126	; 0x7e
   193f2:	2110      	movs	r1, #16
   193f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   193f6:	4b2a      	ldr	r3, [pc, #168]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   193f8:	681b      	ldr	r3, [r3, #0]
   193fa:	227f      	movs	r2, #127	; 0x7f
   193fc:	2113      	movs	r1, #19
   193fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   19400:	4b27      	ldr	r3, [pc, #156]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19402:	681b      	ldr	r3, [r3, #0]
   19404:	2280      	movs	r2, #128	; 0x80
   19406:	2111      	movs	r1, #17
   19408:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1940a:	4b25      	ldr	r3, [pc, #148]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1940c:	681b      	ldr	r3, [r3, #0]
   1940e:	2281      	movs	r2, #129	; 0x81
   19410:	2110      	movs	r1, #16
   19412:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   19414:	4b22      	ldr	r3, [pc, #136]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19416:	681b      	ldr	r3, [r3, #0]
   19418:	2282      	movs	r2, #130	; 0x82
   1941a:	2113      	movs	r1, #19
   1941c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1941e:	4b20      	ldr	r3, [pc, #128]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19420:	681b      	ldr	r3, [r3, #0]
   19422:	2283      	movs	r2, #131	; 0x83
   19424:	2113      	movs	r1, #19
   19426:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   19428:	4b1d      	ldr	r3, [pc, #116]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1942a:	681b      	ldr	r3, [r3, #0]
   1942c:	2284      	movs	r2, #132	; 0x84
   1942e:	2113      	movs	r1, #19
   19430:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   19432:	4b1b      	ldr	r3, [pc, #108]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19434:	681b      	ldr	r3, [r3, #0]
   19436:	2288      	movs	r2, #136	; 0x88
   19438:	2100      	movs	r1, #0
   1943a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1943c:	4b18      	ldr	r3, [pc, #96]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1943e:	681b      	ldr	r3, [r3, #0]
   19440:	228a      	movs	r2, #138	; 0x8a
   19442:	21a0      	movs	r1, #160	; 0xa0
   19444:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   19446:	4b16      	ldr	r3, [pc, #88]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19448:	681b      	ldr	r3, [r3, #0]
   1944a:	228c      	movs	r2, #140	; 0x8c
   1944c:	21a0      	movs	r1, #160	; 0xa0
   1944e:	0049      	lsls	r1, r1, #1
   19450:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   19452:	4b13      	ldr	r3, [pc, #76]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19454:	681b      	ldr	r3, [r3, #0]
   19456:	228e      	movs	r2, #142	; 0x8e
   19458:	21f0      	movs	r1, #240	; 0xf0
   1945a:	0049      	lsls	r1, r1, #1
   1945c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1945e:	4b10      	ldr	r3, [pc, #64]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19460:	681b      	ldr	r3, [r3, #0]
   19462:	2290      	movs	r2, #144	; 0x90
   19464:	490f      	ldr	r1, [pc, #60]	; (194a4 <vTraceInitObjectPropertyTable+0x18c>)
   19466:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   19468:	4b0d      	ldr	r3, [pc, #52]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1946a:	681b      	ldr	r3, [r3, #0]
   1946c:	2292      	movs	r2, #146	; 0x92
   1946e:	490e      	ldr	r1, [pc, #56]	; (194a8 <vTraceInitObjectPropertyTable+0x190>)
   19470:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   19472:	4b0b      	ldr	r3, [pc, #44]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19474:	681b      	ldr	r3, [r3, #0]
   19476:	2294      	movs	r2, #148	; 0x94
   19478:	490c      	ldr	r1, [pc, #48]	; (194ac <vTraceInitObjectPropertyTable+0x194>)
   1947a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1947c:	4b08      	ldr	r3, [pc, #32]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   1947e:	681b      	ldr	r3, [r3, #0]
   19480:	2296      	movs	r2, #150	; 0x96
   19482:	490b      	ldr	r1, [pc, #44]	; (194b0 <vTraceInitObjectPropertyTable+0x198>)
   19484:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   19486:	4b06      	ldr	r3, [pc, #24]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19488:	681b      	ldr	r3, [r3, #0]
   1948a:	2298      	movs	r2, #152	; 0x98
   1948c:	218c      	movs	r1, #140	; 0x8c
   1948e:	00c9      	lsls	r1, r1, #3
   19490:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   19492:	4b03      	ldr	r3, [pc, #12]	; (194a0 <vTraceInitObjectPropertyTable+0x188>)
   19494:	681b      	ldr	r3, [r3, #0]
   19496:	4a07      	ldr	r2, [pc, #28]	; (194b4 <vTraceInitObjectPropertyTable+0x19c>)
   19498:	661a      	str	r2, [r3, #96]	; 0x60
}
   1949a:	46c0      	nop			; (mov r8, r8)
   1949c:	46bd      	mov	sp, r7
   1949e:	bd80      	pop	{r7, pc}
   194a0:	20000df4 	.word	0x20000df4
   194a4:	000002fd 	.word	0x000002fd
   194a8:	00000352 	.word	0x00000352
   194ac:	000003a2 	.word	0x000003a2
   194b0:	00000401 	.word	0x00000401
   194b4:	000004bf 	.word	0x000004bf

000194b8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   194b8:	b580      	push	{r7, lr}
   194ba:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   194bc:	4b2e      	ldr	r3, [pc, #184]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194be:	2200      	movs	r2, #0
   194c0:	825a      	strh	r2, [r3, #18]
   194c2:	4b2d      	ldr	r3, [pc, #180]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194c4:	8a5a      	ldrh	r2, [r3, #18]
   194c6:	4b2c      	ldr	r3, [pc, #176]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194c8:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   194ca:	4b2b      	ldr	r3, [pc, #172]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194cc:	220a      	movs	r2, #10
   194ce:	829a      	strh	r2, [r3, #20]
   194d0:	4b29      	ldr	r3, [pc, #164]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194d2:	8a9a      	ldrh	r2, [r3, #20]
   194d4:	4b28      	ldr	r3, [pc, #160]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194d6:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   194d8:	4b27      	ldr	r3, [pc, #156]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194da:	2214      	movs	r2, #20
   194dc:	82da      	strh	r2, [r3, #22]
   194de:	4b26      	ldr	r3, [pc, #152]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194e0:	8ada      	ldrh	r2, [r3, #22]
   194e2:	4b25      	ldr	r3, [pc, #148]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194e4:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   194e6:	4b24      	ldr	r3, [pc, #144]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194e8:	221e      	movs	r2, #30
   194ea:	831a      	strh	r2, [r3, #24]
   194ec:	4b22      	ldr	r3, [pc, #136]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194ee:	8b1a      	ldrh	r2, [r3, #24]
   194f0:	4b21      	ldr	r3, [pc, #132]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194f2:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   194f4:	4b20      	ldr	r3, [pc, #128]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194f6:	222d      	movs	r2, #45	; 0x2d
   194f8:	835a      	strh	r2, [r3, #26]
   194fa:	4b1f      	ldr	r3, [pc, #124]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   194fc:	8b5a      	ldrh	r2, [r3, #26]
   194fe:	4b1e      	ldr	r3, [pc, #120]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19500:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   19502:	4b1d      	ldr	r3, [pc, #116]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19504:	2232      	movs	r2, #50	; 0x32
   19506:	839a      	strh	r2, [r3, #28]
   19508:	4b1b      	ldr	r3, [pc, #108]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1950a:	8b9a      	ldrh	r2, [r3, #28]
   1950c:	4b1a      	ldr	r3, [pc, #104]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1950e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   19510:	4b19      	ldr	r3, [pc, #100]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19512:	2237      	movs	r2, #55	; 0x37
   19514:	83da      	strh	r2, [r3, #30]
   19516:	4b18      	ldr	r3, [pc, #96]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19518:	8bda      	ldrh	r2, [r3, #30]
   1951a:	4b17      	ldr	r3, [pc, #92]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1951c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1951e:	4b16      	ldr	r3, [pc, #88]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19520:	223c      	movs	r2, #60	; 0x3c
   19522:	841a      	strh	r2, [r3, #32]
   19524:	4b14      	ldr	r3, [pc, #80]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19526:	8c1a      	ldrh	r2, [r3, #32]
   19528:	4b13      	ldr	r3, [pc, #76]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1952a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1952c:	4b12      	ldr	r3, [pc, #72]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1952e:	2241      	movs	r2, #65	; 0x41
   19530:	845a      	strh	r2, [r3, #34]	; 0x22
   19532:	4b11      	ldr	r3, [pc, #68]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19534:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   19536:	4b10      	ldr	r3, [pc, #64]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19538:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1953a:	4b0f      	ldr	r3, [pc, #60]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1953c:	2209      	movs	r2, #9
   1953e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   19540:	4b0d      	ldr	r3, [pc, #52]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19542:	2213      	movs	r2, #19
   19544:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   19546:	4b0c      	ldr	r3, [pc, #48]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19548:	221d      	movs	r2, #29
   1954a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1954c:	4b0a      	ldr	r3, [pc, #40]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1954e:	222c      	movs	r2, #44	; 0x2c
   19550:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   19552:	4b09      	ldr	r3, [pc, #36]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19554:	2231      	movs	r2, #49	; 0x31
   19556:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   19558:	4b07      	ldr	r3, [pc, #28]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1955a:	2236      	movs	r2, #54	; 0x36
   1955c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1955e:	4b06      	ldr	r3, [pc, #24]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19560:	223b      	movs	r2, #59	; 0x3b
   19562:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   19564:	4b04      	ldr	r3, [pc, #16]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   19566:	2240      	movs	r2, #64	; 0x40
   19568:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1956a:	4b03      	ldr	r3, [pc, #12]	; (19578 <vTraceInitObjectHandleStack+0xc0>)
   1956c:	2245      	movs	r2, #69	; 0x45
   1956e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   19570:	46c0      	nop			; (mov r8, r8)
   19572:	46bd      	mov	sp, r7
   19574:	bd80      	pop	{r7, pc}
   19576:	46c0      	nop			; (mov r8, r8)
   19578:	20000d64 	.word	0x20000d64

0001957c <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1957c:	b580      	push	{r7, lr}
   1957e:	b082      	sub	sp, #8
   19580:	af00      	add	r7, sp, #0
   19582:	0002      	movs	r2, r0
   19584:	1dfb      	adds	r3, r7, #7
   19586:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   19588:	1dfb      	adds	r3, r7, #7
   1958a:	781b      	ldrb	r3, [r3, #0]
   1958c:	2b08      	cmp	r3, #8
   1958e:	d816      	bhi.n	195be <pszTraceGetErrorNotEnoughHandles+0x42>
   19590:	009a      	lsls	r2, r3, #2
   19592:	4b0d      	ldr	r3, [pc, #52]	; (195c8 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   19594:	18d3      	adds	r3, r2, r3
   19596:	681b      	ldr	r3, [r3, #0]
   19598:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1959a:	4b0c      	ldr	r3, [pc, #48]	; (195cc <pszTraceGetErrorNotEnoughHandles+0x50>)
   1959c:	e010      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1959e:	4b0c      	ldr	r3, [pc, #48]	; (195d0 <pszTraceGetErrorNotEnoughHandles+0x54>)
   195a0:	e00e      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   195a2:	4b0c      	ldr	r3, [pc, #48]	; (195d4 <pszTraceGetErrorNotEnoughHandles+0x58>)
   195a4:	e00c      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   195a6:	4b0c      	ldr	r3, [pc, #48]	; (195d8 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   195a8:	e00a      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   195aa:	4b0c      	ldr	r3, [pc, #48]	; (195dc <pszTraceGetErrorNotEnoughHandles+0x60>)
   195ac:	e008      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   195ae:	4b0c      	ldr	r3, [pc, #48]	; (195e0 <pszTraceGetErrorNotEnoughHandles+0x64>)
   195b0:	e006      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   195b2:	4b0c      	ldr	r3, [pc, #48]	; (195e4 <pszTraceGetErrorNotEnoughHandles+0x68>)
   195b4:	e004      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   195b6:	4b0c      	ldr	r3, [pc, #48]	; (195e8 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   195b8:	e002      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   195ba:	4b0c      	ldr	r3, [pc, #48]	; (195ec <pszTraceGetErrorNotEnoughHandles+0x70>)
   195bc:	e000      	b.n	195c0 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   195be:	4b0c      	ldr	r3, [pc, #48]	; (195f0 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   195c0:	0018      	movs	r0, r3
   195c2:	46bd      	mov	sp, r7
   195c4:	b002      	add	sp, #8
   195c6:	bd80      	pop	{r7, pc}
   195c8:	000381b8 	.word	0x000381b8
   195cc:	00037eb8 	.word	0x00037eb8
   195d0:	00037f00 	.word	0x00037f00
   195d4:	00037f48 	.word	0x00037f48
   195d8:	00037f9c 	.word	0x00037f9c
   195dc:	00037fe8 	.word	0x00037fe8
   195e0:	00038034 	.word	0x00038034
   195e4:	00038080 	.word	0x00038080
   195e8:	000380d4 	.word	0x000380d4
   195ec:	0003812c 	.word	0x0003812c
   195f0:	00038188 	.word	0x00038188

000195f4 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   195f4:	b590      	push	{r4, r7, lr}
   195f6:	b087      	sub	sp, #28
   195f8:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   195fa:	2317      	movs	r3, #23
   195fc:	18fb      	adds	r3, r7, r3
   195fe:	2200      	movs	r2, #0
   19600:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   19602:	4b36      	ldr	r3, [pc, #216]	; (196dc <uiTraceStart+0xe8>)
   19604:	681b      	ldr	r3, [r3, #0]
   19606:	2b00      	cmp	r3, #0
   19608:	d10b      	bne.n	19622 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1960a:	4b34      	ldr	r3, [pc, #208]	; (196dc <uiTraceStart+0xe8>)
   1960c:	681b      	ldr	r3, [r3, #0]
   1960e:	2b00      	cmp	r3, #0
   19610:	d105      	bne.n	1961e <uiTraceStart+0x2a>
   19612:	4b33      	ldr	r3, [pc, #204]	; (196e0 <uiTraceStart+0xec>)
   19614:	0018      	movs	r0, r3
   19616:	4b33      	ldr	r3, [pc, #204]	; (196e4 <uiTraceStart+0xf0>)
   19618:	4798      	blx	r3
   1961a:	2300      	movs	r3, #0
   1961c:	e059      	b.n	196d2 <uiTraceStart+0xde>
		return 0;
   1961e:	2300      	movs	r3, #0
   19620:	e057      	b.n	196d2 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   19622:	4b2e      	ldr	r3, [pc, #184]	; (196dc <uiTraceStart+0xe8>)
   19624:	681b      	ldr	r3, [r3, #0]
   19626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19628:	2b01      	cmp	r3, #1
   1962a:	d101      	bne.n	19630 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1962c:	2301      	movs	r3, #1
   1962e:	e050      	b.n	196d2 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   19630:	4b2d      	ldr	r3, [pc, #180]	; (196e8 <uiTraceStart+0xf4>)
   19632:	681b      	ldr	r3, [r3, #0]
   19634:	2b00      	cmp	r3, #0
   19636:	d149      	bne.n	196cc <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19638:	f3ef 8310 	mrs	r3, PRIMASK
   1963c:	60bb      	str	r3, [r7, #8]
  return(result);
   1963e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   19640:	613b      	str	r3, [r7, #16]
   19642:	2301      	movs	r3, #1
   19644:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19646:	68fb      	ldr	r3, [r7, #12]
   19648:	f383 8810 	msr	PRIMASK, r3
   1964c:	4b27      	ldr	r3, [pc, #156]	; (196ec <uiTraceStart+0xf8>)
   1964e:	681b      	ldr	r3, [r3, #0]
   19650:	1c5a      	adds	r2, r3, #1
   19652:	4b26      	ldr	r3, [pc, #152]	; (196ec <uiTraceStart+0xf8>)
   19654:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   19656:	4b21      	ldr	r3, [pc, #132]	; (196dc <uiTraceStart+0xe8>)
   19658:	681b      	ldr	r3, [r3, #0]
   1965a:	2201      	movs	r2, #1
   1965c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1965e:	4b24      	ldr	r3, [pc, #144]	; (196f0 <uiTraceStart+0xfc>)
   19660:	4798      	blx	r3
   19662:	0003      	movs	r3, r0
   19664:	0018      	movs	r0, r3
   19666:	4b23      	ldr	r3, [pc, #140]	; (196f4 <uiTraceStart+0x100>)
   19668:	4798      	blx	r3
   1966a:	0003      	movs	r3, r0
   1966c:	001a      	movs	r2, r3
   1966e:	2317      	movs	r3, #23
   19670:	18fb      	adds	r3, r7, r3
   19672:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   19674:	2317      	movs	r3, #23
   19676:	18fb      	adds	r3, r7, r3
   19678:	781b      	ldrb	r3, [r3, #0]
   1967a:	2b00      	cmp	r3, #0
   1967c:	d116      	bne.n	196ac <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1967e:	2317      	movs	r3, #23
   19680:	18fc      	adds	r4, r7, r3
   19682:	2003      	movs	r0, #3
   19684:	4b1c      	ldr	r3, [pc, #112]	; (196f8 <uiTraceStart+0x104>)
   19686:	4798      	blx	r3
   19688:	0003      	movs	r3, r0
   1968a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1968c:	4a1b      	ldr	r2, [pc, #108]	; (196fc <uiTraceStart+0x108>)
   1968e:	2317      	movs	r3, #23
   19690:	18fb      	adds	r3, r7, r3
   19692:	781b      	ldrb	r3, [r3, #0]
   19694:	0019      	movs	r1, r3
   19696:	2003      	movs	r0, #3
   19698:	4b19      	ldr	r3, [pc, #100]	; (19700 <uiTraceStart+0x10c>)
   1969a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1969c:	2317      	movs	r3, #23
   1969e:	18fb      	adds	r3, r7, r3
   196a0:	781b      	ldrb	r3, [r3, #0]
   196a2:	2200      	movs	r2, #0
   196a4:	0019      	movs	r1, r3
   196a6:	2003      	movs	r0, #3
   196a8:	4b16      	ldr	r3, [pc, #88]	; (19704 <uiTraceStart+0x110>)
   196aa:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   196ac:	2317      	movs	r3, #23
   196ae:	18fb      	adds	r3, r7, r3
   196b0:	781b      	ldrb	r3, [r3, #0]
   196b2:	0018      	movs	r0, r3
   196b4:	4b14      	ldr	r3, [pc, #80]	; (19708 <uiTraceStart+0x114>)
   196b6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   196b8:	4b0c      	ldr	r3, [pc, #48]	; (196ec <uiTraceStart+0xf8>)
   196ba:	681b      	ldr	r3, [r3, #0]
   196bc:	1e5a      	subs	r2, r3, #1
   196be:	4b0b      	ldr	r3, [pc, #44]	; (196ec <uiTraceStart+0xf8>)
   196c0:	601a      	str	r2, [r3, #0]
   196c2:	693b      	ldr	r3, [r7, #16]
   196c4:	607b      	str	r3, [r7, #4]
   196c6:	687b      	ldr	r3, [r7, #4]
   196c8:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   196cc:	4b03      	ldr	r3, [pc, #12]	; (196dc <uiTraceStart+0xe8>)
   196ce:	681b      	ldr	r3, [r3, #0]
   196d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   196d2:	0018      	movs	r0, r3
   196d4:	46bd      	mov	sp, r7
   196d6:	b007      	add	sp, #28
   196d8:	bd90      	pop	{r4, r7, pc}
   196da:	46c0      	nop			; (mov r8, r8)
   196dc:	20000df4 	.word	0x20000df4
   196e0:	000381dc 	.word	0x000381dc
   196e4:	0001a85d 	.word	0x0001a85d
   196e8:	20000d54 	.word	0x20000d54
   196ec:	20000d4c 	.word	0x20000d4c
   196f0:	0001925d 	.word	0x0001925d
   196f4:	00018fa1 	.word	0x00018fa1
   196f8:	0001a541 	.word	0x0001a541
   196fc:	00038220 	.word	0x00038220
   19700:	0001a771 	.word	0x0001a771
   19704:	00019ed5 	.word	0x00019ed5
   19708:	00019dbd 	.word	0x00019dbd

0001970c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1970c:	b580      	push	{r7, lr}
   1970e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   19710:	4b02      	ldr	r3, [pc, #8]	; (1971c <vTraceStart+0x10>)
   19712:	4798      	blx	r3
}
   19714:	46c0      	nop			; (mov r8, r8)
   19716:	46bd      	mov	sp, r7
   19718:	bd80      	pop	{r7, pc}
   1971a:	46c0      	nop			; (mov r8, r8)
   1971c:	000195f5 	.word	0x000195f5

00019720 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   19720:	b580      	push	{r7, lr}
   19722:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   19724:	4b08      	ldr	r3, [pc, #32]	; (19748 <vTraceStop+0x28>)
   19726:	681b      	ldr	r3, [r3, #0]
   19728:	2b00      	cmp	r3, #0
   1972a:	d003      	beq.n	19734 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1972c:	4b06      	ldr	r3, [pc, #24]	; (19748 <vTraceStop+0x28>)
   1972e:	681b      	ldr	r3, [r3, #0]
   19730:	2200      	movs	r2, #0
   19732:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   19734:	4b05      	ldr	r3, [pc, #20]	; (1974c <vTraceStop+0x2c>)
   19736:	681b      	ldr	r3, [r3, #0]
   19738:	2b00      	cmp	r3, #0
   1973a:	d002      	beq.n	19742 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1973c:	4b03      	ldr	r3, [pc, #12]	; (1974c <vTraceStop+0x2c>)
   1973e:	681b      	ldr	r3, [r3, #0]
   19740:	4798      	blx	r3
	}
}
   19742:	46c0      	nop			; (mov r8, r8)
   19744:	46bd      	mov	sp, r7
   19746:	bd80      	pop	{r7, pc}
   19748:	20000df4 	.word	0x20000df4
   1974c:	20000d5c 	.word	0x20000d5c

00019750 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   19750:	b580      	push	{r7, lr}
   19752:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   19754:	4b05      	ldr	r3, [pc, #20]	; (1976c <xTraceIsRecordingEnabled+0x1c>)
   19756:	681b      	ldr	r3, [r3, #0]
   19758:	2b00      	cmp	r3, #0
   1975a:	d003      	beq.n	19764 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1975c:	4b03      	ldr	r3, [pc, #12]	; (1976c <xTraceIsRecordingEnabled+0x1c>)
   1975e:	681b      	ldr	r3, [r3, #0]
   19760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19762:	e000      	b.n	19766 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   19764:	2300      	movs	r3, #0
	}
}
   19766:	0018      	movs	r0, r3
   19768:	46bd      	mov	sp, r7
   1976a:	bd80      	pop	{r7, pc}
   1976c:	20000df4 	.word	0x20000df4

00019770 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   19770:	b590      	push	{r4, r7, lr}
   19772:	b089      	sub	sp, #36	; 0x24
   19774:	af00      	add	r7, sp, #0
   19776:	0002      	movs	r2, r0
   19778:	1dfb      	adds	r3, r7, #7
   1977a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1977c:	1dfb      	adds	r3, r7, #7
   1977e:	781b      	ldrb	r3, [r3, #0]
   19780:	2b00      	cmp	r3, #0
   19782:	d057      	beq.n	19834 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   19784:	4b2e      	ldr	r3, [pc, #184]	; (19840 <prvTraceStoreTaskReady+0xd0>)
   19786:	681b      	ldr	r3, [r3, #0]
   19788:	2b00      	cmp	r3, #0
   1978a:	d055      	beq.n	19838 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1978c:	1dfb      	adds	r3, r7, #7
   1978e:	781b      	ldrb	r3, [r3, #0]
   19790:	2b0f      	cmp	r3, #15
   19792:	d904      	bls.n	1979e <prvTraceStoreTaskReady+0x2e>
   19794:	4b2b      	ldr	r3, [pc, #172]	; (19844 <prvTraceStoreTaskReady+0xd4>)
   19796:	0018      	movs	r0, r3
   19798:	4b2b      	ldr	r3, [pc, #172]	; (19848 <prvTraceStoreTaskReady+0xd8>)
   1979a:	4798      	blx	r3
   1979c:	e04d      	b.n	1983a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1979e:	4b2b      	ldr	r3, [pc, #172]	; (1984c <prvTraceStoreTaskReady+0xdc>)
   197a0:	681b      	ldr	r3, [r3, #0]
   197a2:	2b00      	cmp	r3, #0
   197a4:	d004      	beq.n	197b0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   197a6:	4b2a      	ldr	r3, [pc, #168]	; (19850 <prvTraceStoreTaskReady+0xe0>)
   197a8:	0018      	movs	r0, r3
   197aa:	4b27      	ldr	r3, [pc, #156]	; (19848 <prvTraceStoreTaskReady+0xd8>)
   197ac:	4798      	blx	r3
		return;
   197ae:	e044      	b.n	1983a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   197b0:	f3ef 8310 	mrs	r3, PRIMASK
   197b4:	60fb      	str	r3, [r7, #12]
  return(result);
   197b6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   197b8:	61fb      	str	r3, [r7, #28]
   197ba:	2301      	movs	r3, #1
   197bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   197be:	693b      	ldr	r3, [r7, #16]
   197c0:	f383 8810 	msr	PRIMASK, r3
   197c4:	4b21      	ldr	r3, [pc, #132]	; (1984c <prvTraceStoreTaskReady+0xdc>)
   197c6:	681b      	ldr	r3, [r3, #0]
   197c8:	1c5a      	adds	r2, r3, #1
   197ca:	4b20      	ldr	r3, [pc, #128]	; (1984c <prvTraceStoreTaskReady+0xdc>)
   197cc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   197ce:	4b21      	ldr	r3, [pc, #132]	; (19854 <prvTraceStoreTaskReady+0xe4>)
   197d0:	681b      	ldr	r3, [r3, #0]
   197d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   197d4:	2b00      	cmp	r3, #0
   197d6:	d022      	beq.n	1981e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   197d8:	231a      	movs	r3, #26
   197da:	18fc      	adds	r4, r7, r3
   197dc:	4b1e      	ldr	r3, [pc, #120]	; (19858 <prvTraceStoreTaskReady+0xe8>)
   197de:	0018      	movs	r0, r3
   197e0:	4b1e      	ldr	r3, [pc, #120]	; (1985c <prvTraceStoreTaskReady+0xec>)
   197e2:	4798      	blx	r3
   197e4:	0003      	movs	r3, r0
   197e6:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   197e8:	2319      	movs	r3, #25
   197ea:	18fb      	adds	r3, r7, r3
   197ec:	1dfa      	adds	r2, r7, #7
   197ee:	7812      	ldrb	r2, [r2, #0]
   197f0:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   197f2:	4b1b      	ldr	r3, [pc, #108]	; (19860 <prvTraceStoreTaskReady+0xf0>)
   197f4:	4798      	blx	r3
   197f6:	0003      	movs	r3, r0
   197f8:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   197fa:	697b      	ldr	r3, [r7, #20]
   197fc:	2b00      	cmp	r3, #0
   197fe:	d00e      	beq.n	1981e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   19800:	697b      	ldr	r3, [r7, #20]
   19802:	2202      	movs	r2, #2
   19804:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   19806:	697b      	ldr	r3, [r7, #20]
   19808:	221a      	movs	r2, #26
   1980a:	18ba      	adds	r2, r7, r2
   1980c:	8812      	ldrh	r2, [r2, #0]
   1980e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   19810:	697b      	ldr	r3, [r7, #20]
   19812:	2219      	movs	r2, #25
   19814:	18ba      	adds	r2, r7, r2
   19816:	7812      	ldrb	r2, [r2, #0]
   19818:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1981a:	4b12      	ldr	r3, [pc, #72]	; (19864 <prvTraceStoreTaskReady+0xf4>)
   1981c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1981e:	4b0b      	ldr	r3, [pc, #44]	; (1984c <prvTraceStoreTaskReady+0xdc>)
   19820:	681b      	ldr	r3, [r3, #0]
   19822:	1e5a      	subs	r2, r3, #1
   19824:	4b09      	ldr	r3, [pc, #36]	; (1984c <prvTraceStoreTaskReady+0xdc>)
   19826:	601a      	str	r2, [r3, #0]
   19828:	69fb      	ldr	r3, [r7, #28]
   1982a:	60bb      	str	r3, [r7, #8]
   1982c:	68bb      	ldr	r3, [r7, #8]
   1982e:	f383 8810 	msr	PRIMASK, r3
   19832:	e002      	b.n	1983a <prvTraceStoreTaskReady+0xca>
		return;
   19834:	46c0      	nop			; (mov r8, r8)
   19836:	e000      	b.n	1983a <prvTraceStoreTaskReady+0xca>
		return;
   19838:	46c0      	nop			; (mov r8, r8)
}
   1983a:	46bd      	mov	sp, r7
   1983c:	b009      	add	sp, #36	; 0x24
   1983e:	bd90      	pop	{r4, r7, pc}
   19840:	2000010c 	.word	0x2000010c
   19844:	00038588 	.word	0x00038588
   19848:	0001a85d 	.word	0x0001a85d
   1984c:	20000d4c 	.word	0x20000d4c
   19850:	000385c8 	.word	0x000385c8
   19854:	20000df4 	.word	0x20000df4
   19858:	0000ffff 	.word	0x0000ffff
   1985c:	0001aa71 	.word	0x0001aa71
   19860:	0001a415 	.word	0x0001a415
   19864:	0001aa19 	.word	0x0001aa19

00019868 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   19868:	b580      	push	{r7, lr}
   1986a:	b08e      	sub	sp, #56	; 0x38
   1986c:	af00      	add	r7, sp, #0
   1986e:	60f8      	str	r0, [r7, #12]
   19870:	60b9      	str	r1, [r7, #8]
   19872:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   19874:	4b48      	ldr	r3, [pc, #288]	; (19998 <vTraceStoreMemMangEvent+0x130>)
   19876:	681b      	ldr	r3, [r3, #0]
   19878:	2b00      	cmp	r3, #0
   1987a:	d100      	bne.n	1987e <vTraceStoreMemMangEvent+0x16>
   1987c:	e088      	b.n	19990 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1987e:	687b      	ldr	r3, [r7, #4]
   19880:	2b00      	cmp	r3, #0
   19882:	da03      	bge.n	1988c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   19884:	687b      	ldr	r3, [r7, #4]
   19886:	425b      	negs	r3, r3
   19888:	637b      	str	r3, [r7, #52]	; 0x34
   1988a:	e001      	b.n	19890 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1988c:	687b      	ldr	r3, [r7, #4]
   1988e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19890:	f3ef 8310 	mrs	r3, PRIMASK
   19894:	61bb      	str	r3, [r7, #24]
  return(result);
   19896:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   19898:	633b      	str	r3, [r7, #48]	; 0x30
   1989a:	2301      	movs	r3, #1
   1989c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1989e:	69fb      	ldr	r3, [r7, #28]
   198a0:	f383 8810 	msr	PRIMASK, r3
   198a4:	4b3d      	ldr	r3, [pc, #244]	; (1999c <vTraceStoreMemMangEvent+0x134>)
   198a6:	681b      	ldr	r3, [r3, #0]
   198a8:	1c5a      	adds	r2, r3, #1
   198aa:	4b3c      	ldr	r3, [pc, #240]	; (1999c <vTraceStoreMemMangEvent+0x134>)
   198ac:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   198ae:	68bb      	ldr	r3, [r7, #8]
   198b0:	2b00      	cmp	r3, #0
   198b2:	d005      	beq.n	198c0 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   198b4:	4b3a      	ldr	r3, [pc, #232]	; (199a0 <vTraceStoreMemMangEvent+0x138>)
   198b6:	681a      	ldr	r2, [r3, #0]
   198b8:	687b      	ldr	r3, [r7, #4]
   198ba:	18d2      	adds	r2, r2, r3
   198bc:	4b38      	ldr	r3, [pc, #224]	; (199a0 <vTraceStoreMemMangEvent+0x138>)
   198be:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   198c0:	4b35      	ldr	r3, [pc, #212]	; (19998 <vTraceStoreMemMangEvent+0x130>)
   198c2:	681b      	ldr	r3, [r3, #0]
   198c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   198c6:	2b00      	cmp	r3, #0
   198c8:	d057      	beq.n	1997a <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   198ca:	20ff      	movs	r0, #255	; 0xff
   198cc:	4b35      	ldr	r3, [pc, #212]	; (199a4 <vTraceStoreMemMangEvent+0x13c>)
   198ce:	4798      	blx	r3
   198d0:	0003      	movs	r3, r0
   198d2:	001a      	movs	r2, r3
   198d4:	232f      	movs	r3, #47	; 0x2f
   198d6:	18fb      	adds	r3, r7, r3
   198d8:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   198da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   198dc:	4a32      	ldr	r2, [pc, #200]	; (199a8 <vTraceStoreMemMangEvent+0x140>)
   198de:	0019      	movs	r1, r3
   198e0:	0010      	movs	r0, r2
   198e2:	4b32      	ldr	r3, [pc, #200]	; (199ac <vTraceStoreMemMangEvent+0x144>)
   198e4:	4798      	blx	r3
   198e6:	0002      	movs	r2, r0
   198e8:	232c      	movs	r3, #44	; 0x2c
   198ea:	18fb      	adds	r3, r7, r3
   198ec:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   198ee:	4b30      	ldr	r3, [pc, #192]	; (199b0 <vTraceStoreMemMangEvent+0x148>)
   198f0:	4798      	blx	r3
   198f2:	0003      	movs	r3, r0
   198f4:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   198f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198f8:	2b00      	cmp	r3, #0
   198fa:	d03e      	beq.n	1997a <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   198fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198fe:	222f      	movs	r2, #47	; 0x2f
   19900:	18ba      	adds	r2, r7, r2
   19902:	7812      	ldrb	r2, [r2, #0]
   19904:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   19906:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19908:	2200      	movs	r2, #0
   1990a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1990e:	222c      	movs	r2, #44	; 0x2c
   19910:	18ba      	adds	r2, r7, r2
   19912:	8812      	ldrh	r2, [r2, #0]
   19914:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19916:	4b27      	ldr	r3, [pc, #156]	; (199b4 <vTraceStoreMemMangEvent+0x14c>)
   19918:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1991a:	68bb      	ldr	r3, [r7, #8]
   1991c:	4a22      	ldr	r2, [pc, #136]	; (199a8 <vTraceStoreMemMangEvent+0x140>)
   1991e:	0019      	movs	r1, r3
   19920:	0010      	movs	r0, r2
   19922:	4b22      	ldr	r3, [pc, #136]	; (199ac <vTraceStoreMemMangEvent+0x144>)
   19924:	4798      	blx	r3
   19926:	0002      	movs	r2, r0
   19928:	2326      	movs	r3, #38	; 0x26
   1992a:	18fb      	adds	r3, r7, r3
   1992c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1992e:	2325      	movs	r3, #37	; 0x25
   19930:	18fb      	adds	r3, r7, r3
   19932:	2200      	movs	r2, #0
   19934:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   19936:	4b1e      	ldr	r3, [pc, #120]	; (199b0 <vTraceStoreMemMangEvent+0x148>)
   19938:	4798      	blx	r3
   1993a:	0003      	movs	r3, r0
   1993c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1993e:	6a3b      	ldr	r3, [r7, #32]
   19940:	2b00      	cmp	r3, #0
   19942:	d01a      	beq.n	1997a <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   19944:	6a3b      	ldr	r3, [r7, #32]
   19946:	2226      	movs	r2, #38	; 0x26
   19948:	18ba      	adds	r2, r7, r2
   1994a:	8812      	ldrh	r2, [r2, #0]
   1994c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1994e:	6a3b      	ldr	r3, [r7, #32]
   19950:	2225      	movs	r2, #37	; 0x25
   19952:	18ba      	adds	r2, r7, r2
   19954:	7812      	ldrb	r2, [r2, #0]
   19956:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   19958:	68fb      	ldr	r3, [r7, #12]
   1995a:	b2db      	uxtb	r3, r3
   1995c:	3301      	adds	r3, #1
   1995e:	b2da      	uxtb	r2, r3
   19960:	6a3b      	ldr	r3, [r7, #32]
   19962:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   19964:	68fb      	ldr	r3, [r7, #12]
   19966:	b2da      	uxtb	r2, r3
   19968:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1996a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1996c:	4b11      	ldr	r3, [pc, #68]	; (199b4 <vTraceStoreMemMangEvent+0x14c>)
   1996e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19970:	4b09      	ldr	r3, [pc, #36]	; (19998 <vTraceStoreMemMangEvent+0x130>)
   19972:	681b      	ldr	r3, [r3, #0]
   19974:	4a0a      	ldr	r2, [pc, #40]	; (199a0 <vTraceStoreMemMangEvent+0x138>)
   19976:	6812      	ldr	r2, [r2, #0]
   19978:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1997a:	4b08      	ldr	r3, [pc, #32]	; (1999c <vTraceStoreMemMangEvent+0x134>)
   1997c:	681b      	ldr	r3, [r3, #0]
   1997e:	1e5a      	subs	r2, r3, #1
   19980:	4b06      	ldr	r3, [pc, #24]	; (1999c <vTraceStoreMemMangEvent+0x134>)
   19982:	601a      	str	r2, [r3, #0]
   19984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19986:	617b      	str	r3, [r7, #20]
   19988:	697b      	ldr	r3, [r7, #20]
   1998a:	f383 8810 	msr	PRIMASK, r3
   1998e:	e000      	b.n	19992 <vTraceStoreMemMangEvent+0x12a>
		return;
   19990:	46c0      	nop			; (mov r8, r8)
}
   19992:	46bd      	mov	sp, r7
   19994:	b00e      	add	sp, #56	; 0x38
   19996:	bd80      	pop	{r7, pc}
   19998:	20000df4 	.word	0x20000df4
   1999c:	20000d4c 	.word	0x20000d4c
   199a0:	20000d60 	.word	0x20000d60
   199a4:	0001aa71 	.word	0x0001aa71
   199a8:	0000ffff 	.word	0x0000ffff
   199ac:	00019c35 	.word	0x00019c35
   199b0:	0001a415 	.word	0x0001a415
   199b4:	0001aa19 	.word	0x0001aa19

000199b8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   199b8:	b590      	push	{r4, r7, lr}
   199ba:	b08b      	sub	sp, #44	; 0x2c
   199bc:	af00      	add	r7, sp, #0
   199be:	60f8      	str	r0, [r7, #12]
   199c0:	607a      	str	r2, [r7, #4]
   199c2:	230b      	movs	r3, #11
   199c4:	18fb      	adds	r3, r7, r3
   199c6:	1c0a      	adds	r2, r1, #0
   199c8:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   199ca:	68fb      	ldr	r3, [r7, #12]
   199cc:	2bfe      	cmp	r3, #254	; 0xfe
   199ce:	d904      	bls.n	199da <prvTraceStoreKernelCall+0x22>
   199d0:	4b39      	ldr	r3, [pc, #228]	; (19ab8 <prvTraceStoreKernelCall+0x100>)
   199d2:	0018      	movs	r0, r3
   199d4:	4b39      	ldr	r3, [pc, #228]	; (19abc <prvTraceStoreKernelCall+0x104>)
   199d6:	4798      	blx	r3
   199d8:	e06b      	b.n	19ab2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   199da:	230b      	movs	r3, #11
   199dc:	18fb      	adds	r3, r7, r3
   199de:	781b      	ldrb	r3, [r3, #0]
   199e0:	2b08      	cmp	r3, #8
   199e2:	d904      	bls.n	199ee <prvTraceStoreKernelCall+0x36>
   199e4:	4b36      	ldr	r3, [pc, #216]	; (19ac0 <prvTraceStoreKernelCall+0x108>)
   199e6:	0018      	movs	r0, r3
   199e8:	4b34      	ldr	r3, [pc, #208]	; (19abc <prvTraceStoreKernelCall+0x104>)
   199ea:	4798      	blx	r3
   199ec:	e061      	b.n	19ab2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   199ee:	4b35      	ldr	r3, [pc, #212]	; (19ac4 <prvTraceStoreKernelCall+0x10c>)
   199f0:	681a      	ldr	r2, [r3, #0]
   199f2:	230b      	movs	r3, #11
   199f4:	18fb      	adds	r3, r7, r3
   199f6:	781b      	ldrb	r3, [r3, #0]
   199f8:	2164      	movs	r1, #100	; 0x64
   199fa:	18d3      	adds	r3, r2, r3
   199fc:	185b      	adds	r3, r3, r1
   199fe:	781b      	ldrb	r3, [r3, #0]
   19a00:	001a      	movs	r2, r3
   19a02:	687b      	ldr	r3, [r7, #4]
   19a04:	429a      	cmp	r2, r3
   19a06:	d204      	bcs.n	19a12 <prvTraceStoreKernelCall+0x5a>
   19a08:	4b2f      	ldr	r3, [pc, #188]	; (19ac8 <prvTraceStoreKernelCall+0x110>)
   19a0a:	0018      	movs	r0, r3
   19a0c:	4b2b      	ldr	r3, [pc, #172]	; (19abc <prvTraceStoreKernelCall+0x104>)
   19a0e:	4798      	blx	r3
   19a10:	e04f      	b.n	19ab2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   19a12:	4b2e      	ldr	r3, [pc, #184]	; (19acc <prvTraceStoreKernelCall+0x114>)
   19a14:	681b      	ldr	r3, [r3, #0]
   19a16:	2b00      	cmp	r3, #0
   19a18:	d004      	beq.n	19a24 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   19a1a:	4b2d      	ldr	r3, [pc, #180]	; (19ad0 <prvTraceStoreKernelCall+0x118>)
   19a1c:	0018      	movs	r0, r3
   19a1e:	4b27      	ldr	r3, [pc, #156]	; (19abc <prvTraceStoreKernelCall+0x104>)
   19a20:	4798      	blx	r3
		return;
   19a22:	e046      	b.n	19ab2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   19a24:	4b2b      	ldr	r3, [pc, #172]	; (19ad4 <prvTraceStoreKernelCall+0x11c>)
   19a26:	781b      	ldrb	r3, [r3, #0]
   19a28:	2b00      	cmp	r3, #0
   19a2a:	d041      	beq.n	19ab0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19a2c:	f3ef 8310 	mrs	r3, PRIMASK
   19a30:	617b      	str	r3, [r7, #20]
  return(result);
   19a32:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   19a34:	627b      	str	r3, [r7, #36]	; 0x24
   19a36:	2301      	movs	r3, #1
   19a38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19a3a:	69bb      	ldr	r3, [r7, #24]
   19a3c:	f383 8810 	msr	PRIMASK, r3
   19a40:	4b22      	ldr	r3, [pc, #136]	; (19acc <prvTraceStoreKernelCall+0x114>)
   19a42:	681b      	ldr	r3, [r3, #0]
   19a44:	1c5a      	adds	r2, r3, #1
   19a46:	4b21      	ldr	r3, [pc, #132]	; (19acc <prvTraceStoreKernelCall+0x114>)
   19a48:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   19a4a:	4b1e      	ldr	r3, [pc, #120]	; (19ac4 <prvTraceStoreKernelCall+0x10c>)
   19a4c:	681b      	ldr	r3, [r3, #0]
   19a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19a50:	2b00      	cmp	r3, #0
   19a52:	d022      	beq.n	19a9a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19a54:	2322      	movs	r3, #34	; 0x22
   19a56:	18fc      	adds	r4, r7, r3
   19a58:	4b1f      	ldr	r3, [pc, #124]	; (19ad8 <prvTraceStoreKernelCall+0x120>)
   19a5a:	0018      	movs	r0, r3
   19a5c:	4b1f      	ldr	r3, [pc, #124]	; (19adc <prvTraceStoreKernelCall+0x124>)
   19a5e:	4798      	blx	r3
   19a60:	0003      	movs	r3, r0
   19a62:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19a64:	2321      	movs	r3, #33	; 0x21
   19a66:	18fb      	adds	r3, r7, r3
   19a68:	687a      	ldr	r2, [r7, #4]
   19a6a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   19a6c:	4b1c      	ldr	r3, [pc, #112]	; (19ae0 <prvTraceStoreKernelCall+0x128>)
   19a6e:	4798      	blx	r3
   19a70:	0003      	movs	r3, r0
   19a72:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19a74:	69fb      	ldr	r3, [r7, #28]
   19a76:	2b00      	cmp	r3, #0
   19a78:	d00f      	beq.n	19a9a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   19a7a:	69fb      	ldr	r3, [r7, #28]
   19a7c:	2222      	movs	r2, #34	; 0x22
   19a7e:	18ba      	adds	r2, r7, r2
   19a80:	8812      	ldrh	r2, [r2, #0]
   19a82:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   19a84:	68fb      	ldr	r3, [r7, #12]
   19a86:	b2da      	uxtb	r2, r3
   19a88:	69fb      	ldr	r3, [r7, #28]
   19a8a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19a8c:	69fb      	ldr	r3, [r7, #28]
   19a8e:	2221      	movs	r2, #33	; 0x21
   19a90:	18ba      	adds	r2, r7, r2
   19a92:	7812      	ldrb	r2, [r2, #0]
   19a94:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19a96:	4b13      	ldr	r3, [pc, #76]	; (19ae4 <prvTraceStoreKernelCall+0x12c>)
   19a98:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19a9a:	4b0c      	ldr	r3, [pc, #48]	; (19acc <prvTraceStoreKernelCall+0x114>)
   19a9c:	681b      	ldr	r3, [r3, #0]
   19a9e:	1e5a      	subs	r2, r3, #1
   19aa0:	4b0a      	ldr	r3, [pc, #40]	; (19acc <prvTraceStoreKernelCall+0x114>)
   19aa2:	601a      	str	r2, [r3, #0]
   19aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19aa6:	613b      	str	r3, [r7, #16]
   19aa8:	693b      	ldr	r3, [r7, #16]
   19aaa:	f383 8810 	msr	PRIMASK, r3
   19aae:	e000      	b.n	19ab2 <prvTraceStoreKernelCall+0xfa>
		return;
   19ab0:	46c0      	nop			; (mov r8, r8)
}
   19ab2:	46bd      	mov	sp, r7
   19ab4:	b00b      	add	sp, #44	; 0x2c
   19ab6:	bd90      	pop	{r4, r7, pc}
   19ab8:	00038638 	.word	0x00038638
   19abc:	0001a85d 	.word	0x0001a85d
   19ac0:	00038670 	.word	0x00038670
   19ac4:	20000df4 	.word	0x20000df4
   19ac8:	000386b8 	.word	0x000386b8
   19acc:	20000d4c 	.word	0x20000d4c
   19ad0:	00038700 	.word	0x00038700
   19ad4:	20000d58 	.word	0x20000d58
   19ad8:	0000ffff 	.word	0x0000ffff
   19adc:	0001aa71 	.word	0x0001aa71
   19ae0:	0001a415 	.word	0x0001a415
   19ae4:	0001aa19 	.word	0x0001aa19

00019ae8 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   19ae8:	b580      	push	{r7, lr}
   19aea:	b08a      	sub	sp, #40	; 0x28
   19aec:	af00      	add	r7, sp, #0
   19aee:	60f8      	str	r0, [r7, #12]
   19af0:	607a      	str	r2, [r7, #4]
   19af2:	603b      	str	r3, [r7, #0]
   19af4:	230b      	movs	r3, #11
   19af6:	18fb      	adds	r3, r7, r3
   19af8:	1c0a      	adds	r2, r1, #0
   19afa:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   19afc:	68fb      	ldr	r3, [r7, #12]
   19afe:	2bfe      	cmp	r3, #254	; 0xfe
   19b00:	d904      	bls.n	19b0c <prvTraceStoreKernelCallWithParam+0x24>
   19b02:	4b40      	ldr	r3, [pc, #256]	; (19c04 <prvTraceStoreKernelCallWithParam+0x11c>)
   19b04:	0018      	movs	r0, r3
   19b06:	4b40      	ldr	r3, [pc, #256]	; (19c08 <prvTraceStoreKernelCallWithParam+0x120>)
   19b08:	4798      	blx	r3
   19b0a:	e077      	b.n	19bfc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   19b0c:	230b      	movs	r3, #11
   19b0e:	18fb      	adds	r3, r7, r3
   19b10:	781b      	ldrb	r3, [r3, #0]
   19b12:	2b08      	cmp	r3, #8
   19b14:	d904      	bls.n	19b20 <prvTraceStoreKernelCallWithParam+0x38>
   19b16:	4b3d      	ldr	r3, [pc, #244]	; (19c0c <prvTraceStoreKernelCallWithParam+0x124>)
   19b18:	0018      	movs	r0, r3
   19b1a:	4b3b      	ldr	r3, [pc, #236]	; (19c08 <prvTraceStoreKernelCallWithParam+0x120>)
   19b1c:	4798      	blx	r3
   19b1e:	e06d      	b.n	19bfc <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   19b20:	4b3b      	ldr	r3, [pc, #236]	; (19c10 <prvTraceStoreKernelCallWithParam+0x128>)
   19b22:	681a      	ldr	r2, [r3, #0]
   19b24:	230b      	movs	r3, #11
   19b26:	18fb      	adds	r3, r7, r3
   19b28:	781b      	ldrb	r3, [r3, #0]
   19b2a:	2164      	movs	r1, #100	; 0x64
   19b2c:	18d3      	adds	r3, r2, r3
   19b2e:	185b      	adds	r3, r3, r1
   19b30:	781b      	ldrb	r3, [r3, #0]
   19b32:	001a      	movs	r2, r3
   19b34:	687b      	ldr	r3, [r7, #4]
   19b36:	429a      	cmp	r2, r3
   19b38:	d204      	bcs.n	19b44 <prvTraceStoreKernelCallWithParam+0x5c>
   19b3a:	4b36      	ldr	r3, [pc, #216]	; (19c14 <prvTraceStoreKernelCallWithParam+0x12c>)
   19b3c:	0018      	movs	r0, r3
   19b3e:	4b32      	ldr	r3, [pc, #200]	; (19c08 <prvTraceStoreKernelCallWithParam+0x120>)
   19b40:	4798      	blx	r3
   19b42:	e05b      	b.n	19bfc <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   19b44:	4b34      	ldr	r3, [pc, #208]	; (19c18 <prvTraceStoreKernelCallWithParam+0x130>)
   19b46:	681b      	ldr	r3, [r3, #0]
   19b48:	2b00      	cmp	r3, #0
   19b4a:	d004      	beq.n	19b56 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   19b4c:	4b33      	ldr	r3, [pc, #204]	; (19c1c <prvTraceStoreKernelCallWithParam+0x134>)
   19b4e:	0018      	movs	r0, r3
   19b50:	4b2d      	ldr	r3, [pc, #180]	; (19c08 <prvTraceStoreKernelCallWithParam+0x120>)
   19b52:	4798      	blx	r3
		return;
   19b54:	e052      	b.n	19bfc <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19b56:	f3ef 8310 	mrs	r3, PRIMASK
   19b5a:	617b      	str	r3, [r7, #20]
  return(result);
   19b5c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   19b5e:	627b      	str	r3, [r7, #36]	; 0x24
   19b60:	2301      	movs	r3, #1
   19b62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19b64:	69bb      	ldr	r3, [r7, #24]
   19b66:	f383 8810 	msr	PRIMASK, r3
   19b6a:	4b2b      	ldr	r3, [pc, #172]	; (19c18 <prvTraceStoreKernelCallWithParam+0x130>)
   19b6c:	681b      	ldr	r3, [r3, #0]
   19b6e:	1c5a      	adds	r2, r3, #1
   19b70:	4b29      	ldr	r3, [pc, #164]	; (19c18 <prvTraceStoreKernelCallWithParam+0x130>)
   19b72:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19b74:	4b26      	ldr	r3, [pc, #152]	; (19c10 <prvTraceStoreKernelCallWithParam+0x128>)
   19b76:	681b      	ldr	r3, [r3, #0]
   19b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19b7a:	2b00      	cmp	r3, #0
   19b7c:	d034      	beq.n	19be8 <prvTraceStoreKernelCallWithParam+0x100>
   19b7e:	4b28      	ldr	r3, [pc, #160]	; (19c20 <prvTraceStoreKernelCallWithParam+0x138>)
   19b80:	781b      	ldrb	r3, [r3, #0]
   19b82:	2b00      	cmp	r3, #0
   19b84:	d030      	beq.n	19be8 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   19b86:	20ff      	movs	r0, #255	; 0xff
   19b88:	4b26      	ldr	r3, [pc, #152]	; (19c24 <prvTraceStoreKernelCallWithParam+0x13c>)
   19b8a:	4798      	blx	r3
   19b8c:	0003      	movs	r3, r0
   19b8e:	001a      	movs	r2, r3
   19b90:	2323      	movs	r3, #35	; 0x23
   19b92:	18fb      	adds	r3, r7, r3
   19b94:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   19b96:	683b      	ldr	r3, [r7, #0]
   19b98:	0019      	movs	r1, r3
   19b9a:	20ff      	movs	r0, #255	; 0xff
   19b9c:	4b22      	ldr	r3, [pc, #136]	; (19c28 <prvTraceStoreKernelCallWithParam+0x140>)
   19b9e:	4798      	blx	r3
   19ba0:	0002      	movs	r2, r0
   19ba2:	2322      	movs	r3, #34	; 0x22
   19ba4:	18fb      	adds	r3, r7, r3
   19ba6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19ba8:	2321      	movs	r3, #33	; 0x21
   19baa:	18fb      	adds	r3, r7, r3
   19bac:	687a      	ldr	r2, [r7, #4]
   19bae:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19bb0:	4b1e      	ldr	r3, [pc, #120]	; (19c2c <prvTraceStoreKernelCallWithParam+0x144>)
   19bb2:	4798      	blx	r3
   19bb4:	0003      	movs	r3, r0
   19bb6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19bb8:	69fb      	ldr	r3, [r7, #28]
   19bba:	2b00      	cmp	r3, #0
   19bbc:	d014      	beq.n	19be8 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   19bbe:	69fb      	ldr	r3, [r7, #28]
   19bc0:	2223      	movs	r2, #35	; 0x23
   19bc2:	18ba      	adds	r2, r7, r2
   19bc4:	7812      	ldrb	r2, [r2, #0]
   19bc6:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   19bc8:	68fb      	ldr	r3, [r7, #12]
   19bca:	b2da      	uxtb	r2, r3
   19bcc:	69fb      	ldr	r3, [r7, #28]
   19bce:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19bd0:	69fb      	ldr	r3, [r7, #28]
   19bd2:	2221      	movs	r2, #33	; 0x21
   19bd4:	18ba      	adds	r2, r7, r2
   19bd6:	7812      	ldrb	r2, [r2, #0]
   19bd8:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   19bda:	69fb      	ldr	r3, [r7, #28]
   19bdc:	2222      	movs	r2, #34	; 0x22
   19bde:	18ba      	adds	r2, r7, r2
   19be0:	7812      	ldrb	r2, [r2, #0]
   19be2:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19be4:	4b12      	ldr	r3, [pc, #72]	; (19c30 <prvTraceStoreKernelCallWithParam+0x148>)
   19be6:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19be8:	4b0b      	ldr	r3, [pc, #44]	; (19c18 <prvTraceStoreKernelCallWithParam+0x130>)
   19bea:	681b      	ldr	r3, [r3, #0]
   19bec:	1e5a      	subs	r2, r3, #1
   19bee:	4b0a      	ldr	r3, [pc, #40]	; (19c18 <prvTraceStoreKernelCallWithParam+0x130>)
   19bf0:	601a      	str	r2, [r3, #0]
   19bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19bf4:	613b      	str	r3, [r7, #16]
   19bf6:	693b      	ldr	r3, [r7, #16]
   19bf8:	f383 8810 	msr	PRIMASK, r3
}
   19bfc:	46bd      	mov	sp, r7
   19bfe:	b00a      	add	sp, #40	; 0x28
   19c00:	bd80      	pop	{r7, pc}
   19c02:	46c0      	nop			; (mov r8, r8)
   19c04:	00038738 	.word	0x00038738
   19c08:	0001a85d 	.word	0x0001a85d
   19c0c:	00038778 	.word	0x00038778
   19c10:	20000df4 	.word	0x20000df4
   19c14:	000387c8 	.word	0x000387c8
   19c18:	20000d4c 	.word	0x20000d4c
   19c1c:	00038818 	.word	0x00038818
   19c20:	20000d58 	.word	0x20000d58
   19c24:	0001aa71 	.word	0x0001aa71
   19c28:	00019c35 	.word	0x00019c35
   19c2c:	0001a415 	.word	0x0001a415
   19c30:	0001aa19 	.word	0x0001aa19

00019c34 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   19c34:	b580      	push	{r7, lr}
   19c36:	b084      	sub	sp, #16
   19c38:	af00      	add	r7, sp, #0
   19c3a:	6078      	str	r0, [r7, #4]
   19c3c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   19c3e:	687b      	ldr	r3, [r7, #4]
   19c40:	2bff      	cmp	r3, #255	; 0xff
   19c42:	d009      	beq.n	19c58 <prvTraceGetParam+0x24>
   19c44:	687b      	ldr	r3, [r7, #4]
   19c46:	4a19      	ldr	r2, [pc, #100]	; (19cac <prvTraceGetParam+0x78>)
   19c48:	4293      	cmp	r3, r2
   19c4a:	d005      	beq.n	19c58 <prvTraceGetParam+0x24>
   19c4c:	4b18      	ldr	r3, [pc, #96]	; (19cb0 <prvTraceGetParam+0x7c>)
   19c4e:	0018      	movs	r0, r3
   19c50:	4b18      	ldr	r3, [pc, #96]	; (19cb4 <prvTraceGetParam+0x80>)
   19c52:	4798      	blx	r3
   19c54:	683b      	ldr	r3, [r7, #0]
   19c56:	e024      	b.n	19ca2 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19c58:	683a      	ldr	r2, [r7, #0]
   19c5a:	687b      	ldr	r3, [r7, #4]
   19c5c:	429a      	cmp	r2, r3
   19c5e:	d801      	bhi.n	19c64 <prvTraceGetParam+0x30>
	{
		return param;
   19c60:	683b      	ldr	r3, [r7, #0]
   19c62:	e01e      	b.n	19ca2 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19c64:	4b14      	ldr	r3, [pc, #80]	; (19cb8 <prvTraceGetParam+0x84>)
   19c66:	4798      	blx	r3
   19c68:	0003      	movs	r3, r0
   19c6a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19c6c:	68fb      	ldr	r3, [r7, #12]
   19c6e:	2b00      	cmp	r3, #0
   19c70:	d014      	beq.n	19c9c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   19c72:	68fb      	ldr	r3, [r7, #12]
   19c74:	2201      	movs	r2, #1
   19c76:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19c78:	687b      	ldr	r3, [r7, #4]
   19c7a:	43db      	mvns	r3, r3
   19c7c:	683a      	ldr	r2, [r7, #0]
   19c7e:	4013      	ands	r3, r2
   19c80:	0a1b      	lsrs	r3, r3, #8
   19c82:	b2da      	uxtb	r2, r3
   19c84:	68fb      	ldr	r3, [r7, #12]
   19c86:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19c88:	687b      	ldr	r3, [r7, #4]
   19c8a:	43db      	mvns	r3, r3
   19c8c:	683a      	ldr	r2, [r7, #0]
   19c8e:	4013      	ands	r3, r2
   19c90:	0c1b      	lsrs	r3, r3, #16
   19c92:	b29a      	uxth	r2, r3
   19c94:	68fb      	ldr	r3, [r7, #12]
   19c96:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19c98:	4b08      	ldr	r3, [pc, #32]	; (19cbc <prvTraceGetParam+0x88>)
   19c9a:	4798      	blx	r3
		}

		return param & param_max;
   19c9c:	683b      	ldr	r3, [r7, #0]
   19c9e:	687a      	ldr	r2, [r7, #4]
   19ca0:	4013      	ands	r3, r2
	}
}
   19ca2:	0018      	movs	r0, r3
   19ca4:	46bd      	mov	sp, r7
   19ca6:	b004      	add	sp, #16
   19ca8:	bd80      	pop	{r7, pc}
   19caa:	46c0      	nop			; (mov r8, r8)
   19cac:	0000ffff 	.word	0x0000ffff
   19cb0:	00038850 	.word	0x00038850
   19cb4:	0001a85d 	.word	0x0001a85d
   19cb8:	0001a415 	.word	0x0001a415
   19cbc:	0001aa19 	.word	0x0001aa19

00019cc0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19cc0:	b580      	push	{r7, lr}
   19cc2:	b08a      	sub	sp, #40	; 0x28
   19cc4:	af00      	add	r7, sp, #0
   19cc6:	6078      	str	r0, [r7, #4]
   19cc8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   19cca:	2326      	movs	r3, #38	; 0x26
   19ccc:	18fb      	adds	r3, r7, r3
   19cce:	2200      	movs	r2, #0
   19cd0:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   19cd2:	687b      	ldr	r3, [r7, #4]
   19cd4:	2bfe      	cmp	r3, #254	; 0xfe
   19cd6:	d904      	bls.n	19ce2 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19cd8:	4b2d      	ldr	r3, [pc, #180]	; (19d90 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   19cda:	0018      	movs	r0, r3
   19cdc:	4b2d      	ldr	r3, [pc, #180]	; (19d94 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19cde:	4798      	blx	r3
   19ce0:	e053      	b.n	19d8a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   19ce2:	4b2d      	ldr	r3, [pc, #180]	; (19d98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19ce4:	681b      	ldr	r3, [r3, #0]
   19ce6:	2b00      	cmp	r3, #0
   19ce8:	d004      	beq.n	19cf4 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   19cea:	4b2c      	ldr	r3, [pc, #176]	; (19d9c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   19cec:	0018      	movs	r0, r3
   19cee:	4b29      	ldr	r3, [pc, #164]	; (19d94 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19cf0:	4798      	blx	r3
		return;
   19cf2:	e04a      	b.n	19d8a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19cf4:	f3ef 8310 	mrs	r3, PRIMASK
   19cf8:	613b      	str	r3, [r7, #16]
  return(result);
   19cfa:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   19cfc:	623b      	str	r3, [r7, #32]
   19cfe:	2301      	movs	r3, #1
   19d00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19d02:	697b      	ldr	r3, [r7, #20]
   19d04:	f383 8810 	msr	PRIMASK, r3
   19d08:	4b23      	ldr	r3, [pc, #140]	; (19d98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19d0a:	681b      	ldr	r3, [r3, #0]
   19d0c:	1c5a      	adds	r2, r3, #1
   19d0e:	4b22      	ldr	r3, [pc, #136]	; (19d98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19d10:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19d12:	4b23      	ldr	r3, [pc, #140]	; (19da0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19d14:	681b      	ldr	r3, [r3, #0]
   19d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19d18:	2b00      	cmp	r3, #0
   19d1a:	d02c      	beq.n	19d76 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19d1c:	4b21      	ldr	r3, [pc, #132]	; (19da4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   19d1e:	781b      	ldrb	r3, [r3, #0]
   19d20:	2b00      	cmp	r3, #0
   19d22:	d028      	beq.n	19d76 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   19d24:	20ff      	movs	r0, #255	; 0xff
   19d26:	4b20      	ldr	r3, [pc, #128]	; (19da8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19d28:	4798      	blx	r3
   19d2a:	0003      	movs	r3, r0
   19d2c:	001a      	movs	r2, r3
   19d2e:	231f      	movs	r3, #31
   19d30:	18fb      	adds	r3, r7, r3
   19d32:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19d34:	683b      	ldr	r3, [r7, #0]
   19d36:	4a1d      	ldr	r2, [pc, #116]	; (19dac <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19d38:	0019      	movs	r1, r3
   19d3a:	0010      	movs	r0, r2
   19d3c:	4b1c      	ldr	r3, [pc, #112]	; (19db0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19d3e:	4798      	blx	r3
   19d40:	0002      	movs	r2, r0
   19d42:	2326      	movs	r3, #38	; 0x26
   19d44:	18fb      	adds	r3, r7, r3
   19d46:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19d48:	4b1a      	ldr	r3, [pc, #104]	; (19db4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19d4a:	4798      	blx	r3
   19d4c:	0003      	movs	r3, r0
   19d4e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19d50:	69bb      	ldr	r3, [r7, #24]
   19d52:	2b00      	cmp	r3, #0
   19d54:	d00f      	beq.n	19d76 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   19d56:	69bb      	ldr	r3, [r7, #24]
   19d58:	221f      	movs	r2, #31
   19d5a:	18ba      	adds	r2, r7, r2
   19d5c:	7812      	ldrb	r2, [r2, #0]
   19d5e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19d60:	687b      	ldr	r3, [r7, #4]
   19d62:	b2da      	uxtb	r2, r3
   19d64:	69bb      	ldr	r3, [r7, #24]
   19d66:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19d68:	69bb      	ldr	r3, [r7, #24]
   19d6a:	2226      	movs	r2, #38	; 0x26
   19d6c:	18ba      	adds	r2, r7, r2
   19d6e:	8812      	ldrh	r2, [r2, #0]
   19d70:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19d72:	4b11      	ldr	r3, [pc, #68]	; (19db8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19d74:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19d76:	4b08      	ldr	r3, [pc, #32]	; (19d98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19d78:	681b      	ldr	r3, [r3, #0]
   19d7a:	1e5a      	subs	r2, r3, #1
   19d7c:	4b06      	ldr	r3, [pc, #24]	; (19d98 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19d7e:	601a      	str	r2, [r3, #0]
   19d80:	6a3b      	ldr	r3, [r7, #32]
   19d82:	60fb      	str	r3, [r7, #12]
   19d84:	68fb      	ldr	r3, [r7, #12]
   19d86:	f383 8810 	msr	PRIMASK, r3
}
   19d8a:	46bd      	mov	sp, r7
   19d8c:	b00a      	add	sp, #40	; 0x28
   19d8e:	bd80      	pop	{r7, pc}
   19d90:	0003888c 	.word	0x0003888c
   19d94:	0001a85d 	.word	0x0001a85d
   19d98:	20000d4c 	.word	0x20000d4c
   19d9c:	000388e4 	.word	0x000388e4
   19da0:	20000df4 	.word	0x20000df4
   19da4:	20000d58 	.word	0x20000d58
   19da8:	0001aa71 	.word	0x0001aa71
   19dac:	0000ffff 	.word	0x0000ffff
   19db0:	00019c35 	.word	0x00019c35
   19db4:	0001a415 	.word	0x0001a415
   19db8:	0001aa19 	.word	0x0001aa19

00019dbc <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19dbc:	b590      	push	{r4, r7, lr}
   19dbe:	b089      	sub	sp, #36	; 0x24
   19dc0:	af00      	add	r7, sp, #0
   19dc2:	0002      	movs	r2, r0
   19dc4:	1dfb      	adds	r3, r7, #7
   19dc6:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   19dc8:	1dfb      	adds	r3, r7, #7
   19dca:	781b      	ldrb	r3, [r3, #0]
   19dcc:	2b0f      	cmp	r3, #15
   19dce:	d904      	bls.n	19dda <prvTraceStoreTaskswitch+0x1e>
   19dd0:	4b34      	ldr	r3, [pc, #208]	; (19ea4 <prvTraceStoreTaskswitch+0xe8>)
   19dd2:	0018      	movs	r0, r3
   19dd4:	4b34      	ldr	r3, [pc, #208]	; (19ea8 <prvTraceStoreTaskswitch+0xec>)
   19dd6:	4798      	blx	r3
   19dd8:	e061      	b.n	19e9e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19dda:	f3ef 8310 	mrs	r3, PRIMASK
   19dde:	60fb      	str	r3, [r7, #12]
  return(result);
   19de0:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19de2:	61fb      	str	r3, [r7, #28]
   19de4:	2301      	movs	r3, #1
   19de6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19de8:	693b      	ldr	r3, [r7, #16]
   19dea:	f383 8810 	msr	PRIMASK, r3
   19dee:	4b2f      	ldr	r3, [pc, #188]	; (19eac <prvTraceStoreTaskswitch+0xf0>)
   19df0:	681b      	ldr	r3, [r3, #0]
   19df2:	1c5a      	adds	r2, r3, #1
   19df4:	4b2d      	ldr	r3, [pc, #180]	; (19eac <prvTraceStoreTaskswitch+0xf0>)
   19df6:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19df8:	4b2d      	ldr	r3, [pc, #180]	; (19eb0 <prvTraceStoreTaskswitch+0xf4>)
   19dfa:	781b      	ldrb	r3, [r3, #0]
   19dfc:	1dfa      	adds	r2, r7, #7
   19dfe:	7812      	ldrb	r2, [r2, #0]
   19e00:	429a      	cmp	r2, r3
   19e02:	d042      	beq.n	19e8a <prvTraceStoreTaskswitch+0xce>
   19e04:	4b2b      	ldr	r3, [pc, #172]	; (19eb4 <prvTraceStoreTaskswitch+0xf8>)
   19e06:	681b      	ldr	r3, [r3, #0]
   19e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19e0a:	2b00      	cmp	r3, #0
   19e0c:	d03d      	beq.n	19e8a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19e0e:	4b2a      	ldr	r3, [pc, #168]	; (19eb8 <prvTraceStoreTaskswitch+0xfc>)
   19e10:	2200      	movs	r2, #0
   19e12:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19e14:	231a      	movs	r3, #26
   19e16:	18fc      	adds	r4, r7, r3
   19e18:	4b28      	ldr	r3, [pc, #160]	; (19ebc <prvTraceStoreTaskswitch+0x100>)
   19e1a:	0018      	movs	r0, r3
   19e1c:	4b28      	ldr	r3, [pc, #160]	; (19ec0 <prvTraceStoreTaskswitch+0x104>)
   19e1e:	4798      	blx	r3
   19e20:	0003      	movs	r3, r0
   19e22:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19e24:	4b22      	ldr	r3, [pc, #136]	; (19eb0 <prvTraceStoreTaskswitch+0xf4>)
   19e26:	1dfa      	adds	r2, r7, #7
   19e28:	7812      	ldrb	r2, [r2, #0]
   19e2a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19e2c:	2319      	movs	r3, #25
   19e2e:	18fb      	adds	r3, r7, r3
   19e30:	4a1f      	ldr	r2, [pc, #124]	; (19eb0 <prvTraceStoreTaskswitch+0xf4>)
   19e32:	7812      	ldrb	r2, [r2, #0]
   19e34:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19e36:	4b23      	ldr	r3, [pc, #140]	; (19ec4 <prvTraceStoreTaskswitch+0x108>)
   19e38:	4798      	blx	r3
   19e3a:	0003      	movs	r3, r0
   19e3c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19e3e:	697b      	ldr	r3, [r7, #20]
   19e40:	2b00      	cmp	r3, #0
   19e42:	d022      	beq.n	19e8a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19e44:	4b1a      	ldr	r3, [pc, #104]	; (19eb0 <prvTraceStoreTaskswitch+0xf4>)
   19e46:	781b      	ldrb	r3, [r3, #0]
   19e48:	0019      	movs	r1, r3
   19e4a:	2003      	movs	r0, #3
   19e4c:	4b1e      	ldr	r3, [pc, #120]	; (19ec8 <prvTraceStoreTaskswitch+0x10c>)
   19e4e:	4798      	blx	r3
   19e50:	0003      	movs	r3, r0
   19e52:	2b01      	cmp	r3, #1
   19e54:	d103      	bne.n	19e5e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19e56:	697b      	ldr	r3, [r7, #20]
   19e58:	2207      	movs	r2, #7
   19e5a:	701a      	strb	r2, [r3, #0]
   19e5c:	e002      	b.n	19e64 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19e5e:	697b      	ldr	r3, [r7, #20]
   19e60:	2206      	movs	r2, #6
   19e62:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19e64:	697b      	ldr	r3, [r7, #20]
   19e66:	221a      	movs	r2, #26
   19e68:	18ba      	adds	r2, r7, r2
   19e6a:	8812      	ldrh	r2, [r2, #0]
   19e6c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19e6e:	697b      	ldr	r3, [r7, #20]
   19e70:	2219      	movs	r2, #25
   19e72:	18ba      	adds	r2, r7, r2
   19e74:	7812      	ldrb	r2, [r2, #0]
   19e76:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19e78:	4b0d      	ldr	r3, [pc, #52]	; (19eb0 <prvTraceStoreTaskswitch+0xf4>)
   19e7a:	781b      	ldrb	r3, [r3, #0]
   19e7c:	2201      	movs	r2, #1
   19e7e:	0019      	movs	r1, r3
   19e80:	2003      	movs	r0, #3
   19e82:	4b12      	ldr	r3, [pc, #72]	; (19ecc <prvTraceStoreTaskswitch+0x110>)
   19e84:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19e86:	4b12      	ldr	r3, [pc, #72]	; (19ed0 <prvTraceStoreTaskswitch+0x114>)
   19e88:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19e8a:	4b08      	ldr	r3, [pc, #32]	; (19eac <prvTraceStoreTaskswitch+0xf0>)
   19e8c:	681b      	ldr	r3, [r3, #0]
   19e8e:	1e5a      	subs	r2, r3, #1
   19e90:	4b06      	ldr	r3, [pc, #24]	; (19eac <prvTraceStoreTaskswitch+0xf0>)
   19e92:	601a      	str	r2, [r3, #0]
   19e94:	69fb      	ldr	r3, [r7, #28]
   19e96:	60bb      	str	r3, [r7, #8]
   19e98:	68bb      	ldr	r3, [r7, #8]
   19e9a:	f383 8810 	msr	PRIMASK, r3
}
   19e9e:	46bd      	mov	sp, r7
   19ea0:	b009      	add	sp, #36	; 0x24
   19ea2:	bd90      	pop	{r4, r7, pc}
   19ea4:	0003891c 	.word	0x0003891c
   19ea8:	0001a85d 	.word	0x0001a85d
   19eac:	20000d4c 	.word	0x20000d4c
   19eb0:	20000d58 	.word	0x20000d58
   19eb4:	20000df4 	.word	0x20000df4
   19eb8:	20000d38 	.word	0x20000d38
   19ebc:	0000ffff 	.word	0x0000ffff
   19ec0:	0001aa71 	.word	0x0001aa71
   19ec4:	0001a415 	.word	0x0001a415
   19ec8:	0001a0b9 	.word	0x0001a0b9
   19ecc:	0001a015 	.word	0x0001a015
   19ed0:	0001aa19 	.word	0x0001aa19

00019ed4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19ed4:	b590      	push	{r4, r7, lr}
   19ed6:	b083      	sub	sp, #12
   19ed8:	af00      	add	r7, sp, #0
   19eda:	0004      	movs	r4, r0
   19edc:	0008      	movs	r0, r1
   19ede:	0011      	movs	r1, r2
   19ee0:	1dfb      	adds	r3, r7, #7
   19ee2:	1c22      	adds	r2, r4, #0
   19ee4:	701a      	strb	r2, [r3, #0]
   19ee6:	1dbb      	adds	r3, r7, #6
   19ee8:	1c02      	adds	r2, r0, #0
   19eea:	701a      	strb	r2, [r3, #0]
   19eec:	1d7b      	adds	r3, r7, #5
   19eee:	1c0a      	adds	r2, r1, #0
   19ef0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19ef2:	1dfb      	adds	r3, r7, #7
   19ef4:	781b      	ldrb	r3, [r3, #0]
   19ef6:	2b08      	cmp	r3, #8
   19ef8:	d904      	bls.n	19f04 <prvTraceSetPriorityProperty+0x30>
   19efa:	4b1a      	ldr	r3, [pc, #104]	; (19f64 <prvTraceSetPriorityProperty+0x90>)
   19efc:	0018      	movs	r0, r3
   19efe:	4b1a      	ldr	r3, [pc, #104]	; (19f68 <prvTraceSetPriorityProperty+0x94>)
   19f00:	4798      	blx	r3
   19f02:	e02c      	b.n	19f5e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19f04:	4b19      	ldr	r3, [pc, #100]	; (19f6c <prvTraceSetPriorityProperty+0x98>)
   19f06:	681a      	ldr	r2, [r3, #0]
   19f08:	1dfb      	adds	r3, r7, #7
   19f0a:	781b      	ldrb	r3, [r3, #0]
   19f0c:	2164      	movs	r1, #100	; 0x64
   19f0e:	18d3      	adds	r3, r2, r3
   19f10:	185b      	adds	r3, r3, r1
   19f12:	781b      	ldrb	r3, [r3, #0]
   19f14:	1dba      	adds	r2, r7, #6
   19f16:	7812      	ldrb	r2, [r2, #0]
   19f18:	429a      	cmp	r2, r3
   19f1a:	d904      	bls.n	19f26 <prvTraceSetPriorityProperty+0x52>
   19f1c:	4b14      	ldr	r3, [pc, #80]	; (19f70 <prvTraceSetPriorityProperty+0x9c>)
   19f1e:	0018      	movs	r0, r3
   19f20:	4b11      	ldr	r3, [pc, #68]	; (19f68 <prvTraceSetPriorityProperty+0x94>)
   19f22:	4798      	blx	r3
   19f24:	e01b      	b.n	19f5e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19f26:	4b11      	ldr	r3, [pc, #68]	; (19f6c <prvTraceSetPriorityProperty+0x98>)
   19f28:	681c      	ldr	r4, [r3, #0]
   19f2a:	1dfb      	adds	r3, r7, #7
   19f2c:	781a      	ldrb	r2, [r3, #0]
   19f2e:	1dbb      	adds	r3, r7, #6
   19f30:	781b      	ldrb	r3, [r3, #0]
   19f32:	0011      	movs	r1, r2
   19f34:	0018      	movs	r0, r3
   19f36:	4b0f      	ldr	r3, [pc, #60]	; (19f74 <prvTraceSetPriorityProperty+0xa0>)
   19f38:	4798      	blx	r3
   19f3a:	0003      	movs	r3, r0
   19f3c:	0018      	movs	r0, r3
   19f3e:	4b0b      	ldr	r3, [pc, #44]	; (19f6c <prvTraceSetPriorityProperty+0x98>)
   19f40:	681a      	ldr	r2, [r3, #0]
   19f42:	1dfb      	adds	r3, r7, #7
   19f44:	781b      	ldrb	r3, [r3, #0]
   19f46:	2170      	movs	r1, #112	; 0x70
   19f48:	18d3      	adds	r3, r2, r3
   19f4a:	185b      	adds	r3, r3, r1
   19f4c:	781b      	ldrb	r3, [r3, #0]
   19f4e:	18c3      	adds	r3, r0, r3
   19f50:	3301      	adds	r3, #1
   19f52:	229c      	movs	r2, #156	; 0x9c
   19f54:	18e3      	adds	r3, r4, r3
   19f56:	189b      	adds	r3, r3, r2
   19f58:	1d7a      	adds	r2, r7, #5
   19f5a:	7812      	ldrb	r2, [r2, #0]
   19f5c:	701a      	strb	r2, [r3, #0]
}
   19f5e:	46bd      	mov	sp, r7
   19f60:	b003      	add	sp, #12
   19f62:	bd90      	pop	{r4, r7, pc}
   19f64:	00038ab0 	.word	0x00038ab0
   19f68:	0001a85d 	.word	0x0001a85d
   19f6c:	20000df4 	.word	0x20000df4
   19f70:	00038afc 	.word	0x00038afc
   19f74:	0001a469 	.word	0x0001a469

00019f78 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19f78:	b590      	push	{r4, r7, lr}
   19f7a:	b083      	sub	sp, #12
   19f7c:	af00      	add	r7, sp, #0
   19f7e:	0002      	movs	r2, r0
   19f80:	1dfb      	adds	r3, r7, #7
   19f82:	701a      	strb	r2, [r3, #0]
   19f84:	1dbb      	adds	r3, r7, #6
   19f86:	1c0a      	adds	r2, r1, #0
   19f88:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19f8a:	1dfb      	adds	r3, r7, #7
   19f8c:	781b      	ldrb	r3, [r3, #0]
   19f8e:	2b08      	cmp	r3, #8
   19f90:	d905      	bls.n	19f9e <prvTraceGetPriorityProperty+0x26>
   19f92:	4b1b      	ldr	r3, [pc, #108]	; (1a000 <prvTraceGetPriorityProperty+0x88>)
   19f94:	0018      	movs	r0, r3
   19f96:	4b1b      	ldr	r3, [pc, #108]	; (1a004 <prvTraceGetPriorityProperty+0x8c>)
   19f98:	4798      	blx	r3
   19f9a:	2300      	movs	r3, #0
   19f9c:	e02b      	b.n	19ff6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19f9e:	4b1a      	ldr	r3, [pc, #104]	; (1a008 <prvTraceGetPriorityProperty+0x90>)
   19fa0:	681a      	ldr	r2, [r3, #0]
   19fa2:	1dfb      	adds	r3, r7, #7
   19fa4:	781b      	ldrb	r3, [r3, #0]
   19fa6:	2164      	movs	r1, #100	; 0x64
   19fa8:	18d3      	adds	r3, r2, r3
   19faa:	185b      	adds	r3, r3, r1
   19fac:	781b      	ldrb	r3, [r3, #0]
   19fae:	1dba      	adds	r2, r7, #6
   19fb0:	7812      	ldrb	r2, [r2, #0]
   19fb2:	429a      	cmp	r2, r3
   19fb4:	d905      	bls.n	19fc2 <prvTraceGetPriorityProperty+0x4a>
   19fb6:	4b15      	ldr	r3, [pc, #84]	; (1a00c <prvTraceGetPriorityProperty+0x94>)
   19fb8:	0018      	movs	r0, r3
   19fba:	4b12      	ldr	r3, [pc, #72]	; (1a004 <prvTraceGetPriorityProperty+0x8c>)
   19fbc:	4798      	blx	r3
   19fbe:	2300      	movs	r3, #0
   19fc0:	e019      	b.n	19ff6 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19fc2:	4b11      	ldr	r3, [pc, #68]	; (1a008 <prvTraceGetPriorityProperty+0x90>)
   19fc4:	681c      	ldr	r4, [r3, #0]
   19fc6:	1dfb      	adds	r3, r7, #7
   19fc8:	781a      	ldrb	r2, [r3, #0]
   19fca:	1dbb      	adds	r3, r7, #6
   19fcc:	781b      	ldrb	r3, [r3, #0]
   19fce:	0011      	movs	r1, r2
   19fd0:	0018      	movs	r0, r3
   19fd2:	4b0f      	ldr	r3, [pc, #60]	; (1a010 <prvTraceGetPriorityProperty+0x98>)
   19fd4:	4798      	blx	r3
   19fd6:	0003      	movs	r3, r0
   19fd8:	0018      	movs	r0, r3
   19fda:	4b0b      	ldr	r3, [pc, #44]	; (1a008 <prvTraceGetPriorityProperty+0x90>)
   19fdc:	681a      	ldr	r2, [r3, #0]
   19fde:	1dfb      	adds	r3, r7, #7
   19fe0:	781b      	ldrb	r3, [r3, #0]
   19fe2:	2170      	movs	r1, #112	; 0x70
   19fe4:	18d3      	adds	r3, r2, r3
   19fe6:	185b      	adds	r3, r3, r1
   19fe8:	781b      	ldrb	r3, [r3, #0]
   19fea:	18c3      	adds	r3, r0, r3
   19fec:	3301      	adds	r3, #1
   19fee:	229c      	movs	r2, #156	; 0x9c
   19ff0:	18e3      	adds	r3, r4, r3
   19ff2:	189b      	adds	r3, r3, r2
   19ff4:	781b      	ldrb	r3, [r3, #0]
}
   19ff6:	0018      	movs	r0, r3
   19ff8:	46bd      	mov	sp, r7
   19ffa:	b003      	add	sp, #12
   19ffc:	bd90      	pop	{r4, r7, pc}
   19ffe:	46c0      	nop			; (mov r8, r8)
   1a000:	00038b3c 	.word	0x00038b3c
   1a004:	0001a85d 	.word	0x0001a85d
   1a008:	20000df4 	.word	0x20000df4
   1a00c:	00038b88 	.word	0x00038b88
   1a010:	0001a469 	.word	0x0001a469

0001a014 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1a014:	b590      	push	{r4, r7, lr}
   1a016:	b083      	sub	sp, #12
   1a018:	af00      	add	r7, sp, #0
   1a01a:	0004      	movs	r4, r0
   1a01c:	0008      	movs	r0, r1
   1a01e:	0011      	movs	r1, r2
   1a020:	1dfb      	adds	r3, r7, #7
   1a022:	1c22      	adds	r2, r4, #0
   1a024:	701a      	strb	r2, [r3, #0]
   1a026:	1dbb      	adds	r3, r7, #6
   1a028:	1c02      	adds	r2, r0, #0
   1a02a:	701a      	strb	r2, [r3, #0]
   1a02c:	1d7b      	adds	r3, r7, #5
   1a02e:	1c0a      	adds	r2, r1, #0
   1a030:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1a032:	1dfb      	adds	r3, r7, #7
   1a034:	781b      	ldrb	r3, [r3, #0]
   1a036:	2b08      	cmp	r3, #8
   1a038:	d904      	bls.n	1a044 <prvTraceSetObjectState+0x30>
   1a03a:	4b1a      	ldr	r3, [pc, #104]	; (1a0a4 <prvTraceSetObjectState+0x90>)
   1a03c:	0018      	movs	r0, r3
   1a03e:	4b1a      	ldr	r3, [pc, #104]	; (1a0a8 <prvTraceSetObjectState+0x94>)
   1a040:	4798      	blx	r3
   1a042:	e02b      	b.n	1a09c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1a044:	4b19      	ldr	r3, [pc, #100]	; (1a0ac <prvTraceSetObjectState+0x98>)
   1a046:	681a      	ldr	r2, [r3, #0]
   1a048:	1dfb      	adds	r3, r7, #7
   1a04a:	781b      	ldrb	r3, [r3, #0]
   1a04c:	2164      	movs	r1, #100	; 0x64
   1a04e:	18d3      	adds	r3, r2, r3
   1a050:	185b      	adds	r3, r3, r1
   1a052:	781b      	ldrb	r3, [r3, #0]
   1a054:	1dba      	adds	r2, r7, #6
   1a056:	7812      	ldrb	r2, [r2, #0]
   1a058:	429a      	cmp	r2, r3
   1a05a:	d904      	bls.n	1a066 <prvTraceSetObjectState+0x52>
   1a05c:	4b14      	ldr	r3, [pc, #80]	; (1a0b0 <prvTraceSetObjectState+0x9c>)
   1a05e:	0018      	movs	r0, r3
   1a060:	4b11      	ldr	r3, [pc, #68]	; (1a0a8 <prvTraceSetObjectState+0x94>)
   1a062:	4798      	blx	r3
   1a064:	e01a      	b.n	1a09c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1a066:	4b11      	ldr	r3, [pc, #68]	; (1a0ac <prvTraceSetObjectState+0x98>)
   1a068:	681c      	ldr	r4, [r3, #0]
   1a06a:	1dfb      	adds	r3, r7, #7
   1a06c:	781a      	ldrb	r2, [r3, #0]
   1a06e:	1dbb      	adds	r3, r7, #6
   1a070:	781b      	ldrb	r3, [r3, #0]
   1a072:	0011      	movs	r1, r2
   1a074:	0018      	movs	r0, r3
   1a076:	4b0f      	ldr	r3, [pc, #60]	; (1a0b4 <prvTraceSetObjectState+0xa0>)
   1a078:	4798      	blx	r3
   1a07a:	0003      	movs	r3, r0
   1a07c:	0018      	movs	r0, r3
   1a07e:	4b0b      	ldr	r3, [pc, #44]	; (1a0ac <prvTraceSetObjectState+0x98>)
   1a080:	681a      	ldr	r2, [r3, #0]
   1a082:	1dfb      	adds	r3, r7, #7
   1a084:	781b      	ldrb	r3, [r3, #0]
   1a086:	2170      	movs	r1, #112	; 0x70
   1a088:	18d3      	adds	r3, r2, r3
   1a08a:	185b      	adds	r3, r3, r1
   1a08c:	781b      	ldrb	r3, [r3, #0]
   1a08e:	18c3      	adds	r3, r0, r3
   1a090:	229c      	movs	r2, #156	; 0x9c
   1a092:	18e3      	adds	r3, r4, r3
   1a094:	189b      	adds	r3, r3, r2
   1a096:	1d7a      	adds	r2, r7, #5
   1a098:	7812      	ldrb	r2, [r2, #0]
   1a09a:	701a      	strb	r2, [r3, #0]
}
   1a09c:	46bd      	mov	sp, r7
   1a09e:	b003      	add	sp, #12
   1a0a0:	bd90      	pop	{r4, r7, pc}
   1a0a2:	46c0      	nop			; (mov r8, r8)
   1a0a4:	00038bc8 	.word	0x00038bc8
   1a0a8:	0001a85d 	.word	0x0001a85d
   1a0ac:	20000df4 	.word	0x20000df4
   1a0b0:	00038c0c 	.word	0x00038c0c
   1a0b4:	0001a469 	.word	0x0001a469

0001a0b8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1a0b8:	b590      	push	{r4, r7, lr}
   1a0ba:	b083      	sub	sp, #12
   1a0bc:	af00      	add	r7, sp, #0
   1a0be:	0002      	movs	r2, r0
   1a0c0:	1dfb      	adds	r3, r7, #7
   1a0c2:	701a      	strb	r2, [r3, #0]
   1a0c4:	1dbb      	adds	r3, r7, #6
   1a0c6:	1c0a      	adds	r2, r1, #0
   1a0c8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1a0ca:	1dfb      	adds	r3, r7, #7
   1a0cc:	781b      	ldrb	r3, [r3, #0]
   1a0ce:	2b08      	cmp	r3, #8
   1a0d0:	d905      	bls.n	1a0de <prvTraceGetObjectState+0x26>
   1a0d2:	4b1a      	ldr	r3, [pc, #104]	; (1a13c <prvTraceGetObjectState+0x84>)
   1a0d4:	0018      	movs	r0, r3
   1a0d6:	4b1a      	ldr	r3, [pc, #104]	; (1a140 <prvTraceGetObjectState+0x88>)
   1a0d8:	4798      	blx	r3
   1a0da:	2300      	movs	r3, #0
   1a0dc:	e02a      	b.n	1a134 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1a0de:	4b19      	ldr	r3, [pc, #100]	; (1a144 <prvTraceGetObjectState+0x8c>)
   1a0e0:	681a      	ldr	r2, [r3, #0]
   1a0e2:	1dfb      	adds	r3, r7, #7
   1a0e4:	781b      	ldrb	r3, [r3, #0]
   1a0e6:	2164      	movs	r1, #100	; 0x64
   1a0e8:	18d3      	adds	r3, r2, r3
   1a0ea:	185b      	adds	r3, r3, r1
   1a0ec:	781b      	ldrb	r3, [r3, #0]
   1a0ee:	1dba      	adds	r2, r7, #6
   1a0f0:	7812      	ldrb	r2, [r2, #0]
   1a0f2:	429a      	cmp	r2, r3
   1a0f4:	d905      	bls.n	1a102 <prvTraceGetObjectState+0x4a>
   1a0f6:	4b14      	ldr	r3, [pc, #80]	; (1a148 <prvTraceGetObjectState+0x90>)
   1a0f8:	0018      	movs	r0, r3
   1a0fa:	4b11      	ldr	r3, [pc, #68]	; (1a140 <prvTraceGetObjectState+0x88>)
   1a0fc:	4798      	blx	r3
   1a0fe:	2300      	movs	r3, #0
   1a100:	e018      	b.n	1a134 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1a102:	4b10      	ldr	r3, [pc, #64]	; (1a144 <prvTraceGetObjectState+0x8c>)
   1a104:	681c      	ldr	r4, [r3, #0]
   1a106:	1dfb      	adds	r3, r7, #7
   1a108:	781a      	ldrb	r2, [r3, #0]
   1a10a:	1dbb      	adds	r3, r7, #6
   1a10c:	781b      	ldrb	r3, [r3, #0]
   1a10e:	0011      	movs	r1, r2
   1a110:	0018      	movs	r0, r3
   1a112:	4b0e      	ldr	r3, [pc, #56]	; (1a14c <prvTraceGetObjectState+0x94>)
   1a114:	4798      	blx	r3
   1a116:	0003      	movs	r3, r0
   1a118:	0018      	movs	r0, r3
   1a11a:	4b0a      	ldr	r3, [pc, #40]	; (1a144 <prvTraceGetObjectState+0x8c>)
   1a11c:	681a      	ldr	r2, [r3, #0]
   1a11e:	1dfb      	adds	r3, r7, #7
   1a120:	781b      	ldrb	r3, [r3, #0]
   1a122:	2170      	movs	r1, #112	; 0x70
   1a124:	18d3      	adds	r3, r2, r3
   1a126:	185b      	adds	r3, r3, r1
   1a128:	781b      	ldrb	r3, [r3, #0]
   1a12a:	18c3      	adds	r3, r0, r3
   1a12c:	229c      	movs	r2, #156	; 0x9c
   1a12e:	18e3      	adds	r3, r4, r3
   1a130:	189b      	adds	r3, r3, r2
   1a132:	781b      	ldrb	r3, [r3, #0]
}
   1a134:	0018      	movs	r0, r3
   1a136:	46bd      	mov	sp, r7
   1a138:	b003      	add	sp, #12
   1a13a:	bd90      	pop	{r4, r7, pc}
   1a13c:	00038c48 	.word	0x00038c48
   1a140:	0001a85d 	.word	0x0001a85d
   1a144:	20000df4 	.word	0x20000df4
   1a148:	00038c8c 	.word	0x00038c8c
   1a14c:	0001a469 	.word	0x0001a469

0001a150 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1a150:	b590      	push	{r4, r7, lr}
   1a152:	b083      	sub	sp, #12
   1a154:	af00      	add	r7, sp, #0
   1a156:	0002      	movs	r2, r0
   1a158:	1dfb      	adds	r3, r7, #7
   1a15a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1a15c:	4b11      	ldr	r3, [pc, #68]	; (1a1a4 <prvTraceSetTaskInstanceFinished+0x54>)
   1a15e:	681b      	ldr	r3, [r3, #0]
   1a160:	2267      	movs	r2, #103	; 0x67
   1a162:	5c9b      	ldrb	r3, [r3, r2]
   1a164:	1dfa      	adds	r2, r7, #7
   1a166:	7812      	ldrb	r2, [r2, #0]
   1a168:	429a      	cmp	r2, r3
   1a16a:	d904      	bls.n	1a176 <prvTraceSetTaskInstanceFinished+0x26>
   1a16c:	4b0e      	ldr	r3, [pc, #56]	; (1a1a8 <prvTraceSetTaskInstanceFinished+0x58>)
   1a16e:	0018      	movs	r0, r3
   1a170:	4b0e      	ldr	r3, [pc, #56]	; (1a1ac <prvTraceSetTaskInstanceFinished+0x5c>)
   1a172:	4798      	blx	r3
   1a174:	e013      	b.n	1a19e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1a176:	4b0b      	ldr	r3, [pc, #44]	; (1a1a4 <prvTraceSetTaskInstanceFinished+0x54>)
   1a178:	681c      	ldr	r4, [r3, #0]
   1a17a:	1dfb      	adds	r3, r7, #7
   1a17c:	781b      	ldrb	r3, [r3, #0]
   1a17e:	2103      	movs	r1, #3
   1a180:	0018      	movs	r0, r3
   1a182:	4b0b      	ldr	r3, [pc, #44]	; (1a1b0 <prvTraceSetTaskInstanceFinished+0x60>)
   1a184:	4798      	blx	r3
   1a186:	0003      	movs	r3, r0
   1a188:	0019      	movs	r1, r3
   1a18a:	4b06      	ldr	r3, [pc, #24]	; (1a1a4 <prvTraceSetTaskInstanceFinished+0x54>)
   1a18c:	681b      	ldr	r3, [r3, #0]
   1a18e:	2273      	movs	r2, #115	; 0x73
   1a190:	5c9b      	ldrb	r3, [r3, r2]
   1a192:	18cb      	adds	r3, r1, r3
   1a194:	229c      	movs	r2, #156	; 0x9c
   1a196:	18e3      	adds	r3, r4, r3
   1a198:	189b      	adds	r3, r3, r2
   1a19a:	2200      	movs	r2, #0
   1a19c:	701a      	strb	r2, [r3, #0]
#endif
}
   1a19e:	46bd      	mov	sp, r7
   1a1a0:	b003      	add	sp, #12
   1a1a2:	bd90      	pop	{r4, r7, pc}
   1a1a4:	20000df4 	.word	0x20000df4
   1a1a8:	00038cc8 	.word	0x00038cc8
   1a1ac:	0001a85d 	.word	0x0001a85d
   1a1b0:	0001a469 	.word	0x0001a469

0001a1b4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1a1b4:	b580      	push	{r7, lr}
   1a1b6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1a1b8:	4b75      	ldr	r3, [pc, #468]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a1ba:	681b      	ldr	r3, [r3, #0]
   1a1bc:	2b00      	cmp	r3, #0
   1a1be:	d103      	bne.n	1a1c8 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1a1c0:	4b73      	ldr	r3, [pc, #460]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a1c2:	4a74      	ldr	r2, [pc, #464]	; (1a394 <prvTraceInitTraceData+0x1e0>)
   1a1c4:	601a      	str	r2, [r3, #0]
   1a1c6:	e006      	b.n	1a1d6 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1a1c8:	4b71      	ldr	r3, [pc, #452]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a1ca:	681b      	ldr	r3, [r3, #0]
   1a1cc:	781b      	ldrb	r3, [r3, #0]
   1a1ce:	b2db      	uxtb	r3, r3
   1a1d0:	2b01      	cmp	r3, #1
   1a1d2:	d100      	bne.n	1a1d6 <prvTraceInitTraceData+0x22>
   1a1d4:	e0d8      	b.n	1a388 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1a1d6:	4b70      	ldr	r3, [pc, #448]	; (1a398 <prvTraceInitTraceData+0x1e4>)
   1a1d8:	681a      	ldr	r2, [r3, #0]
   1a1da:	4b70      	ldr	r3, [pc, #448]	; (1a39c <prvTraceInitTraceData+0x1e8>)
   1a1dc:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1a1de:	4b6c      	ldr	r3, [pc, #432]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a1e0:	6818      	ldr	r0, [r3, #0]
   1a1e2:	23bd      	movs	r3, #189	; 0xbd
   1a1e4:	011b      	lsls	r3, r3, #4
   1a1e6:	001a      	movs	r2, r3
   1a1e8:	2100      	movs	r1, #0
   1a1ea:	4b6d      	ldr	r3, [pc, #436]	; (1a3a0 <prvTraceInitTraceData+0x1ec>)
   1a1ec:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1a1ee:	4b68      	ldr	r3, [pc, #416]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a1f0:	681b      	ldr	r3, [r3, #0]
   1a1f2:	4a6c      	ldr	r2, [pc, #432]	; (1a3a4 <prvTraceInitTraceData+0x1f0>)
   1a1f4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1a1f6:	4b66      	ldr	r3, [pc, #408]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a1f8:	681b      	ldr	r3, [r3, #0]
   1a1fa:	2205      	movs	r2, #5
   1a1fc:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1a1fe:	4b64      	ldr	r3, [pc, #400]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a200:	681b      	ldr	r3, [r3, #0]
   1a202:	2200      	movs	r2, #0
   1a204:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1a206:	4b62      	ldr	r3, [pc, #392]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a208:	681b      	ldr	r3, [r3, #0]
   1a20a:	22bd      	movs	r2, #189	; 0xbd
   1a20c:	0112      	lsls	r2, r2, #4
   1a20e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1a210:	4b5f      	ldr	r3, [pc, #380]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a212:	681b      	ldr	r3, [r3, #0]
   1a214:	2296      	movs	r2, #150	; 0x96
   1a216:	0052      	lsls	r2, r2, #1
   1a218:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1a21a:	4b5d      	ldr	r3, [pc, #372]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a21c:	681b      	ldr	r3, [r3, #0]
   1a21e:	4a62      	ldr	r2, [pc, #392]	; (1a3a8 <prvTraceInitTraceData+0x1f4>)
   1a220:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1a222:	4b5b      	ldr	r3, [pc, #364]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a224:	681b      	ldr	r3, [r3, #0]
   1a226:	2200      	movs	r2, #0
   1a228:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1a22a:	4b59      	ldr	r3, [pc, #356]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a22c:	681b      	ldr	r3, [r3, #0]
   1a22e:	2200      	movs	r2, #0
   1a230:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1a232:	4b5e      	ldr	r3, [pc, #376]	; (1a3ac <prvTraceInitTraceData+0x1f8>)
   1a234:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1a236:	4b56      	ldr	r3, [pc, #344]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a238:	681b      	ldr	r3, [r3, #0]
   1a23a:	4a5d      	ldr	r2, [pc, #372]	; (1a3b0 <prvTraceInitTraceData+0x1fc>)
   1a23c:	495d      	ldr	r1, [pc, #372]	; (1a3b4 <prvTraceInitTraceData+0x200>)
   1a23e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1a240:	4b53      	ldr	r3, [pc, #332]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a242:	681a      	ldr	r2, [r3, #0]
   1a244:	23ac      	movs	r3, #172	; 0xac
   1a246:	00db      	lsls	r3, r3, #3
   1a248:	21c8      	movs	r1, #200	; 0xc8
   1a24a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1a24c:	4b50      	ldr	r3, [pc, #320]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a24e:	681b      	ldr	r3, [r3, #0]
   1a250:	4a59      	ldr	r2, [pc, #356]	; (1a3b8 <prvTraceInitTraceData+0x204>)
   1a252:	2101      	movs	r1, #1
   1a254:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1a256:	4b4e      	ldr	r3, [pc, #312]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a258:	681a      	ldr	r2, [r3, #0]
   1a25a:	23d7      	movs	r3, #215	; 0xd7
   1a25c:	00db      	lsls	r3, r3, #3
   1a25e:	4957      	ldr	r1, [pc, #348]	; (1a3bc <prvTraceInitTraceData+0x208>)
   1a260:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1a262:	4b4b      	ldr	r3, [pc, #300]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a264:	681b      	ldr	r3, [r3, #0]
   1a266:	4a56      	ldr	r2, [pc, #344]	; (1a3c0 <prvTraceInitTraceData+0x20c>)
   1a268:	4694      	mov	ip, r2
   1a26a:	4463      	add	r3, ip
   1a26c:	4955      	ldr	r1, [pc, #340]	; (1a3c4 <prvTraceInitTraceData+0x210>)
   1a26e:	2250      	movs	r2, #80	; 0x50
   1a270:	0018      	movs	r0, r3
   1a272:	4b55      	ldr	r3, [pc, #340]	; (1a3c8 <prvTraceInitTraceData+0x214>)
   1a274:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1a276:	4b46      	ldr	r3, [pc, #280]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a278:	681b      	ldr	r3, [r3, #0]
   1a27a:	4a54      	ldr	r2, [pc, #336]	; (1a3cc <prvTraceInitTraceData+0x218>)
   1a27c:	4954      	ldr	r1, [pc, #336]	; (1a3d0 <prvTraceInitTraceData+0x21c>)
   1a27e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1a280:	4b43      	ldr	r3, [pc, #268]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a282:	681b      	ldr	r3, [r3, #0]
   1a284:	4a53      	ldr	r2, [pc, #332]	; (1a3d4 <prvTraceInitTraceData+0x220>)
   1a286:	210a      	movs	r1, #10
   1a288:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1a28a:	4b41      	ldr	r3, [pc, #260]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a28c:	681b      	ldr	r3, [r3, #0]
   1a28e:	4a52      	ldr	r2, [pc, #328]	; (1a3d8 <prvTraceInitTraceData+0x224>)
   1a290:	210b      	movs	r1, #11
   1a292:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1a294:	4b3e      	ldr	r3, [pc, #248]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a296:	681b      	ldr	r3, [r3, #0]
   1a298:	4a50      	ldr	r2, [pc, #320]	; (1a3dc <prvTraceInitTraceData+0x228>)
   1a29a:	210c      	movs	r1, #12
   1a29c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1a29e:	4b3c      	ldr	r3, [pc, #240]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2a0:	681b      	ldr	r3, [r3, #0]
   1a2a2:	4a4f      	ldr	r2, [pc, #316]	; (1a3e0 <prvTraceInitTraceData+0x22c>)
   1a2a4:	210d      	movs	r1, #13
   1a2a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1a2a8:	4b39      	ldr	r3, [pc, #228]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2aa:	681b      	ldr	r3, [r3, #0]
   1a2ac:	4a4d      	ldr	r2, [pc, #308]	; (1a3e4 <prvTraceInitTraceData+0x230>)
   1a2ae:	2171      	movs	r1, #113	; 0x71
   1a2b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1a2b2:	4b37      	ldr	r3, [pc, #220]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2b4:	681b      	ldr	r3, [r3, #0]
   1a2b6:	4a4c      	ldr	r2, [pc, #304]	; (1a3e8 <prvTraceInitTraceData+0x234>)
   1a2b8:	2172      	movs	r1, #114	; 0x72
   1a2ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1a2bc:	4b34      	ldr	r3, [pc, #208]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2be:	681b      	ldr	r3, [r3, #0]
   1a2c0:	4a4a      	ldr	r2, [pc, #296]	; (1a3ec <prvTraceInitTraceData+0x238>)
   1a2c2:	2173      	movs	r1, #115	; 0x73
   1a2c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1a2c6:	4b32      	ldr	r3, [pc, #200]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2c8:	681b      	ldr	r3, [r3, #0]
   1a2ca:	4a49      	ldr	r2, [pc, #292]	; (1a3f0 <prvTraceInitTraceData+0x23c>)
   1a2cc:	2174      	movs	r1, #116	; 0x74
   1a2ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1a2d0:	4b2f      	ldr	r3, [pc, #188]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2d2:	681b      	ldr	r3, [r3, #0]
   1a2d4:	4a47      	ldr	r2, [pc, #284]	; (1a3f4 <prvTraceInitTraceData+0x240>)
   1a2d6:	21f1      	movs	r1, #241	; 0xf1
   1a2d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1a2da:	4b2d      	ldr	r3, [pc, #180]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2dc:	681b      	ldr	r3, [r3, #0]
   1a2de:	4a46      	ldr	r2, [pc, #280]	; (1a3f8 <prvTraceInitTraceData+0x244>)
   1a2e0:	21f2      	movs	r1, #242	; 0xf2
   1a2e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1a2e4:	4b2a      	ldr	r3, [pc, #168]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2e6:	681b      	ldr	r3, [r3, #0]
   1a2e8:	4a44      	ldr	r2, [pc, #272]	; (1a3fc <prvTraceInitTraceData+0x248>)
   1a2ea:	21f3      	movs	r1, #243	; 0xf3
   1a2ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1a2ee:	4b28      	ldr	r3, [pc, #160]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2f0:	681b      	ldr	r3, [r3, #0]
   1a2f2:	4a43      	ldr	r2, [pc, #268]	; (1a400 <prvTraceInitTraceData+0x24c>)
   1a2f4:	21f4      	movs	r1, #244	; 0xf4
   1a2f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1a2f8:	4b42      	ldr	r3, [pc, #264]	; (1a404 <prvTraceInitTraceData+0x250>)
   1a2fa:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1a2fc:	4b24      	ldr	r3, [pc, #144]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a2fe:	681b      	ldr	r3, [r3, #0]
   1a300:	22f4      	movs	r2, #244	; 0xf4
   1a302:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1a304:	4b22      	ldr	r3, [pc, #136]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a306:	681b      	ldr	r3, [r3, #0]
   1a308:	22f3      	movs	r2, #243	; 0xf3
   1a30a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1a30c:	4b20      	ldr	r3, [pc, #128]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a30e:	681b      	ldr	r3, [r3, #0]
   1a310:	22f2      	movs	r2, #242	; 0xf2
   1a312:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1a314:	4b1e      	ldr	r3, [pc, #120]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a316:	681b      	ldr	r3, [r3, #0]
   1a318:	22f1      	movs	r2, #241	; 0xf1
   1a31a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1a31c:	4b1c      	ldr	r3, [pc, #112]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a31e:	681b      	ldr	r3, [r3, #0]
   1a320:	2274      	movs	r2, #116	; 0x74
   1a322:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1a324:	4b1a      	ldr	r3, [pc, #104]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a326:	681b      	ldr	r3, [r3, #0]
   1a328:	2273      	movs	r2, #115	; 0x73
   1a32a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1a32c:	4b18      	ldr	r3, [pc, #96]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a32e:	681b      	ldr	r3, [r3, #0]
   1a330:	2272      	movs	r2, #114	; 0x72
   1a332:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1a334:	4b16      	ldr	r3, [pc, #88]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a336:	681b      	ldr	r3, [r3, #0]
   1a338:	2271      	movs	r2, #113	; 0x71
   1a33a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1a33c:	4b14      	ldr	r3, [pc, #80]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a33e:	681b      	ldr	r3, [r3, #0]
   1a340:	2204      	movs	r2, #4
   1a342:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1a344:	4b12      	ldr	r3, [pc, #72]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a346:	681b      	ldr	r3, [r3, #0]
   1a348:	2203      	movs	r2, #3
   1a34a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1a34c:	4b10      	ldr	r3, [pc, #64]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a34e:	681b      	ldr	r3, [r3, #0]
   1a350:	2202      	movs	r2, #2
   1a352:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1a354:	4b0e      	ldr	r3, [pc, #56]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a356:	681b      	ldr	r3, [r3, #0]
   1a358:	2201      	movs	r2, #1
   1a35a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1a35c:	4b2a      	ldr	r3, [pc, #168]	; (1a408 <prvTraceInitTraceData+0x254>)
   1a35e:	681b      	ldr	r3, [r3, #0]
   1a360:	2b00      	cmp	r3, #0
   1a362:	d012      	beq.n	1a38a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a364:	4b0a      	ldr	r3, [pc, #40]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a366:	681b      	ldr	r3, [r3, #0]
   1a368:	4a15      	ldr	r2, [pc, #84]	; (1a3c0 <prvTraceInitTraceData+0x20c>)
   1a36a:	1898      	adds	r0, r3, r2
   1a36c:	4b26      	ldr	r3, [pc, #152]	; (1a408 <prvTraceInitTraceData+0x254>)
   1a36e:	681b      	ldr	r3, [r3, #0]
   1a370:	2250      	movs	r2, #80	; 0x50
   1a372:	0019      	movs	r1, r3
   1a374:	4b14      	ldr	r3, [pc, #80]	; (1a3c8 <prvTraceInitTraceData+0x214>)
   1a376:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1a378:	4b05      	ldr	r3, [pc, #20]	; (1a390 <prvTraceInitTraceData+0x1dc>)
   1a37a:	681b      	ldr	r3, [r3, #0]
   1a37c:	4a23      	ldr	r2, [pc, #140]	; (1a40c <prvTraceInitTraceData+0x258>)
   1a37e:	2101      	movs	r1, #1
   1a380:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1a382:	4b23      	ldr	r3, [pc, #140]	; (1a410 <prvTraceInitTraceData+0x25c>)
   1a384:	4798      	blx	r3
   1a386:	e000      	b.n	1a38a <prvTraceInitTraceData+0x1d6>
			return;
   1a388:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1a38a:	46bd      	mov	sp, r7
   1a38c:	bd80      	pop	{r7, pc}
   1a38e:	46c0      	nop			; (mov r8, r8)
   1a390:	20000df4 	.word	0x20000df4
   1a394:	20004a8c 	.word	0x20004a8c
   1a398:	e000e018 	.word	0xe000e018
   1a39c:	2000565c 	.word	0x2000565c
   1a3a0:	0003577f 	.word	0x0003577f
   1a3a4:	00001aa1 	.word	0x00001aa1
   1a3a8:	f0f0f0f0 	.word	0xf0f0f0f0
   1a3ac:	00019319 	.word	0x00019319
   1a3b0:	0000055c 	.word	0x0000055c
   1a3b4:	f1f1f1f1 	.word	0xf1f1f1f1
   1a3b8:	00000564 	.word	0x00000564
   1a3bc:	f2f2f2f2 	.word	0xf2f2f2f2
   1a3c0:	000006bc 	.word	0x000006bc
   1a3c4:	00038d10 	.word	0x00038d10
   1a3c8:	0001a729 	.word	0x0001a729
   1a3cc:	0000070c 	.word	0x0000070c
   1a3d0:	f3f3f3f3 	.word	0xf3f3f3f3
   1a3d4:	00000bc4 	.word	0x00000bc4
   1a3d8:	00000bc5 	.word	0x00000bc5
   1a3dc:	00000bc6 	.word	0x00000bc6
   1a3e0:	00000bc7 	.word	0x00000bc7
   1a3e4:	00000bc8 	.word	0x00000bc8
   1a3e8:	00000bc9 	.word	0x00000bc9
   1a3ec:	00000bca 	.word	0x00000bca
   1a3f0:	00000bcb 	.word	0x00000bcb
   1a3f4:	00000bcc 	.word	0x00000bcc
   1a3f8:	00000bcd 	.word	0x00000bcd
   1a3fc:	00000bce 	.word	0x00000bce
   1a400:	00000bcf 	.word	0x00000bcf
   1a404:	000194b9 	.word	0x000194b9
   1a408:	20000d54 	.word	0x20000d54
   1a40c:	000006b4 	.word	0x000006b4
   1a410:	00019721 	.word	0x00019721

0001a414 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1a414:	b580      	push	{r7, lr}
   1a416:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1a418:	4b10      	ldr	r3, [pc, #64]	; (1a45c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a41a:	681b      	ldr	r3, [r3, #0]
   1a41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a41e:	2b00      	cmp	r3, #0
   1a420:	d101      	bne.n	1a426 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1a422:	2300      	movs	r3, #0
   1a424:	e017      	b.n	1a456 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a426:	4b0d      	ldr	r3, [pc, #52]	; (1a45c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a428:	681b      	ldr	r3, [r3, #0]
   1a42a:	69da      	ldr	r2, [r3, #28]
   1a42c:	232c      	movs	r3, #44	; 0x2c
   1a42e:	33ff      	adds	r3, #255	; 0xff
   1a430:	429a      	cmp	r2, r3
   1a432:	d905      	bls.n	1a440 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1a434:	4b0a      	ldr	r3, [pc, #40]	; (1a460 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a436:	0018      	movs	r0, r3
   1a438:	4b0a      	ldr	r3, [pc, #40]	; (1a464 <prvTraceNextFreeEventBufferSlot+0x50>)
   1a43a:	4798      	blx	r3
		return NULL;
   1a43c:	2300      	movs	r3, #0
   1a43e:	e00a      	b.n	1a456 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1a440:	4b06      	ldr	r3, [pc, #24]	; (1a45c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a442:	681a      	ldr	r2, [r3, #0]
   1a444:	4b05      	ldr	r3, [pc, #20]	; (1a45c <prvTraceNextFreeEventBufferSlot+0x48>)
   1a446:	681b      	ldr	r3, [r3, #0]
   1a448:	69db      	ldr	r3, [r3, #28]
   1a44a:	009b      	lsls	r3, r3, #2
   1a44c:	21e2      	movs	r1, #226	; 0xe2
   1a44e:	00c9      	lsls	r1, r1, #3
   1a450:	468c      	mov	ip, r1
   1a452:	4463      	add	r3, ip
   1a454:	18d3      	adds	r3, r2, r3
}
   1a456:	0018      	movs	r0, r3
   1a458:	46bd      	mov	sp, r7
   1a45a:	bd80      	pop	{r7, pc}
   1a45c:	20000df4 	.word	0x20000df4
   1a460:	00038d24 	.word	0x00038d24
   1a464:	0001a85d 	.word	0x0001a85d

0001a468 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1a468:	b580      	push	{r7, lr}
   1a46a:	b082      	sub	sp, #8
   1a46c:	af00      	add	r7, sp, #0
   1a46e:	0002      	movs	r2, r0
   1a470:	1dfb      	adds	r3, r7, #7
   1a472:	701a      	strb	r2, [r3, #0]
   1a474:	1dbb      	adds	r3, r7, #6
   1a476:	1c0a      	adds	r2, r1, #0
   1a478:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a47a:	1dbb      	adds	r3, r7, #6
   1a47c:	781b      	ldrb	r3, [r3, #0]
   1a47e:	2b08      	cmp	r3, #8
   1a480:	d905      	bls.n	1a48e <uiIndexOfObject+0x26>
   1a482:	4b2a      	ldr	r3, [pc, #168]	; (1a52c <uiIndexOfObject+0xc4>)
   1a484:	0018      	movs	r0, r3
   1a486:	4b2a      	ldr	r3, [pc, #168]	; (1a530 <uiIndexOfObject+0xc8>)
   1a488:	4798      	blx	r3
   1a48a:	2300      	movs	r3, #0
   1a48c:	e049      	b.n	1a522 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1a48e:	1dfb      	adds	r3, r7, #7
   1a490:	781b      	ldrb	r3, [r3, #0]
   1a492:	2b00      	cmp	r3, #0
   1a494:	d00b      	beq.n	1a4ae <uiIndexOfObject+0x46>
   1a496:	4b27      	ldr	r3, [pc, #156]	; (1a534 <uiIndexOfObject+0xcc>)
   1a498:	681a      	ldr	r2, [r3, #0]
   1a49a:	1dbb      	adds	r3, r7, #6
   1a49c:	781b      	ldrb	r3, [r3, #0]
   1a49e:	2164      	movs	r1, #100	; 0x64
   1a4a0:	18d3      	adds	r3, r2, r3
   1a4a2:	185b      	adds	r3, r3, r1
   1a4a4:	781b      	ldrb	r3, [r3, #0]
   1a4a6:	1dfa      	adds	r2, r7, #7
   1a4a8:	7812      	ldrb	r2, [r2, #0]
   1a4aa:	429a      	cmp	r2, r3
   1a4ac:	d905      	bls.n	1a4ba <uiIndexOfObject+0x52>
   1a4ae:	4b22      	ldr	r3, [pc, #136]	; (1a538 <uiIndexOfObject+0xd0>)
   1a4b0:	0018      	movs	r0, r3
   1a4b2:	4b1f      	ldr	r3, [pc, #124]	; (1a530 <uiIndexOfObject+0xc8>)
   1a4b4:	4798      	blx	r3
   1a4b6:	2300      	movs	r3, #0
   1a4b8:	e033      	b.n	1a522 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a4ba:	1dbb      	adds	r3, r7, #6
   1a4bc:	781b      	ldrb	r3, [r3, #0]
   1a4be:	2b08      	cmp	r3, #8
   1a4c0:	d82a      	bhi.n	1a518 <uiIndexOfObject+0xb0>
   1a4c2:	1dfb      	adds	r3, r7, #7
   1a4c4:	781b      	ldrb	r3, [r3, #0]
   1a4c6:	2b00      	cmp	r3, #0
   1a4c8:	d026      	beq.n	1a518 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1a4ca:	4b1a      	ldr	r3, [pc, #104]	; (1a534 <uiIndexOfObject+0xcc>)
   1a4cc:	681a      	ldr	r2, [r3, #0]
   1a4ce:	1dbb      	adds	r3, r7, #6
   1a4d0:	781b      	ldrb	r3, [r3, #0]
   1a4d2:	2164      	movs	r1, #100	; 0x64
   1a4d4:	18d3      	adds	r3, r2, r3
   1a4d6:	185b      	adds	r3, r3, r1
   1a4d8:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a4da:	1dfa      	adds	r2, r7, #7
   1a4dc:	7812      	ldrb	r2, [r2, #0]
   1a4de:	429a      	cmp	r2, r3
   1a4e0:	d81a      	bhi.n	1a518 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a4e2:	4b14      	ldr	r3, [pc, #80]	; (1a534 <uiIndexOfObject+0xcc>)
   1a4e4:	681a      	ldr	r2, [r3, #0]
   1a4e6:	1dbb      	adds	r3, r7, #6
   1a4e8:	781b      	ldrb	r3, [r3, #0]
   1a4ea:	3340      	adds	r3, #64	; 0x40
   1a4ec:	005b      	lsls	r3, r3, #1
   1a4ee:	18d3      	adds	r3, r2, r3
   1a4f0:	3308      	adds	r3, #8
   1a4f2:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a4f4:	4b0f      	ldr	r3, [pc, #60]	; (1a534 <uiIndexOfObject+0xcc>)
   1a4f6:	6819      	ldr	r1, [r3, #0]
   1a4f8:	1dbb      	adds	r3, r7, #6
   1a4fa:	781b      	ldrb	r3, [r3, #0]
   1a4fc:	207c      	movs	r0, #124	; 0x7c
   1a4fe:	18cb      	adds	r3, r1, r3
   1a500:	181b      	adds	r3, r3, r0
   1a502:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a504:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a506:	1df9      	adds	r1, r7, #7
   1a508:	7809      	ldrb	r1, [r1, #0]
   1a50a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a50c:	b289      	uxth	r1, r1
   1a50e:	434b      	muls	r3, r1
   1a510:	b29b      	uxth	r3, r3
   1a512:	18d3      	adds	r3, r2, r3
   1a514:	b29b      	uxth	r3, r3
   1a516:	e004      	b.n	1a522 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1a518:	4b08      	ldr	r3, [pc, #32]	; (1a53c <uiIndexOfObject+0xd4>)
   1a51a:	0018      	movs	r0, r3
   1a51c:	4b04      	ldr	r3, [pc, #16]	; (1a530 <uiIndexOfObject+0xc8>)
   1a51e:	4798      	blx	r3
	return 0;
   1a520:	2300      	movs	r3, #0
}
   1a522:	0018      	movs	r0, r3
   1a524:	46bd      	mov	sp, r7
   1a526:	b002      	add	sp, #8
   1a528:	bd80      	pop	{r7, pc}
   1a52a:	46c0      	nop			; (mov r8, r8)
   1a52c:	00038d4c 	.word	0x00038d4c
   1a530:	0001a85d 	.word	0x0001a85d
   1a534:	20000df4 	.word	0x20000df4
   1a538:	00038d8c 	.word	0x00038d8c
   1a53c:	00038dcc 	.word	0x00038dcc

0001a540 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1a540:	b580      	push	{r7, lr}
   1a542:	b088      	sub	sp, #32
   1a544:	af00      	add	r7, sp, #0
   1a546:	0002      	movs	r2, r0
   1a548:	1dfb      	adds	r3, r7, #7
   1a54a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1a54c:	4b5a      	ldr	r3, [pc, #360]	; (1a6b8 <prvTraceGetObjectHandle+0x178>)
   1a54e:	681b      	ldr	r3, [r3, #0]
   1a550:	2b00      	cmp	r3, #0
   1a552:	d105      	bne.n	1a560 <prvTraceGetObjectHandle+0x20>
   1a554:	4b59      	ldr	r3, [pc, #356]	; (1a6bc <prvTraceGetObjectHandle+0x17c>)
   1a556:	0018      	movs	r0, r3
   1a558:	4b59      	ldr	r3, [pc, #356]	; (1a6c0 <prvTraceGetObjectHandle+0x180>)
   1a55a:	4798      	blx	r3
   1a55c:	2300      	movs	r3, #0
   1a55e:	e0a7      	b.n	1a6b0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a560:	1dfb      	adds	r3, r7, #7
   1a562:	781b      	ldrb	r3, [r3, #0]
   1a564:	2b08      	cmp	r3, #8
   1a566:	d905      	bls.n	1a574 <prvTraceGetObjectHandle+0x34>
   1a568:	4b56      	ldr	r3, [pc, #344]	; (1a6c4 <prvTraceGetObjectHandle+0x184>)
   1a56a:	0018      	movs	r0, r3
   1a56c:	4b54      	ldr	r3, [pc, #336]	; (1a6c0 <prvTraceGetObjectHandle+0x180>)
   1a56e:	4798      	blx	r3
   1a570:	2300      	movs	r3, #0
   1a572:	e09d      	b.n	1a6b0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a574:	f3ef 8310 	mrs	r3, PRIMASK
   1a578:	60fb      	str	r3, [r7, #12]
  return(result);
   1a57a:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1a57c:	61bb      	str	r3, [r7, #24]
   1a57e:	2301      	movs	r3, #1
   1a580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a582:	693b      	ldr	r3, [r7, #16]
   1a584:	f383 8810 	msr	PRIMASK, r3
   1a588:	4b4f      	ldr	r3, [pc, #316]	; (1a6c8 <prvTraceGetObjectHandle+0x188>)
   1a58a:	681b      	ldr	r3, [r3, #0]
   1a58c:	1c5a      	adds	r2, r3, #1
   1a58e:	4b4e      	ldr	r3, [pc, #312]	; (1a6c8 <prvTraceGetObjectHandle+0x188>)
   1a590:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1a592:	1dfb      	adds	r3, r7, #7
   1a594:	781a      	ldrb	r2, [r3, #0]
   1a596:	4b4d      	ldr	r3, [pc, #308]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a598:	0052      	lsls	r2, r2, #1
   1a59a:	5ad3      	ldrh	r3, [r2, r3]
   1a59c:	001a      	movs	r2, r3
   1a59e:	4b4c      	ldr	r3, [pc, #304]	; (1a6d0 <prvTraceGetObjectHandle+0x190>)
   1a5a0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1a5a2:	4b4b      	ldr	r3, [pc, #300]	; (1a6d0 <prvTraceGetObjectHandle+0x190>)
   1a5a4:	681b      	ldr	r3, [r3, #0]
   1a5a6:	4a49      	ldr	r2, [pc, #292]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a5a8:	2148      	movs	r1, #72	; 0x48
   1a5aa:	18d3      	adds	r3, r2, r3
   1a5ac:	185b      	adds	r3, r3, r1
   1a5ae:	781b      	ldrb	r3, [r3, #0]
   1a5b0:	2b00      	cmp	r3, #0
   1a5b2:	d117      	bne.n	1a5e4 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a5b4:	4b46      	ldr	r3, [pc, #280]	; (1a6d0 <prvTraceGetObjectHandle+0x190>)
   1a5b6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a5b8:	4b45      	ldr	r3, [pc, #276]	; (1a6d0 <prvTraceGetObjectHandle+0x190>)
   1a5ba:	681b      	ldr	r3, [r3, #0]
   1a5bc:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1a5be:	1dfb      	adds	r3, r7, #7
   1a5c0:	781b      	ldrb	r3, [r3, #0]
   1a5c2:	4842      	ldr	r0, [pc, #264]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a5c4:	3308      	adds	r3, #8
   1a5c6:	005b      	lsls	r3, r3, #1
   1a5c8:	18c3      	adds	r3, r0, r3
   1a5ca:	3302      	adds	r3, #2
   1a5cc:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a5ce:	b2db      	uxtb	r3, r3
   1a5d0:	1acb      	subs	r3, r1, r3
   1a5d2:	b2db      	uxtb	r3, r3
   1a5d4:	3301      	adds	r3, #1
   1a5d6:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a5d8:	4b3c      	ldr	r3, [pc, #240]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a5da:	2148      	movs	r1, #72	; 0x48
   1a5dc:	189b      	adds	r3, r3, r2
   1a5de:	185b      	adds	r3, r3, r1
   1a5e0:	1c02      	adds	r2, r0, #0
   1a5e2:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1a5e4:	4b3a      	ldr	r3, [pc, #232]	; (1a6d0 <prvTraceGetObjectHandle+0x190>)
   1a5e6:	681a      	ldr	r2, [r3, #0]
   1a5e8:	231f      	movs	r3, #31
   1a5ea:	18fb      	adds	r3, r7, r3
   1a5ec:	4937      	ldr	r1, [pc, #220]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a5ee:	2048      	movs	r0, #72	; 0x48
   1a5f0:	188a      	adds	r2, r1, r2
   1a5f2:	1812      	adds	r2, r2, r0
   1a5f4:	7812      	ldrb	r2, [r2, #0]
   1a5f6:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a5f8:	1dfb      	adds	r3, r7, #7
   1a5fa:	781a      	ldrb	r2, [r3, #0]
   1a5fc:	4b33      	ldr	r3, [pc, #204]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a5fe:	0052      	lsls	r2, r2, #1
   1a600:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1a602:	1dfb      	adds	r3, r7, #7
   1a604:	781b      	ldrb	r3, [r3, #0]
   1a606:	4931      	ldr	r1, [pc, #196]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a608:	3310      	adds	r3, #16
   1a60a:	005b      	lsls	r3, r3, #1
   1a60c:	18cb      	adds	r3, r1, r3
   1a60e:	3304      	adds	r3, #4
   1a610:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a612:	429a      	cmp	r2, r3
   1a614:	d90d      	bls.n	1a632 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a616:	1dfb      	adds	r3, r7, #7
   1a618:	781b      	ldrb	r3, [r3, #0]
   1a61a:	0018      	movs	r0, r3
   1a61c:	4b2d      	ldr	r3, [pc, #180]	; (1a6d4 <prvTraceGetObjectHandle+0x194>)
   1a61e:	4798      	blx	r3
   1a620:	0003      	movs	r3, r0
   1a622:	0018      	movs	r0, r3
   1a624:	4b26      	ldr	r3, [pc, #152]	; (1a6c0 <prvTraceGetObjectHandle+0x180>)
   1a626:	4798      	blx	r3
		handle = 0;
   1a628:	231f      	movs	r3, #31
   1a62a:	18fb      	adds	r3, r7, r3
   1a62c:	2200      	movs	r2, #0
   1a62e:	701a      	strb	r2, [r3, #0]
   1a630:	e031      	b.n	1a696 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1a632:	1dfb      	adds	r3, r7, #7
   1a634:	781b      	ldrb	r3, [r3, #0]
   1a636:	4a25      	ldr	r2, [pc, #148]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a638:	0059      	lsls	r1, r3, #1
   1a63a:	5a8a      	ldrh	r2, [r1, r2]
   1a63c:	3201      	adds	r2, #1
   1a63e:	b291      	uxth	r1, r2
   1a640:	4a22      	ldr	r2, [pc, #136]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a642:	005b      	lsls	r3, r3, #1
   1a644:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a646:	1dfb      	adds	r3, r7, #7
   1a648:	781a      	ldrb	r2, [r3, #0]
   1a64a:	4b20      	ldr	r3, [pc, #128]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a64c:	0052      	lsls	r2, r2, #1
   1a64e:	5ad3      	ldrh	r3, [r2, r3]
   1a650:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1a652:	1dfb      	adds	r3, r7, #7
   1a654:	781b      	ldrb	r3, [r3, #0]
   1a656:	4a1d      	ldr	r2, [pc, #116]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a658:	3308      	adds	r3, #8
   1a65a:	005b      	lsls	r3, r3, #1
   1a65c:	18d3      	adds	r3, r2, r3
   1a65e:	3302      	adds	r3, #2
   1a660:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a662:	1acb      	subs	r3, r1, r3
   1a664:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1a666:	1dfb      	adds	r3, r7, #7
   1a668:	781b      	ldrb	r3, [r3, #0]
   1a66a:	4a18      	ldr	r2, [pc, #96]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a66c:	3318      	adds	r3, #24
   1a66e:	005b      	lsls	r3, r3, #1
   1a670:	18d3      	adds	r3, r2, r3
   1a672:	3306      	adds	r3, #6
   1a674:	881b      	ldrh	r3, [r3, #0]
   1a676:	001a      	movs	r2, r3
		if (hndCount >
   1a678:	697b      	ldr	r3, [r7, #20]
   1a67a:	429a      	cmp	r2, r3
   1a67c:	da0b      	bge.n	1a696 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a67e:	1dfb      	adds	r3, r7, #7
   1a680:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1a682:	697a      	ldr	r2, [r7, #20]
   1a684:	b2d2      	uxtb	r2, r2
   1a686:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a688:	4a10      	ldr	r2, [pc, #64]	; (1a6cc <prvTraceGetObjectHandle+0x18c>)
   1a68a:	3318      	adds	r3, #24
   1a68c:	005b      	lsls	r3, r3, #1
   1a68e:	18d3      	adds	r3, r2, r3
   1a690:	3306      	adds	r3, #6
   1a692:	1c0a      	adds	r2, r1, #0
   1a694:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1a696:	4b0c      	ldr	r3, [pc, #48]	; (1a6c8 <prvTraceGetObjectHandle+0x188>)
   1a698:	681b      	ldr	r3, [r3, #0]
   1a69a:	1e5a      	subs	r2, r3, #1
   1a69c:	4b0a      	ldr	r3, [pc, #40]	; (1a6c8 <prvTraceGetObjectHandle+0x188>)
   1a69e:	601a      	str	r2, [r3, #0]
   1a6a0:	69bb      	ldr	r3, [r7, #24]
   1a6a2:	60bb      	str	r3, [r7, #8]
   1a6a4:	68bb      	ldr	r3, [r7, #8]
   1a6a6:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1a6aa:	231f      	movs	r3, #31
   1a6ac:	18fb      	adds	r3, r7, r3
   1a6ae:	781b      	ldrb	r3, [r3, #0]
}
   1a6b0:	0018      	movs	r0, r3
   1a6b2:	46bd      	mov	sp, r7
   1a6b4:	b008      	add	sp, #32
   1a6b6:	bd80      	pop	{r7, pc}
   1a6b8:	20000df4 	.word	0x20000df4
   1a6bc:	0003822c 	.word	0x0003822c
   1a6c0:	0001a85d 	.word	0x0001a85d
   1a6c4:	00038e0c 	.word	0x00038e0c
   1a6c8:	20000d4c 	.word	0x20000d4c
   1a6cc:	20000d64 	.word	0x20000d64
   1a6d0:	20000df8 	.word	0x20000df8
   1a6d4:	0001957d 	.word	0x0001957d

0001a6d8 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1a6d8:	b590      	push	{r4, r7, lr}
   1a6da:	b085      	sub	sp, #20
   1a6dc:	af00      	add	r7, sp, #0
   1a6de:	0002      	movs	r2, r0
   1a6e0:	1dfb      	adds	r3, r7, #7
   1a6e2:	701a      	strb	r2, [r3, #0]
   1a6e4:	1dbb      	adds	r3, r7, #6
   1a6e6:	1c0a      	adds	r2, r1, #0
   1a6e8:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1a6ea:	230e      	movs	r3, #14
   1a6ec:	18fc      	adds	r4, r7, r3
   1a6ee:	1dfb      	adds	r3, r7, #7
   1a6f0:	781a      	ldrb	r2, [r3, #0]
   1a6f2:	1dbb      	adds	r3, r7, #6
   1a6f4:	781b      	ldrb	r3, [r3, #0]
   1a6f6:	0011      	movs	r1, r2
   1a6f8:	0018      	movs	r0, r3
   1a6fa:	4b09      	ldr	r3, [pc, #36]	; (1a720 <prvMarkObjectAsUsed+0x48>)
   1a6fc:	4798      	blx	r3
   1a6fe:	0003      	movs	r3, r0
   1a700:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1a702:	4b08      	ldr	r3, [pc, #32]	; (1a724 <prvMarkObjectAsUsed+0x4c>)
   1a704:	681a      	ldr	r2, [r3, #0]
   1a706:	230e      	movs	r3, #14
   1a708:	18fb      	adds	r3, r7, r3
   1a70a:	881b      	ldrh	r3, [r3, #0]
   1a70c:	219c      	movs	r1, #156	; 0x9c
   1a70e:	18d3      	adds	r3, r2, r3
   1a710:	185b      	adds	r3, r3, r1
   1a712:	2201      	movs	r2, #1
   1a714:	701a      	strb	r2, [r3, #0]
}
   1a716:	46c0      	nop			; (mov r8, r8)
   1a718:	46bd      	mov	sp, r7
   1a71a:	b005      	add	sp, #20
   1a71c:	bd90      	pop	{r4, r7, pc}
   1a71e:	46c0      	nop			; (mov r8, r8)
   1a720:	0001a469 	.word	0x0001a469
   1a724:	20000df4 	.word	0x20000df4

0001a728 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a728:	b580      	push	{r7, lr}
   1a72a:	b086      	sub	sp, #24
   1a72c:	af00      	add	r7, sp, #0
   1a72e:	60f8      	str	r0, [r7, #12]
   1a730:	60b9      	str	r1, [r7, #8]
   1a732:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a734:	2300      	movs	r3, #0
   1a736:	617b      	str	r3, [r7, #20]
   1a738:	e010      	b.n	1a75c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a73a:	68fa      	ldr	r2, [r7, #12]
   1a73c:	697b      	ldr	r3, [r7, #20]
   1a73e:	18d3      	adds	r3, r2, r3
   1a740:	68b9      	ldr	r1, [r7, #8]
   1a742:	697a      	ldr	r2, [r7, #20]
   1a744:	188a      	adds	r2, r1, r2
   1a746:	7812      	ldrb	r2, [r2, #0]
   1a748:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a74a:	68ba      	ldr	r2, [r7, #8]
   1a74c:	697b      	ldr	r3, [r7, #20]
   1a74e:	18d3      	adds	r3, r2, r3
   1a750:	781b      	ldrb	r3, [r3, #0]
   1a752:	2b00      	cmp	r3, #0
   1a754:	d007      	beq.n	1a766 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a756:	697b      	ldr	r3, [r7, #20]
   1a758:	3301      	adds	r3, #1
   1a75a:	617b      	str	r3, [r7, #20]
   1a75c:	697a      	ldr	r2, [r7, #20]
   1a75e:	687b      	ldr	r3, [r7, #4]
   1a760:	429a      	cmp	r2, r3
   1a762:	d3ea      	bcc.n	1a73a <prvStrncpy+0x12>
			break;
	}
}
   1a764:	e000      	b.n	1a768 <prvStrncpy+0x40>
			break;
   1a766:	46c0      	nop			; (mov r8, r8)
}
   1a768:	46c0      	nop			; (mov r8, r8)
   1a76a:	46bd      	mov	sp, r7
   1a76c:	b006      	add	sp, #24
   1a76e:	bd80      	pop	{r7, pc}

0001a770 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a770:	b580      	push	{r7, lr}
   1a772:	b082      	sub	sp, #8
   1a774:	af00      	add	r7, sp, #0
   1a776:	603a      	str	r2, [r7, #0]
   1a778:	1dfb      	adds	r3, r7, #7
   1a77a:	1c02      	adds	r2, r0, #0
   1a77c:	701a      	strb	r2, [r3, #0]
   1a77e:	1dbb      	adds	r3, r7, #6
   1a780:	1c0a      	adds	r2, r1, #0
   1a782:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a784:	683b      	ldr	r3, [r7, #0]
   1a786:	2b00      	cmp	r3, #0
   1a788:	d104      	bne.n	1a794 <prvTraceSetObjectName+0x24>
   1a78a:	4b2a      	ldr	r3, [pc, #168]	; (1a834 <prvTraceSetObjectName+0xc4>)
   1a78c:	0018      	movs	r0, r3
   1a78e:	4b2a      	ldr	r3, [pc, #168]	; (1a838 <prvTraceSetObjectName+0xc8>)
   1a790:	4798      	blx	r3
   1a792:	e04b      	b.n	1a82c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a794:	1dfb      	adds	r3, r7, #7
   1a796:	781b      	ldrb	r3, [r3, #0]
   1a798:	2b08      	cmp	r3, #8
   1a79a:	d904      	bls.n	1a7a6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a79c:	4b27      	ldr	r3, [pc, #156]	; (1a83c <prvTraceSetObjectName+0xcc>)
   1a79e:	0018      	movs	r0, r3
   1a7a0:	4b25      	ldr	r3, [pc, #148]	; (1a838 <prvTraceSetObjectName+0xc8>)
   1a7a2:	4798      	blx	r3
		return;
   1a7a4:	e042      	b.n	1a82c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a7a6:	1dbb      	adds	r3, r7, #6
   1a7a8:	781b      	ldrb	r3, [r3, #0]
   1a7aa:	2b00      	cmp	r3, #0
   1a7ac:	d104      	bne.n	1a7b8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a7ae:	4b24      	ldr	r3, [pc, #144]	; (1a840 <prvTraceSetObjectName+0xd0>)
   1a7b0:	0018      	movs	r0, r3
   1a7b2:	4b21      	ldr	r3, [pc, #132]	; (1a838 <prvTraceSetObjectName+0xc8>)
   1a7b4:	4798      	blx	r3
		return;
   1a7b6:	e039      	b.n	1a82c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a7b8:	4b22      	ldr	r3, [pc, #136]	; (1a844 <prvTraceSetObjectName+0xd4>)
   1a7ba:	681a      	ldr	r2, [r3, #0]
   1a7bc:	1dfb      	adds	r3, r7, #7
   1a7be:	781b      	ldrb	r3, [r3, #0]
   1a7c0:	2164      	movs	r1, #100	; 0x64
   1a7c2:	18d3      	adds	r3, r2, r3
   1a7c4:	185b      	adds	r3, r3, r1
   1a7c6:	781b      	ldrb	r3, [r3, #0]
   1a7c8:	1dba      	adds	r2, r7, #6
   1a7ca:	7812      	ldrb	r2, [r2, #0]
   1a7cc:	429a      	cmp	r2, r3
   1a7ce:	d909      	bls.n	1a7e4 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a7d0:	1dfb      	adds	r3, r7, #7
   1a7d2:	781b      	ldrb	r3, [r3, #0]
   1a7d4:	0018      	movs	r0, r3
   1a7d6:	4b1c      	ldr	r3, [pc, #112]	; (1a848 <prvTraceSetObjectName+0xd8>)
   1a7d8:	4798      	blx	r3
   1a7da:	0003      	movs	r3, r0
   1a7dc:	0018      	movs	r0, r3
   1a7de:	4b16      	ldr	r3, [pc, #88]	; (1a838 <prvTraceSetObjectName+0xc8>)
   1a7e0:	4798      	blx	r3
   1a7e2:	e023      	b.n	1a82c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a7e4:	1dfb      	adds	r3, r7, #7
   1a7e6:	781a      	ldrb	r2, [r3, #0]
   1a7e8:	1dbb      	adds	r3, r7, #6
   1a7ea:	781b      	ldrb	r3, [r3, #0]
   1a7ec:	0011      	movs	r1, r2
   1a7ee:	0018      	movs	r0, r3
   1a7f0:	4b16      	ldr	r3, [pc, #88]	; (1a84c <prvTraceSetObjectName+0xdc>)
   1a7f2:	4798      	blx	r3
   1a7f4:	0003      	movs	r3, r0
   1a7f6:	001a      	movs	r2, r3
   1a7f8:	4b15      	ldr	r3, [pc, #84]	; (1a850 <prvTraceSetObjectName+0xe0>)
   1a7fa:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a7fc:	4b15      	ldr	r3, [pc, #84]	; (1a854 <prvTraceSetObjectName+0xe4>)
   1a7fe:	681b      	ldr	r3, [r3, #0]
   1a800:	2b00      	cmp	r3, #0
   1a802:	d113      	bne.n	1a82c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a804:	4b0f      	ldr	r3, [pc, #60]	; (1a844 <prvTraceSetObjectName+0xd4>)
   1a806:	681a      	ldr	r2, [r3, #0]
   1a808:	4b11      	ldr	r3, [pc, #68]	; (1a850 <prvTraceSetObjectName+0xe0>)
   1a80a:	881b      	ldrh	r3, [r3, #0]
   1a80c:	3398      	adds	r3, #152	; 0x98
   1a80e:	18d3      	adds	r3, r2, r3
   1a810:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a812:	4b0c      	ldr	r3, [pc, #48]	; (1a844 <prvTraceSetObjectName+0xd4>)
   1a814:	681a      	ldr	r2, [r3, #0]
   1a816:	1dfb      	adds	r3, r7, #7
   1a818:	781b      	ldrb	r3, [r3, #0]
   1a81a:	2170      	movs	r1, #112	; 0x70
   1a81c:	18d3      	adds	r3, r2, r3
   1a81e:	185b      	adds	r3, r3, r1
   1a820:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a822:	001a      	movs	r2, r3
   1a824:	683b      	ldr	r3, [r7, #0]
   1a826:	0019      	movs	r1, r3
   1a828:	4b0b      	ldr	r3, [pc, #44]	; (1a858 <prvTraceSetObjectName+0xe8>)
   1a82a:	4798      	blx	r3
		}
	}
}
   1a82c:	46bd      	mov	sp, r7
   1a82e:	b002      	add	sp, #8
   1a830:	bd80      	pop	{r7, pc}
   1a832:	46c0      	nop			; (mov r8, r8)
   1a834:	00038f10 	.word	0x00038f10
   1a838:	0001a85d 	.word	0x0001a85d
   1a83c:	00038f44 	.word	0x00038f44
   1a840:	00038f74 	.word	0x00038f74
   1a844:	20000df4 	.word	0x20000df4
   1a848:	0001957d 	.word	0x0001957d
   1a84c:	0001a469 	.word	0x0001a469
   1a850:	20000dfc 	.word	0x20000dfc
   1a854:	20000d54 	.word	0x20000d54
   1a858:	0001a729 	.word	0x0001a729

0001a85c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a85c:	b580      	push	{r7, lr}
   1a85e:	b082      	sub	sp, #8
   1a860:	af00      	add	r7, sp, #0
   1a862:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a864:	4b11      	ldr	r3, [pc, #68]	; (1a8ac <prvTraceError+0x50>)
   1a866:	681b      	ldr	r3, [r3, #0]
   1a868:	2b00      	cmp	r3, #0
   1a86a:	d001      	beq.n	1a870 <prvTraceError+0x14>
	{
		vTraceStop();
   1a86c:	4b10      	ldr	r3, [pc, #64]	; (1a8b0 <prvTraceError+0x54>)
   1a86e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a870:	4b10      	ldr	r3, [pc, #64]	; (1a8b4 <prvTraceError+0x58>)
   1a872:	681b      	ldr	r3, [r3, #0]
   1a874:	2b00      	cmp	r3, #0
   1a876:	d115      	bne.n	1a8a4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a878:	4b0e      	ldr	r3, [pc, #56]	; (1a8b4 <prvTraceError+0x58>)
   1a87a:	687a      	ldr	r2, [r7, #4]
   1a87c:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a87e:	4b0b      	ldr	r3, [pc, #44]	; (1a8ac <prvTraceError+0x50>)
   1a880:	681b      	ldr	r3, [r3, #0]
   1a882:	2b00      	cmp	r3, #0
   1a884:	d00e      	beq.n	1a8a4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a886:	4b09      	ldr	r3, [pc, #36]	; (1a8ac <prvTraceError+0x50>)
   1a888:	681b      	ldr	r3, [r3, #0]
   1a88a:	4a0b      	ldr	r2, [pc, #44]	; (1a8b8 <prvTraceError+0x5c>)
   1a88c:	1898      	adds	r0, r3, r2
   1a88e:	4b09      	ldr	r3, [pc, #36]	; (1a8b4 <prvTraceError+0x58>)
   1a890:	681b      	ldr	r3, [r3, #0]
   1a892:	2250      	movs	r2, #80	; 0x50
   1a894:	0019      	movs	r1, r3
   1a896:	4b09      	ldr	r3, [pc, #36]	; (1a8bc <prvTraceError+0x60>)
   1a898:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a89a:	4b04      	ldr	r3, [pc, #16]	; (1a8ac <prvTraceError+0x50>)
   1a89c:	681b      	ldr	r3, [r3, #0]
   1a89e:	4a08      	ldr	r2, [pc, #32]	; (1a8c0 <prvTraceError+0x64>)
   1a8a0:	2101      	movs	r1, #1
   1a8a2:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a8a4:	46c0      	nop			; (mov r8, r8)
   1a8a6:	46bd      	mov	sp, r7
   1a8a8:	b002      	add	sp, #8
   1a8aa:	bd80      	pop	{r7, pc}
   1a8ac:	20000df4 	.word	0x20000df4
   1a8b0:	00019721 	.word	0x00019721
   1a8b4:	20000d54 	.word	0x20000d54
   1a8b8:	000006bc 	.word	0x000006bc
   1a8bc:	0001a729 	.word	0x0001a729
   1a8c0:	000006b4 	.word	0x000006b4

0001a8c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a8c4:	b580      	push	{r7, lr}
   1a8c6:	b086      	sub	sp, #24
   1a8c8:	af00      	add	r7, sp, #0
   1a8ca:	0002      	movs	r2, r0
   1a8cc:	1dfb      	adds	r3, r7, #7
   1a8ce:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a8d0:	2300      	movs	r3, #0
   1a8d2:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a8d4:	2300      	movs	r3, #0
   1a8d6:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a8d8:	1dfb      	adds	r3, r7, #7
   1a8da:	781b      	ldrb	r3, [r3, #0]
   1a8dc:	2b00      	cmp	r3, #0
   1a8de:	d000      	beq.n	1a8e2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a8e0:	e089      	b.n	1a9f6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a8e2:	4b49      	ldr	r3, [pc, #292]	; (1aa08 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a8e4:	0018      	movs	r0, r3
   1a8e6:	4b49      	ldr	r3, [pc, #292]	; (1aa0c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a8e8:	4798      	blx	r3
   1a8ea:	e08a      	b.n	1aa02 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a8ec:	4b48      	ldr	r3, [pc, #288]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a8ee:	681b      	ldr	r3, [r3, #0]
   1a8f0:	69da      	ldr	r2, [r3, #28]
   1a8f2:	697b      	ldr	r3, [r7, #20]
   1a8f4:	18d3      	adds	r3, r2, r3
   1a8f6:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a8f8:	4b45      	ldr	r3, [pc, #276]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a8fa:	6819      	ldr	r1, [r3, #0]
   1a8fc:	693b      	ldr	r3, [r7, #16]
   1a8fe:	009a      	lsls	r2, r3, #2
   1a900:	23e2      	movs	r3, #226	; 0xe2
   1a902:	00db      	lsls	r3, r3, #3
   1a904:	188a      	adds	r2, r1, r2
   1a906:	18d3      	adds	r3, r2, r3
   1a908:	781b      	ldrb	r3, [r3, #0]
   1a90a:	2b98      	cmp	r3, #152	; 0x98
   1a90c:	d934      	bls.n	1a978 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a90e:	4b40      	ldr	r3, [pc, #256]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a910:	6819      	ldr	r1, [r3, #0]
   1a912:	693b      	ldr	r3, [r7, #16]
   1a914:	009a      	lsls	r2, r3, #2
   1a916:	23e2      	movs	r3, #226	; 0xe2
   1a918:	00db      	lsls	r3, r3, #3
   1a91a:	188a      	adds	r2, r1, r2
   1a91c:	18d3      	adds	r3, r2, r3
   1a91e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a920:	2ba7      	cmp	r3, #167	; 0xa7
   1a922:	d829      	bhi.n	1a978 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a924:	4b3a      	ldr	r3, [pc, #232]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a926:	6819      	ldr	r1, [r3, #0]
   1a928:	693b      	ldr	r3, [r7, #16]
   1a92a:	009a      	lsls	r2, r3, #2
   1a92c:	23e2      	movs	r3, #226	; 0xe2
   1a92e:	00db      	lsls	r3, r3, #3
   1a930:	188a      	adds	r2, r1, r2
   1a932:	18d3      	adds	r3, r2, r3
   1a934:	781a      	ldrb	r2, [r3, #0]
   1a936:	230f      	movs	r3, #15
   1a938:	18fb      	adds	r3, r7, r3
   1a93a:	3268      	adds	r2, #104	; 0x68
   1a93c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a93e:	230f      	movs	r3, #15
   1a940:	18fb      	adds	r3, r7, r3
   1a942:	781a      	ldrb	r2, [r3, #0]
   1a944:	693b      	ldr	r3, [r7, #16]
   1a946:	18d2      	adds	r2, r2, r3
   1a948:	4b31      	ldr	r3, [pc, #196]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a94a:	681b      	ldr	r3, [r3, #0]
   1a94c:	699b      	ldr	r3, [r3, #24]
   1a94e:	429a      	cmp	r2, r3
   1a950:	d24d      	bcs.n	1a9ee <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a952:	4b2f      	ldr	r3, [pc, #188]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a954:	681a      	ldr	r2, [r3, #0]
   1a956:	693b      	ldr	r3, [r7, #16]
   1a958:	009b      	lsls	r3, r3, #2
   1a95a:	21e2      	movs	r1, #226	; 0xe2
   1a95c:	00c9      	lsls	r1, r1, #3
   1a95e:	468c      	mov	ip, r1
   1a960:	4463      	add	r3, ip
   1a962:	18d0      	adds	r0, r2, r3
   1a964:	230f      	movs	r3, #15
   1a966:	18fb      	adds	r3, r7, r3
   1a968:	781b      	ldrb	r3, [r3, #0]
   1a96a:	3301      	adds	r3, #1
   1a96c:	009b      	lsls	r3, r3, #2
   1a96e:	001a      	movs	r2, r3
   1a970:	2100      	movs	r1, #0
   1a972:	4b28      	ldr	r3, [pc, #160]	; (1aa14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a974:	4798      	blx	r3
		{
   1a976:	e03a      	b.n	1a9ee <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a978:	4b25      	ldr	r3, [pc, #148]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a97a:	6819      	ldr	r1, [r3, #0]
   1a97c:	693b      	ldr	r3, [r7, #16]
   1a97e:	009a      	lsls	r2, r3, #2
   1a980:	23e2      	movs	r3, #226	; 0xe2
   1a982:	00db      	lsls	r3, r3, #3
   1a984:	188a      	adds	r2, r1, r2
   1a986:	18d3      	adds	r3, r2, r3
   1a988:	781b      	ldrb	r3, [r3, #0]
   1a98a:	2b01      	cmp	r3, #1
   1a98c:	d130      	bne.n	1a9f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a98e:	693b      	ldr	r3, [r7, #16]
   1a990:	1c5a      	adds	r2, r3, #1
   1a992:	4b1f      	ldr	r3, [pc, #124]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a994:	681b      	ldr	r3, [r3, #0]
   1a996:	699b      	ldr	r3, [r3, #24]
   1a998:	429a      	cmp	r2, r3
   1a99a:	d20e      	bcs.n	1a9ba <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a99c:	4b1c      	ldr	r3, [pc, #112]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a99e:	681a      	ldr	r2, [r3, #0]
   1a9a0:	693b      	ldr	r3, [r7, #16]
   1a9a2:	009b      	lsls	r3, r3, #2
   1a9a4:	21e2      	movs	r1, #226	; 0xe2
   1a9a6:	00c9      	lsls	r1, r1, #3
   1a9a8:	468c      	mov	ip, r1
   1a9aa:	4463      	add	r3, ip
   1a9ac:	18d3      	adds	r3, r2, r3
   1a9ae:	2208      	movs	r2, #8
   1a9b0:	2100      	movs	r1, #0
   1a9b2:	0018      	movs	r0, r3
   1a9b4:	4b17      	ldr	r3, [pc, #92]	; (1aa14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a9b6:	4798      	blx	r3
   1a9b8:	e01a      	b.n	1a9f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a9ba:	4b15      	ldr	r3, [pc, #84]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a9bc:	681b      	ldr	r3, [r3, #0]
   1a9be:	22e2      	movs	r2, #226	; 0xe2
   1a9c0:	00d2      	lsls	r2, r2, #3
   1a9c2:	4694      	mov	ip, r2
   1a9c4:	4463      	add	r3, ip
   1a9c6:	2204      	movs	r2, #4
   1a9c8:	2100      	movs	r1, #0
   1a9ca:	0018      	movs	r0, r3
   1a9cc:	4b11      	ldr	r3, [pc, #68]	; (1aa14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a9ce:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a9d0:	4b0f      	ldr	r3, [pc, #60]	; (1aa10 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a9d2:	681a      	ldr	r2, [r3, #0]
   1a9d4:	693b      	ldr	r3, [r7, #16]
   1a9d6:	009b      	lsls	r3, r3, #2
   1a9d8:	21e2      	movs	r1, #226	; 0xe2
   1a9da:	00c9      	lsls	r1, r1, #3
   1a9dc:	468c      	mov	ip, r1
   1a9de:	4463      	add	r3, ip
   1a9e0:	18d3      	adds	r3, r2, r3
   1a9e2:	2204      	movs	r2, #4
   1a9e4:	2100      	movs	r1, #0
   1a9e6:	0018      	movs	r0, r3
   1a9e8:	4b0a      	ldr	r3, [pc, #40]	; (1aa14 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a9ea:	4798      	blx	r3
   1a9ec:	e000      	b.n	1a9f0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a9ee:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a9f0:	697b      	ldr	r3, [r7, #20]
   1a9f2:	3301      	adds	r3, #1
   1a9f4:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a9f6:	1dfb      	adds	r3, r7, #7
   1a9f8:	781a      	ldrb	r2, [r3, #0]
   1a9fa:	697b      	ldr	r3, [r7, #20]
   1a9fc:	429a      	cmp	r2, r3
   1a9fe:	d900      	bls.n	1aa02 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1aa00:	e774      	b.n	1a8ec <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1aa02:	46bd      	mov	sp, r7
   1aa04:	b006      	add	sp, #24
   1aa06:	bd80      	pop	{r7, pc}
   1aa08:	00038fd4 	.word	0x00038fd4
   1aa0c:	0001a85d 	.word	0x0001a85d
   1aa10:	20000df4 	.word	0x20000df4
   1aa14:	0003577f 	.word	0x0003577f

0001aa18 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1aa18:	b580      	push	{r7, lr}
   1aa1a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1aa1c:	4b12      	ldr	r3, [pc, #72]	; (1aa68 <prvTraceUpdateCounters+0x50>)
   1aa1e:	681b      	ldr	r3, [r3, #0]
   1aa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1aa22:	2b00      	cmp	r3, #0
   1aa24:	d01c      	beq.n	1aa60 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1aa26:	4b10      	ldr	r3, [pc, #64]	; (1aa68 <prvTraceUpdateCounters+0x50>)
   1aa28:	681b      	ldr	r3, [r3, #0]
   1aa2a:	695a      	ldr	r2, [r3, #20]
   1aa2c:	3201      	adds	r2, #1
   1aa2e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1aa30:	4b0d      	ldr	r3, [pc, #52]	; (1aa68 <prvTraceUpdateCounters+0x50>)
   1aa32:	681b      	ldr	r3, [r3, #0]
   1aa34:	69da      	ldr	r2, [r3, #28]
   1aa36:	3201      	adds	r2, #1
   1aa38:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1aa3a:	4b0b      	ldr	r3, [pc, #44]	; (1aa68 <prvTraceUpdateCounters+0x50>)
   1aa3c:	681b      	ldr	r3, [r3, #0]
   1aa3e:	69da      	ldr	r2, [r3, #28]
   1aa40:	232c      	movs	r3, #44	; 0x2c
   1aa42:	33ff      	adds	r3, #255	; 0xff
   1aa44:	429a      	cmp	r2, r3
   1aa46:	d907      	bls.n	1aa58 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1aa48:	4b07      	ldr	r3, [pc, #28]	; (1aa68 <prvTraceUpdateCounters+0x50>)
   1aa4a:	681b      	ldr	r3, [r3, #0]
   1aa4c:	2201      	movs	r2, #1
   1aa4e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1aa50:	4b05      	ldr	r3, [pc, #20]	; (1aa68 <prvTraceUpdateCounters+0x50>)
   1aa52:	681b      	ldr	r3, [r3, #0]
   1aa54:	2200      	movs	r2, #0
   1aa56:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1aa58:	2001      	movs	r0, #1
   1aa5a:	4b04      	ldr	r3, [pc, #16]	; (1aa6c <prvTraceUpdateCounters+0x54>)
   1aa5c:	4798      	blx	r3
   1aa5e:	e000      	b.n	1aa62 <prvTraceUpdateCounters+0x4a>
		return;
   1aa60:	46c0      	nop			; (mov r8, r8)
#endif
}
   1aa62:	46bd      	mov	sp, r7
   1aa64:	bd80      	pop	{r7, pc}
   1aa66:	46c0      	nop			; (mov r8, r8)
   1aa68:	20000df4 	.word	0x20000df4
   1aa6c:	0001a8c5 	.word	0x0001a8c5

0001aa70 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1aa70:	b5b0      	push	{r4, r5, r7, lr}
   1aa72:	b086      	sub	sp, #24
   1aa74:	af00      	add	r7, sp, #0
   1aa76:	0002      	movs	r2, r0
   1aa78:	1dbb      	adds	r3, r7, #6
   1aa7a:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1aa7c:	2300      	movs	r3, #0
   1aa7e:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1aa80:	2300      	movs	r3, #0
   1aa82:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1aa84:	2300      	movs	r3, #0
   1aa86:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1aa88:	1dbb      	adds	r3, r7, #6
   1aa8a:	881b      	ldrh	r3, [r3, #0]
   1aa8c:	2bff      	cmp	r3, #255	; 0xff
   1aa8e:	d00a      	beq.n	1aaa6 <prvTraceGetDTS+0x36>
   1aa90:	1dbb      	adds	r3, r7, #6
   1aa92:	881b      	ldrh	r3, [r3, #0]
   1aa94:	4a60      	ldr	r2, [pc, #384]	; (1ac18 <prvTraceGetDTS+0x1a8>)
   1aa96:	4293      	cmp	r3, r2
   1aa98:	d005      	beq.n	1aaa6 <prvTraceGetDTS+0x36>
   1aa9a:	4b60      	ldr	r3, [pc, #384]	; (1ac1c <prvTraceGetDTS+0x1ac>)
   1aa9c:	0018      	movs	r0, r3
   1aa9e:	4b60      	ldr	r3, [pc, #384]	; (1ac20 <prvTraceGetDTS+0x1b0>)
   1aaa0:	4798      	blx	r3
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	e0b3      	b.n	1ac0e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1aaa6:	4b5f      	ldr	r3, [pc, #380]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1aaa8:	681b      	ldr	r3, [r3, #0]
   1aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aaac:	2b00      	cmp	r3, #0
   1aaae:	d118      	bne.n	1aae2 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1aab0:	4b5d      	ldr	r3, [pc, #372]	; (1ac28 <prvTraceGetDTS+0x1b8>)
   1aab2:	681b      	ldr	r3, [r3, #0]
   1aab4:	2b00      	cmp	r3, #0
   1aab6:	d006      	beq.n	1aac6 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1aab8:	4b5a      	ldr	r3, [pc, #360]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1aaba:	681b      	ldr	r3, [r3, #0]
   1aabc:	4a5a      	ldr	r2, [pc, #360]	; (1ac28 <prvTraceGetDTS+0x1b8>)
   1aabe:	6812      	ldr	r2, [r2, #0]
   1aac0:	0892      	lsrs	r2, r2, #2
   1aac2:	625a      	str	r2, [r3, #36]	; 0x24
   1aac4:	e00d      	b.n	1aae2 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1aac6:	4b59      	ldr	r3, [pc, #356]	; (1ac2c <prvTraceGetDTS+0x1bc>)
   1aac8:	681a      	ldr	r2, [r3, #0]
   1aaca:	4b59      	ldr	r3, [pc, #356]	; (1ac30 <prvTraceGetDTS+0x1c0>)
   1aacc:	681b      	ldr	r3, [r3, #0]
   1aace:	429a      	cmp	r2, r3
   1aad0:	d007      	beq.n	1aae2 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1aad2:	4b54      	ldr	r3, [pc, #336]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1aad4:	681c      	ldr	r4, [r3, #0]
   1aad6:	2000      	movs	r0, #0
   1aad8:	4b56      	ldr	r3, [pc, #344]	; (1ac34 <prvTraceGetDTS+0x1c4>)
   1aada:	4798      	blx	r3
   1aadc:	0003      	movs	r3, r0
   1aade:	089b      	lsrs	r3, r3, #2
   1aae0:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1aae2:	230c      	movs	r3, #12
   1aae4:	18fb      	adds	r3, r7, r3
   1aae6:	0018      	movs	r0, r3
   1aae8:	4b53      	ldr	r3, [pc, #332]	; (1ac38 <prvTraceGetDTS+0x1c8>)
   1aaea:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1aaec:	68fa      	ldr	r2, [r7, #12]
   1aaee:	4b53      	ldr	r3, [pc, #332]	; (1ac3c <prvTraceGetDTS+0x1cc>)
   1aaf0:	681b      	ldr	r3, [r3, #0]
   1aaf2:	1ad3      	subs	r3, r2, r3
   1aaf4:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1aaf6:	68fa      	ldr	r2, [r7, #12]
   1aaf8:	4b50      	ldr	r3, [pc, #320]	; (1ac3c <prvTraceGetDTS+0x1cc>)
   1aafa:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1aafc:	4b49      	ldr	r3, [pc, #292]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1aafe:	681b      	ldr	r3, [r3, #0]
   1ab00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab02:	2b00      	cmp	r3, #0
   1ab04:	d044      	beq.n	1ab90 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1ab06:	4b47      	ldr	r3, [pc, #284]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab08:	681b      	ldr	r3, [r3, #0]
   1ab0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1ab0c:	693b      	ldr	r3, [r7, #16]
   1ab0e:	429a      	cmp	r2, r3
   1ab10:	d21e      	bcs.n	1ab50 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1ab12:	4b44      	ldr	r3, [pc, #272]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab14:	681c      	ldr	r4, [r3, #0]
   1ab16:	4b43      	ldr	r3, [pc, #268]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab18:	681b      	ldr	r3, [r3, #0]
   1ab1a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1ab1c:	4b41      	ldr	r3, [pc, #260]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab1e:	681b      	ldr	r3, [r3, #0]
   1ab20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1ab22:	4b47      	ldr	r3, [pc, #284]	; (1ac40 <prvTraceGetDTS+0x1d0>)
   1ab24:	0011      	movs	r1, r2
   1ab26:	6938      	ldr	r0, [r7, #16]
   1ab28:	4798      	blx	r3
   1ab2a:	0003      	movs	r3, r0
   1ab2c:	18eb      	adds	r3, r5, r3
   1ab2e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1ab30:	4b3c      	ldr	r3, [pc, #240]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab32:	681c      	ldr	r4, [r3, #0]
   1ab34:	4b3b      	ldr	r3, [pc, #236]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab36:	681b      	ldr	r3, [r3, #0]
   1ab38:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1ab3a:	4b3a      	ldr	r3, [pc, #232]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab3c:	681b      	ldr	r3, [r3, #0]
   1ab3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1ab40:	693a      	ldr	r2, [r7, #16]
   1ab42:	4b40      	ldr	r3, [pc, #256]	; (1ac44 <prvTraceGetDTS+0x1d4>)
   1ab44:	0010      	movs	r0, r2
   1ab46:	4798      	blx	r3
   1ab48:	000b      	movs	r3, r1
   1ab4a:	18eb      	adds	r3, r5, r3
   1ab4c:	62a3      	str	r3, [r4, #40]	; 0x28
   1ab4e:	e007      	b.n	1ab60 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1ab50:	4b34      	ldr	r3, [pc, #208]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab52:	681b      	ldr	r3, [r3, #0]
   1ab54:	4a33      	ldr	r2, [pc, #204]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab56:	6812      	ldr	r2, [r2, #0]
   1ab58:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1ab5a:	693a      	ldr	r2, [r7, #16]
   1ab5c:	188a      	adds	r2, r1, r2
   1ab5e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1ab60:	4b30      	ldr	r3, [pc, #192]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab62:	681b      	ldr	r3, [r3, #0]
   1ab64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ab66:	4b2f      	ldr	r3, [pc, #188]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab68:	681b      	ldr	r3, [r3, #0]
   1ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab6c:	429a      	cmp	r2, r3
   1ab6e:	d313      	bcc.n	1ab98 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1ab70:	4b2c      	ldr	r3, [pc, #176]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab72:	681b      	ldr	r3, [r3, #0]
   1ab74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab76:	3201      	adds	r2, #1
   1ab78:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1ab7a:	4b2a      	ldr	r3, [pc, #168]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab7c:	681b      	ldr	r3, [r3, #0]
   1ab7e:	4a29      	ldr	r2, [pc, #164]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab80:	6812      	ldr	r2, [r2, #0]
   1ab82:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1ab84:	4a27      	ldr	r2, [pc, #156]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab86:	6812      	ldr	r2, [r2, #0]
   1ab88:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1ab8a:	1a8a      	subs	r2, r1, r2
   1ab8c:	629a      	str	r2, [r3, #40]	; 0x28
   1ab8e:	e003      	b.n	1ab98 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1ab90:	4b24      	ldr	r3, [pc, #144]	; (1ac24 <prvTraceGetDTS+0x1b4>)
   1ab92:	681b      	ldr	r3, [r3, #0]
   1ab94:	68fa      	ldr	r2, [r7, #12]
   1ab96:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1ab98:	1dbb      	adds	r3, r7, #6
   1ab9a:	881a      	ldrh	r2, [r3, #0]
   1ab9c:	693b      	ldr	r3, [r7, #16]
   1ab9e:	429a      	cmp	r2, r3
   1aba0:	d22f      	bcs.n	1ac02 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1aba2:	4b29      	ldr	r3, [pc, #164]	; (1ac48 <prvTraceGetDTS+0x1d8>)
   1aba4:	4798      	blx	r3
   1aba6:	0003      	movs	r3, r0
   1aba8:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1abaa:	697b      	ldr	r3, [r7, #20]
   1abac:	2b00      	cmp	r3, #0
   1abae:	d028      	beq.n	1ac02 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1abb0:	1dbb      	adds	r3, r7, #6
   1abb2:	881b      	ldrh	r3, [r3, #0]
   1abb4:	4a18      	ldr	r2, [pc, #96]	; (1ac18 <prvTraceGetDTS+0x1a8>)
   1abb6:	4293      	cmp	r3, r2
   1abb8:	d10b      	bne.n	1abd2 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1abba:	697b      	ldr	r3, [r7, #20]
   1abbc:	22a9      	movs	r2, #169	; 0xa9
   1abbe:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1abc0:	693b      	ldr	r3, [r7, #16]
   1abc2:	0c1b      	lsrs	r3, r3, #16
   1abc4:	b29a      	uxth	r2, r3
   1abc6:	697b      	ldr	r3, [r7, #20]
   1abc8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1abca:	697b      	ldr	r3, [r7, #20]
   1abcc:	2200      	movs	r2, #0
   1abce:	705a      	strb	r2, [r3, #1]
   1abd0:	e015      	b.n	1abfe <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1abd2:	1dbb      	adds	r3, r7, #6
   1abd4:	881b      	ldrh	r3, [r3, #0]
   1abd6:	2bff      	cmp	r3, #255	; 0xff
   1abd8:	d10d      	bne.n	1abf6 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1abda:	697b      	ldr	r3, [r7, #20]
   1abdc:	22a8      	movs	r2, #168	; 0xa8
   1abde:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1abe0:	693b      	ldr	r3, [r7, #16]
   1abe2:	0a1b      	lsrs	r3, r3, #8
   1abe4:	b29a      	uxth	r2, r3
   1abe6:	697b      	ldr	r3, [r7, #20]
   1abe8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1abea:	693b      	ldr	r3, [r7, #16]
   1abec:	0e1b      	lsrs	r3, r3, #24
   1abee:	b2da      	uxtb	r2, r3
   1abf0:	697b      	ldr	r3, [r7, #20]
   1abf2:	705a      	strb	r2, [r3, #1]
   1abf4:	e003      	b.n	1abfe <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1abf6:	4b15      	ldr	r3, [pc, #84]	; (1ac4c <prvTraceGetDTS+0x1dc>)
   1abf8:	0018      	movs	r0, r3
   1abfa:	4b09      	ldr	r3, [pc, #36]	; (1ac20 <prvTraceGetDTS+0x1b0>)
   1abfc:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1abfe:	4b14      	ldr	r3, [pc, #80]	; (1ac50 <prvTraceGetDTS+0x1e0>)
   1ac00:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1ac02:	693b      	ldr	r3, [r7, #16]
   1ac04:	b29b      	uxth	r3, r3
   1ac06:	1dba      	adds	r2, r7, #6
   1ac08:	8812      	ldrh	r2, [r2, #0]
   1ac0a:	4013      	ands	r3, r2
   1ac0c:	b29b      	uxth	r3, r3
}
   1ac0e:	0018      	movs	r0, r3
   1ac10:	46bd      	mov	sp, r7
   1ac12:	b006      	add	sp, #24
   1ac14:	bdb0      	pop	{r4, r5, r7, pc}
   1ac16:	46c0      	nop			; (mov r8, r8)
   1ac18:	0000ffff 	.word	0x0000ffff
   1ac1c:	0003902c 	.word	0x0003902c
   1ac20:	0001a85d 	.word	0x0001a85d
   1ac24:	20000df4 	.word	0x20000df4
   1ac28:	20000d50 	.word	0x20000d50
   1ac2c:	e000e018 	.word	0xe000e018
   1ac30:	2000565c 	.word	0x2000565c
   1ac34:	0002ab39 	.word	0x0002ab39
   1ac38:	0001ac55 	.word	0x0001ac55
   1ac3c:	20000e00 	.word	0x20000e00
   1ac40:	000337a5 	.word	0x000337a5
   1ac44:	000338b1 	.word	0x000338b1
   1ac48:	0001a415 	.word	0x0001a415
   1ac4c:	0003906c 	.word	0x0003906c
   1ac50:	0001aa19 	.word	0x0001aa19

0001ac54 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1ac54:	b580      	push	{r7, lr}
   1ac56:	b084      	sub	sp, #16
   1ac58:	af00      	add	r7, sp, #0
   1ac5a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1ac5c:	2300      	movs	r3, #0
   1ac5e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1ac60:	2300      	movs	r3, #0
   1ac62:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1ac64:	4b2d      	ldr	r3, [pc, #180]	; (1ad1c <prvTracePortGetTimeStamp+0xc8>)
   1ac66:	681b      	ldr	r3, [r3, #0]
   1ac68:	2b01      	cmp	r3, #1
   1ac6a:	d107      	bne.n	1ac7c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1ac6c:	687b      	ldr	r3, [r7, #4]
   1ac6e:	2b00      	cmp	r3, #0
   1ac70:	d04f      	beq.n	1ad12 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1ac72:	4b2b      	ldr	r3, [pc, #172]	; (1ad20 <prvTracePortGetTimeStamp+0xcc>)
   1ac74:	681a      	ldr	r2, [r3, #0]
   1ac76:	687b      	ldr	r3, [r7, #4]
   1ac78:	601a      	str	r2, [r3, #0]
		return;
   1ac7a:	e04a      	b.n	1ad12 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1ac7c:	4b29      	ldr	r3, [pc, #164]	; (1ad24 <prvTracePortGetTimeStamp+0xd0>)
   1ac7e:	681a      	ldr	r2, [r3, #0]
   1ac80:	4b29      	ldr	r3, [pc, #164]	; (1ad28 <prvTracePortGetTimeStamp+0xd4>)
   1ac82:	681b      	ldr	r3, [r3, #0]
   1ac84:	1ad3      	subs	r3, r2, r3
   1ac86:	3301      	adds	r3, #1
   1ac88:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1ac8a:	4b28      	ldr	r3, [pc, #160]	; (1ad2c <prvTracePortGetTimeStamp+0xd8>)
   1ac8c:	681a      	ldr	r2, [r3, #0]
   1ac8e:	4b28      	ldr	r3, [pc, #160]	; (1ad30 <prvTracePortGetTimeStamp+0xdc>)
   1ac90:	681b      	ldr	r3, [r3, #0]
   1ac92:	1ad3      	subs	r3, r2, r3
   1ac94:	3b01      	subs	r3, #1
   1ac96:	2b00      	cmp	r3, #0
   1ac98:	db03      	blt.n	1aca2 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1ac9a:	4b24      	ldr	r3, [pc, #144]	; (1ad2c <prvTracePortGetTimeStamp+0xd8>)
   1ac9c:	681b      	ldr	r3, [r3, #0]
   1ac9e:	60fb      	str	r3, [r7, #12]
   1aca0:	e002      	b.n	1aca8 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1aca2:	4b23      	ldr	r3, [pc, #140]	; (1ad30 <prvTracePortGetTimeStamp+0xdc>)
   1aca4:	681b      	ldr	r3, [r3, #0]
   1aca6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1aca8:	4b20      	ldr	r3, [pc, #128]	; (1ad2c <prvTracePortGetTimeStamp+0xd8>)
   1acaa:	681b      	ldr	r3, [r3, #0]
   1acac:	68fa      	ldr	r2, [r7, #12]
   1acae:	429a      	cmp	r2, r3
   1acb0:	d107      	bne.n	1acc2 <prvTracePortGetTimeStamp+0x6e>
   1acb2:	4b20      	ldr	r3, [pc, #128]	; (1ad34 <prvTracePortGetTimeStamp+0xe0>)
   1acb4:	681b      	ldr	r3, [r3, #0]
   1acb6:	68ba      	ldr	r2, [r7, #8]
   1acb8:	429a      	cmp	r2, r3
   1acba:	d202      	bcs.n	1acc2 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1acbc:	68fb      	ldr	r3, [r7, #12]
   1acbe:	3301      	adds	r3, #1
   1acc0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1acc2:	687b      	ldr	r3, [r7, #4]
   1acc4:	2b00      	cmp	r3, #0
   1acc6:	d016      	beq.n	1acf6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1acc8:	4b16      	ldr	r3, [pc, #88]	; (1ad24 <prvTracePortGetTimeStamp+0xd0>)
   1acca:	681b      	ldr	r3, [r3, #0]
   1accc:	3301      	adds	r3, #1
   1acce:	089b      	lsrs	r3, r3, #2
   1acd0:	68fa      	ldr	r2, [r7, #12]
   1acd2:	435a      	muls	r2, r3
   1acd4:	4b12      	ldr	r3, [pc, #72]	; (1ad20 <prvTracePortGetTimeStamp+0xcc>)
   1acd6:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1acd8:	4b12      	ldr	r3, [pc, #72]	; (1ad24 <prvTracePortGetTimeStamp+0xd0>)
   1acda:	681b      	ldr	r3, [r3, #0]
   1acdc:	3301      	adds	r3, #1
   1acde:	2203      	movs	r2, #3
   1ace0:	4013      	ands	r3, r2
   1ace2:	68fa      	ldr	r2, [r7, #12]
   1ace4:	435a      	muls	r2, r3
   1ace6:	68bb      	ldr	r3, [r7, #8]
   1ace8:	18d3      	adds	r3, r2, r3
   1acea:	089a      	lsrs	r2, r3, #2
   1acec:	4b0c      	ldr	r3, [pc, #48]	; (1ad20 <prvTracePortGetTimeStamp+0xcc>)
   1acee:	681b      	ldr	r3, [r3, #0]
   1acf0:	18d2      	adds	r2, r2, r3
   1acf2:	4b0b      	ldr	r3, [pc, #44]	; (1ad20 <prvTracePortGetTimeStamp+0xcc>)
   1acf4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1acf6:	4b0d      	ldr	r3, [pc, #52]	; (1ad2c <prvTracePortGetTimeStamp+0xd8>)
   1acf8:	68fa      	ldr	r2, [r7, #12]
   1acfa:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1acfc:	687b      	ldr	r3, [r7, #4]
   1acfe:	2b00      	cmp	r3, #0
   1ad00:	d003      	beq.n	1ad0a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1ad02:	4b07      	ldr	r3, [pc, #28]	; (1ad20 <prvTracePortGetTimeStamp+0xcc>)
   1ad04:	681a      	ldr	r2, [r3, #0]
   1ad06:	687b      	ldr	r3, [r7, #4]
   1ad08:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1ad0a:	4b0a      	ldr	r3, [pc, #40]	; (1ad34 <prvTracePortGetTimeStamp+0xe0>)
   1ad0c:	68ba      	ldr	r2, [r7, #8]
   1ad0e:	601a      	str	r2, [r3, #0]
   1ad10:	e000      	b.n	1ad14 <prvTracePortGetTimeStamp+0xc0>
		return;
   1ad12:	46c0      	nop			; (mov r8, r8)
}
   1ad14:	46bd      	mov	sp, r7
   1ad16:	b004      	add	sp, #16
   1ad18:	bd80      	pop	{r7, pc}
   1ad1a:	46c0      	nop			; (mov r8, r8)
   1ad1c:	20000d40 	.word	0x20000d40
   1ad20:	20000d44 	.word	0x20000d44
   1ad24:	e000e014 	.word	0xe000e014
   1ad28:	e000e018 	.word	0xe000e018
   1ad2c:	20000e04 	.word	0x20000e04
   1ad30:	20000d3c 	.word	0x20000d3c
   1ad34:	20000e08 	.word	0x20000e08

0001ad38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1ad38:	b580      	push	{r7, lr}
   1ad3a:	b082      	sub	sp, #8
   1ad3c:	af00      	add	r7, sp, #0
   1ad3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ad40:	687b      	ldr	r3, [r7, #4]
   1ad42:	3308      	adds	r3, #8
   1ad44:	001a      	movs	r2, r3
   1ad46:	687b      	ldr	r3, [r7, #4]
   1ad48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ad4a:	687b      	ldr	r3, [r7, #4]
   1ad4c:	2201      	movs	r2, #1
   1ad4e:	4252      	negs	r2, r2
   1ad50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ad52:	687b      	ldr	r3, [r7, #4]
   1ad54:	3308      	adds	r3, #8
   1ad56:	001a      	movs	r2, r3
   1ad58:	687b      	ldr	r3, [r7, #4]
   1ad5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ad5c:	687b      	ldr	r3, [r7, #4]
   1ad5e:	3308      	adds	r3, #8
   1ad60:	001a      	movs	r2, r3
   1ad62:	687b      	ldr	r3, [r7, #4]
   1ad64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1ad66:	687b      	ldr	r3, [r7, #4]
   1ad68:	2200      	movs	r2, #0
   1ad6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1ad6c:	46c0      	nop			; (mov r8, r8)
   1ad6e:	46bd      	mov	sp, r7
   1ad70:	b002      	add	sp, #8
   1ad72:	bd80      	pop	{r7, pc}

0001ad74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1ad74:	b580      	push	{r7, lr}
   1ad76:	b082      	sub	sp, #8
   1ad78:	af00      	add	r7, sp, #0
   1ad7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1ad7c:	687b      	ldr	r3, [r7, #4]
   1ad7e:	2200      	movs	r2, #0
   1ad80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1ad82:	46c0      	nop			; (mov r8, r8)
   1ad84:	46bd      	mov	sp, r7
   1ad86:	b002      	add	sp, #8
   1ad88:	bd80      	pop	{r7, pc}

0001ad8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ad8a:	b580      	push	{r7, lr}
   1ad8c:	b084      	sub	sp, #16
   1ad8e:	af00      	add	r7, sp, #0
   1ad90:	6078      	str	r0, [r7, #4]
   1ad92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1ad94:	687b      	ldr	r3, [r7, #4]
   1ad96:	685b      	ldr	r3, [r3, #4]
   1ad98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1ad9a:	683b      	ldr	r3, [r7, #0]
   1ad9c:	68fa      	ldr	r2, [r7, #12]
   1ad9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1ada0:	68fb      	ldr	r3, [r7, #12]
   1ada2:	689a      	ldr	r2, [r3, #8]
   1ada4:	683b      	ldr	r3, [r7, #0]
   1ada6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1ada8:	68fb      	ldr	r3, [r7, #12]
   1adaa:	689b      	ldr	r3, [r3, #8]
   1adac:	683a      	ldr	r2, [r7, #0]
   1adae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1adb0:	68fb      	ldr	r3, [r7, #12]
   1adb2:	683a      	ldr	r2, [r7, #0]
   1adb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1adb6:	683b      	ldr	r3, [r7, #0]
   1adb8:	687a      	ldr	r2, [r7, #4]
   1adba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1adbc:	687b      	ldr	r3, [r7, #4]
   1adbe:	681b      	ldr	r3, [r3, #0]
   1adc0:	1c5a      	adds	r2, r3, #1
   1adc2:	687b      	ldr	r3, [r7, #4]
   1adc4:	601a      	str	r2, [r3, #0]
}
   1adc6:	46c0      	nop			; (mov r8, r8)
   1adc8:	46bd      	mov	sp, r7
   1adca:	b004      	add	sp, #16
   1adcc:	bd80      	pop	{r7, pc}

0001adce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1adce:	b580      	push	{r7, lr}
   1add0:	b084      	sub	sp, #16
   1add2:	af00      	add	r7, sp, #0
   1add4:	6078      	str	r0, [r7, #4]
   1add6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1add8:	683b      	ldr	r3, [r7, #0]
   1adda:	681b      	ldr	r3, [r3, #0]
   1addc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1adde:	68bb      	ldr	r3, [r7, #8]
   1ade0:	3301      	adds	r3, #1
   1ade2:	d103      	bne.n	1adec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1ade4:	687b      	ldr	r3, [r7, #4]
   1ade6:	691b      	ldr	r3, [r3, #16]
   1ade8:	60fb      	str	r3, [r7, #12]
   1adea:	e00c      	b.n	1ae06 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1adec:	687b      	ldr	r3, [r7, #4]
   1adee:	3308      	adds	r3, #8
   1adf0:	60fb      	str	r3, [r7, #12]
   1adf2:	e002      	b.n	1adfa <vListInsert+0x2c>
   1adf4:	68fb      	ldr	r3, [r7, #12]
   1adf6:	685b      	ldr	r3, [r3, #4]
   1adf8:	60fb      	str	r3, [r7, #12]
   1adfa:	68fb      	ldr	r3, [r7, #12]
   1adfc:	685b      	ldr	r3, [r3, #4]
   1adfe:	681a      	ldr	r2, [r3, #0]
   1ae00:	68bb      	ldr	r3, [r7, #8]
   1ae02:	429a      	cmp	r2, r3
   1ae04:	d9f6      	bls.n	1adf4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1ae06:	68fb      	ldr	r3, [r7, #12]
   1ae08:	685a      	ldr	r2, [r3, #4]
   1ae0a:	683b      	ldr	r3, [r7, #0]
   1ae0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1ae0e:	683b      	ldr	r3, [r7, #0]
   1ae10:	685b      	ldr	r3, [r3, #4]
   1ae12:	683a      	ldr	r2, [r7, #0]
   1ae14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1ae16:	683b      	ldr	r3, [r7, #0]
   1ae18:	68fa      	ldr	r2, [r7, #12]
   1ae1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1ae1c:	68fb      	ldr	r3, [r7, #12]
   1ae1e:	683a      	ldr	r2, [r7, #0]
   1ae20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ae22:	683b      	ldr	r3, [r7, #0]
   1ae24:	687a      	ldr	r2, [r7, #4]
   1ae26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ae28:	687b      	ldr	r3, [r7, #4]
   1ae2a:	681b      	ldr	r3, [r3, #0]
   1ae2c:	1c5a      	adds	r2, r3, #1
   1ae2e:	687b      	ldr	r3, [r7, #4]
   1ae30:	601a      	str	r2, [r3, #0]
}
   1ae32:	46c0      	nop			; (mov r8, r8)
   1ae34:	46bd      	mov	sp, r7
   1ae36:	b004      	add	sp, #16
   1ae38:	bd80      	pop	{r7, pc}

0001ae3a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1ae3a:	b580      	push	{r7, lr}
   1ae3c:	b084      	sub	sp, #16
   1ae3e:	af00      	add	r7, sp, #0
   1ae40:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1ae42:	687b      	ldr	r3, [r7, #4]
   1ae44:	691b      	ldr	r3, [r3, #16]
   1ae46:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1ae48:	687b      	ldr	r3, [r7, #4]
   1ae4a:	685b      	ldr	r3, [r3, #4]
   1ae4c:	687a      	ldr	r2, [r7, #4]
   1ae4e:	6892      	ldr	r2, [r2, #8]
   1ae50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ae52:	687b      	ldr	r3, [r7, #4]
   1ae54:	689b      	ldr	r3, [r3, #8]
   1ae56:	687a      	ldr	r2, [r7, #4]
   1ae58:	6852      	ldr	r2, [r2, #4]
   1ae5a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ae5c:	68fb      	ldr	r3, [r7, #12]
   1ae5e:	685a      	ldr	r2, [r3, #4]
   1ae60:	687b      	ldr	r3, [r7, #4]
   1ae62:	429a      	cmp	r2, r3
   1ae64:	d103      	bne.n	1ae6e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1ae66:	687b      	ldr	r3, [r7, #4]
   1ae68:	689a      	ldr	r2, [r3, #8]
   1ae6a:	68fb      	ldr	r3, [r7, #12]
   1ae6c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1ae6e:	687b      	ldr	r3, [r7, #4]
   1ae70:	2200      	movs	r2, #0
   1ae72:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ae74:	68fb      	ldr	r3, [r7, #12]
   1ae76:	681b      	ldr	r3, [r3, #0]
   1ae78:	1e5a      	subs	r2, r3, #1
   1ae7a:	68fb      	ldr	r3, [r7, #12]
   1ae7c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ae7e:	68fb      	ldr	r3, [r7, #12]
   1ae80:	681b      	ldr	r3, [r3, #0]
}
   1ae82:	0018      	movs	r0, r3
   1ae84:	46bd      	mov	sp, r7
   1ae86:	b004      	add	sp, #16
   1ae88:	bd80      	pop	{r7, pc}
	...

0001ae8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ae8c:	b580      	push	{r7, lr}
   1ae8e:	b084      	sub	sp, #16
   1ae90:	af00      	add	r7, sp, #0
   1ae92:	60f8      	str	r0, [r7, #12]
   1ae94:	60b9      	str	r1, [r7, #8]
   1ae96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ae98:	68fb      	ldr	r3, [r7, #12]
   1ae9a:	3b04      	subs	r3, #4
   1ae9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ae9e:	68fb      	ldr	r3, [r7, #12]
   1aea0:	2280      	movs	r2, #128	; 0x80
   1aea2:	0452      	lsls	r2, r2, #17
   1aea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1aea6:	68fb      	ldr	r3, [r7, #12]
   1aea8:	3b04      	subs	r3, #4
   1aeaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1aeac:	68ba      	ldr	r2, [r7, #8]
   1aeae:	68fb      	ldr	r3, [r7, #12]
   1aeb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1aeb2:	68fb      	ldr	r3, [r7, #12]
   1aeb4:	3b04      	subs	r3, #4
   1aeb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1aeb8:	4a08      	ldr	r2, [pc, #32]	; (1aedc <pxPortInitialiseStack+0x50>)
   1aeba:	68fb      	ldr	r3, [r7, #12]
   1aebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1aebe:	68fb      	ldr	r3, [r7, #12]
   1aec0:	3b14      	subs	r3, #20
   1aec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1aec4:	687a      	ldr	r2, [r7, #4]
   1aec6:	68fb      	ldr	r3, [r7, #12]
   1aec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1aeca:	68fb      	ldr	r3, [r7, #12]
   1aecc:	3b20      	subs	r3, #32
   1aece:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1aed0:	68fb      	ldr	r3, [r7, #12]
}
   1aed2:	0018      	movs	r0, r3
   1aed4:	46bd      	mov	sp, r7
   1aed6:	b004      	add	sp, #16
   1aed8:	bd80      	pop	{r7, pc}
   1aeda:	46c0      	nop			; (mov r8, r8)
   1aedc:	0001aee1 	.word	0x0001aee1

0001aee0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1aee0:	b580      	push	{r7, lr}
   1aee2:	b082      	sub	sp, #8
   1aee4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1aee6:	2300      	movs	r3, #0
   1aee8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1aeea:	4b07      	ldr	r3, [pc, #28]	; (1af08 <prvTaskExitError+0x28>)
   1aeec:	681b      	ldr	r3, [r3, #0]
   1aeee:	3301      	adds	r3, #1
   1aef0:	d001      	beq.n	1aef6 <prvTaskExitError+0x16>
   1aef2:	b672      	cpsid	i
   1aef4:	e7fe      	b.n	1aef4 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1aef6:	b672      	cpsid	i
	while( ulDummy == 0 )
   1aef8:	46c0      	nop			; (mov r8, r8)
   1aefa:	687b      	ldr	r3, [r7, #4]
   1aefc:	2b00      	cmp	r3, #0
   1aefe:	d0fc      	beq.n	1aefa <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1af00:	46c0      	nop			; (mov r8, r8)
   1af02:	46bd      	mov	sp, r7
   1af04:	b002      	add	sp, #8
   1af06:	bd80      	pop	{r7, pc}
   1af08:	20000114 	.word	0x20000114

0001af0c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1af0c:	b580      	push	{r7, lr}
   1af0e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1af10:	46c0      	nop			; (mov r8, r8)
   1af12:	46bd      	mov	sp, r7
   1af14:	bd80      	pop	{r7, pc}
	...

0001af20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1af20:	4a0b      	ldr	r2, [pc, #44]	; (1af50 <pxCurrentTCBConst2>)
   1af22:	6813      	ldr	r3, [r2, #0]
   1af24:	6818      	ldr	r0, [r3, #0]
   1af26:	3020      	adds	r0, #32
   1af28:	f380 8809 	msr	PSP, r0
   1af2c:	2002      	movs	r0, #2
   1af2e:	f380 8814 	msr	CONTROL, r0
   1af32:	f3bf 8f6f 	isb	sy
   1af36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1af38:	46ae      	mov	lr, r5
   1af3a:	bc08      	pop	{r3}
   1af3c:	bc04      	pop	{r2}
   1af3e:	b662      	cpsie	i
   1af40:	4718      	bx	r3
   1af42:	46c0      	nop			; (mov r8, r8)
   1af44:	46c0      	nop			; (mov r8, r8)
   1af46:	46c0      	nop			; (mov r8, r8)
   1af48:	46c0      	nop			; (mov r8, r8)
   1af4a:	46c0      	nop			; (mov r8, r8)
   1af4c:	46c0      	nop			; (mov r8, r8)
   1af4e:	46c0      	nop			; (mov r8, r8)

0001af50 <pxCurrentTCBConst2>:
   1af50:	200040dc 	.word	0x200040dc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1af54:	46c0      	nop			; (mov r8, r8)
   1af56:	46c0      	nop			; (mov r8, r8)

0001af58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1af58:	b580      	push	{r7, lr}
   1af5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1af5c:	4b0e      	ldr	r3, [pc, #56]	; (1af98 <xPortStartScheduler+0x40>)
   1af5e:	4a0e      	ldr	r2, [pc, #56]	; (1af98 <xPortStartScheduler+0x40>)
   1af60:	6812      	ldr	r2, [r2, #0]
   1af62:	21ff      	movs	r1, #255	; 0xff
   1af64:	0409      	lsls	r1, r1, #16
   1af66:	430a      	orrs	r2, r1
   1af68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1af6a:	4b0b      	ldr	r3, [pc, #44]	; (1af98 <xPortStartScheduler+0x40>)
   1af6c:	4a0a      	ldr	r2, [pc, #40]	; (1af98 <xPortStartScheduler+0x40>)
   1af6e:	6812      	ldr	r2, [r2, #0]
   1af70:	21ff      	movs	r1, #255	; 0xff
   1af72:	0609      	lsls	r1, r1, #24
   1af74:	430a      	orrs	r2, r1
   1af76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1af78:	4b08      	ldr	r3, [pc, #32]	; (1af9c <xPortStartScheduler+0x44>)
   1af7a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1af7c:	4b08      	ldr	r3, [pc, #32]	; (1afa0 <xPortStartScheduler+0x48>)
   1af7e:	2200      	movs	r2, #0
   1af80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1af82:	4b08      	ldr	r3, [pc, #32]	; (1afa4 <xPortStartScheduler+0x4c>)
   1af84:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1af86:	4b08      	ldr	r3, [pc, #32]	; (1afa8 <xPortStartScheduler+0x50>)
   1af88:	4798      	blx	r3
	prvTaskExitError();
   1af8a:	4b08      	ldr	r3, [pc, #32]	; (1afac <xPortStartScheduler+0x54>)
   1af8c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1af8e:	2300      	movs	r3, #0
}
   1af90:	0018      	movs	r0, r3
   1af92:	46bd      	mov	sp, r7
   1af94:	bd80      	pop	{r7, pc}
   1af96:	46c0      	nop			; (mov r8, r8)
   1af98:	e000ed20 	.word	0xe000ed20
   1af9c:	0001b0b9 	.word	0x0001b0b9
   1afa0:	20000114 	.word	0x20000114
   1afa4:	0001af21 	.word	0x0001af21
   1afa8:	0001d615 	.word	0x0001d615
   1afac:	0001aee1 	.word	0x0001aee1

0001afb0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1afb0:	b580      	push	{r7, lr}
   1afb2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1afb4:	4b03      	ldr	r3, [pc, #12]	; (1afc4 <vPortYield+0x14>)
   1afb6:	2280      	movs	r2, #128	; 0x80
   1afb8:	0552      	lsls	r2, r2, #21
   1afba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1afbc:	46c0      	nop			; (mov r8, r8)
   1afbe:	46bd      	mov	sp, r7
   1afc0:	bd80      	pop	{r7, pc}
   1afc2:	46c0      	nop			; (mov r8, r8)
   1afc4:	e000ed04 	.word	0xe000ed04

0001afc8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1afc8:	b580      	push	{r7, lr}
   1afca:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1afcc:	b672      	cpsid	i
    uxCriticalNesting++;
   1afce:	4b06      	ldr	r3, [pc, #24]	; (1afe8 <vPortEnterCritical+0x20>)
   1afd0:	681b      	ldr	r3, [r3, #0]
   1afd2:	1c5a      	adds	r2, r3, #1
   1afd4:	4b04      	ldr	r3, [pc, #16]	; (1afe8 <vPortEnterCritical+0x20>)
   1afd6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1afd8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1afdc:	f3bf 8f6f 	isb	sy
}
   1afe0:	46c0      	nop			; (mov r8, r8)
   1afe2:	46bd      	mov	sp, r7
   1afe4:	bd80      	pop	{r7, pc}
   1afe6:	46c0      	nop			; (mov r8, r8)
   1afe8:	20000114 	.word	0x20000114

0001afec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1afec:	b580      	push	{r7, lr}
   1afee:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1aff0:	4b09      	ldr	r3, [pc, #36]	; (1b018 <vPortExitCritical+0x2c>)
   1aff2:	681b      	ldr	r3, [r3, #0]
   1aff4:	2b00      	cmp	r3, #0
   1aff6:	d101      	bne.n	1affc <vPortExitCritical+0x10>
   1aff8:	b672      	cpsid	i
   1affa:	e7fe      	b.n	1affa <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1affc:	4b06      	ldr	r3, [pc, #24]	; (1b018 <vPortExitCritical+0x2c>)
   1affe:	681b      	ldr	r3, [r3, #0]
   1b000:	1e5a      	subs	r2, r3, #1
   1b002:	4b05      	ldr	r3, [pc, #20]	; (1b018 <vPortExitCritical+0x2c>)
   1b004:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1b006:	4b04      	ldr	r3, [pc, #16]	; (1b018 <vPortExitCritical+0x2c>)
   1b008:	681b      	ldr	r3, [r3, #0]
   1b00a:	2b00      	cmp	r3, #0
   1b00c:	d100      	bne.n	1b010 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1b00e:	b662      	cpsie	i
    }
}
   1b010:	46c0      	nop			; (mov r8, r8)
   1b012:	46bd      	mov	sp, r7
   1b014:	bd80      	pop	{r7, pc}
   1b016:	46c0      	nop			; (mov r8, r8)
   1b018:	20000114 	.word	0x20000114

0001b01c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1b01c:	f3ef 8010 	mrs	r0, PRIMASK
   1b020:	b672      	cpsid	i
   1b022:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1b024:	46c0      	nop			; (mov r8, r8)
   1b026:	0018      	movs	r0, r3

0001b028 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1b028:	f380 8810 	msr	PRIMASK, r0
   1b02c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1b02e:	46c0      	nop			; (mov r8, r8)

0001b030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1b030:	f3ef 8009 	mrs	r0, PSP
   1b034:	4b0e      	ldr	r3, [pc, #56]	; (1b070 <pxCurrentTCBConst>)
   1b036:	681a      	ldr	r2, [r3, #0]
   1b038:	3820      	subs	r0, #32
   1b03a:	6010      	str	r0, [r2, #0]
   1b03c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1b03e:	4644      	mov	r4, r8
   1b040:	464d      	mov	r5, r9
   1b042:	4656      	mov	r6, sl
   1b044:	465f      	mov	r7, fp
   1b046:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1b048:	b508      	push	{r3, lr}
   1b04a:	b672      	cpsid	i
   1b04c:	f002 fae2 	bl	1d614 <vTaskSwitchContext>
   1b050:	b662      	cpsie	i
   1b052:	bc0c      	pop	{r2, r3}
   1b054:	6811      	ldr	r1, [r2, #0]
   1b056:	6808      	ldr	r0, [r1, #0]
   1b058:	3010      	adds	r0, #16
   1b05a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1b05c:	46a0      	mov	r8, r4
   1b05e:	46a9      	mov	r9, r5
   1b060:	46b2      	mov	sl, r6
   1b062:	46bb      	mov	fp, r7
   1b064:	f380 8809 	msr	PSP, r0
   1b068:	3820      	subs	r0, #32
   1b06a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1b06c:	4718      	bx	r3
   1b06e:	46c0      	nop			; (mov r8, r8)

0001b070 <pxCurrentTCBConst>:
   1b070:	200040dc 	.word	0x200040dc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1b074:	46c0      	nop			; (mov r8, r8)
   1b076:	46c0      	nop			; (mov r8, r8)

0001b078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1b078:	b580      	push	{r7, lr}
   1b07a:	b082      	sub	sp, #8
   1b07c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1b07e:	4b0a      	ldr	r3, [pc, #40]	; (1b0a8 <SysTick_Handler+0x30>)
   1b080:	4798      	blx	r3
   1b082:	0003      	movs	r3, r0
   1b084:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1b086:	4b09      	ldr	r3, [pc, #36]	; (1b0ac <SysTick_Handler+0x34>)
   1b088:	4798      	blx	r3
   1b08a:	1e03      	subs	r3, r0, #0
   1b08c:	d003      	beq.n	1b096 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1b08e:	4b08      	ldr	r3, [pc, #32]	; (1b0b0 <SysTick_Handler+0x38>)
   1b090:	2280      	movs	r2, #128	; 0x80
   1b092:	0552      	lsls	r2, r2, #21
   1b094:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1b096:	687b      	ldr	r3, [r7, #4]
   1b098:	0018      	movs	r0, r3
   1b09a:	4b06      	ldr	r3, [pc, #24]	; (1b0b4 <SysTick_Handler+0x3c>)
   1b09c:	4798      	blx	r3
}
   1b09e:	46c0      	nop			; (mov r8, r8)
   1b0a0:	46bd      	mov	sp, r7
   1b0a2:	b002      	add	sp, #8
   1b0a4:	bd80      	pop	{r7, pc}
   1b0a6:	46c0      	nop			; (mov r8, r8)
   1b0a8:	0001b01d 	.word	0x0001b01d
   1b0ac:	0001d425 	.word	0x0001d425
   1b0b0:	e000ed04 	.word	0xe000ed04
   1b0b4:	0001b029 	.word	0x0001b029

0001b0b8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1b0b8:	b5b0      	push	{r4, r5, r7, lr}
   1b0ba:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1b0bc:	4b0b      	ldr	r3, [pc, #44]	; (1b0ec <prvSetupTimerInterrupt+0x34>)
   1b0be:	2200      	movs	r2, #0
   1b0c0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1b0c2:	4b0b      	ldr	r3, [pc, #44]	; (1b0f0 <prvSetupTimerInterrupt+0x38>)
   1b0c4:	2200      	movs	r2, #0
   1b0c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1b0c8:	4c0a      	ldr	r4, [pc, #40]	; (1b0f4 <prvSetupTimerInterrupt+0x3c>)
   1b0ca:	2000      	movs	r0, #0
   1b0cc:	4b0a      	ldr	r3, [pc, #40]	; (1b0f8 <prvSetupTimerInterrupt+0x40>)
   1b0ce:	4798      	blx	r3
   1b0d0:	4b0a      	ldr	r3, [pc, #40]	; (1b0fc <prvSetupTimerInterrupt+0x44>)
   1b0d2:	22fa      	movs	r2, #250	; 0xfa
   1b0d4:	0091      	lsls	r1, r2, #2
   1b0d6:	4798      	blx	r3
   1b0d8:	0003      	movs	r3, r0
   1b0da:	3b01      	subs	r3, #1
   1b0dc:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1b0de:	4b03      	ldr	r3, [pc, #12]	; (1b0ec <prvSetupTimerInterrupt+0x34>)
   1b0e0:	2207      	movs	r2, #7
   1b0e2:	601a      	str	r2, [r3, #0]
}
   1b0e4:	46c0      	nop			; (mov r8, r8)
   1b0e6:	46bd      	mov	sp, r7
   1b0e8:	bdb0      	pop	{r4, r5, r7, pc}
   1b0ea:	46c0      	nop			; (mov r8, r8)
   1b0ec:	e000e010 	.word	0xe000e010
   1b0f0:	e000e018 	.word	0xe000e018
   1b0f4:	e000e014 	.word	0xe000e014
   1b0f8:	0002ab39 	.word	0x0002ab39
   1b0fc:	000337a5 	.word	0x000337a5

0001b100 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1b100:	b580      	push	{r7, lr}
   1b102:	b084      	sub	sp, #16
   1b104:	af00      	add	r7, sp, #0
   1b106:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1b108:	2300      	movs	r3, #0
   1b10a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1b10c:	687b      	ldr	r3, [r7, #4]
   1b10e:	2207      	movs	r2, #7
   1b110:	4013      	ands	r3, r2
   1b112:	d004      	beq.n	1b11e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1b114:	687b      	ldr	r3, [r7, #4]
   1b116:	2207      	movs	r2, #7
   1b118:	4393      	bics	r3, r2
   1b11a:	3308      	adds	r3, #8
   1b11c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1b11e:	4b21      	ldr	r3, [pc, #132]	; (1b1a4 <pvPortMalloc+0xa4>)
   1b120:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1b122:	4b21      	ldr	r3, [pc, #132]	; (1b1a8 <pvPortMalloc+0xa8>)
   1b124:	681b      	ldr	r3, [r3, #0]
   1b126:	2b00      	cmp	r3, #0
   1b128:	d105      	bne.n	1b136 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1b12a:	4b20      	ldr	r3, [pc, #128]	; (1b1ac <pvPortMalloc+0xac>)
   1b12c:	2207      	movs	r2, #7
   1b12e:	4393      	bics	r3, r2
   1b130:	001a      	movs	r2, r3
   1b132:	4b1d      	ldr	r3, [pc, #116]	; (1b1a8 <pvPortMalloc+0xa8>)
   1b134:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1b136:	4b1e      	ldr	r3, [pc, #120]	; (1b1b0 <pvPortMalloc+0xb0>)
   1b138:	681a      	ldr	r2, [r3, #0]
   1b13a:	687b      	ldr	r3, [r7, #4]
   1b13c:	18d3      	adds	r3, r2, r3
   1b13e:	4a1d      	ldr	r2, [pc, #116]	; (1b1b4 <pvPortMalloc+0xb4>)
   1b140:	4293      	cmp	r3, r2
   1b142:	d813      	bhi.n	1b16c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1b144:	4b1a      	ldr	r3, [pc, #104]	; (1b1b0 <pvPortMalloc+0xb0>)
   1b146:	681a      	ldr	r2, [r3, #0]
   1b148:	687b      	ldr	r3, [r7, #4]
   1b14a:	18d2      	adds	r2, r2, r3
   1b14c:	4b18      	ldr	r3, [pc, #96]	; (1b1b0 <pvPortMalloc+0xb0>)
   1b14e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1b150:	429a      	cmp	r2, r3
   1b152:	d90b      	bls.n	1b16c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1b154:	4b14      	ldr	r3, [pc, #80]	; (1b1a8 <pvPortMalloc+0xa8>)
   1b156:	681a      	ldr	r2, [r3, #0]
   1b158:	4b15      	ldr	r3, [pc, #84]	; (1b1b0 <pvPortMalloc+0xb0>)
   1b15a:	681b      	ldr	r3, [r3, #0]
   1b15c:	18d3      	adds	r3, r2, r3
   1b15e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1b160:	4b13      	ldr	r3, [pc, #76]	; (1b1b0 <pvPortMalloc+0xb0>)
   1b162:	681a      	ldr	r2, [r3, #0]
   1b164:	687b      	ldr	r3, [r7, #4]
   1b166:	18d2      	adds	r2, r2, r3
   1b168:	4b11      	ldr	r3, [pc, #68]	; (1b1b0 <pvPortMalloc+0xb0>)
   1b16a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1b16c:	68fb      	ldr	r3, [r7, #12]
   1b16e:	2b00      	cmp	r3, #0
   1b170:	d006      	beq.n	1b180 <pvPortMalloc+0x80>
   1b172:	68fb      	ldr	r3, [r7, #12]
   1b174:	687a      	ldr	r2, [r7, #4]
   1b176:	0019      	movs	r1, r3
   1b178:	2094      	movs	r0, #148	; 0x94
   1b17a:	4b0f      	ldr	r3, [pc, #60]	; (1b1b8 <pvPortMalloc+0xb8>)
   1b17c:	4798      	blx	r3
   1b17e:	e005      	b.n	1b18c <pvPortMalloc+0x8c>
   1b180:	68fb      	ldr	r3, [r7, #12]
   1b182:	687a      	ldr	r2, [r7, #4]
   1b184:	0019      	movs	r1, r3
   1b186:	20e8      	movs	r0, #232	; 0xe8
   1b188:	4b0b      	ldr	r3, [pc, #44]	; (1b1b8 <pvPortMalloc+0xb8>)
   1b18a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1b18c:	4b0b      	ldr	r3, [pc, #44]	; (1b1bc <pvPortMalloc+0xbc>)
   1b18e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1b190:	68fb      	ldr	r3, [r7, #12]
   1b192:	2b00      	cmp	r3, #0
   1b194:	d101      	bne.n	1b19a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1b196:	4b0a      	ldr	r3, [pc, #40]	; (1b1c0 <pvPortMalloc+0xc0>)
   1b198:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1b19a:	68fb      	ldr	r3, [r7, #12]
}
   1b19c:	0018      	movs	r0, r3
   1b19e:	46bd      	mov	sp, r7
   1b1a0:	b004      	add	sp, #16
   1b1a2:	bd80      	pop	{r7, pc}
   1b1a4:	0001d281 	.word	0x0001d281
   1b1a8:	200040d8 	.word	0x200040d8
   1b1ac:	20000e14 	.word	0x20000e14
   1b1b0:	200040d4 	.word	0x200040d4
   1b1b4:	000032bf 	.word	0x000032bf
   1b1b8:	00019869 	.word	0x00019869
   1b1bc:	0001d299 	.word	0x0001d299
   1b1c0:	00033775 	.word	0x00033775

0001b1c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1b1c4:	b580      	push	{r7, lr}
   1b1c6:	b082      	sub	sp, #8
   1b1c8:	af00      	add	r7, sp, #0
   1b1ca:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1b1cc:	687b      	ldr	r3, [r7, #4]
   1b1ce:	2b00      	cmp	r3, #0
   1b1d0:	d001      	beq.n	1b1d6 <vPortFree+0x12>
   1b1d2:	b672      	cpsid	i
   1b1d4:	e7fe      	b.n	1b1d4 <vPortFree+0x10>
}
   1b1d6:	46c0      	nop			; (mov r8, r8)
   1b1d8:	46bd      	mov	sp, r7
   1b1da:	b002      	add	sp, #8
   1b1dc:	bd80      	pop	{r7, pc}
	...

0001b1e0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1b1e0:	b580      	push	{r7, lr}
   1b1e2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1b1e4:	4b03      	ldr	r3, [pc, #12]	; (1b1f4 <xPortGetFreeHeapSize+0x14>)
   1b1e6:	681b      	ldr	r3, [r3, #0]
   1b1e8:	22cb      	movs	r2, #203	; 0xcb
   1b1ea:	0192      	lsls	r2, r2, #6
   1b1ec:	1ad3      	subs	r3, r2, r3
}
   1b1ee:	0018      	movs	r0, r3
   1b1f0:	46bd      	mov	sp, r7
   1b1f2:	bd80      	pop	{r7, pc}
   1b1f4:	200040d4 	.word	0x200040d4

0001b1f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1b1f8:	b580      	push	{r7, lr}
   1b1fa:	b084      	sub	sp, #16
   1b1fc:	af00      	add	r7, sp, #0
   1b1fe:	6078      	str	r0, [r7, #4]
   1b200:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b202:	687b      	ldr	r3, [r7, #4]
   1b204:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1b206:	68fb      	ldr	r3, [r7, #12]
   1b208:	2b00      	cmp	r3, #0
   1b20a:	d101      	bne.n	1b210 <xQueueGenericReset+0x18>
   1b20c:	b672      	cpsid	i
   1b20e:	e7fe      	b.n	1b20e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1b210:	4b23      	ldr	r3, [pc, #140]	; (1b2a0 <xQueueGenericReset+0xa8>)
   1b212:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1b214:	68fb      	ldr	r3, [r7, #12]
   1b216:	681a      	ldr	r2, [r3, #0]
   1b218:	68fb      	ldr	r3, [r7, #12]
   1b21a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1b21c:	68fb      	ldr	r3, [r7, #12]
   1b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b220:	434b      	muls	r3, r1
   1b222:	18d2      	adds	r2, r2, r3
   1b224:	68fb      	ldr	r3, [r7, #12]
   1b226:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1b228:	68fb      	ldr	r3, [r7, #12]
   1b22a:	2200      	movs	r2, #0
   1b22c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1b22e:	68fb      	ldr	r3, [r7, #12]
   1b230:	681a      	ldr	r2, [r3, #0]
   1b232:	68fb      	ldr	r3, [r7, #12]
   1b234:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1b236:	68fb      	ldr	r3, [r7, #12]
   1b238:	681a      	ldr	r2, [r3, #0]
   1b23a:	68fb      	ldr	r3, [r7, #12]
   1b23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b23e:	1e59      	subs	r1, r3, #1
   1b240:	68fb      	ldr	r3, [r7, #12]
   1b242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b244:	434b      	muls	r3, r1
   1b246:	18d2      	adds	r2, r2, r3
   1b248:	68fb      	ldr	r3, [r7, #12]
   1b24a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1b24c:	68fb      	ldr	r3, [r7, #12]
   1b24e:	2244      	movs	r2, #68	; 0x44
   1b250:	21ff      	movs	r1, #255	; 0xff
   1b252:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1b254:	68fb      	ldr	r3, [r7, #12]
   1b256:	2245      	movs	r2, #69	; 0x45
   1b258:	21ff      	movs	r1, #255	; 0xff
   1b25a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1b25c:	683b      	ldr	r3, [r7, #0]
   1b25e:	2b00      	cmp	r3, #0
   1b260:	d10d      	bne.n	1b27e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b262:	68fb      	ldr	r3, [r7, #12]
   1b264:	691b      	ldr	r3, [r3, #16]
   1b266:	2b00      	cmp	r3, #0
   1b268:	d013      	beq.n	1b292 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b26a:	68fb      	ldr	r3, [r7, #12]
   1b26c:	3310      	adds	r3, #16
   1b26e:	0018      	movs	r0, r3
   1b270:	4b0c      	ldr	r3, [pc, #48]	; (1b2a4 <xQueueGenericReset+0xac>)
   1b272:	4798      	blx	r3
   1b274:	1e03      	subs	r3, r0, #0
   1b276:	d00c      	beq.n	1b292 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1b278:	4b0b      	ldr	r3, [pc, #44]	; (1b2a8 <xQueueGenericReset+0xb0>)
   1b27a:	4798      	blx	r3
   1b27c:	e009      	b.n	1b292 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1b27e:	68fb      	ldr	r3, [r7, #12]
   1b280:	3310      	adds	r3, #16
   1b282:	0018      	movs	r0, r3
   1b284:	4b09      	ldr	r3, [pc, #36]	; (1b2ac <xQueueGenericReset+0xb4>)
   1b286:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1b288:	68fb      	ldr	r3, [r7, #12]
   1b28a:	3324      	adds	r3, #36	; 0x24
   1b28c:	0018      	movs	r0, r3
   1b28e:	4b07      	ldr	r3, [pc, #28]	; (1b2ac <xQueueGenericReset+0xb4>)
   1b290:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1b292:	4b07      	ldr	r3, [pc, #28]	; (1b2b0 <xQueueGenericReset+0xb8>)
   1b294:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1b296:	2301      	movs	r3, #1
}
   1b298:	0018      	movs	r0, r3
   1b29a:	46bd      	mov	sp, r7
   1b29c:	b004      	add	sp, #16
   1b29e:	bd80      	pop	{r7, pc}
   1b2a0:	0001afc9 	.word	0x0001afc9
   1b2a4:	0001d859 	.word	0x0001d859
   1b2a8:	0001afb1 	.word	0x0001afb1
   1b2ac:	0001ad39 	.word	0x0001ad39
   1b2b0:	0001afed 	.word	0x0001afed

0001b2b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1b2b4:	b590      	push	{r4, r7, lr}
   1b2b6:	b08b      	sub	sp, #44	; 0x2c
   1b2b8:	af02      	add	r7, sp, #8
   1b2ba:	60f8      	str	r0, [r7, #12]
   1b2bc:	60b9      	str	r1, [r7, #8]
   1b2be:	1dfb      	adds	r3, r7, #7
   1b2c0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1b2c2:	68fb      	ldr	r3, [r7, #12]
   1b2c4:	2b00      	cmp	r3, #0
   1b2c6:	d101      	bne.n	1b2cc <xQueueGenericCreate+0x18>
   1b2c8:	b672      	cpsid	i
   1b2ca:	e7fe      	b.n	1b2ca <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1b2cc:	68bb      	ldr	r3, [r7, #8]
   1b2ce:	2b00      	cmp	r3, #0
   1b2d0:	d102      	bne.n	1b2d8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1b2d2:	2300      	movs	r3, #0
   1b2d4:	61fb      	str	r3, [r7, #28]
   1b2d6:	e003      	b.n	1b2e0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b2d8:	68fb      	ldr	r3, [r7, #12]
   1b2da:	68ba      	ldr	r2, [r7, #8]
   1b2dc:	4353      	muls	r3, r2
   1b2de:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1b2e0:	69fb      	ldr	r3, [r7, #28]
   1b2e2:	3354      	adds	r3, #84	; 0x54
   1b2e4:	0018      	movs	r0, r3
   1b2e6:	4b19      	ldr	r3, [pc, #100]	; (1b34c <xQueueGenericCreate+0x98>)
   1b2e8:	4798      	blx	r3
   1b2ea:	0003      	movs	r3, r0
   1b2ec:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1b2ee:	69bb      	ldr	r3, [r7, #24]
   1b2f0:	2b00      	cmp	r3, #0
   1b2f2:	d00d      	beq.n	1b310 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1b2f4:	69bb      	ldr	r3, [r7, #24]
   1b2f6:	3354      	adds	r3, #84	; 0x54
   1b2f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1b2fa:	1dfb      	adds	r3, r7, #7
   1b2fc:	781c      	ldrb	r4, [r3, #0]
   1b2fe:	697a      	ldr	r2, [r7, #20]
   1b300:	68b9      	ldr	r1, [r7, #8]
   1b302:	68f8      	ldr	r0, [r7, #12]
   1b304:	69bb      	ldr	r3, [r7, #24]
   1b306:	9300      	str	r3, [sp, #0]
   1b308:	0023      	movs	r3, r4
   1b30a:	4c11      	ldr	r4, [pc, #68]	; (1b350 <xQueueGenericCreate+0x9c>)
   1b30c:	47a0      	blx	r4
   1b30e:	e017      	b.n	1b340 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1b310:	4b10      	ldr	r3, [pc, #64]	; (1b354 <xQueueGenericCreate+0xa0>)
   1b312:	4798      	blx	r3
   1b314:	0003      	movs	r3, r0
   1b316:	0018      	movs	r0, r3
   1b318:	4b0f      	ldr	r3, [pc, #60]	; (1b358 <xQueueGenericCreate+0xa4>)
   1b31a:	4798      	blx	r3
   1b31c:	0003      	movs	r3, r0
   1b31e:	001a      	movs	r2, r3
   1b320:	4b0e      	ldr	r3, [pc, #56]	; (1b35c <xQueueGenericCreate+0xa8>)
   1b322:	881b      	ldrh	r3, [r3, #0]
   1b324:	4013      	ands	r3, r2
   1b326:	b29b      	uxth	r3, r3
   1b328:	2b00      	cmp	r3, #0
   1b32a:	d009      	beq.n	1b340 <xQueueGenericCreate+0x8c>
   1b32c:	1dfb      	adds	r3, r7, #7
   1b32e:	781b      	ldrb	r3, [r3, #0]
   1b330:	4a0b      	ldr	r2, [pc, #44]	; (1b360 <xQueueGenericCreate+0xac>)
   1b332:	5cd3      	ldrb	r3, [r2, r3]
   1b334:	3340      	adds	r3, #64	; 0x40
   1b336:	b2db      	uxtb	r3, r3
   1b338:	2100      	movs	r1, #0
   1b33a:	0018      	movs	r0, r3
   1b33c:	4b09      	ldr	r3, [pc, #36]	; (1b364 <xQueueGenericCreate+0xb0>)
   1b33e:	4798      	blx	r3
		}

		return pxNewQueue;
   1b340:	69bb      	ldr	r3, [r7, #24]
	}
   1b342:	0018      	movs	r0, r3
   1b344:	46bd      	mov	sp, r7
   1b346:	b009      	add	sp, #36	; 0x24
   1b348:	bd90      	pop	{r4, r7, pc}
   1b34a:	46c0      	nop			; (mov r8, r8)
   1b34c:	0001b101 	.word	0x0001b101
   1b350:	0001b369 	.word	0x0001b369
   1b354:	0001925d 	.word	0x0001925d
   1b358:	00018fc1 	.word	0x00018fc1
   1b35c:	20000110 	.word	0x20000110
   1b360:	20000104 	.word	0x20000104
   1b364:	00019cc1 	.word	0x00019cc1

0001b368 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1b368:	b5b0      	push	{r4, r5, r7, lr}
   1b36a:	b084      	sub	sp, #16
   1b36c:	af00      	add	r7, sp, #0
   1b36e:	60f8      	str	r0, [r7, #12]
   1b370:	60b9      	str	r1, [r7, #8]
   1b372:	607a      	str	r2, [r7, #4]
   1b374:	001a      	movs	r2, r3
   1b376:	1cfb      	adds	r3, r7, #3
   1b378:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1b37a:	68bb      	ldr	r3, [r7, #8]
   1b37c:	2b00      	cmp	r3, #0
   1b37e:	d103      	bne.n	1b388 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1b380:	6a3b      	ldr	r3, [r7, #32]
   1b382:	6a3a      	ldr	r2, [r7, #32]
   1b384:	601a      	str	r2, [r3, #0]
   1b386:	e002      	b.n	1b38e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1b388:	6a3b      	ldr	r3, [r7, #32]
   1b38a:	687a      	ldr	r2, [r7, #4]
   1b38c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1b38e:	6a3b      	ldr	r3, [r7, #32]
   1b390:	68fa      	ldr	r2, [r7, #12]
   1b392:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1b394:	6a3b      	ldr	r3, [r7, #32]
   1b396:	68ba      	ldr	r2, [r7, #8]
   1b398:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1b39a:	6a3b      	ldr	r3, [r7, #32]
   1b39c:	2101      	movs	r1, #1
   1b39e:	0018      	movs	r0, r3
   1b3a0:	4b41      	ldr	r3, [pc, #260]	; (1b4a8 <prvInitialiseNewQueue+0x140>)
   1b3a2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1b3a4:	6a3b      	ldr	r3, [r7, #32]
   1b3a6:	1cfa      	adds	r2, r7, #3
   1b3a8:	2150      	movs	r1, #80	; 0x50
   1b3aa:	7812      	ldrb	r2, [r2, #0]
   1b3ac:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1b3ae:	6a3b      	ldr	r3, [r7, #32]
   1b3b0:	2200      	movs	r2, #0
   1b3b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1b3b4:	6a3b      	ldr	r3, [r7, #32]
   1b3b6:	0018      	movs	r0, r3
   1b3b8:	4b3c      	ldr	r3, [pc, #240]	; (1b4ac <prvInitialiseNewQueue+0x144>)
   1b3ba:	4798      	blx	r3
   1b3bc:	0003      	movs	r3, r0
   1b3be:	001a      	movs	r2, r3
   1b3c0:	4b3b      	ldr	r3, [pc, #236]	; (1b4b0 <prvInitialiseNewQueue+0x148>)
   1b3c2:	5c9b      	ldrb	r3, [r3, r2]
   1b3c4:	0018      	movs	r0, r3
   1b3c6:	4b3b      	ldr	r3, [pc, #236]	; (1b4b4 <prvInitialiseNewQueue+0x14c>)
   1b3c8:	4798      	blx	r3
   1b3ca:	0003      	movs	r3, r0
   1b3cc:	b29a      	uxth	r2, r3
   1b3ce:	6a3b      	ldr	r3, [r7, #32]
   1b3d0:	0011      	movs	r1, r2
   1b3d2:	0018      	movs	r0, r3
   1b3d4:	4b38      	ldr	r3, [pc, #224]	; (1b4b8 <prvInitialiseNewQueue+0x150>)
   1b3d6:	4798      	blx	r3
   1b3d8:	4b38      	ldr	r3, [pc, #224]	; (1b4bc <prvInitialiseNewQueue+0x154>)
   1b3da:	881a      	ldrh	r2, [r3, #0]
   1b3dc:	6a3b      	ldr	r3, [r7, #32]
   1b3de:	0011      	movs	r1, r2
   1b3e0:	0018      	movs	r0, r3
   1b3e2:	4b37      	ldr	r3, [pc, #220]	; (1b4c0 <prvInitialiseNewQueue+0x158>)
   1b3e4:	4798      	blx	r3
   1b3e6:	6a3b      	ldr	r3, [r7, #32]
   1b3e8:	0018      	movs	r0, r3
   1b3ea:	4b30      	ldr	r3, [pc, #192]	; (1b4ac <prvInitialiseNewQueue+0x144>)
   1b3ec:	4798      	blx	r3
   1b3ee:	0003      	movs	r3, r0
   1b3f0:	001a      	movs	r2, r3
   1b3f2:	4b2f      	ldr	r3, [pc, #188]	; (1b4b0 <prvInitialiseNewQueue+0x148>)
   1b3f4:	5c9c      	ldrb	r4, [r3, r2]
   1b3f6:	6a3b      	ldr	r3, [r7, #32]
   1b3f8:	0018      	movs	r0, r3
   1b3fa:	4b32      	ldr	r3, [pc, #200]	; (1b4c4 <prvInitialiseNewQueue+0x15c>)
   1b3fc:	4798      	blx	r3
   1b3fe:	0003      	movs	r3, r0
   1b400:	b2db      	uxtb	r3, r3
   1b402:	0019      	movs	r1, r3
   1b404:	0020      	movs	r0, r4
   1b406:	4b30      	ldr	r3, [pc, #192]	; (1b4c8 <prvInitialiseNewQueue+0x160>)
   1b408:	4798      	blx	r3
   1b40a:	4b30      	ldr	r3, [pc, #192]	; (1b4cc <prvInitialiseNewQueue+0x164>)
   1b40c:	4798      	blx	r3
   1b40e:	0003      	movs	r3, r0
   1b410:	0018      	movs	r0, r3
   1b412:	4b2f      	ldr	r3, [pc, #188]	; (1b4d0 <prvInitialiseNewQueue+0x168>)
   1b414:	4798      	blx	r3
   1b416:	0003      	movs	r3, r0
   1b418:	001a      	movs	r2, r3
   1b41a:	4b2e      	ldr	r3, [pc, #184]	; (1b4d4 <prvInitialiseNewQueue+0x16c>)
   1b41c:	881b      	ldrh	r3, [r3, #0]
   1b41e:	4013      	ands	r3, r2
   1b420:	b29b      	uxth	r3, r3
   1b422:	2b00      	cmp	r3, #0
   1b424:	d029      	beq.n	1b47a <prvInitialiseNewQueue+0x112>
   1b426:	6a3b      	ldr	r3, [r7, #32]
   1b428:	0018      	movs	r0, r3
   1b42a:	4b2b      	ldr	r3, [pc, #172]	; (1b4d8 <prvInitialiseNewQueue+0x170>)
   1b42c:	4798      	blx	r3
   1b42e:	0003      	movs	r3, r0
   1b430:	001a      	movs	r2, r3
   1b432:	4b28      	ldr	r3, [pc, #160]	; (1b4d4 <prvInitialiseNewQueue+0x16c>)
   1b434:	881b      	ldrh	r3, [r3, #0]
   1b436:	4013      	ands	r3, r2
   1b438:	b29b      	uxth	r3, r3
   1b43a:	2b00      	cmp	r3, #0
   1b43c:	d01d      	beq.n	1b47a <prvInitialiseNewQueue+0x112>
   1b43e:	6a3b      	ldr	r3, [r7, #32]
   1b440:	0018      	movs	r0, r3
   1b442:	4b1a      	ldr	r3, [pc, #104]	; (1b4ac <prvInitialiseNewQueue+0x144>)
   1b444:	4798      	blx	r3
   1b446:	0003      	movs	r3, r0
   1b448:	001a      	movs	r2, r3
   1b44a:	4b19      	ldr	r3, [pc, #100]	; (1b4b0 <prvInitialiseNewQueue+0x148>)
   1b44c:	5c9b      	ldrb	r3, [r3, r2]
   1b44e:	3318      	adds	r3, #24
   1b450:	b2db      	uxtb	r3, r3
   1b452:	001d      	movs	r5, r3
   1b454:	6a3b      	ldr	r3, [r7, #32]
   1b456:	0018      	movs	r0, r3
   1b458:	4b14      	ldr	r3, [pc, #80]	; (1b4ac <prvInitialiseNewQueue+0x144>)
   1b45a:	4798      	blx	r3
   1b45c:	0003      	movs	r3, r0
   1b45e:	001a      	movs	r2, r3
   1b460:	4b13      	ldr	r3, [pc, #76]	; (1b4b0 <prvInitialiseNewQueue+0x148>)
   1b462:	5c9c      	ldrb	r4, [r3, r2]
   1b464:	6a3b      	ldr	r3, [r7, #32]
   1b466:	0018      	movs	r0, r3
   1b468:	4b16      	ldr	r3, [pc, #88]	; (1b4c4 <prvInitialiseNewQueue+0x15c>)
   1b46a:	4798      	blx	r3
   1b46c:	0003      	movs	r3, r0
   1b46e:	b2db      	uxtb	r3, r3
   1b470:	001a      	movs	r2, r3
   1b472:	0021      	movs	r1, r4
   1b474:	0028      	movs	r0, r5
   1b476:	4b19      	ldr	r3, [pc, #100]	; (1b4dc <prvInitialiseNewQueue+0x174>)
   1b478:	4798      	blx	r3
   1b47a:	6a3b      	ldr	r3, [r7, #32]
   1b47c:	0018      	movs	r0, r3
   1b47e:	4b0b      	ldr	r3, [pc, #44]	; (1b4ac <prvInitialiseNewQueue+0x144>)
   1b480:	4798      	blx	r3
   1b482:	0003      	movs	r3, r0
   1b484:	001a      	movs	r2, r3
   1b486:	4b0a      	ldr	r3, [pc, #40]	; (1b4b0 <prvInitialiseNewQueue+0x148>)
   1b488:	5c9c      	ldrb	r4, [r3, r2]
   1b48a:	6a3b      	ldr	r3, [r7, #32]
   1b48c:	0018      	movs	r0, r3
   1b48e:	4b0d      	ldr	r3, [pc, #52]	; (1b4c4 <prvInitialiseNewQueue+0x15c>)
   1b490:	4798      	blx	r3
   1b492:	0003      	movs	r3, r0
   1b494:	b2db      	uxtb	r3, r3
   1b496:	2200      	movs	r2, #0
   1b498:	0019      	movs	r1, r3
   1b49a:	0020      	movs	r0, r4
   1b49c:	4b10      	ldr	r3, [pc, #64]	; (1b4e0 <prvInitialiseNewQueue+0x178>)
   1b49e:	4798      	blx	r3
}
   1b4a0:	46c0      	nop			; (mov r8, r8)
   1b4a2:	46bd      	mov	sp, r7
   1b4a4:	b004      	add	sp, #16
   1b4a6:	bdb0      	pop	{r4, r5, r7, pc}
   1b4a8:	0001b1f9 	.word	0x0001b1f9
   1b4ac:	00018f81 	.word	0x00018f81
   1b4b0:	20000104 	.word	0x20000104
   1b4b4:	0001a541 	.word	0x0001a541
   1b4b8:	000190a5 	.word	0x000190a5
   1b4bc:	20000112 	.word	0x20000112
   1b4c0:	000190e1 	.word	0x000190e1
   1b4c4:	00019061 	.word	0x00019061
   1b4c8:	0001a6d9 	.word	0x0001a6d9
   1b4cc:	0001925d 	.word	0x0001925d
   1b4d0:	00018fc1 	.word	0x00018fc1
   1b4d4:	20000110 	.word	0x20000110
   1b4d8:	00019081 	.word	0x00019081
   1b4dc:	000199b9 	.word	0x000199b9
   1b4e0:	0001a015 	.word	0x0001a015

0001b4e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1b4e4:	b590      	push	{r4, r7, lr}
   1b4e6:	b083      	sub	sp, #12
   1b4e8:	af00      	add	r7, sp, #0
   1b4ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1b4ec:	687b      	ldr	r3, [r7, #4]
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	d00e      	beq.n	1b510 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1b4f2:	687b      	ldr	r3, [r7, #4]
   1b4f4:	2200      	movs	r2, #0
   1b4f6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1b4f8:	687b      	ldr	r3, [r7, #4]
   1b4fa:	2200      	movs	r2, #0
   1b4fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1b4fe:	687b      	ldr	r3, [r7, #4]
   1b500:	2200      	movs	r2, #0
   1b502:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1b504:	6878      	ldr	r0, [r7, #4]
   1b506:	2300      	movs	r3, #0
   1b508:	2200      	movs	r2, #0
   1b50a:	2100      	movs	r1, #0
   1b50c:	4c02      	ldr	r4, [pc, #8]	; (1b518 <prvInitialiseMutex+0x34>)
   1b50e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1b510:	46c0      	nop			; (mov r8, r8)
   1b512:	46bd      	mov	sp, r7
   1b514:	b003      	add	sp, #12
   1b516:	bd90      	pop	{r4, r7, pc}
   1b518:	0001b55d 	.word	0x0001b55d

0001b51c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1b51c:	b580      	push	{r7, lr}
   1b51e:	b086      	sub	sp, #24
   1b520:	af00      	add	r7, sp, #0
   1b522:	0002      	movs	r2, r0
   1b524:	1dfb      	adds	r3, r7, #7
   1b526:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1b528:	2301      	movs	r3, #1
   1b52a:	617b      	str	r3, [r7, #20]
   1b52c:	2300      	movs	r3, #0
   1b52e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1b530:	1dfb      	adds	r3, r7, #7
   1b532:	781a      	ldrb	r2, [r3, #0]
   1b534:	6939      	ldr	r1, [r7, #16]
   1b536:	697b      	ldr	r3, [r7, #20]
   1b538:	0018      	movs	r0, r3
   1b53a:	4b06      	ldr	r3, [pc, #24]	; (1b554 <xQueueCreateMutex+0x38>)
   1b53c:	4798      	blx	r3
   1b53e:	0003      	movs	r3, r0
   1b540:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1b542:	68fb      	ldr	r3, [r7, #12]
   1b544:	0018      	movs	r0, r3
   1b546:	4b04      	ldr	r3, [pc, #16]	; (1b558 <xQueueCreateMutex+0x3c>)
   1b548:	4798      	blx	r3

		return pxNewQueue;
   1b54a:	68fb      	ldr	r3, [r7, #12]
	}
   1b54c:	0018      	movs	r0, r3
   1b54e:	46bd      	mov	sp, r7
   1b550:	b006      	add	sp, #24
   1b552:	bd80      	pop	{r7, pc}
   1b554:	0001b2b5 	.word	0x0001b2b5
   1b558:	0001b4e5 	.word	0x0001b4e5

0001b55c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1b55c:	b5b0      	push	{r4, r5, r7, lr}
   1b55e:	b08a      	sub	sp, #40	; 0x28
   1b560:	af00      	add	r7, sp, #0
   1b562:	60f8      	str	r0, [r7, #12]
   1b564:	60b9      	str	r1, [r7, #8]
   1b566:	607a      	str	r2, [r7, #4]
   1b568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1b56a:	2300      	movs	r3, #0
   1b56c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b56e:	68fb      	ldr	r3, [r7, #12]
   1b570:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1b572:	6a3b      	ldr	r3, [r7, #32]
   1b574:	2b00      	cmp	r3, #0
   1b576:	d101      	bne.n	1b57c <xQueueGenericSend+0x20>
   1b578:	b672      	cpsid	i
   1b57a:	e7fe      	b.n	1b57a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b57c:	68bb      	ldr	r3, [r7, #8]
   1b57e:	2b00      	cmp	r3, #0
   1b580:	d103      	bne.n	1b58a <xQueueGenericSend+0x2e>
   1b582:	6a3b      	ldr	r3, [r7, #32]
   1b584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b586:	2b00      	cmp	r3, #0
   1b588:	d101      	bne.n	1b58e <xQueueGenericSend+0x32>
   1b58a:	2301      	movs	r3, #1
   1b58c:	e000      	b.n	1b590 <xQueueGenericSend+0x34>
   1b58e:	2300      	movs	r3, #0
   1b590:	2b00      	cmp	r3, #0
   1b592:	d101      	bne.n	1b598 <xQueueGenericSend+0x3c>
   1b594:	b672      	cpsid	i
   1b596:	e7fe      	b.n	1b596 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b598:	683b      	ldr	r3, [r7, #0]
   1b59a:	2b02      	cmp	r3, #2
   1b59c:	d103      	bne.n	1b5a6 <xQueueGenericSend+0x4a>
   1b59e:	6a3b      	ldr	r3, [r7, #32]
   1b5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b5a2:	2b01      	cmp	r3, #1
   1b5a4:	d101      	bne.n	1b5aa <xQueueGenericSend+0x4e>
   1b5a6:	2301      	movs	r3, #1
   1b5a8:	e000      	b.n	1b5ac <xQueueGenericSend+0x50>
   1b5aa:	2300      	movs	r3, #0
   1b5ac:	2b00      	cmp	r3, #0
   1b5ae:	d101      	bne.n	1b5b4 <xQueueGenericSend+0x58>
   1b5b0:	b672      	cpsid	i
   1b5b2:	e7fe      	b.n	1b5b2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b5b4:	4bbc      	ldr	r3, [pc, #752]	; (1b8a8 <xQueueGenericSend+0x34c>)
   1b5b6:	4798      	blx	r3
   1b5b8:	1e03      	subs	r3, r0, #0
   1b5ba:	d102      	bne.n	1b5c2 <xQueueGenericSend+0x66>
   1b5bc:	687b      	ldr	r3, [r7, #4]
   1b5be:	2b00      	cmp	r3, #0
   1b5c0:	d101      	bne.n	1b5c6 <xQueueGenericSend+0x6a>
   1b5c2:	2301      	movs	r3, #1
   1b5c4:	e000      	b.n	1b5c8 <xQueueGenericSend+0x6c>
   1b5c6:	2300      	movs	r3, #0
   1b5c8:	2b00      	cmp	r3, #0
   1b5ca:	d101      	bne.n	1b5d0 <xQueueGenericSend+0x74>
   1b5cc:	b672      	cpsid	i
   1b5ce:	e7fe      	b.n	1b5ce <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b5d0:	4bb6      	ldr	r3, [pc, #728]	; (1b8ac <xQueueGenericSend+0x350>)
   1b5d2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b5d4:	6a3b      	ldr	r3, [r7, #32]
   1b5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b5d8:	6a3b      	ldr	r3, [r7, #32]
   1b5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b5dc:	429a      	cmp	r2, r3
   1b5de:	d303      	bcc.n	1b5e8 <xQueueGenericSend+0x8c>
   1b5e0:	683b      	ldr	r3, [r7, #0]
   1b5e2:	2b02      	cmp	r3, #2
   1b5e4:	d000      	beq.n	1b5e8 <xQueueGenericSend+0x8c>
   1b5e6:	e08e      	b.n	1b706 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1b5e8:	4bb1      	ldr	r3, [pc, #708]	; (1b8b0 <xQueueGenericSend+0x354>)
   1b5ea:	4798      	blx	r3
   1b5ec:	0003      	movs	r3, r0
   1b5ee:	0018      	movs	r0, r3
   1b5f0:	4bb0      	ldr	r3, [pc, #704]	; (1b8b4 <xQueueGenericSend+0x358>)
   1b5f2:	4798      	blx	r3
   1b5f4:	0003      	movs	r3, r0
   1b5f6:	001a      	movs	r2, r3
   1b5f8:	4baf      	ldr	r3, [pc, #700]	; (1b8b8 <xQueueGenericSend+0x35c>)
   1b5fa:	881b      	ldrh	r3, [r3, #0]
   1b5fc:	4013      	ands	r3, r2
   1b5fe:	b29b      	uxth	r3, r3
   1b600:	2b00      	cmp	r3, #0
   1b602:	d02e      	beq.n	1b662 <xQueueGenericSend+0x106>
   1b604:	6a3b      	ldr	r3, [r7, #32]
   1b606:	0018      	movs	r0, r3
   1b608:	4bac      	ldr	r3, [pc, #688]	; (1b8bc <xQueueGenericSend+0x360>)
   1b60a:	4798      	blx	r3
   1b60c:	0003      	movs	r3, r0
   1b60e:	001a      	movs	r2, r3
   1b610:	4ba9      	ldr	r3, [pc, #676]	; (1b8b8 <xQueueGenericSend+0x35c>)
   1b612:	881b      	ldrh	r3, [r3, #0]
   1b614:	4013      	ands	r3, r2
   1b616:	b29b      	uxth	r3, r3
   1b618:	2b00      	cmp	r3, #0
   1b61a:	d022      	beq.n	1b662 <xQueueGenericSend+0x106>
   1b61c:	683b      	ldr	r3, [r7, #0]
   1b61e:	2b00      	cmp	r3, #0
   1b620:	d10b      	bne.n	1b63a <xQueueGenericSend+0xde>
   1b622:	6a3b      	ldr	r3, [r7, #32]
   1b624:	0018      	movs	r0, r3
   1b626:	4ba6      	ldr	r3, [pc, #664]	; (1b8c0 <xQueueGenericSend+0x364>)
   1b628:	4798      	blx	r3
   1b62a:	0003      	movs	r3, r0
   1b62c:	001a      	movs	r2, r3
   1b62e:	4ba5      	ldr	r3, [pc, #660]	; (1b8c4 <xQueueGenericSend+0x368>)
   1b630:	5c9b      	ldrb	r3, [r3, r2]
   1b632:	3320      	adds	r3, #32
   1b634:	b2db      	uxtb	r3, r3
   1b636:	001d      	movs	r5, r3
   1b638:	e000      	b.n	1b63c <xQueueGenericSend+0xe0>
   1b63a:	2525      	movs	r5, #37	; 0x25
   1b63c:	6a3b      	ldr	r3, [r7, #32]
   1b63e:	0018      	movs	r0, r3
   1b640:	4b9f      	ldr	r3, [pc, #636]	; (1b8c0 <xQueueGenericSend+0x364>)
   1b642:	4798      	blx	r3
   1b644:	0003      	movs	r3, r0
   1b646:	001a      	movs	r2, r3
   1b648:	4b9e      	ldr	r3, [pc, #632]	; (1b8c4 <xQueueGenericSend+0x368>)
   1b64a:	5c9c      	ldrb	r4, [r3, r2]
   1b64c:	6a3b      	ldr	r3, [r7, #32]
   1b64e:	0018      	movs	r0, r3
   1b650:	4b9d      	ldr	r3, [pc, #628]	; (1b8c8 <xQueueGenericSend+0x36c>)
   1b652:	4798      	blx	r3
   1b654:	0003      	movs	r3, r0
   1b656:	b2db      	uxtb	r3, r3
   1b658:	001a      	movs	r2, r3
   1b65a:	0021      	movs	r1, r4
   1b65c:	0028      	movs	r0, r5
   1b65e:	4b9b      	ldr	r3, [pc, #620]	; (1b8cc <xQueueGenericSend+0x370>)
   1b660:	4798      	blx	r3
   1b662:	6a3b      	ldr	r3, [r7, #32]
   1b664:	0018      	movs	r0, r3
   1b666:	4b96      	ldr	r3, [pc, #600]	; (1b8c0 <xQueueGenericSend+0x364>)
   1b668:	4798      	blx	r3
   1b66a:	0003      	movs	r3, r0
   1b66c:	001a      	movs	r2, r3
   1b66e:	4b95      	ldr	r3, [pc, #596]	; (1b8c4 <xQueueGenericSend+0x368>)
   1b670:	5c9c      	ldrb	r4, [r3, r2]
   1b672:	6a3b      	ldr	r3, [r7, #32]
   1b674:	0018      	movs	r0, r3
   1b676:	4b94      	ldr	r3, [pc, #592]	; (1b8c8 <xQueueGenericSend+0x36c>)
   1b678:	4798      	blx	r3
   1b67a:	0003      	movs	r3, r0
   1b67c:	b2dd      	uxtb	r5, r3
   1b67e:	6a3b      	ldr	r3, [r7, #32]
   1b680:	0018      	movs	r0, r3
   1b682:	4b8f      	ldr	r3, [pc, #572]	; (1b8c0 <xQueueGenericSend+0x364>)
   1b684:	4798      	blx	r3
   1b686:	0003      	movs	r3, r0
   1b688:	001a      	movs	r2, r3
   1b68a:	4b8e      	ldr	r3, [pc, #568]	; (1b8c4 <xQueueGenericSend+0x368>)
   1b68c:	5c9b      	ldrb	r3, [r3, r2]
   1b68e:	2b02      	cmp	r3, #2
   1b690:	d005      	beq.n	1b69e <xQueueGenericSend+0x142>
   1b692:	6a3b      	ldr	r3, [r7, #32]
   1b694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b696:	b2db      	uxtb	r3, r3
   1b698:	3301      	adds	r3, #1
   1b69a:	b2db      	uxtb	r3, r3
   1b69c:	e000      	b.n	1b6a0 <xQueueGenericSend+0x144>
   1b69e:	2300      	movs	r3, #0
   1b6a0:	001a      	movs	r2, r3
   1b6a2:	0029      	movs	r1, r5
   1b6a4:	0020      	movs	r0, r4
   1b6a6:	4b8a      	ldr	r3, [pc, #552]	; (1b8d0 <xQueueGenericSend+0x374>)
   1b6a8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b6aa:	683a      	ldr	r2, [r7, #0]
   1b6ac:	68b9      	ldr	r1, [r7, #8]
   1b6ae:	6a3b      	ldr	r3, [r7, #32]
   1b6b0:	0018      	movs	r0, r3
   1b6b2:	4b88      	ldr	r3, [pc, #544]	; (1b8d4 <xQueueGenericSend+0x378>)
   1b6b4:	4798      	blx	r3
   1b6b6:	0003      	movs	r3, r0
   1b6b8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b6ba:	6a3b      	ldr	r3, [r7, #32]
   1b6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b6be:	2b00      	cmp	r3, #0
   1b6c0:	d00a      	beq.n	1b6d8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b6c2:	683a      	ldr	r2, [r7, #0]
   1b6c4:	6a3b      	ldr	r3, [r7, #32]
   1b6c6:	0011      	movs	r1, r2
   1b6c8:	0018      	movs	r0, r3
   1b6ca:	4b83      	ldr	r3, [pc, #524]	; (1b8d8 <xQueueGenericSend+0x37c>)
   1b6cc:	4798      	blx	r3
   1b6ce:	1e03      	subs	r3, r0, #0
   1b6d0:	d015      	beq.n	1b6fe <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1b6d2:	4b82      	ldr	r3, [pc, #520]	; (1b8dc <xQueueGenericSend+0x380>)
   1b6d4:	4798      	blx	r3
   1b6d6:	e012      	b.n	1b6fe <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b6d8:	6a3b      	ldr	r3, [r7, #32]
   1b6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b6dc:	2b00      	cmp	r3, #0
   1b6de:	d009      	beq.n	1b6f4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b6e0:	6a3b      	ldr	r3, [r7, #32]
   1b6e2:	3324      	adds	r3, #36	; 0x24
   1b6e4:	0018      	movs	r0, r3
   1b6e6:	4b7e      	ldr	r3, [pc, #504]	; (1b8e0 <xQueueGenericSend+0x384>)
   1b6e8:	4798      	blx	r3
   1b6ea:	1e03      	subs	r3, r0, #0
   1b6ec:	d007      	beq.n	1b6fe <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1b6ee:	4b7b      	ldr	r3, [pc, #492]	; (1b8dc <xQueueGenericSend+0x380>)
   1b6f0:	4798      	blx	r3
   1b6f2:	e004      	b.n	1b6fe <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1b6f4:	69fb      	ldr	r3, [r7, #28]
   1b6f6:	2b00      	cmp	r3, #0
   1b6f8:	d001      	beq.n	1b6fe <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1b6fa:	4b78      	ldr	r3, [pc, #480]	; (1b8dc <xQueueGenericSend+0x380>)
   1b6fc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1b6fe:	4b79      	ldr	r3, [pc, #484]	; (1b8e4 <xQueueGenericSend+0x388>)
   1b700:	4798      	blx	r3
				return pdPASS;
   1b702:	2301      	movs	r3, #1
   1b704:	e142      	b.n	1b98c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b706:	687b      	ldr	r3, [r7, #4]
   1b708:	2b00      	cmp	r3, #0
   1b70a:	d140      	bne.n	1b78e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b70c:	4b75      	ldr	r3, [pc, #468]	; (1b8e4 <xQueueGenericSend+0x388>)
   1b70e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1b710:	4b67      	ldr	r3, [pc, #412]	; (1b8b0 <xQueueGenericSend+0x354>)
   1b712:	4798      	blx	r3
   1b714:	0003      	movs	r3, r0
   1b716:	0018      	movs	r0, r3
   1b718:	4b66      	ldr	r3, [pc, #408]	; (1b8b4 <xQueueGenericSend+0x358>)
   1b71a:	4798      	blx	r3
   1b71c:	0003      	movs	r3, r0
   1b71e:	001a      	movs	r2, r3
   1b720:	4b65      	ldr	r3, [pc, #404]	; (1b8b8 <xQueueGenericSend+0x35c>)
   1b722:	881b      	ldrh	r3, [r3, #0]
   1b724:	4013      	ands	r3, r2
   1b726:	b29b      	uxth	r3, r3
   1b728:	2b00      	cmp	r3, #0
   1b72a:	d02e      	beq.n	1b78a <xQueueGenericSend+0x22e>
   1b72c:	6a3b      	ldr	r3, [r7, #32]
   1b72e:	0018      	movs	r0, r3
   1b730:	4b62      	ldr	r3, [pc, #392]	; (1b8bc <xQueueGenericSend+0x360>)
   1b732:	4798      	blx	r3
   1b734:	0003      	movs	r3, r0
   1b736:	001a      	movs	r2, r3
   1b738:	4b5f      	ldr	r3, [pc, #380]	; (1b8b8 <xQueueGenericSend+0x35c>)
   1b73a:	881b      	ldrh	r3, [r3, #0]
   1b73c:	4013      	ands	r3, r2
   1b73e:	b29b      	uxth	r3, r3
   1b740:	2b00      	cmp	r3, #0
   1b742:	d022      	beq.n	1b78a <xQueueGenericSend+0x22e>
   1b744:	683b      	ldr	r3, [r7, #0]
   1b746:	2b00      	cmp	r3, #0
   1b748:	d10b      	bne.n	1b762 <xQueueGenericSend+0x206>
   1b74a:	6a3b      	ldr	r3, [r7, #32]
   1b74c:	0018      	movs	r0, r3
   1b74e:	4b5c      	ldr	r3, [pc, #368]	; (1b8c0 <xQueueGenericSend+0x364>)
   1b750:	4798      	blx	r3
   1b752:	0003      	movs	r3, r0
   1b754:	001a      	movs	r2, r3
   1b756:	4b5b      	ldr	r3, [pc, #364]	; (1b8c4 <xQueueGenericSend+0x368>)
   1b758:	5c9b      	ldrb	r3, [r3, r2]
   1b75a:	3348      	adds	r3, #72	; 0x48
   1b75c:	b2db      	uxtb	r3, r3
   1b75e:	001d      	movs	r5, r3
   1b760:	e000      	b.n	1b764 <xQueueGenericSend+0x208>
   1b762:	254d      	movs	r5, #77	; 0x4d
   1b764:	6a3b      	ldr	r3, [r7, #32]
   1b766:	0018      	movs	r0, r3
   1b768:	4b55      	ldr	r3, [pc, #340]	; (1b8c0 <xQueueGenericSend+0x364>)
   1b76a:	4798      	blx	r3
   1b76c:	0003      	movs	r3, r0
   1b76e:	001a      	movs	r2, r3
   1b770:	4b54      	ldr	r3, [pc, #336]	; (1b8c4 <xQueueGenericSend+0x368>)
   1b772:	5c9c      	ldrb	r4, [r3, r2]
   1b774:	6a3b      	ldr	r3, [r7, #32]
   1b776:	0018      	movs	r0, r3
   1b778:	4b53      	ldr	r3, [pc, #332]	; (1b8c8 <xQueueGenericSend+0x36c>)
   1b77a:	4798      	blx	r3
   1b77c:	0003      	movs	r3, r0
   1b77e:	b2db      	uxtb	r3, r3
   1b780:	001a      	movs	r2, r3
   1b782:	0021      	movs	r1, r4
   1b784:	0028      	movs	r0, r5
   1b786:	4b51      	ldr	r3, [pc, #324]	; (1b8cc <xQueueGenericSend+0x370>)
   1b788:	4798      	blx	r3
					return errQUEUE_FULL;
   1b78a:	2300      	movs	r3, #0
   1b78c:	e0fe      	b.n	1b98c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b790:	2b00      	cmp	r3, #0
   1b792:	d106      	bne.n	1b7a2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b794:	2314      	movs	r3, #20
   1b796:	18fb      	adds	r3, r7, r3
   1b798:	0018      	movs	r0, r3
   1b79a:	4b53      	ldr	r3, [pc, #332]	; (1b8e8 <xQueueGenericSend+0x38c>)
   1b79c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b79e:	2301      	movs	r3, #1
   1b7a0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b7a2:	4b50      	ldr	r3, [pc, #320]	; (1b8e4 <xQueueGenericSend+0x388>)
   1b7a4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b7a6:	4b51      	ldr	r3, [pc, #324]	; (1b8ec <xQueueGenericSend+0x390>)
   1b7a8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b7aa:	4b40      	ldr	r3, [pc, #256]	; (1b8ac <xQueueGenericSend+0x350>)
   1b7ac:	4798      	blx	r3
   1b7ae:	6a3b      	ldr	r3, [r7, #32]
   1b7b0:	2244      	movs	r2, #68	; 0x44
   1b7b2:	5c9b      	ldrb	r3, [r3, r2]
   1b7b4:	b25b      	sxtb	r3, r3
   1b7b6:	3301      	adds	r3, #1
   1b7b8:	d103      	bne.n	1b7c2 <xQueueGenericSend+0x266>
   1b7ba:	6a3b      	ldr	r3, [r7, #32]
   1b7bc:	2244      	movs	r2, #68	; 0x44
   1b7be:	2100      	movs	r1, #0
   1b7c0:	5499      	strb	r1, [r3, r2]
   1b7c2:	6a3b      	ldr	r3, [r7, #32]
   1b7c4:	2245      	movs	r2, #69	; 0x45
   1b7c6:	5c9b      	ldrb	r3, [r3, r2]
   1b7c8:	b25b      	sxtb	r3, r3
   1b7ca:	3301      	adds	r3, #1
   1b7cc:	d103      	bne.n	1b7d6 <xQueueGenericSend+0x27a>
   1b7ce:	6a3b      	ldr	r3, [r7, #32]
   1b7d0:	2245      	movs	r2, #69	; 0x45
   1b7d2:	2100      	movs	r1, #0
   1b7d4:	5499      	strb	r1, [r3, r2]
   1b7d6:	4b43      	ldr	r3, [pc, #268]	; (1b8e4 <xQueueGenericSend+0x388>)
   1b7d8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b7da:	1d3a      	adds	r2, r7, #4
   1b7dc:	2314      	movs	r3, #20
   1b7de:	18fb      	adds	r3, r7, r3
   1b7e0:	0011      	movs	r1, r2
   1b7e2:	0018      	movs	r0, r3
   1b7e4:	4b42      	ldr	r3, [pc, #264]	; (1b8f0 <xQueueGenericSend+0x394>)
   1b7e6:	4798      	blx	r3
   1b7e8:	1e03      	subs	r3, r0, #0
   1b7ea:	d000      	beq.n	1b7ee <xQueueGenericSend+0x292>
   1b7ec:	e08a      	b.n	1b904 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b7ee:	6a3b      	ldr	r3, [r7, #32]
   1b7f0:	0018      	movs	r0, r3
   1b7f2:	4b40      	ldr	r3, [pc, #256]	; (1b8f4 <xQueueGenericSend+0x398>)
   1b7f4:	4798      	blx	r3
   1b7f6:	1e03      	subs	r3, r0, #0
   1b7f8:	d04f      	beq.n	1b89a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b7fa:	4b2d      	ldr	r3, [pc, #180]	; (1b8b0 <xQueueGenericSend+0x354>)
   1b7fc:	4798      	blx	r3
   1b7fe:	0003      	movs	r3, r0
   1b800:	0018      	movs	r0, r3
   1b802:	4b2c      	ldr	r3, [pc, #176]	; (1b8b4 <xQueueGenericSend+0x358>)
   1b804:	4798      	blx	r3
   1b806:	0003      	movs	r3, r0
   1b808:	001a      	movs	r2, r3
   1b80a:	4b2b      	ldr	r3, [pc, #172]	; (1b8b8 <xQueueGenericSend+0x35c>)
   1b80c:	881b      	ldrh	r3, [r3, #0]
   1b80e:	4013      	ands	r3, r2
   1b810:	b29b      	uxth	r3, r3
   1b812:	2b00      	cmp	r3, #0
   1b814:	d02e      	beq.n	1b874 <xQueueGenericSend+0x318>
   1b816:	6a3b      	ldr	r3, [r7, #32]
   1b818:	0018      	movs	r0, r3
   1b81a:	4b28      	ldr	r3, [pc, #160]	; (1b8bc <xQueueGenericSend+0x360>)
   1b81c:	4798      	blx	r3
   1b81e:	0003      	movs	r3, r0
   1b820:	001a      	movs	r2, r3
   1b822:	4b25      	ldr	r3, [pc, #148]	; (1b8b8 <xQueueGenericSend+0x35c>)
   1b824:	881b      	ldrh	r3, [r3, #0]
   1b826:	4013      	ands	r3, r2
   1b828:	b29b      	uxth	r3, r3
   1b82a:	2b00      	cmp	r3, #0
   1b82c:	d022      	beq.n	1b874 <xQueueGenericSend+0x318>
   1b82e:	683b      	ldr	r3, [r7, #0]
   1b830:	2b00      	cmp	r3, #0
   1b832:	d10b      	bne.n	1b84c <xQueueGenericSend+0x2f0>
   1b834:	6a3b      	ldr	r3, [r7, #32]
   1b836:	0018      	movs	r0, r3
   1b838:	4b21      	ldr	r3, [pc, #132]	; (1b8c0 <xQueueGenericSend+0x364>)
   1b83a:	4798      	blx	r3
   1b83c:	0003      	movs	r3, r0
   1b83e:	001a      	movs	r2, r3
   1b840:	4b20      	ldr	r3, [pc, #128]	; (1b8c4 <xQueueGenericSend+0x368>)
   1b842:	5c9b      	ldrb	r3, [r3, r2]
   1b844:	3370      	adds	r3, #112	; 0x70
   1b846:	b2db      	uxtb	r3, r3
   1b848:	001d      	movs	r5, r3
   1b84a:	e000      	b.n	1b84e <xQueueGenericSend+0x2f2>
   1b84c:	2575      	movs	r5, #117	; 0x75
   1b84e:	6a3b      	ldr	r3, [r7, #32]
   1b850:	0018      	movs	r0, r3
   1b852:	4b1b      	ldr	r3, [pc, #108]	; (1b8c0 <xQueueGenericSend+0x364>)
   1b854:	4798      	blx	r3
   1b856:	0003      	movs	r3, r0
   1b858:	001a      	movs	r2, r3
   1b85a:	4b1a      	ldr	r3, [pc, #104]	; (1b8c4 <xQueueGenericSend+0x368>)
   1b85c:	5c9c      	ldrb	r4, [r3, r2]
   1b85e:	6a3b      	ldr	r3, [r7, #32]
   1b860:	0018      	movs	r0, r3
   1b862:	4b19      	ldr	r3, [pc, #100]	; (1b8c8 <xQueueGenericSend+0x36c>)
   1b864:	4798      	blx	r3
   1b866:	0003      	movs	r3, r0
   1b868:	b2db      	uxtb	r3, r3
   1b86a:	001a      	movs	r2, r3
   1b86c:	0021      	movs	r1, r4
   1b86e:	0028      	movs	r0, r5
   1b870:	4b16      	ldr	r3, [pc, #88]	; (1b8cc <xQueueGenericSend+0x370>)
   1b872:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b874:	6a3b      	ldr	r3, [r7, #32]
   1b876:	3310      	adds	r3, #16
   1b878:	687a      	ldr	r2, [r7, #4]
   1b87a:	0011      	movs	r1, r2
   1b87c:	0018      	movs	r0, r3
   1b87e:	4b1e      	ldr	r3, [pc, #120]	; (1b8f8 <xQueueGenericSend+0x39c>)
   1b880:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b882:	6a3b      	ldr	r3, [r7, #32]
   1b884:	0018      	movs	r0, r3
   1b886:	4b1d      	ldr	r3, [pc, #116]	; (1b8fc <xQueueGenericSend+0x3a0>)
   1b888:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b88a:	4b1d      	ldr	r3, [pc, #116]	; (1b900 <xQueueGenericSend+0x3a4>)
   1b88c:	4798      	blx	r3
   1b88e:	1e03      	subs	r3, r0, #0
   1b890:	d000      	beq.n	1b894 <xQueueGenericSend+0x338>
   1b892:	e69d      	b.n	1b5d0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b894:	4b11      	ldr	r3, [pc, #68]	; (1b8dc <xQueueGenericSend+0x380>)
   1b896:	4798      	blx	r3
   1b898:	e69a      	b.n	1b5d0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b89a:	6a3b      	ldr	r3, [r7, #32]
   1b89c:	0018      	movs	r0, r3
   1b89e:	4b17      	ldr	r3, [pc, #92]	; (1b8fc <xQueueGenericSend+0x3a0>)
   1b8a0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b8a2:	4b17      	ldr	r3, [pc, #92]	; (1b900 <xQueueGenericSend+0x3a4>)
   1b8a4:	4798      	blx	r3
   1b8a6:	e693      	b.n	1b5d0 <xQueueGenericSend+0x74>
   1b8a8:	0001dce9 	.word	0x0001dce9
   1b8ac:	0001afc9 	.word	0x0001afc9
   1b8b0:	0001925d 	.word	0x0001925d
   1b8b4:	00018fc1 	.word	0x00018fc1
   1b8b8:	20000110 	.word	0x20000110
   1b8bc:	00019081 	.word	0x00019081
   1b8c0:	00018f81 	.word	0x00018f81
   1b8c4:	20000104 	.word	0x20000104
   1b8c8:	00019061 	.word	0x00019061
   1b8cc:	000199b9 	.word	0x000199b9
   1b8d0:	0001a015 	.word	0x0001a015
   1b8d4:	0001c795 	.word	0x0001c795
   1b8d8:	0001ca99 	.word	0x0001ca99
   1b8dc:	0001afb1 	.word	0x0001afb1
   1b8e0:	0001d859 	.word	0x0001d859
   1b8e4:	0001afed 	.word	0x0001afed
   1b8e8:	0001d999 	.word	0x0001d999
   1b8ec:	0001d281 	.word	0x0001d281
   1b8f0:	0001d9c1 	.word	0x0001d9c1
   1b8f4:	0001c9e9 	.word	0x0001c9e9
   1b8f8:	0001d735 	.word	0x0001d735
   1b8fc:	0001c8c5 	.word	0x0001c8c5
   1b900:	0001d299 	.word	0x0001d299
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b904:	6a3b      	ldr	r3, [r7, #32]
   1b906:	0018      	movs	r0, r3
   1b908:	4b22      	ldr	r3, [pc, #136]	; (1b994 <xQueueGenericSend+0x438>)
   1b90a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b90c:	4b22      	ldr	r3, [pc, #136]	; (1b998 <xQueueGenericSend+0x43c>)
   1b90e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b910:	4b22      	ldr	r3, [pc, #136]	; (1b99c <xQueueGenericSend+0x440>)
   1b912:	4798      	blx	r3
   1b914:	0003      	movs	r3, r0
   1b916:	0018      	movs	r0, r3
   1b918:	4b21      	ldr	r3, [pc, #132]	; (1b9a0 <xQueueGenericSend+0x444>)
   1b91a:	4798      	blx	r3
   1b91c:	0003      	movs	r3, r0
   1b91e:	001a      	movs	r2, r3
   1b920:	4b20      	ldr	r3, [pc, #128]	; (1b9a4 <xQueueGenericSend+0x448>)
   1b922:	881b      	ldrh	r3, [r3, #0]
   1b924:	4013      	ands	r3, r2
   1b926:	b29b      	uxth	r3, r3
   1b928:	2b00      	cmp	r3, #0
   1b92a:	d02e      	beq.n	1b98a <xQueueGenericSend+0x42e>
   1b92c:	6a3b      	ldr	r3, [r7, #32]
   1b92e:	0018      	movs	r0, r3
   1b930:	4b1d      	ldr	r3, [pc, #116]	; (1b9a8 <xQueueGenericSend+0x44c>)
   1b932:	4798      	blx	r3
   1b934:	0003      	movs	r3, r0
   1b936:	001a      	movs	r2, r3
   1b938:	4b1a      	ldr	r3, [pc, #104]	; (1b9a4 <xQueueGenericSend+0x448>)
   1b93a:	881b      	ldrh	r3, [r3, #0]
   1b93c:	4013      	ands	r3, r2
   1b93e:	b29b      	uxth	r3, r3
   1b940:	2b00      	cmp	r3, #0
   1b942:	d022      	beq.n	1b98a <xQueueGenericSend+0x42e>
   1b944:	683b      	ldr	r3, [r7, #0]
   1b946:	2b00      	cmp	r3, #0
   1b948:	d10b      	bne.n	1b962 <xQueueGenericSend+0x406>
   1b94a:	6a3b      	ldr	r3, [r7, #32]
   1b94c:	0018      	movs	r0, r3
   1b94e:	4b17      	ldr	r3, [pc, #92]	; (1b9ac <xQueueGenericSend+0x450>)
   1b950:	4798      	blx	r3
   1b952:	0003      	movs	r3, r0
   1b954:	001a      	movs	r2, r3
   1b956:	4b16      	ldr	r3, [pc, #88]	; (1b9b0 <xQueueGenericSend+0x454>)
   1b958:	5c9b      	ldrb	r3, [r3, r2]
   1b95a:	3348      	adds	r3, #72	; 0x48
   1b95c:	b2db      	uxtb	r3, r3
   1b95e:	001d      	movs	r5, r3
   1b960:	e000      	b.n	1b964 <xQueueGenericSend+0x408>
   1b962:	254d      	movs	r5, #77	; 0x4d
   1b964:	6a3b      	ldr	r3, [r7, #32]
   1b966:	0018      	movs	r0, r3
   1b968:	4b10      	ldr	r3, [pc, #64]	; (1b9ac <xQueueGenericSend+0x450>)
   1b96a:	4798      	blx	r3
   1b96c:	0003      	movs	r3, r0
   1b96e:	001a      	movs	r2, r3
   1b970:	4b0f      	ldr	r3, [pc, #60]	; (1b9b0 <xQueueGenericSend+0x454>)
   1b972:	5c9c      	ldrb	r4, [r3, r2]
   1b974:	6a3b      	ldr	r3, [r7, #32]
   1b976:	0018      	movs	r0, r3
   1b978:	4b0e      	ldr	r3, [pc, #56]	; (1b9b4 <xQueueGenericSend+0x458>)
   1b97a:	4798      	blx	r3
   1b97c:	0003      	movs	r3, r0
   1b97e:	b2db      	uxtb	r3, r3
   1b980:	001a      	movs	r2, r3
   1b982:	0021      	movs	r1, r4
   1b984:	0028      	movs	r0, r5
   1b986:	4b0c      	ldr	r3, [pc, #48]	; (1b9b8 <xQueueGenericSend+0x45c>)
   1b988:	4798      	blx	r3
			return errQUEUE_FULL;
   1b98a:	2300      	movs	r3, #0
		}
	}
}
   1b98c:	0018      	movs	r0, r3
   1b98e:	46bd      	mov	sp, r7
   1b990:	b00a      	add	sp, #40	; 0x28
   1b992:	bdb0      	pop	{r4, r5, r7, pc}
   1b994:	0001c8c5 	.word	0x0001c8c5
   1b998:	0001d299 	.word	0x0001d299
   1b99c:	0001925d 	.word	0x0001925d
   1b9a0:	00018fc1 	.word	0x00018fc1
   1b9a4:	20000110 	.word	0x20000110
   1b9a8:	00019081 	.word	0x00019081
   1b9ac:	00018f81 	.word	0x00018f81
   1b9b0:	20000104 	.word	0x20000104
   1b9b4:	00019061 	.word	0x00019061
   1b9b8:	000199b9 	.word	0x000199b9

0001b9bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b9bc:	b5b0      	push	{r4, r5, r7, lr}
   1b9be:	b088      	sub	sp, #32
   1b9c0:	af00      	add	r7, sp, #0
   1b9c2:	60f8      	str	r0, [r7, #12]
   1b9c4:	60b9      	str	r1, [r7, #8]
   1b9c6:	607a      	str	r2, [r7, #4]
   1b9c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b9ca:	68fb      	ldr	r3, [r7, #12]
   1b9cc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b9ce:	69bb      	ldr	r3, [r7, #24]
   1b9d0:	2b00      	cmp	r3, #0
   1b9d2:	d101      	bne.n	1b9d8 <xQueueGenericSendFromISR+0x1c>
   1b9d4:	b672      	cpsid	i
   1b9d6:	e7fe      	b.n	1b9d6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b9d8:	68bb      	ldr	r3, [r7, #8]
   1b9da:	2b00      	cmp	r3, #0
   1b9dc:	d103      	bne.n	1b9e6 <xQueueGenericSendFromISR+0x2a>
   1b9de:	69bb      	ldr	r3, [r7, #24]
   1b9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b9e2:	2b00      	cmp	r3, #0
   1b9e4:	d101      	bne.n	1b9ea <xQueueGenericSendFromISR+0x2e>
   1b9e6:	2301      	movs	r3, #1
   1b9e8:	e000      	b.n	1b9ec <xQueueGenericSendFromISR+0x30>
   1b9ea:	2300      	movs	r3, #0
   1b9ec:	2b00      	cmp	r3, #0
   1b9ee:	d101      	bne.n	1b9f4 <xQueueGenericSendFromISR+0x38>
   1b9f0:	b672      	cpsid	i
   1b9f2:	e7fe      	b.n	1b9f2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b9f4:	683b      	ldr	r3, [r7, #0]
   1b9f6:	2b02      	cmp	r3, #2
   1b9f8:	d103      	bne.n	1ba02 <xQueueGenericSendFromISR+0x46>
   1b9fa:	69bb      	ldr	r3, [r7, #24]
   1b9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b9fe:	2b01      	cmp	r3, #1
   1ba00:	d101      	bne.n	1ba06 <xQueueGenericSendFromISR+0x4a>
   1ba02:	2301      	movs	r3, #1
   1ba04:	e000      	b.n	1ba08 <xQueueGenericSendFromISR+0x4c>
   1ba06:	2300      	movs	r3, #0
   1ba08:	2b00      	cmp	r3, #0
   1ba0a:	d101      	bne.n	1ba10 <xQueueGenericSendFromISR+0x54>
   1ba0c:	b672      	cpsid	i
   1ba0e:	e7fe      	b.n	1ba0e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ba10:	4b68      	ldr	r3, [pc, #416]	; (1bbb4 <xQueueGenericSendFromISR+0x1f8>)
   1ba12:	4798      	blx	r3
   1ba14:	0003      	movs	r3, r0
   1ba16:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ba18:	69bb      	ldr	r3, [r7, #24]
   1ba1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ba1c:	69bb      	ldr	r3, [r7, #24]
   1ba1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ba20:	429a      	cmp	r2, r3
   1ba22:	d303      	bcc.n	1ba2c <xQueueGenericSendFromISR+0x70>
   1ba24:	683b      	ldr	r3, [r7, #0]
   1ba26:	2b02      	cmp	r3, #2
   1ba28:	d000      	beq.n	1ba2c <xQueueGenericSendFromISR+0x70>
   1ba2a:	e088      	b.n	1bb3e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1ba2c:	2313      	movs	r3, #19
   1ba2e:	18fb      	adds	r3, r7, r3
   1ba30:	69ba      	ldr	r2, [r7, #24]
   1ba32:	2145      	movs	r1, #69	; 0x45
   1ba34:	5c52      	ldrb	r2, [r2, r1]
   1ba36:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1ba38:	69bb      	ldr	r3, [r7, #24]
   1ba3a:	0018      	movs	r0, r3
   1ba3c:	4b5e      	ldr	r3, [pc, #376]	; (1bbb8 <xQueueGenericSendFromISR+0x1fc>)
   1ba3e:	4798      	blx	r3
   1ba40:	0003      	movs	r3, r0
   1ba42:	001a      	movs	r2, r3
   1ba44:	4b5d      	ldr	r3, [pc, #372]	; (1bbbc <xQueueGenericSendFromISR+0x200>)
   1ba46:	881b      	ldrh	r3, [r3, #0]
   1ba48:	4013      	ands	r3, r2
   1ba4a:	b29b      	uxth	r3, r3
   1ba4c:	2b00      	cmp	r3, #0
   1ba4e:	d022      	beq.n	1ba96 <xQueueGenericSendFromISR+0xda>
   1ba50:	683b      	ldr	r3, [r7, #0]
   1ba52:	2b00      	cmp	r3, #0
   1ba54:	d10b      	bne.n	1ba6e <xQueueGenericSendFromISR+0xb2>
   1ba56:	69bb      	ldr	r3, [r7, #24]
   1ba58:	0018      	movs	r0, r3
   1ba5a:	4b59      	ldr	r3, [pc, #356]	; (1bbc0 <xQueueGenericSendFromISR+0x204>)
   1ba5c:	4798      	blx	r3
   1ba5e:	0003      	movs	r3, r0
   1ba60:	001a      	movs	r2, r3
   1ba62:	4b58      	ldr	r3, [pc, #352]	; (1bbc4 <xQueueGenericSendFromISR+0x208>)
   1ba64:	5c9b      	ldrb	r3, [r3, r2]
   1ba66:	3330      	adds	r3, #48	; 0x30
   1ba68:	b2db      	uxtb	r3, r3
   1ba6a:	001d      	movs	r5, r3
   1ba6c:	e000      	b.n	1ba70 <xQueueGenericSendFromISR+0xb4>
   1ba6e:	2535      	movs	r5, #53	; 0x35
   1ba70:	69bb      	ldr	r3, [r7, #24]
   1ba72:	0018      	movs	r0, r3
   1ba74:	4b52      	ldr	r3, [pc, #328]	; (1bbc0 <xQueueGenericSendFromISR+0x204>)
   1ba76:	4798      	blx	r3
   1ba78:	0003      	movs	r3, r0
   1ba7a:	001a      	movs	r2, r3
   1ba7c:	4b51      	ldr	r3, [pc, #324]	; (1bbc4 <xQueueGenericSendFromISR+0x208>)
   1ba7e:	5c9c      	ldrb	r4, [r3, r2]
   1ba80:	69bb      	ldr	r3, [r7, #24]
   1ba82:	0018      	movs	r0, r3
   1ba84:	4b50      	ldr	r3, [pc, #320]	; (1bbc8 <xQueueGenericSendFromISR+0x20c>)
   1ba86:	4798      	blx	r3
   1ba88:	0003      	movs	r3, r0
   1ba8a:	b2db      	uxtb	r3, r3
   1ba8c:	001a      	movs	r2, r3
   1ba8e:	0021      	movs	r1, r4
   1ba90:	0028      	movs	r0, r5
   1ba92:	4b4e      	ldr	r3, [pc, #312]	; (1bbcc <xQueueGenericSendFromISR+0x210>)
   1ba94:	4798      	blx	r3
   1ba96:	69bb      	ldr	r3, [r7, #24]
   1ba98:	0018      	movs	r0, r3
   1ba9a:	4b49      	ldr	r3, [pc, #292]	; (1bbc0 <xQueueGenericSendFromISR+0x204>)
   1ba9c:	4798      	blx	r3
   1ba9e:	0003      	movs	r3, r0
   1baa0:	001a      	movs	r2, r3
   1baa2:	4b48      	ldr	r3, [pc, #288]	; (1bbc4 <xQueueGenericSendFromISR+0x208>)
   1baa4:	5c9c      	ldrb	r4, [r3, r2]
   1baa6:	69bb      	ldr	r3, [r7, #24]
   1baa8:	0018      	movs	r0, r3
   1baaa:	4b47      	ldr	r3, [pc, #284]	; (1bbc8 <xQueueGenericSendFromISR+0x20c>)
   1baac:	4798      	blx	r3
   1baae:	0003      	movs	r3, r0
   1bab0:	b2d9      	uxtb	r1, r3
   1bab2:	69bb      	ldr	r3, [r7, #24]
   1bab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bab6:	b2db      	uxtb	r3, r3
   1bab8:	3301      	adds	r3, #1
   1baba:	b2db      	uxtb	r3, r3
   1babc:	001a      	movs	r2, r3
   1babe:	0020      	movs	r0, r4
   1bac0:	4b43      	ldr	r3, [pc, #268]	; (1bbd0 <xQueueGenericSendFromISR+0x214>)
   1bac2:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1bac4:	683a      	ldr	r2, [r7, #0]
   1bac6:	68b9      	ldr	r1, [r7, #8]
   1bac8:	69bb      	ldr	r3, [r7, #24]
   1baca:	0018      	movs	r0, r3
   1bacc:	4b41      	ldr	r3, [pc, #260]	; (1bbd4 <xQueueGenericSendFromISR+0x218>)
   1bace:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1bad0:	2313      	movs	r3, #19
   1bad2:	18fb      	adds	r3, r7, r3
   1bad4:	781b      	ldrb	r3, [r3, #0]
   1bad6:	b25b      	sxtb	r3, r3
   1bad8:	3301      	adds	r3, #1
   1bada:	d124      	bne.n	1bb26 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1badc:	69bb      	ldr	r3, [r7, #24]
   1bade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bae0:	2b00      	cmp	r3, #0
   1bae2:	d00e      	beq.n	1bb02 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1bae4:	683a      	ldr	r2, [r7, #0]
   1bae6:	69bb      	ldr	r3, [r7, #24]
   1bae8:	0011      	movs	r1, r2
   1baea:	0018      	movs	r0, r3
   1baec:	4b3a      	ldr	r3, [pc, #232]	; (1bbd8 <xQueueGenericSendFromISR+0x21c>)
   1baee:	4798      	blx	r3
   1baf0:	1e03      	subs	r3, r0, #0
   1baf2:	d021      	beq.n	1bb38 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1baf4:	687b      	ldr	r3, [r7, #4]
   1baf6:	2b00      	cmp	r3, #0
   1baf8:	d01e      	beq.n	1bb38 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1bafa:	687b      	ldr	r3, [r7, #4]
   1bafc:	2201      	movs	r2, #1
   1bafe:	601a      	str	r2, [r3, #0]
   1bb00:	e01a      	b.n	1bb38 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bb02:	69bb      	ldr	r3, [r7, #24]
   1bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bb06:	2b00      	cmp	r3, #0
   1bb08:	d016      	beq.n	1bb38 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bb0a:	69bb      	ldr	r3, [r7, #24]
   1bb0c:	3324      	adds	r3, #36	; 0x24
   1bb0e:	0018      	movs	r0, r3
   1bb10:	4b32      	ldr	r3, [pc, #200]	; (1bbdc <xQueueGenericSendFromISR+0x220>)
   1bb12:	4798      	blx	r3
   1bb14:	1e03      	subs	r3, r0, #0
   1bb16:	d00f      	beq.n	1bb38 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1bb18:	687b      	ldr	r3, [r7, #4]
   1bb1a:	2b00      	cmp	r3, #0
   1bb1c:	d00c      	beq.n	1bb38 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1bb1e:	687b      	ldr	r3, [r7, #4]
   1bb20:	2201      	movs	r2, #1
   1bb22:	601a      	str	r2, [r3, #0]
   1bb24:	e008      	b.n	1bb38 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bb26:	2313      	movs	r3, #19
   1bb28:	18fb      	adds	r3, r7, r3
   1bb2a:	781b      	ldrb	r3, [r3, #0]
   1bb2c:	3301      	adds	r3, #1
   1bb2e:	b2db      	uxtb	r3, r3
   1bb30:	b259      	sxtb	r1, r3
   1bb32:	69bb      	ldr	r3, [r7, #24]
   1bb34:	2245      	movs	r2, #69	; 0x45
   1bb36:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1bb38:	2301      	movs	r3, #1
   1bb3a:	61fb      	str	r3, [r7, #28]
		{
   1bb3c:	e030      	b.n	1bba0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1bb3e:	69bb      	ldr	r3, [r7, #24]
   1bb40:	0018      	movs	r0, r3
   1bb42:	4b1d      	ldr	r3, [pc, #116]	; (1bbb8 <xQueueGenericSendFromISR+0x1fc>)
   1bb44:	4798      	blx	r3
   1bb46:	0003      	movs	r3, r0
   1bb48:	001a      	movs	r2, r3
   1bb4a:	4b1c      	ldr	r3, [pc, #112]	; (1bbbc <xQueueGenericSendFromISR+0x200>)
   1bb4c:	881b      	ldrh	r3, [r3, #0]
   1bb4e:	4013      	ands	r3, r2
   1bb50:	b29b      	uxth	r3, r3
   1bb52:	2b00      	cmp	r3, #0
   1bb54:	d022      	beq.n	1bb9c <xQueueGenericSendFromISR+0x1e0>
   1bb56:	683b      	ldr	r3, [r7, #0]
   1bb58:	2b00      	cmp	r3, #0
   1bb5a:	d10b      	bne.n	1bb74 <xQueueGenericSendFromISR+0x1b8>
   1bb5c:	69bb      	ldr	r3, [r7, #24]
   1bb5e:	0018      	movs	r0, r3
   1bb60:	4b17      	ldr	r3, [pc, #92]	; (1bbc0 <xQueueGenericSendFromISR+0x204>)
   1bb62:	4798      	blx	r3
   1bb64:	0003      	movs	r3, r0
   1bb66:	001a      	movs	r2, r3
   1bb68:	4b16      	ldr	r3, [pc, #88]	; (1bbc4 <xQueueGenericSendFromISR+0x208>)
   1bb6a:	5c9b      	ldrb	r3, [r3, r2]
   1bb6c:	3358      	adds	r3, #88	; 0x58
   1bb6e:	b2db      	uxtb	r3, r3
   1bb70:	001d      	movs	r5, r3
   1bb72:	e000      	b.n	1bb76 <xQueueGenericSendFromISR+0x1ba>
   1bb74:	255d      	movs	r5, #93	; 0x5d
   1bb76:	69bb      	ldr	r3, [r7, #24]
   1bb78:	0018      	movs	r0, r3
   1bb7a:	4b11      	ldr	r3, [pc, #68]	; (1bbc0 <xQueueGenericSendFromISR+0x204>)
   1bb7c:	4798      	blx	r3
   1bb7e:	0003      	movs	r3, r0
   1bb80:	001a      	movs	r2, r3
   1bb82:	4b10      	ldr	r3, [pc, #64]	; (1bbc4 <xQueueGenericSendFromISR+0x208>)
   1bb84:	5c9c      	ldrb	r4, [r3, r2]
   1bb86:	69bb      	ldr	r3, [r7, #24]
   1bb88:	0018      	movs	r0, r3
   1bb8a:	4b0f      	ldr	r3, [pc, #60]	; (1bbc8 <xQueueGenericSendFromISR+0x20c>)
   1bb8c:	4798      	blx	r3
   1bb8e:	0003      	movs	r3, r0
   1bb90:	b2db      	uxtb	r3, r3
   1bb92:	001a      	movs	r2, r3
   1bb94:	0021      	movs	r1, r4
   1bb96:	0028      	movs	r0, r5
   1bb98:	4b0c      	ldr	r3, [pc, #48]	; (1bbcc <xQueueGenericSendFromISR+0x210>)
   1bb9a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1bb9c:	2300      	movs	r3, #0
   1bb9e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1bba0:	697b      	ldr	r3, [r7, #20]
   1bba2:	0018      	movs	r0, r3
   1bba4:	4b0e      	ldr	r3, [pc, #56]	; (1bbe0 <xQueueGenericSendFromISR+0x224>)
   1bba6:	4798      	blx	r3

	return xReturn;
   1bba8:	69fb      	ldr	r3, [r7, #28]
}
   1bbaa:	0018      	movs	r0, r3
   1bbac:	46bd      	mov	sp, r7
   1bbae:	b008      	add	sp, #32
   1bbb0:	bdb0      	pop	{r4, r5, r7, pc}
   1bbb2:	46c0      	nop			; (mov r8, r8)
   1bbb4:	0001b01d 	.word	0x0001b01d
   1bbb8:	00019081 	.word	0x00019081
   1bbbc:	20000110 	.word	0x20000110
   1bbc0:	00018f81 	.word	0x00018f81
   1bbc4:	20000104 	.word	0x20000104
   1bbc8:	00019061 	.word	0x00019061
   1bbcc:	000199b9 	.word	0x000199b9
   1bbd0:	0001a015 	.word	0x0001a015
   1bbd4:	0001c795 	.word	0x0001c795
   1bbd8:	0001ca99 	.word	0x0001ca99
   1bbdc:	0001d859 	.word	0x0001d859
   1bbe0:	0001b029 	.word	0x0001b029

0001bbe4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1bbe4:	b580      	push	{r7, lr}
   1bbe6:	b082      	sub	sp, #8
   1bbe8:	af00      	add	r7, sp, #0
   1bbea:	6078      	str	r0, [r7, #4]
   1bbec:	6039      	str	r1, [r7, #0]
   1bbee:	6839      	ldr	r1, [r7, #0]
   1bbf0:	687b      	ldr	r3, [r7, #4]
   1bbf2:	2200      	movs	r2, #0
   1bbf4:	0018      	movs	r0, r3
   1bbf6:	4b03      	ldr	r3, [pc, #12]	; (1bc04 <xQueueGiveFromISR+0x20>)
   1bbf8:	4798      	blx	r3
   1bbfa:	0003      	movs	r3, r0
   1bbfc:	0018      	movs	r0, r3
   1bbfe:	46bd      	mov	sp, r7
   1bc00:	b002      	add	sp, #8
   1bc02:	bd80      	pop	{r7, pc}
   1bc04:	0001bc09 	.word	0x0001bc09

0001bc08 <MyWrapper>:
{
   1bc08:	b5b0      	push	{r4, r5, r7, lr}
   1bc0a:	b08a      	sub	sp, #40	; 0x28
   1bc0c:	af00      	add	r7, sp, #0
   1bc0e:	60f8      	str	r0, [r7, #12]
   1bc10:	60b9      	str	r1, [r7, #8]
   1bc12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bc14:	68fb      	ldr	r3, [r7, #12]
   1bc16:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1bc18:	6a3b      	ldr	r3, [r7, #32]
   1bc1a:	2b00      	cmp	r3, #0
   1bc1c:	d101      	bne.n	1bc22 <MyWrapper+0x1a>
   1bc1e:	b672      	cpsid	i
   1bc20:	e7fe      	b.n	1bc20 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1bc22:	6a3b      	ldr	r3, [r7, #32]
   1bc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bc26:	2b00      	cmp	r3, #0
   1bc28:	d001      	beq.n	1bc2e <MyWrapper+0x26>
   1bc2a:	b672      	cpsid	i
   1bc2c:	e7fe      	b.n	1bc2c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1bc2e:	6a3b      	ldr	r3, [r7, #32]
   1bc30:	681b      	ldr	r3, [r3, #0]
   1bc32:	2b00      	cmp	r3, #0
   1bc34:	d103      	bne.n	1bc3e <MyWrapper+0x36>
   1bc36:	6a3b      	ldr	r3, [r7, #32]
   1bc38:	685b      	ldr	r3, [r3, #4]
   1bc3a:	2b00      	cmp	r3, #0
   1bc3c:	d101      	bne.n	1bc42 <MyWrapper+0x3a>
   1bc3e:	2301      	movs	r3, #1
   1bc40:	e000      	b.n	1bc44 <MyWrapper+0x3c>
   1bc42:	2300      	movs	r3, #0
   1bc44:	2b00      	cmp	r3, #0
   1bc46:	d101      	bne.n	1bc4c <MyWrapper+0x44>
   1bc48:	b672      	cpsid	i
   1bc4a:	e7fe      	b.n	1bc4a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1bc4c:	4b66      	ldr	r3, [pc, #408]	; (1bde8 <MyWrapper+0x1e0>)
   1bc4e:	4798      	blx	r3
   1bc50:	0003      	movs	r3, r0
   1bc52:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bc54:	6a3b      	ldr	r3, [r7, #32]
   1bc56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc58:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1bc5a:	6a3b      	ldr	r3, [r7, #32]
   1bc5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1bc5e:	69bb      	ldr	r3, [r7, #24]
   1bc60:	429a      	cmp	r2, r3
   1bc62:	d800      	bhi.n	1bc66 <MyWrapper+0x5e>
   1bc64:	e085      	b.n	1bd72 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1bc66:	2317      	movs	r3, #23
   1bc68:	18fb      	adds	r3, r7, r3
   1bc6a:	6a3a      	ldr	r2, [r7, #32]
   1bc6c:	2145      	movs	r1, #69	; 0x45
   1bc6e:	5c52      	ldrb	r2, [r2, r1]
   1bc70:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1bc72:	6a3b      	ldr	r3, [r7, #32]
   1bc74:	0018      	movs	r0, r3
   1bc76:	4b5d      	ldr	r3, [pc, #372]	; (1bdec <MyWrapper+0x1e4>)
   1bc78:	4798      	blx	r3
   1bc7a:	0003      	movs	r3, r0
   1bc7c:	001a      	movs	r2, r3
   1bc7e:	4b5c      	ldr	r3, [pc, #368]	; (1bdf0 <MyWrapper+0x1e8>)
   1bc80:	881b      	ldrh	r3, [r3, #0]
   1bc82:	4013      	ands	r3, r2
   1bc84:	b29b      	uxth	r3, r3
   1bc86:	2b00      	cmp	r3, #0
   1bc88:	d022      	beq.n	1bcd0 <MyWrapper+0xc8>
   1bc8a:	687b      	ldr	r3, [r7, #4]
   1bc8c:	2b00      	cmp	r3, #0
   1bc8e:	d10b      	bne.n	1bca8 <MyWrapper+0xa0>
   1bc90:	6a3b      	ldr	r3, [r7, #32]
   1bc92:	0018      	movs	r0, r3
   1bc94:	4b57      	ldr	r3, [pc, #348]	; (1bdf4 <MyWrapper+0x1ec>)
   1bc96:	4798      	blx	r3
   1bc98:	0003      	movs	r3, r0
   1bc9a:	001a      	movs	r2, r3
   1bc9c:	4b56      	ldr	r3, [pc, #344]	; (1bdf8 <MyWrapper+0x1f0>)
   1bc9e:	5c9b      	ldrb	r3, [r3, r2]
   1bca0:	3330      	adds	r3, #48	; 0x30
   1bca2:	b2db      	uxtb	r3, r3
   1bca4:	001d      	movs	r5, r3
   1bca6:	e000      	b.n	1bcaa <MyWrapper+0xa2>
   1bca8:	2535      	movs	r5, #53	; 0x35
   1bcaa:	6a3b      	ldr	r3, [r7, #32]
   1bcac:	0018      	movs	r0, r3
   1bcae:	4b51      	ldr	r3, [pc, #324]	; (1bdf4 <MyWrapper+0x1ec>)
   1bcb0:	4798      	blx	r3
   1bcb2:	0003      	movs	r3, r0
   1bcb4:	001a      	movs	r2, r3
   1bcb6:	4b50      	ldr	r3, [pc, #320]	; (1bdf8 <MyWrapper+0x1f0>)
   1bcb8:	5c9c      	ldrb	r4, [r3, r2]
   1bcba:	6a3b      	ldr	r3, [r7, #32]
   1bcbc:	0018      	movs	r0, r3
   1bcbe:	4b4f      	ldr	r3, [pc, #316]	; (1bdfc <MyWrapper+0x1f4>)
   1bcc0:	4798      	blx	r3
   1bcc2:	0003      	movs	r3, r0
   1bcc4:	b2db      	uxtb	r3, r3
   1bcc6:	001a      	movs	r2, r3
   1bcc8:	0021      	movs	r1, r4
   1bcca:	0028      	movs	r0, r5
   1bccc:	4b4c      	ldr	r3, [pc, #304]	; (1be00 <MyWrapper+0x1f8>)
   1bcce:	4798      	blx	r3
   1bcd0:	6a3b      	ldr	r3, [r7, #32]
   1bcd2:	0018      	movs	r0, r3
   1bcd4:	4b47      	ldr	r3, [pc, #284]	; (1bdf4 <MyWrapper+0x1ec>)
   1bcd6:	4798      	blx	r3
   1bcd8:	0003      	movs	r3, r0
   1bcda:	001a      	movs	r2, r3
   1bcdc:	4b46      	ldr	r3, [pc, #280]	; (1bdf8 <MyWrapper+0x1f0>)
   1bcde:	5c9c      	ldrb	r4, [r3, r2]
   1bce0:	6a3b      	ldr	r3, [r7, #32]
   1bce2:	0018      	movs	r0, r3
   1bce4:	4b45      	ldr	r3, [pc, #276]	; (1bdfc <MyWrapper+0x1f4>)
   1bce6:	4798      	blx	r3
   1bce8:	0003      	movs	r3, r0
   1bcea:	b2d9      	uxtb	r1, r3
   1bcec:	6a3b      	ldr	r3, [r7, #32]
   1bcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bcf0:	b2db      	uxtb	r3, r3
   1bcf2:	3301      	adds	r3, #1
   1bcf4:	b2db      	uxtb	r3, r3
   1bcf6:	001a      	movs	r2, r3
   1bcf8:	0020      	movs	r0, r4
   1bcfa:	4b42      	ldr	r3, [pc, #264]	; (1be04 <MyWrapper+0x1fc>)
   1bcfc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1bcfe:	69bb      	ldr	r3, [r7, #24]
   1bd00:	1c5a      	adds	r2, r3, #1
   1bd02:	6a3b      	ldr	r3, [r7, #32]
   1bd04:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1bd06:	2317      	movs	r3, #23
   1bd08:	18fb      	adds	r3, r7, r3
   1bd0a:	781b      	ldrb	r3, [r3, #0]
   1bd0c:	b25b      	sxtb	r3, r3
   1bd0e:	3301      	adds	r3, #1
   1bd10:	d123      	bne.n	1bd5a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1bd12:	6a3b      	ldr	r3, [r7, #32]
   1bd14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	d00d      	beq.n	1bd36 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1bd1a:	6a3b      	ldr	r3, [r7, #32]
   1bd1c:	2100      	movs	r1, #0
   1bd1e:	0018      	movs	r0, r3
   1bd20:	4b39      	ldr	r3, [pc, #228]	; (1be08 <MyWrapper+0x200>)
   1bd22:	4798      	blx	r3
   1bd24:	1e03      	subs	r3, r0, #0
   1bd26:	d021      	beq.n	1bd6c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1bd28:	68bb      	ldr	r3, [r7, #8]
   1bd2a:	2b00      	cmp	r3, #0
   1bd2c:	d01e      	beq.n	1bd6c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1bd2e:	68bb      	ldr	r3, [r7, #8]
   1bd30:	2201      	movs	r2, #1
   1bd32:	601a      	str	r2, [r3, #0]
   1bd34:	e01a      	b.n	1bd6c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bd36:	6a3b      	ldr	r3, [r7, #32]
   1bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bd3a:	2b00      	cmp	r3, #0
   1bd3c:	d016      	beq.n	1bd6c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bd3e:	6a3b      	ldr	r3, [r7, #32]
   1bd40:	3324      	adds	r3, #36	; 0x24
   1bd42:	0018      	movs	r0, r3
   1bd44:	4b31      	ldr	r3, [pc, #196]	; (1be0c <MyWrapper+0x204>)
   1bd46:	4798      	blx	r3
   1bd48:	1e03      	subs	r3, r0, #0
   1bd4a:	d00f      	beq.n	1bd6c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1bd4c:	68bb      	ldr	r3, [r7, #8]
   1bd4e:	2b00      	cmp	r3, #0
   1bd50:	d00c      	beq.n	1bd6c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1bd52:	68bb      	ldr	r3, [r7, #8]
   1bd54:	2201      	movs	r2, #1
   1bd56:	601a      	str	r2, [r3, #0]
   1bd58:	e008      	b.n	1bd6c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bd5a:	2317      	movs	r3, #23
   1bd5c:	18fb      	adds	r3, r7, r3
   1bd5e:	781b      	ldrb	r3, [r3, #0]
   1bd60:	3301      	adds	r3, #1
   1bd62:	b2db      	uxtb	r3, r3
   1bd64:	b259      	sxtb	r1, r3
   1bd66:	6a3b      	ldr	r3, [r7, #32]
   1bd68:	2245      	movs	r2, #69	; 0x45
   1bd6a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1bd6c:	2301      	movs	r3, #1
   1bd6e:	627b      	str	r3, [r7, #36]	; 0x24
   1bd70:	e030      	b.n	1bdd4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1bd72:	6a3b      	ldr	r3, [r7, #32]
   1bd74:	0018      	movs	r0, r3
   1bd76:	4b1d      	ldr	r3, [pc, #116]	; (1bdec <MyWrapper+0x1e4>)
   1bd78:	4798      	blx	r3
   1bd7a:	0003      	movs	r3, r0
   1bd7c:	001a      	movs	r2, r3
   1bd7e:	4b1c      	ldr	r3, [pc, #112]	; (1bdf0 <MyWrapper+0x1e8>)
   1bd80:	881b      	ldrh	r3, [r3, #0]
   1bd82:	4013      	ands	r3, r2
   1bd84:	b29b      	uxth	r3, r3
   1bd86:	2b00      	cmp	r3, #0
   1bd88:	d022      	beq.n	1bdd0 <MyWrapper+0x1c8>
   1bd8a:	687b      	ldr	r3, [r7, #4]
   1bd8c:	2b00      	cmp	r3, #0
   1bd8e:	d10b      	bne.n	1bda8 <MyWrapper+0x1a0>
   1bd90:	6a3b      	ldr	r3, [r7, #32]
   1bd92:	0018      	movs	r0, r3
   1bd94:	4b17      	ldr	r3, [pc, #92]	; (1bdf4 <MyWrapper+0x1ec>)
   1bd96:	4798      	blx	r3
   1bd98:	0003      	movs	r3, r0
   1bd9a:	001a      	movs	r2, r3
   1bd9c:	4b16      	ldr	r3, [pc, #88]	; (1bdf8 <MyWrapper+0x1f0>)
   1bd9e:	5c9b      	ldrb	r3, [r3, r2]
   1bda0:	3358      	adds	r3, #88	; 0x58
   1bda2:	b2db      	uxtb	r3, r3
   1bda4:	001d      	movs	r5, r3
   1bda6:	e000      	b.n	1bdaa <MyWrapper+0x1a2>
   1bda8:	255d      	movs	r5, #93	; 0x5d
   1bdaa:	6a3b      	ldr	r3, [r7, #32]
   1bdac:	0018      	movs	r0, r3
   1bdae:	4b11      	ldr	r3, [pc, #68]	; (1bdf4 <MyWrapper+0x1ec>)
   1bdb0:	4798      	blx	r3
   1bdb2:	0003      	movs	r3, r0
   1bdb4:	001a      	movs	r2, r3
   1bdb6:	4b10      	ldr	r3, [pc, #64]	; (1bdf8 <MyWrapper+0x1f0>)
   1bdb8:	5c9c      	ldrb	r4, [r3, r2]
   1bdba:	6a3b      	ldr	r3, [r7, #32]
   1bdbc:	0018      	movs	r0, r3
   1bdbe:	4b0f      	ldr	r3, [pc, #60]	; (1bdfc <MyWrapper+0x1f4>)
   1bdc0:	4798      	blx	r3
   1bdc2:	0003      	movs	r3, r0
   1bdc4:	b2db      	uxtb	r3, r3
   1bdc6:	001a      	movs	r2, r3
   1bdc8:	0021      	movs	r1, r4
   1bdca:	0028      	movs	r0, r5
   1bdcc:	4b0c      	ldr	r3, [pc, #48]	; (1be00 <MyWrapper+0x1f8>)
   1bdce:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1bdd0:	2300      	movs	r3, #0
   1bdd2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1bdd4:	69fb      	ldr	r3, [r7, #28]
   1bdd6:	0018      	movs	r0, r3
   1bdd8:	4b0d      	ldr	r3, [pc, #52]	; (1be10 <MyWrapper+0x208>)
   1bdda:	4798      	blx	r3

	return xReturn;
   1bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bdde:	0018      	movs	r0, r3
   1bde0:	46bd      	mov	sp, r7
   1bde2:	b00a      	add	sp, #40	; 0x28
   1bde4:	bdb0      	pop	{r4, r5, r7, pc}
   1bde6:	46c0      	nop			; (mov r8, r8)
   1bde8:	0001b01d 	.word	0x0001b01d
   1bdec:	00019081 	.word	0x00019081
   1bdf0:	20000110 	.word	0x20000110
   1bdf4:	00018f81 	.word	0x00018f81
   1bdf8:	20000104 	.word	0x20000104
   1bdfc:	00019061 	.word	0x00019061
   1be00:	000199b9 	.word	0x000199b9
   1be04:	0001a015 	.word	0x0001a015
   1be08:	0001ca99 	.word	0x0001ca99
   1be0c:	0001d859 	.word	0x0001d859
   1be10:	0001b029 	.word	0x0001b029

0001be14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1be14:	b5b0      	push	{r4, r5, r7, lr}
   1be16:	b08a      	sub	sp, #40	; 0x28
   1be18:	af00      	add	r7, sp, #0
   1be1a:	60f8      	str	r0, [r7, #12]
   1be1c:	60b9      	str	r1, [r7, #8]
   1be1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1be20:	2300      	movs	r3, #0
   1be22:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1be24:	68fb      	ldr	r3, [r7, #12]
   1be26:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1be28:	6a3b      	ldr	r3, [r7, #32]
   1be2a:	2b00      	cmp	r3, #0
   1be2c:	d101      	bne.n	1be32 <xQueueReceive+0x1e>
   1be2e:	b672      	cpsid	i
   1be30:	e7fe      	b.n	1be30 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1be32:	68bb      	ldr	r3, [r7, #8]
   1be34:	2b00      	cmp	r3, #0
   1be36:	d103      	bne.n	1be40 <xQueueReceive+0x2c>
   1be38:	6a3b      	ldr	r3, [r7, #32]
   1be3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1be3c:	2b00      	cmp	r3, #0
   1be3e:	d101      	bne.n	1be44 <xQueueReceive+0x30>
   1be40:	2301      	movs	r3, #1
   1be42:	e000      	b.n	1be46 <xQueueReceive+0x32>
   1be44:	2300      	movs	r3, #0
   1be46:	2b00      	cmp	r3, #0
   1be48:	d101      	bne.n	1be4e <xQueueReceive+0x3a>
   1be4a:	b672      	cpsid	i
   1be4c:	e7fe      	b.n	1be4c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1be4e:	4bbf      	ldr	r3, [pc, #764]	; (1c14c <xQueueReceive+0x338>)
   1be50:	4798      	blx	r3
   1be52:	1e03      	subs	r3, r0, #0
   1be54:	d102      	bne.n	1be5c <xQueueReceive+0x48>
   1be56:	687b      	ldr	r3, [r7, #4]
   1be58:	2b00      	cmp	r3, #0
   1be5a:	d101      	bne.n	1be60 <xQueueReceive+0x4c>
   1be5c:	2301      	movs	r3, #1
   1be5e:	e000      	b.n	1be62 <xQueueReceive+0x4e>
   1be60:	2300      	movs	r3, #0
   1be62:	2b00      	cmp	r3, #0
   1be64:	d101      	bne.n	1be6a <xQueueReceive+0x56>
   1be66:	b672      	cpsid	i
   1be68:	e7fe      	b.n	1be68 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1be6a:	4bb9      	ldr	r3, [pc, #740]	; (1c150 <xQueueReceive+0x33c>)
   1be6c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1be6e:	6a3b      	ldr	r3, [r7, #32]
   1be70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1be72:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1be74:	69fb      	ldr	r3, [r7, #28]
   1be76:	2b00      	cmp	r3, #0
   1be78:	d100      	bne.n	1be7c <xQueueReceive+0x68>
   1be7a:	e07d      	b.n	1bf78 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1be7c:	68ba      	ldr	r2, [r7, #8]
   1be7e:	6a3b      	ldr	r3, [r7, #32]
   1be80:	0011      	movs	r1, r2
   1be82:	0018      	movs	r0, r3
   1be84:	4bb3      	ldr	r3, [pc, #716]	; (1c154 <xQueueReceive+0x340>)
   1be86:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1be88:	4bb3      	ldr	r3, [pc, #716]	; (1c158 <xQueueReceive+0x344>)
   1be8a:	4798      	blx	r3
   1be8c:	0003      	movs	r3, r0
   1be8e:	0018      	movs	r0, r3
   1be90:	4bb2      	ldr	r3, [pc, #712]	; (1c15c <xQueueReceive+0x348>)
   1be92:	4798      	blx	r3
   1be94:	0003      	movs	r3, r0
   1be96:	001a      	movs	r2, r3
   1be98:	4bb1      	ldr	r3, [pc, #708]	; (1c160 <xQueueReceive+0x34c>)
   1be9a:	881b      	ldrh	r3, [r3, #0]
   1be9c:	4013      	ands	r3, r2
   1be9e:	b29b      	uxth	r3, r3
   1bea0:	2b00      	cmp	r3, #0
   1bea2:	d029      	beq.n	1bef8 <xQueueReceive+0xe4>
   1bea4:	6a3b      	ldr	r3, [r7, #32]
   1bea6:	0018      	movs	r0, r3
   1bea8:	4bae      	ldr	r3, [pc, #696]	; (1c164 <xQueueReceive+0x350>)
   1beaa:	4798      	blx	r3
   1beac:	0003      	movs	r3, r0
   1beae:	001a      	movs	r2, r3
   1beb0:	4bab      	ldr	r3, [pc, #684]	; (1c160 <xQueueReceive+0x34c>)
   1beb2:	881b      	ldrh	r3, [r3, #0]
   1beb4:	4013      	ands	r3, r2
   1beb6:	b29b      	uxth	r3, r3
   1beb8:	2b00      	cmp	r3, #0
   1beba:	d01d      	beq.n	1bef8 <xQueueReceive+0xe4>
   1bebc:	6a3b      	ldr	r3, [r7, #32]
   1bebe:	0018      	movs	r0, r3
   1bec0:	4ba9      	ldr	r3, [pc, #676]	; (1c168 <xQueueReceive+0x354>)
   1bec2:	4798      	blx	r3
   1bec4:	0003      	movs	r3, r0
   1bec6:	001a      	movs	r2, r3
   1bec8:	4ba8      	ldr	r3, [pc, #672]	; (1c16c <xQueueReceive+0x358>)
   1beca:	5c9b      	ldrb	r3, [r3, r2]
   1becc:	3328      	adds	r3, #40	; 0x28
   1bece:	b2db      	uxtb	r3, r3
   1bed0:	001d      	movs	r5, r3
   1bed2:	6a3b      	ldr	r3, [r7, #32]
   1bed4:	0018      	movs	r0, r3
   1bed6:	4ba4      	ldr	r3, [pc, #656]	; (1c168 <xQueueReceive+0x354>)
   1bed8:	4798      	blx	r3
   1beda:	0003      	movs	r3, r0
   1bedc:	001a      	movs	r2, r3
   1bede:	4ba3      	ldr	r3, [pc, #652]	; (1c16c <xQueueReceive+0x358>)
   1bee0:	5c9c      	ldrb	r4, [r3, r2]
   1bee2:	6a3b      	ldr	r3, [r7, #32]
   1bee4:	0018      	movs	r0, r3
   1bee6:	4ba2      	ldr	r3, [pc, #648]	; (1c170 <xQueueReceive+0x35c>)
   1bee8:	4798      	blx	r3
   1beea:	0003      	movs	r3, r0
   1beec:	b2db      	uxtb	r3, r3
   1beee:	001a      	movs	r2, r3
   1bef0:	0021      	movs	r1, r4
   1bef2:	0028      	movs	r0, r5
   1bef4:	4b9f      	ldr	r3, [pc, #636]	; (1c174 <xQueueReceive+0x360>)
   1bef6:	4798      	blx	r3
   1bef8:	6a3b      	ldr	r3, [r7, #32]
   1befa:	0018      	movs	r0, r3
   1befc:	4b9a      	ldr	r3, [pc, #616]	; (1c168 <xQueueReceive+0x354>)
   1befe:	4798      	blx	r3
   1bf00:	0003      	movs	r3, r0
   1bf02:	001a      	movs	r2, r3
   1bf04:	4b99      	ldr	r3, [pc, #612]	; (1c16c <xQueueReceive+0x358>)
   1bf06:	5c9c      	ldrb	r4, [r3, r2]
   1bf08:	6a3b      	ldr	r3, [r7, #32]
   1bf0a:	0018      	movs	r0, r3
   1bf0c:	4b98      	ldr	r3, [pc, #608]	; (1c170 <xQueueReceive+0x35c>)
   1bf0e:	4798      	blx	r3
   1bf10:	0003      	movs	r3, r0
   1bf12:	b2dd      	uxtb	r5, r3
   1bf14:	6a3b      	ldr	r3, [r7, #32]
   1bf16:	0018      	movs	r0, r3
   1bf18:	4b93      	ldr	r3, [pc, #588]	; (1c168 <xQueueReceive+0x354>)
   1bf1a:	4798      	blx	r3
   1bf1c:	0003      	movs	r3, r0
   1bf1e:	001a      	movs	r2, r3
   1bf20:	4b92      	ldr	r3, [pc, #584]	; (1c16c <xQueueReceive+0x358>)
   1bf22:	5c9b      	ldrb	r3, [r3, r2]
   1bf24:	2b02      	cmp	r3, #2
   1bf26:	d108      	bne.n	1bf3a <xQueueReceive+0x126>
   1bf28:	4b8b      	ldr	r3, [pc, #556]	; (1c158 <xQueueReceive+0x344>)
   1bf2a:	4798      	blx	r3
   1bf2c:	0003      	movs	r3, r0
   1bf2e:	0018      	movs	r0, r3
   1bf30:	4b91      	ldr	r3, [pc, #580]	; (1c178 <xQueueReceive+0x364>)
   1bf32:	4798      	blx	r3
   1bf34:	0003      	movs	r3, r0
   1bf36:	b2db      	uxtb	r3, r3
   1bf38:	e004      	b.n	1bf44 <xQueueReceive+0x130>
   1bf3a:	6a3b      	ldr	r3, [r7, #32]
   1bf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bf3e:	b2db      	uxtb	r3, r3
   1bf40:	3b01      	subs	r3, #1
   1bf42:	b2db      	uxtb	r3, r3
   1bf44:	001a      	movs	r2, r3
   1bf46:	0029      	movs	r1, r5
   1bf48:	0020      	movs	r0, r4
   1bf4a:	4b8c      	ldr	r3, [pc, #560]	; (1c17c <xQueueReceive+0x368>)
   1bf4c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1bf4e:	69fb      	ldr	r3, [r7, #28]
   1bf50:	1e5a      	subs	r2, r3, #1
   1bf52:	6a3b      	ldr	r3, [r7, #32]
   1bf54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bf56:	6a3b      	ldr	r3, [r7, #32]
   1bf58:	691b      	ldr	r3, [r3, #16]
   1bf5a:	2b00      	cmp	r3, #0
   1bf5c:	d008      	beq.n	1bf70 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bf5e:	6a3b      	ldr	r3, [r7, #32]
   1bf60:	3310      	adds	r3, #16
   1bf62:	0018      	movs	r0, r3
   1bf64:	4b86      	ldr	r3, [pc, #536]	; (1c180 <xQueueReceive+0x36c>)
   1bf66:	4798      	blx	r3
   1bf68:	1e03      	subs	r3, r0, #0
   1bf6a:	d001      	beq.n	1bf70 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bf6c:	4b85      	ldr	r3, [pc, #532]	; (1c184 <xQueueReceive+0x370>)
   1bf6e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bf70:	4b85      	ldr	r3, [pc, #532]	; (1c188 <xQueueReceive+0x374>)
   1bf72:	4798      	blx	r3
				return pdPASS;
   1bf74:	2301      	movs	r3, #1
   1bf76:	e15f      	b.n	1c238 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bf78:	687b      	ldr	r3, [r7, #4]
   1bf7a:	2b00      	cmp	r3, #0
   1bf7c:	d13b      	bne.n	1bff6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bf7e:	4b82      	ldr	r3, [pc, #520]	; (1c188 <xQueueReceive+0x374>)
   1bf80:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bf82:	4b75      	ldr	r3, [pc, #468]	; (1c158 <xQueueReceive+0x344>)
   1bf84:	4798      	blx	r3
   1bf86:	0003      	movs	r3, r0
   1bf88:	0018      	movs	r0, r3
   1bf8a:	4b74      	ldr	r3, [pc, #464]	; (1c15c <xQueueReceive+0x348>)
   1bf8c:	4798      	blx	r3
   1bf8e:	0003      	movs	r3, r0
   1bf90:	001a      	movs	r2, r3
   1bf92:	4b73      	ldr	r3, [pc, #460]	; (1c160 <xQueueReceive+0x34c>)
   1bf94:	881b      	ldrh	r3, [r3, #0]
   1bf96:	4013      	ands	r3, r2
   1bf98:	b29b      	uxth	r3, r3
   1bf9a:	2b00      	cmp	r3, #0
   1bf9c:	d029      	beq.n	1bff2 <xQueueReceive+0x1de>
   1bf9e:	6a3b      	ldr	r3, [r7, #32]
   1bfa0:	0018      	movs	r0, r3
   1bfa2:	4b70      	ldr	r3, [pc, #448]	; (1c164 <xQueueReceive+0x350>)
   1bfa4:	4798      	blx	r3
   1bfa6:	0003      	movs	r3, r0
   1bfa8:	001a      	movs	r2, r3
   1bfaa:	4b6d      	ldr	r3, [pc, #436]	; (1c160 <xQueueReceive+0x34c>)
   1bfac:	881b      	ldrh	r3, [r3, #0]
   1bfae:	4013      	ands	r3, r2
   1bfb0:	b29b      	uxth	r3, r3
   1bfb2:	2b00      	cmp	r3, #0
   1bfb4:	d01d      	beq.n	1bff2 <xQueueReceive+0x1de>
   1bfb6:	6a3b      	ldr	r3, [r7, #32]
   1bfb8:	0018      	movs	r0, r3
   1bfba:	4b6b      	ldr	r3, [pc, #428]	; (1c168 <xQueueReceive+0x354>)
   1bfbc:	4798      	blx	r3
   1bfbe:	0003      	movs	r3, r0
   1bfc0:	001a      	movs	r2, r3
   1bfc2:	4b6a      	ldr	r3, [pc, #424]	; (1c16c <xQueueReceive+0x358>)
   1bfc4:	5c9b      	ldrb	r3, [r3, r2]
   1bfc6:	3350      	adds	r3, #80	; 0x50
   1bfc8:	b2db      	uxtb	r3, r3
   1bfca:	001d      	movs	r5, r3
   1bfcc:	6a3b      	ldr	r3, [r7, #32]
   1bfce:	0018      	movs	r0, r3
   1bfd0:	4b65      	ldr	r3, [pc, #404]	; (1c168 <xQueueReceive+0x354>)
   1bfd2:	4798      	blx	r3
   1bfd4:	0003      	movs	r3, r0
   1bfd6:	001a      	movs	r2, r3
   1bfd8:	4b64      	ldr	r3, [pc, #400]	; (1c16c <xQueueReceive+0x358>)
   1bfda:	5c9c      	ldrb	r4, [r3, r2]
   1bfdc:	6a3b      	ldr	r3, [r7, #32]
   1bfde:	0018      	movs	r0, r3
   1bfe0:	4b63      	ldr	r3, [pc, #396]	; (1c170 <xQueueReceive+0x35c>)
   1bfe2:	4798      	blx	r3
   1bfe4:	0003      	movs	r3, r0
   1bfe6:	b2db      	uxtb	r3, r3
   1bfe8:	001a      	movs	r2, r3
   1bfea:	0021      	movs	r1, r4
   1bfec:	0028      	movs	r0, r5
   1bfee:	4b61      	ldr	r3, [pc, #388]	; (1c174 <xQueueReceive+0x360>)
   1bff0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1bff2:	2300      	movs	r3, #0
   1bff4:	e120      	b.n	1c238 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bff8:	2b00      	cmp	r3, #0
   1bffa:	d106      	bne.n	1c00a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bffc:	2314      	movs	r3, #20
   1bffe:	18fb      	adds	r3, r7, r3
   1c000:	0018      	movs	r0, r3
   1c002:	4b62      	ldr	r3, [pc, #392]	; (1c18c <xQueueReceive+0x378>)
   1c004:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c006:	2301      	movs	r3, #1
   1c008:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c00a:	4b5f      	ldr	r3, [pc, #380]	; (1c188 <xQueueReceive+0x374>)
   1c00c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c00e:	4b60      	ldr	r3, [pc, #384]	; (1c190 <xQueueReceive+0x37c>)
   1c010:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c012:	4b4f      	ldr	r3, [pc, #316]	; (1c150 <xQueueReceive+0x33c>)
   1c014:	4798      	blx	r3
   1c016:	6a3b      	ldr	r3, [r7, #32]
   1c018:	2244      	movs	r2, #68	; 0x44
   1c01a:	5c9b      	ldrb	r3, [r3, r2]
   1c01c:	b25b      	sxtb	r3, r3
   1c01e:	3301      	adds	r3, #1
   1c020:	d103      	bne.n	1c02a <xQueueReceive+0x216>
   1c022:	6a3b      	ldr	r3, [r7, #32]
   1c024:	2244      	movs	r2, #68	; 0x44
   1c026:	2100      	movs	r1, #0
   1c028:	5499      	strb	r1, [r3, r2]
   1c02a:	6a3b      	ldr	r3, [r7, #32]
   1c02c:	2245      	movs	r2, #69	; 0x45
   1c02e:	5c9b      	ldrb	r3, [r3, r2]
   1c030:	b25b      	sxtb	r3, r3
   1c032:	3301      	adds	r3, #1
   1c034:	d103      	bne.n	1c03e <xQueueReceive+0x22a>
   1c036:	6a3b      	ldr	r3, [r7, #32]
   1c038:	2245      	movs	r2, #69	; 0x45
   1c03a:	2100      	movs	r1, #0
   1c03c:	5499      	strb	r1, [r3, r2]
   1c03e:	4b52      	ldr	r3, [pc, #328]	; (1c188 <xQueueReceive+0x374>)
   1c040:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c042:	1d3a      	adds	r2, r7, #4
   1c044:	2314      	movs	r3, #20
   1c046:	18fb      	adds	r3, r7, r3
   1c048:	0011      	movs	r1, r2
   1c04a:	0018      	movs	r0, r3
   1c04c:	4b51      	ldr	r3, [pc, #324]	; (1c194 <xQueueReceive+0x380>)
   1c04e:	4798      	blx	r3
   1c050:	1e03      	subs	r3, r0, #0
   1c052:	d000      	beq.n	1c056 <xQueueReceive+0x242>
   1c054:	e0aa      	b.n	1c1ac <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c056:	6a3b      	ldr	r3, [r7, #32]
   1c058:	0018      	movs	r0, r3
   1c05a:	4b4f      	ldr	r3, [pc, #316]	; (1c198 <xQueueReceive+0x384>)
   1c05c:	4798      	blx	r3
   1c05e:	1e03      	subs	r3, r0, #0
   1c060:	d06d      	beq.n	1c13e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c062:	4b3d      	ldr	r3, [pc, #244]	; (1c158 <xQueueReceive+0x344>)
   1c064:	4798      	blx	r3
   1c066:	0003      	movs	r3, r0
   1c068:	0018      	movs	r0, r3
   1c06a:	4b3c      	ldr	r3, [pc, #240]	; (1c15c <xQueueReceive+0x348>)
   1c06c:	4798      	blx	r3
   1c06e:	0003      	movs	r3, r0
   1c070:	001a      	movs	r2, r3
   1c072:	4b3b      	ldr	r3, [pc, #236]	; (1c160 <xQueueReceive+0x34c>)
   1c074:	881b      	ldrh	r3, [r3, #0]
   1c076:	4013      	ands	r3, r2
   1c078:	b29b      	uxth	r3, r3
   1c07a:	2b00      	cmp	r3, #0
   1c07c:	d029      	beq.n	1c0d2 <xQueueReceive+0x2be>
   1c07e:	6a3b      	ldr	r3, [r7, #32]
   1c080:	0018      	movs	r0, r3
   1c082:	4b38      	ldr	r3, [pc, #224]	; (1c164 <xQueueReceive+0x350>)
   1c084:	4798      	blx	r3
   1c086:	0003      	movs	r3, r0
   1c088:	001a      	movs	r2, r3
   1c08a:	4b35      	ldr	r3, [pc, #212]	; (1c160 <xQueueReceive+0x34c>)
   1c08c:	881b      	ldrh	r3, [r3, #0]
   1c08e:	4013      	ands	r3, r2
   1c090:	b29b      	uxth	r3, r3
   1c092:	2b00      	cmp	r3, #0
   1c094:	d01d      	beq.n	1c0d2 <xQueueReceive+0x2be>
   1c096:	6a3b      	ldr	r3, [r7, #32]
   1c098:	0018      	movs	r0, r3
   1c09a:	4b33      	ldr	r3, [pc, #204]	; (1c168 <xQueueReceive+0x354>)
   1c09c:	4798      	blx	r3
   1c09e:	0003      	movs	r3, r0
   1c0a0:	001a      	movs	r2, r3
   1c0a2:	4b32      	ldr	r3, [pc, #200]	; (1c16c <xQueueReceive+0x358>)
   1c0a4:	5c9b      	ldrb	r3, [r3, r2]
   1c0a6:	3368      	adds	r3, #104	; 0x68
   1c0a8:	b2db      	uxtb	r3, r3
   1c0aa:	001d      	movs	r5, r3
   1c0ac:	6a3b      	ldr	r3, [r7, #32]
   1c0ae:	0018      	movs	r0, r3
   1c0b0:	4b2d      	ldr	r3, [pc, #180]	; (1c168 <xQueueReceive+0x354>)
   1c0b2:	4798      	blx	r3
   1c0b4:	0003      	movs	r3, r0
   1c0b6:	001a      	movs	r2, r3
   1c0b8:	4b2c      	ldr	r3, [pc, #176]	; (1c16c <xQueueReceive+0x358>)
   1c0ba:	5c9c      	ldrb	r4, [r3, r2]
   1c0bc:	6a3b      	ldr	r3, [r7, #32]
   1c0be:	0018      	movs	r0, r3
   1c0c0:	4b2b      	ldr	r3, [pc, #172]	; (1c170 <xQueueReceive+0x35c>)
   1c0c2:	4798      	blx	r3
   1c0c4:	0003      	movs	r3, r0
   1c0c6:	b2db      	uxtb	r3, r3
   1c0c8:	001a      	movs	r2, r3
   1c0ca:	0021      	movs	r1, r4
   1c0cc:	0028      	movs	r0, r5
   1c0ce:	4b29      	ldr	r3, [pc, #164]	; (1c174 <xQueueReceive+0x360>)
   1c0d0:	4798      	blx	r3
   1c0d2:	6a3b      	ldr	r3, [r7, #32]
   1c0d4:	0018      	movs	r0, r3
   1c0d6:	4b24      	ldr	r3, [pc, #144]	; (1c168 <xQueueReceive+0x354>)
   1c0d8:	4798      	blx	r3
   1c0da:	0003      	movs	r3, r0
   1c0dc:	001a      	movs	r2, r3
   1c0de:	4b23      	ldr	r3, [pc, #140]	; (1c16c <xQueueReceive+0x358>)
   1c0e0:	5c9b      	ldrb	r3, [r3, r2]
   1c0e2:	2b02      	cmp	r3, #2
   1c0e4:	d018      	beq.n	1c118 <xQueueReceive+0x304>
   1c0e6:	4b1c      	ldr	r3, [pc, #112]	; (1c158 <xQueueReceive+0x344>)
   1c0e8:	4798      	blx	r3
   1c0ea:	0003      	movs	r3, r0
   1c0ec:	0018      	movs	r0, r3
   1c0ee:	4b1b      	ldr	r3, [pc, #108]	; (1c15c <xQueueReceive+0x348>)
   1c0f0:	4798      	blx	r3
   1c0f2:	0003      	movs	r3, r0
   1c0f4:	001a      	movs	r2, r3
   1c0f6:	4b1a      	ldr	r3, [pc, #104]	; (1c160 <xQueueReceive+0x34c>)
   1c0f8:	881b      	ldrh	r3, [r3, #0]
   1c0fa:	4013      	ands	r3, r2
   1c0fc:	b29b      	uxth	r3, r3
   1c0fe:	2b00      	cmp	r3, #0
   1c100:	d00a      	beq.n	1c118 <xQueueReceive+0x304>
   1c102:	4b15      	ldr	r3, [pc, #84]	; (1c158 <xQueueReceive+0x344>)
   1c104:	4798      	blx	r3
   1c106:	0003      	movs	r3, r0
   1c108:	0018      	movs	r0, r3
   1c10a:	4b1b      	ldr	r3, [pc, #108]	; (1c178 <xQueueReceive+0x364>)
   1c10c:	4798      	blx	r3
   1c10e:	0003      	movs	r3, r0
   1c110:	b2db      	uxtb	r3, r3
   1c112:	0018      	movs	r0, r3
   1c114:	4b21      	ldr	r3, [pc, #132]	; (1c19c <xQueueReceive+0x388>)
   1c116:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c118:	6a3b      	ldr	r3, [r7, #32]
   1c11a:	3324      	adds	r3, #36	; 0x24
   1c11c:	687a      	ldr	r2, [r7, #4]
   1c11e:	0011      	movs	r1, r2
   1c120:	0018      	movs	r0, r3
   1c122:	4b1f      	ldr	r3, [pc, #124]	; (1c1a0 <xQueueReceive+0x38c>)
   1c124:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c126:	6a3b      	ldr	r3, [r7, #32]
   1c128:	0018      	movs	r0, r3
   1c12a:	4b1e      	ldr	r3, [pc, #120]	; (1c1a4 <xQueueReceive+0x390>)
   1c12c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c12e:	4b1e      	ldr	r3, [pc, #120]	; (1c1a8 <xQueueReceive+0x394>)
   1c130:	4798      	blx	r3
   1c132:	1e03      	subs	r3, r0, #0
   1c134:	d000      	beq.n	1c138 <xQueueReceive+0x324>
   1c136:	e698      	b.n	1be6a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1c138:	4b12      	ldr	r3, [pc, #72]	; (1c184 <xQueueReceive+0x370>)
   1c13a:	4798      	blx	r3
   1c13c:	e695      	b.n	1be6a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1c13e:	6a3b      	ldr	r3, [r7, #32]
   1c140:	0018      	movs	r0, r3
   1c142:	4b18      	ldr	r3, [pc, #96]	; (1c1a4 <xQueueReceive+0x390>)
   1c144:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c146:	4b18      	ldr	r3, [pc, #96]	; (1c1a8 <xQueueReceive+0x394>)
   1c148:	4798      	blx	r3
   1c14a:	e68e      	b.n	1be6a <xQueueReceive+0x56>
   1c14c:	0001dce9 	.word	0x0001dce9
   1c150:	0001afc9 	.word	0x0001afc9
   1c154:	0001c875 	.word	0x0001c875
   1c158:	0001925d 	.word	0x0001925d
   1c15c:	00018fc1 	.word	0x00018fc1
   1c160:	20000110 	.word	0x20000110
   1c164:	00019081 	.word	0x00019081
   1c168:	00018f81 	.word	0x00018f81
   1c16c:	20000104 	.word	0x20000104
   1c170:	00019061 	.word	0x00019061
   1c174:	000199b9 	.word	0x000199b9
   1c178:	00018fa1 	.word	0x00018fa1
   1c17c:	0001a015 	.word	0x0001a015
   1c180:	0001d859 	.word	0x0001d859
   1c184:	0001afb1 	.word	0x0001afb1
   1c188:	0001afed 	.word	0x0001afed
   1c18c:	0001d999 	.word	0x0001d999
   1c190:	0001d281 	.word	0x0001d281
   1c194:	0001d9c1 	.word	0x0001d9c1
   1c198:	0001c9b5 	.word	0x0001c9b5
   1c19c:	0001a151 	.word	0x0001a151
   1c1a0:	0001d735 	.word	0x0001d735
   1c1a4:	0001c8c5 	.word	0x0001c8c5
   1c1a8:	0001d299 	.word	0x0001d299
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1c1ac:	6a3b      	ldr	r3, [r7, #32]
   1c1ae:	0018      	movs	r0, r3
   1c1b0:	4b23      	ldr	r3, [pc, #140]	; (1c240 <xQueueReceive+0x42c>)
   1c1b2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c1b4:	4b23      	ldr	r3, [pc, #140]	; (1c244 <xQueueReceive+0x430>)
   1c1b6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c1b8:	6a3b      	ldr	r3, [r7, #32]
   1c1ba:	0018      	movs	r0, r3
   1c1bc:	4b22      	ldr	r3, [pc, #136]	; (1c248 <xQueueReceive+0x434>)
   1c1be:	4798      	blx	r3
   1c1c0:	1e03      	subs	r3, r0, #0
   1c1c2:	d100      	bne.n	1c1c6 <xQueueReceive+0x3b2>
   1c1c4:	e651      	b.n	1be6a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c1c6:	4b21      	ldr	r3, [pc, #132]	; (1c24c <xQueueReceive+0x438>)
   1c1c8:	4798      	blx	r3
   1c1ca:	0003      	movs	r3, r0
   1c1cc:	0018      	movs	r0, r3
   1c1ce:	4b20      	ldr	r3, [pc, #128]	; (1c250 <xQueueReceive+0x43c>)
   1c1d0:	4798      	blx	r3
   1c1d2:	0003      	movs	r3, r0
   1c1d4:	001a      	movs	r2, r3
   1c1d6:	4b1f      	ldr	r3, [pc, #124]	; (1c254 <xQueueReceive+0x440>)
   1c1d8:	881b      	ldrh	r3, [r3, #0]
   1c1da:	4013      	ands	r3, r2
   1c1dc:	b29b      	uxth	r3, r3
   1c1de:	2b00      	cmp	r3, #0
   1c1e0:	d029      	beq.n	1c236 <xQueueReceive+0x422>
   1c1e2:	6a3b      	ldr	r3, [r7, #32]
   1c1e4:	0018      	movs	r0, r3
   1c1e6:	4b1c      	ldr	r3, [pc, #112]	; (1c258 <xQueueReceive+0x444>)
   1c1e8:	4798      	blx	r3
   1c1ea:	0003      	movs	r3, r0
   1c1ec:	001a      	movs	r2, r3
   1c1ee:	4b19      	ldr	r3, [pc, #100]	; (1c254 <xQueueReceive+0x440>)
   1c1f0:	881b      	ldrh	r3, [r3, #0]
   1c1f2:	4013      	ands	r3, r2
   1c1f4:	b29b      	uxth	r3, r3
   1c1f6:	2b00      	cmp	r3, #0
   1c1f8:	d01d      	beq.n	1c236 <xQueueReceive+0x422>
   1c1fa:	6a3b      	ldr	r3, [r7, #32]
   1c1fc:	0018      	movs	r0, r3
   1c1fe:	4b17      	ldr	r3, [pc, #92]	; (1c25c <xQueueReceive+0x448>)
   1c200:	4798      	blx	r3
   1c202:	0003      	movs	r3, r0
   1c204:	001a      	movs	r2, r3
   1c206:	4b16      	ldr	r3, [pc, #88]	; (1c260 <xQueueReceive+0x44c>)
   1c208:	5c9b      	ldrb	r3, [r3, r2]
   1c20a:	3350      	adds	r3, #80	; 0x50
   1c20c:	b2db      	uxtb	r3, r3
   1c20e:	001d      	movs	r5, r3
   1c210:	6a3b      	ldr	r3, [r7, #32]
   1c212:	0018      	movs	r0, r3
   1c214:	4b11      	ldr	r3, [pc, #68]	; (1c25c <xQueueReceive+0x448>)
   1c216:	4798      	blx	r3
   1c218:	0003      	movs	r3, r0
   1c21a:	001a      	movs	r2, r3
   1c21c:	4b10      	ldr	r3, [pc, #64]	; (1c260 <xQueueReceive+0x44c>)
   1c21e:	5c9c      	ldrb	r4, [r3, r2]
   1c220:	6a3b      	ldr	r3, [r7, #32]
   1c222:	0018      	movs	r0, r3
   1c224:	4b0f      	ldr	r3, [pc, #60]	; (1c264 <xQueueReceive+0x450>)
   1c226:	4798      	blx	r3
   1c228:	0003      	movs	r3, r0
   1c22a:	b2db      	uxtb	r3, r3
   1c22c:	001a      	movs	r2, r3
   1c22e:	0021      	movs	r1, r4
   1c230:	0028      	movs	r0, r5
   1c232:	4b0d      	ldr	r3, [pc, #52]	; (1c268 <xQueueReceive+0x454>)
   1c234:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c236:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c238:	0018      	movs	r0, r3
   1c23a:	46bd      	mov	sp, r7
   1c23c:	b00a      	add	sp, #40	; 0x28
   1c23e:	bdb0      	pop	{r4, r5, r7, pc}
   1c240:	0001c8c5 	.word	0x0001c8c5
   1c244:	0001d299 	.word	0x0001d299
   1c248:	0001c9b5 	.word	0x0001c9b5
   1c24c:	0001925d 	.word	0x0001925d
   1c250:	00018fc1 	.word	0x00018fc1
   1c254:	20000110 	.word	0x20000110
   1c258:	00019081 	.word	0x00019081
   1c25c:	00018f81 	.word	0x00018f81
   1c260:	20000104 	.word	0x20000104
   1c264:	00019061 	.word	0x00019061
   1c268:	000199b9 	.word	0x000199b9

0001c26c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1c26c:	b5b0      	push	{r4, r5, r7, lr}
   1c26e:	b08a      	sub	sp, #40	; 0x28
   1c270:	af00      	add	r7, sp, #0
   1c272:	6078      	str	r0, [r7, #4]
   1c274:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1c276:	2300      	movs	r3, #0
   1c278:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c27a:	687b      	ldr	r3, [r7, #4]
   1c27c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1c27e:	2300      	movs	r3, #0
   1c280:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1c282:	69fb      	ldr	r3, [r7, #28]
   1c284:	2b00      	cmp	r3, #0
   1c286:	d101      	bne.n	1c28c <xQueueSemaphoreTake+0x20>
   1c288:	b672      	cpsid	i
   1c28a:	e7fe      	b.n	1c28a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1c28c:	69fb      	ldr	r3, [r7, #28]
   1c28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c290:	2b00      	cmp	r3, #0
   1c292:	d001      	beq.n	1c298 <xQueueSemaphoreTake+0x2c>
   1c294:	b672      	cpsid	i
   1c296:	e7fe      	b.n	1c296 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1c298:	4bcb      	ldr	r3, [pc, #812]	; (1c5c8 <xQueueSemaphoreTake+0x35c>)
   1c29a:	4798      	blx	r3
   1c29c:	1e03      	subs	r3, r0, #0
   1c29e:	d102      	bne.n	1c2a6 <xQueueSemaphoreTake+0x3a>
   1c2a0:	683b      	ldr	r3, [r7, #0]
   1c2a2:	2b00      	cmp	r3, #0
   1c2a4:	d101      	bne.n	1c2aa <xQueueSemaphoreTake+0x3e>
   1c2a6:	2301      	movs	r3, #1
   1c2a8:	e000      	b.n	1c2ac <xQueueSemaphoreTake+0x40>
   1c2aa:	2300      	movs	r3, #0
   1c2ac:	2b00      	cmp	r3, #0
   1c2ae:	d101      	bne.n	1c2b4 <xQueueSemaphoreTake+0x48>
   1c2b0:	b672      	cpsid	i
   1c2b2:	e7fe      	b.n	1c2b2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1c2b4:	4bc5      	ldr	r3, [pc, #788]	; (1c5cc <xQueueSemaphoreTake+0x360>)
   1c2b6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1c2b8:	69fb      	ldr	r3, [r7, #28]
   1c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c2bc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1c2be:	69bb      	ldr	r3, [r7, #24]
   1c2c0:	2b00      	cmp	r3, #0
   1c2c2:	d100      	bne.n	1c2c6 <xQueueSemaphoreTake+0x5a>
   1c2c4:	e080      	b.n	1c3c8 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1c2c6:	4bc2      	ldr	r3, [pc, #776]	; (1c5d0 <xQueueSemaphoreTake+0x364>)
   1c2c8:	4798      	blx	r3
   1c2ca:	0003      	movs	r3, r0
   1c2cc:	0018      	movs	r0, r3
   1c2ce:	4bc1      	ldr	r3, [pc, #772]	; (1c5d4 <xQueueSemaphoreTake+0x368>)
   1c2d0:	4798      	blx	r3
   1c2d2:	0003      	movs	r3, r0
   1c2d4:	001a      	movs	r2, r3
   1c2d6:	4bc0      	ldr	r3, [pc, #768]	; (1c5d8 <xQueueSemaphoreTake+0x36c>)
   1c2d8:	881b      	ldrh	r3, [r3, #0]
   1c2da:	4013      	ands	r3, r2
   1c2dc:	b29b      	uxth	r3, r3
   1c2de:	2b00      	cmp	r3, #0
   1c2e0:	d029      	beq.n	1c336 <xQueueSemaphoreTake+0xca>
   1c2e2:	69fb      	ldr	r3, [r7, #28]
   1c2e4:	0018      	movs	r0, r3
   1c2e6:	4bbd      	ldr	r3, [pc, #756]	; (1c5dc <xQueueSemaphoreTake+0x370>)
   1c2e8:	4798      	blx	r3
   1c2ea:	0003      	movs	r3, r0
   1c2ec:	001a      	movs	r2, r3
   1c2ee:	4bba      	ldr	r3, [pc, #744]	; (1c5d8 <xQueueSemaphoreTake+0x36c>)
   1c2f0:	881b      	ldrh	r3, [r3, #0]
   1c2f2:	4013      	ands	r3, r2
   1c2f4:	b29b      	uxth	r3, r3
   1c2f6:	2b00      	cmp	r3, #0
   1c2f8:	d01d      	beq.n	1c336 <xQueueSemaphoreTake+0xca>
   1c2fa:	69fb      	ldr	r3, [r7, #28]
   1c2fc:	0018      	movs	r0, r3
   1c2fe:	4bb8      	ldr	r3, [pc, #736]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c300:	4798      	blx	r3
   1c302:	0003      	movs	r3, r0
   1c304:	001a      	movs	r2, r3
   1c306:	4bb7      	ldr	r3, [pc, #732]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c308:	5c9b      	ldrb	r3, [r3, r2]
   1c30a:	3328      	adds	r3, #40	; 0x28
   1c30c:	b2db      	uxtb	r3, r3
   1c30e:	001d      	movs	r5, r3
   1c310:	69fb      	ldr	r3, [r7, #28]
   1c312:	0018      	movs	r0, r3
   1c314:	4bb2      	ldr	r3, [pc, #712]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c316:	4798      	blx	r3
   1c318:	0003      	movs	r3, r0
   1c31a:	001a      	movs	r2, r3
   1c31c:	4bb1      	ldr	r3, [pc, #708]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c31e:	5c9c      	ldrb	r4, [r3, r2]
   1c320:	69fb      	ldr	r3, [r7, #28]
   1c322:	0018      	movs	r0, r3
   1c324:	4bb0      	ldr	r3, [pc, #704]	; (1c5e8 <xQueueSemaphoreTake+0x37c>)
   1c326:	4798      	blx	r3
   1c328:	0003      	movs	r3, r0
   1c32a:	b2db      	uxtb	r3, r3
   1c32c:	001a      	movs	r2, r3
   1c32e:	0021      	movs	r1, r4
   1c330:	0028      	movs	r0, r5
   1c332:	4bae      	ldr	r3, [pc, #696]	; (1c5ec <xQueueSemaphoreTake+0x380>)
   1c334:	4798      	blx	r3
   1c336:	69fb      	ldr	r3, [r7, #28]
   1c338:	0018      	movs	r0, r3
   1c33a:	4ba9      	ldr	r3, [pc, #676]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c33c:	4798      	blx	r3
   1c33e:	0003      	movs	r3, r0
   1c340:	001a      	movs	r2, r3
   1c342:	4ba8      	ldr	r3, [pc, #672]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c344:	5c9c      	ldrb	r4, [r3, r2]
   1c346:	69fb      	ldr	r3, [r7, #28]
   1c348:	0018      	movs	r0, r3
   1c34a:	4ba7      	ldr	r3, [pc, #668]	; (1c5e8 <xQueueSemaphoreTake+0x37c>)
   1c34c:	4798      	blx	r3
   1c34e:	0003      	movs	r3, r0
   1c350:	b2dd      	uxtb	r5, r3
   1c352:	69fb      	ldr	r3, [r7, #28]
   1c354:	0018      	movs	r0, r3
   1c356:	4ba2      	ldr	r3, [pc, #648]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c358:	4798      	blx	r3
   1c35a:	0003      	movs	r3, r0
   1c35c:	001a      	movs	r2, r3
   1c35e:	4ba1      	ldr	r3, [pc, #644]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c360:	5c9b      	ldrb	r3, [r3, r2]
   1c362:	2b02      	cmp	r3, #2
   1c364:	d108      	bne.n	1c378 <xQueueSemaphoreTake+0x10c>
   1c366:	4b9a      	ldr	r3, [pc, #616]	; (1c5d0 <xQueueSemaphoreTake+0x364>)
   1c368:	4798      	blx	r3
   1c36a:	0003      	movs	r3, r0
   1c36c:	0018      	movs	r0, r3
   1c36e:	4ba0      	ldr	r3, [pc, #640]	; (1c5f0 <xQueueSemaphoreTake+0x384>)
   1c370:	4798      	blx	r3
   1c372:	0003      	movs	r3, r0
   1c374:	b2db      	uxtb	r3, r3
   1c376:	e004      	b.n	1c382 <xQueueSemaphoreTake+0x116>
   1c378:	69fb      	ldr	r3, [r7, #28]
   1c37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c37c:	b2db      	uxtb	r3, r3
   1c37e:	3b01      	subs	r3, #1
   1c380:	b2db      	uxtb	r3, r3
   1c382:	001a      	movs	r2, r3
   1c384:	0029      	movs	r1, r5
   1c386:	0020      	movs	r0, r4
   1c388:	4b9a      	ldr	r3, [pc, #616]	; (1c5f4 <xQueueSemaphoreTake+0x388>)
   1c38a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1c38c:	69bb      	ldr	r3, [r7, #24]
   1c38e:	1e5a      	subs	r2, r3, #1
   1c390:	69fb      	ldr	r3, [r7, #28]
   1c392:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c394:	69fb      	ldr	r3, [r7, #28]
   1c396:	681b      	ldr	r3, [r3, #0]
   1c398:	2b00      	cmp	r3, #0
   1c39a:	d104      	bne.n	1c3a6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1c39c:	4b96      	ldr	r3, [pc, #600]	; (1c5f8 <xQueueSemaphoreTake+0x38c>)
   1c39e:	4798      	blx	r3
   1c3a0:	0002      	movs	r2, r0
   1c3a2:	69fb      	ldr	r3, [r7, #28]
   1c3a4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c3a6:	69fb      	ldr	r3, [r7, #28]
   1c3a8:	691b      	ldr	r3, [r3, #16]
   1c3aa:	2b00      	cmp	r3, #0
   1c3ac:	d008      	beq.n	1c3c0 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c3ae:	69fb      	ldr	r3, [r7, #28]
   1c3b0:	3310      	adds	r3, #16
   1c3b2:	0018      	movs	r0, r3
   1c3b4:	4b91      	ldr	r3, [pc, #580]	; (1c5fc <xQueueSemaphoreTake+0x390>)
   1c3b6:	4798      	blx	r3
   1c3b8:	1e03      	subs	r3, r0, #0
   1c3ba:	d001      	beq.n	1c3c0 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c3bc:	4b90      	ldr	r3, [pc, #576]	; (1c600 <xQueueSemaphoreTake+0x394>)
   1c3be:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c3c0:	4b90      	ldr	r3, [pc, #576]	; (1c604 <xQueueSemaphoreTake+0x398>)
   1c3c2:	4798      	blx	r3
				return pdPASS;
   1c3c4:	2301      	movs	r3, #1
   1c3c6:	e18b      	b.n	1c6e0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c3c8:	683b      	ldr	r3, [r7, #0]
   1c3ca:	2b00      	cmp	r3, #0
   1c3cc:	d140      	bne.n	1c450 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1c3ce:	6a3b      	ldr	r3, [r7, #32]
   1c3d0:	2b00      	cmp	r3, #0
   1c3d2:	d001      	beq.n	1c3d8 <xQueueSemaphoreTake+0x16c>
   1c3d4:	b672      	cpsid	i
   1c3d6:	e7fe      	b.n	1c3d6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1c3d8:	4b8a      	ldr	r3, [pc, #552]	; (1c604 <xQueueSemaphoreTake+0x398>)
   1c3da:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c3dc:	4b7c      	ldr	r3, [pc, #496]	; (1c5d0 <xQueueSemaphoreTake+0x364>)
   1c3de:	4798      	blx	r3
   1c3e0:	0003      	movs	r3, r0
   1c3e2:	0018      	movs	r0, r3
   1c3e4:	4b7b      	ldr	r3, [pc, #492]	; (1c5d4 <xQueueSemaphoreTake+0x368>)
   1c3e6:	4798      	blx	r3
   1c3e8:	0003      	movs	r3, r0
   1c3ea:	001a      	movs	r2, r3
   1c3ec:	4b7a      	ldr	r3, [pc, #488]	; (1c5d8 <xQueueSemaphoreTake+0x36c>)
   1c3ee:	881b      	ldrh	r3, [r3, #0]
   1c3f0:	4013      	ands	r3, r2
   1c3f2:	b29b      	uxth	r3, r3
   1c3f4:	2b00      	cmp	r3, #0
   1c3f6:	d029      	beq.n	1c44c <xQueueSemaphoreTake+0x1e0>
   1c3f8:	69fb      	ldr	r3, [r7, #28]
   1c3fa:	0018      	movs	r0, r3
   1c3fc:	4b77      	ldr	r3, [pc, #476]	; (1c5dc <xQueueSemaphoreTake+0x370>)
   1c3fe:	4798      	blx	r3
   1c400:	0003      	movs	r3, r0
   1c402:	001a      	movs	r2, r3
   1c404:	4b74      	ldr	r3, [pc, #464]	; (1c5d8 <xQueueSemaphoreTake+0x36c>)
   1c406:	881b      	ldrh	r3, [r3, #0]
   1c408:	4013      	ands	r3, r2
   1c40a:	b29b      	uxth	r3, r3
   1c40c:	2b00      	cmp	r3, #0
   1c40e:	d01d      	beq.n	1c44c <xQueueSemaphoreTake+0x1e0>
   1c410:	69fb      	ldr	r3, [r7, #28]
   1c412:	0018      	movs	r0, r3
   1c414:	4b72      	ldr	r3, [pc, #456]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c416:	4798      	blx	r3
   1c418:	0003      	movs	r3, r0
   1c41a:	001a      	movs	r2, r3
   1c41c:	4b71      	ldr	r3, [pc, #452]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c41e:	5c9b      	ldrb	r3, [r3, r2]
   1c420:	3350      	adds	r3, #80	; 0x50
   1c422:	b2db      	uxtb	r3, r3
   1c424:	001d      	movs	r5, r3
   1c426:	69fb      	ldr	r3, [r7, #28]
   1c428:	0018      	movs	r0, r3
   1c42a:	4b6d      	ldr	r3, [pc, #436]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c42c:	4798      	blx	r3
   1c42e:	0003      	movs	r3, r0
   1c430:	001a      	movs	r2, r3
   1c432:	4b6c      	ldr	r3, [pc, #432]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c434:	5c9c      	ldrb	r4, [r3, r2]
   1c436:	69fb      	ldr	r3, [r7, #28]
   1c438:	0018      	movs	r0, r3
   1c43a:	4b6b      	ldr	r3, [pc, #428]	; (1c5e8 <xQueueSemaphoreTake+0x37c>)
   1c43c:	4798      	blx	r3
   1c43e:	0003      	movs	r3, r0
   1c440:	b2db      	uxtb	r3, r3
   1c442:	001a      	movs	r2, r3
   1c444:	0021      	movs	r1, r4
   1c446:	0028      	movs	r0, r5
   1c448:	4b68      	ldr	r3, [pc, #416]	; (1c5ec <xQueueSemaphoreTake+0x380>)
   1c44a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c44c:	2300      	movs	r3, #0
   1c44e:	e147      	b.n	1c6e0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c452:	2b00      	cmp	r3, #0
   1c454:	d106      	bne.n	1c464 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c456:	230c      	movs	r3, #12
   1c458:	18fb      	adds	r3, r7, r3
   1c45a:	0018      	movs	r0, r3
   1c45c:	4b6a      	ldr	r3, [pc, #424]	; (1c608 <xQueueSemaphoreTake+0x39c>)
   1c45e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c460:	2301      	movs	r3, #1
   1c462:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c464:	4b67      	ldr	r3, [pc, #412]	; (1c604 <xQueueSemaphoreTake+0x398>)
   1c466:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c468:	4b68      	ldr	r3, [pc, #416]	; (1c60c <xQueueSemaphoreTake+0x3a0>)
   1c46a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c46c:	4b57      	ldr	r3, [pc, #348]	; (1c5cc <xQueueSemaphoreTake+0x360>)
   1c46e:	4798      	blx	r3
   1c470:	69fb      	ldr	r3, [r7, #28]
   1c472:	2244      	movs	r2, #68	; 0x44
   1c474:	5c9b      	ldrb	r3, [r3, r2]
   1c476:	b25b      	sxtb	r3, r3
   1c478:	3301      	adds	r3, #1
   1c47a:	d103      	bne.n	1c484 <xQueueSemaphoreTake+0x218>
   1c47c:	69fb      	ldr	r3, [r7, #28]
   1c47e:	2244      	movs	r2, #68	; 0x44
   1c480:	2100      	movs	r1, #0
   1c482:	5499      	strb	r1, [r3, r2]
   1c484:	69fb      	ldr	r3, [r7, #28]
   1c486:	2245      	movs	r2, #69	; 0x45
   1c488:	5c9b      	ldrb	r3, [r3, r2]
   1c48a:	b25b      	sxtb	r3, r3
   1c48c:	3301      	adds	r3, #1
   1c48e:	d103      	bne.n	1c498 <xQueueSemaphoreTake+0x22c>
   1c490:	69fb      	ldr	r3, [r7, #28]
   1c492:	2245      	movs	r2, #69	; 0x45
   1c494:	2100      	movs	r1, #0
   1c496:	5499      	strb	r1, [r3, r2]
   1c498:	4b5a      	ldr	r3, [pc, #360]	; (1c604 <xQueueSemaphoreTake+0x398>)
   1c49a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c49c:	003a      	movs	r2, r7
   1c49e:	230c      	movs	r3, #12
   1c4a0:	18fb      	adds	r3, r7, r3
   1c4a2:	0011      	movs	r1, r2
   1c4a4:	0018      	movs	r0, r3
   1c4a6:	4b5a      	ldr	r3, [pc, #360]	; (1c610 <xQueueSemaphoreTake+0x3a4>)
   1c4a8:	4798      	blx	r3
   1c4aa:	1e03      	subs	r3, r0, #0
   1c4ac:	d000      	beq.n	1c4b0 <xQueueSemaphoreTake+0x244>
   1c4ae:	e0bd      	b.n	1c62c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c4b0:	69fb      	ldr	r3, [r7, #28]
   1c4b2:	0018      	movs	r0, r3
   1c4b4:	4b57      	ldr	r3, [pc, #348]	; (1c614 <xQueueSemaphoreTake+0x3a8>)
   1c4b6:	4798      	blx	r3
   1c4b8:	1e03      	subs	r3, r0, #0
   1c4ba:	d100      	bne.n	1c4be <xQueueSemaphoreTake+0x252>
   1c4bc:	e07c      	b.n	1c5b8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c4be:	4b44      	ldr	r3, [pc, #272]	; (1c5d0 <xQueueSemaphoreTake+0x364>)
   1c4c0:	4798      	blx	r3
   1c4c2:	0003      	movs	r3, r0
   1c4c4:	0018      	movs	r0, r3
   1c4c6:	4b43      	ldr	r3, [pc, #268]	; (1c5d4 <xQueueSemaphoreTake+0x368>)
   1c4c8:	4798      	blx	r3
   1c4ca:	0003      	movs	r3, r0
   1c4cc:	001a      	movs	r2, r3
   1c4ce:	4b42      	ldr	r3, [pc, #264]	; (1c5d8 <xQueueSemaphoreTake+0x36c>)
   1c4d0:	881b      	ldrh	r3, [r3, #0]
   1c4d2:	4013      	ands	r3, r2
   1c4d4:	b29b      	uxth	r3, r3
   1c4d6:	2b00      	cmp	r3, #0
   1c4d8:	d029      	beq.n	1c52e <xQueueSemaphoreTake+0x2c2>
   1c4da:	69fb      	ldr	r3, [r7, #28]
   1c4dc:	0018      	movs	r0, r3
   1c4de:	4b3f      	ldr	r3, [pc, #252]	; (1c5dc <xQueueSemaphoreTake+0x370>)
   1c4e0:	4798      	blx	r3
   1c4e2:	0003      	movs	r3, r0
   1c4e4:	001a      	movs	r2, r3
   1c4e6:	4b3c      	ldr	r3, [pc, #240]	; (1c5d8 <xQueueSemaphoreTake+0x36c>)
   1c4e8:	881b      	ldrh	r3, [r3, #0]
   1c4ea:	4013      	ands	r3, r2
   1c4ec:	b29b      	uxth	r3, r3
   1c4ee:	2b00      	cmp	r3, #0
   1c4f0:	d01d      	beq.n	1c52e <xQueueSemaphoreTake+0x2c2>
   1c4f2:	69fb      	ldr	r3, [r7, #28]
   1c4f4:	0018      	movs	r0, r3
   1c4f6:	4b3a      	ldr	r3, [pc, #232]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c4f8:	4798      	blx	r3
   1c4fa:	0003      	movs	r3, r0
   1c4fc:	001a      	movs	r2, r3
   1c4fe:	4b39      	ldr	r3, [pc, #228]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c500:	5c9b      	ldrb	r3, [r3, r2]
   1c502:	3368      	adds	r3, #104	; 0x68
   1c504:	b2db      	uxtb	r3, r3
   1c506:	001d      	movs	r5, r3
   1c508:	69fb      	ldr	r3, [r7, #28]
   1c50a:	0018      	movs	r0, r3
   1c50c:	4b34      	ldr	r3, [pc, #208]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c50e:	4798      	blx	r3
   1c510:	0003      	movs	r3, r0
   1c512:	001a      	movs	r2, r3
   1c514:	4b33      	ldr	r3, [pc, #204]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c516:	5c9c      	ldrb	r4, [r3, r2]
   1c518:	69fb      	ldr	r3, [r7, #28]
   1c51a:	0018      	movs	r0, r3
   1c51c:	4b32      	ldr	r3, [pc, #200]	; (1c5e8 <xQueueSemaphoreTake+0x37c>)
   1c51e:	4798      	blx	r3
   1c520:	0003      	movs	r3, r0
   1c522:	b2db      	uxtb	r3, r3
   1c524:	001a      	movs	r2, r3
   1c526:	0021      	movs	r1, r4
   1c528:	0028      	movs	r0, r5
   1c52a:	4b30      	ldr	r3, [pc, #192]	; (1c5ec <xQueueSemaphoreTake+0x380>)
   1c52c:	4798      	blx	r3
   1c52e:	69fb      	ldr	r3, [r7, #28]
   1c530:	0018      	movs	r0, r3
   1c532:	4b2b      	ldr	r3, [pc, #172]	; (1c5e0 <xQueueSemaphoreTake+0x374>)
   1c534:	4798      	blx	r3
   1c536:	0003      	movs	r3, r0
   1c538:	001a      	movs	r2, r3
   1c53a:	4b2a      	ldr	r3, [pc, #168]	; (1c5e4 <xQueueSemaphoreTake+0x378>)
   1c53c:	5c9b      	ldrb	r3, [r3, r2]
   1c53e:	2b02      	cmp	r3, #2
   1c540:	d018      	beq.n	1c574 <xQueueSemaphoreTake+0x308>
   1c542:	4b23      	ldr	r3, [pc, #140]	; (1c5d0 <xQueueSemaphoreTake+0x364>)
   1c544:	4798      	blx	r3
   1c546:	0003      	movs	r3, r0
   1c548:	0018      	movs	r0, r3
   1c54a:	4b22      	ldr	r3, [pc, #136]	; (1c5d4 <xQueueSemaphoreTake+0x368>)
   1c54c:	4798      	blx	r3
   1c54e:	0003      	movs	r3, r0
   1c550:	001a      	movs	r2, r3
   1c552:	4b21      	ldr	r3, [pc, #132]	; (1c5d8 <xQueueSemaphoreTake+0x36c>)
   1c554:	881b      	ldrh	r3, [r3, #0]
   1c556:	4013      	ands	r3, r2
   1c558:	b29b      	uxth	r3, r3
   1c55a:	2b00      	cmp	r3, #0
   1c55c:	d00a      	beq.n	1c574 <xQueueSemaphoreTake+0x308>
   1c55e:	4b1c      	ldr	r3, [pc, #112]	; (1c5d0 <xQueueSemaphoreTake+0x364>)
   1c560:	4798      	blx	r3
   1c562:	0003      	movs	r3, r0
   1c564:	0018      	movs	r0, r3
   1c566:	4b22      	ldr	r3, [pc, #136]	; (1c5f0 <xQueueSemaphoreTake+0x384>)
   1c568:	4798      	blx	r3
   1c56a:	0003      	movs	r3, r0
   1c56c:	b2db      	uxtb	r3, r3
   1c56e:	0018      	movs	r0, r3
   1c570:	4b29      	ldr	r3, [pc, #164]	; (1c618 <xQueueSemaphoreTake+0x3ac>)
   1c572:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c574:	69fb      	ldr	r3, [r7, #28]
   1c576:	681b      	ldr	r3, [r3, #0]
   1c578:	2b00      	cmp	r3, #0
   1c57a:	d10a      	bne.n	1c592 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1c57c:	4b13      	ldr	r3, [pc, #76]	; (1c5cc <xQueueSemaphoreTake+0x360>)
   1c57e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1c580:	69fb      	ldr	r3, [r7, #28]
   1c582:	685b      	ldr	r3, [r3, #4]
   1c584:	0018      	movs	r0, r3
   1c586:	4b25      	ldr	r3, [pc, #148]	; (1c61c <xQueueSemaphoreTake+0x3b0>)
   1c588:	4798      	blx	r3
   1c58a:	0003      	movs	r3, r0
   1c58c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1c58e:	4b1d      	ldr	r3, [pc, #116]	; (1c604 <xQueueSemaphoreTake+0x398>)
   1c590:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c592:	69fb      	ldr	r3, [r7, #28]
   1c594:	3324      	adds	r3, #36	; 0x24
   1c596:	683a      	ldr	r2, [r7, #0]
   1c598:	0011      	movs	r1, r2
   1c59a:	0018      	movs	r0, r3
   1c59c:	4b20      	ldr	r3, [pc, #128]	; (1c620 <xQueueSemaphoreTake+0x3b4>)
   1c59e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c5a0:	69fb      	ldr	r3, [r7, #28]
   1c5a2:	0018      	movs	r0, r3
   1c5a4:	4b1f      	ldr	r3, [pc, #124]	; (1c624 <xQueueSemaphoreTake+0x3b8>)
   1c5a6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c5a8:	4b1f      	ldr	r3, [pc, #124]	; (1c628 <xQueueSemaphoreTake+0x3bc>)
   1c5aa:	4798      	blx	r3
   1c5ac:	1e03      	subs	r3, r0, #0
   1c5ae:	d000      	beq.n	1c5b2 <xQueueSemaphoreTake+0x346>
   1c5b0:	e680      	b.n	1c2b4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1c5b2:	4b13      	ldr	r3, [pc, #76]	; (1c600 <xQueueSemaphoreTake+0x394>)
   1c5b4:	4798      	blx	r3
   1c5b6:	e67d      	b.n	1c2b4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1c5b8:	69fb      	ldr	r3, [r7, #28]
   1c5ba:	0018      	movs	r0, r3
   1c5bc:	4b19      	ldr	r3, [pc, #100]	; (1c624 <xQueueSemaphoreTake+0x3b8>)
   1c5be:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c5c0:	4b19      	ldr	r3, [pc, #100]	; (1c628 <xQueueSemaphoreTake+0x3bc>)
   1c5c2:	4798      	blx	r3
   1c5c4:	e676      	b.n	1c2b4 <xQueueSemaphoreTake+0x48>
   1c5c6:	46c0      	nop			; (mov r8, r8)
   1c5c8:	0001dce9 	.word	0x0001dce9
   1c5cc:	0001afc9 	.word	0x0001afc9
   1c5d0:	0001925d 	.word	0x0001925d
   1c5d4:	00018fc1 	.word	0x00018fc1
   1c5d8:	20000110 	.word	0x20000110
   1c5dc:	00019081 	.word	0x00019081
   1c5e0:	00018f81 	.word	0x00018f81
   1c5e4:	20000104 	.word	0x20000104
   1c5e8:	00019061 	.word	0x00019061
   1c5ec:	000199b9 	.word	0x000199b9
   1c5f0:	00018fa1 	.word	0x00018fa1
   1c5f4:	0001a015 	.word	0x0001a015
   1c5f8:	0001e1b5 	.word	0x0001e1b5
   1c5fc:	0001d859 	.word	0x0001d859
   1c600:	0001afb1 	.word	0x0001afb1
   1c604:	0001afed 	.word	0x0001afed
   1c608:	0001d999 	.word	0x0001d999
   1c60c:	0001d281 	.word	0x0001d281
   1c610:	0001d9c1 	.word	0x0001d9c1
   1c614:	0001c9b5 	.word	0x0001c9b5
   1c618:	0001a151 	.word	0x0001a151
   1c61c:	0001dd21 	.word	0x0001dd21
   1c620:	0001d735 	.word	0x0001d735
   1c624:	0001c8c5 	.word	0x0001c8c5
   1c628:	0001d299 	.word	0x0001d299
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1c62c:	69fb      	ldr	r3, [r7, #28]
   1c62e:	0018      	movs	r0, r3
   1c630:	4b2d      	ldr	r3, [pc, #180]	; (1c6e8 <xQueueSemaphoreTake+0x47c>)
   1c632:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c634:	4b2d      	ldr	r3, [pc, #180]	; (1c6ec <xQueueSemaphoreTake+0x480>)
   1c636:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c638:	69fb      	ldr	r3, [r7, #28]
   1c63a:	0018      	movs	r0, r3
   1c63c:	4b2c      	ldr	r3, [pc, #176]	; (1c6f0 <xQueueSemaphoreTake+0x484>)
   1c63e:	4798      	blx	r3
   1c640:	1e03      	subs	r3, r0, #0
   1c642:	d100      	bne.n	1c646 <xQueueSemaphoreTake+0x3da>
   1c644:	e636      	b.n	1c2b4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1c646:	6a3b      	ldr	r3, [r7, #32]
   1c648:	2b00      	cmp	r3, #0
   1c64a:	d010      	beq.n	1c66e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1c64c:	4b29      	ldr	r3, [pc, #164]	; (1c6f4 <xQueueSemaphoreTake+0x488>)
   1c64e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1c650:	69fb      	ldr	r3, [r7, #28]
   1c652:	0018      	movs	r0, r3
   1c654:	4b28      	ldr	r3, [pc, #160]	; (1c6f8 <xQueueSemaphoreTake+0x48c>)
   1c656:	4798      	blx	r3
   1c658:	0003      	movs	r3, r0
   1c65a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1c65c:	69fb      	ldr	r3, [r7, #28]
   1c65e:	685b      	ldr	r3, [r3, #4]
   1c660:	697a      	ldr	r2, [r7, #20]
   1c662:	0011      	movs	r1, r2
   1c664:	0018      	movs	r0, r3
   1c666:	4b25      	ldr	r3, [pc, #148]	; (1c6fc <xQueueSemaphoreTake+0x490>)
   1c668:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1c66a:	4b25      	ldr	r3, [pc, #148]	; (1c700 <xQueueSemaphoreTake+0x494>)
   1c66c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c66e:	4b25      	ldr	r3, [pc, #148]	; (1c704 <xQueueSemaphoreTake+0x498>)
   1c670:	4798      	blx	r3
   1c672:	0003      	movs	r3, r0
   1c674:	0018      	movs	r0, r3
   1c676:	4b24      	ldr	r3, [pc, #144]	; (1c708 <xQueueSemaphoreTake+0x49c>)
   1c678:	4798      	blx	r3
   1c67a:	0003      	movs	r3, r0
   1c67c:	001a      	movs	r2, r3
   1c67e:	4b23      	ldr	r3, [pc, #140]	; (1c70c <xQueueSemaphoreTake+0x4a0>)
   1c680:	881b      	ldrh	r3, [r3, #0]
   1c682:	4013      	ands	r3, r2
   1c684:	b29b      	uxth	r3, r3
   1c686:	2b00      	cmp	r3, #0
   1c688:	d029      	beq.n	1c6de <xQueueSemaphoreTake+0x472>
   1c68a:	69fb      	ldr	r3, [r7, #28]
   1c68c:	0018      	movs	r0, r3
   1c68e:	4b20      	ldr	r3, [pc, #128]	; (1c710 <xQueueSemaphoreTake+0x4a4>)
   1c690:	4798      	blx	r3
   1c692:	0003      	movs	r3, r0
   1c694:	001a      	movs	r2, r3
   1c696:	4b1d      	ldr	r3, [pc, #116]	; (1c70c <xQueueSemaphoreTake+0x4a0>)
   1c698:	881b      	ldrh	r3, [r3, #0]
   1c69a:	4013      	ands	r3, r2
   1c69c:	b29b      	uxth	r3, r3
   1c69e:	2b00      	cmp	r3, #0
   1c6a0:	d01d      	beq.n	1c6de <xQueueSemaphoreTake+0x472>
   1c6a2:	69fb      	ldr	r3, [r7, #28]
   1c6a4:	0018      	movs	r0, r3
   1c6a6:	4b1b      	ldr	r3, [pc, #108]	; (1c714 <xQueueSemaphoreTake+0x4a8>)
   1c6a8:	4798      	blx	r3
   1c6aa:	0003      	movs	r3, r0
   1c6ac:	001a      	movs	r2, r3
   1c6ae:	4b1a      	ldr	r3, [pc, #104]	; (1c718 <xQueueSemaphoreTake+0x4ac>)
   1c6b0:	5c9b      	ldrb	r3, [r3, r2]
   1c6b2:	3350      	adds	r3, #80	; 0x50
   1c6b4:	b2db      	uxtb	r3, r3
   1c6b6:	001d      	movs	r5, r3
   1c6b8:	69fb      	ldr	r3, [r7, #28]
   1c6ba:	0018      	movs	r0, r3
   1c6bc:	4b15      	ldr	r3, [pc, #84]	; (1c714 <xQueueSemaphoreTake+0x4a8>)
   1c6be:	4798      	blx	r3
   1c6c0:	0003      	movs	r3, r0
   1c6c2:	001a      	movs	r2, r3
   1c6c4:	4b14      	ldr	r3, [pc, #80]	; (1c718 <xQueueSemaphoreTake+0x4ac>)
   1c6c6:	5c9c      	ldrb	r4, [r3, r2]
   1c6c8:	69fb      	ldr	r3, [r7, #28]
   1c6ca:	0018      	movs	r0, r3
   1c6cc:	4b13      	ldr	r3, [pc, #76]	; (1c71c <xQueueSemaphoreTake+0x4b0>)
   1c6ce:	4798      	blx	r3
   1c6d0:	0003      	movs	r3, r0
   1c6d2:	b2db      	uxtb	r3, r3
   1c6d4:	001a      	movs	r2, r3
   1c6d6:	0021      	movs	r1, r4
   1c6d8:	0028      	movs	r0, r5
   1c6da:	4b11      	ldr	r3, [pc, #68]	; (1c720 <xQueueSemaphoreTake+0x4b4>)
   1c6dc:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c6de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c6e0:	0018      	movs	r0, r3
   1c6e2:	46bd      	mov	sp, r7
   1c6e4:	b00a      	add	sp, #40	; 0x28
   1c6e6:	bdb0      	pop	{r4, r5, r7, pc}
   1c6e8:	0001c8c5 	.word	0x0001c8c5
   1c6ec:	0001d299 	.word	0x0001d299
   1c6f0:	0001c9b5 	.word	0x0001c9b5
   1c6f4:	0001afc9 	.word	0x0001afc9
   1c6f8:	0001c767 	.word	0x0001c767
   1c6fc:	0001e019 	.word	0x0001e019
   1c700:	0001afed 	.word	0x0001afed
   1c704:	0001925d 	.word	0x0001925d
   1c708:	00018fc1 	.word	0x00018fc1
   1c70c:	20000110 	.word	0x20000110
   1c710:	00019081 	.word	0x00019081
   1c714:	00018f81 	.word	0x00018f81
   1c718:	20000104 	.word	0x20000104
   1c71c:	00019061 	.word	0x00019061
   1c720:	000199b9 	.word	0x000199b9

0001c724 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c724:	b580      	push	{r7, lr}
   1c726:	b082      	sub	sp, #8
   1c728:	af00      	add	r7, sp, #0
   1c72a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c72c:	687b      	ldr	r3, [r7, #4]
   1c72e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c730:	0018      	movs	r0, r3
   1c732:	46bd      	mov	sp, r7
   1c734:	b002      	add	sp, #8
   1c736:	bd80      	pop	{r7, pc}

0001c738 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c738:	b580      	push	{r7, lr}
   1c73a:	b082      	sub	sp, #8
   1c73c:	af00      	add	r7, sp, #0
   1c73e:	6078      	str	r0, [r7, #4]
   1c740:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c742:	687b      	ldr	r3, [r7, #4]
   1c744:	683a      	ldr	r2, [r7, #0]
   1c746:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c748:	46c0      	nop			; (mov r8, r8)
   1c74a:	46bd      	mov	sp, r7
   1c74c:	b002      	add	sp, #8
   1c74e:	bd80      	pop	{r7, pc}

0001c750 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c750:	b580      	push	{r7, lr}
   1c752:	b082      	sub	sp, #8
   1c754:	af00      	add	r7, sp, #0
   1c756:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c758:	687b      	ldr	r3, [r7, #4]
   1c75a:	2250      	movs	r2, #80	; 0x50
   1c75c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c75e:	0018      	movs	r0, r3
   1c760:	46bd      	mov	sp, r7
   1c762:	b002      	add	sp, #8
   1c764:	bd80      	pop	{r7, pc}

0001c766 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c766:	b580      	push	{r7, lr}
   1c768:	b084      	sub	sp, #16
   1c76a:	af00      	add	r7, sp, #0
   1c76c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c76e:	687b      	ldr	r3, [r7, #4]
   1c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c772:	2b00      	cmp	r3, #0
   1c774:	d006      	beq.n	1c784 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c776:	687b      	ldr	r3, [r7, #4]
   1c778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c77a:	681b      	ldr	r3, [r3, #0]
   1c77c:	2205      	movs	r2, #5
   1c77e:	1ad3      	subs	r3, r2, r3
   1c780:	60fb      	str	r3, [r7, #12]
   1c782:	e001      	b.n	1c788 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c784:	2300      	movs	r3, #0
   1c786:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c788:	68fb      	ldr	r3, [r7, #12]
	}
   1c78a:	0018      	movs	r0, r3
   1c78c:	46bd      	mov	sp, r7
   1c78e:	b004      	add	sp, #16
   1c790:	bd80      	pop	{r7, pc}
	...

0001c794 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c794:	b580      	push	{r7, lr}
   1c796:	b086      	sub	sp, #24
   1c798:	af00      	add	r7, sp, #0
   1c79a:	60f8      	str	r0, [r7, #12]
   1c79c:	60b9      	str	r1, [r7, #8]
   1c79e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c7a0:	2300      	movs	r3, #0
   1c7a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c7a4:	68fb      	ldr	r3, [r7, #12]
   1c7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c7a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c7aa:	68fb      	ldr	r3, [r7, #12]
   1c7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c7ae:	2b00      	cmp	r3, #0
   1c7b0:	d10e      	bne.n	1c7d0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c7b2:	68fb      	ldr	r3, [r7, #12]
   1c7b4:	681b      	ldr	r3, [r3, #0]
   1c7b6:	2b00      	cmp	r3, #0
   1c7b8:	d14e      	bne.n	1c858 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c7ba:	68fb      	ldr	r3, [r7, #12]
   1c7bc:	685b      	ldr	r3, [r3, #4]
   1c7be:	0018      	movs	r0, r3
   1c7c0:	4b2a      	ldr	r3, [pc, #168]	; (1c86c <prvCopyDataToQueue+0xd8>)
   1c7c2:	4798      	blx	r3
   1c7c4:	0003      	movs	r3, r0
   1c7c6:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c7c8:	68fb      	ldr	r3, [r7, #12]
   1c7ca:	2200      	movs	r2, #0
   1c7cc:	605a      	str	r2, [r3, #4]
   1c7ce:	e043      	b.n	1c858 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c7d0:	687b      	ldr	r3, [r7, #4]
   1c7d2:	2b00      	cmp	r3, #0
   1c7d4:	d119      	bne.n	1c80a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c7d6:	68fb      	ldr	r3, [r7, #12]
   1c7d8:	6898      	ldr	r0, [r3, #8]
   1c7da:	68fb      	ldr	r3, [r7, #12]
   1c7dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c7de:	68bb      	ldr	r3, [r7, #8]
   1c7e0:	0019      	movs	r1, r3
   1c7e2:	4b23      	ldr	r3, [pc, #140]	; (1c870 <prvCopyDataToQueue+0xdc>)
   1c7e4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c7e6:	68fb      	ldr	r3, [r7, #12]
   1c7e8:	689a      	ldr	r2, [r3, #8]
   1c7ea:	68fb      	ldr	r3, [r7, #12]
   1c7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c7ee:	18d2      	adds	r2, r2, r3
   1c7f0:	68fb      	ldr	r3, [r7, #12]
   1c7f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c7f4:	68fb      	ldr	r3, [r7, #12]
   1c7f6:	689a      	ldr	r2, [r3, #8]
   1c7f8:	68fb      	ldr	r3, [r7, #12]
   1c7fa:	685b      	ldr	r3, [r3, #4]
   1c7fc:	429a      	cmp	r2, r3
   1c7fe:	d32b      	bcc.n	1c858 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c800:	68fb      	ldr	r3, [r7, #12]
   1c802:	681a      	ldr	r2, [r3, #0]
   1c804:	68fb      	ldr	r3, [r7, #12]
   1c806:	609a      	str	r2, [r3, #8]
   1c808:	e026      	b.n	1c858 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c80a:	68fb      	ldr	r3, [r7, #12]
   1c80c:	68d8      	ldr	r0, [r3, #12]
   1c80e:	68fb      	ldr	r3, [r7, #12]
   1c810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c812:	68bb      	ldr	r3, [r7, #8]
   1c814:	0019      	movs	r1, r3
   1c816:	4b16      	ldr	r3, [pc, #88]	; (1c870 <prvCopyDataToQueue+0xdc>)
   1c818:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c81a:	68fb      	ldr	r3, [r7, #12]
   1c81c:	68da      	ldr	r2, [r3, #12]
   1c81e:	68fb      	ldr	r3, [r7, #12]
   1c820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c822:	425b      	negs	r3, r3
   1c824:	18d2      	adds	r2, r2, r3
   1c826:	68fb      	ldr	r3, [r7, #12]
   1c828:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c82a:	68fb      	ldr	r3, [r7, #12]
   1c82c:	68da      	ldr	r2, [r3, #12]
   1c82e:	68fb      	ldr	r3, [r7, #12]
   1c830:	681b      	ldr	r3, [r3, #0]
   1c832:	429a      	cmp	r2, r3
   1c834:	d207      	bcs.n	1c846 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c836:	68fb      	ldr	r3, [r7, #12]
   1c838:	685a      	ldr	r2, [r3, #4]
   1c83a:	68fb      	ldr	r3, [r7, #12]
   1c83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c83e:	425b      	negs	r3, r3
   1c840:	18d2      	adds	r2, r2, r3
   1c842:	68fb      	ldr	r3, [r7, #12]
   1c844:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c846:	687b      	ldr	r3, [r7, #4]
   1c848:	2b02      	cmp	r3, #2
   1c84a:	d105      	bne.n	1c858 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c84c:	693b      	ldr	r3, [r7, #16]
   1c84e:	2b00      	cmp	r3, #0
   1c850:	d002      	beq.n	1c858 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c852:	693b      	ldr	r3, [r7, #16]
   1c854:	3b01      	subs	r3, #1
   1c856:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c858:	693b      	ldr	r3, [r7, #16]
   1c85a:	1c5a      	adds	r2, r3, #1
   1c85c:	68fb      	ldr	r3, [r7, #12]
   1c85e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c860:	697b      	ldr	r3, [r7, #20]
}
   1c862:	0018      	movs	r0, r3
   1c864:	46bd      	mov	sp, r7
   1c866:	b006      	add	sp, #24
   1c868:	bd80      	pop	{r7, pc}
   1c86a:	46c0      	nop			; (mov r8, r8)
   1c86c:	0001deb1 	.word	0x0001deb1
   1c870:	00035749 	.word	0x00035749

0001c874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c874:	b580      	push	{r7, lr}
   1c876:	b082      	sub	sp, #8
   1c878:	af00      	add	r7, sp, #0
   1c87a:	6078      	str	r0, [r7, #4]
   1c87c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c87e:	687b      	ldr	r3, [r7, #4]
   1c880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c882:	2b00      	cmp	r3, #0
   1c884:	d018      	beq.n	1c8b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c886:	687b      	ldr	r3, [r7, #4]
   1c888:	68da      	ldr	r2, [r3, #12]
   1c88a:	687b      	ldr	r3, [r7, #4]
   1c88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c88e:	18d2      	adds	r2, r2, r3
   1c890:	687b      	ldr	r3, [r7, #4]
   1c892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c894:	687b      	ldr	r3, [r7, #4]
   1c896:	68da      	ldr	r2, [r3, #12]
   1c898:	687b      	ldr	r3, [r7, #4]
   1c89a:	685b      	ldr	r3, [r3, #4]
   1c89c:	429a      	cmp	r2, r3
   1c89e:	d303      	bcc.n	1c8a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c8a0:	687b      	ldr	r3, [r7, #4]
   1c8a2:	681a      	ldr	r2, [r3, #0]
   1c8a4:	687b      	ldr	r3, [r7, #4]
   1c8a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c8a8:	687b      	ldr	r3, [r7, #4]
   1c8aa:	68d9      	ldr	r1, [r3, #12]
   1c8ac:	687b      	ldr	r3, [r7, #4]
   1c8ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c8b0:	683b      	ldr	r3, [r7, #0]
   1c8b2:	0018      	movs	r0, r3
   1c8b4:	4b02      	ldr	r3, [pc, #8]	; (1c8c0 <prvCopyDataFromQueue+0x4c>)
   1c8b6:	4798      	blx	r3
	}
}
   1c8b8:	46c0      	nop			; (mov r8, r8)
   1c8ba:	46bd      	mov	sp, r7
   1c8bc:	b002      	add	sp, #8
   1c8be:	bd80      	pop	{r7, pc}
   1c8c0:	00035749 	.word	0x00035749

0001c8c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c8c4:	b580      	push	{r7, lr}
   1c8c6:	b084      	sub	sp, #16
   1c8c8:	af00      	add	r7, sp, #0
   1c8ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c8cc:	4b34      	ldr	r3, [pc, #208]	; (1c9a0 <prvUnlockQueue+0xdc>)
   1c8ce:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c8d0:	230f      	movs	r3, #15
   1c8d2:	18fb      	adds	r3, r7, r3
   1c8d4:	687a      	ldr	r2, [r7, #4]
   1c8d6:	2145      	movs	r1, #69	; 0x45
   1c8d8:	5c52      	ldrb	r2, [r2, r1]
   1c8da:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c8dc:	e022      	b.n	1c924 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c8de:	687b      	ldr	r3, [r7, #4]
   1c8e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c8e2:	2b00      	cmp	r3, #0
   1c8e4:	d009      	beq.n	1c8fa <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c8e6:	687b      	ldr	r3, [r7, #4]
   1c8e8:	2100      	movs	r1, #0
   1c8ea:	0018      	movs	r0, r3
   1c8ec:	4b2d      	ldr	r3, [pc, #180]	; (1c9a4 <prvUnlockQueue+0xe0>)
   1c8ee:	4798      	blx	r3
   1c8f0:	1e03      	subs	r3, r0, #0
   1c8f2:	d00f      	beq.n	1c914 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c8f4:	4b2c      	ldr	r3, [pc, #176]	; (1c9a8 <prvUnlockQueue+0xe4>)
   1c8f6:	4798      	blx	r3
   1c8f8:	e00c      	b.n	1c914 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c8fa:	687b      	ldr	r3, [r7, #4]
   1c8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c8fe:	2b00      	cmp	r3, #0
   1c900:	d017      	beq.n	1c932 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c902:	687b      	ldr	r3, [r7, #4]
   1c904:	3324      	adds	r3, #36	; 0x24
   1c906:	0018      	movs	r0, r3
   1c908:	4b28      	ldr	r3, [pc, #160]	; (1c9ac <prvUnlockQueue+0xe8>)
   1c90a:	4798      	blx	r3
   1c90c:	1e03      	subs	r3, r0, #0
   1c90e:	d001      	beq.n	1c914 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c910:	4b25      	ldr	r3, [pc, #148]	; (1c9a8 <prvUnlockQueue+0xe4>)
   1c912:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c914:	230f      	movs	r3, #15
   1c916:	18fb      	adds	r3, r7, r3
   1c918:	781b      	ldrb	r3, [r3, #0]
   1c91a:	3b01      	subs	r3, #1
   1c91c:	b2da      	uxtb	r2, r3
   1c91e:	230f      	movs	r3, #15
   1c920:	18fb      	adds	r3, r7, r3
   1c922:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c924:	230f      	movs	r3, #15
   1c926:	18fb      	adds	r3, r7, r3
   1c928:	781b      	ldrb	r3, [r3, #0]
   1c92a:	b25b      	sxtb	r3, r3
   1c92c:	2b00      	cmp	r3, #0
   1c92e:	dcd6      	bgt.n	1c8de <prvUnlockQueue+0x1a>
   1c930:	e000      	b.n	1c934 <prvUnlockQueue+0x70>
						break;
   1c932:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c934:	687b      	ldr	r3, [r7, #4]
   1c936:	2245      	movs	r2, #69	; 0x45
   1c938:	21ff      	movs	r1, #255	; 0xff
   1c93a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c93c:	4b1c      	ldr	r3, [pc, #112]	; (1c9b0 <prvUnlockQueue+0xec>)
   1c93e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c940:	4b17      	ldr	r3, [pc, #92]	; (1c9a0 <prvUnlockQueue+0xdc>)
   1c942:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c944:	230e      	movs	r3, #14
   1c946:	18fb      	adds	r3, r7, r3
   1c948:	687a      	ldr	r2, [r7, #4]
   1c94a:	2144      	movs	r1, #68	; 0x44
   1c94c:	5c52      	ldrb	r2, [r2, r1]
   1c94e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c950:	e014      	b.n	1c97c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c952:	687b      	ldr	r3, [r7, #4]
   1c954:	691b      	ldr	r3, [r3, #16]
   1c956:	2b00      	cmp	r3, #0
   1c958:	d017      	beq.n	1c98a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c95a:	687b      	ldr	r3, [r7, #4]
   1c95c:	3310      	adds	r3, #16
   1c95e:	0018      	movs	r0, r3
   1c960:	4b12      	ldr	r3, [pc, #72]	; (1c9ac <prvUnlockQueue+0xe8>)
   1c962:	4798      	blx	r3
   1c964:	1e03      	subs	r3, r0, #0
   1c966:	d001      	beq.n	1c96c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c968:	4b0f      	ldr	r3, [pc, #60]	; (1c9a8 <prvUnlockQueue+0xe4>)
   1c96a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c96c:	230e      	movs	r3, #14
   1c96e:	18fb      	adds	r3, r7, r3
   1c970:	781b      	ldrb	r3, [r3, #0]
   1c972:	3b01      	subs	r3, #1
   1c974:	b2da      	uxtb	r2, r3
   1c976:	230e      	movs	r3, #14
   1c978:	18fb      	adds	r3, r7, r3
   1c97a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c97c:	230e      	movs	r3, #14
   1c97e:	18fb      	adds	r3, r7, r3
   1c980:	781b      	ldrb	r3, [r3, #0]
   1c982:	b25b      	sxtb	r3, r3
   1c984:	2b00      	cmp	r3, #0
   1c986:	dce4      	bgt.n	1c952 <prvUnlockQueue+0x8e>
   1c988:	e000      	b.n	1c98c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c98a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c98c:	687b      	ldr	r3, [r7, #4]
   1c98e:	2244      	movs	r2, #68	; 0x44
   1c990:	21ff      	movs	r1, #255	; 0xff
   1c992:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c994:	4b06      	ldr	r3, [pc, #24]	; (1c9b0 <prvUnlockQueue+0xec>)
   1c996:	4798      	blx	r3
}
   1c998:	46c0      	nop			; (mov r8, r8)
   1c99a:	46bd      	mov	sp, r7
   1c99c:	b004      	add	sp, #16
   1c99e:	bd80      	pop	{r7, pc}
   1c9a0:	0001afc9 	.word	0x0001afc9
   1c9a4:	0001ca99 	.word	0x0001ca99
   1c9a8:	0001da6d 	.word	0x0001da6d
   1c9ac:	0001d859 	.word	0x0001d859
   1c9b0:	0001afed 	.word	0x0001afed

0001c9b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c9b4:	b580      	push	{r7, lr}
   1c9b6:	b084      	sub	sp, #16
   1c9b8:	af00      	add	r7, sp, #0
   1c9ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c9bc:	4b08      	ldr	r3, [pc, #32]	; (1c9e0 <prvIsQueueEmpty+0x2c>)
   1c9be:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c9c0:	687b      	ldr	r3, [r7, #4]
   1c9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c9c4:	2b00      	cmp	r3, #0
   1c9c6:	d102      	bne.n	1c9ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c9c8:	2301      	movs	r3, #1
   1c9ca:	60fb      	str	r3, [r7, #12]
   1c9cc:	e001      	b.n	1c9d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c9ce:	2300      	movs	r3, #0
   1c9d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c9d2:	4b04      	ldr	r3, [pc, #16]	; (1c9e4 <prvIsQueueEmpty+0x30>)
   1c9d4:	4798      	blx	r3

	return xReturn;
   1c9d6:	68fb      	ldr	r3, [r7, #12]
}
   1c9d8:	0018      	movs	r0, r3
   1c9da:	46bd      	mov	sp, r7
   1c9dc:	b004      	add	sp, #16
   1c9de:	bd80      	pop	{r7, pc}
   1c9e0:	0001afc9 	.word	0x0001afc9
   1c9e4:	0001afed 	.word	0x0001afed

0001c9e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c9e8:	b580      	push	{r7, lr}
   1c9ea:	b084      	sub	sp, #16
   1c9ec:	af00      	add	r7, sp, #0
   1c9ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c9f0:	4b09      	ldr	r3, [pc, #36]	; (1ca18 <prvIsQueueFull+0x30>)
   1c9f2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c9f4:	687b      	ldr	r3, [r7, #4]
   1c9f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c9f8:	687b      	ldr	r3, [r7, #4]
   1c9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c9fc:	429a      	cmp	r2, r3
   1c9fe:	d102      	bne.n	1ca06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1ca00:	2301      	movs	r3, #1
   1ca02:	60fb      	str	r3, [r7, #12]
   1ca04:	e001      	b.n	1ca0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1ca06:	2300      	movs	r3, #0
   1ca08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1ca0a:	4b04      	ldr	r3, [pc, #16]	; (1ca1c <prvIsQueueFull+0x34>)
   1ca0c:	4798      	blx	r3

	return xReturn;
   1ca0e:	68fb      	ldr	r3, [r7, #12]
}
   1ca10:	0018      	movs	r0, r3
   1ca12:	46bd      	mov	sp, r7
   1ca14:	b004      	add	sp, #16
   1ca16:	bd80      	pop	{r7, pc}
   1ca18:	0001afc9 	.word	0x0001afc9
   1ca1c:	0001afed 	.word	0x0001afed

0001ca20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1ca20:	b580      	push	{r7, lr}
   1ca22:	b086      	sub	sp, #24
   1ca24:	af00      	add	r7, sp, #0
   1ca26:	60f8      	str	r0, [r7, #12]
   1ca28:	60b9      	str	r1, [r7, #8]
   1ca2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ca2c:	68fb      	ldr	r3, [r7, #12]
   1ca2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1ca30:	4b15      	ldr	r3, [pc, #84]	; (1ca88 <vQueueWaitForMessageRestricted+0x68>)
   1ca32:	4798      	blx	r3
   1ca34:	697b      	ldr	r3, [r7, #20]
   1ca36:	2244      	movs	r2, #68	; 0x44
   1ca38:	5c9b      	ldrb	r3, [r3, r2]
   1ca3a:	b25b      	sxtb	r3, r3
   1ca3c:	3301      	adds	r3, #1
   1ca3e:	d103      	bne.n	1ca48 <vQueueWaitForMessageRestricted+0x28>
   1ca40:	697b      	ldr	r3, [r7, #20]
   1ca42:	2244      	movs	r2, #68	; 0x44
   1ca44:	2100      	movs	r1, #0
   1ca46:	5499      	strb	r1, [r3, r2]
   1ca48:	697b      	ldr	r3, [r7, #20]
   1ca4a:	2245      	movs	r2, #69	; 0x45
   1ca4c:	5c9b      	ldrb	r3, [r3, r2]
   1ca4e:	b25b      	sxtb	r3, r3
   1ca50:	3301      	adds	r3, #1
   1ca52:	d103      	bne.n	1ca5c <vQueueWaitForMessageRestricted+0x3c>
   1ca54:	697b      	ldr	r3, [r7, #20]
   1ca56:	2245      	movs	r2, #69	; 0x45
   1ca58:	2100      	movs	r1, #0
   1ca5a:	5499      	strb	r1, [r3, r2]
   1ca5c:	4b0b      	ldr	r3, [pc, #44]	; (1ca8c <vQueueWaitForMessageRestricted+0x6c>)
   1ca5e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1ca60:	697b      	ldr	r3, [r7, #20]
   1ca62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ca64:	2b00      	cmp	r3, #0
   1ca66:	d106      	bne.n	1ca76 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1ca68:	697b      	ldr	r3, [r7, #20]
   1ca6a:	3324      	adds	r3, #36	; 0x24
   1ca6c:	687a      	ldr	r2, [r7, #4]
   1ca6e:	68b9      	ldr	r1, [r7, #8]
   1ca70:	0018      	movs	r0, r3
   1ca72:	4b07      	ldr	r3, [pc, #28]	; (1ca90 <vQueueWaitForMessageRestricted+0x70>)
   1ca74:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1ca76:	697b      	ldr	r3, [r7, #20]
   1ca78:	0018      	movs	r0, r3
   1ca7a:	4b06      	ldr	r3, [pc, #24]	; (1ca94 <vQueueWaitForMessageRestricted+0x74>)
   1ca7c:	4798      	blx	r3
	}
   1ca7e:	46c0      	nop			; (mov r8, r8)
   1ca80:	46bd      	mov	sp, r7
   1ca82:	b006      	add	sp, #24
   1ca84:	bd80      	pop	{r7, pc}
   1ca86:	46c0      	nop			; (mov r8, r8)
   1ca88:	0001afc9 	.word	0x0001afc9
   1ca8c:	0001afed 	.word	0x0001afed
   1ca90:	0001d779 	.word	0x0001d779
   1ca94:	0001c8c5 	.word	0x0001c8c5

0001ca98 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1ca98:	b5b0      	push	{r4, r5, r7, lr}
   1ca9a:	b086      	sub	sp, #24
   1ca9c:	af00      	add	r7, sp, #0
   1ca9e:	6078      	str	r0, [r7, #4]
   1caa0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1caa2:	687b      	ldr	r3, [r7, #4]
   1caa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1caa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1caa8:	2300      	movs	r3, #0
   1caaa:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1caac:	693b      	ldr	r3, [r7, #16]
   1caae:	2b00      	cmp	r3, #0
   1cab0:	d101      	bne.n	1cab6 <prvNotifyQueueSetContainer+0x1e>
   1cab2:	b672      	cpsid	i
   1cab4:	e7fe      	b.n	1cab4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1cab6:	693b      	ldr	r3, [r7, #16]
   1cab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1caba:	693b      	ldr	r3, [r7, #16]
   1cabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cabe:	429a      	cmp	r2, r3
   1cac0:	d301      	bcc.n	1cac6 <prvNotifyQueueSetContainer+0x2e>
   1cac2:	b672      	cpsid	i
   1cac4:	e7fe      	b.n	1cac4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1cac6:	693b      	ldr	r3, [r7, #16]
   1cac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1caca:	693b      	ldr	r3, [r7, #16]
   1cacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1cace:	429a      	cmp	r2, r3
   1cad0:	d300      	bcc.n	1cad4 <prvNotifyQueueSetContainer+0x3c>
   1cad2:	e08b      	b.n	1cbec <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1cad4:	230f      	movs	r3, #15
   1cad6:	18fb      	adds	r3, r7, r3
   1cad8:	693a      	ldr	r2, [r7, #16]
   1cada:	2145      	movs	r1, #69	; 0x45
   1cadc:	5c52      	ldrb	r2, [r2, r1]
   1cade:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1cae0:	4b45      	ldr	r3, [pc, #276]	; (1cbf8 <prvNotifyQueueSetContainer+0x160>)
   1cae2:	4798      	blx	r3
   1cae4:	0003      	movs	r3, r0
   1cae6:	0018      	movs	r0, r3
   1cae8:	4b44      	ldr	r3, [pc, #272]	; (1cbfc <prvNotifyQueueSetContainer+0x164>)
   1caea:	4798      	blx	r3
   1caec:	0003      	movs	r3, r0
   1caee:	001a      	movs	r2, r3
   1caf0:	4b43      	ldr	r3, [pc, #268]	; (1cc00 <prvNotifyQueueSetContainer+0x168>)
   1caf2:	881b      	ldrh	r3, [r3, #0]
   1caf4:	4013      	ands	r3, r2
   1caf6:	b29b      	uxth	r3, r3
   1caf8:	2b00      	cmp	r3, #0
   1cafa:	d02e      	beq.n	1cb5a <prvNotifyQueueSetContainer+0xc2>
   1cafc:	693b      	ldr	r3, [r7, #16]
   1cafe:	0018      	movs	r0, r3
   1cb00:	4b40      	ldr	r3, [pc, #256]	; (1cc04 <prvNotifyQueueSetContainer+0x16c>)
   1cb02:	4798      	blx	r3
   1cb04:	0003      	movs	r3, r0
   1cb06:	001a      	movs	r2, r3
   1cb08:	4b3d      	ldr	r3, [pc, #244]	; (1cc00 <prvNotifyQueueSetContainer+0x168>)
   1cb0a:	881b      	ldrh	r3, [r3, #0]
   1cb0c:	4013      	ands	r3, r2
   1cb0e:	b29b      	uxth	r3, r3
   1cb10:	2b00      	cmp	r3, #0
   1cb12:	d022      	beq.n	1cb5a <prvNotifyQueueSetContainer+0xc2>
   1cb14:	683b      	ldr	r3, [r7, #0]
   1cb16:	2b00      	cmp	r3, #0
   1cb18:	d10b      	bne.n	1cb32 <prvNotifyQueueSetContainer+0x9a>
   1cb1a:	693b      	ldr	r3, [r7, #16]
   1cb1c:	0018      	movs	r0, r3
   1cb1e:	4b3a      	ldr	r3, [pc, #232]	; (1cc08 <prvNotifyQueueSetContainer+0x170>)
   1cb20:	4798      	blx	r3
   1cb22:	0003      	movs	r3, r0
   1cb24:	001a      	movs	r2, r3
   1cb26:	4b39      	ldr	r3, [pc, #228]	; (1cc0c <prvNotifyQueueSetContainer+0x174>)
   1cb28:	5c9b      	ldrb	r3, [r3, r2]
   1cb2a:	3320      	adds	r3, #32
   1cb2c:	b2db      	uxtb	r3, r3
   1cb2e:	001d      	movs	r5, r3
   1cb30:	e000      	b.n	1cb34 <prvNotifyQueueSetContainer+0x9c>
   1cb32:	2525      	movs	r5, #37	; 0x25
   1cb34:	693b      	ldr	r3, [r7, #16]
   1cb36:	0018      	movs	r0, r3
   1cb38:	4b33      	ldr	r3, [pc, #204]	; (1cc08 <prvNotifyQueueSetContainer+0x170>)
   1cb3a:	4798      	blx	r3
   1cb3c:	0003      	movs	r3, r0
   1cb3e:	001a      	movs	r2, r3
   1cb40:	4b32      	ldr	r3, [pc, #200]	; (1cc0c <prvNotifyQueueSetContainer+0x174>)
   1cb42:	5c9c      	ldrb	r4, [r3, r2]
   1cb44:	693b      	ldr	r3, [r7, #16]
   1cb46:	0018      	movs	r0, r3
   1cb48:	4b31      	ldr	r3, [pc, #196]	; (1cc10 <prvNotifyQueueSetContainer+0x178>)
   1cb4a:	4798      	blx	r3
   1cb4c:	0003      	movs	r3, r0
   1cb4e:	b2db      	uxtb	r3, r3
   1cb50:	001a      	movs	r2, r3
   1cb52:	0021      	movs	r1, r4
   1cb54:	0028      	movs	r0, r5
   1cb56:	4b2f      	ldr	r3, [pc, #188]	; (1cc14 <prvNotifyQueueSetContainer+0x17c>)
   1cb58:	4798      	blx	r3
   1cb5a:	693b      	ldr	r3, [r7, #16]
   1cb5c:	0018      	movs	r0, r3
   1cb5e:	4b2a      	ldr	r3, [pc, #168]	; (1cc08 <prvNotifyQueueSetContainer+0x170>)
   1cb60:	4798      	blx	r3
   1cb62:	0003      	movs	r3, r0
   1cb64:	001a      	movs	r2, r3
   1cb66:	4b29      	ldr	r3, [pc, #164]	; (1cc0c <prvNotifyQueueSetContainer+0x174>)
   1cb68:	5c9c      	ldrb	r4, [r3, r2]
   1cb6a:	693b      	ldr	r3, [r7, #16]
   1cb6c:	0018      	movs	r0, r3
   1cb6e:	4b28      	ldr	r3, [pc, #160]	; (1cc10 <prvNotifyQueueSetContainer+0x178>)
   1cb70:	4798      	blx	r3
   1cb72:	0003      	movs	r3, r0
   1cb74:	b2dd      	uxtb	r5, r3
   1cb76:	693b      	ldr	r3, [r7, #16]
   1cb78:	0018      	movs	r0, r3
   1cb7a:	4b23      	ldr	r3, [pc, #140]	; (1cc08 <prvNotifyQueueSetContainer+0x170>)
   1cb7c:	4798      	blx	r3
   1cb7e:	0003      	movs	r3, r0
   1cb80:	001a      	movs	r2, r3
   1cb82:	4b22      	ldr	r3, [pc, #136]	; (1cc0c <prvNotifyQueueSetContainer+0x174>)
   1cb84:	5c9b      	ldrb	r3, [r3, r2]
   1cb86:	2b02      	cmp	r3, #2
   1cb88:	d005      	beq.n	1cb96 <prvNotifyQueueSetContainer+0xfe>
   1cb8a:	693b      	ldr	r3, [r7, #16]
   1cb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cb8e:	b2db      	uxtb	r3, r3
   1cb90:	3301      	adds	r3, #1
   1cb92:	b2db      	uxtb	r3, r3
   1cb94:	e000      	b.n	1cb98 <prvNotifyQueueSetContainer+0x100>
   1cb96:	2300      	movs	r3, #0
   1cb98:	001a      	movs	r2, r3
   1cb9a:	0029      	movs	r1, r5
   1cb9c:	0020      	movs	r0, r4
   1cb9e:	4b1e      	ldr	r3, [pc, #120]	; (1cc18 <prvNotifyQueueSetContainer+0x180>)
   1cba0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1cba2:	683a      	ldr	r2, [r7, #0]
   1cba4:	1d39      	adds	r1, r7, #4
   1cba6:	693b      	ldr	r3, [r7, #16]
   1cba8:	0018      	movs	r0, r3
   1cbaa:	4b1c      	ldr	r3, [pc, #112]	; (1cc1c <prvNotifyQueueSetContainer+0x184>)
   1cbac:	4798      	blx	r3
   1cbae:	0003      	movs	r3, r0
   1cbb0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1cbb2:	230f      	movs	r3, #15
   1cbb4:	18fb      	adds	r3, r7, r3
   1cbb6:	781b      	ldrb	r3, [r3, #0]
   1cbb8:	b25b      	sxtb	r3, r3
   1cbba:	3301      	adds	r3, #1
   1cbbc:	d10d      	bne.n	1cbda <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1cbbe:	693b      	ldr	r3, [r7, #16]
   1cbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cbc2:	2b00      	cmp	r3, #0
   1cbc4:	d012      	beq.n	1cbec <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1cbc6:	693b      	ldr	r3, [r7, #16]
   1cbc8:	3324      	adds	r3, #36	; 0x24
   1cbca:	0018      	movs	r0, r3
   1cbcc:	4b14      	ldr	r3, [pc, #80]	; (1cc20 <prvNotifyQueueSetContainer+0x188>)
   1cbce:	4798      	blx	r3
   1cbd0:	1e03      	subs	r3, r0, #0
   1cbd2:	d00b      	beq.n	1cbec <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1cbd4:	2301      	movs	r3, #1
   1cbd6:	617b      	str	r3, [r7, #20]
   1cbd8:	e008      	b.n	1cbec <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1cbda:	230f      	movs	r3, #15
   1cbdc:	18fb      	adds	r3, r7, r3
   1cbde:	781b      	ldrb	r3, [r3, #0]
   1cbe0:	3301      	adds	r3, #1
   1cbe2:	b2db      	uxtb	r3, r3
   1cbe4:	b259      	sxtb	r1, r3
   1cbe6:	693b      	ldr	r3, [r7, #16]
   1cbe8:	2245      	movs	r2, #69	; 0x45
   1cbea:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cbec:	697b      	ldr	r3, [r7, #20]
	}
   1cbee:	0018      	movs	r0, r3
   1cbf0:	46bd      	mov	sp, r7
   1cbf2:	b006      	add	sp, #24
   1cbf4:	bdb0      	pop	{r4, r5, r7, pc}
   1cbf6:	46c0      	nop			; (mov r8, r8)
   1cbf8:	0001925d 	.word	0x0001925d
   1cbfc:	00018fc1 	.word	0x00018fc1
   1cc00:	20000110 	.word	0x20000110
   1cc04:	00019081 	.word	0x00019081
   1cc08:	00018f81 	.word	0x00018f81
   1cc0c:	20000104 	.word	0x20000104
   1cc10:	00019061 	.word	0x00019061
   1cc14:	000199b9 	.word	0x000199b9
   1cc18:	0001a015 	.word	0x0001a015
   1cc1c:	0001c795 	.word	0x0001c795
   1cc20:	0001d859 	.word	0x0001d859

0001cc24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1cc24:	b590      	push	{r4, r7, lr}
   1cc26:	b08d      	sub	sp, #52	; 0x34
   1cc28:	af04      	add	r7, sp, #16
   1cc2a:	60f8      	str	r0, [r7, #12]
   1cc2c:	60b9      	str	r1, [r7, #8]
   1cc2e:	603b      	str	r3, [r7, #0]
   1cc30:	1dbb      	adds	r3, r7, #6
   1cc32:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cc34:	1dbb      	adds	r3, r7, #6
   1cc36:	881b      	ldrh	r3, [r3, #0]
   1cc38:	009b      	lsls	r3, r3, #2
   1cc3a:	0018      	movs	r0, r3
   1cc3c:	4b1d      	ldr	r3, [pc, #116]	; (1ccb4 <xTaskCreate+0x90>)
   1cc3e:	4798      	blx	r3
   1cc40:	0003      	movs	r3, r0
   1cc42:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1cc44:	697b      	ldr	r3, [r7, #20]
   1cc46:	2b00      	cmp	r3, #0
   1cc48:	d010      	beq.n	1cc6c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1cc4a:	2054      	movs	r0, #84	; 0x54
   1cc4c:	4b19      	ldr	r3, [pc, #100]	; (1ccb4 <xTaskCreate+0x90>)
   1cc4e:	4798      	blx	r3
   1cc50:	0003      	movs	r3, r0
   1cc52:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1cc54:	69fb      	ldr	r3, [r7, #28]
   1cc56:	2b00      	cmp	r3, #0
   1cc58:	d003      	beq.n	1cc62 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1cc5a:	69fb      	ldr	r3, [r7, #28]
   1cc5c:	697a      	ldr	r2, [r7, #20]
   1cc5e:	631a      	str	r2, [r3, #48]	; 0x30
   1cc60:	e006      	b.n	1cc70 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1cc62:	697b      	ldr	r3, [r7, #20]
   1cc64:	0018      	movs	r0, r3
   1cc66:	4b14      	ldr	r3, [pc, #80]	; (1ccb8 <xTaskCreate+0x94>)
   1cc68:	4798      	blx	r3
   1cc6a:	e001      	b.n	1cc70 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1cc6c:	2300      	movs	r3, #0
   1cc6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1cc70:	69fb      	ldr	r3, [r7, #28]
   1cc72:	2b00      	cmp	r3, #0
   1cc74:	d016      	beq.n	1cca4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1cc76:	1dbb      	adds	r3, r7, #6
   1cc78:	881a      	ldrh	r2, [r3, #0]
   1cc7a:	683c      	ldr	r4, [r7, #0]
   1cc7c:	68b9      	ldr	r1, [r7, #8]
   1cc7e:	68f8      	ldr	r0, [r7, #12]
   1cc80:	2300      	movs	r3, #0
   1cc82:	9303      	str	r3, [sp, #12]
   1cc84:	69fb      	ldr	r3, [r7, #28]
   1cc86:	9302      	str	r3, [sp, #8]
   1cc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cc8a:	9301      	str	r3, [sp, #4]
   1cc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cc8e:	9300      	str	r3, [sp, #0]
   1cc90:	0023      	movs	r3, r4
   1cc92:	4c0a      	ldr	r4, [pc, #40]	; (1ccbc <xTaskCreate+0x98>)
   1cc94:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1cc96:	69fb      	ldr	r3, [r7, #28]
   1cc98:	0018      	movs	r0, r3
   1cc9a:	4b09      	ldr	r3, [pc, #36]	; (1ccc0 <xTaskCreate+0x9c>)
   1cc9c:	4798      	blx	r3
			xReturn = pdPASS;
   1cc9e:	2301      	movs	r3, #1
   1cca0:	61bb      	str	r3, [r7, #24]
   1cca2:	e002      	b.n	1ccaa <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1cca4:	2301      	movs	r3, #1
   1cca6:	425b      	negs	r3, r3
   1cca8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1ccaa:	69bb      	ldr	r3, [r7, #24]
	}
   1ccac:	0018      	movs	r0, r3
   1ccae:	46bd      	mov	sp, r7
   1ccb0:	b009      	add	sp, #36	; 0x24
   1ccb2:	bd90      	pop	{r4, r7, pc}
   1ccb4:	0001b101 	.word	0x0001b101
   1ccb8:	0001b1c5 	.word	0x0001b1c5
   1ccbc:	0001ccc5 	.word	0x0001ccc5
   1ccc0:	0001cdd5 	.word	0x0001cdd5

0001ccc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1ccc4:	b580      	push	{r7, lr}
   1ccc6:	b086      	sub	sp, #24
   1ccc8:	af00      	add	r7, sp, #0
   1ccca:	60f8      	str	r0, [r7, #12]
   1cccc:	60b9      	str	r1, [r7, #8]
   1ccce:	607a      	str	r2, [r7, #4]
   1ccd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ccd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1ccd6:	687b      	ldr	r3, [r7, #4]
   1ccd8:	009b      	lsls	r3, r3, #2
   1ccda:	001a      	movs	r2, r3
   1ccdc:	21a5      	movs	r1, #165	; 0xa5
   1ccde:	4b39      	ldr	r3, [pc, #228]	; (1cdc4 <prvInitialiseNewTask+0x100>)
   1cce0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cce6:	687b      	ldr	r3, [r7, #4]
   1cce8:	4937      	ldr	r1, [pc, #220]	; (1cdc8 <prvInitialiseNewTask+0x104>)
   1ccea:	468c      	mov	ip, r1
   1ccec:	4463      	add	r3, ip
   1ccee:	009b      	lsls	r3, r3, #2
   1ccf0:	18d3      	adds	r3, r2, r3
   1ccf2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1ccf4:	693b      	ldr	r3, [r7, #16]
   1ccf6:	2207      	movs	r2, #7
   1ccf8:	4393      	bics	r3, r2
   1ccfa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1ccfc:	693b      	ldr	r3, [r7, #16]
   1ccfe:	2207      	movs	r2, #7
   1cd00:	4013      	ands	r3, r2
   1cd02:	d001      	beq.n	1cd08 <prvInitialiseNewTask+0x44>
   1cd04:	b672      	cpsid	i
   1cd06:	e7fe      	b.n	1cd06 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1cd08:	2300      	movs	r3, #0
   1cd0a:	617b      	str	r3, [r7, #20]
   1cd0c:	e013      	b.n	1cd36 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1cd0e:	68ba      	ldr	r2, [r7, #8]
   1cd10:	697b      	ldr	r3, [r7, #20]
   1cd12:	18d3      	adds	r3, r2, r3
   1cd14:	7818      	ldrb	r0, [r3, #0]
   1cd16:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cd18:	2134      	movs	r1, #52	; 0x34
   1cd1a:	697b      	ldr	r3, [r7, #20]
   1cd1c:	18d3      	adds	r3, r2, r3
   1cd1e:	185b      	adds	r3, r3, r1
   1cd20:	1c02      	adds	r2, r0, #0
   1cd22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1cd24:	68ba      	ldr	r2, [r7, #8]
   1cd26:	697b      	ldr	r3, [r7, #20]
   1cd28:	18d3      	adds	r3, r2, r3
   1cd2a:	781b      	ldrb	r3, [r3, #0]
   1cd2c:	2b00      	cmp	r3, #0
   1cd2e:	d006      	beq.n	1cd3e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1cd30:	697b      	ldr	r3, [r7, #20]
   1cd32:	3301      	adds	r3, #1
   1cd34:	617b      	str	r3, [r7, #20]
   1cd36:	697b      	ldr	r3, [r7, #20]
   1cd38:	2b07      	cmp	r3, #7
   1cd3a:	d9e8      	bls.n	1cd0e <prvInitialiseNewTask+0x4a>
   1cd3c:	e000      	b.n	1cd40 <prvInitialiseNewTask+0x7c>
		{
			break;
   1cd3e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd42:	223b      	movs	r2, #59	; 0x3b
   1cd44:	2100      	movs	r1, #0
   1cd46:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1cd48:	6a3b      	ldr	r3, [r7, #32]
   1cd4a:	2b04      	cmp	r3, #4
   1cd4c:	d901      	bls.n	1cd52 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1cd4e:	2304      	movs	r3, #4
   1cd50:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd54:	6a3a      	ldr	r2, [r7, #32]
   1cd56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd5a:	6a3a      	ldr	r2, [r7, #32]
   1cd5c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd60:	2200      	movs	r2, #0
   1cd62:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd66:	3304      	adds	r3, #4
   1cd68:	0018      	movs	r0, r3
   1cd6a:	4b18      	ldr	r3, [pc, #96]	; (1cdcc <prvInitialiseNewTask+0x108>)
   1cd6c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1cd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd70:	3318      	adds	r3, #24
   1cd72:	0018      	movs	r0, r3
   1cd74:	4b15      	ldr	r3, [pc, #84]	; (1cdcc <prvInitialiseNewTask+0x108>)
   1cd76:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cd7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cd7e:	6a3b      	ldr	r3, [r7, #32]
   1cd80:	2205      	movs	r2, #5
   1cd82:	1ad2      	subs	r2, r2, r3
   1cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cd8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd90:	2200      	movs	r2, #0
   1cd92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd96:	2250      	movs	r2, #80	; 0x50
   1cd98:	2100      	movs	r1, #0
   1cd9a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1cd9c:	683a      	ldr	r2, [r7, #0]
   1cd9e:	68f9      	ldr	r1, [r7, #12]
   1cda0:	693b      	ldr	r3, [r7, #16]
   1cda2:	0018      	movs	r0, r3
   1cda4:	4b0a      	ldr	r3, [pc, #40]	; (1cdd0 <prvInitialiseNewTask+0x10c>)
   1cda6:	4798      	blx	r3
   1cda8:	0002      	movs	r2, r0
   1cdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cdac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1cdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cdb0:	2b00      	cmp	r3, #0
   1cdb2:	d002      	beq.n	1cdba <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1cdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cdb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cdb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cdba:	46c0      	nop			; (mov r8, r8)
   1cdbc:	46bd      	mov	sp, r7
   1cdbe:	b006      	add	sp, #24
   1cdc0:	bd80      	pop	{r7, pc}
   1cdc2:	46c0      	nop			; (mov r8, r8)
   1cdc4:	0003577f 	.word	0x0003577f
   1cdc8:	3fffffff 	.word	0x3fffffff
   1cdcc:	0001ad75 	.word	0x0001ad75
   1cdd0:	0001ae8d 	.word	0x0001ae8d

0001cdd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1cdd4:	b580      	push	{r7, lr}
   1cdd6:	b082      	sub	sp, #8
   1cdd8:	af00      	add	r7, sp, #0
   1cdda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1cddc:	4b60      	ldr	r3, [pc, #384]	; (1cf60 <prvAddNewTaskToReadyList+0x18c>)
   1cdde:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1cde0:	4b60      	ldr	r3, [pc, #384]	; (1cf64 <prvAddNewTaskToReadyList+0x190>)
   1cde2:	681b      	ldr	r3, [r3, #0]
   1cde4:	1c5a      	adds	r2, r3, #1
   1cde6:	4b5f      	ldr	r3, [pc, #380]	; (1cf64 <prvAddNewTaskToReadyList+0x190>)
   1cde8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1cdea:	4b5f      	ldr	r3, [pc, #380]	; (1cf68 <prvAddNewTaskToReadyList+0x194>)
   1cdec:	681b      	ldr	r3, [r3, #0]
   1cdee:	2b00      	cmp	r3, #0
   1cdf0:	d109      	bne.n	1ce06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1cdf2:	4b5d      	ldr	r3, [pc, #372]	; (1cf68 <prvAddNewTaskToReadyList+0x194>)
   1cdf4:	687a      	ldr	r2, [r7, #4]
   1cdf6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1cdf8:	4b5a      	ldr	r3, [pc, #360]	; (1cf64 <prvAddNewTaskToReadyList+0x190>)
   1cdfa:	681b      	ldr	r3, [r3, #0]
   1cdfc:	2b01      	cmp	r3, #1
   1cdfe:	d110      	bne.n	1ce22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1ce00:	4b5a      	ldr	r3, [pc, #360]	; (1cf6c <prvAddNewTaskToReadyList+0x198>)
   1ce02:	4798      	blx	r3
   1ce04:	e00d      	b.n	1ce22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1ce06:	4b5a      	ldr	r3, [pc, #360]	; (1cf70 <prvAddNewTaskToReadyList+0x19c>)
   1ce08:	681b      	ldr	r3, [r3, #0]
   1ce0a:	2b00      	cmp	r3, #0
   1ce0c:	d109      	bne.n	1ce22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1ce0e:	4b56      	ldr	r3, [pc, #344]	; (1cf68 <prvAddNewTaskToReadyList+0x194>)
   1ce10:	681b      	ldr	r3, [r3, #0]
   1ce12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce14:	687b      	ldr	r3, [r7, #4]
   1ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce18:	429a      	cmp	r2, r3
   1ce1a:	d802      	bhi.n	1ce22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1ce1c:	4b52      	ldr	r3, [pc, #328]	; (1cf68 <prvAddNewTaskToReadyList+0x194>)
   1ce1e:	687a      	ldr	r2, [r7, #4]
   1ce20:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1ce22:	4b54      	ldr	r3, [pc, #336]	; (1cf74 <prvAddNewTaskToReadyList+0x1a0>)
   1ce24:	681b      	ldr	r3, [r3, #0]
   1ce26:	1c5a      	adds	r2, r3, #1
   1ce28:	4b52      	ldr	r3, [pc, #328]	; (1cf74 <prvAddNewTaskToReadyList+0x1a0>)
   1ce2a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1ce2c:	4b51      	ldr	r3, [pc, #324]	; (1cf74 <prvAddNewTaskToReadyList+0x1a0>)
   1ce2e:	681a      	ldr	r2, [r3, #0]
   1ce30:	687b      	ldr	r3, [r7, #4]
   1ce32:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1ce34:	687b      	ldr	r3, [r7, #4]
   1ce36:	2b00      	cmp	r3, #0
   1ce38:	d052      	beq.n	1cee0 <prvAddNewTaskToReadyList+0x10c>
   1ce3a:	2003      	movs	r0, #3
   1ce3c:	4b4e      	ldr	r3, [pc, #312]	; (1cf78 <prvAddNewTaskToReadyList+0x1a4>)
   1ce3e:	4798      	blx	r3
   1ce40:	0003      	movs	r3, r0
   1ce42:	b29a      	uxth	r2, r3
   1ce44:	687b      	ldr	r3, [r7, #4]
   1ce46:	0011      	movs	r1, r2
   1ce48:	0018      	movs	r0, r3
   1ce4a:	4b4c      	ldr	r3, [pc, #304]	; (1cf7c <prvAddNewTaskToReadyList+0x1a8>)
   1ce4c:	4798      	blx	r3
   1ce4e:	4b4c      	ldr	r3, [pc, #304]	; (1cf80 <prvAddNewTaskToReadyList+0x1ac>)
   1ce50:	881a      	ldrh	r2, [r3, #0]
   1ce52:	687b      	ldr	r3, [r7, #4]
   1ce54:	0011      	movs	r1, r2
   1ce56:	0018      	movs	r0, r3
   1ce58:	4b4a      	ldr	r3, [pc, #296]	; (1cf84 <prvAddNewTaskToReadyList+0x1b0>)
   1ce5a:	4798      	blx	r3
   1ce5c:	687b      	ldr	r3, [r7, #4]
   1ce5e:	0018      	movs	r0, r3
   1ce60:	4b49      	ldr	r3, [pc, #292]	; (1cf88 <prvAddNewTaskToReadyList+0x1b4>)
   1ce62:	4798      	blx	r3
   1ce64:	0003      	movs	r3, r0
   1ce66:	b2d9      	uxtb	r1, r3
   1ce68:	687b      	ldr	r3, [r7, #4]
   1ce6a:	3334      	adds	r3, #52	; 0x34
   1ce6c:	001a      	movs	r2, r3
   1ce6e:	2003      	movs	r0, #3
   1ce70:	4b46      	ldr	r3, [pc, #280]	; (1cf8c <prvAddNewTaskToReadyList+0x1b8>)
   1ce72:	4798      	blx	r3
   1ce74:	687b      	ldr	r3, [r7, #4]
   1ce76:	0018      	movs	r0, r3
   1ce78:	4b43      	ldr	r3, [pc, #268]	; (1cf88 <prvAddNewTaskToReadyList+0x1b4>)
   1ce7a:	4798      	blx	r3
   1ce7c:	0003      	movs	r3, r0
   1ce7e:	b2d9      	uxtb	r1, r3
   1ce80:	687b      	ldr	r3, [r7, #4]
   1ce82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce84:	b2db      	uxtb	r3, r3
   1ce86:	001a      	movs	r2, r3
   1ce88:	2003      	movs	r0, #3
   1ce8a:	4b41      	ldr	r3, [pc, #260]	; (1cf90 <prvAddNewTaskToReadyList+0x1bc>)
   1ce8c:	4798      	blx	r3
   1ce8e:	4b41      	ldr	r3, [pc, #260]	; (1cf94 <prvAddNewTaskToReadyList+0x1c0>)
   1ce90:	4798      	blx	r3
   1ce92:	0003      	movs	r3, r0
   1ce94:	0018      	movs	r0, r3
   1ce96:	4b40      	ldr	r3, [pc, #256]	; (1cf98 <prvAddNewTaskToReadyList+0x1c4>)
   1ce98:	4798      	blx	r3
   1ce9a:	0003      	movs	r3, r0
   1ce9c:	001a      	movs	r2, r3
   1ce9e:	4b3f      	ldr	r3, [pc, #252]	; (1cf9c <prvAddNewTaskToReadyList+0x1c8>)
   1cea0:	881b      	ldrh	r3, [r3, #0]
   1cea2:	4013      	ands	r3, r2
   1cea4:	b29b      	uxth	r3, r3
   1cea6:	2b00      	cmp	r3, #0
   1cea8:	d016      	beq.n	1ced8 <prvAddNewTaskToReadyList+0x104>
   1ceaa:	687b      	ldr	r3, [r7, #4]
   1ceac:	0018      	movs	r0, r3
   1ceae:	4b3a      	ldr	r3, [pc, #232]	; (1cf98 <prvAddNewTaskToReadyList+0x1c4>)
   1ceb0:	4798      	blx	r3
   1ceb2:	0003      	movs	r3, r0
   1ceb4:	001a      	movs	r2, r3
   1ceb6:	4b39      	ldr	r3, [pc, #228]	; (1cf9c <prvAddNewTaskToReadyList+0x1c8>)
   1ceb8:	881b      	ldrh	r3, [r3, #0]
   1ceba:	4013      	ands	r3, r2
   1cebc:	b29b      	uxth	r3, r3
   1cebe:	2b00      	cmp	r3, #0
   1cec0:	d00a      	beq.n	1ced8 <prvAddNewTaskToReadyList+0x104>
   1cec2:	687b      	ldr	r3, [r7, #4]
   1cec4:	0018      	movs	r0, r3
   1cec6:	4b30      	ldr	r3, [pc, #192]	; (1cf88 <prvAddNewTaskToReadyList+0x1b4>)
   1cec8:	4798      	blx	r3
   1ceca:	0003      	movs	r3, r0
   1cecc:	b2db      	uxtb	r3, r3
   1cece:	001a      	movs	r2, r3
   1ced0:	2103      	movs	r1, #3
   1ced2:	201b      	movs	r0, #27
   1ced4:	4b32      	ldr	r3, [pc, #200]	; (1cfa0 <prvAddNewTaskToReadyList+0x1cc>)
   1ced6:	4798      	blx	r3
   1ced8:	687b      	ldr	r3, [r7, #4]
   1ceda:	0018      	movs	r0, r3
   1cedc:	4b31      	ldr	r3, [pc, #196]	; (1cfa4 <prvAddNewTaskToReadyList+0x1d0>)
   1cede:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1cee0:	687b      	ldr	r3, [r7, #4]
   1cee2:	0018      	movs	r0, r3
   1cee4:	4b2c      	ldr	r3, [pc, #176]	; (1cf98 <prvAddNewTaskToReadyList+0x1c4>)
   1cee6:	4798      	blx	r3
   1cee8:	0003      	movs	r3, r0
   1ceea:	001a      	movs	r2, r3
   1ceec:	4b2b      	ldr	r3, [pc, #172]	; (1cf9c <prvAddNewTaskToReadyList+0x1c8>)
   1ceee:	881b      	ldrh	r3, [r3, #0]
   1cef0:	4013      	ands	r3, r2
   1cef2:	b29b      	uxth	r3, r3
   1cef4:	2b00      	cmp	r3, #0
   1cef6:	d008      	beq.n	1cf0a <prvAddNewTaskToReadyList+0x136>
   1cef8:	687b      	ldr	r3, [r7, #4]
   1cefa:	0018      	movs	r0, r3
   1cefc:	4b22      	ldr	r3, [pc, #136]	; (1cf88 <prvAddNewTaskToReadyList+0x1b4>)
   1cefe:	4798      	blx	r3
   1cf00:	0003      	movs	r3, r0
   1cf02:	b2db      	uxtb	r3, r3
   1cf04:	0018      	movs	r0, r3
   1cf06:	4b28      	ldr	r3, [pc, #160]	; (1cfa8 <prvAddNewTaskToReadyList+0x1d4>)
   1cf08:	4798      	blx	r3
   1cf0a:	687b      	ldr	r3, [r7, #4]
   1cf0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf0e:	4b27      	ldr	r3, [pc, #156]	; (1cfac <prvAddNewTaskToReadyList+0x1d8>)
   1cf10:	681b      	ldr	r3, [r3, #0]
   1cf12:	429a      	cmp	r2, r3
   1cf14:	d903      	bls.n	1cf1e <prvAddNewTaskToReadyList+0x14a>
   1cf16:	687b      	ldr	r3, [r7, #4]
   1cf18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf1a:	4b24      	ldr	r3, [pc, #144]	; (1cfac <prvAddNewTaskToReadyList+0x1d8>)
   1cf1c:	601a      	str	r2, [r3, #0]
   1cf1e:	687b      	ldr	r3, [r7, #4]
   1cf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf22:	0013      	movs	r3, r2
   1cf24:	009b      	lsls	r3, r3, #2
   1cf26:	189b      	adds	r3, r3, r2
   1cf28:	009b      	lsls	r3, r3, #2
   1cf2a:	4a21      	ldr	r2, [pc, #132]	; (1cfb0 <prvAddNewTaskToReadyList+0x1dc>)
   1cf2c:	189a      	adds	r2, r3, r2
   1cf2e:	687b      	ldr	r3, [r7, #4]
   1cf30:	3304      	adds	r3, #4
   1cf32:	0019      	movs	r1, r3
   1cf34:	0010      	movs	r0, r2
   1cf36:	4b1f      	ldr	r3, [pc, #124]	; (1cfb4 <prvAddNewTaskToReadyList+0x1e0>)
   1cf38:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1cf3a:	4b1f      	ldr	r3, [pc, #124]	; (1cfb8 <prvAddNewTaskToReadyList+0x1e4>)
   1cf3c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1cf3e:	4b0c      	ldr	r3, [pc, #48]	; (1cf70 <prvAddNewTaskToReadyList+0x19c>)
   1cf40:	681b      	ldr	r3, [r3, #0]
   1cf42:	2b00      	cmp	r3, #0
   1cf44:	d008      	beq.n	1cf58 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1cf46:	4b08      	ldr	r3, [pc, #32]	; (1cf68 <prvAddNewTaskToReadyList+0x194>)
   1cf48:	681b      	ldr	r3, [r3, #0]
   1cf4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf4c:	687b      	ldr	r3, [r7, #4]
   1cf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf50:	429a      	cmp	r2, r3
   1cf52:	d201      	bcs.n	1cf58 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1cf54:	4b19      	ldr	r3, [pc, #100]	; (1cfbc <prvAddNewTaskToReadyList+0x1e8>)
   1cf56:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cf58:	46c0      	nop			; (mov r8, r8)
   1cf5a:	46bd      	mov	sp, r7
   1cf5c:	b002      	add	sp, #8
   1cf5e:	bd80      	pop	{r7, pc}
   1cf60:	0001afc9 	.word	0x0001afc9
   1cf64:	200041b4 	.word	0x200041b4
   1cf68:	200040dc 	.word	0x200040dc
   1cf6c:	0001daf5 	.word	0x0001daf5
   1cf70:	200041c0 	.word	0x200041c0
   1cf74:	200041d0 	.word	0x200041d0
   1cf78:	0001a541 	.word	0x0001a541
   1cf7c:	00018fe5 	.word	0x00018fe5
   1cf80:	20000112 	.word	0x20000112
   1cf84:	00019021 	.word	0x00019021
   1cf88:	00018fa1 	.word	0x00018fa1
   1cf8c:	0001a771 	.word	0x0001a771
   1cf90:	00019ed5 	.word	0x00019ed5
   1cf94:	0001925d 	.word	0x0001925d
   1cf98:	00018fc1 	.word	0x00018fc1
   1cf9c:	20000110 	.word	0x20000110
   1cfa0:	000199b9 	.word	0x000199b9
   1cfa4:	00019121 	.word	0x00019121
   1cfa8:	00019771 	.word	0x00019771
   1cfac:	200041bc 	.word	0x200041bc
   1cfb0:	200040e0 	.word	0x200040e0
   1cfb4:	0001ad8b 	.word	0x0001ad8b
   1cfb8:	0001afed 	.word	0x0001afed
   1cfbc:	0001afb1 	.word	0x0001afb1

0001cfc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1cfc0:	b580      	push	{r7, lr}
   1cfc2:	b084      	sub	sp, #16
   1cfc4:	af00      	add	r7, sp, #0
   1cfc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1cfc8:	2300      	movs	r3, #0
   1cfca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1cfcc:	687b      	ldr	r3, [r7, #4]
   1cfce:	2b00      	cmp	r3, #0
   1cfd0:	d045      	beq.n	1d05e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1cfd2:	4b27      	ldr	r3, [pc, #156]	; (1d070 <vTaskDelay+0xb0>)
   1cfd4:	681b      	ldr	r3, [r3, #0]
   1cfd6:	2b00      	cmp	r3, #0
   1cfd8:	d001      	beq.n	1cfde <vTaskDelay+0x1e>
   1cfda:	b672      	cpsid	i
   1cfdc:	e7fe      	b.n	1cfdc <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1cfde:	4b25      	ldr	r3, [pc, #148]	; (1d074 <vTaskDelay+0xb4>)
   1cfe0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1cfe2:	4b25      	ldr	r3, [pc, #148]	; (1d078 <vTaskDelay+0xb8>)
   1cfe4:	681b      	ldr	r3, [r3, #0]
   1cfe6:	0018      	movs	r0, r3
   1cfe8:	4b24      	ldr	r3, [pc, #144]	; (1d07c <vTaskDelay+0xbc>)
   1cfea:	4798      	blx	r3
   1cfec:	0003      	movs	r3, r0
   1cfee:	001a      	movs	r2, r3
   1cff0:	4b23      	ldr	r3, [pc, #140]	; (1d080 <vTaskDelay+0xc0>)
   1cff2:	881b      	ldrh	r3, [r3, #0]
   1cff4:	4013      	ands	r3, r2
   1cff6:	b29b      	uxth	r3, r3
   1cff8:	2b00      	cmp	r3, #0
   1cffa:	d00e      	beq.n	1d01a <vTaskDelay+0x5a>
   1cffc:	687b      	ldr	r3, [r7, #4]
   1cffe:	0019      	movs	r1, r3
   1d000:	2089      	movs	r0, #137	; 0x89
   1d002:	4b20      	ldr	r3, [pc, #128]	; (1d084 <vTaskDelay+0xc4>)
   1d004:	4798      	blx	r3
   1d006:	4b1c      	ldr	r3, [pc, #112]	; (1d078 <vTaskDelay+0xb8>)
   1d008:	681b      	ldr	r3, [r3, #0]
   1d00a:	0018      	movs	r0, r3
   1d00c:	4b1e      	ldr	r3, [pc, #120]	; (1d088 <vTaskDelay+0xc8>)
   1d00e:	4798      	blx	r3
   1d010:	0003      	movs	r3, r0
   1d012:	b2db      	uxtb	r3, r3
   1d014:	0018      	movs	r0, r3
   1d016:	4b1d      	ldr	r3, [pc, #116]	; (1d08c <vTaskDelay+0xcc>)
   1d018:	4798      	blx	r3
   1d01a:	4b1d      	ldr	r3, [pc, #116]	; (1d090 <vTaskDelay+0xd0>)
   1d01c:	4798      	blx	r3
   1d01e:	0003      	movs	r3, r0
   1d020:	0018      	movs	r0, r3
   1d022:	4b16      	ldr	r3, [pc, #88]	; (1d07c <vTaskDelay+0xbc>)
   1d024:	4798      	blx	r3
   1d026:	0003      	movs	r3, r0
   1d028:	001a      	movs	r2, r3
   1d02a:	4b15      	ldr	r3, [pc, #84]	; (1d080 <vTaskDelay+0xc0>)
   1d02c:	881b      	ldrh	r3, [r3, #0]
   1d02e:	4013      	ands	r3, r2
   1d030:	b29b      	uxth	r3, r3
   1d032:	2b00      	cmp	r3, #0
   1d034:	d00a      	beq.n	1d04c <vTaskDelay+0x8c>
   1d036:	4b16      	ldr	r3, [pc, #88]	; (1d090 <vTaskDelay+0xd0>)
   1d038:	4798      	blx	r3
   1d03a:	0003      	movs	r3, r0
   1d03c:	0018      	movs	r0, r3
   1d03e:	4b12      	ldr	r3, [pc, #72]	; (1d088 <vTaskDelay+0xc8>)
   1d040:	4798      	blx	r3
   1d042:	0003      	movs	r3, r0
   1d044:	b2db      	uxtb	r3, r3
   1d046:	0018      	movs	r0, r3
   1d048:	4b10      	ldr	r3, [pc, #64]	; (1d08c <vTaskDelay+0xcc>)
   1d04a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1d04c:	687b      	ldr	r3, [r7, #4]
   1d04e:	2100      	movs	r1, #0
   1d050:	0018      	movs	r0, r3
   1d052:	4b10      	ldr	r3, [pc, #64]	; (1d094 <vTaskDelay+0xd4>)
   1d054:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1d056:	4b10      	ldr	r3, [pc, #64]	; (1d098 <vTaskDelay+0xd8>)
   1d058:	4798      	blx	r3
   1d05a:	0003      	movs	r3, r0
   1d05c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1d05e:	68fb      	ldr	r3, [r7, #12]
   1d060:	2b00      	cmp	r3, #0
   1d062:	d101      	bne.n	1d068 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1d064:	4b0d      	ldr	r3, [pc, #52]	; (1d09c <vTaskDelay+0xdc>)
   1d066:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d068:	46c0      	nop			; (mov r8, r8)
   1d06a:	46bd      	mov	sp, r7
   1d06c:	b004      	add	sp, #16
   1d06e:	bd80      	pop	{r7, pc}
   1d070:	200041dc 	.word	0x200041dc
   1d074:	0001d281 	.word	0x0001d281
   1d078:	200040dc 	.word	0x200040dc
   1d07c:	00018fc1 	.word	0x00018fc1
   1d080:	20000110 	.word	0x20000110
   1d084:	00019cc1 	.word	0x00019cc1
   1d088:	00018fa1 	.word	0x00018fa1
   1d08c:	0001a151 	.word	0x0001a151
   1d090:	0001925d 	.word	0x0001925d
   1d094:	0001e1d9 	.word	0x0001e1d9
   1d098:	0001d299 	.word	0x0001d299
   1d09c:	0001afb1 	.word	0x0001afb1

0001d0a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1d0a0:	b580      	push	{r7, lr}
   1d0a2:	b084      	sub	sp, #16
   1d0a4:	af00      	add	r7, sp, #0
   1d0a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1d0a8:	4b42      	ldr	r3, [pc, #264]	; (1d1b4 <vTaskSuspend+0x114>)
   1d0aa:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1d0ac:	687b      	ldr	r3, [r7, #4]
   1d0ae:	2b00      	cmp	r3, #0
   1d0b0:	d102      	bne.n	1d0b8 <vTaskSuspend+0x18>
   1d0b2:	4b41      	ldr	r3, [pc, #260]	; (1d1b8 <vTaskSuspend+0x118>)
   1d0b4:	681b      	ldr	r3, [r3, #0]
   1d0b6:	e000      	b.n	1d0ba <vTaskSuspend+0x1a>
   1d0b8:	687b      	ldr	r3, [r7, #4]
   1d0ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1d0bc:	4b3f      	ldr	r3, [pc, #252]	; (1d1bc <vTaskSuspend+0x11c>)
   1d0be:	4798      	blx	r3
   1d0c0:	0003      	movs	r3, r0
   1d0c2:	0018      	movs	r0, r3
   1d0c4:	4b3e      	ldr	r3, [pc, #248]	; (1d1c0 <vTaskSuspend+0x120>)
   1d0c6:	4798      	blx	r3
   1d0c8:	0003      	movs	r3, r0
   1d0ca:	001a      	movs	r2, r3
   1d0cc:	4b3d      	ldr	r3, [pc, #244]	; (1d1c4 <vTaskSuspend+0x124>)
   1d0ce:	881b      	ldrh	r3, [r3, #0]
   1d0d0:	4013      	ands	r3, r2
   1d0d2:	b29b      	uxth	r3, r3
   1d0d4:	2b00      	cmp	r3, #0
   1d0d6:	d016      	beq.n	1d106 <vTaskSuspend+0x66>
   1d0d8:	68fb      	ldr	r3, [r7, #12]
   1d0da:	0018      	movs	r0, r3
   1d0dc:	4b38      	ldr	r3, [pc, #224]	; (1d1c0 <vTaskSuspend+0x120>)
   1d0de:	4798      	blx	r3
   1d0e0:	0003      	movs	r3, r0
   1d0e2:	001a      	movs	r2, r3
   1d0e4:	4b37      	ldr	r3, [pc, #220]	; (1d1c4 <vTaskSuspend+0x124>)
   1d0e6:	881b      	ldrh	r3, [r3, #0]
   1d0e8:	4013      	ands	r3, r2
   1d0ea:	b29b      	uxth	r3, r3
   1d0ec:	2b00      	cmp	r3, #0
   1d0ee:	d00a      	beq.n	1d106 <vTaskSuspend+0x66>
   1d0f0:	68fb      	ldr	r3, [r7, #12]
   1d0f2:	0018      	movs	r0, r3
   1d0f4:	4b34      	ldr	r3, [pc, #208]	; (1d1c8 <vTaskSuspend+0x128>)
   1d0f6:	4798      	blx	r3
   1d0f8:	0003      	movs	r3, r0
   1d0fa:	b2db      	uxtb	r3, r3
   1d0fc:	001a      	movs	r2, r3
   1d0fe:	2103      	movs	r1, #3
   1d100:	208a      	movs	r0, #138	; 0x8a
   1d102:	4b32      	ldr	r3, [pc, #200]	; (1d1cc <vTaskSuspend+0x12c>)
   1d104:	4798      	blx	r3
   1d106:	68fb      	ldr	r3, [r7, #12]
   1d108:	0018      	movs	r0, r3
   1d10a:	4b2f      	ldr	r3, [pc, #188]	; (1d1c8 <vTaskSuspend+0x128>)
   1d10c:	4798      	blx	r3
   1d10e:	0003      	movs	r3, r0
   1d110:	b2db      	uxtb	r3, r3
   1d112:	0018      	movs	r0, r3
   1d114:	4b2e      	ldr	r3, [pc, #184]	; (1d1d0 <vTaskSuspend+0x130>)
   1d116:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d118:	68fb      	ldr	r3, [r7, #12]
   1d11a:	3304      	adds	r3, #4
   1d11c:	0018      	movs	r0, r3
   1d11e:	4b2d      	ldr	r3, [pc, #180]	; (1d1d4 <vTaskSuspend+0x134>)
   1d120:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d122:	68fb      	ldr	r3, [r7, #12]
   1d124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d126:	2b00      	cmp	r3, #0
   1d128:	d004      	beq.n	1d134 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d12a:	68fb      	ldr	r3, [r7, #12]
   1d12c:	3318      	adds	r3, #24
   1d12e:	0018      	movs	r0, r3
   1d130:	4b28      	ldr	r3, [pc, #160]	; (1d1d4 <vTaskSuspend+0x134>)
   1d132:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1d134:	68fb      	ldr	r3, [r7, #12]
   1d136:	1d1a      	adds	r2, r3, #4
   1d138:	4b27      	ldr	r3, [pc, #156]	; (1d1d8 <vTaskSuspend+0x138>)
   1d13a:	0011      	movs	r1, r2
   1d13c:	0018      	movs	r0, r3
   1d13e:	4b27      	ldr	r3, [pc, #156]	; (1d1dc <vTaskSuspend+0x13c>)
   1d140:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1d142:	68fb      	ldr	r3, [r7, #12]
   1d144:	2250      	movs	r2, #80	; 0x50
   1d146:	5c9b      	ldrb	r3, [r3, r2]
   1d148:	b2db      	uxtb	r3, r3
   1d14a:	2b01      	cmp	r3, #1
   1d14c:	d103      	bne.n	1d156 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1d14e:	68fb      	ldr	r3, [r7, #12]
   1d150:	2250      	movs	r2, #80	; 0x50
   1d152:	2100      	movs	r1, #0
   1d154:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1d156:	4b22      	ldr	r3, [pc, #136]	; (1d1e0 <vTaskSuspend+0x140>)
   1d158:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1d15a:	4b22      	ldr	r3, [pc, #136]	; (1d1e4 <vTaskSuspend+0x144>)
   1d15c:	681b      	ldr	r3, [r3, #0]
   1d15e:	2b00      	cmp	r3, #0
   1d160:	d005      	beq.n	1d16e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1d162:	4b14      	ldr	r3, [pc, #80]	; (1d1b4 <vTaskSuspend+0x114>)
   1d164:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1d166:	4b20      	ldr	r3, [pc, #128]	; (1d1e8 <vTaskSuspend+0x148>)
   1d168:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1d16a:	4b1d      	ldr	r3, [pc, #116]	; (1d1e0 <vTaskSuspend+0x140>)
   1d16c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1d16e:	4b12      	ldr	r3, [pc, #72]	; (1d1b8 <vTaskSuspend+0x118>)
   1d170:	681b      	ldr	r3, [r3, #0]
   1d172:	68fa      	ldr	r2, [r7, #12]
   1d174:	429a      	cmp	r2, r3
   1d176:	d118      	bne.n	1d1aa <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1d178:	4b1a      	ldr	r3, [pc, #104]	; (1d1e4 <vTaskSuspend+0x144>)
   1d17a:	681b      	ldr	r3, [r3, #0]
   1d17c:	2b00      	cmp	r3, #0
   1d17e:	d008      	beq.n	1d192 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1d180:	4b1a      	ldr	r3, [pc, #104]	; (1d1ec <vTaskSuspend+0x14c>)
   1d182:	681b      	ldr	r3, [r3, #0]
   1d184:	2b00      	cmp	r3, #0
   1d186:	d001      	beq.n	1d18c <vTaskSuspend+0xec>
   1d188:	b672      	cpsid	i
   1d18a:	e7fe      	b.n	1d18a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1d18c:	4b18      	ldr	r3, [pc, #96]	; (1d1f0 <vTaskSuspend+0x150>)
   1d18e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d190:	e00b      	b.n	1d1aa <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1d192:	4b11      	ldr	r3, [pc, #68]	; (1d1d8 <vTaskSuspend+0x138>)
   1d194:	681a      	ldr	r2, [r3, #0]
   1d196:	4b17      	ldr	r3, [pc, #92]	; (1d1f4 <vTaskSuspend+0x154>)
   1d198:	681b      	ldr	r3, [r3, #0]
   1d19a:	429a      	cmp	r2, r3
   1d19c:	d103      	bne.n	1d1a6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1d19e:	4b06      	ldr	r3, [pc, #24]	; (1d1b8 <vTaskSuspend+0x118>)
   1d1a0:	2200      	movs	r2, #0
   1d1a2:	601a      	str	r2, [r3, #0]
	}
   1d1a4:	e001      	b.n	1d1aa <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1d1a6:	4b14      	ldr	r3, [pc, #80]	; (1d1f8 <vTaskSuspend+0x158>)
   1d1a8:	4798      	blx	r3
	}
   1d1aa:	46c0      	nop			; (mov r8, r8)
   1d1ac:	46bd      	mov	sp, r7
   1d1ae:	b004      	add	sp, #16
   1d1b0:	bd80      	pop	{r7, pc}
   1d1b2:	46c0      	nop			; (mov r8, r8)
   1d1b4:	0001afc9 	.word	0x0001afc9
   1d1b8:	200040dc 	.word	0x200040dc
   1d1bc:	0001925d 	.word	0x0001925d
   1d1c0:	00018fc1 	.word	0x00018fc1
   1d1c4:	20000110 	.word	0x20000110
   1d1c8:	00018fa1 	.word	0x00018fa1
   1d1cc:	000199b9 	.word	0x000199b9
   1d1d0:	0001a151 	.word	0x0001a151
   1d1d4:	0001ae3b 	.word	0x0001ae3b
   1d1d8:	200041a0 	.word	0x200041a0
   1d1dc:	0001ad8b 	.word	0x0001ad8b
   1d1e0:	0001afed 	.word	0x0001afed
   1d1e4:	200041c0 	.word	0x200041c0
   1d1e8:	0001dc85 	.word	0x0001dc85
   1d1ec:	200041dc 	.word	0x200041dc
   1d1f0:	0001afb1 	.word	0x0001afb1
   1d1f4:	200041b4 	.word	0x200041b4
   1d1f8:	0001d615 	.word	0x0001d615

0001d1fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1d1fc:	b590      	push	{r4, r7, lr}
   1d1fe:	b085      	sub	sp, #20
   1d200:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1d202:	4916      	ldr	r1, [pc, #88]	; (1d25c <vTaskStartScheduler+0x60>)
   1d204:	4816      	ldr	r0, [pc, #88]	; (1d260 <vTaskStartScheduler+0x64>)
   1d206:	4b17      	ldr	r3, [pc, #92]	; (1d264 <vTaskStartScheduler+0x68>)
   1d208:	9301      	str	r3, [sp, #4]
   1d20a:	2300      	movs	r3, #0
   1d20c:	9300      	str	r3, [sp, #0]
   1d20e:	2300      	movs	r3, #0
   1d210:	2296      	movs	r2, #150	; 0x96
   1d212:	4c15      	ldr	r4, [pc, #84]	; (1d268 <vTaskStartScheduler+0x6c>)
   1d214:	47a0      	blx	r4
   1d216:	0003      	movs	r3, r0
   1d218:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1d21a:	687b      	ldr	r3, [r7, #4]
   1d21c:	2b01      	cmp	r3, #1
   1d21e:	d103      	bne.n	1d228 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1d220:	4b12      	ldr	r3, [pc, #72]	; (1d26c <vTaskStartScheduler+0x70>)
   1d222:	4798      	blx	r3
   1d224:	0003      	movs	r3, r0
   1d226:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1d228:	687b      	ldr	r3, [r7, #4]
   1d22a:	2b01      	cmp	r3, #1
   1d22c:	d10d      	bne.n	1d24a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1d22e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1d230:	4b0f      	ldr	r3, [pc, #60]	; (1d270 <vTaskStartScheduler+0x74>)
   1d232:	2201      	movs	r2, #1
   1d234:	4252      	negs	r2, r2
   1d236:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1d238:	4b0e      	ldr	r3, [pc, #56]	; (1d274 <vTaskStartScheduler+0x78>)
   1d23a:	2201      	movs	r2, #1
   1d23c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1d23e:	4b0e      	ldr	r3, [pc, #56]	; (1d278 <vTaskStartScheduler+0x7c>)
   1d240:	2200      	movs	r2, #0
   1d242:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1d244:	4b0d      	ldr	r3, [pc, #52]	; (1d27c <vTaskStartScheduler+0x80>)
   1d246:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1d248:	e004      	b.n	1d254 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1d24a:	687b      	ldr	r3, [r7, #4]
   1d24c:	3301      	adds	r3, #1
   1d24e:	d101      	bne.n	1d254 <vTaskStartScheduler+0x58>
   1d250:	b672      	cpsid	i
   1d252:	e7fe      	b.n	1d252 <vTaskStartScheduler+0x56>
}
   1d254:	46c0      	nop			; (mov r8, r8)
   1d256:	46bd      	mov	sp, r7
   1d258:	b003      	add	sp, #12
   1d25a:	bd90      	pop	{r4, r7, pc}
   1d25c:	00039258 	.word	0x00039258
   1d260:	0001dacd 	.word	0x0001dacd
   1d264:	200041d8 	.word	0x200041d8
   1d268:	0001cc25 	.word	0x0001cc25
   1d26c:	0001e28d 	.word	0x0001e28d
   1d270:	200041d4 	.word	0x200041d4
   1d274:	200041c0 	.word	0x200041c0
   1d278:	200041b8 	.word	0x200041b8
   1d27c:	0001af59 	.word	0x0001af59

0001d280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1d280:	b580      	push	{r7, lr}
   1d282:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1d284:	4b03      	ldr	r3, [pc, #12]	; (1d294 <vTaskSuspendAll+0x14>)
   1d286:	681b      	ldr	r3, [r3, #0]
   1d288:	1c5a      	adds	r2, r3, #1
   1d28a:	4b02      	ldr	r3, [pc, #8]	; (1d294 <vTaskSuspendAll+0x14>)
   1d28c:	601a      	str	r2, [r3, #0]
}
   1d28e:	46c0      	nop			; (mov r8, r8)
   1d290:	46bd      	mov	sp, r7
   1d292:	bd80      	pop	{r7, pc}
   1d294:	200041dc 	.word	0x200041dc

0001d298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1d298:	b580      	push	{r7, lr}
   1d29a:	b084      	sub	sp, #16
   1d29c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1d29e:	2300      	movs	r3, #0
   1d2a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1d2a2:	2300      	movs	r3, #0
   1d2a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1d2a6:	4b45      	ldr	r3, [pc, #276]	; (1d3bc <xTaskResumeAll+0x124>)
   1d2a8:	681b      	ldr	r3, [r3, #0]
   1d2aa:	2b00      	cmp	r3, #0
   1d2ac:	d101      	bne.n	1d2b2 <xTaskResumeAll+0x1a>
   1d2ae:	b672      	cpsid	i
   1d2b0:	e7fe      	b.n	1d2b0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1d2b2:	4b43      	ldr	r3, [pc, #268]	; (1d3c0 <xTaskResumeAll+0x128>)
   1d2b4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1d2b6:	4b41      	ldr	r3, [pc, #260]	; (1d3bc <xTaskResumeAll+0x124>)
   1d2b8:	681b      	ldr	r3, [r3, #0]
   1d2ba:	1e5a      	subs	r2, r3, #1
   1d2bc:	4b3f      	ldr	r3, [pc, #252]	; (1d3bc <xTaskResumeAll+0x124>)
   1d2be:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d2c0:	4b3e      	ldr	r3, [pc, #248]	; (1d3bc <xTaskResumeAll+0x124>)
   1d2c2:	681b      	ldr	r3, [r3, #0]
   1d2c4:	2b00      	cmp	r3, #0
   1d2c6:	d000      	beq.n	1d2ca <xTaskResumeAll+0x32>
   1d2c8:	e071      	b.n	1d3ae <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1d2ca:	4b3e      	ldr	r3, [pc, #248]	; (1d3c4 <xTaskResumeAll+0x12c>)
   1d2cc:	681b      	ldr	r3, [r3, #0]
   1d2ce:	2b00      	cmp	r3, #0
   1d2d0:	d100      	bne.n	1d2d4 <xTaskResumeAll+0x3c>
   1d2d2:	e06c      	b.n	1d3ae <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d2d4:	e044      	b.n	1d360 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1d2d6:	4b3c      	ldr	r3, [pc, #240]	; (1d3c8 <xTaskResumeAll+0x130>)
   1d2d8:	68db      	ldr	r3, [r3, #12]
   1d2da:	68db      	ldr	r3, [r3, #12]
   1d2dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d2de:	68fb      	ldr	r3, [r7, #12]
   1d2e0:	3318      	adds	r3, #24
   1d2e2:	0018      	movs	r0, r3
   1d2e4:	4b39      	ldr	r3, [pc, #228]	; (1d3cc <xTaskResumeAll+0x134>)
   1d2e6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d2e8:	68fb      	ldr	r3, [r7, #12]
   1d2ea:	3304      	adds	r3, #4
   1d2ec:	0018      	movs	r0, r3
   1d2ee:	4b37      	ldr	r3, [pc, #220]	; (1d3cc <xTaskResumeAll+0x134>)
   1d2f0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1d2f2:	68fb      	ldr	r3, [r7, #12]
   1d2f4:	0018      	movs	r0, r3
   1d2f6:	4b36      	ldr	r3, [pc, #216]	; (1d3d0 <xTaskResumeAll+0x138>)
   1d2f8:	4798      	blx	r3
   1d2fa:	0003      	movs	r3, r0
   1d2fc:	001a      	movs	r2, r3
   1d2fe:	4b35      	ldr	r3, [pc, #212]	; (1d3d4 <xTaskResumeAll+0x13c>)
   1d300:	881b      	ldrh	r3, [r3, #0]
   1d302:	4013      	ands	r3, r2
   1d304:	b29b      	uxth	r3, r3
   1d306:	2b00      	cmp	r3, #0
   1d308:	d008      	beq.n	1d31c <xTaskResumeAll+0x84>
   1d30a:	68fb      	ldr	r3, [r7, #12]
   1d30c:	0018      	movs	r0, r3
   1d30e:	4b32      	ldr	r3, [pc, #200]	; (1d3d8 <xTaskResumeAll+0x140>)
   1d310:	4798      	blx	r3
   1d312:	0003      	movs	r3, r0
   1d314:	b2db      	uxtb	r3, r3
   1d316:	0018      	movs	r0, r3
   1d318:	4b30      	ldr	r3, [pc, #192]	; (1d3dc <xTaskResumeAll+0x144>)
   1d31a:	4798      	blx	r3
   1d31c:	68fb      	ldr	r3, [r7, #12]
   1d31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d320:	4b2f      	ldr	r3, [pc, #188]	; (1d3e0 <xTaskResumeAll+0x148>)
   1d322:	681b      	ldr	r3, [r3, #0]
   1d324:	429a      	cmp	r2, r3
   1d326:	d903      	bls.n	1d330 <xTaskResumeAll+0x98>
   1d328:	68fb      	ldr	r3, [r7, #12]
   1d32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d32c:	4b2c      	ldr	r3, [pc, #176]	; (1d3e0 <xTaskResumeAll+0x148>)
   1d32e:	601a      	str	r2, [r3, #0]
   1d330:	68fb      	ldr	r3, [r7, #12]
   1d332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d334:	0013      	movs	r3, r2
   1d336:	009b      	lsls	r3, r3, #2
   1d338:	189b      	adds	r3, r3, r2
   1d33a:	009b      	lsls	r3, r3, #2
   1d33c:	4a29      	ldr	r2, [pc, #164]	; (1d3e4 <xTaskResumeAll+0x14c>)
   1d33e:	189a      	adds	r2, r3, r2
   1d340:	68fb      	ldr	r3, [r7, #12]
   1d342:	3304      	adds	r3, #4
   1d344:	0019      	movs	r1, r3
   1d346:	0010      	movs	r0, r2
   1d348:	4b27      	ldr	r3, [pc, #156]	; (1d3e8 <xTaskResumeAll+0x150>)
   1d34a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d34c:	68fb      	ldr	r3, [r7, #12]
   1d34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d350:	4b26      	ldr	r3, [pc, #152]	; (1d3ec <xTaskResumeAll+0x154>)
   1d352:	681b      	ldr	r3, [r3, #0]
   1d354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d356:	429a      	cmp	r2, r3
   1d358:	d302      	bcc.n	1d360 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1d35a:	4b25      	ldr	r3, [pc, #148]	; (1d3f0 <xTaskResumeAll+0x158>)
   1d35c:	2201      	movs	r2, #1
   1d35e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d360:	4b19      	ldr	r3, [pc, #100]	; (1d3c8 <xTaskResumeAll+0x130>)
   1d362:	681b      	ldr	r3, [r3, #0]
   1d364:	2b00      	cmp	r3, #0
   1d366:	d1b6      	bne.n	1d2d6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1d368:	68fb      	ldr	r3, [r7, #12]
   1d36a:	2b00      	cmp	r3, #0
   1d36c:	d001      	beq.n	1d372 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1d36e:	4b21      	ldr	r3, [pc, #132]	; (1d3f4 <xTaskResumeAll+0x15c>)
   1d370:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1d372:	4b21      	ldr	r3, [pc, #132]	; (1d3f8 <xTaskResumeAll+0x160>)
   1d374:	681b      	ldr	r3, [r3, #0]
   1d376:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1d378:	687b      	ldr	r3, [r7, #4]
   1d37a:	2b00      	cmp	r3, #0
   1d37c:	d00f      	beq.n	1d39e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1d37e:	4b1f      	ldr	r3, [pc, #124]	; (1d3fc <xTaskResumeAll+0x164>)
   1d380:	4798      	blx	r3
   1d382:	1e03      	subs	r3, r0, #0
   1d384:	d002      	beq.n	1d38c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1d386:	4b1a      	ldr	r3, [pc, #104]	; (1d3f0 <xTaskResumeAll+0x158>)
   1d388:	2201      	movs	r2, #1
   1d38a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1d38c:	687b      	ldr	r3, [r7, #4]
   1d38e:	3b01      	subs	r3, #1
   1d390:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1d392:	687b      	ldr	r3, [r7, #4]
   1d394:	2b00      	cmp	r3, #0
   1d396:	d1f2      	bne.n	1d37e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1d398:	4b17      	ldr	r3, [pc, #92]	; (1d3f8 <xTaskResumeAll+0x160>)
   1d39a:	2200      	movs	r2, #0
   1d39c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1d39e:	4b14      	ldr	r3, [pc, #80]	; (1d3f0 <xTaskResumeAll+0x158>)
   1d3a0:	681b      	ldr	r3, [r3, #0]
   1d3a2:	2b00      	cmp	r3, #0
   1d3a4:	d003      	beq.n	1d3ae <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1d3a6:	2301      	movs	r3, #1
   1d3a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1d3aa:	4b15      	ldr	r3, [pc, #84]	; (1d400 <xTaskResumeAll+0x168>)
   1d3ac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d3ae:	4b15      	ldr	r3, [pc, #84]	; (1d404 <xTaskResumeAll+0x16c>)
   1d3b0:	4798      	blx	r3

	return xAlreadyYielded;
   1d3b2:	68bb      	ldr	r3, [r7, #8]
}
   1d3b4:	0018      	movs	r0, r3
   1d3b6:	46bd      	mov	sp, r7
   1d3b8:	b004      	add	sp, #16
   1d3ba:	bd80      	pop	{r7, pc}
   1d3bc:	200041dc 	.word	0x200041dc
   1d3c0:	0001afc9 	.word	0x0001afc9
   1d3c4:	200041b4 	.word	0x200041b4
   1d3c8:	20004174 	.word	0x20004174
   1d3cc:	0001ae3b 	.word	0x0001ae3b
   1d3d0:	00018fc1 	.word	0x00018fc1
   1d3d4:	20000110 	.word	0x20000110
   1d3d8:	00018fa1 	.word	0x00018fa1
   1d3dc:	00019771 	.word	0x00019771
   1d3e0:	200041bc 	.word	0x200041bc
   1d3e4:	200040e0 	.word	0x200040e0
   1d3e8:	0001ad8b 	.word	0x0001ad8b
   1d3ec:	200040dc 	.word	0x200040dc
   1d3f0:	200041c8 	.word	0x200041c8
   1d3f4:	0001dc85 	.word	0x0001dc85
   1d3f8:	200041c4 	.word	0x200041c4
   1d3fc:	0001d425 	.word	0x0001d425
   1d400:	0001afb1 	.word	0x0001afb1
   1d404:	0001afed 	.word	0x0001afed

0001d408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1d408:	b580      	push	{r7, lr}
   1d40a:	b082      	sub	sp, #8
   1d40c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1d40e:	4b04      	ldr	r3, [pc, #16]	; (1d420 <xTaskGetTickCount+0x18>)
   1d410:	681b      	ldr	r3, [r3, #0]
   1d412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1d414:	687b      	ldr	r3, [r7, #4]
}
   1d416:	0018      	movs	r0, r3
   1d418:	46bd      	mov	sp, r7
   1d41a:	b002      	add	sp, #8
   1d41c:	bd80      	pop	{r7, pc}
   1d41e:	46c0      	nop			; (mov r8, r8)
   1d420:	200041b8 	.word	0x200041b8

0001d424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1d424:	b580      	push	{r7, lr}
   1d426:	b086      	sub	sp, #24
   1d428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1d42a:	2300      	movs	r3, #0
   1d42c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1d42e:	4b64      	ldr	r3, [pc, #400]	; (1d5c0 <xTaskIncrementTick+0x19c>)
   1d430:	681b      	ldr	r3, [r3, #0]
   1d432:	2b01      	cmp	r3, #1
   1d434:	d003      	beq.n	1d43e <xTaskIncrementTick+0x1a>
   1d436:	4b63      	ldr	r3, [pc, #396]	; (1d5c4 <xTaskIncrementTick+0x1a0>)
   1d438:	681b      	ldr	r3, [r3, #0]
   1d43a:	2b00      	cmp	r3, #0
   1d43c:	d107      	bne.n	1d44e <xTaskIncrementTick+0x2a>
   1d43e:	4b62      	ldr	r3, [pc, #392]	; (1d5c8 <xTaskIncrementTick+0x1a4>)
   1d440:	681b      	ldr	r3, [r3, #0]
   1d442:	1c5a      	adds	r2, r3, #1
   1d444:	4b60      	ldr	r3, [pc, #384]	; (1d5c8 <xTaskIncrementTick+0x1a4>)
   1d446:	601a      	str	r2, [r3, #0]
   1d448:	2000      	movs	r0, #0
   1d44a:	4b60      	ldr	r3, [pc, #384]	; (1d5cc <xTaskIncrementTick+0x1a8>)
   1d44c:	4798      	blx	r3
   1d44e:	4b5c      	ldr	r3, [pc, #368]	; (1d5c0 <xTaskIncrementTick+0x19c>)
   1d450:	681b      	ldr	r3, [r3, #0]
   1d452:	2b00      	cmp	r3, #0
   1d454:	d106      	bne.n	1d464 <xTaskIncrementTick+0x40>
   1d456:	4b5e      	ldr	r3, [pc, #376]	; (1d5d0 <xTaskIncrementTick+0x1ac>)
   1d458:	681b      	ldr	r3, [r3, #0]
   1d45a:	3301      	adds	r3, #1
   1d45c:	0019      	movs	r1, r3
   1d45e:	2003      	movs	r0, #3
   1d460:	4b5c      	ldr	r3, [pc, #368]	; (1d5d4 <xTaskIncrementTick+0x1b0>)
   1d462:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d464:	4b56      	ldr	r3, [pc, #344]	; (1d5c0 <xTaskIncrementTick+0x19c>)
   1d466:	681b      	ldr	r3, [r3, #0]
   1d468:	2b00      	cmp	r3, #0
   1d46a:	d000      	beq.n	1d46e <xTaskIncrementTick+0x4a>
   1d46c:	e098      	b.n	1d5a0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1d46e:	4b58      	ldr	r3, [pc, #352]	; (1d5d0 <xTaskIncrementTick+0x1ac>)
   1d470:	681b      	ldr	r3, [r3, #0]
   1d472:	3301      	adds	r3, #1
   1d474:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1d476:	4b56      	ldr	r3, [pc, #344]	; (1d5d0 <xTaskIncrementTick+0x1ac>)
   1d478:	693a      	ldr	r2, [r7, #16]
   1d47a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1d47c:	693b      	ldr	r3, [r7, #16]
   1d47e:	2b00      	cmp	r3, #0
   1d480:	d117      	bne.n	1d4b2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1d482:	4b55      	ldr	r3, [pc, #340]	; (1d5d8 <xTaskIncrementTick+0x1b4>)
   1d484:	681b      	ldr	r3, [r3, #0]
   1d486:	681b      	ldr	r3, [r3, #0]
   1d488:	2b00      	cmp	r3, #0
   1d48a:	d001      	beq.n	1d490 <xTaskIncrementTick+0x6c>
   1d48c:	b672      	cpsid	i
   1d48e:	e7fe      	b.n	1d48e <xTaskIncrementTick+0x6a>
   1d490:	4b51      	ldr	r3, [pc, #324]	; (1d5d8 <xTaskIncrementTick+0x1b4>)
   1d492:	681b      	ldr	r3, [r3, #0]
   1d494:	60fb      	str	r3, [r7, #12]
   1d496:	4b51      	ldr	r3, [pc, #324]	; (1d5dc <xTaskIncrementTick+0x1b8>)
   1d498:	681a      	ldr	r2, [r3, #0]
   1d49a:	4b4f      	ldr	r3, [pc, #316]	; (1d5d8 <xTaskIncrementTick+0x1b4>)
   1d49c:	601a      	str	r2, [r3, #0]
   1d49e:	4b4f      	ldr	r3, [pc, #316]	; (1d5dc <xTaskIncrementTick+0x1b8>)
   1d4a0:	68fa      	ldr	r2, [r7, #12]
   1d4a2:	601a      	str	r2, [r3, #0]
   1d4a4:	4b4e      	ldr	r3, [pc, #312]	; (1d5e0 <xTaskIncrementTick+0x1bc>)
   1d4a6:	681b      	ldr	r3, [r3, #0]
   1d4a8:	1c5a      	adds	r2, r3, #1
   1d4aa:	4b4d      	ldr	r3, [pc, #308]	; (1d5e0 <xTaskIncrementTick+0x1bc>)
   1d4ac:	601a      	str	r2, [r3, #0]
   1d4ae:	4b4d      	ldr	r3, [pc, #308]	; (1d5e4 <xTaskIncrementTick+0x1c0>)
   1d4b0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1d4b2:	4b4d      	ldr	r3, [pc, #308]	; (1d5e8 <xTaskIncrementTick+0x1c4>)
   1d4b4:	681b      	ldr	r3, [r3, #0]
   1d4b6:	693a      	ldr	r2, [r7, #16]
   1d4b8:	429a      	cmp	r2, r3
   1d4ba:	d363      	bcc.n	1d584 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d4bc:	4b46      	ldr	r3, [pc, #280]	; (1d5d8 <xTaskIncrementTick+0x1b4>)
   1d4be:	681b      	ldr	r3, [r3, #0]
   1d4c0:	681b      	ldr	r3, [r3, #0]
   1d4c2:	2b00      	cmp	r3, #0
   1d4c4:	d101      	bne.n	1d4ca <xTaskIncrementTick+0xa6>
   1d4c6:	2301      	movs	r3, #1
   1d4c8:	e000      	b.n	1d4cc <xTaskIncrementTick+0xa8>
   1d4ca:	2300      	movs	r3, #0
   1d4cc:	2b00      	cmp	r3, #0
   1d4ce:	d004      	beq.n	1d4da <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d4d0:	4b45      	ldr	r3, [pc, #276]	; (1d5e8 <xTaskIncrementTick+0x1c4>)
   1d4d2:	2201      	movs	r2, #1
   1d4d4:	4252      	negs	r2, r2
   1d4d6:	601a      	str	r2, [r3, #0]
					break;
   1d4d8:	e054      	b.n	1d584 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d4da:	4b3f      	ldr	r3, [pc, #252]	; (1d5d8 <xTaskIncrementTick+0x1b4>)
   1d4dc:	681b      	ldr	r3, [r3, #0]
   1d4de:	68db      	ldr	r3, [r3, #12]
   1d4e0:	68db      	ldr	r3, [r3, #12]
   1d4e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1d4e4:	68bb      	ldr	r3, [r7, #8]
   1d4e6:	685b      	ldr	r3, [r3, #4]
   1d4e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1d4ea:	693a      	ldr	r2, [r7, #16]
   1d4ec:	687b      	ldr	r3, [r7, #4]
   1d4ee:	429a      	cmp	r2, r3
   1d4f0:	d203      	bcs.n	1d4fa <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1d4f2:	4b3d      	ldr	r3, [pc, #244]	; (1d5e8 <xTaskIncrementTick+0x1c4>)
   1d4f4:	687a      	ldr	r2, [r7, #4]
   1d4f6:	601a      	str	r2, [r3, #0]
						break;
   1d4f8:	e044      	b.n	1d584 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d4fa:	68bb      	ldr	r3, [r7, #8]
   1d4fc:	3304      	adds	r3, #4
   1d4fe:	0018      	movs	r0, r3
   1d500:	4b3a      	ldr	r3, [pc, #232]	; (1d5ec <xTaskIncrementTick+0x1c8>)
   1d502:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d504:	68bb      	ldr	r3, [r7, #8]
   1d506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d508:	2b00      	cmp	r3, #0
   1d50a:	d004      	beq.n	1d516 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d50c:	68bb      	ldr	r3, [r7, #8]
   1d50e:	3318      	adds	r3, #24
   1d510:	0018      	movs	r0, r3
   1d512:	4b36      	ldr	r3, [pc, #216]	; (1d5ec <xTaskIncrementTick+0x1c8>)
   1d514:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1d516:	68bb      	ldr	r3, [r7, #8]
   1d518:	0018      	movs	r0, r3
   1d51a:	4b35      	ldr	r3, [pc, #212]	; (1d5f0 <xTaskIncrementTick+0x1cc>)
   1d51c:	4798      	blx	r3
   1d51e:	0003      	movs	r3, r0
   1d520:	001a      	movs	r2, r3
   1d522:	4b34      	ldr	r3, [pc, #208]	; (1d5f4 <xTaskIncrementTick+0x1d0>)
   1d524:	881b      	ldrh	r3, [r3, #0]
   1d526:	4013      	ands	r3, r2
   1d528:	b29b      	uxth	r3, r3
   1d52a:	2b00      	cmp	r3, #0
   1d52c:	d008      	beq.n	1d540 <xTaskIncrementTick+0x11c>
   1d52e:	68bb      	ldr	r3, [r7, #8]
   1d530:	0018      	movs	r0, r3
   1d532:	4b31      	ldr	r3, [pc, #196]	; (1d5f8 <xTaskIncrementTick+0x1d4>)
   1d534:	4798      	blx	r3
   1d536:	0003      	movs	r3, r0
   1d538:	b2db      	uxtb	r3, r3
   1d53a:	0018      	movs	r0, r3
   1d53c:	4b2f      	ldr	r3, [pc, #188]	; (1d5fc <xTaskIncrementTick+0x1d8>)
   1d53e:	4798      	blx	r3
   1d540:	68bb      	ldr	r3, [r7, #8]
   1d542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d544:	4b2e      	ldr	r3, [pc, #184]	; (1d600 <xTaskIncrementTick+0x1dc>)
   1d546:	681b      	ldr	r3, [r3, #0]
   1d548:	429a      	cmp	r2, r3
   1d54a:	d903      	bls.n	1d554 <xTaskIncrementTick+0x130>
   1d54c:	68bb      	ldr	r3, [r7, #8]
   1d54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d550:	4b2b      	ldr	r3, [pc, #172]	; (1d600 <xTaskIncrementTick+0x1dc>)
   1d552:	601a      	str	r2, [r3, #0]
   1d554:	68bb      	ldr	r3, [r7, #8]
   1d556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d558:	0013      	movs	r3, r2
   1d55a:	009b      	lsls	r3, r3, #2
   1d55c:	189b      	adds	r3, r3, r2
   1d55e:	009b      	lsls	r3, r3, #2
   1d560:	4a28      	ldr	r2, [pc, #160]	; (1d604 <xTaskIncrementTick+0x1e0>)
   1d562:	189a      	adds	r2, r3, r2
   1d564:	68bb      	ldr	r3, [r7, #8]
   1d566:	3304      	adds	r3, #4
   1d568:	0019      	movs	r1, r3
   1d56a:	0010      	movs	r0, r2
   1d56c:	4b26      	ldr	r3, [pc, #152]	; (1d608 <xTaskIncrementTick+0x1e4>)
   1d56e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d570:	68bb      	ldr	r3, [r7, #8]
   1d572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d574:	4b25      	ldr	r3, [pc, #148]	; (1d60c <xTaskIncrementTick+0x1e8>)
   1d576:	681b      	ldr	r3, [r3, #0]
   1d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d57a:	429a      	cmp	r2, r3
   1d57c:	d39e      	bcc.n	1d4bc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1d57e:	2301      	movs	r3, #1
   1d580:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d582:	e79b      	b.n	1d4bc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1d584:	4b21      	ldr	r3, [pc, #132]	; (1d60c <xTaskIncrementTick+0x1e8>)
   1d586:	681b      	ldr	r3, [r3, #0]
   1d588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d58a:	491e      	ldr	r1, [pc, #120]	; (1d604 <xTaskIncrementTick+0x1e0>)
   1d58c:	0013      	movs	r3, r2
   1d58e:	009b      	lsls	r3, r3, #2
   1d590:	189b      	adds	r3, r3, r2
   1d592:	009b      	lsls	r3, r3, #2
   1d594:	585b      	ldr	r3, [r3, r1]
   1d596:	2b01      	cmp	r3, #1
   1d598:	d907      	bls.n	1d5aa <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1d59a:	2301      	movs	r3, #1
   1d59c:	617b      	str	r3, [r7, #20]
   1d59e:	e004      	b.n	1d5aa <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1d5a0:	4b08      	ldr	r3, [pc, #32]	; (1d5c4 <xTaskIncrementTick+0x1a0>)
   1d5a2:	681b      	ldr	r3, [r3, #0]
   1d5a4:	1c5a      	adds	r2, r3, #1
   1d5a6:	4b07      	ldr	r3, [pc, #28]	; (1d5c4 <xTaskIncrementTick+0x1a0>)
   1d5a8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1d5aa:	4b19      	ldr	r3, [pc, #100]	; (1d610 <xTaskIncrementTick+0x1ec>)
   1d5ac:	681b      	ldr	r3, [r3, #0]
   1d5ae:	2b00      	cmp	r3, #0
   1d5b0:	d001      	beq.n	1d5b6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1d5b2:	2301      	movs	r3, #1
   1d5b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1d5b6:	697b      	ldr	r3, [r7, #20]
}
   1d5b8:	0018      	movs	r0, r3
   1d5ba:	46bd      	mov	sp, r7
   1d5bc:	b006      	add	sp, #24
   1d5be:	bd80      	pop	{r7, pc}
   1d5c0:	200041dc 	.word	0x200041dc
   1d5c4:	200041c4 	.word	0x200041c4
   1d5c8:	20000d3c 	.word	0x20000d3c
   1d5cc:	0001ac55 	.word	0x0001ac55
   1d5d0:	200041b8 	.word	0x200041b8
   1d5d4:	00019cc1 	.word	0x00019cc1
   1d5d8:	2000416c 	.word	0x2000416c
   1d5dc:	20004170 	.word	0x20004170
   1d5e0:	200041cc 	.word	0x200041cc
   1d5e4:	0001dc85 	.word	0x0001dc85
   1d5e8:	200041d4 	.word	0x200041d4
   1d5ec:	0001ae3b 	.word	0x0001ae3b
   1d5f0:	00018fc1 	.word	0x00018fc1
   1d5f4:	20000110 	.word	0x20000110
   1d5f8:	00018fa1 	.word	0x00018fa1
   1d5fc:	00019771 	.word	0x00019771
   1d600:	200041bc 	.word	0x200041bc
   1d604:	200040e0 	.word	0x200040e0
   1d608:	0001ad8b 	.word	0x0001ad8b
   1d60c:	200040dc 	.word	0x200040dc
   1d610:	200041c8 	.word	0x200041c8

0001d614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1d614:	b580      	push	{r7, lr}
   1d616:	b082      	sub	sp, #8
   1d618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1d61a:	4b3a      	ldr	r3, [pc, #232]	; (1d704 <vTaskSwitchContext+0xf0>)
   1d61c:	681b      	ldr	r3, [r3, #0]
   1d61e:	2b00      	cmp	r3, #0
   1d620:	d003      	beq.n	1d62a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1d622:	4b39      	ldr	r3, [pc, #228]	; (1d708 <vTaskSwitchContext+0xf4>)
   1d624:	2201      	movs	r2, #1
   1d626:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1d628:	e067      	b.n	1d6fa <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1d62a:	4b37      	ldr	r3, [pc, #220]	; (1d708 <vTaskSwitchContext+0xf4>)
   1d62c:	2200      	movs	r2, #0
   1d62e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1d630:	4b36      	ldr	r3, [pc, #216]	; (1d70c <vTaskSwitchContext+0xf8>)
   1d632:	681b      	ldr	r3, [r3, #0]
   1d634:	681a      	ldr	r2, [r3, #0]
   1d636:	4b35      	ldr	r3, [pc, #212]	; (1d70c <vTaskSwitchContext+0xf8>)
   1d638:	681b      	ldr	r3, [r3, #0]
   1d63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d63c:	429a      	cmp	r2, r3
   1d63e:	d808      	bhi.n	1d652 <vTaskSwitchContext+0x3e>
   1d640:	4b32      	ldr	r3, [pc, #200]	; (1d70c <vTaskSwitchContext+0xf8>)
   1d642:	681a      	ldr	r2, [r3, #0]
   1d644:	4b31      	ldr	r3, [pc, #196]	; (1d70c <vTaskSwitchContext+0xf8>)
   1d646:	681b      	ldr	r3, [r3, #0]
   1d648:	3334      	adds	r3, #52	; 0x34
   1d64a:	0019      	movs	r1, r3
   1d64c:	0010      	movs	r0, r2
   1d64e:	4b30      	ldr	r3, [pc, #192]	; (1d710 <vTaskSwitchContext+0xfc>)
   1d650:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1d652:	4b30      	ldr	r3, [pc, #192]	; (1d714 <vTaskSwitchContext+0x100>)
   1d654:	681b      	ldr	r3, [r3, #0]
   1d656:	607b      	str	r3, [r7, #4]
   1d658:	e007      	b.n	1d66a <vTaskSwitchContext+0x56>
   1d65a:	687b      	ldr	r3, [r7, #4]
   1d65c:	2b00      	cmp	r3, #0
   1d65e:	d101      	bne.n	1d664 <vTaskSwitchContext+0x50>
   1d660:	b672      	cpsid	i
   1d662:	e7fe      	b.n	1d662 <vTaskSwitchContext+0x4e>
   1d664:	687b      	ldr	r3, [r7, #4]
   1d666:	3b01      	subs	r3, #1
   1d668:	607b      	str	r3, [r7, #4]
   1d66a:	492b      	ldr	r1, [pc, #172]	; (1d718 <vTaskSwitchContext+0x104>)
   1d66c:	687a      	ldr	r2, [r7, #4]
   1d66e:	0013      	movs	r3, r2
   1d670:	009b      	lsls	r3, r3, #2
   1d672:	189b      	adds	r3, r3, r2
   1d674:	009b      	lsls	r3, r3, #2
   1d676:	585b      	ldr	r3, [r3, r1]
   1d678:	2b00      	cmp	r3, #0
   1d67a:	d0ee      	beq.n	1d65a <vTaskSwitchContext+0x46>
   1d67c:	687a      	ldr	r2, [r7, #4]
   1d67e:	0013      	movs	r3, r2
   1d680:	009b      	lsls	r3, r3, #2
   1d682:	189b      	adds	r3, r3, r2
   1d684:	009b      	lsls	r3, r3, #2
   1d686:	4a24      	ldr	r2, [pc, #144]	; (1d718 <vTaskSwitchContext+0x104>)
   1d688:	189b      	adds	r3, r3, r2
   1d68a:	603b      	str	r3, [r7, #0]
   1d68c:	683b      	ldr	r3, [r7, #0]
   1d68e:	685b      	ldr	r3, [r3, #4]
   1d690:	685a      	ldr	r2, [r3, #4]
   1d692:	683b      	ldr	r3, [r7, #0]
   1d694:	605a      	str	r2, [r3, #4]
   1d696:	683b      	ldr	r3, [r7, #0]
   1d698:	685a      	ldr	r2, [r3, #4]
   1d69a:	683b      	ldr	r3, [r7, #0]
   1d69c:	3308      	adds	r3, #8
   1d69e:	429a      	cmp	r2, r3
   1d6a0:	d104      	bne.n	1d6ac <vTaskSwitchContext+0x98>
   1d6a2:	683b      	ldr	r3, [r7, #0]
   1d6a4:	685b      	ldr	r3, [r3, #4]
   1d6a6:	685a      	ldr	r2, [r3, #4]
   1d6a8:	683b      	ldr	r3, [r7, #0]
   1d6aa:	605a      	str	r2, [r3, #4]
   1d6ac:	683b      	ldr	r3, [r7, #0]
   1d6ae:	685b      	ldr	r3, [r3, #4]
   1d6b0:	68da      	ldr	r2, [r3, #12]
   1d6b2:	4b16      	ldr	r3, [pc, #88]	; (1d70c <vTaskSwitchContext+0xf8>)
   1d6b4:	601a      	str	r2, [r3, #0]
   1d6b6:	4b17      	ldr	r3, [pc, #92]	; (1d714 <vTaskSwitchContext+0x100>)
   1d6b8:	687a      	ldr	r2, [r7, #4]
   1d6ba:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1d6bc:	4b17      	ldr	r3, [pc, #92]	; (1d71c <vTaskSwitchContext+0x108>)
   1d6be:	2201      	movs	r2, #1
   1d6c0:	601a      	str	r2, [r3, #0]
   1d6c2:	4b17      	ldr	r3, [pc, #92]	; (1d720 <vTaskSwitchContext+0x10c>)
   1d6c4:	4798      	blx	r3
   1d6c6:	0003      	movs	r3, r0
   1d6c8:	0018      	movs	r0, r3
   1d6ca:	4b16      	ldr	r3, [pc, #88]	; (1d724 <vTaskSwitchContext+0x110>)
   1d6cc:	4798      	blx	r3
   1d6ce:	0003      	movs	r3, r0
   1d6d0:	001a      	movs	r2, r3
   1d6d2:	4b15      	ldr	r3, [pc, #84]	; (1d728 <vTaskSwitchContext+0x114>)
   1d6d4:	881b      	ldrh	r3, [r3, #0]
   1d6d6:	4013      	ands	r3, r2
   1d6d8:	b29b      	uxth	r3, r3
   1d6da:	2b00      	cmp	r3, #0
   1d6dc:	d00a      	beq.n	1d6f4 <vTaskSwitchContext+0xe0>
   1d6de:	4b10      	ldr	r3, [pc, #64]	; (1d720 <vTaskSwitchContext+0x10c>)
   1d6e0:	4798      	blx	r3
   1d6e2:	0003      	movs	r3, r0
   1d6e4:	0018      	movs	r0, r3
   1d6e6:	4b11      	ldr	r3, [pc, #68]	; (1d72c <vTaskSwitchContext+0x118>)
   1d6e8:	4798      	blx	r3
   1d6ea:	0003      	movs	r3, r0
   1d6ec:	b2db      	uxtb	r3, r3
   1d6ee:	0018      	movs	r0, r3
   1d6f0:	4b0f      	ldr	r3, [pc, #60]	; (1d730 <vTaskSwitchContext+0x11c>)
   1d6f2:	4798      	blx	r3
   1d6f4:	4b09      	ldr	r3, [pc, #36]	; (1d71c <vTaskSwitchContext+0x108>)
   1d6f6:	2202      	movs	r2, #2
   1d6f8:	601a      	str	r2, [r3, #0]
}
   1d6fa:	46c0      	nop			; (mov r8, r8)
   1d6fc:	46bd      	mov	sp, r7
   1d6fe:	b002      	add	sp, #8
   1d700:	bd80      	pop	{r7, pc}
   1d702:	46c0      	nop			; (mov r8, r8)
   1d704:	200041dc 	.word	0x200041dc
   1d708:	200041c8 	.word	0x200041c8
   1d70c:	200040dc 	.word	0x200040dc
   1d710:	0003378d 	.word	0x0003378d
   1d714:	200041bc 	.word	0x200041bc
   1d718:	200040e0 	.word	0x200040e0
   1d71c:	20000d48 	.word	0x20000d48
   1d720:	0001925d 	.word	0x0001925d
   1d724:	00018fc1 	.word	0x00018fc1
   1d728:	20000110 	.word	0x20000110
   1d72c:	00018fa1 	.word	0x00018fa1
   1d730:	00019dbd 	.word	0x00019dbd

0001d734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d734:	b580      	push	{r7, lr}
   1d736:	b082      	sub	sp, #8
   1d738:	af00      	add	r7, sp, #0
   1d73a:	6078      	str	r0, [r7, #4]
   1d73c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d73e:	687b      	ldr	r3, [r7, #4]
   1d740:	2b00      	cmp	r3, #0
   1d742:	d101      	bne.n	1d748 <vTaskPlaceOnEventList+0x14>
   1d744:	b672      	cpsid	i
   1d746:	e7fe      	b.n	1d746 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d748:	4b08      	ldr	r3, [pc, #32]	; (1d76c <vTaskPlaceOnEventList+0x38>)
   1d74a:	681b      	ldr	r3, [r3, #0]
   1d74c:	3318      	adds	r3, #24
   1d74e:	001a      	movs	r2, r3
   1d750:	687b      	ldr	r3, [r7, #4]
   1d752:	0011      	movs	r1, r2
   1d754:	0018      	movs	r0, r3
   1d756:	4b06      	ldr	r3, [pc, #24]	; (1d770 <vTaskPlaceOnEventList+0x3c>)
   1d758:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d75a:	683b      	ldr	r3, [r7, #0]
   1d75c:	2101      	movs	r1, #1
   1d75e:	0018      	movs	r0, r3
   1d760:	4b04      	ldr	r3, [pc, #16]	; (1d774 <vTaskPlaceOnEventList+0x40>)
   1d762:	4798      	blx	r3
}
   1d764:	46c0      	nop			; (mov r8, r8)
   1d766:	46bd      	mov	sp, r7
   1d768:	b002      	add	sp, #8
   1d76a:	bd80      	pop	{r7, pc}
   1d76c:	200040dc 	.word	0x200040dc
   1d770:	0001adcf 	.word	0x0001adcf
   1d774:	0001e1d9 	.word	0x0001e1d9

0001d778 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d778:	b580      	push	{r7, lr}
   1d77a:	b084      	sub	sp, #16
   1d77c:	af00      	add	r7, sp, #0
   1d77e:	60f8      	str	r0, [r7, #12]
   1d780:	60b9      	str	r1, [r7, #8]
   1d782:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d784:	68fb      	ldr	r3, [r7, #12]
   1d786:	2b00      	cmp	r3, #0
   1d788:	d101      	bne.n	1d78e <vTaskPlaceOnEventListRestricted+0x16>
   1d78a:	b672      	cpsid	i
   1d78c:	e7fe      	b.n	1d78c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d78e:	4b28      	ldr	r3, [pc, #160]	; (1d830 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d790:	681b      	ldr	r3, [r3, #0]
   1d792:	3318      	adds	r3, #24
   1d794:	001a      	movs	r2, r3
   1d796:	68fb      	ldr	r3, [r7, #12]
   1d798:	0011      	movs	r1, r2
   1d79a:	0018      	movs	r0, r3
   1d79c:	4b25      	ldr	r3, [pc, #148]	; (1d834 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d79e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d7a0:	687b      	ldr	r3, [r7, #4]
   1d7a2:	2b00      	cmp	r3, #0
   1d7a4:	d002      	beq.n	1d7ac <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d7a6:	2301      	movs	r3, #1
   1d7a8:	425b      	negs	r3, r3
   1d7aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d7ac:	4b20      	ldr	r3, [pc, #128]	; (1d830 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d7ae:	681b      	ldr	r3, [r3, #0]
   1d7b0:	0018      	movs	r0, r3
   1d7b2:	4b21      	ldr	r3, [pc, #132]	; (1d838 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d7b4:	4798      	blx	r3
   1d7b6:	0003      	movs	r3, r0
   1d7b8:	001a      	movs	r2, r3
   1d7ba:	4b20      	ldr	r3, [pc, #128]	; (1d83c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d7bc:	881b      	ldrh	r3, [r3, #0]
   1d7be:	4013      	ands	r3, r2
   1d7c0:	b29b      	uxth	r3, r3
   1d7c2:	2b00      	cmp	r3, #0
   1d7c4:	d011      	beq.n	1d7ea <vTaskPlaceOnEventListRestricted+0x72>
   1d7c6:	4b1e      	ldr	r3, [pc, #120]	; (1d840 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d7c8:	681a      	ldr	r2, [r3, #0]
   1d7ca:	68bb      	ldr	r3, [r7, #8]
   1d7cc:	18d3      	adds	r3, r2, r3
   1d7ce:	0019      	movs	r1, r3
   1d7d0:	2088      	movs	r0, #136	; 0x88
   1d7d2:	4b1c      	ldr	r3, [pc, #112]	; (1d844 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d7d4:	4798      	blx	r3
   1d7d6:	4b16      	ldr	r3, [pc, #88]	; (1d830 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d7d8:	681b      	ldr	r3, [r3, #0]
   1d7da:	0018      	movs	r0, r3
   1d7dc:	4b1a      	ldr	r3, [pc, #104]	; (1d848 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d7de:	4798      	blx	r3
   1d7e0:	0003      	movs	r3, r0
   1d7e2:	b2db      	uxtb	r3, r3
   1d7e4:	0018      	movs	r0, r3
   1d7e6:	4b19      	ldr	r3, [pc, #100]	; (1d84c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d7e8:	4798      	blx	r3
   1d7ea:	4b19      	ldr	r3, [pc, #100]	; (1d850 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d7ec:	4798      	blx	r3
   1d7ee:	0003      	movs	r3, r0
   1d7f0:	0018      	movs	r0, r3
   1d7f2:	4b11      	ldr	r3, [pc, #68]	; (1d838 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d7f4:	4798      	blx	r3
   1d7f6:	0003      	movs	r3, r0
   1d7f8:	001a      	movs	r2, r3
   1d7fa:	4b10      	ldr	r3, [pc, #64]	; (1d83c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d7fc:	881b      	ldrh	r3, [r3, #0]
   1d7fe:	4013      	ands	r3, r2
   1d800:	b29b      	uxth	r3, r3
   1d802:	2b00      	cmp	r3, #0
   1d804:	d00a      	beq.n	1d81c <vTaskPlaceOnEventListRestricted+0xa4>
   1d806:	4b12      	ldr	r3, [pc, #72]	; (1d850 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d808:	4798      	blx	r3
   1d80a:	0003      	movs	r3, r0
   1d80c:	0018      	movs	r0, r3
   1d80e:	4b0e      	ldr	r3, [pc, #56]	; (1d848 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d810:	4798      	blx	r3
   1d812:	0003      	movs	r3, r0
   1d814:	b2db      	uxtb	r3, r3
   1d816:	0018      	movs	r0, r3
   1d818:	4b0c      	ldr	r3, [pc, #48]	; (1d84c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d81a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d81c:	687a      	ldr	r2, [r7, #4]
   1d81e:	68bb      	ldr	r3, [r7, #8]
   1d820:	0011      	movs	r1, r2
   1d822:	0018      	movs	r0, r3
   1d824:	4b0b      	ldr	r3, [pc, #44]	; (1d854 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d826:	4798      	blx	r3
	}
   1d828:	46c0      	nop			; (mov r8, r8)
   1d82a:	46bd      	mov	sp, r7
   1d82c:	b004      	add	sp, #16
   1d82e:	bd80      	pop	{r7, pc}
   1d830:	200040dc 	.word	0x200040dc
   1d834:	0001ad8b 	.word	0x0001ad8b
   1d838:	00018fc1 	.word	0x00018fc1
   1d83c:	20000110 	.word	0x20000110
   1d840:	200041b8 	.word	0x200041b8
   1d844:	00019cc1 	.word	0x00019cc1
   1d848:	00018fa1 	.word	0x00018fa1
   1d84c:	0001a151 	.word	0x0001a151
   1d850:	0001925d 	.word	0x0001925d
   1d854:	0001e1d9 	.word	0x0001e1d9

0001d858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d858:	b580      	push	{r7, lr}
   1d85a:	b084      	sub	sp, #16
   1d85c:	af00      	add	r7, sp, #0
   1d85e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d860:	687b      	ldr	r3, [r7, #4]
   1d862:	68db      	ldr	r3, [r3, #12]
   1d864:	68db      	ldr	r3, [r3, #12]
   1d866:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d868:	68bb      	ldr	r3, [r7, #8]
   1d86a:	2b00      	cmp	r3, #0
   1d86c:	d101      	bne.n	1d872 <xTaskRemoveFromEventList+0x1a>
   1d86e:	b672      	cpsid	i
   1d870:	e7fe      	b.n	1d870 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d872:	68bb      	ldr	r3, [r7, #8]
   1d874:	3318      	adds	r3, #24
   1d876:	0018      	movs	r0, r3
   1d878:	4b2a      	ldr	r3, [pc, #168]	; (1d924 <xTaskRemoveFromEventList+0xcc>)
   1d87a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d87c:	4b2a      	ldr	r3, [pc, #168]	; (1d928 <xTaskRemoveFromEventList+0xd0>)
   1d87e:	681b      	ldr	r3, [r3, #0]
   1d880:	2b00      	cmp	r3, #0
   1d882:	d132      	bne.n	1d8ea <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d884:	68bb      	ldr	r3, [r7, #8]
   1d886:	3304      	adds	r3, #4
   1d888:	0018      	movs	r0, r3
   1d88a:	4b26      	ldr	r3, [pc, #152]	; (1d924 <xTaskRemoveFromEventList+0xcc>)
   1d88c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d88e:	68bb      	ldr	r3, [r7, #8]
   1d890:	0018      	movs	r0, r3
   1d892:	4b26      	ldr	r3, [pc, #152]	; (1d92c <xTaskRemoveFromEventList+0xd4>)
   1d894:	4798      	blx	r3
   1d896:	0003      	movs	r3, r0
   1d898:	001a      	movs	r2, r3
   1d89a:	4b25      	ldr	r3, [pc, #148]	; (1d930 <xTaskRemoveFromEventList+0xd8>)
   1d89c:	881b      	ldrh	r3, [r3, #0]
   1d89e:	4013      	ands	r3, r2
   1d8a0:	b29b      	uxth	r3, r3
   1d8a2:	2b00      	cmp	r3, #0
   1d8a4:	d008      	beq.n	1d8b8 <xTaskRemoveFromEventList+0x60>
   1d8a6:	68bb      	ldr	r3, [r7, #8]
   1d8a8:	0018      	movs	r0, r3
   1d8aa:	4b22      	ldr	r3, [pc, #136]	; (1d934 <xTaskRemoveFromEventList+0xdc>)
   1d8ac:	4798      	blx	r3
   1d8ae:	0003      	movs	r3, r0
   1d8b0:	b2db      	uxtb	r3, r3
   1d8b2:	0018      	movs	r0, r3
   1d8b4:	4b20      	ldr	r3, [pc, #128]	; (1d938 <xTaskRemoveFromEventList+0xe0>)
   1d8b6:	4798      	blx	r3
   1d8b8:	68bb      	ldr	r3, [r7, #8]
   1d8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d8bc:	4b1f      	ldr	r3, [pc, #124]	; (1d93c <xTaskRemoveFromEventList+0xe4>)
   1d8be:	681b      	ldr	r3, [r3, #0]
   1d8c0:	429a      	cmp	r2, r3
   1d8c2:	d903      	bls.n	1d8cc <xTaskRemoveFromEventList+0x74>
   1d8c4:	68bb      	ldr	r3, [r7, #8]
   1d8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d8c8:	4b1c      	ldr	r3, [pc, #112]	; (1d93c <xTaskRemoveFromEventList+0xe4>)
   1d8ca:	601a      	str	r2, [r3, #0]
   1d8cc:	68bb      	ldr	r3, [r7, #8]
   1d8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d8d0:	0013      	movs	r3, r2
   1d8d2:	009b      	lsls	r3, r3, #2
   1d8d4:	189b      	adds	r3, r3, r2
   1d8d6:	009b      	lsls	r3, r3, #2
   1d8d8:	4a19      	ldr	r2, [pc, #100]	; (1d940 <xTaskRemoveFromEventList+0xe8>)
   1d8da:	189a      	adds	r2, r3, r2
   1d8dc:	68bb      	ldr	r3, [r7, #8]
   1d8de:	3304      	adds	r3, #4
   1d8e0:	0019      	movs	r1, r3
   1d8e2:	0010      	movs	r0, r2
   1d8e4:	4b17      	ldr	r3, [pc, #92]	; (1d944 <xTaskRemoveFromEventList+0xec>)
   1d8e6:	4798      	blx	r3
   1d8e8:	e007      	b.n	1d8fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d8ea:	68bb      	ldr	r3, [r7, #8]
   1d8ec:	3318      	adds	r3, #24
   1d8ee:	001a      	movs	r2, r3
   1d8f0:	4b15      	ldr	r3, [pc, #84]	; (1d948 <xTaskRemoveFromEventList+0xf0>)
   1d8f2:	0011      	movs	r1, r2
   1d8f4:	0018      	movs	r0, r3
   1d8f6:	4b13      	ldr	r3, [pc, #76]	; (1d944 <xTaskRemoveFromEventList+0xec>)
   1d8f8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d8fa:	68bb      	ldr	r3, [r7, #8]
   1d8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d8fe:	4b13      	ldr	r3, [pc, #76]	; (1d94c <xTaskRemoveFromEventList+0xf4>)
   1d900:	681b      	ldr	r3, [r3, #0]
   1d902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d904:	429a      	cmp	r2, r3
   1d906:	d905      	bls.n	1d914 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d908:	2301      	movs	r3, #1
   1d90a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d90c:	4b10      	ldr	r3, [pc, #64]	; (1d950 <xTaskRemoveFromEventList+0xf8>)
   1d90e:	2201      	movs	r2, #1
   1d910:	601a      	str	r2, [r3, #0]
   1d912:	e001      	b.n	1d918 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d914:	2300      	movs	r3, #0
   1d916:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d918:	68fb      	ldr	r3, [r7, #12]
}
   1d91a:	0018      	movs	r0, r3
   1d91c:	46bd      	mov	sp, r7
   1d91e:	b004      	add	sp, #16
   1d920:	bd80      	pop	{r7, pc}
   1d922:	46c0      	nop			; (mov r8, r8)
   1d924:	0001ae3b 	.word	0x0001ae3b
   1d928:	200041dc 	.word	0x200041dc
   1d92c:	00018fc1 	.word	0x00018fc1
   1d930:	20000110 	.word	0x20000110
   1d934:	00018fa1 	.word	0x00018fa1
   1d938:	00019771 	.word	0x00019771
   1d93c:	200041bc 	.word	0x200041bc
   1d940:	200040e0 	.word	0x200040e0
   1d944:	0001ad8b 	.word	0x0001ad8b
   1d948:	20004174 	.word	0x20004174
   1d94c:	200040dc 	.word	0x200040dc
   1d950:	200041c8 	.word	0x200041c8

0001d954 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d954:	b580      	push	{r7, lr}
   1d956:	b082      	sub	sp, #8
   1d958:	af00      	add	r7, sp, #0
   1d95a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d95c:	687b      	ldr	r3, [r7, #4]
   1d95e:	2b00      	cmp	r3, #0
   1d960:	d101      	bne.n	1d966 <vTaskSetTimeOutState+0x12>
   1d962:	b672      	cpsid	i
   1d964:	e7fe      	b.n	1d964 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d966:	4b08      	ldr	r3, [pc, #32]	; (1d988 <vTaskSetTimeOutState+0x34>)
   1d968:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d96a:	4b08      	ldr	r3, [pc, #32]	; (1d98c <vTaskSetTimeOutState+0x38>)
   1d96c:	681a      	ldr	r2, [r3, #0]
   1d96e:	687b      	ldr	r3, [r7, #4]
   1d970:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d972:	4b07      	ldr	r3, [pc, #28]	; (1d990 <vTaskSetTimeOutState+0x3c>)
   1d974:	681a      	ldr	r2, [r3, #0]
   1d976:	687b      	ldr	r3, [r7, #4]
   1d978:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d97a:	4b06      	ldr	r3, [pc, #24]	; (1d994 <vTaskSetTimeOutState+0x40>)
   1d97c:	4798      	blx	r3
}
   1d97e:	46c0      	nop			; (mov r8, r8)
   1d980:	46bd      	mov	sp, r7
   1d982:	b002      	add	sp, #8
   1d984:	bd80      	pop	{r7, pc}
   1d986:	46c0      	nop			; (mov r8, r8)
   1d988:	0001afc9 	.word	0x0001afc9
   1d98c:	200041cc 	.word	0x200041cc
   1d990:	200041b8 	.word	0x200041b8
   1d994:	0001afed 	.word	0x0001afed

0001d998 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d998:	b580      	push	{r7, lr}
   1d99a:	b082      	sub	sp, #8
   1d99c:	af00      	add	r7, sp, #0
   1d99e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d9a0:	4b05      	ldr	r3, [pc, #20]	; (1d9b8 <vTaskInternalSetTimeOutState+0x20>)
   1d9a2:	681a      	ldr	r2, [r3, #0]
   1d9a4:	687b      	ldr	r3, [r7, #4]
   1d9a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d9a8:	4b04      	ldr	r3, [pc, #16]	; (1d9bc <vTaskInternalSetTimeOutState+0x24>)
   1d9aa:	681a      	ldr	r2, [r3, #0]
   1d9ac:	687b      	ldr	r3, [r7, #4]
   1d9ae:	605a      	str	r2, [r3, #4]
}
   1d9b0:	46c0      	nop			; (mov r8, r8)
   1d9b2:	46bd      	mov	sp, r7
   1d9b4:	b002      	add	sp, #8
   1d9b6:	bd80      	pop	{r7, pc}
   1d9b8:	200041cc 	.word	0x200041cc
   1d9bc:	200041b8 	.word	0x200041b8

0001d9c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d9c0:	b580      	push	{r7, lr}
   1d9c2:	b086      	sub	sp, #24
   1d9c4:	af00      	add	r7, sp, #0
   1d9c6:	6078      	str	r0, [r7, #4]
   1d9c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d9ca:	687b      	ldr	r3, [r7, #4]
   1d9cc:	2b00      	cmp	r3, #0
   1d9ce:	d101      	bne.n	1d9d4 <xTaskCheckForTimeOut+0x14>
   1d9d0:	b672      	cpsid	i
   1d9d2:	e7fe      	b.n	1d9d2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d9d4:	683b      	ldr	r3, [r7, #0]
   1d9d6:	2b00      	cmp	r3, #0
   1d9d8:	d101      	bne.n	1d9de <xTaskCheckForTimeOut+0x1e>
   1d9da:	b672      	cpsid	i
   1d9dc:	e7fe      	b.n	1d9dc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d9de:	4b1e      	ldr	r3, [pc, #120]	; (1da58 <xTaskCheckForTimeOut+0x98>)
   1d9e0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d9e2:	4b1e      	ldr	r3, [pc, #120]	; (1da5c <xTaskCheckForTimeOut+0x9c>)
   1d9e4:	681b      	ldr	r3, [r3, #0]
   1d9e6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d9e8:	687b      	ldr	r3, [r7, #4]
   1d9ea:	685b      	ldr	r3, [r3, #4]
   1d9ec:	693a      	ldr	r2, [r7, #16]
   1d9ee:	1ad3      	subs	r3, r2, r3
   1d9f0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d9f2:	683b      	ldr	r3, [r7, #0]
   1d9f4:	681b      	ldr	r3, [r3, #0]
   1d9f6:	3301      	adds	r3, #1
   1d9f8:	d102      	bne.n	1da00 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d9fa:	2300      	movs	r3, #0
   1d9fc:	617b      	str	r3, [r7, #20]
   1d9fe:	e024      	b.n	1da4a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1da00:	687b      	ldr	r3, [r7, #4]
   1da02:	681a      	ldr	r2, [r3, #0]
   1da04:	4b16      	ldr	r3, [pc, #88]	; (1da60 <xTaskCheckForTimeOut+0xa0>)
   1da06:	681b      	ldr	r3, [r3, #0]
   1da08:	429a      	cmp	r2, r3
   1da0a:	d007      	beq.n	1da1c <xTaskCheckForTimeOut+0x5c>
   1da0c:	687b      	ldr	r3, [r7, #4]
   1da0e:	685a      	ldr	r2, [r3, #4]
   1da10:	693b      	ldr	r3, [r7, #16]
   1da12:	429a      	cmp	r2, r3
   1da14:	d802      	bhi.n	1da1c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1da16:	2301      	movs	r3, #1
   1da18:	617b      	str	r3, [r7, #20]
   1da1a:	e016      	b.n	1da4a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1da1c:	683b      	ldr	r3, [r7, #0]
   1da1e:	681a      	ldr	r2, [r3, #0]
   1da20:	68fb      	ldr	r3, [r7, #12]
   1da22:	429a      	cmp	r2, r3
   1da24:	d90c      	bls.n	1da40 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1da26:	683b      	ldr	r3, [r7, #0]
   1da28:	681a      	ldr	r2, [r3, #0]
   1da2a:	68fb      	ldr	r3, [r7, #12]
   1da2c:	1ad2      	subs	r2, r2, r3
   1da2e:	683b      	ldr	r3, [r7, #0]
   1da30:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1da32:	687b      	ldr	r3, [r7, #4]
   1da34:	0018      	movs	r0, r3
   1da36:	4b0b      	ldr	r3, [pc, #44]	; (1da64 <xTaskCheckForTimeOut+0xa4>)
   1da38:	4798      	blx	r3
			xReturn = pdFALSE;
   1da3a:	2300      	movs	r3, #0
   1da3c:	617b      	str	r3, [r7, #20]
   1da3e:	e004      	b.n	1da4a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1da40:	683b      	ldr	r3, [r7, #0]
   1da42:	2200      	movs	r2, #0
   1da44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1da46:	2301      	movs	r3, #1
   1da48:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1da4a:	4b07      	ldr	r3, [pc, #28]	; (1da68 <xTaskCheckForTimeOut+0xa8>)
   1da4c:	4798      	blx	r3

	return xReturn;
   1da4e:	697b      	ldr	r3, [r7, #20]
}
   1da50:	0018      	movs	r0, r3
   1da52:	46bd      	mov	sp, r7
   1da54:	b006      	add	sp, #24
   1da56:	bd80      	pop	{r7, pc}
   1da58:	0001afc9 	.word	0x0001afc9
   1da5c:	200041b8 	.word	0x200041b8
   1da60:	200041cc 	.word	0x200041cc
   1da64:	0001d999 	.word	0x0001d999
   1da68:	0001afed 	.word	0x0001afed

0001da6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1da6c:	b580      	push	{r7, lr}
   1da6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1da70:	4b02      	ldr	r3, [pc, #8]	; (1da7c <vTaskMissedYield+0x10>)
   1da72:	2201      	movs	r2, #1
   1da74:	601a      	str	r2, [r3, #0]
}
   1da76:	46c0      	nop			; (mov r8, r8)
   1da78:	46bd      	mov	sp, r7
   1da7a:	bd80      	pop	{r7, pc}
   1da7c:	200041c8 	.word	0x200041c8

0001da80 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1da80:	b580      	push	{r7, lr}
   1da82:	b084      	sub	sp, #16
   1da84:	af00      	add	r7, sp, #0
   1da86:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1da88:	687b      	ldr	r3, [r7, #4]
   1da8a:	2b00      	cmp	r3, #0
   1da8c:	d005      	beq.n	1da9a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1da8e:	687b      	ldr	r3, [r7, #4]
   1da90:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1da92:	68bb      	ldr	r3, [r7, #8]
   1da94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1da96:	60fb      	str	r3, [r7, #12]
   1da98:	e001      	b.n	1da9e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1da9a:	2300      	movs	r3, #0
   1da9c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1da9e:	68fb      	ldr	r3, [r7, #12]
	}
   1daa0:	0018      	movs	r0, r3
   1daa2:	46bd      	mov	sp, r7
   1daa4:	b004      	add	sp, #16
   1daa6:	bd80      	pop	{r7, pc}

0001daa8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1daa8:	b580      	push	{r7, lr}
   1daaa:	b084      	sub	sp, #16
   1daac:	af00      	add	r7, sp, #0
   1daae:	6078      	str	r0, [r7, #4]
   1dab0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1dab2:	687b      	ldr	r3, [r7, #4]
   1dab4:	2b00      	cmp	r3, #0
   1dab6:	d004      	beq.n	1dac2 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1dab8:	687b      	ldr	r3, [r7, #4]
   1daba:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1dabc:	68fb      	ldr	r3, [r7, #12]
   1dabe:	683a      	ldr	r2, [r7, #0]
   1dac0:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1dac2:	46c0      	nop			; (mov r8, r8)
   1dac4:	46bd      	mov	sp, r7
   1dac6:	b004      	add	sp, #16
   1dac8:	bd80      	pop	{r7, pc}
	...

0001dacc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1dacc:	b580      	push	{r7, lr}
   1dace:	b082      	sub	sp, #8
   1dad0:	af00      	add	r7, sp, #0
   1dad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1dad4:	4b04      	ldr	r3, [pc, #16]	; (1dae8 <prvIdleTask+0x1c>)
   1dad6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1dad8:	4b04      	ldr	r3, [pc, #16]	; (1daec <prvIdleTask+0x20>)
   1dada:	681b      	ldr	r3, [r3, #0]
   1dadc:	2b01      	cmp	r3, #1
   1dade:	d9f9      	bls.n	1dad4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1dae0:	4b03      	ldr	r3, [pc, #12]	; (1daf0 <prvIdleTask+0x24>)
   1dae2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1dae4:	e7f6      	b.n	1dad4 <prvIdleTask+0x8>
   1dae6:	46c0      	nop			; (mov r8, r8)
   1dae8:	0001db81 	.word	0x0001db81
   1daec:	200040e0 	.word	0x200040e0
   1daf0:	0001afb1 	.word	0x0001afb1

0001daf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1daf4:	b580      	push	{r7, lr}
   1daf6:	b082      	sub	sp, #8
   1daf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1dafa:	2300      	movs	r3, #0
   1dafc:	607b      	str	r3, [r7, #4]
   1dafe:	e00c      	b.n	1db1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1db00:	687a      	ldr	r2, [r7, #4]
   1db02:	0013      	movs	r3, r2
   1db04:	009b      	lsls	r3, r3, #2
   1db06:	189b      	adds	r3, r3, r2
   1db08:	009b      	lsls	r3, r3, #2
   1db0a:	4a14      	ldr	r2, [pc, #80]	; (1db5c <prvInitialiseTaskLists+0x68>)
   1db0c:	189b      	adds	r3, r3, r2
   1db0e:	0018      	movs	r0, r3
   1db10:	4b13      	ldr	r3, [pc, #76]	; (1db60 <prvInitialiseTaskLists+0x6c>)
   1db12:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1db14:	687b      	ldr	r3, [r7, #4]
   1db16:	3301      	adds	r3, #1
   1db18:	607b      	str	r3, [r7, #4]
   1db1a:	687b      	ldr	r3, [r7, #4]
   1db1c:	2b04      	cmp	r3, #4
   1db1e:	d9ef      	bls.n	1db00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1db20:	4b10      	ldr	r3, [pc, #64]	; (1db64 <prvInitialiseTaskLists+0x70>)
   1db22:	0018      	movs	r0, r3
   1db24:	4b0e      	ldr	r3, [pc, #56]	; (1db60 <prvInitialiseTaskLists+0x6c>)
   1db26:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1db28:	4b0f      	ldr	r3, [pc, #60]	; (1db68 <prvInitialiseTaskLists+0x74>)
   1db2a:	0018      	movs	r0, r3
   1db2c:	4b0c      	ldr	r3, [pc, #48]	; (1db60 <prvInitialiseTaskLists+0x6c>)
   1db2e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1db30:	4b0e      	ldr	r3, [pc, #56]	; (1db6c <prvInitialiseTaskLists+0x78>)
   1db32:	0018      	movs	r0, r3
   1db34:	4b0a      	ldr	r3, [pc, #40]	; (1db60 <prvInitialiseTaskLists+0x6c>)
   1db36:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1db38:	4b0d      	ldr	r3, [pc, #52]	; (1db70 <prvInitialiseTaskLists+0x7c>)
   1db3a:	0018      	movs	r0, r3
   1db3c:	4b08      	ldr	r3, [pc, #32]	; (1db60 <prvInitialiseTaskLists+0x6c>)
   1db3e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1db40:	4b0c      	ldr	r3, [pc, #48]	; (1db74 <prvInitialiseTaskLists+0x80>)
   1db42:	0018      	movs	r0, r3
   1db44:	4b06      	ldr	r3, [pc, #24]	; (1db60 <prvInitialiseTaskLists+0x6c>)
   1db46:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1db48:	4b0b      	ldr	r3, [pc, #44]	; (1db78 <prvInitialiseTaskLists+0x84>)
   1db4a:	4a06      	ldr	r2, [pc, #24]	; (1db64 <prvInitialiseTaskLists+0x70>)
   1db4c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1db4e:	4b0b      	ldr	r3, [pc, #44]	; (1db7c <prvInitialiseTaskLists+0x88>)
   1db50:	4a05      	ldr	r2, [pc, #20]	; (1db68 <prvInitialiseTaskLists+0x74>)
   1db52:	601a      	str	r2, [r3, #0]
}
   1db54:	46c0      	nop			; (mov r8, r8)
   1db56:	46bd      	mov	sp, r7
   1db58:	b002      	add	sp, #8
   1db5a:	bd80      	pop	{r7, pc}
   1db5c:	200040e0 	.word	0x200040e0
   1db60:	0001ad39 	.word	0x0001ad39
   1db64:	20004144 	.word	0x20004144
   1db68:	20004158 	.word	0x20004158
   1db6c:	20004174 	.word	0x20004174
   1db70:	20004188 	.word	0x20004188
   1db74:	200041a0 	.word	0x200041a0
   1db78:	2000416c 	.word	0x2000416c
   1db7c:	20004170 	.word	0x20004170

0001db80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1db80:	b580      	push	{r7, lr}
   1db82:	b082      	sub	sp, #8
   1db84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1db86:	e01a      	b.n	1dbbe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1db88:	4b11      	ldr	r3, [pc, #68]	; (1dbd0 <prvCheckTasksWaitingTermination+0x50>)
   1db8a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1db8c:	4b11      	ldr	r3, [pc, #68]	; (1dbd4 <prvCheckTasksWaitingTermination+0x54>)
   1db8e:	68db      	ldr	r3, [r3, #12]
   1db90:	68db      	ldr	r3, [r3, #12]
   1db92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1db94:	687b      	ldr	r3, [r7, #4]
   1db96:	3304      	adds	r3, #4
   1db98:	0018      	movs	r0, r3
   1db9a:	4b0f      	ldr	r3, [pc, #60]	; (1dbd8 <prvCheckTasksWaitingTermination+0x58>)
   1db9c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1db9e:	4b0f      	ldr	r3, [pc, #60]	; (1dbdc <prvCheckTasksWaitingTermination+0x5c>)
   1dba0:	681b      	ldr	r3, [r3, #0]
   1dba2:	1e5a      	subs	r2, r3, #1
   1dba4:	4b0d      	ldr	r3, [pc, #52]	; (1dbdc <prvCheckTasksWaitingTermination+0x5c>)
   1dba6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1dba8:	4b0d      	ldr	r3, [pc, #52]	; (1dbe0 <prvCheckTasksWaitingTermination+0x60>)
   1dbaa:	681b      	ldr	r3, [r3, #0]
   1dbac:	1e5a      	subs	r2, r3, #1
   1dbae:	4b0c      	ldr	r3, [pc, #48]	; (1dbe0 <prvCheckTasksWaitingTermination+0x60>)
   1dbb0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1dbb2:	4b0c      	ldr	r3, [pc, #48]	; (1dbe4 <prvCheckTasksWaitingTermination+0x64>)
   1dbb4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1dbb6:	687b      	ldr	r3, [r7, #4]
   1dbb8:	0018      	movs	r0, r3
   1dbba:	4b0b      	ldr	r3, [pc, #44]	; (1dbe8 <prvCheckTasksWaitingTermination+0x68>)
   1dbbc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1dbbe:	4b08      	ldr	r3, [pc, #32]	; (1dbe0 <prvCheckTasksWaitingTermination+0x60>)
   1dbc0:	681b      	ldr	r3, [r3, #0]
   1dbc2:	2b00      	cmp	r3, #0
   1dbc4:	d1e0      	bne.n	1db88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1dbc6:	46c0      	nop			; (mov r8, r8)
   1dbc8:	46bd      	mov	sp, r7
   1dbca:	b002      	add	sp, #8
   1dbcc:	bd80      	pop	{r7, pc}
   1dbce:	46c0      	nop			; (mov r8, r8)
   1dbd0:	0001afc9 	.word	0x0001afc9
   1dbd4:	20004188 	.word	0x20004188
   1dbd8:	0001ae3b 	.word	0x0001ae3b
   1dbdc:	200041b4 	.word	0x200041b4
   1dbe0:	2000419c 	.word	0x2000419c
   1dbe4:	0001afed 	.word	0x0001afed
   1dbe8:	0001dc5d 	.word	0x0001dc5d

0001dbec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1dbec:	b580      	push	{r7, lr}
   1dbee:	b084      	sub	sp, #16
   1dbf0:	af00      	add	r7, sp, #0
   1dbf2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1dbf4:	2300      	movs	r3, #0
   1dbf6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1dbf8:	e005      	b.n	1dc06 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1dbfa:	687b      	ldr	r3, [r7, #4]
   1dbfc:	3301      	adds	r3, #1
   1dbfe:	607b      	str	r3, [r7, #4]
			ulCount++;
   1dc00:	68fb      	ldr	r3, [r7, #12]
   1dc02:	3301      	adds	r3, #1
   1dc04:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1dc06:	687b      	ldr	r3, [r7, #4]
   1dc08:	781b      	ldrb	r3, [r3, #0]
   1dc0a:	2ba5      	cmp	r3, #165	; 0xa5
   1dc0c:	d0f5      	beq.n	1dbfa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1dc0e:	68fb      	ldr	r3, [r7, #12]
   1dc10:	089b      	lsrs	r3, r3, #2
   1dc12:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1dc14:	68fb      	ldr	r3, [r7, #12]
   1dc16:	b29b      	uxth	r3, r3
	}
   1dc18:	0018      	movs	r0, r3
   1dc1a:	46bd      	mov	sp, r7
   1dc1c:	b004      	add	sp, #16
   1dc1e:	bd80      	pop	{r7, pc}

0001dc20 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1dc20:	b580      	push	{r7, lr}
   1dc22:	b086      	sub	sp, #24
   1dc24:	af00      	add	r7, sp, #0
   1dc26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1dc28:	687b      	ldr	r3, [r7, #4]
   1dc2a:	2b00      	cmp	r3, #0
   1dc2c:	d102      	bne.n	1dc34 <uxTaskGetStackHighWaterMark+0x14>
   1dc2e:	4b09      	ldr	r3, [pc, #36]	; (1dc54 <uxTaskGetStackHighWaterMark+0x34>)
   1dc30:	681b      	ldr	r3, [r3, #0]
   1dc32:	e000      	b.n	1dc36 <uxTaskGetStackHighWaterMark+0x16>
   1dc34:	687b      	ldr	r3, [r7, #4]
   1dc36:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1dc38:	697b      	ldr	r3, [r7, #20]
   1dc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dc3c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1dc3e:	693b      	ldr	r3, [r7, #16]
   1dc40:	0018      	movs	r0, r3
   1dc42:	4b05      	ldr	r3, [pc, #20]	; (1dc58 <uxTaskGetStackHighWaterMark+0x38>)
   1dc44:	4798      	blx	r3
   1dc46:	0003      	movs	r3, r0
   1dc48:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1dc4a:	68fb      	ldr	r3, [r7, #12]
	}
   1dc4c:	0018      	movs	r0, r3
   1dc4e:	46bd      	mov	sp, r7
   1dc50:	b006      	add	sp, #24
   1dc52:	bd80      	pop	{r7, pc}
   1dc54:	200040dc 	.word	0x200040dc
   1dc58:	0001dbed 	.word	0x0001dbed

0001dc5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1dc5c:	b580      	push	{r7, lr}
   1dc5e:	b082      	sub	sp, #8
   1dc60:	af00      	add	r7, sp, #0
   1dc62:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1dc64:	687b      	ldr	r3, [r7, #4]
   1dc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dc68:	0018      	movs	r0, r3
   1dc6a:	4b05      	ldr	r3, [pc, #20]	; (1dc80 <prvDeleteTCB+0x24>)
   1dc6c:	4798      	blx	r3
			vPortFree( pxTCB );
   1dc6e:	687b      	ldr	r3, [r7, #4]
   1dc70:	0018      	movs	r0, r3
   1dc72:	4b03      	ldr	r3, [pc, #12]	; (1dc80 <prvDeleteTCB+0x24>)
   1dc74:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1dc76:	46c0      	nop			; (mov r8, r8)
   1dc78:	46bd      	mov	sp, r7
   1dc7a:	b002      	add	sp, #8
   1dc7c:	bd80      	pop	{r7, pc}
   1dc7e:	46c0      	nop			; (mov r8, r8)
   1dc80:	0001b1c5 	.word	0x0001b1c5

0001dc84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1dc84:	b580      	push	{r7, lr}
   1dc86:	b082      	sub	sp, #8
   1dc88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1dc8a:	4b0e      	ldr	r3, [pc, #56]	; (1dcc4 <prvResetNextTaskUnblockTime+0x40>)
   1dc8c:	681b      	ldr	r3, [r3, #0]
   1dc8e:	681b      	ldr	r3, [r3, #0]
   1dc90:	2b00      	cmp	r3, #0
   1dc92:	d101      	bne.n	1dc98 <prvResetNextTaskUnblockTime+0x14>
   1dc94:	2301      	movs	r3, #1
   1dc96:	e000      	b.n	1dc9a <prvResetNextTaskUnblockTime+0x16>
   1dc98:	2300      	movs	r3, #0
   1dc9a:	2b00      	cmp	r3, #0
   1dc9c:	d004      	beq.n	1dca8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1dc9e:	4b0a      	ldr	r3, [pc, #40]	; (1dcc8 <prvResetNextTaskUnblockTime+0x44>)
   1dca0:	2201      	movs	r2, #1
   1dca2:	4252      	negs	r2, r2
   1dca4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1dca6:	e008      	b.n	1dcba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1dca8:	4b06      	ldr	r3, [pc, #24]	; (1dcc4 <prvResetNextTaskUnblockTime+0x40>)
   1dcaa:	681b      	ldr	r3, [r3, #0]
   1dcac:	68db      	ldr	r3, [r3, #12]
   1dcae:	68db      	ldr	r3, [r3, #12]
   1dcb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1dcb2:	687b      	ldr	r3, [r7, #4]
   1dcb4:	685a      	ldr	r2, [r3, #4]
   1dcb6:	4b04      	ldr	r3, [pc, #16]	; (1dcc8 <prvResetNextTaskUnblockTime+0x44>)
   1dcb8:	601a      	str	r2, [r3, #0]
}
   1dcba:	46c0      	nop			; (mov r8, r8)
   1dcbc:	46bd      	mov	sp, r7
   1dcbe:	b002      	add	sp, #8
   1dcc0:	bd80      	pop	{r7, pc}
   1dcc2:	46c0      	nop			; (mov r8, r8)
   1dcc4:	2000416c 	.word	0x2000416c
   1dcc8:	200041d4 	.word	0x200041d4

0001dccc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1dccc:	b580      	push	{r7, lr}
   1dcce:	b082      	sub	sp, #8
   1dcd0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1dcd2:	4b04      	ldr	r3, [pc, #16]	; (1dce4 <xTaskGetCurrentTaskHandle+0x18>)
   1dcd4:	681b      	ldr	r3, [r3, #0]
   1dcd6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1dcd8:	687b      	ldr	r3, [r7, #4]
	}
   1dcda:	0018      	movs	r0, r3
   1dcdc:	46bd      	mov	sp, r7
   1dcde:	b002      	add	sp, #8
   1dce0:	bd80      	pop	{r7, pc}
   1dce2:	46c0      	nop			; (mov r8, r8)
   1dce4:	200040dc 	.word	0x200040dc

0001dce8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1dce8:	b580      	push	{r7, lr}
   1dcea:	b082      	sub	sp, #8
   1dcec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1dcee:	4b0a      	ldr	r3, [pc, #40]	; (1dd18 <xTaskGetSchedulerState+0x30>)
   1dcf0:	681b      	ldr	r3, [r3, #0]
   1dcf2:	2b00      	cmp	r3, #0
   1dcf4:	d102      	bne.n	1dcfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1dcf6:	2301      	movs	r3, #1
   1dcf8:	607b      	str	r3, [r7, #4]
   1dcfa:	e008      	b.n	1dd0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1dcfc:	4b07      	ldr	r3, [pc, #28]	; (1dd1c <xTaskGetSchedulerState+0x34>)
   1dcfe:	681b      	ldr	r3, [r3, #0]
   1dd00:	2b00      	cmp	r3, #0
   1dd02:	d102      	bne.n	1dd0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1dd04:	2302      	movs	r3, #2
   1dd06:	607b      	str	r3, [r7, #4]
   1dd08:	e001      	b.n	1dd0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1dd0a:	2300      	movs	r3, #0
   1dd0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1dd0e:	687b      	ldr	r3, [r7, #4]
	}
   1dd10:	0018      	movs	r0, r3
   1dd12:	46bd      	mov	sp, r7
   1dd14:	b002      	add	sp, #8
   1dd16:	bd80      	pop	{r7, pc}
   1dd18:	200041c0 	.word	0x200041c0
   1dd1c:	200041dc 	.word	0x200041dc

0001dd20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1dd20:	b590      	push	{r4, r7, lr}
   1dd22:	b085      	sub	sp, #20
   1dd24:	af00      	add	r7, sp, #0
   1dd26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1dd28:	687b      	ldr	r3, [r7, #4]
   1dd2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1dd2c:	2300      	movs	r3, #0
   1dd2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1dd30:	687b      	ldr	r3, [r7, #4]
   1dd32:	2b00      	cmp	r3, #0
   1dd34:	d100      	bne.n	1dd38 <xTaskPriorityInherit+0x18>
   1dd36:	e09d      	b.n	1de74 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1dd38:	68bb      	ldr	r3, [r7, #8]
   1dd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd3c:	4b50      	ldr	r3, [pc, #320]	; (1de80 <xTaskPriorityInherit+0x160>)
   1dd3e:	681b      	ldr	r3, [r3, #0]
   1dd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dd42:	429a      	cmp	r2, r3
   1dd44:	d300      	bcc.n	1dd48 <xTaskPriorityInherit+0x28>
   1dd46:	e08c      	b.n	1de62 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1dd48:	68bb      	ldr	r3, [r7, #8]
   1dd4a:	699b      	ldr	r3, [r3, #24]
   1dd4c:	2b00      	cmp	r3, #0
   1dd4e:	db06      	blt.n	1dd5e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dd50:	4b4b      	ldr	r3, [pc, #300]	; (1de80 <xTaskPriorityInherit+0x160>)
   1dd52:	681b      	ldr	r3, [r3, #0]
   1dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dd56:	2205      	movs	r2, #5
   1dd58:	1ad2      	subs	r2, r2, r3
   1dd5a:	68bb      	ldr	r3, [r7, #8]
   1dd5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1dd5e:	68bb      	ldr	r3, [r7, #8]
   1dd60:	6959      	ldr	r1, [r3, #20]
   1dd62:	68bb      	ldr	r3, [r7, #8]
   1dd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd66:	0013      	movs	r3, r2
   1dd68:	009b      	lsls	r3, r3, #2
   1dd6a:	189b      	adds	r3, r3, r2
   1dd6c:	009b      	lsls	r3, r3, #2
   1dd6e:	4a45      	ldr	r2, [pc, #276]	; (1de84 <xTaskPriorityInherit+0x164>)
   1dd70:	189b      	adds	r3, r3, r2
   1dd72:	4299      	cmp	r1, r3
   1dd74:	d101      	bne.n	1dd7a <xTaskPriorityInherit+0x5a>
   1dd76:	2301      	movs	r3, #1
   1dd78:	e000      	b.n	1dd7c <xTaskPriorityInherit+0x5c>
   1dd7a:	2300      	movs	r3, #0
   1dd7c:	2b00      	cmp	r3, #0
   1dd7e:	d037      	beq.n	1ddf0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dd80:	68bb      	ldr	r3, [r7, #8]
   1dd82:	3304      	adds	r3, #4
   1dd84:	0018      	movs	r0, r3
   1dd86:	4b40      	ldr	r3, [pc, #256]	; (1de88 <xTaskPriorityInherit+0x168>)
   1dd88:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1dd8a:	4b3d      	ldr	r3, [pc, #244]	; (1de80 <xTaskPriorityInherit+0x160>)
   1dd8c:	681b      	ldr	r3, [r3, #0]
   1dd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd90:	68bb      	ldr	r3, [r7, #8]
   1dd92:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1dd94:	68bb      	ldr	r3, [r7, #8]
   1dd96:	0018      	movs	r0, r3
   1dd98:	4b3c      	ldr	r3, [pc, #240]	; (1de8c <xTaskPriorityInherit+0x16c>)
   1dd9a:	4798      	blx	r3
   1dd9c:	0003      	movs	r3, r0
   1dd9e:	001a      	movs	r2, r3
   1dda0:	4b3b      	ldr	r3, [pc, #236]	; (1de90 <xTaskPriorityInherit+0x170>)
   1dda2:	881b      	ldrh	r3, [r3, #0]
   1dda4:	4013      	ands	r3, r2
   1dda6:	b29b      	uxth	r3, r3
   1dda8:	2b00      	cmp	r3, #0
   1ddaa:	d008      	beq.n	1ddbe <xTaskPriorityInherit+0x9e>
   1ddac:	68bb      	ldr	r3, [r7, #8]
   1ddae:	0018      	movs	r0, r3
   1ddb0:	4b38      	ldr	r3, [pc, #224]	; (1de94 <xTaskPriorityInherit+0x174>)
   1ddb2:	4798      	blx	r3
   1ddb4:	0003      	movs	r3, r0
   1ddb6:	b2db      	uxtb	r3, r3
   1ddb8:	0018      	movs	r0, r3
   1ddba:	4b37      	ldr	r3, [pc, #220]	; (1de98 <xTaskPriorityInherit+0x178>)
   1ddbc:	4798      	blx	r3
   1ddbe:	68bb      	ldr	r3, [r7, #8]
   1ddc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddc2:	4b36      	ldr	r3, [pc, #216]	; (1de9c <xTaskPriorityInherit+0x17c>)
   1ddc4:	681b      	ldr	r3, [r3, #0]
   1ddc6:	429a      	cmp	r2, r3
   1ddc8:	d903      	bls.n	1ddd2 <xTaskPriorityInherit+0xb2>
   1ddca:	68bb      	ldr	r3, [r7, #8]
   1ddcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddce:	4b33      	ldr	r3, [pc, #204]	; (1de9c <xTaskPriorityInherit+0x17c>)
   1ddd0:	601a      	str	r2, [r3, #0]
   1ddd2:	68bb      	ldr	r3, [r7, #8]
   1ddd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddd6:	0013      	movs	r3, r2
   1ddd8:	009b      	lsls	r3, r3, #2
   1ddda:	189b      	adds	r3, r3, r2
   1dddc:	009b      	lsls	r3, r3, #2
   1ddde:	4a29      	ldr	r2, [pc, #164]	; (1de84 <xTaskPriorityInherit+0x164>)
   1dde0:	189a      	adds	r2, r3, r2
   1dde2:	68bb      	ldr	r3, [r7, #8]
   1dde4:	3304      	adds	r3, #4
   1dde6:	0019      	movs	r1, r3
   1dde8:	0010      	movs	r0, r2
   1ddea:	4b2d      	ldr	r3, [pc, #180]	; (1dea0 <xTaskPriorityInherit+0x180>)
   1ddec:	4798      	blx	r3
   1ddee:	e004      	b.n	1ddfa <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1ddf0:	4b23      	ldr	r3, [pc, #140]	; (1de80 <xTaskPriorityInherit+0x160>)
   1ddf2:	681b      	ldr	r3, [r3, #0]
   1ddf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddf6:	68bb      	ldr	r3, [r7, #8]
   1ddf8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1ddfa:	68bb      	ldr	r3, [r7, #8]
   1ddfc:	0018      	movs	r0, r3
   1ddfe:	4b23      	ldr	r3, [pc, #140]	; (1de8c <xTaskPriorityInherit+0x16c>)
   1de00:	4798      	blx	r3
   1de02:	0003      	movs	r3, r0
   1de04:	001a      	movs	r2, r3
   1de06:	4b22      	ldr	r3, [pc, #136]	; (1de90 <xTaskPriorityInherit+0x170>)
   1de08:	881b      	ldrh	r3, [r3, #0]
   1de0a:	4013      	ands	r3, r2
   1de0c:	b29b      	uxth	r3, r3
   1de0e:	2b00      	cmp	r3, #0
   1de10:	d024      	beq.n	1de5c <xTaskPriorityInherit+0x13c>
   1de12:	68bb      	ldr	r3, [r7, #8]
   1de14:	0018      	movs	r0, r3
   1de16:	4b1f      	ldr	r3, [pc, #124]	; (1de94 <xTaskPriorityInherit+0x174>)
   1de18:	4798      	blx	r3
   1de1a:	0003      	movs	r3, r0
   1de1c:	b2db      	uxtb	r3, r3
   1de1e:	001c      	movs	r4, r3
   1de20:	68bb      	ldr	r3, [r7, #8]
   1de22:	0018      	movs	r0, r3
   1de24:	4b1b      	ldr	r3, [pc, #108]	; (1de94 <xTaskPriorityInherit+0x174>)
   1de26:	4798      	blx	r3
   1de28:	0003      	movs	r3, r0
   1de2a:	b2db      	uxtb	r3, r3
   1de2c:	0019      	movs	r1, r3
   1de2e:	2003      	movs	r0, #3
   1de30:	4b1c      	ldr	r3, [pc, #112]	; (1dea4 <xTaskPriorityInherit+0x184>)
   1de32:	4798      	blx	r3
   1de34:	0003      	movs	r3, r0
   1de36:	0022      	movs	r2, r4
   1de38:	2103      	movs	r1, #3
   1de3a:	208e      	movs	r0, #142	; 0x8e
   1de3c:	4c1a      	ldr	r4, [pc, #104]	; (1dea8 <xTaskPriorityInherit+0x188>)
   1de3e:	47a0      	blx	r4
   1de40:	68bb      	ldr	r3, [r7, #8]
   1de42:	0018      	movs	r0, r3
   1de44:	4b13      	ldr	r3, [pc, #76]	; (1de94 <xTaskPriorityInherit+0x174>)
   1de46:	4798      	blx	r3
   1de48:	0003      	movs	r3, r0
   1de4a:	b2d9      	uxtb	r1, r3
   1de4c:	4b0c      	ldr	r3, [pc, #48]	; (1de80 <xTaskPriorityInherit+0x160>)
   1de4e:	681b      	ldr	r3, [r3, #0]
   1de50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1de52:	b2db      	uxtb	r3, r3
   1de54:	001a      	movs	r2, r3
   1de56:	2003      	movs	r0, #3
   1de58:	4b14      	ldr	r3, [pc, #80]	; (1deac <xTaskPriorityInherit+0x18c>)
   1de5a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1de5c:	2301      	movs	r3, #1
   1de5e:	60fb      	str	r3, [r7, #12]
   1de60:	e008      	b.n	1de74 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1de62:	68bb      	ldr	r3, [r7, #8]
   1de64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1de66:	4b06      	ldr	r3, [pc, #24]	; (1de80 <xTaskPriorityInherit+0x160>)
   1de68:	681b      	ldr	r3, [r3, #0]
   1de6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1de6c:	429a      	cmp	r2, r3
   1de6e:	d201      	bcs.n	1de74 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1de70:	2301      	movs	r3, #1
   1de72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1de74:	68fb      	ldr	r3, [r7, #12]
	}
   1de76:	0018      	movs	r0, r3
   1de78:	46bd      	mov	sp, r7
   1de7a:	b005      	add	sp, #20
   1de7c:	bd90      	pop	{r4, r7, pc}
   1de7e:	46c0      	nop			; (mov r8, r8)
   1de80:	200040dc 	.word	0x200040dc
   1de84:	200040e0 	.word	0x200040e0
   1de88:	0001ae3b 	.word	0x0001ae3b
   1de8c:	00018fc1 	.word	0x00018fc1
   1de90:	20000110 	.word	0x20000110
   1de94:	00018fa1 	.word	0x00018fa1
   1de98:	00019771 	.word	0x00019771
   1de9c:	200041bc 	.word	0x200041bc
   1dea0:	0001ad8b 	.word	0x0001ad8b
   1dea4:	00019f79 	.word	0x00019f79
   1dea8:	00019ae9 	.word	0x00019ae9
   1deac:	00019ed5 	.word	0x00019ed5

0001deb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1deb0:	b590      	push	{r4, r7, lr}
   1deb2:	b085      	sub	sp, #20
   1deb4:	af00      	add	r7, sp, #0
   1deb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1deb8:	687b      	ldr	r3, [r7, #4]
   1deba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1debc:	2300      	movs	r3, #0
   1debe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dec0:	687b      	ldr	r3, [r7, #4]
   1dec2:	2b00      	cmp	r3, #0
   1dec4:	d100      	bne.n	1dec8 <xTaskPriorityDisinherit+0x18>
   1dec6:	e089      	b.n	1dfdc <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1dec8:	4b47      	ldr	r3, [pc, #284]	; (1dfe8 <xTaskPriorityDisinherit+0x138>)
   1deca:	681b      	ldr	r3, [r3, #0]
   1decc:	68ba      	ldr	r2, [r7, #8]
   1dece:	429a      	cmp	r2, r3
   1ded0:	d001      	beq.n	1ded6 <xTaskPriorityDisinherit+0x26>
   1ded2:	b672      	cpsid	i
   1ded4:	e7fe      	b.n	1ded4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1ded6:	68bb      	ldr	r3, [r7, #8]
   1ded8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1deda:	2b00      	cmp	r3, #0
   1dedc:	d101      	bne.n	1dee2 <xTaskPriorityDisinherit+0x32>
   1dede:	b672      	cpsid	i
   1dee0:	e7fe      	b.n	1dee0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1dee2:	68bb      	ldr	r3, [r7, #8]
   1dee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dee6:	1e5a      	subs	r2, r3, #1
   1dee8:	68bb      	ldr	r3, [r7, #8]
   1deea:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1deec:	68bb      	ldr	r3, [r7, #8]
   1deee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1def0:	68bb      	ldr	r3, [r7, #8]
   1def2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1def4:	429a      	cmp	r2, r3
   1def6:	d071      	beq.n	1dfdc <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1def8:	68bb      	ldr	r3, [r7, #8]
   1defa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1defc:	2b00      	cmp	r3, #0
   1defe:	d16d      	bne.n	1dfdc <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1df00:	68bb      	ldr	r3, [r7, #8]
   1df02:	3304      	adds	r3, #4
   1df04:	0018      	movs	r0, r3
   1df06:	4b39      	ldr	r3, [pc, #228]	; (1dfec <xTaskPriorityDisinherit+0x13c>)
   1df08:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1df0a:	68bb      	ldr	r3, [r7, #8]
   1df0c:	0018      	movs	r0, r3
   1df0e:	4b38      	ldr	r3, [pc, #224]	; (1dff0 <xTaskPriorityDisinherit+0x140>)
   1df10:	4798      	blx	r3
   1df12:	0003      	movs	r3, r0
   1df14:	001a      	movs	r2, r3
   1df16:	4b37      	ldr	r3, [pc, #220]	; (1dff4 <xTaskPriorityDisinherit+0x144>)
   1df18:	881b      	ldrh	r3, [r3, #0]
   1df1a:	4013      	ands	r3, r2
   1df1c:	b29b      	uxth	r3, r3
   1df1e:	2b00      	cmp	r3, #0
   1df20:	d023      	beq.n	1df6a <xTaskPriorityDisinherit+0xba>
   1df22:	68bb      	ldr	r3, [r7, #8]
   1df24:	0018      	movs	r0, r3
   1df26:	4b34      	ldr	r3, [pc, #208]	; (1dff8 <xTaskPriorityDisinherit+0x148>)
   1df28:	4798      	blx	r3
   1df2a:	0003      	movs	r3, r0
   1df2c:	b2db      	uxtb	r3, r3
   1df2e:	001c      	movs	r4, r3
   1df30:	68bb      	ldr	r3, [r7, #8]
   1df32:	0018      	movs	r0, r3
   1df34:	4b30      	ldr	r3, [pc, #192]	; (1dff8 <xTaskPriorityDisinherit+0x148>)
   1df36:	4798      	blx	r3
   1df38:	0003      	movs	r3, r0
   1df3a:	b2db      	uxtb	r3, r3
   1df3c:	0019      	movs	r1, r3
   1df3e:	2003      	movs	r0, #3
   1df40:	4b2e      	ldr	r3, [pc, #184]	; (1dffc <xTaskPriorityDisinherit+0x14c>)
   1df42:	4798      	blx	r3
   1df44:	0003      	movs	r3, r0
   1df46:	0022      	movs	r2, r4
   1df48:	2103      	movs	r1, #3
   1df4a:	208f      	movs	r0, #143	; 0x8f
   1df4c:	4c2c      	ldr	r4, [pc, #176]	; (1e000 <xTaskPriorityDisinherit+0x150>)
   1df4e:	47a0      	blx	r4
   1df50:	68bb      	ldr	r3, [r7, #8]
   1df52:	0018      	movs	r0, r3
   1df54:	4b28      	ldr	r3, [pc, #160]	; (1dff8 <xTaskPriorityDisinherit+0x148>)
   1df56:	4798      	blx	r3
   1df58:	0003      	movs	r3, r0
   1df5a:	b2d9      	uxtb	r1, r3
   1df5c:	68bb      	ldr	r3, [r7, #8]
   1df5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1df60:	b2db      	uxtb	r3, r3
   1df62:	001a      	movs	r2, r3
   1df64:	2003      	movs	r0, #3
   1df66:	4b27      	ldr	r3, [pc, #156]	; (1e004 <xTaskPriorityDisinherit+0x154>)
   1df68:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1df6a:	68bb      	ldr	r3, [r7, #8]
   1df6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1df6e:	68bb      	ldr	r3, [r7, #8]
   1df70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1df72:	68bb      	ldr	r3, [r7, #8]
   1df74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1df76:	2205      	movs	r2, #5
   1df78:	1ad2      	subs	r2, r2, r3
   1df7a:	68bb      	ldr	r3, [r7, #8]
   1df7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1df7e:	68bb      	ldr	r3, [r7, #8]
   1df80:	0018      	movs	r0, r3
   1df82:	4b1b      	ldr	r3, [pc, #108]	; (1dff0 <xTaskPriorityDisinherit+0x140>)
   1df84:	4798      	blx	r3
   1df86:	0003      	movs	r3, r0
   1df88:	001a      	movs	r2, r3
   1df8a:	4b1a      	ldr	r3, [pc, #104]	; (1dff4 <xTaskPriorityDisinherit+0x144>)
   1df8c:	881b      	ldrh	r3, [r3, #0]
   1df8e:	4013      	ands	r3, r2
   1df90:	b29b      	uxth	r3, r3
   1df92:	2b00      	cmp	r3, #0
   1df94:	d008      	beq.n	1dfa8 <xTaskPriorityDisinherit+0xf8>
   1df96:	68bb      	ldr	r3, [r7, #8]
   1df98:	0018      	movs	r0, r3
   1df9a:	4b17      	ldr	r3, [pc, #92]	; (1dff8 <xTaskPriorityDisinherit+0x148>)
   1df9c:	4798      	blx	r3
   1df9e:	0003      	movs	r3, r0
   1dfa0:	b2db      	uxtb	r3, r3
   1dfa2:	0018      	movs	r0, r3
   1dfa4:	4b18      	ldr	r3, [pc, #96]	; (1e008 <xTaskPriorityDisinherit+0x158>)
   1dfa6:	4798      	blx	r3
   1dfa8:	68bb      	ldr	r3, [r7, #8]
   1dfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dfac:	4b17      	ldr	r3, [pc, #92]	; (1e00c <xTaskPriorityDisinherit+0x15c>)
   1dfae:	681b      	ldr	r3, [r3, #0]
   1dfb0:	429a      	cmp	r2, r3
   1dfb2:	d903      	bls.n	1dfbc <xTaskPriorityDisinherit+0x10c>
   1dfb4:	68bb      	ldr	r3, [r7, #8]
   1dfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dfb8:	4b14      	ldr	r3, [pc, #80]	; (1e00c <xTaskPriorityDisinherit+0x15c>)
   1dfba:	601a      	str	r2, [r3, #0]
   1dfbc:	68bb      	ldr	r3, [r7, #8]
   1dfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dfc0:	0013      	movs	r3, r2
   1dfc2:	009b      	lsls	r3, r3, #2
   1dfc4:	189b      	adds	r3, r3, r2
   1dfc6:	009b      	lsls	r3, r3, #2
   1dfc8:	4a11      	ldr	r2, [pc, #68]	; (1e010 <xTaskPriorityDisinherit+0x160>)
   1dfca:	189a      	adds	r2, r3, r2
   1dfcc:	68bb      	ldr	r3, [r7, #8]
   1dfce:	3304      	adds	r3, #4
   1dfd0:	0019      	movs	r1, r3
   1dfd2:	0010      	movs	r0, r2
   1dfd4:	4b0f      	ldr	r3, [pc, #60]	; (1e014 <xTaskPriorityDisinherit+0x164>)
   1dfd6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1dfd8:	2301      	movs	r3, #1
   1dfda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1dfdc:	68fb      	ldr	r3, [r7, #12]
	}
   1dfde:	0018      	movs	r0, r3
   1dfe0:	46bd      	mov	sp, r7
   1dfe2:	b005      	add	sp, #20
   1dfe4:	bd90      	pop	{r4, r7, pc}
   1dfe6:	46c0      	nop			; (mov r8, r8)
   1dfe8:	200040dc 	.word	0x200040dc
   1dfec:	0001ae3b 	.word	0x0001ae3b
   1dff0:	00018fc1 	.word	0x00018fc1
   1dff4:	20000110 	.word	0x20000110
   1dff8:	00018fa1 	.word	0x00018fa1
   1dffc:	00019f79 	.word	0x00019f79
   1e000:	00019ae9 	.word	0x00019ae9
   1e004:	00019ed5 	.word	0x00019ed5
   1e008:	00019771 	.word	0x00019771
   1e00c:	200041bc 	.word	0x200041bc
   1e010:	200040e0 	.word	0x200040e0
   1e014:	0001ad8b 	.word	0x0001ad8b

0001e018 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1e018:	b590      	push	{r4, r7, lr}
   1e01a:	b087      	sub	sp, #28
   1e01c:	af00      	add	r7, sp, #0
   1e01e:	6078      	str	r0, [r7, #4]
   1e020:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1e022:	687b      	ldr	r3, [r7, #4]
   1e024:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1e026:	2301      	movs	r3, #1
   1e028:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1e02a:	687b      	ldr	r3, [r7, #4]
   1e02c:	2b00      	cmp	r3, #0
   1e02e:	d100      	bne.n	1e032 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1e030:	e0a4      	b.n	1e17c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1e032:	693b      	ldr	r3, [r7, #16]
   1e034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e036:	2b00      	cmp	r3, #0
   1e038:	d101      	bne.n	1e03e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1e03a:	b672      	cpsid	i
   1e03c:	e7fe      	b.n	1e03c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1e03e:	693b      	ldr	r3, [r7, #16]
   1e040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e042:	683b      	ldr	r3, [r7, #0]
   1e044:	429a      	cmp	r2, r3
   1e046:	d202      	bcs.n	1e04e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1e048:	683b      	ldr	r3, [r7, #0]
   1e04a:	617b      	str	r3, [r7, #20]
   1e04c:	e002      	b.n	1e054 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1e04e:	693b      	ldr	r3, [r7, #16]
   1e050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e052:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1e054:	693b      	ldr	r3, [r7, #16]
   1e056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e058:	697b      	ldr	r3, [r7, #20]
   1e05a:	429a      	cmp	r2, r3
   1e05c:	d100      	bne.n	1e060 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1e05e:	e08d      	b.n	1e17c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1e060:	693b      	ldr	r3, [r7, #16]
   1e062:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1e064:	68fb      	ldr	r3, [r7, #12]
   1e066:	429a      	cmp	r2, r3
   1e068:	d000      	beq.n	1e06c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1e06a:	e087      	b.n	1e17c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1e06c:	4b45      	ldr	r3, [pc, #276]	; (1e184 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1e06e:	681b      	ldr	r3, [r3, #0]
   1e070:	693a      	ldr	r2, [r7, #16]
   1e072:	429a      	cmp	r2, r3
   1e074:	d101      	bne.n	1e07a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1e076:	b672      	cpsid	i
   1e078:	e7fe      	b.n	1e078 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1e07a:	693b      	ldr	r3, [r7, #16]
   1e07c:	0018      	movs	r0, r3
   1e07e:	4b42      	ldr	r3, [pc, #264]	; (1e188 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1e080:	4798      	blx	r3
   1e082:	0003      	movs	r3, r0
   1e084:	001a      	movs	r2, r3
   1e086:	4b41      	ldr	r3, [pc, #260]	; (1e18c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1e088:	881b      	ldrh	r3, [r3, #0]
   1e08a:	4013      	ands	r3, r2
   1e08c:	b29b      	uxth	r3, r3
   1e08e:	2b00      	cmp	r3, #0
   1e090:	d023      	beq.n	1e0da <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1e092:	693b      	ldr	r3, [r7, #16]
   1e094:	0018      	movs	r0, r3
   1e096:	4b3e      	ldr	r3, [pc, #248]	; (1e190 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e098:	4798      	blx	r3
   1e09a:	0003      	movs	r3, r0
   1e09c:	b2db      	uxtb	r3, r3
   1e09e:	001c      	movs	r4, r3
   1e0a0:	693b      	ldr	r3, [r7, #16]
   1e0a2:	0018      	movs	r0, r3
   1e0a4:	4b3a      	ldr	r3, [pc, #232]	; (1e190 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e0a6:	4798      	blx	r3
   1e0a8:	0003      	movs	r3, r0
   1e0aa:	b2db      	uxtb	r3, r3
   1e0ac:	0019      	movs	r1, r3
   1e0ae:	2003      	movs	r0, #3
   1e0b0:	4b38      	ldr	r3, [pc, #224]	; (1e194 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1e0b2:	4798      	blx	r3
   1e0b4:	0003      	movs	r3, r0
   1e0b6:	0022      	movs	r2, r4
   1e0b8:	2103      	movs	r1, #3
   1e0ba:	208f      	movs	r0, #143	; 0x8f
   1e0bc:	4c36      	ldr	r4, [pc, #216]	; (1e198 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1e0be:	47a0      	blx	r4
   1e0c0:	693b      	ldr	r3, [r7, #16]
   1e0c2:	0018      	movs	r0, r3
   1e0c4:	4b32      	ldr	r3, [pc, #200]	; (1e190 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e0c6:	4798      	blx	r3
   1e0c8:	0003      	movs	r3, r0
   1e0ca:	b2d9      	uxtb	r1, r3
   1e0cc:	693b      	ldr	r3, [r7, #16]
   1e0ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e0d0:	b2db      	uxtb	r3, r3
   1e0d2:	001a      	movs	r2, r3
   1e0d4:	2003      	movs	r0, #3
   1e0d6:	4b31      	ldr	r3, [pc, #196]	; (1e19c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1e0d8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1e0da:	693b      	ldr	r3, [r7, #16]
   1e0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e0de:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1e0e0:	693b      	ldr	r3, [r7, #16]
   1e0e2:	697a      	ldr	r2, [r7, #20]
   1e0e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1e0e6:	693b      	ldr	r3, [r7, #16]
   1e0e8:	699b      	ldr	r3, [r3, #24]
   1e0ea:	2b00      	cmp	r3, #0
   1e0ec:	db04      	blt.n	1e0f8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e0ee:	697b      	ldr	r3, [r7, #20]
   1e0f0:	2205      	movs	r2, #5
   1e0f2:	1ad2      	subs	r2, r2, r3
   1e0f4:	693b      	ldr	r3, [r7, #16]
   1e0f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1e0f8:	693b      	ldr	r3, [r7, #16]
   1e0fa:	6959      	ldr	r1, [r3, #20]
   1e0fc:	68ba      	ldr	r2, [r7, #8]
   1e0fe:	0013      	movs	r3, r2
   1e100:	009b      	lsls	r3, r3, #2
   1e102:	189b      	adds	r3, r3, r2
   1e104:	009b      	lsls	r3, r3, #2
   1e106:	4a26      	ldr	r2, [pc, #152]	; (1e1a0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1e108:	189b      	adds	r3, r3, r2
   1e10a:	4299      	cmp	r1, r3
   1e10c:	d101      	bne.n	1e112 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1e10e:	2301      	movs	r3, #1
   1e110:	e000      	b.n	1e114 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1e112:	2300      	movs	r3, #0
   1e114:	2b00      	cmp	r3, #0
   1e116:	d031      	beq.n	1e17c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e118:	693b      	ldr	r3, [r7, #16]
   1e11a:	3304      	adds	r3, #4
   1e11c:	0018      	movs	r0, r3
   1e11e:	4b21      	ldr	r3, [pc, #132]	; (1e1a4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1e120:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1e122:	693b      	ldr	r3, [r7, #16]
   1e124:	0018      	movs	r0, r3
   1e126:	4b18      	ldr	r3, [pc, #96]	; (1e188 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1e128:	4798      	blx	r3
   1e12a:	0003      	movs	r3, r0
   1e12c:	001a      	movs	r2, r3
   1e12e:	4b17      	ldr	r3, [pc, #92]	; (1e18c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1e130:	881b      	ldrh	r3, [r3, #0]
   1e132:	4013      	ands	r3, r2
   1e134:	b29b      	uxth	r3, r3
   1e136:	2b00      	cmp	r3, #0
   1e138:	d008      	beq.n	1e14c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1e13a:	693b      	ldr	r3, [r7, #16]
   1e13c:	0018      	movs	r0, r3
   1e13e:	4b14      	ldr	r3, [pc, #80]	; (1e190 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e140:	4798      	blx	r3
   1e142:	0003      	movs	r3, r0
   1e144:	b2db      	uxtb	r3, r3
   1e146:	0018      	movs	r0, r3
   1e148:	4b17      	ldr	r3, [pc, #92]	; (1e1a8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1e14a:	4798      	blx	r3
   1e14c:	693b      	ldr	r3, [r7, #16]
   1e14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e150:	4b16      	ldr	r3, [pc, #88]	; (1e1ac <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1e152:	681b      	ldr	r3, [r3, #0]
   1e154:	429a      	cmp	r2, r3
   1e156:	d903      	bls.n	1e160 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1e158:	693b      	ldr	r3, [r7, #16]
   1e15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e15c:	4b13      	ldr	r3, [pc, #76]	; (1e1ac <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1e15e:	601a      	str	r2, [r3, #0]
   1e160:	693b      	ldr	r3, [r7, #16]
   1e162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e164:	0013      	movs	r3, r2
   1e166:	009b      	lsls	r3, r3, #2
   1e168:	189b      	adds	r3, r3, r2
   1e16a:	009b      	lsls	r3, r3, #2
   1e16c:	4a0c      	ldr	r2, [pc, #48]	; (1e1a0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1e16e:	189a      	adds	r2, r3, r2
   1e170:	693b      	ldr	r3, [r7, #16]
   1e172:	3304      	adds	r3, #4
   1e174:	0019      	movs	r1, r3
   1e176:	0010      	movs	r0, r2
   1e178:	4b0d      	ldr	r3, [pc, #52]	; (1e1b0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1e17a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e17c:	46c0      	nop			; (mov r8, r8)
   1e17e:	46bd      	mov	sp, r7
   1e180:	b007      	add	sp, #28
   1e182:	bd90      	pop	{r4, r7, pc}
   1e184:	200040dc 	.word	0x200040dc
   1e188:	00018fc1 	.word	0x00018fc1
   1e18c:	20000110 	.word	0x20000110
   1e190:	00018fa1 	.word	0x00018fa1
   1e194:	00019f79 	.word	0x00019f79
   1e198:	00019ae9 	.word	0x00019ae9
   1e19c:	00019ed5 	.word	0x00019ed5
   1e1a0:	200040e0 	.word	0x200040e0
   1e1a4:	0001ae3b 	.word	0x0001ae3b
   1e1a8:	00019771 	.word	0x00019771
   1e1ac:	200041bc 	.word	0x200041bc
   1e1b0:	0001ad8b 	.word	0x0001ad8b

0001e1b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1e1b4:	b580      	push	{r7, lr}
   1e1b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1e1b8:	4b06      	ldr	r3, [pc, #24]	; (1e1d4 <pvTaskIncrementMutexHeldCount+0x20>)
   1e1ba:	681b      	ldr	r3, [r3, #0]
   1e1bc:	2b00      	cmp	r3, #0
   1e1be:	d004      	beq.n	1e1ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1e1c0:	4b04      	ldr	r3, [pc, #16]	; (1e1d4 <pvTaskIncrementMutexHeldCount+0x20>)
   1e1c2:	681b      	ldr	r3, [r3, #0]
   1e1c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1e1c6:	3201      	adds	r2, #1
   1e1c8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1e1ca:	4b02      	ldr	r3, [pc, #8]	; (1e1d4 <pvTaskIncrementMutexHeldCount+0x20>)
   1e1cc:	681b      	ldr	r3, [r3, #0]
	}
   1e1ce:	0018      	movs	r0, r3
   1e1d0:	46bd      	mov	sp, r7
   1e1d2:	bd80      	pop	{r7, pc}
   1e1d4:	200040dc 	.word	0x200040dc

0001e1d8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1e1d8:	b580      	push	{r7, lr}
   1e1da:	b084      	sub	sp, #16
   1e1dc:	af00      	add	r7, sp, #0
   1e1de:	6078      	str	r0, [r7, #4]
   1e1e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1e1e2:	4b21      	ldr	r3, [pc, #132]	; (1e268 <prvAddCurrentTaskToDelayedList+0x90>)
   1e1e4:	681b      	ldr	r3, [r3, #0]
   1e1e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e1e8:	4b20      	ldr	r3, [pc, #128]	; (1e26c <prvAddCurrentTaskToDelayedList+0x94>)
   1e1ea:	681b      	ldr	r3, [r3, #0]
   1e1ec:	3304      	adds	r3, #4
   1e1ee:	0018      	movs	r0, r3
   1e1f0:	4b1f      	ldr	r3, [pc, #124]	; (1e270 <prvAddCurrentTaskToDelayedList+0x98>)
   1e1f2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1e1f4:	687b      	ldr	r3, [r7, #4]
   1e1f6:	3301      	adds	r3, #1
   1e1f8:	d10b      	bne.n	1e212 <prvAddCurrentTaskToDelayedList+0x3a>
   1e1fa:	683b      	ldr	r3, [r7, #0]
   1e1fc:	2b00      	cmp	r3, #0
   1e1fe:	d008      	beq.n	1e212 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e200:	4b1a      	ldr	r3, [pc, #104]	; (1e26c <prvAddCurrentTaskToDelayedList+0x94>)
   1e202:	681b      	ldr	r3, [r3, #0]
   1e204:	1d1a      	adds	r2, r3, #4
   1e206:	4b1b      	ldr	r3, [pc, #108]	; (1e274 <prvAddCurrentTaskToDelayedList+0x9c>)
   1e208:	0011      	movs	r1, r2
   1e20a:	0018      	movs	r0, r3
   1e20c:	4b1a      	ldr	r3, [pc, #104]	; (1e278 <prvAddCurrentTaskToDelayedList+0xa0>)
   1e20e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1e210:	e026      	b.n	1e260 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1e212:	68fa      	ldr	r2, [r7, #12]
   1e214:	687b      	ldr	r3, [r7, #4]
   1e216:	18d3      	adds	r3, r2, r3
   1e218:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1e21a:	4b14      	ldr	r3, [pc, #80]	; (1e26c <prvAddCurrentTaskToDelayedList+0x94>)
   1e21c:	681b      	ldr	r3, [r3, #0]
   1e21e:	68ba      	ldr	r2, [r7, #8]
   1e220:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1e222:	68ba      	ldr	r2, [r7, #8]
   1e224:	68fb      	ldr	r3, [r7, #12]
   1e226:	429a      	cmp	r2, r3
   1e228:	d209      	bcs.n	1e23e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e22a:	4b14      	ldr	r3, [pc, #80]	; (1e27c <prvAddCurrentTaskToDelayedList+0xa4>)
   1e22c:	681a      	ldr	r2, [r3, #0]
   1e22e:	4b0f      	ldr	r3, [pc, #60]	; (1e26c <prvAddCurrentTaskToDelayedList+0x94>)
   1e230:	681b      	ldr	r3, [r3, #0]
   1e232:	3304      	adds	r3, #4
   1e234:	0019      	movs	r1, r3
   1e236:	0010      	movs	r0, r2
   1e238:	4b11      	ldr	r3, [pc, #68]	; (1e280 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e23a:	4798      	blx	r3
}
   1e23c:	e010      	b.n	1e260 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e23e:	4b11      	ldr	r3, [pc, #68]	; (1e284 <prvAddCurrentTaskToDelayedList+0xac>)
   1e240:	681a      	ldr	r2, [r3, #0]
   1e242:	4b0a      	ldr	r3, [pc, #40]	; (1e26c <prvAddCurrentTaskToDelayedList+0x94>)
   1e244:	681b      	ldr	r3, [r3, #0]
   1e246:	3304      	adds	r3, #4
   1e248:	0019      	movs	r1, r3
   1e24a:	0010      	movs	r0, r2
   1e24c:	4b0c      	ldr	r3, [pc, #48]	; (1e280 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e24e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1e250:	4b0d      	ldr	r3, [pc, #52]	; (1e288 <prvAddCurrentTaskToDelayedList+0xb0>)
   1e252:	681b      	ldr	r3, [r3, #0]
   1e254:	68ba      	ldr	r2, [r7, #8]
   1e256:	429a      	cmp	r2, r3
   1e258:	d202      	bcs.n	1e260 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1e25a:	4b0b      	ldr	r3, [pc, #44]	; (1e288 <prvAddCurrentTaskToDelayedList+0xb0>)
   1e25c:	68ba      	ldr	r2, [r7, #8]
   1e25e:	601a      	str	r2, [r3, #0]
}
   1e260:	46c0      	nop			; (mov r8, r8)
   1e262:	46bd      	mov	sp, r7
   1e264:	b004      	add	sp, #16
   1e266:	bd80      	pop	{r7, pc}
   1e268:	200041b8 	.word	0x200041b8
   1e26c:	200040dc 	.word	0x200040dc
   1e270:	0001ae3b 	.word	0x0001ae3b
   1e274:	200041a0 	.word	0x200041a0
   1e278:	0001ad8b 	.word	0x0001ad8b
   1e27c:	20004170 	.word	0x20004170
   1e280:	0001adcf 	.word	0x0001adcf
   1e284:	2000416c 	.word	0x2000416c
   1e288:	200041d4 	.word	0x200041d4

0001e28c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1e28c:	b590      	push	{r4, r7, lr}
   1e28e:	b085      	sub	sp, #20
   1e290:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1e292:	2300      	movs	r3, #0
   1e294:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1e296:	4b0e      	ldr	r3, [pc, #56]	; (1e2d0 <xTimerCreateTimerTask+0x44>)
   1e298:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1e29a:	4b0e      	ldr	r3, [pc, #56]	; (1e2d4 <xTimerCreateTimerTask+0x48>)
   1e29c:	681b      	ldr	r3, [r3, #0]
   1e29e:	2b00      	cmp	r3, #0
   1e2a0:	d00b      	beq.n	1e2ba <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1e2a2:	490d      	ldr	r1, [pc, #52]	; (1e2d8 <xTimerCreateTimerTask+0x4c>)
   1e2a4:	480d      	ldr	r0, [pc, #52]	; (1e2dc <xTimerCreateTimerTask+0x50>)
   1e2a6:	4b0e      	ldr	r3, [pc, #56]	; (1e2e0 <xTimerCreateTimerTask+0x54>)
   1e2a8:	9301      	str	r3, [sp, #4]
   1e2aa:	2302      	movs	r3, #2
   1e2ac:	9300      	str	r3, [sp, #0]
   1e2ae:	2300      	movs	r3, #0
   1e2b0:	2280      	movs	r2, #128	; 0x80
   1e2b2:	4c0c      	ldr	r4, [pc, #48]	; (1e2e4 <xTimerCreateTimerTask+0x58>)
   1e2b4:	47a0      	blx	r4
   1e2b6:	0003      	movs	r3, r0
   1e2b8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1e2ba:	687b      	ldr	r3, [r7, #4]
   1e2bc:	2b00      	cmp	r3, #0
   1e2be:	d101      	bne.n	1e2c4 <xTimerCreateTimerTask+0x38>
   1e2c0:	b672      	cpsid	i
   1e2c2:	e7fe      	b.n	1e2c2 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1e2c4:	687b      	ldr	r3, [r7, #4]
}
   1e2c6:	0018      	movs	r0, r3
   1e2c8:	46bd      	mov	sp, r7
   1e2ca:	b003      	add	sp, #12
   1e2cc:	bd90      	pop	{r4, r7, pc}
   1e2ce:	46c0      	nop			; (mov r8, r8)
   1e2d0:	0001e7d5 	.word	0x0001e7d5
   1e2d4:	20004210 	.word	0x20004210
   1e2d8:	00039260 	.word	0x00039260
   1e2dc:	0001e40d 	.word	0x0001e40d
   1e2e0:	20004214 	.word	0x20004214
   1e2e4:	0001cc25 	.word	0x0001cc25

0001e2e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1e2e8:	b590      	push	{r4, r7, lr}
   1e2ea:	b089      	sub	sp, #36	; 0x24
   1e2ec:	af00      	add	r7, sp, #0
   1e2ee:	60f8      	str	r0, [r7, #12]
   1e2f0:	60b9      	str	r1, [r7, #8]
   1e2f2:	607a      	str	r2, [r7, #4]
   1e2f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1e2f6:	2300      	movs	r3, #0
   1e2f8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1e2fa:	68fb      	ldr	r3, [r7, #12]
   1e2fc:	2b00      	cmp	r3, #0
   1e2fe:	d101      	bne.n	1e304 <xTimerGenericCommand+0x1c>
   1e300:	b672      	cpsid	i
   1e302:	e7fe      	b.n	1e302 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1e304:	4b1e      	ldr	r3, [pc, #120]	; (1e380 <xTimerGenericCommand+0x98>)
   1e306:	681b      	ldr	r3, [r3, #0]
   1e308:	2b00      	cmp	r3, #0
   1e30a:	d033      	beq.n	1e374 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1e30c:	2310      	movs	r3, #16
   1e30e:	18fb      	adds	r3, r7, r3
   1e310:	68ba      	ldr	r2, [r7, #8]
   1e312:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1e314:	2310      	movs	r3, #16
   1e316:	18fb      	adds	r3, r7, r3
   1e318:	687a      	ldr	r2, [r7, #4]
   1e31a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1e31c:	2310      	movs	r3, #16
   1e31e:	18fb      	adds	r3, r7, r3
   1e320:	68fa      	ldr	r2, [r7, #12]
   1e322:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1e324:	68bb      	ldr	r3, [r7, #8]
   1e326:	2b05      	cmp	r3, #5
   1e328:	dc1a      	bgt.n	1e360 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1e32a:	4b16      	ldr	r3, [pc, #88]	; (1e384 <xTimerGenericCommand+0x9c>)
   1e32c:	4798      	blx	r3
   1e32e:	0003      	movs	r3, r0
   1e330:	2b02      	cmp	r3, #2
   1e332:	d10a      	bne.n	1e34a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1e334:	4b12      	ldr	r3, [pc, #72]	; (1e380 <xTimerGenericCommand+0x98>)
   1e336:	6818      	ldr	r0, [r3, #0]
   1e338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1e33a:	2310      	movs	r3, #16
   1e33c:	18f9      	adds	r1, r7, r3
   1e33e:	2300      	movs	r3, #0
   1e340:	4c11      	ldr	r4, [pc, #68]	; (1e388 <xTimerGenericCommand+0xa0>)
   1e342:	47a0      	blx	r4
   1e344:	0003      	movs	r3, r0
   1e346:	61fb      	str	r3, [r7, #28]
   1e348:	e014      	b.n	1e374 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1e34a:	4b0d      	ldr	r3, [pc, #52]	; (1e380 <xTimerGenericCommand+0x98>)
   1e34c:	6818      	ldr	r0, [r3, #0]
   1e34e:	2310      	movs	r3, #16
   1e350:	18f9      	adds	r1, r7, r3
   1e352:	2300      	movs	r3, #0
   1e354:	2200      	movs	r2, #0
   1e356:	4c0c      	ldr	r4, [pc, #48]	; (1e388 <xTimerGenericCommand+0xa0>)
   1e358:	47a0      	blx	r4
   1e35a:	0003      	movs	r3, r0
   1e35c:	61fb      	str	r3, [r7, #28]
   1e35e:	e009      	b.n	1e374 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1e360:	4b07      	ldr	r3, [pc, #28]	; (1e380 <xTimerGenericCommand+0x98>)
   1e362:	6818      	ldr	r0, [r3, #0]
   1e364:	683a      	ldr	r2, [r7, #0]
   1e366:	2310      	movs	r3, #16
   1e368:	18f9      	adds	r1, r7, r3
   1e36a:	2300      	movs	r3, #0
   1e36c:	4c07      	ldr	r4, [pc, #28]	; (1e38c <xTimerGenericCommand+0xa4>)
   1e36e:	47a0      	blx	r4
   1e370:	0003      	movs	r3, r0
   1e372:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1e374:	69fb      	ldr	r3, [r7, #28]
}
   1e376:	0018      	movs	r0, r3
   1e378:	46bd      	mov	sp, r7
   1e37a:	b009      	add	sp, #36	; 0x24
   1e37c:	bd90      	pop	{r4, r7, pc}
   1e37e:	46c0      	nop			; (mov r8, r8)
   1e380:	20004210 	.word	0x20004210
   1e384:	0001dce9 	.word	0x0001dce9
   1e388:	0001b55d 	.word	0x0001b55d
   1e38c:	0001b9bd 	.word	0x0001b9bd

0001e390 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1e390:	b590      	push	{r4, r7, lr}
   1e392:	b087      	sub	sp, #28
   1e394:	af02      	add	r7, sp, #8
   1e396:	6078      	str	r0, [r7, #4]
   1e398:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e39a:	4b18      	ldr	r3, [pc, #96]	; (1e3fc <prvProcessExpiredTimer+0x6c>)
   1e39c:	681b      	ldr	r3, [r3, #0]
   1e39e:	68db      	ldr	r3, [r3, #12]
   1e3a0:	68db      	ldr	r3, [r3, #12]
   1e3a2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e3a4:	68fb      	ldr	r3, [r7, #12]
   1e3a6:	3304      	adds	r3, #4
   1e3a8:	0018      	movs	r0, r3
   1e3aa:	4b15      	ldr	r3, [pc, #84]	; (1e400 <prvProcessExpiredTimer+0x70>)
   1e3ac:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e3ae:	68fb      	ldr	r3, [r7, #12]
   1e3b0:	69db      	ldr	r3, [r3, #28]
   1e3b2:	2b01      	cmp	r3, #1
   1e3b4:	d119      	bne.n	1e3ea <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1e3b6:	68fb      	ldr	r3, [r7, #12]
   1e3b8:	699a      	ldr	r2, [r3, #24]
   1e3ba:	687b      	ldr	r3, [r7, #4]
   1e3bc:	18d1      	adds	r1, r2, r3
   1e3be:	687b      	ldr	r3, [r7, #4]
   1e3c0:	683a      	ldr	r2, [r7, #0]
   1e3c2:	68f8      	ldr	r0, [r7, #12]
   1e3c4:	4c0f      	ldr	r4, [pc, #60]	; (1e404 <prvProcessExpiredTimer+0x74>)
   1e3c6:	47a0      	blx	r4
   1e3c8:	1e03      	subs	r3, r0, #0
   1e3ca:	d00e      	beq.n	1e3ea <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e3cc:	687a      	ldr	r2, [r7, #4]
   1e3ce:	68f8      	ldr	r0, [r7, #12]
   1e3d0:	2300      	movs	r3, #0
   1e3d2:	9300      	str	r3, [sp, #0]
   1e3d4:	2300      	movs	r3, #0
   1e3d6:	2100      	movs	r1, #0
   1e3d8:	4c0b      	ldr	r4, [pc, #44]	; (1e408 <prvProcessExpiredTimer+0x78>)
   1e3da:	47a0      	blx	r4
   1e3dc:	0003      	movs	r3, r0
   1e3de:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1e3e0:	68bb      	ldr	r3, [r7, #8]
   1e3e2:	2b00      	cmp	r3, #0
   1e3e4:	d101      	bne.n	1e3ea <prvProcessExpiredTimer+0x5a>
   1e3e6:	b672      	cpsid	i
   1e3e8:	e7fe      	b.n	1e3e8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e3ea:	68fb      	ldr	r3, [r7, #12]
   1e3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e3ee:	68fa      	ldr	r2, [r7, #12]
   1e3f0:	0010      	movs	r0, r2
   1e3f2:	4798      	blx	r3
}
   1e3f4:	46c0      	nop			; (mov r8, r8)
   1e3f6:	46bd      	mov	sp, r7
   1e3f8:	b005      	add	sp, #20
   1e3fa:	bd90      	pop	{r4, r7, pc}
   1e3fc:	20004208 	.word	0x20004208
   1e400:	0001ae3b 	.word	0x0001ae3b
   1e404:	0001e575 	.word	0x0001e575
   1e408:	0001e2e9 	.word	0x0001e2e9

0001e40c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1e40c:	b580      	push	{r7, lr}
   1e40e:	b084      	sub	sp, #16
   1e410:	af00      	add	r7, sp, #0
   1e412:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1e414:	4b08      	ldr	r3, [pc, #32]	; (1e438 <prvTimerTask+0x2c>)
   1e416:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e418:	2308      	movs	r3, #8
   1e41a:	18fb      	adds	r3, r7, r3
   1e41c:	0018      	movs	r0, r3
   1e41e:	4b07      	ldr	r3, [pc, #28]	; (1e43c <prvTimerTask+0x30>)
   1e420:	4798      	blx	r3
   1e422:	0003      	movs	r3, r0
   1e424:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1e426:	68ba      	ldr	r2, [r7, #8]
   1e428:	68fb      	ldr	r3, [r7, #12]
   1e42a:	0011      	movs	r1, r2
   1e42c:	0018      	movs	r0, r3
   1e42e:	4b04      	ldr	r3, [pc, #16]	; (1e440 <prvTimerTask+0x34>)
   1e430:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1e432:	4b04      	ldr	r3, [pc, #16]	; (1e444 <prvTimerTask+0x38>)
   1e434:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e436:	e7ef      	b.n	1e418 <prvTimerTask+0xc>
   1e438:	00033505 	.word	0x00033505
   1e43c:	0001e4ed 	.word	0x0001e4ed
   1e440:	0001e449 	.word	0x0001e449
   1e444:	0001e5fd 	.word	0x0001e5fd

0001e448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1e448:	b580      	push	{r7, lr}
   1e44a:	b084      	sub	sp, #16
   1e44c:	af00      	add	r7, sp, #0
   1e44e:	6078      	str	r0, [r7, #4]
   1e450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1e452:	4b1e      	ldr	r3, [pc, #120]	; (1e4cc <prvProcessTimerOrBlockTask+0x84>)
   1e454:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e456:	2308      	movs	r3, #8
   1e458:	18fb      	adds	r3, r7, r3
   1e45a:	0018      	movs	r0, r3
   1e45c:	4b1c      	ldr	r3, [pc, #112]	; (1e4d0 <prvProcessTimerOrBlockTask+0x88>)
   1e45e:	4798      	blx	r3
   1e460:	0003      	movs	r3, r0
   1e462:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1e464:	68bb      	ldr	r3, [r7, #8]
   1e466:	2b00      	cmp	r3, #0
   1e468:	d129      	bne.n	1e4be <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1e46a:	683b      	ldr	r3, [r7, #0]
   1e46c:	2b00      	cmp	r3, #0
   1e46e:	d10c      	bne.n	1e48a <prvProcessTimerOrBlockTask+0x42>
   1e470:	687a      	ldr	r2, [r7, #4]
   1e472:	68fb      	ldr	r3, [r7, #12]
   1e474:	429a      	cmp	r2, r3
   1e476:	d808      	bhi.n	1e48a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1e478:	4b16      	ldr	r3, [pc, #88]	; (1e4d4 <prvProcessTimerOrBlockTask+0x8c>)
   1e47a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1e47c:	68fa      	ldr	r2, [r7, #12]
   1e47e:	687b      	ldr	r3, [r7, #4]
   1e480:	0011      	movs	r1, r2
   1e482:	0018      	movs	r0, r3
   1e484:	4b14      	ldr	r3, [pc, #80]	; (1e4d8 <prvProcessTimerOrBlockTask+0x90>)
   1e486:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1e488:	e01b      	b.n	1e4c2 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1e48a:	683b      	ldr	r3, [r7, #0]
   1e48c:	2b00      	cmp	r3, #0
   1e48e:	d006      	beq.n	1e49e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1e490:	4b12      	ldr	r3, [pc, #72]	; (1e4dc <prvProcessTimerOrBlockTask+0x94>)
   1e492:	681b      	ldr	r3, [r3, #0]
   1e494:	681b      	ldr	r3, [r3, #0]
   1e496:	425a      	negs	r2, r3
   1e498:	4153      	adcs	r3, r2
   1e49a:	b2db      	uxtb	r3, r3
   1e49c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1e49e:	4b10      	ldr	r3, [pc, #64]	; (1e4e0 <prvProcessTimerOrBlockTask+0x98>)
   1e4a0:	6818      	ldr	r0, [r3, #0]
   1e4a2:	687a      	ldr	r2, [r7, #4]
   1e4a4:	68fb      	ldr	r3, [r7, #12]
   1e4a6:	1ad3      	subs	r3, r2, r3
   1e4a8:	683a      	ldr	r2, [r7, #0]
   1e4aa:	0019      	movs	r1, r3
   1e4ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4e4 <prvProcessTimerOrBlockTask+0x9c>)
   1e4ae:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e4b0:	4b08      	ldr	r3, [pc, #32]	; (1e4d4 <prvProcessTimerOrBlockTask+0x8c>)
   1e4b2:	4798      	blx	r3
   1e4b4:	1e03      	subs	r3, r0, #0
   1e4b6:	d104      	bne.n	1e4c2 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1e4b8:	4b0b      	ldr	r3, [pc, #44]	; (1e4e8 <prvProcessTimerOrBlockTask+0xa0>)
   1e4ba:	4798      	blx	r3
}
   1e4bc:	e001      	b.n	1e4c2 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1e4be:	4b05      	ldr	r3, [pc, #20]	; (1e4d4 <prvProcessTimerOrBlockTask+0x8c>)
   1e4c0:	4798      	blx	r3
}
   1e4c2:	46c0      	nop			; (mov r8, r8)
   1e4c4:	46bd      	mov	sp, r7
   1e4c6:	b004      	add	sp, #16
   1e4c8:	bd80      	pop	{r7, pc}
   1e4ca:	46c0      	nop			; (mov r8, r8)
   1e4cc:	0001d281 	.word	0x0001d281
   1e4d0:	0001e52d 	.word	0x0001e52d
   1e4d4:	0001d299 	.word	0x0001d299
   1e4d8:	0001e391 	.word	0x0001e391
   1e4dc:	2000420c 	.word	0x2000420c
   1e4e0:	20004210 	.word	0x20004210
   1e4e4:	0001ca21 	.word	0x0001ca21
   1e4e8:	0001afb1 	.word	0x0001afb1

0001e4ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1e4ec:	b580      	push	{r7, lr}
   1e4ee:	b084      	sub	sp, #16
   1e4f0:	af00      	add	r7, sp, #0
   1e4f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1e4f4:	4b0c      	ldr	r3, [pc, #48]	; (1e528 <prvGetNextExpireTime+0x3c>)
   1e4f6:	681b      	ldr	r3, [r3, #0]
   1e4f8:	681b      	ldr	r3, [r3, #0]
   1e4fa:	425a      	negs	r2, r3
   1e4fc:	4153      	adcs	r3, r2
   1e4fe:	b2db      	uxtb	r3, r3
   1e500:	001a      	movs	r2, r3
   1e502:	687b      	ldr	r3, [r7, #4]
   1e504:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1e506:	687b      	ldr	r3, [r7, #4]
   1e508:	681b      	ldr	r3, [r3, #0]
   1e50a:	2b00      	cmp	r3, #0
   1e50c:	d105      	bne.n	1e51a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e50e:	4b06      	ldr	r3, [pc, #24]	; (1e528 <prvGetNextExpireTime+0x3c>)
   1e510:	681b      	ldr	r3, [r3, #0]
   1e512:	68db      	ldr	r3, [r3, #12]
   1e514:	681b      	ldr	r3, [r3, #0]
   1e516:	60fb      	str	r3, [r7, #12]
   1e518:	e001      	b.n	1e51e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1e51a:	2300      	movs	r3, #0
   1e51c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1e51e:	68fb      	ldr	r3, [r7, #12]
}
   1e520:	0018      	movs	r0, r3
   1e522:	46bd      	mov	sp, r7
   1e524:	b004      	add	sp, #16
   1e526:	bd80      	pop	{r7, pc}
   1e528:	20004208 	.word	0x20004208

0001e52c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1e52c:	b580      	push	{r7, lr}
   1e52e:	b084      	sub	sp, #16
   1e530:	af00      	add	r7, sp, #0
   1e532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1e534:	4b0c      	ldr	r3, [pc, #48]	; (1e568 <prvSampleTimeNow+0x3c>)
   1e536:	4798      	blx	r3
   1e538:	0003      	movs	r3, r0
   1e53a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1e53c:	4b0b      	ldr	r3, [pc, #44]	; (1e56c <prvSampleTimeNow+0x40>)
   1e53e:	681b      	ldr	r3, [r3, #0]
   1e540:	68fa      	ldr	r2, [r7, #12]
   1e542:	429a      	cmp	r2, r3
   1e544:	d205      	bcs.n	1e552 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1e546:	4b0a      	ldr	r3, [pc, #40]	; (1e570 <prvSampleTimeNow+0x44>)
   1e548:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1e54a:	687b      	ldr	r3, [r7, #4]
   1e54c:	2201      	movs	r2, #1
   1e54e:	601a      	str	r2, [r3, #0]
   1e550:	e002      	b.n	1e558 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1e552:	687b      	ldr	r3, [r7, #4]
   1e554:	2200      	movs	r2, #0
   1e556:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1e558:	4b04      	ldr	r3, [pc, #16]	; (1e56c <prvSampleTimeNow+0x40>)
   1e55a:	68fa      	ldr	r2, [r7, #12]
   1e55c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1e55e:	68fb      	ldr	r3, [r7, #12]
}
   1e560:	0018      	movs	r0, r3
   1e562:	46bd      	mov	sp, r7
   1e564:	b004      	add	sp, #16
   1e566:	bd80      	pop	{r7, pc}
   1e568:	0001d409 	.word	0x0001d409
   1e56c:	20004218 	.word	0x20004218
   1e570:	0001e715 	.word	0x0001e715

0001e574 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1e574:	b580      	push	{r7, lr}
   1e576:	b086      	sub	sp, #24
   1e578:	af00      	add	r7, sp, #0
   1e57a:	60f8      	str	r0, [r7, #12]
   1e57c:	60b9      	str	r1, [r7, #8]
   1e57e:	607a      	str	r2, [r7, #4]
   1e580:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1e582:	2300      	movs	r3, #0
   1e584:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1e586:	68fb      	ldr	r3, [r7, #12]
   1e588:	68ba      	ldr	r2, [r7, #8]
   1e58a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e58c:	68fb      	ldr	r3, [r7, #12]
   1e58e:	68fa      	ldr	r2, [r7, #12]
   1e590:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1e592:	68ba      	ldr	r2, [r7, #8]
   1e594:	687b      	ldr	r3, [r7, #4]
   1e596:	429a      	cmp	r2, r3
   1e598:	d812      	bhi.n	1e5c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e59a:	687a      	ldr	r2, [r7, #4]
   1e59c:	683b      	ldr	r3, [r7, #0]
   1e59e:	1ad2      	subs	r2, r2, r3
   1e5a0:	68fb      	ldr	r3, [r7, #12]
   1e5a2:	699b      	ldr	r3, [r3, #24]
   1e5a4:	429a      	cmp	r2, r3
   1e5a6:	d302      	bcc.n	1e5ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1e5a8:	2301      	movs	r3, #1
   1e5aa:	617b      	str	r3, [r7, #20]
   1e5ac:	e01b      	b.n	1e5e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1e5ae:	4b10      	ldr	r3, [pc, #64]	; (1e5f0 <prvInsertTimerInActiveList+0x7c>)
   1e5b0:	681a      	ldr	r2, [r3, #0]
   1e5b2:	68fb      	ldr	r3, [r7, #12]
   1e5b4:	3304      	adds	r3, #4
   1e5b6:	0019      	movs	r1, r3
   1e5b8:	0010      	movs	r0, r2
   1e5ba:	4b0e      	ldr	r3, [pc, #56]	; (1e5f4 <prvInsertTimerInActiveList+0x80>)
   1e5bc:	4798      	blx	r3
   1e5be:	e012      	b.n	1e5e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1e5c0:	687a      	ldr	r2, [r7, #4]
   1e5c2:	683b      	ldr	r3, [r7, #0]
   1e5c4:	429a      	cmp	r2, r3
   1e5c6:	d206      	bcs.n	1e5d6 <prvInsertTimerInActiveList+0x62>
   1e5c8:	68ba      	ldr	r2, [r7, #8]
   1e5ca:	683b      	ldr	r3, [r7, #0]
   1e5cc:	429a      	cmp	r2, r3
   1e5ce:	d302      	bcc.n	1e5d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1e5d0:	2301      	movs	r3, #1
   1e5d2:	617b      	str	r3, [r7, #20]
   1e5d4:	e007      	b.n	1e5e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e5d6:	4b08      	ldr	r3, [pc, #32]	; (1e5f8 <prvInsertTimerInActiveList+0x84>)
   1e5d8:	681a      	ldr	r2, [r3, #0]
   1e5da:	68fb      	ldr	r3, [r7, #12]
   1e5dc:	3304      	adds	r3, #4
   1e5de:	0019      	movs	r1, r3
   1e5e0:	0010      	movs	r0, r2
   1e5e2:	4b04      	ldr	r3, [pc, #16]	; (1e5f4 <prvInsertTimerInActiveList+0x80>)
   1e5e4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1e5e6:	697b      	ldr	r3, [r7, #20]
}
   1e5e8:	0018      	movs	r0, r3
   1e5ea:	46bd      	mov	sp, r7
   1e5ec:	b006      	add	sp, #24
   1e5ee:	bd80      	pop	{r7, pc}
   1e5f0:	2000420c 	.word	0x2000420c
   1e5f4:	0001adcf 	.word	0x0001adcf
   1e5f8:	20004208 	.word	0x20004208

0001e5fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1e5fc:	b590      	push	{r4, r7, lr}
   1e5fe:	b08b      	sub	sp, #44	; 0x2c
   1e600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e602:	e068      	b.n	1e6d6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1e604:	2308      	movs	r3, #8
   1e606:	18fb      	adds	r3, r7, r3
   1e608:	681b      	ldr	r3, [r3, #0]
   1e60a:	2b00      	cmp	r3, #0
   1e60c:	db63      	blt.n	1e6d6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1e60e:	2308      	movs	r3, #8
   1e610:	18fb      	adds	r3, r7, r3
   1e612:	689b      	ldr	r3, [r3, #8]
   1e614:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1e616:	69fb      	ldr	r3, [r7, #28]
   1e618:	695b      	ldr	r3, [r3, #20]
   1e61a:	2b00      	cmp	r3, #0
   1e61c:	d004      	beq.n	1e628 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e61e:	69fb      	ldr	r3, [r7, #28]
   1e620:	3304      	adds	r3, #4
   1e622:	0018      	movs	r0, r3
   1e624:	4b33      	ldr	r3, [pc, #204]	; (1e6f4 <prvProcessReceivedCommands+0xf8>)
   1e626:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e628:	1d3b      	adds	r3, r7, #4
   1e62a:	0018      	movs	r0, r3
   1e62c:	4b32      	ldr	r3, [pc, #200]	; (1e6f8 <prvProcessReceivedCommands+0xfc>)
   1e62e:	4798      	blx	r3
   1e630:	0003      	movs	r3, r0
   1e632:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1e634:	2308      	movs	r3, #8
   1e636:	18fb      	adds	r3, r7, r3
   1e638:	681b      	ldr	r3, [r3, #0]
   1e63a:	2b09      	cmp	r3, #9
   1e63c:	d84a      	bhi.n	1e6d4 <prvProcessReceivedCommands+0xd8>
   1e63e:	009a      	lsls	r2, r3, #2
   1e640:	4b2e      	ldr	r3, [pc, #184]	; (1e6fc <prvProcessReceivedCommands+0x100>)
   1e642:	18d3      	adds	r3, r2, r3
   1e644:	681b      	ldr	r3, [r3, #0]
   1e646:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1e648:	2308      	movs	r3, #8
   1e64a:	18fb      	adds	r3, r7, r3
   1e64c:	685a      	ldr	r2, [r3, #4]
   1e64e:	69fb      	ldr	r3, [r7, #28]
   1e650:	699b      	ldr	r3, [r3, #24]
   1e652:	18d1      	adds	r1, r2, r3
   1e654:	2308      	movs	r3, #8
   1e656:	18fb      	adds	r3, r7, r3
   1e658:	685b      	ldr	r3, [r3, #4]
   1e65a:	69ba      	ldr	r2, [r7, #24]
   1e65c:	69f8      	ldr	r0, [r7, #28]
   1e65e:	4c28      	ldr	r4, [pc, #160]	; (1e700 <prvProcessReceivedCommands+0x104>)
   1e660:	47a0      	blx	r4
   1e662:	1e03      	subs	r3, r0, #0
   1e664:	d037      	beq.n	1e6d6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e666:	69fb      	ldr	r3, [r7, #28]
   1e668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e66a:	69fa      	ldr	r2, [r7, #28]
   1e66c:	0010      	movs	r0, r2
   1e66e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e670:	69fb      	ldr	r3, [r7, #28]
   1e672:	69db      	ldr	r3, [r3, #28]
   1e674:	2b01      	cmp	r3, #1
   1e676:	d12e      	bne.n	1e6d6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1e678:	2308      	movs	r3, #8
   1e67a:	18fb      	adds	r3, r7, r3
   1e67c:	685a      	ldr	r2, [r3, #4]
   1e67e:	69fb      	ldr	r3, [r7, #28]
   1e680:	699b      	ldr	r3, [r3, #24]
   1e682:	18d2      	adds	r2, r2, r3
   1e684:	69f8      	ldr	r0, [r7, #28]
   1e686:	2300      	movs	r3, #0
   1e688:	9300      	str	r3, [sp, #0]
   1e68a:	2300      	movs	r3, #0
   1e68c:	2100      	movs	r1, #0
   1e68e:	4c1d      	ldr	r4, [pc, #116]	; (1e704 <prvProcessReceivedCommands+0x108>)
   1e690:	47a0      	blx	r4
   1e692:	0003      	movs	r3, r0
   1e694:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1e696:	697b      	ldr	r3, [r7, #20]
   1e698:	2b00      	cmp	r3, #0
   1e69a:	d11c      	bne.n	1e6d6 <prvProcessReceivedCommands+0xda>
   1e69c:	b672      	cpsid	i
   1e69e:	e7fe      	b.n	1e69e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1e6a0:	2308      	movs	r3, #8
   1e6a2:	18fb      	adds	r3, r7, r3
   1e6a4:	685a      	ldr	r2, [r3, #4]
   1e6a6:	69fb      	ldr	r3, [r7, #28]
   1e6a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1e6aa:	69fb      	ldr	r3, [r7, #28]
   1e6ac:	699b      	ldr	r3, [r3, #24]
   1e6ae:	2b00      	cmp	r3, #0
   1e6b0:	d101      	bne.n	1e6b6 <prvProcessReceivedCommands+0xba>
   1e6b2:	b672      	cpsid	i
   1e6b4:	e7fe      	b.n	1e6b4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1e6b6:	69fb      	ldr	r3, [r7, #28]
   1e6b8:	699a      	ldr	r2, [r3, #24]
   1e6ba:	69bb      	ldr	r3, [r7, #24]
   1e6bc:	18d1      	adds	r1, r2, r3
   1e6be:	69bb      	ldr	r3, [r7, #24]
   1e6c0:	69ba      	ldr	r2, [r7, #24]
   1e6c2:	69f8      	ldr	r0, [r7, #28]
   1e6c4:	4c0e      	ldr	r4, [pc, #56]	; (1e700 <prvProcessReceivedCommands+0x104>)
   1e6c6:	47a0      	blx	r4
					break;
   1e6c8:	e005      	b.n	1e6d6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1e6ca:	69fb      	ldr	r3, [r7, #28]
   1e6cc:	0018      	movs	r0, r3
   1e6ce:	4b0e      	ldr	r3, [pc, #56]	; (1e708 <prvProcessReceivedCommands+0x10c>)
   1e6d0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1e6d2:	e000      	b.n	1e6d6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1e6d4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e6d6:	4b0d      	ldr	r3, [pc, #52]	; (1e70c <prvProcessReceivedCommands+0x110>)
   1e6d8:	681b      	ldr	r3, [r3, #0]
   1e6da:	2208      	movs	r2, #8
   1e6dc:	18b9      	adds	r1, r7, r2
   1e6de:	2200      	movs	r2, #0
   1e6e0:	0018      	movs	r0, r3
   1e6e2:	4b0b      	ldr	r3, [pc, #44]	; (1e710 <prvProcessReceivedCommands+0x114>)
   1e6e4:	4798      	blx	r3
   1e6e6:	1e03      	subs	r3, r0, #0
   1e6e8:	d18c      	bne.n	1e604 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1e6ea:	46c0      	nop			; (mov r8, r8)
   1e6ec:	46bd      	mov	sp, r7
   1e6ee:	b009      	add	sp, #36	; 0x24
   1e6f0:	bd90      	pop	{r4, r7, pc}
   1e6f2:	46c0      	nop			; (mov r8, r8)
   1e6f4:	0001ae3b 	.word	0x0001ae3b
   1e6f8:	0001e52d 	.word	0x0001e52d
   1e6fc:	00039268 	.word	0x00039268
   1e700:	0001e575 	.word	0x0001e575
   1e704:	0001e2e9 	.word	0x0001e2e9
   1e708:	0001b1c5 	.word	0x0001b1c5
   1e70c:	20004210 	.word	0x20004210
   1e710:	0001be15 	.word	0x0001be15

0001e714 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1e714:	b590      	push	{r4, r7, lr}
   1e716:	b089      	sub	sp, #36	; 0x24
   1e718:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e71a:	e03e      	b.n	1e79a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e71c:	4b28      	ldr	r3, [pc, #160]	; (1e7c0 <prvSwitchTimerLists+0xac>)
   1e71e:	681b      	ldr	r3, [r3, #0]
   1e720:	68db      	ldr	r3, [r3, #12]
   1e722:	681b      	ldr	r3, [r3, #0]
   1e724:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e726:	4b26      	ldr	r3, [pc, #152]	; (1e7c0 <prvSwitchTimerLists+0xac>)
   1e728:	681b      	ldr	r3, [r3, #0]
   1e72a:	68db      	ldr	r3, [r3, #12]
   1e72c:	68db      	ldr	r3, [r3, #12]
   1e72e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e730:	693b      	ldr	r3, [r7, #16]
   1e732:	3304      	adds	r3, #4
   1e734:	0018      	movs	r0, r3
   1e736:	4b23      	ldr	r3, [pc, #140]	; (1e7c4 <prvSwitchTimerLists+0xb0>)
   1e738:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e73a:	693b      	ldr	r3, [r7, #16]
   1e73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e73e:	693a      	ldr	r2, [r7, #16]
   1e740:	0010      	movs	r0, r2
   1e742:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e744:	693b      	ldr	r3, [r7, #16]
   1e746:	69db      	ldr	r3, [r3, #28]
   1e748:	2b01      	cmp	r3, #1
   1e74a:	d126      	bne.n	1e79a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e74c:	693b      	ldr	r3, [r7, #16]
   1e74e:	699a      	ldr	r2, [r3, #24]
   1e750:	697b      	ldr	r3, [r7, #20]
   1e752:	18d3      	adds	r3, r2, r3
   1e754:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e756:	68fa      	ldr	r2, [r7, #12]
   1e758:	697b      	ldr	r3, [r7, #20]
   1e75a:	429a      	cmp	r2, r3
   1e75c:	d90e      	bls.n	1e77c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e75e:	693b      	ldr	r3, [r7, #16]
   1e760:	68fa      	ldr	r2, [r7, #12]
   1e762:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e764:	693b      	ldr	r3, [r7, #16]
   1e766:	693a      	ldr	r2, [r7, #16]
   1e768:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e76a:	4b15      	ldr	r3, [pc, #84]	; (1e7c0 <prvSwitchTimerLists+0xac>)
   1e76c:	681a      	ldr	r2, [r3, #0]
   1e76e:	693b      	ldr	r3, [r7, #16]
   1e770:	3304      	adds	r3, #4
   1e772:	0019      	movs	r1, r3
   1e774:	0010      	movs	r0, r2
   1e776:	4b14      	ldr	r3, [pc, #80]	; (1e7c8 <prvSwitchTimerLists+0xb4>)
   1e778:	4798      	blx	r3
   1e77a:	e00e      	b.n	1e79a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e77c:	697a      	ldr	r2, [r7, #20]
   1e77e:	6938      	ldr	r0, [r7, #16]
   1e780:	2300      	movs	r3, #0
   1e782:	9300      	str	r3, [sp, #0]
   1e784:	2300      	movs	r3, #0
   1e786:	2100      	movs	r1, #0
   1e788:	4c10      	ldr	r4, [pc, #64]	; (1e7cc <prvSwitchTimerLists+0xb8>)
   1e78a:	47a0      	blx	r4
   1e78c:	0003      	movs	r3, r0
   1e78e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e790:	68bb      	ldr	r3, [r7, #8]
   1e792:	2b00      	cmp	r3, #0
   1e794:	d101      	bne.n	1e79a <prvSwitchTimerLists+0x86>
   1e796:	b672      	cpsid	i
   1e798:	e7fe      	b.n	1e798 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e79a:	4b09      	ldr	r3, [pc, #36]	; (1e7c0 <prvSwitchTimerLists+0xac>)
   1e79c:	681b      	ldr	r3, [r3, #0]
   1e79e:	681b      	ldr	r3, [r3, #0]
   1e7a0:	2b00      	cmp	r3, #0
   1e7a2:	d1bb      	bne.n	1e71c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e7a4:	4b06      	ldr	r3, [pc, #24]	; (1e7c0 <prvSwitchTimerLists+0xac>)
   1e7a6:	681b      	ldr	r3, [r3, #0]
   1e7a8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e7aa:	4b09      	ldr	r3, [pc, #36]	; (1e7d0 <prvSwitchTimerLists+0xbc>)
   1e7ac:	681a      	ldr	r2, [r3, #0]
   1e7ae:	4b04      	ldr	r3, [pc, #16]	; (1e7c0 <prvSwitchTimerLists+0xac>)
   1e7b0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e7b2:	4b07      	ldr	r3, [pc, #28]	; (1e7d0 <prvSwitchTimerLists+0xbc>)
   1e7b4:	687a      	ldr	r2, [r7, #4]
   1e7b6:	601a      	str	r2, [r3, #0]
}
   1e7b8:	46c0      	nop			; (mov r8, r8)
   1e7ba:	46bd      	mov	sp, r7
   1e7bc:	b007      	add	sp, #28
   1e7be:	bd90      	pop	{r4, r7, pc}
   1e7c0:	20004208 	.word	0x20004208
   1e7c4:	0001ae3b 	.word	0x0001ae3b
   1e7c8:	0001adcf 	.word	0x0001adcf
   1e7cc:	0001e2e9 	.word	0x0001e2e9
   1e7d0:	2000420c 	.word	0x2000420c

0001e7d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e7d4:	b580      	push	{r7, lr}
   1e7d6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e7d8:	4b10      	ldr	r3, [pc, #64]	; (1e81c <prvCheckForValidListAndQueue+0x48>)
   1e7da:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e7dc:	4b10      	ldr	r3, [pc, #64]	; (1e820 <prvCheckForValidListAndQueue+0x4c>)
   1e7de:	681b      	ldr	r3, [r3, #0]
   1e7e0:	2b00      	cmp	r3, #0
   1e7e2:	d115      	bne.n	1e810 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e7e4:	4b0f      	ldr	r3, [pc, #60]	; (1e824 <prvCheckForValidListAndQueue+0x50>)
   1e7e6:	0018      	movs	r0, r3
   1e7e8:	4b0f      	ldr	r3, [pc, #60]	; (1e828 <prvCheckForValidListAndQueue+0x54>)
   1e7ea:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e7ec:	4b0f      	ldr	r3, [pc, #60]	; (1e82c <prvCheckForValidListAndQueue+0x58>)
   1e7ee:	0018      	movs	r0, r3
   1e7f0:	4b0d      	ldr	r3, [pc, #52]	; (1e828 <prvCheckForValidListAndQueue+0x54>)
   1e7f2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e7f4:	4b0e      	ldr	r3, [pc, #56]	; (1e830 <prvCheckForValidListAndQueue+0x5c>)
   1e7f6:	4a0b      	ldr	r2, [pc, #44]	; (1e824 <prvCheckForValidListAndQueue+0x50>)
   1e7f8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e7fa:	4b0e      	ldr	r3, [pc, #56]	; (1e834 <prvCheckForValidListAndQueue+0x60>)
   1e7fc:	4a0b      	ldr	r2, [pc, #44]	; (1e82c <prvCheckForValidListAndQueue+0x58>)
   1e7fe:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e800:	2200      	movs	r2, #0
   1e802:	210c      	movs	r1, #12
   1e804:	2005      	movs	r0, #5
   1e806:	4b0c      	ldr	r3, [pc, #48]	; (1e838 <prvCheckForValidListAndQueue+0x64>)
   1e808:	4798      	blx	r3
   1e80a:	0002      	movs	r2, r0
   1e80c:	4b04      	ldr	r3, [pc, #16]	; (1e820 <prvCheckForValidListAndQueue+0x4c>)
   1e80e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e810:	4b0a      	ldr	r3, [pc, #40]	; (1e83c <prvCheckForValidListAndQueue+0x68>)
   1e812:	4798      	blx	r3
}
   1e814:	46c0      	nop			; (mov r8, r8)
   1e816:	46bd      	mov	sp, r7
   1e818:	bd80      	pop	{r7, pc}
   1e81a:	46c0      	nop			; (mov r8, r8)
   1e81c:	0001afc9 	.word	0x0001afc9
   1e820:	20004210 	.word	0x20004210
   1e824:	200041e0 	.word	0x200041e0
   1e828:	0001ad39 	.word	0x0001ad39
   1e82c:	200041f4 	.word	0x200041f4
   1e830:	20004208 	.word	0x20004208
   1e834:	2000420c 	.word	0x2000420c
   1e838:	0001b2b5 	.word	0x0001b2b5
   1e83c:	0001afed 	.word	0x0001afed

0001e840 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e840:	b580      	push	{r7, lr}
   1e842:	b082      	sub	sp, #8
   1e844:	af00      	add	r7, sp, #0
   1e846:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e848:	687b      	ldr	r3, [r7, #4]
   1e84a:	7c1b      	ldrb	r3, [r3, #16]
   1e84c:	2b00      	cmp	r3, #0
   1e84e:	d00b      	beq.n	1e868 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e850:	687b      	ldr	r3, [r7, #4]
   1e852:	689b      	ldr	r3, [r3, #8]
   1e854:	1c5a      	adds	r2, r3, #1
   1e856:	687b      	ldr	r3, [r7, #4]
   1e858:	68d9      	ldr	r1, [r3, #12]
   1e85a:	4b10      	ldr	r3, [pc, #64]	; (1e89c <advance_pointer+0x5c>)
   1e85c:	0010      	movs	r0, r2
   1e85e:	4798      	blx	r3
   1e860:	000b      	movs	r3, r1
   1e862:	001a      	movs	r2, r3
   1e864:	687b      	ldr	r3, [r7, #4]
   1e866:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e868:	687b      	ldr	r3, [r7, #4]
   1e86a:	685b      	ldr	r3, [r3, #4]
   1e86c:	1c5a      	adds	r2, r3, #1
   1e86e:	687b      	ldr	r3, [r7, #4]
   1e870:	68d9      	ldr	r1, [r3, #12]
   1e872:	4b0a      	ldr	r3, [pc, #40]	; (1e89c <advance_pointer+0x5c>)
   1e874:	0010      	movs	r0, r2
   1e876:	4798      	blx	r3
   1e878:	000b      	movs	r3, r1
   1e87a:	001a      	movs	r2, r3
   1e87c:	687b      	ldr	r3, [r7, #4]
   1e87e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e880:	687b      	ldr	r3, [r7, #4]
   1e882:	685a      	ldr	r2, [r3, #4]
   1e884:	687b      	ldr	r3, [r7, #4]
   1e886:	689b      	ldr	r3, [r3, #8]
   1e888:	1ad3      	subs	r3, r2, r3
   1e88a:	425a      	negs	r2, r3
   1e88c:	4153      	adcs	r3, r2
   1e88e:	b2da      	uxtb	r2, r3
   1e890:	687b      	ldr	r3, [r7, #4]
   1e892:	741a      	strb	r2, [r3, #16]
 }
   1e894:	46c0      	nop			; (mov r8, r8)
   1e896:	46bd      	mov	sp, r7
   1e898:	b002      	add	sp, #8
   1e89a:	bd80      	pop	{r7, pc}
   1e89c:	000338b1 	.word	0x000338b1

0001e8a0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e8a0:	b580      	push	{r7, lr}
   1e8a2:	b082      	sub	sp, #8
   1e8a4:	af00      	add	r7, sp, #0
   1e8a6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e8a8:	687b      	ldr	r3, [r7, #4]
   1e8aa:	2200      	movs	r2, #0
   1e8ac:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e8ae:	687b      	ldr	r3, [r7, #4]
   1e8b0:	689b      	ldr	r3, [r3, #8]
   1e8b2:	1c5a      	adds	r2, r3, #1
   1e8b4:	687b      	ldr	r3, [r7, #4]
   1e8b6:	68d9      	ldr	r1, [r3, #12]
   1e8b8:	4b05      	ldr	r3, [pc, #20]	; (1e8d0 <retreat_pointer+0x30>)
   1e8ba:	0010      	movs	r0, r2
   1e8bc:	4798      	blx	r3
   1e8be:	000b      	movs	r3, r1
   1e8c0:	001a      	movs	r2, r3
   1e8c2:	687b      	ldr	r3, [r7, #4]
   1e8c4:	609a      	str	r2, [r3, #8]
 }
   1e8c6:	46c0      	nop			; (mov r8, r8)
   1e8c8:	46bd      	mov	sp, r7
   1e8ca:	b002      	add	sp, #8
   1e8cc:	bd80      	pop	{r7, pc}
   1e8ce:	46c0      	nop			; (mov r8, r8)
   1e8d0:	000338b1 	.word	0x000338b1

0001e8d4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e8d4:	b580      	push	{r7, lr}
   1e8d6:	b084      	sub	sp, #16
   1e8d8:	af00      	add	r7, sp, #0
   1e8da:	6078      	str	r0, [r7, #4]
   1e8dc:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e8de:	2014      	movs	r0, #20
   1e8e0:	4b09      	ldr	r3, [pc, #36]	; (1e908 <circular_buf_init+0x34>)
   1e8e2:	4798      	blx	r3
   1e8e4:	0003      	movs	r3, r0
   1e8e6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e8e8:	68fb      	ldr	r3, [r7, #12]
   1e8ea:	687a      	ldr	r2, [r7, #4]
   1e8ec:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e8ee:	68fb      	ldr	r3, [r7, #12]
   1e8f0:	683a      	ldr	r2, [r7, #0]
   1e8f2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e8f4:	68fb      	ldr	r3, [r7, #12]
   1e8f6:	0018      	movs	r0, r3
   1e8f8:	4b04      	ldr	r3, [pc, #16]	; (1e90c <circular_buf_init+0x38>)
   1e8fa:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e8fc:	68fb      	ldr	r3, [r7, #12]
 }
   1e8fe:	0018      	movs	r0, r3
   1e900:	46bd      	mov	sp, r7
   1e902:	b004      	add	sp, #16
   1e904:	bd80      	pop	{r7, pc}
   1e906:	46c0      	nop			; (mov r8, r8)
   1e908:	00035721 	.word	0x00035721
   1e90c:	0001e911 	.word	0x0001e911

0001e910 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e910:	b580      	push	{r7, lr}
   1e912:	b082      	sub	sp, #8
   1e914:	af00      	add	r7, sp, #0
   1e916:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e918:	687b      	ldr	r3, [r7, #4]
   1e91a:	2200      	movs	r2, #0
   1e91c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e91e:	687b      	ldr	r3, [r7, #4]
   1e920:	2200      	movs	r2, #0
   1e922:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e924:	687b      	ldr	r3, [r7, #4]
   1e926:	2200      	movs	r2, #0
   1e928:	741a      	strb	r2, [r3, #16]
 }
   1e92a:	46c0      	nop			; (mov r8, r8)
   1e92c:	46bd      	mov	sp, r7
   1e92e:	b002      	add	sp, #8
   1e930:	bd80      	pop	{r7, pc}
	...

0001e934 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e934:	b580      	push	{r7, lr}
   1e936:	b082      	sub	sp, #8
   1e938:	af00      	add	r7, sp, #0
   1e93a:	6078      	str	r0, [r7, #4]
   1e93c:	000a      	movs	r2, r1
   1e93e:	1cfb      	adds	r3, r7, #3
   1e940:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1e942:	687b      	ldr	r3, [r7, #4]
   1e944:	681a      	ldr	r2, [r3, #0]
   1e946:	687b      	ldr	r3, [r7, #4]
   1e948:	685b      	ldr	r3, [r3, #4]
   1e94a:	18d3      	adds	r3, r2, r3
   1e94c:	1cfa      	adds	r2, r7, #3
   1e94e:	7812      	ldrb	r2, [r2, #0]
   1e950:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1e952:	687b      	ldr	r3, [r7, #4]
   1e954:	0018      	movs	r0, r3
   1e956:	4b03      	ldr	r3, [pc, #12]	; (1e964 <circular_buf_put+0x30>)
   1e958:	4798      	blx	r3
 }
   1e95a:	46c0      	nop			; (mov r8, r8)
   1e95c:	46bd      	mov	sp, r7
   1e95e:	b002      	add	sp, #8
   1e960:	bd80      	pop	{r7, pc}
   1e962:	46c0      	nop			; (mov r8, r8)
   1e964:	0001e841 	.word	0x0001e841

0001e968 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e968:	b580      	push	{r7, lr}
   1e96a:	b084      	sub	sp, #16
   1e96c:	af00      	add	r7, sp, #0
   1e96e:	6078      	str	r0, [r7, #4]
   1e970:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e972:	2301      	movs	r3, #1
   1e974:	425b      	negs	r3, r3
   1e976:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e978:	687b      	ldr	r3, [r7, #4]
   1e97a:	0018      	movs	r0, r3
   1e97c:	4b0d      	ldr	r3, [pc, #52]	; (1e9b4 <circular_buf_get+0x4c>)
   1e97e:	4798      	blx	r3
   1e980:	0003      	movs	r3, r0
   1e982:	001a      	movs	r2, r3
   1e984:	2301      	movs	r3, #1
   1e986:	4053      	eors	r3, r2
   1e988:	b2db      	uxtb	r3, r3
   1e98a:	2b00      	cmp	r3, #0
   1e98c:	d00d      	beq.n	1e9aa <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e98e:	687b      	ldr	r3, [r7, #4]
   1e990:	681a      	ldr	r2, [r3, #0]
   1e992:	687b      	ldr	r3, [r7, #4]
   1e994:	689b      	ldr	r3, [r3, #8]
   1e996:	18d3      	adds	r3, r2, r3
   1e998:	781a      	ldrb	r2, [r3, #0]
   1e99a:	683b      	ldr	r3, [r7, #0]
   1e99c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e99e:	687b      	ldr	r3, [r7, #4]
   1e9a0:	0018      	movs	r0, r3
   1e9a2:	4b05      	ldr	r3, [pc, #20]	; (1e9b8 <circular_buf_get+0x50>)
   1e9a4:	4798      	blx	r3

		 r = 0;
   1e9a6:	2300      	movs	r3, #0
   1e9a8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e9aa:	68fb      	ldr	r3, [r7, #12]
 }
   1e9ac:	0018      	movs	r0, r3
   1e9ae:	46bd      	mov	sp, r7
   1e9b0:	b004      	add	sp, #16
   1e9b2:	bd80      	pop	{r7, pc}
   1e9b4:	0001e9bd 	.word	0x0001e9bd
   1e9b8:	0001e8a1 	.word	0x0001e8a1

0001e9bc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e9bc:	b580      	push	{r7, lr}
   1e9be:	b082      	sub	sp, #8
   1e9c0:	af00      	add	r7, sp, #0
   1e9c2:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e9c4:	687b      	ldr	r3, [r7, #4]
   1e9c6:	7c1b      	ldrb	r3, [r3, #16]
   1e9c8:	2201      	movs	r2, #1
   1e9ca:	4053      	eors	r3, r2
   1e9cc:	b2db      	uxtb	r3, r3
   1e9ce:	2b00      	cmp	r3, #0
   1e9d0:	d007      	beq.n	1e9e2 <circular_buf_empty+0x26>
   1e9d2:	687b      	ldr	r3, [r7, #4]
   1e9d4:	685a      	ldr	r2, [r3, #4]
   1e9d6:	687b      	ldr	r3, [r7, #4]
   1e9d8:	689b      	ldr	r3, [r3, #8]
   1e9da:	429a      	cmp	r2, r3
   1e9dc:	d101      	bne.n	1e9e2 <circular_buf_empty+0x26>
   1e9de:	2301      	movs	r3, #1
   1e9e0:	e000      	b.n	1e9e4 <circular_buf_empty+0x28>
   1e9e2:	2300      	movs	r3, #0
   1e9e4:	1c1a      	adds	r2, r3, #0
   1e9e6:	2301      	movs	r3, #1
   1e9e8:	4013      	ands	r3, r2
   1e9ea:	b2db      	uxtb	r3, r3
 }
   1e9ec:	0018      	movs	r0, r3
   1e9ee:	46bd      	mov	sp, r7
   1e9f0:	b002      	add	sp, #8
   1e9f2:	bd80      	pop	{r7, pc}

0001e9f4 <system_interrupt_enable>:
{
   1e9f4:	b580      	push	{r7, lr}
   1e9f6:	b082      	sub	sp, #8
   1e9f8:	af00      	add	r7, sp, #0
   1e9fa:	0002      	movs	r2, r0
   1e9fc:	1dfb      	adds	r3, r7, #7
   1e9fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ea00:	4b06      	ldr	r3, [pc, #24]	; (1ea1c <system_interrupt_enable+0x28>)
   1ea02:	1dfa      	adds	r2, r7, #7
   1ea04:	7812      	ldrb	r2, [r2, #0]
   1ea06:	0011      	movs	r1, r2
   1ea08:	221f      	movs	r2, #31
   1ea0a:	400a      	ands	r2, r1
   1ea0c:	2101      	movs	r1, #1
   1ea0e:	4091      	lsls	r1, r2
   1ea10:	000a      	movs	r2, r1
   1ea12:	601a      	str	r2, [r3, #0]
}
   1ea14:	46c0      	nop			; (mov r8, r8)
   1ea16:	46bd      	mov	sp, r7
   1ea18:	b002      	add	sp, #8
   1ea1a:	bd80      	pop	{r7, pc}
   1ea1c:	e000e100 	.word	0xe000e100

0001ea20 <usart_is_syncing>:
{
   1ea20:	b580      	push	{r7, lr}
   1ea22:	b084      	sub	sp, #16
   1ea24:	af00      	add	r7, sp, #0
   1ea26:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1ea28:	687b      	ldr	r3, [r7, #4]
   1ea2a:	681b      	ldr	r3, [r3, #0]
   1ea2c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1ea2e:	68fb      	ldr	r3, [r7, #12]
   1ea30:	69db      	ldr	r3, [r3, #28]
   1ea32:	1e5a      	subs	r2, r3, #1
   1ea34:	4193      	sbcs	r3, r2
   1ea36:	b2db      	uxtb	r3, r3
}
   1ea38:	0018      	movs	r0, r3
   1ea3a:	46bd      	mov	sp, r7
   1ea3c:	b004      	add	sp, #16
   1ea3e:	bd80      	pop	{r7, pc}

0001ea40 <_usart_wait_for_sync>:
{
   1ea40:	b580      	push	{r7, lr}
   1ea42:	b082      	sub	sp, #8
   1ea44:	af00      	add	r7, sp, #0
   1ea46:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1ea48:	46c0      	nop			; (mov r8, r8)
   1ea4a:	687b      	ldr	r3, [r7, #4]
   1ea4c:	0018      	movs	r0, r3
   1ea4e:	4b04      	ldr	r3, [pc, #16]	; (1ea60 <_usart_wait_for_sync+0x20>)
   1ea50:	4798      	blx	r3
   1ea52:	1e03      	subs	r3, r0, #0
   1ea54:	d1f9      	bne.n	1ea4a <_usart_wait_for_sync+0xa>
}
   1ea56:	46c0      	nop			; (mov r8, r8)
   1ea58:	46bd      	mov	sp, r7
   1ea5a:	b002      	add	sp, #8
   1ea5c:	bd80      	pop	{r7, pc}
   1ea5e:	46c0      	nop			; (mov r8, r8)
   1ea60:	0001ea21 	.word	0x0001ea21

0001ea64 <usart_get_config_defaults>:
{
   1ea64:	b580      	push	{r7, lr}
   1ea66:	b082      	sub	sp, #8
   1ea68:	af00      	add	r7, sp, #0
   1ea6a:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
   1ea6c:	687b      	ldr	r3, [r7, #4]
   1ea6e:	2280      	movs	r2, #128	; 0x80
   1ea70:	05d2      	lsls	r2, r2, #23
   1ea72:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1ea74:	687b      	ldr	r3, [r7, #4]
   1ea76:	2200      	movs	r2, #0
   1ea78:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1ea7a:	687b      	ldr	r3, [r7, #4]
   1ea7c:	22ff      	movs	r2, #255	; 0xff
   1ea7e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1ea80:	687b      	ldr	r3, [r7, #4]
   1ea82:	2200      	movs	r2, #0
   1ea84:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1ea86:	687b      	ldr	r3, [r7, #4]
   1ea88:	2200      	movs	r2, #0
   1ea8a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1ea8c:	687b      	ldr	r3, [r7, #4]
   1ea8e:	2296      	movs	r2, #150	; 0x96
   1ea90:	0192      	lsls	r2, r2, #6
   1ea92:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1ea94:	687b      	ldr	r3, [r7, #4]
   1ea96:	2224      	movs	r2, #36	; 0x24
   1ea98:	2101      	movs	r1, #1
   1ea9a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1ea9c:	687b      	ldr	r3, [r7, #4]
   1ea9e:	2225      	movs	r2, #37	; 0x25
   1eaa0:	2101      	movs	r1, #1
   1eaa2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1eaa4:	687b      	ldr	r3, [r7, #4]
   1eaa6:	2226      	movs	r2, #38	; 0x26
   1eaa8:	2100      	movs	r1, #0
   1eaaa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1eaac:	687b      	ldr	r3, [r7, #4]
   1eaae:	2227      	movs	r2, #39	; 0x27
   1eab0:	2100      	movs	r1, #0
   1eab2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1eab4:	687b      	ldr	r3, [r7, #4]
   1eab6:	2200      	movs	r2, #0
   1eab8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1eaba:	687b      	ldr	r3, [r7, #4]
   1eabc:	2288      	movs	r2, #136	; 0x88
   1eabe:	0352      	lsls	r2, r2, #13
   1eac0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1eac2:	687b      	ldr	r3, [r7, #4]
   1eac4:	222c      	movs	r2, #44	; 0x2c
   1eac6:	2100      	movs	r1, #0
   1eac8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1eaca:	687b      	ldr	r3, [r7, #4]
   1eacc:	222d      	movs	r2, #45	; 0x2d
   1eace:	2100      	movs	r1, #0
   1ead0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1ead2:	687b      	ldr	r3, [r7, #4]
   1ead4:	2200      	movs	r2, #0
   1ead6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1ead8:	687b      	ldr	r3, [r7, #4]
   1eada:	2200      	movs	r2, #0
   1eadc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1eade:	687b      	ldr	r3, [r7, #4]
   1eae0:	2200      	movs	r2, #0
   1eae2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1eae4:	687b      	ldr	r3, [r7, #4]
   1eae6:	2200      	movs	r2, #0
   1eae8:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1eaea:	687b      	ldr	r3, [r7, #4]
   1eaec:	2200      	movs	r2, #0
   1eaee:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1eaf0:	687b      	ldr	r3, [r7, #4]
   1eaf2:	2200      	movs	r2, #0
   1eaf4:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
   1eaf6:	687b      	ldr	r3, [r7, #4]
   1eaf8:	2200      	movs	r2, #0
   1eafa:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
   1eafc:	687b      	ldr	r3, [r7, #4]
   1eafe:	2200      	movs	r2, #0
   1eb00:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
   1eb02:	687b      	ldr	r3, [r7, #4]
   1eb04:	2200      	movs	r2, #0
   1eb06:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
   1eb08:	687b      	ldr	r3, [r7, #4]
   1eb0a:	2200      	movs	r2, #0
   1eb0c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1eb0e:	687b      	ldr	r3, [r7, #4]
   1eb10:	2213      	movs	r2, #19
   1eb12:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
   1eb14:	687b      	ldr	r3, [r7, #4]
   1eb16:	2200      	movs	r2, #0
   1eb18:	775a      	strb	r2, [r3, #29]
}
   1eb1a:	46c0      	nop			; (mov r8, r8)
   1eb1c:	46bd      	mov	sp, r7
   1eb1e:	b002      	add	sp, #8
   1eb20:	bd80      	pop	{r7, pc}
	...

0001eb24 <usart_enable>:
{
   1eb24:	b580      	push	{r7, lr}
   1eb26:	b084      	sub	sp, #16
   1eb28:	af00      	add	r7, sp, #0
   1eb2a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1eb2c:	687b      	ldr	r3, [r7, #4]
   1eb2e:	681b      	ldr	r3, [r3, #0]
   1eb30:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1eb32:	687b      	ldr	r3, [r7, #4]
   1eb34:	681b      	ldr	r3, [r3, #0]
   1eb36:	0018      	movs	r0, r3
   1eb38:	4b09      	ldr	r3, [pc, #36]	; (1eb60 <usart_enable+0x3c>)
   1eb3a:	4798      	blx	r3
   1eb3c:	0003      	movs	r3, r0
   1eb3e:	0018      	movs	r0, r3
   1eb40:	4b08      	ldr	r3, [pc, #32]	; (1eb64 <usart_enable+0x40>)
   1eb42:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1eb44:	687b      	ldr	r3, [r7, #4]
   1eb46:	0018      	movs	r0, r3
   1eb48:	4b07      	ldr	r3, [pc, #28]	; (1eb68 <usart_enable+0x44>)
   1eb4a:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1eb4c:	68fb      	ldr	r3, [r7, #12]
   1eb4e:	681b      	ldr	r3, [r3, #0]
   1eb50:	2202      	movs	r2, #2
   1eb52:	431a      	orrs	r2, r3
   1eb54:	68fb      	ldr	r3, [r7, #12]
   1eb56:	601a      	str	r2, [r3, #0]
}
   1eb58:	46c0      	nop			; (mov r8, r8)
   1eb5a:	46bd      	mov	sp, r7
   1eb5c:	b004      	add	sp, #16
   1eb5e:	bd80      	pop	{r7, pc}
   1eb60:	00028451 	.word	0x00028451
   1eb64:	0001e9f5 	.word	0x0001e9f5
   1eb68:	0001ea41 	.word	0x0001ea41

0001eb6c <usart_enable_callback>:
{
   1eb6c:	b580      	push	{r7, lr}
   1eb6e:	b082      	sub	sp, #8
   1eb70:	af00      	add	r7, sp, #0
   1eb72:	6078      	str	r0, [r7, #4]
   1eb74:	000a      	movs	r2, r1
   1eb76:	1cfb      	adds	r3, r7, #3
   1eb78:	701a      	strb	r2, [r3, #0]
	module->callback_enable_mask |= (1 << callback_type);
   1eb7a:	687b      	ldr	r3, [r7, #4]
   1eb7c:	2231      	movs	r2, #49	; 0x31
   1eb7e:	5c9b      	ldrb	r3, [r3, r2]
   1eb80:	b25a      	sxtb	r2, r3
   1eb82:	1cfb      	adds	r3, r7, #3
   1eb84:	781b      	ldrb	r3, [r3, #0]
   1eb86:	2101      	movs	r1, #1
   1eb88:	4099      	lsls	r1, r3
   1eb8a:	000b      	movs	r3, r1
   1eb8c:	b25b      	sxtb	r3, r3
   1eb8e:	4313      	orrs	r3, r2
   1eb90:	b25b      	sxtb	r3, r3
   1eb92:	b2d9      	uxtb	r1, r3
   1eb94:	687b      	ldr	r3, [r7, #4]
   1eb96:	2231      	movs	r2, #49	; 0x31
   1eb98:	5499      	strb	r1, [r3, r2]
}
   1eb9a:	46c0      	nop			; (mov r8, r8)
   1eb9c:	46bd      	mov	sp, r7
   1eb9e:	b002      	add	sp, #8
   1eba0:	bd80      	pop	{r7, pc}
	...

0001eba4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1eba4:	b580      	push	{r7, lr}
   1eba6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1eba8:	2380      	movs	r3, #128	; 0x80
   1ebaa:	009a      	lsls	r2, r3, #2
   1ebac:	4b0f      	ldr	r3, [pc, #60]	; (1ebec <InitializeSerialConsole+0x48>)
   1ebae:	0011      	movs	r1, r2
   1ebb0:	0018      	movs	r0, r3
   1ebb2:	4b0f      	ldr	r3, [pc, #60]	; (1ebf0 <InitializeSerialConsole+0x4c>)
   1ebb4:	4798      	blx	r3
   1ebb6:	0002      	movs	r2, r0
   1ebb8:	4b0e      	ldr	r3, [pc, #56]	; (1ebf4 <InitializeSerialConsole+0x50>)
   1ebba:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1ebbc:	2380      	movs	r3, #128	; 0x80
   1ebbe:	009a      	lsls	r2, r3, #2
   1ebc0:	4b0d      	ldr	r3, [pc, #52]	; (1ebf8 <InitializeSerialConsole+0x54>)
   1ebc2:	0011      	movs	r1, r2
   1ebc4:	0018      	movs	r0, r3
   1ebc6:	4b0a      	ldr	r3, [pc, #40]	; (1ebf0 <InitializeSerialConsole+0x4c>)
   1ebc8:	4798      	blx	r3
   1ebca:	0002      	movs	r2, r0
   1ebcc:	4b0b      	ldr	r3, [pc, #44]	; (1ebfc <InitializeSerialConsole+0x58>)
   1ebce:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1ebd0:	4b0b      	ldr	r3, [pc, #44]	; (1ec00 <InitializeSerialConsole+0x5c>)
   1ebd2:	4798      	blx	r3
    configure_usart_callbacks();
   1ebd4:	4b0b      	ldr	r3, [pc, #44]	; (1ec04 <InitializeSerialConsole+0x60>)
   1ebd6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1ebd8:	490b      	ldr	r1, [pc, #44]	; (1ec08 <InitializeSerialConsole+0x64>)
   1ebda:	4b0c      	ldr	r3, [pc, #48]	; (1ec0c <InitializeSerialConsole+0x68>)
   1ebdc:	2201      	movs	r2, #1
   1ebde:	0018      	movs	r0, r3
   1ebe0:	4b0b      	ldr	r3, [pc, #44]	; (1ec10 <InitializeSerialConsole+0x6c>)
   1ebe2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1ebe4:	46c0      	nop			; (mov r8, r8)
   1ebe6:	46bd      	mov	sp, r7
   1ebe8:	bd80      	pop	{r7, pc}
   1ebea:	46c0      	nop			; (mov r8, r8)
   1ebec:	2000591c 	.word	0x2000591c
   1ebf0:	0001e8d5 	.word	0x0001e8d5
   1ebf4:	20005714 	.word	0x20005714
   1ebf8:	2000571c 	.word	0x2000571c
   1ebfc:	20005b20 	.word	0x20005b20
   1ec00:	0001ed79 	.word	0x0001ed79
   1ec04:	0001edf1 	.word	0x0001edf1
   1ec08:	20005718 	.word	0x20005718
   1ec0c:	200056e0 	.word	0x200056e0
   1ec10:	00029cf9 	.word	0x00029cf9

0001ec14 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1ec14:	b580      	push	{r7, lr}
   1ec16:	b084      	sub	sp, #16
   1ec18:	af00      	add	r7, sp, #0
   1ec1a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ec1c:	4b1a      	ldr	r3, [pc, #104]	; (1ec88 <SerialConsoleWriteString+0x74>)
   1ec1e:	4798      	blx	r3
    if (string != NULL) {
   1ec20:	687b      	ldr	r3, [r7, #4]
   1ec22:	2b00      	cmp	r3, #0
   1ec24:	d02a      	beq.n	1ec7c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ec26:	2300      	movs	r3, #0
   1ec28:	60fb      	str	r3, [r7, #12]
   1ec2a:	e00b      	b.n	1ec44 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ec2c:	4b17      	ldr	r3, [pc, #92]	; (1ec8c <SerialConsoleWriteString+0x78>)
   1ec2e:	6818      	ldr	r0, [r3, #0]
   1ec30:	687a      	ldr	r2, [r7, #4]
   1ec32:	68fb      	ldr	r3, [r7, #12]
   1ec34:	18d3      	adds	r3, r2, r3
   1ec36:	781b      	ldrb	r3, [r3, #0]
   1ec38:	0019      	movs	r1, r3
   1ec3a:	4b15      	ldr	r3, [pc, #84]	; (1ec90 <SerialConsoleWriteString+0x7c>)
   1ec3c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ec3e:	68fb      	ldr	r3, [r7, #12]
   1ec40:	3301      	adds	r3, #1
   1ec42:	60fb      	str	r3, [r7, #12]
   1ec44:	687b      	ldr	r3, [r7, #4]
   1ec46:	0018      	movs	r0, r3
   1ec48:	4b12      	ldr	r3, [pc, #72]	; (1ec94 <SerialConsoleWriteString+0x80>)
   1ec4a:	4798      	blx	r3
   1ec4c:	0002      	movs	r2, r0
   1ec4e:	68fb      	ldr	r3, [r7, #12]
   1ec50:	429a      	cmp	r2, r3
   1ec52:	d8eb      	bhi.n	1ec2c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1ec54:	4b10      	ldr	r3, [pc, #64]	; (1ec98 <SerialConsoleWriteString+0x84>)
   1ec56:	2101      	movs	r1, #1
   1ec58:	0018      	movs	r0, r3
   1ec5a:	4b10      	ldr	r3, [pc, #64]	; (1ec9c <SerialConsoleWriteString+0x88>)
   1ec5c:	4798      	blx	r3
   1ec5e:	1e03      	subs	r3, r0, #0
   1ec60:	d10c      	bne.n	1ec7c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1ec62:	4b0a      	ldr	r3, [pc, #40]	; (1ec8c <SerialConsoleWriteString+0x78>)
   1ec64:	681b      	ldr	r3, [r3, #0]
   1ec66:	4a0e      	ldr	r2, [pc, #56]	; (1eca0 <SerialConsoleWriteString+0x8c>)
   1ec68:	0011      	movs	r1, r2
   1ec6a:	0018      	movs	r0, r3
   1ec6c:	4b0d      	ldr	r3, [pc, #52]	; (1eca4 <SerialConsoleWriteString+0x90>)
   1ec6e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ec70:	490b      	ldr	r1, [pc, #44]	; (1eca0 <SerialConsoleWriteString+0x8c>)
   1ec72:	4b09      	ldr	r3, [pc, #36]	; (1ec98 <SerialConsoleWriteString+0x84>)
   1ec74:	2201      	movs	r2, #1
   1ec76:	0018      	movs	r0, r3
   1ec78:	4b0b      	ldr	r3, [pc, #44]	; (1eca8 <SerialConsoleWriteString+0x94>)
   1ec7a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ec7c:	4b0b      	ldr	r3, [pc, #44]	; (1ecac <SerialConsoleWriteString+0x98>)
   1ec7e:	4798      	blx	r3
}
   1ec80:	46c0      	nop			; (mov r8, r8)
   1ec82:	46bd      	mov	sp, r7
   1ec84:	b004      	add	sp, #16
   1ec86:	bd80      	pop	{r7, pc}
   1ec88:	0001d281 	.word	0x0001d281
   1ec8c:	20005b20 	.word	0x20005b20
   1ec90:	0001e935 	.word	0x0001e935
   1ec94:	00035b37 	.word	0x00035b37
   1ec98:	200056e0 	.word	0x200056e0
   1ec9c:	00029d41 	.word	0x00029d41
   1eca0:	20005b1c 	.word	0x20005b1c
   1eca4:	0001e969 	.word	0x0001e969
   1eca8:	00029cb1 	.word	0x00029cb1
   1ecac:	0001d299 	.word	0x0001d299

0001ecb0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1ecb0:	b580      	push	{r7, lr}
   1ecb2:	b084      	sub	sp, #16
   1ecb4:	af00      	add	r7, sp, #0
   1ecb6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ecb8:	4b08      	ldr	r3, [pc, #32]	; (1ecdc <SerialConsoleReadCharacter+0x2c>)
   1ecba:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1ecbc:	4b08      	ldr	r3, [pc, #32]	; (1ece0 <SerialConsoleReadCharacter+0x30>)
   1ecbe:	681b      	ldr	r3, [r3, #0]
   1ecc0:	687a      	ldr	r2, [r7, #4]
   1ecc2:	0011      	movs	r1, r2
   1ecc4:	0018      	movs	r0, r3
   1ecc6:	4b07      	ldr	r3, [pc, #28]	; (1ece4 <SerialConsoleReadCharacter+0x34>)
   1ecc8:	4798      	blx	r3
   1ecca:	0003      	movs	r3, r0
   1eccc:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1ecce:	4b06      	ldr	r3, [pc, #24]	; (1ece8 <SerialConsoleReadCharacter+0x38>)
   1ecd0:	4798      	blx	r3
    return a;
   1ecd2:	68fb      	ldr	r3, [r7, #12]
}
   1ecd4:	0018      	movs	r0, r3
   1ecd6:	46bd      	mov	sp, r7
   1ecd8:	b004      	add	sp, #16
   1ecda:	bd80      	pop	{r7, pc}
   1ecdc:	0001d281 	.word	0x0001d281
   1ece0:	20005714 	.word	0x20005714
   1ece4:	0001e969 	.word	0x0001e969
   1ece8:	0001d299 	.word	0x0001d299

0001ecec <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1ecec:	b580      	push	{r7, lr}
   1ecee:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1ecf0:	4b02      	ldr	r3, [pc, #8]	; (1ecfc <getLogLevel+0x10>)
   1ecf2:	781b      	ldrb	r3, [r3, #0]
}
   1ecf4:	0018      	movs	r0, r3
   1ecf6:	46bd      	mov	sp, r7
   1ecf8:	bd80      	pop	{r7, pc}
   1ecfa:	46c0      	nop			; (mov r8, r8)
   1ecfc:	2000421c 	.word	0x2000421c

0001ed00 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1ed00:	b40e      	push	{r1, r2, r3}
   1ed02:	b590      	push	{r4, r7, lr}
   1ed04:	b084      	sub	sp, #16
   1ed06:	af00      	add	r7, sp, #0
   1ed08:	0002      	movs	r2, r0
   1ed0a:	1dfb      	adds	r3, r7, #7
   1ed0c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1ed0e:	4b0e      	ldr	r3, [pc, #56]	; (1ed48 <LogMessage+0x48>)
   1ed10:	4798      	blx	r3
   1ed12:	0003      	movs	r3, r0
   1ed14:	001a      	movs	r2, r3
   1ed16:	1dfb      	adds	r3, r7, #7
   1ed18:	781b      	ldrb	r3, [r3, #0]
   1ed1a:	4293      	cmp	r3, r2
   1ed1c:	d30c      	bcc.n	1ed38 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1ed1e:	2320      	movs	r3, #32
   1ed20:	18fb      	adds	r3, r7, r3
   1ed22:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1ed24:	68fb      	ldr	r3, [r7, #12]
   1ed26:	69fa      	ldr	r2, [r7, #28]
   1ed28:	4808      	ldr	r0, [pc, #32]	; (1ed4c <LogMessage+0x4c>)
   1ed2a:	217f      	movs	r1, #127	; 0x7f
   1ed2c:	4c08      	ldr	r4, [pc, #32]	; (1ed50 <LogMessage+0x50>)
   1ed2e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1ed30:	4b06      	ldr	r3, [pc, #24]	; (1ed4c <LogMessage+0x4c>)
   1ed32:	0018      	movs	r0, r3
   1ed34:	4b07      	ldr	r3, [pc, #28]	; (1ed54 <LogMessage+0x54>)
   1ed36:	4798      	blx	r3
        va_end(ap);
    }
};
   1ed38:	46c0      	nop			; (mov r8, r8)
   1ed3a:	46bd      	mov	sp, r7
   1ed3c:	b004      	add	sp, #16
   1ed3e:	bc90      	pop	{r4, r7}
   1ed40:	bc08      	pop	{r3}
   1ed42:	b003      	add	sp, #12
   1ed44:	4718      	bx	r3
   1ed46:	46c0      	nop			; (mov r8, r8)
   1ed48:	0001eced 	.word	0x0001eced
   1ed4c:	20005660 	.word	0x20005660
   1ed50:	00035d71 	.word	0x00035d71
   1ed54:	0001ec15 	.word	0x0001ec15

0001ed58 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1ed58:	b40f      	push	{r0, r1, r2, r3}
   1ed5a:	b580      	push	{r7, lr}
   1ed5c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1ed5e:	68bb      	ldr	r3, [r7, #8]
   1ed60:	0019      	movs	r1, r3
   1ed62:	2001      	movs	r0, #1
   1ed64:	4b03      	ldr	r3, [pc, #12]	; (1ed74 <LogMessageDebug+0x1c>)
   1ed66:	4798      	blx	r3
};
   1ed68:	46c0      	nop			; (mov r8, r8)
   1ed6a:	46bd      	mov	sp, r7
   1ed6c:	bc80      	pop	{r7}
   1ed6e:	bc08      	pop	{r3}
   1ed70:	b004      	add	sp, #16
   1ed72:	4718      	bx	r3
   1ed74:	0001ed01 	.word	0x0001ed01

0001ed78 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1ed78:	b580      	push	{r7, lr}
   1ed7a:	b090      	sub	sp, #64	; 0x40
   1ed7c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1ed7e:	003b      	movs	r3, r7
   1ed80:	0018      	movs	r0, r3
   1ed82:	4b14      	ldr	r3, [pc, #80]	; (1edd4 <configure_usart+0x5c>)
   1ed84:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1ed86:	003b      	movs	r3, r7
   1ed88:	22e1      	movs	r2, #225	; 0xe1
   1ed8a:	0252      	lsls	r2, r2, #9
   1ed8c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1ed8e:	003b      	movs	r3, r7
   1ed90:	22c4      	movs	r2, #196	; 0xc4
   1ed92:	0392      	lsls	r2, r2, #14
   1ed94:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1ed96:	003b      	movs	r3, r7
   1ed98:	2201      	movs	r2, #1
   1ed9a:	4252      	negs	r2, r2
   1ed9c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1ed9e:	003b      	movs	r3, r7
   1eda0:	2201      	movs	r2, #1
   1eda2:	4252      	negs	r2, r2
   1eda4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1eda6:	003b      	movs	r3, r7
   1eda8:	4a0b      	ldr	r2, [pc, #44]	; (1edd8 <configure_usart+0x60>)
   1edaa:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1edac:	003b      	movs	r3, r7
   1edae:	4a0b      	ldr	r2, [pc, #44]	; (1eddc <configure_usart+0x64>)
   1edb0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1edb2:	46c0      	nop			; (mov r8, r8)
   1edb4:	003a      	movs	r2, r7
   1edb6:	490a      	ldr	r1, [pc, #40]	; (1ede0 <configure_usart+0x68>)
   1edb8:	4b0a      	ldr	r3, [pc, #40]	; (1ede4 <configure_usart+0x6c>)
   1edba:	0018      	movs	r0, r3
   1edbc:	4b0a      	ldr	r3, [pc, #40]	; (1ede8 <configure_usart+0x70>)
   1edbe:	4798      	blx	r3
   1edc0:	1e03      	subs	r3, r0, #0
   1edc2:	d1f7      	bne.n	1edb4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1edc4:	4b07      	ldr	r3, [pc, #28]	; (1ede4 <configure_usart+0x6c>)
   1edc6:	0018      	movs	r0, r3
   1edc8:	4b08      	ldr	r3, [pc, #32]	; (1edec <configure_usart+0x74>)
   1edca:	4798      	blx	r3
}
   1edcc:	46c0      	nop			; (mov r8, r8)
   1edce:	46bd      	mov	sp, r7
   1edd0:	b010      	add	sp, #64	; 0x40
   1edd2:	bd80      	pop	{r7, pc}
   1edd4:	0001ea65 	.word	0x0001ea65
   1edd8:	002a0003 	.word	0x002a0003
   1eddc:	002b0003 	.word	0x002b0003
   1ede0:	42001800 	.word	0x42001800
   1ede4:	200056e0 	.word	0x200056e0
   1ede8:	000298b5 	.word	0x000298b5
   1edec:	0001eb25 	.word	0x0001eb25

0001edf0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1edf0:	b580      	push	{r7, lr}
   1edf2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1edf4:	490c      	ldr	r1, [pc, #48]	; (1ee28 <configure_usart_callbacks+0x38>)
   1edf6:	4b0d      	ldr	r3, [pc, #52]	; (1ee2c <configure_usart_callbacks+0x3c>)
   1edf8:	2200      	movs	r2, #0
   1edfa:	0018      	movs	r0, r3
   1edfc:	4b0c      	ldr	r3, [pc, #48]	; (1ee30 <configure_usart_callbacks+0x40>)
   1edfe:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1ee00:	490c      	ldr	r1, [pc, #48]	; (1ee34 <configure_usart_callbacks+0x44>)
   1ee02:	4b0a      	ldr	r3, [pc, #40]	; (1ee2c <configure_usart_callbacks+0x3c>)
   1ee04:	2201      	movs	r2, #1
   1ee06:	0018      	movs	r0, r3
   1ee08:	4b09      	ldr	r3, [pc, #36]	; (1ee30 <configure_usart_callbacks+0x40>)
   1ee0a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ee0c:	4b07      	ldr	r3, [pc, #28]	; (1ee2c <configure_usart_callbacks+0x3c>)
   1ee0e:	2100      	movs	r1, #0
   1ee10:	0018      	movs	r0, r3
   1ee12:	4b09      	ldr	r3, [pc, #36]	; (1ee38 <configure_usart_callbacks+0x48>)
   1ee14:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1ee16:	4b05      	ldr	r3, [pc, #20]	; (1ee2c <configure_usart_callbacks+0x3c>)
   1ee18:	2101      	movs	r1, #1
   1ee1a:	0018      	movs	r0, r3
   1ee1c:	4b06      	ldr	r3, [pc, #24]	; (1ee38 <configure_usart_callbacks+0x48>)
   1ee1e:	4798      	blx	r3
}
   1ee20:	46c0      	nop			; (mov r8, r8)
   1ee22:	46bd      	mov	sp, r7
   1ee24:	bd80      	pop	{r7, pc}
   1ee26:	46c0      	nop			; (mov r8, r8)
   1ee28:	0001ee85 	.word	0x0001ee85
   1ee2c:	200056e0 	.word	0x200056e0
   1ee30:	00029c69 	.word	0x00029c69
   1ee34:	0001ee3d 	.word	0x0001ee3d
   1ee38:	0001eb6d 	.word	0x0001eb6d

0001ee3c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1ee3c:	b580      	push	{r7, lr}
   1ee3e:	b082      	sub	sp, #8
   1ee40:	af00      	add	r7, sp, #0
   1ee42:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1ee44:	4b09      	ldr	r3, [pc, #36]	; (1ee6c <usart_read_callback+0x30>)
   1ee46:	681a      	ldr	r2, [r3, #0]
   1ee48:	4b09      	ldr	r3, [pc, #36]	; (1ee70 <usart_read_callback+0x34>)
   1ee4a:	781b      	ldrb	r3, [r3, #0]
   1ee4c:	0019      	movs	r1, r3
   1ee4e:	0010      	movs	r0, r2
   1ee50:	4b08      	ldr	r3, [pc, #32]	; (1ee74 <usart_read_callback+0x38>)
   1ee52:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1ee54:	4906      	ldr	r1, [pc, #24]	; (1ee70 <usart_read_callback+0x34>)
   1ee56:	4b08      	ldr	r3, [pc, #32]	; (1ee78 <usart_read_callback+0x3c>)
   1ee58:	2201      	movs	r2, #1
   1ee5a:	0018      	movs	r0, r3
   1ee5c:	4b07      	ldr	r3, [pc, #28]	; (1ee7c <usart_read_callback+0x40>)
   1ee5e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1ee60:	4b07      	ldr	r3, [pc, #28]	; (1ee80 <usart_read_callback+0x44>)
   1ee62:	4798      	blx	r3
}
   1ee64:	46c0      	nop			; (mov r8, r8)
   1ee66:	46bd      	mov	sp, r7
   1ee68:	b002      	add	sp, #8
   1ee6a:	bd80      	pop	{r7, pc}
   1ee6c:	20005714 	.word	0x20005714
   1ee70:	20005718 	.word	0x20005718
   1ee74:	0001e935 	.word	0x0001e935
   1ee78:	200056e0 	.word	0x200056e0
   1ee7c:	00029cf9 	.word	0x00029cf9
   1ee80:	000143e1 	.word	0x000143e1

0001ee84 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1ee84:	b580      	push	{r7, lr}
   1ee86:	b082      	sub	sp, #8
   1ee88:	af00      	add	r7, sp, #0
   1ee8a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1ee8c:	4b09      	ldr	r3, [pc, #36]	; (1eeb4 <usart_write_callback+0x30>)
   1ee8e:	681b      	ldr	r3, [r3, #0]
   1ee90:	4a09      	ldr	r2, [pc, #36]	; (1eeb8 <usart_write_callback+0x34>)
   1ee92:	0011      	movs	r1, r2
   1ee94:	0018      	movs	r0, r3
   1ee96:	4b09      	ldr	r3, [pc, #36]	; (1eebc <usart_write_callback+0x38>)
   1ee98:	4798      	blx	r3
   1ee9a:	0003      	movs	r3, r0
   1ee9c:	3301      	adds	r3, #1
   1ee9e:	d005      	beq.n	1eeac <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1eea0:	4905      	ldr	r1, [pc, #20]	; (1eeb8 <usart_write_callback+0x34>)
   1eea2:	4b07      	ldr	r3, [pc, #28]	; (1eec0 <usart_write_callback+0x3c>)
   1eea4:	2201      	movs	r2, #1
   1eea6:	0018      	movs	r0, r3
   1eea8:	4b06      	ldr	r3, [pc, #24]	; (1eec4 <usart_write_callback+0x40>)
   1eeaa:	4798      	blx	r3
    }
}
   1eeac:	46c0      	nop			; (mov r8, r8)
   1eeae:	46bd      	mov	sp, r7
   1eeb0:	b002      	add	sp, #8
   1eeb2:	bd80      	pop	{r7, pc}
   1eeb4:	20005b20 	.word	0x20005b20
   1eeb8:	20005b1c 	.word	0x20005b1c
   1eebc:	0001e969 	.word	0x0001e969
   1eec0:	200056e0 	.word	0x200056e0
   1eec4:	00029cb1 	.word	0x00029cb1

0001eec8 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1eec8:	b590      	push	{r4, r7, lr}
   1eeca:	b087      	sub	sp, #28
   1eecc:	af00      	add	r7, sp, #0
   1eece:	60f8      	str	r0, [r7, #12]
   1eed0:	000c      	movs	r4, r1
   1eed2:	0010      	movs	r0, r2
   1eed4:	0019      	movs	r1, r3
   1eed6:	230a      	movs	r3, #10
   1eed8:	18fb      	adds	r3, r7, r3
   1eeda:	1c22      	adds	r2, r4, #0
   1eedc:	801a      	strh	r2, [r3, #0]
   1eede:	2308      	movs	r3, #8
   1eee0:	18fb      	adds	r3, r7, r3
   1eee2:	1c02      	adds	r2, r0, #0
   1eee4:	801a      	strh	r2, [r3, #0]
   1eee6:	1dfb      	adds	r3, r7, #7
   1eee8:	1c0a      	adds	r2, r1, #0
   1eeea:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1eeec:	230a      	movs	r3, #10
   1eeee:	18fb      	adds	r3, r7, r3
   1eef0:	881a      	ldrh	r2, [r3, #0]
   1eef2:	2308      	movs	r3, #8
   1eef4:	18fb      	adds	r3, r7, r3
   1eef6:	881b      	ldrh	r3, [r3, #0]
   1eef8:	1ad3      	subs	r3, r2, r3
   1eefa:	3307      	adds	r3, #7
   1eefc:	2b00      	cmp	r3, #0
   1eefe:	da00      	bge.n	1ef02 <SDMMC_UNSTUFF_BITS+0x3a>
   1ef00:	3307      	adds	r3, #7
   1ef02:	10db      	asrs	r3, r3, #3
   1ef04:	3b01      	subs	r3, #1
   1ef06:	68fa      	ldr	r2, [r7, #12]
   1ef08:	18d3      	adds	r3, r2, r3
   1ef0a:	781b      	ldrb	r3, [r3, #0]
   1ef0c:	0019      	movs	r1, r3
   1ef0e:	2308      	movs	r3, #8
   1ef10:	18fb      	adds	r3, r7, r3
   1ef12:	881b      	ldrh	r3, [r3, #0]
   1ef14:	2207      	movs	r2, #7
   1ef16:	4013      	ands	r3, r2
   1ef18:	4119      	asrs	r1, r3
   1ef1a:	000b      	movs	r3, r1
   1ef1c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1ef1e:	2308      	movs	r3, #8
   1ef20:	18fb      	adds	r3, r7, r3
   1ef22:	881b      	ldrh	r3, [r3, #0]
   1ef24:	2207      	movs	r2, #7
   1ef26:	401a      	ands	r2, r3
   1ef28:	1dfb      	adds	r3, r7, #7
   1ef2a:	781b      	ldrb	r3, [r3, #0]
   1ef2c:	18d3      	adds	r3, r2, r3
   1ef2e:	2b08      	cmp	r3, #8
   1ef30:	dd1c      	ble.n	1ef6c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1ef32:	230a      	movs	r3, #10
   1ef34:	18fb      	adds	r3, r7, r3
   1ef36:	881a      	ldrh	r2, [r3, #0]
   1ef38:	2308      	movs	r3, #8
   1ef3a:	18fb      	adds	r3, r7, r3
   1ef3c:	881b      	ldrh	r3, [r3, #0]
   1ef3e:	1ad3      	subs	r3, r2, r3
   1ef40:	3307      	adds	r3, #7
   1ef42:	2b00      	cmp	r3, #0
   1ef44:	da00      	bge.n	1ef48 <SDMMC_UNSTUFF_BITS+0x80>
   1ef46:	3307      	adds	r3, #7
   1ef48:	10db      	asrs	r3, r3, #3
   1ef4a:	3b02      	subs	r3, #2
   1ef4c:	68fa      	ldr	r2, [r7, #12]
   1ef4e:	18d3      	adds	r3, r2, r3
   1ef50:	781b      	ldrb	r3, [r3, #0]
   1ef52:	0019      	movs	r1, r3
   1ef54:	2308      	movs	r3, #8
   1ef56:	18fb      	adds	r3, r7, r3
   1ef58:	881b      	ldrh	r3, [r3, #0]
   1ef5a:	2207      	movs	r2, #7
   1ef5c:	4013      	ands	r3, r2
   1ef5e:	2208      	movs	r2, #8
   1ef60:	1ad3      	subs	r3, r2, r3
   1ef62:	4099      	lsls	r1, r3
   1ef64:	000b      	movs	r3, r1
   1ef66:	697a      	ldr	r2, [r7, #20]
   1ef68:	4313      	orrs	r3, r2
   1ef6a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ef6c:	2308      	movs	r3, #8
   1ef6e:	18fb      	adds	r3, r7, r3
   1ef70:	881b      	ldrh	r3, [r3, #0]
   1ef72:	2207      	movs	r2, #7
   1ef74:	401a      	ands	r2, r3
   1ef76:	1dfb      	adds	r3, r7, #7
   1ef78:	781b      	ldrb	r3, [r3, #0]
   1ef7a:	18d3      	adds	r3, r2, r3
   1ef7c:	2b10      	cmp	r3, #16
   1ef7e:	dd1c      	ble.n	1efba <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ef80:	230a      	movs	r3, #10
   1ef82:	18fb      	adds	r3, r7, r3
   1ef84:	881a      	ldrh	r2, [r3, #0]
   1ef86:	2308      	movs	r3, #8
   1ef88:	18fb      	adds	r3, r7, r3
   1ef8a:	881b      	ldrh	r3, [r3, #0]
   1ef8c:	1ad3      	subs	r3, r2, r3
   1ef8e:	3307      	adds	r3, #7
   1ef90:	2b00      	cmp	r3, #0
   1ef92:	da00      	bge.n	1ef96 <SDMMC_UNSTUFF_BITS+0xce>
   1ef94:	3307      	adds	r3, #7
   1ef96:	10db      	asrs	r3, r3, #3
   1ef98:	3b03      	subs	r3, #3
   1ef9a:	68fa      	ldr	r2, [r7, #12]
   1ef9c:	18d3      	adds	r3, r2, r3
   1ef9e:	781b      	ldrb	r3, [r3, #0]
   1efa0:	0019      	movs	r1, r3
   1efa2:	2308      	movs	r3, #8
   1efa4:	18fb      	adds	r3, r7, r3
   1efa6:	881b      	ldrh	r3, [r3, #0]
   1efa8:	2207      	movs	r2, #7
   1efaa:	4013      	ands	r3, r2
   1efac:	2210      	movs	r2, #16
   1efae:	1ad3      	subs	r3, r2, r3
   1efb0:	4099      	lsls	r1, r3
   1efb2:	000b      	movs	r3, r1
   1efb4:	697a      	ldr	r2, [r7, #20]
   1efb6:	4313      	orrs	r3, r2
   1efb8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1efba:	2308      	movs	r3, #8
   1efbc:	18fb      	adds	r3, r7, r3
   1efbe:	881b      	ldrh	r3, [r3, #0]
   1efc0:	2207      	movs	r2, #7
   1efc2:	401a      	ands	r2, r3
   1efc4:	1dfb      	adds	r3, r7, #7
   1efc6:	781b      	ldrb	r3, [r3, #0]
   1efc8:	18d3      	adds	r3, r2, r3
   1efca:	2b10      	cmp	r3, #16
   1efcc:	dd1c      	ble.n	1f008 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1efce:	230a      	movs	r3, #10
   1efd0:	18fb      	adds	r3, r7, r3
   1efd2:	881a      	ldrh	r2, [r3, #0]
   1efd4:	2308      	movs	r3, #8
   1efd6:	18fb      	adds	r3, r7, r3
   1efd8:	881b      	ldrh	r3, [r3, #0]
   1efda:	1ad3      	subs	r3, r2, r3
   1efdc:	3307      	adds	r3, #7
   1efde:	2b00      	cmp	r3, #0
   1efe0:	da00      	bge.n	1efe4 <SDMMC_UNSTUFF_BITS+0x11c>
   1efe2:	3307      	adds	r3, #7
   1efe4:	10db      	asrs	r3, r3, #3
   1efe6:	3b03      	subs	r3, #3
   1efe8:	68fa      	ldr	r2, [r7, #12]
   1efea:	18d3      	adds	r3, r2, r3
   1efec:	781b      	ldrb	r3, [r3, #0]
   1efee:	0019      	movs	r1, r3
   1eff0:	2308      	movs	r3, #8
   1eff2:	18fb      	adds	r3, r7, r3
   1eff4:	881b      	ldrh	r3, [r3, #0]
   1eff6:	2207      	movs	r2, #7
   1eff8:	4013      	ands	r3, r2
   1effa:	2210      	movs	r2, #16
   1effc:	1ad3      	subs	r3, r2, r3
   1effe:	4099      	lsls	r1, r3
   1f000:	000b      	movs	r3, r1
   1f002:	697a      	ldr	r2, [r7, #20]
   1f004:	4313      	orrs	r3, r2
   1f006:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1f008:	1dfb      	adds	r3, r7, #7
   1f00a:	781b      	ldrb	r3, [r3, #0]
   1f00c:	2201      	movs	r2, #1
   1f00e:	409a      	lsls	r2, r3
   1f010:	0013      	movs	r3, r2
   1f012:	1e5a      	subs	r2, r3, #1
   1f014:	697b      	ldr	r3, [r7, #20]
   1f016:	4013      	ands	r3, r2
   1f018:	617b      	str	r3, [r7, #20]
	return value;
   1f01a:	697b      	ldr	r3, [r7, #20]
}
   1f01c:	0018      	movs	r0, r3
   1f01e:	46bd      	mov	sp, r7
   1f020:	b007      	add	sp, #28
   1f022:	bd90      	pop	{r4, r7, pc}

0001f024 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1f024:	b580      	push	{r7, lr}
   1f026:	b082      	sub	sp, #8
   1f028:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1f02a:	4b23      	ldr	r3, [pc, #140]	; (1f0b8 <mmc_spi_op_cond+0x94>)
   1f02c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1f02e:	4b23      	ldr	r3, [pc, #140]	; (1f0bc <mmc_spi_op_cond+0x98>)
   1f030:	2100      	movs	r1, #0
   1f032:	0018      	movs	r0, r3
   1f034:	4b22      	ldr	r3, [pc, #136]	; (1f0c0 <mmc_spi_op_cond+0x9c>)
   1f036:	4798      	blx	r3
   1f038:	0003      	movs	r3, r0
   1f03a:	001a      	movs	r2, r3
   1f03c:	2301      	movs	r3, #1
   1f03e:	4053      	eors	r3, r2
   1f040:	b2db      	uxtb	r3, r3
   1f042:	2b00      	cmp	r3, #0
   1f044:	d001      	beq.n	1f04a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1f046:	2300      	movs	r3, #0
   1f048:	e031      	b.n	1f0ae <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1f04a:	4b1e      	ldr	r3, [pc, #120]	; (1f0c4 <mmc_spi_op_cond+0xa0>)
   1f04c:	4798      	blx	r3
   1f04e:	0003      	movs	r3, r0
   1f050:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1f052:	683b      	ldr	r3, [r7, #0]
   1f054:	2201      	movs	r2, #1
   1f056:	4013      	ands	r3, r2
   1f058:	d006      	beq.n	1f068 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1f05a:	687b      	ldr	r3, [r7, #4]
   1f05c:	1e5a      	subs	r2, r3, #1
   1f05e:	607a      	str	r2, [r7, #4]
   1f060:	2b00      	cmp	r3, #0
   1f062:	d1e4      	bne.n	1f02e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1f064:	2300      	movs	r3, #0
   1f066:	e022      	b.n	1f0ae <mmc_spi_op_cond+0x8a>
			break;
   1f068:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1f06a:	4b17      	ldr	r3, [pc, #92]	; (1f0c8 <mmc_spi_op_cond+0xa4>)
   1f06c:	2100      	movs	r1, #0
   1f06e:	0018      	movs	r0, r3
   1f070:	4b13      	ldr	r3, [pc, #76]	; (1f0c0 <mmc_spi_op_cond+0x9c>)
   1f072:	4798      	blx	r3
   1f074:	0003      	movs	r3, r0
   1f076:	001a      	movs	r2, r3
   1f078:	2301      	movs	r3, #1
   1f07a:	4053      	eors	r3, r2
   1f07c:	b2db      	uxtb	r3, r3
   1f07e:	2b00      	cmp	r3, #0
   1f080:	d001      	beq.n	1f086 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1f082:	2300      	movs	r3, #0
   1f084:	e013      	b.n	1f0ae <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1f086:	4b0f      	ldr	r3, [pc, #60]	; (1f0c4 <mmc_spi_op_cond+0xa0>)
   1f088:	4798      	blx	r3
   1f08a:	0002      	movs	r2, r0
   1f08c:	23c0      	movs	r3, #192	; 0xc0
   1f08e:	05db      	lsls	r3, r3, #23
   1f090:	401a      	ands	r2, r3
   1f092:	2380      	movs	r3, #128	; 0x80
   1f094:	05db      	lsls	r3, r3, #23
   1f096:	429a      	cmp	r2, r3
   1f098:	d108      	bne.n	1f0ac <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1f09a:	4b0c      	ldr	r3, [pc, #48]	; (1f0cc <mmc_spi_op_cond+0xa8>)
   1f09c:	681a      	ldr	r2, [r3, #0]
   1f09e:	4b0b      	ldr	r3, [pc, #44]	; (1f0cc <mmc_spi_op_cond+0xa8>)
   1f0a0:	681b      	ldr	r3, [r3, #0]
   1f0a2:	7adb      	ldrb	r3, [r3, #11]
   1f0a4:	2108      	movs	r1, #8
   1f0a6:	430b      	orrs	r3, r1
   1f0a8:	b2db      	uxtb	r3, r3
   1f0aa:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1f0ac:	2301      	movs	r3, #1
}
   1f0ae:	0018      	movs	r0, r3
   1f0b0:	46bd      	mov	sp, r7
   1f0b2:	b002      	add	sp, #8
   1f0b4:	bd80      	pop	{r7, pc}
   1f0b6:	46c0      	nop			; (mov r8, r8)
   1f0b8:	00001bee 	.word	0x00001bee
   1f0bc:	00001101 	.word	0x00001101
   1f0c0:	00020aa1 	.word	0x00020aa1
   1f0c4:	00020ce1 	.word	0x00020ce1
   1f0c8:	0000053a 	.word	0x0000053a
   1f0cc:	20004244 	.word	0x20004244

0001f0d0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1f0d0:	b580      	push	{r7, lr}
   1f0d2:	b086      	sub	sp, #24
   1f0d4:	af00      	add	r7, sp, #0
   1f0d6:	0002      	movs	r2, r0
   1f0d8:	1dfb      	adds	r3, r7, #7
   1f0da:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1f0dc:	4b2e      	ldr	r3, [pc, #184]	; (1f198 <sd_spi_op_cond+0xc8>)
   1f0de:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1f0e0:	4b2e      	ldr	r3, [pc, #184]	; (1f19c <sd_spi_op_cond+0xcc>)
   1f0e2:	2100      	movs	r1, #0
   1f0e4:	0018      	movs	r0, r3
   1f0e6:	4b2e      	ldr	r3, [pc, #184]	; (1f1a0 <sd_spi_op_cond+0xd0>)
   1f0e8:	4798      	blx	r3
   1f0ea:	0003      	movs	r3, r0
   1f0ec:	001a      	movs	r2, r3
   1f0ee:	2301      	movs	r3, #1
   1f0f0:	4053      	eors	r3, r2
   1f0f2:	b2db      	uxtb	r3, r3
   1f0f4:	2b00      	cmp	r3, #0
   1f0f6:	d001      	beq.n	1f0fc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1f0f8:	2300      	movs	r3, #0
   1f0fa:	e048      	b.n	1f18e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1f0fc:	2300      	movs	r3, #0
   1f0fe:	617b      	str	r3, [r7, #20]
		if (v2) {
   1f100:	1dfb      	adds	r3, r7, #7
   1f102:	781b      	ldrb	r3, [r3, #0]
   1f104:	2b00      	cmp	r3, #0
   1f106:	d004      	beq.n	1f112 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1f108:	697b      	ldr	r3, [r7, #20]
   1f10a:	2280      	movs	r2, #128	; 0x80
   1f10c:	05d2      	lsls	r2, r2, #23
   1f10e:	4313      	orrs	r3, r2
   1f110:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1f112:	697b      	ldr	r3, [r7, #20]
   1f114:	4a23      	ldr	r2, [pc, #140]	; (1f1a4 <sd_spi_op_cond+0xd4>)
   1f116:	0019      	movs	r1, r3
   1f118:	0010      	movs	r0, r2
   1f11a:	4b21      	ldr	r3, [pc, #132]	; (1f1a0 <sd_spi_op_cond+0xd0>)
   1f11c:	4798      	blx	r3
   1f11e:	0003      	movs	r3, r0
   1f120:	001a      	movs	r2, r3
   1f122:	2301      	movs	r3, #1
   1f124:	4053      	eors	r3, r2
   1f126:	b2db      	uxtb	r3, r3
   1f128:	2b00      	cmp	r3, #0
   1f12a:	d001      	beq.n	1f130 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1f12c:	2300      	movs	r3, #0
   1f12e:	e02e      	b.n	1f18e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1f130:	4b1d      	ldr	r3, [pc, #116]	; (1f1a8 <sd_spi_op_cond+0xd8>)
   1f132:	4798      	blx	r3
   1f134:	0003      	movs	r3, r0
   1f136:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1f138:	68fb      	ldr	r3, [r7, #12]
   1f13a:	2201      	movs	r2, #1
   1f13c:	4013      	ands	r3, r2
   1f13e:	d006      	beq.n	1f14e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1f140:	693b      	ldr	r3, [r7, #16]
   1f142:	1e5a      	subs	r2, r3, #1
   1f144:	613a      	str	r2, [r7, #16]
   1f146:	2b00      	cmp	r3, #0
   1f148:	d1ca      	bne.n	1f0e0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1f14a:	2300      	movs	r3, #0
   1f14c:	e01f      	b.n	1f18e <sd_spi_op_cond+0xbe>
			break;
   1f14e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1f150:	4b16      	ldr	r3, [pc, #88]	; (1f1ac <sd_spi_op_cond+0xdc>)
   1f152:	2100      	movs	r1, #0
   1f154:	0018      	movs	r0, r3
   1f156:	4b12      	ldr	r3, [pc, #72]	; (1f1a0 <sd_spi_op_cond+0xd0>)
   1f158:	4798      	blx	r3
   1f15a:	0003      	movs	r3, r0
   1f15c:	001a      	movs	r2, r3
   1f15e:	2301      	movs	r3, #1
   1f160:	4053      	eors	r3, r2
   1f162:	b2db      	uxtb	r3, r3
   1f164:	2b00      	cmp	r3, #0
   1f166:	d001      	beq.n	1f16c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1f168:	2300      	movs	r3, #0
   1f16a:	e010      	b.n	1f18e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1f16c:	4b0e      	ldr	r3, [pc, #56]	; (1f1a8 <sd_spi_op_cond+0xd8>)
   1f16e:	4798      	blx	r3
   1f170:	0002      	movs	r2, r0
   1f172:	2380      	movs	r3, #128	; 0x80
   1f174:	05db      	lsls	r3, r3, #23
   1f176:	4013      	ands	r3, r2
   1f178:	d008      	beq.n	1f18c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1f17a:	4b0d      	ldr	r3, [pc, #52]	; (1f1b0 <sd_spi_op_cond+0xe0>)
   1f17c:	681a      	ldr	r2, [r3, #0]
   1f17e:	4b0c      	ldr	r3, [pc, #48]	; (1f1b0 <sd_spi_op_cond+0xe0>)
   1f180:	681b      	ldr	r3, [r3, #0]
   1f182:	7adb      	ldrb	r3, [r3, #11]
   1f184:	2108      	movs	r1, #8
   1f186:	430b      	orrs	r3, r1
   1f188:	b2db      	uxtb	r3, r3
   1f18a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1f18c:	2301      	movs	r3, #1
}
   1f18e:	0018      	movs	r0, r3
   1f190:	46bd      	mov	sp, r7
   1f192:	b006      	add	sp, #24
   1f194:	bd80      	pop	{r7, pc}
   1f196:	46c0      	nop			; (mov r8, r8)
   1f198:	00001bee 	.word	0x00001bee
   1f19c:	00001137 	.word	0x00001137
   1f1a0:	00020aa1 	.word	0x00020aa1
   1f1a4:	00001129 	.word	0x00001129
   1f1a8:	00020ce1 	.word	0x00020ce1
   1f1ac:	0000053a 	.word	0x0000053a
   1f1b0:	20004244 	.word	0x20004244

0001f1b4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1f1b4:	b580      	push	{r7, lr}
   1f1b6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1f1b8:	2301      	movs	r3, #1
}
   1f1ba:	0018      	movs	r0, r3
   1f1bc:	46bd      	mov	sp, r7
   1f1be:	bd80      	pop	{r7, pc}

0001f1c0 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1f1c0:	b580      	push	{r7, lr}
   1f1c2:	b084      	sub	sp, #16
   1f1c4:	af00      	add	r7, sp, #0
   1f1c6:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1f1c8:	687b      	ldr	r3, [r7, #4]
   1f1ca:	2200      	movs	r2, #0
   1f1cc:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1f1ce:	23d5      	movs	r3, #213	; 0xd5
   1f1d0:	005b      	lsls	r3, r3, #1
   1f1d2:	4a14      	ldr	r2, [pc, #80]	; (1f224 <sd_cmd8+0x64>)
   1f1d4:	0019      	movs	r1, r3
   1f1d6:	0010      	movs	r0, r2
   1f1d8:	4b13      	ldr	r3, [pc, #76]	; (1f228 <sd_cmd8+0x68>)
   1f1da:	4798      	blx	r3
   1f1dc:	0003      	movs	r3, r0
   1f1de:	001a      	movs	r2, r3
   1f1e0:	2301      	movs	r3, #1
   1f1e2:	4053      	eors	r3, r2
   1f1e4:	b2db      	uxtb	r3, r3
   1f1e6:	2b00      	cmp	r3, #0
   1f1e8:	d001      	beq.n	1f1ee <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1f1ea:	2301      	movs	r3, #1
   1f1ec:	e015      	b.n	1f21a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1f1ee:	4b0f      	ldr	r3, [pc, #60]	; (1f22c <sd_cmd8+0x6c>)
   1f1f0:	4798      	blx	r3
   1f1f2:	0003      	movs	r3, r0
   1f1f4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1f1f6:	68fb      	ldr	r3, [r7, #12]
   1f1f8:	3301      	adds	r3, #1
   1f1fa:	d101      	bne.n	1f200 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1f1fc:	2301      	movs	r3, #1
   1f1fe:	e00c      	b.n	1f21a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1f200:	68fb      	ldr	r3, [r7, #12]
   1f202:	051b      	lsls	r3, r3, #20
   1f204:	0d1a      	lsrs	r2, r3, #20
   1f206:	23d5      	movs	r3, #213	; 0xd5
   1f208:	005b      	lsls	r3, r3, #1
   1f20a:	429a      	cmp	r2, r3
   1f20c:	d001      	beq.n	1f212 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1f20e:	2300      	movs	r3, #0
   1f210:	e003      	b.n	1f21a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1f212:	687b      	ldr	r3, [r7, #4]
   1f214:	2201      	movs	r2, #1
   1f216:	701a      	strb	r2, [r3, #0]
	return true;
   1f218:	2301      	movs	r3, #1
}
   1f21a:	0018      	movs	r0, r3
   1f21c:	46bd      	mov	sp, r7
   1f21e:	b004      	add	sp, #16
   1f220:	bd80      	pop	{r7, pc}
   1f222:	46c0      	nop			; (mov r8, r8)
   1f224:	00005508 	.word	0x00005508
   1f228:	00020aa1 	.word	0x00020aa1
   1f22c:	00020ce1 	.word	0x00020ce1

0001f230 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1f230:	b590      	push	{r4, r7, lr}
   1f232:	b089      	sub	sp, #36	; 0x24
   1f234:	af02      	add	r7, sp, #8
   1f236:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1f238:	2380      	movs	r3, #128	; 0x80
   1f23a:	009a      	lsls	r2, r3, #2
   1f23c:	4841      	ldr	r0, [pc, #260]	; (1f344 <mmc_cmd8+0x114>)
   1f23e:	2300      	movs	r3, #0
   1f240:	9300      	str	r3, [sp, #0]
   1f242:	2301      	movs	r3, #1
   1f244:	2100      	movs	r1, #0
   1f246:	4c40      	ldr	r4, [pc, #256]	; (1f348 <mmc_cmd8+0x118>)
   1f248:	47a0      	blx	r4
   1f24a:	0003      	movs	r3, r0
   1f24c:	001a      	movs	r2, r3
   1f24e:	2301      	movs	r3, #1
   1f250:	4053      	eors	r3, r2
   1f252:	b2db      	uxtb	r3, r3
   1f254:	2b00      	cmp	r3, #0
   1f256:	d001      	beq.n	1f25c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1f258:	2300      	movs	r3, #0
   1f25a:	e06e      	b.n	1f33a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f25c:	2316      	movs	r3, #22
   1f25e:	18fb      	adds	r3, r7, r3
   1f260:	2200      	movs	r2, #0
   1f262:	801a      	strh	r2, [r3, #0]
   1f264:	e014      	b.n	1f290 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1f266:	2310      	movs	r3, #16
   1f268:	18fb      	adds	r3, r7, r3
   1f26a:	0018      	movs	r0, r3
   1f26c:	4b37      	ldr	r3, [pc, #220]	; (1f34c <mmc_cmd8+0x11c>)
   1f26e:	4798      	blx	r3
   1f270:	0003      	movs	r3, r0
   1f272:	001a      	movs	r2, r3
   1f274:	2301      	movs	r3, #1
   1f276:	4053      	eors	r3, r2
   1f278:	b2db      	uxtb	r3, r3
   1f27a:	2b00      	cmp	r3, #0
   1f27c:	d001      	beq.n	1f282 <mmc_cmd8+0x52>
			return false;
   1f27e:	2300      	movs	r3, #0
   1f280:	e05b      	b.n	1f33a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f282:	2316      	movs	r3, #22
   1f284:	18fb      	adds	r3, r7, r3
   1f286:	881a      	ldrh	r2, [r3, #0]
   1f288:	2316      	movs	r3, #22
   1f28a:	18fb      	adds	r3, r7, r3
   1f28c:	3201      	adds	r2, #1
   1f28e:	801a      	strh	r2, [r3, #0]
   1f290:	2316      	movs	r3, #22
   1f292:	18fb      	adds	r3, r7, r3
   1f294:	881b      	ldrh	r3, [r3, #0]
   1f296:	2b31      	cmp	r3, #49	; 0x31
   1f298:	d9e5      	bls.n	1f266 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1f29a:	693b      	ldr	r3, [r7, #16]
   1f29c:	b2db      	uxtb	r3, r3
   1f29e:	2202      	movs	r2, #2
   1f2a0:	4013      	ands	r3, r2
   1f2a2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1f2a4:	687b      	ldr	r3, [r7, #4]
   1f2a6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1f2a8:	4b29      	ldr	r3, [pc, #164]	; (1f350 <mmc_cmd8+0x120>)
   1f2aa:	681b      	ldr	r3, [r3, #0]
   1f2ac:	330e      	adds	r3, #14
   1f2ae:	0018      	movs	r0, r3
   1f2b0:	230c      	movs	r3, #12
   1f2b2:	223e      	movs	r2, #62	; 0x3e
   1f2b4:	2180      	movs	r1, #128	; 0x80
   1f2b6:	4c27      	ldr	r4, [pc, #156]	; (1f354 <mmc_cmd8+0x124>)
   1f2b8:	47a0      	blx	r4
   1f2ba:	0002      	movs	r2, r0
   1f2bc:	4b26      	ldr	r3, [pc, #152]	; (1f358 <mmc_cmd8+0x128>)
   1f2be:	429a      	cmp	r2, r3
   1f2c0:	d135      	bne.n	1f32e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f2c2:	e014      	b.n	1f2ee <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1f2c4:	230c      	movs	r3, #12
   1f2c6:	18fb      	adds	r3, r7, r3
   1f2c8:	0018      	movs	r0, r3
   1f2ca:	4b20      	ldr	r3, [pc, #128]	; (1f34c <mmc_cmd8+0x11c>)
   1f2cc:	4798      	blx	r3
   1f2ce:	0003      	movs	r3, r0
   1f2d0:	001a      	movs	r2, r3
   1f2d2:	2301      	movs	r3, #1
   1f2d4:	4053      	eors	r3, r2
   1f2d6:	b2db      	uxtb	r3, r3
   1f2d8:	2b00      	cmp	r3, #0
   1f2da:	d001      	beq.n	1f2e0 <mmc_cmd8+0xb0>
				return false;
   1f2dc:	2300      	movs	r3, #0
   1f2de:	e02c      	b.n	1f33a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f2e0:	2316      	movs	r3, #22
   1f2e2:	18fb      	adds	r3, r7, r3
   1f2e4:	881a      	ldrh	r2, [r3, #0]
   1f2e6:	2316      	movs	r3, #22
   1f2e8:	18fb      	adds	r3, r7, r3
   1f2ea:	3201      	adds	r2, #1
   1f2ec:	801a      	strh	r2, [r3, #0]
   1f2ee:	2316      	movs	r3, #22
   1f2f0:	18fb      	adds	r3, r7, r3
   1f2f2:	881b      	ldrh	r3, [r3, #0]
   1f2f4:	2b35      	cmp	r3, #53	; 0x35
   1f2f6:	d9e5      	bls.n	1f2c4 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1f2f8:	4b15      	ldr	r3, [pc, #84]	; (1f350 <mmc_cmd8+0x120>)
   1f2fa:	681b      	ldr	r3, [r3, #0]
   1f2fc:	68fa      	ldr	r2, [r7, #12]
   1f2fe:	0852      	lsrs	r2, r2, #1
   1f300:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f302:	e014      	b.n	1f32e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1f304:	230c      	movs	r3, #12
   1f306:	18fb      	adds	r3, r7, r3
   1f308:	0018      	movs	r0, r3
   1f30a:	4b10      	ldr	r3, [pc, #64]	; (1f34c <mmc_cmd8+0x11c>)
   1f30c:	4798      	blx	r3
   1f30e:	0003      	movs	r3, r0
   1f310:	001a      	movs	r2, r3
   1f312:	2301      	movs	r3, #1
   1f314:	4053      	eors	r3, r2
   1f316:	b2db      	uxtb	r3, r3
   1f318:	2b00      	cmp	r3, #0
   1f31a:	d001      	beq.n	1f320 <mmc_cmd8+0xf0>
			return false;
   1f31c:	2300      	movs	r3, #0
   1f31e:	e00c      	b.n	1f33a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f320:	2316      	movs	r3, #22
   1f322:	18fb      	adds	r3, r7, r3
   1f324:	881a      	ldrh	r2, [r3, #0]
   1f326:	2316      	movs	r3, #22
   1f328:	18fb      	adds	r3, r7, r3
   1f32a:	3201      	adds	r2, #1
   1f32c:	801a      	strh	r2, [r3, #0]
   1f32e:	2316      	movs	r3, #22
   1f330:	18fb      	adds	r3, r7, r3
   1f332:	881b      	ldrh	r3, [r3, #0]
   1f334:	2b7f      	cmp	r3, #127	; 0x7f
   1f336:	d9e5      	bls.n	1f304 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1f338:	2301      	movs	r3, #1
}
   1f33a:	0018      	movs	r0, r3
   1f33c:	46bd      	mov	sp, r7
   1f33e:	b007      	add	sp, #28
   1f340:	bd90      	pop	{r4, r7, pc}
   1f342:	46c0      	nop			; (mov r8, r8)
   1f344:	00081108 	.word	0x00081108
   1f348:	00020ac9 	.word	0x00020ac9
   1f34c:	00020cf5 	.word	0x00020cf5
   1f350:	20004244 	.word	0x20004244
   1f354:	0001eec9 	.word	0x0001eec9
   1f358:	00000fff 	.word	0x00000fff

0001f35c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1f35c:	b590      	push	{r4, r7, lr}
   1f35e:	b083      	sub	sp, #12
   1f360:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1f362:	4b15      	ldr	r3, [pc, #84]	; (1f3b8 <sd_mmc_cmd9_spi+0x5c>)
   1f364:	681b      	ldr	r3, [r3, #0]
   1f366:	891b      	ldrh	r3, [r3, #8]
   1f368:	0419      	lsls	r1, r3, #16
   1f36a:	4814      	ldr	r0, [pc, #80]	; (1f3bc <sd_mmc_cmd9_spi+0x60>)
   1f36c:	2301      	movs	r3, #1
   1f36e:	9300      	str	r3, [sp, #0]
   1f370:	2301      	movs	r3, #1
   1f372:	2210      	movs	r2, #16
   1f374:	4c12      	ldr	r4, [pc, #72]	; (1f3c0 <sd_mmc_cmd9_spi+0x64>)
   1f376:	47a0      	blx	r4
   1f378:	0003      	movs	r3, r0
   1f37a:	001a      	movs	r2, r3
   1f37c:	2301      	movs	r3, #1
   1f37e:	4053      	eors	r3, r2
   1f380:	b2db      	uxtb	r3, r3
   1f382:	2b00      	cmp	r3, #0
   1f384:	d001      	beq.n	1f38a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1f386:	2300      	movs	r3, #0
   1f388:	e012      	b.n	1f3b0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1f38a:	4b0b      	ldr	r3, [pc, #44]	; (1f3b8 <sd_mmc_cmd9_spi+0x5c>)
   1f38c:	681b      	ldr	r3, [r3, #0]
   1f38e:	330e      	adds	r3, #14
   1f390:	2101      	movs	r1, #1
   1f392:	0018      	movs	r0, r3
   1f394:	4b0b      	ldr	r3, [pc, #44]	; (1f3c4 <sd_mmc_cmd9_spi+0x68>)
   1f396:	4798      	blx	r3
   1f398:	0003      	movs	r3, r0
   1f39a:	001a      	movs	r2, r3
   1f39c:	2301      	movs	r3, #1
   1f39e:	4053      	eors	r3, r2
   1f3a0:	b2db      	uxtb	r3, r3
   1f3a2:	2b00      	cmp	r3, #0
   1f3a4:	d001      	beq.n	1f3aa <sd_mmc_cmd9_spi+0x4e>
		return false;
   1f3a6:	2300      	movs	r3, #0
   1f3a8:	e002      	b.n	1f3b0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1f3aa:	4b07      	ldr	r3, [pc, #28]	; (1f3c8 <sd_mmc_cmd9_spi+0x6c>)
   1f3ac:	4798      	blx	r3
   1f3ae:	0003      	movs	r3, r0
}
   1f3b0:	0018      	movs	r0, r3
   1f3b2:	46bd      	mov	sp, r7
   1f3b4:	b001      	add	sp, #4
   1f3b6:	bd90      	pop	{r4, r7, pc}
   1f3b8:	20004244 	.word	0x20004244
   1f3bc:	00081109 	.word	0x00081109
   1f3c0:	00020ac9 	.word	0x00020ac9
   1f3c4:	00020d99 	.word	0x00020d99
   1f3c8:	00020e3d 	.word	0x00020e3d

0001f3cc <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1f3cc:	b5b0      	push	{r4, r5, r7, lr}
   1f3ce:	b084      	sub	sp, #16
   1f3d0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1f3d2:	4b45      	ldr	r3, [pc, #276]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f3d4:	681b      	ldr	r3, [r3, #0]
   1f3d6:	330e      	adds	r3, #14
   1f3d8:	0018      	movs	r0, r3
   1f3da:	2304      	movs	r3, #4
   1f3dc:	227a      	movs	r2, #122	; 0x7a
   1f3de:	2180      	movs	r1, #128	; 0x80
   1f3e0:	4c42      	ldr	r4, [pc, #264]	; (1f4ec <mmc_decode_csd+0x120>)
   1f3e2:	47a0      	blx	r4
   1f3e4:	0003      	movs	r3, r0
   1f3e6:	2b02      	cmp	r3, #2
   1f3e8:	d011      	beq.n	1f40e <mmc_decode_csd+0x42>
   1f3ea:	d802      	bhi.n	1f3f2 <mmc_decode_csd+0x26>
   1f3ec:	2b01      	cmp	r3, #1
   1f3ee:	d009      	beq.n	1f404 <mmc_decode_csd+0x38>
   1f3f0:	e003      	b.n	1f3fa <mmc_decode_csd+0x2e>
   1f3f2:	2b03      	cmp	r3, #3
   1f3f4:	d010      	beq.n	1f418 <mmc_decode_csd+0x4c>
   1f3f6:	2b04      	cmp	r3, #4
   1f3f8:	d013      	beq.n	1f422 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f3fa:	4b3b      	ldr	r3, [pc, #236]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f3fc:	681b      	ldr	r3, [r3, #0]
   1f3fe:	2212      	movs	r2, #18
   1f400:	731a      	strb	r2, [r3, #12]
		break;
   1f402:	e013      	b.n	1f42c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f404:	4b38      	ldr	r3, [pc, #224]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f406:	681b      	ldr	r3, [r3, #0]
   1f408:	2214      	movs	r2, #20
   1f40a:	731a      	strb	r2, [r3, #12]
		break;
   1f40c:	e00e      	b.n	1f42c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f40e:	4b36      	ldr	r3, [pc, #216]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f410:	681b      	ldr	r3, [r3, #0]
   1f412:	2222      	movs	r2, #34	; 0x22
   1f414:	731a      	strb	r2, [r3, #12]
		break;
   1f416:	e009      	b.n	1f42c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f418:	4b33      	ldr	r3, [pc, #204]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f41a:	681b      	ldr	r3, [r3, #0]
   1f41c:	2230      	movs	r2, #48	; 0x30
   1f41e:	731a      	strb	r2, [r3, #12]
		break;
   1f420:	e004      	b.n	1f42c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f422:	4b31      	ldr	r3, [pc, #196]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f424:	681b      	ldr	r3, [r3, #0]
   1f426:	2240      	movs	r2, #64	; 0x40
   1f428:	731a      	strb	r2, [r3, #12]
		break;
   1f42a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f42c:	4b2e      	ldr	r3, [pc, #184]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f42e:	681b      	ldr	r3, [r3, #0]
   1f430:	330e      	adds	r3, #14
   1f432:	0018      	movs	r0, r3
   1f434:	2308      	movs	r3, #8
   1f436:	2260      	movs	r2, #96	; 0x60
   1f438:	2180      	movs	r1, #128	; 0x80
   1f43a:	4c2c      	ldr	r4, [pc, #176]	; (1f4ec <mmc_decode_csd+0x120>)
   1f43c:	47a0      	blx	r4
   1f43e:	0003      	movs	r3, r0
   1f440:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f442:	68fb      	ldr	r3, [r7, #12]
   1f444:	2207      	movs	r2, #7
   1f446:	401a      	ands	r2, r3
   1f448:	4b29      	ldr	r3, [pc, #164]	; (1f4f0 <mmc_decode_csd+0x124>)
   1f44a:	0092      	lsls	r2, r2, #2
   1f44c:	58d3      	ldr	r3, [r2, r3]
   1f44e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f450:	68fb      	ldr	r3, [r7, #12]
   1f452:	08db      	lsrs	r3, r3, #3
   1f454:	220f      	movs	r2, #15
   1f456:	401a      	ands	r2, r3
   1f458:	4b26      	ldr	r3, [pc, #152]	; (1f4f4 <mmc_decode_csd+0x128>)
   1f45a:	0092      	lsls	r2, r2, #2
   1f45c:	58d3      	ldr	r3, [r2, r3]
   1f45e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f460:	4b21      	ldr	r3, [pc, #132]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f462:	681b      	ldr	r3, [r3, #0]
   1f464:	68ba      	ldr	r2, [r7, #8]
   1f466:	6879      	ldr	r1, [r7, #4]
   1f468:	434a      	muls	r2, r1
   1f46a:	21fa      	movs	r1, #250	; 0xfa
   1f46c:	0089      	lsls	r1, r1, #2
   1f46e:	434a      	muls	r2, r1
   1f470:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f472:	4b1d      	ldr	r3, [pc, #116]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f474:	681b      	ldr	r3, [r3, #0]
   1f476:	330e      	adds	r3, #14
   1f478:	0018      	movs	r0, r3
   1f47a:	230c      	movs	r3, #12
   1f47c:	223e      	movs	r2, #62	; 0x3e
   1f47e:	2180      	movs	r1, #128	; 0x80
   1f480:	4c1a      	ldr	r4, [pc, #104]	; (1f4ec <mmc_decode_csd+0x120>)
   1f482:	47a0      	blx	r4
   1f484:	0002      	movs	r2, r0
   1f486:	4b1c      	ldr	r3, [pc, #112]	; (1f4f8 <mmc_decode_csd+0x12c>)
   1f488:	429a      	cmp	r2, r3
   1f48a:	d028      	beq.n	1f4de <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f48c:	4b16      	ldr	r3, [pc, #88]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f48e:	681b      	ldr	r3, [r3, #0]
   1f490:	330e      	adds	r3, #14
   1f492:	0018      	movs	r0, r3
   1f494:	230c      	movs	r3, #12
   1f496:	223e      	movs	r2, #62	; 0x3e
   1f498:	2180      	movs	r1, #128	; 0x80
   1f49a:	4c14      	ldr	r4, [pc, #80]	; (1f4ec <mmc_decode_csd+0x120>)
   1f49c:	47a0      	blx	r4
   1f49e:	0003      	movs	r3, r0
   1f4a0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f4a2:	4b11      	ldr	r3, [pc, #68]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f4a4:	681b      	ldr	r3, [r3, #0]
   1f4a6:	330e      	adds	r3, #14
   1f4a8:	0018      	movs	r0, r3
   1f4aa:	2303      	movs	r3, #3
   1f4ac:	222f      	movs	r2, #47	; 0x2f
   1f4ae:	2180      	movs	r1, #128	; 0x80
   1f4b0:	4d0e      	ldr	r5, [pc, #56]	; (1f4ec <mmc_decode_csd+0x120>)
   1f4b2:	47a8      	blx	r5
   1f4b4:	0003      	movs	r3, r0
   1f4b6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f4b8:	409c      	lsls	r4, r3
   1f4ba:	0023      	movs	r3, r4
   1f4bc:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f4be:	4b0a      	ldr	r3, [pc, #40]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f4c0:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f4c2:	4b09      	ldr	r3, [pc, #36]	; (1f4e8 <mmc_decode_csd+0x11c>)
   1f4c4:	681b      	ldr	r3, [r3, #0]
   1f4c6:	330e      	adds	r3, #14
   1f4c8:	0018      	movs	r0, r3
   1f4ca:	2304      	movs	r3, #4
   1f4cc:	2250      	movs	r2, #80	; 0x50
   1f4ce:	2180      	movs	r1, #128	; 0x80
   1f4d0:	4d06      	ldr	r5, [pc, #24]	; (1f4ec <mmc_decode_csd+0x120>)
   1f4d2:	47a8      	blx	r5
   1f4d4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f4d6:	683b      	ldr	r3, [r7, #0]
   1f4d8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f4da:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f4dc:	6063      	str	r3, [r4, #4]
	}
}
   1f4de:	46c0      	nop			; (mov r8, r8)
   1f4e0:	46bd      	mov	sp, r7
   1f4e2:	b004      	add	sp, #16
   1f4e4:	bdb0      	pop	{r4, r5, r7, pc}
   1f4e6:	46c0      	nop			; (mov r8, r8)
   1f4e8:	20004244 	.word	0x20004244
   1f4ec:	0001eec9 	.word	0x0001eec9
   1f4f0:	00039290 	.word	0x00039290
   1f4f4:	000392ec 	.word	0x000392ec
   1f4f8:	00000fff 	.word	0x00000fff

0001f4fc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f4fc:	b5b0      	push	{r4, r5, r7, lr}
   1f4fe:	b084      	sub	sp, #16
   1f500:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f502:	4b35      	ldr	r3, [pc, #212]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f504:	681b      	ldr	r3, [r3, #0]
   1f506:	330e      	adds	r3, #14
   1f508:	0018      	movs	r0, r3
   1f50a:	2308      	movs	r3, #8
   1f50c:	2260      	movs	r2, #96	; 0x60
   1f50e:	2180      	movs	r1, #128	; 0x80
   1f510:	4c32      	ldr	r4, [pc, #200]	; (1f5dc <sd_decode_csd+0xe0>)
   1f512:	47a0      	blx	r4
   1f514:	0003      	movs	r3, r0
   1f516:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f518:	68fb      	ldr	r3, [r7, #12]
   1f51a:	2207      	movs	r2, #7
   1f51c:	401a      	ands	r2, r3
   1f51e:	4b30      	ldr	r3, [pc, #192]	; (1f5e0 <sd_decode_csd+0xe4>)
   1f520:	0092      	lsls	r2, r2, #2
   1f522:	58d3      	ldr	r3, [r2, r3]
   1f524:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f526:	68fb      	ldr	r3, [r7, #12]
   1f528:	08db      	lsrs	r3, r3, #3
   1f52a:	220f      	movs	r2, #15
   1f52c:	401a      	ands	r2, r3
   1f52e:	4b2d      	ldr	r3, [pc, #180]	; (1f5e4 <sd_decode_csd+0xe8>)
   1f530:	0092      	lsls	r2, r2, #2
   1f532:	58d3      	ldr	r3, [r2, r3]
   1f534:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f536:	4b28      	ldr	r3, [pc, #160]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f538:	681b      	ldr	r3, [r3, #0]
   1f53a:	68ba      	ldr	r2, [r7, #8]
   1f53c:	6879      	ldr	r1, [r7, #4]
   1f53e:	434a      	muls	r2, r1
   1f540:	21fa      	movs	r1, #250	; 0xfa
   1f542:	0089      	lsls	r1, r1, #2
   1f544:	434a      	muls	r2, r1
   1f546:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f548:	4b23      	ldr	r3, [pc, #140]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f54a:	681b      	ldr	r3, [r3, #0]
   1f54c:	330e      	adds	r3, #14
   1f54e:	0018      	movs	r0, r3
   1f550:	2302      	movs	r3, #2
   1f552:	227e      	movs	r2, #126	; 0x7e
   1f554:	2180      	movs	r1, #128	; 0x80
   1f556:	4c21      	ldr	r4, [pc, #132]	; (1f5dc <sd_decode_csd+0xe0>)
   1f558:	47a0      	blx	r4
   1f55a:	1e03      	subs	r3, r0, #0
   1f55c:	d00f      	beq.n	1f57e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f55e:	4b1e      	ldr	r3, [pc, #120]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f560:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f562:	4b1d      	ldr	r3, [pc, #116]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f564:	681b      	ldr	r3, [r3, #0]
   1f566:	330e      	adds	r3, #14
   1f568:	0018      	movs	r0, r3
   1f56a:	2316      	movs	r3, #22
   1f56c:	2230      	movs	r2, #48	; 0x30
   1f56e:	2180      	movs	r1, #128	; 0x80
   1f570:	4d1a      	ldr	r5, [pc, #104]	; (1f5dc <sd_decode_csd+0xe0>)
   1f572:	47a8      	blx	r5
   1f574:	0003      	movs	r3, r0
				* 512;
   1f576:	3301      	adds	r3, #1
   1f578:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f57a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f57c:	e028      	b.n	1f5d0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f57e:	4b16      	ldr	r3, [pc, #88]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f580:	681b      	ldr	r3, [r3, #0]
   1f582:	330e      	adds	r3, #14
   1f584:	0018      	movs	r0, r3
   1f586:	230c      	movs	r3, #12
   1f588:	223e      	movs	r2, #62	; 0x3e
   1f58a:	2180      	movs	r1, #128	; 0x80
   1f58c:	4c13      	ldr	r4, [pc, #76]	; (1f5dc <sd_decode_csd+0xe0>)
   1f58e:	47a0      	blx	r4
   1f590:	0003      	movs	r3, r0
   1f592:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f594:	4b10      	ldr	r3, [pc, #64]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f596:	681b      	ldr	r3, [r3, #0]
   1f598:	330e      	adds	r3, #14
   1f59a:	0018      	movs	r0, r3
   1f59c:	2303      	movs	r3, #3
   1f59e:	222f      	movs	r2, #47	; 0x2f
   1f5a0:	2180      	movs	r1, #128	; 0x80
   1f5a2:	4d0e      	ldr	r5, [pc, #56]	; (1f5dc <sd_decode_csd+0xe0>)
   1f5a4:	47a8      	blx	r5
   1f5a6:	0003      	movs	r3, r0
   1f5a8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f5aa:	409c      	lsls	r4, r3
   1f5ac:	0023      	movs	r3, r4
   1f5ae:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f5b0:	4b09      	ldr	r3, [pc, #36]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f5b2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f5b4:	4b08      	ldr	r3, [pc, #32]	; (1f5d8 <sd_decode_csd+0xdc>)
   1f5b6:	681b      	ldr	r3, [r3, #0]
   1f5b8:	330e      	adds	r3, #14
   1f5ba:	0018      	movs	r0, r3
   1f5bc:	2304      	movs	r3, #4
   1f5be:	2250      	movs	r2, #80	; 0x50
   1f5c0:	2180      	movs	r1, #128	; 0x80
   1f5c2:	4d06      	ldr	r5, [pc, #24]	; (1f5dc <sd_decode_csd+0xe0>)
   1f5c4:	47a8      	blx	r5
   1f5c6:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f5c8:	683b      	ldr	r3, [r7, #0]
   1f5ca:	4093      	lsls	r3, r2
				/ 1024;
   1f5cc:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f5ce:	6063      	str	r3, [r4, #4]
}
   1f5d0:	46c0      	nop			; (mov r8, r8)
   1f5d2:	46bd      	mov	sp, r7
   1f5d4:	b004      	add	sp, #16
   1f5d6:	bdb0      	pop	{r4, r5, r7, pc}
   1f5d8:	20004244 	.word	0x20004244
   1f5dc:	0001eec9 	.word	0x0001eec9
   1f5e0:	00039290 	.word	0x00039290
   1f5e4:	000392ac 	.word	0x000392ac

0001f5e8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f5e8:	b580      	push	{r7, lr}
   1f5ea:	b082      	sub	sp, #8
   1f5ec:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f5ee:	4b11      	ldr	r3, [pc, #68]	; (1f634 <sd_mmc_cmd13+0x4c>)
   1f5f0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f5f2:	4b11      	ldr	r3, [pc, #68]	; (1f638 <sd_mmc_cmd13+0x50>)
   1f5f4:	2100      	movs	r1, #0
   1f5f6:	0018      	movs	r0, r3
   1f5f8:	4b10      	ldr	r3, [pc, #64]	; (1f63c <sd_mmc_cmd13+0x54>)
   1f5fa:	4798      	blx	r3
   1f5fc:	0003      	movs	r3, r0
   1f5fe:	001a      	movs	r2, r3
   1f600:	2301      	movs	r3, #1
   1f602:	4053      	eors	r3, r2
   1f604:	b2db      	uxtb	r3, r3
   1f606:	2b00      	cmp	r3, #0
   1f608:	d001      	beq.n	1f60e <sd_mmc_cmd13+0x26>
				return false;
   1f60a:	2300      	movs	r3, #0
   1f60c:	e00e      	b.n	1f62c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f60e:	4b0c      	ldr	r3, [pc, #48]	; (1f640 <sd_mmc_cmd13+0x58>)
   1f610:	4798      	blx	r3
   1f612:	0002      	movs	r2, r0
   1f614:	23ff      	movs	r3, #255	; 0xff
   1f616:	4013      	ands	r3, r2
   1f618:	d006      	beq.n	1f628 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f61a:	687b      	ldr	r3, [r7, #4]
   1f61c:	1e5a      	subs	r2, r3, #1
   1f61e:	607a      	str	r2, [r7, #4]
   1f620:	2b00      	cmp	r3, #0
   1f622:	d1e6      	bne.n	1f5f2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f624:	2300      	movs	r3, #0
   1f626:	e001      	b.n	1f62c <sd_mmc_cmd13+0x44>
				break;
   1f628:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f62a:	2301      	movs	r3, #1
}
   1f62c:	0018      	movs	r0, r3
   1f62e:	46bd      	mov	sp, r7
   1f630:	b002      	add	sp, #8
   1f632:	bd80      	pop	{r7, pc}
   1f634:	00030d40 	.word	0x00030d40
   1f638:	00001b0d 	.word	0x00001b0d
   1f63c:	00020aa1 	.word	0x00020aa1
   1f640:	00020ce1 	.word	0x00020ce1

0001f644 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f644:	b590      	push	{r4, r7, lr}
   1f646:	b085      	sub	sp, #20
   1f648:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f64a:	4b38      	ldr	r3, [pc, #224]	; (1f72c <sd_acmd51+0xe8>)
   1f64c:	681b      	ldr	r3, [r3, #0]
   1f64e:	891b      	ldrh	r3, [r3, #8]
   1f650:	041b      	lsls	r3, r3, #16
   1f652:	4a37      	ldr	r2, [pc, #220]	; (1f730 <sd_acmd51+0xec>)
   1f654:	0019      	movs	r1, r3
   1f656:	0010      	movs	r0, r2
   1f658:	4b36      	ldr	r3, [pc, #216]	; (1f734 <sd_acmd51+0xf0>)
   1f65a:	4798      	blx	r3
   1f65c:	0003      	movs	r3, r0
   1f65e:	001a      	movs	r2, r3
   1f660:	2301      	movs	r3, #1
   1f662:	4053      	eors	r3, r2
   1f664:	b2db      	uxtb	r3, r3
   1f666:	2b00      	cmp	r3, #0
   1f668:	d001      	beq.n	1f66e <sd_acmd51+0x2a>
		return false;
   1f66a:	2300      	movs	r3, #0
   1f66c:	e059      	b.n	1f722 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f66e:	4832      	ldr	r0, [pc, #200]	; (1f738 <sd_acmd51+0xf4>)
   1f670:	2301      	movs	r3, #1
   1f672:	9300      	str	r3, [sp, #0]
   1f674:	2301      	movs	r3, #1
   1f676:	2208      	movs	r2, #8
   1f678:	2100      	movs	r1, #0
   1f67a:	4c30      	ldr	r4, [pc, #192]	; (1f73c <sd_acmd51+0xf8>)
   1f67c:	47a0      	blx	r4
   1f67e:	0003      	movs	r3, r0
   1f680:	001a      	movs	r2, r3
   1f682:	2301      	movs	r3, #1
   1f684:	4053      	eors	r3, r2
   1f686:	b2db      	uxtb	r3, r3
   1f688:	2b00      	cmp	r3, #0
   1f68a:	d001      	beq.n	1f690 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f68c:	2300      	movs	r3, #0
   1f68e:	e048      	b.n	1f722 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f690:	003b      	movs	r3, r7
   1f692:	2101      	movs	r1, #1
   1f694:	0018      	movs	r0, r3
   1f696:	4b2a      	ldr	r3, [pc, #168]	; (1f740 <sd_acmd51+0xfc>)
   1f698:	4798      	blx	r3
   1f69a:	0003      	movs	r3, r0
   1f69c:	001a      	movs	r2, r3
   1f69e:	2301      	movs	r3, #1
   1f6a0:	4053      	eors	r3, r2
   1f6a2:	b2db      	uxtb	r3, r3
   1f6a4:	2b00      	cmp	r3, #0
   1f6a6:	d001      	beq.n	1f6ac <sd_acmd51+0x68>
		return false;
   1f6a8:	2300      	movs	r3, #0
   1f6aa:	e03a      	b.n	1f722 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f6ac:	4b25      	ldr	r3, [pc, #148]	; (1f744 <sd_acmd51+0x100>)
   1f6ae:	4798      	blx	r3
   1f6b0:	0003      	movs	r3, r0
   1f6b2:	001a      	movs	r2, r3
   1f6b4:	2301      	movs	r3, #1
   1f6b6:	4053      	eors	r3, r2
   1f6b8:	b2db      	uxtb	r3, r3
   1f6ba:	2b00      	cmp	r3, #0
   1f6bc:	d001      	beq.n	1f6c2 <sd_acmd51+0x7e>
		return false;
   1f6be:	2300      	movs	r3, #0
   1f6c0:	e02f      	b.n	1f722 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f6c2:	0038      	movs	r0, r7
   1f6c4:	2304      	movs	r3, #4
   1f6c6:	2238      	movs	r2, #56	; 0x38
   1f6c8:	2140      	movs	r1, #64	; 0x40
   1f6ca:	4c1f      	ldr	r4, [pc, #124]	; (1f748 <sd_acmd51+0x104>)
   1f6cc:	47a0      	blx	r4
   1f6ce:	0003      	movs	r3, r0
   1f6d0:	2b01      	cmp	r3, #1
   1f6d2:	d008      	beq.n	1f6e6 <sd_acmd51+0xa2>
   1f6d4:	d302      	bcc.n	1f6dc <sd_acmd51+0x98>
   1f6d6:	2b02      	cmp	r3, #2
   1f6d8:	d00a      	beq.n	1f6f0 <sd_acmd51+0xac>
   1f6da:	e01c      	b.n	1f716 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f6dc:	4b13      	ldr	r3, [pc, #76]	; (1f72c <sd_acmd51+0xe8>)
   1f6de:	681b      	ldr	r3, [r3, #0]
   1f6e0:	2210      	movs	r2, #16
   1f6e2:	731a      	strb	r2, [r3, #12]
		break;
   1f6e4:	e01c      	b.n	1f720 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f6e6:	4b11      	ldr	r3, [pc, #68]	; (1f72c <sd_acmd51+0xe8>)
   1f6e8:	681b      	ldr	r3, [r3, #0]
   1f6ea:	221a      	movs	r2, #26
   1f6ec:	731a      	strb	r2, [r3, #12]
		break;
   1f6ee:	e017      	b.n	1f720 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f6f0:	0038      	movs	r0, r7
   1f6f2:	2301      	movs	r3, #1
   1f6f4:	222f      	movs	r2, #47	; 0x2f
   1f6f6:	2140      	movs	r1, #64	; 0x40
   1f6f8:	4c13      	ldr	r4, [pc, #76]	; (1f748 <sd_acmd51+0x104>)
   1f6fa:	47a0      	blx	r4
   1f6fc:	0003      	movs	r3, r0
   1f6fe:	2b01      	cmp	r3, #1
   1f700:	d104      	bne.n	1f70c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f702:	4b0a      	ldr	r3, [pc, #40]	; (1f72c <sd_acmd51+0xe8>)
   1f704:	681b      	ldr	r3, [r3, #0]
   1f706:	2230      	movs	r2, #48	; 0x30
   1f708:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f70a:	e009      	b.n	1f720 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f70c:	4b07      	ldr	r3, [pc, #28]	; (1f72c <sd_acmd51+0xe8>)
   1f70e:	681b      	ldr	r3, [r3, #0]
   1f710:	2220      	movs	r2, #32
   1f712:	731a      	strb	r2, [r3, #12]
		break;
   1f714:	e004      	b.n	1f720 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f716:	4b05      	ldr	r3, [pc, #20]	; (1f72c <sd_acmd51+0xe8>)
   1f718:	681b      	ldr	r3, [r3, #0]
   1f71a:	2210      	movs	r2, #16
   1f71c:	731a      	strb	r2, [r3, #12]
		break;
   1f71e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f720:	2301      	movs	r3, #1
}
   1f722:	0018      	movs	r0, r3
   1f724:	46bd      	mov	sp, r7
   1f726:	b003      	add	sp, #12
   1f728:	bd90      	pop	{r4, r7, pc}
   1f72a:	46c0      	nop			; (mov r8, r8)
   1f72c:	20004244 	.word	0x20004244
   1f730:	00001137 	.word	0x00001137
   1f734:	00020aa1 	.word	0x00020aa1
   1f738:	00081133 	.word	0x00081133
   1f73c:	00020ac9 	.word	0x00020ac9
   1f740:	00020d99 	.word	0x00020d99
   1f744:	00020e3d 	.word	0x00020e3d
   1f748:	0001eec9 	.word	0x0001eec9

0001f74c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f74c:	b580      	push	{r7, lr}
   1f74e:	b082      	sub	sp, #8
   1f750:	af00      	add	r7, sp, #0
   1f752:	0002      	movs	r2, r0
   1f754:	1dfb      	adds	r3, r7, #7
   1f756:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f758:	1dfb      	adds	r3, r7, #7
   1f75a:	781b      	ldrb	r3, [r3, #0]
   1f75c:	2b00      	cmp	r3, #0
   1f75e:	d001      	beq.n	1f764 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f760:	2304      	movs	r3, #4
   1f762:	e047      	b.n	1f7f4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f764:	1dfb      	adds	r3, r7, #7
   1f766:	781b      	ldrb	r3, [r3, #0]
   1f768:	4a24      	ldr	r2, [pc, #144]	; (1f7fc <sd_mmc_select_slot+0xb0>)
   1f76a:	015b      	lsls	r3, r3, #5
   1f76c:	18d3      	adds	r3, r2, r3
   1f76e:	330a      	adds	r3, #10
   1f770:	781b      	ldrb	r3, [r3, #0]
   1f772:	2b04      	cmp	r3, #4
   1f774:	d008      	beq.n	1f788 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f776:	1dfb      	adds	r3, r7, #7
   1f778:	781b      	ldrb	r3, [r3, #0]
   1f77a:	4a20      	ldr	r2, [pc, #128]	; (1f7fc <sd_mmc_select_slot+0xb0>)
   1f77c:	015b      	lsls	r3, r3, #5
   1f77e:	18d3      	adds	r3, r2, r3
   1f780:	330a      	adds	r3, #10
   1f782:	781b      	ldrb	r3, [r3, #0]
   1f784:	2b03      	cmp	r3, #3
   1f786:	d11d      	bne.n	1f7c4 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f788:	1dfb      	adds	r3, r7, #7
   1f78a:	781b      	ldrb	r3, [r3, #0]
   1f78c:	4a1b      	ldr	r2, [pc, #108]	; (1f7fc <sd_mmc_select_slot+0xb0>)
   1f78e:	015b      	lsls	r3, r3, #5
   1f790:	18d3      	adds	r3, r2, r3
   1f792:	330a      	adds	r3, #10
   1f794:	2202      	movs	r2, #2
   1f796:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f798:	1dfb      	adds	r3, r7, #7
   1f79a:	781a      	ldrb	r2, [r3, #0]
   1f79c:	4b17      	ldr	r3, [pc, #92]	; (1f7fc <sd_mmc_select_slot+0xb0>)
   1f79e:	0152      	lsls	r2, r2, #5
   1f7a0:	4917      	ldr	r1, [pc, #92]	; (1f800 <sd_mmc_select_slot+0xb4>)
   1f7a2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f7a4:	1dfb      	adds	r3, r7, #7
   1f7a6:	781b      	ldrb	r3, [r3, #0]
   1f7a8:	4a14      	ldr	r2, [pc, #80]	; (1f7fc <sd_mmc_select_slot+0xb0>)
   1f7aa:	015b      	lsls	r3, r3, #5
   1f7ac:	18d3      	adds	r3, r2, r3
   1f7ae:	330d      	adds	r3, #13
   1f7b0:	2201      	movs	r2, #1
   1f7b2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f7b4:	1dfb      	adds	r3, r7, #7
   1f7b6:	781b      	ldrb	r3, [r3, #0]
   1f7b8:	4a10      	ldr	r2, [pc, #64]	; (1f7fc <sd_mmc_select_slot+0xb0>)
   1f7ba:	015b      	lsls	r3, r3, #5
   1f7bc:	18d3      	adds	r3, r2, r3
   1f7be:	331e      	adds	r3, #30
   1f7c0:	2200      	movs	r2, #0
   1f7c2:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f7c4:	4b0f      	ldr	r3, [pc, #60]	; (1f804 <sd_mmc_select_slot+0xb8>)
   1f7c6:	1dfa      	adds	r2, r7, #7
   1f7c8:	7812      	ldrb	r2, [r2, #0]
   1f7ca:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f7cc:	1dfb      	adds	r3, r7, #7
   1f7ce:	781b      	ldrb	r3, [r3, #0]
   1f7d0:	015a      	lsls	r2, r3, #5
   1f7d2:	4b0a      	ldr	r3, [pc, #40]	; (1f7fc <sd_mmc_select_slot+0xb0>)
   1f7d4:	18d2      	adds	r2, r2, r3
   1f7d6:	4b0c      	ldr	r3, [pc, #48]	; (1f808 <sd_mmc_select_slot+0xbc>)
   1f7d8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f7da:	4b0c      	ldr	r3, [pc, #48]	; (1f80c <sd_mmc_select_slot+0xc0>)
   1f7dc:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f7de:	1dfb      	adds	r3, r7, #7
   1f7e0:	781b      	ldrb	r3, [r3, #0]
   1f7e2:	4a06      	ldr	r2, [pc, #24]	; (1f7fc <sd_mmc_select_slot+0xb0>)
   1f7e4:	015b      	lsls	r3, r3, #5
   1f7e6:	18d3      	adds	r3, r2, r3
   1f7e8:	330a      	adds	r3, #10
   1f7ea:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f7ec:	3b02      	subs	r3, #2
   1f7ee:	425a      	negs	r2, r3
   1f7f0:	4153      	adcs	r3, r2
   1f7f2:	b2db      	uxtb	r3, r3
}
   1f7f4:	0018      	movs	r0, r3
   1f7f6:	46bd      	mov	sp, r7
   1f7f8:	b002      	add	sp, #8
   1f7fa:	bd80      	pop	{r7, pc}
   1f7fc:	20004220 	.word	0x20004220
   1f800:	00061a80 	.word	0x00061a80
   1f804:	20004240 	.word	0x20004240
   1f808:	20004244 	.word	0x20004244
   1f80c:	0001f811 	.word	0x0001f811

0001f810 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f810:	b5b0      	push	{r4, r5, r7, lr}
   1f812:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f814:	4b09      	ldr	r3, [pc, #36]	; (1f83c <sd_mmc_configure_slot+0x2c>)
   1f816:	7818      	ldrb	r0, [r3, #0]
   1f818:	4b09      	ldr	r3, [pc, #36]	; (1f840 <sd_mmc_configure_slot+0x30>)
   1f81a:	681b      	ldr	r3, [r3, #0]
   1f81c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f81e:	4b08      	ldr	r3, [pc, #32]	; (1f840 <sd_mmc_configure_slot+0x30>)
   1f820:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f822:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f824:	4b06      	ldr	r3, [pc, #24]	; (1f840 <sd_mmc_configure_slot+0x30>)
   1f826:	681b      	ldr	r3, [r3, #0]
   1f828:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f82a:	1e5c      	subs	r4, r3, #1
   1f82c:	41a3      	sbcs	r3, r4
   1f82e:	b2db      	uxtb	r3, r3
   1f830:	4c04      	ldr	r4, [pc, #16]	; (1f844 <sd_mmc_configure_slot+0x34>)
   1f832:	47a0      	blx	r4
}
   1f834:	46c0      	nop			; (mov r8, r8)
   1f836:	46bd      	mov	sp, r7
   1f838:	bdb0      	pop	{r4, r5, r7, pc}
   1f83a:	46c0      	nop			; (mov r8, r8)
   1f83c:	20004240 	.word	0x20004240
   1f840:	20004244 	.word	0x20004244
   1f844:	00020989 	.word	0x00020989

0001f848 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f848:	b580      	push	{r7, lr}
   1f84a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f84c:	4b05      	ldr	r3, [pc, #20]	; (1f864 <sd_mmc_deselect_slot+0x1c>)
   1f84e:	781b      	ldrb	r3, [r3, #0]
   1f850:	2b00      	cmp	r3, #0
   1f852:	d104      	bne.n	1f85e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f854:	4b03      	ldr	r3, [pc, #12]	; (1f864 <sd_mmc_deselect_slot+0x1c>)
   1f856:	781b      	ldrb	r3, [r3, #0]
   1f858:	0018      	movs	r0, r3
   1f85a:	4b03      	ldr	r3, [pc, #12]	; (1f868 <sd_mmc_deselect_slot+0x20>)
   1f85c:	4798      	blx	r3
	}
}
   1f85e:	46c0      	nop			; (mov r8, r8)
   1f860:	46bd      	mov	sp, r7
   1f862:	bd80      	pop	{r7, pc}
   1f864:	20004240 	.word	0x20004240
   1f868:	00020a11 	.word	0x00020a11

0001f86c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f86c:	b580      	push	{r7, lr}
   1f86e:	b082      	sub	sp, #8
   1f870:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f872:	1dfb      	adds	r3, r7, #7
   1f874:	2200      	movs	r2, #0
   1f876:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f878:	4b59      	ldr	r3, [pc, #356]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f87a:	681b      	ldr	r3, [r3, #0]
   1f87c:	2201      	movs	r2, #1
   1f87e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f880:	4b57      	ldr	r3, [pc, #348]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f882:	681b      	ldr	r3, [r3, #0]
   1f884:	2200      	movs	r2, #0
   1f886:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f888:	4b55      	ldr	r3, [pc, #340]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f88a:	681b      	ldr	r3, [r3, #0]
   1f88c:	2200      	movs	r2, #0
   1f88e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f890:	4b54      	ldr	r3, [pc, #336]	; (1f9e4 <sd_mmc_spi_card_init+0x178>)
   1f892:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f894:	2388      	movs	r3, #136	; 0x88
   1f896:	015b      	lsls	r3, r3, #5
   1f898:	2100      	movs	r1, #0
   1f89a:	0018      	movs	r0, r3
   1f89c:	4b52      	ldr	r3, [pc, #328]	; (1f9e8 <sd_mmc_spi_card_init+0x17c>)
   1f89e:	4798      	blx	r3
   1f8a0:	0003      	movs	r3, r0
   1f8a2:	001a      	movs	r2, r3
   1f8a4:	2301      	movs	r3, #1
   1f8a6:	4053      	eors	r3, r2
   1f8a8:	b2db      	uxtb	r3, r3
   1f8aa:	2b00      	cmp	r3, #0
   1f8ac:	d001      	beq.n	1f8b2 <sd_mmc_spi_card_init+0x46>
		return false;
   1f8ae:	2300      	movs	r3, #0
   1f8b0:	e092      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f8b2:	1dfb      	adds	r3, r7, #7
   1f8b4:	0018      	movs	r0, r3
   1f8b6:	4b4d      	ldr	r3, [pc, #308]	; (1f9ec <sd_mmc_spi_card_init+0x180>)
   1f8b8:	4798      	blx	r3
   1f8ba:	0003      	movs	r3, r0
   1f8bc:	001a      	movs	r2, r3
   1f8be:	2301      	movs	r3, #1
   1f8c0:	4053      	eors	r3, r2
   1f8c2:	b2db      	uxtb	r3, r3
   1f8c4:	2b00      	cmp	r3, #0
   1f8c6:	d001      	beq.n	1f8cc <sd_mmc_spi_card_init+0x60>
		return false;
   1f8c8:	2300      	movs	r3, #0
   1f8ca:	e085      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f8cc:	4b48      	ldr	r3, [pc, #288]	; (1f9f0 <sd_mmc_spi_card_init+0x184>)
   1f8ce:	4798      	blx	r3
   1f8d0:	0003      	movs	r3, r0
   1f8d2:	001a      	movs	r2, r3
   1f8d4:	2301      	movs	r3, #1
   1f8d6:	4053      	eors	r3, r2
   1f8d8:	b2db      	uxtb	r3, r3
   1f8da:	2b00      	cmp	r3, #0
   1f8dc:	d001      	beq.n	1f8e2 <sd_mmc_spi_card_init+0x76>
		return false;
   1f8de:	2300      	movs	r3, #0
   1f8e0:	e07a      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f8e2:	4b3f      	ldr	r3, [pc, #252]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f8e4:	681b      	ldr	r3, [r3, #0]
   1f8e6:	7adb      	ldrb	r3, [r3, #11]
   1f8e8:	001a      	movs	r2, r3
   1f8ea:	2301      	movs	r3, #1
   1f8ec:	4013      	ands	r3, r2
   1f8ee:	d021      	beq.n	1f934 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f8f0:	1dfb      	adds	r3, r7, #7
   1f8f2:	781b      	ldrb	r3, [r3, #0]
   1f8f4:	0018      	movs	r0, r3
   1f8f6:	4b3f      	ldr	r3, [pc, #252]	; (1f9f4 <sd_mmc_spi_card_init+0x188>)
   1f8f8:	4798      	blx	r3
   1f8fa:	0003      	movs	r3, r0
   1f8fc:	001a      	movs	r2, r3
   1f8fe:	2301      	movs	r3, #1
   1f900:	4053      	eors	r3, r2
   1f902:	b2db      	uxtb	r3, r3
   1f904:	2b00      	cmp	r3, #0
   1f906:	d007      	beq.n	1f918 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f908:	4b35      	ldr	r3, [pc, #212]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f90a:	681b      	ldr	r3, [r3, #0]
   1f90c:	2202      	movs	r2, #2
   1f90e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f910:	4b39      	ldr	r3, [pc, #228]	; (1f9f8 <sd_mmc_spi_card_init+0x18c>)
   1f912:	4798      	blx	r3
   1f914:	0003      	movs	r3, r0
   1f916:	e05f      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f918:	4b38      	ldr	r3, [pc, #224]	; (1f9fc <sd_mmc_spi_card_init+0x190>)
   1f91a:	2100      	movs	r1, #0
   1f91c:	0018      	movs	r0, r3
   1f91e:	4b32      	ldr	r3, [pc, #200]	; (1f9e8 <sd_mmc_spi_card_init+0x17c>)
   1f920:	4798      	blx	r3
   1f922:	0003      	movs	r3, r0
   1f924:	001a      	movs	r2, r3
   1f926:	2301      	movs	r3, #1
   1f928:	4053      	eors	r3, r2
   1f92a:	b2db      	uxtb	r3, r3
   1f92c:	2b00      	cmp	r3, #0
   1f92e:	d001      	beq.n	1f934 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f930:	2300      	movs	r3, #0
   1f932:	e051      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f934:	4b2a      	ldr	r3, [pc, #168]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f936:	681b      	ldr	r3, [r3, #0]
   1f938:	7adb      	ldrb	r3, [r3, #11]
   1f93a:	001a      	movs	r2, r3
   1f93c:	2301      	movs	r3, #1
   1f93e:	4013      	ands	r3, r2
   1f940:	d017      	beq.n	1f972 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f942:	4b2f      	ldr	r3, [pc, #188]	; (1fa00 <sd_mmc_spi_card_init+0x194>)
   1f944:	4798      	blx	r3
   1f946:	0003      	movs	r3, r0
   1f948:	001a      	movs	r2, r3
   1f94a:	2301      	movs	r3, #1
   1f94c:	4053      	eors	r3, r2
   1f94e:	b2db      	uxtb	r3, r3
   1f950:	2b00      	cmp	r3, #0
   1f952:	d001      	beq.n	1f958 <sd_mmc_spi_card_init+0xec>
			return false;
   1f954:	2300      	movs	r3, #0
   1f956:	e03f      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f958:	4b2a      	ldr	r3, [pc, #168]	; (1fa04 <sd_mmc_spi_card_init+0x198>)
   1f95a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f95c:	4b2a      	ldr	r3, [pc, #168]	; (1fa08 <sd_mmc_spi_card_init+0x19c>)
   1f95e:	4798      	blx	r3
   1f960:	0003      	movs	r3, r0
   1f962:	001a      	movs	r2, r3
   1f964:	2301      	movs	r3, #1
   1f966:	4053      	eors	r3, r2
   1f968:	b2db      	uxtb	r3, r3
   1f96a:	2b00      	cmp	r3, #0
   1f96c:	d001      	beq.n	1f972 <sd_mmc_spi_card_init+0x106>
			return false;
   1f96e:	2300      	movs	r3, #0
   1f970:	e032      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f972:	4b1b      	ldr	r3, [pc, #108]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f974:	681b      	ldr	r3, [r3, #0]
   1f976:	7adb      	ldrb	r3, [r3, #11]
   1f978:	001a      	movs	r2, r3
   1f97a:	2301      	movs	r3, #1
   1f97c:	4013      	ands	r3, r2
   1f97e:	d016      	beq.n	1f9ae <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f980:	4b17      	ldr	r3, [pc, #92]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f982:	681b      	ldr	r3, [r3, #0]
   1f984:	7adb      	ldrb	r3, [r3, #11]
   1f986:	001a      	movs	r2, r3
   1f988:	2308      	movs	r3, #8
   1f98a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f98c:	d10f      	bne.n	1f9ae <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f98e:	2380      	movs	r3, #128	; 0x80
   1f990:	009b      	lsls	r3, r3, #2
   1f992:	4a1e      	ldr	r2, [pc, #120]	; (1fa0c <sd_mmc_spi_card_init+0x1a0>)
   1f994:	0019      	movs	r1, r3
   1f996:	0010      	movs	r0, r2
   1f998:	4b13      	ldr	r3, [pc, #76]	; (1f9e8 <sd_mmc_spi_card_init+0x17c>)
   1f99a:	4798      	blx	r3
   1f99c:	0003      	movs	r3, r0
   1f99e:	001a      	movs	r2, r3
   1f9a0:	2301      	movs	r3, #1
   1f9a2:	4053      	eors	r3, r2
   1f9a4:	b2db      	uxtb	r3, r3
   1f9a6:	2b00      	cmp	r3, #0
   1f9a8:	d001      	beq.n	1f9ae <sd_mmc_spi_card_init+0x142>
			return false;
   1f9aa:	2300      	movs	r3, #0
   1f9ac:	e014      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f9ae:	4b0c      	ldr	r3, [pc, #48]	; (1f9e0 <sd_mmc_spi_card_init+0x174>)
   1f9b0:	681b      	ldr	r3, [r3, #0]
   1f9b2:	7adb      	ldrb	r3, [r3, #11]
   1f9b4:	001a      	movs	r2, r3
   1f9b6:	2301      	movs	r3, #1
   1f9b8:	4013      	ands	r3, r2
   1f9ba:	d00a      	beq.n	1f9d2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f9bc:	4b14      	ldr	r3, [pc, #80]	; (1fa10 <sd_mmc_spi_card_init+0x1a4>)
   1f9be:	4798      	blx	r3
   1f9c0:	0003      	movs	r3, r0
   1f9c2:	001a      	movs	r2, r3
   1f9c4:	2301      	movs	r3, #1
   1f9c6:	4053      	eors	r3, r2
   1f9c8:	b2db      	uxtb	r3, r3
   1f9ca:	2b00      	cmp	r3, #0
   1f9cc:	d001      	beq.n	1f9d2 <sd_mmc_spi_card_init+0x166>
			return false;
   1f9ce:	2300      	movs	r3, #0
   1f9d0:	e002      	b.n	1f9d8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f9d2:	4b10      	ldr	r3, [pc, #64]	; (1fa14 <sd_mmc_spi_card_init+0x1a8>)
   1f9d4:	4798      	blx	r3
	return true;
   1f9d6:	2301      	movs	r3, #1
}
   1f9d8:	0018      	movs	r0, r3
   1f9da:	46bd      	mov	sp, r7
   1f9dc:	b002      	add	sp, #8
   1f9de:	bd80      	pop	{r7, pc}
   1f9e0:	20004244 	.word	0x20004244
   1f9e4:	00020a55 	.word	0x00020a55
   1f9e8:	00020aa1 	.word	0x00020aa1
   1f9ec:	0001f1c1 	.word	0x0001f1c1
   1f9f0:	0001f1b5 	.word	0x0001f1b5
   1f9f4:	0001f0d1 	.word	0x0001f0d1
   1f9f8:	0001fa19 	.word	0x0001fa19
   1f9fc:	0000113b 	.word	0x0000113b
   1fa00:	0001f35d 	.word	0x0001f35d
   1fa04:	0001f4fd 	.word	0x0001f4fd
   1fa08:	0001f645 	.word	0x0001f645
   1fa0c:	00001110 	.word	0x00001110
   1fa10:	0001f5e9 	.word	0x0001f5e9
   1fa14:	0001f811 	.word	0x0001f811

0001fa18 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1fa18:	b580      	push	{r7, lr}
   1fa1a:	b082      	sub	sp, #8
   1fa1c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1fa1e:	2388      	movs	r3, #136	; 0x88
   1fa20:	015b      	lsls	r3, r3, #5
   1fa22:	2100      	movs	r1, #0
   1fa24:	0018      	movs	r0, r3
   1fa26:	4b32      	ldr	r3, [pc, #200]	; (1faf0 <sd_mmc_spi_install_mmc+0xd8>)
   1fa28:	4798      	blx	r3
   1fa2a:	0003      	movs	r3, r0
   1fa2c:	001a      	movs	r2, r3
   1fa2e:	2301      	movs	r3, #1
   1fa30:	4053      	eors	r3, r2
   1fa32:	b2db      	uxtb	r3, r3
   1fa34:	2b00      	cmp	r3, #0
   1fa36:	d001      	beq.n	1fa3c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1fa38:	2300      	movs	r3, #0
   1fa3a:	e055      	b.n	1fae8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1fa3c:	4b2d      	ldr	r3, [pc, #180]	; (1faf4 <sd_mmc_spi_install_mmc+0xdc>)
   1fa3e:	4798      	blx	r3
   1fa40:	0003      	movs	r3, r0
   1fa42:	001a      	movs	r2, r3
   1fa44:	2301      	movs	r3, #1
   1fa46:	4053      	eors	r3, r2
   1fa48:	b2db      	uxtb	r3, r3
   1fa4a:	2b00      	cmp	r3, #0
   1fa4c:	d001      	beq.n	1fa52 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1fa4e:	2300      	movs	r3, #0
   1fa50:	e04a      	b.n	1fae8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1fa52:	4b29      	ldr	r3, [pc, #164]	; (1faf8 <sd_mmc_spi_install_mmc+0xe0>)
   1fa54:	2100      	movs	r1, #0
   1fa56:	0018      	movs	r0, r3
   1fa58:	4b25      	ldr	r3, [pc, #148]	; (1faf0 <sd_mmc_spi_install_mmc+0xd8>)
   1fa5a:	4798      	blx	r3
   1fa5c:	0003      	movs	r3, r0
   1fa5e:	001a      	movs	r2, r3
   1fa60:	2301      	movs	r3, #1
   1fa62:	4053      	eors	r3, r2
   1fa64:	b2db      	uxtb	r3, r3
   1fa66:	2b00      	cmp	r3, #0
   1fa68:	d001      	beq.n	1fa6e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1fa6a:	2300      	movs	r3, #0
   1fa6c:	e03c      	b.n	1fae8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1fa6e:	4b23      	ldr	r3, [pc, #140]	; (1fafc <sd_mmc_spi_install_mmc+0xe4>)
   1fa70:	4798      	blx	r3
   1fa72:	0003      	movs	r3, r0
   1fa74:	001a      	movs	r2, r3
   1fa76:	2301      	movs	r3, #1
   1fa78:	4053      	eors	r3, r2
   1fa7a:	b2db      	uxtb	r3, r3
   1fa7c:	2b00      	cmp	r3, #0
   1fa7e:	d001      	beq.n	1fa84 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1fa80:	2300      	movs	r3, #0
   1fa82:	e031      	b.n	1fae8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1fa84:	4b1e      	ldr	r3, [pc, #120]	; (1fb00 <sd_mmc_spi_install_mmc+0xe8>)
   1fa86:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1fa88:	4b1e      	ldr	r3, [pc, #120]	; (1fb04 <sd_mmc_spi_install_mmc+0xec>)
   1fa8a:	681b      	ldr	r3, [r3, #0]
   1fa8c:	7b1b      	ldrb	r3, [r3, #12]
   1fa8e:	2b3f      	cmp	r3, #63	; 0x3f
   1fa90:	d90c      	bls.n	1faac <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1fa92:	1dfb      	adds	r3, r7, #7
   1fa94:	0018      	movs	r0, r3
   1fa96:	4b1c      	ldr	r3, [pc, #112]	; (1fb08 <sd_mmc_spi_install_mmc+0xf0>)
   1fa98:	4798      	blx	r3
   1fa9a:	0003      	movs	r3, r0
   1fa9c:	001a      	movs	r2, r3
   1fa9e:	2301      	movs	r3, #1
   1faa0:	4053      	eors	r3, r2
   1faa2:	b2db      	uxtb	r3, r3
   1faa4:	2b00      	cmp	r3, #0
   1faa6:	d001      	beq.n	1faac <sd_mmc_spi_install_mmc+0x94>
			return false;
   1faa8:	2300      	movs	r3, #0
   1faaa:	e01d      	b.n	1fae8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1faac:	2380      	movs	r3, #128	; 0x80
   1faae:	009b      	lsls	r3, r3, #2
   1fab0:	4a16      	ldr	r2, [pc, #88]	; (1fb0c <sd_mmc_spi_install_mmc+0xf4>)
   1fab2:	0019      	movs	r1, r3
   1fab4:	0010      	movs	r0, r2
   1fab6:	4b0e      	ldr	r3, [pc, #56]	; (1faf0 <sd_mmc_spi_install_mmc+0xd8>)
   1fab8:	4798      	blx	r3
   1faba:	0003      	movs	r3, r0
   1fabc:	001a      	movs	r2, r3
   1fabe:	2301      	movs	r3, #1
   1fac0:	4053      	eors	r3, r2
   1fac2:	b2db      	uxtb	r3, r3
   1fac4:	2b00      	cmp	r3, #0
   1fac6:	d001      	beq.n	1facc <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1fac8:	2300      	movs	r3, #0
   1faca:	e00d      	b.n	1fae8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1facc:	4b10      	ldr	r3, [pc, #64]	; (1fb10 <sd_mmc_spi_install_mmc+0xf8>)
   1face:	4798      	blx	r3
   1fad0:	0003      	movs	r3, r0
   1fad2:	001a      	movs	r2, r3
   1fad4:	2301      	movs	r3, #1
   1fad6:	4053      	eors	r3, r2
   1fad8:	b2db      	uxtb	r3, r3
   1fada:	2b00      	cmp	r3, #0
   1fadc:	d001      	beq.n	1fae2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1fade:	2300      	movs	r3, #0
   1fae0:	e002      	b.n	1fae8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1fae2:	4b0c      	ldr	r3, [pc, #48]	; (1fb14 <sd_mmc_spi_install_mmc+0xfc>)
   1fae4:	4798      	blx	r3
	return true;
   1fae6:	2301      	movs	r3, #1
}
   1fae8:	0018      	movs	r0, r3
   1faea:	46bd      	mov	sp, r7
   1faec:	b002      	add	sp, #8
   1faee:	bd80      	pop	{r7, pc}
   1faf0:	00020aa1 	.word	0x00020aa1
   1faf4:	0001f025 	.word	0x0001f025
   1faf8:	0000113b 	.word	0x0000113b
   1fafc:	0001f35d 	.word	0x0001f35d
   1fb00:	0001f3cd 	.word	0x0001f3cd
   1fb04:	20004244 	.word	0x20004244
   1fb08:	0001f231 	.word	0x0001f231
   1fb0c:	00001110 	.word	0x00001110
   1fb10:	0001f5e9 	.word	0x0001f5e9
   1fb14:	0001f811 	.word	0x0001f811

0001fb18 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1fb18:	b580      	push	{r7, lr}
   1fb1a:	b082      	sub	sp, #8
   1fb1c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1fb1e:	1dfb      	adds	r3, r7, #7
   1fb20:	2200      	movs	r2, #0
   1fb22:	701a      	strb	r2, [r3, #0]
   1fb24:	e00c      	b.n	1fb40 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1fb26:	1dfb      	adds	r3, r7, #7
   1fb28:	781b      	ldrb	r3, [r3, #0]
   1fb2a:	4a0c      	ldr	r2, [pc, #48]	; (1fb5c <sd_mmc_init+0x44>)
   1fb2c:	015b      	lsls	r3, r3, #5
   1fb2e:	18d3      	adds	r3, r2, r3
   1fb30:	330a      	adds	r3, #10
   1fb32:	2204      	movs	r2, #4
   1fb34:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1fb36:	1dfb      	adds	r3, r7, #7
   1fb38:	781a      	ldrb	r2, [r3, #0]
   1fb3a:	1dfb      	adds	r3, r7, #7
   1fb3c:	3201      	adds	r2, #1
   1fb3e:	701a      	strb	r2, [r3, #0]
   1fb40:	1dfb      	adds	r3, r7, #7
   1fb42:	781b      	ldrb	r3, [r3, #0]
   1fb44:	2b00      	cmp	r3, #0
   1fb46:	d0ee      	beq.n	1fb26 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1fb48:	4b05      	ldr	r3, [pc, #20]	; (1fb60 <sd_mmc_init+0x48>)
   1fb4a:	22ff      	movs	r2, #255	; 0xff
   1fb4c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1fb4e:	4b05      	ldr	r3, [pc, #20]	; (1fb64 <sd_mmc_init+0x4c>)
   1fb50:	4798      	blx	r3
}
   1fb52:	46c0      	nop			; (mov r8, r8)
   1fb54:	46bd      	mov	sp, r7
   1fb56:	b002      	add	sp, #8
   1fb58:	bd80      	pop	{r7, pc}
   1fb5a:	46c0      	nop			; (mov r8, r8)
   1fb5c:	20004220 	.word	0x20004220
   1fb60:	20004240 	.word	0x20004240
   1fb64:	000208c1 	.word	0x000208c1

0001fb68 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1fb68:	b590      	push	{r4, r7, lr}
   1fb6a:	b085      	sub	sp, #20
   1fb6c:	af00      	add	r7, sp, #0
   1fb6e:	0002      	movs	r2, r0
   1fb70:	1dfb      	adds	r3, r7, #7
   1fb72:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fb74:	230f      	movs	r3, #15
   1fb76:	18fc      	adds	r4, r7, r3
   1fb78:	1dfb      	adds	r3, r7, #7
   1fb7a:	781b      	ldrb	r3, [r3, #0]
   1fb7c:	0018      	movs	r0, r3
   1fb7e:	4b13      	ldr	r3, [pc, #76]	; (1fbcc <sd_mmc_check+0x64>)
   1fb80:	4798      	blx	r3
   1fb82:	0003      	movs	r3, r0
   1fb84:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1fb86:	230f      	movs	r3, #15
   1fb88:	18fb      	adds	r3, r7, r3
   1fb8a:	781b      	ldrb	r3, [r3, #0]
   1fb8c:	2b01      	cmp	r3, #1
   1fb8e:	d005      	beq.n	1fb9c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1fb90:	4b0f      	ldr	r3, [pc, #60]	; (1fbd0 <sd_mmc_check+0x68>)
   1fb92:	4798      	blx	r3
		return sd_mmc_err;
   1fb94:	230f      	movs	r3, #15
   1fb96:	18fb      	adds	r3, r7, r3
   1fb98:	781b      	ldrb	r3, [r3, #0]
   1fb9a:	e012      	b.n	1fbc2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1fb9c:	4b0d      	ldr	r3, [pc, #52]	; (1fbd4 <sd_mmc_check+0x6c>)
   1fb9e:	4798      	blx	r3
   1fba0:	1e03      	subs	r3, r0, #0
   1fba2:	d007      	beq.n	1fbb4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1fba4:	4b0c      	ldr	r3, [pc, #48]	; (1fbd8 <sd_mmc_check+0x70>)
   1fba6:	681b      	ldr	r3, [r3, #0]
   1fba8:	2200      	movs	r2, #0
   1fbaa:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1fbac:	4b08      	ldr	r3, [pc, #32]	; (1fbd0 <sd_mmc_check+0x68>)
   1fbae:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1fbb0:	2301      	movs	r3, #1
   1fbb2:	e006      	b.n	1fbc2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1fbb4:	4b08      	ldr	r3, [pc, #32]	; (1fbd8 <sd_mmc_check+0x70>)
   1fbb6:	681b      	ldr	r3, [r3, #0]
   1fbb8:	2203      	movs	r2, #3
   1fbba:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1fbbc:	4b04      	ldr	r3, [pc, #16]	; (1fbd0 <sd_mmc_check+0x68>)
   1fbbe:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1fbc0:	2303      	movs	r3, #3
}
   1fbc2:	0018      	movs	r0, r3
   1fbc4:	46bd      	mov	sp, r7
   1fbc6:	b005      	add	sp, #20
   1fbc8:	bd90      	pop	{r4, r7, pc}
   1fbca:	46c0      	nop			; (mov r8, r8)
   1fbcc:	0001f74d 	.word	0x0001f74d
   1fbd0:	0001f849 	.word	0x0001f849
   1fbd4:	0001f86d 	.word	0x0001f86d
   1fbd8:	20004244 	.word	0x20004244

0001fbdc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1fbdc:	b580      	push	{r7, lr}
   1fbde:	b082      	sub	sp, #8
   1fbe0:	af00      	add	r7, sp, #0
   1fbe2:	0002      	movs	r2, r0
   1fbe4:	1dfb      	adds	r3, r7, #7
   1fbe6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fbe8:	1dfb      	adds	r3, r7, #7
   1fbea:	781b      	ldrb	r3, [r3, #0]
   1fbec:	0018      	movs	r0, r3
   1fbee:	4b07      	ldr	r3, [pc, #28]	; (1fc0c <sd_mmc_get_type+0x30>)
   1fbf0:	4798      	blx	r3
   1fbf2:	1e03      	subs	r3, r0, #0
   1fbf4:	d001      	beq.n	1fbfa <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1fbf6:	2300      	movs	r3, #0
   1fbf8:	e004      	b.n	1fc04 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1fbfa:	4b05      	ldr	r3, [pc, #20]	; (1fc10 <sd_mmc_get_type+0x34>)
   1fbfc:	4798      	blx	r3
	return sd_mmc_card->type;
   1fbfe:	4b05      	ldr	r3, [pc, #20]	; (1fc14 <sd_mmc_get_type+0x38>)
   1fc00:	681b      	ldr	r3, [r3, #0]
   1fc02:	7adb      	ldrb	r3, [r3, #11]
}
   1fc04:	0018      	movs	r0, r3
   1fc06:	46bd      	mov	sp, r7
   1fc08:	b002      	add	sp, #8
   1fc0a:	bd80      	pop	{r7, pc}
   1fc0c:	0001f74d 	.word	0x0001f74d
   1fc10:	0001f849 	.word	0x0001f849
   1fc14:	20004244 	.word	0x20004244

0001fc18 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1fc18:	b580      	push	{r7, lr}
   1fc1a:	b082      	sub	sp, #8
   1fc1c:	af00      	add	r7, sp, #0
   1fc1e:	0002      	movs	r2, r0
   1fc20:	1dfb      	adds	r3, r7, #7
   1fc22:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fc24:	1dfb      	adds	r3, r7, #7
   1fc26:	781b      	ldrb	r3, [r3, #0]
   1fc28:	0018      	movs	r0, r3
   1fc2a:	4b07      	ldr	r3, [pc, #28]	; (1fc48 <sd_mmc_get_capacity+0x30>)
   1fc2c:	4798      	blx	r3
   1fc2e:	1e03      	subs	r3, r0, #0
   1fc30:	d001      	beq.n	1fc36 <sd_mmc_get_capacity+0x1e>
		return 0;
   1fc32:	2300      	movs	r3, #0
   1fc34:	e004      	b.n	1fc40 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1fc36:	4b05      	ldr	r3, [pc, #20]	; (1fc4c <sd_mmc_get_capacity+0x34>)
   1fc38:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1fc3a:	4b05      	ldr	r3, [pc, #20]	; (1fc50 <sd_mmc_get_capacity+0x38>)
   1fc3c:	681b      	ldr	r3, [r3, #0]
   1fc3e:	685b      	ldr	r3, [r3, #4]
}
   1fc40:	0018      	movs	r0, r3
   1fc42:	46bd      	mov	sp, r7
   1fc44:	b002      	add	sp, #8
   1fc46:	bd80      	pop	{r7, pc}
   1fc48:	0001f74d 	.word	0x0001f74d
   1fc4c:	0001f849 	.word	0x0001f849
   1fc50:	20004244 	.word	0x20004244

0001fc54 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1fc54:	b580      	push	{r7, lr}
   1fc56:	b082      	sub	sp, #8
   1fc58:	af00      	add	r7, sp, #0
   1fc5a:	0002      	movs	r2, r0
   1fc5c:	1dfb      	adds	r3, r7, #7
   1fc5e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1fc60:	2300      	movs	r3, #0
}
   1fc62:	0018      	movs	r0, r3
   1fc64:	46bd      	mov	sp, r7
   1fc66:	b002      	add	sp, #8
   1fc68:	bd80      	pop	{r7, pc}
	...

0001fc6c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fc6c:	b590      	push	{r4, r7, lr}
   1fc6e:	b089      	sub	sp, #36	; 0x24
   1fc70:	af02      	add	r7, sp, #8
   1fc72:	6039      	str	r1, [r7, #0]
   1fc74:	0011      	movs	r1, r2
   1fc76:	1dfb      	adds	r3, r7, #7
   1fc78:	1c02      	adds	r2, r0, #0
   1fc7a:	701a      	strb	r2, [r3, #0]
   1fc7c:	1d3b      	adds	r3, r7, #4
   1fc7e:	1c0a      	adds	r2, r1, #0
   1fc80:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fc82:	230f      	movs	r3, #15
   1fc84:	18fc      	adds	r4, r7, r3
   1fc86:	1dfb      	adds	r3, r7, #7
   1fc88:	781b      	ldrb	r3, [r3, #0]
   1fc8a:	0018      	movs	r0, r3
   1fc8c:	4b29      	ldr	r3, [pc, #164]	; (1fd34 <sd_mmc_init_read_blocks+0xc8>)
   1fc8e:	4798      	blx	r3
   1fc90:	0003      	movs	r3, r0
   1fc92:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fc94:	230f      	movs	r3, #15
   1fc96:	18fb      	adds	r3, r7, r3
   1fc98:	781b      	ldrb	r3, [r3, #0]
   1fc9a:	2b00      	cmp	r3, #0
   1fc9c:	d003      	beq.n	1fca6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1fc9e:	230f      	movs	r3, #15
   1fca0:	18fb      	adds	r3, r7, r3
   1fca2:	781b      	ldrb	r3, [r3, #0]
   1fca4:	e041      	b.n	1fd2a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1fca6:	4b24      	ldr	r3, [pc, #144]	; (1fd38 <sd_mmc_init_read_blocks+0xcc>)
   1fca8:	4798      	blx	r3
   1fcaa:	0003      	movs	r3, r0
   1fcac:	001a      	movs	r2, r3
   1fcae:	2301      	movs	r3, #1
   1fcb0:	4053      	eors	r3, r2
   1fcb2:	b2db      	uxtb	r3, r3
   1fcb4:	2b00      	cmp	r3, #0
   1fcb6:	d003      	beq.n	1fcc0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1fcb8:	4b20      	ldr	r3, [pc, #128]	; (1fd3c <sd_mmc_init_read_blocks+0xd0>)
   1fcba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fcbc:	2305      	movs	r3, #5
   1fcbe:	e034      	b.n	1fd2a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1fcc0:	1d3b      	adds	r3, r7, #4
   1fcc2:	881b      	ldrh	r3, [r3, #0]
   1fcc4:	2b01      	cmp	r3, #1
   1fcc6:	d902      	bls.n	1fcce <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1fcc8:	4b1d      	ldr	r3, [pc, #116]	; (1fd40 <sd_mmc_init_read_blocks+0xd4>)
   1fcca:	617b      	str	r3, [r7, #20]
   1fccc:	e001      	b.n	1fcd2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1fcce:	4b1d      	ldr	r3, [pc, #116]	; (1fd44 <sd_mmc_init_read_blocks+0xd8>)
   1fcd0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fcd2:	4b1d      	ldr	r3, [pc, #116]	; (1fd48 <sd_mmc_init_read_blocks+0xdc>)
   1fcd4:	681b      	ldr	r3, [r3, #0]
   1fcd6:	7adb      	ldrb	r3, [r3, #11]
   1fcd8:	001a      	movs	r2, r3
   1fcda:	2308      	movs	r3, #8
   1fcdc:	4013      	ands	r3, r2
   1fcde:	d002      	beq.n	1fce6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1fce0:	683b      	ldr	r3, [r7, #0]
   1fce2:	613b      	str	r3, [r7, #16]
   1fce4:	e002      	b.n	1fcec <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fce6:	683b      	ldr	r3, [r7, #0]
   1fce8:	025b      	lsls	r3, r3, #9
   1fcea:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fcec:	1d3b      	adds	r3, r7, #4
   1fcee:	881c      	ldrh	r4, [r3, #0]
   1fcf0:	2380      	movs	r3, #128	; 0x80
   1fcf2:	009a      	lsls	r2, r3, #2
   1fcf4:	6939      	ldr	r1, [r7, #16]
   1fcf6:	6978      	ldr	r0, [r7, #20]
   1fcf8:	2301      	movs	r3, #1
   1fcfa:	9300      	str	r3, [sp, #0]
   1fcfc:	0023      	movs	r3, r4
   1fcfe:	4c13      	ldr	r4, [pc, #76]	; (1fd4c <sd_mmc_init_read_blocks+0xe0>)
   1fd00:	47a0      	blx	r4
   1fd02:	0003      	movs	r3, r0
   1fd04:	001a      	movs	r2, r3
   1fd06:	2301      	movs	r3, #1
   1fd08:	4053      	eors	r3, r2
   1fd0a:	b2db      	uxtb	r3, r3
   1fd0c:	2b00      	cmp	r3, #0
   1fd0e:	d003      	beq.n	1fd18 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1fd10:	4b0a      	ldr	r3, [pc, #40]	; (1fd3c <sd_mmc_init_read_blocks+0xd0>)
   1fd12:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fd14:	2305      	movs	r3, #5
   1fd16:	e008      	b.n	1fd2a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fd18:	4b0d      	ldr	r3, [pc, #52]	; (1fd50 <sd_mmc_init_read_blocks+0xe4>)
   1fd1a:	1d3a      	adds	r2, r7, #4
   1fd1c:	8812      	ldrh	r2, [r2, #0]
   1fd1e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fd20:	4b0c      	ldr	r3, [pc, #48]	; (1fd54 <sd_mmc_init_read_blocks+0xe8>)
   1fd22:	1d3a      	adds	r2, r7, #4
   1fd24:	8812      	ldrh	r2, [r2, #0]
   1fd26:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fd28:	2300      	movs	r3, #0
}
   1fd2a:	0018      	movs	r0, r3
   1fd2c:	46bd      	mov	sp, r7
   1fd2e:	b007      	add	sp, #28
   1fd30:	bd90      	pop	{r4, r7, pc}
   1fd32:	46c0      	nop			; (mov r8, r8)
   1fd34:	0001f74d 	.word	0x0001f74d
   1fd38:	0001f5e9 	.word	0x0001f5e9
   1fd3c:	0001f849 	.word	0x0001f849
   1fd40:	00101112 	.word	0x00101112
   1fd44:	00081111 	.word	0x00081111
   1fd48:	20004244 	.word	0x20004244
   1fd4c:	00020ac9 	.word	0x00020ac9
   1fd50:	2000424a 	.word	0x2000424a
   1fd54:	20004248 	.word	0x20004248

0001fd58 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fd58:	b580      	push	{r7, lr}
   1fd5a:	b082      	sub	sp, #8
   1fd5c:	af00      	add	r7, sp, #0
   1fd5e:	6078      	str	r0, [r7, #4]
   1fd60:	000a      	movs	r2, r1
   1fd62:	1cbb      	adds	r3, r7, #2
   1fd64:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1fd66:	1cbb      	adds	r3, r7, #2
   1fd68:	881a      	ldrh	r2, [r3, #0]
   1fd6a:	687b      	ldr	r3, [r7, #4]
   1fd6c:	0011      	movs	r1, r2
   1fd6e:	0018      	movs	r0, r3
   1fd70:	4b0d      	ldr	r3, [pc, #52]	; (1fda8 <sd_mmc_start_read_blocks+0x50>)
   1fd72:	4798      	blx	r3
   1fd74:	0003      	movs	r3, r0
   1fd76:	001a      	movs	r2, r3
   1fd78:	2301      	movs	r3, #1
   1fd7a:	4053      	eors	r3, r2
   1fd7c:	b2db      	uxtb	r3, r3
   1fd7e:	2b00      	cmp	r3, #0
   1fd80:	d004      	beq.n	1fd8c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fd82:	4b0a      	ldr	r3, [pc, #40]	; (1fdac <sd_mmc_start_read_blocks+0x54>)
   1fd84:	2200      	movs	r2, #0
   1fd86:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fd88:	2305      	movs	r3, #5
   1fd8a:	e008      	b.n	1fd9e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fd8c:	4b07      	ldr	r3, [pc, #28]	; (1fdac <sd_mmc_start_read_blocks+0x54>)
   1fd8e:	881a      	ldrh	r2, [r3, #0]
   1fd90:	1cbb      	adds	r3, r7, #2
   1fd92:	881b      	ldrh	r3, [r3, #0]
   1fd94:	1ad3      	subs	r3, r2, r3
   1fd96:	b29a      	uxth	r2, r3
   1fd98:	4b04      	ldr	r3, [pc, #16]	; (1fdac <sd_mmc_start_read_blocks+0x54>)
   1fd9a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fd9c:	2300      	movs	r3, #0
}
   1fd9e:	0018      	movs	r0, r3
   1fda0:	46bd      	mov	sp, r7
   1fda2:	b002      	add	sp, #8
   1fda4:	bd80      	pop	{r7, pc}
   1fda6:	46c0      	nop			; (mov r8, r8)
   1fda8:	00020d99 	.word	0x00020d99
   1fdac:	2000424a 	.word	0x2000424a

0001fdb0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1fdb0:	b580      	push	{r7, lr}
   1fdb2:	b082      	sub	sp, #8
   1fdb4:	af00      	add	r7, sp, #0
   1fdb6:	0002      	movs	r2, r0
   1fdb8:	1dfb      	adds	r3, r7, #7
   1fdba:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1fdbc:	4b1c      	ldr	r3, [pc, #112]	; (1fe30 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1fdbe:	4798      	blx	r3
   1fdc0:	0003      	movs	r3, r0
   1fdc2:	001a      	movs	r2, r3
   1fdc4:	2301      	movs	r3, #1
   1fdc6:	4053      	eors	r3, r2
   1fdc8:	b2db      	uxtb	r3, r3
   1fdca:	2b00      	cmp	r3, #0
   1fdcc:	d001      	beq.n	1fdd2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fdce:	2305      	movs	r3, #5
   1fdd0:	e029      	b.n	1fe26 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1fdd2:	1dfb      	adds	r3, r7, #7
   1fdd4:	781b      	ldrb	r3, [r3, #0]
   1fdd6:	2b00      	cmp	r3, #0
   1fdd8:	d003      	beq.n	1fde2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fdda:	4b16      	ldr	r3, [pc, #88]	; (1fe34 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fddc:	2200      	movs	r2, #0
   1fdde:	801a      	strh	r2, [r3, #0]
   1fde0:	e005      	b.n	1fdee <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fde2:	4b14      	ldr	r3, [pc, #80]	; (1fe34 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fde4:	881b      	ldrh	r3, [r3, #0]
   1fde6:	2b00      	cmp	r3, #0
   1fde8:	d001      	beq.n	1fdee <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1fdea:	2300      	movs	r3, #0
   1fdec:	e01b      	b.n	1fe26 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fdee:	4b12      	ldr	r3, [pc, #72]	; (1fe38 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1fdf0:	881b      	ldrh	r3, [r3, #0]
   1fdf2:	2b01      	cmp	r3, #1
   1fdf4:	d103      	bne.n	1fdfe <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fdf6:	4b11      	ldr	r3, [pc, #68]	; (1fe3c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fdf8:	4798      	blx	r3
		return SD_MMC_OK;
   1fdfa:	2300      	movs	r3, #0
   1fdfc:	e013      	b.n	1fe26 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1fdfe:	4b10      	ldr	r3, [pc, #64]	; (1fe40 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fe00:	2100      	movs	r1, #0
   1fe02:	0018      	movs	r0, r3
   1fe04:	4b0f      	ldr	r3, [pc, #60]	; (1fe44 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fe06:	4798      	blx	r3
   1fe08:	0003      	movs	r3, r0
   1fe0a:	001a      	movs	r2, r3
   1fe0c:	2301      	movs	r3, #1
   1fe0e:	4053      	eors	r3, r2
   1fe10:	b2db      	uxtb	r3, r3
   1fe12:	2b00      	cmp	r3, #0
   1fe14:	d004      	beq.n	1fe20 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1fe16:	4b0a      	ldr	r3, [pc, #40]	; (1fe40 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fe18:	2100      	movs	r1, #0
   1fe1a:	0018      	movs	r0, r3
   1fe1c:	4b09      	ldr	r3, [pc, #36]	; (1fe44 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fe1e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fe20:	4b06      	ldr	r3, [pc, #24]	; (1fe3c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fe22:	4798      	blx	r3
	return SD_MMC_OK;
   1fe24:	2300      	movs	r3, #0
}
   1fe26:	0018      	movs	r0, r3
   1fe28:	46bd      	mov	sp, r7
   1fe2a:	b002      	add	sp, #8
   1fe2c:	bd80      	pop	{r7, pc}
   1fe2e:	46c0      	nop			; (mov r8, r8)
   1fe30:	00020e3d 	.word	0x00020e3d
   1fe34:	2000424a 	.word	0x2000424a
   1fe38:	20004248 	.word	0x20004248
   1fe3c:	0001f849 	.word	0x0001f849
   1fe40:	0000310c 	.word	0x0000310c
   1fe44:	00020aa1 	.word	0x00020aa1

0001fe48 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fe48:	b590      	push	{r4, r7, lr}
   1fe4a:	b089      	sub	sp, #36	; 0x24
   1fe4c:	af02      	add	r7, sp, #8
   1fe4e:	6039      	str	r1, [r7, #0]
   1fe50:	0011      	movs	r1, r2
   1fe52:	1dfb      	adds	r3, r7, #7
   1fe54:	1c02      	adds	r2, r0, #0
   1fe56:	701a      	strb	r2, [r3, #0]
   1fe58:	1d3b      	adds	r3, r7, #4
   1fe5a:	1c0a      	adds	r2, r1, #0
   1fe5c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fe5e:	230f      	movs	r3, #15
   1fe60:	18fc      	adds	r4, r7, r3
   1fe62:	1dfb      	adds	r3, r7, #7
   1fe64:	781b      	ldrb	r3, [r3, #0]
   1fe66:	0018      	movs	r0, r3
   1fe68:	4b28      	ldr	r3, [pc, #160]	; (1ff0c <sd_mmc_init_write_blocks+0xc4>)
   1fe6a:	4798      	blx	r3
   1fe6c:	0003      	movs	r3, r0
   1fe6e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fe70:	230f      	movs	r3, #15
   1fe72:	18fb      	adds	r3, r7, r3
   1fe74:	781b      	ldrb	r3, [r3, #0]
   1fe76:	2b00      	cmp	r3, #0
   1fe78:	d003      	beq.n	1fe82 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1fe7a:	230f      	movs	r3, #15
   1fe7c:	18fb      	adds	r3, r7, r3
   1fe7e:	781b      	ldrb	r3, [r3, #0]
   1fe80:	e03f      	b.n	1ff02 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1fe82:	1dfb      	adds	r3, r7, #7
   1fe84:	781b      	ldrb	r3, [r3, #0]
   1fe86:	0018      	movs	r0, r3
   1fe88:	4b21      	ldr	r3, [pc, #132]	; (1ff10 <sd_mmc_init_write_blocks+0xc8>)
   1fe8a:	4798      	blx	r3
   1fe8c:	1e03      	subs	r3, r0, #0
   1fe8e:	d003      	beq.n	1fe98 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1fe90:	4b20      	ldr	r3, [pc, #128]	; (1ff14 <sd_mmc_init_write_blocks+0xcc>)
   1fe92:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1fe94:	2307      	movs	r3, #7
   1fe96:	e034      	b.n	1ff02 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1fe98:	1d3b      	adds	r3, r7, #4
   1fe9a:	881b      	ldrh	r3, [r3, #0]
   1fe9c:	2b01      	cmp	r3, #1
   1fe9e:	d902      	bls.n	1fea6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1fea0:	4b1d      	ldr	r3, [pc, #116]	; (1ff18 <sd_mmc_init_write_blocks+0xd0>)
   1fea2:	617b      	str	r3, [r7, #20]
   1fea4:	e001      	b.n	1feaa <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1fea6:	4b1d      	ldr	r3, [pc, #116]	; (1ff1c <sd_mmc_init_write_blocks+0xd4>)
   1fea8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1feaa:	4b1d      	ldr	r3, [pc, #116]	; (1ff20 <sd_mmc_init_write_blocks+0xd8>)
   1feac:	681b      	ldr	r3, [r3, #0]
   1feae:	7adb      	ldrb	r3, [r3, #11]
   1feb0:	001a      	movs	r2, r3
   1feb2:	2308      	movs	r3, #8
   1feb4:	4013      	ands	r3, r2
   1feb6:	d002      	beq.n	1febe <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1feb8:	683b      	ldr	r3, [r7, #0]
   1feba:	613b      	str	r3, [r7, #16]
   1febc:	e002      	b.n	1fec4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1febe:	683b      	ldr	r3, [r7, #0]
   1fec0:	025b      	lsls	r3, r3, #9
   1fec2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fec4:	1d3b      	adds	r3, r7, #4
   1fec6:	881c      	ldrh	r4, [r3, #0]
   1fec8:	2380      	movs	r3, #128	; 0x80
   1feca:	009a      	lsls	r2, r3, #2
   1fecc:	6939      	ldr	r1, [r7, #16]
   1fece:	6978      	ldr	r0, [r7, #20]
   1fed0:	2301      	movs	r3, #1
   1fed2:	9300      	str	r3, [sp, #0]
   1fed4:	0023      	movs	r3, r4
   1fed6:	4c13      	ldr	r4, [pc, #76]	; (1ff24 <sd_mmc_init_write_blocks+0xdc>)
   1fed8:	47a0      	blx	r4
   1feda:	0003      	movs	r3, r0
   1fedc:	001a      	movs	r2, r3
   1fede:	2301      	movs	r3, #1
   1fee0:	4053      	eors	r3, r2
   1fee2:	b2db      	uxtb	r3, r3
   1fee4:	2b00      	cmp	r3, #0
   1fee6:	d003      	beq.n	1fef0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1fee8:	4b0a      	ldr	r3, [pc, #40]	; (1ff14 <sd_mmc_init_write_blocks+0xcc>)
   1feea:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1feec:	2305      	movs	r3, #5
   1feee:	e008      	b.n	1ff02 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fef0:	4b0d      	ldr	r3, [pc, #52]	; (1ff28 <sd_mmc_init_write_blocks+0xe0>)
   1fef2:	1d3a      	adds	r2, r7, #4
   1fef4:	8812      	ldrh	r2, [r2, #0]
   1fef6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fef8:	4b0c      	ldr	r3, [pc, #48]	; (1ff2c <sd_mmc_init_write_blocks+0xe4>)
   1fefa:	1d3a      	adds	r2, r7, #4
   1fefc:	8812      	ldrh	r2, [r2, #0]
   1fefe:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ff00:	2300      	movs	r3, #0
}
   1ff02:	0018      	movs	r0, r3
   1ff04:	46bd      	mov	sp, r7
   1ff06:	b007      	add	sp, #28
   1ff08:	bd90      	pop	{r4, r7, pc}
   1ff0a:	46c0      	nop			; (mov r8, r8)
   1ff0c:	0001f74d 	.word	0x0001f74d
   1ff10:	0001fc55 	.word	0x0001fc55
   1ff14:	0001f849 	.word	0x0001f849
   1ff18:	00109119 	.word	0x00109119
   1ff1c:	00089118 	.word	0x00089118
   1ff20:	20004244 	.word	0x20004244
   1ff24:	00020ac9 	.word	0x00020ac9
   1ff28:	2000424a 	.word	0x2000424a
   1ff2c:	20004248 	.word	0x20004248

0001ff30 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1ff30:	b580      	push	{r7, lr}
   1ff32:	b082      	sub	sp, #8
   1ff34:	af00      	add	r7, sp, #0
   1ff36:	6078      	str	r0, [r7, #4]
   1ff38:	000a      	movs	r2, r1
   1ff3a:	1cbb      	adds	r3, r7, #2
   1ff3c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1ff3e:	1cbb      	adds	r3, r7, #2
   1ff40:	881a      	ldrh	r2, [r3, #0]
   1ff42:	687b      	ldr	r3, [r7, #4]
   1ff44:	0011      	movs	r1, r2
   1ff46:	0018      	movs	r0, r3
   1ff48:	4b0d      	ldr	r3, [pc, #52]	; (1ff80 <sd_mmc_start_write_blocks+0x50>)
   1ff4a:	4798      	blx	r3
   1ff4c:	0003      	movs	r3, r0
   1ff4e:	001a      	movs	r2, r3
   1ff50:	2301      	movs	r3, #1
   1ff52:	4053      	eors	r3, r2
   1ff54:	b2db      	uxtb	r3, r3
   1ff56:	2b00      	cmp	r3, #0
   1ff58:	d004      	beq.n	1ff64 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ff5a:	4b0a      	ldr	r3, [pc, #40]	; (1ff84 <sd_mmc_start_write_blocks+0x54>)
   1ff5c:	2200      	movs	r2, #0
   1ff5e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ff60:	2305      	movs	r3, #5
   1ff62:	e008      	b.n	1ff76 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ff64:	4b07      	ldr	r3, [pc, #28]	; (1ff84 <sd_mmc_start_write_blocks+0x54>)
   1ff66:	881a      	ldrh	r2, [r3, #0]
   1ff68:	1cbb      	adds	r3, r7, #2
   1ff6a:	881b      	ldrh	r3, [r3, #0]
   1ff6c:	1ad3      	subs	r3, r2, r3
   1ff6e:	b29a      	uxth	r2, r3
   1ff70:	4b04      	ldr	r3, [pc, #16]	; (1ff84 <sd_mmc_start_write_blocks+0x54>)
   1ff72:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ff74:	2300      	movs	r3, #0
}
   1ff76:	0018      	movs	r0, r3
   1ff78:	46bd      	mov	sp, r7
   1ff7a:	b002      	add	sp, #8
   1ff7c:	bd80      	pop	{r7, pc}
   1ff7e:	46c0      	nop			; (mov r8, r8)
   1ff80:	00020e49 	.word	0x00020e49
   1ff84:	2000424a 	.word	0x2000424a

0001ff88 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1ff88:	b580      	push	{r7, lr}
   1ff8a:	b082      	sub	sp, #8
   1ff8c:	af00      	add	r7, sp, #0
   1ff8e:	0002      	movs	r2, r0
   1ff90:	1dfb      	adds	r3, r7, #7
   1ff92:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1ff94:	4b13      	ldr	r3, [pc, #76]	; (1ffe4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1ff96:	4798      	blx	r3
   1ff98:	0003      	movs	r3, r0
   1ff9a:	001a      	movs	r2, r3
   1ff9c:	2301      	movs	r3, #1
   1ff9e:	4053      	eors	r3, r2
   1ffa0:	b2db      	uxtb	r3, r3
   1ffa2:	2b00      	cmp	r3, #0
   1ffa4:	d001      	beq.n	1ffaa <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ffa6:	2305      	movs	r3, #5
   1ffa8:	e018      	b.n	1ffdc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1ffaa:	1dfb      	adds	r3, r7, #7
   1ffac:	781b      	ldrb	r3, [r3, #0]
   1ffae:	2b00      	cmp	r3, #0
   1ffb0:	d003      	beq.n	1ffba <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ffb2:	4b0d      	ldr	r3, [pc, #52]	; (1ffe8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ffb4:	2200      	movs	r2, #0
   1ffb6:	801a      	strh	r2, [r3, #0]
   1ffb8:	e005      	b.n	1ffc6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ffba:	4b0b      	ldr	r3, [pc, #44]	; (1ffe8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ffbc:	881b      	ldrh	r3, [r3, #0]
   1ffbe:	2b00      	cmp	r3, #0
   1ffc0:	d001      	beq.n	1ffc6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1ffc2:	2300      	movs	r3, #0
   1ffc4:	e00a      	b.n	1ffdc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ffc6:	4b09      	ldr	r3, [pc, #36]	; (1ffec <sd_mmc_wait_end_of_write_blocks+0x64>)
   1ffc8:	881b      	ldrh	r3, [r3, #0]
   1ffca:	2b01      	cmp	r3, #1
   1ffcc:	d103      	bne.n	1ffd6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ffce:	4b08      	ldr	r3, [pc, #32]	; (1fff0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ffd0:	4798      	blx	r3
		return SD_MMC_OK;
   1ffd2:	2300      	movs	r3, #0
   1ffd4:	e002      	b.n	1ffdc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1ffd6:	4b06      	ldr	r3, [pc, #24]	; (1fff0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ffd8:	4798      	blx	r3
	return SD_MMC_OK;
   1ffda:	2300      	movs	r3, #0
}
   1ffdc:	0018      	movs	r0, r3
   1ffde:	46bd      	mov	sp, r7
   1ffe0:	b002      	add	sp, #8
   1ffe2:	bd80      	pop	{r7, pc}
   1ffe4:	00020f09 	.word	0x00020f09
   1ffe8:	2000424a 	.word	0x2000424a
   1ffec:	20004248 	.word	0x20004248
   1fff0:	0001f849 	.word	0x0001f849

0001fff4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1fff4:	b580      	push	{r7, lr}
   1fff6:	b082      	sub	sp, #8
   1fff8:	af00      	add	r7, sp, #0
   1fffa:	0002      	movs	r2, r0
   1fffc:	1dfb      	adds	r3, r7, #7
   1fffe:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   20000:	1dfb      	adds	r3, r7, #7
   20002:	781b      	ldrb	r3, [r3, #0]
   20004:	0018      	movs	r0, r3
   20006:	4b16      	ldr	r3, [pc, #88]	; (20060 <sd_mmc_test_unit_ready+0x6c>)
   20008:	4798      	blx	r3
   2000a:	0003      	movs	r3, r0
   2000c:	2b01      	cmp	r3, #1
   2000e:	d019      	beq.n	20044 <sd_mmc_test_unit_ready+0x50>
   20010:	2b02      	cmp	r3, #2
   20012:	d019      	beq.n	20048 <sd_mmc_test_unit_ready+0x54>
   20014:	2b00      	cmp	r3, #0
   20016:	d11e      	bne.n	20056 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   20018:	1dfb      	adds	r3, r7, #7
   2001a:	781b      	ldrb	r3, [r3, #0]
   2001c:	4a11      	ldr	r2, [pc, #68]	; (20064 <sd_mmc_test_unit_ready+0x70>)
   2001e:	5cd3      	ldrb	r3, [r2, r3]
   20020:	2b00      	cmp	r3, #0
   20022:	d001      	beq.n	20028 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   20024:	2302      	movs	r3, #2
   20026:	e017      	b.n	20058 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   20028:	1dfb      	adds	r3, r7, #7
   2002a:	781b      	ldrb	r3, [r3, #0]
   2002c:	0018      	movs	r0, r3
   2002e:	4b0e      	ldr	r3, [pc, #56]	; (20068 <sd_mmc_test_unit_ready+0x74>)
   20030:	4798      	blx	r3
   20032:	0003      	movs	r3, r0
   20034:	001a      	movs	r2, r3
   20036:	2303      	movs	r3, #3
   20038:	4013      	ands	r3, r2
   2003a:	d001      	beq.n	20040 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   2003c:	2300      	movs	r3, #0
   2003e:	e00b      	b.n	20058 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   20040:	2302      	movs	r3, #2
   20042:	e009      	b.n	20058 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   20044:	2303      	movs	r3, #3
   20046:	e007      	b.n	20058 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   20048:	1dfb      	adds	r3, r7, #7
   2004a:	781b      	ldrb	r3, [r3, #0]
   2004c:	4a05      	ldr	r2, [pc, #20]	; (20064 <sd_mmc_test_unit_ready+0x70>)
   2004e:	2100      	movs	r1, #0
   20050:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   20052:	2302      	movs	r3, #2
   20054:	e000      	b.n	20058 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   20056:	2301      	movs	r3, #1
	}
}
   20058:	0018      	movs	r0, r3
   2005a:	46bd      	mov	sp, r7
   2005c:	b002      	add	sp, #8
   2005e:	bd80      	pop	{r7, pc}
   20060:	0001fb69 	.word	0x0001fb69
   20064:	2000424c 	.word	0x2000424c
   20068:	0001fbdd 	.word	0x0001fbdd

0002006c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   2006c:	b580      	push	{r7, lr}
   2006e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   20070:	2000      	movs	r0, #0
   20072:	4b03      	ldr	r3, [pc, #12]	; (20080 <sd_mmc_test_unit_ready_0+0x14>)
   20074:	4798      	blx	r3
   20076:	0003      	movs	r3, r0
}
   20078:	0018      	movs	r0, r3
   2007a:	46bd      	mov	sp, r7
   2007c:	bd80      	pop	{r7, pc}
   2007e:	46c0      	nop			; (mov r8, r8)
   20080:	0001fff5 	.word	0x0001fff5

00020084 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   20084:	b580      	push	{r7, lr}
   20086:	b082      	sub	sp, #8
   20088:	af00      	add	r7, sp, #0
   2008a:	0002      	movs	r2, r0
   2008c:	6039      	str	r1, [r7, #0]
   2008e:	1dfb      	adds	r3, r7, #7
   20090:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   20092:	1dfb      	adds	r3, r7, #7
   20094:	781b      	ldrb	r3, [r3, #0]
   20096:	0018      	movs	r0, r3
   20098:	4b08      	ldr	r3, [pc, #32]	; (200bc <sd_mmc_read_capacity+0x38>)
   2009a:	4798      	blx	r3
   2009c:	0003      	movs	r3, r0
   2009e:	005b      	lsls	r3, r3, #1
   200a0:	1e5a      	subs	r2, r3, #1
   200a2:	683b      	ldr	r3, [r7, #0]
   200a4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   200a6:	1dfb      	adds	r3, r7, #7
   200a8:	781b      	ldrb	r3, [r3, #0]
   200aa:	0018      	movs	r0, r3
   200ac:	4b04      	ldr	r3, [pc, #16]	; (200c0 <sd_mmc_read_capacity+0x3c>)
   200ae:	4798      	blx	r3
   200b0:	0003      	movs	r3, r0
}
   200b2:	0018      	movs	r0, r3
   200b4:	46bd      	mov	sp, r7
   200b6:	b002      	add	sp, #8
   200b8:	bd80      	pop	{r7, pc}
   200ba:	46c0      	nop			; (mov r8, r8)
   200bc:	0001fc19 	.word	0x0001fc19
   200c0:	0001fff5 	.word	0x0001fff5

000200c4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   200c4:	b580      	push	{r7, lr}
   200c6:	b082      	sub	sp, #8
   200c8:	af00      	add	r7, sp, #0
   200ca:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   200cc:	687b      	ldr	r3, [r7, #4]
   200ce:	0019      	movs	r1, r3
   200d0:	2000      	movs	r0, #0
   200d2:	4b03      	ldr	r3, [pc, #12]	; (200e0 <sd_mmc_read_capacity_0+0x1c>)
   200d4:	4798      	blx	r3
   200d6:	0003      	movs	r3, r0
}
   200d8:	0018      	movs	r0, r3
   200da:	46bd      	mov	sp, r7
   200dc:	b002      	add	sp, #8
   200de:	bd80      	pop	{r7, pc}
   200e0:	00020085 	.word	0x00020085

000200e4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   200e4:	b580      	push	{r7, lr}
   200e6:	b082      	sub	sp, #8
   200e8:	af00      	add	r7, sp, #0
   200ea:	0002      	movs	r2, r0
   200ec:	1dfb      	adds	r3, r7, #7
   200ee:	701a      	strb	r2, [r3, #0]
   200f0:	1dbb      	adds	r3, r7, #6
   200f2:	1c0a      	adds	r2, r1, #0
   200f4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   200f6:	1dfb      	adds	r3, r7, #7
   200f8:	781b      	ldrb	r3, [r3, #0]
   200fa:	4a04      	ldr	r2, [pc, #16]	; (2010c <sd_mmc_unload+0x28>)
   200fc:	1db9      	adds	r1, r7, #6
   200fe:	7809      	ldrb	r1, [r1, #0]
   20100:	54d1      	strb	r1, [r2, r3]
	return true;
   20102:	2301      	movs	r3, #1
}
   20104:	0018      	movs	r0, r3
   20106:	46bd      	mov	sp, r7
   20108:	b002      	add	sp, #8
   2010a:	bd80      	pop	{r7, pc}
   2010c:	2000424c 	.word	0x2000424c

00020110 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   20110:	b580      	push	{r7, lr}
   20112:	b082      	sub	sp, #8
   20114:	af00      	add	r7, sp, #0
   20116:	0002      	movs	r2, r0
   20118:	1dfb      	adds	r3, r7, #7
   2011a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   2011c:	1dfb      	adds	r3, r7, #7
   2011e:	781b      	ldrb	r3, [r3, #0]
   20120:	0019      	movs	r1, r3
   20122:	2000      	movs	r0, #0
   20124:	4b03      	ldr	r3, [pc, #12]	; (20134 <sd_mmc_unload_0+0x24>)
   20126:	4798      	blx	r3
   20128:	0003      	movs	r3, r0
}
   2012a:	0018      	movs	r0, r3
   2012c:	46bd      	mov	sp, r7
   2012e:	b002      	add	sp, #8
   20130:	bd80      	pop	{r7, pc}
   20132:	46c0      	nop			; (mov r8, r8)
   20134:	000200e5 	.word	0x000200e5

00020138 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   20138:	b580      	push	{r7, lr}
   2013a:	b082      	sub	sp, #8
   2013c:	af00      	add	r7, sp, #0
   2013e:	0002      	movs	r2, r0
   20140:	1dfb      	adds	r3, r7, #7
   20142:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   20144:	1dfb      	adds	r3, r7, #7
   20146:	781b      	ldrb	r3, [r3, #0]
   20148:	0018      	movs	r0, r3
   2014a:	4b03      	ldr	r3, [pc, #12]	; (20158 <sd_mmc_wr_protect+0x20>)
   2014c:	4798      	blx	r3
   2014e:	0003      	movs	r3, r0
}
   20150:	0018      	movs	r0, r3
   20152:	46bd      	mov	sp, r7
   20154:	b002      	add	sp, #8
   20156:	bd80      	pop	{r7, pc}
   20158:	0001fc55 	.word	0x0001fc55

0002015c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   2015c:	b580      	push	{r7, lr}
   2015e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   20160:	2000      	movs	r0, #0
   20162:	4b03      	ldr	r3, [pc, #12]	; (20170 <sd_mmc_wr_protect_0+0x14>)
   20164:	4798      	blx	r3
   20166:	0003      	movs	r3, r0
}
   20168:	0018      	movs	r0, r3
   2016a:	46bd      	mov	sp, r7
   2016c:	bd80      	pop	{r7, pc}
   2016e:	46c0      	nop			; (mov r8, r8)
   20170:	00020139 	.word	0x00020139

00020174 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   20174:	b580      	push	{r7, lr}
   20176:	b082      	sub	sp, #8
   20178:	af00      	add	r7, sp, #0
   2017a:	0002      	movs	r2, r0
   2017c:	1dfb      	adds	r3, r7, #7
   2017e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   20180:	2301      	movs	r3, #1
}
   20182:	0018      	movs	r0, r3
   20184:	46bd      	mov	sp, r7
   20186:	b002      	add	sp, #8
   20188:	bd80      	pop	{r7, pc}
	...

0002018c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   2018c:	b580      	push	{r7, lr}
   2018e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   20190:	2000      	movs	r0, #0
   20192:	4b03      	ldr	r3, [pc, #12]	; (201a0 <sd_mmc_removal_0+0x14>)
   20194:	4798      	blx	r3
   20196:	0003      	movs	r3, r0
}
   20198:	0018      	movs	r0, r3
   2019a:	46bd      	mov	sp, r7
   2019c:	bd80      	pop	{r7, pc}
   2019e:	46c0      	nop			; (mov r8, r8)
   201a0:	00020175 	.word	0x00020175

000201a4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   201a4:	b580      	push	{r7, lr}
   201a6:	b084      	sub	sp, #16
   201a8:	af00      	add	r7, sp, #0
   201aa:	60b9      	str	r1, [r7, #8]
   201ac:	607a      	str	r2, [r7, #4]
   201ae:	230f      	movs	r3, #15
   201b0:	18fb      	adds	r3, r7, r3
   201b2:	1c02      	adds	r2, r0, #0
   201b4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   201b6:	68b9      	ldr	r1, [r7, #8]
   201b8:	230f      	movs	r3, #15
   201ba:	18fb      	adds	r3, r7, r3
   201bc:	781b      	ldrb	r3, [r3, #0]
   201be:	2201      	movs	r2, #1
   201c0:	0018      	movs	r0, r3
   201c2:	4b10      	ldr	r3, [pc, #64]	; (20204 <sd_mmc_mem_2_ram+0x60>)
   201c4:	4798      	blx	r3
   201c6:	1e03      	subs	r3, r0, #0
   201c8:	d005      	beq.n	201d6 <sd_mmc_mem_2_ram+0x32>
   201ca:	2b02      	cmp	r3, #2
   201cc:	d101      	bne.n	201d2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   201ce:	2302      	movs	r3, #2
   201d0:	e013      	b.n	201fa <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   201d2:	2301      	movs	r3, #1
   201d4:	e011      	b.n	201fa <sd_mmc_mem_2_ram+0x56>
		break;
   201d6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   201d8:	687b      	ldr	r3, [r7, #4]
   201da:	2101      	movs	r1, #1
   201dc:	0018      	movs	r0, r3
   201de:	4b0a      	ldr	r3, [pc, #40]	; (20208 <sd_mmc_mem_2_ram+0x64>)
   201e0:	4798      	blx	r3
   201e2:	1e03      	subs	r3, r0, #0
   201e4:	d001      	beq.n	201ea <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   201e6:	2301      	movs	r3, #1
   201e8:	e007      	b.n	201fa <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   201ea:	2000      	movs	r0, #0
   201ec:	4b07      	ldr	r3, [pc, #28]	; (2020c <sd_mmc_mem_2_ram+0x68>)
   201ee:	4798      	blx	r3
   201f0:	1e03      	subs	r3, r0, #0
   201f2:	d001      	beq.n	201f8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   201f4:	2301      	movs	r3, #1
   201f6:	e000      	b.n	201fa <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   201f8:	2300      	movs	r3, #0
}
   201fa:	0018      	movs	r0, r3
   201fc:	46bd      	mov	sp, r7
   201fe:	b004      	add	sp, #16
   20200:	bd80      	pop	{r7, pc}
   20202:	46c0      	nop			; (mov r8, r8)
   20204:	0001fc6d 	.word	0x0001fc6d
   20208:	0001fd59 	.word	0x0001fd59
   2020c:	0001fdb1 	.word	0x0001fdb1

00020210 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   20210:	b580      	push	{r7, lr}
   20212:	b082      	sub	sp, #8
   20214:	af00      	add	r7, sp, #0
   20216:	6078      	str	r0, [r7, #4]
   20218:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   2021a:	683a      	ldr	r2, [r7, #0]
   2021c:	687b      	ldr	r3, [r7, #4]
   2021e:	0019      	movs	r1, r3
   20220:	2000      	movs	r0, #0
   20222:	4b03      	ldr	r3, [pc, #12]	; (20230 <sd_mmc_mem_2_ram_0+0x20>)
   20224:	4798      	blx	r3
   20226:	0003      	movs	r3, r0
}
   20228:	0018      	movs	r0, r3
   2022a:	46bd      	mov	sp, r7
   2022c:	b002      	add	sp, #8
   2022e:	bd80      	pop	{r7, pc}
   20230:	000201a5 	.word	0x000201a5

00020234 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   20234:	b580      	push	{r7, lr}
   20236:	b084      	sub	sp, #16
   20238:	af00      	add	r7, sp, #0
   2023a:	60b9      	str	r1, [r7, #8]
   2023c:	607a      	str	r2, [r7, #4]
   2023e:	230f      	movs	r3, #15
   20240:	18fb      	adds	r3, r7, r3
   20242:	1c02      	adds	r2, r0, #0
   20244:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   20246:	68b9      	ldr	r1, [r7, #8]
   20248:	230f      	movs	r3, #15
   2024a:	18fb      	adds	r3, r7, r3
   2024c:	781b      	ldrb	r3, [r3, #0]
   2024e:	2201      	movs	r2, #1
   20250:	0018      	movs	r0, r3
   20252:	4b10      	ldr	r3, [pc, #64]	; (20294 <sd_mmc_ram_2_mem+0x60>)
   20254:	4798      	blx	r3
   20256:	1e03      	subs	r3, r0, #0
   20258:	d005      	beq.n	20266 <sd_mmc_ram_2_mem+0x32>
   2025a:	2b02      	cmp	r3, #2
   2025c:	d101      	bne.n	20262 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2025e:	2302      	movs	r3, #2
   20260:	e013      	b.n	2028a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   20262:	2301      	movs	r3, #1
   20264:	e011      	b.n	2028a <sd_mmc_ram_2_mem+0x56>
		break;
   20266:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   20268:	687b      	ldr	r3, [r7, #4]
   2026a:	2101      	movs	r1, #1
   2026c:	0018      	movs	r0, r3
   2026e:	4b0a      	ldr	r3, [pc, #40]	; (20298 <sd_mmc_ram_2_mem+0x64>)
   20270:	4798      	blx	r3
   20272:	1e03      	subs	r3, r0, #0
   20274:	d001      	beq.n	2027a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   20276:	2301      	movs	r3, #1
   20278:	e007      	b.n	2028a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   2027a:	2000      	movs	r0, #0
   2027c:	4b07      	ldr	r3, [pc, #28]	; (2029c <sd_mmc_ram_2_mem+0x68>)
   2027e:	4798      	blx	r3
   20280:	1e03      	subs	r3, r0, #0
   20282:	d001      	beq.n	20288 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   20284:	2301      	movs	r3, #1
   20286:	e000      	b.n	2028a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   20288:	2300      	movs	r3, #0
}
   2028a:	0018      	movs	r0, r3
   2028c:	46bd      	mov	sp, r7
   2028e:	b004      	add	sp, #16
   20290:	bd80      	pop	{r7, pc}
   20292:	46c0      	nop			; (mov r8, r8)
   20294:	0001fe49 	.word	0x0001fe49
   20298:	0001ff31 	.word	0x0001ff31
   2029c:	0001ff89 	.word	0x0001ff89

000202a0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   202a0:	b580      	push	{r7, lr}
   202a2:	b082      	sub	sp, #8
   202a4:	af00      	add	r7, sp, #0
   202a6:	6078      	str	r0, [r7, #4]
   202a8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   202aa:	683a      	ldr	r2, [r7, #0]
   202ac:	687b      	ldr	r3, [r7, #4]
   202ae:	0019      	movs	r1, r3
   202b0:	2000      	movs	r0, #0
   202b2:	4b03      	ldr	r3, [pc, #12]	; (202c0 <sd_mmc_ram_2_mem_0+0x20>)
   202b4:	4798      	blx	r3
   202b6:	0003      	movs	r3, r0
}
   202b8:	0018      	movs	r0, r3
   202ba:	46bd      	mov	sp, r7
   202bc:	b002      	add	sp, #8
   202be:	bd80      	pop	{r7, pc}
   202c0:	00020235 	.word	0x00020235

000202c4 <system_pinmux_get_group_from_gpio_pin>:
{
   202c4:	b580      	push	{r7, lr}
   202c6:	b084      	sub	sp, #16
   202c8:	af00      	add	r7, sp, #0
   202ca:	0002      	movs	r2, r0
   202cc:	1dfb      	adds	r3, r7, #7
   202ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   202d0:	230f      	movs	r3, #15
   202d2:	18fb      	adds	r3, r7, r3
   202d4:	1dfa      	adds	r2, r7, #7
   202d6:	7812      	ldrb	r2, [r2, #0]
   202d8:	09d2      	lsrs	r2, r2, #7
   202da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   202dc:	230e      	movs	r3, #14
   202de:	18fb      	adds	r3, r7, r3
   202e0:	1dfa      	adds	r2, r7, #7
   202e2:	7812      	ldrb	r2, [r2, #0]
   202e4:	0952      	lsrs	r2, r2, #5
   202e6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   202e8:	4b0d      	ldr	r3, [pc, #52]	; (20320 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   202ea:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   202ec:	230f      	movs	r3, #15
   202ee:	18fb      	adds	r3, r7, r3
   202f0:	781b      	ldrb	r3, [r3, #0]
   202f2:	2b00      	cmp	r3, #0
   202f4:	d10f      	bne.n	20316 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   202f6:	230f      	movs	r3, #15
   202f8:	18fb      	adds	r3, r7, r3
   202fa:	781b      	ldrb	r3, [r3, #0]
   202fc:	009b      	lsls	r3, r3, #2
   202fe:	2210      	movs	r2, #16
   20300:	4694      	mov	ip, r2
   20302:	44bc      	add	ip, r7
   20304:	4463      	add	r3, ip
   20306:	3b08      	subs	r3, #8
   20308:	681a      	ldr	r2, [r3, #0]
   2030a:	230e      	movs	r3, #14
   2030c:	18fb      	adds	r3, r7, r3
   2030e:	781b      	ldrb	r3, [r3, #0]
   20310:	01db      	lsls	r3, r3, #7
   20312:	18d3      	adds	r3, r2, r3
   20314:	e000      	b.n	20318 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20316:	2300      	movs	r3, #0
}
   20318:	0018      	movs	r0, r3
   2031a:	46bd      	mov	sp, r7
   2031c:	b004      	add	sp, #16
   2031e:	bd80      	pop	{r7, pc}
   20320:	41004400 	.word	0x41004400

00020324 <system_interrupt_enable>:
{
   20324:	b580      	push	{r7, lr}
   20326:	b082      	sub	sp, #8
   20328:	af00      	add	r7, sp, #0
   2032a:	0002      	movs	r2, r0
   2032c:	1dfb      	adds	r3, r7, #7
   2032e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20330:	4b06      	ldr	r3, [pc, #24]	; (2034c <system_interrupt_enable+0x28>)
   20332:	1dfa      	adds	r2, r7, #7
   20334:	7812      	ldrb	r2, [r2, #0]
   20336:	0011      	movs	r1, r2
   20338:	221f      	movs	r2, #31
   2033a:	400a      	ands	r2, r1
   2033c:	2101      	movs	r1, #1
   2033e:	4091      	lsls	r1, r2
   20340:	000a      	movs	r2, r1
   20342:	601a      	str	r2, [r3, #0]
}
   20344:	46c0      	nop			; (mov r8, r8)
   20346:	46bd      	mov	sp, r7
   20348:	b002      	add	sp, #8
   2034a:	bd80      	pop	{r7, pc}
   2034c:	e000e100 	.word	0xe000e100

00020350 <port_get_group_from_gpio_pin>:
{
   20350:	b580      	push	{r7, lr}
   20352:	b082      	sub	sp, #8
   20354:	af00      	add	r7, sp, #0
   20356:	0002      	movs	r2, r0
   20358:	1dfb      	adds	r3, r7, #7
   2035a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2035c:	1dfb      	adds	r3, r7, #7
   2035e:	781b      	ldrb	r3, [r3, #0]
   20360:	0018      	movs	r0, r3
   20362:	4b03      	ldr	r3, [pc, #12]	; (20370 <port_get_group_from_gpio_pin+0x20>)
   20364:	4798      	blx	r3
   20366:	0003      	movs	r3, r0
}
   20368:	0018      	movs	r0, r3
   2036a:	46bd      	mov	sp, r7
   2036c:	b002      	add	sp, #8
   2036e:	bd80      	pop	{r7, pc}
   20370:	000202c5 	.word	0x000202c5

00020374 <port_get_config_defaults>:
{
   20374:	b580      	push	{r7, lr}
   20376:	b082      	sub	sp, #8
   20378:	af00      	add	r7, sp, #0
   2037a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2037c:	687b      	ldr	r3, [r7, #4]
   2037e:	2200      	movs	r2, #0
   20380:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20382:	687b      	ldr	r3, [r7, #4]
   20384:	2201      	movs	r2, #1
   20386:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20388:	687b      	ldr	r3, [r7, #4]
   2038a:	2200      	movs	r2, #0
   2038c:	709a      	strb	r2, [r3, #2]
}
   2038e:	46c0      	nop			; (mov r8, r8)
   20390:	46bd      	mov	sp, r7
   20392:	b002      	add	sp, #8
   20394:	bd80      	pop	{r7, pc}
	...

00020398 <port_pin_set_output_level>:
{
   20398:	b580      	push	{r7, lr}
   2039a:	b084      	sub	sp, #16
   2039c:	af00      	add	r7, sp, #0
   2039e:	0002      	movs	r2, r0
   203a0:	1dfb      	adds	r3, r7, #7
   203a2:	701a      	strb	r2, [r3, #0]
   203a4:	1dbb      	adds	r3, r7, #6
   203a6:	1c0a      	adds	r2, r1, #0
   203a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   203aa:	1dfb      	adds	r3, r7, #7
   203ac:	781b      	ldrb	r3, [r3, #0]
   203ae:	0018      	movs	r0, r3
   203b0:	4b0d      	ldr	r3, [pc, #52]	; (203e8 <port_pin_set_output_level+0x50>)
   203b2:	4798      	blx	r3
   203b4:	0003      	movs	r3, r0
   203b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   203b8:	1dfb      	adds	r3, r7, #7
   203ba:	781b      	ldrb	r3, [r3, #0]
   203bc:	221f      	movs	r2, #31
   203be:	4013      	ands	r3, r2
   203c0:	2201      	movs	r2, #1
   203c2:	409a      	lsls	r2, r3
   203c4:	0013      	movs	r3, r2
   203c6:	60bb      	str	r3, [r7, #8]
	if (level) {
   203c8:	1dbb      	adds	r3, r7, #6
   203ca:	781b      	ldrb	r3, [r3, #0]
   203cc:	2b00      	cmp	r3, #0
   203ce:	d003      	beq.n	203d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   203d0:	68fb      	ldr	r3, [r7, #12]
   203d2:	68ba      	ldr	r2, [r7, #8]
   203d4:	619a      	str	r2, [r3, #24]
}
   203d6:	e002      	b.n	203de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   203d8:	68fb      	ldr	r3, [r7, #12]
   203da:	68ba      	ldr	r2, [r7, #8]
   203dc:	615a      	str	r2, [r3, #20]
}
   203de:	46c0      	nop			; (mov r8, r8)
   203e0:	46bd      	mov	sp, r7
   203e2:	b004      	add	sp, #16
   203e4:	bd80      	pop	{r7, pc}
   203e6:	46c0      	nop			; (mov r8, r8)
   203e8:	00020351 	.word	0x00020351

000203ec <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   203ec:	b580      	push	{r7, lr}
   203ee:	b084      	sub	sp, #16
   203f0:	af00      	add	r7, sp, #0
   203f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   203f4:	687b      	ldr	r3, [r7, #4]
   203f6:	681b      	ldr	r3, [r3, #0]
   203f8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   203fa:	68fb      	ldr	r3, [r7, #12]
   203fc:	69db      	ldr	r3, [r3, #28]
   203fe:	1e5a      	subs	r2, r3, #1
   20400:	4193      	sbcs	r3, r2
   20402:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   20404:	0018      	movs	r0, r3
   20406:	46bd      	mov	sp, r7
   20408:	b004      	add	sp, #16
   2040a:	bd80      	pop	{r7, pc}

0002040c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   2040c:	b580      	push	{r7, lr}
   2040e:	b082      	sub	sp, #8
   20410:	af00      	add	r7, sp, #0
   20412:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   20414:	687b      	ldr	r3, [r7, #4]
   20416:	2201      	movs	r2, #1
   20418:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2041a:	687b      	ldr	r3, [r7, #4]
   2041c:	2200      	movs	r2, #0
   2041e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20420:	687b      	ldr	r3, [r7, #4]
   20422:	2200      	movs	r2, #0
   20424:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   20426:	687b      	ldr	r3, [r7, #4]
   20428:	22c0      	movs	r2, #192	; 0xc0
   2042a:	0392      	lsls	r2, r2, #14
   2042c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   2042e:	687b      	ldr	r3, [r7, #4]
   20430:	2200      	movs	r2, #0
   20432:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20434:	687b      	ldr	r3, [r7, #4]
   20436:	2200      	movs	r2, #0
   20438:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2043a:	687b      	ldr	r3, [r7, #4]
   2043c:	2201      	movs	r2, #1
   2043e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20440:	687b      	ldr	r3, [r7, #4]
   20442:	2201      	movs	r2, #1
   20444:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   20446:	687b      	ldr	r3, [r7, #4]
   20448:	2200      	movs	r2, #0
   2044a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   2044c:	687b      	ldr	r3, [r7, #4]
   2044e:	2224      	movs	r2, #36	; 0x24
   20450:	2100      	movs	r1, #0
   20452:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20454:	687b      	ldr	r3, [r7, #4]
   20456:	3318      	adds	r3, #24
   20458:	220c      	movs	r2, #12
   2045a:	2100      	movs	r1, #0
   2045c:	0018      	movs	r0, r3
   2045e:	4b0a      	ldr	r3, [pc, #40]	; (20488 <spi_get_config_defaults+0x7c>)
   20460:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   20462:	687b      	ldr	r3, [r7, #4]
   20464:	4a09      	ldr	r2, [pc, #36]	; (2048c <spi_get_config_defaults+0x80>)
   20466:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20468:	687b      	ldr	r3, [r7, #4]
   2046a:	2200      	movs	r2, #0
   2046c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   2046e:	687b      	ldr	r3, [r7, #4]
   20470:	2200      	movs	r2, #0
   20472:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20474:	687b      	ldr	r3, [r7, #4]
   20476:	2200      	movs	r2, #0
   20478:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2047a:	687b      	ldr	r3, [r7, #4]
   2047c:	2200      	movs	r2, #0
   2047e:	635a      	str	r2, [r3, #52]	; 0x34

};
   20480:	46c0      	nop			; (mov r8, r8)
   20482:	46bd      	mov	sp, r7
   20484:	b002      	add	sp, #8
   20486:	bd80      	pop	{r7, pc}
   20488:	0003577f 	.word	0x0003577f
   2048c:	000186a0 	.word	0x000186a0

00020490 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20490:	b580      	push	{r7, lr}
   20492:	b082      	sub	sp, #8
   20494:	af00      	add	r7, sp, #0
   20496:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20498:	687b      	ldr	r3, [r7, #4]
   2049a:	220a      	movs	r2, #10
   2049c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   2049e:	687b      	ldr	r3, [r7, #4]
   204a0:	2200      	movs	r2, #0
   204a2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   204a4:	687b      	ldr	r3, [r7, #4]
   204a6:	2200      	movs	r2, #0
   204a8:	709a      	strb	r2, [r3, #2]
}
   204aa:	46c0      	nop			; (mov r8, r8)
   204ac:	46bd      	mov	sp, r7
   204ae:	b002      	add	sp, #8
   204b0:	bd80      	pop	{r7, pc}
	...

000204b4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   204b4:	b580      	push	{r7, lr}
   204b6:	b084      	sub	sp, #16
   204b8:	af00      	add	r7, sp, #0
   204ba:	6078      	str	r0, [r7, #4]
   204bc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   204be:	683b      	ldr	r3, [r7, #0]
   204c0:	781a      	ldrb	r2, [r3, #0]
   204c2:	687b      	ldr	r3, [r7, #4]
   204c4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   204c6:	683b      	ldr	r3, [r7, #0]
   204c8:	785a      	ldrb	r2, [r3, #1]
   204ca:	687b      	ldr	r3, [r7, #4]
   204cc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   204ce:	683b      	ldr	r3, [r7, #0]
   204d0:	789a      	ldrb	r2, [r3, #2]
   204d2:	687b      	ldr	r3, [r7, #4]
   204d4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   204d6:	230c      	movs	r3, #12
   204d8:	18fb      	adds	r3, r7, r3
   204da:	0018      	movs	r0, r3
   204dc:	4b0b      	ldr	r3, [pc, #44]	; (2050c <spi_attach_slave+0x58>)
   204de:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   204e0:	230c      	movs	r3, #12
   204e2:	18fb      	adds	r3, r7, r3
   204e4:	2201      	movs	r2, #1
   204e6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   204e8:	687b      	ldr	r3, [r7, #4]
   204ea:	781b      	ldrb	r3, [r3, #0]
   204ec:	220c      	movs	r2, #12
   204ee:	18ba      	adds	r2, r7, r2
   204f0:	0011      	movs	r1, r2
   204f2:	0018      	movs	r0, r3
   204f4:	4b06      	ldr	r3, [pc, #24]	; (20510 <spi_attach_slave+0x5c>)
   204f6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   204f8:	687b      	ldr	r3, [r7, #4]
   204fa:	781b      	ldrb	r3, [r3, #0]
   204fc:	2101      	movs	r1, #1
   204fe:	0018      	movs	r0, r3
   20500:	4b04      	ldr	r3, [pc, #16]	; (20514 <spi_attach_slave+0x60>)
   20502:	4798      	blx	r3
}
   20504:	46c0      	nop			; (mov r8, r8)
   20506:	46bd      	mov	sp, r7
   20508:	b004      	add	sp, #16
   2050a:	bd80      	pop	{r7, pc}
   2050c:	00020375 	.word	0x00020375
   20510:	00027781 	.word	0x00027781
   20514:	00020399 	.word	0x00020399

00020518 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   20518:	b580      	push	{r7, lr}
   2051a:	b084      	sub	sp, #16
   2051c:	af00      	add	r7, sp, #0
   2051e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20520:	687b      	ldr	r3, [r7, #4]
   20522:	681b      	ldr	r3, [r3, #0]
   20524:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20526:	687b      	ldr	r3, [r7, #4]
   20528:	681b      	ldr	r3, [r3, #0]
   2052a:	0018      	movs	r0, r3
   2052c:	4b0b      	ldr	r3, [pc, #44]	; (2055c <spi_enable+0x44>)
   2052e:	4798      	blx	r3
   20530:	0003      	movs	r3, r0
   20532:	0018      	movs	r0, r3
   20534:	4b0a      	ldr	r3, [pc, #40]	; (20560 <spi_enable+0x48>)
   20536:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20538:	46c0      	nop			; (mov r8, r8)
   2053a:	687b      	ldr	r3, [r7, #4]
   2053c:	0018      	movs	r0, r3
   2053e:	4b09      	ldr	r3, [pc, #36]	; (20564 <spi_enable+0x4c>)
   20540:	4798      	blx	r3
   20542:	1e03      	subs	r3, r0, #0
   20544:	d1f9      	bne.n	2053a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   20546:	68fb      	ldr	r3, [r7, #12]
   20548:	681b      	ldr	r3, [r3, #0]
   2054a:	2202      	movs	r2, #2
   2054c:	431a      	orrs	r2, r3
   2054e:	68fb      	ldr	r3, [r7, #12]
   20550:	601a      	str	r2, [r3, #0]
}
   20552:	46c0      	nop			; (mov r8, r8)
   20554:	46bd      	mov	sp, r7
   20556:	b004      	add	sp, #16
   20558:	bd80      	pop	{r7, pc}
   2055a:	46c0      	nop			; (mov r8, r8)
   2055c:	00028451 	.word	0x00028451
   20560:	00020325 	.word	0x00020325
   20564:	000203ed 	.word	0x000203ed

00020568 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   20568:	b580      	push	{r7, lr}
   2056a:	b084      	sub	sp, #16
   2056c:	af00      	add	r7, sp, #0
   2056e:	6078      	str	r0, [r7, #4]
   20570:	000a      	movs	r2, r1
   20572:	1cfb      	adds	r3, r7, #3
   20574:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   20576:	230f      	movs	r3, #15
   20578:	18fb      	adds	r3, r7, r3
   2057a:	2200      	movs	r2, #0
   2057c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   2057e:	e038      	b.n	205f2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   20580:	687b      	ldr	r3, [r7, #4]
   20582:	1c5a      	adds	r2, r3, #1
   20584:	607a      	str	r2, [r7, #4]
   20586:	220e      	movs	r2, #14
   20588:	18ba      	adds	r2, r7, r2
   2058a:	781b      	ldrb	r3, [r3, #0]
   2058c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2058e:	230d      	movs	r3, #13
   20590:	18fb      	adds	r3, r7, r3
   20592:	2200      	movs	r2, #0
   20594:	701a      	strb	r2, [r3, #0]
   20596:	e027      	b.n	205e8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   20598:	230f      	movs	r3, #15
   2059a:	18fa      	adds	r2, r7, r3
   2059c:	230f      	movs	r3, #15
   2059e:	18fb      	adds	r3, r7, r3
   205a0:	781b      	ldrb	r3, [r3, #0]
   205a2:	18db      	adds	r3, r3, r3
   205a4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   205a6:	230e      	movs	r3, #14
   205a8:	18fa      	adds	r2, r7, r3
   205aa:	230f      	movs	r3, #15
   205ac:	18fb      	adds	r3, r7, r3
   205ae:	7812      	ldrb	r2, [r2, #0]
   205b0:	781b      	ldrb	r3, [r3, #0]
   205b2:	4053      	eors	r3, r2
   205b4:	b2db      	uxtb	r3, r3
   205b6:	b25b      	sxtb	r3, r3
   205b8:	2b00      	cmp	r3, #0
   205ba:	da07      	bge.n	205cc <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   205bc:	230f      	movs	r3, #15
   205be:	18fb      	adds	r3, r7, r3
   205c0:	220f      	movs	r2, #15
   205c2:	18ba      	adds	r2, r7, r2
   205c4:	7812      	ldrb	r2, [r2, #0]
   205c6:	2109      	movs	r1, #9
   205c8:	404a      	eors	r2, r1
   205ca:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   205cc:	230e      	movs	r3, #14
   205ce:	18fa      	adds	r2, r7, r3
   205d0:	230e      	movs	r3, #14
   205d2:	18fb      	adds	r3, r7, r3
   205d4:	781b      	ldrb	r3, [r3, #0]
   205d6:	18db      	adds	r3, r3, r3
   205d8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   205da:	230d      	movs	r3, #13
   205dc:	18fb      	adds	r3, r7, r3
   205de:	781a      	ldrb	r2, [r3, #0]
   205e0:	230d      	movs	r3, #13
   205e2:	18fb      	adds	r3, r7, r3
   205e4:	3201      	adds	r2, #1
   205e6:	701a      	strb	r2, [r3, #0]
   205e8:	230d      	movs	r3, #13
   205ea:	18fb      	adds	r3, r7, r3
   205ec:	781b      	ldrb	r3, [r3, #0]
   205ee:	2b07      	cmp	r3, #7
   205f0:	d9d2      	bls.n	20598 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   205f2:	1cfb      	adds	r3, r7, #3
   205f4:	781b      	ldrb	r3, [r3, #0]
   205f6:	1cfa      	adds	r2, r7, #3
   205f8:	1e59      	subs	r1, r3, #1
   205fa:	7011      	strb	r1, [r2, #0]
   205fc:	2b00      	cmp	r3, #0
   205fe:	d1bf      	bne.n	20580 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   20600:	230f      	movs	r3, #15
   20602:	18fb      	adds	r3, r7, r3
   20604:	781b      	ldrb	r3, [r3, #0]
   20606:	005b      	lsls	r3, r3, #1
   20608:	b25b      	sxtb	r3, r3
   2060a:	2201      	movs	r2, #1
   2060c:	4313      	orrs	r3, r2
   2060e:	b25a      	sxtb	r2, r3
   20610:	230f      	movs	r3, #15
   20612:	18fb      	adds	r3, r7, r3
   20614:	701a      	strb	r2, [r3, #0]
	return crc;
   20616:	230f      	movs	r3, #15
   20618:	18fb      	adds	r3, r7, r3
   2061a:	781b      	ldrb	r3, [r3, #0]
}
   2061c:	0018      	movs	r0, r3
   2061e:	46bd      	mov	sp, r7
   20620:	b004      	add	sp, #16
   20622:	bd80      	pop	{r7, pc}

00020624 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   20624:	b590      	push	{r4, r7, lr}
   20626:	b083      	sub	sp, #12
   20628:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   2062a:	1c7b      	adds	r3, r7, #1
   2062c:	22ff      	movs	r2, #255	; 0xff
   2062e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   20630:	1cbb      	adds	r3, r7, #2
   20632:	22ff      	movs	r2, #255	; 0xff
   20634:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20636:	1cbb      	adds	r3, r7, #2
   20638:	881b      	ldrh	r3, [r3, #0]
   2063a:	1c79      	adds	r1, r7, #1
   2063c:	4811      	ldr	r0, [pc, #68]	; (20684 <sd_mmc_spi_wait_busy+0x60>)
   2063e:	2201      	movs	r2, #1
   20640:	4c11      	ldr	r4, [pc, #68]	; (20688 <sd_mmc_spi_wait_busy+0x64>)
   20642:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   20644:	4b11      	ldr	r3, [pc, #68]	; (2068c <sd_mmc_spi_wait_busy+0x68>)
   20646:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20648:	1cbb      	adds	r3, r7, #2
   2064a:	881b      	ldrh	r3, [r3, #0]
   2064c:	1c79      	adds	r1, r7, #1
   2064e:	480d      	ldr	r0, [pc, #52]	; (20684 <sd_mmc_spi_wait_busy+0x60>)
   20650:	2201      	movs	r2, #1
   20652:	4c0d      	ldr	r4, [pc, #52]	; (20688 <sd_mmc_spi_wait_busy+0x64>)
   20654:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20656:	1cbb      	adds	r3, r7, #2
   20658:	881b      	ldrh	r3, [r3, #0]
   2065a:	1c79      	adds	r1, r7, #1
   2065c:	4809      	ldr	r0, [pc, #36]	; (20684 <sd_mmc_spi_wait_busy+0x60>)
   2065e:	2201      	movs	r2, #1
   20660:	4c09      	ldr	r4, [pc, #36]	; (20688 <sd_mmc_spi_wait_busy+0x64>)
   20662:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   20664:	687b      	ldr	r3, [r7, #4]
   20666:	1e5a      	subs	r2, r3, #1
   20668:	607a      	str	r2, [r7, #4]
   2066a:	2b00      	cmp	r3, #0
   2066c:	d101      	bne.n	20672 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   2066e:	2300      	movs	r3, #0
   20670:	e004      	b.n	2067c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   20672:	1c7b      	adds	r3, r7, #1
   20674:	781b      	ldrb	r3, [r3, #0]
   20676:	2bff      	cmp	r3, #255	; 0xff
   20678:	d1ed      	bne.n	20656 <sd_mmc_spi_wait_busy+0x32>
	return true;
   2067a:	2301      	movs	r3, #1
}
   2067c:	0018      	movs	r0, r3
   2067e:	46bd      	mov	sp, r7
   20680:	b003      	add	sp, #12
   20682:	bd90      	pop	{r4, r7, pc}
   20684:	20004250 	.word	0x20004250
   20688:	00028d91 	.word	0x00028d91
   2068c:	00030d40 	.word	0x00030d40

00020690 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   20690:	b590      	push	{r4, r7, lr}
   20692:	b083      	sub	sp, #12
   20694:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   20696:	1cbb      	adds	r3, r7, #2
   20698:	22ff      	movs	r2, #255	; 0xff
   2069a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   2069c:	1c7b      	adds	r3, r7, #1
   2069e:	2200      	movs	r2, #0
   206a0:	701a      	strb	r2, [r3, #0]
	i = 500000;
   206a2:	4b18      	ldr	r3, [pc, #96]	; (20704 <sd_mmc_spi_start_read_block+0x74>)
   206a4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   206a6:	687b      	ldr	r3, [r7, #4]
   206a8:	1e5a      	subs	r2, r3, #1
   206aa:	607a      	str	r2, [r7, #4]
   206ac:	2b00      	cmp	r3, #0
   206ae:	d104      	bne.n	206ba <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   206b0:	4b15      	ldr	r3, [pc, #84]	; (20708 <sd_mmc_spi_start_read_block+0x78>)
   206b2:	2204      	movs	r2, #4
   206b4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   206b6:	2300      	movs	r3, #0
   206b8:	e020      	b.n	206fc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   206ba:	1cbb      	adds	r3, r7, #2
   206bc:	881b      	ldrh	r3, [r3, #0]
   206be:	1c79      	adds	r1, r7, #1
   206c0:	4812      	ldr	r0, [pc, #72]	; (2070c <sd_mmc_spi_start_read_block+0x7c>)
   206c2:	2201      	movs	r2, #1
   206c4:	4c12      	ldr	r4, [pc, #72]	; (20710 <sd_mmc_spi_start_read_block+0x80>)
   206c6:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   206c8:	1c7b      	adds	r3, r7, #1
   206ca:	781b      	ldrb	r3, [r3, #0]
   206cc:	001a      	movs	r2, r3
   206ce:	23f0      	movs	r3, #240	; 0xf0
   206d0:	4013      	ands	r3, r2
   206d2:	d10e      	bne.n	206f2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   206d4:	1c7b      	adds	r3, r7, #1
   206d6:	781b      	ldrb	r3, [r3, #0]
   206d8:	001a      	movs	r2, r3
   206da:	2307      	movs	r3, #7
   206dc:	4013      	ands	r3, r2
   206de:	d003      	beq.n	206e8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   206e0:	4b09      	ldr	r3, [pc, #36]	; (20708 <sd_mmc_spi_start_read_block+0x78>)
   206e2:	2207      	movs	r2, #7
   206e4:	701a      	strb	r2, [r3, #0]
   206e6:	e002      	b.n	206ee <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   206e8:	4b07      	ldr	r3, [pc, #28]	; (20708 <sd_mmc_spi_start_read_block+0x78>)
   206ea:	220b      	movs	r2, #11
   206ec:	701a      	strb	r2, [r3, #0]
			}
			return false;
   206ee:	2300      	movs	r3, #0
   206f0:	e004      	b.n	206fc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   206f2:	1c7b      	adds	r3, r7, #1
   206f4:	781b      	ldrb	r3, [r3, #0]
   206f6:	2bfe      	cmp	r3, #254	; 0xfe
   206f8:	d1d5      	bne.n	206a6 <sd_mmc_spi_start_read_block+0x16>

	return true;
   206fa:	2301      	movs	r3, #1
}
   206fc:	0018      	movs	r0, r3
   206fe:	46bd      	mov	sp, r7
   20700:	b003      	add	sp, #12
   20702:	bd90      	pop	{r4, r7, pc}
   20704:	0007a120 	.word	0x0007a120
   20708:	20004293 	.word	0x20004293
   2070c:	20004250 	.word	0x20004250
   20710:	00028d91 	.word	0x00028d91

00020714 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   20714:	b590      	push	{r4, r7, lr}
   20716:	b083      	sub	sp, #12
   20718:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   2071a:	1dbb      	adds	r3, r7, #6
   2071c:	22ff      	movs	r2, #255	; 0xff
   2071e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   20720:	1dbb      	adds	r3, r7, #6
   20722:	881b      	ldrh	r3, [r3, #0]
   20724:	1d39      	adds	r1, r7, #4
   20726:	4804      	ldr	r0, [pc, #16]	; (20738 <sd_mmc_spi_stop_read_block+0x24>)
   20728:	2202      	movs	r2, #2
   2072a:	4c04      	ldr	r4, [pc, #16]	; (2073c <sd_mmc_spi_stop_read_block+0x28>)
   2072c:	47a0      	blx	r4
			dummy);
}
   2072e:	46c0      	nop			; (mov r8, r8)
   20730:	46bd      	mov	sp, r7
   20732:	b003      	add	sp, #12
   20734:	bd90      	pop	{r4, r7, pc}
   20736:	46c0      	nop			; (mov r8, r8)
   20738:	20004250 	.word	0x20004250
   2073c:	00028d91 	.word	0x00028d91

00020740 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   20740:	b580      	push	{r7, lr}
   20742:	b082      	sub	sp, #8
   20744:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   20746:	1dfb      	adds	r3, r7, #7
   20748:	22ff      	movs	r2, #255	; 0xff
   2074a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   2074c:	1df9      	adds	r1, r7, #7
   2074e:	4b0d      	ldr	r3, [pc, #52]	; (20784 <sd_mmc_spi_start_write_block+0x44>)
   20750:	2201      	movs	r2, #1
   20752:	0018      	movs	r0, r3
   20754:	4b0c      	ldr	r3, [pc, #48]	; (20788 <sd_mmc_spi_start_write_block+0x48>)
   20756:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   20758:	4b0c      	ldr	r3, [pc, #48]	; (2078c <sd_mmc_spi_start_write_block+0x4c>)
   2075a:	881b      	ldrh	r3, [r3, #0]
   2075c:	2b01      	cmp	r3, #1
   2075e:	d103      	bne.n	20768 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   20760:	1dbb      	adds	r3, r7, #6
   20762:	22fe      	movs	r2, #254	; 0xfe
   20764:	701a      	strb	r2, [r3, #0]
   20766:	e002      	b.n	2076e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   20768:	1dbb      	adds	r3, r7, #6
   2076a:	22fc      	movs	r2, #252	; 0xfc
   2076c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   2076e:	1db9      	adds	r1, r7, #6
   20770:	4b04      	ldr	r3, [pc, #16]	; (20784 <sd_mmc_spi_start_write_block+0x44>)
   20772:	2201      	movs	r2, #1
   20774:	0018      	movs	r0, r3
   20776:	4b04      	ldr	r3, [pc, #16]	; (20788 <sd_mmc_spi_start_write_block+0x48>)
   20778:	4798      	blx	r3
}
   2077a:	46c0      	nop			; (mov r8, r8)
   2077c:	46bd      	mov	sp, r7
   2077e:	b002      	add	sp, #8
   20780:	bd80      	pop	{r7, pc}
   20782:	46c0      	nop			; (mov r8, r8)
   20784:	20004250 	.word	0x20004250
   20788:	00028fb5 	.word	0x00028fb5
   2078c:	2000429e 	.word	0x2000429e

00020790 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   20790:	b590      	push	{r4, r7, lr}
   20792:	b083      	sub	sp, #12
   20794:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   20796:	1dbb      	adds	r3, r7, #6
   20798:	22ff      	movs	r2, #255	; 0xff
   2079a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   2079c:	1cbb      	adds	r3, r7, #2
   2079e:	2201      	movs	r2, #1
   207a0:	4252      	negs	r2, r2
   207a2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   207a4:	1cb9      	adds	r1, r7, #2
   207a6:	4b1b      	ldr	r3, [pc, #108]	; (20814 <sd_mmc_spi_stop_write_block+0x84>)
   207a8:	2202      	movs	r2, #2
   207aa:	0018      	movs	r0, r3
   207ac:	4b1a      	ldr	r3, [pc, #104]	; (20818 <sd_mmc_spi_stop_write_block+0x88>)
   207ae:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   207b0:	1dbb      	adds	r3, r7, #6
   207b2:	881b      	ldrh	r3, [r3, #0]
   207b4:	1d79      	adds	r1, r7, #5
   207b6:	4817      	ldr	r0, [pc, #92]	; (20814 <sd_mmc_spi_stop_write_block+0x84>)
   207b8:	2201      	movs	r2, #1
   207ba:	4c18      	ldr	r4, [pc, #96]	; (2081c <sd_mmc_spi_stop_write_block+0x8c>)
   207bc:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   207be:	1d7b      	adds	r3, r7, #5
   207c0:	781b      	ldrb	r3, [r3, #0]
   207c2:	001a      	movs	r2, r3
   207c4:	2310      	movs	r3, #16
   207c6:	4013      	ands	r3, r2
   207c8:	d105      	bne.n	207d6 <sd_mmc_spi_stop_write_block+0x46>
   207ca:	1d7b      	adds	r3, r7, #5
   207cc:	781b      	ldrb	r3, [r3, #0]
   207ce:	001a      	movs	r2, r3
   207d0:	2301      	movs	r3, #1
   207d2:	4013      	ands	r3, r2
   207d4:	d104      	bne.n	207e0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   207d6:	4b12      	ldr	r3, [pc, #72]	; (20820 <sd_mmc_spi_stop_write_block+0x90>)
   207d8:	2201      	movs	r2, #1
   207da:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   207dc:	2300      	movs	r3, #0
   207de:	e014      	b.n	2080a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   207e0:	1d7b      	adds	r3, r7, #5
   207e2:	781b      	ldrb	r3, [r3, #0]
   207e4:	001a      	movs	r2, r3
   207e6:	231e      	movs	r3, #30
   207e8:	4013      	ands	r3, r2
   207ea:	2b04      	cmp	r3, #4
   207ec:	d00b      	beq.n	20806 <sd_mmc_spi_stop_write_block+0x76>
   207ee:	2b0a      	cmp	r3, #10
   207f0:	d104      	bne.n	207fc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   207f2:	4b0b      	ldr	r3, [pc, #44]	; (20820 <sd_mmc_spi_stop_write_block+0x90>)
   207f4:	2208      	movs	r2, #8
   207f6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   207f8:	2300      	movs	r3, #0
   207fa:	e006      	b.n	2080a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   207fc:	4b08      	ldr	r3, [pc, #32]	; (20820 <sd_mmc_spi_stop_write_block+0x90>)
   207fe:	220a      	movs	r2, #10
   20800:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20802:	2300      	movs	r3, #0
   20804:	e001      	b.n	2080a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   20806:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20808:	2301      	movs	r3, #1
}
   2080a:	0018      	movs	r0, r3
   2080c:	46bd      	mov	sp, r7
   2080e:	b003      	add	sp, #12
   20810:	bd90      	pop	{r4, r7, pc}
   20812:	46c0      	nop			; (mov r8, r8)
   20814:	20004250 	.word	0x20004250
   20818:	00028fb5 	.word	0x00028fb5
   2081c:	00028d91 	.word	0x00028d91
   20820:	20004293 	.word	0x20004293

00020824 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   20824:	b590      	push	{r4, r7, lr}
   20826:	b083      	sub	sp, #12
   20828:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   2082a:	4b1d      	ldr	r3, [pc, #116]	; (208a0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   2082c:	881b      	ldrh	r3, [r3, #0]
   2082e:	2b01      	cmp	r3, #1
   20830:	d101      	bne.n	20836 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   20832:	2301      	movs	r3, #1
   20834:	e030      	b.n	20898 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   20836:	4b1a      	ldr	r3, [pc, #104]	; (208a0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   20838:	881b      	ldrh	r3, [r3, #0]
   2083a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   2083c:	4b19      	ldr	r3, [pc, #100]	; (208a4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   2083e:	681a      	ldr	r2, [r3, #0]
   20840:	4b19      	ldr	r3, [pc, #100]	; (208a8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   20842:	881b      	ldrh	r3, [r3, #0]
   20844:	0019      	movs	r1, r3
   20846:	4b19      	ldr	r3, [pc, #100]	; (208ac <sd_mmc_spi_stop_multiwrite_block+0x88>)
   20848:	0010      	movs	r0, r2
   2084a:	4798      	blx	r3
   2084c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   2084e:	429c      	cmp	r4, r3
   20850:	d901      	bls.n	20856 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   20852:	2301      	movs	r3, #1
   20854:	e020      	b.n	20898 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   20856:	1dfb      	adds	r3, r7, #7
   20858:	22ff      	movs	r2, #255	; 0xff
   2085a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2085c:	1df9      	adds	r1, r7, #7
   2085e:	4b14      	ldr	r3, [pc, #80]	; (208b0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20860:	2201      	movs	r2, #1
   20862:	0018      	movs	r0, r3
   20864:	4b13      	ldr	r3, [pc, #76]	; (208b4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20866:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   20868:	1dfb      	adds	r3, r7, #7
   2086a:	22fd      	movs	r2, #253	; 0xfd
   2086c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2086e:	1df9      	adds	r1, r7, #7
   20870:	4b0f      	ldr	r3, [pc, #60]	; (208b0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20872:	2201      	movs	r2, #1
   20874:	0018      	movs	r0, r3
   20876:	4b0f      	ldr	r3, [pc, #60]	; (208b4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20878:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2087a:	4b0f      	ldr	r3, [pc, #60]	; (208b8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   2087c:	4798      	blx	r3
   2087e:	0003      	movs	r3, r0
   20880:	001a      	movs	r2, r3
   20882:	2301      	movs	r3, #1
   20884:	4053      	eors	r3, r2
   20886:	b2db      	uxtb	r3, r3
   20888:	2b00      	cmp	r3, #0
   2088a:	d004      	beq.n	20896 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2088c:	4b0b      	ldr	r3, [pc, #44]	; (208bc <sd_mmc_spi_stop_multiwrite_block+0x98>)
   2088e:	2205      	movs	r2, #5
   20890:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   20892:	2300      	movs	r3, #0
   20894:	e000      	b.n	20898 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   20896:	2301      	movs	r3, #1
}
   20898:	0018      	movs	r0, r3
   2089a:	46bd      	mov	sp, r7
   2089c:	b003      	add	sp, #12
   2089e:	bd90      	pop	{r4, r7, pc}
   208a0:	2000429e 	.word	0x2000429e
   208a4:	20004298 	.word	0x20004298
   208a8:	2000429c 	.word	0x2000429c
   208ac:	000337a5 	.word	0x000337a5
   208b0:	20004250 	.word	0x20004250
   208b4:	00028fb5 	.word	0x00028fb5
   208b8:	00020625 	.word	0x00020625
   208bc:	20004293 	.word	0x20004293

000208c0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   208c0:	b580      	push	{r7, lr}
   208c2:	b090      	sub	sp, #64	; 0x40
   208c4:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   208c6:	4b1f      	ldr	r3, [pc, #124]	; (20944 <sd_mmc_spi_init+0x84>)
   208c8:	2200      	movs	r2, #0
   208ca:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   208cc:	233c      	movs	r3, #60	; 0x3c
   208ce:	18fb      	adds	r3, r7, r3
   208d0:	0018      	movs	r0, r3
   208d2:	4b1d      	ldr	r3, [pc, #116]	; (20948 <sd_mmc_spi_init+0x88>)
   208d4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   208d6:	1d3b      	adds	r3, r7, #4
   208d8:	0018      	movs	r0, r3
   208da:	4b1c      	ldr	r3, [pc, #112]	; (2094c <sd_mmc_spi_init+0x8c>)
   208dc:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   208de:	1d3b      	adds	r3, r7, #4
   208e0:	2280      	movs	r2, #128	; 0x80
   208e2:	0252      	lsls	r2, r2, #9
   208e4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   208e6:	1d3b      	adds	r3, r7, #4
   208e8:	4a19      	ldr	r2, [pc, #100]	; (20950 <sd_mmc_spi_init+0x90>)
   208ea:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   208ec:	1d3b      	adds	r3, r7, #4
   208ee:	4a19      	ldr	r2, [pc, #100]	; (20954 <sd_mmc_spi_init+0x94>)
   208f0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   208f2:	1d3b      	adds	r3, r7, #4
   208f4:	4a18      	ldr	r2, [pc, #96]	; (20958 <sd_mmc_spi_init+0x98>)
   208f6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   208f8:	1d3b      	adds	r3, r7, #4
   208fa:	4a18      	ldr	r2, [pc, #96]	; (2095c <sd_mmc_spi_init+0x9c>)
   208fc:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   208fe:	1d3b      	adds	r3, r7, #4
   20900:	2224      	movs	r2, #36	; 0x24
   20902:	2100      	movs	r1, #0
   20904:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   20906:	1d3b      	adds	r3, r7, #4
   20908:	4a15      	ldr	r2, [pc, #84]	; (20960 <sd_mmc_spi_init+0xa0>)
   2090a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   2090c:	1d3a      	adds	r2, r7, #4
   2090e:	4915      	ldr	r1, [pc, #84]	; (20964 <sd_mmc_spi_init+0xa4>)
   20910:	4b15      	ldr	r3, [pc, #84]	; (20968 <sd_mmc_spi_init+0xa8>)
   20912:	0018      	movs	r0, r3
   20914:	4b15      	ldr	r3, [pc, #84]	; (2096c <sd_mmc_spi_init+0xac>)
   20916:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   20918:	4b13      	ldr	r3, [pc, #76]	; (20968 <sd_mmc_spi_init+0xa8>)
   2091a:	0018      	movs	r0, r3
   2091c:	4b14      	ldr	r3, [pc, #80]	; (20970 <sd_mmc_spi_init+0xb0>)
   2091e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   20920:	4b14      	ldr	r3, [pc, #80]	; (20974 <sd_mmc_spi_init+0xb4>)
   20922:	0018      	movs	r0, r3
   20924:	4b14      	ldr	r3, [pc, #80]	; (20978 <sd_mmc_spi_init+0xb8>)
   20926:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   20928:	4b14      	ldr	r3, [pc, #80]	; (2097c <sd_mmc_spi_init+0xbc>)
   2092a:	781a      	ldrb	r2, [r3, #0]
   2092c:	4b11      	ldr	r3, [pc, #68]	; (20974 <sd_mmc_spi_init+0xb4>)
   2092e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   20930:	4a10      	ldr	r2, [pc, #64]	; (20974 <sd_mmc_spi_init+0xb4>)
   20932:	4b13      	ldr	r3, [pc, #76]	; (20980 <sd_mmc_spi_init+0xc0>)
   20934:	0011      	movs	r1, r2
   20936:	0018      	movs	r0, r3
   20938:	4b12      	ldr	r3, [pc, #72]	; (20984 <sd_mmc_spi_init+0xc4>)
   2093a:	4798      	blx	r3
}
   2093c:	46c0      	nop			; (mov r8, r8)
   2093e:	46bd      	mov	sp, r7
   20940:	b010      	add	sp, #64	; 0x40
   20942:	bd80      	pop	{r7, pc}
   20944:	20004293 	.word	0x20004293
   20948:	00020375 	.word	0x00020375
   2094c:	0002040d 	.word	0x0002040d
   20950:	00100002 	.word	0x00100002
   20954:	00110002 	.word	0x00110002
   20958:	00120002 	.word	0x00120002
   2095c:	00130002 	.word	0x00130002
   20960:	00061a80 	.word	0x00061a80
   20964:	42000c00 	.word	0x42000c00
   20968:	20004250 	.word	0x20004250
   2096c:	00028c01 	.word	0x00028c01
   20970:	00020519 	.word	0x00020519
   20974:	20004290 	.word	0x20004290
   20978:	00020491 	.word	0x00020491
   2097c:	20000118 	.word	0x20000118
   20980:	2000428c 	.word	0x2000428c
   20984:	000204b5 	.word	0x000204b5

00020988 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   20988:	b590      	push	{r4, r7, lr}
   2098a:	b083      	sub	sp, #12
   2098c:	af00      	add	r7, sp, #0
   2098e:	0004      	movs	r4, r0
   20990:	6039      	str	r1, [r7, #0]
   20992:	0010      	movs	r0, r2
   20994:	0019      	movs	r1, r3
   20996:	1dfb      	adds	r3, r7, #7
   20998:	1c22      	adds	r2, r4, #0
   2099a:	701a      	strb	r2, [r3, #0]
   2099c:	1dbb      	adds	r3, r7, #6
   2099e:	1c02      	adds	r2, r0, #0
   209a0:	701a      	strb	r2, [r3, #0]
   209a2:	1d7b      	adds	r3, r7, #5
   209a4:	1c0a      	adds	r2, r1, #0
   209a6:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   209a8:	4b13      	ldr	r3, [pc, #76]	; (209f8 <sd_mmc_spi_select_device+0x70>)
   209aa:	2200      	movs	r2, #0
   209ac:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   209ae:	683b      	ldr	r3, [r7, #0]
   209b0:	4a12      	ldr	r2, [pc, #72]	; (209fc <sd_mmc_spi_select_device+0x74>)
   209b2:	4293      	cmp	r3, r2
   209b4:	d907      	bls.n	209c6 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   209b6:	4b11      	ldr	r3, [pc, #68]	; (209fc <sd_mmc_spi_select_device+0x74>)
   209b8:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   209ba:	e004      	b.n	209c6 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   209bc:	683b      	ldr	r3, [r7, #0]
   209be:	08db      	lsrs	r3, r3, #3
   209c0:	683a      	ldr	r2, [r7, #0]
   209c2:	1ad3      	subs	r3, r2, r3
   209c4:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   209c6:	683a      	ldr	r2, [r7, #0]
   209c8:	4b0d      	ldr	r3, [pc, #52]	; (20a00 <sd_mmc_spi_select_device+0x78>)
   209ca:	0011      	movs	r1, r2
   209cc:	0018      	movs	r0, r3
   209ce:	4b0d      	ldr	r3, [pc, #52]	; (20a04 <sd_mmc_spi_select_device+0x7c>)
   209d0:	4798      	blx	r3
   209d2:	0003      	movs	r3, r0
   209d4:	2b17      	cmp	r3, #23
   209d6:	d0f1      	beq.n	209bc <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   209d8:	1dfb      	adds	r3, r7, #7
   209da:	781a      	ldrb	r2, [r3, #0]
   209dc:	0013      	movs	r3, r2
   209de:	005b      	lsls	r3, r3, #1
   209e0:	189b      	adds	r3, r3, r2
   209e2:	4a09      	ldr	r2, [pc, #36]	; (20a08 <sd_mmc_spi_select_device+0x80>)
   209e4:	1899      	adds	r1, r3, r2
   209e6:	4b06      	ldr	r3, [pc, #24]	; (20a00 <sd_mmc_spi_select_device+0x78>)
   209e8:	2201      	movs	r2, #1
   209ea:	0018      	movs	r0, r3
   209ec:	4b07      	ldr	r3, [pc, #28]	; (20a0c <sd_mmc_spi_select_device+0x84>)
   209ee:	4798      	blx	r3
}
   209f0:	46c0      	nop			; (mov r8, r8)
   209f2:	46bd      	mov	sp, r7
   209f4:	b003      	add	sp, #12
   209f6:	bd90      	pop	{r4, r7, pc}
   209f8:	20004293 	.word	0x20004293
   209fc:	00989680 	.word	0x00989680
   20a00:	20004250 	.word	0x20004250
   20a04:	00028929 	.word	0x00028929
   20a08:	2000428c 	.word	0x2000428c
   20a0c:	00028ec5 	.word	0x00028ec5

00020a10 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   20a10:	b580      	push	{r7, lr}
   20a12:	b082      	sub	sp, #8
   20a14:	af00      	add	r7, sp, #0
   20a16:	0002      	movs	r2, r0
   20a18:	1dfb      	adds	r3, r7, #7
   20a1a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20a1c:	4b09      	ldr	r3, [pc, #36]	; (20a44 <sd_mmc_spi_deselect_device+0x34>)
   20a1e:	2200      	movs	r2, #0
   20a20:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   20a22:	1dfb      	adds	r3, r7, #7
   20a24:	781a      	ldrb	r2, [r3, #0]
   20a26:	0013      	movs	r3, r2
   20a28:	005b      	lsls	r3, r3, #1
   20a2a:	189b      	adds	r3, r3, r2
   20a2c:	4a06      	ldr	r2, [pc, #24]	; (20a48 <sd_mmc_spi_deselect_device+0x38>)
   20a2e:	1899      	adds	r1, r3, r2
   20a30:	4b06      	ldr	r3, [pc, #24]	; (20a4c <sd_mmc_spi_deselect_device+0x3c>)
   20a32:	2200      	movs	r2, #0
   20a34:	0018      	movs	r0, r3
   20a36:	4b06      	ldr	r3, [pc, #24]	; (20a50 <sd_mmc_spi_deselect_device+0x40>)
   20a38:	4798      	blx	r3
}
   20a3a:	46c0      	nop			; (mov r8, r8)
   20a3c:	46bd      	mov	sp, r7
   20a3e:	b002      	add	sp, #8
   20a40:	bd80      	pop	{r7, pc}
   20a42:	46c0      	nop			; (mov r8, r8)
   20a44:	20004293 	.word	0x20004293
   20a48:	2000428c 	.word	0x2000428c
   20a4c:	20004250 	.word	0x20004250
   20a50:	00028ec5 	.word	0x00028ec5

00020a54 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20a54:	b580      	push	{r7, lr}
   20a56:	b082      	sub	sp, #8
   20a58:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   20a5a:	1dbb      	adds	r3, r7, #6
   20a5c:	22ff      	movs	r2, #255	; 0xff
   20a5e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20a60:	4b0c      	ldr	r3, [pc, #48]	; (20a94 <sd_mmc_spi_send_clock+0x40>)
   20a62:	2200      	movs	r2, #0
   20a64:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   20a66:	1dfb      	adds	r3, r7, #7
   20a68:	2200      	movs	r2, #0
   20a6a:	701a      	strb	r2, [r3, #0]
   20a6c:	e00a      	b.n	20a84 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   20a6e:	1db9      	adds	r1, r7, #6
   20a70:	4b09      	ldr	r3, [pc, #36]	; (20a98 <sd_mmc_spi_send_clock+0x44>)
   20a72:	2201      	movs	r2, #1
   20a74:	0018      	movs	r0, r3
   20a76:	4b09      	ldr	r3, [pc, #36]	; (20a9c <sd_mmc_spi_send_clock+0x48>)
   20a78:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   20a7a:	1dfb      	adds	r3, r7, #7
   20a7c:	781a      	ldrb	r2, [r3, #0]
   20a7e:	1dfb      	adds	r3, r7, #7
   20a80:	3201      	adds	r2, #1
   20a82:	701a      	strb	r2, [r3, #0]
   20a84:	1dfb      	adds	r3, r7, #7
   20a86:	781b      	ldrb	r3, [r3, #0]
   20a88:	2b09      	cmp	r3, #9
   20a8a:	d9f0      	bls.n	20a6e <sd_mmc_spi_send_clock+0x1a>
	}
}
   20a8c:	46c0      	nop			; (mov r8, r8)
   20a8e:	46bd      	mov	sp, r7
   20a90:	b002      	add	sp, #8
   20a92:	bd80      	pop	{r7, pc}
   20a94:	20004293 	.word	0x20004293
   20a98:	20004250 	.word	0x20004250
   20a9c:	00028fb5 	.word	0x00028fb5

00020aa0 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   20aa0:	b590      	push	{r4, r7, lr}
   20aa2:	b085      	sub	sp, #20
   20aa4:	af02      	add	r7, sp, #8
   20aa6:	6078      	str	r0, [r7, #4]
   20aa8:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   20aaa:	6839      	ldr	r1, [r7, #0]
   20aac:	6878      	ldr	r0, [r7, #4]
   20aae:	2300      	movs	r3, #0
   20ab0:	9300      	str	r3, [sp, #0]
   20ab2:	2300      	movs	r3, #0
   20ab4:	2200      	movs	r2, #0
   20ab6:	4c03      	ldr	r4, [pc, #12]	; (20ac4 <sd_mmc_spi_send_cmd+0x24>)
   20ab8:	47a0      	blx	r4
   20aba:	0003      	movs	r3, r0
}
   20abc:	0018      	movs	r0, r3
   20abe:	46bd      	mov	sp, r7
   20ac0:	b003      	add	sp, #12
   20ac2:	bd90      	pop	{r4, r7, pc}
   20ac4:	00020ac9 	.word	0x00020ac9

00020ac8 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   20ac8:	b590      	push	{r4, r7, lr}
   20aca:	b089      	sub	sp, #36	; 0x24
   20acc:	af00      	add	r7, sp, #0
   20ace:	60f8      	str	r0, [r7, #12]
   20ad0:	60b9      	str	r1, [r7, #8]
   20ad2:	0019      	movs	r1, r3
   20ad4:	1dbb      	adds	r3, r7, #6
   20ad6:	801a      	strh	r2, [r3, #0]
   20ad8:	1d3b      	adds	r3, r7, #4
   20ada:	1c0a      	adds	r2, r1, #0
   20adc:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   20ade:	231b      	movs	r3, #27
   20ae0:	18fb      	adds	r3, r7, r3
   20ae2:	22ff      	movs	r2, #255	; 0xff
   20ae4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   20ae6:	231c      	movs	r3, #28
   20ae8:	18fb      	adds	r3, r7, r3
   20aea:	22ff      	movs	r2, #255	; 0xff
   20aec:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20aee:	4b72      	ldr	r3, [pc, #456]	; (20cb8 <sd_mmc_spi_adtc_start+0x1f0>)
   20af0:	2200      	movs	r2, #0
   20af2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20af4:	68fb      	ldr	r3, [r7, #12]
   20af6:	b2db      	uxtb	r3, r3
   20af8:	223f      	movs	r2, #63	; 0x3f
   20afa:	4013      	ands	r3, r2
   20afc:	b2db      	uxtb	r3, r3
   20afe:	2240      	movs	r2, #64	; 0x40
   20b00:	4313      	orrs	r3, r2
   20b02:	b2da      	uxtb	r2, r3
   20b04:	2314      	movs	r3, #20
   20b06:	18fb      	adds	r3, r7, r3
   20b08:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   20b0a:	68bb      	ldr	r3, [r7, #8]
   20b0c:	0e1b      	lsrs	r3, r3, #24
   20b0e:	b2da      	uxtb	r2, r3
   20b10:	2314      	movs	r3, #20
   20b12:	18fb      	adds	r3, r7, r3
   20b14:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   20b16:	68bb      	ldr	r3, [r7, #8]
   20b18:	0c1b      	lsrs	r3, r3, #16
   20b1a:	b2da      	uxtb	r2, r3
   20b1c:	2314      	movs	r3, #20
   20b1e:	18fb      	adds	r3, r7, r3
   20b20:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20b22:	68bb      	ldr	r3, [r7, #8]
   20b24:	0a1b      	lsrs	r3, r3, #8
   20b26:	b2da      	uxtb	r2, r3
   20b28:	2314      	movs	r3, #20
   20b2a:	18fb      	adds	r3, r7, r3
   20b2c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   20b2e:	68bb      	ldr	r3, [r7, #8]
   20b30:	b2da      	uxtb	r2, r3
   20b32:	2314      	movs	r3, #20
   20b34:	18fb      	adds	r3, r7, r3
   20b36:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   20b38:	2314      	movs	r3, #20
   20b3a:	18fb      	adds	r3, r7, r3
   20b3c:	2105      	movs	r1, #5
   20b3e:	0018      	movs	r0, r3
   20b40:	4b5e      	ldr	r3, [pc, #376]	; (20cbc <sd_mmc_spi_adtc_start+0x1f4>)
   20b42:	4798      	blx	r3
   20b44:	0003      	movs	r3, r0
   20b46:	001a      	movs	r2, r3
   20b48:	2314      	movs	r3, #20
   20b4a:	18fb      	adds	r3, r7, r3
   20b4c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   20b4e:	231b      	movs	r3, #27
   20b50:	18f9      	adds	r1, r7, r3
   20b52:	4b5b      	ldr	r3, [pc, #364]	; (20cc0 <sd_mmc_spi_adtc_start+0x1f8>)
   20b54:	2201      	movs	r2, #1
   20b56:	0018      	movs	r0, r3
   20b58:	4b5a      	ldr	r3, [pc, #360]	; (20cc4 <sd_mmc_spi_adtc_start+0x1fc>)
   20b5a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   20b5c:	2314      	movs	r3, #20
   20b5e:	18f9      	adds	r1, r7, r3
   20b60:	4b57      	ldr	r3, [pc, #348]	; (20cc0 <sd_mmc_spi_adtc_start+0x1f8>)
   20b62:	2206      	movs	r2, #6
   20b64:	0018      	movs	r0, r3
   20b66:	4b57      	ldr	r3, [pc, #348]	; (20cc4 <sd_mmc_spi_adtc_start+0x1fc>)
   20b68:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   20b6a:	2313      	movs	r3, #19
   20b6c:	18fb      	adds	r3, r7, r3
   20b6e:	22ff      	movs	r2, #255	; 0xff
   20b70:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20b72:	231c      	movs	r3, #28
   20b74:	18fb      	adds	r3, r7, r3
   20b76:	881b      	ldrh	r3, [r3, #0]
   20b78:	2213      	movs	r2, #19
   20b7a:	18b9      	adds	r1, r7, r2
   20b7c:	4850      	ldr	r0, [pc, #320]	; (20cc0 <sd_mmc_spi_adtc_start+0x1f8>)
   20b7e:	2201      	movs	r2, #1
   20b80:	4c51      	ldr	r4, [pc, #324]	; (20cc8 <sd_mmc_spi_adtc_start+0x200>)
   20b82:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   20b84:	231f      	movs	r3, #31
   20b86:	18fb      	adds	r3, r7, r3
   20b88:	2207      	movs	r2, #7
   20b8a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20b8c:	231c      	movs	r3, #28
   20b8e:	18fb      	adds	r3, r7, r3
   20b90:	881b      	ldrh	r3, [r3, #0]
   20b92:	2213      	movs	r2, #19
   20b94:	18b9      	adds	r1, r7, r2
   20b96:	484a      	ldr	r0, [pc, #296]	; (20cc0 <sd_mmc_spi_adtc_start+0x1f8>)
   20b98:	2201      	movs	r2, #1
   20b9a:	4c4b      	ldr	r4, [pc, #300]	; (20cc8 <sd_mmc_spi_adtc_start+0x200>)
   20b9c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   20b9e:	2313      	movs	r3, #19
   20ba0:	18fb      	adds	r3, r7, r3
   20ba2:	781b      	ldrb	r3, [r3, #0]
   20ba4:	b25b      	sxtb	r3, r3
   20ba6:	2b00      	cmp	r3, #0
   20ba8:	da10      	bge.n	20bcc <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   20baa:	231f      	movs	r3, #31
   20bac:	18fb      	adds	r3, r7, r3
   20bae:	221f      	movs	r2, #31
   20bb0:	18ba      	adds	r2, r7, r2
   20bb2:	7812      	ldrb	r2, [r2, #0]
   20bb4:	3a01      	subs	r2, #1
   20bb6:	701a      	strb	r2, [r3, #0]
   20bb8:	231f      	movs	r3, #31
   20bba:	18fb      	adds	r3, r7, r3
   20bbc:	781b      	ldrb	r3, [r3, #0]
   20bbe:	2b00      	cmp	r3, #0
   20bc0:	d1e4      	bne.n	20b8c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   20bc2:	4b3d      	ldr	r3, [pc, #244]	; (20cb8 <sd_mmc_spi_adtc_start+0x1f0>)
   20bc4:	2202      	movs	r2, #2
   20bc6:	701a      	strb	r2, [r3, #0]
			return false;
   20bc8:	2300      	movs	r3, #0
   20bca:	e070      	b.n	20cae <sd_mmc_spi_adtc_start+0x1e6>
			break;
   20bcc:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   20bce:	2313      	movs	r3, #19
   20bd0:	18fb      	adds	r3, r7, r3
   20bd2:	781b      	ldrb	r3, [r3, #0]
   20bd4:	001a      	movs	r2, r3
   20bd6:	4b3d      	ldr	r3, [pc, #244]	; (20ccc <sd_mmc_spi_adtc_start+0x204>)
   20bd8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   20bda:	2313      	movs	r3, #19
   20bdc:	18fb      	adds	r3, r7, r3
   20bde:	781b      	ldrb	r3, [r3, #0]
   20be0:	001a      	movs	r2, r3
   20be2:	2308      	movs	r3, #8
   20be4:	4013      	ands	r3, r2
   20be6:	d004      	beq.n	20bf2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20be8:	4b33      	ldr	r3, [pc, #204]	; (20cb8 <sd_mmc_spi_adtc_start+0x1f0>)
   20bea:	2206      	movs	r2, #6
   20bec:	701a      	strb	r2, [r3, #0]
		return false;
   20bee:	2300      	movs	r3, #0
   20bf0:	e05d      	b.n	20cae <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20bf2:	2313      	movs	r3, #19
   20bf4:	18fb      	adds	r3, r7, r3
   20bf6:	781b      	ldrb	r3, [r3, #0]
   20bf8:	001a      	movs	r2, r3
   20bfa:	2304      	movs	r3, #4
   20bfc:	4013      	ands	r3, r2
   20bfe:	d004      	beq.n	20c0a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20c00:	4b2d      	ldr	r3, [pc, #180]	; (20cb8 <sd_mmc_spi_adtc_start+0x1f0>)
   20c02:	2209      	movs	r2, #9
   20c04:	701a      	strb	r2, [r3, #0]
		return false;
   20c06:	2300      	movs	r3, #0
   20c08:	e051      	b.n	20cae <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   20c0a:	2313      	movs	r3, #19
   20c0c:	18fb      	adds	r3, r7, r3
   20c0e:	781b      	ldrb	r3, [r3, #0]
   20c10:	001a      	movs	r2, r3
   20c12:	2301      	movs	r3, #1
   20c14:	439a      	bics	r2, r3
   20c16:	1e13      	subs	r3, r2, #0
   20c18:	d004      	beq.n	20c24 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   20c1a:	4b27      	ldr	r3, [pc, #156]	; (20cb8 <sd_mmc_spi_adtc_start+0x1f0>)
   20c1c:	2201      	movs	r2, #1
   20c1e:	701a      	strb	r2, [r3, #0]
		return false;
   20c20:	2300      	movs	r3, #0
   20c22:	e044      	b.n	20cae <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20c24:	68fa      	ldr	r2, [r7, #12]
   20c26:	2380      	movs	r3, #128	; 0x80
   20c28:	019b      	lsls	r3, r3, #6
   20c2a:	4013      	ands	r3, r2
   20c2c:	d00d      	beq.n	20c4a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   20c2e:	4b28      	ldr	r3, [pc, #160]	; (20cd0 <sd_mmc_spi_adtc_start+0x208>)
   20c30:	4798      	blx	r3
   20c32:	0003      	movs	r3, r0
   20c34:	001a      	movs	r2, r3
   20c36:	2301      	movs	r3, #1
   20c38:	4053      	eors	r3, r2
   20c3a:	b2db      	uxtb	r3, r3
   20c3c:	2b00      	cmp	r3, #0
   20c3e:	d004      	beq.n	20c4a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20c40:	4b1d      	ldr	r3, [pc, #116]	; (20cb8 <sd_mmc_spi_adtc_start+0x1f0>)
   20c42:	2203      	movs	r2, #3
   20c44:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20c46:	2300      	movs	r3, #0
   20c48:	e031      	b.n	20cae <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   20c4a:	68fa      	ldr	r2, [r7, #12]
   20c4c:	2380      	movs	r3, #128	; 0x80
   20c4e:	009b      	lsls	r3, r3, #2
   20c50:	4013      	ands	r3, r2
   20c52:	d00e      	beq.n	20c72 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20c54:	4b1d      	ldr	r3, [pc, #116]	; (20ccc <sd_mmc_spi_adtc_start+0x204>)
   20c56:	2200      	movs	r2, #0
   20c58:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   20c5a:	231c      	movs	r3, #28
   20c5c:	18fb      	adds	r3, r7, r3
   20c5e:	881b      	ldrh	r3, [r3, #0]
   20c60:	491a      	ldr	r1, [pc, #104]	; (20ccc <sd_mmc_spi_adtc_start+0x204>)
   20c62:	4817      	ldr	r0, [pc, #92]	; (20cc0 <sd_mmc_spi_adtc_start+0x1f8>)
   20c64:	2201      	movs	r2, #1
   20c66:	4c18      	ldr	r4, [pc, #96]	; (20cc8 <sd_mmc_spi_adtc_start+0x200>)
   20c68:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   20c6a:	4b18      	ldr	r3, [pc, #96]	; (20ccc <sd_mmc_spi_adtc_start+0x204>)
   20c6c:	681a      	ldr	r2, [r3, #0]
   20c6e:	4b17      	ldr	r3, [pc, #92]	; (20ccc <sd_mmc_spi_adtc_start+0x204>)
   20c70:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20c72:	68fa      	ldr	r2, [r7, #12]
   20c74:	2380      	movs	r3, #128	; 0x80
   20c76:	00db      	lsls	r3, r3, #3
   20c78:	4013      	ands	r3, r2
   20c7a:	d00c      	beq.n	20c96 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   20c7c:	231c      	movs	r3, #28
   20c7e:	18fb      	adds	r3, r7, r3
   20c80:	881b      	ldrh	r3, [r3, #0]
   20c82:	4912      	ldr	r1, [pc, #72]	; (20ccc <sd_mmc_spi_adtc_start+0x204>)
   20c84:	480e      	ldr	r0, [pc, #56]	; (20cc0 <sd_mmc_spi_adtc_start+0x1f8>)
   20c86:	2204      	movs	r2, #4
   20c88:	4c0f      	ldr	r4, [pc, #60]	; (20cc8 <sd_mmc_spi_adtc_start+0x200>)
   20c8a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   20c8c:	4b0f      	ldr	r3, [pc, #60]	; (20ccc <sd_mmc_spi_adtc_start+0x204>)
   20c8e:	681b      	ldr	r3, [r3, #0]
   20c90:	ba1a      	rev	r2, r3
   20c92:	4b0e      	ldr	r3, [pc, #56]	; (20ccc <sd_mmc_spi_adtc_start+0x204>)
   20c94:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20c96:	4b0f      	ldr	r3, [pc, #60]	; (20cd4 <sd_mmc_spi_adtc_start+0x20c>)
   20c98:	1dba      	adds	r2, r7, #6
   20c9a:	8812      	ldrh	r2, [r2, #0]
   20c9c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   20c9e:	4b0e      	ldr	r3, [pc, #56]	; (20cd8 <sd_mmc_spi_adtc_start+0x210>)
   20ca0:	1d3a      	adds	r2, r7, #4
   20ca2:	8812      	ldrh	r2, [r2, #0]
   20ca4:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   20ca6:	4b0d      	ldr	r3, [pc, #52]	; (20cdc <sd_mmc_spi_adtc_start+0x214>)
   20ca8:	2200      	movs	r2, #0
   20caa:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   20cac:	2301      	movs	r3, #1
}
   20cae:	0018      	movs	r0, r3
   20cb0:	46bd      	mov	sp, r7
   20cb2:	b009      	add	sp, #36	; 0x24
   20cb4:	bd90      	pop	{r4, r7, pc}
   20cb6:	46c0      	nop			; (mov r8, r8)
   20cb8:	20004293 	.word	0x20004293
   20cbc:	00020569 	.word	0x00020569
   20cc0:	20004250 	.word	0x20004250
   20cc4:	00028fb5 	.word	0x00028fb5
   20cc8:	00028d91 	.word	0x00028d91
   20ccc:	20004294 	.word	0x20004294
   20cd0:	00020625 	.word	0x00020625
   20cd4:	2000429c 	.word	0x2000429c
   20cd8:	2000429e 	.word	0x2000429e
   20cdc:	20004298 	.word	0x20004298

00020ce0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20ce0:	b580      	push	{r7, lr}
   20ce2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20ce4:	4b02      	ldr	r3, [pc, #8]	; (20cf0 <sd_mmc_spi_get_response+0x10>)
   20ce6:	681b      	ldr	r3, [r3, #0]
}
   20ce8:	0018      	movs	r0, r3
   20cea:	46bd      	mov	sp, r7
   20cec:	bd80      	pop	{r7, pc}
   20cee:	46c0      	nop			; (mov r8, r8)
   20cf0:	20004294 	.word	0x20004294

00020cf4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20cf4:	b590      	push	{r4, r7, lr}
   20cf6:	b085      	sub	sp, #20
   20cf8:	af00      	add	r7, sp, #0
   20cfa:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   20cfc:	230e      	movs	r3, #14
   20cfe:	18fb      	adds	r3, r7, r3
   20d00:	22ff      	movs	r2, #255	; 0xff
   20d02:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20d04:	4b1c      	ldr	r3, [pc, #112]	; (20d78 <sd_mmc_spi_read_word+0x84>)
   20d06:	2200      	movs	r2, #0
   20d08:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20d0a:	4b1c      	ldr	r3, [pc, #112]	; (20d7c <sd_mmc_spi_read_word+0x88>)
   20d0c:	681a      	ldr	r2, [r3, #0]
   20d0e:	4b1c      	ldr	r3, [pc, #112]	; (20d80 <sd_mmc_spi_read_word+0x8c>)
   20d10:	881b      	ldrh	r3, [r3, #0]
   20d12:	0019      	movs	r1, r3
   20d14:	4b1b      	ldr	r3, [pc, #108]	; (20d84 <sd_mmc_spi_read_word+0x90>)
   20d16:	0010      	movs	r0, r2
   20d18:	4798      	blx	r3
   20d1a:	1e0b      	subs	r3, r1, #0
   20d1c:	d10a      	bne.n	20d34 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   20d1e:	4b1a      	ldr	r3, [pc, #104]	; (20d88 <sd_mmc_spi_read_word+0x94>)
   20d20:	4798      	blx	r3
   20d22:	0003      	movs	r3, r0
   20d24:	001a      	movs	r2, r3
   20d26:	2301      	movs	r3, #1
   20d28:	4053      	eors	r3, r2
   20d2a:	b2db      	uxtb	r3, r3
   20d2c:	2b00      	cmp	r3, #0
   20d2e:	d001      	beq.n	20d34 <sd_mmc_spi_read_word+0x40>
			return false;
   20d30:	2300      	movs	r3, #0
   20d32:	e01d      	b.n	20d70 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20d34:	230e      	movs	r3, #14
   20d36:	18fb      	adds	r3, r7, r3
   20d38:	881b      	ldrh	r3, [r3, #0]
   20d3a:	1d39      	adds	r1, r7, #4
   20d3c:	4813      	ldr	r0, [pc, #76]	; (20d8c <sd_mmc_spi_read_word+0x98>)
   20d3e:	2204      	movs	r2, #4
   20d40:	4c13      	ldr	r4, [pc, #76]	; (20d90 <sd_mmc_spi_read_word+0x9c>)
   20d42:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20d44:	687b      	ldr	r3, [r7, #4]
   20d46:	687a      	ldr	r2, [r7, #4]
   20d48:	6812      	ldr	r2, [r2, #0]
   20d4a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   20d4c:	4b0b      	ldr	r3, [pc, #44]	; (20d7c <sd_mmc_spi_read_word+0x88>)
   20d4e:	681b      	ldr	r3, [r3, #0]
   20d50:	1d1a      	adds	r2, r3, #4
   20d52:	4b0a      	ldr	r3, [pc, #40]	; (20d7c <sd_mmc_spi_read_word+0x88>)
   20d54:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20d56:	4b09      	ldr	r3, [pc, #36]	; (20d7c <sd_mmc_spi_read_word+0x88>)
   20d58:	681a      	ldr	r2, [r3, #0]
   20d5a:	4b09      	ldr	r3, [pc, #36]	; (20d80 <sd_mmc_spi_read_word+0x8c>)
   20d5c:	881b      	ldrh	r3, [r3, #0]
   20d5e:	0019      	movs	r1, r3
   20d60:	4b08      	ldr	r3, [pc, #32]	; (20d84 <sd_mmc_spi_read_word+0x90>)
   20d62:	0010      	movs	r0, r2
   20d64:	4798      	blx	r3
   20d66:	1e0b      	subs	r3, r1, #0
   20d68:	d101      	bne.n	20d6e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   20d6a:	4b0a      	ldr	r3, [pc, #40]	; (20d94 <sd_mmc_spi_read_word+0xa0>)
   20d6c:	4798      	blx	r3
	}
	return true;
   20d6e:	2301      	movs	r3, #1
}
   20d70:	0018      	movs	r0, r3
   20d72:	46bd      	mov	sp, r7
   20d74:	b005      	add	sp, #20
   20d76:	bd90      	pop	{r4, r7, pc}
   20d78:	20004293 	.word	0x20004293
   20d7c:	20004298 	.word	0x20004298
   20d80:	2000429c 	.word	0x2000429c
   20d84:	000338b1 	.word	0x000338b1
   20d88:	00020691 	.word	0x00020691
   20d8c:	20004250 	.word	0x20004250
   20d90:	00028d91 	.word	0x00028d91
   20d94:	00020715 	.word	0x00020715

00020d98 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20d98:	b590      	push	{r4, r7, lr}
   20d9a:	b085      	sub	sp, #20
   20d9c:	af00      	add	r7, sp, #0
   20d9e:	6078      	str	r0, [r7, #4]
   20da0:	000a      	movs	r2, r1
   20da2:	1cbb      	adds	r3, r7, #2
   20da4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20da6:	230a      	movs	r3, #10
   20da8:	18fb      	adds	r3, r7, r3
   20daa:	22ff      	movs	r2, #255	; 0xff
   20dac:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20dae:	4b1c      	ldr	r3, [pc, #112]	; (20e20 <sd_mmc_spi_start_read_blocks+0x88>)
   20db0:	2200      	movs	r2, #0
   20db2:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20db4:	2300      	movs	r3, #0
   20db6:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20db8:	e025      	b.n	20e06 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   20dba:	4b1a      	ldr	r3, [pc, #104]	; (20e24 <sd_mmc_spi_start_read_blocks+0x8c>)
   20dbc:	4798      	blx	r3
   20dbe:	0003      	movs	r3, r0
   20dc0:	001a      	movs	r2, r3
   20dc2:	2301      	movs	r3, #1
   20dc4:	4053      	eors	r3, r2
   20dc6:	b2db      	uxtb	r3, r3
   20dc8:	2b00      	cmp	r3, #0
   20dca:	d001      	beq.n	20dd0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   20dcc:	2300      	movs	r3, #0
   20dce:	e022      	b.n	20e16 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20dd0:	687a      	ldr	r2, [r7, #4]
   20dd2:	68fb      	ldr	r3, [r7, #12]
   20dd4:	18d1      	adds	r1, r2, r3
   20dd6:	4b14      	ldr	r3, [pc, #80]	; (20e28 <sd_mmc_spi_start_read_blocks+0x90>)
   20dd8:	881a      	ldrh	r2, [r3, #0]
   20dda:	230a      	movs	r3, #10
   20ddc:	18fb      	adds	r3, r7, r3
   20dde:	881b      	ldrh	r3, [r3, #0]
   20de0:	4812      	ldr	r0, [pc, #72]	; (20e2c <sd_mmc_spi_start_read_blocks+0x94>)
   20de2:	4c13      	ldr	r4, [pc, #76]	; (20e30 <sd_mmc_spi_start_read_blocks+0x98>)
   20de4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20de6:	4b10      	ldr	r3, [pc, #64]	; (20e28 <sd_mmc_spi_start_read_blocks+0x90>)
   20de8:	881b      	ldrh	r3, [r3, #0]
   20dea:	001a      	movs	r2, r3
   20dec:	68fb      	ldr	r3, [r7, #12]
   20dee:	189b      	adds	r3, r3, r2
   20df0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20df2:	4b0d      	ldr	r3, [pc, #52]	; (20e28 <sd_mmc_spi_start_read_blocks+0x90>)
   20df4:	881b      	ldrh	r3, [r3, #0]
   20df6:	001a      	movs	r2, r3
   20df8:	4b0e      	ldr	r3, [pc, #56]	; (20e34 <sd_mmc_spi_start_read_blocks+0x9c>)
   20dfa:	681b      	ldr	r3, [r3, #0]
   20dfc:	18d2      	adds	r2, r2, r3
   20dfe:	4b0d      	ldr	r3, [pc, #52]	; (20e34 <sd_mmc_spi_start_read_blocks+0x9c>)
   20e00:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20e02:	4b0d      	ldr	r3, [pc, #52]	; (20e38 <sd_mmc_spi_start_read_blocks+0xa0>)
   20e04:	4798      	blx	r3
	while (nb_block--) {
   20e06:	1cbb      	adds	r3, r7, #2
   20e08:	881b      	ldrh	r3, [r3, #0]
   20e0a:	1cba      	adds	r2, r7, #2
   20e0c:	1e59      	subs	r1, r3, #1
   20e0e:	8011      	strh	r1, [r2, #0]
   20e10:	2b00      	cmp	r3, #0
   20e12:	d1d2      	bne.n	20dba <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20e14:	2301      	movs	r3, #1
}
   20e16:	0018      	movs	r0, r3
   20e18:	46bd      	mov	sp, r7
   20e1a:	b005      	add	sp, #20
   20e1c:	bd90      	pop	{r4, r7, pc}
   20e1e:	46c0      	nop			; (mov r8, r8)
   20e20:	20004293 	.word	0x20004293
   20e24:	00020691 	.word	0x00020691
   20e28:	2000429c 	.word	0x2000429c
   20e2c:	20004250 	.word	0x20004250
   20e30:	00028d91 	.word	0x00028d91
   20e34:	20004298 	.word	0x20004298
   20e38:	00020715 	.word	0x00020715

00020e3c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20e3c:	b580      	push	{r7, lr}
   20e3e:	af00      	add	r7, sp, #0
	return true;
   20e40:	2301      	movs	r3, #1
}
   20e42:	0018      	movs	r0, r3
   20e44:	46bd      	mov	sp, r7
   20e46:	bd80      	pop	{r7, pc}

00020e48 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20e48:	b580      	push	{r7, lr}
   20e4a:	b084      	sub	sp, #16
   20e4c:	af00      	add	r7, sp, #0
   20e4e:	6078      	str	r0, [r7, #4]
   20e50:	000a      	movs	r2, r1
   20e52:	1cbb      	adds	r3, r7, #2
   20e54:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20e56:	4b24      	ldr	r3, [pc, #144]	; (20ee8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20e58:	2200      	movs	r2, #0
   20e5a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20e5c:	2300      	movs	r3, #0
   20e5e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20e60:	e035      	b.n	20ece <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20e62:	4b22      	ldr	r3, [pc, #136]	; (20eec <sd_mmc_spi_start_write_blocks+0xa4>)
   20e64:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20e66:	687a      	ldr	r2, [r7, #4]
   20e68:	68fb      	ldr	r3, [r7, #12]
   20e6a:	18d1      	adds	r1, r2, r3
   20e6c:	4b20      	ldr	r3, [pc, #128]	; (20ef0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20e6e:	881a      	ldrh	r2, [r3, #0]
   20e70:	4b20      	ldr	r3, [pc, #128]	; (20ef4 <sd_mmc_spi_start_write_blocks+0xac>)
   20e72:	0018      	movs	r0, r3
   20e74:	4b20      	ldr	r3, [pc, #128]	; (20ef8 <sd_mmc_spi_start_write_blocks+0xb0>)
   20e76:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20e78:	4b1d      	ldr	r3, [pc, #116]	; (20ef0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20e7a:	881b      	ldrh	r3, [r3, #0]
   20e7c:	001a      	movs	r2, r3
   20e7e:	68fb      	ldr	r3, [r7, #12]
   20e80:	189b      	adds	r3, r3, r2
   20e82:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20e84:	4b1a      	ldr	r3, [pc, #104]	; (20ef0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20e86:	881b      	ldrh	r3, [r3, #0]
   20e88:	001a      	movs	r2, r3
   20e8a:	4b1c      	ldr	r3, [pc, #112]	; (20efc <sd_mmc_spi_start_write_blocks+0xb4>)
   20e8c:	681b      	ldr	r3, [r3, #0]
   20e8e:	18d2      	adds	r2, r2, r3
   20e90:	4b1a      	ldr	r3, [pc, #104]	; (20efc <sd_mmc_spi_start_write_blocks+0xb4>)
   20e92:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20e94:	4b1a      	ldr	r3, [pc, #104]	; (20f00 <sd_mmc_spi_start_write_blocks+0xb8>)
   20e96:	4798      	blx	r3
   20e98:	0003      	movs	r3, r0
   20e9a:	001a      	movs	r2, r3
   20e9c:	2301      	movs	r3, #1
   20e9e:	4053      	eors	r3, r2
   20ea0:	b2db      	uxtb	r3, r3
   20ea2:	2b00      	cmp	r3, #0
   20ea4:	d001      	beq.n	20eaa <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20ea6:	2300      	movs	r3, #0
   20ea8:	e019      	b.n	20ede <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20eaa:	1cbb      	adds	r3, r7, #2
   20eac:	881b      	ldrh	r3, [r3, #0]
   20eae:	2b00      	cmp	r3, #0
   20eb0:	d00d      	beq.n	20ece <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20eb2:	4b14      	ldr	r3, [pc, #80]	; (20f04 <sd_mmc_spi_start_write_blocks+0xbc>)
   20eb4:	4798      	blx	r3
   20eb6:	0003      	movs	r3, r0
   20eb8:	001a      	movs	r2, r3
   20eba:	2301      	movs	r3, #1
   20ebc:	4053      	eors	r3, r2
   20ebe:	b2db      	uxtb	r3, r3
   20ec0:	2b00      	cmp	r3, #0
   20ec2:	d004      	beq.n	20ece <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20ec4:	4b08      	ldr	r3, [pc, #32]	; (20ee8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20ec6:	2205      	movs	r2, #5
   20ec8:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20eca:	2300      	movs	r3, #0
   20ecc:	e007      	b.n	20ede <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20ece:	1cbb      	adds	r3, r7, #2
   20ed0:	881b      	ldrh	r3, [r3, #0]
   20ed2:	1cba      	adds	r2, r7, #2
   20ed4:	1e59      	subs	r1, r3, #1
   20ed6:	8011      	strh	r1, [r2, #0]
   20ed8:	2b00      	cmp	r3, #0
   20eda:	d1c2      	bne.n	20e62 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20edc:	2301      	movs	r3, #1
}
   20ede:	0018      	movs	r0, r3
   20ee0:	46bd      	mov	sp, r7
   20ee2:	b004      	add	sp, #16
   20ee4:	bd80      	pop	{r7, pc}
   20ee6:	46c0      	nop			; (mov r8, r8)
   20ee8:	20004293 	.word	0x20004293
   20eec:	00020741 	.word	0x00020741
   20ef0:	2000429c 	.word	0x2000429c
   20ef4:	20004250 	.word	0x20004250
   20ef8:	00028fb5 	.word	0x00028fb5
   20efc:	20004298 	.word	0x20004298
   20f00:	00020791 	.word	0x00020791
   20f04:	00020625 	.word	0x00020625

00020f08 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20f08:	b580      	push	{r7, lr}
   20f0a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20f0c:	4b09      	ldr	r3, [pc, #36]	; (20f34 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20f0e:	4798      	blx	r3
   20f10:	0003      	movs	r3, r0
   20f12:	001a      	movs	r2, r3
   20f14:	2301      	movs	r3, #1
   20f16:	4053      	eors	r3, r2
   20f18:	b2db      	uxtb	r3, r3
   20f1a:	2b00      	cmp	r3, #0
   20f1c:	d004      	beq.n	20f28 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20f1e:	4b06      	ldr	r3, [pc, #24]	; (20f38 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20f20:	2205      	movs	r2, #5
   20f22:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20f24:	2300      	movs	r3, #0
   20f26:	e002      	b.n	20f2e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20f28:	4b04      	ldr	r3, [pc, #16]	; (20f3c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20f2a:	4798      	blx	r3
   20f2c:	0003      	movs	r3, r0
}
   20f2e:	0018      	movs	r0, r3
   20f30:	46bd      	mov	sp, r7
   20f32:	bd80      	pop	{r7, pc}
   20f34:	00020625 	.word	0x00020625
   20f38:	20004293 	.word	0x20004293
   20f3c:	00020825 	.word	0x00020825

00020f40 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20f40:	b580      	push	{r7, lr}
   20f42:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20f44:	2000      	movs	r0, #0
   20f46:	4b0f      	ldr	r3, [pc, #60]	; (20f84 <delay_init+0x44>)
   20f48:	4798      	blx	r3
   20f4a:	0002      	movs	r2, r0
   20f4c:	4b0e      	ldr	r3, [pc, #56]	; (20f88 <delay_init+0x48>)
   20f4e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20f50:	4b0d      	ldr	r3, [pc, #52]	; (20f88 <delay_init+0x48>)
   20f52:	6818      	ldr	r0, [r3, #0]
   20f54:	4b0d      	ldr	r3, [pc, #52]	; (20f8c <delay_init+0x4c>)
   20f56:	22fa      	movs	r2, #250	; 0xfa
   20f58:	0091      	lsls	r1, r2, #2
   20f5a:	4798      	blx	r3
   20f5c:	0003      	movs	r3, r0
   20f5e:	001a      	movs	r2, r3
   20f60:	4b09      	ldr	r3, [pc, #36]	; (20f88 <delay_init+0x48>)
   20f62:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20f64:	4b08      	ldr	r3, [pc, #32]	; (20f88 <delay_init+0x48>)
   20f66:	6818      	ldr	r0, [r3, #0]
   20f68:	4b08      	ldr	r3, [pc, #32]	; (20f8c <delay_init+0x4c>)
   20f6a:	22fa      	movs	r2, #250	; 0xfa
   20f6c:	0091      	lsls	r1, r2, #2
   20f6e:	4798      	blx	r3
   20f70:	0003      	movs	r3, r0
   20f72:	001a      	movs	r2, r3
   20f74:	4b06      	ldr	r3, [pc, #24]	; (20f90 <delay_init+0x50>)
   20f76:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20f78:	4b06      	ldr	r3, [pc, #24]	; (20f94 <delay_init+0x54>)
   20f7a:	2205      	movs	r2, #5
   20f7c:	601a      	str	r2, [r3, #0]
}
   20f7e:	46c0      	nop			; (mov r8, r8)
   20f80:	46bd      	mov	sp, r7
   20f82:	bd80      	pop	{r7, pc}
   20f84:	0002ab39 	.word	0x0002ab39
   20f88:	2000011c 	.word	0x2000011c
   20f8c:	000337a5 	.word	0x000337a5
   20f90:	20000120 	.word	0x20000120
   20f94:	e000e010 	.word	0xe000e010

00020f98 <system_pinmux_get_group_from_gpio_pin>:
{
   20f98:	b580      	push	{r7, lr}
   20f9a:	b084      	sub	sp, #16
   20f9c:	af00      	add	r7, sp, #0
   20f9e:	0002      	movs	r2, r0
   20fa0:	1dfb      	adds	r3, r7, #7
   20fa2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20fa4:	230f      	movs	r3, #15
   20fa6:	18fb      	adds	r3, r7, r3
   20fa8:	1dfa      	adds	r2, r7, #7
   20faa:	7812      	ldrb	r2, [r2, #0]
   20fac:	09d2      	lsrs	r2, r2, #7
   20fae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20fb0:	230e      	movs	r3, #14
   20fb2:	18fb      	adds	r3, r7, r3
   20fb4:	1dfa      	adds	r2, r7, #7
   20fb6:	7812      	ldrb	r2, [r2, #0]
   20fb8:	0952      	lsrs	r2, r2, #5
   20fba:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20fbc:	4b0d      	ldr	r3, [pc, #52]	; (20ff4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20fbe:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20fc0:	230f      	movs	r3, #15
   20fc2:	18fb      	adds	r3, r7, r3
   20fc4:	781b      	ldrb	r3, [r3, #0]
   20fc6:	2b00      	cmp	r3, #0
   20fc8:	d10f      	bne.n	20fea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20fca:	230f      	movs	r3, #15
   20fcc:	18fb      	adds	r3, r7, r3
   20fce:	781b      	ldrb	r3, [r3, #0]
   20fd0:	009b      	lsls	r3, r3, #2
   20fd2:	2210      	movs	r2, #16
   20fd4:	4694      	mov	ip, r2
   20fd6:	44bc      	add	ip, r7
   20fd8:	4463      	add	r3, ip
   20fda:	3b08      	subs	r3, #8
   20fdc:	681a      	ldr	r2, [r3, #0]
   20fde:	230e      	movs	r3, #14
   20fe0:	18fb      	adds	r3, r7, r3
   20fe2:	781b      	ldrb	r3, [r3, #0]
   20fe4:	01db      	lsls	r3, r3, #7
   20fe6:	18d3      	adds	r3, r2, r3
   20fe8:	e000      	b.n	20fec <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20fea:	2300      	movs	r3, #0
}
   20fec:	0018      	movs	r0, r3
   20fee:	46bd      	mov	sp, r7
   20ff0:	b004      	add	sp, #16
   20ff2:	bd80      	pop	{r7, pc}
   20ff4:	41004400 	.word	0x41004400

00020ff8 <system_interrupt_enable_global>:
{
   20ff8:	b580      	push	{r7, lr}
   20ffa:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20ffc:	4b04      	ldr	r3, [pc, #16]	; (21010 <system_interrupt_enable_global+0x18>)
   20ffe:	2201      	movs	r2, #1
   21000:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   21002:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   21006:	b662      	cpsie	i
}
   21008:	46c0      	nop			; (mov r8, r8)
   2100a:	46bd      	mov	sp, r7
   2100c:	bd80      	pop	{r7, pc}
   2100e:	46c0      	nop			; (mov r8, r8)
   21010:	20000126 	.word	0x20000126

00021014 <port_get_group_from_gpio_pin>:
{
   21014:	b580      	push	{r7, lr}
   21016:	b082      	sub	sp, #8
   21018:	af00      	add	r7, sp, #0
   2101a:	0002      	movs	r2, r0
   2101c:	1dfb      	adds	r3, r7, #7
   2101e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21020:	1dfb      	adds	r3, r7, #7
   21022:	781b      	ldrb	r3, [r3, #0]
   21024:	0018      	movs	r0, r3
   21026:	4b03      	ldr	r3, [pc, #12]	; (21034 <port_get_group_from_gpio_pin+0x20>)
   21028:	4798      	blx	r3
   2102a:	0003      	movs	r3, r0
}
   2102c:	0018      	movs	r0, r3
   2102e:	46bd      	mov	sp, r7
   21030:	b002      	add	sp, #8
   21032:	bd80      	pop	{r7, pc}
   21034:	00020f99 	.word	0x00020f99

00021038 <port_get_config_defaults>:
{
   21038:	b580      	push	{r7, lr}
   2103a:	b082      	sub	sp, #8
   2103c:	af00      	add	r7, sp, #0
   2103e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21040:	687b      	ldr	r3, [r7, #4]
   21042:	2200      	movs	r2, #0
   21044:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21046:	687b      	ldr	r3, [r7, #4]
   21048:	2201      	movs	r2, #1
   2104a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2104c:	687b      	ldr	r3, [r7, #4]
   2104e:	2200      	movs	r2, #0
   21050:	709a      	strb	r2, [r3, #2]
}
   21052:	46c0      	nop			; (mov r8, r8)
   21054:	46bd      	mov	sp, r7
   21056:	b002      	add	sp, #8
   21058:	bd80      	pop	{r7, pc}
	...

0002105c <port_pin_set_output_level>:
{
   2105c:	b580      	push	{r7, lr}
   2105e:	b084      	sub	sp, #16
   21060:	af00      	add	r7, sp, #0
   21062:	0002      	movs	r2, r0
   21064:	1dfb      	adds	r3, r7, #7
   21066:	701a      	strb	r2, [r3, #0]
   21068:	1dbb      	adds	r3, r7, #6
   2106a:	1c0a      	adds	r2, r1, #0
   2106c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2106e:	1dfb      	adds	r3, r7, #7
   21070:	781b      	ldrb	r3, [r3, #0]
   21072:	0018      	movs	r0, r3
   21074:	4b0d      	ldr	r3, [pc, #52]	; (210ac <port_pin_set_output_level+0x50>)
   21076:	4798      	blx	r3
   21078:	0003      	movs	r3, r0
   2107a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2107c:	1dfb      	adds	r3, r7, #7
   2107e:	781b      	ldrb	r3, [r3, #0]
   21080:	221f      	movs	r2, #31
   21082:	4013      	ands	r3, r2
   21084:	2201      	movs	r2, #1
   21086:	409a      	lsls	r2, r3
   21088:	0013      	movs	r3, r2
   2108a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2108c:	1dbb      	adds	r3, r7, #6
   2108e:	781b      	ldrb	r3, [r3, #0]
   21090:	2b00      	cmp	r3, #0
   21092:	d003      	beq.n	2109c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21094:	68fb      	ldr	r3, [r7, #12]
   21096:	68ba      	ldr	r2, [r7, #8]
   21098:	619a      	str	r2, [r3, #24]
}
   2109a:	e002      	b.n	210a2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2109c:	68fb      	ldr	r3, [r7, #12]
   2109e:	68ba      	ldr	r2, [r7, #8]
   210a0:	615a      	str	r2, [r3, #20]
}
   210a2:	46c0      	nop			; (mov r8, r8)
   210a4:	46bd      	mov	sp, r7
   210a6:	b004      	add	sp, #16
   210a8:	bd80      	pop	{r7, pc}
   210aa:	46c0      	nop			; (mov r8, r8)
   210ac:	00021015 	.word	0x00021015

000210b0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   210b0:	b580      	push	{r7, lr}
   210b2:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   210b4:	4b04      	ldr	r3, [pc, #16]	; (210c8 <chip_isr+0x18>)
   210b6:	681b      	ldr	r3, [r3, #0]
   210b8:	2b00      	cmp	r3, #0
   210ba:	d002      	beq.n	210c2 <chip_isr+0x12>
		gpfIsr();
   210bc:	4b02      	ldr	r3, [pc, #8]	; (210c8 <chip_isr+0x18>)
   210be:	681b      	ldr	r3, [r3, #0]
   210c0:	4798      	blx	r3
	}
}
   210c2:	46c0      	nop			; (mov r8, r8)
   210c4:	46bd      	mov	sp, r7
   210c6:	bd80      	pop	{r7, pc}
   210c8:	200042a0 	.word	0x200042a0

000210cc <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   210cc:	b580      	push	{r7, lr}
   210ce:	b082      	sub	sp, #8
   210d0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   210d2:	1d3b      	adds	r3, r7, #4
   210d4:	0018      	movs	r0, r3
   210d6:	4b10      	ldr	r3, [pc, #64]	; (21118 <init_chip_pins+0x4c>)
   210d8:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   210da:	1d3b      	adds	r3, r7, #4
   210dc:	2201      	movs	r2, #1
   210de:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   210e0:	1d3b      	adds	r3, r7, #4
   210e2:	0019      	movs	r1, r3
   210e4:	201b      	movs	r0, #27
   210e6:	4b0d      	ldr	r3, [pc, #52]	; (2111c <init_chip_pins+0x50>)
   210e8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   210ea:	1d3b      	adds	r3, r7, #4
   210ec:	0019      	movs	r1, r3
   210ee:	201c      	movs	r0, #28
   210f0:	4b0a      	ldr	r3, [pc, #40]	; (2111c <init_chip_pins+0x50>)
   210f2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   210f4:	1d3b      	adds	r3, r7, #4
   210f6:	0019      	movs	r1, r3
   210f8:	2028      	movs	r0, #40	; 0x28
   210fa:	4b08      	ldr	r3, [pc, #32]	; (2111c <init_chip_pins+0x50>)
   210fc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   210fe:	2100      	movs	r1, #0
   21100:	201c      	movs	r0, #28
   21102:	4b07      	ldr	r3, [pc, #28]	; (21120 <init_chip_pins+0x54>)
   21104:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   21106:	2100      	movs	r1, #0
   21108:	201b      	movs	r0, #27
   2110a:	4b05      	ldr	r3, [pc, #20]	; (21120 <init_chip_pins+0x54>)
   2110c:	4798      	blx	r3
}
   2110e:	46c0      	nop			; (mov r8, r8)
   21110:	46bd      	mov	sp, r7
   21112:	b002      	add	sp, #8
   21114:	bd80      	pop	{r7, pc}
   21116:	46c0      	nop			; (mov r8, r8)
   21118:	00021039 	.word	0x00021039
   2111c:	00027781 	.word	0x00027781
   21120:	0002105d 	.word	0x0002105d

00021124 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   21124:	b580      	push	{r7, lr}
   21126:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   21128:	4b0b      	ldr	r3, [pc, #44]	; (21158 <nm_bsp_init+0x34>)
   2112a:	2200      	movs	r2, #0
   2112c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   2112e:	4b0b      	ldr	r3, [pc, #44]	; (2115c <nm_bsp_init+0x38>)
   21130:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   21132:	4b0b      	ldr	r3, [pc, #44]	; (21160 <nm_bsp_init+0x3c>)
   21134:	681b      	ldr	r3, [r3, #0]
   21136:	2201      	movs	r2, #1
   21138:	4013      	ands	r3, r2
   2113a:	d004      	beq.n	21146 <nm_bsp_init+0x22>
   2113c:	4b08      	ldr	r3, [pc, #32]	; (21160 <nm_bsp_init+0x3c>)
   2113e:	681b      	ldr	r3, [r3, #0]
   21140:	2202      	movs	r2, #2
   21142:	4013      	ands	r3, r2
   21144:	d101      	bne.n	2114a <nm_bsp_init+0x26>
	    delay_init();
   21146:	4b07      	ldr	r3, [pc, #28]	; (21164 <nm_bsp_init+0x40>)
   21148:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   2114a:	4b07      	ldr	r3, [pc, #28]	; (21168 <nm_bsp_init+0x44>)
   2114c:	4798      	blx	r3

	return M2M_SUCCESS;
   2114e:	2300      	movs	r3, #0
}
   21150:	0018      	movs	r0, r3
   21152:	46bd      	mov	sp, r7
   21154:	bd80      	pop	{r7, pc}
   21156:	46c0      	nop			; (mov r8, r8)
   21158:	200042a0 	.word	0x200042a0
   2115c:	000210cd 	.word	0x000210cd
   21160:	e000e010 	.word	0xe000e010
   21164:	00020f41 	.word	0x00020f41
   21168:	00020ff9 	.word	0x00020ff9

0002116c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   2116c:	b580      	push	{r7, lr}
   2116e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   21170:	2100      	movs	r1, #0
   21172:	201c      	movs	r0, #28
   21174:	4b0b      	ldr	r3, [pc, #44]	; (211a4 <nm_bsp_reset+0x38>)
   21176:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   21178:	2100      	movs	r1, #0
   2117a:	201b      	movs	r0, #27
   2117c:	4b09      	ldr	r3, [pc, #36]	; (211a4 <nm_bsp_reset+0x38>)
   2117e:	4798      	blx	r3
	nm_bsp_sleep(1);
   21180:	2001      	movs	r0, #1
   21182:	4b09      	ldr	r3, [pc, #36]	; (211a8 <nm_bsp_reset+0x3c>)
   21184:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   21186:	2101      	movs	r1, #1
   21188:	201c      	movs	r0, #28
   2118a:	4b06      	ldr	r3, [pc, #24]	; (211a4 <nm_bsp_reset+0x38>)
   2118c:	4798      	blx	r3
	nm_bsp_sleep(10);
   2118e:	200a      	movs	r0, #10
   21190:	4b05      	ldr	r3, [pc, #20]	; (211a8 <nm_bsp_reset+0x3c>)
   21192:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   21194:	2101      	movs	r1, #1
   21196:	201b      	movs	r0, #27
   21198:	4b02      	ldr	r3, [pc, #8]	; (211a4 <nm_bsp_reset+0x38>)
   2119a:	4798      	blx	r3
}
   2119c:	46c0      	nop			; (mov r8, r8)
   2119e:	46bd      	mov	sp, r7
   211a0:	bd80      	pop	{r7, pc}
   211a2:	46c0      	nop			; (mov r8, r8)
   211a4:	0002105d 	.word	0x0002105d
   211a8:	000211ad 	.word	0x000211ad

000211ac <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   211ac:	b580      	push	{r7, lr}
   211ae:	b082      	sub	sp, #8
   211b0:	af00      	add	r7, sp, #0
   211b2:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   211b4:	687b      	ldr	r3, [r7, #4]
   211b6:	0018      	movs	r0, r3
   211b8:	4b02      	ldr	r3, [pc, #8]	; (211c4 <nm_bsp_sleep+0x18>)
   211ba:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   211bc:	46c0      	nop			; (mov r8, r8)
   211be:	46bd      	mov	sp, r7
   211c0:	b002      	add	sp, #8
   211c2:	bd80      	pop	{r7, pc}
   211c4:	0001cfc1 	.word	0x0001cfc1

000211c8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   211c8:	b580      	push	{r7, lr}
   211ca:	b086      	sub	sp, #24
   211cc:	af00      	add	r7, sp, #0
   211ce:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   211d0:	4b15      	ldr	r3, [pc, #84]	; (21228 <nm_bsp_register_isr+0x60>)
   211d2:	687a      	ldr	r2, [r7, #4]
   211d4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   211d6:	230c      	movs	r3, #12
   211d8:	18fb      	adds	r3, r7, r3
   211da:	0018      	movs	r0, r3
   211dc:	4b13      	ldr	r3, [pc, #76]	; (2122c <nm_bsp_register_isr+0x64>)
   211de:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   211e0:	230c      	movs	r3, #12
   211e2:	18fb      	adds	r3, r7, r3
   211e4:	2229      	movs	r2, #41	; 0x29
   211e6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   211e8:	230c      	movs	r3, #12
   211ea:	18fb      	adds	r3, r7, r3
   211ec:	2200      	movs	r2, #0
   211ee:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   211f0:	230c      	movs	r3, #12
   211f2:	18fb      	adds	r3, r7, r3
   211f4:	2201      	movs	r2, #1
   211f6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   211f8:	230c      	movs	r3, #12
   211fa:	18fb      	adds	r3, r7, r3
   211fc:	2202      	movs	r2, #2
   211fe:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   21200:	230c      	movs	r3, #12
   21202:	18fb      	adds	r3, r7, r3
   21204:	0019      	movs	r1, r3
   21206:	2009      	movs	r0, #9
   21208:	4b09      	ldr	r3, [pc, #36]	; (21230 <nm_bsp_register_isr+0x68>)
   2120a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   2120c:	4b09      	ldr	r3, [pc, #36]	; (21234 <nm_bsp_register_isr+0x6c>)
   2120e:	2200      	movs	r2, #0
   21210:	2109      	movs	r1, #9
   21212:	0018      	movs	r0, r3
   21214:	4b08      	ldr	r3, [pc, #32]	; (21238 <nm_bsp_register_isr+0x70>)
   21216:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   21218:	2100      	movs	r1, #0
   2121a:	2009      	movs	r0, #9
   2121c:	4b07      	ldr	r3, [pc, #28]	; (2123c <nm_bsp_register_isr+0x74>)
   2121e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   21220:	46c0      	nop			; (mov r8, r8)
   21222:	46bd      	mov	sp, r7
   21224:	b006      	add	sp, #24
   21226:	bd80      	pop	{r7, pc}
   21228:	200042a0 	.word	0x200042a0
   2122c:	00027629 	.word	0x00027629
   21230:	0002765d 	.word	0x0002765d
   21234:	000210b1 	.word	0x000210b1
   21238:	00027229 	.word	0x00027229
   2123c:	0002728d 	.word	0x0002728d

00021240 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   21240:	b580      	push	{r7, lr}
   21242:	b082      	sub	sp, #8
   21244:	af00      	add	r7, sp, #0
   21246:	0002      	movs	r2, r0
   21248:	1dfb      	adds	r3, r7, #7
   2124a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   2124c:	1dfb      	adds	r3, r7, #7
   2124e:	781b      	ldrb	r3, [r3, #0]
   21250:	2b00      	cmp	r3, #0
   21252:	d004      	beq.n	2125e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   21254:	2100      	movs	r1, #0
   21256:	2009      	movs	r0, #9
   21258:	4b05      	ldr	r3, [pc, #20]	; (21270 <nm_bsp_interrupt_ctrl+0x30>)
   2125a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   2125c:	e003      	b.n	21266 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2125e:	2100      	movs	r1, #0
   21260:	2009      	movs	r0, #9
   21262:	4b04      	ldr	r3, [pc, #16]	; (21274 <nm_bsp_interrupt_ctrl+0x34>)
   21264:	4798      	blx	r3
}
   21266:	46c0      	nop			; (mov r8, r8)
   21268:	46bd      	mov	sp, r7
   2126a:	b002      	add	sp, #8
   2126c:	bd80      	pop	{r7, pc}
   2126e:	46c0      	nop			; (mov r8, r8)
   21270:	0002728d 	.word	0x0002728d
   21274:	000272d5 	.word	0x000272d5

00021278 <system_pinmux_get_group_from_gpio_pin>:
{
   21278:	b580      	push	{r7, lr}
   2127a:	b084      	sub	sp, #16
   2127c:	af00      	add	r7, sp, #0
   2127e:	0002      	movs	r2, r0
   21280:	1dfb      	adds	r3, r7, #7
   21282:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   21284:	230f      	movs	r3, #15
   21286:	18fb      	adds	r3, r7, r3
   21288:	1dfa      	adds	r2, r7, #7
   2128a:	7812      	ldrb	r2, [r2, #0]
   2128c:	09d2      	lsrs	r2, r2, #7
   2128e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   21290:	230e      	movs	r3, #14
   21292:	18fb      	adds	r3, r7, r3
   21294:	1dfa      	adds	r2, r7, #7
   21296:	7812      	ldrb	r2, [r2, #0]
   21298:	0952      	lsrs	r2, r2, #5
   2129a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2129c:	4b0d      	ldr	r3, [pc, #52]	; (212d4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2129e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   212a0:	230f      	movs	r3, #15
   212a2:	18fb      	adds	r3, r7, r3
   212a4:	781b      	ldrb	r3, [r3, #0]
   212a6:	2b00      	cmp	r3, #0
   212a8:	d10f      	bne.n	212ca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   212aa:	230f      	movs	r3, #15
   212ac:	18fb      	adds	r3, r7, r3
   212ae:	781b      	ldrb	r3, [r3, #0]
   212b0:	009b      	lsls	r3, r3, #2
   212b2:	2210      	movs	r2, #16
   212b4:	4694      	mov	ip, r2
   212b6:	44bc      	add	ip, r7
   212b8:	4463      	add	r3, ip
   212ba:	3b08      	subs	r3, #8
   212bc:	681a      	ldr	r2, [r3, #0]
   212be:	230e      	movs	r3, #14
   212c0:	18fb      	adds	r3, r7, r3
   212c2:	781b      	ldrb	r3, [r3, #0]
   212c4:	01db      	lsls	r3, r3, #7
   212c6:	18d3      	adds	r3, r2, r3
   212c8:	e000      	b.n	212cc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   212ca:	2300      	movs	r3, #0
}
   212cc:	0018      	movs	r0, r3
   212ce:	46bd      	mov	sp, r7
   212d0:	b004      	add	sp, #16
   212d2:	bd80      	pop	{r7, pc}
   212d4:	41004400 	.word	0x41004400

000212d8 <system_interrupt_enable>:
{
   212d8:	b580      	push	{r7, lr}
   212da:	b082      	sub	sp, #8
   212dc:	af00      	add	r7, sp, #0
   212de:	0002      	movs	r2, r0
   212e0:	1dfb      	adds	r3, r7, #7
   212e2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   212e4:	4b06      	ldr	r3, [pc, #24]	; (21300 <system_interrupt_enable+0x28>)
   212e6:	1dfa      	adds	r2, r7, #7
   212e8:	7812      	ldrb	r2, [r2, #0]
   212ea:	0011      	movs	r1, r2
   212ec:	221f      	movs	r2, #31
   212ee:	400a      	ands	r2, r1
   212f0:	2101      	movs	r1, #1
   212f2:	4091      	lsls	r1, r2
   212f4:	000a      	movs	r2, r1
   212f6:	601a      	str	r2, [r3, #0]
}
   212f8:	46c0      	nop			; (mov r8, r8)
   212fa:	46bd      	mov	sp, r7
   212fc:	b002      	add	sp, #8
   212fe:	bd80      	pop	{r7, pc}
   21300:	e000e100 	.word	0xe000e100

00021304 <system_interrupt_disable>:
{
   21304:	b580      	push	{r7, lr}
   21306:	b082      	sub	sp, #8
   21308:	af00      	add	r7, sp, #0
   2130a:	0002      	movs	r2, r0
   2130c:	1dfb      	adds	r3, r7, #7
   2130e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21310:	4a07      	ldr	r2, [pc, #28]	; (21330 <system_interrupt_disable+0x2c>)
   21312:	1dfb      	adds	r3, r7, #7
   21314:	781b      	ldrb	r3, [r3, #0]
   21316:	0019      	movs	r1, r3
   21318:	231f      	movs	r3, #31
   2131a:	400b      	ands	r3, r1
   2131c:	2101      	movs	r1, #1
   2131e:	4099      	lsls	r1, r3
   21320:	000b      	movs	r3, r1
   21322:	0019      	movs	r1, r3
   21324:	2380      	movs	r3, #128	; 0x80
   21326:	50d1      	str	r1, [r2, r3]
}
   21328:	46c0      	nop			; (mov r8, r8)
   2132a:	46bd      	mov	sp, r7
   2132c:	b002      	add	sp, #8
   2132e:	bd80      	pop	{r7, pc}
   21330:	e000e100 	.word	0xe000e100

00021334 <port_get_group_from_gpio_pin>:
{
   21334:	b580      	push	{r7, lr}
   21336:	b082      	sub	sp, #8
   21338:	af00      	add	r7, sp, #0
   2133a:	0002      	movs	r2, r0
   2133c:	1dfb      	adds	r3, r7, #7
   2133e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21340:	1dfb      	adds	r3, r7, #7
   21342:	781b      	ldrb	r3, [r3, #0]
   21344:	0018      	movs	r0, r3
   21346:	4b03      	ldr	r3, [pc, #12]	; (21354 <port_get_group_from_gpio_pin+0x20>)
   21348:	4798      	blx	r3
   2134a:	0003      	movs	r3, r0
}
   2134c:	0018      	movs	r0, r3
   2134e:	46bd      	mov	sp, r7
   21350:	b002      	add	sp, #8
   21352:	bd80      	pop	{r7, pc}
   21354:	00021279 	.word	0x00021279

00021358 <port_get_config_defaults>:
{
   21358:	b580      	push	{r7, lr}
   2135a:	b082      	sub	sp, #8
   2135c:	af00      	add	r7, sp, #0
   2135e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21360:	687b      	ldr	r3, [r7, #4]
   21362:	2200      	movs	r2, #0
   21364:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21366:	687b      	ldr	r3, [r7, #4]
   21368:	2201      	movs	r2, #1
   2136a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2136c:	687b      	ldr	r3, [r7, #4]
   2136e:	2200      	movs	r2, #0
   21370:	709a      	strb	r2, [r3, #2]
}
   21372:	46c0      	nop			; (mov r8, r8)
   21374:	46bd      	mov	sp, r7
   21376:	b002      	add	sp, #8
   21378:	bd80      	pop	{r7, pc}
	...

0002137c <port_pin_set_output_level>:
{
   2137c:	b580      	push	{r7, lr}
   2137e:	b084      	sub	sp, #16
   21380:	af00      	add	r7, sp, #0
   21382:	0002      	movs	r2, r0
   21384:	1dfb      	adds	r3, r7, #7
   21386:	701a      	strb	r2, [r3, #0]
   21388:	1dbb      	adds	r3, r7, #6
   2138a:	1c0a      	adds	r2, r1, #0
   2138c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2138e:	1dfb      	adds	r3, r7, #7
   21390:	781b      	ldrb	r3, [r3, #0]
   21392:	0018      	movs	r0, r3
   21394:	4b0d      	ldr	r3, [pc, #52]	; (213cc <port_pin_set_output_level+0x50>)
   21396:	4798      	blx	r3
   21398:	0003      	movs	r3, r0
   2139a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2139c:	1dfb      	adds	r3, r7, #7
   2139e:	781b      	ldrb	r3, [r3, #0]
   213a0:	221f      	movs	r2, #31
   213a2:	4013      	ands	r3, r2
   213a4:	2201      	movs	r2, #1
   213a6:	409a      	lsls	r2, r3
   213a8:	0013      	movs	r3, r2
   213aa:	60bb      	str	r3, [r7, #8]
	if (level) {
   213ac:	1dbb      	adds	r3, r7, #6
   213ae:	781b      	ldrb	r3, [r3, #0]
   213b0:	2b00      	cmp	r3, #0
   213b2:	d003      	beq.n	213bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   213b4:	68fb      	ldr	r3, [r7, #12]
   213b6:	68ba      	ldr	r2, [r7, #8]
   213b8:	619a      	str	r2, [r3, #24]
}
   213ba:	e002      	b.n	213c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   213bc:	68fb      	ldr	r3, [r7, #12]
   213be:	68ba      	ldr	r2, [r7, #8]
   213c0:	615a      	str	r2, [r3, #20]
}
   213c2:	46c0      	nop			; (mov r8, r8)
   213c4:	46bd      	mov	sp, r7
   213c6:	b004      	add	sp, #16
   213c8:	bd80      	pop	{r7, pc}
   213ca:	46c0      	nop			; (mov r8, r8)
   213cc:	00021335 	.word	0x00021335

000213d0 <spi_is_syncing>:
{
   213d0:	b580      	push	{r7, lr}
   213d2:	b084      	sub	sp, #16
   213d4:	af00      	add	r7, sp, #0
   213d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   213d8:	687b      	ldr	r3, [r7, #4]
   213da:	681b      	ldr	r3, [r3, #0]
   213dc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   213de:	68fb      	ldr	r3, [r7, #12]
   213e0:	69db      	ldr	r3, [r3, #28]
   213e2:	1e5a      	subs	r2, r3, #1
   213e4:	4193      	sbcs	r3, r2
   213e6:	b2db      	uxtb	r3, r3
}
   213e8:	0018      	movs	r0, r3
   213ea:	46bd      	mov	sp, r7
   213ec:	b004      	add	sp, #16
   213ee:	bd80      	pop	{r7, pc}

000213f0 <spi_get_config_defaults>:
{
   213f0:	b580      	push	{r7, lr}
   213f2:	b082      	sub	sp, #8
   213f4:	af00      	add	r7, sp, #0
   213f6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   213f8:	687b      	ldr	r3, [r7, #4]
   213fa:	2201      	movs	r2, #1
   213fc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   213fe:	687b      	ldr	r3, [r7, #4]
   21400:	2200      	movs	r2, #0
   21402:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   21404:	687b      	ldr	r3, [r7, #4]
   21406:	2200      	movs	r2, #0
   21408:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2140a:	687b      	ldr	r3, [r7, #4]
   2140c:	22c0      	movs	r2, #192	; 0xc0
   2140e:	0392      	lsls	r2, r2, #14
   21410:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   21412:	687b      	ldr	r3, [r7, #4]
   21414:	2200      	movs	r2, #0
   21416:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   21418:	687b      	ldr	r3, [r7, #4]
   2141a:	2200      	movs	r2, #0
   2141c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2141e:	687b      	ldr	r3, [r7, #4]
   21420:	2201      	movs	r2, #1
   21422:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   21424:	687b      	ldr	r3, [r7, #4]
   21426:	2201      	movs	r2, #1
   21428:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   2142a:	687b      	ldr	r3, [r7, #4]
   2142c:	2200      	movs	r2, #0
   2142e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   21430:	687b      	ldr	r3, [r7, #4]
   21432:	2224      	movs	r2, #36	; 0x24
   21434:	2100      	movs	r1, #0
   21436:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   21438:	687b      	ldr	r3, [r7, #4]
   2143a:	3318      	adds	r3, #24
   2143c:	220c      	movs	r2, #12
   2143e:	2100      	movs	r1, #0
   21440:	0018      	movs	r0, r3
   21442:	4b0a      	ldr	r3, [pc, #40]	; (2146c <spi_get_config_defaults+0x7c>)
   21444:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   21446:	687b      	ldr	r3, [r7, #4]
   21448:	4a09      	ldr	r2, [pc, #36]	; (21470 <spi_get_config_defaults+0x80>)
   2144a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   2144c:	687b      	ldr	r3, [r7, #4]
   2144e:	2200      	movs	r2, #0
   21450:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   21452:	687b      	ldr	r3, [r7, #4]
   21454:	2200      	movs	r2, #0
   21456:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   21458:	687b      	ldr	r3, [r7, #4]
   2145a:	2200      	movs	r2, #0
   2145c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2145e:	687b      	ldr	r3, [r7, #4]
   21460:	2200      	movs	r2, #0
   21462:	635a      	str	r2, [r3, #52]	; 0x34
};
   21464:	46c0      	nop			; (mov r8, r8)
   21466:	46bd      	mov	sp, r7
   21468:	b002      	add	sp, #8
   2146a:	bd80      	pop	{r7, pc}
   2146c:	0003577f 	.word	0x0003577f
   21470:	000186a0 	.word	0x000186a0

00021474 <spi_slave_inst_get_config_defaults>:
{
   21474:	b580      	push	{r7, lr}
   21476:	b082      	sub	sp, #8
   21478:	af00      	add	r7, sp, #0
   2147a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   2147c:	687b      	ldr	r3, [r7, #4]
   2147e:	220a      	movs	r2, #10
   21480:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21482:	687b      	ldr	r3, [r7, #4]
   21484:	2200      	movs	r2, #0
   21486:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   21488:	687b      	ldr	r3, [r7, #4]
   2148a:	2200      	movs	r2, #0
   2148c:	709a      	strb	r2, [r3, #2]
}
   2148e:	46c0      	nop			; (mov r8, r8)
   21490:	46bd      	mov	sp, r7
   21492:	b002      	add	sp, #8
   21494:	bd80      	pop	{r7, pc}
	...

00021498 <spi_attach_slave>:
{
   21498:	b580      	push	{r7, lr}
   2149a:	b084      	sub	sp, #16
   2149c:	af00      	add	r7, sp, #0
   2149e:	6078      	str	r0, [r7, #4]
   214a0:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   214a2:	683b      	ldr	r3, [r7, #0]
   214a4:	781a      	ldrb	r2, [r3, #0]
   214a6:	687b      	ldr	r3, [r7, #4]
   214a8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   214aa:	683b      	ldr	r3, [r7, #0]
   214ac:	785a      	ldrb	r2, [r3, #1]
   214ae:	687b      	ldr	r3, [r7, #4]
   214b0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   214b2:	683b      	ldr	r3, [r7, #0]
   214b4:	789a      	ldrb	r2, [r3, #2]
   214b6:	687b      	ldr	r3, [r7, #4]
   214b8:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   214ba:	230c      	movs	r3, #12
   214bc:	18fb      	adds	r3, r7, r3
   214be:	0018      	movs	r0, r3
   214c0:	4b0b      	ldr	r3, [pc, #44]	; (214f0 <spi_attach_slave+0x58>)
   214c2:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   214c4:	230c      	movs	r3, #12
   214c6:	18fb      	adds	r3, r7, r3
   214c8:	2201      	movs	r2, #1
   214ca:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   214cc:	687b      	ldr	r3, [r7, #4]
   214ce:	781b      	ldrb	r3, [r3, #0]
   214d0:	220c      	movs	r2, #12
   214d2:	18ba      	adds	r2, r7, r2
   214d4:	0011      	movs	r1, r2
   214d6:	0018      	movs	r0, r3
   214d8:	4b06      	ldr	r3, [pc, #24]	; (214f4 <spi_attach_slave+0x5c>)
   214da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   214dc:	687b      	ldr	r3, [r7, #4]
   214de:	781b      	ldrb	r3, [r3, #0]
   214e0:	2101      	movs	r1, #1
   214e2:	0018      	movs	r0, r3
   214e4:	4b04      	ldr	r3, [pc, #16]	; (214f8 <spi_attach_slave+0x60>)
   214e6:	4798      	blx	r3
}
   214e8:	46c0      	nop			; (mov r8, r8)
   214ea:	46bd      	mov	sp, r7
   214ec:	b004      	add	sp, #16
   214ee:	bd80      	pop	{r7, pc}
   214f0:	00021359 	.word	0x00021359
   214f4:	00027781 	.word	0x00027781
   214f8:	0002137d 	.word	0x0002137d

000214fc <spi_enable>:
{
   214fc:	b580      	push	{r7, lr}
   214fe:	b084      	sub	sp, #16
   21500:	af00      	add	r7, sp, #0
   21502:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   21504:	687b      	ldr	r3, [r7, #4]
   21506:	681b      	ldr	r3, [r3, #0]
   21508:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2150a:	687b      	ldr	r3, [r7, #4]
   2150c:	681b      	ldr	r3, [r3, #0]
   2150e:	0018      	movs	r0, r3
   21510:	4b0b      	ldr	r3, [pc, #44]	; (21540 <spi_enable+0x44>)
   21512:	4798      	blx	r3
   21514:	0003      	movs	r3, r0
   21516:	0018      	movs	r0, r3
   21518:	4b0a      	ldr	r3, [pc, #40]	; (21544 <spi_enable+0x48>)
   2151a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2151c:	46c0      	nop			; (mov r8, r8)
   2151e:	687b      	ldr	r3, [r7, #4]
   21520:	0018      	movs	r0, r3
   21522:	4b09      	ldr	r3, [pc, #36]	; (21548 <spi_enable+0x4c>)
   21524:	4798      	blx	r3
   21526:	1e03      	subs	r3, r0, #0
   21528:	d1f9      	bne.n	2151e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2152a:	68fb      	ldr	r3, [r7, #12]
   2152c:	681b      	ldr	r3, [r3, #0]
   2152e:	2202      	movs	r2, #2
   21530:	431a      	orrs	r2, r3
   21532:	68fb      	ldr	r3, [r7, #12]
   21534:	601a      	str	r2, [r3, #0]
}
   21536:	46c0      	nop			; (mov r8, r8)
   21538:	46bd      	mov	sp, r7
   2153a:	b004      	add	sp, #16
   2153c:	bd80      	pop	{r7, pc}
   2153e:	46c0      	nop			; (mov r8, r8)
   21540:	00028451 	.word	0x00028451
   21544:	000212d9 	.word	0x000212d9
   21548:	000213d1 	.word	0x000213d1

0002154c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   2154c:	b580      	push	{r7, lr}
   2154e:	b084      	sub	sp, #16
   21550:	af00      	add	r7, sp, #0
   21552:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21554:	687b      	ldr	r3, [r7, #4]
   21556:	681b      	ldr	r3, [r3, #0]
   21558:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2155a:	687b      	ldr	r3, [r7, #4]
   2155c:	681b      	ldr	r3, [r3, #0]
   2155e:	0018      	movs	r0, r3
   21560:	4b0e      	ldr	r3, [pc, #56]	; (2159c <spi_disable+0x50>)
   21562:	4798      	blx	r3
   21564:	0003      	movs	r3, r0
   21566:	0018      	movs	r0, r3
   21568:	4b0d      	ldr	r3, [pc, #52]	; (215a0 <spi_disable+0x54>)
   2156a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   2156c:	46c0      	nop			; (mov r8, r8)
   2156e:	687b      	ldr	r3, [r7, #4]
   21570:	0018      	movs	r0, r3
   21572:	4b0c      	ldr	r3, [pc, #48]	; (215a4 <spi_disable+0x58>)
   21574:	4798      	blx	r3
   21576:	1e03      	subs	r3, r0, #0
   21578:	d1f9      	bne.n	2156e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2157a:	68fb      	ldr	r3, [r7, #12]
   2157c:	228f      	movs	r2, #143	; 0x8f
   2157e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   21580:	68fb      	ldr	r3, [r7, #12]
   21582:	228f      	movs	r2, #143	; 0x8f
   21584:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   21586:	68fb      	ldr	r3, [r7, #12]
   21588:	681b      	ldr	r3, [r3, #0]
   2158a:	2202      	movs	r2, #2
   2158c:	4393      	bics	r3, r2
   2158e:	001a      	movs	r2, r3
   21590:	68fb      	ldr	r3, [r7, #12]
   21592:	601a      	str	r2, [r3, #0]
}
   21594:	46c0      	nop			; (mov r8, r8)
   21596:	46bd      	mov	sp, r7
   21598:	b004      	add	sp, #16
   2159a:	bd80      	pop	{r7, pc}
   2159c:	00028451 	.word	0x00028451
   215a0:	00021305 	.word	0x00021305
   215a4:	000213d1 	.word	0x000213d1

000215a8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   215a8:	b580      	push	{r7, lr}
   215aa:	b084      	sub	sp, #16
   215ac:	af00      	add	r7, sp, #0
   215ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   215b0:	687b      	ldr	r3, [r7, #4]
   215b2:	681b      	ldr	r3, [r3, #0]
   215b4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   215b6:	68fb      	ldr	r3, [r7, #12]
   215b8:	7e1b      	ldrb	r3, [r3, #24]
   215ba:	b2db      	uxtb	r3, r3
   215bc:	001a      	movs	r2, r3
   215be:	2302      	movs	r3, #2
   215c0:	4013      	ands	r3, r2
   215c2:	1e5a      	subs	r2, r3, #1
   215c4:	4193      	sbcs	r3, r2
   215c6:	b2db      	uxtb	r3, r3
}
   215c8:	0018      	movs	r0, r3
   215ca:	46bd      	mov	sp, r7
   215cc:	b004      	add	sp, #16
   215ce:	bd80      	pop	{r7, pc}

000215d0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   215d0:	b580      	push	{r7, lr}
   215d2:	b084      	sub	sp, #16
   215d4:	af00      	add	r7, sp, #0
   215d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   215d8:	687b      	ldr	r3, [r7, #4]
   215da:	681b      	ldr	r3, [r3, #0]
   215dc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   215de:	68fb      	ldr	r3, [r7, #12]
   215e0:	7e1b      	ldrb	r3, [r3, #24]
   215e2:	b2db      	uxtb	r3, r3
   215e4:	001a      	movs	r2, r3
   215e6:	2301      	movs	r3, #1
   215e8:	4013      	ands	r3, r2
   215ea:	1e5a      	subs	r2, r3, #1
   215ec:	4193      	sbcs	r3, r2
   215ee:	b2db      	uxtb	r3, r3
}
   215f0:	0018      	movs	r0, r3
   215f2:	46bd      	mov	sp, r7
   215f4:	b004      	add	sp, #16
   215f6:	bd80      	pop	{r7, pc}

000215f8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   215f8:	b580      	push	{r7, lr}
   215fa:	b084      	sub	sp, #16
   215fc:	af00      	add	r7, sp, #0
   215fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21600:	687b      	ldr	r3, [r7, #4]
   21602:	681b      	ldr	r3, [r3, #0]
   21604:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   21606:	68fb      	ldr	r3, [r7, #12]
   21608:	7e1b      	ldrb	r3, [r3, #24]
   2160a:	b2db      	uxtb	r3, r3
   2160c:	001a      	movs	r2, r3
   2160e:	2304      	movs	r3, #4
   21610:	4013      	ands	r3, r2
   21612:	1e5a      	subs	r2, r3, #1
   21614:	4193      	sbcs	r3, r2
   21616:	b2db      	uxtb	r3, r3
}
   21618:	0018      	movs	r0, r3
   2161a:	46bd      	mov	sp, r7
   2161c:	b004      	add	sp, #16
   2161e:	bd80      	pop	{r7, pc}

00021620 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   21620:	b580      	push	{r7, lr}
   21622:	b084      	sub	sp, #16
   21624:	af00      	add	r7, sp, #0
   21626:	6078      	str	r0, [r7, #4]
   21628:	000a      	movs	r2, r1
   2162a:	1cbb      	adds	r3, r7, #2
   2162c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2162e:	687b      	ldr	r3, [r7, #4]
   21630:	681b      	ldr	r3, [r3, #0]
   21632:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   21634:	687b      	ldr	r3, [r7, #4]
   21636:	0018      	movs	r0, r3
   21638:	4b0a      	ldr	r3, [pc, #40]	; (21664 <spi_write+0x44>)
   2163a:	4798      	blx	r3
   2163c:	0003      	movs	r3, r0
   2163e:	001a      	movs	r2, r3
   21640:	2301      	movs	r3, #1
   21642:	4053      	eors	r3, r2
   21644:	b2db      	uxtb	r3, r3
   21646:	2b00      	cmp	r3, #0
   21648:	d001      	beq.n	2164e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2164a:	2305      	movs	r3, #5
   2164c:	e006      	b.n	2165c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2164e:	1cbb      	adds	r3, r7, #2
   21650:	881b      	ldrh	r3, [r3, #0]
   21652:	05db      	lsls	r3, r3, #23
   21654:	0dda      	lsrs	r2, r3, #23
   21656:	68fb      	ldr	r3, [r7, #12]
   21658:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2165a:	2300      	movs	r3, #0
}
   2165c:	0018      	movs	r0, r3
   2165e:	46bd      	mov	sp, r7
   21660:	b004      	add	sp, #16
   21662:	bd80      	pop	{r7, pc}
   21664:	000215d1 	.word	0x000215d1

00021668 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   21668:	b580      	push	{r7, lr}
   2166a:	b084      	sub	sp, #16
   2166c:	af00      	add	r7, sp, #0
   2166e:	6078      	str	r0, [r7, #4]
   21670:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21672:	687b      	ldr	r3, [r7, #4]
   21674:	681b      	ldr	r3, [r3, #0]
   21676:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   21678:	687b      	ldr	r3, [r7, #4]
   2167a:	0018      	movs	r0, r3
   2167c:	4b1b      	ldr	r3, [pc, #108]	; (216ec <spi_read+0x84>)
   2167e:	4798      	blx	r3
   21680:	0003      	movs	r3, r0
   21682:	001a      	movs	r2, r3
   21684:	2301      	movs	r3, #1
   21686:	4053      	eors	r3, r2
   21688:	b2db      	uxtb	r3, r3
   2168a:	2b00      	cmp	r3, #0
   2168c:	d001      	beq.n	21692 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   2168e:	2310      	movs	r3, #16
   21690:	e027      	b.n	216e2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   21692:	230f      	movs	r3, #15
   21694:	18fb      	adds	r3, r7, r3
   21696:	2200      	movs	r2, #0
   21698:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2169a:	68bb      	ldr	r3, [r7, #8]
   2169c:	8b5b      	ldrh	r3, [r3, #26]
   2169e:	b29b      	uxth	r3, r3
   216a0:	001a      	movs	r2, r3
   216a2:	2304      	movs	r3, #4
   216a4:	4013      	ands	r3, r2
   216a6:	d006      	beq.n	216b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   216a8:	230f      	movs	r3, #15
   216aa:	18fb      	adds	r3, r7, r3
   216ac:	221e      	movs	r2, #30
   216ae:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   216b0:	68bb      	ldr	r3, [r7, #8]
   216b2:	2204      	movs	r2, #4
   216b4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   216b6:	687b      	ldr	r3, [r7, #4]
   216b8:	799b      	ldrb	r3, [r3, #6]
   216ba:	2b01      	cmp	r3, #1
   216bc:	d108      	bne.n	216d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   216be:	68bb      	ldr	r3, [r7, #8]
   216c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   216c2:	b29b      	uxth	r3, r3
   216c4:	05db      	lsls	r3, r3, #23
   216c6:	0ddb      	lsrs	r3, r3, #23
   216c8:	b29a      	uxth	r2, r3
   216ca:	683b      	ldr	r3, [r7, #0]
   216cc:	801a      	strh	r2, [r3, #0]
   216ce:	e005      	b.n	216dc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   216d0:	68bb      	ldr	r3, [r7, #8]
   216d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   216d4:	b2db      	uxtb	r3, r3
   216d6:	b29a      	uxth	r2, r3
   216d8:	683b      	ldr	r3, [r7, #0]
   216da:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   216dc:	230f      	movs	r3, #15
   216de:	18fb      	adds	r3, r7, r3
   216e0:	781b      	ldrb	r3, [r3, #0]
}
   216e2:	0018      	movs	r0, r3
   216e4:	46bd      	mov	sp, r7
   216e6:	b004      	add	sp, #16
   216e8:	bd80      	pop	{r7, pc}
   216ea:	46c0      	nop			; (mov r8, r8)
   216ec:	000215f9 	.word	0x000215f9

000216f0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   216f0:	b580      	push	{r7, lr}
   216f2:	b086      	sub	sp, #24
   216f4:	af00      	add	r7, sp, #0
   216f6:	60f8      	str	r0, [r7, #12]
   216f8:	60b9      	str	r1, [r7, #8]
   216fa:	1dbb      	adds	r3, r7, #6
   216fc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   216fe:	2313      	movs	r3, #19
   21700:	18fb      	adds	r3, r7, r3
   21702:	22ff      	movs	r2, #255	; 0xff
   21704:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   21706:	2317      	movs	r3, #23
   21708:	18fb      	adds	r3, r7, r3
   2170a:	2200      	movs	r2, #0
   2170c:	701a      	strb	r2, [r3, #0]
   2170e:	2316      	movs	r3, #22
   21710:	18fb      	adds	r3, r7, r3
   21712:	2200      	movs	r2, #0
   21714:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   21716:	2314      	movs	r3, #20
   21718:	18fb      	adds	r3, r7, r3
   2171a:	2200      	movs	r2, #0
   2171c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   2171e:	2310      	movs	r3, #16
   21720:	18fb      	adds	r3, r7, r3
   21722:	2200      	movs	r2, #0
   21724:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   21726:	68bb      	ldr	r3, [r7, #8]
   21728:	2b00      	cmp	r3, #0
   2172a:	d102      	bne.n	21732 <spi_rw+0x42>
   2172c:	68fb      	ldr	r3, [r7, #12]
   2172e:	2b00      	cmp	r3, #0
   21730:	d003      	beq.n	2173a <spi_rw+0x4a>
   21732:	1dbb      	adds	r3, r7, #6
   21734:	881b      	ldrh	r3, [r3, #0]
   21736:	2b00      	cmp	r3, #0
   21738:	d102      	bne.n	21740 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2173a:	230f      	movs	r3, #15
   2173c:	425b      	negs	r3, r3
   2173e:	e07e      	b.n	2183e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   21740:	68fb      	ldr	r3, [r7, #12]
   21742:	2b00      	cmp	r3, #0
   21744:	d106      	bne.n	21754 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   21746:	2313      	movs	r3, #19
   21748:	18fb      	adds	r3, r7, r3
   2174a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   2174c:	2317      	movs	r3, #23
   2174e:	18fb      	adds	r3, r7, r3
   21750:	2201      	movs	r2, #1
   21752:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   21754:	68bb      	ldr	r3, [r7, #8]
   21756:	2b00      	cmp	r3, #0
   21758:	d106      	bne.n	21768 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2175a:	2313      	movs	r3, #19
   2175c:	18fb      	adds	r3, r7, r3
   2175e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   21760:	2316      	movs	r3, #22
   21762:	18fb      	adds	r3, r7, r3
   21764:	2201      	movs	r2, #1
   21766:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   21768:	4937      	ldr	r1, [pc, #220]	; (21848 <spi_rw+0x158>)
   2176a:	4b38      	ldr	r3, [pc, #224]	; (2184c <spi_rw+0x15c>)
   2176c:	2201      	movs	r2, #1
   2176e:	0018      	movs	r0, r3
   21770:	4b37      	ldr	r3, [pc, #220]	; (21850 <spi_rw+0x160>)
   21772:	4798      	blx	r3

	while (u16Sz) {
   21774:	e04c      	b.n	21810 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   21776:	68fb      	ldr	r3, [r7, #12]
   21778:	781a      	ldrb	r2, [r3, #0]
   2177a:	2314      	movs	r3, #20
   2177c:	18fb      	adds	r3, r7, r3
   2177e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   21780:	46c0      	nop			; (mov r8, r8)
   21782:	4b32      	ldr	r3, [pc, #200]	; (2184c <spi_rw+0x15c>)
   21784:	0018      	movs	r0, r3
   21786:	4b33      	ldr	r3, [pc, #204]	; (21854 <spi_rw+0x164>)
   21788:	4798      	blx	r3
   2178a:	0003      	movs	r3, r0
   2178c:	001a      	movs	r2, r3
   2178e:	2301      	movs	r3, #1
   21790:	4053      	eors	r3, r2
   21792:	b2db      	uxtb	r3, r3
   21794:	2b00      	cmp	r3, #0
   21796:	d1f4      	bne.n	21782 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   21798:	46c0      	nop			; (mov r8, r8)
   2179a:	2314      	movs	r3, #20
   2179c:	18fb      	adds	r3, r7, r3
   2179e:	881a      	ldrh	r2, [r3, #0]
   217a0:	4b2a      	ldr	r3, [pc, #168]	; (2184c <spi_rw+0x15c>)
   217a2:	0011      	movs	r1, r2
   217a4:	0018      	movs	r0, r3
   217a6:	4b2c      	ldr	r3, [pc, #176]	; (21858 <spi_rw+0x168>)
   217a8:	4798      	blx	r3
   217aa:	1e03      	subs	r3, r0, #0
   217ac:	d1f5      	bne.n	2179a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   217ae:	46c0      	nop			; (mov r8, r8)
   217b0:	4b26      	ldr	r3, [pc, #152]	; (2184c <spi_rw+0x15c>)
   217b2:	0018      	movs	r0, r3
   217b4:	4b29      	ldr	r3, [pc, #164]	; (2185c <spi_rw+0x16c>)
   217b6:	4798      	blx	r3
   217b8:	0003      	movs	r3, r0
   217ba:	001a      	movs	r2, r3
   217bc:	2301      	movs	r3, #1
   217be:	4053      	eors	r3, r2
   217c0:	b2db      	uxtb	r3, r3
   217c2:	2b00      	cmp	r3, #0
   217c4:	d1f4      	bne.n	217b0 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   217c6:	46c0      	nop			; (mov r8, r8)
   217c8:	2310      	movs	r3, #16
   217ca:	18fa      	adds	r2, r7, r3
   217cc:	4b1f      	ldr	r3, [pc, #124]	; (2184c <spi_rw+0x15c>)
   217ce:	0011      	movs	r1, r2
   217d0:	0018      	movs	r0, r3
   217d2:	4b23      	ldr	r3, [pc, #140]	; (21860 <spi_rw+0x170>)
   217d4:	4798      	blx	r3
   217d6:	1e03      	subs	r3, r0, #0
   217d8:	d1f6      	bne.n	217c8 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   217da:	2310      	movs	r3, #16
   217dc:	18fb      	adds	r3, r7, r3
   217de:	881b      	ldrh	r3, [r3, #0]
   217e0:	b2da      	uxtb	r2, r3
   217e2:	68bb      	ldr	r3, [r7, #8]
   217e4:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   217e6:	1dbb      	adds	r3, r7, #6
   217e8:	881a      	ldrh	r2, [r3, #0]
   217ea:	1dbb      	adds	r3, r7, #6
   217ec:	3a01      	subs	r2, #1
   217ee:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   217f0:	2316      	movs	r3, #22
   217f2:	18fb      	adds	r3, r7, r3
   217f4:	781b      	ldrb	r3, [r3, #0]
   217f6:	2b00      	cmp	r3, #0
   217f8:	d102      	bne.n	21800 <spi_rw+0x110>
			pu8Miso++;
   217fa:	68bb      	ldr	r3, [r7, #8]
   217fc:	3301      	adds	r3, #1
   217fe:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   21800:	2317      	movs	r3, #23
   21802:	18fb      	adds	r3, r7, r3
   21804:	781b      	ldrb	r3, [r3, #0]
   21806:	2b00      	cmp	r3, #0
   21808:	d102      	bne.n	21810 <spi_rw+0x120>
			pu8Mosi++;
   2180a:	68fb      	ldr	r3, [r7, #12]
   2180c:	3301      	adds	r3, #1
   2180e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   21810:	1dbb      	adds	r3, r7, #6
   21812:	881b      	ldrh	r3, [r3, #0]
   21814:	2b00      	cmp	r3, #0
   21816:	d1ae      	bne.n	21776 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   21818:	46c0      	nop			; (mov r8, r8)
   2181a:	4b0c      	ldr	r3, [pc, #48]	; (2184c <spi_rw+0x15c>)
   2181c:	0018      	movs	r0, r3
   2181e:	4b11      	ldr	r3, [pc, #68]	; (21864 <spi_rw+0x174>)
   21820:	4798      	blx	r3
   21822:	0003      	movs	r3, r0
   21824:	001a      	movs	r2, r3
   21826:	2301      	movs	r3, #1
   21828:	4053      	eors	r3, r2
   2182a:	b2db      	uxtb	r3, r3
   2182c:	2b00      	cmp	r3, #0
   2182e:	d1f4      	bne.n	2181a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   21830:	4905      	ldr	r1, [pc, #20]	; (21848 <spi_rw+0x158>)
   21832:	4b06      	ldr	r3, [pc, #24]	; (2184c <spi_rw+0x15c>)
   21834:	2200      	movs	r2, #0
   21836:	0018      	movs	r0, r3
   21838:	4b05      	ldr	r3, [pc, #20]	; (21850 <spi_rw+0x160>)
   2183a:	4798      	blx	r3

	return M2M_SUCCESS;
   2183c:	2300      	movs	r3, #0
}
   2183e:	0018      	movs	r0, r3
   21840:	46bd      	mov	sp, r7
   21842:	b006      	add	sp, #24
   21844:	bd80      	pop	{r7, pc}
   21846:	46c0      	nop			; (mov r8, r8)
   21848:	20005b24 	.word	0x20005b24
   2184c:	20005b28 	.word	0x20005b28
   21850:	00028ec5 	.word	0x00028ec5
   21854:	000215d1 	.word	0x000215d1
   21858:	00021621 	.word	0x00021621
   2185c:	000215f9 	.word	0x000215f9
   21860:	00021669 	.word	0x00021669
   21864:	000215a9 	.word	0x000215a9

00021868 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   21868:	b580      	push	{r7, lr}
   2186a:	b092      	sub	sp, #72	; 0x48
   2186c:	af00      	add	r7, sp, #0
   2186e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   21870:	2347      	movs	r3, #71	; 0x47
   21872:	18fb      	adds	r3, r7, r3
   21874:	2200      	movs	r2, #0
   21876:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   21878:	2308      	movs	r3, #8
   2187a:	18fb      	adds	r3, r7, r3
   2187c:	0018      	movs	r0, r3
   2187e:	4b26      	ldr	r3, [pc, #152]	; (21918 <nm_bus_init+0xb0>)
   21880:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   21882:	2308      	movs	r3, #8
   21884:	18fb      	adds	r3, r7, r3
   21886:	220e      	movs	r2, #14
   21888:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2188a:	2308      	movs	r3, #8
   2188c:	18fa      	adds	r2, r7, r3
   2188e:	4b23      	ldr	r3, [pc, #140]	; (2191c <nm_bus_init+0xb4>)
   21890:	0011      	movs	r1, r2
   21892:	0018      	movs	r0, r3
   21894:	4b22      	ldr	r3, [pc, #136]	; (21920 <nm_bus_init+0xb8>)
   21896:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   21898:	230c      	movs	r3, #12
   2189a:	18fb      	adds	r3, r7, r3
   2189c:	0018      	movs	r0, r3
   2189e:	4b21      	ldr	r3, [pc, #132]	; (21924 <nm_bus_init+0xbc>)
   218a0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   218a2:	230c      	movs	r3, #12
   218a4:	18fb      	adds	r3, r7, r3
   218a6:	22c0      	movs	r2, #192	; 0xc0
   218a8:	0392      	lsls	r2, r2, #14
   218aa:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   218ac:	230c      	movs	r3, #12
   218ae:	18fb      	adds	r3, r7, r3
   218b0:	4a1d      	ldr	r2, [pc, #116]	; (21928 <nm_bus_init+0xc0>)
   218b2:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   218b4:	230c      	movs	r3, #12
   218b6:	18fb      	adds	r3, r7, r3
   218b8:	4a1c      	ldr	r2, [pc, #112]	; (2192c <nm_bus_init+0xc4>)
   218ba:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   218bc:	230c      	movs	r3, #12
   218be:	18fb      	adds	r3, r7, r3
   218c0:	2201      	movs	r2, #1
   218c2:	4252      	negs	r2, r2
   218c4:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   218c6:	230c      	movs	r3, #12
   218c8:	18fb      	adds	r3, r7, r3
   218ca:	4a19      	ldr	r2, [pc, #100]	; (21930 <nm_bus_init+0xc8>)
   218cc:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   218ce:	230c      	movs	r3, #12
   218d0:	18fb      	adds	r3, r7, r3
   218d2:	2200      	movs	r2, #0
   218d4:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   218d6:	230c      	movs	r3, #12
   218d8:	18fb      	adds	r3, r7, r3
   218da:	4a16      	ldr	r2, [pc, #88]	; (21934 <nm_bus_init+0xcc>)
   218dc:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   218de:	230c      	movs	r3, #12
   218e0:	18fa      	adds	r2, r7, r3
   218e2:	4915      	ldr	r1, [pc, #84]	; (21938 <nm_bus_init+0xd0>)
   218e4:	4b15      	ldr	r3, [pc, #84]	; (2193c <nm_bus_init+0xd4>)
   218e6:	0018      	movs	r0, r3
   218e8:	4b15      	ldr	r3, [pc, #84]	; (21940 <nm_bus_init+0xd8>)
   218ea:	4798      	blx	r3
   218ec:	1e03      	subs	r3, r0, #0
   218ee:	d002      	beq.n	218f6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   218f0:	2306      	movs	r3, #6
   218f2:	425b      	negs	r3, r3
   218f4:	e00c      	b.n	21910 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   218f6:	4b11      	ldr	r3, [pc, #68]	; (2193c <nm_bus_init+0xd4>)
   218f8:	0018      	movs	r0, r3
   218fa:	4b12      	ldr	r3, [pc, #72]	; (21944 <nm_bus_init+0xdc>)
   218fc:	4798      	blx	r3

	nm_bsp_reset();
   218fe:	4b12      	ldr	r3, [pc, #72]	; (21948 <nm_bus_init+0xe0>)
   21900:	4798      	blx	r3
	nm_bsp_sleep(1);
   21902:	2001      	movs	r0, #1
   21904:	4b11      	ldr	r3, [pc, #68]	; (2194c <nm_bus_init+0xe4>)
   21906:	4798      	blx	r3
#endif
	return result;
   21908:	2347      	movs	r3, #71	; 0x47
   2190a:	18fb      	adds	r3, r7, r3
   2190c:	781b      	ldrb	r3, [r3, #0]
   2190e:	b25b      	sxtb	r3, r3
}
   21910:	0018      	movs	r0, r3
   21912:	46bd      	mov	sp, r7
   21914:	b012      	add	sp, #72	; 0x48
   21916:	bd80      	pop	{r7, pc}
   21918:	00021475 	.word	0x00021475
   2191c:	20005b24 	.word	0x20005b24
   21920:	00021499 	.word	0x00021499
   21924:	000213f1 	.word	0x000213f1
   21928:	000c0002 	.word	0x000c0002
   2192c:	000d0002 	.word	0x000d0002
   21930:	000f0002 	.word	0x000f0002
   21934:	00124f80 	.word	0x00124f80
   21938:	42001000 	.word	0x42001000
   2193c:	20005b28 	.word	0x20005b28
   21940:	00028c01 	.word	0x00028c01
   21944:	000214fd 	.word	0x000214fd
   21948:	0002116d 	.word	0x0002116d
   2194c:	000211ad 	.word	0x000211ad

00021950 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   21950:	b590      	push	{r4, r7, lr}
   21952:	b085      	sub	sp, #20
   21954:	af00      	add	r7, sp, #0
   21956:	0002      	movs	r2, r0
   21958:	6039      	str	r1, [r7, #0]
   2195a:	1dfb      	adds	r3, r7, #7
   2195c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   2195e:	230f      	movs	r3, #15
   21960:	18fb      	adds	r3, r7, r3
   21962:	2200      	movs	r2, #0
   21964:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   21966:	1dfb      	adds	r3, r7, #7
   21968:	781b      	ldrb	r3, [r3, #0]
   2196a:	2b03      	cmp	r3, #3
   2196c:	d10f      	bne.n	2198e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   2196e:	683b      	ldr	r3, [r7, #0]
   21970:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   21972:	68bb      	ldr	r3, [r7, #8]
   21974:	6818      	ldr	r0, [r3, #0]
   21976:	68bb      	ldr	r3, [r7, #8]
   21978:	6859      	ldr	r1, [r3, #4]
   2197a:	68bb      	ldr	r3, [r7, #8]
   2197c:	891b      	ldrh	r3, [r3, #8]
   2197e:	220f      	movs	r2, #15
   21980:	18bc      	adds	r4, r7, r2
   21982:	001a      	movs	r2, r3
   21984:	4b10      	ldr	r3, [pc, #64]	; (219c8 <nm_bus_ioctl+0x78>)
   21986:	4798      	blx	r3
   21988:	0003      	movs	r3, r0
   2198a:	7023      	strb	r3, [r4, #0]
		}
		break;
   2198c:	e013      	b.n	219b6 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   2198e:	230f      	movs	r3, #15
   21990:	18fb      	adds	r3, r7, r3
   21992:	22ff      	movs	r2, #255	; 0xff
   21994:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   21996:	2383      	movs	r3, #131	; 0x83
   21998:	005a      	lsls	r2, r3, #1
   2199a:	490c      	ldr	r1, [pc, #48]	; (219cc <nm_bus_ioctl+0x7c>)
   2199c:	4b0c      	ldr	r3, [pc, #48]	; (219d0 <nm_bus_ioctl+0x80>)
   2199e:	0018      	movs	r0, r3
   219a0:	4b0c      	ldr	r3, [pc, #48]	; (219d4 <nm_bus_ioctl+0x84>)
   219a2:	4798      	blx	r3
   219a4:	4b0c      	ldr	r3, [pc, #48]	; (219d8 <nm_bus_ioctl+0x88>)
   219a6:	0018      	movs	r0, r3
   219a8:	4b0a      	ldr	r3, [pc, #40]	; (219d4 <nm_bus_ioctl+0x84>)
   219aa:	4798      	blx	r3
   219ac:	4b0b      	ldr	r3, [pc, #44]	; (219dc <nm_bus_ioctl+0x8c>)
   219ae:	0018      	movs	r0, r3
   219b0:	4b08      	ldr	r3, [pc, #32]	; (219d4 <nm_bus_ioctl+0x84>)
   219b2:	4798      	blx	r3
			break;
   219b4:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   219b6:	230f      	movs	r3, #15
   219b8:	18fb      	adds	r3, r7, r3
   219ba:	781b      	ldrb	r3, [r3, #0]
   219bc:	b25b      	sxtb	r3, r3
}
   219be:	0018      	movs	r0, r3
   219c0:	46bd      	mov	sp, r7
   219c2:	b005      	add	sp, #20
   219c4:	bd90      	pop	{r4, r7, pc}
   219c6:	46c0      	nop			; (mov r8, r8)
   219c8:	000216f1 	.word	0x000216f1
   219cc:	00039358 	.word	0x00039358
   219d0:	0003932c 	.word	0x0003932c
   219d4:	0001ed59 	.word	0x0001ed59
   219d8:	00039340 	.word	0x00039340
   219dc:	00039354 	.word	0x00039354

000219e0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   219e0:	b580      	push	{r7, lr}
   219e2:	b082      	sub	sp, #8
   219e4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   219e6:	1dfb      	adds	r3, r7, #7
   219e8:	2200      	movs	r2, #0
   219ea:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   219ec:	1d3b      	adds	r3, r7, #4
   219ee:	0018      	movs	r0, r3
   219f0:	4b13      	ldr	r3, [pc, #76]	; (21a40 <nm_bus_deinit+0x60>)
   219f2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   219f4:	1d3b      	adds	r3, r7, #4
   219f6:	2200      	movs	r2, #0
   219f8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   219fa:	1d3b      	adds	r3, r7, #4
   219fc:	2200      	movs	r2, #0
   219fe:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   21a00:	4b10      	ldr	r3, [pc, #64]	; (21a44 <nm_bus_deinit+0x64>)
   21a02:	0018      	movs	r0, r3
   21a04:	4b10      	ldr	r3, [pc, #64]	; (21a48 <nm_bus_deinit+0x68>)
   21a06:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   21a08:	1d3b      	adds	r3, r7, #4
   21a0a:	0019      	movs	r1, r3
   21a0c:	200c      	movs	r0, #12
   21a0e:	4b0f      	ldr	r3, [pc, #60]	; (21a4c <nm_bus_deinit+0x6c>)
   21a10:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   21a12:	1d3b      	adds	r3, r7, #4
   21a14:	0019      	movs	r1, r3
   21a16:	200f      	movs	r0, #15
   21a18:	4b0c      	ldr	r3, [pc, #48]	; (21a4c <nm_bus_deinit+0x6c>)
   21a1a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   21a1c:	1d3b      	adds	r3, r7, #4
   21a1e:	0019      	movs	r1, r3
   21a20:	200d      	movs	r0, #13
   21a22:	4b0a      	ldr	r3, [pc, #40]	; (21a4c <nm_bus_deinit+0x6c>)
   21a24:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   21a26:	1d3b      	adds	r3, r7, #4
   21a28:	0019      	movs	r1, r3
   21a2a:	200e      	movs	r0, #14
   21a2c:	4b07      	ldr	r3, [pc, #28]	; (21a4c <nm_bus_deinit+0x6c>)
   21a2e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   21a30:	1dfb      	adds	r3, r7, #7
   21a32:	781b      	ldrb	r3, [r3, #0]
   21a34:	b25b      	sxtb	r3, r3
}
   21a36:	0018      	movs	r0, r3
   21a38:	46bd      	mov	sp, r7
   21a3a:	b002      	add	sp, #8
   21a3c:	bd80      	pop	{r7, pc}
   21a3e:	46c0      	nop			; (mov r8, r8)
   21a40:	00021359 	.word	0x00021359
   21a44:	20005b28 	.word	0x20005b28
   21a48:	0002154d 	.word	0x0002154d
   21a4c:	00027781 	.word	0x00027781

00021a50 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   21a50:	b580      	push	{r7, lr}
   21a52:	b084      	sub	sp, #16
   21a54:	af00      	add	r7, sp, #0
   21a56:	60f8      	str	r0, [r7, #12]
   21a58:	60b9      	str	r1, [r7, #8]
   21a5a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   21a5c:	687b      	ldr	r3, [r7, #4]
   21a5e:	2b00      	cmp	r3, #0
   21a60:	d010      	beq.n	21a84 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   21a62:	68bb      	ldr	r3, [r7, #8]
   21a64:	781a      	ldrb	r2, [r3, #0]
   21a66:	68fb      	ldr	r3, [r7, #12]
   21a68:	701a      	strb	r2, [r3, #0]
		pDst++;
   21a6a:	68fb      	ldr	r3, [r7, #12]
   21a6c:	3301      	adds	r3, #1
   21a6e:	60fb      	str	r3, [r7, #12]
		pSrc++;
   21a70:	68bb      	ldr	r3, [r7, #8]
   21a72:	3301      	adds	r3, #1
   21a74:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   21a76:	687b      	ldr	r3, [r7, #4]
   21a78:	3b01      	subs	r3, #1
   21a7a:	607b      	str	r3, [r7, #4]
   21a7c:	687b      	ldr	r3, [r7, #4]
   21a7e:	2b00      	cmp	r3, #0
   21a80:	d1ef      	bne.n	21a62 <m2m_memcpy+0x12>
   21a82:	e000      	b.n	21a86 <m2m_memcpy+0x36>
	if(sz == 0) return;
   21a84:	46c0      	nop			; (mov r8, r8)
}
   21a86:	46bd      	mov	sp, r7
   21a88:	b004      	add	sp, #16
   21a8a:	bd80      	pop	{r7, pc}

00021a8c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   21a8c:	b580      	push	{r7, lr}
   21a8e:	b084      	sub	sp, #16
   21a90:	af00      	add	r7, sp, #0
   21a92:	60f8      	str	r0, [r7, #12]
   21a94:	607a      	str	r2, [r7, #4]
   21a96:	230b      	movs	r3, #11
   21a98:	18fb      	adds	r3, r7, r3
   21a9a:	1c0a      	adds	r2, r1, #0
   21a9c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   21a9e:	687b      	ldr	r3, [r7, #4]
   21aa0:	2b00      	cmp	r3, #0
   21aa2:	d00e      	beq.n	21ac2 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21aa4:	68fb      	ldr	r3, [r7, #12]
   21aa6:	220b      	movs	r2, #11
   21aa8:	18ba      	adds	r2, r7, r2
   21aaa:	7812      	ldrb	r2, [r2, #0]
   21aac:	701a      	strb	r2, [r3, #0]
		pBuf++;
   21aae:	68fb      	ldr	r3, [r7, #12]
   21ab0:	3301      	adds	r3, #1
   21ab2:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   21ab4:	687b      	ldr	r3, [r7, #4]
   21ab6:	3b01      	subs	r3, #1
   21ab8:	607b      	str	r3, [r7, #4]
   21aba:	687b      	ldr	r3, [r7, #4]
   21abc:	2b00      	cmp	r3, #0
   21abe:	d1f1      	bne.n	21aa4 <m2m_memset+0x18>
   21ac0:	e000      	b.n	21ac4 <m2m_memset+0x38>
	if(sz == 0) return;
   21ac2:	46c0      	nop			; (mov r8, r8)
}
   21ac4:	46bd      	mov	sp, r7
   21ac6:	b004      	add	sp, #16
   21ac8:	bd80      	pop	{r7, pc}

00021aca <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   21aca:	b580      	push	{r7, lr}
   21acc:	b084      	sub	sp, #16
   21ace:	af00      	add	r7, sp, #0
   21ad0:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   21ad2:	230e      	movs	r3, #14
   21ad4:	18fb      	adds	r3, r7, r3
   21ad6:	2200      	movs	r2, #0
   21ad8:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   21ada:	e009      	b.n	21af0 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   21adc:	230e      	movs	r3, #14
   21ade:	18fb      	adds	r3, r7, r3
   21ae0:	881a      	ldrh	r2, [r3, #0]
   21ae2:	230e      	movs	r3, #14
   21ae4:	18fb      	adds	r3, r7, r3
   21ae6:	3201      	adds	r2, #1
   21ae8:	801a      	strh	r2, [r3, #0]
		pcStr++;
   21aea:	687b      	ldr	r3, [r7, #4]
   21aec:	3301      	adds	r3, #1
   21aee:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   21af0:	687b      	ldr	r3, [r7, #4]
   21af2:	781b      	ldrb	r3, [r3, #0]
   21af4:	2b00      	cmp	r3, #0
   21af6:	d1f1      	bne.n	21adc <m2m_strlen+0x12>
	}
	return u16StrLen;
   21af8:	230e      	movs	r3, #14
   21afa:	18fb      	adds	r3, r7, r3
   21afc:	881b      	ldrh	r3, [r3, #0]
}
   21afe:	0018      	movs	r0, r3
   21b00:	46bd      	mov	sp, r7
   21b02:	b004      	add	sp, #16
   21b04:	bd80      	pop	{r7, pc}
	...

00021b08 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   21b08:	b580      	push	{r7, lr}
   21b0a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   21b0c:	4b04      	ldr	r3, [pc, #16]	; (21b20 <isr+0x18>)
   21b0e:	78db      	ldrb	r3, [r3, #3]
   21b10:	b2db      	uxtb	r3, r3
   21b12:	3301      	adds	r3, #1
   21b14:	b2da      	uxtb	r2, r3
   21b16:	4b02      	ldr	r3, [pc, #8]	; (21b20 <isr+0x18>)
   21b18:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   21b1a:	46c0      	nop			; (mov r8, r8)
   21b1c:	46bd      	mov	sp, r7
   21b1e:	bd80      	pop	{r7, pc}
   21b20:	20005b64 	.word	0x20005b64

00021b24 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21b24:	b590      	push	{r4, r7, lr}
   21b26:	b083      	sub	sp, #12
   21b28:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   21b2a:	1dfb      	adds	r3, r7, #7
   21b2c:	2200      	movs	r2, #0
   21b2e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   21b30:	4b14      	ldr	r3, [pc, #80]	; (21b84 <hif_set_rx_done+0x60>)
   21b32:	2200      	movs	r2, #0
   21b34:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   21b36:	2001      	movs	r0, #1
   21b38:	4b13      	ldr	r3, [pc, #76]	; (21b88 <hif_set_rx_done+0x64>)
   21b3a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   21b3c:	1dfc      	adds	r4, r7, #7
   21b3e:	003b      	movs	r3, r7
   21b40:	4a12      	ldr	r2, [pc, #72]	; (21b8c <hif_set_rx_done+0x68>)
   21b42:	0019      	movs	r1, r3
   21b44:	0010      	movs	r0, r2
   21b46:	4b12      	ldr	r3, [pc, #72]	; (21b90 <hif_set_rx_done+0x6c>)
   21b48:	4798      	blx	r3
   21b4a:	0003      	movs	r3, r0
   21b4c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21b4e:	1dfb      	adds	r3, r7, #7
   21b50:	781b      	ldrb	r3, [r3, #0]
   21b52:	b25b      	sxtb	r3, r3
   21b54:	2b00      	cmp	r3, #0
   21b56:	d10d      	bne.n	21b74 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   21b58:	683b      	ldr	r3, [r7, #0]
   21b5a:	2202      	movs	r2, #2
   21b5c:	4313      	orrs	r3, r2
   21b5e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21b60:	683b      	ldr	r3, [r7, #0]
   21b62:	1dfc      	adds	r4, r7, #7
   21b64:	4a09      	ldr	r2, [pc, #36]	; (21b8c <hif_set_rx_done+0x68>)
   21b66:	0019      	movs	r1, r3
   21b68:	0010      	movs	r0, r2
   21b6a:	4b0a      	ldr	r3, [pc, #40]	; (21b94 <hif_set_rx_done+0x70>)
   21b6c:	4798      	blx	r3
   21b6e:	0003      	movs	r3, r0
   21b70:	7023      	strb	r3, [r4, #0]
   21b72:	e000      	b.n	21b76 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   21b74:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   21b76:	1dfb      	adds	r3, r7, #7
   21b78:	781b      	ldrb	r3, [r3, #0]
   21b7a:	b25b      	sxtb	r3, r3

}
   21b7c:	0018      	movs	r0, r3
   21b7e:	46bd      	mov	sp, r7
   21b80:	b003      	add	sp, #12
   21b82:	bd90      	pop	{r4, r7, pc}
   21b84:	20005b64 	.word	0x20005b64
   21b88:	00021241 	.word	0x00021241
   21b8c:	00001070 	.word	0x00001070
   21b90:	00023a45 	.word	0x00023a45
   21b94:	00023a69 	.word	0x00023a69

00021b98 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21b98:	b580      	push	{r7, lr}
   21b9a:	b082      	sub	sp, #8
   21b9c:	af00      	add	r7, sp, #0
   21b9e:	603a      	str	r2, [r7, #0]
   21ba0:	1dfb      	adds	r3, r7, #7
   21ba2:	1c02      	adds	r2, r0, #0
   21ba4:	701a      	strb	r2, [r3, #0]
   21ba6:	1d3b      	adds	r3, r7, #4
   21ba8:	1c0a      	adds	r2, r1, #0
   21baa:	801a      	strh	r2, [r3, #0]


}
   21bac:	46c0      	nop			; (mov r8, r8)
   21bae:	46bd      	mov	sp, r7
   21bb0:	b002      	add	sp, #8
   21bb2:	bd80      	pop	{r7, pc}

00021bb4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21bb4:	b590      	push	{r4, r7, lr}
   21bb6:	b083      	sub	sp, #12
   21bb8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21bba:	1dfb      	adds	r3, r7, #7
   21bbc:	2200      	movs	r2, #0
   21bbe:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21bc0:	4b16      	ldr	r3, [pc, #88]	; (21c1c <hif_chip_wake+0x68>)
   21bc2:	789b      	ldrb	r3, [r3, #2]
   21bc4:	b2db      	uxtb	r3, r3
   21bc6:	2b00      	cmp	r3, #0
   21bc8:	d003      	beq.n	21bd2 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   21bca:	1dfb      	adds	r3, r7, #7
   21bcc:	781b      	ldrb	r3, [r3, #0]
   21bce:	b25b      	sxtb	r3, r3
   21bd0:	e01f      	b.n	21c12 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21bd2:	4b12      	ldr	r3, [pc, #72]	; (21c1c <hif_chip_wake+0x68>)
   21bd4:	785b      	ldrb	r3, [r3, #1]
   21bd6:	b2db      	uxtb	r3, r3
   21bd8:	2b00      	cmp	r3, #0
   21bda:	d10e      	bne.n	21bfa <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21bdc:	4b0f      	ldr	r3, [pc, #60]	; (21c1c <hif_chip_wake+0x68>)
   21bde:	781b      	ldrb	r3, [r3, #0]
   21be0:	b2db      	uxtb	r3, r3
   21be2:	2b00      	cmp	r3, #0
   21be4:	d009      	beq.n	21bfa <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   21be6:	1dfc      	adds	r4, r7, #7
   21be8:	4b0d      	ldr	r3, [pc, #52]	; (21c20 <hif_chip_wake+0x6c>)
   21bea:	4798      	blx	r3
   21bec:	0003      	movs	r3, r0
   21bee:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21bf0:	1dfb      	adds	r3, r7, #7
   21bf2:	781b      	ldrb	r3, [r3, #0]
   21bf4:	b25b      	sxtb	r3, r3
   21bf6:	2b00      	cmp	r3, #0
   21bf8:	d107      	bne.n	21c0a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   21bfa:	4b08      	ldr	r3, [pc, #32]	; (21c1c <hif_chip_wake+0x68>)
   21bfc:	785b      	ldrb	r3, [r3, #1]
   21bfe:	b2db      	uxtb	r3, r3
   21c00:	3301      	adds	r3, #1
   21c02:	b2da      	uxtb	r2, r3
   21c04:	4b05      	ldr	r3, [pc, #20]	; (21c1c <hif_chip_wake+0x68>)
   21c06:	705a      	strb	r2, [r3, #1]
   21c08:	e000      	b.n	21c0c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   21c0a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21c0c:	1dfb      	adds	r3, r7, #7
   21c0e:	781b      	ldrb	r3, [r3, #0]
   21c10:	b25b      	sxtb	r3, r3
}
   21c12:	0018      	movs	r0, r3
   21c14:	46bd      	mov	sp, r7
   21c16:	b003      	add	sp, #12
   21c18:	bd90      	pop	{r4, r7, pc}
   21c1a:	46c0      	nop			; (mov r8, r8)
   21c1c:	20005b64 	.word	0x20005b64
   21c20:	00023515 	.word	0x00023515

00021c24 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21c24:	b580      	push	{r7, lr}
   21c26:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   21c28:	4b07      	ldr	r3, [pc, #28]	; (21c48 <hif_chip_sleep_sc+0x24>)
   21c2a:	785b      	ldrb	r3, [r3, #1]
   21c2c:	b2db      	uxtb	r3, r3
   21c2e:	2b00      	cmp	r3, #0
   21c30:	d006      	beq.n	21c40 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21c32:	4b05      	ldr	r3, [pc, #20]	; (21c48 <hif_chip_sleep_sc+0x24>)
   21c34:	785b      	ldrb	r3, [r3, #1]
   21c36:	b2db      	uxtb	r3, r3
   21c38:	3b01      	subs	r3, #1
   21c3a:	b2da      	uxtb	r2, r3
   21c3c:	4b02      	ldr	r3, [pc, #8]	; (21c48 <hif_chip_sleep_sc+0x24>)
   21c3e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21c40:	2300      	movs	r3, #0
}
   21c42:	0018      	movs	r0, r3
   21c44:	46bd      	mov	sp, r7
   21c46:	bd80      	pop	{r7, pc}
   21c48:	20005b64 	.word	0x20005b64

00021c4c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21c4c:	b590      	push	{r4, r7, lr}
   21c4e:	b083      	sub	sp, #12
   21c50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21c52:	1dfb      	adds	r3, r7, #7
   21c54:	2200      	movs	r2, #0
   21c56:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   21c58:	4b10      	ldr	r3, [pc, #64]	; (21c9c <hif_chip_sleep+0x50>)
   21c5a:	785b      	ldrb	r3, [r3, #1]
   21c5c:	b2db      	uxtb	r3, r3
   21c5e:	2b00      	cmp	r3, #0
   21c60:	d006      	beq.n	21c70 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21c62:	4b0e      	ldr	r3, [pc, #56]	; (21c9c <hif_chip_sleep+0x50>)
   21c64:	785b      	ldrb	r3, [r3, #1]
   21c66:	b2db      	uxtb	r3, r3
   21c68:	3b01      	subs	r3, #1
   21c6a:	b2da      	uxtb	r2, r3
   21c6c:	4b0b      	ldr	r3, [pc, #44]	; (21c9c <hif_chip_sleep+0x50>)
   21c6e:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21c70:	4b0a      	ldr	r3, [pc, #40]	; (21c9c <hif_chip_sleep+0x50>)
   21c72:	785b      	ldrb	r3, [r3, #1]
   21c74:	b2db      	uxtb	r3, r3
   21c76:	2b00      	cmp	r3, #0
   21c78:	d109      	bne.n	21c8e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21c7a:	4b08      	ldr	r3, [pc, #32]	; (21c9c <hif_chip_sleep+0x50>)
   21c7c:	781b      	ldrb	r3, [r3, #0]
   21c7e:	b2db      	uxtb	r3, r3
   21c80:	2b00      	cmp	r3, #0
   21c82:	d004      	beq.n	21c8e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21c84:	1dfc      	adds	r4, r7, #7
   21c86:	4b06      	ldr	r3, [pc, #24]	; (21ca0 <hif_chip_sleep+0x54>)
   21c88:	4798      	blx	r3
   21c8a:	0003      	movs	r3, r0
   21c8c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21c8e:	1dfb      	adds	r3, r7, #7
   21c90:	781b      	ldrb	r3, [r3, #0]
   21c92:	b25b      	sxtb	r3, r3
}
   21c94:	0018      	movs	r0, r3
   21c96:	46bd      	mov	sp, r7
   21c98:	b003      	add	sp, #12
   21c9a:	bd90      	pop	{r4, r7, pc}
   21c9c:	20005b64 	.word	0x20005b64
   21ca0:	0002343d 	.word	0x0002343d

00021ca4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21ca4:	b580      	push	{r7, lr}
   21ca6:	b082      	sub	sp, #8
   21ca8:	af00      	add	r7, sp, #0
   21caa:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   21cac:	4b09      	ldr	r3, [pc, #36]	; (21cd4 <hif_init+0x30>)
   21cae:	222c      	movs	r2, #44	; 0x2c
   21cb0:	2100      	movs	r1, #0
   21cb2:	0018      	movs	r0, r3
   21cb4:	4b08      	ldr	r3, [pc, #32]	; (21cd8 <hif_init+0x34>)
   21cb6:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   21cb8:	4b08      	ldr	r3, [pc, #32]	; (21cdc <hif_init+0x38>)
   21cba:	0018      	movs	r0, r3
   21cbc:	4b08      	ldr	r3, [pc, #32]	; (21ce0 <hif_init+0x3c>)
   21cbe:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21cc0:	4b08      	ldr	r3, [pc, #32]	; (21ce4 <hif_init+0x40>)
   21cc2:	0019      	movs	r1, r3
   21cc4:	2003      	movs	r0, #3
   21cc6:	4b08      	ldr	r3, [pc, #32]	; (21ce8 <hif_init+0x44>)
   21cc8:	4798      	blx	r3
	return M2M_SUCCESS;
   21cca:	2300      	movs	r3, #0
}
   21ccc:	0018      	movs	r0, r3
   21cce:	46bd      	mov	sp, r7
   21cd0:	b002      	add	sp, #8
   21cd2:	bd80      	pop	{r7, pc}
   21cd4:	20005b64 	.word	0x20005b64
   21cd8:	00021a8d 	.word	0x00021a8d
   21cdc:	00021b09 	.word	0x00021b09
   21ce0:	000211c9 	.word	0x000211c9
   21ce4:	00021b99 	.word	0x00021b99
   21ce8:	00022789 	.word	0x00022789

00021cec <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   21cec:	b590      	push	{r4, r7, lr}
   21cee:	b089      	sub	sp, #36	; 0x24
   21cf0:	af00      	add	r7, sp, #0
   21cf2:	0004      	movs	r4, r0
   21cf4:	0008      	movs	r0, r1
   21cf6:	603a      	str	r2, [r7, #0]
   21cf8:	0019      	movs	r1, r3
   21cfa:	1dfb      	adds	r3, r7, #7
   21cfc:	1c22      	adds	r2, r4, #0
   21cfe:	701a      	strb	r2, [r3, #0]
   21d00:	1dbb      	adds	r3, r7, #6
   21d02:	1c02      	adds	r2, r0, #0
   21d04:	701a      	strb	r2, [r3, #0]
   21d06:	1d3b      	adds	r3, r7, #4
   21d08:	1c0a      	adds	r2, r1, #0
   21d0a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21d0c:	231f      	movs	r3, #31
   21d0e:	18fb      	adds	r3, r7, r3
   21d10:	22ff      	movs	r2, #255	; 0xff
   21d12:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21d14:	1dbb      	adds	r3, r7, #6
   21d16:	781b      	ldrb	r3, [r3, #0]
   21d18:	227f      	movs	r2, #127	; 0x7f
   21d1a:	4013      	ands	r3, r2
   21d1c:	b2da      	uxtb	r2, r3
   21d1e:	2318      	movs	r3, #24
   21d20:	18fb      	adds	r3, r7, r3
   21d22:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21d24:	2318      	movs	r3, #24
   21d26:	18fb      	adds	r3, r7, r3
   21d28:	1dfa      	adds	r2, r7, #7
   21d2a:	7812      	ldrb	r2, [r2, #0]
   21d2c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21d2e:	2318      	movs	r3, #24
   21d30:	18fb      	adds	r3, r7, r3
   21d32:	2208      	movs	r2, #8
   21d34:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21d38:	2b00      	cmp	r3, #0
   21d3a:	d011      	beq.n	21d60 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21d3c:	2318      	movs	r3, #24
   21d3e:	18fb      	adds	r3, r7, r3
   21d40:	885b      	ldrh	r3, [r3, #2]
   21d42:	b29a      	uxth	r2, r3
   21d44:	2338      	movs	r3, #56	; 0x38
   21d46:	18f9      	adds	r1, r7, r3
   21d48:	2334      	movs	r3, #52	; 0x34
   21d4a:	18fb      	adds	r3, r7, r3
   21d4c:	8809      	ldrh	r1, [r1, #0]
   21d4e:	881b      	ldrh	r3, [r3, #0]
   21d50:	18cb      	adds	r3, r1, r3
   21d52:	b29b      	uxth	r3, r3
   21d54:	18d3      	adds	r3, r2, r3
   21d56:	b29a      	uxth	r2, r3
   21d58:	2318      	movs	r3, #24
   21d5a:	18fb      	adds	r3, r7, r3
   21d5c:	805a      	strh	r2, [r3, #2]
   21d5e:	e00a      	b.n	21d76 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21d60:	2318      	movs	r3, #24
   21d62:	18fb      	adds	r3, r7, r3
   21d64:	885b      	ldrh	r3, [r3, #2]
   21d66:	b29a      	uxth	r2, r3
   21d68:	1d3b      	adds	r3, r7, #4
   21d6a:	881b      	ldrh	r3, [r3, #0]
   21d6c:	18d3      	adds	r3, r2, r3
   21d6e:	b29a      	uxth	r2, r3
   21d70:	2318      	movs	r3, #24
   21d72:	18fb      	adds	r3, r7, r3
   21d74:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21d76:	231f      	movs	r3, #31
   21d78:	18fc      	adds	r4, r7, r3
   21d7a:	4bb2      	ldr	r3, [pc, #712]	; (22044 <hif_send+0x358>)
   21d7c:	4798      	blx	r3
   21d7e:	0003      	movs	r3, r0
   21d80:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21d82:	231f      	movs	r3, #31
   21d84:	18fb      	adds	r3, r7, r3
   21d86:	781b      	ldrb	r3, [r3, #0]
   21d88:	b25b      	sxtb	r3, r3
   21d8a:	2b00      	cmp	r3, #0
   21d8c:	d000      	beq.n	21d90 <hif_send+0xa4>
   21d8e:	e129      	b.n	21fe4 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21d90:	2300      	movs	r3, #0
   21d92:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21d94:	230e      	movs	r3, #14
   21d96:	18fb      	adds	r3, r7, r3
   21d98:	2200      	movs	r2, #0
   21d9a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21d9c:	2300      	movs	r3, #0
   21d9e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21da0:	1dfb      	adds	r3, r7, #7
   21da2:	781a      	ldrb	r2, [r3, #0]
   21da4:	697b      	ldr	r3, [r7, #20]
   21da6:	4313      	orrs	r3, r2
   21da8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21daa:	1dbb      	adds	r3, r7, #6
   21dac:	781b      	ldrb	r3, [r3, #0]
   21dae:	021a      	lsls	r2, r3, #8
   21db0:	697b      	ldr	r3, [r7, #20]
   21db2:	4313      	orrs	r3, r2
   21db4:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21db6:	2318      	movs	r3, #24
   21db8:	18fb      	adds	r3, r7, r3
   21dba:	885b      	ldrh	r3, [r3, #2]
   21dbc:	b29b      	uxth	r3, r3
   21dbe:	041a      	lsls	r2, r3, #16
   21dc0:	697b      	ldr	r3, [r7, #20]
   21dc2:	4313      	orrs	r3, r2
   21dc4:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21dc6:	697b      	ldr	r3, [r7, #20]
   21dc8:	221f      	movs	r2, #31
   21dca:	18bc      	adds	r4, r7, r2
   21dcc:	4a9e      	ldr	r2, [pc, #632]	; (22048 <hif_send+0x35c>)
   21dce:	0019      	movs	r1, r3
   21dd0:	0010      	movs	r0, r2
   21dd2:	4b9e      	ldr	r3, [pc, #632]	; (2204c <hif_send+0x360>)
   21dd4:	4798      	blx	r3
   21dd6:	0003      	movs	r3, r0
   21dd8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21dda:	231f      	movs	r3, #31
   21ddc:	18fb      	adds	r3, r7, r3
   21dde:	781b      	ldrb	r3, [r3, #0]
   21de0:	b25b      	sxtb	r3, r3
   21de2:	2b00      	cmp	r3, #0
   21de4:	d000      	beq.n	21de8 <hif_send+0xfc>
   21de6:	e119      	b.n	2201c <hif_send+0x330>

		reg = 0UL;
   21de8:	2300      	movs	r3, #0
   21dea:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21dec:	697b      	ldr	r3, [r7, #20]
   21dee:	2202      	movs	r2, #2
   21df0:	4313      	orrs	r3, r2
   21df2:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21df4:	697b      	ldr	r3, [r7, #20]
   21df6:	221f      	movs	r2, #31
   21df8:	18bc      	adds	r4, r7, r2
   21dfa:	4a95      	ldr	r2, [pc, #596]	; (22050 <hif_send+0x364>)
   21dfc:	0019      	movs	r1, r3
   21dfe:	0010      	movs	r0, r2
   21e00:	4b92      	ldr	r3, [pc, #584]	; (2204c <hif_send+0x360>)
   21e02:	4798      	blx	r3
   21e04:	0003      	movs	r3, r0
   21e06:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21e08:	231f      	movs	r3, #31
   21e0a:	18fb      	adds	r3, r7, r3
   21e0c:	781b      	ldrb	r3, [r3, #0]
   21e0e:	b25b      	sxtb	r3, r3
   21e10:	2b00      	cmp	r3, #0
   21e12:	d000      	beq.n	21e16 <hif_send+0x12a>
   21e14:	e104      	b.n	22020 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21e16:	2300      	movs	r3, #0
   21e18:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21e1a:	230e      	movs	r3, #14
   21e1c:	18fb      	adds	r3, r7, r3
   21e1e:	2200      	movs	r2, #0
   21e20:	801a      	strh	r2, [r3, #0]
   21e22:	e050      	b.n	21ec6 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21e24:	231f      	movs	r3, #31
   21e26:	18fc      	adds	r4, r7, r3
   21e28:	2314      	movs	r3, #20
   21e2a:	18fb      	adds	r3, r7, r3
   21e2c:	4a88      	ldr	r2, [pc, #544]	; (22050 <hif_send+0x364>)
   21e2e:	0019      	movs	r1, r3
   21e30:	0010      	movs	r0, r2
   21e32:	4b88      	ldr	r3, [pc, #544]	; (22054 <hif_send+0x368>)
   21e34:	4798      	blx	r3
   21e36:	0003      	movs	r3, r0
   21e38:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21e3a:	231f      	movs	r3, #31
   21e3c:	18fb      	adds	r3, r7, r3
   21e3e:	781b      	ldrb	r3, [r3, #0]
   21e40:	b25b      	sxtb	r3, r3
   21e42:	2b00      	cmp	r3, #0
   21e44:	d147      	bne.n	21ed6 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21e46:	230e      	movs	r3, #14
   21e48:	18fb      	adds	r3, r7, r3
   21e4a:	881b      	ldrh	r3, [r3, #0]
   21e4c:	b29a      	uxth	r2, r3
   21e4e:	23f4      	movs	r3, #244	; 0xf4
   21e50:	33ff      	adds	r3, #255	; 0xff
   21e52:	429a      	cmp	r2, r3
   21e54:	d916      	bls.n	21e84 <hif_send+0x198>
				if(cnt < 501) {
   21e56:	230e      	movs	r3, #14
   21e58:	18fb      	adds	r3, r7, r3
   21e5a:	881b      	ldrh	r3, [r3, #0]
   21e5c:	b29a      	uxth	r2, r3
   21e5e:	23fa      	movs	r3, #250	; 0xfa
   21e60:	005b      	lsls	r3, r3, #1
   21e62:	429a      	cmp	r2, r3
   21e64:	d80b      	bhi.n	21e7e <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21e66:	4b7c      	ldr	r3, [pc, #496]	; (22058 <hif_send+0x36c>)
   21e68:	0018      	movs	r0, r3
   21e6a:	4b7c      	ldr	r3, [pc, #496]	; (2205c <hif_send+0x370>)
   21e6c:	4798      	blx	r3
   21e6e:	4b7c      	ldr	r3, [pc, #496]	; (22060 <hif_send+0x374>)
   21e70:	0018      	movs	r0, r3
   21e72:	4b7a      	ldr	r3, [pc, #488]	; (2205c <hif_send+0x370>)
   21e74:	4798      	blx	r3
   21e76:	4b7b      	ldr	r3, [pc, #492]	; (22064 <hif_send+0x378>)
   21e78:	0018      	movs	r0, r3
   21e7a:	4b78      	ldr	r3, [pc, #480]	; (2205c <hif_send+0x370>)
   21e7c:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21e7e:	2001      	movs	r0, #1
   21e80:	4b79      	ldr	r3, [pc, #484]	; (22068 <hif_send+0x37c>)
   21e82:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21e84:	697b      	ldr	r3, [r7, #20]
   21e86:	2202      	movs	r2, #2
   21e88:	4013      	ands	r3, r2
   21e8a:	d113      	bne.n	21eb4 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21e8c:	231f      	movs	r3, #31
   21e8e:	18fc      	adds	r4, r7, r3
   21e90:	2310      	movs	r3, #16
   21e92:	18fb      	adds	r3, r7, r3
   21e94:	4a75      	ldr	r2, [pc, #468]	; (2206c <hif_send+0x380>)
   21e96:	0019      	movs	r1, r3
   21e98:	0010      	movs	r0, r2
   21e9a:	4b6e      	ldr	r3, [pc, #440]	; (22054 <hif_send+0x368>)
   21e9c:	4798      	blx	r3
   21e9e:	0003      	movs	r3, r0
   21ea0:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21ea2:	231f      	movs	r3, #31
   21ea4:	18fb      	adds	r3, r7, r3
   21ea6:	781b      	ldrb	r3, [r3, #0]
   21ea8:	b25b      	sxtb	r3, r3
   21eaa:	2b00      	cmp	r3, #0
   21eac:	d015      	beq.n	21eda <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21eae:	2300      	movs	r3, #0
   21eb0:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21eb2:	e0bc      	b.n	2202e <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21eb4:	230e      	movs	r3, #14
   21eb6:	18fb      	adds	r3, r7, r3
   21eb8:	881b      	ldrh	r3, [r3, #0]
   21eba:	b29b      	uxth	r3, r3
   21ebc:	3301      	adds	r3, #1
   21ebe:	b29a      	uxth	r2, r3
   21ec0:	230e      	movs	r3, #14
   21ec2:	18fb      	adds	r3, r7, r3
   21ec4:	801a      	strh	r2, [r3, #0]
   21ec6:	230e      	movs	r3, #14
   21ec8:	18fb      	adds	r3, r7, r3
   21eca:	881b      	ldrh	r3, [r3, #0]
   21ecc:	b29b      	uxth	r3, r3
   21ece:	4a68      	ldr	r2, [pc, #416]	; (22070 <hif_send+0x384>)
   21ed0:	4293      	cmp	r3, r2
   21ed2:	d9a7      	bls.n	21e24 <hif_send+0x138>
   21ed4:	e002      	b.n	21edc <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21ed6:	46c0      	nop			; (mov r8, r8)
   21ed8:	e000      	b.n	21edc <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21eda:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   21edc:	693b      	ldr	r3, [r7, #16]
   21ede:	2b00      	cmp	r3, #0
   21ee0:	d100      	bne.n	21ee4 <hif_send+0x1f8>
   21ee2:	e074      	b.n	21fce <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21ee4:	693b      	ldr	r3, [r7, #16]
   21ee6:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21ee8:	2318      	movs	r3, #24
   21eea:	18fb      	adds	r3, r7, r3
   21eec:	885b      	ldrh	r3, [r3, #2]
   21eee:	b29a      	uxth	r2, r3
   21ef0:	2318      	movs	r3, #24
   21ef2:	18fb      	adds	r3, r7, r3
   21ef4:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21ef6:	68bb      	ldr	r3, [r7, #8]
   21ef8:	221f      	movs	r2, #31
   21efa:	18bc      	adds	r4, r7, r2
   21efc:	2218      	movs	r2, #24
   21efe:	18b9      	adds	r1, r7, r2
   21f00:	2208      	movs	r2, #8
   21f02:	0018      	movs	r0, r3
   21f04:	4b5b      	ldr	r3, [pc, #364]	; (22074 <hif_send+0x388>)
   21f06:	4798      	blx	r3
   21f08:	0003      	movs	r3, r0
   21f0a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21f0c:	231f      	movs	r3, #31
   21f0e:	18fb      	adds	r3, r7, r3
   21f10:	781b      	ldrb	r3, [r3, #0]
   21f12:	b25b      	sxtb	r3, r3
   21f14:	2b00      	cmp	r3, #0
   21f16:	d000      	beq.n	21f1a <hif_send+0x22e>
   21f18:	e084      	b.n	22024 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   21f1a:	68bb      	ldr	r3, [r7, #8]
   21f1c:	3308      	adds	r3, #8
   21f1e:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21f20:	683b      	ldr	r3, [r7, #0]
   21f22:	2b00      	cmp	r3, #0
   21f24:	d016      	beq.n	21f54 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21f26:	68b8      	ldr	r0, [r7, #8]
   21f28:	1d3b      	adds	r3, r7, #4
   21f2a:	881a      	ldrh	r2, [r3, #0]
   21f2c:	231f      	movs	r3, #31
   21f2e:	18fc      	adds	r4, r7, r3
   21f30:	683b      	ldr	r3, [r7, #0]
   21f32:	0019      	movs	r1, r3
   21f34:	4b4f      	ldr	r3, [pc, #316]	; (22074 <hif_send+0x388>)
   21f36:	4798      	blx	r3
   21f38:	0003      	movs	r3, r0
   21f3a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21f3c:	231f      	movs	r3, #31
   21f3e:	18fb      	adds	r3, r7, r3
   21f40:	781b      	ldrb	r3, [r3, #0]
   21f42:	b25b      	sxtb	r3, r3
   21f44:	2b00      	cmp	r3, #0
   21f46:	d000      	beq.n	21f4a <hif_send+0x25e>
   21f48:	e06e      	b.n	22028 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   21f4a:	1d3b      	adds	r3, r7, #4
   21f4c:	881a      	ldrh	r2, [r3, #0]
   21f4e:	68bb      	ldr	r3, [r7, #8]
   21f50:	18d3      	adds	r3, r2, r3
   21f52:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21f56:	2b00      	cmp	r3, #0
   21f58:	d021      	beq.n	21f9e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   21f5a:	2338      	movs	r3, #56	; 0x38
   21f5c:	18fb      	adds	r3, r7, r3
   21f5e:	881a      	ldrh	r2, [r3, #0]
   21f60:	1d3b      	adds	r3, r7, #4
   21f62:	881b      	ldrh	r3, [r3, #0]
   21f64:	1ad3      	subs	r3, r2, r3
   21f66:	001a      	movs	r2, r3
   21f68:	68bb      	ldr	r3, [r7, #8]
   21f6a:	18d3      	adds	r3, r2, r3
   21f6c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21f6e:	68b8      	ldr	r0, [r7, #8]
   21f70:	2334      	movs	r3, #52	; 0x34
   21f72:	18fb      	adds	r3, r7, r3
   21f74:	881a      	ldrh	r2, [r3, #0]
   21f76:	231f      	movs	r3, #31
   21f78:	18fc      	adds	r4, r7, r3
   21f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21f7c:	0019      	movs	r1, r3
   21f7e:	4b3d      	ldr	r3, [pc, #244]	; (22074 <hif_send+0x388>)
   21f80:	4798      	blx	r3
   21f82:	0003      	movs	r3, r0
   21f84:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21f86:	231f      	movs	r3, #31
   21f88:	18fb      	adds	r3, r7, r3
   21f8a:	781b      	ldrb	r3, [r3, #0]
   21f8c:	b25b      	sxtb	r3, r3
   21f8e:	2b00      	cmp	r3, #0
   21f90:	d14c      	bne.n	2202c <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21f92:	2334      	movs	r3, #52	; 0x34
   21f94:	18fb      	adds	r3, r7, r3
   21f96:	881a      	ldrh	r2, [r3, #0]
   21f98:	68bb      	ldr	r3, [r7, #8]
   21f9a:	18d3      	adds	r3, r2, r3
   21f9c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21f9e:	693b      	ldr	r3, [r7, #16]
   21fa0:	009b      	lsls	r3, r3, #2
   21fa2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21fa4:	697b      	ldr	r3, [r7, #20]
   21fa6:	2202      	movs	r2, #2
   21fa8:	4313      	orrs	r3, r2
   21faa:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21fac:	697b      	ldr	r3, [r7, #20]
   21fae:	221f      	movs	r2, #31
   21fb0:	18bc      	adds	r4, r7, r2
   21fb2:	4a31      	ldr	r2, [pc, #196]	; (22078 <hif_send+0x38c>)
   21fb4:	0019      	movs	r1, r3
   21fb6:	0010      	movs	r0, r2
   21fb8:	4b24      	ldr	r3, [pc, #144]	; (2204c <hif_send+0x360>)
   21fba:	4798      	blx	r3
   21fbc:	0003      	movs	r3, r0
   21fbe:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21fc0:	231f      	movs	r3, #31
   21fc2:	18fb      	adds	r3, r7, r3
   21fc4:	781b      	ldrb	r3, [r3, #0]
   21fc6:	b25b      	sxtb	r3, r3
   21fc8:	2b00      	cmp	r3, #0
   21fca:	d01c      	beq.n	22006 <hif_send+0x31a>
   21fcc:	e02f      	b.n	2202e <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21fce:	231f      	movs	r3, #31
   21fd0:	18fc      	adds	r4, r7, r3
   21fd2:	4b2a      	ldr	r3, [pc, #168]	; (2207c <hif_send+0x390>)
   21fd4:	4798      	blx	r3
   21fd6:	0003      	movs	r3, r0
   21fd8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   21fda:	231f      	movs	r3, #31
   21fdc:	18fb      	adds	r3, r7, r3
   21fde:	22fd      	movs	r2, #253	; 0xfd
   21fe0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21fe2:	e026      	b.n	22032 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21fe4:	2398      	movs	r3, #152	; 0x98
   21fe6:	33ff      	adds	r3, #255	; 0xff
   21fe8:	001a      	movs	r2, r3
   21fea:	4925      	ldr	r1, [pc, #148]	; (22080 <hif_send+0x394>)
   21fec:	4b25      	ldr	r3, [pc, #148]	; (22084 <hif_send+0x398>)
   21fee:	0018      	movs	r0, r3
   21ff0:	4b1a      	ldr	r3, [pc, #104]	; (2205c <hif_send+0x370>)
   21ff2:	4798      	blx	r3
   21ff4:	4b24      	ldr	r3, [pc, #144]	; (22088 <hif_send+0x39c>)
   21ff6:	0018      	movs	r0, r3
   21ff8:	4b18      	ldr	r3, [pc, #96]	; (2205c <hif_send+0x370>)
   21ffa:	4798      	blx	r3
   21ffc:	4b19      	ldr	r3, [pc, #100]	; (22064 <hif_send+0x378>)
   21ffe:	0018      	movs	r0, r3
   22000:	4b16      	ldr	r3, [pc, #88]	; (2205c <hif_send+0x370>)
   22002:	4798      	blx	r3
		goto ERR2;
   22004:	e015      	b.n	22032 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   22006:	231f      	movs	r3, #31
   22008:	18fc      	adds	r4, r7, r3
   2200a:	4b1c      	ldr	r3, [pc, #112]	; (2207c <hif_send+0x390>)
   2200c:	4798      	blx	r3
   2200e:	0003      	movs	r3, r0
   22010:	7023      	strb	r3, [r4, #0]
	return ret;
   22012:	231f      	movs	r3, #31
   22014:	18fb      	adds	r3, r7, r3
   22016:	781b      	ldrb	r3, [r3, #0]
   22018:	b25b      	sxtb	r3, r3
   2201a:	e00e      	b.n	2203a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   2201c:	46c0      	nop			; (mov r8, r8)
   2201e:	e006      	b.n	2202e <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   22020:	46c0      	nop			; (mov r8, r8)
   22022:	e004      	b.n	2202e <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   22024:	46c0      	nop			; (mov r8, r8)
   22026:	e002      	b.n	2202e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   22028:	46c0      	nop			; (mov r8, r8)
   2202a:	e000      	b.n	2202e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2202c:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   2202e:	4b17      	ldr	r3, [pc, #92]	; (2208c <hif_send+0x3a0>)
   22030:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   22032:	231f      	movs	r3, #31
   22034:	18fb      	adds	r3, r7, r3
   22036:	781b      	ldrb	r3, [r3, #0]
   22038:	b25b      	sxtb	r3, r3
}
   2203a:	0018      	movs	r0, r3
   2203c:	46bd      	mov	sp, r7
   2203e:	b009      	add	sp, #36	; 0x24
   22040:	bd90      	pop	{r4, r7, pc}
   22042:	46c0      	nop			; (mov r8, r8)
   22044:	00021bb5 	.word	0x00021bb5
   22048:	0000108c 	.word	0x0000108c
   2204c:	00023a69 	.word	0x00023a69
   22050:	00001078 	.word	0x00001078
   22054:	00023a45 	.word	0x00023a45
   22058:	00039368 	.word	0x00039368
   2205c:	0001ed59 	.word	0x0001ed59
   22060:	00039374 	.word	0x00039374
   22064:	00039388 	.word	0x00039388
   22068:	000211ad 	.word	0x000211ad
   2206c:	00150400 	.word	0x00150400
   22070:	000003e7 	.word	0x000003e7
   22074:	00023bb1 	.word	0x00023bb1
   22078:	0000106c 	.word	0x0000106c
   2207c:	00021c4d 	.word	0x00021c4d
   22080:	00039690 	.word	0x00039690
   22084:	0003938c 	.word	0x0003938c
   22088:	000393a0 	.word	0x000393a0
   2208c:	00021c25 	.word	0x00021c25

00022090 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   22090:	b590      	push	{r4, r7, lr}
   22092:	b087      	sub	sp, #28
   22094:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   22096:	230f      	movs	r3, #15
   22098:	18fb      	adds	r3, r7, r3
   2209a:	2200      	movs	r2, #0
   2209c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   2209e:	230f      	movs	r3, #15
   220a0:	18fc      	adds	r4, r7, r3
   220a2:	2308      	movs	r3, #8
   220a4:	18fb      	adds	r3, r7, r3
   220a6:	4adc      	ldr	r2, [pc, #880]	; (22418 <hif_isr+0x388>)
   220a8:	0019      	movs	r1, r3
   220aa:	0010      	movs	r0, r2
   220ac:	4bdb      	ldr	r3, [pc, #876]	; (2241c <hif_isr+0x38c>)
   220ae:	4798      	blx	r3
   220b0:	0003      	movs	r3, r0
   220b2:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   220b4:	230f      	movs	r3, #15
   220b6:	18fb      	adds	r3, r7, r3
   220b8:	781b      	ldrb	r3, [r3, #0]
   220ba:	b25b      	sxtb	r3, r3
   220bc:	2b00      	cmp	r3, #0
   220be:	d000      	beq.n	220c2 <hif_isr+0x32>
   220c0:	e21e      	b.n	22500 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   220c2:	68bb      	ldr	r3, [r7, #8]
   220c4:	2201      	movs	r2, #1
   220c6:	4013      	ands	r3, r2
   220c8:	d100      	bne.n	220cc <hif_isr+0x3c>
   220ca:	e204      	b.n	224d6 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   220cc:	2000      	movs	r0, #0
   220ce:	4bd4      	ldr	r3, [pc, #848]	; (22420 <hif_isr+0x390>)
   220d0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   220d2:	68bb      	ldr	r3, [r7, #8]
   220d4:	2201      	movs	r2, #1
   220d6:	4393      	bics	r3, r2
   220d8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   220da:	68bb      	ldr	r3, [r7, #8]
   220dc:	220f      	movs	r2, #15
   220de:	18bc      	adds	r4, r7, r2
   220e0:	4acd      	ldr	r2, [pc, #820]	; (22418 <hif_isr+0x388>)
   220e2:	0019      	movs	r1, r3
   220e4:	0010      	movs	r0, r2
   220e6:	4bcf      	ldr	r3, [pc, #828]	; (22424 <hif_isr+0x394>)
   220e8:	4798      	blx	r3
   220ea:	0003      	movs	r3, r0
   220ec:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   220ee:	230f      	movs	r3, #15
   220f0:	18fb      	adds	r3, r7, r3
   220f2:	781b      	ldrb	r3, [r3, #0]
   220f4:	b25b      	sxtb	r3, r3
   220f6:	2b00      	cmp	r3, #0
   220f8:	d000      	beq.n	220fc <hif_isr+0x6c>
   220fa:	e210      	b.n	2251e <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   220fc:	4bca      	ldr	r3, [pc, #808]	; (22428 <hif_isr+0x398>)
   220fe:	2201      	movs	r2, #1
   22100:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   22102:	68bb      	ldr	r3, [r7, #8]
   22104:	089b      	lsrs	r3, r3, #2
   22106:	b29a      	uxth	r2, r3
   22108:	230c      	movs	r3, #12
   2210a:	18fb      	adds	r3, r7, r3
   2210c:	0512      	lsls	r2, r2, #20
   2210e:	0d12      	lsrs	r2, r2, #20
   22110:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   22112:	230c      	movs	r3, #12
   22114:	18fb      	adds	r3, r7, r3
   22116:	881b      	ldrh	r3, [r3, #0]
   22118:	2b00      	cmp	r3, #0
   2211a:	d100      	bne.n	2211e <hif_isr+0x8e>
   2211c:	e1c8      	b.n	224b0 <hif_isr+0x420>
				uint32 address = 0;
   2211e:	2300      	movs	r3, #0
   22120:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   22122:	230f      	movs	r3, #15
   22124:	18fc      	adds	r4, r7, r3
   22126:	003b      	movs	r3, r7
   22128:	4ac0      	ldr	r2, [pc, #768]	; (2242c <hif_isr+0x39c>)
   2212a:	0019      	movs	r1, r3
   2212c:	0010      	movs	r0, r2
   2212e:	4bbb      	ldr	r3, [pc, #748]	; (2241c <hif_isr+0x38c>)
   22130:	4798      	blx	r3
   22132:	0003      	movs	r3, r0
   22134:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   22136:	230f      	movs	r3, #15
   22138:	18fb      	adds	r3, r7, r3
   2213a:	781b      	ldrb	r3, [r3, #0]
   2213c:	b25b      	sxtb	r3, r3
   2213e:	2b00      	cmp	r3, #0
   22140:	d012      	beq.n	22168 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   22142:	23e4      	movs	r3, #228	; 0xe4
   22144:	005a      	lsls	r2, r3, #1
   22146:	49ba      	ldr	r1, [pc, #744]	; (22430 <hif_isr+0x3a0>)
   22148:	4bba      	ldr	r3, [pc, #744]	; (22434 <hif_isr+0x3a4>)
   2214a:	0018      	movs	r0, r3
   2214c:	4bba      	ldr	r3, [pc, #744]	; (22438 <hif_isr+0x3a8>)
   2214e:	4798      	blx	r3
   22150:	4bba      	ldr	r3, [pc, #744]	; (2243c <hif_isr+0x3ac>)
   22152:	0018      	movs	r0, r3
   22154:	4bb8      	ldr	r3, [pc, #736]	; (22438 <hif_isr+0x3a8>)
   22156:	4798      	blx	r3
   22158:	4bb9      	ldr	r3, [pc, #740]	; (22440 <hif_isr+0x3b0>)
   2215a:	0018      	movs	r0, r3
   2215c:	4bb6      	ldr	r3, [pc, #728]	; (22438 <hif_isr+0x3a8>)
   2215e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   22160:	2001      	movs	r0, #1
   22162:	4baf      	ldr	r3, [pc, #700]	; (22420 <hif_isr+0x390>)
   22164:	4798      	blx	r3
					goto ERR1;
   22166:	e1db      	b.n	22520 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   22168:	683a      	ldr	r2, [r7, #0]
   2216a:	4baf      	ldr	r3, [pc, #700]	; (22428 <hif_isr+0x398>)
   2216c:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   2216e:	230c      	movs	r3, #12
   22170:	18fb      	adds	r3, r7, r3
   22172:	881a      	ldrh	r2, [r3, #0]
   22174:	4bac      	ldr	r3, [pc, #688]	; (22428 <hif_isr+0x398>)
   22176:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   22178:	683b      	ldr	r3, [r7, #0]
   2217a:	220f      	movs	r2, #15
   2217c:	18bc      	adds	r4, r7, r2
   2217e:	1d39      	adds	r1, r7, #4
   22180:	2204      	movs	r2, #4
   22182:	0018      	movs	r0, r3
   22184:	4baf      	ldr	r3, [pc, #700]	; (22444 <hif_isr+0x3b4>)
   22186:	4798      	blx	r3
   22188:	0003      	movs	r3, r0
   2218a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   2218c:	1d3b      	adds	r3, r7, #4
   2218e:	885b      	ldrh	r3, [r3, #2]
   22190:	b29a      	uxth	r2, r3
   22192:	1d3b      	adds	r3, r7, #4
   22194:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   22196:	230f      	movs	r3, #15
   22198:	18fb      	adds	r3, r7, r3
   2219a:	781b      	ldrb	r3, [r3, #0]
   2219c:	b25b      	sxtb	r3, r3
   2219e:	2b00      	cmp	r3, #0
   221a0:	d012      	beq.n	221c8 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   221a2:	23e9      	movs	r3, #233	; 0xe9
   221a4:	005a      	lsls	r2, r3, #1
   221a6:	49a2      	ldr	r1, [pc, #648]	; (22430 <hif_isr+0x3a0>)
   221a8:	4ba2      	ldr	r3, [pc, #648]	; (22434 <hif_isr+0x3a4>)
   221aa:	0018      	movs	r0, r3
   221ac:	4ba2      	ldr	r3, [pc, #648]	; (22438 <hif_isr+0x3a8>)
   221ae:	4798      	blx	r3
   221b0:	4ba5      	ldr	r3, [pc, #660]	; (22448 <hif_isr+0x3b8>)
   221b2:	0018      	movs	r0, r3
   221b4:	4ba0      	ldr	r3, [pc, #640]	; (22438 <hif_isr+0x3a8>)
   221b6:	4798      	blx	r3
   221b8:	4ba1      	ldr	r3, [pc, #644]	; (22440 <hif_isr+0x3b0>)
   221ba:	0018      	movs	r0, r3
   221bc:	4b9e      	ldr	r3, [pc, #632]	; (22438 <hif_isr+0x3a8>)
   221be:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   221c0:	2001      	movs	r0, #1
   221c2:	4b97      	ldr	r3, [pc, #604]	; (22420 <hif_isr+0x390>)
   221c4:	4798      	blx	r3
					goto ERR1;
   221c6:	e1ab      	b.n	22520 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   221c8:	1d3b      	adds	r3, r7, #4
   221ca:	885b      	ldrh	r3, [r3, #2]
   221cc:	b29b      	uxth	r3, r3
   221ce:	220c      	movs	r2, #12
   221d0:	18ba      	adds	r2, r7, r2
   221d2:	8812      	ldrh	r2, [r2, #0]
   221d4:	429a      	cmp	r2, r3
   221d6:	d02f      	beq.n	22238 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   221d8:	230c      	movs	r3, #12
   221da:	18fb      	adds	r3, r7, r3
   221dc:	881b      	ldrh	r3, [r3, #0]
   221de:	1d3a      	adds	r2, r7, #4
   221e0:	8852      	ldrh	r2, [r2, #2]
   221e2:	b292      	uxth	r2, r2
   221e4:	1a9b      	subs	r3, r3, r2
   221e6:	2b04      	cmp	r3, #4
   221e8:	dd26      	ble.n	22238 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   221ea:	23dc      	movs	r3, #220	; 0xdc
   221ec:	33ff      	adds	r3, #255	; 0xff
   221ee:	001a      	movs	r2, r3
   221f0:	498f      	ldr	r1, [pc, #572]	; (22430 <hif_isr+0x3a0>)
   221f2:	4b90      	ldr	r3, [pc, #576]	; (22434 <hif_isr+0x3a4>)
   221f4:	0018      	movs	r0, r3
   221f6:	4b90      	ldr	r3, [pc, #576]	; (22438 <hif_isr+0x3a8>)
   221f8:	4798      	blx	r3
   221fa:	230c      	movs	r3, #12
   221fc:	18fb      	adds	r3, r7, r3
   221fe:	8819      	ldrh	r1, [r3, #0]
   22200:	1d3b      	adds	r3, r7, #4
   22202:	885b      	ldrh	r3, [r3, #2]
   22204:	b29b      	uxth	r3, r3
   22206:	001a      	movs	r2, r3
   22208:	1d3b      	adds	r3, r7, #4
   2220a:	781b      	ldrb	r3, [r3, #0]
   2220c:	b2db      	uxtb	r3, r3
   2220e:	001c      	movs	r4, r3
   22210:	1d3b      	adds	r3, r7, #4
   22212:	785b      	ldrb	r3, [r3, #1]
   22214:	b2db      	uxtb	r3, r3
   22216:	488d      	ldr	r0, [pc, #564]	; (2244c <hif_isr+0x3bc>)
   22218:	9300      	str	r3, [sp, #0]
   2221a:	0023      	movs	r3, r4
   2221c:	4c86      	ldr	r4, [pc, #536]	; (22438 <hif_isr+0x3a8>)
   2221e:	47a0      	blx	r4
   22220:	4b87      	ldr	r3, [pc, #540]	; (22440 <hif_isr+0x3b0>)
   22222:	0018      	movs	r0, r3
   22224:	4b84      	ldr	r3, [pc, #528]	; (22438 <hif_isr+0x3a8>)
   22226:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   22228:	2001      	movs	r0, #1
   2222a:	4b7d      	ldr	r3, [pc, #500]	; (22420 <hif_isr+0x390>)
   2222c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   2222e:	230f      	movs	r3, #15
   22230:	18fb      	adds	r3, r7, r3
   22232:	22fa      	movs	r2, #250	; 0xfa
   22234:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   22236:	e173      	b.n	22520 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   22238:	1d3b      	adds	r3, r7, #4
   2223a:	781b      	ldrb	r3, [r3, #0]
   2223c:	b2db      	uxtb	r3, r3
   2223e:	2b01      	cmp	r3, #1
   22240:	d122      	bne.n	22288 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   22242:	4b79      	ldr	r3, [pc, #484]	; (22428 <hif_isr+0x398>)
   22244:	691b      	ldr	r3, [r3, #16]
   22246:	2b00      	cmp	r3, #0
   22248:	d00d      	beq.n	22266 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2224a:	4b77      	ldr	r3, [pc, #476]	; (22428 <hif_isr+0x398>)
   2224c:	691b      	ldr	r3, [r3, #16]
   2224e:	1d3a      	adds	r2, r7, #4
   22250:	7852      	ldrb	r2, [r2, #1]
   22252:	b2d0      	uxtb	r0, r2
   22254:	1d3a      	adds	r2, r7, #4
   22256:	8852      	ldrh	r2, [r2, #2]
   22258:	b292      	uxth	r2, r2
   2225a:	3a08      	subs	r2, #8
   2225c:	b291      	uxth	r1, r2
   2225e:	683a      	ldr	r2, [r7, #0]
   22260:	3208      	adds	r2, #8
   22262:	4798      	blx	r3
   22264:	e102      	b.n	2246c <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   22266:	23e8      	movs	r3, #232	; 0xe8
   22268:	33ff      	adds	r3, #255	; 0xff
   2226a:	001a      	movs	r2, r3
   2226c:	4970      	ldr	r1, [pc, #448]	; (22430 <hif_isr+0x3a0>)
   2226e:	4b71      	ldr	r3, [pc, #452]	; (22434 <hif_isr+0x3a4>)
   22270:	0018      	movs	r0, r3
   22272:	4b71      	ldr	r3, [pc, #452]	; (22438 <hif_isr+0x3a8>)
   22274:	4798      	blx	r3
   22276:	4b76      	ldr	r3, [pc, #472]	; (22450 <hif_isr+0x3c0>)
   22278:	0018      	movs	r0, r3
   2227a:	4b6f      	ldr	r3, [pc, #444]	; (22438 <hif_isr+0x3a8>)
   2227c:	4798      	blx	r3
   2227e:	4b70      	ldr	r3, [pc, #448]	; (22440 <hif_isr+0x3b0>)
   22280:	0018      	movs	r0, r3
   22282:	4b6d      	ldr	r3, [pc, #436]	; (22438 <hif_isr+0x3a8>)
   22284:	4798      	blx	r3
   22286:	e0f1      	b.n	2246c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   22288:	1d3b      	adds	r3, r7, #4
   2228a:	781b      	ldrb	r3, [r3, #0]
   2228c:	b2db      	uxtb	r3, r3
   2228e:	2b02      	cmp	r3, #2
   22290:	d122      	bne.n	222d8 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   22292:	4b65      	ldr	r3, [pc, #404]	; (22428 <hif_isr+0x398>)
   22294:	695b      	ldr	r3, [r3, #20]
   22296:	2b00      	cmp	r3, #0
   22298:	d00d      	beq.n	222b6 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2229a:	4b63      	ldr	r3, [pc, #396]	; (22428 <hif_isr+0x398>)
   2229c:	695b      	ldr	r3, [r3, #20]
   2229e:	1d3a      	adds	r2, r7, #4
   222a0:	7852      	ldrb	r2, [r2, #1]
   222a2:	b2d0      	uxtb	r0, r2
   222a4:	1d3a      	adds	r2, r7, #4
   222a6:	8852      	ldrh	r2, [r2, #2]
   222a8:	b292      	uxth	r2, r2
   222aa:	3a08      	subs	r2, #8
   222ac:	b291      	uxth	r1, r2
   222ae:	683a      	ldr	r2, [r7, #0]
   222b0:	3208      	adds	r2, #8
   222b2:	4798      	blx	r3
   222b4:	e0da      	b.n	2246c <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   222b6:	23f0      	movs	r3, #240	; 0xf0
   222b8:	33ff      	adds	r3, #255	; 0xff
   222ba:	001a      	movs	r2, r3
   222bc:	495c      	ldr	r1, [pc, #368]	; (22430 <hif_isr+0x3a0>)
   222be:	4b5d      	ldr	r3, [pc, #372]	; (22434 <hif_isr+0x3a4>)
   222c0:	0018      	movs	r0, r3
   222c2:	4b5d      	ldr	r3, [pc, #372]	; (22438 <hif_isr+0x3a8>)
   222c4:	4798      	blx	r3
   222c6:	4b63      	ldr	r3, [pc, #396]	; (22454 <hif_isr+0x3c4>)
   222c8:	0018      	movs	r0, r3
   222ca:	4b5b      	ldr	r3, [pc, #364]	; (22438 <hif_isr+0x3a8>)
   222cc:	4798      	blx	r3
   222ce:	4b5c      	ldr	r3, [pc, #368]	; (22440 <hif_isr+0x3b0>)
   222d0:	0018      	movs	r0, r3
   222d2:	4b59      	ldr	r3, [pc, #356]	; (22438 <hif_isr+0x3a8>)
   222d4:	4798      	blx	r3
   222d6:	e0c9      	b.n	2246c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   222d8:	1d3b      	adds	r3, r7, #4
   222da:	781b      	ldrb	r3, [r3, #0]
   222dc:	b2db      	uxtb	r3, r3
   222de:	2b04      	cmp	r3, #4
   222e0:	d122      	bne.n	22328 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   222e2:	4b51      	ldr	r3, [pc, #324]	; (22428 <hif_isr+0x398>)
   222e4:	699b      	ldr	r3, [r3, #24]
   222e6:	2b00      	cmp	r3, #0
   222e8:	d00d      	beq.n	22306 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   222ea:	4b4f      	ldr	r3, [pc, #316]	; (22428 <hif_isr+0x398>)
   222ec:	699b      	ldr	r3, [r3, #24]
   222ee:	1d3a      	adds	r2, r7, #4
   222f0:	7852      	ldrb	r2, [r2, #1]
   222f2:	b2d0      	uxtb	r0, r2
   222f4:	1d3a      	adds	r2, r7, #4
   222f6:	8852      	ldrh	r2, [r2, #2]
   222f8:	b292      	uxth	r2, r2
   222fa:	3a08      	subs	r2, #8
   222fc:	b291      	uxth	r1, r2
   222fe:	683a      	ldr	r2, [r7, #0]
   22300:	3208      	adds	r2, #8
   22302:	4798      	blx	r3
   22304:	e0b2      	b.n	2246c <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   22306:	23f8      	movs	r3, #248	; 0xf8
   22308:	33ff      	adds	r3, #255	; 0xff
   2230a:	001a      	movs	r2, r3
   2230c:	4948      	ldr	r1, [pc, #288]	; (22430 <hif_isr+0x3a0>)
   2230e:	4b49      	ldr	r3, [pc, #292]	; (22434 <hif_isr+0x3a4>)
   22310:	0018      	movs	r0, r3
   22312:	4b49      	ldr	r3, [pc, #292]	; (22438 <hif_isr+0x3a8>)
   22314:	4798      	blx	r3
   22316:	4b50      	ldr	r3, [pc, #320]	; (22458 <hif_isr+0x3c8>)
   22318:	0018      	movs	r0, r3
   2231a:	4b47      	ldr	r3, [pc, #284]	; (22438 <hif_isr+0x3a8>)
   2231c:	4798      	blx	r3
   2231e:	4b48      	ldr	r3, [pc, #288]	; (22440 <hif_isr+0x3b0>)
   22320:	0018      	movs	r0, r3
   22322:	4b45      	ldr	r3, [pc, #276]	; (22438 <hif_isr+0x3a8>)
   22324:	4798      	blx	r3
   22326:	e0a1      	b.n	2246c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   22328:	1d3b      	adds	r3, r7, #4
   2232a:	781b      	ldrb	r3, [r3, #0]
   2232c:	b2db      	uxtb	r3, r3
   2232e:	2b06      	cmp	r3, #6
   22330:	d121      	bne.n	22376 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   22332:	4b3d      	ldr	r3, [pc, #244]	; (22428 <hif_isr+0x398>)
   22334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22336:	2b00      	cmp	r3, #0
   22338:	d00d      	beq.n	22356 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2233a:	4b3b      	ldr	r3, [pc, #236]	; (22428 <hif_isr+0x398>)
   2233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2233e:	1d3a      	adds	r2, r7, #4
   22340:	7852      	ldrb	r2, [r2, #1]
   22342:	b2d0      	uxtb	r0, r2
   22344:	1d3a      	adds	r2, r7, #4
   22346:	8852      	ldrh	r2, [r2, #2]
   22348:	b292      	uxth	r2, r2
   2234a:	3a08      	subs	r2, #8
   2234c:	b291      	uxth	r1, r2
   2234e:	683a      	ldr	r2, [r7, #0]
   22350:	3208      	adds	r2, #8
   22352:	4798      	blx	r3
   22354:	e08a      	b.n	2246c <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   22356:	2380      	movs	r3, #128	; 0x80
   22358:	009a      	lsls	r2, r3, #2
   2235a:	4935      	ldr	r1, [pc, #212]	; (22430 <hif_isr+0x3a0>)
   2235c:	4b35      	ldr	r3, [pc, #212]	; (22434 <hif_isr+0x3a4>)
   2235e:	0018      	movs	r0, r3
   22360:	4b35      	ldr	r3, [pc, #212]	; (22438 <hif_isr+0x3a8>)
   22362:	4798      	blx	r3
   22364:	4b3d      	ldr	r3, [pc, #244]	; (2245c <hif_isr+0x3cc>)
   22366:	0018      	movs	r0, r3
   22368:	4b33      	ldr	r3, [pc, #204]	; (22438 <hif_isr+0x3a8>)
   2236a:	4798      	blx	r3
   2236c:	4b34      	ldr	r3, [pc, #208]	; (22440 <hif_isr+0x3b0>)
   2236e:	0018      	movs	r0, r3
   22370:	4b31      	ldr	r3, [pc, #196]	; (22438 <hif_isr+0x3a8>)
   22372:	4798      	blx	r3
   22374:	e07a      	b.n	2246c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   22376:	1d3b      	adds	r3, r7, #4
   22378:	781b      	ldrb	r3, [r3, #0]
   2237a:	b2db      	uxtb	r3, r3
   2237c:	2b07      	cmp	r3, #7
   2237e:	d120      	bne.n	223c2 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   22380:	4b29      	ldr	r3, [pc, #164]	; (22428 <hif_isr+0x398>)
   22382:	69db      	ldr	r3, [r3, #28]
   22384:	2b00      	cmp	r3, #0
   22386:	d00d      	beq.n	223a4 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22388:	4b27      	ldr	r3, [pc, #156]	; (22428 <hif_isr+0x398>)
   2238a:	69db      	ldr	r3, [r3, #28]
   2238c:	1d3a      	adds	r2, r7, #4
   2238e:	7852      	ldrb	r2, [r2, #1]
   22390:	b2d0      	uxtb	r0, r2
   22392:	1d3a      	adds	r2, r7, #4
   22394:	8852      	ldrh	r2, [r2, #2]
   22396:	b292      	uxth	r2, r2
   22398:	3a08      	subs	r2, #8
   2239a:	b291      	uxth	r1, r2
   2239c:	683a      	ldr	r2, [r7, #0]
   2239e:	3208      	adds	r2, #8
   223a0:	4798      	blx	r3
   223a2:	e063      	b.n	2246c <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   223a4:	4a2e      	ldr	r2, [pc, #184]	; (22460 <hif_isr+0x3d0>)
   223a6:	4922      	ldr	r1, [pc, #136]	; (22430 <hif_isr+0x3a0>)
   223a8:	4b22      	ldr	r3, [pc, #136]	; (22434 <hif_isr+0x3a4>)
   223aa:	0018      	movs	r0, r3
   223ac:	4b22      	ldr	r3, [pc, #136]	; (22438 <hif_isr+0x3a8>)
   223ae:	4798      	blx	r3
   223b0:	4b2c      	ldr	r3, [pc, #176]	; (22464 <hif_isr+0x3d4>)
   223b2:	0018      	movs	r0, r3
   223b4:	4b20      	ldr	r3, [pc, #128]	; (22438 <hif_isr+0x3a8>)
   223b6:	4798      	blx	r3
   223b8:	4b21      	ldr	r3, [pc, #132]	; (22440 <hif_isr+0x3b0>)
   223ba:	0018      	movs	r0, r3
   223bc:	4b1e      	ldr	r3, [pc, #120]	; (22438 <hif_isr+0x3a8>)
   223be:	4798      	blx	r3
   223c0:	e054      	b.n	2246c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   223c2:	1d3b      	adds	r3, r7, #4
   223c4:	781b      	ldrb	r3, [r3, #0]
   223c6:	b2db      	uxtb	r3, r3
   223c8:	2b05      	cmp	r3, #5
   223ca:	d111      	bne.n	223f0 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   223cc:	4b16      	ldr	r3, [pc, #88]	; (22428 <hif_isr+0x398>)
   223ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223d0:	2b00      	cmp	r3, #0
   223d2:	d04b      	beq.n	2246c <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   223d4:	4b14      	ldr	r3, [pc, #80]	; (22428 <hif_isr+0x398>)
   223d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223d8:	1d3a      	adds	r2, r7, #4
   223da:	7852      	ldrb	r2, [r2, #1]
   223dc:	b2d0      	uxtb	r0, r2
   223de:	1d3a      	adds	r2, r7, #4
   223e0:	8852      	ldrh	r2, [r2, #2]
   223e2:	b292      	uxth	r2, r2
   223e4:	3a08      	subs	r2, #8
   223e6:	b291      	uxth	r1, r2
   223e8:	683a      	ldr	r2, [r7, #0]
   223ea:	3208      	adds	r2, #8
   223ec:	4798      	blx	r3
   223ee:	e03d      	b.n	2246c <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   223f0:	2384      	movs	r3, #132	; 0x84
   223f2:	009a      	lsls	r2, r3, #2
   223f4:	490e      	ldr	r1, [pc, #56]	; (22430 <hif_isr+0x3a0>)
   223f6:	4b0f      	ldr	r3, [pc, #60]	; (22434 <hif_isr+0x3a4>)
   223f8:	0018      	movs	r0, r3
   223fa:	4b0f      	ldr	r3, [pc, #60]	; (22438 <hif_isr+0x3a8>)
   223fc:	4798      	blx	r3
   223fe:	4b1a      	ldr	r3, [pc, #104]	; (22468 <hif_isr+0x3d8>)
   22400:	0018      	movs	r0, r3
   22402:	4b0d      	ldr	r3, [pc, #52]	; (22438 <hif_isr+0x3a8>)
   22404:	4798      	blx	r3
   22406:	4b0e      	ldr	r3, [pc, #56]	; (22440 <hif_isr+0x3b0>)
   22408:	0018      	movs	r0, r3
   2240a:	4b0b      	ldr	r3, [pc, #44]	; (22438 <hif_isr+0x3a8>)
   2240c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2240e:	230f      	movs	r3, #15
   22410:	18fb      	adds	r3, r7, r3
   22412:	22fa      	movs	r2, #250	; 0xfa
   22414:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22416:	e083      	b.n	22520 <hif_isr+0x490>
   22418:	00001070 	.word	0x00001070
   2241c:	00023a45 	.word	0x00023a45
   22420:	00021241 	.word	0x00021241
   22424:	00023a69 	.word	0x00023a69
   22428:	20005b64 	.word	0x20005b64
   2242c:	00001084 	.word	0x00001084
   22430:	0003969c 	.word	0x0003969c
   22434:	0003938c 	.word	0x0003938c
   22438:	0001ed59 	.word	0x0001ed59
   2243c:	000393c0 	.word	0x000393c0
   22440:	00039388 	.word	0x00039388
   22444:	00023ab9 	.word	0x00023ab9
   22448:	000393e8 	.word	0x000393e8
   2244c:	00039400 	.word	0x00039400
   22450:	00039440 	.word	0x00039440
   22454:	00039464 	.word	0x00039464
   22458:	00039488 	.word	0x00039488
   2245c:	000394a8 	.word	0x000394a8
   22460:	00000207 	.word	0x00000207
   22464:	000394cc 	.word	0x000394cc
   22468:	000394f0 	.word	0x000394f0
				}
				if(gstrHifCxt.u8HifRXDone)
   2246c:	4b30      	ldr	r3, [pc, #192]	; (22530 <hif_isr+0x4a0>)
   2246e:	789b      	ldrb	r3, [r3, #2]
   22470:	b2db      	uxtb	r3, r3
   22472:	2b00      	cmp	r3, #0
   22474:	d054      	beq.n	22520 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   22476:	4a2f      	ldr	r2, [pc, #188]	; (22534 <hif_isr+0x4a4>)
   22478:	492f      	ldr	r1, [pc, #188]	; (22538 <hif_isr+0x4a8>)
   2247a:	4b30      	ldr	r3, [pc, #192]	; (2253c <hif_isr+0x4ac>)
   2247c:	0018      	movs	r0, r3
   2247e:	4b30      	ldr	r3, [pc, #192]	; (22540 <hif_isr+0x4b0>)
   22480:	4798      	blx	r3
   22482:	1d3b      	adds	r3, r7, #4
   22484:	781b      	ldrb	r3, [r3, #0]
   22486:	b2db      	uxtb	r3, r3
   22488:	0019      	movs	r1, r3
   2248a:	1d3b      	adds	r3, r7, #4
   2248c:	785b      	ldrb	r3, [r3, #1]
   2248e:	b2db      	uxtb	r3, r3
   22490:	001a      	movs	r2, r3
   22492:	4b2c      	ldr	r3, [pc, #176]	; (22544 <hif_isr+0x4b4>)
   22494:	0018      	movs	r0, r3
   22496:	4b2a      	ldr	r3, [pc, #168]	; (22540 <hif_isr+0x4b0>)
   22498:	4798      	blx	r3
   2249a:	4b2b      	ldr	r3, [pc, #172]	; (22548 <hif_isr+0x4b8>)
   2249c:	0018      	movs	r0, r3
   2249e:	4b28      	ldr	r3, [pc, #160]	; (22540 <hif_isr+0x4b0>)
   224a0:	4798      	blx	r3
					ret = hif_set_rx_done();
   224a2:	230f      	movs	r3, #15
   224a4:	18fc      	adds	r4, r7, r3
   224a6:	4b29      	ldr	r3, [pc, #164]	; (2254c <hif_isr+0x4bc>)
   224a8:	4798      	blx	r3
   224aa:	0003      	movs	r3, r0
   224ac:	7023      	strb	r3, [r4, #0]
   224ae:	e037      	b.n	22520 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   224b0:	4a27      	ldr	r2, [pc, #156]	; (22550 <hif_isr+0x4c0>)
   224b2:	4921      	ldr	r1, [pc, #132]	; (22538 <hif_isr+0x4a8>)
   224b4:	4b21      	ldr	r3, [pc, #132]	; (2253c <hif_isr+0x4ac>)
   224b6:	0018      	movs	r0, r3
   224b8:	4b21      	ldr	r3, [pc, #132]	; (22540 <hif_isr+0x4b0>)
   224ba:	4798      	blx	r3
   224bc:	4b25      	ldr	r3, [pc, #148]	; (22554 <hif_isr+0x4c4>)
   224be:	0018      	movs	r0, r3
   224c0:	4b1f      	ldr	r3, [pc, #124]	; (22540 <hif_isr+0x4b0>)
   224c2:	4798      	blx	r3
   224c4:	4b20      	ldr	r3, [pc, #128]	; (22548 <hif_isr+0x4b8>)
   224c6:	0018      	movs	r0, r3
   224c8:	4b1d      	ldr	r3, [pc, #116]	; (22540 <hif_isr+0x4b0>)
   224ca:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   224cc:	230f      	movs	r3, #15
   224ce:	18fb      	adds	r3, r7, r3
   224d0:	22fe      	movs	r2, #254	; 0xfe
   224d2:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   224d4:	e024      	b.n	22520 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   224d6:	4a20      	ldr	r2, [pc, #128]	; (22558 <hif_isr+0x4c8>)
   224d8:	4917      	ldr	r1, [pc, #92]	; (22538 <hif_isr+0x4a8>)
   224da:	4b18      	ldr	r3, [pc, #96]	; (2253c <hif_isr+0x4ac>)
   224dc:	0018      	movs	r0, r3
   224de:	4b18      	ldr	r3, [pc, #96]	; (22540 <hif_isr+0x4b0>)
   224e0:	4798      	blx	r3
   224e2:	68ba      	ldr	r2, [r7, #8]
   224e4:	4b1d      	ldr	r3, [pc, #116]	; (2255c <hif_isr+0x4cc>)
   224e6:	0011      	movs	r1, r2
   224e8:	0018      	movs	r0, r3
   224ea:	4b15      	ldr	r3, [pc, #84]	; (22540 <hif_isr+0x4b0>)
   224ec:	4798      	blx	r3
   224ee:	4b16      	ldr	r3, [pc, #88]	; (22548 <hif_isr+0x4b8>)
   224f0:	0018      	movs	r0, r3
   224f2:	4b13      	ldr	r3, [pc, #76]	; (22540 <hif_isr+0x4b0>)
   224f4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   224f6:	230f      	movs	r3, #15
   224f8:	18fb      	adds	r3, r7, r3
   224fa:	22f4      	movs	r2, #244	; 0xf4
   224fc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   224fe:	e00f      	b.n	22520 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   22500:	4a17      	ldr	r2, [pc, #92]	; (22560 <hif_isr+0x4d0>)
   22502:	490d      	ldr	r1, [pc, #52]	; (22538 <hif_isr+0x4a8>)
   22504:	4b0d      	ldr	r3, [pc, #52]	; (2253c <hif_isr+0x4ac>)
   22506:	0018      	movs	r0, r3
   22508:	4b0d      	ldr	r3, [pc, #52]	; (22540 <hif_isr+0x4b0>)
   2250a:	4798      	blx	r3
   2250c:	4b15      	ldr	r3, [pc, #84]	; (22564 <hif_isr+0x4d4>)
   2250e:	0018      	movs	r0, r3
   22510:	4b0b      	ldr	r3, [pc, #44]	; (22540 <hif_isr+0x4b0>)
   22512:	4798      	blx	r3
   22514:	4b0c      	ldr	r3, [pc, #48]	; (22548 <hif_isr+0x4b8>)
   22516:	0018      	movs	r0, r3
   22518:	4b09      	ldr	r3, [pc, #36]	; (22540 <hif_isr+0x4b0>)
   2251a:	4798      	blx	r3
		goto ERR1;
   2251c:	e000      	b.n	22520 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   2251e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22520:	230f      	movs	r3, #15
   22522:	18fb      	adds	r3, r7, r3
   22524:	781b      	ldrb	r3, [r3, #0]
   22526:	b25b      	sxtb	r3, r3
}
   22528:	0018      	movs	r0, r3
   2252a:	46bd      	mov	sp, r7
   2252c:	b005      	add	sp, #20
   2252e:	bd90      	pop	{r4, r7, pc}
   22530:	20005b64 	.word	0x20005b64
   22534:	00000216 	.word	0x00000216
   22538:	0003969c 	.word	0x0003969c
   2253c:	0003938c 	.word	0x0003938c
   22540:	0001ed59 	.word	0x0001ed59
   22544:	00039508 	.word	0x00039508
   22548:	00039388 	.word	0x00039388
   2254c:	00021b25 	.word	0x00021b25
   22550:	0000021d 	.word	0x0000021d
   22554:	00039534 	.word	0x00039534
   22558:	00000225 	.word	0x00000225
   2255c:	00039548 	.word	0x00039548
   22560:	0000022e 	.word	0x0000022e
   22564:	00039564 	.word	0x00039564

00022568 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   22568:	b590      	push	{r4, r7, lr}
   2256a:	b083      	sub	sp, #12
   2256c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   2256e:	1dfb      	adds	r3, r7, #7
   22570:	2200      	movs	r2, #0
   22572:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   22574:	4b1c      	ldr	r3, [pc, #112]	; (225e8 <hif_handle_isr+0x80>)
   22576:	2200      	movs	r2, #0
   22578:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2257a:	e024      	b.n	225c6 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   2257c:	4b1a      	ldr	r3, [pc, #104]	; (225e8 <hif_handle_isr+0x80>)
   2257e:	78db      	ldrb	r3, [r3, #3]
   22580:	b2db      	uxtb	r3, r3
   22582:	3b01      	subs	r3, #1
   22584:	b2da      	uxtb	r2, r3
   22586:	4b18      	ldr	r3, [pc, #96]	; (225e8 <hif_handle_isr+0x80>)
   22588:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2258a:	1dfc      	adds	r4, r7, #7
   2258c:	4b17      	ldr	r3, [pc, #92]	; (225ec <hif_handle_isr+0x84>)
   2258e:	4798      	blx	r3
   22590:	0003      	movs	r3, r0
   22592:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22594:	1dfb      	adds	r3, r7, #7
   22596:	781b      	ldrb	r3, [r3, #0]
   22598:	b25b      	sxtb	r3, r3
   2259a:	2b00      	cmp	r3, #0
   2259c:	d100      	bne.n	225a0 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   2259e:	e012      	b.n	225c6 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   225a0:	4a13      	ldr	r2, [pc, #76]	; (225f0 <hif_handle_isr+0x88>)
   225a2:	4914      	ldr	r1, [pc, #80]	; (225f4 <hif_handle_isr+0x8c>)
   225a4:	4b14      	ldr	r3, [pc, #80]	; (225f8 <hif_handle_isr+0x90>)
   225a6:	0018      	movs	r0, r3
   225a8:	4b14      	ldr	r3, [pc, #80]	; (225fc <hif_handle_isr+0x94>)
   225aa:	4798      	blx	r3
   225ac:	1dfb      	adds	r3, r7, #7
   225ae:	2200      	movs	r2, #0
   225b0:	569a      	ldrsb	r2, [r3, r2]
   225b2:	4b13      	ldr	r3, [pc, #76]	; (22600 <hif_handle_isr+0x98>)
   225b4:	0011      	movs	r1, r2
   225b6:	0018      	movs	r0, r3
   225b8:	4b10      	ldr	r3, [pc, #64]	; (225fc <hif_handle_isr+0x94>)
   225ba:	4798      	blx	r3
   225bc:	4b11      	ldr	r3, [pc, #68]	; (22604 <hif_handle_isr+0x9c>)
   225be:	0018      	movs	r0, r3
   225c0:	4b0e      	ldr	r3, [pc, #56]	; (225fc <hif_handle_isr+0x94>)
   225c2:	4798      	blx	r3
			ret = hif_isr();
   225c4:	e7e1      	b.n	2258a <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   225c6:	4b08      	ldr	r3, [pc, #32]	; (225e8 <hif_handle_isr+0x80>)
   225c8:	78db      	ldrb	r3, [r3, #3]
   225ca:	b2db      	uxtb	r3, r3
   225cc:	2b00      	cmp	r3, #0
   225ce:	d004      	beq.n	225da <hif_handle_isr+0x72>
   225d0:	4b05      	ldr	r3, [pc, #20]	; (225e8 <hif_handle_isr+0x80>)
   225d2:	791b      	ldrb	r3, [r3, #4]
   225d4:	b2db      	uxtb	r3, r3
   225d6:	2b00      	cmp	r3, #0
   225d8:	d0d0      	beq.n	2257c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   225da:	1dfb      	adds	r3, r7, #7
   225dc:	781b      	ldrb	r3, [r3, #0]
   225de:	b25b      	sxtb	r3, r3
}
   225e0:	0018      	movs	r0, r3
   225e2:	46bd      	mov	sp, r7
   225e4:	b003      	add	sp, #12
   225e6:	bd90      	pop	{r4, r7, pc}
   225e8:	20005b64 	.word	0x20005b64
   225ec:	00022091 	.word	0x00022091
   225f0:	00000257 	.word	0x00000257
   225f4:	000396a4 	.word	0x000396a4
   225f8:	0003938c 	.word	0x0003938c
   225fc:	0001ed59 	.word	0x0001ed59
   22600:	00039588 	.word	0x00039588
   22604:	00039388 	.word	0x00039388

00022608 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   22608:	b590      	push	{r4, r7, lr}
   2260a:	b087      	sub	sp, #28
   2260c:	af00      	add	r7, sp, #0
   2260e:	60f8      	str	r0, [r7, #12]
   22610:	60b9      	str	r1, [r7, #8]
   22612:	0019      	movs	r1, r3
   22614:	1dbb      	adds	r3, r7, #6
   22616:	801a      	strh	r2, [r3, #0]
   22618:	1d7b      	adds	r3, r7, #5
   2261a:	1c0a      	adds	r2, r1, #0
   2261c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2261e:	2317      	movs	r3, #23
   22620:	18fb      	adds	r3, r7, r3
   22622:	2200      	movs	r2, #0
   22624:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   22626:	68fb      	ldr	r3, [r7, #12]
   22628:	2b00      	cmp	r3, #0
   2262a:	d006      	beq.n	2263a <hif_receive+0x32>
   2262c:	68bb      	ldr	r3, [r7, #8]
   2262e:	2b00      	cmp	r3, #0
   22630:	d003      	beq.n	2263a <hif_receive+0x32>
   22632:	1dbb      	adds	r3, r7, #6
   22634:	881b      	ldrh	r3, [r3, #0]
   22636:	2b00      	cmp	r3, #0
   22638:	d11e      	bne.n	22678 <hif_receive+0x70>
	{
		if(isDone)
   2263a:	1d7b      	adds	r3, r7, #5
   2263c:	781b      	ldrb	r3, [r3, #0]
   2263e:	2b00      	cmp	r3, #0
   22640:	d006      	beq.n	22650 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   22642:	2317      	movs	r3, #23
   22644:	18fc      	adds	r4, r7, r3
   22646:	4b45      	ldr	r3, [pc, #276]	; (2275c <hif_receive+0x154>)
   22648:	4798      	blx	r3
   2264a:	0003      	movs	r3, r0
   2264c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   2264e:	e07c      	b.n	2274a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   22650:	2317      	movs	r3, #23
   22652:	18fb      	adds	r3, r7, r3
   22654:	22f4      	movs	r2, #244	; 0xf4
   22656:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   22658:	239e      	movs	r3, #158	; 0x9e
   2265a:	009a      	lsls	r2, r3, #2
   2265c:	4940      	ldr	r1, [pc, #256]	; (22760 <hif_receive+0x158>)
   2265e:	4b41      	ldr	r3, [pc, #260]	; (22764 <hif_receive+0x15c>)
   22660:	0018      	movs	r0, r3
   22662:	4b41      	ldr	r3, [pc, #260]	; (22768 <hif_receive+0x160>)
   22664:	4798      	blx	r3
   22666:	4b41      	ldr	r3, [pc, #260]	; (2276c <hif_receive+0x164>)
   22668:	0018      	movs	r0, r3
   2266a:	4b3f      	ldr	r3, [pc, #252]	; (22768 <hif_receive+0x160>)
   2266c:	4798      	blx	r3
   2266e:	4b40      	ldr	r3, [pc, #256]	; (22770 <hif_receive+0x168>)
   22670:	0018      	movs	r0, r3
   22672:	4b3d      	ldr	r3, [pc, #244]	; (22768 <hif_receive+0x160>)
   22674:	4798      	blx	r3
		goto ERR1;
   22676:	e068      	b.n	2274a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   22678:	1dbb      	adds	r3, r7, #6
   2267a:	881a      	ldrh	r2, [r3, #0]
   2267c:	4b3d      	ldr	r3, [pc, #244]	; (22774 <hif_receive+0x16c>)
   2267e:	68db      	ldr	r3, [r3, #12]
   22680:	429a      	cmp	r2, r3
   22682:	d917      	bls.n	226b4 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   22684:	2317      	movs	r3, #23
   22686:	18fb      	adds	r3, r7, r3
   22688:	22f4      	movs	r2, #244	; 0xf4
   2268a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   2268c:	23a0      	movs	r3, #160	; 0xa0
   2268e:	009a      	lsls	r2, r3, #2
   22690:	4933      	ldr	r1, [pc, #204]	; (22760 <hif_receive+0x158>)
   22692:	4b34      	ldr	r3, [pc, #208]	; (22764 <hif_receive+0x15c>)
   22694:	0018      	movs	r0, r3
   22696:	4b34      	ldr	r3, [pc, #208]	; (22768 <hif_receive+0x160>)
   22698:	4798      	blx	r3
   2269a:	1dbb      	adds	r3, r7, #6
   2269c:	8819      	ldrh	r1, [r3, #0]
   2269e:	4b35      	ldr	r3, [pc, #212]	; (22774 <hif_receive+0x16c>)
   226a0:	68da      	ldr	r2, [r3, #12]
   226a2:	4b35      	ldr	r3, [pc, #212]	; (22778 <hif_receive+0x170>)
   226a4:	0018      	movs	r0, r3
   226a6:	4b30      	ldr	r3, [pc, #192]	; (22768 <hif_receive+0x160>)
   226a8:	4798      	blx	r3
   226aa:	4b31      	ldr	r3, [pc, #196]	; (22770 <hif_receive+0x168>)
   226ac:	0018      	movs	r0, r3
   226ae:	4b2e      	ldr	r3, [pc, #184]	; (22768 <hif_receive+0x160>)
   226b0:	4798      	blx	r3
		goto ERR1;
   226b2:	e04a      	b.n	2274a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   226b4:	4b2f      	ldr	r3, [pc, #188]	; (22774 <hif_receive+0x16c>)
   226b6:	689a      	ldr	r2, [r3, #8]
   226b8:	68fb      	ldr	r3, [r7, #12]
   226ba:	429a      	cmp	r2, r3
   226bc:	d80a      	bhi.n	226d4 <hif_receive+0xcc>
   226be:	1dbb      	adds	r3, r7, #6
   226c0:	881a      	ldrh	r2, [r3, #0]
   226c2:	68fb      	ldr	r3, [r7, #12]
   226c4:	18d2      	adds	r2, r2, r3
   226c6:	4b2b      	ldr	r3, [pc, #172]	; (22774 <hif_receive+0x16c>)
   226c8:	6899      	ldr	r1, [r3, #8]
   226ca:	4b2a      	ldr	r3, [pc, #168]	; (22774 <hif_receive+0x16c>)
   226cc:	68db      	ldr	r3, [r3, #12]
   226ce:	18cb      	adds	r3, r1, r3
   226d0:	429a      	cmp	r2, r3
   226d2:	d912      	bls.n	226fa <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   226d4:	2317      	movs	r3, #23
   226d6:	18fb      	adds	r3, r7, r3
   226d8:	22f4      	movs	r2, #244	; 0xf4
   226da:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   226dc:	4a27      	ldr	r2, [pc, #156]	; (2277c <hif_receive+0x174>)
   226de:	4920      	ldr	r1, [pc, #128]	; (22760 <hif_receive+0x158>)
   226e0:	4b20      	ldr	r3, [pc, #128]	; (22764 <hif_receive+0x15c>)
   226e2:	0018      	movs	r0, r3
   226e4:	4b20      	ldr	r3, [pc, #128]	; (22768 <hif_receive+0x160>)
   226e6:	4798      	blx	r3
   226e8:	4b25      	ldr	r3, [pc, #148]	; (22780 <hif_receive+0x178>)
   226ea:	0018      	movs	r0, r3
   226ec:	4b1e      	ldr	r3, [pc, #120]	; (22768 <hif_receive+0x160>)
   226ee:	4798      	blx	r3
   226f0:	4b1f      	ldr	r3, [pc, #124]	; (22770 <hif_receive+0x168>)
   226f2:	0018      	movs	r0, r3
   226f4:	4b1c      	ldr	r3, [pc, #112]	; (22768 <hif_receive+0x160>)
   226f6:	4798      	blx	r3
		goto ERR1;
   226f8:	e027      	b.n	2274a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   226fa:	1dbb      	adds	r3, r7, #6
   226fc:	881a      	ldrh	r2, [r3, #0]
   226fe:	2317      	movs	r3, #23
   22700:	18fc      	adds	r4, r7, r3
   22702:	68b9      	ldr	r1, [r7, #8]
   22704:	68fb      	ldr	r3, [r7, #12]
   22706:	0018      	movs	r0, r3
   22708:	4b1e      	ldr	r3, [pc, #120]	; (22784 <hif_receive+0x17c>)
   2270a:	4798      	blx	r3
   2270c:	0003      	movs	r3, r0
   2270e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22710:	2317      	movs	r3, #23
   22712:	18fb      	adds	r3, r7, r3
   22714:	781b      	ldrb	r3, [r3, #0]
   22716:	b25b      	sxtb	r3, r3
   22718:	2b00      	cmp	r3, #0
   2271a:	d115      	bne.n	22748 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   2271c:	4b15      	ldr	r3, [pc, #84]	; (22774 <hif_receive+0x16c>)
   2271e:	689a      	ldr	r2, [r3, #8]
   22720:	4b14      	ldr	r3, [pc, #80]	; (22774 <hif_receive+0x16c>)
   22722:	68db      	ldr	r3, [r3, #12]
   22724:	18d2      	adds	r2, r2, r3
   22726:	1dbb      	adds	r3, r7, #6
   22728:	8819      	ldrh	r1, [r3, #0]
   2272a:	68fb      	ldr	r3, [r7, #12]
   2272c:	18cb      	adds	r3, r1, r3
   2272e:	429a      	cmp	r2, r3
   22730:	d003      	beq.n	2273a <hif_receive+0x132>
   22732:	1d7b      	adds	r3, r7, #5
   22734:	781b      	ldrb	r3, [r3, #0]
   22736:	2b00      	cmp	r3, #0
   22738:	d007      	beq.n	2274a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2273a:	2317      	movs	r3, #23
   2273c:	18fc      	adds	r4, r7, r3
   2273e:	4b07      	ldr	r3, [pc, #28]	; (2275c <hif_receive+0x154>)
   22740:	4798      	blx	r3
   22742:	0003      	movs	r3, r0
   22744:	7023      	strb	r3, [r4, #0]
   22746:	e000      	b.n	2274a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   22748:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2274a:	2317      	movs	r3, #23
   2274c:	18fb      	adds	r3, r7, r3
   2274e:	781b      	ldrb	r3, [r3, #0]
   22750:	b25b      	sxtb	r3, r3
}
   22752:	0018      	movs	r0, r3
   22754:	46bd      	mov	sp, r7
   22756:	b007      	add	sp, #28
   22758:	bd90      	pop	{r4, r7, pc}
   2275a:	46c0      	nop			; (mov r8, r8)
   2275c:	00021b25 	.word	0x00021b25
   22760:	000396b4 	.word	0x000396b4
   22764:	0003938c 	.word	0x0003938c
   22768:	0001ed59 	.word	0x0001ed59
   2276c:	000395b8 	.word	0x000395b8
   22770:	00039388 	.word	0x00039388
   22774:	20005b64 	.word	0x20005b64
   22778:	000395d8 	.word	0x000395d8
   2277c:	00000286 	.word	0x00000286
   22780:	00039620 	.word	0x00039620
   22784:	00023ab9 	.word	0x00023ab9

00022788 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   22788:	b580      	push	{r7, lr}
   2278a:	b084      	sub	sp, #16
   2278c:	af00      	add	r7, sp, #0
   2278e:	0002      	movs	r2, r0
   22790:	6039      	str	r1, [r7, #0]
   22792:	1dfb      	adds	r3, r7, #7
   22794:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22796:	230f      	movs	r3, #15
   22798:	18fb      	adds	r3, r7, r3
   2279a:	2200      	movs	r2, #0
   2279c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   2279e:	1dfb      	adds	r3, r7, #7
   227a0:	781b      	ldrb	r3, [r3, #0]
   227a2:	2b07      	cmp	r3, #7
   227a4:	d820      	bhi.n	227e8 <hif_register_cb+0x60>
   227a6:	009a      	lsls	r2, r3, #2
   227a8:	4b1e      	ldr	r3, [pc, #120]	; (22824 <hif_register_cb+0x9c>)
   227aa:	18d3      	adds	r3, r2, r3
   227ac:	681b      	ldr	r3, [r3, #0]
   227ae:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   227b0:	4b1d      	ldr	r3, [pc, #116]	; (22828 <hif_register_cb+0xa0>)
   227b2:	683a      	ldr	r2, [r7, #0]
   227b4:	615a      	str	r2, [r3, #20]
			break;
   227b6:	e02d      	b.n	22814 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   227b8:	4b1b      	ldr	r3, [pc, #108]	; (22828 <hif_register_cb+0xa0>)
   227ba:	683a      	ldr	r2, [r7, #0]
   227bc:	611a      	str	r2, [r3, #16]
			break;
   227be:	e029      	b.n	22814 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   227c0:	4b19      	ldr	r3, [pc, #100]	; (22828 <hif_register_cb+0xa0>)
   227c2:	683a      	ldr	r2, [r7, #0]
   227c4:	619a      	str	r2, [r3, #24]
			break;
   227c6:	e025      	b.n	22814 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   227c8:	4b17      	ldr	r3, [pc, #92]	; (22828 <hif_register_cb+0xa0>)
   227ca:	683a      	ldr	r2, [r7, #0]
   227cc:	621a      	str	r2, [r3, #32]
			break;
   227ce:	e021      	b.n	22814 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   227d0:	4b15      	ldr	r3, [pc, #84]	; (22828 <hif_register_cb+0xa0>)
   227d2:	683a      	ldr	r2, [r7, #0]
   227d4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   227d6:	e01d      	b.n	22814 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   227d8:	4b13      	ldr	r3, [pc, #76]	; (22828 <hif_register_cb+0xa0>)
   227da:	683a      	ldr	r2, [r7, #0]
   227dc:	61da      	str	r2, [r3, #28]
			break;
   227de:	e019      	b.n	22814 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   227e0:	4b11      	ldr	r3, [pc, #68]	; (22828 <hif_register_cb+0xa0>)
   227e2:	683a      	ldr	r2, [r7, #0]
   227e4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   227e6:	e015      	b.n	22814 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   227e8:	4a10      	ldr	r2, [pc, #64]	; (2282c <hif_register_cb+0xa4>)
   227ea:	4911      	ldr	r1, [pc, #68]	; (22830 <hif_register_cb+0xa8>)
   227ec:	4b11      	ldr	r3, [pc, #68]	; (22834 <hif_register_cb+0xac>)
   227ee:	0018      	movs	r0, r3
   227f0:	4b11      	ldr	r3, [pc, #68]	; (22838 <hif_register_cb+0xb0>)
   227f2:	4798      	blx	r3
   227f4:	1dfb      	adds	r3, r7, #7
   227f6:	781a      	ldrb	r2, [r3, #0]
   227f8:	4b10      	ldr	r3, [pc, #64]	; (2283c <hif_register_cb+0xb4>)
   227fa:	0011      	movs	r1, r2
   227fc:	0018      	movs	r0, r3
   227fe:	4b0e      	ldr	r3, [pc, #56]	; (22838 <hif_register_cb+0xb0>)
   22800:	4798      	blx	r3
   22802:	4b0f      	ldr	r3, [pc, #60]	; (22840 <hif_register_cb+0xb8>)
   22804:	0018      	movs	r0, r3
   22806:	4b0c      	ldr	r3, [pc, #48]	; (22838 <hif_register_cb+0xb0>)
   22808:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2280a:	230f      	movs	r3, #15
   2280c:	18fb      	adds	r3, r7, r3
   2280e:	22f4      	movs	r2, #244	; 0xf4
   22810:	701a      	strb	r2, [r3, #0]
			break;
   22812:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   22814:	230f      	movs	r3, #15
   22816:	18fb      	adds	r3, r7, r3
   22818:	781b      	ldrb	r3, [r3, #0]
   2281a:	b25b      	sxtb	r3, r3
}
   2281c:	0018      	movs	r0, r3
   2281e:	46bd      	mov	sp, r7
   22820:	b004      	add	sp, #16
   22822:	bd80      	pop	{r7, pc}
   22824:	00039670 	.word	0x00039670
   22828:	20005b64 	.word	0x20005b64
   2282c:	000002be 	.word	0x000002be
   22830:	000396c0 	.word	0x000396c0
   22834:	0003938c 	.word	0x0003938c
   22838:	0001ed59 	.word	0x0001ed59
   2283c:	00039664 	.word	0x00039664
   22840:	00039388 	.word	0x00039388

00022844 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   22844:	b590      	push	{r4, r7, lr}
   22846:	b0af      	sub	sp, #188	; 0xbc
   22848:	af02      	add	r7, sp, #8
   2284a:	603a      	str	r2, [r7, #0]
   2284c:	1dfb      	adds	r3, r7, #7
   2284e:	1c02      	adds	r2, r0, #0
   22850:	701a      	strb	r2, [r3, #0]
   22852:	1d3b      	adds	r3, r7, #4
   22854:	1c0a      	adds	r2, r1, #0
   22856:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   22858:	1dfb      	adds	r3, r7, #7
   2285a:	781b      	ldrb	r3, [r3, #0]
   2285c:	2b2c      	cmp	r3, #44	; 0x2c
   2285e:	d116      	bne.n	2288e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   22860:	23a4      	movs	r3, #164	; 0xa4
   22862:	18f9      	adds	r1, r7, r3
   22864:	6838      	ldr	r0, [r7, #0]
   22866:	2300      	movs	r3, #0
   22868:	2204      	movs	r2, #4
   2286a:	4cca      	ldr	r4, [pc, #808]	; (22b94 <m2m_wifi_cb+0x350>)
   2286c:	47a0      	blx	r4
   2286e:	1e03      	subs	r3, r0, #0
   22870:	d000      	beq.n	22874 <m2m_wifi_cb+0x30>
   22872:	e1b4      	b.n	22bde <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   22874:	4bc8      	ldr	r3, [pc, #800]	; (22b98 <m2m_wifi_cb+0x354>)
   22876:	681b      	ldr	r3, [r3, #0]
   22878:	2b00      	cmp	r3, #0
   2287a:	d100      	bne.n	2287e <m2m_wifi_cb+0x3a>
   2287c:	e1af      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   2287e:	4bc6      	ldr	r3, [pc, #792]	; (22b98 <m2m_wifi_cb+0x354>)
   22880:	681b      	ldr	r3, [r3, #0]
   22882:	22a4      	movs	r2, #164	; 0xa4
   22884:	18ba      	adds	r2, r7, r2
   22886:	0011      	movs	r1, r2
   22888:	202c      	movs	r0, #44	; 0x2c
   2288a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   2288c:	e1a7      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   2288e:	1dfb      	adds	r3, r7, #7
   22890:	781b      	ldrb	r3, [r3, #0]
   22892:	2b1b      	cmp	r3, #27
   22894:	d116      	bne.n	228c4 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   22896:	239c      	movs	r3, #156	; 0x9c
   22898:	18f9      	adds	r1, r7, r3
   2289a:	6838      	ldr	r0, [r7, #0]
   2289c:	2300      	movs	r3, #0
   2289e:	2208      	movs	r2, #8
   228a0:	4cbc      	ldr	r4, [pc, #752]	; (22b94 <m2m_wifi_cb+0x350>)
   228a2:	47a0      	blx	r4
   228a4:	1e03      	subs	r3, r0, #0
   228a6:	d000      	beq.n	228aa <m2m_wifi_cb+0x66>
   228a8:	e199      	b.n	22bde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   228aa:	4bbb      	ldr	r3, [pc, #748]	; (22b98 <m2m_wifi_cb+0x354>)
   228ac:	681b      	ldr	r3, [r3, #0]
   228ae:	2b00      	cmp	r3, #0
   228b0:	d100      	bne.n	228b4 <m2m_wifi_cb+0x70>
   228b2:	e194      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   228b4:	4bb8      	ldr	r3, [pc, #736]	; (22b98 <m2m_wifi_cb+0x354>)
   228b6:	681b      	ldr	r3, [r3, #0]
   228b8:	229c      	movs	r2, #156	; 0x9c
   228ba:	18ba      	adds	r2, r7, r2
   228bc:	0011      	movs	r1, r2
   228be:	201b      	movs	r0, #27
   228c0:	4798      	blx	r3
}
   228c2:	e18c      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   228c4:	1dfb      	adds	r3, r7, #7
   228c6:	781b      	ldrb	r3, [r3, #0]
   228c8:	2b06      	cmp	r3, #6
   228ca:	d116      	bne.n	228fa <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   228cc:	230c      	movs	r3, #12
   228ce:	18f9      	adds	r1, r7, r3
   228d0:	6838      	ldr	r0, [r7, #0]
   228d2:	2301      	movs	r3, #1
   228d4:	2230      	movs	r2, #48	; 0x30
   228d6:	4caf      	ldr	r4, [pc, #700]	; (22b94 <m2m_wifi_cb+0x350>)
   228d8:	47a0      	blx	r4
   228da:	1e03      	subs	r3, r0, #0
   228dc:	d000      	beq.n	228e0 <m2m_wifi_cb+0x9c>
   228de:	e17e      	b.n	22bde <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   228e0:	4bad      	ldr	r3, [pc, #692]	; (22b98 <m2m_wifi_cb+0x354>)
   228e2:	681b      	ldr	r3, [r3, #0]
   228e4:	2b00      	cmp	r3, #0
   228e6:	d100      	bne.n	228ea <m2m_wifi_cb+0xa6>
   228e8:	e179      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   228ea:	4bab      	ldr	r3, [pc, #684]	; (22b98 <m2m_wifi_cb+0x354>)
   228ec:	681b      	ldr	r3, [r3, #0]
   228ee:	220c      	movs	r2, #12
   228f0:	18ba      	adds	r2, r7, r2
   228f2:	0011      	movs	r1, r2
   228f4:	2006      	movs	r0, #6
   228f6:	4798      	blx	r3
}
   228f8:	e171      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   228fa:	1dfb      	adds	r3, r7, #7
   228fc:	781b      	ldrb	r3, [r3, #0]
   228fe:	2b0e      	cmp	r3, #14
   22900:	d100      	bne.n	22904 <m2m_wifi_cb+0xc0>
   22902:	e16c      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   22904:	1dfb      	adds	r3, r7, #7
   22906:	781b      	ldrb	r3, [r3, #0]
   22908:	2b32      	cmp	r3, #50	; 0x32
   2290a:	d116      	bne.n	2293a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   2290c:	2384      	movs	r3, #132	; 0x84
   2290e:	18f9      	adds	r1, r7, r3
   22910:	6838      	ldr	r0, [r7, #0]
   22912:	2300      	movs	r3, #0
   22914:	2218      	movs	r2, #24
   22916:	4c9f      	ldr	r4, [pc, #636]	; (22b94 <m2m_wifi_cb+0x350>)
   22918:	47a0      	blx	r4
   2291a:	1e03      	subs	r3, r0, #0
   2291c:	d000      	beq.n	22920 <m2m_wifi_cb+0xdc>
   2291e:	e15e      	b.n	22bde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22920:	4b9d      	ldr	r3, [pc, #628]	; (22b98 <m2m_wifi_cb+0x354>)
   22922:	681b      	ldr	r3, [r3, #0]
   22924:	2b00      	cmp	r3, #0
   22926:	d100      	bne.n	2292a <m2m_wifi_cb+0xe6>
   22928:	e159      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2292a:	4b9b      	ldr	r3, [pc, #620]	; (22b98 <m2m_wifi_cb+0x354>)
   2292c:	681b      	ldr	r3, [r3, #0]
   2292e:	2284      	movs	r2, #132	; 0x84
   22930:	18ba      	adds	r2, r7, r2
   22932:	0011      	movs	r1, r2
   22934:	2032      	movs	r0, #50	; 0x32
   22936:	4798      	blx	r3
}
   22938:	e151      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2293a:	1dfb      	adds	r3, r7, #7
   2293c:	781b      	ldrb	r3, [r3, #0]
   2293e:	2b2f      	cmp	r3, #47	; 0x2f
   22940:	d11d      	bne.n	2297e <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   22942:	230c      	movs	r3, #12
   22944:	18fb      	adds	r3, r7, r3
   22946:	2264      	movs	r2, #100	; 0x64
   22948:	2100      	movs	r1, #0
   2294a:	0018      	movs	r0, r3
   2294c:	4b93      	ldr	r3, [pc, #588]	; (22b9c <m2m_wifi_cb+0x358>)
   2294e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   22950:	230c      	movs	r3, #12
   22952:	18f9      	adds	r1, r7, r3
   22954:	6838      	ldr	r0, [r7, #0]
   22956:	2300      	movs	r3, #0
   22958:	2264      	movs	r2, #100	; 0x64
   2295a:	4c8e      	ldr	r4, [pc, #568]	; (22b94 <m2m_wifi_cb+0x350>)
   2295c:	47a0      	blx	r4
   2295e:	1e03      	subs	r3, r0, #0
   22960:	d000      	beq.n	22964 <m2m_wifi_cb+0x120>
   22962:	e13c      	b.n	22bde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22964:	4b8c      	ldr	r3, [pc, #560]	; (22b98 <m2m_wifi_cb+0x354>)
   22966:	681b      	ldr	r3, [r3, #0]
   22968:	2b00      	cmp	r3, #0
   2296a:	d100      	bne.n	2296e <m2m_wifi_cb+0x12a>
   2296c:	e137      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   2296e:	4b8a      	ldr	r3, [pc, #552]	; (22b98 <m2m_wifi_cb+0x354>)
   22970:	681b      	ldr	r3, [r3, #0]
   22972:	220c      	movs	r2, #12
   22974:	18ba      	adds	r2, r7, r2
   22976:	0011      	movs	r1, r2
   22978:	202f      	movs	r0, #47	; 0x2f
   2297a:	4798      	blx	r3
}
   2297c:	e12f      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   2297e:	1dfb      	adds	r3, r7, #7
   22980:	781b      	ldrb	r3, [r3, #0]
   22982:	2b34      	cmp	r3, #52	; 0x34
   22984:	d137      	bne.n	229f6 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   22986:	2380      	movs	r3, #128	; 0x80
   22988:	18f9      	adds	r1, r7, r3
   2298a:	6838      	ldr	r0, [r7, #0]
   2298c:	2300      	movs	r3, #0
   2298e:	2204      	movs	r2, #4
   22990:	4c80      	ldr	r4, [pc, #512]	; (22b94 <m2m_wifi_cb+0x350>)
   22992:	47a0      	blx	r4
   22994:	1e03      	subs	r3, r0, #0
   22996:	d000      	beq.n	2299a <m2m_wifi_cb+0x156>
   22998:	e121      	b.n	22bde <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2299a:	4b81      	ldr	r3, [pc, #516]	; (22ba0 <m2m_wifi_cb+0x35c>)
   2299c:	0018      	movs	r0, r3
   2299e:	4b81      	ldr	r3, [pc, #516]	; (22ba4 <m2m_wifi_cb+0x360>)
   229a0:	4798      	blx	r3
   229a2:	2380      	movs	r3, #128	; 0x80
   229a4:	18fb      	adds	r3, r7, r3
   229a6:	681b      	ldr	r3, [r3, #0]
   229a8:	0e1b      	lsrs	r3, r3, #24
   229aa:	b2db      	uxtb	r3, r3
   229ac:	0019      	movs	r1, r3
   229ae:	2380      	movs	r3, #128	; 0x80
   229b0:	18fb      	adds	r3, r7, r3
   229b2:	681b      	ldr	r3, [r3, #0]
   229b4:	0c1b      	lsrs	r3, r3, #16
   229b6:	b2db      	uxtb	r3, r3
   229b8:	001a      	movs	r2, r3
   229ba:	2380      	movs	r3, #128	; 0x80
   229bc:	18fb      	adds	r3, r7, r3
   229be:	681b      	ldr	r3, [r3, #0]
   229c0:	0a1b      	lsrs	r3, r3, #8
   229c2:	b2db      	uxtb	r3, r3
   229c4:	001c      	movs	r4, r3
   229c6:	2380      	movs	r3, #128	; 0x80
   229c8:	18fb      	adds	r3, r7, r3
   229ca:	681b      	ldr	r3, [r3, #0]
   229cc:	b2db      	uxtb	r3, r3
   229ce:	4876      	ldr	r0, [pc, #472]	; (22ba8 <m2m_wifi_cb+0x364>)
   229d0:	9300      	str	r3, [sp, #0]
   229d2:	0023      	movs	r3, r4
   229d4:	4c73      	ldr	r4, [pc, #460]	; (22ba4 <m2m_wifi_cb+0x360>)
   229d6:	47a0      	blx	r4
   229d8:	4b74      	ldr	r3, [pc, #464]	; (22bac <m2m_wifi_cb+0x368>)
   229da:	0018      	movs	r0, r3
   229dc:	4b71      	ldr	r3, [pc, #452]	; (22ba4 <m2m_wifi_cb+0x360>)
   229de:	4798      	blx	r3
			if (gpfAppWifiCb)
   229e0:	4b6d      	ldr	r3, [pc, #436]	; (22b98 <m2m_wifi_cb+0x354>)
   229e2:	681b      	ldr	r3, [r3, #0]
   229e4:	2b00      	cmp	r3, #0
   229e6:	d100      	bne.n	229ea <m2m_wifi_cb+0x1a6>
   229e8:	e0f9      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   229ea:	4b6b      	ldr	r3, [pc, #428]	; (22b98 <m2m_wifi_cb+0x354>)
   229ec:	681b      	ldr	r3, [r3, #0]
   229ee:	2100      	movs	r1, #0
   229f0:	2034      	movs	r0, #52	; 0x34
   229f2:	4798      	blx	r3
}
   229f4:	e0f3      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   229f6:	1dfb      	adds	r3, r7, #7
   229f8:	781b      	ldrb	r3, [r3, #0]
   229fa:	2b11      	cmp	r3, #17
   229fc:	d11e      	bne.n	22a3c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   229fe:	4b6c      	ldr	r3, [pc, #432]	; (22bb0 <m2m_wifi_cb+0x36c>)
   22a00:	2200      	movs	r2, #0
   22a02:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   22a04:	237c      	movs	r3, #124	; 0x7c
   22a06:	18f9      	adds	r1, r7, r3
   22a08:	6838      	ldr	r0, [r7, #0]
   22a0a:	2300      	movs	r3, #0
   22a0c:	2204      	movs	r2, #4
   22a0e:	4c61      	ldr	r4, [pc, #388]	; (22b94 <m2m_wifi_cb+0x350>)
   22a10:	47a0      	blx	r4
   22a12:	1e03      	subs	r3, r0, #0
   22a14:	d000      	beq.n	22a18 <m2m_wifi_cb+0x1d4>
   22a16:	e0e2      	b.n	22bde <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   22a18:	237c      	movs	r3, #124	; 0x7c
   22a1a:	18fb      	adds	r3, r7, r3
   22a1c:	781a      	ldrb	r2, [r3, #0]
   22a1e:	4b65      	ldr	r3, [pc, #404]	; (22bb4 <m2m_wifi_cb+0x370>)
   22a20:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   22a22:	4b5d      	ldr	r3, [pc, #372]	; (22b98 <m2m_wifi_cb+0x354>)
   22a24:	681b      	ldr	r3, [r3, #0]
   22a26:	2b00      	cmp	r3, #0
   22a28:	d100      	bne.n	22a2c <m2m_wifi_cb+0x1e8>
   22a2a:	e0d8      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   22a2c:	4b5a      	ldr	r3, [pc, #360]	; (22b98 <m2m_wifi_cb+0x354>)
   22a2e:	681b      	ldr	r3, [r3, #0]
   22a30:	227c      	movs	r2, #124	; 0x7c
   22a32:	18ba      	adds	r2, r7, r2
   22a34:	0011      	movs	r1, r2
   22a36:	2011      	movs	r0, #17
   22a38:	4798      	blx	r3
}
   22a3a:	e0d0      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   22a3c:	1dfb      	adds	r3, r7, #7
   22a3e:	781b      	ldrb	r3, [r3, #0]
   22a40:	2b13      	cmp	r3, #19
   22a42:	d116      	bne.n	22a72 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   22a44:	230c      	movs	r3, #12
   22a46:	18f9      	adds	r1, r7, r3
   22a48:	6838      	ldr	r0, [r7, #0]
   22a4a:	2300      	movs	r3, #0
   22a4c:	222c      	movs	r2, #44	; 0x2c
   22a4e:	4c51      	ldr	r4, [pc, #324]	; (22b94 <m2m_wifi_cb+0x350>)
   22a50:	47a0      	blx	r4
   22a52:	1e03      	subs	r3, r0, #0
   22a54:	d000      	beq.n	22a58 <m2m_wifi_cb+0x214>
   22a56:	e0c2      	b.n	22bde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22a58:	4b4f      	ldr	r3, [pc, #316]	; (22b98 <m2m_wifi_cb+0x354>)
   22a5a:	681b      	ldr	r3, [r3, #0]
   22a5c:	2b00      	cmp	r3, #0
   22a5e:	d100      	bne.n	22a62 <m2m_wifi_cb+0x21e>
   22a60:	e0bd      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   22a62:	4b4d      	ldr	r3, [pc, #308]	; (22b98 <m2m_wifi_cb+0x354>)
   22a64:	681b      	ldr	r3, [r3, #0]
   22a66:	220c      	movs	r2, #12
   22a68:	18ba      	adds	r2, r7, r2
   22a6a:	0011      	movs	r1, r2
   22a6c:	2013      	movs	r0, #19
   22a6e:	4798      	blx	r3
}
   22a70:	e0b5      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   22a72:	1dfb      	adds	r3, r7, #7
   22a74:	781b      	ldrb	r3, [r3, #0]
   22a76:	2b04      	cmp	r3, #4
   22a78:	d116      	bne.n	22aa8 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22a7a:	23a8      	movs	r3, #168	; 0xa8
   22a7c:	18f9      	adds	r1, r7, r3
   22a7e:	6838      	ldr	r0, [r7, #0]
   22a80:	2300      	movs	r3, #0
   22a82:	2204      	movs	r2, #4
   22a84:	4c43      	ldr	r4, [pc, #268]	; (22b94 <m2m_wifi_cb+0x350>)
   22a86:	47a0      	blx	r4
   22a88:	1e03      	subs	r3, r0, #0
   22a8a:	d000      	beq.n	22a8e <m2m_wifi_cb+0x24a>
   22a8c:	e0a7      	b.n	22bde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22a8e:	4b42      	ldr	r3, [pc, #264]	; (22b98 <m2m_wifi_cb+0x354>)
   22a90:	681b      	ldr	r3, [r3, #0]
   22a92:	2b00      	cmp	r3, #0
   22a94:	d100      	bne.n	22a98 <m2m_wifi_cb+0x254>
   22a96:	e0a2      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   22a98:	4b3f      	ldr	r3, [pc, #252]	; (22b98 <m2m_wifi_cb+0x354>)
   22a9a:	681b      	ldr	r3, [r3, #0]
   22a9c:	22a8      	movs	r2, #168	; 0xa8
   22a9e:	18ba      	adds	r2, r7, r2
   22aa0:	0011      	movs	r1, r2
   22aa2:	2004      	movs	r0, #4
   22aa4:	4798      	blx	r3
}
   22aa6:	e09a      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   22aa8:	1dfb      	adds	r3, r7, #7
   22aaa:	781b      	ldrb	r3, [r3, #0]
   22aac:	2b65      	cmp	r3, #101	; 0x65
   22aae:	d116      	bne.n	22ade <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22ab0:	23a8      	movs	r3, #168	; 0xa8
   22ab2:	18f9      	adds	r1, r7, r3
   22ab4:	6838      	ldr	r0, [r7, #0]
   22ab6:	2300      	movs	r3, #0
   22ab8:	2204      	movs	r2, #4
   22aba:	4c36      	ldr	r4, [pc, #216]	; (22b94 <m2m_wifi_cb+0x350>)
   22abc:	47a0      	blx	r4
   22abe:	1e03      	subs	r3, r0, #0
   22ac0:	d000      	beq.n	22ac4 <m2m_wifi_cb+0x280>
   22ac2:	e08c      	b.n	22bde <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22ac4:	4b34      	ldr	r3, [pc, #208]	; (22b98 <m2m_wifi_cb+0x354>)
   22ac6:	681b      	ldr	r3, [r3, #0]
   22ac8:	2b00      	cmp	r3, #0
   22aca:	d100      	bne.n	22ace <m2m_wifi_cb+0x28a>
   22acc:	e087      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   22ace:	4b32      	ldr	r3, [pc, #200]	; (22b98 <m2m_wifi_cb+0x354>)
   22ad0:	681b      	ldr	r3, [r3, #0]
   22ad2:	22a8      	movs	r2, #168	; 0xa8
   22ad4:	18ba      	adds	r2, r7, r2
   22ad6:	0011      	movs	r1, r2
   22ad8:	2065      	movs	r0, #101	; 0x65
   22ada:	4798      	blx	r3
}
   22adc:	e07f      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   22ade:	1dfb      	adds	r3, r7, #7
   22ae0:	781b      	ldrb	r3, [r3, #0]
   22ae2:	2b09      	cmp	r3, #9
   22ae4:	d116      	bne.n	22b14 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   22ae6:	230c      	movs	r3, #12
   22ae8:	18f9      	adds	r1, r7, r3
   22aea:	6838      	ldr	r0, [r7, #0]
   22aec:	2301      	movs	r3, #1
   22aee:	2264      	movs	r2, #100	; 0x64
   22af0:	4c28      	ldr	r4, [pc, #160]	; (22b94 <m2m_wifi_cb+0x350>)
   22af2:	47a0      	blx	r4
   22af4:	1e03      	subs	r3, r0, #0
   22af6:	d000      	beq.n	22afa <m2m_wifi_cb+0x2b6>
   22af8:	e071      	b.n	22bde <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22afa:	4b27      	ldr	r3, [pc, #156]	; (22b98 <m2m_wifi_cb+0x354>)
   22afc:	681b      	ldr	r3, [r3, #0]
   22afe:	2b00      	cmp	r3, #0
   22b00:	d100      	bne.n	22b04 <m2m_wifi_cb+0x2c0>
   22b02:	e06c      	b.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   22b04:	4b24      	ldr	r3, [pc, #144]	; (22b98 <m2m_wifi_cb+0x354>)
   22b06:	681b      	ldr	r3, [r3, #0]
   22b08:	220c      	movs	r2, #12
   22b0a:	18ba      	adds	r2, r7, r2
   22b0c:	0011      	movs	r1, r2
   22b0e:	2009      	movs	r0, #9
   22b10:	4798      	blx	r3
}
   22b12:	e064      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22b14:	1dfb      	adds	r3, r7, #7
   22b16:	781b      	ldrb	r3, [r3, #0]
   22b18:	2b2a      	cmp	r3, #42	; 0x2a
   22b1a:	d114      	bne.n	22b46 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   22b1c:	2378      	movs	r3, #120	; 0x78
   22b1e:	18f9      	adds	r1, r7, r3
   22b20:	6838      	ldr	r0, [r7, #0]
   22b22:	2301      	movs	r3, #1
   22b24:	2204      	movs	r2, #4
   22b26:	4c1b      	ldr	r4, [pc, #108]	; (22b94 <m2m_wifi_cb+0x350>)
   22b28:	47a0      	blx	r4
   22b2a:	1e03      	subs	r3, r0, #0
   22b2c:	d157      	bne.n	22bde <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22b2e:	4b1a      	ldr	r3, [pc, #104]	; (22b98 <m2m_wifi_cb+0x354>)
   22b30:	681b      	ldr	r3, [r3, #0]
   22b32:	2b00      	cmp	r3, #0
   22b34:	d053      	beq.n	22bde <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   22b36:	4b18      	ldr	r3, [pc, #96]	; (22b98 <m2m_wifi_cb+0x354>)
   22b38:	681b      	ldr	r3, [r3, #0]
   22b3a:	2278      	movs	r2, #120	; 0x78
   22b3c:	18ba      	adds	r2, r7, r2
   22b3e:	0011      	movs	r1, r2
   22b40:	202a      	movs	r0, #42	; 0x2a
   22b42:	4798      	blx	r3
}
   22b44:	e04b      	b.n	22bde <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   22b46:	1dfb      	adds	r3, r7, #7
   22b48:	781b      	ldrb	r3, [r3, #0]
   22b4a:	2b20      	cmp	r3, #32
   22b4c:	d134      	bne.n	22bb8 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   22b4e:	2370      	movs	r3, #112	; 0x70
   22b50:	18f9      	adds	r1, r7, r3
   22b52:	6838      	ldr	r0, [r7, #0]
   22b54:	2300      	movs	r3, #0
   22b56:	2208      	movs	r2, #8
   22b58:	4c0e      	ldr	r4, [pc, #56]	; (22b94 <m2m_wifi_cb+0x350>)
   22b5a:	47a0      	blx	r4
   22b5c:	1e03      	subs	r3, r0, #0
   22b5e:	d13e      	bne.n	22bde <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   22b60:	683b      	ldr	r3, [r7, #0]
   22b62:	3308      	adds	r3, #8
   22b64:	0018      	movs	r0, r3
   22b66:	2370      	movs	r3, #112	; 0x70
   22b68:	18fb      	adds	r3, r7, r3
   22b6a:	6819      	ldr	r1, [r3, #0]
   22b6c:	2370      	movs	r3, #112	; 0x70
   22b6e:	18fb      	adds	r3, r7, r3
   22b70:	889a      	ldrh	r2, [r3, #4]
   22b72:	2301      	movs	r3, #1
   22b74:	4c07      	ldr	r4, [pc, #28]	; (22b94 <m2m_wifi_cb+0x350>)
   22b76:	47a0      	blx	r4
   22b78:	1e03      	subs	r3, r0, #0
   22b7a:	d130      	bne.n	22bde <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   22b7c:	4b06      	ldr	r3, [pc, #24]	; (22b98 <m2m_wifi_cb+0x354>)
   22b7e:	681b      	ldr	r3, [r3, #0]
   22b80:	2b00      	cmp	r3, #0
   22b82:	d02c      	beq.n	22bde <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22b84:	4b04      	ldr	r3, [pc, #16]	; (22b98 <m2m_wifi_cb+0x354>)
   22b86:	681b      	ldr	r3, [r3, #0]
   22b88:	2270      	movs	r2, #112	; 0x70
   22b8a:	18ba      	adds	r2, r7, r2
   22b8c:	0011      	movs	r1, r2
   22b8e:	2020      	movs	r0, #32
   22b90:	4798      	blx	r3
}
   22b92:	e024      	b.n	22bde <m2m_wifi_cb+0x39a>
   22b94:	00022609 	.word	0x00022609
   22b98:	200042a8 	.word	0x200042a8
   22b9c:	00021a8d 	.word	0x00021a8d
   22ba0:	000396d0 	.word	0x000396d0
   22ba4:	0001ed59 	.word	0x0001ed59
   22ba8:	000396dc 	.word	0x000396dc
   22bac:	000396fc 	.word	0x000396fc
   22bb0:	200042a5 	.word	0x200042a5
   22bb4:	200042a4 	.word	0x200042a4
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   22bb8:	2324      	movs	r3, #36	; 0x24
   22bba:	33ff      	adds	r3, #255	; 0xff
   22bbc:	001a      	movs	r2, r3
   22bbe:	490a      	ldr	r1, [pc, #40]	; (22be8 <m2m_wifi_cb+0x3a4>)
   22bc0:	4b0a      	ldr	r3, [pc, #40]	; (22bec <m2m_wifi_cb+0x3a8>)
   22bc2:	0018      	movs	r0, r3
   22bc4:	4b0a      	ldr	r3, [pc, #40]	; (22bf0 <m2m_wifi_cb+0x3ac>)
   22bc6:	4798      	blx	r3
   22bc8:	1dfb      	adds	r3, r7, #7
   22bca:	781a      	ldrb	r2, [r3, #0]
   22bcc:	4b09      	ldr	r3, [pc, #36]	; (22bf4 <m2m_wifi_cb+0x3b0>)
   22bce:	0011      	movs	r1, r2
   22bd0:	0018      	movs	r0, r3
   22bd2:	4b07      	ldr	r3, [pc, #28]	; (22bf0 <m2m_wifi_cb+0x3ac>)
   22bd4:	4798      	blx	r3
   22bd6:	4b08      	ldr	r3, [pc, #32]	; (22bf8 <m2m_wifi_cb+0x3b4>)
   22bd8:	0018      	movs	r0, r3
   22bda:	4b05      	ldr	r3, [pc, #20]	; (22bf0 <m2m_wifi_cb+0x3ac>)
   22bdc:	4798      	blx	r3
}
   22bde:	46c0      	nop			; (mov r8, r8)
   22be0:	46bd      	mov	sp, r7
   22be2:	b02d      	add	sp, #180	; 0xb4
   22be4:	bd90      	pop	{r4, r7, pc}
   22be6:	46c0      	nop			; (mov r8, r8)
   22be8:	000399f0 	.word	0x000399f0
   22bec:	00039700 	.word	0x00039700
   22bf0:	0001ed59 	.word	0x0001ed59
   22bf4:	00039714 	.word	0x00039714
   22bf8:	000396fc 	.word	0x000396fc

00022bfc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22bfc:	b590      	push	{r4, r7, lr}
   22bfe:	b08f      	sub	sp, #60	; 0x3c
   22c00:	af00      	add	r7, sp, #0
   22c02:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22c04:	2337      	movs	r3, #55	; 0x37
   22c06:	18fb      	adds	r3, r7, r3
   22c08:	2200      	movs	r2, #0
   22c0a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22c0c:	230b      	movs	r3, #11
   22c0e:	18fb      	adds	r3, r7, r3
   22c10:	2201      	movs	r2, #1
   22c12:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22c14:	687b      	ldr	r3, [r7, #4]
   22c16:	2b00      	cmp	r3, #0
   22c18:	d104      	bne.n	22c24 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   22c1a:	2337      	movs	r3, #55	; 0x37
   22c1c:	18fb      	adds	r3, r7, r3
   22c1e:	22f4      	movs	r2, #244	; 0xf4
   22c20:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22c22:	e052      	b.n	22cca <m2m_wifi_init+0xce>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22c24:	687b      	ldr	r3, [r7, #4]
   22c26:	681a      	ldr	r2, [r3, #0]
   22c28:	4b2c      	ldr	r3, [pc, #176]	; (22cdc <m2m_wifi_init+0xe0>)
   22c2a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22c2c:	4b2c      	ldr	r3, [pc, #176]	; (22ce0 <m2m_wifi_init+0xe4>)
   22c2e:	2200      	movs	r2, #0
   22c30:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22c32:	2337      	movs	r3, #55	; 0x37
   22c34:	18fc      	adds	r4, r7, r3
   22c36:	230b      	movs	r3, #11
   22c38:	18fb      	adds	r3, r7, r3
   22c3a:	0018      	movs	r0, r3
   22c3c:	4b29      	ldr	r3, [pc, #164]	; (22ce4 <m2m_wifi_init+0xe8>)
   22c3e:	4798      	blx	r3
   22c40:	0003      	movs	r3, r0
   22c42:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22c44:	2337      	movs	r3, #55	; 0x37
   22c46:	18fb      	adds	r3, r7, r3
   22c48:	781b      	ldrb	r3, [r3, #0]
   22c4a:	b25b      	sxtb	r3, r3
   22c4c:	2b00      	cmp	r3, #0
   22c4e:	d139      	bne.n	22cc4 <m2m_wifi_init+0xc8>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22c50:	2337      	movs	r3, #55	; 0x37
   22c52:	18fc      	adds	r4, r7, r3
   22c54:	2000      	movs	r0, #0
   22c56:	4b24      	ldr	r3, [pc, #144]	; (22ce8 <m2m_wifi_init+0xec>)
   22c58:	4798      	blx	r3
   22c5a:	0003      	movs	r3, r0
   22c5c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22c5e:	2337      	movs	r3, #55	; 0x37
   22c60:	18fb      	adds	r3, r7, r3
   22c62:	781b      	ldrb	r3, [r3, #0]
   22c64:	b25b      	sxtb	r3, r3
   22c66:	2b00      	cmp	r3, #0
   22c68:	d127      	bne.n	22cba <m2m_wifi_init+0xbe>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22c6a:	4b20      	ldr	r3, [pc, #128]	; (22cec <m2m_wifi_init+0xf0>)
   22c6c:	0019      	movs	r1, r3
   22c6e:	2001      	movs	r0, #1
   22c70:	4b1f      	ldr	r3, [pc, #124]	; (22cf0 <m2m_wifi_init+0xf4>)
   22c72:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   22c74:	2337      	movs	r3, #55	; 0x37
   22c76:	18fc      	adds	r4, r7, r3
   22c78:	230c      	movs	r3, #12
   22c7a:	18fb      	adds	r3, r7, r3
   22c7c:	0018      	movs	r0, r3
   22c7e:	4b1d      	ldr	r3, [pc, #116]	; (22cf4 <m2m_wifi_init+0xf8>)
   22c80:	4798      	blx	r3
   22c82:	0003      	movs	r3, r0
   22c84:	7023      	strb	r3, [r4, #0]
	//M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
	//M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
	//M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
	//M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
	//M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
	SerialConsoleWriteString("\r\n");
   22c86:	4b1c      	ldr	r3, [pc, #112]	; (22cf8 <m2m_wifi_init+0xfc>)
   22c88:	0018      	movs	r0, r3
   22c8a:	4b1c      	ldr	r3, [pc, #112]	; (22cfc <m2m_wifi_init+0x100>)
   22c8c:	4798      	blx	r3
	
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22c8e:	2337      	movs	r3, #55	; 0x37
   22c90:	18fb      	adds	r3, r7, r3
   22c92:	781b      	ldrb	r3, [r3, #0]
   22c94:	b25b      	sxtb	r3, r3
   22c96:	330d      	adds	r3, #13
   22c98:	d116      	bne.n	22cc8 <m2m_wifi_init+0xcc>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   22c9a:	23f5      	movs	r3, #245	; 0xf5
   22c9c:	005a      	lsls	r2, r3, #1
   22c9e:	4918      	ldr	r1, [pc, #96]	; (22d00 <m2m_wifi_init+0x104>)
   22ca0:	4b18      	ldr	r3, [pc, #96]	; (22d04 <m2m_wifi_init+0x108>)
   22ca2:	0018      	movs	r0, r3
   22ca4:	4b18      	ldr	r3, [pc, #96]	; (22d08 <m2m_wifi_init+0x10c>)
   22ca6:	4798      	blx	r3
   22ca8:	4b18      	ldr	r3, [pc, #96]	; (22d0c <m2m_wifi_init+0x110>)
   22caa:	0018      	movs	r0, r3
   22cac:	4b16      	ldr	r3, [pc, #88]	; (22d08 <m2m_wifi_init+0x10c>)
   22cae:	4798      	blx	r3
   22cb0:	4b17      	ldr	r3, [pc, #92]	; (22d10 <m2m_wifi_init+0x114>)
   22cb2:	0018      	movs	r0, r3
   22cb4:	4b14      	ldr	r3, [pc, #80]	; (22d08 <m2m_wifi_init+0x10c>)
   22cb6:	4798      	blx	r3
	}

	goto _EXIT0;
   22cb8:	e006      	b.n	22cc8 <m2m_wifi_init+0xcc>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22cba:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22cbc:	2000      	movs	r0, #0
   22cbe:	4b15      	ldr	r3, [pc, #84]	; (22d14 <m2m_wifi_init+0x118>)
   22cc0:	4798      	blx	r3
   22cc2:	e002      	b.n	22cca <m2m_wifi_init+0xce>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22cc4:	46c0      	nop			; (mov r8, r8)
   22cc6:	e000      	b.n	22cca <m2m_wifi_init+0xce>
	goto _EXIT0;
   22cc8:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22cca:	2337      	movs	r3, #55	; 0x37
   22ccc:	18fb      	adds	r3, r7, r3
   22cce:	781b      	ldrb	r3, [r3, #0]
   22cd0:	b25b      	sxtb	r3, r3
}
   22cd2:	0018      	movs	r0, r3
   22cd4:	46bd      	mov	sp, r7
   22cd6:	b00f      	add	sp, #60	; 0x3c
   22cd8:	bd90      	pop	{r4, r7, pc}
   22cda:	46c0      	nop			; (mov r8, r8)
   22cdc:	200042a8 	.word	0x200042a8
   22ce0:	200042a5 	.word	0x200042a5
   22ce4:	00023e49 	.word	0x00023e49
   22ce8:	00021ca5 	.word	0x00021ca5
   22cec:	00022845 	.word	0x00022845
   22cf0:	00022789 	.word	0x00022789
   22cf4:	00023c7d 	.word	0x00023c7d
   22cf8:	00039874 	.word	0x00039874
   22cfc:	0001ec15 	.word	0x0001ec15
   22d00:	000399fc 	.word	0x000399fc
   22d04:	00039700 	.word	0x00039700
   22d08:	0001ed59 	.word	0x0001ed59
   22d0c:	00039878 	.word	0x00039878
   22d10:	000396fc 	.word	0x000396fc
   22d14:	00023fd9 	.word	0x00023fd9

00022d18 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22d18:	b580      	push	{r7, lr}
   22d1a:	b082      	sub	sp, #8
   22d1c:	af00      	add	r7, sp, #0
   22d1e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22d20:	4b03      	ldr	r3, [pc, #12]	; (22d30 <m2m_wifi_handle_events+0x18>)
   22d22:	4798      	blx	r3
   22d24:	0003      	movs	r3, r0
}
   22d26:	0018      	movs	r0, r3
   22d28:	46bd      	mov	sp, r7
   22d2a:	b002      	add	sp, #8
   22d2c:	bd80      	pop	{r7, pc}
   22d2e:	46c0      	nop			; (mov r8, r8)
   22d30:	00022569 	.word	0x00022569

00022d34 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22d34:	b590      	push	{r4, r7, lr}
   22d36:	b087      	sub	sp, #28
   22d38:	af02      	add	r7, sp, #8
   22d3a:	60f8      	str	r0, [r7, #12]
   22d3c:	0008      	movs	r0, r1
   22d3e:	0011      	movs	r1, r2
   22d40:	607b      	str	r3, [r7, #4]
   22d42:	230b      	movs	r3, #11
   22d44:	18fb      	adds	r3, r7, r3
   22d46:	1c02      	adds	r2, r0, #0
   22d48:	701a      	strb	r2, [r3, #0]
   22d4a:	230a      	movs	r3, #10
   22d4c:	18fb      	adds	r3, r7, r3
   22d4e:	1c0a      	adds	r2, r1, #0
   22d50:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22d52:	687c      	ldr	r4, [r7, #4]
   22d54:	230a      	movs	r3, #10
   22d56:	18fb      	adds	r3, r7, r3
   22d58:	781a      	ldrb	r2, [r3, #0]
   22d5a:	230b      	movs	r3, #11
   22d5c:	18fb      	adds	r3, r7, r3
   22d5e:	7819      	ldrb	r1, [r3, #0]
   22d60:	68f8      	ldr	r0, [r7, #12]
   22d62:	2300      	movs	r3, #0
   22d64:	9301      	str	r3, [sp, #4]
   22d66:	2320      	movs	r3, #32
   22d68:	18fb      	adds	r3, r7, r3
   22d6a:	881b      	ldrh	r3, [r3, #0]
   22d6c:	9300      	str	r3, [sp, #0]
   22d6e:	0023      	movs	r3, r4
   22d70:	4c03      	ldr	r4, [pc, #12]	; (22d80 <m2m_wifi_connect+0x4c>)
   22d72:	47a0      	blx	r4
   22d74:	0003      	movs	r3, r0
}
   22d76:	0018      	movs	r0, r3
   22d78:	46bd      	mov	sp, r7
   22d7a:	b005      	add	sp, #20
   22d7c:	bd90      	pop	{r4, r7, pc}
   22d7e:	46c0      	nop			; (mov r8, r8)
   22d80:	00022d85 	.word	0x00022d85

00022d84 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22d84:	b5b0      	push	{r4, r5, r7, lr}
   22d86:	b0aa      	sub	sp, #168	; 0xa8
   22d88:	af04      	add	r7, sp, #16
   22d8a:	60f8      	str	r0, [r7, #12]
   22d8c:	0008      	movs	r0, r1
   22d8e:	0011      	movs	r1, r2
   22d90:	607b      	str	r3, [r7, #4]
   22d92:	230b      	movs	r3, #11
   22d94:	18fb      	adds	r3, r7, r3
   22d96:	1c02      	adds	r2, r0, #0
   22d98:	701a      	strb	r2, [r3, #0]
   22d9a:	230a      	movs	r3, #10
   22d9c:	18fb      	adds	r3, r7, r3
   22d9e:	1c0a      	adds	r2, r1, #0
   22da0:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22da2:	2397      	movs	r3, #151	; 0x97
   22da4:	18fb      	adds	r3, r7, r3
   22da6:	2200      	movs	r2, #0
   22da8:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22daa:	230a      	movs	r3, #10
   22dac:	18fb      	adds	r3, r7, r3
   22dae:	781b      	ldrb	r3, [r3, #0]
   22db0:	2b01      	cmp	r3, #1
   22db2:	d100      	bne.n	22db6 <m2m_wifi_connect_sc+0x32>
   22db4:	e085      	b.n	22ec2 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22db6:	687b      	ldr	r3, [r7, #4]
   22db8:	2b00      	cmp	r3, #0
   22dba:	d112      	bne.n	22de2 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22dbc:	4ad7      	ldr	r2, [pc, #860]	; (2311c <m2m_wifi_connect_sc+0x398>)
   22dbe:	49d8      	ldr	r1, [pc, #864]	; (23120 <m2m_wifi_connect_sc+0x39c>)
   22dc0:	4bd8      	ldr	r3, [pc, #864]	; (23124 <m2m_wifi_connect_sc+0x3a0>)
   22dc2:	0018      	movs	r0, r3
   22dc4:	4bd8      	ldr	r3, [pc, #864]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22dc6:	4798      	blx	r3
   22dc8:	4bd8      	ldr	r3, [pc, #864]	; (2312c <m2m_wifi_connect_sc+0x3a8>)
   22dca:	0018      	movs	r0, r3
   22dcc:	4bd6      	ldr	r3, [pc, #856]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22dce:	4798      	blx	r3
   22dd0:	4bd7      	ldr	r3, [pc, #860]	; (23130 <m2m_wifi_connect_sc+0x3ac>)
   22dd2:	0018      	movs	r0, r3
   22dd4:	4bd4      	ldr	r3, [pc, #848]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22dd6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22dd8:	2397      	movs	r3, #151	; 0x97
   22dda:	18fb      	adds	r3, r7, r3
   22ddc:	22f4      	movs	r2, #244	; 0xf4
   22dde:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22de0:	e1f9      	b.n	231d6 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22de2:	230a      	movs	r3, #10
   22de4:	18fb      	adds	r3, r7, r3
   22de6:	781b      	ldrb	r3, [r3, #0]
   22de8:	2b02      	cmp	r3, #2
   22dea:	d16a      	bne.n	22ec2 <m2m_wifi_connect_sc+0x13e>
   22dec:	687b      	ldr	r3, [r7, #4]
   22dee:	0018      	movs	r0, r3
   22df0:	4bd0      	ldr	r3, [pc, #832]	; (23134 <m2m_wifi_connect_sc+0x3b0>)
   22df2:	4798      	blx	r3
   22df4:	0003      	movs	r3, r0
   22df6:	2b40      	cmp	r3, #64	; 0x40
   22df8:	d163      	bne.n	22ec2 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22dfa:	2396      	movs	r3, #150	; 0x96
   22dfc:	18fb      	adds	r3, r7, r3
   22dfe:	2200      	movs	r2, #0
   22e00:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22e02:	687b      	ldr	r3, [r7, #4]
   22e04:	2290      	movs	r2, #144	; 0x90
   22e06:	18ba      	adds	r2, r7, r2
   22e08:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22e0a:	e055      	b.n	22eb8 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   22e0c:	2396      	movs	r3, #150	; 0x96
   22e0e:	18fb      	adds	r3, r7, r3
   22e10:	781b      	ldrb	r3, [r3, #0]
   22e12:	2290      	movs	r2, #144	; 0x90
   22e14:	18ba      	adds	r2, r7, r2
   22e16:	6812      	ldr	r2, [r2, #0]
   22e18:	18d3      	adds	r3, r2, r3
   22e1a:	781b      	ldrb	r3, [r3, #0]
   22e1c:	2b2f      	cmp	r3, #47	; 0x2f
   22e1e:	d931      	bls.n	22e84 <m2m_wifi_connect_sc+0x100>
   22e20:	2396      	movs	r3, #150	; 0x96
   22e22:	18fb      	adds	r3, r7, r3
   22e24:	781b      	ldrb	r3, [r3, #0]
   22e26:	2290      	movs	r2, #144	; 0x90
   22e28:	18ba      	adds	r2, r7, r2
   22e2a:	6812      	ldr	r2, [r2, #0]
   22e2c:	18d3      	adds	r3, r2, r3
   22e2e:	781b      	ldrb	r3, [r3, #0]
   22e30:	2b39      	cmp	r3, #57	; 0x39
   22e32:	d909      	bls.n	22e48 <m2m_wifi_connect_sc+0xc4>
   22e34:	2396      	movs	r3, #150	; 0x96
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	781b      	ldrb	r3, [r3, #0]
   22e3a:	2290      	movs	r2, #144	; 0x90
   22e3c:	18ba      	adds	r2, r7, r2
   22e3e:	6812      	ldr	r2, [r2, #0]
   22e40:	18d3      	adds	r3, r2, r3
   22e42:	781b      	ldrb	r3, [r3, #0]
   22e44:	2b40      	cmp	r3, #64	; 0x40
   22e46:	d91d      	bls.n	22e84 <m2m_wifi_connect_sc+0x100>
   22e48:	2396      	movs	r3, #150	; 0x96
   22e4a:	18fb      	adds	r3, r7, r3
   22e4c:	781b      	ldrb	r3, [r3, #0]
   22e4e:	2290      	movs	r2, #144	; 0x90
   22e50:	18ba      	adds	r2, r7, r2
   22e52:	6812      	ldr	r2, [r2, #0]
   22e54:	18d3      	adds	r3, r2, r3
   22e56:	781b      	ldrb	r3, [r3, #0]
   22e58:	2b46      	cmp	r3, #70	; 0x46
   22e5a:	d909      	bls.n	22e70 <m2m_wifi_connect_sc+0xec>
   22e5c:	2396      	movs	r3, #150	; 0x96
   22e5e:	18fb      	adds	r3, r7, r3
   22e60:	781b      	ldrb	r3, [r3, #0]
   22e62:	2290      	movs	r2, #144	; 0x90
   22e64:	18ba      	adds	r2, r7, r2
   22e66:	6812      	ldr	r2, [r2, #0]
   22e68:	18d3      	adds	r3, r2, r3
   22e6a:	781b      	ldrb	r3, [r3, #0]
   22e6c:	2b60      	cmp	r3, #96	; 0x60
   22e6e:	d909      	bls.n	22e84 <m2m_wifi_connect_sc+0x100>
   22e70:	2396      	movs	r3, #150	; 0x96
   22e72:	18fb      	adds	r3, r7, r3
   22e74:	781b      	ldrb	r3, [r3, #0]
   22e76:	2290      	movs	r2, #144	; 0x90
   22e78:	18ba      	adds	r2, r7, r2
   22e7a:	6812      	ldr	r2, [r2, #0]
   22e7c:	18d3      	adds	r3, r2, r3
   22e7e:	781b      	ldrb	r3, [r3, #0]
   22e80:	2b66      	cmp	r3, #102	; 0x66
   22e82:	d912      	bls.n	22eaa <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22e84:	4aac      	ldr	r2, [pc, #688]	; (23138 <m2m_wifi_connect_sc+0x3b4>)
   22e86:	49a6      	ldr	r1, [pc, #664]	; (23120 <m2m_wifi_connect_sc+0x39c>)
   22e88:	4ba6      	ldr	r3, [pc, #664]	; (23124 <m2m_wifi_connect_sc+0x3a0>)
   22e8a:	0018      	movs	r0, r3
   22e8c:	4ba6      	ldr	r3, [pc, #664]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22e8e:	4798      	blx	r3
   22e90:	4baa      	ldr	r3, [pc, #680]	; (2313c <m2m_wifi_connect_sc+0x3b8>)
   22e92:	0018      	movs	r0, r3
   22e94:	4ba4      	ldr	r3, [pc, #656]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22e96:	4798      	blx	r3
   22e98:	4ba5      	ldr	r3, [pc, #660]	; (23130 <m2m_wifi_connect_sc+0x3ac>)
   22e9a:	0018      	movs	r0, r3
   22e9c:	4ba2      	ldr	r3, [pc, #648]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22e9e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22ea0:	2397      	movs	r3, #151	; 0x97
   22ea2:	18fb      	adds	r3, r7, r3
   22ea4:	22f4      	movs	r2, #244	; 0xf4
   22ea6:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22ea8:	e195      	b.n	231d6 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22eaa:	2396      	movs	r3, #150	; 0x96
   22eac:	18fb      	adds	r3, r7, r3
   22eae:	781a      	ldrb	r2, [r3, #0]
   22eb0:	2396      	movs	r3, #150	; 0x96
   22eb2:	18fb      	adds	r3, r7, r3
   22eb4:	3201      	adds	r2, #1
   22eb6:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22eb8:	2396      	movs	r3, #150	; 0x96
   22eba:	18fb      	adds	r3, r7, r3
   22ebc:	781b      	ldrb	r3, [r3, #0]
   22ebe:	2b3f      	cmp	r3, #63	; 0x3f
   22ec0:	d9a4      	bls.n	22e0c <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22ec2:	230b      	movs	r3, #11
   22ec4:	18fb      	adds	r3, r7, r3
   22ec6:	781b      	ldrb	r3, [r3, #0]
   22ec8:	2b00      	cmp	r3, #0
   22eca:	d004      	beq.n	22ed6 <m2m_wifi_connect_sc+0x152>
   22ecc:	230b      	movs	r3, #11
   22ece:	18fb      	adds	r3, r7, r3
   22ed0:	781b      	ldrb	r3, [r3, #0]
   22ed2:	2b20      	cmp	r3, #32
   22ed4:	d912      	bls.n	22efc <m2m_wifi_connect_sc+0x178>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22ed6:	4a9a      	ldr	r2, [pc, #616]	; (23140 <m2m_wifi_connect_sc+0x3bc>)
   22ed8:	4991      	ldr	r1, [pc, #580]	; (23120 <m2m_wifi_connect_sc+0x39c>)
   22eda:	4b92      	ldr	r3, [pc, #584]	; (23124 <m2m_wifi_connect_sc+0x3a0>)
   22edc:	0018      	movs	r0, r3
   22ede:	4b92      	ldr	r3, [pc, #584]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22ee0:	4798      	blx	r3
   22ee2:	4b98      	ldr	r3, [pc, #608]	; (23144 <m2m_wifi_connect_sc+0x3c0>)
   22ee4:	0018      	movs	r0, r3
   22ee6:	4b90      	ldr	r3, [pc, #576]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22ee8:	4798      	blx	r3
   22eea:	4b91      	ldr	r3, [pc, #580]	; (23130 <m2m_wifi_connect_sc+0x3ac>)
   22eec:	0018      	movs	r0, r3
   22eee:	4b8e      	ldr	r3, [pc, #568]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22ef0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22ef2:	2397      	movs	r3, #151	; 0x97
   22ef4:	18fb      	adds	r3, r7, r3
   22ef6:	22f4      	movs	r2, #244	; 0xf4
   22ef8:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22efa:	e16c      	b.n	231d6 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   22efc:	23a8      	movs	r3, #168	; 0xa8
   22efe:	18fb      	adds	r3, r7, r3
   22f00:	881b      	ldrh	r3, [r3, #0]
   22f02:	2b00      	cmp	r3, #0
   22f04:	d004      	beq.n	22f10 <m2m_wifi_connect_sc+0x18c>
   22f06:	23a8      	movs	r3, #168	; 0xa8
   22f08:	18fb      	adds	r3, r7, r3
   22f0a:	881b      	ldrh	r3, [r3, #0]
   22f0c:	2b0e      	cmp	r3, #14
   22f0e:	d918      	bls.n	22f42 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22f10:	23a8      	movs	r3, #168	; 0xa8
   22f12:	18fb      	adds	r3, r7, r3
   22f14:	881b      	ldrh	r3, [r3, #0]
   22f16:	2bff      	cmp	r3, #255	; 0xff
   22f18:	d013      	beq.n	22f42 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22f1a:	238f      	movs	r3, #143	; 0x8f
   22f1c:	009a      	lsls	r2, r3, #2
   22f1e:	4980      	ldr	r1, [pc, #512]	; (23120 <m2m_wifi_connect_sc+0x39c>)
   22f20:	4b80      	ldr	r3, [pc, #512]	; (23124 <m2m_wifi_connect_sc+0x3a0>)
   22f22:	0018      	movs	r0, r3
   22f24:	4b80      	ldr	r3, [pc, #512]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22f26:	4798      	blx	r3
   22f28:	4b87      	ldr	r3, [pc, #540]	; (23148 <m2m_wifi_connect_sc+0x3c4>)
   22f2a:	0018      	movs	r0, r3
   22f2c:	4b7e      	ldr	r3, [pc, #504]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22f2e:	4798      	blx	r3
   22f30:	4b7f      	ldr	r3, [pc, #508]	; (23130 <m2m_wifi_connect_sc+0x3ac>)
   22f32:	0018      	movs	r0, r3
   22f34:	4b7c      	ldr	r3, [pc, #496]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22f36:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22f38:	2397      	movs	r3, #151	; 0x97
   22f3a:	18fb      	adds	r3, r7, r3
   22f3c:	22f4      	movs	r2, #244	; 0xf4
   22f3e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22f40:	e149      	b.n	231d6 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22f42:	230b      	movs	r3, #11
   22f44:	18fb      	adds	r3, r7, r3
   22f46:	781a      	ldrb	r2, [r3, #0]
   22f48:	68f9      	ldr	r1, [r7, #12]
   22f4a:	2314      	movs	r3, #20
   22f4c:	18fb      	adds	r3, r7, r3
   22f4e:	3346      	adds	r3, #70	; 0x46
   22f50:	0018      	movs	r0, r3
   22f52:	4b7e      	ldr	r3, [pc, #504]	; (2314c <m2m_wifi_connect_sc+0x3c8>)
   22f54:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22f56:	230b      	movs	r3, #11
   22f58:	18fb      	adds	r3, r7, r3
   22f5a:	781b      	ldrb	r3, [r3, #0]
   22f5c:	2214      	movs	r2, #20
   22f5e:	18ba      	adds	r2, r7, r2
   22f60:	2146      	movs	r1, #70	; 0x46
   22f62:	18d3      	adds	r3, r2, r3
   22f64:	185b      	adds	r3, r3, r1
   22f66:	2200      	movs	r2, #0
   22f68:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22f6a:	2314      	movs	r3, #20
   22f6c:	18fb      	adds	r3, r7, r3
   22f6e:	22a8      	movs	r2, #168	; 0xa8
   22f70:	18ba      	adds	r2, r7, r2
   22f72:	2144      	movs	r1, #68	; 0x44
   22f74:	8812      	ldrh	r2, [r2, #0]
   22f76:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22f78:	23ac      	movs	r3, #172	; 0xac
   22f7a:	18fb      	adds	r3, r7, r3
   22f7c:	781b      	ldrb	r3, [r3, #0]
   22f7e:	1e5a      	subs	r2, r3, #1
   22f80:	4193      	sbcs	r3, r2
   22f82:	b2db      	uxtb	r3, r3
   22f84:	0019      	movs	r1, r3
   22f86:	2314      	movs	r3, #20
   22f88:	18fb      	adds	r3, r7, r3
   22f8a:	2267      	movs	r2, #103	; 0x67
   22f8c:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   22f8e:	2314      	movs	r3, #20
   22f90:	18fb      	adds	r3, r7, r3
   22f92:	228c      	movs	r2, #140	; 0x8c
   22f94:	18ba      	adds	r2, r7, r2
   22f96:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22f98:	238c      	movs	r3, #140	; 0x8c
   22f9a:	18fb      	adds	r3, r7, r3
   22f9c:	681b      	ldr	r3, [r3, #0]
   22f9e:	220a      	movs	r2, #10
   22fa0:	18ba      	adds	r2, r7, r2
   22fa2:	2141      	movs	r1, #65	; 0x41
   22fa4:	7812      	ldrb	r2, [r2, #0]
   22fa6:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22fa8:	230a      	movs	r3, #10
   22faa:	18fb      	adds	r3, r7, r3
   22fac:	781b      	ldrb	r3, [r3, #0]
   22fae:	2b03      	cmp	r3, #3
   22fb0:	d000      	beq.n	22fb4 <m2m_wifi_connect_sc+0x230>
   22fb2:	e07c      	b.n	230ae <m2m_wifi_connect_sc+0x32a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22fb4:	687b      	ldr	r3, [r7, #4]
   22fb6:	2288      	movs	r2, #136	; 0x88
   22fb8:	18ba      	adds	r2, r7, r2
   22fba:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22fbc:	238c      	movs	r3, #140	; 0x8c
   22fbe:	18fb      	adds	r3, r7, r3
   22fc0:	681b      	ldr	r3, [r3, #0]
   22fc2:	2284      	movs	r2, #132	; 0x84
   22fc4:	18ba      	adds	r2, r7, r2
   22fc6:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22fc8:	2388      	movs	r3, #136	; 0x88
   22fca:	18fb      	adds	r3, r7, r3
   22fcc:	681b      	ldr	r3, [r3, #0]
   22fce:	781b      	ldrb	r3, [r3, #0]
   22fd0:	3b01      	subs	r3, #1
   22fd2:	b2da      	uxtb	r2, r3
   22fd4:	2384      	movs	r3, #132	; 0x84
   22fd6:	18fb      	adds	r3, r7, r3
   22fd8:	681b      	ldr	r3, [r3, #0]
   22fda:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   22fdc:	2384      	movs	r3, #132	; 0x84
   22fde:	18fb      	adds	r3, r7, r3
   22fe0:	681b      	ldr	r3, [r3, #0]
   22fe2:	781b      	ldrb	r3, [r3, #0]
   22fe4:	2b03      	cmp	r3, #3
   22fe6:	d918      	bls.n	2301a <m2m_wifi_connect_sc+0x296>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22fe8:	4a59      	ldr	r2, [pc, #356]	; (23150 <m2m_wifi_connect_sc+0x3cc>)
   22fea:	494d      	ldr	r1, [pc, #308]	; (23120 <m2m_wifi_connect_sc+0x39c>)
   22fec:	4b4d      	ldr	r3, [pc, #308]	; (23124 <m2m_wifi_connect_sc+0x3a0>)
   22fee:	0018      	movs	r0, r3
   22ff0:	4b4d      	ldr	r3, [pc, #308]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   22ff2:	4798      	blx	r3
   22ff4:	2384      	movs	r3, #132	; 0x84
   22ff6:	18fb      	adds	r3, r7, r3
   22ff8:	681b      	ldr	r3, [r3, #0]
   22ffa:	781b      	ldrb	r3, [r3, #0]
   22ffc:	001a      	movs	r2, r3
   22ffe:	4b55      	ldr	r3, [pc, #340]	; (23154 <m2m_wifi_connect_sc+0x3d0>)
   23000:	0011      	movs	r1, r2
   23002:	0018      	movs	r0, r3
   23004:	4b48      	ldr	r3, [pc, #288]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   23006:	4798      	blx	r3
   23008:	4b49      	ldr	r3, [pc, #292]	; (23130 <m2m_wifi_connect_sc+0x3ac>)
   2300a:	0018      	movs	r0, r3
   2300c:	4b46      	ldr	r3, [pc, #280]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   2300e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23010:	2397      	movs	r3, #151	; 0x97
   23012:	18fb      	adds	r3, r7, r3
   23014:	22f4      	movs	r2, #244	; 0xf4
   23016:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23018:	e0dd      	b.n	231d6 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   2301a:	2388      	movs	r3, #136	; 0x88
   2301c:	18fb      	adds	r3, r7, r3
   2301e:	681b      	ldr	r3, [r3, #0]
   23020:	785b      	ldrb	r3, [r3, #1]
   23022:	3b01      	subs	r3, #1
   23024:	b2da      	uxtb	r2, r3
   23026:	2384      	movs	r3, #132	; 0x84
   23028:	18fb      	adds	r3, r7, r3
   2302a:	681b      	ldr	r3, [r3, #0]
   2302c:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2302e:	2384      	movs	r3, #132	; 0x84
   23030:	18fb      	adds	r3, r7, r3
   23032:	681b      	ldr	r3, [r3, #0]
   23034:	785b      	ldrb	r3, [r3, #1]
   23036:	2b0a      	cmp	r3, #10
   23038:	d01e      	beq.n	23078 <m2m_wifi_connect_sc+0x2f4>
   2303a:	2384      	movs	r3, #132	; 0x84
   2303c:	18fb      	adds	r3, r7, r3
   2303e:	681b      	ldr	r3, [r3, #0]
   23040:	785b      	ldrb	r3, [r3, #1]
   23042:	2b1a      	cmp	r3, #26
   23044:	d018      	beq.n	23078 <m2m_wifi_connect_sc+0x2f4>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   23046:	4a44      	ldr	r2, [pc, #272]	; (23158 <m2m_wifi_connect_sc+0x3d4>)
   23048:	4935      	ldr	r1, [pc, #212]	; (23120 <m2m_wifi_connect_sc+0x39c>)
   2304a:	4b36      	ldr	r3, [pc, #216]	; (23124 <m2m_wifi_connect_sc+0x3a0>)
   2304c:	0018      	movs	r0, r3
   2304e:	4b36      	ldr	r3, [pc, #216]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   23050:	4798      	blx	r3
   23052:	2384      	movs	r3, #132	; 0x84
   23054:	18fb      	adds	r3, r7, r3
   23056:	681b      	ldr	r3, [r3, #0]
   23058:	785b      	ldrb	r3, [r3, #1]
   2305a:	001a      	movs	r2, r3
   2305c:	4b3f      	ldr	r3, [pc, #252]	; (2315c <m2m_wifi_connect_sc+0x3d8>)
   2305e:	0011      	movs	r1, r2
   23060:	0018      	movs	r0, r3
   23062:	4b31      	ldr	r3, [pc, #196]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   23064:	4798      	blx	r3
   23066:	4b32      	ldr	r3, [pc, #200]	; (23130 <m2m_wifi_connect_sc+0x3ac>)
   23068:	0018      	movs	r0, r3
   2306a:	4b2f      	ldr	r3, [pc, #188]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   2306c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2306e:	2397      	movs	r3, #151	; 0x97
   23070:	18fb      	adds	r3, r7, r3
   23072:	22f4      	movs	r2, #244	; 0xf4
   23074:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23076:	e0ae      	b.n	231d6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   23078:	2384      	movs	r3, #132	; 0x84
   2307a:	18fb      	adds	r3, r7, r3
   2307c:	681b      	ldr	r3, [r3, #0]
   2307e:	1c98      	adds	r0, r3, #2
   23080:	2388      	movs	r3, #136	; 0x88
   23082:	18fb      	adds	r3, r7, r3
   23084:	681b      	ldr	r3, [r3, #0]
   23086:	1c99      	adds	r1, r3, #2
   23088:	2388      	movs	r3, #136	; 0x88
   2308a:	18fb      	adds	r3, r7, r3
   2308c:	681b      	ldr	r3, [r3, #0]
   2308e:	785b      	ldrb	r3, [r3, #1]
   23090:	001a      	movs	r2, r3
   23092:	4b2e      	ldr	r3, [pc, #184]	; (2314c <m2m_wifi_connect_sc+0x3c8>)
   23094:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   23096:	2388      	movs	r3, #136	; 0x88
   23098:	18fb      	adds	r3, r7, r3
   2309a:	681b      	ldr	r3, [r3, #0]
   2309c:	785b      	ldrb	r3, [r3, #1]
   2309e:	001a      	movs	r2, r3
   230a0:	2384      	movs	r3, #132	; 0x84
   230a2:	18fb      	adds	r3, r7, r3
   230a4:	681b      	ldr	r3, [r3, #0]
   230a6:	189b      	adds	r3, r3, r2
   230a8:	2200      	movs	r2, #0
   230aa:	709a      	strb	r2, [r3, #2]
   230ac:	e082      	b.n	231b4 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   230ae:	230a      	movs	r3, #10
   230b0:	18fb      	adds	r3, r7, r3
   230b2:	781b      	ldrb	r3, [r3, #0]
   230b4:	2b02      	cmp	r3, #2
   230b6:	d157      	bne.n	23168 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   230b8:	2382      	movs	r3, #130	; 0x82
   230ba:	18fc      	adds	r4, r7, r3
   230bc:	687b      	ldr	r3, [r7, #4]
   230be:	0018      	movs	r0, r3
   230c0:	4b1c      	ldr	r3, [pc, #112]	; (23134 <m2m_wifi_connect_sc+0x3b0>)
   230c2:	4798      	blx	r3
   230c4:	0003      	movs	r3, r0
   230c6:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   230c8:	2382      	movs	r3, #130	; 0x82
   230ca:	18fb      	adds	r3, r7, r3
   230cc:	881b      	ldrh	r3, [r3, #0]
   230ce:	2b00      	cmp	r3, #0
   230d0:	d004      	beq.n	230dc <m2m_wifi_connect_sc+0x358>
   230d2:	2382      	movs	r3, #130	; 0x82
   230d4:	18fb      	adds	r3, r7, r3
   230d6:	881b      	ldrh	r3, [r3, #0]
   230d8:	2b40      	cmp	r3, #64	; 0x40
   230da:	d912      	bls.n	23102 <m2m_wifi_connect_sc+0x37e>
		{
			M2M_ERR("Incorrect PSK key length\n");
   230dc:	4a20      	ldr	r2, [pc, #128]	; (23160 <m2m_wifi_connect_sc+0x3dc>)
   230de:	4910      	ldr	r1, [pc, #64]	; (23120 <m2m_wifi_connect_sc+0x39c>)
   230e0:	4b10      	ldr	r3, [pc, #64]	; (23124 <m2m_wifi_connect_sc+0x3a0>)
   230e2:	0018      	movs	r0, r3
   230e4:	4b10      	ldr	r3, [pc, #64]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   230e6:	4798      	blx	r3
   230e8:	4b1e      	ldr	r3, [pc, #120]	; (23164 <m2m_wifi_connect_sc+0x3e0>)
   230ea:	0018      	movs	r0, r3
   230ec:	4b0e      	ldr	r3, [pc, #56]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   230ee:	4798      	blx	r3
   230f0:	4b0f      	ldr	r3, [pc, #60]	; (23130 <m2m_wifi_connect_sc+0x3ac>)
   230f2:	0018      	movs	r0, r3
   230f4:	4b0c      	ldr	r3, [pc, #48]	; (23128 <m2m_wifi_connect_sc+0x3a4>)
   230f6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   230f8:	2397      	movs	r3, #151	; 0x97
   230fa:	18fb      	adds	r3, r7, r3
   230fc:	22f4      	movs	r2, #244	; 0xf4
   230fe:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23100:	e069      	b.n	231d6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   23102:	238c      	movs	r3, #140	; 0x8c
   23104:	18fb      	adds	r3, r7, r3
   23106:	6818      	ldr	r0, [r3, #0]
   23108:	2382      	movs	r3, #130	; 0x82
   2310a:	18fb      	adds	r3, r7, r3
   2310c:	881b      	ldrh	r3, [r3, #0]
   2310e:	3301      	adds	r3, #1
   23110:	001a      	movs	r2, r3
   23112:	687b      	ldr	r3, [r7, #4]
   23114:	0019      	movs	r1, r3
   23116:	4b0d      	ldr	r3, [pc, #52]	; (2314c <m2m_wifi_connect_sc+0x3c8>)
   23118:	4798      	blx	r3
   2311a:	e04b      	b.n	231b4 <m2m_wifi_connect_sc+0x430>
   2311c:	0000021d 	.word	0x0000021d
   23120:	00039a0c 	.word	0x00039a0c
   23124:	00039700 	.word	0x00039700
   23128:	0001ed59 	.word	0x0001ed59
   2312c:	00039894 	.word	0x00039894
   23130:	000396fc 	.word	0x000396fc
   23134:	00021acb 	.word	0x00021acb
   23138:	00000229 	.word	0x00000229
   2313c:	000398a8 	.word	0x000398a8
   23140:	00000233 	.word	0x00000233
   23144:	000398b8 	.word	0x000398b8
   23148:	000398cc 	.word	0x000398cc
   2314c:	00021a51 	.word	0x00021a51
   23150:	00000253 	.word	0x00000253
   23154:	000398d8 	.word	0x000398d8
   23158:	0000025a 	.word	0x0000025a
   2315c:	000398f4 	.word	0x000398f4
   23160:	00000269 	.word	0x00000269
   23164:	00039910 	.word	0x00039910
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   23168:	230a      	movs	r3, #10
   2316a:	18fb      	adds	r3, r7, r3
   2316c:	781b      	ldrb	r3, [r3, #0]
   2316e:	2b04      	cmp	r3, #4
   23170:	d108      	bne.n	23184 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   23172:	238c      	movs	r3, #140	; 0x8c
   23174:	18fb      	adds	r3, r7, r3
   23176:	681b      	ldr	r3, [r3, #0]
   23178:	6879      	ldr	r1, [r7, #4]
   2317a:	223e      	movs	r2, #62	; 0x3e
   2317c:	0018      	movs	r0, r3
   2317e:	4b1a      	ldr	r3, [pc, #104]	; (231e8 <m2m_wifi_connect_sc+0x464>)
   23180:	4798      	blx	r3
   23182:	e017      	b.n	231b4 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   23184:	230a      	movs	r3, #10
   23186:	18fb      	adds	r3, r7, r3
   23188:	781b      	ldrb	r3, [r3, #0]
   2318a:	2b01      	cmp	r3, #1
   2318c:	d012      	beq.n	231b4 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   2318e:	4a17      	ldr	r2, [pc, #92]	; (231ec <m2m_wifi_connect_sc+0x468>)
   23190:	4917      	ldr	r1, [pc, #92]	; (231f0 <m2m_wifi_connect_sc+0x46c>)
   23192:	4b18      	ldr	r3, [pc, #96]	; (231f4 <m2m_wifi_connect_sc+0x470>)
   23194:	0018      	movs	r0, r3
   23196:	4b18      	ldr	r3, [pc, #96]	; (231f8 <m2m_wifi_connect_sc+0x474>)
   23198:	4798      	blx	r3
   2319a:	4b18      	ldr	r3, [pc, #96]	; (231fc <m2m_wifi_connect_sc+0x478>)
   2319c:	0018      	movs	r0, r3
   2319e:	4b16      	ldr	r3, [pc, #88]	; (231f8 <m2m_wifi_connect_sc+0x474>)
   231a0:	4798      	blx	r3
   231a2:	4b17      	ldr	r3, [pc, #92]	; (23200 <m2m_wifi_connect_sc+0x47c>)
   231a4:	0018      	movs	r0, r3
   231a6:	4b14      	ldr	r3, [pc, #80]	; (231f8 <m2m_wifi_connect_sc+0x474>)
   231a8:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   231aa:	2397      	movs	r3, #151	; 0x97
   231ac:	18fb      	adds	r3, r7, r3
   231ae:	22f4      	movs	r2, #244	; 0xf4
   231b0:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   231b2:	e010      	b.n	231d6 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   231b4:	2397      	movs	r3, #151	; 0x97
   231b6:	18fc      	adds	r4, r7, r3
   231b8:	2314      	movs	r3, #20
   231ba:	18fa      	adds	r2, r7, r3
   231bc:	2300      	movs	r3, #0
   231be:	9302      	str	r3, [sp, #8]
   231c0:	2300      	movs	r3, #0
   231c2:	9301      	str	r3, [sp, #4]
   231c4:	2300      	movs	r3, #0
   231c6:	9300      	str	r3, [sp, #0]
   231c8:	236c      	movs	r3, #108	; 0x6c
   231ca:	2128      	movs	r1, #40	; 0x28
   231cc:	2001      	movs	r0, #1
   231ce:	4d0d      	ldr	r5, [pc, #52]	; (23204 <m2m_wifi_connect_sc+0x480>)
   231d0:	47a8      	blx	r5
   231d2:	0003      	movs	r3, r0
   231d4:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   231d6:	2397      	movs	r3, #151	; 0x97
   231d8:	18fb      	adds	r3, r7, r3
   231da:	781b      	ldrb	r3, [r3, #0]
   231dc:	b25b      	sxtb	r3, r3
}
   231de:	0018      	movs	r0, r3
   231e0:	46bd      	mov	sp, r7
   231e2:	b026      	add	sp, #152	; 0x98
   231e4:	bdb0      	pop	{r4, r5, r7, pc}
   231e6:	46c0      	nop			; (mov r8, r8)
   231e8:	00021a51 	.word	0x00021a51
   231ec:	00000279 	.word	0x00000279
   231f0:	00039a0c 	.word	0x00039a0c
   231f4:	00039700 	.word	0x00039700
   231f8:	0001ed59 	.word	0x0001ed59
   231fc:	0003992c 	.word	0x0003992c
   23200:	000396fc 	.word	0x000396fc
   23204:	00021ced 	.word	0x00021ced

00023208 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   23208:	b580      	push	{r7, lr}
   2320a:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   2320c:	2300      	movs	r3, #0
}
   2320e:	0018      	movs	r0, r3
   23210:	46bd      	mov	sp, r7
   23212:	bd80      	pop	{r7, pc}

00023214 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   23214:	b590      	push	{r4, r7, lr}
   23216:	b087      	sub	sp, #28
   23218:	af00      	add	r7, sp, #0
   2321a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2321c:	2317      	movs	r3, #23
   2321e:	18fb      	adds	r3, r7, r3
   23220:	2200      	movs	r2, #0
   23222:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   23224:	687b      	ldr	r3, [r7, #4]
   23226:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   23228:	693b      	ldr	r3, [r7, #16]
   2322a:	2280      	movs	r2, #128	; 0x80
   2322c:	0052      	lsls	r2, r2, #1
   2322e:	4313      	orrs	r3, r2
   23230:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   23232:	693a      	ldr	r2, [r7, #16]
   23234:	23a5      	movs	r3, #165	; 0xa5
   23236:	015b      	lsls	r3, r3, #5
   23238:	0011      	movs	r1, r2
   2323a:	0018      	movs	r0, r3
   2323c:	4b12      	ldr	r3, [pc, #72]	; (23288 <chip_apply_conf+0x74>)
   2323e:	4798      	blx	r3
		if(val32 != 0) {		
   23240:	693b      	ldr	r3, [r7, #16]
   23242:	2b00      	cmp	r3, #0
   23244:	d018      	beq.n	23278 <chip_apply_conf+0x64>
			uint32 reg = 0;
   23246:	2300      	movs	r3, #0
   23248:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2324a:	2317      	movs	r3, #23
   2324c:	18fc      	adds	r4, r7, r3
   2324e:	230c      	movs	r3, #12
   23250:	18fa      	adds	r2, r7, r3
   23252:	23a5      	movs	r3, #165	; 0xa5
   23254:	015b      	lsls	r3, r3, #5
   23256:	0011      	movs	r1, r2
   23258:	0018      	movs	r0, r3
   2325a:	4b0c      	ldr	r3, [pc, #48]	; (2328c <chip_apply_conf+0x78>)
   2325c:	4798      	blx	r3
   2325e:	0003      	movs	r3, r0
   23260:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   23262:	2317      	movs	r3, #23
   23264:	18fb      	adds	r3, r7, r3
   23266:	781b      	ldrb	r3, [r3, #0]
   23268:	b25b      	sxtb	r3, r3
   2326a:	2b00      	cmp	r3, #0
   2326c:	d1e1      	bne.n	23232 <chip_apply_conf+0x1e>
				if(reg == val32)
   2326e:	68fa      	ldr	r2, [r7, #12]
   23270:	693b      	ldr	r3, [r7, #16]
   23272:	429a      	cmp	r2, r3
   23274:	d002      	beq.n	2327c <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   23276:	e7dc      	b.n	23232 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   23278:	46c0      	nop			; (mov r8, r8)
   2327a:	e000      	b.n	2327e <chip_apply_conf+0x6a>
					break;
   2327c:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2327e:	2300      	movs	r3, #0
}
   23280:	0018      	movs	r0, r3
   23282:	46bd      	mov	sp, r7
   23284:	b007      	add	sp, #28
   23286:	bd90      	pop	{r4, r7, pc}
   23288:	00023a69 	.word	0x00023a69
   2328c:	00023a45 	.word	0x00023a45

00023290 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   23290:	b590      	push	{r4, r7, lr}
   23292:	b083      	sub	sp, #12
   23294:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   23296:	2300      	movs	r3, #0
   23298:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   2329a:	1dfb      	adds	r3, r7, #7
   2329c:	2200      	movs	r2, #0
   2329e:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   232a0:	1dfc      	adds	r4, r7, #7
   232a2:	003b      	movs	r3, r7
   232a4:	4a24      	ldr	r2, [pc, #144]	; (23338 <enable_interrupts+0xa8>)
   232a6:	0019      	movs	r1, r3
   232a8:	0010      	movs	r0, r2
   232aa:	4b24      	ldr	r3, [pc, #144]	; (2333c <enable_interrupts+0xac>)
   232ac:	4798      	blx	r3
   232ae:	0003      	movs	r3, r0
   232b0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   232b2:	1dfb      	adds	r3, r7, #7
   232b4:	781b      	ldrb	r3, [r3, #0]
   232b6:	b25b      	sxtb	r3, r3
   232b8:	2b00      	cmp	r3, #0
   232ba:	d131      	bne.n	23320 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   232bc:	683b      	ldr	r3, [r7, #0]
   232be:	2280      	movs	r2, #128	; 0x80
   232c0:	0052      	lsls	r2, r2, #1
   232c2:	4313      	orrs	r3, r2
   232c4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   232c6:	683b      	ldr	r3, [r7, #0]
   232c8:	1dfc      	adds	r4, r7, #7
   232ca:	4a1b      	ldr	r2, [pc, #108]	; (23338 <enable_interrupts+0xa8>)
   232cc:	0019      	movs	r1, r3
   232ce:	0010      	movs	r0, r2
   232d0:	4b1b      	ldr	r3, [pc, #108]	; (23340 <enable_interrupts+0xb0>)
   232d2:	4798      	blx	r3
   232d4:	0003      	movs	r3, r0
   232d6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   232d8:	1dfb      	adds	r3, r7, #7
   232da:	781b      	ldrb	r3, [r3, #0]
   232dc:	b25b      	sxtb	r3, r3
   232de:	2b00      	cmp	r3, #0
   232e0:	d120      	bne.n	23324 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   232e2:	1dfc      	adds	r4, r7, #7
   232e4:	003a      	movs	r2, r7
   232e6:	23d0      	movs	r3, #208	; 0xd0
   232e8:	015b      	lsls	r3, r3, #5
   232ea:	0011      	movs	r1, r2
   232ec:	0018      	movs	r0, r3
   232ee:	4b13      	ldr	r3, [pc, #76]	; (2333c <enable_interrupts+0xac>)
   232f0:	4798      	blx	r3
   232f2:	0003      	movs	r3, r0
   232f4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   232f6:	1dfb      	adds	r3, r7, #7
   232f8:	781b      	ldrb	r3, [r3, #0]
   232fa:	b25b      	sxtb	r3, r3
   232fc:	2b00      	cmp	r3, #0
   232fe:	d113      	bne.n	23328 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   23300:	683b      	ldr	r3, [r7, #0]
   23302:	2280      	movs	r2, #128	; 0x80
   23304:	0252      	lsls	r2, r2, #9
   23306:	4313      	orrs	r3, r2
   23308:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2330a:	683a      	ldr	r2, [r7, #0]
   2330c:	1dfc      	adds	r4, r7, #7
   2330e:	23d0      	movs	r3, #208	; 0xd0
   23310:	015b      	lsls	r3, r3, #5
   23312:	0011      	movs	r1, r2
   23314:	0018      	movs	r0, r3
   23316:	4b0a      	ldr	r3, [pc, #40]	; (23340 <enable_interrupts+0xb0>)
   23318:	4798      	blx	r3
   2331a:	0003      	movs	r3, r0
   2331c:	7023      	strb	r3, [r4, #0]
   2331e:	e004      	b.n	2332a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23320:	46c0      	nop			; (mov r8, r8)
   23322:	e002      	b.n	2332a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23324:	46c0      	nop			; (mov r8, r8)
   23326:	e000      	b.n	2332a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23328:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2332a:	1dfb      	adds	r3, r7, #7
   2332c:	781b      	ldrb	r3, [r3, #0]
   2332e:	b25b      	sxtb	r3, r3
}
   23330:	0018      	movs	r0, r3
   23332:	46bd      	mov	sp, r7
   23334:	b003      	add	sp, #12
   23336:	bd90      	pop	{r4, r7, pc}
   23338:	00001408 	.word	0x00001408
   2333c:	00023a45 	.word	0x00023a45
   23340:	00023a69 	.word	0x00023a69

00023344 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   23344:	b580      	push	{r7, lr}
   23346:	b082      	sub	sp, #8
   23348:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2334a:	4b32      	ldr	r3, [pc, #200]	; (23414 <nmi_get_chipid+0xd0>)
   2334c:	681b      	ldr	r3, [r3, #0]
   2334e:	2b00      	cmp	r3, #0
   23350:	d159      	bne.n	23406 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   23352:	4a30      	ldr	r2, [pc, #192]	; (23414 <nmi_get_chipid+0xd0>)
   23354:	2380      	movs	r3, #128	; 0x80
   23356:	015b      	lsls	r3, r3, #5
   23358:	0011      	movs	r1, r2
   2335a:	0018      	movs	r0, r3
   2335c:	4b2e      	ldr	r3, [pc, #184]	; (23418 <nmi_get_chipid+0xd4>)
   2335e:	4798      	blx	r3
   23360:	1e03      	subs	r3, r0, #0
   23362:	d004      	beq.n	2336e <nmi_get_chipid+0x2a>
			chipid = 0;
   23364:	4b2b      	ldr	r3, [pc, #172]	; (23414 <nmi_get_chipid+0xd0>)
   23366:	2200      	movs	r2, #0
   23368:	601a      	str	r2, [r3, #0]
			return 0;
   2336a:	2300      	movs	r3, #0
   2336c:	e04d      	b.n	2340a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2336e:	1d3b      	adds	r3, r7, #4
   23370:	4a2a      	ldr	r2, [pc, #168]	; (2341c <nmi_get_chipid+0xd8>)
   23372:	0019      	movs	r1, r3
   23374:	0010      	movs	r0, r2
   23376:	4b28      	ldr	r3, [pc, #160]	; (23418 <nmi_get_chipid+0xd4>)
   23378:	4798      	blx	r3
   2337a:	1e03      	subs	r3, r0, #0
   2337c:	d004      	beq.n	23388 <nmi_get_chipid+0x44>
			chipid = 0;
   2337e:	4b25      	ldr	r3, [pc, #148]	; (23414 <nmi_get_chipid+0xd0>)
   23380:	2200      	movs	r2, #0
   23382:	601a      	str	r2, [r3, #0]
			return 0;
   23384:	2300      	movs	r3, #0
   23386:	e040      	b.n	2340a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   23388:	4b22      	ldr	r3, [pc, #136]	; (23414 <nmi_get_chipid+0xd0>)
   2338a:	681b      	ldr	r3, [r3, #0]
   2338c:	4a24      	ldr	r2, [pc, #144]	; (23420 <nmi_get_chipid+0xdc>)
   2338e:	4293      	cmp	r3, r2
   23390:	d106      	bne.n	233a0 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   23392:	687b      	ldr	r3, [r7, #4]
   23394:	2b01      	cmp	r3, #1
   23396:	d029      	beq.n	233ec <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   23398:	4b1e      	ldr	r3, [pc, #120]	; (23414 <nmi_get_chipid+0xd0>)
   2339a:	4a22      	ldr	r2, [pc, #136]	; (23424 <nmi_get_chipid+0xe0>)
   2339c:	601a      	str	r2, [r3, #0]
   2339e:	e025      	b.n	233ec <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   233a0:	4b1c      	ldr	r3, [pc, #112]	; (23414 <nmi_get_chipid+0xd0>)
   233a2:	681b      	ldr	r3, [r3, #0]
   233a4:	4a20      	ldr	r2, [pc, #128]	; (23428 <nmi_get_chipid+0xe4>)
   233a6:	4293      	cmp	r3, r2
   233a8:	d10d      	bne.n	233c6 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   233aa:	687b      	ldr	r3, [r7, #4]
   233ac:	2b03      	cmp	r3, #3
   233ae:	d01d      	beq.n	233ec <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   233b0:	687b      	ldr	r3, [r7, #4]
   233b2:	2b04      	cmp	r3, #4
   233b4:	d103      	bne.n	233be <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   233b6:	4b17      	ldr	r3, [pc, #92]	; (23414 <nmi_get_chipid+0xd0>)
   233b8:	4a1c      	ldr	r2, [pc, #112]	; (2342c <nmi_get_chipid+0xe8>)
   233ba:	601a      	str	r2, [r3, #0]
   233bc:	e016      	b.n	233ec <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   233be:	4b15      	ldr	r3, [pc, #84]	; (23414 <nmi_get_chipid+0xd0>)
   233c0:	4a1b      	ldr	r2, [pc, #108]	; (23430 <nmi_get_chipid+0xec>)
   233c2:	601a      	str	r2, [r3, #0]
   233c4:	e012      	b.n	233ec <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   233c6:	4b13      	ldr	r3, [pc, #76]	; (23414 <nmi_get_chipid+0xd0>)
   233c8:	681b      	ldr	r3, [r3, #0]
   233ca:	4a1a      	ldr	r2, [pc, #104]	; (23434 <nmi_get_chipid+0xf0>)
   233cc:	4293      	cmp	r3, r2
   233ce:	d10d      	bne.n	233ec <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   233d0:	4a10      	ldr	r2, [pc, #64]	; (23414 <nmi_get_chipid+0xd0>)
   233d2:	23ec      	movs	r3, #236	; 0xec
   233d4:	039b      	lsls	r3, r3, #14
   233d6:	0011      	movs	r1, r2
   233d8:	0018      	movs	r0, r3
   233da:	4b0f      	ldr	r3, [pc, #60]	; (23418 <nmi_get_chipid+0xd4>)
   233dc:	4798      	blx	r3
   233de:	1e03      	subs	r3, r0, #0
   233e0:	d004      	beq.n	233ec <nmi_get_chipid+0xa8>
			chipid = 0;
   233e2:	4b0c      	ldr	r3, [pc, #48]	; (23414 <nmi_get_chipid+0xd0>)
   233e4:	2200      	movs	r2, #0
   233e6:	601a      	str	r2, [r3, #0]
			return 0;
   233e8:	2300      	movs	r3, #0
   233ea:	e00e      	b.n	2340a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   233ec:	4b09      	ldr	r3, [pc, #36]	; (23414 <nmi_get_chipid+0xd0>)
   233ee:	681b      	ldr	r3, [r3, #0]
   233f0:	4a11      	ldr	r2, [pc, #68]	; (23438 <nmi_get_chipid+0xf4>)
   233f2:	401a      	ands	r2, r3
   233f4:	4b07      	ldr	r3, [pc, #28]	; (23414 <nmi_get_chipid+0xd0>)
   233f6:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   233f8:	4b06      	ldr	r3, [pc, #24]	; (23414 <nmi_get_chipid+0xd0>)
   233fa:	681b      	ldr	r3, [r3, #0]
   233fc:	22a0      	movs	r2, #160	; 0xa0
   233fe:	02d2      	lsls	r2, r2, #11
   23400:	431a      	orrs	r2, r3
   23402:	4b04      	ldr	r3, [pc, #16]	; (23414 <nmi_get_chipid+0xd0>)
   23404:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   23406:	4b03      	ldr	r3, [pc, #12]	; (23414 <nmi_get_chipid+0xd0>)
   23408:	681b      	ldr	r3, [r3, #0]
}
   2340a:	0018      	movs	r0, r3
   2340c:	46bd      	mov	sp, r7
   2340e:	b002      	add	sp, #8
   23410:	bd80      	pop	{r7, pc}
   23412:	46c0      	nop			; (mov r8, r8)
   23414:	200042ac 	.word	0x200042ac
   23418:	00023a45 	.word	0x00023a45
   2341c:	000013f4 	.word	0x000013f4
   23420:	001002a0 	.word	0x001002a0
   23424:	001002a1 	.word	0x001002a1
   23428:	001002b0 	.word	0x001002b0
   2342c:	001002b1 	.word	0x001002b1
   23430:	001002b2 	.word	0x001002b2
   23434:	001000f0 	.word	0x001000f0
   23438:	fff0ffff 	.word	0xfff0ffff

0002343c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   2343c:	b590      	push	{r4, r7, lr}
   2343e:	b083      	sub	sp, #12
   23440:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   23442:	1dfb      	adds	r3, r7, #7
   23444:	2200      	movs	r2, #0
   23446:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   23448:	1dfc      	adds	r4, r7, #7
   2344a:	003b      	movs	r3, r7
   2344c:	0019      	movs	r1, r3
   2344e:	2010      	movs	r0, #16
   23450:	4b2e      	ldr	r3, [pc, #184]	; (2350c <chip_sleep+0xd0>)
   23452:	4798      	blx	r3
   23454:	0003      	movs	r3, r0
   23456:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   23458:	1dfb      	adds	r3, r7, #7
   2345a:	781b      	ldrb	r3, [r3, #0]
   2345c:	b25b      	sxtb	r3, r3
   2345e:	2b00      	cmp	r3, #0
   23460:	d145      	bne.n	234ee <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   23462:	683b      	ldr	r3, [r7, #0]
   23464:	2201      	movs	r2, #1
   23466:	4013      	ands	r3, r2
   23468:	d000      	beq.n	2346c <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   2346a:	e7ed      	b.n	23448 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   2346c:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2346e:	1dfc      	adds	r4, r7, #7
   23470:	003b      	movs	r3, r7
   23472:	0019      	movs	r1, r3
   23474:	2001      	movs	r0, #1
   23476:	4b25      	ldr	r3, [pc, #148]	; (2350c <chip_sleep+0xd0>)
   23478:	4798      	blx	r3
   2347a:	0003      	movs	r3, r0
   2347c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2347e:	1dfb      	adds	r3, r7, #7
   23480:	781b      	ldrb	r3, [r3, #0]
   23482:	b25b      	sxtb	r3, r3
   23484:	2b00      	cmp	r3, #0
   23486:	d134      	bne.n	234f2 <chip_sleep+0xb6>
	if(reg & NBIT1)
   23488:	683b      	ldr	r3, [r7, #0]
   2348a:	2202      	movs	r2, #2
   2348c:	4013      	ands	r3, r2
   2348e:	d010      	beq.n	234b2 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   23490:	683b      	ldr	r3, [r7, #0]
   23492:	2202      	movs	r2, #2
   23494:	4393      	bics	r3, r2
   23496:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   23498:	683b      	ldr	r3, [r7, #0]
   2349a:	1dfc      	adds	r4, r7, #7
   2349c:	0019      	movs	r1, r3
   2349e:	2001      	movs	r0, #1
   234a0:	4b1b      	ldr	r3, [pc, #108]	; (23510 <chip_sleep+0xd4>)
   234a2:	4798      	blx	r3
   234a4:	0003      	movs	r3, r0
   234a6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   234a8:	1dfb      	adds	r3, r7, #7
   234aa:	781b      	ldrb	r3, [r3, #0]
   234ac:	b25b      	sxtb	r3, r3
   234ae:	2b00      	cmp	r3, #0
   234b0:	d121      	bne.n	234f6 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   234b2:	1dfc      	adds	r4, r7, #7
   234b4:	003b      	movs	r3, r7
   234b6:	0019      	movs	r1, r3
   234b8:	200b      	movs	r0, #11
   234ba:	4b14      	ldr	r3, [pc, #80]	; (2350c <chip_sleep+0xd0>)
   234bc:	4798      	blx	r3
   234be:	0003      	movs	r3, r0
   234c0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   234c2:	1dfb      	adds	r3, r7, #7
   234c4:	781b      	ldrb	r3, [r3, #0]
   234c6:	b25b      	sxtb	r3, r3
   234c8:	2b00      	cmp	r3, #0
   234ca:	d116      	bne.n	234fa <chip_sleep+0xbe>
	if(reg & NBIT0)
   234cc:	683b      	ldr	r3, [r7, #0]
   234ce:	2201      	movs	r2, #1
   234d0:	4013      	ands	r3, r2
   234d2:	d013      	beq.n	234fc <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   234d4:	683b      	ldr	r3, [r7, #0]
   234d6:	2201      	movs	r2, #1
   234d8:	4393      	bics	r3, r2
   234da:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   234dc:	683b      	ldr	r3, [r7, #0]
   234de:	1dfc      	adds	r4, r7, #7
   234e0:	0019      	movs	r1, r3
   234e2:	200b      	movs	r0, #11
   234e4:	4b0a      	ldr	r3, [pc, #40]	; (23510 <chip_sleep+0xd4>)
   234e6:	4798      	blx	r3
   234e8:	0003      	movs	r3, r0
   234ea:	7023      	strb	r3, [r4, #0]
   234ec:	e006      	b.n	234fc <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   234ee:	46c0      	nop			; (mov r8, r8)
   234f0:	e004      	b.n	234fc <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   234f2:	46c0      	nop			; (mov r8, r8)
   234f4:	e002      	b.n	234fc <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   234f6:	46c0      	nop			; (mov r8, r8)
   234f8:	e000      	b.n	234fc <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   234fa:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   234fc:	1dfb      	adds	r3, r7, #7
   234fe:	781b      	ldrb	r3, [r3, #0]
   23500:	b25b      	sxtb	r3, r3
}
   23502:	0018      	movs	r0, r3
   23504:	46bd      	mov	sp, r7
   23506:	b003      	add	sp, #12
   23508:	bd90      	pop	{r4, r7, pc}
   2350a:	46c0      	nop			; (mov r8, r8)
   2350c:	00023a45 	.word	0x00023a45
   23510:	00023a69 	.word	0x00023a69

00023514 <chip_wake>:
sint8 chip_wake(void)
{
   23514:	b590      	push	{r4, r7, lr}
   23516:	b085      	sub	sp, #20
   23518:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2351a:	230f      	movs	r3, #15
   2351c:	18fb      	adds	r3, r7, r3
   2351e:	2200      	movs	r2, #0
   23520:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   23522:	2300      	movs	r3, #0
   23524:	607b      	str	r3, [r7, #4]
   23526:	2300      	movs	r3, #0
   23528:	603b      	str	r3, [r7, #0]
   2352a:	2300      	movs	r3, #0
   2352c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2352e:	230f      	movs	r3, #15
   23530:	18fc      	adds	r4, r7, r3
   23532:	1d3b      	adds	r3, r7, #4
   23534:	0019      	movs	r1, r3
   23536:	200b      	movs	r0, #11
   23538:	4b4e      	ldr	r3, [pc, #312]	; (23674 <chip_wake+0x160>)
   2353a:	4798      	blx	r3
   2353c:	0003      	movs	r3, r0
   2353e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23540:	230f      	movs	r3, #15
   23542:	18fb      	adds	r3, r7, r3
   23544:	781b      	ldrb	r3, [r3, #0]
   23546:	b25b      	sxtb	r3, r3
   23548:	2b00      	cmp	r3, #0
   2354a:	d000      	beq.n	2354e <chip_wake+0x3a>
   2354c:	e082      	b.n	23654 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2354e:	687b      	ldr	r3, [r7, #4]
   23550:	2201      	movs	r2, #1
   23552:	4013      	ands	r3, r2
   23554:	d111      	bne.n	2357a <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   23556:	687b      	ldr	r3, [r7, #4]
   23558:	2201      	movs	r2, #1
   2355a:	4313      	orrs	r3, r2
   2355c:	220f      	movs	r2, #15
   2355e:	18bc      	adds	r4, r7, r2
   23560:	0019      	movs	r1, r3
   23562:	200b      	movs	r0, #11
   23564:	4b44      	ldr	r3, [pc, #272]	; (23678 <chip_wake+0x164>)
   23566:	4798      	blx	r3
   23568:	0003      	movs	r3, r0
   2356a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2356c:	230f      	movs	r3, #15
   2356e:	18fb      	adds	r3, r7, r3
   23570:	781b      	ldrb	r3, [r3, #0]
   23572:	b25b      	sxtb	r3, r3
   23574:	2b00      	cmp	r3, #0
   23576:	d000      	beq.n	2357a <chip_wake+0x66>
   23578:	e06e      	b.n	23658 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2357a:	230f      	movs	r3, #15
   2357c:	18fc      	adds	r4, r7, r3
   2357e:	1d3b      	adds	r3, r7, #4
   23580:	0019      	movs	r1, r3
   23582:	2001      	movs	r0, #1
   23584:	4b3b      	ldr	r3, [pc, #236]	; (23674 <chip_wake+0x160>)
   23586:	4798      	blx	r3
   23588:	0003      	movs	r3, r0
   2358a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2358c:	230f      	movs	r3, #15
   2358e:	18fb      	adds	r3, r7, r3
   23590:	781b      	ldrb	r3, [r3, #0]
   23592:	b25b      	sxtb	r3, r3
   23594:	2b00      	cmp	r3, #0
   23596:	d161      	bne.n	2365c <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   23598:	687b      	ldr	r3, [r7, #4]
   2359a:	2202      	movs	r2, #2
   2359c:	4013      	ands	r3, r2
   2359e:	d110      	bne.n	235c2 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   235a0:	687b      	ldr	r3, [r7, #4]
   235a2:	2202      	movs	r2, #2
   235a4:	4313      	orrs	r3, r2
   235a6:	220f      	movs	r2, #15
   235a8:	18bc      	adds	r4, r7, r2
   235aa:	0019      	movs	r1, r3
   235ac:	2001      	movs	r0, #1
   235ae:	4b32      	ldr	r3, [pc, #200]	; (23678 <chip_wake+0x164>)
   235b0:	4798      	blx	r3
   235b2:	0003      	movs	r3, r0
   235b4:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   235b6:	230f      	movs	r3, #15
   235b8:	18fb      	adds	r3, r7, r3
   235ba:	781b      	ldrb	r3, [r3, #0]
   235bc:	b25b      	sxtb	r3, r3
   235be:	2b00      	cmp	r3, #0
   235c0:	d14e      	bne.n	23660 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   235c2:	230f      	movs	r3, #15
   235c4:	18fc      	adds	r4, r7, r3
   235c6:	003b      	movs	r3, r7
   235c8:	0019      	movs	r1, r3
   235ca:	200f      	movs	r0, #15
   235cc:	4b29      	ldr	r3, [pc, #164]	; (23674 <chip_wake+0x160>)
   235ce:	4798      	blx	r3
   235d0:	0003      	movs	r3, r0
   235d2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   235d4:	230f      	movs	r3, #15
   235d6:	18fb      	adds	r3, r7, r3
   235d8:	781b      	ldrb	r3, [r3, #0]
   235da:	b25b      	sxtb	r3, r3
   235dc:	2b00      	cmp	r3, #0
   235de:	d014      	beq.n	2360a <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   235e0:	23a8      	movs	r3, #168	; 0xa8
   235e2:	005a      	lsls	r2, r3, #1
   235e4:	4925      	ldr	r1, [pc, #148]	; (2367c <chip_wake+0x168>)
   235e6:	4b26      	ldr	r3, [pc, #152]	; (23680 <chip_wake+0x16c>)
   235e8:	0018      	movs	r0, r3
   235ea:	4b26      	ldr	r3, [pc, #152]	; (23684 <chip_wake+0x170>)
   235ec:	4798      	blx	r3
   235ee:	230f      	movs	r3, #15
   235f0:	18fb      	adds	r3, r7, r3
   235f2:	2100      	movs	r1, #0
   235f4:	5659      	ldrsb	r1, [r3, r1]
   235f6:	683a      	ldr	r2, [r7, #0]
   235f8:	4b23      	ldr	r3, [pc, #140]	; (23688 <chip_wake+0x174>)
   235fa:	0018      	movs	r0, r3
   235fc:	4b21      	ldr	r3, [pc, #132]	; (23684 <chip_wake+0x170>)
   235fe:	4798      	blx	r3
   23600:	4b22      	ldr	r3, [pc, #136]	; (2368c <chip_wake+0x178>)
   23602:	0018      	movs	r0, r3
   23604:	4b1f      	ldr	r3, [pc, #124]	; (23684 <chip_wake+0x170>)
   23606:	4798      	blx	r3
			goto _WAKE_EXIT;
   23608:	e02b      	b.n	23662 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   2360a:	683b      	ldr	r3, [r7, #0]
   2360c:	2204      	movs	r2, #4
   2360e:	4013      	ands	r3, r2
   23610:	d11c      	bne.n	2364c <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   23612:	2002      	movs	r0, #2
   23614:	4b1e      	ldr	r3, [pc, #120]	; (23690 <chip_wake+0x17c>)
   23616:	4798      	blx	r3
		trials++;
   23618:	68bb      	ldr	r3, [r7, #8]
   2361a:	3301      	adds	r3, #1
   2361c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2361e:	68bb      	ldr	r3, [r7, #8]
   23620:	2b04      	cmp	r3, #4
   23622:	d9ce      	bls.n	235c2 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   23624:	23ad      	movs	r3, #173	; 0xad
   23626:	005a      	lsls	r2, r3, #1
   23628:	4914      	ldr	r1, [pc, #80]	; (2367c <chip_wake+0x168>)
   2362a:	4b15      	ldr	r3, [pc, #84]	; (23680 <chip_wake+0x16c>)
   2362c:	0018      	movs	r0, r3
   2362e:	4b15      	ldr	r3, [pc, #84]	; (23684 <chip_wake+0x170>)
   23630:	4798      	blx	r3
   23632:	4b18      	ldr	r3, [pc, #96]	; (23694 <chip_wake+0x180>)
   23634:	0018      	movs	r0, r3
   23636:	4b13      	ldr	r3, [pc, #76]	; (23684 <chip_wake+0x170>)
   23638:	4798      	blx	r3
   2363a:	4b14      	ldr	r3, [pc, #80]	; (2368c <chip_wake+0x178>)
   2363c:	0018      	movs	r0, r3
   2363e:	4b11      	ldr	r3, [pc, #68]	; (23684 <chip_wake+0x170>)
   23640:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   23642:	230f      	movs	r3, #15
   23644:	18fb      	adds	r3, r7, r3
   23646:	22fc      	movs	r2, #252	; 0xfc
   23648:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   2364a:	e00a      	b.n	23662 <chip_wake+0x14e>
			break;
   2364c:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2364e:	4b12      	ldr	r3, [pc, #72]	; (23698 <chip_wake+0x184>)
   23650:	4798      	blx	r3
   23652:	e006      	b.n	23662 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23654:	46c0      	nop			; (mov r8, r8)
   23656:	e004      	b.n	23662 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23658:	46c0      	nop			; (mov r8, r8)
   2365a:	e002      	b.n	23662 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2365c:	46c0      	nop			; (mov r8, r8)
   2365e:	e000      	b.n	23662 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   23660:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   23662:	230f      	movs	r3, #15
   23664:	18fb      	adds	r3, r7, r3
   23666:	781b      	ldrb	r3, [r3, #0]
   23668:	b25b      	sxtb	r3, r3
}
   2366a:	0018      	movs	r0, r3
   2366c:	46bd      	mov	sp, r7
   2366e:	b005      	add	sp, #20
   23670:	bd90      	pop	{r4, r7, pc}
   23672:	46c0      	nop			; (mov r8, r8)
   23674:	00023a45 	.word	0x00023a45
   23678:	00023a69 	.word	0x00023a69
   2367c:	00039aac 	.word	0x00039aac
   23680:	00039a20 	.word	0x00039a20
   23684:	0001ed59 	.word	0x0001ed59
   23688:	00039a34 	.word	0x00039a34
   2368c:	00039a4c 	.word	0x00039a4c
   23690:	000211ad 	.word	0x000211ad
   23694:	00039a50 	.word	0x00039a50
   23698:	00023a05 	.word	0x00023a05

0002369c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   2369c:	b580      	push	{r7, lr}
   2369e:	b088      	sub	sp, #32
   236a0:	af00      	add	r7, sp, #0
   236a2:	0002      	movs	r2, r0
   236a4:	1dfb      	adds	r3, r7, #7
   236a6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   236a8:	2313      	movs	r3, #19
   236aa:	18fb      	adds	r3, r7, r3
   236ac:	2200      	movs	r2, #0
   236ae:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   236b0:	2300      	movs	r3, #0
   236b2:	61fb      	str	r3, [r7, #28]
   236b4:	2300      	movs	r3, #0
   236b6:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   236b8:	2300      	movs	r3, #0
   236ba:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   236bc:	4b4a      	ldr	r3, [pc, #296]	; (237e8 <wait_for_bootrom+0x14c>)
   236be:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   236c0:	2300      	movs	r3, #0
   236c2:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   236c4:	4b49      	ldr	r3, [pc, #292]	; (237ec <wait_for_bootrom+0x150>)
   236c6:	0018      	movs	r0, r3
   236c8:	4b49      	ldr	r3, [pc, #292]	; (237f0 <wait_for_bootrom+0x154>)
   236ca:	4798      	blx	r3
   236cc:	0003      	movs	r3, r0
   236ce:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   236d0:	69fb      	ldr	r3, [r7, #28]
   236d2:	2b00      	cmp	r3, #0
   236d4:	db03      	blt.n	236de <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   236d6:	2001      	movs	r0, #1
   236d8:	4b46      	ldr	r3, [pc, #280]	; (237f4 <wait_for_bootrom+0x158>)
   236da:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   236dc:	e7f2      	b.n	236c4 <wait_for_bootrom+0x28>
			break;
   236de:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   236e0:	4b45      	ldr	r3, [pc, #276]	; (237f8 <wait_for_bootrom+0x15c>)
   236e2:	0018      	movs	r0, r3
   236e4:	4b42      	ldr	r3, [pc, #264]	; (237f0 <wait_for_bootrom+0x154>)
   236e6:	4798      	blx	r3
   236e8:	0003      	movs	r3, r0
   236ea:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   236ec:	69fb      	ldr	r3, [r7, #28]
   236ee:	2201      	movs	r2, #1
   236f0:	4013      	ands	r3, r2
   236f2:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   236f4:	69fb      	ldr	r3, [r7, #28]
   236f6:	2b00      	cmp	r3, #0
   236f8:	d112      	bne.n	23720 <wait_for_bootrom+0x84>
	{
		reg = 0;
   236fa:	2300      	movs	r3, #0
   236fc:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   236fe:	e00b      	b.n	23718 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   23700:	2001      	movs	r0, #1
   23702:	4b3c      	ldr	r3, [pc, #240]	; (237f4 <wait_for_bootrom+0x158>)
   23704:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   23706:	4b3d      	ldr	r3, [pc, #244]	; (237fc <wait_for_bootrom+0x160>)
   23708:	0018      	movs	r0, r3
   2370a:	4b39      	ldr	r3, [pc, #228]	; (237f0 <wait_for_bootrom+0x154>)
   2370c:	4798      	blx	r3
   2370e:	0003      	movs	r3, r0
   23710:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   23712:	69bb      	ldr	r3, [r7, #24]
   23714:	3301      	adds	r3, #1
   23716:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   23718:	69fb      	ldr	r3, [r7, #28]
   2371a:	4a39      	ldr	r2, [pc, #228]	; (23800 <wait_for_bootrom+0x164>)
   2371c:	4293      	cmp	r3, r2
   2371e:	d1ef      	bne.n	23700 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   23720:	1dfb      	adds	r3, r7, #7
   23722:	781b      	ldrb	r3, [r3, #0]
   23724:	2b02      	cmp	r3, #2
   23726:	d10d      	bne.n	23744 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23728:	4a36      	ldr	r2, [pc, #216]	; (23804 <wait_for_bootrom+0x168>)
   2372a:	4b37      	ldr	r3, [pc, #220]	; (23808 <wait_for_bootrom+0x16c>)
   2372c:	0011      	movs	r1, r2
   2372e:	0018      	movs	r0, r3
   23730:	4b36      	ldr	r3, [pc, #216]	; (2380c <wait_for_bootrom+0x170>)
   23732:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   23734:	2380      	movs	r3, #128	; 0x80
   23736:	035b      	lsls	r3, r3, #13
   23738:	4a35      	ldr	r2, [pc, #212]	; (23810 <wait_for_bootrom+0x174>)
   2373a:	0019      	movs	r1, r3
   2373c:	0010      	movs	r0, r2
   2373e:	4b33      	ldr	r3, [pc, #204]	; (2380c <wait_for_bootrom+0x170>)
   23740:	4798      	blx	r3
   23742:	e022      	b.n	2378a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   23744:	1dfb      	adds	r3, r7, #7
   23746:	781b      	ldrb	r3, [r3, #0]
   23748:	2b03      	cmp	r3, #3
   2374a:	d10b      	bne.n	23764 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   2374c:	4a2d      	ldr	r2, [pc, #180]	; (23804 <wait_for_bootrom+0x168>)
   2374e:	4b2e      	ldr	r3, [pc, #184]	; (23808 <wait_for_bootrom+0x16c>)
   23750:	0011      	movs	r1, r2
   23752:	0018      	movs	r0, r3
   23754:	4b2d      	ldr	r3, [pc, #180]	; (2380c <wait_for_bootrom+0x170>)
   23756:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   23758:	4b2d      	ldr	r3, [pc, #180]	; (23810 <wait_for_bootrom+0x174>)
   2375a:	2100      	movs	r1, #0
   2375c:	0018      	movs	r0, r3
   2375e:	4b2b      	ldr	r3, [pc, #172]	; (2380c <wait_for_bootrom+0x170>)
   23760:	4798      	blx	r3
   23762:	e012      	b.n	2378a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   23764:	1dfb      	adds	r3, r7, #7
   23766:	781b      	ldrb	r3, [r3, #0]
   23768:	2b04      	cmp	r3, #4
   2376a:	d108      	bne.n	2377e <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   2376c:	2380      	movs	r3, #128	; 0x80
   2376e:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   23770:	68fb      	ldr	r3, [r7, #12]
   23772:	4a27      	ldr	r2, [pc, #156]	; (23810 <wait_for_bootrom+0x174>)
   23774:	0019      	movs	r1, r3
   23776:	0010      	movs	r0, r2
   23778:	4b24      	ldr	r3, [pc, #144]	; (2380c <wait_for_bootrom+0x170>)
   2377a:	4798      	blx	r3
   2377c:	e005      	b.n	2378a <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2377e:	68fb      	ldr	r3, [r7, #12]
   23780:	4a23      	ldr	r2, [pc, #140]	; (23810 <wait_for_bootrom+0x174>)
   23782:	0019      	movs	r1, r3
   23784:	0010      	movs	r0, r2
   23786:	4b21      	ldr	r3, [pc, #132]	; (2380c <wait_for_bootrom+0x170>)
   23788:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   2378a:	4b22      	ldr	r3, [pc, #136]	; (23814 <wait_for_bootrom+0x178>)
   2378c:	4798      	blx	r3
   2378e:	0003      	movs	r3, r0
   23790:	051b      	lsls	r3, r3, #20
   23792:	0d1b      	lsrs	r3, r3, #20
   23794:	4a20      	ldr	r2, [pc, #128]	; (23818 <wait_for_bootrom+0x17c>)
   23796:	4293      	cmp	r3, r2
   23798:	d906      	bls.n	237a8 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   2379a:	697b      	ldr	r3, [r7, #20]
   2379c:	2202      	movs	r2, #2
   2379e:	4313      	orrs	r3, r2
   237a0:	0018      	movs	r0, r3
   237a2:	4b1e      	ldr	r3, [pc, #120]	; (2381c <wait_for_bootrom+0x180>)
   237a4:	4798      	blx	r3
   237a6:	e003      	b.n	237b0 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   237a8:	697b      	ldr	r3, [r7, #20]
   237aa:	0018      	movs	r0, r3
   237ac:	4b1b      	ldr	r3, [pc, #108]	; (2381c <wait_for_bootrom+0x180>)
   237ae:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   237b0:	4b1b      	ldr	r3, [pc, #108]	; (23820 <wait_for_bootrom+0x184>)
   237b2:	0018      	movs	r0, r3
   237b4:	4b1b      	ldr	r3, [pc, #108]	; (23824 <wait_for_bootrom+0x188>)
   237b6:	4798      	blx	r3
   237b8:	68fa      	ldr	r2, [r7, #12]
   237ba:	4b1b      	ldr	r3, [pc, #108]	; (23828 <wait_for_bootrom+0x18c>)
   237bc:	0011      	movs	r1, r2
   237be:	0018      	movs	r0, r3
   237c0:	4b18      	ldr	r3, [pc, #96]	; (23824 <wait_for_bootrom+0x188>)
   237c2:	4798      	blx	r3
   237c4:	4b19      	ldr	r3, [pc, #100]	; (2382c <wait_for_bootrom+0x190>)
   237c6:	0018      	movs	r0, r3
   237c8:	4b16      	ldr	r3, [pc, #88]	; (23824 <wait_for_bootrom+0x188>)
   237ca:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   237cc:	4a18      	ldr	r2, [pc, #96]	; (23830 <wait_for_bootrom+0x194>)
   237ce:	4b0b      	ldr	r3, [pc, #44]	; (237fc <wait_for_bootrom+0x160>)
   237d0:	0011      	movs	r1, r2
   237d2:	0018      	movs	r0, r3
   237d4:	4b0d      	ldr	r3, [pc, #52]	; (2380c <wait_for_bootrom+0x170>)
   237d6:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   237d8:	2313      	movs	r3, #19
   237da:	18fb      	adds	r3, r7, r3
   237dc:	781b      	ldrb	r3, [r3, #0]
   237de:	b25b      	sxtb	r3, r3
}
   237e0:	0018      	movs	r0, r3
   237e2:	46bd      	mov	sp, r7
   237e4:	b008      	add	sp, #32
   237e6:	bd80      	pop	{r7, pc}
   237e8:	13301354 	.word	0x13301354
   237ec:	00001014 	.word	0x00001014
   237f0:	00023a25 	.word	0x00023a25
   237f4:	000211ad 	.word	0x000211ad
   237f8:	000207bc 	.word	0x000207bc
   237fc:	000c000c 	.word	0x000c000c
   23800:	10add09e 	.word	0x10add09e
   23804:	3c1cd57d 	.word	0x3c1cd57d
   23808:	000207ac 	.word	0x000207ac
   2380c:	00023a69 	.word	0x00023a69
   23810:	0000108c 	.word	0x0000108c
   23814:	00023345 	.word	0x00023345
   23818:	0000039f 	.word	0x0000039f
   2381c:	00023215 	.word	0x00023215
   23820:	00039a6c 	.word	0x00039a6c
   23824:	0001ed59 	.word	0x0001ed59
   23828:	00039a78 	.word	0x00039a78
   2382c:	00039a4c 	.word	0x00039a4c
   23830:	ef522f61 	.word	0xef522f61

00023834 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   23834:	b580      	push	{r7, lr}
   23836:	b088      	sub	sp, #32
   23838:	af00      	add	r7, sp, #0
   2383a:	0002      	movs	r2, r0
   2383c:	1dfb      	adds	r3, r7, #7
   2383e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23840:	231f      	movs	r3, #31
   23842:	18fb      	adds	r3, r7, r3
   23844:	2200      	movs	r2, #0
   23846:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23848:	2300      	movs	r3, #0
   2384a:	61bb      	str	r3, [r7, #24]
   2384c:	2300      	movs	r3, #0
   2384e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   23850:	2301      	movs	r3, #1
   23852:	425b      	negs	r3, r3
   23854:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   23856:	4b1d      	ldr	r3, [pc, #116]	; (238cc <wait_for_firmware_start+0x98>)
   23858:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   2385a:	4b1d      	ldr	r3, [pc, #116]	; (238d0 <wait_for_firmware_start+0x9c>)
   2385c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   2385e:	1dfb      	adds	r3, r7, #7
   23860:	781b      	ldrb	r3, [r3, #0]
   23862:	2b02      	cmp	r3, #2
   23864:	d003      	beq.n	2386e <wait_for_firmware_start+0x3a>
   23866:	1dfb      	adds	r3, r7, #7
   23868:	781b      	ldrb	r3, [r3, #0]
   2386a:	2b03      	cmp	r3, #3
   2386c:	d119      	bne.n	238a2 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2386e:	4b19      	ldr	r3, [pc, #100]	; (238d4 <wait_for_firmware_start+0xa0>)
   23870:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   23872:	4b19      	ldr	r3, [pc, #100]	; (238d8 <wait_for_firmware_start+0xa4>)
   23874:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   23876:	e014      	b.n	238a2 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   23878:	2002      	movs	r0, #2
   2387a:	4b18      	ldr	r3, [pc, #96]	; (238dc <wait_for_firmware_start+0xa8>)
   2387c:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2387e:	68fb      	ldr	r3, [r7, #12]
   23880:	0018      	movs	r0, r3
   23882:	4b17      	ldr	r3, [pc, #92]	; (238e0 <wait_for_firmware_start+0xac>)
   23884:	4798      	blx	r3
   23886:	0003      	movs	r3, r0
   23888:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   2388a:	697b      	ldr	r3, [r7, #20]
   2388c:	3301      	adds	r3, #1
   2388e:	617b      	str	r3, [r7, #20]
   23890:	697a      	ldr	r2, [r7, #20]
   23892:	693b      	ldr	r3, [r7, #16]
   23894:	429a      	cmp	r2, r3
   23896:	d304      	bcc.n	238a2 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   23898:	231f      	movs	r3, #31
   2389a:	18fb      	adds	r3, r7, r3
   2389c:	22fb      	movs	r2, #251	; 0xfb
   2389e:	701a      	strb	r2, [r3, #0]
			goto ERR;
   238a0:	e00c      	b.n	238bc <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   238a2:	68ba      	ldr	r2, [r7, #8]
   238a4:	69bb      	ldr	r3, [r7, #24]
   238a6:	429a      	cmp	r2, r3
   238a8:	d1e6      	bne.n	23878 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   238aa:	68bb      	ldr	r3, [r7, #8]
   238ac:	4a08      	ldr	r2, [pc, #32]	; (238d0 <wait_for_firmware_start+0x9c>)
   238ae:	4293      	cmp	r3, r2
   238b0:	d104      	bne.n	238bc <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   238b2:	4b06      	ldr	r3, [pc, #24]	; (238cc <wait_for_firmware_start+0x98>)
   238b4:	2100      	movs	r1, #0
   238b6:	0018      	movs	r0, r3
   238b8:	4b0a      	ldr	r3, [pc, #40]	; (238e4 <wait_for_firmware_start+0xb0>)
   238ba:	4798      	blx	r3
	}
ERR:
	return ret;
   238bc:	231f      	movs	r3, #31
   238be:	18fb      	adds	r3, r7, r3
   238c0:	781b      	ldrb	r3, [r3, #0]
   238c2:	b25b      	sxtb	r3, r3
}
   238c4:	0018      	movs	r0, r3
   238c6:	46bd      	mov	sp, r7
   238c8:	b008      	add	sp, #32
   238ca:	bd80      	pop	{r7, pc}
   238cc:	0000108c 	.word	0x0000108c
   238d0:	02532636 	.word	0x02532636
   238d4:	000207ac 	.word	0x000207ac
   238d8:	d75dc1c3 	.word	0xd75dc1c3
   238dc:	000211ad 	.word	0x000211ad
   238e0:	00023a25 	.word	0x00023a25
   238e4:	00023a69 	.word	0x00023a69

000238e8 <chip_deinit>:

sint8 chip_deinit(void)
{
   238e8:	b590      	push	{r4, r7, lr}
   238ea:	b083      	sub	sp, #12
   238ec:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   238ee:	2300      	movs	r3, #0
   238f0:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   238f2:	1dfc      	adds	r4, r7, #7
   238f4:	003a      	movs	r2, r7
   238f6:	23a0      	movs	r3, #160	; 0xa0
   238f8:	015b      	lsls	r3, r3, #5
   238fa:	0011      	movs	r1, r2
   238fc:	0018      	movs	r0, r3
   238fe:	4b20      	ldr	r3, [pc, #128]	; (23980 <chip_deinit+0x98>)
   23900:	4798      	blx	r3
   23902:	0003      	movs	r3, r0
   23904:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23906:	1dfb      	adds	r3, r7, #7
   23908:	781b      	ldrb	r3, [r3, #0]
   2390a:	b25b      	sxtb	r3, r3
   2390c:	2b00      	cmp	r3, #0
   2390e:	d00e      	beq.n	2392e <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   23910:	4a1c      	ldr	r2, [pc, #112]	; (23984 <chip_deinit+0x9c>)
   23912:	491d      	ldr	r1, [pc, #116]	; (23988 <chip_deinit+0xa0>)
   23914:	4b1d      	ldr	r3, [pc, #116]	; (2398c <chip_deinit+0xa4>)
   23916:	0018      	movs	r0, r3
   23918:	4b1d      	ldr	r3, [pc, #116]	; (23990 <chip_deinit+0xa8>)
   2391a:	4798      	blx	r3
   2391c:	4b1d      	ldr	r3, [pc, #116]	; (23994 <chip_deinit+0xac>)
   2391e:	0018      	movs	r0, r3
   23920:	4b1b      	ldr	r3, [pc, #108]	; (23990 <chip_deinit+0xa8>)
   23922:	4798      	blx	r3
   23924:	4b1c      	ldr	r3, [pc, #112]	; (23998 <chip_deinit+0xb0>)
   23926:	0018      	movs	r0, r3
   23928:	4b19      	ldr	r3, [pc, #100]	; (23990 <chip_deinit+0xa8>)
   2392a:	4798      	blx	r3
		goto ERR1;
   2392c:	e021      	b.n	23972 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2392e:	683b      	ldr	r3, [r7, #0]
   23930:	4a1a      	ldr	r2, [pc, #104]	; (2399c <chip_deinit+0xb4>)
   23932:	4013      	ands	r3, r2
   23934:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   23936:	683a      	ldr	r2, [r7, #0]
   23938:	1dfc      	adds	r4, r7, #7
   2393a:	23a0      	movs	r3, #160	; 0xa0
   2393c:	015b      	lsls	r3, r3, #5
   2393e:	0011      	movs	r1, r2
   23940:	0018      	movs	r0, r3
   23942:	4b17      	ldr	r3, [pc, #92]	; (239a0 <chip_deinit+0xb8>)
   23944:	4798      	blx	r3
   23946:	0003      	movs	r3, r0
   23948:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   2394a:	1dfb      	adds	r3, r7, #7
   2394c:	781b      	ldrb	r3, [r3, #0]
   2394e:	b25b      	sxtb	r3, r3
   23950:	2b00      	cmp	r3, #0
   23952:	d00e      	beq.n	23972 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   23954:	4a13      	ldr	r2, [pc, #76]	; (239a4 <chip_deinit+0xbc>)
   23956:	490c      	ldr	r1, [pc, #48]	; (23988 <chip_deinit+0xa0>)
   23958:	4b0c      	ldr	r3, [pc, #48]	; (2398c <chip_deinit+0xa4>)
   2395a:	0018      	movs	r0, r3
   2395c:	4b0c      	ldr	r3, [pc, #48]	; (23990 <chip_deinit+0xa8>)
   2395e:	4798      	blx	r3
   23960:	4b0c      	ldr	r3, [pc, #48]	; (23994 <chip_deinit+0xac>)
   23962:	0018      	movs	r0, r3
   23964:	4b0a      	ldr	r3, [pc, #40]	; (23990 <chip_deinit+0xa8>)
   23966:	4798      	blx	r3
   23968:	4b0b      	ldr	r3, [pc, #44]	; (23998 <chip_deinit+0xb0>)
   2396a:	0018      	movs	r0, r3
   2396c:	4b08      	ldr	r3, [pc, #32]	; (23990 <chip_deinit+0xa8>)
   2396e:	4798      	blx	r3
		goto ERR1;
   23970:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23972:	1dfb      	adds	r3, r7, #7
   23974:	781b      	ldrb	r3, [r3, #0]
   23976:	b25b      	sxtb	r3, r3
}
   23978:	0018      	movs	r0, r3
   2397a:	46bd      	mov	sp, r7
   2397c:	b003      	add	sp, #12
   2397e:	bd90      	pop	{r4, r7, pc}
   23980:	00023a45 	.word	0x00023a45
   23984:	00000201 	.word	0x00000201
   23988:	00039ab8 	.word	0x00039ab8
   2398c:	00039a20 	.word	0x00039a20
   23990:	0001ed59 	.word	0x0001ed59
   23994:	00039a90 	.word	0x00039a90
   23998:	00039a4c 	.word	0x00039a4c
   2399c:	fffffbff 	.word	0xfffffbff
   239a0:	00023a69 	.word	0x00023a69
   239a4:	00000207 	.word	0x00000207

000239a8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   239a8:	b590      	push	{r4, r7, lr}
   239aa:	b085      	sub	sp, #20
   239ac:	af00      	add	r7, sp, #0
   239ae:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   239b0:	230f      	movs	r3, #15
   239b2:	18fb      	adds	r3, r7, r3
   239b4:	2200      	movs	r2, #0
   239b6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   239b8:	230f      	movs	r3, #15
   239ba:	18fc      	adds	r4, r7, r3
   239bc:	687b      	ldr	r3, [r7, #4]
   239be:	0018      	movs	r0, r3
   239c0:	4b05      	ldr	r3, [pc, #20]	; (239d8 <nm_bus_iface_init+0x30>)
   239c2:	4798      	blx	r3
   239c4:	0003      	movs	r3, r0
   239c6:	7023      	strb	r3, [r4, #0]
	return ret;
   239c8:	230f      	movs	r3, #15
   239ca:	18fb      	adds	r3, r7, r3
   239cc:	781b      	ldrb	r3, [r3, #0]
   239ce:	b25b      	sxtb	r3, r3
}
   239d0:	0018      	movs	r0, r3
   239d2:	46bd      	mov	sp, r7
   239d4:	b005      	add	sp, #20
   239d6:	bd90      	pop	{r4, r7, pc}
   239d8:	00021869 	.word	0x00021869

000239dc <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   239dc:	b590      	push	{r4, r7, lr}
   239de:	b083      	sub	sp, #12
   239e0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   239e2:	1dfb      	adds	r3, r7, #7
   239e4:	2200      	movs	r2, #0
   239e6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   239e8:	1dfc      	adds	r4, r7, #7
   239ea:	4b05      	ldr	r3, [pc, #20]	; (23a00 <nm_bus_iface_deinit+0x24>)
   239ec:	4798      	blx	r3
   239ee:	0003      	movs	r3, r0
   239f0:	7023      	strb	r3, [r4, #0]

	return ret;
   239f2:	1dfb      	adds	r3, r7, #7
   239f4:	781b      	ldrb	r3, [r3, #0]
   239f6:	b25b      	sxtb	r3, r3
}
   239f8:	0018      	movs	r0, r3
   239fa:	46bd      	mov	sp, r7
   239fc:	b003      	add	sp, #12
   239fe:	bd90      	pop	{r4, r7, pc}
   23a00:	000219e1 	.word	0x000219e1

00023a04 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   23a04:	b580      	push	{r7, lr}
   23a06:	b082      	sub	sp, #8
   23a08:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23a0a:	1dfb      	adds	r3, r7, #7
   23a0c:	2200      	movs	r2, #0
   23a0e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   23a10:	4b03      	ldr	r3, [pc, #12]	; (23a20 <nm_bus_reset+0x1c>)
   23a12:	4798      	blx	r3
   23a14:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   23a16:	0018      	movs	r0, r3
   23a18:	46bd      	mov	sp, r7
   23a1a:	b002      	add	sp, #8
   23a1c:	bd80      	pop	{r7, pc}
   23a1e:	46c0      	nop			; (mov r8, r8)
   23a20:	00025831 	.word	0x00025831

00023a24 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23a24:	b580      	push	{r7, lr}
   23a26:	b082      	sub	sp, #8
   23a28:	af00      	add	r7, sp, #0
   23a2a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   23a2c:	687b      	ldr	r3, [r7, #4]
   23a2e:	0018      	movs	r0, r3
   23a30:	4b03      	ldr	r3, [pc, #12]	; (23a40 <nm_read_reg+0x1c>)
   23a32:	4798      	blx	r3
   23a34:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23a36:	0018      	movs	r0, r3
   23a38:	46bd      	mov	sp, r7
   23a3a:	b002      	add	sp, #8
   23a3c:	bd80      	pop	{r7, pc}
   23a3e:	46c0      	nop			; (mov r8, r8)
   23a40:	000259c5 	.word	0x000259c5

00023a44 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23a44:	b580      	push	{r7, lr}
   23a46:	b082      	sub	sp, #8
   23a48:	af00      	add	r7, sp, #0
   23a4a:	6078      	str	r0, [r7, #4]
   23a4c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   23a4e:	683a      	ldr	r2, [r7, #0]
   23a50:	687b      	ldr	r3, [r7, #4]
   23a52:	0011      	movs	r1, r2
   23a54:	0018      	movs	r0, r3
   23a56:	4b03      	ldr	r3, [pc, #12]	; (23a64 <nm_read_reg_with_ret+0x20>)
   23a58:	4798      	blx	r3
   23a5a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   23a5c:	0018      	movs	r0, r3
   23a5e:	46bd      	mov	sp, r7
   23a60:	b002      	add	sp, #8
   23a62:	bd80      	pop	{r7, pc}
   23a64:	000259e9 	.word	0x000259e9

00023a68 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23a68:	b580      	push	{r7, lr}
   23a6a:	b082      	sub	sp, #8
   23a6c:	af00      	add	r7, sp, #0
   23a6e:	6078      	str	r0, [r7, #4]
   23a70:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   23a72:	683a      	ldr	r2, [r7, #0]
   23a74:	687b      	ldr	r3, [r7, #4]
   23a76:	0011      	movs	r1, r2
   23a78:	0018      	movs	r0, r3
   23a7a:	4b03      	ldr	r3, [pc, #12]	; (23a88 <nm_write_reg+0x20>)
   23a7c:	4798      	blx	r3
   23a7e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   23a80:	0018      	movs	r0, r3
   23a82:	46bd      	mov	sp, r7
   23a84:	b002      	add	sp, #8
   23a86:	bd80      	pop	{r7, pc}
   23a88:	00025a39 	.word	0x00025a39

00023a8c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23a8c:	b580      	push	{r7, lr}
   23a8e:	b084      	sub	sp, #16
   23a90:	af00      	add	r7, sp, #0
   23a92:	60f8      	str	r0, [r7, #12]
   23a94:	60b9      	str	r1, [r7, #8]
   23a96:	1dbb      	adds	r3, r7, #6
   23a98:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   23a9a:	1dbb      	adds	r3, r7, #6
   23a9c:	881a      	ldrh	r2, [r3, #0]
   23a9e:	68b9      	ldr	r1, [r7, #8]
   23aa0:	68fb      	ldr	r3, [r7, #12]
   23aa2:	0018      	movs	r0, r3
   23aa4:	4b03      	ldr	r3, [pc, #12]	; (23ab4 <p_nm_read_block+0x28>)
   23aa6:	4798      	blx	r3
   23aa8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23aaa:	0018      	movs	r0, r3
   23aac:	46bd      	mov	sp, r7
   23aae:	b004      	add	sp, #16
   23ab0:	bd80      	pop	{r7, pc}
   23ab2:	46c0      	nop			; (mov r8, r8)
   23ab4:	00025a89 	.word	0x00025a89

00023ab8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23ab8:	b580      	push	{r7, lr}
   23aba:	b086      	sub	sp, #24
   23abc:	af00      	add	r7, sp, #0
   23abe:	60f8      	str	r0, [r7, #12]
   23ac0:	60b9      	str	r1, [r7, #8]
   23ac2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23ac4:	4b2d      	ldr	r3, [pc, #180]	; (23b7c <nm_read_block+0xc4>)
   23ac6:	881a      	ldrh	r2, [r3, #0]
   23ac8:	2310      	movs	r3, #16
   23aca:	18fb      	adds	r3, r7, r3
   23acc:	3a08      	subs	r2, #8
   23ace:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23ad0:	2300      	movs	r3, #0
   23ad2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23ad4:	2313      	movs	r3, #19
   23ad6:	18fb      	adds	r3, r7, r3
   23ad8:	2200      	movs	r2, #0
   23ada:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23adc:	2310      	movs	r3, #16
   23ade:	18fb      	adds	r3, r7, r3
   23ae0:	881a      	ldrh	r2, [r3, #0]
   23ae2:	687b      	ldr	r3, [r7, #4]
   23ae4:	429a      	cmp	r2, r3
   23ae6:	d313      	bcc.n	23b10 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23ae8:	68ba      	ldr	r2, [r7, #8]
   23aea:	697b      	ldr	r3, [r7, #20]
   23aec:	18d1      	adds	r1, r2, r3
   23aee:	687b      	ldr	r3, [r7, #4]
   23af0:	b29a      	uxth	r2, r3
   23af2:	68fb      	ldr	r3, [r7, #12]
   23af4:	0018      	movs	r0, r3
   23af6:	4b22      	ldr	r3, [pc, #136]	; (23b80 <nm_read_block+0xc8>)
   23af8:	4798      	blx	r3
   23afa:	0003      	movs	r3, r0
   23afc:	b2da      	uxtb	r2, r3
   23afe:	2313      	movs	r3, #19
   23b00:	18fb      	adds	r3, r7, r3
   23b02:	781b      	ldrb	r3, [r3, #0]
   23b04:	18d3      	adds	r3, r2, r3
   23b06:	b2da      	uxtb	r2, r3
   23b08:	2313      	movs	r3, #19
   23b0a:	18fb      	adds	r3, r7, r3
   23b0c:	701a      	strb	r2, [r3, #0]
			break;
   23b0e:	e02d      	b.n	23b6c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23b10:	68ba      	ldr	r2, [r7, #8]
   23b12:	697b      	ldr	r3, [r7, #20]
   23b14:	18d1      	adds	r1, r2, r3
   23b16:	2310      	movs	r3, #16
   23b18:	18fb      	adds	r3, r7, r3
   23b1a:	881a      	ldrh	r2, [r3, #0]
   23b1c:	68fb      	ldr	r3, [r7, #12]
   23b1e:	0018      	movs	r0, r3
   23b20:	4b17      	ldr	r3, [pc, #92]	; (23b80 <nm_read_block+0xc8>)
   23b22:	4798      	blx	r3
   23b24:	0003      	movs	r3, r0
   23b26:	b2da      	uxtb	r2, r3
   23b28:	2313      	movs	r3, #19
   23b2a:	18fb      	adds	r3, r7, r3
   23b2c:	781b      	ldrb	r3, [r3, #0]
   23b2e:	18d3      	adds	r3, r2, r3
   23b30:	b2da      	uxtb	r2, r3
   23b32:	2313      	movs	r3, #19
   23b34:	18fb      	adds	r3, r7, r3
   23b36:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23b38:	2313      	movs	r3, #19
   23b3a:	18fb      	adds	r3, r7, r3
   23b3c:	781b      	ldrb	r3, [r3, #0]
   23b3e:	b25b      	sxtb	r3, r3
   23b40:	2b00      	cmp	r3, #0
   23b42:	d112      	bne.n	23b6a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23b44:	2310      	movs	r3, #16
   23b46:	18fb      	adds	r3, r7, r3
   23b48:	881b      	ldrh	r3, [r3, #0]
   23b4a:	687a      	ldr	r2, [r7, #4]
   23b4c:	1ad3      	subs	r3, r2, r3
   23b4e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23b50:	2310      	movs	r3, #16
   23b52:	18fb      	adds	r3, r7, r3
   23b54:	881b      	ldrh	r3, [r3, #0]
   23b56:	697a      	ldr	r2, [r7, #20]
   23b58:	18d3      	adds	r3, r2, r3
   23b5a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23b5c:	2310      	movs	r3, #16
   23b5e:	18fb      	adds	r3, r7, r3
   23b60:	881b      	ldrh	r3, [r3, #0]
   23b62:	68fa      	ldr	r2, [r7, #12]
   23b64:	18d3      	adds	r3, r2, r3
   23b66:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23b68:	e7b8      	b.n	23adc <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23b6a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23b6c:	2313      	movs	r3, #19
   23b6e:	18fb      	adds	r3, r7, r3
   23b70:	781b      	ldrb	r3, [r3, #0]
   23b72:	b25b      	sxtb	r3, r3
}
   23b74:	0018      	movs	r0, r3
   23b76:	46bd      	mov	sp, r7
   23b78:	b006      	add	sp, #24
   23b7a:	bd80      	pop	{r7, pc}
   23b7c:	20000124 	.word	0x20000124
   23b80:	00023a8d 	.word	0x00023a8d

00023b84 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23b84:	b580      	push	{r7, lr}
   23b86:	b084      	sub	sp, #16
   23b88:	af00      	add	r7, sp, #0
   23b8a:	60f8      	str	r0, [r7, #12]
   23b8c:	60b9      	str	r1, [r7, #8]
   23b8e:	1dbb      	adds	r3, r7, #6
   23b90:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   23b92:	1dbb      	adds	r3, r7, #6
   23b94:	881a      	ldrh	r2, [r3, #0]
   23b96:	68b9      	ldr	r1, [r7, #8]
   23b98:	68fb      	ldr	r3, [r7, #12]
   23b9a:	0018      	movs	r0, r3
   23b9c:	4b03      	ldr	r3, [pc, #12]	; (23bac <p_nm_write_block+0x28>)
   23b9e:	4798      	blx	r3
   23ba0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23ba2:	0018      	movs	r0, r3
   23ba4:	46bd      	mov	sp, r7
   23ba6:	b004      	add	sp, #16
   23ba8:	bd80      	pop	{r7, pc}
   23baa:	46c0      	nop			; (mov r8, r8)
   23bac:	00025ae1 	.word	0x00025ae1

00023bb0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23bb0:	b580      	push	{r7, lr}
   23bb2:	b086      	sub	sp, #24
   23bb4:	af00      	add	r7, sp, #0
   23bb6:	60f8      	str	r0, [r7, #12]
   23bb8:	60b9      	str	r1, [r7, #8]
   23bba:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23bbc:	4b2d      	ldr	r3, [pc, #180]	; (23c74 <nm_write_block+0xc4>)
   23bbe:	881a      	ldrh	r2, [r3, #0]
   23bc0:	2310      	movs	r3, #16
   23bc2:	18fb      	adds	r3, r7, r3
   23bc4:	3a08      	subs	r2, #8
   23bc6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23bc8:	2300      	movs	r3, #0
   23bca:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23bcc:	2313      	movs	r3, #19
   23bce:	18fb      	adds	r3, r7, r3
   23bd0:	2200      	movs	r2, #0
   23bd2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23bd4:	2310      	movs	r3, #16
   23bd6:	18fb      	adds	r3, r7, r3
   23bd8:	881a      	ldrh	r2, [r3, #0]
   23bda:	687b      	ldr	r3, [r7, #4]
   23bdc:	429a      	cmp	r2, r3
   23bde:	d313      	bcc.n	23c08 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23be0:	68ba      	ldr	r2, [r7, #8]
   23be2:	697b      	ldr	r3, [r7, #20]
   23be4:	18d1      	adds	r1, r2, r3
   23be6:	687b      	ldr	r3, [r7, #4]
   23be8:	b29a      	uxth	r2, r3
   23bea:	68fb      	ldr	r3, [r7, #12]
   23bec:	0018      	movs	r0, r3
   23bee:	4b22      	ldr	r3, [pc, #136]	; (23c78 <nm_write_block+0xc8>)
   23bf0:	4798      	blx	r3
   23bf2:	0003      	movs	r3, r0
   23bf4:	b2da      	uxtb	r2, r3
   23bf6:	2313      	movs	r3, #19
   23bf8:	18fb      	adds	r3, r7, r3
   23bfa:	781b      	ldrb	r3, [r3, #0]
   23bfc:	18d3      	adds	r3, r2, r3
   23bfe:	b2da      	uxtb	r2, r3
   23c00:	2313      	movs	r3, #19
   23c02:	18fb      	adds	r3, r7, r3
   23c04:	701a      	strb	r2, [r3, #0]
			break;
   23c06:	e02d      	b.n	23c64 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23c08:	68ba      	ldr	r2, [r7, #8]
   23c0a:	697b      	ldr	r3, [r7, #20]
   23c0c:	18d1      	adds	r1, r2, r3
   23c0e:	2310      	movs	r3, #16
   23c10:	18fb      	adds	r3, r7, r3
   23c12:	881a      	ldrh	r2, [r3, #0]
   23c14:	68fb      	ldr	r3, [r7, #12]
   23c16:	0018      	movs	r0, r3
   23c18:	4b17      	ldr	r3, [pc, #92]	; (23c78 <nm_write_block+0xc8>)
   23c1a:	4798      	blx	r3
   23c1c:	0003      	movs	r3, r0
   23c1e:	b2da      	uxtb	r2, r3
   23c20:	2313      	movs	r3, #19
   23c22:	18fb      	adds	r3, r7, r3
   23c24:	781b      	ldrb	r3, [r3, #0]
   23c26:	18d3      	adds	r3, r2, r3
   23c28:	b2da      	uxtb	r2, r3
   23c2a:	2313      	movs	r3, #19
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23c30:	2313      	movs	r3, #19
   23c32:	18fb      	adds	r3, r7, r3
   23c34:	781b      	ldrb	r3, [r3, #0]
   23c36:	b25b      	sxtb	r3, r3
   23c38:	2b00      	cmp	r3, #0
   23c3a:	d112      	bne.n	23c62 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23c3c:	2310      	movs	r3, #16
   23c3e:	18fb      	adds	r3, r7, r3
   23c40:	881b      	ldrh	r3, [r3, #0]
   23c42:	687a      	ldr	r2, [r7, #4]
   23c44:	1ad3      	subs	r3, r2, r3
   23c46:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23c48:	2310      	movs	r3, #16
   23c4a:	18fb      	adds	r3, r7, r3
   23c4c:	881b      	ldrh	r3, [r3, #0]
   23c4e:	697a      	ldr	r2, [r7, #20]
   23c50:	18d3      	adds	r3, r2, r3
   23c52:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23c54:	2310      	movs	r3, #16
   23c56:	18fb      	adds	r3, r7, r3
   23c58:	881b      	ldrh	r3, [r3, #0]
   23c5a:	68fa      	ldr	r2, [r7, #12]
   23c5c:	18d3      	adds	r3, r2, r3
   23c5e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23c60:	e7b8      	b.n	23bd4 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23c62:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23c64:	2313      	movs	r3, #19
   23c66:	18fb      	adds	r3, r7, r3
   23c68:	781b      	ldrb	r3, [r3, #0]
   23c6a:	b25b      	sxtb	r3, r3
}
   23c6c:	0018      	movs	r0, r3
   23c6e:	46bd      	mov	sp, r7
   23c70:	b006      	add	sp, #24
   23c72:	bd80      	pop	{r7, pc}
   23c74:	20000124 	.word	0x20000124
   23c78:	00023b85 	.word	0x00023b85

00023c7c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23c7c:	b590      	push	{r4, r7, lr}
   23c7e:	b089      	sub	sp, #36	; 0x24
   23c80:	af00      	add	r7, sp, #0
   23c82:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23c84:	2300      	movs	r3, #0
   23c86:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23c88:	231f      	movs	r3, #31
   23c8a:	18fb      	adds	r3, r7, r3
   23c8c:	2200      	movs	r2, #0
   23c8e:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23c90:	230c      	movs	r3, #12
   23c92:	18fb      	adds	r3, r7, r3
   23c94:	0018      	movs	r0, r3
   23c96:	2308      	movs	r3, #8
   23c98:	001a      	movs	r2, r3
   23c9a:	2100      	movs	r1, #0
   23c9c:	4b64      	ldr	r3, [pc, #400]	; (23e30 <nm_get_firmware_full_info+0x1b4>)
   23c9e:	4798      	blx	r3
	if (pstrRev != NULL)
   23ca0:	687b      	ldr	r3, [r7, #4]
   23ca2:	2b00      	cmp	r3, #0
   23ca4:	d100      	bne.n	23ca8 <nm_get_firmware_full_info+0x2c>
   23ca6:	e0ba      	b.n	23e1e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23ca8:	687b      	ldr	r3, [r7, #4]
   23caa:	2228      	movs	r2, #40	; 0x28
   23cac:	2100      	movs	r1, #0
   23cae:	0018      	movs	r0, r3
   23cb0:	4b60      	ldr	r3, [pc, #384]	; (23e34 <nm_get_firmware_full_info+0x1b8>)
   23cb2:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23cb4:	231f      	movs	r3, #31
   23cb6:	18fc      	adds	r4, r7, r3
   23cb8:	2314      	movs	r3, #20
   23cba:	18fb      	adds	r3, r7, r3
   23cbc:	4a5e      	ldr	r2, [pc, #376]	; (23e38 <nm_get_firmware_full_info+0x1bc>)
   23cbe:	0019      	movs	r1, r3
   23cc0:	0010      	movs	r0, r2
   23cc2:	4b5e      	ldr	r3, [pc, #376]	; (23e3c <nm_get_firmware_full_info+0x1c0>)
   23cc4:	4798      	blx	r3
   23cc6:	0003      	movs	r3, r0
   23cc8:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23cca:	231f      	movs	r3, #31
   23ccc:	18fb      	adds	r3, r7, r3
   23cce:	781b      	ldrb	r3, [r3, #0]
   23cd0:	b25b      	sxtb	r3, r3
   23cd2:	2b00      	cmp	r3, #0
   23cd4:	d000      	beq.n	23cd8 <nm_get_firmware_full_info+0x5c>
   23cd6:	e0a2      	b.n	23e1e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23cd8:	697b      	ldr	r3, [r7, #20]
   23cda:	2b00      	cmp	r3, #0
   23cdc:	d100      	bne.n	23ce0 <nm_get_firmware_full_info+0x64>
   23cde:	e09a      	b.n	23e16 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23ce0:	697b      	ldr	r3, [r7, #20]
   23ce2:	22c0      	movs	r2, #192	; 0xc0
   23ce4:	0292      	lsls	r2, r2, #10
   23ce6:	4313      	orrs	r3, r2
   23ce8:	221f      	movs	r2, #31
   23cea:	18bc      	adds	r4, r7, r2
   23cec:	220c      	movs	r2, #12
   23cee:	18b9      	adds	r1, r7, r2
   23cf0:	2208      	movs	r2, #8
   23cf2:	0018      	movs	r0, r3
   23cf4:	4b52      	ldr	r3, [pc, #328]	; (23e40 <nm_get_firmware_full_info+0x1c4>)
   23cf6:	4798      	blx	r3
   23cf8:	0003      	movs	r3, r0
   23cfa:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23cfc:	231f      	movs	r3, #31
   23cfe:	18fb      	adds	r3, r7, r3
   23d00:	781b      	ldrb	r3, [r3, #0]
   23d02:	b25b      	sxtb	r3, r3
   23d04:	2b00      	cmp	r3, #0
   23d06:	d000      	beq.n	23d0a <nm_get_firmware_full_info+0x8e>
   23d08:	e089      	b.n	23e1e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23d0a:	230c      	movs	r3, #12
   23d0c:	18fb      	adds	r3, r7, r3
   23d0e:	685b      	ldr	r3, [r3, #4]
   23d10:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23d12:	697b      	ldr	r3, [r7, #20]
   23d14:	041b      	lsls	r3, r3, #16
   23d16:	0c1b      	lsrs	r3, r3, #16
   23d18:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23d1a:	697b      	ldr	r3, [r7, #20]
   23d1c:	2b00      	cmp	r3, #0
   23d1e:	d100      	bne.n	23d22 <nm_get_firmware_full_info+0xa6>
   23d20:	e074      	b.n	23e0c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23d22:	697b      	ldr	r3, [r7, #20]
   23d24:	22c0      	movs	r2, #192	; 0xc0
   23d26:	0292      	lsls	r2, r2, #10
   23d28:	4313      	orrs	r3, r2
   23d2a:	221f      	movs	r2, #31
   23d2c:	18bc      	adds	r4, r7, r2
   23d2e:	6879      	ldr	r1, [r7, #4]
   23d30:	2228      	movs	r2, #40	; 0x28
   23d32:	0018      	movs	r0, r3
   23d34:	4b42      	ldr	r3, [pc, #264]	; (23e40 <nm_get_firmware_full_info+0x1c4>)
   23d36:	4798      	blx	r3
   23d38:	0003      	movs	r3, r0
   23d3a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23d3c:	231f      	movs	r3, #31
   23d3e:	18fb      	adds	r3, r7, r3
   23d40:	781b      	ldrb	r3, [r3, #0]
   23d42:	b25b      	sxtb	r3, r3
   23d44:	2b00      	cmp	r3, #0
   23d46:	d16a      	bne.n	23e1e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23d48:	687b      	ldr	r3, [r7, #4]
   23d4a:	791b      	ldrb	r3, [r3, #4]
   23d4c:	021b      	lsls	r3, r3, #8
   23d4e:	b21a      	sxth	r2, r3
   23d50:	687b      	ldr	r3, [r7, #4]
   23d52:	795b      	ldrb	r3, [r3, #5]
   23d54:	011b      	lsls	r3, r3, #4
   23d56:	b21b      	sxth	r3, r3
   23d58:	21ff      	movs	r1, #255	; 0xff
   23d5a:	400b      	ands	r3, r1
   23d5c:	b21b      	sxth	r3, r3
   23d5e:	4313      	orrs	r3, r2
   23d60:	b21a      	sxth	r2, r3
   23d62:	687b      	ldr	r3, [r7, #4]
   23d64:	799b      	ldrb	r3, [r3, #6]
   23d66:	b21b      	sxth	r3, r3
   23d68:	210f      	movs	r1, #15
   23d6a:	400b      	ands	r3, r1
   23d6c:	b21b      	sxth	r3, r3
   23d6e:	4313      	orrs	r3, r2
   23d70:	b21a      	sxth	r2, r3
   23d72:	231c      	movs	r3, #28
   23d74:	18fb      	adds	r3, r7, r3
   23d76:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23d78:	231a      	movs	r3, #26
   23d7a:	18fb      	adds	r3, r7, r3
   23d7c:	4a31      	ldr	r2, [pc, #196]	; (23e44 <nm_get_firmware_full_info+0x1c8>)
   23d7e:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23d80:	687b      	ldr	r3, [r7, #4]
   23d82:	79db      	ldrb	r3, [r3, #7]
   23d84:	021b      	lsls	r3, r3, #8
   23d86:	b21a      	sxth	r2, r3
   23d88:	687b      	ldr	r3, [r7, #4]
   23d8a:	7a1b      	ldrb	r3, [r3, #8]
   23d8c:	011b      	lsls	r3, r3, #4
   23d8e:	b21b      	sxth	r3, r3
   23d90:	21ff      	movs	r1, #255	; 0xff
   23d92:	400b      	ands	r3, r1
   23d94:	b21b      	sxth	r3, r3
   23d96:	4313      	orrs	r3, r2
   23d98:	b21a      	sxth	r2, r3
   23d9a:	687b      	ldr	r3, [r7, #4]
   23d9c:	7a5b      	ldrb	r3, [r3, #9]
   23d9e:	b21b      	sxth	r3, r3
   23da0:	210f      	movs	r1, #15
   23da2:	400b      	ands	r3, r1
   23da4:	b21b      	sxth	r3, r3
   23da6:	4313      	orrs	r3, r2
   23da8:	b21a      	sxth	r2, r3
   23daa:	2318      	movs	r3, #24
   23dac:	18fb      	adds	r3, r7, r3
   23dae:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23db0:	231c      	movs	r3, #28
   23db2:	18fb      	adds	r3, r7, r3
   23db4:	881b      	ldrh	r3, [r3, #0]
   23db6:	2b00      	cmp	r3, #0
   23db8:	d009      	beq.n	23dce <nm_get_firmware_full_info+0x152>
   23dba:	2318      	movs	r3, #24
   23dbc:	18fb      	adds	r3, r7, r3
   23dbe:	881b      	ldrh	r3, [r3, #0]
   23dc0:	2b00      	cmp	r3, #0
   23dc2:	d004      	beq.n	23dce <nm_get_firmware_full_info+0x152>
   23dc4:	2318      	movs	r3, #24
   23dc6:	18fb      	adds	r3, r7, r3
   23dc8:	881b      	ldrh	r3, [r3, #0]
   23dca:	2b00      	cmp	r3, #0
   23dcc:	d104      	bne.n	23dd8 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23dce:	231f      	movs	r3, #31
   23dd0:	18fb      	adds	r3, r7, r3
   23dd2:	22f4      	movs	r2, #244	; 0xf4
   23dd4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23dd6:	e022      	b.n	23e1e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23dd8:	231a      	movs	r3, #26
   23dda:	18fa      	adds	r2, r7, r3
   23ddc:	2318      	movs	r3, #24
   23dde:	18fb      	adds	r3, r7, r3
   23de0:	8812      	ldrh	r2, [r2, #0]
   23de2:	881b      	ldrh	r3, [r3, #0]
   23de4:	429a      	cmp	r2, r3
   23de6:	d204      	bcs.n	23df2 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23de8:	231f      	movs	r3, #31
   23dea:	18fb      	adds	r3, r7, r3
   23dec:	22f3      	movs	r2, #243	; 0xf3
   23dee:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23df0:	e015      	b.n	23e1e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23df2:	231a      	movs	r3, #26
   23df4:	18fa      	adds	r2, r7, r3
   23df6:	231c      	movs	r3, #28
   23df8:	18fb      	adds	r3, r7, r3
   23dfa:	8812      	ldrh	r2, [r2, #0]
   23dfc:	881b      	ldrh	r3, [r3, #0]
   23dfe:	429a      	cmp	r2, r3
   23e00:	d90d      	bls.n	23e1e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23e02:	231f      	movs	r3, #31
   23e04:	18fb      	adds	r3, r7, r3
   23e06:	22f3      	movs	r2, #243	; 0xf3
   23e08:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23e0a:	e008      	b.n	23e1e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   23e0c:	231f      	movs	r3, #31
   23e0e:	18fb      	adds	r3, r7, r3
   23e10:	22f4      	movs	r2, #244	; 0xf4
   23e12:	701a      	strb	r2, [r3, #0]
   23e14:	e003      	b.n	23e1e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23e16:	231f      	movs	r3, #31
   23e18:	18fb      	adds	r3, r7, r3
   23e1a:	22f4      	movs	r2, #244	; 0xf4
   23e1c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   23e1e:	231f      	movs	r3, #31
   23e20:	18fb      	adds	r3, r7, r3
   23e22:	781b      	ldrb	r3, [r3, #0]
   23e24:	b25b      	sxtb	r3, r3
}
   23e26:	0018      	movs	r0, r3
   23e28:	46bd      	mov	sp, r7
   23e2a:	b009      	add	sp, #36	; 0x24
   23e2c:	bd90      	pop	{r4, r7, pc}
   23e2e:	46c0      	nop			; (mov r8, r8)
   23e30:	0003577f 	.word	0x0003577f
   23e34:	00021a8d 	.word	0x00021a8d
   23e38:	000c0008 	.word	0x000c0008
   23e3c:	00023a45 	.word	0x00023a45
   23e40:	00023ab9 	.word	0x00023ab9
   23e44:	00001354 	.word	0x00001354

00023e48 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23e48:	b590      	push	{r4, r7, lr}
   23e4a:	b085      	sub	sp, #20
   23e4c:	af00      	add	r7, sp, #0
   23e4e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23e50:	230f      	movs	r3, #15
   23e52:	18fb      	adds	r3, r7, r3
   23e54:	2200      	movs	r2, #0
   23e56:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23e58:	687b      	ldr	r3, [r7, #4]
   23e5a:	2b00      	cmp	r3, #0
   23e5c:	d013      	beq.n	23e86 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23e5e:	230e      	movs	r3, #14
   23e60:	18fb      	adds	r3, r7, r3
   23e62:	687a      	ldr	r2, [r7, #4]
   23e64:	7812      	ldrb	r2, [r2, #0]
   23e66:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23e68:	230e      	movs	r3, #14
   23e6a:	18fb      	adds	r3, r7, r3
   23e6c:	781b      	ldrb	r3, [r3, #0]
   23e6e:	2b00      	cmp	r3, #0
   23e70:	d004      	beq.n	23e7c <nm_drv_init+0x34>
   23e72:	230e      	movs	r3, #14
   23e74:	18fb      	adds	r3, r7, r3
   23e76:	781b      	ldrb	r3, [r3, #0]
   23e78:	2b04      	cmp	r3, #4
   23e7a:	d908      	bls.n	23e8e <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23e7c:	230e      	movs	r3, #14
   23e7e:	18fb      	adds	r3, r7, r3
   23e80:	2201      	movs	r2, #1
   23e82:	701a      	strb	r2, [r3, #0]
   23e84:	e003      	b.n	23e8e <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23e86:	230e      	movs	r3, #14
   23e88:	18fb      	adds	r3, r7, r3
   23e8a:	2201      	movs	r2, #1
   23e8c:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23e8e:	230f      	movs	r3, #15
   23e90:	18fc      	adds	r4, r7, r3
   23e92:	2000      	movs	r0, #0
   23e94:	4b41      	ldr	r3, [pc, #260]	; (23f9c <nm_drv_init+0x154>)
   23e96:	4798      	blx	r3
   23e98:	0003      	movs	r3, r0
   23e9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e9c:	230f      	movs	r3, #15
   23e9e:	18fb      	adds	r3, r7, r3
   23ea0:	781b      	ldrb	r3, [r3, #0]
   23ea2:	b25b      	sxtb	r3, r3
   23ea4:	2b00      	cmp	r3, #0
   23ea6:	d00f      	beq.n	23ec8 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23ea8:	2390      	movs	r3, #144	; 0x90
   23eaa:	005a      	lsls	r2, r3, #1
   23eac:	493c      	ldr	r1, [pc, #240]	; (23fa0 <nm_drv_init+0x158>)
   23eae:	4b3d      	ldr	r3, [pc, #244]	; (23fa4 <nm_drv_init+0x15c>)
   23eb0:	0018      	movs	r0, r3
   23eb2:	4b3d      	ldr	r3, [pc, #244]	; (23fa8 <nm_drv_init+0x160>)
   23eb4:	4798      	blx	r3
   23eb6:	4b3d      	ldr	r3, [pc, #244]	; (23fac <nm_drv_init+0x164>)
   23eb8:	0018      	movs	r0, r3
   23eba:	4b3b      	ldr	r3, [pc, #236]	; (23fa8 <nm_drv_init+0x160>)
   23ebc:	4798      	blx	r3
   23ebe:	4b3c      	ldr	r3, [pc, #240]	; (23fb0 <nm_drv_init+0x168>)
   23ec0:	0018      	movs	r0, r3
   23ec2:	4b39      	ldr	r3, [pc, #228]	; (23fa8 <nm_drv_init+0x160>)
   23ec4:	4798      	blx	r3
		goto ERR1;
   23ec6:	e061      	b.n	23f8c <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23ec8:	4b3a      	ldr	r3, [pc, #232]	; (23fb4 <nm_drv_init+0x16c>)
   23eca:	0018      	movs	r0, r3
   23ecc:	4b36      	ldr	r3, [pc, #216]	; (23fa8 <nm_drv_init+0x160>)
   23ece:	4798      	blx	r3
   23ed0:	4b39      	ldr	r3, [pc, #228]	; (23fb8 <nm_drv_init+0x170>)
   23ed2:	4798      	blx	r3
   23ed4:	0002      	movs	r2, r0
   23ed6:	4b39      	ldr	r3, [pc, #228]	; (23fbc <nm_drv_init+0x174>)
   23ed8:	0011      	movs	r1, r2
   23eda:	0018      	movs	r0, r3
   23edc:	4b32      	ldr	r3, [pc, #200]	; (23fa8 <nm_drv_init+0x160>)
   23ede:	4798      	blx	r3
   23ee0:	4b33      	ldr	r3, [pc, #204]	; (23fb0 <nm_drv_init+0x168>)
   23ee2:	0018      	movs	r0, r3
   23ee4:	4b30      	ldr	r3, [pc, #192]	; (23fa8 <nm_drv_init+0x160>)
   23ee6:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23ee8:	4b35      	ldr	r3, [pc, #212]	; (23fc0 <nm_drv_init+0x178>)
   23eea:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23eec:	230f      	movs	r3, #15
   23eee:	18fc      	adds	r4, r7, r3
   23ef0:	230e      	movs	r3, #14
   23ef2:	18fb      	adds	r3, r7, r3
   23ef4:	781b      	ldrb	r3, [r3, #0]
   23ef6:	0018      	movs	r0, r3
   23ef8:	4b32      	ldr	r3, [pc, #200]	; (23fc4 <nm_drv_init+0x17c>)
   23efa:	4798      	blx	r3
   23efc:	0003      	movs	r3, r0
   23efe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23f00:	230f      	movs	r3, #15
   23f02:	18fb      	adds	r3, r7, r3
   23f04:	781b      	ldrb	r3, [r3, #0]
   23f06:	b25b      	sxtb	r3, r3
   23f08:	2b00      	cmp	r3, #0
   23f0a:	d13a      	bne.n	23f82 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23f0c:	230f      	movs	r3, #15
   23f0e:	18fc      	adds	r4, r7, r3
   23f10:	230e      	movs	r3, #14
   23f12:	18fb      	adds	r3, r7, r3
   23f14:	781b      	ldrb	r3, [r3, #0]
   23f16:	0018      	movs	r0, r3
   23f18:	4b2b      	ldr	r3, [pc, #172]	; (23fc8 <nm_drv_init+0x180>)
   23f1a:	4798      	blx	r3
   23f1c:	0003      	movs	r3, r0
   23f1e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23f20:	230f      	movs	r3, #15
   23f22:	18fb      	adds	r3, r7, r3
   23f24:	781b      	ldrb	r3, [r3, #0]
   23f26:	b25b      	sxtb	r3, r3
   23f28:	2b00      	cmp	r3, #0
   23f2a:	d12c      	bne.n	23f86 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23f2c:	230e      	movs	r3, #14
   23f2e:	18fb      	adds	r3, r7, r3
   23f30:	781b      	ldrb	r3, [r3, #0]
   23f32:	2b02      	cmp	r3, #2
   23f34:	d02a      	beq.n	23f8c <nm_drv_init+0x144>
   23f36:	230e      	movs	r3, #14
   23f38:	18fb      	adds	r3, r7, r3
   23f3a:	781b      	ldrb	r3, [r3, #0]
   23f3c:	2b03      	cmp	r3, #3
   23f3e:	d025      	beq.n	23f8c <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23f40:	230f      	movs	r3, #15
   23f42:	18fc      	adds	r4, r7, r3
   23f44:	4b21      	ldr	r3, [pc, #132]	; (23fcc <nm_drv_init+0x184>)
   23f46:	4798      	blx	r3
   23f48:	0003      	movs	r3, r0
   23f4a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23f4c:	230f      	movs	r3, #15
   23f4e:	18fb      	adds	r3, r7, r3
   23f50:	781b      	ldrb	r3, [r3, #0]
   23f52:	b25b      	sxtb	r3, r3
   23f54:	2b00      	cmp	r3, #0
   23f56:	d00f      	beq.n	23f78 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23f58:	23a7      	movs	r3, #167	; 0xa7
   23f5a:	005a      	lsls	r2, r3, #1
   23f5c:	4910      	ldr	r1, [pc, #64]	; (23fa0 <nm_drv_init+0x158>)
   23f5e:	4b11      	ldr	r3, [pc, #68]	; (23fa4 <nm_drv_init+0x15c>)
   23f60:	0018      	movs	r0, r3
   23f62:	4b11      	ldr	r3, [pc, #68]	; (23fa8 <nm_drv_init+0x160>)
   23f64:	4798      	blx	r3
   23f66:	4b1a      	ldr	r3, [pc, #104]	; (23fd0 <nm_drv_init+0x188>)
   23f68:	0018      	movs	r0, r3
   23f6a:	4b0f      	ldr	r3, [pc, #60]	; (23fa8 <nm_drv_init+0x160>)
   23f6c:	4798      	blx	r3
   23f6e:	4b10      	ldr	r3, [pc, #64]	; (23fb0 <nm_drv_init+0x168>)
   23f70:	0018      	movs	r0, r3
   23f72:	4b0d      	ldr	r3, [pc, #52]	; (23fa8 <nm_drv_init+0x160>)
   23f74:	4798      	blx	r3
		goto ERR2;
   23f76:	e007      	b.n	23f88 <nm_drv_init+0x140>
	}
	return ret;
   23f78:	230f      	movs	r3, #15
   23f7a:	18fb      	adds	r3, r7, r3
   23f7c:	781b      	ldrb	r3, [r3, #0]
   23f7e:	b25b      	sxtb	r3, r3
   23f80:	e008      	b.n	23f94 <nm_drv_init+0x14c>
		goto ERR2;
   23f82:	46c0      	nop			; (mov r8, r8)
   23f84:	e000      	b.n	23f88 <nm_drv_init+0x140>
		goto ERR2;
   23f86:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23f88:	4b12      	ldr	r3, [pc, #72]	; (23fd4 <nm_drv_init+0x18c>)
   23f8a:	4798      	blx	r3
ERR1:
	return ret;
   23f8c:	230f      	movs	r3, #15
   23f8e:	18fb      	adds	r3, r7, r3
   23f90:	781b      	ldrb	r3, [r3, #0]
   23f92:	b25b      	sxtb	r3, r3
}
   23f94:	0018      	movs	r0, r3
   23f96:	46bd      	mov	sp, r7
   23f98:	b005      	add	sp, #20
   23f9a:	bd90      	pop	{r4, r7, pc}
   23f9c:	000239a9 	.word	0x000239a9
   23fa0:	00039b94 	.word	0x00039b94
   23fa4:	00039ac4 	.word	0x00039ac4
   23fa8:	0001ed59 	.word	0x0001ed59
   23fac:	00039ad8 	.word	0x00039ad8
   23fb0:	00039af4 	.word	0x00039af4
   23fb4:	00039af8 	.word	0x00039af8
   23fb8:	00023345 	.word	0x00023345
   23fbc:	00039b04 	.word	0x00039b04
   23fc0:	00025861 	.word	0x00025861
   23fc4:	0002369d 	.word	0x0002369d
   23fc8:	00023835 	.word	0x00023835
   23fcc:	00023291 	.word	0x00023291
   23fd0:	00039b14 	.word	0x00039b14
   23fd4:	000239dd 	.word	0x000239dd

00023fd8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23fd8:	b590      	push	{r4, r7, lr}
   23fda:	b085      	sub	sp, #20
   23fdc:	af00      	add	r7, sp, #0
   23fde:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   23fe0:	230f      	movs	r3, #15
   23fe2:	18fc      	adds	r4, r7, r3
   23fe4:	4b2e      	ldr	r3, [pc, #184]	; (240a0 <nm_drv_deinit+0xc8>)
   23fe6:	4798      	blx	r3
   23fe8:	0003      	movs	r3, r0
   23fea:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23fec:	230f      	movs	r3, #15
   23fee:	18fb      	adds	r3, r7, r3
   23ff0:	781b      	ldrb	r3, [r3, #0]
   23ff2:	b25b      	sxtb	r3, r3
   23ff4:	2b00      	cmp	r3, #0
   23ff6:	d010      	beq.n	2401a <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23ff8:	2366      	movs	r3, #102	; 0x66
   23ffa:	33ff      	adds	r3, #255	; 0xff
   23ffc:	001a      	movs	r2, r3
   23ffe:	4929      	ldr	r1, [pc, #164]	; (240a4 <nm_drv_deinit+0xcc>)
   24000:	4b29      	ldr	r3, [pc, #164]	; (240a8 <nm_drv_deinit+0xd0>)
   24002:	0018      	movs	r0, r3
   24004:	4b29      	ldr	r3, [pc, #164]	; (240ac <nm_drv_deinit+0xd4>)
   24006:	4798      	blx	r3
   24008:	4b29      	ldr	r3, [pc, #164]	; (240b0 <nm_drv_deinit+0xd8>)
   2400a:	0018      	movs	r0, r3
   2400c:	4b27      	ldr	r3, [pc, #156]	; (240ac <nm_drv_deinit+0xd4>)
   2400e:	4798      	blx	r3
   24010:	4b28      	ldr	r3, [pc, #160]	; (240b4 <nm_drv_deinit+0xdc>)
   24012:	0018      	movs	r0, r3
   24014:	4b25      	ldr	r3, [pc, #148]	; (240ac <nm_drv_deinit+0xd4>)
   24016:	4798      	blx	r3
		goto ERR1;
   24018:	e03a      	b.n	24090 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   2401a:	230f      	movs	r3, #15
   2401c:	18fc      	adds	r4, r7, r3
   2401e:	2000      	movs	r0, #0
   24020:	4b25      	ldr	r3, [pc, #148]	; (240b8 <nm_drv_deinit+0xe0>)
   24022:	4798      	blx	r3
   24024:	0003      	movs	r3, r0
   24026:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24028:	230f      	movs	r3, #15
   2402a:	18fb      	adds	r3, r7, r3
   2402c:	781b      	ldrb	r3, [r3, #0]
   2402e:	b25b      	sxtb	r3, r3
   24030:	2b00      	cmp	r3, #0
   24032:	d00f      	beq.n	24054 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   24034:	23b6      	movs	r3, #182	; 0xb6
   24036:	005a      	lsls	r2, r3, #1
   24038:	491a      	ldr	r1, [pc, #104]	; (240a4 <nm_drv_deinit+0xcc>)
   2403a:	4b1b      	ldr	r3, [pc, #108]	; (240a8 <nm_drv_deinit+0xd0>)
   2403c:	0018      	movs	r0, r3
   2403e:	4b1b      	ldr	r3, [pc, #108]	; (240ac <nm_drv_deinit+0xd4>)
   24040:	4798      	blx	r3
   24042:	4b1e      	ldr	r3, [pc, #120]	; (240bc <nm_drv_deinit+0xe4>)
   24044:	0018      	movs	r0, r3
   24046:	4b19      	ldr	r3, [pc, #100]	; (240ac <nm_drv_deinit+0xd4>)
   24048:	4798      	blx	r3
   2404a:	4b1a      	ldr	r3, [pc, #104]	; (240b4 <nm_drv_deinit+0xdc>)
   2404c:	0018      	movs	r0, r3
   2404e:	4b17      	ldr	r3, [pc, #92]	; (240ac <nm_drv_deinit+0xd4>)
   24050:	4798      	blx	r3
		goto ERR1;
   24052:	e01d      	b.n	24090 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   24054:	230f      	movs	r3, #15
   24056:	18fc      	adds	r4, r7, r3
   24058:	4b19      	ldr	r3, [pc, #100]	; (240c0 <nm_drv_deinit+0xe8>)
   2405a:	4798      	blx	r3
   2405c:	0003      	movs	r3, r0
   2405e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24060:	230f      	movs	r3, #15
   24062:	18fb      	adds	r3, r7, r3
   24064:	781b      	ldrb	r3, [r3, #0]
   24066:	b25b      	sxtb	r3, r3
   24068:	2b00      	cmp	r3, #0
   2406a:	d00f      	beq.n	2408c <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   2406c:	23b9      	movs	r3, #185	; 0xb9
   2406e:	005a      	lsls	r2, r3, #1
   24070:	490c      	ldr	r1, [pc, #48]	; (240a4 <nm_drv_deinit+0xcc>)
   24072:	4b0d      	ldr	r3, [pc, #52]	; (240a8 <nm_drv_deinit+0xd0>)
   24074:	0018      	movs	r0, r3
   24076:	4b0d      	ldr	r3, [pc, #52]	; (240ac <nm_drv_deinit+0xd4>)
   24078:	4798      	blx	r3
   2407a:	4b12      	ldr	r3, [pc, #72]	; (240c4 <nm_drv_deinit+0xec>)
   2407c:	0018      	movs	r0, r3
   2407e:	4b0b      	ldr	r3, [pc, #44]	; (240ac <nm_drv_deinit+0xd4>)
   24080:	4798      	blx	r3
   24082:	4b0c      	ldr	r3, [pc, #48]	; (240b4 <nm_drv_deinit+0xdc>)
   24084:	0018      	movs	r0, r3
   24086:	4b09      	ldr	r3, [pc, #36]	; (240ac <nm_drv_deinit+0xd4>)
   24088:	4798      	blx	r3
		goto ERR1;
   2408a:	e001      	b.n	24090 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   2408c:	4b0e      	ldr	r3, [pc, #56]	; (240c8 <nm_drv_deinit+0xf0>)
   2408e:	4798      	blx	r3
#endif

ERR1:
	return ret;
   24090:	230f      	movs	r3, #15
   24092:	18fb      	adds	r3, r7, r3
   24094:	781b      	ldrb	r3, [r3, #0]
   24096:	b25b      	sxtb	r3, r3
}
   24098:	0018      	movs	r0, r3
   2409a:	46bd      	mov	sp, r7
   2409c:	b005      	add	sp, #20
   2409e:	bd90      	pop	{r4, r7, pc}
   240a0:	000238e9 	.word	0x000238e9
   240a4:	00039ba0 	.word	0x00039ba0
   240a8:	00039ac4 	.word	0x00039ac4
   240ac:	0001ed59 	.word	0x0001ed59
   240b0:	00039b34 	.word	0x00039b34
   240b4:	00039af4 	.word	0x00039af4
   240b8:	00026d09 	.word	0x00026d09
   240bc:	00039b54 	.word	0x00039b54
   240c0:	000239dd 	.word	0x000239dd
   240c4:	00039b78 	.word	0x00039b78
   240c8:	000259ad 	.word	0x000259ad

000240cc <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   240cc:	b580      	push	{r7, lr}
   240ce:	b086      	sub	sp, #24
   240d0:	af00      	add	r7, sp, #0
   240d2:	6078      	str	r0, [r7, #4]
   240d4:	000a      	movs	r2, r1
   240d6:	1cbb      	adds	r3, r7, #2
   240d8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   240da:	230c      	movs	r3, #12
   240dc:	18fb      	adds	r3, r7, r3
   240de:	2200      	movs	r2, #0
   240e0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   240e2:	230c      	movs	r3, #12
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	687a      	ldr	r2, [r7, #4]
   240e8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   240ea:	230c      	movs	r3, #12
   240ec:	18fb      	adds	r3, r7, r3
   240ee:	1cba      	adds	r2, r7, #2
   240f0:	8812      	ldrh	r2, [r2, #0]
   240f2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   240f4:	230c      	movs	r3, #12
   240f6:	18fb      	adds	r3, r7, r3
   240f8:	0019      	movs	r1, r3
   240fa:	2003      	movs	r0, #3
   240fc:	4b03      	ldr	r3, [pc, #12]	; (2410c <nmi_spi_read+0x40>)
   240fe:	4798      	blx	r3
   24100:	0003      	movs	r3, r0
}
   24102:	0018      	movs	r0, r3
   24104:	46bd      	mov	sp, r7
   24106:	b006      	add	sp, #24
   24108:	bd80      	pop	{r7, pc}
   2410a:	46c0      	nop			; (mov r8, r8)
   2410c:	00021951 	.word	0x00021951

00024110 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   24110:	b580      	push	{r7, lr}
   24112:	b086      	sub	sp, #24
   24114:	af00      	add	r7, sp, #0
   24116:	6078      	str	r0, [r7, #4]
   24118:	000a      	movs	r2, r1
   2411a:	1cbb      	adds	r3, r7, #2
   2411c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2411e:	230c      	movs	r3, #12
   24120:	18fb      	adds	r3, r7, r3
   24122:	687a      	ldr	r2, [r7, #4]
   24124:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   24126:	230c      	movs	r3, #12
   24128:	18fb      	adds	r3, r7, r3
   2412a:	2200      	movs	r2, #0
   2412c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2412e:	230c      	movs	r3, #12
   24130:	18fb      	adds	r3, r7, r3
   24132:	1cba      	adds	r2, r7, #2
   24134:	8812      	ldrh	r2, [r2, #0]
   24136:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   24138:	230c      	movs	r3, #12
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	0019      	movs	r1, r3
   2413e:	2003      	movs	r0, #3
   24140:	4b03      	ldr	r3, [pc, #12]	; (24150 <nmi_spi_write+0x40>)
   24142:	4798      	blx	r3
   24144:	0003      	movs	r3, r0
}
   24146:	0018      	movs	r0, r3
   24148:	46bd      	mov	sp, r7
   2414a:	b006      	add	sp, #24
   2414c:	bd80      	pop	{r7, pc}
   2414e:	46c0      	nop			; (mov r8, r8)
   24150:	00021951 	.word	0x00021951

00024154 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   24154:	b580      	push	{r7, lr}
   24156:	b088      	sub	sp, #32
   24158:	af00      	add	r7, sp, #0
   2415a:	60f8      	str	r0, [r7, #12]
   2415c:	60b9      	str	r1, [r7, #8]
   2415e:	1dbb      	adds	r3, r7, #6
   24160:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   24162:	2314      	movs	r3, #20
   24164:	18fb      	adds	r3, r7, r3
   24166:	68fa      	ldr	r2, [r7, #12]
   24168:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   2416a:	2314      	movs	r3, #20
   2416c:	18fb      	adds	r3, r7, r3
   2416e:	68ba      	ldr	r2, [r7, #8]
   24170:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   24172:	2314      	movs	r3, #20
   24174:	18fb      	adds	r3, r7, r3
   24176:	1dba      	adds	r2, r7, #6
   24178:	8812      	ldrh	r2, [r2, #0]
   2417a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   2417c:	2314      	movs	r3, #20
   2417e:	18fb      	adds	r3, r7, r3
   24180:	0019      	movs	r1, r3
   24182:	2003      	movs	r0, #3
   24184:	4b03      	ldr	r3, [pc, #12]	; (24194 <nmi_spi_rw+0x40>)
   24186:	4798      	blx	r3
   24188:	0003      	movs	r3, r0
}
   2418a:	0018      	movs	r0, r3
   2418c:	46bd      	mov	sp, r7
   2418e:	b008      	add	sp, #32
   24190:	bd80      	pop	{r7, pc}
   24192:	46c0      	nop			; (mov r8, r8)
   24194:	00021951 	.word	0x00021951

00024198 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   24198:	b580      	push	{r7, lr}
   2419a:	b082      	sub	sp, #8
   2419c:	af00      	add	r7, sp, #0
   2419e:	0002      	movs	r2, r0
   241a0:	1dfb      	adds	r3, r7, #7
   241a2:	701a      	strb	r2, [r3, #0]
   241a4:	1dbb      	adds	r3, r7, #6
   241a6:	1c0a      	adds	r2, r1, #0
   241a8:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   241aa:	1dfb      	adds	r3, r7, #7
   241ac:	781b      	ldrb	r3, [r3, #0]
   241ae:	005a      	lsls	r2, r3, #1
   241b0:	1dbb      	adds	r3, r7, #6
   241b2:	781b      	ldrb	r3, [r3, #0]
   241b4:	4053      	eors	r3, r2
   241b6:	4a03      	ldr	r2, [pc, #12]	; (241c4 <crc7_byte+0x2c>)
   241b8:	5cd3      	ldrb	r3, [r2, r3]
}
   241ba:	0018      	movs	r0, r3
   241bc:	46bd      	mov	sp, r7
   241be:	b002      	add	sp, #8
   241c0:	bd80      	pop	{r7, pc}
   241c2:	46c0      	nop			; (mov r8, r8)
   241c4:	00039bb0 	.word	0x00039bb0

000241c8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   241c8:	b590      	push	{r4, r7, lr}
   241ca:	b085      	sub	sp, #20
   241cc:	af00      	add	r7, sp, #0
   241ce:	60b9      	str	r1, [r7, #8]
   241d0:	607a      	str	r2, [r7, #4]
   241d2:	230f      	movs	r3, #15
   241d4:	18fb      	adds	r3, r7, r3
   241d6:	1c02      	adds	r2, r0, #0
   241d8:	701a      	strb	r2, [r3, #0]
	while (len--)
   241da:	e00e      	b.n	241fa <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   241dc:	68bb      	ldr	r3, [r7, #8]
   241de:	1c5a      	adds	r2, r3, #1
   241e0:	60ba      	str	r2, [r7, #8]
   241e2:	781a      	ldrb	r2, [r3, #0]
   241e4:	230f      	movs	r3, #15
   241e6:	18fc      	adds	r4, r7, r3
   241e8:	230f      	movs	r3, #15
   241ea:	18fb      	adds	r3, r7, r3
   241ec:	781b      	ldrb	r3, [r3, #0]
   241ee:	0011      	movs	r1, r2
   241f0:	0018      	movs	r0, r3
   241f2:	4b08      	ldr	r3, [pc, #32]	; (24214 <crc7+0x4c>)
   241f4:	4798      	blx	r3
   241f6:	0003      	movs	r3, r0
   241f8:	7023      	strb	r3, [r4, #0]
	while (len--)
   241fa:	687b      	ldr	r3, [r7, #4]
   241fc:	1e5a      	subs	r2, r3, #1
   241fe:	607a      	str	r2, [r7, #4]
   24200:	2b00      	cmp	r3, #0
   24202:	d1eb      	bne.n	241dc <crc7+0x14>
	return crc;
   24204:	230f      	movs	r3, #15
   24206:	18fb      	adds	r3, r7, r3
   24208:	781b      	ldrb	r3, [r3, #0]
}
   2420a:	0018      	movs	r0, r3
   2420c:	46bd      	mov	sp, r7
   2420e:	b005      	add	sp, #20
   24210:	bd90      	pop	{r4, r7, pc}
   24212:	46c0      	nop			; (mov r8, r8)
   24214:	00024199 	.word	0x00024199

00024218 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   24218:	b590      	push	{r4, r7, lr}
   2421a:	b089      	sub	sp, #36	; 0x24
   2421c:	af00      	add	r7, sp, #0
   2421e:	60b9      	str	r1, [r7, #8]
   24220:	607a      	str	r2, [r7, #4]
   24222:	603b      	str	r3, [r7, #0]
   24224:	230f      	movs	r3, #15
   24226:	18fb      	adds	r3, r7, r3
   24228:	1c02      	adds	r2, r0, #0
   2422a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   2422c:	231f      	movs	r3, #31
   2422e:	18fb      	adds	r3, r7, r3
   24230:	2205      	movs	r2, #5
   24232:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24234:	231e      	movs	r3, #30
   24236:	18fb      	adds	r3, r7, r3
   24238:	2201      	movs	r2, #1
   2423a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   2423c:	2314      	movs	r3, #20
   2423e:	18fb      	adds	r3, r7, r3
   24240:	220f      	movs	r2, #15
   24242:	18ba      	adds	r2, r7, r2
   24244:	7812      	ldrb	r2, [r2, #0]
   24246:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   24248:	230f      	movs	r3, #15
   2424a:	18fb      	adds	r3, r7, r3
   2424c:	781b      	ldrb	r3, [r3, #0]
   2424e:	3bc1      	subs	r3, #193	; 0xc1
   24250:	2b0e      	cmp	r3, #14
   24252:	d900      	bls.n	24256 <spi_cmd+0x3e>
   24254:	e11b      	b.n	2448e <spi_cmd+0x276>
   24256:	009a      	lsls	r2, r3, #2
   24258:	4bb6      	ldr	r3, [pc, #728]	; (24534 <spi_cmd+0x31c>)
   2425a:	18d3      	adds	r3, r2, r3
   2425c:	681b      	ldr	r3, [r3, #0]
   2425e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   24260:	68bb      	ldr	r3, [r7, #8]
   24262:	0c1b      	lsrs	r3, r3, #16
   24264:	b2da      	uxtb	r2, r3
   24266:	2314      	movs	r3, #20
   24268:	18fb      	adds	r3, r7, r3
   2426a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2426c:	68bb      	ldr	r3, [r7, #8]
   2426e:	0a1b      	lsrs	r3, r3, #8
   24270:	b2da      	uxtb	r2, r3
   24272:	2314      	movs	r3, #20
   24274:	18fb      	adds	r3, r7, r3
   24276:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   24278:	68bb      	ldr	r3, [r7, #8]
   2427a:	b2da      	uxtb	r2, r3
   2427c:	2314      	movs	r3, #20
   2427e:	18fb      	adds	r3, r7, r3
   24280:	70da      	strb	r2, [r3, #3]
		len = 5;
   24282:	231f      	movs	r3, #31
   24284:	18fb      	adds	r3, r7, r3
   24286:	2205      	movs	r2, #5
   24288:	701a      	strb	r2, [r3, #0]
		break;
   2428a:	e105      	b.n	24498 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   2428c:	68bb      	ldr	r3, [r7, #8]
   2428e:	0a1b      	lsrs	r3, r3, #8
   24290:	b2da      	uxtb	r2, r3
   24292:	2314      	movs	r3, #20
   24294:	18fb      	adds	r3, r7, r3
   24296:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24298:	2330      	movs	r3, #48	; 0x30
   2429a:	18fb      	adds	r3, r7, r3
   2429c:	781b      	ldrb	r3, [r3, #0]
   2429e:	2b00      	cmp	r3, #0
   242a0:	d009      	beq.n	242b6 <spi_cmd+0x9e>
   242a2:	2314      	movs	r3, #20
   242a4:	18fb      	adds	r3, r7, r3
   242a6:	785b      	ldrb	r3, [r3, #1]
   242a8:	2280      	movs	r2, #128	; 0x80
   242aa:	4252      	negs	r2, r2
   242ac:	4313      	orrs	r3, r2
   242ae:	b2da      	uxtb	r2, r3
   242b0:	2314      	movs	r3, #20
   242b2:	18fb      	adds	r3, r7, r3
   242b4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   242b6:	68bb      	ldr	r3, [r7, #8]
   242b8:	b2da      	uxtb	r2, r3
   242ba:	2314      	movs	r3, #20
   242bc:	18fb      	adds	r3, r7, r3
   242be:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   242c0:	2314      	movs	r3, #20
   242c2:	18fb      	adds	r3, r7, r3
   242c4:	2200      	movs	r2, #0
   242c6:	70da      	strb	r2, [r3, #3]
		len = 5;
   242c8:	231f      	movs	r3, #31
   242ca:	18fb      	adds	r3, r7, r3
   242cc:	2205      	movs	r2, #5
   242ce:	701a      	strb	r2, [r3, #0]
		break;
   242d0:	e0e2      	b.n	24498 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   242d2:	2314      	movs	r3, #20
   242d4:	18fb      	adds	r3, r7, r3
   242d6:	2200      	movs	r2, #0
   242d8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   242da:	2314      	movs	r3, #20
   242dc:	18fb      	adds	r3, r7, r3
   242de:	2200      	movs	r2, #0
   242e0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   242e2:	2314      	movs	r3, #20
   242e4:	18fb      	adds	r3, r7, r3
   242e6:	2200      	movs	r2, #0
   242e8:	70da      	strb	r2, [r3, #3]
		len = 5;
   242ea:	231f      	movs	r3, #31
   242ec:	18fb      	adds	r3, r7, r3
   242ee:	2205      	movs	r2, #5
   242f0:	701a      	strb	r2, [r3, #0]
		break;
   242f2:	e0d1      	b.n	24498 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   242f4:	2314      	movs	r3, #20
   242f6:	18fb      	adds	r3, r7, r3
   242f8:	2200      	movs	r2, #0
   242fa:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   242fc:	2314      	movs	r3, #20
   242fe:	18fb      	adds	r3, r7, r3
   24300:	2200      	movs	r2, #0
   24302:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24304:	2314      	movs	r3, #20
   24306:	18fb      	adds	r3, r7, r3
   24308:	2200      	movs	r2, #0
   2430a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2430c:	231f      	movs	r3, #31
   2430e:	18fb      	adds	r3, r7, r3
   24310:	2205      	movs	r2, #5
   24312:	701a      	strb	r2, [r3, #0]
		break;
   24314:	e0c0      	b.n	24498 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   24316:	2314      	movs	r3, #20
   24318:	18fb      	adds	r3, r7, r3
   2431a:	22ff      	movs	r2, #255	; 0xff
   2431c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2431e:	2314      	movs	r3, #20
   24320:	18fb      	adds	r3, r7, r3
   24322:	22ff      	movs	r2, #255	; 0xff
   24324:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   24326:	2314      	movs	r3, #20
   24328:	18fb      	adds	r3, r7, r3
   2432a:	22ff      	movs	r2, #255	; 0xff
   2432c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2432e:	231f      	movs	r3, #31
   24330:	18fb      	adds	r3, r7, r3
   24332:	2205      	movs	r2, #5
   24334:	701a      	strb	r2, [r3, #0]
		break;
   24336:	e0af      	b.n	24498 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   24338:	68bb      	ldr	r3, [r7, #8]
   2433a:	0c1b      	lsrs	r3, r3, #16
   2433c:	b2da      	uxtb	r2, r3
   2433e:	2314      	movs	r3, #20
   24340:	18fb      	adds	r3, r7, r3
   24342:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24344:	68bb      	ldr	r3, [r7, #8]
   24346:	0a1b      	lsrs	r3, r3, #8
   24348:	b2da      	uxtb	r2, r3
   2434a:	2314      	movs	r3, #20
   2434c:	18fb      	adds	r3, r7, r3
   2434e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   24350:	68bb      	ldr	r3, [r7, #8]
   24352:	b2da      	uxtb	r2, r3
   24354:	2314      	movs	r3, #20
   24356:	18fb      	adds	r3, r7, r3
   24358:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   2435a:	683b      	ldr	r3, [r7, #0]
   2435c:	0a1b      	lsrs	r3, r3, #8
   2435e:	b2da      	uxtb	r2, r3
   24360:	2314      	movs	r3, #20
   24362:	18fb      	adds	r3, r7, r3
   24364:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   24366:	683b      	ldr	r3, [r7, #0]
   24368:	b2da      	uxtb	r2, r3
   2436a:	2314      	movs	r3, #20
   2436c:	18fb      	adds	r3, r7, r3
   2436e:	715a      	strb	r2, [r3, #5]
		len = 7;
   24370:	231f      	movs	r3, #31
   24372:	18fb      	adds	r3, r7, r3
   24374:	2207      	movs	r2, #7
   24376:	701a      	strb	r2, [r3, #0]
		break;
   24378:	e08e      	b.n	24498 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   2437a:	68bb      	ldr	r3, [r7, #8]
   2437c:	0c1b      	lsrs	r3, r3, #16
   2437e:	b2da      	uxtb	r2, r3
   24380:	2314      	movs	r3, #20
   24382:	18fb      	adds	r3, r7, r3
   24384:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24386:	68bb      	ldr	r3, [r7, #8]
   24388:	0a1b      	lsrs	r3, r3, #8
   2438a:	b2da      	uxtb	r2, r3
   2438c:	2314      	movs	r3, #20
   2438e:	18fb      	adds	r3, r7, r3
   24390:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   24392:	68bb      	ldr	r3, [r7, #8]
   24394:	b2da      	uxtb	r2, r3
   24396:	2314      	movs	r3, #20
   24398:	18fb      	adds	r3, r7, r3
   2439a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   2439c:	683b      	ldr	r3, [r7, #0]
   2439e:	0c1b      	lsrs	r3, r3, #16
   243a0:	b2da      	uxtb	r2, r3
   243a2:	2314      	movs	r3, #20
   243a4:	18fb      	adds	r3, r7, r3
   243a6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   243a8:	683b      	ldr	r3, [r7, #0]
   243aa:	0a1b      	lsrs	r3, r3, #8
   243ac:	b2da      	uxtb	r2, r3
   243ae:	2314      	movs	r3, #20
   243b0:	18fb      	adds	r3, r7, r3
   243b2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   243b4:	683b      	ldr	r3, [r7, #0]
   243b6:	b2da      	uxtb	r2, r3
   243b8:	2314      	movs	r3, #20
   243ba:	18fb      	adds	r3, r7, r3
   243bc:	719a      	strb	r2, [r3, #6]
		len = 8;
   243be:	231f      	movs	r3, #31
   243c0:	18fb      	adds	r3, r7, r3
   243c2:	2208      	movs	r2, #8
   243c4:	701a      	strb	r2, [r3, #0]
		break;
   243c6:	e067      	b.n	24498 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   243c8:	68bb      	ldr	r3, [r7, #8]
   243ca:	0a1b      	lsrs	r3, r3, #8
   243cc:	b2da      	uxtb	r2, r3
   243ce:	2314      	movs	r3, #20
   243d0:	18fb      	adds	r3, r7, r3
   243d2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   243d4:	2330      	movs	r3, #48	; 0x30
   243d6:	18fb      	adds	r3, r7, r3
   243d8:	781b      	ldrb	r3, [r3, #0]
   243da:	2b00      	cmp	r3, #0
   243dc:	d009      	beq.n	243f2 <spi_cmd+0x1da>
   243de:	2314      	movs	r3, #20
   243e0:	18fb      	adds	r3, r7, r3
   243e2:	785b      	ldrb	r3, [r3, #1]
   243e4:	2280      	movs	r2, #128	; 0x80
   243e6:	4252      	negs	r2, r2
   243e8:	4313      	orrs	r3, r2
   243ea:	b2da      	uxtb	r2, r3
   243ec:	2314      	movs	r3, #20
   243ee:	18fb      	adds	r3, r7, r3
   243f0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   243f2:	68bb      	ldr	r3, [r7, #8]
   243f4:	b2da      	uxtb	r2, r3
   243f6:	2314      	movs	r3, #20
   243f8:	18fb      	adds	r3, r7, r3
   243fa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   243fc:	687b      	ldr	r3, [r7, #4]
   243fe:	0e1b      	lsrs	r3, r3, #24
   24400:	b2da      	uxtb	r2, r3
   24402:	2314      	movs	r3, #20
   24404:	18fb      	adds	r3, r7, r3
   24406:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   24408:	687b      	ldr	r3, [r7, #4]
   2440a:	0c1b      	lsrs	r3, r3, #16
   2440c:	b2da      	uxtb	r2, r3
   2440e:	2314      	movs	r3, #20
   24410:	18fb      	adds	r3, r7, r3
   24412:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   24414:	687b      	ldr	r3, [r7, #4]
   24416:	0a1b      	lsrs	r3, r3, #8
   24418:	b2da      	uxtb	r2, r3
   2441a:	2314      	movs	r3, #20
   2441c:	18fb      	adds	r3, r7, r3
   2441e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   24420:	687b      	ldr	r3, [r7, #4]
   24422:	b2da      	uxtb	r2, r3
   24424:	2314      	movs	r3, #20
   24426:	18fb      	adds	r3, r7, r3
   24428:	719a      	strb	r2, [r3, #6]
		len = 8;
   2442a:	231f      	movs	r3, #31
   2442c:	18fb      	adds	r3, r7, r3
   2442e:	2208      	movs	r2, #8
   24430:	701a      	strb	r2, [r3, #0]
		break;
   24432:	e031      	b.n	24498 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   24434:	68bb      	ldr	r3, [r7, #8]
   24436:	0c1b      	lsrs	r3, r3, #16
   24438:	b2da      	uxtb	r2, r3
   2443a:	2314      	movs	r3, #20
   2443c:	18fb      	adds	r3, r7, r3
   2443e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24440:	68bb      	ldr	r3, [r7, #8]
   24442:	0a1b      	lsrs	r3, r3, #8
   24444:	b2da      	uxtb	r2, r3
   24446:	2314      	movs	r3, #20
   24448:	18fb      	adds	r3, r7, r3
   2444a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   2444c:	68bb      	ldr	r3, [r7, #8]
   2444e:	b2da      	uxtb	r2, r3
   24450:	2314      	movs	r3, #20
   24452:	18fb      	adds	r3, r7, r3
   24454:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   24456:	687b      	ldr	r3, [r7, #4]
   24458:	0e1b      	lsrs	r3, r3, #24
   2445a:	b2da      	uxtb	r2, r3
   2445c:	2314      	movs	r3, #20
   2445e:	18fb      	adds	r3, r7, r3
   24460:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   24462:	687b      	ldr	r3, [r7, #4]
   24464:	0c1b      	lsrs	r3, r3, #16
   24466:	b2da      	uxtb	r2, r3
   24468:	2314      	movs	r3, #20
   2446a:	18fb      	adds	r3, r7, r3
   2446c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2446e:	687b      	ldr	r3, [r7, #4]
   24470:	0a1b      	lsrs	r3, r3, #8
   24472:	b2da      	uxtb	r2, r3
   24474:	2314      	movs	r3, #20
   24476:	18fb      	adds	r3, r7, r3
   24478:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   2447a:	687b      	ldr	r3, [r7, #4]
   2447c:	b2da      	uxtb	r2, r3
   2447e:	2314      	movs	r3, #20
   24480:	18fb      	adds	r3, r7, r3
   24482:	71da      	strb	r2, [r3, #7]
		len = 9;
   24484:	231f      	movs	r3, #31
   24486:	18fb      	adds	r3, r7, r3
   24488:	2209      	movs	r2, #9
   2448a:	701a      	strb	r2, [r3, #0]
		break;
   2448c:	e004      	b.n	24498 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2448e:	231e      	movs	r3, #30
   24490:	18fb      	adds	r3, r7, r3
   24492:	2200      	movs	r2, #0
   24494:	701a      	strb	r2, [r3, #0]
		break;
   24496:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   24498:	231e      	movs	r3, #30
   2449a:	18fb      	adds	r3, r7, r3
   2449c:	781b      	ldrb	r3, [r3, #0]
   2449e:	b25b      	sxtb	r3, r3
   244a0:	2b00      	cmp	r3, #0
   244a2:	d03f      	beq.n	24524 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   244a4:	4b24      	ldr	r3, [pc, #144]	; (24538 <spi_cmd+0x320>)
   244a6:	781b      	ldrb	r3, [r3, #0]
   244a8:	2b00      	cmp	r3, #0
   244aa:	d115      	bne.n	244d8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   244ac:	231f      	movs	r3, #31
   244ae:	18fb      	adds	r3, r7, r3
   244b0:	781b      	ldrb	r3, [r3, #0]
   244b2:	1e5c      	subs	r4, r3, #1
   244b4:	231f      	movs	r3, #31
   244b6:	18fb      	adds	r3, r7, r3
   244b8:	781b      	ldrb	r3, [r3, #0]
   244ba:	3b01      	subs	r3, #1
   244bc:	001a      	movs	r2, r3
   244be:	2314      	movs	r3, #20
   244c0:	18fb      	adds	r3, r7, r3
   244c2:	0019      	movs	r1, r3
   244c4:	207f      	movs	r0, #127	; 0x7f
   244c6:	4b1d      	ldr	r3, [pc, #116]	; (2453c <spi_cmd+0x324>)
   244c8:	4798      	blx	r3
   244ca:	0003      	movs	r3, r0
   244cc:	18db      	adds	r3, r3, r3
   244ce:	b2da      	uxtb	r2, r3
   244d0:	2314      	movs	r3, #20
   244d2:	18fb      	adds	r3, r7, r3
   244d4:	551a      	strb	r2, [r3, r4]
   244d6:	e006      	b.n	244e6 <spi_cmd+0x2ce>
		else
			len-=1;
   244d8:	231f      	movs	r3, #31
   244da:	18fb      	adds	r3, r7, r3
   244dc:	221f      	movs	r2, #31
   244de:	18ba      	adds	r2, r7, r2
   244e0:	7812      	ldrb	r2, [r2, #0]
   244e2:	3a01      	subs	r2, #1
   244e4:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   244e6:	231f      	movs	r3, #31
   244e8:	18fb      	adds	r3, r7, r3
   244ea:	781b      	ldrb	r3, [r3, #0]
   244ec:	b29a      	uxth	r2, r3
   244ee:	2314      	movs	r3, #20
   244f0:	18fb      	adds	r3, r7, r3
   244f2:	0011      	movs	r1, r2
   244f4:	0018      	movs	r0, r3
   244f6:	4b12      	ldr	r3, [pc, #72]	; (24540 <spi_cmd+0x328>)
   244f8:	4798      	blx	r3
   244fa:	1e03      	subs	r3, r0, #0
   244fc:	d012      	beq.n	24524 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   244fe:	2390      	movs	r3, #144	; 0x90
   24500:	005a      	lsls	r2, r3, #1
   24502:	4910      	ldr	r1, [pc, #64]	; (24544 <spi_cmd+0x32c>)
   24504:	4b10      	ldr	r3, [pc, #64]	; (24548 <spi_cmd+0x330>)
   24506:	0018      	movs	r0, r3
   24508:	4b10      	ldr	r3, [pc, #64]	; (2454c <spi_cmd+0x334>)
   2450a:	4798      	blx	r3
   2450c:	4b10      	ldr	r3, [pc, #64]	; (24550 <spi_cmd+0x338>)
   2450e:	0018      	movs	r0, r3
   24510:	4b0e      	ldr	r3, [pc, #56]	; (2454c <spi_cmd+0x334>)
   24512:	4798      	blx	r3
   24514:	4b0f      	ldr	r3, [pc, #60]	; (24554 <spi_cmd+0x33c>)
   24516:	0018      	movs	r0, r3
   24518:	4b0c      	ldr	r3, [pc, #48]	; (2454c <spi_cmd+0x334>)
   2451a:	4798      	blx	r3
			result = N_FAIL;
   2451c:	231e      	movs	r3, #30
   2451e:	18fb      	adds	r3, r7, r3
   24520:	2200      	movs	r2, #0
   24522:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   24524:	231e      	movs	r3, #30
   24526:	18fb      	adds	r3, r7, r3
   24528:	781b      	ldrb	r3, [r3, #0]
   2452a:	b25b      	sxtb	r3, r3
}
   2452c:	0018      	movs	r0, r3
   2452e:	46bd      	mov	sp, r7
   24530:	b009      	add	sp, #36	; 0x24
   24532:	bd90      	pop	{r4, r7, pc}
   24534:	0003a228 	.word	0x0003a228
   24538:	200042b0 	.word	0x200042b0
   2453c:	000241c9 	.word	0x000241c9
   24540:	00024111 	.word	0x00024111
   24544:	0003a2a0 	.word	0x0003a2a0
   24548:	00039cb0 	.word	0x00039cb0
   2454c:	0001ed59 	.word	0x0001ed59
   24550:	00039cc4 	.word	0x00039cc4
   24554:	00039cf0 	.word	0x00039cf0

00024558 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   24558:	b590      	push	{r4, r7, lr}
   2455a:	b085      	sub	sp, #20
   2455c:	af00      	add	r7, sp, #0
   2455e:	0002      	movs	r2, r0
   24560:	1dfb      	adds	r3, r7, #7
   24562:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   24564:	230e      	movs	r3, #14
   24566:	18fb      	adds	r3, r7, r3
   24568:	2201      	movs	r2, #1
   2456a:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   2456c:	4b32      	ldr	r3, [pc, #200]	; (24638 <spi_data_rsp+0xe0>)
   2456e:	781b      	ldrb	r3, [r3, #0]
   24570:	2b00      	cmp	r3, #0
   24572:	d104      	bne.n	2457e <spi_data_rsp+0x26>
		len = 2;
   24574:	230f      	movs	r3, #15
   24576:	18fb      	adds	r3, r7, r3
   24578:	2202      	movs	r2, #2
   2457a:	701a      	strb	r2, [r3, #0]
   2457c:	e003      	b.n	24586 <spi_data_rsp+0x2e>
	else
		len = 3;
   2457e:	230f      	movs	r3, #15
   24580:	18fb      	adds	r3, r7, r3
   24582:	2203      	movs	r2, #3
   24584:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   24586:	230f      	movs	r3, #15
   24588:	18fb      	adds	r3, r7, r3
   2458a:	781b      	ldrb	r3, [r3, #0]
   2458c:	b29a      	uxth	r2, r3
   2458e:	2308      	movs	r3, #8
   24590:	18fb      	adds	r3, r7, r3
   24592:	0011      	movs	r1, r2
   24594:	0018      	movs	r0, r3
   24596:	4b29      	ldr	r3, [pc, #164]	; (2463c <spi_data_rsp+0xe4>)
   24598:	4798      	blx	r3
   2459a:	1e03      	subs	r3, r0, #0
   2459c:	d013      	beq.n	245c6 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2459e:	239a      	movs	r3, #154	; 0x9a
   245a0:	005a      	lsls	r2, r3, #1
   245a2:	4927      	ldr	r1, [pc, #156]	; (24640 <spi_data_rsp+0xe8>)
   245a4:	4b27      	ldr	r3, [pc, #156]	; (24644 <spi_data_rsp+0xec>)
   245a6:	0018      	movs	r0, r3
   245a8:	4b27      	ldr	r3, [pc, #156]	; (24648 <spi_data_rsp+0xf0>)
   245aa:	4798      	blx	r3
   245ac:	4b27      	ldr	r3, [pc, #156]	; (2464c <spi_data_rsp+0xf4>)
   245ae:	0018      	movs	r0, r3
   245b0:	4b25      	ldr	r3, [pc, #148]	; (24648 <spi_data_rsp+0xf0>)
   245b2:	4798      	blx	r3
   245b4:	4b26      	ldr	r3, [pc, #152]	; (24650 <spi_data_rsp+0xf8>)
   245b6:	0018      	movs	r0, r3
   245b8:	4b23      	ldr	r3, [pc, #140]	; (24648 <spi_data_rsp+0xf0>)
   245ba:	4798      	blx	r3
		result = N_FAIL;
   245bc:	230e      	movs	r3, #14
   245be:	18fb      	adds	r3, r7, r3
   245c0:	2200      	movs	r2, #0
   245c2:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   245c4:	e030      	b.n	24628 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   245c6:	230f      	movs	r3, #15
   245c8:	18fb      	adds	r3, r7, r3
   245ca:	781b      	ldrb	r3, [r3, #0]
   245cc:	3b01      	subs	r3, #1
   245ce:	2208      	movs	r2, #8
   245d0:	18ba      	adds	r2, r7, r2
   245d2:	5cd3      	ldrb	r3, [r2, r3]
   245d4:	2b00      	cmp	r3, #0
   245d6:	d108      	bne.n	245ea <spi_data_rsp+0x92>
   245d8:	230f      	movs	r3, #15
   245da:	18fb      	adds	r3, r7, r3
   245dc:	781b      	ldrb	r3, [r3, #0]
   245de:	3b02      	subs	r3, #2
   245e0:	2208      	movs	r2, #8
   245e2:	18ba      	adds	r2, r7, r2
   245e4:	5cd3      	ldrb	r3, [r2, r3]
   245e6:	2bc3      	cmp	r3, #195	; 0xc3
   245e8:	d01e      	beq.n	24628 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   245ea:	233c      	movs	r3, #60	; 0x3c
   245ec:	33ff      	adds	r3, #255	; 0xff
   245ee:	001a      	movs	r2, r3
   245f0:	4913      	ldr	r1, [pc, #76]	; (24640 <spi_data_rsp+0xe8>)
   245f2:	4b14      	ldr	r3, [pc, #80]	; (24644 <spi_data_rsp+0xec>)
   245f4:	0018      	movs	r0, r3
   245f6:	4b14      	ldr	r3, [pc, #80]	; (24648 <spi_data_rsp+0xf0>)
   245f8:	4798      	blx	r3
   245fa:	2308      	movs	r3, #8
   245fc:	18fb      	adds	r3, r7, r3
   245fe:	781b      	ldrb	r3, [r3, #0]
   24600:	0019      	movs	r1, r3
   24602:	2308      	movs	r3, #8
   24604:	18fb      	adds	r3, r7, r3
   24606:	785b      	ldrb	r3, [r3, #1]
   24608:	001a      	movs	r2, r3
   2460a:	2308      	movs	r3, #8
   2460c:	18fb      	adds	r3, r7, r3
   2460e:	789b      	ldrb	r3, [r3, #2]
   24610:	4810      	ldr	r0, [pc, #64]	; (24654 <spi_data_rsp+0xfc>)
   24612:	4c0d      	ldr	r4, [pc, #52]	; (24648 <spi_data_rsp+0xf0>)
   24614:	47a0      	blx	r4
   24616:	4b0e      	ldr	r3, [pc, #56]	; (24650 <spi_data_rsp+0xf8>)
   24618:	0018      	movs	r0, r3
   2461a:	4b0b      	ldr	r3, [pc, #44]	; (24648 <spi_data_rsp+0xf0>)
   2461c:	4798      	blx	r3
		result = N_FAIL;
   2461e:	230e      	movs	r3, #14
   24620:	18fb      	adds	r3, r7, r3
   24622:	2200      	movs	r2, #0
   24624:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24626:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   24628:	230e      	movs	r3, #14
   2462a:	18fb      	adds	r3, r7, r3
   2462c:	781b      	ldrb	r3, [r3, #0]
   2462e:	b25b      	sxtb	r3, r3
}
   24630:	0018      	movs	r0, r3
   24632:	46bd      	mov	sp, r7
   24634:	b005      	add	sp, #20
   24636:	bd90      	pop	{r4, r7, pc}
   24638:	200042b0 	.word	0x200042b0
   2463c:	000240cd 	.word	0x000240cd
   24640:	0003a2a8 	.word	0x0003a2a8
   24644:	00039cb0 	.word	0x00039cb0
   24648:	0001ed59 	.word	0x0001ed59
   2464c:	00039cf4 	.word	0x00039cf4
   24650:	00039cf0 	.word	0x00039cf0
   24654:	00039d14 	.word	0x00039d14

00024658 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   24658:	b580      	push	{r7, lr}
   2465a:	b084      	sub	sp, #16
   2465c:	af00      	add	r7, sp, #0
   2465e:	0002      	movs	r2, r0
   24660:	1dfb      	adds	r3, r7, #7
   24662:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   24664:	230f      	movs	r3, #15
   24666:	18fb      	adds	r3, r7, r3
   24668:	2201      	movs	r2, #1
   2466a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   2466c:	1dfb      	adds	r3, r7, #7
   2466e:	781b      	ldrb	r3, [r3, #0]
   24670:	2bcf      	cmp	r3, #207	; 0xcf
   24672:	d007      	beq.n	24684 <spi_cmd_rsp+0x2c>
   24674:	1dfb      	adds	r3, r7, #7
   24676:	781b      	ldrb	r3, [r3, #0]
   24678:	2bc5      	cmp	r3, #197	; 0xc5
   2467a:	d003      	beq.n	24684 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   2467c:	1dfb      	adds	r3, r7, #7
   2467e:	781b      	ldrb	r3, [r3, #0]
   24680:	2bc6      	cmp	r3, #198	; 0xc6
   24682:	d10c      	bne.n	2469e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24684:	230d      	movs	r3, #13
   24686:	18fb      	adds	r3, r7, r3
   24688:	2101      	movs	r1, #1
   2468a:	0018      	movs	r0, r3
   2468c:	4b3b      	ldr	r3, [pc, #236]	; (2477c <spi_cmd_rsp+0x124>)
   2468e:	4798      	blx	r3
   24690:	1e03      	subs	r3, r0, #0
   24692:	d004      	beq.n	2469e <spi_cmd_rsp+0x46>
			result = N_FAIL;
   24694:	230f      	movs	r3, #15
   24696:	18fb      	adds	r3, r7, r3
   24698:	2200      	movs	r2, #0
   2469a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2469c:	e065      	b.n	2476a <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2469e:	230e      	movs	r3, #14
   246a0:	18fb      	adds	r3, r7, r3
   246a2:	220a      	movs	r2, #10
   246a4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   246a6:	230d      	movs	r3, #13
   246a8:	18fb      	adds	r3, r7, r3
   246aa:	2101      	movs	r1, #1
   246ac:	0018      	movs	r0, r3
   246ae:	4b33      	ldr	r3, [pc, #204]	; (2477c <spi_cmd_rsp+0x124>)
   246b0:	4798      	blx	r3
   246b2:	1e03      	subs	r3, r0, #0
   246b4:	d014      	beq.n	246e0 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   246b6:	235c      	movs	r3, #92	; 0x5c
   246b8:	33ff      	adds	r3, #255	; 0xff
   246ba:	001a      	movs	r2, r3
   246bc:	4930      	ldr	r1, [pc, #192]	; (24780 <spi_cmd_rsp+0x128>)
   246be:	4b31      	ldr	r3, [pc, #196]	; (24784 <spi_cmd_rsp+0x12c>)
   246c0:	0018      	movs	r0, r3
   246c2:	4b31      	ldr	r3, [pc, #196]	; (24788 <spi_cmd_rsp+0x130>)
   246c4:	4798      	blx	r3
   246c6:	4b31      	ldr	r3, [pc, #196]	; (2478c <spi_cmd_rsp+0x134>)
   246c8:	0018      	movs	r0, r3
   246ca:	4b2f      	ldr	r3, [pc, #188]	; (24788 <spi_cmd_rsp+0x130>)
   246cc:	4798      	blx	r3
   246ce:	4b30      	ldr	r3, [pc, #192]	; (24790 <spi_cmd_rsp+0x138>)
   246d0:	0018      	movs	r0, r3
   246d2:	4b2d      	ldr	r3, [pc, #180]	; (24788 <spi_cmd_rsp+0x130>)
   246d4:	4798      	blx	r3
			result = N_FAIL;
   246d6:	230f      	movs	r3, #15
   246d8:	18fb      	adds	r3, r7, r3
   246da:	2200      	movs	r2, #0
   246dc:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   246de:	e044      	b.n	2476a <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   246e0:	230d      	movs	r3, #13
   246e2:	18fb      	adds	r3, r7, r3
   246e4:	781b      	ldrb	r3, [r3, #0]
   246e6:	1dfa      	adds	r2, r7, #7
   246e8:	7812      	ldrb	r2, [r2, #0]
   246ea:	429a      	cmp	r2, r3
   246ec:	d00b      	beq.n	24706 <spi_cmd_rsp+0xae>
   246ee:	230e      	movs	r3, #14
   246f0:	18fb      	adds	r3, r7, r3
   246f2:	781b      	ldrb	r3, [r3, #0]
   246f4:	b25b      	sxtb	r3, r3
   246f6:	b2da      	uxtb	r2, r3
   246f8:	3a01      	subs	r2, #1
   246fa:	b2d1      	uxtb	r1, r2
   246fc:	220e      	movs	r2, #14
   246fe:	18ba      	adds	r2, r7, r2
   24700:	7011      	strb	r1, [r2, #0]
   24702:	2b00      	cmp	r3, #0
   24704:	dccf      	bgt.n	246a6 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   24706:	230e      	movs	r3, #14
   24708:	18fb      	adds	r3, r7, r3
   2470a:	220a      	movs	r2, #10
   2470c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2470e:	230d      	movs	r3, #13
   24710:	18fb      	adds	r3, r7, r3
   24712:	2101      	movs	r1, #1
   24714:	0018      	movs	r0, r3
   24716:	4b19      	ldr	r3, [pc, #100]	; (2477c <spi_cmd_rsp+0x124>)
   24718:	4798      	blx	r3
   2471a:	1e03      	subs	r3, r0, #0
   2471c:	d014      	beq.n	24748 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2471e:	236a      	movs	r3, #106	; 0x6a
   24720:	33ff      	adds	r3, #255	; 0xff
   24722:	001a      	movs	r2, r3
   24724:	4916      	ldr	r1, [pc, #88]	; (24780 <spi_cmd_rsp+0x128>)
   24726:	4b17      	ldr	r3, [pc, #92]	; (24784 <spi_cmd_rsp+0x12c>)
   24728:	0018      	movs	r0, r3
   2472a:	4b17      	ldr	r3, [pc, #92]	; (24788 <spi_cmd_rsp+0x130>)
   2472c:	4798      	blx	r3
   2472e:	4b17      	ldr	r3, [pc, #92]	; (2478c <spi_cmd_rsp+0x134>)
   24730:	0018      	movs	r0, r3
   24732:	4b15      	ldr	r3, [pc, #84]	; (24788 <spi_cmd_rsp+0x130>)
   24734:	4798      	blx	r3
   24736:	4b16      	ldr	r3, [pc, #88]	; (24790 <spi_cmd_rsp+0x138>)
   24738:	0018      	movs	r0, r3
   2473a:	4b13      	ldr	r3, [pc, #76]	; (24788 <spi_cmd_rsp+0x130>)
   2473c:	4798      	blx	r3
			result = N_FAIL;
   2473e:	230f      	movs	r3, #15
   24740:	18fb      	adds	r3, r7, r3
   24742:	2200      	movs	r2, #0
   24744:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24746:	e010      	b.n	2476a <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   24748:	230d      	movs	r3, #13
   2474a:	18fb      	adds	r3, r7, r3
   2474c:	781b      	ldrb	r3, [r3, #0]
   2474e:	2b00      	cmp	r3, #0
   24750:	d00b      	beq.n	2476a <spi_cmd_rsp+0x112>
   24752:	230e      	movs	r3, #14
   24754:	18fb      	adds	r3, r7, r3
   24756:	781b      	ldrb	r3, [r3, #0]
   24758:	b25b      	sxtb	r3, r3
   2475a:	b2da      	uxtb	r2, r3
   2475c:	3a01      	subs	r2, #1
   2475e:	b2d1      	uxtb	r1, r2
   24760:	220e      	movs	r2, #14
   24762:	18ba      	adds	r2, r7, r2
   24764:	7011      	strb	r1, [r2, #0]
   24766:	2b00      	cmp	r3, #0
   24768:	dcd1      	bgt.n	2470e <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   2476a:	230f      	movs	r3, #15
   2476c:	18fb      	adds	r3, r7, r3
   2476e:	781b      	ldrb	r3, [r3, #0]
   24770:	b25b      	sxtb	r3, r3
}
   24772:	0018      	movs	r0, r3
   24774:	46bd      	mov	sp, r7
   24776:	b004      	add	sp, #16
   24778:	bd80      	pop	{r7, pc}
   2477a:	46c0      	nop			; (mov r8, r8)
   2477c:	000240cd 	.word	0x000240cd
   24780:	0003a2b8 	.word	0x0003a2b8
   24784:	00039cb0 	.word	0x00039cb0
   24788:	0001ed59 	.word	0x0001ed59
   2478c:	00039d44 	.word	0x00039d44
   24790:	00039cf0 	.word	0x00039cf0

00024794 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   24794:	b590      	push	{r4, r7, lr}
   24796:	b09f      	sub	sp, #124	; 0x7c
   24798:	af00      	add	r7, sp, #0
   2479a:	60b9      	str	r1, [r7, #8]
   2479c:	607a      	str	r2, [r7, #4]
   2479e:	603b      	str	r3, [r7, #0]
   247a0:	230f      	movs	r3, #15
   247a2:	18fb      	adds	r3, r7, r3
   247a4:	1c02      	adds	r2, r0, #0
   247a6:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   247a8:	2300      	movs	r3, #0
   247aa:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   247ac:	2301      	movs	r3, #1
   247ae:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   247b0:	2338      	movs	r3, #56	; 0x38
   247b2:	18fb      	adds	r3, r7, r3
   247b4:	220f      	movs	r2, #15
   247b6:	18ba      	adds	r2, r7, r2
   247b8:	7812      	ldrb	r2, [r2, #0]
   247ba:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   247bc:	230f      	movs	r3, #15
   247be:	18fb      	adds	r3, r7, r3
   247c0:	781b      	ldrb	r3, [r3, #0]
   247c2:	3bc1      	subs	r3, #193	; 0xc1
   247c4:	2b0e      	cmp	r3, #14
   247c6:	d900      	bls.n	247ca <spi_cmd_complete+0x36>
   247c8:	e103      	b.n	249d2 <spi_cmd_complete+0x23e>
   247ca:	009a      	lsls	r2, r3, #2
   247cc:	4bd1      	ldr	r3, [pc, #836]	; (24b14 <spi_cmd_complete+0x380>)
   247ce:	18d3      	adds	r3, r2, r3
   247d0:	681b      	ldr	r3, [r3, #0]
   247d2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   247d4:	68bb      	ldr	r3, [r7, #8]
   247d6:	0c1b      	lsrs	r3, r3, #16
   247d8:	b2da      	uxtb	r2, r3
   247da:	2338      	movs	r3, #56	; 0x38
   247dc:	18fb      	adds	r3, r7, r3
   247de:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   247e0:	68bb      	ldr	r3, [r7, #8]
   247e2:	0a1b      	lsrs	r3, r3, #8
   247e4:	b2da      	uxtb	r2, r3
   247e6:	2338      	movs	r3, #56	; 0x38
   247e8:	18fb      	adds	r3, r7, r3
   247ea:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   247ec:	68bb      	ldr	r3, [r7, #8]
   247ee:	b2da      	uxtb	r2, r3
   247f0:	2338      	movs	r3, #56	; 0x38
   247f2:	18fb      	adds	r3, r7, r3
   247f4:	70da      	strb	r2, [r3, #3]
		len = 5;
   247f6:	2305      	movs	r3, #5
   247f8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   247fa:	e0ed      	b.n	249d8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   247fc:	68bb      	ldr	r3, [r7, #8]
   247fe:	0a1b      	lsrs	r3, r3, #8
   24800:	b2da      	uxtb	r2, r3
   24802:	2338      	movs	r3, #56	; 0x38
   24804:	18fb      	adds	r3, r7, r3
   24806:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24808:	2388      	movs	r3, #136	; 0x88
   2480a:	18fb      	adds	r3, r7, r3
   2480c:	781b      	ldrb	r3, [r3, #0]
   2480e:	2b01      	cmp	r3, #1
   24810:	d109      	bne.n	24826 <spi_cmd_complete+0x92>
   24812:	2338      	movs	r3, #56	; 0x38
   24814:	18fb      	adds	r3, r7, r3
   24816:	785b      	ldrb	r3, [r3, #1]
   24818:	2280      	movs	r2, #128	; 0x80
   2481a:	4252      	negs	r2, r2
   2481c:	4313      	orrs	r3, r2
   2481e:	b2da      	uxtb	r2, r3
   24820:	2338      	movs	r3, #56	; 0x38
   24822:	18fb      	adds	r3, r7, r3
   24824:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   24826:	68bb      	ldr	r3, [r7, #8]
   24828:	b2da      	uxtb	r2, r3
   2482a:	2338      	movs	r3, #56	; 0x38
   2482c:	18fb      	adds	r3, r7, r3
   2482e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24830:	2338      	movs	r3, #56	; 0x38
   24832:	18fb      	adds	r3, r7, r3
   24834:	2200      	movs	r2, #0
   24836:	70da      	strb	r2, [r3, #3]
		len = 5;
   24838:	2305      	movs	r3, #5
   2483a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2483c:	e0cc      	b.n	249d8 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2483e:	2338      	movs	r3, #56	; 0x38
   24840:	18fb      	adds	r3, r7, r3
   24842:	2200      	movs	r2, #0
   24844:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24846:	2338      	movs	r3, #56	; 0x38
   24848:	18fb      	adds	r3, r7, r3
   2484a:	2200      	movs	r2, #0
   2484c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2484e:	2338      	movs	r3, #56	; 0x38
   24850:	18fb      	adds	r3, r7, r3
   24852:	2200      	movs	r2, #0
   24854:	70da      	strb	r2, [r3, #3]
		len = 5;
   24856:	2305      	movs	r3, #5
   24858:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2485a:	e0bd      	b.n	249d8 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   2485c:	2338      	movs	r3, #56	; 0x38
   2485e:	18fb      	adds	r3, r7, r3
   24860:	2200      	movs	r2, #0
   24862:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   24864:	2338      	movs	r3, #56	; 0x38
   24866:	18fb      	adds	r3, r7, r3
   24868:	2200      	movs	r2, #0
   2486a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2486c:	2338      	movs	r3, #56	; 0x38
   2486e:	18fb      	adds	r3, r7, r3
   24870:	2200      	movs	r2, #0
   24872:	70da      	strb	r2, [r3, #3]
		len = 5;
   24874:	2305      	movs	r3, #5
   24876:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24878:	e0ae      	b.n	249d8 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   2487a:	2338      	movs	r3, #56	; 0x38
   2487c:	18fb      	adds	r3, r7, r3
   2487e:	22ff      	movs	r2, #255	; 0xff
   24880:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   24882:	2338      	movs	r3, #56	; 0x38
   24884:	18fb      	adds	r3, r7, r3
   24886:	22ff      	movs	r2, #255	; 0xff
   24888:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   2488a:	2338      	movs	r3, #56	; 0x38
   2488c:	18fb      	adds	r3, r7, r3
   2488e:	22ff      	movs	r2, #255	; 0xff
   24890:	70da      	strb	r2, [r3, #3]
		len = 5;
   24892:	2305      	movs	r3, #5
   24894:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24896:	e09f      	b.n	249d8 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   24898:	68bb      	ldr	r3, [r7, #8]
   2489a:	0c1b      	lsrs	r3, r3, #16
   2489c:	b2da      	uxtb	r2, r3
   2489e:	2338      	movs	r3, #56	; 0x38
   248a0:	18fb      	adds	r3, r7, r3
   248a2:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   248a4:	68bb      	ldr	r3, [r7, #8]
   248a6:	0a1b      	lsrs	r3, r3, #8
   248a8:	b2da      	uxtb	r2, r3
   248aa:	2338      	movs	r3, #56	; 0x38
   248ac:	18fb      	adds	r3, r7, r3
   248ae:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   248b0:	68bb      	ldr	r3, [r7, #8]
   248b2:	b2da      	uxtb	r2, r3
   248b4:	2338      	movs	r3, #56	; 0x38
   248b6:	18fb      	adds	r3, r7, r3
   248b8:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   248ba:	683b      	ldr	r3, [r7, #0]
   248bc:	0a1b      	lsrs	r3, r3, #8
   248be:	b2da      	uxtb	r2, r3
   248c0:	2338      	movs	r3, #56	; 0x38
   248c2:	18fb      	adds	r3, r7, r3
   248c4:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   248c6:	683b      	ldr	r3, [r7, #0]
   248c8:	b2da      	uxtb	r2, r3
   248ca:	2338      	movs	r3, #56	; 0x38
   248cc:	18fb      	adds	r3, r7, r3
   248ce:	715a      	strb	r2, [r3, #5]
		len = 7;
   248d0:	2307      	movs	r3, #7
   248d2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   248d4:	e080      	b.n	249d8 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   248d6:	68bb      	ldr	r3, [r7, #8]
   248d8:	0c1b      	lsrs	r3, r3, #16
   248da:	b2da      	uxtb	r2, r3
   248dc:	2338      	movs	r3, #56	; 0x38
   248de:	18fb      	adds	r3, r7, r3
   248e0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   248e2:	68bb      	ldr	r3, [r7, #8]
   248e4:	0a1b      	lsrs	r3, r3, #8
   248e6:	b2da      	uxtb	r2, r3
   248e8:	2338      	movs	r3, #56	; 0x38
   248ea:	18fb      	adds	r3, r7, r3
   248ec:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   248ee:	68bb      	ldr	r3, [r7, #8]
   248f0:	b2da      	uxtb	r2, r3
   248f2:	2338      	movs	r3, #56	; 0x38
   248f4:	18fb      	adds	r3, r7, r3
   248f6:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   248f8:	683b      	ldr	r3, [r7, #0]
   248fa:	0c1b      	lsrs	r3, r3, #16
   248fc:	b2da      	uxtb	r2, r3
   248fe:	2338      	movs	r3, #56	; 0x38
   24900:	18fb      	adds	r3, r7, r3
   24902:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   24904:	683b      	ldr	r3, [r7, #0]
   24906:	0a1b      	lsrs	r3, r3, #8
   24908:	b2da      	uxtb	r2, r3
   2490a:	2338      	movs	r3, #56	; 0x38
   2490c:	18fb      	adds	r3, r7, r3
   2490e:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   24910:	683b      	ldr	r3, [r7, #0]
   24912:	b2da      	uxtb	r2, r3
   24914:	2338      	movs	r3, #56	; 0x38
   24916:	18fb      	adds	r3, r7, r3
   24918:	719a      	strb	r2, [r3, #6]
		len = 8;
   2491a:	2308      	movs	r3, #8
   2491c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2491e:	e05b      	b.n	249d8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   24920:	68bb      	ldr	r3, [r7, #8]
   24922:	0a1b      	lsrs	r3, r3, #8
   24924:	b2da      	uxtb	r2, r3
   24926:	2338      	movs	r3, #56	; 0x38
   24928:	18fb      	adds	r3, r7, r3
   2492a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   2492c:	2388      	movs	r3, #136	; 0x88
   2492e:	18fb      	adds	r3, r7, r3
   24930:	781b      	ldrb	r3, [r3, #0]
   24932:	2b01      	cmp	r3, #1
   24934:	d109      	bne.n	2494a <spi_cmd_complete+0x1b6>
   24936:	2338      	movs	r3, #56	; 0x38
   24938:	18fb      	adds	r3, r7, r3
   2493a:	785b      	ldrb	r3, [r3, #1]
   2493c:	2280      	movs	r2, #128	; 0x80
   2493e:	4252      	negs	r2, r2
   24940:	4313      	orrs	r3, r2
   24942:	b2da      	uxtb	r2, r3
   24944:	2338      	movs	r3, #56	; 0x38
   24946:	18fb      	adds	r3, r7, r3
   24948:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   2494a:	68bb      	ldr	r3, [r7, #8]
   2494c:	b2da      	uxtb	r2, r3
   2494e:	2338      	movs	r3, #56	; 0x38
   24950:	18fb      	adds	r3, r7, r3
   24952:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   24954:	687b      	ldr	r3, [r7, #4]
   24956:	78da      	ldrb	r2, [r3, #3]
   24958:	2338      	movs	r3, #56	; 0x38
   2495a:	18fb      	adds	r3, r7, r3
   2495c:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   2495e:	687b      	ldr	r3, [r7, #4]
   24960:	789a      	ldrb	r2, [r3, #2]
   24962:	2338      	movs	r3, #56	; 0x38
   24964:	18fb      	adds	r3, r7, r3
   24966:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   24968:	687b      	ldr	r3, [r7, #4]
   2496a:	785a      	ldrb	r2, [r3, #1]
   2496c:	2338      	movs	r3, #56	; 0x38
   2496e:	18fb      	adds	r3, r7, r3
   24970:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   24972:	687b      	ldr	r3, [r7, #4]
   24974:	781a      	ldrb	r2, [r3, #0]
   24976:	2338      	movs	r3, #56	; 0x38
   24978:	18fb      	adds	r3, r7, r3
   2497a:	719a      	strb	r2, [r3, #6]
		len = 8;
   2497c:	2308      	movs	r3, #8
   2497e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24980:	e02a      	b.n	249d8 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   24982:	68bb      	ldr	r3, [r7, #8]
   24984:	0c1b      	lsrs	r3, r3, #16
   24986:	b2da      	uxtb	r2, r3
   24988:	2338      	movs	r3, #56	; 0x38
   2498a:	18fb      	adds	r3, r7, r3
   2498c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2498e:	68bb      	ldr	r3, [r7, #8]
   24990:	0a1b      	lsrs	r3, r3, #8
   24992:	b2da      	uxtb	r2, r3
   24994:	2338      	movs	r3, #56	; 0x38
   24996:	18fb      	adds	r3, r7, r3
   24998:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   2499a:	68bb      	ldr	r3, [r7, #8]
   2499c:	b2da      	uxtb	r2, r3
   2499e:	2338      	movs	r3, #56	; 0x38
   249a0:	18fb      	adds	r3, r7, r3
   249a2:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   249a4:	687b      	ldr	r3, [r7, #4]
   249a6:	78da      	ldrb	r2, [r3, #3]
   249a8:	2338      	movs	r3, #56	; 0x38
   249aa:	18fb      	adds	r3, r7, r3
   249ac:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   249ae:	687b      	ldr	r3, [r7, #4]
   249b0:	789a      	ldrb	r2, [r3, #2]
   249b2:	2338      	movs	r3, #56	; 0x38
   249b4:	18fb      	adds	r3, r7, r3
   249b6:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   249b8:	687b      	ldr	r3, [r7, #4]
   249ba:	785a      	ldrb	r2, [r3, #1]
   249bc:	2338      	movs	r3, #56	; 0x38
   249be:	18fb      	adds	r3, r7, r3
   249c0:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   249c2:	687b      	ldr	r3, [r7, #4]
   249c4:	781a      	ldrb	r2, [r3, #0]
   249c6:	2338      	movs	r3, #56	; 0x38
   249c8:	18fb      	adds	r3, r7, r3
   249ca:	71da      	strb	r2, [r3, #7]
		len = 9;
   249cc:	2309      	movs	r3, #9
   249ce:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   249d0:	e002      	b.n	249d8 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   249d2:	2300      	movs	r3, #0
   249d4:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   249d6:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   249d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   249da:	2b01      	cmp	r3, #1
   249dc:	d001      	beq.n	249e2 <spi_cmd_complete+0x24e>
		return result;
   249de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   249e0:	e33a      	b.n	25058 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   249e2:	4b4d      	ldr	r3, [pc, #308]	; (24b18 <spi_cmd_complete+0x384>)
   249e4:	781b      	ldrb	r3, [r3, #0]
   249e6:	2b00      	cmp	r3, #0
   249e8:	d111      	bne.n	24a0e <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   249ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   249ec:	1e5c      	subs	r4, r3, #1
   249ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   249f0:	3b01      	subs	r3, #1
   249f2:	001a      	movs	r2, r3
   249f4:	2338      	movs	r3, #56	; 0x38
   249f6:	18fb      	adds	r3, r7, r3
   249f8:	0019      	movs	r1, r3
   249fa:	207f      	movs	r0, #127	; 0x7f
   249fc:	4b47      	ldr	r3, [pc, #284]	; (24b1c <spi_cmd_complete+0x388>)
   249fe:	4798      	blx	r3
   24a00:	0003      	movs	r3, r0
   24a02:	18db      	adds	r3, r3, r3
   24a04:	b2da      	uxtb	r2, r3
   24a06:	2338      	movs	r3, #56	; 0x38
   24a08:	18fb      	adds	r3, r7, r3
   24a0a:	551a      	strb	r2, [r3, r4]
   24a0c:	e002      	b.n	24a14 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   24a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24a10:	3b01      	subs	r3, #1
   24a12:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   24a14:	230f      	movs	r3, #15
   24a16:	18fb      	adds	r3, r7, r3
   24a18:	781b      	ldrb	r3, [r3, #0]
   24a1a:	2bcf      	cmp	r3, #207	; 0xcf
   24a1c:	d009      	beq.n	24a32 <spi_cmd_complete+0x29e>
   24a1e:	230f      	movs	r3, #15
   24a20:	18fb      	adds	r3, r7, r3
   24a22:	781b      	ldrb	r3, [r3, #0]
   24a24:	2bc5      	cmp	r3, #197	; 0xc5
   24a26:	d004      	beq.n	24a32 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24a28:	230f      	movs	r3, #15
   24a2a:	18fb      	adds	r3, r7, r3
   24a2c:	781b      	ldrb	r3, [r3, #0]
   24a2e:	2bc6      	cmp	r3, #198	; 0xc6
   24a30:	d103      	bne.n	24a3a <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24a34:	3306      	adds	r3, #6
   24a36:	673b      	str	r3, [r7, #112]	; 0x70
   24a38:	e018      	b.n	24a6c <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24a3a:	230f      	movs	r3, #15
   24a3c:	18fb      	adds	r3, r7, r3
   24a3e:	781b      	ldrb	r3, [r3, #0]
   24a40:	2bc4      	cmp	r3, #196	; 0xc4
   24a42:	d004      	beq.n	24a4e <spi_cmd_complete+0x2ba>
   24a44:	230f      	movs	r3, #15
   24a46:	18fb      	adds	r3, r7, r3
   24a48:	781b      	ldrb	r3, [r3, #0]
   24a4a:	2bca      	cmp	r3, #202	; 0xca
   24a4c:	d10b      	bne.n	24a66 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   24a4e:	4b32      	ldr	r3, [pc, #200]	; (24b18 <spi_cmd_complete+0x384>)
   24a50:	781b      	ldrb	r3, [r3, #0]
   24a52:	2b00      	cmp	r3, #0
   24a54:	d103      	bne.n	24a5e <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24a58:	330c      	adds	r3, #12
   24a5a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24a5c:	e006      	b.n	24a6c <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24a60:	330a      	adds	r3, #10
   24a62:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24a64:	e002      	b.n	24a6c <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24a68:	3305      	adds	r3, #5
   24a6a:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   24a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24a6e:	2b20      	cmp	r3, #32
   24a70:	d914      	bls.n	24a9c <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   24a72:	23f7      	movs	r3, #247	; 0xf7
   24a74:	005a      	lsls	r2, r3, #1
   24a76:	492a      	ldr	r1, [pc, #168]	; (24b20 <spi_cmd_complete+0x38c>)
   24a78:	4b2a      	ldr	r3, [pc, #168]	; (24b24 <spi_cmd_complete+0x390>)
   24a7a:	0018      	movs	r0, r3
   24a7c:	4b2a      	ldr	r3, [pc, #168]	; (24b28 <spi_cmd_complete+0x394>)
   24a7e:	4798      	blx	r3
   24a80:	6f39      	ldr	r1, [r7, #112]	; 0x70
   24a82:	4b2a      	ldr	r3, [pc, #168]	; (24b2c <spi_cmd_complete+0x398>)
   24a84:	2220      	movs	r2, #32
   24a86:	0018      	movs	r0, r3
   24a88:	4b27      	ldr	r3, [pc, #156]	; (24b28 <spi_cmd_complete+0x394>)
   24a8a:	4798      	blx	r3
   24a8c:	4b28      	ldr	r3, [pc, #160]	; (24b30 <spi_cmd_complete+0x39c>)
   24a8e:	0018      	movs	r0, r3
   24a90:	4b25      	ldr	r3, [pc, #148]	; (24b28 <spi_cmd_complete+0x394>)
   24a92:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   24a94:	2300      	movs	r3, #0
   24a96:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a9a:	e2dd      	b.n	25058 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   24a9c:	2377      	movs	r3, #119	; 0x77
   24a9e:	18fb      	adds	r3, r7, r3
   24aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24aa2:	701a      	strb	r2, [r3, #0]
   24aa4:	e00d      	b.n	24ac2 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24aa6:	2377      	movs	r3, #119	; 0x77
   24aa8:	18fb      	adds	r3, r7, r3
   24aaa:	781b      	ldrb	r3, [r3, #0]
   24aac:	2238      	movs	r2, #56	; 0x38
   24aae:	18ba      	adds	r2, r7, r2
   24ab0:	2100      	movs	r1, #0
   24ab2:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24ab4:	2377      	movs	r3, #119	; 0x77
   24ab6:	18fb      	adds	r3, r7, r3
   24ab8:	781a      	ldrb	r2, [r3, #0]
   24aba:	2377      	movs	r3, #119	; 0x77
   24abc:	18fb      	adds	r3, r7, r3
   24abe:	3201      	adds	r2, #1
   24ac0:	701a      	strb	r2, [r3, #0]
   24ac2:	2377      	movs	r3, #119	; 0x77
   24ac4:	18fb      	adds	r3, r7, r3
   24ac6:	781a      	ldrb	r2, [r3, #0]
   24ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24aca:	429a      	cmp	r2, r3
   24acc:	d3eb      	bcc.n	24aa6 <spi_cmd_complete+0x312>
	}
	rix = len;
   24ace:	2376      	movs	r3, #118	; 0x76
   24ad0:	18fb      	adds	r3, r7, r3
   24ad2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24ad4:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24ad8:	b29a      	uxth	r2, r3
   24ada:	2318      	movs	r3, #24
   24adc:	18f9      	adds	r1, r7, r3
   24ade:	2338      	movs	r3, #56	; 0x38
   24ae0:	18fb      	adds	r3, r7, r3
   24ae2:	0018      	movs	r0, r3
   24ae4:	4b13      	ldr	r3, [pc, #76]	; (24b34 <spi_cmd_complete+0x3a0>)
   24ae6:	4798      	blx	r3
   24ae8:	1e03      	subs	r3, r0, #0
   24aea:	d027      	beq.n	24b3c <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   24aec:	23fa      	movs	r3, #250	; 0xfa
   24aee:	33ff      	adds	r3, #255	; 0xff
   24af0:	001a      	movs	r2, r3
   24af2:	490b      	ldr	r1, [pc, #44]	; (24b20 <spi_cmd_complete+0x38c>)
   24af4:	4b0b      	ldr	r3, [pc, #44]	; (24b24 <spi_cmd_complete+0x390>)
   24af6:	0018      	movs	r0, r3
   24af8:	4b0b      	ldr	r3, [pc, #44]	; (24b28 <spi_cmd_complete+0x394>)
   24afa:	4798      	blx	r3
   24afc:	4b0e      	ldr	r3, [pc, #56]	; (24b38 <spi_cmd_complete+0x3a4>)
   24afe:	0018      	movs	r0, r3
   24b00:	4b09      	ldr	r3, [pc, #36]	; (24b28 <spi_cmd_complete+0x394>)
   24b02:	4798      	blx	r3
   24b04:	4b0a      	ldr	r3, [pc, #40]	; (24b30 <spi_cmd_complete+0x39c>)
   24b06:	0018      	movs	r0, r3
   24b08:	4b07      	ldr	r3, [pc, #28]	; (24b28 <spi_cmd_complete+0x394>)
   24b0a:	4798      	blx	r3
		result = N_FAIL;
   24b0c:	2300      	movs	r3, #0
   24b0e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b12:	e2a1      	b.n	25058 <spi_cmd_complete+0x8c4>
   24b14:	0003a264 	.word	0x0003a264
   24b18:	200042b0 	.word	0x200042b0
   24b1c:	000241c9 	.word	0x000241c9
   24b20:	0003a2c4 	.word	0x0003a2c4
   24b24:	00039cb0 	.word	0x00039cb0
   24b28:	0001ed59 	.word	0x0001ed59
   24b2c:	00039d78 	.word	0x00039d78
   24b30:	00039cf0 	.word	0x00039cf0
   24b34:	00024155 	.word	0x00024155
   24b38:	00039cc4 	.word	0x00039cc4
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24b3c:	230f      	movs	r3, #15
   24b3e:	18fb      	adds	r3, r7, r3
   24b40:	781b      	ldrb	r3, [r3, #0]
   24b42:	2bcf      	cmp	r3, #207	; 0xcf
   24b44:	d009      	beq.n	24b5a <spi_cmd_complete+0x3c6>
   24b46:	230f      	movs	r3, #15
   24b48:	18fb      	adds	r3, r7, r3
   24b4a:	781b      	ldrb	r3, [r3, #0]
   24b4c:	2bc5      	cmp	r3, #197	; 0xc5
   24b4e:	d004      	beq.n	24b5a <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   24b50:	230f      	movs	r3, #15
   24b52:	18fb      	adds	r3, r7, r3
   24b54:	781b      	ldrb	r3, [r3, #0]
   24b56:	2bc6      	cmp	r3, #198	; 0xc6
   24b58:	d106      	bne.n	24b68 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   24b5a:	2376      	movs	r3, #118	; 0x76
   24b5c:	18fb      	adds	r3, r7, r3
   24b5e:	781a      	ldrb	r2, [r3, #0]
   24b60:	2376      	movs	r3, #118	; 0x76
   24b62:	18fb      	adds	r3, r7, r3
   24b64:	3201      	adds	r2, #1
   24b66:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24b68:	2376      	movs	r3, #118	; 0x76
   24b6a:	18fb      	adds	r3, r7, r3
   24b6c:	781b      	ldrb	r3, [r3, #0]
   24b6e:	2276      	movs	r2, #118	; 0x76
   24b70:	18ba      	adds	r2, r7, r2
   24b72:	1c59      	adds	r1, r3, #1
   24b74:	7011      	strb	r1, [r2, #0]
   24b76:	001a      	movs	r2, r3
   24b78:	2318      	movs	r3, #24
   24b7a:	18fb      	adds	r3, r7, r3
   24b7c:	5c9a      	ldrb	r2, [r3, r2]
   24b7e:	2317      	movs	r3, #23
   24b80:	18fb      	adds	r3, r7, r3
   24b82:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24b84:	2317      	movs	r3, #23
   24b86:	18fb      	adds	r3, r7, r3
   24b88:	781b      	ldrb	r3, [r3, #0]
   24b8a:	220f      	movs	r2, #15
   24b8c:	18ba      	adds	r2, r7, r2
   24b8e:	7812      	ldrb	r2, [r2, #0]
   24b90:	429a      	cmp	r2, r3
   24b92:	d018      	beq.n	24bc6 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24b94:	4add      	ldr	r2, [pc, #884]	; (24f0c <spi_cmd_complete+0x778>)
   24b96:	49de      	ldr	r1, [pc, #888]	; (24f10 <spi_cmd_complete+0x77c>)
   24b98:	4bde      	ldr	r3, [pc, #888]	; (24f14 <spi_cmd_complete+0x780>)
   24b9a:	0018      	movs	r0, r3
   24b9c:	4bde      	ldr	r3, [pc, #888]	; (24f18 <spi_cmd_complete+0x784>)
   24b9e:	4798      	blx	r3
   24ba0:	230f      	movs	r3, #15
   24ba2:	18fb      	adds	r3, r7, r3
   24ba4:	7819      	ldrb	r1, [r3, #0]
   24ba6:	2317      	movs	r3, #23
   24ba8:	18fb      	adds	r3, r7, r3
   24baa:	781b      	ldrb	r3, [r3, #0]
   24bac:	001a      	movs	r2, r3
   24bae:	4bdb      	ldr	r3, [pc, #876]	; (24f1c <spi_cmd_complete+0x788>)
   24bb0:	0018      	movs	r0, r3
   24bb2:	4bd9      	ldr	r3, [pc, #868]	; (24f18 <spi_cmd_complete+0x784>)
   24bb4:	4798      	blx	r3
   24bb6:	4bda      	ldr	r3, [pc, #872]	; (24f20 <spi_cmd_complete+0x78c>)
   24bb8:	0018      	movs	r0, r3
   24bba:	4bd7      	ldr	r3, [pc, #860]	; (24f18 <spi_cmd_complete+0x784>)
   24bbc:	4798      	blx	r3
		result = N_FAIL;
   24bbe:	2300      	movs	r3, #0
   24bc0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24bc4:	e248      	b.n	25058 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24bc6:	2376      	movs	r3, #118	; 0x76
   24bc8:	18fb      	adds	r3, r7, r3
   24bca:	781b      	ldrb	r3, [r3, #0]
   24bcc:	2276      	movs	r2, #118	; 0x76
   24bce:	18ba      	adds	r2, r7, r2
   24bd0:	1c59      	adds	r1, r3, #1
   24bd2:	7011      	strb	r1, [r2, #0]
   24bd4:	001a      	movs	r2, r3
   24bd6:	2318      	movs	r3, #24
   24bd8:	18fb      	adds	r3, r7, r3
   24bda:	5c9a      	ldrb	r2, [r3, r2]
   24bdc:	2317      	movs	r3, #23
   24bde:	18fb      	adds	r3, r7, r3
   24be0:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   24be2:	2317      	movs	r3, #23
   24be4:	18fb      	adds	r3, r7, r3
   24be6:	781b      	ldrb	r3, [r3, #0]
   24be8:	2b00      	cmp	r3, #0
   24bea:	d016      	beq.n	24c1a <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   24bec:	4acd      	ldr	r2, [pc, #820]	; (24f24 <spi_cmd_complete+0x790>)
   24bee:	49c8      	ldr	r1, [pc, #800]	; (24f10 <spi_cmd_complete+0x77c>)
   24bf0:	4bc8      	ldr	r3, [pc, #800]	; (24f14 <spi_cmd_complete+0x780>)
   24bf2:	0018      	movs	r0, r3
   24bf4:	4bc8      	ldr	r3, [pc, #800]	; (24f18 <spi_cmd_complete+0x784>)
   24bf6:	4798      	blx	r3
   24bf8:	2317      	movs	r3, #23
   24bfa:	18fb      	adds	r3, r7, r3
   24bfc:	781b      	ldrb	r3, [r3, #0]
   24bfe:	001a      	movs	r2, r3
   24c00:	4bc9      	ldr	r3, [pc, #804]	; (24f28 <spi_cmd_complete+0x794>)
   24c02:	0011      	movs	r1, r2
   24c04:	0018      	movs	r0, r3
   24c06:	4bc4      	ldr	r3, [pc, #784]	; (24f18 <spi_cmd_complete+0x784>)
   24c08:	4798      	blx	r3
   24c0a:	4bc5      	ldr	r3, [pc, #788]	; (24f20 <spi_cmd_complete+0x78c>)
   24c0c:	0018      	movs	r0, r3
   24c0e:	4bc2      	ldr	r3, [pc, #776]	; (24f18 <spi_cmd_complete+0x784>)
   24c10:	4798      	blx	r3
		result = N_FAIL;
   24c12:	2300      	movs	r3, #0
   24c14:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24c18:	e21e      	b.n	25058 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   24c1a:	230f      	movs	r3, #15
   24c1c:	18fb      	adds	r3, r7, r3
   24c1e:	781b      	ldrb	r3, [r3, #0]
   24c20:	2bc4      	cmp	r3, #196	; 0xc4
   24c22:	d00f      	beq.n	24c44 <spi_cmd_complete+0x4b0>
   24c24:	230f      	movs	r3, #15
   24c26:	18fb      	adds	r3, r7, r3
   24c28:	781b      	ldrb	r3, [r3, #0]
   24c2a:	2bca      	cmp	r3, #202	; 0xca
   24c2c:	d00a      	beq.n	24c44 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24c2e:	230f      	movs	r3, #15
   24c30:	18fb      	adds	r3, r7, r3
   24c32:	781b      	ldrb	r3, [r3, #0]
   24c34:	2bc2      	cmp	r3, #194	; 0xc2
   24c36:	d005      	beq.n	24c44 <spi_cmd_complete+0x4b0>
   24c38:	230f      	movs	r3, #15
   24c3a:	18fb      	adds	r3, r7, r3
   24c3c:	781b      	ldrb	r3, [r3, #0]
   24c3e:	2bc8      	cmp	r3, #200	; 0xc8
   24c40:	d000      	beq.n	24c44 <spi_cmd_complete+0x4b0>
   24c42:	e208      	b.n	25056 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24c44:	230a      	movs	r3, #10
   24c46:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24c48:	2376      	movs	r3, #118	; 0x76
   24c4a:	18fb      	adds	r3, r7, r3
   24c4c:	781a      	ldrb	r2, [r3, #0]
   24c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24c50:	429a      	cmp	r2, r3
   24c52:	d218      	bcs.n	24c86 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24c54:	2376      	movs	r3, #118	; 0x76
   24c56:	18fb      	adds	r3, r7, r3
   24c58:	781b      	ldrb	r3, [r3, #0]
   24c5a:	2276      	movs	r2, #118	; 0x76
   24c5c:	18ba      	adds	r2, r7, r2
   24c5e:	1c59      	adds	r1, r3, #1
   24c60:	7011      	strb	r1, [r2, #0]
   24c62:	001a      	movs	r2, r3
   24c64:	2318      	movs	r3, #24
   24c66:	18fb      	adds	r3, r7, r3
   24c68:	5c9a      	ldrb	r2, [r3, r2]
   24c6a:	2317      	movs	r3, #23
   24c6c:	18fb      	adds	r3, r7, r3
   24c6e:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24c70:	2317      	movs	r3, #23
   24c72:	18fb      	adds	r3, r7, r3
   24c74:	781b      	ldrb	r3, [r3, #0]
   24c76:	091b      	lsrs	r3, r3, #4
   24c78:	b2db      	uxtb	r3, r3
   24c7a:	001a      	movs	r2, r3
   24c7c:	230f      	movs	r3, #15
   24c7e:	4013      	ands	r3, r2
   24c80:	2b0f      	cmp	r3, #15
   24c82:	d103      	bne.n	24c8c <spi_cmd_complete+0x4f8>
					break;
   24c84:	e007      	b.n	24c96 <spi_cmd_complete+0x502>
					retry = 0;
   24c86:	2300      	movs	r3, #0
   24c88:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24c8a:	e004      	b.n	24c96 <spi_cmd_complete+0x502>
			} while (retry--);
   24c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24c8e:	1e5a      	subs	r2, r3, #1
   24c90:	667a      	str	r2, [r7, #100]	; 0x64
   24c92:	2b00      	cmp	r3, #0
   24c94:	d1d8      	bne.n	24c48 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24c98:	2b00      	cmp	r3, #0
   24c9a:	dc18      	bgt.n	24cce <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24c9c:	2395      	movs	r3, #149	; 0x95
   24c9e:	009a      	lsls	r2, r3, #2
   24ca0:	499b      	ldr	r1, [pc, #620]	; (24f10 <spi_cmd_complete+0x77c>)
   24ca2:	4b9c      	ldr	r3, [pc, #624]	; (24f14 <spi_cmd_complete+0x780>)
   24ca4:	0018      	movs	r0, r3
   24ca6:	4b9c      	ldr	r3, [pc, #624]	; (24f18 <spi_cmd_complete+0x784>)
   24ca8:	4798      	blx	r3
   24caa:	2317      	movs	r3, #23
   24cac:	18fb      	adds	r3, r7, r3
   24cae:	781b      	ldrb	r3, [r3, #0]
   24cb0:	001a      	movs	r2, r3
   24cb2:	4b9e      	ldr	r3, [pc, #632]	; (24f2c <spi_cmd_complete+0x798>)
   24cb4:	0011      	movs	r1, r2
   24cb6:	0018      	movs	r0, r3
   24cb8:	4b97      	ldr	r3, [pc, #604]	; (24f18 <spi_cmd_complete+0x784>)
   24cba:	4798      	blx	r3
   24cbc:	4b98      	ldr	r3, [pc, #608]	; (24f20 <spi_cmd_complete+0x78c>)
   24cbe:	0018      	movs	r0, r3
   24cc0:	4b95      	ldr	r3, [pc, #596]	; (24f18 <spi_cmd_complete+0x784>)
   24cc2:	4798      	blx	r3
				result = N_RESET;
   24cc4:	2301      	movs	r3, #1
   24cc6:	425b      	negs	r3, r3
   24cc8:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24ccc:	e1c4      	b.n	25058 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24cce:	230f      	movs	r3, #15
   24cd0:	18fb      	adds	r3, r7, r3
   24cd2:	781b      	ldrb	r3, [r3, #0]
   24cd4:	2bc4      	cmp	r3, #196	; 0xc4
   24cd6:	d005      	beq.n	24ce4 <spi_cmd_complete+0x550>
   24cd8:	230f      	movs	r3, #15
   24cda:	18fb      	adds	r3, r7, r3
   24cdc:	781b      	ldrb	r3, [r3, #0]
   24cde:	2bca      	cmp	r3, #202	; 0xca
   24ce0:	d000      	beq.n	24ce4 <spi_cmd_complete+0x550>
   24ce2:	e08e      	b.n	24e02 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24ce4:	2376      	movs	r3, #118	; 0x76
   24ce6:	18fb      	adds	r3, r7, r3
   24ce8:	781b      	ldrb	r3, [r3, #0]
   24cea:	3303      	adds	r3, #3
   24cec:	001a      	movs	r2, r3
   24cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24cf0:	429a      	cmp	r2, r3
   24cf2:	d23c      	bcs.n	24d6e <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24cf4:	2376      	movs	r3, #118	; 0x76
   24cf6:	18fb      	adds	r3, r7, r3
   24cf8:	781b      	ldrb	r3, [r3, #0]
   24cfa:	2276      	movs	r2, #118	; 0x76
   24cfc:	18ba      	adds	r2, r7, r2
   24cfe:	1c59      	adds	r1, r3, #1
   24d00:	7011      	strb	r1, [r2, #0]
   24d02:	001a      	movs	r2, r3
   24d04:	2318      	movs	r3, #24
   24d06:	18fb      	adds	r3, r7, r3
   24d08:	5c9a      	ldrb	r2, [r3, r2]
   24d0a:	687b      	ldr	r3, [r7, #4]
   24d0c:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24d0e:	687b      	ldr	r3, [r7, #4]
   24d10:	1c5a      	adds	r2, r3, #1
   24d12:	2376      	movs	r3, #118	; 0x76
   24d14:	18fb      	adds	r3, r7, r3
   24d16:	781b      	ldrb	r3, [r3, #0]
   24d18:	2176      	movs	r1, #118	; 0x76
   24d1a:	1879      	adds	r1, r7, r1
   24d1c:	1c58      	adds	r0, r3, #1
   24d1e:	7008      	strb	r0, [r1, #0]
   24d20:	0019      	movs	r1, r3
   24d22:	2318      	movs	r3, #24
   24d24:	18fb      	adds	r3, r7, r3
   24d26:	5c5b      	ldrb	r3, [r3, r1]
   24d28:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24d2a:	687b      	ldr	r3, [r7, #4]
   24d2c:	1c9a      	adds	r2, r3, #2
   24d2e:	2376      	movs	r3, #118	; 0x76
   24d30:	18fb      	adds	r3, r7, r3
   24d32:	781b      	ldrb	r3, [r3, #0]
   24d34:	2176      	movs	r1, #118	; 0x76
   24d36:	1879      	adds	r1, r7, r1
   24d38:	1c58      	adds	r0, r3, #1
   24d3a:	7008      	strb	r0, [r1, #0]
   24d3c:	0019      	movs	r1, r3
   24d3e:	2318      	movs	r3, #24
   24d40:	18fb      	adds	r3, r7, r3
   24d42:	5c5b      	ldrb	r3, [r3, r1]
   24d44:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24d46:	687b      	ldr	r3, [r7, #4]
   24d48:	1cda      	adds	r2, r3, #3
   24d4a:	2376      	movs	r3, #118	; 0x76
   24d4c:	18fb      	adds	r3, r7, r3
   24d4e:	781b      	ldrb	r3, [r3, #0]
   24d50:	2176      	movs	r1, #118	; 0x76
   24d52:	1879      	adds	r1, r7, r1
   24d54:	1c58      	adds	r0, r3, #1
   24d56:	7008      	strb	r0, [r1, #0]
   24d58:	0019      	movs	r1, r3
   24d5a:	2318      	movs	r3, #24
   24d5c:	18fb      	adds	r3, r7, r3
   24d5e:	5c5b      	ldrb	r3, [r3, r1]
   24d60:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24d62:	4b73      	ldr	r3, [pc, #460]	; (24f30 <spi_cmd_complete+0x79c>)
   24d64:	781b      	ldrb	r3, [r3, #0]
   24d66:	2b00      	cmp	r3, #0
   24d68:	d000      	beq.n	24d6c <spi_cmd_complete+0x5d8>
   24d6a:	e174      	b.n	25056 <spi_cmd_complete+0x8c2>
   24d6c:	e011      	b.n	24d92 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24d6e:	4a71      	ldr	r2, [pc, #452]	; (24f34 <spi_cmd_complete+0x7a0>)
   24d70:	4967      	ldr	r1, [pc, #412]	; (24f10 <spi_cmd_complete+0x77c>)
   24d72:	4b68      	ldr	r3, [pc, #416]	; (24f14 <spi_cmd_complete+0x780>)
   24d74:	0018      	movs	r0, r3
   24d76:	4b68      	ldr	r3, [pc, #416]	; (24f18 <spi_cmd_complete+0x784>)
   24d78:	4798      	blx	r3
   24d7a:	4b6f      	ldr	r3, [pc, #444]	; (24f38 <spi_cmd_complete+0x7a4>)
   24d7c:	0018      	movs	r0, r3
   24d7e:	4b66      	ldr	r3, [pc, #408]	; (24f18 <spi_cmd_complete+0x784>)
   24d80:	4798      	blx	r3
   24d82:	4b67      	ldr	r3, [pc, #412]	; (24f20 <spi_cmd_complete+0x78c>)
   24d84:	0018      	movs	r0, r3
   24d86:	4b64      	ldr	r3, [pc, #400]	; (24f18 <spi_cmd_complete+0x784>)
   24d88:	4798      	blx	r3
					result = N_FAIL;
   24d8a:	2300      	movs	r3, #0
   24d8c:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24d90:	e162      	b.n	25058 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24d92:	2376      	movs	r3, #118	; 0x76
   24d94:	18fb      	adds	r3, r7, r3
   24d96:	781b      	ldrb	r3, [r3, #0]
   24d98:	3301      	adds	r3, #1
   24d9a:	001a      	movs	r2, r3
   24d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24d9e:	429a      	cmp	r2, r3
   24da0:	d21c      	bcs.n	24ddc <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24da2:	2376      	movs	r3, #118	; 0x76
   24da4:	18fb      	adds	r3, r7, r3
   24da6:	781b      	ldrb	r3, [r3, #0]
   24da8:	2276      	movs	r2, #118	; 0x76
   24daa:	18ba      	adds	r2, r7, r2
   24dac:	1c59      	adds	r1, r3, #1
   24dae:	7011      	strb	r1, [r2, #0]
   24db0:	001a      	movs	r2, r3
   24db2:	2318      	movs	r3, #24
   24db4:	18fb      	adds	r3, r7, r3
   24db6:	5c9a      	ldrb	r2, [r3, r2]
   24db8:	2314      	movs	r3, #20
   24dba:	18fb      	adds	r3, r7, r3
   24dbc:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24dbe:	2376      	movs	r3, #118	; 0x76
   24dc0:	18fb      	adds	r3, r7, r3
   24dc2:	781b      	ldrb	r3, [r3, #0]
   24dc4:	2276      	movs	r2, #118	; 0x76
   24dc6:	18ba      	adds	r2, r7, r2
   24dc8:	1c59      	adds	r1, r3, #1
   24dca:	7011      	strb	r1, [r2, #0]
   24dcc:	001a      	movs	r2, r3
   24dce:	2318      	movs	r3, #24
   24dd0:	18fb      	adds	r3, r7, r3
   24dd2:	5c9a      	ldrb	r2, [r3, r2]
   24dd4:	2314      	movs	r3, #20
   24dd6:	18fb      	adds	r3, r7, r3
   24dd8:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24dda:	e13c      	b.n	25056 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24ddc:	239c      	movs	r3, #156	; 0x9c
   24dde:	009a      	lsls	r2, r3, #2
   24de0:	494b      	ldr	r1, [pc, #300]	; (24f10 <spi_cmd_complete+0x77c>)
   24de2:	4b4c      	ldr	r3, [pc, #304]	; (24f14 <spi_cmd_complete+0x780>)
   24de4:	0018      	movs	r0, r3
   24de6:	4b4c      	ldr	r3, [pc, #304]	; (24f18 <spi_cmd_complete+0x784>)
   24de8:	4798      	blx	r3
   24dea:	4b54      	ldr	r3, [pc, #336]	; (24f3c <spi_cmd_complete+0x7a8>)
   24dec:	0018      	movs	r0, r3
   24dee:	4b4a      	ldr	r3, [pc, #296]	; (24f18 <spi_cmd_complete+0x784>)
   24df0:	4798      	blx	r3
   24df2:	4b4b      	ldr	r3, [pc, #300]	; (24f20 <spi_cmd_complete+0x78c>)
   24df4:	0018      	movs	r0, r3
   24df6:	4b48      	ldr	r3, [pc, #288]	; (24f18 <spi_cmd_complete+0x784>)
   24df8:	4798      	blx	r3
						result = N_FAIL;
   24dfa:	2300      	movs	r3, #0
   24dfc:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24e00:	e12a      	b.n	25058 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24e02:	230f      	movs	r3, #15
   24e04:	18fb      	adds	r3, r7, r3
   24e06:	781b      	ldrb	r3, [r3, #0]
   24e08:	2bc2      	cmp	r3, #194	; 0xc2
   24e0a:	d005      	beq.n	24e18 <spi_cmd_complete+0x684>
   24e0c:	230f      	movs	r3, #15
   24e0e:	18fb      	adds	r3, r7, r3
   24e10:	781b      	ldrb	r3, [r3, #0]
   24e12:	2bc8      	cmp	r3, #200	; 0xc8
   24e14:	d000      	beq.n	24e18 <spi_cmd_complete+0x684>
   24e16:	e11e      	b.n	25056 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24e18:	2300      	movs	r3, #0
   24e1a:	663b      	str	r3, [r7, #96]	; 0x60
   24e1c:	e011      	b.n	24e42 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   24e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24e20:	1c5a      	adds	r2, r3, #1
   24e22:	663a      	str	r2, [r7, #96]	; 0x60
   24e24:	001a      	movs	r2, r3
   24e26:	687b      	ldr	r3, [r7, #4]
   24e28:	189a      	adds	r2, r3, r2
   24e2a:	2376      	movs	r3, #118	; 0x76
   24e2c:	18fb      	adds	r3, r7, r3
   24e2e:	781b      	ldrb	r3, [r3, #0]
   24e30:	2176      	movs	r1, #118	; 0x76
   24e32:	1879      	adds	r1, r7, r1
   24e34:	1c58      	adds	r0, r3, #1
   24e36:	7008      	strb	r0, [r1, #0]
   24e38:	0019      	movs	r1, r3
   24e3a:	2318      	movs	r3, #24
   24e3c:	18fb      	adds	r3, r7, r3
   24e3e:	5c5b      	ldrb	r3, [r3, r1]
   24e40:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24e42:	2376      	movs	r3, #118	; 0x76
   24e44:	18fb      	adds	r3, r7, r3
   24e46:	781a      	ldrb	r2, [r3, #0]
   24e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24e4a:	429a      	cmp	r2, r3
   24e4c:	d203      	bcs.n	24e56 <spi_cmd_complete+0x6c2>
   24e4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24e50:	683b      	ldr	r3, [r7, #0]
   24e52:	429a      	cmp	r2, r3
   24e54:	d3e3      	bcc.n	24e1e <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24e58:	683a      	ldr	r2, [r7, #0]
   24e5a:	1ad3      	subs	r3, r2, r3
   24e5c:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24e5e:	683b      	ldr	r3, [r7, #0]
   24e60:	2b00      	cmp	r3, #0
   24e62:	d100      	bne.n	24e66 <spi_cmd_complete+0x6d2>
   24e64:	e0f1      	b.n	2504a <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24e68:	2280      	movs	r2, #128	; 0x80
   24e6a:	0192      	lsls	r2, r2, #6
   24e6c:	1ad3      	subs	r3, r2, r3
   24e6e:	001a      	movs	r2, r3
   24e70:	683b      	ldr	r3, [r7, #0]
   24e72:	429a      	cmp	r2, r3
   24e74:	d302      	bcc.n	24e7c <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24e76:	683b      	ldr	r3, [r7, #0]
   24e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   24e7a:	e004      	b.n	24e86 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24e7e:	2280      	movs	r2, #128	; 0x80
   24e80:	0192      	lsls	r2, r2, #6
   24e82:	1ad3      	subs	r3, r2, r3
   24e84:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24e86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24e88:	687a      	ldr	r2, [r7, #4]
   24e8a:	18d3      	adds	r3, r2, r3
   24e8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24e8e:	b292      	uxth	r2, r2
   24e90:	0011      	movs	r1, r2
   24e92:	0018      	movs	r0, r3
   24e94:	4b2a      	ldr	r3, [pc, #168]	; (24f40 <spi_cmd_complete+0x7ac>)
   24e96:	4798      	blx	r3
   24e98:	1e03      	subs	r3, r0, #0
   24e9a:	d010      	beq.n	24ebe <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24e9c:	4a29      	ldr	r2, [pc, #164]	; (24f44 <spi_cmd_complete+0x7b0>)
   24e9e:	491c      	ldr	r1, [pc, #112]	; (24f10 <spi_cmd_complete+0x77c>)
   24ea0:	4b1c      	ldr	r3, [pc, #112]	; (24f14 <spi_cmd_complete+0x780>)
   24ea2:	0018      	movs	r0, r3
   24ea4:	4b1c      	ldr	r3, [pc, #112]	; (24f18 <spi_cmd_complete+0x784>)
   24ea6:	4798      	blx	r3
   24ea8:	4b27      	ldr	r3, [pc, #156]	; (24f48 <spi_cmd_complete+0x7b4>)
   24eaa:	0018      	movs	r0, r3
   24eac:	4b1a      	ldr	r3, [pc, #104]	; (24f18 <spi_cmd_complete+0x784>)
   24eae:	4798      	blx	r3
   24eb0:	4b1b      	ldr	r3, [pc, #108]	; (24f20 <spi_cmd_complete+0x78c>)
   24eb2:	0018      	movs	r0, r3
   24eb4:	4b18      	ldr	r3, [pc, #96]	; (24f18 <spi_cmd_complete+0x784>)
   24eb6:	4798      	blx	r3
						result = N_FAIL;
   24eb8:	2300      	movs	r3, #0
   24eba:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24ebc:	e0cb      	b.n	25056 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24ebe:	4b1c      	ldr	r3, [pc, #112]	; (24f30 <spi_cmd_complete+0x79c>)
   24ec0:	781b      	ldrb	r3, [r3, #0]
   24ec2:	2b00      	cmp	r3, #0
   24ec4:	d119      	bne.n	24efa <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24ec6:	2314      	movs	r3, #20
   24ec8:	18fb      	adds	r3, r7, r3
   24eca:	2102      	movs	r1, #2
   24ecc:	0018      	movs	r0, r3
   24ece:	4b1c      	ldr	r3, [pc, #112]	; (24f40 <spi_cmd_complete+0x7ac>)
   24ed0:	4798      	blx	r3
   24ed2:	1e03      	subs	r3, r0, #0
   24ed4:	d011      	beq.n	24efa <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24ed6:	23a6      	movs	r3, #166	; 0xa6
   24ed8:	009a      	lsls	r2, r3, #2
   24eda:	490d      	ldr	r1, [pc, #52]	; (24f10 <spi_cmd_complete+0x77c>)
   24edc:	4b0d      	ldr	r3, [pc, #52]	; (24f14 <spi_cmd_complete+0x780>)
   24ede:	0018      	movs	r0, r3
   24ee0:	4b0d      	ldr	r3, [pc, #52]	; (24f18 <spi_cmd_complete+0x784>)
   24ee2:	4798      	blx	r3
   24ee4:	4b19      	ldr	r3, [pc, #100]	; (24f4c <spi_cmd_complete+0x7b8>)
   24ee6:	0018      	movs	r0, r3
   24ee8:	4b0b      	ldr	r3, [pc, #44]	; (24f18 <spi_cmd_complete+0x784>)
   24eea:	4798      	blx	r3
   24eec:	4b0c      	ldr	r3, [pc, #48]	; (24f20 <spi_cmd_complete+0x78c>)
   24eee:	0018      	movs	r0, r3
   24ef0:	4b09      	ldr	r3, [pc, #36]	; (24f18 <spi_cmd_complete+0x784>)
   24ef2:	4798      	blx	r3
							result = N_FAIL;
   24ef4:	2300      	movs	r3, #0
   24ef6:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24ef8:	e0ad      	b.n	25056 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24efe:	18d3      	adds	r3, r2, r3
   24f00:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24f04:	683a      	ldr	r2, [r7, #0]
   24f06:	1ad3      	subs	r3, r2, r3
   24f08:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24f0a:	e09e      	b.n	2504a <spi_cmd_complete+0x8b6>
   24f0c:	0000022f 	.word	0x0000022f
   24f10:	0003a2c4 	.word	0x0003a2c4
   24f14:	00039cb0 	.word	0x00039cb0
   24f18:	0001ed59 	.word	0x0001ed59
   24f1c:	00039da8 	.word	0x00039da8
   24f20:	00039cf0 	.word	0x00039cf0
   24f24:	00000239 	.word	0x00000239
   24f28:	00039de4 	.word	0x00039de4
   24f2c:	00039e18 	.word	0x00039e18
   24f30:	200042b0 	.word	0x200042b0
   24f34:	00000263 	.word	0x00000263
   24f38:	00039e48 	.word	0x00039e48
   24f3c:	00039e78 	.word	0x00039e78
   24f40:	000240cd 	.word	0x000240cd
   24f44:	0000028e 	.word	0x0000028e
   24f48:	00039ea8 	.word	0x00039ea8
   24f4c:	00039edc 	.word	0x00039edc
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24f50:	683a      	ldr	r2, [r7, #0]
   24f52:	2380      	movs	r3, #128	; 0x80
   24f54:	019b      	lsls	r3, r3, #6
   24f56:	429a      	cmp	r2, r3
   24f58:	d802      	bhi.n	24f60 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24f5a:	683b      	ldr	r3, [r7, #0]
   24f5c:	65bb      	str	r3, [r7, #88]	; 0x58
   24f5e:	e002      	b.n	24f66 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24f60:	2380      	movs	r3, #128	; 0x80
   24f62:	019b      	lsls	r3, r3, #6
   24f64:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24f66:	230a      	movs	r3, #10
   24f68:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24f6a:	2317      	movs	r3, #23
   24f6c:	18fb      	adds	r3, r7, r3
   24f6e:	2101      	movs	r1, #1
   24f70:	0018      	movs	r0, r3
   24f72:	4b3b      	ldr	r3, [pc, #236]	; (25060 <spi_cmd_complete+0x8cc>)
   24f74:	4798      	blx	r3
   24f76:	1e03      	subs	r3, r0, #0
   24f78:	d011      	beq.n	24f9e <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24f7a:	23ae      	movs	r3, #174	; 0xae
   24f7c:	009a      	lsls	r2, r3, #2
   24f7e:	4939      	ldr	r1, [pc, #228]	; (25064 <spi_cmd_complete+0x8d0>)
   24f80:	4b39      	ldr	r3, [pc, #228]	; (25068 <spi_cmd_complete+0x8d4>)
   24f82:	0018      	movs	r0, r3
   24f84:	4b39      	ldr	r3, [pc, #228]	; (2506c <spi_cmd_complete+0x8d8>)
   24f86:	4798      	blx	r3
   24f88:	4b39      	ldr	r3, [pc, #228]	; (25070 <spi_cmd_complete+0x8dc>)
   24f8a:	0018      	movs	r0, r3
   24f8c:	4b37      	ldr	r3, [pc, #220]	; (2506c <spi_cmd_complete+0x8d8>)
   24f8e:	4798      	blx	r3
   24f90:	4b38      	ldr	r3, [pc, #224]	; (25074 <spi_cmd_complete+0x8e0>)
   24f92:	0018      	movs	r0, r3
   24f94:	4b35      	ldr	r3, [pc, #212]	; (2506c <spi_cmd_complete+0x8d8>)
   24f96:	4798      	blx	r3
							result = N_FAIL;
   24f98:	2300      	movs	r3, #0
   24f9a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24f9c:	e010      	b.n	24fc0 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   24f9e:	2317      	movs	r3, #23
   24fa0:	18fb      	adds	r3, r7, r3
   24fa2:	781b      	ldrb	r3, [r3, #0]
   24fa4:	091b      	lsrs	r3, r3, #4
   24fa6:	b2db      	uxtb	r3, r3
   24fa8:	001a      	movs	r2, r3
   24faa:	230f      	movs	r3, #15
   24fac:	4013      	ands	r3, r2
   24fae:	2b0f      	cmp	r3, #15
   24fb0:	d005      	beq.n	24fbe <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24fb4:	1e5a      	subs	r2, r3, #1
   24fb6:	667a      	str	r2, [r7, #100]	; 0x64
   24fb8:	2b00      	cmp	r3, #0
   24fba:	d1d6      	bne.n	24f6a <spi_cmd_complete+0x7d6>
   24fbc:	e000      	b.n	24fc0 <spi_cmd_complete+0x82c>
							break;
   24fbe:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24fc2:	2b00      	cmp	r3, #0
   24fc4:	d046      	beq.n	25054 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24fc8:	687a      	ldr	r2, [r7, #4]
   24fca:	18d3      	adds	r3, r2, r3
   24fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
   24fce:	b292      	uxth	r2, r2
   24fd0:	0011      	movs	r1, r2
   24fd2:	0018      	movs	r0, r3
   24fd4:	4b22      	ldr	r3, [pc, #136]	; (25060 <spi_cmd_complete+0x8cc>)
   24fd6:	4798      	blx	r3
   24fd8:	1e03      	subs	r3, r0, #0
   24fda:	d011      	beq.n	25000 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24fdc:	23b2      	movs	r3, #178	; 0xb2
   24fde:	009a      	lsls	r2, r3, #2
   24fe0:	4920      	ldr	r1, [pc, #128]	; (25064 <spi_cmd_complete+0x8d0>)
   24fe2:	4b21      	ldr	r3, [pc, #132]	; (25068 <spi_cmd_complete+0x8d4>)
   24fe4:	0018      	movs	r0, r3
   24fe6:	4b21      	ldr	r3, [pc, #132]	; (2506c <spi_cmd_complete+0x8d8>)
   24fe8:	4798      	blx	r3
   24fea:	4b23      	ldr	r3, [pc, #140]	; (25078 <spi_cmd_complete+0x8e4>)
   24fec:	0018      	movs	r0, r3
   24fee:	4b1f      	ldr	r3, [pc, #124]	; (2506c <spi_cmd_complete+0x8d8>)
   24ff0:	4798      	blx	r3
   24ff2:	4b20      	ldr	r3, [pc, #128]	; (25074 <spi_cmd_complete+0x8e0>)
   24ff4:	0018      	movs	r0, r3
   24ff6:	4b1d      	ldr	r3, [pc, #116]	; (2506c <spi_cmd_complete+0x8d8>)
   24ff8:	4798      	blx	r3
						result = N_FAIL;
   24ffa:	2300      	movs	r3, #0
   24ffc:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   24ffe:	e02a      	b.n	25056 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   25000:	4b1e      	ldr	r3, [pc, #120]	; (2507c <spi_cmd_complete+0x8e8>)
   25002:	781b      	ldrb	r3, [r3, #0]
   25004:	2b00      	cmp	r3, #0
   25006:	d118      	bne.n	2503a <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   25008:	2314      	movs	r3, #20
   2500a:	18fb      	adds	r3, r7, r3
   2500c:	2102      	movs	r1, #2
   2500e:	0018      	movs	r0, r3
   25010:	4b13      	ldr	r3, [pc, #76]	; (25060 <spi_cmd_complete+0x8cc>)
   25012:	4798      	blx	r3
   25014:	1e03      	subs	r3, r0, #0
   25016:	d010      	beq.n	2503a <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   25018:	4a19      	ldr	r2, [pc, #100]	; (25080 <spi_cmd_complete+0x8ec>)
   2501a:	4912      	ldr	r1, [pc, #72]	; (25064 <spi_cmd_complete+0x8d0>)
   2501c:	4b12      	ldr	r3, [pc, #72]	; (25068 <spi_cmd_complete+0x8d4>)
   2501e:	0018      	movs	r0, r3
   25020:	4b12      	ldr	r3, [pc, #72]	; (2506c <spi_cmd_complete+0x8d8>)
   25022:	4798      	blx	r3
   25024:	4b17      	ldr	r3, [pc, #92]	; (25084 <spi_cmd_complete+0x8f0>)
   25026:	0018      	movs	r0, r3
   25028:	4b10      	ldr	r3, [pc, #64]	; (2506c <spi_cmd_complete+0x8d8>)
   2502a:	4798      	blx	r3
   2502c:	4b11      	ldr	r3, [pc, #68]	; (25074 <spi_cmd_complete+0x8e0>)
   2502e:	0018      	movs	r0, r3
   25030:	4b0e      	ldr	r3, [pc, #56]	; (2506c <spi_cmd_complete+0x8d8>)
   25032:	4798      	blx	r3
							result = N_FAIL;
   25034:	2300      	movs	r3, #0
   25036:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   25038:	e00d      	b.n	25056 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2503a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2503c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2503e:	18d3      	adds	r3, r2, r3
   25040:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   25042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   25044:	683a      	ldr	r2, [r7, #0]
   25046:	1ad3      	subs	r3, r2, r3
   25048:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2504a:	683b      	ldr	r3, [r7, #0]
   2504c:	2b00      	cmp	r3, #0
   2504e:	d000      	beq.n	25052 <spi_cmd_complete+0x8be>
   25050:	e77e      	b.n	24f50 <spi_cmd_complete+0x7bc>
   25052:	e000      	b.n	25056 <spi_cmd_complete+0x8c2>
						break;
   25054:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   25056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   25058:	0018      	movs	r0, r3
   2505a:	46bd      	mov	sp, r7
   2505c:	b01f      	add	sp, #124	; 0x7c
   2505e:	bd90      	pop	{r4, r7, pc}
   25060:	000240cd 	.word	0x000240cd
   25064:	0003a2c4 	.word	0x0003a2c4
   25068:	00039cb0 	.word	0x00039cb0
   2506c:	0001ed59 	.word	0x0001ed59
   25070:	00039f14 	.word	0x00039f14
   25074:	00039cf0 	.word	0x00039cf0
   25078:	00039ea8 	.word	0x00039ea8
   2507c:	200042b0 	.word	0x200042b0
   25080:	000002d2 	.word	0x000002d2
   25084:	00039edc 	.word	0x00039edc

00025088 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   25088:	b580      	push	{r7, lr}
   2508a:	b086      	sub	sp, #24
   2508c:	af00      	add	r7, sp, #0
   2508e:	6078      	str	r0, [r7, #4]
   25090:	000a      	movs	r2, r1
   25092:	1cbb      	adds	r3, r7, #2
   25094:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   25096:	2313      	movs	r3, #19
   25098:	18fb      	adds	r3, r7, r3
   2509a:	2201      	movs	r2, #1
   2509c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   2509e:	230c      	movs	r3, #12
   250a0:	18fb      	adds	r3, r7, r3
   250a2:	2200      	movs	r2, #0
   250a4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   250a6:	2316      	movs	r3, #22
   250a8:	18fb      	adds	r3, r7, r3
   250aa:	2200      	movs	r2, #0
   250ac:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   250ae:	1cbb      	adds	r3, r7, #2
   250b0:	881a      	ldrh	r2, [r3, #0]
   250b2:	2380      	movs	r3, #128	; 0x80
   250b4:	019b      	lsls	r3, r3, #6
   250b6:	429a      	cmp	r2, r3
   250b8:	d805      	bhi.n	250c6 <spi_data_write+0x3e>
			nbytes = sz;
   250ba:	2314      	movs	r3, #20
   250bc:	18fb      	adds	r3, r7, r3
   250be:	1cba      	adds	r2, r7, #2
   250c0:	8812      	ldrh	r2, [r2, #0]
   250c2:	801a      	strh	r2, [r3, #0]
   250c4:	e004      	b.n	250d0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   250c6:	2314      	movs	r3, #20
   250c8:	18fb      	adds	r3, r7, r3
   250ca:	2280      	movs	r2, #128	; 0x80
   250cc:	0192      	lsls	r2, r2, #6
   250ce:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   250d0:	2311      	movs	r3, #17
   250d2:	18fb      	adds	r3, r7, r3
   250d4:	22f0      	movs	r2, #240	; 0xf0
   250d6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   250d8:	2316      	movs	r3, #22
   250da:	18fb      	adds	r3, r7, r3
   250dc:	2200      	movs	r2, #0
   250de:	5e9b      	ldrsh	r3, [r3, r2]
   250e0:	2b00      	cmp	r3, #0
   250e2:	d10f      	bne.n	25104 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   250e4:	1cbb      	adds	r3, r7, #2
   250e6:	881a      	ldrh	r2, [r3, #0]
   250e8:	2380      	movs	r3, #128	; 0x80
   250ea:	019b      	lsls	r3, r3, #6
   250ec:	429a      	cmp	r2, r3
   250ee:	d804      	bhi.n	250fa <spi_data_write+0x72>
				order = 0x3;
   250f0:	2312      	movs	r3, #18
   250f2:	18fb      	adds	r3, r7, r3
   250f4:	2203      	movs	r2, #3
   250f6:	701a      	strb	r2, [r3, #0]
   250f8:	e013      	b.n	25122 <spi_data_write+0x9a>
			else
				order = 0x1;
   250fa:	2312      	movs	r3, #18
   250fc:	18fb      	adds	r3, r7, r3
   250fe:	2201      	movs	r2, #1
   25100:	701a      	strb	r2, [r3, #0]
   25102:	e00e      	b.n	25122 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   25104:	1cbb      	adds	r3, r7, #2
   25106:	881a      	ldrh	r2, [r3, #0]
   25108:	2380      	movs	r3, #128	; 0x80
   2510a:	019b      	lsls	r3, r3, #6
   2510c:	429a      	cmp	r2, r3
   2510e:	d804      	bhi.n	2511a <spi_data_write+0x92>
				order = 0x3;
   25110:	2312      	movs	r3, #18
   25112:	18fb      	adds	r3, r7, r3
   25114:	2203      	movs	r2, #3
   25116:	701a      	strb	r2, [r3, #0]
   25118:	e003      	b.n	25122 <spi_data_write+0x9a>
			else
				order = 0x2;
   2511a:	2312      	movs	r3, #18
   2511c:	18fb      	adds	r3, r7, r3
   2511e:	2202      	movs	r2, #2
   25120:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   25122:	2311      	movs	r3, #17
   25124:	18fb      	adds	r3, r7, r3
   25126:	781a      	ldrb	r2, [r3, #0]
   25128:	2312      	movs	r3, #18
   2512a:	18fb      	adds	r3, r7, r3
   2512c:	781b      	ldrb	r3, [r3, #0]
   2512e:	4313      	orrs	r3, r2
   25130:	b2da      	uxtb	r2, r3
   25132:	2311      	movs	r3, #17
   25134:	18fb      	adds	r3, r7, r3
   25136:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   25138:	2311      	movs	r3, #17
   2513a:	18fb      	adds	r3, r7, r3
   2513c:	2101      	movs	r1, #1
   2513e:	0018      	movs	r0, r3
   25140:	4b3c      	ldr	r3, [pc, #240]	; (25234 <spi_data_write+0x1ac>)
   25142:	4798      	blx	r3
   25144:	1e03      	subs	r3, r0, #0
   25146:	d012      	beq.n	2516e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   25148:	4a3b      	ldr	r2, [pc, #236]	; (25238 <spi_data_write+0x1b0>)
   2514a:	493c      	ldr	r1, [pc, #240]	; (2523c <spi_data_write+0x1b4>)
   2514c:	4b3c      	ldr	r3, [pc, #240]	; (25240 <spi_data_write+0x1b8>)
   2514e:	0018      	movs	r0, r3
   25150:	4b3c      	ldr	r3, [pc, #240]	; (25244 <spi_data_write+0x1bc>)
   25152:	4798      	blx	r3
   25154:	4b3c      	ldr	r3, [pc, #240]	; (25248 <spi_data_write+0x1c0>)
   25156:	0018      	movs	r0, r3
   25158:	4b3a      	ldr	r3, [pc, #232]	; (25244 <spi_data_write+0x1bc>)
   2515a:	4798      	blx	r3
   2515c:	4b3b      	ldr	r3, [pc, #236]	; (2524c <spi_data_write+0x1c4>)
   2515e:	0018      	movs	r0, r3
   25160:	4b38      	ldr	r3, [pc, #224]	; (25244 <spi_data_write+0x1bc>)
   25162:	4798      	blx	r3
			result = N_FAIL;
   25164:	2313      	movs	r3, #19
   25166:	18fb      	adds	r3, r7, r3
   25168:	2200      	movs	r2, #0
   2516a:	701a      	strb	r2, [r3, #0]
			break;
   2516c:	e059      	b.n	25222 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2516e:	2316      	movs	r3, #22
   25170:	18fb      	adds	r3, r7, r3
   25172:	2200      	movs	r2, #0
   25174:	5e9b      	ldrsh	r3, [r3, r2]
   25176:	687a      	ldr	r2, [r7, #4]
   25178:	18d2      	adds	r2, r2, r3
   2517a:	2314      	movs	r3, #20
   2517c:	18fb      	adds	r3, r7, r3
   2517e:	881b      	ldrh	r3, [r3, #0]
   25180:	0019      	movs	r1, r3
   25182:	0010      	movs	r0, r2
   25184:	4b2b      	ldr	r3, [pc, #172]	; (25234 <spi_data_write+0x1ac>)
   25186:	4798      	blx	r3
   25188:	1e03      	subs	r3, r0, #0
   2518a:	d012      	beq.n	251b2 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   2518c:	4a30      	ldr	r2, [pc, #192]	; (25250 <spi_data_write+0x1c8>)
   2518e:	492b      	ldr	r1, [pc, #172]	; (2523c <spi_data_write+0x1b4>)
   25190:	4b2b      	ldr	r3, [pc, #172]	; (25240 <spi_data_write+0x1b8>)
   25192:	0018      	movs	r0, r3
   25194:	4b2b      	ldr	r3, [pc, #172]	; (25244 <spi_data_write+0x1bc>)
   25196:	4798      	blx	r3
   25198:	4b2e      	ldr	r3, [pc, #184]	; (25254 <spi_data_write+0x1cc>)
   2519a:	0018      	movs	r0, r3
   2519c:	4b29      	ldr	r3, [pc, #164]	; (25244 <spi_data_write+0x1bc>)
   2519e:	4798      	blx	r3
   251a0:	4b2a      	ldr	r3, [pc, #168]	; (2524c <spi_data_write+0x1c4>)
   251a2:	0018      	movs	r0, r3
   251a4:	4b27      	ldr	r3, [pc, #156]	; (25244 <spi_data_write+0x1bc>)
   251a6:	4798      	blx	r3
			result = N_FAIL;
   251a8:	2313      	movs	r3, #19
   251aa:	18fb      	adds	r3, r7, r3
   251ac:	2200      	movs	r2, #0
   251ae:	701a      	strb	r2, [r3, #0]
			break;
   251b0:	e037      	b.n	25222 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   251b2:	4b29      	ldr	r3, [pc, #164]	; (25258 <spi_data_write+0x1d0>)
   251b4:	781b      	ldrb	r3, [r3, #0]
   251b6:	2b00      	cmp	r3, #0
   251b8:	d11b      	bne.n	251f2 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   251ba:	230c      	movs	r3, #12
   251bc:	18fb      	adds	r3, r7, r3
   251be:	2102      	movs	r1, #2
   251c0:	0018      	movs	r0, r3
   251c2:	4b1c      	ldr	r3, [pc, #112]	; (25234 <spi_data_write+0x1ac>)
   251c4:	4798      	blx	r3
   251c6:	1e03      	subs	r3, r0, #0
   251c8:	d013      	beq.n	251f2 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   251ca:	23d7      	movs	r3, #215	; 0xd7
   251cc:	009a      	lsls	r2, r3, #2
   251ce:	491b      	ldr	r1, [pc, #108]	; (2523c <spi_data_write+0x1b4>)
   251d0:	4b1b      	ldr	r3, [pc, #108]	; (25240 <spi_data_write+0x1b8>)
   251d2:	0018      	movs	r0, r3
   251d4:	4b1b      	ldr	r3, [pc, #108]	; (25244 <spi_data_write+0x1bc>)
   251d6:	4798      	blx	r3
   251d8:	4b20      	ldr	r3, [pc, #128]	; (2525c <spi_data_write+0x1d4>)
   251da:	0018      	movs	r0, r3
   251dc:	4b19      	ldr	r3, [pc, #100]	; (25244 <spi_data_write+0x1bc>)
   251de:	4798      	blx	r3
   251e0:	4b1a      	ldr	r3, [pc, #104]	; (2524c <spi_data_write+0x1c4>)
   251e2:	0018      	movs	r0, r3
   251e4:	4b17      	ldr	r3, [pc, #92]	; (25244 <spi_data_write+0x1bc>)
   251e6:	4798      	blx	r3
				result = N_FAIL;
   251e8:	2313      	movs	r3, #19
   251ea:	18fb      	adds	r3, r7, r3
   251ec:	2200      	movs	r2, #0
   251ee:	701a      	strb	r2, [r3, #0]
				break;
   251f0:	e017      	b.n	25222 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   251f2:	2316      	movs	r3, #22
   251f4:	18fb      	adds	r3, r7, r3
   251f6:	881a      	ldrh	r2, [r3, #0]
   251f8:	2314      	movs	r3, #20
   251fa:	18fb      	adds	r3, r7, r3
   251fc:	881b      	ldrh	r3, [r3, #0]
   251fe:	18d3      	adds	r3, r2, r3
   25200:	b29a      	uxth	r2, r3
   25202:	2316      	movs	r3, #22
   25204:	18fb      	adds	r3, r7, r3
   25206:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   25208:	1cbb      	adds	r3, r7, #2
   2520a:	1cb9      	adds	r1, r7, #2
   2520c:	2214      	movs	r2, #20
   2520e:	18ba      	adds	r2, r7, r2
   25210:	8809      	ldrh	r1, [r1, #0]
   25212:	8812      	ldrh	r2, [r2, #0]
   25214:	1a8a      	subs	r2, r1, r2
   25216:	801a      	strh	r2, [r3, #0]
	} while (sz);
   25218:	1cbb      	adds	r3, r7, #2
   2521a:	881b      	ldrh	r3, [r3, #0]
   2521c:	2b00      	cmp	r3, #0
   2521e:	d000      	beq.n	25222 <spi_data_write+0x19a>
   25220:	e745      	b.n	250ae <spi_data_write+0x26>


	return result;
   25222:	2313      	movs	r3, #19
   25224:	18fb      	adds	r3, r7, r3
   25226:	781b      	ldrb	r3, [r3, #0]
   25228:	b25b      	sxtb	r3, r3
}
   2522a:	0018      	movs	r0, r3
   2522c:	46bd      	mov	sp, r7
   2522e:	b006      	add	sp, #24
   25230:	bd80      	pop	{r7, pc}
   25232:	46c0      	nop			; (mov r8, r8)
   25234:	00024111 	.word	0x00024111
   25238:	00000349 	.word	0x00000349
   2523c:	0003a2d8 	.word	0x0003a2d8
   25240:	00039cb0 	.word	0x00039cb0
   25244:	0001ed59 	.word	0x0001ed59
   25248:	00039f78 	.word	0x00039f78
   2524c:	00039cf0 	.word	0x00039cf0
   25250:	00000352 	.word	0x00000352
   25254:	00039fb0 	.word	0x00039fb0
   25258:	200042b0 	.word	0x200042b0
   2525c:	00039fe4 	.word	0x00039fe4

00025260 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   25260:	b590      	push	{r4, r7, lr}
   25262:	b087      	sub	sp, #28
   25264:	af02      	add	r7, sp, #8
   25266:	6078      	str	r0, [r7, #4]
   25268:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2526a:	230f      	movs	r3, #15
   2526c:	18fb      	adds	r3, r7, r3
   2526e:	220a      	movs	r2, #10
   25270:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25272:	230c      	movs	r3, #12
   25274:	18fb      	adds	r3, r7, r3
   25276:	2201      	movs	r2, #1
   25278:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   2527a:	230e      	movs	r3, #14
   2527c:	18fb      	adds	r3, r7, r3
   2527e:	22c9      	movs	r2, #201	; 0xc9
   25280:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   25282:	230d      	movs	r3, #13
   25284:	18fb      	adds	r3, r7, r3
   25286:	2200      	movs	r2, #0
   25288:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   2528a:	687b      	ldr	r3, [r7, #4]
   2528c:	2b30      	cmp	r3, #48	; 0x30
   2528e:	d808      	bhi.n	252a2 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   25290:	230e      	movs	r3, #14
   25292:	18fb      	adds	r3, r7, r3
   25294:	22c3      	movs	r2, #195	; 0xc3
   25296:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25298:	230d      	movs	r3, #13
   2529a:	18fb      	adds	r3, r7, r3
   2529c:	2201      	movs	r2, #1
   2529e:	701a      	strb	r2, [r3, #0]
   252a0:	e007      	b.n	252b2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   252a2:	230e      	movs	r3, #14
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	22c9      	movs	r2, #201	; 0xc9
   252a8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   252aa:	230d      	movs	r3, #13
   252ac:	18fb      	adds	r3, r7, r3
   252ae:	2200      	movs	r2, #0
   252b0:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   252b2:	003a      	movs	r2, r7
   252b4:	6879      	ldr	r1, [r7, #4]
   252b6:	230e      	movs	r3, #14
   252b8:	18fb      	adds	r3, r7, r3
   252ba:	7818      	ldrb	r0, [r3, #0]
   252bc:	230d      	movs	r3, #13
   252be:	18fb      	adds	r3, r7, r3
   252c0:	781b      	ldrb	r3, [r3, #0]
   252c2:	9300      	str	r3, [sp, #0]
   252c4:	2304      	movs	r3, #4
   252c6:	4c2e      	ldr	r4, [pc, #184]	; (25380 <spi_write_reg+0x120>)
   252c8:	47a0      	blx	r4
   252ca:	0002      	movs	r2, r0
   252cc:	230c      	movs	r3, #12
   252ce:	18fb      	adds	r3, r7, r3
   252d0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   252d2:	230c      	movs	r3, #12
   252d4:	18fb      	adds	r3, r7, r3
   252d6:	781b      	ldrb	r3, [r3, #0]
   252d8:	b25b      	sxtb	r3, r3
   252da:	2b01      	cmp	r3, #1
   252dc:	d010      	beq.n	25300 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   252de:	4a29      	ldr	r2, [pc, #164]	; (25384 <spi_write_reg+0x124>)
   252e0:	4929      	ldr	r1, [pc, #164]	; (25388 <spi_write_reg+0x128>)
   252e2:	4b2a      	ldr	r3, [pc, #168]	; (2538c <spi_write_reg+0x12c>)
   252e4:	0018      	movs	r0, r3
   252e6:	4b2a      	ldr	r3, [pc, #168]	; (25390 <spi_write_reg+0x130>)
   252e8:	4798      	blx	r3
   252ea:	687a      	ldr	r2, [r7, #4]
   252ec:	4b29      	ldr	r3, [pc, #164]	; (25394 <spi_write_reg+0x134>)
   252ee:	0011      	movs	r1, r2
   252f0:	0018      	movs	r0, r3
   252f2:	4b27      	ldr	r3, [pc, #156]	; (25390 <spi_write_reg+0x130>)
   252f4:	4798      	blx	r3
   252f6:	4b28      	ldr	r3, [pc, #160]	; (25398 <spi_write_reg+0x138>)
   252f8:	0018      	movs	r0, r3
   252fa:	4b25      	ldr	r3, [pc, #148]	; (25390 <spi_write_reg+0x130>)
   252fc:	4798      	blx	r3
		goto _FAIL_;
   252fe:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   25300:	230c      	movs	r3, #12
   25302:	18fb      	adds	r3, r7, r3
   25304:	781b      	ldrb	r3, [r3, #0]
   25306:	b25b      	sxtb	r3, r3
   25308:	2b01      	cmp	r3, #1
   2530a:	d030      	beq.n	2536e <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   2530c:	2001      	movs	r0, #1
   2530e:	4b23      	ldr	r3, [pc, #140]	; (2539c <spi_write_reg+0x13c>)
   25310:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25312:	2300      	movs	r3, #0
   25314:	9300      	str	r3, [sp, #0]
   25316:	2300      	movs	r3, #0
   25318:	2200      	movs	r2, #0
   2531a:	2100      	movs	r1, #0
   2531c:	20cf      	movs	r0, #207	; 0xcf
   2531e:	4c20      	ldr	r4, [pc, #128]	; (253a0 <spi_write_reg+0x140>)
   25320:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25322:	20cf      	movs	r0, #207	; 0xcf
   25324:	4b1f      	ldr	r3, [pc, #124]	; (253a4 <spi_write_reg+0x144>)
   25326:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   25328:	23ea      	movs	r3, #234	; 0xea
   2532a:	009a      	lsls	r2, r3, #2
   2532c:	4916      	ldr	r1, [pc, #88]	; (25388 <spi_write_reg+0x128>)
   2532e:	4b17      	ldr	r3, [pc, #92]	; (2538c <spi_write_reg+0x12c>)
   25330:	0018      	movs	r0, r3
   25332:	4b17      	ldr	r3, [pc, #92]	; (25390 <spi_write_reg+0x130>)
   25334:	4798      	blx	r3
   25336:	230f      	movs	r3, #15
   25338:	18fb      	adds	r3, r7, r3
   2533a:	7819      	ldrb	r1, [r3, #0]
   2533c:	683b      	ldr	r3, [r7, #0]
   2533e:	687a      	ldr	r2, [r7, #4]
   25340:	4819      	ldr	r0, [pc, #100]	; (253a8 <spi_write_reg+0x148>)
   25342:	4c13      	ldr	r4, [pc, #76]	; (25390 <spi_write_reg+0x130>)
   25344:	47a0      	blx	r4
   25346:	4b14      	ldr	r3, [pc, #80]	; (25398 <spi_write_reg+0x138>)
   25348:	0018      	movs	r0, r3
   2534a:	4b11      	ldr	r3, [pc, #68]	; (25390 <spi_write_reg+0x130>)
   2534c:	4798      	blx	r3
		nm_bsp_sleep(1);
   2534e:	2001      	movs	r0, #1
   25350:	4b12      	ldr	r3, [pc, #72]	; (2539c <spi_write_reg+0x13c>)
   25352:	4798      	blx	r3
		retry--;
   25354:	230f      	movs	r3, #15
   25356:	18fb      	adds	r3, r7, r3
   25358:	781a      	ldrb	r2, [r3, #0]
   2535a:	230f      	movs	r3, #15
   2535c:	18fb      	adds	r3, r7, r3
   2535e:	3a01      	subs	r2, #1
   25360:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25362:	230f      	movs	r3, #15
   25364:	18fb      	adds	r3, r7, r3
   25366:	781b      	ldrb	r3, [r3, #0]
   25368:	2b00      	cmp	r3, #0
   2536a:	d000      	beq.n	2536e <spi_write_reg+0x10e>
   2536c:	e78d      	b.n	2528a <spi_write_reg+0x2a>
	}

	return result;
   2536e:	230c      	movs	r3, #12
   25370:	18fb      	adds	r3, r7, r3
   25372:	781b      	ldrb	r3, [r3, #0]
   25374:	b25b      	sxtb	r3, r3
}
   25376:	0018      	movs	r0, r3
   25378:	46bd      	mov	sp, r7
   2537a:	b005      	add	sp, #20
   2537c:	bd90      	pop	{r4, r7, pc}
   2537e:	46c0      	nop			; (mov r8, r8)
   25380:	00024795 	.word	0x00024795
   25384:	0000039d 	.word	0x0000039d
   25388:	0003a2e8 	.word	0x0003a2e8
   2538c:	00039cb0 	.word	0x00039cb0
   25390:	0001ed59 	.word	0x0001ed59
   25394:	0003a01c 	.word	0x0003a01c
   25398:	00039cf0 	.word	0x00039cf0
   2539c:	000211ad 	.word	0x000211ad
   253a0:	00024219 	.word	0x00024219
   253a4:	00024659 	.word	0x00024659
   253a8:	0003a048 	.word	0x0003a048

000253ac <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   253ac:	b590      	push	{r4, r7, lr}
   253ae:	b089      	sub	sp, #36	; 0x24
   253b0:	af02      	add	r7, sp, #8
   253b2:	60f8      	str	r0, [r7, #12]
   253b4:	60b9      	str	r1, [r7, #8]
   253b6:	1dbb      	adds	r3, r7, #6
   253b8:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   253ba:	2316      	movs	r3, #22
   253bc:	18fb      	adds	r3, r7, r3
   253be:	220a      	movs	r2, #10
   253c0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   253c2:	2315      	movs	r3, #21
   253c4:	18fb      	adds	r3, r7, r3
   253c6:	22c7      	movs	r2, #199	; 0xc7
   253c8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   253ca:	1dbb      	adds	r3, r7, #6
   253cc:	881a      	ldrh	r2, [r3, #0]
   253ce:	68f9      	ldr	r1, [r7, #12]
   253d0:	2315      	movs	r3, #21
   253d2:	18fb      	adds	r3, r7, r3
   253d4:	7818      	ldrb	r0, [r3, #0]
   253d6:	2300      	movs	r3, #0
   253d8:	9300      	str	r3, [sp, #0]
   253da:	0013      	movs	r3, r2
   253dc:	2200      	movs	r2, #0
   253de:	4c4d      	ldr	r4, [pc, #308]	; (25514 <nm_spi_write+0x168>)
   253e0:	47a0      	blx	r4
   253e2:	0002      	movs	r2, r0
   253e4:	2317      	movs	r3, #23
   253e6:	18fb      	adds	r3, r7, r3
   253e8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   253ea:	2317      	movs	r3, #23
   253ec:	18fb      	adds	r3, r7, r3
   253ee:	781b      	ldrb	r3, [r3, #0]
   253f0:	b25b      	sxtb	r3, r3
   253f2:	2b01      	cmp	r3, #1
   253f4:	d010      	beq.n	25418 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   253f6:	4a48      	ldr	r2, [pc, #288]	; (25518 <nm_spi_write+0x16c>)
   253f8:	4948      	ldr	r1, [pc, #288]	; (2551c <nm_spi_write+0x170>)
   253fa:	4b49      	ldr	r3, [pc, #292]	; (25520 <nm_spi_write+0x174>)
   253fc:	0018      	movs	r0, r3
   253fe:	4b49      	ldr	r3, [pc, #292]	; (25524 <nm_spi_write+0x178>)
   25400:	4798      	blx	r3
   25402:	68fa      	ldr	r2, [r7, #12]
   25404:	4b48      	ldr	r3, [pc, #288]	; (25528 <nm_spi_write+0x17c>)
   25406:	0011      	movs	r1, r2
   25408:	0018      	movs	r0, r3
   2540a:	4b46      	ldr	r3, [pc, #280]	; (25524 <nm_spi_write+0x178>)
   2540c:	4798      	blx	r3
   2540e:	4b47      	ldr	r3, [pc, #284]	; (2552c <nm_spi_write+0x180>)
   25410:	0018      	movs	r0, r3
   25412:	4b44      	ldr	r3, [pc, #272]	; (25524 <nm_spi_write+0x178>)
   25414:	4798      	blx	r3
		goto _FAIL_;
   25416:	e03e      	b.n	25496 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   25418:	2317      	movs	r3, #23
   2541a:	18fc      	adds	r4, r7, r3
   2541c:	1dbb      	adds	r3, r7, #6
   2541e:	881a      	ldrh	r2, [r3, #0]
   25420:	68bb      	ldr	r3, [r7, #8]
   25422:	0011      	movs	r1, r2
   25424:	0018      	movs	r0, r3
   25426:	4b42      	ldr	r3, [pc, #264]	; (25530 <nm_spi_write+0x184>)
   25428:	4798      	blx	r3
   2542a:	0003      	movs	r3, r0
   2542c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2542e:	2317      	movs	r3, #23
   25430:	18fb      	adds	r3, r7, r3
   25432:	781b      	ldrb	r3, [r3, #0]
   25434:	b25b      	sxtb	r3, r3
   25436:	2b01      	cmp	r3, #1
   25438:	d00e      	beq.n	25458 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   2543a:	4a3e      	ldr	r2, [pc, #248]	; (25534 <nm_spi_write+0x188>)
   2543c:	4937      	ldr	r1, [pc, #220]	; (2551c <nm_spi_write+0x170>)
   2543e:	4b38      	ldr	r3, [pc, #224]	; (25520 <nm_spi_write+0x174>)
   25440:	0018      	movs	r0, r3
   25442:	4b38      	ldr	r3, [pc, #224]	; (25524 <nm_spi_write+0x178>)
   25444:	4798      	blx	r3
   25446:	4b3c      	ldr	r3, [pc, #240]	; (25538 <nm_spi_write+0x18c>)
   25448:	0018      	movs	r0, r3
   2544a:	4b36      	ldr	r3, [pc, #216]	; (25524 <nm_spi_write+0x178>)
   2544c:	4798      	blx	r3
   2544e:	4b37      	ldr	r3, [pc, #220]	; (2552c <nm_spi_write+0x180>)
   25450:	0018      	movs	r0, r3
   25452:	4b34      	ldr	r3, [pc, #208]	; (25524 <nm_spi_write+0x178>)
   25454:	4798      	blx	r3
		goto _FAIL_;
   25456:	e01e      	b.n	25496 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   25458:	2317      	movs	r3, #23
   2545a:	18fc      	adds	r4, r7, r3
   2545c:	2315      	movs	r3, #21
   2545e:	18fb      	adds	r3, r7, r3
   25460:	781b      	ldrb	r3, [r3, #0]
   25462:	0018      	movs	r0, r3
   25464:	4b35      	ldr	r3, [pc, #212]	; (2553c <nm_spi_write+0x190>)
   25466:	4798      	blx	r3
   25468:	0003      	movs	r3, r0
   2546a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2546c:	2317      	movs	r3, #23
   2546e:	18fb      	adds	r3, r7, r3
   25470:	781b      	ldrb	r3, [r3, #0]
   25472:	b25b      	sxtb	r3, r3
   25474:	2b01      	cmp	r3, #1
   25476:	d00e      	beq.n	25496 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25478:	4a31      	ldr	r2, [pc, #196]	; (25540 <nm_spi_write+0x194>)
   2547a:	4928      	ldr	r1, [pc, #160]	; (2551c <nm_spi_write+0x170>)
   2547c:	4b28      	ldr	r3, [pc, #160]	; (25520 <nm_spi_write+0x174>)
   2547e:	0018      	movs	r0, r3
   25480:	4b28      	ldr	r3, [pc, #160]	; (25524 <nm_spi_write+0x178>)
   25482:	4798      	blx	r3
   25484:	4b2c      	ldr	r3, [pc, #176]	; (25538 <nm_spi_write+0x18c>)
   25486:	0018      	movs	r0, r3
   25488:	4b26      	ldr	r3, [pc, #152]	; (25524 <nm_spi_write+0x178>)
   2548a:	4798      	blx	r3
   2548c:	4b27      	ldr	r3, [pc, #156]	; (2552c <nm_spi_write+0x180>)
   2548e:	0018      	movs	r0, r3
   25490:	4b24      	ldr	r3, [pc, #144]	; (25524 <nm_spi_write+0x178>)
   25492:	4798      	blx	r3
		goto _FAIL_;
   25494:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   25496:	2317      	movs	r3, #23
   25498:	18fb      	adds	r3, r7, r3
   2549a:	781b      	ldrb	r3, [r3, #0]
   2549c:	b25b      	sxtb	r3, r3
   2549e:	2b01      	cmp	r3, #1
   254a0:	d030      	beq.n	25504 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   254a2:	2001      	movs	r0, #1
   254a4:	4b27      	ldr	r3, [pc, #156]	; (25544 <nm_spi_write+0x198>)
   254a6:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   254a8:	2300      	movs	r3, #0
   254aa:	9300      	str	r3, [sp, #0]
   254ac:	2300      	movs	r3, #0
   254ae:	2200      	movs	r2, #0
   254b0:	2100      	movs	r1, #0
   254b2:	20cf      	movs	r0, #207	; 0xcf
   254b4:	4c24      	ldr	r4, [pc, #144]	; (25548 <nm_spi_write+0x19c>)
   254b6:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   254b8:	20cf      	movs	r0, #207	; 0xcf
   254ba:	4b24      	ldr	r3, [pc, #144]	; (2554c <nm_spi_write+0x1a0>)
   254bc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   254be:	4a24      	ldr	r2, [pc, #144]	; (25550 <nm_spi_write+0x1a4>)
   254c0:	4916      	ldr	r1, [pc, #88]	; (2551c <nm_spi_write+0x170>)
   254c2:	4b17      	ldr	r3, [pc, #92]	; (25520 <nm_spi_write+0x174>)
   254c4:	0018      	movs	r0, r3
   254c6:	4b17      	ldr	r3, [pc, #92]	; (25524 <nm_spi_write+0x178>)
   254c8:	4798      	blx	r3
   254ca:	2316      	movs	r3, #22
   254cc:	18fb      	adds	r3, r7, r3
   254ce:	7819      	ldrb	r1, [r3, #0]
   254d0:	1dbb      	adds	r3, r7, #6
   254d2:	881b      	ldrh	r3, [r3, #0]
   254d4:	68fa      	ldr	r2, [r7, #12]
   254d6:	481f      	ldr	r0, [pc, #124]	; (25554 <nm_spi_write+0x1a8>)
   254d8:	4c12      	ldr	r4, [pc, #72]	; (25524 <nm_spi_write+0x178>)
   254da:	47a0      	blx	r4
   254dc:	4b13      	ldr	r3, [pc, #76]	; (2552c <nm_spi_write+0x180>)
   254de:	0018      	movs	r0, r3
   254e0:	4b10      	ldr	r3, [pc, #64]	; (25524 <nm_spi_write+0x178>)
   254e2:	4798      	blx	r3
		nm_bsp_sleep(1);
   254e4:	2001      	movs	r0, #1
   254e6:	4b17      	ldr	r3, [pc, #92]	; (25544 <nm_spi_write+0x198>)
   254e8:	4798      	blx	r3
		retry--;
   254ea:	2316      	movs	r3, #22
   254ec:	18fb      	adds	r3, r7, r3
   254ee:	781a      	ldrb	r2, [r3, #0]
   254f0:	2316      	movs	r3, #22
   254f2:	18fb      	adds	r3, r7, r3
   254f4:	3a01      	subs	r2, #1
   254f6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   254f8:	2316      	movs	r3, #22
   254fa:	18fb      	adds	r3, r7, r3
   254fc:	781b      	ldrb	r3, [r3, #0]
   254fe:	2b00      	cmp	r3, #0
   25500:	d000      	beq.n	25504 <nm_spi_write+0x158>
   25502:	e762      	b.n	253ca <nm_spi_write+0x1e>
	}


	return result;
   25504:	2317      	movs	r3, #23
   25506:	18fb      	adds	r3, r7, r3
   25508:	781b      	ldrb	r3, [r3, #0]
   2550a:	b25b      	sxtb	r3, r3
}
   2550c:	0018      	movs	r0, r3
   2550e:	46bd      	mov	sp, r7
   25510:	b007      	add	sp, #28
   25512:	bd90      	pop	{r4, r7, pc}
   25514:	00024795 	.word	0x00024795
   25518:	000003cf 	.word	0x000003cf
   2551c:	0003a2f8 	.word	0x0003a2f8
   25520:	00039cb0 	.word	0x00039cb0
   25524:	0001ed59 	.word	0x0001ed59
   25528:	0003a064 	.word	0x0003a064
   2552c:	00039cf0 	.word	0x00039cf0
   25530:	00025089 	.word	0x00025089
   25534:	000003d9 	.word	0x000003d9
   25538:	0003a094 	.word	0x0003a094
   2553c:	00024559 	.word	0x00024559
   25540:	000003e1 	.word	0x000003e1
   25544:	000211ad 	.word	0x000211ad
   25548:	00024219 	.word	0x00024219
   2554c:	00024659 	.word	0x00024659
   25550:	000003eb 	.word	0x000003eb
   25554:	0003a0bc 	.word	0x0003a0bc

00025558 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   25558:	b590      	push	{r4, r7, lr}
   2555a:	b087      	sub	sp, #28
   2555c:	af02      	add	r7, sp, #8
   2555e:	6078      	str	r0, [r7, #4]
   25560:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   25562:	230f      	movs	r3, #15
   25564:	18fb      	adds	r3, r7, r3
   25566:	220a      	movs	r2, #10
   25568:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2556a:	230c      	movs	r3, #12
   2556c:	18fb      	adds	r3, r7, r3
   2556e:	2201      	movs	r2, #1
   25570:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   25572:	230e      	movs	r3, #14
   25574:	18fb      	adds	r3, r7, r3
   25576:	22ca      	movs	r2, #202	; 0xca
   25578:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   2557a:	230d      	movs	r3, #13
   2557c:	18fb      	adds	r3, r7, r3
   2557e:	2200      	movs	r2, #0
   25580:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   25582:	687b      	ldr	r3, [r7, #4]
   25584:	2bff      	cmp	r3, #255	; 0xff
   25586:	d808      	bhi.n	2559a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   25588:	230e      	movs	r3, #14
   2558a:	18fb      	adds	r3, r7, r3
   2558c:	22c4      	movs	r2, #196	; 0xc4
   2558e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25590:	230d      	movs	r3, #13
   25592:	18fb      	adds	r3, r7, r3
   25594:	2201      	movs	r2, #1
   25596:	701a      	strb	r2, [r3, #0]
   25598:	e007      	b.n	255aa <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   2559a:	230e      	movs	r3, #14
   2559c:	18fb      	adds	r3, r7, r3
   2559e:	22ca      	movs	r2, #202	; 0xca
   255a0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   255a2:	230d      	movs	r3, #13
   255a4:	18fb      	adds	r3, r7, r3
   255a6:	2200      	movs	r2, #0
   255a8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   255aa:	2308      	movs	r3, #8
   255ac:	18fa      	adds	r2, r7, r3
   255ae:	6879      	ldr	r1, [r7, #4]
   255b0:	230e      	movs	r3, #14
   255b2:	18fb      	adds	r3, r7, r3
   255b4:	7818      	ldrb	r0, [r3, #0]
   255b6:	230d      	movs	r3, #13
   255b8:	18fb      	adds	r3, r7, r3
   255ba:	781b      	ldrb	r3, [r3, #0]
   255bc:	9300      	str	r3, [sp, #0]
   255be:	2304      	movs	r3, #4
   255c0:	4c37      	ldr	r4, [pc, #220]	; (256a0 <spi_read_reg+0x148>)
   255c2:	47a0      	blx	r4
   255c4:	0002      	movs	r2, r0
   255c6:	230c      	movs	r3, #12
   255c8:	18fb      	adds	r3, r7, r3
   255ca:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   255cc:	230c      	movs	r3, #12
   255ce:	18fb      	adds	r3, r7, r3
   255d0:	781b      	ldrb	r3, [r3, #0]
   255d2:	b25b      	sxtb	r3, r3
   255d4:	2b01      	cmp	r3, #1
   255d6:	d010      	beq.n	255fa <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   255d8:	4a32      	ldr	r2, [pc, #200]	; (256a4 <spi_read_reg+0x14c>)
   255da:	4933      	ldr	r1, [pc, #204]	; (256a8 <spi_read_reg+0x150>)
   255dc:	4b33      	ldr	r3, [pc, #204]	; (256ac <spi_read_reg+0x154>)
   255de:	0018      	movs	r0, r3
   255e0:	4b33      	ldr	r3, [pc, #204]	; (256b0 <spi_read_reg+0x158>)
   255e2:	4798      	blx	r3
   255e4:	687a      	ldr	r2, [r7, #4]
   255e6:	4b33      	ldr	r3, [pc, #204]	; (256b4 <spi_read_reg+0x15c>)
   255e8:	0011      	movs	r1, r2
   255ea:	0018      	movs	r0, r3
   255ec:	4b30      	ldr	r3, [pc, #192]	; (256b0 <spi_read_reg+0x158>)
   255ee:	4798      	blx	r3
   255f0:	4b31      	ldr	r3, [pc, #196]	; (256b8 <spi_read_reg+0x160>)
   255f2:	0018      	movs	r0, r3
   255f4:	4b2e      	ldr	r3, [pc, #184]	; (256b0 <spi_read_reg+0x158>)
   255f6:	4798      	blx	r3
		goto _FAIL_;
   255f8:	e014      	b.n	25624 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   255fa:	2308      	movs	r3, #8
   255fc:	18fb      	adds	r3, r7, r3
   255fe:	781b      	ldrb	r3, [r3, #0]
   25600:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   25602:	2308      	movs	r3, #8
   25604:	18fb      	adds	r3, r7, r3
   25606:	785b      	ldrb	r3, [r3, #1]
   25608:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   2560a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   2560c:	2308      	movs	r3, #8
   2560e:	18fb      	adds	r3, r7, r3
   25610:	789b      	ldrb	r3, [r3, #2]
   25612:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   25614:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   25616:	2308      	movs	r3, #8
   25618:	18fb      	adds	r3, r7, r3
   2561a:	78db      	ldrb	r3, [r3, #3]
   2561c:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2561e:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   25620:	683b      	ldr	r3, [r7, #0]
   25622:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   25624:	230c      	movs	r3, #12
   25626:	18fb      	adds	r3, r7, r3
   25628:	781b      	ldrb	r3, [r3, #0]
   2562a:	b25b      	sxtb	r3, r3
   2562c:	2b01      	cmp	r3, #1
   2562e:	d02f      	beq.n	25690 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   25630:	2001      	movs	r0, #1
   25632:	4b22      	ldr	r3, [pc, #136]	; (256bc <spi_read_reg+0x164>)
   25634:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25636:	2300      	movs	r3, #0
   25638:	9300      	str	r3, [sp, #0]
   2563a:	2300      	movs	r3, #0
   2563c:	2200      	movs	r2, #0
   2563e:	2100      	movs	r1, #0
   25640:	20cf      	movs	r0, #207	; 0xcf
   25642:	4c1f      	ldr	r4, [pc, #124]	; (256c0 <spi_read_reg+0x168>)
   25644:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25646:	20cf      	movs	r0, #207	; 0xcf
   25648:	4b1e      	ldr	r3, [pc, #120]	; (256c4 <spi_read_reg+0x16c>)
   2564a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   2564c:	4a1e      	ldr	r2, [pc, #120]	; (256c8 <spi_read_reg+0x170>)
   2564e:	4916      	ldr	r1, [pc, #88]	; (256a8 <spi_read_reg+0x150>)
   25650:	4b16      	ldr	r3, [pc, #88]	; (256ac <spi_read_reg+0x154>)
   25652:	0018      	movs	r0, r3
   25654:	4b16      	ldr	r3, [pc, #88]	; (256b0 <spi_read_reg+0x158>)
   25656:	4798      	blx	r3
   25658:	230f      	movs	r3, #15
   2565a:	18fb      	adds	r3, r7, r3
   2565c:	7819      	ldrb	r1, [r3, #0]
   2565e:	687a      	ldr	r2, [r7, #4]
   25660:	4b1a      	ldr	r3, [pc, #104]	; (256cc <spi_read_reg+0x174>)
   25662:	0018      	movs	r0, r3
   25664:	4b12      	ldr	r3, [pc, #72]	; (256b0 <spi_read_reg+0x158>)
   25666:	4798      	blx	r3
   25668:	4b13      	ldr	r3, [pc, #76]	; (256b8 <spi_read_reg+0x160>)
   2566a:	0018      	movs	r0, r3
   2566c:	4b10      	ldr	r3, [pc, #64]	; (256b0 <spi_read_reg+0x158>)
   2566e:	4798      	blx	r3
		nm_bsp_sleep(1);
   25670:	2001      	movs	r0, #1
   25672:	4b12      	ldr	r3, [pc, #72]	; (256bc <spi_read_reg+0x164>)
   25674:	4798      	blx	r3
		retry--;
   25676:	230f      	movs	r3, #15
   25678:	18fb      	adds	r3, r7, r3
   2567a:	781a      	ldrb	r2, [r3, #0]
   2567c:	230f      	movs	r3, #15
   2567e:	18fb      	adds	r3, r7, r3
   25680:	3a01      	subs	r2, #1
   25682:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25684:	230f      	movs	r3, #15
   25686:	18fb      	adds	r3, r7, r3
   25688:	781b      	ldrb	r3, [r3, #0]
   2568a:	2b00      	cmp	r3, #0
   2568c:	d000      	beq.n	25690 <spi_read_reg+0x138>
   2568e:	e778      	b.n	25582 <spi_read_reg+0x2a>
	}
		
	return result;
   25690:	230c      	movs	r3, #12
   25692:	18fb      	adds	r3, r7, r3
   25694:	781b      	ldrb	r3, [r3, #0]
   25696:	b25b      	sxtb	r3, r3
}
   25698:	0018      	movs	r0, r3
   2569a:	46bd      	mov	sp, r7
   2569c:	b005      	add	sp, #20
   2569e:	bd90      	pop	{r4, r7, pc}
   256a0:	00024795 	.word	0x00024795
   256a4:	00000423 	.word	0x00000423
   256a8:	0003a308 	.word	0x0003a308
   256ac:	00039cb0 	.word	0x00039cb0
   256b0:	0001ed59 	.word	0x0001ed59
   256b4:	0003a0d8 	.word	0x0003a0d8
   256b8:	00039cf0 	.word	0x00039cf0
   256bc:	000211ad 	.word	0x000211ad
   256c0:	00024219 	.word	0x00024219
   256c4:	00024659 	.word	0x00024659
   256c8:	00000435 	.word	0x00000435
   256cc:	0003a104 	.word	0x0003a104

000256d0 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   256d0:	b590      	push	{r4, r7, lr}
   256d2:	b089      	sub	sp, #36	; 0x24
   256d4:	af02      	add	r7, sp, #8
   256d6:	60f8      	str	r0, [r7, #12]
   256d8:	60b9      	str	r1, [r7, #8]
   256da:	1dbb      	adds	r3, r7, #6
   256dc:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   256de:	2316      	movs	r3, #22
   256e0:	18fb      	adds	r3, r7, r3
   256e2:	22c8      	movs	r2, #200	; 0xc8
   256e4:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   256e6:	2317      	movs	r3, #23
   256e8:	18fb      	adds	r3, r7, r3
   256ea:	220a      	movs	r2, #10
   256ec:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   256ee:	1dbb      	adds	r3, r7, #6
   256f0:	881c      	ldrh	r4, [r3, #0]
   256f2:	68ba      	ldr	r2, [r7, #8]
   256f4:	68f9      	ldr	r1, [r7, #12]
   256f6:	2316      	movs	r3, #22
   256f8:	18fb      	adds	r3, r7, r3
   256fa:	7818      	ldrb	r0, [r3, #0]
   256fc:	2300      	movs	r3, #0
   256fe:	9300      	str	r3, [sp, #0]
   25700:	0023      	movs	r3, r4
   25702:	4c2e      	ldr	r4, [pc, #184]	; (257bc <nm_spi_read+0xec>)
   25704:	47a0      	blx	r4
   25706:	0002      	movs	r2, r0
   25708:	2315      	movs	r3, #21
   2570a:	18fb      	adds	r3, r7, r3
   2570c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2570e:	2315      	movs	r3, #21
   25710:	18fb      	adds	r3, r7, r3
   25712:	781b      	ldrb	r3, [r3, #0]
   25714:	b25b      	sxtb	r3, r3
   25716:	2b01      	cmp	r3, #1
   25718:	d010      	beq.n	2573c <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   2571a:	4a29      	ldr	r2, [pc, #164]	; (257c0 <nm_spi_read+0xf0>)
   2571c:	4929      	ldr	r1, [pc, #164]	; (257c4 <nm_spi_read+0xf4>)
   2571e:	4b2a      	ldr	r3, [pc, #168]	; (257c8 <nm_spi_read+0xf8>)
   25720:	0018      	movs	r0, r3
   25722:	4b2a      	ldr	r3, [pc, #168]	; (257cc <nm_spi_read+0xfc>)
   25724:	4798      	blx	r3
   25726:	68fa      	ldr	r2, [r7, #12]
   25728:	4b29      	ldr	r3, [pc, #164]	; (257d0 <nm_spi_read+0x100>)
   2572a:	0011      	movs	r1, r2
   2572c:	0018      	movs	r0, r3
   2572e:	4b27      	ldr	r3, [pc, #156]	; (257cc <nm_spi_read+0xfc>)
   25730:	4798      	blx	r3
   25732:	4b28      	ldr	r3, [pc, #160]	; (257d4 <nm_spi_read+0x104>)
   25734:	0018      	movs	r0, r3
   25736:	4b25      	ldr	r3, [pc, #148]	; (257cc <nm_spi_read+0xfc>)
   25738:	4798      	blx	r3
		goto _FAIL_;
   2573a:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   2573c:	2315      	movs	r3, #21
   2573e:	18fb      	adds	r3, r7, r3
   25740:	781b      	ldrb	r3, [r3, #0]
   25742:	b25b      	sxtb	r3, r3
   25744:	2b01      	cmp	r3, #1
   25746:	d030      	beq.n	257aa <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   25748:	2001      	movs	r0, #1
   2574a:	4b23      	ldr	r3, [pc, #140]	; (257d8 <nm_spi_read+0x108>)
   2574c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2574e:	2300      	movs	r3, #0
   25750:	9300      	str	r3, [sp, #0]
   25752:	2300      	movs	r3, #0
   25754:	2200      	movs	r2, #0
   25756:	2100      	movs	r1, #0
   25758:	20cf      	movs	r0, #207	; 0xcf
   2575a:	4c20      	ldr	r4, [pc, #128]	; (257dc <nm_spi_read+0x10c>)
   2575c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2575e:	20cf      	movs	r0, #207	; 0xcf
   25760:	4b1f      	ldr	r3, [pc, #124]	; (257e0 <nm_spi_read+0x110>)
   25762:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   25764:	4a1f      	ldr	r2, [pc, #124]	; (257e4 <nm_spi_read+0x114>)
   25766:	4917      	ldr	r1, [pc, #92]	; (257c4 <nm_spi_read+0xf4>)
   25768:	4b17      	ldr	r3, [pc, #92]	; (257c8 <nm_spi_read+0xf8>)
   2576a:	0018      	movs	r0, r3
   2576c:	4b17      	ldr	r3, [pc, #92]	; (257cc <nm_spi_read+0xfc>)
   2576e:	4798      	blx	r3
   25770:	2317      	movs	r3, #23
   25772:	18fb      	adds	r3, r7, r3
   25774:	7819      	ldrb	r1, [r3, #0]
   25776:	1dbb      	adds	r3, r7, #6
   25778:	881b      	ldrh	r3, [r3, #0]
   2577a:	68fa      	ldr	r2, [r7, #12]
   2577c:	481a      	ldr	r0, [pc, #104]	; (257e8 <nm_spi_read+0x118>)
   2577e:	4c13      	ldr	r4, [pc, #76]	; (257cc <nm_spi_read+0xfc>)
   25780:	47a0      	blx	r4
   25782:	4b14      	ldr	r3, [pc, #80]	; (257d4 <nm_spi_read+0x104>)
   25784:	0018      	movs	r0, r3
   25786:	4b11      	ldr	r3, [pc, #68]	; (257cc <nm_spi_read+0xfc>)
   25788:	4798      	blx	r3
		nm_bsp_sleep(1);
   2578a:	2001      	movs	r0, #1
   2578c:	4b12      	ldr	r3, [pc, #72]	; (257d8 <nm_spi_read+0x108>)
   2578e:	4798      	blx	r3
		retry--;
   25790:	2317      	movs	r3, #23
   25792:	18fb      	adds	r3, r7, r3
   25794:	781a      	ldrb	r2, [r3, #0]
   25796:	2317      	movs	r3, #23
   25798:	18fb      	adds	r3, r7, r3
   2579a:	3a01      	subs	r2, #1
   2579c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2579e:	2317      	movs	r3, #23
   257a0:	18fb      	adds	r3, r7, r3
   257a2:	781b      	ldrb	r3, [r3, #0]
   257a4:	2b00      	cmp	r3, #0
   257a6:	d000      	beq.n	257aa <nm_spi_read+0xda>
   257a8:	e7a1      	b.n	256ee <nm_spi_read+0x1e>
	}

	return result;
   257aa:	2315      	movs	r3, #21
   257ac:	18fb      	adds	r3, r7, r3
   257ae:	781b      	ldrb	r3, [r3, #0]
   257b0:	b25b      	sxtb	r3, r3
}
   257b2:	0018      	movs	r0, r3
   257b4:	46bd      	mov	sp, r7
   257b6:	b007      	add	sp, #28
   257b8:	bd90      	pop	{r4, r7, pc}
   257ba:	46c0      	nop			; (mov r8, r8)
   257bc:	00024795 	.word	0x00024795
   257c0:	00000472 	.word	0x00000472
   257c4:	0003a318 	.word	0x0003a318
   257c8:	00039cb0 	.word	0x00039cb0
   257cc:	0001ed59 	.word	0x0001ed59
   257d0:	0003a11c 	.word	0x0003a11c
   257d4:	00039cf0 	.word	0x00039cf0
   257d8:	000211ad 	.word	0x000211ad
   257dc:	00024219 	.word	0x00024219
   257e0:	00024659 	.word	0x00024659
   257e4:	0000047d 	.word	0x0000047d
   257e8:	0003a0bc 	.word	0x0003a0bc

000257ec <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   257ec:	b580      	push	{r7, lr}
   257ee:	b082      	sub	sp, #8
   257f0:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   257f2:	4b0c      	ldr	r3, [pc, #48]	; (25824 <spi_init_pkt_sz+0x38>)
   257f4:	0018      	movs	r0, r3
   257f6:	4b0c      	ldr	r3, [pc, #48]	; (25828 <spi_init_pkt_sz+0x3c>)
   257f8:	4798      	blx	r3
   257fa:	0003      	movs	r3, r0
   257fc:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   257fe:	687b      	ldr	r3, [r7, #4]
   25800:	2270      	movs	r2, #112	; 0x70
   25802:	4393      	bics	r3, r2
   25804:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   25806:	687b      	ldr	r3, [r7, #4]
   25808:	2250      	movs	r2, #80	; 0x50
   2580a:	4313      	orrs	r3, r2
   2580c:	607b      	str	r3, [r7, #4]
   2580e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   25810:	687b      	ldr	r3, [r7, #4]
   25812:	4a04      	ldr	r2, [pc, #16]	; (25824 <spi_init_pkt_sz+0x38>)
   25814:	0019      	movs	r1, r3
   25816:	0010      	movs	r0, r2
   25818:	4b04      	ldr	r3, [pc, #16]	; (2582c <spi_init_pkt_sz+0x40>)
   2581a:	4798      	blx	r3
}
   2581c:	46c0      	nop			; (mov r8, r8)
   2581e:	46bd      	mov	sp, r7
   25820:	b002      	add	sp, #8
   25822:	bd80      	pop	{r7, pc}
   25824:	0000e824 	.word	0x0000e824
   25828:	000259c5 	.word	0x000259c5
   2582c:	00025a39 	.word	0x00025a39

00025830 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   25830:	b590      	push	{r4, r7, lr}
   25832:	b083      	sub	sp, #12
   25834:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25836:	2300      	movs	r3, #0
   25838:	9300      	str	r3, [sp, #0]
   2583a:	2300      	movs	r3, #0
   2583c:	2200      	movs	r2, #0
   2583e:	2100      	movs	r1, #0
   25840:	20cf      	movs	r0, #207	; 0xcf
   25842:	4c05      	ldr	r4, [pc, #20]	; (25858 <nm_spi_reset+0x28>)
   25844:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   25846:	20cf      	movs	r0, #207	; 0xcf
   25848:	4b04      	ldr	r3, [pc, #16]	; (2585c <nm_spi_reset+0x2c>)
   2584a:	4798      	blx	r3
	return M2M_SUCCESS;
   2584c:	2300      	movs	r3, #0
}
   2584e:	0018      	movs	r0, r3
   25850:	46bd      	mov	sp, r7
   25852:	b001      	add	sp, #4
   25854:	bd90      	pop	{r4, r7, pc}
   25856:	46c0      	nop			; (mov r8, r8)
   25858:	00024219 	.word	0x00024219
   2585c:	00024659 	.word	0x00024659

00025860 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   25860:	b580      	push	{r7, lr}
   25862:	b082      	sub	sp, #8
   25864:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   25866:	2300      	movs	r3, #0
   25868:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   2586a:	4b40      	ldr	r3, [pc, #256]	; (2596c <nm_spi_init+0x10c>)
   2586c:	2200      	movs	r2, #0
   2586e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   25870:	003b      	movs	r3, r7
   25872:	4a3f      	ldr	r2, [pc, #252]	; (25970 <nm_spi_init+0x110>)
   25874:	0019      	movs	r1, r3
   25876:	0010      	movs	r0, r2
   25878:	4b3e      	ldr	r3, [pc, #248]	; (25974 <nm_spi_init+0x114>)
   2587a:	4798      	blx	r3
   2587c:	1e03      	subs	r3, r0, #0
   2587e:	d129      	bne.n	258d4 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   25880:	4b3a      	ldr	r3, [pc, #232]	; (2596c <nm_spi_init+0x10c>)
   25882:	2201      	movs	r2, #1
   25884:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   25886:	2398      	movs	r3, #152	; 0x98
   25888:	00da      	lsls	r2, r3, #3
   2588a:	493b      	ldr	r1, [pc, #236]	; (25978 <nm_spi_init+0x118>)
   2588c:	4b3b      	ldr	r3, [pc, #236]	; (2597c <nm_spi_init+0x11c>)
   2588e:	0018      	movs	r0, r3
   25890:	4b3b      	ldr	r3, [pc, #236]	; (25980 <nm_spi_init+0x120>)
   25892:	4798      	blx	r3
   25894:	4b3b      	ldr	r3, [pc, #236]	; (25984 <nm_spi_init+0x124>)
   25896:	0018      	movs	r0, r3
   25898:	4b39      	ldr	r3, [pc, #228]	; (25980 <nm_spi_init+0x120>)
   2589a:	4798      	blx	r3
   2589c:	4b3a      	ldr	r3, [pc, #232]	; (25988 <nm_spi_init+0x128>)
   2589e:	0018      	movs	r0, r3
   258a0:	4b37      	ldr	r3, [pc, #220]	; (25980 <nm_spi_init+0x120>)
   258a2:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   258a4:	003b      	movs	r3, r7
   258a6:	4a32      	ldr	r2, [pc, #200]	; (25970 <nm_spi_init+0x110>)
   258a8:	0019      	movs	r1, r3
   258aa:	0010      	movs	r0, r2
   258ac:	4b31      	ldr	r3, [pc, #196]	; (25974 <nm_spi_init+0x114>)
   258ae:	4798      	blx	r3
   258b0:	1e03      	subs	r3, r0, #0
   258b2:	d10f      	bne.n	258d4 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   258b4:	4a35      	ldr	r2, [pc, #212]	; (2598c <nm_spi_init+0x12c>)
   258b6:	4930      	ldr	r1, [pc, #192]	; (25978 <nm_spi_init+0x118>)
   258b8:	4b30      	ldr	r3, [pc, #192]	; (2597c <nm_spi_init+0x11c>)
   258ba:	0018      	movs	r0, r3
   258bc:	4b30      	ldr	r3, [pc, #192]	; (25980 <nm_spi_init+0x120>)
   258be:	4798      	blx	r3
   258c0:	4b33      	ldr	r3, [pc, #204]	; (25990 <nm_spi_init+0x130>)
   258c2:	0018      	movs	r0, r3
   258c4:	4b2e      	ldr	r3, [pc, #184]	; (25980 <nm_spi_init+0x120>)
   258c6:	4798      	blx	r3
   258c8:	4b2f      	ldr	r3, [pc, #188]	; (25988 <nm_spi_init+0x128>)
   258ca:	0018      	movs	r0, r3
   258cc:	4b2c      	ldr	r3, [pc, #176]	; (25980 <nm_spi_init+0x120>)
   258ce:	4798      	blx	r3
			return 0;
   258d0:	2300      	movs	r3, #0
   258d2:	e047      	b.n	25964 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   258d4:	4b25      	ldr	r3, [pc, #148]	; (2596c <nm_spi_init+0x10c>)
   258d6:	781b      	ldrb	r3, [r3, #0]
   258d8:	2b00      	cmp	r3, #0
   258da:	d126      	bne.n	2592a <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   258dc:	683b      	ldr	r3, [r7, #0]
   258de:	220c      	movs	r2, #12
   258e0:	4393      	bics	r3, r2
   258e2:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   258e4:	683b      	ldr	r3, [r7, #0]
   258e6:	2270      	movs	r2, #112	; 0x70
   258e8:	4393      	bics	r3, r2
   258ea:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   258ec:	683b      	ldr	r3, [r7, #0]
   258ee:	2250      	movs	r2, #80	; 0x50
   258f0:	4313      	orrs	r3, r2
   258f2:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   258f4:	683b      	ldr	r3, [r7, #0]
   258f6:	4a1e      	ldr	r2, [pc, #120]	; (25970 <nm_spi_init+0x110>)
   258f8:	0019      	movs	r1, r3
   258fa:	0010      	movs	r0, r2
   258fc:	4b25      	ldr	r3, [pc, #148]	; (25994 <nm_spi_init+0x134>)
   258fe:	4798      	blx	r3
   25900:	1e03      	subs	r3, r0, #0
   25902:	d10f      	bne.n	25924 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   25904:	4a24      	ldr	r2, [pc, #144]	; (25998 <nm_spi_init+0x138>)
   25906:	491c      	ldr	r1, [pc, #112]	; (25978 <nm_spi_init+0x118>)
   25908:	4b1c      	ldr	r3, [pc, #112]	; (2597c <nm_spi_init+0x11c>)
   2590a:	0018      	movs	r0, r3
   2590c:	4b1c      	ldr	r3, [pc, #112]	; (25980 <nm_spi_init+0x120>)
   2590e:	4798      	blx	r3
   25910:	4b22      	ldr	r3, [pc, #136]	; (2599c <nm_spi_init+0x13c>)
   25912:	0018      	movs	r0, r3
   25914:	4b1a      	ldr	r3, [pc, #104]	; (25980 <nm_spi_init+0x120>)
   25916:	4798      	blx	r3
   25918:	4b1b      	ldr	r3, [pc, #108]	; (25988 <nm_spi_init+0x128>)
   2591a:	0018      	movs	r0, r3
   2591c:	4b18      	ldr	r3, [pc, #96]	; (25980 <nm_spi_init+0x120>)
   2591e:	4798      	blx	r3
			return 0;
   25920:	2300      	movs	r3, #0
   25922:	e01f      	b.n	25964 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   25924:	4b11      	ldr	r3, [pc, #68]	; (2596c <nm_spi_init+0x10c>)
   25926:	2201      	movs	r2, #1
   25928:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   2592a:	1d3a      	adds	r2, r7, #4
   2592c:	2380      	movs	r3, #128	; 0x80
   2592e:	015b      	lsls	r3, r3, #5
   25930:	0011      	movs	r1, r2
   25932:	0018      	movs	r0, r3
   25934:	4b0f      	ldr	r3, [pc, #60]	; (25974 <nm_spi_init+0x114>)
   25936:	4798      	blx	r3
   25938:	1e03      	subs	r3, r0, #0
   2593a:	d110      	bne.n	2595e <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   2593c:	4a18      	ldr	r2, [pc, #96]	; (259a0 <nm_spi_init+0x140>)
   2593e:	490e      	ldr	r1, [pc, #56]	; (25978 <nm_spi_init+0x118>)
   25940:	4b0e      	ldr	r3, [pc, #56]	; (2597c <nm_spi_init+0x11c>)
   25942:	0018      	movs	r0, r3
   25944:	4b0e      	ldr	r3, [pc, #56]	; (25980 <nm_spi_init+0x120>)
   25946:	4798      	blx	r3
   25948:	4b16      	ldr	r3, [pc, #88]	; (259a4 <nm_spi_init+0x144>)
   2594a:	0018      	movs	r0, r3
   2594c:	4b0c      	ldr	r3, [pc, #48]	; (25980 <nm_spi_init+0x120>)
   2594e:	4798      	blx	r3
   25950:	4b0d      	ldr	r3, [pc, #52]	; (25988 <nm_spi_init+0x128>)
   25952:	0018      	movs	r0, r3
   25954:	4b0a      	ldr	r3, [pc, #40]	; (25980 <nm_spi_init+0x120>)
   25956:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   25958:	2306      	movs	r3, #6
   2595a:	425b      	negs	r3, r3
   2595c:	e002      	b.n	25964 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   2595e:	4b12      	ldr	r3, [pc, #72]	; (259a8 <nm_spi_init+0x148>)
   25960:	4798      	blx	r3


	return M2M_SUCCESS;
   25962:	2300      	movs	r3, #0
}
   25964:	0018      	movs	r0, r3
   25966:	46bd      	mov	sp, r7
   25968:	b002      	add	sp, #8
   2596a:	bd80      	pop	{r7, pc}
   2596c:	200042b0 	.word	0x200042b0
   25970:	0000e824 	.word	0x0000e824
   25974:	00025559 	.word	0x00025559
   25978:	0003a324 	.word	0x0003a324
   2597c:	00039cb0 	.word	0x00039cb0
   25980:	0001ed59 	.word	0x0001ed59
   25984:	0003a14c 	.word	0x0003a14c
   25988:	00039cf0 	.word	0x00039cf0
   2598c:	000004c3 	.word	0x000004c3
   25990:	0003a19c 	.word	0x0003a19c
   25994:	00025261 	.word	0x00025261
   25998:	000004cd 	.word	0x000004cd
   2599c:	0003a1cc 	.word	0x0003a1cc
   259a0:	000004d7 	.word	0x000004d7
   259a4:	0003a200 	.word	0x0003a200
   259a8:	000257ed 	.word	0x000257ed

000259ac <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   259ac:	b580      	push	{r7, lr}
   259ae:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   259b0:	4b03      	ldr	r3, [pc, #12]	; (259c0 <nm_spi_deinit+0x14>)
   259b2:	2200      	movs	r2, #0
   259b4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   259b6:	2300      	movs	r3, #0
}
   259b8:	0018      	movs	r0, r3
   259ba:	46bd      	mov	sp, r7
   259bc:	bd80      	pop	{r7, pc}
   259be:	46c0      	nop			; (mov r8, r8)
   259c0:	200042b0 	.word	0x200042b0

000259c4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   259c4:	b580      	push	{r7, lr}
   259c6:	b084      	sub	sp, #16
   259c8:	af00      	add	r7, sp, #0
   259ca:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   259cc:	230c      	movs	r3, #12
   259ce:	18fa      	adds	r2, r7, r3
   259d0:	687b      	ldr	r3, [r7, #4]
   259d2:	0011      	movs	r1, r2
   259d4:	0018      	movs	r0, r3
   259d6:	4b03      	ldr	r3, [pc, #12]	; (259e4 <nm_spi_read_reg+0x20>)
   259d8:	4798      	blx	r3

	return u32Val;
   259da:	68fb      	ldr	r3, [r7, #12]
}
   259dc:	0018      	movs	r0, r3
   259de:	46bd      	mov	sp, r7
   259e0:	b004      	add	sp, #16
   259e2:	bd80      	pop	{r7, pc}
   259e4:	00025559 	.word	0x00025559

000259e8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   259e8:	b590      	push	{r4, r7, lr}
   259ea:	b085      	sub	sp, #20
   259ec:	af00      	add	r7, sp, #0
   259ee:	6078      	str	r0, [r7, #4]
   259f0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   259f2:	230f      	movs	r3, #15
   259f4:	18fc      	adds	r4, r7, r3
   259f6:	683a      	ldr	r2, [r7, #0]
   259f8:	687b      	ldr	r3, [r7, #4]
   259fa:	0011      	movs	r1, r2
   259fc:	0018      	movs	r0, r3
   259fe:	4b0d      	ldr	r3, [pc, #52]	; (25a34 <nm_spi_read_reg_with_ret+0x4c>)
   25a00:	4798      	blx	r3
   25a02:	0003      	movs	r3, r0
   25a04:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25a06:	230f      	movs	r3, #15
   25a08:	18fb      	adds	r3, r7, r3
   25a0a:	781b      	ldrb	r3, [r3, #0]
   25a0c:	b25b      	sxtb	r3, r3
   25a0e:	2b01      	cmp	r3, #1
   25a10:	d104      	bne.n	25a1c <nm_spi_read_reg_with_ret+0x34>
   25a12:	230f      	movs	r3, #15
   25a14:	18fb      	adds	r3, r7, r3
   25a16:	2200      	movs	r2, #0
   25a18:	701a      	strb	r2, [r3, #0]
   25a1a:	e003      	b.n	25a24 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25a1c:	230f      	movs	r3, #15
   25a1e:	18fb      	adds	r3, r7, r3
   25a20:	22fa      	movs	r2, #250	; 0xfa
   25a22:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25a24:	230f      	movs	r3, #15
   25a26:	18fb      	adds	r3, r7, r3
   25a28:	781b      	ldrb	r3, [r3, #0]
   25a2a:	b25b      	sxtb	r3, r3
}
   25a2c:	0018      	movs	r0, r3
   25a2e:	46bd      	mov	sp, r7
   25a30:	b005      	add	sp, #20
   25a32:	bd90      	pop	{r4, r7, pc}
   25a34:	00025559 	.word	0x00025559

00025a38 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25a38:	b590      	push	{r4, r7, lr}
   25a3a:	b085      	sub	sp, #20
   25a3c:	af00      	add	r7, sp, #0
   25a3e:	6078      	str	r0, [r7, #4]
   25a40:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   25a42:	230f      	movs	r3, #15
   25a44:	18fc      	adds	r4, r7, r3
   25a46:	683a      	ldr	r2, [r7, #0]
   25a48:	687b      	ldr	r3, [r7, #4]
   25a4a:	0011      	movs	r1, r2
   25a4c:	0018      	movs	r0, r3
   25a4e:	4b0d      	ldr	r3, [pc, #52]	; (25a84 <nm_spi_write_reg+0x4c>)
   25a50:	4798      	blx	r3
   25a52:	0003      	movs	r3, r0
   25a54:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25a56:	230f      	movs	r3, #15
   25a58:	18fb      	adds	r3, r7, r3
   25a5a:	781b      	ldrb	r3, [r3, #0]
   25a5c:	b25b      	sxtb	r3, r3
   25a5e:	2b01      	cmp	r3, #1
   25a60:	d104      	bne.n	25a6c <nm_spi_write_reg+0x34>
   25a62:	230f      	movs	r3, #15
   25a64:	18fb      	adds	r3, r7, r3
   25a66:	2200      	movs	r2, #0
   25a68:	701a      	strb	r2, [r3, #0]
   25a6a:	e003      	b.n	25a74 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25a6c:	230f      	movs	r3, #15
   25a6e:	18fb      	adds	r3, r7, r3
   25a70:	22fa      	movs	r2, #250	; 0xfa
   25a72:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25a74:	230f      	movs	r3, #15
   25a76:	18fb      	adds	r3, r7, r3
   25a78:	781b      	ldrb	r3, [r3, #0]
   25a7a:	b25b      	sxtb	r3, r3
}
   25a7c:	0018      	movs	r0, r3
   25a7e:	46bd      	mov	sp, r7
   25a80:	b005      	add	sp, #20
   25a82:	bd90      	pop	{r4, r7, pc}
   25a84:	00025261 	.word	0x00025261

00025a88 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25a88:	b590      	push	{r4, r7, lr}
   25a8a:	b087      	sub	sp, #28
   25a8c:	af00      	add	r7, sp, #0
   25a8e:	60f8      	str	r0, [r7, #12]
   25a90:	60b9      	str	r1, [r7, #8]
   25a92:	1dbb      	adds	r3, r7, #6
   25a94:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   25a96:	2317      	movs	r3, #23
   25a98:	18fc      	adds	r4, r7, r3
   25a9a:	1dbb      	adds	r3, r7, #6
   25a9c:	881a      	ldrh	r2, [r3, #0]
   25a9e:	68b9      	ldr	r1, [r7, #8]
   25aa0:	68fb      	ldr	r3, [r7, #12]
   25aa2:	0018      	movs	r0, r3
   25aa4:	4b0d      	ldr	r3, [pc, #52]	; (25adc <nm_spi_read_block+0x54>)
   25aa6:	4798      	blx	r3
   25aa8:	0003      	movs	r3, r0
   25aaa:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25aac:	2317      	movs	r3, #23
   25aae:	18fb      	adds	r3, r7, r3
   25ab0:	781b      	ldrb	r3, [r3, #0]
   25ab2:	b25b      	sxtb	r3, r3
   25ab4:	2b01      	cmp	r3, #1
   25ab6:	d104      	bne.n	25ac2 <nm_spi_read_block+0x3a>
   25ab8:	2317      	movs	r3, #23
   25aba:	18fb      	adds	r3, r7, r3
   25abc:	2200      	movs	r2, #0
   25abe:	701a      	strb	r2, [r3, #0]
   25ac0:	e003      	b.n	25aca <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25ac2:	2317      	movs	r3, #23
   25ac4:	18fb      	adds	r3, r7, r3
   25ac6:	22fa      	movs	r2, #250	; 0xfa
   25ac8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25aca:	2317      	movs	r3, #23
   25acc:	18fb      	adds	r3, r7, r3
   25ace:	781b      	ldrb	r3, [r3, #0]
   25ad0:	b25b      	sxtb	r3, r3
}
   25ad2:	0018      	movs	r0, r3
   25ad4:	46bd      	mov	sp, r7
   25ad6:	b007      	add	sp, #28
   25ad8:	bd90      	pop	{r4, r7, pc}
   25ada:	46c0      	nop			; (mov r8, r8)
   25adc:	000256d1 	.word	0x000256d1

00025ae0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25ae0:	b590      	push	{r4, r7, lr}
   25ae2:	b087      	sub	sp, #28
   25ae4:	af00      	add	r7, sp, #0
   25ae6:	60f8      	str	r0, [r7, #12]
   25ae8:	60b9      	str	r1, [r7, #8]
   25aea:	1dbb      	adds	r3, r7, #6
   25aec:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   25aee:	2317      	movs	r3, #23
   25af0:	18fc      	adds	r4, r7, r3
   25af2:	1dbb      	adds	r3, r7, #6
   25af4:	881a      	ldrh	r2, [r3, #0]
   25af6:	68b9      	ldr	r1, [r7, #8]
   25af8:	68fb      	ldr	r3, [r7, #12]
   25afa:	0018      	movs	r0, r3
   25afc:	4b0d      	ldr	r3, [pc, #52]	; (25b34 <nm_spi_write_block+0x54>)
   25afe:	4798      	blx	r3
   25b00:	0003      	movs	r3, r0
   25b02:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25b04:	2317      	movs	r3, #23
   25b06:	18fb      	adds	r3, r7, r3
   25b08:	781b      	ldrb	r3, [r3, #0]
   25b0a:	b25b      	sxtb	r3, r3
   25b0c:	2b01      	cmp	r3, #1
   25b0e:	d104      	bne.n	25b1a <nm_spi_write_block+0x3a>
   25b10:	2317      	movs	r3, #23
   25b12:	18fb      	adds	r3, r7, r3
   25b14:	2200      	movs	r2, #0
   25b16:	701a      	strb	r2, [r3, #0]
   25b18:	e003      	b.n	25b22 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25b1a:	2317      	movs	r3, #23
   25b1c:	18fb      	adds	r3, r7, r3
   25b1e:	22fa      	movs	r2, #250	; 0xfa
   25b20:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25b22:	2317      	movs	r3, #23
   25b24:	18fb      	adds	r3, r7, r3
   25b26:	781b      	ldrb	r3, [r3, #0]
   25b28:	b25b      	sxtb	r3, r3
}
   25b2a:	0018      	movs	r0, r3
   25b2c:	46bd      	mov	sp, r7
   25b2e:	b007      	add	sp, #28
   25b30:	bd90      	pop	{r4, r7, pc}
   25b32:	46c0      	nop			; (mov r8, r8)
   25b34:	000253ad 	.word	0x000253ad

00025b38 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25b38:	b590      	push	{r4, r7, lr}
   25b3a:	b089      	sub	sp, #36	; 0x24
   25b3c:	af00      	add	r7, sp, #0
   25b3e:	60b9      	str	r1, [r7, #8]
   25b40:	0011      	movs	r1, r2
   25b42:	607b      	str	r3, [r7, #4]
   25b44:	230f      	movs	r3, #15
   25b46:	18fb      	adds	r3, r7, r3
   25b48:	1c02      	adds	r2, r0, #0
   25b4a:	701a      	strb	r2, [r3, #0]
   25b4c:	230e      	movs	r3, #14
   25b4e:	18fb      	adds	r3, r7, r3
   25b50:	1c0a      	adds	r2, r1, #0
   25b52:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25b54:	2330      	movs	r3, #48	; 0x30
   25b56:	18fb      	adds	r3, r7, r3
   25b58:	881b      	ldrh	r3, [r3, #0]
   25b5a:	2b00      	cmp	r3, #0
   25b5c:	d100      	bne.n	25b60 <Socket_ReadSocketData+0x28>
   25b5e:	e0d7      	b.n	25d10 <Socket_ReadSocketData+0x1d8>
   25b60:	230f      	movs	r3, #15
   25b62:	18fb      	adds	r3, r7, r3
   25b64:	2200      	movs	r2, #0
   25b66:	569a      	ldrsb	r2, [r3, r2]
   25b68:	4b6b      	ldr	r3, [pc, #428]	; (25d18 <Socket_ReadSocketData+0x1e0>)
   25b6a:	0112      	lsls	r2, r2, #4
   25b6c:	58d3      	ldr	r3, [r2, r3]
   25b6e:	2b00      	cmp	r3, #0
   25b70:	d100      	bne.n	25b74 <Socket_ReadSocketData+0x3c>
   25b72:	e0cd      	b.n	25d10 <Socket_ReadSocketData+0x1d8>
   25b74:	230f      	movs	r3, #15
   25b76:	18fb      	adds	r3, r7, r3
   25b78:	781b      	ldrb	r3, [r3, #0]
   25b7a:	b25b      	sxtb	r3, r3
   25b7c:	4a66      	ldr	r2, [pc, #408]	; (25d18 <Socket_ReadSocketData+0x1e0>)
   25b7e:	011b      	lsls	r3, r3, #4
   25b80:	18d3      	adds	r3, r2, r3
   25b82:	3304      	adds	r3, #4
   25b84:	881b      	ldrh	r3, [r3, #0]
   25b86:	b29b      	uxth	r3, r3
   25b88:	2b00      	cmp	r3, #0
   25b8a:	d100      	bne.n	25b8e <Socket_ReadSocketData+0x56>
   25b8c:	e0c0      	b.n	25d10 <Socket_ReadSocketData+0x1d8>
   25b8e:	230f      	movs	r3, #15
   25b90:	18fb      	adds	r3, r7, r3
   25b92:	781b      	ldrb	r3, [r3, #0]
   25b94:	b25b      	sxtb	r3, r3
   25b96:	4a60      	ldr	r2, [pc, #384]	; (25d18 <Socket_ReadSocketData+0x1e0>)
   25b98:	011b      	lsls	r3, r3, #4
   25b9a:	18d3      	adds	r3, r2, r3
   25b9c:	330a      	adds	r3, #10
   25b9e:	781b      	ldrb	r3, [r3, #0]
   25ba0:	b2db      	uxtb	r3, r3
   25ba2:	2b01      	cmp	r3, #1
   25ba4:	d000      	beq.n	25ba8 <Socket_ReadSocketData+0x70>
   25ba6:	e0b3      	b.n	25d10 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25ba8:	687b      	ldr	r3, [r7, #4]
   25baa:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25bac:	68bb      	ldr	r3, [r7, #8]
   25bae:	2230      	movs	r2, #48	; 0x30
   25bb0:	18ba      	adds	r2, r7, r2
   25bb2:	8812      	ldrh	r2, [r2, #0]
   25bb4:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25bb6:	2319      	movs	r3, #25
   25bb8:	18fb      	adds	r3, r7, r3
   25bba:	2201      	movs	r2, #1
   25bbc:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   25bbe:	231a      	movs	r3, #26
   25bc0:	18fb      	adds	r3, r7, r3
   25bc2:	2230      	movs	r2, #48	; 0x30
   25bc4:	18ba      	adds	r2, r7, r2
   25bc6:	8812      	ldrh	r2, [r2, #0]
   25bc8:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25bca:	230f      	movs	r3, #15
   25bcc:	18fb      	adds	r3, r7, r3
   25bce:	781b      	ldrb	r3, [r3, #0]
   25bd0:	b25b      	sxtb	r3, r3
   25bd2:	4a51      	ldr	r2, [pc, #324]	; (25d18 <Socket_ReadSocketData+0x1e0>)
   25bd4:	011b      	lsls	r3, r3, #4
   25bd6:	18d3      	adds	r3, r2, r3
   25bd8:	3304      	adds	r3, #4
   25bda:	881b      	ldrh	r3, [r3, #0]
   25bdc:	b29b      	uxth	r3, r3
   25bde:	221a      	movs	r2, #26
   25be0:	18ba      	adds	r2, r7, r2
   25be2:	8812      	ldrh	r2, [r2, #0]
   25be4:	1ad3      	subs	r3, r2, r3
   25be6:	b29a      	uxth	r2, r3
   25be8:	2316      	movs	r3, #22
   25bea:	18fb      	adds	r3, r7, r3
   25bec:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   25bee:	2316      	movs	r3, #22
   25bf0:	18fb      	adds	r3, r7, r3
   25bf2:	2200      	movs	r2, #0
   25bf4:	5e9b      	ldrsh	r3, [r3, r2]
   25bf6:	2b00      	cmp	r3, #0
   25bf8:	dd0f      	ble.n	25c1a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   25bfa:	2319      	movs	r3, #25
   25bfc:	18fb      	adds	r3, r7, r3
   25bfe:	2200      	movs	r2, #0
   25c00:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   25c02:	230f      	movs	r3, #15
   25c04:	18fb      	adds	r3, r7, r3
   25c06:	2200      	movs	r2, #0
   25c08:	569a      	ldrsb	r2, [r3, r2]
   25c0a:	231a      	movs	r3, #26
   25c0c:	18fb      	adds	r3, r7, r3
   25c0e:	4942      	ldr	r1, [pc, #264]	; (25d18 <Socket_ReadSocketData+0x1e0>)
   25c10:	0112      	lsls	r2, r2, #4
   25c12:	188a      	adds	r2, r1, r2
   25c14:	3204      	adds	r2, #4
   25c16:	8812      	ldrh	r2, [r2, #0]
   25c18:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   25c1a:	230f      	movs	r3, #15
   25c1c:	18fb      	adds	r3, r7, r3
   25c1e:	2200      	movs	r2, #0
   25c20:	569a      	ldrsb	r2, [r3, r2]
   25c22:	4b3d      	ldr	r3, [pc, #244]	; (25d18 <Socket_ReadSocketData+0x1e0>)
   25c24:	0112      	lsls	r2, r2, #4
   25c26:	58d1      	ldr	r1, [r2, r3]
   25c28:	2319      	movs	r3, #25
   25c2a:	18fb      	adds	r3, r7, r3
   25c2c:	781c      	ldrb	r4, [r3, #0]
   25c2e:	231a      	movs	r3, #26
   25c30:	18fb      	adds	r3, r7, r3
   25c32:	881a      	ldrh	r2, [r3, #0]
   25c34:	69f8      	ldr	r0, [r7, #28]
   25c36:	0023      	movs	r3, r4
   25c38:	4c38      	ldr	r4, [pc, #224]	; (25d1c <Socket_ReadSocketData+0x1e4>)
   25c3a:	47a0      	blx	r4
   25c3c:	1e03      	subs	r3, r0, #0
   25c3e:	d14f      	bne.n	25ce0 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25c40:	230f      	movs	r3, #15
   25c42:	18fb      	adds	r3, r7, r3
   25c44:	2200      	movs	r2, #0
   25c46:	569a      	ldrsb	r2, [r3, r2]
   25c48:	4b33      	ldr	r3, [pc, #204]	; (25d18 <Socket_ReadSocketData+0x1e0>)
   25c4a:	0112      	lsls	r2, r2, #4
   25c4c:	58d2      	ldr	r2, [r2, r3]
   25c4e:	68bb      	ldr	r3, [r7, #8]
   25c50:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25c52:	231a      	movs	r3, #26
   25c54:	18fb      	adds	r3, r7, r3
   25c56:	2200      	movs	r2, #0
   25c58:	5e9a      	ldrsh	r2, [r3, r2]
   25c5a:	68bb      	ldr	r3, [r7, #8]
   25c5c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   25c5e:	68bb      	ldr	r3, [r7, #8]
   25c60:	88da      	ldrh	r2, [r3, #6]
   25c62:	231a      	movs	r3, #26
   25c64:	18fb      	adds	r3, r7, r3
   25c66:	881b      	ldrh	r3, [r3, #0]
   25c68:	1ad3      	subs	r3, r2, r3
   25c6a:	b29a      	uxth	r2, r3
   25c6c:	68bb      	ldr	r3, [r7, #8]
   25c6e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25c70:	4b2b      	ldr	r3, [pc, #172]	; (25d20 <Socket_ReadSocketData+0x1e8>)
   25c72:	681b      	ldr	r3, [r3, #0]
   25c74:	2b00      	cmp	r3, #0
   25c76:	d00b      	beq.n	25c90 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25c78:	4b29      	ldr	r3, [pc, #164]	; (25d20 <Socket_ReadSocketData+0x1e8>)
   25c7a:	681b      	ldr	r3, [r3, #0]
   25c7c:	68bc      	ldr	r4, [r7, #8]
   25c7e:	220e      	movs	r2, #14
   25c80:	18ba      	adds	r2, r7, r2
   25c82:	7811      	ldrb	r1, [r2, #0]
   25c84:	220f      	movs	r2, #15
   25c86:	18ba      	adds	r2, r7, r2
   25c88:	2000      	movs	r0, #0
   25c8a:	5610      	ldrsb	r0, [r2, r0]
   25c8c:	0022      	movs	r2, r4
   25c8e:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25c90:	2330      	movs	r3, #48	; 0x30
   25c92:	18f9      	adds	r1, r7, r3
   25c94:	2330      	movs	r3, #48	; 0x30
   25c96:	18fa      	adds	r2, r7, r3
   25c98:	231a      	movs	r3, #26
   25c9a:	18fb      	adds	r3, r7, r3
   25c9c:	8812      	ldrh	r2, [r2, #0]
   25c9e:	881b      	ldrh	r3, [r3, #0]
   25ca0:	1ad3      	subs	r3, r2, r3
   25ca2:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25ca4:	231a      	movs	r3, #26
   25ca6:	18fb      	adds	r3, r7, r3
   25ca8:	881b      	ldrh	r3, [r3, #0]
   25caa:	69fa      	ldr	r2, [r7, #28]
   25cac:	18d3      	adds	r3, r2, r3
   25cae:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25cb0:	230f      	movs	r3, #15
   25cb2:	18fb      	adds	r3, r7, r3
   25cb4:	781b      	ldrb	r3, [r3, #0]
   25cb6:	b25b      	sxtb	r3, r3
   25cb8:	4a17      	ldr	r2, [pc, #92]	; (25d18 <Socket_ReadSocketData+0x1e0>)
   25cba:	011b      	lsls	r3, r3, #4
   25cbc:	18d3      	adds	r3, r2, r3
   25cbe:	330a      	adds	r3, #10
   25cc0:	781b      	ldrb	r3, [r3, #0]
   25cc2:	b2db      	uxtb	r3, r3
   25cc4:	2b00      	cmp	r3, #0
   25cc6:	d11c      	bne.n	25d02 <Socket_ReadSocketData+0x1ca>
   25cc8:	2330      	movs	r3, #48	; 0x30
   25cca:	18fb      	adds	r3, r7, r3
   25ccc:	881b      	ldrh	r3, [r3, #0]
   25cce:	2b00      	cmp	r3, #0
   25cd0:	d017      	beq.n	25d02 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25cd2:	2301      	movs	r3, #1
   25cd4:	2200      	movs	r2, #0
   25cd6:	2100      	movs	r1, #0
   25cd8:	2000      	movs	r0, #0
   25cda:	4c10      	ldr	r4, [pc, #64]	; (25d1c <Socket_ReadSocketData+0x1e4>)
   25cdc:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25cde:	e017      	b.n	25d10 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25ce0:	4b10      	ldr	r3, [pc, #64]	; (25d24 <Socket_ReadSocketData+0x1ec>)
   25ce2:	0018      	movs	r0, r3
   25ce4:	4b10      	ldr	r3, [pc, #64]	; (25d28 <Socket_ReadSocketData+0x1f0>)
   25ce6:	4798      	blx	r3
   25ce8:	2330      	movs	r3, #48	; 0x30
   25cea:	18fb      	adds	r3, r7, r3
   25cec:	881a      	ldrh	r2, [r3, #0]
   25cee:	4b0f      	ldr	r3, [pc, #60]	; (25d2c <Socket_ReadSocketData+0x1f4>)
   25cf0:	0011      	movs	r1, r2
   25cf2:	0018      	movs	r0, r3
   25cf4:	4b0c      	ldr	r3, [pc, #48]	; (25d28 <Socket_ReadSocketData+0x1f0>)
   25cf6:	4798      	blx	r3
   25cf8:	4b0d      	ldr	r3, [pc, #52]	; (25d30 <Socket_ReadSocketData+0x1f8>)
   25cfa:	0018      	movs	r0, r3
   25cfc:	4b0a      	ldr	r3, [pc, #40]	; (25d28 <Socket_ReadSocketData+0x1f0>)
   25cfe:	4798      	blx	r3
				break;
   25d00:	e006      	b.n	25d10 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25d02:	2330      	movs	r3, #48	; 0x30
   25d04:	18fb      	adds	r3, r7, r3
   25d06:	881b      	ldrh	r3, [r3, #0]
   25d08:	2b00      	cmp	r3, #0
   25d0a:	d000      	beq.n	25d0e <Socket_ReadSocketData+0x1d6>
   25d0c:	e753      	b.n	25bb6 <Socket_ReadSocketData+0x7e>
	}
}
   25d0e:	e7ff      	b.n	25d10 <Socket_ReadSocketData+0x1d8>
   25d10:	46c0      	nop			; (mov r8, r8)
   25d12:	46bd      	mov	sp, r7
   25d14:	b009      	add	sp, #36	; 0x24
   25d16:	bd90      	pop	{r4, r7, pc}
   25d18:	20005b94 	.word	0x20005b94
   25d1c:	00022609 	.word	0x00022609
   25d20:	20005c44 	.word	0x20005c44
   25d24:	0003a330 	.word	0x0003a330
   25d28:	0001ed59 	.word	0x0001ed59
   25d2c:	0003a33c 	.word	0x0003a33c
   25d30:	0003a350 	.word	0x0003a350

00025d34 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25d34:	b590      	push	{r4, r7, lr}
   25d36:	b0bb      	sub	sp, #236	; 0xec
   25d38:	af02      	add	r7, sp, #8
   25d3a:	603a      	str	r2, [r7, #0]
   25d3c:	1dfb      	adds	r3, r7, #7
   25d3e:	1c02      	adds	r2, r0, #0
   25d40:	701a      	strb	r2, [r3, #0]
   25d42:	1d3b      	adds	r3, r7, #4
   25d44:	1c0a      	adds	r2, r1, #0
   25d46:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25d48:	1dfb      	adds	r3, r7, #7
   25d4a:	781b      	ldrb	r3, [r3, #0]
   25d4c:	2b41      	cmp	r3, #65	; 0x41
   25d4e:	d003      	beq.n	25d58 <m2m_ip_cb+0x24>
   25d50:	1dfb      	adds	r3, r7, #7
   25d52:	781b      	ldrb	r3, [r3, #0]
   25d54:	2b54      	cmp	r3, #84	; 0x54
   25d56:	d120      	bne.n	25d9a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25d58:	23cc      	movs	r3, #204	; 0xcc
   25d5a:	18f9      	adds	r1, r7, r3
   25d5c:	6838      	ldr	r0, [r7, #0]
   25d5e:	2300      	movs	r3, #0
   25d60:	2204      	movs	r2, #4
   25d62:	4c98      	ldr	r4, [pc, #608]	; (25fc4 <m2m_ip_cb+0x290>)
   25d64:	47a0      	blx	r4
   25d66:	1e03      	subs	r3, r0, #0
   25d68:	d000      	beq.n	25d6c <m2m_ip_cb+0x38>
   25d6a:	e275      	b.n	26258 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25d6c:	23cc      	movs	r3, #204	; 0xcc
   25d6e:	18fb      	adds	r3, r7, r3
   25d70:	2201      	movs	r2, #1
   25d72:	569a      	ldrsb	r2, [r3, r2]
   25d74:	23c8      	movs	r3, #200	; 0xc8
   25d76:	18fb      	adds	r3, r7, r3
   25d78:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25d7a:	4b93      	ldr	r3, [pc, #588]	; (25fc8 <m2m_ip_cb+0x294>)
   25d7c:	681b      	ldr	r3, [r3, #0]
   25d7e:	2b00      	cmp	r3, #0
   25d80:	d100      	bne.n	25d84 <m2m_ip_cb+0x50>
   25d82:	e269      	b.n	26258 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25d84:	4b90      	ldr	r3, [pc, #576]	; (25fc8 <m2m_ip_cb+0x294>)
   25d86:	681b      	ldr	r3, [r3, #0]
   25d88:	22cc      	movs	r2, #204	; 0xcc
   25d8a:	18ba      	adds	r2, r7, r2
   25d8c:	2000      	movs	r0, #0
   25d8e:	5610      	ldrsb	r0, [r2, r0]
   25d90:	22c8      	movs	r2, #200	; 0xc8
   25d92:	18ba      	adds	r2, r7, r2
   25d94:	2101      	movs	r1, #1
   25d96:	4798      	blx	r3
	{
   25d98:	e25e      	b.n	26258 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25d9a:	1dfb      	adds	r3, r7, #7
   25d9c:	781b      	ldrb	r3, [r3, #0]
   25d9e:	2b42      	cmp	r3, #66	; 0x42
   25da0:	d120      	bne.n	25de4 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25da2:	23c4      	movs	r3, #196	; 0xc4
   25da4:	18f9      	adds	r1, r7, r3
   25da6:	6838      	ldr	r0, [r7, #0]
   25da8:	2300      	movs	r3, #0
   25daa:	2204      	movs	r2, #4
   25dac:	4c85      	ldr	r4, [pc, #532]	; (25fc4 <m2m_ip_cb+0x290>)
   25dae:	47a0      	blx	r4
   25db0:	1e03      	subs	r3, r0, #0
   25db2:	d000      	beq.n	25db6 <m2m_ip_cb+0x82>
   25db4:	e257      	b.n	26266 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25db6:	23c4      	movs	r3, #196	; 0xc4
   25db8:	18fb      	adds	r3, r7, r3
   25dba:	2201      	movs	r2, #1
   25dbc:	569a      	ldrsb	r2, [r3, r2]
   25dbe:	23c0      	movs	r3, #192	; 0xc0
   25dc0:	18fb      	adds	r3, r7, r3
   25dc2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25dc4:	4b80      	ldr	r3, [pc, #512]	; (25fc8 <m2m_ip_cb+0x294>)
   25dc6:	681b      	ldr	r3, [r3, #0]
   25dc8:	2b00      	cmp	r3, #0
   25dca:	d100      	bne.n	25dce <m2m_ip_cb+0x9a>
   25dcc:	e24b      	b.n	26266 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25dce:	4b7e      	ldr	r3, [pc, #504]	; (25fc8 <m2m_ip_cb+0x294>)
   25dd0:	681b      	ldr	r3, [r3, #0]
   25dd2:	22c4      	movs	r2, #196	; 0xc4
   25dd4:	18ba      	adds	r2, r7, r2
   25dd6:	2000      	movs	r0, #0
   25dd8:	5610      	ldrsb	r0, [r2, r0]
   25dda:	22c0      	movs	r2, #192	; 0xc0
   25ddc:	18ba      	adds	r2, r7, r2
   25dde:	2102      	movs	r1, #2
   25de0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25de2:	e240      	b.n	26266 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25de4:	1dfb      	adds	r3, r7, #7
   25de6:	781b      	ldrb	r3, [r3, #0]
   25de8:	2b43      	cmp	r3, #67	; 0x43
   25dea:	d000      	beq.n	25dee <m2m_ip_cb+0xba>
   25dec:	e086      	b.n	25efc <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25dee:	23b4      	movs	r3, #180	; 0xb4
   25df0:	18f9      	adds	r1, r7, r3
   25df2:	6838      	ldr	r0, [r7, #0]
   25df4:	2300      	movs	r3, #0
   25df6:	220c      	movs	r2, #12
   25df8:	4c72      	ldr	r4, [pc, #456]	; (25fc4 <m2m_ip_cb+0x290>)
   25dfa:	47a0      	blx	r4
   25dfc:	1e03      	subs	r3, r0, #0
   25dfe:	d000      	beq.n	25e02 <m2m_ip_cb+0xce>
   25e00:	e231      	b.n	26266 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25e02:	23b4      	movs	r3, #180	; 0xb4
   25e04:	18fb      	adds	r3, r7, r3
   25e06:	7a5b      	ldrb	r3, [r3, #9]
   25e08:	b25b      	sxtb	r3, r3
   25e0a:	2b00      	cmp	r3, #0
   25e0c:	db4f      	blt.n	25eae <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   25e0e:	23b4      	movs	r3, #180	; 0xb4
   25e10:	18fb      	adds	r3, r7, r3
   25e12:	7a5b      	ldrb	r3, [r3, #9]
   25e14:	b25b      	sxtb	r3, r3
   25e16:	0018      	movs	r0, r3
   25e18:	23b4      	movs	r3, #180	; 0xb4
   25e1a:	18fb      	adds	r3, r7, r3
   25e1c:	7a1b      	ldrb	r3, [r3, #8]
   25e1e:	b25b      	sxtb	r3, r3
   25e20:	4a6a      	ldr	r2, [pc, #424]	; (25fcc <m2m_ip_cb+0x298>)
   25e22:	011b      	lsls	r3, r3, #4
   25e24:	18d3      	adds	r3, r2, r3
   25e26:	330b      	adds	r3, #11
   25e28:	781b      	ldrb	r3, [r3, #0]
   25e2a:	b2d9      	uxtb	r1, r3
   25e2c:	4a67      	ldr	r2, [pc, #412]	; (25fcc <m2m_ip_cb+0x298>)
   25e2e:	0103      	lsls	r3, r0, #4
   25e30:	18d3      	adds	r3, r2, r3
   25e32:	330b      	adds	r3, #11
   25e34:	1c0a      	adds	r2, r1, #0
   25e36:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25e38:	23b4      	movs	r3, #180	; 0xb4
   25e3a:	18fb      	adds	r3, r7, r3
   25e3c:	7a5b      	ldrb	r3, [r3, #9]
   25e3e:	b25b      	sxtb	r3, r3
   25e40:	4a62      	ldr	r2, [pc, #392]	; (25fcc <m2m_ip_cb+0x298>)
   25e42:	011b      	lsls	r3, r3, #4
   25e44:	18d3      	adds	r3, r2, r3
   25e46:	330a      	adds	r3, #10
   25e48:	2201      	movs	r2, #1
   25e4a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25e4c:	23b4      	movs	r3, #180	; 0xb4
   25e4e:	18fb      	adds	r3, r7, r3
   25e50:	7a5b      	ldrb	r3, [r3, #9]
   25e52:	b25b      	sxtb	r3, r3
   25e54:	0018      	movs	r0, r3
   25e56:	23b4      	movs	r3, #180	; 0xb4
   25e58:	18fb      	adds	r3, r7, r3
   25e5a:	895b      	ldrh	r3, [r3, #10]
   25e5c:	3b08      	subs	r3, #8
   25e5e:	b299      	uxth	r1, r3
   25e60:	4a5a      	ldr	r2, [pc, #360]	; (25fcc <m2m_ip_cb+0x298>)
   25e62:	0103      	lsls	r3, r0, #4
   25e64:	18d3      	adds	r3, r2, r3
   25e66:	3308      	adds	r3, #8
   25e68:	1c0a      	adds	r2, r1, #0
   25e6a:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25e6c:	4b58      	ldr	r3, [pc, #352]	; (25fd0 <m2m_ip_cb+0x29c>)
   25e6e:	881b      	ldrh	r3, [r3, #0]
   25e70:	b29b      	uxth	r3, r3
   25e72:	3301      	adds	r3, #1
   25e74:	b29a      	uxth	r2, r3
   25e76:	4b56      	ldr	r3, [pc, #344]	; (25fd0 <m2m_ip_cb+0x29c>)
   25e78:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25e7a:	4b55      	ldr	r3, [pc, #340]	; (25fd0 <m2m_ip_cb+0x29c>)
   25e7c:	881b      	ldrh	r3, [r3, #0]
   25e7e:	b29b      	uxth	r3, r3
   25e80:	2b00      	cmp	r3, #0
   25e82:	d106      	bne.n	25e92 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25e84:	4b52      	ldr	r3, [pc, #328]	; (25fd0 <m2m_ip_cb+0x29c>)
   25e86:	881b      	ldrh	r3, [r3, #0]
   25e88:	b29b      	uxth	r3, r3
   25e8a:	3301      	adds	r3, #1
   25e8c:	b29a      	uxth	r2, r3
   25e8e:	4b50      	ldr	r3, [pc, #320]	; (25fd0 <m2m_ip_cb+0x29c>)
   25e90:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25e92:	23b4      	movs	r3, #180	; 0xb4
   25e94:	18fb      	adds	r3, r7, r3
   25e96:	7a5b      	ldrb	r3, [r3, #9]
   25e98:	b25b      	sxtb	r3, r3
   25e9a:	0018      	movs	r0, r3
   25e9c:	4b4c      	ldr	r3, [pc, #304]	; (25fd0 <m2m_ip_cb+0x29c>)
   25e9e:	881b      	ldrh	r3, [r3, #0]
   25ea0:	b299      	uxth	r1, r3
   25ea2:	4a4a      	ldr	r2, [pc, #296]	; (25fcc <m2m_ip_cb+0x298>)
   25ea4:	0103      	lsls	r3, r0, #4
   25ea6:	18d3      	adds	r3, r2, r3
   25ea8:	3306      	adds	r3, #6
   25eaa:	1c0a      	adds	r2, r1, #0
   25eac:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25eae:	23b4      	movs	r3, #180	; 0xb4
   25eb0:	18fb      	adds	r3, r7, r3
   25eb2:	2209      	movs	r2, #9
   25eb4:	569a      	ldrsb	r2, [r3, r2]
   25eb6:	23a0      	movs	r3, #160	; 0xa0
   25eb8:	18fb      	adds	r3, r7, r3
   25eba:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25ebc:	23a0      	movs	r3, #160	; 0xa0
   25ebe:	18fb      	adds	r3, r7, r3
   25ec0:	2202      	movs	r2, #2
   25ec2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25ec4:	23b4      	movs	r3, #180	; 0xb4
   25ec6:	18fb      	adds	r3, r7, r3
   25ec8:	885a      	ldrh	r2, [r3, #2]
   25eca:	23a0      	movs	r3, #160	; 0xa0
   25ecc:	18fb      	adds	r3, r7, r3
   25ece:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25ed0:	23b4      	movs	r3, #180	; 0xb4
   25ed2:	18fb      	adds	r3, r7, r3
   25ed4:	685a      	ldr	r2, [r3, #4]
   25ed6:	23a0      	movs	r3, #160	; 0xa0
   25ed8:	18fb      	adds	r3, r7, r3
   25eda:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25edc:	4b3a      	ldr	r3, [pc, #232]	; (25fc8 <m2m_ip_cb+0x294>)
   25ede:	681b      	ldr	r3, [r3, #0]
   25ee0:	2b00      	cmp	r3, #0
   25ee2:	d100      	bne.n	25ee6 <m2m_ip_cb+0x1b2>
   25ee4:	e1bf      	b.n	26266 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25ee6:	4b38      	ldr	r3, [pc, #224]	; (25fc8 <m2m_ip_cb+0x294>)
   25ee8:	681b      	ldr	r3, [r3, #0]
   25eea:	22b4      	movs	r2, #180	; 0xb4
   25eec:	18ba      	adds	r2, r7, r2
   25eee:	2008      	movs	r0, #8
   25ef0:	5610      	ldrsb	r0, [r2, r0]
   25ef2:	22a0      	movs	r2, #160	; 0xa0
   25ef4:	18ba      	adds	r2, r7, r2
   25ef6:	2104      	movs	r1, #4
   25ef8:	4798      	blx	r3
}
   25efa:	e1b4      	b.n	26266 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25efc:	1dfb      	adds	r3, r7, #7
   25efe:	781b      	ldrb	r3, [r3, #0]
   25f00:	2b44      	cmp	r3, #68	; 0x44
   25f02:	d003      	beq.n	25f0c <m2m_ip_cb+0x1d8>
   25f04:	1dfb      	adds	r3, r7, #7
   25f06:	781b      	ldrb	r3, [r3, #0]
   25f08:	2b4b      	cmp	r3, #75	; 0x4b
   25f0a:	d13d      	bne.n	25f88 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25f0c:	239c      	movs	r3, #156	; 0x9c
   25f0e:	18f9      	adds	r1, r7, r3
   25f10:	6838      	ldr	r0, [r7, #0]
   25f12:	2300      	movs	r3, #0
   25f14:	2204      	movs	r2, #4
   25f16:	4c2b      	ldr	r4, [pc, #172]	; (25fc4 <m2m_ip_cb+0x290>)
   25f18:	47a0      	blx	r4
   25f1a:	1e03      	subs	r3, r0, #0
   25f1c:	d000      	beq.n	25f20 <m2m_ip_cb+0x1ec>
   25f1e:	e19d      	b.n	2625c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25f20:	239c      	movs	r3, #156	; 0x9c
   25f22:	18fb      	adds	r3, r7, r3
   25f24:	2200      	movs	r2, #0
   25f26:	569a      	ldrsb	r2, [r3, r2]
   25f28:	2398      	movs	r3, #152	; 0x98
   25f2a:	18fb      	adds	r3, r7, r3
   25f2c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25f2e:	239c      	movs	r3, #156	; 0x9c
   25f30:	18fb      	adds	r3, r7, r3
   25f32:	2201      	movs	r2, #1
   25f34:	569a      	ldrsb	r2, [r3, r2]
   25f36:	2398      	movs	r3, #152	; 0x98
   25f38:	18fb      	adds	r3, r7, r3
   25f3a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25f3c:	239c      	movs	r3, #156	; 0x9c
   25f3e:	18fb      	adds	r3, r7, r3
   25f40:	785b      	ldrb	r3, [r3, #1]
   25f42:	b25b      	sxtb	r3, r3
   25f44:	2b00      	cmp	r3, #0
   25f46:	d10f      	bne.n	25f68 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25f48:	239c      	movs	r3, #156	; 0x9c
   25f4a:	18fb      	adds	r3, r7, r3
   25f4c:	781b      	ldrb	r3, [r3, #0]
   25f4e:	b25b      	sxtb	r3, r3
   25f50:	0018      	movs	r0, r3
   25f52:	239c      	movs	r3, #156	; 0x9c
   25f54:	18fb      	adds	r3, r7, r3
   25f56:	885b      	ldrh	r3, [r3, #2]
   25f58:	3b08      	subs	r3, #8
   25f5a:	b299      	uxth	r1, r3
   25f5c:	4a1b      	ldr	r2, [pc, #108]	; (25fcc <m2m_ip_cb+0x298>)
   25f5e:	0103      	lsls	r3, r0, #4
   25f60:	18d3      	adds	r3, r2, r3
   25f62:	3308      	adds	r3, #8
   25f64:	1c0a      	adds	r2, r1, #0
   25f66:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25f68:	4b17      	ldr	r3, [pc, #92]	; (25fc8 <m2m_ip_cb+0x294>)
   25f6a:	681b      	ldr	r3, [r3, #0]
   25f6c:	2b00      	cmp	r3, #0
   25f6e:	d100      	bne.n	25f72 <m2m_ip_cb+0x23e>
   25f70:	e174      	b.n	2625c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25f72:	4b15      	ldr	r3, [pc, #84]	; (25fc8 <m2m_ip_cb+0x294>)
   25f74:	681b      	ldr	r3, [r3, #0]
   25f76:	229c      	movs	r2, #156	; 0x9c
   25f78:	18ba      	adds	r2, r7, r2
   25f7a:	2000      	movs	r0, #0
   25f7c:	5610      	ldrsb	r0, [r2, r0]
   25f7e:	2298      	movs	r2, #152	; 0x98
   25f80:	18ba      	adds	r2, r7, r2
   25f82:	2105      	movs	r1, #5
   25f84:	4798      	blx	r3
	{
   25f86:	e169      	b.n	2625c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25f88:	1dfb      	adds	r3, r7, #7
   25f8a:	781b      	ldrb	r3, [r3, #0]
   25f8c:	2b4a      	cmp	r3, #74	; 0x4a
   25f8e:	d123      	bne.n	25fd8 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25f90:	230c      	movs	r3, #12
   25f92:	18f9      	adds	r1, r7, r3
   25f94:	6838      	ldr	r0, [r7, #0]
   25f96:	2300      	movs	r3, #0
   25f98:	2244      	movs	r2, #68	; 0x44
   25f9a:	4c0a      	ldr	r4, [pc, #40]	; (25fc4 <m2m_ip_cb+0x290>)
   25f9c:	47a0      	blx	r4
   25f9e:	1e03      	subs	r3, r0, #0
   25fa0:	d000      	beq.n	25fa4 <m2m_ip_cb+0x270>
   25fa2:	e160      	b.n	26266 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25fa4:	4b0b      	ldr	r3, [pc, #44]	; (25fd4 <m2m_ip_cb+0x2a0>)
   25fa6:	681b      	ldr	r3, [r3, #0]
   25fa8:	2b00      	cmp	r3, #0
   25faa:	d100      	bne.n	25fae <m2m_ip_cb+0x27a>
   25fac:	e15b      	b.n	26266 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   25fae:	4b09      	ldr	r3, [pc, #36]	; (25fd4 <m2m_ip_cb+0x2a0>)
   25fb0:	681a      	ldr	r2, [r3, #0]
   25fb2:	230c      	movs	r3, #12
   25fb4:	18fb      	adds	r3, r7, r3
   25fb6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25fb8:	230c      	movs	r3, #12
   25fba:	18fb      	adds	r3, r7, r3
   25fbc:	0018      	movs	r0, r3
   25fbe:	4790      	blx	r2
}
   25fc0:	e151      	b.n	26266 <m2m_ip_cb+0x532>
   25fc2:	46c0      	nop			; (mov r8, r8)
   25fc4:	00022609 	.word	0x00022609
   25fc8:	20005c44 	.word	0x20005c44
   25fcc:	20005b94 	.word	0x20005b94
   25fd0:	200042b2 	.word	0x200042b2
   25fd4:	20005c4c 	.word	0x20005c4c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25fd8:	1dfb      	adds	r3, r7, #7
   25fda:	781b      	ldrb	r3, [r3, #0]
   25fdc:	2b46      	cmp	r3, #70	; 0x46
   25fde:	d008      	beq.n	25ff2 <m2m_ip_cb+0x2be>
   25fe0:	1dfb      	adds	r3, r7, #7
   25fe2:	781b      	ldrb	r3, [r3, #0]
   25fe4:	2b48      	cmp	r3, #72	; 0x48
   25fe6:	d004      	beq.n	25ff2 <m2m_ip_cb+0x2be>
   25fe8:	1dfb      	adds	r3, r7, #7
   25fea:	781b      	ldrb	r3, [r3, #0]
   25fec:	2b4d      	cmp	r3, #77	; 0x4d
   25fee:	d000      	beq.n	25ff2 <m2m_ip_cb+0x2be>
   25ff0:	e0b4      	b.n	2615c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   25ff2:	23df      	movs	r3, #223	; 0xdf
   25ff4:	18fb      	adds	r3, r7, r3
   25ff6:	2206      	movs	r2, #6
   25ff8:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   25ffa:	1dfb      	adds	r3, r7, #7
   25ffc:	781b      	ldrb	r3, [r3, #0]
   25ffe:	2b48      	cmp	r3, #72	; 0x48
   26000:	d103      	bne.n	2600a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   26002:	23df      	movs	r3, #223	; 0xdf
   26004:	18fb      	adds	r3, r7, r3
   26006:	2209      	movs	r2, #9
   26008:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   2600a:	23d8      	movs	r3, #216	; 0xd8
   2600c:	18fb      	adds	r3, r7, r3
   2600e:	2210      	movs	r2, #16
   26010:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   26012:	23d8      	movs	r3, #216	; 0xd8
   26014:	18fb      	adds	r3, r7, r3
   26016:	881a      	ldrh	r2, [r3, #0]
   26018:	2388      	movs	r3, #136	; 0x88
   2601a:	18f9      	adds	r1, r7, r3
   2601c:	6838      	ldr	r0, [r7, #0]
   2601e:	2300      	movs	r3, #0
   26020:	4c93      	ldr	r4, [pc, #588]	; (26270 <m2m_ip_cb+0x53c>)
   26022:	47a0      	blx	r4
   26024:	1e03      	subs	r3, r0, #0
   26026:	d000      	beq.n	2602a <m2m_ip_cb+0x2f6>
   26028:	e11a      	b.n	26260 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   2602a:	23d6      	movs	r3, #214	; 0xd6
   2602c:	18fb      	adds	r3, r7, r3
   2602e:	2200      	movs	r2, #0
   26030:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   26032:	23d5      	movs	r3, #213	; 0xd5
   26034:	18fb      	adds	r3, r7, r3
   26036:	2288      	movs	r2, #136	; 0x88
   26038:	18ba      	adds	r2, r7, r2
   2603a:	7b12      	ldrb	r2, [r2, #12]
   2603c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2603e:	23d6      	movs	r3, #214	; 0xd6
   26040:	18fb      	adds	r3, r7, r3
   26042:	2288      	movs	r2, #136	; 0x88
   26044:	18ba      	adds	r2, r7, r2
   26046:	89d2      	ldrh	r2, [r2, #14]
   26048:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2604a:	23d5      	movs	r3, #213	; 0xd5
   2604c:	18fb      	adds	r3, r7, r3
   2604e:	781b      	ldrb	r3, [r3, #0]
   26050:	b25b      	sxtb	r3, r3
   26052:	4a88      	ldr	r2, [pc, #544]	; (26274 <m2m_ip_cb+0x540>)
   26054:	011b      	lsls	r3, r3, #4
   26056:	18d3      	adds	r3, r2, r3
   26058:	330c      	adds	r3, #12
   2605a:	2200      	movs	r2, #0
   2605c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2605e:	23d2      	movs	r3, #210	; 0xd2
   26060:	18fb      	adds	r3, r7, r3
   26062:	2288      	movs	r2, #136	; 0x88
   26064:	18ba      	adds	r2, r7, r2
   26066:	8912      	ldrh	r2, [r2, #8]
   26068:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   2606a:	23d0      	movs	r3, #208	; 0xd0
   2606c:	18fb      	adds	r3, r7, r3
   2606e:	2288      	movs	r2, #136	; 0x88
   26070:	18ba      	adds	r2, r7, r2
   26072:	8952      	ldrh	r2, [r2, #10]
   26074:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   26076:	2388      	movs	r3, #136	; 0x88
   26078:	18fb      	adds	r3, r7, r3
   2607a:	885a      	ldrh	r2, [r3, #2]
   2607c:	2370      	movs	r3, #112	; 0x70
   2607e:	18fb      	adds	r3, r7, r3
   26080:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   26082:	2388      	movs	r3, #136	; 0x88
   26084:	18fb      	adds	r3, r7, r3
   26086:	685a      	ldr	r2, [r3, #4]
   26088:	2370      	movs	r3, #112	; 0x70
   2608a:	18fb      	adds	r3, r7, r3
   2608c:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2608e:	23d5      	movs	r3, #213	; 0xd5
   26090:	18fb      	adds	r3, r7, r3
   26092:	781b      	ldrb	r3, [r3, #0]
   26094:	b25b      	sxtb	r3, r3
   26096:	4a77      	ldr	r2, [pc, #476]	; (26274 <m2m_ip_cb+0x540>)
   26098:	011b      	lsls	r3, r3, #4
   2609a:	18d3      	adds	r3, r2, r3
   2609c:	3306      	adds	r3, #6
   2609e:	881b      	ldrh	r3, [r3, #0]
   260a0:	b29b      	uxth	r3, r3
   260a2:	22d6      	movs	r2, #214	; 0xd6
   260a4:	18ba      	adds	r2, r7, r2
   260a6:	8812      	ldrh	r2, [r2, #0]
   260a8:	429a      	cmp	r2, r3
   260aa:	d148      	bne.n	2613e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   260ac:	23d2      	movs	r3, #210	; 0xd2
   260ae:	18fb      	adds	r3, r7, r3
   260b0:	2200      	movs	r2, #0
   260b2:	5e9b      	ldrsh	r3, [r3, r2]
   260b4:	2b00      	cmp	r3, #0
   260b6:	dd25      	ble.n	26104 <m2m_ip_cb+0x3d0>
   260b8:	23d2      	movs	r3, #210	; 0xd2
   260ba:	18fb      	adds	r3, r7, r3
   260bc:	2200      	movs	r2, #0
   260be:	5e9a      	ldrsh	r2, [r3, r2]
   260c0:	1d3b      	adds	r3, r7, #4
   260c2:	881b      	ldrh	r3, [r3, #0]
   260c4:	429a      	cmp	r2, r3
   260c6:	da1d      	bge.n	26104 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   260c8:	23d0      	movs	r3, #208	; 0xd0
   260ca:	18fb      	adds	r3, r7, r3
   260cc:	881b      	ldrh	r3, [r3, #0]
   260ce:	683a      	ldr	r2, [r7, #0]
   260d0:	18d3      	adds	r3, r2, r3
   260d2:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   260d4:	23d8      	movs	r3, #216	; 0xd8
   260d6:	18fb      	adds	r3, r7, r3
   260d8:	22d2      	movs	r2, #210	; 0xd2
   260da:	18ba      	adds	r2, r7, r2
   260dc:	8812      	ldrh	r2, [r2, #0]
   260de:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   260e0:	683c      	ldr	r4, [r7, #0]
   260e2:	23df      	movs	r3, #223	; 0xdf
   260e4:	18fb      	adds	r3, r7, r3
   260e6:	781a      	ldrb	r2, [r3, #0]
   260e8:	2370      	movs	r3, #112	; 0x70
   260ea:	18f9      	adds	r1, r7, r3
   260ec:	23d5      	movs	r3, #213	; 0xd5
   260ee:	18fb      	adds	r3, r7, r3
   260f0:	2000      	movs	r0, #0
   260f2:	5618      	ldrsb	r0, [r3, r0]
   260f4:	23d8      	movs	r3, #216	; 0xd8
   260f6:	18fb      	adds	r3, r7, r3
   260f8:	881b      	ldrh	r3, [r3, #0]
   260fa:	9300      	str	r3, [sp, #0]
   260fc:	0023      	movs	r3, r4
   260fe:	4c5e      	ldr	r4, [pc, #376]	; (26278 <m2m_ip_cb+0x544>)
   26100:	47a0      	blx	r4
	{
   26102:	e0ad      	b.n	26260 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   26104:	2370      	movs	r3, #112	; 0x70
   26106:	18fb      	adds	r3, r7, r3
   26108:	22d2      	movs	r2, #210	; 0xd2
   2610a:	18ba      	adds	r2, r7, r2
   2610c:	8812      	ldrh	r2, [r2, #0]
   2610e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   26110:	2370      	movs	r3, #112	; 0x70
   26112:	18fb      	adds	r3, r7, r3
   26114:	2200      	movs	r2, #0
   26116:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   26118:	4b58      	ldr	r3, [pc, #352]	; (2627c <m2m_ip_cb+0x548>)
   2611a:	681b      	ldr	r3, [r3, #0]
   2611c:	2b00      	cmp	r3, #0
   2611e:	d100      	bne.n	26122 <m2m_ip_cb+0x3ee>
   26120:	e09e      	b.n	26260 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   26122:	4b56      	ldr	r3, [pc, #344]	; (2627c <m2m_ip_cb+0x548>)
   26124:	681b      	ldr	r3, [r3, #0]
   26126:	2270      	movs	r2, #112	; 0x70
   26128:	18bc      	adds	r4, r7, r2
   2612a:	22df      	movs	r2, #223	; 0xdf
   2612c:	18ba      	adds	r2, r7, r2
   2612e:	7811      	ldrb	r1, [r2, #0]
   26130:	22d5      	movs	r2, #213	; 0xd5
   26132:	18ba      	adds	r2, r7, r2
   26134:	2000      	movs	r0, #0
   26136:	5610      	ldrsb	r0, [r2, r0]
   26138:	0022      	movs	r2, r4
   2613a:	4798      	blx	r3
	{
   2613c:	e090      	b.n	26260 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2613e:	23d8      	movs	r3, #216	; 0xd8
   26140:	18fa      	adds	r2, r7, r3
   26142:	1d3b      	adds	r3, r7, #4
   26144:	8812      	ldrh	r2, [r2, #0]
   26146:	881b      	ldrh	r3, [r3, #0]
   26148:	429a      	cmp	r2, r3
   2614a:	d300      	bcc.n	2614e <m2m_ip_cb+0x41a>
   2614c:	e088      	b.n	26260 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2614e:	2301      	movs	r3, #1
   26150:	2200      	movs	r2, #0
   26152:	2100      	movs	r1, #0
   26154:	2000      	movs	r0, #0
   26156:	4c46      	ldr	r4, [pc, #280]	; (26270 <m2m_ip_cb+0x53c>)
   26158:	47a0      	blx	r4
	{
   2615a:	e081      	b.n	26260 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   2615c:	1dfb      	adds	r3, r7, #7
   2615e:	781b      	ldrb	r3, [r3, #0]
   26160:	2b45      	cmp	r3, #69	; 0x45
   26162:	d007      	beq.n	26174 <m2m_ip_cb+0x440>
   26164:	1dfb      	adds	r3, r7, #7
   26166:	781b      	ldrb	r3, [r3, #0]
   26168:	2b47      	cmp	r3, #71	; 0x47
   2616a:	d003      	beq.n	26174 <m2m_ip_cb+0x440>
   2616c:	1dfb      	adds	r3, r7, #7
   2616e:	781b      	ldrb	r3, [r3, #0]
   26170:	2b4c      	cmp	r3, #76	; 0x4c
   26172:	d14c      	bne.n	2620e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   26174:	23de      	movs	r3, #222	; 0xde
   26176:	18fb      	adds	r3, r7, r3
   26178:	2207      	movs	r2, #7
   2617a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   2617c:	1dfb      	adds	r3, r7, #7
   2617e:	781b      	ldrb	r3, [r3, #0]
   26180:	2b47      	cmp	r3, #71	; 0x47
   26182:	d103      	bne.n	2618c <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   26184:	23de      	movs	r3, #222	; 0xde
   26186:	18fb      	adds	r3, r7, r3
   26188:	2208      	movs	r2, #8
   2618a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   2618c:	2364      	movs	r3, #100	; 0x64
   2618e:	18f9      	adds	r1, r7, r3
   26190:	6838      	ldr	r0, [r7, #0]
   26192:	2300      	movs	r3, #0
   26194:	2208      	movs	r2, #8
   26196:	4c36      	ldr	r4, [pc, #216]	; (26270 <m2m_ip_cb+0x53c>)
   26198:	47a0      	blx	r4
   2619a:	1e03      	subs	r3, r0, #0
   2619c:	d162      	bne.n	26264 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2619e:	23dc      	movs	r3, #220	; 0xdc
   261a0:	18fb      	adds	r3, r7, r3
   261a2:	2200      	movs	r2, #0
   261a4:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   261a6:	23db      	movs	r3, #219	; 0xdb
   261a8:	18fb      	adds	r3, r7, r3
   261aa:	2264      	movs	r2, #100	; 0x64
   261ac:	18ba      	adds	r2, r7, r2
   261ae:	7812      	ldrb	r2, [r2, #0]
   261b0:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   261b2:	23dc      	movs	r3, #220	; 0xdc
   261b4:	18fb      	adds	r3, r7, r3
   261b6:	2264      	movs	r2, #100	; 0x64
   261b8:	18ba      	adds	r2, r7, r2
   261ba:	8892      	ldrh	r2, [r2, #4]
   261bc:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   261be:	2364      	movs	r3, #100	; 0x64
   261c0:	18fb      	adds	r3, r7, r3
   261c2:	2202      	movs	r2, #2
   261c4:	5e9a      	ldrsh	r2, [r3, r2]
   261c6:	236e      	movs	r3, #110	; 0x6e
   261c8:	18fb      	adds	r3, r7, r3
   261ca:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   261cc:	23db      	movs	r3, #219	; 0xdb
   261ce:	18fb      	adds	r3, r7, r3
   261d0:	781b      	ldrb	r3, [r3, #0]
   261d2:	b25b      	sxtb	r3, r3
   261d4:	4a27      	ldr	r2, [pc, #156]	; (26274 <m2m_ip_cb+0x540>)
   261d6:	011b      	lsls	r3, r3, #4
   261d8:	18d3      	adds	r3, r2, r3
   261da:	3306      	adds	r3, #6
   261dc:	881b      	ldrh	r3, [r3, #0]
   261de:	b29b      	uxth	r3, r3
   261e0:	22dc      	movs	r2, #220	; 0xdc
   261e2:	18ba      	adds	r2, r7, r2
   261e4:	8812      	ldrh	r2, [r2, #0]
   261e6:	429a      	cmp	r2, r3
   261e8:	d13c      	bne.n	26264 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   261ea:	4b24      	ldr	r3, [pc, #144]	; (2627c <m2m_ip_cb+0x548>)
   261ec:	681b      	ldr	r3, [r3, #0]
   261ee:	2b00      	cmp	r3, #0
   261f0:	d038      	beq.n	26264 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   261f2:	4b22      	ldr	r3, [pc, #136]	; (2627c <m2m_ip_cb+0x548>)
   261f4:	681b      	ldr	r3, [r3, #0]
   261f6:	226e      	movs	r2, #110	; 0x6e
   261f8:	18bc      	adds	r4, r7, r2
   261fa:	22de      	movs	r2, #222	; 0xde
   261fc:	18ba      	adds	r2, r7, r2
   261fe:	7811      	ldrb	r1, [r2, #0]
   26200:	22db      	movs	r2, #219	; 0xdb
   26202:	18ba      	adds	r2, r7, r2
   26204:	2000      	movs	r0, #0
   26206:	5610      	ldrsb	r0, [r2, r0]
   26208:	0022      	movs	r2, r4
   2620a:	4798      	blx	r3
	{
   2620c:	e02a      	b.n	26264 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2620e:	1dfb      	adds	r3, r7, #7
   26210:	781b      	ldrb	r3, [r3, #0]
   26212:	2b52      	cmp	r3, #82	; 0x52
   26214:	d127      	bne.n	26266 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   26216:	2350      	movs	r3, #80	; 0x50
   26218:	18f9      	adds	r1, r7, r3
   2621a:	6838      	ldr	r0, [r7, #0]
   2621c:	2301      	movs	r3, #1
   2621e:	2214      	movs	r2, #20
   26220:	4c13      	ldr	r4, [pc, #76]	; (26270 <m2m_ip_cb+0x53c>)
   26222:	47a0      	blx	r4
   26224:	1e03      	subs	r3, r0, #0
   26226:	d11e      	bne.n	26266 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   26228:	2350      	movs	r3, #80	; 0x50
   2622a:	18fb      	adds	r3, r7, r3
   2622c:	685b      	ldr	r3, [r3, #4]
   2622e:	001a      	movs	r2, r3
   26230:	4b13      	ldr	r3, [pc, #76]	; (26280 <m2m_ip_cb+0x54c>)
   26232:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   26234:	4b12      	ldr	r3, [pc, #72]	; (26280 <m2m_ip_cb+0x54c>)
   26236:	681b      	ldr	r3, [r3, #0]
   26238:	2b00      	cmp	r3, #0
   2623a:	d014      	beq.n	26266 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   2623c:	4b10      	ldr	r3, [pc, #64]	; (26280 <m2m_ip_cb+0x54c>)
   2623e:	681c      	ldr	r4, [r3, #0]
   26240:	2350      	movs	r3, #80	; 0x50
   26242:	18fb      	adds	r3, r7, r3
   26244:	6818      	ldr	r0, [r3, #0]
   26246:	2350      	movs	r3, #80	; 0x50
   26248:	18fb      	adds	r3, r7, r3
   2624a:	6899      	ldr	r1, [r3, #8]
   2624c:	2350      	movs	r3, #80	; 0x50
   2624e:	18fb      	adds	r3, r7, r3
   26250:	7c1b      	ldrb	r3, [r3, #16]
   26252:	001a      	movs	r2, r3
   26254:	47a0      	blx	r4
}
   26256:	e006      	b.n	26266 <m2m_ip_cb+0x532>
	{
   26258:	46c0      	nop			; (mov r8, r8)
   2625a:	e004      	b.n	26266 <m2m_ip_cb+0x532>
	{
   2625c:	46c0      	nop			; (mov r8, r8)
   2625e:	e002      	b.n	26266 <m2m_ip_cb+0x532>
	{
   26260:	46c0      	nop			; (mov r8, r8)
   26262:	e000      	b.n	26266 <m2m_ip_cb+0x532>
	{
   26264:	46c0      	nop			; (mov r8, r8)
}
   26266:	46c0      	nop			; (mov r8, r8)
   26268:	46bd      	mov	sp, r7
   2626a:	b039      	add	sp, #228	; 0xe4
   2626c:	bd90      	pop	{r4, r7, pc}
   2626e:	46c0      	nop			; (mov r8, r8)
   26270:	00022609 	.word	0x00022609
   26274:	20005b94 	.word	0x20005b94
   26278:	00025b39 	.word	0x00025b39
   2627c:	20005c44 	.word	0x20005c44
   26280:	20005c48 	.word	0x20005c48

00026284 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   26284:	b580      	push	{r7, lr}
   26286:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   26288:	4b0c      	ldr	r3, [pc, #48]	; (262bc <socketInit+0x38>)
   2628a:	781b      	ldrb	r3, [r3, #0]
   2628c:	b2db      	uxtb	r3, r3
   2628e:	2b00      	cmp	r3, #0
   26290:	d110      	bne.n	262b4 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   26292:	4b0b      	ldr	r3, [pc, #44]	; (262c0 <socketInit+0x3c>)
   26294:	22b0      	movs	r2, #176	; 0xb0
   26296:	2100      	movs	r1, #0
   26298:	0018      	movs	r0, r3
   2629a:	4b0a      	ldr	r3, [pc, #40]	; (262c4 <socketInit+0x40>)
   2629c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2629e:	4b0a      	ldr	r3, [pc, #40]	; (262c8 <socketInit+0x44>)
   262a0:	0019      	movs	r1, r3
   262a2:	2002      	movs	r0, #2
   262a4:	4b09      	ldr	r3, [pc, #36]	; (262cc <socketInit+0x48>)
   262a6:	4798      	blx	r3
		gbSocketInit	= 1;
   262a8:	4b04      	ldr	r3, [pc, #16]	; (262bc <socketInit+0x38>)
   262aa:	2201      	movs	r2, #1
   262ac:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   262ae:	4b08      	ldr	r3, [pc, #32]	; (262d0 <socketInit+0x4c>)
   262b0:	2200      	movs	r2, #0
   262b2:	801a      	strh	r2, [r3, #0]
	}
}
   262b4:	46c0      	nop			; (mov r8, r8)
   262b6:	46bd      	mov	sp, r7
   262b8:	bd80      	pop	{r7, pc}
   262ba:	46c0      	nop			; (mov r8, r8)
   262bc:	200042b4 	.word	0x200042b4
   262c0:	20005b94 	.word	0x20005b94
   262c4:	00021a8d 	.word	0x00021a8d
   262c8:	00025d35 	.word	0x00025d35
   262cc:	00022789 	.word	0x00022789
   262d0:	200042b2 	.word	0x200042b2

000262d4 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   262d4:	b580      	push	{r7, lr}
   262d6:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   262d8:	4b0a      	ldr	r3, [pc, #40]	; (26304 <socketDeinit+0x30>)
   262da:	22b0      	movs	r2, #176	; 0xb0
   262dc:	2100      	movs	r1, #0
   262de:	0018      	movs	r0, r3
   262e0:	4b09      	ldr	r3, [pc, #36]	; (26308 <socketDeinit+0x34>)
   262e2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   262e4:	2100      	movs	r1, #0
   262e6:	2002      	movs	r0, #2
   262e8:	4b08      	ldr	r3, [pc, #32]	; (2630c <socketDeinit+0x38>)
   262ea:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   262ec:	4b08      	ldr	r3, [pc, #32]	; (26310 <socketDeinit+0x3c>)
   262ee:	2200      	movs	r2, #0
   262f0:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   262f2:	4b08      	ldr	r3, [pc, #32]	; (26314 <socketDeinit+0x40>)
   262f4:	2200      	movs	r2, #0
   262f6:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   262f8:	4b07      	ldr	r3, [pc, #28]	; (26318 <socketDeinit+0x44>)
   262fa:	2200      	movs	r2, #0
   262fc:	701a      	strb	r2, [r3, #0]
}
   262fe:	46c0      	nop			; (mov r8, r8)
   26300:	46bd      	mov	sp, r7
   26302:	bd80      	pop	{r7, pc}
   26304:	20005b94 	.word	0x20005b94
   26308:	00021a8d 	.word	0x00021a8d
   2630c:	00022789 	.word	0x00022789
   26310:	20005c44 	.word	0x20005c44
   26314:	20005c4c 	.word	0x20005c4c
   26318:	200042b4 	.word	0x200042b4

0002631c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   2631c:	b580      	push	{r7, lr}
   2631e:	b082      	sub	sp, #8
   26320:	af00      	add	r7, sp, #0
   26322:	6078      	str	r0, [r7, #4]
   26324:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   26326:	4b05      	ldr	r3, [pc, #20]	; (2633c <registerSocketCallback+0x20>)
   26328:	687a      	ldr	r2, [r7, #4]
   2632a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   2632c:	4b04      	ldr	r3, [pc, #16]	; (26340 <registerSocketCallback+0x24>)
   2632e:	683a      	ldr	r2, [r7, #0]
   26330:	601a      	str	r2, [r3, #0]
}
   26332:	46c0      	nop			; (mov r8, r8)
   26334:	46bd      	mov	sp, r7
   26336:	b002      	add	sp, #8
   26338:	bd80      	pop	{r7, pc}
   2633a:	46c0      	nop			; (mov r8, r8)
   2633c:	20005c44 	.word	0x20005c44
   26340:	20005c4c 	.word	0x20005c4c

00026344 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   26344:	b590      	push	{r4, r7, lr}
   26346:	b08d      	sub	sp, #52	; 0x34
   26348:	af04      	add	r7, sp, #16
   2634a:	0004      	movs	r4, r0
   2634c:	0008      	movs	r0, r1
   2634e:	0011      	movs	r1, r2
   26350:	1dbb      	adds	r3, r7, #6
   26352:	1c22      	adds	r2, r4, #0
   26354:	801a      	strh	r2, [r3, #0]
   26356:	1d7b      	adds	r3, r7, #5
   26358:	1c02      	adds	r2, r0, #0
   2635a:	701a      	strb	r2, [r3, #0]
   2635c:	1d3b      	adds	r3, r7, #4
   2635e:	1c0a      	adds	r2, r1, #0
   26360:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   26362:	231f      	movs	r3, #31
   26364:	18fb      	adds	r3, r7, r3
   26366:	22ff      	movs	r2, #255	; 0xff
   26368:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   2636a:	1dbb      	adds	r3, r7, #6
   2636c:	881b      	ldrh	r3, [r3, #0]
   2636e:	2b02      	cmp	r3, #2
   26370:	d000      	beq.n	26374 <socket+0x30>
   26372:	e0ce      	b.n	26512 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   26374:	1d7b      	adds	r3, r7, #5
   26376:	781b      	ldrb	r3, [r3, #0]
   26378:	2b01      	cmp	r3, #1
   2637a:	d135      	bne.n	263e8 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2637c:	231e      	movs	r3, #30
   2637e:	18fb      	adds	r3, r7, r3
   26380:	2200      	movs	r2, #0
   26382:	701a      	strb	r2, [r3, #0]
   26384:	e02a      	b.n	263dc <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   26386:	2317      	movs	r3, #23
   26388:	18fb      	adds	r3, r7, r3
   2638a:	4a66      	ldr	r2, [pc, #408]	; (26524 <socket+0x1e0>)
   2638c:	7812      	ldrb	r2, [r2, #0]
   2638e:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   26390:	4b64      	ldr	r3, [pc, #400]	; (26524 <socket+0x1e0>)
   26392:	781b      	ldrb	r3, [r3, #0]
   26394:	b2db      	uxtb	r3, r3
   26396:	011a      	lsls	r2, r3, #4
   26398:	4b63      	ldr	r3, [pc, #396]	; (26528 <socket+0x1e4>)
   2639a:	18d3      	adds	r3, r2, r3
   2639c:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2639e:	4b61      	ldr	r3, [pc, #388]	; (26524 <socket+0x1e0>)
   263a0:	781b      	ldrb	r3, [r3, #0]
   263a2:	b2db      	uxtb	r3, r3
   263a4:	1c5a      	adds	r2, r3, #1
   263a6:	4b61      	ldr	r3, [pc, #388]	; (2652c <socket+0x1e8>)
   263a8:	2107      	movs	r1, #7
   263aa:	0010      	movs	r0, r2
   263ac:	4798      	blx	r3
   263ae:	000b      	movs	r3, r1
   263b0:	b2da      	uxtb	r2, r3
   263b2:	4b5c      	ldr	r3, [pc, #368]	; (26524 <socket+0x1e0>)
   263b4:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   263b6:	69bb      	ldr	r3, [r7, #24]
   263b8:	7a9b      	ldrb	r3, [r3, #10]
   263ba:	b2db      	uxtb	r3, r3
   263bc:	2b00      	cmp	r3, #0
   263be:	d106      	bne.n	263ce <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   263c0:	231f      	movs	r3, #31
   263c2:	18fb      	adds	r3, r7, r3
   263c4:	2217      	movs	r2, #23
   263c6:	18ba      	adds	r2, r7, r2
   263c8:	7812      	ldrb	r2, [r2, #0]
   263ca:	701a      	strb	r2, [r3, #0]
					break;
   263cc:	e04c      	b.n	26468 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   263ce:	231e      	movs	r3, #30
   263d0:	18fb      	adds	r3, r7, r3
   263d2:	781a      	ldrb	r2, [r3, #0]
   263d4:	231e      	movs	r3, #30
   263d6:	18fb      	adds	r3, r7, r3
   263d8:	3201      	adds	r2, #1
   263da:	701a      	strb	r2, [r3, #0]
   263dc:	231e      	movs	r3, #30
   263de:	18fb      	adds	r3, r7, r3
   263e0:	781b      	ldrb	r3, [r3, #0]
   263e2:	2b06      	cmp	r3, #6
   263e4:	d9cf      	bls.n	26386 <socket+0x42>
   263e6:	e03f      	b.n	26468 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   263e8:	1d7b      	adds	r3, r7, #5
   263ea:	781b      	ldrb	r3, [r3, #0]
   263ec:	2b02      	cmp	r3, #2
   263ee:	d13b      	bne.n	26468 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   263f0:	4b4f      	ldr	r3, [pc, #316]	; (26530 <socket+0x1ec>)
   263f2:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   263f4:	231e      	movs	r3, #30
   263f6:	18fb      	adds	r3, r7, r3
   263f8:	2200      	movs	r2, #0
   263fa:	701a      	strb	r2, [r3, #0]
   263fc:	e02f      	b.n	2645e <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   263fe:	2317      	movs	r3, #23
   26400:	18fb      	adds	r3, r7, r3
   26402:	4a4c      	ldr	r2, [pc, #304]	; (26534 <socket+0x1f0>)
   26404:	7812      	ldrb	r2, [r2, #0]
   26406:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   26408:	4b4a      	ldr	r3, [pc, #296]	; (26534 <socket+0x1f0>)
   2640a:	781b      	ldrb	r3, [r3, #0]
   2640c:	b2db      	uxtb	r3, r3
   2640e:	011b      	lsls	r3, r3, #4
   26410:	693a      	ldr	r2, [r7, #16]
   26412:	18d3      	adds	r3, r2, r3
   26414:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   26416:	4b47      	ldr	r3, [pc, #284]	; (26534 <socket+0x1f0>)
   26418:	781b      	ldrb	r3, [r3, #0]
   2641a:	b2db      	uxtb	r3, r3
   2641c:	3301      	adds	r3, #1
   2641e:	4a46      	ldr	r2, [pc, #280]	; (26538 <socket+0x1f4>)
   26420:	4013      	ands	r3, r2
   26422:	d504      	bpl.n	2642e <socket+0xea>
   26424:	3b01      	subs	r3, #1
   26426:	2204      	movs	r2, #4
   26428:	4252      	negs	r2, r2
   2642a:	4313      	orrs	r3, r2
   2642c:	3301      	adds	r3, #1
   2642e:	b2da      	uxtb	r2, r3
   26430:	4b40      	ldr	r3, [pc, #256]	; (26534 <socket+0x1f0>)
   26432:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26434:	69bb      	ldr	r3, [r7, #24]
   26436:	7a9b      	ldrb	r3, [r3, #10]
   26438:	b2db      	uxtb	r3, r3
   2643a:	2b00      	cmp	r3, #0
   2643c:	d108      	bne.n	26450 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2643e:	2317      	movs	r3, #23
   26440:	18fb      	adds	r3, r7, r3
   26442:	781b      	ldrb	r3, [r3, #0]
   26444:	3307      	adds	r3, #7
   26446:	b2da      	uxtb	r2, r3
   26448:	231f      	movs	r3, #31
   2644a:	18fb      	adds	r3, r7, r3
   2644c:	701a      	strb	r2, [r3, #0]
					break;
   2644e:	e00b      	b.n	26468 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   26450:	231e      	movs	r3, #30
   26452:	18fb      	adds	r3, r7, r3
   26454:	781a      	ldrb	r2, [r3, #0]
   26456:	231e      	movs	r3, #30
   26458:	18fb      	adds	r3, r7, r3
   2645a:	3201      	adds	r2, #1
   2645c:	701a      	strb	r2, [r3, #0]
   2645e:	231e      	movs	r3, #30
   26460:	18fb      	adds	r3, r7, r3
   26462:	781b      	ldrb	r3, [r3, #0]
   26464:	2b03      	cmp	r3, #3
   26466:	d9ca      	bls.n	263fe <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   26468:	231f      	movs	r3, #31
   2646a:	18fb      	adds	r3, r7, r3
   2646c:	781b      	ldrb	r3, [r3, #0]
   2646e:	2b7f      	cmp	r3, #127	; 0x7f
   26470:	d84f      	bhi.n	26512 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   26472:	69bb      	ldr	r3, [r7, #24]
   26474:	2210      	movs	r2, #16
   26476:	2100      	movs	r1, #0
   26478:	0018      	movs	r0, r3
   2647a:	4b30      	ldr	r3, [pc, #192]	; (2653c <socket+0x1f8>)
   2647c:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2647e:	69bb      	ldr	r3, [r7, #24]
   26480:	2201      	movs	r2, #1
   26482:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   26484:	4b2e      	ldr	r3, [pc, #184]	; (26540 <socket+0x1fc>)
   26486:	881b      	ldrh	r3, [r3, #0]
   26488:	b29b      	uxth	r3, r3
   2648a:	3301      	adds	r3, #1
   2648c:	b29a      	uxth	r2, r3
   2648e:	4b2c      	ldr	r3, [pc, #176]	; (26540 <socket+0x1fc>)
   26490:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   26492:	4b2b      	ldr	r3, [pc, #172]	; (26540 <socket+0x1fc>)
   26494:	881b      	ldrh	r3, [r3, #0]
   26496:	b29b      	uxth	r3, r3
   26498:	2b00      	cmp	r3, #0
   2649a:	d106      	bne.n	264aa <socket+0x166>
				++gu16SessionID;
   2649c:	4b28      	ldr	r3, [pc, #160]	; (26540 <socket+0x1fc>)
   2649e:	881b      	ldrh	r3, [r3, #0]
   264a0:	b29b      	uxth	r3, r3
   264a2:	3301      	adds	r3, #1
   264a4:	b29a      	uxth	r2, r3
   264a6:	4b26      	ldr	r3, [pc, #152]	; (26540 <socket+0x1fc>)
   264a8:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   264aa:	4b25      	ldr	r3, [pc, #148]	; (26540 <socket+0x1fc>)
   264ac:	881b      	ldrh	r3, [r3, #0]
   264ae:	b29a      	uxth	r2, r3
   264b0:	69bb      	ldr	r3, [r7, #24]
   264b2:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   264b4:	4b23      	ldr	r3, [pc, #140]	; (26544 <socket+0x200>)
   264b6:	0018      	movs	r0, r3
   264b8:	4b23      	ldr	r3, [pc, #140]	; (26548 <socket+0x204>)
   264ba:	4798      	blx	r3
   264bc:	231f      	movs	r3, #31
   264be:	18fb      	adds	r3, r7, r3
   264c0:	2100      	movs	r1, #0
   264c2:	5659      	ldrsb	r1, [r3, r1]
   264c4:	4b1e      	ldr	r3, [pc, #120]	; (26540 <socket+0x1fc>)
   264c6:	881b      	ldrh	r3, [r3, #0]
   264c8:	b29b      	uxth	r3, r3
   264ca:	001a      	movs	r2, r3
   264cc:	4b1f      	ldr	r3, [pc, #124]	; (2654c <socket+0x208>)
   264ce:	0018      	movs	r0, r3
   264d0:	4b1d      	ldr	r3, [pc, #116]	; (26548 <socket+0x204>)
   264d2:	4798      	blx	r3
   264d4:	4b1e      	ldr	r3, [pc, #120]	; (26550 <socket+0x20c>)
   264d6:	0018      	movs	r0, r3
   264d8:	4b1b      	ldr	r3, [pc, #108]	; (26548 <socket+0x204>)
   264da:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   264dc:	1d3b      	adds	r3, r7, #4
   264de:	781b      	ldrb	r3, [r3, #0]
   264e0:	2201      	movs	r2, #1
   264e2:	4013      	ands	r3, r2
   264e4:	d015      	beq.n	26512 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   264e6:	230c      	movs	r3, #12
   264e8:	18fb      	adds	r3, r7, r3
   264ea:	221f      	movs	r2, #31
   264ec:	18ba      	adds	r2, r7, r2
   264ee:	7812      	ldrb	r2, [r2, #0]
   264f0:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   264f2:	69bb      	ldr	r3, [r7, #24]
   264f4:	2221      	movs	r2, #33	; 0x21
   264f6:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   264f8:	230c      	movs	r3, #12
   264fa:	18fa      	adds	r2, r7, r3
   264fc:	2300      	movs	r3, #0
   264fe:	9302      	str	r3, [sp, #8]
   26500:	2300      	movs	r3, #0
   26502:	9301      	str	r3, [sp, #4]
   26504:	2300      	movs	r3, #0
   26506:	9300      	str	r3, [sp, #0]
   26508:	2304      	movs	r3, #4
   2650a:	2150      	movs	r1, #80	; 0x50
   2650c:	2002      	movs	r0, #2
   2650e:	4c11      	ldr	r4, [pc, #68]	; (26554 <socket+0x210>)
   26510:	47a0      	blx	r4
			}
		}
	}
	return sock;
   26512:	231f      	movs	r3, #31
   26514:	18fb      	adds	r3, r7, r3
   26516:	781b      	ldrb	r3, [r3, #0]
   26518:	b25b      	sxtb	r3, r3
}
   2651a:	0018      	movs	r0, r3
   2651c:	46bd      	mov	sp, r7
   2651e:	b009      	add	sp, #36	; 0x24
   26520:	bd90      	pop	{r4, r7, pc}
   26522:	46c0      	nop			; (mov r8, r8)
   26524:	200042b5 	.word	0x200042b5
   26528:	20005b94 	.word	0x20005b94
   2652c:	00033a85 	.word	0x00033a85
   26530:	20005c04 	.word	0x20005c04
   26534:	200042b6 	.word	0x200042b6
   26538:	80000003 	.word	0x80000003
   2653c:	00021a8d 	.word	0x00021a8d
   26540:	200042b2 	.word	0x200042b2
   26544:	0003a330 	.word	0x0003a330
   26548:	0001ed59 	.word	0x0001ed59
   2654c:	0003a354 	.word	0x0003a354
   26550:	0003a350 	.word	0x0003a350
   26554:	00021ced 	.word	0x00021ced

00026558 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   26558:	b5b0      	push	{r4, r5, r7, lr}
   2655a:	b08a      	sub	sp, #40	; 0x28
   2655c:	af04      	add	r7, sp, #16
   2655e:	6039      	str	r1, [r7, #0]
   26560:	0011      	movs	r1, r2
   26562:	1dfb      	adds	r3, r7, #7
   26564:	1c02      	adds	r2, r0, #0
   26566:	701a      	strb	r2, [r3, #0]
   26568:	1dbb      	adds	r3, r7, #6
   2656a:	1c0a      	adds	r2, r1, #0
   2656c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2656e:	2317      	movs	r3, #23
   26570:	18fb      	adds	r3, r7, r3
   26572:	22fa      	movs	r2, #250	; 0xfa
   26574:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   26576:	1dfb      	adds	r3, r7, #7
   26578:	781b      	ldrb	r3, [r3, #0]
   2657a:	2b7f      	cmp	r3, #127	; 0x7f
   2657c:	d867      	bhi.n	2664e <connect+0xf6>
   2657e:	683b      	ldr	r3, [r7, #0]
   26580:	2b00      	cmp	r3, #0
   26582:	d064      	beq.n	2664e <connect+0xf6>
   26584:	1dfb      	adds	r3, r7, #7
   26586:	781b      	ldrb	r3, [r3, #0]
   26588:	b25b      	sxtb	r3, r3
   2658a:	4a35      	ldr	r2, [pc, #212]	; (26660 <connect+0x108>)
   2658c:	011b      	lsls	r3, r3, #4
   2658e:	18d3      	adds	r3, r2, r3
   26590:	330a      	adds	r3, #10
   26592:	781b      	ldrb	r3, [r3, #0]
   26594:	b2db      	uxtb	r3, r3
   26596:	2b01      	cmp	r3, #1
   26598:	d159      	bne.n	2664e <connect+0xf6>
   2659a:	1dbb      	adds	r3, r7, #6
   2659c:	781b      	ldrb	r3, [r3, #0]
   2659e:	2b00      	cmp	r3, #0
   265a0:	d055      	beq.n	2664e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   265a2:	2316      	movs	r3, #22
   265a4:	18fb      	adds	r3, r7, r3
   265a6:	2244      	movs	r2, #68	; 0x44
   265a8:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   265aa:	1dfb      	adds	r3, r7, #7
   265ac:	781b      	ldrb	r3, [r3, #0]
   265ae:	b25b      	sxtb	r3, r3
   265b0:	4a2b      	ldr	r2, [pc, #172]	; (26660 <connect+0x108>)
   265b2:	011b      	lsls	r3, r3, #4
   265b4:	18d3      	adds	r3, r2, r3
   265b6:	330b      	adds	r3, #11
   265b8:	781b      	ldrb	r3, [r3, #0]
   265ba:	b2db      	uxtb	r3, r3
   265bc:	001a      	movs	r2, r3
   265be:	2301      	movs	r3, #1
   265c0:	4013      	ands	r3, r2
   265c2:	d00f      	beq.n	265e4 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   265c4:	2316      	movs	r3, #22
   265c6:	18fb      	adds	r3, r7, r3
   265c8:	224b      	movs	r2, #75	; 0x4b
   265ca:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   265cc:	1dfb      	adds	r3, r7, #7
   265ce:	781b      	ldrb	r3, [r3, #0]
   265d0:	b25b      	sxtb	r3, r3
   265d2:	4a23      	ldr	r2, [pc, #140]	; (26660 <connect+0x108>)
   265d4:	011b      	lsls	r3, r3, #4
   265d6:	18d3      	adds	r3, r2, r3
   265d8:	330b      	adds	r3, #11
   265da:	781b      	ldrb	r3, [r3, #0]
   265dc:	b2da      	uxtb	r2, r3
   265de:	2308      	movs	r3, #8
   265e0:	18fb      	adds	r3, r7, r3
   265e2:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   265e4:	2308      	movs	r3, #8
   265e6:	18fb      	adds	r3, r7, r3
   265e8:	1dfa      	adds	r2, r7, #7
   265ea:	7812      	ldrb	r2, [r2, #0]
   265ec:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   265ee:	6839      	ldr	r1, [r7, #0]
   265f0:	2308      	movs	r3, #8
   265f2:	18fb      	adds	r3, r7, r3
   265f4:	2208      	movs	r2, #8
   265f6:	0018      	movs	r0, r3
   265f8:	4b1a      	ldr	r3, [pc, #104]	; (26664 <connect+0x10c>)
   265fa:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   265fc:	1dfb      	adds	r3, r7, #7
   265fe:	781b      	ldrb	r3, [r3, #0]
   26600:	b25b      	sxtb	r3, r3
   26602:	4a17      	ldr	r2, [pc, #92]	; (26660 <connect+0x108>)
   26604:	011b      	lsls	r3, r3, #4
   26606:	18d3      	adds	r3, r2, r3
   26608:	3306      	adds	r3, #6
   2660a:	881b      	ldrh	r3, [r3, #0]
   2660c:	b29a      	uxth	r2, r3
   2660e:	2308      	movs	r3, #8
   26610:	18fb      	adds	r3, r7, r3
   26612:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   26614:	2317      	movs	r3, #23
   26616:	18fc      	adds	r4, r7, r3
   26618:	2308      	movs	r3, #8
   2661a:	18fa      	adds	r2, r7, r3
   2661c:	2316      	movs	r3, #22
   2661e:	18fb      	adds	r3, r7, r3
   26620:	7819      	ldrb	r1, [r3, #0]
   26622:	2300      	movs	r3, #0
   26624:	9302      	str	r3, [sp, #8]
   26626:	2300      	movs	r3, #0
   26628:	9301      	str	r3, [sp, #4]
   2662a:	2300      	movs	r3, #0
   2662c:	9300      	str	r3, [sp, #0]
   2662e:	230c      	movs	r3, #12
   26630:	2002      	movs	r0, #2
   26632:	4d0d      	ldr	r5, [pc, #52]	; (26668 <connect+0x110>)
   26634:	47a8      	blx	r5
   26636:	0003      	movs	r3, r0
   26638:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   2663a:	2317      	movs	r3, #23
   2663c:	18fb      	adds	r3, r7, r3
   2663e:	781b      	ldrb	r3, [r3, #0]
   26640:	b25b      	sxtb	r3, r3
   26642:	2b00      	cmp	r3, #0
   26644:	d003      	beq.n	2664e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   26646:	2317      	movs	r3, #23
   26648:	18fb      	adds	r3, r7, r3
   2664a:	22f7      	movs	r2, #247	; 0xf7
   2664c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2664e:	2317      	movs	r3, #23
   26650:	18fb      	adds	r3, r7, r3
   26652:	781b      	ldrb	r3, [r3, #0]
   26654:	b25b      	sxtb	r3, r3
}
   26656:	0018      	movs	r0, r3
   26658:	46bd      	mov	sp, r7
   2665a:	b006      	add	sp, #24
   2665c:	bdb0      	pop	{r4, r5, r7, pc}
   2665e:	46c0      	nop			; (mov r8, r8)
   26660:	20005b94 	.word	0x20005b94
   26664:	00021a51 	.word	0x00021a51
   26668:	00021ced 	.word	0x00021ced

0002666c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   2666c:	b590      	push	{r4, r7, lr}
   2666e:	b08f      	sub	sp, #60	; 0x3c
   26670:	af04      	add	r7, sp, #16
   26672:	0004      	movs	r4, r0
   26674:	60b9      	str	r1, [r7, #8]
   26676:	0010      	movs	r0, r2
   26678:	0019      	movs	r1, r3
   2667a:	230f      	movs	r3, #15
   2667c:	18fb      	adds	r3, r7, r3
   2667e:	1c22      	adds	r2, r4, #0
   26680:	701a      	strb	r2, [r3, #0]
   26682:	230c      	movs	r3, #12
   26684:	18fb      	adds	r3, r7, r3
   26686:	1c02      	adds	r2, r0, #0
   26688:	801a      	strh	r2, [r3, #0]
   2668a:	1dbb      	adds	r3, r7, #6
   2668c:	1c0a      	adds	r2, r1, #0
   2668e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   26690:	2326      	movs	r3, #38	; 0x26
   26692:	18fb      	adds	r3, r7, r3
   26694:	2206      	movs	r2, #6
   26696:	4252      	negs	r2, r2
   26698:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   2669a:	230f      	movs	r3, #15
   2669c:	18fb      	adds	r3, r7, r3
   2669e:	781b      	ldrb	r3, [r3, #0]
   266a0:	2b7f      	cmp	r3, #127	; 0x7f
   266a2:	d900      	bls.n	266a6 <send+0x3a>
   266a4:	e087      	b.n	267b6 <send+0x14a>
   266a6:	68bb      	ldr	r3, [r7, #8]
   266a8:	2b00      	cmp	r3, #0
   266aa:	d100      	bne.n	266ae <send+0x42>
   266ac:	e083      	b.n	267b6 <send+0x14a>
   266ae:	230c      	movs	r3, #12
   266b0:	18fb      	adds	r3, r7, r3
   266b2:	881a      	ldrh	r2, [r3, #0]
   266b4:	23af      	movs	r3, #175	; 0xaf
   266b6:	00db      	lsls	r3, r3, #3
   266b8:	429a      	cmp	r2, r3
   266ba:	d900      	bls.n	266be <send+0x52>
   266bc:	e07b      	b.n	267b6 <send+0x14a>
   266be:	230f      	movs	r3, #15
   266c0:	18fb      	adds	r3, r7, r3
   266c2:	781b      	ldrb	r3, [r3, #0]
   266c4:	b25b      	sxtb	r3, r3
   266c6:	4a40      	ldr	r2, [pc, #256]	; (267c8 <send+0x15c>)
   266c8:	011b      	lsls	r3, r3, #4
   266ca:	18d3      	adds	r3, r2, r3
   266cc:	330a      	adds	r3, #10
   266ce:	781b      	ldrb	r3, [r3, #0]
   266d0:	b2db      	uxtb	r3, r3
   266d2:	2b01      	cmp	r3, #1
   266d4:	d16f      	bne.n	267b6 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   266d6:	2323      	movs	r3, #35	; 0x23
   266d8:	18fb      	adds	r3, r7, r3
   266da:	2245      	movs	r2, #69	; 0x45
   266dc:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   266de:	2324      	movs	r3, #36	; 0x24
   266e0:	18fb      	adds	r3, r7, r3
   266e2:	2250      	movs	r2, #80	; 0x50
   266e4:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   266e6:	2310      	movs	r3, #16
   266e8:	18fb      	adds	r3, r7, r3
   266ea:	220f      	movs	r2, #15
   266ec:	18ba      	adds	r2, r7, r2
   266ee:	7812      	ldrb	r2, [r2, #0]
   266f0:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   266f2:	2310      	movs	r3, #16
   266f4:	18fb      	adds	r3, r7, r3
   266f6:	220c      	movs	r2, #12
   266f8:	18ba      	adds	r2, r7, r2
   266fa:	8812      	ldrh	r2, [r2, #0]
   266fc:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   266fe:	230f      	movs	r3, #15
   26700:	18fb      	adds	r3, r7, r3
   26702:	781b      	ldrb	r3, [r3, #0]
   26704:	b25b      	sxtb	r3, r3
   26706:	4a30      	ldr	r2, [pc, #192]	; (267c8 <send+0x15c>)
   26708:	011b      	lsls	r3, r3, #4
   2670a:	18d3      	adds	r3, r2, r3
   2670c:	3306      	adds	r3, #6
   2670e:	881b      	ldrh	r3, [r3, #0]
   26710:	b29a      	uxth	r2, r3
   26712:	2310      	movs	r3, #16
   26714:	18fb      	adds	r3, r7, r3
   26716:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   26718:	230f      	movs	r3, #15
   2671a:	18fb      	adds	r3, r7, r3
   2671c:	781b      	ldrb	r3, [r3, #0]
   2671e:	b25b      	sxtb	r3, r3
   26720:	2b06      	cmp	r3, #6
   26722:	dd03      	ble.n	2672c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   26724:	2324      	movs	r3, #36	; 0x24
   26726:	18fb      	adds	r3, r7, r3
   26728:	2244      	movs	r2, #68	; 0x44
   2672a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2672c:	230f      	movs	r3, #15
   2672e:	18fb      	adds	r3, r7, r3
   26730:	781b      	ldrb	r3, [r3, #0]
   26732:	b25b      	sxtb	r3, r3
   26734:	4a24      	ldr	r2, [pc, #144]	; (267c8 <send+0x15c>)
   26736:	011b      	lsls	r3, r3, #4
   26738:	18d3      	adds	r3, r2, r3
   2673a:	330b      	adds	r3, #11
   2673c:	781b      	ldrb	r3, [r3, #0]
   2673e:	b2db      	uxtb	r3, r3
   26740:	001a      	movs	r2, r3
   26742:	2301      	movs	r3, #1
   26744:	4013      	ands	r3, r2
   26746:	d00f      	beq.n	26768 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   26748:	2323      	movs	r3, #35	; 0x23
   2674a:	18fb      	adds	r3, r7, r3
   2674c:	224c      	movs	r2, #76	; 0x4c
   2674e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   26750:	230f      	movs	r3, #15
   26752:	18fb      	adds	r3, r7, r3
   26754:	2200      	movs	r2, #0
   26756:	569a      	ldrsb	r2, [r3, r2]
   26758:	2324      	movs	r3, #36	; 0x24
   2675a:	18fb      	adds	r3, r7, r3
   2675c:	491a      	ldr	r1, [pc, #104]	; (267c8 <send+0x15c>)
   2675e:	0112      	lsls	r2, r2, #4
   26760:	188a      	adds	r2, r1, r2
   26762:	3208      	adds	r2, #8
   26764:	8812      	ldrh	r2, [r2, #0]
   26766:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   26768:	2323      	movs	r3, #35	; 0x23
   2676a:	18fb      	adds	r3, r7, r3
   2676c:	781b      	ldrb	r3, [r3, #0]
   2676e:	2280      	movs	r2, #128	; 0x80
   26770:	4252      	negs	r2, r2
   26772:	4313      	orrs	r3, r2
   26774:	b2d9      	uxtb	r1, r3
   26776:	2310      	movs	r3, #16
   26778:	18fa      	adds	r2, r7, r3
   2677a:	2324      	movs	r3, #36	; 0x24
   2677c:	18fb      	adds	r3, r7, r3
   2677e:	881b      	ldrh	r3, [r3, #0]
   26780:	9302      	str	r3, [sp, #8]
   26782:	230c      	movs	r3, #12
   26784:	18fb      	adds	r3, r7, r3
   26786:	881b      	ldrh	r3, [r3, #0]
   26788:	9301      	str	r3, [sp, #4]
   2678a:	68bb      	ldr	r3, [r7, #8]
   2678c:	9300      	str	r3, [sp, #0]
   2678e:	2310      	movs	r3, #16
   26790:	2002      	movs	r0, #2
   26792:	4c0e      	ldr	r4, [pc, #56]	; (267cc <send+0x160>)
   26794:	47a0      	blx	r4
   26796:	0003      	movs	r3, r0
   26798:	001a      	movs	r2, r3
   2679a:	2326      	movs	r3, #38	; 0x26
   2679c:	18fb      	adds	r3, r7, r3
   2679e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   267a0:	2326      	movs	r3, #38	; 0x26
   267a2:	18fb      	adds	r3, r7, r3
   267a4:	2200      	movs	r2, #0
   267a6:	5e9b      	ldrsh	r3, [r3, r2]
   267a8:	2b00      	cmp	r3, #0
   267aa:	d004      	beq.n	267b6 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   267ac:	2326      	movs	r3, #38	; 0x26
   267ae:	18fb      	adds	r3, r7, r3
   267b0:	220e      	movs	r2, #14
   267b2:	4252      	negs	r2, r2
   267b4:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   267b6:	2326      	movs	r3, #38	; 0x26
   267b8:	18fb      	adds	r3, r7, r3
   267ba:	2200      	movs	r2, #0
   267bc:	5e9b      	ldrsh	r3, [r3, r2]
}
   267be:	0018      	movs	r0, r3
   267c0:	46bd      	mov	sp, r7
   267c2:	b00b      	add	sp, #44	; 0x2c
   267c4:	bd90      	pop	{r4, r7, pc}
   267c6:	46c0      	nop			; (mov r8, r8)
   267c8:	20005b94 	.word	0x20005b94
   267cc:	00021ced 	.word	0x00021ced

000267d0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   267d0:	b590      	push	{r4, r7, lr}
   267d2:	b08d      	sub	sp, #52	; 0x34
   267d4:	af04      	add	r7, sp, #16
   267d6:	60b9      	str	r1, [r7, #8]
   267d8:	0011      	movs	r1, r2
   267da:	607b      	str	r3, [r7, #4]
   267dc:	230f      	movs	r3, #15
   267de:	18fb      	adds	r3, r7, r3
   267e0:	1c02      	adds	r2, r0, #0
   267e2:	701a      	strb	r2, [r3, #0]
   267e4:	230c      	movs	r3, #12
   267e6:	18fb      	adds	r3, r7, r3
   267e8:	1c0a      	adds	r2, r1, #0
   267ea:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   267ec:	231e      	movs	r3, #30
   267ee:	18fb      	adds	r3, r7, r3
   267f0:	2206      	movs	r2, #6
   267f2:	4252      	negs	r2, r2
   267f4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   267f6:	230f      	movs	r3, #15
   267f8:	18fb      	adds	r3, r7, r3
   267fa:	781b      	ldrb	r3, [r3, #0]
   267fc:	2b7f      	cmp	r3, #127	; 0x7f
   267fe:	d900      	bls.n	26802 <recv+0x32>
   26800:	e099      	b.n	26936 <recv+0x166>
   26802:	68bb      	ldr	r3, [r7, #8]
   26804:	2b00      	cmp	r3, #0
   26806:	d100      	bne.n	2680a <recv+0x3a>
   26808:	e095      	b.n	26936 <recv+0x166>
   2680a:	230c      	movs	r3, #12
   2680c:	18fb      	adds	r3, r7, r3
   2680e:	881b      	ldrh	r3, [r3, #0]
   26810:	2b00      	cmp	r3, #0
   26812:	d100      	bne.n	26816 <recv+0x46>
   26814:	e08f      	b.n	26936 <recv+0x166>
   26816:	230f      	movs	r3, #15
   26818:	18fb      	adds	r3, r7, r3
   2681a:	781b      	ldrb	r3, [r3, #0]
   2681c:	b25b      	sxtb	r3, r3
   2681e:	4a4a      	ldr	r2, [pc, #296]	; (26948 <recv+0x178>)
   26820:	011b      	lsls	r3, r3, #4
   26822:	18d3      	adds	r3, r2, r3
   26824:	330a      	adds	r3, #10
   26826:	781b      	ldrb	r3, [r3, #0]
   26828:	b2db      	uxtb	r3, r3
   2682a:	2b01      	cmp	r3, #1
   2682c:	d000      	beq.n	26830 <recv+0x60>
   2682e:	e082      	b.n	26936 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   26830:	231e      	movs	r3, #30
   26832:	18fb      	adds	r3, r7, r3
   26834:	2200      	movs	r2, #0
   26836:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   26838:	230f      	movs	r3, #15
   2683a:	18fb      	adds	r3, r7, r3
   2683c:	2200      	movs	r2, #0
   2683e:	569a      	ldrsb	r2, [r3, r2]
   26840:	4b41      	ldr	r3, [pc, #260]	; (26948 <recv+0x178>)
   26842:	0112      	lsls	r2, r2, #4
   26844:	68b9      	ldr	r1, [r7, #8]
   26846:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   26848:	230f      	movs	r3, #15
   2684a:	18fb      	adds	r3, r7, r3
   2684c:	781b      	ldrb	r3, [r3, #0]
   2684e:	b25b      	sxtb	r3, r3
   26850:	4a3d      	ldr	r2, [pc, #244]	; (26948 <recv+0x178>)
   26852:	011b      	lsls	r3, r3, #4
   26854:	18d3      	adds	r3, r2, r3
   26856:	3304      	adds	r3, #4
   26858:	220c      	movs	r2, #12
   2685a:	18ba      	adds	r2, r7, r2
   2685c:	8812      	ldrh	r2, [r2, #0]
   2685e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   26860:	230f      	movs	r3, #15
   26862:	18fb      	adds	r3, r7, r3
   26864:	781b      	ldrb	r3, [r3, #0]
   26866:	b25b      	sxtb	r3, r3
   26868:	4a37      	ldr	r2, [pc, #220]	; (26948 <recv+0x178>)
   2686a:	011b      	lsls	r3, r3, #4
   2686c:	18d3      	adds	r3, r2, r3
   2686e:	330c      	adds	r3, #12
   26870:	781b      	ldrb	r3, [r3, #0]
   26872:	b2db      	uxtb	r3, r3
   26874:	2b00      	cmp	r3, #0
   26876:	d15e      	bne.n	26936 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   26878:	231d      	movs	r3, #29
   2687a:	18fb      	adds	r3, r7, r3
   2687c:	2246      	movs	r2, #70	; 0x46
   2687e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   26880:	230f      	movs	r3, #15
   26882:	18fb      	adds	r3, r7, r3
   26884:	781b      	ldrb	r3, [r3, #0]
   26886:	b25b      	sxtb	r3, r3
   26888:	4a2f      	ldr	r2, [pc, #188]	; (26948 <recv+0x178>)
   2688a:	011b      	lsls	r3, r3, #4
   2688c:	18d3      	adds	r3, r2, r3
   2688e:	330c      	adds	r3, #12
   26890:	2201      	movs	r2, #1
   26892:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26894:	230f      	movs	r3, #15
   26896:	18fb      	adds	r3, r7, r3
   26898:	781b      	ldrb	r3, [r3, #0]
   2689a:	b25b      	sxtb	r3, r3
   2689c:	4a2a      	ldr	r2, [pc, #168]	; (26948 <recv+0x178>)
   2689e:	011b      	lsls	r3, r3, #4
   268a0:	18d3      	adds	r3, r2, r3
   268a2:	330b      	adds	r3, #11
   268a4:	781b      	ldrb	r3, [r3, #0]
   268a6:	b2db      	uxtb	r3, r3
   268a8:	001a      	movs	r2, r3
   268aa:	2301      	movs	r3, #1
   268ac:	4013      	ands	r3, r2
   268ae:	d003      	beq.n	268b8 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   268b0:	231d      	movs	r3, #29
   268b2:	18fb      	adds	r3, r7, r3
   268b4:	224d      	movs	r2, #77	; 0x4d
   268b6:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   268b8:	687b      	ldr	r3, [r7, #4]
   268ba:	2b00      	cmp	r3, #0
   268bc:	d105      	bne.n	268ca <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   268be:	2314      	movs	r3, #20
   268c0:	18fb      	adds	r3, r7, r3
   268c2:	2201      	movs	r2, #1
   268c4:	4252      	negs	r2, r2
   268c6:	601a      	str	r2, [r3, #0]
   268c8:	e003      	b.n	268d2 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   268ca:	2314      	movs	r3, #20
   268cc:	18fb      	adds	r3, r7, r3
   268ce:	687a      	ldr	r2, [r7, #4]
   268d0:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   268d2:	2314      	movs	r3, #20
   268d4:	18fb      	adds	r3, r7, r3
   268d6:	220f      	movs	r2, #15
   268d8:	18ba      	adds	r2, r7, r2
   268da:	7812      	ldrb	r2, [r2, #0]
   268dc:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   268de:	230f      	movs	r3, #15
   268e0:	18fb      	adds	r3, r7, r3
   268e2:	781b      	ldrb	r3, [r3, #0]
   268e4:	b25b      	sxtb	r3, r3
   268e6:	4a18      	ldr	r2, [pc, #96]	; (26948 <recv+0x178>)
   268e8:	011b      	lsls	r3, r3, #4
   268ea:	18d3      	adds	r3, r2, r3
   268ec:	3306      	adds	r3, #6
   268ee:	881b      	ldrh	r3, [r3, #0]
   268f0:	b29a      	uxth	r2, r3
   268f2:	2314      	movs	r3, #20
   268f4:	18fb      	adds	r3, r7, r3
   268f6:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   268f8:	2314      	movs	r3, #20
   268fa:	18fa      	adds	r2, r7, r3
   268fc:	231d      	movs	r3, #29
   268fe:	18fb      	adds	r3, r7, r3
   26900:	7819      	ldrb	r1, [r3, #0]
   26902:	2300      	movs	r3, #0
   26904:	9302      	str	r3, [sp, #8]
   26906:	2300      	movs	r3, #0
   26908:	9301      	str	r3, [sp, #4]
   2690a:	2300      	movs	r3, #0
   2690c:	9300      	str	r3, [sp, #0]
   2690e:	2308      	movs	r3, #8
   26910:	2002      	movs	r0, #2
   26912:	4c0e      	ldr	r4, [pc, #56]	; (2694c <recv+0x17c>)
   26914:	47a0      	blx	r4
   26916:	0003      	movs	r3, r0
   26918:	001a      	movs	r2, r3
   2691a:	231e      	movs	r3, #30
   2691c:	18fb      	adds	r3, r7, r3
   2691e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   26920:	231e      	movs	r3, #30
   26922:	18fb      	adds	r3, r7, r3
   26924:	2200      	movs	r2, #0
   26926:	5e9b      	ldrsh	r3, [r3, r2]
   26928:	2b00      	cmp	r3, #0
   2692a:	d004      	beq.n	26936 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   2692c:	231e      	movs	r3, #30
   2692e:	18fb      	adds	r3, r7, r3
   26930:	220e      	movs	r2, #14
   26932:	4252      	negs	r2, r2
   26934:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   26936:	231e      	movs	r3, #30
   26938:	18fb      	adds	r3, r7, r3
   2693a:	2200      	movs	r2, #0
   2693c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2693e:	0018      	movs	r0, r3
   26940:	46bd      	mov	sp, r7
   26942:	b009      	add	sp, #36	; 0x24
   26944:	bd90      	pop	{r4, r7, pc}
   26946:	46c0      	nop			; (mov r8, r8)
   26948:	20005b94 	.word	0x20005b94
   2694c:	00021ced 	.word	0x00021ced

00026950 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   26950:	b5b0      	push	{r4, r5, r7, lr}
   26952:	b088      	sub	sp, #32
   26954:	af04      	add	r7, sp, #16
   26956:	0002      	movs	r2, r0
   26958:	1dfb      	adds	r3, r7, #7
   2695a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2695c:	230f      	movs	r3, #15
   2695e:	18fb      	adds	r3, r7, r3
   26960:	22fa      	movs	r2, #250	; 0xfa
   26962:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   26964:	4b43      	ldr	r3, [pc, #268]	; (26a74 <close+0x124>)
   26966:	0018      	movs	r0, r3
   26968:	4b43      	ldr	r3, [pc, #268]	; (26a78 <close+0x128>)
   2696a:	4798      	blx	r3
   2696c:	1dfb      	adds	r3, r7, #7
   2696e:	2200      	movs	r2, #0
   26970:	569a      	ldrsb	r2, [r3, r2]
   26972:	4b42      	ldr	r3, [pc, #264]	; (26a7c <close+0x12c>)
   26974:	0011      	movs	r1, r2
   26976:	0018      	movs	r0, r3
   26978:	4b3f      	ldr	r3, [pc, #252]	; (26a78 <close+0x128>)
   2697a:	4798      	blx	r3
   2697c:	4b40      	ldr	r3, [pc, #256]	; (26a80 <close+0x130>)
   2697e:	0018      	movs	r0, r3
   26980:	4b3d      	ldr	r3, [pc, #244]	; (26a78 <close+0x128>)
   26982:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   26984:	1dfb      	adds	r3, r7, #7
   26986:	781b      	ldrb	r3, [r3, #0]
   26988:	2b7f      	cmp	r3, #127	; 0x7f
   2698a:	d86a      	bhi.n	26a62 <close+0x112>
   2698c:	1dfb      	adds	r3, r7, #7
   2698e:	781b      	ldrb	r3, [r3, #0]
   26990:	b25b      	sxtb	r3, r3
   26992:	4a3c      	ldr	r2, [pc, #240]	; (26a84 <close+0x134>)
   26994:	011b      	lsls	r3, r3, #4
   26996:	18d3      	adds	r3, r2, r3
   26998:	330a      	adds	r3, #10
   2699a:	781b      	ldrb	r3, [r3, #0]
   2699c:	b2db      	uxtb	r3, r3
   2699e:	2b01      	cmp	r3, #1
   269a0:	d15f      	bne.n	26a62 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   269a2:	230e      	movs	r3, #14
   269a4:	18fb      	adds	r3, r7, r3
   269a6:	2249      	movs	r2, #73	; 0x49
   269a8:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   269aa:	2308      	movs	r3, #8
   269ac:	18fb      	adds	r3, r7, r3
   269ae:	1dfa      	adds	r2, r7, #7
   269b0:	7812      	ldrb	r2, [r2, #0]
   269b2:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   269b4:	1dfb      	adds	r3, r7, #7
   269b6:	781b      	ldrb	r3, [r3, #0]
   269b8:	b25b      	sxtb	r3, r3
   269ba:	4a32      	ldr	r2, [pc, #200]	; (26a84 <close+0x134>)
   269bc:	011b      	lsls	r3, r3, #4
   269be:	18d3      	adds	r3, r2, r3
   269c0:	3306      	adds	r3, #6
   269c2:	881b      	ldrh	r3, [r3, #0]
   269c4:	b29a      	uxth	r2, r3
   269c6:	2308      	movs	r3, #8
   269c8:	18fb      	adds	r3, r7, r3
   269ca:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   269cc:	1dfb      	adds	r3, r7, #7
   269ce:	781b      	ldrb	r3, [r3, #0]
   269d0:	b25b      	sxtb	r3, r3
   269d2:	4a2c      	ldr	r2, [pc, #176]	; (26a84 <close+0x134>)
   269d4:	011b      	lsls	r3, r3, #4
   269d6:	18d3      	adds	r3, r2, r3
   269d8:	330a      	adds	r3, #10
   269da:	2200      	movs	r2, #0
   269dc:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   269de:	1dfb      	adds	r3, r7, #7
   269e0:	781b      	ldrb	r3, [r3, #0]
   269e2:	b25b      	sxtb	r3, r3
   269e4:	4a27      	ldr	r2, [pc, #156]	; (26a84 <close+0x134>)
   269e6:	011b      	lsls	r3, r3, #4
   269e8:	18d3      	adds	r3, r2, r3
   269ea:	3306      	adds	r3, #6
   269ec:	2200      	movs	r2, #0
   269ee:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   269f0:	1dfb      	adds	r3, r7, #7
   269f2:	781b      	ldrb	r3, [r3, #0]
   269f4:	b25b      	sxtb	r3, r3
   269f6:	4a23      	ldr	r2, [pc, #140]	; (26a84 <close+0x134>)
   269f8:	011b      	lsls	r3, r3, #4
   269fa:	18d3      	adds	r3, r2, r3
   269fc:	330b      	adds	r3, #11
   269fe:	781b      	ldrb	r3, [r3, #0]
   26a00:	b2db      	uxtb	r3, r3
   26a02:	001a      	movs	r2, r3
   26a04:	2301      	movs	r3, #1
   26a06:	4013      	ands	r3, r2
   26a08:	d003      	beq.n	26a12 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   26a0a:	230e      	movs	r3, #14
   26a0c:	18fb      	adds	r3, r7, r3
   26a0e:	224e      	movs	r2, #78	; 0x4e
   26a10:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   26a12:	230f      	movs	r3, #15
   26a14:	18fc      	adds	r4, r7, r3
   26a16:	2308      	movs	r3, #8
   26a18:	18fa      	adds	r2, r7, r3
   26a1a:	230e      	movs	r3, #14
   26a1c:	18fb      	adds	r3, r7, r3
   26a1e:	7819      	ldrb	r1, [r3, #0]
   26a20:	2300      	movs	r3, #0
   26a22:	9302      	str	r3, [sp, #8]
   26a24:	2300      	movs	r3, #0
   26a26:	9301      	str	r3, [sp, #4]
   26a28:	2300      	movs	r3, #0
   26a2a:	9300      	str	r3, [sp, #0]
   26a2c:	2304      	movs	r3, #4
   26a2e:	2002      	movs	r0, #2
   26a30:	4d15      	ldr	r5, [pc, #84]	; (26a88 <close+0x138>)
   26a32:	47a8      	blx	r5
   26a34:	0003      	movs	r3, r0
   26a36:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26a38:	230f      	movs	r3, #15
   26a3a:	18fb      	adds	r3, r7, r3
   26a3c:	781b      	ldrb	r3, [r3, #0]
   26a3e:	b25b      	sxtb	r3, r3
   26a40:	2b00      	cmp	r3, #0
   26a42:	d003      	beq.n	26a4c <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   26a44:	230f      	movs	r3, #15
   26a46:	18fb      	adds	r3, r7, r3
   26a48:	22f7      	movs	r2, #247	; 0xf7
   26a4a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   26a4c:	1dfb      	adds	r3, r7, #7
   26a4e:	781b      	ldrb	r3, [r3, #0]
   26a50:	b25b      	sxtb	r3, r3
   26a52:	011a      	lsls	r2, r3, #4
   26a54:	4b0b      	ldr	r3, [pc, #44]	; (26a84 <close+0x134>)
   26a56:	18d3      	adds	r3, r2, r3
   26a58:	2210      	movs	r2, #16
   26a5a:	2100      	movs	r1, #0
   26a5c:	0018      	movs	r0, r3
   26a5e:	4b0b      	ldr	r3, [pc, #44]	; (26a8c <close+0x13c>)
   26a60:	4798      	blx	r3
	}
	return s8Ret;
   26a62:	230f      	movs	r3, #15
   26a64:	18fb      	adds	r3, r7, r3
   26a66:	781b      	ldrb	r3, [r3, #0]
   26a68:	b25b      	sxtb	r3, r3
}
   26a6a:	0018      	movs	r0, r3
   26a6c:	46bd      	mov	sp, r7
   26a6e:	b004      	add	sp, #16
   26a70:	bdb0      	pop	{r4, r5, r7, pc}
   26a72:	46c0      	nop			; (mov r8, r8)
   26a74:	0003a330 	.word	0x0003a330
   26a78:	0001ed59 	.word	0x0001ed59
   26a7c:	0003a370 	.word	0x0003a370
   26a80:	0003a350 	.word	0x0003a350
   26a84:	20005b94 	.word	0x20005b94
   26a88:	00021ced 	.word	0x00021ced
   26a8c:	00021a8d 	.word	0x00021a8d

00026a90 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   26a90:	b580      	push	{r7, lr}
   26a92:	b086      	sub	sp, #24
   26a94:	af00      	add	r7, sp, #0
   26a96:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   26a98:	2300      	movs	r3, #0
   26a9a:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   26a9c:	2317      	movs	r3, #23
   26a9e:	18fb      	adds	r3, r7, r3
   26aa0:	2200      	movs	r2, #0
   26aa2:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26aa4:	2316      	movs	r3, #22
   26aa6:	18fb      	adds	r3, r7, r3
   26aa8:	2200      	movs	r2, #0
   26aaa:	701a      	strb	r2, [r3, #0]
   26aac:	e060      	b.n	26b70 <nmi_inet_addr+0xe0>
	{
		j = 0;
   26aae:	2315      	movs	r3, #21
   26ab0:	18fb      	adds	r3, r7, r3
   26ab2:	2200      	movs	r2, #0
   26ab4:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26ab6:	2314      	movs	r3, #20
   26ab8:	18fb      	adds	r3, r7, r3
   26aba:	687a      	ldr	r2, [r7, #4]
   26abc:	7812      	ldrb	r2, [r2, #0]
   26abe:	701a      	strb	r2, [r3, #0]
			++j;
   26ac0:	2315      	movs	r3, #21
   26ac2:	18fb      	adds	r3, r7, r3
   26ac4:	2215      	movs	r2, #21
   26ac6:	18ba      	adds	r2, r7, r2
   26ac8:	7812      	ldrb	r2, [r2, #0]
   26aca:	3201      	adds	r2, #1
   26acc:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   26ace:	2315      	movs	r3, #21
   26ad0:	18fb      	adds	r3, r7, r3
   26ad2:	781b      	ldrb	r3, [r3, #0]
   26ad4:	2b04      	cmp	r3, #4
   26ad6:	d901      	bls.n	26adc <nmi_inet_addr+0x4c>
			{
				return 0;
   26ad8:	2300      	movs	r3, #0
   26ada:	e057      	b.n	26b8c <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   26adc:	2314      	movs	r3, #20
   26ade:	18fb      	adds	r3, r7, r3
   26ae0:	781b      	ldrb	r3, [r3, #0]
   26ae2:	2b2e      	cmp	r3, #46	; 0x2e
   26ae4:	d004      	beq.n	26af0 <nmi_inet_addr+0x60>
   26ae6:	2314      	movs	r3, #20
   26ae8:	18fb      	adds	r3, r7, r3
   26aea:	781b      	ldrb	r3, [r3, #0]
   26aec:	2b00      	cmp	r3, #0
   26aee:	d10d      	bne.n	26b0c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   26af0:	2316      	movs	r3, #22
   26af2:	18fb      	adds	r3, r7, r3
   26af4:	781b      	ldrb	r3, [r3, #0]
   26af6:	220c      	movs	r2, #12
   26af8:	18ba      	adds	r2, r7, r2
   26afa:	2117      	movs	r1, #23
   26afc:	1879      	adds	r1, r7, r1
   26afe:	7809      	ldrb	r1, [r1, #0]
   26b00:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   26b02:	2317      	movs	r3, #23
   26b04:	18fb      	adds	r3, r7, r3
   26b06:	2200      	movs	r2, #0
   26b08:	701a      	strb	r2, [r3, #0]
   26b0a:	e01d      	b.n	26b48 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   26b0c:	2314      	movs	r3, #20
   26b0e:	18fb      	adds	r3, r7, r3
   26b10:	781b      	ldrb	r3, [r3, #0]
   26b12:	2b2f      	cmp	r3, #47	; 0x2f
   26b14:	d916      	bls.n	26b44 <nmi_inet_addr+0xb4>
   26b16:	2314      	movs	r3, #20
   26b18:	18fb      	adds	r3, r7, r3
   26b1a:	781b      	ldrb	r3, [r3, #0]
   26b1c:	2b39      	cmp	r3, #57	; 0x39
   26b1e:	d811      	bhi.n	26b44 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   26b20:	2317      	movs	r3, #23
   26b22:	18fb      	adds	r3, r7, r3
   26b24:	781b      	ldrb	r3, [r3, #0]
   26b26:	1c1a      	adds	r2, r3, #0
   26b28:	0092      	lsls	r2, r2, #2
   26b2a:	18d3      	adds	r3, r2, r3
   26b2c:	18db      	adds	r3, r3, r3
   26b2e:	b2da      	uxtb	r2, r3
   26b30:	2314      	movs	r3, #20
   26b32:	18fb      	adds	r3, r7, r3
   26b34:	781b      	ldrb	r3, [r3, #0]
   26b36:	18d3      	adds	r3, r2, r3
   26b38:	b2da      	uxtb	r2, r3
   26b3a:	2317      	movs	r3, #23
   26b3c:	18fb      	adds	r3, r7, r3
   26b3e:	3a30      	subs	r2, #48	; 0x30
   26b40:	701a      	strb	r2, [r3, #0]
   26b42:	e001      	b.n	26b48 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26b44:	2300      	movs	r3, #0
   26b46:	e021      	b.n	26b8c <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26b48:	687b      	ldr	r3, [r7, #4]
   26b4a:	3301      	adds	r3, #1
   26b4c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   26b4e:	2314      	movs	r3, #20
   26b50:	18fb      	adds	r3, r7, r3
   26b52:	781b      	ldrb	r3, [r3, #0]
   26b54:	2b2e      	cmp	r3, #46	; 0x2e
   26b56:	d004      	beq.n	26b62 <nmi_inet_addr+0xd2>
   26b58:	2314      	movs	r3, #20
   26b5a:	18fb      	adds	r3, r7, r3
   26b5c:	781b      	ldrb	r3, [r3, #0]
   26b5e:	2b00      	cmp	r3, #0
   26b60:	d1a9      	bne.n	26ab6 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   26b62:	2316      	movs	r3, #22
   26b64:	18fb      	adds	r3, r7, r3
   26b66:	2216      	movs	r2, #22
   26b68:	18ba      	adds	r2, r7, r2
   26b6a:	7812      	ldrb	r2, [r2, #0]
   26b6c:	3201      	adds	r2, #1
   26b6e:	701a      	strb	r2, [r3, #0]
   26b70:	2316      	movs	r3, #22
   26b72:	18fb      	adds	r3, r7, r3
   26b74:	781b      	ldrb	r3, [r3, #0]
   26b76:	2b03      	cmp	r3, #3
   26b78:	d999      	bls.n	26aae <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   26b7a:	230c      	movs	r3, #12
   26b7c:	18f9      	adds	r1, r7, r3
   26b7e:	2310      	movs	r3, #16
   26b80:	18fb      	adds	r3, r7, r3
   26b82:	2204      	movs	r2, #4
   26b84:	0018      	movs	r0, r3
   26b86:	4b03      	ldr	r3, [pc, #12]	; (26b94 <nmi_inet_addr+0x104>)
   26b88:	4798      	blx	r3
	return u32IP;
   26b8a:	693b      	ldr	r3, [r7, #16]
}
   26b8c:	0018      	movs	r0, r3
   26b8e:	46bd      	mov	sp, r7
   26b90:	b006      	add	sp, #24
   26b92:	bd80      	pop	{r7, pc}
   26b94:	00021a51 	.word	0x00021a51

00026b98 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26b98:	b5b0      	push	{r4, r5, r7, lr}
   26b9a:	b088      	sub	sp, #32
   26b9c:	af04      	add	r7, sp, #16
   26b9e:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   26ba0:	230f      	movs	r3, #15
   26ba2:	18fb      	adds	r3, r7, r3
   26ba4:	22fa      	movs	r2, #250	; 0xfa
   26ba6:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26ba8:	687b      	ldr	r3, [r7, #4]
   26baa:	0018      	movs	r0, r3
   26bac:	4b14      	ldr	r3, [pc, #80]	; (26c00 <gethostbyname+0x68>)
   26bae:	4798      	blx	r3
   26bb0:	0003      	movs	r3, r0
   26bb2:	001a      	movs	r2, r3
   26bb4:	230e      	movs	r3, #14
   26bb6:	18fb      	adds	r3, r7, r3
   26bb8:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26bba:	230e      	movs	r3, #14
   26bbc:	18fb      	adds	r3, r7, r3
   26bbe:	781b      	ldrb	r3, [r3, #0]
   26bc0:	2b40      	cmp	r3, #64	; 0x40
   26bc2:	d815      	bhi.n	26bf0 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26bc4:	230e      	movs	r3, #14
   26bc6:	18fb      	adds	r3, r7, r3
   26bc8:	781b      	ldrb	r3, [r3, #0]
   26bca:	b29b      	uxth	r3, r3
   26bcc:	3301      	adds	r3, #1
   26bce:	b299      	uxth	r1, r3
   26bd0:	230f      	movs	r3, #15
   26bd2:	18fc      	adds	r4, r7, r3
   26bd4:	687a      	ldr	r2, [r7, #4]
   26bd6:	2300      	movs	r3, #0
   26bd8:	9302      	str	r3, [sp, #8]
   26bda:	2300      	movs	r3, #0
   26bdc:	9301      	str	r3, [sp, #4]
   26bde:	2300      	movs	r3, #0
   26be0:	9300      	str	r3, [sp, #0]
   26be2:	000b      	movs	r3, r1
   26be4:	214a      	movs	r1, #74	; 0x4a
   26be6:	2002      	movs	r0, #2
   26be8:	4d06      	ldr	r5, [pc, #24]	; (26c04 <gethostbyname+0x6c>)
   26bea:	47a8      	blx	r5
   26bec:	0003      	movs	r3, r0
   26bee:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   26bf0:	230f      	movs	r3, #15
   26bf2:	18fb      	adds	r3, r7, r3
   26bf4:	781b      	ldrb	r3, [r3, #0]
   26bf6:	b25b      	sxtb	r3, r3
}
   26bf8:	0018      	movs	r0, r3
   26bfa:	46bd      	mov	sp, r7
   26bfc:	b004      	add	sp, #16
   26bfe:	bdb0      	pop	{r4, r5, r7, pc}
   26c00:	00021acb 	.word	0x00021acb
   26c04:	00021ced 	.word	0x00021ced

00026c08 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   26c08:	b580      	push	{r7, lr}
   26c0a:	b082      	sub	sp, #8
   26c0c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26c0e:	003b      	movs	r3, r7
   26c10:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   26c12:	687b      	ldr	r3, [r7, #4]
   26c14:	22b9      	movs	r2, #185	; 0xb9
   26c16:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26c18:	4b13      	ldr	r3, [pc, #76]	; (26c68 <spi_flash_enter_low_power_mode+0x60>)
   26c1a:	2100      	movs	r1, #0
   26c1c:	0018      	movs	r0, r3
   26c1e:	4b13      	ldr	r3, [pc, #76]	; (26c6c <spi_flash_enter_low_power_mode+0x64>)
   26c20:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26c22:	687b      	ldr	r3, [r7, #4]
   26c24:	781b      	ldrb	r3, [r3, #0]
   26c26:	001a      	movs	r2, r3
   26c28:	4b11      	ldr	r3, [pc, #68]	; (26c70 <spi_flash_enter_low_power_mode+0x68>)
   26c2a:	0011      	movs	r1, r2
   26c2c:	0018      	movs	r0, r3
   26c2e:	4b0f      	ldr	r3, [pc, #60]	; (26c6c <spi_flash_enter_low_power_mode+0x64>)
   26c30:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26c32:	4b10      	ldr	r3, [pc, #64]	; (26c74 <spi_flash_enter_low_power_mode+0x6c>)
   26c34:	2101      	movs	r1, #1
   26c36:	0018      	movs	r0, r3
   26c38:	4b0c      	ldr	r3, [pc, #48]	; (26c6c <spi_flash_enter_low_power_mode+0x64>)
   26c3a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26c3c:	4b0e      	ldr	r3, [pc, #56]	; (26c78 <spi_flash_enter_low_power_mode+0x70>)
   26c3e:	2100      	movs	r1, #0
   26c40:	0018      	movs	r0, r3
   26c42:	4b0a      	ldr	r3, [pc, #40]	; (26c6c <spi_flash_enter_low_power_mode+0x64>)
   26c44:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26c46:	4b0d      	ldr	r3, [pc, #52]	; (26c7c <spi_flash_enter_low_power_mode+0x74>)
   26c48:	2181      	movs	r1, #129	; 0x81
   26c4a:	0018      	movs	r0, r3
   26c4c:	4b07      	ldr	r3, [pc, #28]	; (26c6c <spi_flash_enter_low_power_mode+0x64>)
   26c4e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26c50:	46c0      	nop			; (mov r8, r8)
   26c52:	4b0b      	ldr	r3, [pc, #44]	; (26c80 <spi_flash_enter_low_power_mode+0x78>)
   26c54:	0018      	movs	r0, r3
   26c56:	4b0b      	ldr	r3, [pc, #44]	; (26c84 <spi_flash_enter_low_power_mode+0x7c>)
   26c58:	4798      	blx	r3
   26c5a:	0003      	movs	r3, r0
   26c5c:	2b01      	cmp	r3, #1
   26c5e:	d1f8      	bne.n	26c52 <spi_flash_enter_low_power_mode+0x4a>
}
   26c60:	46c0      	nop			; (mov r8, r8)
   26c62:	46bd      	mov	sp, r7
   26c64:	b002      	add	sp, #8
   26c66:	bd80      	pop	{r7, pc}
   26c68:	00010208 	.word	0x00010208
   26c6c:	00023a69 	.word	0x00023a69
   26c70:	0001020c 	.word	0x0001020c
   26c74:	00010214 	.word	0x00010214
   26c78:	0001021c 	.word	0x0001021c
   26c7c:	00010204 	.word	0x00010204
   26c80:	00010218 	.word	0x00010218
   26c84:	00023a25 	.word	0x00023a25

00026c88 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26c88:	b580      	push	{r7, lr}
   26c8a:	b082      	sub	sp, #8
   26c8c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26c8e:	003b      	movs	r3, r7
   26c90:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26c92:	687b      	ldr	r3, [r7, #4]
   26c94:	22ab      	movs	r2, #171	; 0xab
   26c96:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26c98:	4b13      	ldr	r3, [pc, #76]	; (26ce8 <spi_flash_leave_low_power_mode+0x60>)
   26c9a:	2100      	movs	r1, #0
   26c9c:	0018      	movs	r0, r3
   26c9e:	4b13      	ldr	r3, [pc, #76]	; (26cec <spi_flash_leave_low_power_mode+0x64>)
   26ca0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26ca2:	687b      	ldr	r3, [r7, #4]
   26ca4:	781b      	ldrb	r3, [r3, #0]
   26ca6:	001a      	movs	r2, r3
   26ca8:	4b11      	ldr	r3, [pc, #68]	; (26cf0 <spi_flash_leave_low_power_mode+0x68>)
   26caa:	0011      	movs	r1, r2
   26cac:	0018      	movs	r0, r3
   26cae:	4b0f      	ldr	r3, [pc, #60]	; (26cec <spi_flash_leave_low_power_mode+0x64>)
   26cb0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26cb2:	4b10      	ldr	r3, [pc, #64]	; (26cf4 <spi_flash_leave_low_power_mode+0x6c>)
   26cb4:	2101      	movs	r1, #1
   26cb6:	0018      	movs	r0, r3
   26cb8:	4b0c      	ldr	r3, [pc, #48]	; (26cec <spi_flash_leave_low_power_mode+0x64>)
   26cba:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26cbc:	4b0e      	ldr	r3, [pc, #56]	; (26cf8 <spi_flash_leave_low_power_mode+0x70>)
   26cbe:	2100      	movs	r1, #0
   26cc0:	0018      	movs	r0, r3
   26cc2:	4b0a      	ldr	r3, [pc, #40]	; (26cec <spi_flash_leave_low_power_mode+0x64>)
   26cc4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26cc6:	4b0d      	ldr	r3, [pc, #52]	; (26cfc <spi_flash_leave_low_power_mode+0x74>)
   26cc8:	2181      	movs	r1, #129	; 0x81
   26cca:	0018      	movs	r0, r3
   26ccc:	4b07      	ldr	r3, [pc, #28]	; (26cec <spi_flash_leave_low_power_mode+0x64>)
   26cce:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26cd0:	46c0      	nop			; (mov r8, r8)
   26cd2:	4b0b      	ldr	r3, [pc, #44]	; (26d00 <spi_flash_leave_low_power_mode+0x78>)
   26cd4:	0018      	movs	r0, r3
   26cd6:	4b0b      	ldr	r3, [pc, #44]	; (26d04 <spi_flash_leave_low_power_mode+0x7c>)
   26cd8:	4798      	blx	r3
   26cda:	0003      	movs	r3, r0
   26cdc:	2b01      	cmp	r3, #1
   26cde:	d1f8      	bne.n	26cd2 <spi_flash_leave_low_power_mode+0x4a>
}
   26ce0:	46c0      	nop			; (mov r8, r8)
   26ce2:	46bd      	mov	sp, r7
   26ce4:	b002      	add	sp, #8
   26ce6:	bd80      	pop	{r7, pc}
   26ce8:	00010208 	.word	0x00010208
   26cec:	00023a69 	.word	0x00023a69
   26cf0:	0001020c 	.word	0x0001020c
   26cf4:	00010214 	.word	0x00010214
   26cf8:	0001021c 	.word	0x0001021c
   26cfc:	00010204 	.word	0x00010204
   26d00:	00010218 	.word	0x00010218
   26d04:	00023a25 	.word	0x00023a25

00026d08 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26d08:	b590      	push	{r4, r7, lr}
   26d0a:	b085      	sub	sp, #20
   26d0c:	af00      	add	r7, sp, #0
   26d0e:	0002      	movs	r2, r0
   26d10:	1dfb      	adds	r3, r7, #7
   26d12:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26d14:	230f      	movs	r3, #15
   26d16:	18fb      	adds	r3, r7, r3
   26d18:	2200      	movs	r2, #0
   26d1a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26d1c:	4b24      	ldr	r3, [pc, #144]	; (26db0 <spi_flash_enable+0xa8>)
   26d1e:	4798      	blx	r3
   26d20:	0003      	movs	r3, r0
   26d22:	051b      	lsls	r3, r3, #20
   26d24:	0d1b      	lsrs	r3, r3, #20
   26d26:	4a23      	ldr	r2, [pc, #140]	; (26db4 <spi_flash_enable+0xac>)
   26d28:	4293      	cmp	r3, r2
   26d2a:	d938      	bls.n	26d9e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26d2c:	230f      	movs	r3, #15
   26d2e:	18fc      	adds	r4, r7, r3
   26d30:	2308      	movs	r3, #8
   26d32:	18fb      	adds	r3, r7, r3
   26d34:	4a20      	ldr	r2, [pc, #128]	; (26db8 <spi_flash_enable+0xb0>)
   26d36:	0019      	movs	r1, r3
   26d38:	0010      	movs	r0, r2
   26d3a:	4b20      	ldr	r3, [pc, #128]	; (26dbc <spi_flash_enable+0xb4>)
   26d3c:	4798      	blx	r3
   26d3e:	0003      	movs	r3, r0
   26d40:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26d42:	230f      	movs	r3, #15
   26d44:	18fb      	adds	r3, r7, r3
   26d46:	781b      	ldrb	r3, [r3, #0]
   26d48:	b25b      	sxtb	r3, r3
   26d4a:	2b00      	cmp	r3, #0
   26d4c:	d126      	bne.n	26d9c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26d4e:	68bb      	ldr	r3, [r7, #8]
   26d50:	4a1b      	ldr	r2, [pc, #108]	; (26dc0 <spi_flash_enable+0xb8>)
   26d52:	4013      	ands	r3, r2
   26d54:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26d56:	68bb      	ldr	r3, [r7, #8]
   26d58:	4a1a      	ldr	r2, [pc, #104]	; (26dc4 <spi_flash_enable+0xbc>)
   26d5a:	4313      	orrs	r3, r2
   26d5c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26d5e:	68bb      	ldr	r3, [r7, #8]
   26d60:	4a15      	ldr	r2, [pc, #84]	; (26db8 <spi_flash_enable+0xb0>)
   26d62:	0019      	movs	r1, r3
   26d64:	0010      	movs	r0, r2
   26d66:	4b18      	ldr	r3, [pc, #96]	; (26dc8 <spi_flash_enable+0xc0>)
   26d68:	4798      	blx	r3
		if(enable) {
   26d6a:	1dfb      	adds	r3, r7, #7
   26d6c:	781b      	ldrb	r3, [r3, #0]
   26d6e:	2b00      	cmp	r3, #0
   26d70:	d002      	beq.n	26d78 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26d72:	4b16      	ldr	r3, [pc, #88]	; (26dcc <spi_flash_enable+0xc4>)
   26d74:	4798      	blx	r3
   26d76:	e001      	b.n	26d7c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26d78:	4b15      	ldr	r3, [pc, #84]	; (26dd0 <spi_flash_enable+0xc8>)
   26d7a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26d7c:	68bb      	ldr	r3, [r7, #8]
   26d7e:	4a10      	ldr	r2, [pc, #64]	; (26dc0 <spi_flash_enable+0xb8>)
   26d80:	4013      	ands	r3, r2
   26d82:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26d84:	68bb      	ldr	r3, [r7, #8]
   26d86:	2280      	movs	r2, #128	; 0x80
   26d88:	0252      	lsls	r2, r2, #9
   26d8a:	4313      	orrs	r3, r2
   26d8c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26d8e:	68bb      	ldr	r3, [r7, #8]
   26d90:	4a09      	ldr	r2, [pc, #36]	; (26db8 <spi_flash_enable+0xb0>)
   26d92:	0019      	movs	r1, r3
   26d94:	0010      	movs	r0, r2
   26d96:	4b0c      	ldr	r3, [pc, #48]	; (26dc8 <spi_flash_enable+0xc0>)
   26d98:	4798      	blx	r3
   26d9a:	e000      	b.n	26d9e <spi_flash_enable+0x96>
			goto ERR1;
   26d9c:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26d9e:	230f      	movs	r3, #15
   26da0:	18fb      	adds	r3, r7, r3
   26da2:	781b      	ldrb	r3, [r3, #0]
   26da4:	b25b      	sxtb	r3, r3
}
   26da6:	0018      	movs	r0, r3
   26da8:	46bd      	mov	sp, r7
   26daa:	b005      	add	sp, #20
   26dac:	bd90      	pop	{r4, r7, pc}
   26dae:	46c0      	nop			; (mov r8, r8)
   26db0:	00023345 	.word	0x00023345
   26db4:	0000039f 	.word	0x0000039f
   26db8:	00001410 	.word	0x00001410
   26dbc:	00023a45 	.word	0x00023a45
   26dc0:	f8888fff 	.word	0xf8888fff
   26dc4:	01111000 	.word	0x01111000
   26dc8:	00023a69 	.word	0x00023a69
   26dcc:	00026c89 	.word	0x00026c89
   26dd0:	00026c09 	.word	0x00026c09

00026dd4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26dd4:	b580      	push	{r7, lr}
   26dd6:	b084      	sub	sp, #16
   26dd8:	af00      	add	r7, sp, #0
   26dda:	0002      	movs	r2, r0
   26ddc:	1dfb      	adds	r3, r7, #7
   26dde:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26de0:	1dfb      	adds	r3, r7, #7
   26de2:	781b      	ldrb	r3, [r3, #0]
   26de4:	2b00      	cmp	r3, #0
   26de6:	d108      	bne.n	26dfa <mem_test_unit_ready+0x26>
   26de8:	1dfb      	adds	r3, r7, #7
   26dea:	781a      	ldrb	r2, [r3, #0]
   26dec:	4b08      	ldr	r3, [pc, #32]	; (26e10 <mem_test_unit_ready+0x3c>)
   26dee:	0152      	lsls	r2, r2, #5
   26df0:	58d3      	ldr	r3, [r2, r3]
   26df2:	4798      	blx	r3
   26df4:	0003      	movs	r3, r0
   26df6:	001a      	movs	r2, r3
   26df8:	e000      	b.n	26dfc <mem_test_unit_ready+0x28>
   26dfa:	2201      	movs	r2, #1
  status =
   26dfc:	230f      	movs	r3, #15
   26dfe:	18fb      	adds	r3, r7, r3
   26e00:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26e02:	230f      	movs	r3, #15
   26e04:	18fb      	adds	r3, r7, r3
   26e06:	781b      	ldrb	r3, [r3, #0]
}
   26e08:	0018      	movs	r0, r3
   26e0a:	46bd      	mov	sp, r7
   26e0c:	b004      	add	sp, #16
   26e0e:	bd80      	pop	{r7, pc}
   26e10:	0003a3fc 	.word	0x0003a3fc

00026e14 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26e14:	b580      	push	{r7, lr}
   26e16:	b084      	sub	sp, #16
   26e18:	af00      	add	r7, sp, #0
   26e1a:	0002      	movs	r2, r0
   26e1c:	6039      	str	r1, [r7, #0]
   26e1e:	1dfb      	adds	r3, r7, #7
   26e20:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26e22:	1dfb      	adds	r3, r7, #7
   26e24:	781b      	ldrb	r3, [r3, #0]
   26e26:	2b00      	cmp	r3, #0
   26e28:	d10c      	bne.n	26e44 <mem_read_capacity+0x30>
   26e2a:	1dfb      	adds	r3, r7, #7
   26e2c:	781b      	ldrb	r3, [r3, #0]
   26e2e:	4a0b      	ldr	r2, [pc, #44]	; (26e5c <mem_read_capacity+0x48>)
   26e30:	015b      	lsls	r3, r3, #5
   26e32:	18d3      	adds	r3, r2, r3
   26e34:	3304      	adds	r3, #4
   26e36:	681b      	ldr	r3, [r3, #0]
   26e38:	683a      	ldr	r2, [r7, #0]
   26e3a:	0010      	movs	r0, r2
   26e3c:	4798      	blx	r3
   26e3e:	0003      	movs	r3, r0
   26e40:	001a      	movs	r2, r3
   26e42:	e000      	b.n	26e46 <mem_read_capacity+0x32>
   26e44:	2201      	movs	r2, #1
  status =
   26e46:	230f      	movs	r3, #15
   26e48:	18fb      	adds	r3, r7, r3
   26e4a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26e4c:	230f      	movs	r3, #15
   26e4e:	18fb      	adds	r3, r7, r3
   26e50:	781b      	ldrb	r3, [r3, #0]
}
   26e52:	0018      	movs	r0, r3
   26e54:	46bd      	mov	sp, r7
   26e56:	b004      	add	sp, #16
   26e58:	bd80      	pop	{r7, pc}
   26e5a:	46c0      	nop			; (mov r8, r8)
   26e5c:	0003a3fc 	.word	0x0003a3fc

00026e60 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26e60:	b580      	push	{r7, lr}
   26e62:	b084      	sub	sp, #16
   26e64:	af00      	add	r7, sp, #0
   26e66:	0002      	movs	r2, r0
   26e68:	1dfb      	adds	r3, r7, #7
   26e6a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26e6c:	1dfb      	adds	r3, r7, #7
   26e6e:	781b      	ldrb	r3, [r3, #0]
   26e70:	425a      	negs	r2, r3
   26e72:	4153      	adcs	r3, r2
   26e74:	b2da      	uxtb	r2, r3
  sector_size =
   26e76:	230f      	movs	r3, #15
   26e78:	18fb      	adds	r3, r7, r3
   26e7a:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26e7c:	230f      	movs	r3, #15
   26e7e:	18fb      	adds	r3, r7, r3
   26e80:	781b      	ldrb	r3, [r3, #0]
}
   26e82:	0018      	movs	r0, r3
   26e84:	46bd      	mov	sp, r7
   26e86:	b004      	add	sp, #16
   26e88:	bd80      	pop	{r7, pc}
	...

00026e8c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26e8c:	b580      	push	{r7, lr}
   26e8e:	b084      	sub	sp, #16
   26e90:	af00      	add	r7, sp, #0
   26e92:	0002      	movs	r2, r0
   26e94:	1dfb      	adds	r3, r7, #7
   26e96:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26e98:	1dfb      	adds	r3, r7, #7
   26e9a:	781b      	ldrb	r3, [r3, #0]
   26e9c:	2b00      	cmp	r3, #0
   26e9e:	d109      	bne.n	26eb4 <mem_wr_protect+0x28>
   26ea0:	1dfb      	adds	r3, r7, #7
   26ea2:	781b      	ldrb	r3, [r3, #0]
   26ea4:	4a0a      	ldr	r2, [pc, #40]	; (26ed0 <mem_wr_protect+0x44>)
   26ea6:	015b      	lsls	r3, r3, #5
   26ea8:	18d3      	adds	r3, r2, r3
   26eaa:	330c      	adds	r3, #12
   26eac:	681b      	ldr	r3, [r3, #0]
   26eae:	4798      	blx	r3
   26eb0:	1e03      	subs	r3, r0, #0
   26eb2:	d001      	beq.n	26eb8 <mem_wr_protect+0x2c>
   26eb4:	2201      	movs	r2, #1
   26eb6:	e000      	b.n	26eba <mem_wr_protect+0x2e>
   26eb8:	2200      	movs	r2, #0
  wr_protect =
   26eba:	230f      	movs	r3, #15
   26ebc:	18fb      	adds	r3, r7, r3
   26ebe:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26ec0:	230f      	movs	r3, #15
   26ec2:	18fb      	adds	r3, r7, r3
   26ec4:	781b      	ldrb	r3, [r3, #0]
}
   26ec6:	0018      	movs	r0, r3
   26ec8:	46bd      	mov	sp, r7
   26eca:	b004      	add	sp, #16
   26ecc:	bd80      	pop	{r7, pc}
   26ece:	46c0      	nop			; (mov r8, r8)
   26ed0:	0003a3fc 	.word	0x0003a3fc

00026ed4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26ed4:	b580      	push	{r7, lr}
   26ed6:	b086      	sub	sp, #24
   26ed8:	af00      	add	r7, sp, #0
   26eda:	60b9      	str	r1, [r7, #8]
   26edc:	607a      	str	r2, [r7, #4]
   26ede:	230f      	movs	r3, #15
   26ee0:	18fb      	adds	r3, r7, r3
   26ee2:	1c02      	adds	r2, r0, #0
   26ee4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26ee6:	230f      	movs	r3, #15
   26ee8:	18fb      	adds	r3, r7, r3
   26eea:	781b      	ldrb	r3, [r3, #0]
   26eec:	2b00      	cmp	r3, #0
   26eee:	d10e      	bne.n	26f0e <memory_2_ram+0x3a>
   26ef0:	230f      	movs	r3, #15
   26ef2:	18fb      	adds	r3, r7, r3
   26ef4:	781b      	ldrb	r3, [r3, #0]
   26ef6:	4a0b      	ldr	r2, [pc, #44]	; (26f24 <memory_2_ram+0x50>)
   26ef8:	015b      	lsls	r3, r3, #5
   26efa:	18d3      	adds	r3, r2, r3
   26efc:	3314      	adds	r3, #20
   26efe:	681b      	ldr	r3, [r3, #0]
   26f00:	6879      	ldr	r1, [r7, #4]
   26f02:	68ba      	ldr	r2, [r7, #8]
   26f04:	0010      	movs	r0, r2
   26f06:	4798      	blx	r3
   26f08:	0003      	movs	r3, r0
   26f0a:	001a      	movs	r2, r3
   26f0c:	e000      	b.n	26f10 <memory_2_ram+0x3c>
   26f0e:	2201      	movs	r2, #1
  status =
   26f10:	2317      	movs	r3, #23
   26f12:	18fb      	adds	r3, r7, r3
   26f14:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26f16:	2317      	movs	r3, #23
   26f18:	18fb      	adds	r3, r7, r3
   26f1a:	781b      	ldrb	r3, [r3, #0]
}
   26f1c:	0018      	movs	r0, r3
   26f1e:	46bd      	mov	sp, r7
   26f20:	b006      	add	sp, #24
   26f22:	bd80      	pop	{r7, pc}
   26f24:	0003a3fc 	.word	0x0003a3fc

00026f28 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26f28:	b580      	push	{r7, lr}
   26f2a:	b086      	sub	sp, #24
   26f2c:	af00      	add	r7, sp, #0
   26f2e:	60b9      	str	r1, [r7, #8]
   26f30:	607a      	str	r2, [r7, #4]
   26f32:	230f      	movs	r3, #15
   26f34:	18fb      	adds	r3, r7, r3
   26f36:	1c02      	adds	r2, r0, #0
   26f38:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26f3a:	230f      	movs	r3, #15
   26f3c:	18fb      	adds	r3, r7, r3
   26f3e:	781b      	ldrb	r3, [r3, #0]
   26f40:	2b00      	cmp	r3, #0
   26f42:	d10e      	bne.n	26f62 <ram_2_memory+0x3a>
   26f44:	230f      	movs	r3, #15
   26f46:	18fb      	adds	r3, r7, r3
   26f48:	781b      	ldrb	r3, [r3, #0]
   26f4a:	4a0b      	ldr	r2, [pc, #44]	; (26f78 <ram_2_memory+0x50>)
   26f4c:	015b      	lsls	r3, r3, #5
   26f4e:	18d3      	adds	r3, r2, r3
   26f50:	3318      	adds	r3, #24
   26f52:	681b      	ldr	r3, [r3, #0]
   26f54:	6879      	ldr	r1, [r7, #4]
   26f56:	68ba      	ldr	r2, [r7, #8]
   26f58:	0010      	movs	r0, r2
   26f5a:	4798      	blx	r3
   26f5c:	0003      	movs	r3, r0
   26f5e:	001a      	movs	r2, r3
   26f60:	e000      	b.n	26f64 <ram_2_memory+0x3c>
   26f62:	2201      	movs	r2, #1
  status =
   26f64:	2317      	movs	r3, #23
   26f66:	18fb      	adds	r3, r7, r3
   26f68:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26f6a:	2317      	movs	r3, #23
   26f6c:	18fb      	adds	r3, r7, r3
   26f6e:	781b      	ldrb	r3, [r3, #0]
}
   26f70:	0018      	movs	r0, r3
   26f72:	46bd      	mov	sp, r7
   26f74:	b006      	add	sp, #24
   26f76:	bd80      	pop	{r7, pc}
   26f78:	0003a3fc 	.word	0x0003a3fc

00026f7c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26f7c:	b580      	push	{r7, lr}
   26f7e:	b082      	sub	sp, #8
   26f80:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   26f82:	4b10      	ldr	r3, [pc, #64]	; (26fc4 <cpu_irq_enter_critical+0x48>)
   26f84:	681b      	ldr	r3, [r3, #0]
   26f86:	2b00      	cmp	r3, #0
   26f88:	d112      	bne.n	26fb0 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26f8a:	f3ef 8310 	mrs	r3, PRIMASK
   26f8e:	607b      	str	r3, [r7, #4]
  return(result);
   26f90:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   26f92:	2b00      	cmp	r3, #0
   26f94:	d109      	bne.n	26faa <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26f96:	b672      	cpsid	i
   26f98:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26f9c:	4b0a      	ldr	r3, [pc, #40]	; (26fc8 <cpu_irq_enter_critical+0x4c>)
   26f9e:	2200      	movs	r2, #0
   26fa0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   26fa2:	4b0a      	ldr	r3, [pc, #40]	; (26fcc <cpu_irq_enter_critical+0x50>)
   26fa4:	2201      	movs	r2, #1
   26fa6:	701a      	strb	r2, [r3, #0]
   26fa8:	e002      	b.n	26fb0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26faa:	4b08      	ldr	r3, [pc, #32]	; (26fcc <cpu_irq_enter_critical+0x50>)
   26fac:	2200      	movs	r2, #0
   26fae:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26fb0:	4b04      	ldr	r3, [pc, #16]	; (26fc4 <cpu_irq_enter_critical+0x48>)
   26fb2:	681b      	ldr	r3, [r3, #0]
   26fb4:	1c5a      	adds	r2, r3, #1
   26fb6:	4b03      	ldr	r3, [pc, #12]	; (26fc4 <cpu_irq_enter_critical+0x48>)
   26fb8:	601a      	str	r2, [r3, #0]
}
   26fba:	46c0      	nop			; (mov r8, r8)
   26fbc:	46bd      	mov	sp, r7
   26fbe:	b002      	add	sp, #8
   26fc0:	bd80      	pop	{r7, pc}
   26fc2:	46c0      	nop			; (mov r8, r8)
   26fc4:	200042b8 	.word	0x200042b8
   26fc8:	20000126 	.word	0x20000126
   26fcc:	200042bc 	.word	0x200042bc

00026fd0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   26fd0:	b580      	push	{r7, lr}
   26fd2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   26fd4:	4b0b      	ldr	r3, [pc, #44]	; (27004 <cpu_irq_leave_critical+0x34>)
   26fd6:	681b      	ldr	r3, [r3, #0]
   26fd8:	1e5a      	subs	r2, r3, #1
   26fda:	4b0a      	ldr	r3, [pc, #40]	; (27004 <cpu_irq_leave_critical+0x34>)
   26fdc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   26fde:	4b09      	ldr	r3, [pc, #36]	; (27004 <cpu_irq_leave_critical+0x34>)
   26fe0:	681b      	ldr	r3, [r3, #0]
   26fe2:	2b00      	cmp	r3, #0
   26fe4:	d10a      	bne.n	26ffc <cpu_irq_leave_critical+0x2c>
   26fe6:	4b08      	ldr	r3, [pc, #32]	; (27008 <cpu_irq_leave_critical+0x38>)
   26fe8:	781b      	ldrb	r3, [r3, #0]
   26fea:	b2db      	uxtb	r3, r3
   26fec:	2b00      	cmp	r3, #0
   26fee:	d005      	beq.n	26ffc <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   26ff0:	4b06      	ldr	r3, [pc, #24]	; (2700c <cpu_irq_leave_critical+0x3c>)
   26ff2:	2201      	movs	r2, #1
   26ff4:	701a      	strb	r2, [r3, #0]
   26ff6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   26ffa:	b662      	cpsie	i
	}
}
   26ffc:	46c0      	nop			; (mov r8, r8)
   26ffe:	46bd      	mov	sp, r7
   27000:	bd80      	pop	{r7, pc}
   27002:	46c0      	nop			; (mov r8, r8)
   27004:	200042b8 	.word	0x200042b8
   27008:	200042bc 	.word	0x200042bc
   2700c:	20000126 	.word	0x20000126

00027010 <system_pinmux_get_group_from_gpio_pin>:
{
   27010:	b580      	push	{r7, lr}
   27012:	b084      	sub	sp, #16
   27014:	af00      	add	r7, sp, #0
   27016:	0002      	movs	r2, r0
   27018:	1dfb      	adds	r3, r7, #7
   2701a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2701c:	230f      	movs	r3, #15
   2701e:	18fb      	adds	r3, r7, r3
   27020:	1dfa      	adds	r2, r7, #7
   27022:	7812      	ldrb	r2, [r2, #0]
   27024:	09d2      	lsrs	r2, r2, #7
   27026:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   27028:	230e      	movs	r3, #14
   2702a:	18fb      	adds	r3, r7, r3
   2702c:	1dfa      	adds	r2, r7, #7
   2702e:	7812      	ldrb	r2, [r2, #0]
   27030:	0952      	lsrs	r2, r2, #5
   27032:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27034:	4b0d      	ldr	r3, [pc, #52]	; (2706c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27036:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   27038:	230f      	movs	r3, #15
   2703a:	18fb      	adds	r3, r7, r3
   2703c:	781b      	ldrb	r3, [r3, #0]
   2703e:	2b00      	cmp	r3, #0
   27040:	d10f      	bne.n	27062 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   27042:	230f      	movs	r3, #15
   27044:	18fb      	adds	r3, r7, r3
   27046:	781b      	ldrb	r3, [r3, #0]
   27048:	009b      	lsls	r3, r3, #2
   2704a:	2210      	movs	r2, #16
   2704c:	4694      	mov	ip, r2
   2704e:	44bc      	add	ip, r7
   27050:	4463      	add	r3, ip
   27052:	3b08      	subs	r3, #8
   27054:	681a      	ldr	r2, [r3, #0]
   27056:	230e      	movs	r3, #14
   27058:	18fb      	adds	r3, r7, r3
   2705a:	781b      	ldrb	r3, [r3, #0]
   2705c:	01db      	lsls	r3, r3, #7
   2705e:	18d3      	adds	r3, r2, r3
   27060:	e000      	b.n	27064 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   27062:	2300      	movs	r3, #0
}
   27064:	0018      	movs	r0, r3
   27066:	46bd      	mov	sp, r7
   27068:	b004      	add	sp, #16
   2706a:	bd80      	pop	{r7, pc}
   2706c:	41004400 	.word	0x41004400

00027070 <port_get_group_from_gpio_pin>:
{
   27070:	b580      	push	{r7, lr}
   27072:	b082      	sub	sp, #8
   27074:	af00      	add	r7, sp, #0
   27076:	0002      	movs	r2, r0
   27078:	1dfb      	adds	r3, r7, #7
   2707a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2707c:	1dfb      	adds	r3, r7, #7
   2707e:	781b      	ldrb	r3, [r3, #0]
   27080:	0018      	movs	r0, r3
   27082:	4b03      	ldr	r3, [pc, #12]	; (27090 <port_get_group_from_gpio_pin+0x20>)
   27084:	4798      	blx	r3
   27086:	0003      	movs	r3, r0
}
   27088:	0018      	movs	r0, r3
   2708a:	46bd      	mov	sp, r7
   2708c:	b002      	add	sp, #8
   2708e:	bd80      	pop	{r7, pc}
   27090:	00027011 	.word	0x00027011

00027094 <port_get_config_defaults>:
{
   27094:	b580      	push	{r7, lr}
   27096:	b082      	sub	sp, #8
   27098:	af00      	add	r7, sp, #0
   2709a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2709c:	687b      	ldr	r3, [r7, #4]
   2709e:	2200      	movs	r2, #0
   270a0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   270a2:	687b      	ldr	r3, [r7, #4]
   270a4:	2201      	movs	r2, #1
   270a6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   270a8:	687b      	ldr	r3, [r7, #4]
   270aa:	2200      	movs	r2, #0
   270ac:	709a      	strb	r2, [r3, #2]
}
   270ae:	46c0      	nop			; (mov r8, r8)
   270b0:	46bd      	mov	sp, r7
   270b2:	b002      	add	sp, #8
   270b4:	bd80      	pop	{r7, pc}
	...

000270b8 <port_pin_set_output_level>:
{
   270b8:	b580      	push	{r7, lr}
   270ba:	b084      	sub	sp, #16
   270bc:	af00      	add	r7, sp, #0
   270be:	0002      	movs	r2, r0
   270c0:	1dfb      	adds	r3, r7, #7
   270c2:	701a      	strb	r2, [r3, #0]
   270c4:	1dbb      	adds	r3, r7, #6
   270c6:	1c0a      	adds	r2, r1, #0
   270c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   270ca:	1dfb      	adds	r3, r7, #7
   270cc:	781b      	ldrb	r3, [r3, #0]
   270ce:	0018      	movs	r0, r3
   270d0:	4b0d      	ldr	r3, [pc, #52]	; (27108 <port_pin_set_output_level+0x50>)
   270d2:	4798      	blx	r3
   270d4:	0003      	movs	r3, r0
   270d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   270d8:	1dfb      	adds	r3, r7, #7
   270da:	781b      	ldrb	r3, [r3, #0]
   270dc:	221f      	movs	r2, #31
   270de:	4013      	ands	r3, r2
   270e0:	2201      	movs	r2, #1
   270e2:	409a      	lsls	r2, r3
   270e4:	0013      	movs	r3, r2
   270e6:	60bb      	str	r3, [r7, #8]
	if (level) {
   270e8:	1dbb      	adds	r3, r7, #6
   270ea:	781b      	ldrb	r3, [r3, #0]
   270ec:	2b00      	cmp	r3, #0
   270ee:	d003      	beq.n	270f8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   270f0:	68fb      	ldr	r3, [r7, #12]
   270f2:	68ba      	ldr	r2, [r7, #8]
   270f4:	619a      	str	r2, [r3, #24]
}
   270f6:	e002      	b.n	270fe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   270f8:	68fb      	ldr	r3, [r7, #12]
   270fa:	68ba      	ldr	r2, [r7, #8]
   270fc:	615a      	str	r2, [r3, #20]
}
   270fe:	46c0      	nop			; (mov r8, r8)
   27100:	46bd      	mov	sp, r7
   27102:	b004      	add	sp, #16
   27104:	bd80      	pop	{r7, pc}
   27106:	46c0      	nop			; (mov r8, r8)
   27108:	00027071 	.word	0x00027071

0002710c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   2710c:	b580      	push	{r7, lr}
   2710e:	b082      	sub	sp, #8
   27110:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   27112:	1d3b      	adds	r3, r7, #4
   27114:	0018      	movs	r0, r3
   27116:	4b0e      	ldr	r3, [pc, #56]	; (27150 <system_board_init+0x44>)
   27118:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2711a:	1d3b      	adds	r3, r7, #4
   2711c:	2201      	movs	r2, #1
   2711e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   27120:	1d3b      	adds	r3, r7, #4
   27122:	0019      	movs	r1, r3
   27124:	2017      	movs	r0, #23
   27126:	4b0b      	ldr	r3, [pc, #44]	; (27154 <system_board_init+0x48>)
   27128:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   2712a:	2101      	movs	r1, #1
   2712c:	2017      	movs	r0, #23
   2712e:	4b0a      	ldr	r3, [pc, #40]	; (27158 <system_board_init+0x4c>)
   27130:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   27132:	1d3b      	adds	r3, r7, #4
   27134:	2200      	movs	r2, #0
   27136:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   27138:	1d3b      	adds	r3, r7, #4
   2713a:	2201      	movs	r2, #1
   2713c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2713e:	1d3b      	adds	r3, r7, #4
   27140:	0019      	movs	r1, r3
   27142:	2037      	movs	r0, #55	; 0x37
   27144:	4b03      	ldr	r3, [pc, #12]	; (27154 <system_board_init+0x48>)
   27146:	4798      	blx	r3
}
   27148:	46c0      	nop			; (mov r8, r8)
   2714a:	46bd      	mov	sp, r7
   2714c:	b002      	add	sp, #8
   2714e:	bd80      	pop	{r7, pc}
   27150:	00027095 	.word	0x00027095
   27154:	00027781 	.word	0x00027781
   27158:	000270b9 	.word	0x000270b9

0002715c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   2715c:	b580      	push	{r7, lr}
   2715e:	b084      	sub	sp, #16
   27160:	af00      	add	r7, sp, #0
   27162:	0002      	movs	r2, r0
   27164:	1dfb      	adds	r3, r7, #7
   27166:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   27168:	230f      	movs	r3, #15
   2716a:	18fb      	adds	r3, r7, r3
   2716c:	1dfa      	adds	r2, r7, #7
   2716e:	7812      	ldrb	r2, [r2, #0]
   27170:	0952      	lsrs	r2, r2, #5
   27172:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   27174:	230f      	movs	r3, #15
   27176:	18fb      	adds	r3, r7, r3
   27178:	781b      	ldrb	r3, [r3, #0]
   2717a:	2b00      	cmp	r3, #0
   2717c:	d10c      	bne.n	27198 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2717e:	4b09      	ldr	r3, [pc, #36]	; (271a4 <_extint_get_eic_from_channel+0x48>)
   27180:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   27182:	230f      	movs	r3, #15
   27184:	18fb      	adds	r3, r7, r3
   27186:	781b      	ldrb	r3, [r3, #0]
   27188:	009b      	lsls	r3, r3, #2
   2718a:	2210      	movs	r2, #16
   2718c:	4694      	mov	ip, r2
   2718e:	44bc      	add	ip, r7
   27190:	4463      	add	r3, ip
   27192:	3b08      	subs	r3, #8
   27194:	681b      	ldr	r3, [r3, #0]
   27196:	e000      	b.n	2719a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   27198:	2300      	movs	r3, #0
	}
}
   2719a:	0018      	movs	r0, r3
   2719c:	46bd      	mov	sp, r7
   2719e:	b004      	add	sp, #16
   271a0:	bd80      	pop	{r7, pc}
   271a2:	46c0      	nop			; (mov r8, r8)
   271a4:	40001800 	.word	0x40001800

000271a8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   271a8:	b580      	push	{r7, lr}
   271aa:	b084      	sub	sp, #16
   271ac:	af00      	add	r7, sp, #0
   271ae:	0002      	movs	r2, r0
   271b0:	1dfb      	adds	r3, r7, #7
   271b2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   271b4:	1dfb      	adds	r3, r7, #7
   271b6:	781b      	ldrb	r3, [r3, #0]
   271b8:	0018      	movs	r0, r3
   271ba:	4b0b      	ldr	r3, [pc, #44]	; (271e8 <extint_chan_is_detected+0x40>)
   271bc:	4798      	blx	r3
   271be:	0003      	movs	r3, r0
   271c0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   271c2:	1dfb      	adds	r3, r7, #7
   271c4:	781b      	ldrb	r3, [r3, #0]
   271c6:	221f      	movs	r2, #31
   271c8:	4013      	ands	r3, r2
   271ca:	2201      	movs	r2, #1
   271cc:	409a      	lsls	r2, r3
   271ce:	0013      	movs	r3, r2
   271d0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   271d2:	68fb      	ldr	r3, [r7, #12]
   271d4:	691b      	ldr	r3, [r3, #16]
   271d6:	68ba      	ldr	r2, [r7, #8]
   271d8:	4013      	ands	r3, r2
   271da:	1e5a      	subs	r2, r3, #1
   271dc:	4193      	sbcs	r3, r2
   271de:	b2db      	uxtb	r3, r3
}
   271e0:	0018      	movs	r0, r3
   271e2:	46bd      	mov	sp, r7
   271e4:	b004      	add	sp, #16
   271e6:	bd80      	pop	{r7, pc}
   271e8:	0002715d 	.word	0x0002715d

000271ec <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   271ec:	b580      	push	{r7, lr}
   271ee:	b084      	sub	sp, #16
   271f0:	af00      	add	r7, sp, #0
   271f2:	0002      	movs	r2, r0
   271f4:	1dfb      	adds	r3, r7, #7
   271f6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   271f8:	1dfb      	adds	r3, r7, #7
   271fa:	781b      	ldrb	r3, [r3, #0]
   271fc:	0018      	movs	r0, r3
   271fe:	4b09      	ldr	r3, [pc, #36]	; (27224 <extint_chan_clear_detected+0x38>)
   27200:	4798      	blx	r3
   27202:	0003      	movs	r3, r0
   27204:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   27206:	1dfb      	adds	r3, r7, #7
   27208:	781b      	ldrb	r3, [r3, #0]
   2720a:	221f      	movs	r2, #31
   2720c:	4013      	ands	r3, r2
   2720e:	2201      	movs	r2, #1
   27210:	409a      	lsls	r2, r3
   27212:	0013      	movs	r3, r2
   27214:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   27216:	68fb      	ldr	r3, [r7, #12]
   27218:	68ba      	ldr	r2, [r7, #8]
   2721a:	611a      	str	r2, [r3, #16]
}
   2721c:	46c0      	nop			; (mov r8, r8)
   2721e:	46bd      	mov	sp, r7
   27220:	b004      	add	sp, #16
   27222:	bd80      	pop	{r7, pc}
   27224:	0002715d 	.word	0x0002715d

00027228 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27228:	b580      	push	{r7, lr}
   2722a:	b082      	sub	sp, #8
   2722c:	af00      	add	r7, sp, #0
   2722e:	6078      	str	r0, [r7, #4]
   27230:	0008      	movs	r0, r1
   27232:	0011      	movs	r1, r2
   27234:	1cfb      	adds	r3, r7, #3
   27236:	1c02      	adds	r2, r0, #0
   27238:	701a      	strb	r2, [r3, #0]
   2723a:	1cbb      	adds	r3, r7, #2
   2723c:	1c0a      	adds	r2, r1, #0
   2723e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   27240:	1cbb      	adds	r3, r7, #2
   27242:	781b      	ldrb	r3, [r3, #0]
   27244:	2b00      	cmp	r3, #0
   27246:	d001      	beq.n	2724c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   27248:	2317      	movs	r3, #23
   2724a:	e019      	b.n	27280 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   2724c:	1cfb      	adds	r3, r7, #3
   2724e:	781a      	ldrb	r2, [r3, #0]
   27250:	4b0d      	ldr	r3, [pc, #52]	; (27288 <extint_register_callback+0x60>)
   27252:	0092      	lsls	r2, r2, #2
   27254:	58d3      	ldr	r3, [r2, r3]
   27256:	2b00      	cmp	r3, #0
   27258:	d107      	bne.n	2726a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2725a:	1cfb      	adds	r3, r7, #3
   2725c:	781a      	ldrb	r2, [r3, #0]
   2725e:	4b0a      	ldr	r3, [pc, #40]	; (27288 <extint_register_callback+0x60>)
   27260:	0092      	lsls	r2, r2, #2
   27262:	6879      	ldr	r1, [r7, #4]
   27264:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   27266:	2300      	movs	r3, #0
   27268:	e00a      	b.n	27280 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2726a:	1cfb      	adds	r3, r7, #3
   2726c:	781a      	ldrb	r2, [r3, #0]
   2726e:	4b06      	ldr	r3, [pc, #24]	; (27288 <extint_register_callback+0x60>)
   27270:	0092      	lsls	r2, r2, #2
   27272:	58d2      	ldr	r2, [r2, r3]
   27274:	687b      	ldr	r3, [r7, #4]
   27276:	429a      	cmp	r2, r3
   27278:	d101      	bne.n	2727e <extint_register_callback+0x56>
		return STATUS_OK;
   2727a:	2300      	movs	r3, #0
   2727c:	e000      	b.n	27280 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2727e:	231d      	movs	r3, #29
}
   27280:	0018      	movs	r0, r3
   27282:	46bd      	mov	sp, r7
   27284:	b002      	add	sp, #8
   27286:	bd80      	pop	{r7, pc}
   27288:	20005c54 	.word	0x20005c54

0002728c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2728c:	b580      	push	{r7, lr}
   2728e:	b084      	sub	sp, #16
   27290:	af00      	add	r7, sp, #0
   27292:	0002      	movs	r2, r0
   27294:	1dfb      	adds	r3, r7, #7
   27296:	701a      	strb	r2, [r3, #0]
   27298:	1dbb      	adds	r3, r7, #6
   2729a:	1c0a      	adds	r2, r1, #0
   2729c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2729e:	1dbb      	adds	r3, r7, #6
   272a0:	781b      	ldrb	r3, [r3, #0]
   272a2:	2b00      	cmp	r3, #0
   272a4:	d10e      	bne.n	272c4 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   272a6:	1dfb      	adds	r3, r7, #7
   272a8:	781b      	ldrb	r3, [r3, #0]
   272aa:	0018      	movs	r0, r3
   272ac:	4b08      	ldr	r3, [pc, #32]	; (272d0 <extint_chan_enable_callback+0x44>)
   272ae:	4798      	blx	r3
   272b0:	0003      	movs	r3, r0
   272b2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   272b4:	1dfb      	adds	r3, r7, #7
   272b6:	781b      	ldrb	r3, [r3, #0]
   272b8:	2201      	movs	r2, #1
   272ba:	409a      	lsls	r2, r3
   272bc:	68fb      	ldr	r3, [r7, #12]
   272be:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   272c0:	2300      	movs	r3, #0
   272c2:	e000      	b.n	272c6 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   272c4:	2317      	movs	r3, #23
}
   272c6:	0018      	movs	r0, r3
   272c8:	46bd      	mov	sp, r7
   272ca:	b004      	add	sp, #16
   272cc:	bd80      	pop	{r7, pc}
   272ce:	46c0      	nop			; (mov r8, r8)
   272d0:	0002715d 	.word	0x0002715d

000272d4 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   272d4:	b580      	push	{r7, lr}
   272d6:	b084      	sub	sp, #16
   272d8:	af00      	add	r7, sp, #0
   272da:	0002      	movs	r2, r0
   272dc:	1dfb      	adds	r3, r7, #7
   272de:	701a      	strb	r2, [r3, #0]
   272e0:	1dbb      	adds	r3, r7, #6
   272e2:	1c0a      	adds	r2, r1, #0
   272e4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   272e6:	1dbb      	adds	r3, r7, #6
   272e8:	781b      	ldrb	r3, [r3, #0]
   272ea:	2b00      	cmp	r3, #0
   272ec:	d10e      	bne.n	2730c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   272ee:	1dfb      	adds	r3, r7, #7
   272f0:	781b      	ldrb	r3, [r3, #0]
   272f2:	0018      	movs	r0, r3
   272f4:	4b08      	ldr	r3, [pc, #32]	; (27318 <extint_chan_disable_callback+0x44>)
   272f6:	4798      	blx	r3
   272f8:	0003      	movs	r3, r0
   272fa:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   272fc:	1dfb      	adds	r3, r7, #7
   272fe:	781b      	ldrb	r3, [r3, #0]
   27300:	2201      	movs	r2, #1
   27302:	409a      	lsls	r2, r3
   27304:	68fb      	ldr	r3, [r7, #12]
   27306:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   27308:	2300      	movs	r3, #0
   2730a:	e000      	b.n	2730e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2730c:	2317      	movs	r3, #23
}
   2730e:	0018      	movs	r0, r3
   27310:	46bd      	mov	sp, r7
   27312:	b004      	add	sp, #16
   27314:	bd80      	pop	{r7, pc}
   27316:	46c0      	nop			; (mov r8, r8)
   27318:	0002715d 	.word	0x0002715d

0002731c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   2731c:	b580      	push	{r7, lr}
   2731e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   27320:	4b15      	ldr	r3, [pc, #84]	; (27378 <EIC_Handler+0x5c>)
   27322:	2200      	movs	r2, #0
   27324:	701a      	strb	r2, [r3, #0]
   27326:	e020      	b.n	2736a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   27328:	4b13      	ldr	r3, [pc, #76]	; (27378 <EIC_Handler+0x5c>)
   2732a:	781b      	ldrb	r3, [r3, #0]
   2732c:	0018      	movs	r0, r3
   2732e:	4b13      	ldr	r3, [pc, #76]	; (2737c <EIC_Handler+0x60>)
   27330:	4798      	blx	r3
   27332:	1e03      	subs	r3, r0, #0
   27334:	d013      	beq.n	2735e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   27336:	4b10      	ldr	r3, [pc, #64]	; (27378 <EIC_Handler+0x5c>)
   27338:	781b      	ldrb	r3, [r3, #0]
   2733a:	0018      	movs	r0, r3
   2733c:	4b10      	ldr	r3, [pc, #64]	; (27380 <EIC_Handler+0x64>)
   2733e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   27340:	4b0d      	ldr	r3, [pc, #52]	; (27378 <EIC_Handler+0x5c>)
   27342:	781b      	ldrb	r3, [r3, #0]
   27344:	001a      	movs	r2, r3
   27346:	4b0f      	ldr	r3, [pc, #60]	; (27384 <EIC_Handler+0x68>)
   27348:	0092      	lsls	r2, r2, #2
   2734a:	58d3      	ldr	r3, [r2, r3]
   2734c:	2b00      	cmp	r3, #0
   2734e:	d006      	beq.n	2735e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   27350:	4b09      	ldr	r3, [pc, #36]	; (27378 <EIC_Handler+0x5c>)
   27352:	781b      	ldrb	r3, [r3, #0]
   27354:	001a      	movs	r2, r3
   27356:	4b0b      	ldr	r3, [pc, #44]	; (27384 <EIC_Handler+0x68>)
   27358:	0092      	lsls	r2, r2, #2
   2735a:	58d3      	ldr	r3, [r2, r3]
   2735c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2735e:	4b06      	ldr	r3, [pc, #24]	; (27378 <EIC_Handler+0x5c>)
   27360:	781b      	ldrb	r3, [r3, #0]
   27362:	3301      	adds	r3, #1
   27364:	b2da      	uxtb	r2, r3
   27366:	4b04      	ldr	r3, [pc, #16]	; (27378 <EIC_Handler+0x5c>)
   27368:	701a      	strb	r2, [r3, #0]
   2736a:	4b03      	ldr	r3, [pc, #12]	; (27378 <EIC_Handler+0x5c>)
   2736c:	781b      	ldrb	r3, [r3, #0]
   2736e:	2b0f      	cmp	r3, #15
   27370:	d9da      	bls.n	27328 <EIC_Handler+0xc>
			}
		}
	}
}
   27372:	46c0      	nop			; (mov r8, r8)
   27374:	46bd      	mov	sp, r7
   27376:	bd80      	pop	{r7, pc}
   27378:	20005c50 	.word	0x20005c50
   2737c:	000271a9 	.word	0x000271a9
   27380:	000271ed 	.word	0x000271ed
   27384:	20005c54 	.word	0x20005c54

00027388 <system_gclk_chan_get_config_defaults>:
{
   27388:	b580      	push	{r7, lr}
   2738a:	b082      	sub	sp, #8
   2738c:	af00      	add	r7, sp, #0
   2738e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27390:	687b      	ldr	r3, [r7, #4]
   27392:	2200      	movs	r2, #0
   27394:	701a      	strb	r2, [r3, #0]
}
   27396:	46c0      	nop			; (mov r8, r8)
   27398:	46bd      	mov	sp, r7
   2739a:	b002      	add	sp, #8
   2739c:	bd80      	pop	{r7, pc}
	...

000273a0 <system_apb_clock_set_mask>:
{
   273a0:	b580      	push	{r7, lr}
   273a2:	b082      	sub	sp, #8
   273a4:	af00      	add	r7, sp, #0
   273a6:	0002      	movs	r2, r0
   273a8:	6039      	str	r1, [r7, #0]
   273aa:	1dfb      	adds	r3, r7, #7
   273ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   273ae:	1dfb      	adds	r3, r7, #7
   273b0:	781b      	ldrb	r3, [r3, #0]
   273b2:	2b01      	cmp	r3, #1
   273b4:	d00a      	beq.n	273cc <system_apb_clock_set_mask+0x2c>
   273b6:	2b02      	cmp	r3, #2
   273b8:	d00f      	beq.n	273da <system_apb_clock_set_mask+0x3a>
   273ba:	2b00      	cmp	r3, #0
   273bc:	d114      	bne.n	273e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   273be:	4b0e      	ldr	r3, [pc, #56]	; (273f8 <system_apb_clock_set_mask+0x58>)
   273c0:	4a0d      	ldr	r2, [pc, #52]	; (273f8 <system_apb_clock_set_mask+0x58>)
   273c2:	6991      	ldr	r1, [r2, #24]
   273c4:	683a      	ldr	r2, [r7, #0]
   273c6:	430a      	orrs	r2, r1
   273c8:	619a      	str	r2, [r3, #24]
			break;
   273ca:	e00f      	b.n	273ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   273cc:	4b0a      	ldr	r3, [pc, #40]	; (273f8 <system_apb_clock_set_mask+0x58>)
   273ce:	4a0a      	ldr	r2, [pc, #40]	; (273f8 <system_apb_clock_set_mask+0x58>)
   273d0:	69d1      	ldr	r1, [r2, #28]
   273d2:	683a      	ldr	r2, [r7, #0]
   273d4:	430a      	orrs	r2, r1
   273d6:	61da      	str	r2, [r3, #28]
			break;
   273d8:	e008      	b.n	273ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   273da:	4b07      	ldr	r3, [pc, #28]	; (273f8 <system_apb_clock_set_mask+0x58>)
   273dc:	4a06      	ldr	r2, [pc, #24]	; (273f8 <system_apb_clock_set_mask+0x58>)
   273de:	6a11      	ldr	r1, [r2, #32]
   273e0:	683a      	ldr	r2, [r7, #0]
   273e2:	430a      	orrs	r2, r1
   273e4:	621a      	str	r2, [r3, #32]
			break;
   273e6:	e001      	b.n	273ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   273e8:	2317      	movs	r3, #23
   273ea:	e000      	b.n	273ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   273ec:	2300      	movs	r3, #0
}
   273ee:	0018      	movs	r0, r3
   273f0:	46bd      	mov	sp, r7
   273f2:	b002      	add	sp, #8
   273f4:	bd80      	pop	{r7, pc}
   273f6:	46c0      	nop			; (mov r8, r8)
   273f8:	40000400 	.word	0x40000400

000273fc <system_pinmux_get_config_defaults>:
{
   273fc:	b580      	push	{r7, lr}
   273fe:	b082      	sub	sp, #8
   27400:	af00      	add	r7, sp, #0
   27402:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27404:	687b      	ldr	r3, [r7, #4]
   27406:	2280      	movs	r2, #128	; 0x80
   27408:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2740a:	687b      	ldr	r3, [r7, #4]
   2740c:	2200      	movs	r2, #0
   2740e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27410:	687b      	ldr	r3, [r7, #4]
   27412:	2201      	movs	r2, #1
   27414:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27416:	687b      	ldr	r3, [r7, #4]
   27418:	2200      	movs	r2, #0
   2741a:	70da      	strb	r2, [r3, #3]
}
   2741c:	46c0      	nop			; (mov r8, r8)
   2741e:	46bd      	mov	sp, r7
   27420:	b002      	add	sp, #8
   27422:	bd80      	pop	{r7, pc}

00027424 <system_interrupt_enable>:
{
   27424:	b580      	push	{r7, lr}
   27426:	b082      	sub	sp, #8
   27428:	af00      	add	r7, sp, #0
   2742a:	0002      	movs	r2, r0
   2742c:	1dfb      	adds	r3, r7, #7
   2742e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27430:	4b06      	ldr	r3, [pc, #24]	; (2744c <system_interrupt_enable+0x28>)
   27432:	1dfa      	adds	r2, r7, #7
   27434:	7812      	ldrb	r2, [r2, #0]
   27436:	0011      	movs	r1, r2
   27438:	221f      	movs	r2, #31
   2743a:	400a      	ands	r2, r1
   2743c:	2101      	movs	r1, #1
   2743e:	4091      	lsls	r1, r2
   27440:	000a      	movs	r2, r1
   27442:	601a      	str	r2, [r3, #0]
}
   27444:	46c0      	nop			; (mov r8, r8)
   27446:	46bd      	mov	sp, r7
   27448:	b002      	add	sp, #8
   2744a:	bd80      	pop	{r7, pc}
   2744c:	e000e100 	.word	0xe000e100

00027450 <_extint_get_eic_from_channel>:
{
   27450:	b580      	push	{r7, lr}
   27452:	b084      	sub	sp, #16
   27454:	af00      	add	r7, sp, #0
   27456:	0002      	movs	r2, r0
   27458:	1dfb      	adds	r3, r7, #7
   2745a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2745c:	230f      	movs	r3, #15
   2745e:	18fb      	adds	r3, r7, r3
   27460:	1dfa      	adds	r2, r7, #7
   27462:	7812      	ldrb	r2, [r2, #0]
   27464:	0952      	lsrs	r2, r2, #5
   27466:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   27468:	230f      	movs	r3, #15
   2746a:	18fb      	adds	r3, r7, r3
   2746c:	781b      	ldrb	r3, [r3, #0]
   2746e:	2b00      	cmp	r3, #0
   27470:	d10c      	bne.n	2748c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27472:	4b09      	ldr	r3, [pc, #36]	; (27498 <_extint_get_eic_from_channel+0x48>)
   27474:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   27476:	230f      	movs	r3, #15
   27478:	18fb      	adds	r3, r7, r3
   2747a:	781b      	ldrb	r3, [r3, #0]
   2747c:	009b      	lsls	r3, r3, #2
   2747e:	2210      	movs	r2, #16
   27480:	4694      	mov	ip, r2
   27482:	44bc      	add	ip, r7
   27484:	4463      	add	r3, ip
   27486:	3b08      	subs	r3, #8
   27488:	681b      	ldr	r3, [r3, #0]
   2748a:	e000      	b.n	2748e <_extint_get_eic_from_channel+0x3e>
		return NULL;
   2748c:	2300      	movs	r3, #0
}
   2748e:	0018      	movs	r0, r3
   27490:	46bd      	mov	sp, r7
   27492:	b004      	add	sp, #16
   27494:	bd80      	pop	{r7, pc}
   27496:	46c0      	nop			; (mov r8, r8)
   27498:	40001800 	.word	0x40001800

0002749c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   2749c:	b580      	push	{r7, lr}
   2749e:	b082      	sub	sp, #8
   274a0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   274a2:	4b0f      	ldr	r3, [pc, #60]	; (274e0 <extint_is_syncing+0x44>)
   274a4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   274a6:	2300      	movs	r3, #0
   274a8:	607b      	str	r3, [r7, #4]
   274aa:	e011      	b.n	274d0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   274ac:	687b      	ldr	r3, [r7, #4]
   274ae:	009b      	lsls	r3, r3, #2
   274b0:	2208      	movs	r2, #8
   274b2:	4694      	mov	ip, r2
   274b4:	44bc      	add	ip, r7
   274b6:	4463      	add	r3, ip
   274b8:	3b08      	subs	r3, #8
   274ba:	681b      	ldr	r3, [r3, #0]
   274bc:	785b      	ldrb	r3, [r3, #1]
   274be:	b2db      	uxtb	r3, r3
   274c0:	b25b      	sxtb	r3, r3
   274c2:	2b00      	cmp	r3, #0
   274c4:	da01      	bge.n	274ca <extint_is_syncing+0x2e>
			return true;
   274c6:	2301      	movs	r3, #1
   274c8:	e006      	b.n	274d8 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   274ca:	687b      	ldr	r3, [r7, #4]
   274cc:	3301      	adds	r3, #1
   274ce:	607b      	str	r3, [r7, #4]
   274d0:	687b      	ldr	r3, [r7, #4]
   274d2:	2b00      	cmp	r3, #0
   274d4:	d0ea      	beq.n	274ac <extint_is_syncing+0x10>
		}
	}
	return false;
   274d6:	2300      	movs	r3, #0
}
   274d8:	0018      	movs	r0, r3
   274da:	46bd      	mov	sp, r7
   274dc:	b002      	add	sp, #8
   274de:	bd80      	pop	{r7, pc}
   274e0:	40001800 	.word	0x40001800

000274e4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   274e4:	b580      	push	{r7, lr}
   274e6:	b084      	sub	sp, #16
   274e8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   274ea:	4b2d      	ldr	r3, [pc, #180]	; (275a0 <_system_extint_init+0xbc>)
   274ec:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   274ee:	2140      	movs	r1, #64	; 0x40
   274f0:	2000      	movs	r0, #0
   274f2:	4b2c      	ldr	r3, [pc, #176]	; (275a4 <_system_extint_init+0xc0>)
   274f4:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   274f6:	003b      	movs	r3, r7
   274f8:	0018      	movs	r0, r3
   274fa:	4b2b      	ldr	r3, [pc, #172]	; (275a8 <_system_extint_init+0xc4>)
   274fc:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   274fe:	003b      	movs	r3, r7
   27500:	2200      	movs	r2, #0
   27502:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   27504:	003b      	movs	r3, r7
   27506:	0019      	movs	r1, r3
   27508:	2005      	movs	r0, #5
   2750a:	4b28      	ldr	r3, [pc, #160]	; (275ac <_system_extint_init+0xc8>)
   2750c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2750e:	2005      	movs	r0, #5
   27510:	4b27      	ldr	r3, [pc, #156]	; (275b0 <_system_extint_init+0xcc>)
   27512:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27514:	2300      	movs	r3, #0
   27516:	60fb      	str	r3, [r7, #12]
   27518:	e018      	b.n	2754c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   2751a:	68fb      	ldr	r3, [r7, #12]
   2751c:	009b      	lsls	r3, r3, #2
   2751e:	2210      	movs	r2, #16
   27520:	4694      	mov	ip, r2
   27522:	44bc      	add	ip, r7
   27524:	4463      	add	r3, ip
   27526:	3b0c      	subs	r3, #12
   27528:	681a      	ldr	r2, [r3, #0]
   2752a:	68fb      	ldr	r3, [r7, #12]
   2752c:	009b      	lsls	r3, r3, #2
   2752e:	2110      	movs	r1, #16
   27530:	468c      	mov	ip, r1
   27532:	44bc      	add	ip, r7
   27534:	4463      	add	r3, ip
   27536:	3b0c      	subs	r3, #12
   27538:	681b      	ldr	r3, [r3, #0]
   2753a:	781b      	ldrb	r3, [r3, #0]
   2753c:	b2db      	uxtb	r3, r3
   2753e:	2101      	movs	r1, #1
   27540:	430b      	orrs	r3, r1
   27542:	b2db      	uxtb	r3, r3
   27544:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27546:	68fb      	ldr	r3, [r7, #12]
   27548:	3301      	adds	r3, #1
   2754a:	60fb      	str	r3, [r7, #12]
   2754c:	68fb      	ldr	r3, [r7, #12]
   2754e:	2b00      	cmp	r3, #0
   27550:	d0e3      	beq.n	2751a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   27552:	46c0      	nop			; (mov r8, r8)
   27554:	4b17      	ldr	r3, [pc, #92]	; (275b4 <_system_extint_init+0xd0>)
   27556:	4798      	blx	r3
   27558:	1e03      	subs	r3, r0, #0
   2755a:	d1fb      	bne.n	27554 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2755c:	230b      	movs	r3, #11
   2755e:	18fb      	adds	r3, r7, r3
   27560:	2200      	movs	r2, #0
   27562:	701a      	strb	r2, [r3, #0]
   27564:	e00d      	b.n	27582 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   27566:	230b      	movs	r3, #11
   27568:	18fb      	adds	r3, r7, r3
   2756a:	781a      	ldrb	r2, [r3, #0]
   2756c:	4b12      	ldr	r3, [pc, #72]	; (275b8 <_system_extint_init+0xd4>)
   2756e:	0092      	lsls	r2, r2, #2
   27570:	2100      	movs	r1, #0
   27572:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   27574:	230b      	movs	r3, #11
   27576:	18fb      	adds	r3, r7, r3
   27578:	781a      	ldrb	r2, [r3, #0]
   2757a:	230b      	movs	r3, #11
   2757c:	18fb      	adds	r3, r7, r3
   2757e:	3201      	adds	r2, #1
   27580:	701a      	strb	r2, [r3, #0]
   27582:	230b      	movs	r3, #11
   27584:	18fb      	adds	r3, r7, r3
   27586:	781b      	ldrb	r3, [r3, #0]
   27588:	2b0f      	cmp	r3, #15
   2758a:	d9ec      	bls.n	27566 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   2758c:	2004      	movs	r0, #4
   2758e:	4b0b      	ldr	r3, [pc, #44]	; (275bc <_system_extint_init+0xd8>)
   27590:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   27592:	4b0b      	ldr	r3, [pc, #44]	; (275c0 <_system_extint_init+0xdc>)
   27594:	4798      	blx	r3
}
   27596:	46c0      	nop			; (mov r8, r8)
   27598:	46bd      	mov	sp, r7
   2759a:	b004      	add	sp, #16
   2759c:	bd80      	pop	{r7, pc}
   2759e:	46c0      	nop			; (mov r8, r8)
   275a0:	40001800 	.word	0x40001800
   275a4:	000273a1 	.word	0x000273a1
   275a8:	00027389 	.word	0x00027389
   275ac:	0002ac11 	.word	0x0002ac11
   275b0:	0002ac55 	.word	0x0002ac55
   275b4:	0002749d 	.word	0x0002749d
   275b8:	20005c54 	.word	0x20005c54
   275bc:	00027425 	.word	0x00027425
   275c0:	000275c5 	.word	0x000275c5

000275c4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   275c4:	b580      	push	{r7, lr}
   275c6:	b082      	sub	sp, #8
   275c8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   275ca:	4b15      	ldr	r3, [pc, #84]	; (27620 <_extint_enable+0x5c>)
   275cc:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   275ce:	2300      	movs	r3, #0
   275d0:	607b      	str	r3, [r7, #4]
   275d2:	e018      	b.n	27606 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   275d4:	687b      	ldr	r3, [r7, #4]
   275d6:	009b      	lsls	r3, r3, #2
   275d8:	2208      	movs	r2, #8
   275da:	4694      	mov	ip, r2
   275dc:	44bc      	add	ip, r7
   275de:	4463      	add	r3, ip
   275e0:	3b08      	subs	r3, #8
   275e2:	681a      	ldr	r2, [r3, #0]
   275e4:	687b      	ldr	r3, [r7, #4]
   275e6:	009b      	lsls	r3, r3, #2
   275e8:	2108      	movs	r1, #8
   275ea:	468c      	mov	ip, r1
   275ec:	44bc      	add	ip, r7
   275ee:	4463      	add	r3, ip
   275f0:	3b08      	subs	r3, #8
   275f2:	681b      	ldr	r3, [r3, #0]
   275f4:	781b      	ldrb	r3, [r3, #0]
   275f6:	b2db      	uxtb	r3, r3
   275f8:	2102      	movs	r1, #2
   275fa:	430b      	orrs	r3, r1
   275fc:	b2db      	uxtb	r3, r3
   275fe:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27600:	687b      	ldr	r3, [r7, #4]
   27602:	3301      	adds	r3, #1
   27604:	607b      	str	r3, [r7, #4]
   27606:	687b      	ldr	r3, [r7, #4]
   27608:	2b00      	cmp	r3, #0
   2760a:	d0e3      	beq.n	275d4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   2760c:	46c0      	nop			; (mov r8, r8)
   2760e:	4b05      	ldr	r3, [pc, #20]	; (27624 <_extint_enable+0x60>)
   27610:	4798      	blx	r3
   27612:	1e03      	subs	r3, r0, #0
   27614:	d1fb      	bne.n	2760e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   27616:	46c0      	nop			; (mov r8, r8)
   27618:	46bd      	mov	sp, r7
   2761a:	b002      	add	sp, #8
   2761c:	bd80      	pop	{r7, pc}
   2761e:	46c0      	nop			; (mov r8, r8)
   27620:	40001800 	.word	0x40001800
   27624:	0002749d 	.word	0x0002749d

00027628 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   27628:	b580      	push	{r7, lr}
   2762a:	b082      	sub	sp, #8
   2762c:	af00      	add	r7, sp, #0
   2762e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   27630:	687b      	ldr	r3, [r7, #4]
   27632:	2200      	movs	r2, #0
   27634:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   27636:	687b      	ldr	r3, [r7, #4]
   27638:	2200      	movs	r2, #0
   2763a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   2763c:	687b      	ldr	r3, [r7, #4]
   2763e:	2201      	movs	r2, #1
   27640:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   27642:	687b      	ldr	r3, [r7, #4]
   27644:	2201      	movs	r2, #1
   27646:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   27648:	687b      	ldr	r3, [r7, #4]
   2764a:	2200      	movs	r2, #0
   2764c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2764e:	687b      	ldr	r3, [r7, #4]
   27650:	2202      	movs	r2, #2
   27652:	72da      	strb	r2, [r3, #11]
}
   27654:	46c0      	nop			; (mov r8, r8)
   27656:	46bd      	mov	sp, r7
   27658:	b002      	add	sp, #8
   2765a:	bd80      	pop	{r7, pc}

0002765c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   2765c:	b580      	push	{r7, lr}
   2765e:	b086      	sub	sp, #24
   27660:	af00      	add	r7, sp, #0
   27662:	0002      	movs	r2, r0
   27664:	6039      	str	r1, [r7, #0]
   27666:	1dfb      	adds	r3, r7, #7
   27668:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2766a:	2308      	movs	r3, #8
   2766c:	18fb      	adds	r3, r7, r3
   2766e:	0018      	movs	r0, r3
   27670:	4b36      	ldr	r3, [pc, #216]	; (2774c <extint_chan_set_config+0xf0>)
   27672:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   27674:	683b      	ldr	r3, [r7, #0]
   27676:	685b      	ldr	r3, [r3, #4]
   27678:	b2da      	uxtb	r2, r3
   2767a:	2308      	movs	r3, #8
   2767c:	18fb      	adds	r3, r7, r3
   2767e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27680:	2308      	movs	r3, #8
   27682:	18fb      	adds	r3, r7, r3
   27684:	2200      	movs	r2, #0
   27686:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   27688:	683b      	ldr	r3, [r7, #0]
   2768a:	7a1a      	ldrb	r2, [r3, #8]
   2768c:	2308      	movs	r3, #8
   2768e:	18fb      	adds	r3, r7, r3
   27690:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   27692:	683b      	ldr	r3, [r7, #0]
   27694:	681b      	ldr	r3, [r3, #0]
   27696:	b2db      	uxtb	r3, r3
   27698:	2208      	movs	r2, #8
   2769a:	18ba      	adds	r2, r7, r2
   2769c:	0011      	movs	r1, r2
   2769e:	0018      	movs	r0, r3
   276a0:	4b2b      	ldr	r3, [pc, #172]	; (27750 <extint_chan_set_config+0xf4>)
   276a2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   276a4:	1dfb      	adds	r3, r7, #7
   276a6:	781b      	ldrb	r3, [r3, #0]
   276a8:	0018      	movs	r0, r3
   276aa:	4b2a      	ldr	r3, [pc, #168]	; (27754 <extint_chan_set_config+0xf8>)
   276ac:	4798      	blx	r3
   276ae:	0003      	movs	r3, r0
   276b0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   276b2:	1dfb      	adds	r3, r7, #7
   276b4:	781b      	ldrb	r3, [r3, #0]
   276b6:	2207      	movs	r2, #7
   276b8:	4013      	ands	r3, r2
   276ba:	009b      	lsls	r3, r3, #2
   276bc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   276be:	683b      	ldr	r3, [r7, #0]
   276c0:	7adb      	ldrb	r3, [r3, #11]
   276c2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   276c4:	683b      	ldr	r3, [r7, #0]
   276c6:	7a9b      	ldrb	r3, [r3, #10]
   276c8:	2b00      	cmp	r3, #0
   276ca:	d003      	beq.n	276d4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   276cc:	697b      	ldr	r3, [r7, #20]
   276ce:	2208      	movs	r2, #8
   276d0:	4313      	orrs	r3, r2
   276d2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   276d4:	1dfb      	adds	r3, r7, #7
   276d6:	781b      	ldrb	r3, [r3, #0]
   276d8:	08db      	lsrs	r3, r3, #3
   276da:	b2db      	uxtb	r3, r3
   276dc:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   276de:	1dfb      	adds	r3, r7, #7
   276e0:	781b      	ldrb	r3, [r3, #0]
   276e2:	08db      	lsrs	r3, r3, #3
   276e4:	b2db      	uxtb	r3, r3
   276e6:	001a      	movs	r2, r3
   276e8:	693b      	ldr	r3, [r7, #16]
   276ea:	3206      	adds	r2, #6
   276ec:	0092      	lsls	r2, r2, #2
   276ee:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   276f0:	210f      	movs	r1, #15
   276f2:	68fa      	ldr	r2, [r7, #12]
   276f4:	4091      	lsls	r1, r2
   276f6:	000a      	movs	r2, r1
   276f8:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   276fa:	401a      	ands	r2, r3
			(new_config << config_pos);
   276fc:	6979      	ldr	r1, [r7, #20]
   276fe:	68fb      	ldr	r3, [r7, #12]
   27700:	4099      	lsls	r1, r3
   27702:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   27704:	431a      	orrs	r2, r3
   27706:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   27708:	693b      	ldr	r3, [r7, #16]
   2770a:	1d82      	adds	r2, r0, #6
   2770c:	0092      	lsls	r2, r2, #2
   2770e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   27710:	683b      	ldr	r3, [r7, #0]
   27712:	7a5b      	ldrb	r3, [r3, #9]
   27714:	2b00      	cmp	r3, #0
   27716:	d00a      	beq.n	2772e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   27718:	693b      	ldr	r3, [r7, #16]
   2771a:	695a      	ldr	r2, [r3, #20]
   2771c:	1dfb      	adds	r3, r7, #7
   2771e:	781b      	ldrb	r3, [r3, #0]
   27720:	2101      	movs	r1, #1
   27722:	4099      	lsls	r1, r3
   27724:	000b      	movs	r3, r1
   27726:	431a      	orrs	r2, r3
   27728:	693b      	ldr	r3, [r7, #16]
   2772a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   2772c:	e00a      	b.n	27744 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2772e:	693b      	ldr	r3, [r7, #16]
   27730:	695b      	ldr	r3, [r3, #20]
   27732:	1dfa      	adds	r2, r7, #7
   27734:	7812      	ldrb	r2, [r2, #0]
   27736:	2101      	movs	r1, #1
   27738:	4091      	lsls	r1, r2
   2773a:	000a      	movs	r2, r1
   2773c:	43d2      	mvns	r2, r2
   2773e:	401a      	ands	r2, r3
   27740:	693b      	ldr	r3, [r7, #16]
   27742:	615a      	str	r2, [r3, #20]
}
   27744:	46c0      	nop			; (mov r8, r8)
   27746:	46bd      	mov	sp, r7
   27748:	b006      	add	sp, #24
   2774a:	bd80      	pop	{r7, pc}
   2774c:	000273fd 	.word	0x000273fd
   27750:	0002af71 	.word	0x0002af71
   27754:	00027451 	.word	0x00027451

00027758 <system_pinmux_get_config_defaults>:
{
   27758:	b580      	push	{r7, lr}
   2775a:	b082      	sub	sp, #8
   2775c:	af00      	add	r7, sp, #0
   2775e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27760:	687b      	ldr	r3, [r7, #4]
   27762:	2280      	movs	r2, #128	; 0x80
   27764:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27766:	687b      	ldr	r3, [r7, #4]
   27768:	2200      	movs	r2, #0
   2776a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2776c:	687b      	ldr	r3, [r7, #4]
   2776e:	2201      	movs	r2, #1
   27770:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27772:	687b      	ldr	r3, [r7, #4]
   27774:	2200      	movs	r2, #0
   27776:	70da      	strb	r2, [r3, #3]
}
   27778:	46c0      	nop			; (mov r8, r8)
   2777a:	46bd      	mov	sp, r7
   2777c:	b002      	add	sp, #8
   2777e:	bd80      	pop	{r7, pc}

00027780 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   27780:	b580      	push	{r7, lr}
   27782:	b084      	sub	sp, #16
   27784:	af00      	add	r7, sp, #0
   27786:	0002      	movs	r2, r0
   27788:	6039      	str	r1, [r7, #0]
   2778a:	1dfb      	adds	r3, r7, #7
   2778c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2778e:	230c      	movs	r3, #12
   27790:	18fb      	adds	r3, r7, r3
   27792:	0018      	movs	r0, r3
   27794:	4b10      	ldr	r3, [pc, #64]	; (277d8 <port_pin_set_config+0x58>)
   27796:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   27798:	230c      	movs	r3, #12
   2779a:	18fb      	adds	r3, r7, r3
   2779c:	2280      	movs	r2, #128	; 0x80
   2779e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   277a0:	683b      	ldr	r3, [r7, #0]
   277a2:	781a      	ldrb	r2, [r3, #0]
   277a4:	230c      	movs	r3, #12
   277a6:	18fb      	adds	r3, r7, r3
   277a8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   277aa:	683b      	ldr	r3, [r7, #0]
   277ac:	785a      	ldrb	r2, [r3, #1]
   277ae:	230c      	movs	r3, #12
   277b0:	18fb      	adds	r3, r7, r3
   277b2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   277b4:	683b      	ldr	r3, [r7, #0]
   277b6:	789a      	ldrb	r2, [r3, #2]
   277b8:	230c      	movs	r3, #12
   277ba:	18fb      	adds	r3, r7, r3
   277bc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   277be:	230c      	movs	r3, #12
   277c0:	18fa      	adds	r2, r7, r3
   277c2:	1dfb      	adds	r3, r7, #7
   277c4:	781b      	ldrb	r3, [r3, #0]
   277c6:	0011      	movs	r1, r2
   277c8:	0018      	movs	r0, r3
   277ca:	4b04      	ldr	r3, [pc, #16]	; (277dc <port_pin_set_config+0x5c>)
   277cc:	4798      	blx	r3
}
   277ce:	46c0      	nop			; (mov r8, r8)
   277d0:	46bd      	mov	sp, r7
   277d2:	b004      	add	sp, #16
   277d4:	bd80      	pop	{r7, pc}
   277d6:	46c0      	nop			; (mov r8, r8)
   277d8:	00027759 	.word	0x00027759
   277dc:	0002af71 	.word	0x0002af71

000277e0 <system_gclk_chan_get_config_defaults>:
{
   277e0:	b580      	push	{r7, lr}
   277e2:	b082      	sub	sp, #8
   277e4:	af00      	add	r7, sp, #0
   277e6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   277e8:	687b      	ldr	r3, [r7, #4]
   277ea:	2200      	movs	r2, #0
   277ec:	701a      	strb	r2, [r3, #0]
}
   277ee:	46c0      	nop			; (mov r8, r8)
   277f0:	46bd      	mov	sp, r7
   277f2:	b002      	add	sp, #8
   277f4:	bd80      	pop	{r7, pc}
	...

000277f8 <system_apb_clock_set_mask>:
{
   277f8:	b580      	push	{r7, lr}
   277fa:	b082      	sub	sp, #8
   277fc:	af00      	add	r7, sp, #0
   277fe:	0002      	movs	r2, r0
   27800:	6039      	str	r1, [r7, #0]
   27802:	1dfb      	adds	r3, r7, #7
   27804:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27806:	1dfb      	adds	r3, r7, #7
   27808:	781b      	ldrb	r3, [r3, #0]
   2780a:	2b01      	cmp	r3, #1
   2780c:	d00a      	beq.n	27824 <system_apb_clock_set_mask+0x2c>
   2780e:	2b02      	cmp	r3, #2
   27810:	d00f      	beq.n	27832 <system_apb_clock_set_mask+0x3a>
   27812:	2b00      	cmp	r3, #0
   27814:	d114      	bne.n	27840 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27816:	4b0e      	ldr	r3, [pc, #56]	; (27850 <system_apb_clock_set_mask+0x58>)
   27818:	4a0d      	ldr	r2, [pc, #52]	; (27850 <system_apb_clock_set_mask+0x58>)
   2781a:	6991      	ldr	r1, [r2, #24]
   2781c:	683a      	ldr	r2, [r7, #0]
   2781e:	430a      	orrs	r2, r1
   27820:	619a      	str	r2, [r3, #24]
			break;
   27822:	e00f      	b.n	27844 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27824:	4b0a      	ldr	r3, [pc, #40]	; (27850 <system_apb_clock_set_mask+0x58>)
   27826:	4a0a      	ldr	r2, [pc, #40]	; (27850 <system_apb_clock_set_mask+0x58>)
   27828:	69d1      	ldr	r1, [r2, #28]
   2782a:	683a      	ldr	r2, [r7, #0]
   2782c:	430a      	orrs	r2, r1
   2782e:	61da      	str	r2, [r3, #28]
			break;
   27830:	e008      	b.n	27844 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27832:	4b07      	ldr	r3, [pc, #28]	; (27850 <system_apb_clock_set_mask+0x58>)
   27834:	4a06      	ldr	r2, [pc, #24]	; (27850 <system_apb_clock_set_mask+0x58>)
   27836:	6a11      	ldr	r1, [r2, #32]
   27838:	683a      	ldr	r2, [r7, #0]
   2783a:	430a      	orrs	r2, r1
   2783c:	621a      	str	r2, [r3, #32]
			break;
   2783e:	e001      	b.n	27844 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27840:	2317      	movs	r3, #23
   27842:	e000      	b.n	27846 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27844:	2300      	movs	r3, #0
}
   27846:	0018      	movs	r0, r3
   27848:	46bd      	mov	sp, r7
   2784a:	b002      	add	sp, #8
   2784c:	bd80      	pop	{r7, pc}
   2784e:	46c0      	nop			; (mov r8, r8)
   27850:	40000400 	.word	0x40000400

00027854 <system_interrupt_enable>:
{
   27854:	b580      	push	{r7, lr}
   27856:	b082      	sub	sp, #8
   27858:	af00      	add	r7, sp, #0
   2785a:	0002      	movs	r2, r0
   2785c:	1dfb      	adds	r3, r7, #7
   2785e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27860:	4b06      	ldr	r3, [pc, #24]	; (2787c <system_interrupt_enable+0x28>)
   27862:	1dfa      	adds	r2, r7, #7
   27864:	7812      	ldrb	r2, [r2, #0]
   27866:	0011      	movs	r1, r2
   27868:	221f      	movs	r2, #31
   2786a:	400a      	ands	r2, r1
   2786c:	2101      	movs	r1, #1
   2786e:	4091      	lsls	r1, r2
   27870:	000a      	movs	r2, r1
   27872:	601a      	str	r2, [r3, #0]
}
   27874:	46c0      	nop			; (mov r8, r8)
   27876:	46bd      	mov	sp, r7
   27878:	b002      	add	sp, #8
   2787a:	bd80      	pop	{r7, pc}
   2787c:	e000e100 	.word	0xe000e100

00027880 <system_interrupt_disable>:
{
   27880:	b580      	push	{r7, lr}
   27882:	b082      	sub	sp, #8
   27884:	af00      	add	r7, sp, #0
   27886:	0002      	movs	r2, r0
   27888:	1dfb      	adds	r3, r7, #7
   2788a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2788c:	4a07      	ldr	r2, [pc, #28]	; (278ac <system_interrupt_disable+0x2c>)
   2788e:	1dfb      	adds	r3, r7, #7
   27890:	781b      	ldrb	r3, [r3, #0]
   27892:	0019      	movs	r1, r3
   27894:	231f      	movs	r3, #31
   27896:	400b      	ands	r3, r1
   27898:	2101      	movs	r1, #1
   2789a:	4099      	lsls	r1, r3
   2789c:	000b      	movs	r3, r1
   2789e:	0019      	movs	r1, r3
   278a0:	2380      	movs	r3, #128	; 0x80
   278a2:	50d1      	str	r1, [r2, r3]
}
   278a4:	46c0      	nop			; (mov r8, r8)
   278a6:	46bd      	mov	sp, r7
   278a8:	b002      	add	sp, #8
   278aa:	bd80      	pop	{r7, pc}
   278ac:	e000e100 	.word	0xe000e100

000278b0 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   278b0:	b580      	push	{r7, lr}
   278b2:	b084      	sub	sp, #16
   278b4:	af00      	add	r7, sp, #0
   278b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   278b8:	687b      	ldr	r3, [r7, #4]
   278ba:	681b      	ldr	r3, [r3, #0]
   278bc:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   278be:	68fb      	ldr	r3, [r7, #12]
   278c0:	7a9b      	ldrb	r3, [r3, #10]
   278c2:	b2db      	uxtb	r3, r3
   278c4:	b25b      	sxtb	r3, r3
   278c6:	2b00      	cmp	r3, #0
   278c8:	da01      	bge.n	278ce <rtc_calendar_is_syncing+0x1e>
                return true;
   278ca:	2301      	movs	r3, #1
   278cc:	e000      	b.n	278d0 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   278ce:	2300      	movs	r3, #0
}
   278d0:	0018      	movs	r0, r3
   278d2:	46bd      	mov	sp, r7
   278d4:	b004      	add	sp, #16
   278d6:	bd80      	pop	{r7, pc}

000278d8 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   278d8:	b580      	push	{r7, lr}
   278da:	b084      	sub	sp, #16
   278dc:	af00      	add	r7, sp, #0
   278de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   278e0:	687b      	ldr	r3, [r7, #4]
   278e2:	681b      	ldr	r3, [r3, #0]
   278e4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   278e6:	2003      	movs	r0, #3
   278e8:	4b0a      	ldr	r3, [pc, #40]	; (27914 <rtc_calendar_enable+0x3c>)
   278ea:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   278ec:	46c0      	nop			; (mov r8, r8)
   278ee:	687b      	ldr	r3, [r7, #4]
   278f0:	0018      	movs	r0, r3
   278f2:	4b09      	ldr	r3, [pc, #36]	; (27918 <rtc_calendar_enable+0x40>)
   278f4:	4798      	blx	r3
   278f6:	1e03      	subs	r3, r0, #0
   278f8:	d1f9      	bne.n	278ee <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   278fa:	68fb      	ldr	r3, [r7, #12]
   278fc:	881b      	ldrh	r3, [r3, #0]
   278fe:	b29b      	uxth	r3, r3
   27900:	2202      	movs	r2, #2
   27902:	4313      	orrs	r3, r2
   27904:	b29a      	uxth	r2, r3
   27906:	68fb      	ldr	r3, [r7, #12]
   27908:	801a      	strh	r2, [r3, #0]
}
   2790a:	46c0      	nop			; (mov r8, r8)
   2790c:	46bd      	mov	sp, r7
   2790e:	b004      	add	sp, #16
   27910:	bd80      	pop	{r7, pc}
   27912:	46c0      	nop			; (mov r8, r8)
   27914:	00027855 	.word	0x00027855
   27918:	000278b1 	.word	0x000278b1

0002791c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   2791c:	b580      	push	{r7, lr}
   2791e:	b084      	sub	sp, #16
   27920:	af00      	add	r7, sp, #0
   27922:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27924:	687b      	ldr	r3, [r7, #4]
   27926:	681b      	ldr	r3, [r3, #0]
   27928:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   2792a:	2003      	movs	r0, #3
   2792c:	4b0d      	ldr	r3, [pc, #52]	; (27964 <rtc_calendar_disable+0x48>)
   2792e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   27930:	46c0      	nop			; (mov r8, r8)
   27932:	687b      	ldr	r3, [r7, #4]
   27934:	0018      	movs	r0, r3
   27936:	4b0c      	ldr	r3, [pc, #48]	; (27968 <rtc_calendar_disable+0x4c>)
   27938:	4798      	blx	r3
   2793a:	1e03      	subs	r3, r0, #0
   2793c:	d1f9      	bne.n	27932 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   2793e:	68fb      	ldr	r3, [r7, #12]
   27940:	22c1      	movs	r2, #193	; 0xc1
   27942:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   27944:	68fb      	ldr	r3, [r7, #12]
   27946:	22c1      	movs	r2, #193	; 0xc1
   27948:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   2794a:	68fb      	ldr	r3, [r7, #12]
   2794c:	881b      	ldrh	r3, [r3, #0]
   2794e:	b29b      	uxth	r3, r3
   27950:	2202      	movs	r2, #2
   27952:	4393      	bics	r3, r2
   27954:	b29a      	uxth	r2, r3
   27956:	68fb      	ldr	r3, [r7, #12]
   27958:	801a      	strh	r2, [r3, #0]
}
   2795a:	46c0      	nop			; (mov r8, r8)
   2795c:	46bd      	mov	sp, r7
   2795e:	b004      	add	sp, #16
   27960:	bd80      	pop	{r7, pc}
   27962:	46c0      	nop			; (mov r8, r8)
   27964:	00027881 	.word	0x00027881
   27968:	000278b1 	.word	0x000278b1

0002796c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   2796c:	b580      	push	{r7, lr}
   2796e:	b084      	sub	sp, #16
   27970:	af00      	add	r7, sp, #0
   27972:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27974:	687b      	ldr	r3, [r7, #4]
   27976:	681b      	ldr	r3, [r3, #0]
   27978:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   2797a:	687b      	ldr	r3, [r7, #4]
   2797c:	0018      	movs	r0, r3
   2797e:	4b0d      	ldr	r3, [pc, #52]	; (279b4 <rtc_calendar_reset+0x48>)
   27980:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   27982:	687b      	ldr	r3, [r7, #4]
   27984:	2200      	movs	r2, #0
   27986:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   27988:	687b      	ldr	r3, [r7, #4]
   2798a:	2200      	movs	r2, #0
   2798c:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2798e:	46c0      	nop			; (mov r8, r8)
   27990:	687b      	ldr	r3, [r7, #4]
   27992:	0018      	movs	r0, r3
   27994:	4b08      	ldr	r3, [pc, #32]	; (279b8 <rtc_calendar_reset+0x4c>)
   27996:	4798      	blx	r3
   27998:	1e03      	subs	r3, r0, #0
   2799a:	d1f9      	bne.n	27990 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   2799c:	68fb      	ldr	r3, [r7, #12]
   2799e:	881b      	ldrh	r3, [r3, #0]
   279a0:	b29b      	uxth	r3, r3
   279a2:	2201      	movs	r2, #1
   279a4:	4313      	orrs	r3, r2
   279a6:	b29a      	uxth	r2, r3
   279a8:	68fb      	ldr	r3, [r7, #12]
   279aa:	801a      	strh	r2, [r3, #0]
}
   279ac:	46c0      	nop			; (mov r8, r8)
   279ae:	46bd      	mov	sp, r7
   279b0:	b004      	add	sp, #16
   279b2:	bd80      	pop	{r7, pc}
   279b4:	0002791d 	.word	0x0002791d
   279b8:	000278b1 	.word	0x000278b1

000279bc <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   279bc:	b580      	push	{r7, lr}
   279be:	b084      	sub	sp, #16
   279c0:	af00      	add	r7, sp, #0
   279c2:	6078      	str	r0, [r7, #4]
   279c4:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   279c6:	683b      	ldr	r3, [r7, #0]
   279c8:	88db      	ldrh	r3, [r3, #6]
   279ca:	001a      	movs	r2, r3
   279cc:	687b      	ldr	r3, [r7, #4]
   279ce:	88db      	ldrh	r3, [r3, #6]
   279d0:	1ad3      	subs	r3, r2, r3
   279d2:	069b      	lsls	r3, r3, #26
   279d4:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   279d6:	683b      	ldr	r3, [r7, #0]
   279d8:	795b      	ldrb	r3, [r3, #5]
   279da:	059b      	lsls	r3, r3, #22
   279dc:	001a      	movs	r2, r3
   279de:	68fb      	ldr	r3, [r7, #12]
   279e0:	4313      	orrs	r3, r2
   279e2:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   279e4:	683b      	ldr	r3, [r7, #0]
   279e6:	791b      	ldrb	r3, [r3, #4]
   279e8:	045b      	lsls	r3, r3, #17
   279ea:	001a      	movs	r2, r3
   279ec:	68fb      	ldr	r3, [r7, #12]
   279ee:	4313      	orrs	r3, r2
   279f0:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   279f2:	683b      	ldr	r3, [r7, #0]
   279f4:	789b      	ldrb	r3, [r3, #2]
   279f6:	031b      	lsls	r3, r3, #12
   279f8:	001a      	movs	r2, r3
   279fa:	68fb      	ldr	r3, [r7, #12]
   279fc:	4313      	orrs	r3, r2
   279fe:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   27a00:	687b      	ldr	r3, [r7, #4]
   27a02:	791b      	ldrb	r3, [r3, #4]
   27a04:	2201      	movs	r2, #1
   27a06:	4053      	eors	r3, r2
   27a08:	b2db      	uxtb	r3, r3
   27a0a:	2b00      	cmp	r3, #0
   27a0c:	d008      	beq.n	27a20 <rtc_calendar_time_to_register_value+0x64>
   27a0e:	683b      	ldr	r3, [r7, #0]
   27a10:	78db      	ldrb	r3, [r3, #3]
   27a12:	2b00      	cmp	r3, #0
   27a14:	d004      	beq.n	27a20 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   27a16:	68fb      	ldr	r3, [r7, #12]
   27a18:	2280      	movs	r2, #128	; 0x80
   27a1a:	0252      	lsls	r2, r2, #9
   27a1c:	4313      	orrs	r3, r2
   27a1e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   27a20:	683b      	ldr	r3, [r7, #0]
   27a22:	785b      	ldrb	r3, [r3, #1]
   27a24:	019b      	lsls	r3, r3, #6
   27a26:	001a      	movs	r2, r3
   27a28:	68fb      	ldr	r3, [r7, #12]
   27a2a:	4313      	orrs	r3, r2
   27a2c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   27a2e:	683b      	ldr	r3, [r7, #0]
   27a30:	781b      	ldrb	r3, [r3, #0]
   27a32:	001a      	movs	r2, r3
   27a34:	68fb      	ldr	r3, [r7, #12]
   27a36:	4313      	orrs	r3, r2
   27a38:	60fb      	str	r3, [r7, #12]

	return register_value;
   27a3a:	68fb      	ldr	r3, [r7, #12]
}
   27a3c:	0018      	movs	r0, r3
   27a3e:	46bd      	mov	sp, r7
   27a40:	b004      	add	sp, #16
   27a42:	bd80      	pop	{r7, pc}

00027a44 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   27a44:	b580      	push	{r7, lr}
   27a46:	b084      	sub	sp, #16
   27a48:	af00      	add	r7, sp, #0
   27a4a:	60f8      	str	r0, [r7, #12]
   27a4c:	60b9      	str	r1, [r7, #8]
   27a4e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   27a50:	68bb      	ldr	r3, [r7, #8]
   27a52:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   27a54:	b29a      	uxth	r2, r3
   27a56:	68fb      	ldr	r3, [r7, #12]
   27a58:	88db      	ldrh	r3, [r3, #6]
   27a5a:	18d3      	adds	r3, r2, r3
   27a5c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   27a5e:	687b      	ldr	r3, [r7, #4]
   27a60:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   27a62:	68bb      	ldr	r3, [r7, #8]
   27a64:	0d9b      	lsrs	r3, r3, #22
   27a66:	b2db      	uxtb	r3, r3
   27a68:	220f      	movs	r2, #15
   27a6a:	4013      	ands	r3, r2
   27a6c:	b2da      	uxtb	r2, r3
   27a6e:	687b      	ldr	r3, [r7, #4]
   27a70:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   27a72:	68bb      	ldr	r3, [r7, #8]
   27a74:	0c5b      	lsrs	r3, r3, #17
   27a76:	b2db      	uxtb	r3, r3
   27a78:	221f      	movs	r2, #31
   27a7a:	4013      	ands	r3, r2
   27a7c:	b2da      	uxtb	r2, r3
   27a7e:	687b      	ldr	r3, [r7, #4]
   27a80:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   27a82:	68fb      	ldr	r3, [r7, #12]
   27a84:	791b      	ldrb	r3, [r3, #4]
   27a86:	2b00      	cmp	r3, #0
   27a88:	d008      	beq.n	27a9c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   27a8a:	68bb      	ldr	r3, [r7, #8]
   27a8c:	0b1b      	lsrs	r3, r3, #12
   27a8e:	b2db      	uxtb	r3, r3
   27a90:	221f      	movs	r2, #31
   27a92:	4013      	ands	r3, r2
   27a94:	b2da      	uxtb	r2, r3
   27a96:	687b      	ldr	r3, [r7, #4]
   27a98:	709a      	strb	r2, [r3, #2]
   27a9a:	e010      	b.n	27abe <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   27a9c:	68bb      	ldr	r3, [r7, #8]
   27a9e:	0b1b      	lsrs	r3, r3, #12
   27aa0:	b2db      	uxtb	r3, r3
   27aa2:	220f      	movs	r2, #15
   27aa4:	4013      	ands	r3, r2
   27aa6:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27aa8:	687b      	ldr	r3, [r7, #4]
   27aaa:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   27aac:	68ba      	ldr	r2, [r7, #8]
   27aae:	2380      	movs	r3, #128	; 0x80
   27ab0:	025b      	lsls	r3, r3, #9
   27ab2:	4013      	ands	r3, r2
   27ab4:	1e5a      	subs	r2, r3, #1
   27ab6:	4193      	sbcs	r3, r2
   27ab8:	b2da      	uxtb	r2, r3
   27aba:	687b      	ldr	r3, [r7, #4]
   27abc:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   27abe:	68bb      	ldr	r3, [r7, #8]
   27ac0:	099b      	lsrs	r3, r3, #6
   27ac2:	b2db      	uxtb	r3, r3
   27ac4:	223f      	movs	r2, #63	; 0x3f
   27ac6:	4013      	ands	r3, r2
   27ac8:	b2da      	uxtb	r2, r3
   27aca:	687b      	ldr	r3, [r7, #4]
   27acc:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   27ace:	68bb      	ldr	r3, [r7, #8]
   27ad0:	b2db      	uxtb	r3, r3
   27ad2:	223f      	movs	r2, #63	; 0x3f
   27ad4:	4013      	ands	r3, r2
   27ad6:	b2da      	uxtb	r2, r3
   27ad8:	687b      	ldr	r3, [r7, #4]
   27ada:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   27adc:	46c0      	nop			; (mov r8, r8)
   27ade:	46bd      	mov	sp, r7
   27ae0:	b004      	add	sp, #16
   27ae2:	bd80      	pop	{r7, pc}

00027ae4 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   27ae4:	b580      	push	{r7, lr}
   27ae6:	b084      	sub	sp, #16
   27ae8:	af00      	add	r7, sp, #0
   27aea:	6078      	str	r0, [r7, #4]
   27aec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27aee:	687b      	ldr	r3, [r7, #4]
   27af0:	681b      	ldr	r3, [r3, #0]
   27af2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   27af4:	683b      	ldr	r3, [r7, #0]
   27af6:	881a      	ldrh	r2, [r3, #0]
   27af8:	230e      	movs	r3, #14
   27afa:	18fb      	adds	r3, r7, r3
   27afc:	2108      	movs	r1, #8
   27afe:	430a      	orrs	r2, r1
   27b00:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   27b02:	683b      	ldr	r3, [r7, #0]
   27b04:	791b      	ldrb	r3, [r3, #4]
   27b06:	2201      	movs	r2, #1
   27b08:	4053      	eors	r3, r2
   27b0a:	b2db      	uxtb	r3, r3
   27b0c:	2b00      	cmp	r3, #0
   27b0e:	d007      	beq.n	27b20 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   27b10:	230e      	movs	r3, #14
   27b12:	18fb      	adds	r3, r7, r3
   27b14:	220e      	movs	r2, #14
   27b16:	18ba      	adds	r2, r7, r2
   27b18:	8812      	ldrh	r2, [r2, #0]
   27b1a:	2140      	movs	r1, #64	; 0x40
   27b1c:	430a      	orrs	r2, r1
   27b1e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   27b20:	683b      	ldr	r3, [r7, #0]
   27b22:	789b      	ldrb	r3, [r3, #2]
   27b24:	2b00      	cmp	r3, #0
   27b26:	d007      	beq.n	27b38 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27b28:	230e      	movs	r3, #14
   27b2a:	18fb      	adds	r3, r7, r3
   27b2c:	220e      	movs	r2, #14
   27b2e:	18ba      	adds	r2, r7, r2
   27b30:	8812      	ldrh	r2, [r2, #0]
   27b32:	2180      	movs	r1, #128	; 0x80
   27b34:	430a      	orrs	r2, r1
   27b36:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27b38:	68bb      	ldr	r3, [r7, #8]
   27b3a:	220e      	movs	r2, #14
   27b3c:	18ba      	adds	r2, r7, r2
   27b3e:	8812      	ldrh	r2, [r2, #0]
   27b40:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   27b42:	683b      	ldr	r3, [r7, #0]
   27b44:	78db      	ldrb	r3, [r3, #3]
   27b46:	2b00      	cmp	r3, #0
   27b48:	d008      	beq.n	27b5c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   27b4a:	68bb      	ldr	r3, [r7, #8]
   27b4c:	885b      	ldrh	r3, [r3, #2]
   27b4e:	b29b      	uxth	r3, r3
   27b50:	2280      	movs	r2, #128	; 0x80
   27b52:	01d2      	lsls	r2, r2, #7
   27b54:	4313      	orrs	r3, r2
   27b56:	b29a      	uxth	r2, r3
   27b58:	68bb      	ldr	r3, [r7, #8]
   27b5a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27b5c:	230d      	movs	r3, #13
   27b5e:	18fb      	adds	r3, r7, r3
   27b60:	2200      	movs	r2, #0
   27b62:	701a      	strb	r2, [r3, #0]
   27b64:	e017      	b.n	27b96 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   27b66:	230d      	movs	r3, #13
   27b68:	18fb      	adds	r3, r7, r3
   27b6a:	781a      	ldrb	r2, [r3, #0]
   27b6c:	0013      	movs	r3, r2
   27b6e:	009b      	lsls	r3, r3, #2
   27b70:	189b      	adds	r3, r3, r2
   27b72:	005b      	lsls	r3, r3, #1
   27b74:	3308      	adds	r3, #8
   27b76:	683a      	ldr	r2, [r7, #0]
   27b78:	18d1      	adds	r1, r2, r3
   27b7a:	230d      	movs	r3, #13
   27b7c:	18fb      	adds	r3, r7, r3
   27b7e:	781a      	ldrb	r2, [r3, #0]
   27b80:	687b      	ldr	r3, [r7, #4]
   27b82:	0018      	movs	r0, r3
   27b84:	4b08      	ldr	r3, [pc, #32]	; (27ba8 <_rtc_calendar_set_config+0xc4>)
   27b86:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27b88:	230d      	movs	r3, #13
   27b8a:	18fb      	adds	r3, r7, r3
   27b8c:	781a      	ldrb	r2, [r3, #0]
   27b8e:	230d      	movs	r3, #13
   27b90:	18fb      	adds	r3, r7, r3
   27b92:	3201      	adds	r2, #1
   27b94:	701a      	strb	r2, [r3, #0]
   27b96:	230d      	movs	r3, #13
   27b98:	18fb      	adds	r3, r7, r3
   27b9a:	781b      	ldrb	r3, [r3, #0]
   27b9c:	2b00      	cmp	r3, #0
   27b9e:	d0e2      	beq.n	27b66 <_rtc_calendar_set_config+0x82>
	}
}
   27ba0:	46c0      	nop			; (mov r8, r8)
   27ba2:	46bd      	mov	sp, r7
   27ba4:	b004      	add	sp, #16
   27ba6:	bd80      	pop	{r7, pc}
   27ba8:	00027ccd 	.word	0x00027ccd

00027bac <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27bac:	b580      	push	{r7, lr}
   27bae:	b086      	sub	sp, #24
   27bb0:	af00      	add	r7, sp, #0
   27bb2:	60f8      	str	r0, [r7, #12]
   27bb4:	60b9      	str	r1, [r7, #8]
   27bb6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27bb8:	68fb      	ldr	r3, [r7, #12]
   27bba:	68ba      	ldr	r2, [r7, #8]
   27bbc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   27bbe:	2120      	movs	r1, #32
   27bc0:	2000      	movs	r0, #0
   27bc2:	4b18      	ldr	r3, [pc, #96]	; (27c24 <rtc_calendar_init+0x78>)
   27bc4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27bc6:	2314      	movs	r3, #20
   27bc8:	18fb      	adds	r3, r7, r3
   27bca:	0018      	movs	r0, r3
   27bcc:	4b16      	ldr	r3, [pc, #88]	; (27c28 <rtc_calendar_init+0x7c>)
   27bce:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   27bd0:	2314      	movs	r3, #20
   27bd2:	18fb      	adds	r3, r7, r3
   27bd4:	2202      	movs	r2, #2
   27bd6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   27bd8:	2314      	movs	r3, #20
   27bda:	18fb      	adds	r3, r7, r3
   27bdc:	0019      	movs	r1, r3
   27bde:	2004      	movs	r0, #4
   27be0:	4b12      	ldr	r3, [pc, #72]	; (27c2c <rtc_calendar_init+0x80>)
   27be2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   27be4:	2004      	movs	r0, #4
   27be6:	4b12      	ldr	r3, [pc, #72]	; (27c30 <rtc_calendar_init+0x84>)
   27be8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   27bea:	68fb      	ldr	r3, [r7, #12]
   27bec:	0018      	movs	r0, r3
   27bee:	4b11      	ldr	r3, [pc, #68]	; (27c34 <rtc_calendar_init+0x88>)
   27bf0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   27bf2:	687b      	ldr	r3, [r7, #4]
   27bf4:	791a      	ldrb	r2, [r3, #4]
   27bf6:	68fb      	ldr	r3, [r7, #12]
   27bf8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   27bfa:	687b      	ldr	r3, [r7, #4]
   27bfc:	78da      	ldrb	r2, [r3, #3]
   27bfe:	68fb      	ldr	r3, [r7, #12]
   27c00:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   27c02:	687b      	ldr	r3, [r7, #4]
   27c04:	88da      	ldrh	r2, [r3, #6]
   27c06:	68fb      	ldr	r3, [r7, #12]
   27c08:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   27c0a:	4b0b      	ldr	r3, [pc, #44]	; (27c38 <rtc_calendar_init+0x8c>)
   27c0c:	68fa      	ldr	r2, [r7, #12]
   27c0e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   27c10:	687a      	ldr	r2, [r7, #4]
   27c12:	68fb      	ldr	r3, [r7, #12]
   27c14:	0011      	movs	r1, r2
   27c16:	0018      	movs	r0, r3
   27c18:	4b08      	ldr	r3, [pc, #32]	; (27c3c <rtc_calendar_init+0x90>)
   27c1a:	4798      	blx	r3
}
   27c1c:	46c0      	nop			; (mov r8, r8)
   27c1e:	46bd      	mov	sp, r7
   27c20:	b006      	add	sp, #24
   27c22:	bd80      	pop	{r7, pc}
   27c24:	000277f9 	.word	0x000277f9
   27c28:	000277e1 	.word	0x000277e1
   27c2c:	0002ac11 	.word	0x0002ac11
   27c30:	0002ac55 	.word	0x0002ac55
   27c34:	0002796d 	.word	0x0002796d
   27c38:	20005c94 	.word	0x20005c94
   27c3c:	00027ae5 	.word	0x00027ae5

00027c40 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   27c40:	b580      	push	{r7, lr}
   27c42:	b084      	sub	sp, #16
   27c44:	af00      	add	r7, sp, #0
   27c46:	6078      	str	r0, [r7, #4]
   27c48:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27c4a:	687b      	ldr	r3, [r7, #4]
   27c4c:	681b      	ldr	r3, [r3, #0]
   27c4e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   27c50:	687b      	ldr	r3, [r7, #4]
   27c52:	795b      	ldrb	r3, [r3, #5]
   27c54:	2201      	movs	r2, #1
   27c56:	4053      	eors	r3, r2
   27c58:	b2db      	uxtb	r3, r3
   27c5a:	2b00      	cmp	r3, #0
   27c5c:	d00a      	beq.n	27c74 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   27c5e:	68fb      	ldr	r3, [r7, #12]
   27c60:	4a16      	ldr	r2, [pc, #88]	; (27cbc <rtc_calendar_get_time+0x7c>)
   27c62:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27c64:	46c0      	nop			; (mov r8, r8)
   27c66:	687b      	ldr	r3, [r7, #4]
   27c68:	0018      	movs	r0, r3
   27c6a:	4b15      	ldr	r3, [pc, #84]	; (27cc0 <rtc_calendar_get_time+0x80>)
   27c6c:	4798      	blx	r3
   27c6e:	1e03      	subs	r3, r0, #0
   27c70:	d1f9      	bne.n	27c66 <rtc_calendar_get_time+0x26>
   27c72:	e016      	b.n	27ca2 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27c74:	68fb      	ldr	r3, [r7, #12]
   27c76:	885b      	ldrh	r3, [r3, #2]
   27c78:	b29b      	uxth	r3, r3
   27c7a:	001a      	movs	r2, r3
   27c7c:	2380      	movs	r3, #128	; 0x80
   27c7e:	01db      	lsls	r3, r3, #7
   27c80:	4013      	ands	r3, r2
   27c82:	d10e      	bne.n	27ca2 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27c84:	68fb      	ldr	r3, [r7, #12]
   27c86:	885b      	ldrh	r3, [r3, #2]
   27c88:	b29b      	uxth	r3, r3
   27c8a:	4a0e      	ldr	r2, [pc, #56]	; (27cc4 <rtc_calendar_get_time+0x84>)
   27c8c:	4313      	orrs	r3, r2
   27c8e:	b29a      	uxth	r2, r3
   27c90:	68fb      	ldr	r3, [r7, #12]
   27c92:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27c94:	46c0      	nop			; (mov r8, r8)
   27c96:	687b      	ldr	r3, [r7, #4]
   27c98:	0018      	movs	r0, r3
   27c9a:	4b09      	ldr	r3, [pc, #36]	; (27cc0 <rtc_calendar_get_time+0x80>)
   27c9c:	4798      	blx	r3
   27c9e:	1e03      	subs	r3, r0, #0
   27ca0:	d1f9      	bne.n	27c96 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   27ca2:	68fb      	ldr	r3, [r7, #12]
   27ca4:	691b      	ldr	r3, [r3, #16]
   27ca6:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27ca8:	683a      	ldr	r2, [r7, #0]
   27caa:	68b9      	ldr	r1, [r7, #8]
   27cac:	687b      	ldr	r3, [r7, #4]
   27cae:	0018      	movs	r0, r3
   27cb0:	4b05      	ldr	r3, [pc, #20]	; (27cc8 <rtc_calendar_get_time+0x88>)
   27cb2:	4798      	blx	r3
}
   27cb4:	46c0      	nop			; (mov r8, r8)
   27cb6:	46bd      	mov	sp, r7
   27cb8:	b004      	add	sp, #16
   27cba:	bd80      	pop	{r7, pc}
   27cbc:	ffff8000 	.word	0xffff8000
   27cc0:	000278b1 	.word	0x000278b1
   27cc4:	ffffc000 	.word	0xffffc000
   27cc8:	00027a45 	.word	0x00027a45

00027ccc <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   27ccc:	b580      	push	{r7, lr}
   27cce:	b086      	sub	sp, #24
   27cd0:	af00      	add	r7, sp, #0
   27cd2:	60f8      	str	r0, [r7, #12]
   27cd4:	60b9      	str	r1, [r7, #8]
   27cd6:	1dfb      	adds	r3, r7, #7
   27cd8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27cda:	68fb      	ldr	r3, [r7, #12]
   27cdc:	681b      	ldr	r3, [r3, #0]
   27cde:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27ce0:	1dfb      	adds	r3, r7, #7
   27ce2:	781b      	ldrb	r3, [r3, #0]
   27ce4:	2b01      	cmp	r3, #1
   27ce6:	d901      	bls.n	27cec <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27ce8:	2317      	movs	r3, #23
   27cea:	e021      	b.n	27d30 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   27cec:	68ba      	ldr	r2, [r7, #8]
   27cee:	68fb      	ldr	r3, [r7, #12]
   27cf0:	0011      	movs	r1, r2
   27cf2:	0018      	movs	r0, r3
   27cf4:	4b10      	ldr	r3, [pc, #64]	; (27d38 <rtc_calendar_set_alarm+0x6c>)
   27cf6:	4798      	blx	r3
   27cf8:	0003      	movs	r3, r0
   27cfa:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   27cfc:	46c0      	nop			; (mov r8, r8)
   27cfe:	68fb      	ldr	r3, [r7, #12]
   27d00:	0018      	movs	r0, r3
   27d02:	4b0e      	ldr	r3, [pc, #56]	; (27d3c <rtc_calendar_set_alarm+0x70>)
   27d04:	4798      	blx	r3
   27d06:	1e03      	subs	r3, r0, #0
   27d08:	d1f9      	bne.n	27cfe <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   27d0a:	1dfb      	adds	r3, r7, #7
   27d0c:	781a      	ldrb	r2, [r3, #0]
   27d0e:	697b      	ldr	r3, [r7, #20]
   27d10:	3203      	adds	r2, #3
   27d12:	00d2      	lsls	r2, r2, #3
   27d14:	6939      	ldr	r1, [r7, #16]
   27d16:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27d18:	1dfb      	adds	r3, r7, #7
   27d1a:	781b      	ldrb	r3, [r3, #0]
   27d1c:	68ba      	ldr	r2, [r7, #8]
   27d1e:	7a11      	ldrb	r1, [r2, #8]
   27d20:	697a      	ldr	r2, [r7, #20]
   27d22:	3303      	adds	r3, #3
   27d24:	00db      	lsls	r3, r3, #3
   27d26:	18d3      	adds	r3, r2, r3
   27d28:	3304      	adds	r3, #4
   27d2a:	1c0a      	adds	r2, r1, #0
   27d2c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27d2e:	2300      	movs	r3, #0
}
   27d30:	0018      	movs	r0, r3
   27d32:	46bd      	mov	sp, r7
   27d34:	b006      	add	sp, #24
   27d36:	bd80      	pop	{r7, pc}
   27d38:	000279bd 	.word	0x000279bd
   27d3c:	000278b1 	.word	0x000278b1

00027d40 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27d40:	b580      	push	{r7, lr}
   27d42:	b086      	sub	sp, #24
   27d44:	af00      	add	r7, sp, #0
   27d46:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27d48:	4b28      	ldr	r3, [pc, #160]	; (27dec <_rtc_interrupt_handler+0xac>)
   27d4a:	687a      	ldr	r2, [r7, #4]
   27d4c:	0092      	lsls	r2, r2, #2
   27d4e:	58d3      	ldr	r3, [r2, r3]
   27d50:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27d52:	697b      	ldr	r3, [r7, #20]
   27d54:	681b      	ldr	r3, [r3, #0]
   27d56:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27d58:	230e      	movs	r3, #14
   27d5a:	18fb      	adds	r3, r7, r3
   27d5c:	697a      	ldr	r2, [r7, #20]
   27d5e:	8a52      	ldrh	r2, [r2, #18]
   27d60:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27d62:	697b      	ldr	r3, [r7, #20]
   27d64:	8a1b      	ldrh	r3, [r3, #16]
   27d66:	b29a      	uxth	r2, r3
   27d68:	230e      	movs	r3, #14
   27d6a:	18fb      	adds	r3, r7, r3
   27d6c:	210e      	movs	r1, #14
   27d6e:	1879      	adds	r1, r7, r1
   27d70:	8809      	ldrh	r1, [r1, #0]
   27d72:	400a      	ands	r2, r1
   27d74:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27d76:	693b      	ldr	r3, [r7, #16]
   27d78:	7a1b      	ldrb	r3, [r3, #8]
   27d7a:	b2da      	uxtb	r2, r3
   27d7c:	230c      	movs	r3, #12
   27d7e:	18fb      	adds	r3, r7, r3
   27d80:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27d82:	693b      	ldr	r3, [r7, #16]
   27d84:	79db      	ldrb	r3, [r3, #7]
   27d86:	b2db      	uxtb	r3, r3
   27d88:	b29a      	uxth	r2, r3
   27d8a:	230c      	movs	r3, #12
   27d8c:	18fb      	adds	r3, r7, r3
   27d8e:	210c      	movs	r1, #12
   27d90:	1879      	adds	r1, r7, r1
   27d92:	8809      	ldrh	r1, [r1, #0]
   27d94:	400a      	ands	r2, r1
   27d96:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27d98:	230c      	movs	r3, #12
   27d9a:	18fb      	adds	r3, r7, r3
   27d9c:	881b      	ldrh	r3, [r3, #0]
   27d9e:	2280      	movs	r2, #128	; 0x80
   27da0:	4013      	ands	r3, r2
   27da2:	d00c      	beq.n	27dbe <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27da4:	230e      	movs	r3, #14
   27da6:	18fb      	adds	r3, r7, r3
   27da8:	881b      	ldrh	r3, [r3, #0]
   27daa:	2202      	movs	r2, #2
   27dac:	4013      	ands	r3, r2
   27dae:	d002      	beq.n	27db6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27db0:	697b      	ldr	r3, [r7, #20]
   27db2:	68db      	ldr	r3, [r3, #12]
   27db4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27db6:	693b      	ldr	r3, [r7, #16]
   27db8:	2280      	movs	r2, #128	; 0x80
   27dba:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27dbc:	e011      	b.n	27de2 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27dbe:	230c      	movs	r3, #12
   27dc0:	18fb      	adds	r3, r7, r3
   27dc2:	881b      	ldrh	r3, [r3, #0]
   27dc4:	2201      	movs	r2, #1
   27dc6:	4013      	ands	r3, r2
   27dc8:	d00b      	beq.n	27de2 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   27dca:	230e      	movs	r3, #14
   27dcc:	18fb      	adds	r3, r7, r3
   27dce:	881b      	ldrh	r3, [r3, #0]
   27dd0:	2201      	movs	r2, #1
   27dd2:	4013      	ands	r3, r2
   27dd4:	d002      	beq.n	27ddc <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27dd6:	697b      	ldr	r3, [r7, #20]
   27dd8:	689b      	ldr	r3, [r3, #8]
   27dda:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   27ddc:	693b      	ldr	r3, [r7, #16]
   27dde:	2201      	movs	r2, #1
   27de0:	721a      	strb	r2, [r3, #8]
}
   27de2:	46c0      	nop			; (mov r8, r8)
   27de4:	46bd      	mov	sp, r7
   27de6:	b006      	add	sp, #24
   27de8:	bd80      	pop	{r7, pc}
   27dea:	46c0      	nop			; (mov r8, r8)
   27dec:	20005c94 	.word	0x20005c94

00027df0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27df0:	b580      	push	{r7, lr}
   27df2:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27df4:	2000      	movs	r0, #0
   27df6:	4b02      	ldr	r3, [pc, #8]	; (27e00 <RTC_Handler+0x10>)
   27df8:	4798      	blx	r3
}
   27dfa:	46c0      	nop			; (mov r8, r8)
   27dfc:	46bd      	mov	sp, r7
   27dfe:	bd80      	pop	{r7, pc}
   27e00:	00027d41 	.word	0x00027d41

00027e04 <system_gclk_chan_get_config_defaults>:
{
   27e04:	b580      	push	{r7, lr}
   27e06:	b082      	sub	sp, #8
   27e08:	af00      	add	r7, sp, #0
   27e0a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27e0c:	687b      	ldr	r3, [r7, #4]
   27e0e:	2200      	movs	r2, #0
   27e10:	701a      	strb	r2, [r3, #0]
}
   27e12:	46c0      	nop			; (mov r8, r8)
   27e14:	46bd      	mov	sp, r7
   27e16:	b002      	add	sp, #8
   27e18:	bd80      	pop	{r7, pc}

00027e1a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   27e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   27e1c:	b08d      	sub	sp, #52	; 0x34
   27e1e:	af00      	add	r7, sp, #0
   27e20:	60b8      	str	r0, [r7, #8]
   27e22:	60f9      	str	r1, [r7, #12]
   27e24:	603a      	str	r2, [r7, #0]
   27e26:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27e28:	2300      	movs	r3, #0
   27e2a:	2400      	movs	r4, #0
   27e2c:	623b      	str	r3, [r7, #32]
   27e2e:	627c      	str	r4, [r7, #36]	; 0x24
   27e30:	2300      	movs	r3, #0
   27e32:	2400      	movs	r4, #0
   27e34:	61bb      	str	r3, [r7, #24]
   27e36:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27e38:	233f      	movs	r3, #63	; 0x3f
   27e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   27e3c:	e053      	b.n	27ee6 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   27e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27e40:	3b20      	subs	r3, #32
   27e42:	2b00      	cmp	r3, #0
   27e44:	db04      	blt.n	27e50 <long_division+0x36>
   27e46:	2201      	movs	r2, #1
   27e48:	409a      	lsls	r2, r3
   27e4a:	0013      	movs	r3, r2
   27e4c:	617b      	str	r3, [r7, #20]
   27e4e:	e00b      	b.n	27e68 <long_division+0x4e>
   27e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27e52:	2220      	movs	r2, #32
   27e54:	1ad3      	subs	r3, r2, r3
   27e56:	2201      	movs	r2, #1
   27e58:	40da      	lsrs	r2, r3
   27e5a:	0013      	movs	r3, r2
   27e5c:	2100      	movs	r1, #0
   27e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27e60:	4091      	lsls	r1, r2
   27e62:	000a      	movs	r2, r1
   27e64:	4313      	orrs	r3, r2
   27e66:	617b      	str	r3, [r7, #20]
   27e68:	2201      	movs	r2, #1
   27e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27e6c:	409a      	lsls	r2, r3
   27e6e:	0013      	movs	r3, r2
   27e70:	613b      	str	r3, [r7, #16]

		r = r << 1;
   27e72:	69bb      	ldr	r3, [r7, #24]
   27e74:	69fc      	ldr	r4, [r7, #28]
   27e76:	18db      	adds	r3, r3, r3
   27e78:	4164      	adcs	r4, r4
   27e7a:	61bb      	str	r3, [r7, #24]
   27e7c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   27e7e:	68bb      	ldr	r3, [r7, #8]
   27e80:	693a      	ldr	r2, [r7, #16]
   27e82:	401a      	ands	r2, r3
   27e84:	0015      	movs	r5, r2
   27e86:	68fb      	ldr	r3, [r7, #12]
   27e88:	697a      	ldr	r2, [r7, #20]
   27e8a:	401a      	ands	r2, r3
   27e8c:	0016      	movs	r6, r2
   27e8e:	002b      	movs	r3, r5
   27e90:	4333      	orrs	r3, r6
   27e92:	d007      	beq.n	27ea4 <long_division+0x8a>
			r |= 0x01;
   27e94:	69bb      	ldr	r3, [r7, #24]
   27e96:	2201      	movs	r2, #1
   27e98:	4313      	orrs	r3, r2
   27e9a:	61bb      	str	r3, [r7, #24]
   27e9c:	69fb      	ldr	r3, [r7, #28]
   27e9e:	2200      	movs	r2, #0
   27ea0:	4313      	orrs	r3, r2
   27ea2:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27ea4:	687a      	ldr	r2, [r7, #4]
   27ea6:	69fb      	ldr	r3, [r7, #28]
   27ea8:	429a      	cmp	r2, r3
   27eaa:	d819      	bhi.n	27ee0 <long_division+0xc6>
   27eac:	687a      	ldr	r2, [r7, #4]
   27eae:	69fb      	ldr	r3, [r7, #28]
   27eb0:	429a      	cmp	r2, r3
   27eb2:	d103      	bne.n	27ebc <long_division+0xa2>
   27eb4:	683a      	ldr	r2, [r7, #0]
   27eb6:	69bb      	ldr	r3, [r7, #24]
   27eb8:	429a      	cmp	r2, r3
   27eba:	d811      	bhi.n	27ee0 <long_division+0xc6>
			r = r - d;
   27ebc:	69b9      	ldr	r1, [r7, #24]
   27ebe:	69fa      	ldr	r2, [r7, #28]
   27ec0:	683b      	ldr	r3, [r7, #0]
   27ec2:	687c      	ldr	r4, [r7, #4]
   27ec4:	1ac9      	subs	r1, r1, r3
   27ec6:	41a2      	sbcs	r2, r4
   27ec8:	000b      	movs	r3, r1
   27eca:	0014      	movs	r4, r2
   27ecc:	61bb      	str	r3, [r7, #24]
   27ece:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   27ed0:	6a3a      	ldr	r2, [r7, #32]
   27ed2:	693b      	ldr	r3, [r7, #16]
   27ed4:	4313      	orrs	r3, r2
   27ed6:	623b      	str	r3, [r7, #32]
   27ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27eda:	697b      	ldr	r3, [r7, #20]
   27edc:	4313      	orrs	r3, r2
   27ede:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   27ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27ee2:	3b01      	subs	r3, #1
   27ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   27ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27ee8:	2b00      	cmp	r3, #0
   27eea:	daa8      	bge.n	27e3e <long_division+0x24>
		}
	}

	return q;
   27eec:	6a3b      	ldr	r3, [r7, #32]
   27eee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   27ef0:	0018      	movs	r0, r3
   27ef2:	0021      	movs	r1, r4
   27ef4:	46bd      	mov	sp, r7
   27ef6:	b00d      	add	sp, #52	; 0x34
   27ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027efa <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   27efa:	b580      	push	{r7, lr}
   27efc:	b086      	sub	sp, #24
   27efe:	af00      	add	r7, sp, #0
   27f00:	60f8      	str	r0, [r7, #12]
   27f02:	60b9      	str	r1, [r7, #8]
   27f04:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27f06:	2316      	movs	r3, #22
   27f08:	18fb      	adds	r3, r7, r3
   27f0a:	2200      	movs	r2, #0
   27f0c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   27f0e:	68bb      	ldr	r3, [r7, #8]
   27f10:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   27f12:	68bb      	ldr	r3, [r7, #8]
   27f14:	085a      	lsrs	r2, r3, #1
   27f16:	68fb      	ldr	r3, [r7, #12]
   27f18:	429a      	cmp	r2, r3
   27f1a:	d201      	bcs.n	27f20 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27f1c:	2340      	movs	r3, #64	; 0x40
   27f1e:	e026      	b.n	27f6e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27f20:	68bb      	ldr	r3, [r7, #8]
   27f22:	085b      	lsrs	r3, r3, #1
   27f24:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27f26:	e00a      	b.n	27f3e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27f28:	693a      	ldr	r2, [r7, #16]
   27f2a:	68fb      	ldr	r3, [r7, #12]
   27f2c:	1ad3      	subs	r3, r2, r3
   27f2e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27f30:	2316      	movs	r3, #22
   27f32:	18fb      	adds	r3, r7, r3
   27f34:	881a      	ldrh	r2, [r3, #0]
   27f36:	2316      	movs	r3, #22
   27f38:	18fb      	adds	r3, r7, r3
   27f3a:	3201      	adds	r2, #1
   27f3c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   27f3e:	693a      	ldr	r2, [r7, #16]
   27f40:	68fb      	ldr	r3, [r7, #12]
   27f42:	429a      	cmp	r2, r3
   27f44:	d2f0      	bcs.n	27f28 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27f46:	2316      	movs	r3, #22
   27f48:	18fb      	adds	r3, r7, r3
   27f4a:	2216      	movs	r2, #22
   27f4c:	18ba      	adds	r2, r7, r2
   27f4e:	8812      	ldrh	r2, [r2, #0]
   27f50:	3a01      	subs	r2, #1
   27f52:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27f54:	2316      	movs	r3, #22
   27f56:	18fb      	adds	r3, r7, r3
   27f58:	881b      	ldrh	r3, [r3, #0]
   27f5a:	2bff      	cmp	r3, #255	; 0xff
   27f5c:	d901      	bls.n	27f62 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27f5e:	2340      	movs	r3, #64	; 0x40
   27f60:	e005      	b.n	27f6e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   27f62:	687b      	ldr	r3, [r7, #4]
   27f64:	2216      	movs	r2, #22
   27f66:	18ba      	adds	r2, r7, r2
   27f68:	8812      	ldrh	r2, [r2, #0]
   27f6a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27f6c:	2300      	movs	r3, #0
	}
}
   27f6e:	0018      	movs	r0, r3
   27f70:	46bd      	mov	sp, r7
   27f72:	b006      	add	sp, #24
   27f74:	bd80      	pop	{r7, pc}
	...

00027f78 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f7a:	b0a1      	sub	sp, #132	; 0x84
   27f7c:	af00      	add	r7, sp, #0
   27f7e:	64f8      	str	r0, [r7, #76]	; 0x4c
   27f80:	64b9      	str	r1, [r7, #72]	; 0x48
   27f82:	647a      	str	r2, [r7, #68]	; 0x44
   27f84:	2243      	movs	r2, #67	; 0x43
   27f86:	18ba      	adds	r2, r7, r2
   27f88:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27f8a:	2300      	movs	r3, #0
   27f8c:	2400      	movs	r4, #0
   27f8e:	673b      	str	r3, [r7, #112]	; 0x70
   27f90:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   27f92:	2300      	movs	r3, #0
   27f94:	2400      	movs	r4, #0
   27f96:	66bb      	str	r3, [r7, #104]	; 0x68
   27f98:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27f9a:	2300      	movs	r3, #0
   27f9c:	2400      	movs	r4, #0
   27f9e:	67bb      	str	r3, [r7, #120]	; 0x78
   27fa0:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   27fa2:	2300      	movs	r3, #0
   27fa4:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27fa6:	2358      	movs	r3, #88	; 0x58
   27fa8:	2240      	movs	r2, #64	; 0x40
   27faa:	4694      	mov	ip, r2
   27fac:	44bc      	add	ip, r7
   27fae:	4463      	add	r3, ip
   27fb0:	781a      	ldrb	r2, [r3, #0]
   27fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27fb4:	435a      	muls	r2, r3
   27fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27fb8:	429a      	cmp	r2, r3
   27fba:	d901      	bls.n	27fc0 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27fbc:	2340      	movs	r3, #64	; 0x40
   27fbe:	e0b3      	b.n	28128 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27fc0:	2343      	movs	r3, #67	; 0x43
   27fc2:	18fb      	adds	r3, r7, r3
   27fc4:	781b      	ldrb	r3, [r3, #0]
   27fc6:	2b00      	cmp	r3, #0
   27fc8:	d13d      	bne.n	28046 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   27fca:	2358      	movs	r3, #88	; 0x58
   27fcc:	2240      	movs	r2, #64	; 0x40
   27fce:	4694      	mov	ip, r2
   27fd0:	44bc      	add	ip, r7
   27fd2:	4463      	add	r3, ip
   27fd4:	781b      	ldrb	r3, [r3, #0]
   27fd6:	b2db      	uxtb	r3, r3
   27fd8:	613b      	str	r3, [r7, #16]
   27fda:	2300      	movs	r3, #0
   27fdc:	617b      	str	r3, [r7, #20]
   27fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27fe0:	60bb      	str	r3, [r7, #8]
   27fe2:	2300      	movs	r3, #0
   27fe4:	60fb      	str	r3, [r7, #12]
   27fe6:	4c52      	ldr	r4, [pc, #328]	; (28130 <_sercom_get_async_baud_val+0x1b8>)
   27fe8:	68ba      	ldr	r2, [r7, #8]
   27fea:	68fb      	ldr	r3, [r7, #12]
   27fec:	6938      	ldr	r0, [r7, #16]
   27fee:	6979      	ldr	r1, [r7, #20]
   27ff0:	47a0      	blx	r4
   27ff2:	0003      	movs	r3, r0
   27ff4:	000c      	movs	r4, r1
   27ff6:	001b      	movs	r3, r3
   27ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
   27ffa:	2300      	movs	r3, #0
   27ffc:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   27ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   28000:	603b      	str	r3, [r7, #0]
   28002:	2300      	movs	r3, #0
   28004:	607b      	str	r3, [r7, #4]
   28006:	6db8      	ldr	r0, [r7, #88]	; 0x58
   28008:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2800a:	683a      	ldr	r2, [r7, #0]
   2800c:	687b      	ldr	r3, [r7, #4]
   2800e:	4c49      	ldr	r4, [pc, #292]	; (28134 <_sercom_get_async_baud_val+0x1bc>)
   28010:	47a0      	blx	r4
   28012:	0003      	movs	r3, r0
   28014:	000c      	movs	r4, r1
   28016:	673b      	str	r3, [r7, #112]	; 0x70
   28018:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   2801a:	2100      	movs	r1, #0
   2801c:	2201      	movs	r2, #1
   2801e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   28020:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   28022:	1ac9      	subs	r1, r1, r3
   28024:	41a2      	sbcs	r2, r4
   28026:	000b      	movs	r3, r1
   28028:	0014      	movs	r4, r2
   2802a:	66bb      	str	r3, [r7, #104]	; 0x68
   2802c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2802e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   28030:	0c1b      	lsrs	r3, r3, #16
   28032:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   28034:	0416      	lsls	r6, r2, #16
   28036:	431e      	orrs	r6, r3
   28038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2803a:	041d      	lsls	r5, r3, #16
   2803c:	0033      	movs	r3, r6
   2803e:	67bb      	str	r3, [r7, #120]	; 0x78
   28040:	2300      	movs	r3, #0
   28042:	67fb      	str	r3, [r7, #124]	; 0x7c
   28044:	e06a      	b.n	2811c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   28046:	2343      	movs	r3, #67	; 0x43
   28048:	18fb      	adds	r3, r7, r3
   2804a:	781b      	ldrb	r3, [r3, #0]
   2804c:	2b01      	cmp	r3, #1
   2804e:	d165      	bne.n	2811c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   28050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   28052:	633b      	str	r3, [r7, #48]	; 0x30
   28054:	2300      	movs	r3, #0
   28056:	637b      	str	r3, [r7, #52]	; 0x34
   28058:	2358      	movs	r3, #88	; 0x58
   2805a:	2240      	movs	r2, #64	; 0x40
   2805c:	4694      	mov	ip, r2
   2805e:	44bc      	add	ip, r7
   28060:	4463      	add	r3, ip
   28062:	781b      	ldrb	r3, [r3, #0]
   28064:	b2db      	uxtb	r3, r3
   28066:	62bb      	str	r3, [r7, #40]	; 0x28
   28068:	2300      	movs	r3, #0
   2806a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2806c:	4c30      	ldr	r4, [pc, #192]	; (28130 <_sercom_get_async_baud_val+0x1b8>)
   2806e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   28070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28072:	6b38      	ldr	r0, [r7, #48]	; 0x30
   28074:	6b79      	ldr	r1, [r7, #52]	; 0x34
   28076:	47a0      	blx	r4
   28078:	0003      	movs	r3, r0
   2807a:	000c      	movs	r4, r1
   2807c:	65bb      	str	r3, [r7, #88]	; 0x58
   2807e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   28080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   28082:	623b      	str	r3, [r7, #32]
   28084:	2300      	movs	r3, #0
   28086:	627b      	str	r3, [r7, #36]	; 0x24
   28088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2808a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2808c:	001a      	movs	r2, r3
   2808e:	0023      	movs	r3, r4
   28090:	6a38      	ldr	r0, [r7, #32]
   28092:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28094:	4c27      	ldr	r4, [pc, #156]	; (28134 <_sercom_get_async_baud_val+0x1bc>)
   28096:	47a0      	blx	r4
   28098:	0003      	movs	r3, r0
   2809a:	000c      	movs	r4, r1
   2809c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2809e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   280a0:	2380      	movs	r3, #128	; 0x80
   280a2:	019b      	lsls	r3, r3, #6
   280a4:	429a      	cmp	r2, r3
   280a6:	d901      	bls.n	280ac <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   280a8:	2340      	movs	r3, #64	; 0x40
   280aa:	e03d      	b.n	28128 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   280ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   280ae:	61bb      	str	r3, [r7, #24]
   280b0:	2300      	movs	r3, #0
   280b2:	61fb      	str	r3, [r7, #28]
   280b4:	69b9      	ldr	r1, [r7, #24]
   280b6:	69fa      	ldr	r2, [r7, #28]
   280b8:	000b      	movs	r3, r1
   280ba:	0f5b      	lsrs	r3, r3, #29
   280bc:	0010      	movs	r0, r2
   280be:	00c0      	lsls	r0, r0, #3
   280c0:	63f8      	str	r0, [r7, #60]	; 0x3c
   280c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   280c4:	4318      	orrs	r0, r3
   280c6:	63f8      	str	r0, [r7, #60]	; 0x3c
   280c8:	000b      	movs	r3, r1
   280ca:	00db      	lsls	r3, r3, #3
   280cc:	63bb      	str	r3, [r7, #56]	; 0x38
   280ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   280d0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   280d2:	001a      	movs	r2, r3
   280d4:	0023      	movs	r3, r4
   280d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   280d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   280da:	4c16      	ldr	r4, [pc, #88]	; (28134 <_sercom_get_async_baud_val+0x1bc>)
   280dc:	47a0      	blx	r4
   280de:	0003      	movs	r3, r0
   280e0:	000c      	movs	r4, r1
   280e2:	65bb      	str	r3, [r7, #88]	; 0x58
   280e4:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   280e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   280e8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   280ea:	b2d9      	uxtb	r1, r3
   280ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   280ee:	b2db      	uxtb	r3, r3
   280f0:	00db      	lsls	r3, r3, #3
   280f2:	b2da      	uxtb	r2, r3
   280f4:	2317      	movs	r3, #23
   280f6:	2040      	movs	r0, #64	; 0x40
   280f8:	4684      	mov	ip, r0
   280fa:	44bc      	add	ip, r7
   280fc:	4463      	add	r3, ip
   280fe:	1a8a      	subs	r2, r1, r2
   28100:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   28102:	2317      	movs	r3, #23
   28104:	2240      	movs	r2, #64	; 0x40
   28106:	4694      	mov	ip, r2
   28108:	44bc      	add	ip, r7
   2810a:	4463      	add	r3, ip
   2810c:	781b      	ldrb	r3, [r3, #0]
   2810e:	035b      	lsls	r3, r3, #13
   28110:	001a      	movs	r2, r3
   28112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   28114:	4313      	orrs	r3, r2
   28116:	67bb      	str	r3, [r7, #120]	; 0x78
   28118:	2300      	movs	r3, #0
   2811a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   2811c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2811e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   28120:	b29a      	uxth	r2, r3
   28122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   28124:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   28126:	2300      	movs	r3, #0
}
   28128:	0018      	movs	r0, r3
   2812a:	46bd      	mov	sp, r7
   2812c:	b021      	add	sp, #132	; 0x84
   2812e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28130:	00033a91 	.word	0x00033a91
   28134:	00027e1b 	.word	0x00027e1b

00028138 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   28138:	b580      	push	{r7, lr}
   2813a:	b084      	sub	sp, #16
   2813c:	af00      	add	r7, sp, #0
   2813e:	0002      	movs	r2, r0
   28140:	1dfb      	adds	r3, r7, #7
   28142:	701a      	strb	r2, [r3, #0]
   28144:	1dbb      	adds	r3, r7, #6
   28146:	1c0a      	adds	r2, r1, #0
   28148:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2814a:	4b1a      	ldr	r3, [pc, #104]	; (281b4 <sercom_set_gclk_generator+0x7c>)
   2814c:	781b      	ldrb	r3, [r3, #0]
   2814e:	2201      	movs	r2, #1
   28150:	4053      	eors	r3, r2
   28152:	b2db      	uxtb	r3, r3
   28154:	2b00      	cmp	r3, #0
   28156:	d103      	bne.n	28160 <sercom_set_gclk_generator+0x28>
   28158:	1dbb      	adds	r3, r7, #6
   2815a:	781b      	ldrb	r3, [r3, #0]
   2815c:	2b00      	cmp	r3, #0
   2815e:	d01b      	beq.n	28198 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28160:	230c      	movs	r3, #12
   28162:	18fb      	adds	r3, r7, r3
   28164:	0018      	movs	r0, r3
   28166:	4b14      	ldr	r3, [pc, #80]	; (281b8 <sercom_set_gclk_generator+0x80>)
   28168:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   2816a:	230c      	movs	r3, #12
   2816c:	18fb      	adds	r3, r7, r3
   2816e:	1dfa      	adds	r2, r7, #7
   28170:	7812      	ldrb	r2, [r2, #0]
   28172:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   28174:	230c      	movs	r3, #12
   28176:	18fb      	adds	r3, r7, r3
   28178:	0019      	movs	r1, r3
   2817a:	2013      	movs	r0, #19
   2817c:	4b0f      	ldr	r3, [pc, #60]	; (281bc <sercom_set_gclk_generator+0x84>)
   2817e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   28180:	2013      	movs	r0, #19
   28182:	4b0f      	ldr	r3, [pc, #60]	; (281c0 <sercom_set_gclk_generator+0x88>)
   28184:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   28186:	4b0b      	ldr	r3, [pc, #44]	; (281b4 <sercom_set_gclk_generator+0x7c>)
   28188:	1dfa      	adds	r2, r7, #7
   2818a:	7812      	ldrb	r2, [r2, #0]
   2818c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   2818e:	4b09      	ldr	r3, [pc, #36]	; (281b4 <sercom_set_gclk_generator+0x7c>)
   28190:	2201      	movs	r2, #1
   28192:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   28194:	2300      	movs	r3, #0
   28196:	e008      	b.n	281aa <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   28198:	4b06      	ldr	r3, [pc, #24]	; (281b4 <sercom_set_gclk_generator+0x7c>)
   2819a:	785b      	ldrb	r3, [r3, #1]
   2819c:	1dfa      	adds	r2, r7, #7
   2819e:	7812      	ldrb	r2, [r2, #0]
   281a0:	429a      	cmp	r2, r3
   281a2:	d101      	bne.n	281a8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   281a4:	2300      	movs	r3, #0
   281a6:	e000      	b.n	281aa <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   281a8:	231d      	movs	r3, #29
}
   281aa:	0018      	movs	r0, r3
   281ac:	46bd      	mov	sp, r7
   281ae:	b004      	add	sp, #16
   281b0:	bd80      	pop	{r7, pc}
   281b2:	46c0      	nop			; (mov r8, r8)
   281b4:	200042c0 	.word	0x200042c0
   281b8:	00027e05 	.word	0x00027e05
   281bc:	0002ac11 	.word	0x0002ac11
   281c0:	0002ac55 	.word	0x0002ac55

000281c4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   281c4:	b580      	push	{r7, lr}
   281c6:	b082      	sub	sp, #8
   281c8:	af00      	add	r7, sp, #0
   281ca:	6078      	str	r0, [r7, #4]
   281cc:	000a      	movs	r2, r1
   281ce:	1cfb      	adds	r3, r7, #3
   281d0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   281d2:	687b      	ldr	r3, [r7, #4]
   281d4:	4a4d      	ldr	r2, [pc, #308]	; (2830c <_sercom_get_default_pad+0x148>)
   281d6:	4293      	cmp	r3, r2
   281d8:	d03f      	beq.n	2825a <_sercom_get_default_pad+0x96>
   281da:	4a4c      	ldr	r2, [pc, #304]	; (2830c <_sercom_get_default_pad+0x148>)
   281dc:	4293      	cmp	r3, r2
   281de:	d806      	bhi.n	281ee <_sercom_get_default_pad+0x2a>
   281e0:	4a4b      	ldr	r2, [pc, #300]	; (28310 <_sercom_get_default_pad+0x14c>)
   281e2:	4293      	cmp	r3, r2
   281e4:	d00f      	beq.n	28206 <_sercom_get_default_pad+0x42>
   281e6:	4a4b      	ldr	r2, [pc, #300]	; (28314 <_sercom_get_default_pad+0x150>)
   281e8:	4293      	cmp	r3, r2
   281ea:	d021      	beq.n	28230 <_sercom_get_default_pad+0x6c>
   281ec:	e089      	b.n	28302 <_sercom_get_default_pad+0x13e>
   281ee:	4a4a      	ldr	r2, [pc, #296]	; (28318 <_sercom_get_default_pad+0x154>)
   281f0:	4293      	cmp	r3, r2
   281f2:	d100      	bne.n	281f6 <_sercom_get_default_pad+0x32>
   281f4:	e05b      	b.n	282ae <_sercom_get_default_pad+0xea>
   281f6:	4a49      	ldr	r2, [pc, #292]	; (2831c <_sercom_get_default_pad+0x158>)
   281f8:	4293      	cmp	r3, r2
   281fa:	d100      	bne.n	281fe <_sercom_get_default_pad+0x3a>
   281fc:	e06c      	b.n	282d8 <_sercom_get_default_pad+0x114>
   281fe:	4a48      	ldr	r2, [pc, #288]	; (28320 <_sercom_get_default_pad+0x15c>)
   28200:	4293      	cmp	r3, r2
   28202:	d03f      	beq.n	28284 <_sercom_get_default_pad+0xc0>
   28204:	e07d      	b.n	28302 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   28206:	1cfb      	adds	r3, r7, #3
   28208:	781b      	ldrb	r3, [r3, #0]
   2820a:	2b01      	cmp	r3, #1
   2820c:	d00a      	beq.n	28224 <_sercom_get_default_pad+0x60>
   2820e:	dc02      	bgt.n	28216 <_sercom_get_default_pad+0x52>
   28210:	2b00      	cmp	r3, #0
   28212:	d005      	beq.n	28220 <_sercom_get_default_pad+0x5c>
   28214:	e075      	b.n	28302 <_sercom_get_default_pad+0x13e>
   28216:	2b02      	cmp	r3, #2
   28218:	d006      	beq.n	28228 <_sercom_get_default_pad+0x64>
   2821a:	2b03      	cmp	r3, #3
   2821c:	d006      	beq.n	2822c <_sercom_get_default_pad+0x68>
   2821e:	e070      	b.n	28302 <_sercom_get_default_pad+0x13e>
   28220:	4b40      	ldr	r3, [pc, #256]	; (28324 <_sercom_get_default_pad+0x160>)
   28222:	e06f      	b.n	28304 <_sercom_get_default_pad+0x140>
   28224:	4b40      	ldr	r3, [pc, #256]	; (28328 <_sercom_get_default_pad+0x164>)
   28226:	e06d      	b.n	28304 <_sercom_get_default_pad+0x140>
   28228:	4b40      	ldr	r3, [pc, #256]	; (2832c <_sercom_get_default_pad+0x168>)
   2822a:	e06b      	b.n	28304 <_sercom_get_default_pad+0x140>
   2822c:	4b40      	ldr	r3, [pc, #256]	; (28330 <_sercom_get_default_pad+0x16c>)
   2822e:	e069      	b.n	28304 <_sercom_get_default_pad+0x140>
   28230:	1cfb      	adds	r3, r7, #3
   28232:	781b      	ldrb	r3, [r3, #0]
   28234:	2b01      	cmp	r3, #1
   28236:	d00a      	beq.n	2824e <_sercom_get_default_pad+0x8a>
   28238:	dc02      	bgt.n	28240 <_sercom_get_default_pad+0x7c>
   2823a:	2b00      	cmp	r3, #0
   2823c:	d005      	beq.n	2824a <_sercom_get_default_pad+0x86>
   2823e:	e060      	b.n	28302 <_sercom_get_default_pad+0x13e>
   28240:	2b02      	cmp	r3, #2
   28242:	d006      	beq.n	28252 <_sercom_get_default_pad+0x8e>
   28244:	2b03      	cmp	r3, #3
   28246:	d006      	beq.n	28256 <_sercom_get_default_pad+0x92>
   28248:	e05b      	b.n	28302 <_sercom_get_default_pad+0x13e>
   2824a:	2303      	movs	r3, #3
   2824c:	e05a      	b.n	28304 <_sercom_get_default_pad+0x140>
   2824e:	4b39      	ldr	r3, [pc, #228]	; (28334 <_sercom_get_default_pad+0x170>)
   28250:	e058      	b.n	28304 <_sercom_get_default_pad+0x140>
   28252:	4b39      	ldr	r3, [pc, #228]	; (28338 <_sercom_get_default_pad+0x174>)
   28254:	e056      	b.n	28304 <_sercom_get_default_pad+0x140>
   28256:	4b39      	ldr	r3, [pc, #228]	; (2833c <_sercom_get_default_pad+0x178>)
   28258:	e054      	b.n	28304 <_sercom_get_default_pad+0x140>
   2825a:	1cfb      	adds	r3, r7, #3
   2825c:	781b      	ldrb	r3, [r3, #0]
   2825e:	2b01      	cmp	r3, #1
   28260:	d00a      	beq.n	28278 <_sercom_get_default_pad+0xb4>
   28262:	dc02      	bgt.n	2826a <_sercom_get_default_pad+0xa6>
   28264:	2b00      	cmp	r3, #0
   28266:	d005      	beq.n	28274 <_sercom_get_default_pad+0xb0>
   28268:	e04b      	b.n	28302 <_sercom_get_default_pad+0x13e>
   2826a:	2b02      	cmp	r3, #2
   2826c:	d006      	beq.n	2827c <_sercom_get_default_pad+0xb8>
   2826e:	2b03      	cmp	r3, #3
   28270:	d006      	beq.n	28280 <_sercom_get_default_pad+0xbc>
   28272:	e046      	b.n	28302 <_sercom_get_default_pad+0x13e>
   28274:	4b32      	ldr	r3, [pc, #200]	; (28340 <_sercom_get_default_pad+0x17c>)
   28276:	e045      	b.n	28304 <_sercom_get_default_pad+0x140>
   28278:	4b32      	ldr	r3, [pc, #200]	; (28344 <_sercom_get_default_pad+0x180>)
   2827a:	e043      	b.n	28304 <_sercom_get_default_pad+0x140>
   2827c:	4b32      	ldr	r3, [pc, #200]	; (28348 <_sercom_get_default_pad+0x184>)
   2827e:	e041      	b.n	28304 <_sercom_get_default_pad+0x140>
   28280:	4b32      	ldr	r3, [pc, #200]	; (2834c <_sercom_get_default_pad+0x188>)
   28282:	e03f      	b.n	28304 <_sercom_get_default_pad+0x140>
   28284:	1cfb      	adds	r3, r7, #3
   28286:	781b      	ldrb	r3, [r3, #0]
   28288:	2b01      	cmp	r3, #1
   2828a:	d00a      	beq.n	282a2 <_sercom_get_default_pad+0xde>
   2828c:	dc02      	bgt.n	28294 <_sercom_get_default_pad+0xd0>
   2828e:	2b00      	cmp	r3, #0
   28290:	d005      	beq.n	2829e <_sercom_get_default_pad+0xda>
   28292:	e036      	b.n	28302 <_sercom_get_default_pad+0x13e>
   28294:	2b02      	cmp	r3, #2
   28296:	d006      	beq.n	282a6 <_sercom_get_default_pad+0xe2>
   28298:	2b03      	cmp	r3, #3
   2829a:	d006      	beq.n	282aa <_sercom_get_default_pad+0xe6>
   2829c:	e031      	b.n	28302 <_sercom_get_default_pad+0x13e>
   2829e:	4b2c      	ldr	r3, [pc, #176]	; (28350 <_sercom_get_default_pad+0x18c>)
   282a0:	e030      	b.n	28304 <_sercom_get_default_pad+0x140>
   282a2:	4b2c      	ldr	r3, [pc, #176]	; (28354 <_sercom_get_default_pad+0x190>)
   282a4:	e02e      	b.n	28304 <_sercom_get_default_pad+0x140>
   282a6:	4b2c      	ldr	r3, [pc, #176]	; (28358 <_sercom_get_default_pad+0x194>)
   282a8:	e02c      	b.n	28304 <_sercom_get_default_pad+0x140>
   282aa:	4b2c      	ldr	r3, [pc, #176]	; (2835c <_sercom_get_default_pad+0x198>)
   282ac:	e02a      	b.n	28304 <_sercom_get_default_pad+0x140>
   282ae:	1cfb      	adds	r3, r7, #3
   282b0:	781b      	ldrb	r3, [r3, #0]
   282b2:	2b01      	cmp	r3, #1
   282b4:	d00a      	beq.n	282cc <_sercom_get_default_pad+0x108>
   282b6:	dc02      	bgt.n	282be <_sercom_get_default_pad+0xfa>
   282b8:	2b00      	cmp	r3, #0
   282ba:	d005      	beq.n	282c8 <_sercom_get_default_pad+0x104>
   282bc:	e021      	b.n	28302 <_sercom_get_default_pad+0x13e>
   282be:	2b02      	cmp	r3, #2
   282c0:	d006      	beq.n	282d0 <_sercom_get_default_pad+0x10c>
   282c2:	2b03      	cmp	r3, #3
   282c4:	d006      	beq.n	282d4 <_sercom_get_default_pad+0x110>
   282c6:	e01c      	b.n	28302 <_sercom_get_default_pad+0x13e>
   282c8:	4b25      	ldr	r3, [pc, #148]	; (28360 <_sercom_get_default_pad+0x19c>)
   282ca:	e01b      	b.n	28304 <_sercom_get_default_pad+0x140>
   282cc:	4b25      	ldr	r3, [pc, #148]	; (28364 <_sercom_get_default_pad+0x1a0>)
   282ce:	e019      	b.n	28304 <_sercom_get_default_pad+0x140>
   282d0:	4b25      	ldr	r3, [pc, #148]	; (28368 <_sercom_get_default_pad+0x1a4>)
   282d2:	e017      	b.n	28304 <_sercom_get_default_pad+0x140>
   282d4:	4b25      	ldr	r3, [pc, #148]	; (2836c <_sercom_get_default_pad+0x1a8>)
   282d6:	e015      	b.n	28304 <_sercom_get_default_pad+0x140>
   282d8:	1cfb      	adds	r3, r7, #3
   282da:	781b      	ldrb	r3, [r3, #0]
   282dc:	2b01      	cmp	r3, #1
   282de:	d00a      	beq.n	282f6 <_sercom_get_default_pad+0x132>
   282e0:	dc02      	bgt.n	282e8 <_sercom_get_default_pad+0x124>
   282e2:	2b00      	cmp	r3, #0
   282e4:	d005      	beq.n	282f2 <_sercom_get_default_pad+0x12e>
   282e6:	e00c      	b.n	28302 <_sercom_get_default_pad+0x13e>
   282e8:	2b02      	cmp	r3, #2
   282ea:	d006      	beq.n	282fa <_sercom_get_default_pad+0x136>
   282ec:	2b03      	cmp	r3, #3
   282ee:	d006      	beq.n	282fe <_sercom_get_default_pad+0x13a>
   282f0:	e007      	b.n	28302 <_sercom_get_default_pad+0x13e>
   282f2:	4b1f      	ldr	r3, [pc, #124]	; (28370 <_sercom_get_default_pad+0x1ac>)
   282f4:	e006      	b.n	28304 <_sercom_get_default_pad+0x140>
   282f6:	4b1f      	ldr	r3, [pc, #124]	; (28374 <_sercom_get_default_pad+0x1b0>)
   282f8:	e004      	b.n	28304 <_sercom_get_default_pad+0x140>
   282fa:	4b1f      	ldr	r3, [pc, #124]	; (28378 <_sercom_get_default_pad+0x1b4>)
   282fc:	e002      	b.n	28304 <_sercom_get_default_pad+0x140>
   282fe:	4b1f      	ldr	r3, [pc, #124]	; (2837c <_sercom_get_default_pad+0x1b8>)
   28300:	e000      	b.n	28304 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   28302:	2300      	movs	r3, #0
}
   28304:	0018      	movs	r0, r3
   28306:	46bd      	mov	sp, r7
   28308:	b002      	add	sp, #8
   2830a:	bd80      	pop	{r7, pc}
   2830c:	42001000 	.word	0x42001000
   28310:	42000800 	.word	0x42000800
   28314:	42000c00 	.word	0x42000c00
   28318:	42001800 	.word	0x42001800
   2831c:	42001c00 	.word	0x42001c00
   28320:	42001400 	.word	0x42001400
   28324:	00040003 	.word	0x00040003
   28328:	00050003 	.word	0x00050003
   2832c:	00060003 	.word	0x00060003
   28330:	00070003 	.word	0x00070003
   28334:	00010003 	.word	0x00010003
   28338:	001e0003 	.word	0x001e0003
   2833c:	001f0003 	.word	0x001f0003
   28340:	00080003 	.word	0x00080003
   28344:	00090003 	.word	0x00090003
   28348:	000a0003 	.word	0x000a0003
   2834c:	000b0003 	.word	0x000b0003
   28350:	00100003 	.word	0x00100003
   28354:	00110003 	.word	0x00110003
   28358:	00120003 	.word	0x00120003
   2835c:	00130003 	.word	0x00130003
   28360:	000c0003 	.word	0x000c0003
   28364:	000d0003 	.word	0x000d0003
   28368:	000e0003 	.word	0x000e0003
   2836c:	000f0003 	.word	0x000f0003
   28370:	00160003 	.word	0x00160003
   28374:	00170003 	.word	0x00170003
   28378:	00180003 	.word	0x00180003
   2837c:	00190003 	.word	0x00190003

00028380 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   28380:	b590      	push	{r4, r7, lr}
   28382:	b08b      	sub	sp, #44	; 0x2c
   28384:	af00      	add	r7, sp, #0
   28386:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   28388:	230c      	movs	r3, #12
   2838a:	18fb      	adds	r3, r7, r3
   2838c:	4a0f      	ldr	r2, [pc, #60]	; (283cc <_sercom_get_sercom_inst_index+0x4c>)
   2838e:	ca13      	ldmia	r2!, {r0, r1, r4}
   28390:	c313      	stmia	r3!, {r0, r1, r4}
   28392:	ca13      	ldmia	r2!, {r0, r1, r4}
   28394:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28396:	2300      	movs	r3, #0
   28398:	627b      	str	r3, [r7, #36]	; 0x24
   2839a:	e00e      	b.n	283ba <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   2839c:	230c      	movs	r3, #12
   2839e:	18fb      	adds	r3, r7, r3
   283a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   283a2:	0092      	lsls	r2, r2, #2
   283a4:	58d3      	ldr	r3, [r2, r3]
   283a6:	001a      	movs	r2, r3
   283a8:	687b      	ldr	r3, [r7, #4]
   283aa:	429a      	cmp	r2, r3
   283ac:	d102      	bne.n	283b4 <_sercom_get_sercom_inst_index+0x34>
			return i;
   283ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   283b0:	b2db      	uxtb	r3, r3
   283b2:	e006      	b.n	283c2 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   283b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   283b6:	3301      	adds	r3, #1
   283b8:	627b      	str	r3, [r7, #36]	; 0x24
   283ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   283bc:	2b05      	cmp	r3, #5
   283be:	d9ed      	bls.n	2839c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   283c0:	2300      	movs	r3, #0
}
   283c2:	0018      	movs	r0, r3
   283c4:	46bd      	mov	sp, r7
   283c6:	b00b      	add	sp, #44	; 0x2c
   283c8:	bd90      	pop	{r4, r7, pc}
   283ca:	46c0      	nop			; (mov r8, r8)
   283cc:	0003a41c 	.word	0x0003a41c

000283d0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   283d0:	b580      	push	{r7, lr}
   283d2:	b082      	sub	sp, #8
   283d4:	af00      	add	r7, sp, #0
   283d6:	0002      	movs	r2, r0
   283d8:	1dfb      	adds	r3, r7, #7
   283da:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   283dc:	46c0      	nop			; (mov r8, r8)
   283de:	46bd      	mov	sp, r7
   283e0:	b002      	add	sp, #8
   283e2:	bd80      	pop	{r7, pc}

000283e4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   283e4:	b580      	push	{r7, lr}
   283e6:	b084      	sub	sp, #16
   283e8:	af00      	add	r7, sp, #0
   283ea:	0002      	movs	r2, r0
   283ec:	6039      	str	r1, [r7, #0]
   283ee:	1dfb      	adds	r3, r7, #7
   283f0:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   283f2:	4b13      	ldr	r3, [pc, #76]	; (28440 <_sercom_set_handler+0x5c>)
   283f4:	781b      	ldrb	r3, [r3, #0]
   283f6:	2201      	movs	r2, #1
   283f8:	4053      	eors	r3, r2
   283fa:	b2db      	uxtb	r3, r3
   283fc:	2b00      	cmp	r3, #0
   283fe:	d015      	beq.n	2842c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28400:	2300      	movs	r3, #0
   28402:	60fb      	str	r3, [r7, #12]
   28404:	e00c      	b.n	28420 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   28406:	4b0f      	ldr	r3, [pc, #60]	; (28444 <_sercom_set_handler+0x60>)
   28408:	68fa      	ldr	r2, [r7, #12]
   2840a:	0092      	lsls	r2, r2, #2
   2840c:	490e      	ldr	r1, [pc, #56]	; (28448 <_sercom_set_handler+0x64>)
   2840e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   28410:	4b0e      	ldr	r3, [pc, #56]	; (2844c <_sercom_set_handler+0x68>)
   28412:	68fa      	ldr	r2, [r7, #12]
   28414:	0092      	lsls	r2, r2, #2
   28416:	2100      	movs	r1, #0
   28418:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2841a:	68fb      	ldr	r3, [r7, #12]
   2841c:	3301      	adds	r3, #1
   2841e:	60fb      	str	r3, [r7, #12]
   28420:	68fb      	ldr	r3, [r7, #12]
   28422:	2b05      	cmp	r3, #5
   28424:	d9ef      	bls.n	28406 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   28426:	4b06      	ldr	r3, [pc, #24]	; (28440 <_sercom_set_handler+0x5c>)
   28428:	2201      	movs	r2, #1
   2842a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   2842c:	1dfb      	adds	r3, r7, #7
   2842e:	781a      	ldrb	r2, [r3, #0]
   28430:	4b04      	ldr	r3, [pc, #16]	; (28444 <_sercom_set_handler+0x60>)
   28432:	0092      	lsls	r2, r2, #2
   28434:	6839      	ldr	r1, [r7, #0]
   28436:	50d1      	str	r1, [r2, r3]
}
   28438:	46c0      	nop			; (mov r8, r8)
   2843a:	46bd      	mov	sp, r7
   2843c:	b004      	add	sp, #16
   2843e:	bd80      	pop	{r7, pc}
   28440:	200042c2 	.word	0x200042c2
   28444:	200042c4 	.word	0x200042c4
   28448:	000283d1 	.word	0x000283d1
   2844c:	20005c98 	.word	0x20005c98

00028450 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   28450:	b590      	push	{r4, r7, lr}
   28452:	b085      	sub	sp, #20
   28454:	af00      	add	r7, sp, #0
   28456:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   28458:	2308      	movs	r3, #8
   2845a:	18fb      	adds	r3, r7, r3
   2845c:	4a0b      	ldr	r2, [pc, #44]	; (2848c <_sercom_get_interrupt_vector+0x3c>)
   2845e:	6811      	ldr	r1, [r2, #0]
   28460:	6019      	str	r1, [r3, #0]
   28462:	8892      	ldrh	r2, [r2, #4]
   28464:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   28466:	230f      	movs	r3, #15
   28468:	18fc      	adds	r4, r7, r3
   2846a:	687b      	ldr	r3, [r7, #4]
   2846c:	0018      	movs	r0, r3
   2846e:	4b08      	ldr	r3, [pc, #32]	; (28490 <_sercom_get_interrupt_vector+0x40>)
   28470:	4798      	blx	r3
   28472:	0003      	movs	r3, r0
   28474:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   28476:	230f      	movs	r3, #15
   28478:	18fb      	adds	r3, r7, r3
   2847a:	781b      	ldrb	r3, [r3, #0]
   2847c:	2208      	movs	r2, #8
   2847e:	18ba      	adds	r2, r7, r2
   28480:	5cd3      	ldrb	r3, [r2, r3]
   28482:	b25b      	sxtb	r3, r3
}
   28484:	0018      	movs	r0, r3
   28486:	46bd      	mov	sp, r7
   28488:	b005      	add	sp, #20
   2848a:	bd90      	pop	{r4, r7, pc}
   2848c:	0003a434 	.word	0x0003a434
   28490:	00028381 	.word	0x00028381

00028494 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   28494:	b580      	push	{r7, lr}
   28496:	af00      	add	r7, sp, #0
   28498:	4b03      	ldr	r3, [pc, #12]	; (284a8 <SERCOM0_Handler+0x14>)
   2849a:	681b      	ldr	r3, [r3, #0]
   2849c:	2000      	movs	r0, #0
   2849e:	4798      	blx	r3
   284a0:	46c0      	nop			; (mov r8, r8)
   284a2:	46bd      	mov	sp, r7
   284a4:	bd80      	pop	{r7, pc}
   284a6:	46c0      	nop			; (mov r8, r8)
   284a8:	200042c4 	.word	0x200042c4

000284ac <SERCOM1_Handler>:
   284ac:	b580      	push	{r7, lr}
   284ae:	af00      	add	r7, sp, #0
   284b0:	4b03      	ldr	r3, [pc, #12]	; (284c0 <SERCOM1_Handler+0x14>)
   284b2:	685b      	ldr	r3, [r3, #4]
   284b4:	2001      	movs	r0, #1
   284b6:	4798      	blx	r3
   284b8:	46c0      	nop			; (mov r8, r8)
   284ba:	46bd      	mov	sp, r7
   284bc:	bd80      	pop	{r7, pc}
   284be:	46c0      	nop			; (mov r8, r8)
   284c0:	200042c4 	.word	0x200042c4

000284c4 <SERCOM2_Handler>:
   284c4:	b580      	push	{r7, lr}
   284c6:	af00      	add	r7, sp, #0
   284c8:	4b03      	ldr	r3, [pc, #12]	; (284d8 <SERCOM2_Handler+0x14>)
   284ca:	689b      	ldr	r3, [r3, #8]
   284cc:	2002      	movs	r0, #2
   284ce:	4798      	blx	r3
   284d0:	46c0      	nop			; (mov r8, r8)
   284d2:	46bd      	mov	sp, r7
   284d4:	bd80      	pop	{r7, pc}
   284d6:	46c0      	nop			; (mov r8, r8)
   284d8:	200042c4 	.word	0x200042c4

000284dc <SERCOM3_Handler>:
   284dc:	b580      	push	{r7, lr}
   284de:	af00      	add	r7, sp, #0
   284e0:	4b03      	ldr	r3, [pc, #12]	; (284f0 <SERCOM3_Handler+0x14>)
   284e2:	68db      	ldr	r3, [r3, #12]
   284e4:	2003      	movs	r0, #3
   284e6:	4798      	blx	r3
   284e8:	46c0      	nop			; (mov r8, r8)
   284ea:	46bd      	mov	sp, r7
   284ec:	bd80      	pop	{r7, pc}
   284ee:	46c0      	nop			; (mov r8, r8)
   284f0:	200042c4 	.word	0x200042c4

000284f4 <SERCOM4_Handler>:
   284f4:	b580      	push	{r7, lr}
   284f6:	af00      	add	r7, sp, #0
   284f8:	4b03      	ldr	r3, [pc, #12]	; (28508 <SERCOM4_Handler+0x14>)
   284fa:	691b      	ldr	r3, [r3, #16]
   284fc:	2004      	movs	r0, #4
   284fe:	4798      	blx	r3
   28500:	46c0      	nop			; (mov r8, r8)
   28502:	46bd      	mov	sp, r7
   28504:	bd80      	pop	{r7, pc}
   28506:	46c0      	nop			; (mov r8, r8)
   28508:	200042c4 	.word	0x200042c4

0002850c <SERCOM5_Handler>:
   2850c:	b580      	push	{r7, lr}
   2850e:	af00      	add	r7, sp, #0
   28510:	4b03      	ldr	r3, [pc, #12]	; (28520 <SERCOM5_Handler+0x14>)
   28512:	695b      	ldr	r3, [r3, #20]
   28514:	2005      	movs	r0, #5
   28516:	4798      	blx	r3
   28518:	46c0      	nop			; (mov r8, r8)
   2851a:	46bd      	mov	sp, r7
   2851c:	bd80      	pop	{r7, pc}
   2851e:	46c0      	nop			; (mov r8, r8)
   28520:	200042c4 	.word	0x200042c4

00028524 <system_pinmux_get_config_defaults>:
{
   28524:	b580      	push	{r7, lr}
   28526:	b082      	sub	sp, #8
   28528:	af00      	add	r7, sp, #0
   2852a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2852c:	687b      	ldr	r3, [r7, #4]
   2852e:	2280      	movs	r2, #128	; 0x80
   28530:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28532:	687b      	ldr	r3, [r7, #4]
   28534:	2200      	movs	r2, #0
   28536:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28538:	687b      	ldr	r3, [r7, #4]
   2853a:	2201      	movs	r2, #1
   2853c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2853e:	687b      	ldr	r3, [r7, #4]
   28540:	2200      	movs	r2, #0
   28542:	70da      	strb	r2, [r3, #3]
}
   28544:	46c0      	nop			; (mov r8, r8)
   28546:	46bd      	mov	sp, r7
   28548:	b002      	add	sp, #8
   2854a:	bd80      	pop	{r7, pc}

0002854c <system_pinmux_get_group_from_gpio_pin>:
{
   2854c:	b580      	push	{r7, lr}
   2854e:	b084      	sub	sp, #16
   28550:	af00      	add	r7, sp, #0
   28552:	0002      	movs	r2, r0
   28554:	1dfb      	adds	r3, r7, #7
   28556:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28558:	230f      	movs	r3, #15
   2855a:	18fb      	adds	r3, r7, r3
   2855c:	1dfa      	adds	r2, r7, #7
   2855e:	7812      	ldrb	r2, [r2, #0]
   28560:	09d2      	lsrs	r2, r2, #7
   28562:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   28564:	230e      	movs	r3, #14
   28566:	18fb      	adds	r3, r7, r3
   28568:	1dfa      	adds	r2, r7, #7
   2856a:	7812      	ldrb	r2, [r2, #0]
   2856c:	0952      	lsrs	r2, r2, #5
   2856e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   28570:	4b0d      	ldr	r3, [pc, #52]	; (285a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   28572:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   28574:	230f      	movs	r3, #15
   28576:	18fb      	adds	r3, r7, r3
   28578:	781b      	ldrb	r3, [r3, #0]
   2857a:	2b00      	cmp	r3, #0
   2857c:	d10f      	bne.n	2859e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2857e:	230f      	movs	r3, #15
   28580:	18fb      	adds	r3, r7, r3
   28582:	781b      	ldrb	r3, [r3, #0]
   28584:	009b      	lsls	r3, r3, #2
   28586:	2210      	movs	r2, #16
   28588:	4694      	mov	ip, r2
   2858a:	44bc      	add	ip, r7
   2858c:	4463      	add	r3, ip
   2858e:	3b08      	subs	r3, #8
   28590:	681a      	ldr	r2, [r3, #0]
   28592:	230e      	movs	r3, #14
   28594:	18fb      	adds	r3, r7, r3
   28596:	781b      	ldrb	r3, [r3, #0]
   28598:	01db      	lsls	r3, r3, #7
   2859a:	18d3      	adds	r3, r2, r3
   2859c:	e000      	b.n	285a0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2859e:	2300      	movs	r3, #0
}
   285a0:	0018      	movs	r0, r3
   285a2:	46bd      	mov	sp, r7
   285a4:	b004      	add	sp, #16
   285a6:	bd80      	pop	{r7, pc}
   285a8:	41004400 	.word	0x41004400

000285ac <port_get_group_from_gpio_pin>:
{
   285ac:	b580      	push	{r7, lr}
   285ae:	b082      	sub	sp, #8
   285b0:	af00      	add	r7, sp, #0
   285b2:	0002      	movs	r2, r0
   285b4:	1dfb      	adds	r3, r7, #7
   285b6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   285b8:	1dfb      	adds	r3, r7, #7
   285ba:	781b      	ldrb	r3, [r3, #0]
   285bc:	0018      	movs	r0, r3
   285be:	4b03      	ldr	r3, [pc, #12]	; (285cc <port_get_group_from_gpio_pin+0x20>)
   285c0:	4798      	blx	r3
   285c2:	0003      	movs	r3, r0
}
   285c4:	0018      	movs	r0, r3
   285c6:	46bd      	mov	sp, r7
   285c8:	b002      	add	sp, #8
   285ca:	bd80      	pop	{r7, pc}
   285cc:	0002854d 	.word	0x0002854d

000285d0 <port_pin_set_output_level>:
{
   285d0:	b580      	push	{r7, lr}
   285d2:	b084      	sub	sp, #16
   285d4:	af00      	add	r7, sp, #0
   285d6:	0002      	movs	r2, r0
   285d8:	1dfb      	adds	r3, r7, #7
   285da:	701a      	strb	r2, [r3, #0]
   285dc:	1dbb      	adds	r3, r7, #6
   285de:	1c0a      	adds	r2, r1, #0
   285e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   285e2:	1dfb      	adds	r3, r7, #7
   285e4:	781b      	ldrb	r3, [r3, #0]
   285e6:	0018      	movs	r0, r3
   285e8:	4b0d      	ldr	r3, [pc, #52]	; (28620 <port_pin_set_output_level+0x50>)
   285ea:	4798      	blx	r3
   285ec:	0003      	movs	r3, r0
   285ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   285f0:	1dfb      	adds	r3, r7, #7
   285f2:	781b      	ldrb	r3, [r3, #0]
   285f4:	221f      	movs	r2, #31
   285f6:	4013      	ands	r3, r2
   285f8:	2201      	movs	r2, #1
   285fa:	409a      	lsls	r2, r3
   285fc:	0013      	movs	r3, r2
   285fe:	60bb      	str	r3, [r7, #8]
	if (level) {
   28600:	1dbb      	adds	r3, r7, #6
   28602:	781b      	ldrb	r3, [r3, #0]
   28604:	2b00      	cmp	r3, #0
   28606:	d003      	beq.n	28610 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28608:	68fb      	ldr	r3, [r7, #12]
   2860a:	68ba      	ldr	r2, [r7, #8]
   2860c:	619a      	str	r2, [r3, #24]
}
   2860e:	e002      	b.n	28616 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   28610:	68fb      	ldr	r3, [r7, #12]
   28612:	68ba      	ldr	r2, [r7, #8]
   28614:	615a      	str	r2, [r3, #20]
}
   28616:	46c0      	nop			; (mov r8, r8)
   28618:	46bd      	mov	sp, r7
   2861a:	b004      	add	sp, #16
   2861c:	bd80      	pop	{r7, pc}
   2861e:	46c0      	nop			; (mov r8, r8)
   28620:	000285ad 	.word	0x000285ad

00028624 <system_gclk_chan_get_config_defaults>:
{
   28624:	b580      	push	{r7, lr}
   28626:	b082      	sub	sp, #8
   28628:	af00      	add	r7, sp, #0
   2862a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2862c:	687b      	ldr	r3, [r7, #4]
   2862e:	2200      	movs	r2, #0
   28630:	701a      	strb	r2, [r3, #0]
}
   28632:	46c0      	nop			; (mov r8, r8)
   28634:	46bd      	mov	sp, r7
   28636:	b002      	add	sp, #8
   28638:	bd80      	pop	{r7, pc}
	...

0002863c <system_apb_clock_set_mask>:
{
   2863c:	b580      	push	{r7, lr}
   2863e:	b082      	sub	sp, #8
   28640:	af00      	add	r7, sp, #0
   28642:	0002      	movs	r2, r0
   28644:	6039      	str	r1, [r7, #0]
   28646:	1dfb      	adds	r3, r7, #7
   28648:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2864a:	1dfb      	adds	r3, r7, #7
   2864c:	781b      	ldrb	r3, [r3, #0]
   2864e:	2b01      	cmp	r3, #1
   28650:	d00a      	beq.n	28668 <system_apb_clock_set_mask+0x2c>
   28652:	2b02      	cmp	r3, #2
   28654:	d00f      	beq.n	28676 <system_apb_clock_set_mask+0x3a>
   28656:	2b00      	cmp	r3, #0
   28658:	d114      	bne.n	28684 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2865a:	4b0e      	ldr	r3, [pc, #56]	; (28694 <system_apb_clock_set_mask+0x58>)
   2865c:	4a0d      	ldr	r2, [pc, #52]	; (28694 <system_apb_clock_set_mask+0x58>)
   2865e:	6991      	ldr	r1, [r2, #24]
   28660:	683a      	ldr	r2, [r7, #0]
   28662:	430a      	orrs	r2, r1
   28664:	619a      	str	r2, [r3, #24]
			break;
   28666:	e00f      	b.n	28688 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28668:	4b0a      	ldr	r3, [pc, #40]	; (28694 <system_apb_clock_set_mask+0x58>)
   2866a:	4a0a      	ldr	r2, [pc, #40]	; (28694 <system_apb_clock_set_mask+0x58>)
   2866c:	69d1      	ldr	r1, [r2, #28]
   2866e:	683a      	ldr	r2, [r7, #0]
   28670:	430a      	orrs	r2, r1
   28672:	61da      	str	r2, [r3, #28]
			break;
   28674:	e008      	b.n	28688 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28676:	4b07      	ldr	r3, [pc, #28]	; (28694 <system_apb_clock_set_mask+0x58>)
   28678:	4a06      	ldr	r2, [pc, #24]	; (28694 <system_apb_clock_set_mask+0x58>)
   2867a:	6a11      	ldr	r1, [r2, #32]
   2867c:	683a      	ldr	r2, [r7, #0]
   2867e:	430a      	orrs	r2, r1
   28680:	621a      	str	r2, [r3, #32]
			break;
   28682:	e001      	b.n	28688 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28684:	2317      	movs	r3, #23
   28686:	e000      	b.n	2868a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28688:	2300      	movs	r3, #0
}
   2868a:	0018      	movs	r0, r3
   2868c:	46bd      	mov	sp, r7
   2868e:	b002      	add	sp, #8
   28690:	bd80      	pop	{r7, pc}
   28692:	46c0      	nop			; (mov r8, r8)
   28694:	40000400 	.word	0x40000400

00028698 <system_is_debugger_present>:
{
   28698:	b580      	push	{r7, lr}
   2869a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2869c:	4b05      	ldr	r3, [pc, #20]	; (286b4 <system_is_debugger_present+0x1c>)
   2869e:	789b      	ldrb	r3, [r3, #2]
   286a0:	b2db      	uxtb	r3, r3
   286a2:	001a      	movs	r2, r3
   286a4:	2302      	movs	r3, #2
   286a6:	4013      	ands	r3, r2
   286a8:	1e5a      	subs	r2, r3, #1
   286aa:	4193      	sbcs	r3, r2
   286ac:	b2db      	uxtb	r3, r3
}
   286ae:	0018      	movs	r0, r3
   286b0:	46bd      	mov	sp, r7
   286b2:	bd80      	pop	{r7, pc}
   286b4:	41002000 	.word	0x41002000

000286b8 <system_interrupt_enable>:
{
   286b8:	b580      	push	{r7, lr}
   286ba:	b082      	sub	sp, #8
   286bc:	af00      	add	r7, sp, #0
   286be:	0002      	movs	r2, r0
   286c0:	1dfb      	adds	r3, r7, #7
   286c2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   286c4:	4b06      	ldr	r3, [pc, #24]	; (286e0 <system_interrupt_enable+0x28>)
   286c6:	1dfa      	adds	r2, r7, #7
   286c8:	7812      	ldrb	r2, [r2, #0]
   286ca:	0011      	movs	r1, r2
   286cc:	221f      	movs	r2, #31
   286ce:	400a      	ands	r2, r1
   286d0:	2101      	movs	r1, #1
   286d2:	4091      	lsls	r1, r2
   286d4:	000a      	movs	r2, r1
   286d6:	601a      	str	r2, [r3, #0]
}
   286d8:	46c0      	nop			; (mov r8, r8)
   286da:	46bd      	mov	sp, r7
   286dc:	b002      	add	sp, #8
   286de:	bd80      	pop	{r7, pc}
   286e0:	e000e100 	.word	0xe000e100

000286e4 <system_interrupt_disable>:
{
   286e4:	b580      	push	{r7, lr}
   286e6:	b082      	sub	sp, #8
   286e8:	af00      	add	r7, sp, #0
   286ea:	0002      	movs	r2, r0
   286ec:	1dfb      	adds	r3, r7, #7
   286ee:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   286f0:	4a07      	ldr	r2, [pc, #28]	; (28710 <system_interrupt_disable+0x2c>)
   286f2:	1dfb      	adds	r3, r7, #7
   286f4:	781b      	ldrb	r3, [r3, #0]
   286f6:	0019      	movs	r1, r3
   286f8:	231f      	movs	r3, #31
   286fa:	400b      	ands	r3, r1
   286fc:	2101      	movs	r1, #1
   286fe:	4099      	lsls	r1, r3
   28700:	000b      	movs	r3, r1
   28702:	0019      	movs	r1, r3
   28704:	2380      	movs	r3, #128	; 0x80
   28706:	50d1      	str	r1, [r2, r3]
}
   28708:	46c0      	nop			; (mov r8, r8)
   2870a:	46bd      	mov	sp, r7
   2870c:	b002      	add	sp, #8
   2870e:	bd80      	pop	{r7, pc}
   28710:	e000e100 	.word	0xe000e100

00028714 <spi_is_syncing>:
{
   28714:	b580      	push	{r7, lr}
   28716:	b084      	sub	sp, #16
   28718:	af00      	add	r7, sp, #0
   2871a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2871c:	687b      	ldr	r3, [r7, #4]
   2871e:	681b      	ldr	r3, [r3, #0]
   28720:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   28722:	68fb      	ldr	r3, [r7, #12]
   28724:	69db      	ldr	r3, [r3, #28]
   28726:	1e5a      	subs	r2, r3, #1
   28728:	4193      	sbcs	r3, r2
   2872a:	b2db      	uxtb	r3, r3
}
   2872c:	0018      	movs	r0, r3
   2872e:	46bd      	mov	sp, r7
   28730:	b004      	add	sp, #16
   28732:	bd80      	pop	{r7, pc}

00028734 <spi_enable>:
{
   28734:	b580      	push	{r7, lr}
   28736:	b084      	sub	sp, #16
   28738:	af00      	add	r7, sp, #0
   2873a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2873c:	687b      	ldr	r3, [r7, #4]
   2873e:	681b      	ldr	r3, [r3, #0]
   28740:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   28742:	687b      	ldr	r3, [r7, #4]
   28744:	681b      	ldr	r3, [r3, #0]
   28746:	0018      	movs	r0, r3
   28748:	4b0b      	ldr	r3, [pc, #44]	; (28778 <spi_enable+0x44>)
   2874a:	4798      	blx	r3
   2874c:	0003      	movs	r3, r0
   2874e:	0018      	movs	r0, r3
   28750:	4b0a      	ldr	r3, [pc, #40]	; (2877c <spi_enable+0x48>)
   28752:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28754:	46c0      	nop			; (mov r8, r8)
   28756:	687b      	ldr	r3, [r7, #4]
   28758:	0018      	movs	r0, r3
   2875a:	4b09      	ldr	r3, [pc, #36]	; (28780 <spi_enable+0x4c>)
   2875c:	4798      	blx	r3
   2875e:	1e03      	subs	r3, r0, #0
   28760:	d1f9      	bne.n	28756 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   28762:	68fb      	ldr	r3, [r7, #12]
   28764:	681b      	ldr	r3, [r3, #0]
   28766:	2202      	movs	r2, #2
   28768:	431a      	orrs	r2, r3
   2876a:	68fb      	ldr	r3, [r7, #12]
   2876c:	601a      	str	r2, [r3, #0]
}
   2876e:	46c0      	nop			; (mov r8, r8)
   28770:	46bd      	mov	sp, r7
   28772:	b004      	add	sp, #16
   28774:	bd80      	pop	{r7, pc}
   28776:	46c0      	nop			; (mov r8, r8)
   28778:	00028451 	.word	0x00028451
   2877c:	000286b9 	.word	0x000286b9
   28780:	00028715 	.word	0x00028715

00028784 <spi_disable>:
{
   28784:	b580      	push	{r7, lr}
   28786:	b084      	sub	sp, #16
   28788:	af00      	add	r7, sp, #0
   2878a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2878c:	687b      	ldr	r3, [r7, #4]
   2878e:	681b      	ldr	r3, [r3, #0]
   28790:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   28792:	687b      	ldr	r3, [r7, #4]
   28794:	681b      	ldr	r3, [r3, #0]
   28796:	0018      	movs	r0, r3
   28798:	4b0e      	ldr	r3, [pc, #56]	; (287d4 <spi_disable+0x50>)
   2879a:	4798      	blx	r3
   2879c:	0003      	movs	r3, r0
   2879e:	0018      	movs	r0, r3
   287a0:	4b0d      	ldr	r3, [pc, #52]	; (287d8 <spi_disable+0x54>)
   287a2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   287a4:	46c0      	nop			; (mov r8, r8)
   287a6:	687b      	ldr	r3, [r7, #4]
   287a8:	0018      	movs	r0, r3
   287aa:	4b0c      	ldr	r3, [pc, #48]	; (287dc <spi_disable+0x58>)
   287ac:	4798      	blx	r3
   287ae:	1e03      	subs	r3, r0, #0
   287b0:	d1f9      	bne.n	287a6 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   287b2:	68fb      	ldr	r3, [r7, #12]
   287b4:	228f      	movs	r2, #143	; 0x8f
   287b6:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   287b8:	68fb      	ldr	r3, [r7, #12]
   287ba:	228f      	movs	r2, #143	; 0x8f
   287bc:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   287be:	68fb      	ldr	r3, [r7, #12]
   287c0:	681b      	ldr	r3, [r3, #0]
   287c2:	2202      	movs	r2, #2
   287c4:	4393      	bics	r3, r2
   287c6:	001a      	movs	r2, r3
   287c8:	68fb      	ldr	r3, [r7, #12]
   287ca:	601a      	str	r2, [r3, #0]
}
   287cc:	46c0      	nop			; (mov r8, r8)
   287ce:	46bd      	mov	sp, r7
   287d0:	b004      	add	sp, #16
   287d2:	bd80      	pop	{r7, pc}
   287d4:	00028451 	.word	0x00028451
   287d8:	000286e5 	.word	0x000286e5
   287dc:	00028715 	.word	0x00028715

000287e0 <spi_is_write_complete>:
{
   287e0:	b580      	push	{r7, lr}
   287e2:	b084      	sub	sp, #16
   287e4:	af00      	add	r7, sp, #0
   287e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   287e8:	687b      	ldr	r3, [r7, #4]
   287ea:	681b      	ldr	r3, [r3, #0]
   287ec:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   287ee:	68fb      	ldr	r3, [r7, #12]
   287f0:	7e1b      	ldrb	r3, [r3, #24]
   287f2:	b2db      	uxtb	r3, r3
   287f4:	001a      	movs	r2, r3
   287f6:	2302      	movs	r3, #2
   287f8:	4013      	ands	r3, r2
   287fa:	1e5a      	subs	r2, r3, #1
   287fc:	4193      	sbcs	r3, r2
   287fe:	b2db      	uxtb	r3, r3
}
   28800:	0018      	movs	r0, r3
   28802:	46bd      	mov	sp, r7
   28804:	b004      	add	sp, #16
   28806:	bd80      	pop	{r7, pc}

00028808 <spi_is_ready_to_write>:
{
   28808:	b580      	push	{r7, lr}
   2880a:	b084      	sub	sp, #16
   2880c:	af00      	add	r7, sp, #0
   2880e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28810:	687b      	ldr	r3, [r7, #4]
   28812:	681b      	ldr	r3, [r3, #0]
   28814:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   28816:	68fb      	ldr	r3, [r7, #12]
   28818:	7e1b      	ldrb	r3, [r3, #24]
   2881a:	b2db      	uxtb	r3, r3
   2881c:	001a      	movs	r2, r3
   2881e:	2301      	movs	r3, #1
   28820:	4013      	ands	r3, r2
   28822:	1e5a      	subs	r2, r3, #1
   28824:	4193      	sbcs	r3, r2
   28826:	b2db      	uxtb	r3, r3
}
   28828:	0018      	movs	r0, r3
   2882a:	46bd      	mov	sp, r7
   2882c:	b004      	add	sp, #16
   2882e:	bd80      	pop	{r7, pc}

00028830 <spi_is_ready_to_read>:
{
   28830:	b580      	push	{r7, lr}
   28832:	b084      	sub	sp, #16
   28834:	af00      	add	r7, sp, #0
   28836:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28838:	687b      	ldr	r3, [r7, #4]
   2883a:	681b      	ldr	r3, [r3, #0]
   2883c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2883e:	68fb      	ldr	r3, [r7, #12]
   28840:	7e1b      	ldrb	r3, [r3, #24]
   28842:	b2db      	uxtb	r3, r3
   28844:	001a      	movs	r2, r3
   28846:	2304      	movs	r3, #4
   28848:	4013      	ands	r3, r2
   2884a:	1e5a      	subs	r2, r3, #1
   2884c:	4193      	sbcs	r3, r2
   2884e:	b2db      	uxtb	r3, r3
}
   28850:	0018      	movs	r0, r3
   28852:	46bd      	mov	sp, r7
   28854:	b004      	add	sp, #16
   28856:	bd80      	pop	{r7, pc}

00028858 <spi_write>:
{
   28858:	b580      	push	{r7, lr}
   2885a:	b084      	sub	sp, #16
   2885c:	af00      	add	r7, sp, #0
   2885e:	6078      	str	r0, [r7, #4]
   28860:	000a      	movs	r2, r1
   28862:	1cbb      	adds	r3, r7, #2
   28864:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28866:	687b      	ldr	r3, [r7, #4]
   28868:	681b      	ldr	r3, [r3, #0]
   2886a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   2886c:	687b      	ldr	r3, [r7, #4]
   2886e:	0018      	movs	r0, r3
   28870:	4b0a      	ldr	r3, [pc, #40]	; (2889c <spi_write+0x44>)
   28872:	4798      	blx	r3
   28874:	0003      	movs	r3, r0
   28876:	001a      	movs	r2, r3
   28878:	2301      	movs	r3, #1
   2887a:	4053      	eors	r3, r2
   2887c:	b2db      	uxtb	r3, r3
   2887e:	2b00      	cmp	r3, #0
   28880:	d001      	beq.n	28886 <spi_write+0x2e>
		return STATUS_BUSY;
   28882:	2305      	movs	r3, #5
   28884:	e006      	b.n	28894 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   28886:	1cbb      	adds	r3, r7, #2
   28888:	881b      	ldrh	r3, [r3, #0]
   2888a:	05db      	lsls	r3, r3, #23
   2888c:	0dda      	lsrs	r2, r3, #23
   2888e:	68fb      	ldr	r3, [r7, #12]
   28890:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   28892:	2300      	movs	r3, #0
}
   28894:	0018      	movs	r0, r3
   28896:	46bd      	mov	sp, r7
   28898:	b004      	add	sp, #16
   2889a:	bd80      	pop	{r7, pc}
   2889c:	00028809 	.word	0x00028809

000288a0 <spi_read>:
{
   288a0:	b580      	push	{r7, lr}
   288a2:	b084      	sub	sp, #16
   288a4:	af00      	add	r7, sp, #0
   288a6:	6078      	str	r0, [r7, #4]
   288a8:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   288aa:	687b      	ldr	r3, [r7, #4]
   288ac:	681b      	ldr	r3, [r3, #0]
   288ae:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   288b0:	687b      	ldr	r3, [r7, #4]
   288b2:	0018      	movs	r0, r3
   288b4:	4b1b      	ldr	r3, [pc, #108]	; (28924 <spi_read+0x84>)
   288b6:	4798      	blx	r3
   288b8:	0003      	movs	r3, r0
   288ba:	001a      	movs	r2, r3
   288bc:	2301      	movs	r3, #1
   288be:	4053      	eors	r3, r2
   288c0:	b2db      	uxtb	r3, r3
   288c2:	2b00      	cmp	r3, #0
   288c4:	d001      	beq.n	288ca <spi_read+0x2a>
		return STATUS_ERR_IO;
   288c6:	2310      	movs	r3, #16
   288c8:	e027      	b.n	2891a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   288ca:	230f      	movs	r3, #15
   288cc:	18fb      	adds	r3, r7, r3
   288ce:	2200      	movs	r2, #0
   288d0:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   288d2:	68bb      	ldr	r3, [r7, #8]
   288d4:	8b5b      	ldrh	r3, [r3, #26]
   288d6:	b29b      	uxth	r3, r3
   288d8:	001a      	movs	r2, r3
   288da:	2304      	movs	r3, #4
   288dc:	4013      	ands	r3, r2
   288de:	d006      	beq.n	288ee <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   288e0:	230f      	movs	r3, #15
   288e2:	18fb      	adds	r3, r7, r3
   288e4:	221e      	movs	r2, #30
   288e6:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   288e8:	68bb      	ldr	r3, [r7, #8]
   288ea:	2204      	movs	r2, #4
   288ec:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   288ee:	687b      	ldr	r3, [r7, #4]
   288f0:	799b      	ldrb	r3, [r3, #6]
   288f2:	2b01      	cmp	r3, #1
   288f4:	d108      	bne.n	28908 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   288f6:	68bb      	ldr	r3, [r7, #8]
   288f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   288fa:	b29b      	uxth	r3, r3
   288fc:	05db      	lsls	r3, r3, #23
   288fe:	0ddb      	lsrs	r3, r3, #23
   28900:	b29a      	uxth	r2, r3
   28902:	683b      	ldr	r3, [r7, #0]
   28904:	801a      	strh	r2, [r3, #0]
   28906:	e005      	b.n	28914 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   28908:	68bb      	ldr	r3, [r7, #8]
   2890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2890c:	b2db      	uxtb	r3, r3
   2890e:	b29a      	uxth	r2, r3
   28910:	683b      	ldr	r3, [r7, #0]
   28912:	801a      	strh	r2, [r3, #0]
	return retval;
   28914:	230f      	movs	r3, #15
   28916:	18fb      	adds	r3, r7, r3
   28918:	781b      	ldrb	r3, [r3, #0]
}
   2891a:	0018      	movs	r0, r3
   2891c:	46bd      	mov	sp, r7
   2891e:	b004      	add	sp, #16
   28920:	bd80      	pop	{r7, pc}
   28922:	46c0      	nop			; (mov r8, r8)
   28924:	00028831 	.word	0x00028831

00028928 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   28928:	b590      	push	{r4, r7, lr}
   2892a:	b089      	sub	sp, #36	; 0x24
   2892c:	af00      	add	r7, sp, #0
   2892e:	6078      	str	r0, [r7, #4]
   28930:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   28932:	230c      	movs	r3, #12
   28934:	18fb      	adds	r3, r7, r3
   28936:	2200      	movs	r2, #0
   28938:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2893a:	687b      	ldr	r3, [r7, #4]
   2893c:	681b      	ldr	r3, [r3, #0]
   2893e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   28940:	687b      	ldr	r3, [r7, #4]
   28942:	0018      	movs	r0, r3
   28944:	4b24      	ldr	r3, [pc, #144]	; (289d8 <spi_set_baudrate+0xb0>)
   28946:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   28948:	46c0      	nop			; (mov r8, r8)
   2894a:	687b      	ldr	r3, [r7, #4]
   2894c:	0018      	movs	r0, r3
   2894e:	4b23      	ldr	r3, [pc, #140]	; (289dc <spi_set_baudrate+0xb4>)
   28950:	4798      	blx	r3
   28952:	1e03      	subs	r3, r0, #0
   28954:	d1f9      	bne.n	2894a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28956:	687b      	ldr	r3, [r7, #4]
   28958:	681b      	ldr	r3, [r3, #0]
   2895a:	0018      	movs	r0, r3
   2895c:	4b20      	ldr	r3, [pc, #128]	; (289e0 <spi_set_baudrate+0xb8>)
   2895e:	4798      	blx	r3
   28960:	0003      	movs	r3, r0
   28962:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28964:	69bb      	ldr	r3, [r7, #24]
   28966:	3314      	adds	r3, #20
   28968:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2896a:	697b      	ldr	r3, [r7, #20]
   2896c:	b2db      	uxtb	r3, r3
   2896e:	0018      	movs	r0, r3
   28970:	4b1c      	ldr	r3, [pc, #112]	; (289e4 <spi_set_baudrate+0xbc>)
   28972:	4798      	blx	r3
   28974:	0003      	movs	r3, r0
   28976:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   28978:	230f      	movs	r3, #15
   2897a:	18fc      	adds	r4, r7, r3
   2897c:	230c      	movs	r3, #12
   2897e:	18fa      	adds	r2, r7, r3
   28980:	6939      	ldr	r1, [r7, #16]
   28982:	683b      	ldr	r3, [r7, #0]
   28984:	0018      	movs	r0, r3
   28986:	4b18      	ldr	r3, [pc, #96]	; (289e8 <spi_set_baudrate+0xc0>)
   28988:	4798      	blx	r3
   2898a:	0003      	movs	r3, r0
   2898c:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2898e:	230f      	movs	r3, #15
   28990:	18fb      	adds	r3, r7, r3
   28992:	781b      	ldrb	r3, [r3, #0]
   28994:	2b00      	cmp	r3, #0
   28996:	d001      	beq.n	2899c <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   28998:	2317      	movs	r3, #23
   2899a:	e018      	b.n	289ce <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   2899c:	230c      	movs	r3, #12
   2899e:	18fb      	adds	r3, r7, r3
   289a0:	881b      	ldrh	r3, [r3, #0]
   289a2:	b2da      	uxtb	r2, r3
   289a4:	69fb      	ldr	r3, [r7, #28]
   289a6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   289a8:	46c0      	nop			; (mov r8, r8)
   289aa:	687b      	ldr	r3, [r7, #4]
   289ac:	0018      	movs	r0, r3
   289ae:	4b0b      	ldr	r3, [pc, #44]	; (289dc <spi_set_baudrate+0xb4>)
   289b0:	4798      	blx	r3
   289b2:	1e03      	subs	r3, r0, #0
   289b4:	d1f9      	bne.n	289aa <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   289b6:	687b      	ldr	r3, [r7, #4]
   289b8:	0018      	movs	r0, r3
   289ba:	4b0c      	ldr	r3, [pc, #48]	; (289ec <spi_set_baudrate+0xc4>)
   289bc:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   289be:	46c0      	nop			; (mov r8, r8)
   289c0:	687b      	ldr	r3, [r7, #4]
   289c2:	0018      	movs	r0, r3
   289c4:	4b05      	ldr	r3, [pc, #20]	; (289dc <spi_set_baudrate+0xb4>)
   289c6:	4798      	blx	r3
   289c8:	1e03      	subs	r3, r0, #0
   289ca:	d1f9      	bne.n	289c0 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   289cc:	2300      	movs	r3, #0
}
   289ce:	0018      	movs	r0, r3
   289d0:	46bd      	mov	sp, r7
   289d2:	b009      	add	sp, #36	; 0x24
   289d4:	bd90      	pop	{r4, r7, pc}
   289d6:	46c0      	nop			; (mov r8, r8)
   289d8:	00028785 	.word	0x00028785
   289dc:	00028715 	.word	0x00028715
   289e0:	00028381 	.word	0x00028381
   289e4:	0002ad35 	.word	0x0002ad35
   289e8:	00027efb 	.word	0x00027efb
   289ec:	00028735 	.word	0x00028735

000289f0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   289f0:	b590      	push	{r4, r7, lr}
   289f2:	b093      	sub	sp, #76	; 0x4c
   289f4:	af00      	add	r7, sp, #0
   289f6:	6078      	str	r0, [r7, #4]
   289f8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   289fa:	687b      	ldr	r3, [r7, #4]
   289fc:	681b      	ldr	r3, [r3, #0]
   289fe:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   28a00:	687b      	ldr	r3, [r7, #4]
   28a02:	681b      	ldr	r3, [r3, #0]
   28a04:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28a06:	231c      	movs	r3, #28
   28a08:	18fb      	adds	r3, r7, r3
   28a0a:	0018      	movs	r0, r3
   28a0c:	4b75      	ldr	r3, [pc, #468]	; (28be4 <_spi_set_config+0x1f4>)
   28a0e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28a10:	231c      	movs	r3, #28
   28a12:	18fb      	adds	r3, r7, r3
   28a14:	2200      	movs	r2, #0
   28a16:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   28a18:	683b      	ldr	r3, [r7, #0]
   28a1a:	781b      	ldrb	r3, [r3, #0]
   28a1c:	2b00      	cmp	r3, #0
   28a1e:	d103      	bne.n	28a28 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28a20:	231c      	movs	r3, #28
   28a22:	18fb      	adds	r3, r7, r3
   28a24:	2200      	movs	r2, #0
   28a26:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28a28:	683b      	ldr	r3, [r7, #0]
   28a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   28a2c:	230c      	movs	r3, #12
   28a2e:	18fb      	adds	r3, r7, r3
   28a30:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28a32:	683b      	ldr	r3, [r7, #0]
   28a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28a36:	230c      	movs	r3, #12
   28a38:	18fb      	adds	r3, r7, r3
   28a3a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28a3c:	683b      	ldr	r3, [r7, #0]
   28a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28a40:	230c      	movs	r3, #12
   28a42:	18fb      	adds	r3, r7, r3
   28a44:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28a46:	683b      	ldr	r3, [r7, #0]
   28a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28a4a:	230c      	movs	r3, #12
   28a4c:	18fb      	adds	r3, r7, r3
   28a4e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28a50:	2347      	movs	r3, #71	; 0x47
   28a52:	18fb      	adds	r3, r7, r3
   28a54:	2200      	movs	r2, #0
   28a56:	701a      	strb	r2, [r3, #0]
   28a58:	e02c      	b.n	28ab4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28a5a:	2347      	movs	r3, #71	; 0x47
   28a5c:	18fb      	adds	r3, r7, r3
   28a5e:	781a      	ldrb	r2, [r3, #0]
   28a60:	230c      	movs	r3, #12
   28a62:	18fb      	adds	r3, r7, r3
   28a64:	0092      	lsls	r2, r2, #2
   28a66:	58d3      	ldr	r3, [r2, r3]
   28a68:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28a6c:	2b00      	cmp	r3, #0
   28a6e:	d109      	bne.n	28a84 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28a70:	2347      	movs	r3, #71	; 0x47
   28a72:	18fb      	adds	r3, r7, r3
   28a74:	781a      	ldrb	r2, [r3, #0]
   28a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28a78:	0011      	movs	r1, r2
   28a7a:	0018      	movs	r0, r3
   28a7c:	4b5a      	ldr	r3, [pc, #360]	; (28be8 <_spi_set_config+0x1f8>)
   28a7e:	4798      	blx	r3
   28a80:	0003      	movs	r3, r0
   28a82:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28a86:	3301      	adds	r3, #1
   28a88:	d00d      	beq.n	28aa6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28a8c:	b2da      	uxtb	r2, r3
   28a8e:	231c      	movs	r3, #28
   28a90:	18fb      	adds	r3, r7, r3
   28a92:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28a96:	0c1b      	lsrs	r3, r3, #16
   28a98:	b2db      	uxtb	r3, r3
   28a9a:	221c      	movs	r2, #28
   28a9c:	18ba      	adds	r2, r7, r2
   28a9e:	0011      	movs	r1, r2
   28aa0:	0018      	movs	r0, r3
   28aa2:	4b52      	ldr	r3, [pc, #328]	; (28bec <_spi_set_config+0x1fc>)
   28aa4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28aa6:	2347      	movs	r3, #71	; 0x47
   28aa8:	18fb      	adds	r3, r7, r3
   28aaa:	781a      	ldrb	r2, [r3, #0]
   28aac:	2347      	movs	r3, #71	; 0x47
   28aae:	18fb      	adds	r3, r7, r3
   28ab0:	3201      	adds	r2, #1
   28ab2:	701a      	strb	r2, [r3, #0]
   28ab4:	2347      	movs	r3, #71	; 0x47
   28ab6:	18fb      	adds	r3, r7, r3
   28ab8:	781b      	ldrb	r3, [r3, #0]
   28aba:	2b03      	cmp	r3, #3
   28abc:	d9cd      	bls.n	28a5a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   28abe:	683b      	ldr	r3, [r7, #0]
   28ac0:	781a      	ldrb	r2, [r3, #0]
   28ac2:	687b      	ldr	r3, [r7, #4]
   28ac4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28ac6:	683b      	ldr	r3, [r7, #0]
   28ac8:	7c1a      	ldrb	r2, [r3, #16]
   28aca:	687b      	ldr	r3, [r7, #4]
   28acc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   28ace:	683b      	ldr	r3, [r7, #0]
   28ad0:	7c9a      	ldrb	r2, [r3, #18]
   28ad2:	687b      	ldr	r3, [r7, #4]
   28ad4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   28ad6:	683b      	ldr	r3, [r7, #0]
   28ad8:	7d1a      	ldrb	r2, [r3, #20]
   28ada:	687b      	ldr	r3, [r7, #4]
   28adc:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   28ade:	230a      	movs	r3, #10
   28ae0:	18fb      	adds	r3, r7, r3
   28ae2:	2200      	movs	r2, #0
   28ae4:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   28ae6:	2300      	movs	r3, #0
   28ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   28aea:	2300      	movs	r3, #0
   28aec:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   28aee:	683b      	ldr	r3, [r7, #0]
   28af0:	781b      	ldrb	r3, [r3, #0]
   28af2:	2b01      	cmp	r3, #1
   28af4:	d129      	bne.n	28b4a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28af6:	687b      	ldr	r3, [r7, #4]
   28af8:	681b      	ldr	r3, [r3, #0]
   28afa:	0018      	movs	r0, r3
   28afc:	4b3c      	ldr	r3, [pc, #240]	; (28bf0 <_spi_set_config+0x200>)
   28afe:	4798      	blx	r3
   28b00:	0003      	movs	r3, r0
   28b02:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28b06:	3314      	adds	r3, #20
   28b08:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28b0c:	b2db      	uxtb	r3, r3
   28b0e:	0018      	movs	r0, r3
   28b10:	4b38      	ldr	r3, [pc, #224]	; (28bf4 <_spi_set_config+0x204>)
   28b12:	4798      	blx	r3
   28b14:	0003      	movs	r3, r0
   28b16:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   28b18:	683b      	ldr	r3, [r7, #0]
   28b1a:	699b      	ldr	r3, [r3, #24]
   28b1c:	2223      	movs	r2, #35	; 0x23
   28b1e:	18bc      	adds	r4, r7, r2
   28b20:	220a      	movs	r2, #10
   28b22:	18ba      	adds	r2, r7, r2
   28b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28b26:	0018      	movs	r0, r3
   28b28:	4b33      	ldr	r3, [pc, #204]	; (28bf8 <_spi_set_config+0x208>)
   28b2a:	4798      	blx	r3
   28b2c:	0003      	movs	r3, r0
   28b2e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   28b30:	2323      	movs	r3, #35	; 0x23
   28b32:	18fb      	adds	r3, r7, r3
   28b34:	781b      	ldrb	r3, [r3, #0]
   28b36:	2b00      	cmp	r3, #0
   28b38:	d001      	beq.n	28b3e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   28b3a:	2317      	movs	r3, #23
   28b3c:	e04e      	b.n	28bdc <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   28b3e:	230a      	movs	r3, #10
   28b40:	18fb      	adds	r3, r7, r3
   28b42:	881b      	ldrh	r3, [r3, #0]
   28b44:	b2da      	uxtb	r2, r3
   28b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28b48:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   28b4a:	683b      	ldr	r3, [r7, #0]
   28b4c:	685b      	ldr	r3, [r3, #4]
   28b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28b50:	4313      	orrs	r3, r2
   28b52:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28b54:	683b      	ldr	r3, [r7, #0]
   28b56:	689b      	ldr	r3, [r3, #8]
   28b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28b5a:	4313      	orrs	r3, r2
   28b5c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   28b5e:	683b      	ldr	r3, [r7, #0]
   28b60:	68db      	ldr	r3, [r3, #12]
   28b62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28b64:	4313      	orrs	r3, r2
   28b66:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   28b68:	683b      	ldr	r3, [r7, #0]
   28b6a:	7c1b      	ldrb	r3, [r3, #16]
   28b6c:	001a      	movs	r2, r3
   28b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28b70:	4313      	orrs	r3, r2
   28b72:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28b74:	683b      	ldr	r3, [r7, #0]
   28b76:	7c5b      	ldrb	r3, [r3, #17]
   28b78:	2b00      	cmp	r3, #0
   28b7a:	d103      	bne.n	28b84 <_spi_set_config+0x194>
   28b7c:	4b1f      	ldr	r3, [pc, #124]	; (28bfc <_spi_set_config+0x20c>)
   28b7e:	4798      	blx	r3
   28b80:	1e03      	subs	r3, r0, #0
   28b82:	d003      	beq.n	28b8c <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   28b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28b86:	2280      	movs	r2, #128	; 0x80
   28b88:	4313      	orrs	r3, r2
   28b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   28b8c:	683b      	ldr	r3, [r7, #0]
   28b8e:	7c9b      	ldrb	r3, [r3, #18]
   28b90:	2b00      	cmp	r3, #0
   28b92:	d004      	beq.n	28b9e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28b96:	2280      	movs	r2, #128	; 0x80
   28b98:	0292      	lsls	r2, r2, #10
   28b9a:	4313      	orrs	r3, r2
   28b9c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   28b9e:	683b      	ldr	r3, [r7, #0]
   28ba0:	7cdb      	ldrb	r3, [r3, #19]
   28ba2:	2b00      	cmp	r3, #0
   28ba4:	d004      	beq.n	28bb0 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28ba8:	2280      	movs	r2, #128	; 0x80
   28baa:	0092      	lsls	r2, r2, #2
   28bac:	4313      	orrs	r3, r2
   28bae:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   28bb0:	683b      	ldr	r3, [r7, #0]
   28bb2:	7d1b      	ldrb	r3, [r3, #20]
   28bb4:	2b00      	cmp	r3, #0
   28bb6:	d004      	beq.n	28bc2 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28bba:	2280      	movs	r2, #128	; 0x80
   28bbc:	0192      	lsls	r2, r2, #6
   28bbe:	4313      	orrs	r3, r2
   28bc0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   28bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28bc4:	681a      	ldr	r2, [r3, #0]
   28bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28bc8:	431a      	orrs	r2, r3
   28bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28bcc:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   28bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28bd0:	685a      	ldr	r2, [r3, #4]
   28bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28bd4:	431a      	orrs	r2, r3
   28bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28bd8:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   28bda:	2300      	movs	r3, #0
}
   28bdc:	0018      	movs	r0, r3
   28bde:	46bd      	mov	sp, r7
   28be0:	b013      	add	sp, #76	; 0x4c
   28be2:	bd90      	pop	{r4, r7, pc}
   28be4:	00028525 	.word	0x00028525
   28be8:	000281c5 	.word	0x000281c5
   28bec:	0002af71 	.word	0x0002af71
   28bf0:	00028381 	.word	0x00028381
   28bf4:	0002ad35 	.word	0x0002ad35
   28bf8:	00027efb 	.word	0x00027efb
   28bfc:	00028699 	.word	0x00028699

00028c00 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   28c00:	b590      	push	{r4, r7, lr}
   28c02:	b08b      	sub	sp, #44	; 0x2c
   28c04:	af00      	add	r7, sp, #0
   28c06:	60f8      	str	r0, [r7, #12]
   28c08:	60b9      	str	r1, [r7, #8]
   28c0a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   28c0c:	68fb      	ldr	r3, [r7, #12]
   28c0e:	68ba      	ldr	r2, [r7, #8]
   28c10:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28c12:	68fb      	ldr	r3, [r7, #12]
   28c14:	681b      	ldr	r3, [r3, #0]
   28c16:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   28c18:	6a3b      	ldr	r3, [r7, #32]
   28c1a:	681b      	ldr	r3, [r3, #0]
   28c1c:	2202      	movs	r2, #2
   28c1e:	4013      	ands	r3, r2
   28c20:	d001      	beq.n	28c26 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   28c22:	231c      	movs	r3, #28
   28c24:	e09c      	b.n	28d60 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28c26:	6a3b      	ldr	r3, [r7, #32]
   28c28:	681b      	ldr	r3, [r3, #0]
   28c2a:	2201      	movs	r2, #1
   28c2c:	4013      	ands	r3, r2
   28c2e:	d001      	beq.n	28c34 <spi_init+0x34>
		return STATUS_BUSY;
   28c30:	2305      	movs	r3, #5
   28c32:	e095      	b.n	28d60 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28c34:	68fb      	ldr	r3, [r7, #12]
   28c36:	681b      	ldr	r3, [r3, #0]
   28c38:	0018      	movs	r0, r3
   28c3a:	4b4b      	ldr	r3, [pc, #300]	; (28d68 <spi_init+0x168>)
   28c3c:	4798      	blx	r3
   28c3e:	0003      	movs	r3, r0
   28c40:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28c42:	69fb      	ldr	r3, [r7, #28]
   28c44:	3302      	adds	r3, #2
   28c46:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28c48:	69fb      	ldr	r3, [r7, #28]
   28c4a:	3314      	adds	r3, #20
   28c4c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28c4e:	2201      	movs	r2, #1
   28c50:	69bb      	ldr	r3, [r7, #24]
   28c52:	409a      	lsls	r2, r3
   28c54:	0013      	movs	r3, r2
   28c56:	0019      	movs	r1, r3
   28c58:	2002      	movs	r0, #2
   28c5a:	4b44      	ldr	r3, [pc, #272]	; (28d6c <spi_init+0x16c>)
   28c5c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28c5e:	2310      	movs	r3, #16
   28c60:	18fb      	adds	r3, r7, r3
   28c62:	0018      	movs	r0, r3
   28c64:	4b42      	ldr	r3, [pc, #264]	; (28d70 <spi_init+0x170>)
   28c66:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28c68:	687b      	ldr	r3, [r7, #4]
   28c6a:	2224      	movs	r2, #36	; 0x24
   28c6c:	5c9a      	ldrb	r2, [r3, r2]
   28c6e:	2310      	movs	r3, #16
   28c70:	18fb      	adds	r3, r7, r3
   28c72:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28c74:	697b      	ldr	r3, [r7, #20]
   28c76:	b2db      	uxtb	r3, r3
   28c78:	2210      	movs	r2, #16
   28c7a:	18ba      	adds	r2, r7, r2
   28c7c:	0011      	movs	r1, r2
   28c7e:	0018      	movs	r0, r3
   28c80:	4b3c      	ldr	r3, [pc, #240]	; (28d74 <spi_init+0x174>)
   28c82:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28c84:	697b      	ldr	r3, [r7, #20]
   28c86:	b2db      	uxtb	r3, r3
   28c88:	0018      	movs	r0, r3
   28c8a:	4b3b      	ldr	r3, [pc, #236]	; (28d78 <spi_init+0x178>)
   28c8c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28c8e:	687b      	ldr	r3, [r7, #4]
   28c90:	2224      	movs	r2, #36	; 0x24
   28c92:	5c9b      	ldrb	r3, [r3, r2]
   28c94:	2100      	movs	r1, #0
   28c96:	0018      	movs	r0, r3
   28c98:	4b38      	ldr	r3, [pc, #224]	; (28d7c <spi_init+0x17c>)
   28c9a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28c9c:	687b      	ldr	r3, [r7, #4]
   28c9e:	781b      	ldrb	r3, [r3, #0]
   28ca0:	2b01      	cmp	r3, #1
   28ca2:	d105      	bne.n	28cb0 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28ca4:	6a3b      	ldr	r3, [r7, #32]
   28ca6:	681b      	ldr	r3, [r3, #0]
   28ca8:	220c      	movs	r2, #12
   28caa:	431a      	orrs	r2, r3
   28cac:	6a3b      	ldr	r3, [r7, #32]
   28cae:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28cb0:	2327      	movs	r3, #39	; 0x27
   28cb2:	18fb      	adds	r3, r7, r3
   28cb4:	2200      	movs	r2, #0
   28cb6:	701a      	strb	r2, [r3, #0]
   28cb8:	e010      	b.n	28cdc <spi_init+0xdc>
		module->callback[i]        = NULL;
   28cba:	2327      	movs	r3, #39	; 0x27
   28cbc:	18fb      	adds	r3, r7, r3
   28cbe:	781b      	ldrb	r3, [r3, #0]
   28cc0:	68fa      	ldr	r2, [r7, #12]
   28cc2:	3302      	adds	r3, #2
   28cc4:	009b      	lsls	r3, r3, #2
   28cc6:	18d3      	adds	r3, r2, r3
   28cc8:	3304      	adds	r3, #4
   28cca:	2200      	movs	r2, #0
   28ccc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28cce:	2327      	movs	r3, #39	; 0x27
   28cd0:	18fb      	adds	r3, r7, r3
   28cd2:	781a      	ldrb	r2, [r3, #0]
   28cd4:	2327      	movs	r3, #39	; 0x27
   28cd6:	18fb      	adds	r3, r7, r3
   28cd8:	3201      	adds	r2, #1
   28cda:	701a      	strb	r2, [r3, #0]
   28cdc:	2327      	movs	r3, #39	; 0x27
   28cde:	18fb      	adds	r3, r7, r3
   28ce0:	781b      	ldrb	r3, [r3, #0]
   28ce2:	2b06      	cmp	r3, #6
   28ce4:	d9e9      	bls.n	28cba <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28ce6:	68fb      	ldr	r3, [r7, #12]
   28ce8:	2200      	movs	r2, #0
   28cea:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   28cec:	68fb      	ldr	r3, [r7, #12]
   28cee:	2200      	movs	r2, #0
   28cf0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28cf2:	68fb      	ldr	r3, [r7, #12]
   28cf4:	2200      	movs	r2, #0
   28cf6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28cf8:	68fb      	ldr	r3, [r7, #12]
   28cfa:	2200      	movs	r2, #0
   28cfc:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   28cfe:	68fb      	ldr	r3, [r7, #12]
   28d00:	2236      	movs	r2, #54	; 0x36
   28d02:	2100      	movs	r1, #0
   28d04:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28d06:	68fb      	ldr	r3, [r7, #12]
   28d08:	2237      	movs	r2, #55	; 0x37
   28d0a:	2100      	movs	r1, #0
   28d0c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   28d0e:	68fb      	ldr	r3, [r7, #12]
   28d10:	2238      	movs	r2, #56	; 0x38
   28d12:	2100      	movs	r1, #0
   28d14:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28d16:	68fb      	ldr	r3, [r7, #12]
   28d18:	2203      	movs	r2, #3
   28d1a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28d1c:	68fb      	ldr	r3, [r7, #12]
   28d1e:	2200      	movs	r2, #0
   28d20:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28d22:	68fb      	ldr	r3, [r7, #12]
   28d24:	681b      	ldr	r3, [r3, #0]
   28d26:	2213      	movs	r2, #19
   28d28:	18bc      	adds	r4, r7, r2
   28d2a:	0018      	movs	r0, r3
   28d2c:	4b0e      	ldr	r3, [pc, #56]	; (28d68 <spi_init+0x168>)
   28d2e:	4798      	blx	r3
   28d30:	0003      	movs	r3, r0
   28d32:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28d34:	4a12      	ldr	r2, [pc, #72]	; (28d80 <spi_init+0x180>)
   28d36:	2313      	movs	r3, #19
   28d38:	18fb      	adds	r3, r7, r3
   28d3a:	781b      	ldrb	r3, [r3, #0]
   28d3c:	0011      	movs	r1, r2
   28d3e:	0018      	movs	r0, r3
   28d40:	4b10      	ldr	r3, [pc, #64]	; (28d84 <spi_init+0x184>)
   28d42:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28d44:	2313      	movs	r3, #19
   28d46:	18fb      	adds	r3, r7, r3
   28d48:	781a      	ldrb	r2, [r3, #0]
   28d4a:	4b0f      	ldr	r3, [pc, #60]	; (28d88 <spi_init+0x188>)
   28d4c:	0092      	lsls	r2, r2, #2
   28d4e:	68f9      	ldr	r1, [r7, #12]
   28d50:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28d52:	687a      	ldr	r2, [r7, #4]
   28d54:	68fb      	ldr	r3, [r7, #12]
   28d56:	0011      	movs	r1, r2
   28d58:	0018      	movs	r0, r3
   28d5a:	4b0c      	ldr	r3, [pc, #48]	; (28d8c <spi_init+0x18c>)
   28d5c:	4798      	blx	r3
   28d5e:	0003      	movs	r3, r0
}
   28d60:	0018      	movs	r0, r3
   28d62:	46bd      	mov	sp, r7
   28d64:	b00b      	add	sp, #44	; 0x2c
   28d66:	bd90      	pop	{r4, r7, pc}
   28d68:	00028381 	.word	0x00028381
   28d6c:	0002863d 	.word	0x0002863d
   28d70:	00028625 	.word	0x00028625
   28d74:	0002ac11 	.word	0x0002ac11
   28d78:	0002ac55 	.word	0x0002ac55
   28d7c:	00028139 	.word	0x00028139
   28d80:	00029259 	.word	0x00029259
   28d84:	000283e5 	.word	0x000283e5
   28d88:	20005c98 	.word	0x20005c98
   28d8c:	000289f1 	.word	0x000289f1

00028d90 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28d90:	b590      	push	{r4, r7, lr}
   28d92:	b087      	sub	sp, #28
   28d94:	af00      	add	r7, sp, #0
   28d96:	60f8      	str	r0, [r7, #12]
   28d98:	60b9      	str	r1, [r7, #8]
   28d9a:	0019      	movs	r1, r3
   28d9c:	1dbb      	adds	r3, r7, #6
   28d9e:	801a      	strh	r2, [r3, #0]
   28da0:	1d3b      	adds	r3, r7, #4
   28da2:	1c0a      	adds	r2, r1, #0
   28da4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28da6:	68fb      	ldr	r3, [r7, #12]
   28da8:	2238      	movs	r2, #56	; 0x38
   28daa:	5c9b      	ldrb	r3, [r3, r2]
   28dac:	b2db      	uxtb	r3, r3
   28dae:	2b05      	cmp	r3, #5
   28db0:	d101      	bne.n	28db6 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28db2:	2305      	movs	r3, #5
   28db4:	e07a      	b.n	28eac <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28db6:	1dbb      	adds	r3, r7, #6
   28db8:	881b      	ldrh	r3, [r3, #0]
   28dba:	2b00      	cmp	r3, #0
   28dbc:	d101      	bne.n	28dc2 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28dbe:	2317      	movs	r3, #23
   28dc0:	e074      	b.n	28eac <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28dc2:	68fb      	ldr	r3, [r7, #12]
   28dc4:	79db      	ldrb	r3, [r3, #7]
   28dc6:	2201      	movs	r2, #1
   28dc8:	4053      	eors	r3, r2
   28dca:	b2db      	uxtb	r3, r3
   28dcc:	2b00      	cmp	r3, #0
   28dce:	d001      	beq.n	28dd4 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28dd0:	231c      	movs	r3, #28
   28dd2:	e06b      	b.n	28eac <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28dd4:	2316      	movs	r3, #22
   28dd6:	18fb      	adds	r3, r7, r3
   28dd8:	2200      	movs	r2, #0
   28dda:	801a      	strh	r2, [r3, #0]

	while (length--) {
   28ddc:	e05e      	b.n	28e9c <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   28dde:	68fb      	ldr	r3, [r7, #12]
   28de0:	795b      	ldrb	r3, [r3, #5]
   28de2:	2b01      	cmp	r3, #1
   28de4:	d112      	bne.n	28e0c <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28de6:	46c0      	nop			; (mov r8, r8)
   28de8:	68fb      	ldr	r3, [r7, #12]
   28dea:	0018      	movs	r0, r3
   28dec:	4b31      	ldr	r3, [pc, #196]	; (28eb4 <spi_read_buffer_wait+0x124>)
   28dee:	4798      	blx	r3
   28df0:	0003      	movs	r3, r0
   28df2:	001a      	movs	r2, r3
   28df4:	2301      	movs	r3, #1
   28df6:	4053      	eors	r3, r2
   28df8:	b2db      	uxtb	r3, r3
   28dfa:	2b00      	cmp	r3, #0
   28dfc:	d1f4      	bne.n	28de8 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   28dfe:	1d3b      	adds	r3, r7, #4
   28e00:	881a      	ldrh	r2, [r3, #0]
   28e02:	68fb      	ldr	r3, [r7, #12]
   28e04:	0011      	movs	r1, r2
   28e06:	0018      	movs	r0, r3
   28e08:	4b2b      	ldr	r3, [pc, #172]	; (28eb8 <spi_read_buffer_wait+0x128>)
   28e0a:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   28e0c:	46c0      	nop			; (mov r8, r8)
   28e0e:	68fb      	ldr	r3, [r7, #12]
   28e10:	0018      	movs	r0, r3
   28e12:	4b2a      	ldr	r3, [pc, #168]	; (28ebc <spi_read_buffer_wait+0x12c>)
   28e14:	4798      	blx	r3
   28e16:	0003      	movs	r3, r0
   28e18:	001a      	movs	r2, r3
   28e1a:	2301      	movs	r3, #1
   28e1c:	4053      	eors	r3, r2
   28e1e:	b2db      	uxtb	r3, r3
   28e20:	2b00      	cmp	r3, #0
   28e22:	d1f4      	bne.n	28e0e <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28e24:	2312      	movs	r3, #18
   28e26:	18fb      	adds	r3, r7, r3
   28e28:	2200      	movs	r2, #0
   28e2a:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28e2c:	2315      	movs	r3, #21
   28e2e:	18fc      	adds	r4, r7, r3
   28e30:	2312      	movs	r3, #18
   28e32:	18fa      	adds	r2, r7, r3
   28e34:	68fb      	ldr	r3, [r7, #12]
   28e36:	0011      	movs	r1, r2
   28e38:	0018      	movs	r0, r3
   28e3a:	4b21      	ldr	r3, [pc, #132]	; (28ec0 <spi_read_buffer_wait+0x130>)
   28e3c:	4798      	blx	r3
   28e3e:	0003      	movs	r3, r0
   28e40:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28e42:	2315      	movs	r3, #21
   28e44:	18fb      	adds	r3, r7, r3
   28e46:	781b      	ldrb	r3, [r3, #0]
   28e48:	2b00      	cmp	r3, #0
   28e4a:	d003      	beq.n	28e54 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28e4c:	2315      	movs	r3, #21
   28e4e:	18fb      	adds	r3, r7, r3
   28e50:	781b      	ldrb	r3, [r3, #0]
   28e52:	e02b      	b.n	28eac <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28e54:	2316      	movs	r3, #22
   28e56:	18fb      	adds	r3, r7, r3
   28e58:	881b      	ldrh	r3, [r3, #0]
   28e5a:	2216      	movs	r2, #22
   28e5c:	18ba      	adds	r2, r7, r2
   28e5e:	1c59      	adds	r1, r3, #1
   28e60:	8011      	strh	r1, [r2, #0]
   28e62:	001a      	movs	r2, r3
   28e64:	68bb      	ldr	r3, [r7, #8]
   28e66:	189b      	adds	r3, r3, r2
   28e68:	2212      	movs	r2, #18
   28e6a:	18ba      	adds	r2, r7, r2
   28e6c:	8812      	ldrh	r2, [r2, #0]
   28e6e:	b2d2      	uxtb	r2, r2
   28e70:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28e72:	68fb      	ldr	r3, [r7, #12]
   28e74:	799b      	ldrb	r3, [r3, #6]
   28e76:	2b01      	cmp	r3, #1
   28e78:	d110      	bne.n	28e9c <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28e7a:	2316      	movs	r3, #22
   28e7c:	18fb      	adds	r3, r7, r3
   28e7e:	881b      	ldrh	r3, [r3, #0]
   28e80:	2216      	movs	r2, #22
   28e82:	18ba      	adds	r2, r7, r2
   28e84:	1c59      	adds	r1, r3, #1
   28e86:	8011      	strh	r1, [r2, #0]
   28e88:	001a      	movs	r2, r3
   28e8a:	68bb      	ldr	r3, [r7, #8]
   28e8c:	189b      	adds	r3, r3, r2
   28e8e:	2212      	movs	r2, #18
   28e90:	18ba      	adds	r2, r7, r2
   28e92:	8812      	ldrh	r2, [r2, #0]
   28e94:	0a12      	lsrs	r2, r2, #8
   28e96:	b292      	uxth	r2, r2
   28e98:	b2d2      	uxtb	r2, r2
   28e9a:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28e9c:	1dbb      	adds	r3, r7, #6
   28e9e:	881b      	ldrh	r3, [r3, #0]
   28ea0:	1dba      	adds	r2, r7, #6
   28ea2:	1e59      	subs	r1, r3, #1
   28ea4:	8011      	strh	r1, [r2, #0]
   28ea6:	2b00      	cmp	r3, #0
   28ea8:	d199      	bne.n	28dde <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28eaa:	2300      	movs	r3, #0
}
   28eac:	0018      	movs	r0, r3
   28eae:	46bd      	mov	sp, r7
   28eb0:	b007      	add	sp, #28
   28eb2:	bd90      	pop	{r4, r7, pc}
   28eb4:	00028809 	.word	0x00028809
   28eb8:	00028859 	.word	0x00028859
   28ebc:	00028831 	.word	0x00028831
   28ec0:	000288a1 	.word	0x000288a1

00028ec4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28ec4:	b580      	push	{r7, lr}
   28ec6:	b086      	sub	sp, #24
   28ec8:	af00      	add	r7, sp, #0
   28eca:	60f8      	str	r0, [r7, #12]
   28ecc:	60b9      	str	r1, [r7, #8]
   28ece:	1dfb      	adds	r3, r7, #7
   28ed0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   28ed2:	68fb      	ldr	r3, [r7, #12]
   28ed4:	795b      	ldrb	r3, [r3, #5]
   28ed6:	2b01      	cmp	r3, #1
   28ed8:	d001      	beq.n	28ede <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   28eda:	2315      	movs	r3, #21
   28edc:	e05c      	b.n	28f98 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   28ede:	68fb      	ldr	r3, [r7, #12]
   28ee0:	7a1b      	ldrb	r3, [r3, #8]
   28ee2:	2201      	movs	r2, #1
   28ee4:	4053      	eors	r3, r2
   28ee6:	b2db      	uxtb	r3, r3
   28ee8:	2b00      	cmp	r3, #0
   28eea:	d054      	beq.n	28f96 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   28eec:	1dfb      	adds	r3, r7, #7
   28eee:	781b      	ldrb	r3, [r3, #0]
   28ef0:	2b00      	cmp	r3, #0
   28ef2:	d04a      	beq.n	28f8a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28ef4:	68bb      	ldr	r3, [r7, #8]
   28ef6:	785b      	ldrb	r3, [r3, #1]
   28ef8:	2b00      	cmp	r3, #0
   28efa:	d03f      	beq.n	28f7c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   28efc:	68fb      	ldr	r3, [r7, #12]
   28efe:	0018      	movs	r0, r3
   28f00:	4b27      	ldr	r3, [pc, #156]	; (28fa0 <spi_select_slave+0xdc>)
   28f02:	4798      	blx	r3
   28f04:	0003      	movs	r3, r0
   28f06:	001a      	movs	r2, r3
   28f08:	2301      	movs	r3, #1
   28f0a:	4053      	eors	r3, r2
   28f0c:	b2db      	uxtb	r3, r3
   28f0e:	2b00      	cmp	r3, #0
   28f10:	d007      	beq.n	28f22 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   28f12:	68bb      	ldr	r3, [r7, #8]
   28f14:	781b      	ldrb	r3, [r3, #0]
   28f16:	2101      	movs	r1, #1
   28f18:	0018      	movs	r0, r3
   28f1a:	4b22      	ldr	r3, [pc, #136]	; (28fa4 <spi_select_slave+0xe0>)
   28f1c:	4798      	blx	r3
					return STATUS_BUSY;
   28f1e:	2305      	movs	r3, #5
   28f20:	e03a      	b.n	28f98 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28f22:	68bb      	ldr	r3, [r7, #8]
   28f24:	781b      	ldrb	r3, [r3, #0]
   28f26:	2100      	movs	r1, #0
   28f28:	0018      	movs	r0, r3
   28f2a:	4b1e      	ldr	r3, [pc, #120]	; (28fa4 <spi_select_slave+0xe0>)
   28f2c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   28f2e:	68bb      	ldr	r3, [r7, #8]
   28f30:	789b      	ldrb	r3, [r3, #2]
   28f32:	b29a      	uxth	r2, r3
   28f34:	68fb      	ldr	r3, [r7, #12]
   28f36:	0011      	movs	r1, r2
   28f38:	0018      	movs	r0, r3
   28f3a:	4b1b      	ldr	r3, [pc, #108]	; (28fa8 <spi_select_slave+0xe4>)
   28f3c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   28f3e:	68fb      	ldr	r3, [r7, #12]
   28f40:	79db      	ldrb	r3, [r3, #7]
   28f42:	2201      	movs	r2, #1
   28f44:	4053      	eors	r3, r2
   28f46:	b2db      	uxtb	r3, r3
   28f48:	2b00      	cmp	r3, #0
   28f4a:	d024      	beq.n	28f96 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28f4c:	46c0      	nop			; (mov r8, r8)
   28f4e:	68fb      	ldr	r3, [r7, #12]
   28f50:	0018      	movs	r0, r3
   28f52:	4b16      	ldr	r3, [pc, #88]	; (28fac <spi_select_slave+0xe8>)
   28f54:	4798      	blx	r3
   28f56:	0003      	movs	r3, r0
   28f58:	001a      	movs	r2, r3
   28f5a:	2301      	movs	r3, #1
   28f5c:	4053      	eors	r3, r2
   28f5e:	b2db      	uxtb	r3, r3
   28f60:	2b00      	cmp	r3, #0
   28f62:	d1f4      	bne.n	28f4e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28f64:	2316      	movs	r3, #22
   28f66:	18fb      	adds	r3, r7, r3
   28f68:	2200      	movs	r2, #0
   28f6a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28f6c:	2316      	movs	r3, #22
   28f6e:	18fa      	adds	r2, r7, r3
   28f70:	68fb      	ldr	r3, [r7, #12]
   28f72:	0011      	movs	r1, r2
   28f74:	0018      	movs	r0, r3
   28f76:	4b0e      	ldr	r3, [pc, #56]	; (28fb0 <spi_select_slave+0xec>)
   28f78:	4798      	blx	r3
   28f7a:	e00c      	b.n	28f96 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28f7c:	68bb      	ldr	r3, [r7, #8]
   28f7e:	781b      	ldrb	r3, [r3, #0]
   28f80:	2100      	movs	r1, #0
   28f82:	0018      	movs	r0, r3
   28f84:	4b07      	ldr	r3, [pc, #28]	; (28fa4 <spi_select_slave+0xe0>)
   28f86:	4798      	blx	r3
   28f88:	e005      	b.n	28f96 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28f8a:	68bb      	ldr	r3, [r7, #8]
   28f8c:	781b      	ldrb	r3, [r3, #0]
   28f8e:	2101      	movs	r1, #1
   28f90:	0018      	movs	r0, r3
   28f92:	4b04      	ldr	r3, [pc, #16]	; (28fa4 <spi_select_slave+0xe0>)
   28f94:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28f96:	2300      	movs	r3, #0
}
   28f98:	0018      	movs	r0, r3
   28f9a:	46bd      	mov	sp, r7
   28f9c:	b006      	add	sp, #24
   28f9e:	bd80      	pop	{r7, pc}
   28fa0:	00028809 	.word	0x00028809
   28fa4:	000285d1 	.word	0x000285d1
   28fa8:	00028859 	.word	0x00028859
   28fac:	00028831 	.word	0x00028831
   28fb0:	000288a1 	.word	0x000288a1

00028fb4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28fb4:	b580      	push	{r7, lr}
   28fb6:	b086      	sub	sp, #24
   28fb8:	af00      	add	r7, sp, #0
   28fba:	60f8      	str	r0, [r7, #12]
   28fbc:	60b9      	str	r1, [r7, #8]
   28fbe:	1dbb      	adds	r3, r7, #6
   28fc0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28fc2:	68fb      	ldr	r3, [r7, #12]
   28fc4:	2238      	movs	r2, #56	; 0x38
   28fc6:	5c9b      	ldrb	r3, [r3, r2]
   28fc8:	b2db      	uxtb	r3, r3
   28fca:	2b05      	cmp	r3, #5
   28fcc:	d101      	bne.n	28fd2 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28fce:	2305      	movs	r3, #5
   28fd0:	e087      	b.n	290e2 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   28fd2:	1dbb      	adds	r3, r7, #6
   28fd4:	881b      	ldrh	r3, [r3, #0]
   28fd6:	2b00      	cmp	r3, #0
   28fd8:	d101      	bne.n	28fde <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   28fda:	2317      	movs	r3, #23
   28fdc:	e081      	b.n	290e2 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   28fde:	2316      	movs	r3, #22
   28fe0:	18fb      	adds	r3, r7, r3
   28fe2:	2200      	movs	r2, #0
   28fe4:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   28fe6:	2314      	movs	r3, #20
   28fe8:	18fb      	adds	r3, r7, r3
   28fea:	1dba      	adds	r2, r7, #6
   28fec:	8812      	ldrh	r2, [r2, #0]
   28fee:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   28ff0:	e05f      	b.n	290b2 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   28ff2:	46c0      	nop			; (mov r8, r8)
   28ff4:	68fb      	ldr	r3, [r7, #12]
   28ff6:	0018      	movs	r0, r3
   28ff8:	4b3c      	ldr	r3, [pc, #240]	; (290ec <spi_write_buffer_wait+0x138>)
   28ffa:	4798      	blx	r3
   28ffc:	0003      	movs	r3, r0
   28ffe:	001a      	movs	r2, r3
   29000:	2301      	movs	r3, #1
   29002:	4053      	eors	r3, r2
   29004:	b2db      	uxtb	r3, r3
   29006:	2b00      	cmp	r3, #0
   29008:	d1f4      	bne.n	28ff4 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2900a:	2316      	movs	r3, #22
   2900c:	18fb      	adds	r3, r7, r3
   2900e:	881b      	ldrh	r3, [r3, #0]
   29010:	2216      	movs	r2, #22
   29012:	18ba      	adds	r2, r7, r2
   29014:	1c59      	adds	r1, r3, #1
   29016:	8011      	strh	r1, [r2, #0]
   29018:	001a      	movs	r2, r3
   2901a:	68bb      	ldr	r3, [r7, #8]
   2901c:	189b      	adds	r3, r3, r2
   2901e:	781a      	ldrb	r2, [r3, #0]
   29020:	2312      	movs	r3, #18
   29022:	18fb      	adds	r3, r7, r3
   29024:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29026:	68fb      	ldr	r3, [r7, #12]
   29028:	799b      	ldrb	r3, [r3, #6]
   2902a:	2b01      	cmp	r3, #1
   2902c:	d115      	bne.n	2905a <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2902e:	2316      	movs	r3, #22
   29030:	18fb      	adds	r3, r7, r3
   29032:	881b      	ldrh	r3, [r3, #0]
   29034:	2216      	movs	r2, #22
   29036:	18ba      	adds	r2, r7, r2
   29038:	1c59      	adds	r1, r3, #1
   2903a:	8011      	strh	r1, [r2, #0]
   2903c:	001a      	movs	r2, r3
   2903e:	68bb      	ldr	r3, [r7, #8]
   29040:	189b      	adds	r3, r3, r2
   29042:	781b      	ldrb	r3, [r3, #0]
   29044:	021b      	lsls	r3, r3, #8
   29046:	b21a      	sxth	r2, r3
   29048:	2312      	movs	r3, #18
   2904a:	18fb      	adds	r3, r7, r3
   2904c:	2100      	movs	r1, #0
   2904e:	5e5b      	ldrsh	r3, [r3, r1]
   29050:	4313      	orrs	r3, r2
   29052:	b21a      	sxth	r2, r3
   29054:	2312      	movs	r3, #18
   29056:	18fb      	adds	r3, r7, r3
   29058:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2905a:	2312      	movs	r3, #18
   2905c:	18fb      	adds	r3, r7, r3
   2905e:	881a      	ldrh	r2, [r3, #0]
   29060:	68fb      	ldr	r3, [r7, #12]
   29062:	0011      	movs	r1, r2
   29064:	0018      	movs	r0, r3
   29066:	4b22      	ldr	r3, [pc, #136]	; (290f0 <spi_write_buffer_wait+0x13c>)
   29068:	4798      	blx	r3

		if (module->receiver_enabled) {
   2906a:	68fb      	ldr	r3, [r7, #12]
   2906c:	79db      	ldrb	r3, [r3, #7]
   2906e:	2214      	movs	r2, #20
   29070:	18ba      	adds	r2, r7, r2
   29072:	2114      	movs	r1, #20
   29074:	1879      	adds	r1, r7, r1
   29076:	8809      	ldrh	r1, [r1, #0]
   29078:	8011      	strh	r1, [r2, #0]
   2907a:	2b00      	cmp	r3, #0
   2907c:	d019      	beq.n	290b2 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2907e:	46c0      	nop			; (mov r8, r8)
   29080:	68fb      	ldr	r3, [r7, #12]
   29082:	0018      	movs	r0, r3
   29084:	4b1b      	ldr	r3, [pc, #108]	; (290f4 <spi_write_buffer_wait+0x140>)
   29086:	4798      	blx	r3
   29088:	0003      	movs	r3, r0
   2908a:	001a      	movs	r2, r3
   2908c:	2301      	movs	r3, #1
   2908e:	4053      	eors	r3, r2
   29090:	b2db      	uxtb	r3, r3
   29092:	2b00      	cmp	r3, #0
   29094:	d1f4      	bne.n	29080 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   29096:	2310      	movs	r3, #16
   29098:	18fa      	adds	r2, r7, r3
   2909a:	68fb      	ldr	r3, [r7, #12]
   2909c:	0011      	movs	r1, r2
   2909e:	0018      	movs	r0, r3
   290a0:	4b15      	ldr	r3, [pc, #84]	; (290f8 <spi_write_buffer_wait+0x144>)
   290a2:	4798      	blx	r3
			flush_length--;
   290a4:	2314      	movs	r3, #20
   290a6:	18fb      	adds	r3, r7, r3
   290a8:	881a      	ldrh	r2, [r3, #0]
   290aa:	2314      	movs	r3, #20
   290ac:	18fb      	adds	r3, r7, r3
   290ae:	3a01      	subs	r2, #1
   290b0:	801a      	strh	r2, [r3, #0]
	while (length--) {
   290b2:	1dbb      	adds	r3, r7, #6
   290b4:	881b      	ldrh	r3, [r3, #0]
   290b6:	1dba      	adds	r2, r7, #6
   290b8:	1e59      	subs	r1, r3, #1
   290ba:	8011      	strh	r1, [r2, #0]
   290bc:	2b00      	cmp	r3, #0
   290be:	d198      	bne.n	28ff2 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   290c0:	68fb      	ldr	r3, [r7, #12]
   290c2:	795b      	ldrb	r3, [r3, #5]
   290c4:	2b01      	cmp	r3, #1
   290c6:	d10b      	bne.n	290e0 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   290c8:	46c0      	nop			; (mov r8, r8)
   290ca:	68fb      	ldr	r3, [r7, #12]
   290cc:	0018      	movs	r0, r3
   290ce:	4b0b      	ldr	r3, [pc, #44]	; (290fc <spi_write_buffer_wait+0x148>)
   290d0:	4798      	blx	r3
   290d2:	0003      	movs	r3, r0
   290d4:	001a      	movs	r2, r3
   290d6:	2301      	movs	r3, #1
   290d8:	4053      	eors	r3, r2
   290da:	b2db      	uxtb	r3, r3
   290dc:	2b00      	cmp	r3, #0
   290de:	d1f4      	bne.n	290ca <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   290e0:	2300      	movs	r3, #0
}
   290e2:	0018      	movs	r0, r3
   290e4:	46bd      	mov	sp, r7
   290e6:	b006      	add	sp, #24
   290e8:	bd80      	pop	{r7, pc}
   290ea:	46c0      	nop			; (mov r8, r8)
   290ec:	00028809 	.word	0x00028809
   290f0:	00028859 	.word	0x00028859
   290f4:	00028831 	.word	0x00028831
   290f8:	000288a1 	.word	0x000288a1
   290fc:	000287e1 	.word	0x000287e1

00029100 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   29100:	b580      	push	{r7, lr}
   29102:	b084      	sub	sp, #16
   29104:	af00      	add	r7, sp, #0
   29106:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29108:	687b      	ldr	r3, [r7, #4]
   2910a:	681b      	ldr	r3, [r3, #0]
   2910c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   2910e:	687b      	ldr	r3, [r7, #4]
   29110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29112:	781b      	ldrb	r3, [r3, #0]
   29114:	b2da      	uxtb	r2, r3
   29116:	230e      	movs	r3, #14
   29118:	18fb      	adds	r3, r7, r3
   2911a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   2911c:	687b      	ldr	r3, [r7, #4]
   2911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29120:	1c5a      	adds	r2, r3, #1
   29122:	687b      	ldr	r3, [r7, #4]
   29124:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   29126:	687b      	ldr	r3, [r7, #4]
   29128:	799b      	ldrb	r3, [r3, #6]
   2912a:	2b01      	cmp	r3, #1
   2912c:	d113      	bne.n	29156 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2912e:	687b      	ldr	r3, [r7, #4]
   29130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29132:	781b      	ldrb	r3, [r3, #0]
   29134:	b2db      	uxtb	r3, r3
   29136:	021b      	lsls	r3, r3, #8
   29138:	b21a      	sxth	r2, r3
   2913a:	230e      	movs	r3, #14
   2913c:	18fb      	adds	r3, r7, r3
   2913e:	2100      	movs	r1, #0
   29140:	5e5b      	ldrsh	r3, [r3, r1]
   29142:	4313      	orrs	r3, r2
   29144:	b21a      	sxth	r2, r3
   29146:	230e      	movs	r3, #14
   29148:	18fb      	adds	r3, r7, r3
   2914a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   2914c:	687b      	ldr	r3, [r7, #4]
   2914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   29150:	1c5a      	adds	r2, r3, #1
   29152:	687b      	ldr	r3, [r7, #4]
   29154:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   29156:	230e      	movs	r3, #14
   29158:	18fb      	adds	r3, r7, r3
   2915a:	881b      	ldrh	r3, [r3, #0]
   2915c:	05db      	lsls	r3, r3, #23
   2915e:	0dda      	lsrs	r2, r3, #23
   29160:	68bb      	ldr	r3, [r7, #8]
   29162:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   29164:	687b      	ldr	r3, [r7, #4]
   29166:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   29168:	b29b      	uxth	r3, r3
   2916a:	3b01      	subs	r3, #1
   2916c:	b29a      	uxth	r2, r3
   2916e:	687b      	ldr	r3, [r7, #4]
   29170:	869a      	strh	r2, [r3, #52]	; 0x34
}
   29172:	46c0      	nop			; (mov r8, r8)
   29174:	46bd      	mov	sp, r7
   29176:	b004      	add	sp, #16
   29178:	bd80      	pop	{r7, pc}
	...

0002917c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   2917c:	b580      	push	{r7, lr}
   2917e:	b084      	sub	sp, #16
   29180:	af00      	add	r7, sp, #0
   29182:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29184:	687b      	ldr	r3, [r7, #4]
   29186:	681b      	ldr	r3, [r3, #0]
   29188:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   2918a:	4b08      	ldr	r3, [pc, #32]	; (291ac <_spi_write_dummy+0x30>)
   2918c:	881b      	ldrh	r3, [r3, #0]
   2918e:	001a      	movs	r2, r3
   29190:	68fb      	ldr	r3, [r7, #12]
   29192:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   29194:	687b      	ldr	r3, [r7, #4]
   29196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29198:	b29b      	uxth	r3, r3
   2919a:	3b01      	subs	r3, #1
   2919c:	b29a      	uxth	r2, r3
   2919e:	687b      	ldr	r3, [r7, #4]
   291a0:	865a      	strh	r2, [r3, #50]	; 0x32
}
   291a2:	46c0      	nop			; (mov r8, r8)
   291a4:	46bd      	mov	sp, r7
   291a6:	b004      	add	sp, #16
   291a8:	bd80      	pop	{r7, pc}
   291aa:	46c0      	nop			; (mov r8, r8)
   291ac:	20005cb0 	.word	0x20005cb0

000291b0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   291b0:	b580      	push	{r7, lr}
   291b2:	b084      	sub	sp, #16
   291b4:	af00      	add	r7, sp, #0
   291b6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   291b8:	687b      	ldr	r3, [r7, #4]
   291ba:	681b      	ldr	r3, [r3, #0]
   291bc:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   291be:	230a      	movs	r3, #10
   291c0:	18fb      	adds	r3, r7, r3
   291c2:	2200      	movs	r2, #0
   291c4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   291c6:	68fb      	ldr	r3, [r7, #12]
   291c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   291ca:	230a      	movs	r3, #10
   291cc:	18fb      	adds	r3, r7, r3
   291ce:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   291d0:	687b      	ldr	r3, [r7, #4]
   291d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   291d4:	b29b      	uxth	r3, r3
   291d6:	3b01      	subs	r3, #1
   291d8:	b29a      	uxth	r2, r3
   291da:	687b      	ldr	r3, [r7, #4]
   291dc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   291de:	46c0      	nop			; (mov r8, r8)
   291e0:	46bd      	mov	sp, r7
   291e2:	b004      	add	sp, #16
   291e4:	bd80      	pop	{r7, pc}

000291e6 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   291e6:	b580      	push	{r7, lr}
   291e8:	b084      	sub	sp, #16
   291ea:	af00      	add	r7, sp, #0
   291ec:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   291ee:	687b      	ldr	r3, [r7, #4]
   291f0:	681b      	ldr	r3, [r3, #0]
   291f2:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   291f4:	68fb      	ldr	r3, [r7, #12]
   291f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   291f8:	b29a      	uxth	r2, r3
   291fa:	230a      	movs	r3, #10
   291fc:	18fb      	adds	r3, r7, r3
   291fe:	05d2      	lsls	r2, r2, #23
   29200:	0dd2      	lsrs	r2, r2, #23
   29202:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   29204:	687b      	ldr	r3, [r7, #4]
   29206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29208:	220a      	movs	r2, #10
   2920a:	18ba      	adds	r2, r7, r2
   2920c:	8812      	ldrh	r2, [r2, #0]
   2920e:	b2d2      	uxtb	r2, r2
   29210:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   29212:	687b      	ldr	r3, [r7, #4]
   29214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29216:	1c5a      	adds	r2, r3, #1
   29218:	687b      	ldr	r3, [r7, #4]
   2921a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2921c:	687b      	ldr	r3, [r7, #4]
   2921e:	799b      	ldrb	r3, [r3, #6]
   29220:	2b01      	cmp	r3, #1
   29222:	d10d      	bne.n	29240 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   29224:	687b      	ldr	r3, [r7, #4]
   29226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29228:	220a      	movs	r2, #10
   2922a:	18ba      	adds	r2, r7, r2
   2922c:	8812      	ldrh	r2, [r2, #0]
   2922e:	0a12      	lsrs	r2, r2, #8
   29230:	b292      	uxth	r2, r2
   29232:	b2d2      	uxtb	r2, r2
   29234:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   29236:	687b      	ldr	r3, [r7, #4]
   29238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2923a:	1c5a      	adds	r2, r3, #1
   2923c:	687b      	ldr	r3, [r7, #4]
   2923e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   29240:	687b      	ldr	r3, [r7, #4]
   29242:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   29244:	b29b      	uxth	r3, r3
   29246:	3b01      	subs	r3, #1
   29248:	b29a      	uxth	r2, r3
   2924a:	687b      	ldr	r3, [r7, #4]
   2924c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2924e:	46c0      	nop			; (mov r8, r8)
   29250:	46bd      	mov	sp, r7
   29252:	b004      	add	sp, #16
   29254:	bd80      	pop	{r7, pc}
	...

00029258 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   29258:	b580      	push	{r7, lr}
   2925a:	b086      	sub	sp, #24
   2925c:	af00      	add	r7, sp, #0
   2925e:	0002      	movs	r2, r0
   29260:	1dfb      	adds	r3, r7, #7
   29262:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   29264:	1dfb      	adds	r3, r7, #7
   29266:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   29268:	4b96      	ldr	r3, [pc, #600]	; (294c4 <_spi_interrupt_handler+0x26c>)
   2926a:	0092      	lsls	r2, r2, #2
   2926c:	58d3      	ldr	r3, [r2, r3]
   2926e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29270:	697b      	ldr	r3, [r7, #20]
   29272:	681b      	ldr	r3, [r3, #0]
   29274:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   29276:	697b      	ldr	r3, [r7, #20]
   29278:	2237      	movs	r2, #55	; 0x37
   2927a:	5c9a      	ldrb	r2, [r3, r2]
   2927c:	697b      	ldr	r3, [r7, #20]
   2927e:	2136      	movs	r1, #54	; 0x36
   29280:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   29282:	230f      	movs	r3, #15
   29284:	18fb      	adds	r3, r7, r3
   29286:	400a      	ands	r2, r1
   29288:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   2928a:	693b      	ldr	r3, [r7, #16]
   2928c:	7e1b      	ldrb	r3, [r3, #24]
   2928e:	b2da      	uxtb	r2, r3
   29290:	230c      	movs	r3, #12
   29292:	18fb      	adds	r3, r7, r3
   29294:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   29296:	693b      	ldr	r3, [r7, #16]
   29298:	7d9b      	ldrb	r3, [r3, #22]
   2929a:	b2db      	uxtb	r3, r3
   2929c:	b29a      	uxth	r2, r3
   2929e:	230c      	movs	r3, #12
   292a0:	18fb      	adds	r3, r7, r3
   292a2:	210c      	movs	r1, #12
   292a4:	1879      	adds	r1, r7, r1
   292a6:	8809      	ldrh	r1, [r1, #0]
   292a8:	400a      	ands	r2, r1
   292aa:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   292ac:	230c      	movs	r3, #12
   292ae:	18fb      	adds	r3, r7, r3
   292b0:	881b      	ldrh	r3, [r3, #0]
   292b2:	2201      	movs	r2, #1
   292b4:	4013      	ands	r3, r2
   292b6:	d038      	beq.n	2932a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   292b8:	697b      	ldr	r3, [r7, #20]
   292ba:	795b      	ldrb	r3, [r3, #5]
   292bc:	2b01      	cmp	r3, #1
   292be:	d110      	bne.n	292e2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   292c0:	697b      	ldr	r3, [r7, #20]
   292c2:	7a5b      	ldrb	r3, [r3, #9]
   292c4:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   292c6:	2b00      	cmp	r3, #0
   292c8:	d10b      	bne.n	292e2 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   292ca:	697b      	ldr	r3, [r7, #20]
   292cc:	0018      	movs	r0, r3
   292ce:	4b7e      	ldr	r3, [pc, #504]	; (294c8 <_spi_interrupt_handler+0x270>)
   292d0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   292d2:	697b      	ldr	r3, [r7, #20]
   292d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   292d6:	b29b      	uxth	r3, r3
   292d8:	2b00      	cmp	r3, #0
   292da:	d102      	bne.n	292e2 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   292dc:	693b      	ldr	r3, [r7, #16]
   292de:	2201      	movs	r2, #1
   292e0:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   292e2:	697b      	ldr	r3, [r7, #20]
   292e4:	795b      	ldrb	r3, [r3, #5]
		if (0
   292e6:	2b01      	cmp	r3, #1
   292e8:	d11f      	bne.n	2932a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   292ea:	697b      	ldr	r3, [r7, #20]
   292ec:	7a5b      	ldrb	r3, [r3, #9]
   292ee:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   292f0:	2b00      	cmp	r3, #0
   292f2:	d01a      	beq.n	2932a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   292f4:	697b      	ldr	r3, [r7, #20]
   292f6:	0018      	movs	r0, r3
   292f8:	4b74      	ldr	r3, [pc, #464]	; (294cc <_spi_interrupt_handler+0x274>)
   292fa:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   292fc:	697b      	ldr	r3, [r7, #20]
   292fe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   29300:	b29b      	uxth	r3, r3
   29302:	2b00      	cmp	r3, #0
   29304:	d111      	bne.n	2932a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29306:	693b      	ldr	r3, [r7, #16]
   29308:	2201      	movs	r2, #1
   2930a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   2930c:	697b      	ldr	r3, [r7, #20]
   2930e:	7a5b      	ldrb	r3, [r3, #9]
   29310:	b2db      	uxtb	r3, r3
   29312:	2b01      	cmp	r3, #1
   29314:	d109      	bne.n	2932a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   29316:	697b      	ldr	r3, [r7, #20]
   29318:	79db      	ldrb	r3, [r3, #7]
   2931a:	2201      	movs	r2, #1
   2931c:	4053      	eors	r3, r2
   2931e:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   29320:	2b00      	cmp	r3, #0
   29322:	d002      	beq.n	2932a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   29324:	693b      	ldr	r3, [r7, #16]
   29326:	2202      	movs	r2, #2
   29328:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   2932a:	230c      	movs	r3, #12
   2932c:	18fb      	adds	r3, r7, r3
   2932e:	881b      	ldrh	r3, [r3, #0]
   29330:	2204      	movs	r2, #4
   29332:	4013      	ands	r3, r2
   29334:	d100      	bne.n	29338 <_spi_interrupt_handler+0xe0>
   29336:	e07e      	b.n	29436 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   29338:	693b      	ldr	r3, [r7, #16]
   2933a:	8b5b      	ldrh	r3, [r3, #26]
   2933c:	b29b      	uxth	r3, r3
   2933e:	001a      	movs	r2, r3
   29340:	2304      	movs	r3, #4
   29342:	4013      	ands	r3, r2
   29344:	d022      	beq.n	2938c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   29346:	697b      	ldr	r3, [r7, #20]
   29348:	7a5b      	ldrb	r3, [r3, #9]
   2934a:	b2db      	uxtb	r3, r3
   2934c:	2b01      	cmp	r3, #1
   2934e:	d014      	beq.n	2937a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   29350:	697b      	ldr	r3, [r7, #20]
   29352:	2238      	movs	r2, #56	; 0x38
   29354:	211e      	movs	r1, #30
   29356:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   29358:	697b      	ldr	r3, [r7, #20]
   2935a:	2203      	movs	r2, #3
   2935c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2935e:	693b      	ldr	r3, [r7, #16]
   29360:	2205      	movs	r2, #5
   29362:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   29364:	230f      	movs	r3, #15
   29366:	18fb      	adds	r3, r7, r3
   29368:	781b      	ldrb	r3, [r3, #0]
   2936a:	2208      	movs	r2, #8
   2936c:	4013      	ands	r3, r2
   2936e:	d004      	beq.n	2937a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   29370:	697b      	ldr	r3, [r7, #20]
   29372:	699b      	ldr	r3, [r3, #24]
   29374:	697a      	ldr	r2, [r7, #20]
   29376:	0010      	movs	r0, r2
   29378:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   2937a:	693b      	ldr	r3, [r7, #16]
   2937c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2937e:	230a      	movs	r3, #10
   29380:	18fb      	adds	r3, r7, r3
   29382:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   29384:	693b      	ldr	r3, [r7, #16]
   29386:	2204      	movs	r2, #4
   29388:	835a      	strh	r2, [r3, #26]
   2938a:	e054      	b.n	29436 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   2938c:	697b      	ldr	r3, [r7, #20]
   2938e:	7a5b      	ldrb	r3, [r3, #9]
   29390:	b2db      	uxtb	r3, r3
   29392:	2b01      	cmp	r3, #1
   29394:	d11e      	bne.n	293d4 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   29396:	697b      	ldr	r3, [r7, #20]
   29398:	0018      	movs	r0, r3
   2939a:	4b4d      	ldr	r3, [pc, #308]	; (294d0 <_spi_interrupt_handler+0x278>)
   2939c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2939e:	697b      	ldr	r3, [r7, #20]
   293a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   293a2:	b29b      	uxth	r3, r3
   293a4:	2b00      	cmp	r3, #0
   293a6:	d146      	bne.n	29436 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   293a8:	693b      	ldr	r3, [r7, #16]
   293aa:	2204      	movs	r2, #4
   293ac:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   293ae:	697b      	ldr	r3, [r7, #20]
   293b0:	2238      	movs	r2, #56	; 0x38
   293b2:	2100      	movs	r1, #0
   293b4:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   293b6:	697b      	ldr	r3, [r7, #20]
   293b8:	2203      	movs	r2, #3
   293ba:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   293bc:	230f      	movs	r3, #15
   293be:	18fb      	adds	r3, r7, r3
   293c0:	781b      	ldrb	r3, [r3, #0]
   293c2:	2201      	movs	r2, #1
   293c4:	4013      	ands	r3, r2
   293c6:	d036      	beq.n	29436 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   293c8:	697b      	ldr	r3, [r7, #20]
   293ca:	68db      	ldr	r3, [r3, #12]
   293cc:	697a      	ldr	r2, [r7, #20]
   293ce:	0010      	movs	r0, r2
   293d0:	4798      	blx	r3
   293d2:	e030      	b.n	29436 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   293d4:	697b      	ldr	r3, [r7, #20]
   293d6:	0018      	movs	r0, r3
   293d8:	4b3e      	ldr	r3, [pc, #248]	; (294d4 <_spi_interrupt_handler+0x27c>)
   293da:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   293dc:	697b      	ldr	r3, [r7, #20]
   293de:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   293e0:	b29b      	uxth	r3, r3
   293e2:	2b00      	cmp	r3, #0
   293e4:	d127      	bne.n	29436 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   293e6:	697b      	ldr	r3, [r7, #20]
   293e8:	2238      	movs	r2, #56	; 0x38
   293ea:	2100      	movs	r1, #0
   293ec:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   293ee:	693b      	ldr	r3, [r7, #16]
   293f0:	2204      	movs	r2, #4
   293f2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   293f4:	697b      	ldr	r3, [r7, #20]
   293f6:	7a5b      	ldrb	r3, [r3, #9]
   293f8:	b2db      	uxtb	r3, r3
   293fa:	2b02      	cmp	r3, #2
   293fc:	d10b      	bne.n	29416 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   293fe:	230f      	movs	r3, #15
   29400:	18fb      	adds	r3, r7, r3
   29402:	781b      	ldrb	r3, [r3, #0]
   29404:	2204      	movs	r2, #4
   29406:	4013      	ands	r3, r2
   29408:	d015      	beq.n	29436 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   2940a:	697b      	ldr	r3, [r7, #20]
   2940c:	695b      	ldr	r3, [r3, #20]
   2940e:	697a      	ldr	r2, [r7, #20]
   29410:	0010      	movs	r0, r2
   29412:	4798      	blx	r3
   29414:	e00f      	b.n	29436 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   29416:	697b      	ldr	r3, [r7, #20]
   29418:	7a5b      	ldrb	r3, [r3, #9]
   2941a:	b2db      	uxtb	r3, r3
   2941c:	2b00      	cmp	r3, #0
   2941e:	d10a      	bne.n	29436 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   29420:	230f      	movs	r3, #15
   29422:	18fb      	adds	r3, r7, r3
   29424:	781b      	ldrb	r3, [r3, #0]
   29426:	2202      	movs	r2, #2
   29428:	4013      	ands	r3, r2
   2942a:	d004      	beq.n	29436 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   2942c:	697b      	ldr	r3, [r7, #20]
   2942e:	691b      	ldr	r3, [r3, #16]
   29430:	697a      	ldr	r2, [r7, #20]
   29432:	0010      	movs	r0, r2
   29434:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   29436:	230c      	movs	r3, #12
   29438:	18fb      	adds	r3, r7, r3
   2943a:	881b      	ldrh	r3, [r3, #0]
   2943c:	2202      	movs	r2, #2
   2943e:	4013      	ands	r3, r2
   29440:	d024      	beq.n	2948c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   29442:	697b      	ldr	r3, [r7, #20]
   29444:	795b      	ldrb	r3, [r3, #5]
   29446:	2b01      	cmp	r3, #1
   29448:	d120      	bne.n	2948c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   2944a:	697b      	ldr	r3, [r7, #20]
   2944c:	7a5b      	ldrb	r3, [r3, #9]
   2944e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   29450:	2b01      	cmp	r3, #1
   29452:	d11b      	bne.n	2948c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   29454:	697b      	ldr	r3, [r7, #20]
   29456:	79db      	ldrb	r3, [r3, #7]
   29458:	2201      	movs	r2, #1
   2945a:	4053      	eors	r3, r2
   2945c:	b2db      	uxtb	r3, r3
   2945e:	2b00      	cmp	r3, #0
   29460:	d014      	beq.n	2948c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   29462:	693b      	ldr	r3, [r7, #16]
   29464:	2202      	movs	r2, #2
   29466:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   29468:	697b      	ldr	r3, [r7, #20]
   2946a:	2203      	movs	r2, #3
   2946c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2946e:	697b      	ldr	r3, [r7, #20]
   29470:	2238      	movs	r2, #56	; 0x38
   29472:	2100      	movs	r1, #0
   29474:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   29476:	230f      	movs	r3, #15
   29478:	18fb      	adds	r3, r7, r3
   2947a:	781b      	ldrb	r3, [r3, #0]
   2947c:	2201      	movs	r2, #1
   2947e:	4013      	ands	r3, r2
   29480:	d004      	beq.n	2948c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   29482:	697b      	ldr	r3, [r7, #20]
   29484:	68db      	ldr	r3, [r3, #12]
   29486:	697a      	ldr	r2, [r7, #20]
   29488:	0010      	movs	r0, r2
   2948a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   2948c:	230c      	movs	r3, #12
   2948e:	18fb      	adds	r3, r7, r3
   29490:	881b      	ldrh	r3, [r3, #0]
   29492:	2280      	movs	r2, #128	; 0x80
   29494:	4013      	ands	r3, r2
   29496:	d010      	beq.n	294ba <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   29498:	693b      	ldr	r3, [r7, #16]
   2949a:	2280      	movs	r2, #128	; 0x80
   2949c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2949e:	693b      	ldr	r3, [r7, #16]
   294a0:	2280      	movs	r2, #128	; 0x80
   294a2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   294a4:	230f      	movs	r3, #15
   294a6:	18fb      	adds	r3, r7, r3
   294a8:	781b      	ldrb	r3, [r3, #0]
   294aa:	2240      	movs	r2, #64	; 0x40
   294ac:	4013      	ands	r3, r2
   294ae:	d004      	beq.n	294ba <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   294b0:	697b      	ldr	r3, [r7, #20]
   294b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   294b4:	697a      	ldr	r2, [r7, #20]
   294b6:	0010      	movs	r0, r2
   294b8:	4798      	blx	r3
		}
	}
#  endif
}
   294ba:	46c0      	nop			; (mov r8, r8)
   294bc:	46bd      	mov	sp, r7
   294be:	b006      	add	sp, #24
   294c0:	bd80      	pop	{r7, pc}
   294c2:	46c0      	nop			; (mov r8, r8)
   294c4:	20005c98 	.word	0x20005c98
   294c8:	0002917d 	.word	0x0002917d
   294cc:	00029101 	.word	0x00029101
   294d0:	000291b1 	.word	0x000291b1
   294d4:	000291e7 	.word	0x000291e7

000294d8 <system_gclk_chan_get_config_defaults>:
{
   294d8:	b580      	push	{r7, lr}
   294da:	b082      	sub	sp, #8
   294dc:	af00      	add	r7, sp, #0
   294de:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   294e0:	687b      	ldr	r3, [r7, #4]
   294e2:	2200      	movs	r2, #0
   294e4:	701a      	strb	r2, [r3, #0]
}
   294e6:	46c0      	nop			; (mov r8, r8)
   294e8:	46bd      	mov	sp, r7
   294ea:	b002      	add	sp, #8
   294ec:	bd80      	pop	{r7, pc}
	...

000294f0 <system_apb_clock_set_mask>:
{
   294f0:	b580      	push	{r7, lr}
   294f2:	b082      	sub	sp, #8
   294f4:	af00      	add	r7, sp, #0
   294f6:	0002      	movs	r2, r0
   294f8:	6039      	str	r1, [r7, #0]
   294fa:	1dfb      	adds	r3, r7, #7
   294fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   294fe:	1dfb      	adds	r3, r7, #7
   29500:	781b      	ldrb	r3, [r3, #0]
   29502:	2b01      	cmp	r3, #1
   29504:	d00a      	beq.n	2951c <system_apb_clock_set_mask+0x2c>
   29506:	2b02      	cmp	r3, #2
   29508:	d00f      	beq.n	2952a <system_apb_clock_set_mask+0x3a>
   2950a:	2b00      	cmp	r3, #0
   2950c:	d114      	bne.n	29538 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2950e:	4b0e      	ldr	r3, [pc, #56]	; (29548 <system_apb_clock_set_mask+0x58>)
   29510:	4a0d      	ldr	r2, [pc, #52]	; (29548 <system_apb_clock_set_mask+0x58>)
   29512:	6991      	ldr	r1, [r2, #24]
   29514:	683a      	ldr	r2, [r7, #0]
   29516:	430a      	orrs	r2, r1
   29518:	619a      	str	r2, [r3, #24]
			break;
   2951a:	e00f      	b.n	2953c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2951c:	4b0a      	ldr	r3, [pc, #40]	; (29548 <system_apb_clock_set_mask+0x58>)
   2951e:	4a0a      	ldr	r2, [pc, #40]	; (29548 <system_apb_clock_set_mask+0x58>)
   29520:	69d1      	ldr	r1, [r2, #28]
   29522:	683a      	ldr	r2, [r7, #0]
   29524:	430a      	orrs	r2, r1
   29526:	61da      	str	r2, [r3, #28]
			break;
   29528:	e008      	b.n	2953c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2952a:	4b07      	ldr	r3, [pc, #28]	; (29548 <system_apb_clock_set_mask+0x58>)
   2952c:	4a06      	ldr	r2, [pc, #24]	; (29548 <system_apb_clock_set_mask+0x58>)
   2952e:	6a11      	ldr	r1, [r2, #32]
   29530:	683a      	ldr	r2, [r7, #0]
   29532:	430a      	orrs	r2, r1
   29534:	621a      	str	r2, [r3, #32]
			break;
   29536:	e001      	b.n	2953c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29538:	2317      	movs	r3, #23
   2953a:	e000      	b.n	2953e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2953c:	2300      	movs	r3, #0
}
   2953e:	0018      	movs	r0, r3
   29540:	46bd      	mov	sp, r7
   29542:	b002      	add	sp, #8
   29544:	bd80      	pop	{r7, pc}
   29546:	46c0      	nop			; (mov r8, r8)
   29548:	40000400 	.word	0x40000400

0002954c <system_pinmux_get_config_defaults>:
{
   2954c:	b580      	push	{r7, lr}
   2954e:	b082      	sub	sp, #8
   29550:	af00      	add	r7, sp, #0
   29552:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29554:	687b      	ldr	r3, [r7, #4]
   29556:	2280      	movs	r2, #128	; 0x80
   29558:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2955a:	687b      	ldr	r3, [r7, #4]
   2955c:	2200      	movs	r2, #0
   2955e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29560:	687b      	ldr	r3, [r7, #4]
   29562:	2201      	movs	r2, #1
   29564:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29566:	687b      	ldr	r3, [r7, #4]
   29568:	2200      	movs	r2, #0
   2956a:	70da      	strb	r2, [r3, #3]
}
   2956c:	46c0      	nop			; (mov r8, r8)
   2956e:	46bd      	mov	sp, r7
   29570:	b002      	add	sp, #8
   29572:	bd80      	pop	{r7, pc}

00029574 <system_is_debugger_present>:
{
   29574:	b580      	push	{r7, lr}
   29576:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   29578:	4b05      	ldr	r3, [pc, #20]	; (29590 <system_is_debugger_present+0x1c>)
   2957a:	789b      	ldrb	r3, [r3, #2]
   2957c:	b2db      	uxtb	r3, r3
   2957e:	001a      	movs	r2, r3
   29580:	2302      	movs	r3, #2
   29582:	4013      	ands	r3, r2
   29584:	1e5a      	subs	r2, r3, #1
   29586:	4193      	sbcs	r3, r2
   29588:	b2db      	uxtb	r3, r3
}
   2958a:	0018      	movs	r0, r3
   2958c:	46bd      	mov	sp, r7
   2958e:	bd80      	pop	{r7, pc}
   29590:	41002000 	.word	0x41002000

00029594 <usart_is_syncing>:
{
   29594:	b580      	push	{r7, lr}
   29596:	b084      	sub	sp, #16
   29598:	af00      	add	r7, sp, #0
   2959a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2959c:	687b      	ldr	r3, [r7, #4]
   2959e:	681b      	ldr	r3, [r3, #0]
   295a0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   295a2:	68fb      	ldr	r3, [r7, #12]
   295a4:	69db      	ldr	r3, [r3, #28]
   295a6:	1e5a      	subs	r2, r3, #1
   295a8:	4193      	sbcs	r3, r2
   295aa:	b2db      	uxtb	r3, r3
}
   295ac:	0018      	movs	r0, r3
   295ae:	46bd      	mov	sp, r7
   295b0:	b004      	add	sp, #16
   295b2:	bd80      	pop	{r7, pc}

000295b4 <_usart_wait_for_sync>:
{
   295b4:	b580      	push	{r7, lr}
   295b6:	b082      	sub	sp, #8
   295b8:	af00      	add	r7, sp, #0
   295ba:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   295bc:	46c0      	nop			; (mov r8, r8)
   295be:	687b      	ldr	r3, [r7, #4]
   295c0:	0018      	movs	r0, r3
   295c2:	4b04      	ldr	r3, [pc, #16]	; (295d4 <_usart_wait_for_sync+0x20>)
   295c4:	4798      	blx	r3
   295c6:	1e03      	subs	r3, r0, #0
   295c8:	d1f9      	bne.n	295be <_usart_wait_for_sync+0xa>
}
   295ca:	46c0      	nop			; (mov r8, r8)
   295cc:	46bd      	mov	sp, r7
   295ce:	b002      	add	sp, #8
   295d0:	bd80      	pop	{r7, pc}
   295d2:	46c0      	nop			; (mov r8, r8)
   295d4:	00029595 	.word	0x00029595

000295d8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   295d8:	b5b0      	push	{r4, r5, r7, lr}
   295da:	b08c      	sub	sp, #48	; 0x30
   295dc:	af02      	add	r7, sp, #8
   295de:	6078      	str	r0, [r7, #4]
   295e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   295e2:	687b      	ldr	r3, [r7, #4]
   295e4:	681b      	ldr	r3, [r3, #0]
   295e6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   295e8:	687b      	ldr	r3, [r7, #4]
   295ea:	681b      	ldr	r3, [r3, #0]
   295ec:	0018      	movs	r0, r3
   295ee:	4bab      	ldr	r3, [pc, #684]	; (2989c <_usart_set_config+0x2c4>)
   295f0:	4798      	blx	r3
   295f2:	0003      	movs	r3, r0
   295f4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   295f6:	697b      	ldr	r3, [r7, #20]
   295f8:	3314      	adds	r3, #20
   295fa:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   295fc:	2300      	movs	r3, #0
   295fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   29600:	2300      	movs	r3, #0
   29602:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   29604:	230a      	movs	r3, #10
   29606:	18fb      	adds	r3, r7, r3
   29608:	2200      	movs	r2, #0
   2960a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2960c:	231f      	movs	r3, #31
   2960e:	18fb      	adds	r3, r7, r3
   29610:	2200      	movs	r2, #0
   29612:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29614:	231e      	movs	r3, #30
   29616:	18fb      	adds	r3, r7, r3
   29618:	2210      	movs	r2, #16
   2961a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2961c:	683b      	ldr	r3, [r7, #0]
   2961e:	8a1b      	ldrh	r3, [r3, #16]
   29620:	2280      	movs	r2, #128	; 0x80
   29622:	01d2      	lsls	r2, r2, #7
   29624:	4293      	cmp	r3, r2
   29626:	d01c      	beq.n	29662 <_usart_set_config+0x8a>
   29628:	2280      	movs	r2, #128	; 0x80
   2962a:	01d2      	lsls	r2, r2, #7
   2962c:	4293      	cmp	r3, r2
   2962e:	dc06      	bgt.n	2963e <_usart_set_config+0x66>
   29630:	2b00      	cmp	r3, #0
   29632:	d00d      	beq.n	29650 <_usart_set_config+0x78>
   29634:	2280      	movs	r2, #128	; 0x80
   29636:	0192      	lsls	r2, r2, #6
   29638:	4293      	cmp	r3, r2
   2963a:	d024      	beq.n	29686 <_usart_set_config+0xae>
   2963c:	e035      	b.n	296aa <_usart_set_config+0xd2>
   2963e:	22c0      	movs	r2, #192	; 0xc0
   29640:	01d2      	lsls	r2, r2, #7
   29642:	4293      	cmp	r3, r2
   29644:	d028      	beq.n	29698 <_usart_set_config+0xc0>
   29646:	2280      	movs	r2, #128	; 0x80
   29648:	0212      	lsls	r2, r2, #8
   2964a:	4293      	cmp	r3, r2
   2964c:	d012      	beq.n	29674 <_usart_set_config+0x9c>
   2964e:	e02c      	b.n	296aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29650:	231f      	movs	r3, #31
   29652:	18fb      	adds	r3, r7, r3
   29654:	2200      	movs	r2, #0
   29656:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29658:	231e      	movs	r3, #30
   2965a:	18fb      	adds	r3, r7, r3
   2965c:	2210      	movs	r2, #16
   2965e:	701a      	strb	r2, [r3, #0]
			break;
   29660:	e023      	b.n	296aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29662:	231f      	movs	r3, #31
   29664:	18fb      	adds	r3, r7, r3
   29666:	2200      	movs	r2, #0
   29668:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2966a:	231e      	movs	r3, #30
   2966c:	18fb      	adds	r3, r7, r3
   2966e:	2208      	movs	r2, #8
   29670:	701a      	strb	r2, [r3, #0]
			break;
   29672:	e01a      	b.n	296aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   29674:	231f      	movs	r3, #31
   29676:	18fb      	adds	r3, r7, r3
   29678:	2200      	movs	r2, #0
   2967a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2967c:	231e      	movs	r3, #30
   2967e:	18fb      	adds	r3, r7, r3
   29680:	2203      	movs	r2, #3
   29682:	701a      	strb	r2, [r3, #0]
			break;
   29684:	e011      	b.n	296aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29686:	231f      	movs	r3, #31
   29688:	18fb      	adds	r3, r7, r3
   2968a:	2201      	movs	r2, #1
   2968c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2968e:	231e      	movs	r3, #30
   29690:	18fb      	adds	r3, r7, r3
   29692:	2210      	movs	r2, #16
   29694:	701a      	strb	r2, [r3, #0]
			break;
   29696:	e008      	b.n	296aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29698:	231f      	movs	r3, #31
   2969a:	18fb      	adds	r3, r7, r3
   2969c:	2201      	movs	r2, #1
   2969e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   296a0:	231e      	movs	r3, #30
   296a2:	18fb      	adds	r3, r7, r3
   296a4:	2208      	movs	r2, #8
   296a6:	701a      	strb	r2, [r3, #0]
			break;
   296a8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   296aa:	683b      	ldr	r3, [r7, #0]
   296ac:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   296ae:	683b      	ldr	r3, [r7, #0]
   296b0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   296b2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   296b4:	683b      	ldr	r3, [r7, #0]
   296b6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   296b8:	4313      	orrs	r3, r2
		config->sample_rate |
   296ba:	683a      	ldr	r2, [r7, #0]
   296bc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   296be:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   296c0:	683a      	ldr	r2, [r7, #0]
   296c2:	7e12      	ldrb	r2, [r2, #24]
   296c4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   296c6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   296c8:	683a      	ldr	r2, [r7, #0]
   296ca:	2126      	movs	r1, #38	; 0x26
   296cc:	5c52      	ldrb	r2, [r2, r1]
   296ce:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   296d0:	4313      	orrs	r3, r2
   296d2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   296d4:	231d      	movs	r3, #29
   296d6:	18fb      	adds	r3, r7, r3
   296d8:	2200      	movs	r2, #0
   296da:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   296dc:	683b      	ldr	r3, [r7, #0]
   296de:	685b      	ldr	r3, [r3, #4]
   296e0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   296e2:	68fb      	ldr	r3, [r7, #12]
   296e4:	2b00      	cmp	r3, #0
   296e6:	d01e      	beq.n	29726 <_usart_set_config+0x14e>
   296e8:	2280      	movs	r2, #128	; 0x80
   296ea:	0552      	lsls	r2, r2, #21
   296ec:	4293      	cmp	r3, r2
   296ee:	d14f      	bne.n	29790 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   296f0:	683b      	ldr	r3, [r7, #0]
   296f2:	2227      	movs	r2, #39	; 0x27
   296f4:	5c9b      	ldrb	r3, [r3, r2]
   296f6:	2201      	movs	r2, #1
   296f8:	4053      	eors	r3, r2
   296fa:	b2db      	uxtb	r3, r3
   296fc:	2b00      	cmp	r3, #0
   296fe:	d046      	beq.n	2978e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   29700:	683b      	ldr	r3, [r7, #0]
   29702:	6a1d      	ldr	r5, [r3, #32]
   29704:	693b      	ldr	r3, [r7, #16]
   29706:	b2db      	uxtb	r3, r3
   29708:	0018      	movs	r0, r3
   2970a:	4b65      	ldr	r3, [pc, #404]	; (298a0 <_usart_set_config+0x2c8>)
   2970c:	4798      	blx	r3
   2970e:	0001      	movs	r1, r0
   29710:	231d      	movs	r3, #29
   29712:	18fc      	adds	r4, r7, r3
   29714:	230a      	movs	r3, #10
   29716:	18fb      	adds	r3, r7, r3
   29718:	001a      	movs	r2, r3
   2971a:	0028      	movs	r0, r5
   2971c:	4b61      	ldr	r3, [pc, #388]	; (298a4 <_usart_set_config+0x2cc>)
   2971e:	4798      	blx	r3
   29720:	0003      	movs	r3, r0
   29722:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   29724:	e033      	b.n	2978e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   29726:	683b      	ldr	r3, [r7, #0]
   29728:	2227      	movs	r2, #39	; 0x27
   2972a:	5c9b      	ldrb	r3, [r3, r2]
   2972c:	2b00      	cmp	r3, #0
   2972e:	d014      	beq.n	2975a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   29730:	683b      	ldr	r3, [r7, #0]
   29732:	6a18      	ldr	r0, [r3, #32]
   29734:	683b      	ldr	r3, [r7, #0]
   29736:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   29738:	231d      	movs	r3, #29
   2973a:	18fc      	adds	r4, r7, r3
   2973c:	231f      	movs	r3, #31
   2973e:	18fb      	adds	r3, r7, r3
   29740:	781d      	ldrb	r5, [r3, #0]
   29742:	230a      	movs	r3, #10
   29744:	18fa      	adds	r2, r7, r3
   29746:	231e      	movs	r3, #30
   29748:	18fb      	adds	r3, r7, r3
   2974a:	781b      	ldrb	r3, [r3, #0]
   2974c:	9300      	str	r3, [sp, #0]
   2974e:	002b      	movs	r3, r5
   29750:	4d55      	ldr	r5, [pc, #340]	; (298a8 <_usart_set_config+0x2d0>)
   29752:	47a8      	blx	r5
   29754:	0003      	movs	r3, r0
   29756:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   29758:	e01a      	b.n	29790 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2975a:	683b      	ldr	r3, [r7, #0]
   2975c:	6a1d      	ldr	r5, [r3, #32]
   2975e:	693b      	ldr	r3, [r7, #16]
   29760:	b2db      	uxtb	r3, r3
   29762:	0018      	movs	r0, r3
   29764:	4b4e      	ldr	r3, [pc, #312]	; (298a0 <_usart_set_config+0x2c8>)
   29766:	4798      	blx	r3
				status_code =
   29768:	231d      	movs	r3, #29
   2976a:	18fc      	adds	r4, r7, r3
   2976c:	231f      	movs	r3, #31
   2976e:	18fb      	adds	r3, r7, r3
   29770:	7819      	ldrb	r1, [r3, #0]
   29772:	230a      	movs	r3, #10
   29774:	18fa      	adds	r2, r7, r3
   29776:	231e      	movs	r3, #30
   29778:	18fb      	adds	r3, r7, r3
   2977a:	781b      	ldrb	r3, [r3, #0]
   2977c:	9300      	str	r3, [sp, #0]
   2977e:	000b      	movs	r3, r1
   29780:	0001      	movs	r1, r0
   29782:	0028      	movs	r0, r5
   29784:	4d48      	ldr	r5, [pc, #288]	; (298a8 <_usart_set_config+0x2d0>)
   29786:	47a8      	blx	r5
   29788:	0003      	movs	r3, r0
   2978a:	7023      	strb	r3, [r4, #0]
			break;
   2978c:	e000      	b.n	29790 <_usart_set_config+0x1b8>
			break;
   2978e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   29790:	231d      	movs	r3, #29
   29792:	18fb      	adds	r3, r7, r3
   29794:	781b      	ldrb	r3, [r3, #0]
   29796:	2b00      	cmp	r3, #0
   29798:	d003      	beq.n	297a2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2979a:	231d      	movs	r3, #29
   2979c:	18fb      	adds	r3, r7, r3
   2979e:	781b      	ldrb	r3, [r3, #0]
   297a0:	e077      	b.n	29892 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   297a2:	683b      	ldr	r3, [r7, #0]
   297a4:	7e5b      	ldrb	r3, [r3, #25]
   297a6:	2b00      	cmp	r3, #0
   297a8:	d003      	beq.n	297b2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   297aa:	683b      	ldr	r3, [r7, #0]
   297ac:	7e9a      	ldrb	r2, [r3, #26]
   297ae:	69bb      	ldr	r3, [r7, #24]
   297b0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   297b2:	687b      	ldr	r3, [r7, #4]
   297b4:	0018      	movs	r0, r3
   297b6:	4b3d      	ldr	r3, [pc, #244]	; (298ac <_usart_set_config+0x2d4>)
   297b8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   297ba:	230a      	movs	r3, #10
   297bc:	18fb      	adds	r3, r7, r3
   297be:	881a      	ldrh	r2, [r3, #0]
   297c0:	69bb      	ldr	r3, [r7, #24]
   297c2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   297c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   297c6:	68fb      	ldr	r3, [r7, #12]
   297c8:	4313      	orrs	r3, r2
   297ca:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   297cc:	683b      	ldr	r3, [r7, #0]
   297ce:	2227      	movs	r2, #39	; 0x27
   297d0:	5c9b      	ldrb	r3, [r3, r2]
   297d2:	2201      	movs	r2, #1
   297d4:	4053      	eors	r3, r2
   297d6:	b2db      	uxtb	r3, r3
   297d8:	2b00      	cmp	r3, #0
   297da:	d003      	beq.n	297e4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   297dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   297de:	2204      	movs	r2, #4
   297e0:	4313      	orrs	r3, r2
   297e2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   297e4:	683b      	ldr	r3, [r7, #0]
   297e6:	7e5b      	ldrb	r3, [r3, #25]
   297e8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   297ea:	683b      	ldr	r3, [r7, #0]
   297ec:	7f1b      	ldrb	r3, [r3, #28]
   297ee:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   297f0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   297f2:	683b      	ldr	r3, [r7, #0]
   297f4:	7f5b      	ldrb	r3, [r3, #29]
   297f6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   297f8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   297fa:	683b      	ldr	r3, [r7, #0]
   297fc:	2124      	movs	r1, #36	; 0x24
   297fe:	5c5b      	ldrb	r3, [r3, r1]
   29800:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   29802:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   29804:	683b      	ldr	r3, [r7, #0]
   29806:	2125      	movs	r1, #37	; 0x25
   29808:	5c5b      	ldrb	r3, [r3, r1]
   2980a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2980c:	4313      	orrs	r3, r2
	ctrlb =  
   2980e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   29810:	683b      	ldr	r3, [r7, #0]
   29812:	7a9b      	ldrb	r3, [r3, #10]
   29814:	001a      	movs	r2, r3
   29816:	6a3b      	ldr	r3, [r7, #32]
   29818:	4313      	orrs	r3, r2
   2981a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2981c:	683b      	ldr	r3, [r7, #0]
   2981e:	7adb      	ldrb	r3, [r3, #11]
   29820:	001a      	movs	r2, r3
   29822:	6a3b      	ldr	r3, [r7, #32]
   29824:	4313      	orrs	r3, r2
   29826:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   29828:	683b      	ldr	r3, [r7, #0]
   2982a:	891b      	ldrh	r3, [r3, #8]
   2982c:	2bff      	cmp	r3, #255	; 0xff
   2982e:	d00b      	beq.n	29848 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   29830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29832:	2280      	movs	r2, #128	; 0x80
   29834:	0452      	lsls	r2, r2, #17
   29836:	4313      	orrs	r3, r2
   29838:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2983a:	683b      	ldr	r3, [r7, #0]
   2983c:	891b      	ldrh	r3, [r3, #8]
   2983e:	001a      	movs	r2, r3
   29840:	6a3b      	ldr	r3, [r7, #32]
   29842:	4313      	orrs	r3, r2
   29844:	623b      	str	r3, [r7, #32]
   29846:	e008      	b.n	2985a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   29848:	683b      	ldr	r3, [r7, #0]
   2984a:	7edb      	ldrb	r3, [r3, #27]
   2984c:	2b00      	cmp	r3, #0
   2984e:	d004      	beq.n	2985a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   29850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29852:	2280      	movs	r2, #128	; 0x80
   29854:	04d2      	lsls	r2, r2, #19
   29856:	4313      	orrs	r3, r2
   29858:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2985a:	683b      	ldr	r3, [r7, #0]
   2985c:	222c      	movs	r2, #44	; 0x2c
   2985e:	5c9b      	ldrb	r3, [r3, r2]
   29860:	2b00      	cmp	r3, #0
   29862:	d103      	bne.n	2986c <_usart_set_config+0x294>
   29864:	4b12      	ldr	r3, [pc, #72]	; (298b0 <_usart_set_config+0x2d8>)
   29866:	4798      	blx	r3
   29868:	1e03      	subs	r3, r0, #0
   2986a:	d003      	beq.n	29874 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2986e:	2280      	movs	r2, #128	; 0x80
   29870:	4313      	orrs	r3, r2
   29872:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29874:	687b      	ldr	r3, [r7, #4]
   29876:	0018      	movs	r0, r3
   29878:	4b0c      	ldr	r3, [pc, #48]	; (298ac <_usart_set_config+0x2d4>)
   2987a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2987c:	69bb      	ldr	r3, [r7, #24]
   2987e:	6a3a      	ldr	r2, [r7, #32]
   29880:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29882:	687b      	ldr	r3, [r7, #4]
   29884:	0018      	movs	r0, r3
   29886:	4b09      	ldr	r3, [pc, #36]	; (298ac <_usart_set_config+0x2d4>)
   29888:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2988a:	69bb      	ldr	r3, [r7, #24]
   2988c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2988e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   29890:	2300      	movs	r3, #0
}
   29892:	0018      	movs	r0, r3
   29894:	46bd      	mov	sp, r7
   29896:	b00a      	add	sp, #40	; 0x28
   29898:	bdb0      	pop	{r4, r5, r7, pc}
   2989a:	46c0      	nop			; (mov r8, r8)
   2989c:	00028381 	.word	0x00028381
   298a0:	0002ad35 	.word	0x0002ad35
   298a4:	00027efb 	.word	0x00027efb
   298a8:	00027f79 	.word	0x00027f79
   298ac:	000295b5 	.word	0x000295b5
   298b0:	00029575 	.word	0x00029575

000298b4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   298b4:	b590      	push	{r4, r7, lr}
   298b6:	b093      	sub	sp, #76	; 0x4c
   298b8:	af00      	add	r7, sp, #0
   298ba:	60f8      	str	r0, [r7, #12]
   298bc:	60b9      	str	r1, [r7, #8]
   298be:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   298c0:	233b      	movs	r3, #59	; 0x3b
   298c2:	18fb      	adds	r3, r7, r3
   298c4:	2200      	movs	r2, #0
   298c6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   298c8:	68fb      	ldr	r3, [r7, #12]
   298ca:	68ba      	ldr	r2, [r7, #8]
   298cc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   298ce:	68fb      	ldr	r3, [r7, #12]
   298d0:	681b      	ldr	r3, [r3, #0]
   298d2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   298d4:	68fb      	ldr	r3, [r7, #12]
   298d6:	681b      	ldr	r3, [r3, #0]
   298d8:	0018      	movs	r0, r3
   298da:	4b86      	ldr	r3, [pc, #536]	; (29af4 <usart_init+0x240>)
   298dc:	4798      	blx	r3
   298de:	0003      	movs	r3, r0
   298e0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   298e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   298e4:	3302      	adds	r3, #2
   298e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   298e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   298ea:	3314      	adds	r3, #20
   298ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   298ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   298f0:	681b      	ldr	r3, [r3, #0]
   298f2:	2201      	movs	r2, #1
   298f4:	4013      	ands	r3, r2
   298f6:	d001      	beq.n	298fc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   298f8:	2305      	movs	r3, #5
   298fa:	e0f6      	b.n	29aea <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   298fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   298fe:	681b      	ldr	r3, [r3, #0]
   29900:	2202      	movs	r2, #2
   29902:	4013      	ands	r3, r2
   29904:	d001      	beq.n	2990a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   29906:	231c      	movs	r3, #28
   29908:	e0ef      	b.n	29aea <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2990a:	2201      	movs	r2, #1
   2990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2990e:	409a      	lsls	r2, r3
   29910:	0013      	movs	r3, r2
   29912:	0019      	movs	r1, r3
   29914:	2002      	movs	r0, #2
   29916:	4b78      	ldr	r3, [pc, #480]	; (29af8 <usart_init+0x244>)
   29918:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2991a:	2324      	movs	r3, #36	; 0x24
   2991c:	18fb      	adds	r3, r7, r3
   2991e:	0018      	movs	r0, r3
   29920:	4b76      	ldr	r3, [pc, #472]	; (29afc <usart_init+0x248>)
   29922:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   29924:	687b      	ldr	r3, [r7, #4]
   29926:	222d      	movs	r2, #45	; 0x2d
   29928:	5c9a      	ldrb	r2, [r3, r2]
   2992a:	2324      	movs	r3, #36	; 0x24
   2992c:	18fb      	adds	r3, r7, r3
   2992e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   29930:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29932:	b2db      	uxtb	r3, r3
   29934:	2224      	movs	r2, #36	; 0x24
   29936:	18ba      	adds	r2, r7, r2
   29938:	0011      	movs	r1, r2
   2993a:	0018      	movs	r0, r3
   2993c:	4b70      	ldr	r3, [pc, #448]	; (29b00 <usart_init+0x24c>)
   2993e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   29940:	6abb      	ldr	r3, [r7, #40]	; 0x28
   29942:	b2db      	uxtb	r3, r3
   29944:	0018      	movs	r0, r3
   29946:	4b6f      	ldr	r3, [pc, #444]	; (29b04 <usart_init+0x250>)
   29948:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2994a:	687b      	ldr	r3, [r7, #4]
   2994c:	222d      	movs	r2, #45	; 0x2d
   2994e:	5c9b      	ldrb	r3, [r3, r2]
   29950:	2100      	movs	r1, #0
   29952:	0018      	movs	r0, r3
   29954:	4b6c      	ldr	r3, [pc, #432]	; (29b08 <usart_init+0x254>)
   29956:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   29958:	687b      	ldr	r3, [r7, #4]
   2995a:	7ada      	ldrb	r2, [r3, #11]
   2995c:	68fb      	ldr	r3, [r7, #12]
   2995e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   29960:	687b      	ldr	r3, [r7, #4]
   29962:	2224      	movs	r2, #36	; 0x24
   29964:	5c9a      	ldrb	r2, [r3, r2]
   29966:	68fb      	ldr	r3, [r7, #12]
   29968:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2996a:	687b      	ldr	r3, [r7, #4]
   2996c:	2225      	movs	r2, #37	; 0x25
   2996e:	5c9a      	ldrb	r2, [r3, r2]
   29970:	68fb      	ldr	r3, [r7, #12]
   29972:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   29974:	687b      	ldr	r3, [r7, #4]
   29976:	7eda      	ldrb	r2, [r3, #27]
   29978:	68fb      	ldr	r3, [r7, #12]
   2997a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2997c:	687b      	ldr	r3, [r7, #4]
   2997e:	7f1a      	ldrb	r2, [r3, #28]
   29980:	68fb      	ldr	r3, [r7, #12]
   29982:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   29984:	233b      	movs	r3, #59	; 0x3b
   29986:	18fc      	adds	r4, r7, r3
   29988:	687a      	ldr	r2, [r7, #4]
   2998a:	68fb      	ldr	r3, [r7, #12]
   2998c:	0011      	movs	r1, r2
   2998e:	0018      	movs	r0, r3
   29990:	4b5e      	ldr	r3, [pc, #376]	; (29b0c <usart_init+0x258>)
   29992:	4798      	blx	r3
   29994:	0003      	movs	r3, r0
   29996:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   29998:	233b      	movs	r3, #59	; 0x3b
   2999a:	18fb      	adds	r3, r7, r3
   2999c:	781b      	ldrb	r3, [r3, #0]
   2999e:	2b00      	cmp	r3, #0
   299a0:	d003      	beq.n	299aa <usart_init+0xf6>
		return status_code;
   299a2:	233b      	movs	r3, #59	; 0x3b
   299a4:	18fb      	adds	r3, r7, r3
   299a6:	781b      	ldrb	r3, [r3, #0]
   299a8:	e09f      	b.n	29aea <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   299aa:	2320      	movs	r3, #32
   299ac:	18fb      	adds	r3, r7, r3
   299ae:	0018      	movs	r0, r3
   299b0:	4b57      	ldr	r3, [pc, #348]	; (29b10 <usart_init+0x25c>)
   299b2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   299b4:	2320      	movs	r3, #32
   299b6:	18fb      	adds	r3, r7, r3
   299b8:	2200      	movs	r2, #0
   299ba:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   299bc:	2320      	movs	r3, #32
   299be:	18fb      	adds	r3, r7, r3
   299c0:	2200      	movs	r2, #0
   299c2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   299c4:	687b      	ldr	r3, [r7, #4]
   299c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   299c8:	2310      	movs	r3, #16
   299ca:	18fb      	adds	r3, r7, r3
   299cc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   299ce:	687b      	ldr	r3, [r7, #4]
   299d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   299d2:	2310      	movs	r3, #16
   299d4:	18fb      	adds	r3, r7, r3
   299d6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   299d8:	687b      	ldr	r3, [r7, #4]
   299da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   299dc:	2310      	movs	r3, #16
   299de:	18fb      	adds	r3, r7, r3
   299e0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   299e2:	687b      	ldr	r3, [r7, #4]
   299e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   299e6:	2310      	movs	r3, #16
   299e8:	18fb      	adds	r3, r7, r3
   299ea:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   299ec:	2347      	movs	r3, #71	; 0x47
   299ee:	18fb      	adds	r3, r7, r3
   299f0:	2200      	movs	r2, #0
   299f2:	701a      	strb	r2, [r3, #0]
   299f4:	e02c      	b.n	29a50 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   299f6:	2347      	movs	r3, #71	; 0x47
   299f8:	18fb      	adds	r3, r7, r3
   299fa:	781a      	ldrb	r2, [r3, #0]
   299fc:	2310      	movs	r3, #16
   299fe:	18fb      	adds	r3, r7, r3
   29a00:	0092      	lsls	r2, r2, #2
   29a02:	58d3      	ldr	r3, [r2, r3]
   29a04:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29a08:	2b00      	cmp	r3, #0
   29a0a:	d109      	bne.n	29a20 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   29a0c:	2347      	movs	r3, #71	; 0x47
   29a0e:	18fb      	adds	r3, r7, r3
   29a10:	781a      	ldrb	r2, [r3, #0]
   29a12:	68bb      	ldr	r3, [r7, #8]
   29a14:	0011      	movs	r1, r2
   29a16:	0018      	movs	r0, r3
   29a18:	4b3e      	ldr	r3, [pc, #248]	; (29b14 <usart_init+0x260>)
   29a1a:	4798      	blx	r3
   29a1c:	0003      	movs	r3, r0
   29a1e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   29a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29a22:	3301      	adds	r3, #1
   29a24:	d00d      	beq.n	29a42 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29a28:	b2da      	uxtb	r2, r3
   29a2a:	2320      	movs	r3, #32
   29a2c:	18fb      	adds	r3, r7, r3
   29a2e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   29a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29a32:	0c1b      	lsrs	r3, r3, #16
   29a34:	b2db      	uxtb	r3, r3
   29a36:	2220      	movs	r2, #32
   29a38:	18ba      	adds	r2, r7, r2
   29a3a:	0011      	movs	r1, r2
   29a3c:	0018      	movs	r0, r3
   29a3e:	4b36      	ldr	r3, [pc, #216]	; (29b18 <usart_init+0x264>)
   29a40:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   29a42:	2347      	movs	r3, #71	; 0x47
   29a44:	18fb      	adds	r3, r7, r3
   29a46:	781a      	ldrb	r2, [r3, #0]
   29a48:	2347      	movs	r3, #71	; 0x47
   29a4a:	18fb      	adds	r3, r7, r3
   29a4c:	3201      	adds	r2, #1
   29a4e:	701a      	strb	r2, [r3, #0]
   29a50:	2347      	movs	r3, #71	; 0x47
   29a52:	18fb      	adds	r3, r7, r3
   29a54:	781b      	ldrb	r3, [r3, #0]
   29a56:	2b03      	cmp	r3, #3
   29a58:	d9cd      	bls.n	299f6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29a5a:	2300      	movs	r3, #0
   29a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29a5e:	e00a      	b.n	29a76 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   29a60:	68fa      	ldr	r2, [r7, #12]
   29a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29a64:	3302      	adds	r3, #2
   29a66:	009b      	lsls	r3, r3, #2
   29a68:	18d3      	adds	r3, r2, r3
   29a6a:	3304      	adds	r3, #4
   29a6c:	2200      	movs	r2, #0
   29a6e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29a72:	3301      	adds	r3, #1
   29a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   29a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29a78:	2b05      	cmp	r3, #5
   29a7a:	d9f1      	bls.n	29a60 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   29a7c:	68fb      	ldr	r3, [r7, #12]
   29a7e:	2200      	movs	r2, #0
   29a80:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   29a82:	68fb      	ldr	r3, [r7, #12]
   29a84:	2200      	movs	r2, #0
   29a86:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   29a88:	68fb      	ldr	r3, [r7, #12]
   29a8a:	2200      	movs	r2, #0
   29a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   29a8e:	68fb      	ldr	r3, [r7, #12]
   29a90:	2200      	movs	r2, #0
   29a92:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   29a94:	68fb      	ldr	r3, [r7, #12]
   29a96:	2230      	movs	r2, #48	; 0x30
   29a98:	2100      	movs	r1, #0
   29a9a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   29a9c:	68fb      	ldr	r3, [r7, #12]
   29a9e:	2231      	movs	r2, #49	; 0x31
   29aa0:	2100      	movs	r1, #0
   29aa2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29aa4:	68fb      	ldr	r3, [r7, #12]
   29aa6:	2232      	movs	r2, #50	; 0x32
   29aa8:	2100      	movs	r1, #0
   29aaa:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   29aac:	68fb      	ldr	r3, [r7, #12]
   29aae:	2233      	movs	r2, #51	; 0x33
   29ab0:	2100      	movs	r1, #0
   29ab2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29ab4:	68fb      	ldr	r3, [r7, #12]
   29ab6:	681b      	ldr	r3, [r3, #0]
   29ab8:	2227      	movs	r2, #39	; 0x27
   29aba:	18bc      	adds	r4, r7, r2
   29abc:	0018      	movs	r0, r3
   29abe:	4b0d      	ldr	r3, [pc, #52]	; (29af4 <usart_init+0x240>)
   29ac0:	4798      	blx	r3
   29ac2:	0003      	movs	r3, r0
   29ac4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29ac6:	4a15      	ldr	r2, [pc, #84]	; (29b1c <usart_init+0x268>)
   29ac8:	2327      	movs	r3, #39	; 0x27
   29aca:	18fb      	adds	r3, r7, r3
   29acc:	781b      	ldrb	r3, [r3, #0]
   29ace:	0011      	movs	r1, r2
   29ad0:	0018      	movs	r0, r3
   29ad2:	4b13      	ldr	r3, [pc, #76]	; (29b20 <usart_init+0x26c>)
   29ad4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   29ad6:	2327      	movs	r3, #39	; 0x27
   29ad8:	18fb      	adds	r3, r7, r3
   29ada:	781a      	ldrb	r2, [r3, #0]
   29adc:	4b11      	ldr	r3, [pc, #68]	; (29b24 <usart_init+0x270>)
   29ade:	0092      	lsls	r2, r2, #2
   29ae0:	68f9      	ldr	r1, [r7, #12]
   29ae2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   29ae4:	233b      	movs	r3, #59	; 0x3b
   29ae6:	18fb      	adds	r3, r7, r3
   29ae8:	781b      	ldrb	r3, [r3, #0]
}
   29aea:	0018      	movs	r0, r3
   29aec:	46bd      	mov	sp, r7
   29aee:	b013      	add	sp, #76	; 0x4c
   29af0:	bd90      	pop	{r4, r7, pc}
   29af2:	46c0      	nop			; (mov r8, r8)
   29af4:	00028381 	.word	0x00028381
   29af8:	000294f1 	.word	0x000294f1
   29afc:	000294d9 	.word	0x000294d9
   29b00:	0002ac11 	.word	0x0002ac11
   29b04:	0002ac55 	.word	0x0002ac55
   29b08:	00028139 	.word	0x00028139
   29b0c:	000295d9 	.word	0x000295d9
   29b10:	0002954d 	.word	0x0002954d
   29b14:	000281c5 	.word	0x000281c5
   29b18:	0002af71 	.word	0x0002af71
   29b1c:	00029d91 	.word	0x00029d91
   29b20:	000283e5 	.word	0x000283e5
   29b24:	20005c98 	.word	0x20005c98

00029b28 <system_interrupt_enter_critical_section>:
{
   29b28:	b580      	push	{r7, lr}
   29b2a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29b2c:	4b02      	ldr	r3, [pc, #8]	; (29b38 <system_interrupt_enter_critical_section+0x10>)
   29b2e:	4798      	blx	r3
}
   29b30:	46c0      	nop			; (mov r8, r8)
   29b32:	46bd      	mov	sp, r7
   29b34:	bd80      	pop	{r7, pc}
   29b36:	46c0      	nop			; (mov r8, r8)
   29b38:	00026f7d 	.word	0x00026f7d

00029b3c <system_interrupt_leave_critical_section>:
{
   29b3c:	b580      	push	{r7, lr}
   29b3e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29b40:	4b02      	ldr	r3, [pc, #8]	; (29b4c <system_interrupt_leave_critical_section+0x10>)
   29b42:	4798      	blx	r3
}
   29b44:	46c0      	nop			; (mov r8, r8)
   29b46:	46bd      	mov	sp, r7
   29b48:	bd80      	pop	{r7, pc}
   29b4a:	46c0      	nop			; (mov r8, r8)
   29b4c:	00026fd1 	.word	0x00026fd1

00029b50 <usart_is_syncing>:
{
   29b50:	b580      	push	{r7, lr}
   29b52:	b084      	sub	sp, #16
   29b54:	af00      	add	r7, sp, #0
   29b56:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29b58:	687b      	ldr	r3, [r7, #4]
   29b5a:	681b      	ldr	r3, [r3, #0]
   29b5c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   29b5e:	68fb      	ldr	r3, [r7, #12]
   29b60:	69db      	ldr	r3, [r3, #28]
   29b62:	1e5a      	subs	r2, r3, #1
   29b64:	4193      	sbcs	r3, r2
   29b66:	b2db      	uxtb	r3, r3
}
   29b68:	0018      	movs	r0, r3
   29b6a:	46bd      	mov	sp, r7
   29b6c:	b004      	add	sp, #16
   29b6e:	bd80      	pop	{r7, pc}

00029b70 <_usart_wait_for_sync>:
{
   29b70:	b580      	push	{r7, lr}
   29b72:	b082      	sub	sp, #8
   29b74:	af00      	add	r7, sp, #0
   29b76:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29b78:	46c0      	nop			; (mov r8, r8)
   29b7a:	687b      	ldr	r3, [r7, #4]
   29b7c:	0018      	movs	r0, r3
   29b7e:	4b04      	ldr	r3, [pc, #16]	; (29b90 <_usart_wait_for_sync+0x20>)
   29b80:	4798      	blx	r3
   29b82:	1e03      	subs	r3, r0, #0
   29b84:	d1f9      	bne.n	29b7a <_usart_wait_for_sync+0xa>
}
   29b86:	46c0      	nop			; (mov r8, r8)
   29b88:	46bd      	mov	sp, r7
   29b8a:	b002      	add	sp, #8
   29b8c:	bd80      	pop	{r7, pc}
   29b8e:	46c0      	nop			; (mov r8, r8)
   29b90:	00029b51 	.word	0x00029b51

00029b94 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29b94:	b580      	push	{r7, lr}
   29b96:	b086      	sub	sp, #24
   29b98:	af00      	add	r7, sp, #0
   29b9a:	60f8      	str	r0, [r7, #12]
   29b9c:	60b9      	str	r1, [r7, #8]
   29b9e:	1dbb      	adds	r3, r7, #6
   29ba0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29ba2:	68fb      	ldr	r3, [r7, #12]
   29ba4:	681b      	ldr	r3, [r3, #0]
   29ba6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29ba8:	4b0f      	ldr	r3, [pc, #60]	; (29be8 <_usart_write_buffer+0x54>)
   29baa:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29bac:	68fb      	ldr	r3, [r7, #12]
   29bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29bb0:	b29b      	uxth	r3, r3
   29bb2:	2b00      	cmp	r3, #0
   29bb4:	d003      	beq.n	29bbe <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29bb6:	4b0d      	ldr	r3, [pc, #52]	; (29bec <_usart_write_buffer+0x58>)
   29bb8:	4798      	blx	r3
		return STATUS_BUSY;
   29bba:	2305      	movs	r3, #5
   29bbc:	e010      	b.n	29be0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   29bbe:	68fb      	ldr	r3, [r7, #12]
   29bc0:	1dba      	adds	r2, r7, #6
   29bc2:	8812      	ldrh	r2, [r2, #0]
   29bc4:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29bc6:	4b09      	ldr	r3, [pc, #36]	; (29bec <_usart_write_buffer+0x58>)
   29bc8:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   29bca:	68fb      	ldr	r3, [r7, #12]
   29bcc:	68ba      	ldr	r2, [r7, #8]
   29bce:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   29bd0:	68fb      	ldr	r3, [r7, #12]
   29bd2:	2233      	movs	r2, #51	; 0x33
   29bd4:	2105      	movs	r1, #5
   29bd6:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   29bd8:	697b      	ldr	r3, [r7, #20]
   29bda:	2201      	movs	r2, #1
   29bdc:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   29bde:	2300      	movs	r3, #0
}
   29be0:	0018      	movs	r0, r3
   29be2:	46bd      	mov	sp, r7
   29be4:	b006      	add	sp, #24
   29be6:	bd80      	pop	{r7, pc}
   29be8:	00029b29 	.word	0x00029b29
   29bec:	00029b3d 	.word	0x00029b3d

00029bf0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29bf0:	b580      	push	{r7, lr}
   29bf2:	b086      	sub	sp, #24
   29bf4:	af00      	add	r7, sp, #0
   29bf6:	60f8      	str	r0, [r7, #12]
   29bf8:	60b9      	str	r1, [r7, #8]
   29bfa:	1dbb      	adds	r3, r7, #6
   29bfc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29bfe:	68fb      	ldr	r3, [r7, #12]
   29c00:	681b      	ldr	r3, [r3, #0]
   29c02:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29c04:	4b16      	ldr	r3, [pc, #88]	; (29c60 <_usart_read_buffer+0x70>)
   29c06:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   29c08:	68fb      	ldr	r3, [r7, #12]
   29c0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29c0c:	b29b      	uxth	r3, r3
   29c0e:	2b00      	cmp	r3, #0
   29c10:	d003      	beq.n	29c1a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29c12:	4b14      	ldr	r3, [pc, #80]	; (29c64 <_usart_read_buffer+0x74>)
   29c14:	4798      	blx	r3
		return STATUS_BUSY;
   29c16:	2305      	movs	r3, #5
   29c18:	e01e      	b.n	29c58 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   29c1a:	68fb      	ldr	r3, [r7, #12]
   29c1c:	1dba      	adds	r2, r7, #6
   29c1e:	8812      	ldrh	r2, [r2, #0]
   29c20:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   29c22:	4b10      	ldr	r3, [pc, #64]	; (29c64 <_usart_read_buffer+0x74>)
   29c24:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29c26:	68fb      	ldr	r3, [r7, #12]
   29c28:	68ba      	ldr	r2, [r7, #8]
   29c2a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   29c2c:	68fb      	ldr	r3, [r7, #12]
   29c2e:	2232      	movs	r2, #50	; 0x32
   29c30:	2105      	movs	r1, #5
   29c32:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29c34:	697b      	ldr	r3, [r7, #20]
   29c36:	2204      	movs	r2, #4
   29c38:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29c3a:	68fb      	ldr	r3, [r7, #12]
   29c3c:	7a1b      	ldrb	r3, [r3, #8]
   29c3e:	2b00      	cmp	r3, #0
   29c40:	d002      	beq.n	29c48 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   29c42:	697b      	ldr	r3, [r7, #20]
   29c44:	2220      	movs	r2, #32
   29c46:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29c48:	68fb      	ldr	r3, [r7, #12]
   29c4a:	7a5b      	ldrb	r3, [r3, #9]
   29c4c:	2b00      	cmp	r3, #0
   29c4e:	d002      	beq.n	29c56 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   29c50:	697b      	ldr	r3, [r7, #20]
   29c52:	2208      	movs	r2, #8
   29c54:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29c56:	2300      	movs	r3, #0
}
   29c58:	0018      	movs	r0, r3
   29c5a:	46bd      	mov	sp, r7
   29c5c:	b006      	add	sp, #24
   29c5e:	bd80      	pop	{r7, pc}
   29c60:	00029b29 	.word	0x00029b29
   29c64:	00029b3d 	.word	0x00029b3d

00029c68 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29c68:	b580      	push	{r7, lr}
   29c6a:	b084      	sub	sp, #16
   29c6c:	af00      	add	r7, sp, #0
   29c6e:	60f8      	str	r0, [r7, #12]
   29c70:	60b9      	str	r1, [r7, #8]
   29c72:	1dfb      	adds	r3, r7, #7
   29c74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29c76:	1dfb      	adds	r3, r7, #7
   29c78:	781b      	ldrb	r3, [r3, #0]
   29c7a:	68fa      	ldr	r2, [r7, #12]
   29c7c:	3302      	adds	r3, #2
   29c7e:	009b      	lsls	r3, r3, #2
   29c80:	18d3      	adds	r3, r2, r3
   29c82:	3304      	adds	r3, #4
   29c84:	68ba      	ldr	r2, [r7, #8]
   29c86:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29c88:	68fb      	ldr	r3, [r7, #12]
   29c8a:	2230      	movs	r2, #48	; 0x30
   29c8c:	5c9b      	ldrb	r3, [r3, r2]
   29c8e:	b25a      	sxtb	r2, r3
   29c90:	1dfb      	adds	r3, r7, #7
   29c92:	781b      	ldrb	r3, [r3, #0]
   29c94:	2101      	movs	r1, #1
   29c96:	4099      	lsls	r1, r3
   29c98:	000b      	movs	r3, r1
   29c9a:	b25b      	sxtb	r3, r3
   29c9c:	4313      	orrs	r3, r2
   29c9e:	b25b      	sxtb	r3, r3
   29ca0:	b2d9      	uxtb	r1, r3
   29ca2:	68fb      	ldr	r3, [r7, #12]
   29ca4:	2230      	movs	r2, #48	; 0x30
   29ca6:	5499      	strb	r1, [r3, r2]
}
   29ca8:	46c0      	nop			; (mov r8, r8)
   29caa:	46bd      	mov	sp, r7
   29cac:	b004      	add	sp, #16
   29cae:	bd80      	pop	{r7, pc}

00029cb0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29cb0:	b580      	push	{r7, lr}
   29cb2:	b084      	sub	sp, #16
   29cb4:	af00      	add	r7, sp, #0
   29cb6:	60f8      	str	r0, [r7, #12]
   29cb8:	60b9      	str	r1, [r7, #8]
   29cba:	1dbb      	adds	r3, r7, #6
   29cbc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   29cbe:	1dbb      	adds	r3, r7, #6
   29cc0:	881b      	ldrh	r3, [r3, #0]
   29cc2:	2b00      	cmp	r3, #0
   29cc4:	d101      	bne.n	29cca <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29cc6:	2317      	movs	r3, #23
   29cc8:	e010      	b.n	29cec <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   29cca:	68fb      	ldr	r3, [r7, #12]
   29ccc:	79db      	ldrb	r3, [r3, #7]
   29cce:	2201      	movs	r2, #1
   29cd0:	4053      	eors	r3, r2
   29cd2:	b2db      	uxtb	r3, r3
   29cd4:	2b00      	cmp	r3, #0
   29cd6:	d001      	beq.n	29cdc <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29cd8:	231c      	movs	r3, #28
   29cda:	e007      	b.n	29cec <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   29cdc:	1dbb      	adds	r3, r7, #6
   29cde:	881a      	ldrh	r2, [r3, #0]
   29ce0:	68b9      	ldr	r1, [r7, #8]
   29ce2:	68fb      	ldr	r3, [r7, #12]
   29ce4:	0018      	movs	r0, r3
   29ce6:	4b03      	ldr	r3, [pc, #12]	; (29cf4 <usart_write_buffer_job+0x44>)
   29ce8:	4798      	blx	r3
   29cea:	0003      	movs	r3, r0
}
   29cec:	0018      	movs	r0, r3
   29cee:	46bd      	mov	sp, r7
   29cf0:	b004      	add	sp, #16
   29cf2:	bd80      	pop	{r7, pc}
   29cf4:	00029b95 	.word	0x00029b95

00029cf8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29cf8:	b580      	push	{r7, lr}
   29cfa:	b084      	sub	sp, #16
   29cfc:	af00      	add	r7, sp, #0
   29cfe:	60f8      	str	r0, [r7, #12]
   29d00:	60b9      	str	r1, [r7, #8]
   29d02:	1dbb      	adds	r3, r7, #6
   29d04:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29d06:	1dbb      	adds	r3, r7, #6
   29d08:	881b      	ldrh	r3, [r3, #0]
   29d0a:	2b00      	cmp	r3, #0
   29d0c:	d101      	bne.n	29d12 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29d0e:	2317      	movs	r3, #23
   29d10:	e010      	b.n	29d34 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29d12:	68fb      	ldr	r3, [r7, #12]
   29d14:	799b      	ldrb	r3, [r3, #6]
   29d16:	2201      	movs	r2, #1
   29d18:	4053      	eors	r3, r2
   29d1a:	b2db      	uxtb	r3, r3
   29d1c:	2b00      	cmp	r3, #0
   29d1e:	d001      	beq.n	29d24 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29d20:	231c      	movs	r3, #28
   29d22:	e007      	b.n	29d34 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29d24:	1dbb      	adds	r3, r7, #6
   29d26:	881a      	ldrh	r2, [r3, #0]
   29d28:	68b9      	ldr	r1, [r7, #8]
   29d2a:	68fb      	ldr	r3, [r7, #12]
   29d2c:	0018      	movs	r0, r3
   29d2e:	4b03      	ldr	r3, [pc, #12]	; (29d3c <usart_read_buffer_job+0x44>)
   29d30:	4798      	blx	r3
   29d32:	0003      	movs	r3, r0
}
   29d34:	0018      	movs	r0, r3
   29d36:	46bd      	mov	sp, r7
   29d38:	b004      	add	sp, #16
   29d3a:	bd80      	pop	{r7, pc}
   29d3c:	00029bf1 	.word	0x00029bf1

00029d40 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29d40:	b580      	push	{r7, lr}
   29d42:	b084      	sub	sp, #16
   29d44:	af00      	add	r7, sp, #0
   29d46:	6078      	str	r0, [r7, #4]
   29d48:	000a      	movs	r2, r1
   29d4a:	1cfb      	adds	r3, r7, #3
   29d4c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29d4e:	1cfb      	adds	r3, r7, #3
   29d50:	781b      	ldrb	r3, [r3, #0]
   29d52:	2b00      	cmp	r3, #0
   29d54:	d002      	beq.n	29d5c <usart_get_job_status+0x1c>
   29d56:	2b01      	cmp	r3, #1
   29d58:	d007      	beq.n	29d6a <usart_get_job_status+0x2a>
   29d5a:	e00d      	b.n	29d78 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29d5c:	230f      	movs	r3, #15
   29d5e:	18fb      	adds	r3, r7, r3
   29d60:	687a      	ldr	r2, [r7, #4]
   29d62:	2132      	movs	r1, #50	; 0x32
   29d64:	5c52      	ldrb	r2, [r2, r1]
   29d66:	701a      	strb	r2, [r3, #0]
			break;
   29d68:	e00b      	b.n	29d82 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29d6a:	230f      	movs	r3, #15
   29d6c:	18fb      	adds	r3, r7, r3
   29d6e:	687a      	ldr	r2, [r7, #4]
   29d70:	2133      	movs	r1, #51	; 0x33
   29d72:	5c52      	ldrb	r2, [r2, r1]
   29d74:	701a      	strb	r2, [r3, #0]
			break;
   29d76:	e004      	b.n	29d82 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29d78:	230f      	movs	r3, #15
   29d7a:	18fb      	adds	r3, r7, r3
   29d7c:	2217      	movs	r2, #23
   29d7e:	701a      	strb	r2, [r3, #0]
			break;
   29d80:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29d82:	230f      	movs	r3, #15
   29d84:	18fb      	adds	r3, r7, r3
   29d86:	781b      	ldrb	r3, [r3, #0]
}
   29d88:	0018      	movs	r0, r3
   29d8a:	46bd      	mov	sp, r7
   29d8c:	b004      	add	sp, #16
   29d8e:	bd80      	pop	{r7, pc}

00029d90 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29d90:	b580      	push	{r7, lr}
   29d92:	b088      	sub	sp, #32
   29d94:	af00      	add	r7, sp, #0
   29d96:	0002      	movs	r2, r0
   29d98:	1dfb      	adds	r3, r7, #7
   29d9a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29d9c:	1dfb      	adds	r3, r7, #7
   29d9e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29da0:	4ba3      	ldr	r3, [pc, #652]	; (2a030 <_usart_interrupt_handler+0x2a0>)
   29da2:	0092      	lsls	r2, r2, #2
   29da4:	58d3      	ldr	r3, [r2, r3]
   29da6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29da8:	69bb      	ldr	r3, [r7, #24]
   29daa:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29dac:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29dae:	69bb      	ldr	r3, [r7, #24]
   29db0:	0018      	movs	r0, r3
   29db2:	4ba0      	ldr	r3, [pc, #640]	; (2a034 <_usart_interrupt_handler+0x2a4>)
   29db4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29db6:	697b      	ldr	r3, [r7, #20]
   29db8:	7e1b      	ldrb	r3, [r3, #24]
   29dba:	b2da      	uxtb	r2, r3
   29dbc:	2312      	movs	r3, #18
   29dbe:	18fb      	adds	r3, r7, r3
   29dc0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29dc2:	697b      	ldr	r3, [r7, #20]
   29dc4:	7d9b      	ldrb	r3, [r3, #22]
   29dc6:	b2db      	uxtb	r3, r3
   29dc8:	b29a      	uxth	r2, r3
   29dca:	2312      	movs	r3, #18
   29dcc:	18fb      	adds	r3, r7, r3
   29dce:	2112      	movs	r1, #18
   29dd0:	1879      	adds	r1, r7, r1
   29dd2:	8809      	ldrh	r1, [r1, #0]
   29dd4:	400a      	ands	r2, r1
   29dd6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29dd8:	69bb      	ldr	r3, [r7, #24]
   29dda:	2230      	movs	r2, #48	; 0x30
   29ddc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   29dde:	69ba      	ldr	r2, [r7, #24]
   29de0:	2131      	movs	r1, #49	; 0x31
   29de2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29de4:	4013      	ands	r3, r2
   29de6:	b2da      	uxtb	r2, r3
   29de8:	2310      	movs	r3, #16
   29dea:	18fb      	adds	r3, r7, r3
   29dec:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   29dee:	2312      	movs	r3, #18
   29df0:	18fb      	adds	r3, r7, r3
   29df2:	881b      	ldrh	r3, [r3, #0]
   29df4:	2201      	movs	r2, #1
   29df6:	4013      	ands	r3, r2
   29df8:	d044      	beq.n	29e84 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   29dfa:	69bb      	ldr	r3, [r7, #24]
   29dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29dfe:	b29b      	uxth	r3, r3
   29e00:	2b00      	cmp	r3, #0
   29e02:	d03c      	beq.n	29e7e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   29e04:	69bb      	ldr	r3, [r7, #24]
   29e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29e08:	781b      	ldrb	r3, [r3, #0]
   29e0a:	b2da      	uxtb	r2, r3
   29e0c:	231c      	movs	r3, #28
   29e0e:	18fb      	adds	r3, r7, r3
   29e10:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   29e12:	69bb      	ldr	r3, [r7, #24]
   29e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29e16:	1c5a      	adds	r2, r3, #1
   29e18:	69bb      	ldr	r3, [r7, #24]
   29e1a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29e1c:	69bb      	ldr	r3, [r7, #24]
   29e1e:	795b      	ldrb	r3, [r3, #5]
   29e20:	2b01      	cmp	r3, #1
   29e22:	d113      	bne.n	29e4c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29e24:	69bb      	ldr	r3, [r7, #24]
   29e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29e28:	781b      	ldrb	r3, [r3, #0]
   29e2a:	b2db      	uxtb	r3, r3
   29e2c:	021b      	lsls	r3, r3, #8
   29e2e:	b21a      	sxth	r2, r3
   29e30:	231c      	movs	r3, #28
   29e32:	18fb      	adds	r3, r7, r3
   29e34:	2100      	movs	r1, #0
   29e36:	5e5b      	ldrsh	r3, [r3, r1]
   29e38:	4313      	orrs	r3, r2
   29e3a:	b21a      	sxth	r2, r3
   29e3c:	231c      	movs	r3, #28
   29e3e:	18fb      	adds	r3, r7, r3
   29e40:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29e42:	69bb      	ldr	r3, [r7, #24]
   29e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29e46:	1c5a      	adds	r2, r3, #1
   29e48:	69bb      	ldr	r3, [r7, #24]
   29e4a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29e4c:	231c      	movs	r3, #28
   29e4e:	18fb      	adds	r3, r7, r3
   29e50:	881b      	ldrh	r3, [r3, #0]
   29e52:	05db      	lsls	r3, r3, #23
   29e54:	0ddb      	lsrs	r3, r3, #23
   29e56:	b29a      	uxth	r2, r3
   29e58:	697b      	ldr	r3, [r7, #20]
   29e5a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29e5c:	69bb      	ldr	r3, [r7, #24]
   29e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29e60:	b29b      	uxth	r3, r3
   29e62:	3b01      	subs	r3, #1
   29e64:	b29b      	uxth	r3, r3
   29e66:	69ba      	ldr	r2, [r7, #24]
   29e68:	1c19      	adds	r1, r3, #0
   29e6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29e6c:	2b00      	cmp	r3, #0
   29e6e:	d109      	bne.n	29e84 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29e70:	697b      	ldr	r3, [r7, #20]
   29e72:	2201      	movs	r2, #1
   29e74:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29e76:	697b      	ldr	r3, [r7, #20]
   29e78:	2202      	movs	r2, #2
   29e7a:	759a      	strb	r2, [r3, #22]
   29e7c:	e002      	b.n	29e84 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29e7e:	697b      	ldr	r3, [r7, #20]
   29e80:	2201      	movs	r2, #1
   29e82:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29e84:	2312      	movs	r3, #18
   29e86:	18fb      	adds	r3, r7, r3
   29e88:	881b      	ldrh	r3, [r3, #0]
   29e8a:	2202      	movs	r2, #2
   29e8c:	4013      	ands	r3, r2
   29e8e:	d011      	beq.n	29eb4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29e90:	697b      	ldr	r3, [r7, #20]
   29e92:	2202      	movs	r2, #2
   29e94:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29e96:	69bb      	ldr	r3, [r7, #24]
   29e98:	2233      	movs	r2, #51	; 0x33
   29e9a:	2100      	movs	r1, #0
   29e9c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   29e9e:	2310      	movs	r3, #16
   29ea0:	18fb      	adds	r3, r7, r3
   29ea2:	881b      	ldrh	r3, [r3, #0]
   29ea4:	2201      	movs	r2, #1
   29ea6:	4013      	ands	r3, r2
   29ea8:	d004      	beq.n	29eb4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29eaa:	69bb      	ldr	r3, [r7, #24]
   29eac:	68db      	ldr	r3, [r3, #12]
   29eae:	69ba      	ldr	r2, [r7, #24]
   29eb0:	0010      	movs	r0, r2
   29eb2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29eb4:	2312      	movs	r3, #18
   29eb6:	18fb      	adds	r3, r7, r3
   29eb8:	881b      	ldrh	r3, [r3, #0]
   29eba:	2204      	movs	r2, #4
   29ebc:	4013      	ands	r3, r2
   29ebe:	d100      	bne.n	29ec2 <_usart_interrupt_handler+0x132>
   29ec0:	e0bd      	b.n	2a03e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   29ec2:	69bb      	ldr	r3, [r7, #24]
   29ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29ec6:	b29b      	uxth	r3, r3
   29ec8:	2b00      	cmp	r3, #0
   29eca:	d100      	bne.n	29ece <_usart_interrupt_handler+0x13e>
   29ecc:	e0b4      	b.n	2a038 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   29ece:	697b      	ldr	r3, [r7, #20]
   29ed0:	8b5b      	ldrh	r3, [r3, #26]
   29ed2:	b29b      	uxth	r3, r3
   29ed4:	b2da      	uxtb	r2, r3
   29ed6:	231f      	movs	r3, #31
   29ed8:	18fb      	adds	r3, r7, r3
   29eda:	213f      	movs	r1, #63	; 0x3f
   29edc:	400a      	ands	r2, r1
   29ede:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   29ee0:	231f      	movs	r3, #31
   29ee2:	18fb      	adds	r3, r7, r3
   29ee4:	781b      	ldrb	r3, [r3, #0]
   29ee6:	2208      	movs	r2, #8
   29ee8:	4013      	ands	r3, r2
   29eea:	d007      	beq.n	29efc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   29eec:	231f      	movs	r3, #31
   29eee:	18fb      	adds	r3, r7, r3
   29ef0:	221f      	movs	r2, #31
   29ef2:	18ba      	adds	r2, r7, r2
   29ef4:	7812      	ldrb	r2, [r2, #0]
   29ef6:	2108      	movs	r1, #8
   29ef8:	438a      	bics	r2, r1
   29efa:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   29efc:	231f      	movs	r3, #31
   29efe:	18fb      	adds	r3, r7, r3
   29f00:	781b      	ldrb	r3, [r3, #0]
   29f02:	2b00      	cmp	r3, #0
   29f04:	d050      	beq.n	29fa8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29f06:	231f      	movs	r3, #31
   29f08:	18fb      	adds	r3, r7, r3
   29f0a:	781b      	ldrb	r3, [r3, #0]
   29f0c:	2202      	movs	r2, #2
   29f0e:	4013      	ands	r3, r2
   29f10:	d007      	beq.n	29f22 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   29f12:	69bb      	ldr	r3, [r7, #24]
   29f14:	2232      	movs	r2, #50	; 0x32
   29f16:	211a      	movs	r1, #26
   29f18:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29f1a:	697b      	ldr	r3, [r7, #20]
   29f1c:	2202      	movs	r2, #2
   29f1e:	835a      	strh	r2, [r3, #26]
   29f20:	e036      	b.n	29f90 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29f22:	231f      	movs	r3, #31
   29f24:	18fb      	adds	r3, r7, r3
   29f26:	781b      	ldrb	r3, [r3, #0]
   29f28:	2204      	movs	r2, #4
   29f2a:	4013      	ands	r3, r2
   29f2c:	d007      	beq.n	29f3e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   29f2e:	69bb      	ldr	r3, [r7, #24]
   29f30:	2232      	movs	r2, #50	; 0x32
   29f32:	211e      	movs	r1, #30
   29f34:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29f36:	697b      	ldr	r3, [r7, #20]
   29f38:	2204      	movs	r2, #4
   29f3a:	835a      	strh	r2, [r3, #26]
   29f3c:	e028      	b.n	29f90 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   29f3e:	231f      	movs	r3, #31
   29f40:	18fb      	adds	r3, r7, r3
   29f42:	781b      	ldrb	r3, [r3, #0]
   29f44:	2201      	movs	r2, #1
   29f46:	4013      	ands	r3, r2
   29f48:	d007      	beq.n	29f5a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29f4a:	69bb      	ldr	r3, [r7, #24]
   29f4c:	2232      	movs	r2, #50	; 0x32
   29f4e:	2113      	movs	r1, #19
   29f50:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29f52:	697b      	ldr	r3, [r7, #20]
   29f54:	2201      	movs	r2, #1
   29f56:	835a      	strh	r2, [r3, #26]
   29f58:	e01a      	b.n	29f90 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29f5a:	231f      	movs	r3, #31
   29f5c:	18fb      	adds	r3, r7, r3
   29f5e:	781b      	ldrb	r3, [r3, #0]
   29f60:	2210      	movs	r2, #16
   29f62:	4013      	ands	r3, r2
   29f64:	d007      	beq.n	29f76 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29f66:	69bb      	ldr	r3, [r7, #24]
   29f68:	2232      	movs	r2, #50	; 0x32
   29f6a:	2142      	movs	r1, #66	; 0x42
   29f6c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   29f6e:	697b      	ldr	r3, [r7, #20]
   29f70:	2210      	movs	r2, #16
   29f72:	835a      	strh	r2, [r3, #26]
   29f74:	e00c      	b.n	29f90 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29f76:	231f      	movs	r3, #31
   29f78:	18fb      	adds	r3, r7, r3
   29f7a:	781b      	ldrb	r3, [r3, #0]
   29f7c:	2220      	movs	r2, #32
   29f7e:	4013      	ands	r3, r2
   29f80:	d006      	beq.n	29f90 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   29f82:	69bb      	ldr	r3, [r7, #24]
   29f84:	2232      	movs	r2, #50	; 0x32
   29f86:	2141      	movs	r1, #65	; 0x41
   29f88:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29f8a:	697b      	ldr	r3, [r7, #20]
   29f8c:	2220      	movs	r2, #32
   29f8e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29f90:	2310      	movs	r3, #16
   29f92:	18fb      	adds	r3, r7, r3
   29f94:	881b      	ldrh	r3, [r3, #0]
   29f96:	2204      	movs	r2, #4
   29f98:	4013      	ands	r3, r2
				if (callback_status
   29f9a:	d050      	beq.n	2a03e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29f9c:	69bb      	ldr	r3, [r7, #24]
   29f9e:	695b      	ldr	r3, [r3, #20]
   29fa0:	69ba      	ldr	r2, [r7, #24]
   29fa2:	0010      	movs	r0, r2
   29fa4:	4798      	blx	r3
   29fa6:	e04a      	b.n	2a03e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29fa8:	697b      	ldr	r3, [r7, #20]
   29faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29fac:	b29a      	uxth	r2, r3
   29fae:	230e      	movs	r3, #14
   29fb0:	18fb      	adds	r3, r7, r3
   29fb2:	05d2      	lsls	r2, r2, #23
   29fb4:	0dd2      	lsrs	r2, r2, #23
   29fb6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29fb8:	69bb      	ldr	r3, [r7, #24]
   29fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29fbc:	220e      	movs	r2, #14
   29fbe:	18ba      	adds	r2, r7, r2
   29fc0:	8812      	ldrh	r2, [r2, #0]
   29fc2:	b2d2      	uxtb	r2, r2
   29fc4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29fc6:	69bb      	ldr	r3, [r7, #24]
   29fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29fca:	1c5a      	adds	r2, r3, #1
   29fcc:	69bb      	ldr	r3, [r7, #24]
   29fce:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29fd0:	69bb      	ldr	r3, [r7, #24]
   29fd2:	795b      	ldrb	r3, [r3, #5]
   29fd4:	2b01      	cmp	r3, #1
   29fd6:	d10d      	bne.n	29ff4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   29fd8:	69bb      	ldr	r3, [r7, #24]
   29fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29fdc:	220e      	movs	r2, #14
   29fde:	18ba      	adds	r2, r7, r2
   29fe0:	8812      	ldrh	r2, [r2, #0]
   29fe2:	0a12      	lsrs	r2, r2, #8
   29fe4:	b292      	uxth	r2, r2
   29fe6:	b2d2      	uxtb	r2, r2
   29fe8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   29fea:	69bb      	ldr	r3, [r7, #24]
   29fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29fee:	1c5a      	adds	r2, r3, #1
   29ff0:	69bb      	ldr	r3, [r7, #24]
   29ff2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   29ff4:	69bb      	ldr	r3, [r7, #24]
   29ff6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29ff8:	b29b      	uxth	r3, r3
   29ffa:	3b01      	subs	r3, #1
   29ffc:	b29b      	uxth	r3, r3
   29ffe:	69ba      	ldr	r2, [r7, #24]
   2a000:	1c19      	adds	r1, r3, #0
   2a002:	8591      	strh	r1, [r2, #44]	; 0x2c
   2a004:	2b00      	cmp	r3, #0
   2a006:	d11a      	bne.n	2a03e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2a008:	697b      	ldr	r3, [r7, #20]
   2a00a:	2204      	movs	r2, #4
   2a00c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2a00e:	69bb      	ldr	r3, [r7, #24]
   2a010:	2232      	movs	r2, #50	; 0x32
   2a012:	2100      	movs	r1, #0
   2a014:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2a016:	2310      	movs	r3, #16
   2a018:	18fb      	adds	r3, r7, r3
   2a01a:	881b      	ldrh	r3, [r3, #0]
   2a01c:	2202      	movs	r2, #2
   2a01e:	4013      	ands	r3, r2
					if (callback_status
   2a020:	d00d      	beq.n	2a03e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2a022:	69bb      	ldr	r3, [r7, #24]
   2a024:	691b      	ldr	r3, [r3, #16]
   2a026:	69ba      	ldr	r2, [r7, #24]
   2a028:	0010      	movs	r0, r2
   2a02a:	4798      	blx	r3
   2a02c:	e007      	b.n	2a03e <_usart_interrupt_handler+0x2ae>
   2a02e:	46c0      	nop			; (mov r8, r8)
   2a030:	20005c98 	.word	0x20005c98
   2a034:	00029b71 	.word	0x00029b71
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2a038:	697b      	ldr	r3, [r7, #20]
   2a03a:	2204      	movs	r2, #4
   2a03c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2a03e:	2312      	movs	r3, #18
   2a040:	18fb      	adds	r3, r7, r3
   2a042:	881b      	ldrh	r3, [r3, #0]
   2a044:	2210      	movs	r2, #16
   2a046:	4013      	ands	r3, r2
   2a048:	d010      	beq.n	2a06c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2a04a:	697b      	ldr	r3, [r7, #20]
   2a04c:	2210      	movs	r2, #16
   2a04e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2a050:	697b      	ldr	r3, [r7, #20]
   2a052:	2210      	movs	r2, #16
   2a054:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2a056:	2310      	movs	r3, #16
   2a058:	18fb      	adds	r3, r7, r3
   2a05a:	881b      	ldrh	r3, [r3, #0]
   2a05c:	2210      	movs	r2, #16
   2a05e:	4013      	ands	r3, r2
   2a060:	d004      	beq.n	2a06c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2a062:	69bb      	ldr	r3, [r7, #24]
   2a064:	69db      	ldr	r3, [r3, #28]
   2a066:	69ba      	ldr	r2, [r7, #24]
   2a068:	0010      	movs	r0, r2
   2a06a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2a06c:	2312      	movs	r3, #18
   2a06e:	18fb      	adds	r3, r7, r3
   2a070:	881b      	ldrh	r3, [r3, #0]
   2a072:	2220      	movs	r2, #32
   2a074:	4013      	ands	r3, r2
   2a076:	d010      	beq.n	2a09a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2a078:	697b      	ldr	r3, [r7, #20]
   2a07a:	2220      	movs	r2, #32
   2a07c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2a07e:	697b      	ldr	r3, [r7, #20]
   2a080:	2220      	movs	r2, #32
   2a082:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2a084:	2310      	movs	r3, #16
   2a086:	18fb      	adds	r3, r7, r3
   2a088:	881b      	ldrh	r3, [r3, #0]
   2a08a:	2208      	movs	r2, #8
   2a08c:	4013      	ands	r3, r2
   2a08e:	d004      	beq.n	2a09a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2a090:	69bb      	ldr	r3, [r7, #24]
   2a092:	699b      	ldr	r3, [r3, #24]
   2a094:	69ba      	ldr	r2, [r7, #24]
   2a096:	0010      	movs	r0, r2
   2a098:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2a09a:	2312      	movs	r3, #18
   2a09c:	18fb      	adds	r3, r7, r3
   2a09e:	881b      	ldrh	r3, [r3, #0]
   2a0a0:	2208      	movs	r2, #8
   2a0a2:	4013      	ands	r3, r2
   2a0a4:	d010      	beq.n	2a0c8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2a0a6:	697b      	ldr	r3, [r7, #20]
   2a0a8:	2208      	movs	r2, #8
   2a0aa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2a0ac:	697b      	ldr	r3, [r7, #20]
   2a0ae:	2208      	movs	r2, #8
   2a0b0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2a0b2:	2310      	movs	r3, #16
   2a0b4:	18fb      	adds	r3, r7, r3
   2a0b6:	881b      	ldrh	r3, [r3, #0]
   2a0b8:	2220      	movs	r2, #32
   2a0ba:	4013      	ands	r3, r2
   2a0bc:	d004      	beq.n	2a0c8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2a0be:	69bb      	ldr	r3, [r7, #24]
   2a0c0:	6a1b      	ldr	r3, [r3, #32]
   2a0c2:	69ba      	ldr	r2, [r7, #24]
   2a0c4:	0010      	movs	r0, r2
   2a0c6:	4798      	blx	r3
		}
	}
#endif
}
   2a0c8:	46c0      	nop			; (mov r8, r8)
   2a0ca:	46bd      	mov	sp, r7
   2a0cc:	b008      	add	sp, #32
   2a0ce:	bd80      	pop	{r7, pc}

0002a0d0 <system_gclk_gen_get_config_defaults>:
{
   2a0d0:	b580      	push	{r7, lr}
   2a0d2:	b082      	sub	sp, #8
   2a0d4:	af00      	add	r7, sp, #0
   2a0d6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2a0d8:	687b      	ldr	r3, [r7, #4]
   2a0da:	2201      	movs	r2, #1
   2a0dc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2a0de:	687b      	ldr	r3, [r7, #4]
   2a0e0:	2200      	movs	r2, #0
   2a0e2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2a0e4:	687b      	ldr	r3, [r7, #4]
   2a0e6:	2206      	movs	r2, #6
   2a0e8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2a0ea:	687b      	ldr	r3, [r7, #4]
   2a0ec:	2200      	movs	r2, #0
   2a0ee:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2a0f0:	687b      	ldr	r3, [r7, #4]
   2a0f2:	2200      	movs	r2, #0
   2a0f4:	725a      	strb	r2, [r3, #9]
}
   2a0f6:	46c0      	nop			; (mov r8, r8)
   2a0f8:	46bd      	mov	sp, r7
   2a0fa:	b002      	add	sp, #8
   2a0fc:	bd80      	pop	{r7, pc}

0002a0fe <system_gclk_chan_get_config_defaults>:
{
   2a0fe:	b580      	push	{r7, lr}
   2a100:	b082      	sub	sp, #8
   2a102:	af00      	add	r7, sp, #0
   2a104:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a106:	687b      	ldr	r3, [r7, #4]
   2a108:	2200      	movs	r2, #0
   2a10a:	701a      	strb	r2, [r3, #0]
}
   2a10c:	46c0      	nop			; (mov r8, r8)
   2a10e:	46bd      	mov	sp, r7
   2a110:	b002      	add	sp, #8
   2a112:	bd80      	pop	{r7, pc}

0002a114 <system_clock_source_osc8m_get_config_defaults>:
{
   2a114:	b580      	push	{r7, lr}
   2a116:	b082      	sub	sp, #8
   2a118:	af00      	add	r7, sp, #0
   2a11a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2a11c:	687b      	ldr	r3, [r7, #4]
   2a11e:	2203      	movs	r2, #3
   2a120:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2a122:	687b      	ldr	r3, [r7, #4]
   2a124:	2200      	movs	r2, #0
   2a126:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2a128:	687b      	ldr	r3, [r7, #4]
   2a12a:	2201      	movs	r2, #1
   2a12c:	709a      	strb	r2, [r3, #2]
}
   2a12e:	46c0      	nop			; (mov r8, r8)
   2a130:	46bd      	mov	sp, r7
   2a132:	b002      	add	sp, #8
   2a134:	bd80      	pop	{r7, pc}
	...

0002a138 <system_cpu_clock_set_divider>:
{
   2a138:	b580      	push	{r7, lr}
   2a13a:	b082      	sub	sp, #8
   2a13c:	af00      	add	r7, sp, #0
   2a13e:	0002      	movs	r2, r0
   2a140:	1dfb      	adds	r3, r7, #7
   2a142:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2a144:	4a03      	ldr	r2, [pc, #12]	; (2a154 <system_cpu_clock_set_divider+0x1c>)
   2a146:	1dfb      	adds	r3, r7, #7
   2a148:	781b      	ldrb	r3, [r3, #0]
   2a14a:	7213      	strb	r3, [r2, #8]
}
   2a14c:	46c0      	nop			; (mov r8, r8)
   2a14e:	46bd      	mov	sp, r7
   2a150:	b002      	add	sp, #8
   2a152:	bd80      	pop	{r7, pc}
   2a154:	40000400 	.word	0x40000400

0002a158 <system_apb_clock_set_divider>:
{
   2a158:	b580      	push	{r7, lr}
   2a15a:	b082      	sub	sp, #8
   2a15c:	af00      	add	r7, sp, #0
   2a15e:	0002      	movs	r2, r0
   2a160:	1dfb      	adds	r3, r7, #7
   2a162:	701a      	strb	r2, [r3, #0]
   2a164:	1dbb      	adds	r3, r7, #6
   2a166:	1c0a      	adds	r2, r1, #0
   2a168:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a16a:	1dfb      	adds	r3, r7, #7
   2a16c:	781b      	ldrb	r3, [r3, #0]
   2a16e:	2b01      	cmp	r3, #1
   2a170:	d008      	beq.n	2a184 <system_apb_clock_set_divider+0x2c>
   2a172:	2b02      	cmp	r3, #2
   2a174:	d00b      	beq.n	2a18e <system_apb_clock_set_divider+0x36>
   2a176:	2b00      	cmp	r3, #0
   2a178:	d10e      	bne.n	2a198 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2a17a:	4a0b      	ldr	r2, [pc, #44]	; (2a1a8 <system_apb_clock_set_divider+0x50>)
   2a17c:	1dbb      	adds	r3, r7, #6
   2a17e:	781b      	ldrb	r3, [r3, #0]
   2a180:	7253      	strb	r3, [r2, #9]
			break;
   2a182:	e00b      	b.n	2a19c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2a184:	4a08      	ldr	r2, [pc, #32]	; (2a1a8 <system_apb_clock_set_divider+0x50>)
   2a186:	1dbb      	adds	r3, r7, #6
   2a188:	781b      	ldrb	r3, [r3, #0]
   2a18a:	7293      	strb	r3, [r2, #10]
			break;
   2a18c:	e006      	b.n	2a19c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2a18e:	4a06      	ldr	r2, [pc, #24]	; (2a1a8 <system_apb_clock_set_divider+0x50>)
   2a190:	1dbb      	adds	r3, r7, #6
   2a192:	781b      	ldrb	r3, [r3, #0]
   2a194:	72d3      	strb	r3, [r2, #11]
			break;
   2a196:	e001      	b.n	2a19c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2a198:	2317      	movs	r3, #23
   2a19a:	e000      	b.n	2a19e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2a19c:	2300      	movs	r3, #0
}
   2a19e:	0018      	movs	r0, r3
   2a1a0:	46bd      	mov	sp, r7
   2a1a2:	b002      	add	sp, #8
   2a1a4:	bd80      	pop	{r7, pc}
   2a1a6:	46c0      	nop			; (mov r8, r8)
   2a1a8:	40000400 	.word	0x40000400

0002a1ac <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2a1ac:	b580      	push	{r7, lr}
   2a1ae:	b082      	sub	sp, #8
   2a1b0:	af00      	add	r7, sp, #0
   2a1b2:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2a1b4:	687b      	ldr	r3, [r7, #4]
   2a1b6:	2201      	movs	r2, #1
   2a1b8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2a1ba:	687b      	ldr	r3, [r7, #4]
   2a1bc:	2200      	movs	r2, #0
   2a1be:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2a1c0:	687b      	ldr	r3, [r7, #4]
   2a1c2:	2200      	movs	r2, #0
   2a1c4:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2a1c6:	687b      	ldr	r3, [r7, #4]
   2a1c8:	2200      	movs	r2, #0
   2a1ca:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2a1cc:	687b      	ldr	r3, [r7, #4]
   2a1ce:	2200      	movs	r2, #0
   2a1d0:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2a1d2:	687b      	ldr	r3, [r7, #4]
   2a1d4:	4a0a      	ldr	r2, [pc, #40]	; (2a200 <system_clock_source_dpll_get_config_defaults+0x54>)
   2a1d6:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2a1d8:	687b      	ldr	r3, [r7, #4]
   2a1da:	2280      	movs	r2, #128	; 0x80
   2a1dc:	0212      	lsls	r2, r2, #8
   2a1de:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2a1e0:	687b      	ldr	r3, [r7, #4]
   2a1e2:	2201      	movs	r2, #1
   2a1e4:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2a1e6:	687b      	ldr	r3, [r7, #4]
   2a1e8:	2200      	movs	r2, #0
   2a1ea:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2a1ec:	687b      	ldr	r3, [r7, #4]
   2a1ee:	2200      	movs	r2, #0
   2a1f0:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2a1f2:	687b      	ldr	r3, [r7, #4]
   2a1f4:	2200      	movs	r2, #0
   2a1f6:	749a      	strb	r2, [r3, #18]
};
   2a1f8:	46c0      	nop			; (mov r8, r8)
   2a1fa:	46bd      	mov	sp, r7
   2a1fc:	b002      	add	sp, #8
   2a1fe:	bd80      	pop	{r7, pc}
   2a200:	02dc6c00 	.word	0x02dc6c00

0002a204 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2a204:	b580      	push	{r7, lr}
   2a206:	b082      	sub	sp, #8
   2a208:	af00      	add	r7, sp, #0
   2a20a:	0002      	movs	r2, r0
   2a20c:	1dfb      	adds	r3, r7, #7
   2a20e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2a210:	4a08      	ldr	r2, [pc, #32]	; (2a234 <system_flash_set_waitstates+0x30>)
   2a212:	1dfb      	adds	r3, r7, #7
   2a214:	781b      	ldrb	r3, [r3, #0]
   2a216:	210f      	movs	r1, #15
   2a218:	400b      	ands	r3, r1
   2a21a:	b2d9      	uxtb	r1, r3
   2a21c:	6853      	ldr	r3, [r2, #4]
   2a21e:	200f      	movs	r0, #15
   2a220:	4001      	ands	r1, r0
   2a222:	0049      	lsls	r1, r1, #1
   2a224:	201e      	movs	r0, #30
   2a226:	4383      	bics	r3, r0
   2a228:	430b      	orrs	r3, r1
   2a22a:	6053      	str	r3, [r2, #4]
}
   2a22c:	46c0      	nop			; (mov r8, r8)
   2a22e:	46bd      	mov	sp, r7
   2a230:	b002      	add	sp, #8
   2a232:	bd80      	pop	{r7, pc}
   2a234:	41004000 	.word	0x41004000

0002a238 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2a238:	b580      	push	{r7, lr}
   2a23a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2a23c:	46c0      	nop			; (mov r8, r8)
   2a23e:	4b04      	ldr	r3, [pc, #16]	; (2a250 <_system_dfll_wait_for_sync+0x18>)
   2a240:	68db      	ldr	r3, [r3, #12]
   2a242:	2210      	movs	r2, #16
   2a244:	4013      	ands	r3, r2
   2a246:	d0fa      	beq.n	2a23e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2a248:	46c0      	nop			; (mov r8, r8)
   2a24a:	46bd      	mov	sp, r7
   2a24c:	bd80      	pop	{r7, pc}
   2a24e:	46c0      	nop			; (mov r8, r8)
   2a250:	40000800 	.word	0x40000800

0002a254 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2a254:	b580      	push	{r7, lr}
   2a256:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2a258:	4b0c      	ldr	r3, [pc, #48]	; (2a28c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a25a:	2202      	movs	r2, #2
   2a25c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a25e:	4b0c      	ldr	r3, [pc, #48]	; (2a290 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a260:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2a262:	4a0a      	ldr	r2, [pc, #40]	; (2a28c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a264:	4b0b      	ldr	r3, [pc, #44]	; (2a294 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a266:	689b      	ldr	r3, [r3, #8]
   2a268:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2a26a:	4a08      	ldr	r2, [pc, #32]	; (2a28c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a26c:	4b09      	ldr	r3, [pc, #36]	; (2a294 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a26e:	685b      	ldr	r3, [r3, #4]
   2a270:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2a272:	4b06      	ldr	r3, [pc, #24]	; (2a28c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a274:	2200      	movs	r2, #0
   2a276:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a278:	4b05      	ldr	r3, [pc, #20]	; (2a290 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a27a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2a27c:	4a03      	ldr	r2, [pc, #12]	; (2a28c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a27e:	4b05      	ldr	r3, [pc, #20]	; (2a294 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a280:	681b      	ldr	r3, [r3, #0]
   2a282:	b29b      	uxth	r3, r3
   2a284:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2a286:	46c0      	nop			; (mov r8, r8)
   2a288:	46bd      	mov	sp, r7
   2a28a:	bd80      	pop	{r7, pc}
   2a28c:	40000800 	.word	0x40000800
   2a290:	0002a239 	.word	0x0002a239
   2a294:	200042dc 	.word	0x200042dc

0002a298 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2a298:	b580      	push	{r7, lr}
   2a29a:	b082      	sub	sp, #8
   2a29c:	af00      	add	r7, sp, #0
   2a29e:	0002      	movs	r2, r0
   2a2a0:	1dfb      	adds	r3, r7, #7
   2a2a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a2a4:	1dfb      	adds	r3, r7, #7
   2a2a6:	781b      	ldrb	r3, [r3, #0]
   2a2a8:	2b08      	cmp	r3, #8
   2a2aa:	d841      	bhi.n	2a330 <system_clock_source_get_hz+0x98>
   2a2ac:	009a      	lsls	r2, r3, #2
   2a2ae:	4b23      	ldr	r3, [pc, #140]	; (2a33c <system_clock_source_get_hz+0xa4>)
   2a2b0:	18d3      	adds	r3, r2, r3
   2a2b2:	681b      	ldr	r3, [r3, #0]
   2a2b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2a2b6:	4b22      	ldr	r3, [pc, #136]	; (2a340 <system_clock_source_get_hz+0xa8>)
   2a2b8:	691b      	ldr	r3, [r3, #16]
   2a2ba:	e03a      	b.n	2a332 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2a2bc:	4b21      	ldr	r3, [pc, #132]	; (2a344 <system_clock_source_get_hz+0xac>)
   2a2be:	6a1b      	ldr	r3, [r3, #32]
   2a2c0:	059b      	lsls	r3, r3, #22
   2a2c2:	0f9b      	lsrs	r3, r3, #30
   2a2c4:	b2db      	uxtb	r3, r3
   2a2c6:	001a      	movs	r2, r3
   2a2c8:	4b1f      	ldr	r3, [pc, #124]	; (2a348 <system_clock_source_get_hz+0xb0>)
   2a2ca:	40d3      	lsrs	r3, r2
   2a2cc:	e031      	b.n	2a332 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2a2ce:	2380      	movs	r3, #128	; 0x80
   2a2d0:	021b      	lsls	r3, r3, #8
   2a2d2:	e02e      	b.n	2a332 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2a2d4:	2380      	movs	r3, #128	; 0x80
   2a2d6:	021b      	lsls	r3, r3, #8
   2a2d8:	e02b      	b.n	2a332 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2a2da:	4b19      	ldr	r3, [pc, #100]	; (2a340 <system_clock_source_get_hz+0xa8>)
   2a2dc:	695b      	ldr	r3, [r3, #20]
   2a2de:	e028      	b.n	2a332 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2a2e0:	4b17      	ldr	r3, [pc, #92]	; (2a340 <system_clock_source_get_hz+0xa8>)
   2a2e2:	681b      	ldr	r3, [r3, #0]
   2a2e4:	2202      	movs	r2, #2
   2a2e6:	4013      	ands	r3, r2
   2a2e8:	d101      	bne.n	2a2ee <system_clock_source_get_hz+0x56>
			return 0;
   2a2ea:	2300      	movs	r3, #0
   2a2ec:	e021      	b.n	2a332 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2a2ee:	4b17      	ldr	r3, [pc, #92]	; (2a34c <system_clock_source_get_hz+0xb4>)
   2a2f0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2a2f2:	4b13      	ldr	r3, [pc, #76]	; (2a340 <system_clock_source_get_hz+0xa8>)
   2a2f4:	681b      	ldr	r3, [r3, #0]
   2a2f6:	2224      	movs	r2, #36	; 0x24
   2a2f8:	4013      	ands	r3, r2
   2a2fa:	2b04      	cmp	r3, #4
   2a2fc:	d109      	bne.n	2a312 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a2fe:	2000      	movs	r0, #0
   2a300:	4b13      	ldr	r3, [pc, #76]	; (2a350 <system_clock_source_get_hz+0xb8>)
   2a302:	4798      	blx	r3
   2a304:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2a306:	4b0e      	ldr	r3, [pc, #56]	; (2a340 <system_clock_source_get_hz+0xa8>)
   2a308:	689b      	ldr	r3, [r3, #8]
   2a30a:	041b      	lsls	r3, r3, #16
   2a30c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a30e:	4353      	muls	r3, r2
   2a310:	e00f      	b.n	2a332 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2a312:	4b10      	ldr	r3, [pc, #64]	; (2a354 <system_clock_source_get_hz+0xbc>)
   2a314:	e00d      	b.n	2a332 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2a316:	4a0b      	ldr	r2, [pc, #44]	; (2a344 <system_clock_source_get_hz+0xac>)
   2a318:	2350      	movs	r3, #80	; 0x50
   2a31a:	5cd3      	ldrb	r3, [r2, r3]
   2a31c:	b2db      	uxtb	r3, r3
   2a31e:	001a      	movs	r2, r3
   2a320:	2304      	movs	r3, #4
   2a322:	4013      	ands	r3, r2
   2a324:	d101      	bne.n	2a32a <system_clock_source_get_hz+0x92>
			return 0;
   2a326:	2300      	movs	r3, #0
   2a328:	e003      	b.n	2a332 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2a32a:	4b05      	ldr	r3, [pc, #20]	; (2a340 <system_clock_source_get_hz+0xa8>)
   2a32c:	68db      	ldr	r3, [r3, #12]
   2a32e:	e000      	b.n	2a332 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2a330:	2300      	movs	r3, #0
	}
}
   2a332:	0018      	movs	r0, r3
   2a334:	46bd      	mov	sp, r7
   2a336:	b002      	add	sp, #8
   2a338:	bd80      	pop	{r7, pc}
   2a33a:	46c0      	nop			; (mov r8, r8)
   2a33c:	0003a43c 	.word	0x0003a43c
   2a340:	200042dc 	.word	0x200042dc
   2a344:	40000800 	.word	0x40000800
   2a348:	007a1200 	.word	0x007a1200
   2a34c:	0002a239 	.word	0x0002a239
   2a350:	0002ad35 	.word	0x0002ad35
   2a354:	02dc6c00 	.word	0x02dc6c00

0002a358 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2a358:	b580      	push	{r7, lr}
   2a35a:	b084      	sub	sp, #16
   2a35c:	af00      	add	r7, sp, #0
   2a35e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2a360:	4b1a      	ldr	r3, [pc, #104]	; (2a3cc <system_clock_source_osc8m_set_config+0x74>)
   2a362:	6a1b      	ldr	r3, [r3, #32]
   2a364:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2a366:	687b      	ldr	r3, [r7, #4]
   2a368:	781b      	ldrb	r3, [r3, #0]
   2a36a:	1c1a      	adds	r2, r3, #0
   2a36c:	2303      	movs	r3, #3
   2a36e:	4013      	ands	r3, r2
   2a370:	b2da      	uxtb	r2, r3
   2a372:	230d      	movs	r3, #13
   2a374:	18fb      	adds	r3, r7, r3
   2a376:	2103      	movs	r1, #3
   2a378:	400a      	ands	r2, r1
   2a37a:	0010      	movs	r0, r2
   2a37c:	781a      	ldrb	r2, [r3, #0]
   2a37e:	2103      	movs	r1, #3
   2a380:	438a      	bics	r2, r1
   2a382:	1c11      	adds	r1, r2, #0
   2a384:	1c02      	adds	r2, r0, #0
   2a386:	430a      	orrs	r2, r1
   2a388:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2a38a:	687b      	ldr	r3, [r7, #4]
   2a38c:	789a      	ldrb	r2, [r3, #2]
   2a38e:	230c      	movs	r3, #12
   2a390:	18fb      	adds	r3, r7, r3
   2a392:	01d0      	lsls	r0, r2, #7
   2a394:	781a      	ldrb	r2, [r3, #0]
   2a396:	217f      	movs	r1, #127	; 0x7f
   2a398:	400a      	ands	r2, r1
   2a39a:	1c11      	adds	r1, r2, #0
   2a39c:	1c02      	adds	r2, r0, #0
   2a39e:	430a      	orrs	r2, r1
   2a3a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2a3a2:	687b      	ldr	r3, [r7, #4]
   2a3a4:	785a      	ldrb	r2, [r3, #1]
   2a3a6:	230c      	movs	r3, #12
   2a3a8:	18fb      	adds	r3, r7, r3
   2a3aa:	2101      	movs	r1, #1
   2a3ac:	400a      	ands	r2, r1
   2a3ae:	0190      	lsls	r0, r2, #6
   2a3b0:	781a      	ldrb	r2, [r3, #0]
   2a3b2:	2140      	movs	r1, #64	; 0x40
   2a3b4:	438a      	bics	r2, r1
   2a3b6:	1c11      	adds	r1, r2, #0
   2a3b8:	1c02      	adds	r2, r0, #0
   2a3ba:	430a      	orrs	r2, r1
   2a3bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2a3be:	4b03      	ldr	r3, [pc, #12]	; (2a3cc <system_clock_source_osc8m_set_config+0x74>)
   2a3c0:	68fa      	ldr	r2, [r7, #12]
   2a3c2:	621a      	str	r2, [r3, #32]
}
   2a3c4:	46c0      	nop			; (mov r8, r8)
   2a3c6:	46bd      	mov	sp, r7
   2a3c8:	b004      	add	sp, #16
   2a3ca:	bd80      	pop	{r7, pc}
   2a3cc:	40000800 	.word	0x40000800

0002a3d0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2a3d0:	b580      	push	{r7, lr}
   2a3d2:	b086      	sub	sp, #24
   2a3d4:	af00      	add	r7, sp, #0
   2a3d6:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2a3d8:	687b      	ldr	r3, [r7, #4]
   2a3da:	68db      	ldr	r3, [r3, #12]
   2a3dc:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2a3de:	687b      	ldr	r3, [r7, #4]
   2a3e0:	7d1b      	ldrb	r3, [r3, #20]
   2a3e2:	2b01      	cmp	r3, #1
   2a3e4:	d10a      	bne.n	2a3fc <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2a3e6:	687b      	ldr	r3, [r7, #4]
   2a3e8:	8a1b      	ldrh	r3, [r3, #16]
   2a3ea:	3301      	adds	r3, #1
   2a3ec:	005b      	lsls	r3, r3, #1
   2a3ee:	001a      	movs	r2, r3
   2a3f0:	4b36      	ldr	r3, [pc, #216]	; (2a4cc <system_clock_source_dpll_set_config+0xfc>)
   2a3f2:	0011      	movs	r1, r2
   2a3f4:	6978      	ldr	r0, [r7, #20]
   2a3f6:	4798      	blx	r3
   2a3f8:	0003      	movs	r3, r0
   2a3fa:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2a3fc:	687b      	ldr	r3, [r7, #4]
   2a3fe:	689b      	ldr	r3, [r3, #8]
   2a400:	011a      	lsls	r2, r3, #4
   2a402:	4b32      	ldr	r3, [pc, #200]	; (2a4cc <system_clock_source_dpll_set_config+0xfc>)
   2a404:	6979      	ldr	r1, [r7, #20]
   2a406:	0010      	movs	r0, r2
   2a408:	4798      	blx	r3
   2a40a:	0003      	movs	r3, r0
   2a40c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2a40e:	693b      	ldr	r3, [r7, #16]
   2a410:	b2da      	uxtb	r2, r3
   2a412:	230f      	movs	r3, #15
   2a414:	18fb      	adds	r3, r7, r3
   2a416:	210f      	movs	r1, #15
   2a418:	400a      	ands	r2, r1
   2a41a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2a41c:	693b      	ldr	r3, [r7, #16]
   2a41e:	091b      	lsrs	r3, r3, #4
   2a420:	3b01      	subs	r3, #1
   2a422:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2a424:	492a      	ldr	r1, [pc, #168]	; (2a4d0 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a426:	687b      	ldr	r3, [r7, #4]
   2a428:	781b      	ldrb	r3, [r3, #0]
   2a42a:	01db      	lsls	r3, r3, #7
   2a42c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2a42e:	687b      	ldr	r3, [r7, #4]
   2a430:	785b      	ldrb	r3, [r3, #1]
   2a432:	019b      	lsls	r3, r3, #6
   2a434:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a436:	4313      	orrs	r3, r2
   2a438:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2a43a:	2344      	movs	r3, #68	; 0x44
   2a43c:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2a43e:	4b24      	ldr	r3, [pc, #144]	; (2a4d0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a440:	220f      	movs	r2, #15
   2a442:	18ba      	adds	r2, r7, r2
   2a444:	7812      	ldrb	r2, [r2, #0]
   2a446:	0412      	lsls	r2, r2, #16
   2a448:	0011      	movs	r1, r2
   2a44a:	22f0      	movs	r2, #240	; 0xf0
   2a44c:	0312      	lsls	r2, r2, #12
   2a44e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2a450:	693a      	ldr	r2, [r7, #16]
   2a452:	0512      	lsls	r2, r2, #20
   2a454:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a456:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2a458:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2a45a:	4b1d      	ldr	r3, [pc, #116]	; (2a4d0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a45c:	687a      	ldr	r2, [r7, #4]
   2a45e:	8a12      	ldrh	r2, [r2, #16]
   2a460:	0412      	lsls	r2, r2, #16
   2a462:	0011      	movs	r1, r2
   2a464:	4a1b      	ldr	r2, [pc, #108]	; (2a4d4 <system_clock_source_dpll_set_config+0x104>)
   2a466:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a468:	687a      	ldr	r2, [r7, #4]
   2a46a:	7892      	ldrb	r2, [r2, #2]
   2a46c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a46e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a470:	687a      	ldr	r2, [r7, #4]
   2a472:	7cd2      	ldrb	r2, [r2, #19]
   2a474:	0212      	lsls	r2, r2, #8
   2a476:	0010      	movs	r0, r2
   2a478:	22e0      	movs	r2, #224	; 0xe0
   2a47a:	00d2      	lsls	r2, r2, #3
   2a47c:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a47e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a480:	687a      	ldr	r2, [r7, #4]
   2a482:	7d12      	ldrb	r2, [r2, #20]
   2a484:	0112      	lsls	r2, r2, #4
   2a486:	0010      	movs	r0, r2
   2a488:	2230      	movs	r2, #48	; 0x30
   2a48a:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a48c:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a48e:	687a      	ldr	r2, [r7, #4]
   2a490:	78d2      	ldrb	r2, [r2, #3]
   2a492:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a494:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a496:	687a      	ldr	r2, [r7, #4]
   2a498:	7912      	ldrb	r2, [r2, #4]
   2a49a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a49c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2a49e:	687a      	ldr	r2, [r7, #4]
   2a4a0:	7c92      	ldrb	r2, [r2, #18]
   2a4a2:	0010      	movs	r0, r2
   2a4a4:	2203      	movs	r2, #3
   2a4a6:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a4a8:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2a4aa:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2a4ac:	693b      	ldr	r3, [r7, #16]
   2a4ae:	3301      	adds	r3, #1
   2a4b0:	011a      	lsls	r2, r3, #4
   2a4b2:	230f      	movs	r3, #15
   2a4b4:	18fb      	adds	r3, r7, r3
   2a4b6:	781b      	ldrb	r3, [r3, #0]
   2a4b8:	18d3      	adds	r3, r2, r3
   2a4ba:	697a      	ldr	r2, [r7, #20]
   2a4bc:	4353      	muls	r3, r2
   2a4be:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2a4c0:	4b05      	ldr	r3, [pc, #20]	; (2a4d8 <system_clock_source_dpll_set_config+0x108>)
   2a4c2:	60da      	str	r2, [r3, #12]
}
   2a4c4:	46c0      	nop			; (mov r8, r8)
   2a4c6:	46bd      	mov	sp, r7
   2a4c8:	b006      	add	sp, #24
   2a4ca:	bd80      	pop	{r7, pc}
   2a4cc:	000337a5 	.word	0x000337a5
   2a4d0:	40000800 	.word	0x40000800
   2a4d4:	07ff0000 	.word	0x07ff0000
   2a4d8:	200042dc 	.word	0x200042dc

0002a4dc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2a4dc:	b580      	push	{r7, lr}
   2a4de:	b082      	sub	sp, #8
   2a4e0:	af00      	add	r7, sp, #0
   2a4e2:	0002      	movs	r2, r0
   2a4e4:	1dfb      	adds	r3, r7, #7
   2a4e6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a4e8:	1dfb      	adds	r3, r7, #7
   2a4ea:	781b      	ldrb	r3, [r3, #0]
   2a4ec:	2b08      	cmp	r3, #8
   2a4ee:	d83b      	bhi.n	2a568 <system_clock_source_enable+0x8c>
   2a4f0:	009a      	lsls	r2, r3, #2
   2a4f2:	4b21      	ldr	r3, [pc, #132]	; (2a578 <system_clock_source_enable+0x9c>)
   2a4f4:	18d3      	adds	r3, r2, r3
   2a4f6:	681b      	ldr	r3, [r3, #0]
   2a4f8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2a4fa:	4b20      	ldr	r3, [pc, #128]	; (2a57c <system_clock_source_enable+0xa0>)
   2a4fc:	4a1f      	ldr	r2, [pc, #124]	; (2a57c <system_clock_source_enable+0xa0>)
   2a4fe:	6a12      	ldr	r2, [r2, #32]
   2a500:	2102      	movs	r1, #2
   2a502:	430a      	orrs	r2, r1
   2a504:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2a506:	2300      	movs	r3, #0
   2a508:	e031      	b.n	2a56e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2a50a:	4b1c      	ldr	r3, [pc, #112]	; (2a57c <system_clock_source_enable+0xa0>)
   2a50c:	4a1b      	ldr	r2, [pc, #108]	; (2a57c <system_clock_source_enable+0xa0>)
   2a50e:	6992      	ldr	r2, [r2, #24]
   2a510:	2102      	movs	r1, #2
   2a512:	430a      	orrs	r2, r1
   2a514:	619a      	str	r2, [r3, #24]
		break;
   2a516:	e029      	b.n	2a56c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2a518:	4a18      	ldr	r2, [pc, #96]	; (2a57c <system_clock_source_enable+0xa0>)
   2a51a:	4b18      	ldr	r3, [pc, #96]	; (2a57c <system_clock_source_enable+0xa0>)
   2a51c:	8a1b      	ldrh	r3, [r3, #16]
   2a51e:	b29b      	uxth	r3, r3
   2a520:	2102      	movs	r1, #2
   2a522:	430b      	orrs	r3, r1
   2a524:	b29b      	uxth	r3, r3
   2a526:	8213      	strh	r3, [r2, #16]
		break;
   2a528:	e020      	b.n	2a56c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2a52a:	4a14      	ldr	r2, [pc, #80]	; (2a57c <system_clock_source_enable+0xa0>)
   2a52c:	4b13      	ldr	r3, [pc, #76]	; (2a57c <system_clock_source_enable+0xa0>)
   2a52e:	8a9b      	ldrh	r3, [r3, #20]
   2a530:	b29b      	uxth	r3, r3
   2a532:	2102      	movs	r1, #2
   2a534:	430b      	orrs	r3, r1
   2a536:	b29b      	uxth	r3, r3
   2a538:	8293      	strh	r3, [r2, #20]
		break;
   2a53a:	e017      	b.n	2a56c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2a53c:	4b10      	ldr	r3, [pc, #64]	; (2a580 <system_clock_source_enable+0xa4>)
   2a53e:	681b      	ldr	r3, [r3, #0]
   2a540:	2202      	movs	r2, #2
   2a542:	431a      	orrs	r2, r3
   2a544:	4b0e      	ldr	r3, [pc, #56]	; (2a580 <system_clock_source_enable+0xa4>)
   2a546:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2a548:	4b0e      	ldr	r3, [pc, #56]	; (2a584 <system_clock_source_enable+0xa8>)
   2a54a:	4798      	blx	r3
		break;
   2a54c:	e00e      	b.n	2a56c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2a54e:	4a0b      	ldr	r2, [pc, #44]	; (2a57c <system_clock_source_enable+0xa0>)
   2a550:	490a      	ldr	r1, [pc, #40]	; (2a57c <system_clock_source_enable+0xa0>)
   2a552:	2344      	movs	r3, #68	; 0x44
   2a554:	5ccb      	ldrb	r3, [r1, r3]
   2a556:	b2db      	uxtb	r3, r3
   2a558:	2102      	movs	r1, #2
   2a55a:	430b      	orrs	r3, r1
   2a55c:	b2d9      	uxtb	r1, r3
   2a55e:	2344      	movs	r3, #68	; 0x44
   2a560:	54d1      	strb	r1, [r2, r3]
		break;
   2a562:	e003      	b.n	2a56c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2a564:	2300      	movs	r3, #0
   2a566:	e002      	b.n	2a56e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2a568:	2317      	movs	r3, #23
   2a56a:	e000      	b.n	2a56e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2a56c:	2300      	movs	r3, #0
}
   2a56e:	0018      	movs	r0, r3
   2a570:	46bd      	mov	sp, r7
   2a572:	b002      	add	sp, #8
   2a574:	bd80      	pop	{r7, pc}
   2a576:	46c0      	nop			; (mov r8, r8)
   2a578:	0003a460 	.word	0x0003a460
   2a57c:	40000800 	.word	0x40000800
   2a580:	200042dc 	.word	0x200042dc
   2a584:	0002a255 	.word	0x0002a255

0002a588 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2a588:	b580      	push	{r7, lr}
   2a58a:	b084      	sub	sp, #16
   2a58c:	af00      	add	r7, sp, #0
   2a58e:	0002      	movs	r2, r0
   2a590:	1dfb      	adds	r3, r7, #7
   2a592:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2a594:	2300      	movs	r3, #0
   2a596:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2a598:	1dfb      	adds	r3, r7, #7
   2a59a:	781b      	ldrb	r3, [r3, #0]
   2a59c:	2b08      	cmp	r3, #8
   2a59e:	d821      	bhi.n	2a5e4 <system_clock_source_is_ready+0x5c>
   2a5a0:	009a      	lsls	r2, r3, #2
   2a5a2:	4b18      	ldr	r3, [pc, #96]	; (2a604 <system_clock_source_is_ready+0x7c>)
   2a5a4:	18d3      	adds	r3, r2, r3
   2a5a6:	681b      	ldr	r3, [r3, #0]
   2a5a8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2a5aa:	2308      	movs	r3, #8
   2a5ac:	60fb      	str	r3, [r7, #12]
		break;
   2a5ae:	e01b      	b.n	2a5e8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2a5b0:	2304      	movs	r3, #4
   2a5b2:	60fb      	str	r3, [r7, #12]
		break;
   2a5b4:	e018      	b.n	2a5e8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2a5b6:	2301      	movs	r3, #1
   2a5b8:	60fb      	str	r3, [r7, #12]
		break;
   2a5ba:	e015      	b.n	2a5e8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2a5bc:	2302      	movs	r3, #2
   2a5be:	60fb      	str	r3, [r7, #12]
		break;
   2a5c0:	e012      	b.n	2a5e8 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2a5c2:	2310      	movs	r3, #16
   2a5c4:	60fb      	str	r3, [r7, #12]
		}
		break;
   2a5c6:	e00f      	b.n	2a5e8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2a5c8:	4a0f      	ldr	r2, [pc, #60]	; (2a608 <system_clock_source_is_ready+0x80>)
   2a5ca:	2350      	movs	r3, #80	; 0x50
   2a5cc:	5cd3      	ldrb	r3, [r2, r3]
   2a5ce:	b2db      	uxtb	r3, r3
   2a5d0:	001a      	movs	r2, r3
   2a5d2:	2303      	movs	r3, #3
   2a5d4:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2a5d6:	3b03      	subs	r3, #3
   2a5d8:	425a      	negs	r2, r3
   2a5da:	4153      	adcs	r3, r2
   2a5dc:	b2db      	uxtb	r3, r3
   2a5de:	e00c      	b.n	2a5fa <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2a5e0:	2301      	movs	r3, #1
   2a5e2:	e00a      	b.n	2a5fa <system_clock_source_is_ready+0x72>

	default:
		return false;
   2a5e4:	2300      	movs	r3, #0
   2a5e6:	e008      	b.n	2a5fa <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2a5e8:	4b07      	ldr	r3, [pc, #28]	; (2a608 <system_clock_source_is_ready+0x80>)
   2a5ea:	68db      	ldr	r3, [r3, #12]
   2a5ec:	68fa      	ldr	r2, [r7, #12]
   2a5ee:	401a      	ands	r2, r3
   2a5f0:	68fb      	ldr	r3, [r7, #12]
   2a5f2:	1ad3      	subs	r3, r2, r3
   2a5f4:	425a      	negs	r2, r3
   2a5f6:	4153      	adcs	r3, r2
   2a5f8:	b2db      	uxtb	r3, r3
}
   2a5fa:	0018      	movs	r0, r3
   2a5fc:	46bd      	mov	sp, r7
   2a5fe:	b004      	add	sp, #16
   2a600:	bd80      	pop	{r7, pc}
   2a602:	46c0      	nop			; (mov r8, r8)
   2a604:	0003a484 	.word	0x0003a484
   2a608:	40000800 	.word	0x40000800

0002a60c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2a60c:	b580      	push	{r7, lr}
   2a60e:	b082      	sub	sp, #8
   2a610:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2a612:	003b      	movs	r3, r7
   2a614:	2203      	movs	r2, #3
   2a616:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a618:	2300      	movs	r3, #0
   2a61a:	607b      	str	r3, [r7, #4]
   2a61c:	e009      	b.n	2a632 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2a61e:	687b      	ldr	r3, [r7, #4]
   2a620:	b2db      	uxtb	r3, r3
   2a622:	003a      	movs	r2, r7
   2a624:	0011      	movs	r1, r2
   2a626:	0018      	movs	r0, r3
   2a628:	4b05      	ldr	r3, [pc, #20]	; (2a640 <_switch_peripheral_gclk+0x34>)
   2a62a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a62c:	687b      	ldr	r3, [r7, #4]
   2a62e:	3301      	adds	r3, #1
   2a630:	607b      	str	r3, [r7, #4]
   2a632:	687b      	ldr	r3, [r7, #4]
   2a634:	2b24      	cmp	r3, #36	; 0x24
   2a636:	d9f2      	bls.n	2a61e <_switch_peripheral_gclk+0x12>
	}
}
   2a638:	46c0      	nop			; (mov r8, r8)
   2a63a:	46bd      	mov	sp, r7
   2a63c:	b002      	add	sp, #8
   2a63e:	bd80      	pop	{r7, pc}
   2a640:	0002ac11 	.word	0x0002ac11

0002a644 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2a644:	b580      	push	{r7, lr}
   2a646:	b0a6      	sub	sp, #152	; 0x98
   2a648:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2a64a:	4b92      	ldr	r3, [pc, #584]	; (2a894 <system_clock_init+0x250>)
   2a64c:	22c2      	movs	r2, #194	; 0xc2
   2a64e:	00d2      	lsls	r2, r2, #3
   2a650:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2a652:	2003      	movs	r0, #3
   2a654:	4b90      	ldr	r3, [pc, #576]	; (2a898 <system_clock_init+0x254>)
   2a656:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2a658:	4b90      	ldr	r3, [pc, #576]	; (2a89c <system_clock_init+0x258>)
   2a65a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2a65c:	2394      	movs	r3, #148	; 0x94
   2a65e:	18fb      	adds	r3, r7, r3
   2a660:	0018      	movs	r0, r3
   2a662:	4b8f      	ldr	r3, [pc, #572]	; (2a8a0 <system_clock_init+0x25c>)
   2a664:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2a666:	2394      	movs	r3, #148	; 0x94
   2a668:	18fb      	adds	r3, r7, r3
   2a66a:	2200      	movs	r2, #0
   2a66c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2a66e:	2394      	movs	r3, #148	; 0x94
   2a670:	18fb      	adds	r3, r7, r3
   2a672:	2201      	movs	r2, #1
   2a674:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2a676:	2394      	movs	r3, #148	; 0x94
   2a678:	18fb      	adds	r3, r7, r3
   2a67a:	2200      	movs	r2, #0
   2a67c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2a67e:	2394      	movs	r3, #148	; 0x94
   2a680:	18fb      	adds	r3, r7, r3
   2a682:	0018      	movs	r0, r3
   2a684:	4b87      	ldr	r3, [pc, #540]	; (2a8a4 <system_clock_init+0x260>)
   2a686:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2a688:	2006      	movs	r0, #6
   2a68a:	4b87      	ldr	r3, [pc, #540]	; (2a8a8 <system_clock_init+0x264>)
   2a68c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2a68e:	4b87      	ldr	r3, [pc, #540]	; (2a8ac <system_clock_init+0x268>)
   2a690:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2a692:	2360      	movs	r3, #96	; 0x60
   2a694:	18fb      	adds	r3, r7, r3
   2a696:	0018      	movs	r0, r3
   2a698:	4b85      	ldr	r3, [pc, #532]	; (2a8b0 <system_clock_init+0x26c>)
   2a69a:	4798      	blx	r3
   2a69c:	2360      	movs	r3, #96	; 0x60
   2a69e:	18fb      	adds	r3, r7, r3
   2a6a0:	2206      	movs	r2, #6
   2a6a2:	701a      	strb	r2, [r3, #0]
   2a6a4:	2360      	movs	r3, #96	; 0x60
   2a6a6:	18fb      	adds	r3, r7, r3
   2a6a8:	2208      	movs	r2, #8
   2a6aa:	605a      	str	r2, [r3, #4]
   2a6ac:	2360      	movs	r3, #96	; 0x60
   2a6ae:	18fb      	adds	r3, r7, r3
   2a6b0:	2200      	movs	r2, #0
   2a6b2:	721a      	strb	r2, [r3, #8]
   2a6b4:	2360      	movs	r3, #96	; 0x60
   2a6b6:	18fb      	adds	r3, r7, r3
   2a6b8:	2200      	movs	r2, #0
   2a6ba:	725a      	strb	r2, [r3, #9]
   2a6bc:	2360      	movs	r3, #96	; 0x60
   2a6be:	18fb      	adds	r3, r7, r3
   2a6c0:	0019      	movs	r1, r3
   2a6c2:	2001      	movs	r0, #1
   2a6c4:	4b7b      	ldr	r3, [pc, #492]	; (2a8b4 <system_clock_init+0x270>)
   2a6c6:	4798      	blx	r3
   2a6c8:	2001      	movs	r0, #1
   2a6ca:	4b7b      	ldr	r3, [pc, #492]	; (2a8b8 <system_clock_init+0x274>)
   2a6cc:	4798      	blx	r3
   2a6ce:	2354      	movs	r3, #84	; 0x54
   2a6d0:	18fb      	adds	r3, r7, r3
   2a6d2:	0018      	movs	r0, r3
   2a6d4:	4b76      	ldr	r3, [pc, #472]	; (2a8b0 <system_clock_init+0x26c>)
   2a6d6:	4798      	blx	r3
   2a6d8:	2354      	movs	r3, #84	; 0x54
   2a6da:	18fb      	adds	r3, r7, r3
   2a6dc:	2203      	movs	r2, #3
   2a6de:	701a      	strb	r2, [r3, #0]
   2a6e0:	2354      	movs	r3, #84	; 0x54
   2a6e2:	18fb      	adds	r3, r7, r3
   2a6e4:	2201      	movs	r2, #1
   2a6e6:	605a      	str	r2, [r3, #4]
   2a6e8:	2354      	movs	r3, #84	; 0x54
   2a6ea:	18fb      	adds	r3, r7, r3
   2a6ec:	2201      	movs	r2, #1
   2a6ee:	721a      	strb	r2, [r3, #8]
   2a6f0:	2354      	movs	r3, #84	; 0x54
   2a6f2:	18fb      	adds	r3, r7, r3
   2a6f4:	2200      	movs	r2, #0
   2a6f6:	725a      	strb	r2, [r3, #9]
   2a6f8:	2354      	movs	r3, #84	; 0x54
   2a6fa:	18fb      	adds	r3, r7, r3
   2a6fc:	0019      	movs	r1, r3
   2a6fe:	2002      	movs	r0, #2
   2a700:	4b6c      	ldr	r3, [pc, #432]	; (2a8b4 <system_clock_init+0x270>)
   2a702:	4798      	blx	r3
   2a704:	2002      	movs	r0, #2
   2a706:	4b6c      	ldr	r3, [pc, #432]	; (2a8b8 <system_clock_init+0x274>)
   2a708:	4798      	blx	r3
   2a70a:	233c      	movs	r3, #60	; 0x3c
   2a70c:	18fb      	adds	r3, r7, r3
   2a70e:	0018      	movs	r0, r3
   2a710:	4b67      	ldr	r3, [pc, #412]	; (2a8b0 <system_clock_init+0x26c>)
   2a712:	4798      	blx	r3
   2a714:	233c      	movs	r3, #60	; 0x3c
   2a716:	18fb      	adds	r3, r7, r3
   2a718:	2203      	movs	r2, #3
   2a71a:	701a      	strb	r2, [r3, #0]
   2a71c:	233c      	movs	r3, #60	; 0x3c
   2a71e:	18fb      	adds	r3, r7, r3
   2a720:	2220      	movs	r2, #32
   2a722:	605a      	str	r2, [r3, #4]
   2a724:	233c      	movs	r3, #60	; 0x3c
   2a726:	18fb      	adds	r3, r7, r3
   2a728:	2200      	movs	r2, #0
   2a72a:	721a      	strb	r2, [r3, #8]
   2a72c:	233c      	movs	r3, #60	; 0x3c
   2a72e:	18fb      	adds	r3, r7, r3
   2a730:	2200      	movs	r2, #0
   2a732:	725a      	strb	r2, [r3, #9]
   2a734:	233c      	movs	r3, #60	; 0x3c
   2a736:	18fb      	adds	r3, r7, r3
   2a738:	0019      	movs	r1, r3
   2a73a:	2004      	movs	r0, #4
   2a73c:	4b5d      	ldr	r3, [pc, #372]	; (2a8b4 <system_clock_init+0x270>)
   2a73e:	4798      	blx	r3
   2a740:	2004      	movs	r0, #4
   2a742:	4b5d      	ldr	r3, [pc, #372]	; (2a8b8 <system_clock_init+0x274>)
   2a744:	4798      	blx	r3
   2a746:	2330      	movs	r3, #48	; 0x30
   2a748:	18fb      	adds	r3, r7, r3
   2a74a:	0018      	movs	r0, r3
   2a74c:	4b58      	ldr	r3, [pc, #352]	; (2a8b0 <system_clock_init+0x26c>)
   2a74e:	4798      	blx	r3
   2a750:	2330      	movs	r3, #48	; 0x30
   2a752:	18fb      	adds	r3, r7, r3
   2a754:	2206      	movs	r2, #6
   2a756:	701a      	strb	r2, [r3, #0]
   2a758:	2330      	movs	r3, #48	; 0x30
   2a75a:	18fb      	adds	r3, r7, r3
   2a75c:	2201      	movs	r2, #1
   2a75e:	605a      	str	r2, [r3, #4]
   2a760:	2330      	movs	r3, #48	; 0x30
   2a762:	18fb      	adds	r3, r7, r3
   2a764:	2200      	movs	r2, #0
   2a766:	721a      	strb	r2, [r3, #8]
   2a768:	2330      	movs	r3, #48	; 0x30
   2a76a:	18fb      	adds	r3, r7, r3
   2a76c:	2200      	movs	r2, #0
   2a76e:	725a      	strb	r2, [r3, #9]
   2a770:	2330      	movs	r3, #48	; 0x30
   2a772:	18fb      	adds	r3, r7, r3
   2a774:	0019      	movs	r1, r3
   2a776:	2005      	movs	r0, #5
   2a778:	4b4e      	ldr	r3, [pc, #312]	; (2a8b4 <system_clock_init+0x270>)
   2a77a:	4798      	blx	r3
   2a77c:	2005      	movs	r0, #5
   2a77e:	4b4e      	ldr	r3, [pc, #312]	; (2a8b8 <system_clock_init+0x274>)
   2a780:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a782:	2390      	movs	r3, #144	; 0x90
   2a784:	18fb      	adds	r3, r7, r3
   2a786:	0018      	movs	r0, r3
   2a788:	4b4c      	ldr	r3, [pc, #304]	; (2a8bc <system_clock_init+0x278>)
   2a78a:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a78c:	2390      	movs	r3, #144	; 0x90
   2a78e:	18fb      	adds	r3, r7, r3
   2a790:	2201      	movs	r2, #1
   2a792:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a794:	2390      	movs	r3, #144	; 0x90
   2a796:	18fb      	adds	r3, r7, r3
   2a798:	0019      	movs	r1, r3
   2a79a:	2001      	movs	r0, #1
   2a79c:	4b48      	ldr	r3, [pc, #288]	; (2a8c0 <system_clock_init+0x27c>)
   2a79e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a7a0:	2001      	movs	r0, #1
   2a7a2:	4b48      	ldr	r3, [pc, #288]	; (2a8c4 <system_clock_init+0x280>)
   2a7a4:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a7a6:	2378      	movs	r3, #120	; 0x78
   2a7a8:	18fb      	adds	r3, r7, r3
   2a7aa:	0018      	movs	r0, r3
   2a7ac:	4b46      	ldr	r3, [pc, #280]	; (2a8c8 <system_clock_init+0x284>)
   2a7ae:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a7b0:	2378      	movs	r3, #120	; 0x78
   2a7b2:	18fb      	adds	r3, r7, r3
   2a7b4:	2200      	movs	r2, #0
   2a7b6:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a7b8:	2378      	movs	r3, #120	; 0x78
   2a7ba:	18fb      	adds	r3, r7, r3
   2a7bc:	2200      	movs	r2, #0
   2a7be:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a7c0:	2378      	movs	r3, #120	; 0x78
   2a7c2:	18fb      	adds	r3, r7, r3
   2a7c4:	2200      	movs	r2, #0
   2a7c6:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a7c8:	2378      	movs	r3, #120	; 0x78
   2a7ca:	18fb      	adds	r3, r7, r3
   2a7cc:	2200      	movs	r2, #0
   2a7ce:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a7d0:	2378      	movs	r3, #120	; 0x78
   2a7d2:	18fb      	adds	r3, r7, r3
   2a7d4:	2200      	movs	r2, #0
   2a7d6:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a7d8:	2378      	movs	r3, #120	; 0x78
   2a7da:	18fb      	adds	r3, r7, r3
   2a7dc:	2200      	movs	r2, #0
   2a7de:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a7e0:	2378      	movs	r3, #120	; 0x78
   2a7e2:	18fb      	adds	r3, r7, r3
   2a7e4:	2200      	movs	r2, #0
   2a7e6:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a7e8:	2378      	movs	r3, #120	; 0x78
   2a7ea:	18fb      	adds	r3, r7, r3
   2a7ec:	2202      	movs	r2, #2
   2a7ee:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a7f0:	2378      	movs	r3, #120	; 0x78
   2a7f2:	18fb      	adds	r3, r7, r3
   2a7f4:	4a35      	ldr	r2, [pc, #212]	; (2a8cc <system_clock_init+0x288>)
   2a7f6:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a7f8:	2378      	movs	r3, #120	; 0x78
   2a7fa:	18fb      	adds	r3, r7, r3
   2a7fc:	2201      	movs	r2, #1
   2a7fe:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a800:	2378      	movs	r3, #120	; 0x78
   2a802:	18fb      	adds	r3, r7, r3
   2a804:	4a32      	ldr	r2, [pc, #200]	; (2a8d0 <system_clock_init+0x28c>)
   2a806:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2a808:	2378      	movs	r3, #120	; 0x78
   2a80a:	18fb      	adds	r3, r7, r3
   2a80c:	0018      	movs	r0, r3
   2a80e:	4b31      	ldr	r3, [pc, #196]	; (2a8d4 <system_clock_init+0x290>)
   2a810:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2a812:	2008      	movs	r0, #8
   2a814:	4b24      	ldr	r3, [pc, #144]	; (2a8a8 <system_clock_init+0x264>)
   2a816:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2a818:	46c0      	nop			; (mov r8, r8)
   2a81a:	2008      	movs	r0, #8
   2a81c:	4b2e      	ldr	r3, [pc, #184]	; (2a8d8 <system_clock_init+0x294>)
   2a81e:	4798      	blx	r3
   2a820:	0003      	movs	r3, r0
   2a822:	001a      	movs	r2, r3
   2a824:	2301      	movs	r3, #1
   2a826:	4053      	eors	r3, r2
   2a828:	b2db      	uxtb	r3, r3
   2a82a:	2b00      	cmp	r3, #0
   2a82c:	d1f5      	bne.n	2a81a <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a82e:	4919      	ldr	r1, [pc, #100]	; (2a894 <system_clock_init+0x250>)
   2a830:	2244      	movs	r2, #68	; 0x44
   2a832:	5c8b      	ldrb	r3, [r1, r2]
   2a834:	2080      	movs	r0, #128	; 0x80
   2a836:	4240      	negs	r0, r0
   2a838:	4303      	orrs	r3, r0
   2a83a:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a83c:	2000      	movs	r0, #0
   2a83e:	4b27      	ldr	r3, [pc, #156]	; (2a8dc <system_clock_init+0x298>)
   2a840:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a842:	2100      	movs	r1, #0
   2a844:	2000      	movs	r0, #0
   2a846:	4b26      	ldr	r3, [pc, #152]	; (2a8e0 <system_clock_init+0x29c>)
   2a848:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a84a:	2100      	movs	r1, #0
   2a84c:	2001      	movs	r0, #1
   2a84e:	4b24      	ldr	r3, [pc, #144]	; (2a8e0 <system_clock_init+0x29c>)
   2a850:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a852:	2100      	movs	r1, #0
   2a854:	2002      	movs	r0, #2
   2a856:	4b22      	ldr	r3, [pc, #136]	; (2a8e0 <system_clock_init+0x29c>)
   2a858:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a85a:	003b      	movs	r3, r7
   2a85c:	0018      	movs	r0, r3
   2a85e:	4b14      	ldr	r3, [pc, #80]	; (2a8b0 <system_clock_init+0x26c>)
   2a860:	4798      	blx	r3
   2a862:	003b      	movs	r3, r7
   2a864:	2208      	movs	r2, #8
   2a866:	701a      	strb	r2, [r3, #0]
   2a868:	003b      	movs	r3, r7
   2a86a:	2201      	movs	r2, #1
   2a86c:	605a      	str	r2, [r3, #4]
   2a86e:	003b      	movs	r3, r7
   2a870:	2200      	movs	r2, #0
   2a872:	721a      	strb	r2, [r3, #8]
   2a874:	003b      	movs	r3, r7
   2a876:	2201      	movs	r2, #1
   2a878:	725a      	strb	r2, [r3, #9]
   2a87a:	003b      	movs	r3, r7
   2a87c:	0019      	movs	r1, r3
   2a87e:	2000      	movs	r0, #0
   2a880:	4b0c      	ldr	r3, [pc, #48]	; (2a8b4 <system_clock_init+0x270>)
   2a882:	4798      	blx	r3
   2a884:	2000      	movs	r0, #0
   2a886:	4b0c      	ldr	r3, [pc, #48]	; (2a8b8 <system_clock_init+0x274>)
   2a888:	4798      	blx	r3
#endif
}
   2a88a:	46c0      	nop			; (mov r8, r8)
   2a88c:	46bd      	mov	sp, r7
   2a88e:	b026      	add	sp, #152	; 0x98
   2a890:	bd80      	pop	{r7, pc}
   2a892:	46c0      	nop			; (mov r8, r8)
   2a894:	40000800 	.word	0x40000800
   2a898:	0002a205 	.word	0x0002a205
   2a89c:	0002a60d 	.word	0x0002a60d
   2a8a0:	0002a115 	.word	0x0002a115
   2a8a4:	0002a359 	.word	0x0002a359
   2a8a8:	0002a4dd 	.word	0x0002a4dd
   2a8ac:	0002a989 	.word	0x0002a989
   2a8b0:	0002a0d1 	.word	0x0002a0d1
   2a8b4:	0002a9b9 	.word	0x0002a9b9
   2a8b8:	0002aadd 	.word	0x0002aadd
   2a8bc:	0002a0ff 	.word	0x0002a0ff
   2a8c0:	0002ac11 	.word	0x0002ac11
   2a8c4:	0002ac55 	.word	0x0002ac55
   2a8c8:	0002a1ad 	.word	0x0002a1ad
   2a8cc:	000f4240 	.word	0x000f4240
   2a8d0:	02dc6c00 	.word	0x02dc6c00
   2a8d4:	0002a3d1 	.word	0x0002a3d1
   2a8d8:	0002a589 	.word	0x0002a589
   2a8dc:	0002a139 	.word	0x0002a139
   2a8e0:	0002a159 	.word	0x0002a159

0002a8e4 <system_apb_clock_set_mask>:
{
   2a8e4:	b580      	push	{r7, lr}
   2a8e6:	b082      	sub	sp, #8
   2a8e8:	af00      	add	r7, sp, #0
   2a8ea:	0002      	movs	r2, r0
   2a8ec:	6039      	str	r1, [r7, #0]
   2a8ee:	1dfb      	adds	r3, r7, #7
   2a8f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a8f2:	1dfb      	adds	r3, r7, #7
   2a8f4:	781b      	ldrb	r3, [r3, #0]
   2a8f6:	2b01      	cmp	r3, #1
   2a8f8:	d00a      	beq.n	2a910 <system_apb_clock_set_mask+0x2c>
   2a8fa:	2b02      	cmp	r3, #2
   2a8fc:	d00f      	beq.n	2a91e <system_apb_clock_set_mask+0x3a>
   2a8fe:	2b00      	cmp	r3, #0
   2a900:	d114      	bne.n	2a92c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a902:	4b0e      	ldr	r3, [pc, #56]	; (2a93c <system_apb_clock_set_mask+0x58>)
   2a904:	4a0d      	ldr	r2, [pc, #52]	; (2a93c <system_apb_clock_set_mask+0x58>)
   2a906:	6991      	ldr	r1, [r2, #24]
   2a908:	683a      	ldr	r2, [r7, #0]
   2a90a:	430a      	orrs	r2, r1
   2a90c:	619a      	str	r2, [r3, #24]
			break;
   2a90e:	e00f      	b.n	2a930 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a910:	4b0a      	ldr	r3, [pc, #40]	; (2a93c <system_apb_clock_set_mask+0x58>)
   2a912:	4a0a      	ldr	r2, [pc, #40]	; (2a93c <system_apb_clock_set_mask+0x58>)
   2a914:	69d1      	ldr	r1, [r2, #28]
   2a916:	683a      	ldr	r2, [r7, #0]
   2a918:	430a      	orrs	r2, r1
   2a91a:	61da      	str	r2, [r3, #28]
			break;
   2a91c:	e008      	b.n	2a930 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a91e:	4b07      	ldr	r3, [pc, #28]	; (2a93c <system_apb_clock_set_mask+0x58>)
   2a920:	4a06      	ldr	r2, [pc, #24]	; (2a93c <system_apb_clock_set_mask+0x58>)
   2a922:	6a11      	ldr	r1, [r2, #32]
   2a924:	683a      	ldr	r2, [r7, #0]
   2a926:	430a      	orrs	r2, r1
   2a928:	621a      	str	r2, [r3, #32]
			break;
   2a92a:	e001      	b.n	2a930 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a92c:	2317      	movs	r3, #23
   2a92e:	e000      	b.n	2a932 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a930:	2300      	movs	r3, #0
}
   2a932:	0018      	movs	r0, r3
   2a934:	46bd      	mov	sp, r7
   2a936:	b002      	add	sp, #8
   2a938:	bd80      	pop	{r7, pc}
   2a93a:	46c0      	nop			; (mov r8, r8)
   2a93c:	40000400 	.word	0x40000400

0002a940 <system_interrupt_enter_critical_section>:
{
   2a940:	b580      	push	{r7, lr}
   2a942:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a944:	4b02      	ldr	r3, [pc, #8]	; (2a950 <system_interrupt_enter_critical_section+0x10>)
   2a946:	4798      	blx	r3
}
   2a948:	46c0      	nop			; (mov r8, r8)
   2a94a:	46bd      	mov	sp, r7
   2a94c:	bd80      	pop	{r7, pc}
   2a94e:	46c0      	nop			; (mov r8, r8)
   2a950:	00026f7d 	.word	0x00026f7d

0002a954 <system_interrupt_leave_critical_section>:
{
   2a954:	b580      	push	{r7, lr}
   2a956:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2a958:	4b02      	ldr	r3, [pc, #8]	; (2a964 <system_interrupt_leave_critical_section+0x10>)
   2a95a:	4798      	blx	r3
}
   2a95c:	46c0      	nop			; (mov r8, r8)
   2a95e:	46bd      	mov	sp, r7
   2a960:	bd80      	pop	{r7, pc}
   2a962:	46c0      	nop			; (mov r8, r8)
   2a964:	00026fd1 	.word	0x00026fd1

0002a968 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2a968:	b580      	push	{r7, lr}
   2a96a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2a96c:	4b05      	ldr	r3, [pc, #20]	; (2a984 <system_gclk_is_syncing+0x1c>)
   2a96e:	785b      	ldrb	r3, [r3, #1]
   2a970:	b2db      	uxtb	r3, r3
   2a972:	b25b      	sxtb	r3, r3
   2a974:	2b00      	cmp	r3, #0
   2a976:	da01      	bge.n	2a97c <system_gclk_is_syncing+0x14>
		return true;
   2a978:	2301      	movs	r3, #1
   2a97a:	e000      	b.n	2a97e <system_gclk_is_syncing+0x16>
	}

	return false;
   2a97c:	2300      	movs	r3, #0
}
   2a97e:	0018      	movs	r0, r3
   2a980:	46bd      	mov	sp, r7
   2a982:	bd80      	pop	{r7, pc}
   2a984:	40000c00 	.word	0x40000c00

0002a988 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2a988:	b580      	push	{r7, lr}
   2a98a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2a98c:	2108      	movs	r1, #8
   2a98e:	2000      	movs	r0, #0
   2a990:	4b07      	ldr	r3, [pc, #28]	; (2a9b0 <system_gclk_init+0x28>)
   2a992:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2a994:	4b07      	ldr	r3, [pc, #28]	; (2a9b4 <system_gclk_init+0x2c>)
   2a996:	2201      	movs	r2, #1
   2a998:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2a99a:	46c0      	nop			; (mov r8, r8)
   2a99c:	4b05      	ldr	r3, [pc, #20]	; (2a9b4 <system_gclk_init+0x2c>)
   2a99e:	781b      	ldrb	r3, [r3, #0]
   2a9a0:	b2db      	uxtb	r3, r3
   2a9a2:	001a      	movs	r2, r3
   2a9a4:	2301      	movs	r3, #1
   2a9a6:	4013      	ands	r3, r2
   2a9a8:	d1f8      	bne.n	2a99c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2a9aa:	46c0      	nop			; (mov r8, r8)
   2a9ac:	46bd      	mov	sp, r7
   2a9ae:	bd80      	pop	{r7, pc}
   2a9b0:	0002a8e5 	.word	0x0002a8e5
   2a9b4:	40000c00 	.word	0x40000c00

0002a9b8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2a9b8:	b580      	push	{r7, lr}
   2a9ba:	b086      	sub	sp, #24
   2a9bc:	af00      	add	r7, sp, #0
   2a9be:	0002      	movs	r2, r0
   2a9c0:	6039      	str	r1, [r7, #0]
   2a9c2:	1dfb      	adds	r3, r7, #7
   2a9c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a9c6:	1dfb      	adds	r3, r7, #7
   2a9c8:	781b      	ldrb	r3, [r3, #0]
   2a9ca:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a9cc:	1dfb      	adds	r3, r7, #7
   2a9ce:	781b      	ldrb	r3, [r3, #0]
   2a9d0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a9d2:	683b      	ldr	r3, [r7, #0]
   2a9d4:	781b      	ldrb	r3, [r3, #0]
   2a9d6:	021b      	lsls	r3, r3, #8
   2a9d8:	001a      	movs	r2, r3
   2a9da:	697b      	ldr	r3, [r7, #20]
   2a9dc:	4313      	orrs	r3, r2
   2a9de:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a9e0:	683b      	ldr	r3, [r7, #0]
   2a9e2:	785b      	ldrb	r3, [r3, #1]
   2a9e4:	2b00      	cmp	r3, #0
   2a9e6:	d004      	beq.n	2a9f2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a9e8:	697b      	ldr	r3, [r7, #20]
   2a9ea:	2280      	movs	r2, #128	; 0x80
   2a9ec:	02d2      	lsls	r2, r2, #11
   2a9ee:	4313      	orrs	r3, r2
   2a9f0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a9f2:	683b      	ldr	r3, [r7, #0]
   2a9f4:	7a5b      	ldrb	r3, [r3, #9]
   2a9f6:	2b00      	cmp	r3, #0
   2a9f8:	d004      	beq.n	2aa04 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a9fa:	697b      	ldr	r3, [r7, #20]
   2a9fc:	2280      	movs	r2, #128	; 0x80
   2a9fe:	0312      	lsls	r2, r2, #12
   2aa00:	4313      	orrs	r3, r2
   2aa02:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2aa04:	683b      	ldr	r3, [r7, #0]
   2aa06:	685b      	ldr	r3, [r3, #4]
   2aa08:	2b01      	cmp	r3, #1
   2aa0a:	d92c      	bls.n	2aa66 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2aa0c:	683b      	ldr	r3, [r7, #0]
   2aa0e:	685a      	ldr	r2, [r3, #4]
   2aa10:	683b      	ldr	r3, [r7, #0]
   2aa12:	685b      	ldr	r3, [r3, #4]
   2aa14:	3b01      	subs	r3, #1
   2aa16:	4013      	ands	r3, r2
   2aa18:	d11a      	bne.n	2aa50 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2aa1a:	2300      	movs	r3, #0
   2aa1c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2aa1e:	2302      	movs	r3, #2
   2aa20:	60bb      	str	r3, [r7, #8]
   2aa22:	e005      	b.n	2aa30 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2aa24:	68fb      	ldr	r3, [r7, #12]
   2aa26:	3301      	adds	r3, #1
   2aa28:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2aa2a:	68bb      	ldr	r3, [r7, #8]
   2aa2c:	005b      	lsls	r3, r3, #1
   2aa2e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2aa30:	683b      	ldr	r3, [r7, #0]
   2aa32:	685a      	ldr	r2, [r3, #4]
   2aa34:	68bb      	ldr	r3, [r7, #8]
   2aa36:	429a      	cmp	r2, r3
   2aa38:	d8f4      	bhi.n	2aa24 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2aa3a:	68fb      	ldr	r3, [r7, #12]
   2aa3c:	021b      	lsls	r3, r3, #8
   2aa3e:	693a      	ldr	r2, [r7, #16]
   2aa40:	4313      	orrs	r3, r2
   2aa42:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2aa44:	697b      	ldr	r3, [r7, #20]
   2aa46:	2280      	movs	r2, #128	; 0x80
   2aa48:	0352      	lsls	r2, r2, #13
   2aa4a:	4313      	orrs	r3, r2
   2aa4c:	617b      	str	r3, [r7, #20]
   2aa4e:	e00a      	b.n	2aa66 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2aa50:	683b      	ldr	r3, [r7, #0]
   2aa52:	685b      	ldr	r3, [r3, #4]
   2aa54:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2aa56:	693a      	ldr	r2, [r7, #16]
   2aa58:	4313      	orrs	r3, r2
   2aa5a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2aa5c:	697b      	ldr	r3, [r7, #20]
   2aa5e:	2280      	movs	r2, #128	; 0x80
   2aa60:	0292      	lsls	r2, r2, #10
   2aa62:	4313      	orrs	r3, r2
   2aa64:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2aa66:	683b      	ldr	r3, [r7, #0]
   2aa68:	7a1b      	ldrb	r3, [r3, #8]
   2aa6a:	2b00      	cmp	r3, #0
   2aa6c:	d004      	beq.n	2aa78 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2aa6e:	697b      	ldr	r3, [r7, #20]
   2aa70:	2280      	movs	r2, #128	; 0x80
   2aa72:	0392      	lsls	r2, r2, #14
   2aa74:	4313      	orrs	r3, r2
   2aa76:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2aa78:	46c0      	nop			; (mov r8, r8)
   2aa7a:	4b13      	ldr	r3, [pc, #76]	; (2aac8 <system_gclk_gen_set_config+0x110>)
   2aa7c:	4798      	blx	r3
   2aa7e:	1e03      	subs	r3, r0, #0
   2aa80:	d1fb      	bne.n	2aa7a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2aa82:	4b12      	ldr	r3, [pc, #72]	; (2aacc <system_gclk_gen_set_config+0x114>)
   2aa84:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2aa86:	4a12      	ldr	r2, [pc, #72]	; (2aad0 <system_gclk_gen_set_config+0x118>)
   2aa88:	1dfb      	adds	r3, r7, #7
   2aa8a:	781b      	ldrb	r3, [r3, #0]
   2aa8c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2aa8e:	46c0      	nop			; (mov r8, r8)
   2aa90:	4b0d      	ldr	r3, [pc, #52]	; (2aac8 <system_gclk_gen_set_config+0x110>)
   2aa92:	4798      	blx	r3
   2aa94:	1e03      	subs	r3, r0, #0
   2aa96:	d1fb      	bne.n	2aa90 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2aa98:	4b0e      	ldr	r3, [pc, #56]	; (2aad4 <system_gclk_gen_set_config+0x11c>)
   2aa9a:	693a      	ldr	r2, [r7, #16]
   2aa9c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2aa9e:	46c0      	nop			; (mov r8, r8)
   2aaa0:	4b09      	ldr	r3, [pc, #36]	; (2aac8 <system_gclk_gen_set_config+0x110>)
   2aaa2:	4798      	blx	r3
   2aaa4:	1e03      	subs	r3, r0, #0
   2aaa6:	d1fb      	bne.n	2aaa0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2aaa8:	4b0a      	ldr	r3, [pc, #40]	; (2aad4 <system_gclk_gen_set_config+0x11c>)
   2aaaa:	4a0a      	ldr	r2, [pc, #40]	; (2aad4 <system_gclk_gen_set_config+0x11c>)
   2aaac:	6851      	ldr	r1, [r2, #4]
   2aaae:	2280      	movs	r2, #128	; 0x80
   2aab0:	0252      	lsls	r2, r2, #9
   2aab2:	4011      	ands	r1, r2
   2aab4:	697a      	ldr	r2, [r7, #20]
   2aab6:	430a      	orrs	r2, r1
   2aab8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2aaba:	4b07      	ldr	r3, [pc, #28]	; (2aad8 <system_gclk_gen_set_config+0x120>)
   2aabc:	4798      	blx	r3
}
   2aabe:	46c0      	nop			; (mov r8, r8)
   2aac0:	46bd      	mov	sp, r7
   2aac2:	b006      	add	sp, #24
   2aac4:	bd80      	pop	{r7, pc}
   2aac6:	46c0      	nop			; (mov r8, r8)
   2aac8:	0002a969 	.word	0x0002a969
   2aacc:	0002a941 	.word	0x0002a941
   2aad0:	40000c08 	.word	0x40000c08
   2aad4:	40000c00 	.word	0x40000c00
   2aad8:	0002a955 	.word	0x0002a955

0002aadc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2aadc:	b580      	push	{r7, lr}
   2aade:	b082      	sub	sp, #8
   2aae0:	af00      	add	r7, sp, #0
   2aae2:	0002      	movs	r2, r0
   2aae4:	1dfb      	adds	r3, r7, #7
   2aae6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2aae8:	46c0      	nop			; (mov r8, r8)
   2aaea:	4b0e      	ldr	r3, [pc, #56]	; (2ab24 <system_gclk_gen_enable+0x48>)
   2aaec:	4798      	blx	r3
   2aaee:	1e03      	subs	r3, r0, #0
   2aaf0:	d1fb      	bne.n	2aaea <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2aaf2:	4b0d      	ldr	r3, [pc, #52]	; (2ab28 <system_gclk_gen_enable+0x4c>)
   2aaf4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2aaf6:	4a0d      	ldr	r2, [pc, #52]	; (2ab2c <system_gclk_gen_enable+0x50>)
   2aaf8:	1dfb      	adds	r3, r7, #7
   2aafa:	781b      	ldrb	r3, [r3, #0]
   2aafc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2aafe:	46c0      	nop			; (mov r8, r8)
   2ab00:	4b08      	ldr	r3, [pc, #32]	; (2ab24 <system_gclk_gen_enable+0x48>)
   2ab02:	4798      	blx	r3
   2ab04:	1e03      	subs	r3, r0, #0
   2ab06:	d1fb      	bne.n	2ab00 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2ab08:	4b09      	ldr	r3, [pc, #36]	; (2ab30 <system_gclk_gen_enable+0x54>)
   2ab0a:	4a09      	ldr	r2, [pc, #36]	; (2ab30 <system_gclk_gen_enable+0x54>)
   2ab0c:	6852      	ldr	r2, [r2, #4]
   2ab0e:	2180      	movs	r1, #128	; 0x80
   2ab10:	0249      	lsls	r1, r1, #9
   2ab12:	430a      	orrs	r2, r1
   2ab14:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2ab16:	4b07      	ldr	r3, [pc, #28]	; (2ab34 <system_gclk_gen_enable+0x58>)
   2ab18:	4798      	blx	r3
}
   2ab1a:	46c0      	nop			; (mov r8, r8)
   2ab1c:	46bd      	mov	sp, r7
   2ab1e:	b002      	add	sp, #8
   2ab20:	bd80      	pop	{r7, pc}
   2ab22:	46c0      	nop			; (mov r8, r8)
   2ab24:	0002a969 	.word	0x0002a969
   2ab28:	0002a941 	.word	0x0002a941
   2ab2c:	40000c04 	.word	0x40000c04
   2ab30:	40000c00 	.word	0x40000c00
   2ab34:	0002a955 	.word	0x0002a955

0002ab38 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2ab38:	b580      	push	{r7, lr}
   2ab3a:	b086      	sub	sp, #24
   2ab3c:	af00      	add	r7, sp, #0
   2ab3e:	0002      	movs	r2, r0
   2ab40:	1dfb      	adds	r3, r7, #7
   2ab42:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2ab44:	46c0      	nop			; (mov r8, r8)
   2ab46:	4b2a      	ldr	r3, [pc, #168]	; (2abf0 <system_gclk_gen_get_hz+0xb8>)
   2ab48:	4798      	blx	r3
   2ab4a:	1e03      	subs	r3, r0, #0
   2ab4c:	d1fb      	bne.n	2ab46 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2ab4e:	4b29      	ldr	r3, [pc, #164]	; (2abf4 <system_gclk_gen_get_hz+0xbc>)
   2ab50:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2ab52:	4a29      	ldr	r2, [pc, #164]	; (2abf8 <system_gclk_gen_get_hz+0xc0>)
   2ab54:	1dfb      	adds	r3, r7, #7
   2ab56:	781b      	ldrb	r3, [r3, #0]
   2ab58:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2ab5a:	46c0      	nop			; (mov r8, r8)
   2ab5c:	4b24      	ldr	r3, [pc, #144]	; (2abf0 <system_gclk_gen_get_hz+0xb8>)
   2ab5e:	4798      	blx	r3
   2ab60:	1e03      	subs	r3, r0, #0
   2ab62:	d1fb      	bne.n	2ab5c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2ab64:	4b25      	ldr	r3, [pc, #148]	; (2abfc <system_gclk_gen_get_hz+0xc4>)
   2ab66:	685b      	ldr	r3, [r3, #4]
   2ab68:	04db      	lsls	r3, r3, #19
   2ab6a:	0edb      	lsrs	r3, r3, #27
   2ab6c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2ab6e:	0018      	movs	r0, r3
   2ab70:	4b23      	ldr	r3, [pc, #140]	; (2ac00 <system_gclk_gen_get_hz+0xc8>)
   2ab72:	4798      	blx	r3
   2ab74:	0003      	movs	r3, r0
   2ab76:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2ab78:	4a1f      	ldr	r2, [pc, #124]	; (2abf8 <system_gclk_gen_get_hz+0xc0>)
   2ab7a:	1dfb      	adds	r3, r7, #7
   2ab7c:	781b      	ldrb	r3, [r3, #0]
   2ab7e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2ab80:	4b1e      	ldr	r3, [pc, #120]	; (2abfc <system_gclk_gen_get_hz+0xc4>)
   2ab82:	685b      	ldr	r3, [r3, #4]
   2ab84:	02db      	lsls	r3, r3, #11
   2ab86:	0fdb      	lsrs	r3, r3, #31
   2ab88:	b2da      	uxtb	r2, r3
   2ab8a:	2313      	movs	r3, #19
   2ab8c:	18fb      	adds	r3, r7, r3
   2ab8e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2ab90:	4a1c      	ldr	r2, [pc, #112]	; (2ac04 <system_gclk_gen_get_hz+0xcc>)
   2ab92:	1dfb      	adds	r3, r7, #7
   2ab94:	781b      	ldrb	r3, [r3, #0]
   2ab96:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2ab98:	46c0      	nop			; (mov r8, r8)
   2ab9a:	4b15      	ldr	r3, [pc, #84]	; (2abf0 <system_gclk_gen_get_hz+0xb8>)
   2ab9c:	4798      	blx	r3
   2ab9e:	1e03      	subs	r3, r0, #0
   2aba0:	d1fb      	bne.n	2ab9a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2aba2:	4b16      	ldr	r3, [pc, #88]	; (2abfc <system_gclk_gen_get_hz+0xc4>)
   2aba4:	689b      	ldr	r3, [r3, #8]
   2aba6:	021b      	lsls	r3, r3, #8
   2aba8:	0c1b      	lsrs	r3, r3, #16
   2abaa:	b29b      	uxth	r3, r3
   2abac:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2abae:	4b16      	ldr	r3, [pc, #88]	; (2ac08 <system_gclk_gen_get_hz+0xd0>)
   2abb0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2abb2:	2313      	movs	r3, #19
   2abb4:	18fb      	adds	r3, r7, r3
   2abb6:	781b      	ldrb	r3, [r3, #0]
   2abb8:	2b00      	cmp	r3, #0
   2abba:	d109      	bne.n	2abd0 <system_gclk_gen_get_hz+0x98>
   2abbc:	68fb      	ldr	r3, [r7, #12]
   2abbe:	2b01      	cmp	r3, #1
   2abc0:	d906      	bls.n	2abd0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2abc2:	4b12      	ldr	r3, [pc, #72]	; (2ac0c <system_gclk_gen_get_hz+0xd4>)
   2abc4:	68f9      	ldr	r1, [r7, #12]
   2abc6:	6978      	ldr	r0, [r7, #20]
   2abc8:	4798      	blx	r3
   2abca:	0003      	movs	r3, r0
   2abcc:	617b      	str	r3, [r7, #20]
   2abce:	e00a      	b.n	2abe6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2abd0:	2313      	movs	r3, #19
   2abd2:	18fb      	adds	r3, r7, r3
   2abd4:	781b      	ldrb	r3, [r3, #0]
   2abd6:	2b00      	cmp	r3, #0
   2abd8:	d005      	beq.n	2abe6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2abda:	68fb      	ldr	r3, [r7, #12]
   2abdc:	3301      	adds	r3, #1
   2abde:	697a      	ldr	r2, [r7, #20]
   2abe0:	40da      	lsrs	r2, r3
   2abe2:	0013      	movs	r3, r2
   2abe4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2abe6:	697b      	ldr	r3, [r7, #20]
}
   2abe8:	0018      	movs	r0, r3
   2abea:	46bd      	mov	sp, r7
   2abec:	b006      	add	sp, #24
   2abee:	bd80      	pop	{r7, pc}
   2abf0:	0002a969 	.word	0x0002a969
   2abf4:	0002a941 	.word	0x0002a941
   2abf8:	40000c04 	.word	0x40000c04
   2abfc:	40000c00 	.word	0x40000c00
   2ac00:	0002a299 	.word	0x0002a299
   2ac04:	40000c08 	.word	0x40000c08
   2ac08:	0002a955 	.word	0x0002a955
   2ac0c:	000337a5 	.word	0x000337a5

0002ac10 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2ac10:	b580      	push	{r7, lr}
   2ac12:	b084      	sub	sp, #16
   2ac14:	af00      	add	r7, sp, #0
   2ac16:	0002      	movs	r2, r0
   2ac18:	6039      	str	r1, [r7, #0]
   2ac1a:	1dfb      	adds	r3, r7, #7
   2ac1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2ac1e:	1dfb      	adds	r3, r7, #7
   2ac20:	781b      	ldrb	r3, [r3, #0]
   2ac22:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2ac24:	683b      	ldr	r3, [r7, #0]
   2ac26:	781b      	ldrb	r3, [r3, #0]
   2ac28:	021b      	lsls	r3, r3, #8
   2ac2a:	001a      	movs	r2, r3
   2ac2c:	68fb      	ldr	r3, [r7, #12]
   2ac2e:	4313      	orrs	r3, r2
   2ac30:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2ac32:	1dfb      	adds	r3, r7, #7
   2ac34:	781b      	ldrb	r3, [r3, #0]
   2ac36:	0018      	movs	r0, r3
   2ac38:	4b04      	ldr	r3, [pc, #16]	; (2ac4c <system_gclk_chan_set_config+0x3c>)
   2ac3a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2ac3c:	4b04      	ldr	r3, [pc, #16]	; (2ac50 <system_gclk_chan_set_config+0x40>)
   2ac3e:	68fa      	ldr	r2, [r7, #12]
   2ac40:	b292      	uxth	r2, r2
   2ac42:	805a      	strh	r2, [r3, #2]
}
   2ac44:	46c0      	nop			; (mov r8, r8)
   2ac46:	46bd      	mov	sp, r7
   2ac48:	b004      	add	sp, #16
   2ac4a:	bd80      	pop	{r7, pc}
   2ac4c:	0002ac9d 	.word	0x0002ac9d
   2ac50:	40000c00 	.word	0x40000c00

0002ac54 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2ac54:	b580      	push	{r7, lr}
   2ac56:	b082      	sub	sp, #8
   2ac58:	af00      	add	r7, sp, #0
   2ac5a:	0002      	movs	r2, r0
   2ac5c:	1dfb      	adds	r3, r7, #7
   2ac5e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2ac60:	4b0a      	ldr	r3, [pc, #40]	; (2ac8c <system_gclk_chan_enable+0x38>)
   2ac62:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ac64:	4a0a      	ldr	r2, [pc, #40]	; (2ac90 <system_gclk_chan_enable+0x3c>)
   2ac66:	1dfb      	adds	r3, r7, #7
   2ac68:	781b      	ldrb	r3, [r3, #0]
   2ac6a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2ac6c:	4909      	ldr	r1, [pc, #36]	; (2ac94 <system_gclk_chan_enable+0x40>)
   2ac6e:	4b09      	ldr	r3, [pc, #36]	; (2ac94 <system_gclk_chan_enable+0x40>)
   2ac70:	885b      	ldrh	r3, [r3, #2]
   2ac72:	b29b      	uxth	r3, r3
   2ac74:	2280      	movs	r2, #128	; 0x80
   2ac76:	01d2      	lsls	r2, r2, #7
   2ac78:	4313      	orrs	r3, r2
   2ac7a:	b29b      	uxth	r3, r3
   2ac7c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2ac7e:	4b06      	ldr	r3, [pc, #24]	; (2ac98 <system_gclk_chan_enable+0x44>)
   2ac80:	4798      	blx	r3
}
   2ac82:	46c0      	nop			; (mov r8, r8)
   2ac84:	46bd      	mov	sp, r7
   2ac86:	b002      	add	sp, #8
   2ac88:	bd80      	pop	{r7, pc}
   2ac8a:	46c0      	nop			; (mov r8, r8)
   2ac8c:	0002a941 	.word	0x0002a941
   2ac90:	40000c02 	.word	0x40000c02
   2ac94:	40000c00 	.word	0x40000c00
   2ac98:	0002a955 	.word	0x0002a955

0002ac9c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2ac9c:	b580      	push	{r7, lr}
   2ac9e:	b084      	sub	sp, #16
   2aca0:	af00      	add	r7, sp, #0
   2aca2:	0002      	movs	r2, r0
   2aca4:	1dfb      	adds	r3, r7, #7
   2aca6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aca8:	4b1c      	ldr	r3, [pc, #112]	; (2ad1c <system_gclk_chan_disable+0x80>)
   2acaa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2acac:	4a1c      	ldr	r2, [pc, #112]	; (2ad20 <system_gclk_chan_disable+0x84>)
   2acae:	1dfb      	adds	r3, r7, #7
   2acb0:	781b      	ldrb	r3, [r3, #0]
   2acb2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2acb4:	4b1b      	ldr	r3, [pc, #108]	; (2ad24 <system_gclk_chan_disable+0x88>)
   2acb6:	885b      	ldrh	r3, [r3, #2]
   2acb8:	051b      	lsls	r3, r3, #20
   2acba:	0f1b      	lsrs	r3, r3, #28
   2acbc:	b2db      	uxtb	r3, r3
   2acbe:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2acc0:	4a18      	ldr	r2, [pc, #96]	; (2ad24 <system_gclk_chan_disable+0x88>)
   2acc2:	8853      	ldrh	r3, [r2, #2]
   2acc4:	4918      	ldr	r1, [pc, #96]	; (2ad28 <system_gclk_chan_disable+0x8c>)
   2acc6:	400b      	ands	r3, r1
   2acc8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2acca:	4a16      	ldr	r2, [pc, #88]	; (2ad24 <system_gclk_chan_disable+0x88>)
   2accc:	4b15      	ldr	r3, [pc, #84]	; (2ad24 <system_gclk_chan_disable+0x88>)
   2acce:	885b      	ldrh	r3, [r3, #2]
   2acd0:	b29b      	uxth	r3, r3
   2acd2:	4916      	ldr	r1, [pc, #88]	; (2ad2c <system_gclk_chan_disable+0x90>)
   2acd4:	400b      	ands	r3, r1
   2acd6:	b29b      	uxth	r3, r3
   2acd8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2acda:	46c0      	nop			; (mov r8, r8)
   2acdc:	4b11      	ldr	r3, [pc, #68]	; (2ad24 <system_gclk_chan_disable+0x88>)
   2acde:	885b      	ldrh	r3, [r3, #2]
   2ace0:	b29b      	uxth	r3, r3
   2ace2:	001a      	movs	r2, r3
   2ace4:	2380      	movs	r3, #128	; 0x80
   2ace6:	01db      	lsls	r3, r3, #7
   2ace8:	4013      	ands	r3, r2
   2acea:	d1f7      	bne.n	2acdc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2acec:	4a0d      	ldr	r2, [pc, #52]	; (2ad24 <system_gclk_chan_disable+0x88>)
   2acee:	68fb      	ldr	r3, [r7, #12]
   2acf0:	b2db      	uxtb	r3, r3
   2acf2:	1c19      	adds	r1, r3, #0
   2acf4:	230f      	movs	r3, #15
   2acf6:	400b      	ands	r3, r1
   2acf8:	b2d9      	uxtb	r1, r3
   2acfa:	8853      	ldrh	r3, [r2, #2]
   2acfc:	1c08      	adds	r0, r1, #0
   2acfe:	210f      	movs	r1, #15
   2ad00:	4001      	ands	r1, r0
   2ad02:	0208      	lsls	r0, r1, #8
   2ad04:	4908      	ldr	r1, [pc, #32]	; (2ad28 <system_gclk_chan_disable+0x8c>)
   2ad06:	400b      	ands	r3, r1
   2ad08:	1c19      	adds	r1, r3, #0
   2ad0a:	1c03      	adds	r3, r0, #0
   2ad0c:	430b      	orrs	r3, r1
   2ad0e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2ad10:	4b07      	ldr	r3, [pc, #28]	; (2ad30 <system_gclk_chan_disable+0x94>)
   2ad12:	4798      	blx	r3
}
   2ad14:	46c0      	nop			; (mov r8, r8)
   2ad16:	46bd      	mov	sp, r7
   2ad18:	b004      	add	sp, #16
   2ad1a:	bd80      	pop	{r7, pc}
   2ad1c:	0002a941 	.word	0x0002a941
   2ad20:	40000c02 	.word	0x40000c02
   2ad24:	40000c00 	.word	0x40000c00
   2ad28:	fffff0ff 	.word	0xfffff0ff
   2ad2c:	ffffbfff 	.word	0xffffbfff
   2ad30:	0002a955 	.word	0x0002a955

0002ad34 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2ad34:	b580      	push	{r7, lr}
   2ad36:	b084      	sub	sp, #16
   2ad38:	af00      	add	r7, sp, #0
   2ad3a:	0002      	movs	r2, r0
   2ad3c:	1dfb      	adds	r3, r7, #7
   2ad3e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2ad40:	4b0d      	ldr	r3, [pc, #52]	; (2ad78 <system_gclk_chan_get_hz+0x44>)
   2ad42:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ad44:	4a0d      	ldr	r2, [pc, #52]	; (2ad7c <system_gclk_chan_get_hz+0x48>)
   2ad46:	1dfb      	adds	r3, r7, #7
   2ad48:	781b      	ldrb	r3, [r3, #0]
   2ad4a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2ad4c:	4b0c      	ldr	r3, [pc, #48]	; (2ad80 <system_gclk_chan_get_hz+0x4c>)
   2ad4e:	885b      	ldrh	r3, [r3, #2]
   2ad50:	051b      	lsls	r3, r3, #20
   2ad52:	0f1b      	lsrs	r3, r3, #28
   2ad54:	b2da      	uxtb	r2, r3
   2ad56:	230f      	movs	r3, #15
   2ad58:	18fb      	adds	r3, r7, r3
   2ad5a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2ad5c:	4b09      	ldr	r3, [pc, #36]	; (2ad84 <system_gclk_chan_get_hz+0x50>)
   2ad5e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2ad60:	230f      	movs	r3, #15
   2ad62:	18fb      	adds	r3, r7, r3
   2ad64:	781b      	ldrb	r3, [r3, #0]
   2ad66:	0018      	movs	r0, r3
   2ad68:	4b07      	ldr	r3, [pc, #28]	; (2ad88 <system_gclk_chan_get_hz+0x54>)
   2ad6a:	4798      	blx	r3
   2ad6c:	0003      	movs	r3, r0
}
   2ad6e:	0018      	movs	r0, r3
   2ad70:	46bd      	mov	sp, r7
   2ad72:	b004      	add	sp, #16
   2ad74:	bd80      	pop	{r7, pc}
   2ad76:	46c0      	nop			; (mov r8, r8)
   2ad78:	0002a941 	.word	0x0002a941
   2ad7c:	40000c02 	.word	0x40000c02
   2ad80:	40000c00 	.word	0x40000c00
   2ad84:	0002a955 	.word	0x0002a955
   2ad88:	0002ab39 	.word	0x0002ab39

0002ad8c <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2ad8c:	b580      	push	{r7, lr}
   2ad8e:	b084      	sub	sp, #16
   2ad90:	af00      	add	r7, sp, #0
   2ad92:	0002      	movs	r2, r0
   2ad94:	1dfb      	adds	r3, r7, #7
   2ad96:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2ad98:	230f      	movs	r3, #15
   2ad9a:	18fb      	adds	r3, r7, r3
   2ad9c:	2200      	movs	r2, #0
   2ad9e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2ada0:	1dfb      	adds	r3, r7, #7
   2ada2:	781b      	ldrb	r3, [r3, #0]
   2ada4:	2b7f      	cmp	r3, #127	; 0x7f
   2ada6:	d80b      	bhi.n	2adc0 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2ada8:	4a13      	ldr	r2, [pc, #76]	; (2adf8 <system_interrupt_clear_pending+0x6c>)
   2adaa:	1dfb      	adds	r3, r7, #7
   2adac:	781b      	ldrb	r3, [r3, #0]
   2adae:	b25b      	sxtb	r3, r3
   2adb0:	2101      	movs	r1, #1
   2adb2:	4099      	lsls	r1, r3
   2adb4:	000b      	movs	r3, r1
   2adb6:	0019      	movs	r1, r3
   2adb8:	23c0      	movs	r3, #192	; 0xc0
   2adba:	005b      	lsls	r3, r3, #1
   2adbc:	50d1      	str	r1, [r2, r3]
   2adbe:	e014      	b.n	2adea <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2adc0:	1dfb      	adds	r3, r7, #7
   2adc2:	781b      	ldrb	r3, [r3, #0]
   2adc4:	b25b      	sxtb	r3, r3
   2adc6:	330e      	adds	r3, #14
   2adc8:	d101      	bne.n	2adce <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2adca:	2317      	movs	r3, #23
   2adcc:	e010      	b.n	2adf0 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2adce:	1dfb      	adds	r3, r7, #7
   2add0:	781b      	ldrb	r3, [r3, #0]
   2add2:	b25b      	sxtb	r3, r3
   2add4:	3301      	adds	r3, #1
   2add6:	d104      	bne.n	2ade2 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2add8:	4b08      	ldr	r3, [pc, #32]	; (2adfc <system_interrupt_clear_pending+0x70>)
   2adda:	2280      	movs	r2, #128	; 0x80
   2addc:	0492      	lsls	r2, r2, #18
   2adde:	605a      	str	r2, [r3, #4]
   2ade0:	e003      	b.n	2adea <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2ade2:	230f      	movs	r3, #15
   2ade4:	18fb      	adds	r3, r7, r3
   2ade6:	2217      	movs	r2, #23
   2ade8:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2adea:	230f      	movs	r3, #15
   2adec:	18fb      	adds	r3, r7, r3
   2adee:	781b      	ldrb	r3, [r3, #0]
}
   2adf0:	0018      	movs	r0, r3
   2adf2:	46bd      	mov	sp, r7
   2adf4:	b004      	add	sp, #16
   2adf6:	bd80      	pop	{r7, pc}
   2adf8:	e000e100 	.word	0xe000e100
   2adfc:	e000ed00 	.word	0xe000ed00

0002ae00 <system_pinmux_get_group_from_gpio_pin>:
{
   2ae00:	b580      	push	{r7, lr}
   2ae02:	b084      	sub	sp, #16
   2ae04:	af00      	add	r7, sp, #0
   2ae06:	0002      	movs	r2, r0
   2ae08:	1dfb      	adds	r3, r7, #7
   2ae0a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2ae0c:	230f      	movs	r3, #15
   2ae0e:	18fb      	adds	r3, r7, r3
   2ae10:	1dfa      	adds	r2, r7, #7
   2ae12:	7812      	ldrb	r2, [r2, #0]
   2ae14:	09d2      	lsrs	r2, r2, #7
   2ae16:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2ae18:	230e      	movs	r3, #14
   2ae1a:	18fb      	adds	r3, r7, r3
   2ae1c:	1dfa      	adds	r2, r7, #7
   2ae1e:	7812      	ldrb	r2, [r2, #0]
   2ae20:	0952      	lsrs	r2, r2, #5
   2ae22:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2ae24:	4b0d      	ldr	r3, [pc, #52]	; (2ae5c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2ae26:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2ae28:	230f      	movs	r3, #15
   2ae2a:	18fb      	adds	r3, r7, r3
   2ae2c:	781b      	ldrb	r3, [r3, #0]
   2ae2e:	2b00      	cmp	r3, #0
   2ae30:	d10f      	bne.n	2ae52 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2ae32:	230f      	movs	r3, #15
   2ae34:	18fb      	adds	r3, r7, r3
   2ae36:	781b      	ldrb	r3, [r3, #0]
   2ae38:	009b      	lsls	r3, r3, #2
   2ae3a:	2210      	movs	r2, #16
   2ae3c:	4694      	mov	ip, r2
   2ae3e:	44bc      	add	ip, r7
   2ae40:	4463      	add	r3, ip
   2ae42:	3b08      	subs	r3, #8
   2ae44:	681a      	ldr	r2, [r3, #0]
   2ae46:	230e      	movs	r3, #14
   2ae48:	18fb      	adds	r3, r7, r3
   2ae4a:	781b      	ldrb	r3, [r3, #0]
   2ae4c:	01db      	lsls	r3, r3, #7
   2ae4e:	18d3      	adds	r3, r2, r3
   2ae50:	e000      	b.n	2ae54 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2ae52:	2300      	movs	r3, #0
}
   2ae54:	0018      	movs	r0, r3
   2ae56:	46bd      	mov	sp, r7
   2ae58:	b004      	add	sp, #16
   2ae5a:	bd80      	pop	{r7, pc}
   2ae5c:	41004400 	.word	0x41004400

0002ae60 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2ae60:	b580      	push	{r7, lr}
   2ae62:	b088      	sub	sp, #32
   2ae64:	af00      	add	r7, sp, #0
   2ae66:	60f8      	str	r0, [r7, #12]
   2ae68:	60b9      	str	r1, [r7, #8]
   2ae6a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2ae6c:	2300      	movs	r3, #0
   2ae6e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2ae70:	687b      	ldr	r3, [r7, #4]
   2ae72:	78db      	ldrb	r3, [r3, #3]
   2ae74:	2201      	movs	r2, #1
   2ae76:	4053      	eors	r3, r2
   2ae78:	b2db      	uxtb	r3, r3
   2ae7a:	2b00      	cmp	r3, #0
   2ae7c:	d035      	beq.n	2aeea <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2ae7e:	687b      	ldr	r3, [r7, #4]
   2ae80:	781b      	ldrb	r3, [r3, #0]
   2ae82:	2b80      	cmp	r3, #128	; 0x80
   2ae84:	d00b      	beq.n	2ae9e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2ae86:	69fb      	ldr	r3, [r7, #28]
   2ae88:	2280      	movs	r2, #128	; 0x80
   2ae8a:	0252      	lsls	r2, r2, #9
   2ae8c:	4313      	orrs	r3, r2
   2ae8e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2ae90:	687b      	ldr	r3, [r7, #4]
   2ae92:	781b      	ldrb	r3, [r3, #0]
   2ae94:	061b      	lsls	r3, r3, #24
   2ae96:	001a      	movs	r2, r3
   2ae98:	69fb      	ldr	r3, [r7, #28]
   2ae9a:	4313      	orrs	r3, r2
   2ae9c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ae9e:	687b      	ldr	r3, [r7, #4]
   2aea0:	785b      	ldrb	r3, [r3, #1]
   2aea2:	2b00      	cmp	r3, #0
   2aea4:	d003      	beq.n	2aeae <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2aea6:	687b      	ldr	r3, [r7, #4]
   2aea8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2aeaa:	2b02      	cmp	r3, #2
   2aeac:	d110      	bne.n	2aed0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2aeae:	69fb      	ldr	r3, [r7, #28]
   2aeb0:	2280      	movs	r2, #128	; 0x80
   2aeb2:	0292      	lsls	r2, r2, #10
   2aeb4:	4313      	orrs	r3, r2
   2aeb6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2aeb8:	687b      	ldr	r3, [r7, #4]
   2aeba:	789b      	ldrb	r3, [r3, #2]
   2aebc:	2b00      	cmp	r3, #0
   2aebe:	d004      	beq.n	2aeca <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2aec0:	69fb      	ldr	r3, [r7, #28]
   2aec2:	2280      	movs	r2, #128	; 0x80
   2aec4:	02d2      	lsls	r2, r2, #11
   2aec6:	4313      	orrs	r3, r2
   2aec8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2aeca:	68fb      	ldr	r3, [r7, #12]
   2aecc:	68ba      	ldr	r2, [r7, #8]
   2aece:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2aed0:	687b      	ldr	r3, [r7, #4]
   2aed2:	785b      	ldrb	r3, [r3, #1]
   2aed4:	2b01      	cmp	r3, #1
   2aed6:	d003      	beq.n	2aee0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2aed8:	687b      	ldr	r3, [r7, #4]
   2aeda:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2aedc:	2b02      	cmp	r3, #2
   2aede:	d107      	bne.n	2aef0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2aee0:	69fb      	ldr	r3, [r7, #28]
   2aee2:	4a22      	ldr	r2, [pc, #136]	; (2af6c <_system_pinmux_config+0x10c>)
   2aee4:	4013      	ands	r3, r2
   2aee6:	61fb      	str	r3, [r7, #28]
   2aee8:	e002      	b.n	2aef0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2aeea:	68fb      	ldr	r3, [r7, #12]
   2aeec:	68ba      	ldr	r2, [r7, #8]
   2aeee:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2aef0:	68bb      	ldr	r3, [r7, #8]
   2aef2:	041b      	lsls	r3, r3, #16
   2aef4:	0c1b      	lsrs	r3, r3, #16
   2aef6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2aef8:	68bb      	ldr	r3, [r7, #8]
   2aefa:	0c1b      	lsrs	r3, r3, #16
   2aefc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2aefe:	69ba      	ldr	r2, [r7, #24]
   2af00:	69fb      	ldr	r3, [r7, #28]
   2af02:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2af04:	22a0      	movs	r2, #160	; 0xa0
   2af06:	05d2      	lsls	r2, r2, #23
   2af08:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2af0a:	68fb      	ldr	r3, [r7, #12]
   2af0c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2af0e:	697a      	ldr	r2, [r7, #20]
   2af10:	69fb      	ldr	r3, [r7, #28]
   2af12:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2af14:	22d0      	movs	r2, #208	; 0xd0
   2af16:	0612      	lsls	r2, r2, #24
   2af18:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2af1a:	68fb      	ldr	r3, [r7, #12]
   2af1c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2af1e:	687b      	ldr	r3, [r7, #4]
   2af20:	78db      	ldrb	r3, [r3, #3]
   2af22:	2201      	movs	r2, #1
   2af24:	4053      	eors	r3, r2
   2af26:	b2db      	uxtb	r3, r3
   2af28:	2b00      	cmp	r3, #0
   2af2a:	d01a      	beq.n	2af62 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2af2c:	69fa      	ldr	r2, [r7, #28]
   2af2e:	2380      	movs	r3, #128	; 0x80
   2af30:	02db      	lsls	r3, r3, #11
   2af32:	4013      	ands	r3, r2
   2af34:	d00a      	beq.n	2af4c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2af36:	687b      	ldr	r3, [r7, #4]
   2af38:	789b      	ldrb	r3, [r3, #2]
   2af3a:	2b01      	cmp	r3, #1
   2af3c:	d103      	bne.n	2af46 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2af3e:	68fb      	ldr	r3, [r7, #12]
   2af40:	68ba      	ldr	r2, [r7, #8]
   2af42:	619a      	str	r2, [r3, #24]
   2af44:	e002      	b.n	2af4c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2af46:	68fb      	ldr	r3, [r7, #12]
   2af48:	68ba      	ldr	r2, [r7, #8]
   2af4a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2af4c:	687b      	ldr	r3, [r7, #4]
   2af4e:	785b      	ldrb	r3, [r3, #1]
   2af50:	2b01      	cmp	r3, #1
   2af52:	d003      	beq.n	2af5c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2af54:	687b      	ldr	r3, [r7, #4]
   2af56:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2af58:	2b02      	cmp	r3, #2
   2af5a:	d102      	bne.n	2af62 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2af5c:	68fb      	ldr	r3, [r7, #12]
   2af5e:	68ba      	ldr	r2, [r7, #8]
   2af60:	609a      	str	r2, [r3, #8]
		}
	}
}
   2af62:	46c0      	nop			; (mov r8, r8)
   2af64:	46bd      	mov	sp, r7
   2af66:	b008      	add	sp, #32
   2af68:	bd80      	pop	{r7, pc}
   2af6a:	46c0      	nop			; (mov r8, r8)
   2af6c:	fffbffff 	.word	0xfffbffff

0002af70 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2af70:	b580      	push	{r7, lr}
   2af72:	b084      	sub	sp, #16
   2af74:	af00      	add	r7, sp, #0
   2af76:	0002      	movs	r2, r0
   2af78:	6039      	str	r1, [r7, #0]
   2af7a:	1dfb      	adds	r3, r7, #7
   2af7c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2af7e:	1dfb      	adds	r3, r7, #7
   2af80:	781b      	ldrb	r3, [r3, #0]
   2af82:	0018      	movs	r0, r3
   2af84:	4b0a      	ldr	r3, [pc, #40]	; (2afb0 <system_pinmux_pin_set_config+0x40>)
   2af86:	4798      	blx	r3
   2af88:	0003      	movs	r3, r0
   2af8a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2af8c:	1dfb      	adds	r3, r7, #7
   2af8e:	781b      	ldrb	r3, [r3, #0]
   2af90:	221f      	movs	r2, #31
   2af92:	4013      	ands	r3, r2
   2af94:	2201      	movs	r2, #1
   2af96:	409a      	lsls	r2, r3
   2af98:	0013      	movs	r3, r2
   2af9a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2af9c:	683a      	ldr	r2, [r7, #0]
   2af9e:	68b9      	ldr	r1, [r7, #8]
   2afa0:	68fb      	ldr	r3, [r7, #12]
   2afa2:	0018      	movs	r0, r3
   2afa4:	4b03      	ldr	r3, [pc, #12]	; (2afb4 <system_pinmux_pin_set_config+0x44>)
   2afa6:	4798      	blx	r3
}
   2afa8:	46c0      	nop			; (mov r8, r8)
   2afaa:	46bd      	mov	sp, r7
   2afac:	b004      	add	sp, #16
   2afae:	bd80      	pop	{r7, pc}
   2afb0:	0002ae01 	.word	0x0002ae01
   2afb4:	0002ae61 	.word	0x0002ae61

0002afb8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2afb8:	b580      	push	{r7, lr}
   2afba:	af00      	add	r7, sp, #0
	return;
   2afbc:	46c0      	nop			; (mov r8, r8)
}
   2afbe:	46bd      	mov	sp, r7
   2afc0:	bd80      	pop	{r7, pc}
	...

0002afc4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2afc4:	b580      	push	{r7, lr}
   2afc6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2afc8:	4b06      	ldr	r3, [pc, #24]	; (2afe4 <system_init+0x20>)
   2afca:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2afcc:	4b06      	ldr	r3, [pc, #24]	; (2afe8 <system_init+0x24>)
   2afce:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2afd0:	4b06      	ldr	r3, [pc, #24]	; (2afec <system_init+0x28>)
   2afd2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2afd4:	4b06      	ldr	r3, [pc, #24]	; (2aff0 <system_init+0x2c>)
   2afd6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2afd8:	4b06      	ldr	r3, [pc, #24]	; (2aff4 <system_init+0x30>)
   2afda:	4798      	blx	r3
}
   2afdc:	46c0      	nop			; (mov r8, r8)
   2afde:	46bd      	mov	sp, r7
   2afe0:	bd80      	pop	{r7, pc}
   2afe2:	46c0      	nop			; (mov r8, r8)
   2afe4:	0002a645 	.word	0x0002a645
   2afe8:	0002710d 	.word	0x0002710d
   2afec:	00013899 	.word	0x00013899
   2aff0:	000274e5 	.word	0x000274e5
   2aff4:	0002afb9 	.word	0x0002afb9

0002aff8 <system_gclk_chan_get_config_defaults>:
{
   2aff8:	b580      	push	{r7, lr}
   2affa:	b082      	sub	sp, #8
   2affc:	af00      	add	r7, sp, #0
   2affe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b000:	687b      	ldr	r3, [r7, #4]
   2b002:	2200      	movs	r2, #0
   2b004:	701a      	strb	r2, [r3, #0]
}
   2b006:	46c0      	nop			; (mov r8, r8)
   2b008:	46bd      	mov	sp, r7
   2b00a:	b002      	add	sp, #8
   2b00c:	bd80      	pop	{r7, pc}
	...

0002b010 <system_apb_clock_set_mask>:
{
   2b010:	b580      	push	{r7, lr}
   2b012:	b082      	sub	sp, #8
   2b014:	af00      	add	r7, sp, #0
   2b016:	0002      	movs	r2, r0
   2b018:	6039      	str	r1, [r7, #0]
   2b01a:	1dfb      	adds	r3, r7, #7
   2b01c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b01e:	1dfb      	adds	r3, r7, #7
   2b020:	781b      	ldrb	r3, [r3, #0]
   2b022:	2b01      	cmp	r3, #1
   2b024:	d00a      	beq.n	2b03c <system_apb_clock_set_mask+0x2c>
   2b026:	2b02      	cmp	r3, #2
   2b028:	d00f      	beq.n	2b04a <system_apb_clock_set_mask+0x3a>
   2b02a:	2b00      	cmp	r3, #0
   2b02c:	d114      	bne.n	2b058 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2b02e:	4b0e      	ldr	r3, [pc, #56]	; (2b068 <system_apb_clock_set_mask+0x58>)
   2b030:	4a0d      	ldr	r2, [pc, #52]	; (2b068 <system_apb_clock_set_mask+0x58>)
   2b032:	6991      	ldr	r1, [r2, #24]
   2b034:	683a      	ldr	r2, [r7, #0]
   2b036:	430a      	orrs	r2, r1
   2b038:	619a      	str	r2, [r3, #24]
			break;
   2b03a:	e00f      	b.n	2b05c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2b03c:	4b0a      	ldr	r3, [pc, #40]	; (2b068 <system_apb_clock_set_mask+0x58>)
   2b03e:	4a0a      	ldr	r2, [pc, #40]	; (2b068 <system_apb_clock_set_mask+0x58>)
   2b040:	69d1      	ldr	r1, [r2, #28]
   2b042:	683a      	ldr	r2, [r7, #0]
   2b044:	430a      	orrs	r2, r1
   2b046:	61da      	str	r2, [r3, #28]
			break;
   2b048:	e008      	b.n	2b05c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2b04a:	4b07      	ldr	r3, [pc, #28]	; (2b068 <system_apb_clock_set_mask+0x58>)
   2b04c:	4a06      	ldr	r2, [pc, #24]	; (2b068 <system_apb_clock_set_mask+0x58>)
   2b04e:	6a11      	ldr	r1, [r2, #32]
   2b050:	683a      	ldr	r2, [r7, #0]
   2b052:	430a      	orrs	r2, r1
   2b054:	621a      	str	r2, [r3, #32]
			break;
   2b056:	e001      	b.n	2b05c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2b058:	2317      	movs	r3, #23
   2b05a:	e000      	b.n	2b05e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2b05c:	2300      	movs	r3, #0
}
   2b05e:	0018      	movs	r0, r3
   2b060:	46bd      	mov	sp, r7
   2b062:	b002      	add	sp, #8
   2b064:	bd80      	pop	{r7, pc}
   2b066:	46c0      	nop			; (mov r8, r8)
   2b068:	40000400 	.word	0x40000400

0002b06c <system_pinmux_get_config_defaults>:
{
   2b06c:	b580      	push	{r7, lr}
   2b06e:	b082      	sub	sp, #8
   2b070:	af00      	add	r7, sp, #0
   2b072:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2b074:	687b      	ldr	r3, [r7, #4]
   2b076:	2280      	movs	r2, #128	; 0x80
   2b078:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2b07a:	687b      	ldr	r3, [r7, #4]
   2b07c:	2200      	movs	r2, #0
   2b07e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2b080:	687b      	ldr	r3, [r7, #4]
   2b082:	2201      	movs	r2, #1
   2b084:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2b086:	687b      	ldr	r3, [r7, #4]
   2b088:	2200      	movs	r2, #0
   2b08a:	70da      	strb	r2, [r3, #3]
}
   2b08c:	46c0      	nop			; (mov r8, r8)
   2b08e:	46bd      	mov	sp, r7
   2b090:	b002      	add	sp, #8
   2b092:	bd80      	pop	{r7, pc}

0002b094 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2b094:	b580      	push	{r7, lr}
   2b096:	b084      	sub	sp, #16
   2b098:	af00      	add	r7, sp, #0
   2b09a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2b09c:	2300      	movs	r3, #0
   2b09e:	60fb      	str	r3, [r7, #12]
   2b0a0:	e00c      	b.n	2b0bc <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2b0a2:	4b0a      	ldr	r3, [pc, #40]	; (2b0cc <_tcc_get_inst_index+0x38>)
   2b0a4:	68fa      	ldr	r2, [r7, #12]
   2b0a6:	0092      	lsls	r2, r2, #2
   2b0a8:	58d2      	ldr	r2, [r2, r3]
   2b0aa:	687b      	ldr	r3, [r7, #4]
   2b0ac:	429a      	cmp	r2, r3
   2b0ae:	d102      	bne.n	2b0b6 <_tcc_get_inst_index+0x22>
			return i;
   2b0b0:	68fb      	ldr	r3, [r7, #12]
   2b0b2:	b2db      	uxtb	r3, r3
   2b0b4:	e006      	b.n	2b0c4 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2b0b6:	68fb      	ldr	r3, [r7, #12]
   2b0b8:	3301      	adds	r3, #1
   2b0ba:	60fb      	str	r3, [r7, #12]
   2b0bc:	68fb      	ldr	r3, [r7, #12]
   2b0be:	2b02      	cmp	r3, #2
   2b0c0:	d9ef      	bls.n	2b0a2 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2b0c2:	2300      	movs	r3, #0
}
   2b0c4:	0018      	movs	r0, r3
   2b0c6:	46bd      	mov	sp, r7
   2b0c8:	b004      	add	sp, #16
   2b0ca:	bd80      	pop	{r7, pc}
   2b0cc:	0003a4a8 	.word	0x0003a4a8

0002b0d0 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2b0d0:	b590      	push	{r4, r7, lr}
   2b0d2:	b085      	sub	sp, #20
   2b0d4:	af00      	add	r7, sp, #0
   2b0d6:	6078      	str	r0, [r7, #4]
   2b0d8:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b0da:	230f      	movs	r3, #15
   2b0dc:	18fc      	adds	r4, r7, r3
   2b0de:	683b      	ldr	r3, [r7, #0]
   2b0e0:	0018      	movs	r0, r3
   2b0e2:	4bad      	ldr	r3, [pc, #692]	; (2b398 <tcc_get_config_defaults+0x2c8>)
   2b0e4:	4798      	blx	r3
   2b0e6:	0003      	movs	r3, r0
   2b0e8:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2b0ea:	687b      	ldr	r3, [r7, #4]
   2b0ec:	2200      	movs	r2, #0
   2b0ee:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2b0f0:	230f      	movs	r3, #15
   2b0f2:	18fb      	adds	r3, r7, r3
   2b0f4:	781a      	ldrb	r2, [r3, #0]
   2b0f6:	4ba9      	ldr	r3, [pc, #676]	; (2b39c <tcc_get_config_defaults+0x2cc>)
   2b0f8:	0092      	lsls	r2, r2, #2
   2b0fa:	58d2      	ldr	r2, [r2, r3]
   2b0fc:	687b      	ldr	r3, [r7, #4]
   2b0fe:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2b100:	687b      	ldr	r3, [r7, #4]
   2b102:	2200      	movs	r2, #0
   2b104:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2b106:	687b      	ldr	r3, [r7, #4]
   2b108:	2200      	movs	r2, #0
   2b10a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2b10c:	687b      	ldr	r3, [r7, #4]
   2b10e:	2200      	movs	r2, #0
   2b110:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2b112:	687b      	ldr	r3, [r7, #4]
   2b114:	2200      	movs	r2, #0
   2b116:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2b118:	687b      	ldr	r3, [r7, #4]
   2b11a:	2200      	movs	r2, #0
   2b11c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b11e:	687b      	ldr	r3, [r7, #4]
   2b120:	2200      	movs	r2, #0
   2b122:	61da      	str	r2, [r3, #28]
   2b124:	687b      	ldr	r3, [r7, #4]
   2b126:	2200      	movs	r2, #0
   2b128:	621a      	str	r2, [r3, #32]
   2b12a:	687b      	ldr	r3, [r7, #4]
   2b12c:	2200      	movs	r2, #0
   2b12e:	625a      	str	r2, [r3, #36]	; 0x24
   2b130:	687b      	ldr	r3, [r7, #4]
   2b132:	2200      	movs	r2, #0
   2b134:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b136:	687b      	ldr	r3, [r7, #4]
   2b138:	2200      	movs	r2, #0
   2b13a:	751a      	strb	r2, [r3, #20]
   2b13c:	687b      	ldr	r3, [r7, #4]
   2b13e:	2200      	movs	r2, #0
   2b140:	755a      	strb	r2, [r3, #21]
   2b142:	687b      	ldr	r3, [r7, #4]
   2b144:	2200      	movs	r2, #0
   2b146:	759a      	strb	r2, [r3, #22]
   2b148:	687b      	ldr	r3, [r7, #4]
   2b14a:	2200      	movs	r2, #0
   2b14c:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2b14e:	687b      	ldr	r3, [r7, #4]
   2b150:	2200      	movs	r2, #0
   2b152:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2b154:	687b      	ldr	r3, [r7, #4]
   2b156:	2200      	movs	r2, #0
   2b158:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b15a:	687b      	ldr	r3, [r7, #4]
   2b15c:	2200      	movs	r2, #0
   2b15e:	741a      	strb	r2, [r3, #16]
   2b160:	687b      	ldr	r3, [r7, #4]
   2b162:	2200      	movs	r2, #0
   2b164:	745a      	strb	r2, [r3, #17]
   2b166:	687b      	ldr	r3, [r7, #4]
   2b168:	2200      	movs	r2, #0
   2b16a:	749a      	strb	r2, [r3, #18]
   2b16c:	687b      	ldr	r3, [r7, #4]
   2b16e:	2200      	movs	r2, #0
   2b170:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2b172:	687b      	ldr	r3, [r7, #4]
   2b174:	222c      	movs	r2, #44	; 0x2c
   2b176:	2100      	movs	r1, #0
   2b178:	5499      	strb	r1, [r3, r2]
   2b17a:	687b      	ldr	r3, [r7, #4]
   2b17c:	222d      	movs	r2, #45	; 0x2d
   2b17e:	2100      	movs	r1, #0
   2b180:	5499      	strb	r1, [r3, r2]
   2b182:	687b      	ldr	r3, [r7, #4]
   2b184:	222e      	movs	r2, #46	; 0x2e
   2b186:	2100      	movs	r1, #0
   2b188:	5499      	strb	r1, [r3, r2]
   2b18a:	687b      	ldr	r3, [r7, #4]
   2b18c:	222f      	movs	r2, #47	; 0x2f
   2b18e:	2100      	movs	r1, #0
   2b190:	5499      	strb	r1, [r3, r2]
   2b192:	687b      	ldr	r3, [r7, #4]
   2b194:	2230      	movs	r2, #48	; 0x30
   2b196:	2100      	movs	r1, #0
   2b198:	5499      	strb	r1, [r3, r2]
   2b19a:	687b      	ldr	r3, [r7, #4]
   2b19c:	2231      	movs	r2, #49	; 0x31
   2b19e:	2100      	movs	r1, #0
   2b1a0:	5499      	strb	r1, [r3, r2]
   2b1a2:	687b      	ldr	r3, [r7, #4]
   2b1a4:	2232      	movs	r2, #50	; 0x32
   2b1a6:	2100      	movs	r1, #0
   2b1a8:	5499      	strb	r1, [r3, r2]
   2b1aa:	687b      	ldr	r3, [r7, #4]
   2b1ac:	2233      	movs	r2, #51	; 0x33
   2b1ae:	2100      	movs	r1, #0
   2b1b0:	5499      	strb	r1, [r3, r2]
   2b1b2:	687b      	ldr	r3, [r7, #4]
   2b1b4:	2234      	movs	r2, #52	; 0x34
   2b1b6:	2100      	movs	r1, #0
   2b1b8:	5499      	strb	r1, [r3, r2]
   2b1ba:	687b      	ldr	r3, [r7, #4]
   2b1bc:	2235      	movs	r2, #53	; 0x35
   2b1be:	2100      	movs	r1, #0
   2b1c0:	5499      	strb	r1, [r3, r2]
   2b1c2:	687b      	ldr	r3, [r7, #4]
   2b1c4:	2236      	movs	r2, #54	; 0x36
   2b1c6:	2100      	movs	r1, #0
   2b1c8:	5499      	strb	r1, [r3, r2]
   2b1ca:	687b      	ldr	r3, [r7, #4]
   2b1cc:	2237      	movs	r2, #55	; 0x37
   2b1ce:	2100      	movs	r1, #0
   2b1d0:	5499      	strb	r1, [r3, r2]
   2b1d2:	687b      	ldr	r3, [r7, #4]
   2b1d4:	2238      	movs	r2, #56	; 0x38
   2b1d6:	2100      	movs	r1, #0
   2b1d8:	5499      	strb	r1, [r3, r2]
   2b1da:	687b      	ldr	r3, [r7, #4]
   2b1dc:	2239      	movs	r2, #57	; 0x39
   2b1de:	2100      	movs	r1, #0
   2b1e0:	5499      	strb	r1, [r3, r2]
   2b1e2:	687b      	ldr	r3, [r7, #4]
   2b1e4:	223a      	movs	r2, #58	; 0x3a
   2b1e6:	2100      	movs	r1, #0
   2b1e8:	5499      	strb	r1, [r3, r2]
   2b1ea:	687b      	ldr	r3, [r7, #4]
   2b1ec:	223b      	movs	r2, #59	; 0x3b
   2b1ee:	2100      	movs	r1, #0
   2b1f0:	5499      	strb	r1, [r3, r2]
   2b1f2:	687b      	ldr	r3, [r7, #4]
   2b1f4:	223c      	movs	r2, #60	; 0x3c
   2b1f6:	2100      	movs	r1, #0
   2b1f8:	5499      	strb	r1, [r3, r2]
   2b1fa:	687b      	ldr	r3, [r7, #4]
   2b1fc:	223d      	movs	r2, #61	; 0x3d
   2b1fe:	2100      	movs	r1, #0
   2b200:	5499      	strb	r1, [r3, r2]
   2b202:	687b      	ldr	r3, [r7, #4]
   2b204:	223e      	movs	r2, #62	; 0x3e
   2b206:	2100      	movs	r1, #0
   2b208:	5499      	strb	r1, [r3, r2]
   2b20a:	687b      	ldr	r3, [r7, #4]
   2b20c:	223f      	movs	r2, #63	; 0x3f
   2b20e:	2100      	movs	r1, #0
   2b210:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2b212:	687b      	ldr	r3, [r7, #4]
   2b214:	2240      	movs	r2, #64	; 0x40
   2b216:	2100      	movs	r1, #0
   2b218:	5499      	strb	r1, [r3, r2]
   2b21a:	687b      	ldr	r3, [r7, #4]
   2b21c:	2241      	movs	r2, #65	; 0x41
   2b21e:	2100      	movs	r1, #0
   2b220:	5499      	strb	r1, [r3, r2]
   2b222:	687b      	ldr	r3, [r7, #4]
   2b224:	2242      	movs	r2, #66	; 0x42
   2b226:	2100      	movs	r1, #0
   2b228:	5499      	strb	r1, [r3, r2]
   2b22a:	687b      	ldr	r3, [r7, #4]
   2b22c:	2243      	movs	r2, #67	; 0x43
   2b22e:	2100      	movs	r1, #0
   2b230:	5499      	strb	r1, [r3, r2]
   2b232:	687b      	ldr	r3, [r7, #4]
   2b234:	2244      	movs	r2, #68	; 0x44
   2b236:	2100      	movs	r1, #0
   2b238:	5499      	strb	r1, [r3, r2]
   2b23a:	687b      	ldr	r3, [r7, #4]
   2b23c:	2245      	movs	r2, #69	; 0x45
   2b23e:	2100      	movs	r1, #0
   2b240:	5499      	strb	r1, [r3, r2]
   2b242:	687b      	ldr	r3, [r7, #4]
   2b244:	2246      	movs	r2, #70	; 0x46
   2b246:	2100      	movs	r1, #0
   2b248:	5499      	strb	r1, [r3, r2]
   2b24a:	687b      	ldr	r3, [r7, #4]
   2b24c:	2247      	movs	r2, #71	; 0x47
   2b24e:	2100      	movs	r1, #0
   2b250:	5499      	strb	r1, [r3, r2]
   2b252:	687b      	ldr	r3, [r7, #4]
   2b254:	2248      	movs	r2, #72	; 0x48
   2b256:	2100      	movs	r1, #0
   2b258:	5499      	strb	r1, [r3, r2]
   2b25a:	687b      	ldr	r3, [r7, #4]
   2b25c:	2249      	movs	r2, #73	; 0x49
   2b25e:	2100      	movs	r1, #0
   2b260:	5499      	strb	r1, [r3, r2]
   2b262:	687b      	ldr	r3, [r7, #4]
   2b264:	224a      	movs	r2, #74	; 0x4a
   2b266:	2100      	movs	r1, #0
   2b268:	5499      	strb	r1, [r3, r2]
   2b26a:	687b      	ldr	r3, [r7, #4]
   2b26c:	224b      	movs	r2, #75	; 0x4b
   2b26e:	2100      	movs	r1, #0
   2b270:	5499      	strb	r1, [r3, r2]
   2b272:	687b      	ldr	r3, [r7, #4]
   2b274:	224c      	movs	r2, #76	; 0x4c
   2b276:	2100      	movs	r1, #0
   2b278:	5499      	strb	r1, [r3, r2]
   2b27a:	687b      	ldr	r3, [r7, #4]
   2b27c:	224d      	movs	r2, #77	; 0x4d
   2b27e:	2100      	movs	r1, #0
   2b280:	5499      	strb	r1, [r3, r2]
   2b282:	687b      	ldr	r3, [r7, #4]
   2b284:	224e      	movs	r2, #78	; 0x4e
   2b286:	2100      	movs	r1, #0
   2b288:	5499      	strb	r1, [r3, r2]
   2b28a:	687b      	ldr	r3, [r7, #4]
   2b28c:	224f      	movs	r2, #79	; 0x4f
   2b28e:	2100      	movs	r1, #0
   2b290:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2b292:	687b      	ldr	r3, [r7, #4]
   2b294:	2250      	movs	r2, #80	; 0x50
   2b296:	2100      	movs	r1, #0
   2b298:	5499      	strb	r1, [r3, r2]
   2b29a:	687b      	ldr	r3, [r7, #4]
   2b29c:	2251      	movs	r2, #81	; 0x51
   2b29e:	2100      	movs	r1, #0
   2b2a0:	5499      	strb	r1, [r3, r2]
   2b2a2:	687b      	ldr	r3, [r7, #4]
   2b2a4:	2252      	movs	r2, #82	; 0x52
   2b2a6:	2100      	movs	r1, #0
   2b2a8:	5499      	strb	r1, [r3, r2]
   2b2aa:	687b      	ldr	r3, [r7, #4]
   2b2ac:	2253      	movs	r2, #83	; 0x53
   2b2ae:	2100      	movs	r1, #0
   2b2b0:	5499      	strb	r1, [r3, r2]
   2b2b2:	687b      	ldr	r3, [r7, #4]
   2b2b4:	2254      	movs	r2, #84	; 0x54
   2b2b6:	2100      	movs	r1, #0
   2b2b8:	5499      	strb	r1, [r3, r2]
   2b2ba:	687b      	ldr	r3, [r7, #4]
   2b2bc:	2255      	movs	r2, #85	; 0x55
   2b2be:	2100      	movs	r1, #0
   2b2c0:	5499      	strb	r1, [r3, r2]
   2b2c2:	687b      	ldr	r3, [r7, #4]
   2b2c4:	2256      	movs	r2, #86	; 0x56
   2b2c6:	2100      	movs	r1, #0
   2b2c8:	5499      	strb	r1, [r3, r2]
   2b2ca:	687b      	ldr	r3, [r7, #4]
   2b2cc:	2257      	movs	r2, #87	; 0x57
   2b2ce:	2100      	movs	r1, #0
   2b2d0:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2b2d2:	687b      	ldr	r3, [r7, #4]
   2b2d4:	2298      	movs	r2, #152	; 0x98
   2b2d6:	2100      	movs	r1, #0
   2b2d8:	5499      	strb	r1, [r3, r2]
   2b2da:	687b      	ldr	r3, [r7, #4]
   2b2dc:	2200      	movs	r2, #0
   2b2de:	659a      	str	r2, [r3, #88]	; 0x58
   2b2e0:	687b      	ldr	r3, [r7, #4]
   2b2e2:	2200      	movs	r2, #0
   2b2e4:	679a      	str	r2, [r3, #120]	; 0x78
   2b2e6:	687b      	ldr	r3, [r7, #4]
   2b2e8:	2299      	movs	r2, #153	; 0x99
   2b2ea:	2100      	movs	r1, #0
   2b2ec:	5499      	strb	r1, [r3, r2]
   2b2ee:	687b      	ldr	r3, [r7, #4]
   2b2f0:	2200      	movs	r2, #0
   2b2f2:	65da      	str	r2, [r3, #92]	; 0x5c
   2b2f4:	687b      	ldr	r3, [r7, #4]
   2b2f6:	2200      	movs	r2, #0
   2b2f8:	67da      	str	r2, [r3, #124]	; 0x7c
   2b2fa:	687b      	ldr	r3, [r7, #4]
   2b2fc:	229a      	movs	r2, #154	; 0x9a
   2b2fe:	2100      	movs	r1, #0
   2b300:	5499      	strb	r1, [r3, r2]
   2b302:	687b      	ldr	r3, [r7, #4]
   2b304:	2200      	movs	r2, #0
   2b306:	661a      	str	r2, [r3, #96]	; 0x60
   2b308:	687b      	ldr	r3, [r7, #4]
   2b30a:	2280      	movs	r2, #128	; 0x80
   2b30c:	2100      	movs	r1, #0
   2b30e:	5099      	str	r1, [r3, r2]
   2b310:	687b      	ldr	r3, [r7, #4]
   2b312:	229b      	movs	r2, #155	; 0x9b
   2b314:	2100      	movs	r1, #0
   2b316:	5499      	strb	r1, [r3, r2]
   2b318:	687b      	ldr	r3, [r7, #4]
   2b31a:	2200      	movs	r2, #0
   2b31c:	665a      	str	r2, [r3, #100]	; 0x64
   2b31e:	687b      	ldr	r3, [r7, #4]
   2b320:	2284      	movs	r2, #132	; 0x84
   2b322:	2100      	movs	r1, #0
   2b324:	5099      	str	r1, [r3, r2]
   2b326:	687b      	ldr	r3, [r7, #4]
   2b328:	229c      	movs	r2, #156	; 0x9c
   2b32a:	2100      	movs	r1, #0
   2b32c:	5499      	strb	r1, [r3, r2]
   2b32e:	687b      	ldr	r3, [r7, #4]
   2b330:	2200      	movs	r2, #0
   2b332:	669a      	str	r2, [r3, #104]	; 0x68
   2b334:	687b      	ldr	r3, [r7, #4]
   2b336:	2288      	movs	r2, #136	; 0x88
   2b338:	2100      	movs	r1, #0
   2b33a:	5099      	str	r1, [r3, r2]
   2b33c:	687b      	ldr	r3, [r7, #4]
   2b33e:	229d      	movs	r2, #157	; 0x9d
   2b340:	2100      	movs	r1, #0
   2b342:	5499      	strb	r1, [r3, r2]
   2b344:	687b      	ldr	r3, [r7, #4]
   2b346:	2200      	movs	r2, #0
   2b348:	66da      	str	r2, [r3, #108]	; 0x6c
   2b34a:	687b      	ldr	r3, [r7, #4]
   2b34c:	228c      	movs	r2, #140	; 0x8c
   2b34e:	2100      	movs	r1, #0
   2b350:	5099      	str	r1, [r3, r2]
   2b352:	687b      	ldr	r3, [r7, #4]
   2b354:	229e      	movs	r2, #158	; 0x9e
   2b356:	2100      	movs	r1, #0
   2b358:	5499      	strb	r1, [r3, r2]
   2b35a:	687b      	ldr	r3, [r7, #4]
   2b35c:	2200      	movs	r2, #0
   2b35e:	671a      	str	r2, [r3, #112]	; 0x70
   2b360:	687b      	ldr	r3, [r7, #4]
   2b362:	2290      	movs	r2, #144	; 0x90
   2b364:	2100      	movs	r1, #0
   2b366:	5099      	str	r1, [r3, r2]
   2b368:	687b      	ldr	r3, [r7, #4]
   2b36a:	229f      	movs	r2, #159	; 0x9f
   2b36c:	2100      	movs	r1, #0
   2b36e:	5499      	strb	r1, [r3, r2]
   2b370:	687b      	ldr	r3, [r7, #4]
   2b372:	2200      	movs	r2, #0
   2b374:	675a      	str	r2, [r3, #116]	; 0x74
   2b376:	687b      	ldr	r3, [r7, #4]
   2b378:	2294      	movs	r2, #148	; 0x94
   2b37a:	2100      	movs	r1, #0
   2b37c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2b37e:	687b      	ldr	r3, [r7, #4]
   2b380:	22a0      	movs	r2, #160	; 0xa0
   2b382:	2101      	movs	r1, #1
   2b384:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2b386:	687b      	ldr	r3, [r7, #4]
   2b388:	22a1      	movs	r2, #161	; 0xa1
   2b38a:	2100      	movs	r1, #0
   2b38c:	5499      	strb	r1, [r3, r2]
}
   2b38e:	46c0      	nop			; (mov r8, r8)
   2b390:	46bd      	mov	sp, r7
   2b392:	b005      	add	sp, #20
   2b394:	bd90      	pop	{r4, r7, pc}
   2b396:	46c0      	nop			; (mov r8, r8)
   2b398:	0002b095 	.word	0x0002b095
   2b39c:	0003a4c4 	.word	0x0003a4c4

0002b3a0 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b3a0:	b580      	push	{r7, lr}
   2b3a2:	b086      	sub	sp, #24
   2b3a4:	af00      	add	r7, sp, #0
   2b3a6:	60b9      	str	r1, [r7, #8]
   2b3a8:	607a      	str	r2, [r7, #4]
   2b3aa:	230f      	movs	r3, #15
   2b3ac:	18fb      	adds	r3, r7, r3
   2b3ae:	1c02      	adds	r2, r0, #0
   2b3b0:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2b3b2:	2300      	movs	r3, #0
   2b3b4:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b3b6:	2300      	movs	r3, #0
   2b3b8:	613b      	str	r3, [r7, #16]
   2b3ba:	e01d      	b.n	2b3f8 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2b3bc:	68ba      	ldr	r2, [r7, #8]
   2b3be:	693b      	ldr	r3, [r7, #16]
   2b3c0:	18d3      	adds	r3, r2, r3
   2b3c2:	3310      	adds	r3, #16
   2b3c4:	781b      	ldrb	r3, [r3, #0]
   2b3c6:	2b01      	cmp	r3, #1
   2b3c8:	d113      	bne.n	2b3f2 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2b3ca:	230f      	movs	r3, #15
   2b3cc:	18fb      	adds	r3, r7, r3
   2b3ce:	781b      	ldrb	r3, [r3, #0]
   2b3d0:	4a1b      	ldr	r2, [pc, #108]	; (2b440 <_tcc_build_ctrla+0xa0>)
   2b3d2:	5cd3      	ldrb	r3, [r2, r3]
   2b3d4:	001a      	movs	r2, r3
   2b3d6:	693b      	ldr	r3, [r7, #16]
   2b3d8:	429a      	cmp	r2, r3
   2b3da:	da01      	bge.n	2b3e0 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2b3dc:	2317      	movs	r3, #23
   2b3de:	e02a      	b.n	2b436 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2b3e0:	2380      	movs	r3, #128	; 0x80
   2b3e2:	045a      	lsls	r2, r3, #17
   2b3e4:	693b      	ldr	r3, [r7, #16]
   2b3e6:	409a      	lsls	r2, r3
   2b3e8:	0013      	movs	r3, r2
   2b3ea:	001a      	movs	r2, r3
   2b3ec:	697b      	ldr	r3, [r7, #20]
   2b3ee:	4313      	orrs	r3, r2
   2b3f0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b3f2:	693b      	ldr	r3, [r7, #16]
   2b3f4:	3301      	adds	r3, #1
   2b3f6:	613b      	str	r3, [r7, #16]
   2b3f8:	693b      	ldr	r3, [r7, #16]
   2b3fa:	2b03      	cmp	r3, #3
   2b3fc:	ddde      	ble.n	2b3bc <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2b3fe:	68bb      	ldr	r3, [r7, #8]
   2b400:	22a1      	movs	r2, #161	; 0xa1
   2b402:	5c9b      	ldrb	r3, [r3, r2]
   2b404:	2b00      	cmp	r3, #0
   2b406:	d004      	beq.n	2b412 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2b408:	697b      	ldr	r3, [r7, #20]
   2b40a:	2280      	movs	r2, #128	; 0x80
   2b40c:	0112      	lsls	r2, r2, #4
   2b40e:	4313      	orrs	r3, r2
   2b410:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2b412:	68bb      	ldr	r3, [r7, #8]
   2b414:	7b1b      	ldrb	r3, [r3, #12]
   2b416:	031b      	lsls	r3, r3, #12
   2b418:	001a      	movs	r2, r3
   2b41a:	697b      	ldr	r3, [r7, #20]
   2b41c:	4313      	orrs	r3, r2
   2b41e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2b420:	68bb      	ldr	r3, [r7, #8]
   2b422:	7adb      	ldrb	r3, [r3, #11]
   2b424:	021b      	lsls	r3, r3, #8
   2b426:	001a      	movs	r2, r3
   2b428:	697b      	ldr	r3, [r7, #20]
   2b42a:	4313      	orrs	r3, r2
   2b42c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2b42e:	687b      	ldr	r3, [r7, #4]
   2b430:	697a      	ldr	r2, [r7, #20]
   2b432:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b434:	2300      	movs	r3, #0
}
   2b436:	0018      	movs	r0, r3
   2b438:	46bd      	mov	sp, r7
   2b43a:	b006      	add	sp, #24
   2b43c:	bd80      	pop	{r7, pc}
   2b43e:	46c0      	nop			; (mov r8, r8)
   2b440:	0003a4d0 	.word	0x0003a4d0

0002b444 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2b444:	b580      	push	{r7, lr}
   2b446:	b086      	sub	sp, #24
   2b448:	af00      	add	r7, sp, #0
   2b44a:	60b9      	str	r1, [r7, #8]
   2b44c:	607a      	str	r2, [r7, #4]
   2b44e:	230f      	movs	r3, #15
   2b450:	18fb      	adds	r3, r7, r3
   2b452:	1c02      	adds	r2, r0, #0
   2b454:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2b456:	2317      	movs	r3, #23
   2b458:	18fb      	adds	r3, r7, r3
   2b45a:	2200      	movs	r2, #0
   2b45c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2b45e:	68bb      	ldr	r3, [r7, #8]
   2b460:	7a1b      	ldrb	r3, [r3, #8]
   2b462:	2b00      	cmp	r3, #0
   2b464:	d007      	beq.n	2b476 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2b466:	2317      	movs	r3, #23
   2b468:	18fb      	adds	r3, r7, r3
   2b46a:	2217      	movs	r2, #23
   2b46c:	18ba      	adds	r2, r7, r2
   2b46e:	7812      	ldrb	r2, [r2, #0]
   2b470:	2104      	movs	r1, #4
   2b472:	430a      	orrs	r2, r1
   2b474:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2b476:	68bb      	ldr	r3, [r7, #8]
   2b478:	7a5b      	ldrb	r3, [r3, #9]
   2b47a:	2b01      	cmp	r3, #1
   2b47c:	d107      	bne.n	2b48e <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2b47e:	2317      	movs	r3, #23
   2b480:	18fb      	adds	r3, r7, r3
   2b482:	2217      	movs	r2, #23
   2b484:	18ba      	adds	r2, r7, r2
   2b486:	7812      	ldrb	r2, [r2, #0]
   2b488:	2101      	movs	r1, #1
   2b48a:	430a      	orrs	r2, r1
   2b48c:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2b48e:	687b      	ldr	r3, [r7, #4]
   2b490:	2217      	movs	r2, #23
   2b492:	18ba      	adds	r2, r7, r2
   2b494:	7812      	ldrb	r2, [r2, #0]
   2b496:	701a      	strb	r2, [r3, #0]
}
   2b498:	46c0      	nop			; (mov r8, r8)
   2b49a:	46bd      	mov	sp, r7
   2b49c:	b006      	add	sp, #24
   2b49e:	bd80      	pop	{r7, pc}

0002b4a0 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b4a0:	b580      	push	{r7, lr}
   2b4a2:	b088      	sub	sp, #32
   2b4a4:	af00      	add	r7, sp, #0
   2b4a6:	60b9      	str	r1, [r7, #8]
   2b4a8:	607a      	str	r2, [r7, #4]
   2b4aa:	230f      	movs	r3, #15
   2b4ac:	18fb      	adds	r3, r7, r3
   2b4ae:	1c02      	adds	r2, r0, #0
   2b4b0:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b4b2:	230f      	movs	r3, #15
   2b4b4:	18fb      	adds	r3, r7, r3
   2b4b6:	781a      	ldrb	r2, [r3, #0]
   2b4b8:	231b      	movs	r3, #27
   2b4ba:	18fb      	adds	r3, r7, r3
   2b4bc:	493e      	ldr	r1, [pc, #248]	; (2b5b8 <_tcc_build_faults+0x118>)
   2b4be:	5c8a      	ldrb	r2, [r1, r2]
   2b4c0:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b4c2:	2300      	movs	r3, #0
   2b4c4:	61fb      	str	r3, [r7, #28]
   2b4c6:	e06e      	b.n	2b5a6 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2b4c8:	69fa      	ldr	r2, [r7, #28]
   2b4ca:	0013      	movs	r3, r2
   2b4cc:	009b      	lsls	r3, r3, #2
   2b4ce:	189b      	adds	r3, r3, r2
   2b4d0:	005b      	lsls	r3, r3, #1
   2b4d2:	3328      	adds	r3, #40	; 0x28
   2b4d4:	68ba      	ldr	r2, [r7, #8]
   2b4d6:	18d3      	adds	r3, r2, r3
   2b4d8:	3304      	adds	r3, #4
   2b4da:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2b4dc:	697b      	ldr	r3, [r7, #20]
   2b4de:	7a5b      	ldrb	r3, [r3, #9]
   2b4e0:	221b      	movs	r2, #27
   2b4e2:	18ba      	adds	r2, r7, r2
   2b4e4:	7812      	ldrb	r2, [r2, #0]
   2b4e6:	429a      	cmp	r2, r3
   2b4e8:	d801      	bhi.n	2b4ee <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2b4ea:	2317      	movs	r3, #23
   2b4ec:	e05f      	b.n	2b5ae <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2b4ee:	697b      	ldr	r3, [r7, #20]
   2b4f0:	781b      	ldrb	r3, [r3, #0]
   2b4f2:	2b0f      	cmp	r3, #15
   2b4f4:	d901      	bls.n	2b4fa <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2b4f6:	2317      	movs	r3, #23
   2b4f8:	e059      	b.n	2b5ae <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b4fa:	697b      	ldr	r3, [r7, #20]
   2b4fc:	781b      	ldrb	r3, [r3, #0]
   2b4fe:	061b      	lsls	r3, r3, #24
   2b500:	001a      	movs	r2, r3
   2b502:	23f0      	movs	r3, #240	; 0xf0
   2b504:	051b      	lsls	r3, r3, #20
   2b506:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2b508:	697b      	ldr	r3, [r7, #20]
   2b50a:	785b      	ldrb	r3, [r3, #1]
   2b50c:	041b      	lsls	r3, r3, #16
   2b50e:	0019      	movs	r1, r3
   2b510:	23ff      	movs	r3, #255	; 0xff
   2b512:	041b      	lsls	r3, r3, #16
   2b514:	400b      	ands	r3, r1
   2b516:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2b518:	697b      	ldr	r3, [r7, #20]
   2b51a:	789b      	ldrb	r3, [r3, #2]
   2b51c:	2b00      	cmp	r3, #0
   2b51e:	d001      	beq.n	2b524 <_tcc_build_faults+0x84>
   2b520:	2380      	movs	r3, #128	; 0x80
   2b522:	e000      	b.n	2b526 <_tcc_build_faults+0x86>
   2b524:	2300      	movs	r3, #0
   2b526:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2b528:	697b      	ldr	r3, [r7, #20]
   2b52a:	78db      	ldrb	r3, [r3, #3]
   2b52c:	2b00      	cmp	r3, #0
   2b52e:	d001      	beq.n	2b534 <_tcc_build_faults+0x94>
   2b530:	2308      	movs	r3, #8
   2b532:	e000      	b.n	2b536 <_tcc_build_faults+0x96>
   2b534:	2300      	movs	r3, #0
   2b536:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2b538:	697b      	ldr	r3, [r7, #20]
   2b53a:	791b      	ldrb	r3, [r3, #4]
   2b53c:	2b00      	cmp	r3, #0
   2b53e:	d001      	beq.n	2b544 <_tcc_build_faults+0xa4>
   2b540:	2310      	movs	r3, #16
   2b542:	e000      	b.n	2b546 <_tcc_build_faults+0xa6>
   2b544:	2300      	movs	r3, #0
   2b546:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2b548:	697b      	ldr	r3, [r7, #20]
   2b54a:	795b      	ldrb	r3, [r3, #5]
   2b54c:	0019      	movs	r1, r3
   2b54e:	2303      	movs	r3, #3
   2b550:	400b      	ands	r3, r1
   2b552:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2b554:	697b      	ldr	r3, [r7, #20]
   2b556:	799b      	ldrb	r3, [r3, #6]
   2b558:	015b      	lsls	r3, r3, #5
   2b55a:	0019      	movs	r1, r3
   2b55c:	2360      	movs	r3, #96	; 0x60
   2b55e:	400b      	ands	r3, r1
   2b560:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2b562:	697b      	ldr	r3, [r7, #20]
   2b564:	79db      	ldrb	r3, [r3, #7]
   2b566:	021b      	lsls	r3, r3, #8
   2b568:	0019      	movs	r1, r3
   2b56a:	23c0      	movs	r3, #192	; 0xc0
   2b56c:	009b      	lsls	r3, r3, #2
   2b56e:	400b      	ands	r3, r1
   2b570:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2b572:	697b      	ldr	r3, [r7, #20]
   2b574:	7a1b      	ldrb	r3, [r3, #8]
   2b576:	031b      	lsls	r3, r3, #12
   2b578:	0019      	movs	r1, r3
   2b57a:	23e0      	movs	r3, #224	; 0xe0
   2b57c:	01db      	lsls	r3, r3, #7
   2b57e:	400b      	ands	r3, r1
   2b580:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2b582:	697b      	ldr	r3, [r7, #20]
   2b584:	7a5b      	ldrb	r3, [r3, #9]
   2b586:	029b      	lsls	r3, r3, #10
   2b588:	0019      	movs	r1, r3
   2b58a:	23c0      	movs	r3, #192	; 0xc0
   2b58c:	011b      	lsls	r3, r3, #4
   2b58e:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b590:	4313      	orrs	r3, r2
   2b592:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2b594:	69fb      	ldr	r3, [r7, #28]
   2b596:	009b      	lsls	r3, r3, #2
   2b598:	687a      	ldr	r2, [r7, #4]
   2b59a:	18d3      	adds	r3, r2, r3
   2b59c:	693a      	ldr	r2, [r7, #16]
   2b59e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b5a0:	69fb      	ldr	r3, [r7, #28]
   2b5a2:	3301      	adds	r3, #1
   2b5a4:	61fb      	str	r3, [r7, #28]
   2b5a6:	69fb      	ldr	r3, [r7, #28]
   2b5a8:	2b01      	cmp	r3, #1
   2b5aa:	dd8d      	ble.n	2b4c8 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2b5ac:	2300      	movs	r3, #0
}
   2b5ae:	0018      	movs	r0, r3
   2b5b0:	46bd      	mov	sp, r7
   2b5b2:	b008      	add	sp, #32
   2b5b4:	bd80      	pop	{r7, pc}
   2b5b6:	46c0      	nop			; (mov r8, r8)
   2b5b8:	0003a4d0 	.word	0x0003a4d0

0002b5bc <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b5bc:	b580      	push	{r7, lr}
   2b5be:	b088      	sub	sp, #32
   2b5c0:	af00      	add	r7, sp, #0
   2b5c2:	60b9      	str	r1, [r7, #8]
   2b5c4:	607a      	str	r2, [r7, #4]
   2b5c6:	230f      	movs	r3, #15
   2b5c8:	18fb      	adds	r3, r7, r3
   2b5ca:	1c02      	adds	r2, r0, #0
   2b5cc:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2b5ce:	230f      	movs	r3, #15
   2b5d0:	18fb      	adds	r3, r7, r3
   2b5d2:	781a      	ldrb	r2, [r3, #0]
   2b5d4:	2317      	movs	r3, #23
   2b5d6:	18fb      	adds	r3, r7, r3
   2b5d8:	492d      	ldr	r1, [pc, #180]	; (2b690 <_tcc_build_drvctrl+0xd4>)
   2b5da:	5c8a      	ldrb	r2, [r1, r2]
   2b5dc:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2b5de:	2300      	movs	r3, #0
   2b5e0:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b5e2:	2300      	movs	r3, #0
   2b5e4:	61fb      	str	r3, [r7, #28]
   2b5e6:	e048      	b.n	2b67a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2b5e8:	68ba      	ldr	r2, [r7, #8]
   2b5ea:	2150      	movs	r1, #80	; 0x50
   2b5ec:	69fb      	ldr	r3, [r7, #28]
   2b5ee:	18d3      	adds	r3, r2, r3
   2b5f0:	185b      	adds	r3, r3, r1
   2b5f2:	781b      	ldrb	r3, [r3, #0]
   2b5f4:	2b00      	cmp	r3, #0
   2b5f6:	d010      	beq.n	2b61a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2b5f8:	2317      	movs	r3, #23
   2b5fa:	18fb      	adds	r3, r7, r3
   2b5fc:	781a      	ldrb	r2, [r3, #0]
   2b5fe:	69fb      	ldr	r3, [r7, #28]
   2b600:	429a      	cmp	r2, r3
   2b602:	d801      	bhi.n	2b608 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2b604:	2317      	movs	r3, #23
   2b606:	e03f      	b.n	2b688 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2b608:	2380      	movs	r3, #128	; 0x80
   2b60a:	025a      	lsls	r2, r3, #9
   2b60c:	69fb      	ldr	r3, [r7, #28]
   2b60e:	409a      	lsls	r2, r3
   2b610:	0013      	movs	r3, r2
   2b612:	001a      	movs	r2, r3
   2b614:	69bb      	ldr	r3, [r7, #24]
   2b616:	4313      	orrs	r3, r2
   2b618:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2b61a:	68ba      	ldr	r2, [r7, #8]
   2b61c:	69fb      	ldr	r3, [r7, #28]
   2b61e:	331c      	adds	r3, #28
   2b620:	005b      	lsls	r3, r3, #1
   2b622:	18d3      	adds	r3, r2, r3
   2b624:	3309      	adds	r3, #9
   2b626:	781b      	ldrb	r3, [r3, #0]
   2b628:	2b00      	cmp	r3, #0
   2b62a:	d023      	beq.n	2b674 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2b62c:	2317      	movs	r3, #23
   2b62e:	18fb      	adds	r3, r7, r3
   2b630:	781a      	ldrb	r2, [r3, #0]
   2b632:	69fb      	ldr	r3, [r7, #28]
   2b634:	429a      	cmp	r2, r3
   2b636:	d801      	bhi.n	2b63c <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2b638:	2317      	movs	r3, #23
   2b63a:	e025      	b.n	2b688 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2b63c:	68ba      	ldr	r2, [r7, #8]
   2b63e:	69fb      	ldr	r3, [r7, #28]
   2b640:	331c      	adds	r3, #28
   2b642:	005b      	lsls	r3, r3, #1
   2b644:	18d3      	adds	r3, r2, r3
   2b646:	3309      	adds	r3, #9
   2b648:	781b      	ldrb	r3, [r3, #0]
   2b64a:	2b02      	cmp	r3, #2
   2b64c:	d10a      	bne.n	2b664 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2b64e:	2302      	movs	r3, #2
   2b650:	33ff      	adds	r3, #255	; 0xff
   2b652:	001a      	movs	r2, r3
   2b654:	69fb      	ldr	r3, [r7, #28]
   2b656:	409a      	lsls	r2, r3
   2b658:	0013      	movs	r3, r2
   2b65a:	001a      	movs	r2, r3
   2b65c:	69bb      	ldr	r3, [r7, #24]
   2b65e:	4313      	orrs	r3, r2
   2b660:	61bb      	str	r3, [r7, #24]
   2b662:	e007      	b.n	2b674 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2b664:	2201      	movs	r2, #1
   2b666:	69fb      	ldr	r3, [r7, #28]
   2b668:	409a      	lsls	r2, r3
   2b66a:	0013      	movs	r3, r2
   2b66c:	001a      	movs	r2, r3
   2b66e:	69bb      	ldr	r3, [r7, #24]
   2b670:	4313      	orrs	r3, r2
   2b672:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b674:	69fb      	ldr	r3, [r7, #28]
   2b676:	3301      	adds	r3, #1
   2b678:	61fb      	str	r3, [r7, #28]
   2b67a:	69fb      	ldr	r3, [r7, #28]
   2b67c:	2b07      	cmp	r3, #7
   2b67e:	d9b3      	bls.n	2b5e8 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2b680:	687b      	ldr	r3, [r7, #4]
   2b682:	69ba      	ldr	r2, [r7, #24]
   2b684:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b686:	2300      	movs	r3, #0
}
   2b688:	0018      	movs	r0, r3
   2b68a:	46bd      	mov	sp, r7
   2b68c:	b008      	add	sp, #32
   2b68e:	bd80      	pop	{r7, pc}
   2b690:	0003a4d4 	.word	0x0003a4d4

0002b694 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b694:	b580      	push	{r7, lr}
   2b696:	b088      	sub	sp, #32
   2b698:	af00      	add	r7, sp, #0
   2b69a:	60b9      	str	r1, [r7, #8]
   2b69c:	607a      	str	r2, [r7, #4]
   2b69e:	230f      	movs	r3, #15
   2b6a0:	18fb      	adds	r3, r7, r3
   2b6a2:	1c02      	adds	r2, r0, #0
   2b6a4:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b6a6:	230f      	movs	r3, #15
   2b6a8:	18fb      	adds	r3, r7, r3
   2b6aa:	781a      	ldrb	r2, [r3, #0]
   2b6ac:	2317      	movs	r3, #23
   2b6ae:	18fb      	adds	r3, r7, r3
   2b6b0:	491d      	ldr	r1, [pc, #116]	; (2b728 <_tcc_build_waves+0x94>)
   2b6b2:	5c8a      	ldrb	r2, [r1, r2]
   2b6b4:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2b6b6:	68bb      	ldr	r3, [r7, #8]
   2b6b8:	3310      	adds	r3, #16
   2b6ba:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b6bc:	693b      	ldr	r3, [r7, #16]
   2b6be:	7a5b      	ldrb	r3, [r3, #9]
   2b6c0:	011b      	lsls	r3, r3, #4
   2b6c2:	001a      	movs	r2, r3
   2b6c4:	2330      	movs	r3, #48	; 0x30
   2b6c6:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2b6c8:	693b      	ldr	r3, [r7, #16]
   2b6ca:	7a1b      	ldrb	r3, [r3, #8]
   2b6cc:	0019      	movs	r1, r3
   2b6ce:	2307      	movs	r3, #7
   2b6d0:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b6d2:	4313      	orrs	r3, r2
   2b6d4:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b6d6:	2300      	movs	r3, #0
   2b6d8:	61fb      	str	r3, [r7, #28]
   2b6da:	e01a      	b.n	2b712 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2b6dc:	693a      	ldr	r2, [r7, #16]
   2b6de:	69fb      	ldr	r3, [r7, #28]
   2b6e0:	18d3      	adds	r3, r2, r3
   2b6e2:	3304      	adds	r3, #4
   2b6e4:	781b      	ldrb	r3, [r3, #0]
   2b6e6:	2b00      	cmp	r3, #0
   2b6e8:	d010      	beq.n	2b70c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2b6ea:	2317      	movs	r3, #23
   2b6ec:	18fb      	adds	r3, r7, r3
   2b6ee:	781a      	ldrb	r2, [r3, #0]
   2b6f0:	69fb      	ldr	r3, [r7, #28]
   2b6f2:	429a      	cmp	r2, r3
   2b6f4:	dc01      	bgt.n	2b6fa <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2b6f6:	2317      	movs	r3, #23
   2b6f8:	e012      	b.n	2b720 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2b6fa:	2380      	movs	r3, #128	; 0x80
   2b6fc:	025a      	lsls	r2, r3, #9
   2b6fe:	69fb      	ldr	r3, [r7, #28]
   2b700:	409a      	lsls	r2, r3
   2b702:	0013      	movs	r3, r2
   2b704:	001a      	movs	r2, r3
   2b706:	69bb      	ldr	r3, [r7, #24]
   2b708:	4313      	orrs	r3, r2
   2b70a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b70c:	69fb      	ldr	r3, [r7, #28]
   2b70e:	3301      	adds	r3, #1
   2b710:	61fb      	str	r3, [r7, #28]
   2b712:	69fb      	ldr	r3, [r7, #28]
   2b714:	2b03      	cmp	r3, #3
   2b716:	dde1      	ble.n	2b6dc <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2b718:	687b      	ldr	r3, [r7, #4]
   2b71a:	69ba      	ldr	r2, [r7, #24]
   2b71c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2b71e:	2300      	movs	r3, #0
}
   2b720:	0018      	movs	r0, r3
   2b722:	46bd      	mov	sp, r7
   2b724:	b008      	add	sp, #32
   2b726:	bd80      	pop	{r7, pc}
   2b728:	0003a4d0 	.word	0x0003a4d0

0002b72c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b72c:	b590      	push	{r4, r7, lr}
   2b72e:	b091      	sub	sp, #68	; 0x44
   2b730:	af00      	add	r7, sp, #0
   2b732:	60f8      	str	r0, [r7, #12]
   2b734:	60b9      	str	r1, [r7, #8]
   2b736:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b738:	233b      	movs	r3, #59	; 0x3b
   2b73a:	18fc      	adds	r4, r7, r3
   2b73c:	68bb      	ldr	r3, [r7, #8]
   2b73e:	0018      	movs	r0, r3
   2b740:	4bc4      	ldr	r3, [pc, #784]	; (2ba54 <tcc_init+0x328>)
   2b742:	4798      	blx	r3
   2b744:	0003      	movs	r3, r0
   2b746:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b748:	233b      	movs	r3, #59	; 0x3b
   2b74a:	18fb      	adds	r3, r7, r3
   2b74c:	781a      	ldrb	r2, [r3, #0]
   2b74e:	4bc2      	ldr	r3, [pc, #776]	; (2ba58 <tcc_init+0x32c>)
   2b750:	0092      	lsls	r2, r2, #2
   2b752:	58d3      	ldr	r3, [r2, r3]
   2b754:	0019      	movs	r1, r3
   2b756:	2002      	movs	r0, #2
   2b758:	4bc0      	ldr	r3, [pc, #768]	; (2ba5c <tcc_init+0x330>)
   2b75a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b75c:	68bb      	ldr	r3, [r7, #8]
   2b75e:	681b      	ldr	r3, [r3, #0]
   2b760:	2202      	movs	r2, #2
   2b762:	4013      	ands	r3, r2
   2b764:	d001      	beq.n	2b76a <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b766:	231c      	movs	r3, #28
   2b768:	e1be      	b.n	2bae8 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b76a:	68bb      	ldr	r3, [r7, #8]
   2b76c:	681b      	ldr	r3, [r3, #0]
   2b76e:	2201      	movs	r2, #1
   2b770:	4013      	ands	r3, r2
   2b772:	d001      	beq.n	2b778 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b774:	231c      	movs	r3, #28
   2b776:	e1b7      	b.n	2bae8 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b778:	233b      	movs	r3, #59	; 0x3b
   2b77a:	18fb      	adds	r3, r7, r3
   2b77c:	781a      	ldrb	r2, [r3, #0]
   2b77e:	4bb8      	ldr	r3, [pc, #736]	; (2ba60 <tcc_init+0x334>)
   2b780:	0092      	lsls	r2, r2, #2
   2b782:	58d3      	ldr	r3, [r2, r3]
   2b784:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b786:	687b      	ldr	r3, [r7, #4]
   2b788:	681a      	ldr	r2, [r3, #0]
   2b78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b78c:	429a      	cmp	r2, r3
   2b78e:	d804      	bhi.n	2b79a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b790:	687b      	ldr	r3, [r7, #4]
   2b792:	685a      	ldr	r2, [r3, #4]
   2b794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b796:	429a      	cmp	r2, r3
   2b798:	d901      	bls.n	2b79e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b79a:	2317      	movs	r3, #23
   2b79c:	e1a4      	b.n	2bae8 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b79e:	2300      	movs	r3, #0
   2b7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b7a2:	e00e      	b.n	2b7c2 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b7a4:	687a      	ldr	r2, [r7, #4]
   2b7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7a8:	3306      	adds	r3, #6
   2b7aa:	009b      	lsls	r3, r3, #2
   2b7ac:	18d3      	adds	r3, r2, r3
   2b7ae:	3304      	adds	r3, #4
   2b7b0:	681a      	ldr	r2, [r3, #0]
   2b7b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b7b4:	429a      	cmp	r2, r3
   2b7b6:	d901      	bls.n	2b7bc <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b7b8:	2317      	movs	r3, #23
   2b7ba:	e195      	b.n	2bae8 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7be:	3301      	adds	r3, #1
   2b7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7c4:	2b03      	cmp	r3, #3
   2b7c6:	dded      	ble.n	2b7a4 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b7c8:	2300      	movs	r3, #0
   2b7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b7cc:	e019      	b.n	2b802 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b7ce:	687a      	ldr	r2, [r7, #4]
   2b7d0:	2198      	movs	r1, #152	; 0x98
   2b7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7d4:	18d3      	adds	r3, r2, r3
   2b7d6:	185b      	adds	r3, r3, r1
   2b7d8:	781b      	ldrb	r3, [r3, #0]
   2b7da:	2201      	movs	r2, #1
   2b7dc:	4053      	eors	r3, r2
   2b7de:	b2db      	uxtb	r3, r3
   2b7e0:	2b00      	cmp	r3, #0
   2b7e2:	d10a      	bne.n	2b7fa <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b7e4:	233b      	movs	r3, #59	; 0x3b
   2b7e6:	18fb      	adds	r3, r7, r3
   2b7e8:	781b      	ldrb	r3, [r3, #0]
   2b7ea:	4a9e      	ldr	r2, [pc, #632]	; (2ba64 <tcc_init+0x338>)
   2b7ec:	5cd3      	ldrb	r3, [r2, r3]
   2b7ee:	001a      	movs	r2, r3
   2b7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7f2:	429a      	cmp	r2, r3
   2b7f4:	dc02      	bgt.n	2b7fc <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b7f6:	2317      	movs	r3, #23
   2b7f8:	e176      	b.n	2bae8 <tcc_init+0x3bc>
			continue;
   2b7fa:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7fe:	3301      	adds	r3, #1
   2b800:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b804:	2b07      	cmp	r3, #7
   2b806:	dde2      	ble.n	2b7ce <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2b808:	2300      	movs	r3, #0
   2b80a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2b80c:	2333      	movs	r3, #51	; 0x33
   2b80e:	18fc      	adds	r4, r7, r3
   2b810:	232c      	movs	r3, #44	; 0x2c
   2b812:	18fa      	adds	r2, r7, r3
   2b814:	6879      	ldr	r1, [r7, #4]
   2b816:	233b      	movs	r3, #59	; 0x3b
   2b818:	18fb      	adds	r3, r7, r3
   2b81a:	781b      	ldrb	r3, [r3, #0]
   2b81c:	0018      	movs	r0, r3
   2b81e:	4b92      	ldr	r3, [pc, #584]	; (2ba68 <tcc_init+0x33c>)
   2b820:	4798      	blx	r3
   2b822:	0003      	movs	r3, r0
   2b824:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b826:	2333      	movs	r3, #51	; 0x33
   2b828:	18fb      	adds	r3, r7, r3
   2b82a:	781b      	ldrb	r3, [r3, #0]
   2b82c:	2b00      	cmp	r3, #0
   2b82e:	d003      	beq.n	2b838 <tcc_init+0x10c>
		return status;
   2b830:	2333      	movs	r3, #51	; 0x33
   2b832:	18fb      	adds	r3, r7, r3
   2b834:	781b      	ldrb	r3, [r3, #0]
   2b836:	e157      	b.n	2bae8 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b838:	232b      	movs	r3, #43	; 0x2b
   2b83a:	18fa      	adds	r2, r7, r3
   2b83c:	6879      	ldr	r1, [r7, #4]
   2b83e:	233b      	movs	r3, #59	; 0x3b
   2b840:	18fb      	adds	r3, r7, r3
   2b842:	781b      	ldrb	r3, [r3, #0]
   2b844:	0018      	movs	r0, r3
   2b846:	4b89      	ldr	r3, [pc, #548]	; (2ba6c <tcc_init+0x340>)
   2b848:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b84a:	2333      	movs	r3, #51	; 0x33
   2b84c:	18fc      	adds	r4, r7, r3
   2b84e:	2320      	movs	r3, #32
   2b850:	18fa      	adds	r2, r7, r3
   2b852:	6879      	ldr	r1, [r7, #4]
   2b854:	233b      	movs	r3, #59	; 0x3b
   2b856:	18fb      	adds	r3, r7, r3
   2b858:	781b      	ldrb	r3, [r3, #0]
   2b85a:	0018      	movs	r0, r3
   2b85c:	4b84      	ldr	r3, [pc, #528]	; (2ba70 <tcc_init+0x344>)
   2b85e:	4798      	blx	r3
   2b860:	0003      	movs	r3, r0
   2b862:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b864:	2333      	movs	r3, #51	; 0x33
   2b866:	18fb      	adds	r3, r7, r3
   2b868:	781b      	ldrb	r3, [r3, #0]
   2b86a:	2b00      	cmp	r3, #0
   2b86c:	d003      	beq.n	2b876 <tcc_init+0x14a>
		return status;
   2b86e:	2333      	movs	r3, #51	; 0x33
   2b870:	18fb      	adds	r3, r7, r3
   2b872:	781b      	ldrb	r3, [r3, #0]
   2b874:	e138      	b.n	2bae8 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b876:	2300      	movs	r3, #0
   2b878:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b87a:	2333      	movs	r3, #51	; 0x33
   2b87c:	18fc      	adds	r4, r7, r3
   2b87e:	231c      	movs	r3, #28
   2b880:	18fa      	adds	r2, r7, r3
   2b882:	6879      	ldr	r1, [r7, #4]
   2b884:	233b      	movs	r3, #59	; 0x3b
   2b886:	18fb      	adds	r3, r7, r3
   2b888:	781b      	ldrb	r3, [r3, #0]
   2b88a:	0018      	movs	r0, r3
   2b88c:	4b79      	ldr	r3, [pc, #484]	; (2ba74 <tcc_init+0x348>)
   2b88e:	4798      	blx	r3
   2b890:	0003      	movs	r3, r0
   2b892:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b894:	2333      	movs	r3, #51	; 0x33
   2b896:	18fb      	adds	r3, r7, r3
   2b898:	781b      	ldrb	r3, [r3, #0]
   2b89a:	2b00      	cmp	r3, #0
   2b89c:	d003      	beq.n	2b8a6 <tcc_init+0x17a>
		return status;
   2b89e:	2333      	movs	r3, #51	; 0x33
   2b8a0:	18fb      	adds	r3, r7, r3
   2b8a2:	781b      	ldrb	r3, [r3, #0]
   2b8a4:	e120      	b.n	2bae8 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b8a6:	2333      	movs	r3, #51	; 0x33
   2b8a8:	18fc      	adds	r4, r7, r3
   2b8aa:	2318      	movs	r3, #24
   2b8ac:	18fa      	adds	r2, r7, r3
   2b8ae:	6879      	ldr	r1, [r7, #4]
   2b8b0:	233b      	movs	r3, #59	; 0x3b
   2b8b2:	18fb      	adds	r3, r7, r3
   2b8b4:	781b      	ldrb	r3, [r3, #0]
   2b8b6:	0018      	movs	r0, r3
   2b8b8:	4b6f      	ldr	r3, [pc, #444]	; (2ba78 <tcc_init+0x34c>)
   2b8ba:	4798      	blx	r3
   2b8bc:	0003      	movs	r3, r0
   2b8be:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b8c0:	2333      	movs	r3, #51	; 0x33
   2b8c2:	18fb      	adds	r3, r7, r3
   2b8c4:	781b      	ldrb	r3, [r3, #0]
   2b8c6:	2b00      	cmp	r3, #0
   2b8c8:	d003      	beq.n	2b8d2 <tcc_init+0x1a6>
		return status;
   2b8ca:	2333      	movs	r3, #51	; 0x33
   2b8cc:	18fb      	adds	r3, r7, r3
   2b8ce:	781b      	ldrb	r3, [r3, #0]
   2b8d0:	e10a      	b.n	2bae8 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b8d2:	2300      	movs	r3, #0
   2b8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b8d6:	e009      	b.n	2b8ec <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b8d8:	68fa      	ldr	r2, [r7, #12]
   2b8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b8dc:	009b      	lsls	r3, r3, #2
   2b8de:	18d3      	adds	r3, r2, r3
   2b8e0:	3304      	adds	r3, #4
   2b8e2:	2200      	movs	r2, #0
   2b8e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b8e8:	3301      	adds	r3, #1
   2b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b8ee:	2b0b      	cmp	r3, #11
   2b8f0:	ddf2      	ble.n	2b8d8 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b8f2:	68fb      	ldr	r3, [r7, #12]
   2b8f4:	2200      	movs	r2, #0
   2b8f6:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b8f8:	68fb      	ldr	r3, [r7, #12]
   2b8fa:	2200      	movs	r2, #0
   2b8fc:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b8fe:	233b      	movs	r3, #59	; 0x3b
   2b900:	18fb      	adds	r3, r7, r3
   2b902:	781a      	ldrb	r2, [r3, #0]
   2b904:	4b5d      	ldr	r3, [pc, #372]	; (2ba7c <tcc_init+0x350>)
   2b906:	0092      	lsls	r2, r2, #2
   2b908:	68f9      	ldr	r1, [r7, #12]
   2b90a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b90c:	68fb      	ldr	r3, [r7, #12]
   2b90e:	68ba      	ldr	r2, [r7, #8]
   2b910:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b912:	687b      	ldr	r3, [r7, #4]
   2b914:	22a0      	movs	r2, #160	; 0xa0
   2b916:	5c99      	ldrb	r1, [r3, r2]
   2b918:	68fb      	ldr	r3, [r7, #12]
   2b91a:	223c      	movs	r2, #60	; 0x3c
   2b91c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b91e:	2314      	movs	r3, #20
   2b920:	18fb      	adds	r3, r7, r3
   2b922:	0018      	movs	r0, r3
   2b924:	4b56      	ldr	r3, [pc, #344]	; (2ba80 <tcc_init+0x354>)
   2b926:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b928:	687b      	ldr	r3, [r7, #4]
   2b92a:	7a9a      	ldrb	r2, [r3, #10]
   2b92c:	2314      	movs	r3, #20
   2b92e:	18fb      	adds	r3, r7, r3
   2b930:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b932:	233b      	movs	r3, #59	; 0x3b
   2b934:	18fb      	adds	r3, r7, r3
   2b936:	781b      	ldrb	r3, [r3, #0]
   2b938:	4a52      	ldr	r2, [pc, #328]	; (2ba84 <tcc_init+0x358>)
   2b93a:	5cd3      	ldrb	r3, [r2, r3]
   2b93c:	2214      	movs	r2, #20
   2b93e:	18ba      	adds	r2, r7, r2
   2b940:	0011      	movs	r1, r2
   2b942:	0018      	movs	r0, r3
   2b944:	4b50      	ldr	r3, [pc, #320]	; (2ba88 <tcc_init+0x35c>)
   2b946:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b948:	233b      	movs	r3, #59	; 0x3b
   2b94a:	18fb      	adds	r3, r7, r3
   2b94c:	781b      	ldrb	r3, [r3, #0]
   2b94e:	4a4d      	ldr	r2, [pc, #308]	; (2ba84 <tcc_init+0x358>)
   2b950:	5cd3      	ldrb	r3, [r2, r3]
   2b952:	0018      	movs	r0, r3
   2b954:	4b4d      	ldr	r3, [pc, #308]	; (2ba8c <tcc_init+0x360>)
   2b956:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b958:	2300      	movs	r3, #0
   2b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b95c:	e02d      	b.n	2b9ba <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b95e:	687a      	ldr	r2, [r7, #4]
   2b960:	2198      	movs	r1, #152	; 0x98
   2b962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b964:	18d3      	adds	r3, r2, r3
   2b966:	185b      	adds	r3, r3, r1
   2b968:	781b      	ldrb	r3, [r3, #0]
   2b96a:	2201      	movs	r2, #1
   2b96c:	4053      	eors	r3, r2
   2b96e:	b2db      	uxtb	r3, r3
   2b970:	2b00      	cmp	r3, #0
   2b972:	d11e      	bne.n	2b9b2 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2b974:	2310      	movs	r3, #16
   2b976:	18fb      	adds	r3, r7, r3
   2b978:	0018      	movs	r0, r3
   2b97a:	4b45      	ldr	r3, [pc, #276]	; (2ba90 <tcc_init+0x364>)
   2b97c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2b97e:	687b      	ldr	r3, [r7, #4]
   2b980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b982:	321e      	adds	r2, #30
   2b984:	0092      	lsls	r2, r2, #2
   2b986:	58d3      	ldr	r3, [r2, r3]
   2b988:	b2da      	uxtb	r2, r3
   2b98a:	2310      	movs	r3, #16
   2b98c:	18fb      	adds	r3, r7, r3
   2b98e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2b990:	2310      	movs	r3, #16
   2b992:	18fb      	adds	r3, r7, r3
   2b994:	2201      	movs	r2, #1
   2b996:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2b998:	687b      	ldr	r3, [r7, #4]
   2b99a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b99c:	3216      	adds	r2, #22
   2b99e:	0092      	lsls	r2, r2, #2
   2b9a0:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2b9a2:	b2db      	uxtb	r3, r3
   2b9a4:	2210      	movs	r2, #16
   2b9a6:	18ba      	adds	r2, r7, r2
   2b9a8:	0011      	movs	r1, r2
   2b9aa:	0018      	movs	r0, r3
   2b9ac:	4b39      	ldr	r3, [pc, #228]	; (2ba94 <tcc_init+0x368>)
   2b9ae:	4798      	blx	r3
   2b9b0:	e000      	b.n	2b9b4 <tcc_init+0x288>
			continue;
   2b9b2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b9b6:	3301      	adds	r3, #1
   2b9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b9ba:	233b      	movs	r3, #59	; 0x3b
   2b9bc:	18fb      	adds	r3, r7, r3
   2b9be:	781b      	ldrb	r3, [r3, #0]
   2b9c0:	4a28      	ldr	r2, [pc, #160]	; (2ba64 <tcc_init+0x338>)
   2b9c2:	5cd3      	ldrb	r3, [r2, r3]
   2b9c4:	001a      	movs	r2, r3
   2b9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b9c8:	429a      	cmp	r2, r3
   2b9ca:	dcc8      	bgt.n	2b95e <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b9ce:	68bb      	ldr	r3, [r7, #8]
   2b9d0:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b9d2:	46c0      	nop			; (mov r8, r8)
   2b9d4:	68bb      	ldr	r3, [r7, #8]
   2b9d6:	689b      	ldr	r3, [r3, #8]
   2b9d8:	2204      	movs	r2, #4
   2b9da:	4013      	ands	r3, r2
   2b9dc:	d1fa      	bne.n	2b9d4 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b9de:	68bb      	ldr	r3, [r7, #8]
   2b9e0:	22ff      	movs	r2, #255	; 0xff
   2b9e2:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b9e4:	46c0      	nop			; (mov r8, r8)
   2b9e6:	68bb      	ldr	r3, [r7, #8]
   2b9e8:	689b      	ldr	r3, [r3, #8]
   2b9ea:	2204      	movs	r2, #4
   2b9ec:	4013      	ands	r3, r2
   2b9ee:	d1fa      	bne.n	2b9e6 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b9f0:	232b      	movs	r3, #43	; 0x2b
   2b9f2:	18fb      	adds	r3, r7, r3
   2b9f4:	781a      	ldrb	r2, [r3, #0]
   2b9f6:	68bb      	ldr	r3, [r7, #8]
   2b9f8:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b9fa:	2320      	movs	r3, #32
   2b9fc:	18fb      	adds	r3, r7, r3
   2b9fe:	681a      	ldr	r2, [r3, #0]
   2ba00:	68bb      	ldr	r3, [r7, #8]
   2ba02:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2ba04:	2320      	movs	r3, #32
   2ba06:	18fb      	adds	r3, r7, r3
   2ba08:	685a      	ldr	r2, [r3, #4]
   2ba0a:	68bb      	ldr	r3, [r7, #8]
   2ba0c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2ba0e:	69fa      	ldr	r2, [r7, #28]
   2ba10:	68bb      	ldr	r3, [r7, #8]
   2ba12:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2ba14:	46c0      	nop			; (mov r8, r8)
   2ba16:	68bb      	ldr	r3, [r7, #8]
   2ba18:	689b      	ldr	r3, [r3, #8]
   2ba1a:	4a1f      	ldr	r2, [pc, #124]	; (2ba98 <tcc_init+0x36c>)
   2ba1c:	4013      	ands	r3, r2
   2ba1e:	d1fa      	bne.n	2ba16 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2ba20:	69ba      	ldr	r2, [r7, #24]
   2ba22:	68bb      	ldr	r3, [r7, #8]
   2ba24:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2ba26:	46c0      	nop			; (mov r8, r8)
   2ba28:	68bb      	ldr	r3, [r7, #8]
   2ba2a:	689b      	ldr	r3, [r3, #8]
   2ba2c:	2210      	movs	r2, #16
   2ba2e:	4013      	ands	r3, r2
   2ba30:	d1fa      	bne.n	2ba28 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2ba32:	687b      	ldr	r3, [r7, #4]
   2ba34:	681a      	ldr	r2, [r3, #0]
   2ba36:	68bb      	ldr	r3, [r7, #8]
   2ba38:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2ba3a:	46c0      	nop			; (mov r8, r8)
   2ba3c:	68bb      	ldr	r3, [r7, #8]
   2ba3e:	689b      	ldr	r3, [r3, #8]
   2ba40:	4a16      	ldr	r2, [pc, #88]	; (2ba9c <tcc_init+0x370>)
   2ba42:	4013      	ands	r3, r2
   2ba44:	d1fa      	bne.n	2ba3c <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2ba46:	687b      	ldr	r3, [r7, #4]
   2ba48:	685a      	ldr	r2, [r3, #4]
   2ba4a:	68bb      	ldr	r3, [r7, #8]
   2ba4c:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2ba4e:	2300      	movs	r3, #0
   2ba50:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ba52:	e03f      	b.n	2bad4 <tcc_init+0x3a8>
   2ba54:	0002b095 	.word	0x0002b095
   2ba58:	0003a4b8 	.word	0x0003a4b8
   2ba5c:	0002b011 	.word	0x0002b011
   2ba60:	0003a4c4 	.word	0x0003a4c4
   2ba64:	0003a4d4 	.word	0x0003a4d4
   2ba68:	0002b3a1 	.word	0x0002b3a1
   2ba6c:	0002b445 	.word	0x0002b445
   2ba70:	0002b4a1 	.word	0x0002b4a1
   2ba74:	0002b5bd 	.word	0x0002b5bd
   2ba78:	0002b695 	.word	0x0002b695
   2ba7c:	20005cb4 	.word	0x20005cb4
   2ba80:	0002aff9 	.word	0x0002aff9
   2ba84:	0003a4b4 	.word	0x0003a4b4
   2ba88:	0002ac11 	.word	0x0002ac11
   2ba8c:	0002ac55 	.word	0x0002ac55
   2ba90:	0002b06d 	.word	0x0002b06d
   2ba94:	0002af71 	.word	0x0002af71
   2ba98:	00020040 	.word	0x00020040
   2ba9c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2baa0:	46c0      	nop			; (mov r8, r8)
   2baa2:	68bb      	ldr	r3, [r7, #8]
   2baa4:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2baa6:	4912      	ldr	r1, [pc, #72]	; (2baf0 <tcc_init+0x3c4>)
   2baa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2baaa:	4091      	lsls	r1, r2
   2baac:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2baae:	4013      	ands	r3, r2
   2bab0:	d1f7      	bne.n	2baa2 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2bab2:	687a      	ldr	r2, [r7, #4]
   2bab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bab6:	3306      	adds	r3, #6
   2bab8:	009b      	lsls	r3, r3, #2
   2baba:	18d3      	adds	r3, r2, r3
   2babc:	3304      	adds	r3, #4
   2babe:	681a      	ldr	r2, [r3, #0]
   2bac0:	68b9      	ldr	r1, [r7, #8]
   2bac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bac4:	3310      	adds	r3, #16
   2bac6:	009b      	lsls	r3, r3, #2
   2bac8:	18cb      	adds	r3, r1, r3
   2baca:	3304      	adds	r3, #4
   2bacc:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2bace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bad0:	3301      	adds	r3, #1
   2bad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bad4:	233b      	movs	r3, #59	; 0x3b
   2bad6:	18fb      	adds	r3, r7, r3
   2bad8:	781b      	ldrb	r3, [r3, #0]
   2bada:	4a06      	ldr	r2, [pc, #24]	; (2baf4 <tcc_init+0x3c8>)
   2badc:	5cd3      	ldrb	r3, [r2, r3]
   2bade:	001a      	movs	r2, r3
   2bae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bae2:	429a      	cmp	r2, r3
   2bae4:	dcdc      	bgt.n	2baa0 <tcc_init+0x374>
	}

	return STATUS_OK;
   2bae6:	2300      	movs	r3, #0
}
   2bae8:	0018      	movs	r0, r3
   2baea:	46bd      	mov	sp, r7
   2baec:	b011      	add	sp, #68	; 0x44
   2baee:	bd90      	pop	{r4, r7, pc}
   2baf0:	00080100 	.word	0x00080100
   2baf4:	0003a4d0 	.word	0x0003a4d0

0002baf8 <system_interrupt_enable>:
{
   2baf8:	b580      	push	{r7, lr}
   2bafa:	b082      	sub	sp, #8
   2bafc:	af00      	add	r7, sp, #0
   2bafe:	0002      	movs	r2, r0
   2bb00:	1dfb      	adds	r3, r7, #7
   2bb02:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2bb04:	4b06      	ldr	r3, [pc, #24]	; (2bb20 <system_interrupt_enable+0x28>)
   2bb06:	1dfa      	adds	r2, r7, #7
   2bb08:	7812      	ldrb	r2, [r2, #0]
   2bb0a:	0011      	movs	r1, r2
   2bb0c:	221f      	movs	r2, #31
   2bb0e:	400a      	ands	r2, r1
   2bb10:	2101      	movs	r1, #1
   2bb12:	4091      	lsls	r1, r2
   2bb14:	000a      	movs	r2, r1
   2bb16:	601a      	str	r2, [r3, #0]
}
   2bb18:	46c0      	nop			; (mov r8, r8)
   2bb1a:	46bd      	mov	sp, r7
   2bb1c:	b002      	add	sp, #8
   2bb1e:	bd80      	pop	{r7, pc}
   2bb20:	e000e100 	.word	0xe000e100

0002bb24 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2bb24:	b580      	push	{r7, lr}
   2bb26:	b082      	sub	sp, #8
   2bb28:	af00      	add	r7, sp, #0
   2bb2a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2bb2c:	4a04      	ldr	r2, [pc, #16]	; (2bb40 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2bb2e:	687b      	ldr	r3, [r7, #4]
   2bb30:	18d3      	adds	r3, r2, r3
   2bb32:	781b      	ldrb	r3, [r3, #0]
   2bb34:	b25b      	sxtb	r3, r3
}
   2bb36:	0018      	movs	r0, r3
   2bb38:	46bd      	mov	sp, r7
   2bb3a:	b002      	add	sp, #8
   2bb3c:	bd80      	pop	{r7, pc}
   2bb3e:	46c0      	nop			; (mov r8, r8)
   2bb40:	20000128 	.word	0x20000128

0002bb44 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2bb44:	b580      	push	{r7, lr}
   2bb46:	b084      	sub	sp, #16
   2bb48:	af00      	add	r7, sp, #0
   2bb4a:	60f8      	str	r0, [r7, #12]
   2bb4c:	60b9      	str	r1, [r7, #8]
   2bb4e:	1dfb      	adds	r3, r7, #7
   2bb50:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2bb52:	1dfb      	adds	r3, r7, #7
   2bb54:	781b      	ldrb	r3, [r3, #0]
   2bb56:	68fa      	ldr	r2, [r7, #12]
   2bb58:	009b      	lsls	r3, r3, #2
   2bb5a:	18d3      	adds	r3, r2, r3
   2bb5c:	3304      	adds	r3, #4
   2bb5e:	68ba      	ldr	r2, [r7, #8]
   2bb60:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2bb62:	68fb      	ldr	r3, [r7, #12]
   2bb64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2bb66:	1dfb      	adds	r3, r7, #7
   2bb68:	7819      	ldrb	r1, [r3, #0]
   2bb6a:	4b05      	ldr	r3, [pc, #20]	; (2bb80 <tcc_register_callback+0x3c>)
   2bb6c:	0089      	lsls	r1, r1, #2
   2bb6e:	58cb      	ldr	r3, [r1, r3]
   2bb70:	431a      	orrs	r2, r3
   2bb72:	68fb      	ldr	r3, [r7, #12]
   2bb74:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2bb76:	2300      	movs	r3, #0
}
   2bb78:	0018      	movs	r0, r3
   2bb7a:	46bd      	mov	sp, r7
   2bb7c:	b004      	add	sp, #16
   2bb7e:	bd80      	pop	{r7, pc}
   2bb80:	0003a4d8 	.word	0x0003a4d8

0002bb84 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2bb84:	b580      	push	{r7, lr}
   2bb86:	b082      	sub	sp, #8
   2bb88:	af00      	add	r7, sp, #0
   2bb8a:	6078      	str	r0, [r7, #4]
   2bb8c:	000a      	movs	r2, r1
   2bb8e:	1cfb      	adds	r3, r7, #3
   2bb90:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2bb92:	687b      	ldr	r3, [r7, #4]
   2bb94:	681b      	ldr	r3, [r3, #0]
   2bb96:	0018      	movs	r0, r3
   2bb98:	4b0f      	ldr	r3, [pc, #60]	; (2bbd8 <tcc_enable_callback+0x54>)
   2bb9a:	4798      	blx	r3
   2bb9c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2bb9e:	0018      	movs	r0, r3
   2bba0:	4b0e      	ldr	r3, [pc, #56]	; (2bbdc <tcc_enable_callback+0x58>)
   2bba2:	4798      	blx	r3
   2bba4:	0003      	movs	r3, r0
   2bba6:	0018      	movs	r0, r3
   2bba8:	4b0d      	ldr	r3, [pc, #52]	; (2bbe0 <tcc_enable_callback+0x5c>)
   2bbaa:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2bbac:	687b      	ldr	r3, [r7, #4]
   2bbae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2bbb0:	1cfb      	adds	r3, r7, #3
   2bbb2:	7819      	ldrb	r1, [r3, #0]
   2bbb4:	4b0b      	ldr	r3, [pc, #44]	; (2bbe4 <tcc_enable_callback+0x60>)
   2bbb6:	0089      	lsls	r1, r1, #2
   2bbb8:	58cb      	ldr	r3, [r1, r3]
   2bbba:	431a      	orrs	r2, r3
   2bbbc:	687b      	ldr	r3, [r7, #4]
   2bbbe:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2bbc0:	687b      	ldr	r3, [r7, #4]
   2bbc2:	681b      	ldr	r3, [r3, #0]
   2bbc4:	1cfa      	adds	r2, r7, #3
   2bbc6:	7811      	ldrb	r1, [r2, #0]
   2bbc8:	4a06      	ldr	r2, [pc, #24]	; (2bbe4 <tcc_enable_callback+0x60>)
   2bbca:	0089      	lsls	r1, r1, #2
   2bbcc:	588a      	ldr	r2, [r1, r2]
   2bbce:	629a      	str	r2, [r3, #40]	; 0x28
}
   2bbd0:	46c0      	nop			; (mov r8, r8)
   2bbd2:	46bd      	mov	sp, r7
   2bbd4:	b002      	add	sp, #8
   2bbd6:	bd80      	pop	{r7, pc}
   2bbd8:	0002b095 	.word	0x0002b095
   2bbdc:	0002bb25 	.word	0x0002bb25
   2bbe0:	0002baf9 	.word	0x0002baf9
   2bbe4:	0003a4d8 	.word	0x0003a4d8

0002bbe8 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2bbe8:	b580      	push	{r7, lr}
   2bbea:	af00      	add	r7, sp, #0
   2bbec:	2000      	movs	r0, #0
   2bbee:	4b02      	ldr	r3, [pc, #8]	; (2bbf8 <TCC0_Handler+0x10>)
   2bbf0:	4798      	blx	r3
   2bbf2:	46c0      	nop			; (mov r8, r8)
   2bbf4:	46bd      	mov	sp, r7
   2bbf6:	bd80      	pop	{r7, pc}
   2bbf8:	0002bc25 	.word	0x0002bc25

0002bbfc <TCC1_Handler>:
   2bbfc:	b580      	push	{r7, lr}
   2bbfe:	af00      	add	r7, sp, #0
   2bc00:	2001      	movs	r0, #1
   2bc02:	4b02      	ldr	r3, [pc, #8]	; (2bc0c <TCC1_Handler+0x10>)
   2bc04:	4798      	blx	r3
   2bc06:	46c0      	nop			; (mov r8, r8)
   2bc08:	46bd      	mov	sp, r7
   2bc0a:	bd80      	pop	{r7, pc}
   2bc0c:	0002bc25 	.word	0x0002bc25

0002bc10 <TCC2_Handler>:
   2bc10:	b580      	push	{r7, lr}
   2bc12:	af00      	add	r7, sp, #0
   2bc14:	2002      	movs	r0, #2
   2bc16:	4b02      	ldr	r3, [pc, #8]	; (2bc20 <TCC2_Handler+0x10>)
   2bc18:	4798      	blx	r3
   2bc1a:	46c0      	nop			; (mov r8, r8)
   2bc1c:	46bd      	mov	sp, r7
   2bc1e:	bd80      	pop	{r7, pc}
   2bc20:	0002bc25 	.word	0x0002bc25

0002bc24 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2bc24:	b580      	push	{r7, lr}
   2bc26:	b086      	sub	sp, #24
   2bc28:	af00      	add	r7, sp, #0
   2bc2a:	0002      	movs	r2, r0
   2bc2c:	1dfb      	adds	r3, r7, #7
   2bc2e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2bc30:	1dfb      	adds	r3, r7, #7
   2bc32:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2bc34:	4b18      	ldr	r3, [pc, #96]	; (2bc98 <_tcc_interrupt_handler+0x74>)
   2bc36:	0092      	lsls	r2, r2, #2
   2bc38:	58d3      	ldr	r3, [r2, r3]
   2bc3a:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bc3c:	693b      	ldr	r3, [r7, #16]
   2bc3e:	681b      	ldr	r3, [r3, #0]
   2bc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2bc42:	693b      	ldr	r3, [r7, #16]
   2bc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bc46:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2bc48:	693b      	ldr	r3, [r7, #16]
   2bc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bc4c:	4013      	ands	r3, r2
   2bc4e:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bc50:	2300      	movs	r3, #0
   2bc52:	617b      	str	r3, [r7, #20]
   2bc54:	e019      	b.n	2bc8a <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2bc56:	4b11      	ldr	r3, [pc, #68]	; (2bc9c <_tcc_interrupt_handler+0x78>)
   2bc58:	697a      	ldr	r2, [r7, #20]
   2bc5a:	0092      	lsls	r2, r2, #2
   2bc5c:	58d3      	ldr	r3, [r2, r3]
   2bc5e:	68fa      	ldr	r2, [r7, #12]
   2bc60:	4013      	ands	r3, r2
   2bc62:	d00f      	beq.n	2bc84 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2bc64:	693a      	ldr	r2, [r7, #16]
   2bc66:	697b      	ldr	r3, [r7, #20]
   2bc68:	009b      	lsls	r3, r3, #2
   2bc6a:	18d3      	adds	r3, r2, r3
   2bc6c:	3304      	adds	r3, #4
   2bc6e:	681b      	ldr	r3, [r3, #0]
   2bc70:	693a      	ldr	r2, [r7, #16]
   2bc72:	0010      	movs	r0, r2
   2bc74:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2bc76:	693b      	ldr	r3, [r7, #16]
   2bc78:	681b      	ldr	r3, [r3, #0]
   2bc7a:	4a08      	ldr	r2, [pc, #32]	; (2bc9c <_tcc_interrupt_handler+0x78>)
   2bc7c:	6979      	ldr	r1, [r7, #20]
   2bc7e:	0089      	lsls	r1, r1, #2
   2bc80:	588a      	ldr	r2, [r1, r2]
   2bc82:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bc84:	697b      	ldr	r3, [r7, #20]
   2bc86:	3301      	adds	r3, #1
   2bc88:	617b      	str	r3, [r7, #20]
   2bc8a:	697b      	ldr	r3, [r7, #20]
   2bc8c:	2b0b      	cmp	r3, #11
   2bc8e:	dde2      	ble.n	2bc56 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2bc90:	46c0      	nop			; (mov r8, r8)
   2bc92:	46bd      	mov	sp, r7
   2bc94:	b006      	add	sp, #24
   2bc96:	bd80      	pop	{r7, pc}
   2bc98:	20005cb4 	.word	0x20005cb4
   2bc9c:	0003a4d8 	.word	0x0003a4d8

0002bca0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2bca0:	b580      	push	{r7, lr}
   2bca2:	b082      	sub	sp, #8
   2bca4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2bca6:	4b2f      	ldr	r3, [pc, #188]	; (2bd64 <Reset_Handler+0xc4>)
   2bca8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2bcaa:	4b2f      	ldr	r3, [pc, #188]	; (2bd68 <Reset_Handler+0xc8>)
   2bcac:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2bcae:	687a      	ldr	r2, [r7, #4]
   2bcb0:	683b      	ldr	r3, [r7, #0]
   2bcb2:	429a      	cmp	r2, r3
   2bcb4:	d00c      	beq.n	2bcd0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2bcb6:	e007      	b.n	2bcc8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2bcb8:	683b      	ldr	r3, [r7, #0]
   2bcba:	1d1a      	adds	r2, r3, #4
   2bcbc:	603a      	str	r2, [r7, #0]
   2bcbe:	687a      	ldr	r2, [r7, #4]
   2bcc0:	1d11      	adds	r1, r2, #4
   2bcc2:	6079      	str	r1, [r7, #4]
   2bcc4:	6812      	ldr	r2, [r2, #0]
   2bcc6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2bcc8:	683a      	ldr	r2, [r7, #0]
   2bcca:	4b28      	ldr	r3, [pc, #160]	; (2bd6c <Reset_Handler+0xcc>)
   2bccc:	429a      	cmp	r2, r3
   2bcce:	d3f3      	bcc.n	2bcb8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2bcd0:	4b27      	ldr	r3, [pc, #156]	; (2bd70 <Reset_Handler+0xd0>)
   2bcd2:	603b      	str	r3, [r7, #0]
   2bcd4:	e004      	b.n	2bce0 <Reset_Handler+0x40>
                *pDest++ = 0;
   2bcd6:	683b      	ldr	r3, [r7, #0]
   2bcd8:	1d1a      	adds	r2, r3, #4
   2bcda:	603a      	str	r2, [r7, #0]
   2bcdc:	2200      	movs	r2, #0
   2bcde:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2bce0:	683a      	ldr	r2, [r7, #0]
   2bce2:	4b24      	ldr	r3, [pc, #144]	; (2bd74 <Reset_Handler+0xd4>)
   2bce4:	429a      	cmp	r2, r3
   2bce6:	d3f6      	bcc.n	2bcd6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2bce8:	4b23      	ldr	r3, [pc, #140]	; (2bd78 <Reset_Handler+0xd8>)
   2bcea:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2bcec:	4b23      	ldr	r3, [pc, #140]	; (2bd7c <Reset_Handler+0xdc>)
   2bcee:	687a      	ldr	r2, [r7, #4]
   2bcf0:	21ff      	movs	r1, #255	; 0xff
   2bcf2:	438a      	bics	r2, r1
   2bcf4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2bcf6:	4a22      	ldr	r2, [pc, #136]	; (2bd80 <Reset_Handler+0xe0>)
   2bcf8:	2390      	movs	r3, #144	; 0x90
   2bcfa:	005b      	lsls	r3, r3, #1
   2bcfc:	2102      	movs	r1, #2
   2bcfe:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2bd00:	4a20      	ldr	r2, [pc, #128]	; (2bd84 <Reset_Handler+0xe4>)
   2bd02:	78d3      	ldrb	r3, [r2, #3]
   2bd04:	2103      	movs	r1, #3
   2bd06:	438b      	bics	r3, r1
   2bd08:	1c19      	adds	r1, r3, #0
   2bd0a:	2302      	movs	r3, #2
   2bd0c:	430b      	orrs	r3, r1
   2bd0e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2bd10:	4a1c      	ldr	r2, [pc, #112]	; (2bd84 <Reset_Handler+0xe4>)
   2bd12:	78d3      	ldrb	r3, [r2, #3]
   2bd14:	210c      	movs	r1, #12
   2bd16:	438b      	bics	r3, r1
   2bd18:	1c19      	adds	r1, r3, #0
   2bd1a:	2308      	movs	r3, #8
   2bd1c:	430b      	orrs	r3, r1
   2bd1e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2bd20:	4a19      	ldr	r2, [pc, #100]	; (2bd88 <Reset_Handler+0xe8>)
   2bd22:	7b93      	ldrb	r3, [r2, #14]
   2bd24:	2130      	movs	r1, #48	; 0x30
   2bd26:	438b      	bics	r3, r1
   2bd28:	1c19      	adds	r1, r3, #0
   2bd2a:	2320      	movs	r3, #32
   2bd2c:	430b      	orrs	r3, r1
   2bd2e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2bd30:	4a15      	ldr	r2, [pc, #84]	; (2bd88 <Reset_Handler+0xe8>)
   2bd32:	7b93      	ldrb	r3, [r2, #14]
   2bd34:	210c      	movs	r1, #12
   2bd36:	438b      	bics	r3, r1
   2bd38:	1c19      	adds	r1, r3, #0
   2bd3a:	2308      	movs	r3, #8
   2bd3c:	430b      	orrs	r3, r1
   2bd3e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2bd40:	4a11      	ldr	r2, [pc, #68]	; (2bd88 <Reset_Handler+0xe8>)
   2bd42:	7b93      	ldrb	r3, [r2, #14]
   2bd44:	2103      	movs	r1, #3
   2bd46:	438b      	bics	r3, r1
   2bd48:	1c19      	adds	r1, r3, #0
   2bd4a:	2302      	movs	r3, #2
   2bd4c:	430b      	orrs	r3, r1
   2bd4e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2bd50:	4a0e      	ldr	r2, [pc, #56]	; (2bd8c <Reset_Handler+0xec>)
   2bd52:	6853      	ldr	r3, [r2, #4]
   2bd54:	2180      	movs	r1, #128	; 0x80
   2bd56:	430b      	orrs	r3, r1
   2bd58:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2bd5a:	4b0d      	ldr	r3, [pc, #52]	; (2bd90 <Reset_Handler+0xf0>)
   2bd5c:	4798      	blx	r3

        /* Branch to main function */
        main();
   2bd5e:	4b0d      	ldr	r3, [pc, #52]	; (2bd94 <Reset_Handler+0xf4>)
   2bd60:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2bd62:	e7fe      	b.n	2bd62 <Reset_Handler+0xc2>
   2bd64:	0003b298 	.word	0x0003b298
   2bd68:	20000000 	.word	0x20000000
   2bd6c:	20000300 	.word	0x20000300
   2bd70:	20000300 	.word	0x20000300
   2bd74:	20005d24 	.word	0x20005d24
   2bd78:	00012000 	.word	0x00012000
   2bd7c:	e000ed00 	.word	0xe000ed00
   2bd80:	41007000 	.word	0x41007000
   2bd84:	41005000 	.word	0x41005000
   2bd88:	41004800 	.word	0x41004800
   2bd8c:	41004000 	.word	0x41004000
   2bd90:	000356d9 	.word	0x000356d9
   2bd94:	000334d5 	.word	0x000334d5

0002bd98 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2bd98:	b580      	push	{r7, lr}
   2bd9a:	af00      	add	r7, sp, #0
  __asm volatile (
   2bd9c:	2004      	movs	r0, #4
   2bd9e:	4671      	mov	r1, lr
   2bda0:	4208      	tst	r0, r1
   2bda2:	d002      	beq.n	2bdaa <_MSP>
   2bda4:	f3ef 8009 	mrs	r0, PSP
   2bda8:	e001      	b.n	2bdae <_HALT>

0002bdaa <_MSP>:
   2bdaa:	f3ef 8008 	mrs	r0, MSP

0002bdae <_HALT>:
   2bdae:	6941      	ldr	r1, [r0, #20]
   2bdb0:	e004      	b.n	2bdbc <HardFault_HandlerC>
   2bdb2:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2bdb4:	46c0      	nop			; (mov r8, r8)
   2bdb6:	46bd      	mov	sp, r7
   2bdb8:	bd80      	pop	{r7, pc}
	...

0002bdbc <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2bdbc:	b580      	push	{r7, lr}
   2bdbe:	b090      	sub	sp, #64	; 0x40
   2bdc0:	af00      	add	r7, sp, #0
   2bdc2:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2bdc4:	687b      	ldr	r3, [r7, #4]
   2bdc6:	681b      	ldr	r3, [r3, #0]
   2bdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2bdca:	687b      	ldr	r3, [r7, #4]
   2bdcc:	685b      	ldr	r3, [r3, #4]
   2bdce:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2bdd0:	687b      	ldr	r3, [r7, #4]
   2bdd2:	689b      	ldr	r3, [r3, #8]
   2bdd4:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2bdd6:	687b      	ldr	r3, [r7, #4]
   2bdd8:	68db      	ldr	r3, [r3, #12]
   2bdda:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2bddc:	687b      	ldr	r3, [r7, #4]
   2bdde:	691b      	ldr	r3, [r3, #16]
   2bde0:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2bde2:	687b      	ldr	r3, [r7, #4]
   2bde4:	695b      	ldr	r3, [r3, #20]
   2bde6:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2bde8:	687b      	ldr	r3, [r7, #4]
   2bdea:	699b      	ldr	r3, [r3, #24]
   2bdec:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2bdee:	687b      	ldr	r3, [r7, #4]
   2bdf0:	69db      	ldr	r3, [r3, #28]
   2bdf2:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2bdf4:	4b0b      	ldr	r3, [pc, #44]	; (2be24 <HardFault_HandlerC+0x68>)
   2bdf6:	681b      	ldr	r3, [r3, #0]
   2bdf8:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2bdfa:	4b0b      	ldr	r3, [pc, #44]	; (2be28 <HardFault_HandlerC+0x6c>)
   2bdfc:	681b      	ldr	r3, [r3, #0]
   2bdfe:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2be00:	4b0a      	ldr	r3, [pc, #40]	; (2be2c <HardFault_HandlerC+0x70>)
   2be02:	681b      	ldr	r3, [r3, #0]
   2be04:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2be06:	4b0a      	ldr	r3, [pc, #40]	; (2be30 <HardFault_HandlerC+0x74>)
   2be08:	681b      	ldr	r3, [r3, #0]
   2be0a:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2be0c:	4b09      	ldr	r3, [pc, #36]	; (2be34 <HardFault_HandlerC+0x78>)
   2be0e:	681b      	ldr	r3, [r3, #0]
   2be10:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2be12:	4b09      	ldr	r3, [pc, #36]	; (2be38 <HardFault_HandlerC+0x7c>)
   2be14:	681b      	ldr	r3, [r3, #0]
   2be16:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2be18:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2be1a:	46c0      	nop			; (mov r8, r8)
   2be1c:	46bd      	mov	sp, r7
   2be1e:	b010      	add	sp, #64	; 0x40
   2be20:	bd80      	pop	{r7, pc}
   2be22:	46c0      	nop			; (mov r8, r8)
   2be24:	e000ed28 	.word	0xe000ed28
   2be28:	e000ed2c 	.word	0xe000ed2c
   2be2c:	e000ed30 	.word	0xe000ed30
   2be30:	e000ed3c 	.word	0xe000ed3c
   2be34:	e000ed34 	.word	0xe000ed34
   2be38:	e000ed38 	.word	0xe000ed38

0002be3c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2be3c:	b580      	push	{r7, lr}
   2be3e:	b086      	sub	sp, #24
   2be40:	af00      	add	r7, sp, #0
   2be42:	60f8      	str	r0, [r7, #12]
   2be44:	60b9      	str	r1, [r7, #8]
   2be46:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2be48:	2300      	movs	r3, #0
   2be4a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2be4c:	68fb      	ldr	r3, [r7, #12]
   2be4e:	2b00      	cmp	r3, #0
   2be50:	d012      	beq.n	2be78 <_read+0x3c>
		return -1;
   2be52:	2301      	movs	r3, #1
   2be54:	425b      	negs	r3, r3
   2be56:	e013      	b.n	2be80 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2be58:	4b0b      	ldr	r3, [pc, #44]	; (2be88 <_read+0x4c>)
   2be5a:	681a      	ldr	r2, [r3, #0]
   2be5c:	4b0b      	ldr	r3, [pc, #44]	; (2be8c <_read+0x50>)
   2be5e:	681b      	ldr	r3, [r3, #0]
   2be60:	68b9      	ldr	r1, [r7, #8]
   2be62:	0018      	movs	r0, r3
   2be64:	4790      	blx	r2
		ptr++;
   2be66:	68bb      	ldr	r3, [r7, #8]
   2be68:	3301      	adds	r3, #1
   2be6a:	60bb      	str	r3, [r7, #8]
		nChars++;
   2be6c:	697b      	ldr	r3, [r7, #20]
   2be6e:	3301      	adds	r3, #1
   2be70:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2be72:	687b      	ldr	r3, [r7, #4]
   2be74:	3b01      	subs	r3, #1
   2be76:	607b      	str	r3, [r7, #4]
   2be78:	687b      	ldr	r3, [r7, #4]
   2be7a:	2b00      	cmp	r3, #0
   2be7c:	dcec      	bgt.n	2be58 <_read+0x1c>
	}
	return nChars;
   2be7e:	697b      	ldr	r3, [r7, #20]
}
   2be80:	0018      	movs	r0, r3
   2be82:	46bd      	mov	sp, r7
   2be84:	b006      	add	sp, #24
   2be86:	bd80      	pop	{r7, pc}
   2be88:	20005cc0 	.word	0x20005cc0
   2be8c:	20005cc8 	.word	0x20005cc8

0002be90 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2be90:	b580      	push	{r7, lr}
   2be92:	b086      	sub	sp, #24
   2be94:	af00      	add	r7, sp, #0
   2be96:	60f8      	str	r0, [r7, #12]
   2be98:	60b9      	str	r1, [r7, #8]
   2be9a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2be9c:	2300      	movs	r3, #0
   2be9e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2bea0:	68fb      	ldr	r3, [r7, #12]
   2bea2:	2b01      	cmp	r3, #1
   2bea4:	d01d      	beq.n	2bee2 <_write+0x52>
   2bea6:	68fb      	ldr	r3, [r7, #12]
   2bea8:	2b02      	cmp	r3, #2
   2beaa:	d01a      	beq.n	2bee2 <_write+0x52>
   2beac:	68fb      	ldr	r3, [r7, #12]
   2beae:	2b03      	cmp	r3, #3
   2beb0:	d017      	beq.n	2bee2 <_write+0x52>
		return -1;
   2beb2:	2301      	movs	r3, #1
   2beb4:	425b      	negs	r3, r3
   2beb6:	e018      	b.n	2beea <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2beb8:	4b0e      	ldr	r3, [pc, #56]	; (2bef4 <_write+0x64>)
   2beba:	681a      	ldr	r2, [r3, #0]
   2bebc:	4b0e      	ldr	r3, [pc, #56]	; (2bef8 <_write+0x68>)
   2bebe:	6818      	ldr	r0, [r3, #0]
   2bec0:	68bb      	ldr	r3, [r7, #8]
   2bec2:	1c59      	adds	r1, r3, #1
   2bec4:	60b9      	str	r1, [r7, #8]
   2bec6:	781b      	ldrb	r3, [r3, #0]
   2bec8:	0019      	movs	r1, r3
   2beca:	4790      	blx	r2
   2becc:	1e03      	subs	r3, r0, #0
   2bece:	da02      	bge.n	2bed6 <_write+0x46>
			return -1;
   2bed0:	2301      	movs	r3, #1
   2bed2:	425b      	negs	r3, r3
   2bed4:	e009      	b.n	2beea <_write+0x5a>
		}
		++nChars;
   2bed6:	697b      	ldr	r3, [r7, #20]
   2bed8:	3301      	adds	r3, #1
   2beda:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2bedc:	687b      	ldr	r3, [r7, #4]
   2bede:	3b01      	subs	r3, #1
   2bee0:	607b      	str	r3, [r7, #4]
   2bee2:	687b      	ldr	r3, [r7, #4]
   2bee4:	2b00      	cmp	r3, #0
   2bee6:	d1e7      	bne.n	2beb8 <_write+0x28>
	}
	return nChars;
   2bee8:	697b      	ldr	r3, [r7, #20]
}
   2beea:	0018      	movs	r0, r3
   2beec:	46bd      	mov	sp, r7
   2beee:	b006      	add	sp, #24
   2bef0:	bd80      	pop	{r7, pc}
   2bef2:	46c0      	nop			; (mov r8, r8)
   2bef4:	20005cc4 	.word	0x20005cc4
   2bef8:	20005cc8 	.word	0x20005cc8

0002befc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2befc:	b580      	push	{r7, lr}
   2befe:	b084      	sub	sp, #16
   2bf00:	af00      	add	r7, sp, #0
   2bf02:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2bf04:	4b0a      	ldr	r3, [pc, #40]	; (2bf30 <_sbrk+0x34>)
   2bf06:	681b      	ldr	r3, [r3, #0]
   2bf08:	2b00      	cmp	r3, #0
   2bf0a:	d102      	bne.n	2bf12 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2bf0c:	4b08      	ldr	r3, [pc, #32]	; (2bf30 <_sbrk+0x34>)
   2bf0e:	4a09      	ldr	r2, [pc, #36]	; (2bf34 <_sbrk+0x38>)
   2bf10:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2bf12:	4b07      	ldr	r3, [pc, #28]	; (2bf30 <_sbrk+0x34>)
   2bf14:	681b      	ldr	r3, [r3, #0]
   2bf16:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2bf18:	4b05      	ldr	r3, [pc, #20]	; (2bf30 <_sbrk+0x34>)
   2bf1a:	681a      	ldr	r2, [r3, #0]
   2bf1c:	687b      	ldr	r3, [r7, #4]
   2bf1e:	18d2      	adds	r2, r2, r3
   2bf20:	4b03      	ldr	r3, [pc, #12]	; (2bf30 <_sbrk+0x34>)
   2bf22:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2bf24:	68fb      	ldr	r3, [r7, #12]
}
   2bf26:	0018      	movs	r0, r3
   2bf28:	46bd      	mov	sp, r7
   2bf2a:	b004      	add	sp, #16
   2bf2c:	bd80      	pop	{r7, pc}
   2bf2e:	46c0      	nop			; (mov r8, r8)
   2bf30:	200042f4 	.word	0x200042f4
   2bf34:	20007d28 	.word	0x20007d28

0002bf38 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2bf38:	b580      	push	{r7, lr}
   2bf3a:	b082      	sub	sp, #8
   2bf3c:	af00      	add	r7, sp, #0
   2bf3e:	6078      	str	r0, [r7, #4]
	return -1;
   2bf40:	2301      	movs	r3, #1
   2bf42:	425b      	negs	r3, r3
}
   2bf44:	0018      	movs	r0, r3
   2bf46:	46bd      	mov	sp, r7
   2bf48:	b002      	add	sp, #8
   2bf4a:	bd80      	pop	{r7, pc}

0002bf4c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2bf4c:	b580      	push	{r7, lr}
   2bf4e:	b082      	sub	sp, #8
   2bf50:	af00      	add	r7, sp, #0
   2bf52:	6078      	str	r0, [r7, #4]
   2bf54:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2bf56:	683b      	ldr	r3, [r7, #0]
   2bf58:	2280      	movs	r2, #128	; 0x80
   2bf5a:	0192      	lsls	r2, r2, #6
   2bf5c:	605a      	str	r2, [r3, #4]

	return 0;
   2bf5e:	2300      	movs	r3, #0
}
   2bf60:	0018      	movs	r0, r3
   2bf62:	46bd      	mov	sp, r7
   2bf64:	b002      	add	sp, #8
   2bf66:	bd80      	pop	{r7, pc}

0002bf68 <_isatty>:

extern int _isatty(int file)
{
   2bf68:	b580      	push	{r7, lr}
   2bf6a:	b082      	sub	sp, #8
   2bf6c:	af00      	add	r7, sp, #0
   2bf6e:	6078      	str	r0, [r7, #4]
	return 1;
   2bf70:	2301      	movs	r3, #1
}
   2bf72:	0018      	movs	r0, r3
   2bf74:	46bd      	mov	sp, r7
   2bf76:	b002      	add	sp, #8
   2bf78:	bd80      	pop	{r7, pc}

0002bf7a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2bf7a:	b580      	push	{r7, lr}
   2bf7c:	b084      	sub	sp, #16
   2bf7e:	af00      	add	r7, sp, #0
   2bf80:	60f8      	str	r0, [r7, #12]
   2bf82:	60b9      	str	r1, [r7, #8]
   2bf84:	607a      	str	r2, [r7, #4]
	return 0;
   2bf86:	2300      	movs	r3, #0
}
   2bf88:	0018      	movs	r0, r3
   2bf8a:	46bd      	mov	sp, r7
   2bf8c:	b004      	add	sp, #16
   2bf8e:	bd80      	pop	{r7, pc}

0002bf90 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2bf90:	b580      	push	{r7, lr}
   2bf92:	b082      	sub	sp, #8
   2bf94:	af00      	add	r7, sp, #0
   2bf96:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2bf98:	687b      	ldr	r3, [r7, #4]
   2bf9a:	2200      	movs	r2, #0
   2bf9c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2bf9e:	687b      	ldr	r3, [r7, #4]
   2bfa0:	2200      	movs	r2, #0
   2bfa2:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2bfa4:	687b      	ldr	r3, [r7, #4]
   2bfa6:	2200      	movs	r2, #0
   2bfa8:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2bfaa:	687b      	ldr	r3, [r7, #4]
   2bfac:	2200      	movs	r2, #0
   2bfae:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2bfb0:	687b      	ldr	r3, [r7, #4]
   2bfb2:	2201      	movs	r2, #1
   2bfb4:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2bfb6:	687b      	ldr	r3, [r7, #4]
   2bfb8:	2201      	movs	r2, #1
   2bfba:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2bfbc:	687b      	ldr	r3, [r7, #4]
   2bfbe:	22fa      	movs	r2, #250	; 0xfa
   2bfc0:	00d2      	lsls	r2, r2, #3
   2bfc2:	80da      	strh	r2, [r3, #6]
}
   2bfc4:	46c0      	nop			; (mov r8, r8)
   2bfc6:	46bd      	mov	sp, r7
   2bfc8:	b002      	add	sp, #8
   2bfca:	bd80      	pop	{r7, pc}

0002bfcc <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2bfcc:	b580      	push	{r7, lr}
   2bfce:	b086      	sub	sp, #24
   2bfd0:	af00      	add	r7, sp, #0
   2bfd2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2bfd4:	230c      	movs	r3, #12
   2bfd6:	18fb      	adds	r3, r7, r3
   2bfd8:	0018      	movs	r0, r3
   2bfda:	4b23      	ldr	r3, [pc, #140]	; (2c068 <rtc_calendar_get_config_defaults+0x9c>)
   2bfdc:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2bfde:	687b      	ldr	r3, [r7, #4]
   2bfe0:	22a0      	movs	r2, #160	; 0xa0
   2bfe2:	0112      	lsls	r2, r2, #4
   2bfe4:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2bfe6:	687b      	ldr	r3, [r7, #4]
   2bfe8:	2200      	movs	r2, #0
   2bfea:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2bfec:	687b      	ldr	r3, [r7, #4]
   2bfee:	2200      	movs	r2, #0
   2bff0:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2bff2:	687b      	ldr	r3, [r7, #4]
   2bff4:	2200      	movs	r2, #0
   2bff6:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2bff8:	687b      	ldr	r3, [r7, #4]
   2bffa:	22fa      	movs	r2, #250	; 0xfa
   2bffc:	00d2      	lsls	r2, r2, #3
   2bffe:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2c000:	2317      	movs	r3, #23
   2c002:	18fb      	adds	r3, r7, r3
   2c004:	2200      	movs	r2, #0
   2c006:	701a      	strb	r2, [r3, #0]
   2c008:	e025      	b.n	2c056 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2c00a:	2317      	movs	r3, #23
   2c00c:	18fb      	adds	r3, r7, r3
   2c00e:	781a      	ldrb	r2, [r3, #0]
   2c010:	6879      	ldr	r1, [r7, #4]
   2c012:	2008      	movs	r0, #8
   2c014:	0013      	movs	r3, r2
   2c016:	009b      	lsls	r3, r3, #2
   2c018:	189b      	adds	r3, r3, r2
   2c01a:	005b      	lsls	r3, r3, #1
   2c01c:	18cb      	adds	r3, r1, r3
   2c01e:	181a      	adds	r2, r3, r0
   2c020:	230c      	movs	r3, #12
   2c022:	18fb      	adds	r3, r7, r3
   2c024:	0010      	movs	r0, r2
   2c026:	0019      	movs	r1, r3
   2c028:	2308      	movs	r3, #8
   2c02a:	001a      	movs	r2, r3
   2c02c:	4b0f      	ldr	r3, [pc, #60]	; (2c06c <rtc_calendar_get_config_defaults+0xa0>)
   2c02e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2c030:	2317      	movs	r3, #23
   2c032:	18fb      	adds	r3, r7, r3
   2c034:	781a      	ldrb	r2, [r3, #0]
   2c036:	6879      	ldr	r1, [r7, #4]
   2c038:	0013      	movs	r3, r2
   2c03a:	009b      	lsls	r3, r3, #2
   2c03c:	189b      	adds	r3, r3, r2
   2c03e:	005b      	lsls	r3, r3, #1
   2c040:	18cb      	adds	r3, r1, r3
   2c042:	3310      	adds	r3, #16
   2c044:	2206      	movs	r2, #6
   2c046:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2c048:	2317      	movs	r3, #23
   2c04a:	18fb      	adds	r3, r7, r3
   2c04c:	781a      	ldrb	r2, [r3, #0]
   2c04e:	2317      	movs	r3, #23
   2c050:	18fb      	adds	r3, r7, r3
   2c052:	3201      	adds	r2, #1
   2c054:	701a      	strb	r2, [r3, #0]
   2c056:	2317      	movs	r3, #23
   2c058:	18fb      	adds	r3, r7, r3
   2c05a:	781b      	ldrb	r3, [r3, #0]
   2c05c:	2b00      	cmp	r3, #0
   2c05e:	d0d4      	beq.n	2c00a <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2c060:	46c0      	nop			; (mov r8, r8)
   2c062:	46bd      	mov	sp, r7
   2c064:	b006      	add	sp, #24
   2c066:	bd80      	pop	{r7, pc}
   2c068:	0002bf91 	.word	0x0002bf91
   2c06c:	00035749 	.word	0x00035749

0002c070 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2c070:	b580      	push	{r7, lr}
   2c072:	b088      	sub	sp, #32
   2c074:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2c076:	230c      	movs	r3, #12
   2c078:	18fb      	adds	r3, r7, r3
   2c07a:	0018      	movs	r0, r3
   2c07c:	4b1a      	ldr	r3, [pc, #104]	; (2c0e8 <configure_rtc_calendar+0x78>)
   2c07e:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2c080:	1d3b      	adds	r3, r7, #4
   2c082:	0018      	movs	r0, r3
   2c084:	4b19      	ldr	r3, [pc, #100]	; (2c0ec <configure_rtc_calendar+0x7c>)
   2c086:	4798      	blx	r3
	init_time.year   = 2014;
   2c088:	1d3b      	adds	r3, r7, #4
   2c08a:	4a19      	ldr	r2, [pc, #100]	; (2c0f0 <configure_rtc_calendar+0x80>)
   2c08c:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2c08e:	1d3b      	adds	r3, r7, #4
   2c090:	2201      	movs	r2, #1
   2c092:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2c094:	1d3b      	adds	r3, r7, #4
   2c096:	2201      	movs	r2, #1
   2c098:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2c09a:	1d3b      	adds	r3, r7, #4
   2c09c:	2200      	movs	r2, #0
   2c09e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2c0a0:	1d3b      	adds	r3, r7, #4
   2c0a2:	2200      	movs	r2, #0
   2c0a4:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2c0a6:	1d3b      	adds	r3, r7, #4
   2c0a8:	2204      	movs	r2, #4
   2c0aa:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2c0ac:	230c      	movs	r3, #12
   2c0ae:	18fb      	adds	r3, r7, r3
   2c0b0:	2201      	movs	r2, #1
   2c0b2:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2c0b4:	230c      	movs	r3, #12
   2c0b6:	18fb      	adds	r3, r7, r3
   2c0b8:	1d3a      	adds	r2, r7, #4
   2c0ba:	3308      	adds	r3, #8
   2c0bc:	ca03      	ldmia	r2!, {r0, r1}
   2c0be:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2c0c0:	230c      	movs	r3, #12
   2c0c2:	18fb      	adds	r3, r7, r3
   2c0c4:	2206      	movs	r2, #6
   2c0c6:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2c0c8:	230c      	movs	r3, #12
   2c0ca:	18fa      	adds	r2, r7, r3
   2c0cc:	4909      	ldr	r1, [pc, #36]	; (2c0f4 <configure_rtc_calendar+0x84>)
   2c0ce:	4b0a      	ldr	r3, [pc, #40]	; (2c0f8 <configure_rtc_calendar+0x88>)
   2c0d0:	0018      	movs	r0, r3
   2c0d2:	4b0a      	ldr	r3, [pc, #40]	; (2c0fc <configure_rtc_calendar+0x8c>)
   2c0d4:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2c0d6:	4b08      	ldr	r3, [pc, #32]	; (2c0f8 <configure_rtc_calendar+0x88>)
   2c0d8:	0018      	movs	r0, r3
   2c0da:	4b09      	ldr	r3, [pc, #36]	; (2c100 <configure_rtc_calendar+0x90>)
   2c0dc:	4798      	blx	r3
}
   2c0de:	46c0      	nop			; (mov r8, r8)
   2c0e0:	46bd      	mov	sp, r7
   2c0e2:	b008      	add	sp, #32
   2c0e4:	bd80      	pop	{r7, pc}
   2c0e6:	46c0      	nop			; (mov r8, r8)
   2c0e8:	0002bfcd 	.word	0x0002bfcd
   2c0ec:	0002bf91 	.word	0x0002bf91
   2c0f0:	000007de 	.word	0x000007de
   2c0f4:	40001400 	.word	0x40001400
   2c0f8:	20005ccc 	.word	0x20005ccc
   2c0fc:	00027bad 	.word	0x00027bad
   2c100:	000278d9 	.word	0x000278d9

0002c104 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2c104:	b590      	push	{r4, r7, lr}
   2c106:	b085      	sub	sp, #20
   2c108:	af00      	add	r7, sp, #0
   2c10a:	0002      	movs	r2, r0
   2c10c:	1dfb      	adds	r3, r7, #7
   2c10e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2c110:	4b1a      	ldr	r3, [pc, #104]	; (2c17c <disk_initialize+0x78>)
   2c112:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2c114:	1dfb      	adds	r3, r7, #7
   2c116:	781b      	ldrb	r3, [r3, #0]
   2c118:	2b01      	cmp	r3, #1
   2c11a:	d901      	bls.n	2c120 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2c11c:	2301      	movs	r3, #1
   2c11e:	e029      	b.n	2c174 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2c120:	2300      	movs	r3, #0
   2c122:	60fb      	str	r3, [r7, #12]
   2c124:	e010      	b.n	2c148 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2c126:	230b      	movs	r3, #11
   2c128:	18fc      	adds	r4, r7, r3
   2c12a:	1dfb      	adds	r3, r7, #7
   2c12c:	781b      	ldrb	r3, [r3, #0]
   2c12e:	0018      	movs	r0, r3
   2c130:	4b13      	ldr	r3, [pc, #76]	; (2c180 <disk_initialize+0x7c>)
   2c132:	4798      	blx	r3
   2c134:	0003      	movs	r3, r0
   2c136:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2c138:	230b      	movs	r3, #11
   2c13a:	18fb      	adds	r3, r7, r3
   2c13c:	781b      	ldrb	r3, [r3, #0]
   2c13e:	2b03      	cmp	r3, #3
   2c140:	d106      	bne.n	2c150 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2c142:	68fb      	ldr	r3, [r7, #12]
   2c144:	3301      	adds	r3, #1
   2c146:	60fb      	str	r3, [r7, #12]
   2c148:	68fb      	ldr	r3, [r7, #12]
   2c14a:	2b01      	cmp	r3, #1
   2c14c:	ddeb      	ble.n	2c126 <disk_initialize+0x22>
   2c14e:	e000      	b.n	2c152 <disk_initialize+0x4e>
			break;
   2c150:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2c152:	230b      	movs	r3, #11
   2c154:	18fb      	adds	r3, r7, r3
   2c156:	781b      	ldrb	r3, [r3, #0]
   2c158:	2b00      	cmp	r3, #0
   2c15a:	d001      	beq.n	2c160 <disk_initialize+0x5c>
		return STA_NOINIT;
   2c15c:	2301      	movs	r3, #1
   2c15e:	e009      	b.n	2c174 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2c160:	1dfb      	adds	r3, r7, #7
   2c162:	781b      	ldrb	r3, [r3, #0]
   2c164:	0018      	movs	r0, r3
   2c166:	4b07      	ldr	r3, [pc, #28]	; (2c184 <disk_initialize+0x80>)
   2c168:	4798      	blx	r3
   2c16a:	1e03      	subs	r3, r0, #0
   2c16c:	d001      	beq.n	2c172 <disk_initialize+0x6e>
		return STA_PROTECT;
   2c16e:	2304      	movs	r3, #4
   2c170:	e000      	b.n	2c174 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2c172:	2300      	movs	r3, #0
}
   2c174:	0018      	movs	r0, r3
   2c176:	46bd      	mov	sp, r7
   2c178:	b005      	add	sp, #20
   2c17a:	bd90      	pop	{r4, r7, pc}
   2c17c:	0002c071 	.word	0x0002c071
   2c180:	00026dd5 	.word	0x00026dd5
   2c184:	00026e8d 	.word	0x00026e8d

0002c188 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2c188:	b580      	push	{r7, lr}
   2c18a:	b082      	sub	sp, #8
   2c18c:	af00      	add	r7, sp, #0
   2c18e:	0002      	movs	r2, r0
   2c190:	1dfb      	adds	r3, r7, #7
   2c192:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2c194:	1dfb      	adds	r3, r7, #7
   2c196:	781b      	ldrb	r3, [r3, #0]
   2c198:	0018      	movs	r0, r3
   2c19a:	4b08      	ldr	r3, [pc, #32]	; (2c1bc <disk_status+0x34>)
   2c19c:	4798      	blx	r3
   2c19e:	1e03      	subs	r3, r0, #0
   2c1a0:	d002      	beq.n	2c1a8 <disk_status+0x20>
   2c1a2:	2b02      	cmp	r3, #2
   2c1a4:	d002      	beq.n	2c1ac <disk_status+0x24>
   2c1a6:	e003      	b.n	2c1b0 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2c1a8:	2300      	movs	r3, #0
   2c1aa:	e002      	b.n	2c1b2 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2c1ac:	2303      	movs	r3, #3
   2c1ae:	e000      	b.n	2c1b2 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2c1b0:	2301      	movs	r3, #1
	}
}
   2c1b2:	0018      	movs	r0, r3
   2c1b4:	46bd      	mov	sp, r7
   2c1b6:	b002      	add	sp, #8
   2c1b8:	bd80      	pop	{r7, pc}
   2c1ba:	46c0      	nop			; (mov r8, r8)
   2c1bc:	00026dd5 	.word	0x00026dd5

0002c1c0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2c1c0:	b590      	push	{r4, r7, lr}
   2c1c2:	b089      	sub	sp, #36	; 0x24
   2c1c4:	af00      	add	r7, sp, #0
   2c1c6:	60b9      	str	r1, [r7, #8]
   2c1c8:	607a      	str	r2, [r7, #4]
   2c1ca:	0019      	movs	r1, r3
   2c1cc:	230f      	movs	r3, #15
   2c1ce:	18fb      	adds	r3, r7, r3
   2c1d0:	1c02      	adds	r2, r0, #0
   2c1d2:	701a      	strb	r2, [r3, #0]
   2c1d4:	230e      	movs	r3, #14
   2c1d6:	18fb      	adds	r3, r7, r3
   2c1d8:	1c0a      	adds	r2, r1, #0
   2c1da:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c1dc:	231b      	movs	r3, #27
   2c1de:	18fc      	adds	r4, r7, r3
   2c1e0:	230f      	movs	r3, #15
   2c1e2:	18fb      	adds	r3, r7, r3
   2c1e4:	781b      	ldrb	r3, [r3, #0]
   2c1e6:	0018      	movs	r0, r3
   2c1e8:	4b28      	ldr	r3, [pc, #160]	; (2c28c <disk_read+0xcc>)
   2c1ea:	4798      	blx	r3
   2c1ec:	0003      	movs	r3, r0
   2c1ee:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c1f0:	231b      	movs	r3, #27
   2c1f2:	18fb      	adds	r3, r7, r3
   2c1f4:	781b      	ldrb	r3, [r3, #0]
   2c1f6:	2b00      	cmp	r3, #0
   2c1f8:	d101      	bne.n	2c1fe <disk_read+0x3e>
		return RES_ERROR;
   2c1fa:	2301      	movs	r3, #1
   2c1fc:	e042      	b.n	2c284 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c1fe:	2314      	movs	r3, #20
   2c200:	18fa      	adds	r2, r7, r3
   2c202:	230f      	movs	r3, #15
   2c204:	18fb      	adds	r3, r7, r3
   2c206:	781b      	ldrb	r3, [r3, #0]
   2c208:	0011      	movs	r1, r2
   2c20a:	0018      	movs	r0, r3
   2c20c:	4b20      	ldr	r3, [pc, #128]	; (2c290 <disk_read+0xd0>)
   2c20e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c210:	230e      	movs	r3, #14
   2c212:	18fb      	adds	r3, r7, r3
   2c214:	781b      	ldrb	r3, [r3, #0]
   2c216:	221b      	movs	r2, #27
   2c218:	18ba      	adds	r2, r7, r2
   2c21a:	7812      	ldrb	r2, [r2, #0]
   2c21c:	4353      	muls	r3, r2
   2c21e:	001a      	movs	r2, r3
   2c220:	687b      	ldr	r3, [r7, #4]
   2c222:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c224:	697b      	ldr	r3, [r7, #20]
   2c226:	3301      	adds	r3, #1
   2c228:	211b      	movs	r1, #27
   2c22a:	1879      	adds	r1, r7, r1
   2c22c:	7809      	ldrb	r1, [r1, #0]
   2c22e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c230:	429a      	cmp	r2, r3
   2c232:	d901      	bls.n	2c238 <disk_read+0x78>
		return RES_PARERR;
   2c234:	2304      	movs	r3, #4
   2c236:	e025      	b.n	2c284 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2c238:	2300      	movs	r3, #0
   2c23a:	61fb      	str	r3, [r7, #28]
   2c23c:	e01b      	b.n	2c276 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c23e:	231b      	movs	r3, #27
   2c240:	18fb      	adds	r3, r7, r3
   2c242:	781b      	ldrb	r3, [r3, #0]
   2c244:	69fa      	ldr	r2, [r7, #28]
   2c246:	435a      	muls	r2, r3
   2c248:	687b      	ldr	r3, [r7, #4]
   2c24a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c24c:	231b      	movs	r3, #27
   2c24e:	18fb      	adds	r3, r7, r3
   2c250:	781b      	ldrb	r3, [r3, #0]
   2c252:	69fa      	ldr	r2, [r7, #28]
   2c254:	4353      	muls	r3, r2
   2c256:	025b      	lsls	r3, r3, #9
   2c258:	68ba      	ldr	r2, [r7, #8]
   2c25a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c25c:	230f      	movs	r3, #15
   2c25e:	18fb      	adds	r3, r7, r3
   2c260:	781b      	ldrb	r3, [r3, #0]
   2c262:	0018      	movs	r0, r3
   2c264:	4b0b      	ldr	r3, [pc, #44]	; (2c294 <disk_read+0xd4>)
   2c266:	4798      	blx	r3
   2c268:	1e03      	subs	r3, r0, #0
   2c26a:	d001      	beq.n	2c270 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c26c:	2301      	movs	r3, #1
   2c26e:	e009      	b.n	2c284 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2c270:	69fb      	ldr	r3, [r7, #28]
   2c272:	3301      	adds	r3, #1
   2c274:	61fb      	str	r3, [r7, #28]
   2c276:	230e      	movs	r3, #14
   2c278:	18fb      	adds	r3, r7, r3
   2c27a:	781a      	ldrb	r2, [r3, #0]
   2c27c:	69fb      	ldr	r3, [r7, #28]
   2c27e:	429a      	cmp	r2, r3
   2c280:	d8dd      	bhi.n	2c23e <disk_read+0x7e>
		}
	}

	return RES_OK;
   2c282:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c284:	0018      	movs	r0, r3
   2c286:	46bd      	mov	sp, r7
   2c288:	b009      	add	sp, #36	; 0x24
   2c28a:	bd90      	pop	{r4, r7, pc}
   2c28c:	00026e61 	.word	0x00026e61
   2c290:	00026e15 	.word	0x00026e15
   2c294:	00026ed5 	.word	0x00026ed5

0002c298 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2c298:	b590      	push	{r4, r7, lr}
   2c29a:	b089      	sub	sp, #36	; 0x24
   2c29c:	af00      	add	r7, sp, #0
   2c29e:	60b9      	str	r1, [r7, #8]
   2c2a0:	607a      	str	r2, [r7, #4]
   2c2a2:	0019      	movs	r1, r3
   2c2a4:	230f      	movs	r3, #15
   2c2a6:	18fb      	adds	r3, r7, r3
   2c2a8:	1c02      	adds	r2, r0, #0
   2c2aa:	701a      	strb	r2, [r3, #0]
   2c2ac:	230e      	movs	r3, #14
   2c2ae:	18fb      	adds	r3, r7, r3
   2c2b0:	1c0a      	adds	r2, r1, #0
   2c2b2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c2b4:	231b      	movs	r3, #27
   2c2b6:	18fc      	adds	r4, r7, r3
   2c2b8:	230f      	movs	r3, #15
   2c2ba:	18fb      	adds	r3, r7, r3
   2c2bc:	781b      	ldrb	r3, [r3, #0]
   2c2be:	0018      	movs	r0, r3
   2c2c0:	4b28      	ldr	r3, [pc, #160]	; (2c364 <disk_write+0xcc>)
   2c2c2:	4798      	blx	r3
   2c2c4:	0003      	movs	r3, r0
   2c2c6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c2c8:	231b      	movs	r3, #27
   2c2ca:	18fb      	adds	r3, r7, r3
   2c2cc:	781b      	ldrb	r3, [r3, #0]
   2c2ce:	2b00      	cmp	r3, #0
   2c2d0:	d101      	bne.n	2c2d6 <disk_write+0x3e>
		return RES_ERROR;
   2c2d2:	2301      	movs	r3, #1
   2c2d4:	e042      	b.n	2c35c <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c2d6:	2314      	movs	r3, #20
   2c2d8:	18fa      	adds	r2, r7, r3
   2c2da:	230f      	movs	r3, #15
   2c2dc:	18fb      	adds	r3, r7, r3
   2c2de:	781b      	ldrb	r3, [r3, #0]
   2c2e0:	0011      	movs	r1, r2
   2c2e2:	0018      	movs	r0, r3
   2c2e4:	4b20      	ldr	r3, [pc, #128]	; (2c368 <disk_write+0xd0>)
   2c2e6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c2e8:	230e      	movs	r3, #14
   2c2ea:	18fb      	adds	r3, r7, r3
   2c2ec:	781b      	ldrb	r3, [r3, #0]
   2c2ee:	221b      	movs	r2, #27
   2c2f0:	18ba      	adds	r2, r7, r2
   2c2f2:	7812      	ldrb	r2, [r2, #0]
   2c2f4:	4353      	muls	r3, r2
   2c2f6:	001a      	movs	r2, r3
   2c2f8:	687b      	ldr	r3, [r7, #4]
   2c2fa:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c2fc:	697b      	ldr	r3, [r7, #20]
   2c2fe:	3301      	adds	r3, #1
   2c300:	211b      	movs	r1, #27
   2c302:	1879      	adds	r1, r7, r1
   2c304:	7809      	ldrb	r1, [r1, #0]
   2c306:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c308:	429a      	cmp	r2, r3
   2c30a:	d901      	bls.n	2c310 <disk_write+0x78>
		return RES_PARERR;
   2c30c:	2304      	movs	r3, #4
   2c30e:	e025      	b.n	2c35c <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2c310:	2300      	movs	r3, #0
   2c312:	61fb      	str	r3, [r7, #28]
   2c314:	e01b      	b.n	2c34e <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c316:	231b      	movs	r3, #27
   2c318:	18fb      	adds	r3, r7, r3
   2c31a:	781b      	ldrb	r3, [r3, #0]
   2c31c:	69fa      	ldr	r2, [r7, #28]
   2c31e:	435a      	muls	r2, r3
   2c320:	687b      	ldr	r3, [r7, #4]
   2c322:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c324:	231b      	movs	r3, #27
   2c326:	18fb      	adds	r3, r7, r3
   2c328:	781b      	ldrb	r3, [r3, #0]
   2c32a:	69fa      	ldr	r2, [r7, #28]
   2c32c:	4353      	muls	r3, r2
   2c32e:	025b      	lsls	r3, r3, #9
   2c330:	68ba      	ldr	r2, [r7, #8]
   2c332:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c334:	230f      	movs	r3, #15
   2c336:	18fb      	adds	r3, r7, r3
   2c338:	781b      	ldrb	r3, [r3, #0]
   2c33a:	0018      	movs	r0, r3
   2c33c:	4b0b      	ldr	r3, [pc, #44]	; (2c36c <disk_write+0xd4>)
   2c33e:	4798      	blx	r3
   2c340:	1e03      	subs	r3, r0, #0
   2c342:	d001      	beq.n	2c348 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c344:	2301      	movs	r3, #1
   2c346:	e009      	b.n	2c35c <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2c348:	69fb      	ldr	r3, [r7, #28]
   2c34a:	3301      	adds	r3, #1
   2c34c:	61fb      	str	r3, [r7, #28]
   2c34e:	230e      	movs	r3, #14
   2c350:	18fb      	adds	r3, r7, r3
   2c352:	781a      	ldrb	r2, [r3, #0]
   2c354:	69fb      	ldr	r3, [r7, #28]
   2c356:	429a      	cmp	r2, r3
   2c358:	d8dd      	bhi.n	2c316 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2c35a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c35c:	0018      	movs	r0, r3
   2c35e:	46bd      	mov	sp, r7
   2c360:	b009      	add	sp, #36	; 0x24
   2c362:	bd90      	pop	{r4, r7, pc}
   2c364:	00026e61 	.word	0x00026e61
   2c368:	00026e15 	.word	0x00026e15
   2c36c:	00026f29 	.word	0x00026f29

0002c370 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2c370:	b590      	push	{r4, r7, lr}
   2c372:	b085      	sub	sp, #20
   2c374:	af00      	add	r7, sp, #0
   2c376:	603a      	str	r2, [r7, #0]
   2c378:	1dfb      	adds	r3, r7, #7
   2c37a:	1c02      	adds	r2, r0, #0
   2c37c:	701a      	strb	r2, [r3, #0]
   2c37e:	1dbb      	adds	r3, r7, #6
   2c380:	1c0a      	adds	r2, r1, #0
   2c382:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2c384:	230f      	movs	r3, #15
   2c386:	18fb      	adds	r3, r7, r3
   2c388:	2204      	movs	r2, #4
   2c38a:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2c38c:	1dbb      	adds	r3, r7, #6
   2c38e:	781b      	ldrb	r3, [r3, #0]
   2c390:	2b01      	cmp	r3, #1
   2c392:	d00f      	beq.n	2c3b4 <disk_ioctl+0x44>
   2c394:	dc02      	bgt.n	2c39c <disk_ioctl+0x2c>
   2c396:	2b00      	cmp	r3, #0
   2c398:	d044      	beq.n	2c424 <disk_ioctl+0xb4>
   2c39a:	e054      	b.n	2c446 <disk_ioctl+0xd6>
   2c39c:	2b02      	cmp	r3, #2
   2c39e:	d01a      	beq.n	2c3d6 <disk_ioctl+0x66>
   2c3a0:	2b03      	cmp	r3, #3
   2c3a2:	d150      	bne.n	2c446 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2c3a4:	683b      	ldr	r3, [r7, #0]
   2c3a6:	2201      	movs	r2, #1
   2c3a8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2c3aa:	230f      	movs	r3, #15
   2c3ac:	18fb      	adds	r3, r7, r3
   2c3ae:	2200      	movs	r2, #0
   2c3b0:	701a      	strb	r2, [r3, #0]
		break;
   2c3b2:	e04c      	b.n	2c44e <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2c3b4:	2308      	movs	r3, #8
   2c3b6:	18fa      	adds	r2, r7, r3
   2c3b8:	1dfb      	adds	r3, r7, #7
   2c3ba:	781b      	ldrb	r3, [r3, #0]
   2c3bc:	0011      	movs	r1, r2
   2c3be:	0018      	movs	r0, r3
   2c3c0:	4b26      	ldr	r3, [pc, #152]	; (2c45c <disk_ioctl+0xec>)
   2c3c2:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2c3c4:	68bb      	ldr	r3, [r7, #8]
   2c3c6:	1c5a      	adds	r2, r3, #1
   2c3c8:	683b      	ldr	r3, [r7, #0]
   2c3ca:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2c3cc:	230f      	movs	r3, #15
   2c3ce:	18fb      	adds	r3, r7, r3
   2c3d0:	2200      	movs	r2, #0
   2c3d2:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c3d4:	e03b      	b.n	2c44e <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2c3d6:	230e      	movs	r3, #14
   2c3d8:	18fc      	adds	r4, r7, r3
   2c3da:	1dfb      	adds	r3, r7, #7
   2c3dc:	781b      	ldrb	r3, [r3, #0]
   2c3de:	0018      	movs	r0, r3
   2c3e0:	4b1f      	ldr	r3, [pc, #124]	; (2c460 <disk_ioctl+0xf0>)
   2c3e2:	4798      	blx	r3
   2c3e4:	0003      	movs	r3, r0
   2c3e6:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2c3e8:	230e      	movs	r3, #14
   2c3ea:	18fb      	adds	r3, r7, r3
   2c3ec:	781b      	ldrb	r3, [r3, #0]
   2c3ee:	2b01      	cmp	r3, #1
   2c3f0:	d010      	beq.n	2c414 <disk_ioctl+0xa4>
   2c3f2:	230e      	movs	r3, #14
   2c3f4:	18fb      	adds	r3, r7, r3
   2c3f6:	781b      	ldrb	r3, [r3, #0]
   2c3f8:	2b02      	cmp	r3, #2
   2c3fa:	d00b      	beq.n	2c414 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2c3fc:	230e      	movs	r3, #14
   2c3fe:	18fb      	adds	r3, r7, r3
   2c400:	781b      	ldrb	r3, [r3, #0]
   2c402:	2b04      	cmp	r3, #4
   2c404:	d006      	beq.n	2c414 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2c406:	230e      	movs	r3, #14
   2c408:	18fb      	adds	r3, r7, r3
   2c40a:	781b      	ldrb	r3, [r3, #0]
   2c40c:	2b08      	cmp	r3, #8
   2c40e:	d001      	beq.n	2c414 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2c410:	2301      	movs	r3, #1
   2c412:	e01f      	b.n	2c454 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2c414:	683b      	ldr	r3, [r7, #0]
   2c416:	2200      	movs	r2, #0
   2c418:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2c41a:	230f      	movs	r3, #15
   2c41c:	18fb      	adds	r3, r7, r3
   2c41e:	2200      	movs	r2, #0
   2c420:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c422:	e014      	b.n	2c44e <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2c424:	1dfb      	adds	r3, r7, #7
   2c426:	781b      	ldrb	r3, [r3, #0]
   2c428:	0018      	movs	r0, r3
   2c42a:	4b0e      	ldr	r3, [pc, #56]	; (2c464 <disk_ioctl+0xf4>)
   2c42c:	4798      	blx	r3
   2c42e:	1e03      	subs	r3, r0, #0
   2c430:	d104      	bne.n	2c43c <disk_ioctl+0xcc>
			res = RES_OK;
   2c432:	230f      	movs	r3, #15
   2c434:	18fb      	adds	r3, r7, r3
   2c436:	2200      	movs	r2, #0
   2c438:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2c43a:	e008      	b.n	2c44e <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2c43c:	230f      	movs	r3, #15
   2c43e:	18fb      	adds	r3, r7, r3
   2c440:	2203      	movs	r2, #3
   2c442:	701a      	strb	r2, [r3, #0]
		break;
   2c444:	e003      	b.n	2c44e <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2c446:	230f      	movs	r3, #15
   2c448:	18fb      	adds	r3, r7, r3
   2c44a:	2204      	movs	r2, #4
   2c44c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c44e:	230f      	movs	r3, #15
   2c450:	18fb      	adds	r3, r7, r3
   2c452:	781b      	ldrb	r3, [r3, #0]
}
   2c454:	0018      	movs	r0, r3
   2c456:	46bd      	mov	sp, r7
   2c458:	b005      	add	sp, #20
   2c45a:	bd90      	pop	{r4, r7, pc}
   2c45c:	00026e15 	.word	0x00026e15
   2c460:	00026e61 	.word	0x00026e61
   2c464:	00026dd5 	.word	0x00026dd5

0002c468 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2c468:	b580      	push	{r7, lr}
   2c46a:	b084      	sub	sp, #16
   2c46c:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2c46e:	1d3a      	adds	r2, r7, #4
   2c470:	4b12      	ldr	r3, [pc, #72]	; (2c4bc <get_fattime+0x54>)
   2c472:	0011      	movs	r1, r2
   2c474:	0018      	movs	r0, r3
   2c476:	4b12      	ldr	r3, [pc, #72]	; (2c4c0 <get_fattime+0x58>)
   2c478:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2c47a:	1d3b      	adds	r3, r7, #4
   2c47c:	88db      	ldrh	r3, [r3, #6]
   2c47e:	4a11      	ldr	r2, [pc, #68]	; (2c4c4 <get_fattime+0x5c>)
   2c480:	4694      	mov	ip, r2
   2c482:	4463      	add	r3, ip
   2c484:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2c486:	1d3b      	adds	r3, r7, #4
   2c488:	795b      	ldrb	r3, [r3, #5]
   2c48a:	055b      	lsls	r3, r3, #21
   2c48c:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2c48e:	1d3b      	adds	r3, r7, #4
   2c490:	791b      	ldrb	r3, [r3, #4]
   2c492:	041b      	lsls	r3, r3, #16
   2c494:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2c496:	1d3b      	adds	r3, r7, #4
   2c498:	789b      	ldrb	r3, [r3, #2]
   2c49a:	02db      	lsls	r3, r3, #11
   2c49c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2c49e:	1d3b      	adds	r3, r7, #4
   2c4a0:	785b      	ldrb	r3, [r3, #1]
   2c4a2:	015b      	lsls	r3, r3, #5
   2c4a4:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2c4a6:	1d3a      	adds	r2, r7, #4
   2c4a8:	7812      	ldrb	r2, [r2, #0]
   2c4aa:	0852      	lsrs	r2, r2, #1
   2c4ac:	b2d2      	uxtb	r2, r2
   2c4ae:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2c4b0:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2c4b2:	68fb      	ldr	r3, [r7, #12]
}
   2c4b4:	0018      	movs	r0, r3
   2c4b6:	46bd      	mov	sp, r7
   2c4b8:	b004      	add	sp, #16
   2c4ba:	bd80      	pop	{r7, pc}
   2c4bc:	20005ccc 	.word	0x20005ccc
   2c4c0:	00027c41 	.word	0x00027c41
   2c4c4:	fffff844 	.word	0xfffff844

0002c4c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2c4c8:	b580      	push	{r7, lr}
   2c4ca:	b086      	sub	sp, #24
   2c4cc:	af00      	add	r7, sp, #0
   2c4ce:	60f8      	str	r0, [r7, #12]
   2c4d0:	60b9      	str	r1, [r7, #8]
   2c4d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c4d4:	68fb      	ldr	r3, [r7, #12]
   2c4d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2c4d8:	68bb      	ldr	r3, [r7, #8]
   2c4da:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2c4dc:	e007      	b.n	2c4ee <mem_cpy+0x26>
		*d++ = *s++;
   2c4de:	697b      	ldr	r3, [r7, #20]
   2c4e0:	1c5a      	adds	r2, r3, #1
   2c4e2:	617a      	str	r2, [r7, #20]
   2c4e4:	693a      	ldr	r2, [r7, #16]
   2c4e6:	1c51      	adds	r1, r2, #1
   2c4e8:	6139      	str	r1, [r7, #16]
   2c4ea:	7812      	ldrb	r2, [r2, #0]
   2c4ec:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c4ee:	687b      	ldr	r3, [r7, #4]
   2c4f0:	1e5a      	subs	r2, r3, #1
   2c4f2:	607a      	str	r2, [r7, #4]
   2c4f4:	2b00      	cmp	r3, #0
   2c4f6:	d1f2      	bne.n	2c4de <mem_cpy+0x16>
}
   2c4f8:	46c0      	nop			; (mov r8, r8)
   2c4fa:	46bd      	mov	sp, r7
   2c4fc:	b006      	add	sp, #24
   2c4fe:	bd80      	pop	{r7, pc}

0002c500 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2c500:	b580      	push	{r7, lr}
   2c502:	b086      	sub	sp, #24
   2c504:	af00      	add	r7, sp, #0
   2c506:	60f8      	str	r0, [r7, #12]
   2c508:	60b9      	str	r1, [r7, #8]
   2c50a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c50c:	68fb      	ldr	r3, [r7, #12]
   2c50e:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2c510:	e005      	b.n	2c51e <mem_set+0x1e>
		*d++ = (BYTE)val;
   2c512:	697b      	ldr	r3, [r7, #20]
   2c514:	1c5a      	adds	r2, r3, #1
   2c516:	617a      	str	r2, [r7, #20]
   2c518:	68ba      	ldr	r2, [r7, #8]
   2c51a:	b2d2      	uxtb	r2, r2
   2c51c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c51e:	687b      	ldr	r3, [r7, #4]
   2c520:	1e5a      	subs	r2, r3, #1
   2c522:	607a      	str	r2, [r7, #4]
   2c524:	2b00      	cmp	r3, #0
   2c526:	d1f4      	bne.n	2c512 <mem_set+0x12>
}
   2c528:	46c0      	nop			; (mov r8, r8)
   2c52a:	46bd      	mov	sp, r7
   2c52c:	b006      	add	sp, #24
   2c52e:	bd80      	pop	{r7, pc}

0002c530 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2c530:	b580      	push	{r7, lr}
   2c532:	b088      	sub	sp, #32
   2c534:	af00      	add	r7, sp, #0
   2c536:	60f8      	str	r0, [r7, #12]
   2c538:	60b9      	str	r1, [r7, #8]
   2c53a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2c53c:	68fb      	ldr	r3, [r7, #12]
   2c53e:	61fb      	str	r3, [r7, #28]
   2c540:	68bb      	ldr	r3, [r7, #8]
   2c542:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2c544:	2300      	movs	r3, #0
   2c546:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2c548:	46c0      	nop			; (mov r8, r8)
   2c54a:	687b      	ldr	r3, [r7, #4]
   2c54c:	1e5a      	subs	r2, r3, #1
   2c54e:	607a      	str	r2, [r7, #4]
   2c550:	2b00      	cmp	r3, #0
   2c552:	d00d      	beq.n	2c570 <mem_cmp+0x40>
   2c554:	69fb      	ldr	r3, [r7, #28]
   2c556:	1c5a      	adds	r2, r3, #1
   2c558:	61fa      	str	r2, [r7, #28]
   2c55a:	781b      	ldrb	r3, [r3, #0]
   2c55c:	0019      	movs	r1, r3
   2c55e:	69bb      	ldr	r3, [r7, #24]
   2c560:	1c5a      	adds	r2, r3, #1
   2c562:	61ba      	str	r2, [r7, #24]
   2c564:	781b      	ldrb	r3, [r3, #0]
   2c566:	1acb      	subs	r3, r1, r3
   2c568:	617b      	str	r3, [r7, #20]
   2c56a:	697b      	ldr	r3, [r7, #20]
   2c56c:	2b00      	cmp	r3, #0
   2c56e:	d0ec      	beq.n	2c54a <mem_cmp+0x1a>
	return r;
   2c570:	697b      	ldr	r3, [r7, #20]
}
   2c572:	0018      	movs	r0, r3
   2c574:	46bd      	mov	sp, r7
   2c576:	b008      	add	sp, #32
   2c578:	bd80      	pop	{r7, pc}

0002c57a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2c57a:	b580      	push	{r7, lr}
   2c57c:	b082      	sub	sp, #8
   2c57e:	af00      	add	r7, sp, #0
   2c580:	6078      	str	r0, [r7, #4]
   2c582:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2c584:	e002      	b.n	2c58c <chk_chr+0x12>
   2c586:	687b      	ldr	r3, [r7, #4]
   2c588:	3301      	adds	r3, #1
   2c58a:	607b      	str	r3, [r7, #4]
   2c58c:	687b      	ldr	r3, [r7, #4]
   2c58e:	781b      	ldrb	r3, [r3, #0]
   2c590:	2b00      	cmp	r3, #0
   2c592:	d005      	beq.n	2c5a0 <chk_chr+0x26>
   2c594:	687b      	ldr	r3, [r7, #4]
   2c596:	781b      	ldrb	r3, [r3, #0]
   2c598:	001a      	movs	r2, r3
   2c59a:	683b      	ldr	r3, [r7, #0]
   2c59c:	429a      	cmp	r2, r3
   2c59e:	d1f2      	bne.n	2c586 <chk_chr+0xc>
	return *str;
   2c5a0:	687b      	ldr	r3, [r7, #4]
   2c5a2:	781b      	ldrb	r3, [r3, #0]
}
   2c5a4:	0018      	movs	r0, r3
   2c5a6:	46bd      	mov	sp, r7
   2c5a8:	b002      	add	sp, #8
   2c5aa:	bd80      	pop	{r7, pc}

0002c5ac <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2c5ac:	b590      	push	{r4, r7, lr}
   2c5ae:	b085      	sub	sp, #20
   2c5b0:	af00      	add	r7, sp, #0
   2c5b2:	6078      	str	r0, [r7, #4]
   2c5b4:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2c5b6:	687b      	ldr	r3, [r7, #4]
   2c5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c5ba:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2c5bc:	68fa      	ldr	r2, [r7, #12]
   2c5be:	683b      	ldr	r3, [r7, #0]
   2c5c0:	429a      	cmp	r2, r3
   2c5c2:	d04e      	beq.n	2c662 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2c5c4:	687b      	ldr	r3, [r7, #4]
   2c5c6:	791b      	ldrb	r3, [r3, #4]
   2c5c8:	2b00      	cmp	r3, #0
   2c5ca:	d037      	beq.n	2c63c <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2c5cc:	687b      	ldr	r3, [r7, #4]
   2c5ce:	7858      	ldrb	r0, [r3, #1]
   2c5d0:	687b      	ldr	r3, [r7, #4]
   2c5d2:	3330      	adds	r3, #48	; 0x30
   2c5d4:	0019      	movs	r1, r3
   2c5d6:	68fa      	ldr	r2, [r7, #12]
   2c5d8:	2301      	movs	r3, #1
   2c5da:	4c24      	ldr	r4, [pc, #144]	; (2c66c <move_window+0xc0>)
   2c5dc:	47a0      	blx	r4
   2c5de:	1e03      	subs	r3, r0, #0
   2c5e0:	d001      	beq.n	2c5e6 <move_window+0x3a>
				return FR_DISK_ERR;
   2c5e2:	2301      	movs	r3, #1
   2c5e4:	e03e      	b.n	2c664 <move_window+0xb8>
			fs->wflag = 0;
   2c5e6:	687b      	ldr	r3, [r7, #4]
   2c5e8:	2200      	movs	r2, #0
   2c5ea:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2c5ec:	687b      	ldr	r3, [r7, #4]
   2c5ee:	6a1a      	ldr	r2, [r3, #32]
   2c5f0:	687b      	ldr	r3, [r7, #4]
   2c5f2:	69db      	ldr	r3, [r3, #28]
   2c5f4:	18d2      	adds	r2, r2, r3
   2c5f6:	68fb      	ldr	r3, [r7, #12]
   2c5f8:	429a      	cmp	r2, r3
   2c5fa:	d91f      	bls.n	2c63c <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c5fc:	230b      	movs	r3, #11
   2c5fe:	18fb      	adds	r3, r7, r3
   2c600:	687a      	ldr	r2, [r7, #4]
   2c602:	78d2      	ldrb	r2, [r2, #3]
   2c604:	701a      	strb	r2, [r3, #0]
   2c606:	e014      	b.n	2c632 <move_window+0x86>
					wsect += fs->fsize;
   2c608:	687b      	ldr	r3, [r7, #4]
   2c60a:	69db      	ldr	r3, [r3, #28]
   2c60c:	68fa      	ldr	r2, [r7, #12]
   2c60e:	18d3      	adds	r3, r2, r3
   2c610:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2c612:	687b      	ldr	r3, [r7, #4]
   2c614:	7858      	ldrb	r0, [r3, #1]
   2c616:	687b      	ldr	r3, [r7, #4]
   2c618:	3330      	adds	r3, #48	; 0x30
   2c61a:	0019      	movs	r1, r3
   2c61c:	68fa      	ldr	r2, [r7, #12]
   2c61e:	2301      	movs	r3, #1
   2c620:	4c12      	ldr	r4, [pc, #72]	; (2c66c <move_window+0xc0>)
   2c622:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c624:	230b      	movs	r3, #11
   2c626:	18fb      	adds	r3, r7, r3
   2c628:	781a      	ldrb	r2, [r3, #0]
   2c62a:	230b      	movs	r3, #11
   2c62c:	18fb      	adds	r3, r7, r3
   2c62e:	3a01      	subs	r2, #1
   2c630:	701a      	strb	r2, [r3, #0]
   2c632:	230b      	movs	r3, #11
   2c634:	18fb      	adds	r3, r7, r3
   2c636:	781b      	ldrb	r3, [r3, #0]
   2c638:	2b01      	cmp	r3, #1
   2c63a:	d8e5      	bhi.n	2c608 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2c63c:	683b      	ldr	r3, [r7, #0]
   2c63e:	2b00      	cmp	r3, #0
   2c640:	d00f      	beq.n	2c662 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2c642:	687b      	ldr	r3, [r7, #4]
   2c644:	7858      	ldrb	r0, [r3, #1]
   2c646:	687b      	ldr	r3, [r7, #4]
   2c648:	3330      	adds	r3, #48	; 0x30
   2c64a:	0019      	movs	r1, r3
   2c64c:	683a      	ldr	r2, [r7, #0]
   2c64e:	2301      	movs	r3, #1
   2c650:	4c07      	ldr	r4, [pc, #28]	; (2c670 <move_window+0xc4>)
   2c652:	47a0      	blx	r4
   2c654:	1e03      	subs	r3, r0, #0
   2c656:	d001      	beq.n	2c65c <move_window+0xb0>
				return FR_DISK_ERR;
   2c658:	2301      	movs	r3, #1
   2c65a:	e003      	b.n	2c664 <move_window+0xb8>
			fs->winsect = sector;
   2c65c:	687b      	ldr	r3, [r7, #4]
   2c65e:	683a      	ldr	r2, [r7, #0]
   2c660:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2c662:	2300      	movs	r3, #0
}
   2c664:	0018      	movs	r0, r3
   2c666:	46bd      	mov	sp, r7
   2c668:	b005      	add	sp, #20
   2c66a:	bd90      	pop	{r4, r7, pc}
   2c66c:	0002c299 	.word	0x0002c299
   2c670:	0002c1c1 	.word	0x0002c1c1

0002c674 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2c674:	b590      	push	{r4, r7, lr}
   2c676:	b085      	sub	sp, #20
   2c678:	af00      	add	r7, sp, #0
   2c67a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2c67c:	230f      	movs	r3, #15
   2c67e:	18fc      	adds	r4, r7, r3
   2c680:	687b      	ldr	r3, [r7, #4]
   2c682:	2100      	movs	r1, #0
   2c684:	0018      	movs	r0, r3
   2c686:	4b52      	ldr	r3, [pc, #328]	; (2c7d0 <sync+0x15c>)
   2c688:	4798      	blx	r3
   2c68a:	0003      	movs	r3, r0
   2c68c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c68e:	230f      	movs	r3, #15
   2c690:	18fb      	adds	r3, r7, r3
   2c692:	781b      	ldrb	r3, [r3, #0]
   2c694:	2b00      	cmp	r3, #0
   2c696:	d000      	beq.n	2c69a <sync+0x26>
   2c698:	e093      	b.n	2c7c2 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2c69a:	687b      	ldr	r3, [r7, #4]
   2c69c:	781b      	ldrb	r3, [r3, #0]
   2c69e:	2b03      	cmp	r3, #3
   2c6a0:	d000      	beq.n	2c6a4 <sync+0x30>
   2c6a2:	e081      	b.n	2c7a8 <sync+0x134>
   2c6a4:	687b      	ldr	r3, [r7, #4]
   2c6a6:	795b      	ldrb	r3, [r3, #5]
   2c6a8:	2b00      	cmp	r3, #0
   2c6aa:	d07d      	beq.n	2c7a8 <sync+0x134>
			fs->winsect = 0;
   2c6ac:	687b      	ldr	r3, [r7, #4]
   2c6ae:	2200      	movs	r2, #0
   2c6b0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2c6b2:	687b      	ldr	r3, [r7, #4]
   2c6b4:	3330      	adds	r3, #48	; 0x30
   2c6b6:	0018      	movs	r0, r3
   2c6b8:	2380      	movs	r3, #128	; 0x80
   2c6ba:	009b      	lsls	r3, r3, #2
   2c6bc:	001a      	movs	r2, r3
   2c6be:	2100      	movs	r1, #0
   2c6c0:	4b44      	ldr	r3, [pc, #272]	; (2c7d4 <sync+0x160>)
   2c6c2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2c6c4:	687b      	ldr	r3, [r7, #4]
   2c6c6:	4a44      	ldr	r2, [pc, #272]	; (2c7d8 <sync+0x164>)
   2c6c8:	2155      	movs	r1, #85	; 0x55
   2c6ca:	5499      	strb	r1, [r3, r2]
   2c6cc:	687b      	ldr	r3, [r7, #4]
   2c6ce:	4a43      	ldr	r2, [pc, #268]	; (2c7dc <sync+0x168>)
   2c6d0:	21aa      	movs	r1, #170	; 0xaa
   2c6d2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2c6d4:	687b      	ldr	r3, [r7, #4]
   2c6d6:	2230      	movs	r2, #48	; 0x30
   2c6d8:	2152      	movs	r1, #82	; 0x52
   2c6da:	5499      	strb	r1, [r3, r2]
   2c6dc:	687b      	ldr	r3, [r7, #4]
   2c6de:	2231      	movs	r2, #49	; 0x31
   2c6e0:	2152      	movs	r1, #82	; 0x52
   2c6e2:	5499      	strb	r1, [r3, r2]
   2c6e4:	687b      	ldr	r3, [r7, #4]
   2c6e6:	2232      	movs	r2, #50	; 0x32
   2c6e8:	2161      	movs	r1, #97	; 0x61
   2c6ea:	5499      	strb	r1, [r3, r2]
   2c6ec:	687b      	ldr	r3, [r7, #4]
   2c6ee:	2233      	movs	r2, #51	; 0x33
   2c6f0:	2141      	movs	r1, #65	; 0x41
   2c6f2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2c6f4:	687a      	ldr	r2, [r7, #4]
   2c6f6:	2385      	movs	r3, #133	; 0x85
   2c6f8:	009b      	lsls	r3, r3, #2
   2c6fa:	2172      	movs	r1, #114	; 0x72
   2c6fc:	54d1      	strb	r1, [r2, r3]
   2c6fe:	687b      	ldr	r3, [r7, #4]
   2c700:	4a37      	ldr	r2, [pc, #220]	; (2c7e0 <sync+0x16c>)
   2c702:	2172      	movs	r1, #114	; 0x72
   2c704:	5499      	strb	r1, [r3, r2]
   2c706:	687b      	ldr	r3, [r7, #4]
   2c708:	4a36      	ldr	r2, [pc, #216]	; (2c7e4 <sync+0x170>)
   2c70a:	2141      	movs	r1, #65	; 0x41
   2c70c:	5499      	strb	r1, [r3, r2]
   2c70e:	687b      	ldr	r3, [r7, #4]
   2c710:	4a35      	ldr	r2, [pc, #212]	; (2c7e8 <sync+0x174>)
   2c712:	2161      	movs	r1, #97	; 0x61
   2c714:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2c716:	687b      	ldr	r3, [r7, #4]
   2c718:	691b      	ldr	r3, [r3, #16]
   2c71a:	b2d9      	uxtb	r1, r3
   2c71c:	687a      	ldr	r2, [r7, #4]
   2c71e:	2386      	movs	r3, #134	; 0x86
   2c720:	009b      	lsls	r3, r3, #2
   2c722:	54d1      	strb	r1, [r2, r3]
   2c724:	687b      	ldr	r3, [r7, #4]
   2c726:	691b      	ldr	r3, [r3, #16]
   2c728:	b29b      	uxth	r3, r3
   2c72a:	0a1b      	lsrs	r3, r3, #8
   2c72c:	b29b      	uxth	r3, r3
   2c72e:	b2d9      	uxtb	r1, r3
   2c730:	687b      	ldr	r3, [r7, #4]
   2c732:	4a2e      	ldr	r2, [pc, #184]	; (2c7ec <sync+0x178>)
   2c734:	5499      	strb	r1, [r3, r2]
   2c736:	687b      	ldr	r3, [r7, #4]
   2c738:	691b      	ldr	r3, [r3, #16]
   2c73a:	0c1b      	lsrs	r3, r3, #16
   2c73c:	b2d9      	uxtb	r1, r3
   2c73e:	687b      	ldr	r3, [r7, #4]
   2c740:	4a2b      	ldr	r2, [pc, #172]	; (2c7f0 <sync+0x17c>)
   2c742:	5499      	strb	r1, [r3, r2]
   2c744:	687b      	ldr	r3, [r7, #4]
   2c746:	691b      	ldr	r3, [r3, #16]
   2c748:	0e1b      	lsrs	r3, r3, #24
   2c74a:	b2d9      	uxtb	r1, r3
   2c74c:	687b      	ldr	r3, [r7, #4]
   2c74e:	4a29      	ldr	r2, [pc, #164]	; (2c7f4 <sync+0x180>)
   2c750:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2c752:	687b      	ldr	r3, [r7, #4]
   2c754:	68db      	ldr	r3, [r3, #12]
   2c756:	b2d9      	uxtb	r1, r3
   2c758:	687a      	ldr	r2, [r7, #4]
   2c75a:	2387      	movs	r3, #135	; 0x87
   2c75c:	009b      	lsls	r3, r3, #2
   2c75e:	54d1      	strb	r1, [r2, r3]
   2c760:	687b      	ldr	r3, [r7, #4]
   2c762:	68db      	ldr	r3, [r3, #12]
   2c764:	b29b      	uxth	r3, r3
   2c766:	0a1b      	lsrs	r3, r3, #8
   2c768:	b29b      	uxth	r3, r3
   2c76a:	b2d9      	uxtb	r1, r3
   2c76c:	687b      	ldr	r3, [r7, #4]
   2c76e:	4a22      	ldr	r2, [pc, #136]	; (2c7f8 <sync+0x184>)
   2c770:	5499      	strb	r1, [r3, r2]
   2c772:	687b      	ldr	r3, [r7, #4]
   2c774:	68db      	ldr	r3, [r3, #12]
   2c776:	0c1b      	lsrs	r3, r3, #16
   2c778:	b2d9      	uxtb	r1, r3
   2c77a:	687b      	ldr	r3, [r7, #4]
   2c77c:	4a1f      	ldr	r2, [pc, #124]	; (2c7fc <sync+0x188>)
   2c77e:	5499      	strb	r1, [r3, r2]
   2c780:	687b      	ldr	r3, [r7, #4]
   2c782:	68db      	ldr	r3, [r3, #12]
   2c784:	0e1b      	lsrs	r3, r3, #24
   2c786:	b2d9      	uxtb	r1, r3
   2c788:	687b      	ldr	r3, [r7, #4]
   2c78a:	4a1d      	ldr	r2, [pc, #116]	; (2c800 <sync+0x18c>)
   2c78c:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2c78e:	687b      	ldr	r3, [r7, #4]
   2c790:	7858      	ldrb	r0, [r3, #1]
   2c792:	687b      	ldr	r3, [r7, #4]
   2c794:	3330      	adds	r3, #48	; 0x30
   2c796:	0019      	movs	r1, r3
   2c798:	687b      	ldr	r3, [r7, #4]
   2c79a:	695a      	ldr	r2, [r3, #20]
   2c79c:	2301      	movs	r3, #1
   2c79e:	4c19      	ldr	r4, [pc, #100]	; (2c804 <sync+0x190>)
   2c7a0:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2c7a2:	687b      	ldr	r3, [r7, #4]
   2c7a4:	2200      	movs	r2, #0
   2c7a6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2c7a8:	687b      	ldr	r3, [r7, #4]
   2c7aa:	785b      	ldrb	r3, [r3, #1]
   2c7ac:	2200      	movs	r2, #0
   2c7ae:	2100      	movs	r1, #0
   2c7b0:	0018      	movs	r0, r3
   2c7b2:	4b15      	ldr	r3, [pc, #84]	; (2c808 <sync+0x194>)
   2c7b4:	4798      	blx	r3
   2c7b6:	1e03      	subs	r3, r0, #0
   2c7b8:	d003      	beq.n	2c7c2 <sync+0x14e>
			res = FR_DISK_ERR;
   2c7ba:	230f      	movs	r3, #15
   2c7bc:	18fb      	adds	r3, r7, r3
   2c7be:	2201      	movs	r2, #1
   2c7c0:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c7c2:	230f      	movs	r3, #15
   2c7c4:	18fb      	adds	r3, r7, r3
   2c7c6:	781b      	ldrb	r3, [r3, #0]
}
   2c7c8:	0018      	movs	r0, r3
   2c7ca:	46bd      	mov	sp, r7
   2c7cc:	b005      	add	sp, #20
   2c7ce:	bd90      	pop	{r4, r7, pc}
   2c7d0:	0002c5ad 	.word	0x0002c5ad
   2c7d4:	0002c501 	.word	0x0002c501
   2c7d8:	0000022e 	.word	0x0000022e
   2c7dc:	0000022f 	.word	0x0000022f
   2c7e0:	00000215 	.word	0x00000215
   2c7e4:	00000216 	.word	0x00000216
   2c7e8:	00000217 	.word	0x00000217
   2c7ec:	00000219 	.word	0x00000219
   2c7f0:	0000021a 	.word	0x0000021a
   2c7f4:	0000021b 	.word	0x0000021b
   2c7f8:	0000021d 	.word	0x0000021d
   2c7fc:	0000021e 	.word	0x0000021e
   2c800:	0000021f 	.word	0x0000021f
   2c804:	0002c299 	.word	0x0002c299
   2c808:	0002c371 	.word	0x0002c371

0002c80c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2c80c:	b580      	push	{r7, lr}
   2c80e:	b082      	sub	sp, #8
   2c810:	af00      	add	r7, sp, #0
   2c812:	6078      	str	r0, [r7, #4]
   2c814:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2c816:	683b      	ldr	r3, [r7, #0]
   2c818:	3b02      	subs	r3, #2
   2c81a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2c81c:	687b      	ldr	r3, [r7, #4]
   2c81e:	699b      	ldr	r3, [r3, #24]
   2c820:	1e9a      	subs	r2, r3, #2
   2c822:	683b      	ldr	r3, [r7, #0]
   2c824:	429a      	cmp	r2, r3
   2c826:	d801      	bhi.n	2c82c <clust2sect+0x20>
   2c828:	2300      	movs	r3, #0
   2c82a:	e007      	b.n	2c83c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c82c:	687b      	ldr	r3, [r7, #4]
   2c82e:	789b      	ldrb	r3, [r3, #2]
   2c830:	001a      	movs	r2, r3
   2c832:	683b      	ldr	r3, [r7, #0]
   2c834:	435a      	muls	r2, r3
   2c836:	687b      	ldr	r3, [r7, #4]
   2c838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c83a:	18d3      	adds	r3, r2, r3
}
   2c83c:	0018      	movs	r0, r3
   2c83e:	46bd      	mov	sp, r7
   2c840:	b002      	add	sp, #8
   2c842:	bd80      	pop	{r7, pc}

0002c844 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c844:	b580      	push	{r7, lr}
   2c846:	b086      	sub	sp, #24
   2c848:	af00      	add	r7, sp, #0
   2c84a:	6078      	str	r0, [r7, #4]
   2c84c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c84e:	683b      	ldr	r3, [r7, #0]
   2c850:	2b01      	cmp	r3, #1
   2c852:	d904      	bls.n	2c85e <get_fat+0x1a>
   2c854:	687b      	ldr	r3, [r7, #4]
   2c856:	699a      	ldr	r2, [r3, #24]
   2c858:	683b      	ldr	r3, [r7, #0]
   2c85a:	429a      	cmp	r2, r3
   2c85c:	d801      	bhi.n	2c862 <get_fat+0x1e>
		return 1;
   2c85e:	2301      	movs	r3, #1
   2c860:	e09f      	b.n	2c9a2 <get_fat+0x15e>

	switch (fs->fs_type) {
   2c862:	687b      	ldr	r3, [r7, #4]
   2c864:	781b      	ldrb	r3, [r3, #0]
   2c866:	2b02      	cmp	r3, #2
   2c868:	d048      	beq.n	2c8fc <get_fat+0xb8>
   2c86a:	2b03      	cmp	r3, #3
   2c86c:	d067      	beq.n	2c93e <get_fat+0xfa>
   2c86e:	2b01      	cmp	r3, #1
   2c870:	d000      	beq.n	2c874 <get_fat+0x30>
   2c872:	e094      	b.n	2c99e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c874:	683b      	ldr	r3, [r7, #0]
   2c876:	617b      	str	r3, [r7, #20]
   2c878:	697b      	ldr	r3, [r7, #20]
   2c87a:	085b      	lsrs	r3, r3, #1
   2c87c:	697a      	ldr	r2, [r7, #20]
   2c87e:	18d3      	adds	r3, r2, r3
   2c880:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c882:	687b      	ldr	r3, [r7, #4]
   2c884:	6a1a      	ldr	r2, [r3, #32]
   2c886:	697b      	ldr	r3, [r7, #20]
   2c888:	0a5b      	lsrs	r3, r3, #9
   2c88a:	18d2      	adds	r2, r2, r3
   2c88c:	687b      	ldr	r3, [r7, #4]
   2c88e:	0011      	movs	r1, r2
   2c890:	0018      	movs	r0, r3
   2c892:	4b46      	ldr	r3, [pc, #280]	; (2c9ac <get_fat+0x168>)
   2c894:	4798      	blx	r3
   2c896:	1e03      	subs	r3, r0, #0
   2c898:	d000      	beq.n	2c89c <get_fat+0x58>
   2c89a:	e079      	b.n	2c990 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c89c:	697b      	ldr	r3, [r7, #20]
   2c89e:	05db      	lsls	r3, r3, #23
   2c8a0:	0ddb      	lsrs	r3, r3, #23
   2c8a2:	687a      	ldr	r2, [r7, #4]
   2c8a4:	2130      	movs	r1, #48	; 0x30
   2c8a6:	18d3      	adds	r3, r2, r3
   2c8a8:	185b      	adds	r3, r3, r1
   2c8aa:	781b      	ldrb	r3, [r3, #0]
   2c8ac:	613b      	str	r3, [r7, #16]
   2c8ae:	697b      	ldr	r3, [r7, #20]
   2c8b0:	3301      	adds	r3, #1
   2c8b2:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c8b4:	687b      	ldr	r3, [r7, #4]
   2c8b6:	6a1a      	ldr	r2, [r3, #32]
   2c8b8:	697b      	ldr	r3, [r7, #20]
   2c8ba:	0a5b      	lsrs	r3, r3, #9
   2c8bc:	18d2      	adds	r2, r2, r3
   2c8be:	687b      	ldr	r3, [r7, #4]
   2c8c0:	0011      	movs	r1, r2
   2c8c2:	0018      	movs	r0, r3
   2c8c4:	4b39      	ldr	r3, [pc, #228]	; (2c9ac <get_fat+0x168>)
   2c8c6:	4798      	blx	r3
   2c8c8:	1e03      	subs	r3, r0, #0
   2c8ca:	d163      	bne.n	2c994 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c8cc:	697b      	ldr	r3, [r7, #20]
   2c8ce:	05db      	lsls	r3, r3, #23
   2c8d0:	0ddb      	lsrs	r3, r3, #23
   2c8d2:	687a      	ldr	r2, [r7, #4]
   2c8d4:	2130      	movs	r1, #48	; 0x30
   2c8d6:	18d3      	adds	r3, r2, r3
   2c8d8:	185b      	adds	r3, r3, r1
   2c8da:	781b      	ldrb	r3, [r3, #0]
   2c8dc:	021b      	lsls	r3, r3, #8
   2c8de:	001a      	movs	r2, r3
   2c8e0:	693b      	ldr	r3, [r7, #16]
   2c8e2:	4313      	orrs	r3, r2
   2c8e4:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c8e6:	683b      	ldr	r3, [r7, #0]
   2c8e8:	2201      	movs	r2, #1
   2c8ea:	4013      	ands	r3, r2
   2c8ec:	d002      	beq.n	2c8f4 <get_fat+0xb0>
   2c8ee:	693b      	ldr	r3, [r7, #16]
   2c8f0:	091b      	lsrs	r3, r3, #4
   2c8f2:	e056      	b.n	2c9a2 <get_fat+0x15e>
   2c8f4:	693b      	ldr	r3, [r7, #16]
   2c8f6:	051b      	lsls	r3, r3, #20
   2c8f8:	0d1b      	lsrs	r3, r3, #20
   2c8fa:	e052      	b.n	2c9a2 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c8fc:	687b      	ldr	r3, [r7, #4]
   2c8fe:	6a1a      	ldr	r2, [r3, #32]
   2c900:	683b      	ldr	r3, [r7, #0]
   2c902:	0a1b      	lsrs	r3, r3, #8
   2c904:	18d2      	adds	r2, r2, r3
   2c906:	687b      	ldr	r3, [r7, #4]
   2c908:	0011      	movs	r1, r2
   2c90a:	0018      	movs	r0, r3
   2c90c:	4b27      	ldr	r3, [pc, #156]	; (2c9ac <get_fat+0x168>)
   2c90e:	4798      	blx	r3
   2c910:	1e03      	subs	r3, r0, #0
   2c912:	d141      	bne.n	2c998 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c914:	683b      	ldr	r3, [r7, #0]
   2c916:	005a      	lsls	r2, r3, #1
   2c918:	23ff      	movs	r3, #255	; 0xff
   2c91a:	005b      	lsls	r3, r3, #1
   2c91c:	4013      	ands	r3, r2
   2c91e:	3330      	adds	r3, #48	; 0x30
   2c920:	687a      	ldr	r2, [r7, #4]
   2c922:	18d3      	adds	r3, r2, r3
   2c924:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c926:	68fb      	ldr	r3, [r7, #12]
   2c928:	3301      	adds	r3, #1
   2c92a:	781b      	ldrb	r3, [r3, #0]
   2c92c:	021b      	lsls	r3, r3, #8
   2c92e:	b21a      	sxth	r2, r3
   2c930:	68fb      	ldr	r3, [r7, #12]
   2c932:	781b      	ldrb	r3, [r3, #0]
   2c934:	b21b      	sxth	r3, r3
   2c936:	4313      	orrs	r3, r2
   2c938:	b21b      	sxth	r3, r3
   2c93a:	b29b      	uxth	r3, r3
   2c93c:	e031      	b.n	2c9a2 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c93e:	687b      	ldr	r3, [r7, #4]
   2c940:	6a1a      	ldr	r2, [r3, #32]
   2c942:	683b      	ldr	r3, [r7, #0]
   2c944:	09db      	lsrs	r3, r3, #7
   2c946:	18d2      	adds	r2, r2, r3
   2c948:	687b      	ldr	r3, [r7, #4]
   2c94a:	0011      	movs	r1, r2
   2c94c:	0018      	movs	r0, r3
   2c94e:	4b17      	ldr	r3, [pc, #92]	; (2c9ac <get_fat+0x168>)
   2c950:	4798      	blx	r3
   2c952:	1e03      	subs	r3, r0, #0
   2c954:	d122      	bne.n	2c99c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c956:	683b      	ldr	r3, [r7, #0]
   2c958:	009a      	lsls	r2, r3, #2
   2c95a:	23fe      	movs	r3, #254	; 0xfe
   2c95c:	005b      	lsls	r3, r3, #1
   2c95e:	4013      	ands	r3, r2
   2c960:	3330      	adds	r3, #48	; 0x30
   2c962:	687a      	ldr	r2, [r7, #4]
   2c964:	18d3      	adds	r3, r2, r3
   2c966:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2c968:	68fb      	ldr	r3, [r7, #12]
   2c96a:	3303      	adds	r3, #3
   2c96c:	781b      	ldrb	r3, [r3, #0]
   2c96e:	061a      	lsls	r2, r3, #24
   2c970:	68fb      	ldr	r3, [r7, #12]
   2c972:	3302      	adds	r3, #2
   2c974:	781b      	ldrb	r3, [r3, #0]
   2c976:	041b      	lsls	r3, r3, #16
   2c978:	4313      	orrs	r3, r2
   2c97a:	68fa      	ldr	r2, [r7, #12]
   2c97c:	3201      	adds	r2, #1
   2c97e:	7812      	ldrb	r2, [r2, #0]
   2c980:	0212      	lsls	r2, r2, #8
   2c982:	4313      	orrs	r3, r2
   2c984:	68fa      	ldr	r2, [r7, #12]
   2c986:	7812      	ldrb	r2, [r2, #0]
   2c988:	4313      	orrs	r3, r2
   2c98a:	011b      	lsls	r3, r3, #4
   2c98c:	091b      	lsrs	r3, r3, #4
   2c98e:	e008      	b.n	2c9a2 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c990:	46c0      	nop			; (mov r8, r8)
   2c992:	e004      	b.n	2c99e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c994:	46c0      	nop			; (mov r8, r8)
   2c996:	e002      	b.n	2c99e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c998:	46c0      	nop			; (mov r8, r8)
   2c99a:	e000      	b.n	2c99e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c99c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2c99e:	2301      	movs	r3, #1
   2c9a0:	425b      	negs	r3, r3
}
   2c9a2:	0018      	movs	r0, r3
   2c9a4:	46bd      	mov	sp, r7
   2c9a6:	b006      	add	sp, #24
   2c9a8:	bd80      	pop	{r7, pc}
   2c9aa:	46c0      	nop			; (mov r8, r8)
   2c9ac:	0002c5ad 	.word	0x0002c5ad

0002c9b0 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2c9b0:	b590      	push	{r4, r7, lr}
   2c9b2:	b089      	sub	sp, #36	; 0x24
   2c9b4:	af00      	add	r7, sp, #0
   2c9b6:	60f8      	str	r0, [r7, #12]
   2c9b8:	60b9      	str	r1, [r7, #8]
   2c9ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c9bc:	68bb      	ldr	r3, [r7, #8]
   2c9be:	2b01      	cmp	r3, #1
   2c9c0:	d904      	bls.n	2c9cc <put_fat+0x1c>
   2c9c2:	68fb      	ldr	r3, [r7, #12]
   2c9c4:	699a      	ldr	r2, [r3, #24]
   2c9c6:	68bb      	ldr	r3, [r7, #8]
   2c9c8:	429a      	cmp	r2, r3
   2c9ca:	d804      	bhi.n	2c9d6 <put_fat+0x26>
		res = FR_INT_ERR;
   2c9cc:	231f      	movs	r3, #31
   2c9ce:	18fb      	adds	r3, r7, r3
   2c9d0:	2202      	movs	r2, #2
   2c9d2:	701a      	strb	r2, [r3, #0]
   2c9d4:	e100      	b.n	2cbd8 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c9d6:	68fb      	ldr	r3, [r7, #12]
   2c9d8:	781b      	ldrb	r3, [r3, #0]
   2c9da:	2b02      	cmp	r3, #2
   2c9dc:	d100      	bne.n	2c9e0 <put_fat+0x30>
   2c9de:	e078      	b.n	2cad2 <put_fat+0x122>
   2c9e0:	2b03      	cmp	r3, #3
   2c9e2:	d100      	bne.n	2c9e6 <put_fat+0x36>
   2c9e4:	e09e      	b.n	2cb24 <put_fat+0x174>
   2c9e6:	2b01      	cmp	r3, #1
   2c9e8:	d000      	beq.n	2c9ec <put_fat+0x3c>
   2c9ea:	e0e6      	b.n	2cbba <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c9ec:	68bb      	ldr	r3, [r7, #8]
   2c9ee:	61bb      	str	r3, [r7, #24]
   2c9f0:	69bb      	ldr	r3, [r7, #24]
   2c9f2:	085b      	lsrs	r3, r3, #1
   2c9f4:	69ba      	ldr	r2, [r7, #24]
   2c9f6:	18d3      	adds	r3, r2, r3
   2c9f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c9fa:	68fb      	ldr	r3, [r7, #12]
   2c9fc:	6a1a      	ldr	r2, [r3, #32]
   2c9fe:	69bb      	ldr	r3, [r7, #24]
   2ca00:	0a5b      	lsrs	r3, r3, #9
   2ca02:	18d2      	adds	r2, r2, r3
   2ca04:	231f      	movs	r3, #31
   2ca06:	18fc      	adds	r4, r7, r3
   2ca08:	68fb      	ldr	r3, [r7, #12]
   2ca0a:	0011      	movs	r1, r2
   2ca0c:	0018      	movs	r0, r3
   2ca0e:	4b76      	ldr	r3, [pc, #472]	; (2cbe8 <put_fat+0x238>)
   2ca10:	4798      	blx	r3
   2ca12:	0003      	movs	r3, r0
   2ca14:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ca16:	231f      	movs	r3, #31
   2ca18:	18fb      	adds	r3, r7, r3
   2ca1a:	781b      	ldrb	r3, [r3, #0]
   2ca1c:	2b00      	cmp	r3, #0
   2ca1e:	d000      	beq.n	2ca22 <put_fat+0x72>
   2ca20:	e0d0      	b.n	2cbc4 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2ca22:	69bb      	ldr	r3, [r7, #24]
   2ca24:	05db      	lsls	r3, r3, #23
   2ca26:	0ddb      	lsrs	r3, r3, #23
   2ca28:	3330      	adds	r3, #48	; 0x30
   2ca2a:	68fa      	ldr	r2, [r7, #12]
   2ca2c:	18d3      	adds	r3, r2, r3
   2ca2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2ca30:	68bb      	ldr	r3, [r7, #8]
   2ca32:	2201      	movs	r2, #1
   2ca34:	4013      	ands	r3, r2
   2ca36:	d00d      	beq.n	2ca54 <put_fat+0xa4>
   2ca38:	697b      	ldr	r3, [r7, #20]
   2ca3a:	781b      	ldrb	r3, [r3, #0]
   2ca3c:	b25b      	sxtb	r3, r3
   2ca3e:	220f      	movs	r2, #15
   2ca40:	4013      	ands	r3, r2
   2ca42:	b25a      	sxtb	r2, r3
   2ca44:	687b      	ldr	r3, [r7, #4]
   2ca46:	b2db      	uxtb	r3, r3
   2ca48:	011b      	lsls	r3, r3, #4
   2ca4a:	b25b      	sxtb	r3, r3
   2ca4c:	4313      	orrs	r3, r2
   2ca4e:	b25b      	sxtb	r3, r3
   2ca50:	b2db      	uxtb	r3, r3
   2ca52:	e001      	b.n	2ca58 <put_fat+0xa8>
   2ca54:	687b      	ldr	r3, [r7, #4]
   2ca56:	b2db      	uxtb	r3, r3
   2ca58:	697a      	ldr	r2, [r7, #20]
   2ca5a:	7013      	strb	r3, [r2, #0]
			bc++;
   2ca5c:	69bb      	ldr	r3, [r7, #24]
   2ca5e:	3301      	adds	r3, #1
   2ca60:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2ca62:	68fb      	ldr	r3, [r7, #12]
   2ca64:	2201      	movs	r2, #1
   2ca66:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2ca68:	68fb      	ldr	r3, [r7, #12]
   2ca6a:	6a1a      	ldr	r2, [r3, #32]
   2ca6c:	69bb      	ldr	r3, [r7, #24]
   2ca6e:	0a5b      	lsrs	r3, r3, #9
   2ca70:	18d2      	adds	r2, r2, r3
   2ca72:	231f      	movs	r3, #31
   2ca74:	18fc      	adds	r4, r7, r3
   2ca76:	68fb      	ldr	r3, [r7, #12]
   2ca78:	0011      	movs	r1, r2
   2ca7a:	0018      	movs	r0, r3
   2ca7c:	4b5a      	ldr	r3, [pc, #360]	; (2cbe8 <put_fat+0x238>)
   2ca7e:	4798      	blx	r3
   2ca80:	0003      	movs	r3, r0
   2ca82:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ca84:	231f      	movs	r3, #31
   2ca86:	18fb      	adds	r3, r7, r3
   2ca88:	781b      	ldrb	r3, [r3, #0]
   2ca8a:	2b00      	cmp	r3, #0
   2ca8c:	d000      	beq.n	2ca90 <put_fat+0xe0>
   2ca8e:	e09b      	b.n	2cbc8 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2ca90:	69bb      	ldr	r3, [r7, #24]
   2ca92:	05db      	lsls	r3, r3, #23
   2ca94:	0ddb      	lsrs	r3, r3, #23
   2ca96:	3330      	adds	r3, #48	; 0x30
   2ca98:	68fa      	ldr	r2, [r7, #12]
   2ca9a:	18d3      	adds	r3, r2, r3
   2ca9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2ca9e:	68bb      	ldr	r3, [r7, #8]
   2caa0:	2201      	movs	r2, #1
   2caa2:	4013      	ands	r3, r2
   2caa4:	d003      	beq.n	2caae <put_fat+0xfe>
   2caa6:	687b      	ldr	r3, [r7, #4]
   2caa8:	091b      	lsrs	r3, r3, #4
   2caaa:	b2db      	uxtb	r3, r3
   2caac:	e00e      	b.n	2cacc <put_fat+0x11c>
   2caae:	697b      	ldr	r3, [r7, #20]
   2cab0:	781b      	ldrb	r3, [r3, #0]
   2cab2:	b25b      	sxtb	r3, r3
   2cab4:	220f      	movs	r2, #15
   2cab6:	4393      	bics	r3, r2
   2cab8:	b25a      	sxtb	r2, r3
   2caba:	687b      	ldr	r3, [r7, #4]
   2cabc:	0a1b      	lsrs	r3, r3, #8
   2cabe:	b25b      	sxtb	r3, r3
   2cac0:	210f      	movs	r1, #15
   2cac2:	400b      	ands	r3, r1
   2cac4:	b25b      	sxtb	r3, r3
   2cac6:	4313      	orrs	r3, r2
   2cac8:	b25b      	sxtb	r3, r3
   2caca:	b2db      	uxtb	r3, r3
   2cacc:	697a      	ldr	r2, [r7, #20]
   2cace:	7013      	strb	r3, [r2, #0]
			break;
   2cad0:	e07f      	b.n	2cbd2 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2cad2:	68fb      	ldr	r3, [r7, #12]
   2cad4:	6a1a      	ldr	r2, [r3, #32]
   2cad6:	68bb      	ldr	r3, [r7, #8]
   2cad8:	0a1b      	lsrs	r3, r3, #8
   2cada:	18d2      	adds	r2, r2, r3
   2cadc:	231f      	movs	r3, #31
   2cade:	18fc      	adds	r4, r7, r3
   2cae0:	68fb      	ldr	r3, [r7, #12]
   2cae2:	0011      	movs	r1, r2
   2cae4:	0018      	movs	r0, r3
   2cae6:	4b40      	ldr	r3, [pc, #256]	; (2cbe8 <put_fat+0x238>)
   2cae8:	4798      	blx	r3
   2caea:	0003      	movs	r3, r0
   2caec:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2caee:	231f      	movs	r3, #31
   2caf0:	18fb      	adds	r3, r7, r3
   2caf2:	781b      	ldrb	r3, [r3, #0]
   2caf4:	2b00      	cmp	r3, #0
   2caf6:	d169      	bne.n	2cbcc <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2caf8:	68bb      	ldr	r3, [r7, #8]
   2cafa:	005a      	lsls	r2, r3, #1
   2cafc:	23ff      	movs	r3, #255	; 0xff
   2cafe:	005b      	lsls	r3, r3, #1
   2cb00:	4013      	ands	r3, r2
   2cb02:	3330      	adds	r3, #48	; 0x30
   2cb04:	68fa      	ldr	r2, [r7, #12]
   2cb06:	18d3      	adds	r3, r2, r3
   2cb08:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2cb0a:	687b      	ldr	r3, [r7, #4]
   2cb0c:	b2da      	uxtb	r2, r3
   2cb0e:	697b      	ldr	r3, [r7, #20]
   2cb10:	701a      	strb	r2, [r3, #0]
   2cb12:	697b      	ldr	r3, [r7, #20]
   2cb14:	3301      	adds	r3, #1
   2cb16:	687a      	ldr	r2, [r7, #4]
   2cb18:	b292      	uxth	r2, r2
   2cb1a:	0a12      	lsrs	r2, r2, #8
   2cb1c:	b292      	uxth	r2, r2
   2cb1e:	b2d2      	uxtb	r2, r2
   2cb20:	701a      	strb	r2, [r3, #0]
			break;
   2cb22:	e056      	b.n	2cbd2 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2cb24:	68fb      	ldr	r3, [r7, #12]
   2cb26:	6a1a      	ldr	r2, [r3, #32]
   2cb28:	68bb      	ldr	r3, [r7, #8]
   2cb2a:	09db      	lsrs	r3, r3, #7
   2cb2c:	18d2      	adds	r2, r2, r3
   2cb2e:	231f      	movs	r3, #31
   2cb30:	18fc      	adds	r4, r7, r3
   2cb32:	68fb      	ldr	r3, [r7, #12]
   2cb34:	0011      	movs	r1, r2
   2cb36:	0018      	movs	r0, r3
   2cb38:	4b2b      	ldr	r3, [pc, #172]	; (2cbe8 <put_fat+0x238>)
   2cb3a:	4798      	blx	r3
   2cb3c:	0003      	movs	r3, r0
   2cb3e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cb40:	231f      	movs	r3, #31
   2cb42:	18fb      	adds	r3, r7, r3
   2cb44:	781b      	ldrb	r3, [r3, #0]
   2cb46:	2b00      	cmp	r3, #0
   2cb48:	d142      	bne.n	2cbd0 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2cb4a:	68bb      	ldr	r3, [r7, #8]
   2cb4c:	009a      	lsls	r2, r3, #2
   2cb4e:	23fe      	movs	r3, #254	; 0xfe
   2cb50:	005b      	lsls	r3, r3, #1
   2cb52:	4013      	ands	r3, r2
   2cb54:	3330      	adds	r3, #48	; 0x30
   2cb56:	68fa      	ldr	r2, [r7, #12]
   2cb58:	18d3      	adds	r3, r2, r3
   2cb5a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2cb5c:	697b      	ldr	r3, [r7, #20]
   2cb5e:	3303      	adds	r3, #3
   2cb60:	781b      	ldrb	r3, [r3, #0]
   2cb62:	061a      	lsls	r2, r3, #24
   2cb64:	697b      	ldr	r3, [r7, #20]
   2cb66:	3302      	adds	r3, #2
   2cb68:	781b      	ldrb	r3, [r3, #0]
   2cb6a:	041b      	lsls	r3, r3, #16
   2cb6c:	4313      	orrs	r3, r2
   2cb6e:	697a      	ldr	r2, [r7, #20]
   2cb70:	3201      	adds	r2, #1
   2cb72:	7812      	ldrb	r2, [r2, #0]
   2cb74:	0212      	lsls	r2, r2, #8
   2cb76:	4313      	orrs	r3, r2
   2cb78:	697a      	ldr	r2, [r7, #20]
   2cb7a:	7812      	ldrb	r2, [r2, #0]
   2cb7c:	4313      	orrs	r3, r2
   2cb7e:	0f1b      	lsrs	r3, r3, #28
   2cb80:	071b      	lsls	r3, r3, #28
   2cb82:	687a      	ldr	r2, [r7, #4]
   2cb84:	4313      	orrs	r3, r2
   2cb86:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2cb88:	687b      	ldr	r3, [r7, #4]
   2cb8a:	b2da      	uxtb	r2, r3
   2cb8c:	697b      	ldr	r3, [r7, #20]
   2cb8e:	701a      	strb	r2, [r3, #0]
   2cb90:	697b      	ldr	r3, [r7, #20]
   2cb92:	3301      	adds	r3, #1
   2cb94:	687a      	ldr	r2, [r7, #4]
   2cb96:	b292      	uxth	r2, r2
   2cb98:	0a12      	lsrs	r2, r2, #8
   2cb9a:	b292      	uxth	r2, r2
   2cb9c:	b2d2      	uxtb	r2, r2
   2cb9e:	701a      	strb	r2, [r3, #0]
   2cba0:	697b      	ldr	r3, [r7, #20]
   2cba2:	3302      	adds	r3, #2
   2cba4:	687a      	ldr	r2, [r7, #4]
   2cba6:	0c12      	lsrs	r2, r2, #16
   2cba8:	b2d2      	uxtb	r2, r2
   2cbaa:	701a      	strb	r2, [r3, #0]
   2cbac:	697b      	ldr	r3, [r7, #20]
   2cbae:	3303      	adds	r3, #3
   2cbb0:	687a      	ldr	r2, [r7, #4]
   2cbb2:	0e12      	lsrs	r2, r2, #24
   2cbb4:	b2d2      	uxtb	r2, r2
   2cbb6:	701a      	strb	r2, [r3, #0]
			break;
   2cbb8:	e00b      	b.n	2cbd2 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2cbba:	231f      	movs	r3, #31
   2cbbc:	18fb      	adds	r3, r7, r3
   2cbbe:	2202      	movs	r2, #2
   2cbc0:	701a      	strb	r2, [r3, #0]
   2cbc2:	e006      	b.n	2cbd2 <put_fat+0x222>
			if (res != FR_OK) break;
   2cbc4:	46c0      	nop			; (mov r8, r8)
   2cbc6:	e004      	b.n	2cbd2 <put_fat+0x222>
			if (res != FR_OK) break;
   2cbc8:	46c0      	nop			; (mov r8, r8)
   2cbca:	e002      	b.n	2cbd2 <put_fat+0x222>
			if (res != FR_OK) break;
   2cbcc:	46c0      	nop			; (mov r8, r8)
   2cbce:	e000      	b.n	2cbd2 <put_fat+0x222>
			if (res != FR_OK) break;
   2cbd0:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2cbd2:	68fb      	ldr	r3, [r7, #12]
   2cbd4:	2201      	movs	r2, #1
   2cbd6:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2cbd8:	231f      	movs	r3, #31
   2cbda:	18fb      	adds	r3, r7, r3
   2cbdc:	781b      	ldrb	r3, [r3, #0]
}
   2cbde:	0018      	movs	r0, r3
   2cbe0:	46bd      	mov	sp, r7
   2cbe2:	b009      	add	sp, #36	; 0x24
   2cbe4:	bd90      	pop	{r4, r7, pc}
   2cbe6:	46c0      	nop			; (mov r8, r8)
   2cbe8:	0002c5ad 	.word	0x0002c5ad

0002cbec <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2cbec:	b590      	push	{r4, r7, lr}
   2cbee:	b085      	sub	sp, #20
   2cbf0:	af00      	add	r7, sp, #0
   2cbf2:	6078      	str	r0, [r7, #4]
   2cbf4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2cbf6:	683b      	ldr	r3, [r7, #0]
   2cbf8:	2b01      	cmp	r3, #1
   2cbfa:	d904      	bls.n	2cc06 <remove_chain+0x1a>
   2cbfc:	687b      	ldr	r3, [r7, #4]
   2cbfe:	699a      	ldr	r2, [r3, #24]
   2cc00:	683b      	ldr	r3, [r7, #0]
   2cc02:	429a      	cmp	r2, r3
   2cc04:	d804      	bhi.n	2cc10 <remove_chain+0x24>
		res = FR_INT_ERR;
   2cc06:	230f      	movs	r3, #15
   2cc08:	18fb      	adds	r3, r7, r3
   2cc0a:	2202      	movs	r2, #2
   2cc0c:	701a      	strb	r2, [r3, #0]
   2cc0e:	e045      	b.n	2cc9c <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2cc10:	230f      	movs	r3, #15
   2cc12:	18fb      	adds	r3, r7, r3
   2cc14:	2200      	movs	r2, #0
   2cc16:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cc18:	e037      	b.n	2cc8a <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2cc1a:	683a      	ldr	r2, [r7, #0]
   2cc1c:	687b      	ldr	r3, [r7, #4]
   2cc1e:	0011      	movs	r1, r2
   2cc20:	0018      	movs	r0, r3
   2cc22:	4b22      	ldr	r3, [pc, #136]	; (2ccac <remove_chain+0xc0>)
   2cc24:	4798      	blx	r3
   2cc26:	0003      	movs	r3, r0
   2cc28:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2cc2a:	68bb      	ldr	r3, [r7, #8]
   2cc2c:	2b00      	cmp	r3, #0
   2cc2e:	d032      	beq.n	2cc96 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2cc30:	68bb      	ldr	r3, [r7, #8]
   2cc32:	2b01      	cmp	r3, #1
   2cc34:	d104      	bne.n	2cc40 <remove_chain+0x54>
   2cc36:	230f      	movs	r3, #15
   2cc38:	18fb      	adds	r3, r7, r3
   2cc3a:	2202      	movs	r2, #2
   2cc3c:	701a      	strb	r2, [r3, #0]
   2cc3e:	e02d      	b.n	2cc9c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2cc40:	68bb      	ldr	r3, [r7, #8]
   2cc42:	3301      	adds	r3, #1
   2cc44:	d104      	bne.n	2cc50 <remove_chain+0x64>
   2cc46:	230f      	movs	r3, #15
   2cc48:	18fb      	adds	r3, r7, r3
   2cc4a:	2201      	movs	r2, #1
   2cc4c:	701a      	strb	r2, [r3, #0]
   2cc4e:	e025      	b.n	2cc9c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2cc50:	230f      	movs	r3, #15
   2cc52:	18fc      	adds	r4, r7, r3
   2cc54:	6839      	ldr	r1, [r7, #0]
   2cc56:	687b      	ldr	r3, [r7, #4]
   2cc58:	2200      	movs	r2, #0
   2cc5a:	0018      	movs	r0, r3
   2cc5c:	4b14      	ldr	r3, [pc, #80]	; (2ccb0 <remove_chain+0xc4>)
   2cc5e:	4798      	blx	r3
   2cc60:	0003      	movs	r3, r0
   2cc62:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cc64:	230f      	movs	r3, #15
   2cc66:	18fb      	adds	r3, r7, r3
   2cc68:	781b      	ldrb	r3, [r3, #0]
   2cc6a:	2b00      	cmp	r3, #0
   2cc6c:	d115      	bne.n	2cc9a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2cc6e:	687b      	ldr	r3, [r7, #4]
   2cc70:	691b      	ldr	r3, [r3, #16]
   2cc72:	3301      	adds	r3, #1
   2cc74:	d007      	beq.n	2cc86 <remove_chain+0x9a>
				fs->free_clust++;
   2cc76:	687b      	ldr	r3, [r7, #4]
   2cc78:	691b      	ldr	r3, [r3, #16]
   2cc7a:	1c5a      	adds	r2, r3, #1
   2cc7c:	687b      	ldr	r3, [r7, #4]
   2cc7e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2cc80:	687b      	ldr	r3, [r7, #4]
   2cc82:	2201      	movs	r2, #1
   2cc84:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2cc86:	68bb      	ldr	r3, [r7, #8]
   2cc88:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cc8a:	687b      	ldr	r3, [r7, #4]
   2cc8c:	699a      	ldr	r2, [r3, #24]
   2cc8e:	683b      	ldr	r3, [r7, #0]
   2cc90:	429a      	cmp	r2, r3
   2cc92:	d8c2      	bhi.n	2cc1a <remove_chain+0x2e>
   2cc94:	e002      	b.n	2cc9c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2cc96:	46c0      	nop			; (mov r8, r8)
   2cc98:	e000      	b.n	2cc9c <remove_chain+0xb0>
			if (res != FR_OK) break;
   2cc9a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cc9c:	230f      	movs	r3, #15
   2cc9e:	18fb      	adds	r3, r7, r3
   2cca0:	781b      	ldrb	r3, [r3, #0]
}
   2cca2:	0018      	movs	r0, r3
   2cca4:	46bd      	mov	sp, r7
   2cca6:	b005      	add	sp, #20
   2cca8:	bd90      	pop	{r4, r7, pc}
   2ccaa:	46c0      	nop			; (mov r8, r8)
   2ccac:	0002c845 	.word	0x0002c845
   2ccb0:	0002c9b1 	.word	0x0002c9b1

0002ccb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2ccb4:	b590      	push	{r4, r7, lr}
   2ccb6:	b087      	sub	sp, #28
   2ccb8:	af00      	add	r7, sp, #0
   2ccba:	6078      	str	r0, [r7, #4]
   2ccbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2ccbe:	683b      	ldr	r3, [r7, #0]
   2ccc0:	2b00      	cmp	r3, #0
   2ccc2:	d10d      	bne.n	2cce0 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2ccc4:	687b      	ldr	r3, [r7, #4]
   2ccc6:	68db      	ldr	r3, [r3, #12]
   2ccc8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2ccca:	693b      	ldr	r3, [r7, #16]
   2cccc:	2b00      	cmp	r3, #0
   2ccce:	d004      	beq.n	2ccda <create_chain+0x26>
   2ccd0:	687b      	ldr	r3, [r7, #4]
   2ccd2:	699a      	ldr	r2, [r3, #24]
   2ccd4:	693b      	ldr	r3, [r7, #16]
   2ccd6:	429a      	cmp	r2, r3
   2ccd8:	d818      	bhi.n	2cd0c <create_chain+0x58>
   2ccda:	2301      	movs	r3, #1
   2ccdc:	613b      	str	r3, [r7, #16]
   2ccde:	e015      	b.n	2cd0c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2cce0:	683a      	ldr	r2, [r7, #0]
   2cce2:	687b      	ldr	r3, [r7, #4]
   2cce4:	0011      	movs	r1, r2
   2cce6:	0018      	movs	r0, r3
   2cce8:	4b3e      	ldr	r3, [pc, #248]	; (2cde4 <create_chain+0x130>)
   2ccea:	4798      	blx	r3
   2ccec:	0003      	movs	r3, r0
   2ccee:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2ccf0:	68bb      	ldr	r3, [r7, #8]
   2ccf2:	2b01      	cmp	r3, #1
   2ccf4:	d801      	bhi.n	2ccfa <create_chain+0x46>
   2ccf6:	2301      	movs	r3, #1
   2ccf8:	e070      	b.n	2cddc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2ccfa:	687b      	ldr	r3, [r7, #4]
   2ccfc:	699a      	ldr	r2, [r3, #24]
   2ccfe:	68bb      	ldr	r3, [r7, #8]
   2cd00:	429a      	cmp	r2, r3
   2cd02:	d901      	bls.n	2cd08 <create_chain+0x54>
   2cd04:	68bb      	ldr	r3, [r7, #8]
   2cd06:	e069      	b.n	2cddc <create_chain+0x128>
		scl = clst;
   2cd08:	683b      	ldr	r3, [r7, #0]
   2cd0a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2cd0c:	693b      	ldr	r3, [r7, #16]
   2cd0e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2cd10:	697b      	ldr	r3, [r7, #20]
   2cd12:	3301      	adds	r3, #1
   2cd14:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2cd16:	687b      	ldr	r3, [r7, #4]
   2cd18:	699a      	ldr	r2, [r3, #24]
   2cd1a:	697b      	ldr	r3, [r7, #20]
   2cd1c:	429a      	cmp	r2, r3
   2cd1e:	d807      	bhi.n	2cd30 <create_chain+0x7c>
			ncl = 2;
   2cd20:	2302      	movs	r3, #2
   2cd22:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2cd24:	697a      	ldr	r2, [r7, #20]
   2cd26:	693b      	ldr	r3, [r7, #16]
   2cd28:	429a      	cmp	r2, r3
   2cd2a:	d901      	bls.n	2cd30 <create_chain+0x7c>
   2cd2c:	2300      	movs	r3, #0
   2cd2e:	e055      	b.n	2cddc <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2cd30:	697a      	ldr	r2, [r7, #20]
   2cd32:	687b      	ldr	r3, [r7, #4]
   2cd34:	0011      	movs	r1, r2
   2cd36:	0018      	movs	r0, r3
   2cd38:	4b2a      	ldr	r3, [pc, #168]	; (2cde4 <create_chain+0x130>)
   2cd3a:	4798      	blx	r3
   2cd3c:	0003      	movs	r3, r0
   2cd3e:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2cd40:	68bb      	ldr	r3, [r7, #8]
   2cd42:	2b00      	cmp	r3, #0
   2cd44:	d00d      	beq.n	2cd62 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2cd46:	68bb      	ldr	r3, [r7, #8]
   2cd48:	3301      	adds	r3, #1
   2cd4a:	d002      	beq.n	2cd52 <create_chain+0x9e>
   2cd4c:	68bb      	ldr	r3, [r7, #8]
   2cd4e:	2b01      	cmp	r3, #1
   2cd50:	d101      	bne.n	2cd56 <create_chain+0xa2>
			return cs;
   2cd52:	68bb      	ldr	r3, [r7, #8]
   2cd54:	e042      	b.n	2cddc <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2cd56:	697a      	ldr	r2, [r7, #20]
   2cd58:	693b      	ldr	r3, [r7, #16]
   2cd5a:	429a      	cmp	r2, r3
   2cd5c:	d1d8      	bne.n	2cd10 <create_chain+0x5c>
   2cd5e:	2300      	movs	r3, #0
   2cd60:	e03c      	b.n	2cddc <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2cd62:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2cd64:	230f      	movs	r3, #15
   2cd66:	18fc      	adds	r4, r7, r3
   2cd68:	4a1f      	ldr	r2, [pc, #124]	; (2cde8 <create_chain+0x134>)
   2cd6a:	6979      	ldr	r1, [r7, #20]
   2cd6c:	687b      	ldr	r3, [r7, #4]
   2cd6e:	0018      	movs	r0, r3
   2cd70:	4b1e      	ldr	r3, [pc, #120]	; (2cdec <create_chain+0x138>)
   2cd72:	4798      	blx	r3
   2cd74:	0003      	movs	r3, r0
   2cd76:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2cd78:	230f      	movs	r3, #15
   2cd7a:	18fb      	adds	r3, r7, r3
   2cd7c:	781b      	ldrb	r3, [r3, #0]
   2cd7e:	2b00      	cmp	r3, #0
   2cd80:	d10c      	bne.n	2cd9c <create_chain+0xe8>
   2cd82:	683b      	ldr	r3, [r7, #0]
   2cd84:	2b00      	cmp	r3, #0
   2cd86:	d009      	beq.n	2cd9c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2cd88:	230f      	movs	r3, #15
   2cd8a:	18fc      	adds	r4, r7, r3
   2cd8c:	697a      	ldr	r2, [r7, #20]
   2cd8e:	6839      	ldr	r1, [r7, #0]
   2cd90:	687b      	ldr	r3, [r7, #4]
   2cd92:	0018      	movs	r0, r3
   2cd94:	4b15      	ldr	r3, [pc, #84]	; (2cdec <create_chain+0x138>)
   2cd96:	4798      	blx	r3
   2cd98:	0003      	movs	r3, r0
   2cd9a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2cd9c:	230f      	movs	r3, #15
   2cd9e:	18fb      	adds	r3, r7, r3
   2cda0:	781b      	ldrb	r3, [r3, #0]
   2cda2:	2b00      	cmp	r3, #0
   2cda4:	d10f      	bne.n	2cdc6 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2cda6:	687b      	ldr	r3, [r7, #4]
   2cda8:	697a      	ldr	r2, [r7, #20]
   2cdaa:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2cdac:	687b      	ldr	r3, [r7, #4]
   2cdae:	691b      	ldr	r3, [r3, #16]
   2cdb0:	3301      	adds	r3, #1
   2cdb2:	d012      	beq.n	2cdda <create_chain+0x126>
			fs->free_clust--;
   2cdb4:	687b      	ldr	r3, [r7, #4]
   2cdb6:	691b      	ldr	r3, [r3, #16]
   2cdb8:	1e5a      	subs	r2, r3, #1
   2cdba:	687b      	ldr	r3, [r7, #4]
   2cdbc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2cdbe:	687b      	ldr	r3, [r7, #4]
   2cdc0:	2201      	movs	r2, #1
   2cdc2:	715a      	strb	r2, [r3, #5]
   2cdc4:	e009      	b.n	2cdda <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2cdc6:	230f      	movs	r3, #15
   2cdc8:	18fb      	adds	r3, r7, r3
   2cdca:	781b      	ldrb	r3, [r3, #0]
   2cdcc:	2b01      	cmp	r3, #1
   2cdce:	d102      	bne.n	2cdd6 <create_chain+0x122>
   2cdd0:	2301      	movs	r3, #1
   2cdd2:	425b      	negs	r3, r3
   2cdd4:	e000      	b.n	2cdd8 <create_chain+0x124>
   2cdd6:	2301      	movs	r3, #1
   2cdd8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2cdda:	697b      	ldr	r3, [r7, #20]
}
   2cddc:	0018      	movs	r0, r3
   2cdde:	46bd      	mov	sp, r7
   2cde0:	b007      	add	sp, #28
   2cde2:	bd90      	pop	{r4, r7, pc}
   2cde4:	0002c845 	.word	0x0002c845
   2cde8:	0fffffff 	.word	0x0fffffff
   2cdec:	0002c9b1 	.word	0x0002c9b1

0002cdf0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2cdf0:	b580      	push	{r7, lr}
   2cdf2:	b084      	sub	sp, #16
   2cdf4:	af00      	add	r7, sp, #0
   2cdf6:	6078      	str	r0, [r7, #4]
   2cdf8:	000a      	movs	r2, r1
   2cdfa:	1cbb      	adds	r3, r7, #2
   2cdfc:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2cdfe:	687b      	ldr	r3, [r7, #4]
   2ce00:	1cba      	adds	r2, r7, #2
   2ce02:	8812      	ldrh	r2, [r2, #0]
   2ce04:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2ce06:	687b      	ldr	r3, [r7, #4]
   2ce08:	689b      	ldr	r3, [r3, #8]
   2ce0a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2ce0c:	68fb      	ldr	r3, [r7, #12]
   2ce0e:	2b01      	cmp	r3, #1
   2ce10:	d005      	beq.n	2ce1e <dir_sdi+0x2e>
   2ce12:	687b      	ldr	r3, [r7, #4]
   2ce14:	681b      	ldr	r3, [r3, #0]
   2ce16:	699a      	ldr	r2, [r3, #24]
   2ce18:	68fb      	ldr	r3, [r7, #12]
   2ce1a:	429a      	cmp	r2, r3
   2ce1c:	d801      	bhi.n	2ce22 <dir_sdi+0x32>
		return FR_INT_ERR;
   2ce1e:	2302      	movs	r3, #2
   2ce20:	e075      	b.n	2cf0e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2ce22:	68fb      	ldr	r3, [r7, #12]
   2ce24:	2b00      	cmp	r3, #0
   2ce26:	d108      	bne.n	2ce3a <dir_sdi+0x4a>
   2ce28:	687b      	ldr	r3, [r7, #4]
   2ce2a:	681b      	ldr	r3, [r3, #0]
   2ce2c:	781b      	ldrb	r3, [r3, #0]
   2ce2e:	2b03      	cmp	r3, #3
   2ce30:	d103      	bne.n	2ce3a <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2ce32:	687b      	ldr	r3, [r7, #4]
   2ce34:	681b      	ldr	r3, [r3, #0]
   2ce36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ce38:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2ce3a:	68fb      	ldr	r3, [r7, #12]
   2ce3c:	2b00      	cmp	r3, #0
   2ce3e:	d116      	bne.n	2ce6e <dir_sdi+0x7e>
		dj->clust = clst;
   2ce40:	687b      	ldr	r3, [r7, #4]
   2ce42:	68fa      	ldr	r2, [r7, #12]
   2ce44:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2ce46:	687b      	ldr	r3, [r7, #4]
   2ce48:	681b      	ldr	r3, [r3, #0]
   2ce4a:	891b      	ldrh	r3, [r3, #8]
   2ce4c:	1cba      	adds	r2, r7, #2
   2ce4e:	8812      	ldrh	r2, [r2, #0]
   2ce50:	429a      	cmp	r2, r3
   2ce52:	d301      	bcc.n	2ce58 <dir_sdi+0x68>
			return FR_INT_ERR;
   2ce54:	2302      	movs	r3, #2
   2ce56:	e05a      	b.n	2cf0e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2ce58:	687b      	ldr	r3, [r7, #4]
   2ce5a:	681b      	ldr	r3, [r3, #0]
   2ce5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ce5e:	1cba      	adds	r2, r7, #2
   2ce60:	8812      	ldrh	r2, [r2, #0]
   2ce62:	0912      	lsrs	r2, r2, #4
   2ce64:	b292      	uxth	r2, r2
   2ce66:	189a      	adds	r2, r3, r2
   2ce68:	687b      	ldr	r3, [r7, #4]
   2ce6a:	611a      	str	r2, [r3, #16]
   2ce6c:	e042      	b.n	2cef4 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2ce6e:	687b      	ldr	r3, [r7, #4]
   2ce70:	681b      	ldr	r3, [r3, #0]
   2ce72:	789b      	ldrb	r3, [r3, #2]
   2ce74:	b29a      	uxth	r2, r3
   2ce76:	230a      	movs	r3, #10
   2ce78:	18fb      	adds	r3, r7, r3
   2ce7a:	0112      	lsls	r2, r2, #4
   2ce7c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2ce7e:	e020      	b.n	2cec2 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2ce80:	687b      	ldr	r3, [r7, #4]
   2ce82:	681b      	ldr	r3, [r3, #0]
   2ce84:	68fa      	ldr	r2, [r7, #12]
   2ce86:	0011      	movs	r1, r2
   2ce88:	0018      	movs	r0, r3
   2ce8a:	4b23      	ldr	r3, [pc, #140]	; (2cf18 <dir_sdi+0x128>)
   2ce8c:	4798      	blx	r3
   2ce8e:	0003      	movs	r3, r0
   2ce90:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2ce92:	68fb      	ldr	r3, [r7, #12]
   2ce94:	3301      	adds	r3, #1
   2ce96:	d101      	bne.n	2ce9c <dir_sdi+0xac>
   2ce98:	2301      	movs	r3, #1
   2ce9a:	e038      	b.n	2cf0e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2ce9c:	68fb      	ldr	r3, [r7, #12]
   2ce9e:	2b01      	cmp	r3, #1
   2cea0:	d905      	bls.n	2ceae <dir_sdi+0xbe>
   2cea2:	687b      	ldr	r3, [r7, #4]
   2cea4:	681b      	ldr	r3, [r3, #0]
   2cea6:	699a      	ldr	r2, [r3, #24]
   2cea8:	68fb      	ldr	r3, [r7, #12]
   2ceaa:	429a      	cmp	r2, r3
   2ceac:	d801      	bhi.n	2ceb2 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2ceae:	2302      	movs	r3, #2
   2ceb0:	e02d      	b.n	2cf0e <dir_sdi+0x11e>
			idx -= ic;
   2ceb2:	1cbb      	adds	r3, r7, #2
   2ceb4:	1cb9      	adds	r1, r7, #2
   2ceb6:	220a      	movs	r2, #10
   2ceb8:	18ba      	adds	r2, r7, r2
   2ceba:	8809      	ldrh	r1, [r1, #0]
   2cebc:	8812      	ldrh	r2, [r2, #0]
   2cebe:	1a8a      	subs	r2, r1, r2
   2cec0:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cec2:	1cba      	adds	r2, r7, #2
   2cec4:	230a      	movs	r3, #10
   2cec6:	18fb      	adds	r3, r7, r3
   2cec8:	8812      	ldrh	r2, [r2, #0]
   2ceca:	881b      	ldrh	r3, [r3, #0]
   2cecc:	429a      	cmp	r2, r3
   2cece:	d2d7      	bcs.n	2ce80 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2ced0:	687b      	ldr	r3, [r7, #4]
   2ced2:	68fa      	ldr	r2, [r7, #12]
   2ced4:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2ced6:	687b      	ldr	r3, [r7, #4]
   2ced8:	681b      	ldr	r3, [r3, #0]
   2ceda:	68fa      	ldr	r2, [r7, #12]
   2cedc:	0011      	movs	r1, r2
   2cede:	0018      	movs	r0, r3
   2cee0:	4b0e      	ldr	r3, [pc, #56]	; (2cf1c <dir_sdi+0x12c>)
   2cee2:	4798      	blx	r3
   2cee4:	0002      	movs	r2, r0
   2cee6:	1cbb      	adds	r3, r7, #2
   2cee8:	881b      	ldrh	r3, [r3, #0]
   2ceea:	091b      	lsrs	r3, r3, #4
   2ceec:	b29b      	uxth	r3, r3
   2ceee:	18d2      	adds	r2, r2, r3
   2cef0:	687b      	ldr	r3, [r7, #4]
   2cef2:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2cef4:	687b      	ldr	r3, [r7, #4]
   2cef6:	681b      	ldr	r3, [r3, #0]
   2cef8:	3330      	adds	r3, #48	; 0x30
   2cefa:	001a      	movs	r2, r3
   2cefc:	1cbb      	adds	r3, r7, #2
   2cefe:	881b      	ldrh	r3, [r3, #0]
   2cf00:	210f      	movs	r1, #15
   2cf02:	400b      	ands	r3, r1
   2cf04:	015b      	lsls	r3, r3, #5
   2cf06:	18d2      	adds	r2, r2, r3
   2cf08:	687b      	ldr	r3, [r7, #4]
   2cf0a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2cf0c:	2300      	movs	r3, #0
}
   2cf0e:	0018      	movs	r0, r3
   2cf10:	46bd      	mov	sp, r7
   2cf12:	b004      	add	sp, #16
   2cf14:	bd80      	pop	{r7, pc}
   2cf16:	46c0      	nop			; (mov r8, r8)
   2cf18:	0002c845 	.word	0x0002c845
   2cf1c:	0002c80d 	.word	0x0002c80d

0002cf20 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2cf20:	b590      	push	{r4, r7, lr}
   2cf22:	b085      	sub	sp, #20
   2cf24:	af00      	add	r7, sp, #0
   2cf26:	6078      	str	r0, [r7, #4]
   2cf28:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2cf2a:	687b      	ldr	r3, [r7, #4]
   2cf2c:	88da      	ldrh	r2, [r3, #6]
   2cf2e:	2308      	movs	r3, #8
   2cf30:	18fb      	adds	r3, r7, r3
   2cf32:	3201      	adds	r2, #1
   2cf34:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2cf36:	2308      	movs	r3, #8
   2cf38:	18fb      	adds	r3, r7, r3
   2cf3a:	881b      	ldrh	r3, [r3, #0]
   2cf3c:	2b00      	cmp	r3, #0
   2cf3e:	d003      	beq.n	2cf48 <dir_next+0x28>
   2cf40:	687b      	ldr	r3, [r7, #4]
   2cf42:	691b      	ldr	r3, [r3, #16]
   2cf44:	2b00      	cmp	r3, #0
   2cf46:	d101      	bne.n	2cf4c <dir_next+0x2c>
		return FR_NO_FILE;
   2cf48:	2304      	movs	r3, #4
   2cf4a:	e0d2      	b.n	2d0f2 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2cf4c:	2308      	movs	r3, #8
   2cf4e:	18fb      	adds	r3, r7, r3
   2cf50:	881b      	ldrh	r3, [r3, #0]
   2cf52:	220f      	movs	r2, #15
   2cf54:	4013      	ands	r3, r2
   2cf56:	b29b      	uxth	r3, r3
   2cf58:	2b00      	cmp	r3, #0
   2cf5a:	d000      	beq.n	2cf5e <dir_next+0x3e>
   2cf5c:	e0b6      	b.n	2d0cc <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2cf5e:	687b      	ldr	r3, [r7, #4]
   2cf60:	691b      	ldr	r3, [r3, #16]
   2cf62:	1c5a      	adds	r2, r3, #1
   2cf64:	687b      	ldr	r3, [r7, #4]
   2cf66:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2cf68:	687b      	ldr	r3, [r7, #4]
   2cf6a:	68db      	ldr	r3, [r3, #12]
   2cf6c:	2b00      	cmp	r3, #0
   2cf6e:	d10a      	bne.n	2cf86 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2cf70:	687b      	ldr	r3, [r7, #4]
   2cf72:	681b      	ldr	r3, [r3, #0]
   2cf74:	891b      	ldrh	r3, [r3, #8]
   2cf76:	2208      	movs	r2, #8
   2cf78:	18ba      	adds	r2, r7, r2
   2cf7a:	8812      	ldrh	r2, [r2, #0]
   2cf7c:	429a      	cmp	r2, r3
   2cf7e:	d200      	bcs.n	2cf82 <dir_next+0x62>
   2cf80:	e0a4      	b.n	2d0cc <dir_next+0x1ac>
				return FR_NO_FILE;
   2cf82:	2304      	movs	r3, #4
   2cf84:	e0b5      	b.n	2d0f2 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2cf86:	2308      	movs	r3, #8
   2cf88:	18fb      	adds	r3, r7, r3
   2cf8a:	881b      	ldrh	r3, [r3, #0]
   2cf8c:	091b      	lsrs	r3, r3, #4
   2cf8e:	b29b      	uxth	r3, r3
   2cf90:	001a      	movs	r2, r3
   2cf92:	687b      	ldr	r3, [r7, #4]
   2cf94:	681b      	ldr	r3, [r3, #0]
   2cf96:	789b      	ldrb	r3, [r3, #2]
   2cf98:	3b01      	subs	r3, #1
   2cf9a:	4013      	ands	r3, r2
   2cf9c:	d000      	beq.n	2cfa0 <dir_next+0x80>
   2cf9e:	e095      	b.n	2d0cc <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2cfa0:	687b      	ldr	r3, [r7, #4]
   2cfa2:	681a      	ldr	r2, [r3, #0]
   2cfa4:	687b      	ldr	r3, [r7, #4]
   2cfa6:	68db      	ldr	r3, [r3, #12]
   2cfa8:	0019      	movs	r1, r3
   2cfaa:	0010      	movs	r0, r2
   2cfac:	4b53      	ldr	r3, [pc, #332]	; (2d0fc <dir_next+0x1dc>)
   2cfae:	4798      	blx	r3
   2cfb0:	0003      	movs	r3, r0
   2cfb2:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2cfb4:	68fb      	ldr	r3, [r7, #12]
   2cfb6:	2b01      	cmp	r3, #1
   2cfb8:	d801      	bhi.n	2cfbe <dir_next+0x9e>
   2cfba:	2302      	movs	r3, #2
   2cfbc:	e099      	b.n	2d0f2 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2cfbe:	68fb      	ldr	r3, [r7, #12]
   2cfc0:	3301      	adds	r3, #1
   2cfc2:	d101      	bne.n	2cfc8 <dir_next+0xa8>
   2cfc4:	2301      	movs	r3, #1
   2cfc6:	e094      	b.n	2d0f2 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2cfc8:	687b      	ldr	r3, [r7, #4]
   2cfca:	681b      	ldr	r3, [r3, #0]
   2cfcc:	699a      	ldr	r2, [r3, #24]
   2cfce:	68fb      	ldr	r3, [r7, #12]
   2cfd0:	429a      	cmp	r2, r3
   2cfd2:	d900      	bls.n	2cfd6 <dir_next+0xb6>
   2cfd4:	e06d      	b.n	2d0b2 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2cfd6:	683b      	ldr	r3, [r7, #0]
   2cfd8:	2b00      	cmp	r3, #0
   2cfda:	d101      	bne.n	2cfe0 <dir_next+0xc0>
   2cfdc:	2304      	movs	r3, #4
   2cfde:	e088      	b.n	2d0f2 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2cfe0:	687b      	ldr	r3, [r7, #4]
   2cfe2:	681a      	ldr	r2, [r3, #0]
   2cfe4:	687b      	ldr	r3, [r7, #4]
   2cfe6:	68db      	ldr	r3, [r3, #12]
   2cfe8:	0019      	movs	r1, r3
   2cfea:	0010      	movs	r0, r2
   2cfec:	4b44      	ldr	r3, [pc, #272]	; (2d100 <dir_next+0x1e0>)
   2cfee:	4798      	blx	r3
   2cff0:	0003      	movs	r3, r0
   2cff2:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2cff4:	68fb      	ldr	r3, [r7, #12]
   2cff6:	2b00      	cmp	r3, #0
   2cff8:	d101      	bne.n	2cffe <dir_next+0xde>
   2cffa:	2307      	movs	r3, #7
   2cffc:	e079      	b.n	2d0f2 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2cffe:	68fb      	ldr	r3, [r7, #12]
   2d000:	2b01      	cmp	r3, #1
   2d002:	d101      	bne.n	2d008 <dir_next+0xe8>
   2d004:	2302      	movs	r3, #2
   2d006:	e074      	b.n	2d0f2 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2d008:	68fb      	ldr	r3, [r7, #12]
   2d00a:	3301      	adds	r3, #1
   2d00c:	d101      	bne.n	2d012 <dir_next+0xf2>
   2d00e:	2301      	movs	r3, #1
   2d010:	e06f      	b.n	2d0f2 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2d012:	687b      	ldr	r3, [r7, #4]
   2d014:	681b      	ldr	r3, [r3, #0]
   2d016:	2100      	movs	r1, #0
   2d018:	0018      	movs	r0, r3
   2d01a:	4b3a      	ldr	r3, [pc, #232]	; (2d104 <dir_next+0x1e4>)
   2d01c:	4798      	blx	r3
   2d01e:	1e03      	subs	r3, r0, #0
   2d020:	d001      	beq.n	2d026 <dir_next+0x106>
   2d022:	2301      	movs	r3, #1
   2d024:	e065      	b.n	2d0f2 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2d026:	687b      	ldr	r3, [r7, #4]
   2d028:	681b      	ldr	r3, [r3, #0]
   2d02a:	3330      	adds	r3, #48	; 0x30
   2d02c:	0018      	movs	r0, r3
   2d02e:	2380      	movs	r3, #128	; 0x80
   2d030:	009b      	lsls	r3, r3, #2
   2d032:	001a      	movs	r2, r3
   2d034:	2100      	movs	r1, #0
   2d036:	4b34      	ldr	r3, [pc, #208]	; (2d108 <dir_next+0x1e8>)
   2d038:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2d03a:	687b      	ldr	r3, [r7, #4]
   2d03c:	681c      	ldr	r4, [r3, #0]
   2d03e:	687b      	ldr	r3, [r7, #4]
   2d040:	681b      	ldr	r3, [r3, #0]
   2d042:	68fa      	ldr	r2, [r7, #12]
   2d044:	0011      	movs	r1, r2
   2d046:	0018      	movs	r0, r3
   2d048:	4b30      	ldr	r3, [pc, #192]	; (2d10c <dir_next+0x1ec>)
   2d04a:	4798      	blx	r3
   2d04c:	0003      	movs	r3, r0
   2d04e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2d050:	230b      	movs	r3, #11
   2d052:	18fb      	adds	r3, r7, r3
   2d054:	2200      	movs	r2, #0
   2d056:	701a      	strb	r2, [r3, #0]
   2d058:	e019      	b.n	2d08e <dir_next+0x16e>
						dj->fs->wflag = 1;
   2d05a:	687b      	ldr	r3, [r7, #4]
   2d05c:	681b      	ldr	r3, [r3, #0]
   2d05e:	2201      	movs	r2, #1
   2d060:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2d062:	687b      	ldr	r3, [r7, #4]
   2d064:	681b      	ldr	r3, [r3, #0]
   2d066:	2100      	movs	r1, #0
   2d068:	0018      	movs	r0, r3
   2d06a:	4b26      	ldr	r3, [pc, #152]	; (2d104 <dir_next+0x1e4>)
   2d06c:	4798      	blx	r3
   2d06e:	1e03      	subs	r3, r0, #0
   2d070:	d001      	beq.n	2d076 <dir_next+0x156>
   2d072:	2301      	movs	r3, #1
   2d074:	e03d      	b.n	2d0f2 <dir_next+0x1d2>
						dj->fs->winsect++;
   2d076:	687b      	ldr	r3, [r7, #4]
   2d078:	681b      	ldr	r3, [r3, #0]
   2d07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d07c:	3201      	adds	r2, #1
   2d07e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2d080:	230b      	movs	r3, #11
   2d082:	18fb      	adds	r3, r7, r3
   2d084:	781a      	ldrb	r2, [r3, #0]
   2d086:	230b      	movs	r3, #11
   2d088:	18fb      	adds	r3, r7, r3
   2d08a:	3201      	adds	r2, #1
   2d08c:	701a      	strb	r2, [r3, #0]
   2d08e:	687b      	ldr	r3, [r7, #4]
   2d090:	681b      	ldr	r3, [r3, #0]
   2d092:	789b      	ldrb	r3, [r3, #2]
   2d094:	220b      	movs	r2, #11
   2d096:	18ba      	adds	r2, r7, r2
   2d098:	7812      	ldrb	r2, [r2, #0]
   2d09a:	429a      	cmp	r2, r3
   2d09c:	d3dd      	bcc.n	2d05a <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2d09e:	687b      	ldr	r3, [r7, #4]
   2d0a0:	681b      	ldr	r3, [r3, #0]
   2d0a2:	687a      	ldr	r2, [r7, #4]
   2d0a4:	6812      	ldr	r2, [r2, #0]
   2d0a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2d0a8:	220b      	movs	r2, #11
   2d0aa:	18ba      	adds	r2, r7, r2
   2d0ac:	7812      	ldrb	r2, [r2, #0]
   2d0ae:	1a8a      	subs	r2, r1, r2
   2d0b0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2d0b2:	687b      	ldr	r3, [r7, #4]
   2d0b4:	68fa      	ldr	r2, [r7, #12]
   2d0b6:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2d0b8:	687b      	ldr	r3, [r7, #4]
   2d0ba:	681b      	ldr	r3, [r3, #0]
   2d0bc:	68fa      	ldr	r2, [r7, #12]
   2d0be:	0011      	movs	r1, r2
   2d0c0:	0018      	movs	r0, r3
   2d0c2:	4b12      	ldr	r3, [pc, #72]	; (2d10c <dir_next+0x1ec>)
   2d0c4:	4798      	blx	r3
   2d0c6:	0002      	movs	r2, r0
   2d0c8:	687b      	ldr	r3, [r7, #4]
   2d0ca:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2d0cc:	687b      	ldr	r3, [r7, #4]
   2d0ce:	2208      	movs	r2, #8
   2d0d0:	18ba      	adds	r2, r7, r2
   2d0d2:	8812      	ldrh	r2, [r2, #0]
   2d0d4:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2d0d6:	687b      	ldr	r3, [r7, #4]
   2d0d8:	681b      	ldr	r3, [r3, #0]
   2d0da:	3330      	adds	r3, #48	; 0x30
   2d0dc:	001a      	movs	r2, r3
   2d0de:	2308      	movs	r3, #8
   2d0e0:	18fb      	adds	r3, r7, r3
   2d0e2:	881b      	ldrh	r3, [r3, #0]
   2d0e4:	210f      	movs	r1, #15
   2d0e6:	400b      	ands	r3, r1
   2d0e8:	015b      	lsls	r3, r3, #5
   2d0ea:	18d2      	adds	r2, r2, r3
   2d0ec:	687b      	ldr	r3, [r7, #4]
   2d0ee:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2d0f0:	2300      	movs	r3, #0
}
   2d0f2:	0018      	movs	r0, r3
   2d0f4:	46bd      	mov	sp, r7
   2d0f6:	b005      	add	sp, #20
   2d0f8:	bd90      	pop	{r4, r7, pc}
   2d0fa:	46c0      	nop			; (mov r8, r8)
   2d0fc:	0002c845 	.word	0x0002c845
   2d100:	0002ccb5 	.word	0x0002ccb5
   2d104:	0002c5ad 	.word	0x0002c5ad
   2d108:	0002c501 	.word	0x0002c501
   2d10c:	0002c80d 	.word	0x0002c80d

0002d110 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2d110:	b590      	push	{r4, r7, lr}
   2d112:	b087      	sub	sp, #28
   2d114:	af00      	add	r7, sp, #0
   2d116:	6078      	str	r0, [r7, #4]
   2d118:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2d11a:	683b      	ldr	r3, [r7, #0]
   2d11c:	781b      	ldrb	r3, [r3, #0]
   2d11e:	001a      	movs	r2, r3
   2d120:	2340      	movs	r3, #64	; 0x40
   2d122:	439a      	bics	r2, r3
   2d124:	0013      	movs	r3, r2
   2d126:	1e5a      	subs	r2, r3, #1
   2d128:	0013      	movs	r3, r2
   2d12a:	005b      	lsls	r3, r3, #1
   2d12c:	189b      	adds	r3, r3, r2
   2d12e:	009b      	lsls	r3, r3, #2
   2d130:	189b      	adds	r3, r3, r2
   2d132:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2d134:	2300      	movs	r3, #0
   2d136:	613b      	str	r3, [r7, #16]
   2d138:	230e      	movs	r3, #14
   2d13a:	18fb      	adds	r3, r7, r3
   2d13c:	2201      	movs	r2, #1
   2d13e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2d140:	4a31      	ldr	r2, [pc, #196]	; (2d208 <cmp_lfn+0xf8>)
   2d142:	693b      	ldr	r3, [r7, #16]
   2d144:	18d3      	adds	r3, r2, r3
   2d146:	781b      	ldrb	r3, [r3, #0]
   2d148:	3301      	adds	r3, #1
   2d14a:	683a      	ldr	r2, [r7, #0]
   2d14c:	18d3      	adds	r3, r2, r3
   2d14e:	781b      	ldrb	r3, [r3, #0]
   2d150:	021b      	lsls	r3, r3, #8
   2d152:	b21a      	sxth	r2, r3
   2d154:	492c      	ldr	r1, [pc, #176]	; (2d208 <cmp_lfn+0xf8>)
   2d156:	693b      	ldr	r3, [r7, #16]
   2d158:	18cb      	adds	r3, r1, r3
   2d15a:	781b      	ldrb	r3, [r3, #0]
   2d15c:	0019      	movs	r1, r3
   2d15e:	683b      	ldr	r3, [r7, #0]
   2d160:	185b      	adds	r3, r3, r1
   2d162:	781b      	ldrb	r3, [r3, #0]
   2d164:	b21b      	sxth	r3, r3
   2d166:	4313      	orrs	r3, r2
   2d168:	b21a      	sxth	r2, r3
   2d16a:	230c      	movs	r3, #12
   2d16c:	18fb      	adds	r3, r7, r3
   2d16e:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2d170:	230e      	movs	r3, #14
   2d172:	18fb      	adds	r3, r7, r3
   2d174:	881b      	ldrh	r3, [r3, #0]
   2d176:	2b00      	cmp	r3, #0
   2d178:	d01f      	beq.n	2d1ba <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2d17a:	230e      	movs	r3, #14
   2d17c:	18fc      	adds	r4, r7, r3
   2d17e:	230c      	movs	r3, #12
   2d180:	18fb      	adds	r3, r7, r3
   2d182:	881b      	ldrh	r3, [r3, #0]
   2d184:	0018      	movs	r0, r3
   2d186:	4b21      	ldr	r3, [pc, #132]	; (2d20c <cmp_lfn+0xfc>)
   2d188:	4798      	blx	r3
   2d18a:	0003      	movs	r3, r0
   2d18c:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2d18e:	697b      	ldr	r3, [r7, #20]
   2d190:	2bfe      	cmp	r3, #254	; 0xfe
   2d192:	d810      	bhi.n	2d1b6 <cmp_lfn+0xa6>
   2d194:	697b      	ldr	r3, [r7, #20]
   2d196:	1c5a      	adds	r2, r3, #1
   2d198:	617a      	str	r2, [r7, #20]
   2d19a:	005b      	lsls	r3, r3, #1
   2d19c:	687a      	ldr	r2, [r7, #4]
   2d19e:	18d3      	adds	r3, r2, r3
   2d1a0:	881b      	ldrh	r3, [r3, #0]
   2d1a2:	0018      	movs	r0, r3
   2d1a4:	4b19      	ldr	r3, [pc, #100]	; (2d20c <cmp_lfn+0xfc>)
   2d1a6:	4798      	blx	r3
   2d1a8:	0003      	movs	r3, r0
   2d1aa:	001a      	movs	r2, r3
   2d1ac:	230e      	movs	r3, #14
   2d1ae:	18fb      	adds	r3, r7, r3
   2d1b0:	881b      	ldrh	r3, [r3, #0]
   2d1b2:	4293      	cmp	r3, r2
   2d1b4:	d009      	beq.n	2d1ca <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2d1b6:	2300      	movs	r3, #0
   2d1b8:	e022      	b.n	2d200 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2d1ba:	230c      	movs	r3, #12
   2d1bc:	18fb      	adds	r3, r7, r3
   2d1be:	881b      	ldrh	r3, [r3, #0]
   2d1c0:	4a13      	ldr	r2, [pc, #76]	; (2d210 <cmp_lfn+0x100>)
   2d1c2:	4293      	cmp	r3, r2
   2d1c4:	d001      	beq.n	2d1ca <cmp_lfn+0xba>
   2d1c6:	2300      	movs	r3, #0
   2d1c8:	e01a      	b.n	2d200 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2d1ca:	693b      	ldr	r3, [r7, #16]
   2d1cc:	3301      	adds	r3, #1
   2d1ce:	613b      	str	r3, [r7, #16]
   2d1d0:	693b      	ldr	r3, [r7, #16]
   2d1d2:	2b0c      	cmp	r3, #12
   2d1d4:	d9b4      	bls.n	2d140 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2d1d6:	683b      	ldr	r3, [r7, #0]
   2d1d8:	781b      	ldrb	r3, [r3, #0]
   2d1da:	001a      	movs	r2, r3
   2d1dc:	2340      	movs	r3, #64	; 0x40
   2d1de:	4013      	ands	r3, r2
   2d1e0:	d00d      	beq.n	2d1fe <cmp_lfn+0xee>
   2d1e2:	230e      	movs	r3, #14
   2d1e4:	18fb      	adds	r3, r7, r3
   2d1e6:	881b      	ldrh	r3, [r3, #0]
   2d1e8:	2b00      	cmp	r3, #0
   2d1ea:	d008      	beq.n	2d1fe <cmp_lfn+0xee>
   2d1ec:	697b      	ldr	r3, [r7, #20]
   2d1ee:	005b      	lsls	r3, r3, #1
   2d1f0:	687a      	ldr	r2, [r7, #4]
   2d1f2:	18d3      	adds	r3, r2, r3
   2d1f4:	881b      	ldrh	r3, [r3, #0]
   2d1f6:	2b00      	cmp	r3, #0
   2d1f8:	d001      	beq.n	2d1fe <cmp_lfn+0xee>
		return 0;
   2d1fa:	2300      	movs	r3, #0
   2d1fc:	e000      	b.n	2d200 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2d1fe:	2301      	movs	r3, #1
}
   2d200:	0018      	movs	r0, r3
   2d202:	46bd      	mov	sp, r7
   2d204:	b007      	add	sp, #28
   2d206:	bd90      	pop	{r4, r7, pc}
   2d208:	0003a508 	.word	0x0003a508
   2d20c:	0002f1bd 	.word	0x0002f1bd
   2d210:	0000ffff 	.word	0x0000ffff

0002d214 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2d214:	b580      	push	{r7, lr}
   2d216:	b088      	sub	sp, #32
   2d218:	af00      	add	r7, sp, #0
   2d21a:	60f8      	str	r0, [r7, #12]
   2d21c:	60b9      	str	r1, [r7, #8]
   2d21e:	0019      	movs	r1, r3
   2d220:	1dfb      	adds	r3, r7, #7
   2d222:	701a      	strb	r2, [r3, #0]
   2d224:	1dbb      	adds	r3, r7, #6
   2d226:	1c0a      	adds	r2, r1, #0
   2d228:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2d22a:	68bb      	ldr	r3, [r7, #8]
   2d22c:	330d      	adds	r3, #13
   2d22e:	1dba      	adds	r2, r7, #6
   2d230:	7812      	ldrb	r2, [r2, #0]
   2d232:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2d234:	68bb      	ldr	r3, [r7, #8]
   2d236:	330b      	adds	r3, #11
   2d238:	220f      	movs	r2, #15
   2d23a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2d23c:	68bb      	ldr	r3, [r7, #8]
   2d23e:	330c      	adds	r3, #12
   2d240:	2200      	movs	r2, #0
   2d242:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2d244:	68bb      	ldr	r3, [r7, #8]
   2d246:	331a      	adds	r3, #26
   2d248:	2200      	movs	r2, #0
   2d24a:	701a      	strb	r2, [r3, #0]
   2d24c:	68bb      	ldr	r3, [r7, #8]
   2d24e:	331b      	adds	r3, #27
   2d250:	2200      	movs	r2, #0
   2d252:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2d254:	1dfb      	adds	r3, r7, #7
   2d256:	781b      	ldrb	r3, [r3, #0]
   2d258:	1e5a      	subs	r2, r3, #1
   2d25a:	0013      	movs	r3, r2
   2d25c:	005b      	lsls	r3, r3, #1
   2d25e:	189b      	adds	r3, r3, r2
   2d260:	009b      	lsls	r3, r3, #2
   2d262:	189b      	adds	r3, r3, r2
   2d264:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2d266:	2316      	movs	r3, #22
   2d268:	18fb      	adds	r3, r7, r3
   2d26a:	2200      	movs	r2, #0
   2d26c:	801a      	strh	r2, [r3, #0]
   2d26e:	2300      	movs	r3, #0
   2d270:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2d272:	2316      	movs	r3, #22
   2d274:	18fb      	adds	r3, r7, r3
   2d276:	881b      	ldrh	r3, [r3, #0]
   2d278:	4a28      	ldr	r2, [pc, #160]	; (2d31c <fit_lfn+0x108>)
   2d27a:	4293      	cmp	r3, r2
   2d27c:	d009      	beq.n	2d292 <fit_lfn+0x7e>
   2d27e:	69fb      	ldr	r3, [r7, #28]
   2d280:	1c5a      	adds	r2, r3, #1
   2d282:	61fa      	str	r2, [r7, #28]
   2d284:	005b      	lsls	r3, r3, #1
   2d286:	68fa      	ldr	r2, [r7, #12]
   2d288:	18d2      	adds	r2, r2, r3
   2d28a:	2316      	movs	r3, #22
   2d28c:	18fb      	adds	r3, r7, r3
   2d28e:	8812      	ldrh	r2, [r2, #0]
   2d290:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2d292:	4a23      	ldr	r2, [pc, #140]	; (2d320 <fit_lfn+0x10c>)
   2d294:	69bb      	ldr	r3, [r7, #24]
   2d296:	18d3      	adds	r3, r2, r3
   2d298:	781b      	ldrb	r3, [r3, #0]
   2d29a:	001a      	movs	r2, r3
   2d29c:	68bb      	ldr	r3, [r7, #8]
   2d29e:	189b      	adds	r3, r3, r2
   2d2a0:	2216      	movs	r2, #22
   2d2a2:	18ba      	adds	r2, r7, r2
   2d2a4:	8812      	ldrh	r2, [r2, #0]
   2d2a6:	b2d2      	uxtb	r2, r2
   2d2a8:	701a      	strb	r2, [r3, #0]
   2d2aa:	4a1d      	ldr	r2, [pc, #116]	; (2d320 <fit_lfn+0x10c>)
   2d2ac:	69bb      	ldr	r3, [r7, #24]
   2d2ae:	18d3      	adds	r3, r2, r3
   2d2b0:	781b      	ldrb	r3, [r3, #0]
   2d2b2:	3301      	adds	r3, #1
   2d2b4:	68ba      	ldr	r2, [r7, #8]
   2d2b6:	18d3      	adds	r3, r2, r3
   2d2b8:	2216      	movs	r2, #22
   2d2ba:	18ba      	adds	r2, r7, r2
   2d2bc:	8812      	ldrh	r2, [r2, #0]
   2d2be:	0a12      	lsrs	r2, r2, #8
   2d2c0:	b292      	uxth	r2, r2
   2d2c2:	b2d2      	uxtb	r2, r2
   2d2c4:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2d2c6:	2316      	movs	r3, #22
   2d2c8:	18fb      	adds	r3, r7, r3
   2d2ca:	881b      	ldrh	r3, [r3, #0]
   2d2cc:	2b00      	cmp	r3, #0
   2d2ce:	d104      	bne.n	2d2da <fit_lfn+0xc6>
   2d2d0:	2316      	movs	r3, #22
   2d2d2:	18fb      	adds	r3, r7, r3
   2d2d4:	2201      	movs	r2, #1
   2d2d6:	4252      	negs	r2, r2
   2d2d8:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2d2da:	69bb      	ldr	r3, [r7, #24]
   2d2dc:	3301      	adds	r3, #1
   2d2de:	61bb      	str	r3, [r7, #24]
   2d2e0:	69bb      	ldr	r3, [r7, #24]
   2d2e2:	2b0c      	cmp	r3, #12
   2d2e4:	d9c5      	bls.n	2d272 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2d2e6:	2316      	movs	r3, #22
   2d2e8:	18fb      	adds	r3, r7, r3
   2d2ea:	881b      	ldrh	r3, [r3, #0]
   2d2ec:	4a0b      	ldr	r2, [pc, #44]	; (2d31c <fit_lfn+0x108>)
   2d2ee:	4293      	cmp	r3, r2
   2d2f0:	d006      	beq.n	2d300 <fit_lfn+0xec>
   2d2f2:	69fb      	ldr	r3, [r7, #28]
   2d2f4:	005b      	lsls	r3, r3, #1
   2d2f6:	68fa      	ldr	r2, [r7, #12]
   2d2f8:	18d3      	adds	r3, r2, r3
   2d2fa:	881b      	ldrh	r3, [r3, #0]
   2d2fc:	2b00      	cmp	r3, #0
   2d2fe:	d105      	bne.n	2d30c <fit_lfn+0xf8>
   2d300:	1dfb      	adds	r3, r7, #7
   2d302:	1dfa      	adds	r2, r7, #7
   2d304:	7812      	ldrb	r2, [r2, #0]
   2d306:	2140      	movs	r1, #64	; 0x40
   2d308:	430a      	orrs	r2, r1
   2d30a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2d30c:	68bb      	ldr	r3, [r7, #8]
   2d30e:	1dfa      	adds	r2, r7, #7
   2d310:	7812      	ldrb	r2, [r2, #0]
   2d312:	701a      	strb	r2, [r3, #0]
}
   2d314:	46c0      	nop			; (mov r8, r8)
   2d316:	46bd      	mov	sp, r7
   2d318:	b008      	add	sp, #32
   2d31a:	bd80      	pop	{r7, pc}
   2d31c:	0000ffff 	.word	0x0000ffff
   2d320:	0003a508 	.word	0x0003a508

0002d324 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2d324:	b580      	push	{r7, lr}
   2d326:	b08a      	sub	sp, #40	; 0x28
   2d328:	af00      	add	r7, sp, #0
   2d32a:	60f8      	str	r0, [r7, #12]
   2d32c:	60b9      	str	r1, [r7, #8]
   2d32e:	607a      	str	r2, [r7, #4]
   2d330:	001a      	movs	r2, r3
   2d332:	1cbb      	adds	r3, r7, #2
   2d334:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2d336:	68b9      	ldr	r1, [r7, #8]
   2d338:	68fb      	ldr	r3, [r7, #12]
   2d33a:	220b      	movs	r2, #11
   2d33c:	0018      	movs	r0, r3
   2d33e:	4b38      	ldr	r3, [pc, #224]	; (2d420 <gen_numname+0xfc>)
   2d340:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2d342:	1cbb      	adds	r3, r7, #2
   2d344:	881b      	ldrh	r3, [r3, #0]
   2d346:	2b05      	cmp	r3, #5
   2d348:	d911      	bls.n	2d36e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2d34a:	1cbb      	adds	r3, r7, #2
   2d34c:	881b      	ldrh	r3, [r3, #0]
   2d34e:	b29a      	uxth	r2, r3
   2d350:	0852      	lsrs	r2, r2, #1
   2d352:	03db      	lsls	r3, r3, #15
   2d354:	4313      	orrs	r3, r2
   2d356:	b299      	uxth	r1, r3
   2d358:	687b      	ldr	r3, [r7, #4]
   2d35a:	1c9a      	adds	r2, r3, #2
   2d35c:	607a      	str	r2, [r7, #4]
   2d35e:	881a      	ldrh	r2, [r3, #0]
   2d360:	1cbb      	adds	r3, r7, #2
   2d362:	188a      	adds	r2, r1, r2
   2d364:	801a      	strh	r2, [r3, #0]
   2d366:	687b      	ldr	r3, [r7, #4]
   2d368:	881b      	ldrh	r3, [r3, #0]
   2d36a:	2b00      	cmp	r3, #0
   2d36c:	d1ed      	bne.n	2d34a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2d36e:	2307      	movs	r3, #7
   2d370:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2d372:	1cbb      	adds	r3, r7, #2
   2d374:	881b      	ldrh	r3, [r3, #0]
   2d376:	b2db      	uxtb	r3, r3
   2d378:	220f      	movs	r2, #15
   2d37a:	4013      	ands	r3, r2
   2d37c:	b2da      	uxtb	r2, r3
   2d37e:	2327      	movs	r3, #39	; 0x27
   2d380:	18fb      	adds	r3, r7, r3
   2d382:	3230      	adds	r2, #48	; 0x30
   2d384:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2d386:	2327      	movs	r3, #39	; 0x27
   2d388:	18fb      	adds	r3, r7, r3
   2d38a:	781b      	ldrb	r3, [r3, #0]
   2d38c:	2b39      	cmp	r3, #57	; 0x39
   2d38e:	d906      	bls.n	2d39e <gen_numname+0x7a>
   2d390:	2327      	movs	r3, #39	; 0x27
   2d392:	18fb      	adds	r3, r7, r3
   2d394:	2227      	movs	r2, #39	; 0x27
   2d396:	18ba      	adds	r2, r7, r2
   2d398:	7812      	ldrb	r2, [r2, #0]
   2d39a:	3207      	adds	r2, #7
   2d39c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2d39e:	6a3b      	ldr	r3, [r7, #32]
   2d3a0:	1e5a      	subs	r2, r3, #1
   2d3a2:	623a      	str	r2, [r7, #32]
   2d3a4:	2214      	movs	r2, #20
   2d3a6:	18ba      	adds	r2, r7, r2
   2d3a8:	2127      	movs	r1, #39	; 0x27
   2d3aa:	1879      	adds	r1, r7, r1
   2d3ac:	7809      	ldrb	r1, [r1, #0]
   2d3ae:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2d3b0:	1cbb      	adds	r3, r7, #2
   2d3b2:	1cba      	adds	r2, r7, #2
   2d3b4:	8812      	ldrh	r2, [r2, #0]
   2d3b6:	0912      	lsrs	r2, r2, #4
   2d3b8:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2d3ba:	1cbb      	adds	r3, r7, #2
   2d3bc:	881b      	ldrh	r3, [r3, #0]
   2d3be:	2b00      	cmp	r3, #0
   2d3c0:	d1d7      	bne.n	2d372 <gen_numname+0x4e>
	ns[i] = '~';
   2d3c2:	2314      	movs	r3, #20
   2d3c4:	18fa      	adds	r2, r7, r3
   2d3c6:	6a3b      	ldr	r3, [r7, #32]
   2d3c8:	18d3      	adds	r3, r2, r3
   2d3ca:	227e      	movs	r2, #126	; 0x7e
   2d3cc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2d3ce:	2300      	movs	r3, #0
   2d3d0:	61fb      	str	r3, [r7, #28]
   2d3d2:	e002      	b.n	2d3da <gen_numname+0xb6>
   2d3d4:	69fb      	ldr	r3, [r7, #28]
   2d3d6:	3301      	adds	r3, #1
   2d3d8:	61fb      	str	r3, [r7, #28]
   2d3da:	69fa      	ldr	r2, [r7, #28]
   2d3dc:	6a3b      	ldr	r3, [r7, #32]
   2d3de:	429a      	cmp	r2, r3
   2d3e0:	d205      	bcs.n	2d3ee <gen_numname+0xca>
   2d3e2:	68fa      	ldr	r2, [r7, #12]
   2d3e4:	69fb      	ldr	r3, [r7, #28]
   2d3e6:	18d3      	adds	r3, r2, r3
   2d3e8:	781b      	ldrb	r3, [r3, #0]
   2d3ea:	2b20      	cmp	r3, #32
   2d3ec:	d1f2      	bne.n	2d3d4 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2d3ee:	69fb      	ldr	r3, [r7, #28]
   2d3f0:	1c5a      	adds	r2, r3, #1
   2d3f2:	61fa      	str	r2, [r7, #28]
   2d3f4:	68fa      	ldr	r2, [r7, #12]
   2d3f6:	18d2      	adds	r2, r2, r3
   2d3f8:	6a3b      	ldr	r3, [r7, #32]
   2d3fa:	2b07      	cmp	r3, #7
   2d3fc:	d806      	bhi.n	2d40c <gen_numname+0xe8>
   2d3fe:	6a3b      	ldr	r3, [r7, #32]
   2d400:	1c59      	adds	r1, r3, #1
   2d402:	6239      	str	r1, [r7, #32]
   2d404:	2114      	movs	r1, #20
   2d406:	1879      	adds	r1, r7, r1
   2d408:	5ccb      	ldrb	r3, [r1, r3]
   2d40a:	e000      	b.n	2d40e <gen_numname+0xea>
   2d40c:	2320      	movs	r3, #32
   2d40e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2d410:	69fb      	ldr	r3, [r7, #28]
   2d412:	2b07      	cmp	r3, #7
   2d414:	d9eb      	bls.n	2d3ee <gen_numname+0xca>
}
   2d416:	46c0      	nop			; (mov r8, r8)
   2d418:	46bd      	mov	sp, r7
   2d41a:	b00a      	add	sp, #40	; 0x28
   2d41c:	bd80      	pop	{r7, pc}
   2d41e:	46c0      	nop			; (mov r8, r8)
   2d420:	0002c4c9 	.word	0x0002c4c9

0002d424 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2d424:	b580      	push	{r7, lr}
   2d426:	b084      	sub	sp, #16
   2d428:	af00      	add	r7, sp, #0
   2d42a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2d42c:	230f      	movs	r3, #15
   2d42e:	18fb      	adds	r3, r7, r3
   2d430:	2200      	movs	r2, #0
   2d432:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2d434:	230b      	movs	r3, #11
   2d436:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2d438:	230f      	movs	r3, #15
   2d43a:	18fb      	adds	r3, r7, r3
   2d43c:	781b      	ldrb	r3, [r3, #0]
   2d43e:	b2da      	uxtb	r2, r3
   2d440:	0852      	lsrs	r2, r2, #1
   2d442:	01db      	lsls	r3, r3, #7
   2d444:	4313      	orrs	r3, r2
   2d446:	b2d9      	uxtb	r1, r3
   2d448:	687b      	ldr	r3, [r7, #4]
   2d44a:	1c5a      	adds	r2, r3, #1
   2d44c:	607a      	str	r2, [r7, #4]
   2d44e:	781a      	ldrb	r2, [r3, #0]
   2d450:	230f      	movs	r3, #15
   2d452:	18fb      	adds	r3, r7, r3
   2d454:	188a      	adds	r2, r1, r2
   2d456:	701a      	strb	r2, [r3, #0]
   2d458:	68bb      	ldr	r3, [r7, #8]
   2d45a:	3b01      	subs	r3, #1
   2d45c:	60bb      	str	r3, [r7, #8]
   2d45e:	68bb      	ldr	r3, [r7, #8]
   2d460:	2b00      	cmp	r3, #0
   2d462:	d1e9      	bne.n	2d438 <sum_sfn+0x14>
	return sum;
   2d464:	230f      	movs	r3, #15
   2d466:	18fb      	adds	r3, r7, r3
   2d468:	781b      	ldrb	r3, [r3, #0]
}
   2d46a:	0018      	movs	r0, r3
   2d46c:	46bd      	mov	sp, r7
   2d46e:	b004      	add	sp, #16
   2d470:	bd80      	pop	{r7, pc}
	...

0002d474 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2d474:	b590      	push	{r4, r7, lr}
   2d476:	b087      	sub	sp, #28
   2d478:	af00      	add	r7, sp, #0
   2d47a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2d47c:	2317      	movs	r3, #23
   2d47e:	18fc      	adds	r4, r7, r3
   2d480:	687b      	ldr	r3, [r7, #4]
   2d482:	2100      	movs	r1, #0
   2d484:	0018      	movs	r0, r3
   2d486:	4b74      	ldr	r3, [pc, #464]	; (2d658 <dir_find+0x1e4>)
   2d488:	4798      	blx	r3
   2d48a:	0003      	movs	r3, r0
   2d48c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d48e:	2317      	movs	r3, #23
   2d490:	18fb      	adds	r3, r7, r3
   2d492:	781b      	ldrb	r3, [r3, #0]
   2d494:	2b00      	cmp	r3, #0
   2d496:	d003      	beq.n	2d4a0 <dir_find+0x2c>
   2d498:	2317      	movs	r3, #23
   2d49a:	18fb      	adds	r3, r7, r3
   2d49c:	781b      	ldrb	r3, [r3, #0]
   2d49e:	e0d6      	b.n	2d64e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2d4a0:	2314      	movs	r3, #20
   2d4a2:	18fb      	adds	r3, r7, r3
   2d4a4:	22ff      	movs	r2, #255	; 0xff
   2d4a6:	701a      	strb	r2, [r3, #0]
   2d4a8:	2315      	movs	r3, #21
   2d4aa:	18fb      	adds	r3, r7, r3
   2d4ac:	2214      	movs	r2, #20
   2d4ae:	18ba      	adds	r2, r7, r2
   2d4b0:	7812      	ldrb	r2, [r2, #0]
   2d4b2:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2d4b4:	687b      	ldr	r3, [r7, #4]
   2d4b6:	681a      	ldr	r2, [r3, #0]
   2d4b8:	687b      	ldr	r3, [r7, #4]
   2d4ba:	691b      	ldr	r3, [r3, #16]
   2d4bc:	2117      	movs	r1, #23
   2d4be:	187c      	adds	r4, r7, r1
   2d4c0:	0019      	movs	r1, r3
   2d4c2:	0010      	movs	r0, r2
   2d4c4:	4b65      	ldr	r3, [pc, #404]	; (2d65c <dir_find+0x1e8>)
   2d4c6:	4798      	blx	r3
   2d4c8:	0003      	movs	r3, r0
   2d4ca:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d4cc:	2317      	movs	r3, #23
   2d4ce:	18fb      	adds	r3, r7, r3
   2d4d0:	781b      	ldrb	r3, [r3, #0]
   2d4d2:	2b00      	cmp	r3, #0
   2d4d4:	d000      	beq.n	2d4d8 <dir_find+0x64>
   2d4d6:	e0b2      	b.n	2d63e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2d4d8:	687b      	ldr	r3, [r7, #4]
   2d4da:	695b      	ldr	r3, [r3, #20]
   2d4dc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2d4de:	2316      	movs	r3, #22
   2d4e0:	18fb      	adds	r3, r7, r3
   2d4e2:	693a      	ldr	r2, [r7, #16]
   2d4e4:	7812      	ldrb	r2, [r2, #0]
   2d4e6:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2d4e8:	2316      	movs	r3, #22
   2d4ea:	18fb      	adds	r3, r7, r3
   2d4ec:	781b      	ldrb	r3, [r3, #0]
   2d4ee:	2b00      	cmp	r3, #0
   2d4f0:	d104      	bne.n	2d4fc <dir_find+0x88>
   2d4f2:	2317      	movs	r3, #23
   2d4f4:	18fb      	adds	r3, r7, r3
   2d4f6:	2204      	movs	r2, #4
   2d4f8:	701a      	strb	r2, [r3, #0]
   2d4fa:	e0a5      	b.n	2d648 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2d4fc:	693b      	ldr	r3, [r7, #16]
   2d4fe:	330b      	adds	r3, #11
   2d500:	781a      	ldrb	r2, [r3, #0]
   2d502:	230f      	movs	r3, #15
   2d504:	18fb      	adds	r3, r7, r3
   2d506:	213f      	movs	r1, #63	; 0x3f
   2d508:	400a      	ands	r2, r1
   2d50a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2d50c:	2316      	movs	r3, #22
   2d50e:	18fb      	adds	r3, r7, r3
   2d510:	781b      	ldrb	r3, [r3, #0]
   2d512:	2be5      	cmp	r3, #229	; 0xe5
   2d514:	d00a      	beq.n	2d52c <dir_find+0xb8>
   2d516:	230f      	movs	r3, #15
   2d518:	18fb      	adds	r3, r7, r3
   2d51a:	781b      	ldrb	r3, [r3, #0]
   2d51c:	2208      	movs	r2, #8
   2d51e:	4013      	ands	r3, r2
   2d520:	d009      	beq.n	2d536 <dir_find+0xc2>
   2d522:	230f      	movs	r3, #15
   2d524:	18fb      	adds	r3, r7, r3
   2d526:	781b      	ldrb	r3, [r3, #0]
   2d528:	2b0f      	cmp	r3, #15
   2d52a:	d004      	beq.n	2d536 <dir_find+0xc2>
			ord = 0xFF;
   2d52c:	2315      	movs	r3, #21
   2d52e:	18fb      	adds	r3, r7, r3
   2d530:	22ff      	movs	r2, #255	; 0xff
   2d532:	701a      	strb	r2, [r3, #0]
   2d534:	e073      	b.n	2d61e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2d536:	230f      	movs	r3, #15
   2d538:	18fb      	adds	r3, r7, r3
   2d53a:	781b      	ldrb	r3, [r3, #0]
   2d53c:	2b0f      	cmp	r3, #15
   2d53e:	d145      	bne.n	2d5cc <dir_find+0x158>
				if (dj->lfn) {
   2d540:	687b      	ldr	r3, [r7, #4]
   2d542:	69db      	ldr	r3, [r3, #28]
   2d544:	2b00      	cmp	r3, #0
   2d546:	d100      	bne.n	2d54a <dir_find+0xd6>
   2d548:	e069      	b.n	2d61e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2d54a:	2316      	movs	r3, #22
   2d54c:	18fb      	adds	r3, r7, r3
   2d54e:	781b      	ldrb	r3, [r3, #0]
   2d550:	2240      	movs	r2, #64	; 0x40
   2d552:	4013      	ands	r3, r2
   2d554:	d016      	beq.n	2d584 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2d556:	2314      	movs	r3, #20
   2d558:	18fb      	adds	r3, r7, r3
   2d55a:	693a      	ldr	r2, [r7, #16]
   2d55c:	7b52      	ldrb	r2, [r2, #13]
   2d55e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2d560:	2316      	movs	r3, #22
   2d562:	18fb      	adds	r3, r7, r3
   2d564:	2216      	movs	r2, #22
   2d566:	18ba      	adds	r2, r7, r2
   2d568:	7812      	ldrb	r2, [r2, #0]
   2d56a:	2140      	movs	r1, #64	; 0x40
   2d56c:	438a      	bics	r2, r1
   2d56e:	701a      	strb	r2, [r3, #0]
   2d570:	2315      	movs	r3, #21
   2d572:	18fb      	adds	r3, r7, r3
   2d574:	2216      	movs	r2, #22
   2d576:	18ba      	adds	r2, r7, r2
   2d578:	7812      	ldrb	r2, [r2, #0]
   2d57a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2d57c:	687b      	ldr	r3, [r7, #4]
   2d57e:	88da      	ldrh	r2, [r3, #6]
   2d580:	687b      	ldr	r3, [r7, #4]
   2d582:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2d584:	2316      	movs	r3, #22
   2d586:	18fa      	adds	r2, r7, r3
   2d588:	2315      	movs	r3, #21
   2d58a:	18fb      	adds	r3, r7, r3
   2d58c:	7812      	ldrb	r2, [r2, #0]
   2d58e:	781b      	ldrb	r3, [r3, #0]
   2d590:	429a      	cmp	r2, r3
   2d592:	d116      	bne.n	2d5c2 <dir_find+0x14e>
   2d594:	693b      	ldr	r3, [r7, #16]
   2d596:	330d      	adds	r3, #13
   2d598:	781b      	ldrb	r3, [r3, #0]
   2d59a:	2214      	movs	r2, #20
   2d59c:	18ba      	adds	r2, r7, r2
   2d59e:	7812      	ldrb	r2, [r2, #0]
   2d5a0:	429a      	cmp	r2, r3
   2d5a2:	d10e      	bne.n	2d5c2 <dir_find+0x14e>
   2d5a4:	687b      	ldr	r3, [r7, #4]
   2d5a6:	69db      	ldr	r3, [r3, #28]
   2d5a8:	693a      	ldr	r2, [r7, #16]
   2d5aa:	0011      	movs	r1, r2
   2d5ac:	0018      	movs	r0, r3
   2d5ae:	4b2c      	ldr	r3, [pc, #176]	; (2d660 <dir_find+0x1ec>)
   2d5b0:	4798      	blx	r3
   2d5b2:	1e03      	subs	r3, r0, #0
   2d5b4:	d005      	beq.n	2d5c2 <dir_find+0x14e>
   2d5b6:	2315      	movs	r3, #21
   2d5b8:	18fb      	adds	r3, r7, r3
   2d5ba:	781b      	ldrb	r3, [r3, #0]
   2d5bc:	3b01      	subs	r3, #1
   2d5be:	b2da      	uxtb	r2, r3
   2d5c0:	e000      	b.n	2d5c4 <dir_find+0x150>
   2d5c2:	22ff      	movs	r2, #255	; 0xff
   2d5c4:	2315      	movs	r3, #21
   2d5c6:	18fb      	adds	r3, r7, r3
   2d5c8:	701a      	strb	r2, [r3, #0]
   2d5ca:	e028      	b.n	2d61e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d5cc:	2315      	movs	r3, #21
   2d5ce:	18fb      	adds	r3, r7, r3
   2d5d0:	781b      	ldrb	r3, [r3, #0]
   2d5d2:	2b00      	cmp	r3, #0
   2d5d4:	d10a      	bne.n	2d5ec <dir_find+0x178>
   2d5d6:	693b      	ldr	r3, [r7, #16]
   2d5d8:	0018      	movs	r0, r3
   2d5da:	4b22      	ldr	r3, [pc, #136]	; (2d664 <dir_find+0x1f0>)
   2d5dc:	4798      	blx	r3
   2d5de:	0003      	movs	r3, r0
   2d5e0:	001a      	movs	r2, r3
   2d5e2:	2314      	movs	r3, #20
   2d5e4:	18fb      	adds	r3, r7, r3
   2d5e6:	781b      	ldrb	r3, [r3, #0]
   2d5e8:	4293      	cmp	r3, r2
   2d5ea:	d02a      	beq.n	2d642 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2d5ec:	2315      	movs	r3, #21
   2d5ee:	18fb      	adds	r3, r7, r3
   2d5f0:	22ff      	movs	r2, #255	; 0xff
   2d5f2:	701a      	strb	r2, [r3, #0]
   2d5f4:	687b      	ldr	r3, [r7, #4]
   2d5f6:	2201      	movs	r2, #1
   2d5f8:	4252      	negs	r2, r2
   2d5fa:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d5fc:	687b      	ldr	r3, [r7, #4]
   2d5fe:	699b      	ldr	r3, [r3, #24]
   2d600:	330b      	adds	r3, #11
   2d602:	781b      	ldrb	r3, [r3, #0]
   2d604:	001a      	movs	r2, r3
   2d606:	2301      	movs	r3, #1
   2d608:	4013      	ands	r3, r2
   2d60a:	d108      	bne.n	2d61e <dir_find+0x1aa>
   2d60c:	687b      	ldr	r3, [r7, #4]
   2d60e:	6999      	ldr	r1, [r3, #24]
   2d610:	693b      	ldr	r3, [r7, #16]
   2d612:	220b      	movs	r2, #11
   2d614:	0018      	movs	r0, r3
   2d616:	4b14      	ldr	r3, [pc, #80]	; (2d668 <dir_find+0x1f4>)
   2d618:	4798      	blx	r3
   2d61a:	1e03      	subs	r3, r0, #0
   2d61c:	d013      	beq.n	2d646 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2d61e:	2317      	movs	r3, #23
   2d620:	18fc      	adds	r4, r7, r3
   2d622:	687b      	ldr	r3, [r7, #4]
   2d624:	2100      	movs	r1, #0
   2d626:	0018      	movs	r0, r3
   2d628:	4b10      	ldr	r3, [pc, #64]	; (2d66c <dir_find+0x1f8>)
   2d62a:	4798      	blx	r3
   2d62c:	0003      	movs	r3, r0
   2d62e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d630:	2317      	movs	r3, #23
   2d632:	18fb      	adds	r3, r7, r3
   2d634:	781b      	ldrb	r3, [r3, #0]
   2d636:	2b00      	cmp	r3, #0
   2d638:	d100      	bne.n	2d63c <dir_find+0x1c8>
   2d63a:	e73b      	b.n	2d4b4 <dir_find+0x40>
   2d63c:	e004      	b.n	2d648 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2d63e:	46c0      	nop			; (mov r8, r8)
   2d640:	e002      	b.n	2d648 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d642:	46c0      	nop			; (mov r8, r8)
   2d644:	e000      	b.n	2d648 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d646:	46c0      	nop			; (mov r8, r8)

	return res;
   2d648:	2317      	movs	r3, #23
   2d64a:	18fb      	adds	r3, r7, r3
   2d64c:	781b      	ldrb	r3, [r3, #0]
}
   2d64e:	0018      	movs	r0, r3
   2d650:	46bd      	mov	sp, r7
   2d652:	b007      	add	sp, #28
   2d654:	bd90      	pop	{r4, r7, pc}
   2d656:	46c0      	nop			; (mov r8, r8)
   2d658:	0002cdf1 	.word	0x0002cdf1
   2d65c:	0002c5ad 	.word	0x0002c5ad
   2d660:	0002d111 	.word	0x0002d111
   2d664:	0002d425 	.word	0x0002d425
   2d668:	0002c531 	.word	0x0002c531
   2d66c:	0002cf21 	.word	0x0002cf21

0002d670 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2d670:	b590      	push	{r4, r7, lr}
   2d672:	b08d      	sub	sp, #52	; 0x34
   2d674:	af00      	add	r7, sp, #0
   2d676:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2d678:	687b      	ldr	r3, [r7, #4]
   2d67a:	699b      	ldr	r3, [r3, #24]
   2d67c:	627b      	str	r3, [r7, #36]	; 0x24
   2d67e:	687b      	ldr	r3, [r7, #4]
   2d680:	69db      	ldr	r3, [r3, #28]
   2d682:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2d684:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d686:	230c      	movs	r3, #12
   2d688:	18fb      	adds	r3, r7, r3
   2d68a:	220c      	movs	r2, #12
   2d68c:	0018      	movs	r0, r3
   2d68e:	4bc8      	ldr	r3, [pc, #800]	; (2d9b0 <dir_register+0x340>)
   2d690:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2d692:	230c      	movs	r3, #12
   2d694:	18fb      	adds	r3, r7, r3
   2d696:	7adb      	ldrb	r3, [r3, #11]
   2d698:	001a      	movs	r2, r3
   2d69a:	2301      	movs	r3, #1
   2d69c:	4013      	ands	r3, r2
   2d69e:	d048      	beq.n	2d732 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d6a2:	330b      	adds	r3, #11
   2d6a4:	2200      	movs	r2, #0
   2d6a6:	701a      	strb	r2, [r3, #0]
   2d6a8:	687b      	ldr	r3, [r7, #4]
   2d6aa:	2200      	movs	r2, #0
   2d6ac:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2d6ae:	232c      	movs	r3, #44	; 0x2c
   2d6b0:	18fb      	adds	r3, r7, r3
   2d6b2:	2201      	movs	r2, #1
   2d6b4:	801a      	strh	r2, [r3, #0]
   2d6b6:	e01c      	b.n	2d6f2 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2d6b8:	232c      	movs	r3, #44	; 0x2c
   2d6ba:	18fb      	adds	r3, r7, r3
   2d6bc:	881b      	ldrh	r3, [r3, #0]
   2d6be:	6a3a      	ldr	r2, [r7, #32]
   2d6c0:	210c      	movs	r1, #12
   2d6c2:	1879      	adds	r1, r7, r1
   2d6c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d6c6:	4cbb      	ldr	r4, [pc, #748]	; (2d9b4 <dir_register+0x344>)
   2d6c8:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2d6ca:	232f      	movs	r3, #47	; 0x2f
   2d6cc:	18fc      	adds	r4, r7, r3
   2d6ce:	687b      	ldr	r3, [r7, #4]
   2d6d0:	0018      	movs	r0, r3
   2d6d2:	4bb9      	ldr	r3, [pc, #740]	; (2d9b8 <dir_register+0x348>)
   2d6d4:	4798      	blx	r3
   2d6d6:	0003      	movs	r3, r0
   2d6d8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d6da:	232f      	movs	r3, #47	; 0x2f
   2d6dc:	18fb      	adds	r3, r7, r3
   2d6de:	781b      	ldrb	r3, [r3, #0]
   2d6e0:	2b00      	cmp	r3, #0
   2d6e2:	d10c      	bne.n	2d6fe <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2d6e4:	232c      	movs	r3, #44	; 0x2c
   2d6e6:	18fb      	adds	r3, r7, r3
   2d6e8:	881a      	ldrh	r2, [r3, #0]
   2d6ea:	232c      	movs	r3, #44	; 0x2c
   2d6ec:	18fb      	adds	r3, r7, r3
   2d6ee:	3201      	adds	r2, #1
   2d6f0:	801a      	strh	r2, [r3, #0]
   2d6f2:	232c      	movs	r3, #44	; 0x2c
   2d6f4:	18fb      	adds	r3, r7, r3
   2d6f6:	881b      	ldrh	r3, [r3, #0]
   2d6f8:	2b63      	cmp	r3, #99	; 0x63
   2d6fa:	d9dd      	bls.n	2d6b8 <dir_register+0x48>
   2d6fc:	e000      	b.n	2d700 <dir_register+0x90>
			if (res != FR_OK) break;
   2d6fe:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2d700:	232c      	movs	r3, #44	; 0x2c
   2d702:	18fb      	adds	r3, r7, r3
   2d704:	881b      	ldrh	r3, [r3, #0]
   2d706:	2b64      	cmp	r3, #100	; 0x64
   2d708:	d101      	bne.n	2d70e <dir_register+0x9e>
   2d70a:	2307      	movs	r3, #7
   2d70c:	e14c      	b.n	2d9a8 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2d70e:	232f      	movs	r3, #47	; 0x2f
   2d710:	18fb      	adds	r3, r7, r3
   2d712:	781b      	ldrb	r3, [r3, #0]
   2d714:	2b04      	cmp	r3, #4
   2d716:	d003      	beq.n	2d720 <dir_register+0xb0>
   2d718:	232f      	movs	r3, #47	; 0x2f
   2d71a:	18fb      	adds	r3, r7, r3
   2d71c:	781b      	ldrb	r3, [r3, #0]
   2d71e:	e143      	b.n	2d9a8 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d722:	330b      	adds	r3, #11
   2d724:	220c      	movs	r2, #12
   2d726:	18ba      	adds	r2, r7, r2
   2d728:	7ad2      	ldrb	r2, [r2, #11]
   2d72a:	701a      	strb	r2, [r3, #0]
   2d72c:	687b      	ldr	r3, [r7, #4]
   2d72e:	6a3a      	ldr	r2, [r7, #32]
   2d730:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2d732:	230c      	movs	r3, #12
   2d734:	18fb      	adds	r3, r7, r3
   2d736:	7adb      	ldrb	r3, [r3, #11]
   2d738:	001a      	movs	r2, r3
   2d73a:	2302      	movs	r3, #2
   2d73c:	4013      	ands	r3, r2
   2d73e:	d023      	beq.n	2d788 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2d740:	232a      	movs	r3, #42	; 0x2a
   2d742:	18fb      	adds	r3, r7, r3
   2d744:	2200      	movs	r2, #0
   2d746:	801a      	strh	r2, [r3, #0]
   2d748:	e006      	b.n	2d758 <dir_register+0xe8>
   2d74a:	232a      	movs	r3, #42	; 0x2a
   2d74c:	18fb      	adds	r3, r7, r3
   2d74e:	881a      	ldrh	r2, [r3, #0]
   2d750:	232a      	movs	r3, #42	; 0x2a
   2d752:	18fb      	adds	r3, r7, r3
   2d754:	3201      	adds	r2, #1
   2d756:	801a      	strh	r2, [r3, #0]
   2d758:	232a      	movs	r3, #42	; 0x2a
   2d75a:	18fb      	adds	r3, r7, r3
   2d75c:	881b      	ldrh	r3, [r3, #0]
   2d75e:	005b      	lsls	r3, r3, #1
   2d760:	6a3a      	ldr	r2, [r7, #32]
   2d762:	18d3      	adds	r3, r2, r3
   2d764:	881b      	ldrh	r3, [r3, #0]
   2d766:	2b00      	cmp	r3, #0
   2d768:	d1ef      	bne.n	2d74a <dir_register+0xda>
		ne = (ne + 25) / 13;
   2d76a:	232a      	movs	r3, #42	; 0x2a
   2d76c:	18fb      	adds	r3, r7, r3
   2d76e:	881b      	ldrh	r3, [r3, #0]
   2d770:	3319      	adds	r3, #25
   2d772:	001a      	movs	r2, r3
   2d774:	4b91      	ldr	r3, [pc, #580]	; (2d9bc <dir_register+0x34c>)
   2d776:	210d      	movs	r1, #13
   2d778:	0010      	movs	r0, r2
   2d77a:	4798      	blx	r3
   2d77c:	0003      	movs	r3, r0
   2d77e:	001a      	movs	r2, r3
   2d780:	232a      	movs	r3, #42	; 0x2a
   2d782:	18fb      	adds	r3, r7, r3
   2d784:	801a      	strh	r2, [r3, #0]
   2d786:	e003      	b.n	2d790 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2d788:	232a      	movs	r3, #42	; 0x2a
   2d78a:	18fb      	adds	r3, r7, r3
   2d78c:	2201      	movs	r2, #1
   2d78e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2d790:	232f      	movs	r3, #47	; 0x2f
   2d792:	18fc      	adds	r4, r7, r3
   2d794:	687b      	ldr	r3, [r7, #4]
   2d796:	2100      	movs	r1, #0
   2d798:	0018      	movs	r0, r3
   2d79a:	4b89      	ldr	r3, [pc, #548]	; (2d9c0 <dir_register+0x350>)
   2d79c:	4798      	blx	r3
   2d79e:	0003      	movs	r3, r0
   2d7a0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d7a2:	232f      	movs	r3, #47	; 0x2f
   2d7a4:	18fb      	adds	r3, r7, r3
   2d7a6:	781b      	ldrb	r3, [r3, #0]
   2d7a8:	2b00      	cmp	r3, #0
   2d7aa:	d003      	beq.n	2d7b4 <dir_register+0x144>
   2d7ac:	232f      	movs	r3, #47	; 0x2f
   2d7ae:	18fb      	adds	r3, r7, r3
   2d7b0:	781b      	ldrb	r3, [r3, #0]
   2d7b2:	e0f9      	b.n	2d9a8 <dir_register+0x338>
	n = is = 0;
   2d7b4:	2328      	movs	r3, #40	; 0x28
   2d7b6:	18fb      	adds	r3, r7, r3
   2d7b8:	2200      	movs	r2, #0
   2d7ba:	801a      	strh	r2, [r3, #0]
   2d7bc:	232c      	movs	r3, #44	; 0x2c
   2d7be:	18fb      	adds	r3, r7, r3
   2d7c0:	2228      	movs	r2, #40	; 0x28
   2d7c2:	18ba      	adds	r2, r7, r2
   2d7c4:	8812      	ldrh	r2, [r2, #0]
   2d7c6:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2d7c8:	687b      	ldr	r3, [r7, #4]
   2d7ca:	681a      	ldr	r2, [r3, #0]
   2d7cc:	687b      	ldr	r3, [r7, #4]
   2d7ce:	691b      	ldr	r3, [r3, #16]
   2d7d0:	212f      	movs	r1, #47	; 0x2f
   2d7d2:	187c      	adds	r4, r7, r1
   2d7d4:	0019      	movs	r1, r3
   2d7d6:	0010      	movs	r0, r2
   2d7d8:	4b7a      	ldr	r3, [pc, #488]	; (2d9c4 <dir_register+0x354>)
   2d7da:	4798      	blx	r3
   2d7dc:	0003      	movs	r3, r0
   2d7de:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d7e0:	232f      	movs	r3, #47	; 0x2f
   2d7e2:	18fb      	adds	r3, r7, r3
   2d7e4:	781b      	ldrb	r3, [r3, #0]
   2d7e6:	2b00      	cmp	r3, #0
   2d7e8:	d13c      	bne.n	2d864 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2d7ea:	687b      	ldr	r3, [r7, #4]
   2d7ec:	695a      	ldr	r2, [r3, #20]
   2d7ee:	231f      	movs	r3, #31
   2d7f0:	18fb      	adds	r3, r7, r3
   2d7f2:	7812      	ldrb	r2, [r2, #0]
   2d7f4:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2d7f6:	231f      	movs	r3, #31
   2d7f8:	18fb      	adds	r3, r7, r3
   2d7fa:	781b      	ldrb	r3, [r3, #0]
   2d7fc:	2be5      	cmp	r3, #229	; 0xe5
   2d7fe:	d004      	beq.n	2d80a <dir_register+0x19a>
   2d800:	231f      	movs	r3, #31
   2d802:	18fb      	adds	r3, r7, r3
   2d804:	781b      	ldrb	r3, [r3, #0]
   2d806:	2b00      	cmp	r3, #0
   2d808:	d119      	bne.n	2d83e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2d80a:	232c      	movs	r3, #44	; 0x2c
   2d80c:	18fb      	adds	r3, r7, r3
   2d80e:	881b      	ldrh	r3, [r3, #0]
   2d810:	2b00      	cmp	r3, #0
   2d812:	d104      	bne.n	2d81e <dir_register+0x1ae>
   2d814:	2328      	movs	r3, #40	; 0x28
   2d816:	18fb      	adds	r3, r7, r3
   2d818:	687a      	ldr	r2, [r7, #4]
   2d81a:	88d2      	ldrh	r2, [r2, #6]
   2d81c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2d81e:	232c      	movs	r3, #44	; 0x2c
   2d820:	18fb      	adds	r3, r7, r3
   2d822:	222c      	movs	r2, #44	; 0x2c
   2d824:	18ba      	adds	r2, r7, r2
   2d826:	8812      	ldrh	r2, [r2, #0]
   2d828:	3201      	adds	r2, #1
   2d82a:	801a      	strh	r2, [r3, #0]
   2d82c:	232c      	movs	r3, #44	; 0x2c
   2d82e:	18fa      	adds	r2, r7, r3
   2d830:	232a      	movs	r3, #42	; 0x2a
   2d832:	18fb      	adds	r3, r7, r3
   2d834:	8812      	ldrh	r2, [r2, #0]
   2d836:	881b      	ldrh	r3, [r3, #0]
   2d838:	429a      	cmp	r2, r3
   2d83a:	d104      	bne.n	2d846 <dir_register+0x1d6>
   2d83c:	e013      	b.n	2d866 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d83e:	232c      	movs	r3, #44	; 0x2c
   2d840:	18fb      	adds	r3, r7, r3
   2d842:	2200      	movs	r2, #0
   2d844:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d846:	232f      	movs	r3, #47	; 0x2f
   2d848:	18fc      	adds	r4, r7, r3
   2d84a:	687b      	ldr	r3, [r7, #4]
   2d84c:	2101      	movs	r1, #1
   2d84e:	0018      	movs	r0, r3
   2d850:	4b5d      	ldr	r3, [pc, #372]	; (2d9c8 <dir_register+0x358>)
   2d852:	4798      	blx	r3
   2d854:	0003      	movs	r3, r0
   2d856:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d858:	232f      	movs	r3, #47	; 0x2f
   2d85a:	18fb      	adds	r3, r7, r3
   2d85c:	781b      	ldrb	r3, [r3, #0]
   2d85e:	2b00      	cmp	r3, #0
   2d860:	d0b2      	beq.n	2d7c8 <dir_register+0x158>
   2d862:	e000      	b.n	2d866 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d864:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d866:	232f      	movs	r3, #47	; 0x2f
   2d868:	18fb      	adds	r3, r7, r3
   2d86a:	781b      	ldrb	r3, [r3, #0]
   2d86c:	2b00      	cmp	r3, #0
   2d86e:	d163      	bne.n	2d938 <dir_register+0x2c8>
   2d870:	232a      	movs	r3, #42	; 0x2a
   2d872:	18fb      	adds	r3, r7, r3
   2d874:	881b      	ldrh	r3, [r3, #0]
   2d876:	2b01      	cmp	r3, #1
   2d878:	d95e      	bls.n	2d938 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d87a:	232f      	movs	r3, #47	; 0x2f
   2d87c:	18fc      	adds	r4, r7, r3
   2d87e:	2328      	movs	r3, #40	; 0x28
   2d880:	18fb      	adds	r3, r7, r3
   2d882:	881a      	ldrh	r2, [r3, #0]
   2d884:	687b      	ldr	r3, [r7, #4]
   2d886:	0011      	movs	r1, r2
   2d888:	0018      	movs	r0, r3
   2d88a:	4b4d      	ldr	r3, [pc, #308]	; (2d9c0 <dir_register+0x350>)
   2d88c:	4798      	blx	r3
   2d88e:	0003      	movs	r3, r0
   2d890:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d892:	232f      	movs	r3, #47	; 0x2f
   2d894:	18fb      	adds	r3, r7, r3
   2d896:	781b      	ldrb	r3, [r3, #0]
   2d898:	2b00      	cmp	r3, #0
   2d89a:	d14d      	bne.n	2d938 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d89c:	687b      	ldr	r3, [r7, #4]
   2d89e:	699b      	ldr	r3, [r3, #24]
   2d8a0:	221e      	movs	r2, #30
   2d8a2:	18bc      	adds	r4, r7, r2
   2d8a4:	0018      	movs	r0, r3
   2d8a6:	4b49      	ldr	r3, [pc, #292]	; (2d9cc <dir_register+0x35c>)
   2d8a8:	4798      	blx	r3
   2d8aa:	0003      	movs	r3, r0
   2d8ac:	7023      	strb	r3, [r4, #0]
			ne--;
   2d8ae:	232a      	movs	r3, #42	; 0x2a
   2d8b0:	18fb      	adds	r3, r7, r3
   2d8b2:	881a      	ldrh	r2, [r3, #0]
   2d8b4:	232a      	movs	r3, #42	; 0x2a
   2d8b6:	18fb      	adds	r3, r7, r3
   2d8b8:	3a01      	subs	r2, #1
   2d8ba:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d8bc:	687b      	ldr	r3, [r7, #4]
   2d8be:	681a      	ldr	r2, [r3, #0]
   2d8c0:	687b      	ldr	r3, [r7, #4]
   2d8c2:	691b      	ldr	r3, [r3, #16]
   2d8c4:	212f      	movs	r1, #47	; 0x2f
   2d8c6:	187c      	adds	r4, r7, r1
   2d8c8:	0019      	movs	r1, r3
   2d8ca:	0010      	movs	r0, r2
   2d8cc:	4b3d      	ldr	r3, [pc, #244]	; (2d9c4 <dir_register+0x354>)
   2d8ce:	4798      	blx	r3
   2d8d0:	0003      	movs	r3, r0
   2d8d2:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d8d4:	232f      	movs	r3, #47	; 0x2f
   2d8d6:	18fb      	adds	r3, r7, r3
   2d8d8:	781b      	ldrb	r3, [r3, #0]
   2d8da:	2b00      	cmp	r3, #0
   2d8dc:	d12b      	bne.n	2d936 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d8de:	687b      	ldr	r3, [r7, #4]
   2d8e0:	69d8      	ldr	r0, [r3, #28]
   2d8e2:	687b      	ldr	r3, [r7, #4]
   2d8e4:	6959      	ldr	r1, [r3, #20]
   2d8e6:	232a      	movs	r3, #42	; 0x2a
   2d8e8:	18fb      	adds	r3, r7, r3
   2d8ea:	881b      	ldrh	r3, [r3, #0]
   2d8ec:	b2da      	uxtb	r2, r3
   2d8ee:	231e      	movs	r3, #30
   2d8f0:	18fb      	adds	r3, r7, r3
   2d8f2:	781b      	ldrb	r3, [r3, #0]
   2d8f4:	4c36      	ldr	r4, [pc, #216]	; (2d9d0 <dir_register+0x360>)
   2d8f6:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d8f8:	687b      	ldr	r3, [r7, #4]
   2d8fa:	681b      	ldr	r3, [r3, #0]
   2d8fc:	2201      	movs	r2, #1
   2d8fe:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d900:	232f      	movs	r3, #47	; 0x2f
   2d902:	18fc      	adds	r4, r7, r3
   2d904:	687b      	ldr	r3, [r7, #4]
   2d906:	2100      	movs	r1, #0
   2d908:	0018      	movs	r0, r3
   2d90a:	4b2f      	ldr	r3, [pc, #188]	; (2d9c8 <dir_register+0x358>)
   2d90c:	4798      	blx	r3
   2d90e:	0003      	movs	r3, r0
   2d910:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d912:	232f      	movs	r3, #47	; 0x2f
   2d914:	18fb      	adds	r3, r7, r3
   2d916:	781b      	ldrb	r3, [r3, #0]
   2d918:	2b00      	cmp	r3, #0
   2d91a:	d10d      	bne.n	2d938 <dir_register+0x2c8>
   2d91c:	232a      	movs	r3, #42	; 0x2a
   2d91e:	18fb      	adds	r3, r7, r3
   2d920:	222a      	movs	r2, #42	; 0x2a
   2d922:	18ba      	adds	r2, r7, r2
   2d924:	8812      	ldrh	r2, [r2, #0]
   2d926:	3a01      	subs	r2, #1
   2d928:	801a      	strh	r2, [r3, #0]
   2d92a:	232a      	movs	r3, #42	; 0x2a
   2d92c:	18fb      	adds	r3, r7, r3
   2d92e:	881b      	ldrh	r3, [r3, #0]
   2d930:	2b00      	cmp	r3, #0
   2d932:	d1c3      	bne.n	2d8bc <dir_register+0x24c>
   2d934:	e000      	b.n	2d938 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d936:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d938:	232f      	movs	r3, #47	; 0x2f
   2d93a:	18fb      	adds	r3, r7, r3
   2d93c:	781b      	ldrb	r3, [r3, #0]
   2d93e:	2b00      	cmp	r3, #0
   2d940:	d12f      	bne.n	2d9a2 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d942:	687b      	ldr	r3, [r7, #4]
   2d944:	681a      	ldr	r2, [r3, #0]
   2d946:	687b      	ldr	r3, [r7, #4]
   2d948:	691b      	ldr	r3, [r3, #16]
   2d94a:	212f      	movs	r1, #47	; 0x2f
   2d94c:	187c      	adds	r4, r7, r1
   2d94e:	0019      	movs	r1, r3
   2d950:	0010      	movs	r0, r2
   2d952:	4b1c      	ldr	r3, [pc, #112]	; (2d9c4 <dir_register+0x354>)
   2d954:	4798      	blx	r3
   2d956:	0003      	movs	r3, r0
   2d958:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d95a:	232f      	movs	r3, #47	; 0x2f
   2d95c:	18fb      	adds	r3, r7, r3
   2d95e:	781b      	ldrb	r3, [r3, #0]
   2d960:	2b00      	cmp	r3, #0
   2d962:	d11e      	bne.n	2d9a2 <dir_register+0x332>
			dir = dj->dir;
   2d964:	687b      	ldr	r3, [r7, #4]
   2d966:	695b      	ldr	r3, [r3, #20]
   2d968:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2d96a:	69bb      	ldr	r3, [r7, #24]
   2d96c:	2220      	movs	r2, #32
   2d96e:	2100      	movs	r1, #0
   2d970:	0018      	movs	r0, r3
   2d972:	4b18      	ldr	r3, [pc, #96]	; (2d9d4 <dir_register+0x364>)
   2d974:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2d976:	687b      	ldr	r3, [r7, #4]
   2d978:	6999      	ldr	r1, [r3, #24]
   2d97a:	69bb      	ldr	r3, [r7, #24]
   2d97c:	220b      	movs	r2, #11
   2d97e:	0018      	movs	r0, r3
   2d980:	4b0b      	ldr	r3, [pc, #44]	; (2d9b0 <dir_register+0x340>)
   2d982:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2d984:	69bb      	ldr	r3, [r7, #24]
   2d986:	330c      	adds	r3, #12
   2d988:	001a      	movs	r2, r3
   2d98a:	687b      	ldr	r3, [r7, #4]
   2d98c:	699b      	ldr	r3, [r3, #24]
   2d98e:	330b      	adds	r3, #11
   2d990:	781b      	ldrb	r3, [r3, #0]
   2d992:	2118      	movs	r1, #24
   2d994:	400b      	ands	r3, r1
   2d996:	b2db      	uxtb	r3, r3
   2d998:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2d99a:	687b      	ldr	r3, [r7, #4]
   2d99c:	681b      	ldr	r3, [r3, #0]
   2d99e:	2201      	movs	r2, #1
   2d9a0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2d9a2:	232f      	movs	r3, #47	; 0x2f
   2d9a4:	18fb      	adds	r3, r7, r3
   2d9a6:	781b      	ldrb	r3, [r3, #0]
}
   2d9a8:	0018      	movs	r0, r3
   2d9aa:	46bd      	mov	sp, r7
   2d9ac:	b00d      	add	sp, #52	; 0x34
   2d9ae:	bd90      	pop	{r4, r7, pc}
   2d9b0:	0002c4c9 	.word	0x0002c4c9
   2d9b4:	0002d325 	.word	0x0002d325
   2d9b8:	0002d475 	.word	0x0002d475
   2d9bc:	000338b9 	.word	0x000338b9
   2d9c0:	0002cdf1 	.word	0x0002cdf1
   2d9c4:	0002c5ad 	.word	0x0002c5ad
   2d9c8:	0002cf21 	.word	0x0002cf21
   2d9cc:	0002d425 	.word	0x0002d425
   2d9d0:	0002d215 	.word	0x0002d215
   2d9d4:	0002c501 	.word	0x0002c501

0002d9d8 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d9d8:	b590      	push	{r4, r7, lr}
   2d9da:	b08b      	sub	sp, #44	; 0x2c
   2d9dc:	af00      	add	r7, sp, #0
   2d9de:	6078      	str	r0, [r7, #4]
   2d9e0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d9e2:	683b      	ldr	r3, [r7, #0]
   2d9e4:	681b      	ldr	r3, [r3, #0]
   2d9e6:	613b      	str	r3, [r7, #16]
   2d9e8:	e002      	b.n	2d9f0 <create_name+0x18>
   2d9ea:	693b      	ldr	r3, [r7, #16]
   2d9ec:	3301      	adds	r3, #1
   2d9ee:	613b      	str	r3, [r7, #16]
   2d9f0:	693b      	ldr	r3, [r7, #16]
   2d9f2:	781b      	ldrb	r3, [r3, #0]
   2d9f4:	2b2f      	cmp	r3, #47	; 0x2f
   2d9f6:	d0f8      	beq.n	2d9ea <create_name+0x12>
   2d9f8:	693b      	ldr	r3, [r7, #16]
   2d9fa:	781b      	ldrb	r3, [r3, #0]
   2d9fc:	2b5c      	cmp	r3, #92	; 0x5c
   2d9fe:	d0f4      	beq.n	2d9ea <create_name+0x12>
	lfn = dj->lfn;
   2da00:	687b      	ldr	r3, [r7, #4]
   2da02:	69db      	ldr	r3, [r3, #28]
   2da04:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2da06:	2300      	movs	r3, #0
   2da08:	617b      	str	r3, [r7, #20]
   2da0a:	697b      	ldr	r3, [r7, #20]
   2da0c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2da0e:	69bb      	ldr	r3, [r7, #24]
   2da10:	1c5a      	adds	r2, r3, #1
   2da12:	61ba      	str	r2, [r7, #24]
   2da14:	693a      	ldr	r2, [r7, #16]
   2da16:	18d3      	adds	r3, r2, r3
   2da18:	781a      	ldrb	r2, [r3, #0]
   2da1a:	2324      	movs	r3, #36	; 0x24
   2da1c:	18fb      	adds	r3, r7, r3
   2da1e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2da20:	2324      	movs	r3, #36	; 0x24
   2da22:	18fb      	adds	r3, r7, r3
   2da24:	881b      	ldrh	r3, [r3, #0]
   2da26:	2b1f      	cmp	r3, #31
   2da28:	d944      	bls.n	2dab4 <create_name+0xdc>
   2da2a:	2324      	movs	r3, #36	; 0x24
   2da2c:	18fb      	adds	r3, r7, r3
   2da2e:	881b      	ldrh	r3, [r3, #0]
   2da30:	2b2f      	cmp	r3, #47	; 0x2f
   2da32:	d03f      	beq.n	2dab4 <create_name+0xdc>
   2da34:	2324      	movs	r3, #36	; 0x24
   2da36:	18fb      	adds	r3, r7, r3
   2da38:	881b      	ldrh	r3, [r3, #0]
   2da3a:	2b5c      	cmp	r3, #92	; 0x5c
   2da3c:	d03a      	beq.n	2dab4 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2da3e:	697b      	ldr	r3, [r7, #20]
   2da40:	2bfe      	cmp	r3, #254	; 0xfe
   2da42:	d901      	bls.n	2da48 <create_name+0x70>
			return FR_INVALID_NAME;
   2da44:	2306      	movs	r3, #6
   2da46:	e1e7      	b.n	2de18 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2da48:	2324      	movs	r3, #36	; 0x24
   2da4a:	18fb      	adds	r3, r7, r3
   2da4c:	2224      	movs	r2, #36	; 0x24
   2da4e:	18ba      	adds	r2, r7, r2
   2da50:	8812      	ldrh	r2, [r2, #0]
   2da52:	21ff      	movs	r1, #255	; 0xff
   2da54:	400a      	ands	r2, r1
   2da56:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2da58:	2324      	movs	r3, #36	; 0x24
   2da5a:	18fc      	adds	r4, r7, r3
   2da5c:	2324      	movs	r3, #36	; 0x24
   2da5e:	18fb      	adds	r3, r7, r3
   2da60:	881b      	ldrh	r3, [r3, #0]
   2da62:	2101      	movs	r1, #1
   2da64:	0018      	movs	r0, r3
   2da66:	4bba      	ldr	r3, [pc, #744]	; (2dd50 <create_name+0x378>)
   2da68:	4798      	blx	r3
   2da6a:	0003      	movs	r3, r0
   2da6c:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2da6e:	2324      	movs	r3, #36	; 0x24
   2da70:	18fb      	adds	r3, r7, r3
   2da72:	881b      	ldrh	r3, [r3, #0]
   2da74:	2b00      	cmp	r3, #0
   2da76:	d101      	bne.n	2da7c <create_name+0xa4>
   2da78:	2306      	movs	r3, #6
   2da7a:	e1cd      	b.n	2de18 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2da7c:	2324      	movs	r3, #36	; 0x24
   2da7e:	18fb      	adds	r3, r7, r3
   2da80:	881b      	ldrh	r3, [r3, #0]
   2da82:	2b7f      	cmp	r3, #127	; 0x7f
   2da84:	d80b      	bhi.n	2da9e <create_name+0xc6>
   2da86:	2324      	movs	r3, #36	; 0x24
   2da88:	18fb      	adds	r3, r7, r3
   2da8a:	881a      	ldrh	r2, [r3, #0]
   2da8c:	4bb1      	ldr	r3, [pc, #708]	; (2dd54 <create_name+0x37c>)
   2da8e:	0011      	movs	r1, r2
   2da90:	0018      	movs	r0, r3
   2da92:	4bb1      	ldr	r3, [pc, #708]	; (2dd58 <create_name+0x380>)
   2da94:	4798      	blx	r3
   2da96:	1e03      	subs	r3, r0, #0
   2da98:	d001      	beq.n	2da9e <create_name+0xc6>
			return FR_INVALID_NAME;
   2da9a:	2306      	movs	r3, #6
   2da9c:	e1bc      	b.n	2de18 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2da9e:	697b      	ldr	r3, [r7, #20]
   2daa0:	1c5a      	adds	r2, r3, #1
   2daa2:	617a      	str	r2, [r7, #20]
   2daa4:	005b      	lsls	r3, r3, #1
   2daa6:	68fa      	ldr	r2, [r7, #12]
   2daa8:	18d3      	adds	r3, r2, r3
   2daaa:	2224      	movs	r2, #36	; 0x24
   2daac:	18ba      	adds	r2, r7, r2
   2daae:	8812      	ldrh	r2, [r2, #0]
   2dab0:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2dab2:	e7ac      	b.n	2da0e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2dab4:	693a      	ldr	r2, [r7, #16]
   2dab6:	69bb      	ldr	r3, [r7, #24]
   2dab8:	18d2      	adds	r2, r2, r3
   2daba:	683b      	ldr	r3, [r7, #0]
   2dabc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2dabe:	2324      	movs	r3, #36	; 0x24
   2dac0:	18fb      	adds	r3, r7, r3
   2dac2:	881b      	ldrh	r3, [r3, #0]
   2dac4:	2b1f      	cmp	r3, #31
   2dac6:	d801      	bhi.n	2dacc <create_name+0xf4>
   2dac8:	2204      	movs	r2, #4
   2daca:	e000      	b.n	2dace <create_name+0xf6>
   2dacc:	2200      	movs	r2, #0
   2dace:	2326      	movs	r3, #38	; 0x26
   2dad0:	18fb      	adds	r3, r7, r3
   2dad2:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2dad4:	e017      	b.n	2db06 <create_name+0x12e>
		w = lfn[di-1];
   2dad6:	697b      	ldr	r3, [r7, #20]
   2dad8:	4aa0      	ldr	r2, [pc, #640]	; (2dd5c <create_name+0x384>)
   2dada:	4694      	mov	ip, r2
   2dadc:	4463      	add	r3, ip
   2dade:	005b      	lsls	r3, r3, #1
   2dae0:	68fa      	ldr	r2, [r7, #12]
   2dae2:	18d2      	adds	r2, r2, r3
   2dae4:	2324      	movs	r3, #36	; 0x24
   2dae6:	18fb      	adds	r3, r7, r3
   2dae8:	8812      	ldrh	r2, [r2, #0]
   2daea:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2daec:	2324      	movs	r3, #36	; 0x24
   2daee:	18fb      	adds	r3, r7, r3
   2daf0:	881b      	ldrh	r3, [r3, #0]
   2daf2:	2b20      	cmp	r3, #32
   2daf4:	d004      	beq.n	2db00 <create_name+0x128>
   2daf6:	2324      	movs	r3, #36	; 0x24
   2daf8:	18fb      	adds	r3, r7, r3
   2dafa:	881b      	ldrh	r3, [r3, #0]
   2dafc:	2b2e      	cmp	r3, #46	; 0x2e
   2dafe:	d106      	bne.n	2db0e <create_name+0x136>
		di--;
   2db00:	697b      	ldr	r3, [r7, #20]
   2db02:	3b01      	subs	r3, #1
   2db04:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2db06:	697b      	ldr	r3, [r7, #20]
   2db08:	2b00      	cmp	r3, #0
   2db0a:	d1e4      	bne.n	2dad6 <create_name+0xfe>
   2db0c:	e000      	b.n	2db10 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2db0e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2db10:	697b      	ldr	r3, [r7, #20]
   2db12:	2b00      	cmp	r3, #0
   2db14:	d101      	bne.n	2db1a <create_name+0x142>
   2db16:	2306      	movs	r3, #6
   2db18:	e17e      	b.n	2de18 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2db1a:	697b      	ldr	r3, [r7, #20]
   2db1c:	005b      	lsls	r3, r3, #1
   2db1e:	68fa      	ldr	r2, [r7, #12]
   2db20:	18d3      	adds	r3, r2, r3
   2db22:	2200      	movs	r2, #0
   2db24:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2db26:	687b      	ldr	r3, [r7, #4]
   2db28:	699b      	ldr	r3, [r3, #24]
   2db2a:	220b      	movs	r2, #11
   2db2c:	2120      	movs	r1, #32
   2db2e:	0018      	movs	r0, r3
   2db30:	4b8b      	ldr	r3, [pc, #556]	; (2dd60 <create_name+0x388>)
   2db32:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2db34:	2300      	movs	r3, #0
   2db36:	61bb      	str	r3, [r7, #24]
   2db38:	e002      	b.n	2db40 <create_name+0x168>
   2db3a:	69bb      	ldr	r3, [r7, #24]
   2db3c:	3301      	adds	r3, #1
   2db3e:	61bb      	str	r3, [r7, #24]
   2db40:	69bb      	ldr	r3, [r7, #24]
   2db42:	005b      	lsls	r3, r3, #1
   2db44:	68fa      	ldr	r2, [r7, #12]
   2db46:	18d3      	adds	r3, r2, r3
   2db48:	881b      	ldrh	r3, [r3, #0]
   2db4a:	2b20      	cmp	r3, #32
   2db4c:	d0f5      	beq.n	2db3a <create_name+0x162>
   2db4e:	69bb      	ldr	r3, [r7, #24]
   2db50:	005b      	lsls	r3, r3, #1
   2db52:	68fa      	ldr	r2, [r7, #12]
   2db54:	18d3      	adds	r3, r2, r3
   2db56:	881b      	ldrh	r3, [r3, #0]
   2db58:	2b2e      	cmp	r3, #46	; 0x2e
   2db5a:	d0ee      	beq.n	2db3a <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2db5c:	69bb      	ldr	r3, [r7, #24]
   2db5e:	2b00      	cmp	r3, #0
   2db60:	d00b      	beq.n	2db7a <create_name+0x1a2>
   2db62:	2326      	movs	r3, #38	; 0x26
   2db64:	18fb      	adds	r3, r7, r3
   2db66:	2226      	movs	r2, #38	; 0x26
   2db68:	18ba      	adds	r2, r7, r2
   2db6a:	7812      	ldrb	r2, [r2, #0]
   2db6c:	2103      	movs	r1, #3
   2db6e:	430a      	orrs	r2, r1
   2db70:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2db72:	e002      	b.n	2db7a <create_name+0x1a2>
   2db74:	697b      	ldr	r3, [r7, #20]
   2db76:	3b01      	subs	r3, #1
   2db78:	617b      	str	r3, [r7, #20]
   2db7a:	697b      	ldr	r3, [r7, #20]
   2db7c:	2b00      	cmp	r3, #0
   2db7e:	d009      	beq.n	2db94 <create_name+0x1bc>
   2db80:	697b      	ldr	r3, [r7, #20]
   2db82:	4a76      	ldr	r2, [pc, #472]	; (2dd5c <create_name+0x384>)
   2db84:	4694      	mov	ip, r2
   2db86:	4463      	add	r3, ip
   2db88:	005b      	lsls	r3, r3, #1
   2db8a:	68fa      	ldr	r2, [r7, #12]
   2db8c:	18d3      	adds	r3, r2, r3
   2db8e:	881b      	ldrh	r3, [r3, #0]
   2db90:	2b2e      	cmp	r3, #46	; 0x2e
   2db92:	d1ef      	bne.n	2db74 <create_name+0x19c>

	b = i = 0; ni = 8;
   2db94:	2300      	movs	r3, #0
   2db96:	623b      	str	r3, [r7, #32]
   2db98:	2327      	movs	r3, #39	; 0x27
   2db9a:	18fb      	adds	r3, r7, r3
   2db9c:	2200      	movs	r2, #0
   2db9e:	701a      	strb	r2, [r3, #0]
   2dba0:	2308      	movs	r3, #8
   2dba2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2dba4:	69bb      	ldr	r3, [r7, #24]
   2dba6:	1c5a      	adds	r2, r3, #1
   2dba8:	61ba      	str	r2, [r7, #24]
   2dbaa:	005b      	lsls	r3, r3, #1
   2dbac:	68fa      	ldr	r2, [r7, #12]
   2dbae:	18d2      	adds	r2, r2, r3
   2dbb0:	2324      	movs	r3, #36	; 0x24
   2dbb2:	18fb      	adds	r3, r7, r3
   2dbb4:	8812      	ldrh	r2, [r2, #0]
   2dbb6:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2dbb8:	2324      	movs	r3, #36	; 0x24
   2dbba:	18fb      	adds	r3, r7, r3
   2dbbc:	881b      	ldrh	r3, [r3, #0]
   2dbbe:	2b00      	cmp	r3, #0
   2dbc0:	d100      	bne.n	2dbc4 <create_name+0x1ec>
   2dbc2:	e0c3      	b.n	2dd4c <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2dbc4:	2324      	movs	r3, #36	; 0x24
   2dbc6:	18fb      	adds	r3, r7, r3
   2dbc8:	881b      	ldrh	r3, [r3, #0]
   2dbca:	2b20      	cmp	r3, #32
   2dbcc:	d008      	beq.n	2dbe0 <create_name+0x208>
   2dbce:	2324      	movs	r3, #36	; 0x24
   2dbd0:	18fb      	adds	r3, r7, r3
   2dbd2:	881b      	ldrh	r3, [r3, #0]
   2dbd4:	2b2e      	cmp	r3, #46	; 0x2e
   2dbd6:	d10c      	bne.n	2dbf2 <create_name+0x21a>
   2dbd8:	69ba      	ldr	r2, [r7, #24]
   2dbda:	697b      	ldr	r3, [r7, #20]
   2dbdc:	429a      	cmp	r2, r3
   2dbde:	d008      	beq.n	2dbf2 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2dbe0:	2326      	movs	r3, #38	; 0x26
   2dbe2:	18fb      	adds	r3, r7, r3
   2dbe4:	2226      	movs	r2, #38	; 0x26
   2dbe6:	18ba      	adds	r2, r7, r2
   2dbe8:	7812      	ldrb	r2, [r2, #0]
   2dbea:	2103      	movs	r1, #3
   2dbec:	430a      	orrs	r2, r1
   2dbee:	701a      	strb	r2, [r3, #0]
   2dbf0:	e0ab      	b.n	2dd4a <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2dbf2:	6a3a      	ldr	r2, [r7, #32]
   2dbf4:	69fb      	ldr	r3, [r7, #28]
   2dbf6:	429a      	cmp	r2, r3
   2dbf8:	d203      	bcs.n	2dc02 <create_name+0x22a>
   2dbfa:	69ba      	ldr	r2, [r7, #24]
   2dbfc:	697b      	ldr	r3, [r7, #20]
   2dbfe:	429a      	cmp	r2, r3
   2dc00:	d12a      	bne.n	2dc58 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2dc02:	69fb      	ldr	r3, [r7, #28]
   2dc04:	2b0b      	cmp	r3, #11
   2dc06:	d108      	bne.n	2dc1a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2dc08:	2326      	movs	r3, #38	; 0x26
   2dc0a:	18fb      	adds	r3, r7, r3
   2dc0c:	2226      	movs	r2, #38	; 0x26
   2dc0e:	18ba      	adds	r2, r7, r2
   2dc10:	7812      	ldrb	r2, [r2, #0]
   2dc12:	2103      	movs	r1, #3
   2dc14:	430a      	orrs	r2, r1
   2dc16:	701a      	strb	r2, [r3, #0]
   2dc18:	e0a9      	b.n	2dd6e <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2dc1a:	69ba      	ldr	r2, [r7, #24]
   2dc1c:	697b      	ldr	r3, [r7, #20]
   2dc1e:	429a      	cmp	r2, r3
   2dc20:	d007      	beq.n	2dc32 <create_name+0x25a>
   2dc22:	2326      	movs	r3, #38	; 0x26
   2dc24:	18fb      	adds	r3, r7, r3
   2dc26:	2226      	movs	r2, #38	; 0x26
   2dc28:	18ba      	adds	r2, r7, r2
   2dc2a:	7812      	ldrb	r2, [r2, #0]
   2dc2c:	2103      	movs	r1, #3
   2dc2e:	430a      	orrs	r2, r1
   2dc30:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2dc32:	69ba      	ldr	r2, [r7, #24]
   2dc34:	697b      	ldr	r3, [r7, #20]
   2dc36:	429a      	cmp	r2, r3
   2dc38:	d900      	bls.n	2dc3c <create_name+0x264>
   2dc3a:	e097      	b.n	2dd6c <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2dc3c:	697b      	ldr	r3, [r7, #20]
   2dc3e:	61bb      	str	r3, [r7, #24]
   2dc40:	2308      	movs	r3, #8
   2dc42:	623b      	str	r3, [r7, #32]
   2dc44:	230b      	movs	r3, #11
   2dc46:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2dc48:	2327      	movs	r3, #39	; 0x27
   2dc4a:	18fb      	adds	r3, r7, r3
   2dc4c:	2227      	movs	r2, #39	; 0x27
   2dc4e:	18ba      	adds	r2, r7, r2
   2dc50:	7812      	ldrb	r2, [r2, #0]
   2dc52:	0092      	lsls	r2, r2, #2
   2dc54:	701a      	strb	r2, [r3, #0]
   2dc56:	e078      	b.n	2dd4a <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2dc58:	2324      	movs	r3, #36	; 0x24
   2dc5a:	18fb      	adds	r3, r7, r3
   2dc5c:	881b      	ldrh	r3, [r3, #0]
   2dc5e:	2b7f      	cmp	r3, #127	; 0x7f
   2dc60:	d920      	bls.n	2dca4 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2dc62:	2324      	movs	r3, #36	; 0x24
   2dc64:	18fc      	adds	r4, r7, r3
   2dc66:	2324      	movs	r3, #36	; 0x24
   2dc68:	18fb      	adds	r3, r7, r3
   2dc6a:	881b      	ldrh	r3, [r3, #0]
   2dc6c:	2100      	movs	r1, #0
   2dc6e:	0018      	movs	r0, r3
   2dc70:	4b37      	ldr	r3, [pc, #220]	; (2dd50 <create_name+0x378>)
   2dc72:	4798      	blx	r3
   2dc74:	0003      	movs	r3, r0
   2dc76:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2dc78:	2324      	movs	r3, #36	; 0x24
   2dc7a:	18fb      	adds	r3, r7, r3
   2dc7c:	881b      	ldrh	r3, [r3, #0]
   2dc7e:	2b00      	cmp	r3, #0
   2dc80:	d008      	beq.n	2dc94 <create_name+0x2bc>
   2dc82:	2324      	movs	r3, #36	; 0x24
   2dc84:	18fb      	adds	r3, r7, r3
   2dc86:	881b      	ldrh	r3, [r3, #0]
   2dc88:	3b80      	subs	r3, #128	; 0x80
   2dc8a:	4a36      	ldr	r2, [pc, #216]	; (2dd64 <create_name+0x38c>)
   2dc8c:	5cd2      	ldrb	r2, [r2, r3]
   2dc8e:	2324      	movs	r3, #36	; 0x24
   2dc90:	18fb      	adds	r3, r7, r3
   2dc92:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2dc94:	2326      	movs	r3, #38	; 0x26
   2dc96:	18fb      	adds	r3, r7, r3
   2dc98:	2226      	movs	r2, #38	; 0x26
   2dc9a:	18ba      	adds	r2, r7, r2
   2dc9c:	7812      	ldrb	r2, [r2, #0]
   2dc9e:	2102      	movs	r1, #2
   2dca0:	430a      	orrs	r2, r1
   2dca2:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2dca4:	2324      	movs	r3, #36	; 0x24
   2dca6:	18fb      	adds	r3, r7, r3
   2dca8:	881b      	ldrh	r3, [r3, #0]
   2dcaa:	2b00      	cmp	r3, #0
   2dcac:	d009      	beq.n	2dcc2 <create_name+0x2ea>
   2dcae:	2324      	movs	r3, #36	; 0x24
   2dcb0:	18fb      	adds	r3, r7, r3
   2dcb2:	881a      	ldrh	r2, [r3, #0]
   2dcb4:	4b2c      	ldr	r3, [pc, #176]	; (2dd68 <create_name+0x390>)
   2dcb6:	0011      	movs	r1, r2
   2dcb8:	0018      	movs	r0, r3
   2dcba:	4b27      	ldr	r3, [pc, #156]	; (2dd58 <create_name+0x380>)
   2dcbc:	4798      	blx	r3
   2dcbe:	1e03      	subs	r3, r0, #0
   2dcc0:	d00c      	beq.n	2dcdc <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2dcc2:	2324      	movs	r3, #36	; 0x24
   2dcc4:	18fb      	adds	r3, r7, r3
   2dcc6:	225f      	movs	r2, #95	; 0x5f
   2dcc8:	801a      	strh	r2, [r3, #0]
   2dcca:	2326      	movs	r3, #38	; 0x26
   2dccc:	18fb      	adds	r3, r7, r3
   2dcce:	2226      	movs	r2, #38	; 0x26
   2dcd0:	18ba      	adds	r2, r7, r2
   2dcd2:	7812      	ldrb	r2, [r2, #0]
   2dcd4:	2103      	movs	r1, #3
   2dcd6:	430a      	orrs	r2, r1
   2dcd8:	701a      	strb	r2, [r3, #0]
   2dcda:	e02b      	b.n	2dd34 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2dcdc:	2324      	movs	r3, #36	; 0x24
   2dcde:	18fb      	adds	r3, r7, r3
   2dce0:	881b      	ldrh	r3, [r3, #0]
   2dce2:	2b40      	cmp	r3, #64	; 0x40
   2dce4:	d90d      	bls.n	2dd02 <create_name+0x32a>
   2dce6:	2324      	movs	r3, #36	; 0x24
   2dce8:	18fb      	adds	r3, r7, r3
   2dcea:	881b      	ldrh	r3, [r3, #0]
   2dcec:	2b5a      	cmp	r3, #90	; 0x5a
   2dcee:	d808      	bhi.n	2dd02 <create_name+0x32a>
					b |= 2;
   2dcf0:	2327      	movs	r3, #39	; 0x27
   2dcf2:	18fb      	adds	r3, r7, r3
   2dcf4:	2227      	movs	r2, #39	; 0x27
   2dcf6:	18ba      	adds	r2, r7, r2
   2dcf8:	7812      	ldrb	r2, [r2, #0]
   2dcfa:	2102      	movs	r1, #2
   2dcfc:	430a      	orrs	r2, r1
   2dcfe:	701a      	strb	r2, [r3, #0]
   2dd00:	e018      	b.n	2dd34 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2dd02:	2324      	movs	r3, #36	; 0x24
   2dd04:	18fb      	adds	r3, r7, r3
   2dd06:	881b      	ldrh	r3, [r3, #0]
   2dd08:	2b60      	cmp	r3, #96	; 0x60
   2dd0a:	d913      	bls.n	2dd34 <create_name+0x35c>
   2dd0c:	2324      	movs	r3, #36	; 0x24
   2dd0e:	18fb      	adds	r3, r7, r3
   2dd10:	881b      	ldrh	r3, [r3, #0]
   2dd12:	2b7a      	cmp	r3, #122	; 0x7a
   2dd14:	d80e      	bhi.n	2dd34 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2dd16:	2327      	movs	r3, #39	; 0x27
   2dd18:	18fb      	adds	r3, r7, r3
   2dd1a:	2227      	movs	r2, #39	; 0x27
   2dd1c:	18ba      	adds	r2, r7, r2
   2dd1e:	7812      	ldrb	r2, [r2, #0]
   2dd20:	2101      	movs	r1, #1
   2dd22:	430a      	orrs	r2, r1
   2dd24:	701a      	strb	r2, [r3, #0]
   2dd26:	2324      	movs	r3, #36	; 0x24
   2dd28:	18fb      	adds	r3, r7, r3
   2dd2a:	2224      	movs	r2, #36	; 0x24
   2dd2c:	18ba      	adds	r2, r7, r2
   2dd2e:	8812      	ldrh	r2, [r2, #0]
   2dd30:	3a20      	subs	r2, #32
   2dd32:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2dd34:	687b      	ldr	r3, [r7, #4]
   2dd36:	699a      	ldr	r2, [r3, #24]
   2dd38:	6a3b      	ldr	r3, [r7, #32]
   2dd3a:	1c59      	adds	r1, r3, #1
   2dd3c:	6239      	str	r1, [r7, #32]
   2dd3e:	18d3      	adds	r3, r2, r3
   2dd40:	2224      	movs	r2, #36	; 0x24
   2dd42:	18ba      	adds	r2, r7, r2
   2dd44:	8812      	ldrh	r2, [r2, #0]
   2dd46:	b2d2      	uxtb	r2, r2
   2dd48:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2dd4a:	e72b      	b.n	2dba4 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2dd4c:	46c0      	nop			; (mov r8, r8)
   2dd4e:	e00e      	b.n	2dd6e <create_name+0x396>
   2dd50:	0002f111 	.word	0x0002f111
   2dd54:	0003a518 	.word	0x0003a518
   2dd58:	0002c57b 	.word	0x0002c57b
   2dd5c:	7fffffff 	.word	0x7fffffff
   2dd60:	0002c501 	.word	0x0002c501
   2dd64:	0003a560 	.word	0x0003a560
   2dd68:	0003a524 	.word	0x0003a524
			if (si > di) break;			/* No extension */
   2dd6c:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2dd6e:	687b      	ldr	r3, [r7, #4]
   2dd70:	699b      	ldr	r3, [r3, #24]
   2dd72:	781b      	ldrb	r3, [r3, #0]
   2dd74:	2be5      	cmp	r3, #229	; 0xe5
   2dd76:	d103      	bne.n	2dd80 <create_name+0x3a8>
   2dd78:	687b      	ldr	r3, [r7, #4]
   2dd7a:	699b      	ldr	r3, [r3, #24]
   2dd7c:	2205      	movs	r2, #5
   2dd7e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2dd80:	69fb      	ldr	r3, [r7, #28]
   2dd82:	2b08      	cmp	r3, #8
   2dd84:	d106      	bne.n	2dd94 <create_name+0x3bc>
   2dd86:	2327      	movs	r3, #39	; 0x27
   2dd88:	18fb      	adds	r3, r7, r3
   2dd8a:	2227      	movs	r2, #39	; 0x27
   2dd8c:	18ba      	adds	r2, r7, r2
   2dd8e:	7812      	ldrb	r2, [r2, #0]
   2dd90:	0092      	lsls	r2, r2, #2
   2dd92:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2dd94:	2327      	movs	r3, #39	; 0x27
   2dd96:	18fb      	adds	r3, r7, r3
   2dd98:	781b      	ldrb	r3, [r3, #0]
   2dd9a:	220c      	movs	r2, #12
   2dd9c:	4013      	ands	r3, r2
   2dd9e:	2b0c      	cmp	r3, #12
   2dda0:	d006      	beq.n	2ddb0 <create_name+0x3d8>
   2dda2:	2327      	movs	r3, #39	; 0x27
   2dda4:	18fb      	adds	r3, r7, r3
   2dda6:	781b      	ldrb	r3, [r3, #0]
   2dda8:	2203      	movs	r2, #3
   2ddaa:	4013      	ands	r3, r2
   2ddac:	2b03      	cmp	r3, #3
   2ddae:	d107      	bne.n	2ddc0 <create_name+0x3e8>
		cf |= NS_LFN;
   2ddb0:	2326      	movs	r3, #38	; 0x26
   2ddb2:	18fb      	adds	r3, r7, r3
   2ddb4:	2226      	movs	r2, #38	; 0x26
   2ddb6:	18ba      	adds	r2, r7, r2
   2ddb8:	7812      	ldrb	r2, [r2, #0]
   2ddba:	2102      	movs	r1, #2
   2ddbc:	430a      	orrs	r2, r1
   2ddbe:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2ddc0:	2326      	movs	r3, #38	; 0x26
   2ddc2:	18fb      	adds	r3, r7, r3
   2ddc4:	781b      	ldrb	r3, [r3, #0]
   2ddc6:	2202      	movs	r2, #2
   2ddc8:	4013      	ands	r3, r2
   2ddca:	d11d      	bne.n	2de08 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2ddcc:	2327      	movs	r3, #39	; 0x27
   2ddce:	18fb      	adds	r3, r7, r3
   2ddd0:	781b      	ldrb	r3, [r3, #0]
   2ddd2:	2203      	movs	r2, #3
   2ddd4:	4013      	ands	r3, r2
   2ddd6:	2b01      	cmp	r3, #1
   2ddd8:	d107      	bne.n	2ddea <create_name+0x412>
   2ddda:	2326      	movs	r3, #38	; 0x26
   2dddc:	18fb      	adds	r3, r7, r3
   2ddde:	2226      	movs	r2, #38	; 0x26
   2dde0:	18ba      	adds	r2, r7, r2
   2dde2:	7812      	ldrb	r2, [r2, #0]
   2dde4:	2110      	movs	r1, #16
   2dde6:	430a      	orrs	r2, r1
   2dde8:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2ddea:	2327      	movs	r3, #39	; 0x27
   2ddec:	18fb      	adds	r3, r7, r3
   2ddee:	781b      	ldrb	r3, [r3, #0]
   2ddf0:	220c      	movs	r2, #12
   2ddf2:	4013      	ands	r3, r2
   2ddf4:	2b04      	cmp	r3, #4
   2ddf6:	d107      	bne.n	2de08 <create_name+0x430>
   2ddf8:	2326      	movs	r3, #38	; 0x26
   2ddfa:	18fb      	adds	r3, r7, r3
   2ddfc:	2226      	movs	r2, #38	; 0x26
   2ddfe:	18ba      	adds	r2, r7, r2
   2de00:	7812      	ldrb	r2, [r2, #0]
   2de02:	2108      	movs	r1, #8
   2de04:	430a      	orrs	r2, r1
   2de06:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2de08:	687b      	ldr	r3, [r7, #4]
   2de0a:	699b      	ldr	r3, [r3, #24]
   2de0c:	330b      	adds	r3, #11
   2de0e:	2226      	movs	r2, #38	; 0x26
   2de10:	18ba      	adds	r2, r7, r2
   2de12:	7812      	ldrb	r2, [r2, #0]
   2de14:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2de16:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2de18:	0018      	movs	r0, r3
   2de1a:	46bd      	mov	sp, r7
   2de1c:	b00b      	add	sp, #44	; 0x2c
   2de1e:	bd90      	pop	{r4, r7, pc}

0002de20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2de20:	b590      	push	{r4, r7, lr}
   2de22:	b085      	sub	sp, #20
   2de24:	af00      	add	r7, sp, #0
   2de26:	6078      	str	r0, [r7, #4]
   2de28:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2de2a:	683b      	ldr	r3, [r7, #0]
   2de2c:	781b      	ldrb	r3, [r3, #0]
   2de2e:	2b2f      	cmp	r3, #47	; 0x2f
   2de30:	d003      	beq.n	2de3a <follow_path+0x1a>
   2de32:	683b      	ldr	r3, [r7, #0]
   2de34:	781b      	ldrb	r3, [r3, #0]
   2de36:	2b5c      	cmp	r3, #92	; 0x5c
   2de38:	d102      	bne.n	2de40 <follow_path+0x20>
		path++;
   2de3a:	683b      	ldr	r3, [r7, #0]
   2de3c:	3301      	adds	r3, #1
   2de3e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2de40:	687b      	ldr	r3, [r7, #4]
   2de42:	2200      	movs	r2, #0
   2de44:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2de46:	683b      	ldr	r3, [r7, #0]
   2de48:	781b      	ldrb	r3, [r3, #0]
   2de4a:	2b1f      	cmp	r3, #31
   2de4c:	d80c      	bhi.n	2de68 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2de4e:	230f      	movs	r3, #15
   2de50:	18fc      	adds	r4, r7, r3
   2de52:	687b      	ldr	r3, [r7, #4]
   2de54:	2100      	movs	r1, #0
   2de56:	0018      	movs	r0, r3
   2de58:	4b3c      	ldr	r3, [pc, #240]	; (2df4c <follow_path+0x12c>)
   2de5a:	4798      	blx	r3
   2de5c:	0003      	movs	r3, r0
   2de5e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2de60:	687b      	ldr	r3, [r7, #4]
   2de62:	2200      	movs	r2, #0
   2de64:	615a      	str	r2, [r3, #20]
   2de66:	e06a      	b.n	2df3e <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2de68:	230f      	movs	r3, #15
   2de6a:	18fc      	adds	r4, r7, r3
   2de6c:	003a      	movs	r2, r7
   2de6e:	687b      	ldr	r3, [r7, #4]
   2de70:	0011      	movs	r1, r2
   2de72:	0018      	movs	r0, r3
   2de74:	4b36      	ldr	r3, [pc, #216]	; (2df50 <follow_path+0x130>)
   2de76:	4798      	blx	r3
   2de78:	0003      	movs	r3, r0
   2de7a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2de7c:	230f      	movs	r3, #15
   2de7e:	18fb      	adds	r3, r7, r3
   2de80:	781b      	ldrb	r3, [r3, #0]
   2de82:	2b00      	cmp	r3, #0
   2de84:	d154      	bne.n	2df30 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2de86:	230f      	movs	r3, #15
   2de88:	18fc      	adds	r4, r7, r3
   2de8a:	687b      	ldr	r3, [r7, #4]
   2de8c:	0018      	movs	r0, r3
   2de8e:	4b31      	ldr	r3, [pc, #196]	; (2df54 <follow_path+0x134>)
   2de90:	4798      	blx	r3
   2de92:	0003      	movs	r3, r0
   2de94:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2de96:	687b      	ldr	r3, [r7, #4]
   2de98:	699a      	ldr	r2, [r3, #24]
   2de9a:	230e      	movs	r3, #14
   2de9c:	18fb      	adds	r3, r7, r3
   2de9e:	7ad2      	ldrb	r2, [r2, #11]
   2dea0:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2dea2:	230f      	movs	r3, #15
   2dea4:	18fb      	adds	r3, r7, r3
   2dea6:	781b      	ldrb	r3, [r3, #0]
   2dea8:	2b00      	cmp	r3, #0
   2deaa:	d00f      	beq.n	2decc <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2deac:	230f      	movs	r3, #15
   2deae:	18fb      	adds	r3, r7, r3
   2deb0:	781b      	ldrb	r3, [r3, #0]
   2deb2:	2b04      	cmp	r3, #4
   2deb4:	d13e      	bne.n	2df34 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2deb6:	230e      	movs	r3, #14
   2deb8:	18fb      	adds	r3, r7, r3
   2deba:	781b      	ldrb	r3, [r3, #0]
   2debc:	2204      	movs	r2, #4
   2debe:	4013      	ands	r3, r2
   2dec0:	d13a      	bne.n	2df38 <follow_path+0x118>
   2dec2:	230f      	movs	r3, #15
   2dec4:	18fb      	adds	r3, r7, r3
   2dec6:	2205      	movs	r2, #5
   2dec8:	701a      	strb	r2, [r3, #0]
				}
				break;
   2deca:	e035      	b.n	2df38 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2decc:	230e      	movs	r3, #14
   2dece:	18fb      	adds	r3, r7, r3
   2ded0:	781b      	ldrb	r3, [r3, #0]
   2ded2:	2204      	movs	r2, #4
   2ded4:	4013      	ands	r3, r2
   2ded6:	d131      	bne.n	2df3c <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2ded8:	687b      	ldr	r3, [r7, #4]
   2deda:	695b      	ldr	r3, [r3, #20]
   2dedc:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2dede:	68bb      	ldr	r3, [r7, #8]
   2dee0:	330b      	adds	r3, #11
   2dee2:	781b      	ldrb	r3, [r3, #0]
   2dee4:	001a      	movs	r2, r3
   2dee6:	2310      	movs	r3, #16
   2dee8:	4013      	ands	r3, r2
   2deea:	d104      	bne.n	2def6 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2deec:	230f      	movs	r3, #15
   2deee:	18fb      	adds	r3, r7, r3
   2def0:	2205      	movs	r2, #5
   2def2:	701a      	strb	r2, [r3, #0]
   2def4:	e023      	b.n	2df3e <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2def6:	68bb      	ldr	r3, [r7, #8]
   2def8:	3315      	adds	r3, #21
   2defa:	781b      	ldrb	r3, [r3, #0]
   2defc:	021b      	lsls	r3, r3, #8
   2defe:	b21a      	sxth	r2, r3
   2df00:	68bb      	ldr	r3, [r7, #8]
   2df02:	3314      	adds	r3, #20
   2df04:	781b      	ldrb	r3, [r3, #0]
   2df06:	b21b      	sxth	r3, r3
   2df08:	4313      	orrs	r3, r2
   2df0a:	b21b      	sxth	r3, r3
   2df0c:	b29b      	uxth	r3, r3
   2df0e:	041b      	lsls	r3, r3, #16
   2df10:	68ba      	ldr	r2, [r7, #8]
   2df12:	321b      	adds	r2, #27
   2df14:	7812      	ldrb	r2, [r2, #0]
   2df16:	0212      	lsls	r2, r2, #8
   2df18:	b211      	sxth	r1, r2
   2df1a:	68ba      	ldr	r2, [r7, #8]
   2df1c:	321a      	adds	r2, #26
   2df1e:	7812      	ldrb	r2, [r2, #0]
   2df20:	b212      	sxth	r2, r2
   2df22:	430a      	orrs	r2, r1
   2df24:	b212      	sxth	r2, r2
   2df26:	b292      	uxth	r2, r2
   2df28:	431a      	orrs	r2, r3
   2df2a:	687b      	ldr	r3, [r7, #4]
   2df2c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2df2e:	e79b      	b.n	2de68 <follow_path+0x48>
			if (res != FR_OK) break;
   2df30:	46c0      	nop			; (mov r8, r8)
   2df32:	e004      	b.n	2df3e <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2df34:	46c0      	nop			; (mov r8, r8)
   2df36:	e002      	b.n	2df3e <follow_path+0x11e>
				break;
   2df38:	46c0      	nop			; (mov r8, r8)
   2df3a:	e000      	b.n	2df3e <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2df3c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2df3e:	230f      	movs	r3, #15
   2df40:	18fb      	adds	r3, r7, r3
   2df42:	781b      	ldrb	r3, [r3, #0]
}
   2df44:	0018      	movs	r0, r3
   2df46:	46bd      	mov	sp, r7
   2df48:	b005      	add	sp, #20
   2df4a:	bd90      	pop	{r4, r7, pc}
   2df4c:	0002cdf1 	.word	0x0002cdf1
   2df50:	0002d9d9 	.word	0x0002d9d9
   2df54:	0002d475 	.word	0x0002d475

0002df58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2df58:	b590      	push	{r4, r7, lr}
   2df5a:	b083      	sub	sp, #12
   2df5c:	af00      	add	r7, sp, #0
   2df5e:	6078      	str	r0, [r7, #4]
   2df60:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2df62:	687b      	ldr	r3, [r7, #4]
   2df64:	7858      	ldrb	r0, [r3, #1]
   2df66:	687b      	ldr	r3, [r7, #4]
   2df68:	3330      	adds	r3, #48	; 0x30
   2df6a:	0019      	movs	r1, r3
   2df6c:	683a      	ldr	r2, [r7, #0]
   2df6e:	2301      	movs	r3, #1
   2df70:	4c2a      	ldr	r4, [pc, #168]	; (2e01c <check_fs+0xc4>)
   2df72:	47a0      	blx	r4
   2df74:	1e03      	subs	r3, r0, #0
   2df76:	d001      	beq.n	2df7c <check_fs+0x24>
		return 3;
   2df78:	2303      	movs	r3, #3
   2df7a:	e04b      	b.n	2e014 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2df7c:	687b      	ldr	r3, [r7, #4]
   2df7e:	4a28      	ldr	r2, [pc, #160]	; (2e020 <check_fs+0xc8>)
   2df80:	4694      	mov	ip, r2
   2df82:	4463      	add	r3, ip
   2df84:	3301      	adds	r3, #1
   2df86:	781b      	ldrb	r3, [r3, #0]
   2df88:	021b      	lsls	r3, r3, #8
   2df8a:	b21a      	sxth	r2, r3
   2df8c:	687b      	ldr	r3, [r7, #4]
   2df8e:	4924      	ldr	r1, [pc, #144]	; (2e020 <check_fs+0xc8>)
   2df90:	5c5b      	ldrb	r3, [r3, r1]
   2df92:	b21b      	sxth	r3, r3
   2df94:	4313      	orrs	r3, r2
   2df96:	b21b      	sxth	r3, r3
   2df98:	4a22      	ldr	r2, [pc, #136]	; (2e024 <check_fs+0xcc>)
   2df9a:	4293      	cmp	r3, r2
   2df9c:	d001      	beq.n	2dfa2 <check_fs+0x4a>
		return 2;
   2df9e:	2302      	movs	r3, #2
   2dfa0:	e038      	b.n	2e014 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2dfa2:	687b      	ldr	r3, [r7, #4]
   2dfa4:	3366      	adds	r3, #102	; 0x66
   2dfa6:	3303      	adds	r3, #3
   2dfa8:	781b      	ldrb	r3, [r3, #0]
   2dfaa:	061a      	lsls	r2, r3, #24
   2dfac:	687b      	ldr	r3, [r7, #4]
   2dfae:	3366      	adds	r3, #102	; 0x66
   2dfb0:	3302      	adds	r3, #2
   2dfb2:	781b      	ldrb	r3, [r3, #0]
   2dfb4:	041b      	lsls	r3, r3, #16
   2dfb6:	4313      	orrs	r3, r2
   2dfb8:	687a      	ldr	r2, [r7, #4]
   2dfba:	3266      	adds	r2, #102	; 0x66
   2dfbc:	3201      	adds	r2, #1
   2dfbe:	7812      	ldrb	r2, [r2, #0]
   2dfc0:	0212      	lsls	r2, r2, #8
   2dfc2:	4313      	orrs	r3, r2
   2dfc4:	687a      	ldr	r2, [r7, #4]
   2dfc6:	2166      	movs	r1, #102	; 0x66
   2dfc8:	5c52      	ldrb	r2, [r2, r1]
   2dfca:	4313      	orrs	r3, r2
   2dfcc:	021b      	lsls	r3, r3, #8
   2dfce:	0a1b      	lsrs	r3, r3, #8
   2dfd0:	4a15      	ldr	r2, [pc, #84]	; (2e028 <check_fs+0xd0>)
   2dfd2:	4293      	cmp	r3, r2
   2dfd4:	d101      	bne.n	2dfda <check_fs+0x82>
		return 0;
   2dfd6:	2300      	movs	r3, #0
   2dfd8:	e01c      	b.n	2e014 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2dfda:	687b      	ldr	r3, [r7, #4]
   2dfdc:	3382      	adds	r3, #130	; 0x82
   2dfde:	3303      	adds	r3, #3
   2dfe0:	781b      	ldrb	r3, [r3, #0]
   2dfe2:	061a      	lsls	r2, r3, #24
   2dfe4:	687b      	ldr	r3, [r7, #4]
   2dfe6:	3382      	adds	r3, #130	; 0x82
   2dfe8:	3302      	adds	r3, #2
   2dfea:	781b      	ldrb	r3, [r3, #0]
   2dfec:	041b      	lsls	r3, r3, #16
   2dfee:	4313      	orrs	r3, r2
   2dff0:	687a      	ldr	r2, [r7, #4]
   2dff2:	3282      	adds	r2, #130	; 0x82
   2dff4:	3201      	adds	r2, #1
   2dff6:	7812      	ldrb	r2, [r2, #0]
   2dff8:	0212      	lsls	r2, r2, #8
   2dffa:	4313      	orrs	r3, r2
   2dffc:	687a      	ldr	r2, [r7, #4]
   2dffe:	2182      	movs	r1, #130	; 0x82
   2e000:	5c52      	ldrb	r2, [r2, r1]
   2e002:	4313      	orrs	r3, r2
   2e004:	021b      	lsls	r3, r3, #8
   2e006:	0a1b      	lsrs	r3, r3, #8
   2e008:	4a07      	ldr	r2, [pc, #28]	; (2e028 <check_fs+0xd0>)
   2e00a:	4293      	cmp	r3, r2
   2e00c:	d101      	bne.n	2e012 <check_fs+0xba>
		return 0;
   2e00e:	2300      	movs	r3, #0
   2e010:	e000      	b.n	2e014 <check_fs+0xbc>

	return 1;
   2e012:	2301      	movs	r3, #1
}
   2e014:	0018      	movs	r0, r3
   2e016:	46bd      	mov	sp, r7
   2e018:	b003      	add	sp, #12
   2e01a:	bd90      	pop	{r4, r7, pc}
   2e01c:	0002c1c1 	.word	0x0002c1c1
   2e020:	0000022e 	.word	0x0000022e
   2e024:	ffffaa55 	.word	0xffffaa55
   2e028:	00544146 	.word	0x00544146

0002e02c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2e02c:	b590      	push	{r4, r7, lr}
   2e02e:	b093      	sub	sp, #76	; 0x4c
   2e030:	af00      	add	r7, sp, #0
   2e032:	60f8      	str	r0, [r7, #12]
   2e034:	60b9      	str	r1, [r7, #8]
   2e036:	1dfb      	adds	r3, r7, #7
   2e038:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2e03a:	68fb      	ldr	r3, [r7, #12]
   2e03c:	681b      	ldr	r3, [r3, #0]
   2e03e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e042:	781b      	ldrb	r3, [r3, #0]
   2e044:	3b30      	subs	r3, #48	; 0x30
   2e046:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2e048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e04a:	2b09      	cmp	r3, #9
   2e04c:	d80b      	bhi.n	2e066 <chk_mounted+0x3a>
   2e04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e050:	3301      	adds	r3, #1
   2e052:	781b      	ldrb	r3, [r3, #0]
   2e054:	2b3a      	cmp	r3, #58	; 0x3a
   2e056:	d106      	bne.n	2e066 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e05a:	3302      	adds	r3, #2
   2e05c:	62fb      	str	r3, [r7, #44]	; 0x2c
   2e05e:	68fb      	ldr	r3, [r7, #12]
   2e060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2e062:	601a      	str	r2, [r3, #0]
   2e064:	e001      	b.n	2e06a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2e066:	2300      	movs	r3, #0
   2e068:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2e06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e06c:	2b07      	cmp	r3, #7
   2e06e:	d901      	bls.n	2e074 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2e070:	230b      	movs	r3, #11
   2e072:	e2af      	b.n	2e5d4 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2e074:	4bc5      	ldr	r3, [pc, #788]	; (2e38c <chk_mounted+0x360>)
   2e076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2e078:	0092      	lsls	r2, r2, #2
   2e07a:	58d3      	ldr	r3, [r2, r3]
   2e07c:	62bb      	str	r3, [r7, #40]	; 0x28
   2e07e:	68bb      	ldr	r3, [r7, #8]
   2e080:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e082:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e086:	2b00      	cmp	r3, #0
   2e088:	d101      	bne.n	2e08e <chk_mounted+0x62>
   2e08a:	230c      	movs	r3, #12
   2e08c:	e2a2      	b.n	2e5d4 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e090:	781b      	ldrb	r3, [r3, #0]
   2e092:	2b00      	cmp	r3, #0
   2e094:	d01c      	beq.n	2e0d0 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2e096:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e098:	785b      	ldrb	r3, [r3, #1]
   2e09a:	2227      	movs	r2, #39	; 0x27
   2e09c:	18bc      	adds	r4, r7, r2
   2e09e:	0018      	movs	r0, r3
   2e0a0:	4bbb      	ldr	r3, [pc, #748]	; (2e390 <chk_mounted+0x364>)
   2e0a2:	4798      	blx	r3
   2e0a4:	0003      	movs	r3, r0
   2e0a6:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2e0a8:	2327      	movs	r3, #39	; 0x27
   2e0aa:	18fb      	adds	r3, r7, r3
   2e0ac:	781b      	ldrb	r3, [r3, #0]
   2e0ae:	2201      	movs	r2, #1
   2e0b0:	4013      	ands	r3, r2
   2e0b2:	d10d      	bne.n	2e0d0 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2e0b4:	1dfb      	adds	r3, r7, #7
   2e0b6:	781b      	ldrb	r3, [r3, #0]
   2e0b8:	2b00      	cmp	r3, #0
   2e0ba:	d007      	beq.n	2e0cc <chk_mounted+0xa0>
   2e0bc:	2327      	movs	r3, #39	; 0x27
   2e0be:	18fb      	adds	r3, r7, r3
   2e0c0:	781b      	ldrb	r3, [r3, #0]
   2e0c2:	2204      	movs	r2, #4
   2e0c4:	4013      	ands	r3, r2
   2e0c6:	d001      	beq.n	2e0cc <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2e0c8:	230a      	movs	r3, #10
   2e0ca:	e283      	b.n	2e5d4 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2e0cc:	2300      	movs	r3, #0
   2e0ce:	e281      	b.n	2e5d4 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2e0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0d2:	2200      	movs	r2, #0
   2e0d4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2e0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e0d8:	b2da      	uxtb	r2, r3
   2e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0dc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0e0:	785b      	ldrb	r3, [r3, #1]
   2e0e2:	2227      	movs	r2, #39	; 0x27
   2e0e4:	18bc      	adds	r4, r7, r2
   2e0e6:	0018      	movs	r0, r3
   2e0e8:	4baa      	ldr	r3, [pc, #680]	; (2e394 <chk_mounted+0x368>)
   2e0ea:	4798      	blx	r3
   2e0ec:	0003      	movs	r3, r0
   2e0ee:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2e0f0:	2327      	movs	r3, #39	; 0x27
   2e0f2:	18fb      	adds	r3, r7, r3
   2e0f4:	781b      	ldrb	r3, [r3, #0]
   2e0f6:	2201      	movs	r2, #1
   2e0f8:	4013      	ands	r3, r2
   2e0fa:	d001      	beq.n	2e100 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2e0fc:	2303      	movs	r3, #3
   2e0fe:	e269      	b.n	2e5d4 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2e100:	1dfb      	adds	r3, r7, #7
   2e102:	781b      	ldrb	r3, [r3, #0]
   2e104:	2b00      	cmp	r3, #0
   2e106:	d007      	beq.n	2e118 <chk_mounted+0xec>
   2e108:	2327      	movs	r3, #39	; 0x27
   2e10a:	18fb      	adds	r3, r7, r3
   2e10c:	781b      	ldrb	r3, [r3, #0]
   2e10e:	2204      	movs	r2, #4
   2e110:	4013      	ands	r3, r2
   2e112:	d001      	beq.n	2e118 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2e114:	230a      	movs	r3, #10
   2e116:	e25d      	b.n	2e5d4 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2e118:	2300      	movs	r3, #0
   2e11a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2e11c:	2347      	movs	r3, #71	; 0x47
   2e11e:	18fc      	adds	r4, r7, r3
   2e120:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e122:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e124:	0011      	movs	r1, r2
   2e126:	0018      	movs	r0, r3
   2e128:	4b9b      	ldr	r3, [pc, #620]	; (2e398 <chk_mounted+0x36c>)
   2e12a:	4798      	blx	r3
   2e12c:	0003      	movs	r3, r0
   2e12e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2e130:	2347      	movs	r3, #71	; 0x47
   2e132:	18fb      	adds	r3, r7, r3
   2e134:	781b      	ldrb	r3, [r3, #0]
   2e136:	2b01      	cmp	r3, #1
   2e138:	d13b      	bne.n	2e1b2 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2e13a:	2346      	movs	r3, #70	; 0x46
   2e13c:	18fb      	adds	r3, r7, r3
   2e13e:	2200      	movs	r2, #0
   2e140:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2e142:	2346      	movs	r3, #70	; 0x46
   2e144:	18fb      	adds	r3, r7, r3
   2e146:	781b      	ldrb	r3, [r3, #0]
   2e148:	2b00      	cmp	r3, #0
   2e14a:	d006      	beq.n	2e15a <chk_mounted+0x12e>
   2e14c:	2346      	movs	r3, #70	; 0x46
   2e14e:	18fb      	adds	r3, r7, r3
   2e150:	781a      	ldrb	r2, [r3, #0]
   2e152:	2346      	movs	r3, #70	; 0x46
   2e154:	18fb      	adds	r3, r7, r3
   2e156:	3a01      	subs	r2, #1
   2e158:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2e15a:	2346      	movs	r3, #70	; 0x46
   2e15c:	18fb      	adds	r3, r7, r3
   2e15e:	781b      	ldrb	r3, [r3, #0]
   2e160:	011b      	lsls	r3, r3, #4
   2e162:	33bf      	adds	r3, #191	; 0xbf
   2e164:	33ff      	adds	r3, #255	; 0xff
   2e166:	3330      	adds	r3, #48	; 0x30
   2e168:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e16a:	18d3      	adds	r3, r2, r3
   2e16c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2e16e:	6a3b      	ldr	r3, [r7, #32]
   2e170:	3304      	adds	r3, #4
   2e172:	781b      	ldrb	r3, [r3, #0]
   2e174:	2b00      	cmp	r3, #0
   2e176:	d01c      	beq.n	2e1b2 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2e178:	6a3b      	ldr	r3, [r7, #32]
   2e17a:	330b      	adds	r3, #11
   2e17c:	781b      	ldrb	r3, [r3, #0]
   2e17e:	061a      	lsls	r2, r3, #24
   2e180:	6a3b      	ldr	r3, [r7, #32]
   2e182:	330a      	adds	r3, #10
   2e184:	781b      	ldrb	r3, [r3, #0]
   2e186:	041b      	lsls	r3, r3, #16
   2e188:	4313      	orrs	r3, r2
   2e18a:	6a3a      	ldr	r2, [r7, #32]
   2e18c:	3209      	adds	r2, #9
   2e18e:	7812      	ldrb	r2, [r2, #0]
   2e190:	0212      	lsls	r2, r2, #8
   2e192:	4313      	orrs	r3, r2
   2e194:	6a3a      	ldr	r2, [r7, #32]
   2e196:	3208      	adds	r2, #8
   2e198:	7812      	ldrb	r2, [r2, #0]
   2e19a:	4313      	orrs	r3, r2
   2e19c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2e19e:	2347      	movs	r3, #71	; 0x47
   2e1a0:	18fc      	adds	r4, r7, r3
   2e1a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1a6:	0011      	movs	r1, r2
   2e1a8:	0018      	movs	r0, r3
   2e1aa:	4b7b      	ldr	r3, [pc, #492]	; (2e398 <chk_mounted+0x36c>)
   2e1ac:	4798      	blx	r3
   2e1ae:	0003      	movs	r3, r0
   2e1b0:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2e1b2:	2347      	movs	r3, #71	; 0x47
   2e1b4:	18fb      	adds	r3, r7, r3
   2e1b6:	781b      	ldrb	r3, [r3, #0]
   2e1b8:	2b03      	cmp	r3, #3
   2e1ba:	d101      	bne.n	2e1c0 <chk_mounted+0x194>
   2e1bc:	2301      	movs	r3, #1
   2e1be:	e209      	b.n	2e5d4 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2e1c0:	2347      	movs	r3, #71	; 0x47
   2e1c2:	18fb      	adds	r3, r7, r3
   2e1c4:	781b      	ldrb	r3, [r3, #0]
   2e1c6:	2b00      	cmp	r3, #0
   2e1c8:	d001      	beq.n	2e1ce <chk_mounted+0x1a2>
   2e1ca:	230d      	movs	r3, #13
   2e1cc:	e202      	b.n	2e5d4 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2e1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1d0:	223c      	movs	r2, #60	; 0x3c
   2e1d2:	5c9b      	ldrb	r3, [r3, r2]
   2e1d4:	021b      	lsls	r3, r3, #8
   2e1d6:	b21a      	sxth	r2, r3
   2e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1da:	213b      	movs	r1, #59	; 0x3b
   2e1dc:	5c5b      	ldrb	r3, [r3, r1]
   2e1de:	b21b      	sxth	r3, r3
   2e1e0:	4313      	orrs	r3, r2
   2e1e2:	b21a      	sxth	r2, r3
   2e1e4:	2380      	movs	r3, #128	; 0x80
   2e1e6:	009b      	lsls	r3, r3, #2
   2e1e8:	429a      	cmp	r2, r3
   2e1ea:	d001      	beq.n	2e1f0 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2e1ec:	230d      	movs	r3, #13
   2e1ee:	e1f1      	b.n	2e5d4 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2e1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1f2:	2247      	movs	r2, #71	; 0x47
   2e1f4:	5c9b      	ldrb	r3, [r3, r2]
   2e1f6:	021b      	lsls	r3, r3, #8
   2e1f8:	b21a      	sxth	r2, r3
   2e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1fc:	2146      	movs	r1, #70	; 0x46
   2e1fe:	5c5b      	ldrb	r3, [r3, r1]
   2e200:	b21b      	sxth	r3, r3
   2e202:	4313      	orrs	r3, r2
   2e204:	b21b      	sxth	r3, r3
   2e206:	b29b      	uxth	r3, r3
   2e208:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e20c:	2b00      	cmp	r3, #0
   2e20e:	d112      	bne.n	2e236 <chk_mounted+0x20a>
   2e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e212:	2257      	movs	r2, #87	; 0x57
   2e214:	5c9b      	ldrb	r3, [r3, r2]
   2e216:	061a      	lsls	r2, r3, #24
   2e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e21a:	2156      	movs	r1, #86	; 0x56
   2e21c:	5c5b      	ldrb	r3, [r3, r1]
   2e21e:	041b      	lsls	r3, r3, #16
   2e220:	4313      	orrs	r3, r2
   2e222:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e224:	2155      	movs	r1, #85	; 0x55
   2e226:	5c52      	ldrb	r2, [r2, r1]
   2e228:	0212      	lsls	r2, r2, #8
   2e22a:	4313      	orrs	r3, r2
   2e22c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e22e:	2154      	movs	r1, #84	; 0x54
   2e230:	5c52      	ldrb	r2, [r2, r1]
   2e232:	4313      	orrs	r3, r2
   2e234:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2e236:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e238:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2e23a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2e23c:	231f      	movs	r3, #31
   2e23e:	18fb      	adds	r3, r7, r3
   2e240:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e242:	2140      	movs	r1, #64	; 0x40
   2e244:	5c52      	ldrb	r2, [r2, r1]
   2e246:	701a      	strb	r2, [r3, #0]
   2e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e24a:	221f      	movs	r2, #31
   2e24c:	18ba      	adds	r2, r7, r2
   2e24e:	7812      	ldrb	r2, [r2, #0]
   2e250:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2e252:	231f      	movs	r3, #31
   2e254:	18fb      	adds	r3, r7, r3
   2e256:	781b      	ldrb	r3, [r3, #0]
   2e258:	2b01      	cmp	r3, #1
   2e25a:	d006      	beq.n	2e26a <chk_mounted+0x23e>
   2e25c:	231f      	movs	r3, #31
   2e25e:	18fb      	adds	r3, r7, r3
   2e260:	781b      	ldrb	r3, [r3, #0]
   2e262:	2b02      	cmp	r3, #2
   2e264:	d001      	beq.n	2e26a <chk_mounted+0x23e>
   2e266:	230d      	movs	r3, #13
   2e268:	e1b4      	b.n	2e5d4 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2e26a:	231f      	movs	r3, #31
   2e26c:	18fb      	adds	r3, r7, r3
   2e26e:	781a      	ldrb	r2, [r3, #0]
   2e270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e272:	4353      	muls	r3, r2
   2e274:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2e276:	231f      	movs	r3, #31
   2e278:	18fb      	adds	r3, r7, r3
   2e27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e27c:	213d      	movs	r1, #61	; 0x3d
   2e27e:	5c52      	ldrb	r2, [r2, r1]
   2e280:	701a      	strb	r2, [r3, #0]
   2e282:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e284:	221f      	movs	r2, #31
   2e286:	18ba      	adds	r2, r7, r2
   2e288:	7812      	ldrb	r2, [r2, #0]
   2e28a:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2e28c:	231f      	movs	r3, #31
   2e28e:	18fb      	adds	r3, r7, r3
   2e290:	781b      	ldrb	r3, [r3, #0]
   2e292:	2b00      	cmp	r3, #0
   2e294:	d008      	beq.n	2e2a8 <chk_mounted+0x27c>
   2e296:	231f      	movs	r3, #31
   2e298:	18fb      	adds	r3, r7, r3
   2e29a:	781b      	ldrb	r3, [r3, #0]
   2e29c:	221f      	movs	r2, #31
   2e29e:	18ba      	adds	r2, r7, r2
   2e2a0:	7812      	ldrb	r2, [r2, #0]
   2e2a2:	3a01      	subs	r2, #1
   2e2a4:	4013      	ands	r3, r2
   2e2a6:	d001      	beq.n	2e2ac <chk_mounted+0x280>
   2e2a8:	230d      	movs	r3, #13
   2e2aa:	e193      	b.n	2e5d4 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ae:	2242      	movs	r2, #66	; 0x42
   2e2b0:	5c9b      	ldrb	r3, [r3, r2]
   2e2b2:	021b      	lsls	r3, r3, #8
   2e2b4:	b21a      	sxth	r2, r3
   2e2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2b8:	2141      	movs	r1, #65	; 0x41
   2e2ba:	5c5b      	ldrb	r3, [r3, r1]
   2e2bc:	b21b      	sxth	r3, r3
   2e2be:	4313      	orrs	r3, r2
   2e2c0:	b21b      	sxth	r3, r3
   2e2c2:	b29a      	uxth	r2, r3
   2e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2c6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2e2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ca:	891b      	ldrh	r3, [r3, #8]
   2e2cc:	220f      	movs	r2, #15
   2e2ce:	4013      	ands	r3, r2
   2e2d0:	b29b      	uxth	r3, r3
   2e2d2:	2b00      	cmp	r3, #0
   2e2d4:	d001      	beq.n	2e2da <chk_mounted+0x2ae>
   2e2d6:	230d      	movs	r3, #13
   2e2d8:	e17c      	b.n	2e5d4 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2dc:	2244      	movs	r2, #68	; 0x44
   2e2de:	5c9b      	ldrb	r3, [r3, r2]
   2e2e0:	021b      	lsls	r3, r3, #8
   2e2e2:	b21a      	sxth	r2, r3
   2e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2e6:	2143      	movs	r1, #67	; 0x43
   2e2e8:	5c5b      	ldrb	r3, [r3, r1]
   2e2ea:	b21b      	sxth	r3, r3
   2e2ec:	4313      	orrs	r3, r2
   2e2ee:	b21b      	sxth	r3, r3
   2e2f0:	b29b      	uxth	r3, r3
   2e2f2:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2e2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e2f6:	2b00      	cmp	r3, #0
   2e2f8:	d112      	bne.n	2e320 <chk_mounted+0x2f4>
   2e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2fc:	2253      	movs	r2, #83	; 0x53
   2e2fe:	5c9b      	ldrb	r3, [r3, r2]
   2e300:	061a      	lsls	r2, r3, #24
   2e302:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e304:	2152      	movs	r1, #82	; 0x52
   2e306:	5c5b      	ldrb	r3, [r3, r1]
   2e308:	041b      	lsls	r3, r3, #16
   2e30a:	4313      	orrs	r3, r2
   2e30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e30e:	2151      	movs	r1, #81	; 0x51
   2e310:	5c52      	ldrb	r2, [r2, r1]
   2e312:	0212      	lsls	r2, r2, #8
   2e314:	4313      	orrs	r3, r2
   2e316:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e318:	2150      	movs	r1, #80	; 0x50
   2e31a:	5c52      	ldrb	r2, [r2, r1]
   2e31c:	4313      	orrs	r3, r2
   2e31e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e322:	223f      	movs	r2, #63	; 0x3f
   2e324:	5c9b      	ldrb	r3, [r3, r2]
   2e326:	021b      	lsls	r3, r3, #8
   2e328:	b21a      	sxth	r2, r3
   2e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e32c:	213e      	movs	r1, #62	; 0x3e
   2e32e:	5c5b      	ldrb	r3, [r3, r1]
   2e330:	b21b      	sxth	r3, r3
   2e332:	4313      	orrs	r3, r2
   2e334:	b21a      	sxth	r2, r3
   2e336:	231c      	movs	r3, #28
   2e338:	18fb      	adds	r3, r7, r3
   2e33a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2e33c:	231c      	movs	r3, #28
   2e33e:	18fb      	adds	r3, r7, r3
   2e340:	881b      	ldrh	r3, [r3, #0]
   2e342:	2b00      	cmp	r3, #0
   2e344:	d101      	bne.n	2e34a <chk_mounted+0x31e>
   2e346:	230d      	movs	r3, #13
   2e348:	e144      	b.n	2e5d4 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2e34a:	231c      	movs	r3, #28
   2e34c:	18fb      	adds	r3, r7, r3
   2e34e:	881a      	ldrh	r2, [r3, #0]
   2e350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e352:	18d3      	adds	r3, r2, r3
   2e354:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e356:	8912      	ldrh	r2, [r2, #8]
   2e358:	0912      	lsrs	r2, r2, #4
   2e35a:	b292      	uxth	r2, r2
   2e35c:	189b      	adds	r3, r3, r2
   2e35e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2e360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e362:	69bb      	ldr	r3, [r7, #24]
   2e364:	429a      	cmp	r2, r3
   2e366:	d201      	bcs.n	2e36c <chk_mounted+0x340>
   2e368:	230d      	movs	r3, #13
   2e36a:	e133      	b.n	2e5d4 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2e36c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e36e:	69bb      	ldr	r3, [r7, #24]
   2e370:	1ad2      	subs	r2, r2, r3
   2e372:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e374:	789b      	ldrb	r3, [r3, #2]
   2e376:	0019      	movs	r1, r3
   2e378:	4b08      	ldr	r3, [pc, #32]	; (2e39c <chk_mounted+0x370>)
   2e37a:	0010      	movs	r0, r2
   2e37c:	4798      	blx	r3
   2e37e:	0003      	movs	r3, r0
   2e380:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2e382:	697b      	ldr	r3, [r7, #20]
   2e384:	2b00      	cmp	r3, #0
   2e386:	d10b      	bne.n	2e3a0 <chk_mounted+0x374>
   2e388:	230d      	movs	r3, #13
   2e38a:	e123      	b.n	2e5d4 <chk_mounted+0x5a8>
   2e38c:	200042f8 	.word	0x200042f8
   2e390:	0002c189 	.word	0x0002c189
   2e394:	0002c105 	.word	0x0002c105
   2e398:	0002df59 	.word	0x0002df59
   2e39c:	000337a5 	.word	0x000337a5
	fmt = FS_FAT12;
   2e3a0:	2347      	movs	r3, #71	; 0x47
   2e3a2:	18fb      	adds	r3, r7, r3
   2e3a4:	2201      	movs	r2, #1
   2e3a6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2e3a8:	697b      	ldr	r3, [r7, #20]
   2e3aa:	4a8c      	ldr	r2, [pc, #560]	; (2e5dc <chk_mounted+0x5b0>)
   2e3ac:	4293      	cmp	r3, r2
   2e3ae:	d903      	bls.n	2e3b8 <chk_mounted+0x38c>
   2e3b0:	2347      	movs	r3, #71	; 0x47
   2e3b2:	18fb      	adds	r3, r7, r3
   2e3b4:	2202      	movs	r2, #2
   2e3b6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2e3b8:	697b      	ldr	r3, [r7, #20]
   2e3ba:	4a89      	ldr	r2, [pc, #548]	; (2e5e0 <chk_mounted+0x5b4>)
   2e3bc:	4293      	cmp	r3, r2
   2e3be:	d903      	bls.n	2e3c8 <chk_mounted+0x39c>
   2e3c0:	2347      	movs	r3, #71	; 0x47
   2e3c2:	18fb      	adds	r3, r7, r3
   2e3c4:	2203      	movs	r2, #3
   2e3c6:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2e3c8:	697b      	ldr	r3, [r7, #20]
   2e3ca:	1c9a      	adds	r2, r3, #2
   2e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ce:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2e3d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e3d2:	69bb      	ldr	r3, [r7, #24]
   2e3d4:	18d2      	adds	r2, r2, r3
   2e3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3d8:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2e3da:	231c      	movs	r3, #28
   2e3dc:	18fb      	adds	r3, r7, r3
   2e3de:	881a      	ldrh	r2, [r3, #0]
   2e3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e3e2:	18d2      	adds	r2, r2, r3
   2e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3e6:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2e3e8:	2347      	movs	r3, #71	; 0x47
   2e3ea:	18fb      	adds	r3, r7, r3
   2e3ec:	781b      	ldrb	r3, [r3, #0]
   2e3ee:	2b03      	cmp	r3, #3
   2e3f0:	d11e      	bne.n	2e430 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2e3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3f4:	891b      	ldrh	r3, [r3, #8]
   2e3f6:	2b00      	cmp	r3, #0
   2e3f8:	d001      	beq.n	2e3fe <chk_mounted+0x3d2>
   2e3fa:	230d      	movs	r3, #13
   2e3fc:	e0ea      	b.n	2e5d4 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e400:	225f      	movs	r2, #95	; 0x5f
   2e402:	5c9b      	ldrb	r3, [r3, r2]
   2e404:	061a      	lsls	r2, r3, #24
   2e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e408:	215e      	movs	r1, #94	; 0x5e
   2e40a:	5c5b      	ldrb	r3, [r3, r1]
   2e40c:	041b      	lsls	r3, r3, #16
   2e40e:	4313      	orrs	r3, r2
   2e410:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e412:	215d      	movs	r1, #93	; 0x5d
   2e414:	5c52      	ldrb	r2, [r2, r1]
   2e416:	0212      	lsls	r2, r2, #8
   2e418:	4313      	orrs	r3, r2
   2e41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e41c:	215c      	movs	r1, #92	; 0x5c
   2e41e:	5c52      	ldrb	r2, [r2, r1]
   2e420:	431a      	orrs	r2, r3
   2e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e424:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2e426:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e428:	699b      	ldr	r3, [r3, #24]
   2e42a:	009b      	lsls	r3, r3, #2
   2e42c:	633b      	str	r3, [r7, #48]	; 0x30
   2e42e:	e020      	b.n	2e472 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e432:	891b      	ldrh	r3, [r3, #8]
   2e434:	2b00      	cmp	r3, #0
   2e436:	d101      	bne.n	2e43c <chk_mounted+0x410>
   2e438:	230d      	movs	r3, #13
   2e43a:	e0cb      	b.n	2e5d4 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e43e:	6a1a      	ldr	r2, [r3, #32]
   2e440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e442:	18d2      	adds	r2, r2, r3
   2e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e446:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2e448:	2347      	movs	r3, #71	; 0x47
   2e44a:	18fb      	adds	r3, r7, r3
   2e44c:	781b      	ldrb	r3, [r3, #0]
   2e44e:	2b02      	cmp	r3, #2
   2e450:	d103      	bne.n	2e45a <chk_mounted+0x42e>
   2e452:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e454:	699b      	ldr	r3, [r3, #24]
   2e456:	005b      	lsls	r3, r3, #1
   2e458:	e00a      	b.n	2e470 <chk_mounted+0x444>
   2e45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e45c:	699a      	ldr	r2, [r3, #24]
   2e45e:	0013      	movs	r3, r2
   2e460:	005b      	lsls	r3, r3, #1
   2e462:	189b      	adds	r3, r3, r2
   2e464:	085a      	lsrs	r2, r3, #1
   2e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e468:	699b      	ldr	r3, [r3, #24]
   2e46a:	2101      	movs	r1, #1
   2e46c:	400b      	ands	r3, r1
   2e46e:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2e470:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e474:	69da      	ldr	r2, [r3, #28]
   2e476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e478:	495a      	ldr	r1, [pc, #360]	; (2e5e4 <chk_mounted+0x5b8>)
   2e47a:	468c      	mov	ip, r1
   2e47c:	4463      	add	r3, ip
   2e47e:	0a5b      	lsrs	r3, r3, #9
   2e480:	429a      	cmp	r2, r3
   2e482:	d201      	bcs.n	2e488 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2e484:	230d      	movs	r3, #13
   2e486:	e0a5      	b.n	2e5d4 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e48a:	2201      	movs	r2, #1
   2e48c:	4252      	negs	r2, r2
   2e48e:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e492:	2200      	movs	r2, #0
   2e494:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2e496:	2347      	movs	r3, #71	; 0x47
   2e498:	18fb      	adds	r3, r7, r3
   2e49a:	781b      	ldrb	r3, [r3, #0]
   2e49c:	2b03      	cmp	r3, #3
   2e49e:	d000      	beq.n	2e4a2 <chk_mounted+0x476>
   2e4a0:	e082      	b.n	2e5a8 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4a4:	2200      	movs	r2, #0
   2e4a6:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4aa:	2261      	movs	r2, #97	; 0x61
   2e4ac:	5c9b      	ldrb	r3, [r3, r2]
   2e4ae:	021b      	lsls	r3, r3, #8
   2e4b0:	b21a      	sxth	r2, r3
   2e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4b4:	2160      	movs	r1, #96	; 0x60
   2e4b6:	5c5b      	ldrb	r3, [r3, r1]
   2e4b8:	b21b      	sxth	r3, r3
   2e4ba:	4313      	orrs	r3, r2
   2e4bc:	b21b      	sxth	r3, r3
   2e4be:	b29b      	uxth	r3, r3
   2e4c0:	001a      	movs	r2, r3
   2e4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e4c4:	18d2      	adds	r2, r2, r3
   2e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4c8:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4cc:	7858      	ldrb	r0, [r3, #1]
   2e4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4d0:	3330      	adds	r3, #48	; 0x30
   2e4d2:	0019      	movs	r1, r3
   2e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4d6:	695a      	ldr	r2, [r3, #20]
   2e4d8:	2301      	movs	r3, #1
   2e4da:	4c43      	ldr	r4, [pc, #268]	; (2e5e8 <chk_mounted+0x5bc>)
   2e4dc:	47a0      	blx	r4
   2e4de:	1e03      	subs	r3, r0, #0
   2e4e0:	d162      	bne.n	2e5a8 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4e4:	4a41      	ldr	r2, [pc, #260]	; (2e5ec <chk_mounted+0x5c0>)
   2e4e6:	5c9b      	ldrb	r3, [r3, r2]
   2e4e8:	021b      	lsls	r3, r3, #8
   2e4ea:	b21a      	sxth	r2, r3
   2e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4ee:	4940      	ldr	r1, [pc, #256]	; (2e5f0 <chk_mounted+0x5c4>)
   2e4f0:	5c5b      	ldrb	r3, [r3, r1]
   2e4f2:	b21b      	sxth	r3, r3
   2e4f4:	4313      	orrs	r3, r2
   2e4f6:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e4f8:	4a3e      	ldr	r2, [pc, #248]	; (2e5f4 <chk_mounted+0x5c8>)
   2e4fa:	4293      	cmp	r3, r2
   2e4fc:	d154      	bne.n	2e5a8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e500:	2233      	movs	r2, #51	; 0x33
   2e502:	5c9b      	ldrb	r3, [r3, r2]
   2e504:	061a      	lsls	r2, r3, #24
   2e506:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e508:	2132      	movs	r1, #50	; 0x32
   2e50a:	5c5b      	ldrb	r3, [r3, r1]
   2e50c:	041b      	lsls	r3, r3, #16
   2e50e:	4313      	orrs	r3, r2
   2e510:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e512:	2131      	movs	r1, #49	; 0x31
   2e514:	5c52      	ldrb	r2, [r2, r1]
   2e516:	0212      	lsls	r2, r2, #8
   2e518:	4313      	orrs	r3, r2
   2e51a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e51c:	2130      	movs	r1, #48	; 0x30
   2e51e:	5c52      	ldrb	r2, [r2, r1]
   2e520:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e522:	4a35      	ldr	r2, [pc, #212]	; (2e5f8 <chk_mounted+0x5cc>)
   2e524:	4293      	cmp	r3, r2
   2e526:	d13f      	bne.n	2e5a8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2e528:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e52a:	4a34      	ldr	r2, [pc, #208]	; (2e5fc <chk_mounted+0x5d0>)
   2e52c:	5c9b      	ldrb	r3, [r3, r2]
   2e52e:	061a      	lsls	r2, r3, #24
   2e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e532:	4933      	ldr	r1, [pc, #204]	; (2e600 <chk_mounted+0x5d4>)
   2e534:	5c5b      	ldrb	r3, [r3, r1]
   2e536:	041b      	lsls	r3, r3, #16
   2e538:	4313      	orrs	r3, r2
   2e53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e53c:	4931      	ldr	r1, [pc, #196]	; (2e604 <chk_mounted+0x5d8>)
   2e53e:	5c52      	ldrb	r2, [r2, r1]
   2e540:	0212      	lsls	r2, r2, #8
   2e542:	4313      	orrs	r3, r2
   2e544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e546:	2285      	movs	r2, #133	; 0x85
   2e548:	0092      	lsls	r2, r2, #2
   2e54a:	5c8a      	ldrb	r2, [r1, r2]
   2e54c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e54e:	4a2e      	ldr	r2, [pc, #184]	; (2e608 <chk_mounted+0x5dc>)
   2e550:	4293      	cmp	r3, r2
   2e552:	d129      	bne.n	2e5a8 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e556:	4a2d      	ldr	r2, [pc, #180]	; (2e60c <chk_mounted+0x5e0>)
   2e558:	5c9b      	ldrb	r3, [r3, r2]
   2e55a:	061a      	lsls	r2, r3, #24
   2e55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e55e:	492c      	ldr	r1, [pc, #176]	; (2e610 <chk_mounted+0x5e4>)
   2e560:	5c5b      	ldrb	r3, [r3, r1]
   2e562:	041b      	lsls	r3, r3, #16
   2e564:	4313      	orrs	r3, r2
   2e566:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e568:	492a      	ldr	r1, [pc, #168]	; (2e614 <chk_mounted+0x5e8>)
   2e56a:	5c52      	ldrb	r2, [r2, r1]
   2e56c:	0212      	lsls	r2, r2, #8
   2e56e:	4313      	orrs	r3, r2
   2e570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e572:	2287      	movs	r2, #135	; 0x87
   2e574:	0092      	lsls	r2, r2, #2
   2e576:	5c8a      	ldrb	r2, [r1, r2]
   2e578:	431a      	orrs	r2, r3
   2e57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e57c:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2e57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e580:	4a25      	ldr	r2, [pc, #148]	; (2e618 <chk_mounted+0x5ec>)
   2e582:	5c9b      	ldrb	r3, [r3, r2]
   2e584:	061a      	lsls	r2, r3, #24
   2e586:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e588:	4924      	ldr	r1, [pc, #144]	; (2e61c <chk_mounted+0x5f0>)
   2e58a:	5c5b      	ldrb	r3, [r3, r1]
   2e58c:	041b      	lsls	r3, r3, #16
   2e58e:	4313      	orrs	r3, r2
   2e590:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e592:	4923      	ldr	r1, [pc, #140]	; (2e620 <chk_mounted+0x5f4>)
   2e594:	5c52      	ldrb	r2, [r2, r1]
   2e596:	0212      	lsls	r2, r2, #8
   2e598:	4313      	orrs	r3, r2
   2e59a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e59c:	2286      	movs	r2, #134	; 0x86
   2e59e:	0092      	lsls	r2, r2, #2
   2e5a0:	5c8a      	ldrb	r2, [r1, r2]
   2e5a2:	431a      	orrs	r2, r3
   2e5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5a6:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2e5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5aa:	2247      	movs	r2, #71	; 0x47
   2e5ac:	18ba      	adds	r2, r7, r2
   2e5ae:	7812      	ldrb	r2, [r2, #0]
   2e5b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2e5b2:	4b1c      	ldr	r3, [pc, #112]	; (2e624 <chk_mounted+0x5f8>)
   2e5b4:	881b      	ldrh	r3, [r3, #0]
   2e5b6:	3301      	adds	r3, #1
   2e5b8:	b29a      	uxth	r2, r3
   2e5ba:	4b1a      	ldr	r3, [pc, #104]	; (2e624 <chk_mounted+0x5f8>)
   2e5bc:	801a      	strh	r2, [r3, #0]
   2e5be:	4b19      	ldr	r3, [pc, #100]	; (2e624 <chk_mounted+0x5f8>)
   2e5c0:	881a      	ldrh	r2, [r3, #0]
   2e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5c4:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2e5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5c8:	2200      	movs	r2, #0
   2e5ca:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5ce:	2200      	movs	r2, #0
   2e5d0:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2e5d2:	2300      	movs	r3, #0
}
   2e5d4:	0018      	movs	r0, r3
   2e5d6:	46bd      	mov	sp, r7
   2e5d8:	b013      	add	sp, #76	; 0x4c
   2e5da:	bd90      	pop	{r4, r7, pc}
   2e5dc:	00000ff5 	.word	0x00000ff5
   2e5e0:	0000fff5 	.word	0x0000fff5
   2e5e4:	000001ff 	.word	0x000001ff
   2e5e8:	0002c1c1 	.word	0x0002c1c1
   2e5ec:	0000022f 	.word	0x0000022f
   2e5f0:	0000022e 	.word	0x0000022e
   2e5f4:	ffffaa55 	.word	0xffffaa55
   2e5f8:	41615252 	.word	0x41615252
   2e5fc:	00000217 	.word	0x00000217
   2e600:	00000216 	.word	0x00000216
   2e604:	00000215 	.word	0x00000215
   2e608:	61417272 	.word	0x61417272
   2e60c:	0000021f 	.word	0x0000021f
   2e610:	0000021e 	.word	0x0000021e
   2e614:	0000021d 	.word	0x0000021d
   2e618:	0000021b 	.word	0x0000021b
   2e61c:	0000021a 	.word	0x0000021a
   2e620:	00000219 	.word	0x00000219
   2e624:	20004318 	.word	0x20004318

0002e628 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2e628:	b580      	push	{r7, lr}
   2e62a:	b082      	sub	sp, #8
   2e62c:	af00      	add	r7, sp, #0
   2e62e:	6078      	str	r0, [r7, #4]
   2e630:	000a      	movs	r2, r1
   2e632:	1cbb      	adds	r3, r7, #2
   2e634:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2e636:	687b      	ldr	r3, [r7, #4]
   2e638:	2b00      	cmp	r3, #0
   2e63a:	d009      	beq.n	2e650 <validate+0x28>
   2e63c:	687b      	ldr	r3, [r7, #4]
   2e63e:	781b      	ldrb	r3, [r3, #0]
   2e640:	2b00      	cmp	r3, #0
   2e642:	d005      	beq.n	2e650 <validate+0x28>
   2e644:	687b      	ldr	r3, [r7, #4]
   2e646:	88db      	ldrh	r3, [r3, #6]
   2e648:	1cba      	adds	r2, r7, #2
   2e64a:	8812      	ldrh	r2, [r2, #0]
   2e64c:	429a      	cmp	r2, r3
   2e64e:	d001      	beq.n	2e654 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2e650:	2309      	movs	r3, #9
   2e652:	e00c      	b.n	2e66e <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2e654:	687b      	ldr	r3, [r7, #4]
   2e656:	785b      	ldrb	r3, [r3, #1]
   2e658:	0018      	movs	r0, r3
   2e65a:	4b07      	ldr	r3, [pc, #28]	; (2e678 <validate+0x50>)
   2e65c:	4798      	blx	r3
   2e65e:	0003      	movs	r3, r0
   2e660:	001a      	movs	r2, r3
   2e662:	2301      	movs	r3, #1
   2e664:	4013      	ands	r3, r2
   2e666:	d001      	beq.n	2e66c <validate+0x44>
		return FR_NOT_READY;
   2e668:	2303      	movs	r3, #3
   2e66a:	e000      	b.n	2e66e <validate+0x46>

	return FR_OK;
   2e66c:	2300      	movs	r3, #0
}
   2e66e:	0018      	movs	r0, r3
   2e670:	46bd      	mov	sp, r7
   2e672:	b002      	add	sp, #8
   2e674:	bd80      	pop	{r7, pc}
   2e676:	46c0      	nop			; (mov r8, r8)
   2e678:	0002c189 	.word	0x0002c189

0002e67c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2e67c:	b580      	push	{r7, lr}
   2e67e:	b084      	sub	sp, #16
   2e680:	af00      	add	r7, sp, #0
   2e682:	0002      	movs	r2, r0
   2e684:	6039      	str	r1, [r7, #0]
   2e686:	1dfb      	adds	r3, r7, #7
   2e688:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2e68a:	1dfb      	adds	r3, r7, #7
   2e68c:	781b      	ldrb	r3, [r3, #0]
   2e68e:	2b07      	cmp	r3, #7
   2e690:	d901      	bls.n	2e696 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2e692:	230b      	movs	r3, #11
   2e694:	e018      	b.n	2e6c8 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2e696:	1dfb      	adds	r3, r7, #7
   2e698:	781a      	ldrb	r2, [r3, #0]
   2e69a:	4b0d      	ldr	r3, [pc, #52]	; (2e6d0 <f_mount+0x54>)
   2e69c:	0092      	lsls	r2, r2, #2
   2e69e:	58d3      	ldr	r3, [r2, r3]
   2e6a0:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2e6a2:	68fb      	ldr	r3, [r7, #12]
   2e6a4:	2b00      	cmp	r3, #0
   2e6a6:	d002      	beq.n	2e6ae <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2e6a8:	68fb      	ldr	r3, [r7, #12]
   2e6aa:	2200      	movs	r2, #0
   2e6ac:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2e6ae:	683b      	ldr	r3, [r7, #0]
   2e6b0:	2b00      	cmp	r3, #0
   2e6b2:	d002      	beq.n	2e6ba <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2e6b4:	683b      	ldr	r3, [r7, #0]
   2e6b6:	2200      	movs	r2, #0
   2e6b8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2e6ba:	1dfb      	adds	r3, r7, #7
   2e6bc:	781a      	ldrb	r2, [r3, #0]
   2e6be:	4b04      	ldr	r3, [pc, #16]	; (2e6d0 <f_mount+0x54>)
   2e6c0:	0092      	lsls	r2, r2, #2
   2e6c2:	6839      	ldr	r1, [r7, #0]
   2e6c4:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2e6c6:	2300      	movs	r3, #0
}
   2e6c8:	0018      	movs	r0, r3
   2e6ca:	46bd      	mov	sp, r7
   2e6cc:	b004      	add	sp, #16
   2e6ce:	bd80      	pop	{r7, pc}
   2e6d0:	200042f8 	.word	0x200042f8

0002e6d4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2e6d4:	b590      	push	{r4, r7, lr}
   2e6d6:	4ce5      	ldr	r4, [pc, #916]	; (2ea6c <f_open+0x398>)
   2e6d8:	44a5      	add	sp, r4
   2e6da:	af00      	add	r7, sp, #0
   2e6dc:	60f8      	str	r0, [r7, #12]
   2e6de:	60b9      	str	r1, [r7, #8]
   2e6e0:	4be3      	ldr	r3, [pc, #908]	; (2ea70 <f_open+0x39c>)
   2e6e2:	2194      	movs	r1, #148	; 0x94
   2e6e4:	0089      	lsls	r1, r1, #2
   2e6e6:	468c      	mov	ip, r1
   2e6e8:	44bc      	add	ip, r7
   2e6ea:	4463      	add	r3, ip
   2e6ec:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2e6ee:	68fb      	ldr	r3, [r7, #12]
   2e6f0:	2200      	movs	r2, #0
   2e6f2:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2e6f4:	4bde      	ldr	r3, [pc, #888]	; (2ea70 <f_open+0x39c>)
   2e6f6:	2294      	movs	r2, #148	; 0x94
   2e6f8:	0092      	lsls	r2, r2, #2
   2e6fa:	4694      	mov	ip, r2
   2e6fc:	44bc      	add	ip, r7
   2e6fe:	4463      	add	r3, ip
   2e700:	4adb      	ldr	r2, [pc, #876]	; (2ea70 <f_open+0x39c>)
   2e702:	2194      	movs	r1, #148	; 0x94
   2e704:	0089      	lsls	r1, r1, #2
   2e706:	468c      	mov	ip, r1
   2e708:	44bc      	add	ip, r7
   2e70a:	4462      	add	r2, ip
   2e70c:	7812      	ldrb	r2, [r2, #0]
   2e70e:	211f      	movs	r1, #31
   2e710:	400a      	ands	r2, r1
   2e712:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2e714:	4bd6      	ldr	r3, [pc, #856]	; (2ea70 <f_open+0x39c>)
   2e716:	2294      	movs	r2, #148	; 0x94
   2e718:	0092      	lsls	r2, r2, #2
   2e71a:	4694      	mov	ip, r2
   2e71c:	44bc      	add	ip, r7
   2e71e:	4463      	add	r3, ip
   2e720:	781b      	ldrb	r3, [r3, #0]
   2e722:	2201      	movs	r2, #1
   2e724:	4393      	bics	r3, r2
   2e726:	b2da      	uxtb	r2, r3
   2e728:	4bd2      	ldr	r3, [pc, #840]	; (2ea74 <f_open+0x3a0>)
   2e72a:	18fc      	adds	r4, r7, r3
   2e72c:	2387      	movs	r3, #135	; 0x87
   2e72e:	009b      	lsls	r3, r3, #2
   2e730:	18f9      	adds	r1, r7, r3
   2e732:	2308      	movs	r3, #8
   2e734:	18fb      	adds	r3, r7, r3
   2e736:	0018      	movs	r0, r3
   2e738:	4bcf      	ldr	r3, [pc, #828]	; (2ea78 <f_open+0x3a4>)
   2e73a:	4798      	blx	r3
   2e73c:	0003      	movs	r3, r0
   2e73e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2e740:	2387      	movs	r3, #135	; 0x87
   2e742:	009b      	lsls	r3, r3, #2
   2e744:	18fb      	adds	r3, r7, r3
   2e746:	2284      	movs	r2, #132	; 0x84
   2e748:	0092      	lsls	r2, r2, #2
   2e74a:	18ba      	adds	r2, r7, r2
   2e74c:	619a      	str	r2, [r3, #24]
   2e74e:	2387      	movs	r3, #135	; 0x87
   2e750:	009b      	lsls	r3, r3, #2
   2e752:	18fb      	adds	r3, r7, r3
   2e754:	2210      	movs	r2, #16
   2e756:	18ba      	adds	r2, r7, r2
   2e758:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2e75a:	4bc6      	ldr	r3, [pc, #792]	; (2ea74 <f_open+0x3a0>)
   2e75c:	18fb      	adds	r3, r7, r3
   2e75e:	781b      	ldrb	r3, [r3, #0]
   2e760:	2b00      	cmp	r3, #0
   2e762:	d10b      	bne.n	2e77c <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2e764:	68ba      	ldr	r2, [r7, #8]
   2e766:	4bc3      	ldr	r3, [pc, #780]	; (2ea74 <f_open+0x3a0>)
   2e768:	18fc      	adds	r4, r7, r3
   2e76a:	2387      	movs	r3, #135	; 0x87
   2e76c:	009b      	lsls	r3, r3, #2
   2e76e:	18fb      	adds	r3, r7, r3
   2e770:	0011      	movs	r1, r2
   2e772:	0018      	movs	r0, r3
   2e774:	4bc1      	ldr	r3, [pc, #772]	; (2ea7c <f_open+0x3a8>)
   2e776:	4798      	blx	r3
   2e778:	0003      	movs	r3, r0
   2e77a:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2e77c:	2387      	movs	r3, #135	; 0x87
   2e77e:	009b      	lsls	r3, r3, #2
   2e780:	18fb      	adds	r3, r7, r3
   2e782:	695b      	ldr	r3, [r3, #20]
   2e784:	2292      	movs	r2, #146	; 0x92
   2e786:	0092      	lsls	r2, r2, #2
   2e788:	18ba      	adds	r2, r7, r2
   2e78a:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2e78c:	4bb9      	ldr	r3, [pc, #740]	; (2ea74 <f_open+0x3a0>)
   2e78e:	18fb      	adds	r3, r7, r3
   2e790:	781b      	ldrb	r3, [r3, #0]
   2e792:	2b00      	cmp	r3, #0
   2e794:	d109      	bne.n	2e7aa <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2e796:	2392      	movs	r3, #146	; 0x92
   2e798:	009b      	lsls	r3, r3, #2
   2e79a:	18fb      	adds	r3, r7, r3
   2e79c:	681b      	ldr	r3, [r3, #0]
   2e79e:	2b00      	cmp	r3, #0
   2e7a0:	d103      	bne.n	2e7aa <f_open+0xd6>
			res = FR_INVALID_NAME;
   2e7a2:	4bb4      	ldr	r3, [pc, #720]	; (2ea74 <f_open+0x3a0>)
   2e7a4:	18fb      	adds	r3, r7, r3
   2e7a6:	2206      	movs	r2, #6
   2e7a8:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2e7aa:	4bb1      	ldr	r3, [pc, #708]	; (2ea70 <f_open+0x39c>)
   2e7ac:	2294      	movs	r2, #148	; 0x94
   2e7ae:	0092      	lsls	r2, r2, #2
   2e7b0:	4694      	mov	ip, r2
   2e7b2:	44bc      	add	ip, r7
   2e7b4:	4463      	add	r3, ip
   2e7b6:	781b      	ldrb	r3, [r3, #0]
   2e7b8:	221c      	movs	r2, #28
   2e7ba:	4013      	ands	r3, r2
   2e7bc:	d100      	bne.n	2e7c0 <f_open+0xec>
   2e7be:	e141      	b.n	2ea44 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2e7c0:	4bac      	ldr	r3, [pc, #688]	; (2ea74 <f_open+0x3a0>)
   2e7c2:	18fb      	adds	r3, r7, r3
   2e7c4:	781b      	ldrb	r3, [r3, #0]
   2e7c6:	2b00      	cmp	r3, #0
   2e7c8:	d027      	beq.n	2e81a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2e7ca:	4baa      	ldr	r3, [pc, #680]	; (2ea74 <f_open+0x3a0>)
   2e7cc:	18fb      	adds	r3, r7, r3
   2e7ce:	781b      	ldrb	r3, [r3, #0]
   2e7d0:	2b04      	cmp	r3, #4
   2e7d2:	d109      	bne.n	2e7e8 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2e7d4:	4ba7      	ldr	r3, [pc, #668]	; (2ea74 <f_open+0x3a0>)
   2e7d6:	18fc      	adds	r4, r7, r3
   2e7d8:	2387      	movs	r3, #135	; 0x87
   2e7da:	009b      	lsls	r3, r3, #2
   2e7dc:	18fb      	adds	r3, r7, r3
   2e7de:	0018      	movs	r0, r3
   2e7e0:	4ba7      	ldr	r3, [pc, #668]	; (2ea80 <f_open+0x3ac>)
   2e7e2:	4798      	blx	r3
   2e7e4:	0003      	movs	r3, r0
   2e7e6:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2e7e8:	4ba1      	ldr	r3, [pc, #644]	; (2ea70 <f_open+0x39c>)
   2e7ea:	2294      	movs	r2, #148	; 0x94
   2e7ec:	0092      	lsls	r2, r2, #2
   2e7ee:	4694      	mov	ip, r2
   2e7f0:	44bc      	add	ip, r7
   2e7f2:	4463      	add	r3, ip
   2e7f4:	4a9e      	ldr	r2, [pc, #632]	; (2ea70 <f_open+0x39c>)
   2e7f6:	2194      	movs	r1, #148	; 0x94
   2e7f8:	0089      	lsls	r1, r1, #2
   2e7fa:	468c      	mov	ip, r1
   2e7fc:	44bc      	add	ip, r7
   2e7fe:	4462      	add	r2, ip
   2e800:	7812      	ldrb	r2, [r2, #0]
   2e802:	2108      	movs	r1, #8
   2e804:	430a      	orrs	r2, r1
   2e806:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2e808:	2387      	movs	r3, #135	; 0x87
   2e80a:	009b      	lsls	r3, r3, #2
   2e80c:	18fb      	adds	r3, r7, r3
   2e80e:	695b      	ldr	r3, [r3, #20]
   2e810:	2292      	movs	r2, #146	; 0x92
   2e812:	0092      	lsls	r2, r2, #2
   2e814:	18ba      	adds	r2, r7, r2
   2e816:	6013      	str	r3, [r2, #0]
   2e818:	e01c      	b.n	2e854 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2e81a:	2392      	movs	r3, #146	; 0x92
   2e81c:	009b      	lsls	r3, r3, #2
   2e81e:	18fb      	adds	r3, r7, r3
   2e820:	681b      	ldr	r3, [r3, #0]
   2e822:	330b      	adds	r3, #11
   2e824:	781b      	ldrb	r3, [r3, #0]
   2e826:	001a      	movs	r2, r3
   2e828:	2311      	movs	r3, #17
   2e82a:	4013      	ands	r3, r2
   2e82c:	d004      	beq.n	2e838 <f_open+0x164>
				res = FR_DENIED;
   2e82e:	4b91      	ldr	r3, [pc, #580]	; (2ea74 <f_open+0x3a0>)
   2e830:	18fb      	adds	r3, r7, r3
   2e832:	2207      	movs	r2, #7
   2e834:	701a      	strb	r2, [r3, #0]
   2e836:	e00d      	b.n	2e854 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e838:	4b8d      	ldr	r3, [pc, #564]	; (2ea70 <f_open+0x39c>)
   2e83a:	2294      	movs	r2, #148	; 0x94
   2e83c:	0092      	lsls	r2, r2, #2
   2e83e:	4694      	mov	ip, r2
   2e840:	44bc      	add	ip, r7
   2e842:	4463      	add	r3, ip
   2e844:	781b      	ldrb	r3, [r3, #0]
   2e846:	2204      	movs	r2, #4
   2e848:	4013      	ands	r3, r2
   2e84a:	d003      	beq.n	2e854 <f_open+0x180>
					res = FR_EXIST;
   2e84c:	4b89      	ldr	r3, [pc, #548]	; (2ea74 <f_open+0x3a0>)
   2e84e:	18fb      	adds	r3, r7, r3
   2e850:	2208      	movs	r2, #8
   2e852:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e854:	4b87      	ldr	r3, [pc, #540]	; (2ea74 <f_open+0x3a0>)
   2e856:	18fb      	adds	r3, r7, r3
   2e858:	781b      	ldrb	r3, [r3, #0]
   2e85a:	2b00      	cmp	r3, #0
   2e85c:	d000      	beq.n	2e860 <f_open+0x18c>
   2e85e:	e12f      	b.n	2eac0 <f_open+0x3ec>
   2e860:	4b83      	ldr	r3, [pc, #524]	; (2ea70 <f_open+0x39c>)
   2e862:	2294      	movs	r2, #148	; 0x94
   2e864:	0092      	lsls	r2, r2, #2
   2e866:	4694      	mov	ip, r2
   2e868:	44bc      	add	ip, r7
   2e86a:	4463      	add	r3, ip
   2e86c:	781b      	ldrb	r3, [r3, #0]
   2e86e:	2208      	movs	r2, #8
   2e870:	4013      	ands	r3, r2
   2e872:	d100      	bne.n	2e876 <f_open+0x1a2>
   2e874:	e124      	b.n	2eac0 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e876:	4b83      	ldr	r3, [pc, #524]	; (2ea84 <f_open+0x3b0>)
   2e878:	4798      	blx	r3
   2e87a:	0003      	movs	r3, r0
   2e87c:	2291      	movs	r2, #145	; 0x91
   2e87e:	0092      	lsls	r2, r2, #2
   2e880:	18ba      	adds	r2, r7, r2
   2e882:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e884:	2392      	movs	r3, #146	; 0x92
   2e886:	009b      	lsls	r3, r3, #2
   2e888:	18fb      	adds	r3, r7, r3
   2e88a:	681b      	ldr	r3, [r3, #0]
   2e88c:	330e      	adds	r3, #14
   2e88e:	2291      	movs	r2, #145	; 0x91
   2e890:	0092      	lsls	r2, r2, #2
   2e892:	18ba      	adds	r2, r7, r2
   2e894:	6812      	ldr	r2, [r2, #0]
   2e896:	b2d2      	uxtb	r2, r2
   2e898:	701a      	strb	r2, [r3, #0]
   2e89a:	2392      	movs	r3, #146	; 0x92
   2e89c:	009b      	lsls	r3, r3, #2
   2e89e:	18fb      	adds	r3, r7, r3
   2e8a0:	681b      	ldr	r3, [r3, #0]
   2e8a2:	330f      	adds	r3, #15
   2e8a4:	2291      	movs	r2, #145	; 0x91
   2e8a6:	0092      	lsls	r2, r2, #2
   2e8a8:	18ba      	adds	r2, r7, r2
   2e8aa:	6812      	ldr	r2, [r2, #0]
   2e8ac:	b292      	uxth	r2, r2
   2e8ae:	0a12      	lsrs	r2, r2, #8
   2e8b0:	b292      	uxth	r2, r2
   2e8b2:	b2d2      	uxtb	r2, r2
   2e8b4:	701a      	strb	r2, [r3, #0]
   2e8b6:	2392      	movs	r3, #146	; 0x92
   2e8b8:	009b      	lsls	r3, r3, #2
   2e8ba:	18fb      	adds	r3, r7, r3
   2e8bc:	681b      	ldr	r3, [r3, #0]
   2e8be:	3310      	adds	r3, #16
   2e8c0:	2291      	movs	r2, #145	; 0x91
   2e8c2:	0092      	lsls	r2, r2, #2
   2e8c4:	18ba      	adds	r2, r7, r2
   2e8c6:	6812      	ldr	r2, [r2, #0]
   2e8c8:	0c12      	lsrs	r2, r2, #16
   2e8ca:	b2d2      	uxtb	r2, r2
   2e8cc:	701a      	strb	r2, [r3, #0]
   2e8ce:	2392      	movs	r3, #146	; 0x92
   2e8d0:	009b      	lsls	r3, r3, #2
   2e8d2:	18fb      	adds	r3, r7, r3
   2e8d4:	681b      	ldr	r3, [r3, #0]
   2e8d6:	3311      	adds	r3, #17
   2e8d8:	2291      	movs	r2, #145	; 0x91
   2e8da:	0092      	lsls	r2, r2, #2
   2e8dc:	18ba      	adds	r2, r7, r2
   2e8de:	6812      	ldr	r2, [r2, #0]
   2e8e0:	0e12      	lsrs	r2, r2, #24
   2e8e2:	b2d2      	uxtb	r2, r2
   2e8e4:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e8e6:	2392      	movs	r3, #146	; 0x92
   2e8e8:	009b      	lsls	r3, r3, #2
   2e8ea:	18fb      	adds	r3, r7, r3
   2e8ec:	681b      	ldr	r3, [r3, #0]
   2e8ee:	330b      	adds	r3, #11
   2e8f0:	2200      	movs	r2, #0
   2e8f2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e8f4:	2392      	movs	r3, #146	; 0x92
   2e8f6:	009b      	lsls	r3, r3, #2
   2e8f8:	18fb      	adds	r3, r7, r3
   2e8fa:	681b      	ldr	r3, [r3, #0]
   2e8fc:	331c      	adds	r3, #28
   2e8fe:	2200      	movs	r2, #0
   2e900:	701a      	strb	r2, [r3, #0]
   2e902:	2392      	movs	r3, #146	; 0x92
   2e904:	009b      	lsls	r3, r3, #2
   2e906:	18fb      	adds	r3, r7, r3
   2e908:	681b      	ldr	r3, [r3, #0]
   2e90a:	331d      	adds	r3, #29
   2e90c:	2200      	movs	r2, #0
   2e90e:	701a      	strb	r2, [r3, #0]
   2e910:	2392      	movs	r3, #146	; 0x92
   2e912:	009b      	lsls	r3, r3, #2
   2e914:	18fb      	adds	r3, r7, r3
   2e916:	681b      	ldr	r3, [r3, #0]
   2e918:	331e      	adds	r3, #30
   2e91a:	2200      	movs	r2, #0
   2e91c:	701a      	strb	r2, [r3, #0]
   2e91e:	2392      	movs	r3, #146	; 0x92
   2e920:	009b      	lsls	r3, r3, #2
   2e922:	18fb      	adds	r3, r7, r3
   2e924:	681b      	ldr	r3, [r3, #0]
   2e926:	331f      	adds	r3, #31
   2e928:	2200      	movs	r2, #0
   2e92a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e92c:	2392      	movs	r3, #146	; 0x92
   2e92e:	009b      	lsls	r3, r3, #2
   2e930:	18fb      	adds	r3, r7, r3
   2e932:	681b      	ldr	r3, [r3, #0]
   2e934:	3315      	adds	r3, #21
   2e936:	781b      	ldrb	r3, [r3, #0]
   2e938:	021b      	lsls	r3, r3, #8
   2e93a:	b21a      	sxth	r2, r3
   2e93c:	2392      	movs	r3, #146	; 0x92
   2e93e:	009b      	lsls	r3, r3, #2
   2e940:	18fb      	adds	r3, r7, r3
   2e942:	681b      	ldr	r3, [r3, #0]
   2e944:	3314      	adds	r3, #20
   2e946:	781b      	ldrb	r3, [r3, #0]
   2e948:	b21b      	sxth	r3, r3
   2e94a:	4313      	orrs	r3, r2
   2e94c:	b21b      	sxth	r3, r3
   2e94e:	b29b      	uxth	r3, r3
   2e950:	041b      	lsls	r3, r3, #16
   2e952:	2292      	movs	r2, #146	; 0x92
   2e954:	0092      	lsls	r2, r2, #2
   2e956:	18ba      	adds	r2, r7, r2
   2e958:	6812      	ldr	r2, [r2, #0]
   2e95a:	321b      	adds	r2, #27
   2e95c:	7812      	ldrb	r2, [r2, #0]
   2e95e:	0212      	lsls	r2, r2, #8
   2e960:	b211      	sxth	r1, r2
   2e962:	2292      	movs	r2, #146	; 0x92
   2e964:	0092      	lsls	r2, r2, #2
   2e966:	18ba      	adds	r2, r7, r2
   2e968:	6812      	ldr	r2, [r2, #0]
   2e96a:	321a      	adds	r2, #26
   2e96c:	7812      	ldrb	r2, [r2, #0]
   2e96e:	b212      	sxth	r2, r2
   2e970:	430a      	orrs	r2, r1
   2e972:	b212      	sxth	r2, r2
   2e974:	b292      	uxth	r2, r2
   2e976:	4313      	orrs	r3, r2
   2e978:	2290      	movs	r2, #144	; 0x90
   2e97a:	0092      	lsls	r2, r2, #2
   2e97c:	18ba      	adds	r2, r7, r2
   2e97e:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2e980:	2392      	movs	r3, #146	; 0x92
   2e982:	009b      	lsls	r3, r3, #2
   2e984:	18fb      	adds	r3, r7, r3
   2e986:	681b      	ldr	r3, [r3, #0]
   2e988:	331a      	adds	r3, #26
   2e98a:	2200      	movs	r2, #0
   2e98c:	701a      	strb	r2, [r3, #0]
   2e98e:	2392      	movs	r3, #146	; 0x92
   2e990:	009b      	lsls	r3, r3, #2
   2e992:	18fb      	adds	r3, r7, r3
   2e994:	681b      	ldr	r3, [r3, #0]
   2e996:	331b      	adds	r3, #27
   2e998:	2200      	movs	r2, #0
   2e99a:	701a      	strb	r2, [r3, #0]
   2e99c:	2392      	movs	r3, #146	; 0x92
   2e99e:	009b      	lsls	r3, r3, #2
   2e9a0:	18fb      	adds	r3, r7, r3
   2e9a2:	681b      	ldr	r3, [r3, #0]
   2e9a4:	3314      	adds	r3, #20
   2e9a6:	2200      	movs	r2, #0
   2e9a8:	701a      	strb	r2, [r3, #0]
   2e9aa:	2392      	movs	r3, #146	; 0x92
   2e9ac:	009b      	lsls	r3, r3, #2
   2e9ae:	18fb      	adds	r3, r7, r3
   2e9b0:	681b      	ldr	r3, [r3, #0]
   2e9b2:	3315      	adds	r3, #21
   2e9b4:	2200      	movs	r2, #0
   2e9b6:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2e9b8:	2387      	movs	r3, #135	; 0x87
   2e9ba:	009b      	lsls	r3, r3, #2
   2e9bc:	18fb      	adds	r3, r7, r3
   2e9be:	681b      	ldr	r3, [r3, #0]
   2e9c0:	2201      	movs	r2, #1
   2e9c2:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e9c4:	2390      	movs	r3, #144	; 0x90
   2e9c6:	009b      	lsls	r3, r3, #2
   2e9c8:	18fb      	adds	r3, r7, r3
   2e9ca:	681b      	ldr	r3, [r3, #0]
   2e9cc:	2b00      	cmp	r3, #0
   2e9ce:	d100      	bne.n	2e9d2 <f_open+0x2fe>
   2e9d0:	e076      	b.n	2eac0 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e9d2:	2387      	movs	r3, #135	; 0x87
   2e9d4:	009b      	lsls	r3, r3, #2
   2e9d6:	18fb      	adds	r3, r7, r3
   2e9d8:	681b      	ldr	r3, [r3, #0]
   2e9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e9dc:	2291      	movs	r2, #145	; 0x91
   2e9de:	0092      	lsls	r2, r2, #2
   2e9e0:	18ba      	adds	r2, r7, r2
   2e9e2:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e9e4:	2387      	movs	r3, #135	; 0x87
   2e9e6:	009b      	lsls	r3, r3, #2
   2e9e8:	18fb      	adds	r3, r7, r3
   2e9ea:	681b      	ldr	r3, [r3, #0]
   2e9ec:	4a21      	ldr	r2, [pc, #132]	; (2ea74 <f_open+0x3a0>)
   2e9ee:	18bc      	adds	r4, r7, r2
   2e9f0:	2290      	movs	r2, #144	; 0x90
   2e9f2:	0092      	lsls	r2, r2, #2
   2e9f4:	18ba      	adds	r2, r7, r2
   2e9f6:	6812      	ldr	r2, [r2, #0]
   2e9f8:	0011      	movs	r1, r2
   2e9fa:	0018      	movs	r0, r3
   2e9fc:	4b22      	ldr	r3, [pc, #136]	; (2ea88 <f_open+0x3b4>)
   2e9fe:	4798      	blx	r3
   2ea00:	0003      	movs	r3, r0
   2ea02:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2ea04:	4b1b      	ldr	r3, [pc, #108]	; (2ea74 <f_open+0x3a0>)
   2ea06:	18fb      	adds	r3, r7, r3
   2ea08:	781b      	ldrb	r3, [r3, #0]
   2ea0a:	2b00      	cmp	r3, #0
   2ea0c:	d158      	bne.n	2eac0 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2ea0e:	2387      	movs	r3, #135	; 0x87
   2ea10:	009b      	lsls	r3, r3, #2
   2ea12:	18fb      	adds	r3, r7, r3
   2ea14:	681b      	ldr	r3, [r3, #0]
   2ea16:	2290      	movs	r2, #144	; 0x90
   2ea18:	0092      	lsls	r2, r2, #2
   2ea1a:	18ba      	adds	r2, r7, r2
   2ea1c:	6812      	ldr	r2, [r2, #0]
   2ea1e:	3a01      	subs	r2, #1
   2ea20:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2ea22:	2387      	movs	r3, #135	; 0x87
   2ea24:	009b      	lsls	r3, r3, #2
   2ea26:	18fb      	adds	r3, r7, r3
   2ea28:	681b      	ldr	r3, [r3, #0]
   2ea2a:	4a12      	ldr	r2, [pc, #72]	; (2ea74 <f_open+0x3a0>)
   2ea2c:	18bc      	adds	r4, r7, r2
   2ea2e:	2291      	movs	r2, #145	; 0x91
   2ea30:	0092      	lsls	r2, r2, #2
   2ea32:	18ba      	adds	r2, r7, r2
   2ea34:	6812      	ldr	r2, [r2, #0]
   2ea36:	0011      	movs	r1, r2
   2ea38:	0018      	movs	r0, r3
   2ea3a:	4b14      	ldr	r3, [pc, #80]	; (2ea8c <f_open+0x3b8>)
   2ea3c:	4798      	blx	r3
   2ea3e:	0003      	movs	r3, r0
   2ea40:	7023      	strb	r3, [r4, #0]
   2ea42:	e03d      	b.n	2eac0 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2ea44:	4b0b      	ldr	r3, [pc, #44]	; (2ea74 <f_open+0x3a0>)
   2ea46:	18fb      	adds	r3, r7, r3
   2ea48:	781b      	ldrb	r3, [r3, #0]
   2ea4a:	2b00      	cmp	r3, #0
   2ea4c:	d138      	bne.n	2eac0 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2ea4e:	2392      	movs	r3, #146	; 0x92
   2ea50:	009b      	lsls	r3, r3, #2
   2ea52:	18fb      	adds	r3, r7, r3
   2ea54:	681b      	ldr	r3, [r3, #0]
   2ea56:	330b      	adds	r3, #11
   2ea58:	781b      	ldrb	r3, [r3, #0]
   2ea5a:	001a      	movs	r2, r3
   2ea5c:	2310      	movs	r3, #16
   2ea5e:	4013      	ands	r3, r2
   2ea60:	d016      	beq.n	2ea90 <f_open+0x3bc>
				res = FR_NO_FILE;
   2ea62:	4b04      	ldr	r3, [pc, #16]	; (2ea74 <f_open+0x3a0>)
   2ea64:	18fb      	adds	r3, r7, r3
   2ea66:	2204      	movs	r2, #4
   2ea68:	701a      	strb	r2, [r3, #0]
   2ea6a:	e029      	b.n	2eac0 <f_open+0x3ec>
   2ea6c:	fffffdac 	.word	0xfffffdac
   2ea70:	fffffdb7 	.word	0xfffffdb7
   2ea74:	0000024f 	.word	0x0000024f
   2ea78:	0002e02d 	.word	0x0002e02d
   2ea7c:	0002de21 	.word	0x0002de21
   2ea80:	0002d671 	.word	0x0002d671
   2ea84:	0002c469 	.word	0x0002c469
   2ea88:	0002cbed 	.word	0x0002cbed
   2ea8c:	0002c5ad 	.word	0x0002c5ad
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2ea90:	4b5a      	ldr	r3, [pc, #360]	; (2ebfc <f_open+0x528>)
   2ea92:	2294      	movs	r2, #148	; 0x94
   2ea94:	0092      	lsls	r2, r2, #2
   2ea96:	4694      	mov	ip, r2
   2ea98:	44bc      	add	ip, r7
   2ea9a:	4463      	add	r3, ip
   2ea9c:	781b      	ldrb	r3, [r3, #0]
   2ea9e:	2202      	movs	r2, #2
   2eaa0:	4013      	ands	r3, r2
   2eaa2:	d00d      	beq.n	2eac0 <f_open+0x3ec>
   2eaa4:	2392      	movs	r3, #146	; 0x92
   2eaa6:	009b      	lsls	r3, r3, #2
   2eaa8:	18fb      	adds	r3, r7, r3
   2eaaa:	681b      	ldr	r3, [r3, #0]
   2eaac:	330b      	adds	r3, #11
   2eaae:	781b      	ldrb	r3, [r3, #0]
   2eab0:	001a      	movs	r2, r3
   2eab2:	2301      	movs	r3, #1
   2eab4:	4013      	ands	r3, r2
   2eab6:	d003      	beq.n	2eac0 <f_open+0x3ec>
					res = FR_DENIED;
   2eab8:	4b51      	ldr	r3, [pc, #324]	; (2ec00 <f_open+0x52c>)
   2eaba:	18fb      	adds	r3, r7, r3
   2eabc:	2207      	movs	r2, #7
   2eabe:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2eac0:	4b4f      	ldr	r3, [pc, #316]	; (2ec00 <f_open+0x52c>)
   2eac2:	18fb      	adds	r3, r7, r3
   2eac4:	781b      	ldrb	r3, [r3, #0]
   2eac6:	2b00      	cmp	r3, #0
   2eac8:	d126      	bne.n	2eb18 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2eaca:	4b4c      	ldr	r3, [pc, #304]	; (2ebfc <f_open+0x528>)
   2eacc:	2294      	movs	r2, #148	; 0x94
   2eace:	0092      	lsls	r2, r2, #2
   2ead0:	4694      	mov	ip, r2
   2ead2:	44bc      	add	ip, r7
   2ead4:	4463      	add	r3, ip
   2ead6:	781b      	ldrb	r3, [r3, #0]
   2ead8:	2208      	movs	r2, #8
   2eada:	4013      	ands	r3, r2
   2eadc:	d00f      	beq.n	2eafe <f_open+0x42a>
			mode |= FA__WRITTEN;
   2eade:	4b47      	ldr	r3, [pc, #284]	; (2ebfc <f_open+0x528>)
   2eae0:	2294      	movs	r2, #148	; 0x94
   2eae2:	0092      	lsls	r2, r2, #2
   2eae4:	4694      	mov	ip, r2
   2eae6:	44bc      	add	ip, r7
   2eae8:	4463      	add	r3, ip
   2eaea:	4a44      	ldr	r2, [pc, #272]	; (2ebfc <f_open+0x528>)
   2eaec:	2194      	movs	r1, #148	; 0x94
   2eaee:	0089      	lsls	r1, r1, #2
   2eaf0:	468c      	mov	ip, r1
   2eaf2:	44bc      	add	ip, r7
   2eaf4:	4462      	add	r2, ip
   2eaf6:	7812      	ldrb	r2, [r2, #0]
   2eaf8:	2120      	movs	r1, #32
   2eafa:	430a      	orrs	r2, r1
   2eafc:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2eafe:	2387      	movs	r3, #135	; 0x87
   2eb00:	009b      	lsls	r3, r3, #2
   2eb02:	18fb      	adds	r3, r7, r3
   2eb04:	681b      	ldr	r3, [r3, #0]
   2eb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2eb08:	68fb      	ldr	r3, [r7, #12]
   2eb0a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2eb0c:	68fb      	ldr	r3, [r7, #12]
   2eb0e:	2292      	movs	r2, #146	; 0x92
   2eb10:	0092      	lsls	r2, r2, #2
   2eb12:	18ba      	adds	r2, r7, r2
   2eb14:	6812      	ldr	r2, [r2, #0]
   2eb16:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2eb18:	4b39      	ldr	r3, [pc, #228]	; (2ec00 <f_open+0x52c>)
   2eb1a:	18fb      	adds	r3, r7, r3
   2eb1c:	781b      	ldrb	r3, [r3, #0]
   2eb1e:	2b00      	cmp	r3, #0
   2eb20:	d163      	bne.n	2ebea <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2eb22:	68fb      	ldr	r3, [r7, #12]
   2eb24:	4a35      	ldr	r2, [pc, #212]	; (2ebfc <f_open+0x528>)
   2eb26:	2194      	movs	r1, #148	; 0x94
   2eb28:	0089      	lsls	r1, r1, #2
   2eb2a:	468c      	mov	ip, r1
   2eb2c:	44bc      	add	ip, r7
   2eb2e:	4462      	add	r2, ip
   2eb30:	7812      	ldrb	r2, [r2, #0]
   2eb32:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2eb34:	2392      	movs	r3, #146	; 0x92
   2eb36:	009b      	lsls	r3, r3, #2
   2eb38:	18fb      	adds	r3, r7, r3
   2eb3a:	681b      	ldr	r3, [r3, #0]
   2eb3c:	3315      	adds	r3, #21
   2eb3e:	781b      	ldrb	r3, [r3, #0]
   2eb40:	021b      	lsls	r3, r3, #8
   2eb42:	b21a      	sxth	r2, r3
   2eb44:	2392      	movs	r3, #146	; 0x92
   2eb46:	009b      	lsls	r3, r3, #2
   2eb48:	18fb      	adds	r3, r7, r3
   2eb4a:	681b      	ldr	r3, [r3, #0]
   2eb4c:	3314      	adds	r3, #20
   2eb4e:	781b      	ldrb	r3, [r3, #0]
   2eb50:	b21b      	sxth	r3, r3
   2eb52:	4313      	orrs	r3, r2
   2eb54:	b21b      	sxth	r3, r3
   2eb56:	b29b      	uxth	r3, r3
   2eb58:	041b      	lsls	r3, r3, #16
   2eb5a:	2292      	movs	r2, #146	; 0x92
   2eb5c:	0092      	lsls	r2, r2, #2
   2eb5e:	18ba      	adds	r2, r7, r2
   2eb60:	6812      	ldr	r2, [r2, #0]
   2eb62:	321b      	adds	r2, #27
   2eb64:	7812      	ldrb	r2, [r2, #0]
   2eb66:	0212      	lsls	r2, r2, #8
   2eb68:	b211      	sxth	r1, r2
   2eb6a:	2292      	movs	r2, #146	; 0x92
   2eb6c:	0092      	lsls	r2, r2, #2
   2eb6e:	18ba      	adds	r2, r7, r2
   2eb70:	6812      	ldr	r2, [r2, #0]
   2eb72:	321a      	adds	r2, #26
   2eb74:	7812      	ldrb	r2, [r2, #0]
   2eb76:	b212      	sxth	r2, r2
   2eb78:	430a      	orrs	r2, r1
   2eb7a:	b212      	sxth	r2, r2
   2eb7c:	b292      	uxth	r2, r2
   2eb7e:	431a      	orrs	r2, r3
   2eb80:	68fb      	ldr	r3, [r7, #12]
   2eb82:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2eb84:	2392      	movs	r3, #146	; 0x92
   2eb86:	009b      	lsls	r3, r3, #2
   2eb88:	18fb      	adds	r3, r7, r3
   2eb8a:	681b      	ldr	r3, [r3, #0]
   2eb8c:	331f      	adds	r3, #31
   2eb8e:	781b      	ldrb	r3, [r3, #0]
   2eb90:	061a      	lsls	r2, r3, #24
   2eb92:	2392      	movs	r3, #146	; 0x92
   2eb94:	009b      	lsls	r3, r3, #2
   2eb96:	18fb      	adds	r3, r7, r3
   2eb98:	681b      	ldr	r3, [r3, #0]
   2eb9a:	331e      	adds	r3, #30
   2eb9c:	781b      	ldrb	r3, [r3, #0]
   2eb9e:	041b      	lsls	r3, r3, #16
   2eba0:	4313      	orrs	r3, r2
   2eba2:	2292      	movs	r2, #146	; 0x92
   2eba4:	0092      	lsls	r2, r2, #2
   2eba6:	18ba      	adds	r2, r7, r2
   2eba8:	6812      	ldr	r2, [r2, #0]
   2ebaa:	321d      	adds	r2, #29
   2ebac:	7812      	ldrb	r2, [r2, #0]
   2ebae:	0212      	lsls	r2, r2, #8
   2ebb0:	4313      	orrs	r3, r2
   2ebb2:	2292      	movs	r2, #146	; 0x92
   2ebb4:	0092      	lsls	r2, r2, #2
   2ebb6:	18ba      	adds	r2, r7, r2
   2ebb8:	6812      	ldr	r2, [r2, #0]
   2ebba:	321c      	adds	r2, #28
   2ebbc:	7812      	ldrb	r2, [r2, #0]
   2ebbe:	431a      	orrs	r2, r3
   2ebc0:	68fb      	ldr	r3, [r7, #12]
   2ebc2:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2ebc4:	68fb      	ldr	r3, [r7, #12]
   2ebc6:	2200      	movs	r2, #0
   2ebc8:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2ebca:	68fb      	ldr	r3, [r7, #12]
   2ebcc:	2200      	movs	r2, #0
   2ebce:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2ebd0:	2387      	movs	r3, #135	; 0x87
   2ebd2:	009b      	lsls	r3, r3, #2
   2ebd4:	18fb      	adds	r3, r7, r3
   2ebd6:	681a      	ldr	r2, [r3, #0]
   2ebd8:	68fb      	ldr	r3, [r7, #12]
   2ebda:	601a      	str	r2, [r3, #0]
   2ebdc:	2387      	movs	r3, #135	; 0x87
   2ebde:	009b      	lsls	r3, r3, #2
   2ebe0:	18fb      	adds	r3, r7, r3
   2ebe2:	681b      	ldr	r3, [r3, #0]
   2ebe4:	88da      	ldrh	r2, [r3, #6]
   2ebe6:	68fb      	ldr	r3, [r7, #12]
   2ebe8:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2ebea:	4b05      	ldr	r3, [pc, #20]	; (2ec00 <f_open+0x52c>)
   2ebec:	18fb      	adds	r3, r7, r3
   2ebee:	781b      	ldrb	r3, [r3, #0]
}
   2ebf0:	0018      	movs	r0, r3
   2ebf2:	46bd      	mov	sp, r7
   2ebf4:	2395      	movs	r3, #149	; 0x95
   2ebf6:	009b      	lsls	r3, r3, #2
   2ebf8:	449d      	add	sp, r3
   2ebfa:	bd90      	pop	{r4, r7, pc}
   2ebfc:	fffffdb7 	.word	0xfffffdb7
   2ec00:	0000024f 	.word	0x0000024f

0002ec04 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2ec04:	b590      	push	{r4, r7, lr}
   2ec06:	b08b      	sub	sp, #44	; 0x2c
   2ec08:	af00      	add	r7, sp, #0
   2ec0a:	60f8      	str	r0, [r7, #12]
   2ec0c:	60b9      	str	r1, [r7, #8]
   2ec0e:	607a      	str	r2, [r7, #4]
   2ec10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2ec12:	68bb      	ldr	r3, [r7, #8]
   2ec14:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2ec16:	683b      	ldr	r3, [r7, #0]
   2ec18:	2200      	movs	r2, #0
   2ec1a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2ec1c:	68fb      	ldr	r3, [r7, #12]
   2ec1e:	681a      	ldr	r2, [r3, #0]
   2ec20:	68fb      	ldr	r3, [r7, #12]
   2ec22:	889b      	ldrh	r3, [r3, #4]
   2ec24:	2117      	movs	r1, #23
   2ec26:	187c      	adds	r4, r7, r1
   2ec28:	0019      	movs	r1, r3
   2ec2a:	0010      	movs	r0, r2
   2ec2c:	4bc3      	ldr	r3, [pc, #780]	; (2ef3c <f_write+0x338>)
   2ec2e:	4798      	blx	r3
   2ec30:	0003      	movs	r3, r0
   2ec32:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2ec34:	2317      	movs	r3, #23
   2ec36:	18fb      	adds	r3, r7, r3
   2ec38:	781b      	ldrb	r3, [r3, #0]
   2ec3a:	2b00      	cmp	r3, #0
   2ec3c:	d003      	beq.n	2ec46 <f_write+0x42>
   2ec3e:	2317      	movs	r3, #23
   2ec40:	18fb      	adds	r3, r7, r3
   2ec42:	781b      	ldrb	r3, [r3, #0]
   2ec44:	e176      	b.n	2ef34 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2ec46:	68fb      	ldr	r3, [r7, #12]
   2ec48:	799b      	ldrb	r3, [r3, #6]
   2ec4a:	b25b      	sxtb	r3, r3
   2ec4c:	2b00      	cmp	r3, #0
   2ec4e:	da01      	bge.n	2ec54 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2ec50:	2302      	movs	r3, #2
   2ec52:	e16f      	b.n	2ef34 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2ec54:	68fb      	ldr	r3, [r7, #12]
   2ec56:	799b      	ldrb	r3, [r3, #6]
   2ec58:	001a      	movs	r2, r3
   2ec5a:	2302      	movs	r3, #2
   2ec5c:	4013      	ands	r3, r2
   2ec5e:	d101      	bne.n	2ec64 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2ec60:	2307      	movs	r3, #7
   2ec62:	e167      	b.n	2ef34 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2ec64:	68fb      	ldr	r3, [r7, #12]
   2ec66:	68da      	ldr	r2, [r3, #12]
   2ec68:	687b      	ldr	r3, [r7, #4]
   2ec6a:	18d2      	adds	r2, r2, r3
   2ec6c:	68fb      	ldr	r3, [r7, #12]
   2ec6e:	68db      	ldr	r3, [r3, #12]
   2ec70:	429a      	cmp	r2, r3
   2ec72:	d300      	bcc.n	2ec76 <f_write+0x72>
   2ec74:	e146      	b.n	2ef04 <f_write+0x300>
   2ec76:	2300      	movs	r3, #0
   2ec78:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2ec7a:	e143      	b.n	2ef04 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2ec7c:	68fb      	ldr	r3, [r7, #12]
   2ec7e:	689b      	ldr	r3, [r3, #8]
   2ec80:	05db      	lsls	r3, r3, #23
   2ec82:	0ddb      	lsrs	r3, r3, #23
   2ec84:	d000      	beq.n	2ec88 <f_write+0x84>
   2ec86:	e0f6      	b.n	2ee76 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2ec88:	68fb      	ldr	r3, [r7, #12]
   2ec8a:	689b      	ldr	r3, [r3, #8]
   2ec8c:	0a5b      	lsrs	r3, r3, #9
   2ec8e:	b2da      	uxtb	r2, r3
   2ec90:	68fb      	ldr	r3, [r7, #12]
   2ec92:	681b      	ldr	r3, [r3, #0]
   2ec94:	789b      	ldrb	r3, [r3, #2]
   2ec96:	3b01      	subs	r3, #1
   2ec98:	b2d9      	uxtb	r1, r3
   2ec9a:	2316      	movs	r3, #22
   2ec9c:	18fb      	adds	r3, r7, r3
   2ec9e:	400a      	ands	r2, r1
   2eca0:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2eca2:	2316      	movs	r3, #22
   2eca4:	18fb      	adds	r3, r7, r3
   2eca6:	781b      	ldrb	r3, [r3, #0]
   2eca8:	2b00      	cmp	r3, #0
   2ecaa:	d140      	bne.n	2ed2e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2ecac:	68fb      	ldr	r3, [r7, #12]
   2ecae:	689b      	ldr	r3, [r3, #8]
   2ecb0:	2b00      	cmp	r3, #0
   2ecb2:	d111      	bne.n	2ecd8 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2ecb4:	68fb      	ldr	r3, [r7, #12]
   2ecb6:	691b      	ldr	r3, [r3, #16]
   2ecb8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ecbc:	2b00      	cmp	r3, #0
   2ecbe:	d115      	bne.n	2ecec <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2ecc0:	68fb      	ldr	r3, [r7, #12]
   2ecc2:	681b      	ldr	r3, [r3, #0]
   2ecc4:	2100      	movs	r1, #0
   2ecc6:	0018      	movs	r0, r3
   2ecc8:	4b9d      	ldr	r3, [pc, #628]	; (2ef40 <f_write+0x33c>)
   2ecca:	4798      	blx	r3
   2eccc:	0003      	movs	r3, r0
   2ecce:	627b      	str	r3, [r7, #36]	; 0x24
   2ecd0:	68fb      	ldr	r3, [r7, #12]
   2ecd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ecd4:	611a      	str	r2, [r3, #16]
   2ecd6:	e009      	b.n	2ecec <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2ecd8:	68fb      	ldr	r3, [r7, #12]
   2ecda:	681a      	ldr	r2, [r3, #0]
   2ecdc:	68fb      	ldr	r3, [r7, #12]
   2ecde:	695b      	ldr	r3, [r3, #20]
   2ece0:	0019      	movs	r1, r3
   2ece2:	0010      	movs	r0, r2
   2ece4:	4b96      	ldr	r3, [pc, #600]	; (2ef40 <f_write+0x33c>)
   2ece6:	4798      	blx	r3
   2ece8:	0003      	movs	r3, r0
   2ecea:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ecee:	2b00      	cmp	r3, #0
   2ecf0:	d100      	bne.n	2ecf4 <f_write+0xf0>
   2ecf2:	e10c      	b.n	2ef0e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ecf6:	2b01      	cmp	r3, #1
   2ecf8:	d109      	bne.n	2ed0e <f_write+0x10a>
   2ecfa:	68fb      	ldr	r3, [r7, #12]
   2ecfc:	799b      	ldrb	r3, [r3, #6]
   2ecfe:	2280      	movs	r2, #128	; 0x80
   2ed00:	4252      	negs	r2, r2
   2ed02:	4313      	orrs	r3, r2
   2ed04:	b2da      	uxtb	r2, r3
   2ed06:	68fb      	ldr	r3, [r7, #12]
   2ed08:	719a      	strb	r2, [r3, #6]
   2ed0a:	2302      	movs	r3, #2
   2ed0c:	e112      	b.n	2ef34 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed10:	3301      	adds	r3, #1
   2ed12:	d109      	bne.n	2ed28 <f_write+0x124>
   2ed14:	68fb      	ldr	r3, [r7, #12]
   2ed16:	799b      	ldrb	r3, [r3, #6]
   2ed18:	2280      	movs	r2, #128	; 0x80
   2ed1a:	4252      	negs	r2, r2
   2ed1c:	4313      	orrs	r3, r2
   2ed1e:	b2da      	uxtb	r2, r3
   2ed20:	68fb      	ldr	r3, [r7, #12]
   2ed22:	719a      	strb	r2, [r3, #6]
   2ed24:	2301      	movs	r3, #1
   2ed26:	e105      	b.n	2ef34 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2ed28:	68fb      	ldr	r3, [r7, #12]
   2ed2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ed2c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2ed2e:	68fb      	ldr	r3, [r7, #12]
   2ed30:	681b      	ldr	r3, [r3, #0]
   2ed32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ed34:	68fb      	ldr	r3, [r7, #12]
   2ed36:	699b      	ldr	r3, [r3, #24]
   2ed38:	429a      	cmp	r2, r3
   2ed3a:	d111      	bne.n	2ed60 <f_write+0x15c>
   2ed3c:	68fb      	ldr	r3, [r7, #12]
   2ed3e:	681b      	ldr	r3, [r3, #0]
   2ed40:	2100      	movs	r1, #0
   2ed42:	0018      	movs	r0, r3
   2ed44:	4b7f      	ldr	r3, [pc, #508]	; (2ef44 <f_write+0x340>)
   2ed46:	4798      	blx	r3
   2ed48:	1e03      	subs	r3, r0, #0
   2ed4a:	d009      	beq.n	2ed60 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2ed4c:	68fb      	ldr	r3, [r7, #12]
   2ed4e:	799b      	ldrb	r3, [r3, #6]
   2ed50:	2280      	movs	r2, #128	; 0x80
   2ed52:	4252      	negs	r2, r2
   2ed54:	4313      	orrs	r3, r2
   2ed56:	b2da      	uxtb	r2, r3
   2ed58:	68fb      	ldr	r3, [r7, #12]
   2ed5a:	719a      	strb	r2, [r3, #6]
   2ed5c:	2301      	movs	r3, #1
   2ed5e:	e0e9      	b.n	2ef34 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2ed60:	68fb      	ldr	r3, [r7, #12]
   2ed62:	681a      	ldr	r2, [r3, #0]
   2ed64:	68fb      	ldr	r3, [r7, #12]
   2ed66:	695b      	ldr	r3, [r3, #20]
   2ed68:	0019      	movs	r1, r3
   2ed6a:	0010      	movs	r0, r2
   2ed6c:	4b76      	ldr	r3, [pc, #472]	; (2ef48 <f_write+0x344>)
   2ed6e:	4798      	blx	r3
   2ed70:	0003      	movs	r3, r0
   2ed72:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2ed74:	693b      	ldr	r3, [r7, #16]
   2ed76:	2b00      	cmp	r3, #0
   2ed78:	d109      	bne.n	2ed8e <f_write+0x18a>
   2ed7a:	68fb      	ldr	r3, [r7, #12]
   2ed7c:	799b      	ldrb	r3, [r3, #6]
   2ed7e:	2280      	movs	r2, #128	; 0x80
   2ed80:	4252      	negs	r2, r2
   2ed82:	4313      	orrs	r3, r2
   2ed84:	b2da      	uxtb	r2, r3
   2ed86:	68fb      	ldr	r3, [r7, #12]
   2ed88:	719a      	strb	r2, [r3, #6]
   2ed8a:	2302      	movs	r3, #2
   2ed8c:	e0d2      	b.n	2ef34 <f_write+0x330>
			sect += csect;
   2ed8e:	2316      	movs	r3, #22
   2ed90:	18fb      	adds	r3, r7, r3
   2ed92:	781b      	ldrb	r3, [r3, #0]
   2ed94:	693a      	ldr	r2, [r7, #16]
   2ed96:	18d3      	adds	r3, r2, r3
   2ed98:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2ed9a:	687b      	ldr	r3, [r7, #4]
   2ed9c:	0a5b      	lsrs	r3, r3, #9
   2ed9e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2eda0:	69fb      	ldr	r3, [r7, #28]
   2eda2:	2b00      	cmp	r3, #0
   2eda4:	d048      	beq.n	2ee38 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2eda6:	2316      	movs	r3, #22
   2eda8:	18fb      	adds	r3, r7, r3
   2edaa:	781a      	ldrb	r2, [r3, #0]
   2edac:	69fb      	ldr	r3, [r7, #28]
   2edae:	18d2      	adds	r2, r2, r3
   2edb0:	68fb      	ldr	r3, [r7, #12]
   2edb2:	681b      	ldr	r3, [r3, #0]
   2edb4:	789b      	ldrb	r3, [r3, #2]
   2edb6:	429a      	cmp	r2, r3
   2edb8:	d908      	bls.n	2edcc <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2edba:	68fb      	ldr	r3, [r7, #12]
   2edbc:	681b      	ldr	r3, [r3, #0]
   2edbe:	789b      	ldrb	r3, [r3, #2]
   2edc0:	001a      	movs	r2, r3
   2edc2:	2316      	movs	r3, #22
   2edc4:	18fb      	adds	r3, r7, r3
   2edc6:	781b      	ldrb	r3, [r3, #0]
   2edc8:	1ad3      	subs	r3, r2, r3
   2edca:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2edcc:	68fb      	ldr	r3, [r7, #12]
   2edce:	681b      	ldr	r3, [r3, #0]
   2edd0:	7858      	ldrb	r0, [r3, #1]
   2edd2:	69fb      	ldr	r3, [r7, #28]
   2edd4:	b2db      	uxtb	r3, r3
   2edd6:	693a      	ldr	r2, [r7, #16]
   2edd8:	69b9      	ldr	r1, [r7, #24]
   2edda:	4c5c      	ldr	r4, [pc, #368]	; (2ef4c <f_write+0x348>)
   2eddc:	47a0      	blx	r4
   2edde:	1e03      	subs	r3, r0, #0
   2ede0:	d009      	beq.n	2edf6 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2ede2:	68fb      	ldr	r3, [r7, #12]
   2ede4:	799b      	ldrb	r3, [r3, #6]
   2ede6:	2280      	movs	r2, #128	; 0x80
   2ede8:	4252      	negs	r2, r2
   2edea:	4313      	orrs	r3, r2
   2edec:	b2da      	uxtb	r2, r3
   2edee:	68fb      	ldr	r3, [r7, #12]
   2edf0:	719a      	strb	r2, [r3, #6]
   2edf2:	2301      	movs	r3, #1
   2edf4:	e09e      	b.n	2ef34 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2edf6:	68fb      	ldr	r3, [r7, #12]
   2edf8:	681b      	ldr	r3, [r3, #0]
   2edfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2edfc:	693b      	ldr	r3, [r7, #16]
   2edfe:	1ad2      	subs	r2, r2, r3
   2ee00:	69fb      	ldr	r3, [r7, #28]
   2ee02:	429a      	cmp	r2, r3
   2ee04:	d214      	bcs.n	2ee30 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2ee06:	68fb      	ldr	r3, [r7, #12]
   2ee08:	681b      	ldr	r3, [r3, #0]
   2ee0a:	3330      	adds	r3, #48	; 0x30
   2ee0c:	0018      	movs	r0, r3
   2ee0e:	68fb      	ldr	r3, [r7, #12]
   2ee10:	681b      	ldr	r3, [r3, #0]
   2ee12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ee14:	693b      	ldr	r3, [r7, #16]
   2ee16:	1ad3      	subs	r3, r2, r3
   2ee18:	025b      	lsls	r3, r3, #9
   2ee1a:	69ba      	ldr	r2, [r7, #24]
   2ee1c:	18d1      	adds	r1, r2, r3
   2ee1e:	2380      	movs	r3, #128	; 0x80
   2ee20:	009b      	lsls	r3, r3, #2
   2ee22:	001a      	movs	r2, r3
   2ee24:	4b4a      	ldr	r3, [pc, #296]	; (2ef50 <f_write+0x34c>)
   2ee26:	4798      	blx	r3
					fp->fs->wflag = 0;
   2ee28:	68fb      	ldr	r3, [r7, #12]
   2ee2a:	681b      	ldr	r3, [r3, #0]
   2ee2c:	2200      	movs	r2, #0
   2ee2e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2ee30:	69fb      	ldr	r3, [r7, #28]
   2ee32:	025b      	lsls	r3, r3, #9
   2ee34:	623b      	str	r3, [r7, #32]
				continue;
   2ee36:	e051      	b.n	2eedc <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2ee38:	68fb      	ldr	r3, [r7, #12]
   2ee3a:	689a      	ldr	r2, [r3, #8]
   2ee3c:	68fb      	ldr	r3, [r7, #12]
   2ee3e:	68db      	ldr	r3, [r3, #12]
   2ee40:	429a      	cmp	r2, r3
   2ee42:	d315      	bcc.n	2ee70 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2ee44:	68fb      	ldr	r3, [r7, #12]
   2ee46:	681b      	ldr	r3, [r3, #0]
   2ee48:	2100      	movs	r1, #0
   2ee4a:	0018      	movs	r0, r3
   2ee4c:	4b3d      	ldr	r3, [pc, #244]	; (2ef44 <f_write+0x340>)
   2ee4e:	4798      	blx	r3
   2ee50:	1e03      	subs	r3, r0, #0
   2ee52:	d009      	beq.n	2ee68 <f_write+0x264>
   2ee54:	68fb      	ldr	r3, [r7, #12]
   2ee56:	799b      	ldrb	r3, [r3, #6]
   2ee58:	2280      	movs	r2, #128	; 0x80
   2ee5a:	4252      	negs	r2, r2
   2ee5c:	4313      	orrs	r3, r2
   2ee5e:	b2da      	uxtb	r2, r3
   2ee60:	68fb      	ldr	r3, [r7, #12]
   2ee62:	719a      	strb	r2, [r3, #6]
   2ee64:	2301      	movs	r3, #1
   2ee66:	e065      	b.n	2ef34 <f_write+0x330>
				fp->fs->winsect = sect;
   2ee68:	68fb      	ldr	r3, [r7, #12]
   2ee6a:	681b      	ldr	r3, [r3, #0]
   2ee6c:	693a      	ldr	r2, [r7, #16]
   2ee6e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2ee70:	68fb      	ldr	r3, [r7, #12]
   2ee72:	693a      	ldr	r2, [r7, #16]
   2ee74:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2ee76:	68fb      	ldr	r3, [r7, #12]
   2ee78:	689b      	ldr	r3, [r3, #8]
   2ee7a:	05db      	lsls	r3, r3, #23
   2ee7c:	0ddb      	lsrs	r3, r3, #23
   2ee7e:	2280      	movs	r2, #128	; 0x80
   2ee80:	0092      	lsls	r2, r2, #2
   2ee82:	1ad3      	subs	r3, r2, r3
   2ee84:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2ee86:	6a3a      	ldr	r2, [r7, #32]
   2ee88:	687b      	ldr	r3, [r7, #4]
   2ee8a:	429a      	cmp	r2, r3
   2ee8c:	d901      	bls.n	2ee92 <f_write+0x28e>
   2ee8e:	687b      	ldr	r3, [r7, #4]
   2ee90:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2ee92:	68fb      	ldr	r3, [r7, #12]
   2ee94:	681a      	ldr	r2, [r3, #0]
   2ee96:	68fb      	ldr	r3, [r7, #12]
   2ee98:	699b      	ldr	r3, [r3, #24]
   2ee9a:	0019      	movs	r1, r3
   2ee9c:	0010      	movs	r0, r2
   2ee9e:	4b29      	ldr	r3, [pc, #164]	; (2ef44 <f_write+0x340>)
   2eea0:	4798      	blx	r3
   2eea2:	1e03      	subs	r3, r0, #0
   2eea4:	d009      	beq.n	2eeba <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2eea6:	68fb      	ldr	r3, [r7, #12]
   2eea8:	799b      	ldrb	r3, [r3, #6]
   2eeaa:	2280      	movs	r2, #128	; 0x80
   2eeac:	4252      	negs	r2, r2
   2eeae:	4313      	orrs	r3, r2
   2eeb0:	b2da      	uxtb	r2, r3
   2eeb2:	68fb      	ldr	r3, [r7, #12]
   2eeb4:	719a      	strb	r2, [r3, #6]
   2eeb6:	2301      	movs	r3, #1
   2eeb8:	e03c      	b.n	2ef34 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2eeba:	68fb      	ldr	r3, [r7, #12]
   2eebc:	681a      	ldr	r2, [r3, #0]
   2eebe:	68fb      	ldr	r3, [r7, #12]
   2eec0:	689b      	ldr	r3, [r3, #8]
   2eec2:	05db      	lsls	r3, r3, #23
   2eec4:	0ddb      	lsrs	r3, r3, #23
   2eec6:	3330      	adds	r3, #48	; 0x30
   2eec8:	18d3      	adds	r3, r2, r3
   2eeca:	6a3a      	ldr	r2, [r7, #32]
   2eecc:	69b9      	ldr	r1, [r7, #24]
   2eece:	0018      	movs	r0, r3
   2eed0:	4b1f      	ldr	r3, [pc, #124]	; (2ef50 <f_write+0x34c>)
   2eed2:	4798      	blx	r3
		fp->fs->wflag = 1;
   2eed4:	68fb      	ldr	r3, [r7, #12]
   2eed6:	681b      	ldr	r3, [r3, #0]
   2eed8:	2201      	movs	r2, #1
   2eeda:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2eedc:	69ba      	ldr	r2, [r7, #24]
   2eede:	6a3b      	ldr	r3, [r7, #32]
   2eee0:	18d3      	adds	r3, r2, r3
   2eee2:	61bb      	str	r3, [r7, #24]
   2eee4:	68fb      	ldr	r3, [r7, #12]
   2eee6:	689a      	ldr	r2, [r3, #8]
   2eee8:	6a3b      	ldr	r3, [r7, #32]
   2eeea:	18d2      	adds	r2, r2, r3
   2eeec:	68fb      	ldr	r3, [r7, #12]
   2eeee:	609a      	str	r2, [r3, #8]
   2eef0:	683b      	ldr	r3, [r7, #0]
   2eef2:	681a      	ldr	r2, [r3, #0]
   2eef4:	6a3b      	ldr	r3, [r7, #32]
   2eef6:	18d2      	adds	r2, r2, r3
   2eef8:	683b      	ldr	r3, [r7, #0]
   2eefa:	601a      	str	r2, [r3, #0]
   2eefc:	687a      	ldr	r2, [r7, #4]
   2eefe:	6a3b      	ldr	r3, [r7, #32]
   2ef00:	1ad3      	subs	r3, r2, r3
   2ef02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2ef04:	687b      	ldr	r3, [r7, #4]
   2ef06:	2b00      	cmp	r3, #0
   2ef08:	d000      	beq.n	2ef0c <f_write+0x308>
   2ef0a:	e6b7      	b.n	2ec7c <f_write+0x78>
   2ef0c:	e000      	b.n	2ef10 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ef0e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2ef10:	68fb      	ldr	r3, [r7, #12]
   2ef12:	689a      	ldr	r2, [r3, #8]
   2ef14:	68fb      	ldr	r3, [r7, #12]
   2ef16:	68db      	ldr	r3, [r3, #12]
   2ef18:	429a      	cmp	r2, r3
   2ef1a:	d903      	bls.n	2ef24 <f_write+0x320>
   2ef1c:	68fb      	ldr	r3, [r7, #12]
   2ef1e:	689a      	ldr	r2, [r3, #8]
   2ef20:	68fb      	ldr	r3, [r7, #12]
   2ef22:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2ef24:	68fb      	ldr	r3, [r7, #12]
   2ef26:	799b      	ldrb	r3, [r3, #6]
   2ef28:	2220      	movs	r2, #32
   2ef2a:	4313      	orrs	r3, r2
   2ef2c:	b2da      	uxtb	r2, r3
   2ef2e:	68fb      	ldr	r3, [r7, #12]
   2ef30:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2ef32:	2300      	movs	r3, #0
}
   2ef34:	0018      	movs	r0, r3
   2ef36:	46bd      	mov	sp, r7
   2ef38:	b00b      	add	sp, #44	; 0x2c
   2ef3a:	bd90      	pop	{r4, r7, pc}
   2ef3c:	0002e629 	.word	0x0002e629
   2ef40:	0002ccb5 	.word	0x0002ccb5
   2ef44:	0002c5ad 	.word	0x0002c5ad
   2ef48:	0002c80d 	.word	0x0002c80d
   2ef4c:	0002c299 	.word	0x0002c299
   2ef50:	0002c4c9 	.word	0x0002c4c9

0002ef54 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2ef54:	b590      	push	{r4, r7, lr}
   2ef56:	b087      	sub	sp, #28
   2ef58:	af00      	add	r7, sp, #0
   2ef5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2ef5c:	687b      	ldr	r3, [r7, #4]
   2ef5e:	681a      	ldr	r2, [r3, #0]
   2ef60:	687b      	ldr	r3, [r7, #4]
   2ef62:	889b      	ldrh	r3, [r3, #4]
   2ef64:	2117      	movs	r1, #23
   2ef66:	187c      	adds	r4, r7, r1
   2ef68:	0019      	movs	r1, r3
   2ef6a:	0010      	movs	r0, r2
   2ef6c:	4b55      	ldr	r3, [pc, #340]	; (2f0c4 <f_sync+0x170>)
   2ef6e:	4798      	blx	r3
   2ef70:	0003      	movs	r3, r0
   2ef72:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2ef74:	2317      	movs	r3, #23
   2ef76:	18fb      	adds	r3, r7, r3
   2ef78:	781b      	ldrb	r3, [r3, #0]
   2ef7a:	2b00      	cmp	r3, #0
   2ef7c:	d000      	beq.n	2ef80 <f_sync+0x2c>
   2ef7e:	e09a      	b.n	2f0b6 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2ef80:	687b      	ldr	r3, [r7, #4]
   2ef82:	799b      	ldrb	r3, [r3, #6]
   2ef84:	001a      	movs	r2, r3
   2ef86:	2320      	movs	r3, #32
   2ef88:	4013      	ands	r3, r2
   2ef8a:	d100      	bne.n	2ef8e <f_sync+0x3a>
   2ef8c:	e093      	b.n	2f0b6 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2ef8e:	687b      	ldr	r3, [r7, #4]
   2ef90:	681a      	ldr	r2, [r3, #0]
   2ef92:	687b      	ldr	r3, [r7, #4]
   2ef94:	69db      	ldr	r3, [r3, #28]
   2ef96:	2117      	movs	r1, #23
   2ef98:	187c      	adds	r4, r7, r1
   2ef9a:	0019      	movs	r1, r3
   2ef9c:	0010      	movs	r0, r2
   2ef9e:	4b4a      	ldr	r3, [pc, #296]	; (2f0c8 <f_sync+0x174>)
   2efa0:	4798      	blx	r3
   2efa2:	0003      	movs	r3, r0
   2efa4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2efa6:	2317      	movs	r3, #23
   2efa8:	18fb      	adds	r3, r7, r3
   2efaa:	781b      	ldrb	r3, [r3, #0]
   2efac:	2b00      	cmp	r3, #0
   2efae:	d000      	beq.n	2efb2 <f_sync+0x5e>
   2efb0:	e081      	b.n	2f0b6 <f_sync+0x162>
				dir = fp->dir_ptr;
   2efb2:	687b      	ldr	r3, [r7, #4]
   2efb4:	6a1b      	ldr	r3, [r3, #32]
   2efb6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2efb8:	693b      	ldr	r3, [r7, #16]
   2efba:	330b      	adds	r3, #11
   2efbc:	693a      	ldr	r2, [r7, #16]
   2efbe:	320b      	adds	r2, #11
   2efc0:	7812      	ldrb	r2, [r2, #0]
   2efc2:	2120      	movs	r1, #32
   2efc4:	430a      	orrs	r2, r1
   2efc6:	b2d2      	uxtb	r2, r2
   2efc8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2efca:	693b      	ldr	r3, [r7, #16]
   2efcc:	331c      	adds	r3, #28
   2efce:	001a      	movs	r2, r3
   2efd0:	687b      	ldr	r3, [r7, #4]
   2efd2:	68db      	ldr	r3, [r3, #12]
   2efd4:	b2db      	uxtb	r3, r3
   2efd6:	7013      	strb	r3, [r2, #0]
   2efd8:	693b      	ldr	r3, [r7, #16]
   2efda:	331d      	adds	r3, #29
   2efdc:	001a      	movs	r2, r3
   2efde:	687b      	ldr	r3, [r7, #4]
   2efe0:	68db      	ldr	r3, [r3, #12]
   2efe2:	b29b      	uxth	r3, r3
   2efe4:	0a1b      	lsrs	r3, r3, #8
   2efe6:	b29b      	uxth	r3, r3
   2efe8:	b2db      	uxtb	r3, r3
   2efea:	7013      	strb	r3, [r2, #0]
   2efec:	693b      	ldr	r3, [r7, #16]
   2efee:	331e      	adds	r3, #30
   2eff0:	001a      	movs	r2, r3
   2eff2:	687b      	ldr	r3, [r7, #4]
   2eff4:	68db      	ldr	r3, [r3, #12]
   2eff6:	0c1b      	lsrs	r3, r3, #16
   2eff8:	b2db      	uxtb	r3, r3
   2effa:	7013      	strb	r3, [r2, #0]
   2effc:	693b      	ldr	r3, [r7, #16]
   2effe:	331f      	adds	r3, #31
   2f000:	001a      	movs	r2, r3
   2f002:	687b      	ldr	r3, [r7, #4]
   2f004:	68db      	ldr	r3, [r3, #12]
   2f006:	0e1b      	lsrs	r3, r3, #24
   2f008:	b2db      	uxtb	r3, r3
   2f00a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2f00c:	693b      	ldr	r3, [r7, #16]
   2f00e:	331a      	adds	r3, #26
   2f010:	001a      	movs	r2, r3
   2f012:	687b      	ldr	r3, [r7, #4]
   2f014:	691b      	ldr	r3, [r3, #16]
   2f016:	b2db      	uxtb	r3, r3
   2f018:	7013      	strb	r3, [r2, #0]
   2f01a:	693b      	ldr	r3, [r7, #16]
   2f01c:	331b      	adds	r3, #27
   2f01e:	001a      	movs	r2, r3
   2f020:	687b      	ldr	r3, [r7, #4]
   2f022:	691b      	ldr	r3, [r3, #16]
   2f024:	b29b      	uxth	r3, r3
   2f026:	0a1b      	lsrs	r3, r3, #8
   2f028:	b29b      	uxth	r3, r3
   2f02a:	b2db      	uxtb	r3, r3
   2f02c:	7013      	strb	r3, [r2, #0]
   2f02e:	693b      	ldr	r3, [r7, #16]
   2f030:	3314      	adds	r3, #20
   2f032:	001a      	movs	r2, r3
   2f034:	687b      	ldr	r3, [r7, #4]
   2f036:	691b      	ldr	r3, [r3, #16]
   2f038:	0c1b      	lsrs	r3, r3, #16
   2f03a:	b2db      	uxtb	r3, r3
   2f03c:	7013      	strb	r3, [r2, #0]
   2f03e:	693b      	ldr	r3, [r7, #16]
   2f040:	3315      	adds	r3, #21
   2f042:	001a      	movs	r2, r3
   2f044:	687b      	ldr	r3, [r7, #4]
   2f046:	691b      	ldr	r3, [r3, #16]
   2f048:	0c1b      	lsrs	r3, r3, #16
   2f04a:	b29b      	uxth	r3, r3
   2f04c:	0a1b      	lsrs	r3, r3, #8
   2f04e:	b29b      	uxth	r3, r3
   2f050:	b2db      	uxtb	r3, r3
   2f052:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2f054:	4b1d      	ldr	r3, [pc, #116]	; (2f0cc <f_sync+0x178>)
   2f056:	4798      	blx	r3
   2f058:	0003      	movs	r3, r0
   2f05a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2f05c:	693b      	ldr	r3, [r7, #16]
   2f05e:	3316      	adds	r3, #22
   2f060:	68fa      	ldr	r2, [r7, #12]
   2f062:	b2d2      	uxtb	r2, r2
   2f064:	701a      	strb	r2, [r3, #0]
   2f066:	693b      	ldr	r3, [r7, #16]
   2f068:	3317      	adds	r3, #23
   2f06a:	68fa      	ldr	r2, [r7, #12]
   2f06c:	b292      	uxth	r2, r2
   2f06e:	0a12      	lsrs	r2, r2, #8
   2f070:	b292      	uxth	r2, r2
   2f072:	b2d2      	uxtb	r2, r2
   2f074:	701a      	strb	r2, [r3, #0]
   2f076:	693b      	ldr	r3, [r7, #16]
   2f078:	3318      	adds	r3, #24
   2f07a:	68fa      	ldr	r2, [r7, #12]
   2f07c:	0c12      	lsrs	r2, r2, #16
   2f07e:	b2d2      	uxtb	r2, r2
   2f080:	701a      	strb	r2, [r3, #0]
   2f082:	693b      	ldr	r3, [r7, #16]
   2f084:	3319      	adds	r3, #25
   2f086:	68fa      	ldr	r2, [r7, #12]
   2f088:	0e12      	lsrs	r2, r2, #24
   2f08a:	b2d2      	uxtb	r2, r2
   2f08c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2f08e:	687b      	ldr	r3, [r7, #4]
   2f090:	799b      	ldrb	r3, [r3, #6]
   2f092:	2220      	movs	r2, #32
   2f094:	4393      	bics	r3, r2
   2f096:	b2da      	uxtb	r2, r3
   2f098:	687b      	ldr	r3, [r7, #4]
   2f09a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2f09c:	687b      	ldr	r3, [r7, #4]
   2f09e:	681b      	ldr	r3, [r3, #0]
   2f0a0:	2201      	movs	r2, #1
   2f0a2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2f0a4:	687b      	ldr	r3, [r7, #4]
   2f0a6:	681b      	ldr	r3, [r3, #0]
   2f0a8:	2217      	movs	r2, #23
   2f0aa:	18bc      	adds	r4, r7, r2
   2f0ac:	0018      	movs	r0, r3
   2f0ae:	4b08      	ldr	r3, [pc, #32]	; (2f0d0 <f_sync+0x17c>)
   2f0b0:	4798      	blx	r3
   2f0b2:	0003      	movs	r3, r0
   2f0b4:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2f0b6:	2317      	movs	r3, #23
   2f0b8:	18fb      	adds	r3, r7, r3
   2f0ba:	781b      	ldrb	r3, [r3, #0]
}
   2f0bc:	0018      	movs	r0, r3
   2f0be:	46bd      	mov	sp, r7
   2f0c0:	b007      	add	sp, #28
   2f0c2:	bd90      	pop	{r4, r7, pc}
   2f0c4:	0002e629 	.word	0x0002e629
   2f0c8:	0002c5ad 	.word	0x0002c5ad
   2f0cc:	0002c469 	.word	0x0002c469
   2f0d0:	0002c675 	.word	0x0002c675

0002f0d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2f0d4:	b590      	push	{r4, r7, lr}
   2f0d6:	b085      	sub	sp, #20
   2f0d8:	af00      	add	r7, sp, #0
   2f0da:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2f0dc:	230f      	movs	r3, #15
   2f0de:	18fc      	adds	r4, r7, r3
   2f0e0:	687b      	ldr	r3, [r7, #4]
   2f0e2:	0018      	movs	r0, r3
   2f0e4:	4b09      	ldr	r3, [pc, #36]	; (2f10c <f_close+0x38>)
   2f0e6:	4798      	blx	r3
   2f0e8:	0003      	movs	r3, r0
   2f0ea:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2f0ec:	230f      	movs	r3, #15
   2f0ee:	18fb      	adds	r3, r7, r3
   2f0f0:	781b      	ldrb	r3, [r3, #0]
   2f0f2:	2b00      	cmp	r3, #0
   2f0f4:	d102      	bne.n	2f0fc <f_close+0x28>
   2f0f6:	687b      	ldr	r3, [r7, #4]
   2f0f8:	2200      	movs	r2, #0
   2f0fa:	601a      	str	r2, [r3, #0]
	return res;
   2f0fc:	230f      	movs	r3, #15
   2f0fe:	18fb      	adds	r3, r7, r3
   2f100:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2f102:	0018      	movs	r0, r3
   2f104:	46bd      	mov	sp, r7
   2f106:	b005      	add	sp, #20
   2f108:	bd90      	pop	{r4, r7, pc}
   2f10a:	46c0      	nop			; (mov r8, r8)
   2f10c:	0002ef55 	.word	0x0002ef55

0002f110 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2f110:	b580      	push	{r7, lr}
   2f112:	b084      	sub	sp, #16
   2f114:	af00      	add	r7, sp, #0
   2f116:	0002      	movs	r2, r0
   2f118:	6039      	str	r1, [r7, #0]
   2f11a:	1dbb      	adds	r3, r7, #6
   2f11c:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2f11e:	1dbb      	adds	r3, r7, #6
   2f120:	881b      	ldrh	r3, [r3, #0]
   2f122:	2b7f      	cmp	r3, #127	; 0x7f
   2f124:	d805      	bhi.n	2f132 <ff_convert+0x22>
		c = src;
   2f126:	230e      	movs	r3, #14
   2f128:	18fb      	adds	r3, r7, r3
   2f12a:	1dba      	adds	r2, r7, #6
   2f12c:	8812      	ldrh	r2, [r2, #0]
   2f12e:	801a      	strh	r2, [r3, #0]
   2f130:	e03a      	b.n	2f1a8 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2f132:	683b      	ldr	r3, [r7, #0]
   2f134:	2b00      	cmp	r3, #0
   2f136:	d010      	beq.n	2f15a <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2f138:	1dbb      	adds	r3, r7, #6
   2f13a:	881b      	ldrh	r3, [r3, #0]
   2f13c:	2bff      	cmp	r3, #255	; 0xff
   2f13e:	d807      	bhi.n	2f150 <ff_convert+0x40>
   2f140:	1dbb      	adds	r3, r7, #6
   2f142:	881b      	ldrh	r3, [r3, #0]
   2f144:	3b80      	subs	r3, #128	; 0x80
   2f146:	001a      	movs	r2, r3
   2f148:	4b1b      	ldr	r3, [pc, #108]	; (2f1b8 <ff_convert+0xa8>)
   2f14a:	0052      	lsls	r2, r2, #1
   2f14c:	5ad2      	ldrh	r2, [r2, r3]
   2f14e:	e000      	b.n	2f152 <ff_convert+0x42>
   2f150:	2200      	movs	r2, #0
   2f152:	230e      	movs	r3, #14
   2f154:	18fb      	adds	r3, r7, r3
   2f156:	801a      	strh	r2, [r3, #0]
   2f158:	e026      	b.n	2f1a8 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2f15a:	230e      	movs	r3, #14
   2f15c:	18fb      	adds	r3, r7, r3
   2f15e:	2200      	movs	r2, #0
   2f160:	801a      	strh	r2, [r3, #0]
   2f162:	e010      	b.n	2f186 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2f164:	230e      	movs	r3, #14
   2f166:	18fb      	adds	r3, r7, r3
   2f168:	881a      	ldrh	r2, [r3, #0]
   2f16a:	4b13      	ldr	r3, [pc, #76]	; (2f1b8 <ff_convert+0xa8>)
   2f16c:	0052      	lsls	r2, r2, #1
   2f16e:	5ad3      	ldrh	r3, [r2, r3]
   2f170:	1dba      	adds	r2, r7, #6
   2f172:	8812      	ldrh	r2, [r2, #0]
   2f174:	429a      	cmp	r2, r3
   2f176:	d00c      	beq.n	2f192 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2f178:	230e      	movs	r3, #14
   2f17a:	18fb      	adds	r3, r7, r3
   2f17c:	881a      	ldrh	r2, [r3, #0]
   2f17e:	230e      	movs	r3, #14
   2f180:	18fb      	adds	r3, r7, r3
   2f182:	3201      	adds	r2, #1
   2f184:	801a      	strh	r2, [r3, #0]
   2f186:	230e      	movs	r3, #14
   2f188:	18fb      	adds	r3, r7, r3
   2f18a:	881b      	ldrh	r3, [r3, #0]
   2f18c:	2b7f      	cmp	r3, #127	; 0x7f
   2f18e:	d9e9      	bls.n	2f164 <ff_convert+0x54>
   2f190:	e000      	b.n	2f194 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2f192:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2f194:	230e      	movs	r3, #14
   2f196:	18fb      	adds	r3, r7, r3
   2f198:	881b      	ldrh	r3, [r3, #0]
   2f19a:	3380      	adds	r3, #128	; 0x80
   2f19c:	b29a      	uxth	r2, r3
   2f19e:	230e      	movs	r3, #14
   2f1a0:	18fb      	adds	r3, r7, r3
   2f1a2:	21ff      	movs	r1, #255	; 0xff
   2f1a4:	400a      	ands	r2, r1
   2f1a6:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2f1a8:	230e      	movs	r3, #14
   2f1aa:	18fb      	adds	r3, r7, r3
   2f1ac:	881b      	ldrh	r3, [r3, #0]
}
   2f1ae:	0018      	movs	r0, r3
   2f1b0:	46bd      	mov	sp, r7
   2f1b2:	b004      	add	sp, #16
   2f1b4:	bd80      	pop	{r7, pc}
   2f1b6:	46c0      	nop			; (mov r8, r8)
   2f1b8:	0003a5e0 	.word	0x0003a5e0

0002f1bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2f1bc:	b580      	push	{r7, lr}
   2f1be:	b084      	sub	sp, #16
   2f1c0:	af00      	add	r7, sp, #0
   2f1c2:	0002      	movs	r2, r0
   2f1c4:	1dbb      	adds	r3, r7, #6
   2f1c6:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2f1c8:	2300      	movs	r3, #0
   2f1ca:	60fb      	str	r3, [r7, #12]
   2f1cc:	e002      	b.n	2f1d4 <ff_wtoupper+0x18>
   2f1ce:	68fb      	ldr	r3, [r7, #12]
   2f1d0:	3301      	adds	r3, #1
   2f1d2:	60fb      	str	r3, [r7, #12]
   2f1d4:	4b0f      	ldr	r3, [pc, #60]	; (2f214 <ff_wtoupper+0x58>)
   2f1d6:	68fa      	ldr	r2, [r7, #12]
   2f1d8:	0052      	lsls	r2, r2, #1
   2f1da:	5ad3      	ldrh	r3, [r2, r3]
   2f1dc:	2b00      	cmp	r3, #0
   2f1de:	d007      	beq.n	2f1f0 <ff_wtoupper+0x34>
   2f1e0:	4b0c      	ldr	r3, [pc, #48]	; (2f214 <ff_wtoupper+0x58>)
   2f1e2:	68fa      	ldr	r2, [r7, #12]
   2f1e4:	0052      	lsls	r2, r2, #1
   2f1e6:	5ad3      	ldrh	r3, [r2, r3]
   2f1e8:	1dba      	adds	r2, r7, #6
   2f1ea:	8812      	ldrh	r2, [r2, #0]
   2f1ec:	429a      	cmp	r2, r3
   2f1ee:	d1ee      	bne.n	2f1ce <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2f1f0:	4b08      	ldr	r3, [pc, #32]	; (2f214 <ff_wtoupper+0x58>)
   2f1f2:	68fa      	ldr	r2, [r7, #12]
   2f1f4:	0052      	lsls	r2, r2, #1
   2f1f6:	5ad3      	ldrh	r3, [r2, r3]
   2f1f8:	2b00      	cmp	r3, #0
   2f1fa:	d004      	beq.n	2f206 <ff_wtoupper+0x4a>
   2f1fc:	4b06      	ldr	r3, [pc, #24]	; (2f218 <ff_wtoupper+0x5c>)
   2f1fe:	68fa      	ldr	r2, [r7, #12]
   2f200:	0052      	lsls	r2, r2, #1
   2f202:	5ad3      	ldrh	r3, [r2, r3]
   2f204:	e001      	b.n	2f20a <ff_wtoupper+0x4e>
   2f206:	1dbb      	adds	r3, r7, #6
   2f208:	881b      	ldrh	r3, [r3, #0]
}
   2f20a:	0018      	movs	r0, r3
   2f20c:	46bd      	mov	sp, r7
   2f20e:	b004      	add	sp, #16
   2f210:	bd80      	pop	{r7, pc}
   2f212:	46c0      	nop			; (mov r8, r8)
   2f214:	0003a6e0 	.word	0x0003a6e0
   2f218:	0003a8c0 	.word	0x0003a8c0

0002f21c <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2f21c:	b580      	push	{r7, lr}
   2f21e:	b084      	sub	sp, #16
   2f220:	af00      	add	r7, sp, #0
   2f222:	60f8      	str	r0, [r7, #12]
   2f224:	60b9      	str	r1, [r7, #8]
   2f226:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2f228:	68fb      	ldr	r3, [r7, #12]
   2f22a:	68ba      	ldr	r2, [r7, #8]
   2f22c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2f22e:	68fb      	ldr	r3, [r7, #12]
   2f230:	687a      	ldr	r2, [r7, #4]
   2f232:	601a      	str	r2, [r3, #0]
}
   2f234:	46c0      	nop			; (mov r8, r8)
   2f236:	46bd      	mov	sp, r7
   2f238:	b004      	add	sp, #16
   2f23a:	bd80      	pop	{r7, pc}

0002f23c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2f23c:	b580      	push	{r7, lr}
   2f23e:	b082      	sub	sp, #8
   2f240:	af00      	add	r7, sp, #0
   2f242:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2f244:	687b      	ldr	r3, [r7, #4]
   2f246:	681b      	ldr	r3, [r3, #0]
   2f248:	4a07      	ldr	r2, [pc, #28]	; (2f268 <getNextPacketId+0x2c>)
   2f24a:	4293      	cmp	r3, r2
   2f24c:	d003      	beq.n	2f256 <getNextPacketId+0x1a>
   2f24e:	687b      	ldr	r3, [r7, #4]
   2f250:	681b      	ldr	r3, [r3, #0]
   2f252:	1c5a      	adds	r2, r3, #1
   2f254:	e000      	b.n	2f258 <getNextPacketId+0x1c>
   2f256:	2201      	movs	r2, #1
   2f258:	687b      	ldr	r3, [r7, #4]
   2f25a:	601a      	str	r2, [r3, #0]
   2f25c:	687b      	ldr	r3, [r7, #4]
   2f25e:	681b      	ldr	r3, [r3, #0]
}
   2f260:	0018      	movs	r0, r3
   2f262:	46bd      	mov	sp, r7
   2f264:	b002      	add	sp, #8
   2f266:	bd80      	pop	{r7, pc}
   2f268:	0000ffff 	.word	0x0000ffff

0002f26c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f26c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f26e:	b087      	sub	sp, #28
   2f270:	af00      	add	r7, sp, #0
   2f272:	60f8      	str	r0, [r7, #12]
   2f274:	60b9      	str	r1, [r7, #8]
   2f276:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f278:	2301      	movs	r3, #1
   2f27a:	425b      	negs	r3, r3
   2f27c:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f27e:	2300      	movs	r3, #0
   2f280:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f282:	e01a      	b.n	2f2ba <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f284:	68fb      	ldr	r3, [r7, #12]
   2f286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f288:	68dc      	ldr	r4, [r3, #12]
   2f28a:	68fb      	ldr	r3, [r7, #12]
   2f28c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f28e:	68fb      	ldr	r3, [r7, #12]
   2f290:	691a      	ldr	r2, [r3, #16]
   2f292:	693b      	ldr	r3, [r7, #16]
   2f294:	18d6      	adds	r6, r2, r3
   2f296:	687b      	ldr	r3, [r7, #4]
   2f298:	0018      	movs	r0, r3
   2f29a:	4b1a      	ldr	r3, [pc, #104]	; (2f304 <sendPacket+0x98>)
   2f29c:	4798      	blx	r3
   2f29e:	0003      	movs	r3, r0
   2f2a0:	68ba      	ldr	r2, [r7, #8]
   2f2a2:	0031      	movs	r1, r6
   2f2a4:	0028      	movs	r0, r5
   2f2a6:	47a0      	blx	r4
   2f2a8:	0003      	movs	r3, r0
   2f2aa:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f2ac:	697b      	ldr	r3, [r7, #20]
   2f2ae:	2b00      	cmp	r3, #0
   2f2b0:	db0e      	blt.n	2f2d0 <sendPacket+0x64>
            break;
        sent += rc;
   2f2b2:	693a      	ldr	r2, [r7, #16]
   2f2b4:	697b      	ldr	r3, [r7, #20]
   2f2b6:	18d3      	adds	r3, r2, r3
   2f2b8:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f2ba:	693a      	ldr	r2, [r7, #16]
   2f2bc:	68bb      	ldr	r3, [r7, #8]
   2f2be:	429a      	cmp	r2, r3
   2f2c0:	da07      	bge.n	2f2d2 <sendPacket+0x66>
   2f2c2:	687b      	ldr	r3, [r7, #4]
   2f2c4:	0018      	movs	r0, r3
   2f2c6:	4b10      	ldr	r3, [pc, #64]	; (2f308 <sendPacket+0x9c>)
   2f2c8:	4798      	blx	r3
   2f2ca:	1e03      	subs	r3, r0, #0
   2f2cc:	d0da      	beq.n	2f284 <sendPacket+0x18>
   2f2ce:	e000      	b.n	2f2d2 <sendPacket+0x66>
            break;
   2f2d0:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f2d2:	693a      	ldr	r2, [r7, #16]
   2f2d4:	68bb      	ldr	r3, [r7, #8]
   2f2d6:	429a      	cmp	r2, r3
   2f2d8:	d10b      	bne.n	2f2f2 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f2da:	68fb      	ldr	r3, [r7, #12]
   2f2dc:	3354      	adds	r3, #84	; 0x54
   2f2de:	001a      	movs	r2, r3
   2f2e0:	68fb      	ldr	r3, [r7, #12]
   2f2e2:	699b      	ldr	r3, [r3, #24]
   2f2e4:	0019      	movs	r1, r3
   2f2e6:	0010      	movs	r0, r2
   2f2e8:	4b08      	ldr	r3, [pc, #32]	; (2f30c <sendPacket+0xa0>)
   2f2ea:	4798      	blx	r3
        rc = SUCCESS;
   2f2ec:	2300      	movs	r3, #0
   2f2ee:	617b      	str	r3, [r7, #20]
   2f2f0:	e002      	b.n	2f2f8 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f2f2:	2301      	movs	r3, #1
   2f2f4:	425b      	negs	r3, r3
   2f2f6:	617b      	str	r3, [r7, #20]
    return rc;
   2f2f8:	697b      	ldr	r3, [r7, #20]
}
   2f2fa:	0018      	movs	r0, r3
   2f2fc:	46bd      	mov	sp, r7
   2f2fe:	b007      	add	sp, #28
   2f300:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f302:	46c0      	nop			; (mov r8, r8)
   2f304:	000300cd 	.word	0x000300cd
   2f308:	00030051 	.word	0x00030051
   2f30c:	000300a5 	.word	0x000300a5

0002f310 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f310:	b580      	push	{r7, lr}
   2f312:	b086      	sub	sp, #24
   2f314:	af00      	add	r7, sp, #0
   2f316:	60f8      	str	r0, [r7, #12]
   2f318:	60b9      	str	r1, [r7, #8]
   2f31a:	607a      	str	r2, [r7, #4]
   2f31c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f31e:	68fb      	ldr	r3, [r7, #12]
   2f320:	68ba      	ldr	r2, [r7, #8]
   2f322:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f324:	2300      	movs	r3, #0
   2f326:	617b      	str	r3, [r7, #20]
   2f328:	e00a      	b.n	2f340 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f32a:	68fa      	ldr	r2, [r7, #12]
   2f32c:	697b      	ldr	r3, [r7, #20]
   2f32e:	3304      	adds	r3, #4
   2f330:	00db      	lsls	r3, r3, #3
   2f332:	18d3      	adds	r3, r2, r3
   2f334:	3304      	adds	r3, #4
   2f336:	2200      	movs	r2, #0
   2f338:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f33a:	697b      	ldr	r3, [r7, #20]
   2f33c:	3301      	adds	r3, #1
   2f33e:	617b      	str	r3, [r7, #20]
   2f340:	697b      	ldr	r3, [r7, #20]
   2f342:	2b04      	cmp	r3, #4
   2f344:	ddf1      	ble.n	2f32a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f346:	68fb      	ldr	r3, [r7, #12]
   2f348:	687a      	ldr	r2, [r7, #4]
   2f34a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f34c:	68fb      	ldr	r3, [r7, #12]
   2f34e:	683a      	ldr	r2, [r7, #0]
   2f350:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f352:	68fb      	ldr	r3, [r7, #12]
   2f354:	6a3a      	ldr	r2, [r7, #32]
   2f356:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f358:	68fb      	ldr	r3, [r7, #12]
   2f35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f35c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f35e:	68fb      	ldr	r3, [r7, #12]
   2f360:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f362:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f364:	68fb      	ldr	r3, [r7, #12]
   2f366:	2200      	movs	r2, #0
   2f368:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f36a:	68fb      	ldr	r3, [r7, #12]
   2f36c:	2200      	movs	r2, #0
   2f36e:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f370:	68fb      	ldr	r3, [r7, #12]
   2f372:	2200      	movs	r2, #0
   2f374:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f376:	68fb      	ldr	r3, [r7, #12]
   2f378:	2201      	movs	r2, #1
   2f37a:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f37c:	68fb      	ldr	r3, [r7, #12]
   2f37e:	3354      	adds	r3, #84	; 0x54
   2f380:	0018      	movs	r0, r3
   2f382:	4b03      	ldr	r3, [pc, #12]	; (2f390 <MQTTClientInit+0x80>)
   2f384:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f386:	46c0      	nop			; (mov r8, r8)
   2f388:	46bd      	mov	sp, r7
   2f38a:	b006      	add	sp, #24
   2f38c:	bd80      	pop	{r7, pc}
   2f38e:	46c0      	nop			; (mov r8, r8)
   2f390:	000300f5 	.word	0x000300f5

0002f394 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f394:	b590      	push	{r4, r7, lr}
   2f396:	b08b      	sub	sp, #44	; 0x2c
   2f398:	af00      	add	r7, sp, #0
   2f39a:	60f8      	str	r0, [r7, #12]
   2f39c:	60b9      	str	r1, [r7, #8]
   2f39e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f3a0:	2301      	movs	r3, #1
   2f3a2:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f3a4:	2300      	movs	r3, #0
   2f3a6:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f3a8:	2304      	movs	r3, #4
   2f3aa:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f3ac:	68bb      	ldr	r3, [r7, #8]
   2f3ae:	2200      	movs	r2, #0
   2f3b0:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f3b2:	2301      	movs	r3, #1
   2f3b4:	425b      	negs	r3, r3
   2f3b6:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f3b8:	6a3b      	ldr	r3, [r7, #32]
   2f3ba:	3301      	adds	r3, #1
   2f3bc:	623b      	str	r3, [r7, #32]
   2f3be:	6a3a      	ldr	r2, [r7, #32]
   2f3c0:	69fb      	ldr	r3, [r7, #28]
   2f3c2:	429a      	cmp	r2, r3
   2f3c4:	dd03      	ble.n	2f3ce <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f3c6:	2301      	movs	r3, #1
   2f3c8:	425b      	negs	r3, r3
   2f3ca:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f3cc:	e026      	b.n	2f41c <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f3ce:	68fb      	ldr	r3, [r7, #12]
   2f3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f3d2:	689c      	ldr	r4, [r3, #8]
   2f3d4:	68fb      	ldr	r3, [r7, #12]
   2f3d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f3d8:	687b      	ldr	r3, [r7, #4]
   2f3da:	2217      	movs	r2, #23
   2f3dc:	18b9      	adds	r1, r7, r2
   2f3de:	2201      	movs	r2, #1
   2f3e0:	47a0      	blx	r4
   2f3e2:	0003      	movs	r3, r0
   2f3e4:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f3e6:	69bb      	ldr	r3, [r7, #24]
   2f3e8:	2b01      	cmp	r3, #1
   2f3ea:	d116      	bne.n	2f41a <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f3ec:	68bb      	ldr	r3, [r7, #8]
   2f3ee:	681a      	ldr	r2, [r3, #0]
   2f3f0:	2317      	movs	r3, #23
   2f3f2:	18fb      	adds	r3, r7, r3
   2f3f4:	781b      	ldrb	r3, [r3, #0]
   2f3f6:	0019      	movs	r1, r3
   2f3f8:	237f      	movs	r3, #127	; 0x7f
   2f3fa:	400b      	ands	r3, r1
   2f3fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f3fe:	434b      	muls	r3, r1
   2f400:	18d2      	adds	r2, r2, r3
   2f402:	68bb      	ldr	r3, [r7, #8]
   2f404:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f408:	01db      	lsls	r3, r3, #7
   2f40a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f40c:	2317      	movs	r3, #23
   2f40e:	18fb      	adds	r3, r7, r3
   2f410:	781b      	ldrb	r3, [r3, #0]
   2f412:	b25b      	sxtb	r3, r3
   2f414:	2b00      	cmp	r3, #0
   2f416:	dbcc      	blt.n	2f3b2 <decodePacket+0x1e>
   2f418:	e000      	b.n	2f41c <decodePacket+0x88>
            goto exit;
   2f41a:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f41c:	6a3b      	ldr	r3, [r7, #32]
}
   2f41e:	0018      	movs	r0, r3
   2f420:	46bd      	mov	sp, r7
   2f422:	b00b      	add	sp, #44	; 0x2c
   2f424:	bd90      	pop	{r4, r7, pc}
	...

0002f428 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f428:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f42a:	46c6      	mov	lr, r8
   2f42c:	b500      	push	{lr}
   2f42e:	b086      	sub	sp, #24
   2f430:	af00      	add	r7, sp, #0
   2f432:	6078      	str	r0, [r7, #4]
   2f434:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f436:	2301      	movs	r3, #1
   2f438:	425b      	negs	r3, r3
   2f43a:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f43c:	2300      	movs	r3, #0
   2f43e:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f440:	2300      	movs	r3, #0
   2f442:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f444:	2300      	movs	r3, #0
   2f446:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f448:	687b      	ldr	r3, [r7, #4]
   2f44a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f44c:	689c      	ldr	r4, [r3, #8]
   2f44e:	687b      	ldr	r3, [r7, #4]
   2f450:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f452:	687b      	ldr	r3, [r7, #4]
   2f454:	695e      	ldr	r6, [r3, #20]
   2f456:	683b      	ldr	r3, [r7, #0]
   2f458:	0018      	movs	r0, r3
   2f45a:	4b2b      	ldr	r3, [pc, #172]	; (2f508 <readPacket+0xe0>)
   2f45c:	4798      	blx	r3
   2f45e:	0003      	movs	r3, r0
   2f460:	2201      	movs	r2, #1
   2f462:	0031      	movs	r1, r6
   2f464:	0028      	movs	r0, r5
   2f466:	47a0      	blx	r4
   2f468:	0003      	movs	r3, r0
   2f46a:	2b01      	cmp	r3, #1
   2f46c:	d141      	bne.n	2f4f2 <readPacket+0xca>
        goto exit;

    len = 1;
   2f46e:	2301      	movs	r3, #1
   2f470:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f472:	683b      	ldr	r3, [r7, #0]
   2f474:	0018      	movs	r0, r3
   2f476:	4b24      	ldr	r3, [pc, #144]	; (2f508 <readPacket+0xe0>)
   2f478:	4798      	blx	r3
   2f47a:	0002      	movs	r2, r0
   2f47c:	2308      	movs	r3, #8
   2f47e:	18f9      	adds	r1, r7, r3
   2f480:	687b      	ldr	r3, [r7, #4]
   2f482:	0018      	movs	r0, r3
   2f484:	4b21      	ldr	r3, [pc, #132]	; (2f50c <readPacket+0xe4>)
   2f486:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f488:	687b      	ldr	r3, [r7, #4]
   2f48a:	695b      	ldr	r3, [r3, #20]
   2f48c:	3301      	adds	r3, #1
   2f48e:	68ba      	ldr	r2, [r7, #8]
   2f490:	0011      	movs	r1, r2
   2f492:	0018      	movs	r0, r3
   2f494:	4b1e      	ldr	r3, [pc, #120]	; (2f510 <readPacket+0xe8>)
   2f496:	4798      	blx	r3
   2f498:	0002      	movs	r2, r0
   2f49a:	693b      	ldr	r3, [r7, #16]
   2f49c:	189b      	adds	r3, r3, r2
   2f49e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f4a0:	68bb      	ldr	r3, [r7, #8]
   2f4a2:	2b00      	cmp	r3, #0
   2f4a4:	dd17      	ble.n	2f4d6 <readPacket+0xae>
   2f4a6:	687b      	ldr	r3, [r7, #4]
   2f4a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f4aa:	689c      	ldr	r4, [r3, #8]
   2f4ac:	687b      	ldr	r3, [r7, #4]
   2f4ae:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f4b0:	687b      	ldr	r3, [r7, #4]
   2f4b2:	695a      	ldr	r2, [r3, #20]
   2f4b4:	693b      	ldr	r3, [r7, #16]
   2f4b6:	18d6      	adds	r6, r2, r3
   2f4b8:	68bb      	ldr	r3, [r7, #8]
   2f4ba:	4698      	mov	r8, r3
   2f4bc:	683b      	ldr	r3, [r7, #0]
   2f4be:	0018      	movs	r0, r3
   2f4c0:	4b11      	ldr	r3, [pc, #68]	; (2f508 <readPacket+0xe0>)
   2f4c2:	4798      	blx	r3
   2f4c4:	0003      	movs	r3, r0
   2f4c6:	4642      	mov	r2, r8
   2f4c8:	0031      	movs	r1, r6
   2f4ca:	0028      	movs	r0, r5
   2f4cc:	47a0      	blx	r4
   2f4ce:	0002      	movs	r2, r0
   2f4d0:	68bb      	ldr	r3, [r7, #8]
   2f4d2:	429a      	cmp	r2, r3
   2f4d4:	d10f      	bne.n	2f4f6 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f4d6:	687b      	ldr	r3, [r7, #4]
   2f4d8:	695b      	ldr	r3, [r3, #20]
   2f4da:	781a      	ldrb	r2, [r3, #0]
   2f4dc:	230c      	movs	r3, #12
   2f4de:	18fb      	adds	r3, r7, r3
   2f4e0:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f4e2:	230c      	movs	r3, #12
   2f4e4:	18fb      	adds	r3, r7, r3
   2f4e6:	781b      	ldrb	r3, [r3, #0]
   2f4e8:	061b      	lsls	r3, r3, #24
   2f4ea:	0f1b      	lsrs	r3, r3, #28
   2f4ec:	b2db      	uxtb	r3, r3
   2f4ee:	617b      	str	r3, [r7, #20]
   2f4f0:	e002      	b.n	2f4f8 <readPacket+0xd0>
        goto exit;
   2f4f2:	46c0      	nop			; (mov r8, r8)
   2f4f4:	e000      	b.n	2f4f8 <readPacket+0xd0>
        goto exit;
   2f4f6:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f4f8:	697b      	ldr	r3, [r7, #20]
}
   2f4fa:	0018      	movs	r0, r3
   2f4fc:	46bd      	mov	sp, r7
   2f4fe:	b006      	add	sp, #24
   2f500:	bc04      	pop	{r2}
   2f502:	4690      	mov	r8, r2
   2f504:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f506:	46c0      	nop			; (mov r8, r8)
   2f508:	000300cd 	.word	0x000300cd
   2f50c:	0002f395 	.word	0x0002f395
   2f510:	00030ea5 	.word	0x00030ea5

0002f514 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f514:	b580      	push	{r7, lr}
   2f516:	b086      	sub	sp, #24
   2f518:	af00      	add	r7, sp, #0
   2f51a:	6078      	str	r0, [r7, #4]
   2f51c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f51e:	687b      	ldr	r3, [r7, #4]
   2f520:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f522:	683b      	ldr	r3, [r7, #0]
   2f524:	689b      	ldr	r3, [r3, #8]
   2f526:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f528:	683b      	ldr	r3, [r7, #0]
   2f52a:	685b      	ldr	r3, [r3, #4]
   2f52c:	001a      	movs	r2, r3
   2f52e:	693b      	ldr	r3, [r7, #16]
   2f530:	189b      	adds	r3, r3, r2
   2f532:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f534:	e039      	b.n	2f5aa <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f536:	693b      	ldr	r3, [r7, #16]
   2f538:	781b      	ldrb	r3, [r3, #0]
   2f53a:	2b2f      	cmp	r3, #47	; 0x2f
   2f53c:	d103      	bne.n	2f546 <isTopicMatched+0x32>
   2f53e:	697b      	ldr	r3, [r7, #20]
   2f540:	781b      	ldrb	r3, [r3, #0]
   2f542:	2b2f      	cmp	r3, #47	; 0x2f
   2f544:	d13a      	bne.n	2f5bc <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f546:	697b      	ldr	r3, [r7, #20]
   2f548:	781b      	ldrb	r3, [r3, #0]
   2f54a:	2b2b      	cmp	r3, #43	; 0x2b
   2f54c:	d009      	beq.n	2f562 <isTopicMatched+0x4e>
   2f54e:	697b      	ldr	r3, [r7, #20]
   2f550:	781b      	ldrb	r3, [r3, #0]
   2f552:	2b23      	cmp	r3, #35	; 0x23
   2f554:	d005      	beq.n	2f562 <isTopicMatched+0x4e>
   2f556:	697b      	ldr	r3, [r7, #20]
   2f558:	781a      	ldrb	r2, [r3, #0]
   2f55a:	693b      	ldr	r3, [r7, #16]
   2f55c:	781b      	ldrb	r3, [r3, #0]
   2f55e:	429a      	cmp	r2, r3
   2f560:	d12e      	bne.n	2f5c0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f562:	697b      	ldr	r3, [r7, #20]
   2f564:	781b      	ldrb	r3, [r3, #0]
   2f566:	2b2b      	cmp	r3, #43	; 0x2b
   2f568:	d112      	bne.n	2f590 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f56a:	693b      	ldr	r3, [r7, #16]
   2f56c:	3301      	adds	r3, #1
   2f56e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f570:	e005      	b.n	2f57e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f572:	693b      	ldr	r3, [r7, #16]
   2f574:	3301      	adds	r3, #1
   2f576:	613b      	str	r3, [r7, #16]
   2f578:	693b      	ldr	r3, [r7, #16]
   2f57a:	3301      	adds	r3, #1
   2f57c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f57e:	68fa      	ldr	r2, [r7, #12]
   2f580:	68bb      	ldr	r3, [r7, #8]
   2f582:	429a      	cmp	r2, r3
   2f584:	d20b      	bcs.n	2f59e <isTopicMatched+0x8a>
   2f586:	68fb      	ldr	r3, [r7, #12]
   2f588:	781b      	ldrb	r3, [r3, #0]
   2f58a:	2b2f      	cmp	r3, #47	; 0x2f
   2f58c:	d1f1      	bne.n	2f572 <isTopicMatched+0x5e>
   2f58e:	e006      	b.n	2f59e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f590:	697b      	ldr	r3, [r7, #20]
   2f592:	781b      	ldrb	r3, [r3, #0]
   2f594:	2b23      	cmp	r3, #35	; 0x23
   2f596:	d102      	bne.n	2f59e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f598:	68bb      	ldr	r3, [r7, #8]
   2f59a:	3b01      	subs	r3, #1
   2f59c:	613b      	str	r3, [r7, #16]
        curf++;
   2f59e:	697b      	ldr	r3, [r7, #20]
   2f5a0:	3301      	adds	r3, #1
   2f5a2:	617b      	str	r3, [r7, #20]
        curn++;
   2f5a4:	693b      	ldr	r3, [r7, #16]
   2f5a6:	3301      	adds	r3, #1
   2f5a8:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f5aa:	697b      	ldr	r3, [r7, #20]
   2f5ac:	781b      	ldrb	r3, [r3, #0]
   2f5ae:	2b00      	cmp	r3, #0
   2f5b0:	d007      	beq.n	2f5c2 <isTopicMatched+0xae>
   2f5b2:	693a      	ldr	r2, [r7, #16]
   2f5b4:	68bb      	ldr	r3, [r7, #8]
   2f5b6:	429a      	cmp	r2, r3
   2f5b8:	d3bd      	bcc.n	2f536 <isTopicMatched+0x22>
   2f5ba:	e002      	b.n	2f5c2 <isTopicMatched+0xae>
            break;
   2f5bc:	46c0      	nop			; (mov r8, r8)
   2f5be:	e000      	b.n	2f5c2 <isTopicMatched+0xae>
            break;
   2f5c0:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f5c2:	693a      	ldr	r2, [r7, #16]
   2f5c4:	68bb      	ldr	r3, [r7, #8]
   2f5c6:	429a      	cmp	r2, r3
   2f5c8:	d105      	bne.n	2f5d6 <isTopicMatched+0xc2>
   2f5ca:	697b      	ldr	r3, [r7, #20]
   2f5cc:	781b      	ldrb	r3, [r3, #0]
   2f5ce:	2b00      	cmp	r3, #0
   2f5d0:	d101      	bne.n	2f5d6 <isTopicMatched+0xc2>
   2f5d2:	2301      	movs	r3, #1
   2f5d4:	e000      	b.n	2f5d8 <isTopicMatched+0xc4>
   2f5d6:	2300      	movs	r3, #0
   2f5d8:	b2db      	uxtb	r3, r3
}
   2f5da:	0018      	movs	r0, r3
   2f5dc:	46bd      	mov	sp, r7
   2f5de:	b006      	add	sp, #24
   2f5e0:	bd80      	pop	{r7, pc}
	...

0002f5e4 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f5e4:	b580      	push	{r7, lr}
   2f5e6:	b08a      	sub	sp, #40	; 0x28
   2f5e8:	af00      	add	r7, sp, #0
   2f5ea:	60f8      	str	r0, [r7, #12]
   2f5ec:	60b9      	str	r1, [r7, #8]
   2f5ee:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f5f0:	2301      	movs	r3, #1
   2f5f2:	425b      	negs	r3, r3
   2f5f4:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f5f6:	2300      	movs	r3, #0
   2f5f8:	627b      	str	r3, [r7, #36]	; 0x24
   2f5fa:	e044      	b.n	2f686 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f5fc:	68fa      	ldr	r2, [r7, #12]
   2f5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f600:	3304      	adds	r3, #4
   2f602:	00db      	lsls	r3, r3, #3
   2f604:	18d3      	adds	r3, r2, r3
   2f606:	3304      	adds	r3, #4
   2f608:	681b      	ldr	r3, [r3, #0]
   2f60a:	2b00      	cmp	r3, #0
   2f60c:	d038      	beq.n	2f680 <deliverMessage+0x9c>
   2f60e:	68fa      	ldr	r2, [r7, #12]
   2f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f612:	3304      	adds	r3, #4
   2f614:	00db      	lsls	r3, r3, #3
   2f616:	18d3      	adds	r3, r2, r3
   2f618:	3304      	adds	r3, #4
   2f61a:	681a      	ldr	r2, [r3, #0]
   2f61c:	68bb      	ldr	r3, [r7, #8]
   2f61e:	0011      	movs	r1, r2
   2f620:	0018      	movs	r0, r3
   2f622:	4b28      	ldr	r3, [pc, #160]	; (2f6c4 <deliverMessage+0xe0>)
   2f624:	4798      	blx	r3
   2f626:	1e03      	subs	r3, r0, #0
   2f628:	d10d      	bne.n	2f646 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f62a:	68fa      	ldr	r2, [r7, #12]
   2f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f62e:	3304      	adds	r3, #4
   2f630:	00db      	lsls	r3, r3, #3
   2f632:	18d3      	adds	r3, r2, r3
   2f634:	3304      	adds	r3, #4
   2f636:	681b      	ldr	r3, [r3, #0]
   2f638:	68ba      	ldr	r2, [r7, #8]
   2f63a:	0011      	movs	r1, r2
   2f63c:	0018      	movs	r0, r3
   2f63e:	4b22      	ldr	r3, [pc, #136]	; (2f6c8 <deliverMessage+0xe4>)
   2f640:	4798      	blx	r3
   2f642:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f644:	d01c      	beq.n	2f680 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f646:	68fa      	ldr	r2, [r7, #12]
   2f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f64a:	3304      	adds	r3, #4
   2f64c:	00db      	lsls	r3, r3, #3
   2f64e:	18d3      	adds	r3, r2, r3
   2f650:	3308      	adds	r3, #8
   2f652:	681b      	ldr	r3, [r3, #0]
   2f654:	2b00      	cmp	r3, #0
   2f656:	d013      	beq.n	2f680 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f658:	687a      	ldr	r2, [r7, #4]
   2f65a:	68b9      	ldr	r1, [r7, #8]
   2f65c:	2318      	movs	r3, #24
   2f65e:	18fb      	adds	r3, r7, r3
   2f660:	0018      	movs	r0, r3
   2f662:	4b1a      	ldr	r3, [pc, #104]	; (2f6cc <deliverMessage+0xe8>)
   2f664:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f666:	68fa      	ldr	r2, [r7, #12]
   2f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f66a:	3304      	adds	r3, #4
   2f66c:	00db      	lsls	r3, r3, #3
   2f66e:	18d3      	adds	r3, r2, r3
   2f670:	3308      	adds	r3, #8
   2f672:	681b      	ldr	r3, [r3, #0]
   2f674:	2218      	movs	r2, #24
   2f676:	18ba      	adds	r2, r7, r2
   2f678:	0010      	movs	r0, r2
   2f67a:	4798      	blx	r3
                rc = SUCCESS;
   2f67c:	2300      	movs	r3, #0
   2f67e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f682:	3301      	adds	r3, #1
   2f684:	627b      	str	r3, [r7, #36]	; 0x24
   2f686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f688:	2b04      	cmp	r3, #4
   2f68a:	ddb7      	ble.n	2f5fc <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f68c:	6a3b      	ldr	r3, [r7, #32]
   2f68e:	3301      	adds	r3, #1
   2f690:	d112      	bne.n	2f6b8 <deliverMessage+0xd4>
   2f692:	68fb      	ldr	r3, [r7, #12]
   2f694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f696:	2b00      	cmp	r3, #0
   2f698:	d00e      	beq.n	2f6b8 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f69a:	687a      	ldr	r2, [r7, #4]
   2f69c:	68b9      	ldr	r1, [r7, #8]
   2f69e:	2310      	movs	r3, #16
   2f6a0:	18fb      	adds	r3, r7, r3
   2f6a2:	0018      	movs	r0, r3
   2f6a4:	4b09      	ldr	r3, [pc, #36]	; (2f6cc <deliverMessage+0xe8>)
   2f6a6:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f6a8:	68fb      	ldr	r3, [r7, #12]
   2f6aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f6ac:	2210      	movs	r2, #16
   2f6ae:	18ba      	adds	r2, r7, r2
   2f6b0:	0010      	movs	r0, r2
   2f6b2:	4798      	blx	r3
        rc = SUCCESS;
   2f6b4:	2300      	movs	r3, #0
   2f6b6:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f6b8:	6a3b      	ldr	r3, [r7, #32]
}
   2f6ba:	0018      	movs	r0, r3
   2f6bc:	46bd      	mov	sp, r7
   2f6be:	b00a      	add	sp, #40	; 0x28
   2f6c0:	bd80      	pop	{r7, pc}
   2f6c2:	46c0      	nop			; (mov r8, r8)
   2f6c4:	000312b9 	.word	0x000312b9
   2f6c8:	0002f515 	.word	0x0002f515
   2f6cc:	0002f21d 	.word	0x0002f21d

0002f6d0 <keepalive>:


int keepalive(MQTTClient* c)
{
   2f6d0:	b580      	push	{r7, lr}
   2f6d2:	b088      	sub	sp, #32
   2f6d4:	af00      	add	r7, sp, #0
   2f6d6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f6d8:	2301      	movs	r3, #1
   2f6da:	425b      	negs	r3, r3
   2f6dc:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2f6de:	687b      	ldr	r3, [r7, #4]
   2f6e0:	699b      	ldr	r3, [r3, #24]
   2f6e2:	2b00      	cmp	r3, #0
   2f6e4:	d102      	bne.n	2f6ec <keepalive+0x1c>
    {
        rc = SUCCESS;
   2f6e6:	2300      	movs	r3, #0
   2f6e8:	61fb      	str	r3, [r7, #28]
        goto exit;
   2f6ea:	e033      	b.n	2f754 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2f6ec:	687b      	ldr	r3, [r7, #4]
   2f6ee:	3354      	adds	r3, #84	; 0x54
   2f6f0:	0018      	movs	r0, r3
   2f6f2:	4b1b      	ldr	r3, [pc, #108]	; (2f760 <keepalive+0x90>)
   2f6f4:	4798      	blx	r3
   2f6f6:	1e03      	subs	r3, r0, #0
   2f6f8:	d02c      	beq.n	2f754 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2f6fa:	687b      	ldr	r3, [r7, #4]
   2f6fc:	7f1b      	ldrb	r3, [r3, #28]
   2f6fe:	2b00      	cmp	r3, #0
   2f700:	d128      	bne.n	2f754 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2f702:	230c      	movs	r3, #12
   2f704:	18fb      	adds	r3, r7, r3
   2f706:	0018      	movs	r0, r3
   2f708:	4b16      	ldr	r3, [pc, #88]	; (2f764 <keepalive+0x94>)
   2f70a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2f70c:	23fa      	movs	r3, #250	; 0xfa
   2f70e:	009a      	lsls	r2, r3, #2
   2f710:	230c      	movs	r3, #12
   2f712:	18fb      	adds	r3, r7, r3
   2f714:	0011      	movs	r1, r2
   2f716:	0018      	movs	r0, r3
   2f718:	4b13      	ldr	r3, [pc, #76]	; (2f768 <keepalive+0x98>)
   2f71a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2f71c:	687b      	ldr	r3, [r7, #4]
   2f71e:	691a      	ldr	r2, [r3, #16]
   2f720:	687b      	ldr	r3, [r7, #4]
   2f722:	689b      	ldr	r3, [r3, #8]
   2f724:	0019      	movs	r1, r3
   2f726:	0010      	movs	r0, r2
   2f728:	4b10      	ldr	r3, [pc, #64]	; (2f76c <keepalive+0x9c>)
   2f72a:	4798      	blx	r3
   2f72c:	0003      	movs	r3, r0
   2f72e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f730:	69bb      	ldr	r3, [r7, #24]
   2f732:	2b00      	cmp	r3, #0
   2f734:	dd0e      	ble.n	2f754 <keepalive+0x84>
   2f736:	230c      	movs	r3, #12
   2f738:	18fa      	adds	r2, r7, r3
   2f73a:	69b9      	ldr	r1, [r7, #24]
   2f73c:	687b      	ldr	r3, [r7, #4]
   2f73e:	0018      	movs	r0, r3
   2f740:	4b0b      	ldr	r3, [pc, #44]	; (2f770 <keepalive+0xa0>)
   2f742:	4798      	blx	r3
   2f744:	0003      	movs	r3, r0
   2f746:	61fb      	str	r3, [r7, #28]
   2f748:	69fb      	ldr	r3, [r7, #28]
   2f74a:	2b00      	cmp	r3, #0
   2f74c:	d102      	bne.n	2f754 <keepalive+0x84>
                c->ping_outstanding = 1;
   2f74e:	687b      	ldr	r3, [r7, #4]
   2f750:	2201      	movs	r2, #1
   2f752:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f754:	69fb      	ldr	r3, [r7, #28]
}
   2f756:	0018      	movs	r0, r3
   2f758:	46bd      	mov	sp, r7
   2f75a:	b008      	add	sp, #32
   2f75c:	bd80      	pop	{r7, pc}
   2f75e:	46c0      	nop			; (mov r8, r8)
   2f760:	00030051 	.word	0x00030051
   2f764:	000300f5 	.word	0x000300f5
   2f768:	0003007d 	.word	0x0003007d
   2f76c:	00030cc9 	.word	0x00030cc9
   2f770:	0002f26d 	.word	0x0002f26d

0002f774 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f774:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f776:	b095      	sub	sp, #84	; 0x54
   2f778:	af06      	add	r7, sp, #24
   2f77a:	6078      	str	r0, [r7, #4]
   2f77c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f77e:	683a      	ldr	r2, [r7, #0]
   2f780:	687b      	ldr	r3, [r7, #4]
   2f782:	0011      	movs	r1, r2
   2f784:	0018      	movs	r0, r3
   2f786:	4b70      	ldr	r3, [pc, #448]	; (2f948 <cycle+0x1d4>)
   2f788:	4798      	blx	r3
   2f78a:	0002      	movs	r2, r0
   2f78c:	232e      	movs	r3, #46	; 0x2e
   2f78e:	18fb      	adds	r3, r7, r3
   2f790:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f792:	2300      	movs	r3, #0
   2f794:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f796:	2300      	movs	r3, #0
   2f798:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f79a:	232e      	movs	r3, #46	; 0x2e
   2f79c:	18fb      	adds	r3, r7, r3
   2f79e:	881b      	ldrh	r3, [r3, #0]
   2f7a0:	2b0d      	cmp	r3, #13
   2f7a2:	d900      	bls.n	2f7a6 <cycle+0x32>
   2f7a4:	e0bd      	b.n	2f922 <cycle+0x1ae>
   2f7a6:	009a      	lsls	r2, r3, #2
   2f7a8:	4b68      	ldr	r3, [pc, #416]	; (2f94c <cycle+0x1d8>)
   2f7aa:	18d3      	adds	r3, r2, r3
   2f7ac:	681b      	ldr	r3, [r3, #0]
   2f7ae:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f7b0:	687b      	ldr	r3, [r7, #4]
   2f7b2:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f7b4:	687b      	ldr	r3, [r7, #4]
   2f7b6:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f7b8:	001e      	movs	r6, r3
   2f7ba:	2310      	movs	r3, #16
   2f7bc:	18fb      	adds	r3, r7, r3
   2f7be:	1d1d      	adds	r5, r3, #4
   2f7c0:	2310      	movs	r3, #16
   2f7c2:	18fb      	adds	r3, r7, r3
   2f7c4:	1c5c      	adds	r4, r3, #1
   2f7c6:	230c      	movs	r3, #12
   2f7c8:	18f9      	adds	r1, r7, r3
   2f7ca:	2310      	movs	r3, #16
   2f7cc:	18fb      	adds	r3, r7, r3
   2f7ce:	1c98      	adds	r0, r3, #2
   2f7d0:	9604      	str	r6, [sp, #16]
   2f7d2:	9203      	str	r2, [sp, #12]
   2f7d4:	2310      	movs	r3, #16
   2f7d6:	18fb      	adds	r3, r7, r3
   2f7d8:	330c      	adds	r3, #12
   2f7da:	9302      	str	r3, [sp, #8]
   2f7dc:	2310      	movs	r3, #16
   2f7de:	18fb      	adds	r3, r7, r3
   2f7e0:	3308      	adds	r3, #8
   2f7e2:	9301      	str	r3, [sp, #4]
   2f7e4:	2320      	movs	r3, #32
   2f7e6:	18fb      	adds	r3, r7, r3
   2f7e8:	9300      	str	r3, [sp, #0]
   2f7ea:	002b      	movs	r3, r5
   2f7ec:	0022      	movs	r2, r4
   2f7ee:	4c58      	ldr	r4, [pc, #352]	; (2f950 <cycle+0x1dc>)
   2f7f0:	47a0      	blx	r4
   2f7f2:	0003      	movs	r3, r0
   2f7f4:	2b01      	cmp	r3, #1
   2f7f6:	d000      	beq.n	2f7fa <cycle+0x86>
   2f7f8:	e098      	b.n	2f92c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f7fa:	68fb      	ldr	r3, [r7, #12]
   2f7fc:	b2da      	uxtb	r2, r3
   2f7fe:	2310      	movs	r3, #16
   2f800:	18fb      	adds	r3, r7, r3
   2f802:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f804:	2310      	movs	r3, #16
   2f806:	18fa      	adds	r2, r7, r3
   2f808:	2320      	movs	r3, #32
   2f80a:	18f9      	adds	r1, r7, r3
   2f80c:	687b      	ldr	r3, [r7, #4]
   2f80e:	0018      	movs	r0, r3
   2f810:	4b50      	ldr	r3, [pc, #320]	; (2f954 <cycle+0x1e0>)
   2f812:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f814:	2310      	movs	r3, #16
   2f816:	18fb      	adds	r3, r7, r3
   2f818:	781b      	ldrb	r3, [r3, #0]
   2f81a:	2b00      	cmp	r3, #0
   2f81c:	d100      	bne.n	2f820 <cycle+0xac>
   2f81e:	e07d      	b.n	2f91c <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f820:	2310      	movs	r3, #16
   2f822:	18fb      	adds	r3, r7, r3
   2f824:	781b      	ldrb	r3, [r3, #0]
   2f826:	2b01      	cmp	r3, #1
   2f828:	d10f      	bne.n	2f84a <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f82a:	687b      	ldr	r3, [r7, #4]
   2f82c:	6918      	ldr	r0, [r3, #16]
   2f82e:	687b      	ldr	r3, [r7, #4]
   2f830:	689b      	ldr	r3, [r3, #8]
   2f832:	0019      	movs	r1, r3
   2f834:	2310      	movs	r3, #16
   2f836:	18fb      	adds	r3, r7, r3
   2f838:	889b      	ldrh	r3, [r3, #4]
   2f83a:	9300      	str	r3, [sp, #0]
   2f83c:	2300      	movs	r3, #0
   2f83e:	2204      	movs	r2, #4
   2f840:	4c45      	ldr	r4, [pc, #276]	; (2f958 <cycle+0x1e4>)
   2f842:	47a0      	blx	r4
   2f844:	0003      	movs	r3, r0
   2f846:	637b      	str	r3, [r7, #52]	; 0x34
   2f848:	e013      	b.n	2f872 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f84a:	2310      	movs	r3, #16
   2f84c:	18fb      	adds	r3, r7, r3
   2f84e:	781b      	ldrb	r3, [r3, #0]
   2f850:	2b02      	cmp	r3, #2
   2f852:	d10e      	bne.n	2f872 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f854:	687b      	ldr	r3, [r7, #4]
   2f856:	6918      	ldr	r0, [r3, #16]
   2f858:	687b      	ldr	r3, [r7, #4]
   2f85a:	689b      	ldr	r3, [r3, #8]
   2f85c:	0019      	movs	r1, r3
   2f85e:	2310      	movs	r3, #16
   2f860:	18fb      	adds	r3, r7, r3
   2f862:	889b      	ldrh	r3, [r3, #4]
   2f864:	9300      	str	r3, [sp, #0]
   2f866:	2300      	movs	r3, #0
   2f868:	2205      	movs	r2, #5
   2f86a:	4c3b      	ldr	r4, [pc, #236]	; (2f958 <cycle+0x1e4>)
   2f86c:	47a0      	blx	r4
   2f86e:	0003      	movs	r3, r0
   2f870:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f874:	2b00      	cmp	r3, #0
   2f876:	dc03      	bgt.n	2f880 <cycle+0x10c>
                    rc = FAILURE;
   2f878:	2301      	movs	r3, #1
   2f87a:	425b      	negs	r3, r3
   2f87c:	633b      	str	r3, [r7, #48]	; 0x30
   2f87e:	e007      	b.n	2f890 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f880:	683a      	ldr	r2, [r7, #0]
   2f882:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f884:	687b      	ldr	r3, [r7, #4]
   2f886:	0018      	movs	r0, r3
   2f888:	4b34      	ldr	r3, [pc, #208]	; (2f95c <cycle+0x1e8>)
   2f88a:	4798      	blx	r3
   2f88c:	0003      	movs	r3, r0
   2f88e:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f892:	3301      	adds	r3, #1
   2f894:	d142      	bne.n	2f91c <cycle+0x1a8>
                    goto exit; // there was a problem
   2f896:	46c0      	nop			; (mov r8, r8)
   2f898:	e049      	b.n	2f92e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f89a:	687b      	ldr	r3, [r7, #4]
   2f89c:	695c      	ldr	r4, [r3, #20]
   2f89e:	687b      	ldr	r3, [r7, #4]
   2f8a0:	68db      	ldr	r3, [r3, #12]
   2f8a2:	220a      	movs	r2, #10
   2f8a4:	18ba      	adds	r2, r7, r2
   2f8a6:	2109      	movs	r1, #9
   2f8a8:	1879      	adds	r1, r7, r1
   2f8aa:	2008      	movs	r0, #8
   2f8ac:	1838      	adds	r0, r7, r0
   2f8ae:	9300      	str	r3, [sp, #0]
   2f8b0:	0023      	movs	r3, r4
   2f8b2:	4c2b      	ldr	r4, [pc, #172]	; (2f960 <cycle+0x1ec>)
   2f8b4:	47a0      	blx	r4
   2f8b6:	0003      	movs	r3, r0
   2f8b8:	2b01      	cmp	r3, #1
   2f8ba:	d003      	beq.n	2f8c4 <cycle+0x150>
                rc = FAILURE;
   2f8bc:	2301      	movs	r3, #1
   2f8be:	425b      	negs	r3, r3
   2f8c0:	633b      	str	r3, [r7, #48]	; 0x30
   2f8c2:	e023      	b.n	2f90c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f8c4:	687b      	ldr	r3, [r7, #4]
   2f8c6:	6918      	ldr	r0, [r3, #16]
   2f8c8:	687b      	ldr	r3, [r7, #4]
   2f8ca:	689b      	ldr	r3, [r3, #8]
   2f8cc:	0019      	movs	r1, r3
   2f8ce:	230a      	movs	r3, #10
   2f8d0:	18fb      	adds	r3, r7, r3
   2f8d2:	881b      	ldrh	r3, [r3, #0]
   2f8d4:	9300      	str	r3, [sp, #0]
   2f8d6:	2300      	movs	r3, #0
   2f8d8:	2206      	movs	r2, #6
   2f8da:	4c1f      	ldr	r4, [pc, #124]	; (2f958 <cycle+0x1e4>)
   2f8dc:	47a0      	blx	r4
   2f8de:	0003      	movs	r3, r0
   2f8e0:	637b      	str	r3, [r7, #52]	; 0x34
   2f8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f8e4:	2b00      	cmp	r3, #0
   2f8e6:	dc03      	bgt.n	2f8f0 <cycle+0x17c>
                rc = FAILURE;
   2f8e8:	2301      	movs	r3, #1
   2f8ea:	425b      	negs	r3, r3
   2f8ec:	633b      	str	r3, [r7, #48]	; 0x30
   2f8ee:	e00d      	b.n	2f90c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f8f0:	683a      	ldr	r2, [r7, #0]
   2f8f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f8f4:	687b      	ldr	r3, [r7, #4]
   2f8f6:	0018      	movs	r0, r3
   2f8f8:	4b18      	ldr	r3, [pc, #96]	; (2f95c <cycle+0x1e8>)
   2f8fa:	4798      	blx	r3
   2f8fc:	0003      	movs	r3, r0
   2f8fe:	633b      	str	r3, [r7, #48]	; 0x30
   2f900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f902:	2b00      	cmp	r3, #0
   2f904:	d002      	beq.n	2f90c <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f906:	2301      	movs	r3, #1
   2f908:	425b      	negs	r3, r3
   2f90a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f90e:	3301      	adds	r3, #1
   2f910:	d106      	bne.n	2f920 <cycle+0x1ac>
                goto exit; // there was a problem
   2f912:	e00c      	b.n	2f92e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f914:	687b      	ldr	r3, [r7, #4]
   2f916:	2200      	movs	r2, #0
   2f918:	771a      	strb	r2, [r3, #28]
            break;
   2f91a:	e002      	b.n	2f922 <cycle+0x1ae>
            break;
   2f91c:	46c0      	nop			; (mov r8, r8)
   2f91e:	e000      	b.n	2f922 <cycle+0x1ae>
            break;
   2f920:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f922:	687b      	ldr	r3, [r7, #4]
   2f924:	0018      	movs	r0, r3
   2f926:	4b0f      	ldr	r3, [pc, #60]	; (2f964 <cycle+0x1f0>)
   2f928:	4798      	blx	r3
   2f92a:	e000      	b.n	2f92e <cycle+0x1ba>
                goto exit;
   2f92c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f930:	2b00      	cmp	r3, #0
   2f932:	d103      	bne.n	2f93c <cycle+0x1c8>
        rc = packet_type;
   2f934:	232e      	movs	r3, #46	; 0x2e
   2f936:	18fb      	adds	r3, r7, r3
   2f938:	881b      	ldrh	r3, [r3, #0]
   2f93a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f93e:	0018      	movs	r0, r3
   2f940:	46bd      	mov	sp, r7
   2f942:	b00f      	add	sp, #60	; 0x3c
   2f944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f946:	46c0      	nop			; (mov r8, r8)
   2f948:	0002f429 	.word	0x0002f429
   2f94c:	0003aaa0 	.word	0x0003aaa0
   2f950:	00030ced 	.word	0x00030ced
   2f954:	0002f5e5 	.word	0x0002f5e5
   2f958:	000314e5 	.word	0x000314e5
   2f95c:	0002f26d 	.word	0x0002f26d
   2f960:	00030df1 	.word	0x00030df1
   2f964:	0002f6d1 	.word	0x0002f6d1

0002f968 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f968:	b580      	push	{r7, lr}
   2f96a:	b086      	sub	sp, #24
   2f96c:	af00      	add	r7, sp, #0
   2f96e:	6078      	str	r0, [r7, #4]
   2f970:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f972:	2300      	movs	r3, #0
   2f974:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f976:	2308      	movs	r3, #8
   2f978:	18fb      	adds	r3, r7, r3
   2f97a:	0018      	movs	r0, r3
   2f97c:	4b11      	ldr	r3, [pc, #68]	; (2f9c4 <MQTTYield+0x5c>)
   2f97e:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f980:	683a      	ldr	r2, [r7, #0]
   2f982:	2308      	movs	r3, #8
   2f984:	18fb      	adds	r3, r7, r3
   2f986:	0011      	movs	r1, r2
   2f988:	0018      	movs	r0, r3
   2f98a:	4b0f      	ldr	r3, [pc, #60]	; (2f9c8 <MQTTYield+0x60>)
   2f98c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f98e:	2308      	movs	r3, #8
   2f990:	18fa      	adds	r2, r7, r3
   2f992:	687b      	ldr	r3, [r7, #4]
   2f994:	0011      	movs	r1, r2
   2f996:	0018      	movs	r0, r3
   2f998:	4b0c      	ldr	r3, [pc, #48]	; (2f9cc <MQTTYield+0x64>)
   2f99a:	4798      	blx	r3
   2f99c:	0003      	movs	r3, r0
   2f99e:	3301      	adds	r3, #1
   2f9a0:	d103      	bne.n	2f9aa <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f9a2:	2301      	movs	r3, #1
   2f9a4:	425b      	negs	r3, r3
   2f9a6:	617b      	str	r3, [r7, #20]
            break;
   2f9a8:	e006      	b.n	2f9b8 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f9aa:	2308      	movs	r3, #8
   2f9ac:	18fb      	adds	r3, r7, r3
   2f9ae:	0018      	movs	r0, r3
   2f9b0:	4b07      	ldr	r3, [pc, #28]	; (2f9d0 <MQTTYield+0x68>)
   2f9b2:	4798      	blx	r3
   2f9b4:	1e03      	subs	r3, r0, #0
   2f9b6:	d0ea      	beq.n	2f98e <MQTTYield+0x26>
        
    return rc;
   2f9b8:	697b      	ldr	r3, [r7, #20]
}
   2f9ba:	0018      	movs	r0, r3
   2f9bc:	46bd      	mov	sp, r7
   2f9be:	b006      	add	sp, #24
   2f9c0:	bd80      	pop	{r7, pc}
   2f9c2:	46c0      	nop			; (mov r8, r8)
   2f9c4:	000300f5 	.word	0x000300f5
   2f9c8:	0003007d 	.word	0x0003007d
   2f9cc:	0002f775 	.word	0x0002f775
   2f9d0:	00030051 	.word	0x00030051

0002f9d4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f9d4:	b580      	push	{r7, lr}
   2f9d6:	b086      	sub	sp, #24
   2f9d8:	af00      	add	r7, sp, #0
   2f9da:	60f8      	str	r0, [r7, #12]
   2f9dc:	60b9      	str	r1, [r7, #8]
   2f9de:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f9e0:	2301      	movs	r3, #1
   2f9e2:	425b      	negs	r3, r3
   2f9e4:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f9e6:	687b      	ldr	r3, [r7, #4]
   2f9e8:	0018      	movs	r0, r3
   2f9ea:	4b0b      	ldr	r3, [pc, #44]	; (2fa18 <waitfor+0x44>)
   2f9ec:	4798      	blx	r3
   2f9ee:	1e03      	subs	r3, r0, #0
   2f9f0:	d10c      	bne.n	2fa0c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f9f2:	687a      	ldr	r2, [r7, #4]
   2f9f4:	68fb      	ldr	r3, [r7, #12]
   2f9f6:	0011      	movs	r1, r2
   2f9f8:	0018      	movs	r0, r3
   2f9fa:	4b08      	ldr	r3, [pc, #32]	; (2fa1c <waitfor+0x48>)
   2f9fc:	4798      	blx	r3
   2f9fe:	0003      	movs	r3, r0
   2fa00:	617b      	str	r3, [r7, #20]
   2fa02:	697a      	ldr	r2, [r7, #20]
   2fa04:	68bb      	ldr	r3, [r7, #8]
   2fa06:	429a      	cmp	r2, r3
   2fa08:	d1ed      	bne.n	2f9e6 <waitfor+0x12>
   2fa0a:	e000      	b.n	2fa0e <waitfor+0x3a>
            break; // we timed out
   2fa0c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2fa0e:	697b      	ldr	r3, [r7, #20]
}
   2fa10:	0018      	movs	r0, r3
   2fa12:	46bd      	mov	sp, r7
   2fa14:	b006      	add	sp, #24
   2fa16:	bd80      	pop	{r7, pc}
   2fa18:	00030051 	.word	0x00030051
   2fa1c:	0002f775 	.word	0x0002f775

0002fa20 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2fa20:	b590      	push	{r4, r7, lr}
   2fa22:	b09f      	sub	sp, #124	; 0x7c
   2fa24:	af00      	add	r7, sp, #0
   2fa26:	6078      	str	r0, [r7, #4]
   2fa28:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2fa2a:	2301      	movs	r3, #1
   2fa2c:	425b      	negs	r3, r3
   2fa2e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2fa30:	230c      	movs	r3, #12
   2fa32:	18fa      	adds	r2, r7, r3
   2fa34:	4b41      	ldr	r3, [pc, #260]	; (2fb3c <MQTTConnect+0x11c>)
   2fa36:	0010      	movs	r0, r2
   2fa38:	0019      	movs	r1, r3
   2fa3a:	2358      	movs	r3, #88	; 0x58
   2fa3c:	001a      	movs	r2, r3
   2fa3e:	4b40      	ldr	r3, [pc, #256]	; (2fb40 <MQTTConnect+0x120>)
   2fa40:	4798      	blx	r3
    int len = 0;
   2fa42:	2300      	movs	r3, #0
   2fa44:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2fa46:	687b      	ldr	r3, [r7, #4]
   2fa48:	6a1b      	ldr	r3, [r3, #32]
   2fa4a:	2b00      	cmp	r3, #0
   2fa4c:	d166      	bne.n	2fb1c <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2fa4e:	2364      	movs	r3, #100	; 0x64
   2fa50:	18fb      	adds	r3, r7, r3
   2fa52:	0018      	movs	r0, r3
   2fa54:	4b3b      	ldr	r3, [pc, #236]	; (2fb44 <MQTTConnect+0x124>)
   2fa56:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2fa58:	687b      	ldr	r3, [r7, #4]
   2fa5a:	685a      	ldr	r2, [r3, #4]
   2fa5c:	2364      	movs	r3, #100	; 0x64
   2fa5e:	18fb      	adds	r3, r7, r3
   2fa60:	0011      	movs	r1, r2
   2fa62:	0018      	movs	r0, r3
   2fa64:	4b38      	ldr	r3, [pc, #224]	; (2fb48 <MQTTConnect+0x128>)
   2fa66:	4798      	blx	r3

    if (options == 0)
   2fa68:	683b      	ldr	r3, [r7, #0]
   2fa6a:	2b00      	cmp	r3, #0
   2fa6c:	d102      	bne.n	2fa74 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2fa6e:	230c      	movs	r3, #12
   2fa70:	18fb      	adds	r3, r7, r3
   2fa72:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2fa74:	683b      	ldr	r3, [r7, #0]
   2fa76:	8b1b      	ldrh	r3, [r3, #24]
   2fa78:	001a      	movs	r2, r3
   2fa7a:	687b      	ldr	r3, [r7, #4]
   2fa7c:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2fa7e:	687b      	ldr	r3, [r7, #4]
   2fa80:	3354      	adds	r3, #84	; 0x54
   2fa82:	001a      	movs	r2, r3
   2fa84:	687b      	ldr	r3, [r7, #4]
   2fa86:	699b      	ldr	r3, [r3, #24]
   2fa88:	0019      	movs	r1, r3
   2fa8a:	0010      	movs	r0, r2
   2fa8c:	4b2f      	ldr	r3, [pc, #188]	; (2fb4c <MQTTConnect+0x12c>)
   2fa8e:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2fa90:	687b      	ldr	r3, [r7, #4]
   2fa92:	6918      	ldr	r0, [r3, #16]
   2fa94:	687b      	ldr	r3, [r7, #4]
   2fa96:	689b      	ldr	r3, [r3, #8]
   2fa98:	0019      	movs	r1, r3
   2fa9a:	683b      	ldr	r3, [r7, #0]
   2fa9c:	001a      	movs	r2, r3
   2fa9e:	4b2c      	ldr	r3, [pc, #176]	; (2fb50 <MQTTConnect+0x130>)
   2faa0:	4798      	blx	r3
   2faa2:	0003      	movs	r3, r0
   2faa4:	673b      	str	r3, [r7, #112]	; 0x70
   2faa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2faa8:	2b00      	cmp	r3, #0
   2faaa:	dd39      	ble.n	2fb20 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2faac:	2364      	movs	r3, #100	; 0x64
   2faae:	18fa      	adds	r2, r7, r3
   2fab0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2fab2:	687b      	ldr	r3, [r7, #4]
   2fab4:	0018      	movs	r0, r3
   2fab6:	4b27      	ldr	r3, [pc, #156]	; (2fb54 <MQTTConnect+0x134>)
   2fab8:	4798      	blx	r3
   2faba:	0003      	movs	r3, r0
   2fabc:	677b      	str	r3, [r7, #116]	; 0x74
   2fabe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fac0:	2b00      	cmp	r3, #0
   2fac2:	d12f      	bne.n	2fb24 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2fac4:	2364      	movs	r3, #100	; 0x64
   2fac6:	18fa      	adds	r2, r7, r3
   2fac8:	687b      	ldr	r3, [r7, #4]
   2faca:	2102      	movs	r1, #2
   2facc:	0018      	movs	r0, r3
   2face:	4b22      	ldr	r3, [pc, #136]	; (2fb58 <MQTTConnect+0x138>)
   2fad0:	4798      	blx	r3
   2fad2:	0003      	movs	r3, r0
   2fad4:	2b02      	cmp	r3, #2
   2fad6:	d11d      	bne.n	2fb14 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2fad8:	230b      	movs	r3, #11
   2fada:	18fb      	adds	r3, r7, r3
   2fadc:	22ff      	movs	r2, #255	; 0xff
   2fade:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2fae0:	230a      	movs	r3, #10
   2fae2:	18fb      	adds	r3, r7, r3
   2fae4:	2200      	movs	r2, #0
   2fae6:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2fae8:	687b      	ldr	r3, [r7, #4]
   2faea:	695a      	ldr	r2, [r3, #20]
   2faec:	687b      	ldr	r3, [r7, #4]
   2faee:	68db      	ldr	r3, [r3, #12]
   2faf0:	210b      	movs	r1, #11
   2faf2:	1879      	adds	r1, r7, r1
   2faf4:	200a      	movs	r0, #10
   2faf6:	1838      	adds	r0, r7, r0
   2faf8:	4c18      	ldr	r4, [pc, #96]	; (2fb5c <MQTTConnect+0x13c>)
   2fafa:	47a0      	blx	r4
   2fafc:	0003      	movs	r3, r0
   2fafe:	2b01      	cmp	r3, #1
   2fb00:	d104      	bne.n	2fb0c <MQTTConnect+0xec>
            rc = connack_rc;
   2fb02:	230b      	movs	r3, #11
   2fb04:	18fb      	adds	r3, r7, r3
   2fb06:	781b      	ldrb	r3, [r3, #0]
   2fb08:	677b      	str	r3, [r7, #116]	; 0x74
   2fb0a:	e00c      	b.n	2fb26 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2fb0c:	2301      	movs	r3, #1
   2fb0e:	425b      	negs	r3, r3
   2fb10:	677b      	str	r3, [r7, #116]	; 0x74
   2fb12:	e008      	b.n	2fb26 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2fb14:	2301      	movs	r3, #1
   2fb16:	425b      	negs	r3, r3
   2fb18:	677b      	str	r3, [r7, #116]	; 0x74
   2fb1a:	e004      	b.n	2fb26 <MQTTConnect+0x106>
		goto exit;
   2fb1c:	46c0      	nop			; (mov r8, r8)
   2fb1e:	e002      	b.n	2fb26 <MQTTConnect+0x106>
        goto exit;
   2fb20:	46c0      	nop			; (mov r8, r8)
   2fb22:	e000      	b.n	2fb26 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2fb24:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2fb26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fb28:	2b00      	cmp	r3, #0
   2fb2a:	d102      	bne.n	2fb32 <MQTTConnect+0x112>
        c->isconnected = 1;
   2fb2c:	687b      	ldr	r3, [r7, #4]
   2fb2e:	2201      	movs	r2, #1
   2fb30:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2fb32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2fb34:	0018      	movs	r0, r3
   2fb36:	46bd      	mov	sp, r7
   2fb38:	b01f      	add	sp, #124	; 0x7c
   2fb3a:	bd90      	pop	{r4, r7, pc}
   2fb3c:	0003aad8 	.word	0x0003aad8
   2fb40:	00035749 	.word	0x00035749
   2fb44:	000300f5 	.word	0x000300f5
   2fb48:	0003007d 	.word	0x0003007d
   2fb4c:	000300a5 	.word	0x000300a5
   2fb50:	000308d1 	.word	0x000308d1
   2fb54:	0002f26d 	.word	0x0002f26d
   2fb58:	0002f9d5 	.word	0x0002f9d5
   2fb5c:	00030b4d 	.word	0x00030b4d

0002fb60 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2fb60:	b5b0      	push	{r4, r5, r7, lr}
   2fb62:	b096      	sub	sp, #88	; 0x58
   2fb64:	af04      	add	r7, sp, #16
   2fb66:	60f8      	str	r0, [r7, #12]
   2fb68:	60b9      	str	r1, [r7, #8]
   2fb6a:	603b      	str	r3, [r7, #0]
   2fb6c:	1dfb      	adds	r3, r7, #7
   2fb6e:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2fb70:	2301      	movs	r3, #1
   2fb72:	425b      	negs	r3, r3
   2fb74:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2fb76:	2300      	movs	r3, #0
   2fb78:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2fb7a:	2324      	movs	r3, #36	; 0x24
   2fb7c:	18fb      	adds	r3, r7, r3
   2fb7e:	2200      	movs	r2, #0
   2fb80:	601a      	str	r2, [r3, #0]
   2fb82:	2324      	movs	r3, #36	; 0x24
   2fb84:	18fb      	adds	r3, r7, r3
   2fb86:	2200      	movs	r2, #0
   2fb88:	605a      	str	r2, [r3, #4]
   2fb8a:	2324      	movs	r3, #36	; 0x24
   2fb8c:	18fb      	adds	r3, r7, r3
   2fb8e:	2200      	movs	r2, #0
   2fb90:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2fb92:	1dfb      	adds	r3, r7, #7
   2fb94:	781b      	ldrb	r3, [r3, #0]
   2fb96:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2fb98:	2324      	movs	r3, #36	; 0x24
   2fb9a:	18fb      	adds	r3, r7, r3
   2fb9c:	68ba      	ldr	r2, [r7, #8]
   2fb9e:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fba0:	68fb      	ldr	r3, [r7, #12]
   2fba2:	6a1b      	ldr	r3, [r3, #32]
   2fba4:	2b00      	cmp	r3, #0
   2fba6:	d100      	bne.n	2fbaa <MQTTSubscribe+0x4a>
   2fba8:	e088      	b.n	2fcbc <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2fbaa:	2330      	movs	r3, #48	; 0x30
   2fbac:	18fb      	adds	r3, r7, r3
   2fbae:	0018      	movs	r0, r3
   2fbb0:	4b47      	ldr	r3, [pc, #284]	; (2fcd0 <MQTTSubscribe+0x170>)
   2fbb2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fbb4:	68fb      	ldr	r3, [r7, #12]
   2fbb6:	685a      	ldr	r2, [r3, #4]
   2fbb8:	2330      	movs	r3, #48	; 0x30
   2fbba:	18fb      	adds	r3, r7, r3
   2fbbc:	0011      	movs	r1, r2
   2fbbe:	0018      	movs	r0, r3
   2fbc0:	4b44      	ldr	r3, [pc, #272]	; (2fcd4 <MQTTSubscribe+0x174>)
   2fbc2:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2fbc4:	68fb      	ldr	r3, [r7, #12]
   2fbc6:	691c      	ldr	r4, [r3, #16]
   2fbc8:	68fb      	ldr	r3, [r7, #12]
   2fbca:	689b      	ldr	r3, [r3, #8]
   2fbcc:	001d      	movs	r5, r3
   2fbce:	68fb      	ldr	r3, [r7, #12]
   2fbd0:	0018      	movs	r0, r3
   2fbd2:	4b41      	ldr	r3, [pc, #260]	; (2fcd8 <MQTTSubscribe+0x178>)
   2fbd4:	4798      	blx	r3
   2fbd6:	0003      	movs	r3, r0
   2fbd8:	b29a      	uxth	r2, r3
   2fbda:	2320      	movs	r3, #32
   2fbdc:	18fb      	adds	r3, r7, r3
   2fbde:	9302      	str	r3, [sp, #8]
   2fbe0:	2324      	movs	r3, #36	; 0x24
   2fbe2:	18fb      	adds	r3, r7, r3
   2fbe4:	9301      	str	r3, [sp, #4]
   2fbe6:	2301      	movs	r3, #1
   2fbe8:	9300      	str	r3, [sp, #0]
   2fbea:	0013      	movs	r3, r2
   2fbec:	2200      	movs	r2, #0
   2fbee:	0029      	movs	r1, r5
   2fbf0:	0020      	movs	r0, r4
   2fbf2:	4c3a      	ldr	r4, [pc, #232]	; (2fcdc <MQTTSubscribe+0x17c>)
   2fbf4:	47a0      	blx	r4
   2fbf6:	0003      	movs	r3, r0
   2fbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2fbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fbfc:	2b00      	cmp	r3, #0
   2fbfe:	dd5f      	ble.n	2fcc0 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fc00:	2330      	movs	r3, #48	; 0x30
   2fc02:	18fa      	adds	r2, r7, r3
   2fc04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2fc06:	68fb      	ldr	r3, [r7, #12]
   2fc08:	0018      	movs	r0, r3
   2fc0a:	4b35      	ldr	r3, [pc, #212]	; (2fce0 <MQTTSubscribe+0x180>)
   2fc0c:	4798      	blx	r3
   2fc0e:	0003      	movs	r3, r0
   2fc10:	647b      	str	r3, [r7, #68]	; 0x44
   2fc12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fc14:	2b00      	cmp	r3, #0
   2fc16:	d155      	bne.n	2fcc4 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2fc18:	2330      	movs	r3, #48	; 0x30
   2fc1a:	18fa      	adds	r2, r7, r3
   2fc1c:	68fb      	ldr	r3, [r7, #12]
   2fc1e:	2109      	movs	r1, #9
   2fc20:	0018      	movs	r0, r3
   2fc22:	4b30      	ldr	r3, [pc, #192]	; (2fce4 <MQTTSubscribe+0x184>)
   2fc24:	4798      	blx	r3
   2fc26:	0003      	movs	r3, r0
   2fc28:	2b09      	cmp	r3, #9
   2fc2a:	d143      	bne.n	2fcb4 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2fc2c:	2300      	movs	r3, #0
   2fc2e:	61fb      	str	r3, [r7, #28]
   2fc30:	2301      	movs	r3, #1
   2fc32:	425b      	negs	r3, r3
   2fc34:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2fc36:	68fb      	ldr	r3, [r7, #12]
   2fc38:	695a      	ldr	r2, [r3, #20]
   2fc3a:	68fb      	ldr	r3, [r7, #12]
   2fc3c:	68db      	ldr	r3, [r3, #12]
   2fc3e:	001c      	movs	r4, r3
   2fc40:	2318      	movs	r3, #24
   2fc42:	18fb      	adds	r3, r7, r3
   2fc44:	211c      	movs	r1, #28
   2fc46:	1879      	adds	r1, r7, r1
   2fc48:	2016      	movs	r0, #22
   2fc4a:	1838      	adds	r0, r7, r0
   2fc4c:	9401      	str	r4, [sp, #4]
   2fc4e:	9200      	str	r2, [sp, #0]
   2fc50:	000a      	movs	r2, r1
   2fc52:	2101      	movs	r1, #1
   2fc54:	4c24      	ldr	r4, [pc, #144]	; (2fce8 <MQTTSubscribe+0x188>)
   2fc56:	47a0      	blx	r4
   2fc58:	0003      	movs	r3, r0
   2fc5a:	2b01      	cmp	r3, #1
   2fc5c:	d101      	bne.n	2fc62 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2fc5e:	69bb      	ldr	r3, [r7, #24]
   2fc60:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2fc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fc64:	2b80      	cmp	r3, #128	; 0x80
   2fc66:	d02e      	beq.n	2fcc6 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fc68:	2300      	movs	r3, #0
   2fc6a:	643b      	str	r3, [r7, #64]	; 0x40
   2fc6c:	e01e      	b.n	2fcac <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2fc6e:	68fa      	ldr	r2, [r7, #12]
   2fc70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fc72:	3304      	adds	r3, #4
   2fc74:	00db      	lsls	r3, r3, #3
   2fc76:	18d3      	adds	r3, r2, r3
   2fc78:	3304      	adds	r3, #4
   2fc7a:	681b      	ldr	r3, [r3, #0]
   2fc7c:	2b00      	cmp	r3, #0
   2fc7e:	d112      	bne.n	2fca6 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2fc80:	68fa      	ldr	r2, [r7, #12]
   2fc82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fc84:	3304      	adds	r3, #4
   2fc86:	00db      	lsls	r3, r3, #3
   2fc88:	18d3      	adds	r3, r2, r3
   2fc8a:	3304      	adds	r3, #4
   2fc8c:	68ba      	ldr	r2, [r7, #8]
   2fc8e:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2fc90:	68fa      	ldr	r2, [r7, #12]
   2fc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fc94:	3304      	adds	r3, #4
   2fc96:	00db      	lsls	r3, r3, #3
   2fc98:	18d3      	adds	r3, r2, r3
   2fc9a:	3308      	adds	r3, #8
   2fc9c:	683a      	ldr	r2, [r7, #0]
   2fc9e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2fca0:	2300      	movs	r3, #0
   2fca2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2fca4:	e00f      	b.n	2fcc6 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fca8:	3301      	adds	r3, #1
   2fcaa:	643b      	str	r3, [r7, #64]	; 0x40
   2fcac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fcae:	2b04      	cmp	r3, #4
   2fcb0:	dddd      	ble.n	2fc6e <MQTTSubscribe+0x10e>
   2fcb2:	e008      	b.n	2fcc6 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2fcb4:	2301      	movs	r3, #1
   2fcb6:	425b      	negs	r3, r3
   2fcb8:	647b      	str	r3, [r7, #68]	; 0x44
   2fcba:	e004      	b.n	2fcc6 <MQTTSubscribe+0x166>
		goto exit;
   2fcbc:	46c0      	nop			; (mov r8, r8)
   2fcbe:	e002      	b.n	2fcc6 <MQTTSubscribe+0x166>
        goto exit;
   2fcc0:	46c0      	nop			; (mov r8, r8)
   2fcc2:	e000      	b.n	2fcc6 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2fcc4:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fcc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fcc8:	0018      	movs	r0, r3
   2fcca:	46bd      	mov	sp, r7
   2fccc:	b012      	add	sp, #72	; 0x48
   2fcce:	bdb0      	pop	{r4, r5, r7, pc}
   2fcd0:	000300f5 	.word	0x000300f5
   2fcd4:	0003007d 	.word	0x0003007d
   2fcd8:	0002f23d 	.word	0x0002f23d
   2fcdc:	0003162d 	.word	0x0003162d
   2fce0:	0002f26d 	.word	0x0002f26d
   2fce4:	0002f9d5 	.word	0x0002f9d5
   2fce8:	0003177d 	.word	0x0003177d

0002fcec <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2fcec:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fcee:	46ce      	mov	lr, r9
   2fcf0:	4647      	mov	r7, r8
   2fcf2:	b580      	push	{r7, lr}
   2fcf4:	b097      	sub	sp, #92	; 0x5c
   2fcf6:	af08      	add	r7, sp, #32
   2fcf8:	60f8      	str	r0, [r7, #12]
   2fcfa:	60b9      	str	r1, [r7, #8]
   2fcfc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fcfe:	2301      	movs	r3, #1
   2fd00:	425b      	negs	r3, r3
   2fd02:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2fd04:	2318      	movs	r3, #24
   2fd06:	18fb      	adds	r3, r7, r3
   2fd08:	2200      	movs	r2, #0
   2fd0a:	601a      	str	r2, [r3, #0]
   2fd0c:	2318      	movs	r3, #24
   2fd0e:	18fb      	adds	r3, r7, r3
   2fd10:	2200      	movs	r2, #0
   2fd12:	605a      	str	r2, [r3, #4]
   2fd14:	2318      	movs	r3, #24
   2fd16:	18fb      	adds	r3, r7, r3
   2fd18:	2200      	movs	r2, #0
   2fd1a:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2fd1c:	2318      	movs	r3, #24
   2fd1e:	18fb      	adds	r3, r7, r3
   2fd20:	68ba      	ldr	r2, [r7, #8]
   2fd22:	601a      	str	r2, [r3, #0]
    int len = 0;
   2fd24:	2300      	movs	r3, #0
   2fd26:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fd28:	68fb      	ldr	r3, [r7, #12]
   2fd2a:	6a1b      	ldr	r3, [r3, #32]
   2fd2c:	2b00      	cmp	r3, #0
   2fd2e:	d100      	bne.n	2fd32 <MQTTPublish+0x46>
   2fd30:	e0a0      	b.n	2fe74 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2fd32:	2324      	movs	r3, #36	; 0x24
   2fd34:	18fb      	adds	r3, r7, r3
   2fd36:	0018      	movs	r0, r3
   2fd38:	4b55      	ldr	r3, [pc, #340]	; (2fe90 <MQTTPublish+0x1a4>)
   2fd3a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fd3c:	68fb      	ldr	r3, [r7, #12]
   2fd3e:	685a      	ldr	r2, [r3, #4]
   2fd40:	2324      	movs	r3, #36	; 0x24
   2fd42:	18fb      	adds	r3, r7, r3
   2fd44:	0011      	movs	r1, r2
   2fd46:	0018      	movs	r0, r3
   2fd48:	4b52      	ldr	r3, [pc, #328]	; (2fe94 <MQTTPublish+0x1a8>)
   2fd4a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2fd4c:	687b      	ldr	r3, [r7, #4]
   2fd4e:	781b      	ldrb	r3, [r3, #0]
   2fd50:	2b01      	cmp	r3, #1
   2fd52:	d003      	beq.n	2fd5c <MQTTPublish+0x70>
   2fd54:	687b      	ldr	r3, [r7, #4]
   2fd56:	781b      	ldrb	r3, [r3, #0]
   2fd58:	2b02      	cmp	r3, #2
   2fd5a:	d107      	bne.n	2fd6c <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2fd5c:	68fb      	ldr	r3, [r7, #12]
   2fd5e:	0018      	movs	r0, r3
   2fd60:	4b4d      	ldr	r3, [pc, #308]	; (2fe98 <MQTTPublish+0x1ac>)
   2fd62:	4798      	blx	r3
   2fd64:	0003      	movs	r3, r0
   2fd66:	b29a      	uxth	r2, r3
   2fd68:	687b      	ldr	r3, [r7, #4]
   2fd6a:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fd6c:	68fb      	ldr	r3, [r7, #12]
   2fd6e:	691b      	ldr	r3, [r3, #16]
   2fd70:	469c      	mov	ip, r3
   2fd72:	68fb      	ldr	r3, [r7, #12]
   2fd74:	689b      	ldr	r3, [r3, #8]
   2fd76:	001d      	movs	r5, r3
   2fd78:	687b      	ldr	r3, [r7, #4]
   2fd7a:	781b      	ldrb	r3, [r3, #0]
   2fd7c:	001e      	movs	r6, r3
   2fd7e:	687b      	ldr	r3, [r7, #4]
   2fd80:	785b      	ldrb	r3, [r3, #1]
   2fd82:	4698      	mov	r8, r3
   2fd84:	687b      	ldr	r3, [r7, #4]
   2fd86:	889b      	ldrh	r3, [r3, #4]
   2fd88:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2fd8a:	687b      	ldr	r3, [r7, #4]
   2fd8c:	689a      	ldr	r2, [r3, #8]
   2fd8e:	687b      	ldr	r3, [r7, #4]
   2fd90:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fd92:	9306      	str	r3, [sp, #24]
   2fd94:	9205      	str	r2, [sp, #20]
   2fd96:	2318      	movs	r3, #24
   2fd98:	18fa      	adds	r2, r7, r3
   2fd9a:	2308      	movs	r3, #8
   2fd9c:	446b      	add	r3, sp
   2fd9e:	ca13      	ldmia	r2!, {r0, r1, r4}
   2fda0:	c313      	stmia	r3!, {r0, r1, r4}
   2fda2:	464b      	mov	r3, r9
   2fda4:	9301      	str	r3, [sp, #4]
   2fda6:	4643      	mov	r3, r8
   2fda8:	9300      	str	r3, [sp, #0]
   2fdaa:	0033      	movs	r3, r6
   2fdac:	2200      	movs	r2, #0
   2fdae:	0029      	movs	r1, r5
   2fdb0:	4660      	mov	r0, ip
   2fdb2:	4c3a      	ldr	r4, [pc, #232]	; (2fe9c <MQTTPublish+0x1b0>)
   2fdb4:	47a0      	blx	r4
   2fdb6:	0003      	movs	r3, r0
   2fdb8:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fdbc:	2b00      	cmp	r3, #0
   2fdbe:	dd5b      	ble.n	2fe78 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fdc0:	2324      	movs	r3, #36	; 0x24
   2fdc2:	18fa      	adds	r2, r7, r3
   2fdc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2fdc6:	68fb      	ldr	r3, [r7, #12]
   2fdc8:	0018      	movs	r0, r3
   2fdca:	4b35      	ldr	r3, [pc, #212]	; (2fea0 <MQTTPublish+0x1b4>)
   2fdcc:	4798      	blx	r3
   2fdce:	0003      	movs	r3, r0
   2fdd0:	637b      	str	r3, [r7, #52]	; 0x34
   2fdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fdd4:	2b00      	cmp	r3, #0
   2fdd6:	d151      	bne.n	2fe7c <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2fdd8:	687b      	ldr	r3, [r7, #4]
   2fdda:	781b      	ldrb	r3, [r3, #0]
   2fddc:	2b01      	cmp	r3, #1
   2fdde:	d122      	bne.n	2fe26 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2fde0:	2324      	movs	r3, #36	; 0x24
   2fde2:	18fa      	adds	r2, r7, r3
   2fde4:	68fb      	ldr	r3, [r7, #12]
   2fde6:	2104      	movs	r1, #4
   2fde8:	0018      	movs	r0, r3
   2fdea:	4b2e      	ldr	r3, [pc, #184]	; (2fea4 <MQTTPublish+0x1b8>)
   2fdec:	4798      	blx	r3
   2fdee:	0003      	movs	r3, r0
   2fdf0:	2b04      	cmp	r3, #4
   2fdf2:	d114      	bne.n	2fe1e <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fdf4:	68fb      	ldr	r3, [r7, #12]
   2fdf6:	695c      	ldr	r4, [r3, #20]
   2fdf8:	68fb      	ldr	r3, [r7, #12]
   2fdfa:	68db      	ldr	r3, [r3, #12]
   2fdfc:	2216      	movs	r2, #22
   2fdfe:	18ba      	adds	r2, r7, r2
   2fe00:	2115      	movs	r1, #21
   2fe02:	1879      	adds	r1, r7, r1
   2fe04:	2014      	movs	r0, #20
   2fe06:	1838      	adds	r0, r7, r0
   2fe08:	9300      	str	r3, [sp, #0]
   2fe0a:	0023      	movs	r3, r4
   2fe0c:	4c26      	ldr	r4, [pc, #152]	; (2fea8 <MQTTPublish+0x1bc>)
   2fe0e:	47a0      	blx	r4
   2fe10:	0003      	movs	r3, r0
   2fe12:	2b01      	cmp	r3, #1
   2fe14:	d033      	beq.n	2fe7e <MQTTPublish+0x192>
                rc = FAILURE;
   2fe16:	2301      	movs	r3, #1
   2fe18:	425b      	negs	r3, r3
   2fe1a:	637b      	str	r3, [r7, #52]	; 0x34
   2fe1c:	e02f      	b.n	2fe7e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fe1e:	2301      	movs	r3, #1
   2fe20:	425b      	negs	r3, r3
   2fe22:	637b      	str	r3, [r7, #52]	; 0x34
   2fe24:	e02b      	b.n	2fe7e <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2fe26:	687b      	ldr	r3, [r7, #4]
   2fe28:	781b      	ldrb	r3, [r3, #0]
   2fe2a:	2b02      	cmp	r3, #2
   2fe2c:	d127      	bne.n	2fe7e <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2fe2e:	2324      	movs	r3, #36	; 0x24
   2fe30:	18fa      	adds	r2, r7, r3
   2fe32:	68fb      	ldr	r3, [r7, #12]
   2fe34:	2107      	movs	r1, #7
   2fe36:	0018      	movs	r0, r3
   2fe38:	4b1a      	ldr	r3, [pc, #104]	; (2fea4 <MQTTPublish+0x1b8>)
   2fe3a:	4798      	blx	r3
   2fe3c:	0003      	movs	r3, r0
   2fe3e:	2b07      	cmp	r3, #7
   2fe40:	d114      	bne.n	2fe6c <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fe42:	68fb      	ldr	r3, [r7, #12]
   2fe44:	695c      	ldr	r4, [r3, #20]
   2fe46:	68fb      	ldr	r3, [r7, #12]
   2fe48:	68db      	ldr	r3, [r3, #12]
   2fe4a:	2212      	movs	r2, #18
   2fe4c:	18ba      	adds	r2, r7, r2
   2fe4e:	2111      	movs	r1, #17
   2fe50:	1879      	adds	r1, r7, r1
   2fe52:	2010      	movs	r0, #16
   2fe54:	1838      	adds	r0, r7, r0
   2fe56:	9300      	str	r3, [sp, #0]
   2fe58:	0023      	movs	r3, r4
   2fe5a:	4c13      	ldr	r4, [pc, #76]	; (2fea8 <MQTTPublish+0x1bc>)
   2fe5c:	47a0      	blx	r4
   2fe5e:	0003      	movs	r3, r0
   2fe60:	2b01      	cmp	r3, #1
   2fe62:	d00c      	beq.n	2fe7e <MQTTPublish+0x192>
                rc = FAILURE;
   2fe64:	2301      	movs	r3, #1
   2fe66:	425b      	negs	r3, r3
   2fe68:	637b      	str	r3, [r7, #52]	; 0x34
   2fe6a:	e008      	b.n	2fe7e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fe6c:	2301      	movs	r3, #1
   2fe6e:	425b      	negs	r3, r3
   2fe70:	637b      	str	r3, [r7, #52]	; 0x34
   2fe72:	e004      	b.n	2fe7e <MQTTPublish+0x192>
		goto exit;
   2fe74:	46c0      	nop			; (mov r8, r8)
   2fe76:	e002      	b.n	2fe7e <MQTTPublish+0x192>
        goto exit;
   2fe78:	46c0      	nop			; (mov r8, r8)
   2fe7a:	e000      	b.n	2fe7e <MQTTPublish+0x192>
        goto exit; // there was a problem
   2fe7c:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fe7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2fe80:	0018      	movs	r0, r3
   2fe82:	46bd      	mov	sp, r7
   2fe84:	b00f      	add	sp, #60	; 0x3c
   2fe86:	bc0c      	pop	{r2, r3}
   2fe88:	4690      	mov	r8, r2
   2fe8a:	4699      	mov	r9, r3
   2fe8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fe8e:	46c0      	nop			; (mov r8, r8)
   2fe90:	000300f5 	.word	0x000300f5
   2fe94:	0003007d 	.word	0x0003007d
   2fe98:	0002f23d 	.word	0x0002f23d
   2fe9c:	00031379 	.word	0x00031379
   2fea0:	0002f26d 	.word	0x0002f26d
   2fea4:	0002f9d5 	.word	0x0002f9d5
   2fea8:	00030df1 	.word	0x00030df1

0002feac <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2feac:	b580      	push	{r7, lr}
   2feae:	b088      	sub	sp, #32
   2feb0:	af00      	add	r7, sp, #0
   2feb2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2feb4:	2301      	movs	r3, #1
   2feb6:	425b      	negs	r3, r3
   2feb8:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2feba:	2300      	movs	r3, #0
   2febc:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2febe:	230c      	movs	r3, #12
   2fec0:	18fb      	adds	r3, r7, r3
   2fec2:	0018      	movs	r0, r3
   2fec4:	4b13      	ldr	r3, [pc, #76]	; (2ff14 <MQTTDisconnect+0x68>)
   2fec6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fec8:	687b      	ldr	r3, [r7, #4]
   2feca:	685a      	ldr	r2, [r3, #4]
   2fecc:	230c      	movs	r3, #12
   2fece:	18fb      	adds	r3, r7, r3
   2fed0:	0011      	movs	r1, r2
   2fed2:	0018      	movs	r0, r3
   2fed4:	4b10      	ldr	r3, [pc, #64]	; (2ff18 <MQTTDisconnect+0x6c>)
   2fed6:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2fed8:	687b      	ldr	r3, [r7, #4]
   2feda:	691a      	ldr	r2, [r3, #16]
   2fedc:	687b      	ldr	r3, [r7, #4]
   2fede:	689b      	ldr	r3, [r3, #8]
   2fee0:	0019      	movs	r1, r3
   2fee2:	0010      	movs	r0, r2
   2fee4:	4b0d      	ldr	r3, [pc, #52]	; (2ff1c <MQTTDisconnect+0x70>)
   2fee6:	4798      	blx	r3
   2fee8:	0003      	movs	r3, r0
   2feea:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2feec:	69bb      	ldr	r3, [r7, #24]
   2feee:	2b00      	cmp	r3, #0
   2fef0:	dd08      	ble.n	2ff04 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2fef2:	230c      	movs	r3, #12
   2fef4:	18fa      	adds	r2, r7, r3
   2fef6:	69b9      	ldr	r1, [r7, #24]
   2fef8:	687b      	ldr	r3, [r7, #4]
   2fefa:	0018      	movs	r0, r3
   2fefc:	4b08      	ldr	r3, [pc, #32]	; (2ff20 <MQTTDisconnect+0x74>)
   2fefe:	4798      	blx	r3
   2ff00:	0003      	movs	r3, r0
   2ff02:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2ff04:	687b      	ldr	r3, [r7, #4]
   2ff06:	2200      	movs	r2, #0
   2ff08:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ff0a:	69fb      	ldr	r3, [r7, #28]
}
   2ff0c:	0018      	movs	r0, r3
   2ff0e:	46bd      	mov	sp, r7
   2ff10:	b008      	add	sp, #32
   2ff12:	bd80      	pop	{r7, pc}
   2ff14:	000300f5 	.word	0x000300f5
   2ff18:	0003007d 	.word	0x0003007d
   2ff1c:	00030ca5 	.word	0x00030ca5
   2ff20:	0002f26d 	.word	0x0002f26d

0002ff24 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2ff24:	b580      	push	{r7, lr}
   2ff26:	b084      	sub	sp, #16
   2ff28:	af00      	add	r7, sp, #0
   2ff2a:	0002      	movs	r2, r0
   2ff2c:	1dfb      	adds	r3, r7, #7
   2ff2e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ff30:	2300      	movs	r3, #0
   2ff32:	60fb      	str	r3, [r7, #12]
   2ff34:	e01c      	b.n	2ff70 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2ff36:	4a12      	ldr	r2, [pc, #72]	; (2ff80 <isMQTTSocket+0x5c>)
   2ff38:	68fb      	ldr	r3, [r7, #12]
   2ff3a:	2164      	movs	r1, #100	; 0x64
   2ff3c:	434b      	muls	r3, r1
   2ff3e:	18d3      	adds	r3, r2, r3
   2ff40:	3360      	adds	r3, #96	; 0x60
   2ff42:	681b      	ldr	r3, [r3, #0]
   2ff44:	2b00      	cmp	r3, #0
   2ff46:	d010      	beq.n	2ff6a <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2ff48:	4a0d      	ldr	r2, [pc, #52]	; (2ff80 <isMQTTSocket+0x5c>)
   2ff4a:	68fb      	ldr	r3, [r7, #12]
   2ff4c:	2164      	movs	r1, #100	; 0x64
   2ff4e:	434b      	muls	r3, r1
   2ff50:	18d3      	adds	r3, r2, r3
   2ff52:	3360      	adds	r3, #96	; 0x60
   2ff54:	681b      	ldr	r3, [r3, #0]
   2ff56:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2ff58:	68bb      	ldr	r3, [r7, #8]
   2ff5a:	6a1a      	ldr	r2, [r3, #32]
   2ff5c:	1dfb      	adds	r3, r7, #7
   2ff5e:	781b      	ldrb	r3, [r3, #0]
   2ff60:	b25b      	sxtb	r3, r3
   2ff62:	429a      	cmp	r2, r3
   2ff64:	d101      	bne.n	2ff6a <isMQTTSocket+0x46>
				return true;
   2ff66:	2301      	movs	r3, #1
   2ff68:	e006      	b.n	2ff78 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ff6a:	68fb      	ldr	r3, [r7, #12]
   2ff6c:	3301      	adds	r3, #1
   2ff6e:	60fb      	str	r3, [r7, #12]
   2ff70:	68fb      	ldr	r3, [r7, #12]
   2ff72:	2b06      	cmp	r3, #6
   2ff74:	d9df      	bls.n	2ff36 <isMQTTSocket+0x12>
		}
	}
	return false;
   2ff76:	2300      	movs	r3, #0
}
   2ff78:	0018      	movs	r0, r3
   2ff7a:	46bd      	mov	sp, r7
   2ff7c:	b004      	add	sp, #16
   2ff7e:	bd80      	pop	{r7, pc}
   2ff80:	20004434 	.word	0x20004434

0002ff84 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2ff84:	b580      	push	{r7, lr}
   2ff86:	b082      	sub	sp, #8
   2ff88:	af00      	add	r7, sp, #0
   2ff8a:	6078      	str	r0, [r7, #4]
   2ff8c:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2ff8e:	4b0d      	ldr	r3, [pc, #52]	; (2ffc4 <dnsResolveCallback+0x40>)
   2ff90:	781b      	ldrb	r3, [r3, #0]
   2ff92:	2201      	movs	r2, #1
   2ff94:	4053      	eors	r3, r2
   2ff96:	b2db      	uxtb	r3, r3
   2ff98:	2b00      	cmp	r3, #0
   2ff9a:	d00e      	beq.n	2ffba <dnsResolveCallback+0x36>
   2ff9c:	4b0a      	ldr	r3, [pc, #40]	; (2ffc8 <dnsResolveCallback+0x44>)
   2ff9e:	681b      	ldr	r3, [r3, #0]
   2ffa0:	687a      	ldr	r2, [r7, #4]
   2ffa2:	0011      	movs	r1, r2
   2ffa4:	0018      	movs	r0, r3
   2ffa6:	4b09      	ldr	r3, [pc, #36]	; (2ffcc <dnsResolveCallback+0x48>)
   2ffa8:	4798      	blx	r3
   2ffaa:	1e03      	subs	r3, r0, #0
   2ffac:	d105      	bne.n	2ffba <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ffae:	683a      	ldr	r2, [r7, #0]
   2ffb0:	4b07      	ldr	r3, [pc, #28]	; (2ffd0 <dnsResolveCallback+0x4c>)
   2ffb2:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ffb4:	4b03      	ldr	r3, [pc, #12]	; (2ffc4 <dnsResolveCallback+0x40>)
   2ffb6:	2201      	movs	r2, #1
   2ffb8:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ffba:	46c0      	nop			; (mov r8, r8)
   2ffbc:	46bd      	mov	sp, r7
   2ffbe:	b002      	add	sp, #8
   2ffc0:	bd80      	pop	{r7, pc}
   2ffc2:	46c0      	nop			; (mov r8, r8)
   2ffc4:	20004324 	.word	0x20004324
   2ffc8:	20004430 	.word	0x20004430
   2ffcc:	00035ad7 	.word	0x00035ad7
   2ffd0:	2000431c 	.word	0x2000431c

0002ffd4 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ffd4:	b580      	push	{r7, lr}
   2ffd6:	b084      	sub	sp, #16
   2ffd8:	af00      	add	r7, sp, #0
   2ffda:	603a      	str	r2, [r7, #0]
   2ffdc:	1dfb      	adds	r3, r7, #7
   2ffde:	1c02      	adds	r2, r0, #0
   2ffe0:	701a      	strb	r2, [r3, #0]
   2ffe2:	1dbb      	adds	r3, r7, #6
   2ffe4:	1c0a      	adds	r2, r1, #0
   2ffe6:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ffe8:	1dfb      	adds	r3, r7, #7
   2ffea:	781b      	ldrb	r3, [r3, #0]
   2ffec:	b25b      	sxtb	r3, r3
   2ffee:	0018      	movs	r0, r3
   2fff0:	4b12      	ldr	r3, [pc, #72]	; (3003c <tcpClientSocketEventHandler+0x68>)
   2fff2:	4798      	blx	r3
   2fff4:	1e03      	subs	r3, r0, #0
   2fff6:	d01c      	beq.n	30032 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2fff8:	1dbb      	adds	r3, r7, #6
   2fffa:	781b      	ldrb	r3, [r3, #0]
   2fffc:	2b06      	cmp	r3, #6
   2fffe:	d00c      	beq.n	3001a <tcpClientSocketEventHandler+0x46>
   30000:	2b07      	cmp	r3, #7
   30002:	d006      	beq.n	30012 <tcpClientSocketEventHandler+0x3e>
   30004:	2b05      	cmp	r3, #5
   30006:	d000      	beq.n	3000a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   30008:	e013      	b.n	30032 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   3000a:	4b0d      	ldr	r3, [pc, #52]	; (30040 <tcpClientSocketEventHandler+0x6c>)
   3000c:	2201      	movs	r2, #1
   3000e:	701a      	strb	r2, [r3, #0]
			break;
   30010:	e00f      	b.n	30032 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   30012:	4b0c      	ldr	r3, [pc, #48]	; (30044 <tcpClientSocketEventHandler+0x70>)
   30014:	2201      	movs	r2, #1
   30016:	701a      	strb	r2, [r3, #0]
			break;
   30018:	e00b      	b.n	30032 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   3001a:	683b      	ldr	r3, [r7, #0]
   3001c:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   3001e:	68fb      	ldr	r3, [r7, #12]
   30020:	2204      	movs	r2, #4
   30022:	5e9b      	ldrsh	r3, [r3, r2]
   30024:	001a      	movs	r2, r3
   30026:	4b08      	ldr	r3, [pc, #32]	; (30048 <tcpClientSocketEventHandler+0x74>)
   30028:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   3002a:	4b08      	ldr	r3, [pc, #32]	; (3004c <tcpClientSocketEventHandler+0x78>)
   3002c:	2201      	movs	r2, #1
   3002e:	701a      	strb	r2, [r3, #0]
			break;
   30030:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   30032:	46c0      	nop			; (mov r8, r8)
   30034:	46bd      	mov	sp, r7
   30036:	b004      	add	sp, #16
   30038:	bd80      	pop	{r7, pc}
   3003a:	46c0      	nop			; (mov r8, r8)
   3003c:	0002ff25 	.word	0x0002ff25
   30040:	20004325 	.word	0x20004325
   30044:	20004326 	.word	0x20004326
   30048:	20004320 	.word	0x20004320
   3004c:	20004327 	.word	0x20004327

00030050 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   30050:	b580      	push	{r7, lr}
   30052:	b082      	sub	sp, #8
   30054:	af00      	add	r7, sp, #0
   30056:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   30058:	687b      	ldr	r3, [r7, #4]
   3005a:	3304      	adds	r3, #4
   3005c:	687a      	ldr	r2, [r7, #4]
   3005e:	0011      	movs	r1, r2
   30060:	0018      	movs	r0, r3
   30062:	4b05      	ldr	r3, [pc, #20]	; (30078 <TimerIsExpired+0x28>)
   30064:	4798      	blx	r3
   30066:	0003      	movs	r3, r0
   30068:	3b01      	subs	r3, #1
   3006a:	425a      	negs	r2, r3
   3006c:	4153      	adcs	r3, r2
   3006e:	b2db      	uxtb	r3, r3
}
   30070:	0018      	movs	r0, r3
   30072:	46bd      	mov	sp, r7
   30074:	b002      	add	sp, #8
   30076:	bd80      	pop	{r7, pc}
   30078:	0001d9c1 	.word	0x0001d9c1

0003007c <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   3007c:	b580      	push	{r7, lr}
   3007e:	b082      	sub	sp, #8
   30080:	af00      	add	r7, sp, #0
   30082:	6078      	str	r0, [r7, #4]
   30084:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   30086:	687b      	ldr	r3, [r7, #4]
   30088:	683a      	ldr	r2, [r7, #0]
   3008a:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   3008c:	687b      	ldr	r3, [r7, #4]
   3008e:	3304      	adds	r3, #4
   30090:	0018      	movs	r0, r3
   30092:	4b03      	ldr	r3, [pc, #12]	; (300a0 <TimerCountdownMS+0x24>)
   30094:	4798      	blx	r3
}
   30096:	46c0      	nop			; (mov r8, r8)
   30098:	46bd      	mov	sp, r7
   3009a:	b002      	add	sp, #8
   3009c:	bd80      	pop	{r7, pc}
   3009e:	46c0      	nop			; (mov r8, r8)
   300a0:	0001d955 	.word	0x0001d955

000300a4 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   300a4:	b580      	push	{r7, lr}
   300a6:	b082      	sub	sp, #8
   300a8:	af00      	add	r7, sp, #0
   300aa:	6078      	str	r0, [r7, #4]
   300ac:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   300ae:	683b      	ldr	r3, [r7, #0]
   300b0:	22fa      	movs	r2, #250	; 0xfa
   300b2:	0092      	lsls	r2, r2, #2
   300b4:	435a      	muls	r2, r3
   300b6:	687b      	ldr	r3, [r7, #4]
   300b8:	0011      	movs	r1, r2
   300ba:	0018      	movs	r0, r3
   300bc:	4b02      	ldr	r3, [pc, #8]	; (300c8 <TimerCountdown+0x24>)
   300be:	4798      	blx	r3
}
   300c0:	46c0      	nop			; (mov r8, r8)
   300c2:	46bd      	mov	sp, r7
   300c4:	b002      	add	sp, #8
   300c6:	bd80      	pop	{r7, pc}
   300c8:	0003007d 	.word	0x0003007d

000300cc <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   300cc:	b580      	push	{r7, lr}
   300ce:	b082      	sub	sp, #8
   300d0:	af00      	add	r7, sp, #0
   300d2:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   300d4:	687b      	ldr	r3, [r7, #4]
   300d6:	3304      	adds	r3, #4
   300d8:	687a      	ldr	r2, [r7, #4]
   300da:	0011      	movs	r1, r2
   300dc:	0018      	movs	r0, r3
   300de:	4b04      	ldr	r3, [pc, #16]	; (300f0 <TimerLeftMS+0x24>)
   300e0:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   300e2:	687b      	ldr	r3, [r7, #4]
   300e4:	681b      	ldr	r3, [r3, #0]
}
   300e6:	0018      	movs	r0, r3
   300e8:	46bd      	mov	sp, r7
   300ea:	b002      	add	sp, #8
   300ec:	bd80      	pop	{r7, pc}
   300ee:	46c0      	nop			; (mov r8, r8)
   300f0:	0001d9c1 	.word	0x0001d9c1

000300f4 <TimerInit>:


void TimerInit(Timer* timer) {
   300f4:	b580      	push	{r7, lr}
   300f6:	b082      	sub	sp, #8
   300f8:	af00      	add	r7, sp, #0
   300fa:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   300fc:	687b      	ldr	r3, [r7, #4]
   300fe:	2200      	movs	r2, #0
   30100:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   30102:	687b      	ldr	r3, [r7, #4]
   30104:	3304      	adds	r3, #4
   30106:	2208      	movs	r2, #8
   30108:	2100      	movs	r1, #0
   3010a:	0018      	movs	r0, r3
   3010c:	4b02      	ldr	r3, [pc, #8]	; (30118 <TimerInit+0x24>)
   3010e:	4798      	blx	r3
}
   30110:	46c0      	nop			; (mov r8, r8)
   30112:	46bd      	mov	sp, r7
   30114:	b002      	add	sp, #8
   30116:	bd80      	pop	{r7, pc}
   30118:	0003577f 	.word	0x0003577f

0003011c <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   3011c:	b590      	push	{r4, r7, lr}
   3011e:	b085      	sub	sp, #20
   30120:	af00      	add	r7, sp, #0
   30122:	60f8      	str	r0, [r7, #12]
   30124:	60b9      	str	r1, [r7, #8]
   30126:	607a      	str	r2, [r7, #4]
   30128:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   3012a:	683b      	ldr	r3, [r7, #0]
   3012c:	2b00      	cmp	r3, #0
   3012e:	d101      	bne.n	30134 <WINC1500_read+0x18>
   30130:	230a      	movs	r3, #10
   30132:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   30134:	4b2c      	ldr	r3, [pc, #176]	; (301e8 <WINC1500_read+0xcc>)
   30136:	681b      	ldr	r3, [r3, #0]
   30138:	2b00      	cmp	r3, #0
   3013a:	d131      	bne.n	301a0 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   3013c:	4b2b      	ldr	r3, [pc, #172]	; (301ec <WINC1500_read+0xd0>)
   3013e:	2200      	movs	r2, #0
   30140:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   30142:	68fb      	ldr	r3, [r7, #12]
   30144:	681b      	ldr	r3, [r3, #0]
   30146:	b258      	sxtb	r0, r3
   30148:	683c      	ldr	r4, [r7, #0]
   3014a:	2380      	movs	r3, #128	; 0x80
   3014c:	005a      	lsls	r2, r3, #1
   3014e:	4928      	ldr	r1, [pc, #160]	; (301f0 <WINC1500_read+0xd4>)
   30150:	0023      	movs	r3, r4
   30152:	4c28      	ldr	r4, [pc, #160]	; (301f4 <WINC1500_read+0xd8>)
   30154:	47a0      	blx	r4
   30156:	1e03      	subs	r3, r0, #0
   30158:	d005      	beq.n	30166 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   3015a:	2301      	movs	r3, #1
   3015c:	425b      	negs	r3, r3
   3015e:	e03e      	b.n	301de <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   30160:	2000      	movs	r0, #0
   30162:	4b25      	ldr	r3, [pc, #148]	; (301f8 <WINC1500_read+0xdc>)
   30164:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   30166:	4b21      	ldr	r3, [pc, #132]	; (301ec <WINC1500_read+0xd0>)
   30168:	781b      	ldrb	r3, [r3, #0]
   3016a:	2201      	movs	r2, #1
   3016c:	4053      	eors	r3, r2
   3016e:	b2db      	uxtb	r3, r3
   30170:	2b00      	cmp	r3, #0
   30172:	d1f5      	bne.n	30160 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   30174:	4b21      	ldr	r3, [pc, #132]	; (301fc <WINC1500_read+0xe0>)
   30176:	681b      	ldr	r3, [r3, #0]
   30178:	2b00      	cmp	r3, #0
   3017a:	dd08      	ble.n	3018e <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   3017c:	4b1f      	ldr	r3, [pc, #124]	; (301fc <WINC1500_read+0xe0>)
   3017e:	681b      	ldr	r3, [r3, #0]
   30180:	001a      	movs	r2, r3
   30182:	4b19      	ldr	r3, [pc, #100]	; (301e8 <WINC1500_read+0xcc>)
   30184:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   30186:	4b1e      	ldr	r3, [pc, #120]	; (30200 <WINC1500_read+0xe4>)
   30188:	2200      	movs	r2, #0
   3018a:	601a      	str	r2, [r3, #0]
   3018c:	e008      	b.n	301a0 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   3018e:	4b16      	ldr	r3, [pc, #88]	; (301e8 <WINC1500_read+0xcc>)
   30190:	2200      	movs	r2, #0
   30192:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   30194:	4b1a      	ldr	r3, [pc, #104]	; (30200 <WINC1500_read+0xe4>)
   30196:	2200      	movs	r2, #0
   30198:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   3019a:	4b18      	ldr	r3, [pc, #96]	; (301fc <WINC1500_read+0xe0>)
   3019c:	681b      	ldr	r3, [r3, #0]
   3019e:	e01e      	b.n	301de <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   301a0:	4b11      	ldr	r3, [pc, #68]	; (301e8 <WINC1500_read+0xcc>)
   301a2:	681b      	ldr	r3, [r3, #0]
   301a4:	001a      	movs	r2, r3
   301a6:	687b      	ldr	r3, [r7, #4]
   301a8:	4293      	cmp	r3, r2
   301aa:	dd02      	ble.n	301b2 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   301ac:	2301      	movs	r3, #1
   301ae:	425b      	negs	r3, r3
   301b0:	e015      	b.n	301de <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   301b2:	4b13      	ldr	r3, [pc, #76]	; (30200 <WINC1500_read+0xe4>)
   301b4:	681a      	ldr	r2, [r3, #0]
   301b6:	4b0e      	ldr	r3, [pc, #56]	; (301f0 <WINC1500_read+0xd4>)
   301b8:	18d1      	adds	r1, r2, r3
   301ba:	687a      	ldr	r2, [r7, #4]
   301bc:	68bb      	ldr	r3, [r7, #8]
   301be:	0018      	movs	r0, r3
   301c0:	4b10      	ldr	r3, [pc, #64]	; (30204 <WINC1500_read+0xe8>)
   301c2:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   301c4:	4b08      	ldr	r3, [pc, #32]	; (301e8 <WINC1500_read+0xcc>)
   301c6:	681a      	ldr	r2, [r3, #0]
   301c8:	687b      	ldr	r3, [r7, #4]
   301ca:	1ad2      	subs	r2, r2, r3
   301cc:	4b06      	ldr	r3, [pc, #24]	; (301e8 <WINC1500_read+0xcc>)
   301ce:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   301d0:	4b0b      	ldr	r3, [pc, #44]	; (30200 <WINC1500_read+0xe4>)
   301d2:	681a      	ldr	r2, [r3, #0]
   301d4:	687b      	ldr	r3, [r7, #4]
   301d6:	18d2      	adds	r2, r2, r3
   301d8:	4b09      	ldr	r3, [pc, #36]	; (30200 <WINC1500_read+0xe4>)
   301da:	601a      	str	r2, [r3, #0]
  
  return len;
   301dc:	687b      	ldr	r3, [r7, #4]
}
   301de:	0018      	movs	r0, r3
   301e0:	46bd      	mov	sp, r7
   301e2:	b005      	add	sp, #20
   301e4:	bd90      	pop	{r4, r7, pc}
   301e6:	46c0      	nop			; (mov r8, r8)
   301e8:	2000442c 	.word	0x2000442c
   301ec:	20004327 	.word	0x20004327
   301f0:	20004328 	.word	0x20004328
   301f4:	000267d1 	.word	0x000267d1
   301f8:	00022d19 	.word	0x00022d19
   301fc:	20004320 	.word	0x20004320
   30200:	20004428 	.word	0x20004428
   30204:	00035749 	.word	0x00035749

00030208 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   30208:	b590      	push	{r4, r7, lr}
   3020a:	b085      	sub	sp, #20
   3020c:	af00      	add	r7, sp, #0
   3020e:	60f8      	str	r0, [r7, #12]
   30210:	60b9      	str	r1, [r7, #8]
   30212:	607a      	str	r2, [r7, #4]
   30214:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   30216:	4b10      	ldr	r3, [pc, #64]	; (30258 <WINC1500_write+0x50>)
   30218:	2200      	movs	r2, #0
   3021a:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   3021c:	68fb      	ldr	r3, [r7, #12]
   3021e:	681b      	ldr	r3, [r3, #0]
   30220:	b258      	sxtb	r0, r3
   30222:	687b      	ldr	r3, [r7, #4]
   30224:	b29a      	uxth	r2, r3
   30226:	68b9      	ldr	r1, [r7, #8]
   30228:	2300      	movs	r3, #0
   3022a:	4c0c      	ldr	r4, [pc, #48]	; (3025c <WINC1500_write+0x54>)
   3022c:	47a0      	blx	r4
   3022e:	1e03      	subs	r3, r0, #0
   30230:	d005      	beq.n	3023e <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   30232:	2301      	movs	r3, #1
   30234:	425b      	negs	r3, r3
   30236:	e00a      	b.n	3024e <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   30238:	2000      	movs	r0, #0
   3023a:	4b09      	ldr	r3, [pc, #36]	; (30260 <WINC1500_write+0x58>)
   3023c:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   3023e:	4b06      	ldr	r3, [pc, #24]	; (30258 <WINC1500_write+0x50>)
   30240:	781b      	ldrb	r3, [r3, #0]
   30242:	2201      	movs	r2, #1
   30244:	4053      	eors	r3, r2
   30246:	b2db      	uxtb	r3, r3
   30248:	2b00      	cmp	r3, #0
   3024a:	d1f5      	bne.n	30238 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   3024c:	687b      	ldr	r3, [r7, #4]
}
   3024e:	0018      	movs	r0, r3
   30250:	46bd      	mov	sp, r7
   30252:	b005      	add	sp, #20
   30254:	bd90      	pop	{r4, r7, pc}
   30256:	46c0      	nop			; (mov r8, r8)
   30258:	20004326 	.word	0x20004326
   3025c:	0002666d 	.word	0x0002666d
   30260:	00022d19 	.word	0x00022d19

00030264 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   30264:	b580      	push	{r7, lr}
   30266:	b082      	sub	sp, #8
   30268:	af00      	add	r7, sp, #0
   3026a:	6078      	str	r0, [r7, #4]
	close(n->socket);
   3026c:	687b      	ldr	r3, [r7, #4]
   3026e:	681b      	ldr	r3, [r3, #0]
   30270:	b25b      	sxtb	r3, r3
   30272:	0018      	movs	r0, r3
   30274:	4b06      	ldr	r3, [pc, #24]	; (30290 <WINC1500_disconnect+0x2c>)
   30276:	4798      	blx	r3
	n->socket=-1;
   30278:	687b      	ldr	r3, [r7, #4]
   3027a:	2201      	movs	r2, #1
   3027c:	4252      	negs	r2, r2
   3027e:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   30280:	4b04      	ldr	r3, [pc, #16]	; (30294 <WINC1500_disconnect+0x30>)
   30282:	2200      	movs	r2, #0
   30284:	701a      	strb	r2, [r3, #0]
}
   30286:	46c0      	nop			; (mov r8, r8)
   30288:	46bd      	mov	sp, r7
   3028a:	b002      	add	sp, #8
   3028c:	bd80      	pop	{r7, pc}
   3028e:	46c0      	nop			; (mov r8, r8)
   30290:	00026951 	.word	0x00026951
   30294:	20004325 	.word	0x20004325

00030298 <NetworkInit>:


void NetworkInit(Network* n) {
   30298:	b580      	push	{r7, lr}
   3029a:	b082      	sub	sp, #8
   3029c:	af00      	add	r7, sp, #0
   3029e:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   302a0:	687b      	ldr	r3, [r7, #4]
   302a2:	2201      	movs	r2, #1
   302a4:	4252      	negs	r2, r2
   302a6:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   302a8:	687b      	ldr	r3, [r7, #4]
   302aa:	4a06      	ldr	r2, [pc, #24]	; (302c4 <NetworkInit+0x2c>)
   302ac:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   302ae:	687b      	ldr	r3, [r7, #4]
   302b0:	4a05      	ldr	r2, [pc, #20]	; (302c8 <NetworkInit+0x30>)
   302b2:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   302b4:	687b      	ldr	r3, [r7, #4]
   302b6:	4a05      	ldr	r2, [pc, #20]	; (302cc <NetworkInit+0x34>)
   302b8:	611a      	str	r2, [r3, #16]
}
   302ba:	46c0      	nop			; (mov r8, r8)
   302bc:	46bd      	mov	sp, r7
   302be:	b002      	add	sp, #8
   302c0:	bd80      	pop	{r7, pc}
   302c2:	46c0      	nop			; (mov r8, r8)
   302c4:	0003011d 	.word	0x0003011d
   302c8:	00030209 	.word	0x00030209
   302cc:	00030265 	.word	0x00030265

000302d0 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   302d0:	b580      	push	{r7, lr}
   302d2:	b088      	sub	sp, #32
   302d4:	af00      	add	r7, sp, #0
   302d6:	60f8      	str	r0, [r7, #12]
   302d8:	60b9      	str	r1, [r7, #8]
   302da:	607a      	str	r2, [r7, #4]
   302dc:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   302de:	4b37      	ldr	r3, [pc, #220]	; (303bc <ConnectNetwork+0xec>)
   302e0:	2200      	movs	r2, #0
   302e2:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   302e4:	4b36      	ldr	r3, [pc, #216]	; (303c0 <ConnectNetwork+0xf0>)
   302e6:	68ba      	ldr	r2, [r7, #8]
   302e8:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   302ea:	68bb      	ldr	r3, [r7, #8]
   302ec:	0018      	movs	r0, r3
   302ee:	4b35      	ldr	r3, [pc, #212]	; (303c4 <ConnectNetwork+0xf4>)
   302f0:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   302f2:	e002      	b.n	302fa <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   302f4:	2000      	movs	r0, #0
   302f6:	4b34      	ldr	r3, [pc, #208]	; (303c8 <ConnectNetwork+0xf8>)
   302f8:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   302fa:	4b30      	ldr	r3, [pc, #192]	; (303bc <ConnectNetwork+0xec>)
   302fc:	781b      	ldrb	r3, [r3, #0]
   302fe:	2201      	movs	r2, #1
   30300:	4053      	eors	r3, r2
   30302:	b2db      	uxtb	r3, r3
   30304:	2b00      	cmp	r3, #0
   30306:	d1f5      	bne.n	302f4 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   30308:	4b30      	ldr	r3, [pc, #192]	; (303cc <ConnectNetwork+0xfc>)
   3030a:	681a      	ldr	r2, [r3, #0]
   3030c:	68fb      	ldr	r3, [r7, #12]
   3030e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   30310:	2310      	movs	r3, #16
   30312:	18fb      	adds	r3, r7, r3
   30314:	2202      	movs	r2, #2
   30316:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   30318:	687b      	ldr	r3, [r7, #4]
   3031a:	b29b      	uxth	r3, r3
   3031c:	021b      	lsls	r3, r3, #8
   3031e:	b21a      	sxth	r2, r3
   30320:	687b      	ldr	r3, [r7, #4]
   30322:	b29b      	uxth	r3, r3
   30324:	0a1b      	lsrs	r3, r3, #8
   30326:	b29b      	uxth	r3, r3
   30328:	b21b      	sxth	r3, r3
   3032a:	4313      	orrs	r3, r2
   3032c:	b21b      	sxth	r3, r3
   3032e:	b29a      	uxth	r2, r3
   30330:	2310      	movs	r3, #16
   30332:	18fb      	adds	r3, r7, r3
   30334:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   30336:	4b25      	ldr	r3, [pc, #148]	; (303cc <ConnectNetwork+0xfc>)
   30338:	681b      	ldr	r3, [r3, #0]
   3033a:	001a      	movs	r2, r3
   3033c:	2310      	movs	r3, #16
   3033e:	18fb      	adds	r3, r7, r3
   30340:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   30342:	68fb      	ldr	r3, [r7, #12]
   30344:	681b      	ldr	r3, [r3, #0]
   30346:	2b00      	cmp	r3, #0
   30348:	da0a      	bge.n	30360 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   3034a:	683b      	ldr	r3, [r7, #0]
   3034c:	b2db      	uxtb	r3, r3
   3034e:	001a      	movs	r2, r3
   30350:	2101      	movs	r1, #1
   30352:	2002      	movs	r0, #2
   30354:	4b1e      	ldr	r3, [pc, #120]	; (303d0 <ConnectNetwork+0x100>)
   30356:	4798      	blx	r3
   30358:	0003      	movs	r3, r0
   3035a:	001a      	movs	r2, r3
   3035c:	68fb      	ldr	r3, [r7, #12]
   3035e:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   30360:	68fb      	ldr	r3, [r7, #12]
   30362:	681b      	ldr	r3, [r3, #0]
   30364:	3301      	adds	r3, #1
   30366:	d108      	bne.n	3037a <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   30368:	68fb      	ldr	r3, [r7, #12]
   3036a:	681b      	ldr	r3, [r3, #0]
   3036c:	b25b      	sxtb	r3, r3
   3036e:	0018      	movs	r0, r3
   30370:	4b18      	ldr	r3, [pc, #96]	; (303d4 <ConnectNetwork+0x104>)
   30372:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   30374:	2309      	movs	r3, #9
   30376:	425b      	negs	r3, r3
   30378:	e01c      	b.n	303b4 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   3037a:	68fb      	ldr	r3, [r7, #12]
   3037c:	681b      	ldr	r3, [r3, #0]
   3037e:	b25b      	sxtb	r3, r3
   30380:	2210      	movs	r2, #16
   30382:	18b9      	adds	r1, r7, r2
   30384:	2210      	movs	r2, #16
   30386:	0018      	movs	r0, r3
   30388:	4b13      	ldr	r3, [pc, #76]	; (303d8 <ConnectNetwork+0x108>)
   3038a:	4798      	blx	r3
   3038c:	1e03      	subs	r3, r0, #0
   3038e:	d002      	beq.n	30396 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   30390:	2309      	movs	r3, #9
   30392:	425b      	negs	r3, r3
   30394:	e00e      	b.n	303b4 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   30396:	4b11      	ldr	r3, [pc, #68]	; (303dc <ConnectNetwork+0x10c>)
   30398:	2200      	movs	r2, #0
   3039a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   3039c:	e002      	b.n	303a4 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   3039e:	2000      	movs	r0, #0
   303a0:	4b09      	ldr	r3, [pc, #36]	; (303c8 <ConnectNetwork+0xf8>)
   303a2:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   303a4:	4b0d      	ldr	r3, [pc, #52]	; (303dc <ConnectNetwork+0x10c>)
   303a6:	781b      	ldrb	r3, [r3, #0]
   303a8:	2201      	movs	r2, #1
   303aa:	4053      	eors	r3, r2
   303ac:	b2db      	uxtb	r3, r3
   303ae:	2b00      	cmp	r3, #0
   303b0:	d1f5      	bne.n	3039e <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   303b2:	2300      	movs	r3, #0
   303b4:	0018      	movs	r0, r3
   303b6:	46bd      	mov	sp, r7
   303b8:	b008      	add	sp, #32
   303ba:	bd80      	pop	{r7, pc}
   303bc:	20004324 	.word	0x20004324
   303c0:	20004430 	.word	0x20004430
   303c4:	00026b99 	.word	0x00026b99
   303c8:	00022d19 	.word	0x00022d19
   303cc:	2000431c 	.word	0x2000431c
   303d0:	00026345 	.word	0x00026345
   303d4:	00026951 	.word	0x00026951
   303d8:	00026559 	.word	0x00026559
   303dc:	20004325 	.word	0x20004325

000303e0 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   303e0:	b580      	push	{r7, lr}
   303e2:	b084      	sub	sp, #16
   303e4:	af00      	add	r7, sp, #0
   303e6:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   303e8:	687b      	ldr	r3, [r7, #4]
   303ea:	2b00      	cmp	r3, #0
   303ec:	d022      	beq.n	30434 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   303ee:	2300      	movs	r3, #0
   303f0:	60fb      	str	r3, [r7, #12]
   303f2:	e01b      	b.n	3042c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   303f4:	4a11      	ldr	r2, [pc, #68]	; (3043c <allocateClient+0x5c>)
   303f6:	68fb      	ldr	r3, [r7, #12]
   303f8:	2164      	movs	r1, #100	; 0x64
   303fa:	434b      	muls	r3, r1
   303fc:	18d3      	adds	r3, r2, r3
   303fe:	3360      	adds	r3, #96	; 0x60
   30400:	681b      	ldr	r3, [r3, #0]
   30402:	2b00      	cmp	r3, #0
   30404:	d10f      	bne.n	30426 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   30406:	4a0d      	ldr	r2, [pc, #52]	; (3043c <allocateClient+0x5c>)
   30408:	68fb      	ldr	r3, [r7, #12]
   3040a:	2164      	movs	r1, #100	; 0x64
   3040c:	434b      	muls	r3, r1
   3040e:	18d3      	adds	r3, r2, r3
   30410:	3360      	adds	r3, #96	; 0x60
   30412:	687a      	ldr	r2, [r7, #4]
   30414:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   30416:	68fb      	ldr	r3, [r7, #12]
   30418:	2264      	movs	r2, #100	; 0x64
   3041a:	435a      	muls	r2, r3
   3041c:	4b07      	ldr	r3, [pc, #28]	; (3043c <allocateClient+0x5c>)
   3041e:	18d2      	adds	r2, r2, r3
   30420:	687b      	ldr	r3, [r7, #4]
   30422:	61da      	str	r2, [r3, #28]
			return;
   30424:	e007      	b.n	30436 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30426:	68fb      	ldr	r3, [r7, #12]
   30428:	3301      	adds	r3, #1
   3042a:	60fb      	str	r3, [r7, #12]
   3042c:	68fb      	ldr	r3, [r7, #12]
   3042e:	2b06      	cmp	r3, #6
   30430:	d9e0      	bls.n	303f4 <allocateClient+0x14>
   30432:	e000      	b.n	30436 <allocateClient+0x56>
		return;
   30434:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   30436:	46bd      	mov	sp, r7
   30438:	b004      	add	sp, #16
   3043a:	bd80      	pop	{r7, pc}
   3043c:	20004434 	.word	0x20004434

00030440 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   30440:	b5f0      	push	{r4, r5, r6, r7, lr}
   30442:	b089      	sub	sp, #36	; 0x24
   30444:	af04      	add	r7, sp, #16
   30446:	6078      	str	r0, [r7, #4]
   30448:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   3044a:	687b      	ldr	r3, [r7, #4]
   3044c:	2b00      	cmp	r3, #0
   3044e:	d00a      	beq.n	30466 <mqtt_init+0x26>
   30450:	683b      	ldr	r3, [r7, #0]
   30452:	2b00      	cmp	r3, #0
   30454:	d007      	beq.n	30466 <mqtt_init+0x26>
   30456:	683b      	ldr	r3, [r7, #0]
   30458:	691b      	ldr	r3, [r3, #16]
   3045a:	2b00      	cmp	r3, #0
   3045c:	d003      	beq.n	30466 <mqtt_init+0x26>
   3045e:	683b      	ldr	r3, [r7, #0]
   30460:	689b      	ldr	r3, [r3, #8]
   30462:	2b00      	cmp	r3, #0
   30464:	d102      	bne.n	3046c <mqtt_init+0x2c>
		return FAILURE;
   30466:	2301      	movs	r3, #1
   30468:	425b      	negs	r3, r3
   3046a:	e034      	b.n	304d6 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   3046c:	683b      	ldr	r3, [r7, #0]
   3046e:	889b      	ldrh	r3, [r3, #4]
   30470:	001a      	movs	r2, r3
   30472:	23fa      	movs	r3, #250	; 0xfa
   30474:	009b      	lsls	r3, r3, #2
   30476:	4353      	muls	r3, r2
   30478:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   3047a:	687b      	ldr	r3, [r7, #4]
   3047c:	3320      	adds	r3, #32
   3047e:	0018      	movs	r0, r3
   30480:	4b17      	ldr	r3, [pc, #92]	; (304e0 <mqtt_init+0xa0>)
   30482:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   30484:	687b      	ldr	r3, [r7, #4]
   30486:	3304      	adds	r3, #4
   30488:	6839      	ldr	r1, [r7, #0]
   3048a:	2218      	movs	r2, #24
   3048c:	0018      	movs	r0, r3
   3048e:	4b15      	ldr	r3, [pc, #84]	; (304e4 <mqtt_init+0xa4>)
   30490:	4798      	blx	r3
	allocateClient(module);
   30492:	687b      	ldr	r3, [r7, #4]
   30494:	0018      	movs	r0, r3
   30496:	4b14      	ldr	r3, [pc, #80]	; (304e8 <mqtt_init+0xa8>)
   30498:	4798      	blx	r3
	
	if(module->client)
   3049a:	687b      	ldr	r3, [r7, #4]
   3049c:	69db      	ldr	r3, [r3, #28]
   3049e:	2b00      	cmp	r3, #0
   304a0:	d017      	beq.n	304d2 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   304a2:	687b      	ldr	r3, [r7, #4]
   304a4:	69d8      	ldr	r0, [r3, #28]
   304a6:	687b      	ldr	r3, [r7, #4]
   304a8:	3320      	adds	r3, #32
   304aa:	001c      	movs	r4, r3
   304ac:	683b      	ldr	r3, [r7, #0]
   304ae:	691e      	ldr	r6, [r3, #16]
   304b0:	683b      	ldr	r3, [r7, #0]
   304b2:	695a      	ldr	r2, [r3, #20]
   304b4:	683b      	ldr	r3, [r7, #0]
   304b6:	6899      	ldr	r1, [r3, #8]
   304b8:	683b      	ldr	r3, [r7, #0]
   304ba:	68db      	ldr	r3, [r3, #12]
   304bc:	68fd      	ldr	r5, [r7, #12]
   304be:	9302      	str	r3, [sp, #8]
   304c0:	9101      	str	r1, [sp, #4]
   304c2:	9200      	str	r2, [sp, #0]
   304c4:	0033      	movs	r3, r6
   304c6:	002a      	movs	r2, r5
   304c8:	0021      	movs	r1, r4
   304ca:	4c08      	ldr	r4, [pc, #32]	; (304ec <mqtt_init+0xac>)
   304cc:	47a0      	blx	r4
		return SUCCESS;
   304ce:	2300      	movs	r3, #0
   304d0:	e001      	b.n	304d6 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   304d2:	2301      	movs	r3, #1
   304d4:	425b      	negs	r3, r3
}
   304d6:	0018      	movs	r0, r3
   304d8:	46bd      	mov	sp, r7
   304da:	b005      	add	sp, #20
   304dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   304de:	46c0      	nop			; (mov r8, r8)
   304e0:	00030299 	.word	0x00030299
   304e4:	00035749 	.word	0x00035749
   304e8:	000303e1 	.word	0x000303e1
   304ec:	0002f311 	.word	0x0002f311

000304f0 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   304f0:	b580      	push	{r7, lr}
   304f2:	b082      	sub	sp, #8
   304f4:	af00      	add	r7, sp, #0
   304f6:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   304f8:	687b      	ldr	r3, [r7, #4]
   304fa:	4a0c      	ldr	r2, [pc, #48]	; (3052c <mqtt_get_config_defaults+0x3c>)
   304fc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   304fe:	687b      	ldr	r3, [r7, #4]
   30500:	2200      	movs	r2, #0
   30502:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   30504:	687b      	ldr	r3, [r7, #4]
   30506:	223c      	movs	r2, #60	; 0x3c
   30508:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   3050a:	687b      	ldr	r3, [r7, #4]
   3050c:	2200      	movs	r2, #0
   3050e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   30510:	687b      	ldr	r3, [r7, #4]
   30512:	2200      	movs	r2, #0
   30514:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   30516:	687b      	ldr	r3, [r7, #4]
   30518:	2200      	movs	r2, #0
   3051a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   3051c:	687b      	ldr	r3, [r7, #4]
   3051e:	2200      	movs	r2, #0
   30520:	615a      	str	r2, [r3, #20]
}
   30522:	46c0      	nop			; (mov r8, r8)
   30524:	46bd      	mov	sp, r7
   30526:	b002      	add	sp, #8
   30528:	bd80      	pop	{r7, pc}
   3052a:	46c0      	nop			; (mov r8, r8)
   3052c:	0000075b 	.word	0x0000075b

00030530 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   30530:	b580      	push	{r7, lr}
   30532:	b082      	sub	sp, #8
   30534:	af00      	add	r7, sp, #0
   30536:	6078      	str	r0, [r7, #4]
   30538:	6039      	str	r1, [r7, #0]
	if(module)
   3053a:	687b      	ldr	r3, [r7, #4]
   3053c:	2b00      	cmp	r3, #0
   3053e:	d004      	beq.n	3054a <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   30540:	687b      	ldr	r3, [r7, #4]
   30542:	683a      	ldr	r2, [r7, #0]
   30544:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   30546:	2300      	movs	r3, #0
   30548:	e001      	b.n	3054e <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   3054a:	2301      	movs	r3, #1
   3054c:	425b      	negs	r3, r3
}
   3054e:	0018      	movs	r0, r3
   30550:	46bd      	mov	sp, r7
   30552:	b002      	add	sp, #8
   30554:	bd80      	pop	{r7, pc}
	...

00030558 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30558:	b580      	push	{r7, lr}
   3055a:	b082      	sub	sp, #8
   3055c:	af00      	add	r7, sp, #0
   3055e:	603a      	str	r2, [r7, #0]
   30560:	1dfb      	adds	r3, r7, #7
   30562:	1c02      	adds	r2, r0, #0
   30564:	701a      	strb	r2, [r3, #0]
   30566:	1dbb      	adds	r3, r7, #6
   30568:	1c0a      	adds	r2, r1, #0
   3056a:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   3056c:	683a      	ldr	r2, [r7, #0]
   3056e:	1dbb      	adds	r3, r7, #6
   30570:	7819      	ldrb	r1, [r3, #0]
   30572:	1dfb      	adds	r3, r7, #7
   30574:	781b      	ldrb	r3, [r3, #0]
   30576:	b25b      	sxtb	r3, r3
   30578:	0018      	movs	r0, r3
   3057a:	4b03      	ldr	r3, [pc, #12]	; (30588 <mqtt_socket_event_handler+0x30>)
   3057c:	4798      	blx	r3
}
   3057e:	46c0      	nop			; (mov r8, r8)
   30580:	46bd      	mov	sp, r7
   30582:	b002      	add	sp, #8
   30584:	bd80      	pop	{r7, pc}
   30586:	46c0      	nop			; (mov r8, r8)
   30588:	0002ffd5 	.word	0x0002ffd5

0003058c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   3058c:	b580      	push	{r7, lr}
   3058e:	b082      	sub	sp, #8
   30590:	af00      	add	r7, sp, #0
   30592:	6078      	str	r0, [r7, #4]
   30594:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   30596:	683a      	ldr	r2, [r7, #0]
   30598:	687b      	ldr	r3, [r7, #4]
   3059a:	0011      	movs	r1, r2
   3059c:	0018      	movs	r0, r3
   3059e:	4b03      	ldr	r3, [pc, #12]	; (305ac <mqtt_socket_resolve_handler+0x20>)
   305a0:	4798      	blx	r3
}
   305a2:	46c0      	nop			; (mov r8, r8)
   305a4:	46bd      	mov	sp, r7
   305a6:	b002      	add	sp, #8
   305a8:	bd80      	pop	{r7, pc}
   305aa:	46c0      	nop			; (mov r8, r8)
   305ac:	0002ff85 	.word	0x0002ff85

000305b0 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   305b0:	b590      	push	{r4, r7, lr}
   305b2:	b085      	sub	sp, #20
   305b4:	af00      	add	r7, sp, #0
   305b6:	6078      	str	r0, [r7, #4]
   305b8:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   305ba:	687b      	ldr	r3, [r7, #4]
   305bc:	3320      	adds	r3, #32
   305be:	0018      	movs	r0, r3
   305c0:	687b      	ldr	r3, [r7, #4]
   305c2:	889b      	ldrh	r3, [r3, #4]
   305c4:	001a      	movs	r2, r3
   305c6:	687b      	ldr	r3, [r7, #4]
   305c8:	799b      	ldrb	r3, [r3, #6]
   305ca:	6839      	ldr	r1, [r7, #0]
   305cc:	4c09      	ldr	r4, [pc, #36]	; (305f4 <mqtt_connect+0x44>)
   305ce:	47a0      	blx	r4
   305d0:	0003      	movs	r3, r0
   305d2:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   305d4:	687b      	ldr	r3, [r7, #4]
   305d6:	681b      	ldr	r3, [r3, #0]
   305d8:	2b00      	cmp	r3, #0
   305da:	d006      	beq.n	305ea <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   305dc:	687b      	ldr	r3, [r7, #4]
   305de:	681b      	ldr	r3, [r3, #0]
   305e0:	220c      	movs	r2, #12
   305e2:	18ba      	adds	r2, r7, r2
   305e4:	6878      	ldr	r0, [r7, #4]
   305e6:	2100      	movs	r1, #0
   305e8:	4798      	blx	r3
	return connResult.sock_connected.result;
   305ea:	68fb      	ldr	r3, [r7, #12]
}
   305ec:	0018      	movs	r0, r3
   305ee:	46bd      	mov	sp, r7
   305f0:	b005      	add	sp, #20
   305f2:	bd90      	pop	{r4, r7, pc}
   305f4:	000302d1 	.word	0x000302d1

000305f8 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   305f8:	b580      	push	{r7, lr}
   305fa:	b09c      	sub	sp, #112	; 0x70
   305fc:	af00      	add	r7, sp, #0
   305fe:	60f8      	str	r0, [r7, #12]
   30600:	607a      	str	r2, [r7, #4]
   30602:	603b      	str	r3, [r7, #0]
   30604:	230b      	movs	r3, #11
   30606:	18fb      	adds	r3, r7, r3
   30608:	1c0a      	adds	r2, r1, #0
   3060a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   3060c:	2310      	movs	r3, #16
   3060e:	18fa      	adds	r2, r7, r3
   30610:	4b31      	ldr	r3, [pc, #196]	; (306d8 <mqtt_connect_broker+0xe0>)
   30612:	0010      	movs	r0, r2
   30614:	0019      	movs	r1, r3
   30616:	2358      	movs	r3, #88	; 0x58
   30618:	001a      	movs	r2, r3
   3061a:	4b30      	ldr	r3, [pc, #192]	; (306dc <mqtt_connect_broker+0xe4>)
   3061c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   3061e:	2310      	movs	r3, #16
   30620:	18fb      	adds	r3, r7, r3
   30622:	2204      	movs	r2, #4
   30624:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   30626:	2310      	movs	r3, #16
   30628:	18fb      	adds	r3, r7, r3
   3062a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   3062c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   3062e:	2310      	movs	r3, #16
   30630:	18fb      	adds	r3, r7, r3
   30632:	687a      	ldr	r2, [r7, #4]
   30634:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   30636:	2310      	movs	r3, #16
   30638:	18fb      	adds	r3, r7, r3
   3063a:	683a      	ldr	r2, [r7, #0]
   3063c:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   3063e:	2310      	movs	r3, #16
   30640:	18fb      	adds	r3, r7, r3
   30642:	220b      	movs	r2, #11
   30644:	18ba      	adds	r2, r7, r2
   30646:	7812      	ldrb	r2, [r2, #0]
   30648:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   3064a:	2310      	movs	r3, #16
   3064c:	18fb      	adds	r3, r7, r3
   3064e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   30650:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   30652:	2310      	movs	r3, #16
   30654:	18fb      	adds	r3, r7, r3
   30656:	2280      	movs	r2, #128	; 0x80
   30658:	18ba      	adds	r2, r7, r2
   3065a:	6812      	ldr	r2, [r2, #0]
   3065c:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   3065e:	2310      	movs	r3, #16
   30660:	18fb      	adds	r3, r7, r3
   30662:	228c      	movs	r2, #140	; 0x8c
   30664:	18ba      	adds	r2, r7, r2
   30666:	213c      	movs	r1, #60	; 0x3c
   30668:	7812      	ldrb	r2, [r2, #0]
   3066a:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   3066c:	2310      	movs	r3, #16
   3066e:	18fb      	adds	r3, r7, r3
   30670:	2288      	movs	r2, #136	; 0x88
   30672:	18ba      	adds	r2, r7, r2
   30674:	213d      	movs	r1, #61	; 0x3d
   30676:	7812      	ldrb	r2, [r2, #0]
   30678:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   3067a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   3067c:	2b00      	cmp	r3, #0
   3067e:	d008      	beq.n	30692 <mqtt_connect_broker+0x9a>
   30680:	2380      	movs	r3, #128	; 0x80
   30682:	18fb      	adds	r3, r7, r3
   30684:	681b      	ldr	r3, [r3, #0]
   30686:	2b00      	cmp	r3, #0
   30688:	d003      	beq.n	30692 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   3068a:	2310      	movs	r3, #16
   3068c:	18fb      	adds	r3, r7, r3
   3068e:	2201      	movs	r2, #1
   30690:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   30692:	68fb      	ldr	r3, [r7, #12]
   30694:	69db      	ldr	r3, [r3, #28]
   30696:	2210      	movs	r2, #16
   30698:	18ba      	adds	r2, r7, r2
   3069a:	0011      	movs	r1, r2
   3069c:	0018      	movs	r0, r3
   3069e:	4b10      	ldr	r3, [pc, #64]	; (306e0 <mqtt_connect_broker+0xe8>)
   306a0:	4798      	blx	r3
   306a2:	0003      	movs	r3, r0
   306a4:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   306a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   306a8:	b2da      	uxtb	r2, r3
   306aa:	2368      	movs	r3, #104	; 0x68
   306ac:	18fb      	adds	r3, r7, r3
   306ae:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   306b0:	68fb      	ldr	r3, [r7, #12]
   306b2:	681b      	ldr	r3, [r3, #0]
   306b4:	2b00      	cmp	r3, #0
   306b6:	d006      	beq.n	306c6 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   306b8:	68fb      	ldr	r3, [r7, #12]
   306ba:	681b      	ldr	r3, [r3, #0]
   306bc:	2268      	movs	r2, #104	; 0x68
   306be:	18ba      	adds	r2, r7, r2
   306c0:	68f8      	ldr	r0, [r7, #12]
   306c2:	2101      	movs	r1, #1
   306c4:	4798      	blx	r3
	
	module->isConnected = true;
   306c6:	68fb      	ldr	r3, [r7, #12]
   306c8:	2234      	movs	r2, #52	; 0x34
   306ca:	2101      	movs	r1, #1
   306cc:	5499      	strb	r1, [r3, r2]
	return rc;
   306ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   306d0:	0018      	movs	r0, r3
   306d2:	46bd      	mov	sp, r7
   306d4:	b01c      	add	sp, #112	; 0x70
   306d6:	bd80      	pop	{r7, pc}
   306d8:	0003ab30 	.word	0x0003ab30
   306dc:	00035749 	.word	0x00035749
   306e0:	0002fa21 	.word	0x0002fa21

000306e4 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   306e4:	b580      	push	{r7, lr}
   306e6:	b084      	sub	sp, #16
   306e8:	af00      	add	r7, sp, #0
   306ea:	6078      	str	r0, [r7, #4]
   306ec:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   306ee:	687b      	ldr	r3, [r7, #4]
   306f0:	69db      	ldr	r3, [r3, #28]
   306f2:	0018      	movs	r0, r3
   306f4:	4b0c      	ldr	r3, [pc, #48]	; (30728 <mqtt_disconnect+0x44>)
   306f6:	4798      	blx	r3
   306f8:	0003      	movs	r3, r0
   306fa:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   306fc:	68fb      	ldr	r3, [r7, #12]
   306fe:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   30700:	687b      	ldr	r3, [r7, #4]
   30702:	681b      	ldr	r3, [r3, #0]
   30704:	2b00      	cmp	r3, #0
   30706:	d006      	beq.n	30716 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   30708:	687b      	ldr	r3, [r7, #4]
   3070a:	681b      	ldr	r3, [r3, #0]
   3070c:	2208      	movs	r2, #8
   3070e:	18ba      	adds	r2, r7, r2
   30710:	6878      	ldr	r0, [r7, #4]
   30712:	2105      	movs	r1, #5
   30714:	4798      	blx	r3
	
	module->isConnected = false;
   30716:	687b      	ldr	r3, [r7, #4]
   30718:	2234      	movs	r2, #52	; 0x34
   3071a:	2100      	movs	r1, #0
   3071c:	5499      	strb	r1, [r3, r2]
	return rc;
   3071e:	68fb      	ldr	r3, [r7, #12]
}
   30720:	0018      	movs	r0, r3
   30722:	46bd      	mov	sp, r7
   30724:	b004      	add	sp, #16
   30726:	bd80      	pop	{r7, pc}
   30728:	0002fead 	.word	0x0002fead

0003072c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   3072c:	b580      	push	{r7, lr}
   3072e:	b08a      	sub	sp, #40	; 0x28
   30730:	af00      	add	r7, sp, #0
   30732:	60f8      	str	r0, [r7, #12]
   30734:	60b9      	str	r1, [r7, #8]
   30736:	607a      	str	r2, [r7, #4]
   30738:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   3073a:	2314      	movs	r3, #20
   3073c:	18fb      	adds	r3, r7, r3
   3073e:	2230      	movs	r2, #48	; 0x30
   30740:	18ba      	adds	r2, r7, r2
   30742:	7812      	ldrb	r2, [r2, #0]
   30744:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   30746:	2314      	movs	r3, #20
   30748:	18fb      	adds	r3, r7, r3
   3074a:	687a      	ldr	r2, [r7, #4]
   3074c:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   3074e:	2314      	movs	r3, #20
   30750:	18fb      	adds	r3, r7, r3
   30752:	683a      	ldr	r2, [r7, #0]
   30754:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   30756:	2314      	movs	r3, #20
   30758:	18fb      	adds	r3, r7, r3
   3075a:	2234      	movs	r2, #52	; 0x34
   3075c:	18ba      	adds	r2, r7, r2
   3075e:	7812      	ldrb	r2, [r2, #0]
   30760:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   30762:	68fb      	ldr	r3, [r7, #12]
   30764:	69db      	ldr	r3, [r3, #28]
   30766:	2214      	movs	r2, #20
   30768:	18ba      	adds	r2, r7, r2
   3076a:	68b9      	ldr	r1, [r7, #8]
   3076c:	0018      	movs	r0, r3
   3076e:	4b09      	ldr	r3, [pc, #36]	; (30794 <mqtt_publish+0x68>)
   30770:	4798      	blx	r3
   30772:	0003      	movs	r3, r0
   30774:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   30776:	68fb      	ldr	r3, [r7, #12]
   30778:	681b      	ldr	r3, [r3, #0]
   3077a:	2b00      	cmp	r3, #0
   3077c:	d005      	beq.n	3078a <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   3077e:	68fb      	ldr	r3, [r7, #12]
   30780:	681b      	ldr	r3, [r3, #0]
   30782:	68f8      	ldr	r0, [r7, #12]
   30784:	2200      	movs	r2, #0
   30786:	2102      	movs	r1, #2
   30788:	4798      	blx	r3
	
	return rc;
   3078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3078c:	0018      	movs	r0, r3
   3078e:	46bd      	mov	sp, r7
   30790:	b00a      	add	sp, #40	; 0x28
   30792:	bd80      	pop	{r7, pc}
   30794:	0002fced 	.word	0x0002fced

00030798 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30798:	b590      	push	{r4, r7, lr}
   3079a:	b087      	sub	sp, #28
   3079c:	af00      	add	r7, sp, #0
   3079e:	60f8      	str	r0, [r7, #12]
   307a0:	60b9      	str	r1, [r7, #8]
   307a2:	603b      	str	r3, [r7, #0]
   307a4:	1dfb      	adds	r3, r7, #7
   307a6:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   307a8:	68fb      	ldr	r3, [r7, #12]
   307aa:	69d8      	ldr	r0, [r3, #28]
   307ac:	683c      	ldr	r4, [r7, #0]
   307ae:	1dfb      	adds	r3, r7, #7
   307b0:	781a      	ldrb	r2, [r3, #0]
   307b2:	68b9      	ldr	r1, [r7, #8]
   307b4:	0023      	movs	r3, r4
   307b6:	4c09      	ldr	r4, [pc, #36]	; (307dc <mqtt_subscribe+0x44>)
   307b8:	47a0      	blx	r4
   307ba:	0003      	movs	r3, r0
   307bc:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   307be:	68fb      	ldr	r3, [r7, #12]
   307c0:	681b      	ldr	r3, [r3, #0]
   307c2:	2b00      	cmp	r3, #0
   307c4:	d005      	beq.n	307d2 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   307c6:	68fb      	ldr	r3, [r7, #12]
   307c8:	681b      	ldr	r3, [r3, #0]
   307ca:	68f8      	ldr	r0, [r7, #12]
   307cc:	2200      	movs	r2, #0
   307ce:	2103      	movs	r1, #3
   307d0:	4798      	blx	r3
	
	return rc;
   307d2:	697b      	ldr	r3, [r7, #20]
}
   307d4:	0018      	movs	r0, r3
   307d6:	46bd      	mov	sp, r7
   307d8:	b007      	add	sp, #28
   307da:	bd90      	pop	{r4, r7, pc}
   307dc:	0002fb61 	.word	0x0002fb61

000307e0 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   307e0:	b580      	push	{r7, lr}
   307e2:	b082      	sub	sp, #8
   307e4:	af00      	add	r7, sp, #0
   307e6:	6078      	str	r0, [r7, #4]
   307e8:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   307ea:	687b      	ldr	r3, [r7, #4]
   307ec:	69db      	ldr	r3, [r3, #28]
   307ee:	683a      	ldr	r2, [r7, #0]
   307f0:	0011      	movs	r1, r2
   307f2:	0018      	movs	r0, r3
   307f4:	4b03      	ldr	r3, [pc, #12]	; (30804 <mqtt_yield+0x24>)
   307f6:	4798      	blx	r3
   307f8:	0003      	movs	r3, r0
   307fa:	0018      	movs	r0, r3
   307fc:	46bd      	mov	sp, r7
   307fe:	b002      	add	sp, #8
   30800:	bd80      	pop	{r7, pc}
   30802:	46c0      	nop			; (mov r8, r8)
   30804:	0002f969 	.word	0x0002f969

00030808 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   30808:	b590      	push	{r4, r7, lr}
   3080a:	b085      	sub	sp, #20
   3080c:	af00      	add	r7, sp, #0
   3080e:	6078      	str	r0, [r7, #4]
	int len = 0;
   30810:	2300      	movs	r3, #0
   30812:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   30814:	687b      	ldr	r3, [r7, #4]
   30816:	7a1b      	ldrb	r3, [r3, #8]
   30818:	2b03      	cmp	r3, #3
   3081a:	d102      	bne.n	30822 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   3081c:	230c      	movs	r3, #12
   3081e:	60fb      	str	r3, [r7, #12]
   30820:	e005      	b.n	3082e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   30822:	687b      	ldr	r3, [r7, #4]
   30824:	7a1b      	ldrb	r3, [r3, #8]
   30826:	2b04      	cmp	r3, #4
   30828:	d101      	bne.n	3082e <MQTTSerialize_connectLength+0x26>
		len = 10;
   3082a:	230a      	movs	r3, #10
   3082c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   3082e:	687b      	ldr	r3, [r7, #4]
   30830:	68d8      	ldr	r0, [r3, #12]
   30832:	6919      	ldr	r1, [r3, #16]
   30834:	695a      	ldr	r2, [r3, #20]
   30836:	4b25      	ldr	r3, [pc, #148]	; (308cc <MQTTSerialize_connectLength+0xc4>)
   30838:	4798      	blx	r3
   3083a:	0003      	movs	r3, r0
   3083c:	3302      	adds	r3, #2
   3083e:	68fa      	ldr	r2, [r7, #12]
   30840:	18d3      	adds	r3, r2, r3
   30842:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   30844:	687b      	ldr	r3, [r7, #4]
   30846:	7edb      	ldrb	r3, [r3, #27]
   30848:	2b00      	cmp	r3, #0
   3084a:	d013      	beq.n	30874 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   3084c:	687b      	ldr	r3, [r7, #4]
   3084e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   30850:	6a99      	ldr	r1, [r3, #40]	; 0x28
   30852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30854:	4b1d      	ldr	r3, [pc, #116]	; (308cc <MQTTSerialize_connectLength+0xc4>)
   30856:	4798      	blx	r3
   30858:	0003      	movs	r3, r0
   3085a:	1c9c      	adds	r4, r3, #2
   3085c:	687b      	ldr	r3, [r7, #4]
   3085e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   30860:	6b59      	ldr	r1, [r3, #52]	; 0x34
   30862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   30864:	4b19      	ldr	r3, [pc, #100]	; (308cc <MQTTSerialize_connectLength+0xc4>)
   30866:	4798      	blx	r3
   30868:	0003      	movs	r3, r0
   3086a:	18e3      	adds	r3, r4, r3
   3086c:	3302      	adds	r3, #2
   3086e:	68fa      	ldr	r2, [r7, #12]
   30870:	18d3      	adds	r3, r2, r3
   30872:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   30874:	687b      	ldr	r3, [r7, #4]
   30876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30878:	2b00      	cmp	r3, #0
   3087a:	d103      	bne.n	30884 <MQTTSerialize_connectLength+0x7c>
   3087c:	687b      	ldr	r3, [r7, #4]
   3087e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30880:	2b00      	cmp	r3, #0
   30882:	d00a      	beq.n	3089a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   30884:	687b      	ldr	r3, [r7, #4]
   30886:	6c18      	ldr	r0, [r3, #64]	; 0x40
   30888:	6c59      	ldr	r1, [r3, #68]	; 0x44
   3088a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   3088c:	4b0f      	ldr	r3, [pc, #60]	; (308cc <MQTTSerialize_connectLength+0xc4>)
   3088e:	4798      	blx	r3
   30890:	0003      	movs	r3, r0
   30892:	3302      	adds	r3, #2
   30894:	68fa      	ldr	r2, [r7, #12]
   30896:	18d3      	adds	r3, r2, r3
   30898:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   3089a:	687b      	ldr	r3, [r7, #4]
   3089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3089e:	2b00      	cmp	r3, #0
   308a0:	d103      	bne.n	308aa <MQTTSerialize_connectLength+0xa2>
   308a2:	687b      	ldr	r3, [r7, #4]
   308a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   308a6:	2b00      	cmp	r3, #0
   308a8:	d00a      	beq.n	308c0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   308aa:	687b      	ldr	r3, [r7, #4]
   308ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   308ae:	6d19      	ldr	r1, [r3, #80]	; 0x50
   308b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   308b2:	4b06      	ldr	r3, [pc, #24]	; (308cc <MQTTSerialize_connectLength+0xc4>)
   308b4:	4798      	blx	r3
   308b6:	0003      	movs	r3, r0
   308b8:	3302      	adds	r3, #2
   308ba:	68fa      	ldr	r2, [r7, #12]
   308bc:	18d3      	adds	r3, r2, r3
   308be:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   308c0:	68fb      	ldr	r3, [r7, #12]
}
   308c2:	0018      	movs	r0, r3
   308c4:	46bd      	mov	sp, r7
   308c6:	b005      	add	sp, #20
   308c8:	bd90      	pop	{r4, r7, pc}
   308ca:	46c0      	nop			; (mov r8, r8)
   308cc:	00031279 	.word	0x00031279

000308d0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   308d0:	b590      	push	{r4, r7, lr}
   308d2:	b08b      	sub	sp, #44	; 0x2c
   308d4:	af00      	add	r7, sp, #0
   308d6:	60f8      	str	r0, [r7, #12]
   308d8:	60b9      	str	r1, [r7, #8]
   308da:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   308dc:	68fb      	ldr	r3, [r7, #12]
   308de:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   308e0:	2300      	movs	r3, #0
   308e2:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   308e4:	2300      	movs	r3, #0
   308e6:	617b      	str	r3, [r7, #20]
	int len = 0;
   308e8:	2300      	movs	r3, #0
   308ea:	623b      	str	r3, [r7, #32]
	int rc = -1;
   308ec:	2301      	movs	r3, #1
   308ee:	425b      	negs	r3, r3
   308f0:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   308f2:	687b      	ldr	r3, [r7, #4]
   308f4:	0018      	movs	r0, r3
   308f6:	4b8c      	ldr	r3, [pc, #560]	; (30b28 <MQTTSerialize_connect+0x258>)
   308f8:	4798      	blx	r3
   308fa:	0003      	movs	r3, r0
   308fc:	623b      	str	r3, [r7, #32]
   308fe:	6a3b      	ldr	r3, [r7, #32]
   30900:	0018      	movs	r0, r3
   30902:	4b8a      	ldr	r3, [pc, #552]	; (30b2c <MQTTSerialize_connect+0x25c>)
   30904:	4798      	blx	r3
   30906:	0002      	movs	r2, r0
   30908:	68bb      	ldr	r3, [r7, #8]
   3090a:	429a      	cmp	r2, r3
   3090c:	dd03      	ble.n	30916 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3090e:	2302      	movs	r3, #2
   30910:	425b      	negs	r3, r3
   30912:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30914:	e103      	b.n	30b1e <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   30916:	2318      	movs	r3, #24
   30918:	18fb      	adds	r3, r7, r3
   3091a:	2200      	movs	r2, #0
   3091c:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   3091e:	2318      	movs	r3, #24
   30920:	18fb      	adds	r3, r7, r3
   30922:	781a      	ldrb	r2, [r3, #0]
   30924:	210f      	movs	r1, #15
   30926:	400a      	ands	r2, r1
   30928:	1c11      	adds	r1, r2, #0
   3092a:	2210      	movs	r2, #16
   3092c:	430a      	orrs	r2, r1
   3092e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30930:	2318      	movs	r3, #24
   30932:	18fb      	adds	r3, r7, r3
   30934:	781a      	ldrb	r2, [r3, #0]
   30936:	231c      	movs	r3, #28
   30938:	18fb      	adds	r3, r7, r3
   3093a:	0011      	movs	r1, r2
   3093c:	0018      	movs	r0, r3
   3093e:	4b7c      	ldr	r3, [pc, #496]	; (30b30 <MQTTSerialize_connect+0x260>)
   30940:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   30942:	69fb      	ldr	r3, [r7, #28]
   30944:	6a3a      	ldr	r2, [r7, #32]
   30946:	0011      	movs	r1, r2
   30948:	0018      	movs	r0, r3
   3094a:	4b7a      	ldr	r3, [pc, #488]	; (30b34 <MQTTSerialize_connect+0x264>)
   3094c:	4798      	blx	r3
   3094e:	0002      	movs	r2, r0
   30950:	69fb      	ldr	r3, [r7, #28]
   30952:	189b      	adds	r3, r3, r2
   30954:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   30956:	687b      	ldr	r3, [r7, #4]
   30958:	7a1b      	ldrb	r3, [r3, #8]
   3095a:	2b04      	cmp	r3, #4
   3095c:	d10d      	bne.n	3097a <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   3095e:	4a76      	ldr	r2, [pc, #472]	; (30b38 <MQTTSerialize_connect+0x268>)
   30960:	231c      	movs	r3, #28
   30962:	18fb      	adds	r3, r7, r3
   30964:	0011      	movs	r1, r2
   30966:	0018      	movs	r0, r3
   30968:	4b74      	ldr	r3, [pc, #464]	; (30b3c <MQTTSerialize_connect+0x26c>)
   3096a:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   3096c:	231c      	movs	r3, #28
   3096e:	18fb      	adds	r3, r7, r3
   30970:	2104      	movs	r1, #4
   30972:	0018      	movs	r0, r3
   30974:	4b6e      	ldr	r3, [pc, #440]	; (30b30 <MQTTSerialize_connect+0x260>)
   30976:	4798      	blx	r3
   30978:	e00c      	b.n	30994 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   3097a:	4a71      	ldr	r2, [pc, #452]	; (30b40 <MQTTSerialize_connect+0x270>)
   3097c:	231c      	movs	r3, #28
   3097e:	18fb      	adds	r3, r7, r3
   30980:	0011      	movs	r1, r2
   30982:	0018      	movs	r0, r3
   30984:	4b6d      	ldr	r3, [pc, #436]	; (30b3c <MQTTSerialize_connect+0x26c>)
   30986:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   30988:	231c      	movs	r3, #28
   3098a:	18fb      	adds	r3, r7, r3
   3098c:	2103      	movs	r1, #3
   3098e:	0018      	movs	r0, r3
   30990:	4b67      	ldr	r3, [pc, #412]	; (30b30 <MQTTSerialize_connect+0x260>)
   30992:	4798      	blx	r3
	}

	flags.all = 0;
   30994:	2314      	movs	r3, #20
   30996:	18fb      	adds	r3, r7, r3
   30998:	2200      	movs	r2, #0
   3099a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   3099c:	687b      	ldr	r3, [r7, #4]
   3099e:	7e9b      	ldrb	r3, [r3, #26]
   309a0:	1c1a      	adds	r2, r3, #0
   309a2:	2301      	movs	r3, #1
   309a4:	4013      	ands	r3, r2
   309a6:	b2da      	uxtb	r2, r3
   309a8:	2314      	movs	r3, #20
   309aa:	18fb      	adds	r3, r7, r3
   309ac:	2101      	movs	r1, #1
   309ae:	400a      	ands	r2, r1
   309b0:	1890      	adds	r0, r2, r2
   309b2:	781a      	ldrb	r2, [r3, #0]
   309b4:	2102      	movs	r1, #2
   309b6:	438a      	bics	r2, r1
   309b8:	1c11      	adds	r1, r2, #0
   309ba:	1c02      	adds	r2, r0, #0
   309bc:	430a      	orrs	r2, r1
   309be:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   309c0:	687b      	ldr	r3, [r7, #4]
   309c2:	7edb      	ldrb	r3, [r3, #27]
   309c4:	1e5a      	subs	r2, r3, #1
   309c6:	4193      	sbcs	r3, r2
   309c8:	b2da      	uxtb	r2, r3
   309ca:	2314      	movs	r3, #20
   309cc:	18fb      	adds	r3, r7, r3
   309ce:	2101      	movs	r1, #1
   309d0:	400a      	ands	r2, r1
   309d2:	0090      	lsls	r0, r2, #2
   309d4:	781a      	ldrb	r2, [r3, #0]
   309d6:	2104      	movs	r1, #4
   309d8:	438a      	bics	r2, r1
   309da:	1c11      	adds	r1, r2, #0
   309dc:	1c02      	adds	r2, r0, #0
   309de:	430a      	orrs	r2, r1
   309e0:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   309e2:	2314      	movs	r3, #20
   309e4:	18fb      	adds	r3, r7, r3
   309e6:	781b      	ldrb	r3, [r3, #0]
   309e8:	2204      	movs	r2, #4
   309ea:	4013      	ands	r3, r2
   309ec:	b2db      	uxtb	r3, r3
   309ee:	2b00      	cmp	r3, #0
   309f0:	d025      	beq.n	30a3e <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   309f2:	687b      	ldr	r3, [r7, #4]
   309f4:	223d      	movs	r2, #61	; 0x3d
   309f6:	5c9b      	ldrb	r3, [r3, r2]
   309f8:	1c1a      	adds	r2, r3, #0
   309fa:	2303      	movs	r3, #3
   309fc:	4013      	ands	r3, r2
   309fe:	b2da      	uxtb	r2, r3
   30a00:	2314      	movs	r3, #20
   30a02:	18fb      	adds	r3, r7, r3
   30a04:	2103      	movs	r1, #3
   30a06:	400a      	ands	r2, r1
   30a08:	00d0      	lsls	r0, r2, #3
   30a0a:	781a      	ldrb	r2, [r3, #0]
   30a0c:	2118      	movs	r1, #24
   30a0e:	438a      	bics	r2, r1
   30a10:	1c11      	adds	r1, r2, #0
   30a12:	1c02      	adds	r2, r0, #0
   30a14:	430a      	orrs	r2, r1
   30a16:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   30a18:	687b      	ldr	r3, [r7, #4]
   30a1a:	223c      	movs	r2, #60	; 0x3c
   30a1c:	5c9b      	ldrb	r3, [r3, r2]
   30a1e:	1c1a      	adds	r2, r3, #0
   30a20:	2301      	movs	r3, #1
   30a22:	4013      	ands	r3, r2
   30a24:	b2da      	uxtb	r2, r3
   30a26:	2314      	movs	r3, #20
   30a28:	18fb      	adds	r3, r7, r3
   30a2a:	2101      	movs	r1, #1
   30a2c:	400a      	ands	r2, r1
   30a2e:	0150      	lsls	r0, r2, #5
   30a30:	781a      	ldrb	r2, [r3, #0]
   30a32:	2120      	movs	r1, #32
   30a34:	438a      	bics	r2, r1
   30a36:	1c11      	adds	r1, r2, #0
   30a38:	1c02      	adds	r2, r0, #0
   30a3a:	430a      	orrs	r2, r1
   30a3c:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   30a3e:	687b      	ldr	r3, [r7, #4]
   30a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30a42:	2b00      	cmp	r3, #0
   30a44:	d103      	bne.n	30a4e <MQTTSerialize_connect+0x17e>
   30a46:	687b      	ldr	r3, [r7, #4]
   30a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30a4a:	2b00      	cmp	r3, #0
   30a4c:	d006      	beq.n	30a5c <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   30a4e:	2314      	movs	r3, #20
   30a50:	18fb      	adds	r3, r7, r3
   30a52:	781a      	ldrb	r2, [r3, #0]
   30a54:	2180      	movs	r1, #128	; 0x80
   30a56:	4249      	negs	r1, r1
   30a58:	430a      	orrs	r2, r1
   30a5a:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   30a5c:	687b      	ldr	r3, [r7, #4]
   30a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30a60:	2b00      	cmp	r3, #0
   30a62:	d103      	bne.n	30a6c <MQTTSerialize_connect+0x19c>
   30a64:	687b      	ldr	r3, [r7, #4]
   30a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30a68:	2b00      	cmp	r3, #0
   30a6a:	d005      	beq.n	30a78 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   30a6c:	2314      	movs	r3, #20
   30a6e:	18fb      	adds	r3, r7, r3
   30a70:	781a      	ldrb	r2, [r3, #0]
   30a72:	2140      	movs	r1, #64	; 0x40
   30a74:	430a      	orrs	r2, r1
   30a76:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   30a78:	2314      	movs	r3, #20
   30a7a:	18fb      	adds	r3, r7, r3
   30a7c:	781a      	ldrb	r2, [r3, #0]
   30a7e:	231c      	movs	r3, #28
   30a80:	18fb      	adds	r3, r7, r3
   30a82:	0011      	movs	r1, r2
   30a84:	0018      	movs	r0, r3
   30a86:	4b2a      	ldr	r3, [pc, #168]	; (30b30 <MQTTSerialize_connect+0x260>)
   30a88:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   30a8a:	687b      	ldr	r3, [r7, #4]
   30a8c:	8b1b      	ldrh	r3, [r3, #24]
   30a8e:	001a      	movs	r2, r3
   30a90:	231c      	movs	r3, #28
   30a92:	18fb      	adds	r3, r7, r3
   30a94:	0011      	movs	r1, r2
   30a96:	0018      	movs	r0, r3
   30a98:	4b2a      	ldr	r3, [pc, #168]	; (30b44 <MQTTSerialize_connect+0x274>)
   30a9a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   30a9c:	687b      	ldr	r3, [r7, #4]
   30a9e:	221c      	movs	r2, #28
   30aa0:	18b8      	adds	r0, r7, r2
   30aa2:	68d9      	ldr	r1, [r3, #12]
   30aa4:	691a      	ldr	r2, [r3, #16]
   30aa6:	695b      	ldr	r3, [r3, #20]
   30aa8:	4c27      	ldr	r4, [pc, #156]	; (30b48 <MQTTSerialize_connect+0x278>)
   30aaa:	47a0      	blx	r4
	if (options->willFlag)
   30aac:	687b      	ldr	r3, [r7, #4]
   30aae:	7edb      	ldrb	r3, [r3, #27]
   30ab0:	2b00      	cmp	r3, #0
   30ab2:	d00f      	beq.n	30ad4 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   30ab4:	687b      	ldr	r3, [r7, #4]
   30ab6:	221c      	movs	r2, #28
   30ab8:	18b8      	adds	r0, r7, r2
   30aba:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   30abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30ac0:	4c21      	ldr	r4, [pc, #132]	; (30b48 <MQTTSerialize_connect+0x278>)
   30ac2:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   30ac4:	687b      	ldr	r3, [r7, #4]
   30ac6:	221c      	movs	r2, #28
   30ac8:	18b8      	adds	r0, r7, r2
   30aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
   30acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   30ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30ad0:	4c1d      	ldr	r4, [pc, #116]	; (30b48 <MQTTSerialize_connect+0x278>)
   30ad2:	47a0      	blx	r4
	}
	if (flags.bits.username)
   30ad4:	2314      	movs	r3, #20
   30ad6:	18fb      	adds	r3, r7, r3
   30ad8:	781b      	ldrb	r3, [r3, #0]
   30ada:	227f      	movs	r2, #127	; 0x7f
   30adc:	4393      	bics	r3, r2
   30ade:	b2db      	uxtb	r3, r3
   30ae0:	2b00      	cmp	r3, #0
   30ae2:	d007      	beq.n	30af4 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   30ae4:	687b      	ldr	r3, [r7, #4]
   30ae6:	221c      	movs	r2, #28
   30ae8:	18b8      	adds	r0, r7, r2
   30aea:	6c19      	ldr	r1, [r3, #64]	; 0x40
   30aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30af0:	4c15      	ldr	r4, [pc, #84]	; (30b48 <MQTTSerialize_connect+0x278>)
   30af2:	47a0      	blx	r4
	if (flags.bits.password)
   30af4:	2314      	movs	r3, #20
   30af6:	18fb      	adds	r3, r7, r3
   30af8:	781b      	ldrb	r3, [r3, #0]
   30afa:	2240      	movs	r2, #64	; 0x40
   30afc:	4013      	ands	r3, r2
   30afe:	b2db      	uxtb	r3, r3
   30b00:	2b00      	cmp	r3, #0
   30b02:	d007      	beq.n	30b14 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   30b04:	687b      	ldr	r3, [r7, #4]
   30b06:	221c      	movs	r2, #28
   30b08:	18b8      	adds	r0, r7, r2
   30b0a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   30b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   30b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30b10:	4c0d      	ldr	r4, [pc, #52]	; (30b48 <MQTTSerialize_connect+0x278>)
   30b12:	47a0      	blx	r4

	rc = ptr - buf;
   30b14:	69fb      	ldr	r3, [r7, #28]
   30b16:	001a      	movs	r2, r3
   30b18:	68fb      	ldr	r3, [r7, #12]
   30b1a:	1ad3      	subs	r3, r2, r3
   30b1c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   30b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30b20:	0018      	movs	r0, r3
   30b22:	46bd      	mov	sp, r7
   30b24:	b00b      	add	sp, #44	; 0x2c
   30b26:	bd90      	pop	{r4, r7, pc}
   30b28:	00030809 	.word	0x00030809
   30b2c:	00030f9d 	.word	0x00030f9d
   30b30:	000310bf 	.word	0x000310bf
   30b34:	00030ea5 	.word	0x00030ea5
   30b38:	0003ab88 	.word	0x0003ab88
   30b3c:	00031141 	.word	0x00031141
   30b40:	0003ab90 	.word	0x0003ab90
   30b44:	000310e9 	.word	0x000310e9
   30b48:	00031191 	.word	0x00031191

00030b4c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   30b4c:	b580      	push	{r7, lr}
   30b4e:	b08a      	sub	sp, #40	; 0x28
   30b50:	af00      	add	r7, sp, #0
   30b52:	60f8      	str	r0, [r7, #12]
   30b54:	60b9      	str	r1, [r7, #8]
   30b56:	607a      	str	r2, [r7, #4]
   30b58:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30b5a:	2300      	movs	r3, #0
   30b5c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30b5e:	687b      	ldr	r3, [r7, #4]
   30b60:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30b62:	2300      	movs	r3, #0
   30b64:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30b66:	2300      	movs	r3, #0
   30b68:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   30b6a:	2300      	movs	r3, #0
   30b6c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30b6e:	2318      	movs	r3, #24
   30b70:	18fb      	adds	r3, r7, r3
   30b72:	0018      	movs	r0, r3
   30b74:	4b25      	ldr	r3, [pc, #148]	; (30c0c <MQTTDeserialize_connack+0xc0>)
   30b76:	4798      	blx	r3
   30b78:	0003      	movs	r3, r0
   30b7a:	001a      	movs	r2, r3
   30b7c:	231c      	movs	r3, #28
   30b7e:	18fb      	adds	r3, r7, r3
   30b80:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   30b82:	231c      	movs	r3, #28
   30b84:	18fb      	adds	r3, r7, r3
   30b86:	781b      	ldrb	r3, [r3, #0]
   30b88:	220f      	movs	r2, #15
   30b8a:	4393      	bics	r3, r2
   30b8c:	b2db      	uxtb	r3, r3
   30b8e:	2b20      	cmp	r3, #32
   30b90:	d134      	bne.n	30bfc <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30b92:	69bb      	ldr	r3, [r7, #24]
   30b94:	2214      	movs	r2, #20
   30b96:	18ba      	adds	r2, r7, r2
   30b98:	0011      	movs	r1, r2
   30b9a:	0018      	movs	r0, r3
   30b9c:	4b1c      	ldr	r3, [pc, #112]	; (30c10 <MQTTDeserialize_connack+0xc4>)
   30b9e:	4798      	blx	r3
   30ba0:	0003      	movs	r3, r0
   30ba2:	627b      	str	r3, [r7, #36]	; 0x24
   30ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30ba6:	69bb      	ldr	r3, [r7, #24]
   30ba8:	189b      	adds	r3, r3, r2
   30baa:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30bac:	69bb      	ldr	r3, [r7, #24]
   30bae:	697a      	ldr	r2, [r7, #20]
   30bb0:	189b      	adds	r3, r3, r2
   30bb2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30bb4:	6a3b      	ldr	r3, [r7, #32]
   30bb6:	69ba      	ldr	r2, [r7, #24]
   30bb8:	1a9b      	subs	r3, r3, r2
   30bba:	2b01      	cmp	r3, #1
   30bbc:	dd20      	ble.n	30c00 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   30bbe:	2318      	movs	r3, #24
   30bc0:	18fb      	adds	r3, r7, r3
   30bc2:	0018      	movs	r0, r3
   30bc4:	4b11      	ldr	r3, [pc, #68]	; (30c0c <MQTTDeserialize_connack+0xc0>)
   30bc6:	4798      	blx	r3
   30bc8:	0003      	movs	r3, r0
   30bca:	001a      	movs	r2, r3
   30bcc:	2310      	movs	r3, #16
   30bce:	18fb      	adds	r3, r7, r3
   30bd0:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30bd2:	2310      	movs	r3, #16
   30bd4:	18fb      	adds	r3, r7, r3
   30bd6:	781b      	ldrb	r3, [r3, #0]
   30bd8:	061b      	lsls	r3, r3, #24
   30bda:	0fdb      	lsrs	r3, r3, #31
   30bdc:	b2db      	uxtb	r3, r3
   30bde:	001a      	movs	r2, r3
   30be0:	68fb      	ldr	r3, [r7, #12]
   30be2:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30be4:	2318      	movs	r3, #24
   30be6:	18fb      	adds	r3, r7, r3
   30be8:	0018      	movs	r0, r3
   30bea:	4b08      	ldr	r3, [pc, #32]	; (30c0c <MQTTDeserialize_connack+0xc0>)
   30bec:	4798      	blx	r3
   30bee:	0003      	movs	r3, r0
   30bf0:	001a      	movs	r2, r3
   30bf2:	68bb      	ldr	r3, [r7, #8]
   30bf4:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30bf6:	2301      	movs	r3, #1
   30bf8:	627b      	str	r3, [r7, #36]	; 0x24
   30bfa:	e002      	b.n	30c02 <MQTTDeserialize_connack+0xb6>
		goto exit;
   30bfc:	46c0      	nop			; (mov r8, r8)
   30bfe:	e000      	b.n	30c02 <MQTTDeserialize_connack+0xb6>
		goto exit;
   30c00:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30c04:	0018      	movs	r0, r3
   30c06:	46bd      	mov	sp, r7
   30c08:	b00a      	add	sp, #40	; 0x28
   30c0a:	bd80      	pop	{r7, pc}
   30c0c:	00031093 	.word	0x00031093
   30c10:	0003102d 	.word	0x0003102d

00030c14 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   30c14:	b580      	push	{r7, lr}
   30c16:	b088      	sub	sp, #32
   30c18:	af00      	add	r7, sp, #0
   30c1a:	60f8      	str	r0, [r7, #12]
   30c1c:	60b9      	str	r1, [r7, #8]
   30c1e:	1dfb      	adds	r3, r7, #7
   30c20:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30c22:	2300      	movs	r3, #0
   30c24:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30c26:	2301      	movs	r3, #1
   30c28:	425b      	negs	r3, r3
   30c2a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30c2c:	68fb      	ldr	r3, [r7, #12]
   30c2e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30c30:	68bb      	ldr	r3, [r7, #8]
   30c32:	2b01      	cmp	r3, #1
   30c34:	dc03      	bgt.n	30c3e <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30c36:	2302      	movs	r3, #2
   30c38:	425b      	negs	r3, r3
   30c3a:	61fb      	str	r3, [r7, #28]
		goto exit;
   30c3c:	e029      	b.n	30c92 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   30c3e:	2318      	movs	r3, #24
   30c40:	18fb      	adds	r3, r7, r3
   30c42:	2200      	movs	r2, #0
   30c44:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30c46:	1dfb      	adds	r3, r7, #7
   30c48:	781b      	ldrb	r3, [r3, #0]
   30c4a:	220f      	movs	r2, #15
   30c4c:	4013      	ands	r3, r2
   30c4e:	b2da      	uxtb	r2, r3
   30c50:	2318      	movs	r3, #24
   30c52:	18fb      	adds	r3, r7, r3
   30c54:	0110      	lsls	r0, r2, #4
   30c56:	781a      	ldrb	r2, [r3, #0]
   30c58:	210f      	movs	r1, #15
   30c5a:	400a      	ands	r2, r1
   30c5c:	1c11      	adds	r1, r2, #0
   30c5e:	1c02      	adds	r2, r0, #0
   30c60:	430a      	orrs	r2, r1
   30c62:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30c64:	2318      	movs	r3, #24
   30c66:	18fb      	adds	r3, r7, r3
   30c68:	781a      	ldrb	r2, [r3, #0]
   30c6a:	2314      	movs	r3, #20
   30c6c:	18fb      	adds	r3, r7, r3
   30c6e:	0011      	movs	r1, r2
   30c70:	0018      	movs	r0, r3
   30c72:	4b0a      	ldr	r3, [pc, #40]	; (30c9c <MQTTSerialize_zero+0x88>)
   30c74:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30c76:	697b      	ldr	r3, [r7, #20]
   30c78:	2100      	movs	r1, #0
   30c7a:	0018      	movs	r0, r3
   30c7c:	4b08      	ldr	r3, [pc, #32]	; (30ca0 <MQTTSerialize_zero+0x8c>)
   30c7e:	4798      	blx	r3
   30c80:	0002      	movs	r2, r0
   30c82:	697b      	ldr	r3, [r7, #20]
   30c84:	189b      	adds	r3, r3, r2
   30c86:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30c88:	697b      	ldr	r3, [r7, #20]
   30c8a:	001a      	movs	r2, r3
   30c8c:	68fb      	ldr	r3, [r7, #12]
   30c8e:	1ad3      	subs	r3, r2, r3
   30c90:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30c92:	69fb      	ldr	r3, [r7, #28]
}
   30c94:	0018      	movs	r0, r3
   30c96:	46bd      	mov	sp, r7
   30c98:	b008      	add	sp, #32
   30c9a:	bd80      	pop	{r7, pc}
   30c9c:	000310bf 	.word	0x000310bf
   30ca0:	00030ea5 	.word	0x00030ea5

00030ca4 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30ca4:	b580      	push	{r7, lr}
   30ca6:	b082      	sub	sp, #8
   30ca8:	af00      	add	r7, sp, #0
   30caa:	6078      	str	r0, [r7, #4]
   30cac:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30cae:	6839      	ldr	r1, [r7, #0]
   30cb0:	687b      	ldr	r3, [r7, #4]
   30cb2:	220e      	movs	r2, #14
   30cb4:	0018      	movs	r0, r3
   30cb6:	4b03      	ldr	r3, [pc, #12]	; (30cc4 <MQTTSerialize_disconnect+0x20>)
   30cb8:	4798      	blx	r3
   30cba:	0003      	movs	r3, r0
}
   30cbc:	0018      	movs	r0, r3
   30cbe:	46bd      	mov	sp, r7
   30cc0:	b002      	add	sp, #8
   30cc2:	bd80      	pop	{r7, pc}
   30cc4:	00030c15 	.word	0x00030c15

00030cc8 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30cc8:	b580      	push	{r7, lr}
   30cca:	b082      	sub	sp, #8
   30ccc:	af00      	add	r7, sp, #0
   30cce:	6078      	str	r0, [r7, #4]
   30cd0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30cd2:	6839      	ldr	r1, [r7, #0]
   30cd4:	687b      	ldr	r3, [r7, #4]
   30cd6:	220c      	movs	r2, #12
   30cd8:	0018      	movs	r0, r3
   30cda:	4b03      	ldr	r3, [pc, #12]	; (30ce8 <MQTTSerialize_pingreq+0x20>)
   30cdc:	4798      	blx	r3
   30cde:	0003      	movs	r3, r0
}
   30ce0:	0018      	movs	r0, r3
   30ce2:	46bd      	mov	sp, r7
   30ce4:	b002      	add	sp, #8
   30ce6:	bd80      	pop	{r7, pc}
   30ce8:	00030c15 	.word	0x00030c15

00030cec <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   30cec:	b580      	push	{r7, lr}
   30cee:	b08a      	sub	sp, #40	; 0x28
   30cf0:	af00      	add	r7, sp, #0
   30cf2:	60f8      	str	r0, [r7, #12]
   30cf4:	60b9      	str	r1, [r7, #8]
   30cf6:	607a      	str	r2, [r7, #4]
   30cf8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30cfa:	2300      	movs	r3, #0
   30cfc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30d00:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30d02:	2300      	movs	r3, #0
   30d04:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30d06:	2300      	movs	r3, #0
   30d08:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   30d0a:	2300      	movs	r3, #0
   30d0c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30d0e:	2318      	movs	r3, #24
   30d10:	18fb      	adds	r3, r7, r3
   30d12:	0018      	movs	r0, r3
   30d14:	4b32      	ldr	r3, [pc, #200]	; (30de0 <MQTTDeserialize_publish+0xf4>)
   30d16:	4798      	blx	r3
   30d18:	0003      	movs	r3, r0
   30d1a:	001a      	movs	r2, r3
   30d1c:	231c      	movs	r3, #28
   30d1e:	18fb      	adds	r3, r7, r3
   30d20:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30d22:	231c      	movs	r3, #28
   30d24:	18fb      	adds	r3, r7, r3
   30d26:	781b      	ldrb	r3, [r3, #0]
   30d28:	220f      	movs	r2, #15
   30d2a:	4393      	bics	r3, r2
   30d2c:	b2db      	uxtb	r3, r3
   30d2e:	2b30      	cmp	r3, #48	; 0x30
   30d30:	d150      	bne.n	30dd4 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30d32:	231c      	movs	r3, #28
   30d34:	18fb      	adds	r3, r7, r3
   30d36:	781b      	ldrb	r3, [r3, #0]
   30d38:	071b      	lsls	r3, r3, #28
   30d3a:	0fdb      	lsrs	r3, r3, #31
   30d3c:	b2db      	uxtb	r3, r3
   30d3e:	001a      	movs	r2, r3
   30d40:	68fb      	ldr	r3, [r7, #12]
   30d42:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30d44:	231c      	movs	r3, #28
   30d46:	18fb      	adds	r3, r7, r3
   30d48:	781b      	ldrb	r3, [r3, #0]
   30d4a:	075b      	lsls	r3, r3, #29
   30d4c:	0f9b      	lsrs	r3, r3, #30
   30d4e:	b2db      	uxtb	r3, r3
   30d50:	001a      	movs	r2, r3
   30d52:	68bb      	ldr	r3, [r7, #8]
   30d54:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30d56:	231c      	movs	r3, #28
   30d58:	18fb      	adds	r3, r7, r3
   30d5a:	781b      	ldrb	r3, [r3, #0]
   30d5c:	07db      	lsls	r3, r3, #31
   30d5e:	0fdb      	lsrs	r3, r3, #31
   30d60:	b2db      	uxtb	r3, r3
   30d62:	001a      	movs	r2, r3
   30d64:	687b      	ldr	r3, [r7, #4]
   30d66:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30d68:	69bb      	ldr	r3, [r7, #24]
   30d6a:	2214      	movs	r2, #20
   30d6c:	18ba      	adds	r2, r7, r2
   30d6e:	0011      	movs	r1, r2
   30d70:	0018      	movs	r0, r3
   30d72:	4b1c      	ldr	r3, [pc, #112]	; (30de4 <MQTTDeserialize_publish+0xf8>)
   30d74:	4798      	blx	r3
   30d76:	0003      	movs	r3, r0
   30d78:	627b      	str	r3, [r7, #36]	; 0x24
   30d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30d7c:	69bb      	ldr	r3, [r7, #24]
   30d7e:	189b      	adds	r3, r3, r2
   30d80:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30d82:	69bb      	ldr	r3, [r7, #24]
   30d84:	697a      	ldr	r2, [r7, #20]
   30d86:	189b      	adds	r3, r3, r2
   30d88:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30d8a:	6a3a      	ldr	r2, [r7, #32]
   30d8c:	2318      	movs	r3, #24
   30d8e:	18f9      	adds	r1, r7, r3
   30d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30d92:	0018      	movs	r0, r3
   30d94:	4b14      	ldr	r3, [pc, #80]	; (30de8 <MQTTDeserialize_publish+0xfc>)
   30d96:	4798      	blx	r3
   30d98:	1e03      	subs	r3, r0, #0
   30d9a:	d01c      	beq.n	30dd6 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30d9c:	6a3b      	ldr	r3, [r7, #32]
   30d9e:	69ba      	ldr	r2, [r7, #24]
   30da0:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30da2:	d418      	bmi.n	30dd6 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30da4:	68bb      	ldr	r3, [r7, #8]
   30da6:	681b      	ldr	r3, [r3, #0]
   30da8:	2b00      	cmp	r3, #0
   30daa:	dd08      	ble.n	30dbe <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30dac:	2318      	movs	r3, #24
   30dae:	18fb      	adds	r3, r7, r3
   30db0:	0018      	movs	r0, r3
   30db2:	4b0e      	ldr	r3, [pc, #56]	; (30dec <MQTTDeserialize_publish+0x100>)
   30db4:	4798      	blx	r3
   30db6:	0003      	movs	r3, r0
   30db8:	b29a      	uxth	r2, r3
   30dba:	683b      	ldr	r3, [r7, #0]
   30dbc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30dbe:	6a3b      	ldr	r3, [r7, #32]
   30dc0:	69ba      	ldr	r2, [r7, #24]
   30dc2:	1a9a      	subs	r2, r3, r2
   30dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30dc6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   30dc8:	69ba      	ldr	r2, [r7, #24]
   30dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30dcc:	601a      	str	r2, [r3, #0]
	rc = 1;
   30dce:	2301      	movs	r3, #1
   30dd0:	627b      	str	r3, [r7, #36]	; 0x24
   30dd2:	e000      	b.n	30dd6 <MQTTDeserialize_publish+0xea>
		goto exit;
   30dd4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30dd8:	0018      	movs	r0, r3
   30dda:	46bd      	mov	sp, r7
   30ddc:	b00a      	add	sp, #40	; 0x28
   30dde:	bd80      	pop	{r7, pc}
   30de0:	00031093 	.word	0x00031093
   30de4:	0003102d 	.word	0x0003102d
   30de8:	00031211 	.word	0x00031211
   30dec:	00031061 	.word	0x00031061

00030df0 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30df0:	b580      	push	{r7, lr}
   30df2:	b08a      	sub	sp, #40	; 0x28
   30df4:	af00      	add	r7, sp, #0
   30df6:	60f8      	str	r0, [r7, #12]
   30df8:	60b9      	str	r1, [r7, #8]
   30dfa:	607a      	str	r2, [r7, #4]
   30dfc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30dfe:	2300      	movs	r3, #0
   30e00:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30e02:	683b      	ldr	r3, [r7, #0]
   30e04:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30e06:	2300      	movs	r3, #0
   30e08:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30e0a:	2300      	movs	r3, #0
   30e0c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30e0e:	2318      	movs	r3, #24
   30e10:	18fb      	adds	r3, r7, r3
   30e12:	0018      	movs	r0, r3
   30e14:	4b20      	ldr	r3, [pc, #128]	; (30e98 <MQTTDeserialize_ack+0xa8>)
   30e16:	4798      	blx	r3
   30e18:	0003      	movs	r3, r0
   30e1a:	001a      	movs	r2, r3
   30e1c:	231c      	movs	r3, #28
   30e1e:	18fb      	adds	r3, r7, r3
   30e20:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30e22:	231c      	movs	r3, #28
   30e24:	18fb      	adds	r3, r7, r3
   30e26:	781b      	ldrb	r3, [r3, #0]
   30e28:	071b      	lsls	r3, r3, #28
   30e2a:	0fdb      	lsrs	r3, r3, #31
   30e2c:	b2db      	uxtb	r3, r3
   30e2e:	001a      	movs	r2, r3
   30e30:	68bb      	ldr	r3, [r7, #8]
   30e32:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30e34:	231c      	movs	r3, #28
   30e36:	18fb      	adds	r3, r7, r3
   30e38:	781b      	ldrb	r3, [r3, #0]
   30e3a:	061b      	lsls	r3, r3, #24
   30e3c:	0f1b      	lsrs	r3, r3, #28
   30e3e:	b2db      	uxtb	r3, r3
   30e40:	001a      	movs	r2, r3
   30e42:	68fb      	ldr	r3, [r7, #12]
   30e44:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30e46:	69bb      	ldr	r3, [r7, #24]
   30e48:	2214      	movs	r2, #20
   30e4a:	18ba      	adds	r2, r7, r2
   30e4c:	0011      	movs	r1, r2
   30e4e:	0018      	movs	r0, r3
   30e50:	4b12      	ldr	r3, [pc, #72]	; (30e9c <MQTTDeserialize_ack+0xac>)
   30e52:	4798      	blx	r3
   30e54:	0003      	movs	r3, r0
   30e56:	627b      	str	r3, [r7, #36]	; 0x24
   30e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30e5a:	69bb      	ldr	r3, [r7, #24]
   30e5c:	189b      	adds	r3, r3, r2
   30e5e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30e60:	69bb      	ldr	r3, [r7, #24]
   30e62:	697a      	ldr	r2, [r7, #20]
   30e64:	189b      	adds	r3, r3, r2
   30e66:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30e68:	6a3b      	ldr	r3, [r7, #32]
   30e6a:	69ba      	ldr	r2, [r7, #24]
   30e6c:	1a9b      	subs	r3, r3, r2
   30e6e:	2b01      	cmp	r3, #1
   30e70:	dd0b      	ble.n	30e8a <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30e72:	2318      	movs	r3, #24
   30e74:	18fb      	adds	r3, r7, r3
   30e76:	0018      	movs	r0, r3
   30e78:	4b09      	ldr	r3, [pc, #36]	; (30ea0 <MQTTDeserialize_ack+0xb0>)
   30e7a:	4798      	blx	r3
   30e7c:	0003      	movs	r3, r0
   30e7e:	b29a      	uxth	r2, r3
   30e80:	687b      	ldr	r3, [r7, #4]
   30e82:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30e84:	2301      	movs	r3, #1
   30e86:	627b      	str	r3, [r7, #36]	; 0x24
   30e88:	e000      	b.n	30e8c <MQTTDeserialize_ack+0x9c>
		goto exit;
   30e8a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30e8e:	0018      	movs	r0, r3
   30e90:	46bd      	mov	sp, r7
   30e92:	b00a      	add	sp, #40	; 0x28
   30e94:	bd80      	pop	{r7, pc}
   30e96:	46c0      	nop			; (mov r8, r8)
   30e98:	00031093 	.word	0x00031093
   30e9c:	0003102d 	.word	0x0003102d
   30ea0:	00031061 	.word	0x00031061

00030ea4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30ea4:	b580      	push	{r7, lr}
   30ea6:	b084      	sub	sp, #16
   30ea8:	af00      	add	r7, sp, #0
   30eaa:	6078      	str	r0, [r7, #4]
   30eac:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30eae:	2300      	movs	r3, #0
   30eb0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30eb2:	683b      	ldr	r3, [r7, #0]
   30eb4:	4a17      	ldr	r2, [pc, #92]	; (30f14 <MQTTPacket_encode+0x70>)
   30eb6:	4013      	ands	r3, r2
   30eb8:	d504      	bpl.n	30ec4 <MQTTPacket_encode+0x20>
   30eba:	3b01      	subs	r3, #1
   30ebc:	2280      	movs	r2, #128	; 0x80
   30ebe:	4252      	negs	r2, r2
   30ec0:	4313      	orrs	r3, r2
   30ec2:	3301      	adds	r3, #1
   30ec4:	001a      	movs	r2, r3
   30ec6:	230b      	movs	r3, #11
   30ec8:	18fb      	adds	r3, r7, r3
   30eca:	701a      	strb	r2, [r3, #0]
		length /= 128;
   30ecc:	683b      	ldr	r3, [r7, #0]
   30ece:	2b00      	cmp	r3, #0
   30ed0:	da00      	bge.n	30ed4 <MQTTPacket_encode+0x30>
   30ed2:	337f      	adds	r3, #127	; 0x7f
   30ed4:	11db      	asrs	r3, r3, #7
   30ed6:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   30ed8:	683b      	ldr	r3, [r7, #0]
   30eda:	2b00      	cmp	r3, #0
   30edc:	dd08      	ble.n	30ef0 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   30ede:	230b      	movs	r3, #11
   30ee0:	18fb      	adds	r3, r7, r3
   30ee2:	220b      	movs	r2, #11
   30ee4:	18ba      	adds	r2, r7, r2
   30ee6:	7812      	ldrb	r2, [r2, #0]
   30ee8:	2180      	movs	r1, #128	; 0x80
   30eea:	4249      	negs	r1, r1
   30eec:	430a      	orrs	r2, r1
   30eee:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30ef0:	68fb      	ldr	r3, [r7, #12]
   30ef2:	1c5a      	adds	r2, r3, #1
   30ef4:	60fa      	str	r2, [r7, #12]
   30ef6:	001a      	movs	r2, r3
   30ef8:	687b      	ldr	r3, [r7, #4]
   30efa:	189b      	adds	r3, r3, r2
   30efc:	220b      	movs	r2, #11
   30efe:	18ba      	adds	r2, r7, r2
   30f00:	7812      	ldrb	r2, [r2, #0]
   30f02:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30f04:	683b      	ldr	r3, [r7, #0]
   30f06:	2b00      	cmp	r3, #0
   30f08:	dcd3      	bgt.n	30eb2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   30f0a:	68fb      	ldr	r3, [r7, #12]
}
   30f0c:	0018      	movs	r0, r3
   30f0e:	46bd      	mov	sp, r7
   30f10:	b004      	add	sp, #16
   30f12:	bd80      	pop	{r7, pc}
   30f14:	8000007f 	.word	0x8000007f

00030f18 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   30f18:	b580      	push	{r7, lr}
   30f1a:	b086      	sub	sp, #24
   30f1c:	af00      	add	r7, sp, #0
   30f1e:	6078      	str	r0, [r7, #4]
   30f20:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30f22:	2301      	movs	r3, #1
   30f24:	617b      	str	r3, [r7, #20]
	int len = 0;
   30f26:	2300      	movs	r3, #0
   30f28:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30f2a:	683b      	ldr	r3, [r7, #0]
   30f2c:	2200      	movs	r2, #0
   30f2e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30f30:	2301      	movs	r3, #1
   30f32:	425b      	negs	r3, r3
   30f34:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30f36:	693b      	ldr	r3, [r7, #16]
   30f38:	3301      	adds	r3, #1
   30f3a:	613b      	str	r3, [r7, #16]
   30f3c:	693b      	ldr	r3, [r7, #16]
   30f3e:	2b04      	cmp	r3, #4
   30f40:	dd03      	ble.n	30f4a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30f42:	2301      	movs	r3, #1
   30f44:	425b      	negs	r3, r3
   30f46:	60fb      	str	r3, [r7, #12]
			goto exit;
   30f48:	e022      	b.n	30f90 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30f4a:	230b      	movs	r3, #11
   30f4c:	18fa      	adds	r2, r7, r3
   30f4e:	687b      	ldr	r3, [r7, #4]
   30f50:	2101      	movs	r1, #1
   30f52:	0010      	movs	r0, r2
   30f54:	4798      	blx	r3
   30f56:	0003      	movs	r3, r0
   30f58:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   30f5a:	68fb      	ldr	r3, [r7, #12]
   30f5c:	2b01      	cmp	r3, #1
   30f5e:	d116      	bne.n	30f8e <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30f60:	683b      	ldr	r3, [r7, #0]
   30f62:	681a      	ldr	r2, [r3, #0]
   30f64:	230b      	movs	r3, #11
   30f66:	18fb      	adds	r3, r7, r3
   30f68:	781b      	ldrb	r3, [r3, #0]
   30f6a:	0019      	movs	r1, r3
   30f6c:	237f      	movs	r3, #127	; 0x7f
   30f6e:	400b      	ands	r3, r1
   30f70:	6979      	ldr	r1, [r7, #20]
   30f72:	434b      	muls	r3, r1
   30f74:	18d2      	adds	r2, r2, r3
   30f76:	683b      	ldr	r3, [r7, #0]
   30f78:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   30f7a:	697b      	ldr	r3, [r7, #20]
   30f7c:	01db      	lsls	r3, r3, #7
   30f7e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30f80:	230b      	movs	r3, #11
   30f82:	18fb      	adds	r3, r7, r3
   30f84:	781b      	ldrb	r3, [r3, #0]
   30f86:	b25b      	sxtb	r3, r3
   30f88:	2b00      	cmp	r3, #0
   30f8a:	dbd1      	blt.n	30f30 <MQTTPacket_decode+0x18>
   30f8c:	e000      	b.n	30f90 <MQTTPacket_decode+0x78>
			goto exit;
   30f8e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30f90:	693b      	ldr	r3, [r7, #16]
}
   30f92:	0018      	movs	r0, r3
   30f94:	46bd      	mov	sp, r7
   30f96:	b006      	add	sp, #24
   30f98:	bd80      	pop	{r7, pc}
	...

00030f9c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30f9c:	b580      	push	{r7, lr}
   30f9e:	b082      	sub	sp, #8
   30fa0:	af00      	add	r7, sp, #0
   30fa2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30fa4:	687b      	ldr	r3, [r7, #4]
   30fa6:	3301      	adds	r3, #1
   30fa8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   30faa:	687b      	ldr	r3, [r7, #4]
   30fac:	2b7f      	cmp	r3, #127	; 0x7f
   30fae:	dc03      	bgt.n	30fb8 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30fb0:	687b      	ldr	r3, [r7, #4]
   30fb2:	3301      	adds	r3, #1
   30fb4:	607b      	str	r3, [r7, #4]
   30fb6:	e012      	b.n	30fde <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30fb8:	687b      	ldr	r3, [r7, #4]
   30fba:	4a0b      	ldr	r2, [pc, #44]	; (30fe8 <MQTTPacket_len+0x4c>)
   30fbc:	4293      	cmp	r3, r2
   30fbe:	dc03      	bgt.n	30fc8 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30fc0:	687b      	ldr	r3, [r7, #4]
   30fc2:	3302      	adds	r3, #2
   30fc4:	607b      	str	r3, [r7, #4]
   30fc6:	e00a      	b.n	30fde <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   30fc8:	687b      	ldr	r3, [r7, #4]
   30fca:	4a08      	ldr	r2, [pc, #32]	; (30fec <MQTTPacket_len+0x50>)
   30fcc:	4293      	cmp	r3, r2
   30fce:	dc03      	bgt.n	30fd8 <MQTTPacket_len+0x3c>
		rem_len += 3;
   30fd0:	687b      	ldr	r3, [r7, #4]
   30fd2:	3303      	adds	r3, #3
   30fd4:	607b      	str	r3, [r7, #4]
   30fd6:	e002      	b.n	30fde <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   30fd8:	687b      	ldr	r3, [r7, #4]
   30fda:	3304      	adds	r3, #4
   30fdc:	607b      	str	r3, [r7, #4]
	return rem_len;
   30fde:	687b      	ldr	r3, [r7, #4]
}
   30fe0:	0018      	movs	r0, r3
   30fe2:	46bd      	mov	sp, r7
   30fe4:	b002      	add	sp, #8
   30fe6:	bd80      	pop	{r7, pc}
   30fe8:	00003fff 	.word	0x00003fff
   30fec:	001ffffe 	.word	0x001ffffe

00030ff0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   30ff0:	b580      	push	{r7, lr}
   30ff2:	b084      	sub	sp, #16
   30ff4:	af00      	add	r7, sp, #0
   30ff6:	6078      	str	r0, [r7, #4]
   30ff8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   30ffa:	2300      	movs	r3, #0
   30ffc:	60fb      	str	r3, [r7, #12]
   30ffe:	e00a      	b.n	31016 <bufchar+0x26>
		*c = *bufptr++;
   31000:	4b09      	ldr	r3, [pc, #36]	; (31028 <bufchar+0x38>)
   31002:	681b      	ldr	r3, [r3, #0]
   31004:	1c59      	adds	r1, r3, #1
   31006:	4a08      	ldr	r2, [pc, #32]	; (31028 <bufchar+0x38>)
   31008:	6011      	str	r1, [r2, #0]
   3100a:	781a      	ldrb	r2, [r3, #0]
   3100c:	687b      	ldr	r3, [r7, #4]
   3100e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   31010:	68fb      	ldr	r3, [r7, #12]
   31012:	3301      	adds	r3, #1
   31014:	60fb      	str	r3, [r7, #12]
   31016:	68fa      	ldr	r2, [r7, #12]
   31018:	683b      	ldr	r3, [r7, #0]
   3101a:	429a      	cmp	r2, r3
   3101c:	dbf0      	blt.n	31000 <bufchar+0x10>
	return count;
   3101e:	683b      	ldr	r3, [r7, #0]
}
   31020:	0018      	movs	r0, r3
   31022:	46bd      	mov	sp, r7
   31024:	b004      	add	sp, #16
   31026:	bd80      	pop	{r7, pc}
   31028:	200046f0 	.word	0x200046f0

0003102c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   3102c:	b580      	push	{r7, lr}
   3102e:	b082      	sub	sp, #8
   31030:	af00      	add	r7, sp, #0
   31032:	6078      	str	r0, [r7, #4]
   31034:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   31036:	4b07      	ldr	r3, [pc, #28]	; (31054 <MQTTPacket_decodeBuf+0x28>)
   31038:	687a      	ldr	r2, [r7, #4]
   3103a:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   3103c:	683a      	ldr	r2, [r7, #0]
   3103e:	4b06      	ldr	r3, [pc, #24]	; (31058 <MQTTPacket_decodeBuf+0x2c>)
   31040:	0011      	movs	r1, r2
   31042:	0018      	movs	r0, r3
   31044:	4b05      	ldr	r3, [pc, #20]	; (3105c <MQTTPacket_decodeBuf+0x30>)
   31046:	4798      	blx	r3
   31048:	0003      	movs	r3, r0
}
   3104a:	0018      	movs	r0, r3
   3104c:	46bd      	mov	sp, r7
   3104e:	b002      	add	sp, #8
   31050:	bd80      	pop	{r7, pc}
   31052:	46c0      	nop			; (mov r8, r8)
   31054:	200046f0 	.word	0x200046f0
   31058:	00030ff1 	.word	0x00030ff1
   3105c:	00030f19 	.word	0x00030f19

00031060 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   31060:	b580      	push	{r7, lr}
   31062:	b084      	sub	sp, #16
   31064:	af00      	add	r7, sp, #0
   31066:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   31068:	687b      	ldr	r3, [r7, #4]
   3106a:	681b      	ldr	r3, [r3, #0]
   3106c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   3106e:	68fb      	ldr	r3, [r7, #12]
   31070:	781b      	ldrb	r3, [r3, #0]
   31072:	021b      	lsls	r3, r3, #8
   31074:	68fa      	ldr	r2, [r7, #12]
   31076:	3201      	adds	r2, #1
   31078:	7812      	ldrb	r2, [r2, #0]
   3107a:	189b      	adds	r3, r3, r2
   3107c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   3107e:	687b      	ldr	r3, [r7, #4]
   31080:	681b      	ldr	r3, [r3, #0]
   31082:	1c9a      	adds	r2, r3, #2
   31084:	687b      	ldr	r3, [r7, #4]
   31086:	601a      	str	r2, [r3, #0]
	return len;
   31088:	68bb      	ldr	r3, [r7, #8]
}
   3108a:	0018      	movs	r0, r3
   3108c:	46bd      	mov	sp, r7
   3108e:	b004      	add	sp, #16
   31090:	bd80      	pop	{r7, pc}

00031092 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   31092:	b580      	push	{r7, lr}
   31094:	b084      	sub	sp, #16
   31096:	af00      	add	r7, sp, #0
   31098:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3109a:	687b      	ldr	r3, [r7, #4]
   3109c:	681a      	ldr	r2, [r3, #0]
   3109e:	230f      	movs	r3, #15
   310a0:	18fb      	adds	r3, r7, r3
   310a2:	7812      	ldrb	r2, [r2, #0]
   310a4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   310a6:	687b      	ldr	r3, [r7, #4]
   310a8:	681b      	ldr	r3, [r3, #0]
   310aa:	1c5a      	adds	r2, r3, #1
   310ac:	687b      	ldr	r3, [r7, #4]
   310ae:	601a      	str	r2, [r3, #0]
	return c;
   310b0:	230f      	movs	r3, #15
   310b2:	18fb      	adds	r3, r7, r3
   310b4:	781b      	ldrb	r3, [r3, #0]
}
   310b6:	0018      	movs	r0, r3
   310b8:	46bd      	mov	sp, r7
   310ba:	b004      	add	sp, #16
   310bc:	bd80      	pop	{r7, pc}

000310be <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   310be:	b580      	push	{r7, lr}
   310c0:	b082      	sub	sp, #8
   310c2:	af00      	add	r7, sp, #0
   310c4:	6078      	str	r0, [r7, #4]
   310c6:	000a      	movs	r2, r1
   310c8:	1cfb      	adds	r3, r7, #3
   310ca:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   310cc:	687b      	ldr	r3, [r7, #4]
   310ce:	681b      	ldr	r3, [r3, #0]
   310d0:	1cfa      	adds	r2, r7, #3
   310d2:	7812      	ldrb	r2, [r2, #0]
   310d4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   310d6:	687b      	ldr	r3, [r7, #4]
   310d8:	681b      	ldr	r3, [r3, #0]
   310da:	1c5a      	adds	r2, r3, #1
   310dc:	687b      	ldr	r3, [r7, #4]
   310de:	601a      	str	r2, [r3, #0]
}
   310e0:	46c0      	nop			; (mov r8, r8)
   310e2:	46bd      	mov	sp, r7
   310e4:	b002      	add	sp, #8
   310e6:	bd80      	pop	{r7, pc}

000310e8 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   310e8:	b580      	push	{r7, lr}
   310ea:	b082      	sub	sp, #8
   310ec:	af00      	add	r7, sp, #0
   310ee:	6078      	str	r0, [r7, #4]
   310f0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   310f2:	687b      	ldr	r3, [r7, #4]
   310f4:	681a      	ldr	r2, [r3, #0]
   310f6:	683b      	ldr	r3, [r7, #0]
   310f8:	2b00      	cmp	r3, #0
   310fa:	da00      	bge.n	310fe <writeInt+0x16>
   310fc:	33ff      	adds	r3, #255	; 0xff
   310fe:	121b      	asrs	r3, r3, #8
   31100:	b2db      	uxtb	r3, r3
   31102:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   31104:	687b      	ldr	r3, [r7, #4]
   31106:	681b      	ldr	r3, [r3, #0]
   31108:	1c5a      	adds	r2, r3, #1
   3110a:	687b      	ldr	r3, [r7, #4]
   3110c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   3110e:	687b      	ldr	r3, [r7, #4]
   31110:	681a      	ldr	r2, [r3, #0]
   31112:	683b      	ldr	r3, [r7, #0]
   31114:	4908      	ldr	r1, [pc, #32]	; (31138 <writeInt+0x50>)
   31116:	400b      	ands	r3, r1
   31118:	d503      	bpl.n	31122 <writeInt+0x3a>
   3111a:	3b01      	subs	r3, #1
   3111c:	4907      	ldr	r1, [pc, #28]	; (3113c <writeInt+0x54>)
   3111e:	430b      	orrs	r3, r1
   31120:	3301      	adds	r3, #1
   31122:	b2db      	uxtb	r3, r3
   31124:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   31126:	687b      	ldr	r3, [r7, #4]
   31128:	681b      	ldr	r3, [r3, #0]
   3112a:	1c5a      	adds	r2, r3, #1
   3112c:	687b      	ldr	r3, [r7, #4]
   3112e:	601a      	str	r2, [r3, #0]
}
   31130:	46c0      	nop			; (mov r8, r8)
   31132:	46bd      	mov	sp, r7
   31134:	b002      	add	sp, #8
   31136:	bd80      	pop	{r7, pc}
   31138:	800000ff 	.word	0x800000ff
   3113c:	ffffff00 	.word	0xffffff00

00031140 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   31140:	b580      	push	{r7, lr}
   31142:	b084      	sub	sp, #16
   31144:	af00      	add	r7, sp, #0
   31146:	6078      	str	r0, [r7, #4]
   31148:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   3114a:	683b      	ldr	r3, [r7, #0]
   3114c:	0018      	movs	r0, r3
   3114e:	4b0d      	ldr	r3, [pc, #52]	; (31184 <writeCString+0x44>)
   31150:	4798      	blx	r3
   31152:	0003      	movs	r3, r0
   31154:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   31156:	68fa      	ldr	r2, [r7, #12]
   31158:	687b      	ldr	r3, [r7, #4]
   3115a:	0011      	movs	r1, r2
   3115c:	0018      	movs	r0, r3
   3115e:	4b0a      	ldr	r3, [pc, #40]	; (31188 <writeCString+0x48>)
   31160:	4798      	blx	r3
	memcpy(*pptr, string, len);
   31162:	687b      	ldr	r3, [r7, #4]
   31164:	681b      	ldr	r3, [r3, #0]
   31166:	68fa      	ldr	r2, [r7, #12]
   31168:	6839      	ldr	r1, [r7, #0]
   3116a:	0018      	movs	r0, r3
   3116c:	4b07      	ldr	r3, [pc, #28]	; (3118c <writeCString+0x4c>)
   3116e:	4798      	blx	r3
	*pptr += len;
   31170:	687b      	ldr	r3, [r7, #4]
   31172:	681a      	ldr	r2, [r3, #0]
   31174:	68fb      	ldr	r3, [r7, #12]
   31176:	18d2      	adds	r2, r2, r3
   31178:	687b      	ldr	r3, [r7, #4]
   3117a:	601a      	str	r2, [r3, #0]
}
   3117c:	46c0      	nop			; (mov r8, r8)
   3117e:	46bd      	mov	sp, r7
   31180:	b004      	add	sp, #16
   31182:	bd80      	pop	{r7, pc}
   31184:	00035b37 	.word	0x00035b37
   31188:	000310e9 	.word	0x000310e9
   3118c:	00035749 	.word	0x00035749

00031190 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   31190:	b580      	push	{r7, lr}
   31192:	b084      	sub	sp, #16
   31194:	af00      	add	r7, sp, #0
   31196:	60f8      	str	r0, [r7, #12]
   31198:	0038      	movs	r0, r7
   3119a:	6001      	str	r1, [r0, #0]
   3119c:	6042      	str	r2, [r0, #4]
   3119e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   311a0:	003b      	movs	r3, r7
   311a2:	685b      	ldr	r3, [r3, #4]
   311a4:	2b00      	cmp	r3, #0
   311a6:	dd17      	ble.n	311d8 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   311a8:	003b      	movs	r3, r7
   311aa:	685a      	ldr	r2, [r3, #4]
   311ac:	68fb      	ldr	r3, [r7, #12]
   311ae:	0011      	movs	r1, r2
   311b0:	0018      	movs	r0, r3
   311b2:	4b14      	ldr	r3, [pc, #80]	; (31204 <writeMQTTString+0x74>)
   311b4:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   311b6:	68fb      	ldr	r3, [r7, #12]
   311b8:	6818      	ldr	r0, [r3, #0]
   311ba:	003b      	movs	r3, r7
   311bc:	6899      	ldr	r1, [r3, #8]
   311be:	003b      	movs	r3, r7
   311c0:	685b      	ldr	r3, [r3, #4]
   311c2:	001a      	movs	r2, r3
   311c4:	4b10      	ldr	r3, [pc, #64]	; (31208 <writeMQTTString+0x78>)
   311c6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   311c8:	68fb      	ldr	r3, [r7, #12]
   311ca:	681a      	ldr	r2, [r3, #0]
   311cc:	003b      	movs	r3, r7
   311ce:	685b      	ldr	r3, [r3, #4]
   311d0:	18d2      	adds	r2, r2, r3
   311d2:	68fb      	ldr	r3, [r7, #12]
   311d4:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   311d6:	e010      	b.n	311fa <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   311d8:	003b      	movs	r3, r7
   311da:	681b      	ldr	r3, [r3, #0]
   311dc:	2b00      	cmp	r3, #0
   311de:	d007      	beq.n	311f0 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   311e0:	003b      	movs	r3, r7
   311e2:	681a      	ldr	r2, [r3, #0]
   311e4:	68fb      	ldr	r3, [r7, #12]
   311e6:	0011      	movs	r1, r2
   311e8:	0018      	movs	r0, r3
   311ea:	4b08      	ldr	r3, [pc, #32]	; (3120c <writeMQTTString+0x7c>)
   311ec:	4798      	blx	r3
}
   311ee:	e004      	b.n	311fa <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   311f0:	68fb      	ldr	r3, [r7, #12]
   311f2:	2100      	movs	r1, #0
   311f4:	0018      	movs	r0, r3
   311f6:	4b03      	ldr	r3, [pc, #12]	; (31204 <writeMQTTString+0x74>)
   311f8:	4798      	blx	r3
}
   311fa:	46c0      	nop			; (mov r8, r8)
   311fc:	46bd      	mov	sp, r7
   311fe:	b004      	add	sp, #16
   31200:	bd80      	pop	{r7, pc}
   31202:	46c0      	nop			; (mov r8, r8)
   31204:	000310e9 	.word	0x000310e9
   31208:	00035749 	.word	0x00035749
   3120c:	00031141 	.word	0x00031141

00031210 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   31210:	b580      	push	{r7, lr}
   31212:	b086      	sub	sp, #24
   31214:	af00      	add	r7, sp, #0
   31216:	60f8      	str	r0, [r7, #12]
   31218:	60b9      	str	r1, [r7, #8]
   3121a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   3121c:	2300      	movs	r3, #0
   3121e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   31220:	687a      	ldr	r2, [r7, #4]
   31222:	68bb      	ldr	r3, [r7, #8]
   31224:	681b      	ldr	r3, [r3, #0]
   31226:	1ad3      	subs	r3, r2, r3
   31228:	2b01      	cmp	r3, #1
   3122a:	dd1b      	ble.n	31264 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   3122c:	68bb      	ldr	r3, [r7, #8]
   3122e:	0018      	movs	r0, r3
   31230:	4b10      	ldr	r3, [pc, #64]	; (31274 <readMQTTLenString+0x64>)
   31232:	4798      	blx	r3
   31234:	0002      	movs	r2, r0
   31236:	68fb      	ldr	r3, [r7, #12]
   31238:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   3123a:	68bb      	ldr	r3, [r7, #8]
   3123c:	681a      	ldr	r2, [r3, #0]
   3123e:	68fb      	ldr	r3, [r7, #12]
   31240:	685b      	ldr	r3, [r3, #4]
   31242:	18d2      	adds	r2, r2, r3
   31244:	687b      	ldr	r3, [r7, #4]
   31246:	429a      	cmp	r2, r3
   31248:	d80c      	bhi.n	31264 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   3124a:	68bb      	ldr	r3, [r7, #8]
   3124c:	681a      	ldr	r2, [r3, #0]
   3124e:	68fb      	ldr	r3, [r7, #12]
   31250:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   31252:	68bb      	ldr	r3, [r7, #8]
   31254:	681a      	ldr	r2, [r3, #0]
   31256:	68fb      	ldr	r3, [r7, #12]
   31258:	685b      	ldr	r3, [r3, #4]
   3125a:	18d2      	adds	r2, r2, r3
   3125c:	68bb      	ldr	r3, [r7, #8]
   3125e:	601a      	str	r2, [r3, #0]
			rc = 1;
   31260:	2301      	movs	r3, #1
   31262:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   31264:	68fb      	ldr	r3, [r7, #12]
   31266:	2200      	movs	r2, #0
   31268:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   3126a:	697b      	ldr	r3, [r7, #20]
}
   3126c:	0018      	movs	r0, r3
   3126e:	46bd      	mov	sp, r7
   31270:	b006      	add	sp, #24
   31272:	bd80      	pop	{r7, pc}
   31274:	00031061 	.word	0x00031061

00031278 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   31278:	b580      	push	{r7, lr}
   3127a:	b086      	sub	sp, #24
   3127c:	af00      	add	r7, sp, #0
   3127e:	1d3b      	adds	r3, r7, #4
   31280:	6018      	str	r0, [r3, #0]
   31282:	6059      	str	r1, [r3, #4]
   31284:	609a      	str	r2, [r3, #8]
	int rc = 0;
   31286:	2300      	movs	r3, #0
   31288:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   3128a:	1d3b      	adds	r3, r7, #4
   3128c:	681b      	ldr	r3, [r3, #0]
   3128e:	2b00      	cmp	r3, #0
   31290:	d007      	beq.n	312a2 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   31292:	1d3b      	adds	r3, r7, #4
   31294:	681b      	ldr	r3, [r3, #0]
   31296:	0018      	movs	r0, r3
   31298:	4b06      	ldr	r3, [pc, #24]	; (312b4 <MQTTstrlen+0x3c>)
   3129a:	4798      	blx	r3
   3129c:	0003      	movs	r3, r0
   3129e:	617b      	str	r3, [r7, #20]
   312a0:	e002      	b.n	312a8 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   312a2:	1d3b      	adds	r3, r7, #4
   312a4:	685b      	ldr	r3, [r3, #4]
   312a6:	617b      	str	r3, [r7, #20]
	return rc;
   312a8:	697b      	ldr	r3, [r7, #20]
}
   312aa:	0018      	movs	r0, r3
   312ac:	46bd      	mov	sp, r7
   312ae:	b006      	add	sp, #24
   312b0:	bd80      	pop	{r7, pc}
   312b2:	46c0      	nop			; (mov r8, r8)
   312b4:	00035b37 	.word	0x00035b37

000312b8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   312b8:	b580      	push	{r7, lr}
   312ba:	b086      	sub	sp, #24
   312bc:	af00      	add	r7, sp, #0
   312be:	6078      	str	r0, [r7, #4]
   312c0:	6039      	str	r1, [r7, #0]
	int alen = 0,
   312c2:	2300      	movs	r3, #0
   312c4:	617b      	str	r3, [r7, #20]
		blen = 0;
   312c6:	2300      	movs	r3, #0
   312c8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   312ca:	687b      	ldr	r3, [r7, #4]
   312cc:	681b      	ldr	r3, [r3, #0]
   312ce:	2b00      	cmp	r3, #0
   312d0:	d00a      	beq.n	312e8 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   312d2:	687b      	ldr	r3, [r7, #4]
   312d4:	681b      	ldr	r3, [r3, #0]
   312d6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   312d8:	687b      	ldr	r3, [r7, #4]
   312da:	681b      	ldr	r3, [r3, #0]
   312dc:	0018      	movs	r0, r3
   312de:	4b12      	ldr	r3, [pc, #72]	; (31328 <MQTTPacket_equals+0x70>)
   312e0:	4798      	blx	r3
   312e2:	0003      	movs	r3, r0
   312e4:	617b      	str	r3, [r7, #20]
   312e6:	e005      	b.n	312f4 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   312e8:	687b      	ldr	r3, [r7, #4]
   312ea:	689b      	ldr	r3, [r3, #8]
   312ec:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   312ee:	687b      	ldr	r3, [r7, #4]
   312f0:	685b      	ldr	r3, [r3, #4]
   312f2:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   312f4:	683b      	ldr	r3, [r7, #0]
   312f6:	0018      	movs	r0, r3
   312f8:	4b0b      	ldr	r3, [pc, #44]	; (31328 <MQTTPacket_equals+0x70>)
   312fa:	4798      	blx	r3
   312fc:	0003      	movs	r3, r0
   312fe:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   31300:	697a      	ldr	r2, [r7, #20]
   31302:	68fb      	ldr	r3, [r7, #12]
   31304:	429a      	cmp	r2, r3
   31306:	d109      	bne.n	3131c <MQTTPacket_equals+0x64>
   31308:	697a      	ldr	r2, [r7, #20]
   3130a:	6839      	ldr	r1, [r7, #0]
   3130c:	693b      	ldr	r3, [r7, #16]
   3130e:	0018      	movs	r0, r3
   31310:	4b06      	ldr	r3, [pc, #24]	; (3132c <MQTTPacket_equals+0x74>)
   31312:	4798      	blx	r3
   31314:	1e03      	subs	r3, r0, #0
   31316:	d101      	bne.n	3131c <MQTTPacket_equals+0x64>
   31318:	2301      	movs	r3, #1
   3131a:	e000      	b.n	3131e <MQTTPacket_equals+0x66>
   3131c:	2300      	movs	r3, #0
}
   3131e:	0018      	movs	r0, r3
   31320:	46bd      	mov	sp, r7
   31322:	b006      	add	sp, #24
   31324:	bd80      	pop	{r7, pc}
   31326:	46c0      	nop			; (mov r8, r8)
   31328:	00035b37 	.word	0x00035b37
   3132c:	00035b45 	.word	0x00035b45

00031330 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   31330:	b580      	push	{r7, lr}
   31332:	b086      	sub	sp, #24
   31334:	af00      	add	r7, sp, #0
   31336:	60f8      	str	r0, [r7, #12]
   31338:	0038      	movs	r0, r7
   3133a:	6001      	str	r1, [r0, #0]
   3133c:	6042      	str	r2, [r0, #4]
   3133e:	6083      	str	r3, [r0, #8]
	int len = 0;
   31340:	2300      	movs	r3, #0
   31342:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   31344:	003b      	movs	r3, r7
   31346:	6818      	ldr	r0, [r3, #0]
   31348:	6859      	ldr	r1, [r3, #4]
   3134a:	689a      	ldr	r2, [r3, #8]
   3134c:	4b09      	ldr	r3, [pc, #36]	; (31374 <MQTTSerialize_publishLength+0x44>)
   3134e:	4798      	blx	r3
   31350:	0003      	movs	r3, r0
   31352:	1c9a      	adds	r2, r3, #2
   31354:	6a3b      	ldr	r3, [r7, #32]
   31356:	18d3      	adds	r3, r2, r3
   31358:	697a      	ldr	r2, [r7, #20]
   3135a:	18d3      	adds	r3, r2, r3
   3135c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   3135e:	68fb      	ldr	r3, [r7, #12]
   31360:	2b00      	cmp	r3, #0
   31362:	dd02      	ble.n	3136a <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   31364:	697b      	ldr	r3, [r7, #20]
   31366:	3302      	adds	r3, #2
   31368:	617b      	str	r3, [r7, #20]
	return len;
   3136a:	697b      	ldr	r3, [r7, #20]
}
   3136c:	0018      	movs	r0, r3
   3136e:	46bd      	mov	sp, r7
   31370:	b006      	add	sp, #24
   31372:	bd80      	pop	{r7, pc}
   31374:	00031279 	.word	0x00031279

00031378 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   31378:	b590      	push	{r4, r7, lr}
   3137a:	b08b      	sub	sp, #44	; 0x2c
   3137c:	af02      	add	r7, sp, #8
   3137e:	60f8      	str	r0, [r7, #12]
   31380:	60b9      	str	r1, [r7, #8]
   31382:	603b      	str	r3, [r7, #0]
   31384:	1dfb      	adds	r3, r7, #7
   31386:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   31388:	68fb      	ldr	r3, [r7, #12]
   3138a:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   3138c:	2300      	movs	r3, #0
   3138e:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   31390:	2300      	movs	r3, #0
   31392:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   31394:	2300      	movs	r3, #0
   31396:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   31398:	2308      	movs	r3, #8
   3139a:	2230      	movs	r2, #48	; 0x30
   3139c:	4694      	mov	ip, r2
   3139e:	44bc      	add	ip, r7
   313a0:	4463      	add	r3, ip
   313a2:	6838      	ldr	r0, [r7, #0]
   313a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   313a6:	9200      	str	r2, [sp, #0]
   313a8:	6819      	ldr	r1, [r3, #0]
   313aa:	685a      	ldr	r2, [r3, #4]
   313ac:	689b      	ldr	r3, [r3, #8]
   313ae:	4c46      	ldr	r4, [pc, #280]	; (314c8 <MQTTSerialize_publish+0x150>)
   313b0:	47a0      	blx	r4
   313b2:	0003      	movs	r3, r0
   313b4:	61bb      	str	r3, [r7, #24]
   313b6:	69bb      	ldr	r3, [r7, #24]
   313b8:	0018      	movs	r0, r3
   313ba:	4b44      	ldr	r3, [pc, #272]	; (314cc <MQTTSerialize_publish+0x154>)
   313bc:	4798      	blx	r3
   313be:	0002      	movs	r2, r0
   313c0:	68bb      	ldr	r3, [r7, #8]
   313c2:	429a      	cmp	r2, r3
   313c4:	dd03      	ble.n	313ce <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   313c6:	2302      	movs	r3, #2
   313c8:	425b      	negs	r3, r3
   313ca:	61fb      	str	r3, [r7, #28]
		goto exit;
   313cc:	e077      	b.n	314be <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   313ce:	2310      	movs	r3, #16
   313d0:	18fb      	adds	r3, r7, r3
   313d2:	781a      	ldrb	r2, [r3, #0]
   313d4:	210f      	movs	r1, #15
   313d6:	400a      	ands	r2, r1
   313d8:	1c11      	adds	r1, r2, #0
   313da:	2230      	movs	r2, #48	; 0x30
   313dc:	430a      	orrs	r2, r1
   313de:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   313e0:	1dfb      	adds	r3, r7, #7
   313e2:	781b      	ldrb	r3, [r3, #0]
   313e4:	2201      	movs	r2, #1
   313e6:	4013      	ands	r3, r2
   313e8:	b2da      	uxtb	r2, r3
   313ea:	2310      	movs	r3, #16
   313ec:	18fb      	adds	r3, r7, r3
   313ee:	2101      	movs	r1, #1
   313f0:	400a      	ands	r2, r1
   313f2:	00d0      	lsls	r0, r2, #3
   313f4:	781a      	ldrb	r2, [r3, #0]
   313f6:	2108      	movs	r1, #8
   313f8:	438a      	bics	r2, r1
   313fa:	1c11      	adds	r1, r2, #0
   313fc:	1c02      	adds	r2, r0, #0
   313fe:	430a      	orrs	r2, r1
   31400:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   31402:	683b      	ldr	r3, [r7, #0]
   31404:	b2db      	uxtb	r3, r3
   31406:	1c1a      	adds	r2, r3, #0
   31408:	2303      	movs	r3, #3
   3140a:	4013      	ands	r3, r2
   3140c:	b2da      	uxtb	r2, r3
   3140e:	2310      	movs	r3, #16
   31410:	18fb      	adds	r3, r7, r3
   31412:	2103      	movs	r1, #3
   31414:	400a      	ands	r2, r1
   31416:	1890      	adds	r0, r2, r2
   31418:	781a      	ldrb	r2, [r3, #0]
   3141a:	2106      	movs	r1, #6
   3141c:	438a      	bics	r2, r1
   3141e:	1c11      	adds	r1, r2, #0
   31420:	1c02      	adds	r2, r0, #0
   31422:	430a      	orrs	r2, r1
   31424:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   31426:	2330      	movs	r3, #48	; 0x30
   31428:	18fb      	adds	r3, r7, r3
   3142a:	781b      	ldrb	r3, [r3, #0]
   3142c:	2201      	movs	r2, #1
   3142e:	4013      	ands	r3, r2
   31430:	b2da      	uxtb	r2, r3
   31432:	2310      	movs	r3, #16
   31434:	18fb      	adds	r3, r7, r3
   31436:	2101      	movs	r1, #1
   31438:	400a      	ands	r2, r1
   3143a:	0010      	movs	r0, r2
   3143c:	781a      	ldrb	r2, [r3, #0]
   3143e:	2101      	movs	r1, #1
   31440:	438a      	bics	r2, r1
   31442:	1c11      	adds	r1, r2, #0
   31444:	1c02      	adds	r2, r0, #0
   31446:	430a      	orrs	r2, r1
   31448:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3144a:	2310      	movs	r3, #16
   3144c:	18fb      	adds	r3, r7, r3
   3144e:	781a      	ldrb	r2, [r3, #0]
   31450:	2314      	movs	r3, #20
   31452:	18fb      	adds	r3, r7, r3
   31454:	0011      	movs	r1, r2
   31456:	0018      	movs	r0, r3
   31458:	4b1d      	ldr	r3, [pc, #116]	; (314d0 <MQTTSerialize_publish+0x158>)
   3145a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   3145c:	697b      	ldr	r3, [r7, #20]
   3145e:	69ba      	ldr	r2, [r7, #24]
   31460:	0011      	movs	r1, r2
   31462:	0018      	movs	r0, r3
   31464:	4b1b      	ldr	r3, [pc, #108]	; (314d4 <MQTTSerialize_publish+0x15c>)
   31466:	4798      	blx	r3
   31468:	0002      	movs	r2, r0
   3146a:	697b      	ldr	r3, [r7, #20]
   3146c:	189b      	adds	r3, r3, r2
   3146e:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   31470:	2308      	movs	r3, #8
   31472:	2230      	movs	r2, #48	; 0x30
   31474:	4694      	mov	ip, r2
   31476:	44bc      	add	ip, r7
   31478:	4463      	add	r3, ip
   3147a:	2214      	movs	r2, #20
   3147c:	18b8      	adds	r0, r7, r2
   3147e:	6819      	ldr	r1, [r3, #0]
   31480:	685a      	ldr	r2, [r3, #4]
   31482:	689b      	ldr	r3, [r3, #8]
   31484:	4c14      	ldr	r4, [pc, #80]	; (314d8 <MQTTSerialize_publish+0x160>)
   31486:	47a0      	blx	r4

	if (qos > 0)
   31488:	683b      	ldr	r3, [r7, #0]
   3148a:	2b00      	cmp	r3, #0
   3148c:	dd08      	ble.n	314a0 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   3148e:	2334      	movs	r3, #52	; 0x34
   31490:	18fb      	adds	r3, r7, r3
   31492:	881a      	ldrh	r2, [r3, #0]
   31494:	2314      	movs	r3, #20
   31496:	18fb      	adds	r3, r7, r3
   31498:	0011      	movs	r1, r2
   3149a:	0018      	movs	r0, r3
   3149c:	4b0f      	ldr	r3, [pc, #60]	; (314dc <MQTTSerialize_publish+0x164>)
   3149e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   314a0:	697b      	ldr	r3, [r7, #20]
   314a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
   314a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
   314a6:	0018      	movs	r0, r3
   314a8:	4b0d      	ldr	r3, [pc, #52]	; (314e0 <MQTTSerialize_publish+0x168>)
   314aa:	4798      	blx	r3
	ptr += payloadlen;
   314ac:	697a      	ldr	r2, [r7, #20]
   314ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   314b0:	18d3      	adds	r3, r2, r3
   314b2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   314b4:	697b      	ldr	r3, [r7, #20]
   314b6:	001a      	movs	r2, r3
   314b8:	68fb      	ldr	r3, [r7, #12]
   314ba:	1ad3      	subs	r3, r2, r3
   314bc:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   314be:	69fb      	ldr	r3, [r7, #28]
}
   314c0:	0018      	movs	r0, r3
   314c2:	46bd      	mov	sp, r7
   314c4:	b009      	add	sp, #36	; 0x24
   314c6:	bd90      	pop	{r4, r7, pc}
   314c8:	00031331 	.word	0x00031331
   314cc:	00030f9d 	.word	0x00030f9d
   314d0:	000310bf 	.word	0x000310bf
   314d4:	00030ea5 	.word	0x00030ea5
   314d8:	00031191 	.word	0x00031191
   314dc:	000310e9 	.word	0x000310e9
   314e0:	00035749 	.word	0x00035749

000314e4 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   314e4:	b580      	push	{r7, lr}
   314e6:	b088      	sub	sp, #32
   314e8:	af00      	add	r7, sp, #0
   314ea:	60f8      	str	r0, [r7, #12]
   314ec:	60b9      	str	r1, [r7, #8]
   314ee:	0019      	movs	r1, r3
   314f0:	1dfb      	adds	r3, r7, #7
   314f2:	701a      	strb	r2, [r3, #0]
   314f4:	1dbb      	adds	r3, r7, #6
   314f6:	1c0a      	adds	r2, r1, #0
   314f8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   314fa:	2300      	movs	r3, #0
   314fc:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   314fe:	2300      	movs	r3, #0
   31500:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   31502:	68fb      	ldr	r3, [r7, #12]
   31504:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   31506:	68bb      	ldr	r3, [r7, #8]
   31508:	2b03      	cmp	r3, #3
   3150a:	dc03      	bgt.n	31514 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3150c:	2302      	movs	r3, #2
   3150e:	425b      	negs	r3, r3
   31510:	61fb      	str	r3, [r7, #28]
		goto exit;
   31512:	e055      	b.n	315c0 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   31514:	1dfb      	adds	r3, r7, #7
   31516:	781b      	ldrb	r3, [r3, #0]
   31518:	220f      	movs	r2, #15
   3151a:	4013      	ands	r3, r2
   3151c:	b2da      	uxtb	r2, r3
   3151e:	2318      	movs	r3, #24
   31520:	18fb      	adds	r3, r7, r3
   31522:	0110      	lsls	r0, r2, #4
   31524:	781a      	ldrb	r2, [r3, #0]
   31526:	210f      	movs	r1, #15
   31528:	400a      	ands	r2, r1
   3152a:	1c11      	adds	r1, r2, #0
   3152c:	1c02      	adds	r2, r0, #0
   3152e:	430a      	orrs	r2, r1
   31530:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31532:	1dbb      	adds	r3, r7, #6
   31534:	781b      	ldrb	r3, [r3, #0]
   31536:	2201      	movs	r2, #1
   31538:	4013      	ands	r3, r2
   3153a:	b2da      	uxtb	r2, r3
   3153c:	2318      	movs	r3, #24
   3153e:	18fb      	adds	r3, r7, r3
   31540:	2101      	movs	r1, #1
   31542:	400a      	ands	r2, r1
   31544:	00d0      	lsls	r0, r2, #3
   31546:	781a      	ldrb	r2, [r3, #0]
   31548:	2108      	movs	r1, #8
   3154a:	438a      	bics	r2, r1
   3154c:	1c11      	adds	r1, r2, #0
   3154e:	1c02      	adds	r2, r0, #0
   31550:	430a      	orrs	r2, r1
   31552:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   31554:	1dfb      	adds	r3, r7, #7
   31556:	781b      	ldrb	r3, [r3, #0]
   31558:	3b06      	subs	r3, #6
   3155a:	425a      	negs	r2, r3
   3155c:	4153      	adcs	r3, r2
   3155e:	b2db      	uxtb	r3, r3
   31560:	1c1a      	adds	r2, r3, #0
   31562:	2303      	movs	r3, #3
   31564:	4013      	ands	r3, r2
   31566:	b2da      	uxtb	r2, r3
   31568:	2318      	movs	r3, #24
   3156a:	18fb      	adds	r3, r7, r3
   3156c:	2103      	movs	r1, #3
   3156e:	400a      	ands	r2, r1
   31570:	1890      	adds	r0, r2, r2
   31572:	781a      	ldrb	r2, [r3, #0]
   31574:	2106      	movs	r1, #6
   31576:	438a      	bics	r2, r1
   31578:	1c11      	adds	r1, r2, #0
   3157a:	1c02      	adds	r2, r0, #0
   3157c:	430a      	orrs	r2, r1
   3157e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31580:	2318      	movs	r3, #24
   31582:	18fb      	adds	r3, r7, r3
   31584:	781a      	ldrb	r2, [r3, #0]
   31586:	2314      	movs	r3, #20
   31588:	18fb      	adds	r3, r7, r3
   3158a:	0011      	movs	r1, r2
   3158c:	0018      	movs	r0, r3
   3158e:	4b0f      	ldr	r3, [pc, #60]	; (315cc <MQTTSerialize_ack+0xe8>)
   31590:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   31592:	697b      	ldr	r3, [r7, #20]
   31594:	2102      	movs	r1, #2
   31596:	0018      	movs	r0, r3
   31598:	4b0d      	ldr	r3, [pc, #52]	; (315d0 <MQTTSerialize_ack+0xec>)
   3159a:	4798      	blx	r3
   3159c:	0002      	movs	r2, r0
   3159e:	697b      	ldr	r3, [r7, #20]
   315a0:	189b      	adds	r3, r3, r2
   315a2:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   315a4:	2328      	movs	r3, #40	; 0x28
   315a6:	18fb      	adds	r3, r7, r3
   315a8:	881a      	ldrh	r2, [r3, #0]
   315aa:	2314      	movs	r3, #20
   315ac:	18fb      	adds	r3, r7, r3
   315ae:	0011      	movs	r1, r2
   315b0:	0018      	movs	r0, r3
   315b2:	4b08      	ldr	r3, [pc, #32]	; (315d4 <MQTTSerialize_ack+0xf0>)
   315b4:	4798      	blx	r3
	rc = ptr - buf;
   315b6:	697b      	ldr	r3, [r7, #20]
   315b8:	001a      	movs	r2, r3
   315ba:	68fb      	ldr	r3, [r7, #12]
   315bc:	1ad3      	subs	r3, r2, r3
   315be:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   315c0:	69fb      	ldr	r3, [r7, #28]
}
   315c2:	0018      	movs	r0, r3
   315c4:	46bd      	mov	sp, r7
   315c6:	b008      	add	sp, #32
   315c8:	bd80      	pop	{r7, pc}
   315ca:	46c0      	nop			; (mov r8, r8)
   315cc:	000310bf 	.word	0x000310bf
   315d0:	00030ea5 	.word	0x00030ea5
   315d4:	000310e9 	.word	0x000310e9

000315d8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   315d8:	b580      	push	{r7, lr}
   315da:	b084      	sub	sp, #16
   315dc:	af00      	add	r7, sp, #0
   315de:	6078      	str	r0, [r7, #4]
   315e0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   315e2:	2302      	movs	r3, #2
   315e4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   315e6:	2300      	movs	r3, #0
   315e8:	60fb      	str	r3, [r7, #12]
   315ea:	e014      	b.n	31616 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   315ec:	68fa      	ldr	r2, [r7, #12]
   315ee:	0013      	movs	r3, r2
   315f0:	005b      	lsls	r3, r3, #1
   315f2:	189b      	adds	r3, r3, r2
   315f4:	009b      	lsls	r3, r3, #2
   315f6:	001a      	movs	r2, r3
   315f8:	683b      	ldr	r3, [r7, #0]
   315fa:	189b      	adds	r3, r3, r2
   315fc:	6818      	ldr	r0, [r3, #0]
   315fe:	6859      	ldr	r1, [r3, #4]
   31600:	689a      	ldr	r2, [r3, #8]
   31602:	4b09      	ldr	r3, [pc, #36]	; (31628 <MQTTSerialize_subscribeLength+0x50>)
   31604:	4798      	blx	r3
   31606:	0003      	movs	r3, r0
   31608:	3303      	adds	r3, #3
   3160a:	68ba      	ldr	r2, [r7, #8]
   3160c:	18d3      	adds	r3, r2, r3
   3160e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   31610:	68fb      	ldr	r3, [r7, #12]
   31612:	3301      	adds	r3, #1
   31614:	60fb      	str	r3, [r7, #12]
   31616:	68fa      	ldr	r2, [r7, #12]
   31618:	687b      	ldr	r3, [r7, #4]
   3161a:	429a      	cmp	r2, r3
   3161c:	dbe6      	blt.n	315ec <MQTTSerialize_subscribeLength+0x14>
	return len;
   3161e:	68bb      	ldr	r3, [r7, #8]
}
   31620:	0018      	movs	r0, r3
   31622:	46bd      	mov	sp, r7
   31624:	b004      	add	sp, #16
   31626:	bd80      	pop	{r7, pc}
   31628:	00031279 	.word	0x00031279

0003162c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   3162c:	b590      	push	{r4, r7, lr}
   3162e:	b08b      	sub	sp, #44	; 0x2c
   31630:	af00      	add	r7, sp, #0
   31632:	60f8      	str	r0, [r7, #12]
   31634:	60b9      	str	r1, [r7, #8]
   31636:	0019      	movs	r1, r3
   31638:	1dfb      	adds	r3, r7, #7
   3163a:	701a      	strb	r2, [r3, #0]
   3163c:	1d3b      	adds	r3, r7, #4
   3163e:	1c0a      	adds	r2, r1, #0
   31640:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   31642:	68fb      	ldr	r3, [r7, #12]
   31644:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   31646:	2300      	movs	r3, #0
   31648:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   3164a:	2300      	movs	r3, #0
   3164c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   3164e:	2300      	movs	r3, #0
   31650:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   31652:	2300      	movs	r3, #0
   31654:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   31656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   31658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3165a:	0011      	movs	r1, r2
   3165c:	0018      	movs	r0, r3
   3165e:	4b41      	ldr	r3, [pc, #260]	; (31764 <MQTTSerialize_subscribe+0x138>)
   31660:	4798      	blx	r3
   31662:	0003      	movs	r3, r0
   31664:	61fb      	str	r3, [r7, #28]
   31666:	69fb      	ldr	r3, [r7, #28]
   31668:	0018      	movs	r0, r3
   3166a:	4b3f      	ldr	r3, [pc, #252]	; (31768 <MQTTSerialize_subscribe+0x13c>)
   3166c:	4798      	blx	r3
   3166e:	0002      	movs	r2, r0
   31670:	68bb      	ldr	r3, [r7, #8]
   31672:	429a      	cmp	r2, r3
   31674:	dd03      	ble.n	3167e <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31676:	2302      	movs	r3, #2
   31678:	425b      	negs	r3, r3
   3167a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   3167c:	e06c      	b.n	31758 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   3167e:	2314      	movs	r3, #20
   31680:	18fb      	adds	r3, r7, r3
   31682:	2200      	movs	r2, #0
   31684:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   31686:	2314      	movs	r3, #20
   31688:	18fb      	adds	r3, r7, r3
   3168a:	781a      	ldrb	r2, [r3, #0]
   3168c:	210f      	movs	r1, #15
   3168e:	400a      	ands	r2, r1
   31690:	1c11      	adds	r1, r2, #0
   31692:	2280      	movs	r2, #128	; 0x80
   31694:	4252      	negs	r2, r2
   31696:	430a      	orrs	r2, r1
   31698:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3169a:	1dfb      	adds	r3, r7, #7
   3169c:	781b      	ldrb	r3, [r3, #0]
   3169e:	2201      	movs	r2, #1
   316a0:	4013      	ands	r3, r2
   316a2:	b2da      	uxtb	r2, r3
   316a4:	2314      	movs	r3, #20
   316a6:	18fb      	adds	r3, r7, r3
   316a8:	2101      	movs	r1, #1
   316aa:	400a      	ands	r2, r1
   316ac:	00d0      	lsls	r0, r2, #3
   316ae:	781a      	ldrb	r2, [r3, #0]
   316b0:	2108      	movs	r1, #8
   316b2:	438a      	bics	r2, r1
   316b4:	1c11      	adds	r1, r2, #0
   316b6:	1c02      	adds	r2, r0, #0
   316b8:	430a      	orrs	r2, r1
   316ba:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   316bc:	2314      	movs	r3, #20
   316be:	18fb      	adds	r3, r7, r3
   316c0:	781a      	ldrb	r2, [r3, #0]
   316c2:	2106      	movs	r1, #6
   316c4:	438a      	bics	r2, r1
   316c6:	1c11      	adds	r1, r2, #0
   316c8:	2202      	movs	r2, #2
   316ca:	430a      	orrs	r2, r1
   316cc:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   316ce:	2314      	movs	r3, #20
   316d0:	18fb      	adds	r3, r7, r3
   316d2:	781a      	ldrb	r2, [r3, #0]
   316d4:	2318      	movs	r3, #24
   316d6:	18fb      	adds	r3, r7, r3
   316d8:	0011      	movs	r1, r2
   316da:	0018      	movs	r0, r3
   316dc:	4b23      	ldr	r3, [pc, #140]	; (3176c <MQTTSerialize_subscribe+0x140>)
   316de:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   316e0:	69bb      	ldr	r3, [r7, #24]
   316e2:	69fa      	ldr	r2, [r7, #28]
   316e4:	0011      	movs	r1, r2
   316e6:	0018      	movs	r0, r3
   316e8:	4b21      	ldr	r3, [pc, #132]	; (31770 <MQTTSerialize_subscribe+0x144>)
   316ea:	4798      	blx	r3
   316ec:	0002      	movs	r2, r0
   316ee:	69bb      	ldr	r3, [r7, #24]
   316f0:	189b      	adds	r3, r3, r2
   316f2:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   316f4:	1d3b      	adds	r3, r7, #4
   316f6:	881a      	ldrh	r2, [r3, #0]
   316f8:	2318      	movs	r3, #24
   316fa:	18fb      	adds	r3, r7, r3
   316fc:	0011      	movs	r1, r2
   316fe:	0018      	movs	r0, r3
   31700:	4b1c      	ldr	r3, [pc, #112]	; (31774 <MQTTSerialize_subscribe+0x148>)
   31702:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   31704:	2300      	movs	r3, #0
   31706:	623b      	str	r3, [r7, #32]
   31708:	e01d      	b.n	31746 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   3170a:	6a3a      	ldr	r2, [r7, #32]
   3170c:	0013      	movs	r3, r2
   3170e:	005b      	lsls	r3, r3, #1
   31710:	189b      	adds	r3, r3, r2
   31712:	009b      	lsls	r3, r3, #2
   31714:	001a      	movs	r2, r3
   31716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31718:	189b      	adds	r3, r3, r2
   3171a:	2218      	movs	r2, #24
   3171c:	18b8      	adds	r0, r7, r2
   3171e:	6819      	ldr	r1, [r3, #0]
   31720:	685a      	ldr	r2, [r3, #4]
   31722:	689b      	ldr	r3, [r3, #8]
   31724:	4c14      	ldr	r4, [pc, #80]	; (31778 <MQTTSerialize_subscribe+0x14c>)
   31726:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   31728:	6a3b      	ldr	r3, [r7, #32]
   3172a:	009b      	lsls	r3, r3, #2
   3172c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3172e:	18d3      	adds	r3, r2, r3
   31730:	681b      	ldr	r3, [r3, #0]
   31732:	b2da      	uxtb	r2, r3
   31734:	2318      	movs	r3, #24
   31736:	18fb      	adds	r3, r7, r3
   31738:	0011      	movs	r1, r2
   3173a:	0018      	movs	r0, r3
   3173c:	4b0b      	ldr	r3, [pc, #44]	; (3176c <MQTTSerialize_subscribe+0x140>)
   3173e:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   31740:	6a3b      	ldr	r3, [r7, #32]
   31742:	3301      	adds	r3, #1
   31744:	623b      	str	r3, [r7, #32]
   31746:	6a3a      	ldr	r2, [r7, #32]
   31748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3174a:	429a      	cmp	r2, r3
   3174c:	dbdd      	blt.n	3170a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   3174e:	69bb      	ldr	r3, [r7, #24]
   31750:	001a      	movs	r2, r3
   31752:	68fb      	ldr	r3, [r7, #12]
   31754:	1ad3      	subs	r3, r2, r3
   31756:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3175a:	0018      	movs	r0, r3
   3175c:	46bd      	mov	sp, r7
   3175e:	b00b      	add	sp, #44	; 0x2c
   31760:	bd90      	pop	{r4, r7, pc}
   31762:	46c0      	nop			; (mov r8, r8)
   31764:	000315d9 	.word	0x000315d9
   31768:	00030f9d 	.word	0x00030f9d
   3176c:	000310bf 	.word	0x000310bf
   31770:	00030ea5 	.word	0x00030ea5
   31774:	000310e9 	.word	0x000310e9
   31778:	00031191 	.word	0x00031191

0003177c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   3177c:	b590      	push	{r4, r7, lr}
   3177e:	b08b      	sub	sp, #44	; 0x2c
   31780:	af00      	add	r7, sp, #0
   31782:	60f8      	str	r0, [r7, #12]
   31784:	60b9      	str	r1, [r7, #8]
   31786:	607a      	str	r2, [r7, #4]
   31788:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3178a:	2300      	movs	r3, #0
   3178c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   3178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31790:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   31792:	2300      	movs	r3, #0
   31794:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31796:	2300      	movs	r3, #0
   31798:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3179a:	2318      	movs	r3, #24
   3179c:	18fb      	adds	r3, r7, r3
   3179e:	0018      	movs	r0, r3
   317a0:	4b2c      	ldr	r3, [pc, #176]	; (31854 <MQTTDeserialize_suback+0xd8>)
   317a2:	4798      	blx	r3
   317a4:	0003      	movs	r3, r0
   317a6:	001a      	movs	r2, r3
   317a8:	231c      	movs	r3, #28
   317aa:	18fb      	adds	r3, r7, r3
   317ac:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   317ae:	231c      	movs	r3, #28
   317b0:	18fb      	adds	r3, r7, r3
   317b2:	781b      	ldrb	r3, [r3, #0]
   317b4:	220f      	movs	r2, #15
   317b6:	4393      	bics	r3, r2
   317b8:	b2db      	uxtb	r3, r3
   317ba:	2b90      	cmp	r3, #144	; 0x90
   317bc:	d142      	bne.n	31844 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   317be:	69bb      	ldr	r3, [r7, #24]
   317c0:	2214      	movs	r2, #20
   317c2:	18ba      	adds	r2, r7, r2
   317c4:	0011      	movs	r1, r2
   317c6:	0018      	movs	r0, r3
   317c8:	4b23      	ldr	r3, [pc, #140]	; (31858 <MQTTDeserialize_suback+0xdc>)
   317ca:	4798      	blx	r3
   317cc:	0003      	movs	r3, r0
   317ce:	627b      	str	r3, [r7, #36]	; 0x24
   317d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   317d2:	69bb      	ldr	r3, [r7, #24]
   317d4:	189b      	adds	r3, r3, r2
   317d6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   317d8:	69bb      	ldr	r3, [r7, #24]
   317da:	697a      	ldr	r2, [r7, #20]
   317dc:	189b      	adds	r3, r3, r2
   317de:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   317e0:	6a3b      	ldr	r3, [r7, #32]
   317e2:	69ba      	ldr	r2, [r7, #24]
   317e4:	1a9b      	subs	r3, r3, r2
   317e6:	2b01      	cmp	r3, #1
   317e8:	dd2e      	ble.n	31848 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   317ea:	2318      	movs	r3, #24
   317ec:	18fb      	adds	r3, r7, r3
   317ee:	0018      	movs	r0, r3
   317f0:	4b1a      	ldr	r3, [pc, #104]	; (3185c <MQTTDeserialize_suback+0xe0>)
   317f2:	4798      	blx	r3
   317f4:	0003      	movs	r3, r0
   317f6:	b29a      	uxth	r2, r3
   317f8:	68fb      	ldr	r3, [r7, #12]
   317fa:	801a      	strh	r2, [r3, #0]

	*count = 0;
   317fc:	687b      	ldr	r3, [r7, #4]
   317fe:	2200      	movs	r2, #0
   31800:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   31802:	e018      	b.n	31836 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   31804:	687b      	ldr	r3, [r7, #4]
   31806:	681a      	ldr	r2, [r3, #0]
   31808:	68bb      	ldr	r3, [r7, #8]
   3180a:	429a      	cmp	r2, r3
   3180c:	dd03      	ble.n	31816 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   3180e:	2301      	movs	r3, #1
   31810:	425b      	negs	r3, r3
   31812:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   31814:	e019      	b.n	3184a <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   31816:	687b      	ldr	r3, [r7, #4]
   31818:	681a      	ldr	r2, [r3, #0]
   3181a:	1c51      	adds	r1, r2, #1
   3181c:	687b      	ldr	r3, [r7, #4]
   3181e:	6019      	str	r1, [r3, #0]
   31820:	0013      	movs	r3, r2
   31822:	009b      	lsls	r3, r3, #2
   31824:	683a      	ldr	r2, [r7, #0]
   31826:	18d4      	adds	r4, r2, r3
   31828:	2318      	movs	r3, #24
   3182a:	18fb      	adds	r3, r7, r3
   3182c:	0018      	movs	r0, r3
   3182e:	4b09      	ldr	r3, [pc, #36]	; (31854 <MQTTDeserialize_suback+0xd8>)
   31830:	4798      	blx	r3
   31832:	0003      	movs	r3, r0
   31834:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   31836:	69ba      	ldr	r2, [r7, #24]
   31838:	6a3b      	ldr	r3, [r7, #32]
   3183a:	429a      	cmp	r2, r3
   3183c:	d3e2      	bcc.n	31804 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   3183e:	2301      	movs	r3, #1
   31840:	627b      	str	r3, [r7, #36]	; 0x24
   31842:	e002      	b.n	3184a <MQTTDeserialize_suback+0xce>
		goto exit;
   31844:	46c0      	nop			; (mov r8, r8)
   31846:	e000      	b.n	3184a <MQTTDeserialize_suback+0xce>
		goto exit;
   31848:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3184c:	0018      	movs	r0, r3
   3184e:	46bd      	mov	sp, r7
   31850:	b00b      	add	sp, #44	; 0x2c
   31852:	bd90      	pop	{r4, r7, pc}
   31854:	00031093 	.word	0x00031093
   31858:	0003102d 	.word	0x0003102d
   3185c:	00031061 	.word	0x00031061

00031860 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   31860:	b580      	push	{r7, lr}
   31862:	b082      	sub	sp, #8
   31864:	af00      	add	r7, sp, #0
   31866:	6078      	str	r0, [r7, #4]
	config->port = 80;
   31868:	687b      	ldr	r3, [r7, #4]
   3186a:	2250      	movs	r2, #80	; 0x50
   3186c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3186e:	687b      	ldr	r3, [r7, #4]
   31870:	2200      	movs	r2, #0
   31872:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   31874:	687b      	ldr	r3, [r7, #4]
   31876:	4a0b      	ldr	r2, [pc, #44]	; (318a4 <http_client_get_config_defaults+0x44>)
   31878:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   3187a:	687b      	ldr	r3, [r7, #4]
   3187c:	2200      	movs	r2, #0
   3187e:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   31880:	687b      	ldr	r3, [r7, #4]
   31882:	2200      	movs	r2, #0
   31884:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   31886:	687b      	ldr	r3, [r7, #4]
   31888:	2280      	movs	r2, #128	; 0x80
   3188a:	0052      	lsls	r2, r2, #1
   3188c:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   3188e:	687b      	ldr	r3, [r7, #4]
   31890:	2252      	movs	r2, #82	; 0x52
   31892:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   31894:	687b      	ldr	r3, [r7, #4]
   31896:	4a04      	ldr	r2, [pc, #16]	; (318a8 <http_client_get_config_defaults+0x48>)
   31898:	619a      	str	r2, [r3, #24]
}
   3189a:	46c0      	nop			; (mov r8, r8)
   3189c:	46bd      	mov	sp, r7
   3189e:	b002      	add	sp, #8
   318a0:	bd80      	pop	{r7, pc}
   318a2:	46c0      	nop			; (mov r8, r8)
   318a4:	00004e20 	.word	0x00004e20
   318a8:	0003ab98 	.word	0x0003ab98

000318ac <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   318ac:	b590      	push	{r4, r7, lr}
   318ae:	b083      	sub	sp, #12
   318b0:	af00      	add	r7, sp, #0
   318b2:	6078      	str	r0, [r7, #4]
   318b4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   318b6:	687b      	ldr	r3, [r7, #4]
   318b8:	2b00      	cmp	r3, #0
   318ba:	d002      	beq.n	318c2 <http_client_init+0x16>
   318bc:	683b      	ldr	r3, [r7, #0]
   318be:	2b00      	cmp	r3, #0
   318c0:	d102      	bne.n	318c8 <http_client_init+0x1c>
		return -EINVAL;
   318c2:	2316      	movs	r3, #22
   318c4:	425b      	negs	r3, r3
   318c6:	e058      	b.n	3197a <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   318c8:	683b      	ldr	r3, [r7, #0]
   318ca:	691b      	ldr	r3, [r3, #16]
   318cc:	2b00      	cmp	r3, #0
   318ce:	d102      	bne.n	318d6 <http_client_init+0x2a>
		return -EINVAL;
   318d0:	2316      	movs	r3, #22
   318d2:	425b      	negs	r3, r3
   318d4:	e051      	b.n	3197a <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   318d6:	683b      	ldr	r3, [r7, #0]
   318d8:	685b      	ldr	r3, [r3, #4]
   318da:	2b00      	cmp	r3, #0
   318dc:	d102      	bne.n	318e4 <http_client_init+0x38>
		return -EINVAL;
   318de:	2316      	movs	r3, #22
   318e0:	425b      	negs	r3, r3
   318e2:	e04a      	b.n	3197a <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   318e4:	683b      	ldr	r3, [r7, #0]
   318e6:	695b      	ldr	r3, [r3, #20]
   318e8:	2b51      	cmp	r3, #81	; 0x51
   318ea:	d802      	bhi.n	318f2 <http_client_init+0x46>
		return -EINVAL;
   318ec:	2316      	movs	r3, #22
   318ee:	425b      	negs	r3, r3
   318f0:	e043      	b.n	3197a <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   318f2:	687b      	ldr	r3, [r7, #4]
   318f4:	22e8      	movs	r2, #232	; 0xe8
   318f6:	2100      	movs	r1, #0
   318f8:	0018      	movs	r0, r3
   318fa:	4b22      	ldr	r3, [pc, #136]	; (31984 <http_client_init+0xd8>)
   318fc:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   318fe:	687b      	ldr	r3, [r7, #4]
   31900:	3350      	adds	r3, #80	; 0x50
   31902:	6839      	ldr	r1, [r7, #0]
   31904:	221c      	movs	r2, #28
   31906:	0018      	movs	r0, r3
   31908:	4b1f      	ldr	r3, [pc, #124]	; (31988 <http_client_init+0xdc>)
   3190a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   3190c:	687b      	ldr	r3, [r7, #4]
   3190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31910:	2b00      	cmp	r3, #0
   31912:	d115      	bne.n	31940 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   31914:	683b      	ldr	r3, [r7, #0]
   31916:	691b      	ldr	r3, [r3, #16]
   31918:	0018      	movs	r0, r3
   3191a:	4b1c      	ldr	r3, [pc, #112]	; (3198c <http_client_init+0xe0>)
   3191c:	4798      	blx	r3
   3191e:	0003      	movs	r3, r0
   31920:	001a      	movs	r2, r3
   31922:	687b      	ldr	r3, [r7, #4]
   31924:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   31926:	687b      	ldr	r3, [r7, #4]
   31928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3192a:	2b00      	cmp	r3, #0
   3192c:	d102      	bne.n	31934 <http_client_init+0x88>
			return -ENOMEM;
   3192e:	230c      	movs	r3, #12
   31930:	425b      	negs	r3, r3
   31932:	e022      	b.n	3197a <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   31934:	687b      	ldr	r3, [r7, #4]
   31936:	2241      	movs	r2, #65	; 0x41
   31938:	5c99      	ldrb	r1, [r3, r2]
   3193a:	2004      	movs	r0, #4
   3193c:	4301      	orrs	r1, r0
   3193e:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   31940:	683b      	ldr	r3, [r7, #0]
   31942:	891b      	ldrh	r3, [r3, #8]
   31944:	2b00      	cmp	r3, #0
   31946:	d010      	beq.n	3196a <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   31948:	683b      	ldr	r3, [r7, #0]
   3194a:	6858      	ldr	r0, [r3, #4]
   3194c:	687a      	ldr	r2, [r7, #4]
   3194e:	4910      	ldr	r1, [pc, #64]	; (31990 <http_client_init+0xe4>)
   31950:	2300      	movs	r3, #0
   31952:	4c10      	ldr	r4, [pc, #64]	; (31994 <http_client_init+0xe8>)
   31954:	47a0      	blx	r4
   31956:	0002      	movs	r2, r0
   31958:	687b      	ldr	r3, [r7, #4]
   3195a:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   3195c:	687b      	ldr	r3, [r7, #4]
   3195e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31960:	2b00      	cmp	r3, #0
   31962:	da02      	bge.n	3196a <http_client_init+0xbe>
			return -ENOSPC;
   31964:	231c      	movs	r3, #28
   31966:	425b      	negs	r3, r3
   31968:	e007      	b.n	3197a <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   3196a:	687b      	ldr	r3, [r7, #4]
   3196c:	2200      	movs	r2, #0
   3196e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31970:	687b      	ldr	r3, [r7, #4]
   31972:	22d8      	movs	r2, #216	; 0xd8
   31974:	2100      	movs	r1, #0
   31976:	5099      	str	r1, [r3, r2]

	return 0;
   31978:	2300      	movs	r3, #0
}
   3197a:	0018      	movs	r0, r3
   3197c:	46bd      	mov	sp, r7
   3197e:	b003      	add	sp, #12
   31980:	bd90      	pop	{r4, r7, pc}
   31982:	46c0      	nop			; (mov r8, r8)
   31984:	0003577f 	.word	0x0003577f
   31988:	00035749 	.word	0x00035749
   3198c:	00035721 	.word	0x00035721
   31990:	00031c5d 	.word	0x00031c5d
   31994:	00033301 	.word	0x00033301

00031998 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31998:	b580      	push	{r7, lr}
   3199a:	b082      	sub	sp, #8
   3199c:	af00      	add	r7, sp, #0
   3199e:	6078      	str	r0, [r7, #4]
   319a0:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   319a2:	687b      	ldr	r3, [r7, #4]
   319a4:	2b00      	cmp	r3, #0
   319a6:	d102      	bne.n	319ae <http_client_register_callback+0x16>
		return -EINVAL;
   319a8:	2316      	movs	r3, #22
   319aa:	425b      	negs	r3, r3
   319ac:	e003      	b.n	319b6 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   319ae:	687b      	ldr	r3, [r7, #4]
   319b0:	683a      	ldr	r2, [r7, #0]
   319b2:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   319b4:	2300      	movs	r3, #0
}
   319b6:	0018      	movs	r0, r3
   319b8:	46bd      	mov	sp, r7
   319ba:	b002      	add	sp, #8
   319bc:	bd80      	pop	{r7, pc}
	...

000319c0 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   319c0:	b580      	push	{r7, lr}
   319c2:	b082      	sub	sp, #8
   319c4:	af00      	add	r7, sp, #0
   319c6:	6078      	str	r0, [r7, #4]
	switch (err) {
   319c8:	687b      	ldr	r3, [r7, #4]
   319ca:	330e      	adds	r3, #14
   319cc:	2b0e      	cmp	r3, #14
   319ce:	d825      	bhi.n	31a1c <_hwerr_to_stderr+0x5c>
   319d0:	009a      	lsls	r2, r3, #2
   319d2:	4b18      	ldr	r3, [pc, #96]	; (31a34 <_hwerr_to_stderr+0x74>)
   319d4:	18d3      	adds	r3, r2, r3
   319d6:	681b      	ldr	r3, [r3, #0]
   319d8:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   319da:	2305      	movs	r3, #5
   319dc:	425b      	negs	r3, r3
   319de:	e024      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   319e0:	2302      	movs	r3, #2
   319e2:	425b      	negs	r3, r3
   319e4:	e021      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   319e6:	2370      	movs	r3, #112	; 0x70
   319e8:	425b      	negs	r3, r3
   319ea:	e01e      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   319ec:	230c      	movs	r3, #12
   319ee:	425b      	negs	r3, r3
   319f0:	e01b      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   319f2:	2316      	movs	r3, #22
   319f4:	425b      	negs	r3, r3
   319f6:	e018      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   319f8:	230c      	movs	r3, #12
   319fa:	425b      	negs	r3, r3
   319fc:	e015      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   319fe:	2305      	movs	r3, #5
   31a00:	425b      	negs	r3, r3
   31a02:	e012      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   31a04:	2379      	movs	r3, #121	; 0x79
   31a06:	425b      	negs	r3, r3
   31a08:	e00f      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   31a0a:	2368      	movs	r3, #104	; 0x68
   31a0c:	425b      	negs	r3, r3
   31a0e:	e00c      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31a10:	230b      	movs	r3, #11
   31a12:	425b      	negs	r3, r3
   31a14:	e009      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   31a16:	2310      	movs	r3, #16
   31a18:	425b      	negs	r3, r3
   31a1a:	e006      	b.n	31a2a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   31a1c:	687b      	ldr	r3, [r7, #4]
   31a1e:	2b00      	cmp	r3, #0
   31a20:	da02      	bge.n	31a28 <_hwerr_to_stderr+0x68>
				return -EIO;
   31a22:	2305      	movs	r3, #5
   31a24:	425b      	negs	r3, r3
   31a26:	e000      	b.n	31a2a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31a28:	2300      	movs	r3, #0
	}
}
   31a2a:	0018      	movs	r0, r3
   31a2c:	46bd      	mov	sp, r7
   31a2e:	b002      	add	sp, #8
   31a30:	bd80      	pop	{r7, pc}
   31a32:	46c0      	nop			; (mov r8, r8)
   31a34:	0003acd4 	.word	0x0003acd4

00031a38 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31a38:	b580      	push	{r7, lr}
   31a3a:	b08a      	sub	sp, #40	; 0x28
   31a3c:	af00      	add	r7, sp, #0
   31a3e:	603a      	str	r2, [r7, #0]
   31a40:	1dfb      	adds	r3, r7, #7
   31a42:	1c02      	adds	r2, r0, #0
   31a44:	701a      	strb	r2, [r3, #0]
   31a46:	1dbb      	adds	r3, r7, #6
   31a48:	1c0a      	adds	r2, r1, #0
   31a4a:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   31a4c:	1dfb      	adds	r3, r7, #7
   31a4e:	2200      	movs	r2, #0
   31a50:	569a      	ldrsb	r2, [r3, r2]
   31a52:	4b4b      	ldr	r3, [pc, #300]	; (31b80 <http_client_socket_event_handler+0x148>)
   31a54:	0092      	lsls	r2, r2, #2
   31a56:	58d3      	ldr	r3, [r2, r3]
   31a58:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   31a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31a5c:	2b00      	cmp	r3, #0
   31a5e:	d100      	bne.n	31a62 <http_client_socket_event_handler+0x2a>
   31a60:	e08a      	b.n	31b78 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   31a62:	1dbb      	adds	r3, r7, #6
   31a64:	781b      	ldrb	r3, [r3, #0]
   31a66:	2b06      	cmp	r3, #6
   31a68:	d040      	beq.n	31aec <http_client_socket_event_handler+0xb4>
   31a6a:	2b07      	cmp	r3, #7
   31a6c:	d060      	beq.n	31b30 <http_client_socket_event_handler+0xf8>
   31a6e:	2b05      	cmp	r3, #5
   31a70:	d000      	beq.n	31a74 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   31a72:	e082      	b.n	31b7a <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   31a74:	683b      	ldr	r3, [r7, #0]
   31a76:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   31a78:	6a3b      	ldr	r3, [r7, #32]
   31a7a:	785b      	ldrb	r3, [r3, #1]
   31a7c:	b25b      	sxtb	r3, r3
   31a7e:	001a      	movs	r2, r3
   31a80:	230c      	movs	r3, #12
   31a82:	18fb      	adds	r3, r7, r3
   31a84:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   31a86:	6a3b      	ldr	r3, [r7, #32]
   31a88:	785b      	ldrb	r3, [r3, #1]
   31a8a:	b25b      	sxtb	r3, r3
   31a8c:	2b00      	cmp	r3, #0
   31a8e:	da0c      	bge.n	31aaa <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   31a90:	6a3b      	ldr	r3, [r7, #32]
   31a92:	785b      	ldrb	r3, [r3, #1]
   31a94:	b25b      	sxtb	r3, r3
   31a96:	0018      	movs	r0, r3
   31a98:	4b3a      	ldr	r3, [pc, #232]	; (31b84 <http_client_socket_event_handler+0x14c>)
   31a9a:	4798      	blx	r3
   31a9c:	0002      	movs	r2, r0
   31a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31aa0:	0011      	movs	r1, r2
   31aa2:	0018      	movs	r0, r3
   31aa4:	4b38      	ldr	r3, [pc, #224]	; (31b88 <http_client_socket_event_handler+0x150>)
   31aa6:	4798      	blx	r3
    	break;
   31aa8:	e067      	b.n	31b7a <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   31aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31aae:	2b00      	cmp	r3, #0
   31ab0:	d006      	beq.n	31ac0 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   31ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ab6:	220c      	movs	r2, #12
   31ab8:	18ba      	adds	r2, r7, r2
   31aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
   31abc:	2100      	movs	r1, #0
   31abe:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   31ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ac2:	2203      	movs	r2, #3
   31ac4:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   31ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ac8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   31aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31acc:	6c99      	ldr	r1, [r3, #72]	; 0x48
   31ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ad0:	2258      	movs	r2, #88	; 0x58
   31ad2:	5a9b      	ldrh	r3, [r3, r2]
   31ad4:	001a      	movs	r2, r3
   31ad6:	4b2d      	ldr	r3, [pc, #180]	; (31b8c <http_client_socket_event_handler+0x154>)
   31ad8:	4798      	blx	r3
    		_http_client_recv_packet(module);
   31ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31adc:	0018      	movs	r0, r3
   31ade:	4b2c      	ldr	r3, [pc, #176]	; (31b90 <http_client_socket_event_handler+0x158>)
   31ae0:	4798      	blx	r3
			_http_client_request(module);
   31ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ae4:	0018      	movs	r0, r3
   31ae6:	4b2b      	ldr	r3, [pc, #172]	; (31b94 <http_client_socket_event_handler+0x15c>)
   31ae8:	4798      	blx	r3
    	break;
   31aea:	e046      	b.n	31b7a <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   31aec:	683b      	ldr	r3, [r7, #0]
   31aee:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   31af0:	69fb      	ldr	r3, [r7, #28]
   31af2:	2204      	movs	r2, #4
   31af4:	5e9b      	ldrsh	r3, [r3, r2]
   31af6:	2b00      	cmp	r3, #0
   31af8:	dd09      	ble.n	31b0e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   31afa:	69fb      	ldr	r3, [r7, #28]
   31afc:	2204      	movs	r2, #4
   31afe:	5e9b      	ldrsh	r3, [r3, r2]
   31b00:	001a      	movs	r2, r3
   31b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b04:	0011      	movs	r1, r2
   31b06:	0018      	movs	r0, r3
   31b08:	4b23      	ldr	r3, [pc, #140]	; (31b98 <http_client_socket_event_handler+0x160>)
   31b0a:	4798      	blx	r3
   31b0c:	e00b      	b.n	31b26 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   31b0e:	69fb      	ldr	r3, [r7, #28]
   31b10:	2204      	movs	r2, #4
   31b12:	5e9b      	ldrsh	r3, [r3, r2]
   31b14:	0018      	movs	r0, r3
   31b16:	4b1b      	ldr	r3, [pc, #108]	; (31b84 <http_client_socket_event_handler+0x14c>)
   31b18:	4798      	blx	r3
   31b1a:	0002      	movs	r2, r0
   31b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b1e:	0011      	movs	r1, r2
   31b20:	0018      	movs	r0, r3
   31b22:	4b19      	ldr	r3, [pc, #100]	; (31b88 <http_client_socket_event_handler+0x150>)
   31b24:	4798      	blx	r3
		_http_client_recv_packet(module);
   31b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b28:	0018      	movs	r0, r3
   31b2a:	4b19      	ldr	r3, [pc, #100]	; (31b90 <http_client_socket_event_handler+0x158>)
   31b2c:	4798      	blx	r3
		break;
   31b2e:	e024      	b.n	31b7a <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   31b30:	231a      	movs	r3, #26
   31b32:	18fb      	adds	r3, r7, r3
   31b34:	683a      	ldr	r2, [r7, #0]
   31b36:	8812      	ldrh	r2, [r2, #0]
   31b38:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   31b3a:	231a      	movs	r3, #26
   31b3c:	18fb      	adds	r3, r7, r3
   31b3e:	2200      	movs	r2, #0
   31b40:	5e9b      	ldrsh	r3, [r3, r2]
   31b42:	2b00      	cmp	r3, #0
   31b44:	da0d      	bge.n	31b62 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31b46:	231a      	movs	r3, #26
   31b48:	18fb      	adds	r3, r7, r3
   31b4a:	2200      	movs	r2, #0
   31b4c:	5e9b      	ldrsh	r3, [r3, r2]
   31b4e:	0018      	movs	r0, r3
   31b50:	4b0c      	ldr	r3, [pc, #48]	; (31b84 <http_client_socket_event_handler+0x14c>)
   31b52:	4798      	blx	r3
   31b54:	0002      	movs	r2, r0
   31b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b58:	0011      	movs	r1, r2
   31b5a:	0018      	movs	r0, r3
   31b5c:	4b0a      	ldr	r3, [pc, #40]	; (31b88 <http_client_socket_event_handler+0x150>)
   31b5e:	4798      	blx	r3
   31b60:	e003      	b.n	31b6a <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   31b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b64:	0018      	movs	r0, r3
   31b66:	4b0b      	ldr	r3, [pc, #44]	; (31b94 <http_client_socket_event_handler+0x15c>)
   31b68:	4798      	blx	r3
		module->sending = 0;
   31b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b6c:	2241      	movs	r2, #65	; 0x41
   31b6e:	5c99      	ldrb	r1, [r3, r2]
   31b70:	2001      	movs	r0, #1
   31b72:	4381      	bics	r1, r0
   31b74:	5499      	strb	r1, [r3, r2]
    	break;
   31b76:	e000      	b.n	31b7a <http_client_socket_event_handler+0x142>
		return;
   31b78:	46c0      	nop			; (mov r8, r8)
	}

}
   31b7a:	46bd      	mov	sp, r7
   31b7c:	b00a      	add	sp, #40	; 0x28
   31b7e:	bd80      	pop	{r7, pc}
   31b80:	200046f4 	.word	0x200046f4
   31b84:	000319c1 	.word	0x000319c1
   31b88:	00032035 	.word	0x00032035
   31b8c:	00033391 	.word	0x00033391
   31b90:	000328c1 	.word	0x000328c1
   31b94:	00032189 	.word	0x00032189
   31b98:	00032925 	.word	0x00032925

00031b9c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31b9c:	b580      	push	{r7, lr}
   31b9e:	b088      	sub	sp, #32
   31ba0:	af00      	add	r7, sp, #0
   31ba2:	6078      	str	r0, [r7, #4]
   31ba4:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31ba6:	2300      	movs	r3, #0
   31ba8:	61fb      	str	r3, [r7, #28]
   31baa:	e048      	b.n	31c3e <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31bac:	4b27      	ldr	r3, [pc, #156]	; (31c4c <http_client_socket_resolve_handler+0xb0>)
   31bae:	69fa      	ldr	r2, [r7, #28]
   31bb0:	0092      	lsls	r2, r2, #2
   31bb2:	58d3      	ldr	r3, [r2, r3]
   31bb4:	2b00      	cmp	r3, #0
   31bb6:	d03f      	beq.n	31c38 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31bb8:	4b24      	ldr	r3, [pc, #144]	; (31c4c <http_client_socket_resolve_handler+0xb0>)
   31bba:	69fa      	ldr	r2, [r7, #28]
   31bbc:	0092      	lsls	r2, r2, #2
   31bbe:	58d3      	ldr	r3, [r2, r3]
   31bc0:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31bc2:	69bb      	ldr	r3, [r7, #24]
   31bc4:	1c5a      	adds	r2, r3, #1
   31bc6:	687b      	ldr	r3, [r7, #4]
   31bc8:	0011      	movs	r1, r2
   31bca:	0018      	movs	r0, r3
   31bcc:	4b20      	ldr	r3, [pc, #128]	; (31c50 <http_client_socket_resolve_handler+0xb4>)
   31bce:	4798      	blx	r3
   31bd0:	1e03      	subs	r3, r0, #0
   31bd2:	d131      	bne.n	31c38 <http_client_socket_resolve_handler+0x9c>
   31bd4:	69bb      	ldr	r3, [r7, #24]
   31bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31bd8:	2b01      	cmp	r3, #1
   31bda:	d12d      	bne.n	31c38 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31bdc:	683b      	ldr	r3, [r7, #0]
   31bde:	2b00      	cmp	r3, #0
   31be0:	d107      	bne.n	31bf2 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31be2:	2376      	movs	r3, #118	; 0x76
   31be4:	425a      	negs	r2, r3
   31be6:	69bb      	ldr	r3, [r7, #24]
   31be8:	0011      	movs	r1, r2
   31bea:	0018      	movs	r0, r3
   31bec:	4b19      	ldr	r3, [pc, #100]	; (31c54 <http_client_socket_resolve_handler+0xb8>)
   31bee:	4798      	blx	r3
					return;
   31bf0:	e028      	b.n	31c44 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31bf2:	2308      	movs	r3, #8
   31bf4:	18fb      	adds	r3, r7, r3
   31bf6:	2202      	movs	r2, #2
   31bf8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31bfa:	69bb      	ldr	r3, [r7, #24]
   31bfc:	2250      	movs	r2, #80	; 0x50
   31bfe:	5a9b      	ldrh	r3, [r3, r2]
   31c00:	021b      	lsls	r3, r3, #8
   31c02:	b21a      	sxth	r2, r3
   31c04:	69bb      	ldr	r3, [r7, #24]
   31c06:	2150      	movs	r1, #80	; 0x50
   31c08:	5a5b      	ldrh	r3, [r3, r1]
   31c0a:	0a1b      	lsrs	r3, r3, #8
   31c0c:	b29b      	uxth	r3, r3
   31c0e:	b21b      	sxth	r3, r3
   31c10:	4313      	orrs	r3, r2
   31c12:	b21b      	sxth	r3, r3
   31c14:	b29a      	uxth	r2, r3
   31c16:	2308      	movs	r3, #8
   31c18:	18fb      	adds	r3, r7, r3
   31c1a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   31c1c:	2308      	movs	r3, #8
   31c1e:	18fb      	adds	r3, r7, r3
   31c20:	683a      	ldr	r2, [r7, #0]
   31c22:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31c24:	69bb      	ldr	r3, [r7, #24]
   31c26:	781b      	ldrb	r3, [r3, #0]
   31c28:	b25b      	sxtb	r3, r3
   31c2a:	2208      	movs	r2, #8
   31c2c:	18b9      	adds	r1, r7, r2
   31c2e:	2210      	movs	r2, #16
   31c30:	0018      	movs	r0, r3
   31c32:	4b09      	ldr	r3, [pc, #36]	; (31c58 <http_client_socket_resolve_handler+0xbc>)
   31c34:	4798      	blx	r3
				return;
   31c36:	e005      	b.n	31c44 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31c38:	69fb      	ldr	r3, [r7, #28]
   31c3a:	3301      	adds	r3, #1
   31c3c:	61fb      	str	r3, [r7, #28]
   31c3e:	69fb      	ldr	r3, [r7, #28]
   31c40:	2b06      	cmp	r3, #6
   31c42:	ddb3      	ble.n	31bac <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31c44:	46bd      	mov	sp, r7
   31c46:	b008      	add	sp, #32
   31c48:	bd80      	pop	{r7, pc}
   31c4a:	46c0      	nop			; (mov r8, r8)
   31c4c:	200046f4 	.word	0x200046f4
   31c50:	00035ad7 	.word	0x00035ad7
   31c54:	00032035 	.word	0x00032035
   31c58:	00026559 	.word	0x00026559

00031c5c <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31c5c:	b580      	push	{r7, lr}
   31c5e:	b086      	sub	sp, #24
   31c60:	af00      	add	r7, sp, #0
   31c62:	60f8      	str	r0, [r7, #12]
   31c64:	60b9      	str	r1, [r7, #8]
   31c66:	607a      	str	r2, [r7, #4]
   31c68:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31c6a:	687b      	ldr	r3, [r7, #4]
   31c6c:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31c6e:	697b      	ldr	r3, [r7, #20]
   31c70:	2b00      	cmp	r3, #0
   31c72:	d007      	beq.n	31c84 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31c74:	233e      	movs	r3, #62	; 0x3e
   31c76:	425a      	negs	r2, r3
   31c78:	697b      	ldr	r3, [r7, #20]
   31c7a:	0011      	movs	r1, r2
   31c7c:	0018      	movs	r0, r3
   31c7e:	4b03      	ldr	r3, [pc, #12]	; (31c8c <http_client_timer_callback+0x30>)
   31c80:	4798      	blx	r3
   31c82:	e000      	b.n	31c86 <http_client_timer_callback+0x2a>
		return;
   31c84:	46c0      	nop			; (mov r8, r8)
}
   31c86:	46bd      	mov	sp, r7
   31c88:	b006      	add	sp, #24
   31c8a:	bd80      	pop	{r7, pc}
   31c8c:	00032035 	.word	0x00032035

00031c90 <_is_ip>:

static int _is_ip(const char *host)
{
   31c90:	b580      	push	{r7, lr}
   31c92:	b084      	sub	sp, #16
   31c94:	af00      	add	r7, sp, #0
   31c96:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31c98:	2300      	movs	r3, #0
   31c9a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31c9c:	e03a      	b.n	31d14 <_is_ip+0x84>
		ch = *host++;
   31c9e:	687b      	ldr	r3, [r7, #4]
   31ca0:	1c5a      	adds	r2, r3, #1
   31ca2:	607a      	str	r2, [r7, #4]
   31ca4:	220b      	movs	r2, #11
   31ca6:	18ba      	adds	r2, r7, r2
   31ca8:	781b      	ldrb	r3, [r3, #0]
   31caa:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31cac:	230b      	movs	r3, #11
   31cae:	18fb      	adds	r3, r7, r3
   31cb0:	781b      	ldrb	r3, [r3, #0]
   31cb2:	2b60      	cmp	r3, #96	; 0x60
   31cb4:	d904      	bls.n	31cc0 <_is_ip+0x30>
   31cb6:	230b      	movs	r3, #11
   31cb8:	18fb      	adds	r3, r7, r3
   31cba:	781b      	ldrb	r3, [r3, #0]
   31cbc:	2b66      	cmp	r3, #102	; 0x66
   31cbe:	d913      	bls.n	31ce8 <_is_ip+0x58>
   31cc0:	230b      	movs	r3, #11
   31cc2:	18fb      	adds	r3, r7, r3
   31cc4:	781b      	ldrb	r3, [r3, #0]
   31cc6:	2b40      	cmp	r3, #64	; 0x40
   31cc8:	d904      	bls.n	31cd4 <_is_ip+0x44>
   31cca:	230b      	movs	r3, #11
   31ccc:	18fb      	adds	r3, r7, r3
   31cce:	781b      	ldrb	r3, [r3, #0]
   31cd0:	2b46      	cmp	r3, #70	; 0x46
   31cd2:	d909      	bls.n	31ce8 <_is_ip+0x58>
   31cd4:	230b      	movs	r3, #11
   31cd6:	18fb      	adds	r3, r7, r3
   31cd8:	781b      	ldrb	r3, [r3, #0]
   31cda:	2b3a      	cmp	r3, #58	; 0x3a
   31cdc:	d004      	beq.n	31ce8 <_is_ip+0x58>
   31cde:	230b      	movs	r3, #11
   31ce0:	18fb      	adds	r3, r7, r3
   31ce2:	781b      	ldrb	r3, [r3, #0]
   31ce4:	2b2f      	cmp	r3, #47	; 0x2f
   31ce6:	d102      	bne.n	31cee <_is_ip+0x5e>
			isv6 = 1;
   31ce8:	2301      	movs	r3, #1
   31cea:	60fb      	str	r3, [r7, #12]
   31cec:	e012      	b.n	31d14 <_is_ip+0x84>
		} else if (ch == '.') {
   31cee:	230b      	movs	r3, #11
   31cf0:	18fb      	adds	r3, r7, r3
   31cf2:	781b      	ldrb	r3, [r3, #0]
   31cf4:	2b2e      	cmp	r3, #46	; 0x2e
   31cf6:	d104      	bne.n	31d02 <_is_ip+0x72>
			if (isv6) {
   31cf8:	68fb      	ldr	r3, [r7, #12]
   31cfa:	2b00      	cmp	r3, #0
   31cfc:	d00a      	beq.n	31d14 <_is_ip+0x84>
				return 0;
   31cfe:	2300      	movs	r3, #0
   31d00:	e00d      	b.n	31d1e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31d02:	230b      	movs	r3, #11
   31d04:	18fb      	adds	r3, r7, r3
   31d06:	781b      	ldrb	r3, [r3, #0]
   31d08:	2230      	movs	r2, #48	; 0x30
   31d0a:	4013      	ands	r3, r2
   31d0c:	2b30      	cmp	r3, #48	; 0x30
   31d0e:	d001      	beq.n	31d14 <_is_ip+0x84>
			return 0;
   31d10:	2300      	movs	r3, #0
   31d12:	e004      	b.n	31d1e <_is_ip+0x8e>
	while (*host != '\0') {
   31d14:	687b      	ldr	r3, [r7, #4]
   31d16:	781b      	ldrb	r3, [r3, #0]
   31d18:	2b00      	cmp	r3, #0
   31d1a:	d1c0      	bne.n	31c9e <_is_ip+0xe>
		}
	}
	return 1;
   31d1c:	2301      	movs	r3, #1
}
   31d1e:	0018      	movs	r0, r3
   31d20:	46bd      	mov	sp, r7
   31d22:	b004      	add	sp, #16
   31d24:	bd80      	pop	{r7, pc}
	...

00031d28 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31d28:	b5b0      	push	{r4, r5, r7, lr}
   31d2a:	b08e      	sub	sp, #56	; 0x38
   31d2c:	af00      	add	r7, sp, #0
   31d2e:	60f8      	str	r0, [r7, #12]
   31d30:	60b9      	str	r1, [r7, #8]
   31d32:	603b      	str	r3, [r7, #0]
   31d34:	1dfb      	adds	r3, r7, #7
   31d36:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31d38:	2337      	movs	r3, #55	; 0x37
   31d3a:	18fb      	adds	r3, r7, r3
   31d3c:	2200      	movs	r2, #0
   31d3e:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31d40:	2300      	movs	r3, #0
   31d42:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31d44:	2300      	movs	r3, #0
   31d46:	633b      	str	r3, [r7, #48]	; 0x30
   31d48:	2300      	movs	r3, #0
   31d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   31d4c:	2300      	movs	r3, #0
   31d4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31d50:	68fb      	ldr	r3, [r7, #12]
   31d52:	2b00      	cmp	r3, #0
   31d54:	d102      	bne.n	31d5c <http_client_send_request+0x34>
		return -EINVAL;
   31d56:	2316      	movs	r3, #22
   31d58:	425b      	negs	r3, r3
   31d5a:	e145      	b.n	31fe8 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31d5c:	68fb      	ldr	r3, [r7, #12]
   31d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31d60:	2b02      	cmp	r3, #2
   31d62:	d902      	bls.n	31d6a <http_client_send_request+0x42>
		return -EBUSY;
   31d64:	2310      	movs	r3, #16
   31d66:	425b      	negs	r3, r3
   31d68:	e13e      	b.n	31fe8 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31d6a:	49a1      	ldr	r1, [pc, #644]	; (31ff0 <http_client_send_request+0x2c8>)
   31d6c:	68bb      	ldr	r3, [r7, #8]
   31d6e:	2207      	movs	r2, #7
   31d70:	0018      	movs	r0, r3
   31d72:	4ba0      	ldr	r3, [pc, #640]	; (31ff4 <http_client_send_request+0x2cc>)
   31d74:	4798      	blx	r3
   31d76:	1e03      	subs	r3, r0, #0
   31d78:	d102      	bne.n	31d80 <http_client_send_request+0x58>
		i = 7;
   31d7a:	2307      	movs	r3, #7
   31d7c:	633b      	str	r3, [r7, #48]	; 0x30
   31d7e:	e009      	b.n	31d94 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31d80:	499d      	ldr	r1, [pc, #628]	; (31ff8 <http_client_send_request+0x2d0>)
   31d82:	68bb      	ldr	r3, [r7, #8]
   31d84:	2208      	movs	r2, #8
   31d86:	0018      	movs	r0, r3
   31d88:	4b9a      	ldr	r3, [pc, #616]	; (31ff4 <http_client_send_request+0x2cc>)
   31d8a:	4798      	blx	r3
   31d8c:	1e03      	subs	r3, r0, #0
   31d8e:	d101      	bne.n	31d94 <http_client_send_request+0x6c>
		i = 8;
   31d90:	2308      	movs	r3, #8
   31d92:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31d94:	68fb      	ldr	r3, [r7, #12]
   31d96:	1c5c      	adds	r4, r3, #1
   31d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31d9a:	68ba      	ldr	r2, [r7, #8]
   31d9c:	18d5      	adds	r5, r2, r3
   31d9e:	68fb      	ldr	r3, [r7, #12]
   31da0:	3301      	adds	r3, #1
   31da2:	0018      	movs	r0, r3
   31da4:	4b95      	ldr	r3, [pc, #596]	; (31ffc <http_client_send_request+0x2d4>)
   31da6:	4798      	blx	r3
   31da8:	0003      	movs	r3, r0
   31daa:	001a      	movs	r2, r3
   31dac:	0029      	movs	r1, r5
   31dae:	0020      	movs	r0, r4
   31db0:	4b90      	ldr	r3, [pc, #576]	; (31ff4 <http_client_send_request+0x2cc>)
   31db2:	4798      	blx	r3
   31db4:	0003      	movs	r3, r0
   31db6:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31db8:	e00d      	b.n	31dd6 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31dbc:	1c5a      	adds	r2, r3, #1
   31dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   31dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31dc2:	68b9      	ldr	r1, [r7, #8]
   31dc4:	188a      	adds	r2, r1, r2
   31dc6:	7811      	ldrb	r1, [r2, #0]
   31dc8:	68fa      	ldr	r2, [r7, #12]
   31dca:	18d3      	adds	r3, r2, r3
   31dcc:	1c0a      	adds	r2, r1, #0
   31dce:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31dd2:	3301      	adds	r3, #1
   31dd4:	633b      	str	r3, [r7, #48]	; 0x30
   31dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31dd8:	68ba      	ldr	r2, [r7, #8]
   31dda:	18d3      	adds	r3, r2, r3
   31ddc:	781b      	ldrb	r3, [r3, #0]
   31dde:	2b00      	cmp	r3, #0
   31de0:	d005      	beq.n	31dee <http_client_send_request+0xc6>
   31de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31de4:	68ba      	ldr	r2, [r7, #8]
   31de6:	18d3      	adds	r3, r2, r3
   31de8:	781b      	ldrb	r3, [r3, #0]
   31dea:	2b2f      	cmp	r3, #47	; 0x2f
   31dec:	d1e5      	bne.n	31dba <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   31dee:	68fa      	ldr	r2, [r7, #12]
   31df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31df2:	18d3      	adds	r3, r2, r3
   31df4:	3301      	adds	r3, #1
   31df6:	2200      	movs	r2, #0
   31df8:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   31dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31dfc:	68ba      	ldr	r2, [r7, #8]
   31dfe:	18d3      	adds	r3, r2, r3
   31e00:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31e02:	68fb      	ldr	r3, [r7, #12]
   31e04:	3301      	adds	r3, #1
   31e06:	781b      	ldrb	r3, [r3, #0]
   31e08:	2b00      	cmp	r3, #0
   31e0a:	d102      	bne.n	31e12 <http_client_send_request+0xea>
		return -EINVAL;
   31e0c:	2316      	movs	r3, #22
   31e0e:	425b      	negs	r3, r3
   31e10:	e0ea      	b.n	31fe8 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31e14:	0018      	movs	r0, r3
   31e16:	4b79      	ldr	r3, [pc, #484]	; (31ffc <http_client_send_request+0x2d4>)
   31e18:	4798      	blx	r3
   31e1a:	0003      	movs	r3, r0
   31e1c:	2b3f      	cmp	r3, #63	; 0x3f
   31e1e:	d902      	bls.n	31e26 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31e20:	235b      	movs	r3, #91	; 0x5b
   31e22:	425b      	negs	r3, r3
   31e24:	e0e0      	b.n	31fe8 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31e26:	68fb      	ldr	r3, [r7, #12]
   31e28:	22d4      	movs	r2, #212	; 0xd4
   31e2a:	589b      	ldr	r3, [r3, r2]
   31e2c:	2b00      	cmp	r3, #0
   31e2e:	d005      	beq.n	31e3c <http_client_send_request+0x114>
		free(module->req.ext_header);
   31e30:	68fb      	ldr	r3, [r7, #12]
   31e32:	22d4      	movs	r2, #212	; 0xd4
   31e34:	589b      	ldr	r3, [r3, r2]
   31e36:	0018      	movs	r0, r3
   31e38:	4b71      	ldr	r3, [pc, #452]	; (32000 <http_client_send_request+0x2d8>)
   31e3a:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31e3e:	2b00      	cmp	r3, #0
   31e40:	d010      	beq.n	31e64 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31e44:	0018      	movs	r0, r3
   31e46:	4b6f      	ldr	r3, [pc, #444]	; (32004 <http_client_send_request+0x2dc>)
   31e48:	4798      	blx	r3
   31e4a:	0003      	movs	r3, r0
   31e4c:	0019      	movs	r1, r3
   31e4e:	68fb      	ldr	r3, [r7, #12]
   31e50:	22d4      	movs	r2, #212	; 0xd4
   31e52:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31e54:	68fb      	ldr	r3, [r7, #12]
   31e56:	22d4      	movs	r2, #212	; 0xd4
   31e58:	589b      	ldr	r3, [r3, r2]
   31e5a:	2b00      	cmp	r3, #0
   31e5c:	d106      	bne.n	31e6c <http_client_send_request+0x144>
			return -ENOMEM;
   31e5e:	230c      	movs	r3, #12
   31e60:	425b      	negs	r3, r3
   31e62:	e0c1      	b.n	31fe8 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31e64:	68fb      	ldr	r3, [r7, #12]
   31e66:	22d4      	movs	r2, #212	; 0xd4
   31e68:	2100      	movs	r1, #0
   31e6a:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31e6c:	68fb      	ldr	r3, [r7, #12]
   31e6e:	2241      	movs	r2, #65	; 0x41
   31e70:	5c99      	ldrb	r1, [r3, r2]
   31e72:	2001      	movs	r0, #1
   31e74:	4381      	bics	r1, r0
   31e76:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31e78:	68fb      	ldr	r3, [r7, #12]
   31e7a:	2200      	movs	r2, #0
   31e7c:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31e80:	781b      	ldrb	r3, [r3, #0]
   31e82:	2b2f      	cmp	r3, #47	; 0x2f
   31e84:	d107      	bne.n	31e96 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31e86:	68fb      	ldr	r3, [r7, #12]
   31e88:	3370      	adds	r3, #112	; 0x70
   31e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31e8c:	0011      	movs	r1, r2
   31e8e:	0018      	movs	r0, r3
   31e90:	4b5d      	ldr	r3, [pc, #372]	; (32008 <http_client_send_request+0x2e0>)
   31e92:	4798      	blx	r3
   31e94:	e00f      	b.n	31eb6 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31e96:	68fb      	ldr	r3, [r7, #12]
   31e98:	2270      	movs	r2, #112	; 0x70
   31e9a:	212f      	movs	r1, #47	; 0x2f
   31e9c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31ea0:	781b      	ldrb	r3, [r3, #0]
   31ea2:	2b00      	cmp	r3, #0
   31ea4:	d007      	beq.n	31eb6 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31ea6:	68fb      	ldr	r3, [r7, #12]
   31ea8:	3370      	adds	r3, #112	; 0x70
   31eaa:	3301      	adds	r3, #1
   31eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31eae:	0011      	movs	r1, r2
   31eb0:	0018      	movs	r0, r3
   31eb2:	4b55      	ldr	r3, [pc, #340]	; (32008 <http_client_send_request+0x2e0>)
   31eb4:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31eb6:	683b      	ldr	r3, [r7, #0]
   31eb8:	2b00      	cmp	r3, #0
   31eba:	d007      	beq.n	31ecc <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31ebc:	68fb      	ldr	r3, [r7, #12]
   31ebe:	33b0      	adds	r3, #176	; 0xb0
   31ec0:	6839      	ldr	r1, [r7, #0]
   31ec2:	2218      	movs	r2, #24
   31ec4:	0018      	movs	r0, r3
   31ec6:	4b51      	ldr	r3, [pc, #324]	; (3200c <http_client_send_request+0x2e4>)
   31ec8:	4798      	blx	r3
   31eca:	e006      	b.n	31eda <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   31ecc:	68fb      	ldr	r3, [r7, #12]
   31ece:	33b0      	adds	r3, #176	; 0xb0
   31ed0:	2218      	movs	r2, #24
   31ed2:	2100      	movs	r1, #0
   31ed4:	0018      	movs	r0, r3
   31ed6:	4b4e      	ldr	r3, [pc, #312]	; (32010 <http_client_send_request+0x2e8>)
   31ed8:	4798      	blx	r3
	}

	module->req.method = method;
   31eda:	68fb      	ldr	r3, [r7, #12]
   31edc:	1dfa      	adds	r2, r7, #7
   31ede:	21c8      	movs	r1, #200	; 0xc8
   31ee0:	7812      	ldrb	r2, [r2, #0]
   31ee2:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31ee4:	68fb      	ldr	r3, [r7, #12]
   31ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31ee8:	2b01      	cmp	r3, #1
   31eea:	d003      	beq.n	31ef4 <http_client_send_request+0x1cc>
   31eec:	d316      	bcc.n	31f1c <http_client_send_request+0x1f4>
   31eee:	2b02      	cmp	r3, #2
   31ef0:	d004      	beq.n	31efc <http_client_send_request+0x1d4>
   31ef2:	e074      	b.n	31fde <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ef6:	2b00      	cmp	r3, #0
   31ef8:	d100      	bne.n	31efc <http_client_send_request+0x1d4>
   31efa:	e073      	b.n	31fe4 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   31efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31efe:	2b00      	cmp	r3, #0
   31f00:	d107      	bne.n	31f12 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31f02:	68fb      	ldr	r3, [r7, #12]
   31f04:	2203      	movs	r2, #3
   31f06:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31f08:	68fb      	ldr	r3, [r7, #12]
   31f0a:	0018      	movs	r0, r3
   31f0c:	4b41      	ldr	r3, [pc, #260]	; (32014 <http_client_send_request+0x2ec>)
   31f0e:	4798      	blx	r3
			break;
   31f10:	e069      	b.n	31fe6 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31f12:	68fb      	ldr	r3, [r7, #12]
   31f14:	2100      	movs	r1, #0
   31f16:	0018      	movs	r0, r3
   31f18:	4b3f      	ldr	r3, [pc, #252]	; (32018 <http_client_send_request+0x2f0>)
   31f1a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   31f1c:	68fb      	ldr	r3, [r7, #12]
   31f1e:	2252      	movs	r2, #82	; 0x52
   31f20:	5c9b      	ldrb	r3, [r3, r2]
   31f22:	2b00      	cmp	r3, #0
   31f24:	d007      	beq.n	31f36 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31f26:	2337      	movs	r3, #55	; 0x37
   31f28:	18fb      	adds	r3, r7, r3
   31f2a:	2237      	movs	r2, #55	; 0x37
   31f2c:	18ba      	adds	r2, r7, r2
   31f2e:	7812      	ldrb	r2, [r2, #0]
   31f30:	2101      	movs	r1, #1
   31f32:	430a      	orrs	r2, r1
   31f34:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31f36:	2337      	movs	r3, #55	; 0x37
   31f38:	18fb      	adds	r3, r7, r3
   31f3a:	781b      	ldrb	r3, [r3, #0]
   31f3c:	001a      	movs	r2, r3
   31f3e:	2101      	movs	r1, #1
   31f40:	2002      	movs	r0, #2
   31f42:	4b36      	ldr	r3, [pc, #216]	; (3201c <http_client_send_request+0x2f4>)
   31f44:	4798      	blx	r3
   31f46:	0003      	movs	r3, r0
   31f48:	001a      	movs	r2, r3
   31f4a:	68fb      	ldr	r3, [r7, #12]
   31f4c:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31f4e:	68fb      	ldr	r3, [r7, #12]
   31f50:	781b      	ldrb	r3, [r3, #0]
   31f52:	b25b      	sxtb	r3, r3
   31f54:	2b00      	cmp	r3, #0
   31f56:	db3f      	blt.n	31fd8 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31f58:	68fb      	ldr	r3, [r7, #12]
   31f5a:	781b      	ldrb	r3, [r3, #0]
   31f5c:	b25b      	sxtb	r3, r3
   31f5e:	001a      	movs	r2, r3
   31f60:	4b2f      	ldr	r3, [pc, #188]	; (32020 <http_client_send_request+0x2f8>)
   31f62:	0092      	lsls	r2, r2, #2
   31f64:	68f9      	ldr	r1, [r7, #12]
   31f66:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31f68:	68fb      	ldr	r3, [r7, #12]
   31f6a:	3301      	adds	r3, #1
   31f6c:	0018      	movs	r0, r3
   31f6e:	4b2d      	ldr	r3, [pc, #180]	; (32024 <http_client_send_request+0x2fc>)
   31f70:	4798      	blx	r3
   31f72:	1e03      	subs	r3, r0, #0
   31f74:	d027      	beq.n	31fc6 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31f76:	2314      	movs	r3, #20
   31f78:	18fb      	adds	r3, r7, r3
   31f7a:	2202      	movs	r2, #2
   31f7c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31f7e:	68fb      	ldr	r3, [r7, #12]
   31f80:	2250      	movs	r2, #80	; 0x50
   31f82:	5a9b      	ldrh	r3, [r3, r2]
   31f84:	021b      	lsls	r3, r3, #8
   31f86:	b21a      	sxth	r2, r3
   31f88:	68fb      	ldr	r3, [r7, #12]
   31f8a:	2150      	movs	r1, #80	; 0x50
   31f8c:	5a5b      	ldrh	r3, [r3, r1]
   31f8e:	0a1b      	lsrs	r3, r3, #8
   31f90:	b29b      	uxth	r3, r3
   31f92:	b21b      	sxth	r3, r3
   31f94:	4313      	orrs	r3, r2
   31f96:	b21b      	sxth	r3, r3
   31f98:	b29a      	uxth	r2, r3
   31f9a:	2314      	movs	r3, #20
   31f9c:	18fb      	adds	r3, r7, r3
   31f9e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31fa0:	68fb      	ldr	r3, [r7, #12]
   31fa2:	3301      	adds	r3, #1
   31fa4:	0018      	movs	r0, r3
   31fa6:	4b20      	ldr	r3, [pc, #128]	; (32028 <http_client_send_request+0x300>)
   31fa8:	4798      	blx	r3
   31faa:	0002      	movs	r2, r0
   31fac:	2314      	movs	r3, #20
   31fae:	18fb      	adds	r3, r7, r3
   31fb0:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31fb2:	68fb      	ldr	r3, [r7, #12]
   31fb4:	781b      	ldrb	r3, [r3, #0]
   31fb6:	b25b      	sxtb	r3, r3
   31fb8:	2214      	movs	r2, #20
   31fba:	18b9      	adds	r1, r7, r2
   31fbc:	2210      	movs	r2, #16
   31fbe:	0018      	movs	r0, r3
   31fc0:	4b1a      	ldr	r3, [pc, #104]	; (3202c <http_client_send_request+0x304>)
   31fc2:	4798      	blx	r3
   31fc4:	e004      	b.n	31fd0 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31fc6:	68fb      	ldr	r3, [r7, #12]
   31fc8:	3301      	adds	r3, #1
   31fca:	0018      	movs	r0, r3
   31fcc:	4b18      	ldr	r3, [pc, #96]	; (32030 <http_client_send_request+0x308>)
   31fce:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   31fd0:	68fb      	ldr	r3, [r7, #12]
   31fd2:	2201      	movs	r2, #1
   31fd4:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   31fd6:	e006      	b.n	31fe6 <http_client_send_request+0x2be>
			return -ENOSPC;
   31fd8:	231c      	movs	r3, #28
   31fda:	425b      	negs	r3, r3
   31fdc:	e004      	b.n	31fe8 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   31fde:	230b      	movs	r3, #11
   31fe0:	425b      	negs	r3, r3
   31fe2:	e001      	b.n	31fe8 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   31fe4:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   31fe6:	2300      	movs	r3, #0
}
   31fe8:	0018      	movs	r0, r3
   31fea:	46bd      	mov	sp, r7
   31fec:	b00e      	add	sp, #56	; 0x38
   31fee:	bdb0      	pop	{r4, r5, r7, pc}
   31ff0:	0003aba4 	.word	0x0003aba4
   31ff4:	00035b45 	.word	0x00035b45
   31ff8:	0003abac 	.word	0x0003abac
   31ffc:	00035b37 	.word	0x00035b37
   32000:	00035735 	.word	0x00035735
   32004:	00035afd 	.word	0x00035afd
   32008:	00035aeb 	.word	0x00035aeb
   3200c:	00035749 	.word	0x00035749
   32010:	0003577f 	.word	0x0003577f
   32014:	00032189 	.word	0x00032189
   32018:	00032035 	.word	0x00032035
   3201c:	00026345 	.word	0x00026345
   32020:	200046f4 	.word	0x200046f4
   32024:	00031c91 	.word	0x00031c91
   32028:	00026a91 	.word	0x00026a91
   3202c:	00026559 	.word	0x00026559
   32030:	00026b99 	.word	0x00026b99

00032034 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   32034:	b580      	push	{r7, lr}
   32036:	b086      	sub	sp, #24
   32038:	af00      	add	r7, sp, #0
   3203a:	6078      	str	r0, [r7, #4]
   3203c:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   3203e:	687b      	ldr	r3, [r7, #4]
   32040:	22c0      	movs	r2, #192	; 0xc0
   32042:	589b      	ldr	r3, [r3, r2]
   32044:	2b00      	cmp	r3, #0
   32046:	d007      	beq.n	32058 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   32048:	687b      	ldr	r3, [r7, #4]
   3204a:	22c0      	movs	r2, #192	; 0xc0
   3204c:	589b      	ldr	r3, [r3, r2]
   3204e:	687a      	ldr	r2, [r7, #4]
   32050:	21c4      	movs	r1, #196	; 0xc4
   32052:	5852      	ldr	r2, [r2, r1]
   32054:	0010      	movs	r0, r2
   32056:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   32058:	687b      	ldr	r3, [r7, #4]
   3205a:	33b0      	adds	r3, #176	; 0xb0
   3205c:	2218      	movs	r2, #24
   3205e:	2100      	movs	r1, #0
   32060:	0018      	movs	r0, r3
   32062:	4b24      	ldr	r3, [pc, #144]	; (320f4 <_http_client_clear_conn+0xc0>)
   32064:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   32066:	687b      	ldr	r3, [r7, #4]
   32068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3206a:	2b00      	cmp	r3, #0
   3206c:	d005      	beq.n	3207a <_http_client_clear_conn+0x46>
		close(module->sock);
   3206e:	687b      	ldr	r3, [r7, #4]
   32070:	781b      	ldrb	r3, [r3, #0]
   32072:	b25b      	sxtb	r3, r3
   32074:	0018      	movs	r0, r3
   32076:	4b20      	ldr	r3, [pc, #128]	; (320f8 <_http_client_clear_conn+0xc4>)
   32078:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   3207a:	687b      	ldr	r3, [r7, #4]
   3207c:	781b      	ldrb	r3, [r3, #0]
   3207e:	b25b      	sxtb	r3, r3
   32080:	001a      	movs	r2, r3
   32082:	4b1e      	ldr	r3, [pc, #120]	; (320fc <_http_client_clear_conn+0xc8>)
   32084:	0092      	lsls	r2, r2, #2
   32086:	2100      	movs	r1, #0
   32088:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   3208a:	687b      	ldr	r3, [r7, #4]
   3208c:	336c      	adds	r3, #108	; 0x6c
   3208e:	226c      	movs	r2, #108	; 0x6c
   32090:	2100      	movs	r1, #0
   32092:	0018      	movs	r0, r3
   32094:	4b17      	ldr	r3, [pc, #92]	; (320f4 <_http_client_clear_conn+0xc0>)
   32096:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   32098:	687b      	ldr	r3, [r7, #4]
   3209a:	33d8      	adds	r3, #216	; 0xd8
   3209c:	2210      	movs	r2, #16
   3209e:	2100      	movs	r1, #0
   320a0:	0018      	movs	r0, r3
   320a2:	4b14      	ldr	r3, [pc, #80]	; (320f4 <_http_client_clear_conn+0xc0>)
   320a4:	4798      	blx	r3
	module->req.state = STATE_INIT;
   320a6:	687b      	ldr	r3, [r7, #4]
   320a8:	2200      	movs	r2, #0
   320aa:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   320ac:	687b      	ldr	r3, [r7, #4]
   320ae:	22d8      	movs	r2, #216	; 0xd8
   320b0:	2100      	movs	r1, #0
   320b2:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   320b4:	687b      	ldr	r3, [r7, #4]
   320b6:	2241      	movs	r2, #65	; 0x41
   320b8:	5c99      	ldrb	r1, [r3, r2]
   320ba:	2001      	movs	r0, #1
   320bc:	4381      	bics	r1, r0
   320be:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   320c0:	687b      	ldr	r3, [r7, #4]
   320c2:	2241      	movs	r2, #65	; 0x41
   320c4:	5c99      	ldrb	r1, [r3, r2]
   320c6:	2002      	movs	r0, #2
   320c8:	4381      	bics	r1, r0
   320ca:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   320cc:	230c      	movs	r3, #12
   320ce:	18fb      	adds	r3, r7, r3
   320d0:	683a      	ldr	r2, [r7, #0]
   320d2:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   320d4:	687b      	ldr	r3, [r7, #4]
   320d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   320d8:	2b00      	cmp	r3, #0
   320da:	d006      	beq.n	320ea <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   320dc:	687b      	ldr	r3, [r7, #4]
   320de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   320e0:	220c      	movs	r2, #12
   320e2:	18ba      	adds	r2, r7, r2
   320e4:	6878      	ldr	r0, [r7, #4]
   320e6:	2104      	movs	r1, #4
   320e8:	4798      	blx	r3
	}
}
   320ea:	46c0      	nop			; (mov r8, r8)
   320ec:	46bd      	mov	sp, r7
   320ee:	b006      	add	sp, #24
   320f0:	bd80      	pop	{r7, pc}
   320f2:	46c0      	nop			; (mov r8, r8)
   320f4:	0003577f 	.word	0x0003577f
   320f8:	00026951 	.word	0x00026951
   320fc:	200046f4 	.word	0x200046f4

00032100 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   32100:	b590      	push	{r4, r7, lr}
   32102:	b087      	sub	sp, #28
   32104:	af00      	add	r7, sp, #0
   32106:	60f8      	str	r0, [r7, #12]
   32108:	60b9      	str	r1, [r7, #8]
   3210a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   3210c:	68fb      	ldr	r3, [r7, #12]
   3210e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   32110:	697b      	ldr	r3, [r7, #20]
   32112:	2241      	movs	r2, #65	; 0x41
   32114:	5c99      	ldrb	r1, [r3, r2]
   32116:	2001      	movs	r0, #1
   32118:	4301      	orrs	r1, r0
   3211a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   3211c:	697b      	ldr	r3, [r7, #20]
   3211e:	2000      	movs	r0, #0
   32120:	5618      	ldrsb	r0, [r3, r0]
   32122:	687b      	ldr	r3, [r7, #4]
   32124:	b29a      	uxth	r2, r3
   32126:	68b9      	ldr	r1, [r7, #8]
   32128:	2300      	movs	r3, #0
   3212a:	4c14      	ldr	r4, [pc, #80]	; (3217c <_http_client_send_wait+0x7c>)
   3212c:	47a0      	blx	r4
   3212e:	0003      	movs	r3, r0
   32130:	613b      	str	r3, [r7, #16]
   32132:	693b      	ldr	r3, [r7, #16]
   32134:	2b00      	cmp	r3, #0
   32136:	da0f      	bge.n	32158 <_http_client_send_wait+0x58>
		module->sending = 0;
   32138:	697b      	ldr	r3, [r7, #20]
   3213a:	2241      	movs	r2, #65	; 0x41
   3213c:	5c99      	ldrb	r1, [r3, r2]
   3213e:	2001      	movs	r0, #1
   32140:	4381      	bics	r1, r0
   32142:	5499      	strb	r1, [r3, r2]
		return result;
   32144:	693b      	ldr	r3, [r7, #16]
   32146:	e014      	b.n	32172 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   32148:	2000      	movs	r0, #0
   3214a:	4b0d      	ldr	r3, [pc, #52]	; (32180 <_http_client_send_wait+0x80>)
   3214c:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   3214e:	697b      	ldr	r3, [r7, #20]
   32150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   32152:	0018      	movs	r0, r3
   32154:	4b0b      	ldr	r3, [pc, #44]	; (32184 <_http_client_send_wait+0x84>)
   32156:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   32158:	697b      	ldr	r3, [r7, #20]
   3215a:	2241      	movs	r2, #65	; 0x41
   3215c:	5c9b      	ldrb	r3, [r3, r2]
   3215e:	2201      	movs	r2, #1
   32160:	4013      	ands	r3, r2
   32162:	b2db      	uxtb	r3, r3
   32164:	2b00      	cmp	r3, #0
   32166:	d003      	beq.n	32170 <_http_client_send_wait+0x70>
   32168:	697b      	ldr	r3, [r7, #20]
   3216a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3216c:	2b02      	cmp	r3, #2
   3216e:	d8eb      	bhi.n	32148 <_http_client_send_wait+0x48>
	}

	return 0;
   32170:	2300      	movs	r3, #0
}
   32172:	0018      	movs	r0, r3
   32174:	46bd      	mov	sp, r7
   32176:	b007      	add	sp, #28
   32178:	bd90      	pop	{r4, r7, pc}
   3217a:	46c0      	nop			; (mov r8, r8)
   3217c:	0002666d 	.word	0x0002666d
   32180:	00022d19 	.word	0x00022d19
   32184:	0003340d 	.word	0x0003340d

00032188 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   32188:	b5f0      	push	{r4, r5, r6, r7, lr}
   3218a:	46c6      	mov	lr, r8
   3218c:	b500      	push	{lr}
   3218e:	b0a0      	sub	sp, #128	; 0x80
   32190:	af02      	add	r7, sp, #8
   32192:	61f8      	str	r0, [r7, #28]
   32194:	4668      	mov	r0, sp
   32196:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   32198:	2318      	movs	r3, #24
   3219a:	2218      	movs	r2, #24
   3219c:	18ba      	adds	r2, r7, r2
   3219e:	18d0      	adds	r0, r2, r3
   321a0:	4bbd      	ldr	r3, [pc, #756]	; (32498 <_http_client_request+0x310>)
   321a2:	469c      	mov	ip, r3
   321a4:	4663      	mov	r3, ip
   321a6:	cb16      	ldmia	r3!, {r1, r2, r4}
   321a8:	c016      	stmia	r0!, {r1, r2, r4}
   321aa:	469c      	mov	ip, r3
   321ac:	4663      	mov	r3, ip
   321ae:	681b      	ldr	r3, [r3, #0]
   321b0:	469c      	mov	ip, r3
   321b2:	4663      	mov	r3, ip
   321b4:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   321b6:	69f8      	ldr	r0, [r7, #28]
   321b8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   321ba:	4684      	mov	ip, r0
   321bc:	2301      	movs	r3, #1
   321be:	425b      	negs	r3, r3
   321c0:	4698      	mov	r8, r3
   321c2:	44c4      	add	ip, r8
   321c4:	4663      	mov	r3, ip
   321c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   321c8:	6038      	str	r0, [r7, #0]
   321ca:	2300      	movs	r3, #0
   321cc:	607b      	str	r3, [r7, #4]
   321ce:	6839      	ldr	r1, [r7, #0]
   321d0:	687a      	ldr	r2, [r7, #4]
   321d2:	000b      	movs	r3, r1
   321d4:	0f5b      	lsrs	r3, r3, #29
   321d6:	469c      	mov	ip, r3
   321d8:	0013      	movs	r3, r2
   321da:	00db      	lsls	r3, r3, #3
   321dc:	617b      	str	r3, [r7, #20]
   321de:	4663      	mov	r3, ip
   321e0:	697c      	ldr	r4, [r7, #20]
   321e2:	431c      	orrs	r4, r3
   321e4:	617c      	str	r4, [r7, #20]
   321e6:	000b      	movs	r3, r1
   321e8:	00db      	lsls	r3, r3, #3
   321ea:	613b      	str	r3, [r7, #16]
   321ec:	0005      	movs	r5, r0
   321ee:	2200      	movs	r2, #0
   321f0:	0016      	movs	r6, r2
   321f2:	0f6a      	lsrs	r2, r5, #29
   321f4:	00f3      	lsls	r3, r6, #3
   321f6:	60fb      	str	r3, [r7, #12]
   321f8:	68fb      	ldr	r3, [r7, #12]
   321fa:	4313      	orrs	r3, r2
   321fc:	60fb      	str	r3, [r7, #12]
   321fe:	00eb      	lsls	r3, r5, #3
   32200:	60bb      	str	r3, [r7, #8]
   32202:	1dc3      	adds	r3, r0, #7
   32204:	08db      	lsrs	r3, r3, #3
   32206:	00db      	lsls	r3, r3, #3
   32208:	466a      	mov	r2, sp
   3220a:	1ad3      	subs	r3, r2, r3
   3220c:	469d      	mov	sp, r3
   3220e:	ab02      	add	r3, sp, #8
   32210:	3300      	adds	r3, #0
   32212:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   32214:	69fb      	ldr	r3, [r7, #28]
   32216:	2b00      	cmp	r3, #0
   32218:	d100      	bne.n	3221c <_http_client_request+0x94>
   3221a:	e346      	b.n	328aa <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   3221c:	69fb      	ldr	r3, [r7, #28]
   3221e:	2241      	movs	r2, #65	; 0x41
   32220:	5c9b      	ldrb	r3, [r3, r2]
   32222:	2201      	movs	r2, #1
   32224:	4013      	ands	r3, r2
   32226:	b2db      	uxtb	r3, r3
   32228:	2b00      	cmp	r3, #0
   3222a:	d000      	beq.n	3222e <_http_client_request+0xa6>
   3222c:	e33f      	b.n	328ae <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   3222e:	69fb      	ldr	r3, [r7, #28]
   32230:	33b0      	adds	r3, #176	; 0xb0
   32232:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   32234:	69fb      	ldr	r3, [r7, #28]
   32236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32238:	2b03      	cmp	r3, #3
   3223a:	d003      	beq.n	32244 <_http_client_request+0xbc>
   3223c:	2b04      	cmp	r3, #4
   3223e:	d100      	bne.n	32242 <_http_client_request+0xba>
   32240:	e1b3      	b.n	325aa <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   32242:	e32f      	b.n	328a4 <_http_client_request+0x71c>
		module->req.content_length = 0;
   32244:	69fb      	ldr	r3, [r7, #28]
   32246:	22cc      	movs	r2, #204	; 0xcc
   32248:	2100      	movs	r1, #0
   3224a:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   3224c:	69fb      	ldr	r3, [r7, #28]
   3224e:	22d0      	movs	r2, #208	; 0xd0
   32250:	2100      	movs	r1, #0
   32252:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   32254:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32256:	69fb      	ldr	r3, [r7, #28]
   32258:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   3225a:	4c90      	ldr	r4, [pc, #576]	; (3249c <_http_client_request+0x314>)
   3225c:	2334      	movs	r3, #52	; 0x34
   3225e:	2018      	movs	r0, #24
   32260:	1838      	adds	r0, r7, r0
   32262:	18c0      	adds	r0, r0, r3
   32264:	69fb      	ldr	r3, [r7, #28]
   32266:	9300      	str	r3, [sp, #0]
   32268:	0023      	movs	r3, r4
   3226a:	4c8d      	ldr	r4, [pc, #564]	; (324a0 <_http_client_request+0x318>)
   3226c:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   3226e:	69fb      	ldr	r3, [r7, #28]
   32270:	22c8      	movs	r2, #200	; 0xc8
   32272:	5c9b      	ldrb	r3, [r3, r2]
   32274:	2b01      	cmp	r3, #1
   32276:	d10a      	bne.n	3228e <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   32278:	498a      	ldr	r1, [pc, #552]	; (324a4 <_http_client_request+0x31c>)
   3227a:	2334      	movs	r3, #52	; 0x34
   3227c:	2218      	movs	r2, #24
   3227e:	4694      	mov	ip, r2
   32280:	44bc      	add	ip, r7
   32282:	4463      	add	r3, ip
   32284:	2204      	movs	r2, #4
   32286:	0018      	movs	r0, r3
   32288:	4b87      	ldr	r3, [pc, #540]	; (324a8 <_http_client_request+0x320>)
   3228a:	4798      	blx	r3
   3228c:	e04e      	b.n	3232c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   3228e:	69fb      	ldr	r3, [r7, #28]
   32290:	22c8      	movs	r2, #200	; 0xc8
   32292:	5c9b      	ldrb	r3, [r3, r2]
   32294:	2b02      	cmp	r3, #2
   32296:	d10a      	bne.n	322ae <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   32298:	4984      	ldr	r1, [pc, #528]	; (324ac <_http_client_request+0x324>)
   3229a:	2334      	movs	r3, #52	; 0x34
   3229c:	2218      	movs	r2, #24
   3229e:	4694      	mov	ip, r2
   322a0:	44bc      	add	ip, r7
   322a2:	4463      	add	r3, ip
   322a4:	2205      	movs	r2, #5
   322a6:	0018      	movs	r0, r3
   322a8:	4b7f      	ldr	r3, [pc, #508]	; (324a8 <_http_client_request+0x320>)
   322aa:	4798      	blx	r3
   322ac:	e03e      	b.n	3232c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   322ae:	69fb      	ldr	r3, [r7, #28]
   322b0:	22c8      	movs	r2, #200	; 0xc8
   322b2:	5c9b      	ldrb	r3, [r3, r2]
   322b4:	2b03      	cmp	r3, #3
   322b6:	d10a      	bne.n	322ce <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   322b8:	497d      	ldr	r1, [pc, #500]	; (324b0 <_http_client_request+0x328>)
   322ba:	2334      	movs	r3, #52	; 0x34
   322bc:	2218      	movs	r2, #24
   322be:	4694      	mov	ip, r2
   322c0:	44bc      	add	ip, r7
   322c2:	4463      	add	r3, ip
   322c4:	2207      	movs	r2, #7
   322c6:	0018      	movs	r0, r3
   322c8:	4b77      	ldr	r3, [pc, #476]	; (324a8 <_http_client_request+0x320>)
   322ca:	4798      	blx	r3
   322cc:	e02e      	b.n	3232c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   322ce:	69fb      	ldr	r3, [r7, #28]
   322d0:	22c8      	movs	r2, #200	; 0xc8
   322d2:	5c9b      	ldrb	r3, [r3, r2]
   322d4:	2b04      	cmp	r3, #4
   322d6:	d10a      	bne.n	322ee <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   322d8:	4976      	ldr	r1, [pc, #472]	; (324b4 <_http_client_request+0x32c>)
   322da:	2334      	movs	r3, #52	; 0x34
   322dc:	2218      	movs	r2, #24
   322de:	4694      	mov	ip, r2
   322e0:	44bc      	add	ip, r7
   322e2:	4463      	add	r3, ip
   322e4:	2204      	movs	r2, #4
   322e6:	0018      	movs	r0, r3
   322e8:	4b6f      	ldr	r3, [pc, #444]	; (324a8 <_http_client_request+0x320>)
   322ea:	4798      	blx	r3
   322ec:	e01e      	b.n	3232c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   322ee:	69fb      	ldr	r3, [r7, #28]
   322f0:	22c8      	movs	r2, #200	; 0xc8
   322f2:	5c9b      	ldrb	r3, [r3, r2]
   322f4:	2b05      	cmp	r3, #5
   322f6:	d10a      	bne.n	3230e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   322f8:	496f      	ldr	r1, [pc, #444]	; (324b8 <_http_client_request+0x330>)
   322fa:	2334      	movs	r3, #52	; 0x34
   322fc:	2218      	movs	r2, #24
   322fe:	4694      	mov	ip, r2
   32300:	44bc      	add	ip, r7
   32302:	4463      	add	r3, ip
   32304:	2208      	movs	r2, #8
   32306:	0018      	movs	r0, r3
   32308:	4b67      	ldr	r3, [pc, #412]	; (324a8 <_http_client_request+0x320>)
   3230a:	4798      	blx	r3
   3230c:	e00e      	b.n	3232c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   3230e:	69fb      	ldr	r3, [r7, #28]
   32310:	22c8      	movs	r2, #200	; 0xc8
   32312:	5c9b      	ldrb	r3, [r3, r2]
   32314:	2b06      	cmp	r3, #6
   32316:	d109      	bne.n	3232c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   32318:	4968      	ldr	r1, [pc, #416]	; (324bc <_http_client_request+0x334>)
   3231a:	2334      	movs	r3, #52	; 0x34
   3231c:	2218      	movs	r2, #24
   3231e:	4694      	mov	ip, r2
   32320:	44bc      	add	ip, r7
   32322:	4463      	add	r3, ip
   32324:	2205      	movs	r2, #5
   32326:	0018      	movs	r0, r3
   32328:	4b5f      	ldr	r3, [pc, #380]	; (324a8 <_http_client_request+0x320>)
   3232a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   3232c:	69fb      	ldr	r3, [r7, #28]
   3232e:	3370      	adds	r3, #112	; 0x70
   32330:	001c      	movs	r4, r3
   32332:	69fb      	ldr	r3, [r7, #28]
   32334:	3370      	adds	r3, #112	; 0x70
   32336:	0018      	movs	r0, r3
   32338:	4b61      	ldr	r3, [pc, #388]	; (324c0 <_http_client_request+0x338>)
   3233a:	4798      	blx	r3
   3233c:	0002      	movs	r2, r0
   3233e:	2334      	movs	r3, #52	; 0x34
   32340:	2118      	movs	r1, #24
   32342:	468c      	mov	ip, r1
   32344:	44bc      	add	ip, r7
   32346:	4463      	add	r3, ip
   32348:	0021      	movs	r1, r4
   3234a:	0018      	movs	r0, r3
   3234c:	4b56      	ldr	r3, [pc, #344]	; (324a8 <_http_client_request+0x320>)
   3234e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   32350:	495c      	ldr	r1, [pc, #368]	; (324c4 <_http_client_request+0x33c>)
   32352:	2334      	movs	r3, #52	; 0x34
   32354:	2218      	movs	r2, #24
   32356:	4694      	mov	ip, r2
   32358:	44bc      	add	ip, r7
   3235a:	4463      	add	r3, ip
   3235c:	220b      	movs	r2, #11
   3235e:	0018      	movs	r0, r3
   32360:	4b51      	ldr	r3, [pc, #324]	; (324a8 <_http_client_request+0x320>)
   32362:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   32364:	4958      	ldr	r1, [pc, #352]	; (324c8 <_http_client_request+0x340>)
   32366:	2334      	movs	r3, #52	; 0x34
   32368:	2218      	movs	r2, #24
   3236a:	4694      	mov	ip, r2
   3236c:	44bc      	add	ip, r7
   3236e:	4463      	add	r3, ip
   32370:	220c      	movs	r2, #12
   32372:	0018      	movs	r0, r3
   32374:	4b4c      	ldr	r3, [pc, #304]	; (324a8 <_http_client_request+0x320>)
   32376:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   32378:	69fb      	ldr	r3, [r7, #28]
   3237a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   3237c:	69fb      	ldr	r3, [r7, #28]
   3237e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   32380:	0018      	movs	r0, r3
   32382:	4b4f      	ldr	r3, [pc, #316]	; (324c0 <_http_client_request+0x338>)
   32384:	4798      	blx	r3
   32386:	0002      	movs	r2, r0
   32388:	2334      	movs	r3, #52	; 0x34
   3238a:	2118      	movs	r1, #24
   3238c:	468c      	mov	ip, r1
   3238e:	44bc      	add	ip, r7
   32390:	4463      	add	r3, ip
   32392:	0021      	movs	r1, r4
   32394:	0018      	movs	r0, r3
   32396:	4b44      	ldr	r3, [pc, #272]	; (324a8 <_http_client_request+0x320>)
   32398:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3239a:	494c      	ldr	r1, [pc, #304]	; (324cc <_http_client_request+0x344>)
   3239c:	2334      	movs	r3, #52	; 0x34
   3239e:	2218      	movs	r2, #24
   323a0:	4694      	mov	ip, r2
   323a2:	44bc      	add	ip, r7
   323a4:	4463      	add	r3, ip
   323a6:	2202      	movs	r2, #2
   323a8:	0018      	movs	r0, r3
   323aa:	4b3f      	ldr	r3, [pc, #252]	; (324a8 <_http_client_request+0x320>)
   323ac:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   323ae:	4948      	ldr	r1, [pc, #288]	; (324d0 <_http_client_request+0x348>)
   323b0:	2334      	movs	r3, #52	; 0x34
   323b2:	2218      	movs	r2, #24
   323b4:	4694      	mov	ip, r2
   323b6:	44bc      	add	ip, r7
   323b8:	4463      	add	r3, ip
   323ba:	2206      	movs	r2, #6
   323bc:	0018      	movs	r0, r3
   323be:	4b3a      	ldr	r3, [pc, #232]	; (324a8 <_http_client_request+0x320>)
   323c0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   323c2:	69fb      	ldr	r3, [r7, #28]
   323c4:	1c5c      	adds	r4, r3, #1
   323c6:	69fb      	ldr	r3, [r7, #28]
   323c8:	3301      	adds	r3, #1
   323ca:	0018      	movs	r0, r3
   323cc:	4b3c      	ldr	r3, [pc, #240]	; (324c0 <_http_client_request+0x338>)
   323ce:	4798      	blx	r3
   323d0:	0002      	movs	r2, r0
   323d2:	2334      	movs	r3, #52	; 0x34
   323d4:	2118      	movs	r1, #24
   323d6:	468c      	mov	ip, r1
   323d8:	44bc      	add	ip, r7
   323da:	4463      	add	r3, ip
   323dc:	0021      	movs	r1, r4
   323de:	0018      	movs	r0, r3
   323e0:	4b31      	ldr	r3, [pc, #196]	; (324a8 <_http_client_request+0x320>)
   323e2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   323e4:	4939      	ldr	r1, [pc, #228]	; (324cc <_http_client_request+0x344>)
   323e6:	2334      	movs	r3, #52	; 0x34
   323e8:	2218      	movs	r2, #24
   323ea:	4694      	mov	ip, r2
   323ec:	44bc      	add	ip, r7
   323ee:	4463      	add	r3, ip
   323f0:	2202      	movs	r2, #2
   323f2:	0018      	movs	r0, r3
   323f4:	4b2c      	ldr	r3, [pc, #176]	; (324a8 <_http_client_request+0x320>)
   323f6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   323f8:	4936      	ldr	r1, [pc, #216]	; (324d4 <_http_client_request+0x34c>)
   323fa:	2334      	movs	r3, #52	; 0x34
   323fc:	2218      	movs	r2, #24
   323fe:	4694      	mov	ip, r2
   32400:	44bc      	add	ip, r7
   32402:	4463      	add	r3, ip
   32404:	2218      	movs	r2, #24
   32406:	0018      	movs	r0, r3
   32408:	4b27      	ldr	r3, [pc, #156]	; (324a8 <_http_client_request+0x320>)
   3240a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   3240c:	4932      	ldr	r1, [pc, #200]	; (324d8 <_http_client_request+0x350>)
   3240e:	2334      	movs	r3, #52	; 0x34
   32410:	2218      	movs	r2, #24
   32412:	4694      	mov	ip, r2
   32414:	44bc      	add	ip, r7
   32416:	4463      	add	r3, ip
   32418:	2213      	movs	r2, #19
   3241a:	0018      	movs	r0, r3
   3241c:	4b22      	ldr	r3, [pc, #136]	; (324a8 <_http_client_request+0x320>)
   3241e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   32420:	492e      	ldr	r1, [pc, #184]	; (324dc <_http_client_request+0x354>)
   32422:	2334      	movs	r3, #52	; 0x34
   32424:	2218      	movs	r2, #24
   32426:	4694      	mov	ip, r2
   32428:	44bc      	add	ip, r7
   3242a:	4463      	add	r3, ip
   3242c:	2217      	movs	r2, #23
   3242e:	0018      	movs	r0, r3
   32430:	4b1d      	ldr	r3, [pc, #116]	; (324a8 <_http_client_request+0x320>)
   32432:	4798      	blx	r3
		if (entity->read != NULL) {
   32434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32436:	68db      	ldr	r3, [r3, #12]
   32438:	2b00      	cmp	r3, #0
   3243a:	d100      	bne.n	3243e <_http_client_request+0x2b6>
   3243c:	e088      	b.n	32550 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   3243e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32440:	781b      	ldrb	r3, [r3, #0]
   32442:	2b00      	cmp	r3, #0
   32444:	d00f      	beq.n	32466 <_http_client_request+0x2de>
				module->req.content_length = -1;
   32446:	69fb      	ldr	r3, [r7, #28]
   32448:	21cc      	movs	r1, #204	; 0xcc
   3244a:	2201      	movs	r2, #1
   3244c:	4252      	negs	r2, r2
   3244e:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   32450:	4923      	ldr	r1, [pc, #140]	; (324e0 <_http_client_request+0x358>)
   32452:	2334      	movs	r3, #52	; 0x34
   32454:	2218      	movs	r2, #24
   32456:	4694      	mov	ip, r2
   32458:	44bc      	add	ip, r7
   3245a:	4463      	add	r3, ip
   3245c:	221c      	movs	r2, #28
   3245e:	0018      	movs	r0, r3
   32460:	4b11      	ldr	r3, [pc, #68]	; (324a8 <_http_client_request+0x320>)
   32462:	4798      	blx	r3
   32464:	e074      	b.n	32550 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   32466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32468:	689b      	ldr	r3, [r3, #8]
   3246a:	2b00      	cmp	r3, #0
   3246c:	d070      	beq.n	32550 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   3246e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32470:	689a      	ldr	r2, [r3, #8]
   32472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32474:	695b      	ldr	r3, [r3, #20]
   32476:	0018      	movs	r0, r3
   32478:	4790      	blx	r2
   3247a:	0001      	movs	r1, r0
   3247c:	69fb      	ldr	r3, [r7, #28]
   3247e:	22cc      	movs	r2, #204	; 0xcc
   32480:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   32482:	69fb      	ldr	r3, [r7, #28]
   32484:	22cc      	movs	r2, #204	; 0xcc
   32486:	589b      	ldr	r3, [r3, r2]
   32488:	2b00      	cmp	r3, #0
   3248a:	da2b      	bge.n	324e4 <_http_client_request+0x35c>
					module->req.content_length = 0;
   3248c:	69fb      	ldr	r3, [r7, #28]
   3248e:	22cc      	movs	r2, #204	; 0xcc
   32490:	2100      	movs	r1, #0
   32492:	5099      	str	r1, [r3, r2]
   32494:	e05c      	b.n	32550 <_http_client_request+0x3c8>
   32496:	46c0      	nop			; (mov r8, r8)
   32498:	0003ac94 	.word	0x0003ac94
   3249c:	00032101 	.word	0x00032101
   324a0:	00033069 	.word	0x00033069
   324a4:	0003abb8 	.word	0x0003abb8
   324a8:	000330e9 	.word	0x000330e9
   324ac:	0003abc0 	.word	0x0003abc0
   324b0:	0003abc8 	.word	0x0003abc8
   324b4:	0003abd0 	.word	0x0003abd0
   324b8:	0003abd8 	.word	0x0003abd8
   324bc:	0003abe4 	.word	0x0003abe4
   324c0:	00035b37 	.word	0x00035b37
   324c4:	0003abec 	.word	0x0003abec
   324c8:	0003abf8 	.word	0x0003abf8
   324cc:	0003ac08 	.word	0x0003ac08
   324d0:	0003ac0c 	.word	0x0003ac0c
   324d4:	0003ac14 	.word	0x0003ac14
   324d8:	0003ac30 	.word	0x0003ac30
   324dc:	0003ac44 	.word	0x0003ac44
   324e0:	0003ac5c 	.word	0x0003ac5c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   324e4:	69fb      	ldr	r3, [r7, #28]
   324e6:	22cc      	movs	r2, #204	; 0xcc
   324e8:	589b      	ldr	r3, [r3, r2]
   324ea:	001a      	movs	r2, r3
   324ec:	49e0      	ldr	r1, [pc, #896]	; (32870 <_http_client_request+0x6e8>)
   324ee:	2328      	movs	r3, #40	; 0x28
   324f0:	2018      	movs	r0, #24
   324f2:	4684      	mov	ip, r0
   324f4:	44bc      	add	ip, r7
   324f6:	4463      	add	r3, ip
   324f8:	0018      	movs	r0, r3
   324fa:	4bde      	ldr	r3, [pc, #888]	; (32874 <_http_client_request+0x6ec>)
   324fc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   324fe:	49de      	ldr	r1, [pc, #888]	; (32878 <_http_client_request+0x6f0>)
   32500:	2334      	movs	r3, #52	; 0x34
   32502:	2218      	movs	r2, #24
   32504:	4694      	mov	ip, r2
   32506:	44bc      	add	ip, r7
   32508:	4463      	add	r3, ip
   3250a:	2210      	movs	r2, #16
   3250c:	0018      	movs	r0, r3
   3250e:	4bdb      	ldr	r3, [pc, #876]	; (3287c <_http_client_request+0x6f4>)
   32510:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   32512:	2328      	movs	r3, #40	; 0x28
   32514:	2218      	movs	r2, #24
   32516:	4694      	mov	ip, r2
   32518:	44bc      	add	ip, r7
   3251a:	4463      	add	r3, ip
   3251c:	0018      	movs	r0, r3
   3251e:	4bd8      	ldr	r3, [pc, #864]	; (32880 <_http_client_request+0x6f8>)
   32520:	4798      	blx	r3
   32522:	0002      	movs	r2, r0
   32524:	2328      	movs	r3, #40	; 0x28
   32526:	2118      	movs	r1, #24
   32528:	1879      	adds	r1, r7, r1
   3252a:	18c9      	adds	r1, r1, r3
   3252c:	2334      	movs	r3, #52	; 0x34
   3252e:	2018      	movs	r0, #24
   32530:	4684      	mov	ip, r0
   32532:	44bc      	add	ip, r7
   32534:	4463      	add	r3, ip
   32536:	0018      	movs	r0, r3
   32538:	4bd0      	ldr	r3, [pc, #832]	; (3287c <_http_client_request+0x6f4>)
   3253a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3253c:	49d1      	ldr	r1, [pc, #836]	; (32884 <_http_client_request+0x6fc>)
   3253e:	2334      	movs	r3, #52	; 0x34
   32540:	2218      	movs	r2, #24
   32542:	4694      	mov	ip, r2
   32544:	44bc      	add	ip, r7
   32546:	4463      	add	r3, ip
   32548:	2202      	movs	r2, #2
   3254a:	0018      	movs	r0, r3
   3254c:	4bcb      	ldr	r3, [pc, #812]	; (3287c <_http_client_request+0x6f4>)
   3254e:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   32550:	69fb      	ldr	r3, [r7, #28]
   32552:	22d4      	movs	r2, #212	; 0xd4
   32554:	589b      	ldr	r3, [r3, r2]
   32556:	2b00      	cmp	r3, #0
   32558:	d012      	beq.n	32580 <_http_client_request+0x3f8>
				module->req.ext_header,
   3255a:	69fb      	ldr	r3, [r7, #28]
   3255c:	22d4      	movs	r2, #212	; 0xd4
   3255e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   32560:	69fb      	ldr	r3, [r7, #28]
   32562:	22d4      	movs	r2, #212	; 0xd4
   32564:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   32566:	0018      	movs	r0, r3
   32568:	4bc5      	ldr	r3, [pc, #788]	; (32880 <_http_client_request+0x6f8>)
   3256a:	4798      	blx	r3
   3256c:	0002      	movs	r2, r0
   3256e:	2334      	movs	r3, #52	; 0x34
   32570:	2118      	movs	r1, #24
   32572:	468c      	mov	ip, r1
   32574:	44bc      	add	ip, r7
   32576:	4463      	add	r3, ip
   32578:	0021      	movs	r1, r4
   3257a:	0018      	movs	r0, r3
   3257c:	4bbf      	ldr	r3, [pc, #764]	; (3287c <_http_client_request+0x6f4>)
   3257e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32580:	49c0      	ldr	r1, [pc, #768]	; (32884 <_http_client_request+0x6fc>)
   32582:	2334      	movs	r3, #52	; 0x34
   32584:	2218      	movs	r2, #24
   32586:	4694      	mov	ip, r2
   32588:	44bc      	add	ip, r7
   3258a:	4463      	add	r3, ip
   3258c:	2202      	movs	r2, #2
   3258e:	0018      	movs	r0, r3
   32590:	4bba      	ldr	r3, [pc, #744]	; (3287c <_http_client_request+0x6f4>)
   32592:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   32594:	2334      	movs	r3, #52	; 0x34
   32596:	2218      	movs	r2, #24
   32598:	4694      	mov	ip, r2
   3259a:	44bc      	add	ip, r7
   3259c:	4463      	add	r3, ip
   3259e:	0018      	movs	r0, r3
   325a0:	4bb9      	ldr	r3, [pc, #740]	; (32888 <_http_client_request+0x700>)
   325a2:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   325a4:	69fb      	ldr	r3, [r7, #28]
   325a6:	2204      	movs	r2, #4
   325a8:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   325aa:	69fb      	ldr	r3, [r7, #28]
   325ac:	22cc      	movs	r2, #204	; 0xcc
   325ae:	589b      	ldr	r3, [r3, r2]
   325b0:	2b00      	cmp	r3, #0
   325b2:	db00      	blt.n	325b6 <_http_client_request+0x42e>
   325b4:	e0c6      	b.n	32744 <_http_client_request+0x5bc>
   325b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   325b8:	68db      	ldr	r3, [r3, #12]
   325ba:	2b00      	cmp	r3, #0
   325bc:	d100      	bne.n	325c0 <_http_client_request+0x438>
   325be:	e0c1      	b.n	32744 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   325c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   325c2:	68dc      	ldr	r4, [r3, #12]
   325c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   325c6:	6958      	ldr	r0, [r3, #20]
   325c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   325ca:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   325cc:	69fb      	ldr	r3, [r7, #28]
   325ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   325d0:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   325d2:	69fb      	ldr	r3, [r7, #28]
   325d4:	22d0      	movs	r2, #208	; 0xd0
   325d6:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   325d8:	002a      	movs	r2, r5
   325da:	47a0      	blx	r4
   325dc:	0003      	movs	r3, r0
   325de:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   325e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325e2:	2b00      	cmp	r3, #0
   325e4:	da01      	bge.n	325ea <_http_client_request+0x462>
				size = 0;
   325e6:	2300      	movs	r3, #0
   325e8:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   325ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   325ec:	220a      	movs	r2, #10
   325ee:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   325f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   325f2:	220d      	movs	r2, #13
   325f4:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   325f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   325f8:	3305      	adds	r3, #5
   325fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
   325fc:	210d      	movs	r1, #13
   325fe:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   32600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32602:	3306      	adds	r3, #6
   32604:	6eba      	ldr	r2, [r7, #104]	; 0x68
   32606:	210a      	movs	r1, #10
   32608:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   3260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3260c:	2b00      	cmp	r3, #0
   3260e:	db14      	blt.n	3263a <_http_client_request+0x4b2>
				ptr = buffer + 2;
   32610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32612:	3302      	adds	r3, #2
   32614:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   32616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32618:	4a9c      	ldr	r2, [pc, #624]	; (3288c <_http_client_request+0x704>)
   3261a:	4013      	ands	r3, r2
   3261c:	d504      	bpl.n	32628 <_http_client_request+0x4a0>
   3261e:	3b01      	subs	r3, #1
   32620:	2210      	movs	r2, #16
   32622:	4252      	negs	r2, r2
   32624:	4313      	orrs	r3, r2
   32626:	3301      	adds	r3, #1
   32628:	001a      	movs	r2, r3
   3262a:	2318      	movs	r3, #24
   3262c:	2118      	movs	r1, #24
   3262e:	468c      	mov	ip, r1
   32630:	44bc      	add	ip, r7
   32632:	4463      	add	r3, ip
   32634:	5c9a      	ldrb	r2, [r3, r2]
   32636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32638:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   3263a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3263c:	2b0f      	cmp	r3, #15
   3263e:	dd19      	ble.n	32674 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   32640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32642:	3301      	adds	r3, #1
   32644:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   32646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32648:	2b00      	cmp	r3, #0
   3264a:	da00      	bge.n	3264e <_http_client_request+0x4c6>
   3264c:	330f      	adds	r3, #15
   3264e:	111b      	asrs	r3, r3, #4
   32650:	001a      	movs	r2, r3
   32652:	4b8e      	ldr	r3, [pc, #568]	; (3288c <_http_client_request+0x704>)
   32654:	4013      	ands	r3, r2
   32656:	d504      	bpl.n	32662 <_http_client_request+0x4da>
   32658:	3b01      	subs	r3, #1
   3265a:	2210      	movs	r2, #16
   3265c:	4252      	negs	r2, r2
   3265e:	4313      	orrs	r3, r2
   32660:	3301      	adds	r3, #1
   32662:	001a      	movs	r2, r3
   32664:	2318      	movs	r3, #24
   32666:	2118      	movs	r1, #24
   32668:	468c      	mov	ip, r1
   3266a:	44bc      	add	ip, r7
   3266c:	4463      	add	r3, ip
   3266e:	5c9a      	ldrb	r2, [r3, r2]
   32670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32672:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   32674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32676:	2bff      	cmp	r3, #255	; 0xff
   32678:	dd18      	ble.n	326ac <_http_client_request+0x524>
				ptr = buffer;
   3267a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3267c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   3267e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32680:	2b00      	cmp	r3, #0
   32682:	da00      	bge.n	32686 <_http_client_request+0x4fe>
   32684:	33ff      	adds	r3, #255	; 0xff
   32686:	121b      	asrs	r3, r3, #8
   32688:	001a      	movs	r2, r3
   3268a:	4b80      	ldr	r3, [pc, #512]	; (3288c <_http_client_request+0x704>)
   3268c:	4013      	ands	r3, r2
   3268e:	d504      	bpl.n	3269a <_http_client_request+0x512>
   32690:	3b01      	subs	r3, #1
   32692:	2210      	movs	r2, #16
   32694:	4252      	negs	r2, r2
   32696:	4313      	orrs	r3, r2
   32698:	3301      	adds	r3, #1
   3269a:	001a      	movs	r2, r3
   3269c:	2318      	movs	r3, #24
   3269e:	2118      	movs	r1, #24
   326a0:	468c      	mov	ip, r1
   326a2:	44bc      	add	ip, r7
   326a4:	4463      	add	r3, ip
   326a6:	5c9a      	ldrb	r2, [r3, r2]
   326a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   326aa:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   326ac:	69fb      	ldr	r3, [r7, #28]
   326ae:	2000      	movs	r0, #0
   326b0:	5618      	ldrsb	r0, [r3, r0]
   326b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   326b4:	3303      	adds	r3, #3
   326b6:	001a      	movs	r2, r3
   326b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   326ba:	1ad3      	subs	r3, r2, r3
   326bc:	b29a      	uxth	r2, r3
   326be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326c0:	b29b      	uxth	r3, r3
   326c2:	18d3      	adds	r3, r2, r3
   326c4:	b29b      	uxth	r3, r3
   326c6:	3304      	adds	r3, #4
   326c8:	b29a      	uxth	r2, r3
   326ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
   326cc:	2300      	movs	r3, #0
   326ce:	4c70      	ldr	r4, [pc, #448]	; (32890 <_http_client_request+0x708>)
   326d0:	47a0      	blx	r4
   326d2:	0003      	movs	r3, r0
   326d4:	663b      	str	r3, [r7, #96]	; 0x60
   326d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   326d8:	2b00      	cmp	r3, #0
   326da:	da07      	bge.n	326ec <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   326dc:	2305      	movs	r3, #5
   326de:	425a      	negs	r2, r3
   326e0:	69fb      	ldr	r3, [r7, #28]
   326e2:	0011      	movs	r1, r2
   326e4:	0018      	movs	r0, r3
   326e6:	4b6b      	ldr	r3, [pc, #428]	; (32894 <_http_client_request+0x70c>)
   326e8:	4798      	blx	r3
				return;
   326ea:	e0e1      	b.n	328b0 <_http_client_request+0x728>
			module->req.sent_length += size;
   326ec:	69fb      	ldr	r3, [r7, #28]
   326ee:	22d0      	movs	r2, #208	; 0xd0
   326f0:	589a      	ldr	r2, [r3, r2]
   326f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326f4:	18d2      	adds	r2, r2, r3
   326f6:	69fb      	ldr	r3, [r7, #28]
   326f8:	21d0      	movs	r1, #208	; 0xd0
   326fa:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   326fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326fe:	2b00      	cmp	r3, #0
   32700:	d000      	beq.n	32704 <_http_client_request+0x57c>
   32702:	e0c9      	b.n	32898 <_http_client_request+0x710>
				if (module->req.entity.close) {
   32704:	69fb      	ldr	r3, [r7, #28]
   32706:	22c0      	movs	r2, #192	; 0xc0
   32708:	589b      	ldr	r3, [r3, r2]
   3270a:	2b00      	cmp	r3, #0
   3270c:	d007      	beq.n	3271e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   3270e:	69fb      	ldr	r3, [r7, #28]
   32710:	22c0      	movs	r2, #192	; 0xc0
   32712:	589b      	ldr	r3, [r3, r2]
   32714:	69fa      	ldr	r2, [r7, #28]
   32716:	21c4      	movs	r1, #196	; 0xc4
   32718:	5852      	ldr	r2, [r2, r1]
   3271a:	0010      	movs	r0, r2
   3271c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3271e:	69fb      	ldr	r3, [r7, #28]
   32720:	2202      	movs	r2, #2
   32722:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32724:	69fb      	ldr	r3, [r7, #28]
   32726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32728:	2b00      	cmp	r3, #0
   3272a:	d100      	bne.n	3272e <_http_client_request+0x5a6>
   3272c:	e0b5      	b.n	3289a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3272e:	69fb      	ldr	r3, [r7, #28]
   32730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32732:	220c      	movs	r2, #12
   32734:	2118      	movs	r1, #24
   32736:	468c      	mov	ip, r1
   32738:	44bc      	add	ip, r7
   3273a:	4462      	add	r2, ip
   3273c:	69f8      	ldr	r0, [r7, #28]
   3273e:	2101      	movs	r1, #1
   32740:	4798      	blx	r3
				break;
   32742:	e0aa      	b.n	3289a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   32744:	69fb      	ldr	r3, [r7, #28]
   32746:	22cc      	movs	r2, #204	; 0xcc
   32748:	589b      	ldr	r3, [r3, r2]
   3274a:	2b00      	cmp	r3, #0
   3274c:	dc00      	bgt.n	32750 <_http_client_request+0x5c8>
   3274e:	e07c      	b.n	3284a <_http_client_request+0x6c2>
   32750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32752:	68db      	ldr	r3, [r3, #12]
   32754:	2b00      	cmp	r3, #0
   32756:	d100      	bne.n	3275a <_http_client_request+0x5d2>
   32758:	e077      	b.n	3284a <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   3275a:	69fb      	ldr	r3, [r7, #28]
   3275c:	22d0      	movs	r2, #208	; 0xd0
   3275e:	589a      	ldr	r2, [r3, r2]
   32760:	69fb      	ldr	r3, [r7, #28]
   32762:	21cc      	movs	r1, #204	; 0xcc
   32764:	585b      	ldr	r3, [r3, r1]
   32766:	429a      	cmp	r2, r3
   32768:	db1f      	blt.n	327aa <_http_client_request+0x622>
				if (module->req.entity.close) {
   3276a:	69fb      	ldr	r3, [r7, #28]
   3276c:	22c0      	movs	r2, #192	; 0xc0
   3276e:	589b      	ldr	r3, [r3, r2]
   32770:	2b00      	cmp	r3, #0
   32772:	d007      	beq.n	32784 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   32774:	69fb      	ldr	r3, [r7, #28]
   32776:	22c0      	movs	r2, #192	; 0xc0
   32778:	589b      	ldr	r3, [r3, r2]
   3277a:	69fa      	ldr	r2, [r7, #28]
   3277c:	21c4      	movs	r1, #196	; 0xc4
   3277e:	5852      	ldr	r2, [r2, r1]
   32780:	0010      	movs	r0, r2
   32782:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   32784:	69fb      	ldr	r3, [r7, #28]
   32786:	2202      	movs	r2, #2
   32788:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3278a:	69fb      	ldr	r3, [r7, #28]
   3278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3278e:	2b00      	cmp	r3, #0
   32790:	d100      	bne.n	32794 <_http_client_request+0x60c>
   32792:	e084      	b.n	3289e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32794:	69fb      	ldr	r3, [r7, #28]
   32796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32798:	220c      	movs	r2, #12
   3279a:	2118      	movs	r1, #24
   3279c:	468c      	mov	ip, r1
   3279e:	44bc      	add	ip, r7
   327a0:	4462      	add	r2, ip
   327a2:	69f8      	ldr	r0, [r7, #28]
   327a4:	2101      	movs	r1, #1
   327a6:	4798      	blx	r3
				break;
   327a8:	e079      	b.n	3289e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   327aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   327ac:	68dc      	ldr	r4, [r3, #12]
   327ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   327b0:	6958      	ldr	r0, [r3, #20]
   327b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   327b4:	69fb      	ldr	r3, [r7, #28]
   327b6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   327b8:	69fb      	ldr	r3, [r7, #28]
   327ba:	22d0      	movs	r2, #208	; 0xd0
   327bc:	589b      	ldr	r3, [r3, r2]
   327be:	002a      	movs	r2, r5
   327c0:	47a0      	blx	r4
   327c2:	0003      	movs	r3, r0
   327c4:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   327c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   327c8:	2b00      	cmp	r3, #0
   327ca:	da0d      	bge.n	327e8 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   327cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   327ce:	2b00      	cmp	r3, #0
   327d0:	d102      	bne.n	327d8 <_http_client_request+0x650>
   327d2:	234d      	movs	r3, #77	; 0x4d
   327d4:	425b      	negs	r3, r3
   327d6:	e001      	b.n	327dc <_http_client_request+0x654>
   327d8:	2305      	movs	r3, #5
   327da:	425b      	negs	r3, r3
   327dc:	69fa      	ldr	r2, [r7, #28]
   327de:	0019      	movs	r1, r3
   327e0:	0010      	movs	r0, r2
   327e2:	4b2c      	ldr	r3, [pc, #176]	; (32894 <_http_client_request+0x70c>)
   327e4:	4798      	blx	r3
			if (size < 0) {
   327e6:	e057      	b.n	32898 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   327e8:	69fb      	ldr	r3, [r7, #28]
   327ea:	22cc      	movs	r2, #204	; 0xcc
   327ec:	589a      	ldr	r2, [r3, r2]
   327ee:	69fb      	ldr	r3, [r7, #28]
   327f0:	21d0      	movs	r1, #208	; 0xd0
   327f2:	585b      	ldr	r3, [r3, r1]
   327f4:	1ad2      	subs	r2, r2, r3
   327f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   327f8:	429a      	cmp	r2, r3
   327fa:	da07      	bge.n	3280c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   327fc:	69fb      	ldr	r3, [r7, #28]
   327fe:	22cc      	movs	r2, #204	; 0xcc
   32800:	589a      	ldr	r2, [r3, r2]
   32802:	69fb      	ldr	r3, [r7, #28]
   32804:	21d0      	movs	r1, #208	; 0xd0
   32806:	585b      	ldr	r3, [r3, r1]
   32808:	1ad3      	subs	r3, r2, r3
   3280a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   3280c:	69fb      	ldr	r3, [r7, #28]
   3280e:	2000      	movs	r0, #0
   32810:	5618      	ldrsb	r0, [r3, r0]
   32812:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32816:	b29a      	uxth	r2, r3
   32818:	2300      	movs	r3, #0
   3281a:	4c1d      	ldr	r4, [pc, #116]	; (32890 <_http_client_request+0x708>)
   3281c:	47a0      	blx	r4
   3281e:	0003      	movs	r3, r0
   32820:	663b      	str	r3, [r7, #96]	; 0x60
   32822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32824:	2b00      	cmp	r3, #0
   32826:	da07      	bge.n	32838 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   32828:	2305      	movs	r3, #5
   3282a:	425a      	negs	r2, r3
   3282c:	69fb      	ldr	r3, [r7, #28]
   3282e:	0011      	movs	r1, r2
   32830:	0018      	movs	r0, r3
   32832:	4b18      	ldr	r3, [pc, #96]	; (32894 <_http_client_request+0x70c>)
   32834:	4798      	blx	r3
					return;
   32836:	e03b      	b.n	328b0 <_http_client_request+0x728>
				module->req.sent_length += size;
   32838:	69fb      	ldr	r3, [r7, #28]
   3283a:	22d0      	movs	r2, #208	; 0xd0
   3283c:	589a      	ldr	r2, [r3, r2]
   3283e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32840:	18d2      	adds	r2, r2, r3
   32842:	69fb      	ldr	r3, [r7, #28]
   32844:	21d0      	movs	r1, #208	; 0xd0
   32846:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   32848:	e026      	b.n	32898 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   3284a:	69fb      	ldr	r3, [r7, #28]
   3284c:	2202      	movs	r2, #2
   3284e:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   32850:	69fb      	ldr	r3, [r7, #28]
   32852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32854:	2b00      	cmp	r3, #0
   32856:	d024      	beq.n	328a2 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32858:	69fb      	ldr	r3, [r7, #28]
   3285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3285c:	220c      	movs	r2, #12
   3285e:	2118      	movs	r1, #24
   32860:	468c      	mov	ip, r1
   32862:	44bc      	add	ip, r7
   32864:	4462      	add	r2, ip
   32866:	69f8      	ldr	r0, [r7, #28]
   32868:	2101      	movs	r1, #1
   3286a:	4798      	blx	r3
			break;
   3286c:	e019      	b.n	328a2 <_http_client_request+0x71a>
   3286e:	46c0      	nop			; (mov r8, r8)
   32870:	0003ac7c 	.word	0x0003ac7c
   32874:	00035a3d 	.word	0x00035a3d
   32878:	0003ac80 	.word	0x0003ac80
   3287c:	000330e9 	.word	0x000330e9
   32880:	00035b37 	.word	0x00035b37
   32884:	0003ac08 	.word	0x0003ac08
   32888:	00033125 	.word	0x00033125
   3288c:	8000000f 	.word	0x8000000f
   32890:	0002666d 	.word	0x0002666d
   32894:	00032035 	.word	0x00032035
		break;
   32898:	e004      	b.n	328a4 <_http_client_request+0x71c>
				break;
   3289a:	46c0      	nop			; (mov r8, r8)
   3289c:	e002      	b.n	328a4 <_http_client_request+0x71c>
				break;
   3289e:	46c0      	nop			; (mov r8, r8)
   328a0:	e000      	b.n	328a4 <_http_client_request+0x71c>
			break;
   328a2:	46c0      	nop			; (mov r8, r8)
   328a4:	69bb      	ldr	r3, [r7, #24]
   328a6:	469d      	mov	sp, r3
   328a8:	e004      	b.n	328b4 <_http_client_request+0x72c>
		return;
   328aa:	46c0      	nop			; (mov r8, r8)
   328ac:	e000      	b.n	328b0 <_http_client_request+0x728>
		return;
   328ae:	46c0      	nop			; (mov r8, r8)
   328b0:	69bb      	ldr	r3, [r7, #24]
   328b2:	469d      	mov	sp, r3
	}
}
   328b4:	46bd      	mov	sp, r7
   328b6:	b01e      	add	sp, #120	; 0x78
   328b8:	bc04      	pop	{r2}
   328ba:	4690      	mov	r8, r2
   328bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   328be:	46c0      	nop			; (mov r8, r8)

000328c0 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   328c0:	b590      	push	{r4, r7, lr}
   328c2:	b083      	sub	sp, #12
   328c4:	af00      	add	r7, sp, #0
   328c6:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   328c8:	687b      	ldr	r3, [r7, #4]
   328ca:	2b00      	cmp	r3, #0
   328cc:	d021      	beq.n	32912 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   328ce:	687b      	ldr	r3, [r7, #4]
   328d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   328d2:	687b      	ldr	r3, [r7, #4]
   328d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   328d6:	429a      	cmp	r2, r3
   328d8:	d307      	bcc.n	328ea <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   328da:	238b      	movs	r3, #139	; 0x8b
   328dc:	425a      	negs	r2, r3
   328de:	687b      	ldr	r3, [r7, #4]
   328e0:	0011      	movs	r1, r2
   328e2:	0018      	movs	r0, r3
   328e4:	4b0d      	ldr	r3, [pc, #52]	; (3291c <_http_client_recv_packet+0x5c>)
   328e6:	4798      	blx	r3
		return;
   328e8:	e014      	b.n	32914 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   328ea:	687b      	ldr	r3, [r7, #4]
   328ec:	2000      	movs	r0, #0
   328ee:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   328f0:	687b      	ldr	r3, [r7, #4]
   328f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   328f4:	687b      	ldr	r3, [r7, #4]
   328f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   328f8:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   328fa:	687b      	ldr	r3, [r7, #4]
   328fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   328fe:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32900:	687b      	ldr	r3, [r7, #4]
   32902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   32904:	b29b      	uxth	r3, r3
   32906:	1ad3      	subs	r3, r2, r3
   32908:	b29a      	uxth	r2, r3
   3290a:	2300      	movs	r3, #0
   3290c:	4c04      	ldr	r4, [pc, #16]	; (32920 <_http_client_recv_packet+0x60>)
   3290e:	47a0      	blx	r4
   32910:	e000      	b.n	32914 <_http_client_recv_packet+0x54>
		return;
   32912:	46c0      	nop			; (mov r8, r8)
}
   32914:	46bd      	mov	sp, r7
   32916:	b003      	add	sp, #12
   32918:	bd90      	pop	{r4, r7, pc}
   3291a:	46c0      	nop			; (mov r8, r8)
   3291c:	00032035 	.word	0x00032035
   32920:	000267d1 	.word	0x000267d1

00032924 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   32924:	b580      	push	{r7, lr}
   32926:	b082      	sub	sp, #8
   32928:	af00      	add	r7, sp, #0
   3292a:	6078      	str	r0, [r7, #4]
   3292c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   3292e:	687b      	ldr	r3, [r7, #4]
   32930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32932:	683b      	ldr	r3, [r7, #0]
   32934:	18d2      	adds	r2, r2, r3
   32936:	687b      	ldr	r3, [r7, #4]
   32938:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   3293a:	687b      	ldr	r3, [r7, #4]
   3293c:	2258      	movs	r2, #88	; 0x58
   3293e:	5a9b      	ldrh	r3, [r3, r2]
   32940:	2b00      	cmp	r3, #0
   32942:	d007      	beq.n	32954 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   32944:	687b      	ldr	r3, [r7, #4]
   32946:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32948:	687b      	ldr	r3, [r7, #4]
   3294a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   3294c:	0019      	movs	r1, r3
   3294e:	0010      	movs	r0, r2
   32950:	4b06      	ldr	r3, [pc, #24]	; (3296c <_http_client_recved_packet+0x48>)
   32952:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   32954:	46c0      	nop			; (mov r8, r8)
   32956:	687b      	ldr	r3, [r7, #4]
   32958:	0018      	movs	r0, r3
   3295a:	4b05      	ldr	r3, [pc, #20]	; (32970 <_http_client_recved_packet+0x4c>)
   3295c:	4798      	blx	r3
   3295e:	1e03      	subs	r3, r0, #0
   32960:	d1f9      	bne.n	32956 <_http_client_recved_packet+0x32>
}
   32962:	46c0      	nop			; (mov r8, r8)
   32964:	46bd      	mov	sp, r7
   32966:	b002      	add	sp, #8
   32968:	bd80      	pop	{r7, pc}
   3296a:	46c0      	nop			; (mov r8, r8)
   3296c:	000333e1 	.word	0x000333e1
   32970:	00032975 	.word	0x00032975

00032974 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   32974:	b580      	push	{r7, lr}
   32976:	b082      	sub	sp, #8
   32978:	af00      	add	r7, sp, #0
   3297a:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   3297c:	687b      	ldr	r3, [r7, #4]
   3297e:	22d8      	movs	r2, #216	; 0xd8
   32980:	589b      	ldr	r3, [r3, r2]
   32982:	2b00      	cmp	r3, #0
   32984:	d002      	beq.n	3298c <_http_client_handle_response+0x18>
   32986:	2b01      	cmp	r3, #1
   32988:	d006      	beq.n	32998 <_http_client_handle_response+0x24>
   3298a:	e00b      	b.n	329a4 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   3298c:	687b      	ldr	r3, [r7, #4]
   3298e:	0018      	movs	r0, r3
   32990:	4b07      	ldr	r3, [pc, #28]	; (329b0 <_http_client_handle_response+0x3c>)
   32992:	4798      	blx	r3
   32994:	0003      	movs	r3, r0
   32996:	e006      	b.n	329a6 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32998:	687b      	ldr	r3, [r7, #4]
   3299a:	0018      	movs	r0, r3
   3299c:	4b05      	ldr	r3, [pc, #20]	; (329b4 <_http_client_handle_response+0x40>)
   3299e:	4798      	blx	r3
   329a0:	0003      	movs	r3, r0
   329a2:	e000      	b.n	329a6 <_http_client_handle_response+0x32>
	}
	return 0;
   329a4:	2300      	movs	r3, #0
}
   329a6:	0018      	movs	r0, r3
   329a8:	46bd      	mov	sp, r7
   329aa:	b002      	add	sp, #8
   329ac:	bd80      	pop	{r7, pc}
   329ae:	46c0      	nop			; (mov r8, r8)
   329b0:	000329b9 	.word	0x000329b9
   329b4:	00032e71 	.word	0x00032e71

000329b8 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   329b8:	b590      	push	{r4, r7, lr}
   329ba:	b08b      	sub	sp, #44	; 0x2c
   329bc:	af00      	add	r7, sp, #0
   329be:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   329c0:	687b      	ldr	r3, [r7, #4]
   329c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   329c4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   329c6:	4b9a      	ldr	r3, [pc, #616]	; (32c30 <_http_client_handle_header+0x278>)
   329c8:	681a      	ldr	r2, [r3, #0]
   329ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   329cc:	0011      	movs	r1, r2
   329ce:	0018      	movs	r0, r3
   329d0:	4b98      	ldr	r3, [pc, #608]	; (32c34 <_http_client_handle_header+0x27c>)
   329d2:	4798      	blx	r3
   329d4:	0003      	movs	r3, r0
   329d6:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   329d8:	69bb      	ldr	r3, [r7, #24]
   329da:	2b00      	cmp	r3, #0
   329dc:	d007      	beq.n	329ee <_http_client_handle_header+0x36>
   329de:	687b      	ldr	r3, [r7, #4]
   329e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   329e2:	687b      	ldr	r3, [r7, #4]
   329e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   329e6:	18d2      	adds	r2, r2, r3
   329e8:	69bb      	ldr	r3, [r7, #24]
   329ea:	429a      	cmp	r2, r3
   329ec:	d807      	bhi.n	329fe <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   329ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   329f0:	687b      	ldr	r3, [r7, #4]
   329f2:	0011      	movs	r1, r2
   329f4:	0018      	movs	r0, r3
   329f6:	4b90      	ldr	r3, [pc, #576]	; (32c38 <_http_client_handle_header+0x280>)
   329f8:	4798      	blx	r3
			return 0;
   329fa:	2300      	movs	r3, #0
   329fc:	e114      	b.n	32c28 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   329fe:	4b8c      	ldr	r3, [pc, #560]	; (32c30 <_http_client_handle_header+0x278>)
   32a00:	681c      	ldr	r4, [r3, #0]
   32a02:	4b8b      	ldr	r3, [pc, #556]	; (32c30 <_http_client_handle_header+0x278>)
   32a04:	681b      	ldr	r3, [r3, #0]
   32a06:	0018      	movs	r0, r3
   32a08:	4b8c      	ldr	r3, [pc, #560]	; (32c3c <_http_client_handle_header+0x284>)
   32a0a:	4798      	blx	r3
   32a0c:	0002      	movs	r2, r0
   32a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a10:	0021      	movs	r1, r4
   32a12:	0018      	movs	r0, r3
   32a14:	4b8a      	ldr	r3, [pc, #552]	; (32c40 <_http_client_handle_header+0x288>)
   32a16:	4798      	blx	r3
   32a18:	1e03      	subs	r3, r0, #0
   32a1a:	d15d      	bne.n	32ad8 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   32a1c:	4b84      	ldr	r3, [pc, #528]	; (32c30 <_http_client_handle_header+0x278>)
   32a1e:	681b      	ldr	r3, [r3, #0]
   32a20:	0018      	movs	r0, r3
   32a22:	4b86      	ldr	r3, [pc, #536]	; (32c3c <_http_client_handle_header+0x284>)
   32a24:	4798      	blx	r3
   32a26:	0002      	movs	r2, r0
   32a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a2a:	189a      	adds	r2, r3, r2
   32a2c:	687b      	ldr	r3, [r7, #4]
   32a2e:	0011      	movs	r1, r2
   32a30:	0018      	movs	r0, r3
   32a32:	4b81      	ldr	r3, [pc, #516]	; (32c38 <_http_client_handle_header+0x280>)
   32a34:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   32a36:	687b      	ldr	r3, [r7, #4]
   32a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a3a:	2b00      	cmp	r3, #0
   32a3c:	d046      	beq.n	32acc <_http_client_handle_header+0x114>
   32a3e:	687b      	ldr	r3, [r7, #4]
   32a40:	22e4      	movs	r2, #228	; 0xe4
   32a42:	5a9b      	ldrh	r3, [r3, r2]
   32a44:	2b00      	cmp	r3, #0
   32a46:	d041      	beq.n	32acc <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   32a48:	687b      	ldr	r3, [r7, #4]
   32a4a:	22dc      	movs	r2, #220	; 0xdc
   32a4c:	589b      	ldr	r3, [r3, r2]
   32a4e:	2b00      	cmp	r3, #0
   32a50:	da19      	bge.n	32a86 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   32a52:	687b      	ldr	r3, [r7, #4]
   32a54:	22e4      	movs	r2, #228	; 0xe4
   32a56:	5a9a      	ldrh	r2, [r3, r2]
   32a58:	230c      	movs	r3, #12
   32a5a:	18fb      	adds	r3, r7, r3
   32a5c:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   32a5e:	230c      	movs	r3, #12
   32a60:	18fb      	adds	r3, r7, r3
   32a62:	2201      	movs	r2, #1
   32a64:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   32a66:	687b      	ldr	r3, [r7, #4]
   32a68:	22e0      	movs	r2, #224	; 0xe0
   32a6a:	2100      	movs	r1, #0
   32a6c:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   32a6e:	230c      	movs	r3, #12
   32a70:	18fb      	adds	r3, r7, r3
   32a72:	2200      	movs	r2, #0
   32a74:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32a76:	687b      	ldr	r3, [r7, #4]
   32a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32a7a:	220c      	movs	r2, #12
   32a7c:	18ba      	adds	r2, r7, r2
   32a7e:	6878      	ldr	r0, [r7, #4]
   32a80:	2102      	movs	r1, #2
   32a82:	4798      	blx	r3
   32a84:	e022      	b.n	32acc <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   32a86:	687b      	ldr	r3, [r7, #4]
   32a88:	22dc      	movs	r2, #220	; 0xdc
   32a8a:	589a      	ldr	r2, [r3, r2]
   32a8c:	687b      	ldr	r3, [r7, #4]
   32a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32a90:	429a      	cmp	r2, r3
   32a92:	dd1b      	ble.n	32acc <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   32a94:	687b      	ldr	r3, [r7, #4]
   32a96:	22e4      	movs	r2, #228	; 0xe4
   32a98:	5a9a      	ldrh	r2, [r3, r2]
   32a9a:	230c      	movs	r3, #12
   32a9c:	18fb      	adds	r3, r7, r3
   32a9e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32aa0:	687b      	ldr	r3, [r7, #4]
   32aa2:	22dc      	movs	r2, #220	; 0xdc
   32aa4:	589b      	ldr	r3, [r3, r2]
   32aa6:	001a      	movs	r2, r3
   32aa8:	230c      	movs	r3, #12
   32aaa:	18fb      	adds	r3, r7, r3
   32aac:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   32aae:	230c      	movs	r3, #12
   32ab0:	18fb      	adds	r3, r7, r3
   32ab2:	2200      	movs	r2, #0
   32ab4:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32ab6:	687b      	ldr	r3, [r7, #4]
   32ab8:	22e0      	movs	r2, #224	; 0xe0
   32aba:	2100      	movs	r1, #0
   32abc:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32abe:	687b      	ldr	r3, [r7, #4]
   32ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32ac2:	220c      	movs	r2, #12
   32ac4:	18ba      	adds	r2, r7, r2
   32ac6:	6878      	ldr	r0, [r7, #4]
   32ac8:	2102      	movs	r1, #2
   32aca:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   32acc:	687b      	ldr	r3, [r7, #4]
   32ace:	22d8      	movs	r2, #216	; 0xd8
   32ad0:	2101      	movs	r1, #1
   32ad2:	5099      	str	r1, [r3, r2]
			return 1;
   32ad4:	2301      	movs	r3, #1
   32ad6:	e0a7      	b.n	32c28 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32ad8:	495a      	ldr	r1, [pc, #360]	; (32c44 <_http_client_handle_header+0x28c>)
   32ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32adc:	2210      	movs	r2, #16
   32ade:	0018      	movs	r0, r3
   32ae0:	4b57      	ldr	r3, [pc, #348]	; (32c40 <_http_client_handle_header+0x288>)
   32ae2:	4798      	blx	r3
   32ae4:	1e03      	subs	r3, r0, #0
   32ae6:	d109      	bne.n	32afc <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32aea:	3310      	adds	r3, #16
   32aec:	0018      	movs	r0, r3
   32aee:	4b56      	ldr	r3, [pc, #344]	; (32c48 <_http_client_handle_header+0x290>)
   32af0:	4798      	blx	r3
   32af2:	0001      	movs	r1, r0
   32af4:	687b      	ldr	r3, [r7, #4]
   32af6:	22dc      	movs	r2, #220	; 0xdc
   32af8:	5099      	str	r1, [r3, r2]
   32afa:	e08b      	b.n	32c14 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   32afc:	4953      	ldr	r1, [pc, #332]	; (32c4c <_http_client_handle_header+0x294>)
   32afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b00:	2213      	movs	r2, #19
   32b02:	0018      	movs	r0, r3
   32b04:	4b4e      	ldr	r3, [pc, #312]	; (32c40 <_http_client_handle_header+0x288>)
   32b06:	4798      	blx	r3
   32b08:	1e03      	subs	r3, r0, #0
   32b0a:	d127      	bne.n	32b5c <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   32b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b0e:	3313      	adds	r3, #19
   32b10:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32b12:	e01e      	b.n	32b52 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   32b14:	6a3b      	ldr	r3, [r7, #32]
   32b16:	781b      	ldrb	r3, [r3, #0]
   32b18:	2b20      	cmp	r3, #32
   32b1a:	d103      	bne.n	32b24 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32b1c:	6a3b      	ldr	r3, [r7, #32]
   32b1e:	3301      	adds	r3, #1
   32b20:	623b      	str	r3, [r7, #32]
   32b22:	e016      	b.n	32b52 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32b24:	6a3b      	ldr	r3, [r7, #32]
   32b26:	781b      	ldrb	r3, [r3, #0]
   32b28:	2b43      	cmp	r3, #67	; 0x43
   32b2a:	d003      	beq.n	32b34 <_http_client_handle_header+0x17c>
   32b2c:	6a3b      	ldr	r3, [r7, #32]
   32b2e:	781b      	ldrb	r3, [r3, #0]
   32b30:	2b63      	cmp	r3, #99	; 0x63
   32b32:	d105      	bne.n	32b40 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32b34:	687b      	ldr	r3, [r7, #4]
   32b36:	21cc      	movs	r1, #204	; 0xcc
   32b38:	2201      	movs	r2, #1
   32b3a:	4252      	negs	r2, r2
   32b3c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   32b3e:	e069      	b.n	32c14 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   32b40:	2386      	movs	r3, #134	; 0x86
   32b42:	425a      	negs	r2, r3
   32b44:	687b      	ldr	r3, [r7, #4]
   32b46:	0011      	movs	r1, r2
   32b48:	0018      	movs	r0, r3
   32b4a:	4b41      	ldr	r3, [pc, #260]	; (32c50 <_http_client_handle_header+0x298>)
   32b4c:	4798      	blx	r3
					return 0;
   32b4e:	2300      	movs	r3, #0
   32b50:	e06a      	b.n	32c28 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32b52:	69ba      	ldr	r2, [r7, #24]
   32b54:	6a3b      	ldr	r3, [r7, #32]
   32b56:	429a      	cmp	r2, r3
   32b58:	d8dc      	bhi.n	32b14 <_http_client_handle_header+0x15c>
   32b5a:	e05b      	b.n	32c14 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   32b5c:	493d      	ldr	r1, [pc, #244]	; (32c54 <_http_client_handle_header+0x29c>)
   32b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b60:	220c      	movs	r2, #12
   32b62:	0018      	movs	r0, r3
   32b64:	4b36      	ldr	r3, [pc, #216]	; (32c40 <_http_client_handle_header+0x288>)
   32b66:	4798      	blx	r3
   32b68:	1e03      	subs	r3, r0, #0
   32b6a:	d126      	bne.n	32bba <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   32b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b6e:	330c      	adds	r3, #12
   32b70:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32b72:	e01d      	b.n	32bb0 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32b74:	69fb      	ldr	r3, [r7, #28]
   32b76:	781b      	ldrb	r3, [r3, #0]
   32b78:	2b20      	cmp	r3, #32
   32b7a:	d103      	bne.n	32b84 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32b7c:	69fb      	ldr	r3, [r7, #28]
   32b7e:	3301      	adds	r3, #1
   32b80:	61fb      	str	r3, [r7, #28]
   32b82:	e015      	b.n	32bb0 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32b84:	69fb      	ldr	r3, [r7, #28]
   32b86:	781b      	ldrb	r3, [r3, #0]
   32b88:	2b4b      	cmp	r3, #75	; 0x4b
   32b8a:	d003      	beq.n	32b94 <_http_client_handle_header+0x1dc>
   32b8c:	69fb      	ldr	r3, [r7, #28]
   32b8e:	781b      	ldrb	r3, [r3, #0]
   32b90:	2b6b      	cmp	r3, #107	; 0x6b
   32b92:	d106      	bne.n	32ba2 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32b94:	687b      	ldr	r3, [r7, #4]
   32b96:	2241      	movs	r2, #65	; 0x41
   32b98:	5c99      	ldrb	r1, [r3, r2]
   32b9a:	2002      	movs	r0, #2
   32b9c:	4301      	orrs	r1, r0
   32b9e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32ba0:	e038      	b.n	32c14 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32ba2:	687b      	ldr	r3, [r7, #4]
   32ba4:	2241      	movs	r2, #65	; 0x41
   32ba6:	5c99      	ldrb	r1, [r3, r2]
   32ba8:	2002      	movs	r0, #2
   32baa:	4381      	bics	r1, r0
   32bac:	5499      	strb	r1, [r3, r2]
				break;
   32bae:	e031      	b.n	32c14 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32bb0:	69ba      	ldr	r2, [r7, #24]
   32bb2:	69fb      	ldr	r3, [r7, #28]
   32bb4:	429a      	cmp	r2, r3
   32bb6:	d8dd      	bhi.n	32b74 <_http_client_handle_header+0x1bc>
   32bb8:	e02c      	b.n	32c14 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32bba:	4927      	ldr	r1, [pc, #156]	; (32c58 <_http_client_handle_header+0x2a0>)
   32bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32bbe:	2205      	movs	r2, #5
   32bc0:	0018      	movs	r0, r3
   32bc2:	4b1f      	ldr	r3, [pc, #124]	; (32c40 <_http_client_handle_header+0x288>)
   32bc4:	4798      	blx	r3
   32bc6:	1e03      	subs	r3, r0, #0
   32bc8:	d124      	bne.n	32c14 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32bcc:	3309      	adds	r3, #9
   32bce:	0018      	movs	r0, r3
   32bd0:	4b1d      	ldr	r3, [pc, #116]	; (32c48 <_http_client_handle_header+0x290>)
   32bd2:	4798      	blx	r3
   32bd4:	0003      	movs	r3, r0
   32bd6:	b299      	uxth	r1, r3
   32bd8:	687b      	ldr	r3, [r7, #4]
   32bda:	22e4      	movs	r2, #228	; 0xe4
   32bdc:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   32bde:	687b      	ldr	r3, [r7, #4]
   32be0:	22dc      	movs	r2, #220	; 0xdc
   32be2:	2100      	movs	r1, #0
   32be4:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32be8:	3305      	adds	r3, #5
   32bea:	781b      	ldrb	r3, [r3, #0]
   32bec:	2b31      	cmp	r3, #49	; 0x31
   32bee:	d804      	bhi.n	32bfa <_http_client_handle_header+0x242>
   32bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32bf2:	3307      	adds	r3, #7
   32bf4:	781b      	ldrb	r3, [r3, #0]
   32bf6:	2b30      	cmp	r3, #48	; 0x30
   32bf8:	d906      	bls.n	32c08 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32bfa:	687b      	ldr	r3, [r7, #4]
   32bfc:	2241      	movs	r2, #65	; 0x41
   32bfe:	5c99      	ldrb	r1, [r3, r2]
   32c00:	2002      	movs	r0, #2
   32c02:	4301      	orrs	r1, r0
   32c04:	5499      	strb	r1, [r3, r2]
   32c06:	e005      	b.n	32c14 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32c08:	687b      	ldr	r3, [r7, #4]
   32c0a:	2241      	movs	r2, #65	; 0x41
   32c0c:	5c99      	ldrb	r1, [r3, r2]
   32c0e:	2002      	movs	r0, #2
   32c10:	4381      	bics	r1, r0
   32c12:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32c14:	4b06      	ldr	r3, [pc, #24]	; (32c30 <_http_client_handle_header+0x278>)
   32c16:	681b      	ldr	r3, [r3, #0]
   32c18:	0018      	movs	r0, r3
   32c1a:	4b08      	ldr	r3, [pc, #32]	; (32c3c <_http_client_handle_header+0x284>)
   32c1c:	4798      	blx	r3
   32c1e:	0002      	movs	r2, r0
   32c20:	69bb      	ldr	r3, [r7, #24]
   32c22:	189b      	adds	r3, r3, r2
   32c24:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32c26:	e6ce      	b.n	329c6 <_http_client_handle_header+0xe>
	}
}
   32c28:	0018      	movs	r0, r3
   32c2a:	46bd      	mov	sp, r7
   32c2c:	b00b      	add	sp, #44	; 0x2c
   32c2e:	bd90      	pop	{r4, r7, pc}
   32c30:	2000012c 	.word	0x2000012c
   32c34:	00035bb5 	.word	0x00035bb5
   32c38:	0003301d 	.word	0x0003301d
   32c3c:	00035b37 	.word	0x00035b37
   32c40:	00035b45 	.word	0x00035b45
   32c44:	0003ac80 	.word	0x0003ac80
   32c48:	000356cd 	.word	0x000356cd
   32c4c:	0003aca4 	.word	0x0003aca4
   32c50:	00032035 	.word	0x00032035
   32c54:	0003acb8 	.word	0x0003acb8
   32c58:	0003acc8 	.word	0x0003acc8

00032c5c <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32c5c:	b580      	push	{r7, lr}
   32c5e:	b088      	sub	sp, #32
   32c60:	af00      	add	r7, sp, #0
   32c62:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32c64:	687b      	ldr	r3, [r7, #4]
   32c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32c68:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32c6a:	2300      	movs	r3, #0
   32c6c:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32c6e:	687b      	ldr	r3, [r7, #4]
   32c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32c72:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32c74:	687b      	ldr	r3, [r7, #4]
   32c76:	22e0      	movs	r2, #224	; 0xe0
   32c78:	589b      	ldr	r3, [r3, r2]
   32c7a:	2b00      	cmp	r3, #0
   32c7c:	db71      	blt.n	32d62 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32c7e:	687b      	ldr	r3, [r7, #4]
   32c80:	22e0      	movs	r2, #224	; 0xe0
   32c82:	589b      	ldr	r3, [r3, r2]
   32c84:	2b00      	cmp	r3, #0
   32c86:	d134      	bne.n	32cf2 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32c88:	687b      	ldr	r3, [r7, #4]
   32c8a:	22d8      	movs	r2, #216	; 0xd8
   32c8c:	2100      	movs	r1, #0
   32c8e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32c90:	687b      	ldr	r3, [r7, #4]
   32c92:	22e4      	movs	r2, #228	; 0xe4
   32c94:	2100      	movs	r1, #0
   32c96:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32c98:	2308      	movs	r3, #8
   32c9a:	18fb      	adds	r3, r7, r3
   32c9c:	2201      	movs	r2, #1
   32c9e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32ca0:	2308      	movs	r3, #8
   32ca2:	18fb      	adds	r3, r7, r3
   32ca4:	2200      	movs	r2, #0
   32ca6:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32ca8:	2308      	movs	r3, #8
   32caa:	18fb      	adds	r3, r7, r3
   32cac:	2200      	movs	r2, #0
   32cae:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32cb0:	687b      	ldr	r3, [r7, #4]
   32cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32cb4:	2b00      	cmp	r3, #0
   32cb6:	d006      	beq.n	32cc6 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32cb8:	687b      	ldr	r3, [r7, #4]
   32cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32cbc:	2208      	movs	r2, #8
   32cbe:	18ba      	adds	r2, r7, r2
   32cc0:	6878      	ldr	r0, [r7, #4]
   32cc2:	2103      	movs	r1, #3
   32cc4:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32cc6:	687b      	ldr	r3, [r7, #4]
   32cc8:	2241      	movs	r2, #65	; 0x41
   32cca:	5c9b      	ldrb	r3, [r3, r2]
   32ccc:	2202      	movs	r2, #2
   32cce:	4013      	ands	r3, r2
   32cd0:	b2db      	uxtb	r3, r3
   32cd2:	2b00      	cmp	r3, #0
   32cd4:	d105      	bne.n	32ce2 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32cd6:	687b      	ldr	r3, [r7, #4]
   32cd8:	2100      	movs	r1, #0
   32cda:	0018      	movs	r0, r3
   32cdc:	4b62      	ldr	r3, [pc, #392]	; (32e68 <_http_client_read_chuked_entity+0x20c>)
   32cde:	4798      	blx	r3
					return;
   32ce0:	e0bf      	b.n	32e62 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32ce2:	697b      	ldr	r3, [r7, #20]
   32ce4:	1c9a      	adds	r2, r3, #2
   32ce6:	687b      	ldr	r3, [r7, #4]
   32ce8:	0011      	movs	r1, r2
   32cea:	0018      	movs	r0, r3
   32cec:	4b5f      	ldr	r3, [pc, #380]	; (32e6c <_http_client_read_chuked_entity+0x210>)
   32cee:	4798      	blx	r3
   32cf0:	e0b2      	b.n	32e58 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32cf2:	687b      	ldr	r3, [r7, #4]
   32cf4:	22e0      	movs	r2, #224	; 0xe0
   32cf6:	589a      	ldr	r2, [r3, r2]
   32cf8:	69fb      	ldr	r3, [r7, #28]
   32cfa:	429a      	cmp	r2, r3
   32cfc:	dd00      	ble.n	32d00 <_http_client_read_chuked_entity+0xa4>
   32cfe:	e0ab      	b.n	32e58 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32d00:	687b      	ldr	r3, [r7, #4]
   32d02:	22e0      	movs	r2, #224	; 0xe0
   32d04:	589b      	ldr	r3, [r3, r2]
   32d06:	001a      	movs	r2, r3
   32d08:	2308      	movs	r3, #8
   32d0a:	18fb      	adds	r3, r7, r3
   32d0c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   32d0e:	2308      	movs	r3, #8
   32d10:	18fb      	adds	r3, r7, r3
   32d12:	697a      	ldr	r2, [r7, #20]
   32d14:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32d16:	2308      	movs	r3, #8
   32d18:	18fb      	adds	r3, r7, r3
   32d1a:	2200      	movs	r2, #0
   32d1c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   32d1e:	687b      	ldr	r3, [r7, #4]
   32d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d22:	2b00      	cmp	r3, #0
   32d24:	d006      	beq.n	32d34 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32d26:	687b      	ldr	r3, [r7, #4]
   32d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d2a:	2208      	movs	r2, #8
   32d2c:	18ba      	adds	r2, r7, r2
   32d2e:	6878      	ldr	r0, [r7, #4]
   32d30:	2103      	movs	r1, #3
   32d32:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32d34:	687b      	ldr	r3, [r7, #4]
   32d36:	22e0      	movs	r2, #224	; 0xe0
   32d38:	589b      	ldr	r3, [r3, r2]
   32d3a:	3302      	adds	r3, #2
   32d3c:	697a      	ldr	r2, [r7, #20]
   32d3e:	18d2      	adds	r2, r2, r3
   32d40:	687b      	ldr	r3, [r7, #4]
   32d42:	0011      	movs	r1, r2
   32d44:	0018      	movs	r0, r3
   32d46:	4b49      	ldr	r3, [pc, #292]	; (32e6c <_http_client_read_chuked_entity+0x210>)
   32d48:	4798      	blx	r3
				length = (int)module->recved_size;
   32d4a:	687b      	ldr	r3, [r7, #4]
   32d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32d4e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32d50:	687b      	ldr	r3, [r7, #4]
   32d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32d54:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32d56:	687b      	ldr	r3, [r7, #4]
   32d58:	21e0      	movs	r1, #224	; 0xe0
   32d5a:	2201      	movs	r2, #1
   32d5c:	4252      	negs	r2, r2
   32d5e:	505a      	str	r2, [r3, r1]
   32d60:	e07a      	b.n	32e58 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32d62:	687b      	ldr	r3, [r7, #4]
   32d64:	22e0      	movs	r2, #224	; 0xe0
   32d66:	2100      	movs	r1, #0
   32d68:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32d6a:	e05a      	b.n	32e22 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32d6c:	697b      	ldr	r3, [r7, #20]
   32d6e:	781b      	ldrb	r3, [r3, #0]
   32d70:	2b0a      	cmp	r3, #10
   32d72:	d106      	bne.n	32d82 <_http_client_read_chuked_entity+0x126>
					buffer++;
   32d74:	697b      	ldr	r3, [r7, #20]
   32d76:	3301      	adds	r3, #1
   32d78:	617b      	str	r3, [r7, #20]
					length--;
   32d7a:	69fb      	ldr	r3, [r7, #28]
   32d7c:	3b01      	subs	r3, #1
   32d7e:	61fb      	str	r3, [r7, #28]
					break;
   32d80:	e052      	b.n	32e28 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32d82:	69bb      	ldr	r3, [r7, #24]
   32d84:	2b00      	cmp	r3, #0
   32d86:	d145      	bne.n	32e14 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32d88:	697b      	ldr	r3, [r7, #20]
   32d8a:	781b      	ldrb	r3, [r3, #0]
   32d8c:	2b2f      	cmp	r3, #47	; 0x2f
   32d8e:	d910      	bls.n	32db2 <_http_client_read_chuked_entity+0x156>
   32d90:	697b      	ldr	r3, [r7, #20]
   32d92:	781b      	ldrb	r3, [r3, #0]
   32d94:	2b39      	cmp	r3, #57	; 0x39
   32d96:	d80c      	bhi.n	32db2 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32d98:	687b      	ldr	r3, [r7, #4]
   32d9a:	22e0      	movs	r2, #224	; 0xe0
   32d9c:	589b      	ldr	r3, [r3, r2]
   32d9e:	011b      	lsls	r3, r3, #4
   32da0:	697a      	ldr	r2, [r7, #20]
   32da2:	7812      	ldrb	r2, [r2, #0]
   32da4:	189b      	adds	r3, r3, r2
   32da6:	3b30      	subs	r3, #48	; 0x30
   32da8:	001a      	movs	r2, r3
   32daa:	687b      	ldr	r3, [r7, #4]
   32dac:	21e0      	movs	r1, #224	; 0xe0
   32dae:	505a      	str	r2, [r3, r1]
   32db0:	e031      	b.n	32e16 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32db2:	697b      	ldr	r3, [r7, #20]
   32db4:	781b      	ldrb	r3, [r3, #0]
   32db6:	2b60      	cmp	r3, #96	; 0x60
   32db8:	d910      	bls.n	32ddc <_http_client_read_chuked_entity+0x180>
   32dba:	697b      	ldr	r3, [r7, #20]
   32dbc:	781b      	ldrb	r3, [r3, #0]
   32dbe:	2b66      	cmp	r3, #102	; 0x66
   32dc0:	d80c      	bhi.n	32ddc <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32dc2:	687b      	ldr	r3, [r7, #4]
   32dc4:	22e0      	movs	r2, #224	; 0xe0
   32dc6:	589b      	ldr	r3, [r3, r2]
   32dc8:	011b      	lsls	r3, r3, #4
   32dca:	697a      	ldr	r2, [r7, #20]
   32dcc:	7812      	ldrb	r2, [r2, #0]
   32dce:	189b      	adds	r3, r3, r2
   32dd0:	3b61      	subs	r3, #97	; 0x61
   32dd2:	001a      	movs	r2, r3
   32dd4:	687b      	ldr	r3, [r7, #4]
   32dd6:	21e0      	movs	r1, #224	; 0xe0
   32dd8:	505a      	str	r2, [r3, r1]
   32dda:	e01c      	b.n	32e16 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   32ddc:	697b      	ldr	r3, [r7, #20]
   32dde:	781b      	ldrb	r3, [r3, #0]
   32de0:	2b40      	cmp	r3, #64	; 0x40
   32de2:	d910      	bls.n	32e06 <_http_client_read_chuked_entity+0x1aa>
   32de4:	697b      	ldr	r3, [r7, #20]
   32de6:	781b      	ldrb	r3, [r3, #0]
   32de8:	2b46      	cmp	r3, #70	; 0x46
   32dea:	d80c      	bhi.n	32e06 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   32dec:	687b      	ldr	r3, [r7, #4]
   32dee:	22e0      	movs	r2, #224	; 0xe0
   32df0:	589b      	ldr	r3, [r3, r2]
   32df2:	011b      	lsls	r3, r3, #4
   32df4:	697a      	ldr	r2, [r7, #20]
   32df6:	7812      	ldrb	r2, [r2, #0]
   32df8:	189b      	adds	r3, r3, r2
   32dfa:	3b41      	subs	r3, #65	; 0x41
   32dfc:	001a      	movs	r2, r3
   32dfe:	687b      	ldr	r3, [r7, #4]
   32e00:	21e0      	movs	r1, #224	; 0xe0
   32e02:	505a      	str	r2, [r3, r1]
   32e04:	e007      	b.n	32e16 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32e06:	697b      	ldr	r3, [r7, #20]
   32e08:	781b      	ldrb	r3, [r3, #0]
   32e0a:	2b3b      	cmp	r3, #59	; 0x3b
   32e0c:	d103      	bne.n	32e16 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   32e0e:	2301      	movs	r3, #1
   32e10:	61bb      	str	r3, [r7, #24]
   32e12:	e000      	b.n	32e16 <_http_client_read_chuked_entity+0x1ba>
					continue;
   32e14:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32e16:	697b      	ldr	r3, [r7, #20]
   32e18:	3301      	adds	r3, #1
   32e1a:	617b      	str	r3, [r7, #20]
   32e1c:	69fb      	ldr	r3, [r7, #28]
   32e1e:	3b01      	subs	r3, #1
   32e20:	61fb      	str	r3, [r7, #28]
   32e22:	69fb      	ldr	r3, [r7, #28]
   32e24:	2b00      	cmp	r3, #0
   32e26:	dca1      	bgt.n	32d6c <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32e28:	687b      	ldr	r3, [r7, #4]
   32e2a:	22e0      	movs	r2, #224	; 0xe0
   32e2c:	589a      	ldr	r2, [r3, r2]
   32e2e:	687b      	ldr	r3, [r7, #4]
   32e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32e32:	429a      	cmp	r2, r3
   32e34:	dd07      	ble.n	32e46 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32e36:	238b      	movs	r3, #139	; 0x8b
   32e38:	425a      	negs	r2, r3
   32e3a:	687b      	ldr	r3, [r7, #4]
   32e3c:	0011      	movs	r1, r2
   32e3e:	0018      	movs	r0, r3
   32e40:	4b09      	ldr	r3, [pc, #36]	; (32e68 <_http_client_read_chuked_entity+0x20c>)
   32e42:	4798      	blx	r3
				return;
   32e44:	e00d      	b.n	32e62 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32e46:	69fb      	ldr	r3, [r7, #28]
   32e48:	2b00      	cmp	r3, #0
   32e4a:	d105      	bne.n	32e58 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32e4c:	687b      	ldr	r3, [r7, #4]
   32e4e:	21e0      	movs	r1, #224	; 0xe0
   32e50:	2201      	movs	r2, #1
   32e52:	4252      	negs	r2, r2
   32e54:	505a      	str	r2, [r3, r1]
				return;
   32e56:	e004      	b.n	32e62 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32e58:	687b      	ldr	r3, [r7, #4]
   32e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32e5c:	2b00      	cmp	r3, #0
   32e5e:	d000      	beq.n	32e62 <_http_client_read_chuked_entity+0x206>
   32e60:	e708      	b.n	32c74 <_http_client_read_chuked_entity+0x18>
}
   32e62:	46bd      	mov	sp, r7
   32e64:	b008      	add	sp, #32
   32e66:	bd80      	pop	{r7, pc}
   32e68:	00032035 	.word	0x00032035
   32e6c:	0003301d 	.word	0x0003301d

00032e70 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32e70:	b580      	push	{r7, lr}
   32e72:	b086      	sub	sp, #24
   32e74:	af00      	add	r7, sp, #0
   32e76:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32e78:	687b      	ldr	r3, [r7, #4]
   32e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32e7c:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32e7e:	687b      	ldr	r3, [r7, #4]
   32e80:	22dc      	movs	r2, #220	; 0xdc
   32e82:	589b      	ldr	r3, [r3, r2]
   32e84:	2b00      	cmp	r3, #0
   32e86:	db58      	blt.n	32f3a <_http_client_handle_entity+0xca>
   32e88:	687b      	ldr	r3, [r7, #4]
   32e8a:	22dc      	movs	r2, #220	; 0xdc
   32e8c:	589a      	ldr	r2, [r3, r2]
   32e8e:	687b      	ldr	r3, [r7, #4]
   32e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32e92:	429a      	cmp	r2, r3
   32e94:	dc51      	bgt.n	32f3a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32e96:	687b      	ldr	r3, [r7, #4]
   32e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32e9a:	0019      	movs	r1, r3
   32e9c:	687b      	ldr	r3, [r7, #4]
   32e9e:	22dc      	movs	r2, #220	; 0xdc
   32ea0:	589b      	ldr	r3, [r3, r2]
   32ea2:	4299      	cmp	r1, r3
   32ea4:	da00      	bge.n	32ea8 <_http_client_handle_entity+0x38>
   32ea6:	e0a9      	b.n	32ffc <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32ea8:	687b      	ldr	r3, [r7, #4]
   32eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32eac:	2b00      	cmp	r3, #0
   32eae:	d020      	beq.n	32ef2 <_http_client_handle_entity+0x82>
   32eb0:	687b      	ldr	r3, [r7, #4]
   32eb2:	22e4      	movs	r2, #228	; 0xe4
   32eb4:	5a9b      	ldrh	r3, [r3, r2]
   32eb6:	2b00      	cmp	r3, #0
   32eb8:	d01b      	beq.n	32ef2 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32eba:	687b      	ldr	r3, [r7, #4]
   32ebc:	22e4      	movs	r2, #228	; 0xe4
   32ebe:	5a9a      	ldrh	r2, [r3, r2]
   32ec0:	2308      	movs	r3, #8
   32ec2:	18fb      	adds	r3, r7, r3
   32ec4:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32ec6:	2308      	movs	r3, #8
   32ec8:	18fb      	adds	r3, r7, r3
   32eca:	2200      	movs	r2, #0
   32ecc:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   32ece:	687b      	ldr	r3, [r7, #4]
   32ed0:	22dc      	movs	r2, #220	; 0xdc
   32ed2:	589b      	ldr	r3, [r3, r2]
   32ed4:	001a      	movs	r2, r3
   32ed6:	2308      	movs	r3, #8
   32ed8:	18fb      	adds	r3, r7, r3
   32eda:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   32edc:	2308      	movs	r3, #8
   32ede:	18fb      	adds	r3, r7, r3
   32ee0:	697a      	ldr	r2, [r7, #20]
   32ee2:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32ee4:	687b      	ldr	r3, [r7, #4]
   32ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32ee8:	2208      	movs	r2, #8
   32eea:	18ba      	adds	r2, r7, r2
   32eec:	6878      	ldr	r0, [r7, #4]
   32eee:	2102      	movs	r1, #2
   32ef0:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32ef2:	687b      	ldr	r3, [r7, #4]
   32ef4:	22d8      	movs	r2, #216	; 0xd8
   32ef6:	2100      	movs	r1, #0
   32ef8:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   32efa:	687b      	ldr	r3, [r7, #4]
   32efc:	22e4      	movs	r2, #228	; 0xe4
   32efe:	2100      	movs	r1, #0
   32f00:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32f02:	687b      	ldr	r3, [r7, #4]
   32f04:	2241      	movs	r2, #65	; 0x41
   32f06:	5c9b      	ldrb	r3, [r3, r2]
   32f08:	2202      	movs	r2, #2
   32f0a:	4013      	ands	r3, r2
   32f0c:	b2db      	uxtb	r3, r3
   32f0e:	2b00      	cmp	r3, #0
   32f10:	d105      	bne.n	32f1e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32f12:	687b      	ldr	r3, [r7, #4]
   32f14:	2100      	movs	r1, #0
   32f16:	0018      	movs	r0, r3
   32f18:	4b3b      	ldr	r3, [pc, #236]	; (33008 <_http_client_handle_entity+0x198>)
   32f1a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   32f1c:	e06e      	b.n	32ffc <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   32f1e:	687b      	ldr	r3, [r7, #4]
   32f20:	22dc      	movs	r2, #220	; 0xdc
   32f22:	589b      	ldr	r3, [r3, r2]
   32f24:	001a      	movs	r2, r3
   32f26:	697b      	ldr	r3, [r7, #20]
   32f28:	189a      	adds	r2, r3, r2
   32f2a:	687b      	ldr	r3, [r7, #4]
   32f2c:	0011      	movs	r1, r2
   32f2e:	0018      	movs	r0, r3
   32f30:	4b36      	ldr	r3, [pc, #216]	; (3300c <_http_client_handle_entity+0x19c>)
   32f32:	4798      	blx	r3
				return module->recved_size;
   32f34:	687b      	ldr	r3, [r7, #4]
   32f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f38:	e061      	b.n	32ffe <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32f3a:	687b      	ldr	r3, [r7, #4]
   32f3c:	22dc      	movs	r2, #220	; 0xdc
   32f3e:	589b      	ldr	r3, [r3, r2]
   32f40:	2b00      	cmp	r3, #0
   32f42:	db57      	blt.n	32ff4 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32f44:	687b      	ldr	r3, [r7, #4]
   32f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32f48:	2308      	movs	r3, #8
   32f4a:	18fb      	adds	r3, r7, r3
   32f4c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32f4e:	2308      	movs	r3, #8
   32f50:	18fb      	adds	r3, r7, r3
   32f52:	697a      	ldr	r2, [r7, #20]
   32f54:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32f56:	687b      	ldr	r3, [r7, #4]
   32f58:	22e0      	movs	r2, #224	; 0xe0
   32f5a:	589a      	ldr	r2, [r3, r2]
   32f5c:	687b      	ldr	r3, [r7, #4]
   32f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f60:	18d2      	adds	r2, r2, r3
   32f62:	687b      	ldr	r3, [r7, #4]
   32f64:	21e0      	movs	r1, #224	; 0xe0
   32f66:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32f68:	687b      	ldr	r3, [r7, #4]
   32f6a:	22dc      	movs	r2, #220	; 0xdc
   32f6c:	589a      	ldr	r2, [r3, r2]
   32f6e:	687b      	ldr	r3, [r7, #4]
   32f70:	21e0      	movs	r1, #224	; 0xe0
   32f72:	585b      	ldr	r3, [r3, r1]
   32f74:	429a      	cmp	r2, r3
   32f76:	dc0c      	bgt.n	32f92 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32f78:	687b      	ldr	r3, [r7, #4]
   32f7a:	22d8      	movs	r2, #216	; 0xd8
   32f7c:	2100      	movs	r1, #0
   32f7e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32f80:	687b      	ldr	r3, [r7, #4]
   32f82:	22e4      	movs	r2, #228	; 0xe4
   32f84:	2100      	movs	r1, #0
   32f86:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32f88:	2308      	movs	r3, #8
   32f8a:	18fb      	adds	r3, r7, r3
   32f8c:	2201      	movs	r2, #1
   32f8e:	721a      	strb	r2, [r3, #8]
   32f90:	e003      	b.n	32f9a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32f92:	2308      	movs	r3, #8
   32f94:	18fb      	adds	r3, r7, r3
   32f96:	2200      	movs	r2, #0
   32f98:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32f9a:	687b      	ldr	r3, [r7, #4]
   32f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32f9e:	2b00      	cmp	r3, #0
   32fa0:	d006      	beq.n	32fb0 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32fa2:	687b      	ldr	r3, [r7, #4]
   32fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32fa6:	2208      	movs	r2, #8
   32fa8:	18ba      	adds	r2, r7, r2
   32faa:	6878      	ldr	r0, [r7, #4]
   32fac:	2103      	movs	r1, #3
   32fae:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32fb0:	2308      	movs	r3, #8
   32fb2:	18fb      	adds	r3, r7, r3
   32fb4:	7a1b      	ldrb	r3, [r3, #8]
   32fb6:	2b01      	cmp	r3, #1
   32fb8:	d112      	bne.n	32fe0 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32fba:	687b      	ldr	r3, [r7, #4]
   32fbc:	2241      	movs	r2, #65	; 0x41
   32fbe:	5c9b      	ldrb	r3, [r3, r2]
   32fc0:	2202      	movs	r2, #2
   32fc2:	4013      	ands	r3, r2
   32fc4:	b2db      	uxtb	r3, r3
   32fc6:	2b00      	cmp	r3, #0
   32fc8:	d10a      	bne.n	32fe0 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   32fca:	4b11      	ldr	r3, [pc, #68]	; (33010 <_http_client_handle_entity+0x1a0>)
   32fcc:	0018      	movs	r0, r3
   32fce:	4b11      	ldr	r3, [pc, #68]	; (33014 <_http_client_handle_entity+0x1a4>)
   32fd0:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   32fd2:	687b      	ldr	r3, [r7, #4]
   32fd4:	2100      	movs	r1, #0
   32fd6:	0018      	movs	r0, r3
   32fd8:	4b0b      	ldr	r3, [pc, #44]	; (33008 <_http_client_handle_entity+0x198>)
   32fda:	4798      	blx	r3
					return 0;
   32fdc:	2300      	movs	r3, #0
   32fde:	e00e      	b.n	32ffe <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   32fe0:	687b      	ldr	r3, [r7, #4]
   32fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32fe4:	697a      	ldr	r2, [r7, #20]
   32fe6:	18d2      	adds	r2, r2, r3
   32fe8:	687b      	ldr	r3, [r7, #4]
   32fea:	0011      	movs	r1, r2
   32fec:	0018      	movs	r0, r3
   32fee:	4b07      	ldr	r3, [pc, #28]	; (3300c <_http_client_handle_entity+0x19c>)
   32ff0:	4798      	blx	r3
   32ff2:	e003      	b.n	32ffc <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   32ff4:	687b      	ldr	r3, [r7, #4]
   32ff6:	0018      	movs	r0, r3
   32ff8:	4b07      	ldr	r3, [pc, #28]	; (33018 <_http_client_handle_entity+0x1a8>)
   32ffa:	4798      	blx	r3
		}
	}

	return 0;
   32ffc:	2300      	movs	r3, #0
}
   32ffe:	0018      	movs	r0, r3
   33000:	46bd      	mov	sp, r7
   33002:	b006      	add	sp, #24
   33004:	bd80      	pop	{r7, pc}
   33006:	46c0      	nop			; (mov r8, r8)
   33008:	00032035 	.word	0x00032035
   3300c:	0003301d 	.word	0x0003301d
   33010:	0003acd0 	.word	0x0003acd0
   33014:	000359a1 	.word	0x000359a1
   33018:	00032c5d 	.word	0x00032c5d

0003301c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   3301c:	b580      	push	{r7, lr}
   3301e:	b084      	sub	sp, #16
   33020:	af00      	add	r7, sp, #0
   33022:	6078      	str	r0, [r7, #4]
   33024:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   33026:	687b      	ldr	r3, [r7, #4]
   33028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3302a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   3302c:	687b      	ldr	r3, [r7, #4]
   3302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33030:	001a      	movs	r2, r3
   33032:	683b      	ldr	r3, [r7, #0]
   33034:	1ad2      	subs	r2, r2, r3
   33036:	68fb      	ldr	r3, [r7, #12]
   33038:	18d3      	adds	r3, r2, r3
   3303a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   3303c:	68bb      	ldr	r3, [r7, #8]
   3303e:	2b00      	cmp	r3, #0
   33040:	dd09      	ble.n	33056 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   33042:	68ba      	ldr	r2, [r7, #8]
   33044:	6839      	ldr	r1, [r7, #0]
   33046:	68fb      	ldr	r3, [r7, #12]
   33048:	0018      	movs	r0, r3
   3304a:	4b06      	ldr	r3, [pc, #24]	; (33064 <_http_client_move_buffer+0x48>)
   3304c:	4798      	blx	r3
		module->recved_size = remain;
   3304e:	68ba      	ldr	r2, [r7, #8]
   33050:	687b      	ldr	r3, [r7, #4]
   33052:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   33054:	e002      	b.n	3305c <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   33056:	687b      	ldr	r3, [r7, #4]
   33058:	2200      	movs	r2, #0
   3305a:	645a      	str	r2, [r3, #68]	; 0x44
}
   3305c:	46c0      	nop			; (mov r8, r8)
   3305e:	46bd      	mov	sp, r7
   33060:	b004      	add	sp, #16
   33062:	bd80      	pop	{r7, pc}
   33064:	0003575b 	.word	0x0003575b

00033068 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   33068:	b580      	push	{r7, lr}
   3306a:	b084      	sub	sp, #16
   3306c:	af00      	add	r7, sp, #0
   3306e:	60f8      	str	r0, [r7, #12]
   33070:	60b9      	str	r1, [r7, #8]
   33072:	607a      	str	r2, [r7, #4]
   33074:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   33076:	68fb      	ldr	r3, [r7, #12]
   33078:	687a      	ldr	r2, [r7, #4]
   3307a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   3307c:	68fb      	ldr	r3, [r7, #12]
   3307e:	68ba      	ldr	r2, [r7, #8]
   33080:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   33082:	68fb      	ldr	r3, [r7, #12]
   33084:	2200      	movs	r2, #0
   33086:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   33088:	68fb      	ldr	r3, [r7, #12]
   3308a:	683a      	ldr	r2, [r7, #0]
   3308c:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   3308e:	68fb      	ldr	r3, [r7, #12]
   33090:	69ba      	ldr	r2, [r7, #24]
   33092:	60da      	str	r2, [r3, #12]
}
   33094:	46c0      	nop			; (mov r8, r8)
   33096:	46bd      	mov	sp, r7
   33098:	b004      	add	sp, #16
   3309a:	bd80      	pop	{r7, pc}

0003309c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   3309c:	b580      	push	{r7, lr}
   3309e:	b084      	sub	sp, #16
   330a0:	af00      	add	r7, sp, #0
   330a2:	6078      	str	r0, [r7, #4]
   330a4:	000a      	movs	r2, r1
   330a6:	1cfb      	adds	r3, r7, #3
   330a8:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   330aa:	687b      	ldr	r3, [r7, #4]
   330ac:	681a      	ldr	r2, [r3, #0]
   330ae:	687b      	ldr	r3, [r7, #4]
   330b0:	685b      	ldr	r3, [r3, #4]
   330b2:	1ad3      	subs	r3, r2, r3
   330b4:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   330b6:	68fb      	ldr	r3, [r7, #12]
   330b8:	2b00      	cmp	r3, #0
   330ba:	dc03      	bgt.n	330c4 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   330bc:	687b      	ldr	r3, [r7, #4]
   330be:	0018      	movs	r0, r3
   330c0:	4b08      	ldr	r3, [pc, #32]	; (330e4 <stream_writer_send_8+0x48>)
   330c2:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   330c4:	687b      	ldr	r3, [r7, #4]
   330c6:	6919      	ldr	r1, [r3, #16]
   330c8:	687b      	ldr	r3, [r7, #4]
   330ca:	685b      	ldr	r3, [r3, #4]
   330cc:	1c58      	adds	r0, r3, #1
   330ce:	687a      	ldr	r2, [r7, #4]
   330d0:	6050      	str	r0, [r2, #4]
   330d2:	18cb      	adds	r3, r1, r3
   330d4:	1cfa      	adds	r2, r7, #3
   330d6:	7812      	ldrb	r2, [r2, #0]
   330d8:	701a      	strb	r2, [r3, #0]
}
   330da:	46c0      	nop			; (mov r8, r8)
   330dc:	46bd      	mov	sp, r7
   330de:	b004      	add	sp, #16
   330e0:	bd80      	pop	{r7, pc}
   330e2:	46c0      	nop			; (mov r8, r8)
   330e4:	00033125 	.word	0x00033125

000330e8 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   330e8:	b580      	push	{r7, lr}
   330ea:	b084      	sub	sp, #16
   330ec:	af00      	add	r7, sp, #0
   330ee:	60f8      	str	r0, [r7, #12]
   330f0:	60b9      	str	r1, [r7, #8]
   330f2:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   330f4:	e00d      	b.n	33112 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   330f6:	68bb      	ldr	r3, [r7, #8]
   330f8:	781b      	ldrb	r3, [r3, #0]
   330fa:	b25a      	sxtb	r2, r3
   330fc:	68fb      	ldr	r3, [r7, #12]
   330fe:	0011      	movs	r1, r2
   33100:	0018      	movs	r0, r3
   33102:	4b07      	ldr	r3, [pc, #28]	; (33120 <stream_writer_send_buffer+0x38>)
   33104:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   33106:	687b      	ldr	r3, [r7, #4]
   33108:	3b01      	subs	r3, #1
   3310a:	607b      	str	r3, [r7, #4]
   3310c:	68bb      	ldr	r3, [r7, #8]
   3310e:	3301      	adds	r3, #1
   33110:	60bb      	str	r3, [r7, #8]
   33112:	687b      	ldr	r3, [r7, #4]
   33114:	2b00      	cmp	r3, #0
   33116:	d1ee      	bne.n	330f6 <stream_writer_send_buffer+0xe>
	}
}
   33118:	46c0      	nop			; (mov r8, r8)
   3311a:	46bd      	mov	sp, r7
   3311c:	b004      	add	sp, #16
   3311e:	bd80      	pop	{r7, pc}
   33120:	0003309d 	.word	0x0003309d

00033124 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   33124:	b590      	push	{r4, r7, lr}
   33126:	b083      	sub	sp, #12
   33128:	af00      	add	r7, sp, #0
   3312a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   3312c:	687b      	ldr	r3, [r7, #4]
   3312e:	685b      	ldr	r3, [r3, #4]
   33130:	2b00      	cmp	r3, #0
   33132:	d00c      	beq.n	3314e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   33134:	687b      	ldr	r3, [r7, #4]
   33136:	689c      	ldr	r4, [r3, #8]
   33138:	687b      	ldr	r3, [r7, #4]
   3313a:	68d8      	ldr	r0, [r3, #12]
   3313c:	687b      	ldr	r3, [r7, #4]
   3313e:	6919      	ldr	r1, [r3, #16]
   33140:	687b      	ldr	r3, [r7, #4]
   33142:	685b      	ldr	r3, [r3, #4]
   33144:	001a      	movs	r2, r3
   33146:	47a0      	blx	r4
		writer->written = 0;
   33148:	687b      	ldr	r3, [r7, #4]
   3314a:	2200      	movs	r2, #0
   3314c:	605a      	str	r2, [r3, #4]
	}
}
   3314e:	46c0      	nop			; (mov r8, r8)
   33150:	46bd      	mov	sp, r7
   33152:	b003      	add	sp, #12
   33154:	bd90      	pop	{r4, r7, pc}
	...

00033158 <system_cpu_clock_get_hz>:
{
   33158:	b580      	push	{r7, lr}
   3315a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   3315c:	2000      	movs	r0, #0
   3315e:	4b05      	ldr	r3, [pc, #20]	; (33174 <system_cpu_clock_get_hz+0x1c>)
   33160:	4798      	blx	r3
   33162:	0002      	movs	r2, r0
   33164:	4b04      	ldr	r3, [pc, #16]	; (33178 <system_cpu_clock_get_hz+0x20>)
   33166:	7a1b      	ldrb	r3, [r3, #8]
   33168:	b2db      	uxtb	r3, r3
   3316a:	40da      	lsrs	r2, r3
   3316c:	0013      	movs	r3, r2
}
   3316e:	0018      	movs	r0, r3
   33170:	46bd      	mov	sp, r7
   33172:	bd80      	pop	{r7, pc}
   33174:	0002ab39 	.word	0x0002ab39
   33178:	40000400 	.word	0x40000400

0003317c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   3317c:	b580      	push	{r7, lr}
   3317e:	b084      	sub	sp, #16
   33180:	af00      	add	r7, sp, #0
   33182:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   33184:	687b      	ldr	r3, [r7, #4]
   33186:	681b      	ldr	r3, [r3, #0]
   33188:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   3318a:	46c0      	nop			; (mov r8, r8)
   3318c:	68fb      	ldr	r3, [r7, #12]
   3318e:	689b      	ldr	r3, [r3, #8]
   33190:	2202      	movs	r2, #2
   33192:	4013      	ands	r3, r2
   33194:	d1fa      	bne.n	3318c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   33196:	68fb      	ldr	r3, [r7, #12]
   33198:	681b      	ldr	r3, [r3, #0]
   3319a:	2202      	movs	r2, #2
   3319c:	431a      	orrs	r2, r3
   3319e:	68fb      	ldr	r3, [r7, #12]
   331a0:	601a      	str	r2, [r3, #0]
}
   331a2:	46c0      	nop			; (mov r8, r8)
   331a4:	46bd      	mov	sp, r7
   331a6:	b004      	add	sp, #16
   331a8:	bd80      	pop	{r7, pc}
	...

000331ac <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   331ac:	b580      	push	{r7, lr}
   331ae:	b082      	sub	sp, #8
   331b0:	af00      	add	r7, sp, #0
   331b2:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   331b4:	4b04      	ldr	r3, [pc, #16]	; (331c8 <sw_timer_tcc_callback+0x1c>)
   331b6:	681b      	ldr	r3, [r3, #0]
   331b8:	1c5a      	adds	r2, r3, #1
   331ba:	4b03      	ldr	r3, [pc, #12]	; (331c8 <sw_timer_tcc_callback+0x1c>)
   331bc:	601a      	str	r2, [r3, #0]
}
   331be:	46c0      	nop			; (mov r8, r8)
   331c0:	46bd      	mov	sp, r7
   331c2:	b002      	add	sp, #8
   331c4:	bd80      	pop	{r7, pc}
   331c6:	46c0      	nop			; (mov r8, r8)
   331c8:	20004710 	.word	0x20004710

000331cc <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   331cc:	b580      	push	{r7, lr}
   331ce:	b082      	sub	sp, #8
   331d0:	af00      	add	r7, sp, #0
   331d2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   331d4:	687b      	ldr	r3, [r7, #4]
   331d6:	2264      	movs	r2, #100	; 0x64
   331d8:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   331da:	687b      	ldr	r3, [r7, #4]
   331dc:	2200      	movs	r2, #0
   331de:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   331e0:	687b      	ldr	r3, [r7, #4]
   331e2:	2200      	movs	r2, #0
   331e4:	705a      	strb	r2, [r3, #1]
}
   331e6:	46c0      	nop			; (mov r8, r8)
   331e8:	46bd      	mov	sp, r7
   331ea:	b002      	add	sp, #8
   331ec:	bd80      	pop	{r7, pc}
	...

000331f0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   331f0:	b590      	push	{r4, r7, lr}
   331f2:	b0b1      	sub	sp, #196	; 0xc4
   331f4:	af00      	add	r7, sp, #0
   331f6:	6078      	str	r0, [r7, #4]
   331f8:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   331fa:	230c      	movs	r3, #12
   331fc:	18fb      	adds	r3, r7, r3
   331fe:	4a2e      	ldr	r2, [pc, #184]	; (332b8 <sw_timer_init+0xc8>)
   33200:	ca13      	ldmia	r2!, {r0, r1, r4}
   33202:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   33204:	683b      	ldr	r3, [r7, #0]
   33206:	885b      	ldrh	r3, [r3, #2]
   33208:	001a      	movs	r2, r3
   3320a:	687b      	ldr	r3, [r7, #4]
   3320c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3320e:	687b      	ldr	r3, [r7, #4]
   33210:	3314      	adds	r3, #20
   33212:	22bc      	movs	r2, #188	; 0xbc
   33214:	18ba      	adds	r2, r7, r2
   33216:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   33218:	683b      	ldr	r3, [r7, #0]
   3321a:	781b      	ldrb	r3, [r3, #0]
   3321c:	001a      	movs	r2, r3
   3321e:	230c      	movs	r3, #12
   33220:	18fb      	adds	r3, r7, r3
   33222:	0092      	lsls	r2, r2, #2
   33224:	58d2      	ldr	r2, [r2, r3]
   33226:	2318      	movs	r3, #24
   33228:	18fb      	adds	r3, r7, r3
   3322a:	0011      	movs	r1, r2
   3322c:	0018      	movs	r0, r3
   3322e:	4b23      	ldr	r3, [pc, #140]	; (332bc <sw_timer_init+0xcc>)
   33230:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   33232:	4b23      	ldr	r3, [pc, #140]	; (332c0 <sw_timer_init+0xd0>)
   33234:	4798      	blx	r3
   33236:	0004      	movs	r4, r0
   33238:	683b      	ldr	r3, [r7, #0]
   3323a:	885b      	ldrh	r3, [r3, #2]
   3323c:	001a      	movs	r2, r3
   3323e:	4b21      	ldr	r3, [pc, #132]	; (332c4 <sw_timer_init+0xd4>)
   33240:	0011      	movs	r1, r2
   33242:	22fa      	movs	r2, #250	; 0xfa
   33244:	0210      	lsls	r0, r2, #8
   33246:	4798      	blx	r3
   33248:	0003      	movs	r3, r0
   3324a:	001a      	movs	r2, r3
   3324c:	4b1e      	ldr	r3, [pc, #120]	; (332c8 <sw_timer_init+0xd8>)
   3324e:	0011      	movs	r1, r2
   33250:	0020      	movs	r0, r4
   33252:	4798      	blx	r3
   33254:	0003      	movs	r3, r0
   33256:	001a      	movs	r2, r3
   33258:	2318      	movs	r3, #24
   3325a:	18fb      	adds	r3, r7, r3
   3325c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   3325e:	2318      	movs	r3, #24
   33260:	18fb      	adds	r3, r7, r3
   33262:	2205      	movs	r2, #5
   33264:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   33266:	683b      	ldr	r3, [r7, #0]
   33268:	781b      	ldrb	r3, [r3, #0]
   3326a:	001a      	movs	r2, r3
   3326c:	230c      	movs	r3, #12
   3326e:	18fb      	adds	r3, r7, r3
   33270:	0092      	lsls	r2, r2, #2
   33272:	58d1      	ldr	r1, [r2, r3]
   33274:	2318      	movs	r3, #24
   33276:	18fa      	adds	r2, r7, r3
   33278:	23bc      	movs	r3, #188	; 0xbc
   3327a:	18fb      	adds	r3, r7, r3
   3327c:	681b      	ldr	r3, [r3, #0]
   3327e:	0018      	movs	r0, r3
   33280:	4b12      	ldr	r3, [pc, #72]	; (332cc <sw_timer_init+0xdc>)
   33282:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   33284:	683b      	ldr	r3, [r7, #0]
   33286:	785b      	ldrb	r3, [r3, #1]
   33288:	3308      	adds	r3, #8
   3328a:	b2da      	uxtb	r2, r3
   3328c:	4910      	ldr	r1, [pc, #64]	; (332d0 <sw_timer_init+0xe0>)
   3328e:	23bc      	movs	r3, #188	; 0xbc
   33290:	18fb      	adds	r3, r7, r3
   33292:	681b      	ldr	r3, [r3, #0]
   33294:	0018      	movs	r0, r3
   33296:	4b0f      	ldr	r3, [pc, #60]	; (332d4 <sw_timer_init+0xe4>)
   33298:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3329a:	683b      	ldr	r3, [r7, #0]
   3329c:	785b      	ldrb	r3, [r3, #1]
   3329e:	3308      	adds	r3, #8
   332a0:	b2da      	uxtb	r2, r3
   332a2:	23bc      	movs	r3, #188	; 0xbc
   332a4:	18fb      	adds	r3, r7, r3
   332a6:	681b      	ldr	r3, [r3, #0]
   332a8:	0011      	movs	r1, r2
   332aa:	0018      	movs	r0, r3
   332ac:	4b0a      	ldr	r3, [pc, #40]	; (332d8 <sw_timer_init+0xe8>)
   332ae:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   332b0:	46c0      	nop			; (mov r8, r8)
   332b2:	46bd      	mov	sp, r7
   332b4:	b031      	add	sp, #196	; 0xc4
   332b6:	bd90      	pop	{r4, r7, pc}
   332b8:	0003ad10 	.word	0x0003ad10
   332bc:	0002b0d1 	.word	0x0002b0d1
   332c0:	00033159 	.word	0x00033159
   332c4:	000338b9 	.word	0x000338b9
   332c8:	000337a5 	.word	0x000337a5
   332cc:	0002b72d 	.word	0x0002b72d
   332d0:	000331ad 	.word	0x000331ad
   332d4:	0002bb45 	.word	0x0002bb45
   332d8:	0002bb85 	.word	0x0002bb85

000332dc <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   332dc:	b580      	push	{r7, lr}
   332de:	b084      	sub	sp, #16
   332e0:	af00      	add	r7, sp, #0
   332e2:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   332e4:	687b      	ldr	r3, [r7, #4]
   332e6:	3314      	adds	r3, #20
   332e8:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   332ea:	68fb      	ldr	r3, [r7, #12]
   332ec:	0018      	movs	r0, r3
   332ee:	4b03      	ldr	r3, [pc, #12]	; (332fc <sw_timer_enable+0x20>)
   332f0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   332f2:	46c0      	nop			; (mov r8, r8)
   332f4:	46bd      	mov	sp, r7
   332f6:	b004      	add	sp, #16
   332f8:	bd80      	pop	{r7, pc}
   332fa:	46c0      	nop			; (mov r8, r8)
   332fc:	0003317d 	.word	0x0003317d

00033300 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   33300:	b580      	push	{r7, lr}
   33302:	b086      	sub	sp, #24
   33304:	af00      	add	r7, sp, #0
   33306:	60f8      	str	r0, [r7, #12]
   33308:	60b9      	str	r1, [r7, #8]
   3330a:	607a      	str	r2, [r7, #4]
   3330c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3330e:	2300      	movs	r3, #0
   33310:	617b      	str	r3, [r7, #20]
   33312:	e032      	b.n	3337a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   33314:	68f9      	ldr	r1, [r7, #12]
   33316:	697a      	ldr	r2, [r7, #20]
   33318:	0013      	movs	r3, r2
   3331a:	009b      	lsls	r3, r3, #2
   3331c:	189b      	adds	r3, r3, r2
   3331e:	009b      	lsls	r3, r3, #2
   33320:	5c5b      	ldrb	r3, [r3, r1]
   33322:	07db      	lsls	r3, r3, #31
   33324:	0fdb      	lsrs	r3, r3, #31
   33326:	b2db      	uxtb	r3, r3
   33328:	2b00      	cmp	r3, #0
   3332a:	d123      	bne.n	33374 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   3332c:	697a      	ldr	r2, [r7, #20]
   3332e:	0013      	movs	r3, r2
   33330:	009b      	lsls	r3, r3, #2
   33332:	189b      	adds	r3, r3, r2
   33334:	009b      	lsls	r3, r3, #2
   33336:	68fa      	ldr	r2, [r7, #12]
   33338:	18d3      	adds	r3, r2, r3
   3333a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   3333c:	693b      	ldr	r3, [r7, #16]
   3333e:	68ba      	ldr	r2, [r7, #8]
   33340:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   33342:	693b      	ldr	r3, [r7, #16]
   33344:	781a      	ldrb	r2, [r3, #0]
   33346:	2102      	movs	r1, #2
   33348:	438a      	bics	r2, r1
   3334a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   3334c:	693b      	ldr	r3, [r7, #16]
   3334e:	687a      	ldr	r2, [r7, #4]
   33350:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   33352:	68fb      	ldr	r3, [r7, #12]
   33354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   33356:	4b0d      	ldr	r3, [pc, #52]	; (3338c <sw_timer_register_callback+0x8c>)
   33358:	0011      	movs	r1, r2
   3335a:	6838      	ldr	r0, [r7, #0]
   3335c:	4798      	blx	r3
   3335e:	0003      	movs	r3, r0
   33360:	001a      	movs	r2, r3
   33362:	693b      	ldr	r3, [r7, #16]
   33364:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   33366:	693b      	ldr	r3, [r7, #16]
   33368:	781a      	ldrb	r2, [r3, #0]
   3336a:	2101      	movs	r1, #1
   3336c:	430a      	orrs	r2, r1
   3336e:	701a      	strb	r2, [r3, #0]
			return index;
   33370:	697b      	ldr	r3, [r7, #20]
   33372:	e007      	b.n	33384 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33374:	697b      	ldr	r3, [r7, #20]
   33376:	3301      	adds	r3, #1
   33378:	617b      	str	r3, [r7, #20]
   3337a:	697b      	ldr	r3, [r7, #20]
   3337c:	2b00      	cmp	r3, #0
   3337e:	ddc9      	ble.n	33314 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   33380:	2301      	movs	r3, #1
   33382:	425b      	negs	r3, r3
}
   33384:	0018      	movs	r0, r3
   33386:	46bd      	mov	sp, r7
   33388:	b006      	add	sp, #24
   3338a:	bd80      	pop	{r7, pc}
   3338c:	000337a5 	.word	0x000337a5

00033390 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   33390:	b580      	push	{r7, lr}
   33392:	b086      	sub	sp, #24
   33394:	af00      	add	r7, sp, #0
   33396:	60f8      	str	r0, [r7, #12]
   33398:	60b9      	str	r1, [r7, #8]
   3339a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   3339c:	68ba      	ldr	r2, [r7, #8]
   3339e:	0013      	movs	r3, r2
   333a0:	009b      	lsls	r3, r3, #2
   333a2:	189b      	adds	r3, r3, r2
   333a4:	009b      	lsls	r3, r3, #2
   333a6:	68fa      	ldr	r2, [r7, #12]
   333a8:	18d3      	adds	r3, r2, r3
   333aa:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   333ac:	697b      	ldr	r3, [r7, #20]
   333ae:	781a      	ldrb	r2, [r3, #0]
   333b0:	2102      	movs	r1, #2
   333b2:	430a      	orrs	r2, r1
   333b4:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   333b6:	68fb      	ldr	r3, [r7, #12]
   333b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   333ba:	4b07      	ldr	r3, [pc, #28]	; (333d8 <sw_timer_enable_callback+0x48>)
   333bc:	0011      	movs	r1, r2
   333be:	6878      	ldr	r0, [r7, #4]
   333c0:	4798      	blx	r3
   333c2:	0003      	movs	r3, r0
   333c4:	001a      	movs	r2, r3
   333c6:	4b05      	ldr	r3, [pc, #20]	; (333dc <sw_timer_enable_callback+0x4c>)
   333c8:	681b      	ldr	r3, [r3, #0]
   333ca:	18d2      	adds	r2, r2, r3
   333cc:	697b      	ldr	r3, [r7, #20]
   333ce:	611a      	str	r2, [r3, #16]
}
   333d0:	46c0      	nop			; (mov r8, r8)
   333d2:	46bd      	mov	sp, r7
   333d4:	b006      	add	sp, #24
   333d6:	bd80      	pop	{r7, pc}
   333d8:	000337a5 	.word	0x000337a5
   333dc:	20004710 	.word	0x20004710

000333e0 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   333e0:	b580      	push	{r7, lr}
   333e2:	b084      	sub	sp, #16
   333e4:	af00      	add	r7, sp, #0
   333e6:	6078      	str	r0, [r7, #4]
   333e8:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   333ea:	683a      	ldr	r2, [r7, #0]
   333ec:	0013      	movs	r3, r2
   333ee:	009b      	lsls	r3, r3, #2
   333f0:	189b      	adds	r3, r3, r2
   333f2:	009b      	lsls	r3, r3, #2
   333f4:	687a      	ldr	r2, [r7, #4]
   333f6:	18d3      	adds	r3, r2, r3
   333f8:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   333fa:	68fb      	ldr	r3, [r7, #12]
   333fc:	781a      	ldrb	r2, [r3, #0]
   333fe:	2102      	movs	r1, #2
   33400:	438a      	bics	r2, r1
   33402:	701a      	strb	r2, [r3, #0]
}
   33404:	46c0      	nop			; (mov r8, r8)
   33406:	46bd      	mov	sp, r7
   33408:	b004      	add	sp, #16
   3340a:	bd80      	pop	{r7, pc}

0003340c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   3340c:	b590      	push	{r4, r7, lr}
   3340e:	b085      	sub	sp, #20
   33410:	af00      	add	r7, sp, #0
   33412:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33414:	2300      	movs	r3, #0
   33416:	60fb      	str	r3, [r7, #12]
   33418:	e053      	b.n	334c2 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   3341a:	6879      	ldr	r1, [r7, #4]
   3341c:	68fa      	ldr	r2, [r7, #12]
   3341e:	0013      	movs	r3, r2
   33420:	009b      	lsls	r3, r3, #2
   33422:	189b      	adds	r3, r3, r2
   33424:	009b      	lsls	r3, r3, #2
   33426:	5c5b      	ldrb	r3, [r3, r1]
   33428:	07db      	lsls	r3, r3, #31
   3342a:	0fdb      	lsrs	r3, r3, #31
   3342c:	b2db      	uxtb	r3, r3
   3342e:	2b00      	cmp	r3, #0
   33430:	d044      	beq.n	334bc <sw_timer_task+0xb0>
   33432:	6879      	ldr	r1, [r7, #4]
   33434:	68fa      	ldr	r2, [r7, #12]
   33436:	0013      	movs	r3, r2
   33438:	009b      	lsls	r3, r3, #2
   3343a:	189b      	adds	r3, r3, r2
   3343c:	009b      	lsls	r3, r3, #2
   3343e:	5c5b      	ldrb	r3, [r3, r1]
   33440:	079b      	lsls	r3, r3, #30
   33442:	0fdb      	lsrs	r3, r3, #31
   33444:	b2db      	uxtb	r3, r3
   33446:	2b00      	cmp	r3, #0
   33448:	d038      	beq.n	334bc <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   3344a:	68fa      	ldr	r2, [r7, #12]
   3344c:	0013      	movs	r3, r2
   3344e:	009b      	lsls	r3, r3, #2
   33450:	189b      	adds	r3, r3, r2
   33452:	009b      	lsls	r3, r3, #2
   33454:	687a      	ldr	r2, [r7, #4]
   33456:	18d3      	adds	r3, r2, r3
   33458:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   3345a:	68bb      	ldr	r3, [r7, #8]
   3345c:	691a      	ldr	r2, [r3, #16]
   3345e:	4b1c      	ldr	r3, [pc, #112]	; (334d0 <sw_timer_task+0xc4>)
   33460:	681b      	ldr	r3, [r3, #0]
   33462:	1ad3      	subs	r3, r2, r3
   33464:	d52a      	bpl.n	334bc <sw_timer_task+0xb0>
   33466:	68bb      	ldr	r3, [r7, #8]
   33468:	781b      	ldrb	r3, [r3, #0]
   3346a:	2204      	movs	r2, #4
   3346c:	4013      	ands	r3, r2
   3346e:	b2db      	uxtb	r3, r3
   33470:	2b00      	cmp	r3, #0
   33472:	d123      	bne.n	334bc <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   33474:	68bb      	ldr	r3, [r7, #8]
   33476:	781a      	ldrb	r2, [r3, #0]
   33478:	2104      	movs	r1, #4
   3347a:	430a      	orrs	r2, r1
   3347c:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   3347e:	68bb      	ldr	r3, [r7, #8]
   33480:	68db      	ldr	r3, [r3, #12]
   33482:	2b00      	cmp	r3, #0
   33484:	d007      	beq.n	33496 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   33486:	68bb      	ldr	r3, [r7, #8]
   33488:	68da      	ldr	r2, [r3, #12]
   3348a:	4b11      	ldr	r3, [pc, #68]	; (334d0 <sw_timer_task+0xc4>)
   3348c:	681b      	ldr	r3, [r3, #0]
   3348e:	18d2      	adds	r2, r2, r3
   33490:	68bb      	ldr	r3, [r7, #8]
   33492:	611a      	str	r2, [r3, #16]
   33494:	e004      	b.n	334a0 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   33496:	68bb      	ldr	r3, [r7, #8]
   33498:	781a      	ldrb	r2, [r3, #0]
   3349a:	2102      	movs	r1, #2
   3349c:	438a      	bics	r2, r1
   3349e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   334a0:	68bb      	ldr	r3, [r7, #8]
   334a2:	685c      	ldr	r4, [r3, #4]
   334a4:	68bb      	ldr	r3, [r7, #8]
   334a6:	689a      	ldr	r2, [r3, #8]
   334a8:	68bb      	ldr	r3, [r7, #8]
   334aa:	68db      	ldr	r3, [r3, #12]
   334ac:	68f9      	ldr	r1, [r7, #12]
   334ae:	6878      	ldr	r0, [r7, #4]
   334b0:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   334b2:	68bb      	ldr	r3, [r7, #8]
   334b4:	781a      	ldrb	r2, [r3, #0]
   334b6:	2104      	movs	r1, #4
   334b8:	438a      	bics	r2, r1
   334ba:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   334bc:	68fb      	ldr	r3, [r7, #12]
   334be:	3301      	adds	r3, #1
   334c0:	60fb      	str	r3, [r7, #12]
   334c2:	68fb      	ldr	r3, [r7, #12]
   334c4:	2b00      	cmp	r3, #0
   334c6:	dda8      	ble.n	3341a <sw_timer_task+0xe>
			}
		}
	}
}
   334c8:	46c0      	nop			; (mov r8, r8)
   334ca:	46bd      	mov	sp, r7
   334cc:	b005      	add	sp, #20
   334ce:	bd90      	pop	{r4, r7, pc}
   334d0:	20004710 	.word	0x20004710

000334d4 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   334d4:	b580      	push	{r7, lr}
   334d6:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   334d8:	4b06      	ldr	r3, [pc, #24]	; (334f4 <main+0x20>)
   334da:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   334dc:	4b06      	ldr	r3, [pc, #24]	; (334f8 <main+0x24>)
   334de:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   334e0:	2001      	movs	r0, #1
   334e2:	4b06      	ldr	r3, [pc, #24]	; (334fc <main+0x28>)
   334e4:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   334e6:	4b06      	ldr	r3, [pc, #24]	; (33500 <main+0x2c>)
   334e8:	4798      	blx	r3

    return 0;  // Will not get here
   334ea:	2300      	movs	r3, #0
}
   334ec:	0018      	movs	r0, r3
   334ee:	46bd      	mov	sp, r7
   334f0:	bd80      	pop	{r7, pc}
   334f2:	46c0      	nop			; (mov r8, r8)
   334f4:	0002afc5 	.word	0x0002afc5
   334f8:	0001eba5 	.word	0x0001eba5
   334fc:	00019271 	.word	0x00019271
   33500:	0001d1fd 	.word	0x0001d1fd

00033504 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   33504:	b580      	push	{r7, lr}
   33506:	b082      	sub	sp, #8
   33508:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n-----ESE516 Main Program-----\r\n");
   3350a:	4b27      	ldr	r3, [pc, #156]	; (335a8 <vApplicationDaemonTaskStartupHook+0xa4>)
   3350c:	0018      	movs	r0, r3
   3350e:	4b27      	ldr	r3, [pc, #156]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33510:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\nInitialize HW...\r\n");
   33512:	4b27      	ldr	r3, [pc, #156]	; (335b0 <vApplicationDaemonTaskStartupHook+0xac>)
   33514:	0018      	movs	r0, r3
   33516:	4b25      	ldr	r3, [pc, #148]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33518:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   3351a:	4b26      	ldr	r3, [pc, #152]	; (335b4 <vApplicationDaemonTaskStartupHook+0xb0>)
   3351c:	4798      	blx	r3
   3351e:	1e03      	subs	r3, r0, #0
   33520:	d004      	beq.n	3352c <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   33522:	4b25      	ldr	r3, [pc, #148]	; (335b8 <vApplicationDaemonTaskStartupHook+0xb4>)
   33524:	0018      	movs	r0, r3
   33526:	4b21      	ldr	r3, [pc, #132]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33528:	4798      	blx	r3
   3352a:	e003      	b.n	33534 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   3352c:	4b23      	ldr	r3, [pc, #140]	; (335bc <vApplicationDaemonTaskStartupHook+0xb8>)
   3352e:	0018      	movs	r0, r3
   33530:	4b1e      	ldr	r3, [pc, #120]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33532:	4798      	blx	r3
        //SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    //} else {
        //SerialConsoleWriteString("Initialized Seesaw!\r\n");
    //}

    uint8_t whoamI = 0;
   33534:	1dfb      	adds	r3, r7, #7
   33536:	2200      	movs	r2, #0
   33538:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   3353a:	4b21      	ldr	r3, [pc, #132]	; (335c0 <vApplicationDaemonTaskStartupHook+0xbc>)
   3353c:	4798      	blx	r3
   3353e:	0002      	movs	r2, r0
   33540:	1dfb      	adds	r3, r7, #7
   33542:	0019      	movs	r1, r3
   33544:	0010      	movs	r0, r2
   33546:	4b1f      	ldr	r3, [pc, #124]	; (335c4 <vApplicationDaemonTaskStartupHook+0xc0>)
   33548:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   3354a:	1dfb      	adds	r3, r7, #7
   3354c:	781b      	ldrb	r3, [r3, #0]
   3354e:	2b6c      	cmp	r3, #108	; 0x6c
   33550:	d004      	beq.n	3355c <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   33552:	4b1d      	ldr	r3, [pc, #116]	; (335c8 <vApplicationDaemonTaskStartupHook+0xc4>)
   33554:	0018      	movs	r0, r3
   33556:	4b15      	ldr	r3, [pc, #84]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33558:	4798      	blx	r3
   3355a:	e010      	b.n	3357e <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   3355c:	4b1b      	ldr	r3, [pc, #108]	; (335cc <vApplicationDaemonTaskStartupHook+0xc8>)
   3355e:	0018      	movs	r0, r3
   33560:	4b12      	ldr	r3, [pc, #72]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33562:	4798      	blx	r3
        if (InitImu() == 0) {
   33564:	4b1a      	ldr	r3, [pc, #104]	; (335d0 <vApplicationDaemonTaskStartupHook+0xcc>)
   33566:	4798      	blx	r3
   33568:	1e03      	subs	r3, r0, #0
   3356a:	d104      	bne.n	33576 <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   3356c:	4b19      	ldr	r3, [pc, #100]	; (335d4 <vApplicationDaemonTaskStartupHook+0xd0>)
   3356e:	0018      	movs	r0, r3
   33570:	4b0e      	ldr	r3, [pc, #56]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33572:	4798      	blx	r3
   33574:	e003      	b.n	3357e <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   33576:	4b18      	ldr	r3, [pc, #96]	; (335d8 <vApplicationDaemonTaskStartupHook+0xd4>)
   33578:	0018      	movs	r0, r3
   3357a:	4b0c      	ldr	r3, [pc, #48]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   3357c:	4798      	blx	r3
        }
    }

	//commented by Derek
    SerialConsoleWriteString("Initializing distance sensor\r\n");
   3357e:	4b17      	ldr	r3, [pc, #92]	; (335dc <vApplicationDaemonTaskStartupHook+0xd8>)
   33580:	0018      	movs	r0, r3
   33582:	4b0a      	ldr	r3, [pc, #40]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33584:	4798      	blx	r3
    InitializeDistanceSensor();
   33586:	4b16      	ldr	r3, [pc, #88]	; (335e0 <vApplicationDaemonTaskStartupHook+0xdc>)
   33588:	4798      	blx	r3
    SerialConsoleWriteString("Distance sensor initialized\r\n");
   3358a:	4b16      	ldr	r3, [pc, #88]	; (335e4 <vApplicationDaemonTaskStartupHook+0xe0>)
   3358c:	0018      	movs	r0, r3
   3358e:	4b07      	ldr	r3, [pc, #28]	; (335ac <vApplicationDaemonTaskStartupHook+0xa8>)
   33590:	4798      	blx	r3

    StartTasks();
   33592:	4b15      	ldr	r3, [pc, #84]	; (335e8 <vApplicationDaemonTaskStartupHook+0xe4>)
   33594:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   33596:	4b15      	ldr	r3, [pc, #84]	; (335ec <vApplicationDaemonTaskStartupHook+0xe8>)
   33598:	681b      	ldr	r3, [r3, #0]
   3359a:	0018      	movs	r0, r3
   3359c:	4b14      	ldr	r3, [pc, #80]	; (335f0 <vApplicationDaemonTaskStartupHook+0xec>)
   3359e:	4798      	blx	r3
}
   335a0:	46c0      	nop			; (mov r8, r8)
   335a2:	46bd      	mov	sp, r7
   335a4:	b002      	add	sp, #8
   335a6:	bd80      	pop	{r7, pc}
   335a8:	0003ad1c 	.word	0x0003ad1c
   335ac:	0001ec15 	.word	0x0001ec15
   335b0:	0003ad40 	.word	0x0003ad40
   335b4:	00015225 	.word	0x00015225
   335b8:	0003ad58 	.word	0x0003ad58
   335bc:	0003ad7c 	.word	0x0003ad7c
   335c0:	0001644d 	.word	0x0001644d
   335c4:	00015f91 	.word	0x00015f91
   335c8:	0003ad98 	.word	0x0003ad98
   335cc:	0003adac 	.word	0x0003adac
   335d0:	0001645d 	.word	0x0001645d
   335d4:	0003adbc 	.word	0x0003adbc
   335d8:	0003add0 	.word	0x0003add0
   335dc:	0003adec 	.word	0x0003adec
   335e0:	00014bf5 	.word	0x00014bf5
   335e4:	0003ae0c 	.word	0x0003ae0c
   335e8:	000335f5 	.word	0x000335f5
   335ec:	20004718 	.word	0x20004718
   335f0:	0001d0a1 	.word	0x0001d0a1

000335f4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   335f4:	b590      	push	{r4, r7, lr}
   335f6:	b083      	sub	sp, #12
   335f8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d", xPortGetFreeHeapSize());
   335fa:	4b44      	ldr	r3, [pc, #272]	; (3370c <StartTasks+0x118>)
   335fc:	4798      	blx	r3
   335fe:	0003      	movs	r3, r0
   33600:	4a43      	ldr	r2, [pc, #268]	; (33710 <StartTasks+0x11c>)
   33602:	4844      	ldr	r0, [pc, #272]	; (33714 <StartTasks+0x120>)
   33604:	2140      	movs	r1, #64	; 0x40
   33606:	4c44      	ldr	r4, [pc, #272]	; (33718 <StartTasks+0x124>)
   33608:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3360a:	4b42      	ldr	r3, [pc, #264]	; (33714 <StartTasks+0x120>)
   3360c:	0018      	movs	r0, r3
   3360e:	4b43      	ldr	r3, [pc, #268]	; (3371c <StartTasks+0x128>)
   33610:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   33612:	23c8      	movs	r3, #200	; 0xc8
   33614:	005a      	lsls	r2, r3, #1
   33616:	4942      	ldr	r1, [pc, #264]	; (33720 <StartTasks+0x12c>)
   33618:	4842      	ldr	r0, [pc, #264]	; (33724 <StartTasks+0x130>)
   3361a:	4b43      	ldr	r3, [pc, #268]	; (33728 <StartTasks+0x134>)
   3361c:	9301      	str	r3, [sp, #4]
   3361e:	2304      	movs	r3, #4
   33620:	9300      	str	r3, [sp, #0]
   33622:	2300      	movs	r3, #0
   33624:	4c41      	ldr	r4, [pc, #260]	; (3372c <StartTasks+0x138>)
   33626:	47a0      	blx	r4
   33628:	0003      	movs	r3, r0
   3362a:	2b01      	cmp	r3, #1
   3362c:	d003      	beq.n	33636 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3362e:	4b40      	ldr	r3, [pc, #256]	; (33730 <StartTasks+0x13c>)
   33630:	0018      	movs	r0, r3
   33632:	4b3a      	ldr	r3, [pc, #232]	; (3371c <StartTasks+0x128>)
   33634:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n\r\n", xPortGetFreeHeapSize());
   33636:	4b35      	ldr	r3, [pc, #212]	; (3370c <StartTasks+0x118>)
   33638:	4798      	blx	r3
   3363a:	0003      	movs	r3, r0
   3363c:	4a3d      	ldr	r2, [pc, #244]	; (33734 <StartTasks+0x140>)
   3363e:	4835      	ldr	r0, [pc, #212]	; (33714 <StartTasks+0x120>)
   33640:	2140      	movs	r1, #64	; 0x40
   33642:	4c35      	ldr	r4, [pc, #212]	; (33718 <StartTasks+0x124>)
   33644:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33646:	4b33      	ldr	r3, [pc, #204]	; (33714 <StartTasks+0x120>)
   33648:	0018      	movs	r0, r3
   3364a:	4b34      	ldr	r3, [pc, #208]	; (3371c <StartTasks+0x128>)
   3364c:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   3364e:	23c8      	movs	r3, #200	; 0xc8
   33650:	005a      	lsls	r2, r3, #1
   33652:	4939      	ldr	r1, [pc, #228]	; (33738 <StartTasks+0x144>)
   33654:	4839      	ldr	r0, [pc, #228]	; (3373c <StartTasks+0x148>)
   33656:	4b3a      	ldr	r3, [pc, #232]	; (33740 <StartTasks+0x14c>)
   33658:	9301      	str	r3, [sp, #4]
   3365a:	2304      	movs	r3, #4
   3365c:	9300      	str	r3, [sp, #0]
   3365e:	2300      	movs	r3, #0
   33660:	4c32      	ldr	r4, [pc, #200]	; (3372c <StartTasks+0x138>)
   33662:	47a0      	blx	r4
   33664:	0003      	movs	r3, r0
   33666:	2b01      	cmp	r3, #1
   33668:	d003      	beq.n	33672 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3366a:	4b36      	ldr	r3, [pc, #216]	; (33744 <StartTasks+0x150>)
   3366c:	0018      	movs	r0, r3
   3366e:	4b2b      	ldr	r3, [pc, #172]	; (3371c <StartTasks+0x128>)
   33670:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n\r\n", xPortGetFreeHeapSize());
   33672:	4b26      	ldr	r3, [pc, #152]	; (3370c <StartTasks+0x118>)
   33674:	4798      	blx	r3
   33676:	0003      	movs	r3, r0
   33678:	4a33      	ldr	r2, [pc, #204]	; (33748 <StartTasks+0x154>)
   3367a:	4826      	ldr	r0, [pc, #152]	; (33714 <StartTasks+0x120>)
   3367c:	2140      	movs	r1, #64	; 0x40
   3367e:	4c26      	ldr	r4, [pc, #152]	; (33718 <StartTasks+0x124>)
   33680:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33682:	4b24      	ldr	r3, [pc, #144]	; (33714 <StartTasks+0x120>)
   33684:	0018      	movs	r0, r3
   33686:	4b25      	ldr	r3, [pc, #148]	; (3371c <StartTasks+0x128>)
   33688:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   3368a:	2380      	movs	r3, #128	; 0x80
   3368c:	005a      	lsls	r2, r3, #1
   3368e:	492f      	ldr	r1, [pc, #188]	; (3374c <StartTasks+0x158>)
   33690:	482f      	ldr	r0, [pc, #188]	; (33750 <StartTasks+0x15c>)
   33692:	4b30      	ldr	r3, [pc, #192]	; (33754 <StartTasks+0x160>)
   33694:	9301      	str	r3, [sp, #4]
   33696:	2304      	movs	r3, #4
   33698:	9300      	str	r3, [sp, #0]
   3369a:	2300      	movs	r3, #0
   3369c:	4c23      	ldr	r4, [pc, #140]	; (3372c <StartTasks+0x138>)
   3369e:	47a0      	blx	r4
   336a0:	0003      	movs	r3, r0
   336a2:	2b01      	cmp	r3, #1
   336a4:	d003      	beq.n	336ae <StartTasks+0xba>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   336a6:	4b2c      	ldr	r3, [pc, #176]	; (33758 <StartTasks+0x164>)
   336a8:	0018      	movs	r0, r3
   336aa:	4b1c      	ldr	r3, [pc, #112]	; (3371c <StartTasks+0x128>)
   336ac:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n\r\n", xPortGetFreeHeapSize());
   336ae:	4b17      	ldr	r3, [pc, #92]	; (3370c <StartTasks+0x118>)
   336b0:	4798      	blx	r3
   336b2:	0003      	movs	r3, r0
   336b4:	4a29      	ldr	r2, [pc, #164]	; (3375c <StartTasks+0x168>)
   336b6:	4817      	ldr	r0, [pc, #92]	; (33714 <StartTasks+0x120>)
   336b8:	2140      	movs	r1, #64	; 0x40
   336ba:	4c17      	ldr	r4, [pc, #92]	; (33718 <StartTasks+0x124>)
   336bc:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   336be:	4b15      	ldr	r3, [pc, #84]	; (33714 <StartTasks+0x120>)
   336c0:	0018      	movs	r0, r3
   336c2:	4b16      	ldr	r3, [pc, #88]	; (3371c <StartTasks+0x128>)
   336c4:	4798      	blx	r3
	
	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   336c6:	23fa      	movs	r3, #250	; 0xfa
   336c8:	009a      	lsls	r2, r3, #2
   336ca:	4925      	ldr	r1, [pc, #148]	; (33760 <StartTasks+0x16c>)
   336cc:	4825      	ldr	r0, [pc, #148]	; (33764 <StartTasks+0x170>)
   336ce:	4b26      	ldr	r3, [pc, #152]	; (33768 <StartTasks+0x174>)
   336d0:	9301      	str	r3, [sp, #4]
   336d2:	2303      	movs	r3, #3
   336d4:	9300      	str	r3, [sp, #0]
   336d6:	2300      	movs	r3, #0
   336d8:	4c14      	ldr	r4, [pc, #80]	; (3372c <StartTasks+0x138>)
   336da:	47a0      	blx	r4
   336dc:	0003      	movs	r3, r0
   336de:	2b01      	cmp	r3, #1
   336e0:	d003      	beq.n	336ea <StartTasks+0xf6>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   336e2:	4b22      	ldr	r3, [pc, #136]	; (3376c <StartTasks+0x178>)
   336e4:	0018      	movs	r0, r3
   336e6:	4b0d      	ldr	r3, [pc, #52]	; (3371c <StartTasks+0x128>)
   336e8:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   336ea:	4b08      	ldr	r3, [pc, #32]	; (3370c <StartTasks+0x118>)
   336ec:	4798      	blx	r3
   336ee:	0003      	movs	r3, r0
   336f0:	4a1f      	ldr	r2, [pc, #124]	; (33770 <StartTasks+0x17c>)
   336f2:	4808      	ldr	r0, [pc, #32]	; (33714 <StartTasks+0x120>)
   336f4:	2140      	movs	r1, #64	; 0x40
   336f6:	4c08      	ldr	r4, [pc, #32]	; (33718 <StartTasks+0x124>)
   336f8:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   336fa:	4b06      	ldr	r3, [pc, #24]	; (33714 <StartTasks+0x120>)
   336fc:	0018      	movs	r0, r3
   336fe:	4b07      	ldr	r3, [pc, #28]	; (3371c <StartTasks+0x128>)
   33700:	4798      	blx	r3
}
   33702:	46c0      	nop			; (mov r8, r8)
   33704:	46bd      	mov	sp, r7
   33706:	b001      	add	sp, #4
   33708:	bd90      	pop	{r4, r7, pc}
   3370a:	46c0      	nop			; (mov r8, r8)
   3370c:	0001b1e1 	.word	0x0001b1e1
   33710:	0003ae2c 	.word	0x0003ae2c
   33714:	20005ce0 	.word	0x20005ce0
   33718:	000359d9 	.word	0x000359d9
   3371c:	0001ec15 	.word	0x0001ec15
   33720:	0003ae4c 	.word	0x0003ae4c
   33724:	000140a1 	.word	0x000140a1
   33728:	20004714 	.word	0x20004714
   3372c:	0001cc25 	.word	0x0001cc25
   33730:	0003ae58 	.word	0x0003ae58
   33734:	0003ae84 	.word	0x0003ae84
   33738:	0003aea4 	.word	0x0003aea4
   3373c:	00016719 	.word	0x00016719
   33740:	20004720 	.word	0x20004720
   33744:	0003aeac 	.word	0x0003aeac
   33748:	0003aed8 	.word	0x0003aed8
   3374c:	0003aefc 	.word	0x0003aefc
   33750:	00014881 	.word	0x00014881
   33754:	20004724 	.word	0x20004724
   33758:	0003af0c 	.word	0x0003af0c
   3375c:	0003af3c 	.word	0x0003af3c
   33760:	0003af68 	.word	0x0003af68
   33764:	00018025 	.word	0x00018025
   33768:	2000471c 	.word	0x2000471c
   3376c:	0003af74 	.word	0x0003af74
   33770:	0003afa0 	.word	0x0003afa0

00033774 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   33774:	b580      	push	{r7, lr}
   33776:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   33778:	4b02      	ldr	r3, [pc, #8]	; (33784 <vApplicationMallocFailedHook+0x10>)
   3377a:	0018      	movs	r0, r3
   3377c:	4b02      	ldr	r3, [pc, #8]	; (33788 <vApplicationMallocFailedHook+0x14>)
   3377e:	4798      	blx	r3
    while (1)
   33780:	e7fe      	b.n	33780 <vApplicationMallocFailedHook+0xc>
   33782:	46c0      	nop			; (mov r8, r8)
   33784:	0003afc0 	.word	0x0003afc0
   33788:	0001ec15 	.word	0x0001ec15

0003378c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   3378c:	b580      	push	{r7, lr}
   3378e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33790:	4b02      	ldr	r3, [pc, #8]	; (3379c <vApplicationStackOverflowHook+0x10>)
   33792:	0018      	movs	r0, r3
   33794:	4b02      	ldr	r3, [pc, #8]	; (337a0 <vApplicationStackOverflowHook+0x14>)
   33796:	4798      	blx	r3
    while (1)
   33798:	e7fe      	b.n	33798 <vApplicationStackOverflowHook+0xc>
   3379a:	46c0      	nop			; (mov r8, r8)
   3379c:	0003afec 	.word	0x0003afec
   337a0:	0001ec15 	.word	0x0001ec15

000337a4 <__udivsi3>:
   337a4:	2200      	movs	r2, #0
   337a6:	0843      	lsrs	r3, r0, #1
   337a8:	428b      	cmp	r3, r1
   337aa:	d374      	bcc.n	33896 <__udivsi3+0xf2>
   337ac:	0903      	lsrs	r3, r0, #4
   337ae:	428b      	cmp	r3, r1
   337b0:	d35f      	bcc.n	33872 <__udivsi3+0xce>
   337b2:	0a03      	lsrs	r3, r0, #8
   337b4:	428b      	cmp	r3, r1
   337b6:	d344      	bcc.n	33842 <__udivsi3+0x9e>
   337b8:	0b03      	lsrs	r3, r0, #12
   337ba:	428b      	cmp	r3, r1
   337bc:	d328      	bcc.n	33810 <__udivsi3+0x6c>
   337be:	0c03      	lsrs	r3, r0, #16
   337c0:	428b      	cmp	r3, r1
   337c2:	d30d      	bcc.n	337e0 <__udivsi3+0x3c>
   337c4:	22ff      	movs	r2, #255	; 0xff
   337c6:	0209      	lsls	r1, r1, #8
   337c8:	ba12      	rev	r2, r2
   337ca:	0c03      	lsrs	r3, r0, #16
   337cc:	428b      	cmp	r3, r1
   337ce:	d302      	bcc.n	337d6 <__udivsi3+0x32>
   337d0:	1212      	asrs	r2, r2, #8
   337d2:	0209      	lsls	r1, r1, #8
   337d4:	d065      	beq.n	338a2 <__udivsi3+0xfe>
   337d6:	0b03      	lsrs	r3, r0, #12
   337d8:	428b      	cmp	r3, r1
   337da:	d319      	bcc.n	33810 <__udivsi3+0x6c>
   337dc:	e000      	b.n	337e0 <__udivsi3+0x3c>
   337de:	0a09      	lsrs	r1, r1, #8
   337e0:	0bc3      	lsrs	r3, r0, #15
   337e2:	428b      	cmp	r3, r1
   337e4:	d301      	bcc.n	337ea <__udivsi3+0x46>
   337e6:	03cb      	lsls	r3, r1, #15
   337e8:	1ac0      	subs	r0, r0, r3
   337ea:	4152      	adcs	r2, r2
   337ec:	0b83      	lsrs	r3, r0, #14
   337ee:	428b      	cmp	r3, r1
   337f0:	d301      	bcc.n	337f6 <__udivsi3+0x52>
   337f2:	038b      	lsls	r3, r1, #14
   337f4:	1ac0      	subs	r0, r0, r3
   337f6:	4152      	adcs	r2, r2
   337f8:	0b43      	lsrs	r3, r0, #13
   337fa:	428b      	cmp	r3, r1
   337fc:	d301      	bcc.n	33802 <__udivsi3+0x5e>
   337fe:	034b      	lsls	r3, r1, #13
   33800:	1ac0      	subs	r0, r0, r3
   33802:	4152      	adcs	r2, r2
   33804:	0b03      	lsrs	r3, r0, #12
   33806:	428b      	cmp	r3, r1
   33808:	d301      	bcc.n	3380e <__udivsi3+0x6a>
   3380a:	030b      	lsls	r3, r1, #12
   3380c:	1ac0      	subs	r0, r0, r3
   3380e:	4152      	adcs	r2, r2
   33810:	0ac3      	lsrs	r3, r0, #11
   33812:	428b      	cmp	r3, r1
   33814:	d301      	bcc.n	3381a <__udivsi3+0x76>
   33816:	02cb      	lsls	r3, r1, #11
   33818:	1ac0      	subs	r0, r0, r3
   3381a:	4152      	adcs	r2, r2
   3381c:	0a83      	lsrs	r3, r0, #10
   3381e:	428b      	cmp	r3, r1
   33820:	d301      	bcc.n	33826 <__udivsi3+0x82>
   33822:	028b      	lsls	r3, r1, #10
   33824:	1ac0      	subs	r0, r0, r3
   33826:	4152      	adcs	r2, r2
   33828:	0a43      	lsrs	r3, r0, #9
   3382a:	428b      	cmp	r3, r1
   3382c:	d301      	bcc.n	33832 <__udivsi3+0x8e>
   3382e:	024b      	lsls	r3, r1, #9
   33830:	1ac0      	subs	r0, r0, r3
   33832:	4152      	adcs	r2, r2
   33834:	0a03      	lsrs	r3, r0, #8
   33836:	428b      	cmp	r3, r1
   33838:	d301      	bcc.n	3383e <__udivsi3+0x9a>
   3383a:	020b      	lsls	r3, r1, #8
   3383c:	1ac0      	subs	r0, r0, r3
   3383e:	4152      	adcs	r2, r2
   33840:	d2cd      	bcs.n	337de <__udivsi3+0x3a>
   33842:	09c3      	lsrs	r3, r0, #7
   33844:	428b      	cmp	r3, r1
   33846:	d301      	bcc.n	3384c <__udivsi3+0xa8>
   33848:	01cb      	lsls	r3, r1, #7
   3384a:	1ac0      	subs	r0, r0, r3
   3384c:	4152      	adcs	r2, r2
   3384e:	0983      	lsrs	r3, r0, #6
   33850:	428b      	cmp	r3, r1
   33852:	d301      	bcc.n	33858 <__udivsi3+0xb4>
   33854:	018b      	lsls	r3, r1, #6
   33856:	1ac0      	subs	r0, r0, r3
   33858:	4152      	adcs	r2, r2
   3385a:	0943      	lsrs	r3, r0, #5
   3385c:	428b      	cmp	r3, r1
   3385e:	d301      	bcc.n	33864 <__udivsi3+0xc0>
   33860:	014b      	lsls	r3, r1, #5
   33862:	1ac0      	subs	r0, r0, r3
   33864:	4152      	adcs	r2, r2
   33866:	0903      	lsrs	r3, r0, #4
   33868:	428b      	cmp	r3, r1
   3386a:	d301      	bcc.n	33870 <__udivsi3+0xcc>
   3386c:	010b      	lsls	r3, r1, #4
   3386e:	1ac0      	subs	r0, r0, r3
   33870:	4152      	adcs	r2, r2
   33872:	08c3      	lsrs	r3, r0, #3
   33874:	428b      	cmp	r3, r1
   33876:	d301      	bcc.n	3387c <__udivsi3+0xd8>
   33878:	00cb      	lsls	r3, r1, #3
   3387a:	1ac0      	subs	r0, r0, r3
   3387c:	4152      	adcs	r2, r2
   3387e:	0883      	lsrs	r3, r0, #2
   33880:	428b      	cmp	r3, r1
   33882:	d301      	bcc.n	33888 <__udivsi3+0xe4>
   33884:	008b      	lsls	r3, r1, #2
   33886:	1ac0      	subs	r0, r0, r3
   33888:	4152      	adcs	r2, r2
   3388a:	0843      	lsrs	r3, r0, #1
   3388c:	428b      	cmp	r3, r1
   3388e:	d301      	bcc.n	33894 <__udivsi3+0xf0>
   33890:	004b      	lsls	r3, r1, #1
   33892:	1ac0      	subs	r0, r0, r3
   33894:	4152      	adcs	r2, r2
   33896:	1a41      	subs	r1, r0, r1
   33898:	d200      	bcs.n	3389c <__udivsi3+0xf8>
   3389a:	4601      	mov	r1, r0
   3389c:	4152      	adcs	r2, r2
   3389e:	4610      	mov	r0, r2
   338a0:	4770      	bx	lr
   338a2:	e7ff      	b.n	338a4 <__udivsi3+0x100>
   338a4:	b501      	push	{r0, lr}
   338a6:	2000      	movs	r0, #0
   338a8:	f000 f8f0 	bl	33a8c <__aeabi_idiv0>
   338ac:	bd02      	pop	{r1, pc}
   338ae:	46c0      	nop			; (mov r8, r8)

000338b0 <__aeabi_uidivmod>:
   338b0:	2900      	cmp	r1, #0
   338b2:	d0f7      	beq.n	338a4 <__udivsi3+0x100>
   338b4:	e776      	b.n	337a4 <__udivsi3>
   338b6:	4770      	bx	lr

000338b8 <__divsi3>:
   338b8:	4603      	mov	r3, r0
   338ba:	430b      	orrs	r3, r1
   338bc:	d47f      	bmi.n	339be <__divsi3+0x106>
   338be:	2200      	movs	r2, #0
   338c0:	0843      	lsrs	r3, r0, #1
   338c2:	428b      	cmp	r3, r1
   338c4:	d374      	bcc.n	339b0 <__divsi3+0xf8>
   338c6:	0903      	lsrs	r3, r0, #4
   338c8:	428b      	cmp	r3, r1
   338ca:	d35f      	bcc.n	3398c <__divsi3+0xd4>
   338cc:	0a03      	lsrs	r3, r0, #8
   338ce:	428b      	cmp	r3, r1
   338d0:	d344      	bcc.n	3395c <__divsi3+0xa4>
   338d2:	0b03      	lsrs	r3, r0, #12
   338d4:	428b      	cmp	r3, r1
   338d6:	d328      	bcc.n	3392a <__divsi3+0x72>
   338d8:	0c03      	lsrs	r3, r0, #16
   338da:	428b      	cmp	r3, r1
   338dc:	d30d      	bcc.n	338fa <__divsi3+0x42>
   338de:	22ff      	movs	r2, #255	; 0xff
   338e0:	0209      	lsls	r1, r1, #8
   338e2:	ba12      	rev	r2, r2
   338e4:	0c03      	lsrs	r3, r0, #16
   338e6:	428b      	cmp	r3, r1
   338e8:	d302      	bcc.n	338f0 <__divsi3+0x38>
   338ea:	1212      	asrs	r2, r2, #8
   338ec:	0209      	lsls	r1, r1, #8
   338ee:	d065      	beq.n	339bc <__divsi3+0x104>
   338f0:	0b03      	lsrs	r3, r0, #12
   338f2:	428b      	cmp	r3, r1
   338f4:	d319      	bcc.n	3392a <__divsi3+0x72>
   338f6:	e000      	b.n	338fa <__divsi3+0x42>
   338f8:	0a09      	lsrs	r1, r1, #8
   338fa:	0bc3      	lsrs	r3, r0, #15
   338fc:	428b      	cmp	r3, r1
   338fe:	d301      	bcc.n	33904 <__divsi3+0x4c>
   33900:	03cb      	lsls	r3, r1, #15
   33902:	1ac0      	subs	r0, r0, r3
   33904:	4152      	adcs	r2, r2
   33906:	0b83      	lsrs	r3, r0, #14
   33908:	428b      	cmp	r3, r1
   3390a:	d301      	bcc.n	33910 <__divsi3+0x58>
   3390c:	038b      	lsls	r3, r1, #14
   3390e:	1ac0      	subs	r0, r0, r3
   33910:	4152      	adcs	r2, r2
   33912:	0b43      	lsrs	r3, r0, #13
   33914:	428b      	cmp	r3, r1
   33916:	d301      	bcc.n	3391c <__divsi3+0x64>
   33918:	034b      	lsls	r3, r1, #13
   3391a:	1ac0      	subs	r0, r0, r3
   3391c:	4152      	adcs	r2, r2
   3391e:	0b03      	lsrs	r3, r0, #12
   33920:	428b      	cmp	r3, r1
   33922:	d301      	bcc.n	33928 <__divsi3+0x70>
   33924:	030b      	lsls	r3, r1, #12
   33926:	1ac0      	subs	r0, r0, r3
   33928:	4152      	adcs	r2, r2
   3392a:	0ac3      	lsrs	r3, r0, #11
   3392c:	428b      	cmp	r3, r1
   3392e:	d301      	bcc.n	33934 <__divsi3+0x7c>
   33930:	02cb      	lsls	r3, r1, #11
   33932:	1ac0      	subs	r0, r0, r3
   33934:	4152      	adcs	r2, r2
   33936:	0a83      	lsrs	r3, r0, #10
   33938:	428b      	cmp	r3, r1
   3393a:	d301      	bcc.n	33940 <__divsi3+0x88>
   3393c:	028b      	lsls	r3, r1, #10
   3393e:	1ac0      	subs	r0, r0, r3
   33940:	4152      	adcs	r2, r2
   33942:	0a43      	lsrs	r3, r0, #9
   33944:	428b      	cmp	r3, r1
   33946:	d301      	bcc.n	3394c <__divsi3+0x94>
   33948:	024b      	lsls	r3, r1, #9
   3394a:	1ac0      	subs	r0, r0, r3
   3394c:	4152      	adcs	r2, r2
   3394e:	0a03      	lsrs	r3, r0, #8
   33950:	428b      	cmp	r3, r1
   33952:	d301      	bcc.n	33958 <__divsi3+0xa0>
   33954:	020b      	lsls	r3, r1, #8
   33956:	1ac0      	subs	r0, r0, r3
   33958:	4152      	adcs	r2, r2
   3395a:	d2cd      	bcs.n	338f8 <__divsi3+0x40>
   3395c:	09c3      	lsrs	r3, r0, #7
   3395e:	428b      	cmp	r3, r1
   33960:	d301      	bcc.n	33966 <__divsi3+0xae>
   33962:	01cb      	lsls	r3, r1, #7
   33964:	1ac0      	subs	r0, r0, r3
   33966:	4152      	adcs	r2, r2
   33968:	0983      	lsrs	r3, r0, #6
   3396a:	428b      	cmp	r3, r1
   3396c:	d301      	bcc.n	33972 <__divsi3+0xba>
   3396e:	018b      	lsls	r3, r1, #6
   33970:	1ac0      	subs	r0, r0, r3
   33972:	4152      	adcs	r2, r2
   33974:	0943      	lsrs	r3, r0, #5
   33976:	428b      	cmp	r3, r1
   33978:	d301      	bcc.n	3397e <__divsi3+0xc6>
   3397a:	014b      	lsls	r3, r1, #5
   3397c:	1ac0      	subs	r0, r0, r3
   3397e:	4152      	adcs	r2, r2
   33980:	0903      	lsrs	r3, r0, #4
   33982:	428b      	cmp	r3, r1
   33984:	d301      	bcc.n	3398a <__divsi3+0xd2>
   33986:	010b      	lsls	r3, r1, #4
   33988:	1ac0      	subs	r0, r0, r3
   3398a:	4152      	adcs	r2, r2
   3398c:	08c3      	lsrs	r3, r0, #3
   3398e:	428b      	cmp	r3, r1
   33990:	d301      	bcc.n	33996 <__divsi3+0xde>
   33992:	00cb      	lsls	r3, r1, #3
   33994:	1ac0      	subs	r0, r0, r3
   33996:	4152      	adcs	r2, r2
   33998:	0883      	lsrs	r3, r0, #2
   3399a:	428b      	cmp	r3, r1
   3399c:	d301      	bcc.n	339a2 <__divsi3+0xea>
   3399e:	008b      	lsls	r3, r1, #2
   339a0:	1ac0      	subs	r0, r0, r3
   339a2:	4152      	adcs	r2, r2
   339a4:	0843      	lsrs	r3, r0, #1
   339a6:	428b      	cmp	r3, r1
   339a8:	d301      	bcc.n	339ae <__divsi3+0xf6>
   339aa:	004b      	lsls	r3, r1, #1
   339ac:	1ac0      	subs	r0, r0, r3
   339ae:	4152      	adcs	r2, r2
   339b0:	1a41      	subs	r1, r0, r1
   339b2:	d200      	bcs.n	339b6 <__divsi3+0xfe>
   339b4:	4601      	mov	r1, r0
   339b6:	4152      	adcs	r2, r2
   339b8:	4610      	mov	r0, r2
   339ba:	4770      	bx	lr
   339bc:	e05d      	b.n	33a7a <__divsi3+0x1c2>
   339be:	0fca      	lsrs	r2, r1, #31
   339c0:	d000      	beq.n	339c4 <__divsi3+0x10c>
   339c2:	4249      	negs	r1, r1
   339c4:	1003      	asrs	r3, r0, #32
   339c6:	d300      	bcc.n	339ca <__divsi3+0x112>
   339c8:	4240      	negs	r0, r0
   339ca:	4053      	eors	r3, r2
   339cc:	2200      	movs	r2, #0
   339ce:	469c      	mov	ip, r3
   339d0:	0903      	lsrs	r3, r0, #4
   339d2:	428b      	cmp	r3, r1
   339d4:	d32d      	bcc.n	33a32 <__divsi3+0x17a>
   339d6:	0a03      	lsrs	r3, r0, #8
   339d8:	428b      	cmp	r3, r1
   339da:	d312      	bcc.n	33a02 <__divsi3+0x14a>
   339dc:	22fc      	movs	r2, #252	; 0xfc
   339de:	0189      	lsls	r1, r1, #6
   339e0:	ba12      	rev	r2, r2
   339e2:	0a03      	lsrs	r3, r0, #8
   339e4:	428b      	cmp	r3, r1
   339e6:	d30c      	bcc.n	33a02 <__divsi3+0x14a>
   339e8:	0189      	lsls	r1, r1, #6
   339ea:	1192      	asrs	r2, r2, #6
   339ec:	428b      	cmp	r3, r1
   339ee:	d308      	bcc.n	33a02 <__divsi3+0x14a>
   339f0:	0189      	lsls	r1, r1, #6
   339f2:	1192      	asrs	r2, r2, #6
   339f4:	428b      	cmp	r3, r1
   339f6:	d304      	bcc.n	33a02 <__divsi3+0x14a>
   339f8:	0189      	lsls	r1, r1, #6
   339fa:	d03a      	beq.n	33a72 <__divsi3+0x1ba>
   339fc:	1192      	asrs	r2, r2, #6
   339fe:	e000      	b.n	33a02 <__divsi3+0x14a>
   33a00:	0989      	lsrs	r1, r1, #6
   33a02:	09c3      	lsrs	r3, r0, #7
   33a04:	428b      	cmp	r3, r1
   33a06:	d301      	bcc.n	33a0c <__divsi3+0x154>
   33a08:	01cb      	lsls	r3, r1, #7
   33a0a:	1ac0      	subs	r0, r0, r3
   33a0c:	4152      	adcs	r2, r2
   33a0e:	0983      	lsrs	r3, r0, #6
   33a10:	428b      	cmp	r3, r1
   33a12:	d301      	bcc.n	33a18 <__divsi3+0x160>
   33a14:	018b      	lsls	r3, r1, #6
   33a16:	1ac0      	subs	r0, r0, r3
   33a18:	4152      	adcs	r2, r2
   33a1a:	0943      	lsrs	r3, r0, #5
   33a1c:	428b      	cmp	r3, r1
   33a1e:	d301      	bcc.n	33a24 <__divsi3+0x16c>
   33a20:	014b      	lsls	r3, r1, #5
   33a22:	1ac0      	subs	r0, r0, r3
   33a24:	4152      	adcs	r2, r2
   33a26:	0903      	lsrs	r3, r0, #4
   33a28:	428b      	cmp	r3, r1
   33a2a:	d301      	bcc.n	33a30 <__divsi3+0x178>
   33a2c:	010b      	lsls	r3, r1, #4
   33a2e:	1ac0      	subs	r0, r0, r3
   33a30:	4152      	adcs	r2, r2
   33a32:	08c3      	lsrs	r3, r0, #3
   33a34:	428b      	cmp	r3, r1
   33a36:	d301      	bcc.n	33a3c <__divsi3+0x184>
   33a38:	00cb      	lsls	r3, r1, #3
   33a3a:	1ac0      	subs	r0, r0, r3
   33a3c:	4152      	adcs	r2, r2
   33a3e:	0883      	lsrs	r3, r0, #2
   33a40:	428b      	cmp	r3, r1
   33a42:	d301      	bcc.n	33a48 <__divsi3+0x190>
   33a44:	008b      	lsls	r3, r1, #2
   33a46:	1ac0      	subs	r0, r0, r3
   33a48:	4152      	adcs	r2, r2
   33a4a:	d2d9      	bcs.n	33a00 <__divsi3+0x148>
   33a4c:	0843      	lsrs	r3, r0, #1
   33a4e:	428b      	cmp	r3, r1
   33a50:	d301      	bcc.n	33a56 <__divsi3+0x19e>
   33a52:	004b      	lsls	r3, r1, #1
   33a54:	1ac0      	subs	r0, r0, r3
   33a56:	4152      	adcs	r2, r2
   33a58:	1a41      	subs	r1, r0, r1
   33a5a:	d200      	bcs.n	33a5e <__divsi3+0x1a6>
   33a5c:	4601      	mov	r1, r0
   33a5e:	4663      	mov	r3, ip
   33a60:	4152      	adcs	r2, r2
   33a62:	105b      	asrs	r3, r3, #1
   33a64:	4610      	mov	r0, r2
   33a66:	d301      	bcc.n	33a6c <__divsi3+0x1b4>
   33a68:	4240      	negs	r0, r0
   33a6a:	2b00      	cmp	r3, #0
   33a6c:	d500      	bpl.n	33a70 <__divsi3+0x1b8>
   33a6e:	4249      	negs	r1, r1
   33a70:	4770      	bx	lr
   33a72:	4663      	mov	r3, ip
   33a74:	105b      	asrs	r3, r3, #1
   33a76:	d300      	bcc.n	33a7a <__divsi3+0x1c2>
   33a78:	4240      	negs	r0, r0
   33a7a:	b501      	push	{r0, lr}
   33a7c:	2000      	movs	r0, #0
   33a7e:	f000 f805 	bl	33a8c <__aeabi_idiv0>
   33a82:	bd02      	pop	{r1, pc}

00033a84 <__aeabi_idivmod>:
   33a84:	2900      	cmp	r1, #0
   33a86:	d0f8      	beq.n	33a7a <__divsi3+0x1c2>
   33a88:	e716      	b.n	338b8 <__divsi3>
   33a8a:	4770      	bx	lr

00033a8c <__aeabi_idiv0>:
   33a8c:	4770      	bx	lr
   33a8e:	46c0      	nop			; (mov r8, r8)

00033a90 <__aeabi_lmul>:
   33a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   33a92:	46ce      	mov	lr, r9
   33a94:	4647      	mov	r7, r8
   33a96:	0415      	lsls	r5, r2, #16
   33a98:	0c2d      	lsrs	r5, r5, #16
   33a9a:	002e      	movs	r6, r5
   33a9c:	b580      	push	{r7, lr}
   33a9e:	0407      	lsls	r7, r0, #16
   33aa0:	0c14      	lsrs	r4, r2, #16
   33aa2:	0c3f      	lsrs	r7, r7, #16
   33aa4:	4699      	mov	r9, r3
   33aa6:	0c03      	lsrs	r3, r0, #16
   33aa8:	437e      	muls	r6, r7
   33aaa:	435d      	muls	r5, r3
   33aac:	4367      	muls	r7, r4
   33aae:	4363      	muls	r3, r4
   33ab0:	197f      	adds	r7, r7, r5
   33ab2:	0c34      	lsrs	r4, r6, #16
   33ab4:	19e4      	adds	r4, r4, r7
   33ab6:	469c      	mov	ip, r3
   33ab8:	42a5      	cmp	r5, r4
   33aba:	d903      	bls.n	33ac4 <__aeabi_lmul+0x34>
   33abc:	2380      	movs	r3, #128	; 0x80
   33abe:	025b      	lsls	r3, r3, #9
   33ac0:	4698      	mov	r8, r3
   33ac2:	44c4      	add	ip, r8
   33ac4:	464b      	mov	r3, r9
   33ac6:	4351      	muls	r1, r2
   33ac8:	4343      	muls	r3, r0
   33aca:	0436      	lsls	r6, r6, #16
   33acc:	0c36      	lsrs	r6, r6, #16
   33ace:	0c25      	lsrs	r5, r4, #16
   33ad0:	0424      	lsls	r4, r4, #16
   33ad2:	4465      	add	r5, ip
   33ad4:	19a4      	adds	r4, r4, r6
   33ad6:	1859      	adds	r1, r3, r1
   33ad8:	1949      	adds	r1, r1, r5
   33ada:	0020      	movs	r0, r4
   33adc:	bc0c      	pop	{r2, r3}
   33ade:	4690      	mov	r8, r2
   33ae0:	4699      	mov	r9, r3
   33ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033ae4 <__aeabi_fmul>:
   33ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33ae6:	4657      	mov	r7, sl
   33ae8:	464e      	mov	r6, r9
   33aea:	4645      	mov	r5, r8
   33aec:	46de      	mov	lr, fp
   33aee:	b5e0      	push	{r5, r6, r7, lr}
   33af0:	0247      	lsls	r7, r0, #9
   33af2:	0046      	lsls	r6, r0, #1
   33af4:	4688      	mov	r8, r1
   33af6:	0a7f      	lsrs	r7, r7, #9
   33af8:	0e36      	lsrs	r6, r6, #24
   33afa:	0fc4      	lsrs	r4, r0, #31
   33afc:	2e00      	cmp	r6, #0
   33afe:	d047      	beq.n	33b90 <__aeabi_fmul+0xac>
   33b00:	2eff      	cmp	r6, #255	; 0xff
   33b02:	d024      	beq.n	33b4e <__aeabi_fmul+0x6a>
   33b04:	00fb      	lsls	r3, r7, #3
   33b06:	2780      	movs	r7, #128	; 0x80
   33b08:	04ff      	lsls	r7, r7, #19
   33b0a:	431f      	orrs	r7, r3
   33b0c:	2300      	movs	r3, #0
   33b0e:	4699      	mov	r9, r3
   33b10:	469a      	mov	sl, r3
   33b12:	3e7f      	subs	r6, #127	; 0x7f
   33b14:	4643      	mov	r3, r8
   33b16:	025d      	lsls	r5, r3, #9
   33b18:	0058      	lsls	r0, r3, #1
   33b1a:	0fdb      	lsrs	r3, r3, #31
   33b1c:	0a6d      	lsrs	r5, r5, #9
   33b1e:	0e00      	lsrs	r0, r0, #24
   33b20:	4698      	mov	r8, r3
   33b22:	d043      	beq.n	33bac <__aeabi_fmul+0xc8>
   33b24:	28ff      	cmp	r0, #255	; 0xff
   33b26:	d03b      	beq.n	33ba0 <__aeabi_fmul+0xbc>
   33b28:	00eb      	lsls	r3, r5, #3
   33b2a:	2580      	movs	r5, #128	; 0x80
   33b2c:	2200      	movs	r2, #0
   33b2e:	04ed      	lsls	r5, r5, #19
   33b30:	431d      	orrs	r5, r3
   33b32:	387f      	subs	r0, #127	; 0x7f
   33b34:	1836      	adds	r6, r6, r0
   33b36:	1c73      	adds	r3, r6, #1
   33b38:	4641      	mov	r1, r8
   33b3a:	469b      	mov	fp, r3
   33b3c:	464b      	mov	r3, r9
   33b3e:	4061      	eors	r1, r4
   33b40:	4313      	orrs	r3, r2
   33b42:	2b0f      	cmp	r3, #15
   33b44:	d864      	bhi.n	33c10 <__aeabi_fmul+0x12c>
   33b46:	4875      	ldr	r0, [pc, #468]	; (33d1c <__aeabi_fmul+0x238>)
   33b48:	009b      	lsls	r3, r3, #2
   33b4a:	58c3      	ldr	r3, [r0, r3]
   33b4c:	469f      	mov	pc, r3
   33b4e:	2f00      	cmp	r7, #0
   33b50:	d142      	bne.n	33bd8 <__aeabi_fmul+0xf4>
   33b52:	2308      	movs	r3, #8
   33b54:	4699      	mov	r9, r3
   33b56:	3b06      	subs	r3, #6
   33b58:	26ff      	movs	r6, #255	; 0xff
   33b5a:	469a      	mov	sl, r3
   33b5c:	e7da      	b.n	33b14 <__aeabi_fmul+0x30>
   33b5e:	4641      	mov	r1, r8
   33b60:	2a02      	cmp	r2, #2
   33b62:	d028      	beq.n	33bb6 <__aeabi_fmul+0xd2>
   33b64:	2a03      	cmp	r2, #3
   33b66:	d100      	bne.n	33b6a <__aeabi_fmul+0x86>
   33b68:	e0ce      	b.n	33d08 <__aeabi_fmul+0x224>
   33b6a:	2a01      	cmp	r2, #1
   33b6c:	d000      	beq.n	33b70 <__aeabi_fmul+0x8c>
   33b6e:	e0ac      	b.n	33cca <__aeabi_fmul+0x1e6>
   33b70:	4011      	ands	r1, r2
   33b72:	2000      	movs	r0, #0
   33b74:	2200      	movs	r2, #0
   33b76:	b2cc      	uxtb	r4, r1
   33b78:	0240      	lsls	r0, r0, #9
   33b7a:	05d2      	lsls	r2, r2, #23
   33b7c:	0a40      	lsrs	r0, r0, #9
   33b7e:	07e4      	lsls	r4, r4, #31
   33b80:	4310      	orrs	r0, r2
   33b82:	4320      	orrs	r0, r4
   33b84:	bc3c      	pop	{r2, r3, r4, r5}
   33b86:	4690      	mov	r8, r2
   33b88:	4699      	mov	r9, r3
   33b8a:	46a2      	mov	sl, r4
   33b8c:	46ab      	mov	fp, r5
   33b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33b90:	2f00      	cmp	r7, #0
   33b92:	d115      	bne.n	33bc0 <__aeabi_fmul+0xdc>
   33b94:	2304      	movs	r3, #4
   33b96:	4699      	mov	r9, r3
   33b98:	3b03      	subs	r3, #3
   33b9a:	2600      	movs	r6, #0
   33b9c:	469a      	mov	sl, r3
   33b9e:	e7b9      	b.n	33b14 <__aeabi_fmul+0x30>
   33ba0:	20ff      	movs	r0, #255	; 0xff
   33ba2:	2202      	movs	r2, #2
   33ba4:	2d00      	cmp	r5, #0
   33ba6:	d0c5      	beq.n	33b34 <__aeabi_fmul+0x50>
   33ba8:	2203      	movs	r2, #3
   33baa:	e7c3      	b.n	33b34 <__aeabi_fmul+0x50>
   33bac:	2d00      	cmp	r5, #0
   33bae:	d119      	bne.n	33be4 <__aeabi_fmul+0x100>
   33bb0:	2000      	movs	r0, #0
   33bb2:	2201      	movs	r2, #1
   33bb4:	e7be      	b.n	33b34 <__aeabi_fmul+0x50>
   33bb6:	2401      	movs	r4, #1
   33bb8:	22ff      	movs	r2, #255	; 0xff
   33bba:	400c      	ands	r4, r1
   33bbc:	2000      	movs	r0, #0
   33bbe:	e7db      	b.n	33b78 <__aeabi_fmul+0x94>
   33bc0:	0038      	movs	r0, r7
   33bc2:	f001 fd65 	bl	35690 <__clzsi2>
   33bc6:	2676      	movs	r6, #118	; 0x76
   33bc8:	1f43      	subs	r3, r0, #5
   33bca:	409f      	lsls	r7, r3
   33bcc:	2300      	movs	r3, #0
   33bce:	4276      	negs	r6, r6
   33bd0:	1a36      	subs	r6, r6, r0
   33bd2:	4699      	mov	r9, r3
   33bd4:	469a      	mov	sl, r3
   33bd6:	e79d      	b.n	33b14 <__aeabi_fmul+0x30>
   33bd8:	230c      	movs	r3, #12
   33bda:	4699      	mov	r9, r3
   33bdc:	3b09      	subs	r3, #9
   33bde:	26ff      	movs	r6, #255	; 0xff
   33be0:	469a      	mov	sl, r3
   33be2:	e797      	b.n	33b14 <__aeabi_fmul+0x30>
   33be4:	0028      	movs	r0, r5
   33be6:	f001 fd53 	bl	35690 <__clzsi2>
   33bea:	1f43      	subs	r3, r0, #5
   33bec:	409d      	lsls	r5, r3
   33bee:	2376      	movs	r3, #118	; 0x76
   33bf0:	425b      	negs	r3, r3
   33bf2:	1a18      	subs	r0, r3, r0
   33bf4:	2200      	movs	r2, #0
   33bf6:	e79d      	b.n	33b34 <__aeabi_fmul+0x50>
   33bf8:	2080      	movs	r0, #128	; 0x80
   33bfa:	2400      	movs	r4, #0
   33bfc:	03c0      	lsls	r0, r0, #15
   33bfe:	22ff      	movs	r2, #255	; 0xff
   33c00:	e7ba      	b.n	33b78 <__aeabi_fmul+0x94>
   33c02:	003d      	movs	r5, r7
   33c04:	4652      	mov	r2, sl
   33c06:	e7ab      	b.n	33b60 <__aeabi_fmul+0x7c>
   33c08:	003d      	movs	r5, r7
   33c0a:	0021      	movs	r1, r4
   33c0c:	4652      	mov	r2, sl
   33c0e:	e7a7      	b.n	33b60 <__aeabi_fmul+0x7c>
   33c10:	0c3b      	lsrs	r3, r7, #16
   33c12:	469c      	mov	ip, r3
   33c14:	042a      	lsls	r2, r5, #16
   33c16:	0c12      	lsrs	r2, r2, #16
   33c18:	0c2b      	lsrs	r3, r5, #16
   33c1a:	0014      	movs	r4, r2
   33c1c:	4660      	mov	r0, ip
   33c1e:	4665      	mov	r5, ip
   33c20:	043f      	lsls	r7, r7, #16
   33c22:	0c3f      	lsrs	r7, r7, #16
   33c24:	437c      	muls	r4, r7
   33c26:	4342      	muls	r2, r0
   33c28:	435d      	muls	r5, r3
   33c2a:	437b      	muls	r3, r7
   33c2c:	0c27      	lsrs	r7, r4, #16
   33c2e:	189b      	adds	r3, r3, r2
   33c30:	18ff      	adds	r7, r7, r3
   33c32:	42ba      	cmp	r2, r7
   33c34:	d903      	bls.n	33c3e <__aeabi_fmul+0x15a>
   33c36:	2380      	movs	r3, #128	; 0x80
   33c38:	025b      	lsls	r3, r3, #9
   33c3a:	469c      	mov	ip, r3
   33c3c:	4465      	add	r5, ip
   33c3e:	0424      	lsls	r4, r4, #16
   33c40:	043a      	lsls	r2, r7, #16
   33c42:	0c24      	lsrs	r4, r4, #16
   33c44:	1912      	adds	r2, r2, r4
   33c46:	0193      	lsls	r3, r2, #6
   33c48:	1e5c      	subs	r4, r3, #1
   33c4a:	41a3      	sbcs	r3, r4
   33c4c:	0c3f      	lsrs	r7, r7, #16
   33c4e:	0e92      	lsrs	r2, r2, #26
   33c50:	197d      	adds	r5, r7, r5
   33c52:	431a      	orrs	r2, r3
   33c54:	01ad      	lsls	r5, r5, #6
   33c56:	4315      	orrs	r5, r2
   33c58:	012b      	lsls	r3, r5, #4
   33c5a:	d504      	bpl.n	33c66 <__aeabi_fmul+0x182>
   33c5c:	2301      	movs	r3, #1
   33c5e:	465e      	mov	r6, fp
   33c60:	086a      	lsrs	r2, r5, #1
   33c62:	401d      	ands	r5, r3
   33c64:	4315      	orrs	r5, r2
   33c66:	0032      	movs	r2, r6
   33c68:	327f      	adds	r2, #127	; 0x7f
   33c6a:	2a00      	cmp	r2, #0
   33c6c:	dd25      	ble.n	33cba <__aeabi_fmul+0x1d6>
   33c6e:	076b      	lsls	r3, r5, #29
   33c70:	d004      	beq.n	33c7c <__aeabi_fmul+0x198>
   33c72:	230f      	movs	r3, #15
   33c74:	402b      	ands	r3, r5
   33c76:	2b04      	cmp	r3, #4
   33c78:	d000      	beq.n	33c7c <__aeabi_fmul+0x198>
   33c7a:	3504      	adds	r5, #4
   33c7c:	012b      	lsls	r3, r5, #4
   33c7e:	d503      	bpl.n	33c88 <__aeabi_fmul+0x1a4>
   33c80:	0032      	movs	r2, r6
   33c82:	4b27      	ldr	r3, [pc, #156]	; (33d20 <__aeabi_fmul+0x23c>)
   33c84:	3280      	adds	r2, #128	; 0x80
   33c86:	401d      	ands	r5, r3
   33c88:	2afe      	cmp	r2, #254	; 0xfe
   33c8a:	dc94      	bgt.n	33bb6 <__aeabi_fmul+0xd2>
   33c8c:	2401      	movs	r4, #1
   33c8e:	01a8      	lsls	r0, r5, #6
   33c90:	0a40      	lsrs	r0, r0, #9
   33c92:	b2d2      	uxtb	r2, r2
   33c94:	400c      	ands	r4, r1
   33c96:	e76f      	b.n	33b78 <__aeabi_fmul+0x94>
   33c98:	2080      	movs	r0, #128	; 0x80
   33c9a:	03c0      	lsls	r0, r0, #15
   33c9c:	4207      	tst	r7, r0
   33c9e:	d007      	beq.n	33cb0 <__aeabi_fmul+0x1cc>
   33ca0:	4205      	tst	r5, r0
   33ca2:	d105      	bne.n	33cb0 <__aeabi_fmul+0x1cc>
   33ca4:	4328      	orrs	r0, r5
   33ca6:	0240      	lsls	r0, r0, #9
   33ca8:	0a40      	lsrs	r0, r0, #9
   33caa:	4644      	mov	r4, r8
   33cac:	22ff      	movs	r2, #255	; 0xff
   33cae:	e763      	b.n	33b78 <__aeabi_fmul+0x94>
   33cb0:	4338      	orrs	r0, r7
   33cb2:	0240      	lsls	r0, r0, #9
   33cb4:	0a40      	lsrs	r0, r0, #9
   33cb6:	22ff      	movs	r2, #255	; 0xff
   33cb8:	e75e      	b.n	33b78 <__aeabi_fmul+0x94>
   33cba:	2401      	movs	r4, #1
   33cbc:	1aa3      	subs	r3, r4, r2
   33cbe:	2b1b      	cmp	r3, #27
   33cc0:	dd05      	ble.n	33cce <__aeabi_fmul+0x1ea>
   33cc2:	400c      	ands	r4, r1
   33cc4:	2200      	movs	r2, #0
   33cc6:	2000      	movs	r0, #0
   33cc8:	e756      	b.n	33b78 <__aeabi_fmul+0x94>
   33cca:	465e      	mov	r6, fp
   33ccc:	e7cb      	b.n	33c66 <__aeabi_fmul+0x182>
   33cce:	002a      	movs	r2, r5
   33cd0:	2020      	movs	r0, #32
   33cd2:	40da      	lsrs	r2, r3
   33cd4:	1ac3      	subs	r3, r0, r3
   33cd6:	409d      	lsls	r5, r3
   33cd8:	002b      	movs	r3, r5
   33cda:	1e5d      	subs	r5, r3, #1
   33cdc:	41ab      	sbcs	r3, r5
   33cde:	4313      	orrs	r3, r2
   33ce0:	075a      	lsls	r2, r3, #29
   33ce2:	d004      	beq.n	33cee <__aeabi_fmul+0x20a>
   33ce4:	220f      	movs	r2, #15
   33ce6:	401a      	ands	r2, r3
   33ce8:	2a04      	cmp	r2, #4
   33cea:	d000      	beq.n	33cee <__aeabi_fmul+0x20a>
   33cec:	3304      	adds	r3, #4
   33cee:	015a      	lsls	r2, r3, #5
   33cf0:	d504      	bpl.n	33cfc <__aeabi_fmul+0x218>
   33cf2:	2401      	movs	r4, #1
   33cf4:	2201      	movs	r2, #1
   33cf6:	400c      	ands	r4, r1
   33cf8:	2000      	movs	r0, #0
   33cfa:	e73d      	b.n	33b78 <__aeabi_fmul+0x94>
   33cfc:	2401      	movs	r4, #1
   33cfe:	019b      	lsls	r3, r3, #6
   33d00:	0a58      	lsrs	r0, r3, #9
   33d02:	400c      	ands	r4, r1
   33d04:	2200      	movs	r2, #0
   33d06:	e737      	b.n	33b78 <__aeabi_fmul+0x94>
   33d08:	2080      	movs	r0, #128	; 0x80
   33d0a:	2401      	movs	r4, #1
   33d0c:	03c0      	lsls	r0, r0, #15
   33d0e:	4328      	orrs	r0, r5
   33d10:	0240      	lsls	r0, r0, #9
   33d12:	0a40      	lsrs	r0, r0, #9
   33d14:	400c      	ands	r4, r1
   33d16:	22ff      	movs	r2, #255	; 0xff
   33d18:	e72e      	b.n	33b78 <__aeabi_fmul+0x94>
   33d1a:	46c0      	nop			; (mov r8, r8)
   33d1c:	0003b014 	.word	0x0003b014
   33d20:	f7ffffff 	.word	0xf7ffffff

00033d24 <__aeabi_f2iz>:
   33d24:	0241      	lsls	r1, r0, #9
   33d26:	0043      	lsls	r3, r0, #1
   33d28:	0fc2      	lsrs	r2, r0, #31
   33d2a:	0a49      	lsrs	r1, r1, #9
   33d2c:	0e1b      	lsrs	r3, r3, #24
   33d2e:	2000      	movs	r0, #0
   33d30:	2b7e      	cmp	r3, #126	; 0x7e
   33d32:	dd0d      	ble.n	33d50 <__aeabi_f2iz+0x2c>
   33d34:	2b9d      	cmp	r3, #157	; 0x9d
   33d36:	dc0c      	bgt.n	33d52 <__aeabi_f2iz+0x2e>
   33d38:	2080      	movs	r0, #128	; 0x80
   33d3a:	0400      	lsls	r0, r0, #16
   33d3c:	4301      	orrs	r1, r0
   33d3e:	2b95      	cmp	r3, #149	; 0x95
   33d40:	dc0a      	bgt.n	33d58 <__aeabi_f2iz+0x34>
   33d42:	2096      	movs	r0, #150	; 0x96
   33d44:	1ac3      	subs	r3, r0, r3
   33d46:	40d9      	lsrs	r1, r3
   33d48:	4248      	negs	r0, r1
   33d4a:	2a00      	cmp	r2, #0
   33d4c:	d100      	bne.n	33d50 <__aeabi_f2iz+0x2c>
   33d4e:	0008      	movs	r0, r1
   33d50:	4770      	bx	lr
   33d52:	4b03      	ldr	r3, [pc, #12]	; (33d60 <__aeabi_f2iz+0x3c>)
   33d54:	18d0      	adds	r0, r2, r3
   33d56:	e7fb      	b.n	33d50 <__aeabi_f2iz+0x2c>
   33d58:	3b96      	subs	r3, #150	; 0x96
   33d5a:	4099      	lsls	r1, r3
   33d5c:	e7f4      	b.n	33d48 <__aeabi_f2iz+0x24>
   33d5e:	46c0      	nop			; (mov r8, r8)
   33d60:	7fffffff 	.word	0x7fffffff

00033d64 <__aeabi_i2f>:
   33d64:	b570      	push	{r4, r5, r6, lr}
   33d66:	2800      	cmp	r0, #0
   33d68:	d030      	beq.n	33dcc <__aeabi_i2f+0x68>
   33d6a:	17c3      	asrs	r3, r0, #31
   33d6c:	18c4      	adds	r4, r0, r3
   33d6e:	405c      	eors	r4, r3
   33d70:	0fc5      	lsrs	r5, r0, #31
   33d72:	0020      	movs	r0, r4
   33d74:	f001 fc8c 	bl	35690 <__clzsi2>
   33d78:	239e      	movs	r3, #158	; 0x9e
   33d7a:	1a1b      	subs	r3, r3, r0
   33d7c:	2b96      	cmp	r3, #150	; 0x96
   33d7e:	dc0d      	bgt.n	33d9c <__aeabi_i2f+0x38>
   33d80:	2296      	movs	r2, #150	; 0x96
   33d82:	1ad2      	subs	r2, r2, r3
   33d84:	4094      	lsls	r4, r2
   33d86:	002a      	movs	r2, r5
   33d88:	0264      	lsls	r4, r4, #9
   33d8a:	0a64      	lsrs	r4, r4, #9
   33d8c:	b2db      	uxtb	r3, r3
   33d8e:	0264      	lsls	r4, r4, #9
   33d90:	05db      	lsls	r3, r3, #23
   33d92:	0a60      	lsrs	r0, r4, #9
   33d94:	07d2      	lsls	r2, r2, #31
   33d96:	4318      	orrs	r0, r3
   33d98:	4310      	orrs	r0, r2
   33d9a:	bd70      	pop	{r4, r5, r6, pc}
   33d9c:	2b99      	cmp	r3, #153	; 0x99
   33d9e:	dc19      	bgt.n	33dd4 <__aeabi_i2f+0x70>
   33da0:	2299      	movs	r2, #153	; 0x99
   33da2:	1ad2      	subs	r2, r2, r3
   33da4:	2a00      	cmp	r2, #0
   33da6:	dd29      	ble.n	33dfc <__aeabi_i2f+0x98>
   33da8:	4094      	lsls	r4, r2
   33daa:	0022      	movs	r2, r4
   33dac:	4c14      	ldr	r4, [pc, #80]	; (33e00 <__aeabi_i2f+0x9c>)
   33dae:	4014      	ands	r4, r2
   33db0:	0751      	lsls	r1, r2, #29
   33db2:	d004      	beq.n	33dbe <__aeabi_i2f+0x5a>
   33db4:	210f      	movs	r1, #15
   33db6:	400a      	ands	r2, r1
   33db8:	2a04      	cmp	r2, #4
   33dba:	d000      	beq.n	33dbe <__aeabi_i2f+0x5a>
   33dbc:	3404      	adds	r4, #4
   33dbe:	0162      	lsls	r2, r4, #5
   33dc0:	d413      	bmi.n	33dea <__aeabi_i2f+0x86>
   33dc2:	01a4      	lsls	r4, r4, #6
   33dc4:	0a64      	lsrs	r4, r4, #9
   33dc6:	b2db      	uxtb	r3, r3
   33dc8:	002a      	movs	r2, r5
   33dca:	e7e0      	b.n	33d8e <__aeabi_i2f+0x2a>
   33dcc:	2200      	movs	r2, #0
   33dce:	2300      	movs	r3, #0
   33dd0:	2400      	movs	r4, #0
   33dd2:	e7dc      	b.n	33d8e <__aeabi_i2f+0x2a>
   33dd4:	2205      	movs	r2, #5
   33dd6:	0021      	movs	r1, r4
   33dd8:	1a12      	subs	r2, r2, r0
   33dda:	40d1      	lsrs	r1, r2
   33ddc:	22b9      	movs	r2, #185	; 0xb9
   33dde:	1ad2      	subs	r2, r2, r3
   33de0:	4094      	lsls	r4, r2
   33de2:	1e62      	subs	r2, r4, #1
   33de4:	4194      	sbcs	r4, r2
   33de6:	430c      	orrs	r4, r1
   33de8:	e7da      	b.n	33da0 <__aeabi_i2f+0x3c>
   33dea:	4b05      	ldr	r3, [pc, #20]	; (33e00 <__aeabi_i2f+0x9c>)
   33dec:	002a      	movs	r2, r5
   33dee:	401c      	ands	r4, r3
   33df0:	239f      	movs	r3, #159	; 0x9f
   33df2:	01a4      	lsls	r4, r4, #6
   33df4:	1a1b      	subs	r3, r3, r0
   33df6:	0a64      	lsrs	r4, r4, #9
   33df8:	b2db      	uxtb	r3, r3
   33dfa:	e7c8      	b.n	33d8e <__aeabi_i2f+0x2a>
   33dfc:	0022      	movs	r2, r4
   33dfe:	e7d5      	b.n	33dac <__aeabi_i2f+0x48>
   33e00:	fbffffff 	.word	0xfbffffff

00033e04 <__aeabi_dadd>:
   33e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33e06:	4645      	mov	r5, r8
   33e08:	46de      	mov	lr, fp
   33e0a:	4657      	mov	r7, sl
   33e0c:	464e      	mov	r6, r9
   33e0e:	030c      	lsls	r4, r1, #12
   33e10:	b5e0      	push	{r5, r6, r7, lr}
   33e12:	004e      	lsls	r6, r1, #1
   33e14:	0fc9      	lsrs	r1, r1, #31
   33e16:	4688      	mov	r8, r1
   33e18:	000d      	movs	r5, r1
   33e1a:	0a61      	lsrs	r1, r4, #9
   33e1c:	0f44      	lsrs	r4, r0, #29
   33e1e:	430c      	orrs	r4, r1
   33e20:	00c7      	lsls	r7, r0, #3
   33e22:	0319      	lsls	r1, r3, #12
   33e24:	0058      	lsls	r0, r3, #1
   33e26:	0fdb      	lsrs	r3, r3, #31
   33e28:	469b      	mov	fp, r3
   33e2a:	0a4b      	lsrs	r3, r1, #9
   33e2c:	0f51      	lsrs	r1, r2, #29
   33e2e:	430b      	orrs	r3, r1
   33e30:	0d76      	lsrs	r6, r6, #21
   33e32:	0d40      	lsrs	r0, r0, #21
   33e34:	0019      	movs	r1, r3
   33e36:	00d2      	lsls	r2, r2, #3
   33e38:	45d8      	cmp	r8, fp
   33e3a:	d100      	bne.n	33e3e <__aeabi_dadd+0x3a>
   33e3c:	e0ae      	b.n	33f9c <__aeabi_dadd+0x198>
   33e3e:	1a35      	subs	r5, r6, r0
   33e40:	2d00      	cmp	r5, #0
   33e42:	dc00      	bgt.n	33e46 <__aeabi_dadd+0x42>
   33e44:	e0f6      	b.n	34034 <__aeabi_dadd+0x230>
   33e46:	2800      	cmp	r0, #0
   33e48:	d10f      	bne.n	33e6a <__aeabi_dadd+0x66>
   33e4a:	4313      	orrs	r3, r2
   33e4c:	d100      	bne.n	33e50 <__aeabi_dadd+0x4c>
   33e4e:	e0db      	b.n	34008 <__aeabi_dadd+0x204>
   33e50:	1e6b      	subs	r3, r5, #1
   33e52:	2b00      	cmp	r3, #0
   33e54:	d000      	beq.n	33e58 <__aeabi_dadd+0x54>
   33e56:	e137      	b.n	340c8 <__aeabi_dadd+0x2c4>
   33e58:	1aba      	subs	r2, r7, r2
   33e5a:	4297      	cmp	r7, r2
   33e5c:	41bf      	sbcs	r7, r7
   33e5e:	1a64      	subs	r4, r4, r1
   33e60:	427f      	negs	r7, r7
   33e62:	1be4      	subs	r4, r4, r7
   33e64:	2601      	movs	r6, #1
   33e66:	0017      	movs	r7, r2
   33e68:	e024      	b.n	33eb4 <__aeabi_dadd+0xb0>
   33e6a:	4bc6      	ldr	r3, [pc, #792]	; (34184 <__aeabi_dadd+0x380>)
   33e6c:	429e      	cmp	r6, r3
   33e6e:	d04d      	beq.n	33f0c <__aeabi_dadd+0x108>
   33e70:	2380      	movs	r3, #128	; 0x80
   33e72:	041b      	lsls	r3, r3, #16
   33e74:	4319      	orrs	r1, r3
   33e76:	2d38      	cmp	r5, #56	; 0x38
   33e78:	dd00      	ble.n	33e7c <__aeabi_dadd+0x78>
   33e7a:	e107      	b.n	3408c <__aeabi_dadd+0x288>
   33e7c:	2d1f      	cmp	r5, #31
   33e7e:	dd00      	ble.n	33e82 <__aeabi_dadd+0x7e>
   33e80:	e138      	b.n	340f4 <__aeabi_dadd+0x2f0>
   33e82:	2020      	movs	r0, #32
   33e84:	1b43      	subs	r3, r0, r5
   33e86:	469a      	mov	sl, r3
   33e88:	000b      	movs	r3, r1
   33e8a:	4650      	mov	r0, sl
   33e8c:	4083      	lsls	r3, r0
   33e8e:	4699      	mov	r9, r3
   33e90:	0013      	movs	r3, r2
   33e92:	4648      	mov	r0, r9
   33e94:	40eb      	lsrs	r3, r5
   33e96:	4318      	orrs	r0, r3
   33e98:	0003      	movs	r3, r0
   33e9a:	4650      	mov	r0, sl
   33e9c:	4082      	lsls	r2, r0
   33e9e:	1e50      	subs	r0, r2, #1
   33ea0:	4182      	sbcs	r2, r0
   33ea2:	40e9      	lsrs	r1, r5
   33ea4:	431a      	orrs	r2, r3
   33ea6:	1aba      	subs	r2, r7, r2
   33ea8:	1a61      	subs	r1, r4, r1
   33eaa:	4297      	cmp	r7, r2
   33eac:	41a4      	sbcs	r4, r4
   33eae:	0017      	movs	r7, r2
   33eb0:	4264      	negs	r4, r4
   33eb2:	1b0c      	subs	r4, r1, r4
   33eb4:	0223      	lsls	r3, r4, #8
   33eb6:	d562      	bpl.n	33f7e <__aeabi_dadd+0x17a>
   33eb8:	0264      	lsls	r4, r4, #9
   33eba:	0a65      	lsrs	r5, r4, #9
   33ebc:	2d00      	cmp	r5, #0
   33ebe:	d100      	bne.n	33ec2 <__aeabi_dadd+0xbe>
   33ec0:	e0df      	b.n	34082 <__aeabi_dadd+0x27e>
   33ec2:	0028      	movs	r0, r5
   33ec4:	f001 fbe4 	bl	35690 <__clzsi2>
   33ec8:	0003      	movs	r3, r0
   33eca:	3b08      	subs	r3, #8
   33ecc:	2b1f      	cmp	r3, #31
   33ece:	dd00      	ble.n	33ed2 <__aeabi_dadd+0xce>
   33ed0:	e0d2      	b.n	34078 <__aeabi_dadd+0x274>
   33ed2:	2220      	movs	r2, #32
   33ed4:	003c      	movs	r4, r7
   33ed6:	1ad2      	subs	r2, r2, r3
   33ed8:	409d      	lsls	r5, r3
   33eda:	40d4      	lsrs	r4, r2
   33edc:	409f      	lsls	r7, r3
   33ede:	4325      	orrs	r5, r4
   33ee0:	429e      	cmp	r6, r3
   33ee2:	dd00      	ble.n	33ee6 <__aeabi_dadd+0xe2>
   33ee4:	e0c4      	b.n	34070 <__aeabi_dadd+0x26c>
   33ee6:	1b9e      	subs	r6, r3, r6
   33ee8:	1c73      	adds	r3, r6, #1
   33eea:	2b1f      	cmp	r3, #31
   33eec:	dd00      	ble.n	33ef0 <__aeabi_dadd+0xec>
   33eee:	e0f1      	b.n	340d4 <__aeabi_dadd+0x2d0>
   33ef0:	2220      	movs	r2, #32
   33ef2:	0038      	movs	r0, r7
   33ef4:	0029      	movs	r1, r5
   33ef6:	1ad2      	subs	r2, r2, r3
   33ef8:	40d8      	lsrs	r0, r3
   33efa:	4091      	lsls	r1, r2
   33efc:	4097      	lsls	r7, r2
   33efe:	002c      	movs	r4, r5
   33f00:	4301      	orrs	r1, r0
   33f02:	1e78      	subs	r0, r7, #1
   33f04:	4187      	sbcs	r7, r0
   33f06:	40dc      	lsrs	r4, r3
   33f08:	2600      	movs	r6, #0
   33f0a:	430f      	orrs	r7, r1
   33f0c:	077b      	lsls	r3, r7, #29
   33f0e:	d009      	beq.n	33f24 <__aeabi_dadd+0x120>
   33f10:	230f      	movs	r3, #15
   33f12:	403b      	ands	r3, r7
   33f14:	2b04      	cmp	r3, #4
   33f16:	d005      	beq.n	33f24 <__aeabi_dadd+0x120>
   33f18:	1d3b      	adds	r3, r7, #4
   33f1a:	42bb      	cmp	r3, r7
   33f1c:	41bf      	sbcs	r7, r7
   33f1e:	427f      	negs	r7, r7
   33f20:	19e4      	adds	r4, r4, r7
   33f22:	001f      	movs	r7, r3
   33f24:	0223      	lsls	r3, r4, #8
   33f26:	d52c      	bpl.n	33f82 <__aeabi_dadd+0x17e>
   33f28:	4b96      	ldr	r3, [pc, #600]	; (34184 <__aeabi_dadd+0x380>)
   33f2a:	3601      	adds	r6, #1
   33f2c:	429e      	cmp	r6, r3
   33f2e:	d100      	bne.n	33f32 <__aeabi_dadd+0x12e>
   33f30:	e09a      	b.n	34068 <__aeabi_dadd+0x264>
   33f32:	4645      	mov	r5, r8
   33f34:	4b94      	ldr	r3, [pc, #592]	; (34188 <__aeabi_dadd+0x384>)
   33f36:	08ff      	lsrs	r7, r7, #3
   33f38:	401c      	ands	r4, r3
   33f3a:	0760      	lsls	r0, r4, #29
   33f3c:	0576      	lsls	r6, r6, #21
   33f3e:	0264      	lsls	r4, r4, #9
   33f40:	4307      	orrs	r7, r0
   33f42:	0b24      	lsrs	r4, r4, #12
   33f44:	0d76      	lsrs	r6, r6, #21
   33f46:	2100      	movs	r1, #0
   33f48:	0324      	lsls	r4, r4, #12
   33f4a:	0b23      	lsrs	r3, r4, #12
   33f4c:	0d0c      	lsrs	r4, r1, #20
   33f4e:	4a8f      	ldr	r2, [pc, #572]	; (3418c <__aeabi_dadd+0x388>)
   33f50:	0524      	lsls	r4, r4, #20
   33f52:	431c      	orrs	r4, r3
   33f54:	4014      	ands	r4, r2
   33f56:	0533      	lsls	r3, r6, #20
   33f58:	4323      	orrs	r3, r4
   33f5a:	005b      	lsls	r3, r3, #1
   33f5c:	07ed      	lsls	r5, r5, #31
   33f5e:	085b      	lsrs	r3, r3, #1
   33f60:	432b      	orrs	r3, r5
   33f62:	0038      	movs	r0, r7
   33f64:	0019      	movs	r1, r3
   33f66:	bc3c      	pop	{r2, r3, r4, r5}
   33f68:	4690      	mov	r8, r2
   33f6a:	4699      	mov	r9, r3
   33f6c:	46a2      	mov	sl, r4
   33f6e:	46ab      	mov	fp, r5
   33f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33f72:	4664      	mov	r4, ip
   33f74:	4304      	orrs	r4, r0
   33f76:	d100      	bne.n	33f7a <__aeabi_dadd+0x176>
   33f78:	e211      	b.n	3439e <__aeabi_dadd+0x59a>
   33f7a:	0004      	movs	r4, r0
   33f7c:	4667      	mov	r7, ip
   33f7e:	077b      	lsls	r3, r7, #29
   33f80:	d1c6      	bne.n	33f10 <__aeabi_dadd+0x10c>
   33f82:	4645      	mov	r5, r8
   33f84:	0760      	lsls	r0, r4, #29
   33f86:	08ff      	lsrs	r7, r7, #3
   33f88:	4307      	orrs	r7, r0
   33f8a:	08e4      	lsrs	r4, r4, #3
   33f8c:	4b7d      	ldr	r3, [pc, #500]	; (34184 <__aeabi_dadd+0x380>)
   33f8e:	429e      	cmp	r6, r3
   33f90:	d030      	beq.n	33ff4 <__aeabi_dadd+0x1f0>
   33f92:	0324      	lsls	r4, r4, #12
   33f94:	0576      	lsls	r6, r6, #21
   33f96:	0b24      	lsrs	r4, r4, #12
   33f98:	0d76      	lsrs	r6, r6, #21
   33f9a:	e7d4      	b.n	33f46 <__aeabi_dadd+0x142>
   33f9c:	1a33      	subs	r3, r6, r0
   33f9e:	469a      	mov	sl, r3
   33fa0:	2b00      	cmp	r3, #0
   33fa2:	dd78      	ble.n	34096 <__aeabi_dadd+0x292>
   33fa4:	2800      	cmp	r0, #0
   33fa6:	d031      	beq.n	3400c <__aeabi_dadd+0x208>
   33fa8:	4876      	ldr	r0, [pc, #472]	; (34184 <__aeabi_dadd+0x380>)
   33faa:	4286      	cmp	r6, r0
   33fac:	d0ae      	beq.n	33f0c <__aeabi_dadd+0x108>
   33fae:	2080      	movs	r0, #128	; 0x80
   33fb0:	0400      	lsls	r0, r0, #16
   33fb2:	4301      	orrs	r1, r0
   33fb4:	4653      	mov	r3, sl
   33fb6:	2b38      	cmp	r3, #56	; 0x38
   33fb8:	dc00      	bgt.n	33fbc <__aeabi_dadd+0x1b8>
   33fba:	e0e9      	b.n	34190 <__aeabi_dadd+0x38c>
   33fbc:	430a      	orrs	r2, r1
   33fbe:	1e51      	subs	r1, r2, #1
   33fc0:	418a      	sbcs	r2, r1
   33fc2:	2100      	movs	r1, #0
   33fc4:	19d2      	adds	r2, r2, r7
   33fc6:	42ba      	cmp	r2, r7
   33fc8:	41bf      	sbcs	r7, r7
   33fca:	1909      	adds	r1, r1, r4
   33fcc:	427c      	negs	r4, r7
   33fce:	0017      	movs	r7, r2
   33fd0:	190c      	adds	r4, r1, r4
   33fd2:	0223      	lsls	r3, r4, #8
   33fd4:	d5d3      	bpl.n	33f7e <__aeabi_dadd+0x17a>
   33fd6:	4b6b      	ldr	r3, [pc, #428]	; (34184 <__aeabi_dadd+0x380>)
   33fd8:	3601      	adds	r6, #1
   33fda:	429e      	cmp	r6, r3
   33fdc:	d100      	bne.n	33fe0 <__aeabi_dadd+0x1dc>
   33fde:	e13a      	b.n	34256 <__aeabi_dadd+0x452>
   33fe0:	2001      	movs	r0, #1
   33fe2:	4b69      	ldr	r3, [pc, #420]	; (34188 <__aeabi_dadd+0x384>)
   33fe4:	401c      	ands	r4, r3
   33fe6:	087b      	lsrs	r3, r7, #1
   33fe8:	4007      	ands	r7, r0
   33fea:	431f      	orrs	r7, r3
   33fec:	07e0      	lsls	r0, r4, #31
   33fee:	4307      	orrs	r7, r0
   33ff0:	0864      	lsrs	r4, r4, #1
   33ff2:	e78b      	b.n	33f0c <__aeabi_dadd+0x108>
   33ff4:	0023      	movs	r3, r4
   33ff6:	433b      	orrs	r3, r7
   33ff8:	d100      	bne.n	33ffc <__aeabi_dadd+0x1f8>
   33ffa:	e1cb      	b.n	34394 <__aeabi_dadd+0x590>
   33ffc:	2280      	movs	r2, #128	; 0x80
   33ffe:	0312      	lsls	r2, r2, #12
   34000:	4314      	orrs	r4, r2
   34002:	0324      	lsls	r4, r4, #12
   34004:	0b24      	lsrs	r4, r4, #12
   34006:	e79e      	b.n	33f46 <__aeabi_dadd+0x142>
   34008:	002e      	movs	r6, r5
   3400a:	e77f      	b.n	33f0c <__aeabi_dadd+0x108>
   3400c:	0008      	movs	r0, r1
   3400e:	4310      	orrs	r0, r2
   34010:	d100      	bne.n	34014 <__aeabi_dadd+0x210>
   34012:	e0b4      	b.n	3417e <__aeabi_dadd+0x37a>
   34014:	1e58      	subs	r0, r3, #1
   34016:	2800      	cmp	r0, #0
   34018:	d000      	beq.n	3401c <__aeabi_dadd+0x218>
   3401a:	e0de      	b.n	341da <__aeabi_dadd+0x3d6>
   3401c:	18ba      	adds	r2, r7, r2
   3401e:	42ba      	cmp	r2, r7
   34020:	419b      	sbcs	r3, r3
   34022:	1864      	adds	r4, r4, r1
   34024:	425b      	negs	r3, r3
   34026:	18e4      	adds	r4, r4, r3
   34028:	0017      	movs	r7, r2
   3402a:	2601      	movs	r6, #1
   3402c:	0223      	lsls	r3, r4, #8
   3402e:	d5a6      	bpl.n	33f7e <__aeabi_dadd+0x17a>
   34030:	2602      	movs	r6, #2
   34032:	e7d5      	b.n	33fe0 <__aeabi_dadd+0x1dc>
   34034:	2d00      	cmp	r5, #0
   34036:	d16e      	bne.n	34116 <__aeabi_dadd+0x312>
   34038:	1c70      	adds	r0, r6, #1
   3403a:	0540      	lsls	r0, r0, #21
   3403c:	0d40      	lsrs	r0, r0, #21
   3403e:	2801      	cmp	r0, #1
   34040:	dc00      	bgt.n	34044 <__aeabi_dadd+0x240>
   34042:	e0f9      	b.n	34238 <__aeabi_dadd+0x434>
   34044:	1ab8      	subs	r0, r7, r2
   34046:	4684      	mov	ip, r0
   34048:	4287      	cmp	r7, r0
   3404a:	4180      	sbcs	r0, r0
   3404c:	1ae5      	subs	r5, r4, r3
   3404e:	4240      	negs	r0, r0
   34050:	1a2d      	subs	r5, r5, r0
   34052:	0228      	lsls	r0, r5, #8
   34054:	d400      	bmi.n	34058 <__aeabi_dadd+0x254>
   34056:	e089      	b.n	3416c <__aeabi_dadd+0x368>
   34058:	1bd7      	subs	r7, r2, r7
   3405a:	42ba      	cmp	r2, r7
   3405c:	4192      	sbcs	r2, r2
   3405e:	1b1c      	subs	r4, r3, r4
   34060:	4252      	negs	r2, r2
   34062:	1aa5      	subs	r5, r4, r2
   34064:	46d8      	mov	r8, fp
   34066:	e729      	b.n	33ebc <__aeabi_dadd+0xb8>
   34068:	4645      	mov	r5, r8
   3406a:	2400      	movs	r4, #0
   3406c:	2700      	movs	r7, #0
   3406e:	e76a      	b.n	33f46 <__aeabi_dadd+0x142>
   34070:	4c45      	ldr	r4, [pc, #276]	; (34188 <__aeabi_dadd+0x384>)
   34072:	1af6      	subs	r6, r6, r3
   34074:	402c      	ands	r4, r5
   34076:	e749      	b.n	33f0c <__aeabi_dadd+0x108>
   34078:	003d      	movs	r5, r7
   3407a:	3828      	subs	r0, #40	; 0x28
   3407c:	4085      	lsls	r5, r0
   3407e:	2700      	movs	r7, #0
   34080:	e72e      	b.n	33ee0 <__aeabi_dadd+0xdc>
   34082:	0038      	movs	r0, r7
   34084:	f001 fb04 	bl	35690 <__clzsi2>
   34088:	3020      	adds	r0, #32
   3408a:	e71d      	b.n	33ec8 <__aeabi_dadd+0xc4>
   3408c:	430a      	orrs	r2, r1
   3408e:	1e51      	subs	r1, r2, #1
   34090:	418a      	sbcs	r2, r1
   34092:	2100      	movs	r1, #0
   34094:	e707      	b.n	33ea6 <__aeabi_dadd+0xa2>
   34096:	2b00      	cmp	r3, #0
   34098:	d000      	beq.n	3409c <__aeabi_dadd+0x298>
   3409a:	e0f3      	b.n	34284 <__aeabi_dadd+0x480>
   3409c:	1c70      	adds	r0, r6, #1
   3409e:	0543      	lsls	r3, r0, #21
   340a0:	0d5b      	lsrs	r3, r3, #21
   340a2:	2b01      	cmp	r3, #1
   340a4:	dc00      	bgt.n	340a8 <__aeabi_dadd+0x2a4>
   340a6:	e0ad      	b.n	34204 <__aeabi_dadd+0x400>
   340a8:	4b36      	ldr	r3, [pc, #216]	; (34184 <__aeabi_dadd+0x380>)
   340aa:	4298      	cmp	r0, r3
   340ac:	d100      	bne.n	340b0 <__aeabi_dadd+0x2ac>
   340ae:	e0d1      	b.n	34254 <__aeabi_dadd+0x450>
   340b0:	18ba      	adds	r2, r7, r2
   340b2:	42ba      	cmp	r2, r7
   340b4:	41bf      	sbcs	r7, r7
   340b6:	1864      	adds	r4, r4, r1
   340b8:	427f      	negs	r7, r7
   340ba:	19e4      	adds	r4, r4, r7
   340bc:	07e7      	lsls	r7, r4, #31
   340be:	0852      	lsrs	r2, r2, #1
   340c0:	4317      	orrs	r7, r2
   340c2:	0864      	lsrs	r4, r4, #1
   340c4:	0006      	movs	r6, r0
   340c6:	e721      	b.n	33f0c <__aeabi_dadd+0x108>
   340c8:	482e      	ldr	r0, [pc, #184]	; (34184 <__aeabi_dadd+0x380>)
   340ca:	4285      	cmp	r5, r0
   340cc:	d100      	bne.n	340d0 <__aeabi_dadd+0x2cc>
   340ce:	e093      	b.n	341f8 <__aeabi_dadd+0x3f4>
   340d0:	001d      	movs	r5, r3
   340d2:	e6d0      	b.n	33e76 <__aeabi_dadd+0x72>
   340d4:	0029      	movs	r1, r5
   340d6:	3e1f      	subs	r6, #31
   340d8:	40f1      	lsrs	r1, r6
   340da:	2b20      	cmp	r3, #32
   340dc:	d100      	bne.n	340e0 <__aeabi_dadd+0x2dc>
   340de:	e08d      	b.n	341fc <__aeabi_dadd+0x3f8>
   340e0:	2240      	movs	r2, #64	; 0x40
   340e2:	1ad3      	subs	r3, r2, r3
   340e4:	409d      	lsls	r5, r3
   340e6:	432f      	orrs	r7, r5
   340e8:	1e7d      	subs	r5, r7, #1
   340ea:	41af      	sbcs	r7, r5
   340ec:	2400      	movs	r4, #0
   340ee:	430f      	orrs	r7, r1
   340f0:	2600      	movs	r6, #0
   340f2:	e744      	b.n	33f7e <__aeabi_dadd+0x17a>
   340f4:	002b      	movs	r3, r5
   340f6:	0008      	movs	r0, r1
   340f8:	3b20      	subs	r3, #32
   340fa:	40d8      	lsrs	r0, r3
   340fc:	0003      	movs	r3, r0
   340fe:	2d20      	cmp	r5, #32
   34100:	d100      	bne.n	34104 <__aeabi_dadd+0x300>
   34102:	e07d      	b.n	34200 <__aeabi_dadd+0x3fc>
   34104:	2040      	movs	r0, #64	; 0x40
   34106:	1b45      	subs	r5, r0, r5
   34108:	40a9      	lsls	r1, r5
   3410a:	430a      	orrs	r2, r1
   3410c:	1e51      	subs	r1, r2, #1
   3410e:	418a      	sbcs	r2, r1
   34110:	2100      	movs	r1, #0
   34112:	431a      	orrs	r2, r3
   34114:	e6c7      	b.n	33ea6 <__aeabi_dadd+0xa2>
   34116:	2e00      	cmp	r6, #0
   34118:	d050      	beq.n	341bc <__aeabi_dadd+0x3b8>
   3411a:	4e1a      	ldr	r6, [pc, #104]	; (34184 <__aeabi_dadd+0x380>)
   3411c:	42b0      	cmp	r0, r6
   3411e:	d057      	beq.n	341d0 <__aeabi_dadd+0x3cc>
   34120:	2680      	movs	r6, #128	; 0x80
   34122:	426b      	negs	r3, r5
   34124:	4699      	mov	r9, r3
   34126:	0436      	lsls	r6, r6, #16
   34128:	4334      	orrs	r4, r6
   3412a:	464b      	mov	r3, r9
   3412c:	2b38      	cmp	r3, #56	; 0x38
   3412e:	dd00      	ble.n	34132 <__aeabi_dadd+0x32e>
   34130:	e0d6      	b.n	342e0 <__aeabi_dadd+0x4dc>
   34132:	2b1f      	cmp	r3, #31
   34134:	dd00      	ble.n	34138 <__aeabi_dadd+0x334>
   34136:	e135      	b.n	343a4 <__aeabi_dadd+0x5a0>
   34138:	2620      	movs	r6, #32
   3413a:	1af5      	subs	r5, r6, r3
   3413c:	0026      	movs	r6, r4
   3413e:	40ae      	lsls	r6, r5
   34140:	46b2      	mov	sl, r6
   34142:	003e      	movs	r6, r7
   34144:	40de      	lsrs	r6, r3
   34146:	46ac      	mov	ip, r5
   34148:	0035      	movs	r5, r6
   3414a:	4656      	mov	r6, sl
   3414c:	432e      	orrs	r6, r5
   3414e:	4665      	mov	r5, ip
   34150:	40af      	lsls	r7, r5
   34152:	1e7d      	subs	r5, r7, #1
   34154:	41af      	sbcs	r7, r5
   34156:	40dc      	lsrs	r4, r3
   34158:	4337      	orrs	r7, r6
   3415a:	1bd7      	subs	r7, r2, r7
   3415c:	42ba      	cmp	r2, r7
   3415e:	4192      	sbcs	r2, r2
   34160:	1b0c      	subs	r4, r1, r4
   34162:	4252      	negs	r2, r2
   34164:	1aa4      	subs	r4, r4, r2
   34166:	0006      	movs	r6, r0
   34168:	46d8      	mov	r8, fp
   3416a:	e6a3      	b.n	33eb4 <__aeabi_dadd+0xb0>
   3416c:	4664      	mov	r4, ip
   3416e:	4667      	mov	r7, ip
   34170:	432c      	orrs	r4, r5
   34172:	d000      	beq.n	34176 <__aeabi_dadd+0x372>
   34174:	e6a2      	b.n	33ebc <__aeabi_dadd+0xb8>
   34176:	2500      	movs	r5, #0
   34178:	2600      	movs	r6, #0
   3417a:	2700      	movs	r7, #0
   3417c:	e706      	b.n	33f8c <__aeabi_dadd+0x188>
   3417e:	001e      	movs	r6, r3
   34180:	e6c4      	b.n	33f0c <__aeabi_dadd+0x108>
   34182:	46c0      	nop			; (mov r8, r8)
   34184:	000007ff 	.word	0x000007ff
   34188:	ff7fffff 	.word	0xff7fffff
   3418c:	800fffff 	.word	0x800fffff
   34190:	2b1f      	cmp	r3, #31
   34192:	dc63      	bgt.n	3425c <__aeabi_dadd+0x458>
   34194:	2020      	movs	r0, #32
   34196:	1ac3      	subs	r3, r0, r3
   34198:	0008      	movs	r0, r1
   3419a:	4098      	lsls	r0, r3
   3419c:	469c      	mov	ip, r3
   3419e:	4683      	mov	fp, r0
   341a0:	4653      	mov	r3, sl
   341a2:	0010      	movs	r0, r2
   341a4:	40d8      	lsrs	r0, r3
   341a6:	0003      	movs	r3, r0
   341a8:	4658      	mov	r0, fp
   341aa:	4318      	orrs	r0, r3
   341ac:	4663      	mov	r3, ip
   341ae:	409a      	lsls	r2, r3
   341b0:	1e53      	subs	r3, r2, #1
   341b2:	419a      	sbcs	r2, r3
   341b4:	4653      	mov	r3, sl
   341b6:	4302      	orrs	r2, r0
   341b8:	40d9      	lsrs	r1, r3
   341ba:	e703      	b.n	33fc4 <__aeabi_dadd+0x1c0>
   341bc:	0026      	movs	r6, r4
   341be:	433e      	orrs	r6, r7
   341c0:	d006      	beq.n	341d0 <__aeabi_dadd+0x3cc>
   341c2:	43eb      	mvns	r3, r5
   341c4:	4699      	mov	r9, r3
   341c6:	2b00      	cmp	r3, #0
   341c8:	d0c7      	beq.n	3415a <__aeabi_dadd+0x356>
   341ca:	4e94      	ldr	r6, [pc, #592]	; (3441c <__aeabi_dadd+0x618>)
   341cc:	42b0      	cmp	r0, r6
   341ce:	d1ac      	bne.n	3412a <__aeabi_dadd+0x326>
   341d0:	000c      	movs	r4, r1
   341d2:	0017      	movs	r7, r2
   341d4:	0006      	movs	r6, r0
   341d6:	46d8      	mov	r8, fp
   341d8:	e698      	b.n	33f0c <__aeabi_dadd+0x108>
   341da:	4b90      	ldr	r3, [pc, #576]	; (3441c <__aeabi_dadd+0x618>)
   341dc:	459a      	cmp	sl, r3
   341de:	d00b      	beq.n	341f8 <__aeabi_dadd+0x3f4>
   341e0:	4682      	mov	sl, r0
   341e2:	e6e7      	b.n	33fb4 <__aeabi_dadd+0x1b0>
   341e4:	2800      	cmp	r0, #0
   341e6:	d000      	beq.n	341ea <__aeabi_dadd+0x3e6>
   341e8:	e09e      	b.n	34328 <__aeabi_dadd+0x524>
   341ea:	0018      	movs	r0, r3
   341ec:	4310      	orrs	r0, r2
   341ee:	d100      	bne.n	341f2 <__aeabi_dadd+0x3ee>
   341f0:	e0e9      	b.n	343c6 <__aeabi_dadd+0x5c2>
   341f2:	001c      	movs	r4, r3
   341f4:	0017      	movs	r7, r2
   341f6:	46d8      	mov	r8, fp
   341f8:	4e88      	ldr	r6, [pc, #544]	; (3441c <__aeabi_dadd+0x618>)
   341fa:	e687      	b.n	33f0c <__aeabi_dadd+0x108>
   341fc:	2500      	movs	r5, #0
   341fe:	e772      	b.n	340e6 <__aeabi_dadd+0x2e2>
   34200:	2100      	movs	r1, #0
   34202:	e782      	b.n	3410a <__aeabi_dadd+0x306>
   34204:	0023      	movs	r3, r4
   34206:	433b      	orrs	r3, r7
   34208:	2e00      	cmp	r6, #0
   3420a:	d000      	beq.n	3420e <__aeabi_dadd+0x40a>
   3420c:	e0ab      	b.n	34366 <__aeabi_dadd+0x562>
   3420e:	2b00      	cmp	r3, #0
   34210:	d100      	bne.n	34214 <__aeabi_dadd+0x410>
   34212:	e0e7      	b.n	343e4 <__aeabi_dadd+0x5e0>
   34214:	000b      	movs	r3, r1
   34216:	4313      	orrs	r3, r2
   34218:	d100      	bne.n	3421c <__aeabi_dadd+0x418>
   3421a:	e677      	b.n	33f0c <__aeabi_dadd+0x108>
   3421c:	18ba      	adds	r2, r7, r2
   3421e:	42ba      	cmp	r2, r7
   34220:	41bf      	sbcs	r7, r7
   34222:	1864      	adds	r4, r4, r1
   34224:	427f      	negs	r7, r7
   34226:	19e4      	adds	r4, r4, r7
   34228:	0223      	lsls	r3, r4, #8
   3422a:	d400      	bmi.n	3422e <__aeabi_dadd+0x42a>
   3422c:	e0f2      	b.n	34414 <__aeabi_dadd+0x610>
   3422e:	4b7c      	ldr	r3, [pc, #496]	; (34420 <__aeabi_dadd+0x61c>)
   34230:	0017      	movs	r7, r2
   34232:	401c      	ands	r4, r3
   34234:	0006      	movs	r6, r0
   34236:	e669      	b.n	33f0c <__aeabi_dadd+0x108>
   34238:	0020      	movs	r0, r4
   3423a:	4338      	orrs	r0, r7
   3423c:	2e00      	cmp	r6, #0
   3423e:	d1d1      	bne.n	341e4 <__aeabi_dadd+0x3e0>
   34240:	2800      	cmp	r0, #0
   34242:	d15b      	bne.n	342fc <__aeabi_dadd+0x4f8>
   34244:	001c      	movs	r4, r3
   34246:	4314      	orrs	r4, r2
   34248:	d100      	bne.n	3424c <__aeabi_dadd+0x448>
   3424a:	e0a8      	b.n	3439e <__aeabi_dadd+0x59a>
   3424c:	001c      	movs	r4, r3
   3424e:	0017      	movs	r7, r2
   34250:	46d8      	mov	r8, fp
   34252:	e65b      	b.n	33f0c <__aeabi_dadd+0x108>
   34254:	0006      	movs	r6, r0
   34256:	2400      	movs	r4, #0
   34258:	2700      	movs	r7, #0
   3425a:	e697      	b.n	33f8c <__aeabi_dadd+0x188>
   3425c:	4650      	mov	r0, sl
   3425e:	000b      	movs	r3, r1
   34260:	3820      	subs	r0, #32
   34262:	40c3      	lsrs	r3, r0
   34264:	4699      	mov	r9, r3
   34266:	4653      	mov	r3, sl
   34268:	2b20      	cmp	r3, #32
   3426a:	d100      	bne.n	3426e <__aeabi_dadd+0x46a>
   3426c:	e095      	b.n	3439a <__aeabi_dadd+0x596>
   3426e:	2340      	movs	r3, #64	; 0x40
   34270:	4650      	mov	r0, sl
   34272:	1a1b      	subs	r3, r3, r0
   34274:	4099      	lsls	r1, r3
   34276:	430a      	orrs	r2, r1
   34278:	1e51      	subs	r1, r2, #1
   3427a:	418a      	sbcs	r2, r1
   3427c:	464b      	mov	r3, r9
   3427e:	2100      	movs	r1, #0
   34280:	431a      	orrs	r2, r3
   34282:	e69f      	b.n	33fc4 <__aeabi_dadd+0x1c0>
   34284:	2e00      	cmp	r6, #0
   34286:	d130      	bne.n	342ea <__aeabi_dadd+0x4e6>
   34288:	0026      	movs	r6, r4
   3428a:	433e      	orrs	r6, r7
   3428c:	d067      	beq.n	3435e <__aeabi_dadd+0x55a>
   3428e:	43db      	mvns	r3, r3
   34290:	469a      	mov	sl, r3
   34292:	2b00      	cmp	r3, #0
   34294:	d01c      	beq.n	342d0 <__aeabi_dadd+0x4cc>
   34296:	4e61      	ldr	r6, [pc, #388]	; (3441c <__aeabi_dadd+0x618>)
   34298:	42b0      	cmp	r0, r6
   3429a:	d060      	beq.n	3435e <__aeabi_dadd+0x55a>
   3429c:	4653      	mov	r3, sl
   3429e:	2b38      	cmp	r3, #56	; 0x38
   342a0:	dd00      	ble.n	342a4 <__aeabi_dadd+0x4a0>
   342a2:	e096      	b.n	343d2 <__aeabi_dadd+0x5ce>
   342a4:	2b1f      	cmp	r3, #31
   342a6:	dd00      	ble.n	342aa <__aeabi_dadd+0x4a6>
   342a8:	e09f      	b.n	343ea <__aeabi_dadd+0x5e6>
   342aa:	2620      	movs	r6, #32
   342ac:	1af3      	subs	r3, r6, r3
   342ae:	0026      	movs	r6, r4
   342b0:	409e      	lsls	r6, r3
   342b2:	469c      	mov	ip, r3
   342b4:	46b3      	mov	fp, r6
   342b6:	4653      	mov	r3, sl
   342b8:	003e      	movs	r6, r7
   342ba:	40de      	lsrs	r6, r3
   342bc:	0033      	movs	r3, r6
   342be:	465e      	mov	r6, fp
   342c0:	431e      	orrs	r6, r3
   342c2:	4663      	mov	r3, ip
   342c4:	409f      	lsls	r7, r3
   342c6:	1e7b      	subs	r3, r7, #1
   342c8:	419f      	sbcs	r7, r3
   342ca:	4653      	mov	r3, sl
   342cc:	40dc      	lsrs	r4, r3
   342ce:	4337      	orrs	r7, r6
   342d0:	18bf      	adds	r7, r7, r2
   342d2:	4297      	cmp	r7, r2
   342d4:	4192      	sbcs	r2, r2
   342d6:	1864      	adds	r4, r4, r1
   342d8:	4252      	negs	r2, r2
   342da:	18a4      	adds	r4, r4, r2
   342dc:	0006      	movs	r6, r0
   342de:	e678      	b.n	33fd2 <__aeabi_dadd+0x1ce>
   342e0:	4327      	orrs	r7, r4
   342e2:	1e7c      	subs	r4, r7, #1
   342e4:	41a7      	sbcs	r7, r4
   342e6:	2400      	movs	r4, #0
   342e8:	e737      	b.n	3415a <__aeabi_dadd+0x356>
   342ea:	4e4c      	ldr	r6, [pc, #304]	; (3441c <__aeabi_dadd+0x618>)
   342ec:	42b0      	cmp	r0, r6
   342ee:	d036      	beq.n	3435e <__aeabi_dadd+0x55a>
   342f0:	2680      	movs	r6, #128	; 0x80
   342f2:	425b      	negs	r3, r3
   342f4:	0436      	lsls	r6, r6, #16
   342f6:	469a      	mov	sl, r3
   342f8:	4334      	orrs	r4, r6
   342fa:	e7cf      	b.n	3429c <__aeabi_dadd+0x498>
   342fc:	0018      	movs	r0, r3
   342fe:	4310      	orrs	r0, r2
   34300:	d100      	bne.n	34304 <__aeabi_dadd+0x500>
   34302:	e603      	b.n	33f0c <__aeabi_dadd+0x108>
   34304:	1ab8      	subs	r0, r7, r2
   34306:	4684      	mov	ip, r0
   34308:	4567      	cmp	r7, ip
   3430a:	41ad      	sbcs	r5, r5
   3430c:	1ae0      	subs	r0, r4, r3
   3430e:	426d      	negs	r5, r5
   34310:	1b40      	subs	r0, r0, r5
   34312:	0205      	lsls	r5, r0, #8
   34314:	d400      	bmi.n	34318 <__aeabi_dadd+0x514>
   34316:	e62c      	b.n	33f72 <__aeabi_dadd+0x16e>
   34318:	1bd7      	subs	r7, r2, r7
   3431a:	42ba      	cmp	r2, r7
   3431c:	4192      	sbcs	r2, r2
   3431e:	1b1c      	subs	r4, r3, r4
   34320:	4252      	negs	r2, r2
   34322:	1aa4      	subs	r4, r4, r2
   34324:	46d8      	mov	r8, fp
   34326:	e5f1      	b.n	33f0c <__aeabi_dadd+0x108>
   34328:	0018      	movs	r0, r3
   3432a:	4310      	orrs	r0, r2
   3432c:	d100      	bne.n	34330 <__aeabi_dadd+0x52c>
   3432e:	e763      	b.n	341f8 <__aeabi_dadd+0x3f4>
   34330:	08f8      	lsrs	r0, r7, #3
   34332:	0767      	lsls	r7, r4, #29
   34334:	4307      	orrs	r7, r0
   34336:	2080      	movs	r0, #128	; 0x80
   34338:	08e4      	lsrs	r4, r4, #3
   3433a:	0300      	lsls	r0, r0, #12
   3433c:	4204      	tst	r4, r0
   3433e:	d008      	beq.n	34352 <__aeabi_dadd+0x54e>
   34340:	08dd      	lsrs	r5, r3, #3
   34342:	4205      	tst	r5, r0
   34344:	d105      	bne.n	34352 <__aeabi_dadd+0x54e>
   34346:	08d2      	lsrs	r2, r2, #3
   34348:	0759      	lsls	r1, r3, #29
   3434a:	4311      	orrs	r1, r2
   3434c:	000f      	movs	r7, r1
   3434e:	002c      	movs	r4, r5
   34350:	46d8      	mov	r8, fp
   34352:	0f7b      	lsrs	r3, r7, #29
   34354:	00e4      	lsls	r4, r4, #3
   34356:	431c      	orrs	r4, r3
   34358:	00ff      	lsls	r7, r7, #3
   3435a:	4e30      	ldr	r6, [pc, #192]	; (3441c <__aeabi_dadd+0x618>)
   3435c:	e5d6      	b.n	33f0c <__aeabi_dadd+0x108>
   3435e:	000c      	movs	r4, r1
   34360:	0017      	movs	r7, r2
   34362:	0006      	movs	r6, r0
   34364:	e5d2      	b.n	33f0c <__aeabi_dadd+0x108>
   34366:	2b00      	cmp	r3, #0
   34368:	d038      	beq.n	343dc <__aeabi_dadd+0x5d8>
   3436a:	000b      	movs	r3, r1
   3436c:	4313      	orrs	r3, r2
   3436e:	d100      	bne.n	34372 <__aeabi_dadd+0x56e>
   34370:	e742      	b.n	341f8 <__aeabi_dadd+0x3f4>
   34372:	08f8      	lsrs	r0, r7, #3
   34374:	0767      	lsls	r7, r4, #29
   34376:	4307      	orrs	r7, r0
   34378:	2080      	movs	r0, #128	; 0x80
   3437a:	08e4      	lsrs	r4, r4, #3
   3437c:	0300      	lsls	r0, r0, #12
   3437e:	4204      	tst	r4, r0
   34380:	d0e7      	beq.n	34352 <__aeabi_dadd+0x54e>
   34382:	08cb      	lsrs	r3, r1, #3
   34384:	4203      	tst	r3, r0
   34386:	d1e4      	bne.n	34352 <__aeabi_dadd+0x54e>
   34388:	08d2      	lsrs	r2, r2, #3
   3438a:	0749      	lsls	r1, r1, #29
   3438c:	4311      	orrs	r1, r2
   3438e:	000f      	movs	r7, r1
   34390:	001c      	movs	r4, r3
   34392:	e7de      	b.n	34352 <__aeabi_dadd+0x54e>
   34394:	2700      	movs	r7, #0
   34396:	2400      	movs	r4, #0
   34398:	e5d5      	b.n	33f46 <__aeabi_dadd+0x142>
   3439a:	2100      	movs	r1, #0
   3439c:	e76b      	b.n	34276 <__aeabi_dadd+0x472>
   3439e:	2500      	movs	r5, #0
   343a0:	2700      	movs	r7, #0
   343a2:	e5f3      	b.n	33f8c <__aeabi_dadd+0x188>
   343a4:	464e      	mov	r6, r9
   343a6:	0025      	movs	r5, r4
   343a8:	3e20      	subs	r6, #32
   343aa:	40f5      	lsrs	r5, r6
   343ac:	464b      	mov	r3, r9
   343ae:	002e      	movs	r6, r5
   343b0:	2b20      	cmp	r3, #32
   343b2:	d02d      	beq.n	34410 <__aeabi_dadd+0x60c>
   343b4:	2540      	movs	r5, #64	; 0x40
   343b6:	1aed      	subs	r5, r5, r3
   343b8:	40ac      	lsls	r4, r5
   343ba:	4327      	orrs	r7, r4
   343bc:	1e7c      	subs	r4, r7, #1
   343be:	41a7      	sbcs	r7, r4
   343c0:	2400      	movs	r4, #0
   343c2:	4337      	orrs	r7, r6
   343c4:	e6c9      	b.n	3415a <__aeabi_dadd+0x356>
   343c6:	2480      	movs	r4, #128	; 0x80
   343c8:	2500      	movs	r5, #0
   343ca:	0324      	lsls	r4, r4, #12
   343cc:	4e13      	ldr	r6, [pc, #76]	; (3441c <__aeabi_dadd+0x618>)
   343ce:	2700      	movs	r7, #0
   343d0:	e5dc      	b.n	33f8c <__aeabi_dadd+0x188>
   343d2:	4327      	orrs	r7, r4
   343d4:	1e7c      	subs	r4, r7, #1
   343d6:	41a7      	sbcs	r7, r4
   343d8:	2400      	movs	r4, #0
   343da:	e779      	b.n	342d0 <__aeabi_dadd+0x4cc>
   343dc:	000c      	movs	r4, r1
   343de:	0017      	movs	r7, r2
   343e0:	4e0e      	ldr	r6, [pc, #56]	; (3441c <__aeabi_dadd+0x618>)
   343e2:	e593      	b.n	33f0c <__aeabi_dadd+0x108>
   343e4:	000c      	movs	r4, r1
   343e6:	0017      	movs	r7, r2
   343e8:	e590      	b.n	33f0c <__aeabi_dadd+0x108>
   343ea:	4656      	mov	r6, sl
   343ec:	0023      	movs	r3, r4
   343ee:	3e20      	subs	r6, #32
   343f0:	40f3      	lsrs	r3, r6
   343f2:	4699      	mov	r9, r3
   343f4:	4653      	mov	r3, sl
   343f6:	2b20      	cmp	r3, #32
   343f8:	d00e      	beq.n	34418 <__aeabi_dadd+0x614>
   343fa:	2340      	movs	r3, #64	; 0x40
   343fc:	4656      	mov	r6, sl
   343fe:	1b9b      	subs	r3, r3, r6
   34400:	409c      	lsls	r4, r3
   34402:	4327      	orrs	r7, r4
   34404:	1e7c      	subs	r4, r7, #1
   34406:	41a7      	sbcs	r7, r4
   34408:	464b      	mov	r3, r9
   3440a:	2400      	movs	r4, #0
   3440c:	431f      	orrs	r7, r3
   3440e:	e75f      	b.n	342d0 <__aeabi_dadd+0x4cc>
   34410:	2400      	movs	r4, #0
   34412:	e7d2      	b.n	343ba <__aeabi_dadd+0x5b6>
   34414:	0017      	movs	r7, r2
   34416:	e5b2      	b.n	33f7e <__aeabi_dadd+0x17a>
   34418:	2400      	movs	r4, #0
   3441a:	e7f2      	b.n	34402 <__aeabi_dadd+0x5fe>
   3441c:	000007ff 	.word	0x000007ff
   34420:	ff7fffff 	.word	0xff7fffff

00034424 <__aeabi_ddiv>:
   34424:	b5f0      	push	{r4, r5, r6, r7, lr}
   34426:	4657      	mov	r7, sl
   34428:	4645      	mov	r5, r8
   3442a:	46de      	mov	lr, fp
   3442c:	464e      	mov	r6, r9
   3442e:	b5e0      	push	{r5, r6, r7, lr}
   34430:	004c      	lsls	r4, r1, #1
   34432:	030e      	lsls	r6, r1, #12
   34434:	b087      	sub	sp, #28
   34436:	4683      	mov	fp, r0
   34438:	4692      	mov	sl, r2
   3443a:	001d      	movs	r5, r3
   3443c:	4680      	mov	r8, r0
   3443e:	0b36      	lsrs	r6, r6, #12
   34440:	0d64      	lsrs	r4, r4, #21
   34442:	0fcf      	lsrs	r7, r1, #31
   34444:	2c00      	cmp	r4, #0
   34446:	d04f      	beq.n	344e8 <__aeabi_ddiv+0xc4>
   34448:	4b6f      	ldr	r3, [pc, #444]	; (34608 <__aeabi_ddiv+0x1e4>)
   3444a:	429c      	cmp	r4, r3
   3444c:	d035      	beq.n	344ba <__aeabi_ddiv+0x96>
   3444e:	2380      	movs	r3, #128	; 0x80
   34450:	0f42      	lsrs	r2, r0, #29
   34452:	041b      	lsls	r3, r3, #16
   34454:	00f6      	lsls	r6, r6, #3
   34456:	4313      	orrs	r3, r2
   34458:	4333      	orrs	r3, r6
   3445a:	4699      	mov	r9, r3
   3445c:	00c3      	lsls	r3, r0, #3
   3445e:	4698      	mov	r8, r3
   34460:	4b6a      	ldr	r3, [pc, #424]	; (3460c <__aeabi_ddiv+0x1e8>)
   34462:	2600      	movs	r6, #0
   34464:	469c      	mov	ip, r3
   34466:	2300      	movs	r3, #0
   34468:	4464      	add	r4, ip
   3446a:	9303      	str	r3, [sp, #12]
   3446c:	032b      	lsls	r3, r5, #12
   3446e:	0b1b      	lsrs	r3, r3, #12
   34470:	469b      	mov	fp, r3
   34472:	006b      	lsls	r3, r5, #1
   34474:	0fed      	lsrs	r5, r5, #31
   34476:	4650      	mov	r0, sl
   34478:	0d5b      	lsrs	r3, r3, #21
   3447a:	9501      	str	r5, [sp, #4]
   3447c:	d05e      	beq.n	3453c <__aeabi_ddiv+0x118>
   3447e:	4a62      	ldr	r2, [pc, #392]	; (34608 <__aeabi_ddiv+0x1e4>)
   34480:	4293      	cmp	r3, r2
   34482:	d053      	beq.n	3452c <__aeabi_ddiv+0x108>
   34484:	465a      	mov	r2, fp
   34486:	00d1      	lsls	r1, r2, #3
   34488:	2280      	movs	r2, #128	; 0x80
   3448a:	0f40      	lsrs	r0, r0, #29
   3448c:	0412      	lsls	r2, r2, #16
   3448e:	4302      	orrs	r2, r0
   34490:	430a      	orrs	r2, r1
   34492:	4693      	mov	fp, r2
   34494:	4652      	mov	r2, sl
   34496:	00d1      	lsls	r1, r2, #3
   34498:	4a5c      	ldr	r2, [pc, #368]	; (3460c <__aeabi_ddiv+0x1e8>)
   3449a:	4694      	mov	ip, r2
   3449c:	2200      	movs	r2, #0
   3449e:	4463      	add	r3, ip
   344a0:	0038      	movs	r0, r7
   344a2:	4068      	eors	r0, r5
   344a4:	4684      	mov	ip, r0
   344a6:	9002      	str	r0, [sp, #8]
   344a8:	1ae4      	subs	r4, r4, r3
   344aa:	4316      	orrs	r6, r2
   344ac:	2e0f      	cmp	r6, #15
   344ae:	d900      	bls.n	344b2 <__aeabi_ddiv+0x8e>
   344b0:	e0b4      	b.n	3461c <__aeabi_ddiv+0x1f8>
   344b2:	4b57      	ldr	r3, [pc, #348]	; (34610 <__aeabi_ddiv+0x1ec>)
   344b4:	00b6      	lsls	r6, r6, #2
   344b6:	599b      	ldr	r3, [r3, r6]
   344b8:	469f      	mov	pc, r3
   344ba:	0003      	movs	r3, r0
   344bc:	4333      	orrs	r3, r6
   344be:	4699      	mov	r9, r3
   344c0:	d16c      	bne.n	3459c <__aeabi_ddiv+0x178>
   344c2:	2300      	movs	r3, #0
   344c4:	4698      	mov	r8, r3
   344c6:	3302      	adds	r3, #2
   344c8:	2608      	movs	r6, #8
   344ca:	9303      	str	r3, [sp, #12]
   344cc:	e7ce      	b.n	3446c <__aeabi_ddiv+0x48>
   344ce:	46cb      	mov	fp, r9
   344d0:	4641      	mov	r1, r8
   344d2:	9a03      	ldr	r2, [sp, #12]
   344d4:	9701      	str	r7, [sp, #4]
   344d6:	2a02      	cmp	r2, #2
   344d8:	d165      	bne.n	345a6 <__aeabi_ddiv+0x182>
   344da:	9b01      	ldr	r3, [sp, #4]
   344dc:	4c4a      	ldr	r4, [pc, #296]	; (34608 <__aeabi_ddiv+0x1e4>)
   344de:	469c      	mov	ip, r3
   344e0:	2300      	movs	r3, #0
   344e2:	2200      	movs	r2, #0
   344e4:	4698      	mov	r8, r3
   344e6:	e06b      	b.n	345c0 <__aeabi_ddiv+0x19c>
   344e8:	0003      	movs	r3, r0
   344ea:	4333      	orrs	r3, r6
   344ec:	4699      	mov	r9, r3
   344ee:	d04e      	beq.n	3458e <__aeabi_ddiv+0x16a>
   344f0:	2e00      	cmp	r6, #0
   344f2:	d100      	bne.n	344f6 <__aeabi_ddiv+0xd2>
   344f4:	e1bc      	b.n	34870 <__aeabi_ddiv+0x44c>
   344f6:	0030      	movs	r0, r6
   344f8:	f001 f8ca 	bl	35690 <__clzsi2>
   344fc:	0003      	movs	r3, r0
   344fe:	3b0b      	subs	r3, #11
   34500:	2b1c      	cmp	r3, #28
   34502:	dd00      	ble.n	34506 <__aeabi_ddiv+0xe2>
   34504:	e1ac      	b.n	34860 <__aeabi_ddiv+0x43c>
   34506:	221d      	movs	r2, #29
   34508:	1ad3      	subs	r3, r2, r3
   3450a:	465a      	mov	r2, fp
   3450c:	0001      	movs	r1, r0
   3450e:	40da      	lsrs	r2, r3
   34510:	3908      	subs	r1, #8
   34512:	408e      	lsls	r6, r1
   34514:	0013      	movs	r3, r2
   34516:	4333      	orrs	r3, r6
   34518:	4699      	mov	r9, r3
   3451a:	465b      	mov	r3, fp
   3451c:	408b      	lsls	r3, r1
   3451e:	4698      	mov	r8, r3
   34520:	2300      	movs	r3, #0
   34522:	4c3c      	ldr	r4, [pc, #240]	; (34614 <__aeabi_ddiv+0x1f0>)
   34524:	2600      	movs	r6, #0
   34526:	1a24      	subs	r4, r4, r0
   34528:	9303      	str	r3, [sp, #12]
   3452a:	e79f      	b.n	3446c <__aeabi_ddiv+0x48>
   3452c:	4651      	mov	r1, sl
   3452e:	465a      	mov	r2, fp
   34530:	4311      	orrs	r1, r2
   34532:	d129      	bne.n	34588 <__aeabi_ddiv+0x164>
   34534:	2200      	movs	r2, #0
   34536:	4693      	mov	fp, r2
   34538:	3202      	adds	r2, #2
   3453a:	e7b1      	b.n	344a0 <__aeabi_ddiv+0x7c>
   3453c:	4659      	mov	r1, fp
   3453e:	4301      	orrs	r1, r0
   34540:	d01e      	beq.n	34580 <__aeabi_ddiv+0x15c>
   34542:	465b      	mov	r3, fp
   34544:	2b00      	cmp	r3, #0
   34546:	d100      	bne.n	3454a <__aeabi_ddiv+0x126>
   34548:	e19e      	b.n	34888 <__aeabi_ddiv+0x464>
   3454a:	4658      	mov	r0, fp
   3454c:	f001 f8a0 	bl	35690 <__clzsi2>
   34550:	0003      	movs	r3, r0
   34552:	3b0b      	subs	r3, #11
   34554:	2b1c      	cmp	r3, #28
   34556:	dd00      	ble.n	3455a <__aeabi_ddiv+0x136>
   34558:	e18f      	b.n	3487a <__aeabi_ddiv+0x456>
   3455a:	0002      	movs	r2, r0
   3455c:	4659      	mov	r1, fp
   3455e:	3a08      	subs	r2, #8
   34560:	4091      	lsls	r1, r2
   34562:	468b      	mov	fp, r1
   34564:	211d      	movs	r1, #29
   34566:	1acb      	subs	r3, r1, r3
   34568:	4651      	mov	r1, sl
   3456a:	40d9      	lsrs	r1, r3
   3456c:	000b      	movs	r3, r1
   3456e:	4659      	mov	r1, fp
   34570:	430b      	orrs	r3, r1
   34572:	4651      	mov	r1, sl
   34574:	469b      	mov	fp, r3
   34576:	4091      	lsls	r1, r2
   34578:	4b26      	ldr	r3, [pc, #152]	; (34614 <__aeabi_ddiv+0x1f0>)
   3457a:	2200      	movs	r2, #0
   3457c:	1a1b      	subs	r3, r3, r0
   3457e:	e78f      	b.n	344a0 <__aeabi_ddiv+0x7c>
   34580:	2300      	movs	r3, #0
   34582:	2201      	movs	r2, #1
   34584:	469b      	mov	fp, r3
   34586:	e78b      	b.n	344a0 <__aeabi_ddiv+0x7c>
   34588:	4651      	mov	r1, sl
   3458a:	2203      	movs	r2, #3
   3458c:	e788      	b.n	344a0 <__aeabi_ddiv+0x7c>
   3458e:	2300      	movs	r3, #0
   34590:	4698      	mov	r8, r3
   34592:	3301      	adds	r3, #1
   34594:	2604      	movs	r6, #4
   34596:	2400      	movs	r4, #0
   34598:	9303      	str	r3, [sp, #12]
   3459a:	e767      	b.n	3446c <__aeabi_ddiv+0x48>
   3459c:	2303      	movs	r3, #3
   3459e:	46b1      	mov	r9, r6
   345a0:	9303      	str	r3, [sp, #12]
   345a2:	260c      	movs	r6, #12
   345a4:	e762      	b.n	3446c <__aeabi_ddiv+0x48>
   345a6:	2a03      	cmp	r2, #3
   345a8:	d100      	bne.n	345ac <__aeabi_ddiv+0x188>
   345aa:	e25c      	b.n	34a66 <__aeabi_ddiv+0x642>
   345ac:	9b01      	ldr	r3, [sp, #4]
   345ae:	2a01      	cmp	r2, #1
   345b0:	d000      	beq.n	345b4 <__aeabi_ddiv+0x190>
   345b2:	e1e4      	b.n	3497e <__aeabi_ddiv+0x55a>
   345b4:	4013      	ands	r3, r2
   345b6:	469c      	mov	ip, r3
   345b8:	2300      	movs	r3, #0
   345ba:	2400      	movs	r4, #0
   345bc:	2200      	movs	r2, #0
   345be:	4698      	mov	r8, r3
   345c0:	2100      	movs	r1, #0
   345c2:	0312      	lsls	r2, r2, #12
   345c4:	0b13      	lsrs	r3, r2, #12
   345c6:	0d0a      	lsrs	r2, r1, #20
   345c8:	0512      	lsls	r2, r2, #20
   345ca:	431a      	orrs	r2, r3
   345cc:	0523      	lsls	r3, r4, #20
   345ce:	4c12      	ldr	r4, [pc, #72]	; (34618 <__aeabi_ddiv+0x1f4>)
   345d0:	4640      	mov	r0, r8
   345d2:	4022      	ands	r2, r4
   345d4:	4313      	orrs	r3, r2
   345d6:	4662      	mov	r2, ip
   345d8:	005b      	lsls	r3, r3, #1
   345da:	07d2      	lsls	r2, r2, #31
   345dc:	085b      	lsrs	r3, r3, #1
   345de:	4313      	orrs	r3, r2
   345e0:	0019      	movs	r1, r3
   345e2:	b007      	add	sp, #28
   345e4:	bc3c      	pop	{r2, r3, r4, r5}
   345e6:	4690      	mov	r8, r2
   345e8:	4699      	mov	r9, r3
   345ea:	46a2      	mov	sl, r4
   345ec:	46ab      	mov	fp, r5
   345ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   345f0:	2300      	movs	r3, #0
   345f2:	2280      	movs	r2, #128	; 0x80
   345f4:	469c      	mov	ip, r3
   345f6:	0312      	lsls	r2, r2, #12
   345f8:	4698      	mov	r8, r3
   345fa:	4c03      	ldr	r4, [pc, #12]	; (34608 <__aeabi_ddiv+0x1e4>)
   345fc:	e7e0      	b.n	345c0 <__aeabi_ddiv+0x19c>
   345fe:	2300      	movs	r3, #0
   34600:	4c01      	ldr	r4, [pc, #4]	; (34608 <__aeabi_ddiv+0x1e4>)
   34602:	2200      	movs	r2, #0
   34604:	4698      	mov	r8, r3
   34606:	e7db      	b.n	345c0 <__aeabi_ddiv+0x19c>
   34608:	000007ff 	.word	0x000007ff
   3460c:	fffffc01 	.word	0xfffffc01
   34610:	0003b054 	.word	0x0003b054
   34614:	fffffc0d 	.word	0xfffffc0d
   34618:	800fffff 	.word	0x800fffff
   3461c:	45d9      	cmp	r9, fp
   3461e:	d900      	bls.n	34622 <__aeabi_ddiv+0x1fe>
   34620:	e139      	b.n	34896 <__aeabi_ddiv+0x472>
   34622:	d100      	bne.n	34626 <__aeabi_ddiv+0x202>
   34624:	e134      	b.n	34890 <__aeabi_ddiv+0x46c>
   34626:	2300      	movs	r3, #0
   34628:	4646      	mov	r6, r8
   3462a:	464d      	mov	r5, r9
   3462c:	469a      	mov	sl, r3
   3462e:	3c01      	subs	r4, #1
   34630:	465b      	mov	r3, fp
   34632:	0e0a      	lsrs	r2, r1, #24
   34634:	021b      	lsls	r3, r3, #8
   34636:	431a      	orrs	r2, r3
   34638:	020b      	lsls	r3, r1, #8
   3463a:	0c17      	lsrs	r7, r2, #16
   3463c:	9303      	str	r3, [sp, #12]
   3463e:	0413      	lsls	r3, r2, #16
   34640:	0c1b      	lsrs	r3, r3, #16
   34642:	0039      	movs	r1, r7
   34644:	0028      	movs	r0, r5
   34646:	4690      	mov	r8, r2
   34648:	9301      	str	r3, [sp, #4]
   3464a:	f7ff f8ab 	bl	337a4 <__udivsi3>
   3464e:	0002      	movs	r2, r0
   34650:	9b01      	ldr	r3, [sp, #4]
   34652:	4683      	mov	fp, r0
   34654:	435a      	muls	r2, r3
   34656:	0028      	movs	r0, r5
   34658:	0039      	movs	r1, r7
   3465a:	4691      	mov	r9, r2
   3465c:	f7ff f928 	bl	338b0 <__aeabi_uidivmod>
   34660:	0c35      	lsrs	r5, r6, #16
   34662:	0409      	lsls	r1, r1, #16
   34664:	430d      	orrs	r5, r1
   34666:	45a9      	cmp	r9, r5
   34668:	d90d      	bls.n	34686 <__aeabi_ddiv+0x262>
   3466a:	465b      	mov	r3, fp
   3466c:	4445      	add	r5, r8
   3466e:	3b01      	subs	r3, #1
   34670:	45a8      	cmp	r8, r5
   34672:	d900      	bls.n	34676 <__aeabi_ddiv+0x252>
   34674:	e13a      	b.n	348ec <__aeabi_ddiv+0x4c8>
   34676:	45a9      	cmp	r9, r5
   34678:	d800      	bhi.n	3467c <__aeabi_ddiv+0x258>
   3467a:	e137      	b.n	348ec <__aeabi_ddiv+0x4c8>
   3467c:	2302      	movs	r3, #2
   3467e:	425b      	negs	r3, r3
   34680:	469c      	mov	ip, r3
   34682:	4445      	add	r5, r8
   34684:	44e3      	add	fp, ip
   34686:	464b      	mov	r3, r9
   34688:	1aeb      	subs	r3, r5, r3
   3468a:	0039      	movs	r1, r7
   3468c:	0018      	movs	r0, r3
   3468e:	9304      	str	r3, [sp, #16]
   34690:	f7ff f888 	bl	337a4 <__udivsi3>
   34694:	9b01      	ldr	r3, [sp, #4]
   34696:	0005      	movs	r5, r0
   34698:	4343      	muls	r3, r0
   3469a:	0039      	movs	r1, r7
   3469c:	9804      	ldr	r0, [sp, #16]
   3469e:	4699      	mov	r9, r3
   346a0:	f7ff f906 	bl	338b0 <__aeabi_uidivmod>
   346a4:	0433      	lsls	r3, r6, #16
   346a6:	0409      	lsls	r1, r1, #16
   346a8:	0c1b      	lsrs	r3, r3, #16
   346aa:	430b      	orrs	r3, r1
   346ac:	4599      	cmp	r9, r3
   346ae:	d909      	bls.n	346c4 <__aeabi_ddiv+0x2a0>
   346b0:	4443      	add	r3, r8
   346b2:	1e6a      	subs	r2, r5, #1
   346b4:	4598      	cmp	r8, r3
   346b6:	d900      	bls.n	346ba <__aeabi_ddiv+0x296>
   346b8:	e11a      	b.n	348f0 <__aeabi_ddiv+0x4cc>
   346ba:	4599      	cmp	r9, r3
   346bc:	d800      	bhi.n	346c0 <__aeabi_ddiv+0x29c>
   346be:	e117      	b.n	348f0 <__aeabi_ddiv+0x4cc>
   346c0:	3d02      	subs	r5, #2
   346c2:	4443      	add	r3, r8
   346c4:	464a      	mov	r2, r9
   346c6:	1a9b      	subs	r3, r3, r2
   346c8:	465a      	mov	r2, fp
   346ca:	0412      	lsls	r2, r2, #16
   346cc:	432a      	orrs	r2, r5
   346ce:	9903      	ldr	r1, [sp, #12]
   346d0:	4693      	mov	fp, r2
   346d2:	0c10      	lsrs	r0, r2, #16
   346d4:	0c0a      	lsrs	r2, r1, #16
   346d6:	4691      	mov	r9, r2
   346d8:	0409      	lsls	r1, r1, #16
   346da:	465a      	mov	r2, fp
   346dc:	0c09      	lsrs	r1, r1, #16
   346de:	464e      	mov	r6, r9
   346e0:	000d      	movs	r5, r1
   346e2:	0412      	lsls	r2, r2, #16
   346e4:	0c12      	lsrs	r2, r2, #16
   346e6:	4345      	muls	r5, r0
   346e8:	9105      	str	r1, [sp, #20]
   346ea:	4351      	muls	r1, r2
   346ec:	4372      	muls	r2, r6
   346ee:	4370      	muls	r0, r6
   346f0:	1952      	adds	r2, r2, r5
   346f2:	0c0e      	lsrs	r6, r1, #16
   346f4:	18b2      	adds	r2, r6, r2
   346f6:	4295      	cmp	r5, r2
   346f8:	d903      	bls.n	34702 <__aeabi_ddiv+0x2de>
   346fa:	2580      	movs	r5, #128	; 0x80
   346fc:	026d      	lsls	r5, r5, #9
   346fe:	46ac      	mov	ip, r5
   34700:	4460      	add	r0, ip
   34702:	0c15      	lsrs	r5, r2, #16
   34704:	0409      	lsls	r1, r1, #16
   34706:	0412      	lsls	r2, r2, #16
   34708:	0c09      	lsrs	r1, r1, #16
   3470a:	1828      	adds	r0, r5, r0
   3470c:	1852      	adds	r2, r2, r1
   3470e:	4283      	cmp	r3, r0
   34710:	d200      	bcs.n	34714 <__aeabi_ddiv+0x2f0>
   34712:	e0ce      	b.n	348b2 <__aeabi_ddiv+0x48e>
   34714:	d100      	bne.n	34718 <__aeabi_ddiv+0x2f4>
   34716:	e0c8      	b.n	348aa <__aeabi_ddiv+0x486>
   34718:	1a1d      	subs	r5, r3, r0
   3471a:	4653      	mov	r3, sl
   3471c:	1a9e      	subs	r6, r3, r2
   3471e:	45b2      	cmp	sl, r6
   34720:	4192      	sbcs	r2, r2
   34722:	4252      	negs	r2, r2
   34724:	1aab      	subs	r3, r5, r2
   34726:	469a      	mov	sl, r3
   34728:	4598      	cmp	r8, r3
   3472a:	d100      	bne.n	3472e <__aeabi_ddiv+0x30a>
   3472c:	e117      	b.n	3495e <__aeabi_ddiv+0x53a>
   3472e:	0039      	movs	r1, r7
   34730:	0018      	movs	r0, r3
   34732:	f7ff f837 	bl	337a4 <__udivsi3>
   34736:	9b01      	ldr	r3, [sp, #4]
   34738:	0005      	movs	r5, r0
   3473a:	4343      	muls	r3, r0
   3473c:	0039      	movs	r1, r7
   3473e:	4650      	mov	r0, sl
   34740:	9304      	str	r3, [sp, #16]
   34742:	f7ff f8b5 	bl	338b0 <__aeabi_uidivmod>
   34746:	9804      	ldr	r0, [sp, #16]
   34748:	040b      	lsls	r3, r1, #16
   3474a:	0c31      	lsrs	r1, r6, #16
   3474c:	4319      	orrs	r1, r3
   3474e:	4288      	cmp	r0, r1
   34750:	d909      	bls.n	34766 <__aeabi_ddiv+0x342>
   34752:	4441      	add	r1, r8
   34754:	1e6b      	subs	r3, r5, #1
   34756:	4588      	cmp	r8, r1
   34758:	d900      	bls.n	3475c <__aeabi_ddiv+0x338>
   3475a:	e107      	b.n	3496c <__aeabi_ddiv+0x548>
   3475c:	4288      	cmp	r0, r1
   3475e:	d800      	bhi.n	34762 <__aeabi_ddiv+0x33e>
   34760:	e104      	b.n	3496c <__aeabi_ddiv+0x548>
   34762:	3d02      	subs	r5, #2
   34764:	4441      	add	r1, r8
   34766:	9b04      	ldr	r3, [sp, #16]
   34768:	1acb      	subs	r3, r1, r3
   3476a:	0018      	movs	r0, r3
   3476c:	0039      	movs	r1, r7
   3476e:	9304      	str	r3, [sp, #16]
   34770:	f7ff f818 	bl	337a4 <__udivsi3>
   34774:	9b01      	ldr	r3, [sp, #4]
   34776:	4682      	mov	sl, r0
   34778:	4343      	muls	r3, r0
   3477a:	0039      	movs	r1, r7
   3477c:	9804      	ldr	r0, [sp, #16]
   3477e:	9301      	str	r3, [sp, #4]
   34780:	f7ff f896 	bl	338b0 <__aeabi_uidivmod>
   34784:	9801      	ldr	r0, [sp, #4]
   34786:	040b      	lsls	r3, r1, #16
   34788:	0431      	lsls	r1, r6, #16
   3478a:	0c09      	lsrs	r1, r1, #16
   3478c:	4319      	orrs	r1, r3
   3478e:	4288      	cmp	r0, r1
   34790:	d90d      	bls.n	347ae <__aeabi_ddiv+0x38a>
   34792:	4653      	mov	r3, sl
   34794:	4441      	add	r1, r8
   34796:	3b01      	subs	r3, #1
   34798:	4588      	cmp	r8, r1
   3479a:	d900      	bls.n	3479e <__aeabi_ddiv+0x37a>
   3479c:	e0e8      	b.n	34970 <__aeabi_ddiv+0x54c>
   3479e:	4288      	cmp	r0, r1
   347a0:	d800      	bhi.n	347a4 <__aeabi_ddiv+0x380>
   347a2:	e0e5      	b.n	34970 <__aeabi_ddiv+0x54c>
   347a4:	2302      	movs	r3, #2
   347a6:	425b      	negs	r3, r3
   347a8:	469c      	mov	ip, r3
   347aa:	4441      	add	r1, r8
   347ac:	44e2      	add	sl, ip
   347ae:	9b01      	ldr	r3, [sp, #4]
   347b0:	042d      	lsls	r5, r5, #16
   347b2:	1ace      	subs	r6, r1, r3
   347b4:	4651      	mov	r1, sl
   347b6:	4329      	orrs	r1, r5
   347b8:	9d05      	ldr	r5, [sp, #20]
   347ba:	464f      	mov	r7, r9
   347bc:	002a      	movs	r2, r5
   347be:	040b      	lsls	r3, r1, #16
   347c0:	0c08      	lsrs	r0, r1, #16
   347c2:	0c1b      	lsrs	r3, r3, #16
   347c4:	435a      	muls	r2, r3
   347c6:	4345      	muls	r5, r0
   347c8:	437b      	muls	r3, r7
   347ca:	4378      	muls	r0, r7
   347cc:	195b      	adds	r3, r3, r5
   347ce:	0c17      	lsrs	r7, r2, #16
   347d0:	18fb      	adds	r3, r7, r3
   347d2:	429d      	cmp	r5, r3
   347d4:	d903      	bls.n	347de <__aeabi_ddiv+0x3ba>
   347d6:	2580      	movs	r5, #128	; 0x80
   347d8:	026d      	lsls	r5, r5, #9
   347da:	46ac      	mov	ip, r5
   347dc:	4460      	add	r0, ip
   347de:	0c1d      	lsrs	r5, r3, #16
   347e0:	0412      	lsls	r2, r2, #16
   347e2:	041b      	lsls	r3, r3, #16
   347e4:	0c12      	lsrs	r2, r2, #16
   347e6:	1828      	adds	r0, r5, r0
   347e8:	189b      	adds	r3, r3, r2
   347ea:	4286      	cmp	r6, r0
   347ec:	d200      	bcs.n	347f0 <__aeabi_ddiv+0x3cc>
   347ee:	e093      	b.n	34918 <__aeabi_ddiv+0x4f4>
   347f0:	d100      	bne.n	347f4 <__aeabi_ddiv+0x3d0>
   347f2:	e08e      	b.n	34912 <__aeabi_ddiv+0x4ee>
   347f4:	2301      	movs	r3, #1
   347f6:	4319      	orrs	r1, r3
   347f8:	4ba0      	ldr	r3, [pc, #640]	; (34a7c <__aeabi_ddiv+0x658>)
   347fa:	18e3      	adds	r3, r4, r3
   347fc:	2b00      	cmp	r3, #0
   347fe:	dc00      	bgt.n	34802 <__aeabi_ddiv+0x3de>
   34800:	e099      	b.n	34936 <__aeabi_ddiv+0x512>
   34802:	074a      	lsls	r2, r1, #29
   34804:	d000      	beq.n	34808 <__aeabi_ddiv+0x3e4>
   34806:	e09e      	b.n	34946 <__aeabi_ddiv+0x522>
   34808:	465a      	mov	r2, fp
   3480a:	01d2      	lsls	r2, r2, #7
   3480c:	d506      	bpl.n	3481c <__aeabi_ddiv+0x3f8>
   3480e:	465a      	mov	r2, fp
   34810:	4b9b      	ldr	r3, [pc, #620]	; (34a80 <__aeabi_ddiv+0x65c>)
   34812:	401a      	ands	r2, r3
   34814:	2380      	movs	r3, #128	; 0x80
   34816:	4693      	mov	fp, r2
   34818:	00db      	lsls	r3, r3, #3
   3481a:	18e3      	adds	r3, r4, r3
   3481c:	4a99      	ldr	r2, [pc, #612]	; (34a84 <__aeabi_ddiv+0x660>)
   3481e:	4293      	cmp	r3, r2
   34820:	dd68      	ble.n	348f4 <__aeabi_ddiv+0x4d0>
   34822:	2301      	movs	r3, #1
   34824:	9a02      	ldr	r2, [sp, #8]
   34826:	4c98      	ldr	r4, [pc, #608]	; (34a88 <__aeabi_ddiv+0x664>)
   34828:	401a      	ands	r2, r3
   3482a:	2300      	movs	r3, #0
   3482c:	4694      	mov	ip, r2
   3482e:	4698      	mov	r8, r3
   34830:	2200      	movs	r2, #0
   34832:	e6c5      	b.n	345c0 <__aeabi_ddiv+0x19c>
   34834:	2280      	movs	r2, #128	; 0x80
   34836:	464b      	mov	r3, r9
   34838:	0312      	lsls	r2, r2, #12
   3483a:	4213      	tst	r3, r2
   3483c:	d00a      	beq.n	34854 <__aeabi_ddiv+0x430>
   3483e:	465b      	mov	r3, fp
   34840:	4213      	tst	r3, r2
   34842:	d106      	bne.n	34852 <__aeabi_ddiv+0x42e>
   34844:	431a      	orrs	r2, r3
   34846:	0312      	lsls	r2, r2, #12
   34848:	0b12      	lsrs	r2, r2, #12
   3484a:	46ac      	mov	ip, r5
   3484c:	4688      	mov	r8, r1
   3484e:	4c8e      	ldr	r4, [pc, #568]	; (34a88 <__aeabi_ddiv+0x664>)
   34850:	e6b6      	b.n	345c0 <__aeabi_ddiv+0x19c>
   34852:	464b      	mov	r3, r9
   34854:	431a      	orrs	r2, r3
   34856:	0312      	lsls	r2, r2, #12
   34858:	0b12      	lsrs	r2, r2, #12
   3485a:	46bc      	mov	ip, r7
   3485c:	4c8a      	ldr	r4, [pc, #552]	; (34a88 <__aeabi_ddiv+0x664>)
   3485e:	e6af      	b.n	345c0 <__aeabi_ddiv+0x19c>
   34860:	0003      	movs	r3, r0
   34862:	465a      	mov	r2, fp
   34864:	3b28      	subs	r3, #40	; 0x28
   34866:	409a      	lsls	r2, r3
   34868:	2300      	movs	r3, #0
   3486a:	4691      	mov	r9, r2
   3486c:	4698      	mov	r8, r3
   3486e:	e657      	b.n	34520 <__aeabi_ddiv+0xfc>
   34870:	4658      	mov	r0, fp
   34872:	f000 ff0d 	bl	35690 <__clzsi2>
   34876:	3020      	adds	r0, #32
   34878:	e640      	b.n	344fc <__aeabi_ddiv+0xd8>
   3487a:	0003      	movs	r3, r0
   3487c:	4652      	mov	r2, sl
   3487e:	3b28      	subs	r3, #40	; 0x28
   34880:	409a      	lsls	r2, r3
   34882:	2100      	movs	r1, #0
   34884:	4693      	mov	fp, r2
   34886:	e677      	b.n	34578 <__aeabi_ddiv+0x154>
   34888:	f000 ff02 	bl	35690 <__clzsi2>
   3488c:	3020      	adds	r0, #32
   3488e:	e65f      	b.n	34550 <__aeabi_ddiv+0x12c>
   34890:	4588      	cmp	r8, r1
   34892:	d200      	bcs.n	34896 <__aeabi_ddiv+0x472>
   34894:	e6c7      	b.n	34626 <__aeabi_ddiv+0x202>
   34896:	464b      	mov	r3, r9
   34898:	07de      	lsls	r6, r3, #31
   3489a:	085d      	lsrs	r5, r3, #1
   3489c:	4643      	mov	r3, r8
   3489e:	085b      	lsrs	r3, r3, #1
   348a0:	431e      	orrs	r6, r3
   348a2:	4643      	mov	r3, r8
   348a4:	07db      	lsls	r3, r3, #31
   348a6:	469a      	mov	sl, r3
   348a8:	e6c2      	b.n	34630 <__aeabi_ddiv+0x20c>
   348aa:	2500      	movs	r5, #0
   348ac:	4592      	cmp	sl, r2
   348ae:	d300      	bcc.n	348b2 <__aeabi_ddiv+0x48e>
   348b0:	e733      	b.n	3471a <__aeabi_ddiv+0x2f6>
   348b2:	9e03      	ldr	r6, [sp, #12]
   348b4:	4659      	mov	r1, fp
   348b6:	46b4      	mov	ip, r6
   348b8:	44e2      	add	sl, ip
   348ba:	45b2      	cmp	sl, r6
   348bc:	41ad      	sbcs	r5, r5
   348be:	426d      	negs	r5, r5
   348c0:	4445      	add	r5, r8
   348c2:	18eb      	adds	r3, r5, r3
   348c4:	3901      	subs	r1, #1
   348c6:	4598      	cmp	r8, r3
   348c8:	d207      	bcs.n	348da <__aeabi_ddiv+0x4b6>
   348ca:	4298      	cmp	r0, r3
   348cc:	d900      	bls.n	348d0 <__aeabi_ddiv+0x4ac>
   348ce:	e07f      	b.n	349d0 <__aeabi_ddiv+0x5ac>
   348d0:	d100      	bne.n	348d4 <__aeabi_ddiv+0x4b0>
   348d2:	e0bc      	b.n	34a4e <__aeabi_ddiv+0x62a>
   348d4:	1a1d      	subs	r5, r3, r0
   348d6:	468b      	mov	fp, r1
   348d8:	e71f      	b.n	3471a <__aeabi_ddiv+0x2f6>
   348da:	4598      	cmp	r8, r3
   348dc:	d1fa      	bne.n	348d4 <__aeabi_ddiv+0x4b0>
   348de:	9d03      	ldr	r5, [sp, #12]
   348e0:	4555      	cmp	r5, sl
   348e2:	d9f2      	bls.n	348ca <__aeabi_ddiv+0x4a6>
   348e4:	4643      	mov	r3, r8
   348e6:	468b      	mov	fp, r1
   348e8:	1a1d      	subs	r5, r3, r0
   348ea:	e716      	b.n	3471a <__aeabi_ddiv+0x2f6>
   348ec:	469b      	mov	fp, r3
   348ee:	e6ca      	b.n	34686 <__aeabi_ddiv+0x262>
   348f0:	0015      	movs	r5, r2
   348f2:	e6e7      	b.n	346c4 <__aeabi_ddiv+0x2a0>
   348f4:	465a      	mov	r2, fp
   348f6:	08c9      	lsrs	r1, r1, #3
   348f8:	0752      	lsls	r2, r2, #29
   348fa:	430a      	orrs	r2, r1
   348fc:	055b      	lsls	r3, r3, #21
   348fe:	4690      	mov	r8, r2
   34900:	0d5c      	lsrs	r4, r3, #21
   34902:	465a      	mov	r2, fp
   34904:	2301      	movs	r3, #1
   34906:	9902      	ldr	r1, [sp, #8]
   34908:	0252      	lsls	r2, r2, #9
   3490a:	4019      	ands	r1, r3
   3490c:	0b12      	lsrs	r2, r2, #12
   3490e:	468c      	mov	ip, r1
   34910:	e656      	b.n	345c0 <__aeabi_ddiv+0x19c>
   34912:	2b00      	cmp	r3, #0
   34914:	d100      	bne.n	34918 <__aeabi_ddiv+0x4f4>
   34916:	e76f      	b.n	347f8 <__aeabi_ddiv+0x3d4>
   34918:	4446      	add	r6, r8
   3491a:	1e4a      	subs	r2, r1, #1
   3491c:	45b0      	cmp	r8, r6
   3491e:	d929      	bls.n	34974 <__aeabi_ddiv+0x550>
   34920:	0011      	movs	r1, r2
   34922:	4286      	cmp	r6, r0
   34924:	d000      	beq.n	34928 <__aeabi_ddiv+0x504>
   34926:	e765      	b.n	347f4 <__aeabi_ddiv+0x3d0>
   34928:	9a03      	ldr	r2, [sp, #12]
   3492a:	4293      	cmp	r3, r2
   3492c:	d000      	beq.n	34930 <__aeabi_ddiv+0x50c>
   3492e:	e761      	b.n	347f4 <__aeabi_ddiv+0x3d0>
   34930:	e762      	b.n	347f8 <__aeabi_ddiv+0x3d4>
   34932:	2101      	movs	r1, #1
   34934:	4249      	negs	r1, r1
   34936:	2001      	movs	r0, #1
   34938:	1ac2      	subs	r2, r0, r3
   3493a:	2a38      	cmp	r2, #56	; 0x38
   3493c:	dd21      	ble.n	34982 <__aeabi_ddiv+0x55e>
   3493e:	9b02      	ldr	r3, [sp, #8]
   34940:	4003      	ands	r3, r0
   34942:	469c      	mov	ip, r3
   34944:	e638      	b.n	345b8 <__aeabi_ddiv+0x194>
   34946:	220f      	movs	r2, #15
   34948:	400a      	ands	r2, r1
   3494a:	2a04      	cmp	r2, #4
   3494c:	d100      	bne.n	34950 <__aeabi_ddiv+0x52c>
   3494e:	e75b      	b.n	34808 <__aeabi_ddiv+0x3e4>
   34950:	000a      	movs	r2, r1
   34952:	1d11      	adds	r1, r2, #4
   34954:	4291      	cmp	r1, r2
   34956:	4192      	sbcs	r2, r2
   34958:	4252      	negs	r2, r2
   3495a:	4493      	add	fp, r2
   3495c:	e754      	b.n	34808 <__aeabi_ddiv+0x3e4>
   3495e:	4b47      	ldr	r3, [pc, #284]	; (34a7c <__aeabi_ddiv+0x658>)
   34960:	18e3      	adds	r3, r4, r3
   34962:	2b00      	cmp	r3, #0
   34964:	dde5      	ble.n	34932 <__aeabi_ddiv+0x50e>
   34966:	2201      	movs	r2, #1
   34968:	4252      	negs	r2, r2
   3496a:	e7f2      	b.n	34952 <__aeabi_ddiv+0x52e>
   3496c:	001d      	movs	r5, r3
   3496e:	e6fa      	b.n	34766 <__aeabi_ddiv+0x342>
   34970:	469a      	mov	sl, r3
   34972:	e71c      	b.n	347ae <__aeabi_ddiv+0x38a>
   34974:	42b0      	cmp	r0, r6
   34976:	d839      	bhi.n	349ec <__aeabi_ddiv+0x5c8>
   34978:	d06e      	beq.n	34a58 <__aeabi_ddiv+0x634>
   3497a:	0011      	movs	r1, r2
   3497c:	e73a      	b.n	347f4 <__aeabi_ddiv+0x3d0>
   3497e:	9302      	str	r3, [sp, #8]
   34980:	e73a      	b.n	347f8 <__aeabi_ddiv+0x3d4>
   34982:	2a1f      	cmp	r2, #31
   34984:	dc3c      	bgt.n	34a00 <__aeabi_ddiv+0x5dc>
   34986:	2320      	movs	r3, #32
   34988:	1a9b      	subs	r3, r3, r2
   3498a:	000c      	movs	r4, r1
   3498c:	4658      	mov	r0, fp
   3498e:	4099      	lsls	r1, r3
   34990:	4098      	lsls	r0, r3
   34992:	1e4b      	subs	r3, r1, #1
   34994:	4199      	sbcs	r1, r3
   34996:	465b      	mov	r3, fp
   34998:	40d4      	lsrs	r4, r2
   3499a:	40d3      	lsrs	r3, r2
   3499c:	4320      	orrs	r0, r4
   3499e:	4308      	orrs	r0, r1
   349a0:	001a      	movs	r2, r3
   349a2:	0743      	lsls	r3, r0, #29
   349a4:	d009      	beq.n	349ba <__aeabi_ddiv+0x596>
   349a6:	230f      	movs	r3, #15
   349a8:	4003      	ands	r3, r0
   349aa:	2b04      	cmp	r3, #4
   349ac:	d005      	beq.n	349ba <__aeabi_ddiv+0x596>
   349ae:	0001      	movs	r1, r0
   349b0:	1d08      	adds	r0, r1, #4
   349b2:	4288      	cmp	r0, r1
   349b4:	419b      	sbcs	r3, r3
   349b6:	425b      	negs	r3, r3
   349b8:	18d2      	adds	r2, r2, r3
   349ba:	0213      	lsls	r3, r2, #8
   349bc:	d53a      	bpl.n	34a34 <__aeabi_ddiv+0x610>
   349be:	2301      	movs	r3, #1
   349c0:	9a02      	ldr	r2, [sp, #8]
   349c2:	2401      	movs	r4, #1
   349c4:	401a      	ands	r2, r3
   349c6:	2300      	movs	r3, #0
   349c8:	4694      	mov	ip, r2
   349ca:	4698      	mov	r8, r3
   349cc:	2200      	movs	r2, #0
   349ce:	e5f7      	b.n	345c0 <__aeabi_ddiv+0x19c>
   349d0:	2102      	movs	r1, #2
   349d2:	4249      	negs	r1, r1
   349d4:	468c      	mov	ip, r1
   349d6:	9d03      	ldr	r5, [sp, #12]
   349d8:	44e3      	add	fp, ip
   349da:	46ac      	mov	ip, r5
   349dc:	44e2      	add	sl, ip
   349de:	45aa      	cmp	sl, r5
   349e0:	41ad      	sbcs	r5, r5
   349e2:	426d      	negs	r5, r5
   349e4:	4445      	add	r5, r8
   349e6:	18ed      	adds	r5, r5, r3
   349e8:	1a2d      	subs	r5, r5, r0
   349ea:	e696      	b.n	3471a <__aeabi_ddiv+0x2f6>
   349ec:	1e8a      	subs	r2, r1, #2
   349ee:	9903      	ldr	r1, [sp, #12]
   349f0:	004d      	lsls	r5, r1, #1
   349f2:	428d      	cmp	r5, r1
   349f4:	4189      	sbcs	r1, r1
   349f6:	4249      	negs	r1, r1
   349f8:	4441      	add	r1, r8
   349fa:	1876      	adds	r6, r6, r1
   349fc:	9503      	str	r5, [sp, #12]
   349fe:	e78f      	b.n	34920 <__aeabi_ddiv+0x4fc>
   34a00:	201f      	movs	r0, #31
   34a02:	4240      	negs	r0, r0
   34a04:	1ac3      	subs	r3, r0, r3
   34a06:	4658      	mov	r0, fp
   34a08:	40d8      	lsrs	r0, r3
   34a0a:	0003      	movs	r3, r0
   34a0c:	2a20      	cmp	r2, #32
   34a0e:	d028      	beq.n	34a62 <__aeabi_ddiv+0x63e>
   34a10:	2040      	movs	r0, #64	; 0x40
   34a12:	465d      	mov	r5, fp
   34a14:	1a82      	subs	r2, r0, r2
   34a16:	4095      	lsls	r5, r2
   34a18:	4329      	orrs	r1, r5
   34a1a:	1e4a      	subs	r2, r1, #1
   34a1c:	4191      	sbcs	r1, r2
   34a1e:	4319      	orrs	r1, r3
   34a20:	2307      	movs	r3, #7
   34a22:	2200      	movs	r2, #0
   34a24:	400b      	ands	r3, r1
   34a26:	d009      	beq.n	34a3c <__aeabi_ddiv+0x618>
   34a28:	230f      	movs	r3, #15
   34a2a:	2200      	movs	r2, #0
   34a2c:	400b      	ands	r3, r1
   34a2e:	0008      	movs	r0, r1
   34a30:	2b04      	cmp	r3, #4
   34a32:	d1bd      	bne.n	349b0 <__aeabi_ddiv+0x58c>
   34a34:	0001      	movs	r1, r0
   34a36:	0753      	lsls	r3, r2, #29
   34a38:	0252      	lsls	r2, r2, #9
   34a3a:	0b12      	lsrs	r2, r2, #12
   34a3c:	08c9      	lsrs	r1, r1, #3
   34a3e:	4319      	orrs	r1, r3
   34a40:	2301      	movs	r3, #1
   34a42:	4688      	mov	r8, r1
   34a44:	9902      	ldr	r1, [sp, #8]
   34a46:	2400      	movs	r4, #0
   34a48:	4019      	ands	r1, r3
   34a4a:	468c      	mov	ip, r1
   34a4c:	e5b8      	b.n	345c0 <__aeabi_ddiv+0x19c>
   34a4e:	4552      	cmp	r2, sl
   34a50:	d8be      	bhi.n	349d0 <__aeabi_ddiv+0x5ac>
   34a52:	468b      	mov	fp, r1
   34a54:	2500      	movs	r5, #0
   34a56:	e660      	b.n	3471a <__aeabi_ddiv+0x2f6>
   34a58:	9d03      	ldr	r5, [sp, #12]
   34a5a:	429d      	cmp	r5, r3
   34a5c:	d3c6      	bcc.n	349ec <__aeabi_ddiv+0x5c8>
   34a5e:	0011      	movs	r1, r2
   34a60:	e762      	b.n	34928 <__aeabi_ddiv+0x504>
   34a62:	2500      	movs	r5, #0
   34a64:	e7d8      	b.n	34a18 <__aeabi_ddiv+0x5f4>
   34a66:	2280      	movs	r2, #128	; 0x80
   34a68:	465b      	mov	r3, fp
   34a6a:	0312      	lsls	r2, r2, #12
   34a6c:	431a      	orrs	r2, r3
   34a6e:	9b01      	ldr	r3, [sp, #4]
   34a70:	0312      	lsls	r2, r2, #12
   34a72:	0b12      	lsrs	r2, r2, #12
   34a74:	469c      	mov	ip, r3
   34a76:	4688      	mov	r8, r1
   34a78:	4c03      	ldr	r4, [pc, #12]	; (34a88 <__aeabi_ddiv+0x664>)
   34a7a:	e5a1      	b.n	345c0 <__aeabi_ddiv+0x19c>
   34a7c:	000003ff 	.word	0x000003ff
   34a80:	feffffff 	.word	0xfeffffff
   34a84:	000007fe 	.word	0x000007fe
   34a88:	000007ff 	.word	0x000007ff

00034a8c <__aeabi_dmul>:
   34a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34a8e:	4657      	mov	r7, sl
   34a90:	4645      	mov	r5, r8
   34a92:	46de      	mov	lr, fp
   34a94:	464e      	mov	r6, r9
   34a96:	b5e0      	push	{r5, r6, r7, lr}
   34a98:	030c      	lsls	r4, r1, #12
   34a9a:	4698      	mov	r8, r3
   34a9c:	004e      	lsls	r6, r1, #1
   34a9e:	0b23      	lsrs	r3, r4, #12
   34aa0:	b087      	sub	sp, #28
   34aa2:	0007      	movs	r7, r0
   34aa4:	4692      	mov	sl, r2
   34aa6:	469b      	mov	fp, r3
   34aa8:	0d76      	lsrs	r6, r6, #21
   34aaa:	0fcd      	lsrs	r5, r1, #31
   34aac:	2e00      	cmp	r6, #0
   34aae:	d06b      	beq.n	34b88 <__aeabi_dmul+0xfc>
   34ab0:	4b6d      	ldr	r3, [pc, #436]	; (34c68 <__aeabi_dmul+0x1dc>)
   34ab2:	429e      	cmp	r6, r3
   34ab4:	d035      	beq.n	34b22 <__aeabi_dmul+0x96>
   34ab6:	2480      	movs	r4, #128	; 0x80
   34ab8:	465b      	mov	r3, fp
   34aba:	0f42      	lsrs	r2, r0, #29
   34abc:	0424      	lsls	r4, r4, #16
   34abe:	00db      	lsls	r3, r3, #3
   34ac0:	4314      	orrs	r4, r2
   34ac2:	431c      	orrs	r4, r3
   34ac4:	00c3      	lsls	r3, r0, #3
   34ac6:	4699      	mov	r9, r3
   34ac8:	4b68      	ldr	r3, [pc, #416]	; (34c6c <__aeabi_dmul+0x1e0>)
   34aca:	46a3      	mov	fp, r4
   34acc:	469c      	mov	ip, r3
   34ace:	2300      	movs	r3, #0
   34ad0:	2700      	movs	r7, #0
   34ad2:	4466      	add	r6, ip
   34ad4:	9302      	str	r3, [sp, #8]
   34ad6:	4643      	mov	r3, r8
   34ad8:	031c      	lsls	r4, r3, #12
   34ada:	005a      	lsls	r2, r3, #1
   34adc:	0fdb      	lsrs	r3, r3, #31
   34ade:	4650      	mov	r0, sl
   34ae0:	0b24      	lsrs	r4, r4, #12
   34ae2:	0d52      	lsrs	r2, r2, #21
   34ae4:	4698      	mov	r8, r3
   34ae6:	d100      	bne.n	34aea <__aeabi_dmul+0x5e>
   34ae8:	e076      	b.n	34bd8 <__aeabi_dmul+0x14c>
   34aea:	4b5f      	ldr	r3, [pc, #380]	; (34c68 <__aeabi_dmul+0x1dc>)
   34aec:	429a      	cmp	r2, r3
   34aee:	d06d      	beq.n	34bcc <__aeabi_dmul+0x140>
   34af0:	2380      	movs	r3, #128	; 0x80
   34af2:	0f41      	lsrs	r1, r0, #29
   34af4:	041b      	lsls	r3, r3, #16
   34af6:	430b      	orrs	r3, r1
   34af8:	495c      	ldr	r1, [pc, #368]	; (34c6c <__aeabi_dmul+0x1e0>)
   34afa:	00e4      	lsls	r4, r4, #3
   34afc:	468c      	mov	ip, r1
   34afe:	431c      	orrs	r4, r3
   34b00:	00c3      	lsls	r3, r0, #3
   34b02:	2000      	movs	r0, #0
   34b04:	4462      	add	r2, ip
   34b06:	4641      	mov	r1, r8
   34b08:	18b6      	adds	r6, r6, r2
   34b0a:	4069      	eors	r1, r5
   34b0c:	1c72      	adds	r2, r6, #1
   34b0e:	9101      	str	r1, [sp, #4]
   34b10:	4694      	mov	ip, r2
   34b12:	4307      	orrs	r7, r0
   34b14:	2f0f      	cmp	r7, #15
   34b16:	d900      	bls.n	34b1a <__aeabi_dmul+0x8e>
   34b18:	e0b0      	b.n	34c7c <__aeabi_dmul+0x1f0>
   34b1a:	4a55      	ldr	r2, [pc, #340]	; (34c70 <__aeabi_dmul+0x1e4>)
   34b1c:	00bf      	lsls	r7, r7, #2
   34b1e:	59d2      	ldr	r2, [r2, r7]
   34b20:	4697      	mov	pc, r2
   34b22:	465b      	mov	r3, fp
   34b24:	4303      	orrs	r3, r0
   34b26:	4699      	mov	r9, r3
   34b28:	d000      	beq.n	34b2c <__aeabi_dmul+0xa0>
   34b2a:	e087      	b.n	34c3c <__aeabi_dmul+0x1b0>
   34b2c:	2300      	movs	r3, #0
   34b2e:	469b      	mov	fp, r3
   34b30:	3302      	adds	r3, #2
   34b32:	2708      	movs	r7, #8
   34b34:	9302      	str	r3, [sp, #8]
   34b36:	e7ce      	b.n	34ad6 <__aeabi_dmul+0x4a>
   34b38:	4642      	mov	r2, r8
   34b3a:	9201      	str	r2, [sp, #4]
   34b3c:	2802      	cmp	r0, #2
   34b3e:	d067      	beq.n	34c10 <__aeabi_dmul+0x184>
   34b40:	2803      	cmp	r0, #3
   34b42:	d100      	bne.n	34b46 <__aeabi_dmul+0xba>
   34b44:	e20e      	b.n	34f64 <__aeabi_dmul+0x4d8>
   34b46:	2801      	cmp	r0, #1
   34b48:	d000      	beq.n	34b4c <__aeabi_dmul+0xc0>
   34b4a:	e162      	b.n	34e12 <__aeabi_dmul+0x386>
   34b4c:	2300      	movs	r3, #0
   34b4e:	2400      	movs	r4, #0
   34b50:	2200      	movs	r2, #0
   34b52:	4699      	mov	r9, r3
   34b54:	9901      	ldr	r1, [sp, #4]
   34b56:	4001      	ands	r1, r0
   34b58:	b2cd      	uxtb	r5, r1
   34b5a:	2100      	movs	r1, #0
   34b5c:	0312      	lsls	r2, r2, #12
   34b5e:	0d0b      	lsrs	r3, r1, #20
   34b60:	0b12      	lsrs	r2, r2, #12
   34b62:	051b      	lsls	r3, r3, #20
   34b64:	4313      	orrs	r3, r2
   34b66:	4a43      	ldr	r2, [pc, #268]	; (34c74 <__aeabi_dmul+0x1e8>)
   34b68:	0524      	lsls	r4, r4, #20
   34b6a:	4013      	ands	r3, r2
   34b6c:	431c      	orrs	r4, r3
   34b6e:	0064      	lsls	r4, r4, #1
   34b70:	07ed      	lsls	r5, r5, #31
   34b72:	0864      	lsrs	r4, r4, #1
   34b74:	432c      	orrs	r4, r5
   34b76:	4648      	mov	r0, r9
   34b78:	0021      	movs	r1, r4
   34b7a:	b007      	add	sp, #28
   34b7c:	bc3c      	pop	{r2, r3, r4, r5}
   34b7e:	4690      	mov	r8, r2
   34b80:	4699      	mov	r9, r3
   34b82:	46a2      	mov	sl, r4
   34b84:	46ab      	mov	fp, r5
   34b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b88:	4303      	orrs	r3, r0
   34b8a:	4699      	mov	r9, r3
   34b8c:	d04f      	beq.n	34c2e <__aeabi_dmul+0x1a2>
   34b8e:	465b      	mov	r3, fp
   34b90:	2b00      	cmp	r3, #0
   34b92:	d100      	bne.n	34b96 <__aeabi_dmul+0x10a>
   34b94:	e189      	b.n	34eaa <__aeabi_dmul+0x41e>
   34b96:	4658      	mov	r0, fp
   34b98:	f000 fd7a 	bl	35690 <__clzsi2>
   34b9c:	0003      	movs	r3, r0
   34b9e:	3b0b      	subs	r3, #11
   34ba0:	2b1c      	cmp	r3, #28
   34ba2:	dd00      	ble.n	34ba6 <__aeabi_dmul+0x11a>
   34ba4:	e17a      	b.n	34e9c <__aeabi_dmul+0x410>
   34ba6:	221d      	movs	r2, #29
   34ba8:	1ad3      	subs	r3, r2, r3
   34baa:	003a      	movs	r2, r7
   34bac:	0001      	movs	r1, r0
   34bae:	465c      	mov	r4, fp
   34bb0:	40da      	lsrs	r2, r3
   34bb2:	3908      	subs	r1, #8
   34bb4:	408c      	lsls	r4, r1
   34bb6:	0013      	movs	r3, r2
   34bb8:	408f      	lsls	r7, r1
   34bba:	4323      	orrs	r3, r4
   34bbc:	469b      	mov	fp, r3
   34bbe:	46b9      	mov	r9, r7
   34bc0:	2300      	movs	r3, #0
   34bc2:	4e2d      	ldr	r6, [pc, #180]	; (34c78 <__aeabi_dmul+0x1ec>)
   34bc4:	2700      	movs	r7, #0
   34bc6:	1a36      	subs	r6, r6, r0
   34bc8:	9302      	str	r3, [sp, #8]
   34bca:	e784      	b.n	34ad6 <__aeabi_dmul+0x4a>
   34bcc:	4653      	mov	r3, sl
   34bce:	4323      	orrs	r3, r4
   34bd0:	d12a      	bne.n	34c28 <__aeabi_dmul+0x19c>
   34bd2:	2400      	movs	r4, #0
   34bd4:	2002      	movs	r0, #2
   34bd6:	e796      	b.n	34b06 <__aeabi_dmul+0x7a>
   34bd8:	4653      	mov	r3, sl
   34bda:	4323      	orrs	r3, r4
   34bdc:	d020      	beq.n	34c20 <__aeabi_dmul+0x194>
   34bde:	2c00      	cmp	r4, #0
   34be0:	d100      	bne.n	34be4 <__aeabi_dmul+0x158>
   34be2:	e157      	b.n	34e94 <__aeabi_dmul+0x408>
   34be4:	0020      	movs	r0, r4
   34be6:	f000 fd53 	bl	35690 <__clzsi2>
   34bea:	0003      	movs	r3, r0
   34bec:	3b0b      	subs	r3, #11
   34bee:	2b1c      	cmp	r3, #28
   34bf0:	dd00      	ble.n	34bf4 <__aeabi_dmul+0x168>
   34bf2:	e149      	b.n	34e88 <__aeabi_dmul+0x3fc>
   34bf4:	211d      	movs	r1, #29
   34bf6:	1acb      	subs	r3, r1, r3
   34bf8:	4651      	mov	r1, sl
   34bfa:	0002      	movs	r2, r0
   34bfc:	40d9      	lsrs	r1, r3
   34bfe:	4653      	mov	r3, sl
   34c00:	3a08      	subs	r2, #8
   34c02:	4094      	lsls	r4, r2
   34c04:	4093      	lsls	r3, r2
   34c06:	430c      	orrs	r4, r1
   34c08:	4a1b      	ldr	r2, [pc, #108]	; (34c78 <__aeabi_dmul+0x1ec>)
   34c0a:	1a12      	subs	r2, r2, r0
   34c0c:	2000      	movs	r0, #0
   34c0e:	e77a      	b.n	34b06 <__aeabi_dmul+0x7a>
   34c10:	2501      	movs	r5, #1
   34c12:	9b01      	ldr	r3, [sp, #4]
   34c14:	4c14      	ldr	r4, [pc, #80]	; (34c68 <__aeabi_dmul+0x1dc>)
   34c16:	401d      	ands	r5, r3
   34c18:	2300      	movs	r3, #0
   34c1a:	2200      	movs	r2, #0
   34c1c:	4699      	mov	r9, r3
   34c1e:	e79c      	b.n	34b5a <__aeabi_dmul+0xce>
   34c20:	2400      	movs	r4, #0
   34c22:	2200      	movs	r2, #0
   34c24:	2001      	movs	r0, #1
   34c26:	e76e      	b.n	34b06 <__aeabi_dmul+0x7a>
   34c28:	4653      	mov	r3, sl
   34c2a:	2003      	movs	r0, #3
   34c2c:	e76b      	b.n	34b06 <__aeabi_dmul+0x7a>
   34c2e:	2300      	movs	r3, #0
   34c30:	469b      	mov	fp, r3
   34c32:	3301      	adds	r3, #1
   34c34:	2704      	movs	r7, #4
   34c36:	2600      	movs	r6, #0
   34c38:	9302      	str	r3, [sp, #8]
   34c3a:	e74c      	b.n	34ad6 <__aeabi_dmul+0x4a>
   34c3c:	2303      	movs	r3, #3
   34c3e:	4681      	mov	r9, r0
   34c40:	270c      	movs	r7, #12
   34c42:	9302      	str	r3, [sp, #8]
   34c44:	e747      	b.n	34ad6 <__aeabi_dmul+0x4a>
   34c46:	2280      	movs	r2, #128	; 0x80
   34c48:	2300      	movs	r3, #0
   34c4a:	2500      	movs	r5, #0
   34c4c:	0312      	lsls	r2, r2, #12
   34c4e:	4699      	mov	r9, r3
   34c50:	4c05      	ldr	r4, [pc, #20]	; (34c68 <__aeabi_dmul+0x1dc>)
   34c52:	e782      	b.n	34b5a <__aeabi_dmul+0xce>
   34c54:	465c      	mov	r4, fp
   34c56:	464b      	mov	r3, r9
   34c58:	9802      	ldr	r0, [sp, #8]
   34c5a:	e76f      	b.n	34b3c <__aeabi_dmul+0xb0>
   34c5c:	465c      	mov	r4, fp
   34c5e:	464b      	mov	r3, r9
   34c60:	9501      	str	r5, [sp, #4]
   34c62:	9802      	ldr	r0, [sp, #8]
   34c64:	e76a      	b.n	34b3c <__aeabi_dmul+0xb0>
   34c66:	46c0      	nop			; (mov r8, r8)
   34c68:	000007ff 	.word	0x000007ff
   34c6c:	fffffc01 	.word	0xfffffc01
   34c70:	0003b094 	.word	0x0003b094
   34c74:	800fffff 	.word	0x800fffff
   34c78:	fffffc0d 	.word	0xfffffc0d
   34c7c:	464a      	mov	r2, r9
   34c7e:	4649      	mov	r1, r9
   34c80:	0c17      	lsrs	r7, r2, #16
   34c82:	0c1a      	lsrs	r2, r3, #16
   34c84:	041b      	lsls	r3, r3, #16
   34c86:	0c1b      	lsrs	r3, r3, #16
   34c88:	0408      	lsls	r0, r1, #16
   34c8a:	0019      	movs	r1, r3
   34c8c:	0c00      	lsrs	r0, r0, #16
   34c8e:	4341      	muls	r1, r0
   34c90:	0015      	movs	r5, r2
   34c92:	4688      	mov	r8, r1
   34c94:	0019      	movs	r1, r3
   34c96:	437d      	muls	r5, r7
   34c98:	4379      	muls	r1, r7
   34c9a:	9503      	str	r5, [sp, #12]
   34c9c:	4689      	mov	r9, r1
   34c9e:	0029      	movs	r1, r5
   34ca0:	0015      	movs	r5, r2
   34ca2:	4345      	muls	r5, r0
   34ca4:	444d      	add	r5, r9
   34ca6:	9502      	str	r5, [sp, #8]
   34ca8:	4645      	mov	r5, r8
   34caa:	0c2d      	lsrs	r5, r5, #16
   34cac:	46aa      	mov	sl, r5
   34cae:	9d02      	ldr	r5, [sp, #8]
   34cb0:	4455      	add	r5, sl
   34cb2:	45a9      	cmp	r9, r5
   34cb4:	d906      	bls.n	34cc4 <__aeabi_dmul+0x238>
   34cb6:	468a      	mov	sl, r1
   34cb8:	2180      	movs	r1, #128	; 0x80
   34cba:	0249      	lsls	r1, r1, #9
   34cbc:	4689      	mov	r9, r1
   34cbe:	44ca      	add	sl, r9
   34cc0:	4651      	mov	r1, sl
   34cc2:	9103      	str	r1, [sp, #12]
   34cc4:	0c29      	lsrs	r1, r5, #16
   34cc6:	9104      	str	r1, [sp, #16]
   34cc8:	4641      	mov	r1, r8
   34cca:	0409      	lsls	r1, r1, #16
   34ccc:	042d      	lsls	r5, r5, #16
   34cce:	0c09      	lsrs	r1, r1, #16
   34cd0:	4688      	mov	r8, r1
   34cd2:	0029      	movs	r1, r5
   34cd4:	0c25      	lsrs	r5, r4, #16
   34cd6:	0424      	lsls	r4, r4, #16
   34cd8:	4441      	add	r1, r8
   34cda:	0c24      	lsrs	r4, r4, #16
   34cdc:	9105      	str	r1, [sp, #20]
   34cde:	0021      	movs	r1, r4
   34ce0:	4341      	muls	r1, r0
   34ce2:	4688      	mov	r8, r1
   34ce4:	0021      	movs	r1, r4
   34ce6:	4379      	muls	r1, r7
   34ce8:	468a      	mov	sl, r1
   34cea:	4368      	muls	r0, r5
   34cec:	4641      	mov	r1, r8
   34cee:	4450      	add	r0, sl
   34cf0:	4681      	mov	r9, r0
   34cf2:	0c08      	lsrs	r0, r1, #16
   34cf4:	4448      	add	r0, r9
   34cf6:	436f      	muls	r7, r5
   34cf8:	4582      	cmp	sl, r0
   34cfa:	d903      	bls.n	34d04 <__aeabi_dmul+0x278>
   34cfc:	2180      	movs	r1, #128	; 0x80
   34cfe:	0249      	lsls	r1, r1, #9
   34d00:	4689      	mov	r9, r1
   34d02:	444f      	add	r7, r9
   34d04:	0c01      	lsrs	r1, r0, #16
   34d06:	4689      	mov	r9, r1
   34d08:	0039      	movs	r1, r7
   34d0a:	4449      	add	r1, r9
   34d0c:	9102      	str	r1, [sp, #8]
   34d0e:	4641      	mov	r1, r8
   34d10:	040f      	lsls	r7, r1, #16
   34d12:	9904      	ldr	r1, [sp, #16]
   34d14:	0c3f      	lsrs	r7, r7, #16
   34d16:	4688      	mov	r8, r1
   34d18:	0400      	lsls	r0, r0, #16
   34d1a:	19c0      	adds	r0, r0, r7
   34d1c:	4480      	add	r8, r0
   34d1e:	4641      	mov	r1, r8
   34d20:	9104      	str	r1, [sp, #16]
   34d22:	4659      	mov	r1, fp
   34d24:	0c0f      	lsrs	r7, r1, #16
   34d26:	0409      	lsls	r1, r1, #16
   34d28:	0c09      	lsrs	r1, r1, #16
   34d2a:	4688      	mov	r8, r1
   34d2c:	4359      	muls	r1, r3
   34d2e:	468a      	mov	sl, r1
   34d30:	0039      	movs	r1, r7
   34d32:	4351      	muls	r1, r2
   34d34:	4689      	mov	r9, r1
   34d36:	4641      	mov	r1, r8
   34d38:	434a      	muls	r2, r1
   34d3a:	4651      	mov	r1, sl
   34d3c:	0c09      	lsrs	r1, r1, #16
   34d3e:	468b      	mov	fp, r1
   34d40:	437b      	muls	r3, r7
   34d42:	18d2      	adds	r2, r2, r3
   34d44:	445a      	add	r2, fp
   34d46:	4293      	cmp	r3, r2
   34d48:	d903      	bls.n	34d52 <__aeabi_dmul+0x2c6>
   34d4a:	2380      	movs	r3, #128	; 0x80
   34d4c:	025b      	lsls	r3, r3, #9
   34d4e:	469b      	mov	fp, r3
   34d50:	44d9      	add	r9, fp
   34d52:	4651      	mov	r1, sl
   34d54:	0409      	lsls	r1, r1, #16
   34d56:	0c09      	lsrs	r1, r1, #16
   34d58:	468a      	mov	sl, r1
   34d5a:	4641      	mov	r1, r8
   34d5c:	4361      	muls	r1, r4
   34d5e:	437c      	muls	r4, r7
   34d60:	0c13      	lsrs	r3, r2, #16
   34d62:	0412      	lsls	r2, r2, #16
   34d64:	444b      	add	r3, r9
   34d66:	4452      	add	r2, sl
   34d68:	46a1      	mov	r9, r4
   34d6a:	468a      	mov	sl, r1
   34d6c:	003c      	movs	r4, r7
   34d6e:	4641      	mov	r1, r8
   34d70:	436c      	muls	r4, r5
   34d72:	434d      	muls	r5, r1
   34d74:	4651      	mov	r1, sl
   34d76:	444d      	add	r5, r9
   34d78:	0c0f      	lsrs	r7, r1, #16
   34d7a:	197d      	adds	r5, r7, r5
   34d7c:	45a9      	cmp	r9, r5
   34d7e:	d903      	bls.n	34d88 <__aeabi_dmul+0x2fc>
   34d80:	2180      	movs	r1, #128	; 0x80
   34d82:	0249      	lsls	r1, r1, #9
   34d84:	4688      	mov	r8, r1
   34d86:	4444      	add	r4, r8
   34d88:	9f04      	ldr	r7, [sp, #16]
   34d8a:	9903      	ldr	r1, [sp, #12]
   34d8c:	46b8      	mov	r8, r7
   34d8e:	4441      	add	r1, r8
   34d90:	468b      	mov	fp, r1
   34d92:	4583      	cmp	fp, r0
   34d94:	4180      	sbcs	r0, r0
   34d96:	4241      	negs	r1, r0
   34d98:	4688      	mov	r8, r1
   34d9a:	4651      	mov	r1, sl
   34d9c:	0408      	lsls	r0, r1, #16
   34d9e:	042f      	lsls	r7, r5, #16
   34da0:	0c00      	lsrs	r0, r0, #16
   34da2:	183f      	adds	r7, r7, r0
   34da4:	4658      	mov	r0, fp
   34da6:	9902      	ldr	r1, [sp, #8]
   34da8:	1810      	adds	r0, r2, r0
   34daa:	4689      	mov	r9, r1
   34dac:	4290      	cmp	r0, r2
   34dae:	4192      	sbcs	r2, r2
   34db0:	444f      	add	r7, r9
   34db2:	46ba      	mov	sl, r7
   34db4:	4252      	negs	r2, r2
   34db6:	4699      	mov	r9, r3
   34db8:	4693      	mov	fp, r2
   34dba:	44c2      	add	sl, r8
   34dbc:	44d1      	add	r9, sl
   34dbe:	44cb      	add	fp, r9
   34dc0:	428f      	cmp	r7, r1
   34dc2:	41bf      	sbcs	r7, r7
   34dc4:	45c2      	cmp	sl, r8
   34dc6:	4189      	sbcs	r1, r1
   34dc8:	4599      	cmp	r9, r3
   34dca:	419b      	sbcs	r3, r3
   34dcc:	4593      	cmp	fp, r2
   34dce:	4192      	sbcs	r2, r2
   34dd0:	427f      	negs	r7, r7
   34dd2:	4249      	negs	r1, r1
   34dd4:	0c2d      	lsrs	r5, r5, #16
   34dd6:	4252      	negs	r2, r2
   34dd8:	430f      	orrs	r7, r1
   34dda:	425b      	negs	r3, r3
   34ddc:	4313      	orrs	r3, r2
   34dde:	197f      	adds	r7, r7, r5
   34de0:	18ff      	adds	r7, r7, r3
   34de2:	465b      	mov	r3, fp
   34de4:	193c      	adds	r4, r7, r4
   34de6:	0ddb      	lsrs	r3, r3, #23
   34de8:	9a05      	ldr	r2, [sp, #20]
   34dea:	0264      	lsls	r4, r4, #9
   34dec:	431c      	orrs	r4, r3
   34dee:	0243      	lsls	r3, r0, #9
   34df0:	4313      	orrs	r3, r2
   34df2:	1e5d      	subs	r5, r3, #1
   34df4:	41ab      	sbcs	r3, r5
   34df6:	465a      	mov	r2, fp
   34df8:	0dc0      	lsrs	r0, r0, #23
   34dfa:	4303      	orrs	r3, r0
   34dfc:	0252      	lsls	r2, r2, #9
   34dfe:	4313      	orrs	r3, r2
   34e00:	01e2      	lsls	r2, r4, #7
   34e02:	d556      	bpl.n	34eb2 <__aeabi_dmul+0x426>
   34e04:	2001      	movs	r0, #1
   34e06:	085a      	lsrs	r2, r3, #1
   34e08:	4003      	ands	r3, r0
   34e0a:	4313      	orrs	r3, r2
   34e0c:	07e2      	lsls	r2, r4, #31
   34e0e:	4313      	orrs	r3, r2
   34e10:	0864      	lsrs	r4, r4, #1
   34e12:	485a      	ldr	r0, [pc, #360]	; (34f7c <__aeabi_dmul+0x4f0>)
   34e14:	4460      	add	r0, ip
   34e16:	2800      	cmp	r0, #0
   34e18:	dd4d      	ble.n	34eb6 <__aeabi_dmul+0x42a>
   34e1a:	075a      	lsls	r2, r3, #29
   34e1c:	d009      	beq.n	34e32 <__aeabi_dmul+0x3a6>
   34e1e:	220f      	movs	r2, #15
   34e20:	401a      	ands	r2, r3
   34e22:	2a04      	cmp	r2, #4
   34e24:	d005      	beq.n	34e32 <__aeabi_dmul+0x3a6>
   34e26:	1d1a      	adds	r2, r3, #4
   34e28:	429a      	cmp	r2, r3
   34e2a:	419b      	sbcs	r3, r3
   34e2c:	425b      	negs	r3, r3
   34e2e:	18e4      	adds	r4, r4, r3
   34e30:	0013      	movs	r3, r2
   34e32:	01e2      	lsls	r2, r4, #7
   34e34:	d504      	bpl.n	34e40 <__aeabi_dmul+0x3b4>
   34e36:	2080      	movs	r0, #128	; 0x80
   34e38:	4a51      	ldr	r2, [pc, #324]	; (34f80 <__aeabi_dmul+0x4f4>)
   34e3a:	00c0      	lsls	r0, r0, #3
   34e3c:	4014      	ands	r4, r2
   34e3e:	4460      	add	r0, ip
   34e40:	4a50      	ldr	r2, [pc, #320]	; (34f84 <__aeabi_dmul+0x4f8>)
   34e42:	4290      	cmp	r0, r2
   34e44:	dd00      	ble.n	34e48 <__aeabi_dmul+0x3bc>
   34e46:	e6e3      	b.n	34c10 <__aeabi_dmul+0x184>
   34e48:	2501      	movs	r5, #1
   34e4a:	08db      	lsrs	r3, r3, #3
   34e4c:	0762      	lsls	r2, r4, #29
   34e4e:	431a      	orrs	r2, r3
   34e50:	0264      	lsls	r4, r4, #9
   34e52:	9b01      	ldr	r3, [sp, #4]
   34e54:	4691      	mov	r9, r2
   34e56:	0b22      	lsrs	r2, r4, #12
   34e58:	0544      	lsls	r4, r0, #21
   34e5a:	0d64      	lsrs	r4, r4, #21
   34e5c:	401d      	ands	r5, r3
   34e5e:	e67c      	b.n	34b5a <__aeabi_dmul+0xce>
   34e60:	2280      	movs	r2, #128	; 0x80
   34e62:	4659      	mov	r1, fp
   34e64:	0312      	lsls	r2, r2, #12
   34e66:	4211      	tst	r1, r2
   34e68:	d008      	beq.n	34e7c <__aeabi_dmul+0x3f0>
   34e6a:	4214      	tst	r4, r2
   34e6c:	d106      	bne.n	34e7c <__aeabi_dmul+0x3f0>
   34e6e:	4322      	orrs	r2, r4
   34e70:	0312      	lsls	r2, r2, #12
   34e72:	0b12      	lsrs	r2, r2, #12
   34e74:	4645      	mov	r5, r8
   34e76:	4699      	mov	r9, r3
   34e78:	4c43      	ldr	r4, [pc, #268]	; (34f88 <__aeabi_dmul+0x4fc>)
   34e7a:	e66e      	b.n	34b5a <__aeabi_dmul+0xce>
   34e7c:	465b      	mov	r3, fp
   34e7e:	431a      	orrs	r2, r3
   34e80:	0312      	lsls	r2, r2, #12
   34e82:	0b12      	lsrs	r2, r2, #12
   34e84:	4c40      	ldr	r4, [pc, #256]	; (34f88 <__aeabi_dmul+0x4fc>)
   34e86:	e668      	b.n	34b5a <__aeabi_dmul+0xce>
   34e88:	0003      	movs	r3, r0
   34e8a:	4654      	mov	r4, sl
   34e8c:	3b28      	subs	r3, #40	; 0x28
   34e8e:	409c      	lsls	r4, r3
   34e90:	2300      	movs	r3, #0
   34e92:	e6b9      	b.n	34c08 <__aeabi_dmul+0x17c>
   34e94:	f000 fbfc 	bl	35690 <__clzsi2>
   34e98:	3020      	adds	r0, #32
   34e9a:	e6a6      	b.n	34bea <__aeabi_dmul+0x15e>
   34e9c:	0003      	movs	r3, r0
   34e9e:	3b28      	subs	r3, #40	; 0x28
   34ea0:	409f      	lsls	r7, r3
   34ea2:	2300      	movs	r3, #0
   34ea4:	46bb      	mov	fp, r7
   34ea6:	4699      	mov	r9, r3
   34ea8:	e68a      	b.n	34bc0 <__aeabi_dmul+0x134>
   34eaa:	f000 fbf1 	bl	35690 <__clzsi2>
   34eae:	3020      	adds	r0, #32
   34eb0:	e674      	b.n	34b9c <__aeabi_dmul+0x110>
   34eb2:	46b4      	mov	ip, r6
   34eb4:	e7ad      	b.n	34e12 <__aeabi_dmul+0x386>
   34eb6:	2501      	movs	r5, #1
   34eb8:	1a2a      	subs	r2, r5, r0
   34eba:	2a38      	cmp	r2, #56	; 0x38
   34ebc:	dd06      	ble.n	34ecc <__aeabi_dmul+0x440>
   34ebe:	9b01      	ldr	r3, [sp, #4]
   34ec0:	2400      	movs	r4, #0
   34ec2:	401d      	ands	r5, r3
   34ec4:	2300      	movs	r3, #0
   34ec6:	2200      	movs	r2, #0
   34ec8:	4699      	mov	r9, r3
   34eca:	e646      	b.n	34b5a <__aeabi_dmul+0xce>
   34ecc:	2a1f      	cmp	r2, #31
   34ece:	dc21      	bgt.n	34f14 <__aeabi_dmul+0x488>
   34ed0:	2520      	movs	r5, #32
   34ed2:	0020      	movs	r0, r4
   34ed4:	1aad      	subs	r5, r5, r2
   34ed6:	001e      	movs	r6, r3
   34ed8:	40ab      	lsls	r3, r5
   34eda:	40a8      	lsls	r0, r5
   34edc:	40d6      	lsrs	r6, r2
   34ede:	1e5d      	subs	r5, r3, #1
   34ee0:	41ab      	sbcs	r3, r5
   34ee2:	4330      	orrs	r0, r6
   34ee4:	4318      	orrs	r0, r3
   34ee6:	40d4      	lsrs	r4, r2
   34ee8:	0743      	lsls	r3, r0, #29
   34eea:	d009      	beq.n	34f00 <__aeabi_dmul+0x474>
   34eec:	230f      	movs	r3, #15
   34eee:	4003      	ands	r3, r0
   34ef0:	2b04      	cmp	r3, #4
   34ef2:	d005      	beq.n	34f00 <__aeabi_dmul+0x474>
   34ef4:	0003      	movs	r3, r0
   34ef6:	1d18      	adds	r0, r3, #4
   34ef8:	4298      	cmp	r0, r3
   34efa:	419b      	sbcs	r3, r3
   34efc:	425b      	negs	r3, r3
   34efe:	18e4      	adds	r4, r4, r3
   34f00:	0223      	lsls	r3, r4, #8
   34f02:	d521      	bpl.n	34f48 <__aeabi_dmul+0x4bc>
   34f04:	2501      	movs	r5, #1
   34f06:	9b01      	ldr	r3, [sp, #4]
   34f08:	2401      	movs	r4, #1
   34f0a:	401d      	ands	r5, r3
   34f0c:	2300      	movs	r3, #0
   34f0e:	2200      	movs	r2, #0
   34f10:	4699      	mov	r9, r3
   34f12:	e622      	b.n	34b5a <__aeabi_dmul+0xce>
   34f14:	251f      	movs	r5, #31
   34f16:	0021      	movs	r1, r4
   34f18:	426d      	negs	r5, r5
   34f1a:	1a28      	subs	r0, r5, r0
   34f1c:	40c1      	lsrs	r1, r0
   34f1e:	0008      	movs	r0, r1
   34f20:	2a20      	cmp	r2, #32
   34f22:	d01d      	beq.n	34f60 <__aeabi_dmul+0x4d4>
   34f24:	355f      	adds	r5, #95	; 0x5f
   34f26:	1aaa      	subs	r2, r5, r2
   34f28:	4094      	lsls	r4, r2
   34f2a:	4323      	orrs	r3, r4
   34f2c:	1e5c      	subs	r4, r3, #1
   34f2e:	41a3      	sbcs	r3, r4
   34f30:	2507      	movs	r5, #7
   34f32:	4303      	orrs	r3, r0
   34f34:	401d      	ands	r5, r3
   34f36:	2200      	movs	r2, #0
   34f38:	2d00      	cmp	r5, #0
   34f3a:	d009      	beq.n	34f50 <__aeabi_dmul+0x4c4>
   34f3c:	220f      	movs	r2, #15
   34f3e:	2400      	movs	r4, #0
   34f40:	401a      	ands	r2, r3
   34f42:	0018      	movs	r0, r3
   34f44:	2a04      	cmp	r2, #4
   34f46:	d1d6      	bne.n	34ef6 <__aeabi_dmul+0x46a>
   34f48:	0003      	movs	r3, r0
   34f4a:	0765      	lsls	r5, r4, #29
   34f4c:	0264      	lsls	r4, r4, #9
   34f4e:	0b22      	lsrs	r2, r4, #12
   34f50:	08db      	lsrs	r3, r3, #3
   34f52:	432b      	orrs	r3, r5
   34f54:	2501      	movs	r5, #1
   34f56:	4699      	mov	r9, r3
   34f58:	9b01      	ldr	r3, [sp, #4]
   34f5a:	2400      	movs	r4, #0
   34f5c:	401d      	ands	r5, r3
   34f5e:	e5fc      	b.n	34b5a <__aeabi_dmul+0xce>
   34f60:	2400      	movs	r4, #0
   34f62:	e7e2      	b.n	34f2a <__aeabi_dmul+0x49e>
   34f64:	2280      	movs	r2, #128	; 0x80
   34f66:	2501      	movs	r5, #1
   34f68:	0312      	lsls	r2, r2, #12
   34f6a:	4322      	orrs	r2, r4
   34f6c:	9901      	ldr	r1, [sp, #4]
   34f6e:	0312      	lsls	r2, r2, #12
   34f70:	0b12      	lsrs	r2, r2, #12
   34f72:	400d      	ands	r5, r1
   34f74:	4699      	mov	r9, r3
   34f76:	4c04      	ldr	r4, [pc, #16]	; (34f88 <__aeabi_dmul+0x4fc>)
   34f78:	e5ef      	b.n	34b5a <__aeabi_dmul+0xce>
   34f7a:	46c0      	nop			; (mov r8, r8)
   34f7c:	000003ff 	.word	0x000003ff
   34f80:	feffffff 	.word	0xfeffffff
   34f84:	000007fe 	.word	0x000007fe
   34f88:	000007ff 	.word	0x000007ff

00034f8c <__aeabi_dsub>:
   34f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34f8e:	4646      	mov	r6, r8
   34f90:	46d6      	mov	lr, sl
   34f92:	464f      	mov	r7, r9
   34f94:	030c      	lsls	r4, r1, #12
   34f96:	b5c0      	push	{r6, r7, lr}
   34f98:	0fcd      	lsrs	r5, r1, #31
   34f9a:	004e      	lsls	r6, r1, #1
   34f9c:	0a61      	lsrs	r1, r4, #9
   34f9e:	0f44      	lsrs	r4, r0, #29
   34fa0:	430c      	orrs	r4, r1
   34fa2:	00c1      	lsls	r1, r0, #3
   34fa4:	0058      	lsls	r0, r3, #1
   34fa6:	0d40      	lsrs	r0, r0, #21
   34fa8:	4684      	mov	ip, r0
   34faa:	468a      	mov	sl, r1
   34fac:	000f      	movs	r7, r1
   34fae:	0319      	lsls	r1, r3, #12
   34fb0:	0f50      	lsrs	r0, r2, #29
   34fb2:	0a49      	lsrs	r1, r1, #9
   34fb4:	4301      	orrs	r1, r0
   34fb6:	48c6      	ldr	r0, [pc, #792]	; (352d0 <__aeabi_dsub+0x344>)
   34fb8:	0d76      	lsrs	r6, r6, #21
   34fba:	46a8      	mov	r8, r5
   34fbc:	0fdb      	lsrs	r3, r3, #31
   34fbe:	00d2      	lsls	r2, r2, #3
   34fc0:	4584      	cmp	ip, r0
   34fc2:	d100      	bne.n	34fc6 <__aeabi_dsub+0x3a>
   34fc4:	e0d8      	b.n	35178 <__aeabi_dsub+0x1ec>
   34fc6:	2001      	movs	r0, #1
   34fc8:	4043      	eors	r3, r0
   34fca:	42ab      	cmp	r3, r5
   34fcc:	d100      	bne.n	34fd0 <__aeabi_dsub+0x44>
   34fce:	e0a6      	b.n	3511e <__aeabi_dsub+0x192>
   34fd0:	4660      	mov	r0, ip
   34fd2:	1a35      	subs	r5, r6, r0
   34fd4:	2d00      	cmp	r5, #0
   34fd6:	dc00      	bgt.n	34fda <__aeabi_dsub+0x4e>
   34fd8:	e105      	b.n	351e6 <__aeabi_dsub+0x25a>
   34fda:	2800      	cmp	r0, #0
   34fdc:	d110      	bne.n	35000 <__aeabi_dsub+0x74>
   34fde:	000b      	movs	r3, r1
   34fe0:	4313      	orrs	r3, r2
   34fe2:	d100      	bne.n	34fe6 <__aeabi_dsub+0x5a>
   34fe4:	e0d7      	b.n	35196 <__aeabi_dsub+0x20a>
   34fe6:	1e6b      	subs	r3, r5, #1
   34fe8:	2b00      	cmp	r3, #0
   34fea:	d000      	beq.n	34fee <__aeabi_dsub+0x62>
   34fec:	e14b      	b.n	35286 <__aeabi_dsub+0x2fa>
   34fee:	4653      	mov	r3, sl
   34ff0:	1a9f      	subs	r7, r3, r2
   34ff2:	45ba      	cmp	sl, r7
   34ff4:	4180      	sbcs	r0, r0
   34ff6:	1a64      	subs	r4, r4, r1
   34ff8:	4240      	negs	r0, r0
   34ffa:	1a24      	subs	r4, r4, r0
   34ffc:	2601      	movs	r6, #1
   34ffe:	e01e      	b.n	3503e <__aeabi_dsub+0xb2>
   35000:	4bb3      	ldr	r3, [pc, #716]	; (352d0 <__aeabi_dsub+0x344>)
   35002:	429e      	cmp	r6, r3
   35004:	d048      	beq.n	35098 <__aeabi_dsub+0x10c>
   35006:	2380      	movs	r3, #128	; 0x80
   35008:	041b      	lsls	r3, r3, #16
   3500a:	4319      	orrs	r1, r3
   3500c:	2d38      	cmp	r5, #56	; 0x38
   3500e:	dd00      	ble.n	35012 <__aeabi_dsub+0x86>
   35010:	e119      	b.n	35246 <__aeabi_dsub+0x2ba>
   35012:	2d1f      	cmp	r5, #31
   35014:	dd00      	ble.n	35018 <__aeabi_dsub+0x8c>
   35016:	e14c      	b.n	352b2 <__aeabi_dsub+0x326>
   35018:	2320      	movs	r3, #32
   3501a:	000f      	movs	r7, r1
   3501c:	1b5b      	subs	r3, r3, r5
   3501e:	0010      	movs	r0, r2
   35020:	409a      	lsls	r2, r3
   35022:	409f      	lsls	r7, r3
   35024:	40e8      	lsrs	r0, r5
   35026:	1e53      	subs	r3, r2, #1
   35028:	419a      	sbcs	r2, r3
   3502a:	40e9      	lsrs	r1, r5
   3502c:	4307      	orrs	r7, r0
   3502e:	4317      	orrs	r7, r2
   35030:	4653      	mov	r3, sl
   35032:	1bdf      	subs	r7, r3, r7
   35034:	1a61      	subs	r1, r4, r1
   35036:	45ba      	cmp	sl, r7
   35038:	41a4      	sbcs	r4, r4
   3503a:	4264      	negs	r4, r4
   3503c:	1b0c      	subs	r4, r1, r4
   3503e:	0223      	lsls	r3, r4, #8
   35040:	d400      	bmi.n	35044 <__aeabi_dsub+0xb8>
   35042:	e0c5      	b.n	351d0 <__aeabi_dsub+0x244>
   35044:	0264      	lsls	r4, r4, #9
   35046:	0a65      	lsrs	r5, r4, #9
   35048:	2d00      	cmp	r5, #0
   3504a:	d100      	bne.n	3504e <__aeabi_dsub+0xc2>
   3504c:	e0f6      	b.n	3523c <__aeabi_dsub+0x2b0>
   3504e:	0028      	movs	r0, r5
   35050:	f000 fb1e 	bl	35690 <__clzsi2>
   35054:	0003      	movs	r3, r0
   35056:	3b08      	subs	r3, #8
   35058:	2b1f      	cmp	r3, #31
   3505a:	dd00      	ble.n	3505e <__aeabi_dsub+0xd2>
   3505c:	e0e9      	b.n	35232 <__aeabi_dsub+0x2a6>
   3505e:	2220      	movs	r2, #32
   35060:	003c      	movs	r4, r7
   35062:	1ad2      	subs	r2, r2, r3
   35064:	409d      	lsls	r5, r3
   35066:	40d4      	lsrs	r4, r2
   35068:	409f      	lsls	r7, r3
   3506a:	4325      	orrs	r5, r4
   3506c:	429e      	cmp	r6, r3
   3506e:	dd00      	ble.n	35072 <__aeabi_dsub+0xe6>
   35070:	e0db      	b.n	3522a <__aeabi_dsub+0x29e>
   35072:	1b9e      	subs	r6, r3, r6
   35074:	1c73      	adds	r3, r6, #1
   35076:	2b1f      	cmp	r3, #31
   35078:	dd00      	ble.n	3507c <__aeabi_dsub+0xf0>
   3507a:	e10a      	b.n	35292 <__aeabi_dsub+0x306>
   3507c:	2220      	movs	r2, #32
   3507e:	0038      	movs	r0, r7
   35080:	1ad2      	subs	r2, r2, r3
   35082:	0029      	movs	r1, r5
   35084:	4097      	lsls	r7, r2
   35086:	002c      	movs	r4, r5
   35088:	4091      	lsls	r1, r2
   3508a:	40d8      	lsrs	r0, r3
   3508c:	1e7a      	subs	r2, r7, #1
   3508e:	4197      	sbcs	r7, r2
   35090:	40dc      	lsrs	r4, r3
   35092:	2600      	movs	r6, #0
   35094:	4301      	orrs	r1, r0
   35096:	430f      	orrs	r7, r1
   35098:	077b      	lsls	r3, r7, #29
   3509a:	d009      	beq.n	350b0 <__aeabi_dsub+0x124>
   3509c:	230f      	movs	r3, #15
   3509e:	403b      	ands	r3, r7
   350a0:	2b04      	cmp	r3, #4
   350a2:	d005      	beq.n	350b0 <__aeabi_dsub+0x124>
   350a4:	1d3b      	adds	r3, r7, #4
   350a6:	42bb      	cmp	r3, r7
   350a8:	41bf      	sbcs	r7, r7
   350aa:	427f      	negs	r7, r7
   350ac:	19e4      	adds	r4, r4, r7
   350ae:	001f      	movs	r7, r3
   350b0:	0223      	lsls	r3, r4, #8
   350b2:	d525      	bpl.n	35100 <__aeabi_dsub+0x174>
   350b4:	4b86      	ldr	r3, [pc, #536]	; (352d0 <__aeabi_dsub+0x344>)
   350b6:	3601      	adds	r6, #1
   350b8:	429e      	cmp	r6, r3
   350ba:	d100      	bne.n	350be <__aeabi_dsub+0x132>
   350bc:	e0af      	b.n	3521e <__aeabi_dsub+0x292>
   350be:	4b85      	ldr	r3, [pc, #532]	; (352d4 <__aeabi_dsub+0x348>)
   350c0:	2501      	movs	r5, #1
   350c2:	401c      	ands	r4, r3
   350c4:	4643      	mov	r3, r8
   350c6:	0762      	lsls	r2, r4, #29
   350c8:	08ff      	lsrs	r7, r7, #3
   350ca:	0264      	lsls	r4, r4, #9
   350cc:	0576      	lsls	r6, r6, #21
   350ce:	4317      	orrs	r7, r2
   350d0:	0b24      	lsrs	r4, r4, #12
   350d2:	0d76      	lsrs	r6, r6, #21
   350d4:	401d      	ands	r5, r3
   350d6:	2100      	movs	r1, #0
   350d8:	0324      	lsls	r4, r4, #12
   350da:	0b23      	lsrs	r3, r4, #12
   350dc:	0d0c      	lsrs	r4, r1, #20
   350de:	4a7e      	ldr	r2, [pc, #504]	; (352d8 <__aeabi_dsub+0x34c>)
   350e0:	0524      	lsls	r4, r4, #20
   350e2:	431c      	orrs	r4, r3
   350e4:	4014      	ands	r4, r2
   350e6:	0533      	lsls	r3, r6, #20
   350e8:	4323      	orrs	r3, r4
   350ea:	005b      	lsls	r3, r3, #1
   350ec:	07ed      	lsls	r5, r5, #31
   350ee:	085b      	lsrs	r3, r3, #1
   350f0:	432b      	orrs	r3, r5
   350f2:	0038      	movs	r0, r7
   350f4:	0019      	movs	r1, r3
   350f6:	bc1c      	pop	{r2, r3, r4}
   350f8:	4690      	mov	r8, r2
   350fa:	4699      	mov	r9, r3
   350fc:	46a2      	mov	sl, r4
   350fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35100:	2501      	movs	r5, #1
   35102:	4643      	mov	r3, r8
   35104:	0762      	lsls	r2, r4, #29
   35106:	08ff      	lsrs	r7, r7, #3
   35108:	4317      	orrs	r7, r2
   3510a:	08e4      	lsrs	r4, r4, #3
   3510c:	401d      	ands	r5, r3
   3510e:	4b70      	ldr	r3, [pc, #448]	; (352d0 <__aeabi_dsub+0x344>)
   35110:	429e      	cmp	r6, r3
   35112:	d036      	beq.n	35182 <__aeabi_dsub+0x1f6>
   35114:	0324      	lsls	r4, r4, #12
   35116:	0576      	lsls	r6, r6, #21
   35118:	0b24      	lsrs	r4, r4, #12
   3511a:	0d76      	lsrs	r6, r6, #21
   3511c:	e7db      	b.n	350d6 <__aeabi_dsub+0x14a>
   3511e:	4663      	mov	r3, ip
   35120:	1af3      	subs	r3, r6, r3
   35122:	2b00      	cmp	r3, #0
   35124:	dc00      	bgt.n	35128 <__aeabi_dsub+0x19c>
   35126:	e094      	b.n	35252 <__aeabi_dsub+0x2c6>
   35128:	4660      	mov	r0, ip
   3512a:	2800      	cmp	r0, #0
   3512c:	d035      	beq.n	3519a <__aeabi_dsub+0x20e>
   3512e:	4868      	ldr	r0, [pc, #416]	; (352d0 <__aeabi_dsub+0x344>)
   35130:	4286      	cmp	r6, r0
   35132:	d0b1      	beq.n	35098 <__aeabi_dsub+0x10c>
   35134:	2780      	movs	r7, #128	; 0x80
   35136:	043f      	lsls	r7, r7, #16
   35138:	4339      	orrs	r1, r7
   3513a:	2b38      	cmp	r3, #56	; 0x38
   3513c:	dc00      	bgt.n	35140 <__aeabi_dsub+0x1b4>
   3513e:	e0fd      	b.n	3533c <__aeabi_dsub+0x3b0>
   35140:	430a      	orrs	r2, r1
   35142:	0017      	movs	r7, r2
   35144:	2100      	movs	r1, #0
   35146:	1e7a      	subs	r2, r7, #1
   35148:	4197      	sbcs	r7, r2
   3514a:	4457      	add	r7, sl
   3514c:	4557      	cmp	r7, sl
   3514e:	4180      	sbcs	r0, r0
   35150:	1909      	adds	r1, r1, r4
   35152:	4244      	negs	r4, r0
   35154:	190c      	adds	r4, r1, r4
   35156:	0223      	lsls	r3, r4, #8
   35158:	d53a      	bpl.n	351d0 <__aeabi_dsub+0x244>
   3515a:	4b5d      	ldr	r3, [pc, #372]	; (352d0 <__aeabi_dsub+0x344>)
   3515c:	3601      	adds	r6, #1
   3515e:	429e      	cmp	r6, r3
   35160:	d100      	bne.n	35164 <__aeabi_dsub+0x1d8>
   35162:	e14b      	b.n	353fc <__aeabi_dsub+0x470>
   35164:	2201      	movs	r2, #1
   35166:	4b5b      	ldr	r3, [pc, #364]	; (352d4 <__aeabi_dsub+0x348>)
   35168:	401c      	ands	r4, r3
   3516a:	087b      	lsrs	r3, r7, #1
   3516c:	4017      	ands	r7, r2
   3516e:	431f      	orrs	r7, r3
   35170:	07e2      	lsls	r2, r4, #31
   35172:	4317      	orrs	r7, r2
   35174:	0864      	lsrs	r4, r4, #1
   35176:	e78f      	b.n	35098 <__aeabi_dsub+0x10c>
   35178:	0008      	movs	r0, r1
   3517a:	4310      	orrs	r0, r2
   3517c:	d000      	beq.n	35180 <__aeabi_dsub+0x1f4>
   3517e:	e724      	b.n	34fca <__aeabi_dsub+0x3e>
   35180:	e721      	b.n	34fc6 <__aeabi_dsub+0x3a>
   35182:	0023      	movs	r3, r4
   35184:	433b      	orrs	r3, r7
   35186:	d100      	bne.n	3518a <__aeabi_dsub+0x1fe>
   35188:	e1b9      	b.n	354fe <__aeabi_dsub+0x572>
   3518a:	2280      	movs	r2, #128	; 0x80
   3518c:	0312      	lsls	r2, r2, #12
   3518e:	4314      	orrs	r4, r2
   35190:	0324      	lsls	r4, r4, #12
   35192:	0b24      	lsrs	r4, r4, #12
   35194:	e79f      	b.n	350d6 <__aeabi_dsub+0x14a>
   35196:	002e      	movs	r6, r5
   35198:	e77e      	b.n	35098 <__aeabi_dsub+0x10c>
   3519a:	0008      	movs	r0, r1
   3519c:	4310      	orrs	r0, r2
   3519e:	d100      	bne.n	351a2 <__aeabi_dsub+0x216>
   351a0:	e0ca      	b.n	35338 <__aeabi_dsub+0x3ac>
   351a2:	1e58      	subs	r0, r3, #1
   351a4:	4684      	mov	ip, r0
   351a6:	2800      	cmp	r0, #0
   351a8:	d000      	beq.n	351ac <__aeabi_dsub+0x220>
   351aa:	e0e7      	b.n	3537c <__aeabi_dsub+0x3f0>
   351ac:	4452      	add	r2, sl
   351ae:	4552      	cmp	r2, sl
   351b0:	4180      	sbcs	r0, r0
   351b2:	1864      	adds	r4, r4, r1
   351b4:	4240      	negs	r0, r0
   351b6:	1824      	adds	r4, r4, r0
   351b8:	0017      	movs	r7, r2
   351ba:	2601      	movs	r6, #1
   351bc:	0223      	lsls	r3, r4, #8
   351be:	d507      	bpl.n	351d0 <__aeabi_dsub+0x244>
   351c0:	2602      	movs	r6, #2
   351c2:	e7cf      	b.n	35164 <__aeabi_dsub+0x1d8>
   351c4:	4664      	mov	r4, ip
   351c6:	432c      	orrs	r4, r5
   351c8:	d100      	bne.n	351cc <__aeabi_dsub+0x240>
   351ca:	e1b3      	b.n	35534 <__aeabi_dsub+0x5a8>
   351cc:	002c      	movs	r4, r5
   351ce:	4667      	mov	r7, ip
   351d0:	077b      	lsls	r3, r7, #29
   351d2:	d000      	beq.n	351d6 <__aeabi_dsub+0x24a>
   351d4:	e762      	b.n	3509c <__aeabi_dsub+0x110>
   351d6:	0763      	lsls	r3, r4, #29
   351d8:	08ff      	lsrs	r7, r7, #3
   351da:	431f      	orrs	r7, r3
   351dc:	2501      	movs	r5, #1
   351de:	4643      	mov	r3, r8
   351e0:	08e4      	lsrs	r4, r4, #3
   351e2:	401d      	ands	r5, r3
   351e4:	e793      	b.n	3510e <__aeabi_dsub+0x182>
   351e6:	2d00      	cmp	r5, #0
   351e8:	d178      	bne.n	352dc <__aeabi_dsub+0x350>
   351ea:	1c75      	adds	r5, r6, #1
   351ec:	056d      	lsls	r5, r5, #21
   351ee:	0d6d      	lsrs	r5, r5, #21
   351f0:	2d01      	cmp	r5, #1
   351f2:	dc00      	bgt.n	351f6 <__aeabi_dsub+0x26a>
   351f4:	e0f2      	b.n	353dc <__aeabi_dsub+0x450>
   351f6:	4650      	mov	r0, sl
   351f8:	1a80      	subs	r0, r0, r2
   351fa:	4582      	cmp	sl, r0
   351fc:	41bf      	sbcs	r7, r7
   351fe:	1a65      	subs	r5, r4, r1
   35200:	427f      	negs	r7, r7
   35202:	1bed      	subs	r5, r5, r7
   35204:	4684      	mov	ip, r0
   35206:	0228      	lsls	r0, r5, #8
   35208:	d400      	bmi.n	3520c <__aeabi_dsub+0x280>
   3520a:	e08c      	b.n	35326 <__aeabi_dsub+0x39a>
   3520c:	4650      	mov	r0, sl
   3520e:	1a17      	subs	r7, r2, r0
   35210:	42ba      	cmp	r2, r7
   35212:	4192      	sbcs	r2, r2
   35214:	1b0c      	subs	r4, r1, r4
   35216:	4255      	negs	r5, r2
   35218:	1b65      	subs	r5, r4, r5
   3521a:	4698      	mov	r8, r3
   3521c:	e714      	b.n	35048 <__aeabi_dsub+0xbc>
   3521e:	2501      	movs	r5, #1
   35220:	4643      	mov	r3, r8
   35222:	2400      	movs	r4, #0
   35224:	401d      	ands	r5, r3
   35226:	2700      	movs	r7, #0
   35228:	e755      	b.n	350d6 <__aeabi_dsub+0x14a>
   3522a:	4c2a      	ldr	r4, [pc, #168]	; (352d4 <__aeabi_dsub+0x348>)
   3522c:	1af6      	subs	r6, r6, r3
   3522e:	402c      	ands	r4, r5
   35230:	e732      	b.n	35098 <__aeabi_dsub+0x10c>
   35232:	003d      	movs	r5, r7
   35234:	3828      	subs	r0, #40	; 0x28
   35236:	4085      	lsls	r5, r0
   35238:	2700      	movs	r7, #0
   3523a:	e717      	b.n	3506c <__aeabi_dsub+0xe0>
   3523c:	0038      	movs	r0, r7
   3523e:	f000 fa27 	bl	35690 <__clzsi2>
   35242:	3020      	adds	r0, #32
   35244:	e706      	b.n	35054 <__aeabi_dsub+0xc8>
   35246:	430a      	orrs	r2, r1
   35248:	0017      	movs	r7, r2
   3524a:	2100      	movs	r1, #0
   3524c:	1e7a      	subs	r2, r7, #1
   3524e:	4197      	sbcs	r7, r2
   35250:	e6ee      	b.n	35030 <__aeabi_dsub+0xa4>
   35252:	2b00      	cmp	r3, #0
   35254:	d000      	beq.n	35258 <__aeabi_dsub+0x2cc>
   35256:	e0e5      	b.n	35424 <__aeabi_dsub+0x498>
   35258:	1c73      	adds	r3, r6, #1
   3525a:	469c      	mov	ip, r3
   3525c:	055b      	lsls	r3, r3, #21
   3525e:	0d5b      	lsrs	r3, r3, #21
   35260:	2b01      	cmp	r3, #1
   35262:	dc00      	bgt.n	35266 <__aeabi_dsub+0x2da>
   35264:	e09f      	b.n	353a6 <__aeabi_dsub+0x41a>
   35266:	4b1a      	ldr	r3, [pc, #104]	; (352d0 <__aeabi_dsub+0x344>)
   35268:	459c      	cmp	ip, r3
   3526a:	d100      	bne.n	3526e <__aeabi_dsub+0x2e2>
   3526c:	e0c5      	b.n	353fa <__aeabi_dsub+0x46e>
   3526e:	4452      	add	r2, sl
   35270:	4552      	cmp	r2, sl
   35272:	4180      	sbcs	r0, r0
   35274:	1864      	adds	r4, r4, r1
   35276:	4240      	negs	r0, r0
   35278:	1824      	adds	r4, r4, r0
   3527a:	07e7      	lsls	r7, r4, #31
   3527c:	0852      	lsrs	r2, r2, #1
   3527e:	4317      	orrs	r7, r2
   35280:	0864      	lsrs	r4, r4, #1
   35282:	4666      	mov	r6, ip
   35284:	e708      	b.n	35098 <__aeabi_dsub+0x10c>
   35286:	4812      	ldr	r0, [pc, #72]	; (352d0 <__aeabi_dsub+0x344>)
   35288:	4285      	cmp	r5, r0
   3528a:	d100      	bne.n	3528e <__aeabi_dsub+0x302>
   3528c:	e085      	b.n	3539a <__aeabi_dsub+0x40e>
   3528e:	001d      	movs	r5, r3
   35290:	e6bc      	b.n	3500c <__aeabi_dsub+0x80>
   35292:	0029      	movs	r1, r5
   35294:	3e1f      	subs	r6, #31
   35296:	40f1      	lsrs	r1, r6
   35298:	2b20      	cmp	r3, #32
   3529a:	d100      	bne.n	3529e <__aeabi_dsub+0x312>
   3529c:	e07f      	b.n	3539e <__aeabi_dsub+0x412>
   3529e:	2240      	movs	r2, #64	; 0x40
   352a0:	1ad3      	subs	r3, r2, r3
   352a2:	409d      	lsls	r5, r3
   352a4:	432f      	orrs	r7, r5
   352a6:	1e7d      	subs	r5, r7, #1
   352a8:	41af      	sbcs	r7, r5
   352aa:	2400      	movs	r4, #0
   352ac:	430f      	orrs	r7, r1
   352ae:	2600      	movs	r6, #0
   352b0:	e78e      	b.n	351d0 <__aeabi_dsub+0x244>
   352b2:	002b      	movs	r3, r5
   352b4:	000f      	movs	r7, r1
   352b6:	3b20      	subs	r3, #32
   352b8:	40df      	lsrs	r7, r3
   352ba:	2d20      	cmp	r5, #32
   352bc:	d071      	beq.n	353a2 <__aeabi_dsub+0x416>
   352be:	2340      	movs	r3, #64	; 0x40
   352c0:	1b5d      	subs	r5, r3, r5
   352c2:	40a9      	lsls	r1, r5
   352c4:	430a      	orrs	r2, r1
   352c6:	1e51      	subs	r1, r2, #1
   352c8:	418a      	sbcs	r2, r1
   352ca:	2100      	movs	r1, #0
   352cc:	4317      	orrs	r7, r2
   352ce:	e6af      	b.n	35030 <__aeabi_dsub+0xa4>
   352d0:	000007ff 	.word	0x000007ff
   352d4:	ff7fffff 	.word	0xff7fffff
   352d8:	800fffff 	.word	0x800fffff
   352dc:	2e00      	cmp	r6, #0
   352de:	d03e      	beq.n	3535e <__aeabi_dsub+0x3d2>
   352e0:	4eb3      	ldr	r6, [pc, #716]	; (355b0 <__aeabi_dsub+0x624>)
   352e2:	45b4      	cmp	ip, r6
   352e4:	d045      	beq.n	35372 <__aeabi_dsub+0x3e6>
   352e6:	2680      	movs	r6, #128	; 0x80
   352e8:	0436      	lsls	r6, r6, #16
   352ea:	426d      	negs	r5, r5
   352ec:	4334      	orrs	r4, r6
   352ee:	2d38      	cmp	r5, #56	; 0x38
   352f0:	dd00      	ble.n	352f4 <__aeabi_dsub+0x368>
   352f2:	e0a8      	b.n	35446 <__aeabi_dsub+0x4ba>
   352f4:	2d1f      	cmp	r5, #31
   352f6:	dd00      	ble.n	352fa <__aeabi_dsub+0x36e>
   352f8:	e11f      	b.n	3553a <__aeabi_dsub+0x5ae>
   352fa:	2620      	movs	r6, #32
   352fc:	0027      	movs	r7, r4
   352fe:	4650      	mov	r0, sl
   35300:	1b76      	subs	r6, r6, r5
   35302:	40b7      	lsls	r7, r6
   35304:	40e8      	lsrs	r0, r5
   35306:	4307      	orrs	r7, r0
   35308:	4650      	mov	r0, sl
   3530a:	40b0      	lsls	r0, r6
   3530c:	1e46      	subs	r6, r0, #1
   3530e:	41b0      	sbcs	r0, r6
   35310:	40ec      	lsrs	r4, r5
   35312:	4338      	orrs	r0, r7
   35314:	1a17      	subs	r7, r2, r0
   35316:	42ba      	cmp	r2, r7
   35318:	4192      	sbcs	r2, r2
   3531a:	1b0c      	subs	r4, r1, r4
   3531c:	4252      	negs	r2, r2
   3531e:	1aa4      	subs	r4, r4, r2
   35320:	4666      	mov	r6, ip
   35322:	4698      	mov	r8, r3
   35324:	e68b      	b.n	3503e <__aeabi_dsub+0xb2>
   35326:	4664      	mov	r4, ip
   35328:	4667      	mov	r7, ip
   3532a:	432c      	orrs	r4, r5
   3532c:	d000      	beq.n	35330 <__aeabi_dsub+0x3a4>
   3532e:	e68b      	b.n	35048 <__aeabi_dsub+0xbc>
   35330:	2500      	movs	r5, #0
   35332:	2600      	movs	r6, #0
   35334:	2700      	movs	r7, #0
   35336:	e6ea      	b.n	3510e <__aeabi_dsub+0x182>
   35338:	001e      	movs	r6, r3
   3533a:	e6ad      	b.n	35098 <__aeabi_dsub+0x10c>
   3533c:	2b1f      	cmp	r3, #31
   3533e:	dc60      	bgt.n	35402 <__aeabi_dsub+0x476>
   35340:	2720      	movs	r7, #32
   35342:	1af8      	subs	r0, r7, r3
   35344:	000f      	movs	r7, r1
   35346:	4684      	mov	ip, r0
   35348:	4087      	lsls	r7, r0
   3534a:	0010      	movs	r0, r2
   3534c:	40d8      	lsrs	r0, r3
   3534e:	4307      	orrs	r7, r0
   35350:	4660      	mov	r0, ip
   35352:	4082      	lsls	r2, r0
   35354:	1e50      	subs	r0, r2, #1
   35356:	4182      	sbcs	r2, r0
   35358:	40d9      	lsrs	r1, r3
   3535a:	4317      	orrs	r7, r2
   3535c:	e6f5      	b.n	3514a <__aeabi_dsub+0x1be>
   3535e:	0026      	movs	r6, r4
   35360:	4650      	mov	r0, sl
   35362:	4306      	orrs	r6, r0
   35364:	d005      	beq.n	35372 <__aeabi_dsub+0x3e6>
   35366:	43ed      	mvns	r5, r5
   35368:	2d00      	cmp	r5, #0
   3536a:	d0d3      	beq.n	35314 <__aeabi_dsub+0x388>
   3536c:	4e90      	ldr	r6, [pc, #576]	; (355b0 <__aeabi_dsub+0x624>)
   3536e:	45b4      	cmp	ip, r6
   35370:	d1bd      	bne.n	352ee <__aeabi_dsub+0x362>
   35372:	000c      	movs	r4, r1
   35374:	0017      	movs	r7, r2
   35376:	4666      	mov	r6, ip
   35378:	4698      	mov	r8, r3
   3537a:	e68d      	b.n	35098 <__aeabi_dsub+0x10c>
   3537c:	488c      	ldr	r0, [pc, #560]	; (355b0 <__aeabi_dsub+0x624>)
   3537e:	4283      	cmp	r3, r0
   35380:	d00b      	beq.n	3539a <__aeabi_dsub+0x40e>
   35382:	4663      	mov	r3, ip
   35384:	e6d9      	b.n	3513a <__aeabi_dsub+0x1ae>
   35386:	2d00      	cmp	r5, #0
   35388:	d000      	beq.n	3538c <__aeabi_dsub+0x400>
   3538a:	e096      	b.n	354ba <__aeabi_dsub+0x52e>
   3538c:	0008      	movs	r0, r1
   3538e:	4310      	orrs	r0, r2
   35390:	d100      	bne.n	35394 <__aeabi_dsub+0x408>
   35392:	e0e2      	b.n	3555a <__aeabi_dsub+0x5ce>
   35394:	000c      	movs	r4, r1
   35396:	0017      	movs	r7, r2
   35398:	4698      	mov	r8, r3
   3539a:	4e85      	ldr	r6, [pc, #532]	; (355b0 <__aeabi_dsub+0x624>)
   3539c:	e67c      	b.n	35098 <__aeabi_dsub+0x10c>
   3539e:	2500      	movs	r5, #0
   353a0:	e780      	b.n	352a4 <__aeabi_dsub+0x318>
   353a2:	2100      	movs	r1, #0
   353a4:	e78e      	b.n	352c4 <__aeabi_dsub+0x338>
   353a6:	0023      	movs	r3, r4
   353a8:	4650      	mov	r0, sl
   353aa:	4303      	orrs	r3, r0
   353ac:	2e00      	cmp	r6, #0
   353ae:	d000      	beq.n	353b2 <__aeabi_dsub+0x426>
   353b0:	e0a8      	b.n	35504 <__aeabi_dsub+0x578>
   353b2:	2b00      	cmp	r3, #0
   353b4:	d100      	bne.n	353b8 <__aeabi_dsub+0x42c>
   353b6:	e0de      	b.n	35576 <__aeabi_dsub+0x5ea>
   353b8:	000b      	movs	r3, r1
   353ba:	4313      	orrs	r3, r2
   353bc:	d100      	bne.n	353c0 <__aeabi_dsub+0x434>
   353be:	e66b      	b.n	35098 <__aeabi_dsub+0x10c>
   353c0:	4452      	add	r2, sl
   353c2:	4552      	cmp	r2, sl
   353c4:	4180      	sbcs	r0, r0
   353c6:	1864      	adds	r4, r4, r1
   353c8:	4240      	negs	r0, r0
   353ca:	1824      	adds	r4, r4, r0
   353cc:	0017      	movs	r7, r2
   353ce:	0223      	lsls	r3, r4, #8
   353d0:	d400      	bmi.n	353d4 <__aeabi_dsub+0x448>
   353d2:	e6fd      	b.n	351d0 <__aeabi_dsub+0x244>
   353d4:	4b77      	ldr	r3, [pc, #476]	; (355b4 <__aeabi_dsub+0x628>)
   353d6:	4666      	mov	r6, ip
   353d8:	401c      	ands	r4, r3
   353da:	e65d      	b.n	35098 <__aeabi_dsub+0x10c>
   353dc:	0025      	movs	r5, r4
   353de:	4650      	mov	r0, sl
   353e0:	4305      	orrs	r5, r0
   353e2:	2e00      	cmp	r6, #0
   353e4:	d1cf      	bne.n	35386 <__aeabi_dsub+0x3fa>
   353e6:	2d00      	cmp	r5, #0
   353e8:	d14f      	bne.n	3548a <__aeabi_dsub+0x4fe>
   353ea:	000c      	movs	r4, r1
   353ec:	4314      	orrs	r4, r2
   353ee:	d100      	bne.n	353f2 <__aeabi_dsub+0x466>
   353f0:	e0a0      	b.n	35534 <__aeabi_dsub+0x5a8>
   353f2:	000c      	movs	r4, r1
   353f4:	0017      	movs	r7, r2
   353f6:	4698      	mov	r8, r3
   353f8:	e64e      	b.n	35098 <__aeabi_dsub+0x10c>
   353fa:	4666      	mov	r6, ip
   353fc:	2400      	movs	r4, #0
   353fe:	2700      	movs	r7, #0
   35400:	e685      	b.n	3510e <__aeabi_dsub+0x182>
   35402:	001f      	movs	r7, r3
   35404:	0008      	movs	r0, r1
   35406:	3f20      	subs	r7, #32
   35408:	40f8      	lsrs	r0, r7
   3540a:	0007      	movs	r7, r0
   3540c:	2b20      	cmp	r3, #32
   3540e:	d100      	bne.n	35412 <__aeabi_dsub+0x486>
   35410:	e08e      	b.n	35530 <__aeabi_dsub+0x5a4>
   35412:	2040      	movs	r0, #64	; 0x40
   35414:	1ac3      	subs	r3, r0, r3
   35416:	4099      	lsls	r1, r3
   35418:	430a      	orrs	r2, r1
   3541a:	1e51      	subs	r1, r2, #1
   3541c:	418a      	sbcs	r2, r1
   3541e:	2100      	movs	r1, #0
   35420:	4317      	orrs	r7, r2
   35422:	e692      	b.n	3514a <__aeabi_dsub+0x1be>
   35424:	2e00      	cmp	r6, #0
   35426:	d114      	bne.n	35452 <__aeabi_dsub+0x4c6>
   35428:	0026      	movs	r6, r4
   3542a:	4650      	mov	r0, sl
   3542c:	4306      	orrs	r6, r0
   3542e:	d062      	beq.n	354f6 <__aeabi_dsub+0x56a>
   35430:	43db      	mvns	r3, r3
   35432:	2b00      	cmp	r3, #0
   35434:	d15c      	bne.n	354f0 <__aeabi_dsub+0x564>
   35436:	1887      	adds	r7, r0, r2
   35438:	4297      	cmp	r7, r2
   3543a:	4192      	sbcs	r2, r2
   3543c:	1864      	adds	r4, r4, r1
   3543e:	4252      	negs	r2, r2
   35440:	18a4      	adds	r4, r4, r2
   35442:	4666      	mov	r6, ip
   35444:	e687      	b.n	35156 <__aeabi_dsub+0x1ca>
   35446:	4650      	mov	r0, sl
   35448:	4320      	orrs	r0, r4
   3544a:	1e44      	subs	r4, r0, #1
   3544c:	41a0      	sbcs	r0, r4
   3544e:	2400      	movs	r4, #0
   35450:	e760      	b.n	35314 <__aeabi_dsub+0x388>
   35452:	4e57      	ldr	r6, [pc, #348]	; (355b0 <__aeabi_dsub+0x624>)
   35454:	45b4      	cmp	ip, r6
   35456:	d04e      	beq.n	354f6 <__aeabi_dsub+0x56a>
   35458:	2680      	movs	r6, #128	; 0x80
   3545a:	0436      	lsls	r6, r6, #16
   3545c:	425b      	negs	r3, r3
   3545e:	4334      	orrs	r4, r6
   35460:	2b38      	cmp	r3, #56	; 0x38
   35462:	dd00      	ble.n	35466 <__aeabi_dsub+0x4da>
   35464:	e07f      	b.n	35566 <__aeabi_dsub+0x5da>
   35466:	2b1f      	cmp	r3, #31
   35468:	dd00      	ble.n	3546c <__aeabi_dsub+0x4e0>
   3546a:	e08b      	b.n	35584 <__aeabi_dsub+0x5f8>
   3546c:	2620      	movs	r6, #32
   3546e:	0027      	movs	r7, r4
   35470:	4650      	mov	r0, sl
   35472:	1af6      	subs	r6, r6, r3
   35474:	40b7      	lsls	r7, r6
   35476:	40d8      	lsrs	r0, r3
   35478:	4307      	orrs	r7, r0
   3547a:	4650      	mov	r0, sl
   3547c:	40b0      	lsls	r0, r6
   3547e:	1e46      	subs	r6, r0, #1
   35480:	41b0      	sbcs	r0, r6
   35482:	4307      	orrs	r7, r0
   35484:	40dc      	lsrs	r4, r3
   35486:	18bf      	adds	r7, r7, r2
   35488:	e7d6      	b.n	35438 <__aeabi_dsub+0x4ac>
   3548a:	000d      	movs	r5, r1
   3548c:	4315      	orrs	r5, r2
   3548e:	d100      	bne.n	35492 <__aeabi_dsub+0x506>
   35490:	e602      	b.n	35098 <__aeabi_dsub+0x10c>
   35492:	4650      	mov	r0, sl
   35494:	1a80      	subs	r0, r0, r2
   35496:	4582      	cmp	sl, r0
   35498:	41bf      	sbcs	r7, r7
   3549a:	1a65      	subs	r5, r4, r1
   3549c:	427f      	negs	r7, r7
   3549e:	1bed      	subs	r5, r5, r7
   354a0:	4684      	mov	ip, r0
   354a2:	0228      	lsls	r0, r5, #8
   354a4:	d400      	bmi.n	354a8 <__aeabi_dsub+0x51c>
   354a6:	e68d      	b.n	351c4 <__aeabi_dsub+0x238>
   354a8:	4650      	mov	r0, sl
   354aa:	1a17      	subs	r7, r2, r0
   354ac:	42ba      	cmp	r2, r7
   354ae:	4192      	sbcs	r2, r2
   354b0:	1b0c      	subs	r4, r1, r4
   354b2:	4252      	negs	r2, r2
   354b4:	1aa4      	subs	r4, r4, r2
   354b6:	4698      	mov	r8, r3
   354b8:	e5ee      	b.n	35098 <__aeabi_dsub+0x10c>
   354ba:	000d      	movs	r5, r1
   354bc:	4315      	orrs	r5, r2
   354be:	d100      	bne.n	354c2 <__aeabi_dsub+0x536>
   354c0:	e76b      	b.n	3539a <__aeabi_dsub+0x40e>
   354c2:	4650      	mov	r0, sl
   354c4:	0767      	lsls	r7, r4, #29
   354c6:	08c0      	lsrs	r0, r0, #3
   354c8:	4307      	orrs	r7, r0
   354ca:	2080      	movs	r0, #128	; 0x80
   354cc:	08e4      	lsrs	r4, r4, #3
   354ce:	0300      	lsls	r0, r0, #12
   354d0:	4204      	tst	r4, r0
   354d2:	d007      	beq.n	354e4 <__aeabi_dsub+0x558>
   354d4:	08cd      	lsrs	r5, r1, #3
   354d6:	4205      	tst	r5, r0
   354d8:	d104      	bne.n	354e4 <__aeabi_dsub+0x558>
   354da:	002c      	movs	r4, r5
   354dc:	4698      	mov	r8, r3
   354de:	08d7      	lsrs	r7, r2, #3
   354e0:	0749      	lsls	r1, r1, #29
   354e2:	430f      	orrs	r7, r1
   354e4:	0f7b      	lsrs	r3, r7, #29
   354e6:	00e4      	lsls	r4, r4, #3
   354e8:	431c      	orrs	r4, r3
   354ea:	00ff      	lsls	r7, r7, #3
   354ec:	4e30      	ldr	r6, [pc, #192]	; (355b0 <__aeabi_dsub+0x624>)
   354ee:	e5d3      	b.n	35098 <__aeabi_dsub+0x10c>
   354f0:	4e2f      	ldr	r6, [pc, #188]	; (355b0 <__aeabi_dsub+0x624>)
   354f2:	45b4      	cmp	ip, r6
   354f4:	d1b4      	bne.n	35460 <__aeabi_dsub+0x4d4>
   354f6:	000c      	movs	r4, r1
   354f8:	0017      	movs	r7, r2
   354fa:	4666      	mov	r6, ip
   354fc:	e5cc      	b.n	35098 <__aeabi_dsub+0x10c>
   354fe:	2700      	movs	r7, #0
   35500:	2400      	movs	r4, #0
   35502:	e5e8      	b.n	350d6 <__aeabi_dsub+0x14a>
   35504:	2b00      	cmp	r3, #0
   35506:	d039      	beq.n	3557c <__aeabi_dsub+0x5f0>
   35508:	000b      	movs	r3, r1
   3550a:	4313      	orrs	r3, r2
   3550c:	d100      	bne.n	35510 <__aeabi_dsub+0x584>
   3550e:	e744      	b.n	3539a <__aeabi_dsub+0x40e>
   35510:	08c0      	lsrs	r0, r0, #3
   35512:	0767      	lsls	r7, r4, #29
   35514:	4307      	orrs	r7, r0
   35516:	2080      	movs	r0, #128	; 0x80
   35518:	08e4      	lsrs	r4, r4, #3
   3551a:	0300      	lsls	r0, r0, #12
   3551c:	4204      	tst	r4, r0
   3551e:	d0e1      	beq.n	354e4 <__aeabi_dsub+0x558>
   35520:	08cb      	lsrs	r3, r1, #3
   35522:	4203      	tst	r3, r0
   35524:	d1de      	bne.n	354e4 <__aeabi_dsub+0x558>
   35526:	08d7      	lsrs	r7, r2, #3
   35528:	0749      	lsls	r1, r1, #29
   3552a:	430f      	orrs	r7, r1
   3552c:	001c      	movs	r4, r3
   3552e:	e7d9      	b.n	354e4 <__aeabi_dsub+0x558>
   35530:	2100      	movs	r1, #0
   35532:	e771      	b.n	35418 <__aeabi_dsub+0x48c>
   35534:	2500      	movs	r5, #0
   35536:	2700      	movs	r7, #0
   35538:	e5e9      	b.n	3510e <__aeabi_dsub+0x182>
   3553a:	002e      	movs	r6, r5
   3553c:	0027      	movs	r7, r4
   3553e:	3e20      	subs	r6, #32
   35540:	40f7      	lsrs	r7, r6
   35542:	2d20      	cmp	r5, #32
   35544:	d02f      	beq.n	355a6 <__aeabi_dsub+0x61a>
   35546:	2640      	movs	r6, #64	; 0x40
   35548:	1b75      	subs	r5, r6, r5
   3554a:	40ac      	lsls	r4, r5
   3554c:	4650      	mov	r0, sl
   3554e:	4320      	orrs	r0, r4
   35550:	1e44      	subs	r4, r0, #1
   35552:	41a0      	sbcs	r0, r4
   35554:	2400      	movs	r4, #0
   35556:	4338      	orrs	r0, r7
   35558:	e6dc      	b.n	35314 <__aeabi_dsub+0x388>
   3555a:	2480      	movs	r4, #128	; 0x80
   3555c:	2500      	movs	r5, #0
   3555e:	0324      	lsls	r4, r4, #12
   35560:	4e13      	ldr	r6, [pc, #76]	; (355b0 <__aeabi_dsub+0x624>)
   35562:	2700      	movs	r7, #0
   35564:	e5d3      	b.n	3510e <__aeabi_dsub+0x182>
   35566:	4650      	mov	r0, sl
   35568:	4320      	orrs	r0, r4
   3556a:	0007      	movs	r7, r0
   3556c:	1e78      	subs	r0, r7, #1
   3556e:	4187      	sbcs	r7, r0
   35570:	2400      	movs	r4, #0
   35572:	18bf      	adds	r7, r7, r2
   35574:	e760      	b.n	35438 <__aeabi_dsub+0x4ac>
   35576:	000c      	movs	r4, r1
   35578:	0017      	movs	r7, r2
   3557a:	e58d      	b.n	35098 <__aeabi_dsub+0x10c>
   3557c:	000c      	movs	r4, r1
   3557e:	0017      	movs	r7, r2
   35580:	4e0b      	ldr	r6, [pc, #44]	; (355b0 <__aeabi_dsub+0x624>)
   35582:	e589      	b.n	35098 <__aeabi_dsub+0x10c>
   35584:	001e      	movs	r6, r3
   35586:	0027      	movs	r7, r4
   35588:	3e20      	subs	r6, #32
   3558a:	40f7      	lsrs	r7, r6
   3558c:	2b20      	cmp	r3, #32
   3558e:	d00c      	beq.n	355aa <__aeabi_dsub+0x61e>
   35590:	2640      	movs	r6, #64	; 0x40
   35592:	1af3      	subs	r3, r6, r3
   35594:	409c      	lsls	r4, r3
   35596:	4650      	mov	r0, sl
   35598:	4320      	orrs	r0, r4
   3559a:	1e44      	subs	r4, r0, #1
   3559c:	41a0      	sbcs	r0, r4
   3559e:	4307      	orrs	r7, r0
   355a0:	2400      	movs	r4, #0
   355a2:	18bf      	adds	r7, r7, r2
   355a4:	e748      	b.n	35438 <__aeabi_dsub+0x4ac>
   355a6:	2400      	movs	r4, #0
   355a8:	e7d0      	b.n	3554c <__aeabi_dsub+0x5c0>
   355aa:	2400      	movs	r4, #0
   355ac:	e7f3      	b.n	35596 <__aeabi_dsub+0x60a>
   355ae:	46c0      	nop			; (mov r8, r8)
   355b0:	000007ff 	.word	0x000007ff
   355b4:	ff7fffff 	.word	0xff7fffff

000355b8 <__aeabi_d2iz>:
   355b8:	b530      	push	{r4, r5, lr}
   355ba:	4d13      	ldr	r5, [pc, #76]	; (35608 <__aeabi_d2iz+0x50>)
   355bc:	030a      	lsls	r2, r1, #12
   355be:	004b      	lsls	r3, r1, #1
   355c0:	0b12      	lsrs	r2, r2, #12
   355c2:	0d5b      	lsrs	r3, r3, #21
   355c4:	0fc9      	lsrs	r1, r1, #31
   355c6:	2400      	movs	r4, #0
   355c8:	42ab      	cmp	r3, r5
   355ca:	dd10      	ble.n	355ee <__aeabi_d2iz+0x36>
   355cc:	4c0f      	ldr	r4, [pc, #60]	; (3560c <__aeabi_d2iz+0x54>)
   355ce:	42a3      	cmp	r3, r4
   355d0:	dc0f      	bgt.n	355f2 <__aeabi_d2iz+0x3a>
   355d2:	2480      	movs	r4, #128	; 0x80
   355d4:	4d0e      	ldr	r5, [pc, #56]	; (35610 <__aeabi_d2iz+0x58>)
   355d6:	0364      	lsls	r4, r4, #13
   355d8:	4322      	orrs	r2, r4
   355da:	1aed      	subs	r5, r5, r3
   355dc:	2d1f      	cmp	r5, #31
   355de:	dd0b      	ble.n	355f8 <__aeabi_d2iz+0x40>
   355e0:	480c      	ldr	r0, [pc, #48]	; (35614 <__aeabi_d2iz+0x5c>)
   355e2:	1ac3      	subs	r3, r0, r3
   355e4:	40da      	lsrs	r2, r3
   355e6:	4254      	negs	r4, r2
   355e8:	2900      	cmp	r1, #0
   355ea:	d100      	bne.n	355ee <__aeabi_d2iz+0x36>
   355ec:	0014      	movs	r4, r2
   355ee:	0020      	movs	r0, r4
   355f0:	bd30      	pop	{r4, r5, pc}
   355f2:	4b09      	ldr	r3, [pc, #36]	; (35618 <__aeabi_d2iz+0x60>)
   355f4:	18cc      	adds	r4, r1, r3
   355f6:	e7fa      	b.n	355ee <__aeabi_d2iz+0x36>
   355f8:	4c08      	ldr	r4, [pc, #32]	; (3561c <__aeabi_d2iz+0x64>)
   355fa:	40e8      	lsrs	r0, r5
   355fc:	46a4      	mov	ip, r4
   355fe:	4463      	add	r3, ip
   35600:	409a      	lsls	r2, r3
   35602:	4302      	orrs	r2, r0
   35604:	e7ef      	b.n	355e6 <__aeabi_d2iz+0x2e>
   35606:	46c0      	nop			; (mov r8, r8)
   35608:	000003fe 	.word	0x000003fe
   3560c:	0000041d 	.word	0x0000041d
   35610:	00000433 	.word	0x00000433
   35614:	00000413 	.word	0x00000413
   35618:	7fffffff 	.word	0x7fffffff
   3561c:	fffffbed 	.word	0xfffffbed

00035620 <__aeabi_ui2d>:
   35620:	b510      	push	{r4, lr}
   35622:	1e04      	subs	r4, r0, #0
   35624:	d028      	beq.n	35678 <__aeabi_ui2d+0x58>
   35626:	f000 f833 	bl	35690 <__clzsi2>
   3562a:	4b15      	ldr	r3, [pc, #84]	; (35680 <__aeabi_ui2d+0x60>)
   3562c:	4a15      	ldr	r2, [pc, #84]	; (35684 <__aeabi_ui2d+0x64>)
   3562e:	1a1b      	subs	r3, r3, r0
   35630:	1ad2      	subs	r2, r2, r3
   35632:	2a1f      	cmp	r2, #31
   35634:	dd15      	ble.n	35662 <__aeabi_ui2d+0x42>
   35636:	4a14      	ldr	r2, [pc, #80]	; (35688 <__aeabi_ui2d+0x68>)
   35638:	1ad2      	subs	r2, r2, r3
   3563a:	4094      	lsls	r4, r2
   3563c:	2200      	movs	r2, #0
   3563e:	0324      	lsls	r4, r4, #12
   35640:	055b      	lsls	r3, r3, #21
   35642:	0b24      	lsrs	r4, r4, #12
   35644:	0d5b      	lsrs	r3, r3, #21
   35646:	2100      	movs	r1, #0
   35648:	0010      	movs	r0, r2
   3564a:	0324      	lsls	r4, r4, #12
   3564c:	0d0a      	lsrs	r2, r1, #20
   3564e:	0b24      	lsrs	r4, r4, #12
   35650:	0512      	lsls	r2, r2, #20
   35652:	4322      	orrs	r2, r4
   35654:	4c0d      	ldr	r4, [pc, #52]	; (3568c <__aeabi_ui2d+0x6c>)
   35656:	051b      	lsls	r3, r3, #20
   35658:	4022      	ands	r2, r4
   3565a:	4313      	orrs	r3, r2
   3565c:	005b      	lsls	r3, r3, #1
   3565e:	0859      	lsrs	r1, r3, #1
   35660:	bd10      	pop	{r4, pc}
   35662:	0021      	movs	r1, r4
   35664:	4091      	lsls	r1, r2
   35666:	000a      	movs	r2, r1
   35668:	210b      	movs	r1, #11
   3566a:	1a08      	subs	r0, r1, r0
   3566c:	40c4      	lsrs	r4, r0
   3566e:	055b      	lsls	r3, r3, #21
   35670:	0324      	lsls	r4, r4, #12
   35672:	0b24      	lsrs	r4, r4, #12
   35674:	0d5b      	lsrs	r3, r3, #21
   35676:	e7e6      	b.n	35646 <__aeabi_ui2d+0x26>
   35678:	2300      	movs	r3, #0
   3567a:	2400      	movs	r4, #0
   3567c:	2200      	movs	r2, #0
   3567e:	e7e2      	b.n	35646 <__aeabi_ui2d+0x26>
   35680:	0000041e 	.word	0x0000041e
   35684:	00000433 	.word	0x00000433
   35688:	00000413 	.word	0x00000413
   3568c:	800fffff 	.word	0x800fffff

00035690 <__clzsi2>:
   35690:	211c      	movs	r1, #28
   35692:	2301      	movs	r3, #1
   35694:	041b      	lsls	r3, r3, #16
   35696:	4298      	cmp	r0, r3
   35698:	d301      	bcc.n	3569e <__clzsi2+0xe>
   3569a:	0c00      	lsrs	r0, r0, #16
   3569c:	3910      	subs	r1, #16
   3569e:	0a1b      	lsrs	r3, r3, #8
   356a0:	4298      	cmp	r0, r3
   356a2:	d301      	bcc.n	356a8 <__clzsi2+0x18>
   356a4:	0a00      	lsrs	r0, r0, #8
   356a6:	3908      	subs	r1, #8
   356a8:	091b      	lsrs	r3, r3, #4
   356aa:	4298      	cmp	r0, r3
   356ac:	d301      	bcc.n	356b2 <__clzsi2+0x22>
   356ae:	0900      	lsrs	r0, r0, #4
   356b0:	3904      	subs	r1, #4
   356b2:	a202      	add	r2, pc, #8	; (adr r2, 356bc <__clzsi2+0x2c>)
   356b4:	5c10      	ldrb	r0, [r2, r0]
   356b6:	1840      	adds	r0, r0, r1
   356b8:	4770      	bx	lr
   356ba:	46c0      	nop			; (mov r8, r8)
   356bc:	02020304 	.word	0x02020304
   356c0:	01010101 	.word	0x01010101
	...

000356cc <atoi>:
   356cc:	b510      	push	{r4, lr}
   356ce:	220a      	movs	r2, #10
   356d0:	2100      	movs	r1, #0
   356d2:	f000 fb0d 	bl	35cf0 <strtol>
   356d6:	bd10      	pop	{r4, pc}

000356d8 <__libc_init_array>:
   356d8:	b570      	push	{r4, r5, r6, lr}
   356da:	2600      	movs	r6, #0
   356dc:	4d0c      	ldr	r5, [pc, #48]	; (35710 <__libc_init_array+0x38>)
   356de:	4c0d      	ldr	r4, [pc, #52]	; (35714 <__libc_init_array+0x3c>)
   356e0:	1b64      	subs	r4, r4, r5
   356e2:	10a4      	asrs	r4, r4, #2
   356e4:	42a6      	cmp	r6, r4
   356e6:	d109      	bne.n	356fc <__libc_init_array+0x24>
   356e8:	2600      	movs	r6, #0
   356ea:	f005 fdc5 	bl	3b278 <_init>
   356ee:	4d0a      	ldr	r5, [pc, #40]	; (35718 <__libc_init_array+0x40>)
   356f0:	4c0a      	ldr	r4, [pc, #40]	; (3571c <__libc_init_array+0x44>)
   356f2:	1b64      	subs	r4, r4, r5
   356f4:	10a4      	asrs	r4, r4, #2
   356f6:	42a6      	cmp	r6, r4
   356f8:	d105      	bne.n	35706 <__libc_init_array+0x2e>
   356fa:	bd70      	pop	{r4, r5, r6, pc}
   356fc:	00b3      	lsls	r3, r6, #2
   356fe:	58eb      	ldr	r3, [r5, r3]
   35700:	4798      	blx	r3
   35702:	3601      	adds	r6, #1
   35704:	e7ee      	b.n	356e4 <__libc_init_array+0xc>
   35706:	00b3      	lsls	r3, r6, #2
   35708:	58eb      	ldr	r3, [r5, r3]
   3570a:	4798      	blx	r3
   3570c:	3601      	adds	r6, #1
   3570e:	e7f2      	b.n	356f6 <__libc_init_array+0x1e>
   35710:	0003b284 	.word	0x0003b284
   35714:	0003b284 	.word	0x0003b284
   35718:	0003b284 	.word	0x0003b284
   3571c:	0003b288 	.word	0x0003b288

00035720 <malloc>:
   35720:	b510      	push	{r4, lr}
   35722:	4b03      	ldr	r3, [pc, #12]	; (35730 <malloc+0x10>)
   35724:	0001      	movs	r1, r0
   35726:	6818      	ldr	r0, [r3, #0]
   35728:	f000 f87c 	bl	35824 <_malloc_r>
   3572c:	bd10      	pop	{r4, pc}
   3572e:	46c0      	nop			; (mov r8, r8)
   35730:	20000130 	.word	0x20000130

00035734 <free>:
   35734:	b510      	push	{r4, lr}
   35736:	4b03      	ldr	r3, [pc, #12]	; (35744 <free+0x10>)
   35738:	0001      	movs	r1, r0
   3573a:	6818      	ldr	r0, [r3, #0]
   3573c:	f000 f828 	bl	35790 <_free_r>
   35740:	bd10      	pop	{r4, pc}
   35742:	46c0      	nop			; (mov r8, r8)
   35744:	20000130 	.word	0x20000130

00035748 <memcpy>:
   35748:	2300      	movs	r3, #0
   3574a:	b510      	push	{r4, lr}
   3574c:	429a      	cmp	r2, r3
   3574e:	d100      	bne.n	35752 <memcpy+0xa>
   35750:	bd10      	pop	{r4, pc}
   35752:	5ccc      	ldrb	r4, [r1, r3]
   35754:	54c4      	strb	r4, [r0, r3]
   35756:	3301      	adds	r3, #1
   35758:	e7f8      	b.n	3574c <memcpy+0x4>

0003575a <memmove>:
   3575a:	b510      	push	{r4, lr}
   3575c:	4288      	cmp	r0, r1
   3575e:	d902      	bls.n	35766 <memmove+0xc>
   35760:	188b      	adds	r3, r1, r2
   35762:	4298      	cmp	r0, r3
   35764:	d308      	bcc.n	35778 <memmove+0x1e>
   35766:	2300      	movs	r3, #0
   35768:	429a      	cmp	r2, r3
   3576a:	d007      	beq.n	3577c <memmove+0x22>
   3576c:	5ccc      	ldrb	r4, [r1, r3]
   3576e:	54c4      	strb	r4, [r0, r3]
   35770:	3301      	adds	r3, #1
   35772:	e7f9      	b.n	35768 <memmove+0xe>
   35774:	5c8b      	ldrb	r3, [r1, r2]
   35776:	5483      	strb	r3, [r0, r2]
   35778:	3a01      	subs	r2, #1
   3577a:	d2fb      	bcs.n	35774 <memmove+0x1a>
   3577c:	bd10      	pop	{r4, pc}

0003577e <memset>:
   3577e:	0003      	movs	r3, r0
   35780:	1882      	adds	r2, r0, r2
   35782:	4293      	cmp	r3, r2
   35784:	d100      	bne.n	35788 <memset+0xa>
   35786:	4770      	bx	lr
   35788:	7019      	strb	r1, [r3, #0]
   3578a:	3301      	adds	r3, #1
   3578c:	e7f9      	b.n	35782 <memset+0x4>
	...

00035790 <_free_r>:
   35790:	b570      	push	{r4, r5, r6, lr}
   35792:	0005      	movs	r5, r0
   35794:	2900      	cmp	r1, #0
   35796:	d010      	beq.n	357ba <_free_r+0x2a>
   35798:	1f0c      	subs	r4, r1, #4
   3579a:	6823      	ldr	r3, [r4, #0]
   3579c:	2b00      	cmp	r3, #0
   3579e:	da00      	bge.n	357a2 <_free_r+0x12>
   357a0:	18e4      	adds	r4, r4, r3
   357a2:	0028      	movs	r0, r5
   357a4:	f000 fdd8 	bl	36358 <__malloc_lock>
   357a8:	4a1d      	ldr	r2, [pc, #116]	; (35820 <_free_r+0x90>)
   357aa:	6813      	ldr	r3, [r2, #0]
   357ac:	2b00      	cmp	r3, #0
   357ae:	d105      	bne.n	357bc <_free_r+0x2c>
   357b0:	6063      	str	r3, [r4, #4]
   357b2:	6014      	str	r4, [r2, #0]
   357b4:	0028      	movs	r0, r5
   357b6:	f000 fdd0 	bl	3635a <__malloc_unlock>
   357ba:	bd70      	pop	{r4, r5, r6, pc}
   357bc:	42a3      	cmp	r3, r4
   357be:	d909      	bls.n	357d4 <_free_r+0x44>
   357c0:	6821      	ldr	r1, [r4, #0]
   357c2:	1860      	adds	r0, r4, r1
   357c4:	4283      	cmp	r3, r0
   357c6:	d1f3      	bne.n	357b0 <_free_r+0x20>
   357c8:	6818      	ldr	r0, [r3, #0]
   357ca:	685b      	ldr	r3, [r3, #4]
   357cc:	1841      	adds	r1, r0, r1
   357ce:	6021      	str	r1, [r4, #0]
   357d0:	e7ee      	b.n	357b0 <_free_r+0x20>
   357d2:	0013      	movs	r3, r2
   357d4:	685a      	ldr	r2, [r3, #4]
   357d6:	2a00      	cmp	r2, #0
   357d8:	d001      	beq.n	357de <_free_r+0x4e>
   357da:	42a2      	cmp	r2, r4
   357dc:	d9f9      	bls.n	357d2 <_free_r+0x42>
   357de:	6819      	ldr	r1, [r3, #0]
   357e0:	1858      	adds	r0, r3, r1
   357e2:	42a0      	cmp	r0, r4
   357e4:	d10b      	bne.n	357fe <_free_r+0x6e>
   357e6:	6820      	ldr	r0, [r4, #0]
   357e8:	1809      	adds	r1, r1, r0
   357ea:	1858      	adds	r0, r3, r1
   357ec:	6019      	str	r1, [r3, #0]
   357ee:	4282      	cmp	r2, r0
   357f0:	d1e0      	bne.n	357b4 <_free_r+0x24>
   357f2:	6810      	ldr	r0, [r2, #0]
   357f4:	6852      	ldr	r2, [r2, #4]
   357f6:	1841      	adds	r1, r0, r1
   357f8:	6019      	str	r1, [r3, #0]
   357fa:	605a      	str	r2, [r3, #4]
   357fc:	e7da      	b.n	357b4 <_free_r+0x24>
   357fe:	42a0      	cmp	r0, r4
   35800:	d902      	bls.n	35808 <_free_r+0x78>
   35802:	230c      	movs	r3, #12
   35804:	602b      	str	r3, [r5, #0]
   35806:	e7d5      	b.n	357b4 <_free_r+0x24>
   35808:	6821      	ldr	r1, [r4, #0]
   3580a:	1860      	adds	r0, r4, r1
   3580c:	4282      	cmp	r2, r0
   3580e:	d103      	bne.n	35818 <_free_r+0x88>
   35810:	6810      	ldr	r0, [r2, #0]
   35812:	6852      	ldr	r2, [r2, #4]
   35814:	1841      	adds	r1, r0, r1
   35816:	6021      	str	r1, [r4, #0]
   35818:	6062      	str	r2, [r4, #4]
   3581a:	605c      	str	r4, [r3, #4]
   3581c:	e7ca      	b.n	357b4 <_free_r+0x24>
   3581e:	46c0      	nop			; (mov r8, r8)
   35820:	20004728 	.word	0x20004728

00035824 <_malloc_r>:
   35824:	2303      	movs	r3, #3
   35826:	b570      	push	{r4, r5, r6, lr}
   35828:	1ccd      	adds	r5, r1, #3
   3582a:	439d      	bics	r5, r3
   3582c:	3508      	adds	r5, #8
   3582e:	0006      	movs	r6, r0
   35830:	2d0c      	cmp	r5, #12
   35832:	d21e      	bcs.n	35872 <_malloc_r+0x4e>
   35834:	250c      	movs	r5, #12
   35836:	42a9      	cmp	r1, r5
   35838:	d81d      	bhi.n	35876 <_malloc_r+0x52>
   3583a:	0030      	movs	r0, r6
   3583c:	f000 fd8c 	bl	36358 <__malloc_lock>
   35840:	4a25      	ldr	r2, [pc, #148]	; (358d8 <_malloc_r+0xb4>)
   35842:	6814      	ldr	r4, [r2, #0]
   35844:	0021      	movs	r1, r4
   35846:	2900      	cmp	r1, #0
   35848:	d119      	bne.n	3587e <_malloc_r+0x5a>
   3584a:	4c24      	ldr	r4, [pc, #144]	; (358dc <_malloc_r+0xb8>)
   3584c:	6823      	ldr	r3, [r4, #0]
   3584e:	2b00      	cmp	r3, #0
   35850:	d103      	bne.n	3585a <_malloc_r+0x36>
   35852:	0030      	movs	r0, r6
   35854:	f000 f8ae 	bl	359b4 <_sbrk_r>
   35858:	6020      	str	r0, [r4, #0]
   3585a:	0029      	movs	r1, r5
   3585c:	0030      	movs	r0, r6
   3585e:	f000 f8a9 	bl	359b4 <_sbrk_r>
   35862:	1c43      	adds	r3, r0, #1
   35864:	d12c      	bne.n	358c0 <_malloc_r+0x9c>
   35866:	230c      	movs	r3, #12
   35868:	0030      	movs	r0, r6
   3586a:	6033      	str	r3, [r6, #0]
   3586c:	f000 fd75 	bl	3635a <__malloc_unlock>
   35870:	e003      	b.n	3587a <_malloc_r+0x56>
   35872:	2d00      	cmp	r5, #0
   35874:	dadf      	bge.n	35836 <_malloc_r+0x12>
   35876:	230c      	movs	r3, #12
   35878:	6033      	str	r3, [r6, #0]
   3587a:	2000      	movs	r0, #0
   3587c:	bd70      	pop	{r4, r5, r6, pc}
   3587e:	680b      	ldr	r3, [r1, #0]
   35880:	1b5b      	subs	r3, r3, r5
   35882:	d41a      	bmi.n	358ba <_malloc_r+0x96>
   35884:	2b0b      	cmp	r3, #11
   35886:	d903      	bls.n	35890 <_malloc_r+0x6c>
   35888:	600b      	str	r3, [r1, #0]
   3588a:	18cc      	adds	r4, r1, r3
   3588c:	6025      	str	r5, [r4, #0]
   3588e:	e003      	b.n	35898 <_malloc_r+0x74>
   35890:	428c      	cmp	r4, r1
   35892:	d10e      	bne.n	358b2 <_malloc_r+0x8e>
   35894:	6863      	ldr	r3, [r4, #4]
   35896:	6013      	str	r3, [r2, #0]
   35898:	0030      	movs	r0, r6
   3589a:	f000 fd5e 	bl	3635a <__malloc_unlock>
   3589e:	0020      	movs	r0, r4
   358a0:	2207      	movs	r2, #7
   358a2:	300b      	adds	r0, #11
   358a4:	1d23      	adds	r3, r4, #4
   358a6:	4390      	bics	r0, r2
   358a8:	1ac3      	subs	r3, r0, r3
   358aa:	d0e7      	beq.n	3587c <_malloc_r+0x58>
   358ac:	425a      	negs	r2, r3
   358ae:	50e2      	str	r2, [r4, r3]
   358b0:	e7e4      	b.n	3587c <_malloc_r+0x58>
   358b2:	684b      	ldr	r3, [r1, #4]
   358b4:	6063      	str	r3, [r4, #4]
   358b6:	000c      	movs	r4, r1
   358b8:	e7ee      	b.n	35898 <_malloc_r+0x74>
   358ba:	000c      	movs	r4, r1
   358bc:	6849      	ldr	r1, [r1, #4]
   358be:	e7c2      	b.n	35846 <_malloc_r+0x22>
   358c0:	2303      	movs	r3, #3
   358c2:	1cc4      	adds	r4, r0, #3
   358c4:	439c      	bics	r4, r3
   358c6:	42a0      	cmp	r0, r4
   358c8:	d0e0      	beq.n	3588c <_malloc_r+0x68>
   358ca:	1a21      	subs	r1, r4, r0
   358cc:	0030      	movs	r0, r6
   358ce:	f000 f871 	bl	359b4 <_sbrk_r>
   358d2:	1c43      	adds	r3, r0, #1
   358d4:	d1da      	bne.n	3588c <_malloc_r+0x68>
   358d6:	e7c6      	b.n	35866 <_malloc_r+0x42>
   358d8:	20004728 	.word	0x20004728
   358dc:	2000472c 	.word	0x2000472c

000358e0 <_puts_r>:
   358e0:	b570      	push	{r4, r5, r6, lr}
   358e2:	0005      	movs	r5, r0
   358e4:	000e      	movs	r6, r1
   358e6:	2800      	cmp	r0, #0
   358e8:	d004      	beq.n	358f4 <_puts_r+0x14>
   358ea:	6983      	ldr	r3, [r0, #24]
   358ec:	2b00      	cmp	r3, #0
   358ee:	d101      	bne.n	358f4 <_puts_r+0x14>
   358f0:	f000 fc0e 	bl	36110 <__sinit>
   358f4:	69ab      	ldr	r3, [r5, #24]
   358f6:	68ac      	ldr	r4, [r5, #8]
   358f8:	2b00      	cmp	r3, #0
   358fa:	d102      	bne.n	35902 <_puts_r+0x22>
   358fc:	0028      	movs	r0, r5
   358fe:	f000 fc07 	bl	36110 <__sinit>
   35902:	4b24      	ldr	r3, [pc, #144]	; (35994 <_puts_r+0xb4>)
   35904:	429c      	cmp	r4, r3
   35906:	d10f      	bne.n	35928 <_puts_r+0x48>
   35908:	686c      	ldr	r4, [r5, #4]
   3590a:	89a3      	ldrh	r3, [r4, #12]
   3590c:	071b      	lsls	r3, r3, #28
   3590e:	d502      	bpl.n	35916 <_puts_r+0x36>
   35910:	6923      	ldr	r3, [r4, #16]
   35912:	2b00      	cmp	r3, #0
   35914:	d120      	bne.n	35958 <_puts_r+0x78>
   35916:	0021      	movs	r1, r4
   35918:	0028      	movs	r0, r5
   3591a:	f000 fa8b 	bl	35e34 <__swsetup_r>
   3591e:	2800      	cmp	r0, #0
   35920:	d01a      	beq.n	35958 <_puts_r+0x78>
   35922:	2001      	movs	r0, #1
   35924:	4240      	negs	r0, r0
   35926:	bd70      	pop	{r4, r5, r6, pc}
   35928:	4b1b      	ldr	r3, [pc, #108]	; (35998 <_puts_r+0xb8>)
   3592a:	429c      	cmp	r4, r3
   3592c:	d101      	bne.n	35932 <_puts_r+0x52>
   3592e:	68ac      	ldr	r4, [r5, #8]
   35930:	e7eb      	b.n	3590a <_puts_r+0x2a>
   35932:	4b1a      	ldr	r3, [pc, #104]	; (3599c <_puts_r+0xbc>)
   35934:	429c      	cmp	r4, r3
   35936:	d1e8      	bne.n	3590a <_puts_r+0x2a>
   35938:	68ec      	ldr	r4, [r5, #12]
   3593a:	e7e6      	b.n	3590a <_puts_r+0x2a>
   3593c:	3b01      	subs	r3, #1
   3593e:	3601      	adds	r6, #1
   35940:	60a3      	str	r3, [r4, #8]
   35942:	2b00      	cmp	r3, #0
   35944:	da04      	bge.n	35950 <_puts_r+0x70>
   35946:	69a2      	ldr	r2, [r4, #24]
   35948:	4293      	cmp	r3, r2
   3594a:	db16      	blt.n	3597a <_puts_r+0x9a>
   3594c:	290a      	cmp	r1, #10
   3594e:	d014      	beq.n	3597a <_puts_r+0x9a>
   35950:	6823      	ldr	r3, [r4, #0]
   35952:	1c5a      	adds	r2, r3, #1
   35954:	6022      	str	r2, [r4, #0]
   35956:	7019      	strb	r1, [r3, #0]
   35958:	7831      	ldrb	r1, [r6, #0]
   3595a:	68a3      	ldr	r3, [r4, #8]
   3595c:	2900      	cmp	r1, #0
   3595e:	d1ed      	bne.n	3593c <_puts_r+0x5c>
   35960:	3b01      	subs	r3, #1
   35962:	60a3      	str	r3, [r4, #8]
   35964:	2b00      	cmp	r3, #0
   35966:	da0f      	bge.n	35988 <_puts_r+0xa8>
   35968:	0022      	movs	r2, r4
   3596a:	310a      	adds	r1, #10
   3596c:	0028      	movs	r0, r5
   3596e:	f000 fa0b 	bl	35d88 <__swbuf_r>
   35972:	1c43      	adds	r3, r0, #1
   35974:	d0d5      	beq.n	35922 <_puts_r+0x42>
   35976:	200a      	movs	r0, #10
   35978:	e7d5      	b.n	35926 <_puts_r+0x46>
   3597a:	0022      	movs	r2, r4
   3597c:	0028      	movs	r0, r5
   3597e:	f000 fa03 	bl	35d88 <__swbuf_r>
   35982:	1c43      	adds	r3, r0, #1
   35984:	d1e8      	bne.n	35958 <_puts_r+0x78>
   35986:	e7cc      	b.n	35922 <_puts_r+0x42>
   35988:	200a      	movs	r0, #10
   3598a:	6823      	ldr	r3, [r4, #0]
   3598c:	1c5a      	adds	r2, r3, #1
   3598e:	6022      	str	r2, [r4, #0]
   35990:	7018      	strb	r0, [r3, #0]
   35992:	e7c8      	b.n	35926 <_puts_r+0x46>
   35994:	0003b0f8 	.word	0x0003b0f8
   35998:	0003b118 	.word	0x0003b118
   3599c:	0003b0d8 	.word	0x0003b0d8

000359a0 <puts>:
   359a0:	b510      	push	{r4, lr}
   359a2:	4b03      	ldr	r3, [pc, #12]	; (359b0 <puts+0x10>)
   359a4:	0001      	movs	r1, r0
   359a6:	6818      	ldr	r0, [r3, #0]
   359a8:	f7ff ff9a 	bl	358e0 <_puts_r>
   359ac:	bd10      	pop	{r4, pc}
   359ae:	46c0      	nop			; (mov r8, r8)
   359b0:	20000130 	.word	0x20000130

000359b4 <_sbrk_r>:
   359b4:	2300      	movs	r3, #0
   359b6:	b570      	push	{r4, r5, r6, lr}
   359b8:	4c06      	ldr	r4, [pc, #24]	; (359d4 <_sbrk_r+0x20>)
   359ba:	0005      	movs	r5, r0
   359bc:	0008      	movs	r0, r1
   359be:	6023      	str	r3, [r4, #0]
   359c0:	f7f6 fa9c 	bl	2befc <_sbrk>
   359c4:	1c43      	adds	r3, r0, #1
   359c6:	d103      	bne.n	359d0 <_sbrk_r+0x1c>
   359c8:	6823      	ldr	r3, [r4, #0]
   359ca:	2b00      	cmp	r3, #0
   359cc:	d000      	beq.n	359d0 <_sbrk_r+0x1c>
   359ce:	602b      	str	r3, [r5, #0]
   359d0:	bd70      	pop	{r4, r5, r6, pc}
   359d2:	46c0      	nop			; (mov r8, r8)
   359d4:	20005d20 	.word	0x20005d20

000359d8 <sniprintf>:
   359d8:	b40c      	push	{r2, r3}
   359da:	b530      	push	{r4, r5, lr}
   359dc:	4b16      	ldr	r3, [pc, #88]	; (35a38 <sniprintf+0x60>)
   359de:	b09d      	sub	sp, #116	; 0x74
   359e0:	1e0c      	subs	r4, r1, #0
   359e2:	681d      	ldr	r5, [r3, #0]
   359e4:	da08      	bge.n	359f8 <sniprintf+0x20>
   359e6:	238b      	movs	r3, #139	; 0x8b
   359e8:	2001      	movs	r0, #1
   359ea:	602b      	str	r3, [r5, #0]
   359ec:	4240      	negs	r0, r0
   359ee:	b01d      	add	sp, #116	; 0x74
   359f0:	bc30      	pop	{r4, r5}
   359f2:	bc08      	pop	{r3}
   359f4:	b002      	add	sp, #8
   359f6:	4718      	bx	r3
   359f8:	2382      	movs	r3, #130	; 0x82
   359fa:	a902      	add	r1, sp, #8
   359fc:	009b      	lsls	r3, r3, #2
   359fe:	818b      	strh	r3, [r1, #12]
   35a00:	2300      	movs	r3, #0
   35a02:	9002      	str	r0, [sp, #8]
   35a04:	6108      	str	r0, [r1, #16]
   35a06:	429c      	cmp	r4, r3
   35a08:	d000      	beq.n	35a0c <sniprintf+0x34>
   35a0a:	1e63      	subs	r3, r4, #1
   35a0c:	608b      	str	r3, [r1, #8]
   35a0e:	614b      	str	r3, [r1, #20]
   35a10:	2301      	movs	r3, #1
   35a12:	425b      	negs	r3, r3
   35a14:	81cb      	strh	r3, [r1, #14]
   35a16:	9a20      	ldr	r2, [sp, #128]	; 0x80
   35a18:	ab21      	add	r3, sp, #132	; 0x84
   35a1a:	0028      	movs	r0, r5
   35a1c:	9301      	str	r3, [sp, #4]
   35a1e:	f000 fcff 	bl	36420 <_svfiprintf_r>
   35a22:	1c43      	adds	r3, r0, #1
   35a24:	da01      	bge.n	35a2a <sniprintf+0x52>
   35a26:	238b      	movs	r3, #139	; 0x8b
   35a28:	602b      	str	r3, [r5, #0]
   35a2a:	2c00      	cmp	r4, #0
   35a2c:	d0df      	beq.n	359ee <sniprintf+0x16>
   35a2e:	2300      	movs	r3, #0
   35a30:	9a02      	ldr	r2, [sp, #8]
   35a32:	7013      	strb	r3, [r2, #0]
   35a34:	e7db      	b.n	359ee <sniprintf+0x16>
   35a36:	46c0      	nop			; (mov r8, r8)
   35a38:	20000130 	.word	0x20000130

00035a3c <siprintf>:
   35a3c:	b40e      	push	{r1, r2, r3}
   35a3e:	b510      	push	{r4, lr}
   35a40:	b09d      	sub	sp, #116	; 0x74
   35a42:	a902      	add	r1, sp, #8
   35a44:	9002      	str	r0, [sp, #8]
   35a46:	6108      	str	r0, [r1, #16]
   35a48:	480b      	ldr	r0, [pc, #44]	; (35a78 <siprintf+0x3c>)
   35a4a:	2482      	movs	r4, #130	; 0x82
   35a4c:	6088      	str	r0, [r1, #8]
   35a4e:	6148      	str	r0, [r1, #20]
   35a50:	2001      	movs	r0, #1
   35a52:	4240      	negs	r0, r0
   35a54:	ab1f      	add	r3, sp, #124	; 0x7c
   35a56:	81c8      	strh	r0, [r1, #14]
   35a58:	4808      	ldr	r0, [pc, #32]	; (35a7c <siprintf+0x40>)
   35a5a:	cb04      	ldmia	r3!, {r2}
   35a5c:	00a4      	lsls	r4, r4, #2
   35a5e:	6800      	ldr	r0, [r0, #0]
   35a60:	9301      	str	r3, [sp, #4]
   35a62:	818c      	strh	r4, [r1, #12]
   35a64:	f000 fcdc 	bl	36420 <_svfiprintf_r>
   35a68:	2300      	movs	r3, #0
   35a6a:	9a02      	ldr	r2, [sp, #8]
   35a6c:	7013      	strb	r3, [r2, #0]
   35a6e:	b01d      	add	sp, #116	; 0x74
   35a70:	bc10      	pop	{r4}
   35a72:	bc08      	pop	{r3}
   35a74:	b003      	add	sp, #12
   35a76:	4718      	bx	r3
   35a78:	7fffffff 	.word	0x7fffffff
   35a7c:	20000130 	.word	0x20000130

00035a80 <strcasecmp>:
   35a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35a82:	0007      	movs	r7, r0
   35a84:	000e      	movs	r6, r1
   35a86:	783c      	ldrb	r4, [r7, #0]
   35a88:	f000 fbda 	bl	36240 <__locale_ctype_ptr>
   35a8c:	2203      	movs	r2, #3
   35a8e:	1900      	adds	r0, r0, r4
   35a90:	7843      	ldrb	r3, [r0, #1]
   35a92:	4013      	ands	r3, r2
   35a94:	2b01      	cmp	r3, #1
   35a96:	d100      	bne.n	35a9a <strcasecmp+0x1a>
   35a98:	3420      	adds	r4, #32
   35a9a:	7835      	ldrb	r5, [r6, #0]
   35a9c:	f000 fbd0 	bl	36240 <__locale_ctype_ptr>
   35aa0:	2203      	movs	r2, #3
   35aa2:	1940      	adds	r0, r0, r5
   35aa4:	7843      	ldrb	r3, [r0, #1]
   35aa6:	4013      	ands	r3, r2
   35aa8:	2b01      	cmp	r3, #1
   35aaa:	d100      	bne.n	35aae <strcasecmp+0x2e>
   35aac:	3520      	adds	r5, #32
   35aae:	1b60      	subs	r0, r4, r5
   35ab0:	d103      	bne.n	35aba <strcasecmp+0x3a>
   35ab2:	3701      	adds	r7, #1
   35ab4:	3601      	adds	r6, #1
   35ab6:	2d00      	cmp	r5, #0
   35ab8:	d1e5      	bne.n	35a86 <strcasecmp+0x6>
   35aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035abc <strcat>:
   35abc:	0002      	movs	r2, r0
   35abe:	b510      	push	{r4, lr}
   35ac0:	7813      	ldrb	r3, [r2, #0]
   35ac2:	2b00      	cmp	r3, #0
   35ac4:	d105      	bne.n	35ad2 <strcat+0x16>
   35ac6:	5ccc      	ldrb	r4, [r1, r3]
   35ac8:	54d4      	strb	r4, [r2, r3]
   35aca:	3301      	adds	r3, #1
   35acc:	2c00      	cmp	r4, #0
   35ace:	d1fa      	bne.n	35ac6 <strcat+0xa>
   35ad0:	bd10      	pop	{r4, pc}
   35ad2:	3201      	adds	r2, #1
   35ad4:	e7f4      	b.n	35ac0 <strcat+0x4>

00035ad6 <strcmp>:
   35ad6:	7802      	ldrb	r2, [r0, #0]
   35ad8:	780b      	ldrb	r3, [r1, #0]
   35ada:	2a00      	cmp	r2, #0
   35adc:	d003      	beq.n	35ae6 <strcmp+0x10>
   35ade:	3001      	adds	r0, #1
   35ae0:	3101      	adds	r1, #1
   35ae2:	429a      	cmp	r2, r3
   35ae4:	d0f7      	beq.n	35ad6 <strcmp>
   35ae6:	1ad0      	subs	r0, r2, r3
   35ae8:	4770      	bx	lr

00035aea <strcpy>:
   35aea:	1c03      	adds	r3, r0, #0
   35aec:	780a      	ldrb	r2, [r1, #0]
   35aee:	3101      	adds	r1, #1
   35af0:	701a      	strb	r2, [r3, #0]
   35af2:	3301      	adds	r3, #1
   35af4:	2a00      	cmp	r2, #0
   35af6:	d1f9      	bne.n	35aec <strcpy+0x2>
   35af8:	4770      	bx	lr
	...

00035afc <strdup>:
   35afc:	b510      	push	{r4, lr}
   35afe:	4b03      	ldr	r3, [pc, #12]	; (35b0c <strdup+0x10>)
   35b00:	0001      	movs	r1, r0
   35b02:	6818      	ldr	r0, [r3, #0]
   35b04:	f000 f804 	bl	35b10 <_strdup_r>
   35b08:	bd10      	pop	{r4, pc}
   35b0a:	46c0      	nop			; (mov r8, r8)
   35b0c:	20000130 	.word	0x20000130

00035b10 <_strdup_r>:
   35b10:	b570      	push	{r4, r5, r6, lr}
   35b12:	0005      	movs	r5, r0
   35b14:	0008      	movs	r0, r1
   35b16:	000e      	movs	r6, r1
   35b18:	f000 f80d 	bl	35b36 <strlen>
   35b1c:	1c44      	adds	r4, r0, #1
   35b1e:	0021      	movs	r1, r4
   35b20:	0028      	movs	r0, r5
   35b22:	f7ff fe7f 	bl	35824 <_malloc_r>
   35b26:	1e05      	subs	r5, r0, #0
   35b28:	d003      	beq.n	35b32 <_strdup_r+0x22>
   35b2a:	0022      	movs	r2, r4
   35b2c:	0031      	movs	r1, r6
   35b2e:	f7ff fe0b 	bl	35748 <memcpy>
   35b32:	0028      	movs	r0, r5
   35b34:	bd70      	pop	{r4, r5, r6, pc}

00035b36 <strlen>:
   35b36:	2300      	movs	r3, #0
   35b38:	5cc2      	ldrb	r2, [r0, r3]
   35b3a:	3301      	adds	r3, #1
   35b3c:	2a00      	cmp	r2, #0
   35b3e:	d1fb      	bne.n	35b38 <strlen+0x2>
   35b40:	1e58      	subs	r0, r3, #1
   35b42:	4770      	bx	lr

00035b44 <strncmp>:
   35b44:	2300      	movs	r3, #0
   35b46:	b530      	push	{r4, r5, lr}
   35b48:	429a      	cmp	r2, r3
   35b4a:	d00a      	beq.n	35b62 <strncmp+0x1e>
   35b4c:	3a01      	subs	r2, #1
   35b4e:	5cc4      	ldrb	r4, [r0, r3]
   35b50:	5ccd      	ldrb	r5, [r1, r3]
   35b52:	42ac      	cmp	r4, r5
   35b54:	d104      	bne.n	35b60 <strncmp+0x1c>
   35b56:	429a      	cmp	r2, r3
   35b58:	d002      	beq.n	35b60 <strncmp+0x1c>
   35b5a:	3301      	adds	r3, #1
   35b5c:	2c00      	cmp	r4, #0
   35b5e:	d1f6      	bne.n	35b4e <strncmp+0xa>
   35b60:	1b63      	subs	r3, r4, r5
   35b62:	0018      	movs	r0, r3
   35b64:	bd30      	pop	{r4, r5, pc}

00035b66 <strncpy>:
   35b66:	b570      	push	{r4, r5, r6, lr}
   35b68:	0004      	movs	r4, r0
   35b6a:	2a00      	cmp	r2, #0
   35b6c:	d100      	bne.n	35b70 <strncpy+0xa>
   35b6e:	bd70      	pop	{r4, r5, r6, pc}
   35b70:	780d      	ldrb	r5, [r1, #0]
   35b72:	1e56      	subs	r6, r2, #1
   35b74:	1c63      	adds	r3, r4, #1
   35b76:	7025      	strb	r5, [r4, #0]
   35b78:	3101      	adds	r1, #1
   35b7a:	2d00      	cmp	r5, #0
   35b7c:	d105      	bne.n	35b8a <strncpy+0x24>
   35b7e:	18a4      	adds	r4, r4, r2
   35b80:	429c      	cmp	r4, r3
   35b82:	d0f4      	beq.n	35b6e <strncpy+0x8>
   35b84:	701d      	strb	r5, [r3, #0]
   35b86:	3301      	adds	r3, #1
   35b88:	e7fa      	b.n	35b80 <strncpy+0x1a>
   35b8a:	001c      	movs	r4, r3
   35b8c:	0032      	movs	r2, r6
   35b8e:	e7ec      	b.n	35b6a <strncpy+0x4>

00035b90 <strrchr>:
   35b90:	b570      	push	{r4, r5, r6, lr}
   35b92:	000d      	movs	r5, r1
   35b94:	2400      	movs	r4, #0
   35b96:	2900      	cmp	r1, #0
   35b98:	d105      	bne.n	35ba6 <strrchr+0x16>
   35b9a:	f000 ff19 	bl	369d0 <strchr>
   35b9e:	0004      	movs	r4, r0
   35ba0:	e006      	b.n	35bb0 <strrchr+0x20>
   35ba2:	001c      	movs	r4, r3
   35ba4:	1c58      	adds	r0, r3, #1
   35ba6:	0029      	movs	r1, r5
   35ba8:	f000 ff12 	bl	369d0 <strchr>
   35bac:	1e03      	subs	r3, r0, #0
   35bae:	d1f8      	bne.n	35ba2 <strrchr+0x12>
   35bb0:	0020      	movs	r0, r4
   35bb2:	bd70      	pop	{r4, r5, r6, pc}

00035bb4 <strstr>:
   35bb4:	b510      	push	{r4, lr}
   35bb6:	0002      	movs	r2, r0
   35bb8:	7800      	ldrb	r0, [r0, #0]
   35bba:	2800      	cmp	r0, #0
   35bbc:	d104      	bne.n	35bc8 <strstr+0x14>
   35bbe:	7809      	ldrb	r1, [r1, #0]
   35bc0:	2900      	cmp	r1, #0
   35bc2:	d00d      	beq.n	35be0 <strstr+0x2c>
   35bc4:	bd10      	pop	{r4, pc}
   35bc6:	3201      	adds	r2, #1
   35bc8:	7810      	ldrb	r0, [r2, #0]
   35bca:	2800      	cmp	r0, #0
   35bcc:	d0fa      	beq.n	35bc4 <strstr+0x10>
   35bce:	2300      	movs	r3, #0
   35bd0:	5cc8      	ldrb	r0, [r1, r3]
   35bd2:	2800      	cmp	r0, #0
   35bd4:	d004      	beq.n	35be0 <strstr+0x2c>
   35bd6:	5cd4      	ldrb	r4, [r2, r3]
   35bd8:	4284      	cmp	r4, r0
   35bda:	d1f4      	bne.n	35bc6 <strstr+0x12>
   35bdc:	3301      	adds	r3, #1
   35bde:	e7f7      	b.n	35bd0 <strstr+0x1c>
   35be0:	0010      	movs	r0, r2
   35be2:	e7ef      	b.n	35bc4 <strstr+0x10>

00035be4 <_strtol_l.isra.0>:
   35be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   35be6:	001f      	movs	r7, r3
   35be8:	000e      	movs	r6, r1
   35bea:	b087      	sub	sp, #28
   35bec:	9005      	str	r0, [sp, #20]
   35bee:	9103      	str	r1, [sp, #12]
   35bf0:	9202      	str	r2, [sp, #8]
   35bf2:	980c      	ldr	r0, [sp, #48]	; 0x30
   35bf4:	7834      	ldrb	r4, [r6, #0]
   35bf6:	f000 fb20 	bl	3623a <__locale_ctype_ptr_l>
   35bfa:	2208      	movs	r2, #8
   35bfc:	1900      	adds	r0, r0, r4
   35bfe:	7843      	ldrb	r3, [r0, #1]
   35c00:	1c75      	adds	r5, r6, #1
   35c02:	4013      	ands	r3, r2
   35c04:	d10c      	bne.n	35c20 <_strtol_l.isra.0+0x3c>
   35c06:	2c2d      	cmp	r4, #45	; 0x2d
   35c08:	d10c      	bne.n	35c24 <_strtol_l.isra.0+0x40>
   35c0a:	3301      	adds	r3, #1
   35c0c:	782c      	ldrb	r4, [r5, #0]
   35c0e:	9301      	str	r3, [sp, #4]
   35c10:	1cb5      	adds	r5, r6, #2
   35c12:	2f00      	cmp	r7, #0
   35c14:	d00c      	beq.n	35c30 <_strtol_l.isra.0+0x4c>
   35c16:	2f10      	cmp	r7, #16
   35c18:	d114      	bne.n	35c44 <_strtol_l.isra.0+0x60>
   35c1a:	2c30      	cmp	r4, #48	; 0x30
   35c1c:	d00a      	beq.n	35c34 <_strtol_l.isra.0+0x50>
   35c1e:	e011      	b.n	35c44 <_strtol_l.isra.0+0x60>
   35c20:	002e      	movs	r6, r5
   35c22:	e7e6      	b.n	35bf2 <_strtol_l.isra.0+0xe>
   35c24:	9301      	str	r3, [sp, #4]
   35c26:	2c2b      	cmp	r4, #43	; 0x2b
   35c28:	d1f3      	bne.n	35c12 <_strtol_l.isra.0+0x2e>
   35c2a:	782c      	ldrb	r4, [r5, #0]
   35c2c:	1cb5      	adds	r5, r6, #2
   35c2e:	e7f0      	b.n	35c12 <_strtol_l.isra.0+0x2e>
   35c30:	2c30      	cmp	r4, #48	; 0x30
   35c32:	d12f      	bne.n	35c94 <_strtol_l.isra.0+0xb0>
   35c34:	2220      	movs	r2, #32
   35c36:	782b      	ldrb	r3, [r5, #0]
   35c38:	4393      	bics	r3, r2
   35c3a:	2b58      	cmp	r3, #88	; 0x58
   35c3c:	d151      	bne.n	35ce2 <_strtol_l.isra.0+0xfe>
   35c3e:	2710      	movs	r7, #16
   35c40:	786c      	ldrb	r4, [r5, #1]
   35c42:	3502      	adds	r5, #2
   35c44:	9b01      	ldr	r3, [sp, #4]
   35c46:	4a29      	ldr	r2, [pc, #164]	; (35cec <_strtol_l.isra.0+0x108>)
   35c48:	0039      	movs	r1, r7
   35c4a:	189e      	adds	r6, r3, r2
   35c4c:	0030      	movs	r0, r6
   35c4e:	f7fd fe2f 	bl	338b0 <__aeabi_uidivmod>
   35c52:	0030      	movs	r0, r6
   35c54:	9104      	str	r1, [sp, #16]
   35c56:	0039      	movs	r1, r7
   35c58:	f7fd fda4 	bl	337a4 <__udivsi3>
   35c5c:	2101      	movs	r1, #1
   35c5e:	2300      	movs	r3, #0
   35c60:	4249      	negs	r1, r1
   35c62:	0002      	movs	r2, r0
   35c64:	468c      	mov	ip, r1
   35c66:	0018      	movs	r0, r3
   35c68:	0021      	movs	r1, r4
   35c6a:	3930      	subs	r1, #48	; 0x30
   35c6c:	2909      	cmp	r1, #9
   35c6e:	d813      	bhi.n	35c98 <_strtol_l.isra.0+0xb4>
   35c70:	000c      	movs	r4, r1
   35c72:	42a7      	cmp	r7, r4
   35c74:	dd1c      	ble.n	35cb0 <_strtol_l.isra.0+0xcc>
   35c76:	1c59      	adds	r1, r3, #1
   35c78:	d009      	beq.n	35c8e <_strtol_l.isra.0+0xaa>
   35c7a:	4663      	mov	r3, ip
   35c7c:	4282      	cmp	r2, r0
   35c7e:	d306      	bcc.n	35c8e <_strtol_l.isra.0+0xaa>
   35c80:	d102      	bne.n	35c88 <_strtol_l.isra.0+0xa4>
   35c82:	9904      	ldr	r1, [sp, #16]
   35c84:	42a1      	cmp	r1, r4
   35c86:	db02      	blt.n	35c8e <_strtol_l.isra.0+0xaa>
   35c88:	2301      	movs	r3, #1
   35c8a:	4378      	muls	r0, r7
   35c8c:	1820      	adds	r0, r4, r0
   35c8e:	782c      	ldrb	r4, [r5, #0]
   35c90:	3501      	adds	r5, #1
   35c92:	e7e9      	b.n	35c68 <_strtol_l.isra.0+0x84>
   35c94:	270a      	movs	r7, #10
   35c96:	e7d5      	b.n	35c44 <_strtol_l.isra.0+0x60>
   35c98:	0021      	movs	r1, r4
   35c9a:	3941      	subs	r1, #65	; 0x41
   35c9c:	2919      	cmp	r1, #25
   35c9e:	d801      	bhi.n	35ca4 <_strtol_l.isra.0+0xc0>
   35ca0:	3c37      	subs	r4, #55	; 0x37
   35ca2:	e7e6      	b.n	35c72 <_strtol_l.isra.0+0x8e>
   35ca4:	0021      	movs	r1, r4
   35ca6:	3961      	subs	r1, #97	; 0x61
   35ca8:	2919      	cmp	r1, #25
   35caa:	d801      	bhi.n	35cb0 <_strtol_l.isra.0+0xcc>
   35cac:	3c57      	subs	r4, #87	; 0x57
   35cae:	e7e0      	b.n	35c72 <_strtol_l.isra.0+0x8e>
   35cb0:	1c5a      	adds	r2, r3, #1
   35cb2:	d108      	bne.n	35cc6 <_strtol_l.isra.0+0xe2>
   35cb4:	9a05      	ldr	r2, [sp, #20]
   35cb6:	3323      	adds	r3, #35	; 0x23
   35cb8:	6013      	str	r3, [r2, #0]
   35cba:	9b02      	ldr	r3, [sp, #8]
   35cbc:	0030      	movs	r0, r6
   35cbe:	2b00      	cmp	r3, #0
   35cc0:	d10b      	bne.n	35cda <_strtol_l.isra.0+0xf6>
   35cc2:	b007      	add	sp, #28
   35cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35cc6:	9a01      	ldr	r2, [sp, #4]
   35cc8:	2a00      	cmp	r2, #0
   35cca:	d000      	beq.n	35cce <_strtol_l.isra.0+0xea>
   35ccc:	4240      	negs	r0, r0
   35cce:	9a02      	ldr	r2, [sp, #8]
   35cd0:	2a00      	cmp	r2, #0
   35cd2:	d0f6      	beq.n	35cc2 <_strtol_l.isra.0+0xde>
   35cd4:	9a03      	ldr	r2, [sp, #12]
   35cd6:	2b00      	cmp	r3, #0
   35cd8:	d000      	beq.n	35cdc <_strtol_l.isra.0+0xf8>
   35cda:	1e6a      	subs	r2, r5, #1
   35cdc:	9b02      	ldr	r3, [sp, #8]
   35cde:	601a      	str	r2, [r3, #0]
   35ce0:	e7ef      	b.n	35cc2 <_strtol_l.isra.0+0xde>
   35ce2:	2430      	movs	r4, #48	; 0x30
   35ce4:	2f00      	cmp	r7, #0
   35ce6:	d1ad      	bne.n	35c44 <_strtol_l.isra.0+0x60>
   35ce8:	3708      	adds	r7, #8
   35cea:	e7ab      	b.n	35c44 <_strtol_l.isra.0+0x60>
   35cec:	7fffffff 	.word	0x7fffffff

00035cf0 <strtol>:
   35cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35cf2:	0013      	movs	r3, r2
   35cf4:	4a06      	ldr	r2, [pc, #24]	; (35d10 <strtol+0x20>)
   35cf6:	0005      	movs	r5, r0
   35cf8:	6810      	ldr	r0, [r2, #0]
   35cfa:	6a04      	ldr	r4, [r0, #32]
   35cfc:	2c00      	cmp	r4, #0
   35cfe:	d100      	bne.n	35d02 <strtol+0x12>
   35d00:	4c04      	ldr	r4, [pc, #16]	; (35d14 <strtol+0x24>)
   35d02:	000a      	movs	r2, r1
   35d04:	9400      	str	r4, [sp, #0]
   35d06:	0029      	movs	r1, r5
   35d08:	f7ff ff6c 	bl	35be4 <_strtol_l.isra.0>
   35d0c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   35d0e:	46c0      	nop			; (mov r8, r8)
   35d10:	20000130 	.word	0x20000130
   35d14:	20000194 	.word	0x20000194

00035d18 <_vsniprintf_r>:
   35d18:	b530      	push	{r4, r5, lr}
   35d1a:	0014      	movs	r4, r2
   35d1c:	b09b      	sub	sp, #108	; 0x6c
   35d1e:	0005      	movs	r5, r0
   35d20:	001a      	movs	r2, r3
   35d22:	2c00      	cmp	r4, #0
   35d24:	da05      	bge.n	35d32 <_vsniprintf_r+0x1a>
   35d26:	238b      	movs	r3, #139	; 0x8b
   35d28:	6003      	str	r3, [r0, #0]
   35d2a:	2001      	movs	r0, #1
   35d2c:	4240      	negs	r0, r0
   35d2e:	b01b      	add	sp, #108	; 0x6c
   35d30:	bd30      	pop	{r4, r5, pc}
   35d32:	2382      	movs	r3, #130	; 0x82
   35d34:	4668      	mov	r0, sp
   35d36:	009b      	lsls	r3, r3, #2
   35d38:	8183      	strh	r3, [r0, #12]
   35d3a:	2300      	movs	r3, #0
   35d3c:	9100      	str	r1, [sp, #0]
   35d3e:	9104      	str	r1, [sp, #16]
   35d40:	429c      	cmp	r4, r3
   35d42:	d000      	beq.n	35d46 <_vsniprintf_r+0x2e>
   35d44:	1e63      	subs	r3, r4, #1
   35d46:	9302      	str	r3, [sp, #8]
   35d48:	9305      	str	r3, [sp, #20]
   35d4a:	2301      	movs	r3, #1
   35d4c:	4669      	mov	r1, sp
   35d4e:	425b      	negs	r3, r3
   35d50:	81cb      	strh	r3, [r1, #14]
   35d52:	0028      	movs	r0, r5
   35d54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35d56:	f000 fb63 	bl	36420 <_svfiprintf_r>
   35d5a:	1c43      	adds	r3, r0, #1
   35d5c:	da01      	bge.n	35d62 <_vsniprintf_r+0x4a>
   35d5e:	238b      	movs	r3, #139	; 0x8b
   35d60:	602b      	str	r3, [r5, #0]
   35d62:	2c00      	cmp	r4, #0
   35d64:	d0e3      	beq.n	35d2e <_vsniprintf_r+0x16>
   35d66:	2300      	movs	r3, #0
   35d68:	9a00      	ldr	r2, [sp, #0]
   35d6a:	7013      	strb	r3, [r2, #0]
   35d6c:	e7df      	b.n	35d2e <_vsniprintf_r+0x16>
	...

00035d70 <vsniprintf>:
   35d70:	b507      	push	{r0, r1, r2, lr}
   35d72:	9300      	str	r3, [sp, #0]
   35d74:	0013      	movs	r3, r2
   35d76:	000a      	movs	r2, r1
   35d78:	0001      	movs	r1, r0
   35d7a:	4802      	ldr	r0, [pc, #8]	; (35d84 <vsniprintf+0x14>)
   35d7c:	6800      	ldr	r0, [r0, #0]
   35d7e:	f7ff ffcb 	bl	35d18 <_vsniprintf_r>
   35d82:	bd0e      	pop	{r1, r2, r3, pc}
   35d84:	20000130 	.word	0x20000130

00035d88 <__swbuf_r>:
   35d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35d8a:	0005      	movs	r5, r0
   35d8c:	000e      	movs	r6, r1
   35d8e:	0014      	movs	r4, r2
   35d90:	2800      	cmp	r0, #0
   35d92:	d004      	beq.n	35d9e <__swbuf_r+0x16>
   35d94:	6983      	ldr	r3, [r0, #24]
   35d96:	2b00      	cmp	r3, #0
   35d98:	d101      	bne.n	35d9e <__swbuf_r+0x16>
   35d9a:	f000 f9b9 	bl	36110 <__sinit>
   35d9e:	4b22      	ldr	r3, [pc, #136]	; (35e28 <__swbuf_r+0xa0>)
   35da0:	429c      	cmp	r4, r3
   35da2:	d12d      	bne.n	35e00 <__swbuf_r+0x78>
   35da4:	686c      	ldr	r4, [r5, #4]
   35da6:	69a3      	ldr	r3, [r4, #24]
   35da8:	60a3      	str	r3, [r4, #8]
   35daa:	89a3      	ldrh	r3, [r4, #12]
   35dac:	071b      	lsls	r3, r3, #28
   35dae:	d531      	bpl.n	35e14 <__swbuf_r+0x8c>
   35db0:	6923      	ldr	r3, [r4, #16]
   35db2:	2b00      	cmp	r3, #0
   35db4:	d02e      	beq.n	35e14 <__swbuf_r+0x8c>
   35db6:	6823      	ldr	r3, [r4, #0]
   35db8:	6922      	ldr	r2, [r4, #16]
   35dba:	b2f7      	uxtb	r7, r6
   35dbc:	1a98      	subs	r0, r3, r2
   35dbe:	6963      	ldr	r3, [r4, #20]
   35dc0:	b2f6      	uxtb	r6, r6
   35dc2:	4298      	cmp	r0, r3
   35dc4:	db05      	blt.n	35dd2 <__swbuf_r+0x4a>
   35dc6:	0021      	movs	r1, r4
   35dc8:	0028      	movs	r0, r5
   35dca:	f000 f933 	bl	36034 <_fflush_r>
   35dce:	2800      	cmp	r0, #0
   35dd0:	d126      	bne.n	35e20 <__swbuf_r+0x98>
   35dd2:	68a3      	ldr	r3, [r4, #8]
   35dd4:	3001      	adds	r0, #1
   35dd6:	3b01      	subs	r3, #1
   35dd8:	60a3      	str	r3, [r4, #8]
   35dda:	6823      	ldr	r3, [r4, #0]
   35ddc:	1c5a      	adds	r2, r3, #1
   35dde:	6022      	str	r2, [r4, #0]
   35de0:	701f      	strb	r7, [r3, #0]
   35de2:	6963      	ldr	r3, [r4, #20]
   35de4:	4298      	cmp	r0, r3
   35de6:	d004      	beq.n	35df2 <__swbuf_r+0x6a>
   35de8:	89a3      	ldrh	r3, [r4, #12]
   35dea:	07db      	lsls	r3, r3, #31
   35dec:	d51a      	bpl.n	35e24 <__swbuf_r+0x9c>
   35dee:	2e0a      	cmp	r6, #10
   35df0:	d118      	bne.n	35e24 <__swbuf_r+0x9c>
   35df2:	0021      	movs	r1, r4
   35df4:	0028      	movs	r0, r5
   35df6:	f000 f91d 	bl	36034 <_fflush_r>
   35dfa:	2800      	cmp	r0, #0
   35dfc:	d012      	beq.n	35e24 <__swbuf_r+0x9c>
   35dfe:	e00f      	b.n	35e20 <__swbuf_r+0x98>
   35e00:	4b0a      	ldr	r3, [pc, #40]	; (35e2c <__swbuf_r+0xa4>)
   35e02:	429c      	cmp	r4, r3
   35e04:	d101      	bne.n	35e0a <__swbuf_r+0x82>
   35e06:	68ac      	ldr	r4, [r5, #8]
   35e08:	e7cd      	b.n	35da6 <__swbuf_r+0x1e>
   35e0a:	4b09      	ldr	r3, [pc, #36]	; (35e30 <__swbuf_r+0xa8>)
   35e0c:	429c      	cmp	r4, r3
   35e0e:	d1ca      	bne.n	35da6 <__swbuf_r+0x1e>
   35e10:	68ec      	ldr	r4, [r5, #12]
   35e12:	e7c8      	b.n	35da6 <__swbuf_r+0x1e>
   35e14:	0021      	movs	r1, r4
   35e16:	0028      	movs	r0, r5
   35e18:	f000 f80c 	bl	35e34 <__swsetup_r>
   35e1c:	2800      	cmp	r0, #0
   35e1e:	d0ca      	beq.n	35db6 <__swbuf_r+0x2e>
   35e20:	2601      	movs	r6, #1
   35e22:	4276      	negs	r6, r6
   35e24:	0030      	movs	r0, r6
   35e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35e28:	0003b0f8 	.word	0x0003b0f8
   35e2c:	0003b118 	.word	0x0003b118
   35e30:	0003b0d8 	.word	0x0003b0d8

00035e34 <__swsetup_r>:
   35e34:	4b36      	ldr	r3, [pc, #216]	; (35f10 <__swsetup_r+0xdc>)
   35e36:	b570      	push	{r4, r5, r6, lr}
   35e38:	681d      	ldr	r5, [r3, #0]
   35e3a:	0006      	movs	r6, r0
   35e3c:	000c      	movs	r4, r1
   35e3e:	2d00      	cmp	r5, #0
   35e40:	d005      	beq.n	35e4e <__swsetup_r+0x1a>
   35e42:	69ab      	ldr	r3, [r5, #24]
   35e44:	2b00      	cmp	r3, #0
   35e46:	d102      	bne.n	35e4e <__swsetup_r+0x1a>
   35e48:	0028      	movs	r0, r5
   35e4a:	f000 f961 	bl	36110 <__sinit>
   35e4e:	4b31      	ldr	r3, [pc, #196]	; (35f14 <__swsetup_r+0xe0>)
   35e50:	429c      	cmp	r4, r3
   35e52:	d10f      	bne.n	35e74 <__swsetup_r+0x40>
   35e54:	686c      	ldr	r4, [r5, #4]
   35e56:	230c      	movs	r3, #12
   35e58:	5ee2      	ldrsh	r2, [r4, r3]
   35e5a:	b293      	uxth	r3, r2
   35e5c:	0719      	lsls	r1, r3, #28
   35e5e:	d42d      	bmi.n	35ebc <__swsetup_r+0x88>
   35e60:	06d9      	lsls	r1, r3, #27
   35e62:	d411      	bmi.n	35e88 <__swsetup_r+0x54>
   35e64:	2309      	movs	r3, #9
   35e66:	2001      	movs	r0, #1
   35e68:	6033      	str	r3, [r6, #0]
   35e6a:	3337      	adds	r3, #55	; 0x37
   35e6c:	4313      	orrs	r3, r2
   35e6e:	81a3      	strh	r3, [r4, #12]
   35e70:	4240      	negs	r0, r0
   35e72:	bd70      	pop	{r4, r5, r6, pc}
   35e74:	4b28      	ldr	r3, [pc, #160]	; (35f18 <__swsetup_r+0xe4>)
   35e76:	429c      	cmp	r4, r3
   35e78:	d101      	bne.n	35e7e <__swsetup_r+0x4a>
   35e7a:	68ac      	ldr	r4, [r5, #8]
   35e7c:	e7eb      	b.n	35e56 <__swsetup_r+0x22>
   35e7e:	4b27      	ldr	r3, [pc, #156]	; (35f1c <__swsetup_r+0xe8>)
   35e80:	429c      	cmp	r4, r3
   35e82:	d1e8      	bne.n	35e56 <__swsetup_r+0x22>
   35e84:	68ec      	ldr	r4, [r5, #12]
   35e86:	e7e6      	b.n	35e56 <__swsetup_r+0x22>
   35e88:	075b      	lsls	r3, r3, #29
   35e8a:	d513      	bpl.n	35eb4 <__swsetup_r+0x80>
   35e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35e8e:	2900      	cmp	r1, #0
   35e90:	d008      	beq.n	35ea4 <__swsetup_r+0x70>
   35e92:	0023      	movs	r3, r4
   35e94:	3344      	adds	r3, #68	; 0x44
   35e96:	4299      	cmp	r1, r3
   35e98:	d002      	beq.n	35ea0 <__swsetup_r+0x6c>
   35e9a:	0030      	movs	r0, r6
   35e9c:	f7ff fc78 	bl	35790 <_free_r>
   35ea0:	2300      	movs	r3, #0
   35ea2:	6363      	str	r3, [r4, #52]	; 0x34
   35ea4:	2224      	movs	r2, #36	; 0x24
   35ea6:	89a3      	ldrh	r3, [r4, #12]
   35ea8:	4393      	bics	r3, r2
   35eaa:	81a3      	strh	r3, [r4, #12]
   35eac:	2300      	movs	r3, #0
   35eae:	6063      	str	r3, [r4, #4]
   35eb0:	6923      	ldr	r3, [r4, #16]
   35eb2:	6023      	str	r3, [r4, #0]
   35eb4:	2308      	movs	r3, #8
   35eb6:	89a2      	ldrh	r2, [r4, #12]
   35eb8:	4313      	orrs	r3, r2
   35eba:	81a3      	strh	r3, [r4, #12]
   35ebc:	6923      	ldr	r3, [r4, #16]
   35ebe:	2b00      	cmp	r3, #0
   35ec0:	d10b      	bne.n	35eda <__swsetup_r+0xa6>
   35ec2:	21a0      	movs	r1, #160	; 0xa0
   35ec4:	2280      	movs	r2, #128	; 0x80
   35ec6:	89a3      	ldrh	r3, [r4, #12]
   35ec8:	0089      	lsls	r1, r1, #2
   35eca:	0092      	lsls	r2, r2, #2
   35ecc:	400b      	ands	r3, r1
   35ece:	4293      	cmp	r3, r2
   35ed0:	d003      	beq.n	35eda <__swsetup_r+0xa6>
   35ed2:	0021      	movs	r1, r4
   35ed4:	0030      	movs	r0, r6
   35ed6:	f000 f9e9 	bl	362ac <__smakebuf_r>
   35eda:	2301      	movs	r3, #1
   35edc:	89a2      	ldrh	r2, [r4, #12]
   35ede:	4013      	ands	r3, r2
   35ee0:	d011      	beq.n	35f06 <__swsetup_r+0xd2>
   35ee2:	2300      	movs	r3, #0
   35ee4:	60a3      	str	r3, [r4, #8]
   35ee6:	6963      	ldr	r3, [r4, #20]
   35ee8:	425b      	negs	r3, r3
   35eea:	61a3      	str	r3, [r4, #24]
   35eec:	2000      	movs	r0, #0
   35eee:	6923      	ldr	r3, [r4, #16]
   35ef0:	4283      	cmp	r3, r0
   35ef2:	d1be      	bne.n	35e72 <__swsetup_r+0x3e>
   35ef4:	230c      	movs	r3, #12
   35ef6:	5ee2      	ldrsh	r2, [r4, r3]
   35ef8:	0613      	lsls	r3, r2, #24
   35efa:	d5ba      	bpl.n	35e72 <__swsetup_r+0x3e>
   35efc:	2340      	movs	r3, #64	; 0x40
   35efe:	4313      	orrs	r3, r2
   35f00:	81a3      	strh	r3, [r4, #12]
   35f02:	3801      	subs	r0, #1
   35f04:	e7b5      	b.n	35e72 <__swsetup_r+0x3e>
   35f06:	0792      	lsls	r2, r2, #30
   35f08:	d400      	bmi.n	35f0c <__swsetup_r+0xd8>
   35f0a:	6963      	ldr	r3, [r4, #20]
   35f0c:	60a3      	str	r3, [r4, #8]
   35f0e:	e7ed      	b.n	35eec <__swsetup_r+0xb8>
   35f10:	20000130 	.word	0x20000130
   35f14:	0003b0f8 	.word	0x0003b0f8
   35f18:	0003b118 	.word	0x0003b118
   35f1c:	0003b0d8 	.word	0x0003b0d8

00035f20 <__sflush_r>:
   35f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35f22:	898a      	ldrh	r2, [r1, #12]
   35f24:	0005      	movs	r5, r0
   35f26:	000c      	movs	r4, r1
   35f28:	0713      	lsls	r3, r2, #28
   35f2a:	d460      	bmi.n	35fee <__sflush_r+0xce>
   35f2c:	684b      	ldr	r3, [r1, #4]
   35f2e:	2b00      	cmp	r3, #0
   35f30:	dc04      	bgt.n	35f3c <__sflush_r+0x1c>
   35f32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35f34:	2b00      	cmp	r3, #0
   35f36:	dc01      	bgt.n	35f3c <__sflush_r+0x1c>
   35f38:	2000      	movs	r0, #0
   35f3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35f3c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35f3e:	2f00      	cmp	r7, #0
   35f40:	d0fa      	beq.n	35f38 <__sflush_r+0x18>
   35f42:	2300      	movs	r3, #0
   35f44:	682e      	ldr	r6, [r5, #0]
   35f46:	602b      	str	r3, [r5, #0]
   35f48:	2380      	movs	r3, #128	; 0x80
   35f4a:	015b      	lsls	r3, r3, #5
   35f4c:	401a      	ands	r2, r3
   35f4e:	d034      	beq.n	35fba <__sflush_r+0x9a>
   35f50:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35f52:	89a3      	ldrh	r3, [r4, #12]
   35f54:	075b      	lsls	r3, r3, #29
   35f56:	d506      	bpl.n	35f66 <__sflush_r+0x46>
   35f58:	6863      	ldr	r3, [r4, #4]
   35f5a:	1ac0      	subs	r0, r0, r3
   35f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35f5e:	2b00      	cmp	r3, #0
   35f60:	d001      	beq.n	35f66 <__sflush_r+0x46>
   35f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35f64:	1ac0      	subs	r0, r0, r3
   35f66:	0002      	movs	r2, r0
   35f68:	6a21      	ldr	r1, [r4, #32]
   35f6a:	2300      	movs	r3, #0
   35f6c:	0028      	movs	r0, r5
   35f6e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35f70:	47b8      	blx	r7
   35f72:	89a1      	ldrh	r1, [r4, #12]
   35f74:	1c43      	adds	r3, r0, #1
   35f76:	d106      	bne.n	35f86 <__sflush_r+0x66>
   35f78:	682b      	ldr	r3, [r5, #0]
   35f7a:	2b1d      	cmp	r3, #29
   35f7c:	d831      	bhi.n	35fe2 <__sflush_r+0xc2>
   35f7e:	4a2c      	ldr	r2, [pc, #176]	; (36030 <__sflush_r+0x110>)
   35f80:	40da      	lsrs	r2, r3
   35f82:	07d3      	lsls	r3, r2, #31
   35f84:	d52d      	bpl.n	35fe2 <__sflush_r+0xc2>
   35f86:	2300      	movs	r3, #0
   35f88:	6063      	str	r3, [r4, #4]
   35f8a:	6923      	ldr	r3, [r4, #16]
   35f8c:	6023      	str	r3, [r4, #0]
   35f8e:	04cb      	lsls	r3, r1, #19
   35f90:	d505      	bpl.n	35f9e <__sflush_r+0x7e>
   35f92:	1c43      	adds	r3, r0, #1
   35f94:	d102      	bne.n	35f9c <__sflush_r+0x7c>
   35f96:	682b      	ldr	r3, [r5, #0]
   35f98:	2b00      	cmp	r3, #0
   35f9a:	d100      	bne.n	35f9e <__sflush_r+0x7e>
   35f9c:	6560      	str	r0, [r4, #84]	; 0x54
   35f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35fa0:	602e      	str	r6, [r5, #0]
   35fa2:	2900      	cmp	r1, #0
   35fa4:	d0c8      	beq.n	35f38 <__sflush_r+0x18>
   35fa6:	0023      	movs	r3, r4
   35fa8:	3344      	adds	r3, #68	; 0x44
   35faa:	4299      	cmp	r1, r3
   35fac:	d002      	beq.n	35fb4 <__sflush_r+0x94>
   35fae:	0028      	movs	r0, r5
   35fb0:	f7ff fbee 	bl	35790 <_free_r>
   35fb4:	2000      	movs	r0, #0
   35fb6:	6360      	str	r0, [r4, #52]	; 0x34
   35fb8:	e7bf      	b.n	35f3a <__sflush_r+0x1a>
   35fba:	2301      	movs	r3, #1
   35fbc:	6a21      	ldr	r1, [r4, #32]
   35fbe:	0028      	movs	r0, r5
   35fc0:	47b8      	blx	r7
   35fc2:	1c43      	adds	r3, r0, #1
   35fc4:	d1c5      	bne.n	35f52 <__sflush_r+0x32>
   35fc6:	682b      	ldr	r3, [r5, #0]
   35fc8:	2b00      	cmp	r3, #0
   35fca:	d0c2      	beq.n	35f52 <__sflush_r+0x32>
   35fcc:	2b1d      	cmp	r3, #29
   35fce:	d001      	beq.n	35fd4 <__sflush_r+0xb4>
   35fd0:	2b16      	cmp	r3, #22
   35fd2:	d101      	bne.n	35fd8 <__sflush_r+0xb8>
   35fd4:	602e      	str	r6, [r5, #0]
   35fd6:	e7af      	b.n	35f38 <__sflush_r+0x18>
   35fd8:	2340      	movs	r3, #64	; 0x40
   35fda:	89a2      	ldrh	r2, [r4, #12]
   35fdc:	4313      	orrs	r3, r2
   35fde:	81a3      	strh	r3, [r4, #12]
   35fe0:	e7ab      	b.n	35f3a <__sflush_r+0x1a>
   35fe2:	2340      	movs	r3, #64	; 0x40
   35fe4:	430b      	orrs	r3, r1
   35fe6:	2001      	movs	r0, #1
   35fe8:	81a3      	strh	r3, [r4, #12]
   35fea:	4240      	negs	r0, r0
   35fec:	e7a5      	b.n	35f3a <__sflush_r+0x1a>
   35fee:	690f      	ldr	r7, [r1, #16]
   35ff0:	2f00      	cmp	r7, #0
   35ff2:	d0a1      	beq.n	35f38 <__sflush_r+0x18>
   35ff4:	680b      	ldr	r3, [r1, #0]
   35ff6:	600f      	str	r7, [r1, #0]
   35ff8:	1bdb      	subs	r3, r3, r7
   35ffa:	9301      	str	r3, [sp, #4]
   35ffc:	2300      	movs	r3, #0
   35ffe:	0792      	lsls	r2, r2, #30
   36000:	d100      	bne.n	36004 <__sflush_r+0xe4>
   36002:	694b      	ldr	r3, [r1, #20]
   36004:	60a3      	str	r3, [r4, #8]
   36006:	9b01      	ldr	r3, [sp, #4]
   36008:	2b00      	cmp	r3, #0
   3600a:	dc00      	bgt.n	3600e <__sflush_r+0xee>
   3600c:	e794      	b.n	35f38 <__sflush_r+0x18>
   3600e:	9b01      	ldr	r3, [sp, #4]
   36010:	003a      	movs	r2, r7
   36012:	6a21      	ldr	r1, [r4, #32]
   36014:	0028      	movs	r0, r5
   36016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   36018:	47b0      	blx	r6
   3601a:	2800      	cmp	r0, #0
   3601c:	dc03      	bgt.n	36026 <__sflush_r+0x106>
   3601e:	2340      	movs	r3, #64	; 0x40
   36020:	89a2      	ldrh	r2, [r4, #12]
   36022:	4313      	orrs	r3, r2
   36024:	e7df      	b.n	35fe6 <__sflush_r+0xc6>
   36026:	9b01      	ldr	r3, [sp, #4]
   36028:	183f      	adds	r7, r7, r0
   3602a:	1a1b      	subs	r3, r3, r0
   3602c:	9301      	str	r3, [sp, #4]
   3602e:	e7ea      	b.n	36006 <__sflush_r+0xe6>
   36030:	20400001 	.word	0x20400001

00036034 <_fflush_r>:
   36034:	690b      	ldr	r3, [r1, #16]
   36036:	b570      	push	{r4, r5, r6, lr}
   36038:	0005      	movs	r5, r0
   3603a:	000c      	movs	r4, r1
   3603c:	2b00      	cmp	r3, #0
   3603e:	d101      	bne.n	36044 <_fflush_r+0x10>
   36040:	2000      	movs	r0, #0
   36042:	bd70      	pop	{r4, r5, r6, pc}
   36044:	2800      	cmp	r0, #0
   36046:	d004      	beq.n	36052 <_fflush_r+0x1e>
   36048:	6983      	ldr	r3, [r0, #24]
   3604a:	2b00      	cmp	r3, #0
   3604c:	d101      	bne.n	36052 <_fflush_r+0x1e>
   3604e:	f000 f85f 	bl	36110 <__sinit>
   36052:	4b0b      	ldr	r3, [pc, #44]	; (36080 <_fflush_r+0x4c>)
   36054:	429c      	cmp	r4, r3
   36056:	d109      	bne.n	3606c <_fflush_r+0x38>
   36058:	686c      	ldr	r4, [r5, #4]
   3605a:	220c      	movs	r2, #12
   3605c:	5ea3      	ldrsh	r3, [r4, r2]
   3605e:	2b00      	cmp	r3, #0
   36060:	d0ee      	beq.n	36040 <_fflush_r+0xc>
   36062:	0021      	movs	r1, r4
   36064:	0028      	movs	r0, r5
   36066:	f7ff ff5b 	bl	35f20 <__sflush_r>
   3606a:	e7ea      	b.n	36042 <_fflush_r+0xe>
   3606c:	4b05      	ldr	r3, [pc, #20]	; (36084 <_fflush_r+0x50>)
   3606e:	429c      	cmp	r4, r3
   36070:	d101      	bne.n	36076 <_fflush_r+0x42>
   36072:	68ac      	ldr	r4, [r5, #8]
   36074:	e7f1      	b.n	3605a <_fflush_r+0x26>
   36076:	4b04      	ldr	r3, [pc, #16]	; (36088 <_fflush_r+0x54>)
   36078:	429c      	cmp	r4, r3
   3607a:	d1ee      	bne.n	3605a <_fflush_r+0x26>
   3607c:	68ec      	ldr	r4, [r5, #12]
   3607e:	e7ec      	b.n	3605a <_fflush_r+0x26>
   36080:	0003b0f8 	.word	0x0003b0f8
   36084:	0003b118 	.word	0x0003b118
   36088:	0003b0d8 	.word	0x0003b0d8

0003608c <_cleanup_r>:
   3608c:	b510      	push	{r4, lr}
   3608e:	4902      	ldr	r1, [pc, #8]	; (36098 <_cleanup_r+0xc>)
   36090:	f000 f8b2 	bl	361f8 <_fwalk_reent>
   36094:	bd10      	pop	{r4, pc}
   36096:	46c0      	nop			; (mov r8, r8)
   36098:	00036035 	.word	0x00036035

0003609c <std.isra.0>:
   3609c:	2300      	movs	r3, #0
   3609e:	b510      	push	{r4, lr}
   360a0:	0004      	movs	r4, r0
   360a2:	6003      	str	r3, [r0, #0]
   360a4:	6043      	str	r3, [r0, #4]
   360a6:	6083      	str	r3, [r0, #8]
   360a8:	8181      	strh	r1, [r0, #12]
   360aa:	6643      	str	r3, [r0, #100]	; 0x64
   360ac:	81c2      	strh	r2, [r0, #14]
   360ae:	6103      	str	r3, [r0, #16]
   360b0:	6143      	str	r3, [r0, #20]
   360b2:	6183      	str	r3, [r0, #24]
   360b4:	0019      	movs	r1, r3
   360b6:	2208      	movs	r2, #8
   360b8:	305c      	adds	r0, #92	; 0x5c
   360ba:	f7ff fb60 	bl	3577e <memset>
   360be:	4b05      	ldr	r3, [pc, #20]	; (360d4 <std.isra.0+0x38>)
   360c0:	6224      	str	r4, [r4, #32]
   360c2:	6263      	str	r3, [r4, #36]	; 0x24
   360c4:	4b04      	ldr	r3, [pc, #16]	; (360d8 <std.isra.0+0x3c>)
   360c6:	62a3      	str	r3, [r4, #40]	; 0x28
   360c8:	4b04      	ldr	r3, [pc, #16]	; (360dc <std.isra.0+0x40>)
   360ca:	62e3      	str	r3, [r4, #44]	; 0x2c
   360cc:	4b04      	ldr	r3, [pc, #16]	; (360e0 <std.isra.0+0x44>)
   360ce:	6323      	str	r3, [r4, #48]	; 0x30
   360d0:	bd10      	pop	{r4, pc}
   360d2:	46c0      	nop			; (mov r8, r8)
   360d4:	00036939 	.word	0x00036939
   360d8:	00036961 	.word	0x00036961
   360dc:	00036999 	.word	0x00036999
   360e0:	000369c5 	.word	0x000369c5

000360e4 <__sfmoreglue>:
   360e4:	b570      	push	{r4, r5, r6, lr}
   360e6:	2568      	movs	r5, #104	; 0x68
   360e8:	1e4a      	subs	r2, r1, #1
   360ea:	4355      	muls	r5, r2
   360ec:	000e      	movs	r6, r1
   360ee:	0029      	movs	r1, r5
   360f0:	3174      	adds	r1, #116	; 0x74
   360f2:	f7ff fb97 	bl	35824 <_malloc_r>
   360f6:	1e04      	subs	r4, r0, #0
   360f8:	d008      	beq.n	3610c <__sfmoreglue+0x28>
   360fa:	2100      	movs	r1, #0
   360fc:	002a      	movs	r2, r5
   360fe:	6001      	str	r1, [r0, #0]
   36100:	6046      	str	r6, [r0, #4]
   36102:	300c      	adds	r0, #12
   36104:	60a0      	str	r0, [r4, #8]
   36106:	3268      	adds	r2, #104	; 0x68
   36108:	f7ff fb39 	bl	3577e <memset>
   3610c:	0020      	movs	r0, r4
   3610e:	bd70      	pop	{r4, r5, r6, pc}

00036110 <__sinit>:
   36110:	6983      	ldr	r3, [r0, #24]
   36112:	b513      	push	{r0, r1, r4, lr}
   36114:	0004      	movs	r4, r0
   36116:	2b00      	cmp	r3, #0
   36118:	d128      	bne.n	3616c <__sinit+0x5c>
   3611a:	6483      	str	r3, [r0, #72]	; 0x48
   3611c:	64c3      	str	r3, [r0, #76]	; 0x4c
   3611e:	6503      	str	r3, [r0, #80]	; 0x50
   36120:	4b13      	ldr	r3, [pc, #76]	; (36170 <__sinit+0x60>)
   36122:	4a14      	ldr	r2, [pc, #80]	; (36174 <__sinit+0x64>)
   36124:	681b      	ldr	r3, [r3, #0]
   36126:	6282      	str	r2, [r0, #40]	; 0x28
   36128:	9301      	str	r3, [sp, #4]
   3612a:	4298      	cmp	r0, r3
   3612c:	d101      	bne.n	36132 <__sinit+0x22>
   3612e:	2301      	movs	r3, #1
   36130:	6183      	str	r3, [r0, #24]
   36132:	0020      	movs	r0, r4
   36134:	f000 f820 	bl	36178 <__sfp>
   36138:	6060      	str	r0, [r4, #4]
   3613a:	0020      	movs	r0, r4
   3613c:	f000 f81c 	bl	36178 <__sfp>
   36140:	60a0      	str	r0, [r4, #8]
   36142:	0020      	movs	r0, r4
   36144:	f000 f818 	bl	36178 <__sfp>
   36148:	2200      	movs	r2, #0
   3614a:	60e0      	str	r0, [r4, #12]
   3614c:	2104      	movs	r1, #4
   3614e:	6860      	ldr	r0, [r4, #4]
   36150:	f7ff ffa4 	bl	3609c <std.isra.0>
   36154:	2201      	movs	r2, #1
   36156:	2109      	movs	r1, #9
   36158:	68a0      	ldr	r0, [r4, #8]
   3615a:	f7ff ff9f 	bl	3609c <std.isra.0>
   3615e:	2202      	movs	r2, #2
   36160:	2112      	movs	r1, #18
   36162:	68e0      	ldr	r0, [r4, #12]
   36164:	f7ff ff9a 	bl	3609c <std.isra.0>
   36168:	2301      	movs	r3, #1
   3616a:	61a3      	str	r3, [r4, #24]
   3616c:	bd13      	pop	{r0, r1, r4, pc}
   3616e:	46c0      	nop			; (mov r8, r8)
   36170:	0003b0d4 	.word	0x0003b0d4
   36174:	0003608d 	.word	0x0003608d

00036178 <__sfp>:
   36178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3617a:	4b1e      	ldr	r3, [pc, #120]	; (361f4 <__sfp+0x7c>)
   3617c:	0007      	movs	r7, r0
   3617e:	681e      	ldr	r6, [r3, #0]
   36180:	69b3      	ldr	r3, [r6, #24]
   36182:	2b00      	cmp	r3, #0
   36184:	d102      	bne.n	3618c <__sfp+0x14>
   36186:	0030      	movs	r0, r6
   36188:	f7ff ffc2 	bl	36110 <__sinit>
   3618c:	3648      	adds	r6, #72	; 0x48
   3618e:	68b4      	ldr	r4, [r6, #8]
   36190:	6873      	ldr	r3, [r6, #4]
   36192:	3b01      	subs	r3, #1
   36194:	d504      	bpl.n	361a0 <__sfp+0x28>
   36196:	6833      	ldr	r3, [r6, #0]
   36198:	2b00      	cmp	r3, #0
   3619a:	d007      	beq.n	361ac <__sfp+0x34>
   3619c:	6836      	ldr	r6, [r6, #0]
   3619e:	e7f6      	b.n	3618e <__sfp+0x16>
   361a0:	220c      	movs	r2, #12
   361a2:	5ea5      	ldrsh	r5, [r4, r2]
   361a4:	2d00      	cmp	r5, #0
   361a6:	d00d      	beq.n	361c4 <__sfp+0x4c>
   361a8:	3468      	adds	r4, #104	; 0x68
   361aa:	e7f2      	b.n	36192 <__sfp+0x1a>
   361ac:	2104      	movs	r1, #4
   361ae:	0038      	movs	r0, r7
   361b0:	f7ff ff98 	bl	360e4 <__sfmoreglue>
   361b4:	6030      	str	r0, [r6, #0]
   361b6:	2800      	cmp	r0, #0
   361b8:	d1f0      	bne.n	3619c <__sfp+0x24>
   361ba:	230c      	movs	r3, #12
   361bc:	0004      	movs	r4, r0
   361be:	603b      	str	r3, [r7, #0]
   361c0:	0020      	movs	r0, r4
   361c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   361c4:	2301      	movs	r3, #1
   361c6:	0020      	movs	r0, r4
   361c8:	425b      	negs	r3, r3
   361ca:	81e3      	strh	r3, [r4, #14]
   361cc:	3302      	adds	r3, #2
   361ce:	81a3      	strh	r3, [r4, #12]
   361d0:	6665      	str	r5, [r4, #100]	; 0x64
   361d2:	6025      	str	r5, [r4, #0]
   361d4:	60a5      	str	r5, [r4, #8]
   361d6:	6065      	str	r5, [r4, #4]
   361d8:	6125      	str	r5, [r4, #16]
   361da:	6165      	str	r5, [r4, #20]
   361dc:	61a5      	str	r5, [r4, #24]
   361de:	2208      	movs	r2, #8
   361e0:	0029      	movs	r1, r5
   361e2:	305c      	adds	r0, #92	; 0x5c
   361e4:	f7ff facb 	bl	3577e <memset>
   361e8:	6365      	str	r5, [r4, #52]	; 0x34
   361ea:	63a5      	str	r5, [r4, #56]	; 0x38
   361ec:	64a5      	str	r5, [r4, #72]	; 0x48
   361ee:	64e5      	str	r5, [r4, #76]	; 0x4c
   361f0:	e7e6      	b.n	361c0 <__sfp+0x48>
   361f2:	46c0      	nop			; (mov r8, r8)
   361f4:	0003b0d4 	.word	0x0003b0d4

000361f8 <_fwalk_reent>:
   361f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   361fa:	0004      	movs	r4, r0
   361fc:	0007      	movs	r7, r0
   361fe:	2600      	movs	r6, #0
   36200:	9101      	str	r1, [sp, #4]
   36202:	3448      	adds	r4, #72	; 0x48
   36204:	2c00      	cmp	r4, #0
   36206:	d101      	bne.n	3620c <_fwalk_reent+0x14>
   36208:	0030      	movs	r0, r6
   3620a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3620c:	6863      	ldr	r3, [r4, #4]
   3620e:	68a5      	ldr	r5, [r4, #8]
   36210:	9300      	str	r3, [sp, #0]
   36212:	9b00      	ldr	r3, [sp, #0]
   36214:	3b01      	subs	r3, #1
   36216:	9300      	str	r3, [sp, #0]
   36218:	d501      	bpl.n	3621e <_fwalk_reent+0x26>
   3621a:	6824      	ldr	r4, [r4, #0]
   3621c:	e7f2      	b.n	36204 <_fwalk_reent+0xc>
   3621e:	89ab      	ldrh	r3, [r5, #12]
   36220:	2b01      	cmp	r3, #1
   36222:	d908      	bls.n	36236 <_fwalk_reent+0x3e>
   36224:	220e      	movs	r2, #14
   36226:	5eab      	ldrsh	r3, [r5, r2]
   36228:	3301      	adds	r3, #1
   3622a:	d004      	beq.n	36236 <_fwalk_reent+0x3e>
   3622c:	0029      	movs	r1, r5
   3622e:	0038      	movs	r0, r7
   36230:	9b01      	ldr	r3, [sp, #4]
   36232:	4798      	blx	r3
   36234:	4306      	orrs	r6, r0
   36236:	3568      	adds	r5, #104	; 0x68
   36238:	e7eb      	b.n	36212 <_fwalk_reent+0x1a>

0003623a <__locale_ctype_ptr_l>:
   3623a:	30ec      	adds	r0, #236	; 0xec
   3623c:	6800      	ldr	r0, [r0, #0]
   3623e:	4770      	bx	lr

00036240 <__locale_ctype_ptr>:
   36240:	4b04      	ldr	r3, [pc, #16]	; (36254 <__locale_ctype_ptr+0x14>)
   36242:	681b      	ldr	r3, [r3, #0]
   36244:	6a1b      	ldr	r3, [r3, #32]
   36246:	2b00      	cmp	r3, #0
   36248:	d100      	bne.n	3624c <__locale_ctype_ptr+0xc>
   3624a:	4b03      	ldr	r3, [pc, #12]	; (36258 <__locale_ctype_ptr+0x18>)
   3624c:	33ec      	adds	r3, #236	; 0xec
   3624e:	6818      	ldr	r0, [r3, #0]
   36250:	4770      	bx	lr
   36252:	46c0      	nop			; (mov r8, r8)
   36254:	20000130 	.word	0x20000130
   36258:	20000194 	.word	0x20000194

0003625c <__swhatbuf_r>:
   3625c:	b570      	push	{r4, r5, r6, lr}
   3625e:	000e      	movs	r6, r1
   36260:	001d      	movs	r5, r3
   36262:	230e      	movs	r3, #14
   36264:	5ec9      	ldrsh	r1, [r1, r3]
   36266:	b090      	sub	sp, #64	; 0x40
   36268:	0014      	movs	r4, r2
   3626a:	2900      	cmp	r1, #0
   3626c:	da07      	bge.n	3627e <__swhatbuf_r+0x22>
   3626e:	2300      	movs	r3, #0
   36270:	602b      	str	r3, [r5, #0]
   36272:	89b3      	ldrh	r3, [r6, #12]
   36274:	061b      	lsls	r3, r3, #24
   36276:	d411      	bmi.n	3629c <__swhatbuf_r+0x40>
   36278:	2380      	movs	r3, #128	; 0x80
   3627a:	00db      	lsls	r3, r3, #3
   3627c:	e00f      	b.n	3629e <__swhatbuf_r+0x42>
   3627e:	aa01      	add	r2, sp, #4
   36280:	f000 fbe6 	bl	36a50 <_fstat_r>
   36284:	2800      	cmp	r0, #0
   36286:	dbf2      	blt.n	3626e <__swhatbuf_r+0x12>
   36288:	22f0      	movs	r2, #240	; 0xf0
   3628a:	9b02      	ldr	r3, [sp, #8]
   3628c:	0212      	lsls	r2, r2, #8
   3628e:	4013      	ands	r3, r2
   36290:	4a05      	ldr	r2, [pc, #20]	; (362a8 <__swhatbuf_r+0x4c>)
   36292:	189b      	adds	r3, r3, r2
   36294:	425a      	negs	r2, r3
   36296:	4153      	adcs	r3, r2
   36298:	602b      	str	r3, [r5, #0]
   3629a:	e7ed      	b.n	36278 <__swhatbuf_r+0x1c>
   3629c:	2340      	movs	r3, #64	; 0x40
   3629e:	2000      	movs	r0, #0
   362a0:	6023      	str	r3, [r4, #0]
   362a2:	b010      	add	sp, #64	; 0x40
   362a4:	bd70      	pop	{r4, r5, r6, pc}
   362a6:	46c0      	nop			; (mov r8, r8)
   362a8:	ffffe000 	.word	0xffffe000

000362ac <__smakebuf_r>:
   362ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   362ae:	2602      	movs	r6, #2
   362b0:	898b      	ldrh	r3, [r1, #12]
   362b2:	0005      	movs	r5, r0
   362b4:	000c      	movs	r4, r1
   362b6:	4233      	tst	r3, r6
   362b8:	d006      	beq.n	362c8 <__smakebuf_r+0x1c>
   362ba:	0023      	movs	r3, r4
   362bc:	3347      	adds	r3, #71	; 0x47
   362be:	6023      	str	r3, [r4, #0]
   362c0:	6123      	str	r3, [r4, #16]
   362c2:	2301      	movs	r3, #1
   362c4:	6163      	str	r3, [r4, #20]
   362c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   362c8:	ab01      	add	r3, sp, #4
   362ca:	466a      	mov	r2, sp
   362cc:	f7ff ffc6 	bl	3625c <__swhatbuf_r>
   362d0:	9900      	ldr	r1, [sp, #0]
   362d2:	0007      	movs	r7, r0
   362d4:	0028      	movs	r0, r5
   362d6:	f7ff faa5 	bl	35824 <_malloc_r>
   362da:	2800      	cmp	r0, #0
   362dc:	d108      	bne.n	362f0 <__smakebuf_r+0x44>
   362de:	220c      	movs	r2, #12
   362e0:	5ea3      	ldrsh	r3, [r4, r2]
   362e2:	059a      	lsls	r2, r3, #22
   362e4:	d4ef      	bmi.n	362c6 <__smakebuf_r+0x1a>
   362e6:	2203      	movs	r2, #3
   362e8:	4393      	bics	r3, r2
   362ea:	431e      	orrs	r6, r3
   362ec:	81a6      	strh	r6, [r4, #12]
   362ee:	e7e4      	b.n	362ba <__smakebuf_r+0xe>
   362f0:	4b0f      	ldr	r3, [pc, #60]	; (36330 <__smakebuf_r+0x84>)
   362f2:	62ab      	str	r3, [r5, #40]	; 0x28
   362f4:	2380      	movs	r3, #128	; 0x80
   362f6:	89a2      	ldrh	r2, [r4, #12]
   362f8:	6020      	str	r0, [r4, #0]
   362fa:	4313      	orrs	r3, r2
   362fc:	81a3      	strh	r3, [r4, #12]
   362fe:	9b00      	ldr	r3, [sp, #0]
   36300:	6120      	str	r0, [r4, #16]
   36302:	6163      	str	r3, [r4, #20]
   36304:	9b01      	ldr	r3, [sp, #4]
   36306:	2b00      	cmp	r3, #0
   36308:	d00d      	beq.n	36326 <__smakebuf_r+0x7a>
   3630a:	230e      	movs	r3, #14
   3630c:	5ee1      	ldrsh	r1, [r4, r3]
   3630e:	0028      	movs	r0, r5
   36310:	f000 fbb0 	bl	36a74 <_isatty_r>
   36314:	2800      	cmp	r0, #0
   36316:	d006      	beq.n	36326 <__smakebuf_r+0x7a>
   36318:	2203      	movs	r2, #3
   3631a:	89a3      	ldrh	r3, [r4, #12]
   3631c:	4393      	bics	r3, r2
   3631e:	001a      	movs	r2, r3
   36320:	2301      	movs	r3, #1
   36322:	4313      	orrs	r3, r2
   36324:	81a3      	strh	r3, [r4, #12]
   36326:	89a0      	ldrh	r0, [r4, #12]
   36328:	4338      	orrs	r0, r7
   3632a:	81a0      	strh	r0, [r4, #12]
   3632c:	e7cb      	b.n	362c6 <__smakebuf_r+0x1a>
   3632e:	46c0      	nop			; (mov r8, r8)
   36330:	0003608d 	.word	0x0003608d

00036334 <__ascii_mbtowc>:
   36334:	b082      	sub	sp, #8
   36336:	2900      	cmp	r1, #0
   36338:	d100      	bne.n	3633c <__ascii_mbtowc+0x8>
   3633a:	a901      	add	r1, sp, #4
   3633c:	1e10      	subs	r0, r2, #0
   3633e:	d006      	beq.n	3634e <__ascii_mbtowc+0x1a>
   36340:	2b00      	cmp	r3, #0
   36342:	d006      	beq.n	36352 <__ascii_mbtowc+0x1e>
   36344:	7813      	ldrb	r3, [r2, #0]
   36346:	600b      	str	r3, [r1, #0]
   36348:	7810      	ldrb	r0, [r2, #0]
   3634a:	1e43      	subs	r3, r0, #1
   3634c:	4198      	sbcs	r0, r3
   3634e:	b002      	add	sp, #8
   36350:	4770      	bx	lr
   36352:	2002      	movs	r0, #2
   36354:	4240      	negs	r0, r0
   36356:	e7fa      	b.n	3634e <__ascii_mbtowc+0x1a>

00036358 <__malloc_lock>:
   36358:	4770      	bx	lr

0003635a <__malloc_unlock>:
   3635a:	4770      	bx	lr

0003635c <__ssputs_r>:
   3635c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3635e:	688e      	ldr	r6, [r1, #8]
   36360:	b085      	sub	sp, #20
   36362:	0007      	movs	r7, r0
   36364:	000c      	movs	r4, r1
   36366:	9203      	str	r2, [sp, #12]
   36368:	9301      	str	r3, [sp, #4]
   3636a:	429e      	cmp	r6, r3
   3636c:	d839      	bhi.n	363e2 <__ssputs_r+0x86>
   3636e:	2390      	movs	r3, #144	; 0x90
   36370:	898a      	ldrh	r2, [r1, #12]
   36372:	00db      	lsls	r3, r3, #3
   36374:	421a      	tst	r2, r3
   36376:	d034      	beq.n	363e2 <__ssputs_r+0x86>
   36378:	2503      	movs	r5, #3
   3637a:	6909      	ldr	r1, [r1, #16]
   3637c:	6823      	ldr	r3, [r4, #0]
   3637e:	1a5b      	subs	r3, r3, r1
   36380:	9302      	str	r3, [sp, #8]
   36382:	6963      	ldr	r3, [r4, #20]
   36384:	9802      	ldr	r0, [sp, #8]
   36386:	435d      	muls	r5, r3
   36388:	0feb      	lsrs	r3, r5, #31
   3638a:	195d      	adds	r5, r3, r5
   3638c:	9b01      	ldr	r3, [sp, #4]
   3638e:	106d      	asrs	r5, r5, #1
   36390:	3301      	adds	r3, #1
   36392:	181b      	adds	r3, r3, r0
   36394:	42ab      	cmp	r3, r5
   36396:	d900      	bls.n	3639a <__ssputs_r+0x3e>
   36398:	001d      	movs	r5, r3
   3639a:	0553      	lsls	r3, r2, #21
   3639c:	d532      	bpl.n	36404 <__ssputs_r+0xa8>
   3639e:	0029      	movs	r1, r5
   363a0:	0038      	movs	r0, r7
   363a2:	f7ff fa3f 	bl	35824 <_malloc_r>
   363a6:	1e06      	subs	r6, r0, #0
   363a8:	d109      	bne.n	363be <__ssputs_r+0x62>
   363aa:	230c      	movs	r3, #12
   363ac:	603b      	str	r3, [r7, #0]
   363ae:	2340      	movs	r3, #64	; 0x40
   363b0:	2001      	movs	r0, #1
   363b2:	89a2      	ldrh	r2, [r4, #12]
   363b4:	4240      	negs	r0, r0
   363b6:	4313      	orrs	r3, r2
   363b8:	81a3      	strh	r3, [r4, #12]
   363ba:	b005      	add	sp, #20
   363bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   363be:	9a02      	ldr	r2, [sp, #8]
   363c0:	6921      	ldr	r1, [r4, #16]
   363c2:	f7ff f9c1 	bl	35748 <memcpy>
   363c6:	89a3      	ldrh	r3, [r4, #12]
   363c8:	4a14      	ldr	r2, [pc, #80]	; (3641c <__ssputs_r+0xc0>)
   363ca:	401a      	ands	r2, r3
   363cc:	2380      	movs	r3, #128	; 0x80
   363ce:	4313      	orrs	r3, r2
   363d0:	81a3      	strh	r3, [r4, #12]
   363d2:	9b02      	ldr	r3, [sp, #8]
   363d4:	6126      	str	r6, [r4, #16]
   363d6:	18f6      	adds	r6, r6, r3
   363d8:	6026      	str	r6, [r4, #0]
   363da:	6165      	str	r5, [r4, #20]
   363dc:	9e01      	ldr	r6, [sp, #4]
   363de:	1aed      	subs	r5, r5, r3
   363e0:	60a5      	str	r5, [r4, #8]
   363e2:	9b01      	ldr	r3, [sp, #4]
   363e4:	42b3      	cmp	r3, r6
   363e6:	d200      	bcs.n	363ea <__ssputs_r+0x8e>
   363e8:	001e      	movs	r6, r3
   363ea:	0032      	movs	r2, r6
   363ec:	9903      	ldr	r1, [sp, #12]
   363ee:	6820      	ldr	r0, [r4, #0]
   363f0:	f7ff f9b3 	bl	3575a <memmove>
   363f4:	68a3      	ldr	r3, [r4, #8]
   363f6:	2000      	movs	r0, #0
   363f8:	1b9b      	subs	r3, r3, r6
   363fa:	60a3      	str	r3, [r4, #8]
   363fc:	6823      	ldr	r3, [r4, #0]
   363fe:	199e      	adds	r6, r3, r6
   36400:	6026      	str	r6, [r4, #0]
   36402:	e7da      	b.n	363ba <__ssputs_r+0x5e>
   36404:	002a      	movs	r2, r5
   36406:	0038      	movs	r0, r7
   36408:	f000 fb65 	bl	36ad6 <_realloc_r>
   3640c:	1e06      	subs	r6, r0, #0
   3640e:	d1e0      	bne.n	363d2 <__ssputs_r+0x76>
   36410:	6921      	ldr	r1, [r4, #16]
   36412:	0038      	movs	r0, r7
   36414:	f7ff f9bc 	bl	35790 <_free_r>
   36418:	e7c7      	b.n	363aa <__ssputs_r+0x4e>
   3641a:	46c0      	nop			; (mov r8, r8)
   3641c:	fffffb7f 	.word	0xfffffb7f

00036420 <_svfiprintf_r>:
   36420:	b5f0      	push	{r4, r5, r6, r7, lr}
   36422:	b09f      	sub	sp, #124	; 0x7c
   36424:	9002      	str	r0, [sp, #8]
   36426:	9305      	str	r3, [sp, #20]
   36428:	898b      	ldrh	r3, [r1, #12]
   3642a:	000f      	movs	r7, r1
   3642c:	0016      	movs	r6, r2
   3642e:	061b      	lsls	r3, r3, #24
   36430:	d511      	bpl.n	36456 <_svfiprintf_r+0x36>
   36432:	690b      	ldr	r3, [r1, #16]
   36434:	2b00      	cmp	r3, #0
   36436:	d10e      	bne.n	36456 <_svfiprintf_r+0x36>
   36438:	2140      	movs	r1, #64	; 0x40
   3643a:	f7ff f9f3 	bl	35824 <_malloc_r>
   3643e:	6038      	str	r0, [r7, #0]
   36440:	6138      	str	r0, [r7, #16]
   36442:	2800      	cmp	r0, #0
   36444:	d105      	bne.n	36452 <_svfiprintf_r+0x32>
   36446:	230c      	movs	r3, #12
   36448:	9a02      	ldr	r2, [sp, #8]
   3644a:	3801      	subs	r0, #1
   3644c:	6013      	str	r3, [r2, #0]
   3644e:	b01f      	add	sp, #124	; 0x7c
   36450:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36452:	2340      	movs	r3, #64	; 0x40
   36454:	617b      	str	r3, [r7, #20]
   36456:	2300      	movs	r3, #0
   36458:	ad06      	add	r5, sp, #24
   3645a:	616b      	str	r3, [r5, #20]
   3645c:	3320      	adds	r3, #32
   3645e:	766b      	strb	r3, [r5, #25]
   36460:	3310      	adds	r3, #16
   36462:	76ab      	strb	r3, [r5, #26]
   36464:	0034      	movs	r4, r6
   36466:	7823      	ldrb	r3, [r4, #0]
   36468:	2b00      	cmp	r3, #0
   3646a:	d147      	bne.n	364fc <_svfiprintf_r+0xdc>
   3646c:	1ba3      	subs	r3, r4, r6
   3646e:	9304      	str	r3, [sp, #16]
   36470:	d00d      	beq.n	3648e <_svfiprintf_r+0x6e>
   36472:	1ba3      	subs	r3, r4, r6
   36474:	0032      	movs	r2, r6
   36476:	0039      	movs	r1, r7
   36478:	9802      	ldr	r0, [sp, #8]
   3647a:	f7ff ff6f 	bl	3635c <__ssputs_r>
   3647e:	1c43      	adds	r3, r0, #1
   36480:	d100      	bne.n	36484 <_svfiprintf_r+0x64>
   36482:	e0b5      	b.n	365f0 <_svfiprintf_r+0x1d0>
   36484:	696a      	ldr	r2, [r5, #20]
   36486:	9b04      	ldr	r3, [sp, #16]
   36488:	4694      	mov	ip, r2
   3648a:	4463      	add	r3, ip
   3648c:	616b      	str	r3, [r5, #20]
   3648e:	7823      	ldrb	r3, [r4, #0]
   36490:	2b00      	cmp	r3, #0
   36492:	d100      	bne.n	36496 <_svfiprintf_r+0x76>
   36494:	e0ac      	b.n	365f0 <_svfiprintf_r+0x1d0>
   36496:	2201      	movs	r2, #1
   36498:	2300      	movs	r3, #0
   3649a:	4252      	negs	r2, r2
   3649c:	606a      	str	r2, [r5, #4]
   3649e:	a902      	add	r1, sp, #8
   364a0:	3254      	adds	r2, #84	; 0x54
   364a2:	1852      	adds	r2, r2, r1
   364a4:	3401      	adds	r4, #1
   364a6:	602b      	str	r3, [r5, #0]
   364a8:	60eb      	str	r3, [r5, #12]
   364aa:	60ab      	str	r3, [r5, #8]
   364ac:	7013      	strb	r3, [r2, #0]
   364ae:	65ab      	str	r3, [r5, #88]	; 0x58
   364b0:	4e58      	ldr	r6, [pc, #352]	; (36614 <_svfiprintf_r+0x1f4>)
   364b2:	2205      	movs	r2, #5
   364b4:	7821      	ldrb	r1, [r4, #0]
   364b6:	0030      	movs	r0, r6
   364b8:	f000 fb02 	bl	36ac0 <memchr>
   364bc:	1c62      	adds	r2, r4, #1
   364be:	2800      	cmp	r0, #0
   364c0:	d120      	bne.n	36504 <_svfiprintf_r+0xe4>
   364c2:	6829      	ldr	r1, [r5, #0]
   364c4:	06cb      	lsls	r3, r1, #27
   364c6:	d504      	bpl.n	364d2 <_svfiprintf_r+0xb2>
   364c8:	2353      	movs	r3, #83	; 0x53
   364ca:	ae02      	add	r6, sp, #8
   364cc:	3020      	adds	r0, #32
   364ce:	199b      	adds	r3, r3, r6
   364d0:	7018      	strb	r0, [r3, #0]
   364d2:	070b      	lsls	r3, r1, #28
   364d4:	d504      	bpl.n	364e0 <_svfiprintf_r+0xc0>
   364d6:	2353      	movs	r3, #83	; 0x53
   364d8:	202b      	movs	r0, #43	; 0x2b
   364da:	ae02      	add	r6, sp, #8
   364dc:	199b      	adds	r3, r3, r6
   364de:	7018      	strb	r0, [r3, #0]
   364e0:	7823      	ldrb	r3, [r4, #0]
   364e2:	2b2a      	cmp	r3, #42	; 0x2a
   364e4:	d016      	beq.n	36514 <_svfiprintf_r+0xf4>
   364e6:	2000      	movs	r0, #0
   364e8:	210a      	movs	r1, #10
   364ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   364ec:	7822      	ldrb	r2, [r4, #0]
   364ee:	3a30      	subs	r2, #48	; 0x30
   364f0:	2a09      	cmp	r2, #9
   364f2:	d955      	bls.n	365a0 <_svfiprintf_r+0x180>
   364f4:	2800      	cmp	r0, #0
   364f6:	d015      	beq.n	36524 <_svfiprintf_r+0x104>
   364f8:	9309      	str	r3, [sp, #36]	; 0x24
   364fa:	e013      	b.n	36524 <_svfiprintf_r+0x104>
   364fc:	2b25      	cmp	r3, #37	; 0x25
   364fe:	d0b5      	beq.n	3646c <_svfiprintf_r+0x4c>
   36500:	3401      	adds	r4, #1
   36502:	e7b0      	b.n	36466 <_svfiprintf_r+0x46>
   36504:	2301      	movs	r3, #1
   36506:	1b80      	subs	r0, r0, r6
   36508:	4083      	lsls	r3, r0
   3650a:	6829      	ldr	r1, [r5, #0]
   3650c:	0014      	movs	r4, r2
   3650e:	430b      	orrs	r3, r1
   36510:	602b      	str	r3, [r5, #0]
   36512:	e7cd      	b.n	364b0 <_svfiprintf_r+0x90>
   36514:	9b05      	ldr	r3, [sp, #20]
   36516:	1d18      	adds	r0, r3, #4
   36518:	681b      	ldr	r3, [r3, #0]
   3651a:	9005      	str	r0, [sp, #20]
   3651c:	2b00      	cmp	r3, #0
   3651e:	db39      	blt.n	36594 <_svfiprintf_r+0x174>
   36520:	9309      	str	r3, [sp, #36]	; 0x24
   36522:	0014      	movs	r4, r2
   36524:	7823      	ldrb	r3, [r4, #0]
   36526:	2b2e      	cmp	r3, #46	; 0x2e
   36528:	d10b      	bne.n	36542 <_svfiprintf_r+0x122>
   3652a:	7863      	ldrb	r3, [r4, #1]
   3652c:	1c62      	adds	r2, r4, #1
   3652e:	2b2a      	cmp	r3, #42	; 0x2a
   36530:	d13e      	bne.n	365b0 <_svfiprintf_r+0x190>
   36532:	9b05      	ldr	r3, [sp, #20]
   36534:	3402      	adds	r4, #2
   36536:	1d1a      	adds	r2, r3, #4
   36538:	681b      	ldr	r3, [r3, #0]
   3653a:	9205      	str	r2, [sp, #20]
   3653c:	2b00      	cmp	r3, #0
   3653e:	db34      	blt.n	365aa <_svfiprintf_r+0x18a>
   36540:	9307      	str	r3, [sp, #28]
   36542:	4e35      	ldr	r6, [pc, #212]	; (36618 <_svfiprintf_r+0x1f8>)
   36544:	7821      	ldrb	r1, [r4, #0]
   36546:	2203      	movs	r2, #3
   36548:	0030      	movs	r0, r6
   3654a:	f000 fab9 	bl	36ac0 <memchr>
   3654e:	2800      	cmp	r0, #0
   36550:	d006      	beq.n	36560 <_svfiprintf_r+0x140>
   36552:	2340      	movs	r3, #64	; 0x40
   36554:	1b80      	subs	r0, r0, r6
   36556:	4083      	lsls	r3, r0
   36558:	682a      	ldr	r2, [r5, #0]
   3655a:	3401      	adds	r4, #1
   3655c:	4313      	orrs	r3, r2
   3655e:	602b      	str	r3, [r5, #0]
   36560:	7821      	ldrb	r1, [r4, #0]
   36562:	2206      	movs	r2, #6
   36564:	482d      	ldr	r0, [pc, #180]	; (3661c <_svfiprintf_r+0x1fc>)
   36566:	1c66      	adds	r6, r4, #1
   36568:	7629      	strb	r1, [r5, #24]
   3656a:	f000 faa9 	bl	36ac0 <memchr>
   3656e:	2800      	cmp	r0, #0
   36570:	d046      	beq.n	36600 <_svfiprintf_r+0x1e0>
   36572:	4b2b      	ldr	r3, [pc, #172]	; (36620 <_svfiprintf_r+0x200>)
   36574:	2b00      	cmp	r3, #0
   36576:	d12f      	bne.n	365d8 <_svfiprintf_r+0x1b8>
   36578:	6829      	ldr	r1, [r5, #0]
   3657a:	9b05      	ldr	r3, [sp, #20]
   3657c:	2207      	movs	r2, #7
   3657e:	05c9      	lsls	r1, r1, #23
   36580:	d528      	bpl.n	365d4 <_svfiprintf_r+0x1b4>
   36582:	189b      	adds	r3, r3, r2
   36584:	4393      	bics	r3, r2
   36586:	3308      	adds	r3, #8
   36588:	9305      	str	r3, [sp, #20]
   3658a:	696b      	ldr	r3, [r5, #20]
   3658c:	9a03      	ldr	r2, [sp, #12]
   3658e:	189b      	adds	r3, r3, r2
   36590:	616b      	str	r3, [r5, #20]
   36592:	e767      	b.n	36464 <_svfiprintf_r+0x44>
   36594:	425b      	negs	r3, r3
   36596:	60eb      	str	r3, [r5, #12]
   36598:	2302      	movs	r3, #2
   3659a:	430b      	orrs	r3, r1
   3659c:	602b      	str	r3, [r5, #0]
   3659e:	e7c0      	b.n	36522 <_svfiprintf_r+0x102>
   365a0:	434b      	muls	r3, r1
   365a2:	3401      	adds	r4, #1
   365a4:	189b      	adds	r3, r3, r2
   365a6:	2001      	movs	r0, #1
   365a8:	e7a0      	b.n	364ec <_svfiprintf_r+0xcc>
   365aa:	2301      	movs	r3, #1
   365ac:	425b      	negs	r3, r3
   365ae:	e7c7      	b.n	36540 <_svfiprintf_r+0x120>
   365b0:	2300      	movs	r3, #0
   365b2:	0014      	movs	r4, r2
   365b4:	200a      	movs	r0, #10
   365b6:	001a      	movs	r2, r3
   365b8:	606b      	str	r3, [r5, #4]
   365ba:	7821      	ldrb	r1, [r4, #0]
   365bc:	3930      	subs	r1, #48	; 0x30
   365be:	2909      	cmp	r1, #9
   365c0:	d903      	bls.n	365ca <_svfiprintf_r+0x1aa>
   365c2:	2b00      	cmp	r3, #0
   365c4:	d0bd      	beq.n	36542 <_svfiprintf_r+0x122>
   365c6:	9207      	str	r2, [sp, #28]
   365c8:	e7bb      	b.n	36542 <_svfiprintf_r+0x122>
   365ca:	4342      	muls	r2, r0
   365cc:	3401      	adds	r4, #1
   365ce:	1852      	adds	r2, r2, r1
   365d0:	2301      	movs	r3, #1
   365d2:	e7f2      	b.n	365ba <_svfiprintf_r+0x19a>
   365d4:	3307      	adds	r3, #7
   365d6:	e7d5      	b.n	36584 <_svfiprintf_r+0x164>
   365d8:	ab05      	add	r3, sp, #20
   365da:	9300      	str	r3, [sp, #0]
   365dc:	003a      	movs	r2, r7
   365de:	4b11      	ldr	r3, [pc, #68]	; (36624 <_svfiprintf_r+0x204>)
   365e0:	0029      	movs	r1, r5
   365e2:	9802      	ldr	r0, [sp, #8]
   365e4:	e000      	b.n	365e8 <_svfiprintf_r+0x1c8>
   365e6:	bf00      	nop
   365e8:	9003      	str	r0, [sp, #12]
   365ea:	9b03      	ldr	r3, [sp, #12]
   365ec:	3301      	adds	r3, #1
   365ee:	d1cc      	bne.n	3658a <_svfiprintf_r+0x16a>
   365f0:	89bb      	ldrh	r3, [r7, #12]
   365f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   365f4:	065b      	lsls	r3, r3, #25
   365f6:	d400      	bmi.n	365fa <_svfiprintf_r+0x1da>
   365f8:	e729      	b.n	3644e <_svfiprintf_r+0x2e>
   365fa:	2001      	movs	r0, #1
   365fc:	4240      	negs	r0, r0
   365fe:	e726      	b.n	3644e <_svfiprintf_r+0x2e>
   36600:	ab05      	add	r3, sp, #20
   36602:	9300      	str	r3, [sp, #0]
   36604:	003a      	movs	r2, r7
   36606:	4b07      	ldr	r3, [pc, #28]	; (36624 <_svfiprintf_r+0x204>)
   36608:	0029      	movs	r1, r5
   3660a:	9802      	ldr	r0, [sp, #8]
   3660c:	f000 f87a 	bl	36704 <_printf_i>
   36610:	e7ea      	b.n	365e8 <_svfiprintf_r+0x1c8>
   36612:	46c0      	nop			; (mov r8, r8)
   36614:	0003b142 	.word	0x0003b142
   36618:	0003b148 	.word	0x0003b148
   3661c:	0003b14c 	.word	0x0003b14c
   36620:	00000000 	.word	0x00000000
   36624:	0003635d 	.word	0x0003635d

00036628 <_printf_common>:
   36628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3662a:	0015      	movs	r5, r2
   3662c:	9301      	str	r3, [sp, #4]
   3662e:	688a      	ldr	r2, [r1, #8]
   36630:	690b      	ldr	r3, [r1, #16]
   36632:	9000      	str	r0, [sp, #0]
   36634:	000c      	movs	r4, r1
   36636:	4293      	cmp	r3, r2
   36638:	da00      	bge.n	3663c <_printf_common+0x14>
   3663a:	0013      	movs	r3, r2
   3663c:	0022      	movs	r2, r4
   3663e:	602b      	str	r3, [r5, #0]
   36640:	3243      	adds	r2, #67	; 0x43
   36642:	7812      	ldrb	r2, [r2, #0]
   36644:	2a00      	cmp	r2, #0
   36646:	d001      	beq.n	3664c <_printf_common+0x24>
   36648:	3301      	adds	r3, #1
   3664a:	602b      	str	r3, [r5, #0]
   3664c:	6823      	ldr	r3, [r4, #0]
   3664e:	069b      	lsls	r3, r3, #26
   36650:	d502      	bpl.n	36658 <_printf_common+0x30>
   36652:	682b      	ldr	r3, [r5, #0]
   36654:	3302      	adds	r3, #2
   36656:	602b      	str	r3, [r5, #0]
   36658:	2706      	movs	r7, #6
   3665a:	6823      	ldr	r3, [r4, #0]
   3665c:	401f      	ands	r7, r3
   3665e:	d027      	beq.n	366b0 <_printf_common+0x88>
   36660:	0023      	movs	r3, r4
   36662:	3343      	adds	r3, #67	; 0x43
   36664:	781b      	ldrb	r3, [r3, #0]
   36666:	1e5a      	subs	r2, r3, #1
   36668:	4193      	sbcs	r3, r2
   3666a:	6822      	ldr	r2, [r4, #0]
   3666c:	0692      	lsls	r2, r2, #26
   3666e:	d430      	bmi.n	366d2 <_printf_common+0xaa>
   36670:	0022      	movs	r2, r4
   36672:	9901      	ldr	r1, [sp, #4]
   36674:	3243      	adds	r2, #67	; 0x43
   36676:	9800      	ldr	r0, [sp, #0]
   36678:	9e08      	ldr	r6, [sp, #32]
   3667a:	47b0      	blx	r6
   3667c:	1c43      	adds	r3, r0, #1
   3667e:	d025      	beq.n	366cc <_printf_common+0xa4>
   36680:	2306      	movs	r3, #6
   36682:	6820      	ldr	r0, [r4, #0]
   36684:	682a      	ldr	r2, [r5, #0]
   36686:	68e1      	ldr	r1, [r4, #12]
   36688:	4003      	ands	r3, r0
   3668a:	2500      	movs	r5, #0
   3668c:	2b04      	cmp	r3, #4
   3668e:	d103      	bne.n	36698 <_printf_common+0x70>
   36690:	1a8d      	subs	r5, r1, r2
   36692:	43eb      	mvns	r3, r5
   36694:	17db      	asrs	r3, r3, #31
   36696:	401d      	ands	r5, r3
   36698:	68a3      	ldr	r3, [r4, #8]
   3669a:	6922      	ldr	r2, [r4, #16]
   3669c:	4293      	cmp	r3, r2
   3669e:	dd01      	ble.n	366a4 <_printf_common+0x7c>
   366a0:	1a9b      	subs	r3, r3, r2
   366a2:	18ed      	adds	r5, r5, r3
   366a4:	2700      	movs	r7, #0
   366a6:	42bd      	cmp	r5, r7
   366a8:	d120      	bne.n	366ec <_printf_common+0xc4>
   366aa:	2000      	movs	r0, #0
   366ac:	e010      	b.n	366d0 <_printf_common+0xa8>
   366ae:	3701      	adds	r7, #1
   366b0:	68e3      	ldr	r3, [r4, #12]
   366b2:	682a      	ldr	r2, [r5, #0]
   366b4:	1a9b      	subs	r3, r3, r2
   366b6:	429f      	cmp	r7, r3
   366b8:	dad2      	bge.n	36660 <_printf_common+0x38>
   366ba:	0022      	movs	r2, r4
   366bc:	2301      	movs	r3, #1
   366be:	3219      	adds	r2, #25
   366c0:	9901      	ldr	r1, [sp, #4]
   366c2:	9800      	ldr	r0, [sp, #0]
   366c4:	9e08      	ldr	r6, [sp, #32]
   366c6:	47b0      	blx	r6
   366c8:	1c43      	adds	r3, r0, #1
   366ca:	d1f0      	bne.n	366ae <_printf_common+0x86>
   366cc:	2001      	movs	r0, #1
   366ce:	4240      	negs	r0, r0
   366d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   366d2:	2030      	movs	r0, #48	; 0x30
   366d4:	18e1      	adds	r1, r4, r3
   366d6:	3143      	adds	r1, #67	; 0x43
   366d8:	7008      	strb	r0, [r1, #0]
   366da:	0021      	movs	r1, r4
   366dc:	1c5a      	adds	r2, r3, #1
   366de:	3145      	adds	r1, #69	; 0x45
   366e0:	7809      	ldrb	r1, [r1, #0]
   366e2:	18a2      	adds	r2, r4, r2
   366e4:	3243      	adds	r2, #67	; 0x43
   366e6:	3302      	adds	r3, #2
   366e8:	7011      	strb	r1, [r2, #0]
   366ea:	e7c1      	b.n	36670 <_printf_common+0x48>
   366ec:	0022      	movs	r2, r4
   366ee:	2301      	movs	r3, #1
   366f0:	321a      	adds	r2, #26
   366f2:	9901      	ldr	r1, [sp, #4]
   366f4:	9800      	ldr	r0, [sp, #0]
   366f6:	9e08      	ldr	r6, [sp, #32]
   366f8:	47b0      	blx	r6
   366fa:	1c43      	adds	r3, r0, #1
   366fc:	d0e6      	beq.n	366cc <_printf_common+0xa4>
   366fe:	3701      	adds	r7, #1
   36700:	e7d1      	b.n	366a6 <_printf_common+0x7e>
	...

00036704 <_printf_i>:
   36704:	b5f0      	push	{r4, r5, r6, r7, lr}
   36706:	b08b      	sub	sp, #44	; 0x2c
   36708:	9206      	str	r2, [sp, #24]
   3670a:	000a      	movs	r2, r1
   3670c:	3243      	adds	r2, #67	; 0x43
   3670e:	9307      	str	r3, [sp, #28]
   36710:	9005      	str	r0, [sp, #20]
   36712:	9204      	str	r2, [sp, #16]
   36714:	7e0a      	ldrb	r2, [r1, #24]
   36716:	000c      	movs	r4, r1
   36718:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3671a:	2a6e      	cmp	r2, #110	; 0x6e
   3671c:	d100      	bne.n	36720 <_printf_i+0x1c>
   3671e:	e08f      	b.n	36840 <_printf_i+0x13c>
   36720:	d817      	bhi.n	36752 <_printf_i+0x4e>
   36722:	2a63      	cmp	r2, #99	; 0x63
   36724:	d02c      	beq.n	36780 <_printf_i+0x7c>
   36726:	d808      	bhi.n	3673a <_printf_i+0x36>
   36728:	2a00      	cmp	r2, #0
   3672a:	d100      	bne.n	3672e <_printf_i+0x2a>
   3672c:	e099      	b.n	36862 <_printf_i+0x15e>
   3672e:	2a58      	cmp	r2, #88	; 0x58
   36730:	d054      	beq.n	367dc <_printf_i+0xd8>
   36732:	0026      	movs	r6, r4
   36734:	3642      	adds	r6, #66	; 0x42
   36736:	7032      	strb	r2, [r6, #0]
   36738:	e029      	b.n	3678e <_printf_i+0x8a>
   3673a:	2a64      	cmp	r2, #100	; 0x64
   3673c:	d001      	beq.n	36742 <_printf_i+0x3e>
   3673e:	2a69      	cmp	r2, #105	; 0x69
   36740:	d1f7      	bne.n	36732 <_printf_i+0x2e>
   36742:	6821      	ldr	r1, [r4, #0]
   36744:	681a      	ldr	r2, [r3, #0]
   36746:	0608      	lsls	r0, r1, #24
   36748:	d523      	bpl.n	36792 <_printf_i+0x8e>
   3674a:	1d11      	adds	r1, r2, #4
   3674c:	6019      	str	r1, [r3, #0]
   3674e:	6815      	ldr	r5, [r2, #0]
   36750:	e025      	b.n	3679e <_printf_i+0x9a>
   36752:	2a73      	cmp	r2, #115	; 0x73
   36754:	d100      	bne.n	36758 <_printf_i+0x54>
   36756:	e088      	b.n	3686a <_printf_i+0x166>
   36758:	d808      	bhi.n	3676c <_printf_i+0x68>
   3675a:	2a6f      	cmp	r2, #111	; 0x6f
   3675c:	d029      	beq.n	367b2 <_printf_i+0xae>
   3675e:	2a70      	cmp	r2, #112	; 0x70
   36760:	d1e7      	bne.n	36732 <_printf_i+0x2e>
   36762:	2220      	movs	r2, #32
   36764:	6809      	ldr	r1, [r1, #0]
   36766:	430a      	orrs	r2, r1
   36768:	6022      	str	r2, [r4, #0]
   3676a:	e003      	b.n	36774 <_printf_i+0x70>
   3676c:	2a75      	cmp	r2, #117	; 0x75
   3676e:	d020      	beq.n	367b2 <_printf_i+0xae>
   36770:	2a78      	cmp	r2, #120	; 0x78
   36772:	d1de      	bne.n	36732 <_printf_i+0x2e>
   36774:	0022      	movs	r2, r4
   36776:	2178      	movs	r1, #120	; 0x78
   36778:	3245      	adds	r2, #69	; 0x45
   3677a:	7011      	strb	r1, [r2, #0]
   3677c:	4a6c      	ldr	r2, [pc, #432]	; (36930 <_printf_i+0x22c>)
   3677e:	e030      	b.n	367e2 <_printf_i+0xde>
   36780:	000e      	movs	r6, r1
   36782:	681a      	ldr	r2, [r3, #0]
   36784:	3642      	adds	r6, #66	; 0x42
   36786:	1d11      	adds	r1, r2, #4
   36788:	6019      	str	r1, [r3, #0]
   3678a:	6813      	ldr	r3, [r2, #0]
   3678c:	7033      	strb	r3, [r6, #0]
   3678e:	2301      	movs	r3, #1
   36790:	e079      	b.n	36886 <_printf_i+0x182>
   36792:	0649      	lsls	r1, r1, #25
   36794:	d5d9      	bpl.n	3674a <_printf_i+0x46>
   36796:	1d11      	adds	r1, r2, #4
   36798:	6019      	str	r1, [r3, #0]
   3679a:	2300      	movs	r3, #0
   3679c:	5ed5      	ldrsh	r5, [r2, r3]
   3679e:	2d00      	cmp	r5, #0
   367a0:	da03      	bge.n	367aa <_printf_i+0xa6>
   367a2:	232d      	movs	r3, #45	; 0x2d
   367a4:	9a04      	ldr	r2, [sp, #16]
   367a6:	426d      	negs	r5, r5
   367a8:	7013      	strb	r3, [r2, #0]
   367aa:	4b62      	ldr	r3, [pc, #392]	; (36934 <_printf_i+0x230>)
   367ac:	270a      	movs	r7, #10
   367ae:	9303      	str	r3, [sp, #12]
   367b0:	e02f      	b.n	36812 <_printf_i+0x10e>
   367b2:	6820      	ldr	r0, [r4, #0]
   367b4:	6819      	ldr	r1, [r3, #0]
   367b6:	0605      	lsls	r5, r0, #24
   367b8:	d503      	bpl.n	367c2 <_printf_i+0xbe>
   367ba:	1d08      	adds	r0, r1, #4
   367bc:	6018      	str	r0, [r3, #0]
   367be:	680d      	ldr	r5, [r1, #0]
   367c0:	e005      	b.n	367ce <_printf_i+0xca>
   367c2:	0640      	lsls	r0, r0, #25
   367c4:	d5f9      	bpl.n	367ba <_printf_i+0xb6>
   367c6:	680d      	ldr	r5, [r1, #0]
   367c8:	1d08      	adds	r0, r1, #4
   367ca:	6018      	str	r0, [r3, #0]
   367cc:	b2ad      	uxth	r5, r5
   367ce:	4b59      	ldr	r3, [pc, #356]	; (36934 <_printf_i+0x230>)
   367d0:	2708      	movs	r7, #8
   367d2:	9303      	str	r3, [sp, #12]
   367d4:	2a6f      	cmp	r2, #111	; 0x6f
   367d6:	d018      	beq.n	3680a <_printf_i+0x106>
   367d8:	270a      	movs	r7, #10
   367da:	e016      	b.n	3680a <_printf_i+0x106>
   367dc:	3145      	adds	r1, #69	; 0x45
   367de:	700a      	strb	r2, [r1, #0]
   367e0:	4a54      	ldr	r2, [pc, #336]	; (36934 <_printf_i+0x230>)
   367e2:	9203      	str	r2, [sp, #12]
   367e4:	681a      	ldr	r2, [r3, #0]
   367e6:	6821      	ldr	r1, [r4, #0]
   367e8:	1d10      	adds	r0, r2, #4
   367ea:	6018      	str	r0, [r3, #0]
   367ec:	6815      	ldr	r5, [r2, #0]
   367ee:	0608      	lsls	r0, r1, #24
   367f0:	d522      	bpl.n	36838 <_printf_i+0x134>
   367f2:	07cb      	lsls	r3, r1, #31
   367f4:	d502      	bpl.n	367fc <_printf_i+0xf8>
   367f6:	2320      	movs	r3, #32
   367f8:	4319      	orrs	r1, r3
   367fa:	6021      	str	r1, [r4, #0]
   367fc:	2710      	movs	r7, #16
   367fe:	2d00      	cmp	r5, #0
   36800:	d103      	bne.n	3680a <_printf_i+0x106>
   36802:	2320      	movs	r3, #32
   36804:	6822      	ldr	r2, [r4, #0]
   36806:	439a      	bics	r2, r3
   36808:	6022      	str	r2, [r4, #0]
   3680a:	0023      	movs	r3, r4
   3680c:	2200      	movs	r2, #0
   3680e:	3343      	adds	r3, #67	; 0x43
   36810:	701a      	strb	r2, [r3, #0]
   36812:	6863      	ldr	r3, [r4, #4]
   36814:	60a3      	str	r3, [r4, #8]
   36816:	2b00      	cmp	r3, #0
   36818:	db5c      	blt.n	368d4 <_printf_i+0x1d0>
   3681a:	2204      	movs	r2, #4
   3681c:	6821      	ldr	r1, [r4, #0]
   3681e:	4391      	bics	r1, r2
   36820:	6021      	str	r1, [r4, #0]
   36822:	2d00      	cmp	r5, #0
   36824:	d158      	bne.n	368d8 <_printf_i+0x1d4>
   36826:	9e04      	ldr	r6, [sp, #16]
   36828:	2b00      	cmp	r3, #0
   3682a:	d064      	beq.n	368f6 <_printf_i+0x1f2>
   3682c:	0026      	movs	r6, r4
   3682e:	9b03      	ldr	r3, [sp, #12]
   36830:	3642      	adds	r6, #66	; 0x42
   36832:	781b      	ldrb	r3, [r3, #0]
   36834:	7033      	strb	r3, [r6, #0]
   36836:	e05e      	b.n	368f6 <_printf_i+0x1f2>
   36838:	0648      	lsls	r0, r1, #25
   3683a:	d5da      	bpl.n	367f2 <_printf_i+0xee>
   3683c:	b2ad      	uxth	r5, r5
   3683e:	e7d8      	b.n	367f2 <_printf_i+0xee>
   36840:	6809      	ldr	r1, [r1, #0]
   36842:	681a      	ldr	r2, [r3, #0]
   36844:	0608      	lsls	r0, r1, #24
   36846:	d505      	bpl.n	36854 <_printf_i+0x150>
   36848:	1d11      	adds	r1, r2, #4
   3684a:	6019      	str	r1, [r3, #0]
   3684c:	6813      	ldr	r3, [r2, #0]
   3684e:	6962      	ldr	r2, [r4, #20]
   36850:	601a      	str	r2, [r3, #0]
   36852:	e006      	b.n	36862 <_printf_i+0x15e>
   36854:	0649      	lsls	r1, r1, #25
   36856:	d5f7      	bpl.n	36848 <_printf_i+0x144>
   36858:	1d11      	adds	r1, r2, #4
   3685a:	6019      	str	r1, [r3, #0]
   3685c:	6813      	ldr	r3, [r2, #0]
   3685e:	8aa2      	ldrh	r2, [r4, #20]
   36860:	801a      	strh	r2, [r3, #0]
   36862:	2300      	movs	r3, #0
   36864:	9e04      	ldr	r6, [sp, #16]
   36866:	6123      	str	r3, [r4, #16]
   36868:	e054      	b.n	36914 <_printf_i+0x210>
   3686a:	681a      	ldr	r2, [r3, #0]
   3686c:	1d11      	adds	r1, r2, #4
   3686e:	6019      	str	r1, [r3, #0]
   36870:	6816      	ldr	r6, [r2, #0]
   36872:	2100      	movs	r1, #0
   36874:	6862      	ldr	r2, [r4, #4]
   36876:	0030      	movs	r0, r6
   36878:	f000 f922 	bl	36ac0 <memchr>
   3687c:	2800      	cmp	r0, #0
   3687e:	d001      	beq.n	36884 <_printf_i+0x180>
   36880:	1b80      	subs	r0, r0, r6
   36882:	6060      	str	r0, [r4, #4]
   36884:	6863      	ldr	r3, [r4, #4]
   36886:	6123      	str	r3, [r4, #16]
   36888:	2300      	movs	r3, #0
   3688a:	9a04      	ldr	r2, [sp, #16]
   3688c:	7013      	strb	r3, [r2, #0]
   3688e:	e041      	b.n	36914 <_printf_i+0x210>
   36890:	6923      	ldr	r3, [r4, #16]
   36892:	0032      	movs	r2, r6
   36894:	9906      	ldr	r1, [sp, #24]
   36896:	9805      	ldr	r0, [sp, #20]
   36898:	9d07      	ldr	r5, [sp, #28]
   3689a:	47a8      	blx	r5
   3689c:	1c43      	adds	r3, r0, #1
   3689e:	d043      	beq.n	36928 <_printf_i+0x224>
   368a0:	6823      	ldr	r3, [r4, #0]
   368a2:	2500      	movs	r5, #0
   368a4:	079b      	lsls	r3, r3, #30
   368a6:	d40f      	bmi.n	368c8 <_printf_i+0x1c4>
   368a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   368aa:	68e0      	ldr	r0, [r4, #12]
   368ac:	4298      	cmp	r0, r3
   368ae:	da3d      	bge.n	3692c <_printf_i+0x228>
   368b0:	0018      	movs	r0, r3
   368b2:	e03b      	b.n	3692c <_printf_i+0x228>
   368b4:	0022      	movs	r2, r4
   368b6:	2301      	movs	r3, #1
   368b8:	3219      	adds	r2, #25
   368ba:	9906      	ldr	r1, [sp, #24]
   368bc:	9805      	ldr	r0, [sp, #20]
   368be:	9e07      	ldr	r6, [sp, #28]
   368c0:	47b0      	blx	r6
   368c2:	1c43      	adds	r3, r0, #1
   368c4:	d030      	beq.n	36928 <_printf_i+0x224>
   368c6:	3501      	adds	r5, #1
   368c8:	68e3      	ldr	r3, [r4, #12]
   368ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   368cc:	1a9b      	subs	r3, r3, r2
   368ce:	429d      	cmp	r5, r3
   368d0:	dbf0      	blt.n	368b4 <_printf_i+0x1b0>
   368d2:	e7e9      	b.n	368a8 <_printf_i+0x1a4>
   368d4:	2d00      	cmp	r5, #0
   368d6:	d0a9      	beq.n	3682c <_printf_i+0x128>
   368d8:	9e04      	ldr	r6, [sp, #16]
   368da:	0028      	movs	r0, r5
   368dc:	0039      	movs	r1, r7
   368de:	f7fc ffe7 	bl	338b0 <__aeabi_uidivmod>
   368e2:	9b03      	ldr	r3, [sp, #12]
   368e4:	3e01      	subs	r6, #1
   368e6:	5c5b      	ldrb	r3, [r3, r1]
   368e8:	0028      	movs	r0, r5
   368ea:	7033      	strb	r3, [r6, #0]
   368ec:	0039      	movs	r1, r7
   368ee:	f7fc ff59 	bl	337a4 <__udivsi3>
   368f2:	1e05      	subs	r5, r0, #0
   368f4:	d1f1      	bne.n	368da <_printf_i+0x1d6>
   368f6:	2f08      	cmp	r7, #8
   368f8:	d109      	bne.n	3690e <_printf_i+0x20a>
   368fa:	6823      	ldr	r3, [r4, #0]
   368fc:	07db      	lsls	r3, r3, #31
   368fe:	d506      	bpl.n	3690e <_printf_i+0x20a>
   36900:	6863      	ldr	r3, [r4, #4]
   36902:	6922      	ldr	r2, [r4, #16]
   36904:	4293      	cmp	r3, r2
   36906:	dc02      	bgt.n	3690e <_printf_i+0x20a>
   36908:	2330      	movs	r3, #48	; 0x30
   3690a:	3e01      	subs	r6, #1
   3690c:	7033      	strb	r3, [r6, #0]
   3690e:	9b04      	ldr	r3, [sp, #16]
   36910:	1b9b      	subs	r3, r3, r6
   36912:	6123      	str	r3, [r4, #16]
   36914:	9b07      	ldr	r3, [sp, #28]
   36916:	aa09      	add	r2, sp, #36	; 0x24
   36918:	9300      	str	r3, [sp, #0]
   3691a:	0021      	movs	r1, r4
   3691c:	9b06      	ldr	r3, [sp, #24]
   3691e:	9805      	ldr	r0, [sp, #20]
   36920:	f7ff fe82 	bl	36628 <_printf_common>
   36924:	1c43      	adds	r3, r0, #1
   36926:	d1b3      	bne.n	36890 <_printf_i+0x18c>
   36928:	2001      	movs	r0, #1
   3692a:	4240      	negs	r0, r0
   3692c:	b00b      	add	sp, #44	; 0x2c
   3692e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36930:	0003b164 	.word	0x0003b164
   36934:	0003b153 	.word	0x0003b153

00036938 <__sread>:
   36938:	b570      	push	{r4, r5, r6, lr}
   3693a:	000c      	movs	r4, r1
   3693c:	250e      	movs	r5, #14
   3693e:	5f49      	ldrsh	r1, [r1, r5]
   36940:	f000 f8f0 	bl	36b24 <_read_r>
   36944:	2800      	cmp	r0, #0
   36946:	db03      	blt.n	36950 <__sread+0x18>
   36948:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3694a:	181b      	adds	r3, r3, r0
   3694c:	6563      	str	r3, [r4, #84]	; 0x54
   3694e:	bd70      	pop	{r4, r5, r6, pc}
   36950:	89a3      	ldrh	r3, [r4, #12]
   36952:	4a02      	ldr	r2, [pc, #8]	; (3695c <__sread+0x24>)
   36954:	4013      	ands	r3, r2
   36956:	81a3      	strh	r3, [r4, #12]
   36958:	e7f9      	b.n	3694e <__sread+0x16>
   3695a:	46c0      	nop			; (mov r8, r8)
   3695c:	ffffefff 	.word	0xffffefff

00036960 <__swrite>:
   36960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36962:	001f      	movs	r7, r3
   36964:	898b      	ldrh	r3, [r1, #12]
   36966:	0005      	movs	r5, r0
   36968:	000c      	movs	r4, r1
   3696a:	0016      	movs	r6, r2
   3696c:	05db      	lsls	r3, r3, #23
   3696e:	d505      	bpl.n	3697c <__swrite+0x1c>
   36970:	230e      	movs	r3, #14
   36972:	5ec9      	ldrsh	r1, [r1, r3]
   36974:	2200      	movs	r2, #0
   36976:	2302      	movs	r3, #2
   36978:	f000 f88e 	bl	36a98 <_lseek_r>
   3697c:	89a3      	ldrh	r3, [r4, #12]
   3697e:	4a05      	ldr	r2, [pc, #20]	; (36994 <__swrite+0x34>)
   36980:	0028      	movs	r0, r5
   36982:	4013      	ands	r3, r2
   36984:	81a3      	strh	r3, [r4, #12]
   36986:	0032      	movs	r2, r6
   36988:	230e      	movs	r3, #14
   3698a:	5ee1      	ldrsh	r1, [r4, r3]
   3698c:	003b      	movs	r3, r7
   3698e:	f000 f839 	bl	36a04 <_write_r>
   36992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36994:	ffffefff 	.word	0xffffefff

00036998 <__sseek>:
   36998:	b570      	push	{r4, r5, r6, lr}
   3699a:	000c      	movs	r4, r1
   3699c:	250e      	movs	r5, #14
   3699e:	5f49      	ldrsh	r1, [r1, r5]
   369a0:	f000 f87a 	bl	36a98 <_lseek_r>
   369a4:	89a3      	ldrh	r3, [r4, #12]
   369a6:	1c42      	adds	r2, r0, #1
   369a8:	d103      	bne.n	369b2 <__sseek+0x1a>
   369aa:	4a05      	ldr	r2, [pc, #20]	; (369c0 <__sseek+0x28>)
   369ac:	4013      	ands	r3, r2
   369ae:	81a3      	strh	r3, [r4, #12]
   369b0:	bd70      	pop	{r4, r5, r6, pc}
   369b2:	2280      	movs	r2, #128	; 0x80
   369b4:	0152      	lsls	r2, r2, #5
   369b6:	4313      	orrs	r3, r2
   369b8:	81a3      	strh	r3, [r4, #12]
   369ba:	6560      	str	r0, [r4, #84]	; 0x54
   369bc:	e7f8      	b.n	369b0 <__sseek+0x18>
   369be:	46c0      	nop			; (mov r8, r8)
   369c0:	ffffefff 	.word	0xffffefff

000369c4 <__sclose>:
   369c4:	b510      	push	{r4, lr}
   369c6:	230e      	movs	r3, #14
   369c8:	5ec9      	ldrsh	r1, [r1, r3]
   369ca:	f000 f82f 	bl	36a2c <_close_r>
   369ce:	bd10      	pop	{r4, pc}

000369d0 <strchr>:
   369d0:	b2c9      	uxtb	r1, r1
   369d2:	7803      	ldrb	r3, [r0, #0]
   369d4:	2b00      	cmp	r3, #0
   369d6:	d004      	beq.n	369e2 <strchr+0x12>
   369d8:	4299      	cmp	r1, r3
   369da:	d100      	bne.n	369de <strchr+0xe>
   369dc:	4770      	bx	lr
   369de:	3001      	adds	r0, #1
   369e0:	e7f7      	b.n	369d2 <strchr+0x2>
   369e2:	424b      	negs	r3, r1
   369e4:	4159      	adcs	r1, r3
   369e6:	4249      	negs	r1, r1
   369e8:	4008      	ands	r0, r1
   369ea:	e7f7      	b.n	369dc <strchr+0xc>

000369ec <__ascii_wctomb>:
   369ec:	1e0b      	subs	r3, r1, #0
   369ee:	d004      	beq.n	369fa <__ascii_wctomb+0xe>
   369f0:	2aff      	cmp	r2, #255	; 0xff
   369f2:	d904      	bls.n	369fe <__ascii_wctomb+0x12>
   369f4:	238a      	movs	r3, #138	; 0x8a
   369f6:	6003      	str	r3, [r0, #0]
   369f8:	3b8b      	subs	r3, #139	; 0x8b
   369fa:	0018      	movs	r0, r3
   369fc:	4770      	bx	lr
   369fe:	700a      	strb	r2, [r1, #0]
   36a00:	2301      	movs	r3, #1
   36a02:	e7fa      	b.n	369fa <__ascii_wctomb+0xe>

00036a04 <_write_r>:
   36a04:	b570      	push	{r4, r5, r6, lr}
   36a06:	0005      	movs	r5, r0
   36a08:	0008      	movs	r0, r1
   36a0a:	0011      	movs	r1, r2
   36a0c:	2200      	movs	r2, #0
   36a0e:	4c06      	ldr	r4, [pc, #24]	; (36a28 <_write_r+0x24>)
   36a10:	6022      	str	r2, [r4, #0]
   36a12:	001a      	movs	r2, r3
   36a14:	f7f5 fa3c 	bl	2be90 <_write>
   36a18:	1c43      	adds	r3, r0, #1
   36a1a:	d103      	bne.n	36a24 <_write_r+0x20>
   36a1c:	6823      	ldr	r3, [r4, #0]
   36a1e:	2b00      	cmp	r3, #0
   36a20:	d000      	beq.n	36a24 <_write_r+0x20>
   36a22:	602b      	str	r3, [r5, #0]
   36a24:	bd70      	pop	{r4, r5, r6, pc}
   36a26:	46c0      	nop			; (mov r8, r8)
   36a28:	20005d20 	.word	0x20005d20

00036a2c <_close_r>:
   36a2c:	2300      	movs	r3, #0
   36a2e:	b570      	push	{r4, r5, r6, lr}
   36a30:	4c06      	ldr	r4, [pc, #24]	; (36a4c <_close_r+0x20>)
   36a32:	0005      	movs	r5, r0
   36a34:	0008      	movs	r0, r1
   36a36:	6023      	str	r3, [r4, #0]
   36a38:	f7f5 fa7e 	bl	2bf38 <_close>
   36a3c:	1c43      	adds	r3, r0, #1
   36a3e:	d103      	bne.n	36a48 <_close_r+0x1c>
   36a40:	6823      	ldr	r3, [r4, #0]
   36a42:	2b00      	cmp	r3, #0
   36a44:	d000      	beq.n	36a48 <_close_r+0x1c>
   36a46:	602b      	str	r3, [r5, #0]
   36a48:	bd70      	pop	{r4, r5, r6, pc}
   36a4a:	46c0      	nop			; (mov r8, r8)
   36a4c:	20005d20 	.word	0x20005d20

00036a50 <_fstat_r>:
   36a50:	2300      	movs	r3, #0
   36a52:	b570      	push	{r4, r5, r6, lr}
   36a54:	4c06      	ldr	r4, [pc, #24]	; (36a70 <_fstat_r+0x20>)
   36a56:	0005      	movs	r5, r0
   36a58:	0008      	movs	r0, r1
   36a5a:	0011      	movs	r1, r2
   36a5c:	6023      	str	r3, [r4, #0]
   36a5e:	f7f5 fa75 	bl	2bf4c <_fstat>
   36a62:	1c43      	adds	r3, r0, #1
   36a64:	d103      	bne.n	36a6e <_fstat_r+0x1e>
   36a66:	6823      	ldr	r3, [r4, #0]
   36a68:	2b00      	cmp	r3, #0
   36a6a:	d000      	beq.n	36a6e <_fstat_r+0x1e>
   36a6c:	602b      	str	r3, [r5, #0]
   36a6e:	bd70      	pop	{r4, r5, r6, pc}
   36a70:	20005d20 	.word	0x20005d20

00036a74 <_isatty_r>:
   36a74:	2300      	movs	r3, #0
   36a76:	b570      	push	{r4, r5, r6, lr}
   36a78:	4c06      	ldr	r4, [pc, #24]	; (36a94 <_isatty_r+0x20>)
   36a7a:	0005      	movs	r5, r0
   36a7c:	0008      	movs	r0, r1
   36a7e:	6023      	str	r3, [r4, #0]
   36a80:	f7f5 fa72 	bl	2bf68 <_isatty>
   36a84:	1c43      	adds	r3, r0, #1
   36a86:	d103      	bne.n	36a90 <_isatty_r+0x1c>
   36a88:	6823      	ldr	r3, [r4, #0]
   36a8a:	2b00      	cmp	r3, #0
   36a8c:	d000      	beq.n	36a90 <_isatty_r+0x1c>
   36a8e:	602b      	str	r3, [r5, #0]
   36a90:	bd70      	pop	{r4, r5, r6, pc}
   36a92:	46c0      	nop			; (mov r8, r8)
   36a94:	20005d20 	.word	0x20005d20

00036a98 <_lseek_r>:
   36a98:	b570      	push	{r4, r5, r6, lr}
   36a9a:	0005      	movs	r5, r0
   36a9c:	0008      	movs	r0, r1
   36a9e:	0011      	movs	r1, r2
   36aa0:	2200      	movs	r2, #0
   36aa2:	4c06      	ldr	r4, [pc, #24]	; (36abc <_lseek_r+0x24>)
   36aa4:	6022      	str	r2, [r4, #0]
   36aa6:	001a      	movs	r2, r3
   36aa8:	f7f5 fa67 	bl	2bf7a <_lseek>
   36aac:	1c43      	adds	r3, r0, #1
   36aae:	d103      	bne.n	36ab8 <_lseek_r+0x20>
   36ab0:	6823      	ldr	r3, [r4, #0]
   36ab2:	2b00      	cmp	r3, #0
   36ab4:	d000      	beq.n	36ab8 <_lseek_r+0x20>
   36ab6:	602b      	str	r3, [r5, #0]
   36ab8:	bd70      	pop	{r4, r5, r6, pc}
   36aba:	46c0      	nop			; (mov r8, r8)
   36abc:	20005d20 	.word	0x20005d20

00036ac0 <memchr>:
   36ac0:	b2c9      	uxtb	r1, r1
   36ac2:	1882      	adds	r2, r0, r2
   36ac4:	4290      	cmp	r0, r2
   36ac6:	d101      	bne.n	36acc <memchr+0xc>
   36ac8:	2000      	movs	r0, #0
   36aca:	4770      	bx	lr
   36acc:	7803      	ldrb	r3, [r0, #0]
   36ace:	428b      	cmp	r3, r1
   36ad0:	d0fb      	beq.n	36aca <memchr+0xa>
   36ad2:	3001      	adds	r0, #1
   36ad4:	e7f6      	b.n	36ac4 <memchr+0x4>

00036ad6 <_realloc_r>:
   36ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36ad8:	0007      	movs	r7, r0
   36ada:	000d      	movs	r5, r1
   36adc:	0016      	movs	r6, r2
   36ade:	2900      	cmp	r1, #0
   36ae0:	d105      	bne.n	36aee <_realloc_r+0x18>
   36ae2:	0011      	movs	r1, r2
   36ae4:	f7fe fe9e 	bl	35824 <_malloc_r>
   36ae8:	0004      	movs	r4, r0
   36aea:	0020      	movs	r0, r4
   36aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36aee:	2a00      	cmp	r2, #0
   36af0:	d103      	bne.n	36afa <_realloc_r+0x24>
   36af2:	f7fe fe4d 	bl	35790 <_free_r>
   36af6:	0034      	movs	r4, r6
   36af8:	e7f7      	b.n	36aea <_realloc_r+0x14>
   36afa:	f000 f827 	bl	36b4c <_malloc_usable_size_r>
   36afe:	002c      	movs	r4, r5
   36b00:	4286      	cmp	r6, r0
   36b02:	d9f2      	bls.n	36aea <_realloc_r+0x14>
   36b04:	0031      	movs	r1, r6
   36b06:	0038      	movs	r0, r7
   36b08:	f7fe fe8c 	bl	35824 <_malloc_r>
   36b0c:	1e04      	subs	r4, r0, #0
   36b0e:	d0ec      	beq.n	36aea <_realloc_r+0x14>
   36b10:	0029      	movs	r1, r5
   36b12:	0032      	movs	r2, r6
   36b14:	f7fe fe18 	bl	35748 <memcpy>
   36b18:	0029      	movs	r1, r5
   36b1a:	0038      	movs	r0, r7
   36b1c:	f7fe fe38 	bl	35790 <_free_r>
   36b20:	e7e3      	b.n	36aea <_realloc_r+0x14>
	...

00036b24 <_read_r>:
   36b24:	b570      	push	{r4, r5, r6, lr}
   36b26:	0005      	movs	r5, r0
   36b28:	0008      	movs	r0, r1
   36b2a:	0011      	movs	r1, r2
   36b2c:	2200      	movs	r2, #0
   36b2e:	4c06      	ldr	r4, [pc, #24]	; (36b48 <_read_r+0x24>)
   36b30:	6022      	str	r2, [r4, #0]
   36b32:	001a      	movs	r2, r3
   36b34:	f7f5 f982 	bl	2be3c <_read>
   36b38:	1c43      	adds	r3, r0, #1
   36b3a:	d103      	bne.n	36b44 <_read_r+0x20>
   36b3c:	6823      	ldr	r3, [r4, #0]
   36b3e:	2b00      	cmp	r3, #0
   36b40:	d000      	beq.n	36b44 <_read_r+0x20>
   36b42:	602b      	str	r3, [r5, #0]
   36b44:	bd70      	pop	{r4, r5, r6, pc}
   36b46:	46c0      	nop			; (mov r8, r8)
   36b48:	20005d20 	.word	0x20005d20

00036b4c <_malloc_usable_size_r>:
   36b4c:	1f0b      	subs	r3, r1, #4
   36b4e:	681b      	ldr	r3, [r3, #0]
   36b50:	1f18      	subs	r0, r3, #4
   36b52:	2b00      	cmp	r3, #0
   36b54:	da01      	bge.n	36b5a <_malloc_usable_size_r+0xe>
   36b56:	580b      	ldr	r3, [r1, r0]
   36b58:	18c0      	adds	r0, r0, r3
   36b5a:	4770      	bx	lr

00036b5c <sysfont_glyphs>:
   36b5c:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   36b6c:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   36b7c:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   36b8c:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   36b9c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   36bac:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   36bbc:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   36bcc:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   36bdc:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   36bec:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   36bfc:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   36c0c:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   36c1c:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   36c2c:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   36c3c:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   36c4c:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   36c5c:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   36c6c:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   36c7c:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   36c8c:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   36c9c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   36cac:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   36cbc:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   36ccc:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   36cdc:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   36cec:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   36cfc:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   36d0c:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   36d1c:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   36d2c:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   36d3c:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   36d4c:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   36d5c:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   36d6c:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   36d7c:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   36d8c:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   36d9c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   36dac:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   36dbc:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   36dcc:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   36ddc:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   36dec:	4020 0000                                    @..

00036df0 <pcWelcomeMessage>:
   36df0:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   36e00:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   36e10:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   36e20:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   36e30:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   36e40:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   36e50:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   36e60:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   36e70:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   36e80:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   36e90:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   36ea0:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   36eb0:	0a0d 0000 6567 6474 7369 6174 636e 0065     ....getdistance.
   36ec0:	6567 6474 7369 6174 636e 3a65 5220 7465     getdistance: Ret
   36ed0:	7275 736e 7420 6568 6420 7369 6174 636e     urns the distanc
   36ee0:	2065 7266 6d6f 7420 6568 5520 2d53 3031     e from the US-10
   36ef0:	2030 6553 736e 726f 0d2e 000a 3269 0063     0 Sensor....i2c.
   36f00:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   36f10:	7375 0a0d 0000 0000 7067 0073 7067 3a73     us......gps.gps:
   36f20:	5220 7465 7275 736e 6120 7620 6c61 6575      Returns a value
   36f30:	6620 6f72 206d 6874 2065 5047 0d53 000a      from the GPS...
   36f40:	6c63 0073 6c63 3a73 4320 656c 7261 2073     cls.cls: Clears 
   36f50:	6874 2065 6574 6d72 6e69 6c61 7320 7263     the terminal scr
   36f60:	6565 0d6e 000a 0000 6f43 6c75 2064 6f6e     een.....Could no
   36f70:	2074 6c61 6f6c 6163 6574 7320 6d65 7061     t allocate semap
   36f80:	6f68 6572 0a0d 0000 0a0d 0000 616f 0000     hore........oa..
   36f90:	6325 325b 0d4b 003e 2008 0008 6341 6563     %c[2K.>.. ..Acce
   36fa0:	656c 6172 6974 6e6f 5b20 676d 3a5d 2058     leration [mg]:X 
   36fb0:	6425 5909 2520 0964 205a 6425 0a0d 0000     %d.Y %d.Z %d....
   36fc0:	6f4e 6420 7461 2061 6572 6461 2179 5320     No data ready! S
   36fd0:	6e65 6964 676e 6420 6d75 796d 6420 7461     ending dummy dat
   36fe0:	2061 0a0d 0000 0000 6325 325b 004a 0000     a ......%c[2J...
   36ff0:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   37000:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   37010:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   37020:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   37030:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   37040:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   37050:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   37060:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   37070:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   37080:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   37090:	514d 5454 5020 736f 0d74 000a 2030 3120     MQTT Post...0  1
   370a0:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   370b0:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   370c0:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   370d0:	3025 7832 203a 0000 3025 7832 0020 0000     %02x: ..%02x ...
   370e0:	6554 7473 6e69 2067 7572 6e6e 6e69 2067     Testing running 
   370f0:	5047 2053 6163 6c6c 0d20 000a 7067 2073     GPS call ...gps 
   37100:	6144 6174 4d20 5451 2054 6f50 7473 0a0d     Data MQTT Post..
   37110:	0000 0000                                   ....

00037114 <xImuGetCommand>:
   37114:	6e34 0003 6e38 0003 4421 0001 0000 0000     4n..8n..!D......

00037124 <xOTAUCommand>:
   37124:	6e5c 0003 6e60 0003 45cd 0001 0000 0000     \n..`n...E......

00037134 <xResetCommand>:
   37134:	6e90 0003 6e98 0003 45ed 0001 0000 0000     .n...n...E......

00037144 <xDistanceSensorGetDistance>:
   37144:	6eb4 0003 6ec0 0003 460d 0001 0000 0000     .n...n...F......

00037154 <xI2cScan>:
   37154:	6efc 0003 6f00 0003 46b1 0001 0000 0000     .n...o...F......

00037164 <xGpsGetCommand>:
   37164:	6f18 0003 6f1c 0003 47d9 0001 0000 0000     .o...o...G......

00037174 <xClearScreen>:
   37174:	6f40 0003 6f44 0003 4585 0001 0000 0000     @o..Do...E......
   37184:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   37194:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   371a4:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   371b4:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   371c4:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   371d4:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   371e4:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   371f4:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   37204:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   37214:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   37224:	000a 0000 6f43 6c75 2064 6f6e 2074 6e69     ....Could not in
   37234:	7469 6169 696c 657a 4420 7369 6174 636e     itialize Distanc
   37244:	2065 6553 736e 726f 0021 0000               e Sensor!...

00037250 <msgKeypadGetCount>:
   37250:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   37260:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   37270:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   37280:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   37290:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   372a0:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   372b0:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   372c0:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   372d0:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   372e0:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   372f0:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   37300:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   37310:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   37320:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   37330:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   37340:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   37350:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   37360:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   37370:	6574 2164 0a0d 0000 5345 3545 3631 0000     ted!....ESE516..

00037380 <main_mqtt_broker>:
   37380:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   37390:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   373a0:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   373b0:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   373c0:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   373d0:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   373e0:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   373f0:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   37400:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   37410:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   37420:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   37430:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   37440:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   37450:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   37460:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   37470:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   37480:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   37490:	7564 7e2f 6564 6572 7a6b 796d 432f 7061     du/~derekzmy/Cap
   374a0:	7574 6572 502e 474e 0000 0000 7473 726f     ture.PNG....stor
   374b0:	5f65 6966 656c 705f 6361 656b 3a74 6520     e_file_packet: e
   374c0:	706d 7974 6420 7461 2e61 0a0d 0000 0000     mpty data.......
   374d0:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   374e0:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   374f0:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   37500:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   37510:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   37520:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
   37530:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
   37540:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   37550:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
   37560:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
   37570:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   37580:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
   37590:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
   375a0:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   375b0:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
   375c0:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
   375d0:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
   375e0:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   375f0:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
   37600:	6375 6563 7373 7566 6c6c 2e79 0a0d 0000     uccessfully.....
   37610:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   37620:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   37630:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   37640:	6465 0d2e 000a 0000 7468 7074 635f 696c     ed......http_cli
   37650:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   37660:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   37670:	0a0d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   37680:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   37690:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   376a0:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   376b0:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   376c0:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   376d0:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   376e0:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   376f0:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   37700:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   37710:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   37720:	5f49 4f43 4e4e 4345 4554 0d44 000a 0000     I_CONNECTED.....
   37730:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   37740:	5f49 4944 4353 4e4f 454e 5443 4445 0a0d     I_DISCONNECTED..
   37750:	0000 0000 6574 7473 6e69 3167 3332 0000     ....testing123..
   37760:	6559 7465 0000 0000 6977 6966 635f 3a62     Yeet....wifi_cb:
   37770:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   37780:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
   37790:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
   377a0:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
   377b0:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   377c0:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   377d0:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   377e0:	6c73 746f 2e2e 0d2e 000a 0000 6e69 7469     slot........init
   377f0:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   37800:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   37810:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37820:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   37830:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   37840:	2e64 0a0d 0000 0000 6e69 7469 735f 6f74     d.......init_sto
   37850:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   37860:	2044 6163 6472 2e2e 0d2e 000a 6e69 7469     D card......init
   37870:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   37880:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   37890:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   378a0:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   378b0:	2064 6f6d 6e75 2074 4b4f 0d2e 000a 0000     d mount OK......
   378c0:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   378d0:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   378e0:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   378f0:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   37900:	2964 0a0d 0000 0000 0a0d 2520 2a2e 0073     d)........ %.*s.
   37910:	6772 2862 0000 0000 0a0d 4752 2042 6425     rgb(......RGB %d
   37920:	2520 2064 6425 0a0d 0000 0000 227b 6167      %d %d......{"ga
   37930:	656d 3a22 005b 0000 0a0d 6147 656d 6d20     me":[.....Game m
   37940:	7365 6173 6567 7220 6365 6965 6576 2164     essage received!
   37950:	0a0d 0000 2e25 732a 0000 0000 0a0d 6150     ....%.*s......Pa
   37960:	7372 6465 4320 6d6f 616d 646e 203a 0000     rsed Command: ..
   37970:	6425 002c 0a0d 6553 746e 7020 616c 2079     %d,...Sent play 
   37980:	6f74 6320 6e6f 7274 6c6f 0d21 000a 0000     to control!.....
   37990:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   379a0:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   379b0:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   379c0:	4d49 2055 6f74 6970 2063 6572 6563 7669     IMU topic receiv
   379d0:	6465 2021 002d 0000 2e25 732a 0d20 000a     ed! -...%.*s ...
   379e0:	0a0d 6944 7473 6e61 6563 7420 706f 6369     ..Distance topic
   379f0:	7220 6365 6965 6576 2164 0a0d 0000 0000      received!......
   37a00:	3e20 203e 0000 0000 3150 4c5f 4445 455f      >> ....P1_LED_E
   37a10:	4553 3135 5f36 3654 0000 0000 6166 736c     SE516_T6....fals
   37a20:	0065 0000 7274 6575 0000 0000 0a0d 6f43     e...true......Co
   37a30:	6e6e 6365 6974 676e 7420 206f 7242 6b6f     nnecting to Brok
   37a40:	7265 2e2e 002e 0000 7242 4a73 4e42 6f56     er......BrsJBNVo
   37a50:	4251 376c 0000 0000 7472 7974 626f 6a65     QBl7....rttyobej
   37a60:	0000 0000 514d 5454 2020 7245 6f72 2072     ....MQTT  Error 
   37a70:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   37a80:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   37a90:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   37aa0:	6b6f 7265 0a0d 0a0d 0000 0000 6f43 6e6e     oker........Conn
   37ab0:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   37ac0:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   37ad0:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   37ae0:	000a 0000 3150 475f 4d41 5f45 5345 3545     ....P1_GAME_ESE5
   37af0:	3631 545f 0036 0000 6f49 7274 6361 696b     16_T6...Iotracki
   37b00:	676e 495f 554d 545f 0036 0000 514d 5454     ng_IMU_T6...MQTT
   37b10:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   37b20:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   37b30:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   37b40:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   37b50:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   37b60:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   37b70:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   37b80:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   37b90:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   37ba0:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   37bb0:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   37bc0:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   37bd0:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   37be0:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   37bf0:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   37c00:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   37c10:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   37c20:	4d20 5451 2054 7242 6b6f 7265 0d21 0d0a      MQTT Broker!...
   37c30:	000a 0000 227b 6d69 7875 3a22 6425 202c     ....{"imux":%d, 
   37c40:	6922 756d 2279 203a 6425 202c 6922 756d     "imuy": %d, "imu
   37c50:	227a 203a 6425 007d 6425 0000 7d5d 0000     z": %d}.%d..]}..
   37c60:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   37c70:	3631 545f 0036 0000 5245 4f52 2052 6e49     16_T6...ERROR In
   37c80:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   37c90:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   37ca0:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   37cb0:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   37cc0:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   37cd0:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   37ce0:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   37cf0:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   37d00:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   37d10:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   37d20:	5f36 3654 0000 0000 514d 5454 7320 6e65     6_T6....MQTT sen
   37d30:	2064 7325 0a0d 0000 71b0 0001 71bc 0001     d %s.....q...q..
   37d40:	71ce 0001 7224 0001 7244 0001 6568 706c     .q..$r..Dr..help
   37d50:	0000 0000 0a0d 6568 706c 203a 694c 7473     ......help: List
   37d60:	2073 6c61 206c 6874 2065 6572 6967 7473     s all the regist
   37d70:	7265 6465 6320 6d6f 616d 646e 0d73 0d0a     ered commands...
   37d80:	000a 0000 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   37d90:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   37da0:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   37db0:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   37dc0:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   37dd0:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   37de0:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   37df0:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   37e00:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   37e10:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   37e20:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

00037e2c <xHelpCommand>:
   37e2c:	7d4c 0003 7d54 0003 8e85 0001 0000 0000     L}..T}..........
   37e3c:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   37e4c:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   37e5c:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   37e6c:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   37e7c:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   37e8c:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37e9c:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37eac:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37ebc:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37ecc:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37edc:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37eec:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37efc:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37f0c:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37f1c:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37f2c:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   37f3c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37f4c:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   37f5c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37f6c:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   37f7c:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   37f8c:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   37f9c:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   37fac:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37fbc:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37fcc:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37fdc:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37fec:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37ffc:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   3800c:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   3801c:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   3802c:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   3803c:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   3804c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3805c:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   3806c:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   3807c:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   3808c:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   3809c:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   380ac:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   380bc:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   380cc:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   380dc:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   380ec:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   380fc:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   3810c:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   3811c:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   3812c:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   3813c:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   3814c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3815c:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   3816c:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   3817c:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   3818c:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   3819c:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   381ac:	6365 6374 616c 7373 0021 0000 95aa 0001     ectclass!.......
   381bc:	95a2 0001 95a6 0001 959a 0001 959e 0001     ................
   381cc:	95ae 0001 95b2 0001 95b6 0001 95ba 0001     ................
   381dc:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   381ec:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   381fc:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   3820c:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   3821c:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   3822c:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3823c:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3824c:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   3825c:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   3826c:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   3827c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3828c:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   3829c:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   382ac:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   382bc:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   382cc:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   382dc:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   382ec:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   382fc:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   3830c:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   3831c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3832c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3833c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3834c:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   3835c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3836c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3837c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3838c:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   3839c:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   383ac:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   383bc:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   383cc:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   383dc:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   383ec:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   383fc:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   3840c:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   3841c:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   3842c:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   3843c:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   3844c:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   3845c:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   3846c:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   3847c:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   3848c:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   3849c:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   384ac:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   384bc:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   384cc:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   384dc:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   384ec:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   384fc:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   3850c:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   3851c:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   3852c:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   3853c:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   3854c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   3855c:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   3856c:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   3857c:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   3858c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3859c:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   385ac:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   385bc:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   385cc:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   385dc:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   385ec:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   385fc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3860c:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   3861c:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   3862c:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   3863c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3864c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3865c:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   3866c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3867c:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   3868c:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   3869c:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   386ac:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   386bc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   386cc:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   386dc:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   386ec:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   386fc:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   3870c:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   3871c:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   3872c:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   3873c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3874c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3875c:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   3876c:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   3877c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3878c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3879c:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   387ac:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   387bc:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   387cc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   387dc:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   387ec:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   387fc:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   3880c:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   3881c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   3882c:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   3883c:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   3884c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3885c:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   3886c:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   3887c:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   3888c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3889c:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   388ac:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   388bc:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   388cc:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   388dc:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   388ec:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   388fc:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   3890c:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   3891c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3892c:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   3893c:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   3894c:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   3895c:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   3896c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   3897c:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   3898c:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   3899c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   389ac:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   389bc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   389cc:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   389dc:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   389ec:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   389fc:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   38a0c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38a1c:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   38a2c:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   38a3c:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   38a4c:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   38a5c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38a6c:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   38a7c:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   38a8c:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38a9c:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38aac:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38abc:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38acc:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38adc:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38aec:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38afc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38b0c:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   38b1c:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   38b2c:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   38b3c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38b4c:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   38b5c:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   38b6c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38b7c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38b8c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38b9c:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38bac:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38bbc:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38bcc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38bdc:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38bec:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38bfc:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38c0c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c1c:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   38c2c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38c3c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38c4c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38c5c:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   38c6c:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38c7c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38c8c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c9c:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38cac:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38cbc:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38ccc:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38cdc:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38cec:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38cfc:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38d0c:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   38d1c:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   38d2c:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   38d3c:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   38d4c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38d5c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38d6c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38d7c:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   38d8c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38d9c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38dac:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38dbc:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38dcc:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38ddc:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38dec:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38dfc:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38e0c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38e1c:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   38e2c:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   38e3c:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   38e4c:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   38e5c:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   38e6c:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   38e7c:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   38e8c:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38e9c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38eac:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38ebc:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38ecc:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38edc:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38eec:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38efc:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38f0c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38f1c:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38f2c:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   38f3c:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   38f4c:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   38f5c:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   38f6c:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   38f7c:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   38f8c:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   38f9c:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   38fac:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38fbc:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38fcc:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38fdc:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38fec:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38ffc:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   3900c:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   3901c:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   3902c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3903c:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   3904c:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   3905c:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   3906c:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   3907c:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   3908c:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   3909c:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   390ac:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   390bc:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   390cc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   390dc:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   390ec:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   390fc:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   3910c:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   3911c:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   3912c:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   3913c:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   3914c:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   3915c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3916c:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   3917c:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   3918c:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   3919c:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   391ac:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   391bc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   391cc:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   391dc:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   391ec:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   391fc:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3920c:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   3921c:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   3922c:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3923c:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   3924c:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   3925c:	0000 0000 6d54 2072 7653 0063 e648 0001     ....Tmr Svc.H...
   3926c:	e648 0001 e648 0001 e6d6 0001 e6a0 0001     H...H...........
   3927c:	e6ca 0001 e648 0001 e648 0001 e6d6 0001     ....H...H.......
   3928c:	e6a0 0001                                   ....

00039290 <sd_mmc_trans_units>:
   39290:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

000392ac <sd_trans_multipliers>:
   392ac:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   392bc:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   392cc:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   392dc:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

000392ec <mmc_trans_multipliers>:
   392ec:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   392fc:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   3930c:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   3931c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   3932c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3933c:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   3934c:	746c 6320 646d 000a 000d 0000               lt cmd......

00039358 <__FUNCTION__.17099>:
   39358:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   39368:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   39378:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   39388:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39398:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   393a8:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   393b8:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   393c8:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   393d8:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   393e8:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   393f8:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   39408:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   39418:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   39428:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   39438:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   39448:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   39458:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   39468:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   39478:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   39488:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   39498:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   394a8:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   394b8:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   394c8:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   394d8:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   394e8:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   394f8:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   39508:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   39518:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   39528:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   39538:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   39548:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   39558:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   39568:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   39578:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   39588:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   39598:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   395a8:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   395b8:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   395c8:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   395d8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   395e8:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   395f8:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   39608:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   39618:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   39628:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   39638:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   39648:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   39658:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   39668:	203f 6425 000a 0000 27e8 0002 27b8 0002     ? %d.....'...'..
   39678:	27b0 0002 27c8 0002 27c0 0002 27e0 0002     .'...'...'...'..
   39688:	27d0 0002 27d8 0002                         .'...'..

00039690 <__FUNCTION__.17967>:
   39690:	6968 5f66 6573 646e 0000 0000               hif_send....

0003969c <__FUNCTION__.17977>:
   3969c:	6968 5f66 7369 0072                         hif_isr.

000396a4 <__FUNCTION__.17986>:
   396a4:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000396b4 <__FUNCTION__.17998>:
   396b4:	6968 5f66 6572 6563 7669 0065               hif_receive.

000396c0 <__FUNCTION__.18014>:
   396c0:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   396d0:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   396e0:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   396f0:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   39700:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39710:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   39720:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   39730:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   39740:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   39750:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   39760:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   39770:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   39780:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   39790:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   397a0:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   397b0:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   397c0:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   397d0:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   397e0:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   397f0:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   39800:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   39810:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   39820:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   39830:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   39840:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   39850:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   39860:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   39870:	2064 000a 0a0d 0000 694d 6d73 7461 6863     d ......Mismatch
   39880:	4620 7269 616d 7277 2065 6556 7372 6f69      Firmawre Versio
   39890:	0a6e 0000 654b 2079 7369 6e20 746f 7620     n...Key is not v
   398a0:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
   398b0:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
   398c0:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
   398d0:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
   398e0:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   398f0:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   39900:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   39910:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   39920:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
   39930:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
   39940:	505f 5f53 4553 5652 5245 205f 7369 6e20     _PS_SERVER_ is n
   39950:	746f 6420 6665 6e69 6465 000a 694c 7473     ot defined..List
   39960:	6e65 6320 6168 6e6e 6c65 7320 6f68 6c75     en channel shoul
   39970:	2064 6e6f 796c 6220 2065 324d 5f4d 4957     d only be M2M_WI
   39980:	4946 435f 5f48 2f31 2f36 3131 0a20 0000     FI_CH_1/6/11 ...
   39990:	4f50 4557 2052 4153 4556 2520 0a64 0000     POWER SAVE %d...
   399a0:	4e49 4156 494c 2044 4f44 414d 4e49 4e20     INVALID DOMAIN N
   399b0:	4d41 0a45 0000 0000 5250 474e 4220 6675     AME.....PRNG Buf
   399c0:	6566 2072 7865 6563 6465 6465 6d20 7861     fer exceeded max
   399d0:	6d69 6d75 7320 7a69 2065 6425 6f20 2072     imum size %d or 
   399e0:	554e 4c4c 4220 6675 6566 0a72 0000 0000     NULL Buffer.....

000399f0 <__FUNCTION__.17949>:
   399f0:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

000399fc <__FUNCTION__.17978>:
   399fc:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00039a0c <__FUNCTION__.18009>:
   39a0c:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   39a1c:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   39a2c:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   39a3c:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   39a4c:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   39a5c:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   39a6c:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   39a7c:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   39a8c:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   39a9c:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00039aac <__FUNCTION__.17806>:
   39aac:	6863 7069 775f 6b61 0065 0000               chip_wake...

00039ab8 <__FUNCTION__.17855>:
   39ab8:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   39ac8:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   39ad8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   39ae8:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39af8:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39b08:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   39b18:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   39b28:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   39b38:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   39b48:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   39b58:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   39b68:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   39b78:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   39b88:	6920 696e 2074 7562 0a73 0000                init bus...

00039b94 <__FUNCTION__.17853>:
   39b94:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00039ba0 <__FUNCTION__.17860>:
   39ba0:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00039bb0 <crc7_syndrome_table>:
   39bb0:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   39bc0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   39bd0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   39be0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   39bf0:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   39c00:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   39c10:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   39c20:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   39c30:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   39c40:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   39c50:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   39c60:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   39c70:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   39c80:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   39c90:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   39ca0:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   39cb0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39cc0:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   39cd0:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   39ce0:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   39cf0:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39d00:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   39d10:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39d20:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39d30:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   39d40:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   39d50:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   39d60:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   39d70:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   39d80:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   39d90:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   39da0:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   39db0:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   39dc0:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   39dd0:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   39de0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39df0:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   39e00:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39e10:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39e20:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39e30:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39e40:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39e50:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39e60:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39e70:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39e80:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39e90:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   39ea0:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   39eb0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39ec0:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   39ed0:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   39ee0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   39ef0:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   39f00:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   39f10:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39f20:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39f30:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   39f40:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   39f50:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   39f60:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   39f70:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39f80:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39f90:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   39fa0:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   39fb0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   39fc0:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   39fd0:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   39fe0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39ff0:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3a000:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3a010:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3a020:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3a030:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3a040:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3a050:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3a060:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3a070:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3a080:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3a090:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a0a0:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3a0b0:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3a0c0:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3a0d0:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3a0e0:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3a0f0:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3a100:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3a110:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3a120:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3a130:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3a140:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3a150:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a160:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a170:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3a180:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3a190:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3a1a0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a1b0:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a1c0:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3a1d0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a1e0:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3a1f0:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3a200:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3a210:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3a220:	2e2e 0a2e 0000 0000 4338 0002 4338 0002     ........8C..8C..
   3a230:	43c8 0002 428c 0002 42d2 0002 42f4 0002     .C...B...B...B..
   3a240:	437a 0002 437a 0002 4434 0002 4260 0002     zC..zC..4D..`B..
   3a250:	448e 0002 448e 0002 448e 0002 448e 0002     .D...D...D...D..
   3a260:	4316 0002 4898 0002 4898 0002 4920 0002     .C...H...H.. I..
   3a270:	47fc 0002 483e 0002 485c 0002 48d6 0002     .G..>H..\H...H..
   3a280:	48d6 0002 4982 0002 47d4 0002 49d2 0002     .H...I...G...I..
   3a290:	49d2 0002 49d2 0002 49d2 0002 487a 0002     .I...I...I..zH..

0003a2a0 <__FUNCTION__.17128>:
   3a2a0:	7073 5f69 6d63 0064                         spi_cmd.

0003a2a8 <__FUNCTION__.17135>:
   3a2a8:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003a2b8 <__FUNCTION__.17144>:
   3a2b8:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003a2c4 <__FUNCTION__.17177>:
   3a2c4:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3a2d4:	0000 0000                                   ....

0003a2d8 <__FUNCTION__.17223>:
   3a2d8:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003a2e8 <__FUNCTION__.17235>:
   3a2e8:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003a2f8 <__FUNCTION__.17246>:
   3a2f8:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003a308 <__FUNCTION__.17258>:
   3a308:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003a318 <__FUNCTION__.17269>:
   3a318:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003a324 <__FUNCTION__.17290>:
   3a324:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3a334:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3a344:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3a354:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3a364:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3a374:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3a384:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3a394:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3a3a4:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3a3b4:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3a3c4:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3a3d4:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3a3e4:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3a3f4:	2074 2230 0000 0000                         t 0"....

0003a3fc <lun_desc>:
   3a3fc:	006d 0002 00c5 0002 0111 0002 015d 0002     m...........]...
   3a40c:	018d 0002 0211 0002 02a1 0002 a3e4 0003     ................
   3a41c:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3a42c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3a43c:	a2b6 0002 a330 0002 a330 0002 a2d4 0002     ....0...0.......
   3a44c:	a2ce 0002 a2da 0002 a2bc 0002 a2e0 0002     ................
   3a45c:	a316 0002 a518 0002 a568 0002 a568 0002     ........h...h...
   3a46c:	a564 0002 a50a 0002 a52a 0002 a4fa 0002     d.......*.......
   3a47c:	a53c 0002 a54e 0002 a5b6 0002 a5e4 0002     <...N...........
   3a48c:	a5e4 0002 a5e0 0002 a5b0 0002 a5bc 0002     ................
   3a49c:	a5aa 0002 a5c2 0002 a5c8 0002               ............

0003a4a8 <tcc_modules>:
   3a4a8:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003a4b4 <_tcc_gclk_ids>:
   3a4b4:	1a1a 001b                                   ....

0003a4b8 <_tcc_apbcmasks>:
   3a4b8:	0100 0000 0200 0000 0400 0000               ............

0003a4c4 <_tcc_maxs>:
   3a4c4:	ffff 00ff ffff 00ff ffff 0000               ............

0003a4d0 <_tcc_cc_nums>:
   3a4d0:	0204 0002                                   ....

0003a4d4 <_tcc_ow_nums>:
   3a4d4:	0408 0002                                   ....

0003a4d8 <_tcc_intflag>:
   3a4d8:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3a4e8:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3a4f8:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003a508 <LfnOfs>:
   3a508:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3a518:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3a528:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3a538:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3a548:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3a558:	5441 2020 2020 0020                         AT     .

0003a560 <excvt.4558>:
   3a560:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3a570:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3a580:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3a590:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3a5a0:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3a5b0:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3a5c0:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3a5d0:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003a5e0 <Tbl>:
   3a5e0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3a5f0:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3a600:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3a610:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3a620:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3a630:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3a640:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3a650:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3a660:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3a670:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3a680:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3a690:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3a6a0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3a6b0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3a6c0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3a6d0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003a6e0 <tbl_lower.4308>:
   3a6e0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3a6f0:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3a700:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3a710:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3a720:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3a730:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3a740:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3a750:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3a760:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3a770:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3a780:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3a790:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3a7a0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3a7b0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3a7c0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3a7d0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3a7e0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3a7f0:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3a800:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3a810:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3a820:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3a830:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3a840:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3a850:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3a860:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3a870:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3a880:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3a890:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3a8a0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3a8b0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003a8c0 <tbl_upper.4309>:
   3a8c0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3a8d0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3a8e0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3a8f0:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3a900:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3a910:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3a920:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3a930:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3a940:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3a950:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3a960:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3a970:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3a980:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3a990:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3a9a0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3a9b0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3a9c0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3a9d0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3a9e0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3a9f0:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3aa00:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3aa10:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3aa20:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3aa30:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3aa40:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3aa50:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3aa60:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3aa70:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3aa80:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3aa90:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3aaa0:	f922 0002 f922 0002 f922 0002 f7b0 0002     "..."...".......
   3aab0:	f922 0002 f89a 0002 f922 0002 f922 0002     "......."..."...
   3aac0:	f922 0002 f922 0002 f922 0002 f922 0002     "..."..."..."...
   3aad0:	f922 0002 f914 0002 514d 4354 0000 0000     ".......MQTC....
   3aae0:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3aaf0:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3ab30:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3ab48:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3ab88:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3ab98:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3aba8:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3abb8:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3abc8:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3abd8:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3abe8:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3abf8:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3ac08:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3ac18:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3ac28:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3ac38:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3ac48:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3ac58:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3ac68:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3ac78:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3ac88:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3ac98:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3aca8:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3acb8:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3acc8:	5448 5054 002f 0000 0d31 0000 1a16 0003     HTTP/...1.......
   3acd8:	1a10 0003 1a0a 0003 1a04 0003 1a1c 0003     ................
   3ace8:	19fe 0003 1a1c 0003 19f8 0003 19f2 0003     ................
   3acf8:	1a1c 0003 19ec 0003 19ec 0003 19e6 0003     ................
   3ad08:	19e0 0003 19da 0003 2000 4200 2400 4200     ......... .B.$.B
   3ad18:	2800 4200 0a0d 2d2d 2d2d 452d 4553 3135     .(.B..-----ESE51
   3ad28:	2036 614d 6e69 5020 6f72 7267 6d61 2d2d     6 Main Program--
   3ad38:	2d2d 0d2d 000a 0000 0a0d 6e49 7469 6169     ---.......Initia
   3ad48:	696c 657a 4820 2e57 2e2e 0a0d 0000 0000     lize HW.........
   3ad58:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3ad68:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3ad78:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3ad88:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3ad98:	6143 6e6e 746f 6620 6e69 2064 4d49 2155     Cannot find IMU!
   3ada8:	0a0d 0000 4d49 2055 6f66 6e75 2164 0a0d     ....IMU found!..
   3adb8:	0000 0000 4d49 2055 6e69 7469 6169 696c     ....IMU initiali
   3adc8:	657a 2164 0a0d 0000 6f43 6c75 2064 6f6e     zed!....Could no
   3add8:	2074 6e69 7469 6169 696c 657a 4920 554d     t initialize IMU
   3ade8:	0a0d 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
   3adf8:	6420 7369 6174 636e 2065 6573 736e 726f      distance sensor
   3ae08:	0a0d 0000 6944 7473 6e61 6563 7320 6e65     ....Distance sen
   3ae18:	6f73 2072 6e69 7469 6169 696c 657a 0d64     sor initialized.
   3ae28:	000a 0000 6548 7061 6220 6665 726f 2065     ....Heap before 
   3ae38:	7473 7261 6974 676e 7420 7361 736b 203a     starting tasks: 
   3ae48:	6425 0000 4c43 5f49 4154 4b53 0000 0000     %d..CLI_TASK....
   3ae58:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   3ae68:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   3ae78:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   3ae88:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   3ae98:	4c43 3a49 2520 0d64 0d0a 000a 4955 5420     CLI: %d.....UI T
   3aea8:	7361 006b 5245 3a52 5520 2049 6174 6b73     ask.ERR: UI task
   3aeb8:	6320 756f 646c 6e20 746f 6220 2065 6e69      could not be in
   3aec8:	7469 6169 696c 657a 2164 0a0d 0000 0000     itialized!......
   3aed8:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3aee8:	6e69 2067 4955 5420 7361 3a6b 2520 0d64     ing UI Task: %d.
   3aef8:	0d0a 000a 6f43 746e 6f72 206c 6154 6b73     ....Control Task
   3af08:	0000 0000 5245 3a52 4320 6e6f 7274 6c6f     ....ERR: Control
   3af18:	7420 7361 206b 6f63 6c75 2064 6f6e 2074      task could not 
   3af28:	6562 6920 696e 6974 6c61 7a69 6465 0d21     be initialized!.
   3af38:	000a 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3af48:	6174 7472 6e69 2067 6f43 746e 6f72 206c     tarting Control 
   3af58:	6154 6b73 203a 6425 0a0d 0a0d 0000 0000     Task: %d........
   3af68:	4957 4946 545f 5341 004b 0000 5245 3a52     WIFI_TASK...ERR:
   3af78:	5720 4649 2049 6174 6b73 6320 756f 646c      WIFI task could
   3af88:	6e20 746f 6220 2065 6e69 7469 6169 696c      not be initiali
   3af98:	657a 2164 0a0d 0000 6548 7061 6120 7466     zed!....Heap aft
   3afa8:	7265 7320 6174 7472 6e69 2067 4957 4946     er starting WIFI
   3afb8:	203a 6425 0a0d 0000 7245 6f72 2072 6e6f     : %d....Error on
   3afc8:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   3afd8:	6e6f 6f20 206e 5246 4545 5452 534f 0d21     on on FREERTOS!.
   3afe8:	000a 0000 7245 6f72 2072 6e6f 7320 6174     ....Error on sta
   3aff8:	6b63 6f20 6576 6672 6f6c 2077 6e6f 4620     ck overflow on F
   3b008:	4552 5245 4f54 2153 0a0d 0000 3c10 0003     REERTOS!.....<..
   3b018:	3b60 0003 3b60 0003 3b5e 0003 3c02 0003     `;..`;..^;...<..
   3b028:	3c02 0003 3bf8 0003 3b5e 0003 3c02 0003     .<...;..^;...<..
   3b038:	3bf8 0003 3c02 0003 3b5e 0003 3c08 0003     .;...<..^;...<..
   3b048:	3c08 0003 3c08 0003 3c98 0003 461c 0003     .<...<...<...F..
   3b058:	45fe 0003 45b8 0003 44d6 0003 45b8 0003     .E...E...D...E..
   3b068:	45f0 0003 45b8 0003 44d6 0003 45fe 0003     .E...E...D...E..
   3b078:	45fe 0003 45f0 0003 44d6 0003 44ce 0003     .E...E...D...D..
   3b088:	44ce 0003 44ce 0003 4834 0003 4c7c 0003     .D...D..4H..|L..
   3b098:	4b3c 0003 4b3c 0003 4b38 0003 4c54 0003     <K..<K..8K..TL..
   3b0a8:	4c54 0003 4c46 0003 4b38 0003 4c54 0003     TL..FL..8K..TL..
   3b0b8:	4c46 0003 4c54 0003 4b38 0003 4c5c 0003     FL..TL..8K..\L..
   3b0c8:	4c5c 0003 4c5c 0003 4e60 0003               \L..\L..`N..

0003b0d4 <_global_impure_ptr>:
   3b0d4:	0134 2000                                   4.. 

0003b0d8 <__sf_fake_stderr>:
	...

0003b0f8 <__sf_fake_stdin>:
	...

0003b118 <__sf_fake_stdout>:
	...
   3b138:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3b148:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3b158:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3b168:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003b175 <_ctype_>:
   3b175:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3b185:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3b195:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3b1a5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3b1b5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3b1c5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3b1d5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3b1e5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3b1f5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003b278 <_init>:
   3b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b27a:	46c0      	nop			; (mov r8, r8)
   3b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b27e:	bc08      	pop	{r3}
   3b280:	469e      	mov	lr, r3
   3b282:	4770      	bx	lr

0003b284 <__init_array_start>:
   3b284:	000120dd 	.word	0x000120dd

0003b288 <_fini>:
   3b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b28a:	46c0      	nop			; (mov r8, r8)
   3b28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b28e:	bc08      	pop	{r3}
   3b290:	469e      	mov	lr, r3
   3b292:	4770      	bx	lr

0003b294 <__fini_array_start>:
   3b294:	000120b5 	.word	0x000120b5
